### VIII. RELATED WORK

We classify the related work into four main categories: compilers for Garbled Circuits (GCs) (Section VIII-A), libraries for GCs (Section VIII-B), GC implementations with hardware accelerators (Section VIII-C), and GC implementations on mobile devices (Section VIII-D).

#### A. Compilers for Garbled Circuits

Several tools have been developed to compile high-level function descriptions into Boolean circuits suitable for use in GCs. The first notable implementation was Fairplay [54], which introduced a custom high-level procedural language called SFDL (Secure Function Definition Language). This language is compiled into SHDL (Secure Hardware Description Language). Another significant compiler is TASTY [31], which allows the combination of garbled circuits and homomorphic encryption. The compiler described in [47] demonstrated scalability to circuits with billions of gates, such as a 4095x4095-bit edit distance circuit with nearly 6 billion gates. The compiler in [23] supports a subset of ANSI C as the input language.

To reduce memory overhead and enhance scalability, PCF [46] introduced loops that, if manually specified in the high-level language, are retained until the GC evaluation. In contrast, TinyGarble automatically infers loops and optimizes across multiple sub-circuits.

#### B. Libraries for Garbled Circuits

Instead of compiling circuits, some approaches use libraries to program and integrate circuits into high-level applications. FastGC [36] is one such library-based approach. Another example is VMCRYPT [53], which allows dynamic construction and deconstruction of sub-circuits. FastGC was extended in [32] to reuse the same sub-circuits. ABY [18] is another library that efficiently combines multiple secure computation approaches.

In these library-based approaches, the circuits and their decomposition into sub-circuits must be manually specified by the programmer. In contrast, our approach provides an automated solution.

#### C. GC Implementations with Hardware Accelerators

Several works have improved GC performance by implementing them in hardware, on GPUs, or using AES-NI available in recent CPUs. These implementations can benefit from the compact representation generated by TinyGarble.

Järvinen et al. [38] proposed a generic hardware architecture for GC, realizing two FPGA-based prototypes: a system-on-a-programmable-chip with access to a hardware crypto accelerator targeting smartcards and smartphones, and a standalone hardware implementation targeting ASICs.

Recent advancements include GPU-accelerated GCs. Husted et al. [37] implemented Yao's GC using optimizations such as Free XOR, pipelining, and OT extension. Pu et al. [61] used GC for dynamic programming to solve the Edit-Distance (ED) and Smith-Waterman (SW) problems, employing similar optimizations along with permute-and-encrypt, efficient lookup-table design, and compact circuits. Frederiksen et al. [24] implemented a secure computation protocol with security against malicious adversaries based on cut-and-choose of Yao's garbled circuit and an efficient OT extension for two-party computation on GPUs.

Bellare et al. [2] introduced JustGarble, which uses fixed-key AES for circuit-garbling. They demonstrated that their implementation using AES-NI can garble and execute circuits more efficiently than any previous method.

#### D. GC Implementations on Mobile Devices

Our approach for generating compact circuit representations is particularly beneficial for secure computation on resource-constrained devices like mobile devices, which have limited main memory. Secure computation on mobile devices using garbled circuits was proposed in [35]. The protocol in [17], which uses a smartcard installed in the mobile device, can also benefit from our more compact circuit representation. In [10] and [11], the mobiles no longer need to process circuits as GC generation and evaluation are outsourced to cloud servers.

### IX. CONCLUSION AND FUTURE DIRECTIONS

We present TinyGarble, an automated tool that generates highly compact and scalable circuits for Yao's garbled circuit (GC) protocol. We are the first to define circuit generation for GC as a sequential synthesis problem and to leverage powerful and established HDL synthesis techniques with our custom libraries and objectives. Compared to one of the best automatic tools for GC generation, PCF [46], TinyGarble significantly improves results. For example, TinyGarble compacts a 1,024-bit multiplication by 2,504 times, reducing the number of non-XOR gates by 80%. It compresses a 16,000-bit Hamming distance by a factor of 7,345 times, with 47% fewer non-XOR gates.

Furthermore, TinyGarble can implement functions that have never been reported before, such as SHA-3. We perform extensive benchmarking with both commercial and open-source hardware synthesis tools and compare the results. Our approach strongly improves existing results, making practical secure computation feasible with many exciting applications. For instance, TinyGarble enables GC operations on mobile platforms, which were previously prohibitively expensive. Additionally, we introduce a scalable secure processor for private function evaluation (PFSFE) based on the MIPS architecture, where the private function can be compiled using ubiquitous tools like gcc.

In future work, we will investigate the possibility of connecting Oblivious RAM (ORAM) to our secure processor to benefit from its lower amortized complexity for memory access. We are also working on interfacing TinyGarble with other GC schemes, such as the recently proposed Half Gates method [72].

### ACKNOWLEDGMENTS

The authors would like to thank Prof. David Evans for his insightful comments and anonymous reviewers for their helpful suggestions to improve this work. The Rice University authors are partially supported by an Office of Naval Research grant (ONR-R17460), a National Science Foundation grant (CNS-1059416), and a U.S. Army Research Office grant (ARO-STIR-W911NF-14-1-0456) to ACES lab at Rice University. The work of authors at TU Darmstadt is partially supported by the European Union’s Seventh Framework Program (FP7/2007-2013) grant agreement n. 609611 (PRACTICE), the German Science Foundation (DFG) as part of project E3 within the CRC 1119 CROSSING, the German Federal Ministry of Education and Research (BMBF) within EC SPRIDE, and the Hessian LOEWE excellence initiative within CASED.

### REFERENCES

[1] Mauro Barni, Pierluigi Failla, Vladimir Kolesnikov, Riccardo Lazzeretti, Ahmad-Reza Sadeghi, and Thomas Schneider. Secure evaluation of private linear branching programs with medical applications. In ESORICS, pages 424–439. Springer, 2009.

[2] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip Rogaway. Efficient garbling from a fixed-key blockcipher. In S&P, pages 478–492. IEEE, 2013.

[3] Mihir Bellare, Viet Tung Hoang, and Phillip Rogaway. Foundations of garbled circuits. In CCS, pages 784–796. ACM, 2012.

[4] Assaf Ben-David, Noam Nisan, and Benny Pinkas. FairplayMP: a system for secure multi-party computation. In CCS, pages 257–266. ACM, 2008.

[5] Joan Boyar and René Peralta. Concrete multiplicative complexity of symmetric functions. In MFCS, pages 179–189. Springer, 2006.

[6] Robert K. Brayton, Richard Rudell, Alberto Sangiovanni-Vincentelli, and Albert R. Wang. MIS: A multiple-level logic optimization system. TCAD, pages 1062–1081, November 2006.

[7] Robert King Brayton, Alberto L. Sangiovanni-Vincentelli, Curtis T. McMullen, and Gary D. Hachtel. Logic Minimization Algorithms for VLSI Synthesis. Kluwer Academic Publishers, 1984.

[8] Justin Brickell, Donald E. Porter, Vitaly Shmatikov, and Emmett Witchel. Privacy-preserving remote diagnostics. In CCS, pages 498–507. ACM, 2007.

[9] Julien Bringer, Hervé Chabanne, and Alain Patey. Privacy-preserving biometric identification using secure multiparty computation: An overview and recent trends. Signal Processing Magazine, IEEE, pages 42–52, 2013.

[10] Henry Carter, Charles Lever, and Patrick Traynor. Whitewash: Outsourcing garbled circuit generation for mobile devices. In ACSAC. ACM, 2014.

[11] Henry Carter, Benjamin Mood, Patrick Traynor, and Kevin Butler. Secure outsourced garbled circuit evaluation for mobile phones. In USENIX Security, pages 289–304. USENIX, 2013.

[12] Chi-Min Chu, Miodrag Potkonjak, Markus Thaler, and Jan Rabaey. HYPER: An interactive synthesis environment for high-performance real-time applications. In ICCD, pages 432–435. IEEE, 1989.

[13] Design Compiler. Synopsys Inc. http://www.synopsys.com/Tools/Implementation/RTLSynthesis/DesignCompiler, 2000.

[14] Miguel R. Corazao, Marwan A. Khalaf, Lisa M. Guerra, Miodrag Potkonjak, and Jan M. Rabaey. Performance optimization using template mapping for datapath-intensive high-level synthesis. TCAD, pages 877–888, 2006.

[15] Martin Davis. Engines of Logic: Mathematicians and the Origin of the Computer. WW Norton & Co., Inc., 2001.

[16] Jan Decaluwe. MyHDL: a Python-based hardware description language. Linux Journal, page 5, 2004.

[17] Daniel Demmler, Thomas Schneider, and Michael Zohner. Ad-hoc secure two-party computation on mobile devices using hardware tokens. In USENIX Security, pages 893–908. USENIX, 2014.

[18] Daniel Demmler, Thomas Schneider, and Michael Zohner. ABY – a framework for efficient mixed-protocol secure two-party computation. In NDSS. The Internet Society, 2015.

[19] C-based Design. High-level synthesis with Vivado HLS. http://www.xilinx.com/products/design-tools/vivado.html, 2013.

[20] Srinivas Devadas, Abhijit Ghosh, and Kurt Keutzer. Logic Synthesis. McGraw-Hill, Inc., 1994.

[21] Encounter. RTL compiler by Cadence Design Systems. http://www.cadence.com/products/di/pages/default.aspx.

[22] David Evans, Yan Huang, Jonathan Katz, and Lior Malka. Efficient privacy-preserving biometric identification. In NDSS, 2011.

[23] Martin Franz, Andreas Holzer, Stefan Katzenbeisser, Christian Schallhart, and Helmut Veith. CBMC-GC: An ANSI C compiler for secure two-party computations. In Compiler Construction, pages 244–249. Springer, 2014.

[24] Tore K. Frederiksen and Jesper B. Nielsen. Fast and maliciously secure two-party computation using the GPU. In ACNS, pages 339–356. Springer, 2013.

[25] Craig Gentry, Shai Halevi, Steve Lu, Rafail Ostrovsky, Mariana Raykova, and Daniel Wichs. Garbled RAM revisited. In EUROCRYPT, pages 405–422. Springer, 2014.

[26] Oded Goldreich, Silvio Micali, and Avi Wigderson. How to play any mental game. In STOC, pages 218–229. ACM, 1987.

[27] Oded Goldreich and Rafail Ostrovsky. Software protection and simulation on oblivious RAMs. JACM, 1996.

[28] S. Dov Gordon, Jonathan Katz, Vladimir Kolesnikov, Fernando Krell, Tal Malkin, Mariana Raykova, and Yevgeniy Vahlis. Secure two-party computation in sublinear (amortized) time. In CCS. ACM, 2012.

[29] Mentor Graphics and Customer Success Story. HDL designer. http://www.mentor.com/products/fpga/hdl_design/hdl_designer_series/, 2008.