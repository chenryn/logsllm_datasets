### Transient Execution Exploits: A Root-Cause-Based Classification

To better understand the capabilities of transient execution exploits, we propose a root-cause-based classification as illustrated in Figure 10. We draw from Intel's terminology to define two primary categories of root causes for Bad Speculation (i.e., transient execution): **Control-Flow Misprediction** (e.g., branch misprediction) and **Data Misprediction** (e.g., machine clear). Based on these categories, we observe that all known root causes of transient execution paths can be classified into four subclasses: **Predictors**, **Exceptions**, **Likely Invariants Violations**, and **Interrupts**.

#### Figure 10: Root Cause-Centric Classification of Known Transient Execution Paths
(Acronyms are defined in Appendix B)

### Subclasses of Transient Execution Paths

1. **Predictors**
   - This category includes prediction-based causes of bad speculation due to either control-flow or data mispredictions. Mistraining a predictor and forcing a misprediction can create a transient execution path accessing erroneous code or data.
   - **Control-Flow Predictors**: These are failed attempts to guess the next instructions to execute.
   - **Data Predictors**: These are failed attempts to operate on not-yet-validated data.
   - Mispredictions are commonly used in attacks like Spectre and its variants [11, 20, 28, 40, 41, 43, 48, 55, 65, 82].

2. **Exceptions**
   - This class includes the causes of machine clear due to exceptions, such as different (sub)classes of page faults. Forcing an exception can create a transient execution path that erroneously executes code following the exception-inducing instruction.
   - Exceptions are less common in managing transient execution windows (as they require dedicated handling) but have been extensively used in Meltdown-like attacks [7, 8, 47, 59, 63, 67, 71, 74–76, 78].

3. **Interrupts**
   - This class includes the causes of machine clear due to hardware interrupts. Similar to exceptions, forcing a hardware interrupt can create a transient execution path that erroneously executes code following the interrupted instruction.
   - Hardware interrupts are asynchronous and thus difficult to control, making them a less than ideal way to manage transient execution windows. Nonetheless, they have been exploited in prior side-channel attacks [72].

4. **Likely Invariants Violations**
   - This class includes all remaining causes of machine clear, derived from likely invariants used by the CPU. Such invariants typically hold but occasionally fail, allowing hardware to implement fast-path optimizations.
   - Compared to exceptions and interrupts, slow-path occurrences are more frequent, requiring more efficient handling in hardware or microcode.
   - Examples of such invariants include store instructions not targeting cached instructions and floating-point operations not operating on denormal numbers. Forcing a likely invariant violation can create a transient execution path accessing erroneous code or data.
   - We have shown that such violations are not only a realistic way to manage transient execution windows but also provide new opportunities and primitives for transient execution attacks.

### Systematic Study of Machine Clears

In our research, we focus on machine clears to systematically study all root causes of transient execution, fully reverse engineering their behavior, and uncovering their security implications beyond the current state of the art.

### Conclusions

We have demonstrated that the root causes of transient execution are diverse and extend beyond simple branch misprediction. By systematically exploring and reverse engineering the previously unexplored class of bad speculation known as machine clear, we have discussed several transient execution paths neglected in the literature, examining their capabilities and new attack opportunities. Additionally, we presented two new machine clear-based transient execution attack primitives: Floating Point Value Injection (FPVI) and Speculative Code Store Bypass (SCSB). We also provided an end-to-end FPVI exploit disclosing arbitrary memory in Firefox and analyzed the applicability of SCSB in real-world applications such as JIT engines. Furthermore, we proposed mitigations and evaluated their performance overhead. Finally, we introduced a new root cause-based classification for all known transient execution paths.

### Related Work

The initial security implications of transient execution were explored by Spectre [31, 41] and Meltdown [47], leading to extensive research on transient execution attacks [6–11, 28, 40, 43, 48, 59, 63, 65, 67, 68, 71, 74–76, 78, 79, 82]. Our work is the first to systematize the root causes of transient execution and examine the many unexplored cases of machine clears. We briefly survey prior security efforts concerned with the major causes of machine clear discussed in this paper.

### Disclosure

We disclosed Floating Point Value Injection and Speculative Code Store Bypass to CPU, browser, OS, and hypervisor vendors in February 2021. Following our reports, Intel confirmed the FPVI (CVE-2021-0086) and SCSB (CVE-2021-0089) vulnerabilities, rewarded them through the Intel Bug Bounty program, and released a security advisory with recommendations in line with our proposed mitigations [34]. Mozilla confirmed the FPVI exploit (CVE-2021-29955 [21, 22]), rewarded it through the Mozilla Security Bug Bounty program, and deployed a mitigation based on conditionally masking malicious NaN-boxed FP results in Firefox 87 [51].

### Acknowledgments

We thank our shepherd Daniel Genkin and the anonymous reviewers for their valuable comments. We also thank Erik Bosman from VUSec and Andrew Cooper from Citrix for their input, Intel and Mozilla engineers for productive mitigation discussions, Travis Downs for his MD reverse engineering, and Evan Wallace for his Float Toy tool. This work was supported by the European Union’s Horizon 2020 research and innovation programme under grant agreements No. 786669 (ReAct) and 825377 (UNICORE), by Intel Corporation through the Side Channel Vulnerability ISRA, and by the Dutch Research Council (NWO) through the INTERSECT project.

### References

[1] IEEE Standard for Floating-Point Arithmetic. IEEE Std. 754-2019, 2019.
[2] Alejandro Cabrera Aldaya and Billy Bob Brumley. Hyperdegrade: From GHz to MHz effective CPU frequencies. arXiv preprint arXiv:2101.01077.
[3] AMD. AMD64 Architecture Programmer’s Manual.
[4] Marc Andrysco, David Kohlbrenner, Keaton Mowery, Ranjit Jhala, Sorin Lerner, and Hovav Shacham. On subnormal floating point and abnormal timing. In 2015 IEEE S & P.
[5] ARM. Architecture Reference Manual for Armv8-A.
[6] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner, Alessandro Sorniotti, Babak Falsafi, Mathias Payer, and Anil Kurmus. Smotherspectre: exploiting speculative execution through port contention. In CCS’19.
[7] Jo Van Bulck, Marina Minkin, Ofer Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution. In USENIX Security’18.
[8] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Marina Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, Jo Van Bulck, and Yuval Yarom. Fallout: Leaking Data on Meltdown-resistant CPUs. In CCS’19.
[9] Claudio Canella, Michael Schwarz, Martin Haubenwallner, Martin Schwarzl, and Daniel Gruss. KASLR: Break it, fix it, repeat. In ACM ASIA CCS 2020.
[10] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin Von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. A systematic evaluation of transient execution attacks and defenses. In USENIX Security 19.
[11] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H. Lai. Sgxpectre: Stealing Intel secrets from SGX enclaves via speculative execution. In 2019 IEEE EuroS&P.
[12] Chrome. V8 TurboFan documentation.
[13] Chromium. Site Isolation documentation.
[14] Victor Costan and Srinivas Devadas. Intel SGX Explained. IACR Cryptology ePrint Archive, 2016.
[15] David Devecsery, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. Optimistic hybrid analysis: Accelerating dynamic analysis through predicated static analysis. In ASPLOS 2018.
[16] Christopher Domas. Breaking the x86 ISA. Black Hat, USA, 2017.
[17] Isaac Dooley and Laxmikant Kale. Quantifying the interference caused by subnormal floating-point values. In Proceedings of the Workshop on OSIHPA, 2006.
[18] Travis Downs. Memory Disambiguation on Skylake. https://github.com/travisdowns/uarch-bench/wiki/Memory-Disambiguation-on-Skylake, 2019.
[19] Thomas Dullien. Return after free discussion. https://twitter.com/halvarflake/status/1273220345525415937.
[20] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, ECE, and Dmitry Ponomarev. Branchscope: A new side-channel attack on directional branch predictor. ACM SIGPLAN Notices, 53(2):693–707, 2018.
[21] Firefox. Firefox 87 Security Advisory. https://www.mozilla.org/en-US/security/advisories/mfsa2021-10/#CVE-2021-29955.
[22] Firefox. Firefox ESR 78.9 Security Advisory. https://www.mozilla.org/en-US/security/advisories/mfsa2021-11/#CVE-2021-29955.
[23] Firefox. Project Fission documentation.
[24] Fortinet. Use-After-Free Bug in Chakra (CVE-2018-0946). https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.
[25] Ivan Fratric. Return after free discussion. https://twitter.com/ifsecure/status/1273230733516177408.
[26] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU. In S&P, May 2018.
[27] Kourosh Gharachorloo, Anoop Gupta, and John L. Hennessy. Two techniques to enhance the performance of memory consistency models. 1991.
[28] Enes Goktas, Kaveh Razavi, Georgios Portokalidis, Herbert Bos, and Cristiano Giuffrida. Speculative Probing: Hacking Blind in the Spectre Era. In CCS, 2020.
[29] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS, February 2017.
[30] John L. Hennessy and David A. Patterson. Computer architecture: a quantitative approach. Elsevier, 2011.
[31] Jann Horn. Reading privileged memory with a side-channel. 2018.
[32] Xen Hypervisor. block_speculation function call in invoke_stub. https://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=xen/arch/x86/x86_emulate/x86_emulate.c;hb=HEAD.
[33] Xen Hypervisor. block_speculation function call in io_emul_stub_setup. https://xenbits.xen.org/gitweb/?p=xen.git;a=blob;f=xen/arch/x86/pv/emul-priv-op.c;hb=HEAD.
[34] Intel. FPVI & SCSB Intel Security Advisory 00516. https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00516.html.
[35] Intel. INTEL-SA-00088 - Bounds Check Bypass.
[36] Intel. Intel® 64 and IA-32 Architectures Optimization Reference Manual.
[37] Intel. Intel® 64 and IA-32 Architectures Software Developer’s Manual combined volumes.
[38] Intel. Intel® VTune™ Profiler User Guide - 4K Aliasing. https://software.intel.com/content/www/us/en/develop/documentation/vtune-help/top/reference/cpu-metrics-reference/l1-bound/aliasing-of-4k-address-offset.html.
[39] Intel. Deep Dive - Load Value Injection. https://software.intel.com/security-software-guidance/deep-dives/deep-dive-load-value-injection, 2020.
[40] Vladimir Kiriansky and Carl Waldspurger. Speculative buffer overflows: Attacks and defenses. arXiv:1807.03757.
[41] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre Attacks: Exploiting Speculative Execution. In S&P’19.
[42] David Kohlbrenner and Hovav Shacham. On the effectiveness of mitigations against floating-point timing channels. In USENIX Security Symposium, 2017.
[43] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and Nael Abu-Ghazaleh. Spectre Returns! Speculation Attacks using the Return Stack Buffer. In USENIX WOOT’18.
[44] Evgeni Krimer, Guillermo Savransky, Idan Mondjak, and Jacob Doweck. Counter-based memory disambiguation techniques for selectively predicting load/store conflicts, October 1, 2013. US Patent 8,549,263.
[45] Chris Lattner and Vikram Adve. LLVM: A compilation framework for lifelong program analysis & transformation. In CGO, 2004.
[66] Daniel J. Sorin, Mark D. Hill, and David A. Wood. A primer on memory consistency and cache coherence. 2011.
[46] Orion Lawlor, Hari Govind, Isaac Dooley, Michael Breitenfeld, and Laxmikant Kale. Performance degradation in the presence of subnormal floating-point values. In OSIHPA, 2005.
[67] Julian Stecklina and Thomas Prescher. LazyFP: Leaking FPU register state using microarchitectural side-channels. arXiv preprint arXiv:1806.07480, 2018.
[47] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading Kernel Memory from User Space. In USENIX Security’18.
[48] Giorgi Maisuradze and Christian Rossow. ret2spec: Speculative execution using return stack buffers. In Proceedings of the 2018 ACM SIGSAC.
[49] Andrea Mambretti, Alexandra Sandulescu, Matthias Neugschwandtner, Alessandro Sorniotti, and Anil Kurmus. Two methods for exploiting speculative control flow hijacks. In USENIX WOOT 19.
[50] Ahmad Moghimi, Jan Wichelmann, Thomas Eisenbarth, and Berk Sunar. MemJam: A false dependency attack against constant-time crypto implementations. International Journal of Parallel Programming, 2019.
[51] Mozilla. Firefox Bug 1692972 mitigation. https://hg.mozilla.org/releases/mozilla-beta/rev/b129bba64358.