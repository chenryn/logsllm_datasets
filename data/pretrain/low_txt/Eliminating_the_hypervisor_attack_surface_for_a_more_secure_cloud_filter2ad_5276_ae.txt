### Extended Page Tables (EPT) and Memory Access in Virtual Machines

Extended Page Tables (EPT) are used to assign physical pages to a specific Virtual Machine (VM). Any memory access by a VM causes the processor hardware to perform a translation using the EPT. If a VM attempts to access memory outside its allowed pages, a violation occurs, and the VM exits to the hypervisor context, where our kill VM routine is executed. The confidentiality and integrity of the VM's memory are thus dependent on the correctness of the hardware EPT implementation, which we assume has undergone significant testing and verification.

While all modern hypervisors use the EPT mechanism, they may update the mappings to provide additional capabilities such as transparent page sharing among VMs [8]. As a result, isolation today depends not only on the hardware's correctness but also on the complex hypervisor software.

### Performance Isolation and Resource Sharing

Performance isolation between VMs is crucial, especially when resources are shared. In NoHype, the hardware is relied upon to provide this isolation. The primary shared resources of concern are the network card (and associated bandwidth) and the memory bus. The network card has queues with flow control mechanisms that ensure fair resource allocation. However, the memory controller and bus do not have similar mechanisms in today’s processors [28].

### Hardening the Hypervisor

Much of the work related to hypervisors has focused on hardening them against attacks. For example, HyperSafe [35] aims to protect a hypervisor against control-flow hijacking attacks. It uses a non-bypassable memory lockdown technique (where only a special routine in the hypervisor can write to memory) and a restricted pointer indexing technique (transforming all function calls in the hypervisor to jumps from a special table). While these techniques make it more difficult to subvert the hypervisor, they add about a 5% performance overhead, and any bugs in the hypervisor could still be exploited.

Recently, HyperSentry [9] used System Management Mode (SMM) to bypass the hypervisor for integrity measurement purposes. However, these measurements only reveal traces of an attack after it has occurred and are limited to protecting against attacks that persistently modify the hypervisor executable. Although the authors report being able to invoke the measurement every 8 seconds, this still leaves a window for attackers. Additionally, their approach results in a 2.4% overhead if protections are invoked every 8 seconds. In contrast, NoHype prevents attacks from happening in the first place and does so with about a 1% performance improvement.

### Direct Access to Hardware

NoHype shares similarities with exokernels like ExOS [13] and Nemesis [22], which reduce the operating system to providing only arbitration for shared resources and give applications more direct access to hardware. We leverage modern hardware advances to push this further, where the thin software layer from exokernels is realized in hardware, allowing full commodity operating systems to run without requiring applications to be redesigned for the exokernel environment.

There have been proposals that enable a single operating system to run without a virtualization layer but can insert a virtualization layer when needed, such as during planned maintenance [25] or for consolidation through migration [19]. NoHype, however, can run multiple VMs simultaneously, each with direct access to its allocated hardware.

### Conclusions and Future Work

Today, the hypervisor is a central, powerful system software layer that controls the resources of a physical system and manages interactions with guest VMs. Due to its central role, the hypervisor and other parts of the virtualization software are prime targets for attacks, especially in shared infrastructures that allow multiple parties to run VMs.

In this paper, we presented the complete design, implementation, and evaluation of a working NoHype system on today’s commodity hardware, which removes the attack surface of the hypervisor and eliminates the vector by which VMs can exploit vulnerabilities. This is achieved by:

1. Pre-allocating processor cores and memory resources.
2. Using only virtualized I/O devices.
3. Supporting the system discovery process with a temporary hypervisor and a slightly modified guest OS.
4. Avoiding any indirection that would necessitate having a hypervisor.

This allows us to remove the interaction between the guest VMs and the hypervisor, eliminating the attack surface that a malicious VM could use to compromise the virtualization layer and then attack or obstruct other VMs. Our evaluation with benchmarks showed about a 1% faster run time.

While NoHype significantly advances the security of shared cloud infrastructures, today’s commodity hardware imposes some limitations. As future work, we will examine minimal hardware changes to further tighten the security of a NoHype system. We will also add support for live VM migration, particularly for scenarios where the initiator of the migration (the cloud provider) differs from the owner of the VM (the cloud customer). The disruption caused by this process depends on the workload of the VM [11], and the provider may not know the workload or whether it is a particularly bad time to disrupt the guest VM. We believe the correct model for migration is for the provider to notify the customer ahead of time, allowing the customer to prepare for the transient disruption (e.g., by shedding load or redirecting new requests) and participate in the migration itself (e.g., through support for OS migration [20] in the guest). Finally, we plan to explore ways for the customer to run virtualization software of its own to enable nested virtualization, which may also aid in supporting live migration.

### Acknowledgments

This work was supported in part by National Science Foundation grants: EEC-0540832 and CCF-0917134. Eric Keller was supported through an Intel Ph.D. Fellowship. We also benefited from equipment donation from Intel.

We would like to thank Tim Deegan from Citrix, Andrew Warfield from the University of British Columbia, and Don Banks from Cisco for discussions and feedback on our NoHype design. Additionally, we would like to thank our shepherd, Herbert Bos, and the anonymous CCS reviewers for their comments and suggestions.

### References

[1] ab - Apache HTTP server benchmarking tool. http://httpd.apache.org/docs/2.0/programs/ab.html.

[2] Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 2A: Instruction Set Reference, A-M, page 274. http://www.intel.com/products/processor/manuals/.

[3] Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 3B: System Programming Guide, Part 2. http://www.intel.com/products/processor/manuals/.

[4] Intel Corporation: Intel Virtualization Technology for Directed I/O. http://download.intel.com/technology/itj/2006/v10i3/v10-i3-art02.pdf.

[5] iPXE: Open Source Boot Firmware. http://ipxe.org/.

[6] National Vulnerability Database, CVE and CCE Statistics Query Page. http://web.nvd.nist.gov/view/vuln/statistics.

[7] PCI SIG: PCI-SIG Single Root I/O Virtualization. http://www.pcisig.com/specifications/iov/single_root/.

[8] Understanding Memory Resource Management in VMware ESX Server. VMware White Paper. 2009. www.vmware.com/files/pdf/perf-vsphere-memory_management.pdf.

[9] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky. HyperSentry: Enabling stealthy in-context measurement of hypervisor integrity. In ACM Conference on Computer and Communications Security (CCS), pages 38–49, October 2010.

[10] D. Champagne and R. B. Lee. Scalable architectural support for trusted software. In IEEE International Symposium on High Performance Computer Architecture (HPCA), pages 1–12, January 2010.

[11] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul, C. Limpach, I. Pratt, and A. Warfield. Live migration of virtual machines. In 2nd Symposium on Networked Systems Design and Implementation (NSDI), 2005.

[12] J. Dwoskin and R. B. Lee. Hardware-rooted trust for secure key management and transient trust. In ACM Conference on Computer and Communications Security (CCS), October 2007.

[13] D. R. Engler, M. F. Kaashoek, and J. O’Toole. Exokernel: An operating system architecture for application-level resource management. In Symposium on Operating Systems Principles (SOSP), December 1995.

[14] F. Gens. IT cloud services user survey, pt.2: Top benefits & challenges, October 2008. http://blogs.idc.com/ie/?p=210.

[15] J. L. Henning. SPEC CPU2006 benchmark descriptions. SIGARCH Comput. Archit. News, 34:1–17, September 2006.

[16] E. Keller, J. Szefer, J. Rexford, and R. B. Lee. [Reference details missing]

[17] J. Kelsey, B. Schneier, D. Wagner, and C. Hall. Side channel cryptanalysis of product ciphers. In J.-J. Quisquater, Y. Deswarte, C. Meadows, and D. Gollmann, editors, Computer Security: ESORICS 98, volume 1485 of Lecture Notes in Computer Science, pages 97–110. 1998.

[18] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4: Formal verification of an OS kernel. In Symposium on Operating Systems Principles (SOSP), pages 207–220, October 2009.

[19] T. Kooburat and M. Swift. The best of both worlds with on-demand virtualization. In Workshop on Hot Topics in Operating Systems (HotOS), May 2011.

[20] M. A. Kozuch, M. Kaminsky, and M. P. Ryan. Migration without virtualization. In Workshop on Hot Topics in Operating Systems (HotOS), May 2009.

[21] R. B. Lee, P. C. S. Kwan, J. P. McGregor, J. Dwoskin, and Z. Wang. Architecture for protecting critical secrets in microprocessors. In International Symposium on Computer Architecture (ISCA), June 2005.

[22] I. Leslie, D. McAuley, R. Black, T. Roscoe, P. Barham, D. Evers, R. Fairbairns, and E. Hyden. The design and implementation of an operating system to support distributed multimedia applications. IEEE Journal on Selected Areas in Communication, 14(7), September 1996.

[23] C. Li, A. Raghunathan, and N. K. Jha. Secure virtual machine execution under an untrusted management OS. In Proceedings of the Conference on Cloud Computing (CLOUD), July 2010.

[24] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell, and M. Horowitz. Architectural support for copy and tamper resistant software. In Architectural Support for Programming Languages and Operating Systems (ASPLOS), November 2000.

[25] D. E. Lowell, Y. Saito, and E. J. Samberg. Devirtualizable virtual machines enabling general, single-node, online maintenance. In Architectural Support for Programming Languages and Operating Systems (ASPLOS), October 2004.

[26] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB reduction and attestation. In IEEE Symposium on Security and Privacy, pages 143–158, May 2010.

[27] K. Z. Meth and J. Satran. Design of the iSCSI protocol. In IEEE Symposium on Mass Storage Systems, April 2003.

[28] T. Moscibroda and O. Mutlu. Memory performance attacks: Denial of memory service in multi-core systems. In Proceedings of USENIX Security Symposium, August 2007.

[29] L. Parziale, E. L. Alves, E. M. Dow, K. Egeler, J. J. Herne, C. Jordan, E. P. Naveen, M. S. Pattabhiraman, and K. Smith. Introduction to the new mainframe: z/VM basics, November 2007. http://www.redbooks.ibm.com/redbooks/pdfs/sg247316.pdf.

[30] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my cloud: Exploring information leakage in third-party compute clouds. In ACM Conference on Computer and Communications Security (CCS), November 2009.

[31] R. Sailer, E. Valdez, T. Jaeger, R. Perez, L. V. Doorn, J. L. Griffin, S. Berger, R. Sailer, E. Valdez, T. Jaeger, R. Perez, L. Doorn, J. Linwood, and G. S. Berger. sHype: Secure hypervisor approach to trusted virtualized systems. Technical Report RC23511, IBM Research, 2005.

[32] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. SIGOPS Oper. Syst. Rev., 41(6):335–350, December 2007.

[33] U. Steinberg and B. Kauer. NOVA: A microhypervisor-based secure virtualization architecture. In European Conference on Computer Systems, April 2010.

[34] G. E. Suh, C. W. O’Donnell, I. Sachdev, and S. Devadas. Design and implementation of the AEGIS single-chip secure processor using physical random functions. In International Symposium on Computer Architecture (ISCA), June 2005.

[35] Z. Wang and X. Jiang. HyperSafe: A lightweight approach to provide lifetime hypervisor control-flow integrity. In IEEE Symposium on Security and Privacy, pages 380–395, May 2010.