### Presentation: The Ring 0 Facade: Awakening the Processor's Inner Demons
**Speaker:** Christopher Domas, Cyber Security Researcher

**Disclaimer:**
The research presented here was conducted and completed independently. It does not reflect the views, information, or opinions of my current employer.

---

### Overview of Processor Registers

- **General-Purpose Registers (GPRs)**
- **Special-Purpose Registers (SPRs)**
- **Floating-Point Units (FPU), MMX, XMM, YMM, ZMM**
- **Control Registers (CRs)**
- **Model-Specific Registers (MSRs)**

**Processor Registers:**
- **Debugging**
- **Execution Tracing**
- **Performance Monitoring**
- **Clocking**
- **Thermal Controls**
- **Cache Behavior**

---

### Model-Specific Registers (MSRs)

**Accessing MSRs:**
- **Ring 0 Access Only**
- **Accessed by Address, Not Name**
- **Address Range: 0x00000000 – 0xFFFFFFFF**
- **Only a Small Fraction are Implemented (Tens to a Few Hundred)**
- **64 Bits in Size**
- **Read with `rdmsr` (Read to `edx:eax`)**
- **Written with `wrmsr` (Write from `edx:eax`)**

**Example Code:**
```assembly
movl $0x1a0, %%ecx /* Load MSR address */
rdmsr /* Read MSR 0x1a0 */
/* Configure new values for MSR */
orl $1, %%eax
orl $4, %%edx
wrmsr /* Write MSR 0x1a0 */
```

---

### Secrets and Undocumented Features

**Undocumented Debug Features:**
- **Unlock Disabled Cores**
- **Hardware Backdoors**

**Security Implications:**
- **Bypassing Security Mechanisms (e.g., Allowing Ring 0 Access at Ring 3)**
- **Revealing Proprietary Information**

**Manufacturer's Perspective:**
- **Not Publicly Documented to Protect Intellectual Property**
- **Easily Found and Published by Programmers**
- **May Need to Disclose to Customers for Testing and Debugging**

**Microprocessor Internals:**
- **Secret Key (Internally Manufactured, Externally Invisible)**
- **Encryption Engine (Decrypts User-Supplied Password Using the Secret Key)**

**Questions:**
- **Could My Processor Have Secret, Undocumented, and Password-Protected Registers?**

---

### Case Study: AMD K7, K8

**Known Password-Protected MSRs:**
- **Discovered Through Firmware Reverse Engineering**
- **32-Bit Password Loaded into a GPR**

**Password Protection Example:**
```assembly
movl $0x12345678, %%edi /* Password */
movl $0x1337c0de, %%ecx /* MSR */
rdmsr
/* If MSR 0x1337c0de Does Not Exist, CPU Generates #GP(0) Exception */
/* If Password 0x12345678 is Incorrect, CPU Generates #GP(0) Exception */
```

**Detection Challenge:**
- **Guessing MSR Address and Password**
- **Incorrect Guesses Result in #GP(0) Exception**
- **32-Bit Address + 32-Bit Password = 64 Bits**
- **Naive Identification Takes 600 Years at 1,000,000,000 Guesses per Second**

**Detection Without Knowing the Password:**
- **Assembly as a High-Level Abstraction**
- **CPU Micro-ops Execute Assembly Instructions**
- **Speculative Execution and Timing Side-Channels**

**Possible Pseudocode:**
```python
if msr == 0x1:
    ... // (Service MSR 0x1)
elif msr == 0x6:
    ... // (Service MSR 0x6)
elif msr == 0x1337c0de:
    if ebx == 0xfeedface:
        ... // (Service MSR 0x1337c0de)
    else:
        #gp(0) // Wrong Password
else:
    #gp(0) // MSR Does Not Exist
```

**Timing Side-Channel Attack:**
- **Executed in Ring 0 Kernel Module**
- **#GP(0) Exception Redirected to Instruction Following `rdmsr`**
- **System Stack Reset After Each Measurement**
- **Initial Configuration Measures Execution Time of #GP(0) Exception**
- **Serialization Handles Out-of-Order Execution**
- **Track Low 32 Bits of Timer, Repeat Sample, Select Lowest Measurement**

**AMD K8 Analysis:**
- **Speculate on Underlying Microcode Model**
- **Focus on Variations in Observed Fault Times**
- **Separate Ucode Paths for Processing Each Fault Group**

**Cracking Protected Registers:**
- **AMD K8: Password 0x9c5a203a Loaded into `edi`**
- **MSRs: 0xc0011000 – 0xc001ffff**
- **Unexplained Check on 0xc0000000 – 0xc000007f**

**Advanced Cracking:**
- **Failed to Uncover New Passwords**
- **Potential Explanations:**
  - **More Advanced Password Checks (e.g., 64/128/256 Bit Passwords in XMM Registers)**
  - **Ultra-Privileged Modes Beyond Ring 0**
  - **Microcode Checks on Processor Family, Model, Stepping**

**Conclusions:**
- **Raised More Questions Than Answers**
- **High Stakes: MSRs Control Everything on the Processor**
- **New Approach to Detecting Processor Secrets**

**Future Work:**
- **Instruction Grep Through Firmware Databases Reveals Unknown Passwords**
- **Hundreds of Firmwares, Variety of Vendors, Windows Kernel**

**Projects:**
- **GitHub: github.com/xoreaxeaxeax**
- **Projects: nightshyft, rosenbridge, sandsifter, M/o/Vfuscator, REpsych, x86 0-day PoC, etc.**

**Contact:**
- **Email: PI:EMAIL**
- **Twitter: @xoreaxeaxeax**

**Feedback and Ideas Welcome!**