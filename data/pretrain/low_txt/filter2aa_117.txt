### HardenedBSD Internals

#### Agenda
- About Me
- Definitions
  - Security
  - Exploit Mitigation
  - Address Space Layout Randomization (ASLR)
- About HardenedBSD
- Features
- Weather Report
- Digging In

#### About Me
- Co-founder of HardenedBSD
- Security enthusiast
- Open-source advocate
- Evangelist of FreeBSD
- ZFS fanboy

#### Definitions
- **Security**: The practice of protecting systems, networks, and programs from digital attacks.
- **Exploit Mitigation**: Techniques and technologies designed to reduce the likelihood or impact of security vulnerabilities being exploited.
- **Address Space Layout Randomization (ASLR)**: A security technique that involves randomly arranging the positions of key data areas in a process's memory space, making it harder for an attacker to predict target addresses.

#### About HardenedBSD
- **Officially launched in April 2014**
- **Implementing and upstreaming ASLR** is a challenging task.
- **Single repository for FreeBSD exploitation mitigation development**.
- **Full fork of FreeBSD**.

##### Community and Infrastructure
- **Many contributors**
  - Four core developers, with two active daily.
  - Incoming contributions from universities.
- **Infrastructure**
  - Four dedicated servers, one fully funded via IndieGogo.
  - Potential for additional servers in the future.

##### Long-Term Goals
- **Three-year game plan**:
  - Upstream ASLR, mprotect(exec) restrictions, and w^x.
  - Implement UDEREF.
  - Restrict [lin]procfs and upstream changes.
  - Official releases and commercial support.

- **Five-year game plan**:
  - Establish a 501(c)3 non-profit organization.
  - Create a for-profit arm.
  - Develop official hardware appliances (firewalls, IDS/IPS, etc.).
  - Create a Windows SBS-like tool.

#### Features
- **ASLR**: Randomizes the memory layout to prevent predictable addresses.
- **NoExec (w^x, PaX PAGEEXEC)**: Prevents pages from being both writable and executable.
- **[lin]procfs protections**: Inspired by Linux procfs attack vectors.
- **PTrace restrictions**: Limits the ability to trace processes.
- **mmap(map_32bit) hardening**: Removes support for MAP_32BIT.
- **Complete removal of mmap(NULL, MAP_FIXED) support**.
- **Removal of many image activators**.
- **getentropy**: Provides a source of random numbers.
- **Boot hardening**: Enhances security during the boot process.
- **PaX-inspired SEGVGUARD**: Protects against certain types of buffer overflows.
- **Intel Supervisor Mode Access Protection (SMAP)**: Prevents user-mode code from accessing kernel memory.
- **secadm application**: A security administration tool.

#### Weather Report
- **ASLR**
  - **Version 0**: Being upstreamed.
  - **Version 0.5**: Shared object load order randomization (to be upstreamed after v0 is accepted).
  - **Version 1**: Research phase, including VDSO randomization and true stack randomization (PS_STRINGS, which breaks many ABI/API).

- **NoExec (w^x, PaX PAGEEXEC)**
  - Inspired by PaX.
  - Prevents pages from being both writable and executable.
  - Challenges: Dynamic code (e.g., Java, JavaScript, JIT engines).
  - Ongoing research.

- **[lin]procfs hardening**
  - Inspired by Linux procfs attack vectors.
  - "OpenSSH <=6.6 SFTP misconfiguration exploit for 64-bit Linux" completed.

- **Userland Enhancements**
  - Recursive setfacl.

- **secadm – Security Administration**
  - **Version 0.1 - Released**: Toggle ASLR, mprotect, PAGEEXEC, SEVGUARD per-binary.
  - **Version 0.2 – In progress**: Enforce file hash before exec (Integriforce).
  - **Version 0.3 – Long-term research**: Full binary signing with x509 certificates.

- **Infrastructure**
  - Nightly build automation with Jenkins.
  - Release targets signed with GPG.
  - Package builds with Poudriere.
  - All packages are signed.
  - Stress testing on HardenedBSD.

#### Implementation Details
- **ASLR Implementation**: Based on PaX, with deltas for execution base, mmap, and stack (gap-based).
- **mprotect Implementation**: Inspired by PaX and OpenBSD, enforcing PROT_EXEC and disabling PROT_WRITE.
- **[lin]procfs Implementation**: Prevents writing to /proc/pid/mem and /proc/pid/*regs.
- **mmap Implementation**: Disables MAP_32BIT support on amd64.
- **secadm Implementation**: Three components: Kernel module (MAC framework, sysctl control channel), shared library, and application.

#### Putting it All Together
- **Lots of work done** and **lots more to do**, especially with ASLR.
- Combining multiple exploitation mitigations for optimal security.

#### Next Milestones
- **ASLRv2**
- **W^X/NoExec/PAGEEXEC**
- **UDEREF**
- **Executable file integrity enforcement**
- **Official release**

#### Contact Information
- Website: [https://www.hardenedbsd.org](https://www.hardenedbsd.org)
- GitHub: [https://github.com/HardenedBSD](https://github.com/HardenedBSD)
- Twitter: [@HardenedBSD](https://twitter.com/HardenedBSD)
- Jenkins: [http://jenkins.hardenedbsd.org](http://jenkins.hardenedbsd.org)
- SoldierX: [https://www.soldierx.com/](https://www.soldierx.com/)