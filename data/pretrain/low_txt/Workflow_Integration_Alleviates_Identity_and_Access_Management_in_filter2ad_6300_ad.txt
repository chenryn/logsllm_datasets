### Missions and SQL Overhead

The overhead of SQL operations is significantly high, leading to slow performance even in scenarios where a large proportion of requests can be rejected early. According to Cloudflare, an estimated 40% of internet traffic is bot traffic, a significant portion of which comes from malicious bots. This suggests that there is potential for substantial savings through the use of will.iam.

### Workloads and DDoS Defense

While the workloads used in this experiment were synthetic, the results indicate that will.iam could be effective as a DDoS defense. We discuss this further in Section 9.

### Discussion

#### Portability

The access control mechanism proposed in this paper, along with its implementation in OpenFaaS, provides a way to enforce access control with minimal overhead in a serverless computing environment. By integrating the framework into OpenFaaS, it can be deployed on Kubernetes, making it compatible with major cloud providers' infrastructures. Additionally, it can be easily deployed on in-house Kubernetes or Docker Swarm clusters. This portability is due to the fact that the framework does not depend on any specific cloud provider's serverless implementation. The entire system runs inside containers and uses common technologies such as JSON serialization, HTTP for communication, and DNS for routing.

#### Denial of Service Attacks

will.iam's ability to determine if a request will fail ahead of time and reject it at the gateway can mitigate targeted denial of service attacks. In complex workflows, allowing bad requests to partially traverse the system can amplify the attack's impact. For example, in the "Hello, Retail!" application, the "purchase" function depends on "get-price," "authorize-cc," and "publish." If a request lacks the necessary permissions, it can still invoke multiple functions before failing. With will.iam, the upcoming permissions failure is detected immediately, and the computational cost is incurred only at the gateway. During the 2018 GitHub DDoS attack, 90% of incoming traffic was bad requests. Using Amazon Lambda’s pricing model, we determined that will.iam reduces costs by 64% compared to a standard serverless platform under a DoS attack. While will.iam is not a complete solution for DoS defense, it prevents an application's own permissioned workflows from being weaponized against it.

### Related Work

#### Attacks on Serverless Platforms

Serverless platforms are vulnerable to various attacks, including remote code execution, poor resource isolation, covert channels, reconnaissance attacks, and canonical cloud vulnerabilities. Researchers have demonstrated event injection attacks and data exfiltration in serverless environments. Access control misconfigurations can lead to sensitive information theft or DoS attacks. Common vulnerabilities in SDKs, third-party libraries, and platform code also pose significant risks. Existing security solutions address some of these issues, and will.iam adds to the growing set of defenses.

#### Serverless Security Research

Alpernas et al. proposed Trapeze, a language-based approach to dynamic information flow control. Trapeze wraps each serverless function in a security shim that intercepts data accesses, external communications, and inter-function messages. However, Trapeze suffers from high overhead due to expensive SQL operations and forgoes serverless warm-start optimizations. In contrast, will.iam takes a transparent approach to access control, agnostic to function and platform implementation. It proactively evaluates access control policies at the ingress point, leading to negligible overhead. Another framework, Valve, assists in policy specification and employs a coarser-grained information flow control model. We believe Valve is complementary to will.iam, helping developers understand data flows and write proper policy configurations.

Baldini et al. found that the lack of proper function isolation is a major problem in popular platforms. Wang et al. measured metrics like scalability, cold-start latency, and instance lifetime in Google Cloud Functions, Microsoft Azure Functions, and AWS Lambda, identifying placement vulnerabilities and arbitrary code execution bugs. Robust access control can mitigate the effects of such attacks. Other related topics include using Intel’s SGX for secure containers, formal modeling of serverless platforms, and semi-automated troubleshooting based on log data.

#### Access Control Models

Cloud platforms typically use federated identity management, which is insufficient for defining expressive policies in serverless workflows. Graph-based access control models have been used to express hierarchical user roles and augment role-based and relation-based access control systems. will.iam leverages well-researched graph-based access control concepts to propose a flexible and dynamic access control model for serverless platforms.

### Conclusions

In this paper, we propose an access control mechanism that preemptively rejects requests before known access control violations occur, leading to time, compute, and cost savings. We implemented this mechanism for the OpenFaaS ecosystem and compared it with Trapeze and Valve. Our evaluation showed no meaningful overheads at build time or during orchestration, with a minimal runtime overhead. Compared to the Vanilla implementation, the average overhead was 0.51%. When load-testing the system with a 30% proportion of bad requests, will.iam outperformed the Vanilla implementation by 22%.

### Acknowledgments

We thank the anonymous referees for their valuable comments and suggestions. This work is supported in part by NSF 17-50024 and NSF CNS 19-55228. The views expressed are those of the authors only.

### References

[1] 2019. 21% of Open Source Serverless Apps Have Critical Vulnerabilities. https://www.puresec.io/blog/puresec-reveals-that-21-of-open-source-serverless-applications-have-critical-vulnerabilities.

[2] 2019. A Deep Dive into Serverless Attacks, SLS-1: Event Injection. https://www.protego.io/a-deep-dive-into-serverless-attacks-sls-1-event-injection/.

[3] 2019. Aqua Cloud Native Security Platform. https://www.aquasec.com/products/aqua-container-security-platform/.

[4] 2019. AWS Lambda Container Lifetime and Config Refresh. https://www.linkedin.com/pulse/aws-lambda-container-lifetime-config-refresh-frederik-willaert/.

[5] 2019. CVE-2019-5736: runc container breakout. https://www.openwall.com/lists/oss-security/2019/02/11/2.

[6] 2019. Event Injection: Protecting your Serverless Applications. https://www.jeremydaly.com/event-injection-protecting-your-serverless-applications/.

[7] 2019. Function-as-a-Service Market by User Type (Developer-Centric and Operator-Centric), Application (Web & Mobile Based, Research & Academic), Service Type, Deployment Model, Organization Size, Industry Vertical, and Region - Global Forecast to 2021. https://www.marketsandmarkets.com/Market-Reports/function-as-a-service-market-127202409.html.

[8] 2019. FunctionShield. https://www.puresec.io/function-shield.

[9] 2019. Gathering weak npm credentials. https://github.com/ChALkeR/notes/blob/master/Gathering-weak-npm-credentials.md.

[27] 2020. OWASP Serverless Top 10. https://www.owasp.org/index.php/OWASPServerlessTop10Project.

[26] 2020. Elastic Defense. https://www.infoq.com/articles/elastic-defense/.

[10] 2019. Hacking a Serverless Application: Demo. https://www.youtube.com/watch?v=TcN7wHuroVw.

[11] 2019. Intrinsic: Software security, re-invented. https://intrinsic.com/.

[12] 2019. Lambda functions for rapid prototyping. https://developer.ibm.com/articles/cl-lambda-functions-rapid-prototyping/.

[13] 2019. Many-faced threats to Serverless security. https://hackernoon.com/many-faced-threats-to-serverless-security-519e94d19dba.

[14] 2019. New Attack Vector - Serverless Crypto Mining. https://www.puresec.io/blog/new-attack-vector-serverless-crypto-mining.

[15] 2019. OWASP Serverless Top 10. https://www.owasp.org/index.php/OWASPServerlessTop10Project.

[16] 2019. Protego Serverless Runtime Security. https://www.protego.io/platform/.

[17] 2019. Puresec Serverless Security Platform. https://www.puresec.io/.

[18] 2019. ReDoS Vulnerability in "AWS-Lambda-Multipart-Parser" Node Package. https://www.puresec.io/blog/redos-vulnerability-in-aws-lambda-multipart-parser-node-package.

[19] 2019. Securing Serverless: Attacking an AWS Account via a Lambda Function. https://www.darkreading.com/cloud/securing-serverless-attacking-an-aws-account-via-a-lambda-function/a/d-id/1333047.

[20] 2019. Securing Serverless – by Breaking in. https://www.infoq.com/presentations/serverless-security-2018.

[21] 2019. Serverless Security for AWS Lambda, Azure Functions, and Google Cloud Functions. https://www.twistlock.com/solutions/serverless-security-aws-lambda-azure-google-cloud/.

[22] 2019. Snyk. https://snyk.io/.

[23] 2019. Sysdig Secure. https://sysdig.com/products/secure/.

[24] 2019. Vandium-node. https://github.com/vandium-io/vandium-node.

[25] 2020. AWS Identity and Access Management (IAM). https://aws.amazon.com/iam/.

[28] 2020. List of AWS S3 Leaks. https://github.com/nagwww/s3-leaks.

[29] 2020. Policy Evaluation Logic. https://docs.aws.amazon.com/IAM/latest/UserGuide/referencepoliciesevaluation-logic.html.

[30] 2020. What Is ABAC for AWS? https://docs.aws.amazon.com/IAM/latest/UserGuide/introductionattribute-based-access-control.html.

[31] 2020. This Is What Happened When I Leaked My AWS Secret Key. https://alexanderpaterson.com/posts/this-is-what-happened-when-i-leaked-my-aws-secret-key.

[32] P. Aditya, I. E. Akkus, A. Beck, R. Chen, V. Hilt, I. Rimac, K. Satzke, and M. Stein. 2019. Will Serverless Computing Revolutionize NFV? Proc. IEEE 107, 4 (April 2019), 667–678. https://doi.org/10.1109/JPROC.2019.2898101.

[33] Gojko Adzic and Robert Chatley. 2017. Serverless Computing: Economic and Architectural Impact. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (Paderborn, Germany) (ESEC/FSE 2017). Association for Computing Machinery, New York, NY, USA, 884–889. https://doi.org/10.1145/3106237.3117767.

[34] Istemi Ekin Akkus, Ruichuan Chen, Ivica Rimac, Manuel Stein, Klaus Satzke, Andre Beck, Paarijaat Aditya, and Volker Hilt. 2018. SAND: Towards High-Performance Serverless Computing. In 2018 USENIX Annual Technical Conference (USENIX ATC 18). USENIX Association, Boston, MA, 923–935. https://www.usenix.org/conference/atc18/presentation/akkus.

[35] Fritz Alder, N. Asokan, Arseny Kurnikov, Andrew Paverd, and Michael Steiner. 2019. S-FaaS: Trustworthy and Accountable Function-as-a-Service Using Intel SGX. In Proceedings of the 2019 ACM SIGSAC Conference on Cloud Computing Security Workshop (London, United Kingdom) (CCSW’19). Association for Computing Machinery, New York, NY, USA, 185–199. https://doi.org/10.1145/3338466.3358916.

[36] Kalev Alpernas, Cormac Flanagan, Sadjad Fouladi, Leonid Ryzhyk, Mooly Sagiv, Thomas Schmitz, and Keith Winstein. 2018. Secure Serverless Computing Using Dynamic Information Flow Control. Proc. ACM Program. Lang. 2, OOPSLA, Article 118 (Oct. 2018), 26 pages. https://doi.org/10.1145/3276488.

[37] Amazon. 2006. EC2 Beta Announcement. https://aws.amazon.com/about-aws/whats-new/2006/08/24/announcing-amazon-elastic-compute-cloud-amazon-ec2---beta/.

[38] Amazon Web Services. 2020. Identity and Access Management for AWS Lambda. https://docs.aws.amazon.com/lambda/latest/dg/access-control-identity-based.html.