### 优化后的文本

#### 5.8 节中的本地身份获取威胁
尽管可以通过通信来确认哪些部分已被渗透，但第5.8节中提到的本地身份获取威胁仍然存在。间谍软件可能无法执行我们的攻击，因为客户端JavaScript对网络、Cookie和框架功能的访问通常集中在外部托管设施中，例如由Web浏览器提供的Window和Document对象实现。因此，围绕JavaScript（及其他脚本语言如VBScript）构建的沙箱环境可能会限制脚本发起攻击的能力。然而，这种解决方案的效果不如网络组件方案，因为第5.6节中提到的平衡威胁仍然存在。

#### 相关工作
与SafeWeb类似，Anonymizer [2] 和SiegeSurfer [48] 服务也使用单一的重写引擎提供一定程度的Web用户匿名性。Onion Routing [54]、Crowds [37]、Freedom.net [4]、WebMIXes [3] 和Tarzan [16] 则采用更为复杂的技术，以抵御有组织、分布式的协同对手。专门设计用于抵抗审查的系统包括Publius [62]、Tangler [61]、Freenet [8]、Free Haven [10] 和Infranet [12]；其中，Infranet在用户监控抵抗方面表现最为突出。流行的点对点文件共享系统如Gnutella、Morpheus和Kazaa虽然难以被审查者关闭，但它们的设计重点并不完全在于抵抗审查。

这些系统中没有一个通过重写JavaScript来净化它（尽管Anonymizer似乎正在考虑这种方法）；它们要么移除所看到的JavaScript，要么指导用户在适用时禁用浏览器级别的JavaScript。许多这些系统也无法抵御利用Web缓存时间差识别用户的攻击者 [14]。

Java小程序在一个经过深入研究的沙箱环境中运行 [18]，这对JavaScript同样具有应用价值。最近的一份代码隔离相关论文的参考文献可以在 [1] 中找到。

#### 讨论
尽管SafeWeb和PrivaSec也吸引了试图规避Websense和SurfControl等过滤器的企业员工，但受SafeWeb弱点威胁最大的用户群体是那些国家实行内容封锁防火墙政策的公民。这是因为这些用户的利害关系重大，并且他们的政府已经证明了他们对网络连接进行审查的兴趣。希望识别其SafeWeb用户及其主Cookie的政府可以定期拦截穿越防火墙的HTTP连接，并通过SafeWeb将请求重定向到包含抓取主Cookie代码的服务器上。另一种方法是利用Web公告板系统的跨站脚本漏洞，在可能被违规用户访问的站点上植入恶意代码。更简单的方法是购买广告空间来放置恶意代码。

讽刺的是，SafeWeb通过将其搜索范围缩小到那些显然知道自己在逃避监管的用户，反而帮助了审查者 [9,47]。防火墙操作员可以通过查找与主要SafeWeb站点的连接或检查SSL会话中未加密的SafeWeb证书来生成SafeWeb用户列表。我们的攻击并不是必需的，它们实际上针对的是SafeWeb的匿名性，而不是其规避审查的能力。然而，我们再次观察到，拥有在全国防火墙上封锁网站能力的政府也可能愿意惩罚那些试图绕过防火墙的人。

SafeWeb承认外国审查者可以轻松识别其国内使用SafeWeb的人群，并称使用此类证据对付用户是“严厉的”[25]。但是，通过我们的攻击获得SafeWeb主Cookie或会话记录后，审查者获得了更大的筹码：他们不仅知道谁在使用SafeWeb，还知道用户想要秘密访问的网站。检查Cookie值可能会揭示出与会员资格、订阅、商业交易甚至认证代码相关的标识号 [17]。虽然使用这种类型的证据对付用户也可以被视为严厉，但它可能是更好的证据。

SafeWeb基本上是在用这项技术挑衅中国、沙特阿拉伯、巴林和阿联酋等国政府，这是一种奇怪的外交努力 [21,39]。对于这些国家的用户来说，风险是真实的，但我们没有看到任何证据表明他们理解了SafeWeb系统的局限性。我们甚至不知道是否有人曾在实验室之外尝试识别SafeWeb用户，但这当然是可能的。当攻击发生时，用户不会收到任何可见的提示，而且由于这些攻击并不针对SafeWeb服务器本身，所以SafeWeb也没有理由检测到它们。攻击者很可能会保留这些漏洞以便日后再次使用。

#### Web服务器对其用户的攻击
这类攻击可能对调查人员非常有用。例如，FBI可以在其“Amerithrax”网页 [11] 上插入恶意代码，以追踪使用SafeWeb匿名阅读其关于2001年10月美国炭疽袭击调查报告的访客。（FBI的DCS-1000 Carnivore系统对此无能为力：它只有在靠近调查目标时才有用，而我们假设该目标仍未知。此外，Carnivore无法解密嫌疑犯与SafeWeb之间的SSL连接 [23]。）

#### 抵御被动攻击
一些SafeWeb用户只是不希望自己的身份记录在日志文件中，而不担心有人会主动识别他们。SafeWeb确实有助于防止IP地址出现在常规维护的Web服务器日志文件中。虽然我们的攻击样本较短，但它们似乎不太可能在没有恶意意图的情况下出现。

然而，我们对2001年11月的一篇Usenet文章 [56] 感到困惑，其中一位SafeWeb用户写道：
“我正在试用SafeWeb，这是一个使用SSL代理服务器。对于像yahoo.com和msnbc.com这样的典型网站，我会收到提示‘此页面包含安全和非安全项目。您要显示非安全项目吗？’为什么我会在通过SSL代理服务器访问时收到非安全项目？”

我们看到了两种可能性。第一种可能是某些内容未经清理就避开了重写引擎。Internet Explorer发现这些非SSL内容（由原始URL引用）出现在从safeweb.com传递的SSL内容中，因此弹出了对话框。这不太可能是恶意攻击，因为聪明的攻击者会确保攻击中使用的任何URL也使用SSL。

第二种可能是用户只是目睹了Internet Explorer在版本6.0之前的错误，这些错误可能导致警告对话框意外出现 [30]。

#### 厂商响应
我们在2001年10月首次通知了SafeWeb我们的发现。当时，他们承认了符合我们观察结果的漏洞，并表示会进行调查。我们还在2002年1月向SafeWeb和PrivaSec提交了本文的草稿。作为回应，SafeWeb解释说他们的消费者服务已不再运营，并表示如果重新启动服务，他们会尝试解决这些漏洞。他们还指出，在过去一年里，他们专注于企业安全市场，在这个市场中，这些漏洞不太可能发挥作用。他们还表示，没有任何证据表明大规模攻击已经发生。在2002年2月本文的一个版本发表后，SafeWeb向PrivaSec提供了修改后的代码，使其服务即使在浏览器级别禁用JavaScript的情况下也能正常工作（参见第6.2节）。

PrivaSec表示，他们在基于SafeWeb技术推出订阅服务之前正在评估选项。PrivaSec的服务默认在每个浏览器会话结束时删除主Cookie，因此当攻击者第一次获取主Cookie时，它的价值不大。然而，正如第5.1.1节所述，除非在浏览器级别禁用Cookies，否则攻击者可以更改此设置。截至撰写本文时，所有攻击仍在PrivaSec的技术预览版中有效。

#### 结论
隐私和匿名工具面临一项艰巨的任务，即在希望减少实际和想象中的用户风险的同时，去除环境中固有的数据。当提供这样一种无形的服务时，用户蜂拥至声称有效的最友好解决方案也就不足为奇了。

尽管如此，我们惊讶地发现，一个高调的外部评审团队并没有反对诸如本文中描述的弱点。根据《计算机世界》杂志 [60] 的报道：
“SafeWeb总裁兼联合创始人Jon Chun表示，他公司与In-Q-Tel的关系对其技术发展至关重要。他说，‘这使SafeWeb及其技术经受了CIA严格的审查过程，这一过程远超普通企业客户的审查标准。这是非常重要的认可。’”

增加隐私和安全功能可能会使用户面临更大的隐私和安全问题，如果攻击者能够控制足够的基础设施。我们已经看到，攻击者可以轻易绕过SafeWeb的净化措施并获得对JavaScript解释器的无限制访问。一旦进入，他们就可以利用SafeWeb对JavaScript框架的“同源”规则的拒绝及其主Cookie设计来获取受害计算机的IP地址和Cookies，甚至在剩余的SafeWeb会话期间植入间谍软件。SafeWeb的设计不仅破坏了其提供的隐私特性，还破坏了Web浏览器的标准隐私功能。

SafeWeb未能净化危险构造的简单等价物，这体现了临时安全编程的风险。安全系统应该只允许被认为安全的内容，而不是阻止已知不安全的内容。

最后，将以前分离的内容集中起来并不是提供隐私的理想方式。互联网的部分设计原则是“不要把所有的鸡蛋放在一个篮子里”（例如无状态路由器），而SafeWeb似乎基于Pudd'nhead Wilson的设计原则：“把所有的鸡蛋放在一个篮子里——然后看住那个篮子！”[57]。在SafeWeb方案中，原本分别属于a.com、b.com、c.com等的所有Cookies现在都归safeweb.com所有，从而允许了原本不可能的跨域Cookie窃取。同样，由于一切都在SafeWeb的管辖下发生，原本不可能的跨域框架攻击也被允许。相反，用户在多个网站日志中分散的访问证据现在被方便地集中存储在safeweb.com（尽管会在七天后删除）。其他一些匿名服务也有类似的“把所有鸡蛋放在一个篮子里”的问题。

### 参考文献
1. Matt Curtin. Developing Trust: Online Privacy and Security, Case Study #1: Centralization Unexpectedly Erodes Privacy. pp. 140-154, Apress, December 2001.
2. Roger Dingledine, Michael J. Freedman, and David Molnar. The Free Haven Project: Distributed Anonymous Storage Service. In [13], pp. 67-95. http://freehaven.net/
3. Amerithrax: Seeking Information. FBI Web page, January 2002. http://www.fbi.gov/majcases/anthrax/amerithraxlinks.htm
4. Nick Feamster, Magdalena Balazinska, Greg Harfst, and Hari Balakrishnan. Infranet: Circumventing Web Censorship and Surveillance. Proceedings of the 11th USENIX Security Symposium, August 2002.
5. Hannes Federrath (Ed.). Designing Privacy Enhancing Technologies, Proc. Workshop on Design Issues in Anonymity and Unobservability. LNCS vol. 2009, Springer-Verlag, 2001.
6. Edward W. Felten and Michael A. Schneider. Timing Attacks on Web Privacy. Proceedings of ACM Conference on Computer and Communications Security, November 2000. http://www.cs.princeton.edu/sip/pub/webtiming.pdf
7. David Flanagan. JavaScript: The Definitive Guide (3rd ed.). O’Reilly & Associates, 1998.
8. Michael J. Freedman, Emil Sit, Josh Cates, and Robert Morris. Introducing Tarzan, A Peer-to-Peer Anonymizing Network Layer. Proceedings of 1st Intl. Workshop on Peer-to-Peer Systems, Cambridge, MA, March 2002. http://pdos.lcs.mit.edu/tarzan/papers.html
9. Kevin Fu, Emil Sit, Kendra Smith, Nick Feamster. Dos and Don’ts of Client Authentication on the Web. Proceedings of the 10th USENIX Security Symposium, August 2001. http://www.usenix.org/publications/library/proceedings/sec01/fu.html
10. Li Gong, Marianne Mueller, Hemma Prafullchandra, and Roland Schemers. Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java Development Kit 1.2. Proceedings of the USENIX Symposium on Internet Technologies, 1997.