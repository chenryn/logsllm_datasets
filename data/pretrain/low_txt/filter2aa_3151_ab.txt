# Company Logo

## Wrong Module Switching

### Detect ROP Attacks
- **Detection Method:** Based on stack back-tracing.
- **Key Features:**
  - Hooks in Kernel-Mode for win32.
  - Utilizes SSDT Hooking.
  - Supports WOW64 for win64.
  - Specific API hooking, including:
    - `VirtualProtect` and similar functions.
    - `CreateProcess` and related APIs.
    - Network and Socket APIs.
    - Additional relevant functions.

### Using Stack Backtracing to Return to the API Caller
- **Checks Performed:**
  - Verify if the call is to the specific API.
  - Validate the parameters.
  - Examine the next call stack to ensure it calls the function that invokes the API.
  - Check Structured Exception Handling (SEH) to confirm it's within the same module.
  - Ensure no null parameters are present.
  - Verify the return address after the call.
  - Additional checks as needed.
- **Scoring System:** Assigns a score to each API call based on the above checks.

### Different Call Types
- **Call Variants:**
  - `call dword ptr []`
  - `lea eax, [address]; call eax`
  - `call API; API: jmp dword ptr []`

### Category Parameters
- **Parameter Types:**
  - **CONST:** `push xxxxxxxxh` or `lea eax, [xxxxxxxh]; push eax`
  - **STACK:** `lea eax, [ebp +/- xxxxh]; push eax`
  - **REGISTER:** `push exx`
  - **UNKNOWN:** `push any`

### Demo on ShellExecute
- **Hooking Firefox with EDS:**
  - Force Firefox to create a process.
  - Display the call stack to `ShellExecute`.
  - Show the `ShellExecute` parameters.
  - Present the action scoring.
  - Demonstrate on a vulnerable application.
  - Run and hook the application.
  - Show the action scoring and detection.

## SEH Mitigation
- **Overview:**
  - SEH is a linked list of pointers to functions that handle errors.
  - Basic mitigation includes saving the SEH linked list and checking for changes.

## Heap Mitigations
- **Attack Vectors:**
  - Heap Overflow
  - Heap Spray
  - Use After Free
- **Mitigation Techniques:**
  - Hook `GlobalAlloc` and `jemalloc`.
  - Create a new header for memory allocations.

### New Header Design
- **Features:**
  - Divided into two headers.
  - Separate buffer header pointing to the buffer.
  - Records caller module and allocation time.
  - Checks for vtable inside the buffer and marks it as important.
  - Resets everything in approximately 2 seconds.

### Overflow Mitigation
- **Checks:**
  - Nulls to prevent string overwrites.
  - Cookies to stop managed overwrites.
  - Primarily used against `jemalloc`.

### HeapSpray Mitigation
- **Detection:**
  - Multiple allocations from the same module.
  - Large memory usage in a short time.
  - Randomly selects two buffers to scan for shellcode and ROP chains.

### Use-After-Free Mitigation
- **Steps:**
  - Scans for vtables inside buffers.
  - Delays the free operation for these buffers.
  - Wipes them with `0xBB`.
  - Frees them at the end of the slot (~2 seconds).
  - Detects attacks when accessing `0xBB` in the heap.

## Comprehensive Scanning
- **Types of Scanning:**
  - **Critical Scanning:** When calling an API to check for ROP attacks or detect HeapSpray.
  - **Periodical Scanning:** Continuous monitoring system.

### Scoring System
- **Functionality:**
  - Based on mitigations.
  - Stops known attacks and terminates the process.
  - Alerts for suspicious inputs.
  - Takes a dump of the process.

### Monitoring System
- **Tasks:**
  - Periodic scanning.
  - Checking for possible attacks, such as:
    - Executable places in the stack.
    - Executable places in memory-mapped files.
    - ROP chains and shellcode in the stack and heap.
    - Threads running outside of allocated memory.
    - Other relevant checks.

## Future Work
- **Central Server:**
  - Receives alerts and warnings.
  - Monitors exploitations on client machines.
  - Provides a graphical dashboard.

### Dashboard Features
- **Inclusions:**
  - Suspicious processes across all machines.
  - Files loaded inside suspicious processes (PDF, DOC, etc.).
  - IPs connected to by these processes (after privacy policy review).

### Dashboard Capabilities
- **Detection:**
  - Suspicious PDF or Word files opened by many people (potentially phishing emails).
  - Similar shellcode in Internet Explorer for multiple employees (likely a phishing URL).
  - Suspicious IPs performing network scans and connecting to suspicious processes.

## Development
- **EDS Foundation:**
  - Based on SRDF (Security Research and Development Framework).
  - Created by Amr Thabet.
  - Three main contributors.

### SRDF Overview
- **Development Framework:**
  - Supports writing security tools.
  - Focuses on anti-malware and network tools.
  - Primarily for Windows and C++.
  - Expanding to Linux and Python.

### SRDF Features
- **Parsers:**
  - PE and ELF parsers.
  - PDF parser.
  - Android (APK/DEX) parser.
- **Static Analysis:**
  - YARA-like wildcard support.
  - x86 assembler and disassembler.
  - Android DEX Java disassembler.
- **Dynamic Analysis:**
  - Full process analyzer.
  - Win32 debugger.
  - x86 emulator for apps and shellcodes.
- **Behavior Analysis:**
  - API hooker.
  - SSDT hooker (for win32).
  - Other relevant tools.
- **Network Analysis:**
  - Packet capturing using WinPcap.
  - Pcap file analysis.
  - Flow analysis and session separation.
  - Protocol analysis (TCP, UDP, ICMP, ARP).
  - Application layer analysis (HTTP, DNS).
  - Highly object-oriented and scalable design.

### Community and Access
- **Growing Community:**
  - Website: [www.security-framework.com](http://www.security-framework.com)
  - Source: [https://github.com/AmrThabet/winSRDF](https://github.com/AmrThabet/winSRDF)
  - Twitter: [@winSRDF](https://twitter.com/winSRDF)

### EDS Progress
- **Achievements:**
  - Developed separate mitigations.
  - Tested shellcode scanner on real shellcodes.
  - Ongoing testing in real-world scenarios.
  - Join us and contribute.

### Contact Information
- **Reach Us:**
  - No dedicated website for EDS yet.
  - SRDF Website: [www.security-framework.com](http://www.security-framework.com)
  - Twitter: [@Amr_Thabet](https://twitter.com/Amr_Thabet)
  - Email: amr.thabet[@#!*^]owasp.org

### Conclusion
- **Summary:**
  - EDS is a new security tool for this era.
  - The last line of defense against APT attacks.
  - Currently in development.
  - SRDF is the backbone.
  - Join us in this effort.

### Acknowledgments
- **Special Thanks to:**
  - Jonas Lekyygaurd
  - Anwar Mohamed
  - Corlan Team
  - All Defcon Team
  - And a big thank you to YOU!