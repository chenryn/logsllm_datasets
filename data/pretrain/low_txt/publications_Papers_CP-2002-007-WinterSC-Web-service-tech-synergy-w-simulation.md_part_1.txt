**Proceedings of the 2002 Winter Simulation Conference**

**Editors:**
E. Yücesan, C.-H. Chen, J. L. Snowdon, and J. M. Charnes

**Title: Web Service Technologies and Their Synergy with Simulation**

**Authors:**
- Senthilanand Chandrasekaran
- Gregory Silver
- John A. Miller
- Jorge Cardoso
- Amit P. Sheth

**Affiliation:**
Department of Computer Science/LSDIS Lab, The University of Georgia, Athens, Georgia 30602-7404, U.S.A.

**Abstract:**
The World Wide Web has had a significant impact on the computing field, particularly in simulation (e.g., Web-Based Simulation). A new wave of development based on XML is emerging, with two key aspects being the Semantic Web and Web Services. This paper explores the synergy between Web service technology and simulation. In one direction, Web service processes can be simulated to improve or correct their design. In the other direction, simulation models and components can be built using Web services. The work on seamlessly integrating simulation into Web service composition and process design, as well as using Web services to rebuild the JSIM Web-based simulation environment, is highlighted. Quality of Service (QoS) metrics, such as timeliness, cost, and reliability, are crucial for both design and runtime monitoring of Web processes. 

**1. Introduction**

The World Wide Web has significantly influenced the computing field, including simulation. A new wave of development based on eXtensible Markup Language (XML) is underway, with the Semantic Web and Web Services being the most intriguing aspects. This paper examines the synergy between Web service technology and simulation. Web service processes can be simulated to improve their design, while simulation models and components can be built using Web services. Our earlier work on workflows and simulation (Miller et al. 2002) demonstrates how simulation can serve as a tool for Web process composition. The analysis of QoS for Web processes differs from that of workflows due to the distribution, autonomy, and heterogeneity of its components. Our current work focuses on extending JSIM (Miller et al. 1997; Nair et al. 1996) and integrating it with Web process design tools and enactment engines.

**2. Related Work**

Some research has begun on using simulation to study Web service composition and Web processes, but little work has been done on building simulation environments using Web services. Web service composition is an active area of research, with many concepts and languages proposed by different research groups. IBM has proposed WSFL (Web Service Flow Language) (Leymann 2001), an XML-based language for describing complex service compositions. Microsoft’s XLANG (Thatte 2001) extends WSDL (Web Service Description Language) (Christensen et al. 2001) to provide a model for orchestrating services. XL (Florescu et al. 2002) is another portable W3C-compliant XML programming language designed for implementing Web services. Researchers are also developing DAML-S (Ankolekar et al. 2001), which aims to automate Web service tasks using ontologies.

**3. Composite Web Services**

**3.1 Web Services Specification**

A proper specification of Web services and Web processes is essential for efficient inter-operation in a distributed environment. The description of services in a widely accepted format is vital for the widespread use of Web services. Service providers describe and advertise their Web services in a registry, enabling service requesters to search for services that match their requirements. XML, the emerging standard for data representation, is used to describe Web services. The specification of a Web service should include syntactic (what does it look like), semantic (what does it mean), and QoS (how well does it perform) information. QoS attributes, such as timeliness, cost, and reliability, provide a description of the quality expected from the service. WSDL and DAML-S are the two major languages used to describe Web services. WSDL is the W3C standard XML language used to specify a Web service's interface, defining the syntactic information about a service. DAML-S is an ontology-based interface description language that describes both syntactic and semantic content, including some non-functional QoS-related attributes.

**3.2 Web Process Specification**

A Web process needs to be described similarly to a Web service's interface. Popular languages for describing the composition of Web services include WSFL, XLANG, and DAML-S. These languages can be used to describe composed processes. Interoperability issues among the chosen Web services need to be addressed when using these languages to develop a process. The developer must explicitly understand the details of the interfaces and specify the required mappings. As WSFL is one of the mature and practical languages for Web process composition, we chose WSFL to represent composed processes in our system. The WSFL specification is currently being extended to include QoS extensibility elements. Since this work is still in progress, we have extended WSFL's specification to include time, cost, and reliability QoS attributes.

**3.2.2 Scenario**

Figure 2 depicts the tasks involved in buying a book. The activities (Web services) in this process are SearchAmazonCatalog, ChooseProduct, CheckCredit, CheckInventory, GenerateBackOrder, ReleaseOrder, and SendCreditLowInfo. Information about related books for a given search is retrieved using the SearchAmazonCatalog service, and a book is chosen by the user via the ChooseProduct service. The user's account is then checked for sufficient funds using the CheckCredit service. The CheckCredit service is an example of an XOR split activity. After the CheckCredit service, the control flows in one of the two control links depending on whether the CheckCredit service returns success or failure. If the user has sufficient credit, the CheckInventory service is invoked; otherwise, the SendCreditLowInfo service is invoked. If the CheckInventory service returns true, the ReleaseOrder service is invoked to send the books; otherwise, the GenerateBackOrder service is invoked.

**Conclusion and Future Work**

The rest of the paper is organized as follows. Section 2 presents related work in this area, while Section 3 introduces composite Web services, issues related to the specification of Web services, and composition of Web services. Section 4 covers our system architecture, Web process designer tool, and our enactment technique. Section 5 explains our performance evaluation approach for evaluating/comparing the invoked Web services. Section 6 discusses simulation and its application to Web process composition. Section 7 explores how simulations may be built out of Web services. Finally, conclusions and future work are presented in Section 8.