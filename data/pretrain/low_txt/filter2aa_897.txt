# Koadic C3: COM Command & Control

## Presentation Overview
- **Event**: DEF CON 25, July 2017
- **Presenters**:
  - @zerosum0x0
  - @Aleph___Naught
  - @JennaMagius
  - @The_Naterz
- **Affiliation**: Red Team at RiskSense, Inc.

## Agenda
1. Current open-source "malware" options for red teams
2. Koadic (C3) - Advanced JScript/VBScript RAT
3. The development journey
4. Demos
5. Key contributors and acknowledgments
6. Important notes and disclaimers

## Introduction
### First Things First
- **SMBLoris Attack**:
  - A Windows 0-day denial-of-service attack.
  - Note: Not responsible for misuse by others.
  - Consolidation of research and techniques to advance the state of the art.
  - Prototype used in real engagements; submit fixes, not issues.

### Intrusion Phases
- Reconnaissance
- Initial Exploitation
- Establish Persistence
- Install Tools
- Move Laterally
- Collect, Exfiltrate, and Exploit
- Source: Rob Joyce, NSA/TAO Director, Enigma 2017

## Current State of Windows Post-Exploitation
- **Open-Source Options**:
  - Meterpreter
  - Cobalt Strike
  - PowerShell Empire
- **Roll Your Own**:
  - A viable option, as adversaries often do.

### Downsides of PE Malware
- **Meterpreter**:
  - Excellent software but often involves dropping a binary, which is easily detected by antivirus (AV).
  - Evasion techniques like Veil Evasion and Shellter are necessary.
- **PowerShell**:
  - Requires PowerShell (Server 2008 SP2 or later with modern .NET).
  - Extensive logging and disabling mechanisms.

## WTS C3 - COM C&C
- **Target**: Windows 2000 SP0 and possibly earlier.
- **Features**:
  - JScript/VBScript baked into the core of Windows.
  - Powerful COM objects exposed by the OS.
  - Creative use of default executables.
  - In-memory execution capabilities.

### COM Background
- **Component Object Model (COM)**:
  - Language-neutral and object-oriented.
  - Binary interface and distributed.
  - Precursor to .NET, still relevant in Windows.
  - Found everywhere in Windows.

### Downsides of WSH and VBScript
- **WSH**:
  - No access to Windows API.
  - No real threading.
  - Missing standard functions like Base64.
- **VBScript**:
  - Inefficient string iterations (Shlemiel the Painter problem).
  - Insane exception handling method ("On error resume next").
  - Not a lingua franca.

### Readline Improvements
- **Interactive Shell**:
  - Fixed output overwriting input.
  - Commit to Metasploit in PR #7570.
  - Still an issue in Empire.

## Koadic Terminology
- **Zombie**: A hooked target.
- **Stager**: Web server to perform hook.
- **Implant**: Starts jobs on a zombie.
- **Job**: Performs specific tasks.

### Architecture Overview
- **Plugin Architecture**:
  - `run()` method for stagers and implants.
  - Variable-based JS files and helper functions in `stdlib.js`.
- **Implant Categories**:
  - Pivot, Persistence, Manage, Elevate, Gather, Scan, Fun, Inject.

### Stager Architecture
- **Hooking**:
  - Manual command from IE, Office macros, etc.
  - Python simple HTTP/S threaded server with TLS/SSL.
  - Long-polling mechanism.
- **Job Cloning**:
  - Session ID assignment and job ID retrieval.
  - Job payload execution and reporting.

### Techniques and Bypasses
- **regsvr32.exe**:
  - COM Scriptlets, less sandboxed than MSHTA.
- **MSHTA.exe Stager**:
  - HTML Applications with registry and filesystem access.
  - Tiny payload, missing on Windows 2000.
- **Hidden HTA**:
  - Techniques to hide the window.
- **rundll32.exe**:
  - Abuses path/command line parsing, loads MSHTML.DLL.
  - Less visible than MSHTA.

### File Operations
- **Uploading Files**:
  - Binary data handling and Adodb.Stream.Write.
  - Double encoding and lookup table for decoding.
- **Downloading Files**:
  - Post data encoding and null byte handling.

### UAC Bypasses
- **Methods**:
  - eventvwr.exe, sdclt.exe, fodhelper.exe, UACME.
  - Future work includes 35+ methods.

### Dumping NTLM
- **Local Machines**:
  - Registry hives and CoreSecurity/Impacket.
- **Domain Controllers**:
  - Shadow copy and secretsdump.py.

### HTTP and TCP Scanner
- **HTTP COM Objects**:
  - Msxml2.XMLHTTP, Microsoft.XMLHTTP, etc.
  - AJAX Port Scanner for port scanning.
- **WMI**:
  - Remote command execution, runs in session 0.
  - No GUI, requires hacks for UAC bypass.

### Excel COM Object
- **In-Memory Spreadsheets**:
  - No need for GUI, VBA macros with Windows API access.
  - Shellcode and reflective DLLs.

### DotNetToJs and DynamicWrapperX
- **DotNetToJs**:
  - Uses COM objects installed with .NET.
  - Access to Windows API.
- **DynamicWrapperX**:
  - Freeware by Yuri Popov.
  - Registration-free COM, avoids registry writes.

### Mimikatz
- **powerkatz.dll**:
  - PowerShell Empire uses "memory module".
  - Custom command execution with privilege elevation.
- **mimishim.dll**:
  - Reflective DLL with built-in HTTP.
  - Process hollowing and powerkatz.dll injection.

### Mitigations
- **Device Guard/AppLocker/CI**:
  - Block WSH, HTA, SCT.
  - Remove all .exes and COM objects, including script parsers.

### Future Work
- **Code Cleanup**:
  - JavaScript minimizer/obfuscator.
  - Implement getsystem and persistence implants.
  - Close DoS vectors.

### Related Talks
- **COM in Sixty Seconds**:
  - James Forshaw, INFILTRATE 2017.
- **Windows Archaeology**:
  - Casey Smith and Matt Nelson, BSides Nashville 2017.
- **Establishing a Foothold with JavaScript**:
  - Casey Smith, Derbycon 2016.

### Thanks!
- **Contributors**:
  - @zerosum0x0
  - @Aleph___Naught
  - @JennaMagius
  - @The_Naterz
- **GitHub Repository**: [Koadic](https://github.com/zerosum0x0/koadic)
- **DEF CON Workshop**:
  - Saturday @ 14:30, Octavarius 5.
  - Windows Post-Exploitation/Malware Forward Engineering.