### Wire Applications and Fault Hypothesis

For wire applications, we must adopt the fault hypothesis outlined in this paper. However, as we will demonstrate, even simple failure scenarios are not always tolerated.

### FlexRay Startup Algorithm

The FlexRay startup algorithm is illustrated in Figure 5. The figure uses boxes to represent states, arrows to depict state transitions during algorithm execution, and circles to indicate successful startup termination, where a node reaches the SYNC state.

**States:**
- STARTUP_PREPARE
- COLDSTART_LISTEN
- INTEGRATION_LISTEN
- COLDSTART_COLLISION_RESOLUTION
- INITIALIZE_SCHEDULE
- COLDSTART_CONSISTENCY_CHECK
- INTEGRATION_COLDSTART_CHECK
- INTEGRATION_CONSISTENCY_CHECK
- COLDSTART_GAP
- COLDSTART_JOIN
- ABORT_STARTUP

**Figure 5. FlexRay Startup Algorithm (from FlexRay 2.0 Specification [4, p. 145])**

FlexRay defines specific "coldstart" nodes, which are allowed to execute the coldstart process. Nodes that are not designated as coldstart nodes will not participate in the coldstart but will integrate after a sufficient set of coldstart nodes have established synchronous operation. Among the coldstart nodes, we can distinguish between the "leading coldstart node" and the "following coldstart nodes." This distinction is made dynamically during the startup algorithm's execution.

### Coldstart Process

After power-on, nodes execute a "wakeup algorithm" to ensure all non-faulty nodes are ready to execute the startup algorithm. The nodes then enter the COLDSTART_LISTEN state, where they attempt to receive FlexRay messages for at least two TDMA rounds. If a "collision avoidance symbol (CAS)" or a correct message header is received, the timer is reset, and the node re-enters COLDSTART_LISTEN. If a correct message is received, the node transitions to INITIALIZE_SCHEDULE and attempts to integrate.

If two TDMA rounds pass without receiving either a CAS or a correct header, the node transitions from COLDSTART_LISTEN to COLDSTART_COLLISION_RESOLUTION, where it transmits one CAS. After a specified timeout, the node starts the TDMA schedule at the first slot and sends in its a priori assigned slot, unless it leaves the state before. In case of a collision, more than one node may take this transition simultaneously, and COLDSTART_COLLISION_RESOLUTION ensures that only one node remains in this state. The position in the TDMA schedule serves as a priority mechanism: in a well-configured FlexRay system, the foremost node in the schedule will be the first to transmit a message, causing other nodes in STARTUP_PREPARE to transition to COLDSTART_LISTEN.

### Leading Coldstart Node

After four rounds in COLDSTART_COLLISION_RESOLUTION, the leading coldstart node transitions to COLDSTART_CONSISTENCY_CHECK and checks if there are nodes that used its messages for integration. If at least one such node exists, the leading coldstart node tries to maintain communication for one more TDMA round until it concludes that synchronized operation has been reached. If the leading coldstart node does not receive acknowledgment, it enters COLDSTART_GAP, where it waits for one TDMA round. If a CAS or a correct header is received, the node re-enters STARTUP_PREPARE. After one TDMA round, the leading coldstart node re-enters COLDSTART_COLLISION_RESOLUTION and attempts to synchronize other nodes again, this time without broadcasting a CAS but by starting the TDMA schedule in the first slot.

For successful integration, the following coldstart nodes require four messages from the leading coldstart node (one per TDMA round). Each coldstart attempt consists of four rounds. Additionally, each node has a counter that tracks transitions to COLDSTART_COLLISION_RESOLUTION; if this counter reaches a specified upper bound, the node stops trying to become the leading coldstart node and remains in COLDSTART_LISTEN.

### Model-Checking Results

Our model-checking studies focused on the coldstart nodes, as it is essential that these nodes reach synchronous operation before non-coldstart nodes can integrate. The studies identified and confirmed startup scenarios where even simple failure modes, such as a repeating fail-silence faulty node, prevent a successful system startup. We discuss three startup scenarios:

1. **Fault-Free Startup Scenario:**
   - **Startup Time:** Defined as the duration from when at least two nodes leave STARTUP_PREPARE to when all non-faulty nodes reach SYNC.
   - **Worst-Case Startup Time:** Approximately 15 TDMA rounds in a collision scenario, where all nodes transition to COLDSTART_COLLISION_RESOLUTION simultaneously. The leading coldstart node is selected, and other coldstart nodes return to COLDSTART_LISTEN. Since the first message from the leading coldstart node is only used for the state transition back to COLDSTART_LISTEN, this coldstart attempt is lost. The next coldstart attempt by the leading coldstart node is successful.

2. **Resetting Leading Coldstart Node Scenario:**
   - **Priority-Based Algorithm:** The coldstart algorithm is based on unique timeouts, with one node having the highest priority (the node with the foremost slot in the TDMA schedule).
   - **Failure Mode:** The leading coldstart node may exhibit a failure mode where it always becomes the leading coldstart node but fails to send messages for four consecutive rounds, resetting after the third round.
   - **Counter Measure:** The node-internal coldstart attempts counter may not be sufficient to handle this scenario, as the node has ample time to restart and reset the counter. This repeated fail-silence behavior prevents the system from reaching synchronous operation. An appropriate guardian instance can handle this scenario, leading to a worst-case startup time of 27 rounds + 2 slots.

3. **CAS-Babbling Channel:**
   - **CAS Structure:** A low-pulse of a specified duration.
   - **Failure Assumption:** A faulty channel may continually send CAS, preventing nodes from leaving COLDSTART_LISTEN.
   - **Solution:** Two changes in the algorithm: (a) ignore all CAS symbols and use only messages less likely to be forged by a channel, and (b) specify unique timeouts for an appropriate contention resolution algorithm. This strategy results in a worst-case startup time of 23 rounds.

### Guardian Functionality

Systems using a shared communication medium require guardian functionality to prevent a faulty node from permanently blocking the shared resource. During synchronous operation, guardian functionality is straightforward, as the guardian grants access to the shared resource to the only node allowed to broadcast at a particular interval. However, during startup, the nodes and guardians are not yet synchronized, making the guardian functionality more complex and dependent on the startup algorithm used.

One possible guardian instance for LTTP is discussed in [14, Chapter 5], presenting the main building blocks for constructing a guardian (for both LTTP and FlexRay).

### Conclusion

The startup problem in fault-tolerant time-triggered communication is often underestimated. Existing solutions assume a fail-silent behavior of the nodes. This work extends the fault hypothesis to an arbitrary failure model for individual nodes and demonstrates that the startup problem can be solved. This approach simplifies the design and validation of safety-critical systems.

This paper presented a system model for safety-critical systems, discussed a general startup strategy, and derived a new startup algorithm for LTTP, encapsulating fault-tolerance capabilities. We also analyzed the FlexRay startup algorithm, which is not inherently fault-tolerant and requires high guardian functionality. Formal model-checking and exhaustive fault simulation were used to test the startup algorithms in the presence of failures, proving to be valuable tools for optimizing the startup algorithm and guardian instances.

### Acknowledgments

This work was sponsored by the European Network of Excellence ARTIST2, the European Project DECOS, and TTTech Computertechnik AG.

### References

[1] A. Ademaj, G. Bauer, H. Sivencrona, and J. Torin. Evaluation of fault handling of the time-triggered architecture with bus and star topology. In Proc. of International Conference on Dependable Systems and Networks (DSN 2003), San Francisco, Jun. 2003.

[2] G. Bauer, H. Kopetz, and W. Steiner. Byzantine fault containment in ttp/c. Proceedings of the 2002 Intl. Workshop on Real-Time LANs in the Internet Age (RTLIA 2002), pages 13–16, Jun. 2002.

[3] V. Claesson, H. Lön, and N. Suri. An efficient tdma start-up and restart synchronization approach for distributed embedded systems. IEEE Transactions on Parallel and Distributed Systems, 15(7), July 2004.

[4] F. Consortium. FlexRay Communications System - Protocol Specification - Version 2.0. FlexRay Consortium, 2004. Available at http://www.flexray.com.

[5] K. Driscoll, B. Hall, H. Sivencrona, and P. Zumsteg. Byzantine fault tolerance, from theory to reality. In Computer Safety, Reliability, and Security, volume 2788 of Lecture Notes in Computer Science, pages 235–248. Springer-Verlag, Vienna, Heidelberg, Oct. 2003.

[6] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed consensus with one faulty process. J. ACM, 32(2):374–382, 1985.

[7] IEEE, INC. Standard IEEE 802.4 – Information processing systems– Local Area networks– Part 4: Token-passing bus access method and physical layer specifications, 1990.

[8] L. Kleeman and A. Cantoni. Metastable behavior in digital IEEE Design & Test of Computers, pages 4–19, Dec. 1987.

[9] H. Kopetz. TTP/C Protocol – Version 1.0. TTTech Computertechnik AG, Vienna, Austria, July 2002. Available at http://www.ttpforum.org.

[10] H. Kopetz, M. Paulitsch, C. Jones, M.-O. Killijian, E. Marsden, N. Moffat, D. Powell, B. Randell, A. Romanovsky, and R. Stroud. Revised version of dsos conceptual model. Project Deliverable for DSoS (Dependable Systems of Systems), Research Report 35/2001, Technische Universität Wien, Institut für Technische Informatik, Treitlstr. 1-3/182-1, 1040 Vienna, Austria, 2001.

[11] A. Krüger. Interface Design for Time-Triggered Real-Time System Architectures. PhD thesis, Technische Universität Wien, Institut für Technische Informatik, Treitlstr. 3/3/182-1, 1040 Vienna, Austria, 1997.

[12] H. Lön. Initial synchronization of TDMA communication in distributed real-time systems. In 19th IEEE Int. Conf. on Distributed Computing Systems, pages 370–379, Gothenburg, Sweden, 1999.

[13] H. Lön and P. Pettersson. Formal verification of a TDMA protocol start-up mechanism. In Pacific Rim International Symposium on Fault-Tolerant Systems (PRFTS ’97), pages 235–242, Taipei, Taiwan, Dec. 1997. IEEE.

[14] W. Steiner. Startup and Recovery of Fault-Tolerant Time-Triggered Communication. PhD thesis, Technische Universität Wien, Institut für Technische Informatik, Treitlstr. 3/3/182-1, 1040 Vienna, Austria, 2004.

[15] W. Steiner. Model-checking studies of the flexray startup algorithm. Research Report 57/2005, Technische Universität Wien, Institut für Technische Informatik, Treitlstr. 1-3/182-1, 1040 Vienna, Austria, 2005.

[16] W. Steiner and H. Kopetz. The startup problem in fault-tolerant time-triggered communication. Research Report 06/2006, Technische Universität Wien, Institut für Technische Informatik, Treitlstr. 1-3/182-1, 1040 Vienna, Austria, 2006.

[17] W. Steiner and M. Paulitsch. The transition from asynchronous to synchronous system operation: An approach for distributed fault-tolerant systems. In Proceedings of ICDCS, Vienna, Austria, July 2002. IEEE.

[18] W. Steiner, M. Paulitsch, and H. Kopetz. Multiple failure correction in the time-triggered architecture. Proc. of 9th Workshop on Object-oriented Real-time Dependable Systems (WORDS 2003f), Oct. 2003.

[19] W. Steiner, J. Rushby, M. Sorea, and H. Pfeifer. Model checking a fault-tolerant startup algorithm: From design exploration to exhaustive fault simulation. The International Conference on Dependable Systems and Networks (DSN 2004), Jun. 2004.

[20] C. Temple. Avoiding the Babbling-Idiot Failure in a Time-Triggered Communication System. In Proceedings of 28th Annual International Symposium on Fault-Tolerant Computing, pages 218–227, June 1998.