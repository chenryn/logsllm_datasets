以下是优化后的参考文献列表和附录部分，以提高清晰度、连贯性和专业性：

### 参考文献
1. (NSDI 14), 2014, pp. 401–414.
2. X. Lu, M. W. U. Rahman, N. Islam, D. Shankar, and D. K. Panda, "Accelerating Spark with RDMA for Big Data Processing: Early Experiences," in *2014 IEEE 22nd Annual Symposium on High-Performance Interconnects*. IEEE, 2014, pp. 9–16.
3. A. Bhat, N. S. Islam, X. Lu, M. Wasi-ur Rahman, D. Shankar, and D. K. D. Panda, "A Plugin-Based Approach to Exploit RDMA Benefits for Apache and Enterprise HDFS," in *BPOE*. Springer, 2015, pp. 119–132.
4. M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard et al., "TensorFlow: A System for Large-Scale Machine Learning," in *12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16)*, 2016, pp. 265–283.
5. Mellanox, "Accelerate Microsoft SQL Server Performance," <http://www.mellanox.com/related-docs/solutions/SB_MFSFT_SQL.PDF>, [访问日期: 2019年3月24日].
6. ——, "Mellanox Mitigates Meltdown Mess, Stops Spectre Security Slowdown," <http://www.mellanox.com/blog/2018/02/spectre-meltdown-restore-security-performance-patches-mellanox-offload-technologies/>, [访问日期: 2019年3月24日].
7. M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin et al., "Meltdown: Reading Kernel Memory from User Space," in *27th USENIX Security Symposium (USENIX Security 18)*, 2018, pp. 973–990.
8. C. Maurice, N. Le Scouarnec, C. Neumann, O. Heen, and A. Francillon, "Reverse Engineering Intel Last-Level Cache Complex Addressing Using Performance Counters," in *International Workshop on Recent Advances in Intrusion Detection*. Springer, 2015, pp. 48–65.
9. P. Vila, B. Köpf, and J. F. Morales, "Theory and Practice of Finding Eviction Sets," in *IEEE Symposium on Security and Privacy*, 2019.
10. H. Bal, D. Epema, C. de Laat, R. van Nieuwpoort, J. Romein, F. Seinstra, C. Snoek, and H. Wijshoff, "A Medium-Scale Distributed System for Computer Science Research: Infrastructure for the Long Term," *Computer*, vol. 49, no. 5, pp. 54–63, 2016.
11. C. Maurice, C. Neumann, O. Heen, and A. Francillon, "C5: Cross-Cores Cache Covert Channel," in *International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment*. Springer, 2015, pp. 46–64.
12. C. Maurice, M. Weber, M. Schwarz, L. Giner, D. Gruss, C. A. Boano, S. Mangard, and K. Römer, "Hello from the Other Side: SSH over Robust Cache Covert Channels in the Cloud," in *NDSS*, vol. 17, 2017, pp. 8–11.
13. J. Jose, H. Subramoni, M. Luo, M. Zhang, J. Huang, M. Wasi-ur Rahman, N. S. Islam, X. Ouyang, H. Wang, S. Sur et al., "Memcached Design on High-Performance RDMA Capable Interconnects," in *2011 International Conference on Parallel Processing*. IEEE, 2011, pp. 743–752.
14. D. X. Song, D. A. Wagner, and X. Tian, "Timing Analysis of Keystrokes and Timing Attacks on SSH," in *USENIX Security Symposium*, vol. 2001, 2001.
15. K. Zhang and X. Wang, "Peeping Tom in the Neighborhood: Keystroke Eavesdropping on Multi-User Systems," in *USENIX Security Symposium*, vol. 20, 2009, p. 23.
16. K. S. Killourhy and R. A. Maxion, "Free vs. Transcribed Text for Keystroke-Dynamics Evaluations," in *Proceedings of the 2012 Workshop on Learning from Authoritative Security Experiment Results*. ACM, 2012, pp. 1–8.
17. W. Chen and W. Chang, "Applying Hidden Markov Models to Keystroke Pattern Analysis for Password Verification," in *Proceedings of the 2004 IEEE International Conference on Information Reuse and Integration (IRI 2004)*. IEEE, 2004, pp. 467–474.
18. V. Shanmugapriya and G. Padmavathi, "Keystroke Dynamics Authentication Using Neural Network Approaches," in *International Conference on Advances in Information and Communication Technologies*. Springer, 2010, pp. 686–690.
19. S. Z. S. Idrus, E. Cherrier, C. Rosenberger, and P. Bours, "Soft Biometrics for Keystroke Dynamics: Profiling Individuals While Typing Passwords," *Computers & Security*, vol. 45, pp. 147–155, 2014.
20. P. Kobojek and K. Saeed, "Application of Recurrent Neural Networks for User Verification Based on Keystroke Dynamics," *Journal of Telecommunications and Information Technology*, no. 3, pp. 80–90, 2016.
21. Redis, "Redis," <https://redis.io/>, [访问日期: 2019年3月24日].
22. S. Van Schaik, K. Razavi, B. Gras, H. Bos, and C. Giuffrida, "RevAnC: A Framework for Reverse Engineering Hardware Page Table Caches," in *Proceedings of the 10th European Workshop on Systems Security*. ACM, 2017, p. 3.
23. F. Liu, Q. Ge, Y. Yarom, F. Mckeen, C. Rozas, G. Heiser, and R. B. Lee, "Catalyst: Defeating Last-Level Cache Side-Channel Attacks in Cloud Computing," in *High Performance Computer Architecture (HPCA)*, 2016 IEEE International Symposium on. IEEE, 2016, pp. 406–418.
24. Z. Zhou, M. K. Reiter, and Y. Zhang, "A Software Approach to Defeating Side Channels in Last-Level Caches," in *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2016, pp. 871–882.
25. D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa, "Strong and Efficient Cache Side-Channel Protection Using Hardware Transactional Memory," in *26th USENIX Security Symposium (USENIX Security 17)*, 2017, pp. 217–233.
26. H. Raj, R. Nathuji, A. Singh, and P. England, "Resource Management for Isolation-Enhanced Cloud Services," in *Proceedings of the 2009 ACM Workshop on Cloud Computing Security*. ACM, 2009, pp. 77–84.
27. R. Sprabery, K. Evchenko, A. Raj, R. B. Bobba, S. Mohan, and R. H. Campbell, "A Novel Scheduling Framework Leveraging Hardware Cache Partitioning for Cache-Side-Channel Elimination in Clouds," arXiv preprint arXiv:1708.09538, 2017.
28. M. T. Aga, Z. B. Aweke, and T. Austin, "When Good Protections Go Bad: Exploiting Anti-DoS Measures to Accelerate Rowhammer Attacks," in *2017 IEEE International Symposium on Hardware Oriented Security and Trust (HOST)*. IEEE, 2017, pp. 8–13.
29. D. Cock, Q. Ge, T. Murray, and G. Heiser, "The Last Mile: An Empirical Study of Timing Channels on seL4," in *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2014, pp. 570–581.
30. Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu, "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors," in *ACM SIGARCH Computer Architecture News*, vol. 42, no. 3. IEEE Press, 2014, pp. 361–372.
31. M. Seaborn and T. Dullien, "Exploiting the DRAM Rowhammer Bug to Gain Kernel Privileges," *Black Hat*, vol. 15, 2015.
32. E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, "Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector," in *2016 IEEE Symposium on Security and Privacy (SP)*. IEEE, 2016, pp. 987–1004.
33. K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and H. Bos, "Flip Feng Shui: Hammering a Needle in the Software Stack," in *25th USENIX Security Symposium (USENIX Security 16)*, 2016, pp. 1–18.
34. V. Van Der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss, C. Maurice, G. Vigna, H. Bos, K. Razavi, and C. Giuffrida, "Drammer: Deterministic Rowhammer Attacks on Mobile Platforms," in *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2016, pp. 1675–1689.
35. A. Tatar, R. K. Konoth, E. Athanasopoulos, C. Giuffrida, H. Bos, and K. Razavi, "Throwhammer: Rowhammer Attacks Over the Network and Defenses," in *2018 USENIX Annual Technical Conference (USENIX ATC 18)*, 2018, pp. 213–226.
36. M. Lipp, M. T. Aga, M. Schwarz, D. Gruss, C. Maurice, L. Raab, and L. Lamster, "Nethammer: Inducing Rowhammer Faults Through Network Requests," arXiv preprint arXiv:1805.04956, 2018.
37. D. Foo Kune and Y. Kim, "Timing Attacks on PIN Input Devices," in *Proceedings of the 17th ACM Conference on Computer and Communications Security*. ACM, 2010, pp. 678–680.
38. S. Jana and V. Shmatikov, "Memento: Learning Secrets from Process Footprints," in *2012 IEEE Symposium on Security and Privacy*. IEEE, 2012, pp. 143–157.
39. K. Ali, A. X. Liu, W. Wang, and M. Shahzad, "Keystroke Recognition Using WiFi Signals," in *Proceedings of the 21st Annual International Conference on Mobile Computing and Networking*. ACM, 2015, pp. 90–102.
40. W. Diao, X. Liu, Z. Li, and K. Zhang, "No Pardon for the Interruption: New Inference Attacks on Android Through Interrupt Timing Analysis," in *2016 IEEE Symposium on Security and Privacy (SP)*. IEEE, 2016, pp. 414–432.
41. D. Wang, A. Neupane, Z. Qian, N. B. Abu-Ghazaleh, S. V. Krishnamurthy, E. J. Colbert, and P. Yu, "Unveiling Your Keystrokes: A Cache-Based Side-Channel Attack on Graphics Libraries," in *NDSS*, 2019.
42. M. A. Hogye, C. T. Hughes, J. M. Sarfaty, and J. D. Wolf, "Analysis of the Feasibility of Keystroke Timing Attacks Over SSH Connections," Research Project at University of Virginia, 2001.

### 附录A：前向选择算法
**算法1：前向选择**
```plaintext
// 设 M 为一个页对齐的地址池
while 没有检测到驱逐 do
    // 从地址池 M 中选择 n 个地址
    S ← selectFromAddressPoolM(n)
    // 写入 S 并对 S 中的所有元素进行定时访问
    rdmaWrite(S)
    for i in S.size() do
        latencies[i] ← rdmaTimedRead(S[i])
    // 取时间最长的地址作为潜在的 x
    x ← argmax(latencies)
    // 访问 x 的缓存命中时间
    rdmaWrite(x)
    t1 ← rdmaTimedRead(x)
    // 潜在的从主内存读取 x
    rdmaWrite(S \ x)
    t2 ← rdmaTimedRead(x)
    // 确定 x 是否从 S \ x 中被驱逐
    if t2 − t1 > threshold then
        S ← S \ x
        break
    n ← n + 1
```

### 附录B：后向选择算法
**算法2：后向选择**
```plaintext
// 设 S 为前向选择中驱逐地址 x 的地址集合
for k do
    // 选择 n 个地址从 S 中移除
    n ← min(n, S.size()/2)
    Srm ← selectFromS(n)
    // 缓存命中时间 x
    rdmaWrite(x)
    t1 ← rdmaTimedRead(x)
    // 潜在的从主内存读取 x
    rdmaWrite(S \ Srm)
    t2 ← rdmaTimedRead(x)
    // 确定 x 是否从 S \ Srm 中被驱逐
    if t2 − t1 > threshold then
        S ← S \ Srm
        n ← n + 10
    n ← n − 1
```

### 附录C：在线跟踪算法
**算法3：在线跟踪**
```plaintext
// 设 pos 为环形缓冲区指针的起始位置
while 测量 do
    // 以窗口大小 w 获取 pos 附近的驱逐集
    es ← getEvictionSets(pos, w)
    Prime(es)
    while True do
        // 缓存命中时间 x
        rdmaWrite(x)
        t1 ← rdmaTimedRead(x)
        // 潜在的从主内存读取 x
        rdmaWrite(S \ Srm)
        t2 ← rdmaTimedRead(x)
        // 确定 x 是否从 S \ Srm 中被驱逐
        if t2 − t1 > threshold then
            S ← S \ Srm
            n ← n + 10
        n ← n − 1
        // 如果许多不同步测量或同步点失败，则发送网络数据包
        if unsynced > 2 || send == 1 then
            SendPacketToServer()
            injected = 1
        latencies ← Probe(es)
        if latencies[pos] > threshold || injected == 1 then
            break
        if latencies[pos] > threshold || injected == 1 then
            // 达到同步状态
            pos ← ExtractNextPos(latencies)
            unsynced ← 0
            send ← 0
            syncStatus ← 1
        else
            if injected == 1 then
                // 错过同步状态
                pos ← RecoverPos(latencies)
                send ← 1
                syncStatus ← 2
            else
                // 不同步测量
                unsynced ← unsynced + 1
                send ← 0
                syncStatus ← 0
        // 导出当前测量结果
        Save(latencies, syncStatus)
```

### 附录D：完整评估结果
| **表III：键盘数据、tcpdump网络数据和缓存测量的端到端分类评估** |
| --- |
| **受试者** | s019 | s021 | s027 | s033 | s039 | s040 | s043 | s046 | s062 | s063 | s067 | s070 | s071 | s085 | s087 | s089 | s091 | s092 | s093 | s094 | **平均值** |
| **训练集迹线数** | 420 | 298 | 314 | 509 | 363 | 319 | 364 | 474 | 344 | 369 | 309 | 313 | 616 | 386 | 366 | 377 | 315 | 301 | 352 | - |

希望这些改进能够使文本更加清晰、连贯和专业。如果有其他需要进一步优化的部分，请告诉我。