### Facebook 的生产工程师
*来自 Facebook 的 Pedro Canahuati 和 David N. Blank-Edelman 的讨论*

**大卫：** 什么是生产工程师？

**佩德罗：** 生产工程师（Production Engineer, PE）这一角色源于一种信念，即运维问题应通过软件解决方案来解决，而构建这些软件的工程师是操作和维护这些软件的最佳人选。

在软件开发的早期阶段，编写代码的开发人员通常也负责调试和修复问题，有时甚至需要处理硬件问题。然而，随着远程软件系统、互联网和大型数据中心的发展，这种做法发生了巨大变化。如今，常见的情况是，软件工程师编写并开发应用程序，然后将代码交给质量保证（QA）团队进行测试，最后由另一个团队部署和调试。某些环境中，还有专门的发布工程团队负责部署代码，以及运维团队确保系统的稳定性和响应警报。

当 QA 和运维团队具备解决问题所需的知识，并且各团队之间的反馈循环顺畅时，这种方法非常有效。但如果情况并非如此，修复或调试生产问题可能需要回到软件工程师那里，这会显著延迟修复时间。在 Facebook，我们的生产工程（PE）团队重新整合了软件工程师（SWE）和运维人员的角色。

几年前，我们启动了 PE 模式，旨在在软件工程和运营团队之间建立更加协作的文化。我们的目标是确保 Facebook 的基础设施健康，并使我们的用户社区能够随时访问该平台。PE 团队通过自动化实现这一目标，包括编写新工具以简化运维工作、性能分析、系统级调试、必要时的故障恢复，以及教授其他团队如何自行运行系统。Facebook 的工程团队构建了通用基础设施，每个人都使用这些基础设施来构建和部署软件。虽然我们的基础设施已经有机地发展，但仍然存在一些未解决的运维问题。生产工程师帮助弥合这一差距，确保团队能够专注于解决难题，而不是花大量时间解决运维问题。

PE 团队不仅编写代码以降低维护复杂性，还负责调试影响全球数十亿用户的实时生产系统中的难题，从 Facebook 的 Hadoop 数据仓库等后端服务到动态消息等前端服务，还包括缓存、负载平衡和部署系统等基础设施组件。PE 与 SWE 并肩工作，确保 Facebook 的正常运行。该团队还帮助软件工程师了解其软件如何与其环境交互。

可以将生产工程师视为集大成者：他们同时具备大规模制造（如硬件、汽车、工业等）、专家工程师和优秀的运维管理人员的特质。生产工程师通常对工程实践有广泛的了解，并理解与生产操作相关的挑战。他们的目标是确保生产以最平稳的方式运行。一个很好的类比是汽车生产线：设计团队创建汽车，工程师团队构建硬件，另一个团队负责自动化的装配线。当流程中断时，生产工程师就会介入，因为他们了解整个生产线的流程，包括上游和下游的所有环节。他们知道汽车是如何设计的，应该如何工作，以及用于制造汽车的软件应该做什么。有了这些知识，生产工程师可以诊断和修复问题，并与整个团队合作，防止将来发生类似事件。

在 Facebook，生产工程师不是生产线上的运维人员，但他们确实了解生产线上的所有东西是如何运作的。例如，当软件响应用户流量或出现故障时，生产工程师通常是了解代码如何与其环境交互、如何修复和改进代码，以及如何保持代码性能的人。

**大卫：** 你能多说一点关于 PE 的起源故事吗？

**佩德罗：** 在最初的几年里，Facebook 采用了当时业界公认的方法，通过专门的运维团队来运营其生产网站和服务。这些团队包括站点可靠性工程（SRE）和应用程序运维（AppOps）团队。

SRE 团队与传统通信服务商的网络运营中心（NOC）相似，除了他们通过软件来解决运维问题。当时，不到 20 人的 SRE 团队在 AppOps 的支持下，通过三级上报流程监控系统基础结构的问题、响应警报和分审问题。SRE 团队分为三班制，提供全天候覆盖。另一方面，AppOps 是一小群嵌入在软件工程（SWE）团队中的个人。当时的模型是每个服务（如新闻、广告、网络聊天、搜索、数据基础设施）配一名 AppOps 工程师，生产工程师与软件工程师的比例约为 1:10，有时甚至高达 1:40。有时，一个 AppOps 工程师会被分配到多个服务。例如，数据仓库和集中式日志记录系统共享一个 AppOps 工程师。早期，AppOps 能够很好地理解整个应用程序堆栈，以便快速响应和解决中断。

尽管 SRE 团队应该与开发软件的 SWE 团队合作，但在早期开发过程中，SRE 经常缺席，并且经常在部署时才发现新的软件更改或新服务。SRE、AppOps 和 SWE 之间的关系并不牢固。SRE 团队还必须兼顾新数据中心的启用和确保在流量高峰时段满足容量需求的额外责任。SRE 通过企业级负载均衡器上的 Web 接口在多个数据中心之间移动用户负载，确保满足容量需求。通过简单的 shell 脚本和轻量级工具，将这些设备或内部代码库提供的 API 集成在一起，从而实现了某种程度的自动化。

正当 SRE、AppOps 和 SWE 团队专注于扩展基于 Web 服务的网站和基础设施时，用户开始从桌面应用过渡到移动应用，公司也重新确定了优先级，采取移动优先的战略。这大大增加了服务的复杂性，并加速了对不断增加的基础设施的需求。Facebook 在移动世界中的服务规模扩展，加上超大规模客户增长，使 SRE 和 AppOps 团队不堪重负。大多数 AppOps 工程师必须全天候待命，而故障修复成为工作常态。随着用户增长和复杂性的增加，SRE 和 AppOps 都无法专注于招聘，并且数月无法雇佣更多员工，导致团队陷入困境。

由于 SRE 团队缺乏自动化数据中心配置，以及始终需要在生产中修复单个服务器，基础设施容量已经落后，这加剧了本已具有挑战性的局面。如果没有必要的自动化来加快我们跟上服务器故障和添加新集群的速度，团队最终会处于人力资源的危机状态。人们不知所措，精疲力竭。显然需要一种更好的方法。我们的管理团队认识到，运维团队没有跟上业务变化的步伐，当前的运维模式已经不够。

我们面临的主要挑战是，对 SRE、AppOps 和 SWE 角色的期望不明确；无法平衡修复故障、服务器维护和资源容量扩张的压力；在要求体系结构调整时，SWE 团队的可信度较低。

我们首先致力于明确 SRE、AppOps 和 SWE 的角色。我们理解，团队需要更早地参与软件过程，并且嵌入式模型更有可能适应这个需要。我们还需要在软件和运维团队之间建立更牢固的工作关系和信誉，并确保 SWE 团队对其服务拥有更强的所有权。

我们进行了多步骤重组，并雇佣了不同类型的工程师。为了继续管理不断增长的基础设施需求，我们决定将 SRE 员工一分为二。我们将停用 SRE 名称，并成立一个新的站点可靠性操作（SRO）团队，并扩展现有的 AppOps 团队，成员来自前 SRE 团队。通过从前 SRE 团队中调动关键人员，我们能够快速扩展 AppOps 的运维知识和人员配备，并将团队规模扩大一倍。随着时间的推移，停用 SRE 名称也有助于改变 SWE 团队的期望。

SRO 的职权范围侧重于两个领域。首先是继续必要的故障修复工作。第二是建立软件和自动化，以减少人类对这些努力的参与。我们还将一些重组的 SRE 转移到一个 SRO 小组中，专注于拓展新资源。