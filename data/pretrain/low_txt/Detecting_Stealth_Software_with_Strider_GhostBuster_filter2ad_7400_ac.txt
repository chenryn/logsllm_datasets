### Ghostware Detection and the GhostBuster Tool

Ghostware can choose to hide processes only from Task Manager and `tlist`. The current design of GhostBuster, as described so far, will not detect such ghostware because the tool cannot experience the hiding behavior. Additionally, ghostware can target GhostBuster, causing resources to be hidden from all running programs except the GhostBuster process.

To address these issues, we have implemented a GhostBuster extension in the form of a DLL. Instead of running the GhostBuster EXE, which can be easily targeted, we inject the GhostBuster DLL into every running process. This allows us to perform scans and comparisons from within each process, effectively turning every process into a GhostBuster. Specifically, OS utilities like Windows Explorer, Task Manager, and RegEdit now function as GhostBusters, making it more difficult for ghostware to hide from common utilities while targeting GhostBuster.

Injecting GhostBuster into an anti-virus scanner is particularly interesting. As a demonstration, we set up a machine infected with Hacker Defender, installed the eTrust anti-virus software, and ran the on-demand scanner. The scanner could not detect Hacker Defender, even though it had the known-bad signatures. By injecting the GhostBuster DLL into the scanner process (InocIT.exe), we enabled InocIT.exe to detect Hacker Defender’s hidden entries. This combination creates a dilemma for malware: they will be detected by GhostBuster if they hide from InocIT.exe and by the eTrust signatures if they do not hide.

### Outside-the-Box Scanning

Outside-the-box scanning of volatile resources such as processes and modules requires an additional step of making the image of the relevant memory address space available outside. Ideally, a PCI-add-in card as described in the Copilot paper [PFM+04] or a Myrinet NIC as described in the Bookdoors paper [BNG+04] should be used to retrieve volatile data through Direct Memory Access (DMA) without the knowledge or intervention of the potentially infected OS. For users without extra hardware, we obtain a "truth approximation" by inducing a blue screen (i.e., kernel crash) to generate a memory dump file, and apply similar kernel data structure traversal code to the dump file to perform the outside-the-box scan. This is only an approximation because future ghostware programs can potentially trap the blue-screen events and remove all traces of themselves from the memory dump.

### Experimental Results

Another potential attack on GhostBuster is to hide a large number of innocent files along with the ghostware files. Although this would make it more difficult to identify ghostware files, the GhostBuster tool still provides effective detection because the existence of a large number of hidden files is a serious anomaly. Figure 6 shows the results of GhostBuster detecting four process-hiding and one module-hiding ghostware programs. The first three, namely Aphex, Hacker Defender, and Berbew, can be detected using the Active Process List as the truth, while FU can only be detected by running GhostBuster in the advanced mode. Since the hidden `vanquish.dll` is injected into many processes, our low-level scan extracts the true state of all modules loaded by all processes from a kernel data structure and compares that with the high-level API scan.

### Automating the Outside-the-Box Solution

There are two extensions that can be implemented to automate the outside-the-box ghostware detection and enhance its usability. In an enterprise environment, the CD boot can be replaced by a network boot through the Remote Installation Service (RIS). Upon a reboot, a client machine contacts the RIS server to obtain a network boot loader, which then performs the outside-the-box scan and diff.

Our results showed that the cross-view diff reports contained zero or very few false positives: in all cases, the number of false positives was four or less, and they were mostly temporary files and log files generated by system daemons such as FTP. We also experimented with the T0rnkit rootkit [ZT], which replaces OS utility programs with trojanized versions. The GhostBuster approach could detect its hidden files as well.

Another approach is to use a Virtual Machine (VM): we include a clean version of VM on the GhostBuster WinPE CD and ask the user to boot the machine from the CD. The GhostBuster process will automatically start, insert an ASEP hook to the potentially infected boot drive to enable auto-start of a high-level scan, and then launch a VM instance to boot from that drive. Inside the VM instance, the scanning code will save the scan result file and notify the host machine of its completion. The host machine then "powers down" the VM instance, grabs the released infected drive, executes the outside-the-box scanning code, removes the added ASEP hook, and invokes the comparison code. If no hidden resource is detected, the machine is rebooted normally into its boot drive.

### Detecting Linux/Unix Ghostware

Similar ghostware problems exist on the Linux/Unix platforms as well [PFM+04, YKS, YC, YW98, B99, YA03]. (In fact, the term "rootkit" originated from the root privilege concept on Unix platforms.) A common technique used by Linux/Unix ghostware programs to hide resources is to intercept system calls to the kernel via a Loadable Kernel Module (LKM) [ZK, YJ, J01]. For example, some rootkits are known to hook `read`, `write`, `close`, and `getdents` (get directory entries) system calls. More advanced rootkits can directly patch the kernel in memory [YC98, YL01].

We have experimented with several file-hiding rootkits, including Darkside 0.2.3 [ZD] for FreeBSD, and Superkit [ZS] and Synapsis for Linux. For the inside-the-box high-level scan, we used the `ls` command to scan all mounted partitions. For the outside-the-box scan, we used the same command from the clean, bootable CD.

### Conclusion

Stealth malware programs are becoming a serious threat to the future of the Internet, yet they have been dealt with mostly in an ad-hoc fashion. In this paper, we have described a cross-view diff-based framework for systematic detection of ghostware programs that hide files, Registry, processes, and loaded modules. We have proposed using the inside-the-box diff of a high-level scan and a low-level scan to provide an efficient, automatic solution that can be run frequently to detect most of today's ghostware programs. Experimental results have shown that it takes only seconds to detect hidden processes and modules, tens of seconds to detect hidden critical Registry entries, and a few minutes to detect hidden files.

For the most popular Windows rootkit, Hacker Defender, we were able to deterministically detect its presence within 5 seconds through hidden-process detection, locate its hidden auto-start Registry keys within one minute, remove the keys to disable the malware, and reboot the machine to delete the now-visible files.

We have also proposed an outside-the-box, CD-boot solution to detect more advanced ghostware that may interfere with the inside-the-box scans. Experimental results based on 12 real-world ghostware programs showed that, while they employ a wide variety of resource-hiding techniques, they can all be uniformly detected by GhostBuster’s diff-based approach that targets the hiding behavior and effectively turns the problem into its own solution. False positives in a cross-view diff report are minimal and can be easily filtered out.

### Acknowledgment

We would like to express our sincere thanks to David Brumley, Aaron Johnson, Lee Yan, Bill Arbaugh, Dan Simon, and Brad Daniels for their valuable discussions and to the reviewers for their valuable comments. The MFT-based technique was inspired by discussions with Robert Hensing, and the implementation was based on the code provided by Ed Elliott and Takefumi Kakimoto.

### References

- [AID] Working with the AppInit_DLLs registry value, http://support.microsoft.com/kb/q197571/
- [B99] D. Brumley, “Invisible Intruders: Rootkits In Practice,” ;login: The Magazine of USENIX and SAGE, http://www.usenix.org/publications/login/1999-9/features/rootkits.html, 1999.
- [BNG+04] A. Bohra, I. Neamtiu, P. Gallard, F. Sultan, and L. Iftode, “Remote Repair of Operating System State Using Backdoors,” in Proc. Int. Conf. on Autonomic Computing (ICAC), pp. 256-263, May 2004.
- [D] Chapter 7 - Disk, File System, and Backup Utilities, Microsoft TechNet, http://www.microsoft.com/technet/prodtechnol/winntas/support/utilitys.mspx
- [HB99] Galen Hunt and Doug Brubacher. “Detours: Binary Interception of Win32 Functions,” in Proc. the 3rd Usenix
- [MSDN] Naming a File, http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/base/naming_a_file.asp
- [PE] Process Explorer, http://www.sysinternals.com/ntw2k/freeware/procexp.shtml
- [PF] How to Disable the Prefetcher Component in Windows XP, http://support.microsoft.com/?kbid=307498
- [PFM+04] Nick L. Petroni, Jr., Timothy Fraser, Jesus Molina, and William A. Arbaugh, “Copilot - a Coprocessor-based Kernel Runtime Integrity Monitor,” in Proc. Usenix Security Symposium, Aug. 2004.
- [RIS] Remote Installation Services, http://www.microsoft.com/windows2000/en/datacenter/help/sag_RIS_Default.asp?url=/windows2000/en/datacenter/help/sag_RIS_Default_topnode.htm
- [SR] Windows XP System Restore, http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnwxp/html/windowsxpsystemrestore.asp
- [SRM] System Restore Monitored File Extensions, http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sr/sr/monitored_file_extensions.asp
- [SR00] D. A. Solomon and M. E. Russinovich, Inside Microsoft Windows 2000, Third Edition, 2000.
- [SPDK04] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla, “SWATT: SoftWare-based ATTestation for Embedded Devices,” in Proc. IEEE Symp. on Security and Privacy, May 2004.
- [W04] “Strider GhostBuster: Why It's A Bad Idea For Stealth Software To Hide Files,” Yi-Min Wang, Usenix Security Symposium, Work-in-Progress Report presentation, http://www.usenix.org/events/sec04/tech/wips/, Aug. 2004.
- [WR+04] Yi-Min Wang, et al., "AskStrider: What Has Changed on My Machine Lately?", Microsoft Research Technical Report MSR-TR-2004-03, Jan. 2004.
- [WRV+04] Yi-Min Wang, Roussi Roussev, Chad Verbowski, "Automating the Outside-the-Box Solution," Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05) 0-7695-2282-3/05 $20.00 © 2005 IEEE
- [ZD] Darkside 0.2.3, FreeBSD rootkit
- [ZK] ZK rootkit
- [ZS] Superkit, Linux rootkit