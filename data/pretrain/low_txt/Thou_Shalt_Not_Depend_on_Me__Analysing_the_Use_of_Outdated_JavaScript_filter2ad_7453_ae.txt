### Table of Library Inclusion Percentages

- 33.7%
- 33.8%
- 35.2%
- 33.5%
- 35.6%
- 14.4%
- 34.2%
- 39.8%
- 33.6%
- 40.1%
- 37.1%
- 48.2%
- 20.0%
- 40.6%
- 41.8%
- 25.6%
- 40.1%
- 43.2%
- 23.5%
- 40.7%
- 23.5%
- 40.8%
- 86.6%
- 84.6%
- 88.6%
- 100.0%
- 85.3%
- 96.4%
- 83.7%
- 85.2%
- 92.3%
- 77.3%
- 86.8%
- 96.9%
- 86.5%

### YUI 3 Inclusion Percentages
- 87.3%
- 92.8%
- 83.8%
- 91.3%
- 92.2%
- 79.6%
- 90.4%
- 87.1%
- 87.3%
- 98.2%
- 84.1%

### Inclusion Filters
- jQuery
- All Inclusions
- Internal
- External
- Inline
- Internal Parent
- External Parent
- Inline Parent
- Direct Inclusion in Root
- Indirect Inclusion
- WordPress
- Non-WordPress
- Ad/Widget/Tracker
- No Ad/Widget/Tracker

### Inclusion Percentages by Category
- 55.4%
- 41.6%
- 62.7%
- 89.9%
- 59.7%
- 45.9%
- 79.8%
- 42.6%
- 77.5%
- 41.6%
- 55.6%
- 89.0%
- 45.5%

### COM and jQ-UI Angular Handlebars Inclusion Percentages
- 37.3%
- 28.1%
- 42.7%
- 25.6%
- 37.0%
- 38.0%
- 48.9%
- 36.2%
- 44.5%
- 20.4%
- 38.6%
- 31.6%
- 37.3%
- 38.7%
- 45.8%
- 38.4%
- 78.2%
- 20.7%
- 41.3%
- 30.8%
- 25.0%
- 38.9%
- 19.2%
- 39.6%
- 87.5%
- 100.0%
- 85.4%
- 94.2%
- 84.1%
- 88.7%
- 86.4%
- 70.3%
- 90.7%
- 87.3%

### Table VI: Days Between Release of Used Version and Newest Available Library Version (Median Over Inclusions)
- **Vulnerable Inclusions**
  - jQuery: 1,476
  - jQuery-Migrate: 1,105
  - jQuery-Mobile: 657
  - Bootstrap: 687
  - Angular: 393
  - Handlebars: 49
  - Prototype: 304
  - MooTools: 1,772
  - YUI 3: 1,417
  - Raphael: 1,491
  - D3: 491
  - COM: 705
  - Non-Vulnerable Inclusions
  - jQuery: 1,024
  - jQuery-Migrate: 287
  - jQuery-Mobile: 57
  - Bootstrap: 140
  - Angular: 122
  - Handlebars: 389
  - Prototype: 1,772
  - MooTools: 1,417
  - YUI 3: 1,491
  - Raphael: 139
  - D3: 140
  - COM: 393

### F. Relative Age of Libraries
When websites include outdated libraries, an interesting question is how far they are behind more current versions of the libraries. We begin by looking at how far sites are behind the most recent patch-level releases of libraries. Patch-level releases are usually (though not always) backwards-compatible. In ALEXA, we observe that non-vulnerable inclusions of Angular lag behind by a median of five versions, whereas the median is seven versions for vulnerable inclusions.

When looking at the number of days between the release date of the included version and the release date of the newest available library version overall, the lag for Angular is 398 days for all inclusions, 657 days for vulnerable inclusions, and 234 days for non-vulnerable inclusions. While this may suggest that there is a relationship between higher lag and vulnerability of a site, we note that the lag is also tied to the availability of newer versions—if no update is available, the lag is zero yet the used version could be vulnerable. For instance, 6.7% of all Angular inclusions in ALEXA use the latest available release in their respective patch branch yet remain vulnerable because the branch contains no fixed version.

For D3, the lag is 491 days, and for Mootools, it is 1,417 days. To characterize lag from a per-site point of view, we calculate the maximum lag of all inclusions on each site and find that 61.4% of ALEXA sites are at least one patch version behind on one of their included libraries (COM: 46.2%). Similarly, the median ALEXA site uses a version released 1,177 days (COM: 1,476 days) before the newest available release of the library.

Finally, we plot this lag according to the category of ALEXA sites in Figure 10. Each candlestick shows the 5th, 25th, 50th, 75th, and 95th percentiles, respectively. We observe that both governmental and financial websites are the longest behind current releases with a median lag of 1,293 and 1,123 days, respectively. Similar to per-category vulnerability rates, parked and adult websites exhibit values better than the average.

In summary, these results demonstrate that the majority of web developers are working with library versions released a long time ago. We observe median lags measured in years, suggesting that web developers rarely update their library dependencies once they have deployed a site.

### G. Duplicate Inclusions
While analyzing the use of JavaScript libraries on websites, we noticed that libraries are often used in unexpected ways. We discuss some examples using jQuery as a case study. About 20.7% of the websites including jQuery in ALEXA (17.2% in COM) do so two or more times. While it may be necessary to include a library multiple times within different documents from different origins, 4.2% of websites using jQuery in ALEXA include the same version of the library two or more times into the same document (5.1% in COM), and 10.9% (5.7%) include two or more different versions of jQuery into the same document. Since jQuery registers itself as a window-global variable, unless special steps are taken only the last loaded and executed instance can be used by client code. For asynchronously included instances, it may even be difficult to predict which version will prevail in the end.

With this caveat in mind, Table VI shows the median lag (in days) behind the most recently released version of each library. We observe significant variations. For instance, the median D3 inclusion in ALEXA uses a version 491 days older than the newest D3 release. For Mootools, the lag is 1,417 days.

To characterize lag from a per-site point of view, we calculate the maximum lag of all inclusions on each site and find that 61.4% of ALEXA sites are at least one patch version behind on one of their included libraries (COM: 46.2%). Similarly, the median ALEXA site uses a version released 1,177 days (COM: 1,476 days) before the newest available release of the library.

Finally, we plot this lag according to the category of ALEXA sites in Figure 10. Each candlestick shows the 5th, 25th, 50th, 75th, and 95th percentiles, respectively. We observe that both governmental and financial websites are the longest behind current releases with a median lag of 1,293 and 1,123 days, respectively. Similar to per-category vulnerability rates, parked and adult websites exhibit values better than the average.

In summary, these results demonstrate that the majority of web developers are working with library versions released a long time ago. We observe median lags measured in years, suggesting that web developers rarely update their library dependencies once they have deployed a site.

### H. Remediations
From a remediation perspective, the picture painted by our data is bleak. We observe that only a very small fraction of potentially vulnerable sites (2.8% in ALEXA, 1.6% in COM) could become free of vulnerabilities by applying patch-level updates, i.e., an update of the least significant version component, such as from 1.2.3 to 1.2.4, which would generally be expected to be backwards compatible. The vast majority of sites would need to install at least one library with a more recent major or minor version, which might necessitate additional code changes due to incompatibilities.

**Version Aliasing:**
Some JavaScript CDNs support version aliasing, where the developer may specify only a prefix of the requested library version, and the CDN will automatically return the latest available version with that prefix. In theory, version aliasing appears to be a robust strategy for developers to easily keep their library dependencies up-to-date. We scan our crawl for library inclusions with URLs of a CDN and detect version aliasing whenever (1) the version given in the URL has only one or two components, such as 1.2, and (2) the library version detected by the static or dynamic method is greater than the prefix extended with zeros, such as 1.2.3 instead of 1.2.0. In ALEXA (and COM), we detect 1,489 (914) confirmed instances of version aliasing, counting at most one per library on each site. Overall, however, the frequency of version aliasing is very small—only around 1.1% of all sites that include jQuery use version aliasing.

Except for one, all instances of aliasing refer to Google’s CDN, with jQuery being the most frequent library. On one hand, 47.2% (37.9%) of jQuery inclusions with aliasing are avoiding a vulnerability, i.e., the inclusions point to a branch that has a known vulnerability, but the issue is addressed by the latest version. On the other hand, while version aliasing may seem like a good way to automatically avoid vulnerabilities, Google recently discontinued this service, citing caching issues and “lack of compatibility between even minor versions” [11].

### V. Discussion
Our research has shown that even though patches may be available, vulnerable JavaScript libraries are in widespread use on the Web. In the following, we discuss approaches that we believe could improve the situation.

**Dependency Management:**
Before website developers can update potentially vulnerable libraries that they are using, they must be aware of which libraries they are using. Instead of manually copying library files or CDN links into their codebase, developers should consider more systematic approaches to dependency management. Bower [6] and the more server-oriented Node Package Manager [23] allow developers to declare external dependencies in a configuration file and can automatically download and include the code into the project. Tools such as Auditjs [2] (for Node projects) scan dependencies for known vulnerabilities and can be integrated into automated build processes; such solutions, however, work only if the developer has an understanding of the risks associated with using vulnerable libraries and is aware of the audit tool itself. Therefore, this functionality would ideally be integrated into the dependency management system of the programming platform so that a warning can be shown each time a developer includes a known vulnerable component from the central repository.

**Code Maintenance:**
Effective strategies to have web developers update vulnerable libraries work only when vulnerability information is properly tracked and disseminated. Unfortunately, security does not appear to be a priority in the JavaScript library ecosystem. Popular vulnerability databases contain nearly no entries regarding JavaScript libraries. During this entire work,