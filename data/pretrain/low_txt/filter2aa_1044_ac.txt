### Forwarding EAPOL Packets Over the Bridge

To forward EAPOL packets over a bridge, presumably for security reasons, existing tools for performing 802.1x bypasses typically use one of two methods: patching the Linux kernel or using high-level libraries such as Scapy. However, both approaches have their drawbacks. Relying on kernel patches can be cumbersome, and using high-level scripting languages like Python can slow down the bridge under heavy loads. Moreover, none of the publicly available kernel patches are compatible with the latest versions of Linux.

Fortunately, the situation has improved significantly since Duckwall’s script was released. As of 2012, the Linux kernel no longer requires patching to bridge EAPOL packets. Instead, users can enable this feature using the proc filesystem. We updated our implementation of Duckwall’s classical 802.1x bypass to reflect this, ensuring long-lasting reliability regardless of the kernel version in use.

### Bypassing Sticky MAC

Another minor improvement we made was to account for the widespread use of Sticky MAC by modern authenticators. Most 802.1x-capable switches created in recent years support a feature known as Sticky MAC, which dynamically associates the MAC address of the supplicant to the switch port once the supplicant has successfully authenticated. If another MAC address is detected on the switch port, a port security violation occurs, and the port is blocked. To prevent this, our implementation sets the bridge and PHY interfaces to the MAC address of the authenticator and the upstream interface to the MAC address of the supplicant (see Figure 15).

**Figure 15 – Bypassing Sticky MAC**

### Support for Side Channel Interaction

Perhaps the most significant improvement we made to the classical 802.1x bypass was to add support for remote access via a side channel, as described in Section III.4. In Duckwall’s original bypass, all outbound ARP and IP traffic is initially blocked while the transparent bridge is being initialized. Although these restrictions are eventually lifted when the bridge setup is complete, they can still cut off access through the side channel device, causing a loss of access to the rogue device. To maintain access to the device during the initialization, we added a firewall exception that allows outbound traffic from the side channel interface only.

**Figure 16 – The original 802.1x bypass by Duckwall, shown above, blocks all outbound ARP and IP traffic while the bridge is being initialized (script hosted by Mubix on Github.com)**

By default, our implementation allows outbound traffic to port 22 from the side channel interface, but users can also specify an alternative port using a command-line flag.

**Figure 17 – Creating an exception for side channel traffic**
**Figure 18 – Specifying an alternative egress port**

### Conclusion

Our improved classical bypass worked as expected when used against 802.1x-2004, as shown in the screenshot below. The attack can be performed with both Rogue Device A (basic implementation) and with Rogue Device B (mechanical splitters). The addition of mechanical splitters enhances this technique but is not an essential component of the attack itself.

**Figure 19 – Performing a bridge-based 802.1x bypass**

**Reproduction Command:**
```
./silentbridge --create-bridge --upstream UPSTREAM_IFACE_ --phy PHY_IFACE_ --client-mac SUPPLICANT_MAC_ADDRESS --switch-mac SWITCH_MAC_ADDRESS
```

### V. Bait and Switch Attack: An Alternative to Packet Injection

Traditional 802.1x bypass techniques often focus on interacting with a protected wired network without actually authenticating. While this can be achieved using packet injection for 802.1x-2004 or earlier, a simpler approach may be more effective, especially when 802.1x-2010 is used, as MACsec effectively prevents packet injection.

The Bait and Switch attack uses stolen credentials to authenticate directly to a protected wired network without triggering port security, allowing the attacker to interact with the network without relying on packet injection.

#### V.1 Bridge-Based Approach

In the first variation of the Bait and Switch attack, we use the Rogue Device A configuration described in Section III.2. We start by performing the Classical Bridge-based 802.1x bypass described in Section IV, using the rogue device to establish a transparent bridge between the supplicant and authenticator (see Figure 20).

**Figure 20 – Establishing a bridge-based 802.1x bypass in preparation for a Bait and Switch attack**

Next, we disconnect the supplicant from the network by bringing our PHY and bridge interfaces down. We then set the MAC address of our upstream interface to the MAC address of the supplicant and use the upstream interface to authenticate with the authenticator using stolen RADIUS credentials. Finally, we assign a static IP address to the upstream interface that matches the one previously assigned to the client device.

**Figure 21 – Performing a Bait and Switch attack**

In essence, the Bait and Switch attack silently replaces the authorized device with the attacker’s rogue device. The attack is simple, allows full network interaction, and is reasonably stealthy if performed during off-hours when the affected supplicant is unlikely to be in use.

#### V.2 Using Mechanical A/B Splitters

Using the Rogue Device B configuration described in Section III.3, we can perform the Bait and Switch attack on networks protected by 802.1x-2010 and MACsec. When combined with the Rogue Gateway Attack described in Section VI, this technique can bypass 802.1x-2010 in cases where weak EAP implementations are used.

To begin the attack, we introduce our rogue device to the network, ensuring that both A/B splitters are in position A, preserving the direct physical link between the authenticator and supplicant (see Figure 22).

**Figure 22 – Preparing to perform Bait and Switch using Rogue Device B configuration**

We then disconnect the supplicant from the network by bringing our PHY and bridge interfaces down and placing the splitters in position B, rerouting the physical link to the rogue device. Next, we set the MAC address of our upstream interface to the MAC address of the supplicant and use it to authenticate with the authenticator using stolen RADIUS credentials. Finally, we assign a static IP address to the upstream interface that matches the one previously assigned to the supplicant.

**Figure 23 – Performing the Bait and Switch using Rogue Device B configuration**

### VI. Defeating MACsec Using Rogue Gateway Attacks

The 802.1x bypass techniques developed by Riley, “Abb,” Duckwall, and later improved by Legrand, all exploit the same fundamental security issues affecting 802.1x-2004: the standard does not provide encryption or the ability to perform authentication on a packet-by-packet basis.

To address these issues, the IEEE developed 802.1x-2010, which uses MACsec to provide Layer 2 encryption and packet-by-packet integrity checks. MACsec provides hop-by-hop encryption, mitigating bridge-based attacks and providing network administrators with a means to inspect data in transit.

MACsec and 802.1x-2010 operate in three phases: authentication and master key distribution, session key agreement, and session secure. Authentication is typically performed using EAP, although 802.1x-2010 allows for a Pre-Shared Key (PSK) as a fallback or replacement for EAP.

**Figure 24 – Authentication and master key distribution**
**Figure 25 – EAP-Request-Identity frame**
**Figure 26 – Session key agreement and session secure state**

With a few exceptions, the hop-by-hop encryption provided by MACsec prevents attackers from bypassing 802.1x-2010 by bridging two network interfaces together, as is possible with 802.1x-2004. However, it is possible for an attacker to introduce a rogue device to a network protected by 802.1x-2010 using more rudimentary methods.

#### VI.1 Defeating MACsec Using Rogue Gateway Attacks

Significantly, 802.1x-2010 still uses EAP to authenticate new devices to the network. Many EAP implementations suffer from security issues, and the 802.1x-2010 standard allows any EAP method that meets the following requirements:
- Supports mutual authentication between client and server
- Supports derivation of keys at least 128 bits in length
- Generates an MSK of at least 64 octets

Commonly seen weak EAP methods, including EAP-PEAP and EAP-TTLS, meet these requirements. It is up to vendors and system administrators to choose EAP methods that can withstand man-in-the-middle attacks.

The implication is that the security of 802.1x-2010 deployments is only as strong as the EAP methods used. Unless strong forms of EAP, such as EAP-TLS or EAP-PEAP with globally enforced rejection of invalid certificates, are deployed, an attacker can repurpose existing principles for attacking these authentication protocols to bypass port security.

Consider a scenario where EAP-TTLS provides authentication to a network secured using 802.1x-2010. The attacker introduces a Rogue Device B between the supplicant and authenticator (see Figure 27).

**Figure 27 – Introducing a Rogue Device B**

As described in Section III.3, this rogue device configuration uses two mechanically controlled A/B Ethernet splitters. When the splitters are in position A, the supplicant communicates directly with the authenticator. To initiate the attack, the attacker brings the upstream interface down and flips the splitters to position B, providing direct connectivity between the rogue device and the supplicant. The attacker then starts hostapd as a rogue RADIUS server, configuring it to listen on the rogue device’s PHY interface (see Figure 28).

**Figure 28 – Flipping the splitters to position B**

The attacker sends a spoofed EAPOL-Start frame to hostapd, causing it to send an EAP-Request-Identity frame to the supplicant. The supplicant attempts to authenticate with the rogue device. If the supplicant accepts the rogue device’s x.509 certificate, the attacker captures an MS-CHAPv2 challenge and response, which can be cracked to obtain plaintext credentials.

Once the attacker cracks the captured hashes, a Bait and Switch attack connects the rogue device to the network (see Figure 29).

**Figure 29 – Connecting the rogue device to the network**

### VII. Dealing with Improvements to Peripheral Device Security

Improved 802.1x support by peripheral devices, such as multifunction printers, has made it increasingly difficult to bypass wired port security by looking for policy exceptions. While improved adoption of 802.1x is a step in the right direction, it does not necessarily translate to strong port security for peripheral devices. 802.1x authentication relies on EAP, and most forms of EAP have known security issues that have existed for over a decade.

Adoption rates for secure forms of EAP, such as EAP-TLS or EAP-PEAP with forced rejection of untrusted certificates, are relatively poor due to the complexity involved in deploying these technologies at scale. For peripheral devices like printers, the adoption of secure EAP is even worse, as very few cost-effective peripheral devices can be configured using Group Policy.

Thus, while port-security exceptions for peripheral devices may not be as prevalent as they used to be, peripheral devices themselves are still highly viable entry points because they are less likely to be configured using strong forms of EAP. What is missing are techniques for attacking weak forms of EAP within a wired network.

In this section, we introduce two attacks against EAP-MD5 and EAP-PEAP on wired networks, as these are the two forms of weak EAP most commonly used by peripheral devices and some workstations. These attacks allow us to continue to use peripheral devices as entry points to networks protected by 802.1x-2004.

#### VII.1 EAP-MD5 Forced Reauthentication Attack

EAP-MD5 is one of the most widely used forms of EAP for protecting peripheral devices such as multifunction printers and cheap IP phones. Despite its many flaws, it is one of the easiest forms of EAP to set up and configure, making it well-suited for this purpose.

##### VII.1.A Passive Attack Against EAP-MD5

We can use existing attacks against EAP-MD5, as described in Section II.4.A, in conjunction with the classical 802.1x bypass described in Sections II and IV, to attack peripheral devices. By using bridges and MAC spoofing, we can place a rogue device between the supplicant and authenticator, intercepting and manipulating EAP-MD5 traffic to force reauthentication and capture credentials.