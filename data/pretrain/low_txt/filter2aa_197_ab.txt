### In-Depth Evasion Across the Kill-Chain

#### Overview
Each stage of the cyber kill chain presents unique challenges. These challenges must be modeled from a detection potential perspective, and each detection area should be addressed with unique evasion techniques.

#### Evasion In-Depth: Across the Kill-Chain

**Payload Hosting**
- **Serve payloads (HTMLs) off Good-Reputation URLs:**
  - Avoids self-registered domains.
  - Uses well-trusted certificates.
  - Leverages Living Off Trusted Sites (LOTS).
  - Utilizes volatile URLs in Outlook attachments.
  - Hosts files on GitHub anonymous Gists, cloud storage services (e.g., S3, Blobs), virtual machines, webservers, serverless endpoints, and the Inter-Planetary File System (IPFS).

**Delivery - Payloads Hosting**
- **Evasion Techniques:**
  - HTML Smuggling with delay and anti-sandbox capabilities.
  - VBA Purging and VBA Stomping.
  - Office Document Encryption.
  - VBA Execution Guardrails (Domain Name, Username, etc.).
  - Use Template/CustomUI Injection to de-chain the infection process.

**Exploitation**
- **Execution and Evasion:**
  - Execute Office Documents, preferably non-auto-exec documents (CustomUI) or auto-exec with ActiveX entry points.
  - Be cautious of AMSI in VBE7.
  - Use DotNetToJS for effective evasion against Defender and AMSI.
  - Evade ASR rules by blocking office applications from injecting into other processes.
  - Employ Remote Process Injection and Parent PID Spoofing for successful execution.
  - Alternative methods include XSL Loader from VBA, low IOC footprint, in-memory execution, and stealthy techniques.
  - Dechained Execution via WMI, Scheduled Tasks, ShellBrowserWindow COM, COM Hijacking, and DLL Side-Loading.

**Installation**
- **Prefer DLLs over EXEs:**
  - Indirect Execution is more effective.
  - Microsoft Defender For Endpoint EDR has ASR prevalence rules that are less effective against DLLs.
  - Use DLL Side-Loading, DLL Hijacking, COM Hijacking, and XLLs.

- **Obfuscation and Implant Protection:**
  - Use tools like ProtectMyTooling.
  - Roll implants through multiple daisy-chained packers.
  - Watermark implants by deliberately injecting IOCs for tracking and VirusTotal polling.
  - Inject watermarks into DOS Stub, Additional PE Section, Manifest, Version Info, PE Checksum, and Timestamp.

- **EXE Backdooring:**
  - Backdoor legitimate EXEs or sign your EXE with a legitimate Authenticode.
  - Insert shellcode in the middle of .text, change OEP, or hijack branching JMP/CALL.
  - Regenerate the Authenticode signature using tools like ScareCrow.

**Shellcode Loader Strategies**
- **Time-Delayed Execution:**
  - Timeout emulation and make AV timeout, transitioning into behavioral analysis.
  - Run shellcode only when the correct decryption key is acquired.
  - Conceal shellcode in the second-to-last (or N-to-last) PE Section.
  - Use Parent PID Spoofing where applicable.
  - Prefer staying in-process/inline.
  - For Remote-Process Injection, use elongated DripLoader style:
    - Dechain Alloc + Write + Exec steps.
    - Introduce significant delays among them.
    - Split shellcode into chunks and write them in randomized order.
    - Execute in a ROP style for indirect execution.

**Advanced In-Memory Evasions**
- **Patchless AMSI and ETW Evasion:**
  - Use HWBP + DR0..DR3.
  - Anti-Hooking with Direct Syscalls.
  - Self IAT Hooking to redirect unsafe CreateRemoteThread to safe Direct Syscall stubs.
  - Shellcode Fluctuation, Thread Stack Spoofing, Process Heap Encryption, Modules Refreshing, Unlink Malware PE Modules from PEB during Sleep, Indirect Execution, Indirect Handles Acquisition, and various anti-debug, anti-VM, anti-dump, anti-splicing, anti-sandbox, anti-emulation, and anti-forensics techniques.

**Command & Control (C2)**
- **Use Nginx Rev-Proxy and RedWarden:**
  - Cut off suspicious requests and evade JA3.
  - C2 over Serverless Redirectors and Domain Fronting (CDNs).
  - Utilize AWS Lambda, Azure Functions, CloudFlare Workers, DigitalOcean Apps, Azure CDN, StackPath, Fastly, Akamai, Alibaba, etc.
  - Communicate over exotic channels (C3):
    - Steganography-based in PNGs hosted on Image Hosting.
    - Mattermost, Asana, GitHub, JIRA, Discord, Slack, Dropbox, Google Drive, OneDrive, MSSQL, LDAP, Printer Jobs.

**Exfiltration**
- **In-Memory ZIP/Compress Files:**
  - Exfiltrate to cloud services like Azure Storage/Blob, OneDrive, SharePoint, Google Drive.
  - Exfiltrate by copying to a private OneDrive synced folder.
  - Steal Azure/Office Primary Refresh Token (PRT) and OneDrive SSO Access & Refresh Tokens for session hijacking on attacker-controlled machines.

**Phishing - Bullet Points - What Works**
- **Spearphishing via Third-Party Channels:**
  - LinkedIn.
  - URLs are the primary viable vector; forget about attachments.
  - Email Delivery:
    - GoPhish on VM1.
    - SMTP Redirector on VM2.
    - Use Google Suite or any other decent quality email suite as a next-hop forwarder.
    - Frequency: 4-5 emails every few hours.
    - Pay extra attention to embedded URLs and the maturity of chosen domains.
  - Payload Delivery:
    - Landing Page equipped with Anti-Sandbox.
    - HTML Smuggling + delay + “plausible deniability” decoy payload.

**Initial Access - Bullet Points**
- **HTML Smuggling:**
  - Drops ISO, IMG, Macro-enabled Office docs.
  - Effective against extensions-blacklisting.
  - Yummiest Payload Formats: PUB, PPTM, ACCDB, MDE, DOCX + Remote Templates, DOC/XLS (heavily obfuscated/encrypted/purged), CPL (still ignored by CrowdStrike).

**Effective VBA Macros Strategies**
- **File Droppers:**
  - Simplicity at its best.
  - DLL = Indirect + Delayed Execution + No Reputation/Prevalence Evaluation.
  - Drop proxy DLL into %LOCALAPPDATA%\Microsoft\Teams\version.dll & execute DLL Side-Loading.
  - Drop XLL & setup Excel extension.
  - Drop DLL & execute COM Hijacking.
  - DotNetToJScript flavoured for pure in-memory execution.
  - XSL TransformNode for pure in-memory execution, super effective, not signatured, low IOC surface, lesser known.

**C2 - Bullet Points**
- **Egress Through HTTPS:**
  - Highly trafficked servers only.
  - Serverless Redirectors, Domain Fronting via CDN, legitimate services (GitHub, Slack, MS Teams, Asana).
  - Forget DNS, ICMP, IRC.
  - Robust NIPS/NIDS and ML-based signaturing outrule exotic protocols.
  - Offensive Deep Packet Inspection:
    - Closely examine inbound requests.
    - Decide if they originate from your Implants/Infra.
    - If not, kill them on the spot (TCP RESET/Redirect/404).
    - RedWarden-style: Rev-PTR inspection, WHOIS, IP Geo, HTTP Headers, alignment to expected Malleable contract.

### Q & A
Questions? ☺  
Contact: @mariuszbit / PI:EMAIL  
Websites: [mgeeky.tech](https://mgeeky.tech) | [GitHub](https://github.com/mgeeky)  
↓