# Analysis of Security-Sensitive API Usage on Android and iOS

## Introduction
This paper aims to systematically compare the usage of security-sensitive APIs (SS-APIs) between Android and iOS, two of the most popular mobile platforms. The analysis reveals significant differences in how third-party applications access sensitive data and resources, which can have implications for user privacy and security.

## Key Findings
- **iOS vs. Android SS-API Access**: 
  - On iOS, SS-APIs can be accessed more stealthily compared to Android, where applications must list the types of SS-APIs they need during installation.
  - Third-party applications on iOS are granted default privileges to use SS-APIs without explicit user awareness, allowing them to access user data and sensitive resources more freely.

- **Third-Party Libraries**:
  - We confirmed our findings by examining both open-source and closed-source libraries. For example, Flurry, a closed-source library, collects device IDs as mentioned in its official documentation.
  - Removing SS-APIs exclusively caused by third-party libraries, we found that 1,300 Android applications use 3,851 SS-API types, while iOS applications use 6,393 SS-API types, indicating a significant difference in SS-API usage.

- **Microanalysis on Application Code Logic**:
  - **Coding Differences**: Implementation differences between cross-platform applications lead to variations in SS-API usage. For instance, the iOS version of WordPress uses `ACCESS NETWORK INFO` APIs, whereas the Android version does not.
  - **Intentional Avoidance**: Some SS-APIs are intentionally avoided on Android due to the need for explicit permission requests. For example, the Android version of WordPress uses a randomly generated UUID instead of the real device ID to avoid requesting the `READ DEVICE ID` permission.

- **Usage of SS-API Types Unsupported on iOS**:
  - Out of the 51 SS-API types supported only on Android, `WRITE EXTERNAL STORAGE` is the most frequently used, likely due to the nature of Android devices having less internal storage.
  - The remaining 50 SS-API types are used infrequently, suggesting that the 20 SS-API types supported on both platforms are the most commonly used.

## Discussion and Limitations
- **Framework Limitations**:
  - The completeness of iOS SS-APIs is a limitation, as some API calls may be missed.
  - Dead code issues may also affect the accuracy of the analysis, as some SS-APIs in the binaries may not be executed at runtime.

- **Assumptions and Bias**:
  - We assume that cross-platform applications should ask for similar privileges and have similar functionality.
  - The analysis is limited to 2,600 applications and focuses on popular applications, which may introduce bias.

- **Implications**:
  - Users on iOS may face higher risks of privacy leakage compared to Android users.
  - However, the actual occurrence of privacy breaches depends on various factors, including the specific applications installed and their runtime behavior.

## Related Work
- **Android Studies**:
  - Enck et al. [26] and Zhou et al. [28] have examined Android security policies and malicious applications.
  - Felt et al. [24] and Davi et al. [23] have demonstrated privilege escalation attacks on Android.

- **iOS Studies**:
  - Seriot [41] and Egele et al. [16] have studied privacy threats posed by third-party iOS applications.
  - Our work is the first to systematically compare the application security of Android and iOS, revealing interesting behavioral differences.

## Conclusion
Our analysis shows that applications on iOS tend to use more SS-APIs and access sensitive resources more frequently compared to their Android counterparts. This difference is strongly correlated with the lack of an explicit privilege-list mechanism on iOS. These findings suggest that Apple's vetting process may not be as effective as Android's privilege notification mechanism in restricting SS-API usage by third-party applications.

## References
- [16] Egele, M., Brumley, D., Fratantonio, Y., & Kruegel, C. (2013). An Empirical Study of Privacy Vulnerabilities in iOS Applications. In Proceedings of the 22nd USENIX Security Symposium.
- [23] Davi, L., Dmitrienko, A., Sadeghi, A. R., & Winandy, M. (2013). Return-Oriented Programming Without Returns. In Proceedings of the 22nd USENIX Security Symposium.
- [24] Felt, A. P., Chin, E., Hanna, S., Song, D., & Wagner, D. (2011). Permission Re-Delegation: Attacks and Defenses. In Proceedings of the 18th ACM Conference on Computer and Communications Security.
- [26] Enck, W., Octeau, D., McDaniel, P., & Chaudhuri, S. (2014). A Study of Android Application Security. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security.
- [28] Zhou, Y., Jiang, X., & Zhang, H. (2012). Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces. In Proceedings of the 2012 ACM Conference on Computer and Communications Security.
- [38] Enck, W., Gilbert, P., Han, S., Tendulkar, V., Chun, B. G., Cox, L. P., & Jung, J. (2010). TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation.
- [41] Seriot, J. (2010). IPhone Application Security Part 1: A View from the Trenches. Black Hat Briefings.