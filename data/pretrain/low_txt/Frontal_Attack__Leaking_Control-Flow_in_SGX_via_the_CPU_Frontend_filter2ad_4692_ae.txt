### Channel Attacks and Memory Segmentation

Channel attacks have been intensified through an exploitation of legacy memory segmentation [47], a feature managed by the operating system. Although this attack is only effective under specific and uncommon conditions (such as 32-bit enclaves smaller than 1 MiB), it can observe memory accesses at a 1-byte granularity.

### Enhanced Control-Flow Tracing with Frontal Attack

Our attack, the Frontal attack, enhances the resolution of PT-based controlled channel attacks by tracing the control flow of an enclave at the instruction level. Similar to other controlled channel attacks [21, 23], the Frontal attack uses interrupts to monitor instructions and control flow within a page. However, it differs in the types of branches it can exploit. Nemesis [21] can distinguish between branches with measurable timing differences, either due to different kinds of instructions or a different number of instructions. CopyCat [23] tracks control flow in branches with a different number of instructions. The Frontal attack, on the other hand, can differentiate any branch, even if both paths contain identical instructions, making it immune to other controlled channel attacks. The only requirement is that the branch must include at least one memory store. This higher resolution defeats previous defenses that relied on limited page-level observation.

### Microarchitectural Side-Channel Attacks

Microarchitectural attacks exploit information leakage from shared microarchitectural resources across different privilege domains. The most commonly exploited resources are the cache and the branch prediction unit (BPU). We will examine side-channel attacks based on these and other shared microarchitectural components.

#### BPU Attacks

The BPU records recent branch and jump outcomes to aid CPU speculation. As it is shared among different execution contexts on the same core, it can leak information about another context's control flow. Recent BPU attacks, particularly against SGX [14, 19, 20], require either Simultaneous Multithreading (SMT) or fine-grained time multiplexing between the victim and the attacker on the same physical CPU core. These attacks are sophisticated and often require reverse-engineering the BPU, making them difficult to generalize and execute in practice [50]. They are also limited in the types of branches they can exploit, such as not being able to leak the target virtual address of indirect jumps [14]. Several defenses have been proposed, including flushing the BPU during context switches [14, 20] and replacing branches with indirect jumps [22]. While BPU attacks and the Frontal attack both exploit secret-dependent branches, the Frontal attack uses a fundamentally different mechanism, rendering BPU-specific defenses ineffective against it.

#### Attacks on Caches and Other Shared Resources

Caches, being shared across different execution contexts, allow an attacker to infer recent memory accesses made by a victim. Cache attacks often exploit timing variations in access latency to probe the cache state [51], but can also detect state changes using instruction side effects [52, 53]. These attacks target various levels of the cache hierarchy, from core-local data and instruction caches [54, 55, 56, 57, 58, 9, 10, 41, 11] to the last level cache (LLC) shared among all cores [59, 60, 61]. Core-local cache attacks typically require co-location with the victim via SMT or precise time-multiplexing, while LLC attacks can be run concurrently on another core.

The Translation Lookaside Buffer (TLB) stores translation information from virtual to physical addresses and can be exploited to detect recent data memory page accesses [42, 16]. TLB attacks, which require SMT, can leak data accesses at a 4 KiB granularity. CacheBleed [43] was the first to demonstrate intra-cacheline leakage for data accesses, achieving 8B resolution by exploiting cache bank conflicts and write-after-read false dependencies. MemJam [44] improved this to 4B resolution on newer CPUs by exploiting read-after-write false dependencies. PortSmash [45] further enhanced resolution by detecting issued micro-operations in SGX enclaves, leveraging busy execution ports and monitoring their latency.

### Conclusions

In this work, we observed a dependency between instruction execution time and their alignment modulo 16, attributed to the CPU frontend and its fetch and pre-decode module. We leveraged these time dependencies to construct the Frontal attack, which can leak the instruction pointer of an SGX enclave at byte-level granularity. The Frontal attack works against any type of branch containing at least one memory write, even perfectly balanced branches fitting within one cacheline. Our tests on modern CPU microarchitectures supporting SGX (up to 10th gen) showed a success rate of over 99% depending on the victim code. We demonstrated the practicality of our attack by exploiting mbedTLS and the Intel IPP Cryptography library. We discussed relevant defenses, such as aligning all branch targets to the same offset modulo 16, which has minimal size and performance overheads. However, we emphasize that secret-dependent branching should generally be avoided to ensure confidentiality in SGX enclaves.

### Availability

A proof of concept for the attack is available online at: https://github.com/dn0sar/frontal_poc.

### Acknowledgements

We thank Kaveh Razavi for insightful discussions, Kari Kostiainen for feedback on early drafts, and Yuval Yarom and anonymous USENIX reviewers for valuable suggestions.

### References

[1] Cisco Systems, Inc. Cisco Annual Internet Report (2018–2023). https://www.cisco.com/c/en/us/solutions/collateral/executive-perspectives/annual-internet-report/white-paper-c11-741490.pdf. Accessed: May 2020.
[2] V. Costan and S. Devadas. Intel SGX Explained. Cryptology ePrint Archive, Report 2016/086.
[3] S. Pinto and N. Santos. “Demystifying Arm TrustZone: A Comprehensive Survey”. ACM Computing Surveys (2019).
[4] D. Lee, D. Kohlbrenner, S. Shinde, K. Asanović, and D. Song. “Keystone: An Open Framework for Architecting Trusted Execution Environments”. Proceedings of the Fifteenth European Conference on Computer Systems (EuroSys ’20).
[5] J. Noorman, P. Agten, W. Daniels, R. Strackx, A. V. Herrewege, C. Huygens, B. Preneel, I. Verbauwhede, and F. Piessens. “Sancus: Low-cost Trustworthy Extensible Networked Devices with a Zero-software Trusted Computing Base”. 22nd USENIX Security Symposium (USENIX Security ’13).
[6] V. Costan, I. Lebedev, and S. Devadas. “Sanctum: Minimal Hardware Extensions for Strong Software Isolation”. 25th USENIX Security Symposium (USENIX Security ’16).
[7] A. Ferraiuolo, A. Baumann, C. Hawblitzel, and B. Parno. “Komodo: Using Verification to Disentangle Secure-Enclave Hardware from Software”. Proceedings of the 26th Symposium on Operating Systems Principles (SOSP ’17).
[8] Advanced Micro Devices Inc. AMD Secure Encrypted Virtualization (SEV). https://developer.amd.com/sev/. Accessed: January 2020.
[9] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi. “Software Grand Exposure: SGX Cache Attacks Are Practical”. 11th USENIX Workshop on Offensive Technologies (WOOT ’17).
[10] A. Moghimi, G. Irazoqui, and T. Eisenbarth. “CacheZoom: How SGX Amplifies the Power of Cache Attacks”. Cryptographic Hardware and Embedded Systems – CHES 2017.
[11] J. Götzfried, M. Eckert, S. Schinzel, and T. Müller. “Cache Attacks on Intel SGX”. Proceedings of the 10th European Workshop on Systems Security (EuroSec ’17).
[12] Y. Xu, W. Cui, and M. Peinado. “Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems”. 2015 IEEE Symposium on Security and Privacy.
[13] S. P. Johnson. Intel SGX and Side-Channels. https://software.intel.com/content/www/us/en/develop/articles/intel-sgx-and-side-channels.html. Accessed May 2020.
[14] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. “Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing”. 26th USENIX Security Symposium (USENIX Security ’17).
[15] M.-W. Shih, S. Lee, T. Kim, and M. Peinado. “T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs”. Proceedings 2017 Network and Distributed System Security Symposium (NDSS ’17).
[16] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A. Gunter. “Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX”. Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS ’17).
[17] J. Van Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx. “Telling Your Secrets without Page Faults: Stealthy Page Table-Based Attacks on Enclaved Execution”. 26th USENIX Security Symposium (USENIX Security ’17).
[18] Intel Corporation. Protection from Side-Channel Attacks. https://software.intel.com/content/www/us/en/develop/documentation/sgx-developer-guide/top/protection-from-sidechannel-attacks.html. Accessed May 2020.
[19] D. Evtyushkin, R. Riley, N. C. Abu-Ghazaleh, ECE, and D. Ponomarev. “BranchScope: A New Side-Channel Attack on Directional Branch Predictor”. Proceedings of the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS ’18).
[20] T. Huo, X. Meng, W. Wang, C. Hao, P. Zhao, J. Zhai, and M. Li. “Bluethunder: A 2-level Directional Predictor Based Side-Channel Attack against SGX”. IACR Transactions on Cryptographic Hardware and Embedded Systems (2019).
[21] J. Van Bulck, F. Piessens, and R. Strackx. “Nemesis: Studying Microarchitectural Timing Leaks in Rudimentary CPU Interrupt Logic”. Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS ’18).
[22] S. Hosseinzadeh, H. Liljestrand, V. Leppänen, and A. Paverd. “Mitigating Branch-Shadowing Attacks on Intel SGX Using Control Flow Randomization”. Proceedings of the 3rd Workshop on System Software for Trusted Execution (SysTEX ’18).
[23] D. Moghimi, J. Van Bulck, N. Heninger, F. Piessens, and B. Sunar. “CopyCat: Controlled Instruction-Level Attacks on Enclaves”. 29th USENIX Security Symposium (USENIX Security ’20).
[24] A. Limited. mbedTLS (formerly known as PolarSSL). https://tls.mbed.org/. Accessed March 2020.
[25] Intel Corporation. Cryptography for Intel Integrated Performance Primitives Developer Reference. https://software.intel.com/content/www/us/en/develop/documentation/ipp-crypto-reference/top.html. Accessed October 2020.
[26] B. Coppens, I. Verbauwhede, K. D. Bosschere, and B. D. Sutter. “Practical Mitigations for Timing-Based Side-Channel Attacks on Modern x86 Processors”. 2009 30th IEEE Symposium on Security and Privacy.
[27] Intel Corporation. Guidelines for Mitigating Timing Side Channels Against Cryptographic Implementations. https://software.intel.com/security-software-guidance/insights/guidelines-mitigating-timing-side-channels-against-cryptographic-implementations. Accessed March 2020.
[28] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom. “Spectre Attacks: Exploiting Speculative Execution”. 2019 IEEE Symposium on Security and Privacy.
[29] J. Van Bulck, F. Piessens, and R. Strackx. “SGX-Step: A Practical Attack Framework for Precise Enclave Execution Control”. Proceedings of the 2nd Workshop on System Software for Trusted Execution (SysTEX’17).
[30] Intel Corporation. Intel 64 and IA-32 Architectures Software Developer Manuals.