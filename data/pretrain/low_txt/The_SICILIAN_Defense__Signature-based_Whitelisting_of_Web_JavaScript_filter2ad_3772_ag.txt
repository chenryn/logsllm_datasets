### Observations on API and Script Changes

Initially, we suspected a complete API update due to the drastic changes observed. However, subsequent visits revealed that the changes converged into a finite set of script versions. For example, a script hosted at the following URL: `http://v6.top.rbk.ru/rbc_static/version-1.2.1/scripts/build/~_layout-main-live-tv.js` exhibits this behavior. In total, we identified 68 scripts with similar characteristics.

### Related Work

#### Structural Integrity on the Web

Several solutions have proposed different notions of structural integrity on the web. In Document Structure Integrity (DSI) [39] and Blueprint’s [34] concept of structural integrity, there is a clear distinction between trusted and untrusted nodes in the DOM's abstract syntax tree. These solutions aim to confine untrusted nodes to prevent code injection, either by using special DOM construction techniques (as implemented in Blueprint) or through taint-tracking (in DSI). In contrast, our approach ensures that every node in the script's AST is trusted, thus eliminating the need for techniques to confine untrusted nodes.

#### JavaScript Whitelisting

Whitelisting is a promising method for preventing malicious script injection into websites. Jim et al. introduced the idea of whitelisting scripts by embedding a policy in web pages that specifies which scripts are allowed to run, as seen in BEEP [29]. Braun et al. proposed a validation scheme that extends several HTML elements with an integrity attribute containing a cryptographic hash of the expected resource. This scheme, known as Subresource Integrity (SRI), is detailed in their latest W3C recommendation [53]. These works primarily use raw signature schemes, which validate the integrity of a resource based on cryptographic hash computations of the resource's source code. In SICILIAN, we introduce a new signature scheme that is robust against script changes, a common occurrence in real-world websites. On the other hand, web primitives like Content Security Policy (CSP) [52] perform domain whitelisting, specifying the origin of resources but not providing specific restrictions on their integrity. The policy effort for CSP appears to be higher than for SICILIAN [16].

#### Script Injection Prevention

Various approaches have been proposed to prevent script injection, including a range of XSS defenses. The primary focus has been on sanitizing untrusted input [5, 25, 44, 56]. However, sanitization alone does not fully protect web applications from script injection attacks, especially in the presence of client-side attack variants such as DOM-based XSS or second-order vulnerabilities [11]. Other XSS defenses include privilege separation [4, 8, 10, 15, 39], DOM isolation [3, 13, 21], and taint tracking [22, 31, 43, 49, 50]. Most of these solutions assume the content integrity of site scripts, which may not always hold true, particularly in the case of attacks on third-party libraries or CDNs [32]. SICILIAN is not designed solely for preventing XSS attacks; rather, it is a channel-agnostic mechanism that checks any injected scripts, regardless of their origin.

#### JavaScript Measurement Study

To the best of our knowledge, there has been no study on how scripts change in popular websites that matches the breadth and depth of our work. We are aware of the archive.org project [26], which records content changes over time, including JavaScript. However, it does not comprehensively cover all web content in Alexa's top websites, and we are not aware of any studies on JavaScript changes that utilize such data. Nikiforakis et al. studied the evolution of JavaScript inclusions over time and identified trust relationships between sites and their library providers [40]. This study highlights vulnerabilities related to unsafe third-party inclusion practices, although it does not specifically address the changes or propose defenses.

### Conclusion

In this paper, we conducted a longitudinal study on script changes to evaluate the efficacy of signature-based JavaScript whitelisting for preventing script injection attacks. We then proposed a system called SICILIAN, which:
1. Employs a multi-layered whitelisting approach using a novel signature scheme, the structural signature, that is robust against mostly static scripts.
2. Includes an incremental deployment model called progressive lockdown to ensure practicality in real-world settings.

Our large-scale evaluation shows that SICILIAN can whitelist scripts with reasonable performance.

### Acknowledgments

We thank the anonymous reviewers of this paper for their helpful feedback, and our shepherd, Deepak Garg, for his insightful comments and suggestions for preparing the final version of the paper. We also thank Zhenkai Liang, Xinshu Dong, and Yaoqi Jia for their constructive feedback. This research is supported in part by the National Research Foundation, Prime Minister’s Office, Singapore under its National Cybersecurity R&D Program (Award No. NRF2014NCR-NCR001-21) and administered by the National Cybersecurity R&D Directorate. This work is also supported in part by a university research grant from Intel.

### References

[1] E. Abgrall, Y. L. Traon, M. Monperrus, S. Gombault, M. Heiderich, and A. Ribault. XSS-FP: Browser fingerprinting using HTML parser quirks. arXiv preprint arXiv:1211.4812, 2012.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song. Towards a formal foundation of web security. In Computer Security Foundations Symposium (CSF), 2010 23rd IEEE, pages 290–304. IEEE, 2010.
[3] D. Akhawe, F. Li, W. He, P. Saxena, and D. Song. Data-confined HTML5 applications. In Computer Security–ESORICS 2013, pages 736–754. Springer, 2013.
[4] D. Akhawe, P. Saxena, and D. Song. Privilege separation in HTML5 applications. In Proceedings of the 21st USENIX conference on Security symposium, pages 23–23. USENIX Association, 2012.
[5] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. SANER: Composing static and dynamic analysis to validate sanitization in web applications. In Security and Privacy, 2008. SP 2008. IEEE Symposium on, pages 387–401. IEEE, 2008.
[6] D. Bates, A. Barth, and C. Jackson. Regular expressions considered harmful in client-side XSS filters. In Proceedings of the 19th international conference on World wide web, pages 91–100. ACM, 2010.
[7] F. Braun, D. Akhawe, J. Weinberger, and M. West. Subresource Integrity. https://rawgithub.com/w3c/webappsec/master/specs/subresourceintegrity/index.html.
[8] E. Budianto, Y. Jia, X. Dong, P. Saxena, and Z. Liang. You can’t be me: Enabling trusted paths and user sub-origins in web browsers. In Research in Attacks, Intrusions and Defenses, pages 150–171. Springer, 2014.
[9] Y. Cao, Z. Li, V. Rastogi, Y. Chen, and X. Wen. Virtual browser: a virtualized browser to sandbox third-party JavaScripts with enhanced security. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, pages 8–9. ACM, 2012.
[10] Y. Cao, V. Yegneswaran, P. Porras, and Y. Chen. PathCutter: Severing the self-propagation path of XSS JavaScript worms in social web networks. In Proceedings of the 19th NDSS Symposium, 2012.
[11] J. Dahse and T. Holz. Static detection of second-order vulnerabilities in web applications. In USENIX Security Symposium, 2014.
[12] J. L. Donaldson, A.-M. Lancaster, and P. H. Sposato. A plagiarism detection system. In ACM SIGCSE Bulletin, volume 13.
[13] X. Dong, Z. Chen, H. Siadati, S. Tople, P. Saxena, and Z. Liang. Protecting sensitive web content from client-side vulnerabilities with cryptons. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1311–1324. ACM, 2013.
[14] X. Dong, K. Patil, J. Mao, and Z. Liang. A comprehensive client-side behavior model for diagnosing attacks in AJAX applications. In Engineering of Complex Computer Systems (ICECCS), 2013 18th International Conference on, pages 177–187. IEEE, 2013.
[15] A. Doupé, W. Cui, M. H. Jakubowski, M. Peinado, C. Kruegel, and G. Vigna. DeDacota: Toward preventing server-side XSS via automatic code and data separation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1205–1216. ACM, 2013.
[16] M. Fazzini, P. Saxena, and A. Orso. AutoCSP: Automatically retrofitting CSP to web applications. In the Proceedings of the 37th International Conference on Software Engineering (ICSE), 2015.
[17] C. Fournet and A. D. Gordon. Stack inspection: Theory and variants. In ACM SIGPLAN Notices, volume 37, pages 307–318. ACM, 2002.
[18] Google. Content Security Policy (CSP). https://goo.gl/Y7u2ee.
[19] A. Guha, S. Krishnamurthi, and T. Jim. Using static analysis for AJAX intrusion detection. In Proceedings of the 18th international conference on World wide web, pages 561–570. ACM, 2009.
[20] M. V. Gundy and H. Chen. NonceSpaces: Using randomization to enforce information flow tracking and thwart cross-site scripting attacks. In Proceedings of the 16th Network and Distributed System Security Symposium Symposium, 2009.
[21] W. He, D. Akhawe, S. Jain, E. Shi, and D. Song. ShadowCrypt: Encrypted web applications for everyone. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 1028–1039. ACM, 2014.
[22] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. JSFlow: Tracking information flow in JavaScript and its APIs. In Proceedings of the 29th Annual ACM Symposium on Applied Computing, pages 1663–1671. ACM, 2014.
[23] M. Heiderich, J. Schwenk, T. Frosch, J. Magazinius, and E. Z. Yang. MXSS attacks: Attacking well-secured web-applications by using innerHTML mutations. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 777–788. ACM, 2013.
[24] A. Hidayat. http://esprima.org.
[25] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. Fast and precise sanitizer analysis with BEK. In Proceedings of the 20th USENIX conference on Security. USENIX Association, 2011.
[26] Internet Archive. https://archive.org/index.php.
[27] C. Jackson and A. Barth. ForceHTTPS: Protecting high-security web sites from network attacks. In Proceedings of the 17th international conference on World Wide Web, pages 525–534. ACM, 2008.
[28] Jeremiah Grossman and Matt Johansen. https://goo.gl/kwgWPm.
[29] T. Jim, N. Swamy, and M. Hicks. Defeating script injection attacks with browser-enforced embedded policies. In Proceedings of the 16th international conference on World Wide Web, pages 601–610. ACM, 2007.
[30] jQuery. Update on jquery.com compromises. http://goo.gl/uFcPKM/.
[31] S. Lekies, B. Stock, and M. Johns. 25 million flows later: Large-scale detection of DOM-based XSS. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1193–1204. ACM, 2013.
[32] A. Levy, H. Corrigan-Gibbs, and D. Boneh. Stickler: Defending against malicious CDNs in an unmodified browser. 2015.
[33] R. Lipton. Fingerprinting sets. http://goo.gl/tx7pWq.
[34] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In Security and Privacy, 2009 30th IEEE Symposium on, pages 331–346. IEEE, 2009.
[35] R. C. Merkle. A certified digital signature. In CRYPTO, 1989.
[36] Mozilla. https://developer.mozilla.org/en-US/docs/Web/XPath.
[37] Mozilla. HTTP Strict Transport Security. https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security/.
[38] Mozilla. Signing a XPI. https://goo.gl/Ffls5r.
[39] Y. Nadji, P. Saxena, and D. Song. Document structure integrity: A robust basis for cross-site scripting defense. In Proceedings of the 16th Network and Distributed System Security Symposium, 2009.
[40] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You are what you include: Large-scale evaluation of remote JavaScript inclusions. In Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012.
[42] P. Rogaway and T. Shrimpton. Cryptographic hash-function basics: Definitions, implications, and separations for preimage resistance, second-preimage resistance, and collision resistance. In Fast Software Encryption, pages 371–388. Springer, 2004.
[43] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX: Systematic discovery of client-side validation vulnerabilities in rich web applications. In Proceedings of the 17th Network and Distributed System Security Symposium, 2010.
[44] P. Saxena, D. Molnar, and B. Livshits. ScriptGard: Automatic context-sensitive sanitization for large-scale legacy web applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security, 2011.
[45] Security Affairs. Afghanistan CDN network compromised by Chinese hackers. http://goo.gl/Kh8zqN.
[46] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee. On the incoherencies in web browser access control policies. In Security and Privacy (SP), 2010 IEEE Symposium on, pages 463–478. IEEE, 2010.
[47] Softpedia. Exploit kit dropped through Akamai content delivery network. http://goo.gl/1UgGgT.
[48] S. Son and V. Shmatikov. The postman always rings twice: Attacking and defending postMessage in HTML5 websites. In Proceedings of the 20th Network and Distributed System Security Symposium, 2013.
[49] B. Stock, S. Lekies, T. Mueller, P. Spiegel, and M. Johns. Precise client-side protection against DOM-based cross-site scripting. In Proceedings of the 23rd USENIX security symposium.
[50] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-site scripting prevention with dynamic data tainting and static analysis. In Proceedings of the 14th Network and Distributed System Security Symposium, 2007.
[51] W3C. All standards and drafts. http://www.w3.org/TR/.
[52] W3C. Content Security Policy 2.0. http://www.w3.org/TR/CSP2/.
[53] W3C. Subresource Integrity. http://www.w3.org/TR/SRI/.
[54] D. Wagner and P. Soto. Mimicry attacks on host-based intrusion detection systems. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pages 255–264. ACM, 2002.
[55] J. Wang, Y. Takata, and H. Seki. HBAC: A model for history-based access control and its model checking. In Computer Security–ESORICS 2006, pages 263–278. Springer, 2006.
[56] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter, R. Shin, and D. Song. A systematic analysis of XSS sanitization in web application frameworks. In ESORICS, 2011.
[57] M. Weissbacher, T. Lauinger, and W. Robertson. Why is CSP failing? Trends and challenges in CSP adoption. In Proceedings of the 17th Research in Attacks, Intrusions and Defenses, 2014.
[58] D. Wendlandt, D. G. Andersen, and A. Perrig. Perspectives: Improving SSH-style host authentication with multi-path probing. In USENIX Annual Technical Conference, pages 321–334, 2008.
[59] Z. Yan and S. Holtmanns. Trust modeling and management: From social trust to digital trust. IGI Global, 2008.