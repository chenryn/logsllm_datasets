### Optimized Text

Our analysis revealed that more than half of the examined containers utilized 145 or more system calls, thereby mitigating 51 previously disclosed kernel vulnerabilities. As part of our future work, we plan to address the limitations of our current prototype and explore the generation of more fine-grained system call policies.

#### Acknowledgments
This research was supported by the Office of Naval Research (ONR) through award N00014-17-1-2891, the National Science Foundation (NSF) through award CNS-1749895, and the Defense Advanced Research Projects Agency (DARPA) through award D18AP00045, with additional support from Accenture. The opinions, findings, and conclusions or recommendations expressed in this document are those of the authors and do not necessarily reflect the views of the ONR, NSF, DARPA, or Accenture.

#### References
[1] Capabilities(7) - Linux Programmer’s Manual. http://man7.org/linux/man-pages/man7/capabilities.7.html.
[2] Cassandra - Docker Hub. https://hub.docker.com/_/cassandra/.
[3] Cgroups(7) - Linux Programmer’s Manual. http://man7.org/linux/man-pages/man7/cgroups.7.html.
[4] Chronograf - Docker Hub. https://hub.docker.com/_/chronograf.
[5] Common Vulnerabilities and Exposures Database. https://www.cvedetails.com.
[6] CVE-2017-5123. https://www.cvedetails.com/cve/CVE-2017-5123/.
[7] Docker Hub. https://hub.docker.com.
[8] DockerSlim. https://dockersl.im.
[9] Elasticsearch - Docker Hub. https://hub.docker.com/_/elasticsearch.
[10] Elgg. https://elgg.org/.
[11] GNU Compiler Collection. https://gcc.gnu.org.
[12] Influxdb - Docker Hub. https://hub.docker.com/_/influxdb.
[13] Kubernetes - Production-Grade Container Orchestration. https://kubernetes.io.
[14] The LLVM Compiler Infrastructure. http://llvm.org.
[15] Mongo-perf. https://github.com/mongodb/mongo-perf.
[16] MongoDB - Docker Hub. https://hub.docker.com/_/mongo/.
[17] Musl Libc. https://www.musl-libc.org.
[18] Namespaces(7) - Linux Programmer’s Manual. http://man7.org/linux/man-pages/man7/namespaces.7.html.
[19] Package Callgraph - GoDoc. https://godoc.org/golang.org/x/tools/go/callgraph.
[20] Pgbench. https://www.postgresql.org/docs/10/pgbench.html.
[21] Python AST. https://docs.python.org/3/library/ast.html.
[22] Redis-benchmark. https://redis.io/topics/benchmarks.
[23] Seccomp BPF (SECure Computing with filters). https://www.kernel.org/doc/html/v4.16/user-space-api/seccomp_filter.html.
[24] Selenium. https://selenium.dev/.
[25] Sematext Agent Monitoring and Logging - Docker Hub. https://hub.docker.com/_/sematext-agent-monitoring-and-logging.
[26] Sysdig. https://github.com/draios/sysdig.
[27] Ioannis Agadakos, Di Jin, David Williams-King, Vasileios P. Kemerlis, and Georgios Portokalidis. Nibbler: Debloating Binary Shared Libraries. In Proceedings of the 35th Annual Computer Security Applications Conference (ACSAC), pages 70–83, 2019.
[28] Babak Amin Azad, Pierre Laperdrix, and Nick Nikiforakis. Less is More: Quantifying the Security Benefits of Debloating Web Applications. In Proceedings of the 28th USENIX Security Symposium, 2019.
[29] Lars Ole Andersen. Program Analysis and Specialization for the C Programming Language. PhD thesis, University of Copenhagen, 1994.
[30] Brandon Butler. Which is Cheaper: Containers or Virtual Machines? https://www.networkworld.com/article/3126069/which-is-cheaper-containers-or-virtual-machines.html, September 2016.
[31] Theo Combe, Antony Martin, and Roberto Di Pietro. To Docker or Not to Docker: A Security Perspective. IEEE Cloud Computing, 3(5):54–62, 2016.
[32] Nicholas DeMarinis, Kent Williams-King, Di Jin, Rodrigo Fonseca, and Vasileios P. Kemerlis. Sysfilter: Automated System Call Filtering for Commodity Software. In Proceedings of the International Conference on Research in Attacks, Intrusions, and Defenses (RAID), 2020.
[33] Henry Hanping Feng, Jonathon T. Giffin, Yong Huang, Somesh Jha, Wenke Lee, and Barton P. Miller. Formalizing Sensitivity in Static Analysis for Intrusion Detection. In Proceedings of the IEEE Symposium on Security & Privacy (S&P), pages 194–208, 2004.
[34] Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, and Thomas A. Longstaff. A Sense of Self for Unix Processes. In Proceedings of the IEEE Symposium on Security & Privacy (S&P), pages 120–128, 1996.
[35] Tal Garfinkel, Ben Pfaff, and Mendel Rosenblum. Ostia: A Delegating Architecture for Secure System Call Interposition. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2004.
[36] Masoud Ghaffarinia and Kevin W. Hamlen. Binary Control-Flow Trimming. In Proceedings of the 26th ACM Conference on Computer and Communications Security (CCS), 2019.
[37] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and Michalis Polychronakis. Temporal System Call Specialization for Attack Surface Reduction. In Proceedings of the 29th USENIX Security Symposium, 2020.
[38] Andreas Gustafsson. Egypt. https://www.gson.org/egypt/egypt.html.
[39] Ashish Gehani, Hashim Sharif, Muhammad Abubakar, and Fareed Zaffar. Trimmer: Application Specialization for Code Debloating. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE), 2018.
[40] Haifeng He, Saumya K. Debray, and Gregory R. Andrews. The Revenge of the Overlay: Automatic Compaction of OS Kernel Code via On-Demand Code Loading. In Proceedings of the 7th ACM & IEEE International Conference on Embedded Software, pages 75–83, 2007.
[41] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. Effective Program Debloating via Reinforcement Learning. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS), 2018.
[42] Michael Hind. Pointer Analysis: Haven’t We Solved This Problem Yet? In Proceedings of the ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE), pages 54–61, 2001.
[43] Kapil Jain and R. Sekar. User-Level Infrastructure for System Call Interposition: A Platform for Intrusion Detection and Confinement. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2000.
[44] Yufei Jiang, Can Zhang, Dinghao Wu, and Peng Liu. Feature-Based Software Customization: Preliminary Analysis, Formalization, and Methods. In Proceedings of the 17th IEEE International Symposium on High Assurance Systems Engineering (HASE), 2016.
[45] Vasileios P. Kemerlis. Protecting Commodity Operating Systems through Strong Kernel Isolation. PhD thesis, Columbia University, 2015.
[46] Vasileios P. Kemerlis, Michalis Polychronakis, and Angelos D. Keromytis. ret2dir: Rethinking Kernel Isolation. In Proceedings of the 23rd USENIX Security Symposium, pages 957–972, 2014.
[47] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis. Configuration-Driven Software Debloating. In Proceedings of the 12th European Workshop on Systems Security, 2019.
[48] Alexey Kopytov. Sysbench. https://github.com/akopytov/sysbench.
[49] Christopher Kruegel, Engin Kirda, Darren Mutz, William Robertson, and Giovanni Vigna. Automating Mimicry Attacks Using Static Binary Analysis. In Proceedings of the USENIX Security Symposium, 2005.
[50] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bernhard Heinloth, Valentin Rothberg, Andreas Ruprecht, Wolfgang Schroder-Preikschat, Daniel Lohmann, and Rudiger Kapitza. Attack Surface Metrics and Automated Compile-Time OS Kernel Tailoring. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2013.
[51] Chi-Tai Lee, Jim-Min Lin, Zeng-Wei Hong, and Wei-Tsong Lee. An Application-Oriented Linux Kernel Customization for Embedded Systems. J. Inf. Sci. Eng., 20(6):1093–1107, 2004.
[52] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Shenefiel, Rui Ma, Yuewu Wang, and Qi Li. SPEAKER: Split-Phase Execution of Application Containers. In Proceedings of the 12th Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), pages 230–251, 2017.
[53] Yiwen Li, Brendan Dolan-Gavitt, Sam Weber, and Justin Cappos. Lock-in-pop: Securing Privileged Operating System Kernels by Keeping on the Beaten Path. In Proceedings of the USENIX Annual Technical Conference (ATC), 2017.
[54] Xin Lin, Lingguang Lei, Yuewu Wang, Jiwu Jing, Kun Sun, and Quan Zhou. A Measurement Study on Linux Container Security: Attacks and Countermeasures. In Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC), pages 418–429, 2018.
[55] Steven McCanne and Van Jacobson. The BSD Packet Filter: A New Architecture for User-Level Packet Capture. In Proceedings of the USENIX Winter Conference, 1993.
[56] Shachee Mishra and Michalis Polychronakis. Shredder: Breaking Exploits through API Specialization. In Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC), 2018.
[57] Shachee Mishra and Michalis Polychronakis. Safire: Context-Sensitive Function Specialization Against Code Reuse Attacks. In Proceedings of the 5th IEEE European Symposium on Security and Privacy (EuroS&P), 2020.
[58] Collin Mulliner and Matthias Neugschwandtner. Breaking Payloads with Runtime Code Stripping and Image Freezing, 2015. Black Hat USA.
[59] Karen Scarfone, Murugiah Souppaya, and John Morello. Application Container Security Guide, 2017. https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-190.pdf.
[60] Tapti Palit, Yongming Shen, and Michael Ferdman. Demystifying Cloud Benchmarking. In Proceedings of the International Symposium on Performance Analysis of Systems and Software (ISPASS), pages 122–132, 2016.
[61] Chetan Parampalli, R. Sekar, and Rob Johnson. A Practical Mimicry Attack against Powerful System-Call Monitors. In Proceedings of the ACM Symposium on Information, Computer and Communications Security (ASIACCS), pages 156–167, 2008.
[62] Nikita Popov. PHP Abstract Syntax Tree. https://github.com/nikic/php-ast.
[63] Chris Porter, Girish Mururu, Prithayan Barua, and Santosh Pande. Blankit Library Debloating: Getting What You Want Instead of Cutting What You Don’t. In Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 164–180, 2020.
[64] Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo Kim, and Wenke Lee. RAZOR: A Framework for Post-Deployment Software Debloating. In Proceedings of the 28th USENIX Security Symposium, 2019.
[65] Anh Quach and Aravind Prakash. Bloat Factors and Binary Specialization. In Proceedings of the 3rd ACM Workshop on Forming an Ecosystem Around Software Transformation (FEAST), pages 31–38, 2019.
[66] Anh Quach, Aravind Prakash, and Lok Yan. Debloating Software through Piece-Wise Compilation and Loading. In Proceedings of the 27th USENIX Security Symposium, pages 869–886, 2018.
[67] Mohan Rajagopalan, Matti Hiltunen, Trevor Jim, and Richard Schlichting. Authenticated System Calls. In Proceedings of the International Conference on Dependable Systems and Networks (DSN), pages 358–367, 2005.
[68] Vaibhav Rastogi, Drew Davidson, Lorenzo De Carli, Somesh Jha, and Patrick D. McDaniel. Cimplifier: Automatically Debloating Containers. In Proceedings of the 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE), 2017.
[69] Vaibhav Rastogi, Chaitra Niddodi, Sibin Mohan, and Somesh Jha. New Directions for Container Debloating. In Proceedings of the 2nd Workshop on Forming an Ecosystem Around Software Transformation (FEAST), pages 51–56, 2017.
[70] Daniel Shapira. Escaping Docker Container Using waitid() – CVE-2017-5123, 2017. https://www.twistlock.com/labs-blog/escaping-docker-container-using-waitid-cve-2017-5123/.
[71] Rui Shu, Xiaohui Gu, and William Enck. A Study of Security Vulnerabilities on Docker Hub. In Proceedings of the 7th ACM Conference on Data and Application Security and Privacy (CODASPY), pages 269–280, 2017.
[72] Linhai Song and Xinyu Xing. Fine-Grained Library Customization. In Proceedings of the 1st ECOOP International Workshop on Software Debloating and Delayering (SALAD), 2018.
[73] Kanchi Gopinath, Suparna Bhattacharya, and Mangala Gowri Nanda. Combining Concern Input with Program Analysis for Bloat Detection. In Proceedings of the ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA), 2013.
[74] David Wagner and Drew Dean. Intrusion Detection via Static Analysis. In Proceedings of the IEEE Symposium on Security & Privacy, pages 156–168, 2001.
[75] Zhiyuan Wan, David Lo, Xin Xia, Liang Cai, and Shanping Li. Mining Sandboxes for Linux Containers. In Proceedings of the 10th IEEE International Conference on Software Testing, Verification and Validation (ICST), pages 92–102, 2017.
[76] David Williams-King, Hidenori Kobayashi, Kent Williams-King, Graham Patterson, Frank Spano, Yu Jian Wu, Junfeng Yang, and Vasileios P. Kemerlis. Egalito: Layout-Agnostic Binary Recompilation. In Proceedings of the 25th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), pages 133–147, 2020.
[77] Dinghao Wu, Yufei Jiang, and Peng Liu. JRED: Program Customization and Bloatware Mitigation Based on Static Analysis. In Proceedings of the 40th Annual Computer Software and Applications Conference (ACSAC), 2016.
[78] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M. Azab, and Ruowen Wang. PeX: A Permission Check Analysis Framework for Linux Kernel. In Proceedings of the 28th USENIX Security Symposium, pages 1205–1220, 2019.
[79] Zhi Zhang, Yueqiang Cheng, Surya Nepal, Dongxi Liu, Qingni Shen, and Fethi Rabhi. KASR: A Reliable and Practical Approach to Attack Surface Reduction of Commodity OS Kernels. In Proceedings of the International Conference on Research in Attacks, Intrusions, and Defenses (RAID), pages 691–710, 2018.
[80] Xiangyu Zhang, Zhongshu Gu, Brendan Saltaformaggio, and Dongyan Xu. Face-Change: Application-Driven Dynamic Kernel View Switching in a Virtual Machine. In Proceedings of the 44th IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2014.