以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

1. ARM LTD. TrustZone Security Whitepaper. [在线文档] <http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.prd29-genc-009492c/index.html>

2. AZAB, A. M., NING, P., SHAH, J., CHEN, Q., BHUTKAR, R., GANESH, G., MA, J., AND SHEN, W. Hypervision Across Worlds: Real-time Kernel Protection from the ARM TrustZone Secure World. *Proceedings of the 21st ACM SIGSAC Conference on Computer and Communications Security (CCS’14)*, 2014.

3. BRASSER, F., KIM, D., LIEBCHEN, C., GANAPATHY, V., IFTODE, L., AND SADEGHI, A.-R. Regulating ARM TrustZone Devices in Restricted Spaces. *Proceedings of the 14th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys’16)*, 2016.

4. BURGUERA, I., ZURUTUZA, U., AND NADJM-TEHRANI, S. Crowdroid: Behavior-based Malware Detection System for Android. *Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM’11)*, 2011.

5. CHAINFIRE. CF-Bench. [在线应用] <https://play.google.com/store/apps/details?id=eu.chainfire.cfbench>

6. DALL, C., AND NIEH, J. KVM/ARM: The Design and Implementation of the Linux ARM Hypervisor. *Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’14)*, 2014.

7. DASH, S. K., SUAREZ-TANGIL, G., KHAN, S., TAM, K., AHMADI, M., KINDER, J., AND CAVALLARO, L. DroidScribe: Classifying Android Malware Based on Runtime Behavior. *Mobile Security Technologies (MoST’16)*, 2016.

8. DENG, Z., ZHANG, X., AND XU, D. Spider: Stealthy Binary Program Instrumentation and Debugging via Hardware Virtualization. *Proceedings of the 29th Annual Computer Security Applications Conference (ACSAC’13)*, 2013.

9. DINABURG, A., ROYAL, P., SHARIF, M., AND LEE, W. Ether: Malware Analysis via Hardware Virtualization Extensions. *Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS’08)*, 2008.

10. EC SPRIDE SECURE SOFTWARE ENGINEERING GROUP. DroidBench. [GitHub仓库] <https://github.com/secure-software-engineering/DroidBench>

11. ENCK, WILLIAM, GILBERT, PETER, COX, LANDON P, JUNG, JAEYEON, MCDANIEL, PATRICK, AND SHETH, ANMOL N. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. *Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI10)*, 2010.

12. FUTUREMARK. Best Smartphones. [在线资源] <http://www.futuremark.com/hardware/mobile>

13. GOOGLE INC. Dalvik Bytecode. [在线文档] <https://source.android.com/devices/tech/dalvik/dalvik-bytecode.html>

14. GUAN, L., LIU, P., XING, X., GE, X., ZHANG, S., YU, M., AND JAEGER, T. TrustShadow: Secure Execution of Unmodified Applications with ARM TrustZone. *Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys’17)*, 2017.

15. HWANG, C.-C. ptm2human. [GitHub仓库] <https://github.com/hwangcc23/ptm2human>

16. JAIN, B., BAIG, M. B., ZHANG, D., PORTER, D. E., AND SION, R. Sok: Introspections on Trust and the Semantic Gap. *Proceedings of 35th IEEE Symposium on Security and Privacy (S&P’14)*, 2014.

17. JANG, J. S., KONG, S., KIM, M., KIM, D., AND KANG, B. B. SeCReT: Secure Channel between Rich Execution Environment and Trusted Execution Environment. *Proceedings of 22nd Network and Distributed System Security Symposium (NDSS’15)*, 2015.

18. JING, Y., ZHAO, Z., AHN, G.-J., AND HU, H. Morpheus: Automatically Generating Heuristics to Detect Android Emulators. *Proceedings of the 30th Annual Computer Security Applications Conference (ACSAC’14)*, 2014.

19. KIRAT, DHILUNG AND VIGNA, GIOVANNI. MalGene: Automatic Extraction of Malware Analysis Evasion Signature. *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS’15)*, 2015.

20. KIRAT, DHILUNG, VIGNA, GIOVANNI, AND KRUEGEL, CHRISTOPHER. Barecloud: Bare-metal Analysis-based Evasive Malware Detection. *Proceedings of the 23rd USENIX Security Symposium (USENIX Security’14)*, 2014.

21. LENGYEL, T. K., MARESCA, S., PAYNE, B. D., WEBSTER, G. D., VOGL, S., AND KIAYIAS, A. Scalability, Fidelity, and Stealth in the Drakvuf Dynamic Malware Analysis System. *Proceedings of the 30th Annual Computer Security Applications Conference (ACSAC’14)*, 2014.

22. LITTY, L., LAGAR-CAVILLA, H. A., AND LIE, D. Hypervisor Support for Identifying Covertly Executing Binaries. *Proceedings of the 17th USENIX Security Symposium (USENIX Security’08)*, 2008.

23. MUTTI, S., FRATANTONIO, Y., BIANCHI, A., INVERNIZZI, L., CORBETTA, J., KIRAT, D., KRUEGEL, C., AND VIGNA, G. BareDroid: Large-scale Analysis of Android Apps on Real Devices. *Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC’15)*, 2015.

24. NETHERCOTE, N., AND SEWARD, J. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. *Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI’07)*, 2007.

25. PETSAS, T., VOYATZIS, G., ATHANASOPOULOS, E., POLYCHRONAKIS, M., AND IOANNIDIS, S. Rage against the Virtual Machine: Hindering Dynamic Analysis of Android Malware. *Proceedings of the 7th European Workshop on System Security (EurSec’14)*, 2014.

26. PORTOKALIDIS, G., HOMBURG, P., ANAGNOSTAKIS, K., AND BOS, H. Paranoid Android: Versatile Protection for Smartphones. *Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC’10)*, 2010.

27. QIAN, C., LUO, X., SHAO, Y., AND CHAN, A. T. On Tracking Information Flows through JNI in Android Applications. *Proceedings of The 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN’14)*, 2014.

28. SHI, H., ALWABEL, A., AND MIRKOVIC, J. Cardinal Pill Testing of System Virtual Machines. *Proceedings of the 23rd USENIX Security Symposium (USENIX Security’14)*, 2014.

29. SONG, D., BRUMLEY, D., YIN, H., CABALLERO, J., JAGER, I., KANG, M. G., LIANG, Z., NEWSOME, J., POOSANKAM, P., AND SAXENA, P. BitBlaze: A New Approach to Computer Security via Binary Analysis. *Proceedings of the 4th International Conference on Information Systems Security (ICISS’08)*, 2008.

30. SPENSKY, C., HU, H., AND LEACH, K. LO-PHI: Low-observable Physical Host Instrumentation for Malware Analysis. *Proceedings of 23rd Network and Distributed System Security Symposium (NDSS’16)*, 2016.

31. SPISAK, M. Hardware-assisted Rootkits: Abusing Performance Counters on the ARM and x86 Architectures. *Proceedings of the 10th USENIX Workshop on Offensive Technologies (WOOT’16)*, 2016.

32. SUN, H., SUN, K., WANG, Y., AND JING, J. TrustOTP: Transforming Smartphones into Secure One-time Password Tokens. *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS’15)*, 2015.

33. SUN, M., WEI, T., AND LUI, J. TaintART: A Practical Multi-level Information-Flow Tracking System for Android RunTime. *Proceedings of the 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS’16)*, 2016.

34. TAM, K., KHAN, S. J., FATTORI, A., AND CAVALLARO, L. CopperDroid: Automatic Reconstruction of Android Malware Behaviors. *Proceedings of 22nd Network and Distributed System Security Symposium (NDSS’15)*, 2015.

35. THE GNU MULTIPLE PRECISION ARITHMETIC LIBRARY. Pi with GMP. [在线资源] <https://gmplib.org/>

36. UBUNTU. sloccount. [在线手册] <http://manpages.ubuntu.com/manpages/precise/man1/compute_all.1.html>

37. VIDAS, T., AND CHRISTIN, N. Evading Android Runtime Analysis via Sandbox Detection. *Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security (AsiaCCS’14)*, 2014.

38. VOGL, S., AND ECKERT, C. Using Hardware Performance Events for Instruction-level Monitoring on the x86 Architecture. *Proceedings of the 2012 European Workshop on System Security (EuroSec12)*, 2012.

39. XEN PROJECT. Xen ARM with Virtualization Extensions. [在线文档] <https://wiki.xenproject.org/wiki/Xen_ARM_with_Virtualization_Extensions>

40. XINYANG GE, H. V., AND JAEGER, T. SPROBES: Enforcing Kernel Code Integrity on the TrustZone Architecture. *Proceedings of the 2014 Mobile Security Technologies (MoST’14)*, 2014.

41. YAN, LOK KWONG AND YIN, HENG. Droidscope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. *Proceedings of the 21st USENIX Security Symposium (USENIX Security’12)*, 2012.

42. YU, R. Android Packers: Facing the Challenges, Building Solutions. *Proceedings of the Virus Bulletin Conference (VB’14)*, 2014.

43. ZHANG, F., LEACH, K., STAVROU, A., AND WANG, H. Using Hardware Features for Increased Debugging Transparency. *Proceedings of The 36th IEEE Symposium on Security and Privacy (S&P’15)*, 2015, pp. 55–69.

44. ZHANG, Y., YANG, M., XU, B., YANG, Z., GU, G., NING, P., WANG, X. S., AND ZANG, B. Vetting Undesirable Behaviors in Android Apps with Permission Use Analysis. *Proceedings of the 20th ACM SIGSAC Conference on Computer and Communications Security (CCS’13)*, 2013.

45. ZHENG, MIN, SUN, MINGSHEN, AND LUI, JOHN CS. DroidTrace: A ptrace Based Android Dynamic Analysis System with Forward Execution Capability. *2014 International Wireless Communications and Mobile Computing Conference (IWCMC’14)*, 2014.

---

### 调试命令

| 命令 | 描述 |
| --- | --- |
| `rr` | 输出所有通用寄存器（X0 到 X30）、堆栈指针和程序计数器的值。 |
| `rw n v` | 将 64 位值 `v` 写入名为 `n` 的寄存器，并输出寄存器名称及其新值。 |
| `mr a s` | 输出从 64 位虚拟地址 `a` 开始的内存内容，大小为 `s`。如果虚拟地址不存在，输出 "Incorrect address"。 |
| `mw a v` | 将 8 位值 `v` 写入 64 位虚拟地址 `a`，并输出地址及存储在该地址的 8 位值。如果虚拟地址不存在，输出 "Incorrect address"。 |
| `ba a` | 在 64 位虚拟地址 `a` 添加断点，并输出地址。如果虚拟地址不存在，输出 "Incorrect address"。 |
| `bd a` | 删除 64 位虚拟地址 `a` 的断点，并输出地址。如果虚拟地址或断点不存在，输出 "Incorrect address"。 |
| `bc` | 清除所有断点，并输出 "succeed"。 |
| `n` | 单步执行到下一条指令，并输出该指令。 |
| `nb` | 单步执行到下一个 Java 字节码，并输出字节码。 |
| `nm` | 单步执行到下一个 Java 方法，并输出调用堆栈。 |
| `c` | 在断点后继续执行，并输出 "continued"。 |

---

### 域切换时间

我们使用 PMU 计数器来计算 CPU CYCLES 事件，并通过两次连续读取 PMU 计数器的差值和 CPU 频率来计算经过的时间。首先，我们连续读取 PMU 计数器两次，并计算经过的周期数，差值表示两次连续 PMU 读取指令之间的经过时间。然后，在两次读取指令之间插入一个 SMC 指令以触发域切换（NINJA 禁用），CPU 周期的差值表示在 ATF 中的往返时间。最后，我们测量启用 NINJA 时的 CPU 周期，此时的时间消耗包括 ATF 和自定义异常处理程序的时间消耗。为了避免由 CPU 频率缩放引起的偏差，我们将最小缩放频率设置为最大频率，以确保 CPU 始终以相同的频率运行。30 次实验的结果如下表所示。

| 类别 | 平均值 (µs) | 标准差 (µs) | 95% 置信区间 (µs) |
| --- | --- | --- | --- |
| ATF 启用 | 0.007 | 0.202 | [0.197, 0.207] |
| NINJA 启用 | 0.000 | 0.013 | [0.000, 0.000] |

---

希望这些改进能帮助您更好地理解和使用这些信息。