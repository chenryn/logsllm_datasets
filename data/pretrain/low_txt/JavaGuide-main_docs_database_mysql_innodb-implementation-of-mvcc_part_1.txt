---
title: InnoDB存储引擎对MVCC的实现
category: 数据库
tag:
  - MySQL
---

## 多版本并发控制 (Multi-Version Concurrency Control, MVCC)

MVCC是一种并发控制机制，用于在多个并发事务同时读写数据库时保持数据的一致性和隔离性。通过为每个数据行维护多个版本的数据来实现这一目标。当一个事务需要修改数据库中的数据时，MVCC会为该事务创建一个新的数据快照，而不是直接修改实际的数据行。

### 读操作（SELECT）

当一个事务执行读操作时，它会使用快照读取。快照读取基于事务开始时数据库的状态创建，因此事务不会读取其他事务尚未提交的修改。具体工作流程如下：

- 事务查找符合条件的数据行，并选择符合其事务开始时间的数据版本进行读取。
- 如果某个数据行有多个版本，事务会选择不晚于其开始时间的最新版本，确保只读取在它开始之前已经存在的数据。
- 由于事务读取的是快照数据，因此其他并发事务对数据行的修改不会影响当前事务的读取操作。

### 写操作（INSERT、UPDATE、DELETE）

当一个事务执行写操作时，它会生成一个新的数据版本，并将修改后的数据写入数据库。具体工作流程如下：

- 事务为要修改的数据行创建一个新的版本，并将修改后的数据写入新版本。
- 新版本的数据会带有当前事务的版本号，以便其他事务能够正确读取相应版本的数据。
- 原始版本的数据仍然存在，供其他事务使用快照读取，这保证了其他事务不受当前事务的写操作影响。

### 事务提交和回滚

- 当一个事务提交时，它所做的修改将成为数据库的最新版本，并且对其他事务可见。
- 当一个事务回滚时，它所做的修改将被撤销，对其他事务不可见。

### 版本回收

为了防止数据库中的版本无限增长，MVCC会定期进行版本的回收。回收机制会删除已经不再需要的旧版本数据，从而释放空间。

MVCC通过创建数据的多个版本和使用快照读取来实现并发控制。读操作使用旧版本数据的快照，写操作创建新版本，并确保原始版本仍然可用。这样，不同的事务可以在一定程度上并发执行，而不会相互干扰，从而提高了数据库的并发性能和数据一致性。

## 一致性非锁定读和锁定读

### 一致性非锁定读

一致性非锁定读（Consistent Nonlocking Reads）通常通过添加版本号或时间戳字段来实现。在更新数据的同时，版本号加1或更新时间戳。查询时，将当前可见的版本号与对应记录的版本号进行比对，如果记录的版本小于可见版本，则表示该记录可见。

在InnoDB存储引擎中，多版本控制是对非锁定读的实现。如果读取的行正在执行DELETE或UPDATE操作，读取操作不会等待行上锁的释放，而是读取行的一个快照数据。这种读取历史数据的方式称为快照读。

在Repeatable Read和Read Committed两个隔离级别下，普通的SELECT语句（不包括`select ... lock in share mode`和`select ... for update`）会使用一致性非锁定读（MVCC）。在Repeatable Read级别下，MVCC实现了可重复读和部分幻读的防止。

### 锁定读

锁定读（Locking Reads）包括以下语句：

- `select ... lock in share mode`
- `select ... for update`
- `insert`、`update`、`delete` 操作

在锁定读下，读取的是数据的最新版本，这种读也被称为当前读（current read）。锁定读会对读取到的记录加锁：

- `select ... lock in share mode`：对记录加S锁，其他事务也可以加S锁，但加X锁会被阻塞。
- `select ... for update`、`insert`、`update`、`delete`：对记录加X锁，其他事务不能加任何锁。

在一致性非锁定读下，即使读取的记录已被其他事务加上X锁，记录也可以被读取，即读取的是快照数据。在Repeatable Read级别下，如果执行的是当前读，则会对读取的记录使用Next-key Lock，以防止其他事务在间隙间插入数据。

## InnoDB 对 MVCC 的实现

InnoDB 实现MVCC依赖于隐藏字段、Read View和undo log。内部实现中，InnoDB通过数据行的DB_TRX_ID和Read View来判断数据的可见性。如果数据不可见，则通过数据行的DB_ROLL_PTR找到undo log中的历史版本。每个事务读到的数据版本可能是不一样的，在同一个事务中，用户只能看到该事务创建Read View之前已经提交的修改和该事务本身做的修改。

### 隐藏字段

InnoDB存储引擎为每行数据添加了三个隐藏字段：

- `DB_TRX_ID（6字节）`：表示最后一次插入或更新该行的事务ID。删除操作在内部被视为更新，但在记录头中标记为已删除。
- `DB_ROLL_PTR（7字节）`：回滚指针，指向该行的undo log。如果该行未被更新，则为空。
- `DB_ROW_ID（6字节）`：如果没有设置主键且该表没有唯一非空索引时，InnoDB会使用该ID来生成聚簇索引。

### Read View

```c
class ReadView {
  /* ... */
private:
  trx_id_t m_low_limit_id;      // 大于等于这个 ID 的事务均不可见
  trx_id_t m_up_limit_id;       // 小于这个 ID 的事务均可见
  trx_id_t m_creator_trx_id;    // 创建该 Read View 的事务ID
  trx_id_t m_low_limit_no;      // 事务 Number, 小于该 Number 的 Undo Logs 均可以被 Purge
  ids_t m_ids;                  // 创建 Read View 时的活跃事务列表
  bool m_closed;                // 标记 Read View 是否关闭
}
```

Read View主要用于可见性判断，保存了“当前对本事务不可见的其他活跃事务”。主要字段包括：

- `m_low_limit_id`：目前出现过的最大的事务ID+1，即下一个将被分配的事务ID。大于等于这个ID的数据版本均不可见。
- `m_up_limit_id`：活跃事务列表`m_ids`中最小的事务ID，如果`m_ids`为空，则`m_up_limit_id`为`m_low_limit_id`。小于这个ID的数据版本均可见。
- `m_ids`：Read View创建时其他未提交的活跃事务ID列表。创建Read View时，将当前未提交事务ID记录下来，后续即使它们修改了记录行的值，对于当前事务也是不可见的。`m_ids`不包括当前事务自己和已提交的事务。
- `m_creator_trx_id`：创建该Read View的事务ID。

### undo-log

undo log主要有两个作用：

- 当事务回滚时用于将数据恢复到修改前的样子。
- 另一个作用是MVCC，当读取记录时，若该记录被其他事务占用或当前版本对该事务不可见，则可以通过undo log读取之前的版本数据，以此实现非锁定读。

在InnoDB存储引擎中，undo log分为两种：

1. **`insert undo log`**：在`insert`操作中产生的undo log。因为`insert`操作的记录只对事务本身可见，对其他事务不可见，故该undo log可以在事务提交后直接删除，不需要进行purge操作。
2. **`update undo log`**：在`update`或`delete`操作中产生的undo log。该undo log可能需要提供MVCC机制，因此不能在事务提交时就进行删除。提交时放入undo log链表，等待purge线程进行最后的删除。

通过这些机制，InnoDB存储引擎有效地实现了多版本并发控制，提高了数据库的并发性能和数据一致性。