### 7. Related Work
This section summarizes the works that are most closely related to ours.

#### Suggesting Names for Program Elements
Several studies have explored the impact of identifier names on code comprehension [36, 33, 12] and have demonstrated that well-chosen names significantly enhance the readability of source code. These findings have inspired tools [13, 33] that rename identifiers within a project to adhere to specific coding conventions. 

However, the systems presented in [13] and [33] are not suitable for deobfuscation. The tool in [13] relies on existing meaningful, non-obfuscated names to improve them, and it cannot predict meaningful replacements for obfuscated names like "a". The tool in [33] only identifies poor names based on syntactic guidelines and provides feedback to developers but does not suggest new names.

The work by Allamanis et al. [8, 9] uses n-gram language models and neural networks to suggest names for Java program elements. However, their technique is limited to predicting the name of a single program element and is not applicable to deobfuscation tasks where many names are missing.

LibRadar [26] detects third-party Android libraries by extracting unique fingerprints from each library and creating a mapping from fingerprints to library names. Obfuscated libraries are identified by their fingerprints. In contrast to DeGuard, LibRadar is less general as it only predicts names for packages and is less robust because it relies on stable features (i.e., completely unaffected by obfuscation).

#### Probabilistic Models for Programs
The recent growth in open-source repositories has led to the development of large-scale probabilistic models for code. These models are used for various applications such as code completion [32], generating code from natural language [17, 10], sampling code snippets [27], programming language translation [18], type annotating programs [19, 31], and others.

The work in [31] uses structured prediction and the Nice2Predict framework [5] to guess names of local variables for JavaScript programs. While similar, our setting requires more diverse feature functions, constraints, and a broader range of elements for which names are predicted. Additionally, we use a more scalable learning mechanism than [31].

Several works [22, 21, 16, 24] use graphical models to discover properties about programs, such as function specifications and invariants. However, these works do not use MAP inference to find overall optimal solutions for all predicted properties, and most do not learn from existing programs. The work by Shin et al. [34] uses neural networks and a large training set to identify libraries in binaries. In the context of Android, Octeau et al. [28] use a probabilistic model and static analysis to determine if two applications can communicate via the Android intent mechanisms. However, their task is different from the one addressed by our work.

### 8. Conclusion
We introduced a novel approach for layout deobfuscation of Android APKs. The key idea is to frame the problem of reversing obfuscated names as structured prediction in a probabilistic graphical model and to leverage the vast availability of non-obfuscated Android programs to learn this model. We implemented our approach in a system called DeGuard and demonstrated that DeGuard can successfully and with high precision reverse obfuscations performed by ProGuard, a task beyond the reach of existing systems. Our work indicates the potential of using probabilistic models over "Big Code" to address important challenges in security.

### 9. Acknowledgments
This research was partially supported by ERC starting grant #680358. We thank Matteo Panczakchi for extending Nice2Predict [5] with support for pseudo-likelihood estimation.

### 10. References
[1] Advertising SDK Can Be Hijacked for Making Phone Calls, Geo-Locating. http://www.hotforsecurity.com/blog/advertising-sdk-can-be-hijacked-for-making-phone-calls-geo-locating-7461.html.
[2] dex2jar. https://github.com/pxb1988/dex2jar.
[3] F-Droid. https://f-droid.org/.
[4] Java Decompiler. http://jd.benow.ca/.
[5] Nice2Predict. https://github.com/eth-srl/Nice2Predict.
[6] ProGuard. http://proguard.sourceforge.net/.
[7] Type Erasure. https://docs.oracle.com/javase/tutorial/java/generics/genTypes.html.
[8] M. Allamanis, E. T. Barr, C. Bird, and C. Sutton. Learning natural coding conventions. In FSE, 2014.
[9] M. Allamanis, E. T. Barr, C. Bird, and C. Sutton. Suggesting accurate method and class names. In FSE, 2015.
[10] M. Allamanis, D. Tarlow, A. D. Gordon, and Y. Wei. Bimodal modelling of source code and natural language. In ICML, 2015.
[11] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. In PLDI, 2014.
[12] S. Butler, M. Wermelinger, Y. Yu, and H. Sharp. Exploring the influence of identifier names on code quality: An empirical study. In CSMR, 2010.
[13] B. Caprile and P. Tonella. Restructuring program identifier names. In ICSM, 2000.
[14] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang, B. Ma, A. Wang, Y. Zhang, and W. Zou. Following devil’s footprints: Cross-platform analysis of potentially harmful libraries on android and ios. In S&P, 2016.
[15] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones. In OSDI, 2010.
[16] S. Gulwani and N. Jojic. Program verification as probabilistic inference. In POPL, 2007.
[17] T. Gvero and V. Kuncak. Synthesizing java expressions from free-form queries. In OOPSLA, 2015.
[18] S. Karaivanov, V. Raychev, and M. Vechev. Phrase-based statistical translation of programming languages. Onward!, 2014.
[19] O. Katz, R. El-Yaniv, and E. Yahav. Estimating types in binaries using predictive modeling. In POPL, 2016.
[20] D. Koller and N. Friedman. Probabilistic Graphical Models: Principles and Techniques - Adaptive Computation and Machine Learning. The MIT Press, 2009.
[21] T. Kremenek, A. Y. Ng, and D. Engler. A factor graph model for software bug finding. In IJCAI, 2007.
[22] T. Kremenek, P. Twohey, G. Back, A. Ng, and D. Engler. From uncertainty to belief: Inferring the specification within. In OSDI, 2006.
[23] J. D. Lafferty, A. McCallum, and F. C. N. Pereira. Conditional Random Fields: Probabilistic Models for Segmenting and Labeling Sequence Data. In ICML, 2001.
[24] B. Livshits, A. V. Nori, S. K. Rajamani, and A. Banerjee. Merlin: Specification inference for explicit information flow problems. In PLDI, 2009.
[25] D. Low. Protecting Java Code via Code Obfuscation. Crossroads, 4(3), Apr. 1998.
[26] Z. Ma, H. Wang, Y. Guo, and X. Chen. Libradar: Fast and accurate detection of third-party libraries in android apps. In ICSE 2016 - Companion Volume, 2016.
[27] C. J. Maddison and D. Tarlow. Structured generative models of natural source code. In ICML, 2014.
[28] D. Octeau, S. Jha, M. Dering, P. McDaniel, A. Bartel, L. Li, J. Klein, and Y. Le Traon. Combining static analysis with probabilistic models to enable market-scale android inter-component analysis. In POPL, 2016.
[29] N. D. Ratliff, J. A. Bagnell, and M. Zinkevich. (Approximate) Subgradient Methods for Structured Prediction. In AISTATS, 2007.
[30] V. Raychev, P. Bielik, M. Vechev, and A. Krause. Learning programs from noisy data. In POPL, 2016.
[31] V. Raychev, M. Vechev, and A. Krause. Predicting program properties from “big code”. In POPL, 2015.
[32] V. Raychev, M. Vechev, and E. Yahav. Code completion with statistical language models. In PLDI, 2014.
[33] P. A. Relf. Tool assisted identifier naming for improved software readability: an empirical study. In ISESE, 2005.
[34] E. C. R. Shin, D. Song, and R. Moazzezi. Recognizing functions in binaries with neural networks. In USENIX Security, 2015.
[35] C. Sutton and A. McCallum. An introduction to conditional random fields. Found. Trends Mach. Learn., 4(4):267–373, Apr. 2012.
[36] A. A. Takang, P. A. Grubb, and R. D. Macredie. The effects of comments and identifier names on program comprehensibility: an experimental investigation. J. Prog. Lang., 4(3):143–167, 1996.
[37] O. Tripp, S. Guarnieri, M. Pistoia, and A. Aravkin. Aletheia: Improving the usability of static security analysis. In CCS, 2014.
[38] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan. Soot - a Java Bytecode Optimization Framework. In Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research. IBM Press, 1999.
[39] R. Yu. Ginmaster: A case study in android malware. https://www.sophos.com/en-us/medialibrary/PDFs/technical%20papers/Yu-VB2013.pdf.
[40] Y. Zhou and X. Jiang. Dissecting android malware: Characterization and evolution. In S&P, 2012.