### Table 10: Average End-to-End Delay per Fetch for the Last 10 Fetch Operations (in Seconds)

The end-to-end delay incurred by fetch operations is presented in Table 10. A secure fetch operation incurs, on average, between 1.74 and 2.08 seconds more than a regular fetch. In contrast, our defense (light) only adds between 0.65 and 0.8 seconds.

The time Git takes to perform a fetch or push is primarily determined by network latency when communicating with the remote repository. Since our defense is designed to be backward-compatible, it uses multiple Git commands per push or fetch. This explains the additional time incurred by our implementation. If our defense scheme is integrated into Git, eliminating the need for additional commands and network connections, we expect the additional delay to be negligible.

### 8. Conclusions

In this work, we introduce a new class of attacks against Git repositories. We demonstrate that, even when existing Git protection mechanisms such as Git commit signing are used, an attacker can still execute highly impactful attacks. These include removing security patches, moving experimental features into production software, or causing a user to install a version of software with known vulnerabilities.

To counter these new attacks, we developed a backward-compatible solution that prevents metadata manipulation while not obstructing regular Git usage scenarios. Our evaluation shows that our solution incurs less than 1% storage overhead when applied to popular Git repositories, such as the five most popular repositories on GitHub.

We responsibly disclosed these issues to the Git community and have been working with them to address these problems. Some of our patches have already been accepted into Git version 2.9, and we continue to collaborate with the Git community to fix these issues.

### Acknowledgements

We would like to thank Junio C. Hamano, Jeff King, Eric Sunshine, and the rest of the Git community for their valuable feedback and insights regarding these attacks and their solutions, as well as their guidance in exploring Git's internals. We also thank Lois A. DeLong, Vladimir Diaz, and the anonymous reviewers for their feedback on the writing of this paper.

This research was supported by the Defense Advanced Research Projects Agency (DARPA) and the Air Force Research Laboratory (AFRL) under Contract No. A8650-15-C-7521, and by the National Science Foundation (NSF) under Grants No. CNS 1054754, DGE 1565478, and DUE 1241976. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA, AFRL, and NSF. The United States Government is authorized to reproduce and distribute reprints notwithstanding any copyright notice herein.

### References

[1] Apso: Secrecy for Version Control Systems. http://aleph0.info/apso/
[2] Git signed push. http://thread.gmane.org/gmane.comp.version-control.git/255520
[3] GitHub. https://github.com
[4] Kernel.org Linux repository rooted in hack attack.
[5] 365 Git. http://www.theregister.co.uk/2011/08/31/linux_kernel_security_breach/
[6] Ars Technica. “Flame malware was signed by rogue certificate.” http://arstechnica.com/security/2012/06/flame-malware-was-signed-by-rogue-microsoft-certificate/
[7] Ars Technica. Lenovo PCs ship with man-in-the-middle adware that breaks HTTPS connections. http://arstechnica.com/security/2015/02/lenovo-pcs-ship-with-man-in-the-middle-adware-that-breaks-https-connections/
[8] Beta News. Has SSL become pointless? Researchers suspect state-sponsored CA forgery. http://betanews.com/2010/03/25/has-ssl-become-pointless-researchers-suspect-state-sponsored-ca-forgery/
[9] Briarproject. Development Workflow. https://code.briarproject.org/akwizgran/briar/wikis/development-workflow
[10] Bundler.io. Bundler: The best way to manage your application’s GEMS. http://bundler.io/git.html
[11] Code in the hole. Using pip and requirements.txt to install from the head of a GitHub branch. http://codeinthehole.com/writing/using-pip-and-requirementstxt-to-install-from-the-head-of-a-github-branch/
[12] Delicious Brains. Install WordPress site with Git. https://deliciousbrains.com/install-wordpress-subdirectory-composer-git-submodule/
[13] Extreme Tech. GitHub hacked, millions of projects at risk of being modified or deleted. http://www.extremetech.com/computing/120981-github-hacked-millions-of-projects-at-risk-of-being-modified-or-deleted
[14] A. J. Feldman, W. P. Zeller, M. J. Freedman, and E. W. Felten. Sporc: Group collaboration using untrusted cloud resources. In Proc. of the 9th USENIX Symposium on Operating Systems Design & Implementation (OSDI '10), 2010.
[15] Gamasutra. Cloud source host Code Spaces hacked, developers lose code. http://www.gamasutra.com/view/news/219462/Cloud_source_host_Code_Spaces_hacked_developers_lose_code.php
[16] Geek.com. Major open-source code repository hacked for months, says FSF. http://www.geek.com/news/major-open-source-code-repository-hacked-for-months-says-fsf-551344/
[17] M. Gerwitz. A Git Horror Story: Repository Integrity With Signed Commits. http://mikegerwitz.com/papers/git-horror-story
[18] Gigaom. Adobe source code breach; it’s bad, real bad. https://gigaom.com/2013/10/04/adobe-source-code-breech-its-bad-real-bad/
[19] Git SCM. Signing your work. https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work
[20] M. Gunderloy. Easy Git External Dependency Management with Giternal. http://www.rubyinside.com/giternal-easy-git-external-dependency-management-1322.html
[21] E. Homakov. How I hacked GitHub again. http://homakov.blogspot.com/2014/02/how-i-hacked-github-again.html
[22] How To Node. Managing module dependencies. http://howtonode.org/managing-module-dependencies
[23] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson. Analyzing forged SSL certificates in the wild. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP '14, pages 83–97, Washington, DC, USA, 2014. IEEE Computer Society.
[24] I2P. Setting trust evaluation hooks. https://geti2p.net/en/get-involved/guides/monotone#setting-up-trust-evaluation-hooks
[25] B. H. Kim and D. Lie. Caelus: Verifying the consistency of cloud services with battery-powered devices. In Proc. of the 36th IEEE Symposium on Security and Privacy (S&P '15), 2015.
[26] J. Li, M. Krohn, DMazières, and D. Shasha. Secure untrusted data repository (SUNDR). In Proc. of the 6th USENIX Symposium on Operating Systems Design & Implementation (OSDI '04), 2004.
[27] LWN. Linux kernel backdoor attempt. https://lwn.net/Articles/57135/
[28] P. Mahajan, S. Setty, S. Lee, A. Clement, L. Alvisi, M. Dahlin, and M. Walfish. Depot: Cloud storage with minimal trust. ACM Trans. Comput. Syst., 29(4):12:1–12:38, 2011.
[29] J. Pellegrini. Secrecy in concurrent version control systems. In Presented at the Brazilian Symposium on Information and Computer Security (SBSeg 2006), 2006.
[30] RubyGems.org. Data verification. http://blog.rubygems.org/2013/01/31/data-verification.html
[31] Schneier on Security. Forging SSL Certificates. https://www.schneier.com/blog/archives/2008/12/forging_ssl_cer.html
[32] R. Shirey, K. Hopkinson, K. Stewart, D. Hodson, and B. Borghetti. Analysis of implementations to secure Git for use as an encrypted distributed version control system. In 48th Hawaii International Conference on System Sciences (HICSS '15), pages 5310–5319, 2015.
[33] Stack Overflow. How to install from specific branch with OPAM? https://stackoverflow.com/questions/25277599/how-to-install-from-a-specific-git-branch-with-opam
[34] Stack Overflow. Loading Maven dependencies from GitHub. https://stackoverflow.com/questions/20161602/loading-maven-dependencies-from-github
[35] Stack Overflow. Where does Cargo put the Git requirements? https://stackoverflow.com/questions/28069678/where-does-cargo-put-the-git-requirements
[36] The Art of Simplicity. TFS Build: Build from a tag. http://bartwullems.blogspot.com/2014/01/tfs-build-build-from-git-tag.html
[37] ThreatPost. Certificates spoofing Google, Facebook, GoDaddy could trick mobile users. https://threatpost.com/certificates-spoofing-google-facebook-godaddy-could-trick-mobile-users/104259/
[38] US-CERT. "SSL 3.0 Protocol Vulnerability and POODLE attack." http://arstechnica.com/security/2012/06/flame-malware-was-signed-by-rogue-microsoft-certificate/
[39] D. A. Wheeler. Software Configuration Management (SCM) Security. http://www.dwheeler.com/essays/scm-security.html
[40] D. A. Wheeler. "The Apple goto fail vulnerability: lessons learned." http://www.dwheeler.com/essays/apple-goto-fail.html
[41] Wired. Behind iPhone's critical security bug, a single bad goto. http://www.wired.com/2014/02/gotofail/
[42] Wired. 'Google' Hackers had ability to alter source code. https://www.wired.com/2010/03/source-code-hacks/
[43] ZDNet. Gogo in-flight Wi-Fi serving spoofed SSL certificates. http://www.zdnet.com/article/gogo-in-flight-wi-fi-serving-spoofed-ssl-certificates/
[44] ZDNet. Open-source ProFTPD hacked, backdoor planted in source code. http://www.zdnet.com/article/open-source-proftpd-hacked-backdoor-planted-in-source-code/#
[45] ZDNet. Red Hat’s Ceph and Inktank code repositories were cracked. http://www.zdnet.com/article/red-hats-ceph-and-inktank-code-repositories-were-cracked/#

### Appendix: Proof of Concept of a Git Metadata Manipulation Attack

This appendix provides a proof of concept of a Git metadata manipulation attack against a GitHub repository, demonstrating how such an attack could be carried out in practice.

#### A.1 Simulating the Attack

To simulate the attack, we created a repository with a minimal working sample that resembles Figure 5(c). We configured two Linux machines on the same network: one functioned as the malicious server providing tampered metadata information, while the other played the role of the victim’s client machine. The specific setup is described below.

**Setup:**
- **Malicious Server:** We set up a Git server on port 443 with no authentication enabled, created an SSL certificate, and installed it on the victim's machine. A bare clone (using the `--bare` parameter) of the repository hosted on GitHub was created and placed on the relevant path.
- **Redirect Traffic:** To redirect the user to the new branch, we modified the `packed-refs` file on the root of the repository so that the commit hash in the master branch matches the one for the experimental branch. Refer to Table 11 for an example.
- **Client Side:** A clone of the repository was created before redirecting the traffic. After cloning, the attacker's IP address was added to the victim’s `/etc/hosts` file as `github.com` to redirect the traffic.

With this setup, both the server and the developer are configured to instigate the attack the next time the developer pulls.

#### A.2 The Attack

When the developer pulls, they are required to either merge or rebase the vulnerable changes into the working branch. These merged or rebased changes are not easily identifiable as malicious activity, as they resemble work performed by another developer on the same branch. As a result, the user is likely to merge and sign the resulting merge commit.

**Aftermath:**
Once the user successfully merges the vulnerable change, the attacker can stop re-routing the user’s traffic to the malicious server. With the malicious piece of code in the local repository, the developer is now expected to pollute the legitimate server the next time they push. In this case, the attacker was able to merge a vulnerable piece of code into production. Even worse, there is no trace of this happening, as the target developer willingly signed the merge commit object.

Setting up an environment for this attack is straightforward, and the metadata modification can be easily performed with a text editor, requiring no sophisticated tools.

**Table 11: The Edited packed-refs File**

| Original File | Tampered File |
|---------------|---------------|
| # pack-refs with: peeled fully-peeled<br>00a5c1c2f52c25fe389558ea8117b7914ca2351e refs/heads/experimental<br>3a1db2295a5f842d0223088447bc7b005df86066 refs/heads/master | # pack-refs with: peeled fully-peeled<br>00a5c1c2f52c25fe389558ea8117b7914ca2351e refs/heads/experimental<br>00a5c1c2f52c25fe389558ea8117b7914ca2351e refs/heads/master |

**Figure 5: Maliciously Merging Vulnerable Code**

(a) Original repository state (as cloned by the developer)
(b) The attacker changes the master branch pointer
(c) The developer pulled and, unknowingly, merged the experimental commit

---

This optimized version aims to improve clarity, coherence, and professionalism, making the content more accessible and easier to understand.