### RICH: A Compiler Extension for Detecting Integer Vulnerabilities

RICH [7] is a compiler extension designed to monitor program execution and detect potential attacks that exploit integer vulnerabilities. Despite its lightweight nature, RICH has limitations: it does not handle pointer aliasing and can produce false positives in cases where developers intentionally use undefined behavior, which are both key considerations in the design of IntFlow.

### Performance Evaluation

**Figure 4: Runtime Overhead for Applications (Normalized over Native Execution)**

We conducted performance evaluations on various applications, measuring user time with the `time` utility. The results are normalized against native execution, with an overhead of approximately 95%.

- **grep**: We searched for strings matching a complex regular expression in a 1.2GB file.
- **wget**: We downloaded a 1GB file over a 1Gbit/s link from a remote server.
- **zshx**: We executed a series of shell commands.
- **tcpdump**: We examined packets from a 5.8GB pcap file.
- **Web Servers**: Cherokee was configured for IPv4 only, while Nginx used default settings. Performance was measured using Apacheâ€™s `ab` benchmarking utility and static HTML files.

**Figure 4** shows the evaluation results. IntFlow incurs high overhead in applications with numerous integer operations, such as `grep`. We also observed significant performance deviations in I/O-bound applications like `wget`, `wwwx`, and `tcpdump`. In these cases, the overhead is prohibitive and negates the benefits of a static mechanism. However, for web servers like Cherokee and Nginx, the overhead is within an acceptable 20%, suggesting that IntFlow could be used as a runtime defense for I/O-bound applications.

The different modes of operation in IntFlow target specific flows and can be fine-tuned by developers. This customization can result in varying overheads, depending on the dominant flows in the application. For example, if the dominant flows involve sensitive calls (e.g., in web servers), the sensitive mode will be slower than the other two modes.

### Related Work

Over the past years, as protection mechanisms against buffer overflows have matured, there has been a growing focus on efficiently addressing integer overflows. This section summarizes the main characteristics of existing approaches and outlines their connection to the current work.

#### Dynamic and Symbolic Execution

- **Dynamic Execution Tools**: These tools use runtime checks to prevent unwanted program behavior. IOC [10] uses dynamic analysis to detect overflows in C/C++ programs. It performs a compiler-time transformation to add inline numerical error checks and relies on a runtime handler to prevent any unwanted behavior. IOC distinguishes between well-defined and undefined behaviors, reducing false positives. IntFlow complements IOC by integrating static instruction flow tracking into the analysis.
- **Symbolic Execution Tools**: These tools provide low false positives but struggle with full coverage. SmartFuzz [17] generates constraints defining unwanted behavior and determines whether inputs can trigger malicious paths. It uses the Valgrind framework for symbolic execution and scoring. KLEE [8] uses symbolic execution to generate high-coverage tests for large-scale programs but is not specifically focused on integer errors, resulting in less effective detection of integer overflows compared to specialized tools.

### Discussion

#### Static Information Flow Tracking

A core component of IntFlow is `llvm-deps` [18], which provides good source code coverage with low runtime overhead. However, `llvm-deps` suffers from inherent inaccuracies due to limitations in points-to analysis [15] and data flow analysis. These issues are exacerbated when performing inter-procedural analysis. Fortunately, sources and sinks typically reside within a single function, making this a trade-off between accuracy and performance. For high-accuracy requirements, dynamic IFT [13] can be integrated, and techniques combining static and dynamic analysis [12, 9] can help reduce runtime overhead.

#### IntFlow for Runtime Detection

IntFlow can be used to analyze existing code during development by reducing false positives reported by previous tools. It can also be deployed as a runtime defense against zero-day vulnerabilities. The primary challenges are the increased runtime overhead due to inserted checks and remaining false positives after IntFlow's analysis. Previous proposals for fast and efficient checking operations [22] can be adopted to improve performance.

#### Quality of Produced Reports

IntFlow offers three different modes of operation, each providing an estimation of the criticality of a bug. The sensitive mode reports the highest-risk errors, blacklisting mode examines flows from untrusted locations, and whitelisting mode generates the most warnings. Developers can prioritize their code review based on the mode, starting with the sensitive mode and moving to blacklisting and whitelisting as needed.

Our evaluation revealed that many reports follow a pattern due to code reuse. Using simple pattern matching and lexical analysis of the source code, in combination with IntFlow reports, could further increase the accuracy of error classification. This approach will be explored in future work.

### Conclusion

IntFlow is a tool that identifies a broad range of arithmetic errors and differentiates between critical errors and developer-intended constructs that rely on undefined behavior. It uses static information flow tracking to associate flows of interest with erroneous statements, significantly reducing false positives without compromising the detection of critical errors. Our evaluation demonstrates IntFlow's effectiveness in distinguishing between these types of errors, allowing developers and security analysts to efficiently detect and fix critical issues without sifting through non-critical violations. The significant reduction in false positives over IOC, which has been integrated into Clang since version 3.3, highlights the need for effective and accurate automated arithmetic error detection.

### Acknowledgments

This work was supported by DARPA and the US Air Force through contracts DARPA-FA8750-10-2-0253 and AFRL-FA8650-10-C-7024, respectively, with additional support from Intel Corp. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government, DARPA, the Air Force, or Intel.

### References

[1] Clang C language family frontend for LLVM. http://clang.llvm.org/.
[2] CVE - CVE-2006-3824. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3824.
[3] CWE - 2011 CWE/SANS top 25 most dangerous software errors. http://cwe.mitre.org/top25/.
[4] CWE - Common Weakness Enumeration. http://cwe.mitre.org/.
[5] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley Longman Publishing Co., Inc., 1986.
[6] A. Benameur, N. S. Evans, and M. C. Elder. Minestrone: Testing the soup. In Proceedings of the 6th Workshop on Cyber Security Experimentation and Test (CSET), 2013.
[7] D. Brumley, T. Chiueh, R. Johnson, H. Lin, and D. Song. RICH: Automatically Protecting Against Integer-Based Vulnerabilities. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2007.
[8] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2008.
[9] W. Chang, B. Streiff, and C. Lin. Efficient and extensible security enforcement using dynamic data flow analysis. Proceedings of the 15th ACM conference on Computer and Communications Security (CCS), 2008.
[10] W. Dietz, P. Li, J. Regehr, and V. Adve. Understanding integer overflow in C/C++. In Proceedings of the 34th International Conference on Software Engineering (ICSE), 2012.
[11] P. Godefroid, N. Klarlund, and K. Sen. DART: Directed automated random testing. In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.
[12] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh, D. I. August, and A. D. Keromytis. A general approach for efficiently accelerating software-based dynamic data flow tracking on commodity hardware. In Proceedings of the 19th Network and Distributed System Security Symposium (NDSS), 2012.
[13] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis. libdft: practical dynamic data flow tracking for commodity systems. In Proceedings of the 8th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments (VEE), 2012.
[14] C. Lattner and V. Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In Proceedings of the international symposium on Code generation and optimization (CGO), 2004.
[15] C. Lattner, A. Lenharth, and V. Adve. Making context-sensitive points-to analysis with heap cloning practical for the real world. In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2007.
[16] F. Long, S. Sidiroglou-Douskos, D. Kim, and M. Rinard. Sound input filter generation for integer overflow errors. In Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2014.
[17] D. Molnar, X. C. Li, and D. A. Wagner. Dynamic test generation to find integer bugs in x86 binary Linux programs. In Proceedings of the 18th USENIX Security Symposium, 2009.
[18] S. Moore. thinkmoore/llvm-deps. https://github.com/thinkmoore/llvm-deps. (Visited on 06/07/2014).
[19] E. Revfy. Inside the size overflow plugin. http://forums.grsecurity.net/viewtopic.php?f=7&t=3043.
[20] T. Wang, C. Song, and W. Lee. Diagnosis and emergency patch generation for integer overflow exploits. In Proceedings of the 11th Conference on Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA), 2014.
[21] T. Wang, T. Wei, Z. Lin, and W. Zou. Intscope: Automatically detecting integer overflow vulnerability in x86 binary using symbolic execution. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2009.
[22] X. Wang. Fast integer overflow detection. http://kqueue.org/blog/2012/03/16/fast-integer-overflow-detection/.
[23] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek. Improving integer security for systems with KINT. In Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2012.
[24] X. Wang, N. Zeldovich, M. F. Kaashoek, and A. Solar-Lezama. Towards optimization-safe systems. In Proceedings of the 24th ACM Symposium on Operating Systems Principles (SOSP), 2013.
[25] C. Zhang, T. Wang, T. Wei, Y. Chen, and W. Zou. Intpatch: Automatically fix integer-overflow-to-buffer-overflow vulnerability at compile-time. In Proceedings of the 15th European Symposium on Research in Computer Security (ESORICS), 2010.