Certainly! Below is the optimized and refined version of the provided text, making it more clear, coherent, and professional:

---

### Windows Management Instrumentation (WMI) Abuse

**Description:**
Adversaries may exploit Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment for accessing Windows system components. The WMI service enables both local and remote access, with the latter facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM). DCOM operates over port 135, while WinRM uses port 5985 for HTTP and 5986 for HTTPS.

An adversary can use WMI to interact with local and remote systems, performing actions like gathering information for Discovery and executing files for Lateral Movement.

**External References:**
- [T1047 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1047)
- [FireEye WMI 2015](https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf)
- [FireEye WMI SANS 2015](https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf)
- [MSDN WMI](https://msdn.microsoft.com/en-us/library/aa394582.aspx)

**Detection:**
- Monitor network traffic for WMI connections.
- Perform process monitoring to capture command-line arguments of `wmic` and detect commands used for remote behavior.

**Data Sources:**
- Process: Process Creation
- Command: Command Execution
- Network Traffic: Network Connection Creation

**Platforms:**
- Windows

---

### Malicious Shell Modification

**Description:**
Adversaries may establish persistence by executing malicious commands triggered by a user's shell. User shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command line interface or logs in remotely (such as via SSH), a login shell is initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment.

Adversaries may insert commands into scripts automatically executed by shells to establish persistence. For example, in bash, adversaries can add commands to `/etc/profile`, `/etc/profile.d`, `~/.bash_profile`, `~/.bash_login`, `~/.profile`, and `~/.bashrc` to launch malicious binaries. On macOS, similar techniques can be used with zsh, the default shell for macOS 10.15+.

**External References:**
- [T1156 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1156)
- [Kaiji Malware - Intezer](https://www.intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/)

**Detection:**
- Monitor for abnormal commands in shell profile files.
- Monitor for changes to `/etc/profile` and `/etc/profile.d` files, which should only be modified by system administrators.

**Permissions Required:**
- User
- Administrator

**Platforms:**
- Linux
- macOS

---

### Screen Capture

**Description:**
Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as `CopyFromScreen`, `xwd`, or `screencapture`.

**External References:**
- [T1113 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1113)
- [Graphics.CopyFromScreen Method - Microsoft Docs](https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen?view=netframework-4.8)
- [Antiquated Mac Malware - Malwarebytes Blog](https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/)

**Detection:**
- Monitor for unusual processes using API calls to obtain image data.
- Monitor for image files written to disk.
- Correlate sensor data with other events to identify malicious activity.

**Data Sources:**
- Command: Command Execution
- Process: OS API Execution

**Platforms:**
- Linux
- macOS
- Windows

---

### Fileless Storage

**Description:**
Adversaries may store data in "fileless" formats to conceal malicious activity from defenses. Fileless storage can be broadly defined as any format other than a file. Common examples of non-volatile fileless storage include the Windows Registry, event logs, or WMI repository.

Similar to fileless in-memory behaviors, fileless data storage may remain undetected by anti-virus and other endpoint security tools. Adversaries may use fileless storage to conceal various types of stored data, including payloads/shellcode and collected data not yet exfiltrated from the victim. This data is often encrypted, encoded, or otherwise obfuscated.

Some forms of fileless storage activity may indirectly create artifacts in the file system, but in central and otherwise difficult to inspect formats such as the WMI or Registry physical files.

**External References:**
- [T1027.011 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1027/011)
- [A New Secret Stash for “Fileless” Malware - SecureList](https://securelist.com/a-new-secret-stash-for-fileless-malware/106393/)
- [Fileless Threats - Microsoft](https://learn.microsoft.com/microsoft-365/security/intelligence/fileless-threats)

**Data Sources:**
- WMI: WMI Creation
- Windows Registry: Windows Registry Key Creation

**Platforms:**
- Windows

---

### Bootkit

**Description:**
A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). Adversaries may use bootkits to persist on systems at a layer below the operating system, making full remediation difficult unless specifically suspected.

- **Master Boot Record (MBR):** The MBR is the first section of the disk loaded after hardware initialization. An adversary with raw access to the boot drive may overwrite this area to divert execution during startup to adversary code.
- **Volume Boot Record (VBR):** The MBR passes control of the boot process to the VBR. Similar to the MBR, an adversary with raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.

**External References:**
- [T1067 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1067)
- [M-Trends 2016 - Mandiant](https://www.fireeye.com/content/dam/fireeye-www/regional/fr_FR/offers/pdfs/ig-mtrends-2016.pdf)
- [Are MBR Infections Back in Fashion? - Symantec](http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion)

**Detection:**
- Perform integrity checking on MBR and VBR.
- Take snapshots of MBR and VBR and compare against known good samples.
- Report changes to MBR and VBR for further analysis.

**Permissions Required:**
- Administrator
- SYSTEM

**Platforms:**
- Linux
- Windows

---

### Boot or Logon Initialization Scripts

**Description:**
Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. These scripts can perform administrative functions, such as executing other programs or sending information to an internal logging server. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.

Adversaries may also escalate their privileges since some boot or logon initialization scripts run with higher privileges.

**External References:**
- [T1037 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1037)

**Detection:**
- Monitor logon scripts for unusual access by abnormal users or at abnormal times.
- Look for files added or modified by unusual accounts outside of normal administration duties.
- Monitor running processes for actions indicative of abnormal programs or executables running upon logon.

**Data Sources:**
- File: File Creation
- Active Directory: Active Directory Object Modification
- Windows Registry: Windows Registry Key Creation
- File: File Modification
- Process: Process Creation
- Command: Command Execution

**Platforms:**
- macOS
- Windows
- Linux

---

### Adversary-in-the-Middle (AiTM)

**Description:**
Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing or Transmitted Data Manipulation. By abusing features of common networking protocols, adversaries may force a device to communicate through an adversary-controlled system to collect information or perform additional actions.

For example, adversaries may manipulate DNS settings to prevent/redirect users from accessing legitimate sites, push additional malware, intercept user credentials, and session cookies. Downgrade Attacks can also be used to establish an AiTM position.

**External References:**
- [T1557 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1557)
- [How DNS Changer Trojans Direct Users to Threats - Trend Micro](https://www.trendmicro.com/vinfo/us/threat-encyclopedia/web-attack/125/how-dns-changer-trojans-direct-users-to-threats)
- [DriftingCloud: Zero-Day Sophos Firewall Exploitation and an Insidious Breach - Volexity](https://www.volexity.com/blog/2022/06/15/driftingcloud-zero-day-sophos-firewall-exploitation-and-an-insidious-breach/)

**Detection:**
- Monitor network traffic for anomalies associated with known AiTM behavior.
- Monitor for modifications to system configuration files involved in shaping network traffic flow.

**Data Sources:**
- Application Log: Application Log Content
- Network Traffic: Network Traffic Content
- Service: Service Creation
- Windows Registry: Windows Registry Key Modification
- Network Traffic: Network Traffic Flow

**Platforms:**
- Windows
- macOS
- Linux
- Network

---

### System Owner/User Discovery

**Description:**
Adversaries may attempt to identify the primary user, currently logged-in user, set of users that commonly use a system, or whether a user is actively using the system. They may do this by retrieving account usernames or using OS Credential Dumping. The information may be collected in various ways using other Discovery techniques, as user and username details are prevalent throughout a system.

Various utilities and commands may acquire this information, including `whoami`, `w`, `who`, and environment variables such as `%USERNAME%` and `$USER`. On network devices, CLI commands like `show users` and `show ssh` can display users currently logged into the device.

**External References:**
- [T1033 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1033)
- [Cisco IOS Security Command Reference: Commands S to Z - Cisco](https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/security/s1/sec-s1-cr-book/sec-cr-s5.html)
- [Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices - US-CERT](https://us-cert.cisa.gov/ncas/alerts/TA18-106A)

**Detection:**
- Monitor processes and command-line arguments for actions that could be taken to gather system and network information.
- Collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.

**Data Sources:**
- Process: OS API Execution
- Process: Process Access
- Windows Registry: Windows Registry Key Access
- Active Directory: Active Directory Object Access
- Network Traffic: Network Traffic Content
- File: File Access
- Process: Process Creation
- Command: Command Execution
- Network Traffic: Network Traffic Flow

**Platforms:**
- Linux
- macOS
- Windows
- Network

---

### Acquire Infrastructure

**Description:**
Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations, including physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase.

Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with normal traffic and utilize infrastructure that can be rapidly provisioned, modified, and shut down.

**External References:**
- [T1583 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1583)
- [Forensic Methodology Report: How to catch NSO Group’s Pegasus - Amnesty International](https://www.amnesty.org/en/latest/research/2021/07/forensic-methodology-report-how-to-catch-nso-groups-pegasus/)
- [Criminal Hideouts for Lease: Bulletproof Hosting Services - Trend Micro](https://documents.trendmicro.com/assets/wp/wp-criminal-hideouts-for-lease.pdf)

**Detection:**
- Consider using services that track newly acquired infrastructure, such as WHOIS databases.
- Use internet scans to proactively discover adversary-acquired infrastructure.
- Focus detection efforts on related stages of the adversary lifecycle, such as Command and Control.

**Data Sources:**
- Internet Scan: Response Metadata
- Domain Name: Active DNS
- Internet Scan: Response Content
- Domain Name: Domain Registration
- Domain Name: Passive DNS

**Platforms:**
- PRE

---

### Rundll32

**Description:**
Adversaries may abuse `rundll32.exe` to proxy execution of malicious code. Using `rundll32.exe` instead of direct execution may avoid triggering security tools that may not monitor `rundll32.exe` due to allowlists or false positives from normal operations. `rundll32.exe` is commonly associated with executing DLL payloads.

`rundll32.exe` can also be used to execute Control Panel Item files (.cpl) through the undocumented `shell32.dll` functions `Control_RunDLL` and `Control_RunDLLAsUser`. Double-clicking a .cpl file also causes `rundll32.exe` to execute. `rundll32.exe` can also execute scripts such as JavaScript.

Adversaries may also obscure malicious code by abusing the manner in which `rundll32.exe` loads DLL function names. Adversaries may create multiple identical exported function names and append `W` and/or `A` to harmless ones to obscure the actual malicious function.

**External References:**
- [T1218.011 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1218/011)
- [Defense Evasion Techniques - Cynet](https://www.cynet.com/attack-techniques-hands-on/defense-evasion-techniques/)
- [Rundll32.exe Obscurity - Attackify](https://www.attackify.com/blog/rundll32_execution_order/)

**Detection:**
- Use process monitoring to monitor the execution and arguments of `rundll32.exe`.
- Compare recent invocations of `rundll32.exe` with prior history to determine anomalous and potentially adversarial activity.
- Analyze DLL exports and compare to runtime arguments to uncover obfuscated function calls.

**Data Sources:**
- File: File Metadata
- Module: Module Load
- Command: Command Execution
- Process: Process Creation

**Platforms:**
- Windows

---

### Container and Resource Discovery

**Description:**
Adversaries may attempt to discover containers and other resources available within a container environment. These resources can be viewed within web applications such as the Kubernetes dashboard or queried via the Docker and Kubernetes APIs. Logs may leak information about the environment, such as its configuration, available services, and the cloud provider used. Discovery of these resources may inform an adversary’s next steps, such as how to perform lateral movement and which methods to use for execution.

**External References:**
- [T1613 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1613)
- [Docker Engine API v1.41 Reference - Docker](https://docs.docker.com/engine/api/v1.41/)
- [The Kubernetes API - Kubernetes](https://kubernetes.io/docs/concepts/overview/kubernetes-api/)

**Detection:**
- Establish centralized logging for the activity of container and Kubernetes cluster components.
- Monitor logs for actions that could be taken to gather information about container infrastructure.
- Monitor account activity logs to see actions performed and activity associated with the Kubernetes dashboard and other web applications.

**Data Sources:**
- Container: Container Enumeration
- Pod: Pod Enumeration

**Platforms:**
- Containers

---

### Serverless

**Description:**
Adversaries may purchase and configure serverless cloud infrastructure, such as Cloudflare Workers or AWS Lambda functions, that can be used during targeting. By utilizing serverless infrastructure, adversaries can make it more difficult to attribute infrastructure used during operations back to them.

Once acquired, the serverless runtime environment can be leveraged to either respond directly to infected machines or to Proxy traffic to an adversary-owned command and control server. As traffic generated by these functions will appear to come from subdomains of common cloud providers, it may be difficult to distinguish from ordinary traffic.

**External References:**
- [T1583.007 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1583/007)
- [AWS Lambda Redirector - XPNsec](https://blog.xpnsec.com/aws-lambda-redirector/)
- [Detecting Command & Control in the Cloud - Awake Security](https://awakesecurity.com/blog/threat-hunting-series-detecting-command-control-in-the-cloud/)
- [BlackWater Malware Abuses Cloudflare Workers for C2 Communication - BleepingComputer](https://www.bleepingcomputer.com/news/security/blackwater-malware-abuses-cloudflare-workers-for-c2-communication/)

**Data Sources:**
- Internet Scan: Response Content

**Platforms:**
- PRE

---

### Hidden Window

**Description:**
Adversaries may implement hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. Adversaries may abuse operating system functionality to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.

**Examples:**
- **Windows:** PowerShell, Jscript, and VBScript can be used to make windows hidden. For example, `powershell.exe -WindowStyle Hidden`.
- **Mac:** The configurations for how applications run on macOS are listed in property list (plist) files. One of the tags in these files can be `apple.awt.UIElement`, which allows Java applications to prevent the application's icon from appearing in the Dock. Adversaries can abuse this feature to hide their running window.

**External References:**
- [T1143 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1143)
- [About PowerShell.exe - Microsoft Docs](https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/About/about_PowerShell_exe?view=powershell-5.1)
- [New Mac Backdoor Using Antiquated Code - Malwarebytes Blog](https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/)

**Detection:**
- Monitor processes and command-line arguments for actions indicative of hidden windows.
- Enable and configure event logging and PowerShell logging to check for the hidden window style.
- File monitoring can check for the `apple.awt.UIElement` or any other suspicious plist tag in plist files and flag them.

**Platforms:**
- macOS
- Windows

---

### LC_LOAD_DYLIB Addition

**Description:**
Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The `LC_LOAD_DYLIB` header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the `LC_CODE_SIGNATURE` command from the binary so that the signature isn’t checked at load time.

**External References:**
- [T1161 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1161)
- [Writing Bad @$$ Malware for OS X - Black Hat](https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf)
- [Malware Persistence on OS X Yosemite - Virus Bulletin](https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf)

**Detection:**
- Monitor processes for those that may be used to modify binary headers.
- Monitor file systems for changes to application binaries and invalid checksums/signatures.
- Changes to binaries that do not line up with application updates or patches are also extremely suspicious.

**Platforms:**
- macOS

---

### Standard Encoding

**Description:**
Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.

**External References:**
- [T1132.001 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1132/001)
- [Command & Control Understanding, Denying and Detecting - University of Birmingham](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)
- [Binary-to-text Encoding - Wikipedia](https://en.wikipedia.org/wiki/Binary-to-text_encoding)
- [Character Encoding - Wikipedia](https://en.wikipedia.org/wiki/Character_encoding)

**Detection:**
- Analyze network data for uncommon data flows.
- Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.
- Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.

**Data Sources:**
- Network Traffic: Network Traffic Content

**Platforms:**
- Linux
- macOS
- Windows

---

### Embedded Payloads

**Description:**
Adversaries may embed payloads within other files to conceal malicious content from defenses. Otherwise seemingly benign files (such as scripts and executables) may be abused to carry and obfuscate malicious payloads and content. In some cases, embedded payloads may also enable adversaries to Subvert Trust Controls by not impacting execution controls such as digital signatures and notarization tickets.

Adversaries may embed payloads in various file formats to hide payloads. This is similar to Steganography, though it does not involve weaving malicious content into specific bytes and patterns related to legitimate digital media formats.

**External References:**
- [T1027.009 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1027/009)
- [Invoke-PSImage - GitHub](https://github.com/peewpw/Invoke-PSImage)
- [Malware Analysis Report (AR20-303A) MAR-10310246-2.v1 – PowerShell Script: ComRAT - CISA](https://www.cisa.gov/uscert/ncas/analysis-reports/ar20-303a)
- [Reflective Loading Runs Netwalker Fileless Ransomware - Trend Micro](https://www.trendmicro.com/en_us/research/20/e/netwalker-fileless-ransomware-injected-via-reflective-loading.html)
- [Hello! My name is Dtrack - Securelist](https://securelist.com/my-name-is-dtrack/93338/)
- [2.5 ExtraData - Microsoft Learn](https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-shllink/c41e062d-f764-4f13-bd4f-ea812ab9a4d1)
- [FADE DEAD | Adventures in Reversing Malicious Run-Only AppleScripts - SentinelLabs](https://www.sentinelone.com/labs/fade-dead-adventures-in-reversing-malicious-run-only-applescripts/)

**Data Sources:**
- File: File Creation
- File: File Metadata

**Platforms:**
- macOS
- Windows
- Linux

---

### Plist Modification

**Description:**
Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. Plists are located in certain locations depending on their purpose, such as `/Library/Preferences` (which execute with elevated privileges) and `~/Library/Preferences` (which execute with a user's privileges).

Adversaries can modify these plist files to point to their own code, use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism.

**External References:**
- [T1150 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1150)
- [Sofacy's 'Komplex' OS X Trojan - Palo Alto Networks](https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/)

**Detection:**
- File system monitoring can determine if plist files are being modified.
- Users should not have permission to modify these in most cases.
- Some software tools like "Knock Knock" can detect persistence mechanisms and point to the specific files that are being referenced.
- Monitor process execution for abnormal process execution resulting from modified plist files.
- Monitor utilities used to modify plist files or that take a plist file as an argument, which may indicate suspicious activity.

**Platforms:**
- macOS

---

### Pluggable Authentication Modules (PAM)

**Description:**
Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files that guide authentication for many services. The most common authentication module is `pam_unix.so`, which retrieves, sets, and verifies account authentication information in `/etc/passwd` and `/etc/shadow`.

Adversaries may modify components of the PAM system to create backdoors. PAM components, such as `pam_unix.so`, can be patched to accept arbitrary adversary-supplied values as legitimate credentials. Malicious modifications to the PAM system may also be abused to steal credentials.

**External References:**
- [T1556.003 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1556/003)
- [PAM - Pluggable Authentication Modules - Apple](https://opensource.apple.com/source/dovecot/dovecot-239/dovecot/doc/wiki/PasswordDatabase.PAM.txt)
- [pam_unix(8) - Linux man page - die.net](https://linux.die.net/man/8/pam_unix)
- [CHAPTER 2. USING PLUGGABLE AUTHENTICATION MODULES (PAM) - Red Hat](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/managing_smart_cards/pluggable_authentication_modules)
- [linux-pam-backdoor - GitHub](https://github.com/zephrax/linux-pam-backdoor)
- [Exfiltrating credentials via PAM backdoors & DNS requests - x-c3ll](https://x-c3ll.github.io/posts/PAM-backdoor-DNS/)

**Detection:**
- Monitor PAM configuration and module paths (e.g., `/etc/pam.d/`) for changes.
- Use system-integrity tools such as AIDE and monitoring tools such as `auditd` to monitor PAM files.
- Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts.

**Data Sources:**
- Logon Session: Logon Session Creation
- File: File Modification

**Platforms:**
- Linux
- macOS

---

### Revert Cloud Instance

**Description:**
An adversary may revert changes made to a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.

Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage, including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.

**External References:**
- [T1578.004 - MITRE ATT&CK](https://attack.mitre.org/techniques/T1578/004)
- [Backing up and restoring snapshots on Amazon EC2 machines - Tech Republic](https://www.techrepublic.com/blog/the-enterprise-cloud/backing-up-and-restoring-snapshots-on-amazon-ec2-machines/)
- [Restoring and deleting persistent disk snapshots - Google Cloud](https://cloud.google.com/compute/docs/disks/restore-and-delete-snapshots)

**Detection:**
- Establish centralized logging of instance activity, which can be used to monitor and review system events even after reverting to a snapshot, rolling back changes, or changing persistence/type of storage.
- Monitor specifically for events related to snapshots and rollbacks and VM configuration changes, occurring outside of normal activity.
- To reduce false positives, valid change management procedures could introduce a known identifier that is logged with the change (e.g., tag or header) if supported by the cloud provider, to help distinguish valid, expected actions from malicious ones.

**Data Sources:**
- Instance: Instance Modification
- Instance: Instance Stop
- Instance: Instance Metadata
- Instance: Instance Start

**Platforms:**
- IaaS

---