### First Implementation of an Efficient Bitcoin-Based Log

Keybase [14] and Blockstack [15, 24] utilize the Bitcoin blockchain to prevent equivocation but do so inefficiently, requiring clients to run a full Bitcoin node. Keybase periodically publishes the Merkle root of its public-key directory by committing it in transactions signed under a fixed public key known to Keybase clients [83]. Specifically, Keybase stores the Merkle root in the transaction’s output as a "fake" public key (see §II-B5). Unfortunately, this method does not allow clients to efficiently and correctly obtain all Keybase-issued transactions using Bloom filtering (see §II-B6). This is because Bitcoin P2P nodes can selectively hide transactions from clients and show different transactions to different users, leading to equivocation about the Keybase directory (see §IV-C).

In Catena, each new transaction spends the previous one, creating a unique chain due to the difficulty of double spending. As a result, all Catena clients see the same history of transactions, implicitly agreeing on the history of statements.

In Blockstack [15], users submit their own operations (e.g., "register public key" or "update public key") to the Bitcoin blockchain by creating transactions that include these operations in an OP_RETURN output. Blockstack nodes download the full Bitcoin blockchain and filter these Blockstack-specific transactions (recognized via a magic byte in the OP_RETURN data), accumulating the Blockstack operations into a consensus hash [15]. Thin clients can query Blockstack nodes for public keys (e.g., "look up Alice's public key") and authenticate their responses against a consensus hash. However, because thin clients cannot download the entire blockchain, they must obtain consensus hashes from a trusted entity, which, if compromised, could equivocate about these hashes. In this sense, Catena could make equivocation about consensus hashes as hard as forking Bitcoin, thereby increasing Blockstack’s thin client security (discussed in §II-A2).

### Coin Coloring Schemes

Coin coloring schemes [85-87] leverage the Bitcoin blockchain to enable the secure issuance and transfer of assets other than bitcoins, such as smart property, stocks, or bonds [94]. The key idea is that a set of coins locked in an output can be assigned a static color, which can be correctly maintained as those coins change hands. To prevent double spending of colored coins, coloring schemes also leverage Bitcoin’s security against double spends along with some additional verification by "color-aware" wallets. The overhead of these schemes is similar to Catena’s, as "color-aware" (thin) wallets only need to track transactions that affect an asset (e.g., reassigned ownership).

Coin coloring schemes and Catena both rely on the difficulty of double spending but address slightly different problems. While coin coloring schemes prevent equivocation about the never-changing color of a coin, Catena prevents equivocation about an ever-growing log of statements. Although some coloring schemes support committing arbitrary data in their transactions [95] and could be adapted to prevent equivocation, to the best of our knowledge, this has not yet been done. Thus, we believe Catena to be the first system that solves the equivocation problem efficiently using Bitcoin.

### Non-Equivocation Contracts

Non-equivocation contracts [96] disincentivize equivocation by penalizing it with monetary loss. Specifically, if an authority equivocates, its Bitcoin secret key, which locks some funds, is implicitly revealed via a mechanism similar to double-authentication-preventing signatures (DAPS) [97]. As a result, anyone who detects equivocation can spend those funds. The advantage of non-equivocation contracts is that statements are not included in the Bitcoin blockchain, allowing them to be issued faster than in Catena. This enables interesting applications, such as asynchronous payment channels [96], which are not possible with Catena. However, unlike Catena, non-equivocation contracts only disincentivize equivocation and do not necessarily prevent it. For example, an outsider who steals the authority’s secret key and wants to harm the authority is actually incentivized to equivocate and can easily do so. With Catena, even with a stolen secret key, an outsider cannot equivocate without forking the Bitcoin blockchain.

### CoSi: Preventing Equivocation with Witness Cosigning

CoSi [17] prevents equivocation by requiring a threshold number of "witnesses" to verify and sign an authority’s statements. Depending on the application, these witnesses could also check the internal consistency of statements (see §VII-3). In contrast, Catena prevents equivocation by assuming its authority, Bitcoin, is trustworthy, without relying too much on the header relay network (HRN) to keep it honest (see §V-E). Both CoSi and Catena make assumptions about the connectivity of participants. CoSi requires a relatively well-connected set of witnesses for its tree broadcast scheme, while Catena requires the Bitcoin P2P network not to be easily partitioned. One drawback of CoSi is that it requires an admission control process for witnesses to prevent Sybil attacks [44]. Finding reputable, trustworthy entities as witnesses can be challenging. In contrast, Catena is easier to deploy, as it relies solely on the Bitcoin blockchain as a single trustworthy witness and on a header relay network that can be bootstrapped using existing blockchain explorers (see §IV-B).

Like CoSi, Catena can offer both "proactive" and "retroactive" security [17]. Proactively, Catena can be used by clients to validate previously accepted statements, or it can be used before accepting a statement as valid. Unlike CoSi, Catena incurs a higher delay when used proactively because clients have to wait for sufficient confirmations before accepting a statement. This is a cost Catena pays for using a decentralized consensus network as its only witness. However, not all applications are sensitive to this cost. Catena is suitable for key transparency schemes, Tor directory servers, and software transparency schemes, which all perform batching and update their state infrequently.

### Key Transparency Schemes

Key transparency schemes can detect equivocation using gossip amongst users [2, 11, 25, 26], gossip between users and trusted validators [28], federated trust [2], any-trust assumptions [27], or non-collusion between actors [27, 28]. Catena, instead, relies on the resilience of Bitcoin’s proof-of-work consensus to prevent, not just detect, equivocation. Our approach can provide proactive security [17] at the cost of publishing new statements every 10 minutes with an average 60-minute confirmation latency (if clients wait for 6 confirmations). Alternatively, Catena can provide retroactive security with no latency. We believe Catena can strengthen key transparency schemes because it enables anyone to audit efficiently for non-equivocation. We also believe Catena’s approach to non-equivocation is simpler and more trustworthy due to the decentralized nature of Bitcoin’s consensus protocol.

### EthIKS: Using Ethereum for Key Transparency

EthIKS [98] uses the Ethereum blockchain [84] to prevent equivocation in CONIKS [2], a key transparency scheme that enables users to efficiently monitor their own public key bindings. EthIKS implements CONIKS as a "smart contract" in the Ethereum blockchain and relies on Ethereum miners to enforce CONIKS security invariants. Like Catena, EthIKS also leverages proof-of-work consensus within a cryptocurrency to prevent equivocation in the log. However, EthIKS guarantees internal consistency (see §VII-3) of the CONIKS log, though this comes at the expense of additional Ethereum transaction fees paid by the EthIKS log server [98]. In contrast, Catena clients have to check each log statement for internal consistency themselves, incurring an overhead linear in the number of statements in the log. For certain applications where internal consistency checks are not expensive (e.g., monitoring your own binding in a public-key directory) and minimizing server costs is a priority, Catena could be better suited. However, when server costs are not a concern (e.g., costs can be shifted to users), Ethereum-based approaches like EthIKS could be better suited.

### Conclusion

We design and implement Catena, an append-only log that is as hard to fork as the Bitcoin blockchain but efficient to verify by thin clients such as mobile phones. Specifically, in Catena, an attacker can equivocate if and only if they can double spend Bitcoin transactions, which is notoriously difficult due to Bitcoin’s proof-of-work consensus. The key idea behind Catena is to chain OP_RETURN transactions together by having a new transaction spend the previous one, making equivocation in the log as hard as double spending in Bitcoin.

Catena can be used to prevent equivocation in key transparency schemes, paving the way for more trustworthy public-key directories. It can also serve as a public log for Tor Consensus Transparency [13], a software transparency scheme to prevent malicious software updates, or a consensus log for mutually distrusting participants. Catena’s overheads are small; clients only need to download 80-byte block headers and 600-byte statements, a significant improvement over previous blockchain-based transparency schemes [14, 15, 24], which currently require auditors to download 90 GB of blockchain data [19]. We develop a prototype of Catena in Java and apply it to CONIKS, a key transparency scheme, demonstrating Catena’s feasibility. Next, we plan to extend our prototype to scale for popular applications.

Our primary motivation for designing Catena is to prevent equivocation in compromised online services. In this sense, we believe Catena can bring Bitcoin’s non-equivocation guarantees to many important applications today. Specifically, we hope Catena can be adopted by secure messaging apps such as Signal [99] or public-key directories such as Keybase [14], providing end users with stronger guarantees about non-equivocation.

### Acknowledgment

We would like to thank our shepherd, Jay Lorch, and the anonymous reviewers for their insightful comments that helped improve this paper. We would also like to thank Conner Fromknecht, Albert Kwon, Ilia Lebedev, Neha Narula, Ling Ren, and the MIT Digital Currency Initiative for the many productive conversations that shaped and improved this work.

### References

[1] A. J. Feldman, A. Blankstein, M. J. Freedman, and E. W. Felten, “Social Networking with Frientegrity: Privacy and Integrity with an Untrusted Provider,” in 21st USENIX Security Symposium (USENIX Security ’12). Berkeley, CA, USA: USENIX Association, 2012, pp. 647–662.
[2] M. S. Melara, A. Blankstein, J. Bonneau, E. W. Felten, and M. J. Freedman, “Bringing Deployable Key Transparency to End Users,” in 24th USENIX Security Symposium (USENIX Security ’15). Berkeley, CA, USA: USENIX Association, Aug. 2015, pp. 383–398.
[3] A. Niemann and J. Brendel, “A Survey on CA Compromises,” https://www.cdc.informatik.tu-darmstadt.de/fileadmin/user_upload/GroupCDC/Documents/Lehre/SS13/Seminar/CPS/cps2014_submission_8.pdf, Accessed: 2016-05-15.
[4] A. Langley, “Further Improving Digital Certificate Security,” https://googleonlinesecurity.blogspot.com.au/2013/12/further-improving-digital-certificate.html, Accessed: 2015-11-06.
[5] R. Mandalia, “Security Breach in CA Networks - Comodo, DigiNotar, GlobalSign,” http://blog.isc2.org/isc2_blog/2012/04/test.html, Accessed: 2015-08-22.
[6] A. Langley, “Enhancing Digital Certificate Security,” https://googleonlinesecurity.blogspot.co.uk/2013/01/enhancing-digital-certificate-security.html, Accessed: 2015-11-06.
[7] D. O’Brien, “Web Users in the United Arab Emirates Have More to Worry About Than Having Just Their BlackBerries Cracked,” http://www.slate.com/articles/technology/webhead/2010/08/the_internets_secret_back_door.html, Accessed: 2015-08-22.
[8] H. Adkins, “An Update on Attempted Man-in-the-Middle Attacks,” https://googleonlinesecurity.blogspot.com/2011/08/update-on-attempted-man-in-middle.html, Accessed: 2015-08-22.
[9] C. Soghoian and S. Stamm, “Certified Lies: Detecting and Defeating Government Interception Attacks Against SSL (Short Paper),” in Financial Cryptography and Data Security (FC 2011). Berlin, Heidelberg: Springer-Verlag, 2012, pp. 250–259.
[10] B. Laurie, A. Langley, and E. Kasper, “RFC: Certificate Transparency,” http://tools.ietf.org/html/rfc6962, Accessed: 2015-05-13.
[11] L. Chuat, P. Szalachowski, A. Perrig, B. Laurie, and E. Messeri, “Efficient Gossip Protocols for Verifying the Consistency of Certificate Logs,” in Communications and Network Security (CNS), 2015 IEEE Conference on, Sept 2015, pp. 415–423.
[12] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The Second-Generation Onion Router,” in 13th USENIX Security Symposium (USENIX Security ’04). Berkeley, CA, USA: USENIX Association, 2004.
[13] L. Nordberg, “Tor Consensus Transparency, Take Two,” http://archives.seul.org/tor/dev/Feb-2016/msg00099.html, Accessed: 2016-05-23.
[14] Keybase.io, “Keybase,” http://keybase.io, Accessed: 2016-05-15.
[15] M. Ali, J. Nelson, R. Shea, and M. J. Freedman, “Blockstack: A Global Naming and Storage System Secured by Blockchains,” in 2016 USENIX Annual Technical Conference (USENIX ATC 16). USENIX Association, Jun. 2016, pp. 181–194.
[16] J. Li, M. Krohn, D. Mazières, and D. Shasha, “Secure Untrusted Data Repository (SUNDR),” in Proceedings of the 6th Conference on Symposium on Operating Systems Design & Implementation (OSDI ’04). Berkeley, CA, USA: USENIX Association, 2004.
[17] E. Syta, I. Tamas, D. Visher, D. I. Wolinsky, P. Jovanovic, L. Gasser, N. Gailly, I. Khoffi, and B. Ford, “Keeping Authorities ‘Honest or Bust’ with Decentralized Witness Cosigning,” in 2016 IEEE Symposium on Security and Privacy, May 2016, pp. 526–545.
[18] S. Nakamoto, “Bitcoin: A Peer-to-Peer Electronic Cash System,” https://bitcoin.org/bitcoin.pdf, 2008, Accessed: 2017-03-08.
[19] Blockchain.info, “Bitcoin Blockchain Size Over Time,” https://blockchain.info/charts/blocks-size, Accessed: 2016-11-11.
[20] S. A. Crosby and D. S. Wallach, “Efficient Data Structures for Tamper-Evident Logging,” in 18th USENIX Security Symposium (USENIX Security ’09). Berkeley, CA, USA: USENIX Association, 2009, pp. 317–334.
[21] Bitcoin.org, “Null Data (OP RETURN) Transaction,” https://bitcoin.org/en/glossary/null-data-transaction, Accessed: 2016-10-13.
[22] B. Walling, “Use OP RETURN to Store Merkle Root in Bitcoin Blockchain,” https://github.com/keybase/keybase-issues/issues/1104, Accessed: 2016-05-23.
[23] M. Hearn, “BitcoinJ,” https://bitcoinj.github.io/, Accessed: 2016-10-10.
[24] J. Nelson, M. Ali, R. Shea, and M. J. Freedman, “Extending Existing Blockchains with Virtualchain,” https://www.zurich.ibm.com/dccl/