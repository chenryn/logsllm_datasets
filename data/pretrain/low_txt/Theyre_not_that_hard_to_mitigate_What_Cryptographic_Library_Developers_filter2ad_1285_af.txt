Despite selecting a subset of well-known tools from the wide variety available, 25% of the developers who responded to our survey were unfamiliar with any of them. Some developers learned about these tools through our survey. The fact that only 38.6% of the respondents actually use any of these tools indicates limited adoption. This can be partially attributed to the relative newness of the tools, as most are less than five years old. However, several other factors may also contribute to this limited adoption: the tools may be research prototypes that are difficult to install, not available, or not maintained; they may lack evaluations on popular cryptographic libraries, raising concerns about applicability and scalability; they may be computationally intensive, making their use in Continuous Integration (CI) unlikely; and they may not be published in venues focused on cryptographic engineering.

In addition to the specific recommendations from the previous section, we recommend the following for the community of tool developers:

1. **Public Availability and Ease of Installation**: Make tools publicly available, easy to install, and well-documented. Ideally, provide tutorials targeted at cryptographic developers. Simplifying installation by providing Linux distribution packages can lower the barrier to adoption.
   
2. **Detailed Evaluations on Modern Libraries**: Publish detailed evaluations on modern open-source libraries, using or creating a common set of benchmarks. Supercop [79] is one such established benchmark.

3. **Efficient Analysis of Constant-Timeness**: Focus on efficient analysis of constant-timeness rather than computationally expensive analysis of quantitative properties, which seem to be of lesser interest. Tools should be fast enough to be used in CI settings.

4. **Support for Inline Assembly and Binaries**: Ensure that tools can work with code containing inline assembly and generated binaries, making them fully usable by all developers.

5. **Promotion in Relevant Venues**: Promote their work in venues attended by cryptographic engineers, such as CHES, RWC, and HACS.

Ultimately, we recommend that tool developers follow Reid et al.’s recent advice to "meet developers where they are" [71].

### B. Compiler Writers

Developers are highly concerned that compilers may convert constant-time code into non-constant-time code. To avoid this, developers often use (inlined) assembly for writing primitives. While this approach guarantees that the compiler will not introduce constant-time violations, it negatively affects portability and complicates analysis. To integrate constant-time analysis more smoothly into the developer workflow, we recommend that compiler writers:

1. **Improve Data Carrying Mechanisms**: Enhance mechanisms to carry additional data along the compilation pipeline, which may be needed by constant-time verification tools. This would allow cryptographic library developers to tag secrets in source code and use constant-time analysis tools at intermediate or binary levels.

2. **Support Secret Types**: Support secret types, as used by most constant-time analyses, throughout the compilation process. Modify compiler passes so that they do not introduce constant-time violations and prove the preservation of the constant-time property for their compilers. This would enable cryptographic library developers to focus solely on their source code.

3. **Offer More Control to Security Developers**: Provide security developers with more control over the compiler, ensuring that code snippets implementing countermeasures (e.g., replacing branching statements on booleans with conditional moves) are compiled securely.

### C. Cryptographic Library Developers

Cryptographic library developers are aware of timing attacks and generally consider them part of their threat model. To eliminate timing attacks, we recommend that library developers:

1. **Use Information Flow Analysis Tools**: Utilize tools that check for information flow from secrets into branch conditions, memory addresses, or variable-time arithmetic. Ideally, integrate the use of such tools into regular continuous-integration testing. If this is too costly, systematically apply these tools for every release of the library.

2. **Eliminate All Timing Leaks**: Address all timing leaks, even if it is not immediately obvious how to exploit them. Attacks only get better, and many past devastating timing attacks exploited known leakages with slightly more sophisticated techniques.

3. **Clearly Document API Function Inputs**: Clearly state which API function inputs are considered public or secret. With a suitable type system, this information becomes part of the input types. Until mainstream programming languages support such distinctions, this information needs to be consistently documented. This makes it easier to use tools for automated analysis and reduces the risk of misuse due to misunderstandings about protected inputs.

### D. Standardization Bodies

A recent paper [8] advocates for the importance of adopting tools in cryptographic competitions, standardization processes, and certifications. We recommend that submitters be strongly encouraged to use automated tools for analyzing constant-timeness, and that evaluators gradually increase their requirements as constant-time analysis technology matures. Standardization bodies should aim to avoid the use of cryptographic algorithms that leak timing information. For example, the Dragonfly Password Authenticated Scheme used in WPA3 by the Wi-Fi Alliance has been found to have many timing attacks [80], [81] due to timing information leaks. However, many deterministic algorithms with no leaks are known [82].

### VI. Conclusion

We have collected data from 44 developers of 27 cryptographic libraries and analyzed it to better understand the gap between the theory and practice of constant-time programming. One key finding from our survey is that developers are highly aware of and concerned by timing attacks but currently seldom use analysis tools to ensure their code is constant-time. While constant-time testing may not be the top priority for cryptographic developers, it should become best practice. We believe this is only feasible by making tools more usable, supporting current workflows, requiring minimal overhead, and providing easy-to-understand outputs.

Based on our survey, we have identified recommendations for tool developers, compiler writers, cryptographic library developers, and standardization bodies. We hope these communities will adopt our recommendations and collectively contribute to the emergence of a new generation of open-source cryptographic libraries with strong mathematical guarantees. Although our recommendations are stated for timing attacks, many of them remain valid in the broader context of high-assurance cryptography. In particular, our findings are directly applicable to ongoing efforts to protect against micro-architectural side channels, as summarized in [60]. Another interesting topic would be a quantitative analysis of the usability of some of the better-known tools collected in this study to gain insight into the exact magnitude of the mentioned usability problems.

### Acknowledgements

This work was supported by the European Commission through the ERC Starting Grant 805031 (EPOQUE). J. Jancar was supported by the Czech Science Foundation project GA20-03426S and Red Hat Czech. Daniel De Almeida Braga is funded by the Direction Générale de l’Armement (Pôle de Recherche CYBER).

### References

[1] P. C. Kocher, “Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems,” in Advances in Cryptology – CRYPTO'96, ser. LNCS, N. Koblitz, Ed., vol. 1109. Springer, 1996, pp. 104–113. [Online]. Available: http://www.cryptography.com/public/pdf/TimingAttacks.pdf

[2] D. Brumley and D. Boneh, “Remote timing attacks are practical,” in 12th USENIX Security Symposium - Volume 12. ACM, 2003. [Online]. Available: https://www.usenix.org/legacy/publications/library/proceedings/sec03/tech/brumley/brumley.pdf

[3] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-VM side channels and their use to extract private keys,” in the ACM Conference on Computer and Communications Security, CCS’12, T. Yu, G. Danezis, and V. D. Gligor, Eds. ACM, 2012, pp. 305–316. [Online]. Available: https://doi.org/10.1145/2382196.2382230

[4] NIST, “Submission requirements and evaluation criteria for post-quantum cryptography standardization,” CSRC/media/Projects/Post-Quantum-Cryptography/documents/call-for-proposals-final-dec-2016.pdf, 2016. [Online]. Available: https://csrc.nist.gov/

[5] M. Azouaoui, D. Bellizia, I. Buhan, N. Debande, S. Duval, C. Giraud, É. Jaulmes, F. Koeune, E. Oswald, F. Standaert, and C. Whitnall, “A systematic appraisal of side channel evaluation strategies,” in Security Standardisation Research - 6th International Conference, SSR 2020, London, UK, November 30 - December 1, 2020, Proceedings, ser. Lecture Notes in Computer Science, T. van der Merwe, C. J. Mitchell, and M. Mehrnezhad, Eds., vol. 12529. Springer, 2020, pp. 46–66. [Online]. Available: https://doi.org/10.1007/978-3-030-64357-7_3

[6] A. Langley. (2010) ctgrind. [Online]. Available: https://github.com/agl/ctgrind

[7] J. Jancar. (2021) The state of tooling for verifying constant-timeness of cryptographic implementations. [Online]. Available: https://neuromancer.sk/article/26

[8] M. Barbosa, G. Barthe, K. Bhargavan, B. Blanchet, C. Cremers, K. Liao, and B. Parno, “SoK: Computer-aided cryptography,” IACR Cryptol. ePrint Arch., vol. 2019, p. 1393, 2019. [Online]. Available: https://eprint.iacr.org/2019/1393

[9] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre attacks: Exploiting speculative execution,” in 40th IEEE Symposium on Security and Privacy (S&P’19), 2019.

[10] Y. Tsunoo, E. Tsujihara, K. Minematsu, and H. Miyauchi, “Cryptanalysis of block ciphers implemented on computers with cache,” in Proceedings of the International Symposium on Information Theory and Its Applications, ISITA 2002, 2002, pp. 803–806.

[11] Y. Tsunoo, T. Saito, T. Suzaki, M. Shigeri, and H. Miyauchi, “Cryptanalysis of DES implemented on computers with cache,” in Cryptographic Hardware and Embedded Systems – CHES 2003, ser. LNCS, vol. 2779. Springer, 2003, pp. 62–76.

[12] D. J. Bernstein, “Cache-timing attacks on AES,” 2005, http://cr.yp.to/antiforgery/cachetiming-20050414.pdf.

[13] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and countermeasures: the case of AES,” in Topics in Cryptology – CT-RSA 2006, ser. LNCS, vol. 3860. Springer, 2006, pp. 1–20.

[14] B. Canvel, A. P. Hiltgen, S. Vaudenay, and M. Vuagnoux, “Password interception in a SSL/TLS channel,” in Advances in Cryptology - CRYPTO 2003, 23rd Annual International Cryptology Conference, ser. NCS, D. Boneh, Ed., vol. 2729. Springer, 2003, pp. 583–599. [Online]. Available: https://doi.org/10.1007/978-3-540-45146-4_34

[15] B. B. Brumley and N. Tuveri, “Remote timing attacks are still practical,” in Computer Security—ESORICS 2011, ser. LNCS, V. Atluri and C. Diaz, Eds., vol. 6879. Springer, 2011, pp. 355–371, http://eprint.iacr.org/2011/232/.

[16] N. J. A. Fardan and K. G. Paterson, “Lucky thirteen: Breaking the TLS and DTLS record protocols,” in 2013 IEEE Symposium on Security and Privacy (SP). IEEE, 2013, pp. 526–540, http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6547131.

[17] M. R. Albrecht and K. G. Paterson, “Lucky microseconds: A timing attack on Amazon’s s2n implementation of TLS,” in Advances in Cryptology – EUROCRYPT 2016, ser. LNCS, M. Fischlin and J.-S. Coron, Eds., vol. 9665. [Online]. Available: https://eprint.iacr.org/2015/1129. Springer, 2016, pp. 622–643.

[18] E. Brickell, “Technologies to improve platform security,” Invited talk at CHES 2011, 2011. [Online]. Available: https://www.iacr.org/workshops/ches/ches2011/presentations/Invited%201/CHES2011_Invited_1.pdf

[19] Y. Yarom, D. Genkin, and N. Heninger, “Cachebleed: a timing attack on OpenSSL constant-time RSA,” J. Cryptogr. Eng., vol. 7, no. 2, pp. 99–112, 2017. [Online]. Available: https://doi.org/10.1007/s13389-017-0152-y

[20] T. Kaufmann, H. Pelletier, S. Vaudenay, and K. Villegas, “When constant-time source yields variable-time binary: Exploiting curve25519-donna built with MSVC 2015,” in Cryptology and Network Security, ser. LNCS, S. Foresti and G. Persiano, Eds., vol. 10052. [Online]. Available: https://infoscience.epfl.ch/record/223794/files/32_1.pdf. Springer, 2016, pp. 573–582.

[21] J. Jancar, V. Sedlacek, P. Svenda, and M. Sýs, “Minerva: The curse of ECDSA nonces; systematic analysis of lattice attacks on noisy leakage of bit-length of ECDSA nonces,” IACR Trans. Cryptogr. Hardw. Embed. Syst., vol. 2020, no. 4, pp. 281–308, 2020. [Online]. Available: https://doi.org/10.13154/tches.v2020.i4.281-308

[22] L. G. Bruinderink, A. Hülsing, T. Lange, and Y. Yarom, “Flush, Gauss, and Reload – a cache attack on the BLISS lattice-based signature scheme,” in Cryptographic Hardware and Embedded Systems – CHES 2016, ser. LNCS, B. Gierlichs and A. Poschmann, Eds., vol. 9813. Springer, 2016, pp. 323–345, https://eprint.iacr.org/2016/300/.

[23] P. Pessl, L. G. Bruinderink, and Y. Yarom, “To BLISS-B or not to be – attacking strongSwan’s implementation of post-quantum signatures,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS’17. ACM, 2017, https://eprint.iacr.org/2017/490/.

[24] G. Barthe, S. Belaïd, T. Espitau, P. Fouque, M. Rossi, and M. Tibouchi, “GALACTICS: Gaussian sampling for lattice-based constant-time implementation of cryptographic signatures, revisited,” in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019. ACM, 2019, pp. 2147–2164. [Online]. Available: https://doi.org/10.1145/3319535.3363223

[25] T. B. Paiva and R. Terada, “A timing attack on the HQC encryption scheme,” in Selected Areas in Cryptography – SAC 2019, ser. LNCS, K. G. Paterson and D. Stebila, Eds., vol. 11959. Springer, 2019, pp. 551–573. [Online]. Available: https://www.ime.usp.br/~tpaiva/papers/PaivaTerada_SAC2019_a_timing_attack_against_hqc.pdf

[26] G. Wafo-Tapa, S. Bettaieb, L. Bidoux, P. Gaborit, and E. Marcatel, “A practicable timing attack against HQC and its countermeasure,” Advances in Mathematics of Computation, 2020. [Online]. Available: http://dx.doi.org/10.3934/amc.2020126

[27] Q. Guo, T. Johansson, and A. Nilsson, “A key-recovery timing attack on post-quantum primitives using the Fujisaki-Okamoto transformation and its application on FrodoKEM,” in Advances in Cryptology – CRYPTO 2020, ser. LNCS, D. Micciancio and T. Ristenpart, Eds., vol. 12171. Springer, 2020, pp. 359–386. [Online]. Available: https://eprint.iacr.org/2020/743

[28] D. Mayer and J. Sandin, “Time Trial: Racing Towards Practical Remote Timing Attacks,” NCC Group, Tech. Rep., 2014, available at https://www.nccgroup.trust/globalassets/our-research/us/whitepapers/TimeTrial.pdf.

[29] O. Reparaz, J. Balasch, and I. Verbauwhede, “Dude, is my code constant time?” in Design, Automation & Test in Europe Conference & Exhibition, DATE 2017, Lausanne, Switzerland, March 27-31, 2017, D. Atienza and G. D. Natale, Eds. IEEE, 2017, pp. 1697–1702. [Online]. Available: https://doi.org/10.23919/DATE.2017.7927267

[30] L. Daniel, S. Bardin, and T. Rezk, “Binsec/rel: Efficient relational symbolic execution for constant-time at binary-level,” in 2020 IEEE Symposium on Security and Privacy, SP 2020, San Francisco, CA, USA, May 18-21, 2020. IEEE, 2020, pp. 1021–1038. [Online]. Available: https://doi.org/10.1109/SP40000.2020.00074

[31] S. Blazy, D. Pichardie, and A. Trieu, “Verifying constant-time implementations by abstract interpretation,” in Computer Security - ESORICS 2017 - 22nd European Symposium on Research in Computer Security, Oslo, Norway, September 11-15, 2017, Proceedings, Part I, ser. LNCS, S. N. Foley, D. Gollmann, and E. Snekkenes, Eds., vol. 10492. Springer, 2017, pp. 260–277. [Online]. Available: https://doi.org/10.1007/978-3-319-66402-6_16

[32] S. Wang, P. Wang, X. Liu, D. Zhang, and D. Wu, “Cached: Identifying cache-based timing channels in production,” in 2020 USENIX Security Symposium, USENIX Security 2020. USENIX Association, 2020.