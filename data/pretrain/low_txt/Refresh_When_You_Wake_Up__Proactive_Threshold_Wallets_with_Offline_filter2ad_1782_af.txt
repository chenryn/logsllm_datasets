### VIII. Protocol Overview

Along with the corresponding epoch, the seed is distributed to offline parties along with these values. If the signature using \( R \) is used to signal a refresh, then the seed is expanded by every pair of parties to produce the necessary random value, \( \text{rand} \). The complete protocol is provided in the full version of this paper for completeness.

### IX. Performance and Implementation

This section discusses the concrete overhead that our refresh protocol adds to existing state-of-the-art threshold ECDSA schemes, as most cryptocurrencies (e.g., Bitcoin, Ethereum) use ECDSA as their canonical signature scheme. Specifically, we observe that in the protocols of Lindell et al. [6], Doerner et al. [7], and Gennaro and Goldfeder [5], the additional messages required by our refresh protocol, \( \pi_{(2,n)}^{\rho-\text{sign}} \), can be sent in parallel with the main ECDSA protocols. Each \( \pi_R^{\text{ECDSA}} \) has at least two rounds, which can be used to generate \( K \) and \( \delta \) in parallel. Each \( \pi_\sigma^{\text{ECDSA}} \) has at least one round before \( \sigma \) is released, during which \( z \) can be constructed and verified.

#### A. Cost Analysis

Table I summarizes the costs of the combined protocols of Doerner et al. [7] and Lindell et al. [6] (OT-based) and the overhead induced by \( \pi_{(2,n)}^{\rho-\text{sign}} \).

| Protocol              | Lindell et al. [6] | Doerner et al. [7] | \( \pi_{(2,n)}^{\rho-\text{sign}} \) Overhead |
|-----------------------|--------------------|--------------------|---------------------------------------------|
| Communication (Comm.) | 195 KiB            | 118 KiB            | 192 Bytes                                   |
| EC Multiplications    | 239                | 6                  | 6                                           |
| Rounds                | 8                  | 7                  | 0                                           |

**Table I:** Overhead of applying \( \pi_{(2,n)}^{\rho-\text{sign}} \) to proactivize (2, n) ECDSA protocols instantiated with 256-bit curves. Figures are per-party and do not include the cost of implementing proactive channels to communicate 160 bytes to each offline party every refresh.

The update procedure, \( \pi_{(2,n)}^{\rho-\text{update}} \), first requires reading the blockchain and scanning for signatures under the common public key since the last awake period—essentially the same operation required to update the balance of funds available in a wallet. Additionally, one must read messages received while offline and perform two curve multiplications for each missed refresh.

#### B. Implementation

To demonstrate the compatibility and efficiency of our refresh procedure, we implemented it to augment two recent threshold ECDSA protocols: those of Doerner et al. [7] and Gennaro and Goldfeder [5]. We present the results in this section.

We ran both sets of experiments on Amazon’s AWS EC2 using a pair of t3.small machines located in the same datacenter for uniformity. However, since the implementations of the base threshold ECDSA protocols came from different codebases, the important metric is the overhead added by our protocol in each case. Comparisons of the concrete times across the ECDSA protocols may not be meaningful.

1. **Proactivizing Doerner et al. [7]:**

   As Doerner et al. natively utilize OT-based multipliers, augmenting their threshold ECDSA signing with our refresh procedure yields a fully proactivized ECDSA wallet. We conducted three experiments, measuring wall-clock time, including latency costs, and collected 100,000 samples, averaging them. The unmodified signing protocol took an average of 5.303 ms to produce a signature. When augmented with our refresh generation procedure (\( \pi_{(2,n)}^{\rho-\text{sign}} \)), it took an average of 6.587 ms, representing a 24.2% increase. The cost of applying an update upon waking up (\( \pi_{(2,n)}^{\rho-\text{update}} \)) was 0.381 ms. This figure does not account for the costs of the proactive channels or GLedger, which is done anyway to update one's balance. The benchmark demonstrates the efficiency of applying updates in isolation.

2. **Gennaro and Goldfeder [5]:**

   To understand the overhead added by the refresh procedure to the communication pattern of a different (2, n) ECDSA-based wallet, we implemented the protocol of Gennaro and Goldfeder [5] and augmented it with our refresh procedure during signing. Note that their protocol uses a Paillier-based multiplier, which we did not proactivize (see Canetti et al. [22] for how this can be done). The cost of proactivizing an OT-based multiplier is negligible (0.381 ms as shown previously). This is representative of the (2, 3) cold storage application where the multipliers need not be offline-refreshed. We refer to the original (πRρ-sign) as GG and the augmented π(2,n)ρ-sign as GG'.

   We did not implement forward-secure channels, instead simulating them with reads from disk. We collected twenty samples for each configuration and found the average execution time of GG to be 1.433 s and that of GG' to be 1.635 s. In particular, π(2,n)ρ-sign incurs a 14.09% overhead in computation. This figure does not include network latency, but in the LAN setting, the measurements were within the margin of error.

   The code for the experiments will be released in the full version of this manuscript.

### X. General (t, n) Impossibility

In Section IV-A, we showed that an honest majority protocol is easy to construct. For the rest of the discussion, we assume a setting where there is no online honest majority.

Many proactive secret sharing protocols in the literature have followed a similar approach: the refresh protocol runs roughly the same protocol used to share the secret, incorporating new randomness to create an independent sharing of the same value. Therefore, the ability to run verifiable secret sharing (VSS) in a given setting has always translated well to constructing a refresh protocol for the same setting. Non-interactive VSS, where only \( t \) online parties speak, with resiliency to \( t-1 \) corruptions, are known in the literature [50], [51], suggesting that their translation to our setting would yield an offline refresh protocol.

Unfortunately, this intuition turns out to be false. Recall that a central principle in offline refresh is that all (honest) parties must agree on whether to progress to the next epoch, i.e., "unanimous erasure." We discussed in Section III why anything less than this is undesirable, as even a simple network failure could induce permanent loss of the shared secret. However, even this notion turns out to require the power of an honest majority to realize (barring the (2, n) case), and we provide intuition below.

Recall that the refresh protocol \( \pi_\rho \) is run by \( t_\rho \) online parties, of whom \( t-1 \) may be corrupt. We define \( h = t_\rho - t + 1 \) to denote the number of honest parties. Assume the weakest form of dishonest majority, i.e., one more corrupt party than honest, so \( h = t-2 \). The communication pattern of a single refresh phase is as follows: the online parties run \( \pi_\rho \), following which each online party sends a message to each of the offline parties, who, upon waking up, will be able to catch up to the same epoch. The unanimous erasure property requires that all honest parties stay in agreement about the epoch; i.e., no one party is falsely convinced to prematurely erase their old state. Informally, we call a message or set of messages "convincing" if they induce an offline party to progress to the next epoch and erase their old state.

**Relating Unanimous Erasure to \( \pi_\rho \):** It is instructive to view \( \pi_\rho \) as an MPC protocol to produce a convincing message for offline parties to progress. As we mandate unanimous erasure, it must never be the case that \( \pi_\rho \) permits an adversary to produce a convincing message while depriving online honest parties of it. In particular, if \( \pi_\rho \) produces a convincing message, it must be visible and verifiable within the online honest parties' joint view (i.e., any subset of size \( h \)). Otherwise, an adversary could at its discretion choose to induce an offline party to prematurely erase its state, and honest parties would not be able to tell either way. This property strongly suggests that \( \pi_\rho \) must achieve a form of fairness, which does not bode well given that it must tolerate a dishonest majority.

**A General Attack:** Now, we focus on exactly how an adversary can exploit the above facts. Assume that \( P_{\text{off}} \) is an offline party. Observe that the adversary is allowed to corrupt \( h+1 \) parties given the dishonest majority setting, and so it has the budget to keep \( h \) online parties corrupt as well as corrupt \( P_{\text{off}} \) initially, say in epoch 0. The adversary uncorrupts \( P_{\text{off}} \) and \( \pi_\rho \) is run successfully to move the system to epoch 1, keeping \( h \) parties corrupt (but behaving honestly) through the process. Now recall that the convincing message to \( P_{\text{off}} \) will be visible to any \( h \) online parties. Since the adversary has both the state of \( P_{\text{off}} \) from epoch 0 and a "convincing message" addressed to \( P_{\text{off}} \) by virtue of corrupting \( h \) parties during \( \pi_\rho \), it is able to derive \( P_{\text{off}} \)'s refreshed state for epoch 1 despite not corrupting \( P_{\text{off}} \) in that epoch. Now, simply corrupting one additional party in epoch 1 completely reveals the secret, as \( h+2 = t \) parties' private states are available to the adversary for that epoch.

We delegate the formal theorem and proof to Appendix A. This closes the question of the gap between an honest and a dishonest majority of corruptions in the setting of offline refresh.

### XI. Acknowledgment

Research supported by:
- The Concordium Blockchain Research Center (COBRA), Aarhus University, Denmark
- The Carlsberg Foundation under the Semper Ardens Research Project CF18-112 (BCM)
- The European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme under grant agreement No 803096 (SPEC)
- The Danish Independent Research Council under Grant-ID DFF-6108-00169 (FoCC)
- The Office of the Director of National Intelligence (ODNI), Intelligence Advanced Research Project Activity (IARPA) under contract number 2019-19-020700009 (ACHILLES)

### References

[1] Y. Desmedt, “Society and group oriented cryptography: A new concept,” in CRYPTO, 1987.
[2] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, “Robust threshold DSS signatures,” Inf. Comput., vol. 164, no. 1, pp. 54–84, 2001. [Online]. Available: https://doi.org/10.1006/inco.2000.2881
[3] J. F. Almansa, I. Damgård, and J. B. Nielsen, “Simplified threshold RSA with adaptive and proactive security,” in EUROCRYPT ’06, 2006.
[4] V. Shoup, “Practical threshold signatures,” in EUROCRYPT’00, 2000.
[5] R. Gennaro and S. Goldfeder, “Fast multiparty threshold ECDSA with fast trustless setup,” in ACM CCS 2018, 2018.
[6] Y. Lindell, A. Nof, and S. Ranellucci, “Fast secure multiparty ECDSA with practical distributed key generation and applications to cryptocurrency custody,” IACR Cryptology ePrint Archive, vol. 2018, p. 987, 2018. [Online]. Available: https://eprint.iacr.org/2018/987
[7] J. Doerner, Y. Kondi, E. Lee, and a. shelat, “Threshold ECDSA from ECDSA assumptions: The multiparty case,” in IEEE S&P, 2019.
[8] A. Dalskov, M. Keller, C. Orlandi, K. Shrishak, and H. Shulman, “Securing DNSSEC keys via threshold ECDSA from generic MPC,” Cryptology ePrint Archive, Report 2019/889, 2019, https://eprint.iacr.org/2019/889.
[9] G. Castagnos, D. Catalano, F. Laguillaumie, F. Savasta, and I. Tucker, “Bandwidth-efficient threshold EC-DSA,” in Public-Key Cryptography - PKC 2020, A. Kiayias, M. Kohlweiss, P. Wallden, and V. Zikas, Eds., 2020.
[10] C.-P. Schnorr, “Efficient identification and signatures for smart cards,” in CRYPTO, 1989.
[11] D. J. Bernstein, N. Duif, T. Lange, P. Schwabe, and B.-Y. Yang, “High-speed high-security signatures,” Journal of Cryptographic Engineering, vol. 2, no. 2, pp. 77–89, Sep 2012.
[12] R. Ostrovsky and M. Yung, “How to withstand mobile virus attacks (extended abstract),” in PODC ’91, 1991.
[13] Y. Frankel, P. Gemmell, P. D. MacKenzie, and M. Yung, “Proactive RSA,” in CRYPTO ’97, B. S. Kaliski, Ed., 1997.
[14] R. Canetti, “Universally composable security: A new paradigm for cryptographic protocols,” in FOCS, 2001.
[15] D. Beaver, “Precomputing oblivious transfer,” in CRYPTO ’95, 1995, pp. 97–109.
[16] A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung, “Proactive secret sharing or: How to cope with perpetual leakage,” in CRYPTO ’95, 1995.
[17] A. Herzberg, M. Jakobsson, S. Jarecki, H. Krawczyk, and M. Yung, “Proactive public key and signature systems,” in ACM CCS ’97, 1997.
[18] C. Cachin, K. Kursawe, A. Lysyanskaya, and R. Strobl, “Asynchronous verifiable secret sharing and proactive cryptosystems,” in ACM CCS 2002, 2002.
[19] S. K. D. Maram, F. Zhang, L. Wang, A. Low, Y. Zhang, A. Juels, and D. Song, “CHURP: dynamic-committee proactive secret sharing,” in ACM CCS 2019, 2019.
[20] V. Nikov and S. Nikova, “On proactive secret sharing schemes,” in Selected Areas in Cryptography, H. Handschuh and M. A. Hasan, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2005, pp. 308–325.
[21] R. Canetti, S. Halevi, and A. Herzberg, “Maintaining authenticated communication in the presence of break-ins,” J. Cryptology, vol. 13, no. 1, pp. 61–105, 2000.
[22] R. Canetti, N. Makriyannis, and U. Peled, “UC non-interactive, proactive, threshold ECDSA,” Cryptology ePrint Archive, Report 2020/492, 2020, https://eprint.iacr.org/2020/492.
[23] F. Benhamouda, C. Gentry, S. Gorbunov, S. Halevi, H. Krawczyk, C. Lin, T. Rabin, and L. Reyzin, “Can a blockchain keep a secret?” Cryptology ePrint Archive, Report 2020/464, 2020, https://eprint.iacr.org/2020/464.
[24] V. Goyal, A. Kothapalli, E. Masserova, B. Parno, and Y. Song, “Storing and retrieving secrets on a blockchain,” Cryptology ePrint Archive, Report 2020/504, 2020, https://eprint.iacr.org/2020/504.
[25] K. Eldefrawy, R. Ostrovsky, S. Park, and M. Yung, “Proactive secure multiparty computation with a dishonest majority,” in Security and Cryptography for Networks SCN 2018, 2018.
[26] A. Kiayias, H. Zhou, and V. Zikas, “Fair and robust multi-party computation using a global transaction ledger,” in EUROCRYPT 2016, 2016, pp. 705–734.
[27] J. A. Garay, A. Kiayias, and N. Leonardos, “The Bitcoin backbone protocol: Analysis and applications,” in EUROCRYPT 2015, 2015.
[28] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Cryptography Mailing list at https://metzdowd.com, 03 2009.
[29] G. Wood, “Ethereum: A secure decentralised generalised transaction ledger.”
[30] C. Dwork, N. A. Lynch, and L. J. Stockmeyer, “Consensus in the presence of partial synchrony,” J. ACM, vol. 35, no. 2, 1988.
[31] S. Micali, “Algorand: The efficient and democratic ledger,” 07 2016.
[32] B. David, P. Gazi, A. Kiayias, and A. Russell, “Ouroboros Praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain,” in EUROCRYPT 2018, 2018, pp. 66–98.
[33] J. Chen and S. Micali, “Algorand: A secure and efficient distributed ledger,” Theor. Comput. Sci., vol. 777, pp. 155–183, 2019.
[34] C. Badertscher, U. Maurer, D. Tschudi, and V. Zikas, “Bitcoin as a transaction ledger: A composable treatment,” in CRYPTO 2017, 2017, pp. 324–356.
[35] R. Cleve, “Limits on the security of coin flips when half the processors are faulty,” in STOC ’86, 1986.
[36] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias, “Multiparty computation from somewhat homomorphic encryption,” in CRYPTO 2012, ser. Lecture Notes in Computer Science, 2012.
[37] M. Keller, E. Orsini, and P. Scholl, “MASCOT: Faster malicious arithmetic secure computation with oblivious transfer,” in ACM CCS 2016, 2016.
[38] M. Fitzi, D. Gottesman, M. Hirt, T. Holenstein, and A. D. Smith, “Detectable Byzantine agreement secure against faulty majorities,” in ACM PODC 2002, 2002.
[39] S. Goldwasser and Y. Lindell, “Secure multi-party computation without agreement,” J. Cryptology, vol. 18, no. 3, pp. 247–287, 2005.
[40] M. Marlinspike and T. Perrin, “The double ratchet algorithm, 11 2016,” in https://signal.org/docs/specifications/x3dh/x3dh.pdf.
[41] J. Alwen, S. Coretti, and Y. Dodis, “The double ratchet: Security notions, proofs, and modularization for the Signal protocol,” in EUROCRYPT 2019, 2019, pp. 129–158.
[42] M. C. Pease, R. E. Shostak, and L. Lamport, “Reaching agreement in