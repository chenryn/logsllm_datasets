### Mediation Overhead and Performance Analysis

The mediation process was found to be lightweight, with an overhead of only 5%. However, a more significant delay was observed when the Inline Reference Monitor (IRM) controlled the JavaScript code invoked by Flash, which increased the overhead to 134%. Further investigation revealed that this overhead was primarily due to the use of `eval` by the IRM to wrap the injected code, as detailed in Section 4.2. Executing JavaScript within a function proved to be more time-consuming than direct execution on the hosting page. Despite this, the small execution time of the code made the delay practically unnoticeable.

The overhead of analyzing and instrumenting Flash applications includes the latencies associated with decompiling binary code, analyzing, instrumenting, and recompiling the source code. We measured these latencies for nine Flash applications used in our study, each run 10 times to obtain an average. The results are presented in Table 6. The table shows that, in most cases, the entire analysis took less than 10 seconds on the low-end laptop used in our experiment. Analyzing and instrumenting Flow player, which contained over 20,000 lines of code, took over one minute, while most other Flash programs, particularly advertisements, were much smaller, typically below 1,000 lines.

**Table 6: Performance of Static Analysis**

| Flash Application | Decompile (s) | Analysis (s) | Compile (s) | Total (s) |
|-------------------|---------------|--------------|-------------|-----------|
| Puzzle Game       | 3.46          | 0.665        | 2.66        | 6.785     |
| Adobe Demo        | 2.3           | 0.563        | 2.62        | 5.483     |
| CNN Ad            | 4.9           | 0.723        | 2.8         | 8.423     |
| CNET Ad           | 6.08          | 0.865        | 2.9         | 9.845     |
| Flow Player       | 14.6          | 3.582        | 49          | 67.182    |
| Color Widget      | 3.6           | 0.848        | 3.98        | 8.428     |
| Invoker           | 2.88          | 0.571        | 2.3         | 5.751     |
| Sender            | 2.82          | 0.717        | 2.1         | 5.637     |
| Receiver          | 2.5           | 0.631        | 2.74        | 5.871     |

### Discussion

FIRM is designed as the first inline policy enforcement system to mediate interactions between Flash/DOM and Flash/Flash. Well-designed security policies are crucial for Flash security. The current design of FIRM supports simple policies, as described in Section 4.1, which are sufficient for mitigating traditional threats such as Cross-Site Scripting (XSS). However, it remains unclear whether these policies provide adequate protection against new threats, such as clipboard seizure. Further research is needed to understand and address these issues, potentially improving FIRM to support more complex policies.

FIRM instruments dynamic content, including Flash and JavaScript, located at websites that adopt our technique. For Flash or scripts downloaded from other domains during runtime, the control is currently coarse-grained, with the lowest privilege being granted. A more desirable approach would be to apply different policies to dynamic content from different domains, which may require establishing trust relationships between websites. Alternatively, the IRM could pass the scripts and Flash acquired during runtime to the hosting website for analysis and instrumentation. These approaches will be explored in future research.

As discussed in Section 4.3, a Flash application can download and run another Flash as its child. The child Flash, which may be untrusted, inherits the privileges of its parent. Our current solution involves de-escalating the parent's privileges, resulting in coarse-grained control. Future research will explore methods to mediate the child's activities without demoting the parent.

The techniques proposed can be extended to mediate JavaScript code from different domains. However, our approach does not protect web services from denial-of-service attacks, such as those where a malicious Flash or script deletes DOM objects to disrupt service operations. Further research is needed to enhance the resilience of the IRM against such attacks.

### Related Work

#### Inline Reference Monitor
The concept of integrating a reference monitor into an application has been applied to protect binary executables and Java applications. Compared to other access control mechanisms, an IRM is often more efficient and has better insight into an application's internal states but can be more vulnerable to attacks targeting its integrity and data confidentiality.

Concurrently and independently, Phung et al. [36] proposed a JavaScript IRM to mediate access to sensitive DOM objects and properties. This approach grants all scripts within a web page the same privilege. In contrast, FIRM offers fine-grained control over scripts and Flash applications based on their capabilities. Another concurrent work by Meera et al. [41] developed a Flash IRM to verify if certain functions violate predefined policies. Their framework sanitizes the input of functions like `getURL`, but it operates in a binary manner, either allowing or prohibiting the entire script. Conversely, FIRM can allow legitimate script code while blocking malicious parts.

#### Access Control in Web Contents
The rapid development of new web services and applications, such as Mashups, has made the classic Same Origin Policy increasingly insufficient for mediating dynamic web content. New policy models and enforcement platforms, such as MashupOS, OMash, xBook, and BFlow, have been proposed to achieve finer-grained control of web activities, especially those involving JavaScript. FIRM is designed to control Flash applications and the scripts they spawn, which has not been done before. Unlike existing approaches that require browser plugins, FIRM embeds all policies and enforcement mechanisms directly into the web pages delivered to the browser, making deployment easier.

Grier et al. [26] proposed a new browser, OP Browser, which embeds security policies in the browser kernel to mediate access from plugins like Adobe Flash Player. However, their approach does not differentiate the security demands of different Flash contents, resulting in coarse-grained control.

#### XSS Defense
XSS is a well-recognized threat to the integrity and confidentiality of valuable web content. Prominent countermeasures include Beep, BrowserShield, Noxes, and BluePrint. Unlike previous work, FIRM focuses on XSS caused by vulnerable or malicious Flash applications, which requires effective mediation of interactions between Flash content and JavaScript, an area not previously explored.

#### Instruction Set Randomization
FIRM protects its IRM through randomizing capability tokens and the JavaScript and ActionScript variables that maintain these tokens and their related policies, making these critical resources inaccessible to malicious web content. This idea is inspired by Instruction Set Randomization (ISR), which was designed to defeat code-injection attacks by creating process-specific randomized instruction sets. Recent research, such as Noncespaces, has applied ISR to protect web applications by randomizing namespace prefixes within documents. However, such controls can be coarse-grained, as the reference monitor either permits or denies script execution but cannot control the resources a running script can access.

### Conclusion

Flash content is increasingly used for video playback, advertising, and other purposes. However, it has been shown that Flash can be exploited to launch various attacks, including XSS and XSRF. The intrinsic protection of Adobe Flash Player is insufficient, as it either denies a Flash application's access to web resources or grants it unconstrained access. Patching this security mechanism is nontrivial due to the closed-source nature of Adobe Flash Player and the difficulty of deploying patches across all browsers.

In this paper, we present FIRM, a novel solution that avoids these hurdles while effectively mediating Flash activities. FIRM builds an inline reference monitor into the web page hosting Flash content, mediating interactions between Flash and DOM objects, and between different Flash applications, based on the capability token possessed by the Flash. Our approach protects the IRM by controlling DOM methods and randomizing the names of variables that hold sensitive data. We implemented a prototype of FIRM and evaluated it on popular web applications, including phpBB, WordPress, and Drupal, as well as nine real-world Flash applications. Our study shows that FIRM effectively protects user data, incurs small overheads, and is convenient to deploy.

### Acknowledgments

We thank anonymous reviewers for their insightful comments. This work was supported in part by the NSF under Grant No. CNS-0716292 and CNS-1017782.

### References

[1] Adobe Flash CS4. http://www.adobe.com/products/flash/.

[2] Adobe Flash Player Clipboard Security Weakness. http://www.securityfocus.com/bid/31117.

[3] ANTLR Parser Generator. http://www.antlr.org/.

[4] BBCode. http://www.bbcode.org/.

[5] CNN. http://www.cnn.com.

[6] Drupal Community Plumbing. http://drupal.org.

[7] ECMAScript. http://www.ecmascript.org.

[8] Flash URL Parameter Attacks. http://code.google.com/p/doctype/wiki/ArticleFlashSecurityURL.

[9] Kimili Flash Embed. http://kimili.com/plugins/kml_flashembed/.

[10] Mashup Dashboard - ProgrammableWeb. http://www.programmableweb.com/mashups.

[11] phpBB - Creating Communities Worldwide. http://www.phpBB.com.

[12] Standard ECMA-262. http://www.ecma-international.org/publications/standards/Ecma-262.htm.

[13] SWFScan. https://h30406.www3.hp.com/campaigns/2009/wwcampaign/1-5TUVE/index.php?key=swf.

[14] WordPress - Blog Tool and Publishing Platform. http://wordpress.org.

[15] Yahoo! http://www.yahoo.com.

[16] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-Flow Integrity. In ACM Conference on Computer and Communications Security, pages 340–353, 2005.

[17] Adobe. Flash Player Security - Controlling Outbound URL Access. http://help.adobe.com/en_US/ActionScript/3.0_ProgrammingAS3/WS5b3ccc516d4fbf351e63e3d118a9b90204-7c9b.html, 2009.

[18] Y. Baror, A. Yogev, and A. Sharabani. Flash Parameter Injection. Technical report, IBM, As of September 2008.

[19] A. Barth, C. Jackson, and W. Li. Attacks on JavaScript Mashup Communication. In Proceedings of Web 2.0 Security and Privacy 2009 (W2SP 2009), 2009.

[20] L. Bauer, J. Ligatti, and D. Walker. Composing Security Policies with Polymer. In PLDI '05: Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation, pages 305–314, New York, NY, USA, 2005. ACM.

[21] S. Chenette. Malicious Flash Redirectors - Security Labs Blog. http://securitylabs.websense.com/content/Blogs/3165.aspx, 2008.

[22] S. Crites, F. Hsu, and H. Chen. OMash: Enabling Secure Web Mashups via Object Abstractions. In Proceedings of the 15th ACM conference on Computer and communications security table of contents, pages 99–108. ACM New York, NY, USA, 2008.

[23] DP. Flash ClickTag Parameter XSS. Banks, E-shops, Adobe, and Others Vulnerable. http://xssed.org/news/98/Flash_clickTAG_parameter_XSS._Banks_e-shops_Adobe_and_others_vulnerable/, 2009.

[24] Ú. Erlingsson and F. B. Schneider. IRM Enforcement of Java Stack Inspection. In IEEE Symposium on Security and Privacy, pages 246–255, 2000.

[25] Google. AttackVectors. http://code.google.com/p/google-caja/wiki/AttackVectors, 2010.

[26] C. Grier, S. Tang, and S. T. King. Secure Web Browsing with the OP Web Browser. In SP '08: Proceedings of the 2008 IEEE Symposium on Security and Privacy, pages 402–416, Washington, DC, USA, 2008. IEEE Computer Society.

[27] S. Guarnieri and B. Livshits. Gatekeeper: Mostly Static Enforcement of Security and Reliability Policies for JavaScript Code. In Proceedings of the USENIX Security Symposium, Montreal, Canada, August 2009.

[28] M. V. Gundy and H. Chen. NonceSpaces: Using Randomization to Enforce Information Flow Tracking and Thwart Cross-Site Scripting Attacks. In NDSS'09: Proceedings of the 16th Network and Distributed System Security Symposium, 2009.

[29] P. Jagdale. Blinded by Flash: Widespread Security Risks Flash Developers Don't See. In Black Hat DC 2009. Hewlett-Packard, 2009.

[30] T. Jim, N. Swamy, and M. Hicks. Defeating Script Injection Attacks with Browser-Enforced Embedded Policies. In WWW '07: Proceedings of the 16th international conference on World Wide Web, pages 601–610, New York, NY, USA, 2007. ACM.

[31] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering Code-Injection Attacks with Instruction-Set Randomization. In CCS '03: Proceedings of the 10th ACM conference on Computer and communications security, pages 272–280, New York, NY, USA, 2003. ACM.

[32] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-Side Solution for Mitigating Cross-Site Scripting Attacks. In SAC '06: Proceedings of the 2006 ACM symposium on Applied computing, pages 330–337, New York, NY, USA, 2006. ACM.

[33] H. M. Levy. Capability-Based Computer Systems. Butterworth-Heinemann, Newton, MA, USA, 1984.

[34] S. D. Paola. Testing Flash Applications. In 6th OWASP AppSec Conference, 2007.

[35] I. Parakey. Firebug - Web Development Evolved. http://getfirebug.com/, 2009.

[36] P. H. Phung, D. Sands, and A. Chudnov. Lightweight Self-Protecting JavaScript. In ASIACCS '09: Proceedings of the 4th International Symposium on Information, Computer, and Communications Security, pages 47–60, New York, NY, USA, 2009. ACM.

[37] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-Driven Filtering of Dynamic HTML. In Proc. OSDI, 2006.

[38] J. Ruderman. The Same Origin Policy. http://www.mozilla.org/projects/security/components/same-origin.html, 2008.

[39] A. Sabelfeld and A. Myers. Language-Based Information-Flow Security. IEEE Journal on Selected Areas in Communications, 21(1):5–19, January 2003.

[40] K. Singh, S. Bhola, and W. Lee. xBook: Redesigning Privacy Control in Social Networking Platforms. In Proceedings of the USENIX Security Symposium, Montreal, Canada, August 2009.

[41] M. Sridhar and K. W. Hamlen. ActionScript In-Lined Reference Monitoring in Prolog. In Proceedings of the Twelfth Symposium on Practical Aspects of Declarative Languages (PADL), 2010.

[42] E. Stark, M. Hamburg, and D. Boneh. Symmetric Cryptography in JavaScript. In 25th Annual Computer Security Applications Conference (ACSAC), 2009.

[43] M. Ter Louw and V. Venkatakrishnan. Blueprint: Precise Browser-Neutral Prevention of Cross-Site Scripting Attacks. In 30th IEEE Symposium on Security and Privacy, May 2009.

[44] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and Communication Abstractions for Web Browsers in MashupOS. In Proceedings of the 21st ACM Symposium on Operating Systems Principles (SOSP 2007), pages 1–16, 2007.

[45] W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks. In Proceedings of the 15th USENIX Security Symposium, Vancouver, BC, Canada, August 2006.

[46] A. Yip, N. Narula, M. Krohn, and R. Morris. Privacy-Preserving Browser-Side Scripting with BFlow. In EuroSys'09, 2009.