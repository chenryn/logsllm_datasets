### Integration and Performance
The presented techniques are compatible with the SPEC benchmark suite, allowing for seamless and efficient integration into projects with minimal performance impact.

### Summary and Applicability
In summary, we conclude that the techniques discussed in this paper are highly effective in deterring automated, dragnet-style bug hunting. When combined with common program obfuscation techniques, they also serve to hinder targeted attacks. This is because manual reverse engineering and removal of the anti-fuzzing measures are required before a more cost-effective, automated fuzzing campaign can be initiated.

### Acknowledgments
We would like to extend our gratitude to our shepherd, Mathias Payer, and the anonymous reviewers for their valuable comments and suggestions. This work was supported by the German Federal Ministry of Education and Research (BMBF Grant 16KIS0592K HWSec) and the German Research Foundation (DFG) within the framework of the Excellence Strategy of the Federal Government and the States - EXC 22092 CASA. Additionally, this project received funding from the European Union’s Horizon 2020 research and innovation programme under grant agreement No 786669 (ReAct). The views expressed in this paper are solely those of the authors. The Research Executive Agency is not responsible for any use that may be made of the information contained herein.

### References
[1] Announcing oss-fuzz: Continuous fuzzing for open source software. https://testing.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html. Accessed: 2019-02-18.
[2] Circumventing fuzzing roadblocks with compiler transformations. https://lafintel.wordpress.com/. Accessed: 2019-02-18.
[3] Peach. http://www.peachfuzzer.com/. Accessed: 2019-02-18.
[4] Security-oriented fuzzer with powerful analysis options. https://github.com/google/honggfuzz. Accessed: 2019-02-18.
[5] zzuf. https://github.com/samhocevar/zzuf. Accessed: 2019-02-18.
[6] Ali Abbasi, Thorsten Holz, Emmanuele Zambon, and Sandro Etalle. ECFI: Asynchronous Control Flow Integrity for Programmable Logic Controllers. In Annual Computer Security Applications Conference (ACSAC), 2017.
[7] Andrew W. Appel. Deobfuscation is in NP, 2002.
[8] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. Redqueen: Fuzzing with input-to-state correspondence. In Symposium on Network and Distributed System Security (NDSS), 2019.
[9] Osbert Bastani, Rahul Sharma, Alex Aiken, and Percy Liang. Synthesizing program input grammars. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2017.
[10] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury. Directed greybox fuzzing. In ACM Conference on Computer and Communications Security (CCS), 2017.
[11] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-based greybox fuzzing as Markov chain. In ACM Conference on Computer and Communications Security (CCS), 2016.
[12] Cristian Cadar, Daniel Dunbar, and Dawson R. Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Symposium on Operating Systems Design and Implementation (OSDI), 2008.
[13] Sang Kil Cha, Maverick Woo, and David Brumley. Program-adaptive mutational fuzzing. In IEEE Symposium on Security and Privacy, 2015.
[14] Peng Chen and Hao Chen. Angora: Efficient fuzzing by principled search. In IEEE Symposium on Security and Privacy, 2018.
[15] Christian Collberg. The Tigress C Diversifier/Obfuscator. http://tigress.cs.arizona.edu/. Accessed: 2019-02-18.
[16] Christian Collberg, Clark Thomborson, and Douglas Low. A taxonomy of obfuscating transformations. Technical Report 148, Department of Computer Science, The University of Auckland, New Zealand, 1997.
[17] Christian Collberg, Clark Thomborson, and Douglas Low. Manufacturing cheap, resilient, and stealthy opaque constructs. In ACM Symposium on Principles of Programming Languages (POPL), 1998.
[18] Brendan Dolan, Patrick Hulin, Engin Kirda, Tim Leek, Andrea Mambretti, William Robertson, Frederick Ulrich, and Ryan Whelan. LAVA: Large-scale automated vulnerability addition. In IEEE Symposium on Security and Privacy, 2016.
[19] Christopher Domas. Movfuscator: Turning 'mov' into a soul-crushing RE nightmare. https://recon.cx/2015/slides/recon2015-14-christopher-domas-The-movfuscator.pdf. Accessed: 2019-02-18.
[20] Joe W. Duran and Simeon Ntafos. A report on random testing. In International Conference on Software Engineering (ICSE), 1981.
[21] Hui Fang, Yongdong Wu, Shuhong Wang, and Yin Huang. Multi-stage binary code obfuscation using improved virtual machine. In International Conference on Information Security (ISC), 2011.
[22] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu Pei, and Zuoning Chen. CollaFL: Path-sensitive fuzzing. In IEEE Symposium on Security and Privacy, 2018.
[23] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed whitebox fuzzing. In International Conference on Software Engineering (ICSE), 2009.
[24] Jun Ge, Soma Chaudhuri, and Akhilesh Tyagi. Control flow-based obfuscation. In ACM Workshop on Digital Rights Management (DRM), 2005.
[25] Patrice Godefroid, Adam Kiezun, and Michael Y. Levin. Grammar-based whitebox fuzzing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2008.
[26] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed Automated Random Testing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.
[27] Patrice Godefroid, Michael Y. Levin, David A. Molnar, et al. Automated whitebox fuzz testing. In Symposium on Network and Distributed System Security (NDSS), 2008.
[28] Patrice Godefroid, Hila Peleg, and Rishabh Singh. Learn&fuzz: Machine learning for input fuzzing. In ACM International Conference on Automated Software Engineering (ASE), 2017.
[29] Peter Goodman. Shin GRR: Make fuzzing fast again. https://blog.trailofbits.com/2016/11/02/shin-grr-make-fuzzing-fast-again/. Accessed: 2019-02-18.
[30] David Göransson and Emil Edholm. Escaping the fuzz. Master’s thesis, Chalmers University of Technology, Gothenburg, Sweden, 2016.
[31] Istvan Haller, Asia Slowinska, Matthias Neugschwandtner, and Herbert Bos. Dowsing for overflows: A guided fuzzer to find buffer boundary violations. In USENIX Security Symposium, 2013.
[32] HyungSeok Han and Sang Kil Cha. IMF: Inferred model-based fuzzer. In ACM Conference on Computer and Communications Security (CCS), 2017.
[33] Aki Helin. A general-purpose fuzzer. https://gitlab.com/akihe/radamsa. Accessed: 2019-02-18.
[34] Thorsten Holz and Frédéric Raynal. Detecting honeypots and other suspicious environments. IEEE Information Assurance Workshop, 2005.
[35] Zhenghao Hu, Yu Hu, and Brendan Dolan-Gavitt. Chaff bugs: Deterring attackers by making software buggier.
[36] Richard Johnson. Go speed tracer. https://talos-intelligence-site.s3.amazonaws.com/production/document_files/files/000/000/048/original/Go_Speed_Tracer.pdf. Accessed: 2019-02-18.
[37] Anastasis Keliris and Michail Maniatakos. ICSRef: A framework for automated reverse engineering of industrial control systems binaries. In Symposium on Network and Distributed System Security (NDSS), 2019.
[38] Kang Li, Yue Yin, and Guodong Zhu. AFL's blindspot and how to resist AFL fuzzing for arbitrary ELF binaries. https://www.blackhat.com/us-18/briefings/schedule/index.html#afls-blindspot-and-how-to-resist-afl-fuzzing-for-arbitrary-elf-binaries-11048. Accessed: 2019-02-18.
[39] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix: Program-state based binary fuzzing. In Joint Meeting on Foundations of Software Engineering, 2017.
[40] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.
[41] Matias Madou, Bertrand Anckaert, Patrick Moseley, Saumya Debray, Bjorn De Sutter, and Koen De Bosschere. Software protection through dynamic code mutation. In International Workshop on Information Security Applications (WISA), 2005.
[42] David Molnar, Xue Cong Li, and David Wagner. Dynamic test generation to find integer bugs in x86 binary Linux programs. In USENIX Security Symposium, 2009.
[43] Andre Pawlowski, Moritz Contag, and Thorsten Holz. Probfuscation: An obfuscation approach using probabilistic control flows. In Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), 2016.
[44] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-Fuzz: Fuzzing by program transformation. In IEEE Symposium on Security and Privacy, 2018.
[45] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUzzer: Application-aware evolutionary fuzzing. In Symposium on Network and Distributed System Security (NDSS), 2017.
[46] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan M. Foote, David Warren, Gustavo Grieco, and David Brumley. Optimizing seed selection for fuzzing. In USENIX Security Symposium, 2014.
[47] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. KAFL: Hardware-assisted feedback fuzzing for OS kernels. In USENIX Security Symposium, 2017.
[48] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. Driller: Augmenting fuzzing through selective symbolic execution. In Symposium on Network and Distributed System Security (NDSS), 2016.
[49] Vincent Ulitzsch, Bhargava Shastry, and Dominik Maier. Follow the white rabbit: Simplifying fuzz testing using FuzzExMachina. https://i.blackhat.com/us-18/Thu-August-9/us-18-Ulitzsch-Follow-The-White-Rabbit-Simplifying-Fuzz-Testing-Using-FuzzExMachina.pdf. Accessed: 2019-02-18.
[50] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection. In IEEE Symposium on Security and Privacy, 2010.
[51] Zhi Wang, Jiang Ming, Chunfu Jia, and Debin Gao. Linear obfuscation to combat symbolic execution. In European Symposium on Research in Computer Security (ESORICS), 2011.
[52] Maverick Woo, Sang Kil Cha, Samantha Gottlieb, and David Brumley. Scheduling black-box mutational fuzzing. In ACM Conference on Computer and Communications Security (CCS), 2013.
[53] Gregory Wroblewski. General method of program code obfuscation. PhD thesis, Wroclaw University of Technology, 2002.
[54] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. QSYM: A practical concolic execution engine tailored for hybrid fuzzing. In USENIX Security Symposium, 2018.
[55] Michael Zalewski. "Technical whitepaper" for AFL-fuzz. http://lcamtuf.coredump.cx/afl/technical_details.txt. Accessed: 2019-02-18.
[56] Michał Zalewski. American fuzzy lop. http://lcamtuf.coredump.cx/afl/. Accessed: 2019-02-18.

### Table 1: Tigress Configuration for ANTIFUZZ Evaluation
| Transform | Virtualize | Flatten | Split | InitOpaque | EncodeLiterals | EncodeArithmetic | AddOpaque | AntiTaintAnalysis | UpdateOpaque | Ident | InitEntropy | AntiAliasAnalysis | InitBranchFuns | RandomFuns | InitImplicitFlow |
|-----------|------------|---------|-------|------------|----------------|------------------|-----------|------------------|---------------|-------|-------------|------------------|----------------|------------|-----------------|
| Functions | check      | check   | main  | *          | *              | *                | *         | *                | *             | *     | *           | *                | *              | *          | *               |
| check     | check      | check   | main  | *          | *              | *                | *         | *                | *             | *     | *           | *                | *              | *          | *               |

* Asterisk means: "apply to all functions".