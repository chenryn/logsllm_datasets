### Performance Impact of TLB Invalidation and ASID Usage

- **1.00% (2.28)**
- **12.54% (6.54)**
- **1.38% (12.18)**
- **3.04% (2.32)**
- **0.67% (0.67)**
- **1.77% (2.58)**

The performance impact of TLB invalidations is significant, even considering the relatively long RTC. This is due to the increased TLB miss rate caused by TLB invalidations. In summary, the prototype using ASID and TLB invalidation introduces an average performance overhead of 8.9% and 29.5%, respectively.

### C. Macro Benchmarks

To evaluate the overall system performance impact of the prototype, we conducted experiments with six different synthetic benchmark applications available on the Google Play Store: CF-Bench 1.3, GeekBench 3.4.1, Quadrant 2.1.1, Smartbench 1.0.0, Vellamo 3.2, and AnTuTu 6.0.1. Each benchmark was repeated 10 times, and the results, including standard deviation, are reported in Table IV. The final benchmark scores, reflecting real-world scenarios, indicate that the prototype incurs an average performance overhead of 0.97% when using ASID and 2.42% when using TLB invalidation.

### D. Security Application Benchmark

When system software adopts our intra-level privilege separation technique, developers can deploy various security applications to monitor the system. However, it is challenging to measure or estimate the performance impact of these security applications deterministically. Therefore, we created a security application as an example, which performs system call examination to demonstrate its performance impact.

This security application is based on the idea presented by Forrest [17]. It intercepts system calls and extracts high-level information from them. This approach is relatively simple to implement and provides a useful means for monitoring system behavior. For instance, Aurasium [48] shows that examining system call data enables more fine-grained policy enforcement than the default permission system of Android. Our security application mimics Aurasium to monitor application behavior. Specifically, we inserted IDCs in system call handlers to pass system call numbers and arguments to the security application in the inner domain. The transferred data are stored in a ring buffer allocated in the inner domain for each core. The security application then parses this data to understand the corresponding application behavior. For example, by monitoring the `sys_connect` system call and its arguments, the security application can identify the IP address and port number of a network connection being established, thereby denying access to banned websites. Additionally, by monitoring the `sys_ioctl` system call and its arguments, the security application can track the binder, which provides inter-process communication capabilities. By inspecting established binder connections, the security application can monitor whether applications comply with given access policies for services and resources.

To measure the performance degradation when the security application is installed, we used the same micro and macro benchmarks. The results in Table V show that the security application incurs overhead in system calls due to intercepts and parsing operations. However, this overhead is negligible for time-consuming system calls like `mmap`. Table VI indicates that the performance overhead imposed by the example security application is acceptable, with an average increase of 3.07% when using ASID and 4.77% when using TLB invalidation.

### VII. Discussion

In this section, we discuss remaining issues and possible future extensions for Hilps.

#### Porting Effort
To logically deprivilege the outer domain, Hilps entrusts the inner domain with exclusive control over privileged registers and page tables. We achieve this through code instrumentation, which incurs a porting cost. For example, we modified approximately 1,800 SLOC of the AArch64 Linux kernel to apply Hilps. According to previous works using this technique [15], [4], [7], [19], such a porting effort is generally considered reasonable and acceptable.

#### Vulnerable Security Applications
Attackers may attempt to tamper with both the inner and outer domains by exploiting vulnerabilities in security applications. In Hilps, however, it is extremely difficult to manipulate security applications in this manner. One reason is that the outer domain communicates with a security application in the inner domain through a very narrow interface. Another is that only authorized security applications are included in the binary of system software, and they are loaded intact into the system via a pre-verified secure boot sequence.

#### On-demand Installation of Security Applications
To handle attacks that cannot be managed by existing security applications in the inner domain, installing new security applications would be beneficial. In Hilps, updating a firmware image is currently the only means to do this. However, this adversely affects flexibility. We are considering allowing on-demand installation of security applications. To enable this, we plan to extend Hilps with two types of interfaces supporting the development and installation of security applications. In this case, Hilps itself could be threatened if malicious security applications are installed. To mitigate this, we may need to strongly isolate each security application using sandbox solutions like NaCl [50].

### VIII. Conclusion

Privilege separation has been a popular security principle in software design, enhancing the security level of monolithic system software. This paper introduces Hilps, a technique developed to enforce this principle in system software running on ARM-based machines. The major novelty of Hilps lies in its unique implementation scheme for domain switching and intra-level isolation, leveraging the TxSZ hardware field for dynamically adjusting virtual address ranges of running software. Thanks to ARM’s new hardware support, Hilps securely incorporates various security solutions into all levels of privileged software on AArch64, including a normal OS, a hypervisor, and even an ARM TrustZone secure OS. Our experimental evidence shows that the extra runtime overhead incurred by Hilps is acceptably small, making it a viable tool for enforcing privilege separation on commodity mobile devices.

### Acknowledgment

We thank anonymous reviewers for their support and insightful remarks, which improved the paper. This work was partly supported by the Institute for Information & Communications Technology Promotion (IITP) grant funded by the Korea government (MSIP) (No. R0190-16-2010, Development on the SW/HW modules of Processor Monitor for System Intrusion Detection) and (No. R-20160222-002755, Cloud-based Security Intelligence Technology Development for the Customized Security Service Provisioning), the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIP) (No. 2014R1A2A1A10051792), and the Brain Korea 21 Plus Project in 2017.

### References

[1] "Linux kernel vulnerabilities," http://www.cvedetails.com/product/47/Linux-Linux-Kernel.html?vendor_id=33.
[2] "Xen: Vulnerability statistics," http://www.cvedetails.com/vendor/6276/XEN.html.
[3] D. Abramson, "Intel virtualization technology for directed I/O," Intel technology journal, 2006.
[4] R. B. J. M. W. S. R. W. Ahmed M. Azab, 1 Kirk Swidowski and P. Ning, "Skee: A lightweight secure kernel-level execution environment for ARM," in Proceedings of the Network and Distributed System Security Symposium, 2016.
[5] ARM, "System memory management unit (SMmu)," http://www.arm.com/products/system-ip/controllers/system-mmu.php.
[6] ——, "Versatile express juno r1 development platform," in ARM 100122 0100 00 en, 2015.
[7] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and W. Shen, "Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world," in Proceedings of the 21st ACM SIGSAC Conference on Computer and Communications Security, 2014.
[8] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky, "Hypersentry: enabling stealthy in-context measurement of hypervisor integrity," in Proceedings of the 17th ACM conference on Computer and communications security, 2010.
[9] A. M. Azab, P. Ning, and X. Zhang, "Sice: a hardware-level strongly isolated computing environment for x86 multi-core platforms," in Proceedings of the 18th ACM Conference on Computer and Communications Security, 2011.
[10] V. R. Basili and B. T. Perricone, "Software errors and complexity: an empirical investigation," Communications of the ACM, 1984.
[11] M. Becher, M. Dornseif, and C. N. Klein, "Firewire: all your memory are belong to us," Proceedings of CanSecWest, 2005.
[12] J. Bickford, R. O’Hare, A. Baliga, V. Ganapathy, and L. Iftode, "Rootkits on smart phones: attacks, implications and opportunities," in Proceedings of the 11th workshop on mobile computing systems & applications, 2010.
[13] M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Donnelly, P. Barham, and R. Black, "Fast byte-granularity software fault isolation," in Proceedings of the 22nd ACM SIGOPS symposium on Operating systems principles, 2009.
[14] J. Criswell, N. Dautenhahn, and V. Adve, "Virtual ghost: Protecting applications from hostile operating systems," Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems, 2014.
[15] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and V. Adve, "Nested kernel: An operating system architecture for intra-kernel privilege separation," in Proceedings of the 20th International Conference on Architectural Support for Programming Languages and Operating Systems, 2015.
[16] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula, "XFI: Software guards for system address spaces," in Proceedings of the 7th symposium on Operating systems design and implementation, 2006.
[17] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff, "A sense of self for UNIX processes," in Proceedings of the 17th IEEE Symposium on Security and Privacy, 1996.
[18] T. Garfinkel, M. Rosenblum et al., "A virtual machine introspection based architecture for intrusion detection," in Proceedings of the Network and Distributed System Security Symposium, 2003.
[19] X. Ge, H. Vijayakumar, and T. Jaeger, "Sprobes: Enforcing kernel code integrity on the TrustZone architecture," 2014.
[20] Intel, "Trusted execution technology: Software development guide," 2008.
[44] E. Unified, "Inc. unified extensible firmware interface specification," 2014.
[45] X. Wang, Y. Chen, Z. Wang, Y. Qi, and Y. Zhou, "SecPod: a framework for virtualization-based security systems," in USENIX Annual Technical Conference, 2015.
[46] Z. Wang and X. Jiang, "HyperSafe: A lightweight approach to provide lifetime hypervisor control-flow integrity," in Proceedings of the 31st IEEE Symposium on Security and Privacy, 2010.
[47] C. Wu, Z. Wang, and X. Jiang, "Taming hosted hypervisors with (mostly) deprivileged execution." in Proceedings of the Network and Distributed System Security Symposium, 2013.
[48] R. Xu, H. Saïdi, and R. Anderson, "Aurasium: Practical policy enforcement for Android applications," in Proceedings of the 21st USENIX Security Symposium, 2012.
[49] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu, "From collision to exploitation: Unleashing use-after-free vulnerabilities in Linux kernel," in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, 2015.
[50] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar, "Native Client: A sandbox for portable, untrusted x86 native code," in Proceedings of the 30th IEEE Symposium on Security and Privacy, 2009.
[51] F. Zhang, J. Wang, K. Sun, and A. Stavrou, "HyperCheck: A hardware-assisted integrity monitor," Dependable and Secure Computing, IEEE Transactions on, 2014.
[21] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis, "ret2dir: Rethinking kernel isolation," in Proceedings of the 23rd USENIX Security Symposium, 2014.
[22] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu, "Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors," in Proceedings of the 41st Annual International Symposium on Computer Architecture, 2014.
[23] S. T. King and P. M. Chen, "SubVirt: Implementing malware with virtual machines," in Proceedings of the 27th IEEE Symposium on Security and Privacy, 2006.
[24] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish et al., "seL4: Formal verification of an OS kernel," in Proceedings of the 22nd ACM SIGOPS symposium on Operating systems principles, 2009.
[25] J. Liedtke, "On micro-kernel construction," in Proceedings of the 15th ACM Symposium on Operating Systems Principles, 1995.
[26] Y. Mao, H. Chen, D. Zhou, X. Wang, N. Zeldovich, and M. F. Kaashoek, "Software fault isolation with API integrity and multi-principal modules," in Proceedings of the 23rd ACM SIGOPS Symposium on Operating Systems Principles, 2011.
[27] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki, "Flicker: An execution infrastructure for TCB minimization," in Proceedings of the ACM European Conference in Computer Systems, 2008.
[28] S. C. Misra and V. C. Bhavsar, "Relationships between selected software measures and latent bug-density: Guidelines for improving quality," in Computational Science and Its Applications—ICCSA, 2003.
[29] T. J. Ostrand and E. J. Weyuker, "The distribution of faults in a large industrial software system," in ACM SIGSOFT Software Engineering Notes, 2002.
[30] D. R. Piegdon and L. Pimenidis, "Hacking in physically addressable memory," in Seminar of Advanced Exploitation Techniques, WS 2006/2007, 2007.
[31] D. Rosenberg, "QSEE TrustZone kernel integer overflow," in Black Hat USA, 2014.
[32] T. Roth, "Next generation mobile rootkits," in Hack In Paris, 2013.
[33] J. H. Saltzer, "Protection and the control of information sharing in Multics," Communications of the ACM, 1974.
[34] J. H. Saltzer and M. D. Schroeder, "The protection of information in computer systems," Proceedings of the IEEE, 1975.
[35] F. B. Schneider, G. Morrisett, and R. Harper, "A language-based approach to security," in Informatics, 2001.
[36] A. Seshadri, M. Luk, N. Qu, and A. Perrig, "SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes," in Proceedings of the 21st ACM SIGOPS Symposium on Operating Systems Principles, 2007.
[37] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, "Secure in-VM monitoring using hardware virtualization," in Proceedings of the 16th ACM conference on Computer and communications security, 2009.
[38] D. Shen, "Attacking your trusted core: Exploiting TrustZone on Android," in Black Hat USA, 2015.
[39] A. Srivastava and J. T. Griffin, "Efficient monitoring of untrusted kernel-mode execution," in Proceedings of the Network and Distributed System Security Symposium, 2011.
[40] U. Steinberg and B. Kauer, "Nova: a microhypervisor-based secure virtualization architecture," in Proceedings of the 5th European conference on Computer systems, 2010.
[41] G. E. Suh, D. Clarke, B. Gassend, M. Van Dijk, and S. Devadas, "AEGIS: Architecture for tamper-evident and tamper-resistant processing," in Proceedings of the 17th annual international conference on Supercomputing, 2003.
[42] M. M. Swift, B. N. Bershad, and H. M. Levy, "Improving the reliability of commodity operating systems," in Proceedings of the 19th ACM Symposium on Operating Systems Principles, 2003.
[43] J. Thomas and N. Keltner, "Here be dragons," in RECON Canada, 2014.