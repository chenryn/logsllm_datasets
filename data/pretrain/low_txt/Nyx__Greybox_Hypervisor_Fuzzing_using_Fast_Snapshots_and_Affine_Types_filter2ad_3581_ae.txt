### Cursive DMA Requests

NYX uncovered a stack-overflow vulnerability in QEMU's DMA mechanism, specifically within the EE100Pro device emulator. The EE100Pro device relies on the Command Unit (CU) and Receive Unit (RU) to send commands and receive data from its guest. By configuring the CU base and offset registers to point to its own PCI MMIO BAR with a specific offset, and then performing a write access to the command register, the device emulator initiates a DMA write access to the same MMIO register, leading to a recursive DMA access. This recursion results in stack exhaustion and a crash, which can be exploited by a malicious guest.

### Case Study: QEMU SDHCI Heap-based Buffer Overflow

The SDHCI (Secure Digital Host Controller Interface) device performs read and write operations in blocks. The block size can be set using the `SDHC_BLKSIZE` command. Each read and write command advances the `data_count` cursor of the `fifo_buffer` until the block size is reached. For larger data, the `SDHC_SYSAD` command allows multi-block transfers, starting at the current `data_count` position.

When a new block size is set using the `SDHC_BLKSIZE` command, the `data_count` cursor is not reset, and the block size is not validated against zero. This allows an attacker to first set a high block size, move the cursor to an arbitrary position, then set the block size to zero, and issue a multi-block transfer. The length is calculated as `0 - data_count`, resulting in an out-of-bounds heap write up to the size of `uint16_t` or the maximum buffer size, whichever is lower.

### Coordinated Disclosure

We reported 44 bugs to the maintainers, with 7 security issues directly reported to and acknowledged by the QEMU security team according to their security process. The QEMU security team assigned four CVEs (CVE-2020-25084, CVE-2020-25085, CVE-2020-25741, CVE-2020-25743) for fixed and published issues. While it is challenging to evaluate the exact security impact of these bugs without writing an exploit, we believe that most memory corruption issues could be exploitable under the right circumstances. Additionally, 15 security issues in bhyve were reported to the FreeBSD security team, with pending CVEs assigned by MITRE. Other non-critical security issues, such as assertion failures, were publicly reported through launchpad.net for QEMU bugs (#1883728, #1883729, #1883732, #1883733, #1883739, #1525123, #697510, #1681439, #1810000) and the FreeBSD bug tracker for bhyve findings.

### Related Work

In recent years, fuzzing has shown exceptional results in uncovering bugs in software systems. This trend was initiated by AFL, a coverage-guided fuzzer [65]. Numerous researchers have since improved AFL’s input mutation algorithm [1, 2, 27, 40, 43] and its ability to identify bugs [4, 5, 31, 37, 39, 58]. Other approaches focused on enhancing feedback mechanisms in coverage-guided fuzzers [16, 19, 30, 33, 57], while others explored improved scheduling algorithms [8–11, 46, 59].

A more in-depth discussion on recent advances in fuzzing can be found in Manès et al.’s overview [35]. Some research proposed hybrid software testing methods combining feedback fuzzing with concolic execution [20–22, 26, 36, 50, 56, 62, 66]. Similar to concolic execution, other approaches aimed to improve fuzzing by adding taint tracking [14, 45]. Various researchers also focused on improving the raw throughput of modern fuzzers [51, 61].

Snapshots have been used in the context of testing. AFL’s fork server can be seen as a primitive ring-3 snapshot mechanism. Dong et al. used snapshots for testing Android apps [17], but their approach takes approximately nine seconds to restore a single snapshot, making it impractical for our purposes. Recently, Falk used a similar mechanism to quickly reset the memory of VMs [18], but this implementation does not support emulated devices.

To apply fuzzing to a wider set of targets, coverage-guided fuzzers for ring-0 targets were developed [29, 41, 49, 55, 60]. Additionally, some recent research expanded fuzzing into the IoT and embedded systems domain [15, 34]. Beyond ring-0, fuzzing has been applied to hypervisors [23, 28, 48, 52]. For example, VDF [28] implements a coverage-guided hypervisor fuzzing approach. Recently, Schumilo et al. introduced HYPER-CUBE, a blind fuzzer for hypervisors [48]. Various researchers have also implemented other blind hypervisor fuzzers [12, 23, 38, 47].

### Discussion

In this paper, we describe an approach to fuzz hypervisors using coverage guidance. The recent success of HYPER-CUBE raised questions about the viability of coverage-guided fuzzing for hypervisors. Our evaluation shows that coverage-guided fuzzing works as expected. The fundamental problem behind VDF is not the overhead of coverage-guided fuzzing per se, but rather their implementation. A properly implemented and sufficiently optimized whole-system fuzzer design can outperform HYPER-CUBE.

However, current fuzzers need to make several changes: first, they need a way to obtain code coverage from all code, regardless of the protection ring it is running under. Second, they must handle high non-determinism using fast snapshot reloads. Lastly, the mutator needs to understand the interactive nature of the inputs. As the authors of HYPER-CUBE noted, coverage-guided fuzzing adds significant value when fuzzing more complex devices.

While our approach is versatile, faster, and easier to use than VDF, and often outperforms even HYPER-CUBE, it has some drawbacks. It is slightly more complex to set up than HYPER-CUBE, as the target hypervisor needs to run inside KVM-PT. For most hypervisors, this is not particularly challenging, as KVM-PT fully supports nested virtualization. Using nested virtualization allows us to easily recover from crashes, whereas HYPER-CUBE needs to restart the entire process after each crash, often struggling with early crashes triggered by overzealous assert statements.

### Creating Specifications

In addition to running the target hypervisor in a nested configuration, the user must provide a specification. Even an uninformed specification that closely mirrors HYPER-CUBE’s behavior is useful, but a more precise specification is often beneficial. Designing a specification is similar to designing a grammar for well-known fuzzers such as NAUTILUS [1], PEACH [54], or SULLEY [44]. The main effort lies in understanding the target, rather than producing the specification. In our case, we spent about two days on our most complex specification, with VirtIO structures requiring the most work. Writing the specification based on this understanding took only a small fraction of the time (around two hours).

### Long-Running Interactive Fuzzing

Our fuzzer maintains one aspect of current coverage-guided fuzzers: each small input is tested in isolation after a mutation. It would be interesting to explore long-running interactive fuzzing, where a large stream is generated from a given seed inside the target VM. While the original HYPER-CUBE logic generates interactions within the VM, KVM-PT would observe the coverage from the outside until new coverage is found.

### Conclusion

In this paper, we introduced an approach to fuzz highly complex and stateful interactive targets, focusing on hypervisor fuzzing as an example. The techniques introduced here are applicable to fuzzing any kind of software. We demonstrated that super-fast, full VM reloads and structured fuzzing of interactive applications are valuable additions to current fuzzers. Coverage-guided fuzzing can outperform blind fuzzing, even when the blind fuzzer produces more interactions per second. Blind fuzzers like HYPER-CUBE, while conceptually simpler and capable of generating a larger number of interactions, struggle to test less common parts of the application. Fast snapshots provide near-perfect reproducibility, and coverage guidance ensures thorough exploration of hard-to-hit parts of the target, leading to the discovery of more bugs and higher coverage.

### Acknowledgements

We thank our shepherd Byron Williams and our anonymous reviewers for their valuable feedback. This work was supported by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy – EXC-2092 CASA – 390781972. Additionally, this work was supported by the European Union’s Horizon 2020 Research and Innovation Programme (ERC Starting Grant No. 640110 (BASTION) and 786669 (REACT)). The content of this document reflects the views only of the authors. The European Commission/Research Executive Agency are not responsible for any use that may be made of the information it contains.

### References

[1] Cornelius Aschermann, Tommaso Frassetto, Thorsten Holz, Patrick Jauernig, Ahmad-Reza Sadeghi, and Daniel Teuchert. Nautilus: Fishing for Deep Bugs with Grammars. In Symposium on Network and Distributed System Security (NDSS), 2019.

[2] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko, Robert Gawlik, and Thorsten Holz. REDQUEEN: Fuzzing with Input-to-State Correspondence. In Symposium on Network and Distributed System Security (NDSS), 2019.

[3] Muli Ben-Yehuda, Michael D Day, Zvi Dubitzky, Michael Factor, Abel Gordon, Anthony Liguori, Orit Wasserman, and Ben-Ami Yassour. The Turtles Project: Design and Implementation of Nested Virtualization. In Symposium on Operating Systems Design and Implementation (OSDI), 2010.

[4] William Blair, Andrea Mambretti, Sajjad Arshad, Michael Weissbacher, William Robertson, Engin Kirda, and Manuel Egele. HotFuzz: Discovering Algorithmic Denial-of-Service Vulnerabilities Through Guided Micro-Fuzzing. In Symposium on Network and Distributed System Security (NDSS), 2020.

[5] William Blair, Andrea Mambretti, Sajjad Arshad, Michael Weissbacher, William Robertson, Engin Kirda, and Manuel Egele. HotFuzz: Discovering Algorithmic Denial-of-Service Vulnerabilities Through Guided Micro-Fuzzing. 2020.

[6] Tim Blazytko, Cornelius Aschermann, Moritz Schlögel, Ali Abbasi, Sergej Schumilo, Simon Wörner, and Thorsten Holz. GRIMOIRE: Synthesizing Structure while Fuzzing. In USENIX Security Symposium, 2019.

[7] Sören Bleikertz. XenFuzz. https://www.openfoo.org/blog/xen-fuzz.html. Accessed: October 6, 2020.

[8] Marcel Böhme, Valentin JM Manès, and Sang Kil Cha. Boosting Fuzzer Efficiency: An Information Theoretic Perspective. In esec-fse, 2020.

[9] Marcel Böhme, Van-Thuan Pham, Manh-Dung Nguyen, and Abhik Roychoudhury. Directed greybox fuzzing. In ACM Conference on Computer and Communications Security (CCS), 2017.

[10] Marcel Böhme, Van-Thuan Pham, and Abhik Roychoudhury. Coverage-based greybox fuzzing as Markov chain. In ACM Conference on Computer and Communications Security (CCS), 2016.

[11] Sang Kil Cha, Maverick Woo, and David Brumley. Program-adaptive mutational fuzzing. In IEEE Symposium on Security and Privacy, 2015.

[12] Amardeep Chana. MWR-Labs: Ventures into Hyper-V - Fuzzing hypercalls. https://labs.mwrinfosecurity.com/blog/ventures-into-hyper-v-part-1-fuzzing-hypercalls/. Accessed: October 6, 2020.

[13] Amardeep Chana. Viridian Fuzzer. https://github.com/mwrlabs/ViridianFuzzer. Accessed: October 6, 2020.

[14] Peng Chen and Hao Chen. Angora: Efficient Fuzzing by Principled Search. In IEEE Symposium on Security and Privacy, 2018.

[15] Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer. HALucinator: Firmware Re-hosting Through Abstraction Layer Emulation. In USENIX Security Symposium, 2020.

[16] S. Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization. In IEEE Symposium on Security and Privacy, 2020.

[17] Zhen Dong, Marcel Böhme, Lucia Cojocaru, and Abhik Roychoudhury. Time-travel Testing of Android Apps. In ICSE, 2020.

[18] Brandon Falk. Chocolate Milk. https://github.com/gamozolabs/chocolate_milk. Accessed: October 6, 2020.

[19] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu Pei, and Zuoning Chen. CollAFL: Path Sensitive Fuzzing. In IEEE Symposium on Security and Privacy, 2018.

[20] Patrice Godefroid, Adam Kiezun, and Michael Y Levin. Grammar-based whitebox fuzzing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2008.

[21] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed Automated Random Testing. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.

[22] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. Automated whitebox fuzz testing. In Symposium on Network and Distributed System Security (NDSS), 2008.

[23] Mikhail Gorobets, Oleksandr Bazhaniuk, Alex Matrosov, Andrew Furtak, and Yuriy Bulygin. Attacking hypervisors via firmware and hardware. Black Hat USA, 2015.

[24] Mikhail Gorobets, Oleksandr Bazhaniuk, Alex Matrosov, Andrew Furtak, and Yuriy Bulygin. Attacking hypervisors via firmware and hardware. Black Hat USA, 2015.

[25] Samuel Groß. FuzzIL: Coverage Guided Fuzzing for JavaScript Engines. Master’s thesis, Karlsruhe Institute of Technology, Karlsruhe, Germany, 2018.

[26] Istvan Haller, Asia Slowinska, Matthias Neugschwandtner, and Herbert Bos. Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations. In USENIX Security Symposium, 2013.

[27] HyungSeok Han, DongHyeon Oh, and Sang Kil Cha. CodeAlchemist: Semantics-Aware Code Generation to