# 第八章：分布式系统的挑战

![](../img/ch8.png)

> 邂逅相遇
>
> 网络延迟
>
> 存之为吾
>
> 无食我数
>
> —— Kyle Kingsbury, Carly Rae Jepsen 《网络分割的危害》（2013 年）[^译著1]

[TOC]

在最近几章中，我们反复探讨了系统如何处理错误。例如，我们讨论了**副本故障切换**（“[处理节点中断](ch5.md#处理节点宕机)”）、**复制延迟**（“[复制延迟问题](ch5.md#复制延迟问题)”）和事务控制（“[弱隔离级别](ch7.md#弱隔离级别)”）。通过了解实际系统中可能出现的各种边缘情况，我们可以更好地应对这些问题。

尽管我们已经讨论了许多错误，但之前的章节仍然过于乐观。现实往往更加严峻。现在我们将采取最悲观的态度，假设任何可能出错的事情都会出错[^i]。（经验丰富的系统运维人员会告诉你，这是一个合理的假设。如果你问得好，他们可能会一边治疗心理创伤一边告诉你一些可怕的故事。）

[^i]: 除了一个例外：我们将假定故障是非拜占庭式的（请参阅 “[拜占庭故障](#拜占庭故障)”）。

使用分布式系统与在单台计算机上编写软件有着根本的区别，主要在于分布式系统中有许多新颖且复杂的方法可以使事情出错【1,2】。在本章中，我们将探讨实践中出现的问题，理解哪些是可以依赖的，哪些是不能依赖的。

作为工程师，我们的任务是构建能够在各种情况下正常工作的系统（即满足用户期望的保证），即使一切都在出错。在 [第九章](ch9.md) 中，我们将介绍一些可以在分布式系统中提供这种保证的算法。但在本章中，我们必须首先了解我们面临的挑战。

本章将对分布式系统中可能出现的问题进行彻底的悲观总结。我们将研究网络问题（“[不可靠的网络](#不可靠的网络)”）；时钟和时序问题（“[不可靠的时钟](#不可靠的时钟)”）；以及如何尽量避免这些问题。所有这些问题都会带来困惑，因此我们将探讨如何思考分布式系统的状态，以及如何推理发生的事情（“[知识、真相与谎言](#知识、真相与谎言)”）。

## 故障与部分失效

当你在一台计算机上编写程序时，它通常会以一种相当可预测的方式执行：要么工作，要么不工作。充满错误的软件可能会让人觉得电脑有时候也会有 “糟糕的一天”（这种问题通常是重新启动就恢复了），但这主要是软件编写不佳的结果。

单个计算机上的软件没有根本性的不可靠原因：当硬件正常工作时，相同的操作总是产生相同的结果（这是确定性的）。如果存在硬件问题（例如，内存损坏或连接器松动），其后果通常是整个系统故障（例如，内核恐慌、“蓝色屏幕死机”，启动失败）。装有良好软件的个人计算机通常要么功能完好，要么完全失效，而不是介于两者之间。

这是计算机设计中的一个有意选择：如果发生内部错误，我们宁愿电脑完全崩溃，而不是返回错误的结果，因为错误的结果很难处理。因为计算机隐藏了模糊不清的物理实现，并呈现出一个理想化的系统模型，并以数学一样的完美方式运作。CPU 指令总是做同样的事情；如果你将一些数据写入内存或磁盘，那么这些数据将保持不变，并且不会被随机破坏。从第一台数字计算机开始，*始终正确地计算* 这个设计目标贯穿始终【3】。

当你编写运行在多台计算机上的软件时，情况有本质上的区别。在分布式系统中，我们不再处于理想化的系统模型中，我们别无选择，只能面对现实世界的混乱现实。而在现实世界中，各种各样的事情都可能会出现问题【4】，如下面的轶事所述：

> 在我有限的从业经历中，我已经和很多东西打过交道：单个 **数据中心（DC）** 中长期存在的网络分割，配电单元 PDU 故障，交换机故障，整个机架的意外重启，整个数据中心主干网络故障，整个数据中心的电源故障，以及一个低血糖的司机把他的福特皮卡撞在数据中心的 HVAC（加热、通风和空调）系统上。而且我甚至不是一个运维。
>
> —— 柯达黑尔

在分布式系统中，尽管系统的其他部分工作正常，但系统的某些部分可能会以某种不可预知的方式被破坏。这被称为 **部分失效（partial failure）**。难点在于部分失效是 **不确定性的（nondeterministic）**：如果你试图做任何涉及多个节点和网络的事情，它有时可能会工作，有时会出现不可预知的失败。正如我们将要看到的，你甚至不知道是否成功了，因为消息通过网络传播的时间也是不确定的！

这种不确定性和部分失效的可能性，使得分布式系统难以管理【5】。

### 云计算与超级计算机

关于如何构建大型计算系统有一系列哲学：
- 一个极端是高效能计算（HPC）领域。具有数千个 CPU 的超级计算机通常用于计算密集型科学计算任务，如天气预报或分子动力学（模拟原子和分子的运动）。
- 另一个极端是 **云计算（cloud computing）**，云计算并不是一个良好定义的概念【6】，但通常与多租户数据中心、连接 IP 网络（通常是以太网）的商用计算机、弹性/按需资源分配以及计量计费等相关联。
- 传统企业数据中心位于这两个极端之间。

不同的哲学会导致不同的故障处理方式。在超级计算机中，作业通常会不时地将计算的状态存档到持久存储中。如果一个节点出现故障，通常的解决方案是简单地停止整个集群的工作负载。故障节点修复后，计算从上一个检查点重新开始【7,8】。因此，超级计算机更像是一个单节点计算机而不是分布式系统：透过让部分失败升级为完全失败来处理部分失败——如果系统的任何部分发生故障，只是让所有的东西都崩溃（就像单台机器上的核心恐慌一样）。