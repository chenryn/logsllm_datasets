---
author: K. Gretchen Greene
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4176
date: '2018-06-14 11:17:29'
editorchoice: false
excerpt: 我们能否自动应用简单的配色方案，而无需手绘数百个训练数据示例？
fromurl: https://opensource.com/article/18/4/dragonpaint-bootstrapping
id: 9744
islctt: true
largepic: /data/attachment/album/201806/14/111733cp2j1px17w2mz27x.png
permalink: /article-9744-1.html
pic: /data/attachment/album/201806/14/111733cp2j1px17w2mz27x.png.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我们能否自动应用简单的配色方案，而无需手绘数百个训练数据示例？
tags:
- 机器学习
thumb: false
title: 使用机器学习进行卡通上色
titlepic: true
translator: hopefully2333
updated: '2018-06-14 11:17:29'
---

> 我们能否自动应用简单的配色方案，而无需手绘数百个训练数据示例？

![](/data/attachment/album/201806/14/111733cp2j1px17w2mz27x.png)

监督式机器学习面临的一个主要问题是需要大量的标记数据。尽管我们生活在一个大数据时代，但大多数个人和组织仍然难以获取足够的标记数据。虽然少数公司可以访问大量特定类型的标记数据，但对于大多数组织和应用来说，创建足够数量的正确类型的数据成本高昂，几乎不可能实现。在某些情况下，如诊断罕见疾病或匹配少量样本时，数据量不足的问题尤为突出。此外，通过Amazon Turkers或暑期工等人工方式对数据进行分类的成本也非常高，特别是在处理电影长度的视频时，每一帧都需要分类，即使每帧只需一分钱，总成本也会迅速增加。

### 大数据需求的问题

我们的团队正在尝试解决一个具体问题：是否可以在没有数百或数千个手工绘制的训练数据的情况下，训练出一个模型来为黑白像素图像提供简单的配色方案？在这个实验（我们称之为“龙画”）中，面对深度学习对大量标记数据的需求，我们采用了以下策略：

* **基于规则的小数据集快速扩展**：利用几何规则快速生成小规模数据集。
* **借用TensorFlow图像转换模型Pix2Pix框架**：在训练数据非常有限的情况下实现自动化卡通渲染。

我曾见过Pix2Pix框架，在一篇由Isola等人撰写的论文《Image-to-Image Translation with Conditional Adversarial Networks》中描述了该模型。假设A是风景图B的灰度版本，在对AB对进行训练后，可以对风景图片进行上色。我的问题与此类似，唯一的区别在于训练数据的数量。为了训练模型，我需要成千上万甚至成百上千的训练数据，但我并不想花费大量时间手绘和上色这些图像。

基于Pix2Pix的要求，我们需要至少400到1000个黑白和彩色配对的数据。然而，我只愿意绘制大约30个。因此，我绘制了一小部分卡通花和卡通龙，并将其纳入数据集中。

### 80% 的解决方案：按组件上色

![Characters colored by component rules](/data/attachment/album/201806/14/111734h74gpphxl1h4h7g7.png "Characters colored by component rules")

*按组件规则对黑白像素进行上色*

当面临训练数据短缺时，首先要问的是，是否存在一种非机器学习的方法可以解决问题，或者至少提供部分解决方案。我们真的需要使用机器学习来为花和龙上色吗？或者我们可以指定几何规则来进行上色？

![How to color by components](/data/attachment/album/201806/14/111734gx7dng3nsn78z34s.png "How to color by components")

*如何按组件进行上色*

实际上，有一种非机器学习的方法可以解决这个问题。我可以告诉一个孩子如何给我的画上色：将花的中心涂成橙色，花瓣涂成黄色，龙的身体涂成橙色，尖刺涂成黄色。

虽然一开始看起来这种方法似乎帮助不大，因为计算机无法识别什么是中心、花瓣、身体和尖刺，但我们可以通过连接组件来定义花和龙的部分。例如，在二进制黑白图像中，单击一个白色像素，这个像素会在不穿过黑色的情况下变成新的颜色。在一个规则相同的卡通龙或花的素描中，最大的白色组件是背景，下一个最大的组件是身体（包括手臂和腿）或花的中心，其余部分是尖刺和花瓣。除了龙的眼睛，可以通过与背景的距离来区分。

### 使用战略规则和 Pix2Pix 达到 100%

我的一些素描不符合规则，例如，一条粗心画下的线可能会留下缺口，一条后肢可能会上成尖刺的颜色，一个小而居中的雏菊会交换花瓣和中心的上色规则。

![](/data/attachment/album/201806/14/111735lm0bzspbsstzhsms.png)

对于那20%无法用几何规则上色的部分，我们需要其他方法来处理。我们转向Pix2Pix模型，它至少需要400到1000个素描/彩色对作为数据集（这是Pix2Pix论文中的最小数据集），其中包括违反规则的例子。对于每个违反规则的例子，我们最终都会通过手工上色（如后肢）或选择一些符合规则的素描/彩色对来打破规则。我们在A中删除一些线，或者使用相同函数(f)将A和B转换为新的一对f(A)和f(B)，从而将一个小而居中的花朵加入数据集。

### 使用高斯滤波器和同胚增大到最大

在计算机视觉中，使用几何变换增强数据集是很常见的做法，例如旋转、平移和缩放。但是，如果我们需要将向日葵转换为雏菊或将龙的鼻子变为球形和尖刺形呢？或者，如果我们只需要大幅增加数据量而不担心过拟合呢？那么我们需要比最初使用的数据集大10到30倍的数据集。

![Sunflower turned into a daisy with r -> r cubed](/data/attachment/album/201806/14/111735t6ssdzjut6t88dot.png "Sunflower turned into a daisy with r -> r cubed")

*向日葵通过 r -> r 立方体方式变成一个雏菊*

![Gaussian filter augmentations](/data/attachment/album/201806/14/111735u7xxg8ekxh8mkf2z.png "Gaussian filter augmentations")

*高斯滤波器增强*

单位盘的一些同胚可以形成很好的雏菊（例如 r -> r 立方体），高斯滤波器可以改变龙的鼻子。这两种方法对于快速扩展数据集非常有用，并且生成的大量数据都是我们需要的。然而，它们也会开始以一种无法通过仿射变换的方式来改变绘画风格。

### 我们可以走多远？

我们如何才能自动化地设计一个简单的上色方案？上述内容引发了一个更广泛的问题：是什么定义了艺术家的风格，无论是外部观察者还是艺术家自己？他们何时确定了自己的绘画风格？他们是否有自己的绘画算法？工具、助手和合作者之间的区别是什么？

### 我们可以走多远？

我们画画的投入可以有多低？保持在一个主题内并且风格可辨认为某个艺术家的作品，在这个范围内我们可以创造出多少变化和复杂性？我们需要做什么才能完成一幅包含无限长颈鹿、龙和花的游行画卷？如果我们有了这样一幅画，我们可以用它来做什么？

这些都是我们将在未来工作中继续探索的问题。

目前，规则、增强和Pix2Pix模型已经发挥了作用。我们可以很好地为花上色，为龙上色也不错。

![Results: flowers colored by model trained on flowers](/data/attachment/album/201806/14/111736i6zwc03hwccdd0zo.png "Results: flowers colored by model trained on flowers")

*结果：通过花的模型训练来为花上色*

![Results: dragons trained on model trained on dragons](/data/attachment/album/201806/14/111736yqo9zo4cqnkr2orj.png "Results: dragons trained on model trained on dragons")

*结果：通过龙的模型训练来为龙上色*

欲了解更多信息，请参阅Gretchen Greene在PyCon Cleveland 2018上的演讲《DragonPaint – bootstrapping small data to color cartoons》。

---
via: 
作者：[K. Gretchen Greene](https://opensource.com/users/kggreene) 选题：[lujun9972](https://github.com/lujun9972) 译者：[hopefully2333](https://github.com/hopefully2333) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出