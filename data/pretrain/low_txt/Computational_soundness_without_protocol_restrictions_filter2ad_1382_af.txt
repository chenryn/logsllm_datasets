# Internationalisation Programme and Funding Acknowledgments

The research was supported by the European Regional Development Fund through the Estonian Center of Excellence in Computer Science (EXCS) and the European Social Fund through the Estonian Doctoral School in Information and Communication Technology. Michael Backes received support from CISPA (Center for IT-Security, Privacy, and Accountability) and an ERC starting grant. Part of the work was conducted while Ankit Malik was at MPI-SWS and Dominique Unruh was at the Cluster of Excellence "Multimodal Computing and Interaction."

## Appendix A: Implementation Conditions

1. **Implementation of M**: A is an implementation of M as defined in [4], where all functions \( A_f \) (for \( f \in C \cup D \)) are polynomial-time computable.

2. **Bitstring Types**: There are disjoint and efficiently recognizable sets of bitstrings representing different types:
   - Nonces
   - Ciphertexts
   - Encryption keys
   - Decryption keys
   - Signatures
   - Verification keys
   - Signing keys
   - Pairs
   - Payload-strings
   The set of all bitstrings of type nonce is denoted as \( \text{Nonces}_k \), where \( k \) is the security parameter.

3. **Length Regularity**: The functions \( A_{\text{enc}}, A_{\text{ek}}, A_{\text{dk}}, A_{\text{sig}}, A_{\text{vk}}, A_{\text{sk}}, \) and \( A_{\text{pair}} \) are length-regular. A function \( f \) is length-regular if \( |m_i| = |m'_i| \) for \( i = 1, \ldots, n \) implies \( |f(m)| = |f(m')| \). All \( m \in \text{Nonces}_k \) have the same length.

4. **Random Nonce Generation**: \( A_N \) for \( N \in \mathbb{N} \) returns a uniformly random \( r \in \text{Nonces}_k \).

5. **Type Consistency**:
   - Every image of \( A_{\text{enc}} \) is of type ciphertext.
   - Every image of \( A_{\text{ek}} \) and \( A_{\text{ekof}} \) is of type encryption key.
   - Every image of \( A_{\text{dk}} \) is of type decryption key.
   - Every image of \( A_{\text{sig}} \) is of type signature.
   - Every image of \( A_{\text{vk}} \) and \( A_{\text{vkof}} \) is of type verification key.
   - Every image of \( A_{\text{empty}}, A_{\text{string0}}, \) and \( A_{\text{string1}} \) is of type payload-string.

6. **Pair Operations**:
   - For all \( m_1, m_2 \in \{0, 1\}^* \), we have \( A_{\text{fst}}(A_{\text{pair}}(m_1, m_2)) = m_1 \) and \( A_{\text{snd}}(A_{\text{pair}}(m_1, m_2)) = m_2 \).
   - Every \( m \) of type pair is in the range of \( A_{\text{pair}} \).
   - If \( m \) is not of type pair, \( A_{\text{fst}}(m) = A_{\text{snd}}(m) = \bot \).

7. **Payload-String Operations**:
   - For all \( m \) of type payload-string, \( A_{\text{unstringi}}(A_{\text{stringi}}(m)) = m \) and \( A_{\text{unstringi}}(A_{\text{stringj}}(m)) = \bot \) for \( i, j \in \{0, 1\}, i \neq j \).
   - For \( m = \text{empty} \) or \( m \) not of type payload-string, \( A_{\text{unstring0}}(m) = A_{\text{unstring1}}(m) = \bot \).
   - Every \( m \) of type payload-string is of the form \( m = A_{\text{string0}}(m') \) or \( m = A_{\text{string1}}(m') \) or \( m = \text{empty} \) for some \( m' \) of type payload-string.
   - For all \( m \) of type payload-string, \( |A_{\text{string0}}(m)|, |A_{\text{string1}}(m)| > |m| \).

8. **Encryption Key Extraction**:
   - \( A_{\text{ekof}}(A_{\text{enc}}(p, x, y)) = p \) for all \( p \) of type encryption key, \( x \in \{0, 1\}^* \), \( y \in \text{Nonces}_k \).
   - \( A_{\text{ekof}}(e) \neq \bot \) for any \( e \) of type ciphertext and \( A_{\text{ekof}}(e) = \bot \) for any \( e \) that is not of type ciphertext.

9. **Verification Key Extraction**:
   - \( A_{\text{vkof}}(A_{\text{sig}}(A_{\text{sk}}(x), y, z)) = A_{\text{vk}}(x) \) for all \( y \in \{0, 1\}^*, x, z \in \text{Nonces}_k \).
   - \( A_{\text{vkof}}(e) \neq \bot \) for any \( e \) of type signature and \( A_{\text{vkof}}(e) = \bot \) for any \( e \) that is not of type signature.

10. **Encryption Constraints**:
    - \( A_{\text{enc}}(p, m, y) = \bot \) if \( p \) is not of type encryption key.
    - \( A_{\text{dec}}(A_{\text{dk}}(r), m) = \bot \) if \( r \in \text{Nonces}_k \) and \( A_{\text{ekof}}(m) \neq A_{\text{ek}}(r) \) (This implies that the encryption key is uniquely determined by the decryption key).
    - \( A_{\text{dec}}(d, c) = \bot \) if \( A_{\text{ekof}}(c) \neq A_{\text{ekofdk}}(d) \) or \( A_{\text{ekofdk}}(d) = \bot \).
    - \( A_{\text{dec}}(d, A_{\text{enc}}(A_{\text{ekofdk}}(e), m, r)) = m \) if \( r \in \text{Nonces}_k \) and \( d := A_{\text{ekofdk}}(e) \neq \bot \).
    - \( A_{\text{ekofdk}}(d) = \bot \) if \( d \) is not of type decryption key.
    - \( A_{\text{ekofdk}}(A_{\text{dk}}(r)) = A_{\text{ek}}(r) \) for all \( r \in \text{Nonces}_k \).
    - \( A_{\text{vkofsk}}(s) = \bot \) if \( s \) is not of type signing key.
    - \( A_{\text{vkofsk}}(A_{\text{sk}}(r)) = A_{\text{vk}}(r) \) for all \( r \in \text{Nonces}_k \).
    - \( A_{\text{dec}}(A_{\text{dk}}(r), A_{\text{enc}}(A_{\text{ek}}(r), m, r')) = m \) for all \( r, r' \in \text{Nonces}_k \).
    - \( A_{\text{verify}}(A_{\text{vk}}(r), A_{\text{sig}}(A_{\text{sk}}(r), m, r')) = m \) for all \( r, r' \in \text{Nonces}_k \).
    - For all \( p, s \in \{0, 1\}^* \), if \( A_{\text{verify}}(p, s) \neq \bot \), then \( A_{\text{vkof}}(s) = p \).
    - \( A_{\text{isek}}(x) = x \) for any \( x \) of type encryption key and \( A_{\text{isek}}(x) = \bot \) for any \( x \) not of type encryption key.
    - \( A_{\text{isvk}}(x) = x \) for any \( x \) of type verification key and \( A_{\text{isvk}}(x) = \bot \) for any \( x \) not of type verification key.
    - \( A_{\text{isenc}}(x) = x \) for any \( x \) of type ciphertext and \( A_{\text{isenc}}(x) = \bot \) for any \( x \) not of type ciphertext.
    - \( A_{\text{issig}}(x) = x \) for any \( x \) of type signature and \( A_{\text{issig}}(x) = \bot \) for any \( x \) not of type signature.

11. **Encryption Scheme**:
    - Define an encryption scheme \((\text{KeyGen}, \text{Enc}, \text{Dec})\) as follows:
      - \(\text{KeyGen}\) picks a random \( r \leftarrow \text{Nonces}_k \) and returns \((A_{\text{ek}}(r), A_{\text{dk}}(r))\).
      - \(\text{Enc}(p, m)\) picks a random \( r \leftarrow \text{Nonces}_k \) and returns \( A_{\text{enc}}(p, m, r) \).
      - \(\text{Dec}(k, c)\) returns \( A_{\text{dec}}(k, c) \).
    - We require that \((\text{KeyGen}, \text{Enc}, \text{Dec})\) is PROG-KDM secure.
    - Additionally, we require that \((\text{KeyGen}, \text{Enc}, \text{Dec})\) is malicious-key extractable.

12. **Signature Scheme**:
    - Define a signature scheme \((\text{SKeyGen}, \text{Sig}, \text{Verify})\) as follows:
      - \(\text{SKeyGen}\) picks a random \( r \leftarrow \text{Nonces}_k \) and returns \((A_{\text{vk}}(r), A_{\text{sk}}(r))\).
      - \(\text{Sig}(p, m)\) picks a random \( r \leftarrow \text{Nonces}_k \) and returns \( A_{\text{sig}}(p, m, r) \).
      - \(\text{Verify}(p, s, m)\) returns 1 if and only if \( A_{\text{verify}}(p, s) = m \).
    - We require that \((\text{SKeyGen}, \text{Sig}, \text{Verify})\) is strongly existentially unforgeable.

13. **Negligible Probability**:
    - For all \( e \) of type encryption key and all \( m, m' \in \{0, 1\}^* \), the probability that \( A_{\text{enc}}(e, m, r) = A_{\text{enc}}(e, m', r') \) for uniformly chosen \( r, r' \in \text{Nonces}_k \) is negligible.
    - For all \( rs \in \text{Nonces}_k \) and all \( m \in \{0, 1\}^* \), the probability that \( A_{\text{sig}}(A_{\text{sk}}(rs), m, r) = A_{\text{sig}}(A_{\text{sk}}(rs), m, r') \) for uniformly chosen \( r, r' \in \text{Nonces}_k \) is negligible.

14. **Injectivity**:
    - \( A_{\text{ekofdk}} \) is injective (i.e., the encryption key uniquely determines the decryption key).
    - \( A_{\text{vkofsk}} \) is injective (i.e., the verification key uniquely determines the signing key).

## References

1. M. Abadi and A. D. Gordon. A calculus for cryptographic protocols: The spi calculus. In Proc. 4th ACM Conference on Computer and Communications Security, pages 36–47, 1997.
2. M. Abadi and P. Rogaway. Reconciling two views of cryptography: The computational soundness of formal encryption. In Proc. 1st IFIP International Conference on Theoretical Computer Science, volume 1872 of LNCS, pages 3–22. Springer, 2000.
3. P. Adão, G. Bana, J. Herzog, and A. Scedrov. Soundness and completeness of formal encryption: The cases of key cycles and partial information leakage. Journal of Computer Security, 17(5):737–797, 2009.
4. M. Backes, D. Hofheinz, and D. Unruh. CoSP: A general framework for computational soundness proofs. In ACM CCS 2009, pages 66–78, November 2009.
5. M. Backes, D. Hofheinz, and D. Unruh. CoSP: A general framework for computational soundness proofs. IACR Cryptology ePrint Archive 2009/080, 2009. Version from 2009-02-18.
6. M. Backes, M. Maffei, and D. Unruh. Computationally sound verification of source code. In ACM CCS 2010, pages 387–398. ACM Press, October 2010. Preprint on IACR ePrint 2010/416.
7. M. Backes, A. Malik, and D. Unruh. Computational Soundness without Protocol Restrictions. IACR ePrint archive, 2012. Full version of this paper.
8. M. Backes and B. Pfitzmann. Symmetric encryption in a simulatable Dolev-Yao style cryptographic library. In Proc. 17th IEEE Computer Security Foundations Workshop (CSFW), pages 204–218, 2004.
9. M. Backes, B. Pfitzmann, and A. Scedrov. Key-dependent message security under active attacks - brsim/uc-soundness of dolev-yao-style encryption with key cycles. Journal of Computer Security, 16(5):497–530, 2008.
10. M. Backes, B. Pfitzmann, and M. Waidner. A composable cryptographic library with nested operations (extended abstract). In Proc. 10th ACM Conference on Computer and Communications Security, pages 220–230, 2003. Full version in IACR Cryptology ePrint Archive 2003/015, Jan. 2003, http://eprint.iacr.org/2003/015.
11. M. Backes and D. Unruh. Computational soundness of symbolic zero-knowledge proofs. Journal of Computer Security, 18(6):1077–1155, 2010. Preprint on IACR ePrint 2008/152.
12. G. Bana and H. Comon-Lundh. Towards unconditional soundness: Computationally complete symbolic attacker. In P. Degano and J. Guttman, editors, Principles of Security and Trust, volume 7215 of Lecture Notes in Computer Science, pages 189–208. Springer Berlin / Heidelberg, 2012.
13. D. Basin, S. Mödersheim, and L. Viganò. OFMC: A symbolic model checker for security protocols. International Journal of Information Security, 2004.
14. M. Bellare, D. Hofheinz, and S. Yilek. Possibility and impossibility results for encryption and commitment secure under selective opening. In EUROCRYPT 2009, pages 1–35, 2009.
15. M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In ACM Conference on Computer and Communications Security, pages 62–73, 1993.
16. M. Bellare and P. Rogaway. Optimal asymmetric encryption. In Advances in Cryptology: EUROCRYPT '94, volume 950 of LNCS, pages 92–111. Springer, 1994.
17. F. Böhl, D. Hofheinz, and D. Kraschewski. On definitions of selective opening security. In M. Fischlin, J. Buchmann, and M. Manulis, editors, PKC 2012, volume 7293 of LNCS, pages 522–539. Springer, 2012.
18. J. Camenisch, N. Chandran, and V. Shoup. A public key encryption scheme secure against key dependent chosen plaintext and adaptive chosen ciphertext attacks. In A. Joux, editor, Eurocrypt 2009, volume 5479 of LNCS, pages 351–368. Springer, 2009.
19. R. Canetti and J. Herzog. Universally composable symbolic analysis of mutual authentication and key exchange protocols. In Proc. 3rd Theory of Cryptography Conference (TCC), volume 3876 of LNCS, pages 380–403. Springer, 2006.
20. H. Comon-Lundh, V. Cortier, and G. Scerri. Security proof with dishonest keys. In POST, pages 149–168, 2012.
21. V. Cortier, S. Kremer, and B. Warinschi. A survey of symbolic methods in computational analysis of cryptographic systems. J. Autom. Reasoning, 46(3-4):225–259, 2011.
22. V. Cortier and B. Warinschi. Computationally sound, automated proofs for security protocols. In Proc. 14th European Symposium on Programming (ESOP), pages 157–171, 2005.
23. D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(2):198–208, 1983.
24. S. Even and O. Goldreich. On the security of multi-party ping-pong protocols. In Proc. 24th IEEE Symposium on Foundations of Computer Science (FOCS), pages 34–39, 1983.
25. R. Kemmerer, C. Meadows, and J. Millen. Three systems for cryptographic protocol analysis. Journal of Cryptology, 7(2):79–130, 1994.
26. P. Laud. Semantics and program analysis of computationally secure information flow. In Proc. 10th European Symposium on Programming (ESOP), pages 77–91, 2001.
27. P. Laud. Symmetric encryption in automatic analyses for confidentiality against active adversaries. In Proc. 25th IEEE Symposium on Security & Privacy, pages 71–85, 2004.
28. G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Proc. 2nd International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), volume 1055 of LNCS, pages 147–166. Springer, 1996.
29. L. Mazaré and B. Warinschi. Separating trace mapping and reactive simulatability soundness: The case of adaptive corruption. In P. Degano and L. Viganò, editors, ARSPA-WITS 2009, volume 5511 of LNCS, pages 193–210. Springer, 2009.
30. M. Merritt. Cryptographic Protocols. PhD thesis, Georgia Institute of Technology, 1983.
31. D. Micciancio and B. Warinschi. Soundness of formal encryption in the presence of active adversaries. In Proc. 1st Theory of Cryptography Conference (TCC), volume 2951 of LNCS, pages 133–151. Springer, 2004.
32. J. B. Nielsen. Separating random oracle proofs from complexity theoretic proofs: The non-committing encryption case. In M. Yung, editor, Advances in Cryptology, Proceedings of CRYPTO '02, volume 2442 of Lecture Notes in Computer Science, pages 111–126. Springer-Verlag, 2002.
33. L. Paulson. The inductive approach to verifying cryptographic protocols. Journal of Cryptology, 6(1):85–128, 1998.
34. S. Schneider. Security properties and CSP. In Proc. 17th IEEE Symposium on Security & Privacy, pages 174–187, 1996.
35. D. Unruh. Programmable encryption and key-dependent messages. IACR ePrint archive 2012/423, 2012.