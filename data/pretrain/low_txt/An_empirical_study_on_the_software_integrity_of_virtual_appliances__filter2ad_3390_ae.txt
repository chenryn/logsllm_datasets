### Potentially Malicious Files in Virtual Appliances (VAs)

The flagged files are indeed potentially malicious. For instance, `ctrlaltdel` appeared as unverified in 13 VAs, but only 6 of them were flagged by VirusTotal.

All 10 VAs infected with a potentially malicious file belong to ILG 3 (see Table 4). This is somewhat expected, given the higher number of unverified files in ILG 3. Interestingly, only 7 of these VAs belong to Cluster 2 (see Table 4), which is characterized by a large number of low-integrity packages. Notably, out of the 14 VAs in Cluster 2, virus scanners flagged only about 50% as potentially untrustworthy. This underscores the need for our framework, as it can also flag the remaining 50% that are equally suspicious and would likely not meet customer expectations for standard or well-known workflows, such as an Apache web server.

### Scoring and Policy for Malicious Files

Packages containing malicious files will receive a score of 0, discouraging consumers from selecting VAs with these files. Providers could implement a policy that disallows such VAs from being published. The results clearly indicate the necessity of checking VAs against virus scanners. Our approach significantly reduces the number of files that need to be checked, as only unverified files (i.e., those failing whitelist checks) need to be scanned. These unverified files represent only a small portion of the total; 90% of VAs contain less than 4.5% unverified files (see Figure 3). For VAs in ILG C (see Table 3), this means checking only about 2,012 unverified files through a virus scanner, rather than all 52,198 files.

### Combined Approach and Expanded Integrity Scores

To demonstrate the effectiveness of the combined approach and expanded integrity scores, we checked all unverified files against VirusTotal [9]. We thank VirusTotal for allowing us to scan a large volume of files.

### Integrating Integrity Scores with Security Vulnerability Assessments

Expanded integrity scores provide a partial view of VA security. A VA with 100% cleanly installed packages may be more secure than one with some modified packages, but not always. If clean packages have known security vulnerabilities, the first VA might be equally or even more insecure than the second. Therefore, to make strong claims about VA security, we must consider whether packages have known vulnerabilities and integrate this information with their integrity scores.

Numerous security companies assess software vulnerabilities and report them. This information can be used to create a more comprehensive verification report, indicating which packages are secure or have known vulnerabilities. The corresponding integrity scores would then provide a stronger indication of VA security. Providers could use this information to define a whitelist of secure software packages or combinations and a blacklist of packages with known vulnerabilities or bugs. Compliance policies could then specify which software combinations are allowed and which should be prohibited.

### Conclusions and Future Work

We studied the integrity of software packages in real-world VAs using a software whitelist-based framework and found significant variance in software integrity across VAs. Our analysis of 151 Amazon VAs showed that about 9% were configured with a significant portion of modified (low-integrity) packages, without any indication of publishers' efforts to customize them. This highlights the need for a priori assessment of software integrity to help consumers select correctly installed VAs. Virus scanners flagged only about half of the VAs in this 9%, showing that whitelisting-based integrity assessment complements blacklisting techniques like virus scanners. While whitelist-based techniques are challenging to implement, the rate at which the whitelist size grows slows down over time due to the repeated installation of many software packages on multiple VAs.

In the future, we plan to expand the integrity assessment framework to compute an overall trust score for a VA based on individual package integrity scores, considering factors such as the criticality of the software package and consumer preferences. We will also explore VAs built on Windows or other Linux distributions (e.g., dpkg-based distributions) to further validate our findings.

### Acknowledgments

This research was partially sponsored by the Air Force Research Laboratory and the Air Force Office of Scientific Research under agreement number FA8750-11-2-0084. We thank Jenny Applequist for her editorial assistance and the anonymous reviewers for their careful attention and insightful comments.

### References

[1] Amazon Elastic Compute Cloud. http://aws.amazon.com/ec2/
[2] Amazon Machine Images (AMIs). http://aws.amazon.com/amis
[3] Bit9 Global Software Registry. http://www.bit9.com/products/bit9-global-software-registry.php
[4] BitNami Virtual Images. http://bitnami.org/learn_more/virtual_machines
[5] CUBRID Virtual Images. http://www.cubrid.org/virtual_machine_images
[6] IBM SmartCloud.
[7] NIST National Software Reference Library. http://www.nsrl.nist.gov/
[8] Thunderflash Pre-Built Virtual Images. http://thunderflash.com/
[9] Virustotal. https://www.virustotal.com/
[10] VMWare Solution Exchange. https://solutionexchange.vmware.com/
[11] Security Guidance for Critical Areas of Focus in Cloud Computing. http://www.cloudsecurityalliance.org/guidance/csaguide.pdf, April 2009
[12] AntiVirus Performance Statistics. http://winnow.oitc.com/malewarestats.php, August 2012
[13] G. Ammons, V. Bala, T. Mummert, D. Reimer, and X. Zhang. Virtual machine images as structured data: the mirage image library. In Proceedings of the 3rd USENIX conference on Hot topics in cloud computing, HotCloud’11, pages 22–22, Berkeley, CA, USA, 2011. USENIX Association.
[14] M. Armbrust, A. Fox, R. Griffith, A. D. Joseph, R. Katz, A. Konwinski, G. Lee, D. Patterson, A. Rabkin, I. Stoica, and M. Zaharia. A view of cloud computing. Commun. ACM, 53(4):50–58, Apr. 2010.
[15] K. D. Bowers, A. Juels, and A. Oprea. Hail: a high-availability and integrity layer for cloud storage. In E. Al-Shaer, S. Jha, and A. D. Keromytis, editors, ACM Conference on Computer and Communications Security, pages 187–198. ACM, 2009.
[16] K. D. Bowers, M. van Dijk, A. Juels, A. Oprea, and R. L. Rivest. How to tell if your cloud files are vulnerable to drive crashes. In Y. Chen, G. Danezis, and V. Shmatikov, editors, ACM Conference on Computer and Communications Security, pages 501–514. ACM, 2011.
[17] Bugiel, Sven and Nürnberger, Stefan and Pöppelmann, Thomas and Sadeghi, Ahmad-Reza and Schneider, Thomas. AmazonIA: when elasticity snaps back. In Proceedings of the 18th ACM conference on Computer and communications security, pages 389–400, New York, NY, USA, 2011. ACM.
[18] B. Danev, R. J. Masti, G. O. Karame, and S. Capkun. Enabling secure VM-vTPM migration in private clouds. In Proceedings of the 27th Annual Computer Security Applications Conference, pages 187–196, New York, NY, USA, 2011. ACM.
[19] T. Garfinkel and M. Rosenblum. When virtual is harder than real: security challenges in virtual machine based computing environments. In Proceedings of the 10th conference on Hot Topics in Operating Systems - Volume 10, HOTOS’05, pages 20–20, Berkeley, CA, USA, 2005. USENIX Association.
[20] J. H. Huh, H. Kim, J. Lyle, and A. Martin. Achieving attestation with less effort: an indirect and configurable approach to integrity reporting. In Proceedings of the sixth ACM workshop on Scalable trusted computing, pages 31–36, New York, NY, USA, 2011. ACM.
[21] K. R. Jayaram, C. Peng, Z. Zhang, M. Kim, H. Chen, and H. Lei. An empirical analysis of similarity in virtual machine images. In Proceedings of the Middleware 2011 Industry Track Workshop, Middleware ’11, pages 6:1–6:6, New York, NY, USA, 2011. ACM.
[22] John A. Rice. Mathematical Statistics and Data Analysis, chapter 10, page 365. Duxbury Press, 2 edition, 1994.
[23] G. Kim and E. Spafford. The design and implementation of tripwire: A file system integrity checker. In Proceedings of the 2nd ACM Conference on Computer and Communications Security, pages 18–29. ACM, 1994.
[24] N. Leavitt. Is cloud computing really ready for prime time? Computer, 42(1):15 –20, jan. 2009.
[25] N. Quynh and Y. Takefuji. A novel approach for a file-system integrity monitor tool of xen virtual machine. In Proceedings of the 2nd ACM symposium on Information, computer and communications security, pages 194–202. ACM, 2007.
[26] D. Reimer, A. Thomas, G. Ammons, T. Mummert, B. Alpern, and V. Bala. Opening black boxes: using semantic information to combat virtual machine image sprawl. In Proceedings of the fourth ACM SIGPLAN/SIGOPS international conference on Virtual execution environments, VEE ’08, pages 111–120, New York, NY, USA, 2008. ACM.
[27] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds. In Proceedings of the 16th ACM conference on Computer and communications security, CCS ’09, pages 199–212, New York, NY, USA, 2009. ACM.
[28] T. Ristenpart and S. Yilek. When good randomness goes bad: Virtual machine reset vulnerabilities and hedging deployed cryptography. In NDSS. The Internet Society, 2010.
[29] H. Takabi, J. Joshi, and G. Ahn. Security and privacy challenges in cloud computing environments. Security Privacy, IEEE, 8(6):24 –31, nov.-dec. 2010.
[30] TCG. TCG Infrastructure Working Group Architecture Part II - Integrity Management. http://www.trustedcomputinggroup.org/resources/infrastructure_work_group_architecture_part_ii_integrity_management_version_10, November 2006.
[31] D. Vincenzetti and M. Cotrozzi. Anti tampering program. In Proceedings of the Fourth {USENIX} Security Symposium, Santa Clara, CA. USENIX, 1993.
[32] J. Wei, X. Zhang, G. Ammons, V. Bala, and P. Ning. Managing security of virtual machine images in a cloud environment. In Proceedings of the 2009 ACM workshop on Cloud computing security, CCSW ’09, pages 91–96, New York, NY, USA, 2009. ACM.
[33] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter. Homealone: Co-residency detection in the cloud via side-channel analysis. In IEEE Symposium on Security and Privacy, pages 313–328. IEEE Computer Society, 2011.
[34] W. Zhou, P. Ning, X. Zhang, G. Ammons, R. Wang, and V. Bala. Always up-to-date: scalable offline patching of vm images in a compute cloud. In Proceedings of the 26th Annual Computer Security Applications Conference, ACSAC ’10, pages 377–386, New York, NY, USA, 2010. ACM.

### Appendix

#### A. Amortizing Performance Overheads

Mirage [13, 26] generates an index of a VA using the VA’s filesystem structure to simplify maintenance and management of a large collection of images. During index generation, Mirage computes hashes of all files in the VA to detect duplicates. Integrating our framework with the Mirage library involves adding a step to look up the hash of the files in a whitelist when a file is first encountered. This integration, along with other benefits of Mirage, such as reduced storage costs and query capabilities, significantly amortizes the cost of producing verification reports.

#### B. Correlation Between Medium-Integrity and Low-Integrity Packages

There is a correlation between the number of medium-integrity (partially clean) packages and the number of low-integrity (modified) packages (see Figure 8). As the number of packages with score 1 increases, so does the number of packages with score 2, and vice versa.

#### C. TMP and VAR Files

**Table 9: Most Common Files in "var" Folders**

| # VAs | Absolute Path |
|-------|---------------|
| 151   | var/log/wtmp  |
| 151   | var/log/spooler |
| 151   | var/log/secure |
| 151   | var/log/messages |
| 151   | var/log/maillog |
| 151   | var/lib/rpm/Triggername |
| 151   | var/lib/rpm/Sigmd5 |
| 151   | var/lib/rpm/Sha1header |
| 151   | var/lib/rpm/Requireversion |
| 151   | var/lib/rpm/Requirename |

As Figure 9 shows, most "var" files are log files and RPM database files, which can be deleted without affecting VA behavior. The RPM database, if needed, can be reconstructed after the VA is instantiated. We propose that temporary files be scrubbed from the VA before publication. Similarly, files in the "var" directory should also be scrubbed unless the software vendor metadata or the publisher's log explicitly mention the file as necessary.