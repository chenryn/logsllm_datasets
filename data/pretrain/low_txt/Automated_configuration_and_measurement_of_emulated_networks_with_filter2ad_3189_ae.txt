### Attribute Graphs for Network Abstraction

The attribute graphs we use as our underlying abstraction allow for easy extension, whether to add new protocols or to programmatically define network attributes. For example, adding a new routing protocol such as IS-IS can be achieved in three steps:
1. Adding an IS-IS overlay graph using the high-level API.
2. Extending the device compiler to condense the overlay attributes into the Resource Database.
3. Creating the text template for the resulting configuration.

Each step is modular, and the attribute graph approach reduces the complexity of supporting a new protocol or service to its inherent requirements. Basic IS-IS support, for instance, requires only 2 lines of design code and 15 lines in the compiler.

### 7.1 Hierarchical iBGP

A full-mesh iBGP design requires \(O(n^2)\) connections, which can be a scalability issue. One solution is to use route-reflectors [3]. Here, we discuss two ways of implementing route-reflector hierarchies.

Nodes can be labeled as route-reflectors by adding a boolean attribute, `rr`, set to `true` (or `false` if it is a client). The iBGP overlay topology is then constructed based on these attributes, with sessions added between all `(rr, rr)` and `(rr, client)` pairs. This constructs an iBGP hierarchy that aligns with the physical network, which is recommended to avoid oscillation problems (see §7.2).

Since the designation of a router as a route-reflector is attribute-based, it can be automated for algorithmic design. The `unwrap_graph` function is used to access the underlying NetworkX graph, to which a centrality algorithm such as `degree_centrality` can be applied. The results are filtered to select the most central routers. As the underlying graph is indexed by node IDs, the querying syntax is used to access the API for the node. For example, `G_ip.node('UK')` will return an overlay node for the UK node ID. The API is then used to mark these routers as route-reflectors and apply the same edge connection logic as before.

Combining the attribute-based configuration approach with NetworkX graph algorithms enables powerful and succinct extensions for network design and analysis.

### 7.2 Validating Theory: Bad Gadget

The system can also be extended to validate networking theory, such as subtle problems in protocols, particularly those resulting from protocol interactions. One such interaction is routing oscillations, as seen in the Bad-Gadget [20] scenario, where a routing protocol never converges to a fixed, consistent set of forwarding decisions. Even if MED use is disabled, oscillation can occur due to interactions between IGP and BGP routing protocols. This type of interaction can be difficult to simulate.

To illustrate the experimental approach, we recreated the Bad-Gadget scenario in emulation. Edge and node attributes were assigned graphically, and setup took less than five minutes. This allows researchers to focus on their experiments rather than setting up the laboratory. The system made it easy to implement the same network model on different types of routers, including Quagga, IOS, Junos, and C-BGP. Oscillations were observed in the last three but not in Quagga. Investigation revealed that this was due to the Quagga implementation of BGP, where the IGP tie-break was not used by default. This highlights the importance of emulation, as a simulated model of the idealized BGP decision process would not have shown this behavior. The result underscores the need for using multiple platforms to verify results and enable comparisons.

### 7.3 Further Extensions

Attribute graphs can be extended beyond basic Python primitive data types. By leveraging Python and NetworkX, extensions can utilize both the Python package library and NetworkX algorithms, allowing the creation of custom plugins for resource allocation (such as a new IP addressing scheme) or network analysis.

Expressing routing policy, a complex network configuration task, is used to influence the routing decision process to meet business and engineering goals. While there are tools to assist in this process [35] and studies on routing policy [6, 15], we do not attempt to automate routing policy. Instead, our attribute graph approach allows existing tools to be integrated. The routing policy can be stored as a string attribute on the edge in the iBGP topology graph, similar to the conﬁglet approach of [6], or transformed in the compiler. The string policy can be generated using an existing tool by passing the topology (as a graph) to the external tool and storing the returned policy on the edges, which are then stored in the Resource Database and written in the templates.

Another extension is integration with external network devices, either emulated or physical hardware. An advantage of emulation over simulation is that real packets, not simulations representing packets as internal data structures, are passed between devices. This allows integration with external networks, including services running on the emulation host (such as for scripting or a BGP feed), or connection to a set of lab hardware. In Netkit, this external connectivity can be implemented using the vde switch package.

Finally, supporting a new target platform involves inheriting the base device compiler and building the test-based render template. Multi-file configurations can be rendered using our template folder structure. This ease of adding platform support is enabled through the compiler, which condenses the overlay design graphs into a device-oriented format, and the use of text-based templates.

### 8. Conclusion

Large-scale network configuration is complex and error-prone, whether configuring a set of real devices or software systems emulating them. This burden may be justifiable in a commercial setting, but research experimentation requires repeatable configuration operations that only differ slightly. Emulation provides a way to support experimentation, testing, and "what-if" analysis, reducing the expense and inconvenience of real hardware but not the configuration burden.

In this paper, we describe a system that reduces the configuration burden by using abstraction, graphs, and templates, providing a more manageable approach to network configuration at scale. We decouple network-level design from device-level configuration state, allowing the specification of network-wide configuration behavior, which we believe is key to simplifying network configuration. We have demonstrated how an approach of configuration through transformation of attribute graphs can generate concrete router configurations and have implemented this approach in a working system.

The system is open-source, available on GitHub, and installed through the Python Package Index. It is used by network operators, router vendors, in university teaching, and as a base for published research. Our system offers an emulated experimentation platform that we hope can be extended by the networking community in future projects, encouraging the sharing of expertise between industry and researchers and reducing the requirement for each user to develop a home-grown configuration solution.

### Acknowledgements

The authors wish to acknowledge support from the Australian Research Council through ARC Linkage Grant LP100200493, an Australian Postgraduate Award, and Cisco Grant 2011-89493(3696). We thank Niklas Semmler, Askar Jaboldinov, Benjamin Hesmans, Olivier Tilmans, and members of the VIRL team at Cisco: Joel Obstfeld, Ed Kern, Tom Bryan, Dan Bourque, Miroslav Los, Qiang Sheng Wang, Scott Anderson, and Ian Wells. We are grateful to our anonymous reviewers and shepherd Xenofontas Dimitropoulos for their valuable feedback and comments, which improved the final version of this paper.

### 9. References

[1] Starbed. http://www.starbed.org/.
[2] G. Anuzelli. Dynagen. http://www.dynagen.org.
[3] T. Bates, E. Chen, and R. Chandra. BGP route reflection: An alternative to full mesh internal BGP (IBGP). RFC 4456, April 2006.
[4] S. Bellovin and R. Bush. Configuration management and security. IEEE JSAC, 27(3):268–274, 2009.
[13] J. Duerig, R. Ricci, J. Byers, and J. Lepreau. Automatic IP address assignment on network topologies. Technical Report Flux Technical Note FTN–2006–02, Feb. 2006.
[14] W. Enck, P. McDaniel, S. Sen, and P. Sebos. Configuration management at massive scale: System design and experience. USENIX ’07, June 2007.
[15] N. Feamster. Detecting BGP configuration faults with static analysis. In NSDI ’05, 2005.
[16] A. Flavel and M. Roughan. Stable and flexible iBGP. ACM SIGCOMM Computer Communication Review, 39(4):183–194, 2009.
[17] Google Inc. textfsm. http://code.google.com/p/textfsm/.
[18] T. Griffin. The Stratified Shortest-Paths Problem (Invited Paper). COMSNETS, Jan. 2010.
[19] T. Griffin and G. Huston. BGP Wedgies. Technical report, IETF RFC 4264, Nov. 2005.
[20] T. G. Griffin, F. B. Shepherd, and G. Wilfong. The stable paths problem and interdomain routing. IEEE/ACM Transactions on Networking (TON), 10(2), Apr. 2002.
[21] T. G. Griffin and G. Wilfong. An analysis of the MED oscillation problem in BGP. In ICNP, 2002.
[22] A. Hagberg, D. Schult, and P. Swart. Exploring network structure, dynamics, and function using networkx. In 7th Python in Science Conference, Pasadena, CA USA, 2008.
[23] N. Handigol, B. Heller, V. Jeyakumar, B. Lantz, and N. McKeown. Reproducible network experiments using container-based emulation. In CoNEXT ’12, Dec. 2012.
[24] Ivan Pepelnjak. Create Network Models with CML’s AutoNetKit - ipSpace.net by @ioshints. http://blog.ipspace.net/2013/10/create-network-models-with-cmls.html.
[25] Juniper Networks, Inc. Junosphere User Guide. Aug. 2011.
[26] S. Knight, H. Nguyen, N. Falkner, R. Bowden, and M. Roughan. The Internet Topology Zoo. Selected Areas in Communications, IEEE Journal on, 29(9):1765–1775, 2011.
[27] B. Lantz, B. Heller, and N. McKeown. A network in a laptop: rapid prototyping for software-defined networks. In Hotnets ’10, Oct. 2010.
[28] H. Nguyen, M. Roughan, S. Knight, N. Falkner, O. Maennel, and R. Bush. How to Build Complex, Large-Scale Emulated Networks. TridentCom, 46:3, 2011.
[29] D. Oppenheimer, A. Ganapathi, and D. A. Patterson. Why do Internet services fail, and what can be done about it? In (USITS ‘03), 2003.
[30] I. Phillips, O. Maennel, D. Perouli, R. Austein, C. Pelsser, K. Shima, and R. Bush. RPKI propagation emulation measurement: an early report. IETF Talk, July 2012.
[31] M. Pizzonia and M. Rimondini. Netkit: easy emulation of complex networks on inexpensive hardware. In Tridentcom 2008, page 7. ICST, Mar. 2008.
[5] BGP++ Configuration Utility. . http://www.ece.gatech.edu/research/labs/MANIACS/BGP++/bgppp_conf.html.
[32] M. Pizzonia and S. Vissicchio. Test Driven Network.
[6] H. Boehm, A. Feldmann, O. Maennel, C. Reiser, and R. Volk. Design and Realization of an AS-Wide Inter-Domain Routing Policy. pages 1–27, Mar. 2009.
[7] M. Bostock, V. Ogievetsky, and J. Heer. D3: Data-Driven Documents. IEEE Transactions on Visualization and Computer Graphics, 17(12), Dec. 2011.
[8] X. Chen, Z. M. Mao, and J. Van der Merwe. PACMAN: a platform for automated and controlled network operations and configuration management. In CoNEXT ’09, Dec. 2009.
[9] Cisco Systems. Cisco Cloud Service Router 1000V Series. http://www.cisco.com/en/US/products/ps12559/index.html.
[10] Cisco Systems. Virtual Internet Routing Lab. http://www.cisco.com/web/solutions/netsys/CiscoLive/virl/index.html.
[11] G. Di Battista, M. Patrignani, M. Pizzonia, F. Ricci, and M. Rimondini. NetKit-lab BGP: small-internet. In wiki.netkit.org. Roma Tre University, May 2007.
[12] G. Di Battista and M. Rimondini. Monitoring the status of MPLS VPN and VPLS based on BGP signaling information. Network Operations and ... , 2012. Deployment. Technical report, Dipartimento di Informatica e Automazione, Universita di Roma Tre., Mar. 2009.
[33] I. Poese, B. Frank, S. Knight, N. Semmler, and G. Smaragdakis. PaDIS emulator: An emulator to evaluate CDN-ISP collaboration. ACM Sigcomm Demonstration, 2012.
[34] B. Quoitin and S. Uhlig. Modeling the routing of an autonomous system with C-BGP. Network, IEEE, 19(6):12–19, 2005.
[35] RtConfig. . http://irrtoolset.isc.org/wiki/RtConfig.
[36] Scalable Simulation Framework (SSF). . http://www.ssfnet.org/homePage.html.
[37] N. Spring, R. Mahajan, D. Wetherall, and T. Anderson. Measuring ISP topologies with rocketfuel. Networking, IEEE/ACM Transactions on, 12(1):2–16, Feb. 2004.
[38] L. Vanbever, G. Pardoen, and O. Bonaventure. Towards validated network configurations with NCGuard. IEEE Internet Network Management Workshop, 2008.