### Compatibility and Semantic Changes

To ensure compatibility at the method signature level with the new library version, we have focused on API changes. However, detecting semantic changes remains an open problem that requires interdisciplinary efforts, particularly from the field of software engineering, and is beyond the scope of our current work. In this study, we demonstrate that relying on API changes to assess compatibility among library versions can help developers keep their project dependencies up-to-date, although further improvements are needed to cover a broader range of cases.

### Cognicrypt and False Positives

While Cognicrypt provides the flexibility to create new rules for detecting cryptographic misuse, it is not immune to false positives. We identified instances where calls to cryptographic APIs are encapsulated within custom Java utility classes by library developers. Cognicrypt struggles to fully link the control flow graph of these custom classes, leading to over-approximation of misuse and the reporting of false positives. Specifically, the misuse of `MessageDigest` depends on call sequences, and Cognicrypt's inability to accurately classify misuse when `MessageDigest` is wrapped in custom classes may contribute to the high number of detected misuses (see Figure 2). Unfortunately, verifying such misuse using static analysis and excluding false positives from our results is not straightforward. Once Cognicrypt addresses this limitation, Up2Dep will provide more accurate warnings to app developers.

### Manual Vulnerability Detection

Currently, we manually search for publicly disclosed vulnerabilities, which is a time-consuming task. In the future, a central library repository could automate this process. For example, when a vulnerability in a library is disclosed, the repository could mark the vulnerable versions in its database, allowing tools like Up2Dep or Lint to automatically retrieve and provide feedback to developers in their IDEs. For cryptographic API misuse, Up2Dep’s pre-analyzer component automatically crawls newer versions of third-party libraries and runs Cognicrypt to obtain up-to-date results.

### Developer Population Size

The population size of developers in our evaluation may seem small, as we only included 56 developers, with 23 sharing their experiences through an online survey and 22 providing feedback via Android Studio. Our demographic data indicates that our evaluation includes experienced developers (e.g., 18 of them have developed at least two Android apps). However, previous developer studies [9, 26, 39] have also had low participant numbers due to the difficulty in recruiting real developers. Many of these studies used students and toy projects, which do not necessarily reflect the day-to-day challenges faced by professional developers. In our work, we aimed to avoid using students and toy projects, instead focusing on insights from real app development (external validity). The fact that we could recruit and retain this number of developers suggests a genuine interest and need for such a tool in the developer community. Additionally, our in-context feedback option has provided valuable insights into whether Up2Dep works effectively. With only a small percentage of false positives (6.7%) and 80% of suggested quick-fixes working as expected, we believe we have delivered a novel and useful tool that demonstrates the impact of such support in real-world scenarios.

### Telemetric Information and Quick-Fixes

We chose not to collect telemetric information on whether developers ignored the quick-fixes, as this might be considered too intrusive. This decision, however, prevents us from modeling whether known security vulnerabilities or cryptographic misuse warnings are significant predictors for applying quick-fixes and library updates in our evaluation.

### Transitive Dependencies and App Security

During our evaluation, we did not consider transitive dependencies, but we observed that the problems related to transitive dependency updatability are relatively rare, with only two instances of false positives. Existing research [28] on the updatability of third-party libraries shows that only 1.7% of library APIs are affected by entangled dependencies. Nonetheless, transitive dependencies pose a potential threat to the security of Android apps. We found that security issues in a library can be hidden from developers when the library is included as a transitive dependency of another dependency. While the community is actively identifying security problems in third-party libraries, it is crucial to keep developers informed about all potential risks associated with declared dependencies. To the best of our knowledge, we are the first to study the security problems of transitive dependencies and have developed a solution to alert developers when they include libraries with insecure transitive dependencies.

### Impact of Fixing Insecure Dependencies

Among the 116 applied fixes, 6.89% (4 known security vulnerabilities and 4 cryptographic API misuses) had security vulnerabilities. These numbers are non-negligible and have a tangible impact on the security and privacy of the Android apps being developed. Previous work has highlighted the security and privacy implications of outdated third-party libraries (see Section 2). By updating insecure code dependencies to secure versions, we eliminate factors that can exacerbate security and privacy issues, potentially exposing end users to various types of attacks. While market stores like Google Play scan apps for security and privacy problems, they deal with monolithic byteblobs where there is no separation between app code and library code. Therefore, such solutions require exact and reliable library detection mechanisms, which is a challenging task. This becomes even more difficult when the app's bytecode is obfuscated, a practice promoted by Google [12]. Our results show that integrating support for suggesting secure code dependencies within developers' IDEs can eliminate many security problems without having to deal with monolithic APKs. Developers do not need to learn new tools or adjust their daily workflow to use Up2Dep. Based on our results, the experiences in other software ecosystems [8, 24], and the movement towards integrating security into the software development lifecycle (SecDevOps) [36, 37], we argue that merging tools like Up2Dep into IDEs, such as Android Studio, would have a significant impact on the security and privacy of the Android ecosystem.

### Fear of Incompatibility vs. Will to Update

In our evaluation, we found that the majority of outdated libraries can be updated to the latest version (see Figure 4) without requiring changes to the app code (i.e., 68.97% of quick-fixes are updates to the latest version). Developers often hesitate to update because they fear that new library versions might break existing functionality [19]. Without information on the compatibility of the new updates, developers must either manually verify the release notes (if available) or continue using outdated versions. One developer shared this experience via email after trying Up2Dep:

"Thank you for sharing your project with me. It’s really exciting; we usually manually review the change logs to decide if we should update our dependencies right away or what we should test."

The compatibility check was rated the most useful feature by developers in our study (see Figure 6). If Up2Dep did not provide compatibility information, developers would likely be less willing to update 68.98% of the outdated dependencies (80 out of 116).

### Conclusion

Since security patches for libraries are often rolled out as updates, app developers (not market stores or end users) need to keep their third-party libraries up-to-date to avoid security issues. In this paper, we present Up2Dep, an Android Studio extension that facilitates keeping third-party libraries up-to-date while considering the security and compatibility of newer versions. Up2Dep suggests alternative library APIs if a newer version is incompatible and alerts developers to publicly disclosed vulnerabilities and cryptographic API misuse in third-party libraries. We tested Up2Dep with 56 Android developers, and it helped fix 116 outdated third-party libraries, 6.89% of which had security vulnerabilities (4 known security vulnerabilities and 4 cryptographic API misuses). The majority (80.0%) of the suggested quick-fixes worked as expected, with only 4 failed cases. Further investigation revealed hidden security problems in the transitive dependencies of 13.51% of the libraries in our dataset. We are the first to discover and address the hidden problem of insecure transitive dependencies. Our results call for action to (1) integrate tool support like Up2Dep into developers’ IDEs, which would significantly improve the security and privacy of the Android ecosystem, and (2) study developer behavior to provide the right tool support.

### Acknowledgments

We would like to thank our anonymous reviewers for their valuable feedback. We also thank our shepherd, Sébastien Bardin, for his feedback and for being a supportive point of contact during the revision of this paper.

### References

[1] Accessed 2016. 2016 State of the Software Supply Chain. https://www.sonatype.com/software-supply-chain.
[2] Accessed 2018. Gradle Build Tool. https://gradle.org/.
[3] Accessed 2018. Lint Tool. http://tools.android.com/tips/lint.
[4] Accessed 2018. Top most popular libraries on Maven. https://mvnrepository.com/popular.
[5] Accessed 2019. Cognicrypt Crypto API rules. https://github.com/CROSSINGTUD/Crypto-API-Rules.
[6] Accessed 2019. F-Droid App Repository. https://f-droid.org/en/.
[7] Accessed 2019. LibScout. https://github.com/reddr/LibScout.
[8] Accessed 2019. Snyk: A developer-first solution that automates finding & fixing vulnerabilities in your dependencies. https://snyk.io.
[9] Yasemin Acar, Michael Backes, Sascha Fahl, Simson Garfinkel, Doowon Kim, Michelle L Mazurek, and Christian Stransky. 2017. Comparing the usability of cryptographic APIs. In Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 154–171.
[10] Devdatta Akhawe and Adrienne Porter Felt. 2013. Alice in Warningland: A Large-Scale Field Study of Browser Security Warning Effectiveness. In USENIX Security Symposium 2013, Vol. 13.
[11] Android Developer Documentation. Accessed 2019. App security improvement program. https://developer.android.com/google/play/asi.
[12] Android Developer Documentation. Accessed 2019. Shrink, obfuscate, and optimize your app. https://developer.android.com/studio/build/shrink-code.
[13] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. ACM SIGPLAN Notices 49, 6 (2014), 259–269.
[14] Michael Backes, Sven Bugiel, and Erik Derr. 2016. Reliable Third-Party Library Detection in Android and Its Security Applications. In Proc. 23rd ACM Conference on Computer and Communication Security (CCS’16). ACM.
[15] Aaron Bangor, Philip Kortum, and James Miller. 2009. Determining what individual SUS scores mean: Adding an adjective rating scale. Journal of Usability Studies 4, 3 (2009), 114–123.
[16] Theodore Book, Adam Pridgen, and Dan S. Wallach. 2013. Longitudinal Analysis of Android Ad Library Permissions. CoRR abs/1303.0857 (2013).
[17] John Brooke et al. 1996. SUS—A quick and dirty usability scale. Usability Evaluation in Industry 189, 194 (1996), 4–7.
[18] Alexia Chatzikonstantinou, Mezza Group, Christoforos Ntantogian, Christos Xenakis, and Georgios Karopoulos. 2015. Evaluation of Cryptography Usage in Android Applications. https://doi.org/10.4108/eai.3-12-2015.2262471
[19] Erik Derr, Sven Bugiel, Sascha Fahl, Yasemin Acar, and Michael Backes. 2017. Keep Me Updated: An Empirical Study of Third-Party Library Updatability on Android. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (Dallas, Texas, USA) (CCS ’17). ACM, 2187–2200. https://doi.org/10.1145/3133956.3134059
[20] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013. An empirical study of cryptographic misuse in Android applications. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 73–84.
[21] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon Chun, Landon P Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N Sheth. 2014. TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones. ACM Transactions on Computer Systems (TOCS) 32, 2 (2014), 5.
[22] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011. A Study of Android Application Security. In Proceedings of the 20th USENIX Conference on Security (San Francisco, CA) (SEC’11). USENIX Association, Berkeley, CA, USA, 21–21. http://dl.acm.org/citation.cfm?id=2028067.2028088
[23] Adrienne Porter Felt, Alex Ainslie, Robert W. Reeder, Sunny Consolvo, Somas Thyagaraja, Alan Bettes, Helen Harris, and Jeff Grimes. 2015. Improving SSL Warnings: Comprehension and Adherence. In Proceedings of the 33rd Annual ACM Conference on Human Factors in Computing Systems (Seoul, Republic of Korea) (CHI ’15). ACM, New York, NY, USA, 2893–2902. https://doi.org/10.1145/2702123.2702442
[24] GitHub Help. Accessed 2019. Viewing and updating vulnerable dependencies in your repository. https://help.github.com/articles/viewing-and-updating-vulnerable-dependencies-in-your-repository/.
[25] Google Help. Accessed 2019. How to fix apps containing Libpng Vulnerability. https://support.google.com/faqs/answer/7011127?hl=en.
[26] Peter Leo Gorski, Luigi Lo Iacono, Dominik Wermke, Christian Stransky, Sebastian Möller, Yasemin Acar, and Sascha Fahl. 2018. Developers Deserve Security Warnings, Too: On the Effect of Integrated Security Advice on Cryptographic API Misuse. In Fourteenth Symposium on Usable Privacy and Security (SOUPS 2018). 265–281.
[27] Gradle. Accessed 2019. Gradle Transitive Dependency. https://docs.gradle.org/5.6.2/userguide/managing_transitive_dependencies.html.
[28] Jie Huang, Nataniel Pereira Borges Jr., Sven Bugiel, and Michael Backes. 2019. Up-To-Crash: Evaluating Third-Party Library Updatability on Android. In 4th IEEE European Symposium on Security and Privacy. https://publications.cispa.saarland/2885/
[29] Stefan Krüger, Sarah Nadi, Michael Reif, Karim Ali, Mira Mezini, Eric Bodden, Florian Göpfert, Felix Günther, Christian Weinert, Daniel Demmler, and Ram Kamath. 2017. CogniCrypt: Supporting Developers in Using Cryptography. In Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering (Urbana-Champaign, IL, USA) (ASE 2017). IEEE Press, Piscataway, NJ, USA, 931–936. http://dl.acm.org/citation.cfm?id=3155562.3155681
[30] Stefan Krüger, Johannes Späth, Karim Ali, Eric Bodden, and Mira Mezini. 2018. CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic APIs. In 32nd European Conference on Object-Oriented Programming (ECOOP 2018). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[31] Patrick Lam, Eric Bodden, Ondrej Lhoták, and Laurie Hendren. 2011. The Soot framework for Java program analysis: a retrospective. In Cetus Users and Compiler Infrastructure Workshop (CETUS 2011), Vol. 15. 35.
[32] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web. In 24th Annual Network and Distributed System Security Symposium, NDSS 2017, San Diego, California, USA, February 26 - March 1, 2017.
[33] Cheng-Lun Li, Ayse G. Buyuktur, David K. Hutchful, Natasha B. Sant, and Satyendra K. Nainwal. 2008. Portalis: Using competitive online interactions to support aid initiatives for the homeless. In CHI ’08 extended abstracts on Human factors in computing systems (Florence, Italy). ACM, New York, NY, USA, 3873–3878. https://doi.org/10.1145/1358628.1358946
[34] Tianshi Li, Yuvraj Agarwal, and Jason I Hong. 2018. Coconut: An IDE plugin for developing privacy-friendly apps. Proceedings of the ACM on Interactive, Mobile, Wearable and Ubiquitous Technologies 2, 4 (2018), 178.
[35] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (Raleigh, North Carolina, USA) (CCS ’12). ACM, New York, NY, USA, 229–240. https://doi.org/10.1145/2382196.2382223
[36] Vaishnavi Mohan, Lotfi ben Othmane, and Andre Kres. 2018. BP: Security Concerns and Best Practices for Automation of Software Deployment Processes: An Industrial Case Study. In 2018 IEEE Cybersecurity Development (SecDev). IEEE, 21–28.
[37] Vaishnavi Mohan and Lotfi Ben Othmane. 2016. SecDevOps: Is it a Marketing