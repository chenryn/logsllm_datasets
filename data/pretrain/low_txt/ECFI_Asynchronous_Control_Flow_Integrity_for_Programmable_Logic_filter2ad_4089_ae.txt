### Control-Flow Integrity (CFI) Solutions for Real-Time Systems

MoCFI, a CFI framework designed for smartphones, verifies each jump target against the Control-Flow Graph (CFG). It employs exception handlers and loops in its CFG verification, which makes it unsuitable for real-time Programmable Logic Controllers (PLCs). In contrast, CFR [38] is a fine-grained CFI instrumentation technique tailored for ARM-based iOS devices. CFR injects monitoring code into iOS applications during the compilation phase using an LLVM add-on, thereby eliminating the need for disassembly and CFG construction. Similar to MoCFI, CFR relies heavily on extensive loops for CFG verification, rendering it impractical for use in PLCs with real-time constraints.

TrackOS, a FreeRTOS fork, proposes a CFI system for microcontrollers (MCUs) without Memory Management Unit (MMU) or Memory Protection Unit (MPU) support [39]. However, TrackOS does not actively monitor the application's control flow. Instead, it periodically reads control flow data (e.g., register values, stack values) from the kernel space and performs checks at fixed intervals. This deterministic checking period can be exploited to bypass TrackOS. Furthermore, TrackOS does not provide any overhead measurements.

Other CFI solutions have focused more broadly on embedded systems with specific CPU families [45, 52], but none have addressed the challenge of developing an enforcement approach for PLCs. CFIMon [52] leverages the Performance Monitoring Unit (PMU) available in commercial processors to detect control-flow deviations. Although CFIMon was not initially designed as a CFI for embedded systems, its hardware functionalities (PMU) are common in many embedded processors. However, CFIMon has been found to be unreliable due to high rates of false negatives and false positives [53].

A relevant body of work suggests verifying control-flow integrity asynchronously for non-real-time systems. For instance, kBouncer [36] verifies the control flow of an application using Intel's Last Branch Record (LBR). The verification mechanism is triggered when suspicious APIs are called, and it checks the last 16 LBR entries for control flow violations. Unlike kBouncer, ECFI operates in real-time environments without conditional checks, except for resource availability. Additionally, ECFI monitors CPU cycles to detect attempts to exploit system resources to manipulate the ring buffer.

ShadowReplica [23] is another implementation that uses asynchronous verification for Data Flow Tracking (DFT) and dynamic taint analysis with shadow memory. ShadowReplica decouples DFT from application execution by utilizing spare CPU cores to accelerate the task. Similarly, Speck [32] enables the execution of expensive security checks by offloading them to other CPU cores, holding the application's output buffer until the checks are complete. However, this mechanism can cause priority inversion and predictability issues in real-time systems.

### Conclusion

From a practical standpoint, control-flow hijacking attacks are among the most significant threats to PLCs. Existing defenses for PLCs have not adequately addressed this type of attack. In this paper, we introduce the first CFI approach compatible with PLCs, designed to respect real-time requirements. Our evaluation demonstrates that it is feasible to deploy traditional control-flow protection mechanisms in PLCs with real-time constraints and limited hardware. We believe that control-flow integrity verification will significantly hinder attackers, reducing their success rate and preventing post-exploitation techniques such as the Pin Control Attack [2].

### Acknowledgments

We are deeply grateful to Marina Krotofil, Tim van de Kamp, Moritz Contag, Christine Utz, Andre Pawlowski, Tim Blazytko, Teemu Rytilahty, Sergej Schumilo, Cornelius Aschermann, and Dennis Tatang for their valuable insights on the manuscript. We also thank the anonymous reviewers and our shepherd Vasileios P. Kemerlis for their feedback. This work was partially supported by the Franco-German BERCOM Project (FKZ: 13N13741), co-funded by the German Federal Ministry of Education and Research (BMBF). The work of the fourth author was partially supported by the Netherlands Organization for Scientific Research (NWO) through the SpySpot project (no. 628.001.004).

### References

[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-Flow Integrity. In ACM Conference on Computer and Communications Security (CCS).

[2] Ali Abbasi and Majid Hashemi. 2016. Ghost in the PLC: Designing an Undetectable Programmable Logic Controller Rootkit via Pin Control Attack. Black Hat Europe (2016).

[3] Ali Abbasi, Jos Wetzels, Wouter Bokslag, Emmanuele Zambon, and Sandro Etalle. 2014. On Emulation-Based Network Intrusion Detection Systems. In Symposium on Recent Advances in Intrusion Detection (RAID). https://doi.org/10.1007/978-3-319-11379-119

[4] Ali Abbasi, Jos Wetzels, Wouter Bokslag, Emmanuele Zambon, and Sandro Etalle. 2017. µShield: Configurable Code Reuse Attack Mitigation for Embedded Systems. In International Conference on Network and System Security. Springer, 694–709.

[5] F. Adelstein, M. Stillerman, and D. Kozen. 2002. Malicious Code Detection for Open Firmware. In Annual Computer Security Applications Conference (ACSAC). https://doi.org/10.1109/CSAC.2002.1176312

[33] Ben Niu and Gang Tan. 2014. Modular Control-Flow Integrity. SIGPLAN Not. 49, 6 (June 2014), 577–587. https://doi.org/10.1145/2666356.2594295

[34] Ben Niu and Gang Tan. 2014. RockJIT: Securing Just-In-Time Compilation Using Modular Control-Flow Integrity. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, New York, NY, USA, 1317–1328.

[35] OpenPLC. 2014. The OpenPLC Project. (2014). http://www.openplcproject.com

[36] Vasilis Pappas, Michalis Polychronakis, and Angelos D Keromytis. 2013. Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In USENIX Security Symposium.

[37] Daniel Peck and Dale Peterson. 2009. Leveraging Ethernet Card Vulnerabilities in Field Devices. In SCADA Security Scientific Symposium (S4).

[38] Jannik Pewny and Thorsten Holz. 2013. Control-Flow Restrictor: Compiler-Based CFI for iOS. In Annual Computer Security Applications Conference (ACSAC). https://doi.org/10.1145/2523649.2523674

[39] Lee Pike, Pat Hickey, Trevor Elliott, Eric Mertens, and Aaron Tomb. 2016. TrackOS: A Security-Aware Real-Time Operating System. In International Conference on Runtime Verification. Springer, 302–317.

[40] R Pozo and BR Miller. 2016. SciMark 2. http://math.nist.gov/scimark2/. (2016).

[41] P. Puschner and Ch. Koza. 1989. Calculating the Maximum Execution Time of Real-Time Programs. Real-Time Systems 1, 2 (1989). https://doi.org/10.1007/BF00571421

[42] Douglas C Schmidt, Sumedh Mungee, Sergio Flores-Gaitan, and Aniruddha Gokhale. 2001. Software Architectures for Reducing Priority Inversion and Non-Determinism in Real-Time Object Request Brokers. Real-Time Systems 21, 1-2 (2001), 77–125.

[43] Felix Schuster, Thomas Tendyck, Jannik Pewny, Andreas Maaß, Martin Steegmanns, Moritz Contag, and Thorsten Holz. 2014. Evaluating the Effectiveness of Current Anti-ROP Defenses. In Research in Attacks, Intrusions and Defenses, Angelos Stavrou, Herbert Bos, and Georgios Portokalidis (Eds.). Springer, 88–108.

[44] Moses D Schwartz, John Mulder, Jason Trent, and William D Atkins. 2010. Control System Devices: Architectures and Supply Channels Overview. Sandia Report SAND2010-5183, Sandia National Laboratories, Albuquerque, New Mexico (2010).

[45] David Sehr, Robert Muth, Cliff Biffle, Victor Khimenko, Egor Pasko, Karl Schimpf, Bennet Yee, and Brad Chen. 2010. Adapting Software Fault Isolation to Contemporary CPU Architectures. In USENIX Security Symposium.

[46] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-into-libc Without Function Calls (on the x86). In ACM Conference on Computer and Communications Security (CCS).

[47] Mario de Sousa. 2012. MATIEC-IEC 61131-3 Compiler, 2014. (2012).

[48] K Stouffer, S Lightman, V Pillitteri, M Abrams, and A Hahn. 2014. NIST Special Publication 800-82, Revision 2: Guide to Industrial Control Systems (ICS) Security. National Institute of Standards and Technology (2014).

[49] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security Symposium.

[50] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context-Sensitive CFI. In ACM Conference on Computer and Communications Security (CCS).

[51] David E Whitehead, Kevin Owens, Dennis Gammel, and Jess Smith. 2014. Ukraine Cyber-Induced Power Outage: Analysis and Practical Mitigation Strategies. https://selinc.com/api/download/117044/. (2014).

[52] Yubin Xia, Yutao Liu, H. Chen, and B. Zang. 2012. CFIMon: Detecting Violation of Control Flow Integrity Using Performance Counters. In IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). https://doi.org/10.1109/DSN.2012.6263958

[53] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dong Song, and Wei Zou. 2013. Practical Control Flow Integrity and Randomization for Binary Executables. In IEEE Symposium on Security and Privacy.

[54] Mingwei Zhang and R Sekar. 2015. Control Flow and Code Integrity for COTS Binaries: An Effective Defense Against Real-World ROP Attacks. In Annual Computer Security Applications Conference (ACSAC).

[6] Zachry Basnight, Jonathan Butts, Juan Lopez Jr., and Thomas Dube. 2013. Firmware Modification Attacks on Programmable Logic Controllers. International Journal of Critical Infrastructure Protection 6, 2 (2013), 76 – 84. https://doi.org/10.1016/j.ijcip.2013.04.004

[7] Tyler Bletsch, Xuxian Jiang, and Vince Freeh. 2011. Mitigating Code-Reuse Attacks with Control-Flow Locking. In Annual Computer Security Applications Conference (ACSAC). https://doi.org/10.1145/2076732.2076783

[8] Defense Use Case. 2016. Analysis of the Cyber Attack on the Ukrainian Power Grid. (2016).

[9] Yueqiang Cheng, Zongwei Zhou, Miao Yu, Xuhua Ding, and Robert H Deng. 2014. ROPecker: A Generic and Practical Approach for Defending Against ROP Attacks. In Symposium on Network and Distributed System Security (NDSS).

[10] Hind Chfouka, Hamed Nemati, Roberto Guanciale, Mads Dam, and Patrik Ekdahl. 2015. Trustworthy Prevention of Code Injection in Linux on Embedded Devices. In European Symposium on Research in Computer Security (ESORICS). https://doi.org/10.1007/978-3-319-24174-65

[11] Matjaž Colnarič, Wolfgang A Halang, and Marek Wkegrzyn. 2005. Real-Time Programming 2004. Gulf Professional Publishing.

[12] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In Symposium on Network and Distributed System Security (NDSS).

[13] Arnaldo Carvalho de Melo. 2009. Performance Counters on Linux. In Linux Plumbers Conference.

[14] DigitalBond. 2012. 3S CoDeSys, Project Basecamp. (2012). http://www.digitalbond.com/tools/basecamp/3s-codesys/

[15] B. S. Doerr, T. Venturella, R. Jha, C. D. Gill, and D. C. Schmidt. 1999. Adaptive Scheduling for Real-Time, Embedded Information Systems. In Digital Avionics Systems Conference. https://doi.org/10.1109/DASC.1999.863703

[16] Loïc Duflot, Yves-Alexis Perez, and Benjamin Morin. 2011. What if You Can Not Trust Your Network Card? In Symposium on Recent Advances in Intrusion Detection (RAID).

[17] Nicolas Falliere, Liam O Murchu, and Eric Chien. 2011. W32.Stuxnet Dossier. White Paper, Symantec Corp., Security Response 5 (2011).

[18] Aurélien Francillon, Daniele Perito, and Claude Castelluccia. 2009. Defending Embedded Systems Against Control Flow Attacks. In First ACM Workshop on Secure Execution of Untrusted Code (SecuCode ’09). 8. https://doi.org/10.1145/1655077.1655083

[19] Bundesamt für Sicherheit in der Informationstechnik. 2014. Die Lage der IT-Sicherheit in Deutschland 2014. http://bit.ly/13cGiGL. (2014).

[20] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. 2016. Fine-Grained Control-Flow Integrity for Kernel Software. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. 179–194.

[21] Z. S. Huang and I. G. Harris. 2012. Return-Oriented Vulnerabilities in ARM Executables. In IEEE International Symposium on Technologies for Homeland Security. https://doi.org/10.1109/THS.2012.6459817

[22] ICS-CERT. 2016. Rockwell Automation MicroLogix 1100 PLC Overflow Vulnerability. (2016). https://ics-cert.us-cert.gov/advisories/ICSA-16-026-02

[23] Kangkook Jee, Vasileios P Kemerlis, Angelos D Keromytis, and Georgios Portokalidis. 2013. ShadowReplica: Efficient Parallelization of Dynamic Data Flow Tracking. In ACM Conference on Computer and Communications Security (CCS). 235–246.

[24] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. 2014. SoK: Automated Software Diversity. In IEEE Symposium on Security and Privacy. https://doi.org/10.1109/SP.2014.25

[25] Robert M Lee, Michael J Assante, and Tim Conway. 2014. German Steel Mill Cyber Attack. Industrial Control Systems 30 (2014).

[26] Joseph YT Leung. 2004. Handbook of Scheduling: Algorithms, Models, and Performance Analysis. CRC Press.

[27] D. Locke, L. Sha, R. Rajikumar, J. Lehoczky, and G. Burns. 1988. Priority Inversion and Its Control: An Experimental Investigation. In Second International Workshop on Real-time Ada Issues (IRTAW ’88). 4. https://doi.org/10.1145/58612.59374

[28] T. C. Maxino and P. J. Koopman. 2009. The Effectiveness of Checksums for Embedded Control Networks. IEEE Transactions on Dependable and Secure Computing (2009). https://doi.org/10.1109/TDSC.2007.70216

[29] Stephen McLaughlin and Patrick McDaniel. 2012. SABOT: Specification-Based Payload Generation for Programmable Logic Controllers. In ACM Conference on Computer and Communications Security (CCS). https://doi.org/10.1145/2382196.2382244

[30] Stephen E McLaughlin. 2011. On Dynamic Malware Payloads Aimed at Programmable Logic Controllers. In HotSec.

[31] Nicholas Nethercote and Julian Seward. 2007. Valgrind: A Framework for Heavy-Weight Dynamic Binary Instrumentation. In ACM Sigplan Notices, Vol. 42. 89–100.

[32] Edmund B Nightingale, Daniel Peek, Peter M Chen, and Jason Flinn. 2008. Parallelizing Security Checks on Commodity Hardware. In ACM Sigplan Notices, Vol. 43. ACM, 308–318.