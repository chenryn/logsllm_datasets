### Implementation of Local Search Algorithms

The local search algorithms implemented in this study vary in the number of pairwise swaps between neighboring configurations. Specifically, Local Search N utilizes N pairwise swaps, where each swap involves two benchmarks. For Local Search 1, only one pair of benchmarks is swapped, while for Local Search 4, all benchmarks are involved in the swapping process.

In Local Search 1, a single swap is made, and the resulting schedule is run for the next 4 million cycle interval. If the performance improves, the new configuration is retained; otherwise, another neighbor of the original solution is selected. The performance comparison is based on the average normalized ED2 (Energy-Delay Product) of the two threads involved in the swap, relative to the previous interval's ED2.

Local Search 2 and Local Search 4 introduce an additional feature: instead of accepting or rejecting all swaps collectively, beneficial pairwise swaps are kept, and non-beneficial ones are discarded. According to the results in Figure 7, the additional pairwise swaps in Local Search 2 and Local Search 4 significantly improve the algorithm. The ED2 increase achieved with one, two, and four pairwise swaps per interval is 15.0%, 12.6%, and 7.8%, respectively. Moreover, Local Search 4 outperforms global search methods, as indicated by the error bars, which show that it is less sensitive to the initial assignment due to its ability to more rapidly explore the space of possible assignments.

### Overall Comparison

Figure 8 compares all the scheduling algorithms to the non-degraded chip multiprocessor (CMP). The offline oracle scheduler achieves a 3.1% better ED2 than the non-degraded CMP. This improvement is due to the fact that some degraded cores operate at lower power, either because of lower frequency or power-gated failed components. Consequently, an omniscient scheduler can find a more power/performance-efficient assignment than the baseline.

Both the Hungarian and Local Search 4 scheduling algorithms achieve ED2 values very close to the non-degraded baseline, with increases of only 3.2% and 3.7%, respectively, compared to over 22% degradation with naïve schedulers. Thus, intelligent scheduling will be crucial for maintaining acceptable levels of power/performance efficiency on future CMPs affected by wear-out and variations.

### Conclusions

In future CMPs, variations and hard errors will create dynamic heterogeneity among the cores. Unlike statically designed heterogeneous CMPs, the unpredictability of manufacturing defects, wear-out mechanisms, and variations will require self-tuning scheduling techniques that efficiently find near-optimal schedules for any degraded CMP scenario, making the chip degradation imperceptible to the user.

In this paper, we devise several scheduling algorithms for finding near-optimal thread-to-core assignments in a degraded CMP. We first demonstrate that simple policies, such as round-robin scheduling, can degrade ED2 to the point where the chip may become unusable. Under the assumption of limited core-to-core interaction, we observe that the scheduling problem reduces to the Assignment Problem, which can be addressed using the Hungarian Algorithm. We develop a scheduler based on this algorithm that achieves an ED2 close to that of an oracle scheduler. We also develop schedulers based on AI search techniques that do not require limited core-to-core interaction and scale better to large CMP organizations. The most scalable and effective of these policies rapidly arrives at a near-optimal solution, degrading ED2 by only 3.7% over a non-degraded architecture, compared to over 22% for simple approaches.

For future work, we plan to investigate algorithms for CMPs with tens to hundreds of cores and those that address workloads containing a mix of parallel and sequential applications.

### Acknowledgements

The authors thank Ken Birman for his valuable feedback, Paula Petrica for her help with the submission, and the anonymous referees for their useful comments. This research is supported by NSF grants CCF-0732300 and CCF-0541321.

### References

[1] N. Aggarwal, P. Ranganathan, N.P. Jouppi, and J. E. Smith. Configurable Isolation: Building High Availability Systems with Commodity Multi-Core Processors. International Symposium on Computer Architecture (ISCA), 2007.

[2] S. Balakrishnan, R. Rajwar, M. Upton, and K. Lai. The Impact of Performance Asymmetry in Emerging Multicore Architectures. International Symposium on Computer Architecture (ISCA), 2005.

[3] M. Becchi and P. Crowley. Dynamic Thread Assignment on Heterogeneous Multiprocessor Architectures. ACM International Conference on Computing Frontiers (CF), 2006, pp. 29-39.

[4] S. Borkar, T. Karnik, S. Narendra, J. Tschanz, A. Keshavarzi, and V. De. Parameter Variations and Impact on Circuits and Microarchitecture. Design Automation Conference (DAC), 2003, pp. 338-342.

[5] F. A. Bower, D. J. Sorin, and S. Ozev. A Mechanism for Online Diagnosis of Hard Faults in Microprocessors. International Symposium on Microarchitecture (MICRO), 2005.

[6] D. Brooks, V. Tiwari, and M. Martonosi. Wattch: A Framework for Architectural-Level Power Analysis and Optimizations. International Symposium on Computer Architecture (ISCA), 2000, pp. 83-94.

[7] P. Chaparro, J. González, G. Magklis, Q. Cai, and A. González. Understanding the Thermal Implications of Multi-Core Architectures. IEEE Transactions on Parallel and Distributed Systems (TPDS), 2007, pp. 1055-1065.

[8] J. Donald and M. Martonosi. Techniques for Multi-Core Thermal Management: Classification and New Exploration. International Symposium on Computer Architecture (ISCA), 2006.

[9] S. Ghiasi, T. Keller, and F. Rawson. Scheduling for Heterogeneous Processors in Server Systems. ACM International Conference on Computing Frontiers (CF), 2005, pp. 199-210.

[10] E. Humenay, D. Tarjan, and K. Skadron. Impact of Parameter Variations on Multi-Core Chips. Workshop on Architectural Support for Gigascale Integration (ASGI), 2006.

[11] E. Humenay, D. Tarjan, and K. Skadron. Impact of Process Variations on Multi-Core Performance Symmetry. Design, Automation and Test in Europe (DATE), 2007.

[12] C. Isci, A. Buyuktosunoglu, C-Y. Cher, P. Bose, and M. Martonosi. An Analysis of Efficient Multi-Core Global Power Management Policies: Maximizing Performance for a Given Power Budget. International Symposium on Microarchitecture (MICRO), 2006.

[13] P. Juang, Q. Wu, L-S. Peh, M. Martonosi, and D. W. Clark. Coordinated, Distributed, Formal Energy Management of CMP Multiprocessors. International Symposium on Low Power Electronics and Design (ISLPED), 2005.

[14] R. Kumar, D. M. Tullsen, and N.P. Jouppi. Core Architecture Optimization for Heterogeneous Chip Multiprocessors. International Symposium on Parallel Architectures and Compilation Techniques (PACT), 2006, pp. 23-32.

[15] R. Kumar, D.M. Tullsen, P. Ranganathan, N.P. Jouppi, and K. I. Farkas. Single-ISA Heterogeneous Multi-Core Architectures for Multithreaded Workload Performance. International Symposium on Computer Architecture (ISCA), 2004.

[16] J. Li and J.F. Martínez. Dynamic Power-Performance Adaptation of Chip Multiprocessors. International Symposium on High-Performance Computer Architecture (HPCA), 2006.

[17] X. Liang and D. Brooks. Microarchitecture Parameter Selection To Optimize System Performance Under Process Variation. International Conference on Computer-Aided Design (ICCAD), 2006, pp. 429-436.

[18] X. Liang and D. Brooks. Mitigating the Impact of Process Variations on Processor Register Files and Execution Units. International Symposium on Microarchitecture (MICRO), 2006.

[19] A.J. Martin. Towards an Energy Complexity of Computation. Information Processing Letters, 2001, pp. 181-187.

[20] A. Merkel and F. Bellosa. Balancing Power Consumption in Multiprocessor Systems. EuroSys, 2006, pp. 403-413.

[21] J. Munkres. Algorithms for Assignment and Transportation Problems. Journal of the Society of Industrial and Applied Mathematics, 1957, pp. 32-38.

[22] S. Ozdemir, D. Sinha, G. Memik, J. Adams, and H. Zhou. Yield-Aware Cache Architectures. International Symposium on Microarchitecture (MICRO), 2006.

[23] R.A. Pilgrim. Munkres’ Assignment Algorithm. http://csclab.murraystate.edu/bob.pilgrim/445/munkres.html, 2008.

[24] M.D. Powell, M. Gomaa, and T.N. Vijaykumar. Heat-and-Run: Leveraging SMT and CMP to Manage Power Density Through the Operating System. International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2004, pp. 260-270.

[25] C.R. Reeves (Editor). Modern Heuristic Techniques for Combinatorial Problems. McGraw-Hill Book Company, London, UK, 1995.

[26] J. Renau, B. Fraguela, J. Tuck, W. Liu, M. Prvulovic, L. Ceze, S. Sarangi, P. Sack, K. Strauss, and P. Montesinos. SESC Simulator. http://sesc.sourceforge.net, 2005.

[27] S.M. Sait and H. Youssef. Iterative Computer Algorithms with Applications. IEEE Computer Society, Los Alamitos, CA, 1999.

[28] E. Schuchman and T.N. Vijaykumar. Rescue: A Microarchitecture for Testability and Defect Tolerance. International Symposium on Computer Architecture (ISCA), 2005.

[29] P. Shivakumar, S.W. Keckler, CR. Moore, and D. Burger. Exploiting Microarchitectural Redundancy for Defect Tolerance. International Conference on Computer Design (ICCD), 2003.

[30] S. Shyam, K. Constantinides, S. Phadke, V. Bertacco, and T. Austin. Ultra Low-Cost Defect Protection for Microprocessor Pipelines. International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2006.

[31] K. Skadron, M.R. Stan, W. Huang, S. Velusamy, K. Sankaranarayanan, and D. Tarjan. Temperature-Aware Microarchitecture. International Symposium on Computer Architecture (ISCA), 2003, pp. 2-13.

[32] J. Srinivasan, S.V. Adve, P. Bose, and J.A. Rivers. The Case for Lifetime Reliability-Aware Microprocessors. International Symposium on Computer Architecture (ISCA), 2004.

[33] J. Srinivasan, S.V. Adve, P. Bose, and J.A. Rivers. Exploiting Structural Duplication for Lifetime Reliability Enhancement. International Symposium on Computer Architecture (ISCA), 2005.

[34] K. Stavrou and P. Trancoso. Thermal-Aware Scheduling for Future Chip Multiprocessors. EURASIP Journal on Embedded Systems, 2007.

[35] D. Tarjan, S. Thoziyoor, and N.P. Jouppi. CACTI 4.0. HP Laboratories Palo Alto Technical Report HPL-2006-86, 2006.

[36] Y. Zhang, D. Parikh, K. Sankaranarayanan, K. Skadron, and M. Stan. HotLeakage: A Temperature-Aware Model of Subthreshold and Gate Leakage for Architects. The University of Virginia, Department of Computer Science, Technical Report CS-2003-05, 2003.