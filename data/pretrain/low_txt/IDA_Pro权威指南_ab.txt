### 第20章 调试版与发行版二进制文件及其他调用约定
- **20.4** 调试版与发行版二进制文件
- **20.5** 其他调用约定
- **20.6** 小结

### 第21章 模糊代码分析
- **21.1** 反静态分析技巧
- **21.2** 反动态分析技巧
- **21.3** 使用IDA对二进制文件进行“静态去模糊”
- **21.4** 基于虚拟机的模糊
- **21.5** 小结

### 第22章 漏洞分析
- **22.1** 使用IDA发现新的漏洞
- **22.2** 使用IDA在事后发现漏洞
- **22.3** IDA与破解程序开发过程
- **22.4** 分析shellcode
- **22.5** 小结

### 第23章 实用IDA插件
- **23.1** Hex-Rays
- **23.2** IDAPython
- **23.3** collabREate
- **23.4** ida-x86emu
- **23.5** Class Informer
- **23.6** MyNav
- **23.7** IdaPdf
- **23.8** 小结

### 第六部分 IDA调试器

#### 第24章 IDA调试器
- **24.1** 启动调试器
- **24.2** 调试器的基本显示
- **24.3** 进程控制
- **24.4** 调试器任务自动化
- **24.5** 小结

#### 第25章 反汇编器/调试器集成
- **25.1** 背景知识
- **25.2** IDA数据库与IDA调试器
- **25.3** 调试模糊代码
- **25.4** IDAStealth
- **25.5** 处理异常
- **25.6** 小结

#### 第26章 其他调试功能
- **26.1** 使用IDA进行远程调试
- **26.2** 使用Bochs进行调试
- **26.3** Appcall
- **26.4** 小结

### 附录
- **附录A** 使用IDA免费版本5.0
  - A.1 IDA免费版本的限制
  - A.2 使用IDA免费版本
- **附录B** IDC/SDK交叉引用

### 版权声明
Copyright © 2011 by Chris Eagle. Title of English-language original: The IDA Pro Book: The Unofficial Guide to the World’s Most Popular Disassembler, Second Edition
ISBN 978-1-59327-289-0, published by No Starch Press. Simplified Chinese-language edition copyright © 2012 by Posts and Telecom Press. All rights reserved.
本书中文简体字版由No Starch Press授权人民邮电出版社独家出版。未经出版者书面许可，不得以任何方式复制或抄袭本书内容。
版权所有，侵权必究。

### 献词
谨以此书献给我的母亲。

### 对上一版的赞誉
- “我衷心地向所有IDA Pro用户推荐《IDA Pro权威指南》一书。” ——Ilfak Guilfanov，IDA Pro的开发者
- “本书内容精练而且结构合理……包括逐步深入的示例以及IDA各个方面所必需的详细信息，是你学习IDA的最佳选择。” ——Cody Pierce，TippingPoint DVLabs
- “Chris Eagle无疑是一名杰出的教育工作者，因为他能够使深奥晦涩的技术材料变得简单易懂，并且总是能够提供适当的示例。” ——Dino Dai Zovi，Trail of Bits博客
- “本书不仅能够帮助你全面了解IDA Pro，而且能够帮助你了解整个PE流程。” ——Ryan Linn，The Ethical Hacker Network
- “本书内容翔实，信息全面！” ——Eric Hulse，Carnal0wnage博客
- “迄今为止最全面、最准确、最优秀的IDA Pro著作。” ——Pierre Vandevenne，DataRescue SA股东兼CEO
- “无论是IDA Pro的初学者还是经验丰富的使用者，我强烈建议你们阅读本书。” ——Dustin D. Trammell，安全研究员
- “我强烈建议大家购买本书。它结构合理，而且据我所知，它比任何其他文档（包括IDA Pro手册）都更加全面。” ——Sebastian Porst，微软高级软件安全工程师
- “无论是处理严重的运行时缺陷，还是由内而外地检查应用程序的安全，IDA Pro都是你的首选工具，而本书则是你尽快学习IDA Pro的指南。” ——Joe Stagner，微软程序经理

### 致谢
- 和第1版一样，我想感谢家人在我撰写本书时给予我的支持。我对他们的忍耐和宽容深表感谢。
- 我还要感谢那些推动第1版取得成功的人们，特别是广大的读者们，希望我的著作能够为他们学习逆向工程提供帮助。没有他们的支持和建议，我不可能撰写第2版。
- 我要再次感谢技术编辑Tim Vidas，感谢他努力工作，还要感谢他的妻子Sheila对我们工作的支持。
- 我还要感谢Hex-Rays的开发人员，不仅感谢他们开发出优秀的产品，而且谢谢他们容忍我那“漏洞百出”的报告，事实证明，其中许多报告都是错误警报。感谢Ilfak投入大量时间，感谢Elias、Igor和Daniel提供的深刻见解。正是因为他们的努力，才使IDA成为我最喜爱的软件。
- 最后，我要感谢Alison Law及No Starch出版社的所有工作人员，他们的辛苦劳动使得本书得以顺利出版。

### 前言
撰写一本关于IDA Pro的书是一个充满挑战的任务。事实上，IDA是一款非常复杂的软件，它的功能特别强大，要在一本书中详细介绍所有这些功能，几乎是一项无法完成的任务。而且，IDA一直在不断推出新版本，因此，任何介绍IDA的图书在出版时都会落后一两个版本。在本书第1版即将出版时，IDA发布了版本5.3，但自本书第1版出版以来，IDA已发布了7个新版本（包括版本5.3）。IDA 6.0采用了一个新的、基于Qt1的图形用户界面，这促使我对本书进行更新，以介绍许多第1版并未介绍的功能。当然，和往常一样，IDA的另一个版本（6.1）也即将发布，2这确实让人非常兴奋。

1. Qt是诺基亚开发的一个跨平台的C++图形用户界面应用程序框架。——译者注
2. 2011年4月发布了IDA 6.1，2011年10月发布了IDA 6.2。——编者注

我撰写这一版的目的是帮助更多用户了解IDA，并培养他们对逆向工程的兴趣（如果可能）。对于希望进入逆向工程领域的读者，我希望向你们强调掌握熟练的编程技巧的重要性。理想情况下，你们应热爱编程，甚至要时时刻刻都想着编程。如果你对编程感到畏惧，那么逆向工程可能并不适合你。你可能会认为，逆向工程根本不需要编程，因为这只需要分解其他人的程序，但如果无法开发出能帮助你自动完成各种任务的脚本和插件，你永远也不可能成为真正高效的逆向工程人员。对我而言，编程和逆向工程就像是《纽约时报》周日版的纵横字谜游戏，对此我乐在其中。

为保持一致性，这个版本保留了第1版的总体结构，并且更为详细地阐述了部分章节，同时增加了一些新内容。阅读本书的方式多种多样。对逆向工程知之甚少的用户可以从第1章和第2章开始，了解有关逆向工程和反汇编器的一些信息；对IDA了解不多、希望深入学习的读者可以从第3章开始，这一章主要介绍IDA的基本布局；第4章则描述如何启动IDA并加载文件进行分析；第5章到第7章介绍IDA的用户界面窗口和基本功能。

对IDA有一定了解的读者可以从第8章开始阅读，这一章讨论如何使用IDA处理复杂的数据结构，包括C++类；而第9章则介绍IDA交叉引用，它是IDA基于图形的显示（也在第9章介绍）的基础；第10章说明如何在非Windows平台上（Linux或OS X）运行IDA。

更加高级的IDA用户可能会发现，第11章到第14章是不错的起点，主要介绍IDA的高级用法及其配套工具。第11章简要说明IDA的一些配置选项；第12章描述IDA的FLIRT/FLAIR技术和相关工具，我们利用它们开发签名，并利用这些签名将库代码与应用程序代码区分开来；第13章讨论IDA类型库及如何扩展类型库；而第14章则回答一些常见的问题，说明IDA是否可用于修补二进制文件。

IDA是一款即装即用的强大工具，可扩展性是它最大的优点之一，这些年来，用户利用这一优点让IDA完成了一些非常有趣的任务。IDA的可扩展性在第15章到第19章讨论。第15章介绍IDA的脚本功能（新增了IDAPython），并系统讨论IDA的SDK（软件开发工具包）提供的编程API；第16章全面介绍SDK；而第17章到第19章则讨论插件、文件加载器和处理器模块。

介绍完IDA的全部功能后，第20章至第23章转而讨论IDA在逆向工程方面更加实际的用法，分析各种编译器的区别（第20章），介绍如何使用IDA分析恶意软件中常见的模糊代码（第21章），以及如何利用IDA发现和分析漏洞（第22章）。第23章则介绍这些年来发布的一些有用的IDA扩展（插件）。

最后，第24章至第26章介绍IDA的内置调试器。第24章首先介绍调试器的基本功能；第25章讨论使用调试器分析模糊代码遇到的一些挑战，其中包括处理可能出现的反调试功能所带来的挑战；第26章则讨论IDA的远程调试功能，以及使用Bochs模拟器作为集成的调试平台，以此结束本书的讨论。

写作本书时，IDA的最新版本为6.1，本书在很大程度上以IDA 6.1为介绍对象。Hex-Rays公司非常慷慨，为用户提供了一个免费版本。IDA免费版是IDA 5.0的一个删减了部分功能的版本。本书讨论的大部分IDA功能也适用于免费版本，附录A简要介绍了用户在使用免费版本时可能遇到的一些不同之处。

首先学习IDA脚本功能，然后逐步学习如何创建编译插件，这似乎是一个自然的发展过程。因此，我们在附录B中全面介绍了每一个IDC函数及其对应的SDK操作。有时候，你可以在IDC函数与SDK函数之间建立起一一对应的关系（尽管这些函数的名称并不相同）；而有时候，实现单独一个IDC函数可能需要调用几个SDK函数。附录B回答了这个问题：“我知道如何用IDC完成某个任务，但是，如何使用插件完成这个任务呢？”附录B中的信息通过逆向工程IDA内核获得，根据IDA的非传统许可协议，这样做完全合法。

在整本书中，我都尽量使用较短的代码说明问题。绝大多数的示例代码，以及许多用于生成示例的二进制文件，都可以在本书的官方网站上找到，其地址为http://www.idabook.com/。在那里，你还可以找到本书并未包含的一些示例，以及本书所使用的所有参考文献（如脚注中引用的URL的最新链接）。

### 第一部分 IDA简介
- **第1章** 反汇编简介
- **第2章** 逆向与反汇编工具
- **第3章** IDA Pro背景知识

### 第1章 反汇编简介
拿到一本专门介绍IDA Pro的书，你很可能急切地想知道书里会讲些什么。很明显，本书以IDA为中心，但我并不希望读者将其作为IDA Pro用户手册。相反，本书旨在将IDA作为推动逆向工程技术讨论的工具。你会发现，在分析各种软件（包括易受攻击的应用程序和恶意软件）时，这些技术非常有用。在适当的时候，我将提供在使用IDA时需要遵循的详细步骤，好让你执行与你手头的任务有关的特殊操作。因此，我将简略地介绍IDA的功能，包括最初分析文件时需要执行的基本任务，最后讨论IDA的高级用法和定制功能（用来解决更具挑战性的逆向工程问题）。我不会介绍IDA的所有功能。但是，你将发现，在应对逆向工程挑战时，本书介绍的功能极其有用，这也使得IDA成为你工具箱中最强大的武器。

在详细介绍IDA之前，了解反汇编过程的一些基础知识，以及其他一些对编译代码进行逆向工程的可用工具，会有一定好处。虽然这些工具的功能都不如IDA全面，但它们具备IDA的一部分功能，有助于我们了解IDA的某些功能。本章的剩余部分主要介绍反汇编过程。

#### 1.1 反汇编理论
任何学过编程语言的人都知道，编程语言分为好几代，下面为那些上课不认真的读者简要总结一下。

- **第一代语言**：这些语言是最低级的语言，一般由0和1或某些简写编码（如十六进制码）组成。只有二进制超人才能读懂它们。由于数据和指令看起来都差不多，人们往往很难将它们区分开来，因此这种语言很容易造成混淆。第一代语言也称为机器语言，有时也叫做字节码，而机器语言程序常被称为二进制文件。
- **第二代语言**：第二代语言也叫汇编语言，它只是一种脱离了机器语言的表查找方式。通常，汇编语言会将具体的位模式或操作码，与短小且易于记忆的字符序列（即助记符）对应起来。有时候，这些助记符确实有助于程序员记住与它们有关的指令。汇编器是程序员用来将汇编语言程序转换成能够执行的机器语言的工具。
- **第三代语言**：这些语言引入了关键字和结构（它们是程序的构建块），因而其表达能力更接近于自然语言。通常，第三代语言不依赖于任何平台。但是，由于用第三代语言编写的程序使用了特定于操作系统的独特功能，它们便具有了平台依赖性。常见的第三代语言包括FORTRAN、COBOL、C和Java。程序员通常使用编译器将程序转换成汇编语言，或者直接转换成机器语言（或某种大致的等价形式，如字节码）。
- **第四代语言**：这些语言虽然存在，但与本书无关，因而不属本书的讨论范围。

#### 1.2 何为反汇编
在传统的软件开发模型中，程序员使用编译器、汇编器和链接器中的一个或几个创建可执行程序。为了回溯编程过程（或对程序进行逆向工程），我们使用各种工具来撤销汇编和编译过程。毫不奇怪，这些工具就叫做反汇编器和反编译器，名副其实。反汇编器撤销汇编过程，因此，我们可以得到汇编语言形式的输出结果（以机器语言作为输入）。反编译器则以汇编语言甚至是机器语言为输入，其输出结果为高级语言。

在竞争激烈的软件市场中，“恢复源代码”的前景总是充满吸引力。因此，在计算机科学中，开发适用的反编译器仍然是一个活跃的研究领域。下面列举若干原因，说明为何反汇编困难重重。

- 编译过程会造成损失：机器语言中没有变量或函数名，变量类型信息只有通过数据的用途（而不是显式的类型声明）来确定。看到一个32位的数据被传送，你需要进行一番分析，才能确定这个32位数据表示的到底是一个整数、一个32位浮点值还是一个32位指针。
- 编译属于多对多操作：这意味着源程序可以通过许多不同的方式转换成汇编语言，而机器语言也可以通过许多不同的方式转换成源程序。因此，编译一个文件，并立即反编译，可能会得到与输入时截然不同的源文件。
- 反编译器非常依赖于语言和库：用专门用来生成C代码的反编译器处理由Delphi编译器生成的二进制文件，可能会得到非常奇怪的结果。同样，用对Windows编程API一无所知的反编译器处理编译后的Windows二进制文件，也不会得到任何有用的结果。
- 要想准确地反编译一个二进制文件，需要近乎完美的反汇编能力：几乎可以肯定，反汇编阶段的任何错误或遗漏都会影响反编译代码。

第23章将介绍当今市场上最复杂的反编译器Hex-Rays。

#### 1.3 为何反汇编
通常，使用反汇编工具是为了在没有源代码的情况下促进对程序的了解。需要进行反汇编的常见情况包括以下几种：
- 分析恶意软件
- 分析闭源软件的漏洞
- 分析闭源软件的互操作性