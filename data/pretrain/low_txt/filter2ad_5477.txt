# Workshop on Architecting Dependable Systems (WADS 2008)

**Authors:**
- Rog√©rio de Lemos, University of Kent, UK
- Jean-Charles Fabre, LAAS-CNRS, France
- Cristina Gacek, Newcastle University, UK

**Conference:**
International Conference on Dependable Systems & Networks (DSN 2008), Anchorage, Alaska, June 24-27, 2008

**Contact Information:**
- Rogerio de Lemos: r.delemos@kent.ac.uk
- Jean-Charles Fabre: jean-charles.fabre@laas.fr
- Cristina Gacek: [Email not provided]

## Abstract
This workshop summary provides a brief overview of the "Workshop on Architecting Dependable Systems" held in conjunction with DSN 2008. The primary goal of this workshop is to promote cross-fertilization between the dependability and software architecture communities. We believe that both communities will benefit from clarifying approaches that have been previously tested and have succeeded, as well as those that have been tried but have not yet been shown to be successful.

## 1. Introduction
The initiative to bring together the international communities of dependability and software architectures began six years ago. The first workshop on "Architecting Dependable Systems" was organized during the International Conference on Software Engineering (ICSE) 2002. Since then, seven workshops have been organized, and four books have been published [1]. This series of workshops has proven to be a fertile ground for both communities to clarify previous approaches, helping to promote new topical areas where the most promising research may lie, while avoiding the reinvention of the wheel.

The main focus of this series of workshops is to address the structuring, modeling, and analysis of dependable software systems. During DSN 2008, WADS will focus on Dependable Service-Oriented Architectures.

## 2. Architecting Dependable Systems
A major challenge is how to build dependable systems from existing undependable components and systems that were not originally designed to interact with each other. These components and systems might not provide access to their internal designs and implementations, and they can evolve independently of the overall system. Based on these limitations, the delivery of correct service, and the justification of this ability, must be obtained from the interactions of these components and systems. Architectural representations of systems are effective in understanding broader system concerns by abstracting away from system details, hence the trend of addressing dependability at the architectural level in the development process.

### Perspectives on Reasoning about Dependability at the Architectural Level:
- **Architectural Description Languages:** Architectural description languages or a combination of different notations can be employed for modeling systems' architectures in terms of their components and connectors, which might include adaptors for preventing architectural mismatches.
- **Verification and Validation:** Techniques like model checking and theorem provers are employed, along with more traditional approaches such as architectural fault injection, inspections, and tests, to check whether the implementation fulfills the architectural specification.
- **Fault Tolerance:** Since it is difficult to remove all faults from a system, provisions must be made at the architectural level to tolerate residual faults. Efforts for this include structuring rules and incorporating existing fault-tolerance techniques into architectural abstractions.
- **Architectural Evaluation:** Architectural evaluation should analyze the impact that architectural decisions might have on system failure. Architectural fault injection and stochastic modeling are some of the means that have been used and are being developed.

## 3. Workshop Objectives and Topics
The aim of the workshop is to bring together the software architecture and dependability communities to discuss the state of research and practice when dealing with dependability issues at the architectural level. We are interested in submissions from both industry and academia on all topics related to software architectures for dependable systems. These include, but are not limited to:

- **Architectural Design:** Patterns, rigorous description languages, formal development, architectural views, support for evolution, integrators (wrappers) for fault tolerance, and dependability assumptions.
- **Verification & Validation:** Representation of error, type checking, model checking, architecture-based fault injection, architecture-based conformance testing, simulation, and theorem proving.
- **Fault Tolerance:** Redundancy and diversity at the architectural level, fault confinement, architectural monitoring, dynamically adaptable architectures, exception handling in software architectures, self-healing, self-repairing, self-stabilizing systems, and support for adaptable fault tolerance.
- **Assurance and Analysis:** System-level checks, dependability models, tradeoffs between dependability and cost, and run-time support for dependability.
- **Enabling Technologies:** Model-driven architectures, component-based development, aspect-oriented development, and middleware.
- **Application Areas:** Safety-critical systems, critical infrastructures, mobile systems, service-oriented architectures, and embedded systems.

## 4. Workshop Program

### 4.1. Keynote Speaker
Rick Schlichting, Director of Software Systems Research at AT&T Labs Research in Florham Park, NJ, will be our keynote speaker. He is well known for his work on distributed systems, highly dependable computing, fault tolerance, operating systems, and networks. The title of his talk will be "Keys to Architecting Dependable SOAs".

### 4.2. Dependable Service-Oriented Architectures
This year, we are building on the theme of service-oriented architectures (SOAs). SOAs imply the organization and utilization of distributed capabilities that may be under the control of different ownership domains, while providing uniform means to offer, discover, interact with, and use capabilities to produce desired overall effects. They present new challenges and opportunities when considering the architecting of dependable systems. The first question is to analyze whether well-established approaches still hold in this context. Fault models and other basic assumptions regarding dependability may need to be revisited, giving rise to novel solutions for fault tolerance. Another issue is to consider what new approaches can now be proposed that may not have been feasible outside the context of SOAs. Contributions discussed during the workshop should provide insights on how to tackle dependability problems in today's critical distributed systems, including both large-scale infrastructures and embedded devices.

For more program details, please refer to the DSN 2008 WADS website: [http://www.cs.kent.ac.uk/wads].

## 5. Committees

### 5.1. Workshop Organizers
- Rogerio de Lemos (UK)
- Jean-Charles Fabre (France)
- Cristina Gacek (UK)

### 5.2. Program Committee
- Roberto Baldoni (Italy)
- Felicita Di Giandomenico (Italy)
- Wolfgang Emmerich (UK)
- Peter Feiler (USA)
- Lars Grunske (Australia)
- Ricardo Jimenez Peris (Spain)
- Eliane Martins (Brazil)
- Nenad Medvidovic (USA)
- Henry Muccini (Italy)
- Priya Narasimhan (USA)
- Rick Schlichting (USA)
- Jean-Bernard Stefani (France)
- Elisabeth A. Strunk (USA)
- Francois Taiani (UK)
- Aad van Moorsel (UK)
- Jie Xu (UK)

## References
[1] Architecting Dependable Systems. http://www.cs.kent.ac.uk/people/staff/rdl/ADSFuture/index.htm.

---

**Note:** This document is authorized for licensed use limited to Tsinghua University. Downloaded on March 20, 2021, at 13:19:32 UTC from IEEE Xplore. Restrictions apply.