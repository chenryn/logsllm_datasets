### SSH Server Overhead Breakdown

Table 6 presents the overhead breakdown for each protected session on the SSH server side. The standard deviation for all measurements is negligible, with the exception of key generation, which has a standard deviation of 97 and 107 for Flicker and TrustVisor, respectively. These results are based on the average of 100 runs.

#### Metrics
- **Prompt-to-Password**: The time elapsed from the initial prompt to the client user entering their password.
- **Prompt-to-Shell**: The time elapsed between the password entry and the user being presented with a shell on the remote system.

Table 5 compares these overheads between an unmodified SSH, Flicker-protected passwords, and TrustVisor-protected passwords. Table 6 provides the relative overheads caused by Flicker and TrustVisor.

### SSL-Enabled Web Server

In this section, we evaluate the overhead induced by TrustVisor on a modified SSL-enabled Apache web server. The primary goal is to protect the web server’s long-term private SSL signing key.

#### Implementation Details
- **Apache Version**: v2.2.14
- **OpenSSL Version**: v0.9.8l
- **PolarSSL Version**: v0.12.1 (used for some RSA operations)

We built the web server from source, porting the security-sensitive portions to run in two Protected Application Layers (PALs). The first PAL generates the private key and encrypts it using the µTPM sealed storage operations. The second PAL uses this private key to sign the appropriate SSL handshake messages during incoming client connections.

#### Modes of Operation
- **Single Process Mode**: The server runs as a single process.
- **Prefork Mode**: The server creates multiple child processes in advance and assigns incoming client connections to different idle processes. Each child process registers its own instance of the second PAL.

#### Performance Evaluation
We used the Apache Benchmark (ab) to perform HTTPS transactions with varying levels of transaction concurrency. Table 7 shows the average number of transactions per second over 10 trials, with negligible variance. Each transaction involves transferring a 74-byte index page after establishing an SSL connection with 1024-bit RSA keys.

- **Full**: Our web server with registered PALs.
- **Vanilla**: A web server without any PALs running on the same OS on bare metal.
- **TV**: A web server without any PALs but running on the same OS on top of TrustVisor.

### Porting Effort

TrustVisor's registration mechanisms are designed to be minimally invasive when porting existing applications. However, the challenge of porting an application to include one or more PALs depends on the level of privilege separation and modularity in the application’s architecture.

#### Separated Programs
Porting security-sensitive modules to TrustVisor is straightforward if the program is already privilege-separated and modular. Ordinary code can execute as a PAL, provided it does not make system calls to the legacy OS. This is often the case for workloads such as scientific computation or cryptography.

#### Legacy Programs
Porting programs that were not designed with privilege separation or modularity in mind can be challenging. For example, porting Apache + OpenSSL was particularly difficult due to OpenSSL’s extensive use of function pointers and adaptability to different cryptographic providers. We replaced relevant RSA calls with calls to the embedded cryptography library PolarSSL.

### Discussion

#### Formal Verification
Datta et al. [10] show that support for Dynamic Root of Trust for Measurement (DRTM) is a viable means for building a system with code and execution integrity, and data secrecy and integrity protection. A hardware DRTM mechanism is the ultimate root of trust for TrustVisor. We plan to build on the results of Datta et al. to prove the security properties of the TrustVisor design and verify the implementation using software model checking methods [9].

#### Applications of Externally Verifiable Execution
Applications requiring protection of secrets or private keys, such as hard drive encryption, certificate authorities, SSH host or authentication keys, and PGP/email signing and decryption keys, can benefit from the reduced Trusted Computing Base (TCB) of operating on these keys exclusively within a PAL protected by TrustVisor. Even if the untrusted portion of the application is compromised, the worst-case scenario is that the PAL may become an encryption or signing oracle, but the actual value of the private key remains secret.

#### Optimizations and Future Work
Several optimizations have been identified:
- **Multi-processor Support**
- **Recursive Virtualizability**: To allow TrustVisor to coexist with other virtualization features.
- **Unloading and Reloading**: TrustVisor should unload itself when no PALs are registered and relaunch on-demand.

Additional features, such as timeouts and monotonic counters, may also be valuable for PAL development.

### Related Work

We focus on work that attempts to perform secure computation on a host despite the presence of malware. Intel’s P-MAPS, Nizza microkernel, seL4, and Xen’s virtual TPM (vTPM) are discussed, highlighting the trade-offs and security properties of each system.

### Conclusion

TrustVisor is a small hypervisor that enables isolated execution of Pieces of Application Logic (PALs) with a TCB containing only the TrustVisor runtime and the PAL itself. It enforces code and execution integrity, and data secrecy and integrity for PALs. TrustVisor supports unmodified legacy OSes and their applications, making it suitable for enhancing the security of current computing systems and applications.

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. CFI: Principles, implementations, and applications. In Proc. ACM Conference and Computer and Communications Security (CCS), 2005.

[2] Advanced Micro Devices. AMD64 architecture programmer’s manual: Volume 2: System programming. AMD Publication no. 24593 rev. 3.14, Sept. 2007.

[3] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A reliable bootstrap architecture. In Proc. IEEE Symposium on Research in Security and Privacy (S&P), 1997.

[4] S. Berger, R. C´aceres, K. A. Goldman, R. Perez, R. Sailer, and L. van Doorn. vTPM: Virtualizing the trusted platform module. In Proc. USENIX Security, 2006.

[5] R. Bhargava, B. Serebrin, F. Spadini, and S. Manne. Accelerating two-dimensional page walks for virtualized systems. In Proc. Architectural Support for Programming Languages and Operating Systems (ASPLOS), Mar. 2008.

[6] D. Brumley and D. Song. Privtrans: Automatically partitioning programs for privilege separation. In Proc. USENIX Security, 2004.

[7] H. Chen, F. Zhang, C. Chen, Z. Yang, R. Chen, B. Zang, P. Yew, and W. Mao. Tamper-resistant execution in an untrusted operating system using a VMM. Technical Report FDUPPITR-2007-0801, Fudan University, 2007.

[8] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems. In ASPLOS, 2008.

[9] E. Clarke, D. Kroening, and F. Lerda. A tool for checking ANSI-C programs. In Proc. Tools and Algorithms for the Construction and Analysis of Systems (TACAS), 2004.

[10] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A logic of secure systems and its application to trusted computing. In IEEE S&P, 2009.

[11] P. Dewan, D. Durham, H. Khosravi, M. Long, and G. Nagabhushan. A hypervisor-based system for protecting software runtime memory and persistent storage. In Proc. Spring Simulation Multiconference, 2008.

[12] D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(2):198–208, 1983.

[13] U. Erlingsson and F. B. Schneider. IRM enforcement of Java stack inspection. In IEEE S&P, 2000.

[14] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proc. ACM Symposium on Operating System Principles (SOSP), 2003.

[15] D. Grawrock. The Intel Safer Computing Initiative: Building Blocks for Trusted Computing. Intel Press, 2006.

[16] Intel Corporation. Intel trusted execution technology – software development guide. Document number 315168-005, June 2008.

[17] J. Katcher. Postmark: A new file system benchmark. Technical Report TR-3022, NetApp, 1997.

[18] J. Katz and Y. Lindell. Introduction to Modern Cryptography. Chapman and Hall, 2008.

[19] B. Kauer. OSLO: Improving the security of Trusted Computing. In Proc. USENIX Security, 2007.

[20] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4: formal verification of an OS kernel. In ACM SOSP, 2009.

[21] S. McCamant and G. Morrisett. Evaluating sfi for a cisc architecture. In Proc. USENIX Security, 2006.

[22] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: An execution infrastructure for TCB minimization. In Proc. ACM European Conference in Computer Systems (EuroSys), 2008.

[23] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and A. Seshadri. How low can you go? Recommendations for hardware-supported minimal TCB code execution. In ASPLOS, 2008.

[24] S. C. Misra and V. C. Bhavsar. Relationships between selected software measures and latent bug-density. In Proc. Conference on Computational Science and Its Applications, Jan. 2003.

[25] A. Sadeghi, M. Selhorst, C. St¨uble, C. Wachsmann, and M. Winandy. TCG inside? A note on TPM specification compliance. In Proc. Scalable Trusted Computing Workshop, 2006.

[26] R. Sahita, U. Warrier, and P. Dewan. Dynamic software application protection. Intel Corporation, Apr. 2009.

[27] R. Sailer, E. Valdez, T. Jaeger, R. Perez, L. van Doorn, J. L. Griffin, and S. Berger. sHype: Secure hypervisor approach to trusted virtualized systems. Technical Report RC23511, IBM Research, 2005.

[28] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and implementation of a TCG-based integrity measurement architecture. In Proc. USENIX Security, Aug. 2004.

[29] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. In ACM SOSP, 2007.

[30] L. Singaravelu, C. Pu, H. H¨artig, and C. Helmuth. Reducing TCB complexity for security-sensitive applications. In EuroSys, 2006.

[31] C. Small and M. I. Seltzer. Misfit: Constructing safe extensible systems. IEEE Concurrency, 6(3):34–41, 1998.

[32] R. Ta-Min, L. Litty, and D. Lie. Splitting interfaces: Making trust between applications and operating systems configurable. In ACM SOSP, 2006.

[33] TCG. TPM main specification. v1.2, rev. 103, 2007.

[34] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient software-based fault isolation. In ACM SOSP, 1993.

[35] J. Yang and K. Shin. Using hypervisor to provide data secrecy for user applications on a per-page basis. In Proc. ACM Conference on Virtual Execution Environments (VEE), 2008.