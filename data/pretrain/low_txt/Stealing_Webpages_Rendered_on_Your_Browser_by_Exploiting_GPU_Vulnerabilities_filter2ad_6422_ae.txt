### D. Firefox with W9000
**Figure 13.** RGB histogram distance between webpage image snapshots and dumps.

We further evaluate the inference accuracy as described in Section V-D. Using the Chromium web browser, we correctly inferred approximately 50% and 22% of 100 randomly selected front pages on NVIDIA and AMD GPUs, respectively. These results are less accurate compared to attacks using known GPU memory dumps, but the performance on NVIDIA GPUs remains significant.

### F. Attack on Victims Browsing Multiple Webpages
Finally, we investigate whether our attack can be effective against a victim who simultaneously visits multiple webpages using tabs or separate windows. This is a common practice in desktop environments.

**Figure 14.** Comparisons between combined dumps and dumps of firstly and secondly rendered webpages in two windows (Chromium and GTX 780).

Our combined matching approach correctly inferred 98.6% of webpages loaded in the foreground tabs and 90.8% of webpages loaded in the secondly rendered windows. The lower accuracy for the secondly rendered windows is likely due to the unoverwritten textures from the first rendered window. Therefore, when a victim uses a GPU-accelerated web browser to visit multiple webpages, attackers can accurately infer some of the webpages, whether they are loaded in the foreground tab or rendered in the lastly opened window.

### VI. Discussion
A straightforward solution to prevent the proposed attack is to clear newly allocated global memory pages, similar to what WebGL does. Additionally, GPUs should delete the per-CU local memory and per-PE private memory at GPU context switches.

However, such methods may lead to performance degradation, which GPU vendors may be reluctant to accept. For instance, NVIDIA aims to reduce the cost of GPU context switching below 25 µs [33]. Our optimized GPU memory deletion program, executed on an NVIDIA GeForce GTX 780 GPU, takes 79 µs to delete the entire local and private memories, which is about three times longer than the context switching time. Given that performance and power efficiency are primary concerns for GPU vendors, new hardware- and software-level solutions are needed to efficiently clear GPU memory without significant overhead.

### VII. Related Work

#### A. Remote Pixel Stealing in HTML5
Several researchers [34]–[36] have explored security attacks exploiting HTML5 CSS filters, which allow web developers to apply various graphics effects on webpages using host GPUs. By applying CSS filters to a target webpage loaded in an iframe and measuring the completion time, these attacks can recognize a user's login status and steal pixels from the target webpage. However, these attacks have limited coverage because they require victims to visit malicious webpages, and many webpages disallow loading in iframes to prevent such attacks.

#### B. Security Attacks Using GPUs
GPU-based cracking of passwords or hash values is a well-known security threat [37]. Some academic studies also utilize GPUs for conducting general security attacks. Vasiliadis et al. [38] demonstrated the possibility of malware obfuscation using GPUs by loading encrypted malware into the host's main memory, mapping it to GPU memory, and decrypting it directly on the GPU. Ladakis et al. [39] developed a GPU-based keylogger that maps the keybuffer in kernel memory to GPU memory, records keystrokes, and returns them to the host.

#### C. General Applications of GPUs
Researchers have conducted various studies to leverage GPUs for solving computation-intensive problems. For example, GPUs have been used to enhance the performance of AES [13]–[15] and RSA [16], [17] algorithms. They have also been employed in high-speed intrusion detection systems (IDSs) [10], [11], SSL accelerators [12], GPU-accelerated routers for IP networks [9], and database accelerators [7], [8].

### VIII. Conclusion
As GPUs become more powerful and versatile, their use in various applications has increased. However, there has been little in-depth study of their security vulnerabilities. In this paper, we investigated the security weaknesses of GPUs and described attacks that reveal sensitive data stored in GPU memory. We applied these attacks to popular programs like the Chromium and Firefox web browsers, which use GPUs for faster webpage rendering. We successfully obtained rendered webpage textures from GPU memory and accurately inferred their original webpages. Therefore, both GPU vendors and programmers must be aware of these security issues and develop countermeasures to address them.

### Acknowledgment
The authors would like to thank the anonymous reviewers for their insightful comments and suggestions. This research was supported by the MSIP, Korea, under the ITRC support program supervised by the NIPA through CMEST (NIPA-2013-H0301-13-3002) and NRF Grant funded by the Korean Government (NRF-2012-Global Ph.D. Fellowship Program).

### References
[1] NVIDIA, "NVIDIA’s next generation CUDA compute architecture: Kepler GK110," 2012.
[2] NVIDIA, "CUDA C programming guide version 5.5," http://docs.nvidia.com/cuda/cuda-c-programming-guide/.
[3] Microsoft, "DirectX graphics and gaming," http://msdn.microsoft.com/en-us/library/windows/desktop/ee663274(v=vs.85).aspx.
[4] D. Shreiner, G. Sellers, J. M. Kessenich, and B. M. Licea-Kane, OpenGL Programming Guide: The Official Guide to Learning OpenGL. Addison Wesley, 2013.
[5] B. Gaster, L. Howes, D. R. Kaeli, P. Mistry, and D. Schaa, Heterogeneous Computing with OpenCL. Morgan Kaufmann, 2012.
[6] NVIDIA, "Tesla supercomputing HPC industrial case studies," http://www.nvidia.com/object/tesla-case-studies.html.
[7] P. Bakkum and K. Skadron, "Accelerating SQL database operations on a GPU with CUDA," in Proceedings of the 3rd Workshop on General-Purpose Computation on Graphics Processing Units (GPGPU), 2010.
[8] H. Wu, G. Diamos, S. Cadambi, and S. Yalamanchili, "Kernel weaver: Automatically fusing database primitives for efficient GPU computation," in Proceedings of the 45th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), 2012.
[9] S. Han, K. Jang, K. Park, and S. Moon, "PacketShader: a GPU-accelerated software router," in Proceedings of the ACM SIGCOMM 2010 Conference, 2010.
[10] G. Vasiliadis, M. Polychronakis, and S. Ioannidis, "MIDeA: a multi-parallel intrusion detection architecture," in Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS), 2011.
[11] M. Jamshed, J. Lee, S. Moon, I. Yun, D. Kim, S. Lee, Y. Yi, and K. Park, "Kargus: a highly-scalable software-based intrusion detection system," in Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS), 2012.
[12] K. Jang, S. Han, S. Han, S. Moon, and K. Park, "SSLShader: Cheap SSL acceleration with commodity processors," in Proceedings of the 8th USENIX Symposium on Networked Systems Design and Implementation (NSDI), 2011.
[13] D. L. Cook, J. Ioannidis, A. D. Keromytis, and J. Luck, "CryptoGraphics: Secret key cryptography using graphics cards," in Proceedings of The Cryptographer’s Track at RSA Conference 2005 (CT-RSA), 2005.
[14] J. Yang and J. Goodman, "Symmetric key cryptography on modern graphics hardware," in Proceedings of the 13th International Conference on the Theory and Application of Cryptology and Information Security (ASIACRYPT), 2007.
[15] O. Harrison and J. Waldron, "Practical symmetric key cryptography on modern graphics hardware," in Proceedings of the 17th USENIX Security Symposium, 2008.
[16] O. Harrison and J. Waldron, "Efficient acceleration of asymmetric cryptography on graphics hardware," in Proceedings of the 2nd International Conference on Cryptology in Africa (AFRICACRYPT), 2009.
[17] R. Szerwinski and T. Guneysu, "Exploiting the power of GPUs for asymmetric cryptography," in Proceedings of the 10th Workshop on Cryptographic Hardware and Embedded Systems (CHES), 2008.
[18] J. T. Adriaens, K. Compton, N. S. Kim, and M. J. Schulte, "The case for GPGPU spatial multitasking," in Proceedings of the 18th IEEE International Conference on High Performance Computer Architecture (HPCA), 2012.
[19] VirtualGL, "The VirtualGL project," http://www.virtualgl.org.
[20] Khronos, "WebGL security," http://www.khronos.org/webgl/security/.
[21] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum, "Shredding your garbage: Reducing data lifetime through secure deallocation," in Proceedings of the 14th USENIX Security Symposium, 2005.
[22] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and M. Rosenblum, "Understanding data lifetime via whole system simulation," in Proceedings of the 13th USENIX Security Symposium, 2004.
[23] T. Garfinkel, B. Pfaff, J. Chow, and M. Rosenblum, "Data lifetime is a system problem," in Proceedings of the 11th ACM SIGOPS European Workshop, 2004.
[24] A. M. Dunn, M. Z. Lee, S. Jana, S. Kim, M. Silberstein, Y. Xu, V. Shmatikov, and E. Witchel, "Eternal sunshine of the spotless machine: Protecting privacy with ephemeral channels," in Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.
[25] R. Di Pietro, F. Lombardi, and A. Villani, "CUDA leaks: Information leakage in GPU architectures," ArXiv e-prints, 2013.
[26] C. Maurice, C. Neumann, O. Heen, and A. Francillon, "Confidentiality issues on a GPU in a virtualized environment," in Proceedings of the 18th International Conference on Financial Cryptography and Data Security (FC), 2014.
[27] R. Love, Linux Kernel Development. Addison Wesley, 2010.
[28] S. Jana and V. Shmatikov, "Memento: Learning secrets from process footprints," in Proceedings of the 33rd IEEE Symposium on Security and Privacy (Oakland), 2012.
[29] K. Zhang and X. Wang, "Peeping tom in the neighborhood: Keystroke eavesdropping on multi-user systems," in Proceedings of the 18th USENIX Security Symposium, 2009.
[30] R. Meltzer, C. Zeng, and C. Cecka, "Micro-benchmarking the C2070," in GPU Technology Conference, 2013.
[31] E. Bingham and H. Mannila, "Random projection in dimensionality reduction: Applications to image and text data," in Proceedings of the 17th ACM SIGKDD Conference on Knowledge Discovery and Data Mining (KDD), 2001.
[32] A. Hidayat, "PhantomJS: Headless WebKit with JavaScript API," http://phantomjs.org.
[33] NVIDIA, "NVIDIA’s next generation CUDA compute architecture: Fermi," 2009.
[34] R. Kotcher, Y. Pei, P. Jumde, and C. Jackson, "Cross-origin pixel stealing: Timing attack using CSS filters," in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), 2013.
[35] P. Stone, "Pixel perfect timing attacks with HTML5," in Blackhat USA, 2013.
[36] A. Barth, "Adam barth’s proposal," http://www.schemehostport.com/2011/12/timing-attack-on-css-shaders.html.
[37] D. Goodin, "25-GPU cluster cracks every standard Windows password in <6 hours."
[38] G. Vasiliadis, M. Polychronakis, and S. Ioannidis, "GPU-assisted malware," in Proceedings of the 5th International Conference on Malicious and Unwanted Software (Malware), 2010.
[39] E. Ladakis, L. Koromilas, G. Vasiliadis, M. Polychronakis, and S. Ioannidis, "You can type, but you can’t hide: A stealthy GPU-based keylogger," in Proceedings of the 6th European Workshop on System Security (EuroSec), 2013.