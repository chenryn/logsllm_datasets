#BHUSA @BlackHatEvents
**Chasing Your Tail With A Raspberry Pi**
*Matt Edmondson*

## Information Classification: General

### Why Are We Talking About This?
- For some individuals, determining whether they are being followed is a matter of physical safety for themselves or others.
- I was approached by a friend in such a situation, looking for a technical solution to complement traditional surveillance detection methods.

### The New (i.e. Really Old) SDR: Surveillance Detection Route
- One approach is to look for persistent digital signatures.
  - Visit different locations (e.g., Starbucks, gas station, bookstore) and check if any devices are present at all three locations.
  - This can be achieved by passively detecting Wi-Fi and Bluetooth devices, which may be actively connected or searching for networks.

### Hardware
- I aimed to use readily available and affordable hardware:
  - **Platform**: Raspberry Pi
  - **Wireless Adapter**: A device that can be put into monitor mode
  - **Power Source**: Battery pack or other power source
  - **Display**: A screen for real-time monitoring

### Software: Kismet
- **Kismet** is an open-source tool with a supportive community on Discord.
- It is easy to install and supports various wireless protocols, including Wi-Fi, Bluetooth, SDR, and ZigBee.
- Kismet writes data into a SQLite database and can generate PCAP and other formats as needed.
- Additional functionalities can be implemented using Python or shell scripts.

### Implementation Challenges
- **Perfection vs. Good Enough**:
  - "Perfect is the enemy of good" – Voltaire
  - "Give them the third best to go on with; the second best comes too late, the best never comes." – Robert Watson-Watt

### Kismet Configuration
- By default, Kismet creates a new SQLite file each time it starts. We configured it to output to a specific directory and used Python to parse the latest .kismet file.

### Methodology
- **Detection Logic**:
  - Look for Wi-Fi or Bluetooth devices in the area that were also seen 5-10, 10-15, or 15-20 minutes ago.
  - Alert with the MAC address, device type (e.g., Wi-Fi Access Point, BTLE), and the time frame when previously seen.

### Challenges and Solutions
- **Data Storage**:
  - Kismet stores only the first and most recent timestamps, not those in between. To address this, we created lists to track devices seen in different time frames.
  - Every minute, update the current list of devices. Every five minutes, move the current list to the 5-10 minute list, and so on.

### Avoiding False Positives
- **Ignore Lists**:
  - Create an "ignore list" of MAC addresses from the latest Kismet database to avoid alerting on known, non-threatening devices.
  - Ignore lists can be updated or re-created as needed.

### User Interface
- **Touch Screen Navigation**:
  - Implementing the system on a small touch screen without a keyboard presented unique challenges but was manageable.

### Field Testing
- **Laboratory vs. Real-World**:
  - The system worked well in the lab but faced issues in the field due to frequent MAC randomization.
  - Additional analysis of probed SSIDs was necessary to improve reliability.

### Data Analysis
- **Kismet Logs**:
  - Kismet normalizes some fields and stores additional data in JSON blobs.
  - Use the `raw_device_json` field to extract probed SSIDs, providing more robust detection regardless of MAC address changes.

### Future Enhancements
- **Path Forward**:
  - Integrate more Wi-Fi adapters and support additional wireless protocols.
  - Add GPS tracking for location-based alerts.

### Special Thanks
- Mike Kershaw (@kismetwireless)
- Dominic White (@singe)
- Joshua Wright (@joswr1ght)

### Thank You!
*Matt Edmondson*
@matt0177
PI:EMAIL
www.digitalforensicstips.com