# Deploying Prometheus at Wikimedia Foundation

## Speaker
Filippo Giunchedi - Operations Engineer  
Email: [PI:EMAIL]

## Agenda
- Introduction
- Current Infrastructure and Requirements
- Why Prometheus?
- Production Implementation
- Benefits of Prometheus
- Pre-Production Validation
- Site Deployment
- Global and Local Monitoring
- Database Monitoring
- Replacing Ganglia
- Porting Metrics
- Future Plans
- Takeaways

## Introduction
Wikimedia Foundation (WMF) operates a vast and complex infrastructure that supports Wikipedia and its sister projects. These projects collectively handle:
- 16 billion pageviews per month
- 13,000 new editors per month
- 41 million articles
- 34 million multimedia files

For more detailed data, visit: [https://reportcard.wmflabs.org](https://reportcard.wmflabs.org)

## Current Infrastructure and Requirements
Our infrastructure consists of:
- 4 sites: 2 datacenters and 2 caching Points of Presence (PoPs)
- 1,400 bare metal machines
- 125,000 requests per second (HTTPS)
- 32 Gbps outbound to clients

## Why Prometheus?
Prometheus was chosen for the following reasons:
- **Powerful Data Model and Query Language**: Enables complex queries and aggregations.
- **Prometheus as a Toolkit**: Flexible and extensible.
- **Multi-Tenancy**: Supports multiple users and teams.
- **Reliability**: Proven track record in production environments.
- **Efficient Resource Usage**: Optimized for performance.
- **Metric Flow**: Easy to understand and debug.

## Production Implementation
### Pre-Production Validation
Before deploying Prometheus to production, we validated it in a virtualized environment (WMF Labs):
- **Virtualized Environment**: Used for running community software, bots, and tools.
- **Playground for Production Users**: Allowed us to test use cases and performance.
- **Publicly Available**: 
  - [Beta Prometheus Targets](https://beta-prometheus.wmflabs.org/beta/targets)
  - [Tools Prometheus Targets](https://tools-prometheus.wmflabs.org/tools/targets)
  - [Grafana Dashboards](https://grafana-labs.wikimedia.org)

### Site Deployment
- **Bare Metal Machines**: 1+ dedicated Prometheus machines per site.
- **Prometheus Instances**: 1+ instances per machine.
- **High Availability (HA)**: Achieved via identical machines per site and LVS-DR.
- **Local Nginx**: Provides access control and reverse proxy.
- **Configuration**: Managed with Puppet and auto-generated YAML files.

For more details, see:
- [GitHub Repository](https://github.com/wikimedia/operations-puppet)
- [Wikitech Documentation](https://wikitech.wikimedia.org/wiki/Prometheus)

### Global and Local Monitoring
- **Federation**: Via a global instance for a unified view.
- **Global Overview**: Provided through dashboards.
- **Drilldown**: Detailed views available on local instances.

### Database Monitoring
- **First Use Case**: Monitoring ~180 DB machines across two datacenters.
- **Clusters**: 7 main clusters, 21 total.
- **Database Version**: MariaDB 10.0.
- **Private Data**: Monitored using an internal tool and Tendril.
- **Public Data**: Mysqld-exporter + Prometheus + Grafana.

### Replacing Ganglia
- **Current Use**: Ganglia is used for inspecting service cluster health at both machine and service levels.
- **Aggregated Data**: Used for overview and audit purposes.
- **Replacement**: Standard and custom Ganglia plugins are being audited and replaced.

For more details, see: [Phabricator Task T145659](https://phabricator.wikimedia.org/T145659)

### Porting Metrics
- **Custom Plugins**: Replaced with exporters.
- **Happy Case**: Exporters already available in Debian.
- **Unhappy Case**: Custom exporters written and packaged (e.g., HHVM).
- **Node-Exporter**: Some cases covered by node-exporter and textfile.
- **Minimal Configuration**: Managed via Puppet.
- **Prometheus Job**: Added to scrape metrics.
- **Grafana Dashboards**: Built for visualization.

## Future Plans
- **Onboarding More Teams**: Expand usage across the organization.
- **Native Instrumentation**: For services.
- **Kubernetes Monitoring**: In production.
- **More Exporters**: To cover additional metrics.
- **Alerting**: Implement robust alerting mechanisms.
- **Retire Graphite?**: Consider phasing out legacy systems.

## Takeaways
- **Prometheus is Beneficial**: It significantly improves our monitoring capabilities.
- **Deployment Experience**: The process was enjoyable and rewarding.
- **Multi-Dimensional Metrics**: Provide deep insights into our infrastructure.

For more information, please contact Filippo Giunchedi at [PI:EMAIL].