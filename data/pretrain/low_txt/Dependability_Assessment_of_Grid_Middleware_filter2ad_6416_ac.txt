### Java Library Class to Apache Axis Class

- **Returned Value Equals Sent Value**: FALSE
- **No Result Returned**: FALSE
- **Exception Generated**: None
- **No Such Operation**: FALSE

### 4.4. Injecting Bad Data

This experiment examines the behavior of two XSD types when invalid data is injected, specifically focusing on whether ASCII characters that invalidate the schema are detected and rejected by the middleware.

#### XSD Language Type

A valid XSD language type adheres to strict rules regarding the data it can encode. The encoding follows a schema that defines the types and positions of ASCII characters that can be included in this element. Figure 5 illustrates the message after the fault is injected. The new element contents are invalid because both the characters and their placement do not conform to the schema.

- **Unmarshaling of Invalid Data**: No exceptions were generated (see Table 3).
- **Consequence**: The returned value did not match the original value.
- **Reason**: Since this type is based on a string type, it is reasonable to assume that the unmarshaling process assumes the input data is valid and inserts it directly into the class instance without validation. However, an inspection of the Apache Axis class that implements this type in Java shows that validation is performed when using the standard constructors.

#### XSD PositiveInteger Type

When bad data was injected into this message exchange, a `NumberFormatException` was generated. Although this appears to be a valid exception, closer inspection revealed that it was generated as part of the standard Java string-to-number parsing mechanism, not as part of an explicit validation mechanism. Therefore, this exception can be considered an interaction fault.

### Table 3: Invalid Data Results

| XSD Type       | Returned Value Equals Sent Value | No Result Returned | Exception Generated   |
|----------------|----------------------------------|--------------------|-----------------------|
| Language       | FALSE                            | FALSE              | None                  |
| PositiveInteger| FALSE                            | FALSE              | NumberFormatException |

### 4.5. Invalid by Omission Faults

This experiment injected syntactically correct data into elements containing XSD types, but in one case, the data invalidated the type’s schema by omission (e.g., it should have started with a minus sign). This test generated an appropriate exception (see Table 4), but, as above, this was generated by the Java class parsing the value rather than through direct validation against the schema.

- **NonNegativeInteger Control**: The value 128, which is a correct value for this type, was also injected. The only consequence was that the returned value did not match the originally sent value.

### Table 4: Invalid by Omission Results

| XSD Type             | Returned Value Equals Sent Value | No Result Returned | Exception Generated   |
|----------------------|----------------------------------|--------------------|-----------------------|
| NonNegativeInteger   | FALSE                            | FALSE              | None                  |
| NonPositiveInteger   | FALSE                            | FALSE              | NumberFormatException |

### 5. Conclusion and Future Work

This paper details the application of our Grid-FIT tool to the Apache Axis component of the Globus Toolkit to assess its dependability with respect to integrity. Our study uncovered discrepancies between the Apache Axis implementation and the W3C SOAP specification, falling into two categories:

1. **Misinterpretation/Bad Implementation of the SOAP Specification**:
   - Example: Misinterpretation of the `xsi:nil` specification. While this may seem minor, it could potentially lead to buffer overflow or denial of service attacks, as large quantities of data could be transferred without being flagged as an error.

2. **Failures Due to Lack of Validation**:
   - These allow unanticipated control pathways to be exercised, leading to interaction faults. A system-by-system examination is required to ensure these cannot compromise system integrity.

We assume the potential to exploit these discrepancies is low in a Globus Grid, given it works with known SOAP stack implementations and secured systems. However, the potential exists to exploit them using modified middleware stacks, as validation is handled by guard code in Java class implementations of XSD types, not as a general message validation mechanism.

Future work will focus on enhancing our fault models to more thoroughly examine Grid middleware, determine if Grid-FIT can be applied to assess other dependability attributes, and apply our technique to more complex Globus systems and scenarios.

### 6. Acknowledgments

This work was funded as part of the EPSRC-funded CoLab project (EPSRC Reference: EP/D077249/1). We thank Dr. Paul Townend for his help and suggestions in preparing this paper.

### 7. References

[1] I. Foster, "Globus Toolkit Version 4: Software for Service-Oriented Systems," Proceedings of the International Conference on Network and Parallel Computing, China, 2005.

[2] A. Avizienis, J.-C. Laprie, B. Randell, and C. Landwehr, "Basic Concepts and Taxonomy of Dependable and Secure Computing," IEEE Transactions on Dependable and Secure Computing, vol. 1, pp. 11-33, 2004.

[3] J. Voas and G. McGraw, "Software Fault Injection: Inoculating Programs Against Errors," John Wiley & Sons, 1998.

[4] E. Marsden, J. Arlat, and J. Fabre, "Dependability of CORBA Systems: Service Characterization by Fault Injection," Proceedings of the 21st IEEE Symposium on Reliable Distributed Systems, Japan, 2002.

[5] N. Looker, B. Gwynne, J. Xu, and M. Munro, "An Ontology-Based Approach for Determining the Dependability of Service-Oriented Architectures," Proceedings of the 10th IEEE International Workshop on Object-oriented Real-time Dependable Systems, USA, 2005.

[6] N. Looker, M. Munro, and J. Xu, "A Comparison of Network Level Fault Injection with Code Insertion," Proceedings of the 29th IEEE International Computer Software and Applications Conference, Scotland, 2005.

[7] E. Christensen, F. Curbera, G. Meredith, and S. Weerawarana, "Web Services Description Language (WSDL)," Version 1.1, W3C, 2001.

[8] T. Bray, J. Paoli, C. M. Sperberg-McQueen, and E. Maler, "Extensible Markup Language (XML)," Second Edition, W3C, 2000.

[9] J. Voas, "Fault Injection for the Masses," IEEE Computer, vol. 30, pp. 129-130, 1997.

[10] P. Townend and J. Xu, "Dependability in Grids," IEEE Distributed Systems Online, vol. 6, 2005.

[11] N. Looker, M. Munro, and J. Xu, "Simulating Errors in Web Services," International Journal of Simulation Systems, Science & Technology, vol. 5, 2004.

[12] H. S. Thompson, D. Beech, M. Maloney, and N. Mendelsohn, "XML Schema Part 1: Structures Second Edition," W3C, 2004.

[13] N. Looker and J. Xu, "Assessing the Dependability of OGSA Middleware by Fault Injection," Proceedings of the 22nd IEEE Symposium on Reliable Distributed Systems, Italy, 2003.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 05:38:26 UTC from IEEE Xplore. Restrictions apply.

37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07) 0-7695-2855-4/07 $20.00 © 2007