### 4.2 Modifications to SSL

#### Client Puzzles
To support client puzzles, we modified the SSL protocol to include puzzle data where necessary. The client indicates its support for puzzles by adding an extension to the `ClientHello` message. The server then sends the puzzle as an extension to the `ServerHello` message. The client includes its solution in a new `PuzzleSolution` message.

One of the challenges in using client puzzles in SSL is the limited interaction flow between the client and server. Ideally, the server should issue a puzzle and then receive and verify the solution before performing any expensive operations. However, in many cipher suites, such as those using ephemeral Diffie-Hellman key agreement, the server must perform an expensive private key operation in the `ServerKeyExchange` message before receiving the client’s `PuzzleSolution` message. As such, our client puzzle technique is most applicable to cipher suites without a `ServerKeyExchange` message, such as RSA-based key transport.

#### FVDS Cipher Suite
We added a new cipher suite that uses FVDS for client authentication, RSA for key transport, AES128-CBC for symmetric encryption, and SHA-1 as the hash function. This cipher suite also supports an optional client puzzle integrated with the FVDS scheme as described in Section 3.1.

### 4.3 Performance Analysis of SSL with New Countermeasures

To evaluate the effectiveness of the proposed countermeasure, we made further modifications to OpenSSL (beyond those in Section 3.1) to include support for a hash-based client puzzle and for the FVDS-based authentication protocol with a built-in puzzle. We also modified the Apache web server (version 2.2.15) as needed to support these changes. We used the `http_load` package [1], which can generate many client requests over either HTTP or HTTPS (when used with OpenSSL). Our modifications ensured that `http_load` could use the denial-of-service countermeasures as well.

Our experiments involved a single server (a Linux server with an Intel Core 2 Duo 2.53 GHz (T9400) CPU with 4 GB of RAM, running on an x86_64 architecture) and multiple client machines across a dedicated network with no other traffic or programs running.

We compared three cipher suites. All three cipher suites used RSA-based public key transport, AES128-CBC symmetric encryption, and SHA-1 as the hash function. The difference was in client authentication: one cipher suite used no client authentication, one used RSA signatures for client authentication, and the last used FVDS for client authentication. All public keys were 1024-bit keys.

We performed the following experiments. The results, in connections per second, are reported in Table 3. Each test was run five times, and the results were averaged.

- **Test 1: "No Puzzle"** - This test established a baseline of the number of connections per second each cipher suite could handle without any puzzles or denial-of-service countermeasures. (In other words, for the FVDS-based cipher suite, FVDS signatures from Section 3.1 were used for client authentication, but the FVDS-puzzle protocol of Section 3.2 was not used.)

- **Test 2: "Hash:12, Legitimate Solutions"** - This test included a simple hash-based client puzzle based on the hash-inversion puzzle of Aura et al. [3]. The client needs to find a preimage \( x \) such that the hash value \( H(x) \) starts with at least 12 zero bits (where \( H \) is the SHA-1 hash function). Our clients simulated solving the puzzle legitimately, allowing us to determine the maximum number of legitimate connections per second the server can handle.

- **Test 3: "FVDS:12, Legitimate Solutions"** - This test, only for the FVDS-based cipher suite, is similar to Test 2 except that the hash-based puzzle is integrated with the FVDS signature generation/verification as in Section 3.2, with \( Q = 12 \) and \( D = 0 \).

- **Test 4: "Hash:12 / FVDS:12, Garbage Solutions"** - In this test, the clients do not solve the puzzle, instead sending as many fake requests as possible.

- **Test 5: "Hash:12 / FVDS:12, Mix Legitimate/Garbage"** - In this test, 100 legitimate clients were simulated, as well as a large number of attacking clients sending fake requests.

### Observations

- Adding RSA-based client authentication results in a 16% performance decrease compared to unauthenticated connections.
- Client authentication using FVDS instead of RSA signatures allows for 7% more connections per second. While still an improvement, this is quite small compared to the 6-fold increase in the number of signature verifications per second reported in Table 1. This is because signature verification is a relatively small part of the overall server cost, which is dominated by the cost of the RSA private key decryption operation.
- Verification of `fvds:12` puzzles (based on the protocol in Section 3.2) does not add any cost for legitimate connections, whereas verifying a separate `hash:12` puzzle adds a 1.5% performance penalty for RSA-based cipher suites.
- In attack scenarios, FVDS-based cipher suites can handle 8% more fake connections than RSA-based cipher suites.

### 5. Conclusion

Denial-of-service attacks are a challenging threat that cannot be completely prevented. There are many vectors of attack, and in this paper, we focused on DoS attacks that exhaust server resources by causing a server to perform many expensive operations. DoS countermeasures, such as client puzzles, can discourage attackers by increasing the resources required to mount an attack.

Our gradual authentication scheme provides an effective, multi-layer, integrated approach to denial-of-service resistance. Our use of fast-verification digital signatures can provide client authentication between 6 and 20 times faster than conventional approaches, and our integration of puzzle verification in the signature scheme gives puzzle verification at no additional cost.

We integrated our techniques into the SSL protocol and tested our techniques on a dedicated network. Our experimental results indicate that the proposed approach can be effective in mitigating DoS attacks on SSL servers. While there are speed increases offered by fast-verification digital signatures, further improvements could be had if the server’s cost of key transport was reduced, which we believe is an important subject of future research in DoS-resistant protocols for real-world networks.

### 6. Acknowledgments

The authors would like to thank the ASIACCS anonymous referees for their reviews. The authors are also grateful to Lakshmi Devi Kuppusamy for her valuable comments and helpful advice and Hua Liu for his assistance in experiment implementation. This work was supported by the Australia-India Strategic Research Fund project TA020002.

### 7. References

[1] ACME Labs. `http_load`, March 2006. URL: <http://www.acme.com/software/http_load/>.

[2] T. Aura and P. Nikander. Stateless connections. In Y. Han, T. Okamoto, and S. Qing, editors, Proceedings of the First International Conference on Information and Communications Security (ICICS) 1997, volume 1334 of LNCS, pages 87–97. Springer, 1997.

[3] T. Aura, P. Nikander, and J. Leiwo. DoS-resistant authentication with client puzzles. In B. Christianson, B. Crispo, J. A. Malcolm, and M. Roe, editors, Security Protocols: 8th International Workshop, volume 2133 of LNCS, pages 170–177. Springer, 2000.

[4] A. Back. Hashcash: A denial-of-service countermeasure. 2002. URL: <http://www.hashcash.org/papers/hashcash.pdf>.

[5] D. J. Bernstein. A secure public-key signature system with extremely fast verification, August 2000. URL: <http://cr.yp.to/papers.html#sigs>.

[6] D. J. Bernstein. Proving tight security for Rabin-Williams signatures. In N. Smart, editor, Advances in Cryptology — Proc. EUROCRYPT 2008, volume 4965 of LNCS, pages 70–87. Springer, 2008.

[7] C. Castelluccia, E. Mykletun, and G. Tsudik. Improving secure server performance by re-balancing SSL/TLS handshakes. In Proceedings of the 2006 ACM Symposium on Information, Computer and Communications Security, pages 26–34. ACM, 2006.

[8] CERT. Denial of service attacks. URL: <http://www.cert.org/tech_tips/denial_of_service.html>, 3 May 2010.

[9] L. Chen, P. Morrissey, N. P. Smart, and B. Warinschi. Security notions and generic constructions for client puzzles. In M. Matsui, editor, Advances in Cryptology — Proc. ASIACRYPT 2009, volume 5912 of LNCS, pages 505–523. Springer, 2009.

[10] C. Coarfa, P. Druschel, and D. Wallach. Performance analysis of TLS web servers. ACM Transactions on Computer Systems, 24(1):39–69, 2006.

[11] D. Dean and A. Stubblefield. Using client puzzles to protect TLS. In Proc. 10th USENIX Security Symposium, 2001.

[12] W. Feng, E. Kaiser, and A. Luu. Design and implementation of network puzzles. In INFOCOM 2005. 24th Annual Joint Conference of the IEEE Computer and Communications Societies. Proceedings IEEE, volume 4, pages 2372–2382. IEEE, 2005.

[13] S. Goldwasser, S. Micali, and R. L. Rivest. A digital signature scheme secure against adaptive chosen message attacks. SIAM Journal on Computing, 17(2):281–308, April 1988.

[14] A. Juels and J. Brainard. Client puzzles: A cryptographic countermeasure against connection depletion attacks. In Proc. Internet Society Network and Distributed System Security Symposium (NDSS) 1999, pages 151–165. Internet Society, 1999.

[15] P. Karn and W. A. Simpson. Photuris: Session-key management protocol, March 1999. RFC 2522. URL: <http://www.ietf.org/rfc/rfc2522.txt>.

[16] C. Kaufman. Internet Key Exchange (IKEv2) protocol, December 2005. RFC 4306. URL: <http://www.ietf.org/rfc/rfc4306.txt>.

[17] V. Laurens, A. El-Saddik, and A. Nayak. Requirements for client puzzles to defeat the denial of service and the distributed denial of service attacks. International Arab Journal of Information Technology, 123