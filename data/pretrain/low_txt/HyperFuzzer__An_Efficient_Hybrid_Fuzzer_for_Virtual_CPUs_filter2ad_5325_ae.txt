### Generation or Solving

Despite its simplicity, American Fuzzy Lop (AFL) has been shown to discover many bugs that are missed by pure blackbox random fuzzing. Hybrid fuzzing, as explored in [17, 35, 39, 48, 50, 53], combines graybox and whitebox fuzzing techniques. The objective is to find the optimal balance between simpler and more complex techniques, using simpler methods when they suffice for good code coverage and resorting to more advanced methods, such as symbolic execution and constraint solving, only when necessary.

HFL [35] extends hybrid fuzzing to the kernel space by employing dynamic symbolic execution based on hardware emulation [19] and addressing kernel-specific challenges like inferring system call dependencies. 

### HyperFuzzer: A Novel Approach

As the first efficient hybrid fuzzer for virtual CPUs, HyperFuzzer differs from HFL in two key ways:
1. **Target Focus**: HyperFuzzer targets hypervisors by performing hypervisor-only analysis, concentrating on hypervisor execution over a single VM trap.
2. **Symbolic Execution Method**: HyperFuzzer leverages hardware tracing to achieve precise and efficient symbolic execution using Nimble Symbolic Execution (NSE), while HFL relies on hardware emulation.

### Hypervisor Testing

Amit et al. [14] adapted Intel’s tools for testing physical CPUs to test virtual CPUs implemented by a hypervisor. Their tool generates a sequence of random instructions to execute on the virtual CPU and checks for architectural state divergences compared to a reference implementation, such as a CPU simulator. This approach is purely blackbox, relying on detailed knowledge of the x86 architecture to generate comprehensive test cases.

**MultiNyx [24]** systematically generates test cases for hypervisors by applying dynamic symbolic execution to the entire system. It runs the hypervisor on an instrumented Bochs emulator [3], which itself runs on the Pin binary instrumentation framework [38]. By combining traces across multiple levels, MultiNyx achieves dynamic symbolic execution for test case generation. However, this method incurs high performance overhead due to the cost of emulation and the complexity of reasoning about multi-level traces.

**PokeEMU [40]** performs symbolic execution on a high-fidelity emulator (e.g., Bochs) to generate test cases for other virtual CPU implementations (e.g., hypervisors). Since it does not reason about the execution of the system under test, it may miss corner cases specific to the hypervisor.

**Hyper-Cube [44]** implements a blackbox hypervisor fuzzer based on a custom operating system running a custom bytecode interpreter. Its blackbox nature makes it less likely to detect hypervisor bugs involving complex conditions. Additionally, Hyper-Cube does not mutate the VM's architectural state, limiting its testing coverage.

**Nyx [45]** is a coverage-guided graybox hypervisor fuzzer. It runs a target hypervisor in a guest VM via nested virtualization and records its coverage using Intel PT. Nyx relies on Hyper-Cube to drive the workload, sharing the same limitation of not mutating the VM's architectural environment. Its lack of whitebox fuzzing for precise input generation limits its search space, making it effective primarily for finding bugs in ring-3 I/O device emulation code in QEMU, but not in KVM’s virtual CPU code running in ring-0.

### Requirements for Effective Virtual CPU Bug Detection

As discussed in §2, to catch tricky virtual CPU bugs, HyperFuzzer must be able to:
- Mutate a VM's entire state (e.g., modify the GDT).
- Generate precise inputs based on dynamic symbolic execution (e.g., generate the RDTSC opcode).

Hypervisor fuzzers like Hyper-Cube and Nyx do not meet these requirements and would miss the six bugs described in §6.5, which require symbolic execution and/or VM state mutation.

### Hardware Tracing with Intel PT

Intel Processor Trace (PT) [32, Chap. 35] is a practical hardware tracing technology that records complete control flow with low performance overhead and without modifying the tracing target. It can also record fine-grained timestamps. Intel PT has been used in various scenarios, including:

- **Fuzzing**: Systems like kAFL [46], PTRIX [18], and PTFuzz [52] use Intel PT to enable coverage-guided graybox fuzzing. kAFL is limited to OS kernel components and coverage-guided fuzzing, while PTRIX and PTFuzz achieve high efficiency by mapping highly-compressed Intel PT traces to code coverage.
- **Pointer Analysis**: SNORLAX [34] uses Intel PT to perform points-to analysis and determine thread interleaving, achieving higher accuracy than traditional static pointer analysis.
- **Reverse Debugging**: REPT [20, 26] is a reverse debugging tool based on Intel PT, capable of inferring data values from the control flow and final program state. However, it cannot be directly applied to hybrid fuzzing due to the high overhead of taking memory dumps.
- **Failure Reproduction**: Execution Reconstruction (ER) [54] harnesses failure reoccurrences to iteratively perform hardware-assisted control/data tracing and symbolic execution, identifying key data for successful failure reproduction.

### Conclusion

We have introduced HyperFuzzer, the first efficient hybrid fuzzer for virtual CPUs. HyperFuzzer leverages hardware tracing to record the hypervisor's control flow efficiently and introduces Nimble Symbolic Execution to perform precise symbolic execution using only the recorded control flow and fuzzing input. Our prototype implementation for Microsoft Hyper-V demonstrates high fuzzing throughput and the ability to identify and flip most input-dependent branches. More importantly, HyperFuzzer has discovered 11 previously unknown virtual CPU bugs in the Hyper-V hypervisor, all of which have been confirmed and fixed.

### Acknowledgments

We thank our shepherd, Yajin Zhou, and other reviewers for their insightful feedback. We are grateful for the help from our colleagues at Microsoft, particularly Aditya Bhandari, Alexander Grest, David Hepkin, Daniel King, Eric Lee, Sunil Muthuswamy, Sai Ganesh Ramachandran, Bruce Sherwin, and David Zhang. Special thanks to Hangchen Yu for his internship work on enabling Intel PT tracing of the hypervisor.

### References

[1] American Fuzzy Lop. https://github.com/google/AFL.
[2] AWS Nitro System. https://aws.amazon.com/ec2/nitro/.
[3] Bochs x86 PC emulator. http://bochs.sourceforge.net/.
[4] Fuzzing Para-virtualized Devices in Hyper-V. https://msrc-blog.microsoft.com/2019/01/28/fuzzing-para-virtualized-devices-in-hyper-v/.
[5] Hyperseed. https://github.com/Microsoft/MSRC-Security-Research/blob/master/presentations/2019_02_OffensiveCon/2019_02%20-%20OffensiveCon%20-%20Growing%20Hypervisor%200day%20with%20Hyperseed.pdf.
[6] KVM Unit Tests. https://www.linux-kvm.org/page/KVM-unit-tests.
[7] Microsoft Hyper-V Bounty Program. https://www.microsoft.com/en-us/msrc/attacking-the-vm-worker-process/.
[8] Ventures into Hyper-V - Fuzzing hypercalls. https://labs.f-secure.com/blog/ventures-into-hyper-v-part-1-fuzzing-hypercalls.
[9] Viridian Fuzzer. https://github.com/FSecureLABS/ViridianFuzzer.
[10] XenFuzz. https://www.openfoo.org/blog/xen-fuzz.html.
[11] Attacking the VM Worker Process. https://msrc-blog.microsoft.com/2019/09/11/attacking-the-vm-worker-process/.
[12] https://github.com/MSRSSP/hyperfuzzer-seeds.
[13] Eyad Alkassar, Mark A Hillebrand, Wolfgang Paul, and Elena Petrova. 2010. Automated Verification of a Small Hypervisor. In Proceedings of the Third International Conference on Verified Software: Theories, Tools, and Experiments (VSTTE).
[14] Nadav Amit, Dan Tsafrir, Assaf Schuster, Ahmad Ayoub, and Eran Shlomo. 2015. Virtual CPU Validation. In Proceedings of the 25th ACM Symposium on Operating Systems Principles (SOSP).
[15] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (OSDI).
[16] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, and Dawson R. Engler. 2006. EXE: Automatically Generating Inputs of Death. In Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS).
[17] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong Zhang, Tao Wei, and Long Lu. 2020. SAVIOR: Towards Bug-Driven Hybrid Testing. In Proceedings of the 41st IEEE Symposium on Security and Privacy.
[18] Yaohui Chen, Dongliang Mu, Jun Xu, Zhichuang Sun, Wenbo Shen, Xinyu Xing, Long Lu, and Bing Mao. 2019. Ptrix: Efficient Hardware-Assisted Fuzzing for COTS Binary. In Proceedings of the 14th ACM Asia Conference on Computer and Communications Security.
[19] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems. In Proceedings of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS).
[20] Weidong Cui, Xinyang Ge, Baris Kasikci, Ben Niu, Upamanyu Sharma, Ruoyu Wang, and Insu Yun. 2018. REPT: Reverse Debugging of Failures in Deployed Software. In Proceedings of the 13th USENIX Symposium on Operating Systems Design and Implementation (OSDI).
[21] Mike Dahlin, Ryan Johnson, Robert Bellarmine Krug, Michael McCoyd, and William Young. 2011. Toward the Verification of a Simple Hypervisor. In Proceedings of the 10th International Workshop on the ACL2 Theorem Prover and its Applications.
[22] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An Efficient SMT Solver. In Proceedings of the 14th International conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS). Springer, 337–340.
[23] Bassem Elkarablieh, Patrice Godefroid, and Michael Y. Levin. 2009. Precise Pointer Reasoning for Dynamic Test Generation. In Proceedings of the 18th International Symposium on Software Testing and Analysis (ISSTA).
[24] Pedro Fonseca, Xi Wang, and Arvind Krishnamurthy. 2018. MultiNyx: a Multi-Level Abstraction Framework for Systematic Analysis of Hypervisors. In Proceedings of the Thirteenth EuroSys Conference.
[25] J. E. Forrester and B. P. Miller. 2000. An Empirical Study of the Robustness of Windows NT Applications Using Random Testing. In Proceedings of the 4th USENIX Windows System Symposium. Seattle.
[26] Xinyang Ge, Ben Niu, and Weidong Cui. 2020. Reverse Debugging of Kernel Failures in Deployed Systems. In Proceedings of the 2020 USENIX Annual Technical Conference (ATC’20). 281–292.
[27] Patrice Godefroid. 2011. Higher-Order Test Generation. In Proceedings of ACM SIGPLAN 2011 Conference on Programming Language Design and Implementation (PLDI).
[28] Patrice Godefroid. 2020. Fuzzing: Hack, Art, and Science. Communications of the ACM 63, 2 (February 2020), 70–76.
[29] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: Directed Automated Random Testing. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI).
[30] Patrice Godefroid, Michael Y Levin, and David Molnar. 2008. Automated White-box Fuzz Testing. In Proceedings of the 16th Annual Network and Distributed System Security Symposium (NDSS).
[31] Ronghui Gu, Zhong Shao, Hao Chen, Xiongnan Newman Wu, Jieung Kim, Vilhelm Sjöberg, and David Costanzo. 2016. CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels. In Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI).
[32] Intel Corporation. Intel 64 and IA-32 Architectures Software Developer’s Manual, Volume 3. https://software.intel.com/content/www/us/en/develop/articles/intel-sdm.html.
[33] Wei Jin and Alessandro Orso. 2012. BugRedux: Reproducing Field Failures for In-House Debugging. In Proceedings of the 34th International Conference on Software Engineering (ICSE).
[34] Baris Kasikci, Weidong Cui, Xinyang Ge, and Ben Niu. 2017. Lazy Diagnosis of In-Production Concurrency Bugs. In Proceedings of the 26th ACM Symposium on Operating Systems Principles (SOSP).
[35] Kyungtae Kim, Dae R Jeong, Chung Hwan Kim, Yeongjin Jang, Insik Shin, and Byoungyoung Lee. 2020. HFL: Hybrid Fuzzing on the Linux Kernel. In Proceedings of the 28th Network and Distributed Systems Security Conference (NDSS).
[36] Gerwin Klein, Kevin Elphinstone, Gernot Heiser, June Andronick, David Cock, Philip Derrin, Dhammika Elkaduwe, Kai Engelhardt, Rafal Kolanski, Michael Norrish, et al. 2009. seL4: Formal verification of an OS kernel. In Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP).
[37] Dirk Leinenbach and Thomas Santen. 2009. Verifying the Microsoft Hyper-V hypervisor with VCC. In Proceedings of the International Symposium on Formal Methods.
[38] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. ACM SIGPLAN Notices 40, 6 (2005), 190–200.
[39] Rupak Majumdar and Koushik Sen. 2007. Hybrid Concolic Testing. In Proceedings of the 29th International Conference on Software Engineering (ICSE). IEEE, 416–426.
[40] Lorenzo Martignoni, Stephen McCamant, Pongsin Poosankam, Dawn Song, and Petros Maniatis. 2012. Path-Exploration Lifting: Hi-Fi Tests for Lo-Fi Emulators. In Proceedings of the Seventeenth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS).
[41] Microsoft. Hyper-V Architecture. https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/reference/hyper-v-architecture.
[42] Barton P. Miller, Louis Fredriksen, and Bryan So. 1990. An empirical study of the reliability of UNIX utilities. Commun. ACM 33, 12 (Dec 1990).
[43] Florent Saudel and Jonathan Salwan. 2015. Triton: A Dynamic Symbolic Execution Framework. In Symposium sur la sécurité des technologies de l’information et des communications. 31–54.
[44] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten Holz. 2020. HYPER-CUBE: High-Dimensional Hypervisor Fuzzing. In Proceedings of the 28th Network and Distributed Systems Security Conference (NDSS).
[45] Sergej Schumilo, Cornelius Aschermann, Ali Abbasi, Simon Wörner, and Thorsten Holz. 2021. Nyx: Greybox Hypervisor Fuzzing using Fast Snapshots and Affine Types. In Proceedings of the 30th USENIX Security Symposium. Virtual Event.
[46] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. 2017. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels. In Proceedings of the 26th USENIX Security Symposium. 167–182.
[47] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Audrey Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2016. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. In Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland).
[48] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Proceedings of the 24th Network and Distributed System Security Symposium (NDSS).
[49] Michael Sutton, Adam Greene, and Pedram Amini. 2007. Fuzzing: Brute Force Vulnerability Discovery. Addison-Wesley.
[50] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and Taesoo Kim. 2018. QSYM : A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing. In Proceedings of the 27th USENIX Security Symposium.
[51] Cristian Zamfir and George Candea. 2010. Execution Synthesis: A Technique for Automated Debugging. In Proceedings of the 5th European Conference on Computer Systems (EuroSys).
[52] Gen Zhang, Xu Zhou, Yingqi Luo, Xugang Wu, and Erxue Min. 2018. PTFuzz: Guided Fuzzing with Processor Trace Feedback. IEEE Access 6 (2018), 37302–37313.
[53] Lei Zhao, Yue Duan, Heng Yin, and Jifeng Xuan. 2019. Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing. In Proceedings of the 27th Network and Distributed System Security Symposium (NDSS).
[54] Gefei Zuo, Jiacheng Ma, Andrew Quinn, Pramod Bhatotia, Pedro Fonseca, and Baris Kasikci. 2021. Execution Reconstruction: Harnessing Failure Reoccurrences for Failure Reproduction. In Proceedings of the 42nd ACM SIGPLAN International Conference on Programming Language Design and Implementation (PLDI’21). Virtual Event.