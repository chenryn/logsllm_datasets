### Antivirus Engines and Bypass Techniques

#### Static Engine
A static engine in antivirus software is designed to detect malware based on known signatures. However, sophisticated malware can evade this detection by altering its signature or using obfuscation techniques. The following diagram illustrates the scanning flow of a static engine:

**Figure 1.1 – Antivirus Static Engine Illustration**

#### Dynamic Engine
A dynamic engine enhances the capabilities of antivirus software by detecting malware during execution. This engine checks files at runtime using several methods:

1. **API Monitoring**: This method intercepts API calls in the operating system to identify malicious activity. System hooks are used to monitor these calls.
2. **Sandboxing**: A sandbox is a virtual environment isolated from the host computer's memory. Malware is executed within this environment for analysis, preventing it from affecting the actual system.

Sandboxing is particularly effective against unsigned malware that might bypass the static engine. However, a significant limitation is that malware may be designed to remain dormant during the limited time it is executed in the sandbox, only activating its malicious functions afterward.

**Figure 1.2 – Antivirus Dynamic Engine Illustration**

#### Heuristic Engine
A heuristic engine combines both static and dynamic methodologies to score files based on their potential threat level. This engine uses predefined behavioral rules to detect suspicious activities, such as:

- Interactions with sensitive processes like LSASS.exe.
- Unsigned processes attempting to persist in the system.
- Processes opening listening ports for command and control (C2) communication.

While heuristic-based detection is powerful, it can generate false positives and may be bypassed through trial and error.

**Figure 1.3 – Antivirus Heuristic Engine Illustration**

#### Unpacker Engine
An unpacker engine is used to reveal the payload of packed or compressed malware, which often hides its true nature to evade signature-based detection. Creating automated unpackers requires manual unpacking by security researchers, which can be time-consuming and resource-intensive.

### Antivirus Bypass Research

To demonstrate that antivirus software is not infallible, we conducted research involving the creation and testing of custom EXE files containing various bypass techniques. Our goal was to gain remote control over an endpoint without triggering any alerts from the antivirus software.

#### Communication Methods
The malware communicated with the C2 server using TCP protocol, employing two methods:

- **Bind Shell**: The malware listens on a fixed port on the victim's machine, allowing the attacker to connect at any time.
- **Reverse Shell**: The malware connects to a fixed port on the attacker's C2 server, making it easier to bypass NAT and potentially fool security solutions.

**Figure 1.4 – Reverse Shell and Bind Shell**

### Summary

Antivirus software is a critical component of endpoint security, but it is not impervious to bypass. Understanding the inner workings of different antivirus engines and conducting thorough research can help identify and exploit vulnerabilities. In the next chapter, we will delve into the tools and techniques used for effective antivirus research.

---

### Before Research Begins

#### Getting Started with the Research
Antivirus software consists of numerous files and components, each with a specific function. Selecting the right files for investigation is crucial to avoid wasting time. Prioritizing leads and understanding the self-protection mechanisms of antivirus software are essential steps.

#### The Work Environment and Lead Gathering
Understanding the fundamental aspects of the operating system, such as processes, threads, and the registry, is necessary for effective lead gathering. We used VMware Fusion and AVG Antivirus for our research, ensuring snapshots were taken for a clean start.

**Figure 2.1 – Process Explorer in Windows 10**
**Figure 2.2 – Running Threads Under a Process in Windows 10**
**Figure 2.3 – Illustration of the Registry**

#### Defining a Lead
A lead is a file whose purpose in the antivirus operation is known and deemed suitable for research. Leads are akin to the reconnaissance phase in penetration testing, providing valuable information for further investigation.

#### Working with Process Explorer
Process Explorer provides detailed information about running processes, including CPU usage, memory allocation, and associated DLLs. This tool is invaluable for identifying leads, such as DLLs and sys files injected into processes by the antivirus.

**Figure 2.4 – The First Glimpse of Process Explorer**
**Figure 2.5 – Process Explorer Columns**
**Figure 2.6 – The Select Columns Button**
**Figure 2.7 – Select Columns Options**
**Figure 2.8 – Interesting Data About the Process We Clicked**
**Figure 2.9 – Two Interesting DLL Files of AVG Antivirus**
**Figure 2.10 – Twelve Interesting Sys Files of AVG Antivirus**

#### Working with Process Monitor
Process Monitor helps observe the behavior of processes in real-time. By filtering events, we can identify the processes involved in file scanning, such as AVGUI.exe and AVGSvc.exe, and add them to our research leads list.

**Figure 2.11 – Actions of Notepad.exe Shown in Process Monitor**
**Figure 2.12 – Event Properties Window in Process Monitor**
**Figure 2.13 – The Filter Button**
**Figure 2.14 – Filter by Company Name Example**
**Figure 2.15 – The Scan Selected Items for Viruses Button**
**Figure 2.16 – The Results of the Filter We Used**
**Figure 2.17 – The Process Tree Window of Process Monitor**

**Tip**: To show only EXE files in Process Monitor, filter by Path and choose the appropriate condition.