# Index

## A
- **Authentication**: 150–151
- **NTLM Security Support Provider (NTLMSSP)**: 133–135
- **NTOWFv2**: 148
- **Num Transform**: 214

## O
- **Obfuscation**: 307
- **Office Open XML Documents**: 69
- **Offset Field Tag**: 140
- **Offset Values**: 300
- **OmitEmpty**: 62
- **Open Ports**: 22
- **OPSEC (Operational Security)**: 329
- **Optional Header**: 284–285
- **Oracle**: 154
- **os Package**: 197
- **os/exec Package**: 41

## P
- **Packages**: 2, 8–9
- **Packet Capturing and Filtering**: 175–180
- **Panic() Function**: 107, 112
- **ParseTags() Function**: 140–142
- **Passive Reconnaissance**: 51, 59
- **Pass-the-Hash Authentication**: 147–150
- **Passwords**: 146–151, 222–224
- **PATCH Requests**: 47
- **Payloads**: 101, 302–307
- **pcap**: 175
- **PDF Files**: 69
- **PE (Portable Executable) Format**: 279–289
- **PipeReader**: 43
- **PipeWriter**: 43
- **PKCS (Public Key Cryptography Standards)**: 242. See also public-key cryptography
- **pkg Directory**: 2–3
- **Placeholders**: 83, 89
- **Plan 9 Operating System**: 216
- **Plug-ins**
  - **Lua**: 225–232
  - **Native**: 218–224
- **Plugin Package**: 219
- **PNG Format**: 296–307
- **Pointers**: 12
- **Portable Executable (PE) Format**: 279–289
- **Portable Network Graphics (PNG) Images**: 296–307
- **Ports**
  - **Availability**: 24–25
  - **Handshake Process**: 22
  - **Port Forwarding**: 23, 39–40
  - **Port Scanners**: 180–185, 222–224
  - **Scanning**: 23–32. See also scanners
- **Post() Function**: 46–47
- **PostForm() Function**: 47
- **Postgres Databases**: 156–157, 160–161
- **PostgreSQL Databases**: 156–157, 160–161
- **PreProcessImage() Function**: 298
- **Primitive Data Types**: 10–11
- **Process() Function**: 72–73
- **Process Hacker**: 278
- **Process Injection**: 268–269
- **Process Monitor**: 278
- **ProcessImage() Method**: 302–303
- **Procselfmem() Function**: 205
- **Project Structure**: 52–53, 60
- **Promisc Variable**: 177
- **Protocol Buffers (Protobuf)**: 316
- **PsExec**: 131
- **Public-Key Cryptography**: 242, 245. See also encryption
- **PUT Requests**: 47–48
- **Python**: 197–201

## Q
- **Query Parameters**: 73–76

## R
- **Race Condition Functions**: 206
- **Rapid7**: 60
- **RATs (Remote Access Trojans)**: 315–329
- **Raw Transform**: 215
- **RC2**: 252–261
- **ReadString() Function**: 38
- **Reconnaissance**: 51, 59
- **Redirectors**: 98
- **Referential Fields**: 138–139
- **Reflect Package**: 139
- **Reflection**: 132, 139
- **Regular Expression (Regex) Values**: 163
- **Remote Access Trojans (RATs)**: 315–329
- **Remote Procedure Calls (RPCs)**: 59, 64–67, 316
- **Request/Response Cycles**: 46, 62–64
- **Response Handling**: 48–51
- **Rivest, Ron**: 252
- **RLock**: 129
- **Roundcube**: 90
- **Routers**: 79–80, 84–85
- **RST Packets**: 22

## S
- **Salts**: 234
- **Scanner Package**: 220, 223
- **Scanners**: 23–32, 180–185, 217, 222–224. See also ports
- **Schema-Less Databases**: 154
- **Scraping Metadata**: 68–76
- **Search() Function**: 163
- **Search Query Templates**: 73–76
- **Section Table**: 287–289
- **Security Tokens**: 133–134
- **Send() Method**: 65
- **ServeFile() Function**: 97
- **Server Message Block (SMB)**: 132–147
- **Server Multiplexers**: 78–79
- **ServerMux**: 78–79
- **SessionList() Method**: 66, 68
- **Set Command**: 3
- **SHA-256 Hashes**: 236–237
- **Shellcode**: 203–204, 213–216
- **Shodan**: 51–59
- **Signature Validation**: 245–248
- **Site Filter**: 73
- **Slices**: 11, 106, 126, 144–145
- **SQL Injection Fuzzing**: 192–196
- **SQLite Databases**: 328
- **src Directory**: 3
- **Stateless Protocols**: 46
- **Static Files**: 93
- **Status Struct**: 50–51
- **Steganography**
  - **Overview**: 295
  - **PNG Format**: 296–307
  - **XOR**: 307–312
- **Strconv Package**: 25
- **Strlen() Function**: 17
- **StrToInt() Method**: 304
- **Structs**
  - **APIInfo Struct**: 55
  - **Client Struct**: 53–54
  - **Encoding**: 135
  - **Foo Struct**: 19
  - **Handling**: 142–143
  - **Msg Struct**: 106–107
  - **Status Struct**: 50–51
  - **Types of**: 12–13, 19, 133–135
- **Structured Data**: 18–19, 50–51
- **Stub**: 281
- **Subdirectories**: 2–3
- **Subdomains**: 107–117
- **Switch Statements**: 14, 129, 143
- **Switched Networks**: 178
- **Symmetric Algorithms**: 234
- **Symmetric-Key Encryption**: 242–245. See also encryption
- **SYN Cookies**: 180–185
- **SYN Packets**: 22
- **SYN-ACKs**: 22
- **SYN-Flood Protections**: 180–185
- **Syscall Package**: 197, 266–269
- **Syscall6() Function**: 210

## T
- **Tabwriter Package**: 113–114
- **Target Breach**: 154
- **TCP Flags**: 180–181
- **Tcpdump**: 102, 105, 175–178
- **Teamservers**: 121
- **Telegram**: 280
- **Telnet**: 41
- **Templates**: 88–90
- **Tenable**: 217
- **Third-Party Packages**: 8–9
- **Tokens**: 61–63, 271
- **"Too Fast" Scanner**: 26–27
- **Tour of Go Tutorial**: 10
- **Transmission Control Protocol (TCP)**
  - **Handshake Process**: 22–23
  - **Port Scanners**: 23–32
  - **Proxies**: 32–44

## U
- **Ubuntu VM**: 118–120
- **Uint16 Data Types**: 143–144
- **Uintptr Type**: 266
- **Unicode Package**: 197
- **Unmarshal() Function**: 141–142
- **Unmarshal() Method**: 19
- **Unmarshaling Interfaces**: 136
- **Unsafe Package**: 197
- **Unsafe.Pointer Type**: 266–267
- **Utility Programs**: 67–68

## V
- **{{variable-name}} Convention**: 89
- **Verbs**: 47
- **Vim Text Editor**: 3–4
- **vim-go Plug-in**: 3
- **Virtual Machines (VMs)**: 118–120
- **Virtual Memory**: 273–274
- **VirtualAllocEx**: 273–274
- **VirtualFreeEx() Windows Function**: 277–278
- **VMWare Workstation**: 118–120
- **VS Code**: 5
- **Vulnerability Fuzzers**: 188–196

## W
- **WaitForSingleObject() Windows Function**: 276–277
- **WaitForWrite() Function**: 206
- **WaitGroup**: 27–28
- **WalkFn() Function**: 171
- **WebSocket API (WebSockets)**: 93–98

## X
- **While Loops**: 15
- **Windows APIs**: 263–265
- **Windows DLL**: 218–219
- **Windows VM**: 127
- **Winmods Files**: 270
- **WINNT.H Header**: 285–286
- **Wireshark**: 102, 225
- **Worker Functions**: 28–30, 111–112
- **Wrapper Functions**: 136–137
- **WriteData() Function**: 305–307, 311
- **WriteProcessMemory() Function**: 274–275
- **Writer.Flush() Function**: 38
- **WriteString() Function**: 38
- **XML**: 19–20, 69
- **XOR**: 307–312

---

**Black Hat Go** is set in New Baskerville, Futura, Dogma, and The Sans Mono Condensed.

**Tom Steele, Chris Patten, and Dan Kottmann**

**Black Hat Go: Go Programming for Hackers and Pentesters**

**Go Programming for Hackers and Pentesters**

**Black Hat Go** explores the darker side of Go, the popular programming language revered by hackers for its simplicity, efficiency, and reliability. It provides an arsenal of practical tactics from the perspective of security practitioners and hackers to help you test your systems, build and automate tools to fit your needs, and improve your offensive security skillset, all using the power of Go.

You’ll begin your journey with a basic overview of Go’s syntax and philosophy and start to explore examples that you can leverage for tool development, including common network protocols like HTTP, DNS, and SMB. You’ll then dig into various tactics and problems that penetration testers encounter, addressing things like data pilfering, packet sniffing, and exploit development. You’ll create dynamic, pluggable tools before diving into cryptography, attacking Microsoft Windows, and implementing steganography.

You’ll learn how to:
- Make performant tools that can be used for your own security projects
- Create usable tools that interact with remote APIs
- Scrape arbitrary HTML data
- Use Go’s standard package, net/http, for building HTTP servers
- Write your own DNS server and proxy
- Use DNS tunneling to establish a C2 channel out of a restrictive network
- Create a vulnerability fuzzer to discover an application’s security weaknesses
- Use plug-ins and extensions to future-proof products
- Build an RC2 symmetric-key brute-forcer
- Implant data within a Portable Network Graphics (PNG) image

Are you ready to add to your arsenal of security tools? Then let’s Go!

**About the Authors**

Tom Steele, Chris Patten, and Dan Kottmann share over 30 years in penetration testing and offensive security experience, and have delivered multiple Go training and development sessions. (See inside for more details.)

“Everything necessary to get started with Go development in the security space” — HD Moore, Founder of the Metasploit Project and the Critical Research Corporation

**THE FINEST IN GEEK ENTERTAINMENT™**

www.nostarch.com

Price: $39.95 ($53.95 CDN)

Shelve In: COMPUTERS/SECURITY

**Foreword by HD Moore**

**Tom Steele, Chris Patten, and Dan Kottmann**