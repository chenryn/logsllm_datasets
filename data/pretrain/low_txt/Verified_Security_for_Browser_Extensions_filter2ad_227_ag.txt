### In Internet Explorer (IE) Terminology

The Browser Helper Object (BHO) is implemented in F# and hosts our Fine extensions within an unprivileged AppDomain, a software-isolated process for .NET. The AppDomain facilitates the dynamic loading and unloading of extensions while the browser is running. However, it does not provide security guarantees; these are provided by Fine’s type system. Both the .NET runtime and the browser itself are part of the Trusted Computing Base (TCB).

### Porting Content Scripts to Google Chrome

As discussed in Section II, Google Chrome’s extension model cannot adequately enforce least privilege for a large class of extensions. Using a new JavaScript backend for Fine, based on the work by Guha et al. [19], we compile our Fine extensions into ordinary Chrome extensions by translating them to JavaScript. Additionally, we provide a minimal JavaScript runtime system that exposes JavaScript’s object-oriented Document Object Model (DOM) API as functions.

It is important to note that we only need to translate the content scripts of an extension, allowing the core of the extension to run separately in a different Chrome process. By rewriting extension content scripts in Fine, we gain the ability to reason about and restrict how the extension interacts with HTML pages, providing finer-grained control than the default extension manifest.

### C3: A Fully-Managed Hosting Platform

C3 is an HTML5 experimentation platform written entirely in C#. Because C# code runs in a memory-managed environment, it is not susceptible to memory corruption vulnerabilities, which are common in many existing browser attacks. Our extension hosting architecture leverages this characteristic, enhancing overall safety.

#### Hosting Architecture

Figure 11 illustrates the architecture used to host Fine extensions within C3. When C3 initializes, it creates a new AppDomain to host all Fine extensions. C3 then loads a hosting module into this new application domain, which serves two purposes:

1. **Extension Loading**: The module searches a predefined directory for .NET assemblies that implement the interface supported by our Fine extensions. Upon finding such an assembly, it loads it into the new application domain and invokes its `Initialize` function. This process occurs only once, at browser startup.
2. **API Shimming**: The hosting module acts as a "shim" layer between the Fine extension API and the internals of C3. This functionality is implemented using a .NET proxy object, a type-safe cross-AppDomain communication mechanism. The proxy object contains one method for each internal C3 method needed by the API, which are then implemented in terms of methods on the proxy object. When an API function is invoked by an extension, each subsequent call to a proxy method causes the Common Language Runtime (CLR) to create a remote request to code in C3. Finally, C3 objects referenced by the proxy object are associated with integer GUIDs, communicated across AppDomain boundaries instead of serialized versions of the original objects.

We implemented extension APIs for C3 in approximately 270 lines of F#, and the proxy object implementation is 918 lines of F#. We find these requirements to be modest, and the added type safety is well worth the effort.

### Limitations and Future Work

This section discusses several limitations of our approach and considers directions for future work.

#### Extension Evolution and Policy Inference

Extension code is closely tied to the structure of the page. A website update can cause the extension to stop functioning properly. To address this, we plan to investigate tool support to help extension authors update their code to account for page structure changes. Additionally, we anticipate using weakest pre-condition inference for refinement types to automatically extract policies from code, reducing the programmer effort required to produce verified IBEX extensions.

#### Verified Translation to JavaScript

Our extensions can be deployed on various browsers because our compiler has two backends. For Internet Explorer and C3, we use Fine’s DCIL backend, which was previously proven to be type-preserving [5]. For Chrome and Firefox, we use Fine’s new JavaScript backend. This paper does not establish the soundness of compilation to JavaScript; we leave this for future work.

#### Information Flow

As presented, our extension APIs do not support non-interference-based information flow control. Prior work shows that non-interference-based information flow control can be enforced in Fine using monadic libraries equipped with value-indexed types. However, for simplicity, we restrict ourselves to policies based on taint-tracking, which yields a weaker security guarantee. In the future, we aim to use type coercions [29] to transform programs to automatically use monadic information flow controls.

#### Revocation

Our log-based model of DOM side effects rules out the possibility of specifying dynamic revocation policies. Devising a security property and a verification methodology that provides a higher-fidelity model of effects, while still being robust to the effects of untrusted JavaScript, is an open problem that we aim to address in the future.

### Related Work

#### Browser Extension Security

Ter Louw et al. [25] monitor calls by extensions to a subset of Firefox’s privileged APIs to secure the extension installation process. While this establishes a form of access control for extension installation, the primary extension APIs remain unprotected, so extensions are still over-privileged. Barth et al. [3] developed the security model used for Google Chrome extensions. Although this is the first extension model with native support for policy enforcement, the policies it supports are significantly more coarse-grained than the examples we presented in this paper. Our survey of policies in use with Chrome extensions found many to be needlessly over-privileged. Recent unpublished work by Felt et al. [10] also studies the permissions used by Chrome extensions.

Several researchers have explored the use of information flow for browser extension verification. Dhawan et al. [8] presented Sabre, a tool that instruments Firefox’s JavaScript interpreter to track security labels at runtime. Bandhakavi et al. [2] presented Vex, a tool that statically analyzes Firefox extensions for predetermined patterns of suspicious information flows. Other projects, such as Chugh et al. [6] and Guarnieri et al. [17, 18], present information flow analyses for JavaScript that look for specific patterns of suspicious flows. However, due to the inherently dynamic nature of JavaScript, fully static approaches are difficult to apply to large segments of existing JavaScript code, generating interest in runtime enforcement [26]. Our Fine-based approach allows us to statically and soundly verify authorization and data flow properties of extensions, and our formal model characterizes safety even in the presence of unverified third-party code.

Many have addressed the problems arising from browser plugins, which consist of native code that executes in the context of the browser. Internet Explorer’s entire extension model fits this description, and much recent research has addressed the associated problems. Spyware extensions have received particular attention [9, 20, 24]; these systems use binary taint-tracking to ensure that sensitive personal information does not flow to untrusted parties. Janus [12] and Google’s Native Client [34] consider system-level sandboxing techniques for browser extensions. The OP [15] and Gazelle [33] web browsers are constructed to address these issues, but they do so by applying general principles of secure system design to the architecture of new browsers. Generally, these works target the enforcement of isolation and memory safety properties, not the more fine-grained authorization properties we address.

#### Verified Extensibility

Outside the specific setting of browser extensions, the question of providing verified extension mechanisms for system-level code has received much attention. With the SLAM project [1], Ball et al. show that software model checking is effective at verifying device drivers. More recently, Zhou et al. [36] explore the use of type safety to provide fine-grained isolation for drivers, showing how to apply their findings in a nearly backwards-compatible manner. Our work is in this tradition of static extension verification, but rather than focusing on system-level properties, we target those relevant to browser extension functionality.

### Conclusions

This paper proposes a new model for authoring, verifying, distributing, and deploying safe browser extensions that can run on all the most popular browser platforms. Our motivation stems from the fact that even in the case of Chrome, which is arguably the most secure of the browser extension models in common use, extensions tend to be over-privileged, rendering many protection mechanisms useless. We propose a finer-grained access control model for browser extensions, formally characterize a security property for extensions, and develop a methodology to enforce safety statically. We evaluate our approach by developing 17 non-trivial browser extensions, demonstrating that our approach is viable in practice. It is our hope that IBEX will pave the way for a static verification mechanism of HTML5-based, centrally-distributed browser extensions and applications on top of the HTML5 platform.

### Acknowledgements

We thank Juan Chen, Cédric Fournet, Ben Lerner, Jean Yang, and the anonymous reviewers for their useful feedback and assistance with this work.

### References

[1] T. Ball and S. K. Rajamani. The SLAM project: Debugging system software via static analysis. In ACM POPL, 2002.

[2] S. Bandhakavi, S. T. King, P. Madhusudan, and M. Winslett. VEX: Vetting browser extensions for security vulnerabilities. In USENIX Security, 2010.

[3] A. Barth, A. P. Felt, and P. Saxena. Protecting browsers from extension vulnerabilities. In NDSS, 2010.

[4] CA Technologies. Virus details: Win32/clspring family. DJJFMMM?=?KIIA?KHEJO=@LEIHLEHKIEB LEHKI=IFN1,"  &, 2006.

[5] J. Chen, R. Chugh, and N. Swamy. Type-preserving compilation In ACM PLDI, 2010.

[6] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged information flow for JavaScript. In ACM PLDI, 2009.

[7] L. de Moura and N. Bjorner. Z3: An efficient SMT solver. In TACAS, 2008.

[8] M. Dhawan and V. Ganapathy. Analyzing information flow in JavaScript-based browser extensions. In ACSAC, 2009.

[9] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spyware analysis. In USENIX Security, 2007.

[10] A. P. Felt, K. Greenwood, and D. Wagner. The effectiveness of install-time permission systems for third-party applications. Technical report, University of California at Berkeley, 2010. UCB/EECS-2010-143.

[11] M. Fredrikson and B. Livshits. RePriv: Re-envisioning in-browser privacy. In IEEE S&P, 2011.

[12] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure environment for untrusted helper applications. In USENIX Security, 1996.

[13] Google Chrome. Popular Google Chrome extensions. DJJF ?DHACCA?ANJAIEIEIJFFK=H, 2010.

[14] A. D. Gordon and A. Jeffrey. Authenticity by typing for security protocols. Journal of Computer Security, 11, July 2003.

[15] C. Grier, S. Tang, and S. T. King. Secure web browsing with the OP web browser. In IEEE S&P, 2008.

[16] O. Grumberg and D. E. Long. Model checking and modular verification. ACM TOPLAS, 16, 1994.

[17] S. Guarnieri and B. Livshits. GateKeeper: Mostly static enforcement of security and reliability policies for JavaScript code. In USENIX Security, 2009.

[18] S. Guarnieri and B. Livshits. Gulfstream: Incremental static analysis for streaming JavaScript applications. In USENIX Conference on Web Application Development, 2010.

[19] A. Guha, C. Saftoiu, and S. Krishnamurthi. The essence of JavaScript. In ECOOP, 2010.

[20] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kemmerer. Behavior-based spyware detection. In USENIX Security, 2006.

[21] L. Koved, M. Pistoia, and A. Kershenbaum. Access rights analysis for Java. In ACM OOPSLA, 2002.

[22] B. Lerner and D. Grossman. Language support for extensible web browsers. In APLWACA, 2010.

[23] B. Lerner, H. Venter, B. Burg, and W. Schulte. C3: An experimental extensible, reconfigurable platform for HTML-based applications, 2010. In submission.

[24] L. Li, X. Wang, and J. Y. Choi. SpyShield: Preserving privacy from spy add-ons. In Conference on Recent Advances in Intrusion Detection, 2007.

[25] M. T. Louw, J. S. Lim, and V. N. Venkatakrishnan. Enhancing web browser security against malware extensions. Journal of Computer Virology, 4(3), 2008.

[26] L. Meyerovich and B. Livshits. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In oakland, 2010.

[27] Mozilla Foundation. How many Firefox users use add-ons? DJJF>CE=?=@@I '& DM=OBEHABNKIAHIKIA=@@I, 2009.

[28] Mozilla Foundation. Add-on security vulnerability announcement. DJJF>CE=?=@@I %! =@@IA?KHEJO=K?AAJ, 2010.

[29] N. Swamy, M. Hicks, and G. Bierman. A theory of typed coercions and its applications. In ACM ICFP, 2009.

[30] N. Swamy, J. Chen, and R. Chugh. Enforcing stateful authorization and information flow policies in Fine. In ESOP, 2010.

[31] N. Swamy, J. Chen, C. Fournet, K. Bhargavan, and J. Yang. Security programming with refinement types and mobile proofs. Technical report, MSR, 2010. MSR-TR-2010-149.

[32] K. Thomas. Chrome browser acts more like an OS, but security is unclear. DJJFMMMF?MH@?>KIEAII?AJAH =HJE?A  %#$?DHA>HMIAH=?JIHAEA= I>KJIA?KHEJOEIK?A=HDJ, 2011.

[33] H. Wang, C. Grier, E. Moshcuk, S. T. King, P. Choudhury, and H. Venter. The multi-principal OS construction of the Gazelle web browser. In USENIX Security, 2009.

[34] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native client: A sandbox for portable, untrusted x86 native code. In IEEE S&P, 2009.

[35] L. Zheng and A. C. Myers. Dynamic security labels and noninterference. In Workshop on Formal Aspects in Security and Trust, 2004.

[36] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals, M. Harren, G. Necula, and E. Brewer. SafeDrive: Safe and recoverable extensions using language-based techniques. In USENIX OSDI, 2006.