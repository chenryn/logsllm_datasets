# Return-Oriented Programming (ROP) and Syscall-Flow-Integrity Protection (SFIP)

## Gadget 3
...
19
Claudio Canella (@cc0x1f)
### Return-Oriented Programming
**Stack:**
- return address 3
- value2
- value1
- return address 2
- return address 1

**Register:**
- RSI: value1
- RDI: value2

**Program Code:**
- asm instruction
- ret

**Gadget 1:**
...
- pop rsi
- pop rdi
- ret

**Gadget 2:**
...
- syscall
- IP â†’
- ret

**Gadget 3:**
...
19
Claudio Canella (@cc0x1f)
### Gadgets are Often Unintended
- **Byte Sequence Example:** 05 5a 5e 5f c3
- **Disassembles to:**
  - add eax, 0xc35f5e5a
- **If We Skip the First Byte, It Disassembles to:**
  - pop rdx
  - pop rsi
  - pop rdi
  - ret
- **This Property is Due to Non-Aligned, Variable-Width Opcodes.**

### Syscall Instruction
- **Syscall Instruction Byte Sequence:** 0f 05
- **Easy to Find Unaligned Syscall Instructions.**

### SFIP Restrictions on ROP Chains
- **Syscall Origins:** Unaligned instructions are not possible.
- **Syscall Transitions:** Not every sequence is possible.

### Conclusion
- **SFIP Imposes Significant Constraints on Control-Flow-Hijacking Attacks.**

## Mimicry Attacks
### Detection Policy
- open
- fstat
- write

### Mimicry Attack Example
- open
- fstat
- write
- no-op1
- no-op2

## Coarse- to Fine-Grained SFIP
### Location A
- **Function foo1:**
  - 0x01: ...
  - 0x02: syscall(open, ...)
  - 0x03: bar1()
  - 0x04: ...
- **Function foo2:**
  - 0xb1: ...
  - 0xb2: syscall(open, ...)
  - 0xb3: bar2()
  - 0xb4: ...

### Location B
- **Function bar1:**
  - 0x11: ...
  - 0x12: syscall(read, ...)
  - 0x13: return
- **Function bar2:**
  - 0xa1: ...
  - 0xa2: syscall(stat, ...)
  - 0xa3: return

### Coarse-Grained SFIP
- **Transitions:**
  - "open": [read, stat]
- **Origins:**
  - "open": [0x02, 0xb2]
  - "read": [0x12]
  - "stat": [0xa2]

### Fine-Grained SFIP
- **Transitions:**
  - "open@0x02": [read@0x12]
  - "open@0xb2": [stat@0xa2]

## Proof-of-Concept
- **Implementation of SysFlow:**
  - https://github.com/SFIP/SFIP

## More Details
- **More Implementation Details and Security Discussion in the Paper:**
  - [Can+22] Claudio Canella, Sebastian Dorn, Daniel Gruss, Michael Schwarz. SFIP: Coarse-Grained Syscall-Flow-Integrity Protection in Modern Systems. arXiv:2202.13716 (2022).

## Recap
- **SFIP Provides:**
  - Integrity to user-kernel transitions
  - Security via syscall transition and origin checks
  - Fully automated
  - Minimal runtime overhead

## Go With the Flow
- **Enforcing Program Behavior Through Syscall Sequences and Origins**
- **Claudio Canella (@cc0x1f)**
- **August 11, 2022**
- **Graz University of Technology**

### References
- [Can+22] C. Canella, S. Dorn, D. Gruss, and M. Schwarz. SFIP: Coarse-Grained Syscall-Flow-Integrity Protection in Modern Systems. In: arXiv:2202.13716 (2022).