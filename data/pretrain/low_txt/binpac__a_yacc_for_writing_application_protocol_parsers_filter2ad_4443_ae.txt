### Handling Dropped Packets

When capturing network traffic, packet drops are sometimes unavoidable. These drops can be caused by high traffic volume, kernel scheduling issues, or artifacts of the monitoring environment. Such drops lead to content gaps in the application-level data processed by protocol parsers. When faced with these gaps, parsers not only fail to extract data for the current message but may also struggle to identify the start of the next message.

A common scenario is a content gap within a byte sequence of known length. For example, in an HTTP entity body, a content gap can be managed without introducing uncertainty for subsequent protocol elements. If a byte sequence is defined as `&chunked` in a BinPAC specification, it is only passed to a potential `&processchunk` function and not referenced by other expressions. This allows the generated parser to skip over such gaps. If `&processchunk` is defined for the sequence, the function is called with a specially marked "gap chunk" to acknowledge the presence of the gap. This mechanism enables the handling of most content gaps in protocols where the majority of data is contained in long byte sequences. Hand-written protocol parsers in Bro use a similar approach, but on an individual basis; the chunked byte string abstraction in BinPAC allows for universal handling across all protocols.

In general, it is more challenging to handle content gaps that do not fully fall into a byte sequence of known size. We will discuss these cases in Section 5.2.2.

### Run-time Type Safety

BinPAC parsers ensure type safety through typed interfaces. This enforces two aspects of type safety at run-time:
1. Among multiple case fields in a case type, the generated code ensures that only the selected case during parsing can be accessed; otherwise, a run-time exception is thrown.
2. Access to array elements is always boundary-checked.

However, BinPAC cannot guarantee complete safety, as it allows for arbitrary embedded C++ code which it cannot control.

### User-Defined Error Detection

Users can define protocol-specific error checking using the `&check` attribute. For instance, one might check the data against a protocol signature (e.g., the first 4 bytes of a CIFS/SMB message should be `\xffSMB`) to ensure the traffic data reflects the protocol.

### 5.2.2 Error Recovery

Currently, errors are handled in a simple model: when the flow processing function catches an exception, it logs the error, discards the unfinished message and unprocessed data, and initializes to resume on the next chunk of data. A potential issue with this approach is that, for stream-based protocols, the next message might not align with the next payload chunk. In the future, we plan to add support for re-discovering message boundaries in such cases. This mechanism will also help improve parsing performance by allowing us to skip large, semantically uninteresting messages and re-align with the input stream afterward.

### 6. Experiences

We have used BinPAC to add protocol parsers for CIFS/SMB, DCE/RPC (including its endpoint mapping protocol), and NCP to Bro's traffic analysis engine. To compare BinPAC with hand-written protocol parsers, we also rewrote the parsers for HTTP and DNS (and SUN/RPC, which we have not yet evaluated) in BinPAC. These provide a comparison in terms of code size and performance between BinPAC-based and hand-written parsers.

As shown in Table 2, the BinPAC-based parsers for HTTP and DNS have code sizes of roughly 35–50% that of the hand-written parsers, measured in lines of code (and the same holds for source file sizes). We note that for both protocols, the Bro-specific semantic analysis comprises well over half of the BinPAC specification, so for reuse purposes, the specifications are significantly smaller than shown.

To test the performance of the parsers, we collected a one-hour trace of HTTP and DNS traffic at Lawrence Berkeley National Laboratory’s network gateway. The HTTP subset of the trace spans 19.8M packets and 16.5 GB of data, while the DNS subset spans 498K packets and 87 MB. The drop rate reported by tcpdump when recording the trace was below 4/10^6.

Table 2 shows the CPU time required for each type of analysis, giving the minimum and maximum times measured across 5 runs, using a 3.4 GHz Xeon system running FreeBSD 4.10 with 2 GB of system RAM. We also show the throughput in bits/sec and packets/sec, observing that on a per-packet basis, DNS analysis is much more expensive than HTTP analysis, since many HTTP packets are simply entity data transfers requiring little work.

For these numbers, we disabled Bro’s script-level analysis of the protocols, so the timings reflect the computation necessary for the parser to generate the Bro events corresponding to the application activity (including TCP/IP processing and TCP flow reassembly), but no further processing of those events. Specifically, the HTTP parser generates an event for:
1. Every request line (with the method, URL, and HTTP version as event parameters).
2. Every response line (with the response number and the reason phrase).
3. Every HTTP header (with the name and value, in either request or response).
4. The end of every request/reply message (with the length of the body).

The DNS parser generates an event for every request and reply and for every answer in the reply. Thus, the generated events allow almost all essential analysis on HTTP and DNS, except that HTTP data bodies are not exported through events.

We see that the BinPAC HTTP parser performs significantly better than the hand-written one. This gain came after tuning the specification by adding a `&transient` attribute to HTTP header fields, which instructs BinPAC not to create a copy of the corresponding bytestring. (Transient strings are visible only within the parsing function of the type, while non-transient ones, which are copied, can be accessed after parsing.) We have not yet applied the same tuning to the DNS specification; as a result, it allocates many more dynamic objects and copies more strings than the hand-written one does. We believe that tuning it will prove straightforward.

Both the hand-written and the BinPAC HTTP parsers handle content gaps by skipping over gaps within data bodies, which are common in large traces. However, it is worth noting that in the hand-written case, content-gap skipping must be crafted in each case and thus is applied in very limited scope beyond HTTP bodies (such as SMTP mail bodies). For BinPAC-based parsers, gap skipping is automatically handled for every string type with a `&chunked` attribute.

We also note that in developing our DNS parser, we found two significant bugs in the hand-written parser’s processing. These related to using incorrect field widths and non-portable byte-ordering manipulations, providing direct examples of the benefit in terms of correctness for specifying analyzers in a high-level, declarative fashion.

### 7. Summary and Future Directions

This paper presents BinPAC, a declarative language for generating parsers of application-layer network protocols from high-level specifications. Such parsers are crucial components of many network analysis tools, yet coding them manually is a tedious, time-consuming, and error-prone task, as demonstrated by numerous severe vulnerabilities found in such programs in the past.

BinPAC reflects a different paradigm for building protocol parsers: abstracting their syntax into a high-level meta-grammar, along with associated semantics. A parser generator then translates the specification into low-level code automatically. By providing such an abstraction, a programmer can concentrate on high-level protocol aspects while achieving correctness, robustness, efficiency, and reusability of the code.

In spirit, this approach is similar to using yacc for writing parsers for programming languages, but many elements of the network analysis problem domain require significantly different underlying mechanisms. First, there are critical differences between the syntax and grammar of network protocols and context-free languages. Additionally, processing network traffic requires a fundamentally different approach in terms of handling input, specifically the ability to incrementally parse many concurrent input streams.

Our domain-specific BinPAC language addresses these issues with a set of network-specific features: parameterized types, variable byte ordering, automatic generation of boundary checking, and a hybrid approach of buffering and incremental parsing for handling concurrent input. BinPAC supports both binary and ASCII protocols, and we have already used it to build parsers for HTTP, DNS, SUN/RPC, RPC portmapper, CIFS, DCE/RPC (including the endpoint mapper), and NCP. We integrated all of these into the Bro NIDS, replacing some of its existing, manually written ones. Our evaluation shows that BinPAC specifications are 35–50% the size of hand-coded ones, with the protocol description (independent of the user’s analysis semantics) comprising less than half of the specification. Our HTTP parser runs faster than the handcrafted one it replaces (and with equal memory consumption), and we are confident that the DNS parser will soon exhibit performance equal to the one it replaces. BinPAC is open-source and now ships as part of the Bro distribution.

In the future, along with specifying further protocols in BinPAC, we envision exploiting its power in two areas. First, we wish to explore the reusability of BinPAC-generated parsers by integrating them into additional network tools. Second, we intend to add backends other than C++ to BinPAC to generate parsers for different execution models. As proposed in [32], we specifically aim to build highly parallel parsers in custom hardware.

### 8. Acknowledgments

This work was supported in part by NSF Awards CNS-0520053, STI-0334088, ITR/ANI-0205519, and NSF-0433702, as well as a fellowship within the Postdoc-Programme of the German Academic Exchange Service (DAAD). Our thanks to John Dunagan and the anonymous reviewers for numerous valuable comments.

### 9. References

[1] M. B. Abbott and L. L. Peterson. A language-based approach to protocol implementation. IEEE/ACM Transactions on Networking, 1(1):4–19, 1993.

[2] M. Arlitt, B. Krishnamurthy, and J. C. Mogul. Predicting short-transfer latency from TCP arcana: A trace-based validation. In Proceedings of the Internet Measurement Conference (IMC), October 2005.

[3] Abstract Syntax Notation One (ASN.1). ISO/IEC 8824-1:2002.

[4] G. Back. Datascript—a specification and scripting language for binary data. In GPCE '02: The ACM SIGPLAN/SIGSOFT Conference on Generative Programming and Component Engineering, pages 66–77, London, UK, 2002. Springer-Verlag.

[5] E. Biagioni, R. Harper, and P. Lee. A network protocol stack in Standard ML. Higher-Order and Symbolic Computation, 14(4):309–356, 2001.

[6] T. P. Blumer and J. C. Burruss. Generating a service specification of a connection management protocol. In PSTV, pages 161–170, 1982.

[7] N. Borisov, D. J. Brumley, H. J. Wang, J. Dunagan, P. Joshi, and C. Guo. Generic application-level protocol analyzer and its language. Under submission.

[8] Common Internet File System. http://www.snia.org/tech activities/CIFS/CIFS-TR-1p00 FINAL.pdf.

[9] D. Crocker. RFC 2234: Augmented BNF for Syntax Specifications: ABNF.

[10] DCE 1.1: Remote procedure call. http://www.opengroup.org/onlinepubs/9629399/toc.htm.

[11] DSniff. www.monkey.org/~dugsong/dsniff.

[12] The Ethereal Network Analyzer. http://www.ethereal.com/.

[13] A. Feldmann, N. Kammenhuber, O. Maennel, B. Maggs, R. D. Prisco, and R. Sundaram. A Methodology for Estimating Interdomain Web Traffic Demand. In Proceedings of the Internet Measurement Conference (IMC), October 2004.

[14] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. RFC 2616: Hypertext Transfer Protocol – HTTP/1.1, June 1999.

[15] K. Fisher and R. Gruber. PADS: A domain-specific language for processing ad hoc data. In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 295–304, New York, NY, USA, 2005. ACM Press.

[17] M. Handley, C. Kreibich, and V. Paxson. Network Intrusion Detection: Evasion, Traffic Normalization, and End-to-End Protocol Semantics. In Proceedings of USENIX Security Symposium, 2001.

[18] G. J. Holzmann. The model checker SPIN. IEEE Trans. Softw. Eng., 23(5):279–295, 1997.

[19] V. Jacobson, C. Leres, and S. McCanne. TCPDUMP. ftp://ftp.ee.lbl.gov/libpcap.tar.Z.

[20] S. C. Johnson. YACC - Yet Another Compiler-Compiler. Computer Science Technical Report No. 32, Bell Laboratories, Murray Hill, New Jersey, July 1975.

[21] J. Jung and E. Sit. An Empirical Study of Spam Traffic and the Use of DNS Black Lists. In Proceedings of the Internet Measurement Conference (IMC), Taormina, Italy, October 2004.

[22] E. Kohler, M. F. Kaashoek, and D. R. Montgomery. A readable TCP in the Prolac protocol language. In Proceedings of the ACM SIGCOMM Conference, pages 3–13, Cambridge, MA, August 1999.

[23] C. Kreibich. NetDude (NETwork DUmp data Displayer and Editor). http://netdude.sourceforge.net/.

[24] C. Kreibich. Design and implementation of netdude, a framework for packet trace manipulation. June 2004.

[25] A. Kumar, V. Paxson, and N. Weaver. Exploiting Underlying Structure for Detailed Reconstruction of an Internet-scale Event. In Proceedings of the Internet Measurement Conference (IMC), October 2005.

[26] P. J. McCann and S. Chandra. Packet Types: Abstract specifications of network protocol messages. In Proceedings of the ACM SIGCOMM Conference, pages 321–333, 2000.

[27] P. Mockapetris. DOMAIN NAMES - IMPLEMENTATION AND SPECIFICATION, Section 4.1.4, November 1987. RFC 1035.

[28] NFR Security. http://www.nfr.com.

[29] R. Pang, V. Yegneswaran, P. Barford, V. Paxson, and L. Peterson. Characteristics of Internet Background Radiation. In Proceedings of the Internet Measurement Conference (IMC), October 2004.

[30] T. Parr and R. Quong. ANTLR: A predicated-LL(k) parser generator. Software, Practice and Experience, 25, July 1995.

[31] V. Paxson. BRO: A system for detecting network intruders in real time. In Proceedings of USENIX Security Symposium, San Antonio, TX, January 1998.

[32] V. Paxson, K. Asanovic, S. Dharmapurikar, J. Lockwood, R. Pang, R. Sommer, and N. Weaver. Rethinking hardware support for network analysis and intrusion prevention. In Proceedings of Workshop on Hot Topics in Security (HotSec), Vancouver, B.C., Canada, July 2006.

[33] NetWare Core Protocol. http://forge.novell.com/modules/xfmod/project/?ncp.

[34] T. H. Ptacek and T. N. Newsham. Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection. Technical report, Secure Networks, Inc., January 1998.

[35] M. Roesch. SNORT: Lightweight intrusion detection for networks. In Proceedings of USENIX LISA, 1999.

[36] The SNORT network intrusion detection system. http://www.snort.org.

[37] S. Saroiu, K. P. Gummadi, R. J. Dunn, S. D. Gribble, and H. M. Levy. An analysis of internet content delivery systems. In Proceedings of the Fifth Symposium on Operating Systems Design and Implementation (OSDI), December 2002.

[38] C. Shannon and D. Moore. The Spread of the Witty Worm. http://www.caida.org/analysis/security/witty, 2004.

[39] R. Srinivasan. RFC 1831: RPC: Remote Procedure Call Protocol Specification.

[40] R. Srinivasan. RFC 1832: XDR: External Data Representation Standard.

[41] Ethereal OSPF Protocol Dissector Buffer Overflow Vulnerability. http://www.idefense.com/intelligence/vulnerabilities/display.php?id=349.

[42] Snort TCP Stream Reassembly Integer Overflow Exploit. http://www.securiteam.com/exploits/5BP0O209PS.html.

[43] Symantec Multiple Firewall NBNS Response Processing Stack Overflow. http://www.eeye.com/html/research/advisories/AD20040512A.html.

[44] tcpdump ISAKMP packet delete payload buffer overflow. http://xforce.iss.net/xforce/xfdb/15680.

[45] Separation of concerns. http://en.wikipedia.org/wiki/Separation_of_concerns.

[46] C. Wong, S. Bielski, J. M. McCune, and C. Wang. A study of mass-mailing worms. In Proceedings of the 2005 ACM Workshop on Rapid Malcode (WORM), pages 1–10, New York, NY, USA, 2004. ACM Press.