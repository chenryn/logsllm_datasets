# Time Daemon Vulnerability

The `time_daemon` developed by Qualcomm is also utilized in other Android devices that incorporate the Qualcomm time daemon, making these devices susceptible to the same vulnerability. This specific vulnerability has been reported and assigned CVE-2016-3683.

## 5.2.3 Bluedroid

The Android Bluetooth stack, known as Bluedroid, exposes a Unix domain socket channel for controlling the A2DP (Advanced Audio Distribution Profile) protocol [1]. The ABSTRACT address, `@/data/misc/bluedroid/.a2dp_ctrl`, is expected to be enforced by SEAndroid. However, we discovered that on a Nexus 4, it is possible to connect to this server and send control commands. This allows an attacker to control audio playback on a peripheral device connected via Bluetooth. While the LG G3 and Galaxy S4 also expose this channel, third-party apps are unable to connect due to insufficient permissions. This suggests that some vendors have implemented security improvements, despite their tendency to introduce vulnerabilities [34].

## 6. Countermeasure Discussion

Our study indicates that the misuse of Unix domain sockets on Android has led to severe vulnerabilities. We propose countermeasures from two perspectives: (1) OS-level mitigations and (2) better approaches to implementing secure IPC using Unix domain sockets.

### 6.1 OS-Level Solutions

#### Changing the Default Namespace
Currently, Unix domain socket channels created by apps use the ABSTRACT namespace by default. Due to the lack of Discretionary Access Control (DAC), socket channels based on ABSTRACT addresses are less secure than those based on FILESYSTEM addresses. Therefore, a straightforward mitigation is to change the default namespace from ABSTRACT to FILESYSTEM, or more drastically, to disable the use of the ABSTRACT namespace.

#### More Fine-Grained SEAndroid Policies and Domain Assignment
In the current SEAndroid model, all third-party apps, despite having individual UIDs and GIDs, are assigned the same domain label, i.e., `untrusted_app`. Unix domain socket accesses between third-party apps are not enforceable by SEAndroid because domain-level policies cannot distinguish one third-party app from another.

To address this, different domain labels should be assigned to different third-party apps, allowing for more fine-grained policies to regulate Unix domain socket accesses. However, this could introduce new challenges, such as predefined policies not covering all apps and making fixed policies editable at runtime, which may open new attack vectors. Additionally, defining policies for every app would be impractical, as users can install any number of apps.

### 6.2 Secure IPC on Unix Domain Sockets

We present three scenarios where apps and system daemons require Unix domain sockets for IPC and discuss possible solutions to their security issues.

#### Privileged System Daemon Exposes Functionality to Apps
A system daemon may need to provide various functionalities to apps with different privileges. For example, the LG AT daemon might want to allow only system apps to perform a factory reset and permit apps with location permissions to access GPS coordinates. To achieve this, system daemons must enforce app permissions themselves. Unfortunately, the lack of Android runtime context in system daemons makes it difficult for them to obtain the app's permissions.

**Proposed Solution:**
Figure 6 illustrates the proposed solution, which delegates peer authentication to the existing Android security model. Instead of direct communication through a Unix domain socket, a system service acts as an intermediary. This new system service runs as the system user with UID 1000, making it easily authenticated by the daemon. Apps communicate with this system service via Android Binder, and their permissions are validated by the system service. This way, daemon functionality is indirectly exposed to apps with the help of a system service.

**Figure 6:** A secure method to expose system daemon functionality to apps. A system service is added between apps and the system daemon.

#### Cross-Layer IPC in Apps with Both Java and Native Code
Apps with native executables need intra-application, cross-layer IPC. An app creates a native process to run its executable and uses Unix domain sockets to communicate with the native process from its non-native part. In this case, executables share the same UID as their owner apps, making it convenient to check UIDs on both client and server sides.

#### App Exposes Interfaces to Other Apps
For inter-application communications, Android-specific IPCs like Intents are typically used. However, apps often choose Unix domain sockets for cross-layer IPCs. We propose a token-based mechanism inspired by Helium, as shown in Figure 7. The client app first sends a broadcast to the server app to request a communication token. The server then asks the user to allow or deny the incoming request. If the user allows, the server app generates a one-time token for the client and returns it. The client then connects to the server with the token, establishing a Unix domain socket connection. Note that the token is meaningless to others; even if stolen, an attacker cannot use it to communicate with the server app.

**Figure 7:** Token-based secure Unix domain socket IPC. Dotted arrow lines represent permission-protected broadcasts.

## 7. Related Work

As the community continues to explore and understand Android and its ecosystem, novel attacks and innovative ways of uncovering vulnerabilities are being developed. Many existing works in Android security leverage static and/or dynamic analysis of Android apps and frameworks. By comparing our work with others, we demonstrate how our research contributes to Android security.

### Android IPC and Framework Vulnerabilities
Android IPC mechanisms, such as Binder, Messenger, and Intents, have been extensively studied [17, 27, 20, 14, 31, 22]. These works aim to exploit IPC mechanisms to disclose sensitive information like SMS messages, call history, and GPS data [30]. For example, Chin et al. [17] examined Android application interactions and identified security risks in app components. They presented ComDroid to detect app communication vulnerabilities. There are also works focusing on detecting implementation flaws in the Android framework. Aafer et al. [13] studied the threat of hanging attribute references, while Kratos [29] found framework vulnerabilities from the perspective of inconsistent security enforcement. However, none of these works explore traditional Linux IPCs on Android, such as Unix domain sockets, as exploitable interfaces.

### Static Analysis of Android Apps
We use static analysis to detect the misuse of Unix domain sockets in apps. Techniques for this purpose have been extensively studied [14, 31, 21, 22]. FlowDroid [14] is widely used for taint analysis on Android apps but does not handle inter-component communications (ICC) well. Amandroid [31] provides better ICC support, and we build our tool on top of it.

### Security Risks in Customizations
Customizations to the Android framework are known to introduce new vulnerabilities not present in the AOSP [32]. Wu et al. discovered that over 85% of all preinstalled apps in stock images have more privileges than they need, and almost all vulnerabilities are a direct result of vendor customization. ADDICTED [34] is a tool for automatically detecting flaws exposed by customized driver implementations. Our work reveals and studies a new customization domain—privileged system daemons—that can be exploited to perform dangerous operations.

## 8. Conclusion

In this paper, we conducted the first systematic study to understand the usage of Unix domain sockets by both apps and system daemons as an IPC mechanism on Android, especially for cross-layer communications between the Java and native layers. We presented SInspector, a tool for discovering potential security vulnerabilities by identifying socket addresses, detecting authentication checks, and performing data flow analysis on native code. We analyzed 14,644 Android apps and 60 system daemons, finding that some apps and certain system daemons suffer from serious vulnerabilities, including root privilege escalation, arbitrary file access, and factory resetting. Based on our study, we proposed countermeasures to prevent these attacks.

## Acknowledgments

We thank the anonymous reviewers for their valuable feedback on our work. This research was supported in part by the National Science Foundation under grants CNS-1318306 and CNS-1526455, as well as by the Office of Naval Research under grant N00014-14-1-0440.

## References

[1] Advanced audio distribution profile (A2DP). https://developer.bluetooth.org/TechnologyOverview/Pages/A2DP.aspx.
[2] An Analysis of Android App Permissions. http://www.pewinternet.org/2015/11/10/an-analysis-of-android-app-permissions/.
[3] Android Security Overview. https://source.android.com/security/.
[4] Android Security Tips: Using Interprocess Communication. http://developer.android.com/training/articles/security-tips.html#IPC.
[5] ApkPure website. https://apkpure.com/.
[6] ES App Group. http://www.estrongs.com/.
[7] How to create an Android native service and use Binder to communicate with it? http://stackoverflow.com/questions/14215462/how-to-create-a-android-native-service-and-use-binder-to-communicate-with-it.
[8] JEB Decompiler by PNF Software. https://www.pnfsoftware.com/.
[9] ProGuard. http://proguard.sourceforge.net/.
[10] Qualcomm’s CNE brings "smarts" to 3G/4G Wi-Fi seamless interworking. https://www.qualcomm.com/news/onq/2013/07/02/qualcomms-cne-bringing-smarts-3g4g-wi-fi-seamless-interworking.
[11] Security | Platform Security Architecture. https://source.android.com/security/index.html#android-platform-security-architecture.
[12] Xposed Development Tutorial. https://github.com/rovo89/XposedBridge/wiki/Development-tutorial.
[13] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou, W. Du, and M. Grace. Hare hunting in the wild Android: A study on the threat of hanging attribute references. In Proc. of ACM CCS, 2015.
[14] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise context, flow, field, object-sensitive, and lifecycle-aware taint analysis for Android apps. In Proc. of ACM PLDI, 2014.
[17] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proc. of ACM MobiSys, 2011.
[18] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol reverse engineering from network traces. In Proc. of USENIX Security, 2007.
[19] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Information Security, pages 346-360. Springer, 2010.
[20] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones. ACM Transactions on Computer Systems (TOCS), 32(2):5, 2014.
[21] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna. Triggerscope: Towards detecting logic bombs in Android applications. In Proc. of IEEE S&P, 2016.
[22] C. Gibler, J. Crussell, J. Erickson, and H. Chen. AndroidLeaks: Automatically detecting potential privacy leaks in Android applications on a large scale. Springer, 2012.
[23] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability leaks in stock Android smartphones. In Proc. of ISOC NDSS, 2012.
[24] N. Hardy. The Confused Deputy: (or why capabilities might have been invented). ACM SIGOPS, 1988.
[25] C.-C. Lin, H. Li, X.-y. Zhou, and X. Wang. ScreenMilker: How to milk your Android screen for secrets. In Proc. of ISOC NDSS, 2014.
[26] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format reverse engineering through context-aware monitored execution. In Proc. of ISOC NDSS, 2008.
[27] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting Android apps for component hijacking vulnerabilities. In Proc. of ACM CCS, 2012.
[28] F. Nielson, H. R. Nielson, and C. Hankin. Principles of program analysis. Springer, 2015.
[29] Y. Shao, J. Ott, Q. A. Chen, Z. Qian, and Z. M. Mao. Kratos: Discovering inconsistent security policy enforcement in the Android framework. In Proc. of ISOC NDSS, 2016.
[30] T. Vennon. Android malware: A study of known and potential malware threats. SMobile Global Threat Centre, 2010.
[31] F. Wei, S. Roy, X. Ou, et al. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps. In Proc. of ACM CCS, 2014.
[32] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor customizations on Android security. In Proc. of ACM CCS, 2013.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards taming privilege-escalation attacks on Android. In Proc. of ISOC NDSS, 2012.
[33] H. Zhang, D. She, and Z. Qian. Android root and its providers: A double-edged sword. In Proc. of ACM CCS, 2015.
[34] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of fragmentation: Security hazards in Android device driver customizations. In Proc. of IEEE S&P, 2014.
[16] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In Proc. of ACM CCS, 2007.