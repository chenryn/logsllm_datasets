# Title: Large-Scale Analysis of Vulnerability Remediation in Open-Source JavaScript Projects

## Authors:
- Vinuri Bandara†
- Thisura Rathnayake†
- Nipuna Weerasekara†
- Charitha Elvitigala†
- Kenneth Thilakarathna‡
- Primal Wijesekera‡‡
- Kasun De Zoysa‡
- Chamath Keppitiyagama‡

### Affiliations:
- †SCoRe Lab
- ‡University of Colombo School of Computing
- ‡‡University of California, Berkeley & ICSI

## Abstract
Vulnerability remediation is a critical phase in the lifecycle of software projects. While there is substantial research on vulnerability discovery and patterns, studies focusing on the remediation phase are limited. To address this gap, we conducted a timeline analysis of 130 highly dependent open-source JavaScript projects hosted on GitHub. Using a static code analyzer, we examined 501,000 commits to identify those that introduced new vulnerabilities and fixed existing ones. Our findings indicate that in 90% of the projects, at least one commit intended to fix a vulnerability introduced one or more new vulnerabilities. On average, 16% of the commits aimed at fixing vulnerabilities introduced new ones. Additionally, 18% of the total vulnerabilities originated from commits meant to fix other vulnerabilities, and 78% of these could have been avoided with proper internal testing. We introduce Sequza, a visualization tool designed to help organizations detect such issues early.

## CCS Concepts
- **Security and Privacy** → Usability in Security and Privacy; Vulnerability Management

## Keywords
- Software Security
- Vulnerability Analysis
- Vulnerability Remediation
- Security Testing

## ACM Reference Format
Vinuri Bandara†, Thisura Rathnayake†, Nipuna Weerasekara†, Charitha Elvitigala†, Kenneth Thilakarathna‡, Primal Wijesekera‡‡, Kasun De Zoysa‡, Chamath Keppitiyagama‡. 2021. Large-Scale Analysis of Vulnerability Remediation in Open-Source JavaScript Projects. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15–19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 3 pages. https://doi.org/10.1145/3460120.3485357

## Permission
Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for third-party components of this work must be honored. For all other uses, contact the owner/author(s).

## Introduction
The security of a software project depends not only on the success of vulnerability discovery but also on effective vulnerability remediation. Developers have access to various resources, such as the MITRE Corporation’s Common Vulnerabilities and Exposures (CVE) database and the National Vulnerability Database (NVD), to learn about, identify, and fix vulnerabilities. Recent studies highlight significant issues in the remediation phase, including the need for multiple commits to fix a vulnerability and the lack of proper attention from management and developer knowledge [1, 2, 5]. 

Current literature on these issues is limited, and a comprehensive measurement study is needed before exploring potential solutions. Our study proposes an automated vulnerability analysis to identify and filter commits that introduce or fix vulnerabilities. We analyzed 130 open-source JavaScript projects on GitHub, focusing on JavaScript due to its popularity and widespread use in both client-side and server-side applications. The proposed framework is language-agnostic and can perform longitudinal analysis of vulnerability introduction and fixing patterns. 

We found that in 90% of the projects, one-sixth of the time, a commit fixing a vulnerability introduced new ones. Overall, 78% of the identified vulnerabilities were publicly disclosed and could have been detected before committing if proper scanning tools were used. We present a novel technique for longitudinal vulnerability management and introduce Sequza, a visualization tool to help organizations understand the security posture of their repositories. Sequza includes a vulnerability distribution metric and prioritization schema to assist stakeholders in allocating resources for successful remediation. Preliminary results from our study, which analyzed 53 JavaScript open-source projects, are available in [2].

## Related Work
Previous research has examined the life cycle of vulnerabilities from the perspectives of security researchers and malicious actors [3]. These studies note that the discovery date of vulnerabilities is often unknown, and vulnerabilities may exist before being discovered. Our study suggests that certain vulnerabilities can be identified before they are committed if developers use proper testing. Methodologies for identifying vulnerabilities using CWEs have been proposed [6], and challenges in finding vulnerability-introducing commits using data mining techniques have been discussed [4]. However, our methodology goes further by understanding specific security vulnerabilities introduced in each commit.

A recent study found that many organizations focus more on vulnerability identification than on the remediation process [1]. Management may have a false sense of security even if remediation is inadequate. Our study measures the effectiveness of remediation by analyzing open-source JavaScript repositories on GitHub.

## Identifying Vulnerability Introduction and Fixes
Our primary objective is to understand the issues in the vulnerability remediation phase through source code analysis. We selected JavaScript repositories with at least 500 commits, combining three publicly available lists of the most dependent JavaScript projects.