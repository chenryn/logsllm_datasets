### Proxmark Trace Analysis

**Fig. 5. Excerpt from a Proxmark Trace (Timing in Carrier Periods ≈ 0.074µs)**

- **13296 | 15760 | Rdr | 93 20**
- **16964 | 22788 | Tag | 3f af e3 54 27**
- **44144 | 54672 | Rdr | 93 70 3f af e3 54 27 9a 70**
- **55860 | 59444 | Tag | 20 fc 70**
- **67680 | 72384 | Rdr | e0 50 bc a5**
- **77364 | 91252 | Tag | 0a 78 80 70 02 20 63 cb b7 80 8b 30 | ok |**

**Commands and Responses:**
- **SELECT_UID**
- **RATS**
- **REQA**
- **ANTICOLL**
- **CRC | Annotation**

**Fig. 6. Mean Reply Time for the 14443-A SELECT UID and RATS Commands (Note the Different Scales Here)**

The reply time for a command is defined as:
\[ t = p (RdrStart - TagEnd) \]
where:
- \( RdrStart \) is the time when the reader starts transmitting its message.
- \( TagEnd \) is the time when the card stops sending its reply.

### B. Timing All EMV Cards at Level 1

For Level 1 timings, we focused on the responses to the **SELECT UID** and **Request for Answer To Select (RATS)** commands, which occur after the anti-collision routine is complete. The **SELECT UID** response requires no computation from the NFC chip on the card and would be consistent with the behavior of a nonce exchange if the card’s nonce was prepared before the challenge was received.

**Fig. 6** shows the average reply times for the Level 1 **SELECT UID** and **RATS** commands. The **RATS** command involves more processing and has longer times, but still much shorter than those at Level 3. There is little change in the timings for the **SELECT UID** as we vary the angle or distance of the card. The standard deviation did not vary across angles or distances and was only 0.91µs, with the time difference between the quickest and longest replies being only 2.36µs. For the **RATS**, the "normal" Mastercard had the longest average response time out of all the cards, at 3231µs, with a standard deviation of 286.50µs.

Thus, for our experiments, timings at Level 1 appear relatively stable across all EMV cards.

### C. Timing a RRP Test-Card at Level 3

For Level 3 timings, we focus on the nonce-exchange in the **ERRD** command, although results were obtained for other APDUs for comparison with other tested cards (see Appendix C).

Our Mastercard-RRP test card implements up to three nonce-exchanges, as per the **ERRD** command described in Section II. In our tests, we sent all three nonce challenges and measured the response times for each (labeled: rrp 1, rrp 2, and rrp 3). The average timings for the first and second nonce-exchange messages at different heights and angles are shown in **Fig. 7**. The timings for the third nonce exchange are very similar to those for the second.

**Statistics for the Three Exchanges (Mean/SD in µs):**
- **First Exchange: 53,000/13,170**
- **Second Exchange: 40,100/15,700**
- **Third Exchange: 40,100/15,680**

**Observations:**
- The time for the first RRP exchange is significantly longer. Proxmark traces showed that for the first challenge only, the card responds to the **ERRD** command by sending a wait request and then the response.
- The time taken depends on the distance of the card from the reader, rather than the angle. A correlation analysis confirmed this dependence. Similar correlations were seen for other measured APDUs.
- The standard deviations did not vary between positions and were approximately 13,170, 15,700, and 15,680µs for the different nonce exchange rounds.
- The timings measured inside the replay program are significantly longer, with an approximate 17 ms difference (see Figure 14 in Appendix C for the first **ERRD** command exchange measurements). These delays arose due to the PN532’s handling of the protocol, as confirmed by tests with an Adafruit PN532 interface connected to a Raspberry Pi.

In conclusion, all measurements for all tested cards show that timings at Level 3 are far less stable than at Level 1. This suggests that timing for relay-protection should be done at Level 1 for EMV (and for other application-layer protocols).

### D. Relaying & Disclosure to Mastercard

Given the observed Level 3 timing variation, we investigated the feasibility of relaying the timed nonce exchange from the PayPass-RRP test card. Using the setup shown in **Fig. 8**, we found that it is possible to relay at Level 3 faster than the time taken by the card in the worst position to complete a normal run. During ten trials, three gave timings within those seen in our measurements (for rrp 1, these times were 67.79, 74.70, and 77.05ms, while the maximum seen for a direct replay was 79.62ms).

We discussed this relay attack against the test PayPass-RRP card and all the measurements with Mastercard. They welcomed the research and our suggestion that doing the timed nonce-exchange at Level 1 may indeed be more robust against even slightly stronger relay "boxes." They also mentioned that the three trials in the **ERRD** command should not be seen only as an opportunity for re-tries by the relayer but also as a usability/recoverability feature: correcting human error and alerting the user that the card is in a non-ideal position. Finally, they noted that newer cards (test or commercial), which may appear soon, will be faster than our test card, making them much harder to relay.

### VII. A New Level 1-Based Relay-Protection for EMV: The L1RP Protocol

#### A. Protocol Design

Our L1RP protocol is an extension of the Mastercard EMV protocol, providing relay resistance by timing a nonce exchange at Level 1. The aim is to ensure that the EMV reader cannot successfully complete an EMV transaction unless the card responds with its nonce within given time bounds. As in Mastercard’s RRP protocol, the card also returns timing information to enable the reader to adjust its thresholds for different timing profiles on different cards.

**Threat Model:**
- We add the requirement that cards must be backward compatible with readers that do not support relay resistance, without the possibility of downgrade attacks.
- We must ensure that the timing profile from the card can be authenticated by the reader.

**Protocol Overview:**
- Our L1RP protocol takes ideas from both the Mastercard and Visa relay-protections, improves on aspects of them, and combines the result into a new protocol.
- The timed nonce-exchange is moved into the ISO 14443 Level 1 commands, informed by our measurements in Section VI-B, where we concluded that Level 1 Relay Resistance makes RTT-measurements more reliable.
- We tie together data at Level 1 with the EMV application authentication at Level 3, including nonces issued not just from the card but from the reader as well, to avoid the problems with the Visa proposal highlighted in Section V.

**Protocol Flow:**
- The card signals to the reader that it supports our protocol using one of the bits in the ISO 14443 Answer to Request (ATQA) message reserved for future use (bit 6 & bits 9-16). A bit value of 0 means the card does not support the nonce exchange, whereas a value of 1 signals that the exchange is supported.
- After a card responds with a Select Acknowledge (SAK) message, it enters the ACTIVE state. The protocol activation command (RATS) can then be sent by the reader to start the application level protocol.
- A compliant card in the ACTIVE state can accept proprietary commands from the reader instead, allowing us to introduce our new Level 1 command, **NONCE_REQ**, coupled with our **NONCE_RES** response, used to execute the nonce exchange at the ISO 14443 level.
- If the reader and card support our protocol, the reader sends the **NONCE_REQ** command with a 32-bit nonce. A reader that does not support the protocol will send the **RATS** command, missing the **NONCE_REQ** command. The L1RP card replies with the **NONCE_RES** response, with a 32-bit nonce. The **NONCE_REQ – NONCE_RES** exchange is timed by the reader to prevent MitM attackers from relaying the messages.
- Nonce Generation by the Card: Book 4 of the EMV specification (page 57) suggests that nonces on EMV cards should be generated using specialist algorithms and circuits, such as a PRNG. This is left to the card implementer, and we opt for this EMV-driven approach. We recommend similar PRNG-security practice guidelines, adhering to AIS 20/31 requirements for PRNG security certification.
- Including Proof of the Level 1 Nonce Exchange in Level 3: At the EMV application level, our protocol runs exactly as the Mastercard PayPass protocol, but after receiving the AC, the L1RP-compatible reader will use a new **READ RECORD** command to read out the timing information for the card (expected, maximum, and minimum response times) and the Level 1 nonces signed by the card along with the AC. These signed nonces attest that the Level 1 nonce exchange was done with the card and bind the nonces to the AC.
- Protection from Downgrade Attacks: The card’s ability to run our protocol is recorded in the AIP, signed by the card in the SDAD, which is checked by the reader. Any attempts to downgrade a card by changing the AIP to make the reader believe it doesn’t support L1RP will be detected by the reader as a mismatch in the SDAD.
- Separate Relay Resistance and Payment Proofs: We note the separation of relay resistance and payment proofs (e.g., adding a "special" SDAD-like message sent by the card for distance bounding proofs). This separation allows for better backward compatibility and clearer security proofs.

**L1RP vs. Visa’s Level 1 Relay-Protection:**
- Unlike the Visa protocol, our L1RP protocol uses random nonces (as opposed to UIDs) and they are issued from both the card and the reader’s sides of the EMV protocol.
- Even if we weakened our protocol and let the card/phone send a UID as per Visa’s case, applying our attack from Section V would still not work against this weakened L1RP. In our attack, only the card’s UID is manipulated maliciously; if this were applied to L1RP, the victim’s phone would not receive the nonce of the real reader, and the EMV-level checks in the last step of L1RP would fail.
- If a MitM attacker resets both the card and reader’s nonces in L1RP, the reader’s nonce is sent out first, and the nonce exchange is timed by the reader. To fall within the allowed time-bound, the attacker would have to guess preemptively the nonce of the reader, which would happen with a probability of \(2^{-32}\), under our assumption of pseudorandom nonces.

**Summary:**
- The security of our protocol is based on session-identifying, pseudorandom data coming from both sides of a two-party protocol and timing this exchange of the random data, so the MitM attacker cannot guess it or relay it effectively.

#### B. Formal Verification of Security

We extend our model of Mastercard’s contactless protocol from Section IV-G with support for our L1RP protocol. New rules model the sending of the Level 1 ATQA message indicating if a device supports our protocol and, for devices that do, the **NONCE REQ** and **NONCE RES** nonce exchange messages, as well as the reader asking for the DB proof. We also enhance the model with the reader checking this DB-proof, the protocol-type recorded in the AIP, and add lemmas to verify the lack of downgrade attacks.

Our model includes devices and readers that do and do not support our L1RP protocol. We check that any combination of devices and readers can finish an EMV transaction. We check protection from downgrade attacks by ensuring that a reader that supports our L1RP protocol can only ever finish a run without DB protection if the device it is running the protocol with does not support our L1RP protocol.

To verify protection from relay attacks, we use the framework of Mauw et al. [5], who present a definition of causality-based secure distance-bounding. This can be used to verify the correctness of distance-bounding protocols without explicitly modeling time and locations. This model assumes a protocol with a verifier (the terminal) and a prover (the device). The verifier will have a timed phase; in our Tamarin model, we indicate this by a **DB Start** action when the terminal sends the **NONCE REQ** message and a **DB End** action when the terminal receives the **NONCE RES** message.

The action that the device/prover is expected to perform during this phase (the reply to the **NONCE REQ** message) is tagged with a **DB Action** label, and we add a **DB Claim** label to the terminal Tamarin rule that verifies the DB proof. All of these actions are parameterized on the identities of the prover and the verifier, and the nonces used in the transaction.

Mauw et al. [5] show that the standard notion of distance-bounding security, regarding MitM attackers, holds if whenever there exists a **DB Claim(P,V,Nc,Nr)** action in a trace, then there must have been a preceding **DB End(V,Nc,Nr)** action, preceded by a **DB Action(P,Nc,Nr)** preceded by a **DB Start(V,Nr)**. I.e., the prover must have acted during the timed phase of the verifier, or P or V must have been compromised. This definition à la Mauw et al. [5] is easy to check in Tamarin, which takes 327 seconds to show that it holds.