### Table 3: Levels of Protection Strength

- **Partial** in the local resources protection column means that developers protect either memory or local resources, but not both.
- **\*** indicates that the protection does not matter at this level.
- **+** indicates that the game either has code obfuscation or compilation into native code.
- **Partial** in the client-server sync column means that developers partially rely on the client to compute sensitive logic.

| Feature                    | Level 1 | Level 2 | Level 3 | Level 4 | Level 5 | Level 6 | Level 7 | Level 8 | Level 9 | Level 10 | Level 11 | Level 12 |
|----------------------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|----------|----------|----------|
| Native Compilation         | NA      | NA      | Yes     | NA      | Yes     | +       | *       | *       | *       | *        | *        | *        |
| Network Protection         | NA      | NA      | NA      | Yes     | Yes     | +       | *       | *       | *       | *        | *        | *        |
| Client-Server Sync         | No      | No      | No      | No      | No      | No      | No      | No      | No      | No       | Partial  | Full     |
| Local Resources Protection | NA      | NA      | NA      | NA      | Partial | NA      | NA      | NA      | Partial | Full     | Full     | Full     |
| HTTPS                      | NA      | NA      | NA      | NA      | NA      | Customized | Customized | Customized | Customized | Customized | Customized | Customized |
| Number of Games Hacked     | 48      | 4       | 9       | 3       | 1       | 3       | 1       | 1       | 5       | 2        | 5        | 18       |

### Practical Value of the Table
This table provides developers with an estimate of how well their games are protected compared to others in the market. For example, if a game implements local resource protection and customized traffic protection, and its important libraries are compiled into native code, it would have a 4B rating, indicating that the developer has likely done a better job than 70% of others.

### Considerations for Game Developers
- **Genre and Development Platform**: The genre and development platform of a game should be considered when implementing security measures.
  - **Multi-Player Games**: Implement client-server synchronization as it offers the strongest protection, and the traffic overhead is reasonable given the already heavy traffic.
  - **Other Genres**: The development platform becomes the main consideration. Generally, a combination of local resource protection, network protection, and code obfuscation/native code implementation is suggested.
    - **Android SDK/NDK**: All these mechanisms can be implemented without significant effort.
    - **cocos2d-x**: Suggest local resource protection, network protection, and native code due to its C++ nature.
    - **Unity3D, libGDX, Adobe Air, AndEngine**: Use a combination of local resource protection, network protection, and code obfuscation, as building native code libraries and frequent invocations from high-level languages (Java, C#, ActionScript) can incur high runtime overhead.
  - **Additional Measures**: Deploy per-device keys and periodically update them to make it difficult for professional hackers to share their results.

### Related Work
#### Attacks and Defenses in Games
- **Online Multi-Player PC Games**: Researchers have investigated specific threats and categorized different attacks. Specific threats include state exposure and general map hacking techniques [26, 7]. Yan et al. provide an overview of different cheating methods and the security problems behind them [37].
- **Reviews and Comparisons**: Another review paper [34] covers known attacks and gives real-world examples in multi-player games, focusing on comparing attacks and defenses in Client/Server and P2P architectures.
- **Defenses**: Most proposals design protocols to sync client-server states and verify game status on the server side [3]. Approaches to verify client behavior observed on the server side to detect abnormal behaviors have also been proposed [4, 9, 25, 32]. Minimizing information disclosed to the client is discussed in [28, 36].

#### Client-Side Protection
- **Research Proposals**: Monch et al. propose protecting games by creating a trustworthy client [29], while other researchers suggest using trusted computing platforms as hosts for game consoles [2].
- **Comparison**: Our study systematically examines defenses in real mobile games and provides practical suggestions.

#### Security Issues Due to Untrusted Clients
- **General Security Problem**: The problem of untrusted clients in mobile games is a special case of a broader security issue in client-server systems. Web developers often place sensitive data in browser cookies or perform critical computations in client-side JavaScript [5, 12].
- **Protocol Implementation Bugs**: Chen et al. describe incorrect implementations of the OAuth protocol, allowing untrusted clients to access victim users' accounts without passwords [8]. An attack against Google’s In-App purchase service is also documented [30].

### Conclusions
Our study aims to understand the effectiveness of existing defense techniques against mobile-game hacking. These techniques protect various elements, including memory, local files, network traffic, source code, and game states. Over 50% of developers in our dataset have attempted to implement some protections, which is encouraging. However, the effectiveness varies, with some protections easily defeated by automatic tools and others requiring significant manual effort. We provide a reference framework to help developers understand the relative effectiveness of their implementations. Cost, including developer effort and runtime overhead, is also an important consideration. Many protection mechanisms require a trade-off between effectiveness and cost. Platform support is a crucial factor, making developers more willing to adopt these protection mechanisms and presenting a better value proposition.

### Acknowledgements
We thank Harshit Agarwal, Sohil Habib, Kenny Sung, Xiaofeng Wang, and anonymous reviewers for their valuable comments.

### References
[1] Adobe. Adobe AIR. http://www.adobe.com/products/air.html.
[2] S. Balfe and A. Mohammed. Final Fantasy–Securing Online Gaming with Trusted Computing. In Autonomic and Trusted Computing, pages 123–134. Springer, 2007.
[3] N. E. Baughman and B. N. Levine. Cheat-Proof Playout for Centralized and Distributed Online Games. In INFOCOM 2001. Twentieth Annual Joint Conference of the IEEE Computer and Communications Societies. Proceedings. IEEE, volume 1, pages 104–113. IEEE, 2001.
[4] D. Bethea, R. A. Cochran, and M. K. Reiter. Server-Side Verification of Client Behavior in Online Games. ACM Transactions on Information and System Security (TISSEC), 14(4):32, 2011.
[5] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. Venkatakrishnan. Notamper: Automatically Detecting Parameter Tampering Vulnerabilities in Web Applications. In ACM Conf. on Computer and Communications Security, 2010.
[6] Bob Pan. Dex2jar. https://github.com/pxb1988/dex2jar.
[7] E. Bursztein, M. Hamburg, J. Lagarenne, and D. Boneh. OpenConflict: Preventing Real-Time Map Hacks in Online Games. In Security and Privacy (SP), 2011 IEEE Symposium on, pages 506–520. IEEE, 2011.
[8] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague. OAuth Demystified for Mobile Application Developers. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 892–903. ACM, 2014.
[9] R. A. Cochran and M. K. Reiter. Toward Online Verification of Client Behavior in Distributed Applications. In NDSS, 2013.
[10] Cocos2d-x. Cocos2d-x. http://www.cocos2d-x.org/.
[11] Dean Takahashi. Mobile Games Hit $34.8B in 2015. http://venturebeat.com/2016/02/10/mobile-games-hit-34-8b-in-2015-taking-85-of-all-app-revenues/.
[12] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna. Toward Automated Detection of Logic Vulnerabilities in Web Applications. In USENIX Security Symposium, pages 143–160, 2010.
[13] FLX App. CheatDroid. https://play.google.com/store/apps/details?id=com.felixheller.sharedprefseditor.
[14] GameCIH. GameCIH. www.cih.com.tw/gamecih.html.
[15] GameGuardian. GameGuardian. http://gameguardian.net/forum/.
[16] GameKiller. Game Killer. http://game-killer.com/.
[17] Google Inc. Android NDK. https://developer.android.com/tools/sdk/ndk/index.html.
[18] Google Inc. Android SDK. https://developer.android.com/sdk/index.html.
[19] Google Inc. Hiding Leaderboard Scores. https://developers.google.com/games/services/common/concepts/leaderboards#hiding_leaderboard_scores.
[20] Google Inc. ProGuard. http://developer.android.com/tools/help/proguard.html.
[21] Google Inc. Protobuf. https://github.com/google/protobuf.
[22] ICSharpCode. Dex2jar. http://ilspy.net/.
[23] Java Decompiler. JD-GUI. http://jd.benow.ca/.
[24] Joshua Brustein. Finland’s New Tech Power: Game Maker Supercell. http://goo.gl/9woZTj.
[25] P. Laurens, R. F. Paige, P. J. Brooke, and H. Chivers. A Novel Approach to the Detection of Cheating in Multiplayer Online Games. In Engineering Complex Computer Systems, 2007. 12th IEEE International Conference on, pages 97–106. IEEE, 2007.
[26] K. Li, S. Ding, D. McCreary, and S. Webb. Analysis of State Exposure Control to Prevent Cheating in Online Games. In Proceedings of the 14th International Workshop on Network and Operating Systems Support for Digital Audio and Video, pages 140–145. ACM, 2004.
[27] Max Lv. ProxyDroid. https://github.com/madeye/proxydroid.
[28] S. Moffatt, A. Dua, and W.-c. Feng. SpotCheck: An Efficient Defense Against Information Exposure Cheats. In Proceedings of the 10th Annual Workshop on Network and Systems Support for Games, page 8. IEEE Press, 2011.
[29] C. Mönch, G. Grimen, and R. Midtstraum. Protecting Online Games Against Cheating. In Proceedings of 5th ACM SIGCOMM Workshop on Network and System Support for Games, page 20. ACM, 2006.
[30] C. Mulliner, W. Robertson, and E. Kirda. VirtualSwindle: An Automated Attack Against In-App Billing on Android. In Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security, pages 459–470. ACM, 2014.
[31] SuperData Research. Worldwide Digital Games Market. https://www.superdataresearch.com/blog/us-digital-games-market/.
[32] H. Tian, P. J. Brooke, and A.-G. Bosser. Behaviour-Based Cheat Detection in Multiplayer Games with Event-B. In Integrated Formal Methods, pages 206–220. Springer, 2012.
[33] Unity3D. Unity3D. https://unity3d.com/.
[34] S. D. Webb and S. Soh. Cheating in Networked Computer Games: A Review. In Proceedings of the 2nd International Conference on Digital Interactive Media in Entertainment and Arts, pages 105–112. ACM, 2007.
[35] Xmodgames. Xmodgames. http://www.xmodgames.com/.
[36] A. Yahyavi, K. Huguenin, J. Gascon-Samson, J. Kienzle, and B. Kemme. Watchmen: Scalable Cheat-Resistant Support for Distributed Multi-Player Online Games. In Distributed Computing Systems (ICDCS), 2013 IEEE 33rd International Conference on, pages 134–144. IEEE, 2013.
[37] J. Yan and B. Randell. A Systematic Classification of Cheating in Online Games. In Proceedings of 4th ACM SIGCOMM Workshop on Network and System Support for Games, pages 1–9. ACM, 2005.