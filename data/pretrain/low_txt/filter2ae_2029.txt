# PXE Dust：Windows Deployment Services 漏洞分析

## 译文声明
本文为翻译文章，原作者为 Checkpoint，原文发布于 research.checkpoint.com。具体内容及含义请以原文为准。

## 一、前言
许多大型组织使用 Windows Deployment Services (WDS) 在新主机上安装自定义操作系统。用户可以通过局域网 (LAN) 访问 WDS，获取所需软件。WDS 可以为每个新的网络单元确定操作系统及相关程序和服务。如果攻击者能够破坏 WDS 服务器并修改其内容，从而在每台新主机上部署恶意软件，后果将非常严重。本文将介绍我们在 WDS 架构上的研究成果，并探讨如何利用该漏洞。

## 二、Windows Deployment Services (WDS)
WDS 是微软提出的一种基于网络的 Windows 操作系统安装解决方案。它使用 Windows Imaging (WIM) 格式的磁盘映像，并从 Windows Server 2008（32 位和 64 位）开始正式引入 WDS 角色。尽管 WDS 系统复杂且我们尚未完全理解其整体架构，但在本次研究中，我们主要关注 WDS 在新安装环境中的行为，因为这种预认证协商过程一直是攻击者的重点关注对象。

在部署完整的 Windows 映像之前，WDS 必须提供一些网络启动策略。为此，WDS 使用了 PXE（Preboot Execution Environment，预引导执行环境）服务器。PXE 是 Intel 创建的一个标准，用于在引导固件中建立一套通用的预引导服务，最终目标是使客户端能够执行网络引导操作，并接收来自网络启动服务器的 NBP（Network Boot Program，网络启动程序）。PXE 服务器使用 TFTP（Trivial File Transfer Protocol，简单文件传输协议）来传输 NBP。

TFTP 是一个基于 UDP/IP 协议的简单文件传输协议，端口号为 69。由于 TFTP 架构简单且代码量小，因此常被用于各种网络启动策略（如 BOOTP、BSDP 和 PXE）的初始阶段。然而，TFTP 缺乏 FTP 协议的许多高级功能，例如无法列出、删除或重命名文件或目录，也不支持用户认证，仅支持读写功能。目前，TFTP 主要用于局域网场景。基于这些因素，我们将研究重点放在这个协议上。

## 三、模糊测试
我们首先使用 Boofuzz 创建了一个 TFTP 的基础模糊测试器。Boofuzz 是 Sulley 模糊测试框架的继任者，安装简便，文档丰富，语法简单，可以轻松将相关 RFC 转换为模糊测试脚本。

`Tftp.py` 定义了协议语义及待模糊测试的字段。由于这个模糊测试器非常通用，我们可以对其进行改造以适配任何 TFTP 的具体实现，我们也鼓励其他研究人员采用这种方法，避免重复工作。

在模糊测试运行期间，我们手动逆向分析了 `wdstftp.dll` 中的服务端实现代码，这两种方法通常可以互补。

## 四、`wdstftp.dll` 分析
逆向分析完成后，我们检查了 `CTftp::ParseRequest` 中实现的文件读取机制。由于 TFTP 协议的功能较为简单，这是一个很好的切入点。

服务端在 `CTftpPacket::ParseRequest` 中处理 TFTP 读取请求 (RRQ)。验证客户端所请求的文件确实存在于 PXE 根目录后，服务端将其读入 `CTptReadFile::CacheBlock` 结构中。服务端通过链表管理这些 `CacheBlocks`，异步调用 `ReadFile` 并将 `CTptReadFile::_IOCompletionCallback` 设置为回调函数。

然而，我们注意到一个奇怪的行为：`CacheBlocks` 链表的大小似乎有限，只有两个节点。当缓存块数量超过两个时，最后一个节点会被释放。了解这一特性后，结合 `blksize` 和 `windowsize` 选项，我们可以构造一个请求，在收到确认数据包之前生成两个以上的缓存块。如果时机恰当，某个缓存块会在被回调函数使用前被释放。

在 Windows Deployment Services 中，我们发现了一个 UAF（Use After Free）漏洞。`RAX` 指针指向已释放的内存，导致异常。

为什么我们的模糊测试器没有发现这个漏洞？原因在于 Sulley 框架每次只能模糊测试一个字段，而我们的请求永远不会深入到如此深的路径。这对未来模糊测试器的开发有借鉴意义：一方面，我们希望构造的报文尽可能有效，不会被解析器拒绝；另一方面，如果报文过于正确，可能不会发现潜在的漏洞。

## 五、利用方法
由于这是一个可远程触发、无需身份认证且具有高权限的 Windows 服务端漏洞，我们将其标记为严重漏洞。

通常情况下，利用 UAF 漏洞时，我们会尝试分配一个不同但大小相似的对象，或者处于不同状态的类似对象，然后在两者之间造成混乱。我们检查了进程堆以寻找在已释放空间分配对象的方法。

事实证明，WDS 使用了多个堆，并且这些堆由 `wdstftp.dll`、`wdssrv.dll` 和 `wdsmc.dll` 共享使用。虽然 `wdstftp.dll` 支持某些灵活的分配方式（如 TFTP 错误报文中的分配方式），但会将 ASCII 转换为 Unicode。

这对 POC 来说是一个很好的利用原语，但为了构造可用的 payload，我们还需要解引用某些指针。`wdssrv.dll` 提供了一个分配原语机制，该 DLL 公开了一个 RPC 接口，可以远程调用 WDS 服务器提供的服务。根据该协议的程序特征和丰富的官方文档，我们有望成功利用此漏洞。

在寻找攻击者可控的分配空间时，我们发现了 `CRpcHandler::OnRecvRequest`。顾名思义，这个 RPC 处理程序会对 RPC 请求进行初始解析，然后将其插入队列以便后续处理。不幸的是，后续函数并不共享我们的堆，因此我们的操作范围仅限于这个处理函数。

为了使用已释放的内存，我们需要使用相同的堆 bucket（大小为 0x5c-0x78）。在这个处理函数中，唯一的分配操作位于 `CMemoryBuffer::Initialize` 中。我们可以使用以下脚本执行成功的分配操作，命中目标 bucket。

然而，结构中的某些字段（最重要的是 `CacheBlocks` 的 `callbackCtx` 指针）保持不变（未初始化）。如果我们进一步扩大 RPC payload，由于 `CMemoryBuffer::Initialize` 中会计算 size，因此会被分配到错误的 bucket 中。

我们的思路是判断是否可以使用受控的 `CacheBlocks` 字段来做些改变。经过进一步逆向分析，我们发现 `CTftpReader` 实际上并没有使用这些字段，这不是个好消息。

为了利用这个漏洞，我们尝试了另一种方法。我们试图重新利用这个漏洞，使服务器泄露重要信息。正常情况下，服务端会在 `CacheBlock` 上调用 `IOCompletionCallback`（包含文件内容），并将相应内容返回给我们。通过植入“全新的” `CacheBlock`（尚未包含文件内容），我们希望服务端能将新的 `CacheBlock` 的未初始化内容发送给我们，从而构造信息泄露场景。

在这种竞争条件下，经过多次尝试，我们仍然只收到了部分文件内容，没有看到未初始化的内存信息。我们猜测，如果服务端较为繁忙，需要处理大量文件读写请求，那么读取我们的 TFTP 映像速度会更慢，从而提高我们成功的概率。

## 六、总结
WDS 是一种广泛使用的 Windows 服务器服务，用于镜像的安装和部署。该服务的底层 PXE 服务器存在一个严重的 UAF 漏洞，可以被远程触发，并且可能被未经身份认证的攻击者利用。

我们向微软报告了该漏洞，微软为其分配了编号 CVE-2018-8476，并标为严重漏洞，声明 Windows Server 2008 SP2 及以上版本可能存在代码执行风险。由于时间限制，我们没有继续寻找漏洞利用方法，但 Check Point Research 和微软都认为该漏洞很有可能被攻击者成功利用。

Check Point IPS 解决方案可以防护该威胁：Microsoft Windows Deployment Services TFTP Server Code Execution (CVE-2018-8476)。