### Control and Support for HTTPS

Controlling the domains may also allow for the addition of support for HTTPS. However, this can be a prohibitively expensive and challenging process for novice developers.

We reviewed 100 extensions and found that 29% currently make HTTP XHRs (XMLHttpRequests). All of these would need to be changed to use HTTPS XHRs. However, not all domains offer HTTPS. Ten extensions request data from at least one HTTP-only domain. Additionally, four extensions make HTTP XHRs to an unlimited number of domains based on URLs provided by the user; these extensions would have permanently reduced functionality. For example, the Web Developer extension allows users to check whether a website is valid HTML. It fetches the user-specified website with an XHR and then validates it. Under a ban on HTTP XHRs, the extension would not be able to validate HTTP websites. In total, 14% of the extensions would have some functionality permanently disabled by such a ban.

### Related Work

#### Extension Vulnerabilities
To our knowledge, our work is the first to evaluate the efficacy of the Google Chrome extension platform, which is widely deployed and explicitly designed to prevent and mitigate extension vulnerabilities. Previous research has investigated vulnerabilities in other extension platforms, such as Firefox [20, 3]. We found that 40% of Google Chrome extensions are vulnerable, in contrast to a previous study that found only 0.24% of Firefox extensions contain vulnerabilities [3]. This discrepancy does not necessarily imply that Firefox extensions are more secure; rather, our scopes and methodologies differ. Unlike the previous study, we considered both network attackers and web attackers. We found that 5% of Google Chrome extensions have the types of web vulnerabilities covered in the previous study. The remaining discrepancy could be due to our methodology: we employed expert human reviewers, whereas the previous work relied on a static analysis tool that does not model dynamic code evaluation, data flow through the extension API, data flow through DOM APIs, or click injection attacks.

#### Privilege Separation
Privilege separation is a fundamental software engineering principle proposed by Saltzer and Schroeder [25]. Numerous works have applied this concept to security, such as OpenSSH [23] and qmail [6]. Recently, researchers have developed several tools and frameworks to help developers implement privilege separation [7, 11, 17, 18, 22]. Studies have established that privilege separation is valuable in software projects that employ security experts, such as browsers [9]. However, we focus on the effectiveness of privilege separation in applications that are not written by security experts.

In concurrent and independent work, Karim et al. studied the effectiveness of privilege separation in Mozilla Jetpack extensions [16]. Like Chrome extensions, Jetpack extensions are split into multiple components with different permissions. They statically analyzed Jetpack extensions and found several capability leaks in modules. Although none of these capability leaks are tied to known vulnerabilities, they demonstrate that developers can make errors in a privilege-separated environment. Their findings support our analysis of privilege separation in Chrome extensions.

#### Extension Permissions
Previous researchers have established that permissions can reduce the privileges of extensions without negatively impacting their functionality [4, 12]. Studies have also shown that some extensions request unnecessary permissions, which is undesirable because it unnecessarily increases the scope of potential vulnerabilities [12, 14]. These past studies asserted that the correct usage of permissions could reduce the severity of attacks on extensions. However, they did not study whether this is true in practice or quantify the benefit for deployed applications. To our knowledge, we are the first to test whether permissions mitigate vulnerabilities in practice.

#### CSP Compatibility
Adapting websites to work with Content Security Policy (CSP) can be a challenging undertaking for developers, primarily due to the complexities associated with server-side templating languages [31]. However, extensions do not use templating languages, making the application of CSP easier than applying it to websites in most cases. We expect that our CSP compatibility findings for extensions will translate to packaged JavaScript and packaged web applications.

#### Malicious Extensions
Extension platforms can be used to build malware (e.g., FFsniFF and InfoStealer.Snifula [33]). Mozilla and Google employ several strategies to prevent malicious extensions, such as domain verification, fees, and security reviews. Liu et al. propose changes to Chrome to make malware easier to identify [19]. Research on extension malware is orthogonal to our work, which focuses on external attackers that leverage vulnerabilities in benign but buggy extensions.

### Conclusion

We performed a security review of 100 Google Chrome extensions, including the 50 most popular, and found that 40% have at least one vulnerability. Based on this set of vulnerabilities, we evaluated the effectiveness of Chrome’s three extension security mechanisms: isolated worlds, privilege separation, and permissions. We found that the isolated worlds mechanism is highly effective because it prevents common developer errors (i.e., data-as-HTML errors). The effectiveness of isolated worlds means that privilege separation is rarely needed. However, our study shows that privilege separation would improve security in the absence of isolated worlds. We also found that permissions can significantly impact system security; developers of vulnerable extensions can use permissions well enough to reduce the scope of their vulnerabilities.

Although we demonstrated that privilege separation and permissions can mitigate vulnerabilities, developers do not always use them optimally. We identified several instances where developers accidentally negated the benefits of privilege separation or intentionally circumvented the privilege separation boundary to implement features. Similarly, extensions sometimes ask for more permissions than they need [12]. Automated tools for privilege separation and permission assignment could help developers better use these security mechanisms, thereby rendering them even more effective.

Despite the successes of these security mechanisms, extensions remain widely vulnerable. The vulnerabilities occur because the system was designed to address only one threat: websites that attack extensions through direct interaction. There are no security mechanisms to prevent direct network attacks on core extensions, website metadata attacks, or attacks on websites that have been altered by extensions. This finding should serve as a reminder that multiple threats should be considered when initially designing a system. We propose preventing these additional threats by banning insecure coding practices that commonly lead to vulnerabilities; bans on HTTP scripts and inline scripts would remove 94% of the most serious attacks with a manageable developer cost.

### Acknowledgements

We would like to thank Prateek Saxena and Adam Barth for their insightful comments. This material is based upon work supported by Facebook and National Science Foundation Graduate Research Fellowships. Any opinions, findings, conclusions, or recommendations expressed here are those of the authors and do not necessarily reflect the views of Facebook or the National Science Foundation. This work is also partially supported by National Science Foundation grant CCF-0424422, a gift from Google, and the Intel Science and Technology Center for Secure Computing.

### References

[1] L. Adamski. Security Severity Ratings. https://wiki.mozilla.org/Security_Severity_Ratings.
[2] B. Adida, A. Barth, and C. Jackson. Rootkits for JavaScript Environments. In Web 2.0 Security and Privacy (W2SP), 2009.
[3] S. Bandhakavi, S. T. King, P. Madhusudan, and M. Winslett. VEX: Vetting Browser Extensions for Security Vulnerabilities. In USENIX Security, 2010.
[4] A. Barth, A. P. Felt, P. Saxena, and A. Boodman. Protecting Browsers from Extension Vulnerabilities. In Network and Distributed System Security Symposium (NDSS), 2010.
[6] D. J. Bernstein. The qmail Security Guarantee. http://cr.yp.to/qmail/guarantee.html.
[7] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: Splitting Applications into Reduced-Privilege Compartments. In USENIX Symposium on Networked Systems Design and Implementation, 2008.
[8] B. Chess, Y. T. O’Neil, and J. West. JavaScript Hijacking. Technical report, Fortify, 2007.
[9] J. Drake, P. Mehta, C. Miller, S. Moyer, R. Smith, and C. Valasek. Browser Security Comparison: A Quantitative Approach. Technical report, Accuvant Labs, 2011.
[10] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android Permissions Demystified. In ACM Conference on Computer and Communication Security (CCS), 2011.
[11] A. P. Felt, M. Finifter, J. Weinberger, and D. Wagner. Diesel: Applying Privilege Separation to Database Access. In ACM Symposium on Information, Computer and Communications Security (AsiaCCS), 2011.
[12] A. P. Felt, K. Greenwood, and D. Wagner. The Effectiveness of Application Permissions. In USENIX Conference on Web Application Development (WebApps), 2011.
[13] Google Chrome Extensions. Content Security Policy (CSP). http://code.google.com/chrome/extensions/trunk/contentSecurityPolicy.html.
[14] A. Guha, M. Fredrikson, B. Livshits, and N. Swamy. Verified Security for Browser Extensions. In IEEE Symposium on Security and Privacy, 2011.
[15] C. Jackson. Block chrome-extension:// pages from importing script over non-HTTPS connections. http://code.google.com/p/chromium/issues/detail?id=29112.
[16] Rezwana Karim, Mohan Dhawan, Vinod Ganapathy, and Chung chiech Shan. An Analysis of the Mozilla Jetpack Extension Framework. In Proceedings of the 26th European Conference on Object-Oriented Programming (ECOOP), 2012.
[5] Adam Barth. More secure extensions, by default. http://blog.chromium.org/2012/02/more-secure-extensions-by-default.html, February 2012.
[17] A. Krishnamurthy, A. Mettler, and D. Wagner. Fine-grained privilege separation for web applications. In International Conference on World Wide Web (WWW), 2010.
[18] M. Krohn, P. Efstathopoulos, C. Frey, F. Kaashoek, E. Kohler, D. Mazières, R. Morris, M. Osborne, S. VanDeBogart, and D. Ziegler. Make Least Privilege a Right (Not a Privilege). In Conference on Hot Topics in Operating Systems, 2005.
[19] L. Liu, X. Zhang, G. Yan, and S. Chen. Chrome Extensions: Threat Analysis and Countermeasures. In Network and Distributed System Security Symposium (NDSS), 2012.
[20] R. S. Liverani and N. Freeman. Abusing Firefox Extensions. Defcon17.
[21] A. Mikhailovsky, K. V. Gavrilenko, and A. Vladimirov. The Frame of Deception: Wireless Man-in-the-Middle Attacks and Deployment. http://www.informit.com/articles/article.aspx?p=353735&seqNum=7, 2004.
[22] D. Murray and S. Hand. Privilege Separation Made Easy: Trusting Small Libraries Not Big Processes. In European Workshop on System Security (EuroSec), 2008.
[23] N. Provos, M. Friedl, and P. Honeyman. Preventing Privilege Escalation. In USENIX Security Symposium, 2003.
[24] G. Richards, C. Hammer, B. Burg, and J. Vivek. The Eval that Men Do: A Large-scale Study of the Use of Eval in JavaScript Applications. In European Conference on Object-Oriented Programming, 2012.
[25] J. Saltzer and M. D. Schroeder. The Protection of Information in Computer Systems. In IEEE 63, 1975.
[26] R. Saltzman and A. Sharabani. Active Man in the Middle Attacks: A Security Advisory. Technical report, IBM, 2009.
[27] StackOverflow. Why is using JavaScript eval function a bad idea? http://stackoverflow.com/questions/86513/why-is-using-javascript-eval-function-a-bad-idea.
[28] B. Sterne and A. Barth. Content Security Policy. https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html.
[29] Brandon Sterne and Adam Barth. Content Security Policy 1.1. https://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-specification.dev.html, May 2012.
[30] S. Wagner, J. Jurgens, C. Koller, and J. P. Trischberger. Comparing Bug Finding Tools with Reviews and Tests. Lecture Notes in Computer Science, 2005.
[31] J. Weinberger, A. Barth, and D. Song. Towards Client-side HTML Security Policies. In Workshop on Hot Topics on Security (HotSec), 2011.
[32] S. Willison. Understanding the Greasemonkey Vulnerability. http://simonwillison.net/2005/Jul/20/vulnerability/.
[33] C. Wuest and E. Florio. Firefox and Malware: When Browsers Attack. Technical report, Symantec, 2009.

### List of Extensions

We selected 100 extensions from the official Chrome extension directory. We have coded extensions as follows: vulnerable and fixed (†), vulnerable but not fixed (‡), and created by Google (*). We last checked whether extensions are still vulnerable on February 7, 2012.

#### Most Popular Extensions
The 50 most popular extensions (and versions) that we reviewed are as follows:
- AdBlock 2.4.6
- FB Photo Zoom 1.1105.7.2
- FastestChrome - Browse Faster 4.0.6†
- AdBlock Plus for Google Chrome? (Beta) 1.1.3†
- Google Translate 1.2.3.1*‡
- Google Dictionary (by Google) 3.0.0*†
- Downloads 1
- Turn Off the Lights 2.0.0.7
- Google Chrome to Phone Extension 2.3.0*
- Firebug Lite for Google Chrome 1.3.2.9761†
- Docs PDF/PowerPoint Viewer (by Google) 3.5*
- RSS Subscription Extension (by Google) 2.1.3*‡
- Webpage Screenshot 5.2†
- Mail Checker Plus for Google Mail 1.2.3.3
- Awesome Screenshot: Capture & Annotate 3.0.4‡
- Google Voice (by Google) 2.2.3.4*†
- Speed Dial 2.1‡
- Smooth Gestures 0.15.2
- Xmarks Bookmark Sync 1.0.14
- Send from Gmail (by Google) 1.12*
- SocialPlus! 2.5.4‡
- FlashBlock 0.9.31
- AddThis - Share & Bookmark (new) 2.1†
- WOT 1.1
- Add to Amazon Wish List 1.0.0.4†
- StumbleUpon 3.5.18.1†
- Google Calendar Checker (by Google) 1.2.1*
- Clip to Evernote 5.0.14.9248
- Google Quick Scroll 1.8*
- Stylish 0.7
- Silver Bird 1.9.7.9†
- SmoothScroll 1.0.1
- Browser Button for AdBlock 0.0.13
- TV 2.0.5
- Fast YouTube Search 1.2‡
- Slideshow 1.2.9†
- bit.ly — a simple URL shortener 1.2.1.9
- Web Developer 0.3.1
- LastPass 1.73.2
- SmileyCentral 1.0.0.3‡
- Select To Get Maps 1.1.1‡
- TooManyTabs for Chrome 1.6.5
- Blog This! (by Google) 0.1.1*
- TinEye Reverse Image Search 1.1
- ESPN Cricinfo 1.8.3†
- MegaUpload DownloadHelper 1.2
- Forecastfox 2.0.10‡
- PanicButton 0.13.1†
- AutoPager Chrome 0.6.2.12
- RapidShare DownloadHelper 1.1.1

#### Randomly Selected Extensions
The 50 randomly selected extensions (and versions) that we reviewed are as follows:
- The Independent 1.7.0.3†
- Deposit Files Download Helper 1.2
- The Huffington Post 1.0.5‡
- Bookmarks Menu 3.4.6
- X-notifier (Gmail, Hotmail, Yahoo, AOL ...) 0.8.2‡
- SmartVideo For YouTube 0.94
- PostRank Extension 0.1.7
- Bookmark Sentry 1.6.5†
- Print Plus 1.0.5.0‡
- 4chan 4chrome 9001.47‡
- HootSuite Hootlet 1.5
- Cortex 1.8.3
- ScribeFire 1.7‡
- Chrome Dictionary Lite 0.2.6†
- Taberareloo 2.0.17
- SEO Status Pagerank/Alexa Toolbar 1.6
- ChatVibes Facebook Video Chat! 1.0.7†
- PHP Console 2.1.4
- Blank Canvas Script Handler 0.0.17‡
- Reddit Reveal 0.2
- Greplin 1.7.3
- Dropbox 1.1.5
- Speedtest.or.th 1
- Happy Status 1.0.1‡
- New Tab Favorites 0.1
- Ricks Domain Cleaner for Chrome 1.1.1
- Fazedr 1.6†
- LL Bonus Comics First! 2.2
- Better Reddit 0.0.4
- (non-English characters) 1
- turl.im url shortener 1.1
- Wooword Bounce 1.2
- NTUST Library 0.7
- me2Mini 0.0.81‡
- Back to Top 1.1
- Favstar Tally by @paul shinn 1.0.0.0
- ChronoMovie 0.1.0
- AutoPagerize 0.3.1
- Rlweb’s Bitcoin Generator 0.1
- Nooooo button 1‡
- The Bass Buttons 1.95
- Buttons 1.4
- OpenAttribute 0.6†
- Nu.nl TV gids 1.1.3‡
- Hide Sponsored Links in Gmail? 1.4
- Short URL 4
- Smart Photo Viewer on Facebook 1.3.0.1‡
- Airline Checkin (mobile) 1.2102
- Democracy Now! 1.1‡
- Coworkr.net Chrome 0.9