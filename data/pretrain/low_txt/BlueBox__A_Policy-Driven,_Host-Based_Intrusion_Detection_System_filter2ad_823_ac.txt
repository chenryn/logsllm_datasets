### 8 Threads Generating Requests for the Server

Eight threads were used to generate requests for the server, chosen such that the resulting load would not saturate the server, whether BlueBox was enabled or not. The load generated by the clients consisted entirely of static content. Testing with dynamic content would have resulted in a larger performance penalty due to the overhead of loading rules for each script invoked.

### State Diagram of the wu-ftp Daemon

**Initial Root State**
- User authentication
- Nonzero user ID
- Reroot for bind
- After bind: Reroot State

**Reroot State**
- Link to libraries
- Open sockets
- Read /etc/passwd
- Setuid to user
- Access user files
- Setuid to root
- Only system calls:
  - Bind
  - Socket
  - Setuid (back to user)

### Network Configuration

The webstone client and the Apache server were connected via a gigabit Ethernet to ensure that network latencies did not affect the results.

### 6.2 Test Results

Figure 6 shows the performance of the Apache 2.0 web server with and without BlueBox under various server load factors. We anticipated a performance penalty for the Apache 2.0 server running on the Linux 2.2.14 kernel.

### 6.3 Bottlenecks

The primary performance bottleneck in enforcing system call checks for the Apache server is pathname resolution. For each request, the Apache server opens a file and uses `sendfile` to send it over the socket. For each request, we perform a full name resolution operation to match the correct file name with a node on the tree of filesystem object rules, thereby eliminating security holes. This can be optimized by caching and marking certain names as fully resolved. Another approach to reduce the overhead of name resolution is to use mandatory access control type labels (e.g., DoD85, SEL) on filesystem objects, moving the check entirely to the filesystem, which will verify the labels for permission before opening the file.

The results shown in Figure 6 were generated using only static content. Dynamic content requires the server to load additional processes and rules for these new processes, adding to the performance penalty. This can be mitigated by caching the data structures representing rules for frequently used CGI-bin scripts. We are currently implementing this in the BlueBox implementation on Linux.

With these optimizations, we expect the performance penalty for the Apache daemon to be around 5%. We believe this penalty is acceptable given the security guarantees provided by the system.

### 7 Conclusion

We have presented BlueBox, a simple system for sandboxing applications that can significantly mitigate security exposures of processes. Our system provides a straightforward and comprehensive way to incorporate checks on the execution of programs at the time of system call invocation. We have described rules for important servers such as the Apache daemon and popular CGI-bin scripts, which can be used as templates across installations with new rules written for individual scripts. Our rule syntax and semantics are simple yet effective in catching a large number of known attacks. Given that performance was a key design factor, we have achieved our security guarantees with minimal impact on performance.

On a larger scale, we believe that more effective security can be achieved by integrating attack signature-based systems, statistical profile-based systems, and sandboxing systems like the one described in this paper. As depicted in Figure 7, the signature-based approach detects external attacks, the statistical profile approach detects internal anomalies, and the sandboxing approach stops attacks at the boundary.

### 8 Acknowledgements

This work has benefited substantially from discussions with many individuals. We particularly acknowledge the contributions of Pankaj Rohatgi, Josyula R. Rao, David Safford, and Douglas Schales of IBM Research, and Hervé Debar, who was at IBM Zurich Research Lab.

### References

[ALJ93] Debra Anderson, Teresa F. Lunt, Harold Javitz, Ann Tamaru, and Alfonso Valdes. SAFEGUARD FINAL REPORT: Detecting Unusual Program Behavior Using the NIDES Statistical Component. Technical report, Computer Science Laboratory, SRI International, Menlo Park, California, USA, December 1993.

[Atk95] Randall Atkinson. Security Architecture for the Internet Protocol. Internet RFC 1825, August 1995.

[BGM00] M. Bernaschi, E. Gabrielli, and L. Mancini. Enhancements to the Linux Kernel for Blocking Buffer Overflow Based Attacks, http://www.iac.rm.cnr.it/newweb/tecno/papers/bufoverp, August 2000.

[CDE96] Mark Crosbie, Bryn Dole, Todd Ellis, Ivan Krsul, and Eugene Spafford. IDIOT Users Guide. Technical Report CSD-TR-96-050, COAST Laboratory, Dept. of Computer Sciences, Purdue University, September 1996.

[DA97] Tim Dierks and Christopher Allen. The TLS Protocol Version 1.0. draft-ietf-tls-protocol-02.txt, IETF, March 1997.

[DDNW98] Hervé Debar, Marc Dacier, Mehdi Nassehi, and Andreas Wespi. Fixed vs. Variable–Length Patterns for Detecting Suspicious Process Behavior, Research Report, No. RZ3012, IBM Research Division, Zurich Research Lab, April 1998.

[DDW99] Hervé Debar, Marc Dacier, and Andreas Wespi. Towards a Taxonomy of Intrusion Detection Systems. Computer Networks, 31, 1999.

[DoD85] US Department of Defense. Trusted Computer System Evaluation Criteria, 5200.28-STD, http://www.radium.ncsc.mil/tpep/library/rainbow/index.html, December 1985.

[FBF99] Timothy Fraser, Lee Badger, and Mark Feldman. Hardening COTS Software with Generic Software Wrappers. In Proceedings of the IEEE Symposium on Security and Privacy, 1999.

[FHSL96] Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, and Thomas A. Longstaff. A Sense of Self for UNIX Processes. In IEEE Symposium on Security and Privacy, 1996.

[FKK96] Alan O. Freier, Philip Karlton, and Paul C. Kocher. The SSL Protocol Version 3.0. IETF draft-ietf-tls-ssl-version3-00.txt, November 1996.

[Jac99] Kathleen A. Jackson. INTRUSION DETECTION SYSTEM (IDS) Product Review, IBM internal confidential document, IBM Research Division, Zurich Research Lab, April 1999.

[JS00] K. Jain and R. Sekar. User-Level Infrastructure for System Call Interposition: A Platform for Intrusion Detection and Confinement. In Proceedings of the Network and Distributed Systems Security Symposium, February 2000.

[JV94] Hal Javitz and Alfonso Valdes. The NIDES Statistical Component Description and Justification. Technical report, Computer Science Laboratory, SRI International, Menlo Park, California, USA, March 1994.

[JVM01] The Java Virtual Machine, http://www.javasoft.com, 2001.

[KFBK00] Calvin Ko, Timothy Fraser, Lee Badger, and Douglas Kilpatrick. Detecting and Countering System Intrusions Using Software Wrappers. In Proceedings of the 9th USENIX Security Symposium, August 2000.

[MBKQ96] Marshall Kirk McKusick, Keith Bostic, Michael J. Karels, and John S. Quarterman. The Design and Implementation of the 4.4 BSD Operating System, pages 67, 540. Addison Wesley, New York City, New York, USA, 1996.

[Pax98] Van Paxson. Bro: A System for Detecting Network Intruders in Real–Time. In the 7th USENIX Security Symposium, 1998.

[PN98] Thomas H. Ptacek and Timothy N. Newsham. Insertion, Evasion, and Denial of Services: Eluding Network Intrusion Detection, http://www.nai.com, January 1998.

[SEL] Security-Enhanced Linux. Available online at http://www.nsa.gov/selinux/.

[SU99] R. Sekar and P. Uppuluri. Synthesizing Fast Intrusion Detection Systems from High-Level Specifications. In the 8th USENIX Security Symposium, pages 63–78, August 1999.

[UES00] Úlfar Erlingsson and Fred B. Schneider. IRM Enforcement of Java Stack Inspection. In IEEE Symposium on Security and Privacy, 2000.

[Wag99] David A. Wagner. Janus: An Approach for Confinement of Untrusted Applications. Technical Report CSD–99–1056, University of California at Berkeley, August 1999.

[WEB01] WebSphere V4.0 Handbook. Advanced Edition, Online at http://www.redbooks.ibm.com/redpieces/pdfs/sg246176.pdf, November 2001.

[WSB96] Kenneth M. Walker, Daniel F. Sterne, M. Lee Badger, Michael J. Petkac, David L. Shermann, and Karen A. Oostendrop. Confining Root Programs with Domain and Type Enforcement. In the 6th USENIX Security Symposium, July 1996.

[XB01] Huagang Xie and Philippe Biondi. The Linux Intrusion Detection Project, http://www.lids.org, 2001.

### Appendix: Harmless System Calls

Each of the following system calls either has no security implications or is not supported by the Linux 2.2.14 kernel:

- `afs_syscall`
- `alarm`
- `break`
- `brk`
- `capget`
- `chdir`
- `fchdir`
- `fdatasync`
- `fstat`
- `fstat64`
- `fstatfs`
- `fsync`
- `ftime`
- `get_kernel_syms`
- `getcwd`
- `getdents`
- `getegid`
- `geteuid`
- `getgid`
- `getgroups`
- `getitimer`
- `getpgid`
- `getpgrp`
- `getpid`
- `getppid`
- `getpriority`
- `getresgid`
- `getresuid`
- `getrlimit`
- `getrusage`
- `getsid`
- `gettimeofday`
- `getuid`
- `gtty`
- `lock`
- `lstat`
- `lstat64`
- `mpx`
- `msync`
- `nanosleep`
- `newselect`
- `oldfstat`
- `oldlstat`
- `oldolduname`
- `olduname`
- `poll`
- `prof`
- `query_module`
- `readlink`
- `sched_get_priority_max`
- `sched_get_priority_min`
- `sched_getparam`
- `sched_getscheduler`
- `sched_rr_get_interval`
- `sched_yield`
- `setitimer`
- `sgetmask`
- `stat`
- `stat64`
- `statfs`
- `stty`
- `sysfs`
- `sysinfo`
- `syslog`
- `time`
- `times`
- `uname`
- `ustat`
- `vfork`
- `vhangup`
- `vm86`
- `wait4`

**Table 2: Harmless System Calls**