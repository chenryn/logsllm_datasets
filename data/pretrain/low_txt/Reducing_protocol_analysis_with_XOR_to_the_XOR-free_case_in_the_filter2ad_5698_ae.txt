### 6.2 Experiments

We applied our method to a set of (⊕-linear) protocols. The results, obtained by running our implementation on a 2.4 GHz Intel CoreTM 2 Duo E6700 processor with 2 GB RAM, are depicted in Figure 3. The table lists both the time taken for the reduction and the time ProVerif needed to analyze the output of the reduction.

**Figure 3: Experimental Results**

| Protocol       | Correct | Reduction Time | ProVerif Time |
|----------------|---------|----------------|---------------|
| NSL⊕           | No      | 0.006s         | 0.09s         |
| NSL⊕-fix       | Yes     | 0.16s          | 0.02s         |
| NSL⊕-auth-A    | No      | 0.5s           | 0.03s         |
| NSL⊕-auth-A-fix| Yes     | 0.3s           | 0.03s         |
| NSL⊕-auth-B    | Yes     | 0.17s          | 0.04s         |
| SK3            | Yes     | 0.27s          | 0.04s         |
| RA             | No      | 109s           | 0.05s         |
| RA-fix         | Yes     | 0.7s           | 0.05s         |
| CCA-0          | No      | 1.3s           | 0.15s         |
| CCA-1A         | Yes     | 7.1s           | 0.06s         |
| CCA-1B         | Yes     | 58.0s          | 0.07s         |
| CCA-2B         | Yes     | 1.42s          | 0.14s         |
| CCA-2C         | Yes     | 0.02s          | 0.15s         |
| CCA-2E         | Yes     | 0.07s          | 0.07s         |

**NSL⊕ and Variants:**
- **NSL⊕**: Our running example. This protocol is vulnerable to an attack.
- **NSL⊕-fix**: A fixed version of NSL⊕ where the message \({|(M, N ⊕ B)|}pub(skA)\) is replaced by \({|(M, h((N, M)) ⊕ B)|}pub(skA)\), using a hash function \(h(·)\). We analyze both authentication and secrecy properties for these (⊕-linear) protocols.

**SK3:**
- **SK3**: A key distribution protocol for smart cards that uses the XOR operator [18].

**RA and Variants:**
- **RA**: An (⊕-linear) group protocol for key distribution [6]. There is a known attack on this protocol.
- **RA-fix**: A fixed version of RA where the message \(kA,B ⊕ h((key(A), N))\) sent by the key distribution server to A is replaced by \(kA,B ⊕ h((key(A), (N, B)))\).

**CCA:**
- **CCA (Common Cryptographic Architecture)**: As implemented on the hardware security module IBM 4758, used in ATMs and mainframe computers for PIN verification requests [1]. The only key stored in the security module is the master key \(km\). Other keys are kept outside the module in the form \(\{k\}km ⊕ type\), where \(type \in \{data, imp, exp, pin\}\) denotes the type of the key, modeled as a constant.
- **Commands in CCA API**:
  - Encrypt/decrypt data using data keys.
  - Export/import a key to/from another security module using a key-encryption-key.
  - Key-part-import commands based on a secret sharing scheme, allowing individuals to import their share of the key-encryption-key into a security module.

These commands can be modeled as Horn clauses, but some are not ⊕-linear. A standard unfolding technique for Horn clauses, combined with straightforward simplifications, can be used to obtain an equivalent Horn theory with only ⊕-linear Horn clauses.

**Known Attacks on CCA:**
- **Bond's Attack [5]**: The intruder can obtain PINs for each account number by performing data encryption on the security module.
- **IBM Attack [8]**: The intruder can obtain a PIN derivation key, enabling them to obtain PINs without interacting with the security module. This attack depends on key conjuring [14] and is harder to carry out.
- **New Attack (CCA-0)**: Using our implementation and ProVerif, we found a new attack that achieves the same result as the IBM attack but is more efficient and does not depend on key conjuring.

**IBM Recommendations:**
- **Recommendation 1**: Replace the key-part-import process with a public-key setting. Further access control mechanisms are needed, restricting the kind of commands certain roles may perform. Two cases, denoted CCA-1A and CCA-1B, are analyzed. These cases are ⊕-linear, and our tool can be applied directly.
- **Recommendation 2**: Implement additional access control mechanisms to ensure no single role can mount an attack. We analyzed the same subsets of commands as in [14], denoted CCA-2B, -2C, and -2E. The runtimes obtained in [14] are comparable to ours: 333s for CCA-2B, 58s for -2C, and 0.03s for -2E.

### 7. References

[1] CCA Basic Services Reference and Guide: CCA Basic Services Reference and Guide, 2003. Available at http://www-306.ibm.com/security/cryptocards/pdfs/CCA_Basic_Services_241_Revised_20030918.pdf.

[2] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In Proc. of CSFW-14, pages 82–96. IEEE Comp. Soc. Press, 2001.

[3] Bruno Blanchet. Automatic verification of correspondences for security protocols, 2008. Report arXiv:0802.3444v1. Available at http://arxiv.org/abs/0802.3444v1.

[4] Bruno Blanchet, Martín Abadi, and Cédric Fournet. Automated verification of selected equivalences for security protocols. Journal of Logic and Algebraic Programming, 75(1):3–51, 2008.

[5] Mike Bond. Attacks on cryptoprocessor transaction sets. In Proc of CHES 2001, vol. 2162 of LNCS, pages 220–234. Springer, 2001.

[6] J.A. Bull and D.J. Otway. The authentication protocol. Technical Report DRA/CIS3/PROJ/CORBA/SC/1/CSM/436-04/03, Defence Research Agency, Malvern, UK, 1997.

[7] Y. Chevalier, R. Küsters, M. Rusinowitch, and M. Turuani. An NP Decision Procedure for Protocol Insecurity with XOR. In Proc. of LICS 2003, pages 261–270. IEEE, Comp. Soc. Press, 2003.

[8] J. Clulow. The design and analysis of cryptographic APIs for security devices, 2003. Master’s thesis, University of Natal, Durban.

[9] H. Comon-Lundh and V. Cortier. New Decidability Results for Fragments of First-order Logic and Application to Cryptographic Protocols. In Proc. of RTA 2003, vol. 2706 of LNCS, pages 148–164. Springer, 2003.

[10] H. Comon-Lundh and V. Shmatikov. Intruder deductions, constraint solving and insecurity decision in presence of exclusive or. In Proc. of LICS 2003, pages 271–280. IEEE Comp. Soc. Press, 2003.

[11] Hubert Comon-Lundh and Véronique Cortier. Security properties: two agents are sufficient. Sci. Comput. Program., 50(1-3):51–71, 2004.

[12] Hubert Comon-Lundh and Stéphanie Delaune. The finite variant property: How to get rid of some algebraic properties. In Proc. of RTA 2005, vol. 3467 of LNCS, pages 294–307. Springer, 2005.

[13] V. Cortier, S. Delaune, and G. Steel. A formal theory of key conjuring. In Proc. of CSF 2006, pages 79–93. IEEE Comp. Soc. Press, 2007.

[14] V. Cortier, G. Keighren, and G. Steel. Automatic Analysis of the Security of XOR-Based Key Management Schemes. In Proc. of TACAS 2007, vol. 4424 of LNCS, pages 538–552. Springer, 2007.

[15] R. Küsters and T. Truderung. On the Automatic Analysis of Recursive Security Protocols with XOR. In Proc. of STACS 2007, vol. 4393 of LNCS, pages 646–657. Springer, 2007.

[16] R. Küsters and T. Truderung. Reducing Protocol Analysis with XOR to the XOR-free Case in the Horn Theory Based Approach. Implementation, 2008. Available at http://infsec.uni-trier.de/software/KuestersTruderung-XORPROVERIF-2008.zip.

[17] R. Küsters and T. Truderung. Reducing Protocol Analysis with XOR to the XOR-free Case in the Horn Theory Based Approach. Report arXiv:0808.0634v1, 2008. Available at http://arxiv.org/abs/0808.0634v1.

[18] V. Shoup and A. Rubin. Session key distribution using smart cards. In Proc. of EUROCRYPT 1996, vol. 1070 of LNCS, pages 321–331. Springer, 1996.

[19] Graham Steel. Deduction with XOR constraints in security API modelling. In CADE, vol. 3632 of LNCS, pages 322–336. Springer, 2005.

[20] K.N. Verma, H. Seidl, and T. Schwentick. On the complexity of equational Horn clauses. In Proc. of CADE 2005, vol. 3328 of LNCS, pages 337–352. Springer, 2005.