### Optimized Text

Some of the identified issues can be resolved with straightforward solutions, while others require more substantial effort. For instance, simple fixes include implementing a formal type system and introducing a mechanism to reason about previous actions. However, other challenges, such as ensuring the thread existence of honest agents in protocols based on public-key cryptography, do not appear to have easy solutions and may necessitate more extensive modifications to PCL.

It remains to be determined whether formal proofs in a modified version of PCL can be concise.

### References

1. **A. Armando, D. Basin, Y. Boichut, Y. Chevalier, L. Compagna, L. Cuellar, P. Drielsma, P. Héam, O. Kouchnarenko, J. Mantovani, S. Mödersheim, D. von Oheimb, M. Rusinowitch, J. Santiago, M. Turuani, L. Viganò, and L. Vigneron.** The AVISPA tool for the automated validation of internet security protocols and applications. *Lecture Notes in Computer Science*, vol. 3576, pp. 281–285. Springer-Verlag, 2005.

2. **D. Basin, S. Mödersheim, and L. Viganò.** An on-the-fly model-checker for security protocol analysis. In *ESORICS*, vol. 2808 of *Lecture Notes in Computer Science*, pp. 253–270. Springer-Verlag, 2003.

3. **M. Bellare and P. Rogaway.** Entity authentication and key distribution. In *CRYPTO '93: Proceedings of the 13th annual international cryptology conference on Advances in cryptology*, pp. 232–249. New York, NY, USA, 1994. Springer-Verlag.

4. **B. Blanchet.** An efficient cryptographic protocol verifier based on Prolog rules. In *Proc. 14th IEEE Computer Security Foundations Workshop (CSFW)*, pp. 82–96. IEEE Computer Society, 2001.

5. **E. Bresson, Y. Lakhnech, L. Mazaré, and B. Warinschi.** A generalization of DDH with applications to protocol analysis and computational soundness. In *A. J. Menezes (ed.), Proc. of Crypto '07*, vol. 4622 of *Lecture Notes in Computer Science*, pp. 482–499. Springer-Verlag, August 2007.

6. **M. Burrows, M. Abadi, and R. Needham.** A logic of authentication. *ACM Transactions on Computer Systems*, 8(1):18–36, 1990.

7. **C. Cremers.** Scyther - Semantics and Verification of Security Protocols. PhD thesis, Computer Science Department, Eindhoven University of Technology, November 2006.

8. **C. Cremers, S. Mauw, and E. de Vink.** Injective synchronization: an extension of the authentication hierarchy. *Theoretical Computer Science*, 2006.

9. **A. Datta.** Security Analysis of Network Protocols: Compositional Reasoning and Complexity-theoretic Foundations. PhD thesis, Computer Science Department, Stanford University, September 2005.

10. **A. Datta, A. Derek, J. Mitchell, and D. Pavlovic.** A derivation system for security protocols and its logical formalization. In *Proc. 16th IEEE Computer Security Foundations Workshop (CSFW)*, pp. 109–125. IEEE Computer Society, 2003.

11. **A. Datta, A. Derek, J. Mitchell, and D. Pavlovic.** Abstraction and refinement in protocol derivation. In *Proc. 17th IEEE Computer Security Foundations Workshop (CSFW)*, pp. 30–45, Washington, DC, USA, June 2004. IEEE Computer Society.

12. **A. Datta, A. Derek, J. Mitchell, and D. Pavlovic.** Secure protocol composition. *Electron. Notes Theor. Comput. Sci.*, 83, 2004. Proceedings of 19th Annual Conference on Mathematical Foundations of Programming Semantics.

13. **A. Datta, A. Derek, J. Mitchell, and D. Pavlovic.** A derivation system and compositional logic for security protocols. *Journal of Computer Security*, 13(3):423–482, 2005.

14. **A. Datta, A. Derek, J. Mitchell, and A. Roy.** Protocol Composition Logic (PCL). *Electron. Notes Theor. Comput. Sci.*, 172:311–358, 2007. Computation, Meaning, and Logic: Articles dedicated to Gordon Plotkin. Editors: L. Cardelli, M. Fiore, and G. Winskel.

15. **A. Datta, A. Derek, J. Mitchell, and B. Warinschi.** Computationally sound compositional logic for key exchange protocols. *Proc. 19th IEEE Computer Security Foundations Workshop (CSFW)*, 0:321–334, 2006.

16. **A. Datta, A. Derek, J. C. Mitchell, and D. Pavlovic.** Secure protocol composition (extended abstract). In *FMSE '03: Proceedings of the 2003 ACM workshop on Formal methods in security engineering*, pp. 11–23, New York, NY, USA, 2003. ACM.

17. **A. Derek.** Formal Analysis of Security Protocols: Protocol Composition Logic. PhD thesis, Computer Science Department, Stanford University, December 2006.

18. **N. Durgin, J. Mitchell, and D. Pavlovic.** A compositional logic for protocol correctness. In *Proc. 14th IEEE Computer Security Foundations Workshop (CSFW)*, pp. 241–272, 2001.

19. **N. Durgin, J. Mitchell, and D. Pavlovic.** A compositional logic for proving security properties of protocols. *Journal of Computer Security*, 11:667–721, 2003.

20. **C. He.** Analysis of Security Protocols for Wireless Networks. PhD thesis, Department of Electrical Engineering, Stanford University, December 2005.

21. **C. He, M. Sundararajan, A. Datta, A. Derek, and J. Mitchell.** A modular correctness proof of IEEE 802.11i and TLS. In *CCS '05: Proceedings of the 12th ACM conference on Computer and communications security*, pp. 2–15. ACM Press, 2005.

22. **G. Lowe.** Casper: A compiler for the analysis of security protocols. In *Proc. 10th IEEE Computer Security Foundations Workshop (CSFW)*, pp. 18–30. IEEE Computer Society, 1997.

23. **G. Lowe.** A hierarchy of authentication specifications. In *Proc. 10th IEEE Computer Security Foundations Workshop (CSFW)*, pp. 31–44. IEEE Computer Society, 1997.

24. **A. Roy, A. Datta, A. Derek, J. C. Mitchell, and J.-P. Seifert.** Secrecy analysis in protocol composition logic. In *M. Okada and I. Satoh (eds.), Proceedings of 11th Annual Asian Computing Science Conference, Lecture Notes in Computer Science*, December 2006. Preliminary version.

### Appendix

#### A. Proof of Theorem 1

In this section, we provide a detailed proof of Theorem 1 from Section 3.2 of this paper. The proof is by contradiction: We show that if a proof could be given for the authentication of the CR protocol, it would also be a proof for a similar protocol CR'. Next, we demonstrate that the protocol CR' does not satisfy the authentication formula.

**Lemma 1.** Let φ be any PCL formula, and let Q and Q' be PCL protocols such that the basic sequences of Q are equal to the basic sequences of Q'. Then, a proof of ℓQ φ in PCL, as defined in [9,13,14,17], that does not use any composition rules is also a proof of ℓQ' φ.

**Proof.** By inspecting the axioms and inference rules of the logic, the only references to a protocol are in the honesty rule, through the set of basic sequences of all roles of the protocol, and the composition rules. Hence, a proof for a protocol that does not use the composition rules is a proof for all protocols with the same basic sequences.

Next, we recall the definition of the basic sequences of the CR protocol as defined in [14, page 335]. For the initiator role, we have:

- BS1 ≡ [ new m; send ˆX, ˆY, m; ]X
- BS2 ≡ [ receive ˆY, ˆX, y, s; verify s, (y, m, ˆX), ˆY; r := sign (y, m, ˆY), ˆX; send ˆX, ˆY, r; ]X

For the responder role, we have:

- BS3 ≡ [ receive ˆX, ˆY, x; new n; r := sign (n, x, ˆX), ˆY; send ˆY, ˆX, n, r; ]Y
- BS4 ≡ [ receive ˆX, ˆY, t; verify t, (n, x, ˆY), ˆX; ]Y

**Definition 1.** Let QCR' consist of three roles ρ1, ρ2, ρ3. The first two roles are identical to the two roles of the CR protocol. Let ρ1 be the initiator role of CR: BS1 followed by BS2. Let ρ2 be the responder role of CR: BS3 followed by BS4. Now, let ρ3 be defined as BS2.

Note that as ρ3 consists of BS2 only, m is not generated nor read within this role and must be considered a parameter of this role. Furthermore, as QCR' is defined by the basic sequences of the CR protocol, the protocols QCR and QCR' have the same basic sequences, i.e., BS1, BS2, BS3, BS4.

Consider the weak authentication property φweak-auth of the initiator from [14, page 331]:

- φweak-auth ≡ ∃Y. `Receive(Y, ( ˆX, ˆY, m)) < Send(Y, ( ˆY, ˆX, y, SIG ˆY (y, m, ˆX))`

which should hold in the following context [14, page 331]:

- ℓQCR ⊢ [ InitCR ]X Honest( ˆY ) ∧ ˆY ≠ ˆX ⊃ φweak-auth

Observe that because the strong authentication from [14] implies weak authentication, our results also hold for the strong authentication property.

We refer to the modal formula to be proven as Φweak-auth:

- Φweak-auth ≡ ⊢ [ InitCR ]X Honest( ˆY ) ∧ ˆY ≠ ˆX ⊃ φweak-auth (10)

Informally, this formula states that if the initiator role of the CR protocol (which consists of the basic sequences BS1 and BS2) is executed by an agent ˆX, who tries to communicate with another agent ˆY that is honest, then φweak-auth holds: there exists a thread of ˆY in which a particular send and receive have occurred.

We construct a run Rno-auth of the QCR' protocol, described by Rno-auth = Ra; Rb; Rc; Rd. The run consists of a sequence of four basic sequences BS1, BS3, BS2, BS2. We define this run below by representing the four subsequences in terms of the basic sequence notation. We use this notation to clearly show the relation of the run to the basic sequences, even though it is not the standard PCL syntax for describing runs (one would use syntax from the cord space semantics).

**Definition 2.** Let Rno-auth be a run of CR' that contains the sequences below in order, and no other actions of honest agents. Note that all variables are considered to be instantiated in the description of Rno-auth. In particular, let ˆX, ˆY be honest agents, where ˆX ≠ ˆY, let X, X' be threads executed by ˆX and Y a thread executed by ˆY, and let n, m be nonces.

- Ra(ρ1,BS1) : [ new m; send ˆX, ˆY, m; ]X
- Rb(ρ2,BS3) : [ receive ˆY, ˆX, m; new n; r := sign (n, m, ˆY), ˆX; send ˆX, ˆY, n, r; ]X'
- Rc(ρ3,BS2) : [ receive ˆX, ˆY, n, s; verify s, (n, m, ˆY), ˆX; r := sign (n, m, ˆX), ˆY; send ˆY, ˆX, r; ]Y
- Rd(ρ1,BS2) : [ receive ˆY, ˆX, n, s; verify s, (n, m, ˆX), ˆY; r := sign (n, m, ˆY), ˆX; send ˆX, ˆY, r; ]X (11)

In the run Rno-auth, the following happens. Ra and Rd together form a normal thread of an agent ˆX that executes the role ρ1, which corresponds to the initiator role of the CR protocol. Rb corresponds to a normal execution of the ρ2 role, analogous to the responder role of the CR protocol, executed by ˆX. The difference between CR and CR' is exploited in Rc. Whereas in the context of CR, m is the previously generated nonce of the initiator role, in the context of CR', m is a parameter of the role ρ3. This allows for the instantiation of the parameter with the previously generated nonce m. All messages that are received in Ra, Rb, Rc, Rd can be constructed on the basis of previously sent messages by using tupling and projection cords. Hence, we have that Rno-auth is a run of QCR'.

**Lemma 2.** QCR' ⊭ Φweak-auth.

**Proof.** We first show that the run Rno-auth does not satisfy Φweak-auth. Within Rno-auth, Ra and Rd together form ρ1, which is identical to the initiator role of CR. Both agents ˆX ≠ ˆY are honest. Therefore, the precondition of the implication of Formula (10) is met, and thus the postcondition φweak-auth should also hold. φweak-auth expresses that ˆY has executed a thread of the responder role. This is not the case: The only actions performed by ˆY in Rno-auth are those of the role ρ3, which consists of the basic sequence BS2, which is not part of the responder role of CR. In particular, the weak authentication property requires that ˆY received the term m, which does not happen in Rno-auth. Because the run Rno-auth is a run of QCR', Φweak-auth does not hold for all runs of QCR'.

We are now able to prove Theorem 1 from Section 3.2.

**Proof of Theorem 1.** We prove the theorem by contradiction. Assume there exists a proof of ℓQCR Φweak-auth in PCL, as defined in [9,13,14,17], that does not use the composition rules. Then, by Lemma 1 and Definition 1, this is also a proof of ℓQCR' Φweak-auth. By soundness, we have that ⊨QCR' Φweak-auth. This contradicts Lemma 2.

**Note:** In PCL, this parameter mechanism is used to facilitate sequential composition of protocols.