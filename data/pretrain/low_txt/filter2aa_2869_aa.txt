# Room for Escape: Scribbling Outside the Lines of Template Security

## Authors
- **Alvaro Muñoz** (@pwntester) - Staff Security Researcher
- **Oleksandr Mirosh** (@olekmirosh) - Security Researcher

## 1. Introduction to Content Management Systems (CMS)
- **Definition**: A CMS is an application used to manage web content.
- **Features**:
  - Allows multiple contributors to create, edit, and publish content.
  - Content is typically stored in a database and displayed using templates.
  - Templates often support a subset of programming language capabilities and are usually sandboxed for security.

## 2. Our Research
- **Focus**: .NET and Java-based CMSs
- **Assumption**: We can control the templates.
- **Goal**: Escape template sandboxes.

## 3. Agenda
1. **Introduction**
2. **.NET (SharePoint)**
   - Introduction to SharePoint ASPX pages
   - Safe Mode
   - Breaking out of Safe Mode
   - Demo
3. **Java**
   - Engines and CMSs
   - Generic (object-based) Bypasses
   - Specific Engine Bypasses
4. **Conclusions**

## 4. SharePoint
### Site Pages
- **Also known as**: User-defined pages
- **Role**: Act as "templates" for rendering dynamic content
- **Storage**: Stored in the content database
- **Customization**: Can be customized by regular users
- **Processing**: Processed in safe mode

### Application Pages
- **Also known as**: System pages
- **Role**: Implement server-side logic
- **Storage**: Stored on the file system
- **Modification**: Cannot be changed by regular users
- **Processing**: Processed as regular, unrestricted ASPX files

### SharePoint ASPX Pages
- **Components**:
  - `SPVirtualPathProvider`
  - `SystemPage.aspx` and `UserPage.aspx`
  - `safe mode` and `normal mode`
  - `SPPageParserFilter`
  - `Content DB` and `File System`

### Safe Mode for Site Pages
- **Compilation**: No (CompilationMode = “Never”)
- **Server-Side Code**: No
- **Server-Side Includes from File System**: No
- **Web Controls**: Only from AllowList (SafeControls elements in web.config)
- **ASPX Directives**: Only from AllowList
- **Attributes for most ASPX Directives**: Only from AllowList
- **Other Potentially Dangerous Elements**: Blocked

### SPPageParserFilter Usage
- **Not Used In**:
  - `TemplateControl.ParseControl(content)`
  - `TemplateControl.ParseControl(content, true)`
  - Filter is used at rendering time but not at design time.
- **Verification**:
  - `EditingPageParser.VerifyControlOnSafeList()` method is used for content verification in SharePoint.
  - `ParseControl()` method never causes compilation, so only attacks with dangerous controls or directives are relevant.

## 5. Post-escape Vectors
### Unsafe Web Controls Vector 1
- **Method**: Invocation of public method from arbitrary Type
- **Example**: `ObjectDataSource`

### Unsafe Web Controls Vector 2
- **Method**: Reading arbitrary XML file
- **Examples**:
  - `XmlDataSource` with `DataFile` attribute
  - `Xml` with `DocumentSource` attribute

### ASPX Server-Side Include (SSI) Directive
- **Method**: Reading arbitrary text file

### Arbitrary File Access to Remote Code Execution
- **Method**: Unsafe Deserialization by ViewState
- **Requirements**:
  - Value of `ValidationKey` (found in `MachineKey` section of `web.config` or internal SharePoint properties)
- **Tool**: YSoSerial.Net for payload generation
  - [GitHub Repository](https://github.com/pwntester/ysoserial.net)

## 6. Breaking Out of Safe Mode
- **Target**: Leak sensitive information
- **Search Locations**:
  - Files
  - Logs
  - Database tables
  - Process Memory

### CVE-2020-0974: Unsafe SSI in SharePoint
- **Details**:
  - `EditingPageParser.VerifyControlOnSafeList()` with `blockServerSideIncludes = false` during validation of ASPX markup.
  - `webPartXml` parameter in `RenderWebPartForEdit` method of the Web Part Pages service is processed in Design mode.
- **Exploitation**:
  - **Payload**: Vulnerable WebAPI endpoint (`http:///_vti_bin/WebPartPages.asmx`)
  - **Result**: Content of `web.config` file with `ValidationKey` and arbitrary code execution by unsafe deserialization (ViewState).

### CVE-2020-1147: Unsafe Deserialization in Control from SafeControl List
- **Details**:
  - `Microsoft.SharePoint.Portal.WebControls.ContactLinksSuggestionsMicroView`
  - `XmlSerializer` with controlled Type in `DataSet.ReadXml()`
- **Exploitation**:
  - **ASPX page**: Arbitrary code execution by unsafe deserialization.

### CVE-2020-1069: Abusing Write Access to Nested Properties in SharePoint
- **Details**:
  - Allowed control `WikiContentWebpart` passes user input into `ParseControl()`.
  - `VirtualPath` is defined from `Page.AppRelativeVirtualPath`.
  - `SPPageParserFilter` applies Safe Mode based on this `VirtualPath`.
  - If `Page.AppRelativeVirtualPath` is changed to the path of one of the Application Pages, Safe Mode will be disabled.
- **Exploitation**:
  - **New value for `Page.AppRelativeVirtualPath`**: Delay assignment by Data Binding.
  - **Result**: Arbitrary code execution.

### CVE-2020-1103: Abusing Read Access to Nested Properties in SharePoint
- **Details**:
  - `ControlParameter` binds value of public property from a different Control to `SelectParameter` and supports nested properties.
  - `XmlUrlDataSource` sends values of `SelectParameters` to an attacker-controlled server.
- **Exploitation**:
  - **Payload**: Access `ValidationKey` value from allowed `TemplateContainer` control.
  - **Result**: Value of `ValidationKey` and arbitrary code execution by unsafe deserialization (ViewState).

## 7. Target: Unsafe Object Instantiation
- **What to Search For**:
  - Deserializers
  - JSON unmarshallers

This optimized version aims to provide a clear, professional, and coherent structure for the presentation, making it easier to follow and understand.