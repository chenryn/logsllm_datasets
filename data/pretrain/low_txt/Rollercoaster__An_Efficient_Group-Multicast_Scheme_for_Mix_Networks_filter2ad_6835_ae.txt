### Optimized Text

We have significantly reduced the 75.6-second delay to 12.3 seconds by involving more users in the message dissemination process, rather than relying solely on the original sender. This approach also reduces the asymptotic growth of the expected delay to O(log m). A key component of this improvement is the deterministic GENSCHEDULE algorithm, which enables users to share plans for message distribution using a single nonce.

To address the challenge of unreliable and offline nodes, we have developed a variant of our algorithm that includes mechanisms for acknowledging and retrying message delivery, as well as reassigning tasks from offline to online users. In scenarios without failures, this variant adds a constant message overhead that does not negatively impact the performance. When nodes are offline, it significantly improves both reliability and delays.

Our simulation tool has allowed us to obtain reproducible and inspectable performance measurements. The low cost of simulation has enabled us to efficiently explore the behavior of many system configurations with a large number of users.

In future work, we plan to implement and run collaborative applications and group messaging protocols on a network using Rollercoaster. We also aim to extend Rollercoaster to include features for adding or removing members of a group.

---

### Acknowledgements

We thank Steven J. Murdoch, Killian Davitt, and our anonymous reviewers for their valuable discussions and input. Daniel Hugenroth is supported by a Nokia Bell Labs Scholarship and the Cambridge European Trust. Martin Kleppmann is supported by a Leverhulme Trust Early Career Fellowship, the Isaac Newton Trust, Nokia Bell Labs, and crowdfunding supporters including Ably, Adrià Arcarons, Chet Corcos, Macrometa, Mintter, David Pollak, RelationalAI, SoftwareMill, Talent Formation Network, and Adam Wiggins. Alastair R. Beresford is partially supported by EPSRC [grant number EP/M020320/1].

---

### References

[1] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The second-generation onion router,” tech. rep., Naval Research Lab Washington DC, 2004.

[9] J. Huang, F. Qian, A. Gerber, Z. M. Mao, S. Sen, and O. Spatscheck, “A close examination of performance and power characteristics of 4G LTE networks,” in 10th International Conference on Mobile Systems, Applications, and Services, pp. 225–238, 2012.

[10] D. Chaum, “Untraceable electronic mail, return addresses, and digital pseudonyms,” Communications of the ACM, vol. 24, no. 2, 1981.

[11] G. Danezis and I. Goldberg, “Sphinx: A compact and provably secure mix format,” in 30th IEEE Symposium on Security and Privacy, pp. 269–282, IEEE, 2009.

[12] A. Serjantov, R. Dingledine, and P. Syverson, “From a trickle to a flood: Active attacks on several mix types,” in International Workshop on Information Hiding, pp. 36–52, Springer, 2002.

[13] S. Deering, “Host extensions for IP multicasting,” STD 5, RFC Editor, August 1989. Available at: <http://www.rfc-editor.org/rfc/rfc1112.txt>.

[2] S. J. Murdoch and G. Danezis, “Low-cost traffic analysis of Tor,” in 2005 IEEE Symposium on Security and Privacy, pp. 183–195, IEEE, 2005.

[14] M. Kleppmann and H. Howard, “Byzantine eventual consistency and the fundamental limits of peer-to-peer databases,” arXiv preprint arXiv:2012.00472, 2020.

[3] A. M. Piotrowska, J. Hayes, T. Elahi, S. Meiser, and G. Danezis, “The Loopix anonymity system,” in 26th USENIX Security Symposium, pp. 1199–1216, 2017.

[4] M. Kleppmann, S. A. Kollmann, D. A. Vasile, and A. R. Beresford, “From secure messaging to secure collaboration,” in 26th International Workshop on Security Protocols, pp. 179–185, Springer, 2018.

[5] M. Ahmed-Nacer, C.-L. Ignat, G. Oster, H.-G. Roh, and P. Urso, “Evaluating CRDTs for real-time document editing,” in 11th ACM Symposium on Document Engineering, pp. 103–112, ACM, Sept. 2011.

[6] A. Pfitzmann and M. Hansen, “A terminology for talking about privacy by data minimization: Anonymity, unlinkability, undetectability, unobservability, pseudonymity, and identity management,” Aug. 2010. v0.34, available at: <http://dud.inf.tu-dresden.de/literatur/Anon_Terminology_v0.34.pdf>.

[7] C.-L. Ignat, G. Oster, O. Fox, V. L. Shalin, and F. Charoy, “How do user groups cope with delay in real-time collaborative note taking,” in 14th European Conference on Computer Supported Cooperative Work, pp. 223–242, Springer, Sept. 2015.

[15] F. Beato, K. Halunen, and B. Mennink, “Improving the Sphinx mix network,” in International Conference on Cryptology and Network Security, pp. 681–691, Springer, 2016.

[16] C. Kuhn, M. Beck, and T. Strufe, “Breaking and (partially) fixing provably secure onion routing,” arXiv preprint arXiv:1910.13772, 2019.

[17] D. T. Wagner, A. Rice, and A. R. Beresford, “Device analyzer: Understanding smartphone usage,” in International Conference on Mobile and Ubiquitous Systems: Computing, Networking, and Services, pp. 195–208, Springer, 2013.

[18] D. Chaum, “Security without identification: Transaction systems to make Big Brother obsolete,” Communications of the ACM, vol. 28, no. 10, pp. 1030–1044, 1985.

[19] S. Dolev and R. Ostrobsky, “Xor-trees for efficient anonymous multicast and reception,” ACM Transactions on Information and System Security, vol. 3, no. 2, pp. 63–84, 2000.

[20] D. I. Wolinsky, H. Corrigan-Gibbs, B. Ford, and A. Johnson, “Dissent in numbers: Making strong anonymity scale,” in 10th USENIX Symposium on Operating Systems Design and Implementation, pp. 179–182, 2012.

[8] J. Nielsen, “The 90-9-1 rule for participation inequality in social media and online communities,” 2006. Available at: <https://www.nngroup.com/articles/participation-inequality/>.

[21] G. Danezis and A. Serjantov, “Statistical disclosure or intersection attacks on anonymity systems,” in International Workshop on Information Hiding, pp. 293–308, Springer, 2004.

[22] A. Mislove, G. Oberoi, A. Post, C. Reis, P. Druschel, and D. S. Wallach, “AP3: Cooperative, decentralized anonymous communication,” in 11th ACM SIGOPS European workshop, p. 30, ACM, 2004.

[23] G. Perng, M. K. Reiter, and C. Wang, “M2: Multicasting mixes for efficient and anonymous communication,” in 26th IEEE International Conference on Distributed Computing Systems, pp. 59–59, IEEE, 2006.

[24] D. Lin, M. Sherr, and B. T. Loo, “Scalable and anonymous group communication with MTor,” Proceedings on Privacy Enhancing Technologies, vol. 2016, no. 2, pp. 22–39, 2016.

[25] S. Roos, M. Beck, and T. Strufe, “Anonymous addresses for efficient and resilient routing in F2F overlays,” in 35th Annual IEEE International Conference on Computer Communications, pp. 1–9, IEEE, 2016.

[26] S. Roos, M. Beck, and T. Strufe, “Voute-virtual overlays using tree embeddings,” arXiv preprint arXiv:1601.06119, 2016.

[27] J. Van Den Hooff, D. Lazar, M. Zaharia, and N. Zeldovich, “Vuvuzela: Scalable private messaging resistant to traffic analysis,” in 25th Symposium on Operating Systems Principles, pp. 137–152, 2015.

[28] S. Angel and S. Setty, “Unobservable communication over fully untrusted infrastructure,” in 12th USENIX Symposium on Operating Systems Design and Implementation, pp. 551–569, 2016.

[29] R. Cheng, W. Scott, E. Masserova, I. Zhang, V. Goyal, T. Anderson, A. Krishnamurthy, and B. Parno, “Talek: Private group messaging with hidden access patterns,” arXiv preprint arXiv:2001.08250, 2020.

[30] R. Jansen and N. Hopper, “Shadow: Running Tor in a box for accurate and efficient experimentation,” in 19th Symposium on Network and Distributed System Security, Internet Society, February 2012.

[31] I. B. Guirat, D. Gosain, and C. Diaz, “Mixim: A general purpose simulator for mixnet,” Privacy Enhancing Technologies Symposium – HotPETs Workshop, 2020.

[32] M. Hosseini, D. T. Ahmed, S. Shirmohammadi, and N. D. Georganas, “A survey of application-layer multicast protocols,” IEEE Communications Surveys & Tutorials, vol. 9, no. 3, pp. 58–74, 2007.

[33] A. Popescu, D. Constantinescu, D. Erman, and D. Ilie, “A survey of reliable multicast communication,” in Conference on Next Generation Internet Networks, NGI, pp. 111–118, IEEE, 2007.

[34] C. K. Yeo, B.-S. Lee, and M. H. Er, “A survey of application level multicast techniques,” Computer Communications, vol. 27, no. 15, pp. 1547–1568, 2004.

[35] J. Leitão, J. Pereira, and L. Rodrigues, “Epidemic broadcast trees,” in 26th IEEE International Symposium on Reliable Distributed Systems, SRDS 2007, pp. 301–310, IEEE, Oct. 2007.

[36] J. Leitão, J. Pereira, and L. Rodrigues, “Gossip-based broadcast,” in Handbook of Peer-to-Peer Networking, pp. 831–860, Springer, Oct. 2009.

### A MultiSphinx Construction

In this Appendix, we provide detailed algorithms for constructing and processing both the regular Sphinx messages (A.1) and our MultiSphinx messages (A.2). The regular construction is based on the original Sphinx paper [11] and the proposed improvement using authenticated encryption [15]. For both schemes, we will use three hops \( n_0, n_1, n_2 \) for the mix nodes and a final hop \( n \) for the recipient that extracts the payload from the inner-most encryption (see Figure 10).

A Sphinx header \( M \) consists of a group element \( \alpha \) for deriving shared secrets, authenticated data \( \beta \), and an authentication tag \( \gamma \). In the original Sphinx paper, \( \beta \) is used to store the address of the next hop. For the final hop, the distinguished element \( * \) is used to signal that the payload reached its intended destination. Loopix adds per-hop delays to this routing information.

We assume that all nodes \( n_i \) have access to the public keys of all other nodes without explicitly passing these. We assume the existence of a method `PROCESSHEADER` that takes a header of a Sphinx packet and returns all metadata contained in \( \beta \) (next hop identifier, delay) and the header for the next hop. We assume the existence of a method `COMPUTESECRETS` that takes a list of hops \( n_0, n_1, \ldots \) and outputs a list of shared secrets \( s_0, s_1, \ldots \). We assume the existence of a method `CREATEHEADER` that takes a shared secret \( s_i \), the next hop identifier \( n_{i+1} \), and (optionally) a header \( M_{i+1} \) to wrap. The details of these operations can be found in the Sphinx paper [11, §3.2 and §3.6]. In line with Loopix, the sender chooses a random per-hop delay for each hop and includes it in the authenticated metadata in the header. This happens transparently in the `CREATEHEADER` method.

We assume the existence of an authenticated encryption (AE) scheme as required by the improved Sphinx format [15]. An AE scheme provides an encryption function `AEenc` that takes a secret key \( s \), a message `msg`, and optional metadata `meta` and outputs a ciphertext `ctext` and an authentication tag `auth`. It also provides a decryption function `AEdec` that takes a secret key \( s \), a ciphertext `ctext`, an authentication tag `auth`, and metadata `meta`. It returns the decrypted message if the authentication tag verifies the integrity of the ciphertext and metadata, or \( \perp \) otherwise.

We assume that the AE scheme is based on an encrypt-then-mac regime using a stream cipher \( C \) (e.g., AES-CTR), a message authentication code (MAC) (e.g., HMAC), and a keyed key derivation function (KDF) (e.g., HKDF). Stream ciphers have the property that changing a given bit of the ciphertext/plaintext only changes the bit at the same position in the plaintext/ciphertext after decryption/encryption. Arbitrary changes will lead to an invalid `auth` tag, but we might intentionally ignore this during our constructions and recalculate the `auth` tags later. Since Sphinx uses fresh secret keys for every message and hop, we can leave the nonce for the stream cipher constant. We show our construction of `AEenc` and `AEdec` in Algorithm 3.

**Algorithm 3: The authenticated encryption scheme AE based on stream cipher \( C \), a MAC, and a keyed KDF.**

1. **Procedure AEenc(s, msg, meta):**
   - \( s_{cipher}, s_{mac} \leftarrow \text{KDF}(s, \text{cipher}), \text{KDF}(s, \text{mac}) \)
   - \( ctext \leftarrow C(s_{cipher}) \oplus \text{msg} \)
   - \( auth \leftarrow \text{MAC}(s_{mac}, ctext \parallel \text{meta}) \)
   - Return \( (ctext, auth) \)

2. **Procedure AEdec(s, ctext, auth, meta):**
   - \( s_{cipher}, s_{mac} \leftarrow \text{KDF}(s, \text{cipher}), \text{KDF}(s, \text{mac}) \)
   - If \( \text{MAC}(s_{mac}, ctext \parallel \text{meta}) \neq \text{auth} \):
     - Return \( \perp \)
   - \( \text{msg} \leftarrow C(s_{cipher}) \oplus ctext \)
   - Return \( \text{msg} \)

**A.1 Normal Sphinx (existing solution)**

The algorithms in this section summarize the existing literature [11, 15], but we have adapted the notation to be more concise. Algorithm 4 shows the creation of a regular Sphinx message by the sender. While the original Sphinx papers can create all headers before encrypting the payload, the improved variant with AE requires us to do these operations simultaneously, as the encryption affects the authentication tag \( \gamma \) of this and the following message headers.

**Algorithm 4: Creating a packet to be routed through hops \( n_0, n_1, n_2 \) to node \( n \).**

1. **Procedure CREATE(δ, n0, n1, n2, n):**
   - Assert \( |δ| = \text{MAXMSGLEN} \)
   - \( s_0, s_1, s_2, s_3 \leftarrow \text{COMPUTESECRETS}(n_0, n_1, n_2, n) \)
   - \( M_3 \leftarrow \text{CREATEHEADER}(s_3, *) \)
   - \( δ_3, M_3.γ \leftarrow \text{AEenc}(s_3, δ, M_3.β) \)
   - \( M_2 \leftarrow \text{CREATEHEADER}(s_2, n, M_3) \)
   - \( δ_2, M_2.γ \leftarrow \text{AEenc}(s_2, δ_3, M_2.β) \)
   - \( M_1 \leftarrow \text{CREATEHEADER}(s_1, n_2, M_2) \)
   - \( δ_1, M_1.γ \leftarrow \text{AEenc}(s_1, δ_2, M_1.β) \)
   - \( M_0 \leftarrow \text{CREATEHEADER}(s_0, n_1, M_1) \)
   - \( δ_0, M_0.γ \leftarrow \text{AEenc}(s_0, δ_1, M_0.β) \)
   - Return \( (M_0, δ_0) \)

**Algorithm 5: Processing a received message by a mix node.**

1. Unpack the message into the header and the payload.
2. Derive the tag and compare it against previously seen tags to protect against replay attacks.
3. Decrypt and verify that the authentication tag matches the message and header metadata.
4. Finally, the header is processed to determine the next hop and any additional metadata.

**Figure 10: Schematic of messages (header, payload) for Sphinx and MultiSphinx.**

USENIX Association
30th USENIX Security Symposium    3447