### References

1. R. Canetti. Universally composable security: A new paradigm for cryptographic protocols. In *IEEE Symposium on Foundations of Computer Science*, 2001.

2. D. Champagne and R. B. Lee. Scalable architectural support for trusted software. In *HPCA*, 2010.

3. D. L. Chaum. Untraceable electronic mail, return addresses, and digital pseudonyms. *Communications of the ACM*, 1981.

4. X. Chen, T. Garfinkel, E. Lewis, P. Subrahmanyam, C. Waldspurger, D. Boneh, J. Dwoskin, and D. Ports. Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems. In *ASPLOS*, pages 2–13, 2008.

5. R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: Improved definitions and efficient constructions. In *ACM CCS '06*, 2006.

6. G. Danezis and C. Diaz. A survey of anonymous communication channels. *Technical Report MSR-TR-2008-35, Microsoft Research*, 2008.

7. J. Dean and S. Ghemawat. MapReduce: Simplified data processing on large clusters. In *OSDI*, 2014.

8. J. Demme, R. Martin, A. Waksman, and S. Sethumadhavan. Side-channel vulnerability factor: A metric for measuring information leakage. In *ISCA*, 2012.

9. R. Dingledine. Anonymity bibliography. <http://freehaven.net/anonbib/>

10. C. Gentry. Fully homomorphic encryption using ideal lattices. In *ACM Symposium on Theory of Computing*, May-June 2009.

11. C. Gentry and S. Halevi. A working implementation of fully homomorphic encryption. In *EUROCRYPT*, 2010.

12. O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. *Journal of the ACM*, 1996.

13. M. T. Goodrich and M. Mitzenmacher. Privacy-preserving access of outsourced data via oblivious RAM simulation. In *ICALP*, 2011.

14. J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest we remember: Cold-boot attacks on encryption keys. *Communications of the ACM*, 52(5):91–98, 2009.

15. S. Huang, J. Huang, Y. Liu, L. Yi, and J. Dai. HiBench: A representative and comprehensive Hadoop benchmark suite. In *ICDE Workshops*, 2010.

16. M. Isard, M. Budiu, Y. Y. and Andrew Birrell, and D. Fetterly. Dryad: Distributed data-parallel programs from sequential building blocks. In *Eurosys*, 2007.

17. L. Luu, S. Shinde, P. Saxena, and B. Demsky. A model counter for constraints over unbounded strings. In *PLDI*, page 57, 2014.

18. J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: An execution infrastructure for TCB minimization. In *EuroSys*, 2008.

19. J. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB reduction and attestation. In *IEEE Symposium on Security and Privacy*, pages 143–158, 2010.

20. F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue, and U. R. Savagaonkar. Innovative instructions and software model for isolated execution. In *HASP*, 2013.

21. D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner. The program counter security model: Automatic detection and removal of control-flow side channel attacks. In *Information Security and Cryptology-ICISC 2005*, pages 156–168. Springer, 2006.

22. K. Nayak, X. S. Wang, S. Ioannidis, U. Weinsberg, N. Taft, and E. Shi. GraphSC: Parallel secure computation made easy. In *IEEE Symposium on Security and Privacy*, 2015.

23. D. Jiang, G. Chen, B. C. Ooi, K.-L. Tan, and S. Wu. EPiC: An extensible and scalable system for processing big data. In *VLDB*, 2014.

24. O. Ohrimenko. Data-oblivious algorithms for privacy-preserving access to cloud storage. PhD thesis, Brown University, 2014.

25. J. Katz and Y. Lindell. Introduction to modern cryptography. CRC Press, 2014.

26. T. Kim, M. Peinado, and G. Mainar-Ruiz. StealthMem: System-level protection against cache-based side channel attacks in the cloud. In *USENIX Security*, 2012.

27. M. Klonowski and M. Kutyłowski. Provable anonymity for networks of mixes. In *Information Hiding*, pages 26–38. Springer, 2005.

28. F. Li, B. C. Ooi, M. T. Özsu, and S. Wu. Distributed data management using MapReduce. *ACM Computing Surveys*, 46(6), 2014.

29. Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry. MinBox: A two-way sandbox for x86 native code. In *USENIX ATC*, 2014.

30. C. Liu, M. Hicks, A. Harris, M. Tiwari, M. Maas, and E. Shi. GhostRider: A hardware-software system for memory trace oblivious computation, 2015.

31. C. Liu, M. Hicks, and E. Shi. Memory trace oblivious program execution. In *IEEE CSF*, pages 51–65. IEEE, 2013.

32. C. Liu, Y. Huang, E. Shi, J. Katz, and M. Hicks. Automating efficient RAM-model secure computation. In *Security and Privacy (SP)*, 2014 IEEE Symposium on, pages 623–638. IEEE, 2014.

33. Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and J. M. Hellerstein. Distributed GraphLab: A framework for machine learning and data mining in the cloud. In *VLDB*, 2012.

34. L. Page, S. Brin, R. Motwani, and T. Winograd. The PageRank citation ranking: Bringing order to the web. *Technical report, Stanford InfoLab*, 1999.

35. P. Paillier. Public-key cryptosystems based on composite degree residuosity classes. In *EUROCRYPT*, May 1999.

36. R. A. Popa, F. H. Li, and N. Zeldovich. An ideal-security protocol for order-preserving encoding. In *IEEE Symposium on Security and Privacy*, pages 463–477, 2013.

37. R. A. Popa, C. M. S. Redfield, N. Zeldovich, and H. Balakrishnan. CryptDB: Protecting confidentiality with encrypted query processing. In *SOSP*, 2011.

38. I. Roy, S. T. V. Setty, A. Kilzer, V. Shmatikov, and E. Witchel. Airavat: Security and privacy for MapReduce. In *NSDI*, 2010.

39. F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich. VC3: Trustworthy data analytics in the cloud. *Technical report, Microsoft Research*, 2014.

40. A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. In *SOSP*, pages 335–50, 2007.

41. S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Preventing your faults from telling your secrets: Defenses against pigeonhole attacks. *CoRR*, abs/1506.04832, 2015.

42. S. Shinde, S. Tople, D. Kathayat, and P. Saxena. PodArch: Protecting legacy applications with a purely hardware TCB. *Technical report, National University of Singapore*, 2015.

43. V. Shmatikov and M.-H. Wang. Measuring relationship anonymity in mix networks. In *ACM workshop on Privacy in electronic society*, pages 59–62. ACM, 2006.

44. D. X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In *IEEE Symposium on Security and Privacy*, May 2000.

45. E. Stefanov, M. van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas. Path ORAM: An extremely simple oblivious RAM protocol. In *CCS*, 2013.

46. U. Steinberg and B. Kauer. Nova: A microhypervisor-based secure virtualization architecture. In *Eurosys*, 2010.

47. J. Szefer and R. B. Lee. Architectural support for hypervisor-secure virtualization. In *ASPLOS*, 2012.

48. S. Tople, S. Shinde, Z. Chen, and P. Saxena. AUTO-CRYPT: Enabling homomorphic computation on servers to protect sensitive web content. In *ACM CCS*, pages 1297–1310, 2013.

49. S. Tu, M. F. Kaashoek, S. Madden, and N. Zeldovich. Processing analytical queries over encrypted data. In *VLDB*, 2013.

50. D. Wikström. A universally composable mix-net. In *Theory of Cryptography*. 2004.

51. C. Wilson, H. Ballani, T. Karagiannis, and A. Rowtron. Better never than late: Meeting deadlines in datacenter networks. In *SIGCOMM*, 2011.

52. M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley, M. J. Franklin, S. Shenker, and I. Stoica. Resilient distributed dataset: A fault-tolerant abstraction for in-memory cluster computing. In *NSDI*, 2012.

53. F. Zhang, J. Chen, H. Chen, and B. Zang. CloudVisor: Retrofitting protection of virtual machines in multi-tenant cloud with nested virtualization. In *SOSP*, pages 203–216, 2011.

54. H. Zhang, G. Chen, B. C. Ooi, K.-L. Tan, and M. Zhang. In-memory big data management and processing: A survey. *TKDE*, 27(7):1920–1948, 2015.

55. Z. Zhou, J. Han, Y.-H. Lin, A. Perrig, and V. Gligor. KISS: "Key it Simple and Secure" corporate key management. In *TRUST*, 2013.

### Appendix A: Security Analysis

**Proof (Lemma 1):**

Consider the "ideal mixer" that takes as input a sequence \((x_1, \ldots, x_N)\) where each \(x_i \in [1, N]\), picks a permutation \(p : [1, N] \to [1, N]\) randomly, and then outputs the sequence \((x_{p(1)}, x_{p(2)}, \ldots, x_{p(N)})\). Klonowski et al. [30] investigated the effectiveness of the cascaded network of mixing and showed that \(O(\log N / T)\) steps are sufficient to bring the distribution of the mixed sequence statistically close to the output of the ideal mixer, where \(T\) is the number of items an instance can process in memory. Our proof relies on this result.

Assume that \(\kappa\), the number of steps carried out by the cascaded-mix, is sufficiently large such that the distribution of the mixed sequence is statistically close to the ideal mixer.

Consider an adversary \(S\) that executes the cascaded-mix. Let us construct an adversary \(A\) who simulates \(S\) but only has access to \(\Omega\). To fill in the tuple values not present in \(\Omega\), the simulation simply fills in random tuples. Note that the number of tuples can be derived from \(\Omega\).

Now, suppose that on input \(x_1, \ldots, x_N\), the output of \(A\) and \(S\) can be distinguished by a distinguisher \(D\). We want to show that this contradicts the semantic security of the underlying encryption scheme, by constructing a distinguisher \(\tilde{D}\) who can distinguish multiple ciphertexts from random.

Let \(z = (z_1, z_2, \ldots, z_N)\) be the output of the mixer on input \(x_1, \ldots, x_N\). The distinguisher \(\tilde{D}\) asks the challenger for a sequence of ciphertexts of \(z\). Let \(c_{i, j}\) be the ciphertexts returned by the challenger, where \(c_{i, j}\) is the \(i\)-th ciphertext of \(z_j\). To emulate \(S\), \(\tilde{D}\) needs to feed the simulation with the intermediate data generated by mixT. Let \(y_{i, j}\) be the \(i\)-th intermediate ciphertext in round \(j\).

1. \(\tilde{D}\) simulates the cascaded-mix by randomly picking a permutation for every mixT. Let \(p_j : [1, N] \to [1, N]\) be the overall permutation for round \(j\). Let \(\hat{p}_j\) be the permutation that moves the \(i\)-th ciphertext in the input to its location after \(j\) rounds. That is, \(\hat{p}_j(i) = p_j(\hat{p}_{j-1}(i))\), and \(\hat{p}_0(i) = i\).

   The \(y_{i, j}\)'s are generated as follows:
   
2. Set \(y_{i, j} = c_{\hat{p}_j(i), j}\) for each \(i, j\).

Let \(v\) be the output of \(D\)'s simulation. Note that if \(x_{i, j}\)'s are random ciphertexts, then the distribution of \(v\) is the same as the output distribution of \(A\). On the other hand, if \(x_{i, j}\)'s are ciphertexts of \(z\), then the input to the emulation is statistically close to the input of \(S\), and thus the distribution of \(v\) is statistically close to the output distribution of \(S\).

Since \(D\) can distinguish the output of \(S\) from \(A\)'s, \(\tilde{D}\) can distinguish the ciphertexts of \(z\) from random. \(\blacksquare\)

---

This version of the text is more organized, clear, and professional, with consistent formatting and improved readability.