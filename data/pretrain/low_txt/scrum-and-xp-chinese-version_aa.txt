**免费在线版本**
（非印刷版，仅供在线阅读）

**InfoQ 中文站出品**

本书由 InfoQ 中文站免费提供。如果您是从其他渠道获取的，请注册 InfoQ 中文站以支持作者和出版商，并可免费下载更多 InfoQ 企业软件开发丛书。

**本书主页:**
[硝烟中的 Scrum 和 XP —— 我们如何实施 Scrum](https://www.infoq.cn/book/scrum-and-xp-from-the-trenches)

**作者：** Henrik Kniberg  
**译者：** 李剑  
**审校：** 郑柯

**版权所有 © 2008 C4Media Inc.**

C4Media 是企业软件开发社区 InfoQ.com 的出版商。本书属于 InfoQ 企业软件开发丛书。

**订购与联系：**
如需订购 InfoQ 的图书，请联系 [info@infoq.com]。

**版权说明：**
未经出版者书面许可，不得以任何形式复制或抄袭本书的任何部分，包括但不限于再印刷、存储于可重复使用的系统中，或通过电子、机械、复印和录制等方式传播。

**商标声明：**
本书提及的所有公司产品及商标均为各自公司的财产。读者若需了解具体的商标和注册信息，请直接联系相关公司。

**英文版编辑团队：**
- 责任编辑：Diana Plesa
- 封面设计：Dixie Press
- 美术编辑：Dixie Press

**中文版编辑团队：**
- 翻译：李剑
- 审校：郑柯
- 责任编辑：霍泰稳
- 美术编辑：吴志民

欢迎加入 InfoQ 中文站的内容建设工作，包括原创投稿和翻译等，请联系 [editor@infoq.com]。

**目录**
1. 译者序
2. 致谢
3. 序——Jeff Sutherland
4. 序——Mike Cohn
5. 前言——嘿，Scrum 成了！

**简介**
- 免责声明
- 撰写本书的原因
- Scrum 到底是什么？

**我们怎样编写产品 Backlog**
- 额外的故事字段
- 如何保持产品 Backlog 在业务层面
- 准备 Sprint 计划
- 制定 Sprint 计划
- 为什么产品负责人必须参加
- 为什么不能在质量上让步
- 无休止的 Sprint 计划会议
- Sprint 计划会议日程
- 确定 Sprint 长度
- 确定 Sprint 目标
- 决定 Sprint 包含的故事
- 产品负责人如何影响 Sprint 故事的选择
- 团队如何决定哪些故事放入 Sprint
- 为何使用索引卡
- 定义“完成”
- 使用计划扑克进行时间估算
- 明确故事内容
- 分解故事为更小的故事
- 将故事分解为任务
- 确定每日例会的时间和地点
- 最后界限在哪里
- 技术故事
- Bug 跟踪系统 vs. 产品 Backlog
- Sprint 计划会议终于结束了！

**我们怎样让别人了解我们的 Sprint**
- 编写 Sprint Backlog
- Sprint Backlog 的形式
- 任务板的作用
- 例 1：首次每日 Scrum 之后
- 例 2：几天以后
- 任务板警示标记
- 如何进行跟踪
- 天数估算 vs. 小时估算
- 布置团队房间
- 设计角

**我们怎样进行每日例会**
- 更新任务板
- 处理迟到的成员
- 处理“我不知道今天干什么”的情况

**我们怎样进行 Sprint 演示**
- 为什么所有 Sprint 都应结束于演示
- Sprint 演示检查列表
- 处理无法演示的工作

**我们怎样做 Sprint 回顾**
- 为什么所有团队都应进行回顾
- 组织回顾
- 在团队间分享经验
- 变还是不变

**Sprint 之间的休息时刻**

**我们怎样制定发布计划，处理固定价格合同**
- 定义验收标准
- 对最重要条目进行时间估算
- 估算生产率
- 综合因素生成发布计划
- 调整发布计划
- 结对编程
- 测试驱动开发 (TDD)
- 增量设计
- 代码集体所有权
- 充满信息的工作空间
- 代码标准
- 可持续的开发速度/精力充沛的工作

**我们怎样做测试**
- 取消验收测试阶段的可能性
- 缩短验收测试阶段
- 将测试人员纳入 Scrum 团队以提高质量
- 在每个 Sprint 中减少工作量以提高质量
- 验收测试是否应作为 Sprint 的一部分
- Sprint 周期 vs. 验收测试周期
- 不要过度压榨最慢的一环
- 回到现实

**我们怎样管理多个 Scrum 团队**
- 创建多少个团队
- 引入“团队领导”角色的原因
- 如何分配团队成员
- 是否使用特定团队
- 是否在 Sprint 之间重新组织团队
- 兼职团队成员
- 如何进行 Scrum-of-Scrums
- 交错的每日例会
- 救火团队
- 是否拆分产品 Backlog
- 代码分支
- 多团队回顾

**我们怎样管理地理位置上分布的团队**
- 离岸团队
- 在家工作的团队成员

**Scrum Master 检查列表**
- Sprint 开始阶段
- 每天
- Sprint 结束时

**额外的话**

**推荐阅读**

**有关作者**

**译者序**
孙子兵法有云：“兵无常势，水无常形，能因敌变化而取胜者谓之神。”许多人都向往用兵如神的境界，但往往纸上谈兵，难以举一反三。风清扬曾说：“你将这华山派的三四十招融会贯通，设想如何一气呵成，然后全部忘掉，忘得干干净净，一招也不可留在心中。待会便以什么招数也没有的华山剑法，去跟田伯光对打。”

如果有人说，既然“无招胜有招”是武学的最高境界，那干脆什么招数都不要学，拿把剑乱挥乱舞，处处破绽，也就处处无破绽，便是天下第一了。听到这话的人肯定会笑他太缺心眼。

我在这里不想解释为什么上面那种说法缺心眼，因为只要不是缺心眼的读者就肯定能够理解说他缺心眼的理由。但有句话叫做“不识庐山真面目，只缘身在此山中”。对待离自身尚远的事物时，人们可以把它分析得淋漓尽致；但到了自己身上，就往往成了当局者迷，旁观者清。譬如青春、譬如爱情、譬如敏捷软件开发。

我想，这本书的读者大概都知道，现如今敏捷开发是何等炙手可热的程度，但潮流一起，跟风者势必有之。虽然没法在这篇短短的序中逐一批驳，大家也可以仔细思索一下，在周边是否存在缺心眼的做法。比如，把 bad smells 背下来以后就大谈重构的好处；版本控制、缺陷跟踪、配置管理等一无所有，便一味追求持续集成；单元测试还不会写，就疯狂宣传测试驱动开发……这些都还好，只要没有把敏捷等同于迭代，等同于又敏又捷，又快又爽；这也无所谓，只要没有在实际上对敏捷一无所知、对想要达到的目标不甚了了、对项目中存在的问题视若无睹的情况下宣传敏捷、推行敏捷就可以。但如果前面那些条件都吻合，最后这一点还能不满足么？

其实，敏捷不是说出来的，是干出来的。是为序。

**李剑**
于小女出生 43 天之际

**致谢**
本书初稿仅用了一个周末完成，但那是一个超高强度工作的周末，投入程度高达 150%！

感谢我的妻子 Sophia 和两个孩子 Dave 与 Jenny，她们在我那个周末独自工作时给予了宽容；还要感谢 Sophia 的父母 Eva 和 Jörgen，在我忙碌的时候，他们过来照顾整个家庭。

同时，感谢我在斯德哥尔摩 Crisp 工作的同事们，以及 scrumdevelopment yahoo 讨论组的成员，他们帮助校稿并提出了很多改进意见。

最后，我要深深感谢所有的读者，从你们长期的反馈中我收获颇丰。尤其让我感到特别开心的是，能够通过本书点燃许多人尝试敏捷软件开发的热情！

**序——Jeff Sutherland**
开发团队需要了解一些 Scrum 的基础知识。如何创建产品 Backlog 并对其进行估算？如何将其转化为 Sprint Backlog？如何管理燃尽图（Burndown chart）并计算团队的生产率（velocity）？Henrik 的书可以用作一些基础实践的入门指南，帮助团队从试用 Scrum 中成长，最终成功地实施 Scrum。

当前，良好的 Scrum 执行过程对需要风险投资的团队正变得日益重要。我现在是一个风险投资团队的敏捷教练；为了帮助他们达成目标，我给出的建议是：只给敏捷实践实施情况良好的敏捷公司投资。

团队中的资深合伙人（Senior Partner）向所有待投资企业问同一个问题：你们是否清楚团队的生产率？目前他们都很难做出明确的答复。要想在将来得到投资，开发团队就必须清楚自己的软件生产率。

为什么这一点如此重要呢？如果团队不清楚自己的生产率，那么产品负责人（Product Owner）就无法用可靠的发布日期来创建产品路线图。如果没有可靠的发布日期，公司的产品就可能会失败，投资人的钱就有可能化为乌有！

无论公司规模大小，创办时间长短，或者是否有资金注入，这个问题都是它们所要面对的。在最近在伦敦举办的一个大会上，我们讨论了 Google 内部的 Scrum 实施状况。当时的听众有 135 个人，我问他们中有多少人在使用 Scrum，只有 30 人举手。我又接着问他们是否根据 Nokia 标准来做迭代开发。迭代开发是敏捷宣言的基本原则——在早期频繁交付可工作的软件。Nokia 用了几年时间，对上百个 Scrum 团队的工作进行了回顾，总结出了迭代开发的基本需求：

- 迭代要有固定时长（被称为“时间盒——timebox”），不能超过六个星期。
- 在每一次迭代的结尾，代码都必须经过 QA 的测试，能够正常工作。

使用 Scrum 的 30 个人里面，只有一半人说他们遵守了 Nokia 标准，符合敏捷宣言的首要原则。我又问他们是否遵守了 Nokia 的 Scrum 标准：

- Scrum 团队必须要有产品负责人，而且团队都清楚这个人是谁。
- 团队必须定期举行 Sprint 评审和回顾会议。
- 团队必须有一个 Scrum Master 来确保 Scrum 过程的顺利进行。

只有少数团队完全符合这些标准。由此可见，即使是在大型科技公司中，Scrum 的正确实施仍然是一个挑战。