### 1. Using the Snapshot Functionality from the Android Emulator
One approach is to utilize the snapshot functionality provided by the Android Emulator [18]. This allows the tool to capture a snapshot of the RP (Relying Party) login page after the initial UI exploration. During subsequent tests, the tool can reload this snapshot, which is expected to reduce the time cost and minimize the impact of noise.

### 2. Skipping Interactions Between the IdP App and IdP Server
Another solution is to bypass the interactions between the Identity Provider (IdP) app and the IdP server, such as Steps 2 to 4 in Figure 1. From the perspective of RP developers, they are primarily interested in assessing their own Single Sign-On (SSO) deployments. To achieve this, we can prepare valid data, such as access tokens and user profiles, and configure the proxy in advance. Consequently, when the IdP app sends requests, the proxy will impersonate the real IdP server and respond immediately.

## 7. Related Work

### 7.1. UI Automation for Android App Testing
Many recent projects have focused on automated Android app testing, with the goal of achieving broader coverage. Unlike traditional random exploration methods, such as Monkey [19], these projects employ more systematic strategies. Tools like GUIRipper [2], SwiftHand [12], PUMA [20], and DroidBot [30] crawl the app and dynamically build a finite state machine to represent the app's UI model. For example, if a button appears to be a navigation button but turns out not to be, both algorithms will select it first. After clicking the button, Algorithm I will terminate if no targeted keyword is found on the new page. However, the other algorithm will continue to explore every new button because it uses a depth-first search strategy.

The overall accuracy of UI Explorer is reasonable, with failure cases (19.2%) mainly due to the limitations of the Noise Reducer. Our current design cannot handle some corner cases, such as UI widgets with no identifiable characteristics. Some of these issues can be resolved with one-time human assistance. For this purpose, we developed a tool that enables users to navigate the app to the login page and take snapshots of the emulator via web browsers. MoSSOT then simply reloads this snapshot to reach the login page during the test. Additionally, we plan to apply static analysis on the app (APK) to extract input constraints and solve them to assist the UI exploration.

Moreover, many apps (26.0%) in our sample set could not be launched. For instance, some backend servers are no longer maintained, making the issue unfixable. Other apps refuse to run in the emulator but can be tested with proper setup, as MoSSOT can execute on real devices.

### 7.2. Obstacles in the Learning Phase
According to Table 1, only 27% of the apps could pass the entire testing phases after the UI exploration, primarily due to failures in learning app-specific SSO implementations (Section 4.2.2). We manually analyzed 60 failure cases, which can be categorized into four types, as shown in Table 4.

- **App Error**: Although the tool did not tamper with any messages, two apps crashed frequently. In other cases, the backend RP servers responded with error messages.
- **RP Account Settings**: In this category, the RP accounts required special settings beforehand, such as phone number binding, preventing the tool from completing the entire SSO process.
- **Failure to Extract User Login Status**: MoSSOT relies on the RP authentication response to identify the RP login status (Section 4.3.2). However, MoSSOT may fail to learn this status if the RPs use customized protocols, making it difficult for our tester to capture the message.

### 7.3. Comparison with Previous Work on SSO Testing
Table 5 compares MoSSOT with previous work on SSO testing. MoSSOT is fully automated and targets 550 Android apps, focusing on assessing the usage of the state variable and detecting known and unknown vulnerabilities.

### 7.4. OAuth Security Studies from the Protocol Perspective
RFC specifications [21, 31] discuss the security considerations and threat models for OAuth 2.0, aiming to exclude common pitfalls like XSS, CSRF, and intentional attacks. Hu et al. [22] present the App Impersonation attack. Assuming proper TLS usage, the authorization code flow has been proven to be secure cryptographically [10].

Previous work has used formal methods to assess OAuth security. Bansal et al. [6] modeled different configurations of the OAuth protocol and analyzed them using ProVerif [8], leading to the discovery of Token Redirection Attack and Social CSRF Attack. Similarly, AuthScan [5] performed whitebox code analysis and blackbox fuzzing to extract protocol specifications from real implementations and find seven security flaws. Fett et al. [15] used an expressive FKS model to analyze all four grant flows extensively. These studies improve the security of OAuth 2.0 from a protocol design perspective but do not consider the authentication services on mobile platforms.

### 7.5. Analyses of Mobile OAuth-based SSO Systems
Despite the wide deployment of mobile OAuth-based SSO systems, there are few security analyses. Chen et al. [11] showed how practical OAuth systems may fall into common pitfalls when using OS-provided components improperly. Shehab et al. [38] revealed three vulnerabilities in WebView, affecting OAuth security. Ye et al. [51] used model checking to analyze the OIDC-like protocol implemented by Facebook on the Android platform and discovered unauthorized storage access issues. Wang et al. [46, 47] performed static and dynamic analysis on real-time network messages, detecting several vulnerabilities across Android and iOS platforms. Yang et al. [49] found Profile Vulnerability. Previous work relied on manual vulnerability discovery, which is not scalable. MoSSOT, in contrast, can automatically discover vulnerabilities.

### 7.6. SSO Security Testing Tool
Motivated by the prevalence of vulnerabilities in real-world SSO systems, large-scale security testing has gained increasing attention. Sun et al. [43] built a semi-automatic tool to test specific vulnerabilities in 96 applications. SSOScan [53] investigated five specific attacks on the top 1600 Facebook websites. Shernan et al. [39] analyzed known CSRF attacks on 10,000 websites by checking the existence of state. Li et al. [29] reported the security quality of 103 Google-enabled RP websites. However, these works focus on web applications, where interactions for secure authentication are well-specified. In contrast, we focus on the mobile platform, where such interactions are error-prone and often overlooked.

The most relevant projects to ours are [50] and [54]. [50] uses model-based testing to assess real-world SSO deployments but targets web applications instead of mobile apps. [54] implements prioritized DFS for targeted UI exploration but only works with Facebook SSO login. Our work is more extensible and capable of handling multiple IdPs. Although both our work and [54] use DFS for UI exploration, our work calculates a score for each element based on more attributes and a smarter algorithm (Section 4.1.3) for better accuracy and efficiency. Additionally, our work supports LKS, which is orthogonal to DFS and helps increase the success rate further.

## 8. Conclusion
In this paper, we present MoSSOT, an automated blackbox security testing tool, to systematically test the SSO implementations by RPs/IdPs and their backend servers. We implemented the tool and tested it on 550 RP apps, identifying one previously-unknown vulnerability and a new variant, in addition to four known ones. All of these vulnerabilities can break the authentication of RP apps and lead to privacy leakage for victims.

We have open-sourced MoSSOT at [34] and plan to extend it for other protocols, such as mobile payment protocols, in the long run.

## Acknowledgements
We thank our shepherd Dr. Guangdong Bai and the anonymous reviewers for their valuable comments and suggestions. We also thank Yihui Zeng, Ronghai Yang, Zhuowei Zhong, Guanchen Li, and Chakman Li for their contributions to the development of MoSSOT. This work is supported in part by the ITF of HK (project#ITS/216/15), the CUHK TBF (project#TBF18ENG001), the CUHK PIEF (project#3133043), and the 2018 Facebook/USENIX Internet Defense Prize.

## References
[1] 2017. Culebra. https://github.com/dtmilano/AndroidViewClient/wiki/culebra
[2] Domenico Amalfitano, Anna Rita Fasolino, Porfirio Tramontana, Salvatore De Carmine, and Atif M Memon. 2012. Using GUI ripping for automated testing of Android applications. In ASE12. ACM.
[3] Apkpure. 2017. Apkpure. https://apkpure.com/.
[4] Tanzirul Azim and Iulian Neamtiu. 2013. Targeted and depth-first exploration for systematic testing of android apps. In ACM Sigplan Notices, Vol. 48. ACM.
[5] Guangdong Bai, Jike Lei, Guozhu Meng, Sai Sathyanarayan Venkatraman, Prateek Saxena, Jun Sun, Yang Liu, and Jin Song Dong. 2013. AUTHSCAN: Automatic Extraction of Web Authentication Protocols from Implementations. In NDSS13.
[6] Chetan Bansal, Karthikeyan Bhargavan, and Sergio Maffeis. 2012. Discovering Concrete Attacks on Website Authorization by Formal Analysis. In CSF12.
[7] Ravi Bhoraskar, Seungyeop Han, Jinseong Jeon, Tanzirul Azim, Shuo Chen, Jaeyeon Jung, Suman Nath, Rui Wang, and David Wetherall. 2014. Brahmastra: Driving Apps to Test the Security of Third-Party Components.. In USENIX14.
[8] Bruno Blanchet. 2014. The ProVerif homepage. http://prosecco.gforge.inria.fr/personal/bblanche/proverif/
[9] Nataniel P Borges Jr, Maria GÃ³mez, and Andreas Zeller. 2018. Guiding app testing with mined interaction models. In MOBILESoft18. ACM.
[10] Suresh Chari, Charanjit S. Jutla, and Arnab Roy. 2011. Universally Composable Security Analysis of OAuth v2.0. Cryptology ePrint Archive, Report 2011/526.
[11] Eric Y Chen, Yutong Pei, Shuo Chen, Yuan Tian, Robert Kotcher, and Patrick Tague. 2014. OAuth demystified for mobile application developers. In CCS14.
[12] Wontae Choi, George Necula, and Koushik Sen. 2013. Guided gui testing of android apps with minimal restart and approximate learning. In ACM Sigplan Notices, Vol. 48. ACM.
[13] Feng Dong, Haoyu Wang, Yuanchun Li, Yao Guo, Li Li, Shaodong Zhang, and Guoai Xu. 2017. FrauDroid: An Accurate and Scalable Approach to Automated Mobile Ad Fraud Detection. arXiv preprint arXiv:1709.01213 (2017).
[14] Facebook. 2017. Facebook SSO developer document. https://developers.facebook.com/docs/facebook-login/
[15] Daniel Fett, Ralf KÃ¼sters, and Guido Schmitz. 2016. A Comprehensive Formal Security Analysis of OAuth 2.0. CCS16 (2016).
[16] Genymotion. 2017. Genymotion. https://www.genymotion.com/
[17] Google. 2017. Android webview. http://developer.android.com/reference/android/webkit/WebView.html
[18] Google. 2017. AVD. https://developer.android.com/studio/run/emulator
[19] Google. 2017. Monkey. http://developer.android.com/tools/help/monkey
[20] Shuai Hao, Bin Liu, Suman Nath, William GJ Halfond, and Ramesh Govindan. 2014. PUMA: programmable UI-automation for large-scale dynamic analysis of mobile apps. In MobiSys14. ACM.
[21] Dick Hardt. 2012. The OAuth 2.0 authorization framework.
[22] Pili Hu, Ronghai Yang, Yue Li, and Wing Cheong Lau. 2014. Application impersonation attack.