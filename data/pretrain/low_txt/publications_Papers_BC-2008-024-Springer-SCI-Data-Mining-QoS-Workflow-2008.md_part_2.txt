### 1. Introduction
Reduction rules for sequential, parallel, conditional, loop, and network systems are well-established in the literature [1]. These reduction rules are fundamental, as a study on fifteen major workflow management systems [10] has shown that most systems support these rules. However, additional reduction rules can be developed to address the specific characteristics and features of particular workflow systems.

Our approach to workflow QoS (Quality of Service) estimation, which uses a variation of the SWR (Stochastic Workflow Reduction) algorithm, addresses the third point raised in the introduction. This approach demonstrates that QoS prediction can provide precise metrics (e.g., the workflow instance \( w \) will take 3 days and 8 hours to execute) rather than just indicating whether an instance takes "more" or "less" than \( D \) days to execute.

### 2. Experiments

#### 2.1 Data Set and Methodology
In this section, we describe the data set used for workflow QoS mining, the application of different data mining algorithms, and the selection of the best ones among them. We also discuss the results obtained. While our experiments focus on the loan process (see Figure 4), we have replicated the experiments using a university administration process, with similar conclusions.

#### 2.2 Workflow Scenario
A major bank has adopted a new information system infrastructure, including a workflow management system, to enhance competitiveness and efficiency. One of the services provided by the bank is the loan process depicted in Figure 4. For a detailed explanation of the process, see [6].

#### 2.3 Path Mining
To perform path mining, we need to log information about the execution of workflow instances. Before storing this data, we extended our workflow management log system to include input and output parameters for activities, as described in section 3.1. The log also records the paths followed during the execution of workflow instances.

To apply data mining algorithms, the data from the workflow log must be converted into a suitable format. Each data mining instance consists of six attributes:
- `income`
- `loan_type`
- `loan_amount`
- `loan_years`
- `Name`
- `SSN`

The attributes `income`, `loan_amount`, `loan_years`, and `SSN` are numeric, while `loan_type` and `name` are nominal. Each instance is associated with a class `[path]` indicating the path followed during the execution of a workflow when the parameters were assigned specific values. The final structure of a data mining instance is:
```
income, loan_type, loan_amount, loan_years, Name, SSN, [path]
```
In our scenario, the `[path]` class can take one of six possible alternatives, representing the paths that can be followed during the execution of a loan workflow instance (see Figure 4).

We executed the workflow from Figure 4 and logged 1,000 workflow instance executions. The log was then converted into a data set suitable for machine learning algorithms.

#### 2.4 Data Mining Algorithms
We applied four distinct data mining algorithms to our data set:
- J48 [11]: A symbolic method.
- Naïve Bayes (NB): A probabilistic method.
- SMO [12]: A method successfully applied in text-mining.
- MultiBoost [13]: A method expected to improve performance through meta-level classification.

Since not all activity input/output parameters may be available, we conducted experiments with a variable number of parameters (ranging from 0 to 6). We performed 64 experiments, analyzing a total of 64,000 records.

#### 2.5 Accuracy Analysis
The first set of experiments was conducted using J48, Naïve Bayes, and SMO methods, both with and without the MultiBoost (MB) method. The accuracy of path mining for each experiment is graphically illustrated in Figure 5.

**Figure 5. Accuracy analysis of path mining**

For example, in experiment 12, using two parameters to predict the path, we achieved a prediction accuracy of 87.13% using the J48 algorithm. Table 3 summarizes the average, minimum, and maximum accuracy for each method across all experiments.

**Table 3. Summary results of accuracy analysis of path mining**

| Algorithm | Average Accuracy | Minimum Accuracy | Maximum Accuracy |
|-----------|------------------|------------------|------------------|
| J48       | 75.43%           | 24.55%           | 93.41%           |
| NB        | 78.84%           | 30.84%           | 96.41%           |
| SMO       | 77.79%           | 29.04%           | 93.11%           |
| MB J48    | 79.74%           | 24.55%           | 94.61%           |
| MB NB     | 81.11%           | 30.84%           | 97.31%           |
| MB SMO    | 78.28%           | 29.04%           | 96.11%           |

On average, the Naïve Bayes approach performs better than the other single methods. Increasing the number of parameters improves the accuracy of Naïve Bayes. The worst results were produced by the J48 and SMO algorithms, likely due to overfitting and the nature of the dataset. The MultiBoost approach generally made more accurate predictions, especially in experiment 16, which included the four most informative parameters: `income`, `loan_type`, `loan_amount`, and `loan_years`.

#### 2.6 QoS Activity Model Construction
Once the most probable path is determined, we construct a QoS activity model for each activity in the workflow. This phase is independent of the previous one and can be carried out before path mining.

For the workflow in Figure 4, we constructed 14 QoS activity models. Each model was created using a profiling methodology (described in section 3.2), which determines the Activity Response Time (ART) and Activity Cost (AC). Table 4 illustrates the QoS activity model for the "Check Home Loan" activity.

**Table 4. QoS activity model for the Check Home Loan activity**

| Static QoS Model | Min Value | Avg Value | Max Value |
|------------------|-----------|-----------|-----------|
| Time (min)       | 123       | 154       | 189       |
| Cost (euros)     | 4.80      | 5.15      | 5.70      |

This static QoS activity model was constructed using activity profiling. When a sufficient number of workflows have been executed, the log data is re-computed to generate a dynamic QoS activity model, which provides more accurate values.

#### 2.7 Workflow QoS Estimation
To compute the estimated QoS of a workflow in execution, we use a variation of the Stochastic Workflow Reduction (SWR) algorithm. The SWR algorithm aggregates the QoS activity models of each activity step-by-step, applying reduction rules to transform and shrink the process. This continues until only one activity remains, which contains the QoS metrics for the entire workflow. A graphical simulation of applying the SWR algorithm to our workflow scenario is illustrated in Figure 6.

**Figure 6. SWR algorithm applied to our workflow example**

#### 2.8 QoS Experimental Results
We selected 100 random workflow instances from our log and computed the real QoS (time and cost) for each instance. We also computed the predicted QoS using our method. The results of QoS prediction for the loan process are illustrated in Figures 7 and 8.

**Figure 7. QoS prediction for time**

**Figure 8. QoS prediction for cost**

The results show that our QoS mining method yields estimations very close to the real QoS of the running processes.

### 3. Related Work
Process and workflow mining is addressed in several papers, with a detailed survey provided in [14]. In [3, 4], a Business Process Intelligence (BPI) tool suite that uses data mining algorithms for process analysis and prediction is presented. In [15] and [16], a machine learning component for acquiring and adapting workflow models from observations is described. Agrawal et al. [17] propose an algorithm for modeling business processes from workflow execution logs. Chandrasekaran et al. [2] describe a simulation coupled with a Web Process Design Tool (WPDT) and a QoS model [1] to analyze the QoS of web processes. Research on time management, a subset of QoS, has been more active, with Eder et al. [18] and Pozewaunig et al. [19] extending CMP and PERT frameworks to check time constraints at process build-time.

### 4. Conclusions
QoS management is crucial for organizations and workflow systems. Our novel method achieves high levels of accuracy in predicting the QoS of workflows. We conclude that workflow QoS mining should be a multi-step methodology, including path mining, QoS activity models, and workflow QoS estimation. The MultiBoost (MB) Naïve Bayes approach is the most effective data mining algorithm for workflow QoS prediction.

### References
[1] Cardoso, J., et al. Modeling Quality of Service for workflows and web service processes. Web Semantics: Science, Services and Agents on the World Wide Web Journal, 2004. 1(3): p. 281-308.
[2] Chandrasekaran, S., et al. Service Technologies and their Synergy with Simulation. in Proceedings of the 2002 Winter Simulation Conference (WSC'02). 2002. San Diego, California. p. 606-615.
[3] Grigori, D., et al. Business Process Intelligence. Computers in Industry, 2004. 53: p. 321–343.
[4] Grigori, D., et al. Improving Business Process Quality through Exception Understanding, Prediction, and Prevention. in 27th VLDB Conference. 2001. Roma, Italy.
[5] Cardoso, J. and A. Sheth. Adaptation and Workflow Management Systems. in International Conference WWW/Internet 2005. 2005. Lisbon, Portugal. p. 356-364.
[6] Cardoso, J. Path Mining in Web processes using Profiles, in Encyclopedia of Data Warehousing and Mining, J. Wang, Editor. 2005, Idea Group Inc. p. 896-901.
[7] Cardoso, J. and M. Lenic, Web Process and Workflow Path mining using the multimethod approach. Journal of Business Intelligence and Data Mining (IJBIDM). submitted., 2005.
[8] Musa, J.D. Operational Profiles in Software-Reliability Engineering. IEEE Software, 1993. 10(2): p. 14-32.
[9] Musa, J.D. Software reliability engineering: more reliable software, faster development and testing. 1999, New York: McGraw-Hill.
[10] Aalst, W.M.P.v.d., et al. Workflow patterns homepage. 2002, http://tmitwww.tm.tue.nl/research/patterns.
[11] Weka, Weka. 2004.
[12] Platt, J. Fast training of support vector machines using sequential minimal optimization, in Advances in Kernel Methods - Support Vector Learning, B. Scholkopf, C.J.C. Burges, and A.J. Smola, Editors. 1999, MIT Press: Cambridge, MA. p. 185-208.
[13] Webb, I.G. MultiBoosting: A Technique for Combining Boosting and Wagging. Machine Learning, 2000. 40(2): p. 159-196.
[14] Aalst, W.M.P.v.d., et al. Workflow Mining: A Survey of Issues and Approaches. Data & Knowledge Engineering (Elsevier), 2003. 47(2): p. 237-267.
[15] Herbst, J. and D. Karagiannis. Integrating Machine Learning and Workflow Management to Support Acquisition and Adaption of Workflow Models. in Ninth International Workshop on Database and Expert Systems Applications. 1998. p. 745-752.
[16] Weijters, T. and W.M.P. van der Aalst. Process Mining: Discovering Workflow Models from Event-Based Data. in 13th Belgium-Netherlands Conference on Artificial Intelligence (BNAIC 2001). 2001. Amsterdam, The Netherlands. p. 283-290.
[17] Agrawal, R., D. Gunopulos, and F. Leymann. Mining Process Models from Workflow Logs. in Sixth International Conference on Extending Database Technology. 1998. Valencia, Spain: Springer. p. 469-483.
[18] Eder, J., et al. Time Management in Workflow Systems. in BIS'99 3rd International Conference on Business Information Systems. 1999. Poznan, Poland: Springer Verlag. p. 265-280.
[19] Pozewaunig, H., J. Eder, and W. Liebhart. ePERT: Extending PERT for workflow management systems. in First European Symposium in Advances in Databases and Information Systems (ADBIS). 1997. St. Petersburg, Russia. p. 217-224.