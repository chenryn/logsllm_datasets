### Session Secrets and Key Management

Session secrets never need to leave the secure wrapper. The only keys that remain outside our wrapper are the long-term identity keys and medium-term prekeys. These keys are necessary for session setup, but once the first two messages have been exchanged, even if a bug reveals all these long-term and medium-term keys to an adversary, the messaging keys will remain secure. This defensive design aims to preserve Signal's forward secrecy guarantees, even in the presence of buggy software components. However, it is important to note that this protection is partial and unverified. To fully protect against malicious JavaScript applications, additional defensive measures, such as those proposed in prior work [27], [42], [43], would be required.

### Evaluation

LibSignal-JavaScript comes with a comprehensive browser-based test suite. We ran these tests on our modified LibSignal implementation to ensure that our verified code interoperates correctly with the rest of LibSignal. This demonstrates that our implementation can serve as a drop-in replacement for LibSignal-JavaScript in applications like WhatsApp, Skype, and Signal. The performance of our code is comparable to the unmodified LibSignal: any potential speed improvements from using WebAssembly are offset by the overhead of encoding and decoding data structures between JavaScript and WebAssembly. Additionally, our code must use WebAssembly implementations for cryptographic algorithms like AES-CBC and HMAC-SHA256, even though fast native implementations are available in the WebCrypto API. These native implementations, however, are asynchronous functions that cannot be called from WebAssembly.

Our modified LibSignal serves as a useful proof-of-concept for real-world cryptographic applications deployed today. For new Web applications, a principled approach would be to design the application with clean, WebAssembly-friendly APIs between the JavaScript and verified WebAssembly components. We advocate extending the WebCrypto API to cover more modern cryptographic primitives and provide a synchronous API that can be used from WebAssembly. Mainstream browsers should also use verified crypto code in C or assembly [44]–[48] to implement this API. When verified native crypto is unavailable, applications can fall back to verified WASM crypto libraries like WHACL*.

### References

1. "The LastPass Password Manager." [Online]. Available: https://www.lastpass.com/how-lastpass-works
2. M. Marlinspike and T. Perrin, “The X3DH Key Agreement Protocol,” 2016, https://signal.org/docs/specifications/x3dh/
3. T. Perrin and M. Marlinspike, “The Double Ratchet Algorithm,” 2016, https://signal.org/docs/specifications/doubleratchet/
4. A. Haas, A. Rossberg, D. L. Schuff, B. L. Titzer, M. Holman, D. Gohman, L. Wagner, A. Zakai, and J. Bastien, “Bringing the Web Up to Speed with WebAssembly,” in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2017, pp. 185–200.
5. C. Watt, “Mechanising and Verifying the WebAssembly Specification,” in Proceedings of the 7th ACM SIGPLAN International Conference on Certified Programs and Proofs. ACM, 2018, pp. 53–65.
6. A. Guha, C. Saftoiu, and S. Krishnamurthi, “The Essence of JavaScript,” Springer, in European Conference on Object-Oriented Programming, 2010, pp. 126–150.
7. M. Bodin, A. Charguéraud, D. Filaretti, P. Gardner, S. Maffeis, D. Naudziuniene, A. Schmitt, and G. Smith, “A Trusted Mechanised JavaScript Specification,” in ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2014, pp. 87–100.
8. J. Renner, S. Cauligi, and D. Stefan, “Constant-Time WebAssembly,” 2018, https://cseweb.ucsd.edu/~dstefan/pubs/renner:2018:ct-wasm.pdf
9. J. Protzenko, J.-K. Zinzindohoué, A. Rastogi, T. Ramananandro, P. Wang, S. Zanella-Béguelin, A. Delignat-Lavaud, C. Hritcu, K. Bhargavan, C. Fournet, and N. Swamy, “Verified Low-Level Programming Embedded in F*,” Proceedings of the ACM on Programming Languages, vol. 1, no. ICFP, pp. 17:1–17:29, Aug. 2017.
10. N. Swamy, C. Hricu, C. Keller, A. Rastogi, A. Delignat-Lavaud, S. Forest, K. Bhargavan, C. Fournet, P.-Y. Strub, M. Kohlweiss, J.-K. Zinzindohoue, and S. Zanella-Béguelin, “Dependent Types and Multi-Monadic Effects in F*,” in ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2016, pp. 256–270.
11. “Web Cryptography API.” [Online]. Available: https://www.w3.org/TR/WebCryptoAPI
12. B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, A. Pironti, P. Strub, and J. K. Zinzindohoue, “A Messy State of the Union: Taming the Composite State Machines of TLS,” in IEEE Symposium on Security and Privacy (Oakland), 2015, pp. 535–552.
13. K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub, “Implementing TLS with Verified Cryptographic Security,” in IEEE Symposium on Security and Privacy (Oakland), 2013, pp. 445–459.
14. A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Protzenko, A. Rastogi, N. Swamy, S. Z. Béguelin, K. Bhargavan, J. Pan, and J. K. Zinzindohoue, “Implementing and Proving the TLS 1.3 Record Layer,” in IEEE Symposium on Security and Privacy (Oakland), 2017, pp. 463–482.
15. K. Bhargavan, B. Blanchet, and N. Kobeissi, “Verified Models and Reference Implementations for the TLS 1.3 Standard Candidate,” in IEEE Symposium on Security and Privacy (Oakland), 2017, pp. 483–502.
16. N. Kobeissi, K. Bhargavan, and B. Blanchet, “Automated Verification for Secure Messaging Protocols and Their Implementations: A Symbolic and Computational Approach,” in 2nd IEEE European Symposium on Security and Privacy (EuroSP), 2017, pp. 435–450.
17. B. Blanchet, “Modeling and Verifying Security Protocols with the Applied Pi Calculus and ProVerif,” Foundations and Trends in Privacy and Security, vol. 1, no. 1-2, pp. 1–135, Oct. 2016.
18. J.-K. Zinzindohoué, K. Bhargavan, J. Protzenko, and B. Beurdouche, “HACL*: A Verified Modern Cryptographic Library,” in ACM SIGSAC Conference on Computer and Communications Security (CCS), ser. CCS '17, 2017, pp. 1789–1806.
19. D. J. Bernstein, “Curve25519: New Diffie-Hellman Speed Records,” in Public Key Cryptography-PKC 2006. Springer, 2006, pp. 207–228.
20. D. J. Bernstein, B. Van Gastel, W. Janssen, T. Lange, P. Schwabe, and S. Smetsers, “TweetNaCl: A Crypto Library in 100 Tweets,” in International Conference on Cryptology and Information Security in Latin America (LATINCRYPT). Springer, 2014, pp. 64–83.
21. D. Benjamin, “Poly1305-x86.pl Produces Incorrect Output,” https://mta.openssl.org/pipermail/openssl-dev/2016-March/006161, 2016.
22. H. Böck, “Wrong Results with Poly1305 Functions,” https://mta.openssl.org/pipermail/openssl-dev/2016-March/006413, 2016.
23. A. Zakai, “Emscripten: An LLVM-to-JavaScript Compiler,” in ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion (OOPSLA), 2011, pp. 301–312.
24. A. Taly, Ú. Erlingsson, J. C. Mitchell, M. S. Miller, and J. Nagra, “Automated Analysis of Security-Critical JavaScript APIs,” in IEEE Symposium on Security and Privacy (Oakland), 2011, pp. 363–378.
25. K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis, “Defensive JavaScript,” in Foundations of Security Analysis and Design VII. Springer, 2014, pp. 88–123.
26. C. Fournet, N. Swamy, J. Chen, P.-E. Dagand, P.-Y. Strub, and B. Livshits, “Fully Abstract Compilation to JavaScript,” in ACM SIGPLAN Notices, vol. 48, no. 1. ACM, 2013, pp. 371–384.
27. N. Swamy, C. Fournet, A. Rastogi, K. Bhargavan, J. Chen, P. Strub, and G. M. Bierman, “Gradual Typing Embedded Securely in JavaScript,” in ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), 2014, pp. 425–438.
28. D. Ahman, C. Hritcu, K. Maillard, G. Martínez, G. Plotkin, J. Protzenko, A. Rastogi, and N. Swamy, “Dijkstra Monads for Free,” in ACM SIGPLAN Notices, vol. 52, no. 1. ACM, 2017, pp. 515–529.
29. X. Leroy, “Formal Verification of a Realistic Compiler,” Communications of the ACM, vol. 52, no. 7, pp. 107–115, 2009.
30. D. J. Bernstein, T. Lange, and P. Schwabe, “The Security Impact of a New Cryptographic Library,” in International Conference on Cryptology and Information Security in Latin America (LATINCRYPT). Springer, 2012, pp. 159–176.
31. “Can I Use: WebAssembly.” [Online]. Available: https://caniuse.com/#feat=wasm
32. A. Jangda, B. Powers, A. Guha, and E. Berger, “Mind the Gap: Analyzing the Performance of WebAssembly vs. Native Code,” 2019.
33. J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, and M. Emmi, “Verifying Constant-Time Implementations,” in USENIX Security Symposium, 2016, pp. 53–70.
34. G. Barthe, B. Grégoire, and V. Laporte, “Secure Compilation of Side-Channel Countermeasures: The Case of Cryptographic ‘Constant-Time’,” in IEEE Computer Security Foundations Symposium (CSF), 2018, pp. 328–343.
35. C. Watt, J. Renner, N. Popescu, S. Cauligi, and D. Stefan, “CT-WASM: Type-Driven Secure Cryptography for the Web Ecosystem,” arXiv preprint arXiv:1808.01348, 2018.
36. K. Cohn-Gordon, C. J. F. Cremers, and L. Garratt, “On Post-Compromise Security,” in IEEE 29th Computer Security Foundations Symposium (CSF), 2016, pp. 164–178.
37. K. Cohn-Gordon, C. J. F. Cremers, B. Dowling, L. Garratt, and D. Stebila, “A Formal Security Analysis of the Signal Messaging Protocol,” in IEEE European Symposium on Security and Privacy (EuroS&P), 2017, pp. 451–466.
38. M. Bellare, A. C. Singh, J. Jaeger, M. Nyayapati, and I. Stepanovs, “Ratcheted Encryption and Key Exchange: The Security of Messaging,” in CRYPTO, 2017, pp. 619–650.
39. J. Jaeger and I. Stepanovs, “Optimal Channel Security Against Fine-Grained State Compromise: The Safety of Messaging,” in CRYPTO, Cham, 2018, pp. 33–62.
40. B. Poettering and P. Rösler, “Towards Bidirectional Ratcheted Key Exchange,” in CRYPTO, Cham, 2018, pp. 3–32.
41. T. Perrin, “The XEdDSA and VXEdDSA Signature Schemes,” 2017, https://signal.org/docs/specifications/xeddsa/
42. K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis, “Language-Based Defenses Against Untrusted Browser Origins,” in Proceedings of the 22nd USENIX Security Symposium, 2013, pp. 653–670.
43. ——, Defensive JavaScript, 2014, pp. 88–123.
44. L. Beringer, A. Petcher, K. Q. Ye, and A. W. Appel, “Verified Correctness and Security of OpenSSL HMAC,” in USENIX Security Symposium, 2015, pp. 207–221.
45. J. B. Almeida, M. Barbosa, G. Barthe, A. Blot, B. Grégoire, V. Laporte, T. Oliveira, H. Pacheco, B. Schmidt, and P. Strub, “Jasmin: High-Assurance and High-Speed Cryptography,” in ACM SIGSAC Conference on Computer and Communications Security (CCS), 2017, pp. 1807–1823.
46. A. W. Appel, “Verification of a Cryptographic Primitive: SHA-256,” ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 37, no. 2, p. 7, 2015.
47. B. Bond, C. Hawblitzel, M. Kapritsos, K. R. M. Leino, J. R. Lorch, B. Parno, A. Rane, S. Setty, and L. Thompson, “Vale: Verifying High-Performance Cryptographic Assembly Code,” in Proceedings of the USENIX Security Symposium, Aug. 2017.
48. A. Tomb, “Automated Verification of Real-World Cryptographic Implementations,” IEEE Security and Privacy, vol. 14, no. 6, pp. 26–33, 2016.

### Appendix: The Signal Cryptographic Protocol

#### Initiator (I) and Responder (R)

**Prior Knowledge:**
- **Initiator (I):** \((i, g^i)\)
- **Responder (R):** \((r, g^r), (s, g^s)[, (o, g^o)]\)

**Initiate:**
- \( \text{Initiate}(i, g^r, g^s[, g^o]) \rightarrow (rk_0) \):
  - Generate \((e, g^e)\)
  - \( dh_0 = 0xFF \mid g^s_i \mid g^r_e \mid g^{se} [\mid g^{oe}] \)
  - \( rk_0 = \text{HKDF}(dh_0, 0x00^{32}, \text{"WhisperText"}) \)

**SendRatchet:**
- \( \text{SendRatchet}(rk_0, g^s) \rightarrow (rk_1, cki_0, x_0) \):
  - Generate \((x_0, g^{x_0})\)
  - \( rk_1 \mid cki_0 = \text{HKDF}(g^s_{x_0}, rk_0, \text{"WhisperRatchet"}) \)
  - \( (ek_0, iv_0, mk_0) = \text{HKDF}(k_0, 0x00^{32}, \text{"WhisperMessageKeys"}) \)
  - \( cki_1 = \text{HMAC}(cki_0, 0x01) \)
  - \( k_0 = \text{HMAC}(cki_0, 0x00) \)

**Encrypt:**
- \( \text{Encrypt}(g^i, g^r, g^{x_0}, cki_0, m_0) \rightarrow (cki_1, c_0, t_0) \):
  - \( c_0 = \text{FORMAT}(g^{x_0}, 0, 0, \text{AES-CBC}(ek_0, iv_0, m_0)) \)
  - \( t_0 = \text{HMAC}(mk_0, g^r \mid g^i \mid 0x33 \mid c_0) \)
  - \( \text{MSG}_0(g^i, g^e, c_0, t_0) \)

**Respond:**
- \( \text{Respond}(r, s, o, g^i, g^e) \rightarrow (rk_0) \):
  - Recompute \( dh_0, rk_0 \) (similarly to I)

**ReceiveRatchet:**
- \( \text{ReceiveRatchet}(rk_0, s, g^{x_0}) \rightarrow (rk_1, cki_0) \):
  - Recompute \( rk_1, cki_0 \) (similarly to I)

**Decrypt:**
- \( \text{Decrypt}(cki_0, c_0, t_0) \rightarrow (m_0, cki_1) \):
  - Recompute \( cki_1, k_0 \) (similarly to I)
  - Verify MAC and decrypt \((c_0, t_0)\) to get \( m_0 \)

**SendRatchet:**
- \( \text{SendRatchet}(rk_1, g^{x_0}) \rightarrow (rk_2, ckr_0, y_0) \)

**Encrypt:**
- \( \text{Encrypt}(g^r, g^i, g^{y_0}, ckr_0, m_1) \rightarrow (ckr_1, c_1, t_1) \)
- \( \text{MSG}(c_1, t_1) \)

**ReceiveRatchet:**
- \( \text{ReceiveRatchet}(rk_1, x_0, g^{y_0}) \rightarrow (rk_2, ckr_0) \)

**Decrypt:**
- \( \text{Decrypt}(ckr_0, c_1, t_1) \rightarrow (m_1, ckr_1) \)

**Session State:**
- **Initiator (I):** \(\{ \text{root key}: rk_2, \text{send chain}: (cki_1, x_0), \text{recv chain}: (ckr_1, g^{y_0}) \}\)
- **Responder (R):** \(\{ \text{root key}: rk_2, \text{send chain}: (ckr_1, y_0), \text{recv chain}: (cki_1, g^{x_0}) \}\)

### Figure 15: Signal Protocol (First Two Messages)

These messages set up a bidirectional, mutually authenticated channel between the initiator (I) and the responder (R) using a series of Diffie-Hellman operations. Each message carries a payload. This protocol is sometimes called X3DH. The figure does not show the (out-of-band) prekey message in which the responder (R) delivers \((g^s, g^o)\) to the initiator (I) via the server, and the initiator (I) verifies the responder’s ED25519 signature on \(g^s\).

### Continued Session

**Session State:**
- **Initiator (I):** \(\{ \text{root key}: rk_2, \text{send chain}: (cki_1, x_0), \text{recv chain}: (ckr_1, g^{y_0}) \}\)
- **Responder (R):** \(\{ \text{root key}: rk_2, \text{send chain}: (ckr_1, y_0), \text{recv chain}: (cki_1, g^{x_0}) \}\)

**SendRatchet:**
- \( \text{SendRatchet}(rk_2, g^{y_0}) \rightarrow (rk_3, cki_2, x_1) \)

**Encrypt:**
- \( \text{Encrypt}(g^i, g^r, g^{x_1}, cki_2, m_2) \rightarrow (cki_3, c_2, t_2) \)
- \( \text{Encrypt}(g^i, g^r, g^{x_1}, cki_3, m_3) \rightarrow (cki_4, c_3, t_3) \)
- \( \text{Encrypt}(g^i, g^r, g^{x_1}, cki_4, m_4) \rightarrow (cki_5, c_4, t_4) \)
- \( \text{MSG}(c_2, t_2) \)
- \( \text{MSG}(c_3, t_3) \)
- \( \text{MSG}(c_4, t_4) \)

**ReceiveRatchet:**
- \( \text{ReceiveRatchet}(rk_2, y_0, g^{x_1}) \rightarrow (rk_3, cki_2) \)

**Decrypt:**
- \( \text{Decrypt}(cki_2, c_2, t_2) \rightarrow (m_2, cki_3) \)
- \( \text{Decrypt}(cki_3, c_3, t_3) \rightarrow (m_3, cki_4) \)
- \( \text{Decrypt}(cki_4, c_4, t_4) \rightarrow (m_4, cki_5) \)

**Session State:**
- **Initiator (I):** \(\{ \text{root key}: rk_3, \text{send chain}: (cki_5, x_1), \text{recv chain}: (ckr_1, g^{y_0}) \}\)
- **Responder (R):** \(\{ \text{root key}: rk_3, \text{send chain}: (ckr_1, y_0), \text{recv chain}: (cki_5, g^{x_1}) \}\)

This continues the ratcheting process, ensuring that each message is encrypted with a new key, providing forward secrecy.