### 2. The Reference Monitor and Access Control

The reference monitor retrieves the security labels of the subject (s) and object (o), which are recorded by the Security Bus (SB) when the processes are created. It then queries the access control policies to determine the allowed access permissions, issuing a token that specifies these permissions.

### 3. Token Verification Before Method Invocation

Before invoking any `send` or `recv` methods, the token is checked to ensure the method can be activated. If the token does not permit the action, an access control exception is generated.

### 6.3 Performance Results

We measured the communication and access control overhead between two processes in the same host OS (without isolation enforced) and in two different User-Mode Linux (UML) instances isolated with a Virtual Machine Monitor (VMM) in the host OS. For each scenario, we measured the average overhead with and without access control between the subject and object processes. We specifically measured the time for the access control decision check and the actual communication time.

Since extra performance overhead is introduced by access requests from the subject process and the decision-making by the reference monitor, both allowing and denying access result in the same performance overhead. Therefore, in our performance study, an access is always allowed when the access control decision is checked. Table 1 shows the average values of 50 measurements. Given that the communication in our prototype is through simple query-and-response messages between processes, the overhead introduced by access control enforcement is comparable to the communication overhead.

While the overhead significantly increases from the control within the same OS to that between UMLs in the same host OS, the access control enforcement overhead remains less than 2.0 ms (less than one-third of the total overhead), which is acceptable for most applications.

**Table 1: Access Control and Communication Overhead**

| Scenario             | Access Control (ms) | Communication (ms) | Total (ms) |
|----------------------|---------------------|--------------------|------------|
| No Isolation         | -                   | 0.372              | 0.372      |
| No Control           | 0.465               | 0.369              | 0.834      |
| Isolation with VMM   | -                   | 4.484              | 4.484      |
| No Control           | 1.926               | 4.551              | 6.477      |

### Strategies to Reduce Access Control Overhead

Strategies can be employed to further reduce the access control overhead. For example, the reference monitor can cache a finite number of tokens it has issued. If the security labels of the communicating parties in a token have not been updated since the last access, the token can be reused without querying the policy decision point (the policy file in our prototype). This is particularly useful for real applications with complex access control policies and in distributed computing environments.

### 7. Related Work

Considerable research has been conducted to provide application-level security based on Trusted Computing (TC) technologies. In [25], a security kernel is used beyond hardware to provide separated runtime space for the legacy operating system and "secure applications" (e.g., Digital Rights Management (DRM) applications). However, this architecture does not support communications between legacy applications and secure applications, as it is designed for multilateral security policies, such as platform owner’s security and DRM policies. Similarly, a language-based virtual machine is proposed in [16] to provide trusted services, but it is limited to applications developed with a Java-like programming language and does not support communications between general processes and processes in a virtual machine.

So far, only a few researchers have considered the simultaneous application-level security and flexible communication requirements. Besides those mentioned in Section 1, Terra [15] and sHype (secure Hypervisor) [24] use a Virtual Machine Monitor (VMM) as the trusted layer, supporting multiple legacy operating systems on a single platform. Access control is enforced in the VMM layer for resource sharing between upper VMs. The main difference from our approach is that our security enforcement is performed in a middle layer, above the main OS and below the applications. This allows our approach to provide finer-grained security services between applications by integrating application context information for access control.

Another line of work focuses on securing operating systems, such as Security-enhanced Linux (SELinux) [19], TrustedBSD [5], and Linux Security Modules (LSM) [29]. In these systems, the kernel is extended to include authorization modules and enforce access control policies. For example, in SELinux, security classes are defined for objects such as files, links, and processes, and accesses to objects from subjects are controlled by policies. Due to the complexity and size of a general-purpose OS, purely OS-based security enforcement cannot provide high-assurance security services to applications, as demonstrated by the increasing number of kernel-level rootkits in commodity OSs. Our architecture differs in that the proposed trusted component (SB) is in the middle layer between the OS kernel and user-space processes, making it transparent to existing OS and applications. Furthermore, by leveraging trusted hardware, our architecture provides high assurance for the enforcement of policies.

Among these schemes, BIND [27] and KernelSec [23] are closest to ours. Although BIND [27] also uses a hash chain for integrity checks of a process and its data, our approach is significantly different. First, with SB, both the hash values of the input/output and the process binary code are included in the signature sent to the downstream process, ensuring the integrity and authenticity of the input. Second, the integrity verification in our architecture is performed by SB on a platform, making this function transparent to applications. In contrast, BIND performs integrity measurements and verifications based on critical sections of a process, which are called by individual applications, making the security functions non-transparent.

Similar to our approach, KernelSec [23] supports general security policies such as Mandatory Access Control (MAC) and information flow control for applications. However, as it is implemented at the OS kernel level without a root of trust, KernelSec cannot provide high assurance of security enforcement. On the other hand, SB supports more flexible application- and organization-specific access control policies with high assurance.

### 8. Conclusions

In this paper, we propose a novel architecture for trusted computing. A trusted component called SecureBus (SB) is located between the main OS and applications to provide strong memory space isolation and secure communication for user applications. SB effectively preserves application integrity by attesting the integrity and authenticity of processes and data, and enforcing flexible mandatory access control policies for information flow between applications, both of which are required to defend against software-based attacks. The major advantage of our architecture is that SB is transparent to both the underlying OS and applications, and can provide data authentication and flexible access control between processes simultaneously. Additionally, our architecture enables the separation of security mechanisms from functionality in the design and development of systems and applications, which is convenient for legacy applications and OSs. We have implemented a prototype system to study its feasibility and the access control performance. The experimental results show that SB is effective.

In this work, we have examined the application of SB through the Chinese Wall policy implemented using a lattice of security labels. The architecture is applicable to a much wider range of policies, which will be studied in future work.

### 9. Acknowledgements

We would like to thank the anonymous reviewers for their helpful comments. This work is partially supported by NSF grants CNS-0509061 and CNS-0621631, and by a grant from Intel.

### 10. References

[1] LaGrande Technology Preliminary Architecture Specification, http://www.intel.com/technology/security/downloads/PRELIM-LT-SPEC D52212.htm.
[2] SETI@Home, http://setiathome.ssl.berkeley.edu/.
[3] TCG Specification Architecture Overview, https://www.trustedcomputinggroup.org.
[4] Universal TUN/TAP driver, http://vtun.sourceforge.net/tun/.
[5] TrustedBSD: Adding trusted operating system features to FreeBSD. In Proceedings of the FREENIX Track: USENIX Annual Technical Conference, pages 15–28, Boston, MA, USA, June 28 2001.
[6] AMD platform for trustworthy computing. Microsoft WinHEC, http://www.microsoft.com/whdc/winhec/pres03.mspx, 2003.
[7] Technical introduction to next-generation secure computing base (NGSCB). Microsoft WinHEC, 2003.
[8] A. Baliga, L. Iftode, and X. Chen. Paladin: Automated detection and containment of rootkit attacks. Technical Report DCS-TR-593, Rutgers University, Department of Computer Science, 2006.
[9] E. Bertino, B. Catania, E. Ferrari, and P. Perlasca. A logical framework for reasoning about access control models. ACM Transaction on Information System Security, 6(1):71–127, 2003.
[10] D. Brewer and M. Nash. The Chinese Wall security policy. In Proceedings of the IEEE Symposium On Research in Security and Privacy, pages 206–214, Oakland, California, 1988.
[11] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Ponder policy specification language. In Proceedings of the Workshop on Policies for Distributed Systems and Networks, 2001.
[12] Department of Defense National Computer Security Center. Trusted Database Interpretation of the Trusted Computer Systems Evaluation Criteria, April 1991. NCSC-TG-021.
[13] Jeff Dike. A user-mode port of the Linux kernel. In Proceedings of the 2000 Linux Showcase and Conference, October 2000.
[14] I. Foster and C. Kesselman. Globus: A metacomputing infrastructure toolkit. International Journal of Supercomputer Applications, 11(2), 1997.
[15] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proceedings of the 19th ACM Symposium on Operating Systems Principles, pages 193–206, Bolton Landing, New York, USA, October 19-22, 2003.
[16] V. Haldar, D. Chandra, and M. Franz. Semantic remote attestation - a virtual machine directed approach to trusted computing. In Proceedings of the Third Virtual Machine Research and Technology Symposium, pages 29–41, San Jose, CA, USA, May 6-7, 2004. USENIX.
[17] S. Jajodia, P. Samarati, and V. S. Subrahmanian. A logical language for expressing authorizations. In Proceedings of the IEEE Symposium On Research in Security and Privacy, pages 31–42, Oakland, CA, USA, 1997.
[18] J. F. Levine, J. B. Grizzard, and H. L. Owen. Detecting and categorizing kernel-level rootkits to aid future detection. IEEE Security & Privacy, 4(1):24–32, Jan.-Feb. 2006.
[19] P. Loscocco and S. Smalley. Integrating flexible support for security policies into the Linux operating system. In Proceedings of USENIX Annual Technical Conference, pages 29–42, June 25-30, 2001.
[20] S. Muir, L. Peterson, M. Fiuczynski, J. Cappos, and J. Hartman. Proper: Privileged operations in a virtualized system environment. In Proceedings of Usenix Annual Technical Conference, 2005.
[21] OASIS XACML TC. Core Specification: eXtensible Access Control Markup Language (XACML), 2005.
[22] R. Oppliger and R. Rytz. Does trusted computing remedy computer security problems? IEEE Security & Privacy, 3(2):16–19, 2005.
[23] M. Radhakrishnan and J. A. Solworth. Application support in the operating system kernel. In Proceedings of ACM Symposium on InformAtion, Computer and Communications Security, 2006.
[24] R. Sailer, T. Jaeger, E. Valdez, R. Perez, S. Berger, J. L. Griffin, and L. van Doorn. Building a MAC-based security architecture for the Xen open-source hypervisor. Technical report, IBM Research Report RC23629, 2005.
[25] A. Sadeghi and C. Stuble. Taming trusted platforms by operating system design. In Proceedings of the 4th International Workshop for Information Security Applications, LNCS 2908, pages 286–302, Berlin, Germany, August 2003.
[26] R. Sandhu. Lattice-based access control models. IEEE Computer, 26(11), November 1993.
[27] E. Shi, A. Perrig, and L. Van Doorn. BIND: A fine-grained attestation service for secure distributed systems. In Proceedings of IEEE Symposium on Security and Privacy, pages 154–168, Oakland, CA, USA, May 8-11, 2005.
[28] Sean Smith. Trusted Computing Platforms: Design and Applications. Springer, 2005.
[29] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux security modules: General security support for the Linux kernel. In Proceedings of the 11th USENIX Security Symposium, 2002.