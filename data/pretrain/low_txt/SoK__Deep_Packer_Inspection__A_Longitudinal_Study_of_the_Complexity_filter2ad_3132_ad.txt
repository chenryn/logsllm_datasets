### Exception Monitoring and Process Analysis

- **Exception Handling**: An exception was generated and not resolved within two minutes. To identify such exceptions, we monitored the `KiUserExceptionDispatcher` function in the `ntdll.dll` system library.
- **Process Idle Time**: The monitored processes were idle for more than two consecutive minutes.
- **Timeout**: A maximum timeout of 30 minutes was reached.

### Analysis of Off-the-Shelf Packers

Our analysis of off-the-shelf packers revealed several key findings:

- **Process Usage**: 
  - 559 (81.6%) of the packers are single-process.
  - 121 (17.6%) use two concurrent processes.
  - Only five packers adopted more than two processes.
- **Layer Distribution**:
  - The majority of packers use fewer than four layers.
  - A significant number (4.4%) use more than 50 layers.
  - Nearly 10% of the packers did not have the protected code in the last unpacked layer; instead, the last layer contained part of the packer's routines, which are only revealed at runtime.
- **Transition Models**:
  - One-third of the packers had a linear transition model with no cycles.
  - For 15 packers, we observed more than one million backward transitions.
- **Interprocess Communication**:
  - The most common techniques are the creation of shared files (subsequently executed) and the use of Windows API functions (`ReadProcessMemory` and `WriteProcessMemory`) for process interaction.
  - Five samples used injection techniques to processes not directly created by the packer.
  - Many samples created multiple processes or threads during execution.

### Packers Distribution

To understand the significance of these results, we analyzed the Anubis malware sandbox database, which contains over 60 million unique samples. We observed that the number of samples detected as packed with well-known packer tools has significantly decreased over the years. This trend may be due to outdated packer signature databases or the preference of malware writers for custom unpackers or simple packers like UPX, which do not raise suspicion.

- **Common Packers**:
  - Themida, a complex protector using virtualization technology, is an exception.
  - Most commonly employed packers are relatively simple, ranging from Type-I to Type-III.

### Analysis of Custom Packers

We also analyzed 7,729 malware binaries uniformly distributed over the past seven years. Despite all having a section with entropy higher than 7, only 6,088 samples exhibited unpacking behavior during our analysis.

- **Complexity Classes**:
  - Custom packers show a higher prevalence for Type-II and Type-III.
  - Very simple (Type-I) and very complex (Type-VI) packers are more common in the off-the-shelf dataset.
- **Evolution of Complexity**:
  - Table III and Figure 6 summarize the average packer complexity, standard deviation, and the 90th percentile of the distribution over the years.
  - There is no clear trend, with all complexity classes remaining roughly constant over the past eight years.

### Interprocess Communication and Layer Distribution in Custom Packers

- **Layer Usage**:
  - Most custom packers use few layers, but a significant number present between 3 and 6 layers.
  - 826 (14%) of the 6,088 samples did not have the original code in the last level.
- **Communication Techniques**:
  - We observed an increase in the use of system process injection and unpacking by using external files, likely due to malware that injects code into other processes or drops files for execution.
- **Evolution Over Time**:
  - Figures 9 and 10 show the evolution of the number of processes and layers over time.
  - The standard deviation of the number of processes ranged between 1.08 and 1.66, and for the number of layers, it ranged between 5.46 and 35.32.
  - No significant variation was observed in our experiments, indicating that the average custom packer presents a multi-layer unpacking routine with a cyclic transition model.

### Discussion

Generic unpackers often rely on assumptions about packer structures that may not hold true for many real-world samples. Key challenges include:

- **Multi-Layer Protection**: Many packers have more than two layers, complicating the identification of the original code.
- **Tail-Jump Identification**: Unpackers aim to identify tail-jumps to dump the protected code, but Type-IV, Type-V, and Type-VI packers complicate this operation.
- **Original Code Location**: Around 10% of off-the-shelf packers and 14% of custom-packed malware do not have the original code in the last layer, further complicating analysis.

These findings highlight the need for more sophisticated and adaptive unpacking techniques to handle the evolving complexity of packers.