### Selection Sort Exploit Code and Output

#### Code Snippet
```c
if (*p2 < min) {
    // p1++
}

sparc@sparc # ./SelectionSort

p1 = a;
printf("\n\nSorted Array:\n");
for (i = 0; i < len; ++i) {
    printf("%d, ", *p1);
    p1 = p1 + 4;
    // p1++
}
printf("\n");

free(a);
// Free Memory
```

#### Unsorted Array
```
Unsorted Array:
486, 491, 37, 5, 166, 330, 103,
138, 233, 169,
```

#### Sorted Array
```
Sorted Array:
5, 37, 103, 138, 166, 169, 233,
330, 486, 491,
```

#### Figures
- **Fig. 31.** Selection Sort Exploit Code
- **Fig. 32.** Selection Sort Output. The backslashes indicate line breaks inserted for formatting.

### Defensive Techniques Against Code Injection

Code signing techniques like Tripwire, Authenticode, Intel’s Trusted Execution Technology, or any "Trusted Computing" technology using cryptographic attestation fall into this class. Additionally, approaches that prevent control flow diversion outside legitimate regions (such as W⊕X) and most malicious code scanning techniques (such as anti-virus scanners) are also part of this class.

A better defensive approach would be to keep a program’s control flow from being hijacked in the first place. Control-flow integrity systems can provably accomplish this with a runtime overhead that is likely acceptable for many applications and should see wider adoption.

### Acknowledgments

We thank Dan Boneh, Eu-Jin Goh, Frans Kaashoek, Nagendra Modadugu, Eric Rescorla, Mike Sawka, and Nick Vossbrink for their helpful discussions regarding the x86 aspects of this work. We also thank Avram Shacham for his detailed comments on versions of the manuscript. Members of the MIT Cryptography and Information Security Seminar, Berkeley Systems Lunch, and Stanford Security Lunch provided valuable feedback on early presentations. Rick Ord offered insightful discussions and insights regarding SPARC internals. Bill Young provided us with a dedicated SPARC workstation on short notice and for an extended period.

This work was made possible by National Science Foundation grants CNS-0433668 and CNS-0831532 (Cyber Trust). Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors or originators and do not necessarily reflect the views of the National Science Foundation.

Part of this work was done while the third author was at the Weizmann Institute of Science, Rehovot, Israel, supported by a Koshland Scholars Program postdoctoral fellowship.

### References

- ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. 2009. Control-flow integrity principles, implementations, and applications. ACM Trans. Info. & System Security 13, 1 (Oct.).
- ALEPH ONE. 1996. Smashing the stack for fun and profit. Phrack Magazine 49, 14 (Nov.). http://www.phrack.org/archives/49/p49_0x0e_Smashing%20The%20Stack%20For%20Fun%20And%20Profit_by_Aleph1.txt.
- ANONYMOUS. 2001. Once upon a free(). . . . Phrack Magazine 57, 9 (Aug.). http://www.phrack.org/archives/57/p57_0x09_Once%20upon%20a%20free()_by_anonymous%20author.txt.
- BARRANTES, E. G., ACKLEY, D. H., FORREST, S., AND STEFANOVIĆ, D. 2005. Randomized instruction set emulation. ACM Trans. Info. & System Security 8, 1 (Feb.), 3–40.
- BLAZAKIS, D. 2010. Interpreter exploitation. In Proceedings of WOOT 2010, H. Shacham and C. Miller, Eds. USENIX.
- BLEXIM. 2002. Basic integer overflows. Phrack Magazine 60, 10 (Dec.). http://www.phrack.org/archives/60/p60_0x0a_Basic%20Integer%20Overflows_by_blexim.txt.
- BUCHANAN, E., ROEMER, R., SHACHAM, H., AND SAVAGE, S. 2008. When good instructions go bad: Generalizing return-oriented programming to RISC. In Proceedings of CCS 2008, P. Syverson and S. Jha, Eds. ACM Press, 27–38.
- BULBA AND KIL3R. 2000. Bypassing StackGuard and StackShield. Phrack Magazine 56, 5 (May). http://www.phrack.org/archives/56/p56_0x05_Bypassing%20StackGuard%20and%20StackShield_by_Kil3r%20&%20Bulba.txt.
- CHECKOWAY, S., DAVI, L., DMITRIENKO, A., SADEGHI, A.-R., SHACHAM, H., AND WINANDY, M. 2010. Return-oriented programming without returns. In Proceedings of CCS 2010, A. Keromytis and V. Shmatikov, Eds. ACM Press, 559–72.
- CHECKOWAY, S., FELDMAN, A. J., KANTOR, B., HALDERMAN, J. A., FELTEN, E. W., AND SHACHAM, H. 2009. Can DREs provide long-lasting security? The case of return-oriented programming and the AVC Advantage. In Proceedings of EVT/WOTE 2009, D. Jefferson, J. L. Hall, and T. Moran, Eds. USENIX/ACCURATE/IAVoSS.
- CHEN, P., XIAO, H., SHEN, X., YIN, X., MAO, B., AND XIE, L. 2009. DROP: Detecting return-oriented programming malicious code. In Proceedings of ICISS 2009, A. Prakash and I. Sengupta, Eds. LNCS, vol. 5905. Springer-Verlag, 163–77.
- COWAN, C., PU, C., MAIER, D., HINTON, H., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., AND ZHANG, Q. 1998. StackGuard: Automatic detection and prevention of buffer-overflows. In Proceedings of USENIX Security 1998, A. Rubin, Ed. USENIX, 63–78.
- DAI ZOVI, D. 2010. Slides: Return-oriented exploitation. Black Hat USA 2010. https://media.blackhat.com/bh-us-10/presentations/Zovi/BlackHat-USA-2010-DaiZovi-Return-Oriented-Exploitation-slides.pdf.
- DARK SPYRIT. 1999. Win32 buffer overflows (location, exploitation and prevention). Phrack Magazine 55, 15 (Sept.). http://www.phrack.org/archives/55/p55_0x0f_Win32%20Buffer%20Overflows..._by_dark%20spyrit.txt.
- DAVI, L., SADEGHI, A.-R., AND WINANDY, M. 2009. Dynamic integrity measurement and attestation: Towards defense against return-oriented programming attacks. In Proceedings of STC 2009, N. Asokan, C. Nita-Rotaru, and J.-P. Seifert, Eds. ACM Press, 49–54.
- DAVI, L., SADEGHI, A.-R., AND WINANDY, M. 2011. ROPdefender: A detection tool to defend against return-oriented programming attacks. In Proceedings of AsiaCCS 2011, R. Sandhu and D. Wong, Eds. ACM Press.
- DULLIEN, T., KORNAU, T., AND WEINMANN, R.-P. 2010. A framework for automated architecture-independent gadget search. In Proceedings of WOOT 2010, H. Shacham and C. Miller, Eds. USENIX.
- DURDEN, T. 2002. Bypassing PaX ASLR protection. Phrack Magazine 59, 9 (June). http://www.phrack.org/archives/59/p59_0x09_Bypassing%20PaX%20ASLR%20protection_by_Tyler%20Durden.txt.
- ERLINGSSON, U. 2007. Low-level software security: Attacks and defenses. In Foundations of Security Analysis and Design IV, A. Aldini and R. Gorrieri, Eds. LNCS, vol. 4677. Springer-Verlag, 92–134.
- ERLINGSSON, U., ABADI, M., VRABLE, M., BUDIU, M., AND NECULA, G. 2006. XFI: Software guards for system address spaces. In Proceedings of OSDI 2006, B. Bershad and J. Mogul, Eds. USENIX, 75–88.
- ETHO, H. AND YODA, K. 2001. ProPolice: Improved stack-smashing attack detection. IPSJ SIGNotes Computer SECurity 014, 025 (Oct.). http://www.trl.ibm.com/projects/security/ssp.
- FRANCILLON, A. AND CASTELLUCCIA, C. 2008. Code injection attacks on Harvard-architecture devices. In Proceedings of CCS 2008, P. Syverson and S. Jha, Eds. ACM Press, 15–26.
- FRANCILLON, A., PERITO, D., AND CASTELLUCCIA, C. 2009. Defending embedded systems against control flow attacks. In Proceedings of SecuCode 2009, S. Lachmund and C. Schaefer, Eds. ACM Press, 19–26.
- FRANTZEN, M. AND SHUEY, M. 2001. StackGhost: Hardware facilitated stack protection. In Proceedings of USENIX Security 2001, D. Wallach, Ed. USENIX, 55–66.
- GARG, M. 2006a. About ELF auxiliary vectors. http://manugarg.googlepages.com/aboutelfauxiliaryvectors.
- GARG, M. 2006b. Sysenter based system call mechanism in Linux 2.6. http://manugarg.googlepages.com/systemcallinlinux2_6.html.
- GERA AND RIQ. 2001. Advances in format string exploiting. Phrack Magazine 59, 7 (July). http://www.phrack.org/archives/59/p59_0x07_Advances%20in%20format%20string%20exploitation_by_riq%20&%20gera.txt.
- HEELAN, S. 2010. Validity, satisfiability and code semantics. Online: http://seanhn.wordpress.com/2010/10/02/validity-satisfiability-and-instruction-semantics/.
- HOROVITZ, O. 2002. Big loop integer protection. Phrack Magazine 60, 9 (Dec.). http://www.phrack.org/archives/60/p60_0x09_Big%20Loop%20Integer%20Protection_by_Oded%20Horovitz.txt.
- HUND, R., HOLZ, T., AND FREILING, F. 2009. Return-oriented rootkits: Bypassing kernel code integrity protection mechanisms. In Proceedings of USENIX Security 2009, F. Monrose, Ed. USENIX, 383–98.
- Intel Corporation 2011. Intel 64 and IA-32 Architectures Software Developer’s Manual, Volumes 1–3B. Intel Corporation. Online: http://www.intel.com/products/processor/manuals/.
- IOZZO, V., KORNAU, T., AND WEINMANN, R.-P. 2010. Everybody be cool this is a roppery! Black Hat 2010. Online: http://www.zynamics.com/downloads/bh10_paper.pdf.
- IOZZO, V. AND MILLER, C. 2009. Fun and games with Mac OS X and iPhone payloads. Black Hat Europe 2009. Presentation. Slides: http://www.blackhat.com/presentations/bh-europe-09/Miller_Iozzo/BlackHat-Europe-2009-Miller-Iozzo-OSX-IPhone-Payloads-whitepaper.pdf.
- IVALDI, M. 2007. Re: Older SPARC return-into-libc exploits. Penetration Testing.
- KAEMPF, M. 2001. Vudo malloc tricks. Phrack Magazine 57, 8 (Aug.). http://www.phrack.org/archives/57/p57_0x08_Vudo%20malloc%20tricks_by_MaXX.txt.
- KLOG. 1999. The frame pointer overwrite. Phrack Magazine 55, 8 (Sept.). http://www.phrack.org/archives/55/p55_0x08_Frame%20Pointer%20Overwriting_by_klog.txt.
- KORNAU, T. 2010. Return oriented programming for the ARM architecture. M.S. thesis, Ruhr-Universität Bochum. Online: http://zynamics.com/downloads/kornau-tim--diplomarbeit--rop.pdf.
- KRAHMER, S. 2005. x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique. http://www.suse.de/~krahmer/no-nx.pdf.
- LE, L. 2010. Payload already inside: Data re-use for ROP exploits. Black Hat USA 2010. https://media.blackhat.com/bh-us-10/whitepapers/Le/BlackHat-USA-2010-Le-Paper-Payload-already-inside-data-reuse-for-ROP-exploits-wp.pdf.
- LI, J., WANG, Z., JIANG, X., GRACE, M., AND BAHRAM, S. 2010. Defeating return-oriented rootkits with “return-less” kernels. In Proceedings of EuroSys 2010, G. Muller, Ed. ACM Press, 195–208.
- LIDNER, F. 2009. Developments in Cisco IOS forensics. CONFidence 2.0. Presentation. Slides: http://www.recurity-labs.com/content/pub/FX_Router_Exploitation.pdf.
- MCDONALD, J. 1999. Defeating Solaris/SPARC non-executable stack protection. Bugtraq.
- MILLER, C. AND IOZZO, V. 2009. Fun and games with Mac OS X and iPhone payloads. Presented at BlackHat Europe 2009. Online: https://www.blackhat.com/presentations/bh-europe-09/Miller_Iozzo/BlackHat-Europe-2009-Miller-Iozzo-OSX-IPhone-Payloads-whitepaper.pdf.
- NARAINE, R. 2010. Pwn2Own 2010: iPhone hacked, SMS database hijacked. Online: http://blogs.zdnet.com/security/?p=5836.
- NERGAL. 2001. The advanced return-into-lib(c) exploits: PaX case study. Phrack Magazine 58, 4 (Dec.). http://www.phrack.org/archives/58/p58_0x04_Advanced%20return-into-lib(c)%20exploits%20(PaX%20case%20study)_by_nergal.txt.
- NEWSHAM, T. 1997. Re: Smashing the stack: prevention? Bugtraq. Online: http://seclists.org/bugtraq/1997/Apr/129.
- NEWSHAM, T. 2000. non-exec stack. Bugtraq. Online: http://seclists.org/bugtraq/2000/May/90.
- ONARLIOGLU, K., BILGE, L., LANZI, A., BALZAROTTI, D., AND KIRDA, E. 2010. G-Free: Defeating return-oriented programming through gadget-less binaries. In Proceedings of ACSAC 2010, M. Franz and J. McDermott, Eds. ACM Press, 49–58.
- PAUL, R. P. 1999. SPARC Architecture, Assembly Language Programming, and C. Prentice Hall PTR, Upper Saddle River, NJ, USA.
- PAX TEAM. 2003a. PaX address space layout randomization. http://pax.grsecurity.net/docs/aslr.txt.
- PAX TEAM. 2003b. PaX non-executable pages design & implementation. http://pax.grsecurity.net/docs/noexec.txt.
- PAX TEAM. 2003c. SEGMEXEC: Segmentation based non-executable pages. http://pax.grsecurity.net/docs/segmexec.txt.
- RICHARTE, G. 2000. Re: Future of buffer overflows? Bugtraq. Online: http://seclists.org/bugtraq/2000/Nov/32 and http://seclists.org/bugtraq/2000/Nov/26.
- RICHARTE, G. 2001. Insecure programming by example: Esoteric #2. Online: http://community.corest.com/~gera/InsecureProgramming/e2.html.
- ROEMER, R. 2009. Finding the bad in good code: Automated return-oriented programming exploit discovery. M.S. thesis, UC San Diego. Online: https://cseweb.ucsd.edu/~rroemer/doc/thesis.pdf.
- SCHWARTZ, E., AVGERINOS, T., AND BRUMLEY, D. 2011. Q: Exploit hardening made easy. In Proceedings of USENIX Security 2011, D. Wagner, Ed. USENIX.
- SCUT/TEAM TESO. 2001. Exploiting format string vulnerabilities. http://www.team-teso.net.
- SHACHAM, H. 2007. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of CCS 2007, S. D. Capitani and P. Syverson, Eds. ACM Press, 552–561.
- SHACHAM, H., PAGE, M., PFAFF, B., GOH, E.-J., MODADUGU, N., AND BONEH, D. 2004. On the effectiveness of address-space randomization. In Proceedings of CCS 2004, B. Pfitzmann and P. Liu, Eds. ACM Press, 298–307.
- SOLAR DESIGNER. 1997. Getting around non-executable stack (and fix). Bugtraq.
- SOLAR DESIGNER. 1998. StackPatch. Online: http://www.openwall.com/linux.
- SOLAR DESIGNER. 2000. JPEG COM marker processing vulnerability in Netscape browsers. http://www.openwall.com/advisories/OW-002-netscape-jpeg/.
- WEAVER, D. AND GERMOND, T., Eds. 1994. The SPARC Architecture Manual (Version 9). SPARC Int’l, Inc., Englewood Cliffs, NJ, USA.
- SPARC INT’L, INC. 1996. System V Application Binary Interface, SPARC Processor Supplement.
- The Santa Cruz Operation 1996. System V Application Binary Interface: Intel386 Architecture Processor Supplement, fourth ed. The Santa Cruz Operation.
- ZALEWSKI, M. 2001. Remote vulnerability in SSH daemon CRC32 compression attack detector. http://www.bindview.com/Support/RAZOR/Advisories/2001/adv_ssh1crc.cfm.

Received Month Year; revised Month Year; accepted Month Year

### Online-Only Appendix

#### Return-Oriented Programming: Systems, Languages, and Applications

- **Authors:** Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage
- **University of California, San Diego**
- **ACM Journal Name, Vol. V, No. N, Month 20YY, Pages 1–36.**

##### A. X86 Implementation Details

###### A.1 Our Instruction-Sequence Finding Algorithm
Figure 33 presents, in pseudocode, our algorithm for finding useful sequences on the x86.

###### A.2 Additional x86 Gadgets

[Further details and figures would follow here.]