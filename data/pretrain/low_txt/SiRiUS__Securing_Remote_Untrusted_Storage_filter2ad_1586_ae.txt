### The BSD Union Mount System

The BSD union mount system allows a stack of file systems to function logically as a single file system. For each file read attempt, the stacked file systems are searched from top to bottom, and the topmost one that contains a version of the file is used to answer the request. Any changes to a file modify the copy in the topmost, read-write file system. File deletions are handled by placing a "whiteout" entry in the lower-level file system.

#### Example Use Case
Union mounts are useful, for example, when compiling sources from a CD-ROM: a directory tree under `/tmp` can be stacked over the (read-only) source tree. Object files and executables are created in `/tmp`, but appear side-by-side with the sources.

### SiRiUS-U Client and Union Mounts

When a SiRiUS-U client mounts a user’s file system, it carries out a union mount of all other users’ corresponding file systems on the remote file server. All freshness files and metadata (md-files) for all users are visible to the SiRiUS-U client, allowing it to locate and verify files to which it has access.

To handle namespace collisions, SiRiUS-U requires a logical ordering of the union-mounted stack of SiRiUS file systems. This ordering is temporal: the most recent version of a file is ordered at the top of the search stack. 

**Example:**
- Suppose Bob is the owner of file `foo`.
- Alice has write access to `foo`, and Carol has read access.
- Alice performed the last write on `foo`.
- When Carol tries to read `foo` later, her SiRiUS-U client checks the union-mounted file system and locates both Bob’s and Alice’s versions of `foo`.
- Since Alice’s version is more recent, the SiRiUS client displays her version to Carol.

If Alice is not allowed to write to `foo`, then Carol’s client should not consult Alice’s version, regardless of its temporal ordering. Bob’s metadata files must specify which users are allowed to modify a given file, and only these users' directory trees should be consulted in accessing the file.

### Benefits of Union Mounts in SiRiUS

Using union mounts allows SiRiUS to maintain the file system semantics discussed earlier and retains the security of the original scheme. Additionally, SiRiUS-U can guarantee the freshness of data files (d-files).

#### Freshness Guarantees Using Union Mounts
If union mounts are used, the md-file freshness scheme can be extended to d-files to solve the d-file rollback attack mentioned in Section 5.3. Each SiRiUS user computes a hash tree for the hash blocks of all the d-files they have write access to and creates a data freshness file (df-file). The procedures for generating df-files are similar to those for generating mdf-files. The root df-file is periodically time-stamped and signed by the user.

The union mount of all user file systems ensures that all df-files for each user are visible to everyone. These df-files are used to verify the freshness of file data. For example, if file `foo` has two writers, Bob and Carol, and Alice wants to read the file, the union mount shows that the latest version of `foo` was last modified by Bob, so Alice verifies the d-file freshness using Bob’s df-files.

### Related Work

- **Self-Certifying File System (SFS)**: Provides authentication and channel security for accessing remote file systems. Access control in SFS relies on all file requests passing through a trusted SFS server, removing the need for end-to-end security. In contrast, SiRiUS is designed assuming an untrusted file server and provides end-to-end security with cryptographic access controls.
- **Cryptographic File System (CFS)**: Associates a single symmetric key with each file system. Pathnames and data are encrypted before being written to disk. Access control is determined by possession of the file system key, allowing only coarse sharing with no read-write separation or per-file sharing. SiRiUS, on the other hand, allows fine-grained sharing on a per-file basis.
- **CryptFS**: Similar to CFS, but symmetric keys are associated with groups of files. These group file keys permit group sharing but no read-write access controls.
- **Extended Cryptographic File System (ECFS)**: Extends CFS to provide file integrity.
- **Cryptographic Storage File System (CSFS)**: Similar to CFS but also supports file integrity and group sharing of files. CSFS does not provide read-write access controls and relies on a highly trusted group database server.
- **Transparent Cryptographic File System (TCFS)**: Another extension of CFS. Each user possesses a master key to protect unique file keys. TCFS has a group threshold sharing scheme but no other form of sharing.
- **Secure Network Attached Disks (SNAD)**: A block storage system providing end-to-end encryption and integrity of file data and metadata. Access permissions are stored and enforced by the remote file server, requiring strong user authentication and trust in the server.
- **Secure Untrusted Data Repository (SUNDR)**: Uses block servers to store data blocks interpreted as a file system. The file system implementation resides entirely on the client, providing end-to-end encryption using per-file keys. SUNDR relies on the server to enforce access control.
- **Plutus**: Provides end-to-end security with a novel cryptographic group sharing system with lazy revocation.
- **CryptosFS**: Explores the use of public key cryptography to replace access control mechanisms.
- **Swallow Distributed File System**: Enforces access control through client-side cryptography. Swallow clients encrypt their files before storing them on remote file servers but do not provide fine-grained file sharing.
- **Zero-Interaction Authentication (ZIA)**: Aims to secure mobile devices even against physical attacks. ZIA implements file access control via a cryptographic file system that communicates with a physical authentication token.

### Summary and Conclusion

SiRiUS is compelling in situations where users have no control over the file server, such as Yahoo! Briefcase or P2P file storage provided by Farsite. It is believed that SiRiUS is the most that can be done to secure an existing network file system without changing the file server or file system protocol.

### Acknowledgments

The authors thank Monica Lam, Ben Pfaff, Mendel Rosenblum, and the other members of the Stanford Collective Group for their helpful discussions. Special thanks to Kevin Fu and the anonymous reviewers for their comments, Constantine Sapuntzakis for comments on maintaining standard file system semantics, and Robert McGrew for pointing out an attack (now fixed). The authors are grateful to Mendel Rosenblum and VMware for providing software for development work.

### References

1. D. Bindel, M. Chew, and C. Wells. Extended cryptographic file system. Unpublished manuscript, December 1999.
2. M. Blaze. A cryptographic file system for Unix. In Proceedings of the First ACM Conference on Computer and Communications Security, pages 9–16. ACM, November 1993.
3. D. Boneh and M. Franklin. Identity-based encryption from the Weil pairing. In J. Kilian, editor, Proceedings of Crypto 2001, volume 2139 of LNCS, pages 213–229. Springer-Verlag, August 2001.
4. B. Callaghan. NFS Illustrated. Addison-Wesley, December 1999.
5. B. Callaghan, B. Pawlowski, and P. Staubach. NFS version 3 protocol specification. RFC 1813, June 1995.
6. M. Castro and B. Liskov. Practical Byzantine fault tolerance. In Proceedings of the Third Symposium on Operating Systems Design and Implementation (OSDI). USENIX, February 1999.
7. G. Cattaneo, L. Catuogno, A. D. Sorbo, and P. Persiano. The design and implementation of a transparent cryptographic file system for UNIX. In Proceedings of USENIX Technical Conference, FREENIX Track. USENIX, June 2001.
8. B. Chor, A. Fiat, and M. Naor. Tracing traitors. In Y. Desmedt, editor, Proceedings of Crypto 1994, volume 839 of LNCS, pages 257–270. Springer-Verlag, August 1994.
9. M. Corner and B. Noble. Zero-interaction authentication. In Proceedings of the Eighth International Conference on Mobile Computing and Networking (MOBICOM), pages 1–11. ACM, 2002.
10. M. Dworkin. Recommendation for block cipher modes of operation. Special Publication 800-38A, NIST, 2001.
11. S. Even, O. Goldreich, and S. Micali. On-line/off-line digital signatures. In G. Brassard, editor, Proceedings of Crypto 1989, volume 435 of LNCS, pages 263–277. Springer-Verlag, August 1989.
12. A. Fiat and M. Naor. Broadcast encryption. In D. Stinson, editor, Proceedings of Crypto 1993, volume 773 of LNCS, pages 480–491. Springer-Verlag, August 1993.
13. K. Fu. Group sharing and random access in cryptographic storage file systems. Master’s thesis, Massachusetts Institute of Technology, June 1999.
14. D. Halevi and A. Shamir. The LSD broadcast encryption scheme. In M. Yung, editor, Proceedings of Crypto 2002, volume 2442 of LNCS, pages 47–60. Springer-Verlag, August 2002.
15. M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu. Plutus — scalable secure file sharing on untrusted storage. In Proceedings of the Second USENIX Conference on File and Storage Technologies (FAST). USENIX, March 2003.
16. U. Maheshwari, R. Vingralek, and W. Shapiro. How to build a trusted database system on untrusted storage. In Proceedings of the Fourth Symposium on Operating Systems Design and Implementation (OSDI). USENIX, October 2000.
17. D. Mazières. A toolkit for user-level file systems. In Proceedings of the USENIX Technical Conference, pages 261–274. USENIX, June 2001.
18. D. Mazières, M. Kaminsky, M. F. Kaashoek, and E. Witchel. Separating key management from file system security. In Proceedings of the Seventeenth ACM Symposium on Operating Systems Principles (SOSP), pages 124–139. ACM, 1999.
19. D. Mazières and D. Shasha. Don’t trust your file server. In Proceedings of the Eighth Workshop on Hot Topics in Operating Systems, pages 113–118, May 2001.
20. M. K. McKusick, K. Bostic, M. Karels, and J. Quarterman. The Design and Implementation of the 4.4 BSD Operating System. Addison-Wesley, 1996.
21. R. Merkle. A digital signature based on a conventional encryption function. In C. Pomerance, editor, Proceedings of Crypto 1987, volume 293 of LNCS, pages 369–378. Springer-Verlag, August 1987.
22. Microsoft. Common internet file system (CIFS). Located at http://www.ubiqx.org/cifs/.
23. Microsoft. Federated, available, and reliable storage for an incompletely trusted environment (Farsite). Located at http://research.microsoft.com/sn/Farsite/.
24. E. Miller, D. Long, W. Freeman, and B. Reed. Strong security for distributed file systems. In Proceedings of the Twentieth IEEE International Performance, Computing, and Communications Conference, pages 34–40, April 2001.
25. A. Muthitacharoen, R. Morris, T. Gil, and B. Chen. Ivy: A read/write peer-to-peer file system. In Proceedings of the Fifth USENIX Symposium on Operating Systems Design and Implementation (OSDI). USENIX, December 2002.
26. D. Naor, M. Naor, and J. Lotspiech. Revocation and tracing schemes for stateless receivers. In J. Kilian, editor, Proceedings of Crypto 2001, volume 2139 of LNCS, pages 41–62. Springer-Verlag, August 2001.
27. OceanStore Project. Located at http://oceanstore.cs.berkeley.edu/.
28. OpenSSL Project. Located at http://www.openssl.org/.
29. D. P. O’Shanahan. CryptosFS: Fast cryptographic secure NFS. Master’s thesis, University of Dublin, 2000.
30. J.-S. Pendry and M. K. McKusick. Union mounts in 4.4BSD-Lite. In Proceedings of USENIX Technical Conference, pages 25–33. USENIX, January 1995.
31. D. Reed and L. Svobodova. Swallow: A distributed data storage system for a local network. In A. West and P. Janson, editors, Local Networks for Computer Communications, pages 355–373. North-Holland, 1981.
32. R. Sandberg, D. Goldberg, S. Kleiman, D. Walsh, and B. Lyon. Design and implementation of the SUN network filesystem. In Proceedings of the Summer USENIX Conference, pages 119–130. USENIX, 1985.
33. R. Srinivasan. Remote Procedure Call Protocol version 2. RFC 1813, August 1995.
34. Yahoo! Briefcase. Located at http://briefcase.yahoo.com/.
35. E. Zadok, I. Badulescu, and A. Shender. Cryptfs: A stackable vnode level encryption file system. Technical Report CUCS-021-98, Columbia University, 1998.