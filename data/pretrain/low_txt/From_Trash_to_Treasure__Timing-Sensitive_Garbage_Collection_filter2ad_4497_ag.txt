### Termination-Insensitive Noninterference

**Definition:**
A program \( c \) satisfies termination-insensitive noninterference if, given two terminating executions of the same program with low-equivalent initial memories \( m \) and \( s \), it is possible to construct a terminating execution of \( c \) starting at initial memory \( s \) that results in a final memory \( s' \) such that \( s' \) is low-equivalent to the final memory \( m' \) of the first execution.

**Theorem 4 (Soundness of the Enforcement):**
Given a program \( c \), if \( \Gamma, \text{pc} \vdash c \), then \( c \) satisfies noninterference for unbounded semantics for all levels.

**Proof Sketch:**
Consider two terminating executions of program \( c \):
1. \( \langle c, \bot, m, \emptyset, 0 \rangle \xrightarrow{mx^*} \langle \text{stop}, \text{pc}_1, m', h', w', t' \rangle \)
2. \( \langle c, \bot, s, \emptyset, 0 \rangle \xrightarrow{mx^*} \langle \text{stop}, \text{pc}_2, s', h'', w'', t'' \rangle \)

Our goal is to construct an alternative run (execution C):
\[ \langle c, \bot, s, \emptyset, 0 \rangle \xrightarrow{mx^*} \langle \text{stop}, \text{pc}_1, s'', h''', w''', t''' \rangle \]
where \( m' \) is ≈-equivalent to \( s' \).

To achieve this, we define an auxiliary "bridge" relation on pairs of configurations. This relation records that starting from some configuration \( \text{cfg}_1 \), the execution steps over intermediate steps without modifying the low parts of the memory or the heap, or terminates, resulting in configuration \( \text{cfg}_2 \). Each of the A and B executions can be broken down into a sequence of consecutive "bridging" steps. We construct the execution C one bridge-step at a time, starting from the initial configurations. The key invariant used in the proof is that bridging configurations in C are low-equivalent with the respective configurations in A and "taint"-equivalent with the respective configurations in B.

The bridge noninterference lemma shows that whenever a pair of related configurations in A and B can take a bridge step, it is possible to construct a matching bridge step in C that mimics the timing behavior of A, i.e., it generates the same events and takes the same execution time as A. This is proved by induction on the number of intermediate steps, followed by an induction over the structure of command \( c \).

To show the termination of the high commands constructed in C, we observe that the taint equivalence of B and C configurations implies that they agree on the control flow, and one can further construct high GC steps in C to match the high GC steps in B.

### Connections to Real-Time Garbage Collection

Wadler [40] defined real-time garbage collection as any garbage collection system guaranteeing that the execution is not suspended for long periods. Many such collectors have been presented previously [30, 17, 36, 13], and they are crucial for building real-time systems in managed languages [7].

While the main goal of real-time garbage collectors is to reduce the amount of time the garbage collector suspends the program execution, these collectors may not be sufficient for mitigating the attacks presented in Section III. For example, consider the second program from Section V-A that illustrates the danger of collecting H in L. An "eager" real-time garbage collector may manifest the behavior warned against. Additionally, if a practical implementation of real-time garbage collection occasionally stops the world for collection, it allows attacks similar to the first example in Section V-A.

### Related Work

This work fits into the framework introduced by Zhang et al. [45], where the interaction between language semantics and the underlying abstract runtime happens via security labels. However, Zhang et al. do not consider automatic memory management.

Many modern programming language features can be used to create timing channels, and programming language designers must secure the entire execution stack. Buiras and Russo [8] show that a programming language with lazy evaluation leaks information because of sharing. They break the information flow control of the Haskell library LIO by leveraging the way thunks are shared between threads. They present a method for leaking one bit of information and a technique to amplify the attack. As a solution, they propose a restriction on sharing of thunks between threads but do not prove noninterference.

Secure-multi-execution [11] guarantees timing-sensitive noninterference by running multiple copies of the program, at the cost of changing the semantics of insecure programs. To provide guarantees against leakage via memory management, each copy must run with a separate collector, enforcing the constraints of Section V. Without such isolation, the shared GC is likely to represent a source of timing channels.

The idea of partitioning heaps based on security levels appears in the work on Relational Hoare Type Theory (RHTT) by Nanevski et al. [27], which provides two different allocation primitives: `lalloc` for public allocations and `alloc` for secret ones. Locations obtained by different primitives return disjoint values, necessary for defining heap low-equivalence, similar to our work. However, Nanevski et al. do not consider automatic collection or timing-sensitivity.

The runtime pc-level is related to the floating label concept in Haskell LIO library [35], which relies on lightweight threads to eliminate internal timing leaks in applications. It is unclear how to combine secure scheduling necessary for concurrent information flow with restrictions on garbage collection presented here.

Recent efforts on verification of garbage collector algorithms and implementations [19, 14] focus on basic safety properties but may provide a foundation for designing implementations that satisfy our security requirements.

### Conclusion

This paper presents a series of examples demonstrating the feasibility of information leaks via garbage collection. To effectively control such leaks, a tight integration between runtime and the source-level language is needed. Despite drastic simplifications in the design of the language to simplify aspects such as direct timing attacks, closing leaks via garbage collector requires strong assumptions from the language implementors.

### References

[1] J. Agat. Transforming out timing leaks. In Proceedings of the 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL '00, pages 40–53, New York, NY, USA, 2000. ACM.
[2] A. Askarov and A. Sabelfeld. Gradual release: Unifying declassification, encryption and key release policies. In Proc. IEEE Symp. on Security and Privacy, pages 207–221, May 2007.
[3] A. Askarov, S. Hunt, A. Sabelfeld, and D. Sands. Termination-insensitive noninterference leaks more than just a bit. In Proceedings of the 13th European Symposium on Research in Computer Security, pages 333–348, 2008.
[4] A. Askarov, D. Zhang, and A. C. Myers. Predictive black-box mitigation of timing channels. In ACM Conference on Computer and Communications Security, pages 297–307, 2010.
[5] M. Assaf and D. A. Naumann. Calculational design of information flow monitors. In 2016 IEEE 29th Computer Security Foundations Symposium (CSF), pages 210–224, June 2016.
[6] A. Banerjee and D. A. Naumann. Secure information flow and pointer confinement in a Java-like language. In Proceedings of the 15th IEEE Computer Security Foundations Workshop, June 2002.
[7] G. Bollella and J. Gosling. The real-time specification for Java. Computer, 33(6):47–54, 2000.
[8] P. Buiras and A. Russo. Lazy Programs Leak Secrets, pages 116–122. Springer Berlin Heidelberg, Berlin, Heidelberg, 2013.
[9] Z. Deng and G. Smith. Lenient array operations for practical secure information flow. Proceedings. 17th IEEE Computer Security Foundations Workshop, 2004., pages 115–124.
[10] D. E. Denning and P. J. Denning. Certification of programs for secure information flow. Comm. of the ACM, 20(7):504–513, July 1977.
[11] D. Devriese and F. Piessens. Noninterference through secure multi-execution. In Security and Privacy (SP), 2010 IEEE Symposium on, pages 109–124, May 2010.
[12] C. Dima, C. Enea, and R. Gramatovici. Nondeterministic nointerference and deducible information flow. Technical Report 2006-01, University of Paris 12, LACL, 2006.
[13] D. Frampton, D. F. Bacon, P. Cheng, and D. Grove. Generational Real-Time Garbage Collection, pages 101–125. Springer Berlin Heidelberg, Berlin, Heidelberg, 2007.
[14] P. Gammie, A. L. Hosking, and K. Engelhardt. Relaxing safely: verified on-the-fly garbage collection for x86-TSO. In PLDI 2015: Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 99–109. NICTA, ACM, June 2015.
[15] J. A. Goguen and J. Meseguer. Security policies and security models. In 1982 IEEE Symposium on Security and Privacy, Oakland, CA, USA, April 26-28, 1982, pages 11–20, 1982.
[16] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. JSFlow: tracking information flow in JavaScript and its APIs. In SAC '14: Proceedings of the 29th Annual ACM Symposium on Applied Computing. Chalmers University of Technology, ACM, Mar. 2014.
[17] J. A. Joao, O. Mutlu, and Y. N. Patt. Flexible reference-counting-based hardware acceleration for garbage collection. In Proceedings of the 36th Annual International Symposium on Computer Architecture, ISCA '09, pages 418–428, New York, NY, USA, 2009. ACM. ISBN 978-1-60558-526-0.
[18] R. Jones, A. Hosking, and E. Moss. The Garbage Collection Handbook: The Art of Automatic Memory Management. Chapman & Hall/CRC, 1st edition, 2011.
[19] A. McCreight, T. Chevalier, A. Tolmach, A. McCreight, T. Chevalier, and A. Tolmach. A certified framework for compiling and executing garbage-collected languages, volume 45. ACM, Sept. 2010.
[20] D. McCullough. Noninterference and the composability of security properties. In Proc. IEEE Symp. on Security and Privacy, pages 177–186, May 1988.
[21] S. Moore, A. Askarov, and S. Chong. Precise enforcement of progress-sensitive security. In Proceedings of the 19th ACM Conference on Computer and Communications Security, pages 881–893, Oct. 2012.
[22] G. Morrisett, M. Felleisen, and R. Harper. Abstract models of memory management. In Proceedings of the Seventh International Conference on Functional Programming Languages and Computer Architecture, FPCA '95, pages 66–77, New York, NY, USA, 1995. ACM. URL http://doi.acm.org/10.1145/224164.224182.
[23] S. Muller and S. Chong. Towards a practical secure concurrent language. In Proceedings of the 25th Annual ACM SIGPLAN Conference on Object-Oriented Programming Languages, Systems, Languages, and Applications, pages 57–74, New York, NY, USA, Oct. 2012. ACM Press.
[24] A. C. Myers. Mostly-Static Decentralized Information Flow Control. PhD thesis, Massachusetts Institute of Technology, Jan. 1999.
[25] A. C. Myers. JFlow: Practical mostly-static information flow control. In Proceedings of the 26th ACM Symp. on Principles of Programming Languages (POPL), pages 228–241, Jan. 1999. URL http://www.cs.cornell.edu/andru/papers/popl99/popl99.pdf.
[26] A. C. Myers, L. Zheng, S. Zdancewic, S. Chong, and N. Nystrom. Jif 3.0: Java information flow. Software release, http://www.cs.cornell.edu/jif, July 2006.
[27] A. Nanevski, A. Banerjee, and D. Garg. Verification of information flow and access control policies with dependent types. In Proceedings of the 2011 IEEE Symposium on Security and Privacy, SP '11, pages 165–179, Washington, DC, USA, 2011. IEEE Computer Society. ISBN 978-0-7695-4402-1.
[28] D. Osvik, A. Shamir, and E. Tromer. Cache attacks and countermeasures: The case of AES. In D. Pointcheval, editor, Topics in Cryptology – CT-RSA 2006, volume 3860 of Lecture Notes in Computer Science, pages 1–20. Springer Berlin Heidelberg, 2006.
[29] C. S. Pasareanu, Q. S. Phan, and P. Malacaria. Multi-run side-channel analysis using symbolic execution and max-SMT. In 2016 IEEE 29th Computer Security Foundations Symposium (CSF), pages 387–400, June 2016.
[30] F. Pizlo, L. Ziarek, P. Maj, A. L. Hosking, E. Blanton, and J. Vitek. Schism: fragmentation-tolerant real-time garbage collection. In ACM Sigplan Notices, volume 45, pages 146–159. ACM, 2010.
[31] F. Pottier and V. Simonet. Information flow inference for ML. In Proceedings of the 29th ACM Symp. on Principles of Programming Languages (POPL), pages 319–330, 2002.
[32] A. Russo and A. Sabelfeld. Dynamic vs. static flow-sensitive security analysis. In Proceedings of the IEEE Computer Security Foundations Symposium, 2010.
[33] A. Sabelfeld and A. C. Myers. Language-based information-flow security. IEEE J. Selected Areas in Communications, 21(1):5–19, Jan. 2003.
[34] V. Simonet. The Flow Caml System: documentation and user's manual. Technical Report 0282, Institut National de Recherche en Informatique et en Automatique (INRIA), July 2003.
[35] D. Stefan, A. Russo, J. C. Mitchell, and D. Mazières. Flexible dynamic information flow control in Haskell. In Proceedings of the 4th ACM Symposium on Haskell, Haskell '11, pages 95–106, New York, NY, USA, 2011. ACM.
[36] G. Tene, B. Iyengar, and M. Wolf. C4: The continuously concurrent compacting collector. In Proceedings of the International Symposium on Memory Management, ISMM '11, pages 79–88, New York, NY, USA, 2011. ACM.
[37] D. Ungar. Generation scavenging: A non-disruptive high-performance storage reclamation algorithm. In Proceedings of the First ACM SIGSOFT/SIGPLAN Software Engineering Symposium on Practical Software Development Environments, SDE 1, pages 157–167, New York, NY, USA, 1984. ACM.
[38] M. Vaninwegen, C. Gunter, and P. Buneman. The machine-assisted proof of programming language properties abstract the machine-assisted proof of programming language properties. 1996.
[39] D. Volpano, C. Irvine, and G. Smith. A sound type system for secure flow analysis. J. Comput. Secur., 4(2-3):167–187, Jan. 1996.
[40] P. L. Wadler. Analysis of an algorithm for real-time garbage collection. Commun. ACM, 19(9):491–500, Sept. 1976.
[41] G. Winskel. The Formal Semantics of Programming Languages: An Introduction. MIT Press, Cambridge, MA, 1993.
[42] A. Wright and M. Felleisen. A syntactic approach to type soundness. Inf. Comput., 115(1):38–94, Nov. 1994. ISSN 0890-5401. URL doi: 10.1006/inco.1994.1093.
[43] S. Zdancewic and A. C. Myers. Observational determinism for concurrent program security. In Proceedings of the 16th IEEE Computer Security Foundations Workshop, pages 29–43, June 2003.
[44] D. Zhang, A. Askarov, and A. C. Myers. Predictive mitigation of timing channels in interactive systems. In ACM Conference on Computer and Communications Security, pages 563–574, 2010.
[45] D. Zhang, A. Askarov, and A. C. Myers. Language-based control and mitigation of timing channels. In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '12, pages 99–110, New York, NY, USA, 2012. ACM.