### Loss Penalty and Flow Isolation in CHOKe+

In the context of network flow management, the loss penalty imposed on an aggressive flow by certain mechanisms is often minimal. In contrast, CHOKe+ assigns a significant portion of the losses due to a flow's rate increase back to the flow itself, thereby isolating other flows from the negative impact of the aggressive behavior. While perfect isolation, as seen in Fair Queuing and similar schemes, is not necessary, CHOKe+ must ensure that the increase in the loss rate is sufficient to discourage such aggressive behavior.

### Comparison with RED

Similar to the analysis of Random Early Detection (RED) in Section 4.3, we can examine the behavior of CHOKe+. It is important to note that other forms of antisocial behavior, such as the complete absence of congestion control, can lead to severe congestion collapse. Additionally, the transmission protocol used by the flows does not need to be reliable.

#### Loss Rate Analysis

The following figures compare the loss assignment of RED and CHOKe+:

- **Figure 10**: This figure illustrates the loss rates for both the greedy flow and the competing non-greedy flows. For RED buffers, the two curves coincide.
- **Figure 11**: Simulation results for gentle flows with CHOKe+ buffers, showing the variations in goodput and loss rate as functions of the increase and decrease parameters.

### Bursty Flows and Packet Drops

When flows become bursty, CHOKe+ drops packets more aggressively than RED. This is evident in Figure 5(a), where the common loss rate assigned by CHOKe+ is significantly higher than that assigned by RED for the same setting of the common increase parameter. Furthermore, CHOKe+ heavily penalizes flows that are even slightly more aggressive than their competitors, as shown in Figure 5(b), where the penalty \( Pa \) is an order of magnitude higher for CHOKe+ compared to RED. These properties of CHOKe+ effectively diminish the goodput advantage of aggressive flows.

### Nash Equilibrium and TCP SACK Flows

We plot the values of \( Fa \) and \( Fb \) for gentle flows as functions of the increase and decrease parameters, respectively, in Figures 6(a) and (b). The plots show that \( Fa \) and \( Fb \) are positive throughout, implying that at the respective Nash equilibria, the increase parameter \( \alphaE \) grows arbitrarily large, and the decrease parameter \( \betaE \) approaches 1. However, since CHOKe+ assigns a much higher loss rate to flows than RED for the same settings, and induces more bursty packet drops, TCP SACK flows tend to time out occasionally when using CHOKe+ buffers. Aggressive TCP SACK flows will time out frequently under CHOKe+.

### Simulation Results

Our simulation results for the Nash equilibrium of the TCP Game with CHOKe+ buffers and TCP-SACK flows are shown in Figures 11(a) and (b):

- At Nash equilibrium, \( \alphaE = 3 \) when flows vary their increase parameters.
- At \( \betaE = 0.74 \) when flows vary their decrease parameters.
- When both \( \alpha \) and \( \beta \) are allowed to vary, \( (\alpha, \beta) = (3, 0.90) \).

At this Nash equilibrium, the average per-flow goodput is 0.98 Mbps, and the per-flow loss rate is 4%. All Nash equilibria have good per-flow goodput and per-flow loss rates, making CHOKe+ very effective in minimizing the advantage of aggressive flows.

### Multiplicative Decrease and Queue Management

CHOKe+ cannot completely nullify the advantage of aggressive flows when the decrease parameters are allowed to vary. To effectively punish greedy flows, queue management schemes that maintain explicit per-flow state are necessary. In the absence of such schemes, the best outcome is to reduce the advantage to a level that is almost imperceptible to the aggressive flow. CHOKe+ achieves this, as seen in Figure 11(b), where there is hardly any perceptible advantage in setting \( \beta \) aggressively.

### Summary

In summary, our findings highlight the impact of greedy TCP end-points on network efficiency:

- In some scenarios, greedy behavior can result in efficient network operation, particularly with TCP-Reno loss recovery in a network of drop-tail routers.
- In settings with TCP-SACK or RED, the Nash equilibria are undesirable, with low network goodput or high drop rates.
- Simple preferential dropping algorithms like CHOKe+ can help restore the efficiency of Nash equilibria.

These conclusions suggest that while past network stability relied on user behavior, today's Internet requires simple, stateless queue management algorithms to ensure fair and efficient operation, even with modern loss recovery and queue management techniques.

### References

[1] The network simulator - ns-2. http://isi.edu/nsnam/ns/.

[2] A. Akella, S. Seshan, S. Shenker, and I. Stoica. Exploring congestion control. Technical Report CMU-CS-02-139, CMU, Pittsburgh, Pennsylvania, May 2002.

[3] M. Allman, V. Paxson, and W. Stevens. TCP congestion control. Internet Draft, Internet Engineering Task Force, Feb. 1999. Work in progress.

[4] Z. Bar-Yossef. Private Communication, May 2002.

[5] Z. Bar-Yossef. The complexity of massive data set computations. PhD Dissertation, U.C. Berkeley, May 2002.

[6] D. Chiu and R. Jain. Analysis of the increase/decrease algorithms for congestion avoidance in computer networks. Computer Networks and ISDN Systems, 17(1):1–14, June 1989.

[7] A. Demers, S. Keshav, and S. Shenker. Analysis and simulation of a fair queuing algorithm. In SIGCOMM Symposium on Communications Architectures and Protocols, pages 1–12, Austin, Texas, Sept. 1989. ACM. Also in Computer Communications Review, 19 (4), Sept. 1989.

[8] C. Douligeris and R. mazumdar. On Pareto optimal flow control in a multiclass environment. In The 25th Allerton Conference of Communication, Control and Computing, University of Illinois at Urbana-Champaign, Oct. 1987.

[9] C. Douligeris and R. Mazumdar. A game-theoretic approach to flow control in an integrated environment. Journal of the Franklin Institute, 329(3):383–402, Mar. 1992.

[10] K. Fall and S. Floyd. Simulation-based comparisons of Tahoe, Reno, and SACK TCP. ACM Computer Communication Review, 26(3):5–21, July 1996.

[11] D. Ferguson, C. Nikolaou, and Y. Yemini. An economy for flow control in computer networks. In Proceedings of the Conference on Computer Communications (IEEE Infocom), 1989.

[12] S. Floyd. Questions about SACK deployment. http://www.icir.org/floyd/sack-questions.html.

[13] S. Floyd and V. Jacobson. Random early detection gateways for congestion avoidance. IEEE/ACM Transactions on Networking, 1(4):397–413, Aug. 1993.

[14] M.-T. Hsiao and A. Lazar. A game-theoretic approach to decentralized flow control of Markovian queue networks. In Performance, Holland, 1987.

[15] V. Jacobson. Congestion avoidance and control. ACM Computer Communication Review, 18(4):314–329, Aug. 1988. Proceedings of the Sigcomm ’88 Symposium in Stanford, CA, August 1988.

[16] R. Karp, E. Koutsoupias, C. Papadimitriou, and S. Shenker. Combinatorial optimization in congestion control. In Proceedings of the 41st Annual Symposium on Foundations of Computer Science, pages 66–74, Redondo Beach, CA, 12–14 Nov. 2000.

[17] D. Lin and R. Morris. Dynamics of random early detection. ACM Computer Communication Review, 27(4):127–136, Oct. 1997. ACM SIGCOMM’97, Sept. 1997.

[18] R. Mahajan and S. Floyd. Controlling high-bandwidth flows at the congested router. In Proc. of ICNP’01, Riverside, California, USA, Nov. 2001.

[19] J. Padhye, V. Firoiu, D. F. Towsley, and J. F. Kurose. Modeling TCP Reno performance: a simple model and its empirical validation. IEEE/ACM Transactions on Networking, 8(2):133–145, Apr. 2000.

[20] R. Pan, L. Breslau, B. Prabhakar, and S. Shenker. Approximate fairness through differential dropping (one page summary). ACM Computer Communication Review, Jan. 2002.

[21] R. Pan, B. Prabhakar, and K. Psounis. CHOKE, a stateless active queue management scheme for approximating fair bandwidth allocation. In Proceedings of the Conference on Computer Communications (IEEE Infocom), Mar. 2000.

[22] S. Shenker. Making greed work in networks: A game-theoretic analysis of switch service disciplines. IEEE/ACM Transactions on Networking, 3, 1995.

[23] Y. R. Yang and S. S. Lam. General AIMD congestion control. Technical Report UTCS TR-2000-09, University of Texas, Austin, Texas, May 2000.