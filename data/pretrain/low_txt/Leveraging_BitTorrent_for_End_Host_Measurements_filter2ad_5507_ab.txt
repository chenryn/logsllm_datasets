### Conducting Measurements with BitProbes

BitProbes can conduct measurements to a peer (P) only when P receives the BitProbes client IP from the tracker and decides to connect to it. In practice, this happens frequently, which is a significant benefit for BitProbes, especially since many end hosts use Network Address Translation (NAT). This section examines the rate at which new candidate IPs are discovered, regardless of whether those connections resulted in successful measurements.

The rate of discovering new candidates is an optimistic measure of BitProbes' coverage. First, it provides an upper bound on the number of possible measurements BitProbes can perform on our current testbed. Second, it indicates how quickly BitProbes exhausts the pool of available swarms and candidate peers from the swarm aggregation sites we crawled. The websites used were [The Pirate Bay](http://thepiratebay.org) and [Mininova](http://www.mininova.org).

### Leveraging BitTorrent for End Host Measurements

**Figure 1(a)** shows the number of distinct candidate IPs observed over the duration of our trace. During our week-long trace, the measurement nodes connected to or received connections from approximately 500,000 unique IP addresses. Given that the rate of new connections is roughly constant, we conclude that the pool of end hosts participating in swarms listed on our crawled sites is significantly larger than the number covered by our prototype system in a week. These results are promising for our plans for wider deployment. By adding more measurement nodes to BitProbes, we expect to increase the number and coverage of measurements significantly.

As we log data for longer periods, we anticipate an eventual decrease in the rate at which new end hosts are discovered. However, we are currently crawling only two BitTorrent aggregation sites, and we have already identified more popular BitTorrent swarm aggregation sites containing an order of magnitude more available swarms. Furthermore, crawling such sites is straightforward since they often provide RSS feeds of available swarms.

### Rate of Capacity Measurements

The raw number of connections provides an optimistic upper bound on the number of useful measurements possible with BitProbes. To provide concrete results, we integrated the MultiQ tool for capacity measurements [12].

For MultiQ to infer the upload capacity of an end host, a TCP flow with a significant number of packets must be sent by the end host to the measurement node. The packets are then analyzed by MultiQ to provide a capacity measurement. If the trace does not meet its correctness criteria, MultiQ will fail rather than return a potentially erroneous measurement. We provided MultiQ with all packet traces having more than 100 MTU-sized packets. During our trace, significant flows from 176,487 unique IP addresses were received. In 96,080 of these cases (54%), MultiQ reported an upload capacity estimate.

As shown in **Figure 1(a)**, the number of measurements increases steadily throughout our measurement period, providing upload capacity measurements of roughly 100,000 unique IPs in total. This means that approximately 20% of discovered end hosts provide targets amenable to measurement. In contrast to the upper bound provided by the total number of connections, these results offer a more conservative estimate of the likely number of targets BitProbes can provide to measurement tools. To measure capacity, MultiQ requires specific sanity checks on the number and sizing of packets, which are more stringent than what other tools might need. Additionally, obtaining TCP packet traces requires that end hosts peer with and optimistically unchoke BitProbes clients, while other techniques (such as TCP-Sidecar) might not require a packet trace.

### Network Coverage

Having confirmed that BitProbes can connect to and collect measurements from many thousands of distinct targets, we next examine whether these targets cover the administrative and prefix diversity of the Internet. We chose to build on the popularity of BitTorrent because we expected its popularity to be reflected in wide coverage. In this section, we examine whether we achieve this.

During our week-long measurement period, BitProbes discovered candidate hosts in 21,032 unique BGP prefixes. A BGP prefix corresponds to an entry in the global BGP routing table. As seen in **Figure 1(b)**, the rate of new prefix observations diminishes over the course of the trace. Almost half of the total number of prefixes observed were discovered during the first 24-hour interval. Even though the swarms joined have a large number of end hosts associated with them, many of these hosts are in a limited subsection of the Internet. We suspect this bias is due primarily to our limited selection of torrent aggregation sites, which cater primarily to English-speaking audiences in the US and Europe.

Coverage of BGP Autonomous Systems (ASes) exhibits properties similar to those of BGP prefixes. Connections to a total of 3,763 ASes were observed, with roughly half being discovered in the first 12 hours of operation. Because AS coverage and BGP prefix coverage are correlated, we expect our efforts to increase prefix coverage by diversifying our crawling to also increase AS coverage. Since one AS often corresponds to one Internet Service Provider (ISP) or Point of Presence (POP), higher coverage again requires crawling swarms of global or diverse regional interest. However, the activity and size of ASes vary significantly. The bias in our coverage at the AS level reflects skew in size. Because we do not preferentially probe targets based on AS, we will simply have more measurements to popular ASes and fewer to those less popular. Nevertheless, our current sources of candidate swarms are sufficient to cover approximately 20% of total ASes in one week [2].

### Capacity Distribution

Knowing the capacity distribution for end hosts on the Internet is crucial for designing distributed systems. This section reports on the observed upload capacity distribution recorded during our evaluation of BitProbes, given in **Figure 2(a)**. Since the measurements are of hosts running BitTorrent, we point out that these results are not completely general. For instance, users with dial-up connectivity are unlikely to participate in the distribution of multi-gigabyte files via BitTorrent.

A majority (70%) of hosts have an upload capacity between 350 Kbps and 1 Mbps. Only 10% of hosts have an upload capacity of 10 Mbps or more. However, the 5% of hosts with bandwidth capacities between 55 Mbps and 110 Mbps contribute 64% of the available resources, suggesting that successfully incorporating the resources of high-capacity clients is crucial for achieving high utilization in peer-to-peer systems. We make this capacity distribution public along with our BitTorrent trace data.

### Capacity as a Performance Predictor in BitTorrent

This section discusses the applicability of our quick capacity estimation framework to BitTorrent itself. As discussed in Section 2.2, BitTorrent employs a Tit-for-Tat (TFT) reciprocation strategy to encourage peers to contribute resources to the swarm. Although TFT tends to correlate contribution and performance, studies have suggested that in practice it often results in unfair peerings for high-capacity users [17]. One suggested method for avoiding this unfairness has been to use quick bandwidth estimation techniques as a basis for selecting peering relationships in BitTorrent. In this section, we evaluate the ability of MultiQ’s capacity estimates to predict observed upload rates from those peers from which we receive data.

**Figure 2(b)** gives the average of observed upload rates at which we receive piece data from peers as a function of the measured upload capacity of peers in a given capacity range. Error bars show the 5th and 95th percentiles of observed download rates of our modified client.

Because BitTorrent shares available upload capacity among several TCP connections simultaneously, we do not expect observed download rates as seen by a single peer to match capacity directly. However, for quick bandwidth estimation to select peers with good performance, the rank ordering of estimated bandwidth and observed performance should be correlated. This is not the case in BitTorrent today, with observed download rates varying quite a bit for a given capacity (shown in **Figure 2(b)**). From the perspective of a single peer in a single swarm, it is impossible to determine how many TCP connections a particular client has, whether the client’s user has imposed application-level bandwidth limits, or whether the user is participating in multiple swarms simultaneously, all of which will cause the actual transfer rate to be much lower than raw capacity.

Still, average performance tends to correlate with estimated capacity, suggesting that although quick bandwidth estimation cannot serve as a replacement for ranking peers by observed performance, it may provide early guidance for selecting peers in the absence of other information.

### Related Work

The opportunistic measurement strategy of BitProbes is broadly similar to that of PlanetSeer [8], which monitors users of the CoDeeN CDN [2] to detect failures on the Internet. By monitoring existing TCP connections to CoDeeN users, it detects when a large number of clients simultaneously disconnect. After such events, PlanetSeer probes the remote nodes from different vantage points. If an endpoint is reachable from some vantage points but not others, it is recorded as a route abnormality. Using CoDeeN as a data source, PlanetSeer observes between 9,000–12,000 clients per day. Sherwood and Spring [13] note that when monitoring the CoDeeN network for a week, 22,428 unique IP addresses were seen using hundreds of available PlanetLab nodes as measurement hosts. In contrast, BitProbes observes 500,000 connections to unique IP addresses in a week from only eight vantage points.

The TCP-Sidecar project shares our goal of avoiding complaints from system administrators [13]. While BitProbes focuses on providing candidate targets to generic measurement tools, TCP-Sidecar is designed to construct an accurate router-level topology of the Internet using a modified traceroute tool. Since traceroutes can cause IDS alarms, modified traceroute packets are embedded into existing TCP connections. TCP-Sidecar uses TCP connections from two sources: 1) passive monitoring of CoDeeN, resulting in measurements to 22,428 unique end-hosts per week and 2) downloading robots.txt files from web-servers, providing 166,745 unique IP addresses. Both of these sources of candidate targets are limited. In contrast, including TCP-Sidecar’s topology measurement techniques in the BitProbes framework may dramatically increase their coverage and effectiveness.

Casado et al. [18] examine unconventional sources of traffic, including spam, worms, and automated scans, yielding a potential coverage of several hundred thousand IP addresses. The authors point out that CAIDA received probes from 359,000 infected servers during the first Code Red outbreak. Using tools similar to those of BitProbes, their system can infer link and path properties to the traffic sources. The number of significant flows from unique sources was limited, however, with only 2,269 unique sources during a 24-hour period. In comparison, BitProbes attracted 176,487 flows of more than 100 MTU-sized packets from unique sources during one week of operation. On the whole, BitTorrent appears to be a more fruitful source of candidate targets than other sources previously considered.

### Conclusion

This paper describes BitProbes, a measurement system for end hosts on the Internet. BitProbes attracts connections from close to half a million unique end-hosts per week by leveraging the popularity of BitTorrent peer-to-peer file-sharing swarms. The observed connections are used to infer link latency, topology, and capacity. All measurements are performed unobtrusively, avoiding probes that might trigger IDS alarms. Prototype results demonstrate that BitProbes provides close to an order of magnitude more candidate connections than previous systems relying on opportunistic measurement, suggesting the leverage of attracting measurement candidates via BitTorrent.

### References

1. Freedman, M.J., Freudenthal, E., Mazières, D.: Democratizing content publication with Coral. In: NSDI. (2004)
2. Wang, L., Park, K., Pang, R., Pai, V.S., Peterson, L.L.: Reliability and security in the CoDeeN content distribution network. In: USENIX. (2004)
3. Akamai Inc: Akamai: The trusted choice for online business. <http://www.akamai.com> (2006)
4. Skype: The whole world can talk for free. <http://www.skype.com> (2006)
5. Cohen, B.: Incentives build robustness in BitTorrent. In: P2PEcon. (2003)
6. Madhyastha, H.V., Isdal, T., Piatek, M., Dixon, C., Anderson, T., Krishnamurthy, A., Venkataramani, A.: iPlane: An information plane for distributed services. In: OSDI. (2006)
7. Anderson, D.G., Balakrishnan, H., Kaashoek, M.F., Morris, R.: Resilient Overlay Networks. In: SOSP. (2001)
8. Zhao, M., Zhang, C., Pai, V., Peterson, L., Wang, R.: PlanetSeer: Internet path failure monitoring and characterization in wide-area services. In: OSDI. (2004)
9. Saroiu, S., Gummadi, P., Gribble, S.: Sprobe: A fast technique for measuring bottleneck bandwidth in uncooperative environments (2002)
10. Parker, A.: The true picture of p2p filesharing. <http://www.cachelogic.com/home/pages/studies/2004_01.php> (2004)
11. Cohen, B.: BitTorrent Protocol Specifications v1.0. <http://www.bittorrent.org/protocol.html> (2002)
12. Katti, S., Katabi, D., Blake, C., Kohler, E., Strauss, J.: MultiQ: Automated detection of multiple bottleneck capacities along a path. In: IMC. (2004)
13. Sherwood, R., Spring, N.: Touring the Internet in a TCP Sidecar. In: IMC. (2006)
14. RSS Advisory Board: Really Simple Syndication: RSS 2.0 Specification. <http://www.rssboard.org/rss-specification> (2006)
15. Meyer, D.: RouteViews. <http://www.routeviews.org> (2005)
16. RIPE NCC: Routing Information Service. <http://www.ripe.net/ris/> (2006)
17. Bharambe, A., Herley, C., Padmanabhan, V.: Analyzing and Improving a BitTorrent Network’s Performance Mechanisms. In: IEEE INFOCOM. (2006)
18. Casado, M., Garfinkel, T., Cui, W., Paxson, V., Savage, S.: Opportunistic measurement: Extracting insight from spurious traffic. In: HotNets. (2005)