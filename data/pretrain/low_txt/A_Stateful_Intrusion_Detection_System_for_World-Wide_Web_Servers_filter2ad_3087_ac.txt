### Event and Model Attack Analysis from Multiple Perspectives

To leverage the capabilities provided by the modules, a scenario writer simply needs to import the requisite STATL language extensions, as illustrated in Figure 6.

By utilizing WebSTAT's ability to operate on different event streams, the effectiveness of buffer overflow detection was significantly enhanced. Specifically, an improved buffer overflow attack scenario was developed. This scenario examines both web server access logs and actual client requests as they traverse the network, using a network-based event provider. The provider reads TCP/IP streams between clients and the web server, analyzing them for binary data. If binary data is detected at the network level, the scenario checks for a corresponding entry in the server logs. If no matching entry is found within a specified timeout period, the scenario assumes that the attack has succeeded, and the web server process is now executing the code sent by the attacker. The state-transition diagram for this scenario is shown in Figure 7.

This scenario effectively detects the recent Apache chunked-encoding exploit, which typically does not leave an entry in the server logs.

### Document Root Escape Attack

Cross-domain analysis is not limited to web server logs and network traffic. For instance, the document root escape scenario correlates events from the web server log with operating system-level audit records to detect file system access violations. Specifically, it identifies if a client has gained unauthorized access to a file outside the web server’s document root. The state-transition diagram for this scenario is shown in Figure 8.

### Performance Evaluation

A performance evaluation of the WebSTAT system was conducted to quantify the overhead incurred in a production web server. The experimental testbed consisted of a single system acting as a web server, loaded by multiple client systems. The web server was a Pentium IV 1.8 GHz machine with 1 GB of RDRAM running Apache 2.0.40 on a RedHat 8.0 installation. The clients were also Pentium IV 1.8 GHz machines with 1 GB of RDRAM each, running the WebStone 2.5 benchmark on RedHat 8.0. All systems used Intel EtherExpress 10/100 Ethernet cards in 100BaseT full-duplex mode, connected via a Cisco Catalyst 3500 XL switch.

The evaluation measured average throughput and response times under a typical real-world workload for both standalone Apache and Apache monitored by WebSTAT. WebStone was configured to perform five iterations of 10-minute runs, varying the number of clients from 100 to 500 in increments of 50. The benchmark targeted an augmented mirror of the UC Santa Barbara Computer Science web server, which contained a mix of static and dynamic pages. Client traffic included requests for static and dynamic pages, as well as various attacks, weighted to approximate typical access patterns. Apache was left in its default configuration, except for modifications to the server pool to increase the maximum number of concurrent client requests. WebSTAT was configured for online detection with all attack scenarios enabled.

Figure 9 shows the minimum, average, and maximum throughput for standalone Apache and Apache monitored by WebSTAT. Both systems performed near the theoretical limits of the testbed network hardware. Apache is clearly I/O-bound, while WebSTAT is primarily CPU-bound, spending most of its time performing regular expression matching against client requests. This CPU overhead explains the slight impact on average throughput, but the performance degradation is limited to less than 0.5% in the average case.

Figure 10 displays the minimum, average, and maximum response times for standalone Apache and Apache monitored by WebSTAT. It is evident that Apache’s response times increase linearly with the number of concurrent client requests, but WebSTAT has virtually no impact on these response times.

The collected data demonstrates that WebSTAT incurs a small performance overhead in average web server throughput. However, the drop in performance may be acceptable given the advanced detection capabilities provided. Careful site-specific tuning, not applied in this evaluation, could further reduce WebSTAT’s impact on web server performance.

### Conclusions and Future Work

This paper presents WebSTAT, an approach for stateful intrusion detection implemented by extending the STAT framework to create a sensor for detecting web-based attacks. WebSTAT is novel in providing a sophisticated language for describing multi-step attacks in terms of states and transitions, automatically compiled into dynamically linked libraries. This offers flexibility and extensibility. WebSTAT operates on multiple event streams, correlating network-level and operating system-level events with server logs, enhancing detection and reducing false positives.

WebSTAT has been evaluated for its attack detection capabilities and performance impact on deployed web servers. The results show that stateful intrusion detection can be performed in real-time on high-performance servers.

Future work includes further extending the system for more integrated analysis of web server logs and events from other domains, such as network traffic or operating system-level event logs, as demonstrated in Section 4.6. More detailed performance experiments will also be conducted.

The current implementation of WebSTAT is available at [http://www.cs.ucsb.edu/~rsg/STAT/software](http://www.cs.ucsb.edu/~rsg/STAT/software).

### Acknowledgements

This research was supported by the Army Research Office under agreement DAAD19-01-1-0484. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright annotation thereon. The views and conclusions are those of the author and do not necessarily represent the official policies or endorsements of the Army Research Office or the U.S. Government.

### References

[1] M. Almgren, H. Debar, and M. Dacier. A lightweight tool for detecting web server attacks. In Proceedings of the ISOC Symposium on Network and Distributed Systems Security, San Diego, CA, February 2000.

[2] M. Almgren and U. Lindqvist. Application-Integrated Data Collection for Security Monitoring. In Proceedings of Recent Advances in Intrusion Detection (RAID), LNCS, pages 22–36, Davis, CA, October 2001. Springer.

[3] CERT/CC. “Code Red Worm” Exploiting Buffer Overflow In IIS Indexing Service DLL. Advisory CA-2001-19, July 2001.

[4] CERT/CC. Apache/mod ssl Worm. Advisory CA-2002-27, October 2002.

[5] D. Curry and H. Debar. Intrusion Detection Message Exchange Format: Extensible Markup Language (XML) Document Type Definition. draft-ietf-idwg-idmef-xml-07.txt, June 2002.

[6] S.T. Eckmann, G. Vigna, and R.A. Kemmerer. STATL: An Attack Language for State-based Intrusion Detection. Journal of Computer Security, 10(1/2):71–104, 2002.

[7] R. Fielding. wwwstat: HTTPd Logfile Analysis Software. http://ftp.ics.uci.edu/pub/websoft/wwwstat/, November 1996.

[8] Paul Helman and Gunar Liepins. Statistical Foundations of Audit Trail Analysis for the Detection of Computer Misuse. In IEEE Transactions on Software Engineering, volume Vol 19, No. 9, pages 886–901, 1993.

[9] K. Ilgun, R.A. Kemmerer, and P.A. Porras. State Transition Analysis: A Rule-Based Intrusion Detection System. IEEE Transactions on Software Engineering, 21(3):181–199, March 1995.

[10] H. S. Javitz and A. Valdes. The NIDES Statistical Component Description and Justification. Technical report, SRI International, Menlo Park, CA, March 1994.

[11] D. Klein. Defending Against the Wily Surfer: Web-Based Attacks and Defenses. In Proceedings of the USENIX Workshop on Intrusion Detection and Network Monitoring, Santa Clara, CA, April 1999.

[12] C. Ko, M. Ruschitzka, and K. Levitt. Execution Monitoring of Security-Critical Programs in Distributed Systems: A Specification-based Approach. In Proceedings of the 1997 IEEE Symposium on Security and Privacy, pages 175–187, May 1997.

[13] M. Koster. A Method for Web Robots Control. Internet Draft, draft-koster-robots-00.txt, December 1996.

[14] U. Lindqvist and P.A. Porras. Detecting Computer and Network Misuse with the Production-Based Expert System Toolset (P-BEST). In IEEE Symposium on Security and Privacy, pages 146–161, Oakland, California, May 1999.

[15] T.H. Ptacek and T.N. Newsham. Insertion, Evasion and Denial of Service: Eluding Network Intrusion Detection. Technical report, Secure Networks, January 1998.

[16] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Proceedings of the USENIX LISA ’99 Conference, November 1999.

[17] Sun Microsystems, Inc. Installing, Administering, and Using the Basic Security Module. 2550 Garcia Ave., Mountain View, CA 94043, December 1991.

[18] Tcpdump and Libpcap Documentation. http://www.tcpdump.org/, June 2002.

[19] Security Tracker. Vulnerability statistics april 2001-march 2002. http://www.securitytracker.com/learn/statistics.html, April 2002.

[20] A. Valdes and K. Skinner. An Approach to Sensor Correlation. In Proceedings of RAID 2000, Toulouse, France, October 2000.

[21] G. Vigna, S. Eckmann, and R. Kemmerer. The STAT Tool Suite. In Proceedings of DISCEX 2000, Hilton Head, South Carolina, January 2000. IEEE Computer Society Press.

[22] G. Vigna, R.A. Kemmerer, and P. Blix. Designing a Web of Highly-Configurable Intrusion Detection Sensors. In W. Lee, L. Mé, and A. Wespi, editors, Proceedings of the 4th International Symposiun on Recent Advances in Intrusion Detection (RAID 2001), volume 2212 of LNCS, pages 69–84, Davis, CA, October 2001. Springer-Verlag.

[23] G. Vigna, F. Valeur, and R.A. Kemmerer. Designing and Implementing a Family of Intrusion Detection Systems. In Proceedings of the 9th European Software Engineering Conference, Helsinki, Finland, September 2003.

[24] D. Wagner and D. Dean. Intrusion Detection via Static Analysis. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2001. IEEE Press.

[25] C. Warrender, S. Forrest, and B.A. Pearlmutter. Detecting intrusions using system calls: Alternative data models. In IEEE Symposium on Security and Privacy, pages 133–145, 1999.