### Incremental Training and Automatic Updates

The system employs an incremental training process, which is fully automated. This automation eliminates the need for manual updates of prior signatures, significantly reducing the tedium associated with maintaining a robust signature set.

### Experiment 1: Performance with Incremental Data

- **20% SQLmap Dataset**: When we incorporated 20% of the SQLmap dataset, the system achieved a True Positive Rate (TPR) of 89.13% and a False Positive Rate (FPR) of 0.039%. 
- **40% SQLmap Dataset**: After increasing the training dataset to 40% of the SQLmap samples, the TPR improved to 91.15%, while the FPR slightly increased to 0.044%.

In both scenarios, we utilized sets of 9 signatures. The TPR increment of approximately 2% in each round can be attributed to the randomization of the SQLmap set and its division into 20% parts, suggesting that pSigene may recognize similar attack patterns during the test phase.

### Experiment 2: Comparison with Perdisci's Approach

We compared pSigene with the approach proposed by Perdisci et al. [29] for the automatic generation of signatures for HTTP-based malware. This comparison was chosen because:
1. Perdisci's method claims to generate signatures for unseen variants of malware.
2. It involves the analysis of HTTP traces, similar to our SQL injection (SQLi) scenario.
3. It is based on the token-subsequence technique, commonly used for generating signatures for polymorphic worms [24].

#### Modifications to Perdisci's Method

Since our evaluation focuses on SQL injection attacks, we made two key modifications to Perdisci's original technique:
1. **Coarse-Grained Clustering**: We did not implement this step as it was not applicable to our scenario. Perdisci's method clusters malware samples based on structural similarities among sequences of HTTP requests, but in our case, each HTTP request is considered independently.
2. **Fine-Grained Clustering**: We adjusted the distance metric computation between pairs of HTTP requests. We used the same predefined weights (10 for parameter values and 8 for parameter names) as in Perdisci's method, but disregarded the method and path of the HTTP request. For SQLi, the parameter values, which include the actual SQL query, are the most critical part of the URL.

Using the same training set as pSigene, we generated a signature set with the modified Perdisci implementation. The fine-grained clustering produced 145 clusters, which were reduced to 27 after removing single-sample clusters and those producing overly short signatures. The final cluster merging phase resulted in 10 signatures, using a threshold of 0.1 to ensure near-identical signatures were merged.

#### Results

- **Perdisci's Approach**: Achieved a TPR of 5.79% and an FPR of 0%. The FPR is excellent, indicating no misclassification of benign samples as malicious. However, the low TPR highlights the limitations of this approach in detecting variations of known attacks.
- **Training Set Testing**: When using the same training set for testing, the TPR was 76.5%, indicating that Perdisci's method is more effective in creating signatures from previously seen samples.

### Experiment 3: Performance Evaluation

We evaluated the overhead of pSigene signatures by measuring the processing time per HTTP request for each signature in the SQLmap dataset. The results show:
- **Minimum Processing Time**: 390 μs
- **Average Processing Time**: 995 μs
- **Maximum Processing Time**: 1950 μs

On average, pSigene introduces a slowdown of 17X and 11X compared to Modsec and Bro signatures, respectively. The primary cause of the increased processing time is the `count_all()` function, which counts regex matches for each HTTP request string. Signatures with a large number of `count_all()` invocations consume a disproportionately large fraction of the total processing time.

Despite running these measurements on a resource-constrained machine (700 MHz CPU, 512 MB RAM), the worst-case processing time was less than 2 ms. This suggests that signature matching in pSigene will not become a bottleneck, especially if parallelized. Bro's cluster mode supports parallel signature matching, though this optimization is not yet implemented.

### Discussion

This work underscores the importance of representative training data for creating effective clusters and signatures. The training data should reflect the types of attacks likely to be encountered, though exact matches are not necessary. The probabilistic nature of our framework allows for the detection of previously unseen attacks, albeit with some false positives.

For example, signature 4 in pSigene includes regex patterns such as `char`, `@`, `information_schema`, and `ch(a)?r\s*?\(\s*? \d`. The training set contains SQLi samples with multiple occurrences of these patterns. In the testing set, we observed samples with varying subsets of these patterns, ranging from zero to thirty occurrences of `char`.

### Future Work

Future work will focus on implementing the incremental update operation, with open design choices regarding the machine learning techniques to use. We also plan to improve the online performance of the signature matching process through parallelization and code optimization within Bro.

### Conclusions

pSigene is a system for the automatic generation and update of intrusion signatures, leveraging public attack data. Our evaluations for SQLi attacks show that pSigene outperforms manually created signature sets, allowing for the detection of new attack variations. The system's ability to automatically update signatures makes it a scalable solution, particularly for administrators with limited resources.

### References

[1] ARACHNI. Web application security scanner framework. http://www.arachni-scanner.com, February 2013.

[2] BBC. Royal navy website attacked by Romanian hacker. http://www.bbc.co.uk/news/technology-11711478, November 8, 2010.

[3] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. N. Venkatakrishnan. Notamper: automatic blackbox detection of parameter tampering opportunities in web applications. In Proc. ACM CCS, 2010.

[4] P. Bisht, A. P. Sistla, and V. Venkatakrishnan. Automatically preparing safe SQL queries. In Proc. IFCA Conf. Financial Cryptography, 2010.

[5] R. Chandra, T. Kim, M. Shah, N. Narula, and N. Zeldovich. Intrusion recovery for database-backed web applications. In Proc. ACM SOSP, 2011.

[6] J. Clarke. SQL Injection Attacks and Defense. Syngress Publishing, 1st edition, 2009.

[7] B. Damele and M. Stampar. SQLmap. http://sqlmap.org, July 2012.

[8] DarkReading. Adobe hacker says he used SQL injection to grab database of 150,000 user accounts, November 2012.

[28] V. Paxson. Bro: a system for detecting network intruders in real-time. Computer Networks, 31(23-24):2435–2463, 1999.

[9] R. Di Pietro and L. V. Mancini. Intrusion Detection Systems. Springer Publishing Company, Incorporated, 1 edition, 2008.

[10] M. B. Eisen, P. T. Spellman, P. O. Brown, and D. Botstein. Cluster analysis and display of genome-wide expression patterns. Proc Natl Acad Sci, 95(25):14863–14868, Dec 1998.

[11] S. Eisenstat. Efficient implementation of a class of preconditioned conjugate gradient methods. SIAM Journal on Scientific and Statistical Computing, 2(1):1–4, 1981.

[12] O. I. S. Foundation. Suricata intrusion detection and prevention engine. http://www.openinfosecfoundation.org, 2012.

[13] O. S. Foundation. Open source vulnerability database. http://www.osvdb.org, 2012.

[14] D. Goodin. New Sony hack exposes more consumer passwords. The Register, June 3, 2011.

[15] Google. Google custom search API. https://developers.google.com/custom-search, 2012.

[29] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of HTTP-based malware and signature generation using malicious network traces. In Proc. USENIX NSDI, 2010.

[30] A. Prelic, S. Bleuler, P. Zimmermann, A. Wille, P. Buhlmann, W. Gruissem, L. Hennig, L. Thiele, and E. Zitzler. A systematic comparison and evaluation of biclustering methods for gene expression data. Bioinformatics, 22(9):1122–1129, 2006.

[31] W. Robertson, F. Maggi, C. Kruegel, and G. Vigna. Effective anomaly detection with scarce training data. In Proc. NDSS Symposium, 2010.

[32] W. Robertson, G. Vigna, C. Kruegel, and R. Kemmerer. Using Generalization and Characterization Techniques in the Anomaly-based Detection of Web Attacks. In Proc. NDSS Symposium, 2006.

[33] R. Salgado. Websec SQL injection pocket reference. http://goo.gl/FGAhc, 2011.

[16] IBM. IBM X-Force 2012 trend and risk report. http://www-03.ibm.com/security/xforce/, March 2013.

[34] O. Security. Exploit database. http://www.exploit-db.com, 2012.

[17] A. Kamra, E. Bertino, and G. Lebanon. Mechanisms for database intrusion detection and response. In Proc. ACM SIGMOD IDAR, 2008.

[18] R. Kaushik and R. Ramamurthy. Efficient auditing for complex SQL queries. In Proc. ACM SIGMOD, 2011.

[19] C. Kreibich and J. Crowcroft. Honeycomb: creating intrusion detection signatures using honeypots. SIGCOMM Comput. Commun. Rev., 34(1):51–56, jan 2004.

[35] SecurityFocus. Bugtraq vulnerability database. http://www.securityfocus.com/vulnerabilities, 2008.

[36] R. Sekar. An efficient black-box technique for defeating web application attacks. In NDSS Symposium, 2009.

[37] Sourcefire. Snort IDS. http://www.snort.org, 2008.

[38] Z. Su and G. Wassermann. The essence of command injection attacks in web applications. In Proc. ACM POPL, 2006.

[20] C. Kruegel. Intrusion Detection and Correlation: Challenges and Solutions. Springer-Verlag TELOS, 2004.

[39] Subgraph. Vega, web application security platform. http://www.subgraph.com, February 2013.

[21] S. Y. Lee, W. L. Low, and P. Y. Wong. Learning fingerprints for a database intrusion detection system. In Proc. ESORICS, 2002.

[22] Z. Li, M. Sanghi, Y. Chen, M.-Y. Kao, and B. Chavez. Hamsa: fast signature generation for zero-day polymorphic worms with provable attack resilience. In Proc. IEEE Symp. Security and Privacy, 2006.

[23] A. Moscaritolo. Oracle’s mysql.com hacked via SQL injection, March 28, 2011.

[24] J. Newsome, B. Karp, and D. Song. Polygraph: automatically generating signatures for polymorphic worms. In Proc. IEEE Security and Privacy, 2005.

[25] NIST. National vulnerability database. http://nvd.nist.gov/nvd.cfm, 2008.

[26] Oracle. MySQL 5.5 reference manual, rev. 31755, August 2012.

[40] S. V. R. Team. Snort rules. http://www.snort.org/snort-rules, 2012.

[41] Trustwave. ModSecurity core rule set. http://www.owasp.org/index.php/Category:OWASP ModSecurity Core Rule Set Project, January 2012.

[42] G. Vigna, F. Valeur, D. Balzarotti, W. Robertson, C. Kruegel, and E. Kirda. Reducing Errors in the Anomaly-based Detection of Web-Based Attacks through the Combined Analysis of Web Requests and SQL Queries. J. Comp. Sec., 17(3), 2009.

[43] WAVSEP. Web application vulnerability scanner evaluation project. https://code.google.com/p/wavsep, July 2012.

[44] V. Yegneswaran, J. T. Griffin, P. Barford, and S. Jha. An architecture for generating semantics-aware signatures. In Proc. USENIX Security, 2005.

[27] PacketStorm. Packetstorm security portal. http://packetstormsecurity.org, 2012.