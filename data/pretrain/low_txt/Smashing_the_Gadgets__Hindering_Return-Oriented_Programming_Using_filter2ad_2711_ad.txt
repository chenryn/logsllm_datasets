### Table III: Results of Running Q [26] and MONA [27] on the Original Non-ASLR DLLs and Their Unmodified Parts After Randomization

| Application/DLL | Orig. | Rand. | Q Success | Mona Success |
|-----------------|-------|-------|-----------|--------------|
| Adobe Reader    | ✔     | ✘ (VA)| ✘         | ✘            |
| Integard Pro    | ✔     | ✘     | ✘         | ✘            |
| Mplayer         | ✔     | ✘ (VA,VP) | ✘         | ✘            |
| msvcr71.dll     | ✔     | ✘     | ✘         | ✘            |
| mscorie.dll     | ✔     | ✘     | ✘         | ✘            |
| mfc71u.dll      | ✔     | ✘     | ✘         | ✘            |

**Note:** VA = Virtual Address, VP = Virtual Pointer

In all cases, both tools failed to generate a ROP payload using solely non-randomized gadgets. While this outcome is favorable in preventing automated construction of reliable ROP code, it does not exclude the possibility that a functional payload could still be constructed manually or with more sophisticated ROP compilers. This demonstrates that in-place code randomization significantly raises the bar for attackers, making the construction of reliable ROP code much harder, even in an automated way.

### Gadget Discovery and Code Compilation

Both Q and MONA operate in two phases: gadget discovery and code compilation. During the first phase, they search for useful gadgets and categorize them according to their functionality. Tables IV and V show the number of useful gadgets as reported by Q and MONA, respectively, before and after randomization. The percentage of remaining gadgets (last column) indicates that many gadget types have very few available gadgets or are eliminated entirely, which makes the construction of reliable ROP code much more challenging.

### Discussion

In-place code randomization may not always randomize a significant part of the executable address space, and it is difficult to determine whether the remaining unmodifiable gadgets would be sufficient for constructing useful ROP code. This depends on the code in the non-ASLR address space of the particular vulnerable process and the operations needed to be achieved using ROP code. Turing-completeness is irrelevant for practical exploitation, and none of the gadget sets used in the tested ROP payloads is Turing-complete. Therefore, in-place code randomization should be used as a mitigation technique, similar to application armoring tools like EMET [51], rather than as a complete prevention solution.

Previous studies [2], [5], [26] have shown that the feasibility of building a ROP payload is proportional to the size of the non-ASLR code base and inversely proportional to the complexity of the desired functionality. Our experimental evaluation shows that in all cases, the space of the remaining useful gadgets after randomization is sufficiently small to prevent the automated generation of a ROP payload. The tested ROP payloads are far from the complexity required for a fully-fledged ROP-based implementation, such as dumping a malicious executable on disk and executing it. Currently, this functionality is handled by embedded shellcode, allowing us to view these ROP payloads as sophisticated versions of return-to-libc.

We stress that the randomization coverage of our prototype implementation is a lower bound for what would be possible using more advanced code extraction methods [41], [49]. In future work, we plan to relax some of the conservative assumptions made in instruction reordering and register reassignment, using data flow analysis based on constant propagation.

Given its practically zero overhead and direct applicability to third-party executables, in-place code randomization can be readily combined with existing techniques to improve diversity and reduce overheads. For instance, compiler-level techniques against ROP attacks [15], [16] increase the size of the generated code and affect runtime overhead. Incorporating code randomization to eliminate some gadgets could offer savings in code expansion and runtime overheads. Our technique is also applicable in conjunction with randomization methods based on code block reordering [17]–[19] to further increase randomization entropy.

In-place code randomization at the binary level is not applicable for software that performs self-checksumming or other runtime code integrity checks. Although not encountered in the tested applications, some third-party programs may use such checks for hindering reverse engineering. Similarly, packed executables cannot be modified directly. However, in most third-party applications, only the setup executable used for software distribution is packed, and after installation, all extracted PE files are available for randomization.

### Related Work

Almost a decade after the introduction of the return-to-libc technique [28], the wide adoption of non-executable memory page protections in popular operating systems sparked a new interest in more advanced forms of code-reuse attacks. The introduction of return-oriented programming [2] and its advancements [3]–[6], [8], [26], [33], [67]–[69] led to its adoption in real-world attacks [10], [11]. ROP exploits are facilitated by the lack of complete address space layout randomization in both Linux [12] and Windows [6], which otherwise would prevent or at least hinder [14] these attacks.

Besides address space randomization, process diversity can also be increased by randomizing the code of each executable segment, e.g., by permuting the order of functions or basic blocks [17]–[19]. However, these techniques are applicable only if the source code or symbolic debugging information of the application to be protected is available. Our approach is inspired by these works and aims to bring the benefits of code randomization to COTS software, for which usually no source code or debugging information is available.

Return-oriented code disrupts the normal control flow of a process by diverting its execution to potentially unintended code fragments, most of which would never be targets of control transfer instructions. Enforcing the integrity of control transfers [20] can effectively protect against code-reuse attacks. Compile-time techniques also prevent the construction of ROP code by generating machine code that does not contain unintended instruction sequences ending with indirect control transfer instructions and by safeguarding any indirect branches in the actual code using canaries or additional indirection [15], [16]. In contrast to the above approaches, although in-place code randomization does not completely preclude the possibility that working ROP code can be constructed, it can be applied directly to third-party software without access to source code or debugging information.

Another line of defenses is based on runtime solutions that monitor either the frequency of `ret` instructions [22], [23], or the integrity of the stack [21]. Besides being ineffective against ROP code that uses indirect control transfer instructions other than `ret`, their increased runtime overhead limits their adoption.

### Conclusion

The increasing number of exploits against Windows applications that rely on return-oriented programming to bypass exploit mitigations such as DEP and ASLR necessitates the deployment of additional protection mechanisms to harden imminently vulnerable third-party applications against these threats. Towards this goal, we have presented in-place code randomization, a technique that offers probabilistic protection against ROP attacks by randomizing the code of third-party applications using various narrow-scope code transformations.

Our approach is practical: it can be applied directly to third-party executables without relying on debugging information and does not introduce any runtime overhead. At the same time, it is effective: our experimental evaluation using in-the-wild ROP exploits and two automated ROP code construction toolkits shows that in-place code randomization can thwart ROP attacks against widely used applications, including Adobe Reader on Windows 7, and can prevent the automated generation of ROP code resistant to randomization.

Our prototype implementation is publicly available, and as part of our future work, we plan to improve its randomization coverage using more advanced data flow analysis methods and extend it to support ELF and 64-bit executables.

### Availability

Our prototype implementation is publicly available at:
http://nsl.cs.columbia.edu/projects/orp

### Acknowledgements

We are grateful to the authors of Q for making it available to us, and especially to Edward Schwartz for his assistance. We also thank Úlfar Erlingsson and Periklis Akritidis for their valuable feedback on earlier versions of this paper. This work was supported by DARPA and the US Air Force through Contracts DARPA-FA8750-10-2-0253 and AFRL-FA8650-10-C-7024, respectively, and by the FP7-PEOPLE-2009-IOF project MALCODE, funded by the European Commission under Grant Agreement No. 254116. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government, DARPA, or the Air Force.

### References

[1] M. Miller, T. Burrell, and M. Howard, “Mitigating software vulnerabilities,” Jul. 2011, http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=26788.
[2] H. Shacham, “The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86),” in Proceedings of the 14th ACM conference on Computer and Communications Security (CCS), 2007.
[3] S. Checkoway, A. J. Feldman, B. Kantor, J. A. Halderman, E. W. Felten, and H. Shacham, “Can DREs provide long-lasting security? the case of return-oriented programming and the AVC advantage,” in Proceedings of the 2009 conference on Electronic Voting Technology/Workshop on Trustworthy Elections (EVT/WOTE), 2009.
[4] R. Hund, T. Holz, and F. C. Freiling, “Return-oriented rootkits: bypassing kernel code integrity protection mechanisms,” in Proceedings of the 18th USENIX Security Symposium, 2009.
[5] T. Dullien, T. Kornau, and R.-P. Weinmann, “A framework for automated architecture-independent gadget search,” in Proceedings of the 4th USENIX Workshop on Offensive Technologies (WOOT), 2010.
[6] D. A. D. Zovi, “Practical return-oriented programming.” Boston, 2010.
[7] P. Solé, “Hanging on a ROPe,” http://www.immunitysec.com/downloads/DEPLIB20_ekoparty.pdf.
[8] D. A. D. Zovi, “Mac OS X return-oriented exploitation.” RECON, 2010.
[9] P. Vreugdenhil, “Pwn2Own 2010 Windows 7 Internet Explorer 8 exploit,” http://vreugdenhilresearch.nl/Pwn2Ownl2010-Windows7-InternetExplorer8.pdf.
[10] K. Baumgartner, “The ROP pack,” in Proceedings of the 20th Virus Bulletin International Conference (VB), 2010.
[11] M. Parkour, “An overview of exploit packs (update 9) April 5 2011,” http://contagiodump.blogspot.com/2010/06/overview-of-exploit-packs-update.html.
[12] G. Fresi Roglia, L. Martignoni, R. Paleari, and D. Bruschi, “Surgically returning to randomized lib(c),” in Proceedings of the 25th Annual Computer Security Applications Conference (ACSAC), 2009.
[13] H. Li, “Understanding and exploiting Flash ActionScript vulnerabilities.” CanSecWest, 2011.
[14] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh, “On the effectiveness of address-space randomization,” in Proceedings of the 11th ACM conference on Computer and Communications Security (CCS), 2004.
[15] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram, “Defeating return-oriented rootkits with ‘return-less’ kernels,” in Proceedings of the 5th European conference on Computer Systems (EuroSys), 2010.
[16] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda, “G-Free: defeating return-oriented programming through gadget-less binaries,” in Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC), 2010.
[17] S. Forrest, A. Somayaji, and D. Ackley, “Building diverse computer systems,” in Proceedings of the 6th Workshop on Hot Topics in Operating Systems (HotOS-VI), 1997.
[18] S. Bhatkar, R. Sekar, and D. C. DuVarney, “Efficient techniques for comprehensive protection from memory error exploits,” in Proceedings of the 14th USENIX Security Symposium, August 2005.
[19] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software,” in Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC), 2006.
[20] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity,” in Proceedings of the 12th ACM conference on Computer and Communications Security (CCS), 2005.
[21] L. Davi, A.-R. Sadeghi, and M. Winandy, “ROPdefender: A practical protection tool to protect against return-oriented programming,” in Proceedings of the 6th Symposium on Information, Computer and Communications Security (ASIACCS), 2011.
[22] P. Chen, H. Xiao, X. Shen, X. Yin, B. Mao, and L. Xie, “DROP: Detecting return-oriented programming malicious code,” in Proceedings of the 5th International Conference on Information Systems Security (ICISS), 2009.
[23] L. Davi, A.-R. Sadeghi, and M. Winandy, “Dynamic integrity measurement and attestation: towards defense against return-oriented programming attacks,” in Proceedings of the 2009 ACM workshop on Scalable Trusted Computing (STC), 2009.
[24] G. S. Kc, A. D. Keromytis, and V. Prevelakis, “Countering code-injection attacks with instruction-set randomization,” in Proceedings of the 10th ACM conference on Computer and Communications Security (CCS), 2003.
[25] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D. Zovi, “Randomized instruction set emulation to disrupt binary code injection attacks,” in Proceedings of the 10th ACM conference on Computer and Communications Security (CCS), 2003.
[26] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit hardening made easy,” in Proceedings of the 20th USENIX Security Symposium, 2011.
[27] Corelan Team, “Mona,” http://redmine.corelan.be/projects/mona.
[28] S. Designer, “Getting around non-executable stack (and fix),” http://seclists.org/bugtraq/1997/Aug/63.
[29] T. Newsham, “Non-exec stack,” 2000, http://seclists.org/bugtraq/2000/May/90.
[30] Nergal, “The advanced return-into-lib(c) exploits: PaX case study,” Phrack, vol. 11, no. 58, Dec. 2001.
[31] S. Krahmer, “x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique,” http://www.suse.de/~krahmer/no-nx.pdf.
[32] Ú. Erlingsson, “Low-level software security: Attack and defenses,” Microsoft Research, Tech. Rep. MSR-TR-07-153, 2007, http://research.microsoft.com/pubs/64363/tr-2007-153.pdf.
[33] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy, “Return-oriented programming without returns,” in Proceedings of the 17th ACM conference on Computer and Communications Security (CCS), 2010.
[34] F. B. Cohen, “Operating system protection through program evolution,” Computers and Security, vol. 12, pp. 565–584, Oct. 1993.
[35] P. Ször, The Art of Computer Virus Research and Defense. Addison-Wesley Professional, February 2005.
[36] E. Bhatkar, D. C. Duvarney, and R. Sekar, “Address obfuscation: an efficient approach to combat a broad range of memory error exploits,” in In Proceedings of the 12th USENIX Security Symposium, 2003.
[37] “/ORDER (put functions in order),” http://msdn.microsoft.com/en-us/library/00kh39zz.aspx.
[38] “Syzygy - profile guided, post-link executable reordering,” http://code.google.com/p/sawbuck/wiki/SyzygyDesign.
[39] “Profile-guided optimizations,” http://msdn.microsoft.com/en-us/library/e7k32f4k.aspx.
[40] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna, “Static disassembly of obfuscated binaries,” in Proceedings of the 13th USENIX Security Symposium, 2004.
[41] M. Smithson, K. Anand, A. Kotha, K. Elwazeer, N. Giles, and R. Barua, “Binary rewriting without relocation information,” University of Maryland, Tech. Rep., 2010, http://www.ece.umd.edu/~barua/without-relocation-technical-report10.pdf.
[42] P. Saxena, R. Sekar, and V. Puranik, “Efficient fine-grained binary instrumentation with applications to taint-tracking,” in Proceedings of the 6th annual IEEE/ACM international symposium on Code Generation and Optimization (CGO), 2008.
[43] Skape, “Locreate: An anagram for relocate,” Uninformed, vol. 6, 2007.
[44] M. Pietrek, “An in-depth look into the Win32 portable executable file format, part 2,” http://msdn.microsoft.com/en-us/magazine/cc301808.aspx.
[45] I. Guilfanov, “Jump tables,” http://www.hexblog.com/?p=68.
[46] ——, “Decompilers and beyond.” Black Hat USA, 2008.
[47] Hex-Rays, “IDA Pro Disassembler,” http://www.hex-rays.com/idapro/.
[48] X. Hu, T.-c. Chiueh, and K. G. Shin, “Large-scale malware indexing using function-call graphs,” in Proceedings of the 16th ACM conference on Computer and Communications Security (CCS), 2009.
[49] S. Nanda, W. Li, L.-C. Lam, and T.-c. Chiueh, “BIRD: Binary interpretation using runtime disassembly,” in Proceedings of the International Symposium on Code Generation and Optimization (CGO), 2006.
[50] L. C. Harris and B. P. Miller, “Practical analysis of stripped binary code,” SIGARCH Comput. Archit. News, vol. 33, pp. 63–68, December 2005.
[51] Microsoft, “Enhanced Mitigation Experience Toolkit v2.1,” http://www.microsoft.com/download/en/details.aspx?id=1677.