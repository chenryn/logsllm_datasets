### Title: Tackling Privilege Escalation with Offense and Defense at Black Hat EU 2019

Over the past few years, security researchers have extensively examined various JavaScript APIs. These APIs have been thoroughly audited and fuzzed for common memory corruption vulnerabilities such as buffer overflows, use-after-frees, and type confusions. However, a unique class of vulnerabilities has emerged that requires manual auditing rather than automated fuzzing. This class of bugs first surfaced in 2015, and researchers discovered how to exploit them to bypass built-in security restrictions within the JavaScript engine. By chaining these privilege escalations with undocumented features in Adobe Reader, they achieved reliable arbitrary code execution. As one bypass was patched, researchers found new and innovative ways to circumvent the restrictions. 

Moreover, exploiting these JavaScript API restriction bypasses exposed numerous memory corruption issues in less-audited, security-relevant JavaScript APIs. Even with sandbox protection, an untrusted document executing JavaScript code in a privileged context provided avenues for abuse.

To address this class of vulnerabilities, efforts were initiated on both the offensive and defensive fronts. This presentation will focus on these combined efforts, which leveraged the exploitation expertise of researchers and the engineering knowledge of developers to implement mitigations against these emerging weaknesses.

On the offensive side, researchers meticulously analyzed the methods by which JavaScript APIs could be abused to elevate execution from an unprivileged to a privileged context. On the defensive side, engineers used instances of privilege escalations to develop methods that interpret each escalation in the context of general security invariant violations. These security invariants can be described and understood through a formal framework of information flow security properties.

We will also discuss some of the surprising discoveries made by researchers who submitted their findings to the Zero Day Initiative program. These submissions were instrumental in verifying the effectiveness of the application hardening measures. Over the years, this multi-pronged approach has successfully eliminated a significant number of vulnerabilities in the security model implemented in JavaScript engines.