### 图11：PGA与D3（D2 + 功能框）的可扩展性

图11展示了PGA与D3（D2 + 功能框）在不同输入参数下的性能。具体包括：
- 组合时间
- 内存使用
- 输入图中的EPG数量（以千为单位）
- 输入图中的边数（以千为单位）
- 组合图中的边数（以千为单位）

### 逻辑标签在策略意图捕获中的应用

逻辑标签类似于PGA，可以有效地捕捉策略意图。这些标签已经在网络和非网络环境中得到了广泛的支持和倡导。例如，SELinux [9] 通过扩展属性为每个文件分配任意标签，并允许用户基于这些标签值定义访问控制策略。在网络策略框架中，GBP [6] 定义了一个以应用程序为中心的策略模型，其成员资格由逻辑标签确定，尽管它不建模标签之间的关系或提供图形模型。Flow-based Management Language (FML) [23] 是一种基于DATALOG的查询语言，用于指定逻辑实体（如从外部认证服务查询到的用户名）和条件（无线 vs. 有线）上的访问控制和转发策略。FML 已经演变为 Nlog [29] 和 OpenStack Congress 策略语言 [7]，后者可以跨多个云服务（计算、存储、网络等）表达策略。尽管具有表现力，但这些抽象并不适合于网络策略的图形模型，也不支持中间盒行为和服务链分析所需的自动化组合。

### 政策组合

许多框架支持手动组合网络策略，例如 [20, 34, 12, 21, 15, 19, 38]。Merlin [38] 假设一个用户层次结构（如网络管理员和租户），并允许租户仅对其明确授权的策略进行限制性细化，从而手动组合他们的意图。这种方法不适合组合需要冲突解决的模块化策略。一些框架 [20, 34, 24, 12, 21] 允许网络操作员编写模块化程序并手动将其组合成一个复杂程序，但缺乏冲突解决支持。此外，它们的组合过于粗粒度，无法自动分解和重新组合混合不同类型意图（如ACLs、服务链等）的复杂用户策略。其他框架引入了组合运算符来解决独立指定的访问控制策略 [15, 19] 和带宽要求 [19] 之间的冲突。它们将所有输入策略映射到单个层次树的叶节点，并为每个中间节点分配一个组合运算符。这种分配要么需要人类干预 [15]，要么是针对每种冲突类型预先确定的，难以自动处理多样化政策作者之间的任意冲突。

GBP [6] 要求用户手动编写连接多个EPG对的复合策略。用户编写条件、优先规则等，以确保任何流量在端点之间具有唯一且正确的策略。相比之下，PGA不仅支持模块化策略的自动化组合，据我们所知，它还是第一个探索独立约束每个策略以进行组合的模型。

### 扩展

[28, 42] 研究了将网络的动态时序行为作为有限状态机进行规范的方法。Kinetic [28] 可以与PGA共存；不同的SDN控制应用程序可以在Kinetic中编程生成PGA图形模型中的访问控制和服务链策略，然后PGA框架可以处理冲突进行组合。即，Kinetic控制端点的动态标签分配，而PGA则捕获和组合与每个标签（EPG）相关的网络策略。

[25, 17, 18] 探索了有效建模中间盒的方法。相比之下，PGA的建模更为抽象，但对于我们目标的组合场景已经足够。我们的正在进行的工作正在探索这些框架提供的更丰富建模能力在服务链分析和运行时验证服务链策略中的实用性。

Corybantic, Athens 和 Statesman [33, 13, 39] 提出了解决方案，以解决不同SDN控制模块之间的底层网络资源或状态冲突。NEMO [3] 和 ONOS [5] 提供API来建模虚拟网络拓扑（交换机和路由器）并指定拓扑链接和路径的要求。这些系统处理的问题与PGA处理的端到端策略无关。PGA可以扩展以结合其中的一些解决方案。TAG [30] 提供了一种只捕获应用程序组件间带宽需求的图形抽象；将TAG扩展到PGA是我们未来的工作。

CoVisor [24] 组合单独编译自各个SDN控制器的OpenFlow规则表，并高效地更新组合规则表以应对输入表的变化。然而，在优先级OpenFlow规则中组合高级SDN策略本质上是低效的；例如，添加/删除一个SDN应用程序/控制器将需要重新计算整个组合表 [24]。在PGA中，根据输入图的加入/离开/更改事件增量更新组合图是一个简单的扩展。此外，PGA可以使用CoVisor主动编译组合图的OpenFlow规则并增量更新规则表。

### 结论

PGA提供了一种直观的图形抽象来表达和组合策略。用户（或策略编写工具）可以通过遍历组合图来验证连通性和服务链要求。PGA在最小化操作员干预的情况下表达策略并解决冲突。据我们所知，PGA是第一个建模封闭中间盒的行为并确保其在服务链中的正确行为。自动组合多个服务链是PGA的另一个独特功能。作为未来的工作，我们计划在多个方面增强PGA，例如，当大量端点同时更改其标签时，PGA运行时应能够以可扩展、响应迅速和一致的方式更新网络。支持硬件/虚拟机中间盒、验证其运行时行为并以更灵活的方式（如不对称的前向/反向）进行链路也是未来的额外工作。

### 致谢

我们非常感谢Nate Foster（我们的指导者）和匿名评审者的宝贵反馈。这项工作部分由美国国家科学基金会（拨款 CNS-1302041, CNS-1330308 和 CNS-1345249）以及威斯康星州麦迪逊市软件定义数据中心研究所支持。

### 参考文献

[1] Docker. https://github.com/docker/docker/issues/11187.
[2] Mininet. http://mininet.org/.
[3] NEMO (NEtwork MOdeling) Language. http://www.hickoryhill-consulting.com/nemo/.
[4] Network Service Header. https://tools.ietf.org/html/draft-quinn-sfc-nsh-07.
[5] Open Network Operating System (ONOS) Intent Framework. https://wiki.onosproject.org/display/ONOS/The+Intent+Framework.
[6] OpenDaylight Group Policy. https://wiki.opendaylight.org/view/Group_Policy:Main.
[7] Openstack Congress. https://wiki.openstack.org/wiki/Congress.
[8] Openstack Networking – Neutron. https://wiki.openstack.org/wiki/Neutron.
[9] SELinux. http://selinuxproject.org/page/Main_Page.
[10] Service Function Chaining Architecture. https://tools.ietf.org/html/draft-merged-sfc-architecture-02.
[11] Service Function Chaining General Use Cases. https://tools.ietf.org/html/draft-liu-sfc-use-cases-08.
[12] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin, D. Kozen, C. Schlesinger, and D. Walker. NetKAT: Semantic Foundations for Networks. In POPL, 2014.
[13] A. AuYoung, Y. Ma, S. Banerjee, J. Lee, P. Sharma, Y. Turner, C. Liang, and J. C. Mogul. Democratic Resolution of Resource Conflicts Between SDN Control Programs. In CoNEXT, 2014.
[14] M. Banikazemi et al. Meridian: an SDN platform for cloud network services. Communications Magazine, IEEE, 51(2):120–127, February 2013.
[15] P. Bonatti, S. de Capitani di Vimercati, and P. Samarati. A Modular Approach to Composing Access Control Policies. In CCS, 2000.
[16] H. Edelsbrunner et al. Optimal Point Location in a Monotone Subdivision. SIAM J. Comput., 15(2):317–340, May 1986.
[17] S. K. Fayaz and V. Sekar. Testing Stateful and Dynamic Data Planes with FlowTest. In HotSDN, 2014.
[18] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul. Enforcing Network-wide Policies in the Presence of Dynamic Middlebox Actions Using Flowtags. In NSDI, 2014.
[19] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and S. Krishnamurthi. Participatory Networking: An API for Application Control of SDNs. In SIGCOMM, 2013.
[20] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford, A. Story, and D. Walker. Frenetic: A Network Programming Language. In ICFP, 2011.
[21] N. Foster, D. Kozen, M. Milano, A. Silva, and L. Thompson. A Coalgebraic Decision Procedure for NetKAT. In POPL, 2015.
[22] A. Gember-Jacobson, R. Viswanathan, C. Prakash, R. Grandl, J. Khalid, S. Das, and A. Akella. OpenNF: Enabling Innovation in Network Function Control. In SIGCOMM, 2014.
[23] T. L. Hinrichs, N. S. Gude, M. Casado, J. C. Mitchell, and S. Shenker. Practical Declarative Network Management. In WREN, 2009.
[24] X. Jin, J. Gossels, and D. Walker. CoVisor: A Compositional Hypervisor for Software-Defined Networks. In NSDI, 2015.
[25] D. Joseph and I. Stoica. Modeling Middleboxes. Netwrk. Mag. of Global Internetwkg., 22(5):20–25, Sept. 2008.
[26] N. Kang, Z. Liu, J. Rexford, and D. Walker. Optimizing the "One Big Switch" Abstraction in Software-defined Networks. In CoNEXT, 2013.
[27] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow: Verifying Network-wide Invariants in Real Time. In NSDI, 2013.
[28] H. Kim, J. Reich, A. Gupta, M. Shahbaz, N. Feamster, and R. Clark. Kinetic: Verifiable Dynamic Network Control. In NSDI, 2015.
[29] T. Koponen et al. Network Virtualization in Multi-tenant Datacenters. In NSDI, 2014.
[30] J. Lee, Y. Turner, M. Lee, L. Popa, S. Banerjee, J.-M. Kang, and P. Sharma. Application-driven Bandwidth Guarantees in Datacenters. In SIGCOMM, 2014.
[31] L. Li et al. PACE: Policy-Aware Application Cloud Embedding. In INFOCOM, 2013.
[32] H. H. Liu, S. Kandula, R. Mahajan, M. Zhang, and D. Gelernter. Traffic Engineering with Forward Fault Correction. In SIGCOMM, 2014.
[33] J. C. Mogul, A. AuYoung, S. Banerjee, L. Popa, J. Lee, J. Mudigonda, P. Sharma, and Y. Turner. Corybantic: Towards the Modular Composition of SDN Control Programs. In HotNets, 2013.
[34] C. Monsanto, J. Reich, N. Foster, J. Rexford, and D. Walker. Composing Software Defined Networks. In NSDI, 2013.
[35] T. Nelson, A. D. Ferguson, M. J. G. Scheer, and S. Krishnamurthi. Tierless Programming and Reasoning for Software-defined Networks. In NSDI, 2014.
[36] C. Schlesinger, M. Greenberg, and D. Walker. Concurrent NetCore: From Policies to Pipelines. In ICFP, 2014.
[37] J. Sherry et al. Making Middleboxes Someone else’s Problem: Network Processing As a Cloud Service. SIGCOMM CCR, 42(4):13–24, Aug. 2012.
[38] R. Soulé, S. Basu, P. J. Marandi, F. Pedone, R. Kleinberg, E. G. Sirer, and N. Foster. Merlin: A Language for Provisioning Network Resources. In CoNEXT, 2014.
[39] P. Sun, R. Mahajan, J. Rexford, L. Yuan, M. Zhang, and A. Arefin. A Network-state Management Service. In SIGCOMM, 2014.
[40] A. Verma, L. Pedrosa, M. Korupolu, D. Oppenheimer, E. Tune, and J. Wilkes. Large-scale cluster management at Google with Borg. In EuroSys, 2015.
[41] A. Voellmy, J. Wang, Y. R. Yang, B. Ford, and P. Hudak. Maple: Simplifying SDN Programming Using Algorithmic Policies. In SIGCOMM, 2013.
[42] D. M. Volpano, X. Sun, and G. G. Xie. Towards Systematic Detection and Resolution of Network Control Conflicts. In HotSDN, 2014.

希望这个优化后的版本更加清晰、连贯和专业。如果有进一步的需求，请随时告诉我！