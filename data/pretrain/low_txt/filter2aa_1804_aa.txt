# Liberating Your Vacuum from the Cloud: Robots with Lasers and Cameras (but no Security)
## DEFCON 29 – Dennis Giese
### August 8, 2021

## About Me
- **PhD Student at Northeastern University, USA**
  - Working with Prof. Guevara Noubir @Khoury
  - Research Field: Wireless and Embedded Security & Privacy
- **Interests: Reverse Engineering of Interesting Devices**
  - Smart Home Devices, particularly vacuum cleaning robots
  - Current Research: Smart Speakers

## Most Recent Work
- **Title:** "Amazon Echo Dot or the Reverberating Secrets of IoT Devices"
- **Authors:** Dennis Giese and Guevara Noubir
- **Published:** ACM WiSec 2021
- **Link:** [ACM WiSec 2021 Paper](https://dontvacuum.me/papers/ACMWisec-2021/)

## Goals
- **Overview of Vacuum Robot Development**
  - Focus on Roborock and Dreame
- **Understanding Vulnerabilities and Backdoors**
- **Methods to Root Current Robots**
  - [Dreame Technology](https://www.dreame-technology.com/)
  - [Roborock](https://www.roborock.com/)
  - Note: We maintain a friendly relationship with vendors.

## Motivation
### Why Do We Want to Root Devices?
- **Play with Cool Hardware**
- **Stop Devices from Constantly Phoning Home**
- **Use Custom Smart Home Software**
- **Verify Privacy Claims**

### Why Do We Not Trust IoT?
- **Devices are Connected to the Home Network**
- **Encrypted Communication to the Cloud, but Content is Unclear**
- **Developing Secure Hardware and Software is Challenging**
- **Vendor Claims Often Contradict Each Other**

### “Nothing is Sent to the Cloud”?
- [Roborock S6 MaxV Product Page](https://global.roborock.com/pages/roborock-s6-maxv)

### … But You Can Access the Camera?
- [Roborock S6 MaxV Product Page](https://global.roborock.com/pages/roborock-s6-maxv)

### Problem with Used Devices
- **Potential Issues with Second-Hand Devices**
  - Previous owner may have installed a rootkit
  - New owner cannot verify the software
  - Result: Device might behave maliciously in your network
- **Rooting is the Only Way to Ensure a Clean Device**

## A Look into the Past: The Good Old Times
### First Work in 2017
- **Collaboration with Daniel Wegemer**
- **Xiaomi Vacuum Robot / Roborock S5**
  - **Findings:**
    - Firmware images: unsigned and encrypted with a weak key
    - Custom firmware could be pushed from the local network
  - **Results:**
    - Rooting without disassembly
    - Development of custom software and voice packages
  - **Publications:**
    - 34C3 (2017)
    - DEF CON 26 (2018)
  - **Models:**
    - rockrobo.vacuum.v1 (End of 2016)
    - roborock.vacuum.s5 (End of 2017)
  - **Talk Link:** [DEF CON 26 Talk](https://dontvacuum.me/talks/DEFCON26/DEFCON26-Having_fun_with_IoT-Xiaomi.html)

### Recap: Hardware V1 / S5
- **Quadcore ARM Processor**
- **512 MB RAM**
- **4 GB eMMC Flash**
- **Sensors:**
  - LiDAR
  - IR
  - Ultrasonic
- **Debug Ports:**
  - USB
  - UART

### Recap: Software V1 / S5
- **Ubuntu 14.04.3 LTS (Kernel 3.4.xxx)**
  - Mostly untouched
  - Obfuscated “root” password
- **Player 3.10-svn**
  - Open-source cross-platform robot device interface & server
- **Proprietary Software (/opt/rockrobo)**
  - Custom adbd-version
  - Watchdog (enforces copy protection)
  - Logging tool (uploads data to the cloud)
- **iptables Firewall Enabled (IPv4!)**
  - Blocks Port 22 (SSHd) + Port 6665 (player)
  - IPv6 not blocked

## The Force Strikes Back: Locking Down the Devices
### Initial Steps in Locking Down
- **Newer Roborock S5 Firmware: Local Updates Blocked**
- **Introduction of Roborock S6 (2019):**
  - Signed firmware and voice packages
  - Different encryption keys for each model
  - Signed configuration files to enforce region locks
  - Hardware remains mostly the same
  - Disassembly of devices required

### Keeping Rooting Methods Secret
- **Roborock S6 Rooted in the First 2 Weeks After Release**
- **Developed Methods:**
  - Extraction of obfuscated root password via UART
  - Single user boot via U-Boot
- **Methods Were Not Published for Some Time**
- **Assumption: Roborock Would Lock Them Down in Newer Devices**

### Getting Access via UART
- **Observations:**
  - Every published method gets blocked
  - Examples:
    - Local updates (2017): Blocked via firmware updates in 2018
    - Root password method (2019): Blocked for newly produced devices in 2019
    - U-Boot bypass (2020): Blocked for new models in 2020
  - All currently public methods are blocked

## Development of Roborock Models
### Roborock Device Development
| Year | Model | RAM | Flash | Notes |
|------|-------|-----|-------|-------|
| 2016 | Roborock S5 | 512 MB | 4 GB | |
| 2017 | Roborock S5 | 512 MB | 4 GB | |
| 2018 | Roborock S5 | 512 MB | 4 GB | |
| 2019 | Xiaomi M1S | 512 MB | 4 GB | |
| 2019 | Roborock S6 | 256 MB | 4 GB | |
| 2020 | Roborock S6 Pure | 256 MB | 4 GB | |
| 2020 | Roborock S6 MaxV | 1 GB | 4 GB | |
| 2021 | Roborock S7 | 256 MB | 4 GB | |
| 2021 | Roborock S4 Max | 256 MB | 4 GB | |
| 2021 | Roborock S4 | 256 MB | 4 GB | |
| 2021 | Roborock S5 Max | 256 MB | 4 GB | |

- **Conclusion:**
  - Despite devices becoming more expensive, hardware specifications have generally decreased.

## Roborock Camera Robots
### Xiaomi M1S
- **Released Q2/2019**
- **SoC:** Rockchip RK3326 (64-Bit ARM Quadcore)
- **RAM:** 512 MB
- **Flash:** 4 GB eMMC
- **Sensors:**
  - LiDAR
  - Up-facing B/W Camera
  - Ultrasonic distance sensor
  - IR sensors
- **Teardown Pictures:** [Xiaomi M1S Teardown](https://dontvacuum.me/teardowns/roborock.vacuum.m1s/)

### Video Perspective of M1S Robot
- Recorded with GStreamer on robot (/dev/video1)

### Roborock S6 MaxV Hardware
- **Released Q2/2020**
- **SoC:** Qualcomm APQ8053 (64-Bit ARM Octocore)
- **RAM:** 1 GB
- **Flash:** 4 GB eMMC
- **Sensors:**
  - LiDAR
  - 2x FullHD color front cameras (with IR)
  - IR sensors
- **Water Tank + Pump**
- **Teardown Pictures:** [Roborock S6 MaxV Teardown](https://dontvacuum.me/teardowns/roborock.vacuum.a10/)

### Roborock S6 MaxV Cameras
- **Stereo Camera**
- **Infrared Illumination**
- **Screenshots from the Roborock App**

### Xiaomi M1S/Roborock S6 MaxV Software
- **OS:** Android
- **Similar Software as Previous Models**
- **Cameras Accessible via Video4Linux Subsystem**
- **Used Libraries:**
  - OpenCV
  - OpenCL
  - TensorFlow Lite

### Security Measures
- **Secure Boot:**
  - Replay-Protected-Memory-Block (RPMB) enabled
- **DM-Verity:**
  - System partition integrity protected
- **SELinux:**
  - Enabled and enforced
- **LUKS Encrypted Partitions**