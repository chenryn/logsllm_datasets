### 优化后的文本

#### 图11：应用程序在训练过程中生成新的序列，偶尔会出现突发情况（例如程序启动）

图11展示了应用程序在训练过程中生成的新序列。可以看到，在某些时刻（如程序启动时）会有突发的序列生成。

#### 图12：使用四个程序对和漏洞的不同感染规模下的F1分数（n=100）

图12显示了在固定大小的社区中，随着感染规模的变化，Syzygy系统的性能表现。实验结果表明，当被感染的客户端数量达到约10%时，系统的性能达到峰值。

#### 图13：不同社区规模和恒定感染比例下的F1分数（使用TextEdit和prompttext）

图13展示了在不同社区规模下，且感染比例保持不变的情况下，Syzygy系统的性能。结果显示，即使社区规模较小，只要感染比例足够高，系统仍能有效检测到感染。

#### 图14：不同阈值倍增器下的F1分数（使用Mail和mailspam漏洞）

图14展示了在不同阈值倍增器设置下，Syzygy系统的性能表现。通过调整阈值倍增器，可以在精度、召回率和误报率之间找到平衡点。

### 6.2 检测性能

我们首先考虑Syzygy系统在不同社区规模和感染规模下的检测能力。图12中的实验结果显示，当感染规模增加时，Syzygy的性能也随之提高，并在大约10个被感染客户端（占社区的10%）时达到峰值。然而，图13表明，如果社区规模足够大，即使感染比例非常小，系统也能有效地检测到感染。尽管社区规模和感染规模同时增长，但Syzygy的检测能力超过了这种增长速度。

### 6.3 参数敏感性

接下来，我们评估Syzygy系统对阈值V的敏感性。图14展示了不同阈值倍增器设置下的性能表现。当社区规模和感染规模足够大时，性能曲线在阈值V介于μX和μY之间时达到最大值。增加阈值倍增器通常会提高精度，降低召回率，并减少误报率（误报率下降的速度类似于正态分布的尾部）。为了进一步可视化这一点，请参见图15。随着客户端数量的增加，正常和感染分布之间的分离更加明显。这增加了噪声裕度，表明阈值的确切位置对Syzygy的性能影响不大。实际上，在极限情况下，所有选择的阈值μX > 0.6，即使δ = 0.1, n = 10, d = 1时也是如此。

### 7 可扩展性

从数学上讲，Syzygy的准确性随着社区规模的增加而提高，因此实现良好的可扩展性至关重要。这个问题与第3节中的分析无关。我们描述了基础设施使用中央服务器的情况，并证明其最多可以支持35个客户端（第5节）。通信是单向的（客户端到服务器），没有共识或协议机制，因此总社区流量随客户端数量线性增长。

然而，可以通过替代方案来替换中央服务器，以提高可扩展性并避免单点故障。一种选择是服务器层次结构；每个服务器计算其子节点的社区得分，并将该值及其子社区的规模报告给父服务器。这种安排之所以可行，是因为用于计算社区得分的函数mean()是关联的（按子社区规模加权）。

除了通信开销外，还有客户端上的监控开销。这通常是由于模型选择的影响，与社区规模无关。在我们的受控实验中，主要的监控工具dtrace在受监控应用程序活动频繁时所需CPU时间不超过10%，平均使用率低于1%。在Firefox部署实验中，Syzygy所需的CPU平均使用率不到5%，峰值为7%，包括strace开销（参见第5.3节）。然而，使用基于strace的Windows实现时，延迟较为明显。在Apache部署中（参见第4节），利用Web服务器内置的日志机制，开销几乎可以忽略不计。如果开销成为问题，可以考虑改变模型以测量成本更低的信号。例如，Sharif等人[30]实现了控制流监控，其开销与我们的系统调用方法相当，这种优化可能会在较低开销下提供更高的精度。

### 8 贡献

Syzygy是一个检测框架，旨在通过寻找同质软件社区中的时间相关异常来检测流行病——正是这些异常行为会在一组客户端中执行漏洞时出现。我们的结果表明，Syzygy在自动检测流行病方面是有效的，易于部署，并且具有良好的可扩展性。Syzygy以新颖的方式利用了大规模社区的统计特性，逐渐接近完美的检测效果。

### 致谢

作者感谢VERNIER团队的成员，特别是Elizabeth Stinson、Patrick Lincoln、Steve Dawson、Linda Briesemeister、Jim Thornton、John Mitchell和Peter Kwan。感谢Sebastian Gutierrez和Miles Davis在部署Syzygy方面的帮助，Naeim Semsarilar在早期工作中的宝贵贡献，以及Xuân Vũ的输入和支持。

### 参考文献

[1] Bouloutas, A., Calo, S., Finkel, A.: Alarm correlation and fault identification in communication networks. IEEE Transactions on Communications (1994)

[2] Brumley, D., Newsome, J., Song, D.: Sting: An end-to-end self-healing system for defending against internet worms. In: Malware Detection and Defense (2007)

[3] Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham, P.: Vigilante: End-to-end containment of internet worms. In: SOSP (2005)

[4] Cuppens, F., Miege, A.: Alert correlation in a cooperative intrusion detection framework. In: IEEE Symposium on Security and Privacy, pp. 202–215 (2002)

[5] Debar, H., Becker, M., Siboni, D.: A neural network component for an intrusion detection system. In: IEEE Symposium on Security and Privacy (1992)

[6] Ellis, D.: Worm anatomy and model. In: WORM (2003)

[7] Eskin, E.: Anomaly detection over noisy data using learned probability distributions. In: ICML (2000)

[8] Feng, H.H., Kolesnikov, O.M., Fogla, P., Lee, W., Gong, W.: Anomaly detection using call stack information. In: IEEE Symposium on Security and Privacy (2003)

[9] Forrest, S., Hofmeyr, S.A., Somayaji, A., Longstaff, T.A.: A sense of self for UNIX processes. In: IEEE Symposium on Security and Privacy (1996)

[10] Gao, D., Reiter, M.K., Song, D.: Gray-box extraction of execution graphs for anomaly detection. In: CCS (2004)

[11] Gao, D., Reiter, M.K., Song, D.: Behavioral distance for intrusion detection. In: Zamboni, D., Krügel, C. (eds.) RAID 2006. LNCS, vol. 4219, pp. 19–40. Springer, Heidelberg (2006)

[12] Griffin, J.T., Jha, S., Miller, B.P.: Detecting manipulated remote call streams. In: USENIX Security, pp. 61–79 (2002)

[13] Gu, G., Cárdenas, A.A., Lee, W.: Principled reasoning and practical applications of alert fusion in intrusion detection systems. In: ASIACCS (2008)

[14] Hofmeyr, S.A., Forrest, S., Somayaji, A.: Intrusion detection using sequences of system calls. Journal of Computer Security 6(3), 151–180 (1998)

[15] Huang, L., Garofalakis, M., Joseph, A.D., Taft, N.: Communication-efficient tracking of distributed cumulative triggers. In: Intl. Conf. on Distributed Computing Systems (ICDCS) (June 2007)

[16] Huang, L., Nguyen, X.L., Garofalakis, M., Hellerstein, J., Jordan, M., Joseph, A., Taft, N.: Communication-efficient online detection of network-wide anomalies. In: IEEE INFOCOM (2007)

[17] Jakobson, G., Weissman, M.: Alarm correlation. IEEE Network (1993)

[18] Javitz, H.S., Valdes, A.: The SRI IDES statistical anomaly detector. In: IEEE Symposium on Security and Privacy (1991)

[19] King, S.T., Mao, Z.M., Lucchetti, D.G., Chen, P.M.: Constructing attack scenarios through correlation of intrusion alerts. In: CCS (2002)

[20] Lincoln, P., et al.: Virtualized Execution Realizing Network Infrastructures Enhancing Reliability (VERNIER), http://www.sdl.sri.com/projects/vernier/

[21] Locasto, M.E., Sidiroglou, S., Keromytis, A.D.: Software self-healing using collaborative application communities. In: NDSS (2005)

[22] Malan, D.J., Smith, M.D.: Host-based detection of worms through peer-to-peer cooperation. In: ACM Workshop on Rapid Malcode (2005)

[23] Malan, D.J., Smith, M.D.: Exploiting temporal consistency to reduce false positives in host-based, collaborative detection of worms. In: WORM (2006)

[24] Mutz, D., Valeur, F., Vigna, G., Kruegel, C.: Anomalous system call detection. In: TISSEC (2006)

[25] Newsome, J., Brumley, D., Song, D.: Vulnerability-specific execution filtering for exploit prevention on commodity software. In: NDSS (2006)

[26] Ning, P., Cui, Y., Reeves, D.S.: Constructing attack scenarios through correlation of intrusion alerts. In: CCS (2002)

[27] Paxson, V.: Bro: a system for detecting network intruders in real-time. Computer Networks 31 (1999)

[28] Porras, P.A., Neumann, P.G.: Emerald: event monitoring enabling responses to anomalous live disturbances. In: National Computer Security Conference, NIST/NCSC (1997)

[29] Sebring, M.M., Whitehurst, R.A.: Expert systems in intrusion detection: a case study. In: National Computer Security Conference (1988)

[30] Sharif, M., Singh, K., Griffin, J., Lee, W.: Understanding precision in host based intrusion detection. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 21–41. Springer, Heidelberg (2007)

[31] Smaha, S.: Haystack: an intrusion detection system. In: Aerospace Computer Security Applications Conference (1988)

[32] Staniford-Chen, S., Cheung, S., Crawford, R., Dilger, M., Frank, J., Hoagl, J., Levitt, K., Wee, C., Yip, R., Zerkle, D.: GrIDS—a graph based intrusion detection system for large networks. In: NIST/NCSC (1996)

[33] Tan, K.M.C., Maxion, R.A.: “Why 6?” Defining the operational limits of STIDE, an anomaly-based intrusion detector. In: IEEE Symposium on Security and Privacy (2002)

[34] Ullrich, J.: DShield—distributed intrusion detection system, http://www.dshield.org

[35] Vaccaro, H., Liepins, G.: Detection of anomalous computer session activity. In: IEEE Symposium on Security and Privacy (1989)

[36] Valdes, A., Skinner, K.: Probabilistic alert correlation. In: Lee, W., Mé, L., Wespi, A. (eds.) RAID 2001. LNCS, vol. 2212, p. 54. Springer, Heidelberg (2001)

[37] Wadge, W.W., Ashcroft, E.A.: Lucid, the dataflow programming language. A.P.I.C. Studies in Data Processing (1985)

[38] Wagner, D., Soto, P.: Mimicry attacks on host-based intrusion detection systems. In: CCS (2002)

[39] Wang, H.J., Platt, J.C., Chen, Y., Zhang, R., Wang, Y.-M.: Automatic misconfiguration troubleshooting with PeerPressure. In: OSDI (2004)

[40] Weaver, N., Paxson, V., Staniford, S., Cunningham, R.: A taxonomy of computer worms. In: WORM (2003)

[41] Weaver, N., Staniford, S., Paxson, V.: Very fast containment of scanning worms. In: USENIX Security (2004)

[42] Williamson, M.M.: Throttling viruses: Restricting propagation to defeat malicious mobile code. In: ACSAC (2002)

[43] Xie, Y., Kim, H., O’Hallaron, D., Reiter, M., Zhang, H.: Seurat: a pointillist approach to anomaly detection. In: Jonsson, E., Valdes, A., Almgren, M. (eds.) RAID 2004. LNCS, vol. 3224, pp. 238–257. Springer, Heidelberg (2004)

[44] Yegneswaran, V., Barford, P., Jha, S.: Global intrusion detection in the DOMINO overlay system. In: NDSS (2004)