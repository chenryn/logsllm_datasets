### GuardSpark++: Fine-Grained Purpose-Aware Access Control for Secure Data Sharing and Analysis in Spark

#### Control Model
We have defined the data processing and data operation purposes and introduced an algorithm to automatically analyze and extract these purposes from logical query plans. Additionally, we have developed a PAAC (Purpose-Aware Access Control) enforcement mechanism for Spark's structured data analytics engines/APIs. This mechanism is integrated into Spark Catalyst to dynamically rewrite logical plans into secure ones. Extensive experiments demonstrate that GuardSpark++ effectively enforces PAAC with minimal overhead on Spark. The source code for GuardSpark++ is available at [GitHub](https://github.com/liveonearthormars).

#### Acknowledgments
We would like to thank the anonymous reviewers for their constructive comments and Dr. Fangxiao Ning for his technical assistance. Tao Xue, Yu Wen, et al. were supported by the Strategic Priority Research Program of CAS, Grant No. XDC02010300. Bo Luo was sponsored in part by NSF CNS-1422206, DGE-1565570, NSA Science of Security Initiative H98230-18-D-0009, and the Ripple University Blockchain Research Initiative. Yingjiu Li was also supported in part by the Ripple University Blockchain Research Initiative.

#### References
[1] AMPlab, University of California, Berkeley. Big Data Benchmark. https://amplab.cs.berkeley.edu/benchmark/.
[2] Apache Beam. https://beam.apache.org/.
[3] Apache Hadoop. http://hadoop.apache.org/.
[4] Apache Ranger. https://hortonworks.com/apache/ranger/.
[5] Apache Sentry. https://sentry.apache.org/.
[6] Apache Spark. https://spark.apache.org/.
[7] Zettaset. The Big Data Security Gap: Protecting the Hadoop Cluster, White Paper, 2014. http://www.zettaset.com/wp-content/uploads/2014/04/zettaset_wp_security_0413.pdf.
[8] Jure Leskovec. http://snap.stanford.edu/data/soc-Pokec.html.
[9] C.L. Blake and C.J. Merz (1998). UCI Repository of Machine Learning Databases. University of California. http://archive.ics.uci.edu/ml/datasets/Iris.
[10] European Big Data Value Forum. Data Sharing and Data Integration. https://www.european-big-data-value-forum.eu/data-sharing-and-data-integration/.
[11] Databricks. Spark SQL Performance Tests, 2019. https://github.com/databricks/spark-sql-perf.
[12] Databricks. Enable Table Access Control, 2017. https://docs.databricks.com/administration-guide/admin-settings/table-acls/table-acl.html.
[13] Jacek Laskowski. Mastering Spark SQL, 2019. https://jaceklaskowski.gitbooks.io/mastering-spark-sql/.
[14] GraphFrames User Guide, 2018. https://graphframes.github.io/user-guide.html.
[15] Hortonworks. Introducing Row/Column Level Access Control for Apache Spark, 2017. https://ko.hortonworks.com/blog/row-column-level-control-apache-spark/.
[16] Kafka Security, 2019. http://www.cs.toronto-.edu/~kriz/cifar.html.
[17] MLlib: Main Guide, 2018. http://spark.apache.org/docs/latest/ml-clustering.html.
[18] MySQL Tutorial, 2019. https://www.mysqltutorial.org/mysql-adminsitration/.
[19] Presto. https://prestodb.github.io/.
[20] Sciencenode. Improving Sharing in the Era of Big Data. https://sciencenode.org/feature/improving-sharing-in-the-era-of-big-data.php.
[21] Structured Streaming Programming Guide, 2018. http://spark.apache.org/docs/latest/structured-streaming-programming-guide.html.
[22] Sysdig. https://sysdig.com/.
[23] TPC BENCHMARK DS Standard Specification version 2.3.0, Transaction Processing Performance Council (TPC), 2016. http://www.tpc.org/tpc_documents_current_versions/pdf/tpc-ds_v2.3.0.pdf.
[24] Privacy-Preserving Machine Learning: Threats and Solutions. IEEE Security & Privacy, S&P’19 (2019).
[25] Structured Streaming: A Declarative API for Real-Time Applications in Apache Spark. In Proceedings of the 2018 International Conference on Management of Data, SIGMOD’18.
[26] Spark SQL: Relational Data Processing in Spark. In Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data, SIGMOD’15.
[27] Spanner: Becoming a SQL System. In Proceedings of the 2017 ACM International Conference on Management of Data, SIGMOD’17.
[28] Nephele/PACTs: A Programming Model and Execution Framework for Web-Scale Analytical Processing. In Proceedings of the 1st ACM Symposium on Cloud Computing (Indianapolis, Indiana, USA) (SoCC’10). Association for Computing Machinery, New York, NY, USA, 119–130. https://doi.org/10.1145/1807128.1807148.
[29] Big Data Security and Privacy, 2018.
[30] HDFS Architecture Guide. Hadoop Apache Project, 2008.
[31] Privacy-Preserving Graph Algorithms in the Semi-Honest Model. In International Conference on the Theory and Application of Cryptology and Information Security, ASIACRYPT’05.
[32] Purpose Based Access Control for Privacy Protection in Relational Database Systems. The International Journal on Very Large Data Bases, VLDB Journal’08 (2008).
[33] Apache Flink: Stream and Batch Processing in a Single Engine. Bulletin of the IEEE Computer Society Technical Committee on Data Engineering 36, 4 (2015).
[34] The Importance of ABAC: Attribute-Based Access Control to Big Data: Privacy and Context. Privacy and Big Data Institute, Ryerson University, Toronto, Canada (2015).
[35] Spark: The Definitive Guide: Big Data Processing Made Simple, 2018.
[36] Enforcing Obligations within Relational Database Management Systems. IEEE Transactions on Dependable and Secure Computing 11, 4 (2013), 318–331.
[37] Enforcement of Purpose Based Access Control within Relational Database Management Systems. IEEE Transactions on Knowledge and Data Engineering, TKDE’14 (2014).
[38] Efficient Enforcement of Action-Aware Purpose-Based Access Control within Relational Database Management Systems. In IEEE International Conference on Data Engineering, ICDE’16.
[39] Towards a Unifying Attribute Based Access Control Approach for NoSQL Datastores. In 2017 IEEE 33rd International Conference on Data Engineering (ICDE). IEEE, 709–720.
[40] Managing and Sharing Research Data: A Guide to Good Practice. SAGE Publications, 2008.
[41] Privacy by Design in Big Data: An Overview of Privacy Enhancing Technologies in the Era of Big Data Analytics. arXiv preprint arXiv:1512.06000 (2015).
[42] GraphFrames: An Integrated API for Mixing Graph and Relational Queries. In Proceedings of the Fourth International Workshop on Graph Data Management Experiences and Systems, GRADES’16.
[43] MapReduce: Simplified Data Processing on Large Clusters. Commun. ACM, 2008.
[44] Big Data Sharing and Analysis to Advance Research in Post-Traumatic Epilepsy. Neurobiology of Disease 123 (2019), 127–136.
[45] The Inference Problem: A Survey. ACM SIGKDD Explorations Newsletter (2002).
[46] A Secure Environment for Untrusted Helper Applications: Confining the Wily Hacker. In Proceedings of the 6th Conference on USENIX Security Symposium, Focusing on Applications of Cryptography.
[47] Going beyond the Sandbox: An Overview of the New Security Architecture in the Java Development Kit 1.2. In USENIX Symposium on Internet Technologies and Systems.
[48] GraphX: Graph Processing in a Distributed Dataflow Framework. In Proceedings of the 11th USENIX Conference on Operating Systems Design and Implementation, OSDI’14.
[49] An Attribute-Based Access Control Model for Secure Big Data Processing in Hadoop Ecosystem. In Proceedings of the Third ACM Workshop on Attribute-Based Access Control (ABAC’18).
[50] Apache Flume: Distributed Log Collection for Hadoop, 2013.
[51] Big Data: Storage, Sharing, and Security. CRC Press, 2016.
[52] Guide to Attribute Based Access Control (ABAC) Definition and Considerations (draft). NIST Special Publication 800, 162 (2013).
[53] An Attribute-Based Fine-Grained Access Control Mechanism for HBase. In International Conference on Database and Expert Systems Applications. Springer, 44–59.
[54] Kafka: A Distributed Messaging System for Log Processing. In Proceedings of the NetDB, 2011.
[55] Distributed Denial of Service Attacks. In SMC 2000 Conference Proceedings. 2000 IEEE International Conference on Systems, Man and Cybernetics. ‘Cybernetics Evolving to Systems, Humans, Organizations, and Their Complex Interactions’ (Cat. No. 0, Vol. 3). IEEE, 2275–2280.
[56] Graph-Based Privacy-Preserving Data Publication. In IEEE INFOCOM 2016 - The 35th Annual IEEE International Conference on Computer Communications, INFOCOM’16.
[57] MLlib: Machine Learning in Apache Spark. J. Mach. Learn. Res. (2016).
[58] Linux Security Modules: General Security Support for the Linux Kernel. In USENIX Security Symposium, USENIX Security’02.
[59] An Obligation Model Bridging Access Control Policies and Privacy Policies. In SACMAT, Vol. 8. 133–142.
[60] The SQL++ Semi-Structured Data Model and Query Language: A Capabilities Survey of SQL-on-Hadoop, NoSQL, and NewSQL Databases. CoRR (2014).
[61] Role-Based Access Control. Network Security Technology & Application (2007).
[62] Security in Computing. Prentice Hall Professional Technical Reference, 2002.
[63] SparkXS: Efficient Access Control for Intelligent and Large-Scale Streaming Data Applications. In International Conference on Intelligent Environments, 2015.
[64] Data-at-Rest Security for Spark. In 2016 IEEE International Conference on Big Data (Big Data). IEEE, 1464–1473.
[65] Big Data Security: The Evolution of Hadoop’s Security Model, 2013. https://www.infoq.com/articles/HadoopSecurityModel/.
[66] Bringing Java’s Wild Native World under Control. ACM Transactions on Information and System Security (TISSEC) (2013).
[67] Hive: A Petabyte Scale Data Warehouse Using Hadoop. In 2010 IEEE 26th International Conference on Data Engineering, ICDE’10.
[68] GuardMR: Fine-Grained Security Policy Enforcement for MapReduce Systems. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, ASIA CCS ’15.
[69] Bigdatabench: A Big Data Benchmark Suite from Internet Services. In 2014 IEEE 20th International Symposium on High Performance Computer Architecture, HPCA’14.
[70] MeDShare: Trust-Less Medical Data Sharing among Cloud Service Providers via Blockchain. IEEE Access 5 (2017), 14757–14767.
[71] Data Level Inference Detection in Database Systems. In Proceedings. 11th IEEE Computer Security Foundations Workshop, CSFW’98.
[72] Resilient Distributed Datasets: A Fault-Tolerant Abstraction for In-Memory Cluster Computing. In Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12). 15–28.
[73] Discretized Streams: Fault-Tolerant Streaming Computation at Scale. In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles, SOSP’13.
[74] Apache Spark: A Unified Engine for Big Data Processing. Commun. ACM (2016).
[75] Statistical Privacy for Streaming Traffic. In NDSS.
[76] SCOPE: Parallel Databases Meet MapReduce. The International Journal on Very Large Data Bases, VLDB Journal’12 (2012).
[77] A Secure Anti-Collusion Data Sharing Scheme for Dynamic Groups in the Cloud. IEEE Transactions on Parallel and Distributed Systems 27, 1 (2015), 40–50.

#### Experimental Results
**Figure 10:** The Query35 string.

**Figure 11:** The original analyzed logical plan and secure logical plan of Query35 (Figure 10).

**Figure 12:** Three computation results about Query35.

**Query35 String:**
```sql
SELECT ca_state, cd_gender, cd_marital_status, 
       count(*) cnt1, min(cd_dep_count), max(cd_dep_count), avg(cd_dep_count), 
       cd_dep_employed_count, count(*) cnt2, min(cd_dep_employed_count), max(cd_dep_employed_count), avg(cd_dep_employed_count), 
       cd_dep_college_count, count(*) cnt3, min(cd_dep_college_count), max(cd_dep_college_count), avg(cd_dep_college_count)
FROM customer c, customer_address ca, customer_demographics cd
WHERE c.c_current_addr_sk = ca.ca_address_sk
  AND cd.cd_demo_sk = c.c_current_cdemo_sk
  AND EXISTS (
    SELECT * FROM store_sales ss, date_dim d
    WHERE c.c_customer_sk = ss.ss_customer_sk
      AND ss.ss_sold_date_sk = d.d_date_sk
      AND d.d_year = 2002
      AND d.d_qoy = 1
  )
```

**Logical Plan Analysis:**
- **Original Logical Plan:**
  - The plan includes several aliases in the format `_ AS _` (e.g., `avg(cd_dep_employed_count)#3041` is the alias of `avg(cd_dep_employed_count#412)`).
  - It contains three sub-queries within the "Filter" operator.
  - The plan makes computations on several objects, such as `cd_dep_employed_count`, and one of the DOP-C (Data Operation Purpose) purposes on this object is designated by the expression `avg(cd_dep_employed_count#412)`.

- **Secure Logical Plan:**
  - All sensitive information is prevented from direct disclosure using the zero-setting logic (e.g., `0 AS cd_dep_employed_count#1754` sets the value of `cd_dep_employed_count` to zero).
  - Computation results on some sensitive information are disclosed, but with aliases (e.g., the average of `cd_dep_employed_count` is disclosed).
  - The three sub-queries attempt to disclose sensitive information (e.g., price information) to the "Filter" operator, but the sensitive information is not directly disclosed to the user.

**Computation Results:**
- **Figure 12(a):** Results obtained from 2GB data with sensitive information directly deleted from the data.
- **Figure 12(b):** Results obtained from 2GB data with sensitive information deleted using zero-setting logic in the secure logical plan.
- **Figure 12(c):** Results obtained from 2GB data without any access control policy.

**Comparison:**
- The results in Figure 12(b) are consistent with those in Figure 12(c) for non-sensitive information, while sensitive information is set to zero.
- The results in Figure 12(a) differ from those in Figure 12(c) because directly deleting sensitive information from the data sources alters the computation results.

**Note:**
- **Zero Setting Logic:** The format `0 AS _` represents the logic (e.g., `0 AS cd_dep_employed_count#1754` sets the value of `cd_dep_employed_count` to zero).
- **Sensitive Information:** The corresponding objects representing sensitive information in each table can be recognized by initial abbreviations, e.g., `ca_state` represents state information in the `customer_address` table; `cd_gender` represents gender information in the `customer_demographics` table; `ss_sales_price` represents price information in the `store_sales` table.

**Legend:**
- \( c1 \): `ca_state`
- \( c2 \): `cd_gender`
- \( c3 \): `cd_marital_status`
- \( c4 \): `cnt1`
- \( c5 \): `min(cd_dep_count)`
- \( c6 \): `max(cd_dep_count)`
- \( c7 \): `avg(cd_dep_count)`
- \( c8 \): `cd_dep_employed_count`
- \( c9 \): `cnt2`
- \( c10 \): `min(cd_dep_employed_count)`
- \( c11 \): `max(cd_dep_employed_count)`
- \( c12 \): `avg(cd_dep_employed_count)`
- \( c13 \): `cd_dep_college_count`
- \( c14 \): `cnt3`
- \( c15 \): `min(cd_dep_college_count)`
- \( c16 \): `max(cd_dep_college_count)`
- \( c17 \): `avg(cd_dep_college_count)`

**Bold italics represent sensitive information.**