### 参考文献

1. M. Hsueh, T. Tsai, and R. Iyer, “Fault injection techniques and tools,” *IEEE Computer*, vol. 30, no. 4, pp. 75–82, 1997.
2. P. Joshi, H. Gunawi, and K. Sen, “Prefail: a programmable tool for multiple-failure injection,” *ACM SIGPLAN Notices*, vol. 46, no. 10, pp. 171–188, 2011.
3. J. Christmansson and R. Chillarege, “Generation of an Error Set that Emulates Software Faults based on Field Data,” in *FTCS*, 1996.
4. H. Madeira, D. Costa, and M. Vieira, “On the Emulation of Software Faults by Software Fault Injection,” in *Proc. DSN*. IEEE, 2000.
5. A. Johansson and N. Suri, “Error propagation profiling of operating systems,” in *Proc. DSN*. IEEE, 2005, pp. 86–95.
6. A. Lanzaro, R. Natella, S. Winter, D. Cotroneo, and N. Suri, “An empirical study of injected versus actual interface errors,” in *Proceedings of the 2014 International Symposium on Software Testing and Analysis*, 2014, pp. 397–408.
7. D. Cotroneo, A. Lanzaro, R. Natella, and R. Barbosa, “Experimental analysis of binary-level software fault injection in complex software,” in *IEEE EDCC*, 2012.
8. C. Q. Adamsen, G. Mezzetti, and A. Møller, “Systematic execution of Android test suites in adverse conditions,” in *Proceedings of the 2015 International Symposium on Software Testing and Analysis*. ACM, 2015, pp. 83–93.
9. Z.-M. Jiang, J.-J. Bai, J. Lawall, and S.-M. Hu, “Fuzzing error handling code in device drivers based on software fault injection,” in *Proc. IEEE Intl. Symp. on Software Reliability Engineering*, 2019.
10. H. Gunawi, T. Do, P. Joshi, P. Alvaro, J. Hellerstein, A. Arpaci-Dusseau, R. Arpaci-Dusseau, K. Sen, and D. Borthakur, “FATE and DESTINI: A Framework for Cloud Recovery Testing,” in *USENIX Proc. NSDI*, 2011.
11. A. Avizienis, J. Laprie, B. Randell, and C. Landwehr, “Basic Concepts and Taxonomy of Dependable and Secure Computing,” *IEEE TDSC*, 2004.
12. F. Huang, B. Liu, and B. Huang, “A taxonomy system to identify human error causes for software defects,” in *18th Intl. Conf. on Reliability and Quality in Design*, 2012, pp. 44–49.
13. F. Huang, “Human error analysis in software engineering,” *Theory and Application on Cognitive Factors and Risk Management: New Trends and Procedures*, p. 19, 2017.
14. J. Durães and H. Madeira, “Emulation of Software faults: A Field Data Study and a Practical Approach,” *IEEE TSE*, 2006.
15. D. Yuan, Y. Luo, X. Zhuang, G. R. Rodrigues, X. Zhao, Y. Zhang, P. U. Jain, and M. Stumm, “Simple testing can prevent most critical failures: An analysis of production failures in distributed data-intensive systems,” in *11th USENIX Symposium on Operating Systems Design and Implementation*, 2014, pp. 249–265.
16. A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri-Gros, A. Kamsky, S. McPeak, and D. Engler, “A few billion lines of code later: using static analysis to find bugs in the real world,” *Communications of the ACM*, vol. 53, no. 2, pp. 66–75, 2010.
17. GitHub Inc., “The state of the octoverse,” 2019. [Online]. Available: https://octoverse.github.com/
18. Stack Overflow, “Developer survey results,” 2019. [Online]. Available: https://insights.stackoverflow.com/survey/2019
19. OpenStack project, “User stories showing how the world #RunsOnOpenStack,” 2019. [Online]. Available: https://www.openstack.org/user-stories/
20. ——, “The OpenStack marketplace,” 2019. [Online]. Available: https://www.openstack.org/marketplace/
21. Python Software Foundation, “Applications for Python,” 2019. [Online]. Available: https://www.python.org/about/apps/
22. R. Chillarege and N. Bowen, “Understanding Large System Failures–A Fault Injection Experiment,” in *Digest of Papers, Intl. Symp. on Fault-Tolerant Computing*, 1988, pp. 356–363.
23. M. Sullivan and R. Chillarege, “Software Defects and their Impact on System Availability: A Study of Field Failures in Operating Systems,” in *Digest of Papers, Intl. Symp. on Fault-Tolerant Computing*, 1991, pp. 2–9.
24. ——, “A comparison of software defects in database management systems and operating systems,” in *Digest of Papers, Intl. Symp. on Fault-Tolerant Computing*, 1992, pp. 475–484.
25. W.-I. Kao, R. Iyer, and D. Tang, “FINE: A Fault Injection and Monitoring Environment for Tracing the UNIX System Behavior under Faults,” *IEEE TSE*, vol. 19, no. 11, pp. 1105–1118, 1993.
26. R. Chillarege, W. Kao, and R. Condit, “Defect Type and its Impact on the Growth Curve,” in *Proc. ICSE*. IEEE, 1991, pp. 246–255.
27. R. Chillarege, I. Bhandari, J. Chaar, M. Halliday, D. Moebus, B. Ray, and M. Wong, “Orthogonal Defect Classification–A Concept for In-Process Measurements,” *IEEE TSE*, vol. 18, no. 11, pp. 943–956, 1992.
28. W. Ng, C. Aycock, G. Rajamani, and P. Chen, “Comparing disk and memory’s resistance to operating system crashes,” in *Proc. ISSRE*. IEEE, 1996, pp. 185–194.
29. W. Ng and P. Chen, “The Design and Verification of the Rio File Cache,” *IEEE TC*, vol. 50, no. 4, pp. 322–337, 2001.
30. I. Lee and R. Iyer, “Faults, Symptoms, and Software Fault Tolerance in the Tandem GUARDIAN90 Operating System,” in *Digest of Papers, Intl. Symp. on Fault-Tolerant Computing*, 1993, pp. 20–29.
31. M. M. Swift, M. Annamalai, B. N. Bershad, and H. M. Levy, “Recovering device drivers,” *ACM TOCS*, vol. 24, no. 4, pp. 333–360, 2006.
32. J. Duraes and H. Madeira, “Emulation of Software Faults by Educated Mutations at Machine-Code Level,” in *Proc. ISSRE*. IEEE, 2002, pp. 329–340.
33. T. Basso, R. Moraes, B. Sanches, and M. Jino, “An Investigation of Java Faults Operators Derived from a Field Data Study on Java Software Faults,” in *Workshop de Testes e Tolerância a Falhas*, 2009.
34. B. Sanches, T. Basso, and R. Moraes, “J-SWFIT: A Java Software Fault Injection Tool,” in *Proc. LADC*. IEEE, 2011.
35. D. Cotroneo and R. Natella, “Fault injection for software certification,” *IEEE Security & Privacy*, vol. 11, no. 4, pp. 38–45, 2013.
36. E. van der Kouwe and A. S. Tanenbaum, “HSFI: Accurate fault injection scalable to large code bases,” in *Proc. DSN*. IEEE, 2016.
37. O. Schwahn, N. Coppik, S. Winter, and N. Suri, “FastFI: Accelerating software fault injections,” in *Proc. PRDC*. IEEE, 2018, pp. 193–202.
38. S. Winter, C. Sărbu, N. Suri, and B. Murphy, “The impact of fault models on software robustness evaluations,” in *Proc. ICSE*. IEEE, 2011, pp. 51–60.
39. C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, “EdFI: A dependable fault injection tool for dependability benchmarking experiments,” in *Proc. PRDC*. IEEE, 2013, pp. 31–40.
40. M. R. Aliabadi and K. Pattabiraman, “FIDL: A fault injection description language for compiler-based SFI tools,” in *International Conference on Computer Safety, Reliability, and Security*. Springer, 2016, pp. 12–23.
41. W. Hoarau, S. Tixeuil, and F. Vauchelles, “FAIL-FCI: Versatile fault injection,” *Elsevier FGCS*, vol. 23, no. 7, pp. 913–919, 2007.
42. P. Marinescu and G. Candea, “LFI: A practical and general library-level fault injector,” in *Proc. DSN*. IEEE, 2009.
43. B. Sampson, “How to automate software fault injection testing without changing source code,” Aug. 2018. [Online]. Available: https://www.aerospacetestinginternational.com/opinion/how-to-automate-software-fault-injection-testing-without-changing-source-code.html
44. J. Happich, “Automated fault injection without source code change,” Jan. 2018. [Online]. Available: http://www.eenewseurope.com/news/automated-fault-injection-without-source-code-change
45. D. Cotroneo, L. De Simone, P. Liguori, R. Natella, and N. Bidokhti, “How bad can a bug get? An empirical analysis of software failures in the OpenStack cloud computing platform,” in *Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering*, 2019, pp. 200–211.
46. D. Cotroneo, L. De Simone, A. K. Iannillo, R. Natella, S. Rosiello, and N. Bidokhti, “Analyzing the context of bug-fixing changes in the OpenStack cloud computing platform,” in *Proceedings of the 2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)*, 2019, pp. 334–345.
47. OpenStack Launchpad, “Bug #1028174 ‘tenant cannot delete network when dhcp-agent running’,” Jul. 2013. [Online]. Available: https://bugs.launchpad.net/neutron/+bug/1028174
48. ——, “Bug #1096722 ‘inconsistent nova-bm state will prevent launching new instances’,” Jan. 2013. [Online]. Available: https://bugs.launchpad.net/nova/+bug/1096722
49. ——, “Bug #732549 ‘execvp fallout’,” Mar. 2011. [Online]. Available: https://bugs.launchpad.net/nova/+bug/732549
50. Docker Inc., 2019. [Online]. Available: https://www.docker.com/
51. ——, 2019. [Online]. Available: https://docs.docker.com/engine/reference/builder/
52. S. Winter, O. Schwahn, R. Natella, N. Suri, and D. Cotroneo, “No PAIN, no gain?: the utility of PArallel fault INjections,” in *Proceedings of the 37th International Conference on Software Engineering-Volume 1*. IEEE Press, 2015, pp. 494–505.
53. T. Yoshimura, H. Yamada, and K. Kono, “Using fault injection to analyze the scope of error propagation in Linux,” *Information and Media Technologies*, vol. 8, no. 3, pp. 655–664, 2013.
54. M. Sugimoto, T. Kubota, and K. Kono, “Short-liveness of error propagation in kernel can improve operating systems availability,” in *2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks–Supplemental Volume (DSN-S)*. IEEE, 2019, pp. 23–24.
55. Y. Huang, C. Kintala, N. Kolettis, and N. D. Fulton, “Software rejuvenation: Analysis, module and applications,” in *Twenty-Fifth International Symposium on Fault-Tolerant Computing. Digest of Papers*. IEEE, 1995, pp. 381–390.
56. M. Grottke and K. Trivedi, “Fighting Bugs: Remove, Retry, Replicate, and Rejuvenate,” *IEEE Computer*, vol. 40, no. 2, pp. 107–109, 2007.
57. D. Cotroneo, L. De Simone, P. Liguori, R. Natella, and N. Bidokhti, “Enhancing failure propagation analysis in cloud computing systems,” in *Proceedings of the 2019 IEEE 30th International Symposium on Software Reliability Engineering (ISSRE)*, 2019, pp. 139–150.
58. Zipkin. [Online]. Available: https://zipkin.io
59. D. Cotroneo, L. De Simone, P. Liguori, R. Natella, and N. Bidokhti, “Failviz: A tool for visualizing fault injection experiments in distributed systems,” in *2019 15th European Dependable Computing Conference (EDCC)*. IEEE, 2019, pp. 145–148.
60. Python-etcd, 2019. [Online]. Available: https://pypi.org/project/python-etcd/
61. etcd HomePage, 2019. [Online]. Available: https://etcd.io/

---

**授权使用限制**：仅供伦敦大学学院使用。下载于2020年10月1日UTC时间12:46:15，来自IEEE Xplore。使用受限制。

---

希望这些参考文献的格式和内容更加清晰、连贯和专业。如果有任何进一步的需求或修改，请告知我。