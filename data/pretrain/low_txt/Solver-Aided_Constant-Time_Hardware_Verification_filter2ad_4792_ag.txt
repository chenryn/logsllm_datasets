以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

### 参考文献

1. José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, and Michael Emmi. 2016. Verifying Constant-Time Implementations. In *USENIX Security Symposium*.

2. J. Bacelar Almeida, M. Barbosa, J. S. Pinto, and B. Vieira. 2013. Formal Verification of Side-Channel Countermeasures Using Self-Composition. *Science of Computer Programming*.

3. Rajeev Alur and Thomas A. Henzinger. 1999. Reactive Modules. *Formal Methods in System Design* 15, 1 (1999), 7–48. [DOI: 10.1023/A:1008739929481](https://doi.org/10.1023/A:1008739929481)

4. Marc Andrysco, David Kohlbrenner, Keaton Mowery, Ranjit Jhala, Sorin Lerner, and Hovav Shacham. 2015. On Subnormal Floating Point and Abnormal Timing. In *S&P*.

5. Marc Andrysco, Andres Nötzli, Fraser Brown, Ranjit Jhala, and Deian Stefan. 2018. Towards Verified, Constant-time Floating Point Operations. In *Proceedings of the ACM SIGSAC Conference on Computer and Communications Security*. ACM.

6. Manuel Barbosa, Gilles Barthe, Karthikeyan Bhargavan, Bruno Blanchet, Cas Cremers, Kevin Liao, and Bryan Parno. 2021. SoK: Computer-Aided Cryptography. In *IEEE Symposium on Security and Privacy*.

7. Gilles Barthe, Gustavo Betarte, Juan Campo, Carlos Luna, and David Pichardie. 2014. System-Level Non-Interference for Constant-Time Cryptography. In *Proceedings of the ACM SIGSAC Conference on Computer and Communications Security*. ACM.

8. Daniel J. Bernstein. 2005. Cache-Timing Attacks on AES. Technical Report. [PDF](https://cr.yp.to/antiforgery/cachetiming-20050414.pdf)

9. Nikolaj Bjørner, Arie Gurfinkel, Ken McMillan, and Andrey Rybalchenko. 2015. Horn Clause Solvers for Program Verification. In *Fields of Logic and Computation*.

10. Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache Attacks are Practical. In *Workshop on Offensive Technologies*.

11. David Brumley and Dan Boneh. 2005. Remote Timing Attacks are Practical. *Computer Networks* (2005).

12. Cristiano Calcagno, Dino Distefano, Peter W. O’Hearn, and Hongseok Yang. [n.d.]. Compositional Shape Analysis by Means of Bi-Abduction. *ACM Transactions on Programming Languages and Systems* 58, 6 ([n.d.]), 26:1–26:66. [DOI: 10.1145/2049697.2049700](https://doi.org/10.1145/2049697.2049700)

13. Sunjay Cauligi, Craig Disselkoen, Klaus von Gleissenthall, Dean Tullsen, Deian Stefan, Tamara Rzk, and Gilles Barthe. 2020. Constant-Time Foundations for the New Spectre Era. In *Programming Language Design and Implementation (PLDI)*. ACM SIGPLAN.

14. Sunjay Cauligi, Gary Soeller, Brian Johannesmeyer, Fraser Brown, Riad S. Wahby, John Renner, Benjamin Gregoire, Gilles Barthe, Ranjit Jhala, and Deian Stefan. 2019. FaCT: A DSL for Timing-Sensitive Computation. In *Programming Language Design and Implementation (PLDI)*. ACM SIGPLAN.

15. Joonwon Choi, Muralidaran Vijayaraghavan, Benjamin Sherman, Adam Chlipala, and Arvind. 2017. Kami: A Platform for High-Level Parametric Hardware Specification and Its Modular Verification. In *International Conference on Functional Programming (ICFP)*. ACM SIGPLAN. [PDF](http://plv.csail.mit.edu/kami/papers/icfp17.pdf)

16. Jürgen Christ, Evren Ermis, Martin Schäf, and Thomas Wies. 2013. Flow-Sensitive Fault Localization. *Lecture Notes in Computer Science: Verification, Model Checking, and Abstract Interpretation* (2013), 189–208. [DOI: 10.1007/978-3-642-35873-9_13](https://doi.org/10.1007/978-3-642-35873-9_13)

17. Michael R. Clarkson and Fred B. Schneider. 2010. Hyperproperties. *Journal of Computer Security* (2010).

18. Shaanan Cohney, Andrew Kwong, Shahar Paz, Daniel Genkin, Nadia Heninger, Eyal Ronen, and Yuval Yarom. 2020. Pseudorandom Black Swans: Cache Attacks on CTR_DRBG. In *2020 IEEE Symposium on Security and Privacy (SP)*. IEEE.

19. CHC Competition (CHC-COMP). [n.d.]. 

20. Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth, Daniel Genkin, Nadia Heninger, Ahmad Moghimi, and Yuval Yarom. 2018. CacheQuote: Efficiently Recovering Long-term Secrets of SGX EPID via Cache Attacks. *IACR Transactions on Cryptographic Hardware and Embedded Systems* 2018, 2 (May 2018).

21. Lesly-Ann Daniel, Sébastien Bardin, and Tamara Rezk. 2020. BINSEC/REL: Efficient Relational Symbolic Execution for Constant-Time at Binary-Level. In *IEEE Symposium on Security and Privacy*.

22. Leonardo de Moura and Nikolaj Bjørner. 2008. Z3: An Efficient SMT Solver. In *TACAS*.

23. Isil Dillig, Thomas Dillig, and Alex Aiken. [n.d.]. Automated Error Diagnosis Using Abductive Inference. In *Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '12)*. Association for Computing Machinery, 181–192. [DOI: 10.1145/2254064.2254087](https://doi.org/10.1145/2254064.2254087)

24. Isil Dillig, Thomas Dillig, Boyang Li, and Ken McMillan. 2013. Inductive Invariant Generation via Abductive Inference. *SIGPLAN Notices* 48, 10 (Oct. 2013), 443–456. [DOI: 10.1145/2544173.2509511](https://doi.org/10.1145/2544173.2509511)

25. Isil Dillig, Thomas Dillig, Boyang Li, Ken McMillan, and Mooly Sagiv. [n.d.]. Synthesis of Circular Compositional Program Proofs via Abduction. *Journal of Automated Reasoning* 19, 5 ([n.d.]), 535–547. [DOI: 10.1007/s10009-015-0397-7](https://doi.org/10.1007/s10009-015-0397-7)

26. Goran Doychev, Dominik Feld, Boris Köpf, Laurent Mauborgne, and Jan Reineke. 2013. CacheAudit: A Tool for the Static Analysis of Cache Side Channels. In *USENIX Security*.

27. Evren Ermis, Martin Schäf, and Thomas Wies. 2012. Error Invariants. *Lecture Notes in Computer Science: Formal Methods* (Aug 2012), 187–201. [DOI: 10.1007/978-3-642-32759-9_17](https://doi.org/10.1007/978-3-642-32759-9_17)

28. Mohammad Rahmani Fadiheh, Johannes Müller, Raik Brinkmann, Subhasish Mitra, Dominik Stoffel, and Wolfgang Kunz. 2020. A Formal Approach for Detecting Vulnerabilities to Transient Execution Attacks in Out-of-Order Processors. In *DAC*.

29. Grigory Fedyukovich, Sumanth Prabhu, Kumar Madhukar, and Aarti Gupta. 2018. Solving Constrained Horn Clauses Using Syntax and Data. In *FMCAD*.

30. Andrew Ferraiuolo, Mark Zhao, Andrew C. Myers, and G. Edward Suh. 2018. HyperFlow: A Processor Architecture for Non-Malleable, Timing-Safe Information Flow Security. In *SIGSAC*.

31. Cormac Flanagan and K. Rustan M. Leino. [n.d.]. Houdini, an Annotation Assistant for ESC/Java. Springer, Berlin, Heidelberg, 500–517. [DOI: 10.1007/3-540-45251-6_29](https://doi.org/10.1007/3-540-45251-6_29)

32. Pranav Garg, Christof Löding, P. Madhusudan, and Daniel Neider. 2014. ICE: A Robust Framework for Learning Invariants. *Lecture Notes in Computer Science: Computer Aided Verification* (2014), 69–87. [DOI: 10.1007/978-3-319-08867-9_5](https://doi.org/10.1007/978-3-319-08867-9_5)

33. Pranav Garg, Daniel Neider, P. Madhusudan, and Dan Roth. [n.d.]. Learning Invariants Using Decision Trees and Implication Counterexamples. In *Principles of Programming Languages (POPL '16)*. ACM. [DOI: 10.1145/2837614.2837664](https://doi.org/10.1145/2837614.2837664)

34. Roberto Giacobazzi. [n.d.]. Abductive Analysis of Modular Logic Programs. In *Proceedings of the 1994 International Symposium on Logic Programming (ILPS '94)*. MIT Press, 377–391.

35. Klaus V. Gleissenthall, Rami Gökhan Kici, Deian Stefan, and Ranjit Jhala. 2019. IODINE: Verifying Constant-Time Execution of Hardware. In *USENIX Conference on Security Symposium*.

36. Michael J. C. Gordon. 1995. The Semantic Challenge of Verilog HDL. In *LICS*.

37. Sergey Grebenshchikov, Nuno P. Lopes, Corneliu Popeea, and Andrey Rybalchenko. 2012. Synthesizing Software Verifiers from Proof Rules. In *PLDI*.

38. Marco Guarnieri, Boris Köpf, Jan Reineke, and Pepe Vila. 2021. Hardware-Software Contracts for Secure Speculation. In *S&P*.

39. Anubhav Gupta, Kenneth L. McMillan, and Zhaohui Fu. 2008. Automated Assumption Generation for Compositional Verification. *Formal Methods in System Design* 32, 3 (2008), 285–301. [DOI: 10.1007/s10703-008-0050-0](https://doi.org/10.1007/s10703-008-0050-0)

40. Arie Gurfinkel, Temesghen Kahsai, Anvesh Komuravelli, and Jorge A. Navas. 2015. The SeaHorn Verification Framework. In *CAV*.

41. Andreas Haeberlen, Benjamin C. Pierce, and Arjun Narayan. 2011. Differential Privacy under Fire. In *USENIX Security*, David Wagner (Ed.).

42. Hossein Hojjat and Philipp Rümmer. 2018. The Eldarica Horn Solver. In *FMCAD*.

43. Ranjit Jhala, Andreas Podelski, and Andrey Rybalchenko. 2018. Predicate Abstraction for Program Verification. Springer International Publishing, Cham, 447–491. [DOI: 10.1007/978-3-319-10575-8_15](https://doi.org/10.1007/978-3-319-10575-8_15)

44. Manu Jose and Rupak Majumdar. [n.d.]. Bug-Assist: Assisting Fault Localization in ANSI-C Programs. In *Computer Aided Verification (Lecture Notes in Computer Science)*, Ganesh Gopalakrishnan and Shaz Qadeer (Eds.). Springer, 504–509. [DOI: 10.1007/978-3-642-22110-1_40](https://doi.org/10.1007/978-3-642-22110-1_40)

45. Manu Jose and Rupak Majumdar. 2011. Cause Clue Clauses. In *Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '11)*. [DOI: 10.1145/1993498.1993550](https://doi.org/10.1145/1993498.1993550)

46. Rami Gökhan Kici. 2020. Personal Communication.

47. Paul C. Kocher. 1996. Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems. In *CRYPTO*.

48. David Kohlbrenner and Hovav Shacham. 2017. On the Effectiveness of Mitigations Against Floating-Point Timing Channels. In *USENIX Security*.

49. Hyoukjun Kwon, William Harris, and Hadi Esmaeilzadeh. 2017. Proving Flow Security of Sequential Logic via Automatically-Synthesized Relational Invariants. In *CSF*.

50. Adam Langley. [n.d.]. ctgrind: Checking that Functions are Constant Time with Valgrind. [GitHub](https://github.com/agl/ctgrind/)

51. Xun Li, Mohit Tiwari, Jason K. Oberg, Vineeth Kashyap, Frederic T. Chong, Timothy Sherwood, and Ben Hardekopf. 2011. Caisson: A Hardware Description Language for Secure Information Flow. In *PLDI*.

52. Chang Liu, Austin Harris, Martin Maas, Michael Hicks, Mohit Tiwari, and Elaine Shi. 2015. Ghostrider: A Hardware-Software System for Memory Trace Oblivious Computation. *SIGPLAN Notices* (2015).

53. V. Benjamin Livshits, Aditya V. Nori, Sriram K. Rajamani, and Anindya Banerjee. 2009. Merlin: Specification Inference for Explicit Information Flow Problems. In *Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '09)*, Michael Hind and Amer Diwan (Eds.). ACM, 75–86. [DOI: 10.1145/1542476.1542485](https://doi.org/10.1145/1542476.1542485)

54. Kenneth L. McMillan. 1997. A Compositional Rule for Hardware Design Refinement. In *Computer Aided Verification (Lecture Notes in Computer Science)*, Orna Grumberg (Ed.), Vol. 1254. Springer, 24–35. [DOI: 10.1007/3-540-63166-6_6](https://doi.org/10.1007/3-540-63166-6_6)

55. Daniel Moghimi, Berk Sunar, Thomas Eisenbarth, and Nadia Heninger. 2020. TPM-FAIL: TPM Meets Timing and Lattice Attacks. In *USENIX Security*.

56. Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache Attacks and Countermeasures: The Case of AES. In *Cryptographers' Track at the RSA Conference*. Springer.

57. Saswat Padhi, Rahul Sharma, and Todd Millstein. [n.d.]. Data-Driven Precondition Inference with Learned Features. In *Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '16)*. Association for Computing Machinery, 42–56. [DOI: 10.1145/2908080.2908099](https://doi.org/10.1145/2908080.2908099)

58. Christos H. Papadimitriou and Kenneth Steiglitz. 1982. *Combinatorial Optimization: Algorithms and Complexity*. Prentice-Hall, Inc., USA.

59. Sumanth Prabhu, Grigory Fedyukovich, Kumar Madhukar, and Deepak D'Souza. 2021. Specification Synthesis with Constrained Horn Clauses. In *PLDI*.

60. Ashay Rane, Calvin Lin, and Mohit Tiwari. 2015. Raccoon: Closing Digital Side-Channels through Obfuscated Execution. In *USENIX Security*.

61. Ashay Rane, Calvin Lin, and Mohit Tiwari. 2016. Secure, Precise, and Fast Floating-Point Operations on x86 Processors. In *USENIX Security*.

62. Oscar Reparaz, Joseph Balasch, and Ingrid Verbauwhede. 2017. Dude, is My Code Constant Time? In *DATE*.

63. Thomas W. Reps, Susan Horwitz, and Shmuel Sagiv. 1995. Precise Interprocedural Dataflow Analysis via Graph Reachability. In *Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages*. ACM Press, 49–61. [DOI: 10.1145/199448.199462](https://doi.org/10.1145/199448.199462)

64. Bruno Rodrigues, Fernando Magno Quintão Pereira, and Diego F. Aranha. 2016. Sparse Representation of Implicit Flows with Applications to Side-Channel Detection. In *CCC*.

65. Xujie Si, Hanjun Dai, Mukund Raghothaman, Mayur Naik, and Le Song. [n.d.]. Learning Loop Invariants for Program Verification. In *Advances in Neural Information Processing Systems 31 (NeurIPS '18)*. Curran Associates, Inc., 7751–7762. [PDF](http://papers.nips.cc/paper/8001-learning-loop-invariants-for-program-verification.pdf)

66. Xujie Si, Aaditya Naik, Hanjun Dai, Mayur Naik, and Le Song. [n.d.]. Code2Inv: A Deep Learning Framework for Program Verification. In *Computer Aided Verification (Lecture Notes in Computer Science)*, Shuvendu K. Lahiri and Chao Wang (Eds.). Springer International Publishing, 151–164. [DOI: 10.1007/978-3-030-53291-8_9](https://doi.org/10.1007/978-3-030-53291-8_9)

67. Mohit Tiwari, Jason K. Oberg, Xun Li, Jonathan Valamehr, Timothy Levin, Ben Hardekopf, Ryan Kastner, Frederic T. Chong, and Timothy Sherwood. 2011. Crafting a Usable Microkernel, Processor, and I/O System with Strict and Provable Information Flow Security. In *ISCA*.

68. Mohit Tiwari, Hassan M. G. Wassel, Bita Mazloom, Shashidhar Mysore, Frederic T. Chong, and Timothy Sherwood. 2009. Complete Information Flow Tracking from the Gates Up. In *Sigplan Notices*.

69. Muralidaran Vijayaraghavan, Adam Chlipala, Arvind, and Nirav Dave. [n.d.]. Modular Deductive Verification of Multiprocessor Hardware Designs. In *Computer Aided Verification (Lecture Notes in Computer Science)*, Daniel Kroening and Corina S. Păsăreanu (Eds.). Springer International Publishing, 109–127. [DOI: 10.1007/978-3-319-21668-3_7](https://doi.org/10.1007/978-3-319-21668-3_7)

70. Conrad Watt, John Renner, Natalie Popescu, Sunjay Cauligi, and Deian Stefan. 2019. CT-Wasm: Type-Driven Secure Cryptography for the Web Ecosystem. *POPL*.

71. W. Eric Wong, Ruizhi Gao, Yihao Li, Rui Abreu, and Franz Wotawa. 2016. A Survey on Software Fault Localization. *IEEE Transactions on Software Engineering* 42, 8 (2016), 707–740. [DOI: 10.1109/TSE.2016.2521368](https://doi.org/10.1109/TSE.2016.2521368)

72. Yuan Xiao, Mengyuan Li, Sanchuan Chen, and Yinqian Zhang. 2017. STACCO: Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in Secure Enclaves. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*. 859–874.

73. Yuval Yarom, Daniel Genkin, and Nadia Heninger. 2017. CacheBleed: A Timing Attack on OpenSSL Constant-Time RSA. *Journal of Cryptographic Engineering* 7, 2 (2017), 99–112.

74. Jiyong Yu, Lucas Hsiung, Mohamad El Hajj, and Christopher W. Fletcher. 2019. Data-Oblivious ISA Extensions for Side Channel-Resistant and High Performance Computing. In *NDSS*.

75. Danfeng Zhang, Aslan Askarov, and Andrew C. Myers. 2012. Language-Based Control and Mitigation of Timing Channels. In *PLDI*.

76. Danfeng Zhang, Yao Wang, G. Edward Suh, and Andrew C. Myers. 2015. A Hardware Design Language for Timing-Sensitive Information-Flow Security. In *ASPLOS*.

77. Hongce Zhang, Weikun Yang, Grigory Fedyukovich, Aarti Gupta, and Sharad Malik. [n.d.]. Synthesizing Environment Invariants for Modular Hardware Verification. In *Verification, Model Checking, and Abstract Interpretation (Lecture Notes in Computer Science)*, Dirk Beyer and Damien Zufferey (Eds.). Springer International Publishing, 202–225. [DOI: 10.1007/978-3-030-39322-9_10](https://doi.org/10.1007/978-3-030-39322-9_10)

### 示例：并非所有变量都公开

**示例 3**：有人可能会认为 Xenon 要求分支条件中出现的所有变量都被标记为公开，但事实并非如此。附录 A 中展示了这样一个程序的示例。运行 Xenon 生成的依赖图如图 16 所示。Xenon 通过消除违反优先顺序的常数时间节点和边来计算根原因候选。结果如图 17 所示。移除所有无法到达源输出的节点后，只剩下节点 r3 和 out，由于 r3 没有前驱节点，我们将其识别为最早变为非常数时间的节点，因此是问题的根原因。解决 ILP 约束后，得出 stall 作为候选假设，并将 stall 标记为公开并重新启动 Xenon 验证了常数时间执行，而无需将 cond 标记为公开。这是可能的，因为 Xenon 能够证明 tmp1 和 tmp2 具有相同的生存位，无论 cond 的值如何，即 tmp1•=tmp2• 不受 cond 影响。

```verilog
module test (clk, in, cond, bubble, out);
  input wire clk, in, cond, bubble;
  output reg out;
  reg tmp1, tmp2, r2, r3;
  always @(posedge clk) begin
    tmp1 <= in | r3;
    tmp2 <= in & r3;
    if (cond)
      r2 <= tmp1;
    else
      r2 <= tmp2;
    if (stall)
      r3 <= r3;
    else
      r3 <= r2;
    out <= r3;
  end
endmodule
```

**图 16**: 示例 3: 变量依赖图。

**图 17**: 示例 3: 消除非常数时间节点和违反优先顺序的边后的变量依赖图。

希望这些改进使您的文本更加清晰、连贯和专业。如果有任何进一步的需求，请随时告知！