### Introduction and Setup
In this study, we evaluate the performance of our privacy-preserving Similar Sequence Query (SSQ) algorithm with the following parameters: sequence length \( n = 500 \), Look-Up Table (LUT) width \( \omega = 20 \), block size \( b = 5 \), number of blocks \( t = 20 \), number of most similar sequences \( k = 10 \), and varying numbers of sequences \( N \). The results are illustrated in Figure 4 in Appendix A.

### Performance Comparison with Cheng et al. [13]
We compare our SSQ run-times in the system setting of [13], which covers privacy-preserving Edit Distance (ED) computations in an outsourcing scenario. The authors of [13] provide exact run-times only for the ED computation between two sequences. We benchmark our algorithm in the same setting and achieve a significant run-time improvement over [13], ranging from 500× to 1,800× (see Table 3).

When computing many sequences in parallel, our algorithm outperforms that of Cheng et al. [13] by more than a factor of 24,000× in run-time and by more than a factor of 16× in communication (see Table 4 and Figure 4 in Appendix A).

### Performance Comparison with Asharov et al. [3]
We also compare our privacy-preserving algorithm for ED and SSQ with [3]. In Table 2 and Figure 4 in Appendix A, we evaluate our algorithms in the benchmark setting of [3, Table 3], where both parties (client and server) are run on one machine. Our protocol can be trivially applied for direct Secure Two-Party Computation (STPC) between the client and server. Additionally, we benchmark our algorithm in a Local Area Network (LAN) setting.

The authors of [3] do not detail their hardware setup, whereas we use commodity hardware for our benchmarks. Our algorithm outperforms that of Asharov et al. [3] by a factor of 5-6× in run-time, due to more lightweight building blocks. Even on a LAN, our algorithm is 3× faster compared to the localhost benchmarks of [3]. The communication overhead of our algorithm is slightly lower, thanks to the use of Correlated Oblivious Transfers (C-OTs) instead of general OTs (see Section 4.2) and a more efficient algorithm for finding the k most similar sequences (see Section 3.3.2).

### Batching for Large-Scale Benchmarks
For some large-scale benchmarks, we split the execution into multiple steps because our Semi-Trusted Third Parties (STTPs) ran out of RAM. This black-box approach does not modify the primitive protocols such as distance computation and k-Nearest Neighbors (k-NN). For distance computation, this only increases the number of communication rounds, while for the k-NN algorithm, additional computation is required. However, this additional computation is very cheap and does not add significant overhead to the overall protocol. For example, for one million input genome sequences in the k-NN protocol with \( k = 10 \) and a batch size of 100,000, we perform 10 iterations with 100,000 input sizes and one iteration of k-NN on the joint output of size \( 10 \times k = 100 \). Since k-NN has linear complexity in the number of inputs, the total overhead in the circuit size is approximately \( \frac{100}{1,000,000} = 0.0001\% \), which is negligible. This approach does not violate privacy, as all data and intermediate results remain in secret-shared form.

### Large-Scale Benchmarks
For large-scale benchmarks on thousands to millions of genomes, we define global parameters: block size \( b = 5 \), padded block size \( b' = 16 \), number of data providers \( \psi = 10 \), and LUT width \( \omega = 30 \) (for better accuracy). The results are given in Table 5 and Figure 5 in Appendix A. As shown in the table, practical large-scale privacy-preserving SSQs on sequences of medium lengths are possible. For sequence lengths \( n = 1K-10K \) and any number of sequences, and \( n = 100 \) with \( N = 100K \), the run-times are in the order of seconds. For all other parameters, the run-times are in the order of minutes, even for databases with \( N = 1M \) sequences. A few minutes of delay is reasonable in practice, demonstrating the real-world applicability of our protocol to large-scale SSQ.

### Whole-Genome Benchmarks
For whole-genome benchmarks, we set the genome sequence length to \( n = 75M \) and the LUT width to \( \omega \in \{10, 20\} \). As shown in [13], reducing the LUT width slightly reduces accuracy but significantly reduces communication and computation. The results are given in Table 6 and Figure 6 in Appendix A. Running our protocol on a few hundred whole-genome sequences is practical, with a protocol run on up to \( N = 1,000 \) sequences taking just a few hours. However, extrapolating to the dataset of [44] with \( N = 1M \) sequences would require months to execute the protocol. Thus, we propose using our protocol for whole-genome runs with relatively small databases (a few hundred sequences) or using high-performance hardware.

### Conclusion
In this work, we designed, implemented, and evaluated EPISODE, a scalable protocol for distributed privacy-preserving SSQs, which outperforms the state of the art by orders of magnitude. Our protocol for SSQ is based on the approximation of ED computation from [3]. SSQ is performed on two STTPs that obliviously compute indices of the k most similar sequences to the client’s query. Our protocol is not only scalable but also substantially reduces the amount of communication and computation for the client. We implement our protocol using a mix of generic Secure Multi-Party Computation (SMPC) protocols and C-OT, which improves the efficiency of our SSQ protocol by using techniques most efficient for particular tasks, resulting in a greater than 20,000× speed-up compared to the recent work of Cheng et al. [13]. Additionally, we extend the protocol of Asharov et al. [3] for outsourcing while reducing its communication and computation overhead.

### Acknowledgements
This work was co-funded by the DFG as part of project E4 within the CRC 1119 CROSSING, and by the German Federal Ministry of Education and Research (BMBF) and the Hessen State Ministry for Higher Education, Research, and the Arts (HMWK) within CRISP.

### References
[1] Md Momin Al Aziz, Dima Alhadidi, and Noman Mohammed. 2017. Secure approximation of edit distance on genomic data. In BMC Medical Genomics.
[2] Gilad Asharov, Daniel Demmler, Michael Schapira, Thomas Schneider, Gil Segev, Scott Shenker, and Michael Zohner. 2017. Privacy-preserving interdomain routing at Internet scale. In Privacy Enhancing Technologies Symposium (PETS).
[3] Gilad Asharov, Shai Halevi, Yehuda Lindell, and Tal Rabin. 2018. Privacy-preserving search of similar patients in genomic data. In Privacy Enhancing Technologies Symposium (PETS).
[4] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. 2013. More efficient oblivious transfer and extensions for faster secure computation. In ACM SIGSAG Conference on Computer and Communications Security (CCS).
[5] Mikhail J. Atallah, Florian Kerschbaum, and Wenliang Du. 2003. Secure and private sequence comparisons. In ACM Workshop on Privacy in the Electronic Society (WPES).
[6] Mikhail J. Atallah and Jiangtao Li. 2005. Secure outsourcing of sequence comparisons. In International Journal of Information Security.
[7] Erman Ayday. 2016. Cryptographic solutions for genomic privacy. In Financial Cryptography and Data Security (FC).
[8] Donald Beaver. 1996. Correlated pseudorandomness and the complexity of private computations. In ACM Symposium on Theory of Computing (STOC).
[9] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Philip Rogaway. 2013. Efficient garbling from a fixed-key blockcipher. In IEEE Symposium on Security and Privacy (S&P).
[10] Dan Bogdanov, Liina Kamm, Sven Laur, and Ville Sokk. 2018. Implementation and evaluation of an algorithm for cryptographically private principal component analysis on genomic data. Computational Biology and Bioinformatics (2018).
[11] Charlotte Bonte, Eleftheria Makri, Amin Ardeshirdavani, Jaak Simm, Yves Moreau, and Frederik Vercauteren. 2018. Towards practical privacy-preserving genome-wide association study. BMC Bioinformatics (2018).
[12] Niklas Büscher, Daniel Demmler, Stefan Katzenbeisser, David Kretzmer, and Thomas Schneider. 2018. HyCC: Compilation of Hybrid Protocols for Practical Secure Computation. In CCS.
[13] Ke Cheng, Yantian Hou, and Liangmin Wang. 2018. Secure similar sequence query on outsourced genomic data. In ACM Asia Conference on Computer and Communications Security (ASIACCS).
[14] Marco Chiesa, Daniel Demmler, Marco Canini, Michael Schapira, and Thomas Schneider. 2017. SIXPACK: Securing internet exchange points against curious onlookers. In International Conference on emerging Networking EXperiments and Technologies (CoNEXT).
[15] Hyunghoon Cho, David J Wu, and Bonnie Berger. 2018. Secure genome-wide association analysis using multiparty computation. Nature biotechnology (2018).
[16] Zoë Corbyn. 2018. How taking a home genetics test could help catch a murderer. https://www.theguardian.com/science/2018/dec/01/how-home-dna-tests