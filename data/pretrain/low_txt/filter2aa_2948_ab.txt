### Patching AMSI and EDR Evasion Techniques

#### Patching AMSI
- **Code**: .NET Runtime, AMSI.dll
- **Process**: AMSI Patch
- **Execution**: 44
- **RAT Development**: 06/01/2022

#### AV/EDR with Usermode Hooks
- **Usermode Hooks**:
  - Map a DLL in each process.
  - Patch `ntdll.dll` to jump first to the `av.dll`.
  - `av.dll` scores invocations of potentially malicious library calls such as `LoadLibrary()`, `GetProcAddress()`, and `VirtualProtect()`.
  - Kill the process if it looks malicious.

- **Code**: .NET Runtime, AMSI.dll, ntdll.dll, av.dll
- **RAT Development**: 06/01/2022

#### Kernel32.dll and NTDLL.DLL Syscalls
- **Syscalls**:
  - `CreateProcessA()`
  - `VirtualAlloc()`
  - `WriteProcessMemory()`

- **Usermode Hooks**:
  - Map a DLL in each process.
  - Patch `ntdll.dll` to jump first to the `av.dll`.
  - `av.dll` scores invocations.
  - Kill the process if it looks malicious.

- **Code**: Kernel32.dll, NTDLL.DLL (Patched, UMH), av.dll
- **RAT Development**: 06/01/2022

#### Restoring NTDLL.DLL from Disk
- **Un-Patched NTDLL.DLL**:
  - Restore `ntdll.dll` from disk using `VirtualAlloc` and `WriteProcessMemory`.

- **Code**: Kernel32.dll, NTDLL.DLL (Un-Patched), av.dll
- **RAT Development**: 06/01/2022

- **Direct Syscalls**:
  - Use direct syscalls to bypass usermode hooks.

- **Code**: Kernel32.dll, NTDLL.DLL (Un-Patched), av.dll
- **RAT Development**: 06/01/2022

#### Executing Managed Code
- **Techniques**:
  - **Patch AMSI**:
    - To prevent detection of .NET tools (AMSI-patch technique).
  - **Patch NTDLL.dll**:
    - To prevent detection of the "Patch AMSI" (Reflexxion technique).
  - **Using Direct Syscalls**:
    - To prevent detection of "Patch NTDLL.dll" (Syswhisper technique).

- **Obfuscate Direct Syscall Invocation**:
  - To further evade detection.

- **Executing Managed Code Technique**:
  - Donut + Reflexxion

- **Demo: Remote .NET Execution**
  - ID: T1055: Process Injection
  - ID: T1620: Reflective Code Loading
  - ID: T1106: Native API

- **RAT Development**: 06/01/2022

#### Developing Your Own RAT
- **EDR Evasion**:
  - Develop your own RAT for EDR evasion.

- **SOC - Security Operations Center**:
  - Also known as Blue Team, CDC, or D&R (Detection & Response).

- **Monitoring Endpoints**:
  - Collect alarms (e.g., from AVs).
  - Collect events (e.g., from sysmon or EDR agents).
  - Rule-based detection (e.g., lolbins).
  - AI-based detection.
  - Dispatch to analysts.

- **Stehlthily Execute an EXE**:
  - As a genuine, non-malicious process (EXE path spoofing).
  - **Process Hollowing**:
    - Start a non-malicious process.
    - Replace its content with another EXE/PE.
    - Resume the process.

- **Process Injection**:
  - OpenProcess to get process information.
  - VirtualAllocEx to allocate memory inside the process.
  - WriteProcessMemory to write shellcode.
  - CreateRemoteThread to run the shellcode.

- **Process Hollowing**:
  - CreateProcessA to start a new process suspended.
  - ZwQueryInformationProcess to get the PEB address.
  - ReadProcessMemory to query the PEB for the image base address.
  - WriteProcessMemory to overwrite the memory with shellcode.
  - ResumeThread to restart the process.

- **Source**: [golang-shellcode-runner](https://github.com/ChrisPritchard/golang-shellcode-runner)

- **UMH Bypass**:
  - Use direct syscalls to bypass usermode hooks.

- **Demo: Process Hollowing**
  - ID: T1055.012 “Process Injection: Process Hollowing”

- **Demo: Copy First**
  - ID: T1036.003 Masquerading: Rename System Utilities

- **Summary**:
  - EDR/AV Evasion techniques.

- **RAT Tools**:
  - Hide RAT and tool signatures.
  - Hide tool execution (UMH, EDR).
  - Security product defense.

- **Command Executions**:
  - Execute commands via `cmd.exe` and `powershell.exe`.
  - Use LOL EXEs, copyfirst, hollow, remote .NET, and PowerShell.
  - Sacrificial process and AMSI bypass.

- **Running Shellcode Techniques**:
  - Various methods like `CreateFiber`, `CreateProcess`, `CreateRemoteThread`, etc.

- **Bypass NTDLL.dll Hooks**:
  - Techniques like Syswhisper, Hell’s Gate, BananaPhone, Firewalker, Parallel-asis, ScareCrow, and Reflexxion.

- **Confuse EDRs**:
  - PE techniques like Process Ghosting, Herpaderping, Doppelgänging, Reimaging, Module Stomping, and Function Stomping.
  - Memory scanning evasion with Gargoyle and DeepSleep.

- **SOCKS5 Proxy Support**:
  - Run tools on the analyst workstation and proxy traffic through the RAT.
  - Implement OctoPwn Dolphin agent.

- **Security Products Bypass Summary**:
  - AV & EDR can be bypassed easily, especially Defender.
  - Lots of scanning and detection still happen in userspace.
  - Future trends may include kernel mode hooks and mini-filters.

- **Is It Worth Writing Your Own RAT?**:
  - For RedTeams: Smarter to use, patch, or update existing open-source ones.
  - For Enthusiasts: Absolutely worth it.

- **RAT Development for RedTeaming**:
  - Analyze SOC use cases.
  - Define required features.
  - Think about architecture.
  - Steal/Copy from existing projects.
  - Time required: Months++.
  - Features: Execute stuff, upload/download files.

- **Sliver**:
  - Go-based C2 framework with proxy support.
  - File upload/download, communication, smartness, Windows mischief, and Mimikatz integration.

- **Operational Security**:
  - Make connectors and backend authenticated.
  - Encrypt all communication.
  - Protocol mischief and operational security considerations.

- **Why Write a RAT?**
  - Discussion on the BloodHoundGang Slack.

- **Downstream/Wingman**:
  - RAT.exe and Wingman.exe for SMB pipes, files, and TCP sockets.

- **RAT Development**: 06/01/2022