### Underestimation of Application Reliability

The single bit-flip fault model underestimates the reliability of Lava by up to 30% and Hotspot by 48%. For other codes, such as Gaussian and Quicksort, both fault models provide similar results due to the extremely high Probability of Vulnerability Factor (PVF) of the instructions, which is close to 1.

### Analysis of Convolutional Neural Networks (CNNs)

For CNNs, considering a Silent Data Corruption (SDC) as shown in Figure 10 and Table III, the single bit-flip injection underestimates the PVF by 33% for LeNET and 50% for YoloV3. The higher reliability of CNNs compared to High-Performance Computing (HPC) codes is not surprising, as it has been observed and studied on GPUs [28], [29].

For LeNET and YoloV3, we also measured the PVF when injecting corrupted t-MxM faults. On LeNET, the SDC PVF with the t-MxM fault model is significantly higher (12 times higher) than the other two fault models. In contrast, for YoloV3, the SDC PVF is similar to the relative error PVF. This difference is attributed to the fact that LeNET has a small number of network parameters per layer (approximately 12,000), so corrupting a tile affects a substantial portion of the parameters. Conversely, YoloV3 layers are much larger (approximately 100,000 parameters), and even a fully corrupted 8x8 tile represents only a small percentage of the matrix.

### Tolerable vs. Critical SDCs

We further analyzed the impact of faults in CNNs by distinguishing between tolerable SDCs and critical SDCs, which are those that corrupt the output sufficiently to cause a misclassification or misdetection. We found that t-MxM injection produces an unacceptable amount of critical errors. For LeNET, 20% of the injected faults completely change the classification, and for YoloV3, 15% do. Notably, none of the single bit-flips or RTL single thread syndromes caused misclassifications or misdetections in LeNET.

A realistic and accurate fault model that considers faults in GPU critical resources, such as the scheduler, is necessary to avoid underestimating the effect of transient faults in CNNs.

### Fault Propagation in RTL

Further investigation into RTL fault propagation revealed that control structures within the scheduler, pipeline, and Special Function Units (SFUs) are the primary sources of errors that corrupt multiple threads, affecting warps or generating geometric patterns of errors as shown in Figure 8. Despite the limited size of these structures and their relatively low Average Vulnerability Factor (AVF), they can have severe consequences for applications, especially CNNs. An efficient and effective hardening solution for GPUs should target these modules.

### Computational Time and Framework Efficiency

Injecting a single fault at the RTL level for one of the applications listed in Figure 10 would take more than 10 hours using our 12 CPU server. With a total of 48,000 faults, it would take approximately 4.8 × 10^5 hours, or over 54 years, to produce all the data in Figure 10. Despite the limitations listed in Section II-C and the introduction of some simplifications, our two-level framework allows for an analysis that would otherwise be impossible.

### Conclusions

In this paper, we applied the concept of multi-level fault injection to GPUs. By combining Register-Transfer Level (RTL) and software fault injection, we reduced the time required for a detailed and accurate analysis of fault propagation from the hardware source to the application output by several orders of magnitude. The RTL accuracy of our framework identifies the most critical GPU resources for both SDCs and DUEs, and provides a set of possible fault effects (syndromes) in the instructions' output. The efficiency of our version of NVBitFI allows for the propagation of these effects in real-world applications.

The fault syndrome database we present is publicly available to provide a more accurate fault model than the naive single bit-flip, to evaluate the reliability of applications, and to validate hardening solutions. The flexibility of our framework also allows for future updates, both in terms of updated RTL models and extended instruction evaluations.

### Future Work

In the future, we intend to include a beam experiment FIT rate evaluation of instructions to provide an estimation of the fault occurrence rate along with fault propagation.

### Acknowledgments

This project received funding from the European Union’s Horizon 2020 research and innovation program under the Marie Sklodowska-Curie grant agreements No 886202, No 722325 (RESCUE ETN), and from The Coordenac¸˜ao de Aperfeic¸oamento de Pessoal de N´ıvel Superior, Brazil (Finance Code 001). We also thank the funding of CNPq, Research Productivity Scholarship grant ref. 306475/2019-7.

### References

[1] P. Rech, L. Carro, N. Wang, T. Tsai, S. K. S. Hari, and S. W. Keckler, “Measuring the Radiation Reliability of SRAM Structures in GPUS Designed for HPC,” in IEEE 10th Workshop on Silicon Errors in Logic - System Effects (SELSE), 2014.

[2] NVIDIA, “NVIDIA Announces World’s First Functionally Safe AI Self-Driving Platform,” 2018.

[3] NVLABS, “Nvbitfi: An architecture-level fault injection tool for GPU application resilience evaluations.” https://github.com/NVlabs/nvbitfi, 2020.

[4] S. K. S. Hari, T. Tsai, M. Stephenson, S. W. Keckler, and J. Emer, “SASSIFI: An architecture-level fault injection tool for GPU application resilience evaluation,” in 2017 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS), pp. 249–258, 2017.

[5] J. Wei, A. Thomas, G. Li, and K. Pattabiraman, “Quantifying the Accuracy of High-Level Fault Injection Techniques for Hardware Faults,” in 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, pp. 375–382, 2014.

[6] A. Vallero, D. Gizopoulos, and S. Di Carlo, “SIFI: AMD southern islands GPU microarchitectural level fault injector,” in 2017 IEEE 23rd International Symposium on On-Line Testing and Robust System Design (IOLTS), pp. 138–144, 2017.

[7] B. Fang, K. Pattabiraman, M. Ripeanu, and S. Gurumurthi, “GPU-Qin: A methodology for evaluating the error resilience of GPGPU applications,” in Performance Analysis of Systems and Software (ISPASS), 2014 IEEE International Symposium on, pp. 221–230, March 2014.

[8] B. Nie, L. Yang, A. Jog, and E. Smirni, “Fault site pruning for practical reliability analysis of GPGPU applications,” in 2018 51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO), pp. 749–761, 2018.

[9] P. Rech, L. L. Pilla, P. O. A. Navaux, and L. Carro, “Impact of GPUs parallelism management on safety-critical and HPC applications reliability,” in 2014 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, pp. 455–466, 2014.

[10] D. A. G. Goncalves de Oliveira, L. L. Pilla, T. Santini, and P. Rech, “Evaluation and mitigation of radiation-induced soft errors in graphics processing units,” IEEE Transactions on Computers, vol. 65, no. 3, pp. 791–804, 2016.

[11] R. Balasubramanian et al., “Understanding the impact of gate-level physical reliability effects on whole program execution,” in 2014 IEEE 20th International Symposium on High Performance Computer Architecture (HPCA), 2014.

[12] S. Nimara, A. Amaricai, O. Boncalo, and M. Popa, “Multi-level simulated fault injection for data dependent reliability analysis of RTL circuit descriptions,” Advances in Electrical and Computer Engineering, vol. 16, pp. 93–98, 02 2016.

[13] H. Cho, C. Cher, T. Shepherd, and S. Mitra, “Understanding soft errors in uncore components,” in 2015 52nd ACM/EDAC/IEEE Design Automation Conference (DAC), pp. 1–6, 2015.

[14] M. A. Kochte, C. G. Zoellin, R. Baranowski, M. E. Imhof, H. Wunderlich, N. Hatami, S. D. Carlo, and P. Prinetto, “Efficient simulation of structural faults for the reliability evaluation at system-level,” in 2010 19th IEEE Asian Test Symposium, pp. 3–8, 2010.

[15] A. Ejlali, S. G. Miremadi, H. Zarandi, G. Asadi, and S. B. Sarmadi, “A hybrid fault injection approach based on simulation and emulation cooperation,” in 2003 International Conference on Dependable Systems and Networks, 2003. Proceedings., pp. 479–488, 2003.

[16] A. L. Sartor, P. H. Becker, and A. C. Beck, “A fast and accurate hybrid fault injection platform for transient and permanent faults,” Des. Autom. Embedded Syst., vol. 23, p. 3–19, June 2019.

[17] E. Schneider and H. Wunderlich, “Multi-level timing and fault simulation on GPUs,” Integr., vol. 64, pp. 78–91, 2019.

[18] O. Subasi, C.-K. Chang, M. Erez, and S. Krishnamoorthy, “Characterizing the impact of soft errors affecting floating-point ALUs using RTL-level fault injection,” in Proceedings of the 47th International Conference on Parallel Processing, ICPP 2018, (New York, NY, USA), Association for Computing Machinery, 2018.

[19] J. E. R. Condia et al., “FlexGripPlus: An improved GPGPU model to support reliability analysis,” Microelectronics Reliability, vol. 109, 2020.

[20] Y. Lecun, L. Bottou, Y. Bengio, and P. Haffner, “Gradient-based learning applied to document recognition,” Proceedings of the IEEE, vol. 86, no. 11, pp. 2278–2324, 1998.

[21] J. Redmon and A. Farhadi, “Yolov3: An incremental improvement,” arXiv, 2018.

[22] D. A. G. D. Oliveira, L. L. Pilla, M. Hanzich, V. Fratin, F. Fernandes, C. Lunardi, J. M. Cela, P. O. A. Navaux, L. Carro, and P. Rech, “Radiation-induced error criticality in modern HPC parallel accelerators,” in 2017 IEEE International Symposium on High Performance Computer Architecture (HPCA), pp. 577–588, 2017.

[23] F. F. dos Santos, J. E. R. Condia, L. Carro, M. S. Reorda, and P. Rech, “DSN 2021 data repository.” https://github.com/UFRGS-CAROL/dsn2021data, June 2021.

[24] R. Baumann, “Soft errors in advanced computer systems,” IEEE Design Test of Computers, vol. 22, pp. 258–266, May 2005.

[25] N. DeBardeleben, S. Blanchard, L. Monroe, P. Romero, D. Grunau, C. Idler, and C. Wright, “GPU behavior on a large HPC cluster,” in Euro-Par 2013: Parallel Processing Workshops (D. an Mey, M. Alexander, P. Bientinesi, M. Cannataro, C. Clauss, A. Costan, G. Kecskemeti, C. Morin, L. Ricci, J. Sahuquillo, M. Schulz, V. Scarano, S. L. Scott, and J. Weidendorfer, eds.), (Berlin, Heidelberg), pp. 680–689, Springer Berlin Heidelberg, 2014.

[26] D. Tiwari, S. Gupta, J. Rogers, D. Maxwell, P. Rech, S. Vazhkudai, D. Oliveira, D. Londo, N. DeBardeleben, P. Navaux, L. Carro, and A. Bland, “Understanding GPU errors on large-scale HPC systems and the implications for system design and operation,” in 2015 IEEE 21st International Symposium on High Performance Computer Architecture (HPCA), pp. 331–342, 2015.

[27] L. B. Gomez, F. Cappello, L. Carro, N. DeBardeleben, B. Fang, S. Gurumurthi, K. Pattabiraman, P. Rech, and M. Sonza Reorda, “GPGPUs: How to combine high computational power with high reliability,” in 2014 Design, Automation Test in Europe Conference Exhibition (DATE), pp. 1–9, 2014.

[28] F. F. d. Santos, P. F. Pimenta, C. Lunardi, L. Draghetti, L. Carro, D. Kaeli, and P. Rech, “Analyzing and increasing the reliability of convolutional neural networks on GPUs,” IEEE Transactions on Reliability, vol. 68, no. 2, pp. 663–677, 2019.

[29] Y. Ibrahim, H. Wang, M. Bai, Z. Liu, J. Wang, Z. Yang, and Z. Chen, “Soft error resilience of deep residual networks for object recognition,” IEEE Access, vol. 8, pp. 19490–19503, 2020.

[30] S. Tselonis and D. Gizopoulos, “GUFI: A framework for GPUs reliability assessment,” in 2016 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS), pp. 90–100, 2016.

[31] A. Chatzidimitriou, P. Bodmann, G. Papadimitriou, D. Gizopoulos, and P. Rech, “Demystifying soft error assessment strategies on ARM CPUs: Microarchitectural fault injection vs. neutron beam experiments,” in 2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pp. 26–38, 2019.

[32] S. Che, M. Boyer, J. Meng, D. Tarjan, J. W. Sheaffer, S. Lee, and K. Skadron, “Rodinia: A benchmark suite for heterogeneous computing,” in 2009 IEEE International Symposium on Workload Characterization (IISWC), pp. 44–54, 2009.

[33] “CUDA code samples,” Oct 2018.

[34] NVIDIA, “CUDA binary utilities.”

[35] F. G. Previlon, C. Kalra, D. R. Kaeli, and P. Rech, “Evaluating the impact of execution parameters on program vulnerability in GPU applications,” in 2018 Design, Automation Test in Europe Conference Exhibition (DATE), pp. 809–814, 2018.

[36] S. S. Mukherjee, C. Weaver, J. Emer, S. K. Reinhardt, and T. Austin, “A Systematic Methodology to Compute the Architectural Vulnerability Factors for a High-Performance Microprocessor,” in Proceedings of the 36th Annual IEEE/ACM International Symposium on Microarchitecture, (Washington, DC, USA), pp. 29–, IEEE Computer Society, 2003.

[37] A. Avizienis, J.-C. Laprie, B. Randell, and C. Landwehr, “Basic concepts and taxonomy of dependable and secure computing,” IEEE Trans. Dependable Secur. Comput., vol. 1, p. 11–33, Jan. 2004.

[38] V. Sridharan and D. R. Kaeli, “Eliminating microarchitectural dependency from architectural vulnerability,” in 2009 IEEE 15th International Symposium on High Performance Computer Architecture, pp. 117–128, 2009.

[39] E. Lindholm, J. Nickolls, S. Oberman, and J. Montrym, “NVIDIA Tesla: A unified graphics and computing architecture,” IEEE Micro, vol. 28, pp. 39–55, March 2008.

[40] B. Du, J. E. R. Condia, M. Sonza. Reorda., and L. Sterpone, “On the evaluation of SEU effects in GPGPUs,” in 2019 IEEE Latin American Test Symposium (LATS), pp. 1–6, 2019.

[41] D. Oliveira, L. Pilla, N. DeBardeleben, S. Blanchard, H. Quinn, I. Koren, P. Navaux, and P. Rech, “Experimental and analytical study of Xeon Phi reliability,” in Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis, SC ’17, (New York, NY, USA), pp. 28:1–28:12, ACM, 2017.

[42] S. Jha, T. Tsai, S. Hari, M. Sullivan, Z. Kalbarczyk, S. W. Keckler, and R. K. Iyer, “Kayotee: A fault injection-based system to assess the safety and reliability of autonomous vehicles to faults and errors,” 2019.