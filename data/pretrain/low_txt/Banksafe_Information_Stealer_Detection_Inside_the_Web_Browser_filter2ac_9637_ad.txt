# Legitimate Browser Hooking

During the evaluation of the Banksafe BHO (Browser Helper Object) implementation, we identified several legitimate software products that install hooks into Internet Explorer. This can result in false positives if the detection system fails to recognize these legitimate hooks.

The following products were found to hook functions within Internet Explorer, presumably for monitoring network traffic: Comodo Firewall, McAfee Internet Security, and Microsoft Bing Toolbar.

With the release of Windows 2000, Microsoft introduced the first version of their Shims framework [2], a hooking framework designed to ensure backward compatibility with altered APIs. The Shims framework supports loader hooks, EAT (Export Address Table) hooks, and inline hooks. Developers can access Shims through the Application Compatibility Framework [4]. Hooks placed via this framework point to the signed system library `appcompat.dll`. For Internet Explorer, Microsoft has also created custom implementations of Shims. Depending on the version of Internet Explorer and Windows, the hooks may point to one of the signed system libraries `ieframe.dll` or `ieshims.dll`.

All of these hooks could be identified as legitimate by checking the target module for a trusted certificate. We did not encounter any false positives while testing other popular software.

## Discussion

Despite the generally positive results, some limitations exist. The fingerprint and, consequently, the identification of information stealers are dependent on the trojan version. In future versions, the author may change which functions are hooked, leading to different fingerprints. For example, the Spyeye trojan exhibited a range of different fingerprints. Even though the classification may become incorrect in such cases, the detection of hooks remains possible and can be used to identify manipulation and man-in-the-browser (MitB) attacks in general.

Additionally, fingerprints may vary between installations on different Windows systems, especially across major versions but even between different patch levels. This is because trojan authors may hook APIs that only exist in certain Windows installations. These functions can only be hooked—and thus integrated into the fingerprint—on those specific installations.

Another challenge arises when multiple trojans are installed on a single system. The behavior resulting from this interference is undefined, making it impossible to predict how our method will react.

Currently, no known information stealer can infect 64-bit processes, so we could not test our proposed detection method with 64-bit web browsers. We also encountered a banking trojan (Katusha) that we could not detect using our method because it was implemented as a browser helper object and did not directly hook API calls. To detect this type of trojan, other techniques for inspecting BHOs must be employed.

## Summary

Information stealers pose a growing threat, capable of easily contaminating any system connected to the Internet. They steal credit card details, banking credentials, and other valuable information. Typically, the data is stolen from within the browser before it is sent. By manipulating the browser, encryption is bypassed, allowing criminals to extract and manipulate all data sent or received by the browser.

In this paper, we present an approach for detecting and classifying information stealers based on the manipulations they perform inside browsers. A fingerprint is created based on the individual manipulations or hooks. An overview of different hooking techniques is also provided. Despite many trojan families having been around for a long time, they are not reliably detected by existing antivirus solutions. Our experiments on various products showed that neither signature-based nor heuristic-based detection methods can reliably identify specimens from known families. Using the Banksafe tool, we were able to reliably identify all manipulations inside the browser. Tests conducted on 1,045 samples from the Zeus and SpyEye families revealed that the majority of specimens have a characteristic fingerprint, which can be used to reliably classify them. No false positives were found within the class of unique fingerprints. Besides these prominent families, Banksafe was also able to identify other information stealers, such as Patcher, Carberp, Silentbanker, Bebloh, and Gozi. Their detection is just as reliable as that of Zeus and SpyEye, but more samples need to be tested to determine the classification performance.

## Future Work

It is likely that the increasing distribution of 64-bit operating systems and browsers will lead to the development and distribution of 64-bit information stealers. It remains to be seen whether the current techniques used in these trojans can be ported to 64-bit or if new techniques will emerge. If new techniques do emerge, simply porting the countermeasures presented in this paper to 64-bit may not be sufficient. We found only one trojan (Katusha) that was implemented as a BHO. If this technique becomes more widespread, new countermeasures will need to be developed.

Another issue that needs to be addressed is the variability of fingerprints. While it is possible to generate a fingerprint for each trojan version on each affected Windows operating system, additional research may lead to a more generic approach for classifying information stealers based on their hooking characteristics.

### References

1. New Spyeye gains Zeus features, http://blogs.rsa.com/rsafarl/new-spyeye-gains-zeus-features-a-detailed-analysis-of-spyeye-trojan-v1-3/ (last visit March 2011)
2. Understanding Shims, http://technet.microsoft.com/en-us/library/dd837644%28WS.10%29.aspx (last visit March 2011)
3. Virustotal web antivirus scan service by hispasec sistemas, http://www.virustotal.com/ (last visit March 2011)
4. Windows XP Application Compatibility Technologies, http://technet.microsoft.com/en-us/library/bb457032.aspx (last visit March 2011)
5. Abuse.ch. abuse.ch spyeye tracker, https://spyeyetracker.abuse.ch/ (last visit March 2011)
6. Abuse.ch. abuse.ch zeus tracker, https://zeustracker.abuse.ch/ (last visit March 2011)
7. Apel, M., Bockermann, C., Meier, M.: Measuring similarity of malware behavior. In: Proceedings of the IEEE 34th Conference on Local Computer Networks, pp. 891–898 (2009)
8. Bailey, M., Andersen, J., Morley-Mao, Z., Jahanian, F.: Automated classification and analysis of internet malware. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 178–197. Springer, Heidelberg (2007)
9. Blunden, B.: The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System. Jones and Bartlett Publishers, Inc., USA (2009)
10. Butler, J., Hoglund, G.: System virginity verifier. In: Black Hat 2004, Las Vegas, USA (2004)
11. Coogan, P.: Symantec blog - spyeye bot versus zeus bot, http://www.symantec.com/connect/de/blogs/spyeye-bot-versus-zeus-bot (last visit March 2011)
12. F-Secure. ZeuS Variants Targeting Mobile Banking, http://www.f-secure.com/weblog/archives/00002123.html (last visit March 2011)
13. Garfinkel, T., Rosenblum, M.: A virtual machine introspection based architecture for intrusion detection. In: Proc. Network and Distributed Systems Security Symposium (February 2003)
14. Hoglund, G., Butler, J.: Rootkits: Subverting the Windows Kernel. Addison-Wesley Professional, Reading (2005)
15. Hunt, G., Brubacher, D.: Detours: binary interception of win32 functions. In: Proceedings of the 3rd Conference on USENIX Windows NT Symposium, vol. 3, p. 14. USENIX Association, Berkeley (1999)
16. Husse, C.: Easyhook library, http://www.codeplex.com/easyhook (last visit March 2011)
17. Keung Luk, C., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace, S., Janapa, V., Hazelwood, R.K.: Pin: Building customized program analysis tools with dynamic instrumentation. In: Programming Language Design and Implementation, pp. 190–200. ACM Press, New York (2005)
18. Krebs, B.: Operation trident breach, http://krebsonsecurity.com/tag/operation-trident-breach/ (last visit March 2011)
19. Stevens, K., Jackson, D.: Zeus banking trojan report. Technical report, Dell SecureWorks (March 2010)
20. Lanzi, A., Sharif, M.I., Lee, W.: K-tracer: A system for extracting kernel malware behavior. In: Network and Distributed System Security Symposium, San Diego, California (2009)
21. Leder, F., Plohmann, D.: Pybox - a python approach to sandboxing. In: 5th SPRING Workshop, Bonn, Germany (April 2010) (GI SIG SIDAR)
22. Leder, F., Steinbock, B., Martini, P.: Classification and detection of metamorphic malware using value set analysis. In: Proceedings of the 4th International Conference on Malicious and Unwanted Software (October 2009)
23. Levine, J.G., Grizzard, J.B., Owen, H.L.: Detecting and categorizing kernel-level rootkits to aid future detection. IEEE Security and Privacy 4, 24 (2006)
24. Litty, L., Lagar-Cavilla, H.A., Lie, D.: Hypervisor support for identifying covertly executing binaries. In: Proceedings of the 17th Conference on Security Symposium, pp. 243–258. USENIX Association, Berkeley (2008)
25. Lobo, D., Watters, P., Wu, X.: RBACS: Rootkit behavioral analysis and classification system. In: International Workshop on Knowledge Discovery and Data Mining, pp. 75–80 (2010)
26. Lobo, D., Watters, P., Wu, X.-W.: Identifying rootkit infections using data mining. In: 2010 International Conference on Information Science and Applications (ICISA), pp. 1–7 (April 2010)
27. Lobo, D., Watters, P., Wu, X.-W.: A new procedure to help system/network administrators identify multiple rootkit infections. In: Proceedings of the 2010 Second International Conference on Communication Software and Networks, ICCSN 2010, Washington, DC, USA, pp. 124–128 (2010)
28. Pietrek, M.: An in-depth look into the Win32 portable executable file format, http://msdn.microsoft.com/en-us/magazine/cc301808.aspx (last visit March 2011)
29. Rieck, K., Holz, T., Willems, C., Duessel, P., Laskov, P.: Learning and classification of malware behavior. In: Zamboni, D. (ed.) DIMVA 2008. LNCS, vol. 5137, pp. 108–125. Springer, Heidelberg (2008)
30. Riley, R., Jiang, X., Xu, D.: Guest-transparent prevention of kernel rootkits with VMM-based memory shadowing. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008)
31. Riley, R., Jiang, X., Xu, D.: Multi-aspect profiling of kernel rootkit behavior. In: Proceedings of the 4th ACM European Conference on Computer Systems, EuroSys 2009, pp. 47–60. ACM, New York (2009)
32. Rutkowska, J.: System virginity verifier. In: Black Hat 2006, Washington, D.C., USA (2006)
33. Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. SIGOPS Oper. Syst. Rev. 41, 335–350 (2007)
34. Tereshkin, A., Wojtczuk, R.: Introducing ring -3 rootkits. Technical report, Invisible Things Lab, Wisconsin, USA (July 2009)
35. Wang, Z., Jiang, X., Cui, W., Wang, X.: Countering persistent kernel rootkits through systematic hook discovery. In: Recent Advances in Intrusion Detection (2008)
36. Wicherski, G.: pehash: A novel approach to fast malware clustering. In: Proceedings of the 2nd Usenix Workshop on Large-scale Exploits and Emergent Threats (2009)
37. Yin, H., Liang, Z., Song, D.: HookFinder: Identifying and understanding malware hooking behaviors. In: Network and Distributed System Security Symposium (2008)
38. Yin, H., Poosankam, P., Hanna, S., Song, D.: HookScout: Proactive and binary-centric hook detection. In: Kreibich, C., Jahnke, M. (eds.) DIMVA 2010. LNCS, vol. 6201, pp. 1–20. Springer, Heidelberg (2010)
39. Zhang, Q., Reeves, D.S.: MetaAware: Identifying metamorphic malware. In: Proceedings of the 23rd Annual Computer Security Applications Conference, pp. 411–420 (2007)