# On the Structure and Characteristics of User Agent Strings

**Authors:**
- Jeff Kline, comScore, Inc. (jeff.kline@comscore.com)
- Paul Barford, University of Wisconsin-Madison (paul.barford@wisc.edu)
- Aaron Cahn, comScore, Inc. (aaron.cahn@comscore.com)
- Joel Sommers, Colgate University (joel.sommers@colgate.edu)

## Abstract
User agent (UA) strings transmitted during HTTP transactions provide client system configuration details to ensure that content returned by a server is appropriate for the requesting host. Analyzing UA strings and their structure offers a unique perspective on active client systems in the Internet and, when tracked longitudinally, insights into system and configuration dynamics. In this paper, we present our study of UA string characteristics based on a corpus of over 1 billion UA strings collected over two years by comScore. We begin by examining the general characteristics of UA strings, focusing on the most prevalent strings and dynamic behaviors. We identify the top 10 most popular User Agents, which account for 26% of total daily volume. These strings describe the expected instances of popular platforms such as Microsoft, Apple, and Google. We then analyze the characteristics of low-volume UA strings, which have important implications for unique device identification. This class of user agents generates the majority of traffic, with between 2 million and 10 million instances observed each day. We show that the distribution of UA strings has temporal dependence and varies based on the type of content served. Finally, we report on two large-scale UA anomalies characterized by web browsers sending false and misleading UAs in their web requests.

## CCS Concepts
- Information systems → Web log analysis; Traffic analysis; Data mining
- Software and its engineering → Context-specific languages

## Keywords
- User Agent Strings
- Character Entropy Matrix
- Internet Measurement

## Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

IMC '17, November 1–3, 2017, London, United Kingdom
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-5118-8/17/11...$15.00
https://doi.org/10.1145/3131365.3131406

## ACM Reference Format
Jeff Kline, Aaron Cahn, Paul Barford, and Joel Sommers. 2017. On the Structure and Characteristics of User Agent Strings. In Proceedings of IMC '17, London, United Kingdom, November 1–3, 2017, 7 pages.
https://doi.org/10.1145/3131365.3131406

## 1 Introduction
The diversity of client system configurations (in terms of hardware, operating system, and applications that access content) in the Internet presents significant challenges for application and content service providers. The key challenge is delivering content in formats specifically designed for different types of clients to provide the best user experience. Content providers often maintain complex regression test environments to ensure their pages render and behave correctly on different platforms [9, 20]. However, the primary mechanism for ensuring that content is delivered in the optimal format is the user agent string (UA), which is transmitted by clients as part of a request for content.

UAs are used by various Internet applications (e.g., web, crawlers, mobile apps) for content negotiation, but our focus in this paper is on their use in the web. The basic format for a web UA is "one or more product identifiers, each followed by zero or more comments" in a format like `product[/version]` [22]. The intent of the UA is to provide sufficient detail about a client system to enable a server to transmit content in the appropriate format and for debugging interoperability problems [18, 22]. As observed in prior studies (e.g., [11]), UAs themselves are a compelling source of information about client systems in the Internet.

In this paper, we describe our study of UA characteristics. Our goal is to provide a new perspective on UAs that will be useful for content service providers and other entities that utilize UAs, to offer insights to the research community on Internet client diversity and dynamics, and to inform other potential uses of UAs such as client fingerprinting [11, 12]. Our work is based on analyzing a unique corpus of over 1 billion UA strings collected over a period of 2 years by comScore. Data collection at comScore is enabled by the placement of tags on partner web pages, which are activated when clients access those pages. Prior studies (e.g., [8]) have found that comScore tags are among the most prevalent third-party tag deployments across the Internet. UAs are captured by comScore servers on tag activation.

To conduct our study, we built a UA processing and analysis infrastructure. Similar to other studies of large data sets, our processing infrastructure is primarily Hadoop-based. A unique aspect of our work includes developing a UA parsing capability that is robust to both standard measurement errors (corrupted characters, etc.) and non-standard UA formats. Categorization and volume counts of historical UAs relied on an archive of UA descriptors maintained by comScore.

Our analysis begins by considering the basic characteristics of our UA data from both time-series and entropy-based perspectives. We find that UAs collected for our study exhibit variability on multiple time scales. On daily time scales, our analysis indicates how users shift between devices over the course of a day and between weekdays and weekends. On longer timescales, we see clear indications of occasional hardware and software updates. The entropy-based representation provides a character-wise measure of the diversity within the space of UA strings over time. Based on this representation, we find that there is structure within the space of strings and show that changes within the UAs distribution tend to be step-wise, not smooth.

Next, we consider the characteristics of both high- and low-volume strings. We find that the most prevalent UAs comprise only 26% of all traffic. We also find that the rank-frequency distribution of UAs exhibits a power-law-like structure. Finally, we observe approximately 1 million unique UAs on a daily basis. We describe sources of diversity within the UA space and show that the prevalence of mobile browser apps and developer error are also contributing factors.

Finally, we consider anomalous characteristics of strings. We report on two instances where high-volume UA strings are inaccurate or unexpected in significant ways. For example, we find evidence of various anomalous events in our data, including the spurious appearance of a large volume (approximately 100 million per day) of outdated UAs, which we diagnose as a software misconfiguration.

In summary, the primary contribution of this paper is in characterizing UA strings. Our results on multi-scale UA dynamics have implications for content providers. Our result on the power-law-like UA prevalence combined with our results showing that many factors impact the distribution of UAs suggests that simple, UA-based device fingerprinting methods are unlikely to be effective. Finally, our results regarding unwanted behaviors support efforts related to identifying invalid traffic based on UAs [10]. To the best of our knowledge, ours is the first study to consider UA characteristics broadly.

## 2 Data
The data we analyze has been collected by comScore, an Internet measurement company that partners with publishers, brands, ad networks, and others to report on online audience behaviors. comScore acquires its data by providing each of its partners with a block of customized JavaScript code. Each partner then embeds this code within the content it serves. For example, if the partner is a publisher, the publisher deploys comScore’s code on each of its web pages. If the partner is a brand running an ad campaign, the code is delivered alongside the ad campaign’s creative content (e.g., an image with an embedded link).

When executed by a web browser, this code instructs the browser to make an HTTP request to comScore’s measurement domain, which, in turn, logs each request. The data comScore collects includes the cookie, referrer, UA, a timestamp, and other information pertinent to comScore’s business. comScore has clear and strict guidelines concerning the use and protection of personally-identifiable information.

The daily volume of HTTP requests ingested by comScore is approximately 50 billion. Since its mission concerns reporting about online behaviors, comScore also maintains several repositories of high-level historical information about the traffic it observes. These repositories include high-level summary information about UAs. comScore also maintains a codebase that categorizes user agents by manufacturer, device type, browser type, and so on.

Our data processing systems are a hybrid combination of Apache Hadoop MapReduce tasks and Greenplum (a variant of Postgres) SQL queries.

## 3 General Characteristics
A fundamental task of web log analysis is the generation of aggregated statistics over browser, device type, and operating system. Typically, such statistics are derived from the UA. The HTTP standard describes general features about the structure and information that belong within the UA string [22, §5.5.3]. Despite this recommendation, we report below that the space of user agents within a typical web log is, in fact, a loosely-structured, very dynamic, and extremely diverse set of strings. Using the UA as the basis for web traffic categorization is a complex endeavor.

In this section, we focus our discussion around four challenges faced by processes that categorize UAs: coverage of the space, effective partitioning of the space, validation of the categorization process itself, and coping with the constant evolution of browsers, device types, and, to a lesser extent, operating systems.

We begin by describing the problem of covering the space. A consistent feature that we observe, and which we discuss in the next section, is that the rank-frequency distribution of UA strings exhibits a power-law-like structure. As a consequence, the majority of web requests have UA strings that are unpopular. This rare-is-typical phenomenon means that to accurately describe basic features of Internet traffic, one must have an accurate description of rarely-seen user agent strings. On a typical day, comScore servers observe approximately 1 million distinct UA strings.

To expose some of the complexity of proper categorization, we drill down on two user agent strings that each generated about 30 million records on May 10, 2017. By volume, both ranked among the top 200 overall. The first belongs to a device that runs the Android operating system:

```
Dalvik/2.1.0 (Linux; U; Android 5.1; F100A Build/LMY47D)
```

This User Agent’s device type is reported as F100A. Categorizing this device as a phone, tablet, game console, or by its manufacturer, however, is simply not possible without an external reference that can supply this information. (We believe it represents a Forsa F100 model.)

Next, the most common Facebook Mobile App user agent observed on May 10 was:

```
Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X)
```

These examples highlight the challenges in categorizing UAs and the need for robust and flexible parsing and categorization mechanisms.