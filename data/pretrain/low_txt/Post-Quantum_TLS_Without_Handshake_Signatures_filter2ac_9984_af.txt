### Post-Quantum TLS Without Handshake Signatures

#### Introduction
Falcon and Dilithium have been identified as the most efficient post-quantum cryptographic (PQC) schemes for use in TLS 1.3, as reported in [100]. We compare these against pre-quantum TLS 1.3, which uses X25519 [9] key exchange with RSA-2048 [97] signatures. For all cryptographic primitives, we considered the parameter set at NIST security level 1, targeting security equivalent to AES-128 [43, Sec. 4.A.5]. All chosen primitives are NIST PQC round-3 finalists or alternate candidates, except for an instantiation of the stateful signature algorithm XMSS at NIST level 1 for signatures generated by Certificate Authorities (CAs). XMSS is already defined in RFC [56] and is being considered by NIST for a fast track to standardization [31]. The XMSS RFC only describes parameters matching NIST level 5 and higher, but adapting it to a level-1 parameter set is straightforward. We refer to this level-1 parameter set of XMSS used in our experiments as XMSSMT; details are provided in Appendix D. In our scenarios, we do not consider XMSS for signatures generated by TLS servers due to concerns about securely managing the state, though CAs might be able to do so safely.

Table 1 summarizes the scenarios and primitives we consider, along with the resulting communication sizes.

#### Post-Quantum Key Encapsulation Mechanisms (KEMs)
The post-quantum KEMs we use are:
- **SIKEp434-compressed** [61]: The KEM with the smallest sum of ciphertext and public key.
- **Kyber-512** [99]: An efficient Module-LWE-based KEM.
- **NTRU-HPS-2048509** [110]: An efficient NTRU-based KEM.

#### Signature Schemes
The signature schemes we use are:
- **GeMSS-128** [27]: The scheme with the smallest signature.
- **XMSSMT** [56], specified in Appendix D: The scheme with the smallest sum of signature and public key.
- **Falcon-512** [91]: An efficient scheme based on the NTRU assumption and the stateless scheme with the smallest sum of signature and public key.
- **Dilithium II** [79]: An efficient scheme based on Module-LWE and Module-SIS.

For comparison, we also show the total TCP payload data for the TLS handshake, although this is partially implementation-dependent. The number of algorithms for which support is advertised affects this size.

#### Caching of Intermediate CA Certificates
To authenticate a server, a client typically uses a chain of certificates starting with a root CA’s certificate, followed by at least one intermediate CA certificate, and finally the leaf certificate of the actual server. If clients cache the intermediate CA certificates, those do not need to be transmitted. Although not yet widely adopted, this option is available in TLS via the Cached Information Extension [98].

The consequences of such caching include reduced data transmission and fewer signatures to verify. A less obvious consequence is the significant impact on the optimal choice of (post-quantum) signature scheme for intermediate CAs. If the signed public keys of intermediate CAs are transmitted only once and then cached, the size of the signature becomes the most important factor. This makes MQ-based schemes like Rainbow [35] or GeMSS [27] with their small signatures but large public keys optimal for use in intermediate CA certificates. The same applies to root CAs, as their public keys are assumed to be pre-installed.

We investigate both scenarios: including the transmission and verification of intermediate CA certificates (i.e., without caching), and excluding the transmission and verification of intermediate CA certificates (i.e., with caching). For the "including" scenario, we assume a single intermediate CA certificate in the chain.

#### Implementation
To experimentally evaluate KEMTLS, we implemented it by modifying Rustls [16], a modern TLS library written in Rust. Rustls provides a clean implementation of TLS 1.3 that was easier to modify than OpenSSL and offers comparable performance [17]. It uses the Ring [102] library for cryptography and WebPKI [103] for certificate validation. Both of these are also written in Rust, although Ring links to C implementations from BoringSSL [49].

Table 2 shows the average time in milliseconds for asymmetric cryptographic operations and handshake establishment under different network conditions.

#### Results
- **Handshake Time (31.1 ms latency, 1000 Mbps bandwidth)**
  - Excluding intermediate CA certificate: 3 ms
  - Including intermediate CA certificate: 1 ms

- **Handshake Time (195.6 ms latency, 10 Mbps bandwidth)**
  - Excluding intermediate CA certificate: 0.134 ms
  - Including intermediate CA certificate: 40.058 ms

- **Computation Time for Asymmetric Crypto**
  - Excluding intermediate CA certificate: 0.080 ms
  - Including intermediate CA certificate: 0.141 ms

Label syntax: ABCD: A = ephemeral key exchange, B = leaf certificate, C = intermediate CA certificate, D = root certificate.
Label values: Dilithium, ECDH X25519, Falcon, GeMSS, Kyber, NTRU, RSA-2048, SIKE, XMSSMT; all level-1 schemes.

#### Integration of KEMs
We first added support for KEM-based key agreement to the Ring library by changing its ephemeral key-agreement API, designed for Diffie–Hellman key agreement, to a KEM-style API. We then updated Rustls to use this new API. We integrated KEMs from PQClean [63], a project that collects cleaned-up implementations of the NIST PQC candidate schemes. PQClean provides a standardized, high-quality implementation of these KEMs, making integration straightforward.