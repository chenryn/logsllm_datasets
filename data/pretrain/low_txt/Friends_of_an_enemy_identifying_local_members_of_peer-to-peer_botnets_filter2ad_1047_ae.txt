# Introduction

This document discusses the use of a structured P2P (Peer-to-Peer) topology to reduce the likelihood of mutual contacts among peers in a botnet, and explores various detection and mitigation strategies. The following sections provide a detailed analysis and discussion of these topics.

## Using a Structured P2P Topology

A botmaster can adopt a structured P2P topology to decrease the probability of mutual contacts by ensuring that peers within the same network communicate with different sets of peers. To achieve this, peers in the same network must coordinate to avoid communicating with the peers in each other’s peer list. In essence, peers in the same network form their own mini-botnet and appear as a single node to the rest of the P2P botnet.

However, intra-network communications among peers in the same network may provide new means for detecting P2P bots. Even if a botmaster manages to deploy a mutual-contact-free P2P architecture, multiple networks can share flow records to exploit mutual contacts among P2P bots in different networks. This is unavoidable because the botmaster cannot predict which networks will collaborate. For such mitigation strategies, cooperating networks can use privacy-preserving set operations, such as those described in [7], to share data without revealing sensitive information.

## Poisoning Clusters

The purpose of cluster poisoning in P2P networks is to destroy the clustering structure of a graph by creating bogus edges [5]. Cluster poisoning is challenging in our context. To perform poisoning, a botmaster must create an edge between a P2P bot and a benign node on a mutual-contacts graph. This requires making both the bot and the benign host communicate with a mutual external IP. However, this is not a trivial task for a botmaster unless they control a router or proxy in the same network.

## Related Work

### Early Botnets

Early botnets used centralized Command and Control (C&C) servers to distribute commands and updates to individual bots, typically via IRC or HTTP protocols [9]. Although centralized structures are simple and easy to manage, they suffer from a single point of failure and are vulnerable to traditional defenses like domain revocation, DNS redirection, and blacklisting. Consequently, botmasters have shifted to P2P architectures for C&C channels. In [20], authors argue that P2P bots are harder to detect, especially with limited traffic visibility from a single Autonomous System (AS).

### Detection Techniques

Several techniques have been proposed to detect botnets. For example, [25] and [24] use machine learning to train classifiers with different features to detect botnet C&C flows. Strayer et al. [31] proposed a technique to detect botnet activity by exploiting temporal correlations between C&C activities of bots in the same botnet. Binkey and Singh [2] detected IRC botnets using anomalies in TCP and IRC statistics, while Goebel and Holz [13] exploited the structure and evolution of IRC nicknames. Karasaridis et al. [23] combined traffic aggregates with IDS alarms to identify centralized botnets within a Tier-1 ISP. Gu et al. [16] developed BotHunter, which searches for specific patterns in IDS logs to detect successful infections caused by centralized botnets.

### P2P Botnet Detection

Detecting P2P bots is more challenging due to the lack of trivial correlations and the use of encryption and random ports [14, 18, 10]. Crawler-based methods, such as those proposed in [22] and [18], aim to enumerate P2P bots globally. Kang et al. [21] proposed a Sybil attack-based passive monitoring scheme to enumerate P2P bots even behind NAT or firewalls. However, these methods are not designed to identify local P2P bots and require reverse engineering of bot binaries and C&C protocols.

Gu et al. [17] proposed BotSniffer to detect bots based on spatial-temporal correlation between bot responses to commands. They also developed BotMiner [15], which clusters hosts in a network by their malicious activity and communication patterns. Yen and Reiter [33] proposed TAMD, which aggregates traffic containing similar external IPs, payloads, and internal platform types to detect botnets. While clustering-based schemes are effective, botmasters can evade them by assigning different tasks to bots or randomizing communication patterns [15].

## Conclusion and Future Work

In this paper, we presented a method to identify local members of a P2P botnet in a network, starting from a known member of the same botnet. The proposed method leverages the fact that botnet members are more likely to have mutual contacts with each other than with benign hosts. We evaluated the method using real P2P botnet (Nugache) data and provided a mathematical analysis of the C&C structure of P2P botnets.

There are limitations to the proposed scheme. A botmaster can evade detection by employing a structured P2P topology that avoids mutual contacts. However, developing such a mechanism is non-trivial for current botnets. If a botmaster achieves this, multiple networks can mitigate it by sharing traffic, possibly in a privacy-preserving manner, to exploit mutual contacts between peers in different networks. Future work will explore the benefits of data-sharing and study new P2P botnet architectures to improve the proposed scheme against potential evasion strategies.

## Acknowledgements

The authors would like to thank the anonymous reviewers for their comments and David Dittrich for his valuable contributions.

## References

[1] R. Bhagwan, S. Savage, and G. M. Voelker. Understanding availability. In The 2nd International Workshop on Peer-to-peer systems, 2003.
[2] J. R. Binkley and S. Singh. An algorithm for anomaly-based botnet detection. In SRUTI’06: Proceedings of the 2nd conference on Steps to Reducing Unwanted Traffic on the Internet, 2006.
[3] J. Caballero, P. Poosankam, C. Kreibich, and D. Song. Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering. In Proceedings of the 16th ACM Conference on Computer and Communication Security, Chicago, IL, November 2009.
[4] CERT Coordination Center. SiLK: System for internet-level knowledge. Available at http://tools.netsa.cert.org/silk/.
[5] D. R. Choffnes, J. Duch, D. Malmgren, R. Guierma, F. E. Bustamante, and L. Amaral. Swarmscreen: Privacy through plausible deniability in P2P systems. Technical report, Northwestern EECS Technical Report, March 2009.
[6] D. Dagon, G. Gu, C. Lee, and W. Lee. A taxonomy of botnet structures. In Proceedings of the 23 Annual Computer Security Applications Conference (ACSAC’07), December 2007.
[7] L. K. Dawn and D. Song. Privacy-preserving set operations. In Advances in Cryptology - CRYPTO 2005, LNCS, pages 241–257, 2005.
[8] D. Dittrich and S. Dietrich. Discovery techniques for P2P botnets. In Stevens Institute of Technology CS Technical Report 2008-4, September 2008.
[9] D. Dittrich and S. Dietrich. New directions in peer-to-peer malware. In Sarnoff Symposium, 2008 IEEE, April 2008.
[10] D. Dittrich and S. Dietrich. P2P as botnet command and control: A deeper insight. In MALWARE 2008. 3rd International Conference on Malicious and Unwanted Software, 2008.
[11] P. Erdos and A. Renyi. On random graphs I. Publ. Math. Debrecen 6, pages 290–297, 1959.
[12] P. Erdos and A. Renyi. The evolution of random graphs. Magyar Tud. Akad. Mat. Kutato Int. Kozl 5, pages 17–61, 1960.
[13] J. Goebel and T. Holz. Rishi: Identify bot contaminated hosts by IRC nickname evaluation. In HotBots’07: Proceedings of the first conference on First Workshop on Hot Topics in Understanding Botnets, 2007.
[14] J. B. Grizzard, V. Sharma, C. Nunnery, B. B. Kang, and D. Dagon. Peer-to-peer botnets: overview and case study. In HotBots’07: Proceedings of the first conference on First Workshop on Hot Topics in Understanding Botnets, 2007.
[15] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: Clustering analysis of network traffic for protocol- and structure-independent botnet detection. In Proceedings of the 17th USENIX Security Symposium (Security’08), 2008.
[16] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. BotHunter: Detecting malware infection through IDS-driven dialog correlation. In Proceedings of the 16th USENIX Security Symposium (Security’07), August 2007.
[17] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting botnet command and control channels in network traffic. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08), February 2008.
[18] T. Holz, M. Steiner, F. Dahl, E. Biersack, and F. Freiling. Measurements and mitigation of peer-to-peer-based botnets: a case study on Storm Worm. In LEET’08: Proceedings of the 1st Usenix Workshop on Large-Scale Exploits and Emergent Threats, 2008.
[19] M. Iliofotou, P. Pappu, M. Faloutsos, M. Mitzenmacher, S. Singh, and G. Varghese. Network monitoring using traffic dispersion graphs (TDGs). In IMC ’07: Proceedings of the 7th ACM SIGCOMM conference on Internet measurement, pages 315–320, 2007.
[20] M. Jelasity and V. Bilicki. Towards automated detection of peer-to-peer botnets: On the limits of local approaches. In Proceedings of the 2nd USENIX Workshop on Large-Scale Exploits and Emergent Threats LEET’09, April 2009.
[21] B. B. Kang, E. Chan-Tin, C. P. Lee, J. Tyra, H. J. Kang, C. N. Z. Wadler, G. Sinclair, N. Hopper, D. Dagon, and Y. Kim. Towards complete node enumeration in a peer-to-peer botnet. In Proceedings of ACM Symposium on Information, Computer and Communications Security (ASIACCS 2009), March 2009.
[22] C. Kanich, K. Levchenko, B. Enright, G. M. Voelker, and S. Savage. The Heisenbot uncertainty problem: challenges in separating bots from chaff. In LEET’08: Proceedings of the 1st Usenix Workshop on Large-Scale Exploits and Emergent Threats, pages 1–9, 2008.
[23] A. Karasaridis, B. Rexroad, and D. Hoeﬂin. Wide-scale botnet detection and characterization. In HotBots’07: Proceedings of the first conference on First Workshop on Hot Topics in Understanding Botnets, 2007.
[24] S. Kondo and N. Sato. Botnet traffic detection techniques by C&C session classification using SVM. Advances in Information and Computer Security, pages 91–104, 2007.
[25] C. Livadas, R. Walsh, D. Lapsley, and W. Strayer. Using machine learning techniques to identify botnet traffic. Local Computer Networks, Annual IEEE Conference on, 0:967–974, 2006.
[26] S. Nagaraja, P. Mittal, C.-Y. Hong, M. Caesar, and N. Borisov. BotGrep: Finding P2P bots with structured graph analysis. In USENIX Security Conference, August 2010.
[27] P. Porras, H. Saidi, and V. Yegneswaran. Conficker C P2P Protocol and Implementation, September 2009. http://mtc.sri.com/Conficker/P2P/.
[28] G. Sinclair, C. Nunnery, and B.-H. Kang. The Waledac protocol: The how and why. In Malicious and Unwanted Software (MALWARE), 2009 4th International Conference on, pages 69–77, October 2009.
[29] E. Stinson and J. C. Mitchell. Towards systematic evaluation of the evadability of bot/botnet detection methods. In WOOT’08: Proceedings of the 2nd conference on USENIX Workshop on offensive technologies, 2008.
[30] S. Stover, D. Dittrich, J. Hernandez, and S. Dietrich. Analysis of the Storm and Nugache trojans: P2P is here. In ;login: The USENIX Magazine, volume 32-6, December 2007.
[31] W. Strayer, R. Walsh, C. Livadas, and D. Lapsley. Detecting botnets with tight command and control. Local Computer Networks, Annual IEEE Conference on, 0:195–202, 2006.
[32] The Honeynet Project. Honeywall, 2009. https://projects.honeynet.org/honeywall/.
[33] T.-F. Yen and M. K. Reiter. Traffic aggregation for malware detection. In DIMVA ’08: Proceedings of the 5th international conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 207–227, 2008.