# UI Layout and XAML Overview

This file outlines the layout of the user interface (UI). The Design View window provides two representations of this file. XAML, which stands for eXtensible Application Markup Language, is used by Universal Windows Platform (UWP) applications to define the layout for the GUI. As you progress through the exercises in this book, you will gain a deeper understanding of XAML.

## Understanding XAML
- **Graphical View**: At the top, you see a graphical representation of the screen, typically defaulting to a Surface Book.
- **XAML Code**: The lower pane contains the XAML code that describes the contents of the screen. If you are familiar with XML, XAML should look similar.

### Next Exercise: Using Design View
In the next exercise, you will use the Design View window to lay out the UI for the application and examine the generated XAML code.

**Tip**: Close the Output and Error List windows to provide more space for the Design View window.

### Terminology
- **Windows Applications**: Traditional Windows applications use "windows" for the UI.
- **UWP Applications**: In UWP, these are referred to as "pages."
- **Form**: For clarity, we will use the term "form" to refer to both windows and pages. However, "window" will be used to refer to items in the Visual Studio 2017 IDE, such as the Design View window.

## Creating the User Interface
You will use the Design View window to add three controls to the form and examine the C# code automatically generated by Visual Studio 2017 to implement these controls.

### Step-by-Step Guide

1. **Open the Toolbox**:
   - Click the Toolbox tab in the margin to the left of the form in the Design View window.
   - The Toolbox appears, displaying various components and controls. By default, the General section is selected, which doesn't contain any controls yet.

2. **Expand Common XAML Controls**:
   - Expand the Common XAML Controls section to see a list of commonly used controls.
   - **Tip**: The All XAML Controls section offers a more extensive list of controls.

3. **Add a TextBlock Control**:
   - Click on TextBlock in the Common XAML Controls section and drag it onto the form in the Design View window.
   - **Tip**: Ensure you select TextBlock, not TextBox. If you place the wrong control, you can remove it by clicking the item and pressing Delete.
   - The TextBlock control is added to the form. You can reposition it by clicking and dragging.

4. **Reposition the TextBlock**:
   - Move the TextBlock control to the upper-left corner of the form.
   - The XAML description in the lower pane now includes the TextBlock control and its properties, such as Margin, Text, HorizontalAlignment, and VerticalAlignment.

5. **Edit Properties**:
   - Open the Properties window from the View menu.
   - Select the TextBlock control and expand the Text property. Change the FontSize to 20 pt and press Enter.
   - **Note**: The suffix "pt" indicates the font size in points, where 1 point is equal to 1/72 of an inch.

6. **Modify XAML**:
   - In the XAML pane, change the FontSize attribute to 24. The changes will be reflected in the Design View window and the Properties window.
   - Experiment with other properties of the TextBlock control and observe the changes in the XAML pane.

7. **Change Text Property**:
   - Change the value of the Text property from "TextBlock" to "Please enter your name."

8. **Add a TextBox Control**:
   - Display the Toolbox again and drag the TextBox control onto the form below the TextBlock control.
   - **Tip**: Use alignment indicators to ensure the controls are lined up neatly.
   - Resize the TextBox control to align with the right edge of the TextBlock control.
   - Change the Name property of the TextBox control from `textBox` to `userName`.

9. **Add a Button Control**:
   - Drag a Button control onto the form, placing it to the right of the TextBox control.
   - Change the Name property of the Button control to `OK` and the Content property to "OK".

10. **Build and Run the Application**:
    - Build the solution and verify that it builds successfully.
    - Set the Debug Target to Local Machine and start debugging.
    - The application should run and display the form. You can enter text in the TextBox and click OK, but no action will occur yet.

11. **Stop Debugging**:
    - Return to Visual Studio and stop debugging.

### Examining the UWP App
- **MainPage.xaml.cs**: This file contains the definition of the `MainPage` class and a constructor that calls `InitializeComponent`.
- **App.xaml and App.xaml.cs**: These files provide the entry point for the application. The `OnLaunched` method in `App.xaml.cs` creates a new Frame object, displays the `MainPage` form, and activates it.

### Adding Code to the Graphical Application
- **Write Code for the OK Button**:
  - Open `MainPage.xaml` in the Design View window.
  - Select the OK button on the form.
  - In the Properties window, click the Event Handlers button for the selected element.

By following these steps, you will create a functional and well-structured UI for your UWP application.