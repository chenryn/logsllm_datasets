### Performance Overhead of Xen Virtualization and Security Solutions

The overhead of Xen virtualization combined with SecVisor on a kernel build benchmark, as described in Section 8, is approximately 119%. In contrast, the equivalent measurement for Xen plus VICI is only around 42%.

### Hypervisor-Based Methods for Kernel Control Flow Integrity

Grizzard [13] and Petroni and Hicks [21] have explored hypervisor-based methods to counter attempts to alter kernel behavior by modifying control flow. Grizzard modifies the monitored kernel's code to request the hypervisor to perform a check whenever the kernel is about to jump or call an address stored in a function pointer. The hypervisor verifies whether the jump or call follows a valid branch in the kernel's control-flow graph. If a rootkit has altered the function pointer to cause an unauthorized jump, the hypervisor will detect the diversion. Petroni and Hicks developed a technique based on static analysis to achieve similar results. We have integrated part of their technique into the VICI Agent, which is detailed in Section 9.

### Isolation and Performance Trade-offs

These efforts use hypervisors to isolate monitors from the virtualized systems they monitor, but this virtualization reduces system performance. Some projects have explored using special hardware to provide isolation without virtualization, such as placing the monitor on a PCI card [19] or on one CPU of a dual-CPU machine [15]. Although these solutions avoid virtualization overhead, they cannot examine the registers of the CPU running the monitored system, making them vulnerable to "dummy kernel" attacks [27].

### Performance Comparison

Table 1 compares the average time required to build the Linux 2.6.24 kernel under three conditions: without Xen, with Xen, and with Xen plus VICI. The tests were conducted on a Lenovo T60 laptop with an Intel T7200 Core Duo 2GHz CPU and 2GB RAM running Debian GNU/Linux 4.0. The "Xen" results refer to building the kernel in a Xen 3.1 virtual machine with 128MB of virtual RAM. The "Xen + VICI" results include the VICI Agent running one scan every 50ms, with no attacks or repairs. Averages are computed over five trials.

| Condition        | Average Duration (s) | Standard Deviation | Penalty vs. No Xen (%) | Penalty vs. Xen (%) |
|------------------|----------------------|--------------------|------------------------|---------------------|
| No Xen           | 1782.17              | 4.64               | -                      | -                   |
| Xen              | 2412.05              | 3.34               | 35.34%                 | -                   |
| Xen + VICI       | 2537.35              | 3.89               | 42.37%                 | 5.19%               |

The table highlights both the overhead associated with virtualization and the additional overhead introduced by the VICI Agent. The performance of the VICI Agent's diagnose-and-repair approach compares favorably with the prevention-oriented alternative of SecVisor. Although the cost of virtualization makes the VICI Agent's overhead greater than that reported for hardware-based monitors like Copilot, our hypervisor-based approach allows us to examine CPU register state, potentially avoiding the most severe shortcoming of hardware-based schemes.

### Limitations and Future Work

While the current VICI Agent prototype has performed well in laboratory settings, it does not examine all aspects of the virtual machine and kernel state that a rootkit might modify. Some diagnostic methods require more than 250 milliseconds to execute, which is beyond the project's sponsor-mandated time bound. In other cases, efficient diagnostic methods exist but have not yet been implemented. For example, diagnostics to cover kernel and process page tables and detect "dummy kernel" attacks are not yet in place. Future work could ignore the 250 millisecond bound and incorporate more diagnostic methods to increase coverage.

To improve diagnostic coverage of kernel function pointers, we have used part of Petroni and Hicks' State-Based Control Flow Integrity static analysis technique [21] to generate a list of kernel function pointers for the VICI Agent to examine. This technique performs a static analysis of the Linux kernel source and outputs a list of function pointers in the kernel's data segments, along with C code to find dynamically allocated function pointers in the kernel's heap. However, an average run of a prototype diagnostic function based on their technique took 1.78 seconds, far exceeding the VICI Agent's 250 millisecond requirement. Consequently, we currently use only the list of function pointers in the kernel's data segments and do not examine those in the heap.

Healthy kernels change some function pointer values during runtime. To prevent false positives, we have identified and removed changing function pointers from the list. Our current list contains over 9000 entries.

In addition to imperfect coverage, the VICI Agent operates asynchronously with the virtual machine's kernel, scanning periodically every 50 milliseconds. Malware could exploit this by making and immediately reversing changes between scans or by altering function pointers outside the VICI Agent's coverage. However, the VICI Agent is designed to detect and repair the effects of kernel-modifying rootkits, a specific type of malware with distinct characteristics.

Momentary kernel state modifications are generally not useful for rootkits, which must make persistent changes to hide their presence over extended periods. Rootkits must modify strategic points along the kernel's system call control flow path to hide files, processes, and other resources. Although the VICI Agent's diagnostic coverage is limited, we have aimed to cover these strategic points.

Additional diagnostic techniques, such as semantic integrity checks, could improve the VICI Agent's effectiveness, particularly for data structures that naturally change during runtime. There is also room for improvement in the prototype's repair actions, such as the Checkpoint and Reboot actions, which cannot complete within the 250 millisecond time bound.

Throughout its development, the VICI Agent has benefited from adapting and incorporating techniques from various fields, and there is significant potential for future work in this area.

### Conclusions

Systems under constant attack need rapid, automated responses to malware infections. The VICI Agent uses novel repair actions to restore kernels modified by rootkits within milliseconds of diagnosis. Its escalation and de-escalation behaviors minimize the negative impact of repairs by saving expensive actions for extreme cases and relying on cheaper repairs when possible. In our experiments, the simplest repair actions have proven sufficient to undo modifications made by well-known rootkits like Adore-ng, Override, and SuKIT.

When configured to run diagnostics every 50 milliseconds, the VICI Agent reduces overall application performance by slightly more than 5% compared to an identical virtualized system without the VICI Agent. This overhead is less than half that of published measurements for prevention-oriented alternatives. The VICI Agent demonstrates the rapid, fully-automatic kernel repair necessary to keep Internet-facing systems running and free of kernel-modifying rootkits despite continuous attacks.

We thank Peter Ferrie, Michael Hicks, and Nick Petroni for their feedback on earlier drafts of this paper. This work was supported by DARPA/AFRL contract number FA8750-07-C-0008. The names of actual companies and products mentioned herein may be the trademarks of their respective owners.

### References

[1] J. A. Ambros-Ingerson and S. Steel. Integrating planning, execution and monitoring. In Proc. of the Seventh National Conference on Artificial Intelligence, 1988.

[2] K. Asrigo, L. Litty, and D. Lie. Using vmm-based sensors to monitor honeypots. In 2nd International Conference on Virtual Execution Environments, 2006.

[3] A. Baliga, P. Kamat, and L. Iftode. Lurking in the Shadows: Identifying Systemic Threats to Kernel Data (Short Paper). In Proc. of the 2007 IEEE Symposium on Security and Privacy, 2007.

[4] R. A. Brooks. A robust layered control system for a mobile robot. IEEE Journal of Robotics and Automation, (2), 1986.

[5] R. A. Brooks. Engineering approach to building complete, intelligent beings. Proc. of the SPIE—the International Society for Optical Engineering, (1002), 1989.

[6] R. A. Brooks. Intelligence without representation. Artificial Intelligence, 47(1–3), 1991.

[7] D. Brumley. Invisible intruders: rootkits in practice. ;login: The Magazine of USENIX and SAGE, Sept. 1999.

[8] J. Dean and S. Ghemawat. MapReduce: Simplified Data Processing in Large Clusters. In 6th USENIX Symposium on Operating System Design and Implementation, 2004.

[9] A. K. Dewdney. In the game called Core War hostile programs engage in a battle of bits, Computer Recreations. Scientific American, May 1984.

[10] B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, I. Pratt, A. Warfield, P. Barham, and R. Neugebauer. Xen and the Art of Virtualization. In Proc. of the ACM Symposium on Operating Systems Principles, 2003.

[11] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In Proc. of the 10th Annual Network and Distributed System Security Symposium, 2003.

[12] M. P. Georgeff and A. L. Lansky. Reactive Reasoning and Planning. In Proceedings of the Sixth National Conference on Artificial Intelligence, 1987.

[13] J. B. Grizzard. Towards self-healing systems: re-establishing trust in compromised systems. PhD thesis, Atlanta, GA, USA, 2006. Adviser-Henry L. Owen, III.

[14] G. Hoglund and J. Butler. Rootkits: Subverting the Windows Kernel. Addison-Wesley Professional, 2005.

[15] D. Hollingworth and T. Redmond. Enhancing operating system resistance to information warfare. In MILCOM 2000. 21st Century Military Communications Conference Proceedings, volume 2, 2000.

[16] X. Jiang, X. Wang, and D. Xu. Stealthy malware detection through vmm-based "out-of-the-box" semantic view reconstruction. In Proc. of the 14th ACM conference on Computer and communications security, 2007.

[17] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. VMM-based hidden process detection and identification using lycosid. In Proc. of the fourth ACM SIGPLAN/SIGOPS international conference on Virtual execution environments, 2008.

[18] L. Litty and D. Lie. Manitou: a layer-below approach to fighting malware. In Proc. of the 1st workshop on Architectural and system support for improving software dependability, 2006.

[19] N. L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - a coprocessor-based kernel runtime integrity monitor. In 13th USENIX Security Symposium, 2004.

[20] N. L. Petroni, T. Fraser, A. Walters, and W. A. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In Proc. of the 15th USENIX Security Symposium, 2006.

[21] N. L. Petroni and M. Hicks. Automated detection of persistent kernel control-flow attacks. In 14th ACM conference on Computer and communications security, 2007.

[22] N. A. Quynh and Y. Takefuji. Towards a tamper-resistant kernel rootkit detector. In Proc. of the 2007 ACM symposium on Applied computing, 2007.

[23] S. regenerative Systems (SRS) Program Phase II. Cognitive immunity and self-healing. In BAA 06-35 Proposer Information Pamphlet. Defense Advanced Research Projects Agency, 2006.

[24] R. Rivest. The MD5 Message-Digest Algorithm. Technical Report Request For Comments 1321, Network Working Group, April 1992.

[25] S. J. Russell and P. Norvig. Artificial Intelligence A Modern Approach. Prentice Hall, 2nd edition, 2002.

[26] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: a tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. In 21st ACM symposium on Operating systems principles, 2007.

[27] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and P. Khosla. Pioneer: verifying code integrity and enforcing untampered code execution on legacy systems. In 20th ACM symposium on Operating systems principles, 2005.

[28] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup service for internet applications. SIGCOMM Comput. Commun. Rev., 31(4), 2001.

[29] Y.-M. Wang, D. Beck, B. Vo, R. Roussev, and C. Verbowski. Detecting stealth software with Strider GhostBuster. In Proc. of the International Conference on Dependable Systems and Networks, 2005.

[30] M. Xu, X. Jiang, R. Sandhu, and X. Zhang. Towards a VMM-based usage control framework for OS kernel integrity protection. In Proc. of the 12th ACM symposium on Access control models and technologies, 2007.

[31] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer. Secure Coprocessor-based Intrusion Detection. In 10th ACM SIGOPS European Workshop, 2002.