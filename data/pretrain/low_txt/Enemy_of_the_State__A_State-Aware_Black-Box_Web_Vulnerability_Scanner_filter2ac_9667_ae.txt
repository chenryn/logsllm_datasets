### Web Application State Machine and Security Analysis

#### HTTP Requests and Responses
The provided log shows a series of HTTP GET and POST requests to a web application, specifically targeting the `/cart` and `/users` endpoints. The requests include adding items to the cart, logging in, registering, and posting comments.

- **Adding Items to Cart:**
  - `GET /cart/action.php?action=add&picid=7`
  - `GET /cart/action.php?action=add&picid=8`
  - `GET /cart/action.php?action=add&picid=9`
  - `GET /cart/action.php?action=add&picid=14`
  - `GET /cart/action.php?action=add&picid=15`

- **User Actions:**
  - `POST /cart/action.php?action=purchase`
  - `GET /users/logout.php`
  - `POST /users/login.php`
  - `POST /users/register.php`
  - `POST /comments/add_comment.php`

- **Numerical Values:**
  - `1756`, `1769`, `1782`, `884`, `1256`, `1389`, `889`, `894`

These numerical values could represent timestamps or session identifiers, but their exact purpose is not clear from the context provided.

#### Figure 7: State Machine Inference
Figure 7 illustrates a state machine inferred by a state-aware scanner for WackoPicko v2. This state machine helps in understanding the internal states and transitions of the web application, which is crucial for effective security testing and fuzzing.

#### Related Work
Several approaches have been developed to detect and mitigate vulnerabilities in web applications:

- **Black-Box Vulnerability Scanners:**
  - Halfond et al. [22] improved traditional black-box scanners by leveraging static analysis to better identify input vectors.
  
- **Static Analysis:**
  - Pixy [28] used static analysis with taint propagation to detect SQL injection, XSS, and shell command injection.
  - Saner [4] employed sound static analysis to detect failures in sanitization routines, followed by dynamic analysis to reduce false positives.
  - WebSSARI [25] combined static analysis with runtime instrumentation to insert proper sanitization routines.

- **Combining Static and Dynamic Analysis:**
  - Felmetsger et al. [17] used execution traces and symbolic model checking to detect logic flaws.
  - Csallner et al. [12] and Artzi et al. [3] combined dynamic traces and symbolic execution for generic bug finding.

- **Secure Code Development:**
  - Efforts to improve web application security include educating developers [40] and designing frameworks that enforce security constraints [38, 10].
  - Robertson and Vigna [38] developed a strongly-typed framework to prevent XSS and SQL injection.
  - Chong et al. [10] designed a language with compile-time and runtime checks to ensure strong confidentiality and integrity.

- **Attack Prevention:**
  - WebSSARI [25] and Scott and Sharp [39] focused on preventing attacks by enforcing security policies at the gateway level.

- **Exploring Hidden Web:**
  - McAllister et al. [32] monitored user interactions to generate test cases for form submissions.
  - Raghavan and Garcia-Molina [36] classified different types of dynamic content and developed methods for automatically filling forms.

- **Reverse Engineering State Machines:**
  - Amalfitano et al. [2] tackled the problem of reverse engineering client-side AJAX code to infer the state machine of web applications.
  - Berg et al. [7] proposed a Symbolic Mealy Machine (SMM) model for reversing state machines, though it may not be directly applicable due to the complexity of fully exploring all states.

### Conclusion
We have presented a novel approach to inferring the internal state machine of web applications and using it to drive state-aware fuzzing. This approach allows our crawler to explore more of the web application than a classical state-agnostic crawler. We believe that detecting state changes by differences in output for identical responses is a valid method and should be adopted by black-box tools.

### Acknowledgements
This work was supported by the Office of Naval Research (ONR) under Grant N000141210165, the National Science Foundation (NSF) under grant CNS-1116967, and Secure Business Austria.

### References
[1] Acunetix. Acunetix Web Vulnerability Scanner. http://www.acunetix.com/.
[2] Amalfitano, D., Fasolino, A., and Tramontana, P. Reverse Engineering Finite State Machines from Rich Internet Applications. In 2008 15th Working Conference on Reverse Engineering (2008), IEEE, pp. 69–73.
[3] Artzi, S., Kiezun, A., Dolby, J., Tip, F., Dig, D., Paradkar, A., and Ernst, M. Finding bugs in web applications using dynamic test generation and explicit state model checking. IEEE Transactions on Software Engineering (2010).
[4] Balzarotti, D., Cova, M., Felmetsger, V., Jovanovic, N., Kirda, E., Kruegel, C., and Vigna, G. Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In 2008 IEEE Symposium on Security and Privacy (2008), IEEE, pp. 387–401.
[5] Balzarotti, D., Cova, M., Felmetsger, V., and Vigna, G. Multi-module Vulnerability Analysis of Web-based Applications. In Proceedings of the ACM conference on Computer and Communications Security (CCS) (2007), pp. 25–35.
[6] Bau, J., Bursztein, E., Gupta, D., and Mitchell, J. State of the Art: Automated Black-Box Web Application Vulnerability Testing. In Security and Privacy (SP), 2010 IEEE Symposium on (2010), IEEE, pp. 332–345.
[7] Berg, T., Jonsson, B., and Raffelt, H. Regular Inference for State Machines using Domains with Equality Tests. In Proceedings of the Theory and practice of software, 11th international conference on Fundamental approaches to software engineering (2008), Springer-Verlag, pp. 317–331.
[8] Byrne, D. Grendel-Scan. http://www.grendel-scan.com/.
[9] Chinotec Technologies. Paros. http://www.parosproxy.org/.
[10] Chong, S., Vikram, K., and Myers, A. SIF: Enforcing confidentiality and integrity in web applications. In Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium (2007), USENIX Association, p. 1.
[11] Cova, M., Balzarotti, D., Felmetsger, V., and Vigna, G. Swaddler: An Approach for the Anomaly-based Detection of State Violations in Web Applications. In Proceedings of the International Symposium on Recent Advances in Intrusion Detection (RAID 2007) (2007), pp. 63–86.
[12] Csallner, C., Smaragdakis, Y., and Xie, T. DSD-Crasher: A hybrid analysis tool for bug finding. ACM Transactions on Software Engineering and Methodology (TOSEM) 17, 2 (2008), 1–37.
[13] Di Lucca, G., Fasolino, A., Pace, F., Tramontana, P., and De Carlini, U. WARE: a tool for the reverse engineering of Web applications. In Sixth European Conference on Software Maintenance and Reengineering, 2002. Proceedings (2002), pp. 241–250.
[14] Dijkstra, E. W. A Note on Two Problems in Connexion with Graphs. Numerische Mathematik 1 (1959), 269–271.
[15] Doupé, A., Boe, B., Kruegel, C., and Vigna, G. Fear the EAR: Discovering and Mitigating Execution After Redirect Vulnerabilities. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS 2011) (Chicago, IL, October 2011).
[16] Doupé, A., Cova, M., and Vigna, G. Why Johnny Can’t Pentest: An Analysis of Black-box Web Vulnerability Scanners. In Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA 2010) (2010), Springer, pp. 111–131.
[17] Felmetsger, V., Cavedon, L., Kruegel, C., and Vigna, G. Toward Automated Detection of Logic Vulnerabilities in Web Applications. In Proceedings of the USENIX Security Symposium (Washington, DC, August 2010).
[18] Fossi, M. Symantec Global Internet Security Threat Report. Tech. rep., Symantec, April 2009. Volume XIV.
[31] Li, X., Yan, W., and Xue, Y. SENTINEL: Securing Database from Logic Flaws in Web Applications. In CODASPY (2012), pp. 25–36.
[32] McAllister, S., Kirda, E., and Kruegel, C. Leveraging User Interactions for In-Depth Testing of Web Applications. In Recent Advances in Intrusion Detection (2008), Springer, pp. 191–210.
[33] Mesbah, A., Bozdag, E., and Van Deursen, A. Crawling AJAX by Inferring User Interface State Changes. In Web Engineering, 2008. ICWE ’08. Eighth International Conference on (july 2008), pp. 122–134.
[34] Nurmi, D., Wolski, R., Grzegorczyk, C., Obertelli, G., Soman, S., Youseff, L., and Zagorodnov, D. The Eucalyptus Open-Source Cloud-Computing System. In Cluster Computing and the Grid, 2009. CCGRID ’09. 9th IEEE/ACM International Symposium on (may 2009), pp. 124–131.
[35] Portswigger. Burp Proxy. http://www.portswigger.net/burp/.
[36] Raghavan, S., and Garcia-Molina, H. Crawling the hidden web. In Proceedings of the International Conference on Very Large Data Bases (2001), Citeseer, pp. 129–138.
[37] Riancho, A. w3af – Web Application Attack and Audit Framework. http://w3af.sourceforge.net/.
[19] Gargoyle Software Inc. HtmlUnit. http://htmlunit.sourceforge.net/.
[20] Garrett, J. J. Ajax: A New Approach to Web Applications. http://www.adaptivepath.com/ideas/essays/archives/000385.php, Feb. 2005.
[21] Grossman, J. Challenges of Automated Web Application Scanning. Blackhat Windows 2004, 2004.
[22] Halfond, W., Choudhary, S., and Orso, A. Penetration testing with improved input vector identification. In Software Testing Verification and Validation, 2009. ICST’09. International Conference on (2009), IEEE, pp. 346–355.
[38] Robertson, W., and Vigna, G. Static Enforcement of Web Application Integrity Through Strong Typing. In Proceedings of the USENIX Security Symposium (Montreal, Quebec CA, September 2009).
[39] Scott, D., and Sharp, R. Abstracting application-level web security. In Proceedings of the 11th international conference on World Wide Web (2002), ACM, pp. 396–407.
[40] SPI Dynamics. Complete Web Application Security: Phase 1 – Building Web Application Security into Your Development Process. SPI Dynamics Whitepaper, 2002.
[23] HP. WebInspect. https://download.hpsmartupdate.com/webinspect/.
[41] Steve, C., and Martin, R. Vulnerability Type Distributions in CVE. Mitre report, May (2007).
[42] Suto, L. Analyzing the Accuracy and Time Costs of Web Application Security Scanners, 2010.
[43] Vieira, M., Antunes, N., and Madeira, H. Using Web Security Scanners to Detect Vulnerabilities in Web Services. In Dependable Systems & Networks, 2009. DSN’09. IEEE/IFIP International Conference on (2009), IEEE, pp. 566–571.
[24] Huang, Y.-W., Huang, S.-K., Lin, T.-P., and Tsai, C.-H. Web application security assessment by fault injection and behavior monitoring. In Proceedings of the 12th international conference on World Wide Web (New York, NY, USA, 2003), WWW ’03, ACM, pp. 148–159.
[25] Huang, Y.-W., Yu, F., Hang, C., Tsai, C.-H., Lee, D.-T., and Kuo, S.-Y. Securing web application code by static analysis and runtime protection. In WWW ’04: Proceedings of the 13th international conference on World Wide Web (New York, NY, USA, 2004), ACM, pp. 40–52.
[26] IBM. AppScan. http://www-01.ibm.com/software/awdtools/appscan/.
[27] Jensen, T. R., and Toft, B. Graph Coloring Problems. Wiley-Interscience Series on Discrete Mathematics and Optimization. Wiley, 1994.
[28] Jovanovic, N., Kruegel, C., and Kirda, E. Static analysis for detecting taint-style vulnerabilities in web applications. Journal of Computer Security 18, 5 (2010), 861–907.
[29] Kals, S., Kirda, E., Kruegel, C., and Jovanovic, N. Secubat: a Web Vulnerability Scanner. In Proceedings of the 15th international conference on World Wide Web (2006), ACM, pp. 247–256.
[30] Li, X., and Xue, Y. BLOCK: A Black-box Approach for Detection of State Violation Attacks Towards Web Applications. In Proceedings of the Annual Computer Security Applications Conference (ACSAC 2011) (Orlando, FL, December 2011).

### Appendix A: Web Applications
This section describes the web applications used in the evaluation, along with their functionalities:

- **Gallery:** An open-source photo hosting application where administrators can upload photos and organize them into albums. Guests can view and comment on the uploaded photos. It has AJAX functionality but is fully functional without JavaScript.
- **PhpBB v2 and v3:** Open-source forum software allowing registered users to create threads, comment on threads, and message other users. Version 2 is known for its security vulnerabilities, while Version 3 is a complete rewrite.
- **SCARF:** An open-source conference management system where administrators can upload papers, and registered users can comment on them.
- **Vanilla Forums:** An open-source forum software similar to PhpBB, with unique features like passing parameters via the URL path and extensive use of AJAX.
- **WackoPicko v2:** An intentionally vulnerable web application created to evaluate black-box vulnerability scanners. Users can upload pictures, comment on others' pictures, and purchase pictures.

### Appendix B: Scanner Configuration
The following settings were used to run the evaluated scanners:

- **wget:**
  ```sh
  wget -rp -w 0 --waitretry=0 -nd --delete-after --execute robots=off
  ```

- **w3af:**
  ```sh
  misc-settings
  set maxThreads 0
  back
  plugins
  discovery webSpider
  audit blindSqli, eval, localFileInclude, osCommanding, remoteFileInclude, sqli, xss
  ```

- **skipfish:**
  ```sh
  skipfish -u -LV -W /dev/null -m 10
  ```

This configuration ensures that the scanners are set up to perform comprehensive and efficient testing of the web applications.