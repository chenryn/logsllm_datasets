# Detecting Android Root Exploits by Learning from Root Providers

**Authors:**
- Ioannis Gasparis
- Zhiyun Qian
- Chengyu Song
- Srikanth V. Krishnamurthy  
University of California, Riverside

**Conference:**
Proceedings of the 26th USENIX Security Symposium  
August 16–18, 2017 • Vancouver, BC, Canada  
ISBN 978-1-931971-40-9  
Open access to the Proceedings of the 26th USENIX Security Symposium is sponsored by USENIX.

**Abstract:**
Malware capable of rooting Android phones is among the most dangerous. Detecting root exploits in malware is challenging because such malware often targets specific Android devices and/or OS versions, and aborts if the expected runtime environment (e.g., a vulnerable device driver) is not present. This makes detection difficult for emulators like Google Bouncer. In this paper, we introduce RootExplorer, a system designed to address this problem. RootExplorer leverages the analysis of legitimate one-click root apps, which are commercial-grade applications that facilitate rooting. By learning the precise preconditions and environmental requirements of root exploits, RootExplorer constructs appropriate analysis environments, either in an emulator or on a smartphone testbed, to effectively detect embedded root exploits in malware. Our extensive evaluations show that RootExplorer can detect all known malware samples with root exploits and has no false positives. We also discovered an app currently available on the market that contains an embedded root exploit.

## 1. Introduction

Android is the most popular mobile operating system, with 1.4 billion users and 87.5% of the market share. Unlike Apple, Google does not have complete control over the hardware or software of Android devices, allowing for a diverse and competitive ecosystem. However, this diversity introduces security challenges. The OS update process varies among vendors, and vendor customizations often introduce vulnerabilities at different levels of the software stack. Consequently, millions of users are exposed to critical security vulnerabilities.

Among these vulnerabilities, privilege escalation vulnerabilities, which allow attackers to gain root privileges, are particularly pernicious. Once an attacker acquires root privileges, they can bypass the Android sandbox, perform malicious activities, and erase evidence of compromise. Malware with embedded root exploits is on the rise, as evidenced by recent reports of malware families like GODLESS and HummingBad, which affected millions of devices. Despite Google's efforts with services like "Google Bouncer," detecting malware with root exploits remains a significant challenge.

In this paper, we aim to address the challenge of detecting malware that employs various root exploits. Our key observation is that, in addition to malware, there are legitimate and popular one-click root apps, backed by large companies, that can root tens of thousands of different Android devices using numerous root exploits. These root exploits are highly customized, reliable, and likely to be used by malware developers. We leverage these exploits to build RootExplorer, a system that automatically extracts signatures from root exploits and uses them for runtime malware detection.

However, implementing this strategy is not straightforward. Most root exploits are tailored to specific Android devices, models, and OS versions, making it difficult to trigger them in an emulator unless the environment matches exactly. To overcome this, RootExplorer learns the environmental requirements from commercial root exploits and creates the "expected" runtime environment to interact with and drive the execution of the exploits.

We design, prototype, and extensively evaluate RootExplorer. It consists of an offline training phase where it extracts useful information about root exploits from one-click root apps using behavior analysis, and an online detection phase where it dynamically analyzes apps in specially tailored environments to detect root exploits. Our evaluations show that RootExplorer achieves an almost perfect true positive rate with no false positives and has identified an app currently available on the market that contains root exploits.

### Summary of Contributions:
- **Identification and Addressing of Challenges:** We identify and address the fundamental challenge of detecting Android root exploits that target a diverse set of Android devices. We learn from commercial one-click root apps to understand the environmental features and pre-conditions needed to trigger root exploits.
- **Design and Implementation of RootExplorer:** We design and implement RootExplorer, a fully automated system that uses the learning from commercial one-click root apps to detect malware carrying root exploits. In an offline phase, it conducts extensive static analysis to understand the precise environment requirements and attack profiles of the exploits. It then uses this information to construct proper analysis environments and detect attempted exploits.
- **Evaluation of RootExplorer:** We evaluate RootExplorer through extensive experiments and find that it can successfully detect all known malware containing root exploits, including recently discovered ones. RootExplorer results in no false positives with our test set. Using RootExplorer, we also found an app currently available on an Android market that contains root exploits.

## 2. Background & Related Work

### 2.1 Root Exploits and One-Click Root Apps

One-click root apps are popular among users and compete to root more phones and offer more reliable results. Companies develop these apps because they also develop security apps or app management tools that require root privileges. The competition among these apps has driven them to include the most comprehensive and advanced root exploits. For example, a popular commercial one-click root app contains 59 families of root exploits, including those against publicly unknown or zero-day vulnerabilities and those that can bypass advanced defense mechanisms like SELinux and Verified Boot.

Detecting Android root exploits faces unique challenges. Specific preconditions, such as environment constraints, must be satisfied for the exploits to be triggered. This is difficult due to the fragmented nature of Android hardware and software. Different phones have different devices and drivers, and even universal kernel vulnerabilities like the futex bug require tailored exploits. One commercial one-click root app contains 89 different exploit payloads for the same underlying futex bug. Therefore, malware with root exploits typically includes specific environment checks to determine the available vulnerabilities and how to launch the attack.

We categorize these preconditions into two types:
- **Environment Checks:** Gather information about the device type, model, and OS version.
- **Preparation Checks:** Verify that interactions with the underlying operating system are as expected, such as the existence of a vulnerable device file and the driver returning expected results in response to specific commands.

### 2.2 Android Malware Analysis

A significant portion of Android-related literature focuses on malware analysis and malicious behavior detection. Most of this work aims to detect behaviors like leaking/stealing private information and financial charging. No existing work specifically addresses root exploit detection. We categorize this work into three types: static analysis, dynamic analysis, and hybrid analysis.

- **Static Analysis:** Analyzes an Android app's bytecode and/or native code without running it. Tools like Pegasus, Apposcopy, and AppContext use various methods to detect sensitive operations and malicious behaviors. Static analysis is efficient but may struggle with heavily obfuscated apps.
- **Dynamic Analysis:** Analyzes an Android app by running it in an emulator or real device. Similar to static analysis, many dynamic malware detection tools have been developed. Dynamic analysis is effective but can be resource-intensive and may miss some behaviors.

RootExplorer combines the strengths of both static and dynamic analysis to effectively detect root exploits in Android malware.