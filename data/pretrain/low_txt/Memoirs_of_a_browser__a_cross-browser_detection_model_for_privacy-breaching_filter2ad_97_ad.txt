### Table 2. Classification of Legitimate Extensions
- **Normal Use**: Performance during regular browser operation.
- **Detection Time**: Performance when the detection infrastructure is attached to the browser.

All experiments were conducted multiple times, and the results were averaged, with negligible variance. The last two experiments measure the performance overhead perceived by the user during normal use and during detection, respectively. The detection infrastructure introduces an overhead ranging from 6.67× for Internet Explorer (IE) to 8.39× for Firefox. Compared to other solutions that rely on dynamic instrumentation [30], our memory profiler yields significantly lower overhead due to its ability to ignore memory regions of no interest a priori. When the infrastructure is detached, the performance variations are always negligible, confirming that our technique does not interfere with the normal browsing experience.

### 7. Discussion
Our evaluation reveals several key findings:
- Our model can be effectively used across different browser versions and implementations. We presented results for the most widespread versions of the three most popular browsers. Experiments with other major releases of Firefox and Chrome yielded similar results.
- While we did not encounter false negatives in our experiments, it is important to consider potential evasion techniques that malicious extensions might use to avoid detection. Two scenarios are possible:
  1. An extension could attempt to leak sensitive data using a browser functionality already represented as a training feature. However, this would inevitably result in more intensive memory activity, which would contribute to the correct classification of the extension.
  2. An extension could try to use a browser functionality that was not included as a training feature. In this case, the suspicious behavior would still be detected through the correlation between the injection vector and the Memory Page Count (MPC) distribution of the emerged feature. The only way to evade detection would be to lower the resulting correlation through disguise activities. While further research is needed to assess the viability of this strategy, prior approaches using Principal Component Correlation (PCC)-based detection have discussed the difficulty of such evasion techniques [28].
- An attacker could instruct an extension to perform privacy-breaching activities only under specific conditions, such as when the user visits a particular website. To address this, our solution allows users to initiate a detection run on all active extensions at any time, such as before entering sensitive data into a website.

### 8. Related Work
Several approaches have been proposed to detect privacy-breaching browser extensions, particularly spyware add-ons:
- **Whole-System Flow Tracking** [11] and **Library Call Monitoring** [18]: These methods are tailored to Internet Explorer (IE) and thus do not meet the requirement of a cross-browser detection model. They either depend on the observation window or fail to distinguish malicious add-ons from legitimate ones using the same library calls.
- **User-Defined Policies** [19]: This approach regulates the interactions of Browser Helper Objects (BHOs) with the browser but cannot be applied to extensions running in the same context as the browser.

Recent approaches focus on taint tracking JavaScript (JS) execution by instrumenting the JS engine [9, 33] or rewriting JS scripts [17]. These methods aim to prevent unsafe access to objects containing sensitive information. However, they incur high overheads and cannot be disabled without replacing the instrumented binary with the original version. Additionally, they fail to meet cross-browser requirements due to the complexity of modern JS engines.

Other studies have addressed the broader problem of ensuring the security of the entire browser, including extensions. For example, Djeric et al. [10] tackled the issue of detecting JavaScript escalating to the same privileges as a JS-based extension, potentially nullifying the browser's sandbox protection. Bandhakavi et al. [2] proposed a framework to detect and vet poorly programmed extensions. However, these approaches do not protect against intentionally malicious extensions that disclose private data.

The idea of correlating program activity with input has been introduced in [1, 28], focusing on monitoring applications. These methods, however, are limited to specific classes of privacy-breaching behaviors and can fail if the gathered data is not immediately leaked. The approach in [29] uses a fine-grained method to monitor individual memory accesses, overcoming the limitations of the observation window. However, these methods are not suitable for detecting privacy-breaching browser extensions due to their assumptions about background processes and limited event sensitivity.

### 9. Conclusions and Future Work
Browser extensions pose a significant security threat, especially those that intercept and log sensitive events. Existing solutions are often tailored to specific browser versions or require substantial efforts to support and maintain multiple browser implementations. Given the continuous changes in browsers, the need for cross-browser detection techniques is more critical than ever.

In this paper, we introduced a generic cross-browser detection model to address this concern. We demonstrated the application of the model to keylogging extensions and evaluated its effectiveness and precision against real-world extensions. Our detection infrastructure introduces minimal performance overhead, ensuring a smooth browsing experience for users.

For future work, we plan to validate our model against various classes of privacy-breaching extensions, with a focus on form-sniffing extensions due to their recent prevalence [6]. We also intend to investigate context-specific policies to automatically initiate detection runs in the background, increasing the dynamic coverage of our analysis to effectively address trigger-based behavior.

### References
[1] Y. Al-Hammadi and U. Aickelin. Detecting bots based on keylogging activities. Proceedings of the Third International Conference on Availability, Reliability and Security, pages 896–902, 2008.
[2] S. Bandhakavi, S. T. King, P. Madhusudan, and M. Winslett. Vex: Vetting browser extensions for security vulnerabilities. Proceedings of the 19th USENIX Security Symposium (SSYM ’10), pages 339–354, 2010.
[3] Bitdefender. Trojan.PWS.ChromeInject.B. http://www.bitdefender.com/VIRUS-1000451-en--Trojan.PWS.ChromeInject.B.html. Accessed: November 2011.
[4] C.-C. Chang and C.-J. Lin. Libsvm: A library for support vector machines. ACM Transactions on Intelligent Systems and Technology (TIST), 2:1–27, May 2011.
[5] O. Chapelle, V. Vapnik, O. Bousquet, and S. Mukherjee. Choosing multiple parameters for support vector machines. Machine Learning, 46:131–159, March 2002. ISSN 0885-6125.
[6] G. Cluley. Mozilla pulls password-sniffing Firefox add-on. http://nakedsecurity.sophos.com/2010/07/15/mozilla-pulls-passwordsniffing-firefox-addon/. Accessed: November 2011.
[7] CNET. Internet explorer add-ons. http://download.cnet.com/windows/internet-explorer-add-ons-plugins. Accessed: September 2011.
[8] C. Cortes and V. Vapnik. Support-vector networks. Machine Learning, 20:273–297, 1995.
[9] M. Dhawan and V. Ganapathy. Analyzing information flow in JavaScript-based browser extensions. Proceedings of the 2009 Annual Computer Security Applications Conference (ACSAC 2009), pages 382–391, 2009.
[10] V. Djeric and A. Goel. Securing script-based extensibility in web browsers. Proceedings of the 19th USENIX Security Symposium (SSYM ’10), pages 355–370, 2010.
[11] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spyware analysis. Proceedings of the 2007 USENIX Annual Technical Conference (ATC ’07), pages 1–14, 2007.
[12] Google. Google Chrome Releases. http://googlechromereleases.blogspot.com, November 2011. Accessed: November 2011.
[13] Google. Chromebook. http://www.google.com/chromebook/, . Accessed: November 2011.
[14] Google. Chrome Web Store. https://chrome.google.com/webstore, . Accessed: November 2011.
[15] Graydon. Cycle collector landed. http://blog.mozilla.com/graydon/2007/01/05/cycle-collector-landed/. Accessed: November 2011.
[16] J. Han, J. Kwon, and H. Lee. Honeyid: Unveiling hidden spywares by generating bogus events. Proceedings of The IFIP TC11 23rd International Information Security Conference, pages 669–673, 2008.
[17] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An empirical study of privacy-violating information flows in JavaScript web applications. Proceedings of the 17th ACM conference on Computer and communications security (CCS 2010), pages 270–283, 2010.
[18] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. Kemmerer. Behavior-based spyware detection. Proceedings of the 15th USENIX Security Symposium (SSYM ’06), pages 273–288, 2006.
[19] Z. Li, X. Wang, and J. Y. Choi. Spyshield: Preserving privacy from spy add-ons. Proceedings of the 10th International Symposium on Recent Advances in Intrusion Detection (RAID 2007), pages 296–316, 2007.
[20] A. Lieuallen. Greasemonkey. https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/. Accessed: November 2011.
[21] Y. Mankani. 12 Most Popular Google Chrome Extensions Of 2011. http://www.techzil.com/12-most-popular-google-chrome-extensions-of-2011. Accessed: September 2011.
[22] D. Meyer, F. Leisch, and K. Hornik. The support vector machine under test. Neurocomputing, 55(1-2):169–186, 2003.
[23] Microsoft. Microsoft Security Bulletin Search. http://www.microsoft.com/technet/security/current.aspx. Accessed: November 2011.
[24] Mozilla. Blocked Add-ons. https://addons.mozilla.org/en-US/firefox/blocked/. Accessed: November 2011.
[25] Mozilla. Add-ons for Firefox. https://addons.mozilla.org/en-US/firefox/. Accessed: November 2011.
[26] Mozilla. Firefox Releases. http://www.mozilla.com/en-US/firefox/releases/. Accessed: November 2011.
[27] Nick Freeman. Feed sidebar Firefox extension - privileged code injection. http://lwn.net/Articles/348921/. Accessed: December 2011.
[28] S. Ortolani, C. Giuffrida, and B. Crispo. Bait your hook: a novel detection technique for keyloggers. Proceedings of the 13th International Symposium on Recent Advances in Intrusion Detection (RAID 2010), pages 198–217, 2010.
[29] S. Ortolani, C. Giuffrida, and B. Crispo. KLIMAX: Profiling memory write patterns to detect keystroke-harvesting malware. Proceedings of the 14th International Symposium on Recent Advances in Intrusion Detection (RAID 2011), pages 81–100, 2011.
[30] D. Quist. Covert debugging circumventing software armoring techniques. Black Hat Briefings, 2007.
[31] G. Richards, S. Lebresne, B. Burg, and J. Vitek. An analysis of the dynamic behavior of JavaScript programs. Proceedings of the 2010 ACM SIGPLAN conference on Programming language design and implementation (PLDI ’10), pages 1–12, 2010.
[32] S. Ross. Peirce’s criterion for the elimination of suspect experimental data. Journal of Engineering Technology, 20, 2003.
[33] M. Ter Louw, J. Lim, and V. Venkatakrishnan. Enhancing web browser security against malware extensions. Journal in Computer Virology, 4:179–195, 2008.
[34] TricksMachine. The Top 10 Mozilla Firefox Add-ons, June 2011. http://www.tricksmachine.com/2011/06/the-top-10-mozilla-firefox-add-ons-june-2011.html. Accessed: September 2011.
[35] Various Authors. Trixie. http://www.bhelpuri.net/Trixie/. Accessed: October 2011.
[36] W3Schools. Web Statistics and Trends. http://www.w3schools.com/browsers/browsers_stats.asp. Accessed: December 2011.
[37] C. Wuest and E. Florio. Firefox and malware: When browsers attack. Symantec Security Response, pages 1–15, 2009.