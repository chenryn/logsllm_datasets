### Foreword

When work on the sixth edition of this book began, I had already transitioned to Azure. By the time the seventh edition was in the works, my commitments no longer allowed me to contribute. Dave Solomon had retired, and the task of updating the book became even more challenging as Windows shifted from major releases every few years to a continuous release cycle under the name Windows 10, with frequent feature and functionality upgrades.

Pavel Yosifovitch stepped in to assist Alex with Part 1, but he too became busy with other projects and could not contribute to Part 2. Alex was also deeply involved with his startup, CrowdStrike, which left us uncertain about the completion of Part 2.

Fortunately, Andrea Allievi came to the rescue. Together with Alex, they updated a significant portion of the system in Part 2, including the startup and shutdown processes, the Registry subsystem, and the Universal Windows Platform (UWP). Not only did they refresh the content, but they also added three new chapters. The "Windows Internals" series has always been the most technically deep and accurate resource on the inner workings of Windows, one of the most important software releases in history. I am proud to have my name still listed on the byline.

A memorable moment in my career was when we asked David Cutler to write the foreword for "Inside Windows 2000." Dave Solomon and I had visited Microsoft several times to meet with the Windows engineers and had met David on a few of those trips. We were thrilled when he agreed. It is surreal to now be in a similar position, and I am honored to have the opportunity to provide this foreword. I hope my endorsement gives you the same confidence that David Cutler's did for buyers of "Inside Windows 2000."

Mark Russinovich
Microsoft
March 2021
Bellevue, Washington

---

### Introduction

**Windows Internals, Seventh Edition, Part 2** is designed for advanced computer professionals—developers, security researchers, and system administrators—who want to understand the internal workings of the core components of the Microsoft Windows 10 (up to and including the May 2021 Update, a.k.a. 21H1) and Windows Server (from Server 2016 up to Server 2022) operating systems. This knowledge includes many components shared with Windows 11X and the Xbox Operating System.

With this understanding, developers can better comprehend the rationale behind design decisions, enabling them to create more powerful, scalable, and secure software. They will also improve their skills in debugging complex problems rooted deep in the system. System administrators can leverage this information to troubleshoot system issues more effectively and triage critical issues from the mundane. Security researchers and forensic experts can learn about the data structures and mechanisms that can be misused, as well as the mitigations and security features offered by modern Windows systems.

Whoever the reader may be, after reading this book, they will have a better understanding of how Windows works and why it behaves the way it does.

#### History of the Book

This is the seventh edition of a book originally titled "Inside Windows NT" (Microsoft Press, 1992), written by Helen Custer before the initial release of Microsoft Windows NT 3.1. The second edition, "Inside Windows NT, Second Edition" (Microsoft Press, 1998), was authored by David Solomon and provided key insights into the architecture and design of the system, covering Windows NT 4.0.

"Inside Windows 2000, Third Edition" (Microsoft Press, 2000) was co-authored by David Solomon and Mark Russinovich. It introduced new topics such as startup and shutdown, kernel changes in Windows 2000, the Windows Driver Model (WDM), Plug and Play, power management, Windows Management Instrumentation (WMI), encryption, the job object, and Terminal Services.

"Windows Internals, Fourth Edition" (Microsoft Press, 2004) covered Windows XP and Windows Server 2003, adding more content focused on helping IT professionals use their knowledge of Windows internals, such as using tools from Windows SysInternals and analyzing crash dumps.

"Windows Internals, Fifth Edition" (Microsoft Press, 2009) was the update for Windows Vista and Windows Server 2008. Mark Russinovich moved to a full-time job at Microsoft (where he is now the Azure CTO), and Alex Ionescu joined as a new co-author. New content included the image loader, user-mode debugging facility, Advanced Local Procedure Call (ALPC), and Hyper-V.

The sixth edition, "Windows Internals, Sixth Edition" (Microsoft Press, 2012), was fully updated to address the many kernel changes in Windows 7 and Windows Server 2008 R2, with many new hands-on experiments.

#### Seventh Edition Changes

For the seventh edition (Microsoft Press, 2017), the authors decided to split the book into two parts, allowing for more rapid publication. At the time, the split was based on page counts, with the same overall chapters returning in the same order as prior editions.

The convergence story was complete with Windows 10, which runs on desktops, laptops, cell phones, servers, Xbox One, HoloLens, and various Internet of Things (IoT) devices. Working alongside Alex Ionescu, who had moved to a full-time job at CrowdStrike (where he is now the VP of endpoint engineering), Pavel Yosifovitch refactored the book’s chapters so that the two parts could be more meaningfully cohesive. This allowed Part 1 to stand on its own, introducing readers to the key concepts of Windows 10's system architecture, process management, thread scheduling, memory management, I/O handling, and security.

Part 1 covered aspects of Windows 10 up to and including Version 1703, the May 2017 Update, as well as Windows Server 2016. With Alex and Mark consumed by their full-time jobs, and Pavel moving on, Andrea Allievi stepped up to complete the series. Andrea brought his own vision to the series, adding exciting new content around Hyper-V, which is now a key part of the Windows platform strategy, both on Azure and client systems. He also fully rewrote chapters on the boot process, new storage technologies like ReFS and DAX, and expanded updates on system and management mechanisms, alongside the usual hands-on experiments, which have been fully updated to take advantage of new debugger technologies and tooling.

The long delay between Parts 1 and 2 made it possible to ensure the book was fully updated to cover the latest public build of Windows 10, Version 21H1 (May 2021 Update), including Windows Server 2019 and 2022, ensuring readers would not be "behind" after such a long gap. As Windows 11 builds upon the same operating system kernel, readers will be adequately prepared for this upcoming version as well.

#### Hands-On Experiments

Even without access to the Windows source code, you can learn much about Windows internals from the kernel debugger, tools from SysInternals, and other tools developed by the community. For each aspect of the internal behavior of Windows, the steps for trying the tool yourself are listed in special "EXPERIMENT" sections throughout the book. We encourage you to try them as you read, as seeing visible proof of how Windows works internally will make a more lasting impression than just reading about it.

#### Topics Not Covered

Windows is a large and complex operating system. This book focuses on the base system components and does not cover everything relevant to Windows internals. For example, it does not describe COM+, the Windows distributed object-oriented programming infrastructure, or the Microsoft .NET Framework, the foundation of managed code applications. Because this is an "internals" book, it does not cover user, programming, or system administration topics.

#### A Warning and a Caveat

This book describes undocumented behavior of the internal architecture and operation of the Windows operating system, such as internal kernel structures and functions. This content is subject to change between releases. While details described in this book may not necessarily change, you cannot rely on them remaining the same. Any software that uses these undocumented interfaces or insider knowledge about the operating system might not work on future releases of Windows. Even worse, software that runs in kernel mode (such as device drivers) and uses these undocumented interfaces might experience a system crash on newer releases of Windows, resulting in potential data loss for users.

In short, you should never use any internal Windows functionality, registry key, behavior, API, or other undocumented detail mentioned in this book during the development of any kind of software designed for end-user systems or for any purpose other than research and documentation. Always check with the Microsoft Software Developer Network (MSDN) for the latest and supported APIs and practices.

#### Assumptions About You

The book assumes the reader is comfortable working on Windows at a power-user level and has a basic understanding of operating system and hardware concepts, such as CPU registers, memory, processes, and threads. A basic understanding of functions, pointers, and other programming concepts is also assumed.

#### Organization of This Book

The book is divided into two parts (as was the sixth edition), the second of which you are holding in your hands.

- **Chapter 8, "System Mechanisms,"** provides information about the important internal mechanisms that the operating system uses to provide key services to device drivers and applications, such as ALPC, the Object Manager, and synchronization routines. It also includes details about the hardware architecture that Windows runs on, including trap processing, segmentation, and side-channel vulnerabilities, as well as the mitigations required to address them.
- **Chapter 9, "Virtualization Technologies,"** describes how the Windows OS uses the virtualization technologies exposed by modern processors to allow users to create and use multiple virtual machines on the same system. Virtualization is also extensively used by Windows to provide a new level of security. Thus, the Secure Kernel and Isolated User Mode are extensively discussed in this chapter.
- **Chapter 10, "Management, Diagnostics, and Tracing,"** details the fundamental mechanisms for configuration, diagnostics, and tracing. In particular, the Windows registry, Windows services, WMI, and Task Scheduling are introduced along with diagnostics services like Event Tracing for Windows (ETW) and DTrace.
- **Chapter 11, "File Systems and Storage,"** covers the file systems and storage technologies used by Windows, with particular detail on NTFS and ReFS.
- **Chapter 12, "Boot and Shutdown,"** explains what happens when the system starts and shuts down, and the operating system components brought on by UEFI, such as Secure Boot, Measured Boot, and Secure Launch.

#### Conventions

- **Boldface type** is used to indicate text that you type as well as interface items that you are instructed to click or buttons that you are instructed to press.
- **Italic type** is used to indicate new terms.
- **Code elements** appear in italics or in a monospaced font, depending on context.
- **Interface elements** are capitalized—for example, the Save As dialog box.
- **Keyboard shortcuts** are indicated by a plus sign (+) separating the key names. For example, Ctrl+Alt+Delete means that you press the Ctrl, Alt, and Delete keys at the same time.

#### About the Companion Content

We have included companion content to enrich your learning experience. You can download the companion content for this book from the following page:

[MicrosoftPressStore.com/WindowsInternals7ePart2/downloads](http://MicrosoftPressStore.com/WindowsInternals7ePart2/downloads)

#### Acknowledgments

The book contains complex technical details, as well as their reasoning, which are often hard to describe and understand from an outsider’s perspective. Throughout its history, the authors have relied on the vast swath of knowledge within Microsoft and the rich development history behind the Windows operating system. For this Seventh Edition, Part 2, the authors are grateful to Andrea Allievi for having joined as a main author and having helped spearhead most of the book and its updated content.

Apart from Andrea, this book wouldn’t contain the depth of technical detail or the level of accuracy it has without the review, input, and support of key members of the Windows development team, other experts at Microsoft, and other trusted colleagues, friends, and experts in their own domains.

It is worth noting that the newly written Chapter 9, "Virtualization Technologies," wouldn’t have been so complete and detailed without the help of Alexander Grest and Jon Lange, who are world-class subject experts and deserve special thanks, particularly for the days they spent helping Andrea understand the inner details of the most obscure features of the hypervisor and the Secure Kernel.

Alex would like to particularly thank Arun Kishan, Mehmet Iyigun, David Weston, and Andy Luhrs, who continue to be advocates for the book and Alex’s inside access to people and information to increase the accuracy and completeness of the book.

Furthermore, we want to thank the following people, who provided technical review and/or input to the book or were simply a source of support and help to the authors: Saar Amar, Craig Barkhouse, Michelle Bergeron, Joe Bialek, Kevin Broas, Omar Carey, Neal Christiansen, Chris Fernald, Stephen Finnigan, Elia Florio, James Forshaw, Andrew Harper, Ben Hillis, Howard Kapustein, Saruhan Karademir, Chris Kleynhans, John Lambert, Attilio Mainetti, Bill Messmer, Matt Miller, Jake Oshins, Simon Pope, Matthew Woolman, and Adam Zabrocki.

We continue to thank Ilfak Guilfanov of Hex-Rays (http://www.hex-rays.com) for the IDA Pro Advanced and Hex-Rays licenses granted to Alex Ionescu, including most recently a lifetime license, which is an invaluable tool for speeding up the reverse engineering of the Windows kernel. The Hex-Rays team continues to support Alex’s research and builds relevant new decompiler features in every release, which make writing a book such as this possible without source code access.

Finally, the authors would like to thank the great staff at Microsoft Press (Pearson) who have been behind turning this book into a reality. Loretta Yates, Charvi Arora, and their support staff all deserve a special mention for their unlimited patience from turning a contract signed in 2018 into an actual book two and a half years later.

#### Errata and Book Support

We’ve made every effort to ensure the accuracy of this book and its companion content. You can access updates to this book—in the form of a list of submitted errata and their related corrections at:

[MicrosoftPressStore.com/WindowsInternals7ePart2/errata](http://MicrosoftPressStore.com/WindowsInternals7ePart2/errata)

If you discover an error that is not already listed, please submit it to us at the same page.

For additional book support and information, please visit [http://www.MicrosoftPressStore.com/Support](http://www.MicrosoftPressStore.com/Support).

Please note that product support for Microsoft software and hardware is not offered through the previous addresses. For help with Microsoft software or hardware, go to [http://support.microsoft.com](http://support.microsoft.com).

#### Stay in Touch

Let’s keep the conversation going! We’re on Twitter: @MicrosoftPress.

---

### Chapter 8: System Mechanisms

The Windows operating system provides several base mechanisms that kernel-mode components such as the executive, the kernel, and device drivers use. This chapter explains the following system mechanisms and describes how they are used:

- **Processor Execution Model:** Including ring levels, segmentation, task states, trap dispatching, interrupts, deferred procedure calls (DPCs), asynchronous procedure calls (APCs), timers, system worker threads, exception dispatching, and system service dispatching.
- **Speculative Execution Barriers and Other Software-Side Channel Mitigations.**
- **The Executive Object Manager.**
- **Synchronization:** Including spinlocks, kernel dispatcher objects, wait dispatching, and user- and slim reader-writer (SRW) locks.
- **Advanced Local Procedure Call (ALPC) Subsystem.**
- **Windows on Windows 64-bit (WoW64).**
- **User-Mode Debugging Framework.**

Additionally, this chapter includes detailed information on the Universal Windows Platform (UWP) and the set of user-mode and kernel-mode services that power it, such as:

- **Packaged Applications and the AppX Deployment Service.**
- **Centennial Applications and the Windows Desktop Bridge.**
- **Process State Management (PSM) and the Process Lifetime Manager (PLM).**
- **Host Activity Moderator (HAM) and Background Activity Moderator (BAM).**

#### Processor Execution Model

This section takes a deep look at the internal mechanics of Intel i386–based processor architecture and its extension, the AMD64-based architecture used on modern systems. Although the two respective architectures have differences, they share many common features. We discuss concepts such as segmentation, tasks, and ring levels, which are critical mechanisms, and we also discuss the concept of traps, interrupts, and system calls.