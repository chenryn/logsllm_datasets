### 图14：并发请求在固定时间范围内的理论性能与实际性能对比
- **横轴**：并发用户数（250、500、750、1000）
- **纵轴**：并发用户数
- **黑色实线**：表示在固定时间范围内并发请求的理论性能。
- **红色圆圈**：表示使用NodeSentry的纯Node.js的实际性能。
- **蓝色方块**：表示纯Node.js的实际性能。

在最多200个客户端时，性能达到最优。在500到1000个客户端之间，性能略有下降，但降幅不超过50%。

### 文件系统在“st”膜中的实现
- **fs在‘st’膜内**：文件系统位于“st”膜内部。
- **fs在单独的膜中**：文件系统位于单独的膜中。

通过ConScript可以实现钩子功能，并且依赖于模型检查技术。Stefan等人[40]引入了COWL，这是一种基于新标签强制访问控制API的JavaScript隔离系统，开发者可以使用它来限制隔间和外部服务器之间的通信。

### 安全平台
Livshits[27]提供了一种运行时污点跟踪方法的分类，以防止Web应用程序漏洞，如跨站脚本攻击和SQL注入攻击。Wei等人[45]提出了一种新的架构，将Web服务分解为两个部分，在独立的保护域中执行。只有受信任的部分才能处理安全敏感数据。

Burket等人[7]开发了GuardRails，一种源代码到源代码的工具，用于构建安全的Ruby on Rails Web应用程序，通过注释将安全策略附加到数据模型本身。GuardRails生成一个修改后的应用程序，自动执行指定的安全策略。

Hosek等人[21]开发了一个基于Ruby的中间件，该中间件可以：
1. 将安全标签与数据关联；
2. 在多层Web架构中透明地跟踪标签，以防止有害数据泄露。

Nguyen-Tuong等人[32]提出了一种全自动的方法，通过精确的污点跟踪来加固PHP基础的Web应用程序，特别是只在来自不可信源的命令和输出部分检查危险内容。

### Web应用防火墙 (WAF)
Krueger等人[25]描述了一种基于异常检测器的技术，用良性数据替换HTTP请求中的可疑部分。

ModSecurity[1]是一种防火墙，通过模式匹配HTTP请求与现有规则库来检测恶意行为。Braun等人[6]提出了类似的基于代理的方法，实现了策略执行机制，以保证Web应用程序的控制流完整性。

### 图15：增加上界和下界策略对容量的影响
- **横轴**：并发用户数（0、250、500、750、1000）
- **纵轴**：并发用户数

图15展示了通过添加上界和下界策略来加强安全性不会影响容量，这通过比较“fs”在“st”膜内外的情况得到了验证。

### 脚本加载过程中的策略验证
在加载脚本之前，需要验证该脚本是否符合策略要求。只有在策略批准后，加载过程才会继续。ConScript[29]允许在浏览器中实施细粒度的安全策略。这种方法类似于自保护JavaScript[28, 35]，不同之处在于ConScript使用深度建议，从而保护所有函数的访问路径。使用深度建议的代价是需要客户端支持JavaScript引擎。WebJail[42]提供了集成者定义策略的可能性，以特定的非JavaScript方式限制第三方组件的行为。Agten等人[2]介绍了JSand，这是一个由服务器驱动的沙箱框架，用于在客户端浏览器中强制执行服务器指定的安全策略。Richards等人[37]介绍了一种安全基础设施，通过利用带撤销的概念的历史记录来处理小工具攻击者的威胁模型，从而在JavaScript程序的部分上指定访问控制策略。Fredrikson等人[2]开发了一种离线机制，用于分析JavaScript应用程序，识别策略违规的位置。

### 结论
在各种服务器端框架中，Node.js因其使用JavaScript、高效的云事件并行运行时以及数千个第三方库而成为最受欢迎的选择之一。然而，这些第三方库也是潜在的安全威胁来源。由于服务器以完全权限运行，一个库中的漏洞可能会危及整个服务器的安全。最近，“st”库被广泛使用的Web服务器库用来提供静态文件，就发生了这种情况。

为了应对第三方库最小权限集成的问题，我们开发了NodeSentry，一种新型的服务器端JavaScript安全架构，支持这种最小权限的库集成。我们展示了我们的执行基础设施如何支持从传统的Web强化技术到自定义安全策略的简单统一实现，包括库与其环境及其依赖库之间的交互。我们描述了NodeSentry实现的关键特性，该实现基于Miller和Van Cutsem的膜实现作为构建可信对象代理的基础。

为了展示NodeSentry的实际有效性，我们在一个实验中对其性能进行了评估。在这个实验中，服务器必须能够同时为越来越多的客户端提供文件，直到数千个客户端和数十万个文件请求。我们的评估表明，在最多250个客户端的情况下，NodeSentry具有与纯Node.js相同的服务器容量和吞吐量，基本上达到了理论上的最优值。在1000个并发客户端的情况下，当纯Node.js的容量已降至理论最优值的60%以上时，NodeSentry仍能保持50%的容量。

我们的完整原型实现（包括完整的源代码、测试套件、代码文档、安装/使用说明和“st”示例）可在https://distrinet.cs.kuleuven.be/software/NodeSentry/或通过npm install nodesentry直接安装获得。

### 致谢
感谢我们的指导者Joshua Schiﬀman和匿名审稿人提供的宝贵反馈。这项研究部分由KU Leuven研究基金、欧盟FP7项目NESSoS和WebSand、IWT-SBO项目SPION和意大利PRIN-MIUR-TENACE项目资助。此外，还得到了欧盟预防和打击犯罪计划的支持。本文仅反映作者的观点，资助者不对其中的信息使用负责。

### 参考文献
[1] Modsecurity – 开源Web应用防火墙。https://www.modsecurity.org/。
[2] P. Agten, S. Van Acker, Y. Brondsema, P. H. Phung, L. Desmet, and F. Piessens. JSand: Complete Client-Side Sandboxing of Third-Party JavaScript without Browser Modifications. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), pages 1–10, 2012.
...
[45] J. Wei, L. Singaravelu, and C. Pu. A Secure Information Flow Architecture for Web Service Platforms. IEEE Transactions on Services Computing, 1(2):75–87, 2008.