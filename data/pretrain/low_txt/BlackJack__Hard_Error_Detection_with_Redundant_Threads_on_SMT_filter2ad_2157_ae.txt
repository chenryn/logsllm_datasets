### 图5：具有尾随-尾随和前导-尾随干扰的指令周期百分比

### 图6：所有发出的指令来自同一上下文的指令周期百分比

授权使用仅限于：清华大学。下载时间：2021年3月20日，UTC时间05:37:04，来源于IEEE Xplore。适用限制条件。

37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07) 0-7695-2855-4/07 $20.00 © 2007

```
0
100
80
60
40
20
```

### 图7：SRT、BlackJack（无洗牌）和BlackJack的性能对比

这些减速代表了BlackJack在SRT基础上增加了15%的减速。BlackJack-NS与BlackJack之间的差异反映了由于safe-shuffle的贪心算法有时会为了高覆盖率而分割数据包而导致的性能下降。BlackJack-NS从不分割数据包（也不进行洗牌），因此它能够在一个周期内发出更多的指令（但覆盖率较低）。平均来看，添加洗牌功能后，BlackJack比BlackJack-NS慢5%。如果BlackJack有一个理想的洗牌算法，能够在不分割数据包的情况下提供良好的覆盖率，那么BlackJack将比SRT慢10%。更好的洗牌算法可能能够接近这个10%的减速。

BlackJack-NS与SRT之间剩余的差异是由于BlackJack的策略是每个周期只获取一个数据包。这种策略防止了多个尾随数据包的同时发出。这是一种简单的方法来减少尾随-尾随干扰（如图5所示），但代价是性能下降。尾随-尾随干扰通常对性能有利，因为它允许两个或多个需要多个周期才能在前导线程中发出的小数据包组合成一个大数据包，在一个周期内发出。要结合两个这样的数据包同时保持空间多样性，必须知道这些数据包是独立的。为了简化起见，BlackJack的洗牌算法和获取策略假设所有未在同一周期内共同发出的前导指令可能存在依赖关系。需要注意的是，关于数据包之间依赖关系的所有信息都可以从前导线程中借用。因此，更复杂的洗牌算法可以利用这些额外信息来缩小BlackJack与SRT之间的差距。

### 结论

本文介绍了BlackJack，一种解决测试难度日益增加问题的微架构。随着设备变得更小更快，容错能力在降低，设备可能在某些条件下表现正常而在其他条件下则不然。因此，硬错误可能存在，但只有在非常特定的机器状态和信号路径下才会被触发。此外，烧录过程中可能出现的新复杂情况可能导致潜在的硬错误未在制造过程中暴露出来，并在到达客户之前变得活跃。

BlackJack 提供了一个安全网，可以在运行时检测由程序暴露的硬错误（以及软错误）。平均来看，与SRT相比，BlackJack 的性能损失为15%。作为交换，BlackJack提供了97%的指令覆盖度来检测流水线中的硬错误，而SRT仅为34%。

### 参考文献

[1] T. M. Austin. Diva: a reliable substrate for deep submicron microarchitecture design. In MICRO 32: Proceedings of the 32nd annual ACM/IEEE international symposium on Microarchitecture, pages 196–207, 1999.

[2] D. C. Bossen, A. Kitamorn, K. F. Reick, and M. S. Floyd. Fault-tolerant design of the IBM pSeries 690 system using the POWER4 processor technology. IBM Journal of Research and Development, 46(1), 2002.

[3] F. A. Bower, D. J. Sorin, and S. Ozev. A mechanism for online diagnosis of hard faults in microprocessors. In MICRO 38: Proceedings of the 38th annual IEEE/ACM International Symposium on Microarchitecture, 2005.

[4] D. Burger, T. M. Austin, and S. Bennett. Evaluating future microprocessors: The simplescalar tool set. Technical Report CS-TR-1996-1308, University of Wisconsin, 1996.

[5] K. Constantinides, S. Plaza, J. Blome, B. Zhang, V. Bertacco, S. Mahlke, T. Austin, and M. Orshansky. Bulletproof: A defect-tolerant CMP switch architecture. In Proceedings of the 12th International Symposium on High-Performance Computer Architecture (HPCA-12), 2006.

[6] M. Gomaa, C. Scarbrough, T. N. Vijaykumar, and I. Pomeranz. Transient-fault recovery for chip multiprocessors. In ISCA '03: Proceedings of the 30th annual international symposium on Computer architecture, 2003.

[7] W. Maly, A. Gattiker, T. Zanon, T. Vogels, R. D. Blanton, and T. Storey. Deformations of IC structure in test and yield learning. In International Test Conference (ITC), 2002.

[8] M. Meterelliyoz, H. Mahmoodi, and K. Roy. A leakage control system for thermal stability during burn-in test. In International Test Conference (ITC), 2003.

[9] S. S. Mukherjee, M. Kontz, and S. K. Reinhardt. Detailed design and evaluation of redundant multithreading alternatives. In ISCA '02: Proceedings of the 29th annual international symposium on Computer architecture, 2002.

[10] S. K. Reinhardt and S. S. Mukherjee. Transient fault detection via simultaneous multithreading. In ISCA '00: Proceedings of the 27th annual international symposium on Computer architecture, pages 25–36. ACM Press, 2000.

[11] E. Schuchman and T. N. Vijaykumar. Rescue: A microarchitecture for testability and defect tolerance. In ISCA '05: Proceedings of the 32nd Annual International Symposium on Computer Architecture, 2005.

[12] F. F. Sellers, M. yue Hsiao, and L. W. Bearnson. Error Detecting Logic for Digital Computers. McGraw-Hill, 1968.

[13] O. Semenov, A. Vassighi, M. Sachdev, A. Keshavarzi, and C. F. Hawkins. Effect of CMOS technology scaling on thermal management during burn-in. IEEE Transactions on Semiconductor Manufacturing, 16(4), 2003.

[14] T. Sherwood, E. Perelman, G. Hamerly, and B. Calder. Automatically characterizing large scale program behavior. In Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems, Oct. 2002.

[15] K. Skadron, M. R. Stan, W. Huang, S. Velusamy, K. Sankaranarayanan, and D. Tarjan. Temperature-aware microarchitecture. In Proceedings of the 30th Annual International Symposium on Computer Architecture, 2003.

[16] J. Srinivasan, S. V. Adve, P. Bose, and J. A. Rivers. Exploiting structural duplication for lifetime reliability enhancement. In ISCA '05: Proceedings of the 32nd Annual International Symposium on Computer Architecture, 2005.

[17] T. N. Vijaykumar, I. Pomeranz, and K. Cheng. Transient-fault recovery using simultaneous multithreading. In Proceedings of the 29th annual international symposium on Computer architecture, pages 87–98, 2002.

[18] E. Weglarz, K. Saluja, and T. M. Mak. Testing of hard faults in simultaneous multi-threaded processors. In Proceeding of the 10th IEEE International On-Line Testing Symposium, pages 520–531, 2005.