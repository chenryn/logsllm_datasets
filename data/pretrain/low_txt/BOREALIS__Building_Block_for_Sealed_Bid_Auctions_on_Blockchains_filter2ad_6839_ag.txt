### References

1. **Bentov, I., & Kumaresan, R. (2014).** How to use Bitcoin to design fair protocols. *In International Cryptology Conference*, pages 421–439.

2. **Bentov, I., Kumaresan, R., & Miller, A. (2017).** Instantaneous decentralized poker. *In International Conference on the Theory and Application of Cryptology and Information Security*, pages 410–440. Springer.

3. **Bitinfocharts (2019).** Bitcoin (BTC) price stats and information. Retrieved from: https://bitinfocharts.com/bitcoin/.

4. **Blass, E.-O., & Kerschbaum, F. (2018).** Strain: A secure auction for blockchains. *In European Symposium on Research in Computer Security*, pages 87–110.

5. **Bogetoft, P., Christensen, D.L., Damgård, I., Geisler, M., Jakobsen, T., Krøigaard, M., Nielsen, J.D., Nielsen, J.B., Nielsen, K., Pagter, J., et al. (2009).** Secure multiparty computation goes live. *In International Conference on Financial Cryptography and Data Security*, pages 325–343. Springer.

6. **Bonchi, F., Castillo, C., Gionis, A., & Jaimes, A. (2011).** Social network analysis and mining for business applications. *ACM Transactions on Intelligent Systems and Technology (TIST)*, 2(3):22.

7. **BOREALIS (2019).** Source code. Retrieved from: https://github.com/e-o-blass/BOREALIS-src.

8. **Brandt, F. (2003).** Fully Private Auctions in a Constant Number of Rounds. *In Proceedings of the 7th International Conference on Financial Cryptography, FC 2003*, pages 223–238.

9. **Brandt, F. (2010).** Auctions. In B. Rosenberg (Ed.), *Handbook of Financial Cryptography and Security*, pages 49–58. Chapman and Hall/CRC.

10. **Cachin, C. (1999).** Efficient Private Bidding and Auctions with an Oblivious Third Party. *In Conference on Computer and Communications Security, Singapore*, pages 120–127.

11. **Catrina, O., & De Hoogh, S. (2010).** Improved primitives for secure multiparty integer computation. *In International Conference on Security and Cryptography for Networks*, pages 182–199. Springer.

12. **Chang, C., & Melhem, R.G. (1997).** Arbitrary Size Benes Networks. *Parallel Processing Letters*, 7(3):279–284.

13. **Choudhuri, A.R., Green, M., Jain, A., Kaptchuk, G., & Miers, I. (2017).** Fairness in an unfair world: Fair multiparty computation from public bulletin boards. *In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security*, pages 719–728.

14. **Damgård, I., Geisler, M., & Krøigaard, M. (2007).** Efficient and secure comparison for online auctions. *In Information Security and Privacy, 12th Australasian Conference, ACISP 2007, Townsville, Australia, July 2-4, 2007, Proceedings*, pages 416–430.

15. **Damgård, I., Geisler, M., & Krøigaard, M. (2009).** A correction to 'efficient and secure comparison for online auctions'. *IJACT*, 1(4):323–324.

16. **Damgård, I., Fitzi, M., Kiltz, E., Nielsen, J.B., & Toft, T. (2006).** Unconditionally secure constant-rounds multi-party computation for equality, comparison, bits, and exponentiation. *In Theory of Cryptography Conference*, pages 285–304. Springer.

17. **Damgård, I., Pastro, V., Smart, N.P., & Zakarias, S. (2012).** Multiparty computation from somewhat homomorphic encryption. *In Advances in Cryptology–CRYPTO 2012*, pages 643–662.

18. **Dreier, J., Dumas, J.-G., & Lafourcade, P. (2015).** Brandt’s fully private auction protocol revisited. *Journal of Computer Security*, 23(5):587–610.

19. **Emekçi, F., Sahin, O.D., Agrawal, D., & El Abbadi, A. (2007).** Privacy preserving decision tree learning over multiple parties. *Data & Knowledge Engineering*, 63(2):348–361.

20. **Etherscan (2019).** Ethereum Average BlockTime Chart. Retrieved from: https://etherscan.io/chart/blocktime.

21. **Fischlin, M. (2001).** A cost-effective pay-per-multiplication comparison method for millionaires. *In Cryptographers’ Track at RSA Conference*, pages 457–471.

22. **Garay, J., Schoenmakers, B., & Villegas, J. (2007).** Practical and secure solutions for integer comparison. *In International Workshop on Public Key Cryptography*, pages 330–342.

23. **Garay, J., Kiayias, A., & Leonardos, N. (2015).** The Bitcoin Backbone Protocol: Analysis and Applications. *In Advances in Cryptology - EUROCRYPT 2015*, pages 281–310.

24. **Gennaro, R., Jarecki, S., Krawczyk, H., & Rabin, T. (2007).** Secure Distributed Key Generation for Discrete-Log Based Cryptosystems. *Journal of Cryptology*, 20(1):51–83.

25. **Goldreich, O., Micali, S., & Wigderson, A. (1987).** How to play any mental game. *In Proceedings of the nineteenth annual ACM symposium on Theory of computing*, pages 218–229.

26. **Groth, J., & Sahai, A. (2008).** Efficient Non-interactive Proof Systems for Bilinear Groups. *In Advances in Cryptology - EUROCRYPT 2008, 27th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Istanbul, Turkey, April 13-17, 2008. Proceedings*, pages 415–432. The full version of the paper is available at http://eprint.iacr.org/2007/155.

27. **Kolesnikov, V., Sadeghi, A.-R., & Schneider, T. (2009).** Improved garbled circuit building blocks and applications to auctions and computing minima. *In International Conference on Cryptology and Network Security*, pages 1–20. Springer.

28. **Kosba, A., Miller, A., Shi, E., Wen, Z., & Papamanthou, C. (2016).** Hawk: The blockchain model of cryptography and privacy-preserving smart contracts. *In 2016 IEEE symposium on security and privacy (SP)*, pages 839–858.

29. **Kumaresan, R., & Bentov, I. (2014).** How to use Bitcoin to incentivize correct computations. *In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*, pages 30–41.

30. **Kumaresan, R., Vaikuntanathan, V., & Vasudevan, P.N. (2016).** Improvements to secure computation with penalties. *In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*, pages 406–417.

31. **Lindell, Y. (2005).** Secure multiparty computation for privacy preserving data mining. *In Encyclopedia of Data Warehousing and Mining*, pages 1005–1009.

32. **Lindell, Y. (2016).** How To Simulate It – A Tutorial on the Simulation Proof Technique. *Cryptology ePrint Archive, Report 2016/046*. Retrieved from: http://eprint.iacr.org/2016/046.

33. **Lindell, Y., Pinkas, B., Smart, N.P., & Yanai, A. (2015).** Efficient constant round multi-party computation combining BMR and SPDZ. *In Annual Cryptology Conference*, pages 319–338.

34. **Lindell, Y., Smart, N.P., & Soria-Vazquez, E. (2016).** More Efficient Constant-Round Multi-party Computation from BMR and SHE. *In Theory of Cryptography*, pages 554–581.

35. **Lipmaa, H., Asokan, N., & Niemi, V. (2002).** Secure Vickrey auctions without threshold trust. *In International Conference on Financial Cryptography*, pages 87–101. Springer.

36. **MIRACL (2018).** Cryptographic SDK. Retrieved from: https://github.com/miracl/MIRACL.

37. **Naor, M., Pinkas, B., & Sumner, R. (1999).** Privacy preserving auctions and mechanism design. *In ACM Conference on Electronic Commerce*, pages 129–139.

38. **Nishide, T., & Ohta, K. (2007).** Multiparty computation for interval, equality, and comparison without bit-decomposition protocol. *In International Workshop on Public Key Cryptography*, pages 343–360.

39. **Reuters (2017).** Ukrainian ministry carries out first blockchain transactions. Retrieved from: https://www.reuters.com/article/us-ukraine-actions-blockchain/ukrainian-ministry-carries-out-first-blockchain-transactions-idUSKCN1BH2ME.

40. **Schoenmakers, B. (1999).** A Simple Publicly Verifiable Secret Sharing Scheme and Its Application to Electronic. *In Advances in Cryptology - CRYPTO ’99, 19th Annual International Cryptology Conference, Santa Barbara, California, USA, August 15-19, 1999, Proceedings*, pages 148–164.

41. **Suzuki, K., & Yokoo, M. (2003).** Secure generalized Vickrey auction using homomorphic encryption. *In International Conference on Financial Cryptography*, pages 239–249. Springer.

42. **Vaidya, J., & Clifton, C. (2005).** Privacy-preserving top-k queries. *In International Conference on Data Engineering*, pages 545–546.

43. **Vukolic, M. (2015).** The Quest for Scalable Blockchain Fabric: Proof-of-Work vs. BFT Replication. *In Open Problems in Network Security*, pages 112–125.

44. **Zyskind, G., Nathan, O., & Pentland, A. (2015).** Enigma: Decentralized computation platform with guaranteed privacy. *arXiv preprint arXiv:1506.03471*.

### A. Verifiable Secret Sharing

We briefly summarize our variation of Schoenmakers [50]'s scheme for verifiable secret sharing. Let \( P_i \) be the dealer, the party which wants to verifiably share a fresh, randomly generated private key \( sk_{i} \in \mathbb{Z}_p \). The core modification to Schoenmakers's scheme is that each party \( P_j \) receives an Elgamal encrypted version of their share in addition to commitments as follows.

#### Distribution:
- Let \( P_1 \) be the generator of our group \( G_1 \) in which the Decisional Diffie-Hellman (DDH) assumption holds.
- \( P_1 \) randomly selects \( sk_i \leftarrow \mathbb{Z}_p \) as the (session) private key and computes the public key \( pk_i = sk_i \cdot P_1 \).
- Moreover, \( P_i \) computes a degree \( n/2 - 1 \) polynomial \( f(x) = \sum_{j=0}^{n/2 - 1} \alpha_j \cdot x^j \) with \( \alpha_0 = sk_i \) and all other coefficients \( \alpha_j \) random from \( \mathbb{Z}_p \).
- For each coefficient \( \alpha_u \), \( P_i \) publishes a commitment \( C_u = \alpha_u \cdot P_1 \) for \( 0 \leq u \leq n/2 - 1 \).
- \( P_i \) also publishes a zero-knowledge proof \( \text{ProofECDLP} \) that \( sk_i \) is indeed the discrete logarithm of \( pk_i \).
- For each party \( P_j \), \( P_i \) selects another random \( r_j \leftarrow \mathbb{Z}_p \) and publishes the Elgamal encryption \( Y_j = \text{Enc}_{pk_{lt}}(f(j)) = (r_j \cdot P_1, r_j \cdot pk_{lt} + f(j)) \) on the blockchain.
- Then, \( P_i \) publishes on the blockchain: \( pk_i \), commitments to all of \( f \)'s coefficients, and the zero-knowledge proof \( \text{ProofECDLP} \).

#### Verification:
- Each party \( P_j \) computes \( \sum_{u=0}^{n/2 - 1} j^u \cdot C_u \) and checks whether this equals \( f(j) \cdot P_1 \).
- To verify its share, each party \( P_j \) decrypts \( Y_j \) and gets \( f(j) \).
- If the check fails, \( P_j \) publishes \( f(j) \) and \( sk_{lt} \) on the blockchain together with a zero-knowledge proof \( \text{ProofECDLP} \) to prove correct multiplication and decryption.
- If this proof is correct, \( P_j \) ignores \( P_i \) for the rest of the protocol. If \( P_j \)'s proof of correct decryption is wrong, all parties exclude \( P_j \) (and they could try recovering \( sk_j \)).
- If \( P_i \)'s initial \( \text{ProofECDLP} \) is wrong, \( P_i \) is excluded, too.

#### Reconstruction:
- In case a party \( P_i \)'s key has to be recovered, all other parties \( P_j \) publish their share \( f(j) \) together with \( sk_{lt} \) and a zero-knowledge proof \( \text{ProofECDLP} \) to prove correct decryption.
- Honest parties use the correct \( f(j) \) values to interpolate \( f \) and finally compute \( P_i \)'s secret key \( sk_i = f(0) \).
- As we assume an honest majority of at least \( n/2 \) honest parties, they will be able to interpolate the degree \( n/2 - 1 \) polynomial \( f \).

### Table 1: Resources per Party

| Proof Type              | Time (ms) | Size (Byte) | Number of Invocations per Party |
|-------------------------|-----------|-------------|---------------------------------|
| Proof Bit               | 5.90      | 489         | \( O(n \cdot (\ell \cdot \log \ell + \log n)) \) |
| Proof ECDLP             | 1.78      | 163         | \( O(1) \)                      |
| Proof Enc               | 3.92      | 326         | \( O(\ell) \)                   |
| Proof DGK per bit       | 8.24      | 914         | \( O(n \cdot \ell^2) \)         |
| Proof Blind per bit     | 11.0      | 786         | \( O(n \cdot \ell) \)           |
| Proof Shuffle per two   | 29.4      | 1308        | \( O(n \cdot \ell \cdot (\log \ell + \log n)) \) |
| ciphertexts             |           |             |                                 |
| Proof Decrypt           | 1.78      | 196         | \( O(\ell) \)                   |

- **ProofVSS** is a **ProofECDLP**.
- Following our notation in Algorithm 2, VSS outputs \( sk_i \), encryptions \( Y_j \), and commitments \( C_u \).
- Our modification to [50] allows sharing an element of \( \mathbb{Z}_p \) instead of \( G_1 \). However, our scheme loses the property of public verifiability. That is, one party cannot automatically verify whether the dealer’s output to another party is valid or not. In our specific scenario, this is acceptable.

### Figure 1: Maximum Round Computation Time

![Maximum Round Computation Time](https://example.com/figure1.png)

- The figure shows the maximum computation time for different values of \( n \) and \( \ell \).