### Vulnerability and Mitigation: Link Key Exposure via HCI

One significant vulnerability is that the link key is transferred in plaintext over the Host Controller Interface (HCI). This poses a security risk because HCI data can be easily leaked through HCI dump logs or hardware interfaces, such as USB, which are accessible to typical users.

#### Mitigation Strategies

**1. Filtering Out Link Keys from HCI Dump Logs:**
   - **Implementation:** The HCI dump module can be configured to monitor HCI headers. If a message related to link keys is detected, the module will log only the HCI header, excluding the payload.
   - **Example:** In Figure 3, the HCI packet for the "HCI Link Key Request Reply" command in RADIX is `01 0b 04 16 96 55 46 6d ...`. Here, the first byte (`0x01`) indicates an HCI command, and the next three bytes (`0x0b0416`) form the HCI header, consisting of the operation code (`0x0b04`) and the payload length (`0x016 = 22 bytes`). When the HCI dump encounters a packet starting with `0x010b0416`, it can omit the payload by logging only the first four bytes of the header or replace the link key with a random value.

**2. Encrypting HCI Payloads:**
   - **Rationale:** An attacker might extract HCI data from the UART physical line or by sniffing USB data, bypassing the first mitigation. Encrypting the payload ensures that even if the data is intercepted, the link keys remain secure.
   - **Challenges:** Implementing this solution may require significant updates to current specifications, including the addition of encryption and key exchange functionalities between the host and the controller.

### Page Blocking Attack

According to the Generic Access Profile (GAP), device A should initiate pairing and LMP authentication if subsequent services request security mechanisms like authentication, authorization, and encryption. However, these mechanisms can be skipped if not required. For instance, A can connect to the SDP service on M without LMP authentication because SDP does not enforce security mechanisms. This unpredictability in session establishment allows either the connection initiator (A) or the responder (M) to become the pairing initiator mid-session.

**Exploitation:**
- **Attack Vector:** The page blocking attack leverages this flexibility, allowing A to initiate a connection and M to initiate pairing. From the user's perspective, normal pairing and pairing under a page blocking attack are indistinguishable, as they appear the same on the user interface.
- **Detection and Mitigation:** Simply checking the roles of the pairing and connection initiators is insufficient. An effective strategy is to check if the IO capability of the connection initiator is `NoInputNoOutput`. If so, the victim should drop the pairing or re-initiate it in a safer mode.

### Related Work

**KNOB Attack:**
- **Description:** Antonioli et al. [8] introduced the KNOB attack, which forces victims to agree on a key with minimal entropy. The attack requires reversing the firmware of a Bluetooth chipset and installing custom operations in the controller.
- **BIAS Attack:** Antonioli et al. [7] also presented the BIAS attack, exploiting one-way authentication vulnerabilities in Secure Simple Pairing and performing downgrade attacks on the secure authentication procedure for Secure Connections. Both attacks require modifying the controller, making them less practical for general users.

**BlueBorne:**
- **Description:** Seri et al. [5] introduced BlueBorne, a set of security vulnerabilities in Bluetooth implementations across various operating systems. These vulnerabilities allow attackers to create unauthenticated BR/EDR connections and install malicious code on victim devices.
- **Comparison:** Our link key extraction attack operates silently but requires manual access to the paired device, unlike BlueBorne, which only needs Bluetooth activation on the victim device.

**MITM Attacks:**
- **Sun et al. [6]:** Introduced a vulnerability allowing MITM attacks against the passkey entry SSP association mode.
- **Sharmila et al. [24], Hypponen et al. [2], Haataja et al. [1]:** Presented MITM attacks that downgrade SSP to Just Works association mode.
- **Melamed et al. [28]:** Introduced an MITM attack on Bluetooth connections between a mobile app and a Bluetooth peripheral device.
- **Zhang et al. [29]:** Demonstrated the possibility of MITM attacks due to the lack of detailed programming guidelines for Secure Connections Only (SCO) mode.

### Conclusion

In this paper, we present two novel attacks on Bluetooth BR/EDR authentication: link key extraction and page blocking. The link key extraction attack exploits the logging of link keys in plaintext, allowing easy extraction and subsequent eavesdropping. The page blocking attack manipulates the victim's connection to force pairing with the attacker's device, exploiting the laxity in the specification. Since our attacks are standard-compliant and do not require firmware modifications, they pose real threats to Bluetooth security.

### Acknowledgment

This work was supported by IITP grants funded by the MSIT, Korea (No.2019-0-00533, IITP-2022-2020-0-01819, IITP-2021-0-01810) and the Basic Science Research Program through the National Research Foundation funded by the Ministry of Education, Korea (NRF-2021R1A6A1A13044830).

### References

[1] K. Haataja and P. Toivanen, “Two Practical Man-in-the-Middle Attacks on Bluetooth Secure Simple Pairing and Countermeasures,” IEEE Transactions on Wireless Communications, vol. 9, no. 1, pp. 384–392, 2010.
[2] K. Hypponen and K. M. Haataja, ““Nino” Man-in-the-Middle Attack on Bluetooth Secure Simple Pairing,” in Proceedings of the IEEE/IFIP International Conference in Central Asia on Internet, 2007, pp. 1–5.
[3] T. R. Mutchukota, S. K. Panigrahy, and S. K. Jena, “Man-in-the-Middle Attack and its Countermeasure in Bluetooth Secure Simple Pairing,” in Proceedings of the International Conference on Information Processing, 2011, pp. 367–376.
[4] K. Saravanan, L. Vijayanand, and R. Negesh, “A Novel Bluetooth Man-in-the-Middle Attack based on SSP using OOB Association Model,” arXiv preprint arXiv:1203.4649, 2012.
[5] B. Seri and G. Vishnepolsky, “BlueBorne™, The Dangers of Bluetooth Implementations: Unveiling Zero Day Vulnerabilities and Security Flaws in Modern Bluetooth Stacks,” ARMIS, 2017, https://www.armis.com/blueborne/, Accessed: 2021-10-12.
[6] D.-Z. Sun, Y. Mu, and W. Susilo, “Man-in-the-Middle Attacks on Secure Simple Pairing in Bluetooth Standard V5.0 and its Countermeasure,” Personal and Ubiquitous Computing, pp. 55–67, 2018.
[7] D. Antonioli, N. O. Tippenhauer, and K. Rasmussen, “BIAS: Bluetooth Impersonation Attacks,” in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2020, pp. 549–562.
[8] D. Antonioli, N. O. Tippenhauer, and K. B. Rasmussen, “The KNOB is Broken: Exploiting Low Entropy in the Encryption Key Negotiation Of Bluetooth BR/EDR,” in Proceedings of the USENIX Security Symposium (USENIX SEC), 2019, pp. 1047–1061.
[9] G. Wassermann, “Bluetooth Implementations may not Sufficiently Validate Elliptic Curve Parameters during Diffie-Hellman key Exchange,” https://www.kb.cert.org/vuls/id/304725/, Accessed: 2021-10-12.
[10] E. Biham and L. Neumann, “Breaking the Bluetooth Pairing-Fixed Coordinate Invalid Curve Attack,” 2018, http://www.cs.technion.ac.il/~biham/BT/bt-fixed-coordinate-invalid-curve-attack.pdf, Accessed: 2021-10-12.
[11] BlueZ, “Linux Open Source for the Bluetooth Host Stack,” http://www.bluez.org/about/, Accessed: 2021-10-12.
[12] AOSP, “Bluetooth Host Stack in Android Open Source Project,” https://source.android.com/devices/bluetooth, Accessed: 2021-10-12.
[13] B. SIG, “Bluetooth Core Specification v5.3,” https://www.bluetooth.com/specifications/specs/core-specification/, Accessed: 2021-10-12.
[14] D. Hulton, “btpincrack,” 2006, http://openciphers.sourceforge.net/oc/btpincrack.php, Accessed: 2021-10-12.
[15] Y. Shaked and A. Wool, “Cracking the Bluetooth PIN,” in Proceedings of the International Conference on Mobile Systems, Applications, and Services (MobiSys), 2005, pp. 39–50.
[16] H. Software, “Free USB Analyzer,” https://freeusbanalyzer.com/, Accessed: 2021-10-12.
[17] M. Cominelli, F. Gringoli, P. Patras, M. Lind, and G. Noubir, “Even black cats cannot stay hidden in the dark: Full-band de-anonymization of Bluetooth classic devices,” pp. 534–548, 2020, 2020 IEEE Symposium on Security and Privacy (SP).
[18] AOSP, “Android Bluetooth Verifying and Debugging,” https://source.android.com/devices/bluetooth/verifying\ debugging, Accessed: 2021-10-12.
[19] BlueZ, “HCI Data Dumper in the BlueZ Project,” http://www.bluez.org/?s=hcidump, Accessed: 2021-10-12.
[20] N. W. Group, “Snoop Version 2 Packet Capture File Format,” https://datatracker.ietf.org/doc/html/rfc1761, Accessed: 2021-10-12.
[21] A. developers, “Configure On-Device Developer Options,” https://developer.android.com/studio/debug/dev-options, Accessed: 2021-10-12.
[22] ——, “Capture and Read Android Bug Reports,” https://developer.android.com/studio/debug/bug-report, Accessed: 2021-10-12.
[23] Frontline, “ComProbe USB 2.0 Protocol Analyzer - FTS4USB™,” https://fte.com/products/FTS4USB-HCI.aspx, Accessed: 2021-10-12.
[24] D. Sharmila, R. Neelaveni, and K. Kiruba, “Notice of Violation of IEEE Publication Principles: Bluetooth Man-In-The-Middle Attack based on Secure Simple Pairing using Out Of Band Association Model,” in Proceedings of the IEEE International Conference on Control, Automation, Communication and Energy Conservation, 2009, pp. 1–6.
[25] AOSP, “Android Codenames, Tags, and Build Numbers,” https://source.android.com/setup/start/build-numbers, Accessed: 2021-10-12.