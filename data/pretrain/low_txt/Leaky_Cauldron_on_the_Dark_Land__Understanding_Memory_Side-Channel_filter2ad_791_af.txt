### 6.3 Lessons Learned

Our analysis of SGX memory side channels has uncovered new attack surfaces and adversary capabilities. Below, we outline several key insights for mitigating such risks on the SGX platform and more broadly for emerging Trusted Execution Environments (TEEs).

#### SGX Application Development
Our research demonstrates that adversaries can achieve fine-grained monitoring of an enclave process through various channels, including page and cache access patterns, inter-page timing, cross-enclave DRAM, and HyperThreading. It is crucial for SGX developers to understand these new attack vectors, as they are essential for building secure enclave applications. For instance, simply avoiding page-level access patterns is no longer sufficient, as intra- or inter-page timings can also disclose sensitive information.

#### Software-Level Protection
Defending against SGX side-channel leaks requires rethinking current assumptions. Specifically, these attacks do not necessarily cause an anomalously high Asynchronous Exit (AEX) rate. Blending sensitive information into the same memory pages is ineffective against attacks with finer spatial granularity. Adversaries may also combine multiple channels to conduct more powerful attacks. Therefore, new defense strategies must be developed to address these sophisticated attack vectors.

#### Hardware Enhancements
Many known memory side channels can be mitigated through hardware changes, such as partitioning caches/DRAM and keeping enclave page tables inside the Enclave Page Cache (EPC). In some cases, these changes may be the best option. Further research is needed to better understand the issue and the impact of related side channels, which will help in making a case for Intel and other TEE manufacturers to provide hardware-level support.

#### Broader Perspective
Over the years, many side-channel studies have followed a similar pattern: a clever attack is discovered, and researchers immediately work on defending against it. However, most defense proposals fail to consider the broader context behind the demonstrated attacks, leaving them unable to effectively protect against adversaries who can quickly adjust their strategies. The ongoing research on SGX often falls into the same trap. We hope our study can serve as a starting point for rethinking SGX security, inspiring future efforts to better understand the fundamental limitations of this TEE and how to use it effectively and securely.

### 7 Related Work

#### Paging-Based Side Channels
Previous studies have shown that page-level memory access patterns can leak secrets of enclave programs under various scenarios [39, 43]. This type of leakage is enabled by enforcing page faults during the enclave's execution, by marking selected memory pages as non-present or non-executable. As a result, data accesses or code execution in these pages are trapped into the OS kernel, allowing a malicious OS to learn which pages are accessed by the enclave program. Page-fault side-channel attacks are one vector of the memory side-channel attack surface we explore in this paper.

Concurrently and independently, Van et al. also proposed paging-based attacks on SGX. They reported two attacks: one exploits the updates of accessed flags (Vector 4) and dirty flags (Vector 5) of the referenced Page Table Entries (PTEs), and the other is a Flush+Flush or Flush+Reload side-channel attack on the referenced PTEs (Vector 3).

Although similar to our approach in terms of utilizing accessed flags to avoid page faults, the proposed attack was not designed to be truly stealthy, minimizing interrupts produced when executed. In fact, it can introduce even more AEXs, as demonstrated by their evaluation, rendering the attack less effective in the presence of existing protections such as T-SGX [38] and DÉJÀ VU [15]. By comparison, our research reveals multiple avenues to reduce interrupt frequencies, showing that a paging attack can be made stealthy when used in conjunction with timings or TLB flushing through HyperThreading, thereby thwarting all existing defenses. Additionally, our study highlights other side-channel vectors in SGX memory management, providing evidence for the credible threats they pose (e.g., Cache-DRAM attacks).

#### Branch Prediction Side Channels
A recent study explored branch prediction units as side channels to infer sensitive control flows inside SGX enclaves [28]. The memory side-channel attack surface does not include attack vectors through branch prediction. Both are important for understanding the side-channel security of SGX.

#### Cache Side Channels
Cache side-channel attacks under the threat model we consider in this paper (i.e., access-driven attacks [19]) have been demonstrated on x86 architectures, including data caches (and per-core L2 unified caches) [19, 21, 32, 34, 35, 40], instruction caches [8, 9, 47], and inclusive Last-Level Caches (LLCs) [12, 18, 22, 23, 25, 26, 29, 30, 33, 44–46, 48]. Recent studies [14, 17, 20, 31] have shown that these side channels are still feasible on SGX enclaves. While we briefly confirmed the effectiveness of cache side-channel attacks in our paper, the focus of this work is on a broader attack surface than just caches.

#### SGX Side-Channel Defenses
Most known defenses are specifically designed for page-fault side-channel attacks. Shinde et al. [39] proposed a compiler-based approach to transform cryptographic programs to hide page access patterns that may leak information. Shih et al. [38] proposed T-SGX, which uses Intel Transactional Synchronization Extensions (TSX) to prevent page faults from revealing the faulting address. Costan et al. [16] proposed a secure enclave architecture similar to SGX but resilient to both page-fault and cache side-channel attacks. Chen et al. [15] proposed DÉJÀ VU, a compiler-based approach to instrument enclave programs so that they can measure their own execution time between basic blocks in their control-flow graph. These research prototypes were designed without fully understanding the memory side-channel attack surface, thus falling short in offering effective protection against the attacks demonstrated in this work.

### 8 Conclusion

In this paper, we report the first in-depth study of SGX memory side channels. Our study summarizes eight attack vectors in memory management, ranging from Translation Lookaside Buffers (TLBs) to Dynamic Random Access Memory (DRAM). We demonstrate a set of novel attacks that exploit these channels by leveraging accessed flags, timing, HyperThreading, and DRAM modules. Compared to the page-fault attack, the new attacks are found to be stealthier and much more lightweight, with effectiveness comparable to known attacks in some cases. Most importantly, our study broadens the scope of side-channel studies on SGX, reveals the gap between proposed defenses and the design weaknesses of the system, and provokes further discussion on how to use new TEE techniques effectively and securely.

### 9 Acknowledgement

We are grateful to Taesoo Kim, the shepherd of our paper, and the anonymous reviewers for their helpful comments. This work was supported in part by NSF grants 1408874, 1527141, 1566444, and 1618493, NIH grant 1R01HG007078, ARO grant W911NF1610127, and NSFC grant 61379139. Work at UIUC was supported in part by NSF CNS grants 12-23967, 13-30491, and 14-08944.

### References

[1] 2014. Intel Software Guard Extensions Programming Reference. https://software.intel.com/sites/default/files/managed/48/88/329298-002.pdf/. (2014). Order Number: 329298-002, October 2014.

[2] 2015. Intel Software Guard Extensions (Intel SGX). https://software.intel.com/sites/default/files/332680-001.pdf. (2015). June 2015.

[3] 2016. Intel 64 and IA-32 Architectures Software Developer’s Manual, Combined Volumes:1,2A,2B,2C,3A,3B,3C, and 3D. https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf. (2016). Order Number: 325462-061US, December 2016.

[4] 2016. Intel 64 and IA-32 Architectures Software Developer’s Manual, Combined Volumes:1,2A,2B,2C,3A,3B,3C, and 3D. (2016). Order Number: 325462-058US, April 2016.

[5] 2017. Graphene / Graphene-SGX Library OS - a library OS for Linux multi-process applications, with Intel SGX support. https://github.com/oscarlab/graphene/. (2017). Accessed May 16, 2017.

[6] 2017. Intel SGX and Side-Channels. https://software.intel.com/en-us/articles/intel-sgx-and-side-channels. (2017). Added March 26, 2017.

[7] 2017. Intel® Software Guard Extensions (Intel® SGX) Enclave Writer’s Guide. https://software.intel.com/sites/default/files/managed/ae/48/Software-Guard-Extensions-Enclave-Writers-Guide.pdf. (2017). Revision 1.02, Accessed May, 2017.

[8] Onur Aciiçmez. 2007. Yet another MicroArchitectural Attack: Exploiting I-Cache. In ACM workshop on Computer Security Architecture.

[9] Onur Aciiçmez, Billy Bob Brumley, and Philipp Grabher. 2010. New results on instruction cache attacks. In 12th International Conference on Cryptographic Hardware and Embedded Systems.

[10] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. 2013. Innovative technology for CPU-based attestation and sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, Vol. 13.

[11] Haitham Akkary, Andy Glew, and Glenn Hinton. 1997. Method and apparatus for performing page table walks in a microprocessor capable of processing speculative instructions. US Patent 5680565 A. (1997).

[12] Naomi Benger, Joop van de Pol, Nigel P. Smart, and Yuval Yarom. 2014. "Ooh Aah... Just a Little Bit": A small amount of side channel can go a long way. In 16th International Workshop on Cryptographic Hardware and Embedded Systems.

[13] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. 2012. High-speed high-security signatures. Journal of Cryptographic Engineering (2012), 1–13.

[14] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. 2017. Software Grand Exposure: SGX Cache Attacks Are Practical. arXiv preprint arXiv:1702.07521 (2017).

[15] Sanchuan Chen, Xiaokuan Zhang, Michael Reiter, and Yinqian Zhang. 2017. Detecting Privileged Side-Channel Attacks in Shielded Execution with DÉJÀ VU. In 12th ACM Symposium on Information, Computer and Communications Security.

[16] Victor Costan, Ilia Lebedev, and Srinivas Devadas. 2016. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. In 25th USENIX Security Symposium. USENIX Association.

[17] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. 2017. Cache Attacks on Intel SGX. In EUROSEC. 2–1.

[18] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template Attacks: Automating Attacks on Inclusive Last-Level Caches. In 24th USENIX Security Symposium.

[19] D. Gullasch, E. Bangerter, and S. Krenn. 2011. Cache games – Bringing access-based cache attacks on AES to practice. In 32nd IEEE Symposium on Security and Privacy.

[20] Marcus Hähnel, Weidong Cui, and Marcus Peinado. 2017. High-Resolution Side Channels for Untrusted Operating Systems. In 2017 USENIX Annual Technical Conference (USENIX ATC 17). USENIX Association, Santa Clara, CA, 299–312.

[21] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical Timing Side Channel Attacks Against Kernel Space ASLR. In 34th IEEE Symposium on Security and Privacy.

[22] Mehmet Sinan Inci, Berk Gulmezoglu, Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. Seriously, get off my cloud! Cross-VM RSA Key Recovery in a Public Cloud. Cryptology ePrint Archive. (2015).

[23] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. S$A: A Shared Cache Attack that Works Across Cores and Defies VM Sandboxing—and its Application to AES. In IEEE Symposium on Security and Privacy.

[24] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. 2015. Systematic reverse engineering of cache slice selection in Intel processors. In Digital System Design (DSD), 2015 Euromicro Conference on. IEEE, 629–636.

[25] Gorka Irazoqui, Mehmet Sinan Inci, Thomas Eisenbarth, and Berk Sunar. 2014. Wait a minute! A fast, Cross-VM attack on AES. In 17th International Symposium Research in Attacks, Intrusions and Defenses.

[26] Mehmet Kayaalp, Nael Abu-Ghazaleh, Dmitry Ponomarev, and Aamer Jaleel. 2016. A High-resolution Side-channel Attack on Last-level Cache. In 53rd Annual Design Automation Conference.

[27] Butler W. Lampson. 1973. A note on the confinement problem. Commun. ACM 16, 10 (Oct. 1973).

[28] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado. 2017. Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing. In 26th USENIX Security Symposium (USENIX Security 17). USENIX Association, Vancouver, BC.

[29] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In USENIX Security Symposium.

[30] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-Level Cache Side-Channel Attacks are Practical. In IEEE Symposium on Security and Privacy.

[31] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom: How SGX amplifies the power of cache attacks. arXiv preprint arXiv:1703.06986 (2017).

[32] Michael Neve and Jean-Pierre Seifert. 2007. Advances on access-driven cache attacks on AES. In 13th International Conference on Selected Areas in Cryptography.

[33] Yossef Oren, Vasileios P. Kemerlis, Simha Sethumadhavan, and Angelos D. Keromytis. 2015. The Spy in the Sandbox: Practical Cache Attacks in JavaScript and Their Implications. In 22nd ACM SIGSAC Conference on Computer and Communications Security.

[34] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and countermeasures: the case of AES. In 6th Cryptographers’ Track at the RSA Conference on Topics in Cryptology.

[35] Colin Percival. 2005. Cache Missing for Fun and Profit. In BSDCon 2005.

[36] Peter Pessl, Daniel Gruss, Clementine Maurice, Michael Schwarz, and Stefan Mangard. 2016. DRAMA: Exploiting DRAM addressing for cross-CPU attacks. In Proceedings of the 25th USENIX Security Symposium.

[37] Jaebaek Seo, Byoungyoung Lee, Sungmin Kim, Ming-Wei Shih, Insik Shin, Dongsu Han, and Taesoo Kim. 2017. SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS). San Diego, CA.

[38] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus Peinado. 2017. T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS). San Diego, CA.

[39] Shweta Shinde, Zheng Leong Chua, Viswesh Narayanan, and Prateek Saxena. 2016. Preventing Page Faults from Telling Your Secrets. In 11th ACM Symposium on Information, Computer and Communications Security.

[40] Eran Tromer, Dag Arne Osvik, and Adi Shamir. 2010. Efficient Cache Attacks on AES, and Countermeasures. Journal of Cryptology 23, 2 (Jan. 2010), 37–71.

[41] Chia-Che Tsai, Kumar Saurabh Arora, Nehal Bandi, Bhushan Jain, William Jannen, Jitin John, Harry A. Kalodner, Vrushali Kulkarni, Daniela Oliveira, and Donald E. Porter. 2014. Cooperation and security isolation of library OSes for multi-process applications. In Proceedings of the Ninth European Conference on Computer Systems. ACM, 9.

[42] Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang, and Radu Teodorescu. 2016. One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege Escalation. In USENIX Security Symposium.

[43] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. 2015. Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. In 36th IEEE Symposium on Security and Privacy.

[44] Yuval Yarom and Naomi Benger. 2014. Recovering OpenSSL ECDSA Nonces Using the FLUSH+RELOAD Cache Side-channel Attack. In Cryptology ePrint Archive.

[45] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-channel Attack. In USENIX Security Symposium.

[46] Xiaokuan Zhang, Yuan Xiao, and Yinqian Zhang. 2016. Return-Oriented Flush-Reload Side Channels on ARM and Their Implications for Android Devices. In ACM Conference on Computer and Communications Security.

[47] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2012. Cross-VM Side Channels and Their Use to Extract Private Keys. In ACM Conference on Computer and Communications Security.

[48] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In ACM Conference on Computer and Communications Security.