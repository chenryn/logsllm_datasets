We now map an instance of 3SAT to a Separation of Duty (SDSoD) problem of polynomial size, thereby demonstrating that SDSoD is NP-Hard. We will describe the necessary actions to represent the 3SAT problem.

For \(0 \leq i \leq N\):
- \(t_i\): The "user" from the role \(\{x_i, \neg x_i\}\) that is assigned the value true.
- \(f_i\): The "user" from the role \(\{x_i, \neg x_i\}\) that is assigned the value false. Clearly, \(t_i\) and \(f_i\) must be different users, ensuring that one of \(\{x_i, \neg x_i\}\) is true and the other is false.
- \(clause_j\): The \(j\)-th boolean clause, for \(0 \leq j \leq C\).

Constraints:
- If both \(x_i\) and \(\neg x_i\) are in \(clause_j\), there is no constraint between \(clause_j\) and either \(f_i\) or \(t_i\).
- If \(x_i\) (resp. \(\neg x_i\)) is in \(clause_j\), there is a different user constraint between \(clause_j\) and \(f_i\) (resp. \(t_i\)).

The diagramming of actions and truth assignment for the general problem is shown in Figure 9 (without the different user constraints between truth assignments and clauses). In Figure 10, a complete representation of the 3SAT problem as an SDSoD problem is provided. For example, if \(clause_0\) is assigned \(\neg x_2\), then \(t_2\) must be assigned \(x_2\), which forces \(f_2\) to be assigned \(\neg x_2\), meaning that \(clause_1\) must be assigned a value different from \(x_2\).

Given these constraints, we can see why SDSoD computes 3SAT. The actions \(t_i\) and \(f_i\) provide a truth assignment, as each \(x_i\) is independently chosen to be either true (performed by \(t_i\)) or false (performed by \(f_i\)). The clause \(clause_j\) is true if and only if at least one of its terms \(v_{j,0}\), \(v_{j,1}\), or \(v_{j,2}\) is true. This is ensured by the different user constraint, which rules out users assigned to false. Therefore, if for each clause action there is a user \(x_i\) or \(\neg x_i\) that can perform it, the expression is satisfiable. This leads to the following theorem:

**Theorem 12.** SDSoD is NP-Complete.

**Proof.** The above reduction shows that any 3SAT problem can be embedded in an SDSoD problem, proving that SDSoD is NP-Hard. To show that it is NP-Complete, we can guess an assignment of users to roles and then iterate through the graph to ensure all roles and different user constraints are satisfied.

### 5. Conclusion

We considered a task consisting of actions performed by users with Separation of Duty (SoD) constraints between these actions. We introduced an approvability graph system that includes:
- A directed graph where edges correspond to action specifiers and paths (not necessarily simple) from initial to final nodes, representing tasks.
- Each edge is associated with a role or group of users that can perform the action.
- SoD constraints between edges.

The approvability graph allows different tasks to be completed from the same initial action (e.g., approve or deny a loan application) and includes loops enabling an arbitrary number of iterations of an action specifier (e.g., when editing a paper). Because of these loops, an approvability graph can define an unbounded number of tasks. It is the first model that can describe such loops.

When combined with user-role assignments, feasible approvability sequences can be generated, if they exist. We discussed two methods for generating these sequences: unscheduled approvability, which uses only past information, and scheduled approvability, which requires both past and future ("lookahead") information. While scheduled approvability may "lock in" users for future actions (potentially delaying task completion if such users are unavailable), it generally requires fewer users per role. If there are sufficient users per role, unscheduled approvability is preferable due to its increased flexibility.

We then considered sufficient well-formed conditions on the approvability graph to ensure that every task described by it can always complete. For scheduled approvability, it is sufficient not to have a cycle of constraints with exactly one different user constraint. For unscheduled approvability, an additional requirement is that an action edge in a loop must have a self-same user constraint if it cyclically consumes a user.

Given such well-formed approvability graphs, an algorithm need only consider sets of edges (ignoring repeated transitions of an edge) to determine the minimum number of users per role. Optimal schedules are possible, but, due to the following result, they are NP-Hard.

We also considered simple algorithms that provide bounds on the number of users and require polynomial time. These algorithms are correct even when constraints are between different roles.

Finally, we showed that even simple DSoD problems are NP-Complete. This is significant because (1) such analysis is computationally intractable, making it potentially too expensive to perform, and (2) it is the first NP-Completeness result inherent in a SoD problem.

Techniques for specifying and analyzing SoD have wide applicability, as any organization must tailor their own SoD policies. These policies depend on organization size, urgency, and security needs. The specification and analysis provided here are valuable as they enable SoD tasks to be clearly defined and ensure that such tasks do not get stuck, a condition that must be avoided in practical applications.

### 6. Acknowledgements

Special thanks to Robert Sloan for his many suggestions that improved the presentation of the theory. Additionally, Damian Roqueiro carefully read the paper, and helpful suggestions were made by Prof. V. N. Venkatakrishnan, Mani Radhakrishnan, Ashley Poole, Jorge Hernandez-Herrero, Mike Ter Louw, Hareesh Nagarajan, and the anonymous referees.

### 7. References

[1] G.-J. Ahn and R. Sandhu. The RSL99 language for role-based separation of duty constraints. In Proc. of the ACM Workshop on Role-Based Access Controls (RBAC), pages 43–54. ACM Press, 1999.
[2] Atluri, Chun, and Mazzoleni. A Chinese Wall security model for decentralized workflow systems. In SIGSAC: 8th ACM Conference on Computer and Communications Security. ACM SIGSAC, 2001.
[3] E. Bertino, E. Ferrari, and V. Atluri. The specification and enforcement of authorization constraints in workflow management systems. ACM Transactions on Information and System Security (TISSEC), 2(1):65–104, 1999.
[4] D. F. C. Brewer and M. J. Nash. The Chinese Wall security policy. In Proc. IEEE Symp. Security and Privacy, pages 206–214, 1989.
[5] D. D. Clark and D. R. Wilson. A comparison of commercial and military computer security policies. In Proc. IEEE Symp. Security and Privacy, pages 184–194, 1987.
[6] J. Crampton. Specifying and enforcing constraints in role-based access control. In Proc. of ACM Symposium on Access Control Models and Technologies (SACMAT), pages 43–50. ACM Press, 2003.
[7] J. Crampton. An algebraic approach to the analysis of constrained workflow systems. In Proceedings of the Foundations of Computer Security – FCS’04, volume 31, Turku, Finland, June 2004. TUCS General Publication, Turku Centre for Computer Science.
[8] S. D. C. di Vimercati, S. Paraboschi, and P. Samarati. Access control: principles and solutions. Softw, Pract. Exper, 33(5):397–421, 2003.
[9] D. Ferraiolo, J. Cugini, and R. Kuhn. Role based access control (RBAC): Features and motivations. In Annual Computer Security Applications Conference. IEEE Computer Society Press, 1995.
[10] D. F. Ferraiolo and R. Kuhn. Role based access control. In 15th National Computer Security Conference, pages 554–563, Baltimore, MD, 1992.
[11] S. N. Foley. Separation of duty using high water marks. In Proc. of the IEEE Computer Security Foundations Workshop (CSFW), pages 79–88. IEEE, 18-20 June 1991.
[12] V. D. Gligor, S. I. Gavrila, and D. Ferraiolo. On the formal definition of separation-of-duty policies and their composition. In Proc. IEEE Symp. Security and Privacy, pages 172–185, 1998.
[13] M. Hitchens and V. Varadharajan. Tower: A language for role based access control. In POLICY, pages 88–106, 2001.
[14] T. Jaeger and J. E. Tidswell. Practical safety in flexible access control models. ACM Transactions on Information and System Security (TISSEC), 4(2):158–190, 2001.
[15] J. B. D. Joshi, E. Bertino, B. Shafiq, and A. Ghafoor. Dependencies and separation of duty constraints in GTRBAC. In Proc. of ACM Symposium on Access Control Models and Technologies (SACMAT), 2003.
[16] P. A. Karger. Implementing commercial data integrity with secure capabilities. In Proc. IEEE Symp. Security and Privacy, pages 130–139, 1988.
[17] K. Knorr and H. Weidner. Analyzing separation of duties in Petri net workflows. In Proceedings of the Information Assurance in Computer Networks - Methods, Models, and Architectures for Network Security (MMM-ACNS 2001), volume Lecture Notes in Computer Science (LNCS) vol 2052, St. Petersburg, Russia, 2001. Springer Verlag.
[18] D. R. Kuhn. Mutual exclusion of roles as a means of implementing separation of duty in role-based access control systems. In Proc. of the ACM Workshop on Role-Based Access Controls (RBAC), pages 23–30. ACM Press, 1997.
[19] N. Li, Z. Bizri, and M. V. Tripunitara. On mutually-exclusive roles and separation of duty. In Proc. ACM Conference on Computer and Communications Security (CCS), pages 42–51. ACM, 2004.
[20] S. B. Lipner. Non-discretionary controls for commercial applications. In Proc. IEEE Symp. Security and Privacy, pages 2–10, 1982.
[21] M. J. Nash and K. R. Poland. Some conundrums concerning separation of duty. In Proc. IEEE Symp. Security and Privacy, pages 201–207, 1990.
[22] M. Radhakrishnan and J. A. Solworth. Application security support in the operating system kernel. In ACM Symposium on InformAtion, Computer and Communications Security (AsiaCCS’06), page to appear, Taipei, Taiwan, May 2006.
[23] J. H. Saltzer and M. D. Schroeder. The protection of information in computer systems. Proceedings of the IEEE, 63(9):1278–1308, 1975.
[24] R. Sandhu. Transaction control expressions for separation of duties. In Fourth Aerospace Security Applications Conference, pages 282–286, 1988.
[25] R. S. Sandhu. Role activation hierarchies. In ACM Workshop on Role-Based Access Control, pages 33–40, 1998.
[26] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E. Youman. Role-based access control models. IEEE Computer, 29(2):38–47, 1996.
[27] R. T. Simon and M. E. Zurko. Separation of duty in role-based environments. In Proc. of the IEEE Computer Security Foundations Workshop (CSFW), pages 183–194. IEEE, 1997.
[28] J. Tidswell and T. Jaeger. An access control model for simplifying constraint expression. In Proc. ACM Conference on Computer and Communications Security (CCS), pages 154–163, 2000.