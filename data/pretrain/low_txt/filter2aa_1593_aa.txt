# IOActive, Inc. Copyright ©2014. All Rights Reserved.

## Weird-Machine Motivated Practical Page Table Shellcode & Finding Out What's Running on Your System

### Author
Shane Macaulay  
Director of Cloud Services, IOActive, Inc.

---

### Dedication
- **Barnaby Jack**: Forever in our hearts and minds.
- “It’s about the journey, not the destination.”

---

### Introduction
- **13 Years Since ADMMutate** (Slide URL: http://1drv.ms/1xUpxL9)
  - **ADMMutate**: Last DC talk was about polymorphic shellcode.
  - **Reflections**:
    - The more things change, the more they stay the same.
    - Thought about PT shellcode with ADMMutate.
    - Attack is [hard/stress/]fun!!&$&%*:P;p;P
    - Defense is hard/stress.

---

### Abusing x for Fun and Profit
- **Hacker Scene Bias**:
  - Offensive techniques often get more attention.
  - Defensive strategies are less glamorous but crucial.
  - Let’s energize the "D" (defense) and have some fun!
- **Defensive Exploit**:
  - Today, we are killing process-hiding rootkits across 64-bit OS/platforms.
  - DKOM (Direct Kernel Object Manipulation) and process hiding are dead.

---

### Historical Context
- **13 Years Ago**:
  - **Other Developments**:
    - x86 assembler in Bash (cLIeNUX).
    - "shasm": An assembler written in GNU Bash Version 2, which may work in other recent Unix-style "shell" command interpreters.

---

### Ideals
- **Objective**:
  - To figure out all running code, including hacks and weird machines.
  - Establishing understanding through real-world targets: Hypervisor-monitored guests.
- **Approach**:
  - Combine protection pillars: structure analysis, physical memory traversal, and integrity checking.

---

### Practical Concepts
- **Attacks**:
  - **WeIrD MaChinE**: Lots of fun and highly esoteric.
- **Defense**:
  - **Detecting Everything**:
    - Use the "FORCE" (a hypervisor) to establish verifiability of device state.
    - Not worried about platform attacks like BIOS, firmware, or UEFI.
    - Games in fault handlers do not work on snapshots, and extracting physical memory can be challenging.
  - **Protection from Virtualized Environments**:
    - Serious/obvious impact on performance when nested (as noted by Dino Dai Zovi).

---

### Practical Page Table ShellCode
- **Motivations**:
  - Understanding memory protection systems.
  - Development required a deep understanding of system fault handling and low-level software-hardware interactions on modern 64-bit platforms.
  - Until Windows 7, page tables were directly executable.
  - **Page-Fault Weird Machine**: Lessons in instruction-less computation (Julian Bangert, Sergey Bratus, Rebecca Shapiro, Sean W. Smith, WOOT'13 Proceedings).

---

### X64 Kernel Virtual Address Space
- **Overview** (Reference: http://www.codemachine.com/article_x64kvas.html):
  - **Unused System Space**: 238TB (WIN9600 now uses and can contain +X areas).
  - **PTE Space**: 512GB (-X used to be executable in Win7).
  - **HyperSpace**: 512GB (8.1 cleaned up, 9200 had 1 +X page).
  - **System Cache Working Set**: 512GB-4K.
  - **Initial Loader Mappings**: 512GB (Large Page (2MB) allocations).
  - **Sys PTEs**: 128GB.
  - **Paged Pool Area**: 128GB.
  - **Session Space**: 512GB.
  - **Dynamic Kernel VA Space**: 1TB.
  - **PFN Database**: 6TB Max.
  - **Non-Paged Pool**: 512GB Max (DEFAULT NO EXECUTE).
  - **HAL and Loader Mappings**: 4MB.

---

### Page Table ShellCode Weird-Machine
- **Win7 and Earlier**:
  - Emission of intended shellcode into the PTE area.
  - `VirtualAlloc()` call from user space results in executable memory in the kernel.
  - Reserving memory causes a code-write operation into kernel space.
  - Example addresses and PFNs provided.

- **PT SC WM Died with Win8**:
  - This technique works earlier than Win7 but is no longer effective in Win8.
  - Detailed fault handling stack trace provided.

---

### New Tool (ptshellcode thingy)
- **Expansion of PT Shellcode Concept**:
  - Was it going to be an ADMmutate update? .NET Compiler, C macros, or a script host RoP builder/engine/host?
  - Application of the technique is mostly dead, requiring an info leak (maybe) and the use of bash to write it.

---

### Process Detection
- **Cross-Platform AMD64 Process Detection**:
  - Obsoletes process-hiding techniques used by all rootkits/malware.
  - Useful against APT (Advanced Persistent Threat) malware.
  - Can be used as a defensive attack pattern.
  - **ProcDetect**: 
    - A more advanced and useful tool for release today.
    - Signed code example for AMD64 Windows, with other platforms/OS to follow.

---

### Attack vs. Defense
- **Defensive Window of Opportunity**:
  - Closing the door/window today.
- **Defensive Tactics**:
  - New classes of defensive attack techniques.
  - Offensive forensics/automation.
  - Post-processing to detect any hidden process ever spawned.
  - Keep interesting/known memory dumps around.
  - Currently, there are no possible attacks against this technique (“WE FOUND YOU!”).

---

### In-Memory Process Detection
- **Challenges**:
  - Dumping memory is physically difficult.

---

This revised version aims to provide a clearer, more professional, and coherent presentation of the original content.