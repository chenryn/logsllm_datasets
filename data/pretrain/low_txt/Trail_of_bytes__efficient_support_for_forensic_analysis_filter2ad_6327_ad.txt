### Part of the Stealthy Sinowal Family: Mebroot

Mebroot is a notable example from the stealthy Sinowal family. According to reports by F-Secure [8], it is one of the "stealthiest" malware they have encountered, primarily because it avoids traditional Windows system call hooking, making its execution very difficult to detect.

#### Anatomy of the Mebroot Attack

The attack sequence of Mebroot can be summarized as follows:
1. **Binary Execution**: A binary file is downloaded and executed.
2. **Payload Installation**: The payload (extracted from the binary) is installed.
3. **MBR Modification**: The master boot record (MBR) is modified.
4. **Self-Deletion**: The installer deletes itself.

#### Causal Reconstruction of Mebroot's Attack Vector

To understand the behavior of Mebroot, we used our monitoring infrastructure to issue a `report(∞, causal, ID(Mebroot))`. The causal relationship between the first two steps is straightforward, as the connection between the first and last steps is established when the file deletion is noted (i.e., when the storage module rescans the inodes).

An annotated profile of the behavior recovered from our audit log is shown in Figure 6. This profile reveals all the modifications made to the MBR, as we store "diffs" in the version trees.

**Figure 6: Annotated Graph of the Causal Reconstruction of Mebroot’s Attack Vector**

```
D, S
installer executes
read
D, S
old MBR
read
2x write
repeated reads
end of disk
D, S, M
write
end of disk
D, S, M
new MBR
D
installer deletes itself
D, S
Logging
Disk Monitoring
System Call Monitoring
Memory Monitoring
D
S
M
```

#### Evaluation with a Seasoned Malware Analyst

To further evaluate the effectiveness of our platform in reconstructing post-compromise events, we provided two malware samples to a seasoned malware analyst (the second author) for inspection. In both cases, the malware was successfully unpacked and disassembled using commercial software and inspected using dynamic analysis techniques, including system-call sequence analysis, memory payload detection, and single-stepping execution. We then compared our results with those from this labor-intensive exercise.

**Table 2: Comparison of Profiles Created by Manual Analysis vs. Reconstruction Using Our Platform**

|           | Phalanx2 (Manual Forensic) | Phalanx2 (Our Platform) | Mebroot (Manual Forensic) | Mebroot (Our Platform) |
|-----------|----------------------------|-------------------------|---------------------------|------------------------|
| Syscall   | 0.95                       | 0.72                    | 0.91                      | 0.68                   |
| Storage   | 0.05                       | 0.26                    | 0.08                      | 0.30                   |
| Memory    | 0.0                        | 0.02                    | 0.01                      | 0.02                   |

The breakdown in terms of diagnosed functionality is shown in Table 2. The overall results were strikingly similar, though the analyst was able to discover several hooks coded in Phalanx2 (a sophisticated info stealer) for hiding itself, the presence of a backdoor, and different injection modes that are not observable by our platform. For Mebroot, the functional results were equivalent. Importantly, the manual inspection verified the behavioral profile we reported, attesting to the accuracy of the linkages we inferred automatically.

### Attacks and Limitations

Our approach relies on the security properties of the hypervisor to isolate our monitoring code from tampering by malicious entities in the guest OS. This assumption is not unique to our solution, and there has been no concrete demonstration suggesting otherwise. However, if the hypervisor's security is compromised, so too is the integrity and correctness of the transactions we record.

#### Hypervisor-Detection Attacks

A known weakness of current hypervisor designs is their vulnerability to hypervisor-detection attacks [11, 5, 13]. One way to address these attacks might be to use a thin hypervisor layer specifically designed for data forensics, rather than a feature-rich hypervisor like Xen. Once the hypervisor's presence is detected, an attacker can modify the guest VM's state, causing the forensic platform to capture a morphed view of the VM [13]. For example, an attacker could remap system calls to trigger false events and pollute the audit logs. Techniques to mitigate such attacks remain an open problem.

#### Resource Exhaustion Attacks

Resource exhaustion attacks pose another challenge. As our infrastructure tracks all monitored objects in memory, an attacker could access hundreds of files within a short period, causing the memory monitoring module to allocate space for each object in its watchlist. If done using multiple processes, this could lead to memory exhaustion, requiring some monitored objects to be evicted from the watchlist. While we have implemented optimizations (e.g., collapsing contiguous pages into a single address range), this attack strategy remains viable.

#### Network Interface Accesses

We do not monitor interactions that directly manipulate the receive and transmit rings of virtual network interfaces (NICs). Such accesses will not be logged. Additionally, our current prototype only logs accesses to monitored blocks and does not prevent such accesses. Extending our approach to cover these rings and/or block unauthorized accesses is largely an engineering exercise that we leave for future work.

### Conclusion

We present an architecture for efficiently and transparently recording accesses to monitored objects. Our techniques leverage hardware virtualization platforms to build lightweight mechanisms for monitoring the causal data flow of objects in a virtual machine. The heuristics we developed allow the monitoring framework to coalesce events collected at various abstraction layers and map these events back to the offending processes. The mappings are recorded in an audit trail, providing mechanisms for data forensics, such as quickly reconstructing detailed information after a system compromise. To demonstrate the practical utility of our framework, we show how it can be used to glean insightful information on the behavioral profiles of malware activity following a security breach.

### Code Availability

The source code for both the monitoring platform (i.e., patches to Xen) and our packaged tools are available upon request under a BSD license for research and non-commercial purposes. Please contact the first author for more information on obtaining the software.

### Acknowledgments

We thank the anonymous reviewers for their insightful comments and suggestions for improving earlier drafts of this paper. This work is supported in part by the National Science Foundation under awards CNS-0915364 and CNS-0852649.

### References

[1] Barham, P., Dragovic, B., Fraser, K., Hand, S., Harris, T., Ho, A., Neugebauer, R., Pratt, I., and Warfield, A. Xen and the Art of Virtualization. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (2003), pp. 164–177.

[2] Buchholz, F., and Spafford, E. On the Role of File System Metadata in Digital Forensics. Digital Investigation 1, 4 (2004), 298 – 309.

[3] Chen, P., and Noble, B. When Virtual is Better than Real. In Proceedings of the Workshop on Hot Topics in Operating Systems (May. 2001), pp. 133–138.

[4] Chen, S., Xu, J., Nakka, N., Kalbarczyk, Z., and Iyer, R. K. Defeating Memory Corruption Attacks via Pointer Taintedness Detection. In IEEE International Conference on Dependable Systems and Networks (DSN (2005), pp. 378–387.

[5] Chen, X., Andersen, J., Mao, Z., Bailey, M., and Nazario, J. Towards an Understanding of Anti-virtualization and Anti-debugging Behavior in Modern Malware. In Dependable Systems and Networks (June 2008), pp. 177–186.

[6] Denning, D. E., and Denning, P. J. Certification of Programs for Secure Information Flow. Communications of the ACM 20, 7 (1977), 504–513.

[7] Dinaburg, A., Royal, P., Sharif, M., and Lee, W. Ether: Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security (2008), pp. 51–62.

[8] F-Secure. MBR Rootkit, A New Breed of Malware. See http://www.f-secure.com/weblog/archives/00001393.html (2008).

[9] Farmer, D., and Venema, W. Forensic Discovery. Addison-Wesley, 2006.

[10] Franklin, J., Perrig, A., Paxson, V., and Savage, S. An Inquiry into the Nature and Causes of the Wealth of Internet Miscreants. In Proceedings of the 14th ACM conference on Computer and communications security (2007), pp. 375–388.

[11] Garfinkel, T., Adams, K., Warfield, A., and Franklin, J. Compatibility is not Transparency: VMM Detection Myths and Realities. In Proceedings of the 11th USENIX workshop on Hot topics in operating systems (2007), pp. 1–6.

[12] Garfinkel, T., Pfaff, B., Chow, J., Rosenblum, M., and Boneh, D. Terra: A Virtual Machine-Based Platform for Trusted Computing. In Proceedings of ACM Symposium on Operating System Principles (2003), pp. 193–206.

[13] Garfinkel, T., and Rosenblum, M. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In Network and Distributed Systems Security Symposium (2003), pp. 191–206.

[14] Goel, A., Po, K., Farhadi, K., Li, Z., and de Lara, E. The Taser Intrusion Detection System. In Proceedings of Symposium on Operating Systems Principles (Oct. 2005).

[15] Goldberg, R. Survey of Virtual Machine Research. IEEE Computer Magazine 7, 6 (1974), 34–35.

[16] Jain, S., Shafique, F., Djeric, V., and Goel, A. Application-Level Isolation and Recovery with Solitude. In Proceedings of EuroSys (Apr. 2008), pp. 95–107.

[17] Jay, C., Glencross, M., and Hubbold, R. Modeling the Effects of Delayed Haptic and Visual Feedback in a Collaborative Virtual Environment. ACM Transactions on Computer-Human Interaction 14, 2 (2007), 8.

[18] Jiang, X., Wang, X., and Xu, D. Stealthy Malware Detection through VMM-based “out-of-the-box” Semantic View Reconstruction. In Proceedings of the 14th ACM conference on Computer and Communications Security (2007), pp. 128–138.

[19] Jones, S. T., Arpaci-Dusseau, A. C., and Arpaci-Dusseau, R. H. Antfarm: Tracking Processes in a Virtual Machine Environment. In Proceedings of the USENIX Annual Technical Conference (2006).

[20] Jones, S. T., Arpaci-Dusseau, A. C., and Arpaci-Dusseau, R. H. Geiger: Monitoring the Buffer Cache in a Virtual Machine Environment. SIGPLAN Not. 41, 11 (2006), 14–24.

[21] Kim, G. H., and Spafford, E. H. The Design and Implementation of Tripwire: a File System Integrity Checker. In Proceedings of the 2nd ACM Conference on Computer and Communications Security (1994), ACM, pp. 18–29.

[22] King, S., and Chen, P. Backtracking Intrusions. Proceedings of the nineteenth ACM Symposium on Operating Systems Principles (Dec 2003).

[23] King, S. T., Mao, Z. M., Lucchetti, D. G., and Chen, P. M. Enriching intrusion alerts through multi-host causality. In Proceedings of Network and Distributed System Security Symposium (2005).

[24] Krishnan, S., and Monrose, F. Time Capsule: Secure Recording of Accesses to a Protected Datastore. In Proceedings of the 2nd ACM Workshop on Virtual Machine Security (Nov. 2009).

[25] Leung, A. W., Pasupathy, S., Goodson, G., and Miller, E. L. Measurement and Analysis of Large-scale Network File System Workloads. In USENIX Annual Technical Conference (2008), pp. 213–226.

[26] Leung, F., Neiger, G., Rodgers, D., Santoni, A., and Uhlig, R. Intel Virtualization Technology: Hardware Support for Efficient Processor Virtualization. Intel Technology Journal 10 (2006).

[27] Litty, L., Lagar-Cavilla, H., and Lie, D. Hypervisor Support for Identifying Covertly Executing Binaries. In Proceedings of USENIX Security Symposium (Aug. 2008), pp. 243–257.

[28] Muniswamy-Reddy, K., Holland, D., Braun, U., and Seltzer, M. Provenance-aware Storage Systems. In Proceedings of the 2006 USENIX Annual Technical Conference (2006), pp. 43–56.

[29] Muniswamy-Reddy, K.-K., Macko, P., and Seltzer, M. Provenance for the Cloud. In USENIX Conference on File and Storage Technologies (FAST) (Berkeley, CA, USA, 2010), USENIX Association.

[30] NIST. National Software Reference Library, 2009.

[31] Payne, B. D., Carbone, M., and Lee, W. Secure and flexible monitoring of virtual machines. Annual

[32] Provos, N., McNamee, D., Mavrommatis, P., Wang, K., and Modadugu, N. The Ghost in the Browser: Analysis of Web-based Malware. In First Workshop on Hot Topics in Understanding Botnets (2006).

[33] Quinlan, S., and Dorward, S. Venti: A New Approach to Archival Data Storage. In Proceedings of the USENIX Conference on File and Storage Technologies (2002), pp. 89–101.

[34] Peiset, S., Bishop, M., and Marzullo, K. Computer Forensics in Forensis. ACM Operating System Review 42 (2008).

[35] Shneiderman, B. Response Time and Display Rate in Human Performance with Computers. ACM Computing Surveys 16, 3 (1984), 265–285.

[36] Slowinska, A., and Bos, H. Pointless Tainting? Evaluating the Practicality of Pointer Tainting. In Proceedings of EuroSys (Apr. 2009).

[37] Vincenzetti, D., and Cotrozzi, M. ATP - Anti Tampering Program. In Proceedings of USENIX Security (1993), pp. 79–90.