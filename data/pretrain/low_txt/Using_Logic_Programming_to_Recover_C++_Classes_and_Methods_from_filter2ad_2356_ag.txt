### Table 6: Edit Distance Between Recovered and Ground Truth Classes

The following table shows the edit distance between the classes that ObjDigger recovered and the ground truth. The first five programs in the table are those evaluated in the original ObjDigger publication [14]. A low edit distance indicates that the class assignments are close to the ground truth. The edit distance for ObjDigger is broken down into the number of move, add, remove, split, and join edits to reveal the types of errors that ObjDigger made. These sum to the total edit distance, which is also reported as a percentage of methods. For comparison, OOAnalyzer’s total edit distances are also reported. The green background shading indicates the best result.

| Program                | Total Edits | Move | Add | Remove | Split | Join | % Edits | Num. Methods | Num. Classes |
|------------------------|-------------|------|-----|--------|-------|------|---------|--------------|--------------|
| MySQL upgrade.exe      | 16.6        | 15   | 101 | 0      | 11    | 0    | 21      | 29           | 121          |
| TinyXML Debug          | 19.4        | 8    | 113 | 0      | 15    | 0    | 44      | 44           | 134          |
| TinyXML Release        | 15.6        | 1    | 22  | 1      | 5     | 0    | 6       | 11           | 23           |
| Malware 0faaa3d3       | 11.5        | 37   | 316 | 2      | 7     | 0    | 166     | 95           | 393          |
| Malware 29be5a33       | 8.6         | 0    | 5   | 0      | 2     | 0    | 5       | 6            | 6            |
| Malware 6098cb7c       | 19.7        | 37   | 459 | 0      | 9     | 0    | 212     | 141          | 507          |
| Malware 628053dc       | 32.3        | 2    | 806 | 1      | 3     | 0    | 239     | 139          | 829          |
| Malware 67b9be3c       | 20.1        | 2    | 258 | 0      | 0     | 0    | 75      | 76           | 272          |
| Malware cfa69fff       | 12.8        | 21   | 1334| 5      | 7     | 0    | 483     | 180          | 1361         |
| Malware d597bee8       | 23.6        | 6    | 459 | 0      | 2     | 0    | 183     | 94           | 369          |
| Malware deb6a7a1       | 20.5        | 17   | 240 | 1      | 5     | 0    | 391     | 190          | 129          |
| Malware f101c05e       | 21.8        | 12   | 1091| 0      | 1     | 0    | 48      | 43           | 237          |
| Average                | 21.8        | -    | -   | -      | -     | -    | -       | -            | -            |

### CFI Systems for C++

Several CFI (Control-Flow Integrity) systems incorporate C++ specific protections. Examples include vfGuard [21] and VTint [34]. Both systems identify and recover information about virtual call sites and vftables. 

- **vfGuard** sanitizes virtual calls based on this information.
- **VTint** relocates identified vftables to a read-only segment of memory and checks before each virtual call that the referenced vftable is in read-only memory.

More recent C++-specific CFI systems, such as MARX [19] and VCI [8], have begun recovering additional information like inheritance hierarchies. This strengthens enforcement policies by disallowing virtual calls to unrelated classes. However, unlike OOAnalyzer, these systems do not determine the direction of inheritance relationships, which could further strengthen the inferred CFI policies.

All four of these systems only recover C++ abstractions required to protect virtual calls, thereby only recovering information about polymorphic classes. In contrast, OOAnalyzer attempts to recover all methods on all classes implemented in the target binary, including non-polymorphic methods and classes.

### Detection of C++ Vulnerabilities

The RECALL system [6, 7] recovers vftables, constructors, and destructors, and tracks the dataflow of object pointers. It uses this information to detect vftable escape vulnerabilities by observing if the offset into a vftable is too large for the intended type of the object. OOAnalyzer uses similar logic in its forward reasoning rules (Section 3.2.2) to group methods into classes and recover relationships among classes.

### Conclusions

We demonstrated that recovering detailed C++ abstractions is possible through the creation of OOAnalyzer. OOAnalyzer uses a lightweight symbolic analysis to efficiently generate an initial set of facts and analyzes them using a Prolog-based reasoning system. We evaluated OOAnalyzer and showed that it is both scalable and accurate. It recovered abstractions on complex programs such as Firefox and MySQL, and from C++-based malware executables. It identifies the classes in an executable and the methods of those classes with high accuracy (average 21.8% error rate), and can distinguish special methods such as constructors, destructors, virtual function tables, and virtual methods (average F-scores of 0.87, 0.41, 0.97, and 0.88).

### Acknowledgments

This material is based upon work funded and supported by the Department of Defense under Contract No. FA8702-15-D-0002 with Carnegie Mellon University for the operation of the Software Engineering Institute, a federally funded research and development center. [DISTRIBUTION STATEMENT A] This material has been approved for public release and unlimited distribution. Please see Copyright notice for non-US Government use and distribution. DM18-0949.

### References

[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-Flow Integrity. In Proceedings of the ACM Conference on Computer and Communications Security.

[2] Kapil Anand, Matthew Smithson, Khaled Elwazeer, Aparna Kotha, Jim Gruen, Nathan Giles, and Rajeev Barua. 2013. A Compiler-level Intermediate Representation Based Binary Analysis and Rewriting System. In Proceedings of the ACM European Conference on Computer Systems.

[3] Boost. 1998. Boost C++ Libraries. (1998). Retrieved 14 Aug. 2018 from http://www.boost.org

[4] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. 2012. Unleashing Mayhem on Binary Code. In Proceedings of the IEEE Symposium on Security and Privacy.

[5] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems.

[6] David Dewey and Jonathon Giffin. 2012. Static Detection of C++ Vtable Escape Vulnerabilities in Binary Code. In Proceedings of the Network and Distributed System Security Symposium.

[7] David Dewey, Bradley Reaves, and Patrick Traynor. 2015. Uncovering Use-After-Free Conditions in Compiled Code. In Proceedings of the IEEE Conference on Availability, Reliability and Security.

[8] Mohamed Elsabagh, Dan Fleck, and Angelos Stavrou. 2017. Strict Virtual Call Integrity Checking for C++ Binaries. In Proceedings of the ACM Asia Conference on Computer and Communications Security.

[9] Alexander Fokin, Egor Derevenetc, Alexander Chernov, and Katerina Troshina. 2011. SmartDec: Approaching C++ Decompilation. In Proceedings of the Working Conference on Reverse Engineering (WCRE).

[10] Alexander Fokin, Katerina Troshina, and Alexander Chernov. 2010. Reconstruction of Class Hierarchies for Decompilation of C++ Programs. In Proceedings of the Software Maintenance and Reengineering Conference.

[11] Jan Gray. 1994. C++: Under the Hood. Technical Report. Microsoft. Retrieved August 14, 2018 from http://www.openrce.org/articles/files/jangrayhood.pdf

[12] Hex-Rays. 2017. Hex-Rays IDA Disassembler. (2017). Retrieved 14 Aug. 2018 from https://www.hex-rays.com/products/ida/

[13] Itanium 2017. Itanium C++ ABI. (March 2017). Retrieved 14 Aug. 2018 from https://itanium-cxx-abi.github.io/cxx-abi/

[14] Wesley Jin, Cory Cohen, Jeffrey Gennari, Charles Hines, Sagar Chaki, Arie Gurfinkel, Jeffrey Havrilla, and Priya Narasimhan. 2014. Recovering C++ Objects From Binaries Using Inter-procedural Data-Flow Analysis. In Proceedings of the Program Protection and Reverse Engineering Workshop.

[15] Omer Katz, Ran El-Yaniv, and Eran Yahav. 2016. Estimating Types in Binaries Using Predictive Modeling. In Proceedings of the Symposium on Principles of Programming Languages.

[16] Microsoft. 2015. Information from Microsoft about the PDB format. (29 Oct. 2015). Retrieved 14 Aug. 2018 from https://github.com/Microsoft/microsoft-pdb

[17] Microsoft. 2016. Retrieved 14 Aug. 2018 from https://docs.microsoft.com/en-us/cpp/build/reference/gl-whole-program-optimization

[18] OOAnalyzer 2018. OOAnalyzer prolog rules. (10 May 2018). Retrieved 14 Aug. 2018 from https://github.com/cmu-sei/pharos/tree/master/share/prolog/oorules

[19] Andre Pawlowski, Moritz Contag, Victor van der Veen, Chris Ouwehand, Thorsten Holz, Herbert Bos, Elias Athanasopoulos, and Cristiano Giuffrida. 2017. MARX: Uncovering Class Hierarchies in C++ Programs. In Proceedings of the Network and Distributed System Security Symposium.

[20] Pharos 2017. Pharos project page. (2017). Retrieved 14 Aug. 2018 from https://github.com/cmu-sei/pharos

[21] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Proceedings of the Network and Distributed System Security Symposium.

[22] ROSE 2018. ROSE compiler infrastructure. (2018). Retrieved 14 Aug. 2018 from http://rosecompiler.org/

[23] Paul Vincent Sabanal and Mark Vincent Yason. 2007. Reversing C++. In Proceedings of Black Hat USA.

[24] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In Proceedings of the IEEE Symposium on Security and Privacy.

[25] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. 2010. All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but might have been afraid to ask). In Proceedings of the IEEE Symposium on Security and Privacy.

[26] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. 2015. Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proceedings of the Network and Distributed System Security Symposium.

[27] Igor Skochinsky. 2006. Reversing Microsoft Visual C++ Part 2: Classes, Methods and RTTI. (2006). Retrieved 14 Aug. 2018 from http://www.openrce.org/articles/full_view/23

[28] Venkatesh Srinivasan and Thomas Reps. 2014. Recovery of Class Hierarchies and Composition Relationships from Machine Code. In Proceedings of the International Conference on Compiler Construction.

[29] Terrance Swift and David S. Warren. 2012. XSB: Extending Prolog with Tabled Logic Programming. Theory and Practice of Logic Programming 12, 1-2 (2012).

[30] Victor van der Veen, Enes Göktas, Moritz Contag, Andre Pawoloski, Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In Proceedings of the IEEE Symposium on Security and Privacy.

[31] Minghua Wang, Heng Yin, Abhishek Vasisht Bhaskar, Purui Su, and Dengguo Feng. 2015. Binary Code Continent: Finer-grained Control Flow Integrity for Stripped Binaries. In Proceedings of the Annual Computer Security Applications Conference.

[32] Wikiversity. 2017. Visual C++ name mangling. (2017). Retrieved 14 Aug. 2018 from https://en.wikiversity.org/wiki/Visual_C%2B%2B_name_mangling

[33] Kyungjin Yoo and Rajeev Barua. 2014. Recovery of Object Oriented Features from C++ Binaries. In Proceedings of the IEEE Asia-Pacific Software Engineering Conference.

[34] Chao Zhang, Chengyu Song, Kevin Zhijie Chen, Zhaofeng Chen, and Dawn Song. 2015. VTint: Protecting Virtual Function Tables’ Integrity. In Proceedings of the Network and Distributed System Security Symposium.

[35] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In Proceedings of the USENIX Security Symposium.