### Including Important Real-World Attacks

This document discusses the inclusion of important real-world attacks, such as truncation attacks [35]. In Appendix A, we demonstrate how to achieve plaintext-stream integrity (INT-PS) for the scheme. Specifically, we show that if the adversary's SD-query responses ensure the correct operation of the channel, then security in the INT-CS sense implies INT-PS. This result aligns with a finding by FGMP. Consequently, the security of CH follows from the INT security of AE via Theorem 3. An open question is whether the correctness of M, along with the INT security of AE, is sufficient for INT-PS of CH. We leave this for future work.

### Security of Data Streams in TLS 1.3

The focus of this paper is the mechanism by which data streams are protected in TLS 1.3. Our model allows for the study of the security of data transmitted between key changes (see Section 5.1). This is valid under appropriate assumptions about the underlying key-derivation function used in TLS, where the record-layer state is effectively independent between key changes. However, our model has limitations; it cannot address the security of the concatenation of data sent across key changes. For example, consider the concatenation of the application-data stream sent in the early-data phase and the post-handshake phase. Early data can be replayed, as the adversary can send this data to any number of valid recipients possessing a pre-shared key shared with the client. Our model does not account for such replay attacks, which also limits our ability to study truncation attacks [35], as these may involve data sent across key changes. Finally, our analysis of TLS 1.3 does not extend to the record layer specifications in TLS 1.2, 1.1, 1.0, SSL 3, and so on.

### Conclusion

Despite these limitations, our analysis provides positive insights into TLS 1.3. We treated the record layer as a multiplexed, stream-based channel, which accurately models secure channels as they are used in practice. We formalized it as a partially specified channel, allowing us to encapsulate the myriad implementations admitted by its standardizing document into one scheme (see Figure 7). We confirmed its privacy and integrity in our strong adversarial model, but with two caveats: first, the record layer's ability to hide the length, content, or type of input streams depends on details left unspecified by the standard. Nevertheless, our results, specifically Theorems 2 and 4, provide guidance on developing implementations that achieve a target security goal. This goal is a property of the stream multiplexer used to construct the channel. The second caveat is that draft 23 of the record layer does not achieve security in the sense of ciphertext-stream integrity; we suggested a simple change to the standard (Theorem 3), which was adopted in the final version.

Our partial specification of the record layer is simple and flexible, and we hope this paradigm will influence the standard-writing process. Thinking formally about what the protocol must get right and what it may get wrong provides principled guidance in its development. Although the partially specified protocol framework is not the only way to reason about how unspecified or under-specified matters affect security, we found it to be a useful tool for discovering these security-critical matters. Future work could include applying our notions of security to settings where out-of-order packets are considered attacks (e.g., TLS and SSH) and to other notions of security appropriate for settings where packet loss is expected (e.g., DTLS and IPSec). Beyond channels, we hope to see the Rogaway-Stegers framework applied more broadly, such as to the TLS handshake.

### Acknowledgements

We thank Mihir Bellare and the CCS program committee for their valuable feedback. This work was supported by NSF grants CNS-1564444 and CNS-1816375.

### References

[1] Albrecht, M.R., Degabriele, J.P., Hansen, T.B., Paterson, K.G.: A surfeit of SSH cipher suites. In: Proceedings of the 23rd ACM SIGSAC Conference on Computer and Communications Security, ACM (2016) 1480–1491
[2] Albrecht, M.R., Paterson, K.G., Watson, G.J.: Plaintext recovery attacks against SSH. In: Proceedings of the 30th IEEE Symposium on Security and Privacy, IEEE (2009) 16–26
[3] AlFardan, N.J., Paterson, K.G.: Lucky thirteen: Breaking the TLS and DTLS record protocols. In: 2013 IEEE Symposium on Security and Privacy, IEEE (2013) 526–540
[4] Andreeva, E., Bogdanov, A., Luykx, A., Mennink, B., Mouha, N., Yasuda, K.: How to securely release unverified plaintext in authenticated encryption. In: Advances in Cryptology – ASIACRYPT 2014, Springer Berlin Heidelberg (2014) 105–125
[5] Badertscher, C., Matt, C., Maurer, U., Rogaway, P., Tackmann, B.: Augmented secure channels and the goal of the TLS 1.3 record layer. In: Provable Security, Springer International Publishing (2015) 85–104
[6] Barwell, G., Page, D., Stam, M.: Rogue decryption failures: Reconciling AE robustness notions. In: Proceedings of the 15th IMA International Conference on Cryptography and Coding, Springer International Publishing (2015) 94–111
[7] Bellare, M., Kohno, T., Namprempre, C.: Breaking and provably repairing the SSH authenticated encryption scheme: A case study of the Encode-then-Encrypt-and-MAC paradigm. ACM Trans. Inf. Syst. Secur. 7(2) (2004) 206–241
[8] Bellare, M., Namprempre, C.: Authenticated encryption: Relations among notions and analysis of the generic composition paradigm. Cryptology ePrint Archive, Report 2000/025 (2000) https://eprint.iacr.org/2000/025.
[9] Bellare, M., Rogaway, P.: Encode-Then-Encipher encryption: How to exploit nonces or redundancy in plaintexts for efficient cryptography. In: Advances in Cryptology — ASIACRYPT 2000, Springer Berlin Heidelberg (2000) 317–330
[10] Bellare, M., Rogaway, P.: The security of triple encryption and a framework for code-based game-playing proofs. In: Proceedings of the 24th Annual International Conference on The Theory and Applications of Cryptographic Techniques, Springer-Verlag (2006) 409–426
[11] Bellare, M., Tackmann, B.: The multi-user security of authenticated encryption: AES-GCM in TLS 1.3. In: Advances in Cryptology – CRYPTO 2016, Springer Berlin Heidelberg (2016) 247–276
[12] Bhargavan, K., Lavaud, A.D., Fournet, C., Pironti, A., Strub, P.Y.: Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS. In: Proceedings of the 35th IEEE Symposium on Security and Privacy, IEEE (2014) 98–113
[13] Boldyreva, A., Degabriele, J.P., Paterson, K.G., Stam, M.: Security of symmetric encryption in the presence of ciphertext fragmentation. In: Advances in Cryptology – EUROCRYPT 2012, Springer Berlin Heidelberg (2012) 682–699
[14] Boldyreva, A., Degabriele, J.P., Paterson, K.G., Stam, M.: On symmetric encryption with distinguishable decryption failures. In: Fast Software Encryption, Springer Berlin Heidelberg (2014) 367–390
[15] Böck, H., Zauner, A., Devlin, S., Somorovsky, J., Jovanovic, P.: Nonce-disrespecting adversaries: Practical forgery attacks on GCM in TLS. Cryptology ePrint Archive, Report 2016/475 (2016) https://eprint.iacr.org/2016/475.
[16] Degabriele, J.P., Paterson, K., Watson, G.: Provable security in the real world. IEEE Security & Privacy 9(3) (2011) 33–41
[17] Degabriele, J.P., Paterson, K.G.: On the (in)Security of IPsec in MAC-then-encrypt Configurations. In: Proceedings of the 17th ACM Conference on Computer and Communications Security, ACM (2010) 493–504
[18] Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Protzenko, J., Rastogi, A., Swamy, N., Zanella-Béguelin, S., Bhargavan, K., Pan, J., Zinzindohoué, J.K.: Implementing and proving the TLS 1.3 record layer. In: Proceedings of the 38th IEEE Symposium on Security and Privacy (SP), IEEE (2017) 463–482
[19] Fischlin, M., Günther, F., Marson, G.A., Paterson, K.G.: Data is a stream: Security of stream-based channels. In: Advances in Cryptology – CRYPTO 2015, Springer Berlin Heidelberg (2015) 545–564
[20] Fischlin, M., Günther, F., Marson, G.A., Paterson, K.G.: Data is a stream: Security of stream-based channels. Cryptology ePrint Archive, Report 2017/1191 (2017) https://eprint.iacr.org/2017/1191.
[21] Google: QUIC, a multiplexed stream transport over UDP. https://www.chromium.org/quic, accessed 13 Feb 2018.
[22] Hoang, V.T., Krovetz, T., Rogaway, P.: Robust authenticated-encryption AEZ and the problem that it solves. In: Advances in Cryptology – EUROCRYPT 2015, Springer Berlin Heidelberg (2015) 15–44
[23] Kent, S., Seo, K.: Security architecture for the internet protocol. RFC 4301, RFC Editor (December 2005) http://www.rfc-editor.org/rfc/rfc4301.txt.
[24] Krawczyk, H.: Cryptographic extraction and key derivation: The HKDF scheme. In: Advances in Cryptology – CRYPTO 2010, Springer Berlin Heidelberg (2010) 631–648
[25] McGrew, D.: An interface and algorithms for authenticated encryption. RFC 5116, RFC Editor (January 2008) http://www.rfc-editor.org/rfc/rfc5116.txt.
[26] Namprempre, C., Rogaway, P., Shrimpton, T.: Reconsidering generic composition. In: Advances in Cryptology – EUROCRYPT 2014, Springer Berlin Heidelberg (2014) 257–274
[27] Paterson, K.G., AlFardan, N.J.: Plaintext-recovery attacks against datagram TLS. In: 19th Annual Network and Distributed System Security Symposium, NDSS. (2012)
[28] Paterson, K.G., Ristenpart, T., Shrimpton, T.: Tag size does matter: Attacks and proofs for the TLS record protocol. In: Advances in Cryptology – ASIACRYPT 2011, Springer Berlin Heidelberg (2011) 372–389
[29] Patton, C., Shrimpton, T.: Partially specified channels: The TLS 1.3 record layer without elision. In: Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. CCS 18, New York, NY, USA, Association for Computing Machinery (2018) 1415–1428
[30] Rescorla, E.: The transport layer security (TLS) protocol version 1.3. RFC 8446, RFC Editor (August 2018)
[31] Rescorla, E., Tschofenig, H., Modadugu, N.: The Datagram Transport Layer Security (DTLS) Protocol Version 1.3. Internet-Draft draft-ietf-tls-dtls13-22, IETF Secretariat (2017) https://tools.ietf.org/html/draft-ietf-tls-dtls13-22.
[32] Rescorla, E.: The Transport Layer Security (TLS) Protocol version 1.3. Internet-Draft draft-ietf-tls-tls13-23, IETF Secretariat (2018) https://tools.ietf.org/html/draft-ietf-tls-tls13-23.
[33] Rogaway, P., Stegers, T.: Authentication without elision. In: 2009 22nd IEEE Computer Security Foundations Symposium, IEEE (2009) 26–39
[34] Rogaway, P.: Authenticated-encryption with associated-data. In: Proceedings of the 9th ACM Conference on Computer and Communications Security, ACM (2002) 98–107
[35] Smyth, B., Pironti, A.: Truncating TLS connections to violate beliefs in web applications. In: Presented as part of the 7th USENIX Workshop on Offensive Technologies, USENIX (2013)
[36] Vaudenay, S.: Security flaws induced by CBC padding — Applications to SSL, IPSEC, WTLS... In: Advances in Cryptology — EUROCRYPT 2002, Springer Berlin Heidelberg (2002) 534–545
[37] Ylonen, T., Lonvick, C.: The secure shell (SSH) protocol architecture. RFC 4251, RFC Editor (January 2006) http://www.rfc-editor.org/rfc/rfc4251.txt.

### Fully Specified Channels

Conspicuously absent from our treatment in Section 4 is a correctness condition for PSCs. Indeed, it is undesirable to require correctness in our setting, as we want our results to hold even when the SD is realized by the adversary. However, this choice has consequences, as we cannot assume correctness in proofs of security, as is often done in cryptography [8, 20]. In particular, contrary to prior settings, it is not the case that ciphertext-stream integrity implies plaintext-stream integrity for PSCs. We demonstrate this with a counterexample and then show how to restrict the SD to recover the classic result.

**INT-CS \(\not\Rightarrow\) INT-PS for PSCs.** Let \(CH = (Init, Mux, Write, Read, Demux)\) be a PSC. We define from this a new PSC \(CH' = (Init, Mux, Write, Read', Demux')\), where \(Read'\) and \(Demux'\) are given in Figure 12. Whatever SD was associated with PSC \(CH\), we add a new reader specification detail that, on input \(\langle read, output 1 \rangle\), returns a bit \(c\). Under any correct realization of \(CH'\), this bit must be 1. The \(Read'\) algorithm runs \((Y, H, \alpha) \leftarrow Read(O(C, var Re))\) and outputs \((Y, H \parallel c, \alpha)\). Similarly, we add two new demultiplexer SD hooks: first, one that inputs \(\langle demux, frag, M \rangle\), where \(M\) is a string or \(\bot\), and returns a string \(F\); second, one that inputs \(\langle demux, ctx, sc \rangle\), where \(sc\) is a string or \(\bot\), and returns a string \(\phi\). The \(Demux'\) algorithm, on input \((X, H', \alpha, var De)\), parses \(H'\) into \(H\) and the extra bit, and executes \(Demux(O(Y, H, \alpha, var De))\). If the extra bit is 1, then \(Demux'\) returns whatever \(Demux\) did. Otherwise, the output fragment \(M\) is replaced with \(F\) and the stream context \(sc\) gets replaced with \(\phi\).

**INT-PS Attack on \(CH'\).** Consider the following INT-PS attack: choose any string \(C\) and ask it of Recv. On SD request \(\langle read, output 1 \rangle\), the attacker responds with \(\langle 0 \rangle\). On SD request \(\langle demux, frag, M \rangle\) for some \(M \in \{0, 1\}^* \cup \{\bot\}\), if \(M \neq \bot\), then choose any string \(F \not\subseteq M\) and output it; otherwise, choose any string \(F \neq \epsilon\) and output it. On SD request \(\langle demux, ctx, sc \rangle\) for some \(sc \in \{0, 1\}^* \cup \{\bot\}\), if \(sc \neq \bot\), then output \(\phi = sc\); otherwise, choose any string \(\phi\) and output it. Then \(S_\phi = \emptyset\) by definition, and the adversary ensures that \(R_\phi \neq \emptyset\). Clearly \(R_\phi \not\subseteq S_\phi\), and the adversary wins with probability 1.

The attack described exploits the fact that the adversary controls the SD. Note that the adversarial handling of the SD does not result in a correct realization of \(CH'\). This raises the question of whether there is a separation when the PSC is correctly realized.

A partially specified channel is transformed into a fully specified channel (FSC) by instantiating the SD oracle. Given a PSC \(CH\), we define an FSC as a triple \((CH, S, R)\), where \(S(str I, var str Env) \mapsto str O\) and \(R(str I, var str Env) \mapsto str O\) are randomized algorithms that instantiate the SD oracle for the sender \((Mux, Write)\) and receiver \((Read, Demux)\), respectively. We may define correctness for FSCs as follows:

It is easy to show that for every \(A\), there exists \(A'\) such that \(\text{Adv}_{CH}^{\text{int-cs}}(A) = \text{Adv}_{CH}^{\text{int-cs}}(A')\).

### Procedures for Read' and Demux'

```plaintext
Read'(O, C, var Re)
1. declare bool b
2. (Y, H, α) ← Read(O, C, var Re)
3. c ← O(⟨read, output 1⟩)
4. return (Y, H || c, α)

Demux'(O, X, H', α, var De)
5. ℓ ← |H'|
6. H ← H'[1:ℓ-1]
7. c ← H'[ℓ]
8. (M, sc, γ) ← Demux(O, Y, H, α, var De)
9. if c = 1 then return (M, sc, γ)
10. F ← O(⟨demux, frag, M⟩)
11. ϕ ← O(⟨demux, ctx, sc⟩)
12. return (F, ϕ, γ)
```

### Example Code

```plaintext
Gets(M, s, sc) // M, s ∈ {0, 1}*
1. M' ← ε
2. for i ← 1 to |s| do
3.   if si = sc then M' ← M' || Mi
4. return M'

Corr(C', M, s)
5. declare Env[]
6. (Mu, Wr, Re, De) ← Init()
7. C ← Sends(M, s, Mu, Wr)
8. (Y', M', s') ← Recvs(C', Re, De)
9. return (C, Y', M', s')

G(A)
1. declare str Env, R[], S[], T
2. declare bool sync, win[]
3. (Mu, Wr, Re, De) ← Init()
4. sync ← 1
5. ASend,Recv(var Env)
6. return win[1]

Send(M, sc)
```