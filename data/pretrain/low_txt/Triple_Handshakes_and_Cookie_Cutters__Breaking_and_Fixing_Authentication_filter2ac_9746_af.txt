# Attacker Abilities, API Assumptions, and Mitigations

## 1. Introduction
This document outlines various attack vectors on TLS (Transport Layer Security) and related protocols, along with the assumptions made by these systems and potential mitigations.

## 2. Attack Vectors and Broken Mechanisms

### 2.1 Attack Vectors
- **TLS Truncation**: Exploits applications that accept truncated TLS streams.
- **Cookie Cutter**: Manipulates session cookies to hijack sessions.
- **Session Forcing (Server/Network)**: Forces a client to use a specific session.
- **Truncation + Session Forcing**: Combines both truncation and session forcing.
- **TLS Renegotiation (Ray/Rex)**: Exploits vulnerabilities in TLS renegotiation.
- **Triple Handshake (RSA/DHE)**: Uses a triple handshake to bypass security measures.
- **MITM Tunnel Auth (Net/Server)**: Man-in-the-Middle (MITM) attacks on tunnel authentication.
- **MITM Compound Auth**: MITM attacks on compound authentication.
- **MITM Channel Bindings**: MITM attacks on channel bindings.
- **MITM Channel ID**: MITM attacks on channel IDs.

### 2.2 Broken Mechanisms
- **HTTPS Session (Tampered/Hijacked)**: HTTPS sessions that can be tampered with or hijacked.
- **HTTPS Session (Login CSRF)**: Cross-Site Request Forgery (CSRF) attacks on login sessions.
- **TLS Client Auth (Certificate)**: Vulnerabilities in TLS client authentication using certificates.
- **EAP (Certificate, Password)**: Vulnerabilities in EAP (Extensible Authentication Protocol) using certificates and passwords.
- **SASL (SCRAM-Password)**: Vulnerabilities in SASL (Simple Authentication and Security Layer) using SCRAM (Salted Challenge Response Authentication Mechanism).
- **Channel ID (Public-Key)**: Vulnerabilities in channel ID using public keys.

## 3. Precondition Analysis
- **Client connects to untrusted server**: The client establishes a connection with an untrusted server.
- **Active network attacker**: An active attacker is present in the network.
- **Client authenticates on untrusted server**: The client authenticates with the untrusted server.
- **Attacker controls one subdomain on trusted server**: The attacker has control over a subdomain on a trusted server.
- **Application accepts truncated TLS streams**: The application accepts TLS streams that are truncated.
- **Application sends attacker-chosen plaintext in channel**: The application sends plaintext chosen by the attacker in the channel.
- **Client accepts unknown DH groups/degenerate public keys**: The client accepts unknown Diffie-Hellman (DH) groups or degenerate public keys.
- **Client accepts server certificate change during renegotiation**: The client accepts a change in the server certificate during renegotiation.
- **HSTS: Require TLS for all actions on trusted server**: HTTP Strict Transport Security (HSTS) requires TLS for all actions on the trusted server.
- **Require renegotiation indication extension**: The renegotiation indication extension is required.
- **Bind authentication protocol to TLS channel**: The authentication protocol is bound to the TLS channel.

## 4. Impact and Novelty of Attacks
- **Session Forcing (Fifth Row, §III-C)**: This attack has the same impact as previous attacks but bypasses HSTS mitigation.
- **New Attacks on TLS Renegotiation, PEAP, SASL, and Channel ID**: These are server-based man-in-the-middle attacks requiring the client to connect and authenticate with a credential (e.g., X.509 certificate) at an untrusted server. The untrusted server can then impersonate the client at any trusted server that accepts the same credential.
- **Restrictive Precondition**: The precondition that the client be willing to use its credential at an untrusted server is restrictive, more reasonable for public-key certificates than for server-specific tokens like passwords.
- **Insufficient Mitigations**: These attacks show that various channel-binding mechanisms built into these protocols are insufficient.

## 5. Specific Attack Details
- **Triple Handshake Attack on TLS Renegotiation (§VI-A)**: Bypasses the renegotiation indication countermeasure but applies only to servers that authenticate clients with certificates during renegotiation. Such configurations are not widespread but can be found in banks, certificate authorities, and VPN services.
- **Impersonation Attacks**: Apply only to clients that accept a change of server certificates during renegotiation. Experiments show that these and other preconditions are frequently met by popular web browsers and TLS/HTTPS libraries.

## 6. Responsible Disclosure
- **Chromium (Chrome, Android, Opera)**: Header truncation attacks prevented in CVE-2013-2853. Server certificate change during renegotiation prevented in CVE-2013-6628.
- **SChannel (Internet Explorer)**: Degenerate Difﬁe-Hellman public keys and server certificate change during renegotiation both prevented by a security update.
- **NSS (Firefox)**: Degenerate Difﬁe-Hellman public keys prevented in CVE-2014-1491.
- **Channel ID (Chrome)**: Impersonation attack prevented by using only ECDHE ciphersuites; specification revised to use session hashes (§VII-A).
- **Safari**: Notified of header truncation attack on June 13, 2013, and an incorrect renegotiation behavior on January 10, 2014, which was fixed in a later update.
- **Apache**: Notified of POST message truncation in mod_php on April 29, 2013, acknowledged but not fixed.

## 7. Ongoing Efforts
- **Short-term Fixes**: Address some of the attacks but do not address attacks on channel bindings in SASL and compound authentication in PEAP.
- **Systematic Fix**: Strengthening the TLS protocol itself to provide stronger expected authentication properties.
- **Collaboration with TLS Working Group**: Collaborating on two internet drafts that describe the mechanisms proposed in §VII.
- **Revising Channel Binding Specification**: Discussions ongoing to revise the channel binding specification.

## 8. Future Work
- **Formal Evaluation**: The security of the proposed extensions remains to be formally evaluated.
- **Cryptographic Proofs**: Plan to extend cryptographic proofs of miTLS to precisely model these extensions and verify that they provide stronger authentication guarantees for TLS.

## 9. Acknowledgements
- Thanks to Martín Abadi, Bruno Blanchet, Catalin Hritcu, Markulf Kohlweiss, Adam Langley, Marsh Ray, Martin Rex, Matthew Smith, Santiago Zanella-Beguelin, and the anonymous referees for their comments on this work.

## 10. References
[References listed here]

---

This document provides a structured and detailed overview of the attack vectors, broken mechanisms, and mitigations for TLS and related protocols. It also includes the steps taken for responsible disclosure and future work to strengthen the security of these systems.