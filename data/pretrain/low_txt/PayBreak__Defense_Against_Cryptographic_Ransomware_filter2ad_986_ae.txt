### Optimized Text

#### 4. Recovery and Mitigation
If an attack were to go unnoticed, it is important to recognize that ransomware infections are relatively rare. Identifying the correct key and encryption offset can be highly parallelized. Therefore, even with a large key vault (a 1TB vault can hold approximately 17 billion entries), recovery might be delayed but not prevented.

#### 7. Related Work
In 1996, Young and Yung introduced the concept of a cryptovirus [46, 47]. Their description closely resembles today’s most effective crypto-based ransomware families, which use hybrid encryption to extort victims into paying ransoms for data access. The primary difference between their proposed cryptovirus and modern ransomware is that the Internet has made it easy for malware authors to generate unique asymmetric key pairs for each victim and communicate the public key via a command and control channel. In 2005, the same authors presented a proof-of-concept implementation using the Microsoft Cryptographic API [48]. They suggested restricting access to the cryptographic API, allowing only trusted certificates to perform encryption. However, as this call was largely ignored, it is unsurprising that malware authors have exploited cryptography for malicious purposes.

In 2010, Gazet studied three early ransomware families, noting that they were not yet mature enough for mass extortion [29]. In 2015, Kharraz et al. [34] conducted a longitudinal study of 1,359 ransomware samples collected from 2006 to 2014. While four of these families encrypted user data, the majority either deleted files or exfiltrated information. The study also provided I/O characteristics of ransomware, suggesting that these could be used by monitoring mechanisms to distinguish ransomware from benign applications. However, the study did not evaluate such a mechanism.

In follow-up work, Kharraz et al. [33] implemented and evaluated an offline malware analysis system, achieving 96.3% accuracy in detecting ransomware. This system, however, is inherently reactive, as it relies on frequent I/O operations indicating potential ransomware activity. Scaife et al. [18] built upon this mechanism to create an early-warning detection system. They tested their system against 14 ransomware families and detected 100% of them, though detection occurred after a median loss of 10 files. They also tested for false positives against 30 benign applications, with only one producing a false positive. Continella et al. [25] developed ShieldFS, a driver that profiles typical Windows system activity and identifies anomalous I/O, allowing the system to roll back malicious changes. ShieldFS was developed independently and concurrently with PayBreak.

Luo et al. [36] proposed a framework to promote awareness and educate individuals about ransomware threats. While teaching users safe internet practices can reduce the likelihood of infection through spam and drive-by downloads, it does not eliminate the threat. Modern ransomware, such as the SamSam family, has worm capabilities to self-propagate and infect vulnerable machines, making education insufficient in the case of zero-day vulnerabilities.

Previous research has explored methods to identify cryptographic functions within binaries. Calvet et al. [24] developed a technique for obfuscated programs, evaluating it on known malware samples. Although their technique could be valuable for identifying ransomware's encryption functions, its poor performance makes it impractical for real-time defense. Additionally, Caballero et al. [22] and Wang et al. [45] developed approaches to obtain plaintext from encrypted communications.

Among the previously discussed work, PayBreak is the only solution providing online protection against ransomware, enabling full recovery of ransomed files. Its negligible performance overhead makes it a practical solution.

#### 8. Conclusion
PayBreak is a novel protection mechanism designed to counter the threat of crypto-based ransomware. Early ransomware families failed due to incorrect use of cryptographic functionality, while successful families adopted hybrid encryption. We identified that symmetric session keys must be used on the victim's host for file encryption. Thus, PayBreak implements a key escrow mechanism that stores session keys in a key vault. These keys are encrypted with the user's public key, ensuring that only the user's private key can unlock the vault. Unlike government-mandated key escrow systems, PayBreak ensures that only the legitimate user can access the stored keys.

We evaluated PayBreak on 107 ransomware samples and demonstrated that it can successfully recover from damage caused by twelve different ransomware families. Furthermore, the runtime overhead of PayBreak is below the human perception threshold, making it suitable for production systems. Finally, PayBreak will be released as a publicly available open-source project.

#### Acknowledgements
We would like to thank the anonymous reviewers for their insightful comments and our shepherd Guofei Gu for helping us improve the quality of this manuscript. This paper was supported by an EPSRC-funded Future Leaders in Engineering and Physical Sciences Award, by the EPSRC under grant EP/N008448/1, and by the Office of Naval Research under grant N00014-15-1-2948. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect those of the sponsor.

#### 9. References
[1] Alma ransomware: Analysis of a new ransomware threat (and a decrypter!).
https://info:phishlabs:com/blog/alma-ransomware-analysis-of-a-new-ransomware-threat-and-a-decrypter.
[2] Cryptowall, teslacrypt and locky: A statistical perspective.
http://blog:fortinet:com/post/cryptowall-teslacrypt-and-locky-a-statistical-perspective.
[3] Cybercriminals rake in $325m from cryptowall ransomware: report.
http://www:washingtontimes:com/news/2015/nov/2/cybercriminals-rake-in-325m-cryptowall-ransomware/.
[4] Downloading and using the trend micro ransomware file decryptor.
https://success:trendmicro:com/solution/1114221.
[5] Dxxd ransomware decrypter.
https://github:com/eugenekolo/dxxd-decrypter.
[6] FBI suggests ransomware victims to pay ransom money.
http://thehackernews:com/2015/10/fbi-ransomware-malware:html.
[7] IDA F.L.I.R.T.
https://hex-rays:com/products/ida/tech/(cid:13)irt/.
[8] Kaspersky announces 'death' of coinvault, bitcryptor ransomware.
http://www:theregister:co:uk/2015/11/02/kaspersky-announces-death-of-coinvault-bitcryptor-ransomware/.
[9] Pokemongo ransomware comes with some clever tricks.
https://blog:malwarebytes:com/threat-analysis/2016/08/pokemongo-ransomware-comes-with-some-clever-tricks/.
[10] Ransomware.
http://www:trendmicro:com/vinfo/us/security/definition/ransomware#List-of-Known-Ransomware-Families.
[11] Remove PI:EMAIL ransomware.
http://www:virusresearch:org/remove-gerkamanaol-com-ransomware/.
[12] Researchers break encryption of marsjoke ransomware.
http://www:securityweek:com/researchers-break-encryption-marsjoke-ransomware.
[13] The story of yet another ransom-fail-ware.
http://esec-lab:sogeti:com/posts/2016/06/07/the-story-of-yet-another-ransomfailware:html.
[14] Themida.
http://www:oreans:com/themida:php.
[15] This weird ransomware strain spreads like a virus in the cloud.
https://blog:knowbe4:com/new-virlock-ransomware-strain-spreads-stealthily-via-cloud-storage.
[16] Threat spotlight: Teslacrypt - decrypt it yourself.
http://blogs:cisco:com/security/talos/teslacrypt.
[17] Zynamics bindiff.
https://www:zynamics:com/bindiﬀ:html.
[18] Cryptolock (and drop it): Stopping ransomware attacks on user data. In IEEE 36th International Conference on Distributed Computing Systems, 2016.
[19] J. Berdajs and Z. Bosnić. Extending applications using an advanced approach to DLL injection and API hooking. Volume 40, pages 567-584. John Wiley & Sons, Ltd.
[20] M. Bourquin, A. King, and E. Robbins. Binslayer: Accurate comparison of binary executables. In Proceedings of the 2nd ACM SIGPLAN Program Protection and Reverse Engineering Workshop, PPREW '13.
[21] J. Caballero, C. Grier, C. Kreibich, and V. Paxson. Measuring pay-per-install: The commoditization of malware distribution. In Usenix security symposium, 2011.
[22] J. Caballero, P. Poosankam, C. Kreibich, and D. Song. Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering. In ACM conference on Computer and Communications Security (CCS), 2009.
[23] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer. RFC2440: OpenPGP Message Format, 1998.
[24] J. Calvet, J. M. Fernandez, and J.-Y. Marion. Aligot: Cryptographic function identification in obfuscated binary programs. In Proceedings of the 2012 ACM conference on Computer and Communications Security. ACM, 2012.
[25] A. Continella, A. Guagnelli, G. Zingaro, G. De Pasquale, A. Barenghi, S. Zanero, and F. Maggi. ShieldFS: A self-healing, ransomware-aware filesystem. In Annual Computer Security Applications Conference (ACSAC), 2016.
[26] Darren Pauli. Cryptowall 4.0: Update makes world’s worst ransomware worse still - The Register.
http://www:theregister:co:uk/2015/11/09/cryptowall-40/.
[27] M. Egele, M. Woo, P. Chapman, and D. Brumley. Blanket execution: Dynamic similarity testing for program binaries and components. In 23rd USENIX Security Symposium (USENIX Security 14), 2014.
[28] S. Garfinkel, P. Farrell, V. Roussev, and G. Dinolt. Bringing science to digital forensics with standardized forensic corpora, 2009.
[29] A. Gazet. Comparative analysis of various ransomware viruses. Computer virology.
[30] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis, et al. Manufacturing compromise: The emergence of exploit-as-a-service. In ACM conference on Computer and Communications Security (CCS), 2012.
[31] F. Gröbert, C. Willems, and T. Holz. Automated identification of cryptographic primitives in binary programs. In RAID, volume 6961, pages 41-60, 2011.
[32] High-Tech Bridge Security Research. RansomWeb: Emerging website threat that may outshine DDoS, data theft, and defacements?
https://www:htbridge:com/blog/ransomweb-emerging-website-threat:html.
[33] A. Kharraz, S. Arshad, C. Mulliner, W. Robertson, and E. Kirda. Unveil: A large-scale, automated approach to detecting ransomware. In 25th USENIX Security Symposium (USENIX Security 16), Austin, TX, Aug. 2016. USENIX Association.
[34] A. Kharraz, W. Robertson, D. Balzarotti, L. Bilge, and E. Kirda. Cutting the Gordian Knot: A Look Under the Hood of Ransomware Attacks. In Proceedings of the International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), volume 9148 of Lecture Notes in Computer Science, Milan, Italy, July 2015. Springer International Publishing.
[35] P. Lestringant, F. Guihéry, and P.-A. Fouque. Automated identification of cryptographic primitives in binary code with data flow graph isomorphism. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, ASIA CCS '15, 2015.
[36] X. Luo and Q. Liao. Awareness education as the key to ransomware prevention. Information Systems Security, 2007.
[37] R. B. Miller. Response time in man-computer conversational transactions. In Proceedings of the December 9-11, 1968, fall joint computer conference, part I, pages 267-277. ACM, 1968.
[38] D. Nazarov and O. Emelyanova. Blackmailer: The story of gpcode.
https://securelist:com/analysis/publications/36089/blackmailer-the-story-of-gpcode/.
[39] B. Ramsdell. RFC3851: Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1 Message Specification, 2004.
[40] G. Saito and G. Stringhini. Master of puppets: Analyzing and attacking a botnet for fun and profit. arXiv preprint arXiv:1511.06090, 2015.
[41] K. Savage, P. Coogan, and H. Lau. The evolution of ransomware.
http://www:symantec:com/content/en/us/enterprise/media/security-response/whitepapers/the-evolution-of-ransomware:pdf.
[42] B. Schneier. Memo to the Amateur Cipher Designer.
[43] M. I. Sharif, A. Lanzi, J. T. Griffin, and W. Lee. Impeding malware analysis using conditional code obfuscation. In Proceedings of Network and Distributed Systems Security Symposium (NDSS), San Diego, CA, Feb. 2008. Internet Society. bibtex:sharif:conditional-code-obfuscation.
[44] L. Sun. Reform: A framework for malware packer analysis using information theory and statistical methods, 2010.
[45] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace. Reformat: Automatic reverse engineering of encrypted messages. In Computer Security-ESORICS 2009, pages 200-215. Springer, 2009.
[46] A. Young and M. Yung. Cryptovirology: Extortion-based security threats and countermeasures. In IEEE Symposium on Security and Privacy, Oakland, CA, May 1996.
[47] A. Young and M. Yung. Malicious cryptography: Exposing cryptovirology. John Wiley & Sons, 2004.
[48] A. L. Young and M. M. Yung. An implementation of cryptoviral extortion using Microsoft’s Crypto API. 2005.

#### Appendix A: Ransomware Pseudocode
```python
c2 = ConnectToCommandAndControl()
# Private key kept secret on C2
pubkey = c2.ReceivePubKey()
hPubkey = CryptImport(pubkey)
hCsp = CryptAcquireContext()

while (filename = FindNextFile()):
    # Read
    ptFile = ReadFile(filename)
    # Generate random session key per file
    hSymkey = CryptGenKey(hCsp)
    # Then encrypt
    ctFile = CryptEncrypt(hSymkey, ptFile)
    keyblob = CryptExportKey(hPubkey, hSymkey)
    DeleteFile(filename)
    # Write encrypted session key
    WriteFile(filename, keyblob)
    # Append the encrypted file
    AppendFile(filename, ctFile)
```

This optimized text aims to enhance clarity, coherence, and professionalism while maintaining the original content and structure.