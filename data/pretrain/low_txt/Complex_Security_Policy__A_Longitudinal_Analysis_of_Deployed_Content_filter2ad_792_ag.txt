### Content Security Policy (CSP) and Its Evolution

Content Security Policy (CSP) has evolved to become a mechanism that is frequently used not only for enforcing Transport Layer Security (TLS) connections but also for controlling framing. Our longitudinal analysis has documented the challenges developers face when constructing a secure and functional policy for content restriction. Even when CSPs are implemented securely, they are often bypassed due to typos and expired domains. Additionally, the lack of adoption of new features such as `strict-dynamic` suggests that the script-restricting parts of CSP may not be effective in the future.

Despite its increasing deployment for TLS enforcement and framing control, the overall adoption rate of CSP remains unsatisfactory. Our survey indicates that CSP has developed a negative reputation due to its complexity in content restriction, causing developers to avoid using it. Although alternative use cases for CSP, such as TLS enforcement and framing control, are easier to deploy, this negative reputation hinders CSP's ability to improve web security unless counteracted by tools, browser vendors, and informational materials.

### Acknowledgements

We thank the reviewers for their valuable feedback. This work was supported by the Office of Naval Research (ONR) under grant N00014-17-1-2541 and the National Science Foundation (NSF) under grants CNS-1617593 and CNS-1813974.

### References

1. **Prevent nonce stealing by looking for "<script" in attributes of nonced scripts**  
   - [GitHub Issue](https://github.com/w3c/webappsec-csp/issues/98)

2. **Dataset used in our analysis**  
   - [Pastebin Link](https://pastebin.com/NbFxNmc1)

3. **Google Analytics Legacy Documentation**  
   - [Documentation](https://developers.google.com/analytics/devguides/collection/gajs)

4. **Nginx CSP Example by Ambroise Maupate**  
   - [GitHub Gist](https://gist.github.com/ambroisemaupate/bce4b760405558f358ae), 2019

5. **Using security-related headers to secure your application against common attacks by Bruno Scheufler**  
   - [Article](https://tinyurl.com/y68c4lpp), 2019

6. **S. Calzavara, A. Rabitti, and M. Bugliesi, "Content security problems? evaluating the effectiveness of content security policy in the wild," in CCS, 2016.**

7. **S. Calzavara, A. Rabitti, and M. Bugliesi, "CCSP: controlled relaxation of content security policies by runtime policy composition," in USENIX Security, 2017.**

8. **S. Calzavara, A. Rabitti, and M. Bugliesi, "Semantics-based analysis of content security policy deployment," TWEB, 2018.**

9. **Can I Use..., "Content Security Policy 1.0,"**  
   - [Link](https://caniuse.com/#feat=contentsecuritypolicy), 2019

10. **Common Crawl, "So you are ready to get started,"**  
    - [Link](http://commoncrawl.org/the-data/get-started/), 2019

11. **E. Derr, S. Bugiel, S. Fahl, Y. Acar, and M. Backes, "Keep me updated: An empirical study of third-party library updatability on android," in CCS, 2017.**

12. **A. Doupe, W. Cui, M. H. Jakubowski, M. Peinado, C. Kruegel, and G. Vigna, "dedacota: toward preventing server-side xss via automatic code and data separation," in CCS, 2013.**

13. **Experiments with Google, "Content Security Policy,"**  
    - [Link](https://csp.withgoogle.com/docs/strict-csp.html), 2019

14. **GitHub Blog, "GitHub CSP Blog Post,"**  
    - [Blog Post](https://blog.github.com/2013-04-19-content-security-policy/), 2013

15. **D. Hausknecht, J. Magazinius, and A. Sabelfeld, "May I? - content security policy endorsement for browser extensions," in DIMVA, 2015.**

16. **J. Hodges, C. Jackson, and A. Barth, "RFC6797: HTTP Strict Transport Security (HSTS),"**  
    - [RFC](https://tools.ietf.org/html/rfc6797), 2012

17. **Internet Archive, "About the Internet Archive,"**  
    - [Link](https://archive.org), 2019

18. **E. Lawrence, "This page frames a victim page in myriad ways,"**  
    - [Link](http://www.enhanceie.com/test/clickjack), 2019

19. **S. Lekies, K. Kotowicz, S. GroÃŸ, E. A. V. Nava, and M. Johns, "Code-reuse attacks for the web: Breaking cross-site scripting mitigations via script gadgets," in CCS, 2017.**

20. **A. Lerner, T. Kohno, and F. Roesner, "Rewriting history: Changing the archived web from the present," in CCS, 2017.**

21. **A. Lerner, A. K. Simpson, T. Kohno, and F. Roesner, "Internet Jones and the raiders of the lost trackers: An archaeological study of web tracking from 1996 to 2016," in USENIX Security, 2016.**

22. **M. Luo, P. Laperdrix, N. Honarmand, and N. Nikiforakis, "Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers," in NDSS, 2019.**

23. **MDN, "Data URIs,"**  
    - [Link](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs), 2019

24. **MDN, "Content Security Policy (CSP),"**  
    - [Link](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), 2019

25. **MDN, "SecurityPolicyViolationEvent,"**  
    - [Link](https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent), 2019

26. **MDN, "X-Frame-Options,"**  
    - [Link](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options), 2019

27. **Microsoft, "CSP Level 3 strict-dynamic source expression,"**  
    - [Link](https://tinyurl.com/y3d6ljjk), 2019

28. **N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna, "You are what you include: large-scale evaluation of remote JavaScript inclusions," in CCS, 2012.**

29. **OWASP, "HTTP Strict Transport Security Cheat Sheet,"**  
    - [Link](https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet), 2018

30. **OWASP, "Clickjacking Defense Cheat Sheet,"**  
    - [Link](https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet), 2017

31. **A. Paicu, "CSP 'navigate-to' directive,"**  
    - [Chromestatus](https://www.chromestatus.com/feature/6457580339593216), 2018

32. **A. Paicu, "CSP: 'script-src-attr', 'style-src-attr', 'script-src-elem', 'style-src-elem' directives,"**  
    - [Chromestatus](https://www.chromestatus.com/features/5141352765456384), 2018

33. **A. Paicu, "CSP3: unsafe-hashed-attributes,"**  
    - [Chromestatus](https://www.chromestatus.com/features/5867082285580288), 2017

34. **X. Pan, Y. Cao, S. Liu, Y. Zhou, Y. Chen, and T. Zhou, "Cspautogen: Black-box enforcement of content security policy upon real-world websites," in CCS, 2016.**

35. **A. Porter Felt, R. Barnes, A. King, C. Palmer, C. Bentzel, and P. Tabriz, "Measuring HTTPS adoption on the web," in USENIX Security, 2017.**

36. **D. Ross and T. Gondrom, "RFC7034: HTTP Header Field X-Frame-Options,"**  
    - [RFC](https://tools.ietf.org/html/rfc7034), 2013

37. **Q. Scheitle, O. Hohlfeld, J. Gamba, J. Jelten, T. Zimmermann, S. D. Strowes, and N. Vallina-Rodriguez, "A long way to the top: Significance, structure, and stability of internet top lists," in IMC, 2018.**

38. **Scott Helme, "Security Headers,"**  
    - [Link](https://securityheaders.com), 2019

39. **D. F. Some, N. Bielova, and T. Rezk, "On the content security policy violations due to the same-origin policy," in WWW, 2017.**

40. **S. Stamm, B. Sterne, and G. Markham, "Reining in the web with content security policy," in WWW, 2010.**

41. **B. Stock, M. Johns, M. Steffens, and M. Backes, "How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security," in USENIX Security, 2017.**

42. **B. Stock, G. Pellegrino, F. Li, M. Backes, and C. Rossow, "Didn't You Hear Me? - Towards More Successful Web Vulnerability Notifications," in NDSS, 2018.**

43. **P. Toomey, "GitHub's CSP Journey,"**  
    - [Blog Post](https://githubengineering.com/githubs-csp-journey/), 2016

44. **S. Van Acker, D. Hausknecht, and A. Sabelfeld, "Data exfiltration in the face of CSP," in AsiaCCS, 2016.**

45. **T. Van Goethem, P. Chen, N. Nikiforakis, L. Desmet, and W. Joosen, "Large-scale security analysis of the web: Challenges and findings," in TRUST, 2014.**

46. **W3C Working Group, "Content Security Policy (Level 2),"**  
    - [Link](https://www.w3.org/TR/CSP2/), 2016

47. **W3C Working Group, "Content Security Policy (Level 3),"**  
    - [Link](https://www.w3.org/TR/CSP3/), 2018

48. **Y.-M. Wang, D. Beck, J. Wang, C. Verbowski, and B. Daniels, "Strider typo-patrol: Discovery and analysis of systematic typo-squatting," SRUTI, 2006.**

49. **L. Weichselbaum and M. Spagnuolo, "CSP - A Successful Mess Between Hardening and Mitigation,"**  
    - [Link](https://tinyurl.com/yyohn6o6)

50. **L. Weichselbaum, M. Spagnuolo, S. Lekies, and A. Janc, "CSP is dead, long live csp! on the insecurity of whitelists and the future of content security policy," in CCS, 2016.**

51. **M. Weissbacher, T. Lauinger, and W. K. Robertson, "Why is CSP failing? trends and challenges in CSP adoption," in RAID, 2014.**

52. **M. West, "Upgrade insecure requests,"**  
    - [Chromestatus](https://www.chromestatus.com/feature/6534575509471232), 2018

53. **M. West, "Mixed content,"**  
    - [Link](https://www.w3.org/TR/mixed-content/), 2016

54. **WICG, "Explainer: Trusted Types for DOM Manipulation,"**  
    - [GitHub](https://github.com/WICG/trusted-types#limiting-policies), 2018

### Appendix

#### A. Email Notification Template

**Subject: Enhancing Web Security with Content Security Policy (CSP)**

Dear $domain team,

We are a team of academic researchers from $institutions investigating the usage of security headers on the Web. As part of our analysis, we are examining the use of the X-Frame-Options (XFO) header to control framing on the Web.

Based on our analysis, your site is attempting to control framing with the following XFO directive: `SAMEORIGIN`. We noticed that this directive potentially allows for double-framing attacks with certain browsers, such as Internet Explorer (see [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options#Browser_compatibility)).

The currently proposed way to ensure that all modern browsers properly protect against framing attacks is to use the Content Security Policy (CSP) directive `frame-ancestors`. For your value of XFO, the corresponding CSP is: `frame-ancestors 'self'`.

To protect older browsers, keeping XFO in place is recommended. Since CSP takes precedence over XFO, securing legacy clients without interfering with modern browsers is possible through the usage of the `DENY` directive in XFO.

For more information on CSPâ€™s `frame-ancestors`, please see [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors).

As this email is part of a research project aimed at understanding the lack of adoption of CSP in the wild, it would be immensely helpful if you could provide us with feedback regarding the lack of CSPâ€™s `frame-ancestors` to protect against framing attacks on your website (e.g., were you not aware of the CSP mechanism, that specific CSP directive, or were there other reasons for not adopting it?).

Please note that this email is part of an academic research project and not intended to sell any products or services.

Best regards,  
$researchers

#### B. Quotes from Responses

1. **Complexity of CSP:**
   - "Reading the experience of people who tried to do a full CSP implementation is just scary."
   - "In previous discussions about CSP, weâ€™ve been worried that the risk of accidentally breaking some interaction we have with other [sitename] systems (or the few third-party tools we integrate with) outweighs the benefit of implementing these sorts of changes."
   - "We are pretty certain that there are a lot of pitfalls with the implementation of these headers, which might break sections or uses of our site."

2. **XFO Dangers:**
   - "We were vaguely aware of the `frame-ancestors` option, but our understanding was that XFO was sufficient for securing all clients."
   - "While we were aware of CSP itself, we were unaware of the fact that X-Frame-Options allows for attacks under certain conditions, which can be mitigated by using the `frame-ancestors` directive of CSP."

3. **frame-ancestors:**
   - "In my opinion, the only advantage of CSP is to protect against XSS [...]."
   - "As we were not that aware of CSP framing control, we were also not aware of its implementation (no side effects)."

#### C. Survey Questionnaire

1. **Did you know about the inconsistent understanding of browsers of the XFO header before our notification (such as the lack of support for `ALLOW-FROM` in Chrome and Safari as well as the potential threat of double-framing in Edge/IE)?**
   - Yes
   - No

2. **Why have you implemented the XFO header on your site?**
   - Penetration test or consultant suggested it
   - Tools we used suggested it
   - Own decision to restrict framing
   - Other (free text)

3. **Did you know about CSP before our notification?**
   - Yes
   - No

4. **(only if Q3 was yes) Would your site work out of the box if you deployed a script-content restricting CSP today (disallow `eval`, inline scripts, and event handlers)?**
   - Yes
   - No
   - Donâ€™t know

5. **(only if Q3 was yes) Do you believe CSP is a viable option to improve your siteâ€™s resilience against XSS attacks?**
   - Yes
   - No
   - Donâ€™t know

6. **(only if Q5 was no) Why do you think CSP is not viable for your site?**
   - Free text

7. **(only if Q3 was yes) Did you know about the `frame-ancestors` directive of CSP and its improved protection capabilities compared to XFO before our notification?**
   - Yes
   - No

8. **(only if Q7 was yes) Did you know that `frame-ancestors` can be deployed independently of any other part of CSP before our notification?**
   - Yes
   - No

9. **(only if Q3 was yes) Did you know that CSP can be used (in isolation) to ensure no HTTP resources can accidentally be loaded (through `block-all-mixed-content`) and to enforce TLS for all resources (through `upgrade-insecure-requests`)?**
   - Yes
   - No

10. **Do you ever use the developer tools to debug or analyze your site?**
    - Yes
    - No

11. **What kind of tool support would be useful to you to secure your application?**
    - Free text