### Agent Security and Attribute Certificates

In addition to signing the JAR, the agent's code can be protected by a certificate’s message digest. This provides similar security benefits. One key advantage of using attribute certificates is that their expiration dates can be set much shorter than the validity period of the signing key. This effectively limits the authorization lifetime to an appropriate duration.

The "extensions" portion of an attribute certificate can contain additional useful information. For instance, it can include a constraint indicator to determine whether the entity issuing the certificate is a terminal policy-setting principal or an intermediate one capable of reassigning privileges for a designated number of descendants. It can also specify a renewal service location, indicating where an expiring attribute certificate can be extended, and for what duration and number of times. When an attribute certificate is issued to an instance of an agent, the "extensions" section is used to convey values of immutable instance variables, which are protected from tampering via the certificate’s signature. Notably, the globally unique identifier of an agent must be treated in this manner.

### Policy Engine

Beyond verifying prevailing policy certificates and their binding to associated policy files, the agent platform must be extended to invoke attribute certificate processing when an agent arrives. The policy engine, consisting of two new object classes, is responsible for performing the necessary computations and determining the allowable privileges for the agent’s code. These privileges are an authorized set of Java permissions, representing the amalgamation of policy rules within the attribute and policy certificates. Null privileges imply that no processing is permitted (i.e., no permissions granted).

The policy engine classes can be located and loaded as trusted components at initialization time through an entry in either the standard Java security properties file or the properties file of the agent system. Since the inner and outer parts of the policy engine are Java object classes, their instantiation is straightforward. This allows for the support of multiple policy engines on a single platform if needed for different contexts. An optional but critical extension, the policy identifier, is defined within the "extensions" element of all privilege management certificates specifically for matching certificates to a policy engine.

The outer policy engine supports a single method to verify relevant attribute certificates and return the allowable set of privileges. As previously explained, the outer policy engine invokes the inner engine once all certificates are evaluated and ordered. The replacement policy class keeps all standard Java policy mechanisms intact, allowing the policy engine to rely on them during processing. For example, when the policy engine needs to determine the baseline permissions assigned to a particular protection domain, it can use the standard Java API to query the currently installed Java policy object. Similarly, through an existing API, it can check whether a permission asserted in an attribute certificate aligns with those baseline permissions. For a grant-style policy mechanism, the policy engine computation essentially becomes the logical union of the baseline permissions with any permissions conveyed in the attribute certificates, subject to the precedence of policy-setting principals who issued the certificates and any privilege adjustment constraints imposed by the prevailing platform policy.

While the policy engine determines allowable privileges, it does not enforce them. Enforcement is the responsibility of the program component of the agent platform that also handles code migration and other administrative functions. This component must be augmented to restrain the agent’s code by asserting the implied security permissions within a protection domain using features of the Java security class loader.

### Related Work

Standardization bodies such as the IETF [9] have been working to complement the original X.509 identity-based certificate standards with frameworks for privilege management. These frameworks generally follow X.509 principles, where a trusted party, called an authorization authority, issues attribute certificates to human or machine entities. These entities can then delegate that authorization. The framework includes definitions of the information objects needed for the infrastructure, including attribute certificates, privilege policy formats, and attribute certificate revocation lists. Additionally, work is being done within the IETF to establish an interoperability profile of these standards, intended for generic applications such as electronic mail involved in client-server transactions.

The Anchor Toolkit is a mobile agent system that provides secure transmission and management of mobile agents [10]. The toolkit protects agents being dispatched between hosts through encrypted channels. A mobile agent’s host platform is required to sign the agent's persistent state before dispatching it to the next platform. The signed persistent state can later be used to detect potential problems with the agent's state. The toolkit uses another security tool, Akenti, developed by the authors to provide access control to the resources of a mobile agent’s host platform. Akenti uses public/private key-signed certificates to express user identity, resource use-conditions, and user attributes. Use-conditions express platform policy, while user attributes typically represent a single privilege granted to the mobile code by some authority. Akenti makes access control decisions for each trusted agent and allows execution only after authenticating the agents, the server that dispatched the agent, and all the hosts the agent visited. This scheme relies on a level of trust between mobile agent platforms to make access control decisions and mitigate the risk associated with accepting mobile agents.

SESAME is a multi-domain distributed-system security architecture built around the use of authentication and privilege certificates [11]. Both users and applications are controlled in the same way when accessing protected resources—they must first obtain proof of their privileges in the form of a Privilege Attribute Certificate (PAC) and then present it to a target application when requesting resource access. The target application may in turn access another target using SESAME. Access control information is represented generically to facilitate mapping to different types of access controls on targeted resources. PAC revocation is avoided by relying on short delegation periods. While SESAME focuses on static client-server type applications, it provides a good example of the underlying framework needed when applying certificate-based solutions for distributed-system security.

Nikander and Partanen [12] describe a method for enhancing the Java language environment with policy expression and processing via Simple Public Key Infrastructure (SPKI) certificates. SPKI certificates are a proposed alternative to X.509 certificates, emphasizing key rather than individual identities. The motivation for the enhancement was to distribute Java security policy management fully without affecting the local configuration. They accomplished this by assigning permissions to class files bundled within a JAR file, using SPKI certificates in a manner similar to our use of attribute certificates. However, their method does not include a counterpart to policy certificates. The approach essentially goes from a platform-centric policy specification to a code-centric policy specification, relying completely on the contents of validated certificate chains to determine the permissions for a protection domain of a given class. Like SESAME, the focus here is on client-server type applications, but the method’s flexibility and grounding in Java could be extended for use in Java-based agent systems.

State Appraisal defines a security mechanism for the protection of mobile agents. The goal is to ensure that an agent has not been subverted due to alterations of its state information [13]. Both the author and owner of an agent produce appraisal functions that become part of the agent's code. These functions are used to determine what privileges to grant to an agent based on conditional factors and whether the identified state invariants hold. An agent whose state violates an invariant can be granted no privileges, while an agent whose state fails to meet some conditional factors may be granted a restricted set of privileges. When the author and owner each digitally sign an agent, their respective appraisal functions are protected from undetectable modification. In this context, state appraisal conveys both the prescribed policy internal to the agent and the state invariants. An agent platform uses these functions to verify the correct state of an incoming agent and determine the privileges the agent can possess during execution. Privileges are issued by the platform based on the results of the appraisal function and the platform's security policy.

### Summary

Attribute certificates are a convenient way to express the privileges associated with a mobile agent, in accordance with the principle of least privilege. They also provide a flexible alternative to using fixed, predefined policy structures commonly found in most agent systems. When combined with policy certificates for the agent platform and the ability to extend the agent platform with a policy engine, they collectively form a useful framework that is tailorable to meet the security policy of an application. The degree of tailorability includes the ability to define various policy-setting principals, precedence relationships among the policies set by those principals, application-specific attributes, and policy processing algorithms.

### References

[1] Wayne Jansen, “Countermeasures for Mobile Agent Security,” Computer Communications, 23 (2000), Elsevier, October 2000, pp. 1667-1676.
[9] Stephen Farrell, Russel Housley, “An Internet Attribute Certificate Profile for Authorization,” Internet Engineering Task Force (IETF) Internet Draft, June 2001.
[10] Srilekha Mudumbai, Abdeliah Essiari, William Johnston, “Anchor Toolkit: A Secure Mobile Agent System,” Proceedings of Mobile Agents '99 Conference, October 1999.
[11] Paul Ashley, “Authorization for a Large Heterogeneous Multi-Domain System,” Proceedings of the Australian Unix and Open Systems Group National Conference, 1997, pp. 159-169.
[12] Pekka Niklander, Jonna Partanen, “Distributed Policy Management for JDK 1.2,” Proceedings of the 1999 Network and Distributed Systems Security Symposium, February 1999, pp. 91-102.
[13] William Farmer, Joshua Guttman, Vipin Swarup, “Security for Mobile Agents: Authentication and State Appraisal,” Proceedings of the Fourth European Symposium on Research in Computer Security (ESORICS '96), September 1996, pp. 118-130.
[2] ITU-T Recommendation X.509 | ISO/IEC 9594-8: Information Technology - Open Systems Interconnection - The Directory: Public Key and Attribute Certificate Frameworks, March 2000.
[3] Rajesh Raman, Miron Livny, Marvin Solomon, “Matchmaking: Distributed Resource Management for High Throughput Computing,” Proceedings of the Seventh IEEE International Symposium on High Performance Distributed Computing, July 1998.
[4] Thomas Koch, Christoph Krell, Bernd Krämer, “Policy Definition Language for Automated Management of Distributed Systems,” Proceedings of the Second International Workshop on Systems Management, IEEE Computer Society, June 1996.
[5] Matthew Condell, Charles Lynn, John Zao, “Security Policy Specification Language,” Internet Engineering Task Force (IETF) Internet Draft, March 10, 2000.
[6] Günter Karjoth, Danny B. Lange, and Mitsuru Oshima, “A Security Model for Aglets,” IEEE Internet Computing, pp. 68-77, August 1997.
[7] Niranjan Suri et al., “NOMADS: Toward a Strong and Safe Mobile Agent System,” Proceedings of the Fourth International Conference on Autonomous Agents (Agents 2000), June 3-7, 2000.
[8] American Bankers Association, Enhanced Management Controls Using Digital Signatures and Attribute Certificates, ANS X9.45-1999, American National Standards Institute (ANSI) X9 Committee, February 11, 1999.