### Tool Capabilities and Comparisons

The tool in question is capable of detecting integer overflows and underflows, similar to another tool, O. The key difference is that O operates at the bytecode level, while Z operates at the source code level. However, source code is not always available. Additionally, Z requires users to write policies to assert the security of smart contracts, which can be a non-trivial task.

Mueller et al. introduce M [23], a security analysis tool for Ethereum smart contracts. M uses concolic analysis, taint analysis, and control flow checking to detect a variety of security vulnerabilities. M's approach is similar to O, but with some differences:
- O employs a more precise and complete taint propagation logic, allowing users to define their own sources and sinks.
- M treats every integer as a 256-bit integer, which means it may not detect an overflow if two 32-bit integers are being added. In contrast, O infers the width of every integer to accurately determine if an arithmetic operation can cause an overflow or underflow.
- At the time of writing, M has difficulty distinguishing between benign and malignant overflows and underflows [22], whereas O effectively differentiates between them.
- Both Z and M fail to check for truncation bugs and signedness bugs, which O does detect.

### Conclusion and Future Work

Integer bugs are currently listed as one of the top three vulnerabilities in smart contracts [13]. We present the design and implementation of O, a framework for detecting integer bugs in Ethereum smart contracts. O leverages symbolic execution and taint analysis. Our comparison with Z shows that Z is not sound; O finds five contracts to be unsafe, while Z reports them as safe. Furthermore, O reports fewer false positives than Z. Our evaluation on over 1.2 million Ethereum smart contracts indicates that approximately 4% of them might be vulnerable to at least one of the three integer bugs presented in this paper. Using O, we discovered a previously unknown vulnerability in a few Ethereum tokens.

In future work, we plan to extend O’s taint analysis to track taint across multiple contracts (inter-contract analysis) and across different method invocations (trace analysis). Additionally, we aim to switch to concolic execution using concrete values from the blockchain to validate and generate direct exploits, potentially making O’s detection mechanism even more precise. Finally, we intend to augment our evaluation of the security of Ethereum tokens. Etherscan lists over 90,000 ERC-20-based token smart contracts on the Ethereum blockchain, so our current analysis, which includes only 495 of them, represents just the tip of the iceberg.

### Acknowledgments

We would like to thank the anonymous reviewers for their valuable comments. The experiments presented in this paper were carried out using the HPC facilities of the University of Luxembourg [34] – see https://hpc.uni.lu.

### References

[1] Sidney Amani, Myriam Bégel, Maksym Bortin, and Mark Staples. 2018. Towards Verifying Ethereum Smart Contract Bytecode in Isabelle/HOL. CPP. ACM. To appear (2018).

[2] Karthikeyan Bhargavan, Nikhil Swamy, Santiago Zanella-Béguelin, Antoine Delignat-Lavaud, Cédric Fournet, Anitha Gollamudi, Georges Gonthier, Nadim Kobeissi, Natalia Kulatova, Aseem Rastogi, and Thomas Sibut-Pinote. 2016. Formal Verification of Smart Contracts. In Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security - PLAS’16. ACM Press, New York, New York, USA, 91–96. https://doi.org/10.1145/2993600.2993611

[3] Ping Chen, Hao Han, Yi Wang, Xiaobin Shen, Xinchun Yin, Bing Mao, and Li Xie. 2009. IntFinder: Automatically detecting integer bugs in x86 binary program. In International Conference on Information and Communications Security. Springer, 336–345.

[4] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver. In International conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 337–340.

[5] Etherscan.io. 2018. BeautyChainToken. Retrieved June 7, 2018 from https://etherscan.io/address/0xc5d105e63711398af9bb092d4b6769c82f793d#code

[6] Etherscan.io. 2018. Ethereum Contracts with Verified Source Codes. Retrieved June 8, 2018 from https://etherscan.io/contractsVeried

[7] Etherscan.io. 2018. Etherscan Token Tracker Page. Retrieved June 5, 2018 from https://etherscan.io/tokens

[8] Etherscan.io. 2018. HexagonToken. Retrieved June 7, 2018 from https://etherscan.io/address/0xb5335e24d0ab29c190ab8c2b459238da1153ceba#code

[9] Etherscan.io. 2018. SmartMeshICO. Retrieved June 7, 2018 from https://etherscan.io/address/0x55f93985431fc9304077687a35a1ba103dc1e081#code

[10] Etherscan.io. 2018. Social Chain. Retrieved June 7, 2018 from https://etherscan.io/address/0xb75a5e36cc668bc8fe468e8f272cd4a0fd0fd773#code

[11] Etherscan.io. 2018. UselessEthereumToken. Retrieved June 7, 2018 from https://etherscan.io/address/0x27f706edde3ad952ef647dd67e24e38cd0803dd6#code

[12] Ilya Grishchenko, Matteo Maei, and Clara Schneidewind. 2018. A Semantic Framework for the Security Analysis of Ethereum smart contracts. In International Conference on Principles of Security and Trust. Springer, 243–269.

[13] NCC Group. 2018. DASP - TOP 10. Retrieved June 15, 2018 from https://dasp.top10/

[14] Yoichi Hirai. 2016. Exception on overflow - Issue #796 - ethereum/solidity. Retrieved June 10, 2018 from https://github.com/ethereum/solidity/issues/796#issuecomment-253578925

[15] Yoichi Hirai. 2017. Defining the ethereum virtual machine for interactive theorem provers. In International Conference on Financial Cryptography and Data Security. Springer, 520–535.

[16] Yoichi Hirai. 2017. Ethereum Virtual Machine for Coq (v0.0.2). Retrieved June 12, 2018 from https://medium.com/@pirapira/ethereum-virtual-machine-for-coq-v0-0-2-d2568e068b18

[17] PeckShield Inc. 2018. PeckShield Inc. - Advisories. Retrieved June 13, 2018 from https://peckshield.com/advisories.html

[18] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. 2018. Zeus: Analyzing safety of smart contracts. NDSS.

[19] Sukrit Kalra, Seep Goel, Mohan Dhawan, and Subodh Sharma. 2018. Zeus Evaluation. Retrieved June 12, 2018 from https://docs.google.com/spreadsheets/d/12_g-pKsCtp3lUmT2AXngsqkBGSEoE6xNH51e-of_Za8/preview?usp=embed_googleplus#gid=1568997501

[20] Loi Luu, Duc-Hiep Chu, Hrishi Olickel, Prateek Saxena, and Aquinas Hobor. 2016. Making Smart Contracts Smarter. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security - CCS’16. ACM Press, New York, New York, USA, 254–269. https://doi.org/10.1145/2976749.2978309

[21] David Molnar, Xue Cong Li, and David Wagner. 2009. Dynamic Test Generation to Find Integer Bugs in x86 Binary Linux Programs. In USENIX Security Symposium, Vol. 9. 67–82.

[22] Bernhard Mueller. 2018. Detecting Integer Overflows in Ethereum Smart Contracts. Retrieved June 12, 2018 from https://bit.ly/2JIp9ea

[23] Bernhard Mueller. 2018. Smashing Ethereum Smart Contracts for Fun and Real Profit. (2018).

[24] Paul Muntean, Jens Grosklags, and Claudia Eckert. 2018. Practical Integer Overflow Prevention. In IEEE TSE journal (under review) (2018). https://arxiv.org/abs/1710.03720

[25] Ivica Nikolic, Aashish Kolluri, Ilya Sergey, Prateek Saxena, and Aquinas Hobor. 2018. Finding the greedy, prodigal, and suicidal contracts at scale. arXiv preprint arXiv:1802.06038 (2018).

[26] Trail of Bits. 2018. Manticore - Symbolic execution tool. Retrieved June 12, 2018 from https://github.com/trailofbits/manticore

[27] OpenZeppelin. 2018. OpenZeppelin/openzeppelin-solidity. Retrieved June 12, 2018 from https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol

[28] Sergey Petrov. 2017. Another Parity Wallet hack explained. Retrieved June 13, 2018 from https://medium.com/@Pr0Ger/another-parity-wallet-hack-explained-847ca46a2e1c

[29] Marios Pomonis, Theolos Petsios, Kangkook Jee, Michalis Polychronakis, and Angelos D Keromytis. 2014. IntFlow: improving the accuracy of arithmetic error detection using information flow tracking. In Proceedings of the 30th Annual Computer Security Applications Conference. ACM, 416–425.

[30] Christian Reitwiessner. 2018. Formal Verification for Solidity Contracts. Retrieved June 12, 2018 from https://forum.ethereum.org/discussion/3779/formal-verification-for-solidity-contracts

[31] David Siegel. 2016. Understanding The DAO Attack. Retrieved June 13, 2018 from https://www.coindesk.com/understanding-dao-hack-journalists/

[32] Solidity. 2018. Solidity 0.4.24 documentation. Retrieved June 9, 2018 from http://solidity.readthedocs.io/en/v0.4.24/

[33] Petar Tsankov, Andrei Dan, Dana Drachsler Cohen, Arthur Gervais, Florian Buenzli, and Martin Vechev. 2018. Securify: Practical Security Analysis of Smart Contracts. arXiv preprint arXiv:1806.01143 (2018).

[34] S. Varrette, P. Bouvry, H. Cartiaux, and F. Georgatos. 2014. Management of an Academic HPC Cluster: The UL Experience. In Proc. of the 2014 Intl. Conf. on High Performance Computing & Simulation (HPCS 2014). IEEE, Bologna, Italy, 959–967.

[35] Fabian Vogelsteller and Vitalik Buterin. 2015. ERC-20 Token Standard. Retrieved June 7, 2018 from https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md

[36] Tielei Wang, Tao Wei, Zhiqiang Lin, and Wei Zou. 2009. IntScope: Automatically Detecting Integer Overflow Vulnerability in X86 Binary Using Symbolic Execution. In Proceedings of the Network and Distributed System Security Symposium, NDSS 2009, San Diego, California, USA, 8th February - 11th February 2009. The Internet Society. http://www.isoc.org/isoc/conferences/ndss/09/pdf/17.pdf

[37] Xi Wang, Haogang Chen, Zhihao Jia, Nickolai Zeldovich, and M Frans Kaashoek. Improving Integer Security for Systems with KINT.. In OSDI, Vol. 12. 163–177.

[38] Gavin Wood. 2014. Ethereum: A secure decentralised generalised transaction ledger. Ethereum Project Yellow Paper 151 (2014), 1–32.

### Control Flow Graph Example

```solidity
pragma solidity ^0.4.21;

contract Test {
    function overflow(uint value) public pure returns (uint) {
        return value + 1;
    }
}
```

**Listing 8:** An example of a smart contract possibly producing an integer overflow at line 6.

### The DAO Hack

```solidity
contract SimpleDAO {
    mapping (address => uint) public credit;

    function donate(address to) {
        credit[to] += msg.value;
    }

    function queryCredit(address to) returns (uint) {
        return credit[to];
    }

    function withdraw(uint amount) {
        if (credit[msg.sender] >= amount) {
            msg.sender.call.value(amount)();
            credit[msg.sender] -= amount;
        }
    }

    function () {
        if (performAttack) {
            dao.donate.value(1)(this);
            dao.withdraw(1);
        }
    }

    SimpleDAO public dao = SimpleDAO(0x818EA...);
    address owner;
    bool performAttack = true;

    function Mallory2() {
        owner = msg.sender;
    }

    function attack() {
        dao.withdraw(dao.balance);
        owner.send(this.balance);
        performAttack = false;
        dao.withdraw(1);
    }

    function getJackpot() {
        // Jackpot function
    }
}

contract Mallory2 {
    SimpleDAO public dao = SimpleDAO(0x818EA...);
    address owner;
    bool performAttack = true;

    function Mallory2() {
        owner = msg.sender;
    }

    function attack() {
        dao.withdraw(dao.balance);
        owner.send(this.balance);
        performAttack = false;
        dao.withdraw(1);
    }

    function getJackpot() {
        // Jackpot function
    }
}
```

**Listing 9:** A simplified version of the DAO smart contract.

**Listing 10:** A more efficient attack than the original DAO attack.

**Figure 6:** A representation of the control flow graph that O produces for Listing 8. The basic block highlighted in red indicates the location where an overflow may occur.