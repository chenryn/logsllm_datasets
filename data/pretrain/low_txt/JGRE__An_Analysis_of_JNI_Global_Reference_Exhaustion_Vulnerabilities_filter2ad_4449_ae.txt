# 优化后的文本

## 摘要
本文系统地研究了Android系统中的JNI全局引用资源耗尽漏洞。我们构建了一个工具包来分析Android系统服务提供的、可被第三方应用访问的IPC方法，并在32个系统服务中发现了54个JGRE漏洞，在两个预装应用中发现了三个JGRE漏洞。Android安全团队确认了我们的所有发现。此外，我们开发了一种新的防御机制来抵御JGRE攻击。我们在Android 6.0.1上实现了该机制，实验结果表明它可以成功阻止所有已知的JGRE攻击，且开销较小。

## 图9说明
图9展示了触发最多可疑IPC调用的前五个应用在不同Δ值下的情况。观察到，前四个恶意应用触发的可疑IPC调用数量显著高于第五个应用。尽管良性应用也触发了大量的IPC调用，但其数量仍远低于攻击应用。

## 性能开销评估
### 响应延迟
我们通过测量识别攻击源的延迟来评估防御方法的响应延迟。我们测试了57个易受攻击的服务（即54个系统服务和3个预装应用）中的所有易受攻击的IPC接口。大多数检测延迟都在一秒内，只有对三个易受攻击接口的检测超过了一秒。特别是，检测MidiService.registerDeviceServer()攻击大约需要3.6秒。而构造一个JGRE攻击的最短时间约为100秒，远大于3.6秒，因此JGRE攻击无法逃避我们的防御。

### 计算开销
频繁记录IPC调用和添加/删除JGR操作的影响至关重要。为评估这些操作的影响，我们测量了通过IPC方法传递字节数组的延迟。总共进行了500轮字节数组传递，每轮数据传递时数组大小增加1,024字节。如图10所示，我们的方案每次IPC调用的最大延迟为1.247毫秒，开销增加了约46.7%。

我们还测量了记录JGR操作的开销，通过运行一对攻击应用和受害者应用进行测试。当JGR条目数少于4,000时，我们的方案不会干扰JGR操作，没有明显的延迟。当JGR条目数达到4,000后，记录操作会引入约1微秒的延迟。

为了减少开销并提高防御机制的性能，我们应用了几项优化措施。首先，根据观察1，我们的防御仅在受害进程触发的JNI创建数量超过阈值时才开始干扰IPC调用并收集数据。其次，当新JGR条目数超过12,000时，才会触发JGRE Defender以减少记录的数据量。此外，我们利用段树数据结构实现算法1，以减少内存开销。段树是一种高效存储区间的数据结构，非常适合算法1需要存储和处理的各种区间，如IPCCalls和JGRAdds。

## 讨论
本文研究了可能导致大量系统服务和一些预装应用遭受DoS攻击的JGRE漏洞，并开发了一种防御机制来缓解这些攻击。现在讨论我们防御的一些局限性，并指出JGRE攻击的根本原因可能引发其他安全问题。

### JGRE分析中的误报
类似于传统的静态分析方法，我们的方法可能会因为未监控所有IPC接口而导致误报。虽然大多数应用通过Binder基于的IPC与系统服务通信，但仍存在其他IPC技术，如未受保护的广播接收器、匿名共享内存(ASHMEM)以及通过Linux套接字、管道和信号进行的IPC。尽管这些技术很少用于提供可供第三方应用访问的接口，但它们可能存在并被滥用以发起JGRE攻击。其次，我们在动态测试阶段根据每个IPC方法的分析计算参数，因此由于动态测试的限制，我们不能保证找到完整的IPC漏洞列表。

### 多路径攻击
观察2假设每个IPC方法只有一个攻击路径，因此执行时间稳定；然而，攻击者可能通过多个路径利用漏洞。我们的防御方案可以通过首先根据代码执行路径对同一IPC方法触发的不同IPC调用进行分类，然后统计同一类别的IPC调用总数来检测这种攻击。然后可以根据数量识别并限制攻击。

### 其他资源的DoS攻击
JGR是Android运行时的关键资源之一。JGRE攻击的根本原因是当前Android系统的安全强制措施无法防止授权应用发送过多的服务请求以消耗分配给系统服务的有限资源。可能存在与其他系统资源（如内存、文件描述符和内部存储）相关的其他资源消耗漏洞。我们的防御不能直接应用于防止针对其他资源的DoS攻击，但它可能激发我们未来的研究。

## 相关工作
### JNI安全
JNI安全已经得到了广泛研究。Tan等人[45]分析了JDK 1.6中的本地代码，发现了一些错误，如意外的控制流、缓冲区溢出、JNI误用等。Lee等人[34]使用状态机来检测外部函数接口(FFI)违规。他们构建了一个名为Jinn的JNI bug检测工具，用于在Java程序运行时动态检测约束违规。Qian等人[37]通过跟踪Android应用中通过JNI的信息流来检测信息泄露。Robusta[43]使用软件故障隔离(SFI)将Java程序的本地代码隔离到单个沙箱中。FlexDroid[40]使用硬件故障隔离(HFI)构建Android应用的JNI沙箱。它引入了两个内存域，即JNI域和Java域，以将JNI代码和Java代码隔离到不同的空间。NativeGuard[44]将Android应用的本地库隔离到单独的服务应用中，其余部分组成客户端应用。

### DoS攻击
一系列通过利用Android系统服务漏洞发起的DoS攻击已被识别[24][33][42]。Huang等人[33]发现Android系统服务并发控制的设计缺陷，并基于此缺陷实施了一系列DoS攻击。Shao等人[42]专注于Android框架中的安全强制不一致问题。Cao等人[24]关注发生在Android SS接口输入验证中的漏洞。此外，DoS攻击也可能由某些Android系统资源的耗尽触发。Lineberry等人[35]通过弹出大量Toast消息成功发起了导致设备重启的DoS攻击。此漏洞已在Android 4.0中修复。使用Flash SMS也可能导致DoS攻击[21]，导致手机重启和网络断开。该漏洞已在Android 4.4.2中修复。Armando等人[16]通过fork大量Zygote进程触发DoS攻击。Viadyanathan等人[22]提取并监控了DoS攻击早期阶段出现的关键变量。我们的工作重点是通过IPC接口操纵JNI全局引用资源的DoS攻击。

### Android内存管理
Linux采用OOM Killer [11] 来处理低内存状况。但由于它会导致显著的性能下降[19]，Android使用低内存杀手(LMK)在低内存情况下恢复系统。LMK使用oom score adj将进程分为不同的组。在低内存情况下，它基于oom score adj选择过程杀死应用。有一些工作致力于预测用户可能仍然希望使用的应用，以提高LMK的有效性[48][50]。Baik等人[19]提出了一个策略可扩展的LMK过滤框架，以增强LMK受害者选择机制。

类似于LMK，我们的防御机制也会在进程或系统资源不足（例如JGR或内存）时触发，并尝试根据评分查找并杀死可疑应用。然而，LMK和我们的防御之间存在很大的区别。在Android中，很容易知道每个进程占用的内存量，但很难确定每个应用触发了多少JGR创建。因此，我们不能直接利用LMK来防御JGRE。特别地，JGR的添加和删除接口是在本地代码中实现的，而大多数系统服务的复杂功能逻辑代码是用Java编写的。此外，IPC调用是在两个进程之间进行的，这使得极难识别特定的JGR创建是由哪个IPC调用和哪个应用触发的。我们的防御机制通过记录和分析每个可疑应用的行为来解决这些挑战。

### Android静态分析工具
静态分析技术已经研究多年，许多设计良好的工具已经被提出[1][17][28]-[31]。Kirin[28]检查应用的权限以确定该应用是否可能包含危险功能。AdRisk[31]通过检查广告库中的API调用来分析广告库使用的权限，从而识别可能的数据泄露和危险路径。Flowdroid[17]是一个精确的上下文、流、字段、对象敏感的静态污点分析框架，可用于检测Android应用中的潜在敏感数据泄露。

## 结论
在本文中，我们系统地研究了Android系统中的JNI全局引用资源耗尽漏洞。我们构建了一个工具包来分析Android系统服务提供的、可被第三方应用访问的IPC方法，并在32个系统服务中发现了54个JGRE漏洞，在两个预装应用中发现了三个JGRE漏洞。Android安全团队确认了我们的所有发现。此外，我们开发了一种新的防御机制来抵御JGRE攻击。我们在Android 6.0.1上实现了该机制，实验结果表明它可以成功阻止所有已知的JGRE攻击，且开销较小。

## 致谢
本研究得到中国国家重点研发计划（编号：2016YFB0800102）和国家自然科学基金（编号：61572278, 61572483, 61502468）的支持。孙坤的工作得到了美国海军研究办公室（编号：N00014-16-1-3214 和 N00014-16-1-3216）的支持。李强和尹磊是通讯作者。

## 参考文献
[1] Androguard. http://code.google.com/p/androguard.
[2] Code to Fix a JGRE Vulnerability in Notiﬁcation Service. https://goo.gl/NvsMVe.
[3] Code to Fix a JGRE Vulnerability in Wiﬁ Service. https://goo.gl/YEobmk.
[4] Compling with Jack. https://goo.gl/o9RYX8.
[5] DDMS. http://goo.gl/J7MBC4.
[6] Dex2jar. https://goo.gl/skfQLl.
[7] Doxygen. http://goo.gl/cy0NJL.
[8] Java Native Interface Speciﬁcation. http://goo.gl/zqHp29.
[9] Javapoet. https://goo.gl/nsIHR3.
[10] JNI Functions: Registering Native Methods. http://goo.gl/DdZb0o.
[11] Linux OOM Killer. https://linux-mm.org/OOM Killer.
[12] MonkeyRunner. https://goo.gl/xcy6ha.
[13] Processes and Application Life Cycle. https://goo.gl/Vsed4i.
[14] Procfs. https://en.wikipedia.org/wiki/Procfs.
[15] Type Erasure. https://goo.gl/qJjenO.
[16] Alessandro Armando, Alessio Merlo, Mauro Migliardi, and Luca Verderame. Would You Mind Forking This Process? A Denial of Service Attack on Android (and Some Countermeasures). In Information Security and Privacy Research, pages 13–24. Springer, 2012.
[17] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. PLDI ’14.
[18] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. PScout: Analyzing the Android Permission Speciﬁcation. CCS ’12.
[19] Kunhoon Baik, Jongseok Kim, and Daeyoung Kim. Policy-extendable LMK Filter Framework for Embedded System. In Linux Symposium, page 49.
[20] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and G. Vigna. What the App is That? Deception and Countermeasures in the Android User Interface. S&P ’15.
[21] Bogdan. 0class2dos. http://goo.gl/BmM6rR.
[22] J. B. D. Cabrera, L. Lewis, Xinzhou Qin, Wenke Lee, R. K. Prasanth, B. Ravichandran, and R. K. Mehra. Proactive Detection of Distributed Denial of Service Attacks using MIB Trafﬁc Variables-A Feasibility Study. In Proc. Symp. IEEE/IFIP Int Integrated Network Management, pages 609–622, 2001.
[23] Liang Cai and Hao Chen. TouchLogger: Inferring Keystrokes on Touch Screen from Smartphone Motion. HotSec’11.
[24] Chen Cao, Neng Gao, Peng Liu, and Ji Xiang. Towards Analyzing the Input Validation Vulnerabilities Associated with Android System Services. ACSAC’15.
[25] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and David Wagner. Analyzing Inter-application Communication in Android. MobiSys ’11.
[26] Jonathan Crussell, Clint Gibler, and Hao Chen. Attack of the Clones: Detecting Cloned Applications on Android Markets. ESORICS’12.
[27] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. ACM Trans. Comput. Syst., 32(2):5:1–5:29, June 2014.
[28] William Enck, Machigar Ongtang, and Patrick McDaniel. On Lightweight Mobile Phone Application Certiﬁcation. CCS ’09.
[29] Adam P Fuchs, Avik Chaudhuri, and Jeffrey S Foster. Scandroid: Automated Security Certiﬁcation of Android. Technical report, University of Maryland, 2009.
[30] Michael Grace, Yajin Zhou, Qiang Zhang, Shihong Zou, and Xuxian Jiang. RiskRanker: Scalable and Accurate Zero-day Android Malware Detection. MobiSys ’12, 2012.
[31] Michael C. Grace, Wu Zhou, Xuxian Jiang, and Ahmad-Reza Sadeghi. Unsafe Exposure Analysis of Mobile In-app Advertisements. WISEC ’12.
[32] Steve Hanna, Ling Huang, Edward Wu, Saung Li, Charles Chen, and Dawn Song. Juxtapp: A Scalable System for Detecting Code Reuse Among Android Applications. DIMVA’12.
[33] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. From System Services Freezing to System Server Shutdown in Android: All You Need Is a Loop in an App. CCS ’15.
[34] Byeongcheol Lee, Ben Wiedermann, Martin Hirzel, Robert Grimm, and Kathryn S. McKinley. Jinn: Synthesizing Dynamic Bug Detectors for Foreign Language Interfaces. PLDI ’10.
[35] Anthony Lineberry, David Luke Richardson, and Tim Wyatt. These Aren’t The Permissions You’re Looking For. DefCon, 18:2010, 2010.
[36] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. CCS ’12.
[37] C. Qian, X. Luo, Y. Shao, and A. T. S. Chan. On Tracking Information Flows through JNI in Android Applications. DSN’14.
[38] Siegfried Rasthofer, Steven Arzt, and Eric Bodden. A Machine-learning Approach for Classifying and Categorizing Android Sources and Sinks. NDSS ’14.
[39] Hanan Samet. The design and analysis of spatial data structures, volume 199. Addison-Wesley Reading, MA, 1990.
[40] Jaebaek Seo, Daehyeok Kim, Donghyun Cho, Taesoo Kim, and Insik Shin. FLEXDROID: Enforcing In-App Privilege Separation in Android. NDSS’16.
[41] Asaf Shabtai, Yuval Fledel, Uri Kanonov, Yuval Elovici, and Shlomi Dolev. Google Android: A State-of-the-art Review of Security Mechanisms. arXiv preprint arXiv:0912.5101, 2009.
[42] Yuru Shao, Jason Ott, Qi Alfred Chen, Zhiyun Qian, and Zhuoqing Morley Mao. Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework. In NDSS’16.
[43] Joseph Siefers, Gang Tan, and Greg Morrisett. Robusta: Taming the Native Beast of the JVM. CCS ’10.
[44] Mengtao Sun and Gang Tan. NativeGuard: Protecting android applications from third-party native libraries. WiSec’14.
[45] Gang Tan and Jason Croft. An Empirical Security Study of the Native Code in the JDK. In Usenix Security Symposium, pages 365–378, 2008.
[46] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren, Patrick Lam, and Vijay Sundaresan. Soot - a Java Bytecode Optimization Framework. CASCON ’99.
[47] Zhi Xu, Kun Bai, and Sencun Zhu. TapLogger: Inferring User Inputs on Smartphone Touchscreens Using On-board Motion Sensors. WISEC ’12.
[48] Tingxin Yan, David Chu, Deepak Ganesan, Aman Kansal, and Jie Liu. Fast App Launching for Mobile Devices Using Predictive User Context. MobiSys ’12.
[49] Wu Zhou, Yajin Zhou, Xuxian Jiang, and Peng Ning. Detecting Repackaged Smartphone Applications in Third-party Android Marketplaces. CODASPY ’12.
[50] Xun Zou, Wangsheng Zhang, Shijian Li, and Gang Pan. Prophet: What App You Wish to Use Next. In Proceedings of the 2013 ACM Conference on Pervasive and Ubiquitous Computing Adjunct Publication, UbiComp ’13 Adjunct.