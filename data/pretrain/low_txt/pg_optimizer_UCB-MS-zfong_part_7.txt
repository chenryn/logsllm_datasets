Certainly! Here is a more polished and professional version of the provided text:

---

**Nested Iteration and Join Strategies in INGRES and POSTGRES**

In scenarios (c) and (d), INGRES employs a slight variation of nested iteration. The `EMP` relation is first scanned and sorted into a temporary table before being iterated with `DEPT`. By sorting only the inner relation on the join attribute, the need to scan the entire inner relation on each iteration is mitigated. The scan halts once a value greater than the current outer join attribute is encountered. In certain cases, this approach can be beneficial; however, in these specific instances, there is no significant advantage because only a single tuple results from scanning `EMP`. In fact, the plans generated by INGRES and POSTGRES are equivalent in cost, as the additional sort step in the INGRES plan incurs no extra cost, and both relations, `EMP` and `DEPT`, are scanned only once.

POSTGRES’s plan (e) is similar to INGRES’s, but INGRES leverages the partial sort feature of an ISAM (Indexed Sequential Access Method) to use a variant of a merge-sort join with `EMP` and `DEPTINDEX`. Again, only one tuple qualifies after scanning `EMP`, resulting in a zero sort cost. Ignoring the sort step, the two plans are essentially equivalent.

Plan (f) demonstrates a scenario where INGRES's treatment of an access method's partial ordering is advantageous. INGRES utilizes this feature to join `EMPINDEX` with `DEPT`. The result is then sorted on the `tidp` field, allowing `EMP` to be scanned in page order. According to POSTGRES cost estimates, the INGRES plan is approximately four to five times better. This significant improvement is partly due to INGRES's handling of secondary indices, but more so because of its consideration of the ISAM's partial sort. Therefore, the substantial performance difference in this case may be misleading for the reasons discussed in the previous subsection.

The final plan pair (g) illustrates a situation where POSTGRES and INGRES select different indices. INGRES chooses the index defined on `floor`, while POSTGRES selects the index defined on `dept`. POSTGRES chose its plan because, according to its cost estimates, it was only 0.27% better than a plan equivalent to that chosen by INGRES. Thus, although the two optimizers selected different plans, the difference is minor.

**Three-Way Join Analysis**

The tests described indicate that the differences between the selected plans in INGRES and POSTGRES are subtle, resulting in minor variations, except in one case where the difference is minimized by other circumstances. Additional strategies employed by INGRES led to more significant differences when running the following three-way join:

```sql
SELECT EMP.name, DEPT.floor, WATER.cid
FROM EMP, DEPT, WATER
WHERE EMP.dept = DEPT.dname AND DEPT.floor = WATER.floor;
```

The results are shown in Table 5.2.

Plans (1), (2), and (4) in Table 5.2 illustrate another strategy used by INGRES that POSTGRES does not consider. In these plans, INGRES first sorts `DEPT` on `dname` and then performs a nested iteration with `WATER`. Since a join preserves the sort order of its outer join relation, the join result remains sorted in `dname` order and can be used in a merge with `EMP`. This approach is advantageous because it may be cheaper to sort `DEPT` before joining with `WATER`, as fewer tuples may need to be sorted afterward.

To assess the magnitude of differences between POSTGRES and INGRES plans for the four cases shown, the costs of all INGRES plans were calculated using POSTGRES cost estimation formulas. These computed costs were compared with the corresponding POSTGRES plans, and the percentage differences are shown in Table 5.2. The results show that INGRES was better than POSTGRES in all four cases. However, INGRES was significantly better in only one case, which was due to its accounting for a partial ISAM ordering. In all other cases, the additional strategies considered by INGRES resulted in no more than a 13.8% difference.

**Summary and Conclusions**

Despite the differences between the POSTGRES and INGRES optimizers, our performance tests yielded two promising conclusions. For the most part, both systems selected similar strategies for queries involving a single join. Assuming that the INGRES optimizer is correct, these results indicate that POSTGRES selects true optimal plans. For queries where INGRES could leverage a broader range of strategies, INGRES did not perform considerably better. Thus, not considering all these additional processing strategies, which would have added further complexity to our implementation effort, did not dramatically affect the overall performance of our optimizer.

**Future Work and Acknowledgements**

Further testing of the optimizer will be conducted once it is fully integrated with the rest of POSTGRES. Key areas of interest include:
- Whether writing the optimizer in LISP affects performance.
- Whether the optimizer actually selects true optimal plans.
- Whether the optimizer works effectively with all user-defined types, operators, and access methods.
- Whether the current algorithm for optimizing nested-attribute queries is "good enough."

Further validation of the POSTGRES optimizer is necessary to address these more subtle issues. However, the preliminary work described in this report has at least illustrated the feasibility of many important ideas, particularly the concepts introduced to support the optimization of extensible objects in a database system.

**Acknowledgements**

I would like to thank my research advisor, Professor Michael Stonebraker, for his guidance and support throughout this project. I am also grateful to Professor Larry Rowe and members of the POSTGRES project for their contributions, especially Chin Heng Hong for his careful scrutiny of optimizer-generated query plans. Finally, I would like to thank Professor Eugene Wong for reviewing this report.

**References**

[ASTR76] Astrahan, M., et al., "System R: A Relational Approach to Database Management," ACM Transactions on Database Systems, Vol. 1, No. 3, September 1976.

[CHAM76] Chamberlin, D., et al., "SEQUEL2: A Unified Approach to Data Definition, Manipulation, and Control," IBM Journal of Research and Development, Vol. 20, No. 6, November 1976.

[DEWI84] DeWitt, D., et al., "Implementation Techniques for Main Memory Database Systems," Proceedings of the 1984 ACM-SIGMOD Conference on Management of Data, Boston, MA, June 1984.

[FOGG82] Fogg, D., Implementation of Domain Abstraction in the Relational Database System INGRES, Masters Report, Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, September 1982.

[FRAN85] Franz, Inc., Franz LISP Reference Manual, Opus 42, Berkeley, CA, September 1985.

[GUTT84] Guttman, A., "R-trees: A Dynamic Index Structure for Spatial Searching," Proceedings of the 1984 ACM-SIGMOD Conference on Management of Data, Boston, MA, June 1984.

[HASK82] Haskings, M. and R. Lorie, "On Extending the Functions of a Relational Database System," Proceedings of the 1982 ACM-SIGMOD Conference on Management of Data, Orlando, FLA, June 1982.

[HELD75a] Held, G., and M. Stonebraker, "Access Methods in the Relational Data Base Management System INGRES," Proceedings of the ACM-Pacific-75, San Francisco, CA, April 1975.

[HELD75b] Held, G., et al., "INGRES: A Relational DataBase System," Proceedings of the 1975 AFIPS National Computer Conference, Vol. 44, Anaheim, CA, May 1975.

[KENT79] Kent, W., "Limitations of Record-Based Information Models," ACM Transactions on Database Systems, Vol. 4, No. 1, March 1979.

[KOOI82] Kooi, R. and D. Frankforth, "Query Optimization in INGRES," IEEE Database Engineering Newsletter: Special Issue on Query Optimization, Vol. 5, No. 1, September 1982.

[KUNG84] Kung, R., et al., "Heuristic Search in Data Base Systems," Proceedings of the 1st International Workshop on Expert Database Systems, Kiowah Isl., SC, October 1984.

[ONG82] Ong, J., The Design and Implementation of Data Abstraction in the Relational Database System INGRES, Masters Report, Department of Electrical Engineering and Computer Science, University of California, Berkeley, CA, September 1982.

[ROBI81] Robinson, J., "The K-D-B Tree: A Search Structure for Large Multidimensional Indexes," Proceedings of the 1981 ACM-SIGMOD Conference on Management of Data, Ann Arbor, MI, May 1981.

[ROWE86] Rowe, L. A. and M. Stonebraker, "The Commercial INGRES Epilogue," The INGRES Papers: Anatomy of a Relational Database System, (M. Stonebraker, editor), Addison Wesley, 1986.

[SELI79] Selinger, P., et al., "Access Path Selection in a Relational Data Base System," Proceedings of the 1979 ACM-SIGMOD Conference on Management of Data, Boston, MA, June 1979.

[SELL85] Sellis, T. and L. Shapiro, "Optimization of Extended Database Query Languages," Proceedings of the 1985 ACM-SIGMOD Conference on Management of Data, Austin, TX, May 1985.

[SELL86] Sellis, T., "Global Query Optimization," Proceedings of the 1986 ACM-SIGMOD Conference on Management of Data, Washington D.C., May 1986.

[STEE84] Steele, G., Common LISP, Digital Press, 1984.

[STON75] Stonebraker, M., "Implementation of Integrity Constraints and Views by Query Modification," Proceedings of the 1975 ACM-SIGMOD Conference on Management of Data, San Jose, CA, May 1975.

[STON76] Stonebraker, M., et al., "The Design and Implementation of INGRES," ACM Transactions on Database Systems, Vol. 1, No. 3, September 1976.

[STON84] Stonebraker, M., et al., "QUEL as a Data Type," Proceedings of the 1984 ACM-SIGMOD Conference on Management of Data, Boston, MA, June 1984.

[STON85a] Stonebraker, M., "Triggers and Inference in Database Systems," Proceedings of the Islamoora Conference on Expert Databases, Islamoora, FLA, February 1985.

[STON85b] Stonebraker, M., et al., "Extending a Database System with Procedures," (submitted for publication).

[STON86a] Stonebraker, M., "Inclusion of New Types in Relational Database Systems," Proceedings of the Second International Conference on Database Engineering, Los Angeles, CA, February 1986.

[STON86b] Stonebraker, M. and L. A. Rowe, "The Design of POSTGRES," Proceedings of the 1986 ACM-SIGMOD Conference on Management of Data, Washington D.C., May 1986.

[STON86c] Stonebraker, M., "Object Management in POSTGRES Using Procedures," International Workshop on Object-Oriented Database Systems, Pacific Grove, CA, September 1986.

[STON86d] Stonebraker, M., et al., "The Design of the POSTGRES Rules System," (in preparation).

[WONG76] Wong, E. and K. Youssefi, "Decomposition: A Strategy for Query Processing," ACM Transactions on Database Systems, Vol. 1, No. 3, September 1976.

[ZANI83] Zaniolo, C., "The Database Language GEM," Proceedings of the 1983 ACM-SIGMOD Conference on Management of Data, San Jose, CA, May 1983.

---

This version is more structured, coherent, and professionally formatted, making it easier to read and understand.