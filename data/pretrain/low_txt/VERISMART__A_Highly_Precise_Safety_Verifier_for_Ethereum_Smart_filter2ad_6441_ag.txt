### Evaluation Results

**Table IV** presents the evaluation results on the ZEUS dataset. For each contract, the table shows the number of alarms (#Alarms), the number of false positives (#FPs) produced by VERISMART and SMTCHECKER, and whether each tool detected all bugs without false positives (Success: , Failure: ).

**Results Analysis:**
- **VERISMART Performance:**
  - VERISMART successfully addresses limitations of ZEUS and SMTCHECKER.
  - The 25 contracts contain 172 arithmetic operations, with VERISMART flagging 40 as potential bugs.
  - Manual verification confirmed that 34 out of these 40 alarms are true positives.
  - In benchmark #24, VERISMART produced 6 false positives due to unsupported invariants (quantified and compound invariants, Section III-C) and imprecise function call analysis.
  - The remaining 132 (=172-40) queries, proven safe by VERISMART, were manually verified as true negatives.

- **ZEUS Performance:**
  - According to publicly available data [28], ZEUS produces at least one false positive for each contract in Table IV, resulting in a minimum of 25 false alarms in total.

- **SMTCHECKER Performance:**
  - SMTCHECKER could only analyze 13 contracts, raising internal errors for the other 12 due to its immature support of Solidity syntax [29].
  - Among 61 operations from 13 contracts, SMTCHECKER detected all 5 bugs but reported 55 alarms in total, of which 50 were false positives.
  - In terms of efficiency, SMTCHECKER took about 1 second per contract, while VERISMART took about 20 seconds per contract.

### Importance of Transaction Invariants
The key enabler for high precision in VERISMART is its ability to leverage transaction invariants. Without inferring transaction invariants (i.e., using `true` as transaction invariants), VERISMART fails to verify 17 out of 25 contracts.

### Case Study: Application to Other Types of Vulnerabilities
VERISMART can also be used to analyze other safety properties. To demonstrate this, we applied VERISMART to detect access control vulnerabilities, where security-sensitive variables can be manipulated by anyone for malicious use.

**Example: EtherCartel Contract (CVE 2018-11329)**
```solidity
function DrugDealer() public { ceoAddr = msg.sender; }
function buyDrugs () public payable {
    ceoAddr.transfer(msg.value); // send Ether to ceoAddr
    drugs[msg.sender] += ...; // buy drugs by paying Ether
}
```
In this code, the address-typed variable `ceoAddr`, the beneficiary of Ether, can be taken by anyone who calls the `DrugDealer` function. If an attacker becomes the beneficiary, they might illegally take digital assets whenever benign users buy them by calling `buyDrugs`.

**Detection with VERISMART:**
- We specified safety properties by automatically generating the assertion `assert(msg.sender == addr)` right before each assignment of the form `addr = ...;`, where `addr` is a global address-typed variable (excluding assignments in constructors).
- Running VERISMART without modifying its verification algorithm, it detected all known CVE vulnerabilities (2018-10666, 2018-10705, 2018-11329) and proved the absence of this bug scenario for 55 out of 60 contracts from Table II.
- VERISMART could not prove the safety of the remaining 5 contracts due to imprecise specifications.

### Threats to Validity
- **Benchmark Contracts:** The 60 CVE dataset + 25 ZEUS dataset might not be representative, although efforts were made to avoid bias (e.g., removal of duplicates).
- **Performance Variability:** VERISMART's performance may vary depending on the SMT solver (Z3) and timeout options.
- **Exploitability:** We did not study the exploitability of bugs or compare VERISMART with other tools in this regard.
- **Manual Classification:** Manually classifying static analysis alarms into true or false positives is challenging and can be subjective in some cases.

### Related Work
**A. Analyzing Smart Contracts**
- **Fully Automated Approaches:**
  - VERISMART is unique in achieving full automation, high precision, and high recall.
  - Other tools like OYENTE, MYTHRIL, OSIRIS, MANTICORE, MAIAN, GASPER, REGUARD, and ContractFuzzer use symbolic execution or fuzz testing but may miss critical vulnerabilities.
  - ZEUS and SMTCHECKER perform exhaustive analyses but lack inter-transactional reasoning.
  - SECURIFY, MadMax, and Vandal use Datalog-based declarative static analysis but cannot describe general classes of numerical static analyses.

- **Semi-Automated Approaches:**
  - Tools like Hirai, Bharagavan et al., Grishchenko et al., Hildenbrandt et al., Amani et al., and Lahiri et al. require manual specification or invariants and aim to prove a wide range of functional properties.

- **Manual Safety Checking:**
  - Techniques like SafeMath depend on manual annotation, which is error-prone and not exhaustive.

**B. Analyzing Arithmetic Safety of Traditional Programs**
- **Existing Work:**
  - Tools like Astr√©e, Sparrow, and Frama-C use abstract interpretation, but our CEGIS-style algorithm is new in this context.
  - Bounded verification approaches and symbolic execution-based techniques differ from our unbounded verification approach.

### Conclusion
Formally verifying the correctness of smart contracts is crucial. This paper presents a powerful verification algorithm for smart contracts, implemented in VERISMART. It demonstrates the importance of inferring and using transaction invariants, highlighting a significant shortcoming of existing approaches and guiding future development in automated tools for smart contract analysis.

### Acknowledgment
We thank Junhee Lee and Minseok Jeon for their valuable comments on Proposition 1 and Appendix A. This work was supported by the Institute of Information & Communications Technology Planning & Evaluation (IITP) grant funded by the Korea government (MSIT) (No.2019-0-01697, Development of Automated Vulnerability Discovery Technologies for Blockchain Platform Security and No.2019-0-00099, Formal Specification of Smart Contract).

### References
[References listed here, following the format provided in the original text.]