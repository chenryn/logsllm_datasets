# Confidential Execution of Secret Cloud Application Binaries: Use Cases and Performance Analysis

## 1. Runtime Information
| Data Section Size (D) | Relocation Table Size (R) | Overhead (%) |
|-----------------------|---------------------------|---------------|
| 44                    | 19                        | 1.90%         |
| 52                    | 2.81%                     | 559           |
| 44                    | 16                        | 2.52%         |
| 48                    | 346                       | 380           |
| 44                    | 32                        | 900.13%       |
| 44                    | 8.04%                     | 5.82%         |

**Table 1: Use cases of confidential execution of secret cloud application binaries.**

### Program Information
- **Program Name and Binary Name**: Identifies the application and its binary.
- **Protected Code Description**: Describes the logic that is protected.
- **Lines of Code Added (|L|)**: Number of lines of code added for porting.
- **Number of Secret Functions (|F|)**: Number of functions that are kept secret.
- **Runtime Characteristics**:
  - **Code Section Size (|C|)**: Size of the code section in the binary.
  - **Data Section Size (|D|)**: Size of the data section in the binary.
  - **Relocation Table Size (|R|)**: Size of the relocation table.
  - **Overhead**: Performance overhead introduced by the confidential execution.

### Categories of Applications
1. **Decision-Making Logic**:
   - **Examples**:
     - **NGINX Access Module (nginx-access)**: Determines whether to allow or deny incoming web requests based on configuration.
     - **Sendmail Filter Module (sendmail-filter)**: Analyzes outgoing mail content and decides whether to send it, using regular expressions to check the sender's address.

2. **Cryptographic Operations**:
   - **Examples**:
     - **Google Authenticator PAM (gauth-otp)**: Protects the passcode generation code.
     - **EncFS with ARIA Cipher (encfs-aria)**: Provides block-level encryption, protecting the encryption and decryption algorithms along with key initialization.

3. **Data Processing Workload**:
   - **Examples**:
     - **K-Means Clustering (mapreduce-kmeans)**: Partitions n-dimensional integer points into clusters using a shared-memory MapReduce framework.
     - **Word Count (hadoop-wcount)**: Analyzes an input text file and outputs the total number of distinct English words using Apache Hadoop.

### Lines of Code Added
- The number of lines of code added for conversion ranges from 100 to 220, which is approximately 1.18% of the total lines of code in the entire program. This indicates that the modifications required for confidential execution are minimal.

## 2. Performance of Confidential Execution
### Overhead Analysis
- **VM-Level Context Switches**: A major source of overhead, especially during marshaling for input and output data.
- **Frequency of Secret Function Calls and Marshaled Data Size**: These factors significantly influence the overhead.
- **Complexity of Protected Logic**: Has a minor impact on the overhead.

### Benchmarking Results
- **Nginx-Access**: Measured using Apache Benchmark with 10,000 transactions per trial. The overhead is 1.90%.
- **Sendmail-Filter**: Evaluated using Mstone SMTP performance testing tool, resulting in an overhead of 2.81%.
- **Gauth-Otp**: SSH client repeatedly logs in and out for 30 seconds, showing an overhead of 2.52%.
- **Encfs-Aria**: Benchmarked using IOzone Filesystem Benchmark, revealing an overhead of about 9 times slower than the unprotected version. This is a stress case; in typical real-world scenarios, the overhead is expected to be much lower.
- **Mapreduce-Kmeans**: Configured to partition 8,192 two-dimensional integer points into 4,096 clusters, resulting in an 8% slowdown.
- **Hadoop-Wcount**: Run with an input text file containing 10,000 words, showing an overhead of 5.8%.

## 3. Performance Impact on Unprotected Applications
- **XMHF Hypervisor Framework**: Used as the base for implementation.
- **Benchmarking (UnixBench)**: CAFE does not introduce any overhead for applications without secret binaries, confirming zero impact on unprotected applications.

## 4. Related Work
- **Flicker and TrustVisor**: Provide infrastructure for executing security-sensitive code in isolated memory but focus only on blocking user VM's access to application code while the protection is enabled. CAFE offers end-to-end confidentiality.
- **Overshadow**: Provides cloaking for general-purpose legacy applications but is vulnerable to attacks from malicious kernels. CAFE provides stronger confidentiality through verified and sanitized input/output and a constrained scope of sensitive code.
- **Code Obfuscation Techniques**: While effective in impeding analysis, they do not provide complete secrecy. CAFE ensures full confidentiality by encrypting the binary code and running it in an isolated environment.

## 5. Conclusion
- **Secure Distribution and Execution**: Essential for preventing software piracy and reverse engineering.
- **CAFE**: Provides confidential distribution and execution of cloud applications, even when the tenant VM's OS is compromised. Evaluation on common cloud applications demonstrates its effectiveness and practicality.

## 6. References
- [1] Average Web Page Breaks 1600K. http://www.websiteoptimization.com/speed/tweak/average-web-page/
- [2] Mstone. http://mstone.sourceforge.net/
- [3] The Transport Layer Security (TLS) Protocol Version 1.2. http://tools.ietf.org/html/rfc5246
- [4] A Description of the ARIA Encryption Algorithm, 2010. http://tools.ietf.org/search/rfc5794
- [5] Themida, 2010. http://www.oreans.com
- [6] VMProtect, 2010. http://vmpsoft.com/products/vmprotect/
- [7] IOzone Filesystem Benchmark, Feb. 2013. http://www.iozone.org/
- [8] A. Averbuch, M. Kiperberg, and N. J. Zaidenberg. Truly-Protect: An Efficient VM-Based Software Protection. IEEE Systems Journal, 7(3):455–466, Sept. 2013.
- [9] S. Checkoway and H. Shacham. Iago attacks: Why the system call API is a bad untrusted RPC interface. In Proceedings of ASPLOS’08, New York, NY, USA, 2008.
- [10] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems. In Proceedings of ASPLOS’08, New York, NY, USA, 2008.
- [11] C. Collberg, C. Thomborson, and D. Low. A taxonomy of obfuscating transformations. Technical Report 148, Department of Computer Science, University of Auckland, July 1997.
- [12] David Challener, Kent Yoder, Ryan Catherman, David Safford, Leendert Van Doorn. A Practical Guide to Trusted Computing. IBM Press, 2007.
- [13] B. Lee, Y. Kim, and J. Kim. binOb+: A framework for potent and stealthy binary obfuscation. In Proceedings of ASIACCS’10, New York, NY, USA, 2010.
- [14] C. Linn and S. Debray. Obfuscation of executable code to improve resistance to static disassembly. In Proceedings of CCS’03, New York, NY, USA, 2003.
- [15] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB Reduction and Attestation. In Proceedings of SP’10, DC, USA, 2010.
- [16] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: An Execution Infrastructure for TCB Minimization. In Proceedings of Eurosys’08, pages 315–328, New York, NY, USA, 2008.
- [17] I. V. Popov, S. K. Debray, and G. R. Andrews. Binary Obfuscation Using Signals. In Proceedings of USENIX Security’07, Berkeley, CA, USA, 2007.
- [18] D. R. K. Ports and T. Garfinkel. Towards application security on untrusted operating systems. In Proceedings of the 3rd Conference on Hot Topics in Security, HOTSEC’08, pages 1:1–1:7, Berkeley, CA, USA, 2008. USENIX Association.
- [19] C. Ranger, R. Raghuraman, A. Penmetsa, G. Bradski, and C. Kozyrakis. Evaluating MapReduce for Multi-core and Multiprocessor Systems. In Proceedings of HPCA’07, Washington, DC, USA, 2007.
- [20] Rob van der Meulen, Janessa Rivera. Gartner Says Worldwide Public Cloud Services Market to Total $131 Billion. http://www.gartner.com/newsroom/id/2352816.
- [21] M. Sharif, A. Lanzi, J. Griffin, and W. Lee. Impeding Malware Analysis Using Conditional Code Obfuscation. Proceedings of NDSS’08, 2008.
- [22] A. Vasudevan, S. Chaki, L. Jia, J. McCune, J. Newsome, and A. Datta. Design, Implementation and Verification of an eXtensible and Modular Hypervisor Framework. In Proceedings of SP’13, pages 430–444, DC, USA, 2013.
- [23] Vasudevan, Amit, Parno, Bryan, Qu, Ning, Gligor, Virgil D, and Perrig, Adrian. Lockdown: Towards a Safe and Practical Architecture for Security Applications on Commodity Platforms. In Proceedings of the 5th International Conference on Trust and Trustworthy Computing, 2012.