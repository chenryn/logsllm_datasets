### Topics for Future Work

#### Assumptions in Proofs
In our proofs, we are compelled to rely on assumptions about the underlying primitives used in MTProto that have not been thoroughly studied. Specifically, we make related-key assumptions about the compression function of SHA-256, which could be avoided by modifying the use of these primitives in MTProto. These assumptions present interesting targets for further research in symmetric cryptography. Additionally, the complexity of our proofs and assumptions largely stems from MTProto's use of hash functions instead of well-studied (domain-separated) PRFs such as HMAC. We recommend that Telegram either adopt well-studied primitives in future versions of MTProto to facilitate analysis and enhance confidence in the design, or consider adopting TLS.

#### Telegram's End-to-End Encryption
While we have proven the security of the symmetric part of MTProto at a protocol level, it is important to note that by default, communication via Telegram must trust the Telegram servers. End-to-end encryption is optional and not available for group chats. Therefore, we recommend:
1. **Open-Sourcing Cryptographic Processing**: Telegram should open-source the cryptographic processing on their servers.
2. **Clarifying Security Claims**: Telegram should avoid referring to itself as an "encrypted messenger," which often implies end-to-end encryption. This is particularly relevant given the post-Snowden emphasis on strong encryption.

However, it is also worth noting that many high-risk users rely on MTProto and Telegram, even preferring it over Signal. This underscores the need to study these technologies and how they serve their user base.

### Acknowledgements
We thank Mihir Bellare for his valuable discussions and insights. The research of Mareková was supported by the EPSRC and the UK Government as part of the Centre for Doctoral Training in Cyber Security at Royal Holloway, University of London (EP/P009301/1). The research of Paterson was partially supported by a gift from VMware.

### References
[1] Telegram, “500 million users,” https://t.me/durov/147, Feb 2021.
[2] K. Ermoshina, H. Halpin, and F. Musiani, “Can Johnny build a protocol? Co-ordinating developer and user intentions for privacy-enhanced secure messaging protocols,” in European Workshop on Usable Security, 2017.
[3] M. R. Albrecht, J. Blasco, R. B. Jensen, and L. Mareková, “Collective information security in large-scale urban protests: the case of Hong Kong,” to appear at USENIX’21, pre-print at https://arxiv.org/abs/2105.14869, 2021.
[4] J. Jakobsen and C. Orlandi, “On the CCA (in)security of MTProto,” Proceedings of the 6th Workshop on Security and Privacy in Smartphones and Mobile Devices - SPSM’16, 2016. [Online]. Available: http://dx.doi.org/10.1145/2994459.2994468
[5] T. Sušánka and J. Kokeš, “Security analysis of the Telegram IM,” in Proceedings of the 1st Reversing and Offensive-oriented Trends Symposium, 2017, pp. 1–8.
[6] N. Kobeissi, “Formal Verification for Real-World Cryptographic Protocols and Implementations,” Theses, INRIA Paris; Ecole Normale Supérieure de Paris - ENS Paris, Dec. 2018, https://hal.inria.fr/tel-01950884.
[7] M. Miculan and N. Vitacolonna, “Automated symbolic verification of Telegram’s MTProto 2.0,” in Proceedings of the 18th International Conference on Security and Cryptography, SECRYPT 2021, S. De Capitani di Vimercati and P. Samarati, Eds. SciTePress, 2021, pp. 185–197.
[8] M. Fischlin, F. Günther, and C. Janson, “Robust channels: Handling unreliable networks in the record layers of QUIC and DTLS 1.3,” Cryptology ePrint Archive, Report 2020/718, 2020, https://eprint.iacr.org/2020/718.
[9] Telegram, “End-to-end encryption, secret chats – sending a request,” http://web.archive.org/web/20210126013030/https://core.telegram.org/api/end-to-end#sending-a-request, Feb 2021.
[10] ——, “tdlib,” https://github.com/tdlib/td, Sep 2020.
[11] ——, “tdlib – Transport.cpp,” https://github.com/tdlib/td/blob/v1.7.0/td/mtproto/Transport.cpp#L272, Apr 2021.
[12] M. R. Albrecht, K. G. Paterson, and G. J. Watson, “Plaintext recovery attacks against SSH,” in 2009 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, May 2009, pp. 16–26.
[13] M. Bellare and P. Rogaway, “The security of triple encryption and a framework for code-based game-playing proofs,” in EUROCRYPT 2006, ser. LNCS, S. Vaudenay, Ed., vol. 4004. Springer, Heidelberg, May / Jun. 2006, pp. 409–426.
[14] C. Campbell, “Design and specification of cryptographic capabilities,” IEEE Communications Society Magazine, vol. 16, no. 6, pp. 15–19, 1978.
[15] C. Jutla, “Attack on free-mac, sci.crypt,” https://groups.google.com/forum/#!topic/sci.crypt/4bkzm_n7UGA, Sep 2000.
[16] M. Bellare, A. Boldyreva, L. R. Knudsen, and C. Namprempre, “On-line ciphers and the hash-CBC constructions,” Journal of Cryptology, vol. 25, no. 4, pp. 640–679, Oct. 2012.
[17] NIST, “FIPS 180-4: Secure Hash Standard,” 2015, http://dx.doi.org/10.6028/NIST.FIPS.180-4.
[18] H. Handschuh and D. Naccache, “SHACAL (-submission to NESSIE-),” Proceedings of First Open NESSIE Workshop, 2000, http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.3.4066&rep=rep1&type=pdf.
[19] G. A. Marson and B. Poettering, “Security notions for bidirectional channels,” IACR Trans. Symm. Cryptol., vol. 2017, no. 1, pp. 405–426, 2017.
[20] M. Bellare, T. Kohno, and C. Namprempre, “Authenticated encryption in SSH: Provably fixing the SSH binary packet protocol,” in ACM CCS 2002, V. Atluri, Ed. ACM Press, Nov. 2002, pp. 1–11.
[21] T. Kohno, A. Palacio, and J. Black, “Building secure cryptographic transforms, or how to encrypt and MAC,” Cryptology ePrint Archive, Report 2003/177, 2003, http://eprint.iacr.org/2003/177.
[22] C. Boyd, B. Hale, S. F. Mjølsnes, and D. Stebila, “From stateless to stateful: Generic authentication and authenticated encryption constructions with application to TLS,” in CT-RSA 2016, ser. LNCS, K. Sako, Ed., vol. 9610. Springer, Heidelberg, Feb. / Mar. 2016, pp. 55–71.
[23] P. Rogaway and Y. Zhang, “Simplifying game-based definitions - indistinguishability up to correctness and its application to stateful AE,” in CRYPTO 2018, Part II, ser. LNCS, H. Shacham and A. Boldyreva, Eds., vol. 10992. Springer, Heidelberg, Aug. 2018, pp. 3–32.
[24] Telegram, “Mobile protocol: Detailed description,” http://web.archive.org/web/20210126200309/https://core.telegram.org/mtproto/description, Jan 2021.
[25] ——, “Schema,” https://core.telegram.org/schema, Sep 2020.
[26] ——, “TL language,” https://core.telegram.org/mtproto/TL, Sep 2020.
[27] Google, “BoringSSL AES IGE implementation,” https://github.com/DrKLO/Telegram/blob/d073b80063c568f31d81cc88c927b47c01a1dbf4/TMessagesProj/jni/boringssl/crypto/fipsmodule/aes/aes_ige.c, Jul 2018.
[28] Telegram, “MTProto transports,” http://web.archive.org/web/20200527124125/https://core.telegram.org/mtproto/mtproto-transports, May 2020.
[29] ——, “Sequence numbers in secret chats,” http://web.archive.org/web/20201031115541/https://core.telegram.org/api/end-to-end/seq_no, Jan 2021.
[30] K. Ludwig, “Trudy - Transparent TCP proxy,” 2017, https://github.com/praetorian-inc/trudy.
[31] Telegram, “Telegram Desktop – mtproto_serialized_request.cpp,” https://github.com/telegramdesktop/tdesktop/blob/v2.5.8/Telegram/SourceFiles/mtproto/details/mtproto_serialized_request.cpp#L15, Feb 2021.
[32] ——, “Mobile protocol: Detailed description – server salt,” http://web.archive.org/web/20210221134408/https://core.telegram.org/mtproto/description#server-salt, Feb 2021.
[33] ——, “Telegram Android – Datacenter.cpp,” https://github.com/DrKLO/Telegram/blob/release-7.4.0_2223/TMessagesProj/jni/tgnet/Datacenter.cpp#L1171, Feb 2021.
[34] ——, “Telegram Desktop – session_private.cpp,” https://github.com/telegramdesktop/tdesktop/blob/v2.6.1/Telegram/SourceFiles/mtproto/session_private.cpp#L1338, Mar 2021.
[35] ——, “Notice of ignored error message,” http://web.archive.org/web/20200527121939/https://core.telegram.org/mtproto/service_messages_about_messages#notice-of-ignored-error-message, May 2020.
[36] M. Bellare and T. Kohno, “A theoretical treatment of related-key attacks: RKA-PRPs, RKA-PRFs, and applications,” in EUROCRYPT 2003, ser. LNCS, E. Biham, Ed., vol. 2656. Springer, Heidelberg, May 2003, pp. 491–506.
[37] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway, “A concrete security treatment of symmetric encryption,” in 38th FOCS. IEEE Computer Society Press, Oct. 1997, pp. 394–403.
[38] P. Rogaway, “Nonce-based symmetric encryption,” in FSE 2004, ser. LNCS, B. K. Roy and W. Meier, Eds., vol. 3017. Springer, Heidelberg, Feb. 2004, pp. 348–359.
[39] J. Kim, G. Kim, S. Lee, J. Lim, and J. H. Song, “Related-key attacks on reduced rounds of SHACAL-2,” in INDOCRYPT 2004, ser. LNCS, A. Canteaut and K. Viswanathan, Eds., vol. 3348. Springer, Heidelberg, Dec. 2004, pp. 175–190.
[40] J. Lu, J. Kim, N. Keller, and O. Dunkelman, “Related-key rectangle attack on 42-round SHACAL-2,” in ISC 2006, ser. LNCS, S. K. Katsikas, J. Lopez, M. Backes, S. Gritzalis, and B. Preneel, Eds., vol. 4176. Springer, Heidelberg, Aug. / Sep. 2006, pp. 85–100.
[41] Telegram, “Telegram Desktop – session_private.cpp,” https://github.com/telegramdesktop/tdesktop/blob/v2.7.1/Telegram/SourceFiles/mtproto/session_private.cpp#L1258, Apr 2021.
[42] ——, “Security guidelines for client developers,” http://web.archive.org/web/20210203134436/https://core.telegram.org/mtproto/security_guidelines#mtproto-encrypted-messages, Feb 2021.
[43] N. J. AlFardan and K. G. Paterson, “Lucky thirteen: Breaking the TLS and DTLS record protocols,” in 2013 IEEE Symposium on Security and Privacy. IEEE Computer Society Press, May 2013, pp. 526–540.
[44] Telegram, “FAQ for the Technically Inclined – length extension attacks,” http://web.archive.org/web/20210203134422/https://core.telegram.org/techfaq#length-extension-attacks, Feb 2021.
[45] D. Bleichenbacher, “Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1,” in CRYPTO’98, ser. LNCS, H. Krawczyk, Ed., vol. 1462. Springer, Heidelberg, Aug. 1998, pp. 1–12.
[46] G. D. Micheli and N. Heninger, “Recovering cryptographic keys from partial information, by example,” Cryptology ePrint Archive, Report 2020/1506, 2020, https://eprint.iacr.org/2020/1506.
[47] M. R. Albrecht and N. Heninger, “On Bounded Distance Decoding with predicate: Breaking the 'lattice barrier' for the Hidden Number Problem,” Cryptology ePrint Archive, Report 2020/1540, 2020, https://eprint.iacr.org/2020/1540.

### Appendix A: Attacking the Key Exchange

During the key exchange, a client sends an RSA-encrypted message \( m \) containing \( (h_r, \gamma, n', pr) \) to the server, where \( h_r = \text{SHA-1}(\gamma \| n') \), \(\gamma\) is a known constant, \( n' \in \{0, 1\}^{256} \), and \( pr \) is some unknown padding. The tag \( h_r \) is intended to provide integrity. Our target secret is \( n' \).

Note that the SHA-1(·) does not include the padding, but \(\gamma\) has a variable bit-length known to the attacker. Thus, the payload must be parsed after decryption before verifying its integrity, which can enable a potential timing side channel. While we were unable to determine the parsing order of the Telegram servers or if they defend against such leaks, the Telegram developers confirmed the existence of vulnerable behavior on the server during the disclosure process.

If we assume that server-side parsing proceeds similarly to TDlib, a 32-bit header value \(\zeta\) (part of \(\gamma\)) is checked first, and the parsing function terminates early if it does not match. Assuming this event is detectable through a time difference, this creates an oracle that leaks when certain 32 bits match a known value. Our attack then follows the style of Bleichenbacher's attack [45].

Let \( c = m^e \mod N' \) be the ciphertext observed by the attacker, where \( e, N' \) is the server's public RSA key. We submit \( s_i^e \cdot c \) for carefully sampled \( s_i \) to our oracle to learn whether \( s_i \cdot m \) results in the target 32 bits matching the expected header value. By collecting several such answers, we can recover \( m \) and thus \( n' \).

A complication is that Bleichenbacher's adaptive recovery method, which iteratively restricts the interval, is not available since we learn the value of some middle bits rather than the most significant bits. Writing \( y \) for the bit position of \(\zeta\), we observe that \( (s_i \cdot m \mod N') - 2^y \cdot \zeta \mod 2^{y+32} \ll 2^{y+32} \), meaning the correct value \( m \) produces an unusually short value modulo \( 2^{y+32} \). This allows us to use lattice reduction to find \( m \) using known techniques [46], [47].

Knowing \( n' \) implies knowing `server_salt`. To recover `session_id`, we can run a guess-and-verify attack using the techniques from Section VI. Alternatively, we observe that \( n' \) is later used in the key exchange to protect the integrity of Diffie-Hellman shares \( g^a \) and \( g^b \). Thus, our attack would also enable a man-in-the-middle (MitM) attack on the key exchange. The full version contains the details and a proof-of-concept implementation of the lattice reduction part.