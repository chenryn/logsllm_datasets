### File Transfer and Analysis Fields

- **conn_uids**: Connection UID over which the file was transferred.
- **source**: ID of the file data source.
- **depth**: Value representing the depth of the file relative to its source.
- **analyzers**: Set of analysis types performed during file analysis.
- **mime_type**: File type determined by signatures.
- **filename**: Filename, if available from the source.
- **duration**: Duration for which the file was analyzed.
- **local_orig**: Indicates if the data originated from the local network.
- **is_orig**: Indicates if the file was sent by the originator or responder.
- **seen_bytes**: Number of bytes provided to the file analysis engine.
- **total_bytes**: Total number of bytes that should comprise the full file.
- **missing_bytes**: Number of bytes in the file stream that were missed.
- **overflow_bytes**: Number of bytes in the file stream not delivered to the stream file analyzers.
- **timedout**: Indicates if the file analysis timed out at least once.
- **parent_fuid**: Container file ID from which the file was extracted.
- **md5**: MD5 digest of the file contents.
- **sha1**: SHA1 digest of the file contents.
- **sha250**: SHA256 digest of the file contents.
- **extracted**: Local filename of the extracted file.
- **extracted_cutoff**: Set to true if the file being extracted was cut off, so the whole file was not extracted.
- **extracted_size**: Number of bytes extracted to disk.
- **entropy**: Information density of the file contents.

### Kerberos Log Fields

- **ts**: Timestamp for when the event occurred.
- **uid and id**: Underlying connection information.
- **request_type**: Authentication service (AS) or ticket granting service (TGS).
- **client**: Client information.
- **service**: Service information.
- **success**: Request result.
- **error_msg**: Error message.
- **from**: Ticket valid from.
- **till**: Ticket valid until.
- **cipher**: Ticket encryption type.
- **forwardable**: Forwardable ticket requested.
- **renewable**: Renewable ticket requested.
- **client_cert_subject**: Subject of the x.509 certificate offered by the client for PKINIT.
- **client_cert_fuid**: File UID for the x.509 client certificate for PKINIT authentication.
- **server_cert_subject**: Subject of the x.509 certificate offered by the server for PKINIT.
- **server_cert_fuid**: File UID for the x.509 server certificate for PKINIT authentication.
- **auth_ticket**: Ticket hash authorizing the request/transaction.
- **new_ticket**: Hash of the ticket returned by the KDC.

### IRC Log Fields

- **ts**: Timestamp when the command was seen.
- **uid and id**: Underlying connection information.
- **nick**: Nickname given for the connection.
- **user**: Username given for the connection.
- **command**: Command given by the client.
- **value**: Value for the command given by the client.
- **addl**: Any additional data for the command.
- **dcc_file_name**: DCC filename requested.
- **dcc_mime-type**: Sniffed MIME type of the file.
- **fuid**: File unique ID.

### SSH Log Fields

- **ts**: Time when the SSH connection began.
- **uid and id**: Underlying connection information.
- **version**: SSH major version.
- **auth_success**: Authentication result.
- **auth_attempts**: Number of authentication attempts seen.
- **direction**: Direction of the connection.
- **client**: Client’s version string.
- **server**: Server’s version string.
- **cipher_alg**: Encryption algorithm in use.
- **mac_alg**: Signed (MAC) algorithm used.
- **compression_alg**: Compression algorithm used.
- **kex_alg**: Key exchange algorithm used.
- **host_key_alg**: Server host key algorithm.
- **host_key**: Server's key fingerprint.
- **remote_location**: Geographic data related to the remote host of the connection.

### Tunnel Log Fields

- **ts**: Timestamp when tunnel activity was detected.
- **uid and id**: Underlying connection information.
- **tunnel_type**: Type of tunnel.
- **action**: Type of activity that occurred.

### Syslog Log Fields

- **ts**: Timestamp when the syslog message was seen.
- **uid and id**: Underlying connection information.
- **proto**: Protocol over which the message was seen.
- **facility**: Syslog facility for the message.
- **severity**: Syslog severity for the message.
- **message**: Plain text message.

### FTP Log Fields

- **ts**: Timestamp when the command was sent.
- **uid and id**: Underlying connection information.
- **user**: Username for the current FTP session.
- **password**: Password for the current FTP session.
- **command**: Command given by the client.
- **arg**: Argument for the command, if given.
- **mime_type**: Sniffed MIME type of the file.
- **file_size**: Size of the file.
- **reply_code**: Reply code from the server in response to the command.
- **reply_msg**: Reply message from the server in response to the command.
- **data_channel**: Expected FTP data channel.
- **fuid**: File unique ID.

### SMTP Log Fields

- **ts**: Timestamp when the message was first seen.
- **uid and id**: Underlying connection information.
- **trans_depth**: Transaction depth if there are multiple messages.
- **helo**: Contents of the HELO header.
- **mailfrom**: Email addresses found in the From header.
- **rcptto**: Email addresses found in the RCPT header.
- **date**: Contents of the Date header.
- **from**: Contents of the From header.
- **to**: Contents of the To header.
- **cc**: Contents of the CC header.
- **reply_to**: Contents of the Reply-To header.
- **msg_id**: Contents of the MsgID header.
- **in_reply_to**: Contents of the In-Reply-To header.
- **subject**: Contents of the Subject header.
- **x_originating_ip**: Contents of the X-Originating-IP header.
- **first_received**: Contents of the first Received header.
- **second_received**: Contents of the second Received header.
- **last_reply**: Last message the server sent to the client.
- **path**: Message transmission path, from headers.
- **user_agent**: Value of the User-Agent header from the client.
- **tls**: Indicates if the connection switched to using TLS.
- **fuids**: File unique IDs seen attached to the message.
- **is_webmail**: Indicates if the message was sent via webmail.

### HTTP Log Fields

- **ts**: Timestamp for when the request happened.
- **uid and id**: Underlying connection information.
- **trans_depth**: Pipelined depth into the connection.
- **method**: Verb used in the HTTP request.
- **host**: Value of the HOST header.
- **uri**: URI used in the request.
- **referrer**: Value of the "referrer" header.
- **version**: Value of the version portion of the request.
- **user_agent**: Value of the User-Agent header from the client.
- **request_body_len**: Uncompressed data size from the client.
- **response_body_len**: Uncompressed data size from the server.
- **status_code**: Status code returned by the server.
- **status_msg**: Status message returned by the server.
- **info_code**: Last seen 1xx info reply code from the server.
- **info_msg**: Last seen 1xx info reply message from the server.
- **tags**: Indicators of various attributes discovered.
- **username**: Username if basic-auth is performed.
- **password**: Password if basic-auth is performed.
- **proxied**: Header indicative of a proxied request.
- **orig_fuids**: Ordered vector of file unique IDs.
- **orig_filenames**: Ordered vector of filenames from the client.
- **orig_mime_types**: Ordered vector of MIME types.
- **resp_fuids**: Ordered vector of file unique IDs.
- **resp_filenames**: Ordered vector of filenames from the server.
- **resp_mime_types**: Ordered vector of MIME types.
- **client_header_names**: Vector of HTTP header names sent by the client.
- **server_header_names**: Vector of HTTP header names sent by the server.
- **cookie_vars**: Variable names extracted from all cookies.
- **uri_vars**: Variable names extracted from the URI.

### MySQL Log Fields

- **ts**: Timestamp for when the event happened.
- **uid and id**: Underlying connection information.
- **cmd**: Command that was issued.
- **arg**: Argument issued to the command.
- **success**: Server replies whether the command succeeded.
- **rows**: Number of affected rows, if any.
- **response**: Server message, if any.

### RADIUS Log Fields

- **ts**: Timestamp for when the event happened.
- **uid and id**: Underlying connection information.
- **username**: Username if present.
- **mac**: MAC address if present.
- **framed_addr**: Address given to the network access server.
- **remote_ip**: Remote IP address if present.
- **connect_info**: Connect info if present.
- **reply_msg**: Reply message from the server challenge.
- **result**: Successful or failed authentication.
- **duration**: Duration between the first request and either the "Access-Accept" message or an error.
- **ttl**: Time to live.

### SSL Log Fields

- **ts**: Time when the SSL connection was first detected.
- **uid and id**: Underlying connection information.
- **version**: SSL/TLS version chosen by the server.
- **cipher**: SSL/TLS cipher suite chosen by the server.
- **curve**: Elliptic curve chosen by the server using ECDH/ECDHE.
- **server_name**: Server name indicator SSL/TLS extension value.
- **resumed**: Flag indicating if the session was resumed.
- **last_alert**: Last alert seen during the connection.
- **next_protocol**: Next protocol chosen by the server using the application layer next protocol extension, if present.
- **flags**: Indicates if the SSL session was successfully established.
- **cert_chain_fuids**: Ordered vector of all certificate file unique IDs for certificates offered by the server.
- **client_cert_chain_fuids**: Ordered vector of all certificate file unique IDs for certificates offered by the client.
- **subject**: Subject of the x.509 certificate offered by the server.
- **issuer**: Subject of the signer of the server certificate.
- **client_subject**: Subject of the x.509 certificate offered by the client.
- **client_issuer**: Subject of the signer of the client certificate.
- **validation_status**: Certificate validation results for this connection.
- **ocsp_status**: OCSP validation result for the connection.
- **valid_ct_logs**: Number of different logs for which valid SCTs were encountered in the connection.
- **valid_ct_operators**: Number of different log operators for which valid SCTs were encountered in the connection.
- **notary**: Response from the ICSCI certificate notary.

### SIP Log Fields

- **ts**: Timestamp when the request happened.
- **uid and id**: Underlying connection information.
- **trans_depth**: Pipelined depth into the request/response transaction.
- **method**: Verb used in the SIP request.
- **uri**: URI used in the request.
- **date**: Contents of the Date header.
- **request_from**: Contents of the request from header.
- **request_to**: Contents of the to header.
- **response_from**: Contents of the response from header.
- **response_to**: Contents of the response to header.
- **reply_to**: Contents of the reply-to header.
- **call_id**: Contents of the call-id header.
- **seq**: Contents of the CSeq header.
- **subject**: Contents of the subject header.
- **request_path**: Client message transmission path.
- **response_path**: Server message transmission path, extracted from headers.
- **user_agent**: Contents of the user-agent header.
- **status_code**: Status code returned by the server.
- **status_msg**: Status message returned by the server.
- **warning**: Contents of the warning header.
- **request_body_len**: Content-length header from the client contents.
- **response_body_len**: Content-length header from the server contents.
- **content_type**: Content-type header from the server contents.

### NetworkMiner

#### Installation and Usage
1. Install NetworkMiner.
2. Click on "File" and select "Receive Pcap over IP."
3. Set the port number to receive on and start receiving.
4. Replay the pcap file.
5. Capture and forward traffic.

### Moloch

#### Operators
- **==**: Equals
- **!=**: Not Equals
- **>**: Greater than
- **>=**: Greater than or equal to
- **Filter by hostname**: `host.dns == <hostname>`
- **Filter by DNS hostname**: `host.dns == <dns_hostname>`

### Suricata

#### Rule Header Format
- **action**: pass, drop, reject, alert
- **Basic Protocols**: tcp, udp, ip, icmp
- **Application Protocols**: http, ftp, tls, smb, dns, dcerpc, ssh, smtp, imap, msn, Modbus, dnp3, enip, nfs, ikev2, krb5, ntp, dhcp
- **Source IP Address**: any or x.x.x.x or x.x.x.x/x or $var
- **Source Port**: any or XX or [XX:XX]
- **Destination IP Address**: any or x.x.x.x or x.x.x.x/x or $var
- **Destination Port**: any or XX or [XX:XX]

#### Rule Options Format
- **Message**: `msg:"message"`
- **Rule ID**: `sid:1000001`
- **Content**: `content:"string"`

#### Example Suricata Rule
```plaintext
alert tcp 192.168.x.x any -> $HOME_NET 21 (msg:"FTP connection attempt"; sid:1000002; rev:1;)
```

#### Mode Options
- **-c**: Define configuration file
- **-T -c**: Check configuration file
- **-v**: Sets verbosity
- **-M**: Send SMB alert to PC
- **-F**: BPF from file
- **-k**: Set checksum checking
- **-D**: Run in background
- **-i**: Specify interface
- **-r**: Replay on PCAP
- **--runmode**: Set run mode manually

### Snort

#### Rule Header Format
- **action**: alert, log, pass, activate, dynamic, drop, reject, sdrop
- **protocols**: tcp, udp, ip, icmp
- **Source IP Address**: any or x.x.x.x or x.x.x.x/x or $var
- **Source Port**: any or XX
- **Destination IP Address**: any or x.x.x.x or x.x.x.x/x or $var
- **Destination Port**: any or XX

#### Rule Options Format
- **Message**: `msg:"message"`
- **Snort Rule ID**: `sid:1000001`
- **Rule Revision**: `rev:X`
- **Category**: `classtype:`

#### Example Snort Rule
```plaintext
alert tcp 192.168.x.x any -> $HOME_NET 21 (msg:"FTP connection attempt"; sid:1000002; rev:1;)
```

#### Mode Options
- **-c**: Define configuration file
- **-T -c**: Check configuration file
- **-A**: Alternate alert modes
- **-s**: Alert to syslog
- **-v**: Print alert information
- **-M**: Send SMB alert to PC
- **-K**: ASCII log mode
- **-N**: No logging
- **-D**: Run in background
- **-i**: Specify interface
- **-e**: Display link layer header
- **-x**: Display headers in hex
- **-d**: Show packet layer payload

### Nmap

#### Target Specification
- **-iL**: Scan targets from a file
- **-iR**: Scan random hosts
- **--exclude**: Exclude specific targets from the search

#### Scan Techniques
- **-sS**: TCP SYN port scan
- **-sT**: TCP connect port scan
- **-sU**: UDP port scan
- **-sA**: TCP ACK port scan
- **-sW**: TCP Window port scan
- **-sM**: TCP Maimon port scan

#### Host Discovery
- **-sL**: No scan, list targets only
- **-sn**: No port scan, host discovery only
- **-Pn**: Port scan only, no host scan
- **-PS**: TCP SYN discovery on a specified port
- **-PA**: TCP ACK discovery on a specified port
- **-PU**: UDP discovery on a specified port
- **-PR**: ARP discovery on the local network
- **-n**: Never do DNS resolution
- **-6**: Enable IPv6 scanning

#### Specify Port Scanning
- **-p**: Scan a specific port
- **-p-**: Scan a range of ports
- **-p-**: Scan all ports
- **-F**: Fast port scan (top 100 ports)
- **--top-ports**: Scan the top N ports

#### Service and OS Detection
- **-sV**: Attempt to determine the version of the service running on the port
- **-A**: Enable OS detection, version detection, script scanning, and traceroute
- **-O**: Remote OS detection using TCP/IP stack fingerprinting

#### Timing
- **-T0**: Paranoid (0) Intrusion Detection System evasion
- **-T1**: Sneaky (1) Intrusion Detection System evasion
- **-T2**: Polite (2) slows down the scan to reduce bandwidth and target machine resources
- **-T3**: Normal (3) default speed
- **-T4**: Aggressive (4) speeds up scans; assumes you are on a reasonably fast and reliable network
- **-T5**: Insane (5) speeds up scans; assumes you are on an extraordinarily fast network

#### Scripts and Evasion
- **-sC**: Scan with default NSE scripts