### M5P Model for Predicting Time to Crash in Software Aging

The M5P model has demonstrated its capability to predict the time to crash with high accuracy, even when the system is nearing failure. Importantly, the model was not trained on executions that were injected with different workloads (N = 15, 30, 45 and T = 60, 90, 120). The generated model, composed of 35 inner nodes and 36 leafs, showed significant adaptability to new situations.

#### Training and Evaluation
We trained the model using a dataset of 6 executions, each involving a single resource under varying workloads (N = 15, 30, 75, M = constant). Despite the variations, the model accurately predicted the time to crash and workload errors simultaneously. The initial model, which included 2752 instances, was composed of 35 inner nodes and 36 leafs. 

After some inspection, we noted that the model was overly focused on irrelevant features. To address this, we decided to re-train the model using an expert feature/variable selection technique [22]. The new model, consisting of 17 inner nodes and 18 leafs, showed improved performance. Figure 4 clearly illustrates how the Java Heap memory is consumed and released in each phase until the memory resource is exhausted.

#### Performance Metrics
Table 4 shows the Mean Absolute Error (MAE) and other relevant metrics obtained by the M5P and Linear Regression models. We observed that M5P can manage periodic patterns and variable selection more effectively than Linear Regression, especially in the last 10 minutes before failure. However, M5P still faces challenges in certain scenarios, particularly when the underlying pattern is linear.

#### Dynamic Software Aging Due to Multiple Resources
Our next step was to evaluate the model's performance in scenarios where aging is caused by two resources simultaneously. The two resources involved were system memory and Tomcat Memory. The results indicated that M5P can handle multiple resource constraints, but it performs better when the root cause of failure is clearly identifiable. For example, if the used system memory exceeds 1306 MB, the model identifies system memory as the primary factor. If it is below 1306 MB, the model focuses on Tomcat Memory and the number of threads.

#### Related Work
Several approaches have been proposed to model and predict resource consumption and system performance. In [23], an off-line analysis framework is presented for capacity planning and post-mortem analysis. Naive Bayesian Networks (BN) and Tree Augmented Networks (TANs) are used to determine the most correlated resources. Linear Regression and ARMA models have also been applied for capacity planning and predicting resource exhaustion. However, these methods often assume a static system and do not account for dynamic changes or software aging.

#### Conclusions
We have proposed a machine learning approach to automatically build models that predict resource exhaustion in systems suffering from software aging. Our experiments show that M5P can accurately predict the time to crash and identify the root cause of failure, even in dynamic and complex scenarios. Future work will focus on determining the optimal moment for recovery actions and further improving the model's accuracy through advanced feature selection and human expertise integration.

#### Acknowledgments
This research was supported by the Spanish Ministry of Education and Science (projects 60625 and TIN2008-06582-C03-01) and the Generalitat de Catalunya (2009-SGR-980 and 2009-SGR-1428).

#### References
[1] D. Oppenheimer, A. Ganapathi, and D. A. Patterson. Why do internet services fail, and what can be done about it?. In 4th USENIX Symposium on Internet Technologies and Systems (USITS'03), 2003.
[2] S. Peret and P. Narasimham. Causes of Failure in Web applications. TR CMU-PDL-05-109, Carnegie Mellon Univ, 2005.
[3] MemProfiler: http://memprofiler.com/
[4] Parasoft Insure++: http://www.parasoft.com
[5] K. S. Trivedi, K. Vaidyanathan, and others. Analysis of Software Cost Models with Rejuvenation. IEEE IntI. SympoÂ­ sium on High Assurance Systems Engineering (HASE 2000).
[6] T. Dohi, K. Goseva-Popstojanova, and K. S. Trivedi. Fundamentals of Software aging. Proc. 1st Int. Workshop on Software Aging and Rejuvenation. 19th Int. Symp. on Software Reliability Engineering, 2008.
[7] Apache: http://httpd.apache.org/docs/
[8] A. Tai, S. Chau, L. Alkalaj, and H. Hecht. On-board Preventive Maintenance: an Optimal Duty Period. Proc. 3rd Workshop on Object-Oriented Real-Time Dependable Systems, 1997.
[9] E. Marshall. Fatal Error: How Patriot Overlooked Scud. Science, p. 1347, Mar. 1992.
[10] J. Alonso, R. Gavalda, and J. Torres. Predicting web server crashes: A case study in comparing prediction algorithms. Procs. Fifth IntI. Conf. on Autonomic and Autonomous Systems (ICAS 2009), April 20-25, Valencia, Spain, 2009.
[11] K. Vaidyanathan and K. Trivedi. A Comprehensive Model for Software Rejuvenation. IEEE Trans. On Dependable and Secure Computing, Vol. 2, No. 2, April 2005.
[12] G. Candea, E. Kiciman, S. Zhang, and A. Fox. JAGR: An Autonomous Self-Recovering Application Server. Proc. 5th Int. Workshop on Active Middleware Services, Seattle, June 2003.
[13] K. Cassidy, K. Gross, and A. Malekpour. Advanced Pattern Recognition for Detection of Complex Software Aging Phenomena in Online Transaction Processing Servers. Proc. of the Int. Conf. on Dependable Systems and Networks, DSN-2002.
[14] L. Cherkasova, K. Ozonat, N. Mi, J. Symons, and E. Smirni. Change? or Workload Change? Anomaly? Application Towards Automated Detection of Application Performance Anomaly and Change. Procs. 38th Annual IEEEIlFIP Conf. on Dependable Systems and Networks, DSN'2008, June 24-27.
[15] Y. Wang and I. H. Witten. Inducing Model Trees for Continuous Classes. In Proc. of the 9th European Conf. on Machine Learning Poster Papers, 1997.
[16] Weka 3.5.8: http://www.cs.waikato.ac.nz/ml/weka/
[17] TPC-W Java Version: http://www.ece.wisc.edu/pharm/
[18] MySQL Database Server: http://www.mysql.com/
[19] Apache Tomcat Server: http://tomcat.apache.org/
[20] Training and Test Datasets in WEKA format: http://cs.waikato.ac.nz/ml/weka/
[21] G. A. Hoffmann, K. S. Trivedi, and M. Malek. A best practice guide to resource forecasting for the Apache Webserver. IEEE Transactions on Reliability, 56, 4 (Dec 2007), 615-628.
[22] I. Cohen, M. Goldszmidt, T. Kelly, J. Symons, and J. S. Chase. Correlating instrumentation data to system states: A building block for automated diagnosis and control. In Proc. 6th USENIX OSOI, San Francisco, CA, Dec. 2004.
[23] Q. Zhang, L. Cherkasova, N. Mi, and E. Smirni. A regression-based analytic model for capacity planning of multi-tier applications. Cluster Computing (2008), vol 11: 197-211.
[24] K. Vaidyanathan and K. S. Trivedi. A Measurement-Based Model for Estimation of Resource Exhaustion in Operational Software Systems. In Proc. of the 10th IntI. Symp. on Software Reliability Engineering, 1999.
[25] L. Li, K. Vaidyanathan, and K. S. Trivedi. An Approach for Estimation of Software Aging in a Web Server. In Proc. of IntI. Symp. Empirical Software Engineering, 2002.
[26] A. Andrzejak and L. M. Silva. Using Machine Learning for Non-Intrusive Modeling and Prediction of Software Aging. In Procs of IEEE Network Operations and Management Symposium, NOMS 2008.
[27] R. K. Sahoo, A. J. Oliner, I. Rish, M. Gupta, J. E. Moreira, S. Ma, R. Vilalta, and A. Sivasubramaniam. Critical Event Prediction for Proactive Management in Large-scale Computer Clusters. In KDD, pages 426-435, August 2003.
[28] J. Alonso, J-L. Berral, R. Gavalda, and J. Torres. Adaptive online software aging prediction based on Machine Learning. TR UPC-DAC-RR-CAP-201O-4, 2010.