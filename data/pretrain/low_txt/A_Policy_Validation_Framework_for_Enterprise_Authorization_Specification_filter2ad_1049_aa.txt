# A Policy Validation Framework for Enterprise Authorization Specification

**Author:** Ramaswamy Chandramouli  
**Affiliation:** National Institute of Standards and Technology, Gaithersburg, MD, USA  
**Contact:** (PI:EMAIL)

## Abstract
The validation of an enterprise authorization specification for conformance to enterprise security policies often requires an out-of-band framework, as the enforcing access control mechanism may not provide this feature. This paper describes such a framework. The framework uses XML to encode the enterprise authorization specification, XML Schema to specify the underlying Role-Based Access Control (RBAC) model, and Schematron to define policy constraints. The conformance of the XML-encoded authorization specification to the RBAC model structure and policy constraints is verified using a Schematron Validator tool.

## 1. Introduction
An access control mechanism provided by or within any software (e.g., operating system, DBMS) is the executable module for controlling access to resources under the software's control. Every access control mechanism provides a structural framework called the access control model for specifying access restrictions for resources. An access control model is based on certain concepts involved in interaction with resources, which can be broadly described as entities (e.g., subject, object, operations, permission, user, role, label, group) and relations (e.g., the combination of an object and operation defines a permission). These describe the nature of the association between entities. The deployment of an access control model is called a configuration. The configuration of an access control model for a given enterprise contains instances of model entities for that enterprise (e.g., role instances like Teller, Loan Officer for a commercial bank environment), thus forming the Enterprise Authorization Specification.

The safety of a configuration is defined as the state where the configuration does not violate enterprise access control/authorization policies. To verify the safety of the configuration, policies must be expressed using access control model entities and relations. In other words, there should be no policy violations by the instances of the model entities and relations for the enterprise. A common approach to meet this requirement is to augment the access control model with expressions called constraints.

However, there are practical limitations in ensuring that the enterprise authorization specification is safe (i.e., does not violate policy constraints). The first limitation is the capability of the underlying access control model. Since policies are specified using model entities and relations, it is evident that some access control models are more amenable to expressing complex enterprise policies than others. Generally, the higher the level of abstraction of model entities, the greater the policy definition capabilities of the model. Secondly, even if the underlying access control model provides policy definition capabilities, the access control mechanism may not support all the types of constraints needed to capture those policy requirements. These two limitations highlight the need for an out-of-band approach (independent of the access control mechanism and the underlying software platform) to represent and validate the enterprise authorization specification for satisfaction of enterprise policy constraints.

In this paper, we provide such an approach. We have represented the enterprise authorization specification for a commercial bank in XML. The authorization specification is based on the Role-Based Access Control (RBAC) model [1]. The RBAC model itself is specified using XML Schema [4], and the RBAC XML Schema specification is augmented with policy constraints using the Schematron constraint specification language [9]. The XML document containing the bank-enterprise authorization specification is then validated using the Schematron Validation Tool [12].

The rest of the paper is organized as follows. In Section 2, we provide an overview of the various components in our policy validation framework and the rationale for their choice. Section 3 describes the specification of the RBAC model using the XML Schema language. Since RBAC model standards [10] provide a taxonomy of models (as opposed to a single RBAC model) and a choice of features to suit the enterprise environment, we will call our customized RBAC model for our bank environment the Bank-RBAC model. We will refer to the specification of the Bank-RBAC model in XML Schema as the Bank-RBAC XML Schema and the bank-enterprise authorization specification based on the RBAC XML Schema as the Bank-Authorization XML Data. Section 4 provides a sample encoding in XML of the bank-enterprise authorization specification. Section 5 deals with constraints that could be specified using the XML-Schema language features, covering all Bank-RBAC model-specific constraints as well as some rudimentary application-domain constraints. In Section 6, we point out the limitations of the XML Schema features for specifying complex policy (domain-specific) constraints and illustrate the use of Schematron language for expressing these domain constraints within our Bank-RBAC XML Schema document with several examples. We briefly describe related work in Section 7 and, in Section 8, we explain the scope for extending our current framework to enhance the capabilities of access control mechanisms to enforce dynamic policy constraints.

## 2. Policy Validation Framework Components
A framework for programmatic or tool-based validation of an enterprise authorization specification should have the following components:
- **Choice of the underlying access control model and a language for its specification**
- **A language for encoding the enterprise authorization specification based on the access control model**
- **A language for specifying policy requirements as constraints based on the access control model**
- **A tool or API for programmatic validation of the enterprise authorization specification for conformance to model specifications and policy constraints**

### 2.1 Choice of Access Control Model and Its Specification
Our motivation for choosing RBAC as the underlying access control model for the bank-enterprise authorization specification is that it is a sufficiently abstract model with configurations capable of expressing varied types of policies such as least privilege and separation of duties. RBAC has been widely implemented for different types of products such as Database Management Systems, Workflow systems, and Enterprise Security Management systems [18]. A brief description of RBAC Models is as follows.

The Role-Based Access Control Model (RBAC) provides a generalized approach for representing many types of access control policies (each describable only using a specific access control model) through the abstraction concept of roles. Many RBAC models have been proposed in the research literature [2], and the NIST RBAC standard provides a taxonomy of RBAC models [10]. The RBAC reference model in the standard has four main entities: users, roles, privileges, and sessions. Roles generally represent organizational functions (e.g., Teller in a bank). Users are assigned to roles, and privileges are assigned to roles as well. Users derive all their privileges by virtue of their role memberships. Users interact with the system through sessions, and roles are assigned to particular sessions as well. The interactions among these four entities of the RBAC model result in the following relations:
- **Role-Inheritance relation (RH)**
- **User-Role relation (UA)**
- **Privilege-Role relation (PA)**
- **User-Session relation (US)**
- **Role-Session relation (RS)**

A schematic diagram of our reference RBAC model is given in Figure 1.

### 2.2 A Language for Encoding Enterprise Authorization Specifications
Our choice of XML Schema for the Bank-RBAC model automatically provides XML as the choice for encoding enterprise authorization information. An advantage of encoding structured information (such as a bank-enterprise authorization specification) in XML is that there are special types of software called XML Parsers that can extract information from XML documents based on their associated structure (specified through the XML Schema document). These XML Parsers are based on standard application programming interfaces such as the Document Object Model (DOM) [5]. These parser libraries, implemented in various procedural languages, enable an application program written in the corresponding procedural language to create, maintain, and retrieve XML-encoded data. With an API for extracting information, a program can be written to properly interpret the contents of the validated enterprise authorization specification (encoded in XML) and map them to the native access control structures in the access control mechanisms present in heterogeneous application systems within the enterprise.

## 3. Specification of the RBAC Model Using XML Schema
Our Bank-RBAC model, chosen for illustration in our policy validation framework, is based on the RBAC reference model described above but without the session entity and its two associated relations (US and RS). We have excluded the session entity because it is a platform-dependent artifact. For example, a DBMS session has a different set of parameters than an O/S login session like Telnet. We have also excluded the constraint from the model specification per se since constraints require different enforcement mechanisms than the simple set of cardinality and participation restrictions associated with binary relations. To summarize, our Bank-RBAC model consists of users, roles, and privileges as entities and the following relations: Role Inheritance (RH), User-Role relation (UA), and Privilege-Role relation (PA).

Our language for Bank-RBAC model specification is XML Schema [4] because it provides constructs for specifying binary relations and hierarchical structures (the basic structural relationships of the RBAC model). XML Schema is one of the languages under the XML standard used for describing the structure of information within an XML document. Our choice of XML Schema over the other metadata language DTD is due to the fact that XML Schema supports the specification of cardinality and participation restrictions as well as rich data types (like enumerated data types). Additionally, we need a means to augment the specification of the Bank-RBAC model with policy constraints. The XML Schema language enables this feature by allowing the embedding of constraints within a special "annotation" tag. We have made use of this feature by embedding our policy constraints, specified using the Schematron language [9], within the XML-Schema representation of our Bank-enterprise RBAC model.

## 4. Sample Encoding in XML of Bank-Enterprise Authorization Specification
[This section would include a detailed example of how the bank-enterprise authorization specification is encoded in XML, including the XML tags and structure.]

## 5. Constraints Specified Using XML-Schema Language Features
[This section would detail the constraints that can be specified using the XML-Schema language features, covering all Bank-RBAC model-specific constraints as well as some rudimentary application-domain constraints.]

## 6. Limitations of XML Schema and Use of Schematron
[This section would discuss the limitations of XML Schema features for specifying complex policy (domain-specific) constraints and illustrate the use of Schematron language for expressing these domain constraints within the Bank-RBAC XML Schema document with several examples.]

## 7. Related Work
[This section would briefly describe related work in the field of policy validation and access control.]

## 8. Extending the Current Framework
[This section would explain the scope for extending the current framework to enhance the capabilities of access control mechanisms to enforce dynamic policy constraints.]

---

**Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003)  
1063-9527/03 $17.00 © 2003 IEEE**