### VII-C Unbound and TLS

We compare the performance of DNSCrypt and DNSCurve. We are not the first to propose integrating DNS with TLS. A recent review of DNS privacy suggested using TLS [9], and NLnet Labs' Unbound DNS server has supported TLS since December 2011. Currently, Unbound supports DNS-over-TLS only on a separate port and does not support out-of-order processing (as discussed in ยง III-A). There is no existing performance analysis for this setup. Our work introduces in-band negotiation and out-of-order processing (see Table II), and we are the first to study the performance of DNS over TCP and TLS. The only difference in our approach is the signaling of the TLS upgrade, which means our performance evaluation can be applied to other TLS methods. However, Unbound's use of a new port avoids one round-trip time (RTT) latency.

### VII-D Reusing Other Standards: DTLS, TLS over SCTP, HTTPS, and Tcpcrypt

While UDP, TCP, and TLS are widely used, other transport protocols offer different semantics. Datagram Transport Layer Security (DTLS) provides TLS over UDP [65], meeting our privacy requirement. Although DTLS aims to be lighter than TCP, it must recreate parts of TCP, such as reliability and ordering in the TLS handshake, and DoS prevention through cookies similar to SYN cookies in TCP. With DoS protection, DTLS offers no significant performance advantage over TCP, except for eliminating data ordering. (A more detailed evaluation is provided in our technical report [86].) Applications using DTLS face the same payload limits as UDP, and sometimes worse due to additional headers, so it does not address the policy constraints we observe. Given that DTLS libraries are less mature than TLS and offer few unique benefits, we recommend T-DNS.

TLS over SCTP has been standardized [38]. SCTP is an attractive alternative to TCP because it does not enforce strict ordering, but we believe its performance is otherwise similar to DTLS.

Several groups have proposed versions of DNS over HTTP. Kaminsky proposed DNS over HTTP [40] with some performance evaluation [41]; Unbound runs the DNS protocol over TLS on port 443 (a non-standard encoding on the HTTPS port); others have proposed making DNS queries over XML [61] or JSON [10] and full HTTP or HTTPS. Using port 443 saves one RTT for TLS negotiation, but using DNS encoding is non-standard, and HTTP encoding is significantly bulkier. Most of these proposals lack a complete specification (except XML [61]) or detailed performance analysis (Kaminsky provides some [41]). At the protocol level, DNS over HTTP is inherently slower than DNS over TCP due to the additional headers required by HTTP and the bulkiness of XML or JSON encodings. One semi-tuned proxy shows a 60 ms per query overhead [75], but a thorough study quantifying this overhead is future work.

Tcpcrypt provides encryption without authentication at the transport layer and is faster than TLS, shifting computation to the client [8]. T-DNS uses TLS for privacy (and DNSSEC for authentication), so tcpcrypt may be an attractive alternative to TLS. Tcpcrypt is relatively new and not yet standardized. Our analysis suggests that, since RTTs dominate performance, tcpcrypt will improve but not qualitatively change performance; experimental evaluation is future work.

The widespread use of TCP and TLS-over-TCP provides a wealth of time-tested implementations and libraries, while DTLS and SCTP implementations have seen less exercise. We show that TCP and TLS-over-TCP can provide near-UDP performance with connection caching. Because DTLS carries out the same protocol exchange as TLS (when spoof prevention is enabled), it will have the same latency. Our analysis applies directly to HTTP-based approaches, although their more verbose framing may introduce slightly higher overhead.

### VII-E Other Approaches to DNS Privacy

Zhao et al. [85] proposed adding cover traffic (additional queries) to DNS to conceal actual queries from eavesdroppers, and Castillo-Perez and Garcia-Alfaro extended this work [14]. These approaches may help protect against adversaries controlling the recursive resolver; we, however, focus on providing communication privacy without range queries.

Lu and Tsudik [47] identified several privacy threats to DNS and proposed replacing it with a DHT-based system, and Zhao et al. [84] later proposed DNS modifications to support their range queries [85]. Such approaches can provide strong privacy guarantees but pose significant deployment challenges due to the large protocol modifications required.

### VII-F Specific Attacks on DNS

As a critical protocol, DNS has been subject to targeted attacks. These often exploit open DNS recursive name servers, and the use of TLS' secure client-to-server channel can prevent them. Injection attacks include the Kaminsky vulnerability [39], mitigated by changes to DNS implementations; sending duplicate replies ahead of legitimate ones [2], mitigated by Hold-On at the client [24]; and injection of IP fragments to circumvent DNSSEC [32], mitigated by implementation and operational changes.

Although specific countermeasures exist for each of these attacks, responding to new attacks is costly and slow. Connection-level encryption like TLS may prevent a broad class of attacks that manipulate replies (e.g., [32]). Although TLS is not foolproof (e.g., it can be vulnerable to person-in-the-middle attacks), and we do not resolve all injection attacks (such as injection of TCP RST or TLS-close notify), we believe TLS significantly raises the bar for these attacks.

Recent proposals add cookies to UDP-based DNS to reduce the impact of DoS attacks [25]. While we support cookies, a shift to TCP addresses policy constraints and enables the use of TLS.

### VIII. Conclusion

Connectionless DNS is overdue for reassessment due to privacy limitations, security concerns, and size constraints that limit policy and evolution. Our analysis and experiments show that connection-oriented DNS addresses these problems, and the latency and resource needs of T-DNS are manageable.

### Acknowledgments

We would like to thank several contributors to this effort: the DNS-OARC DITL program, operators of A, J, B Root name servers, Level3, and Common Crawl. Calvin Ardi extracted domain names from web pages from the Common Crawl dataset. Xun Fan helped collect data from PlanetLab. Christos Papadopoulos provided servers at CSU for our high-latency experiments. John Wroclawski, Bill Manning, and prior anonymous reviewers provided comments on the paper, many of which were helpful. We also thank colleagues at Verisign and participants at the 2014 DNS-OARC workshop for their comments and thought-provoking questions, particularly about deployment. We thank Ted Faber and Joe Touch for their discussions about TCP.

Research by Liang Zhu, Zi Hu, and John Heidemann in this paper is partially sponsored by the Department of Homeland Security (DHS) Science and Technology Directorate, HSARPA, Cyber Security Division, BAA 11-01-RIKA, and Air Force Research Laboratory, Information Directorate under agreement number FA8750-12-2-0344, and contract number D08PC75599. The U.S. Government is authorized to make reprints for governmental purposes notwithstanding any copyright. The views contained herein are those of the authors and do not necessarily represent those of DHS or the U.S. Government.

### References

[References remain unchanged]

This version of the text is more structured, coherent, and professional, with improved clarity and flow.