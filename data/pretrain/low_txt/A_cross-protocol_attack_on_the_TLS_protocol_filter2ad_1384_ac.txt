### Nullity and Compact Representation Modulo n

The most compact representation of nullity modulo \( n \) is given by:
\[ r = \prod_{i=1}^{s} p_i \]
This demonstrates that a small root of nullity is highly improbable. For roots of unity of order \( k > 2 \), the condition is that \( n \) divides \( \Phi_k(r) \), where \( \Phi_k(x) \) is the \( k \)-th cyclotomic polynomial. For a random \( n \), this condition is also unlikely to be satisfied. Therefore, we will primarily focus on the case where \( Y_s = 1 \).

### Attack Success Probability

In this section, we provide a lower bound on the adversary's probability of success for the simplest attack, where the adversary expects to find the value 1 in \( Y_s \).

To compute the probability that \( Y_s = 1 \) for a valid message, we refer to Figure 3. For every fixed valid length \( L_g = k \) with \( 0 < k \leq s \), the probability can be calculated as follows:

\[ P(Y_s = 1) = \frac{1}{\prod_{i=1}^{s} p_i} \]

### Proposed Format for the ServerKeyExchange Message Signature

Figure 6 illustrates the proposed format for the ServerKeyExchange message signature. This format adheres to the TLS protocol message description.

```plaintext
struct {
    KeyExchangeAlgorithm kx_algorithm;
    Parameters params;
} ServerKeyExchange;
```

**Figure 6: The proposed format for the ServerKeyExchange message signature. Note that we follow the TLS protocol message description.**

- **opaque**: Used to indicate bytes containing uninterpreted data.
- **arrays of variable length**: Preceded by a number of bytes containing the length of the array.

### Drawbacks and Considerations

A drawback of this change is that it requires caching of previously exchanged messages until the 'ServerKeyExchange' message is sent. However, this should be an insignificant cost for modern servers.

### Conclusions

In this paper, we present a new attack on the TLS protocol that exploits the fact that a client can interpret signed explicit elliptic curve Diffie-Hellman (DH) key exchange parameters as valid plain DH parameters. This cross-protocol attack, similar in nature to the one introduced by Wagner and Schneier, enables server impersonation and is more efficient than breaking any of the involved cryptographic primitives.

However, the presented attack depends on the server supporting the explicit elliptic curves option, which is not supported in the tested open-source implementations, making them resistant to this attack. Therefore, the implementation of the explicit elliptic curves protocol option should be avoided unless a counter-measure like our proposed fix is in place.

A limiting factor of the attack in servers that support the explicit elliptic curve option is that it requires the initiation of \( 2^{40} \) sessions within the timeframe of the client session. While this may be prohibitive for attacking a specific client, it is feasible for attacking any random client on a cluster of servers.

Moreover, extensions of the TLS protocol, such as "False Start," which reduces protocol round-trips by sending the encrypted client's application data before the full handshake is complete, are at risk. The attack can be used by an adversary to recover the encryption key offline and access the encrypted data.

### Countermeasures

The described attack can be countered by verifying the server's DH public key for known invalid values. However, the TLS protocol should not over-rely on these tests, as other values could be used to mount variants of our attack but may not be easily detected. We believe that trust in the peer's signature needs to extend to a trust in the signed parameters.

It is also worth noting that our attack may not be the only possible cross-protocol attack on the TLS protocol. Due to the fact that the protocol in its current form allows a server to be used as an oracle by an adversary, other attacks that explore different algorithm interactions may also be possible. For this, we propose a fix to the protocol that defends against this family of attacks.

### Acknowledgments

The authors would like to thank David Wagner, Kenny Patterson, Andreas Pashalidis, Yngve Nysaeter Pettersen, Eric Rescorla, Adam Langley, Bodo Moeller, Marsh Ray, and the anonymous referees for their comments, which improved this manuscript. We also thank Koen Simoens and Elmar Tischhauser for their contributions to the formulation of this attack. This work was supported in part by the Institute for the Promotion of Innovation through Science and Technology in Flanders (IWT Vlaanderen) SBO project, the Research Council KU Leuven: GOA TENSE (GOA/11/007), and the IAP Programme P6/26 BCRYPT of the Belgian State (Belgian Science Policy).

### References

[1] R. J. Anderson and R. M. Needham. Robustness principles for public key protocols. In CRYPTO 1995, volume 963 of Lecture Notes in Computer Science, pages 236–247. Springer, 1995.

[2] G. V. Bard. A challenging but feasible blockwise-adaptive chosen-plaintext attack on SSL. In SECRYPT 2006, pages 99–109. INSTICC Press, 2006.

[3] S. Blake-Wilson, N. Bolyard, V. Gupta, C. Hawk, and B. Moeller. Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS). RFC 4492 (Informational), 2006.

[4] D. Bleichenbacher. Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1. In CRYPTO 1998, volume 1462 of Lecture Notes in Computer Science, pages 1–12. Springer, 1998.

[5] J. Bos, T. Kleinjung, A. Lenstra, and P. Montgomery. This is a tasty factor. Email on NMBRTHRY-list. 8 Mar 2010.

[6] Certicom Research. SEC 2: Recommended elliptic curve domain parameters, September 2000.

[7] C. J. F. Cremers. Feasibility of multi-protocol attacks. In ARES 2006, pages 287–294. IEEE Computer Society, 2006.

[8] K. Dickman. On the frequency of numbers containing prime factors of a certain relative magnitude. Arkiv för Matematik, Astronomi och Fysik, 22:1–14, 1930.

[9] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC 2246 (Proposed Standard), 1999.

[10] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.1. RFC 4346 (Proposed Standard), 2006.

[11] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), 2008.

[12] D. Dolev and A. C.-C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(2):198–207, 1983.

[13] P. Eronen and H. Tschofenig. Pre-Shared Key Ciphersuites for Transport Layer Security (TLS). RFC 4279 (Proposed Standard), 2005.

[14] A. Freier, P. Karlton, and P. Kocher. The Secure Sockets Layer (SSL) Protocol Version 3.0. RFC 6101 (Historic), 2011.

[15] T. Kleinjung. Discrete logarithms in GF(p) — 160 digits. Email on NMBRTHRY-list. 5 Feb 2007.

[16] V. Klíma, O. Pokorný, and T. Rosa. Attacking RSA-Based Sessions in SSL/TLS. In CHES 2003, volume 2779 of Lecture Notes in Computer Science, pages 426–440. Springer, 2003.

[17] H. Krawczyk, M. Bellare, and R. Canetti. HMAC: Keyed-Hashing for Message Authentication. RFC 2104 (Informational), Feb. 1997.

[18] A. Langley, N. Modadugu, and B. Moeller. Transport Layer Security (TLS) False Start. Internet Draft, 2010.

[19] A. K. Lenstra and H. W. Lenstra, Jr., editors. The development of the number field sieve, volume 1554 of Lecture Notes in Mathematics. Springer-Verlag, Berlin, 1993.

[20] H. W. Lenstra, Jr. Factoring integers with elliptic curves. Annals of Mathematics (2), 126(3):649–673, 1987.

[21] R Development Core Team. R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing, Vienna, Austria, 2012. ISBN 3-900051-07-0.

[22] J.-F. Raymond and A. Stiglic. Security issues in the Diffie-Hellman key agreement protocol. IEEE Transactions on Information Theory, 22:1–17, 2000.

[23] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov. Transport Layer Security (TLS) Renegotiation Indication Extension. RFC 5746 (Proposed Standard), 2010.

[24] I. Ristić. Internet SSL Survey, 2011. https://www.ssllabs.com/projects/ssl-survey/.

[25] D. Taylor, T. Wu, N. Mavrogiannopoulos, and T. Perrin. Using the Secure Remote Password (SRP) Protocol for TLS Authentication. RFC 5054 (Informational), 2007.

[26] S. Vaudenay. Security Flaws Induced by CBC Padding– Applications to SSL, IPSEC, WTLS ... In EUROCRYPT 2002, volume 2332 of Lecture Notes in Computer Science, pages 534–546. Springer, 2002.

[27] D. Wagner and B. Schneier. Analysis of the SSL 3.0 protocol. In Proceedings of the 2nd USENIX Workshop on Electronic Commerce, volume 2 of WOEC, pages 29–40. USENIX Association, 1996.