# iCloud Security and Keychain Recovery

## Table of Contents
1. [Push Notification and SMS Authentication](#push-notification-and-sms-authentication)
2. [Workaround for 2FA](#workaround-for-2fa)
3. [iCloud Sign-in](#icloud-sign-in)
4. [About iCloud Keychain](#about-icloud-keychain)
5. [Setting Up iCloud Keychain Without 2FA](#setting-up-icloud-keychain-without-2fa)
6. [Setting Up 2FA](#setting-up-2fa)
7. [Setting Up iCloud Keychain With 2FA](#setting-up-icloud-keychain-with-2fa)
8. [iOS 11 and 2FA](#ios-11-and-2fa)
9. [iCloud Sync Modes](#icloud-sync-modes)
10. [iCloud Circle of Trust](#icloud-circle-of-trust)
11. [iCloud Keychain Recovery Mode](#icloud-keychain-recovery-mode)
12. [iCloud Keychain Recovery Protection (No 2FA)](#icloud-keychain-recovery-protection-no-2fa)
13. [iCloud Keychain Recovery Protection (With 2FA)](#icloud-keychain-recovery-protection-with-2fa)
14. [Escrow Proxy Architecture](#escrow-proxy-architecture)
15. [Escrow Proxy API](#escrow-proxy-api)
16. [SRP Protocol (v6)](#srp-protocol-v6)
17. [Escrow Proxy – Access Tokens](#escrow-proxy-access-tokens)
18. [Keychain Sync Mode](#keychain-sync-mode)
19. [Tombs](#tombs)
20. [Other Components and Alternative Approaches](#other-components-and-alternative-approaches)
21. [Demo](#demo)
22. [Conclusions and Risks](#conclusions-and-risks)
23. [Additional Information](#additional-information)

---

## Push Notification and SMS Authentication
- **Push Notification**: As a method of authentication.
- **SMS to Trusted Phone Number**: Verification via SMS to a trusted phone number.
- **Generated by Trusted Device**: Authentication token generated by a trusted device (iPhone, iPad, iPod, PC, or Mac).

## Workaround for 2FA
- Use an authentication token from the device (iPhone, iPad, iPod), PC, or Mac.

## iCloud Sign-in
- For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

## About iCloud Keychain
- For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

## Setting Up iCloud Keychain Without 2FA
- For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

## Setting Up 2FA
- For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

## Setting Up iCloud Keychain With 2FA
- For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

## iOS 11 and 2FA
- For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

## iCloud Sync Modes
- **Recovery**: Recovery from keychain backup/storage in the iCloud.
- **Sync**: Real-time syncing across cloud and devices.
- **com.apple.sbd3 (Secure Backup Daemon)**: Keeps backups of keychain records and copies them to new trusted devices.
- **com.apple.security.cloudkeychainproxy3**: Supports "trusted circle" and adding new devices to it.

## iCloud Circle of Trust
- **Keychain Syncing**: Syncs keychain data across devices.
- **Circle of Trust**: Manages trusted devices.
- **Public Key**: Syncing identity specific to the device.
- **Private Key (Elliptical P256)**: Derived from the iCloud password.
- **Encryption**: Each synced item is encrypted specifically for the device and cannot be decrypted by other devices.
- **kSecAttrSynchronizable**: Only items with this attribute are synced.
- **Keychain Recovery**: Secure escrow service (optional).
- **No 2FA**: iCloud security code and SMS are needed.
- **No 2FA, No iCSC**: Recovery is not possible.
- **2FA**: Device passcode is needed.
- **Hardware Security Module (HSM)**: A secure hardware component for cryptographic operations.

## iCloud Keychain Recovery Mode
- **Key Version**: GCM or CBC algorithm (GCM used here).
- **Record Protection Class (KeyBag)**: #6 here.
- **Wrapped Key Size**: 0x48.
- **Encrypted Key Data**: Follows the wrapped key size.

## iCloud Keychain Recovery Protection (No 2FA)
- **iCSC (iCloud Security Code)**: 
  - **Not Set**: Sync mode only. Keychain records are not stored in the iCloud and cannot be recovered if all trusted devices are lost.
  - **Set**: 
    - **Push Notification**: To the trusted device.
    - **iCSC plus SMS Code**: 6-digit code sent via SMS.
    - **iCSC Storage**: Not stored anywhere in the cloud, only its hash (in Escrow). Three options are available:
      - Simple (4 or 6 digits, depending on iOS version).
      - Complex (any symbols, up to 32).
      - Device-generated/random (24 symbols).

## iCloud Keychain Recovery Protection (With 2FA)
- **Separate Record for Each Device**: Created at EscrowProxy (com.apple.icdp).
- **Contents**: BackupBagPassword (randomly generated).
- **Usage**: RFC6637 to encrypt keys from iCloud Keychain Keybags.

## Escrow Proxy Architecture
- **SRP (Secure Remote Password) Protocol**: 
  - Safe from MITM attacks.
  - Does not need the password to be transferred (even as a hash).
  - Does not keep the password on the server.
- **Cloud Keychain Records at EscrowProxy**:
  - **com.apple.securebackup**: Stores BackupBagPassword from Keybag for full restore.
  - **com.apple.icdp**: Stores BackupBagPassword from iCloud Keychain individual records for partial recovery.

## Escrow Proxy API
- **Commands and Actions**:
  - **/get_club_cert**: Returns the certificate associated with the account.
  - **/enroll**: Adds a new secure record.
  - **/get_records**: Gets a list of stored records.
  - **/get_sms_targets**: Gets the phone number associated with the account.
  - **/generate_sms_challenge**: Sends an approval code via SMS to the associated number.
  - **/srp_init**: Initializes authentication via SRP-6a protocol.
  - **/recover**: Finalizes SRP authentication and returns secure records on success.
  - **/update_record**: Updates records information associated with the account.

## SRP Protocol (v6)
- **iCSC (iCloud Secure Code)**: Uses SHA256.
- **N, g**: 2048-bit generator of the multiplicative group (RFC 5054).
- **User Enroll**: Password verifier and salt to EscrowCache.
- **EscrowCache**: Stores password verifier and salt.
- **Random Generation**: Random values for x and v.
- **If com.apple.securebackup record exists**: iCloud Security Code is set. Otherwise, EscrowProxy contains com.apple.icdp.record.hash_of_device records, allowing iCloud Keychain to be synced when one of the device passwords is provided.

## Escrow Proxy – Access Tokens
- **No 2FA, iCloud Security Code**: MME token is enough; validation uses SMS to the trusted number set in the account.
- **2FA, Device Passcode**: PET (Password Equivalent Token); TTL=5 minutes.
- **How to Obtain**:
  - **No 2FA**: Same as for backups, synced data, iCloud Photo Library, etc.
  - **2FA**: Pass GSA authentication to approve short-time access from the given device; new in macOS 10.11.

## Keychain Sync Mode
- **Circle of Trust**: Manages trusted devices.
- **KeyBag**: May contain full records in recovery mode (BackupKeyBag, com.apple.securebackup.record) or tombs unique for every domain (HomeKit, Wi-Fi, etc.).

## Tombs
- **Keybag & Metadata**: ASN.1 format.
- **Keychain Records**: Encrypted with Keybag.
- **Wrapped Key**: Keybag key wrapped with RFC 6637.
- **To Decrypt**:
  - Get tombs from com.apple.sbd.
  - Find all RecordIDs.
  - Get BackupBagPassword for the given RecordID using the device passcode.
  - Unwrap KeyBag key.
  - Decrypt keys from KeyBag.
  - Decrypt Keychain records.

## Other Components and Alternative Approaches
- **GSA (GrandSlam Authentication)**:
  - **gsa.apple.com**: Based on SRP protocol.
  - **Introduced in macOS 10.10** (basic).
  - **Improved in macOS 10.11**.
- **AnisietteData**:
  - **MachineID + OTP**: MachineID (60 bytes) is unique for the device; OTP (24 bytes) is random and refreshed every 90 seconds.
  - **Code Obfuscation**: Hardly obfuscated.
  - **Implementation**: Apple Private API.
- **Continuation Token**:
  - **Obtained through GSA**.
  - **Used to get tokens for other services**.
  - **No need to keep Apple ID and password on the device**.
  - **Can be used to get updated tokens with short TTL**.
  - **For further requests**: Use AlternateDSID and Continuation token instead of AppleID and password.

## Demo
- **No 2FA**:
  - Apple ID.
  - Password.
  - iCloud security code.
  - SMS to trusted number.
- **2FA**:
  - Apple ID.
  - Password.
  - No need to pass 2FA on trusted Desktop.
  - Passcode of enrolled device.

## Conclusions and Risks
- **Sync and Recovery**: Different approaches.
- **Trusted Circle**: Easy to get into but leaves traces.
- **Both Sync and Recovery Can Be Used**: Mixed approach.
- **Credentials Needed**: Credentials, trusted device, SMS, iCSC, or device passcode.
- **Legacy 2SV**: Forget it.
- **With 2FA**: Keychain is always stored in iCloud.
- **No 2FA, No iCSC**: Most secure from TLA?
- **Get Continuation Token (+machine ID)**: To obtain full access without anything else.
- **Implementation**: Relatively secure.

## Additional Information
- **iCloud Keychain Contains More Data**: Not just passwords, but also tokens (e.g., for 2FA-protected social network accounts).
- **iCloud Keychain Activation**: Activated right when you enable 2FA (or always exists), though it contains only system keys, not user data.
- **iCloud Keychain Encryption Key**: Used to lock some new iCloud data (iOS 11).
- **iCloud Keychain Approach**: Effective when local keychain is not easily accessible.

For more information, visit [ElcomSoft.com](https://www.elcomsoft.com/).

Thank you! Any questions?