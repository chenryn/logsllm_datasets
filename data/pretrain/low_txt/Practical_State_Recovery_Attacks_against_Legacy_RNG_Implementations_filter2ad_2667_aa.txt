# Practical State Recovery Attacks against Legacy RNG Implementations

## Authors
- **Shaanan N. Cohney**  
  University of Pennsylvania  
  Email: [PI:EMAIL]
- **Matthew D. Green**  
  Johns Hopkins University  
  Email: [PI:EMAIL]
- **Nadia Heninger**  
  University of Pennsylvania  
  Email: [PI:EMAIL]

## Abstract
The ANSI X9.17/X9.31 pseudorandom number generator (PRG) design, first standardized in 1985, has been widely used in cryptographic standards over the past three decades. This design uses timestamps and a statically keyed block cipher to produce pseudo-random output. Since 1998, it has been known that the key must remain secret for the output to be secure. However, neither the FIPS 140-2 standardization process nor NIST's later descriptions specified a key generation process.

We conducted a systematic study of publicly available FIPS 140-2 certifications for hundreds of products implementing the ANSI X9.31 PRG and found twelve products using static, hard-coded keys in their source code, making them vulnerable to an attacker who can learn this key. To demonstrate the practicality of such an attack, we developed a full passive decryption attack against FortiGate VPN gateway products using FortiOS v4, recovering the private key in seconds. We measured the prevalence of this vulnerability on the visible Internet using active scans and demonstrated state recovery and full private key recovery in the wild. Our work highlights the extent to which the validation and certification process has failed to provide even modest security guarantees.

## 1. Introduction

### Background
Random number generation is a critical component of any cryptographic system. While systems may withstand subtle flaws in cryptographic algorithm implementation, the ability to predict the output of a (pseudo)random number generator typically leads to catastrophic failures. In recent years, several cryptographic systems have been found to include flawed random and pseudorandom number generation subsystems, ranging from subtle biases to vulnerabilities that allow adversarial recovery of all random values used in a protocol execution. Some of these flaws appear to have been deliberately engineered, as indicated by leaks suggesting that the NIST Dual EC DRBG standard may have included a backdoor.

### Industry and Academic Efforts
Despite extensive exploration by industry and academia, the industry has consistently relied on a small number of common pseudorandom number generation algorithms, largely due to standards bodies. For example, until 2007, only two algorithms were approved for U.S. FIPS 140 certification, and prior to 1998, only one was approved. Recent discoveries surrounding flawed generators motivate a more thorough examination of these algorithms, especially in deployed products.

### The ANSI X9.17/31 Standards
The ANSI X9.17 "Financial Institution Key Management (Wholesale)" standard, published in 1985, defined a voluntary interoperability standard for cryptographic key generation and distribution in the financial industry. It included a PRG in its Appendix C, which uses a block cipher (originally DES) to produce output and update the state using the current time. This design appeared in U.S. government cryptographic standards for the next three decades, with occasional updates to the block cipher. A subset of the ANSI X9.17-1985 standard was adopted as FIPS-171 in 1992, specifying that only NIST-approved key generation algorithms should be used. FIPS 140-1, adopted in 1994, required modules to use a FIPS-approved key generation algorithm. The ANSI X9.31 standard from 1998 specified a variant using two-key 3DES, which was included in further standards such as FIPS 186-2 from 2004.

A critical element of the ANSI X9.17/X9.31 PRG is that the cipher key remains fixed through each iteration. If an attacker learns this key, they can recover all future and past states of the PRG by brute-forcing the timestamps. This design was deprecated in 2011 and removed from the FIPS list of approved PRG designs in January 2016. Despite this, NIST documents fail to specify how the cipher key should be generated, raising the possibility of vulnerabilities in FIPS-validated deployed systems.

### Our Study
To evaluate this possibility, we performed a systematic study of publicly available FIPS 140-2 certifications for hundreds of products implementing the ANSI X9.31 PRG. Our results show that several vendors use static, hard-coded keys in their source code, leaving them vulnerable to an attacker who can learn this key. To demonstrate the practicality of this attack, we reverse-engineered the binaries for a FortiGate VPN gateway using FortiOS version 4. We discovered that the ANSI X9.31 PRG implementation used for IPsec encryption uses a hard-coded key, which is a test value given in the NIST RNGVS specification. We performed full state recovery in under a second from the PRG output. We also demonstrated a full attack that learns the session keys for a FortiGate IPsec VPN using FortiOS version 4 in seconds. Furthermore, we demonstrated that this vulnerability exists in the wild by performing state recovery, key recovery, and decryption on handshakes collected using internet-wide scanning of VPN hosts.

### Contributions
In this work, we extend the research into weakened/backdoored random number generation in deployed products. Specifically, we demonstrate the existence of widespread and passively exploitable vulnerabilities in implementations of one of the most widely-deployed standard PRGs. Our contributions are:
- A systematic study of FIPS 140 security policy documentation, revealing several independently vulnerable PRG implementations from different vendors and critical failures in the standardization process.
- Development of an efficient passive X9.31 state recovery attack for the FortiOS v4 IPsec implementation, demonstrating full IPsec VPN decryption. Our reverse engineering was aided by a privilege escalation vulnerability we discovered and disclosed.
- Internet-wide measurements to measure the scope of this vulnerability among publicly-visible hosts, uncovering more than 25,000 vulnerable hosts, likely representing a small fraction of the true number of vulnerable hosts.
- Discussion of the impact of these findings on other standardized PRG designs, demonstrating that these vulnerabilities could affect other symmetric PRG implementations as well.

### Disclosure
We disclosed the X9.31 and privilege escalation vulnerabilities to Fortinet in October 2016. Fortinet responded by releasing a patch for affected versions of FortiOS. FortiOS version 5 did not implement the X9.31 PRG and is not vulnerable. We disclosed the potential for a flaw in Cisco Aironet devices to Cisco in June 2017. After an internal investigation, Cisco determined that the affected software versions had all reached end-of-support status and were unable to find the source code to validate the flaw. We notified the remaining vendors listed in Table 2 in October 2017. BeCrypt pointed us to version 3.0 of their library, which has been FIPS certified and no longer includes the X9.31 PRG. ViaSat USA had no record of the product indicated in the security documentation, and ViaSat UK failed to respond to our disclosure. We did not receive substantive responses from any other vendors.

NIST has decertified the ANSI X9.31 PRG for FIPS-compliant uses independently of our work. Despite this, we detected many vulnerable devices active on the open Internet, and additional devices may reside within enterprise networks. In personal communication, NIST noted several issues with cryptographic validation that they plan to improve. NIST introduced a five-year sunsetting policy for FIPS 140-2 validations in 2016 to weed out old validations and encourage upgrades. There is an effort underway to transition to automated testing for all modules and to change the liability model so that vendors carry full responsibility for the security of their products.

### Ethics
While we demonstrate key recovery and decryption against live hosts we do not own on the Internet, the traffic we decrypt in our proof-of-concept is a handshake we initiated with the host. We did not collect or attempt to decrypt traffic for connections in which we were not a party. We followed community best practices for network scans, including limiting scan rates, respecting hosts who wished to be blacklisted, and working with vendors and end users to minimize effects on their networks.