### DCCP Sequence Number and Acknowledgment Mechanism

In DCCP, every packet increments the sequence number, including pure acknowledgment packets. The receiver acknowledges the highest sequence number it has received. Since DCCP does not retransmit data, a cumulative acknowledgment mechanism similar to TCP is not applicable.

However, this design can lead to synchronization issues after extended periods of packet loss. To address this, DCCP uses a third handshake involving SYNC and SYNCACK packets to exchange current sequence numbers and resynchronize the connection.

### Congestion Control in DCCP

DCCP supports pluggable congestion control modules, known as CCIDs. Currently, two are standardized: CCID 2 (TCP-like Congestion Control) and CCID 3 (TCP-Friendly Rate Control, TFRC). This work focuses on CCID 2, which closely follows the TCP SACK congestion control algorithm, with modifications to handle the switch from byte-based to packet-based sequence numbers.

### Testing Methodology

For DCCP testing, we used `iperf` to measure throughput. Since DCCP is not a reliable protocol, performance was evaluated based on server goodput, or the actual data received. Given that DCCP is primarily supported on Linux and is relatively uncommon, our testing focused on the Linux kernel 3.13 implementation.

### SNAKE Attack Analysis

SNAKE identified several attacks against DCCP. It tested over 4,500 strategies, identifying 67 candidate strategies that caused significant performance issues or potential resource exhaustion, representing about 1.5% of the total strategies tested.

#### On-Path Attacks

Similar to TCP, DCCP was not designed to be resilient to on-path attacks. Therefore, all on-path attacks found by SNAKE were excluded from further analysis.

#### False Positives

Two attacks were identified as false positives. These attacks, similar to TCP, involved hitseqwindow strategies that inject packets at sequence window intervals, significantly slowing down the target connection. These strategies did not meet our attack threshold.

#### Client and Off-Path Attacks

After discarding on-path attacks and false positives, 38 strategies remained, representing actual attacks. Many of these strategies were functionally identical, just applied to different fields or with different values. Ultimately, three distinct attacks were identified, none of which have been previously reported in the literature.

1. **Acknowledgment Mung Resource Exhaustion Attack**:
   - **Description**: This attack exploits the fact that a DCCP sender will not close a connection until its send queue is empty. By convincing the congestion control to send at the minimum rate, an attacker can keep the connection open but useless for an extended period, leading to resource exhaustion.
   - **Impact**: While similar attacks on TCP last until the connection resets, DCCP continues sending at the minimum rate until the application explicitly closes the connection. Once closed, DCCP sends all queued packets and frees related resources.
   - **Mechanism**: The attack works by invalidating or dropping acknowledgments from the receiver, often by modifying sequence or acknowledgment numbers, leading to additional SYNC and SYNCACK exchanges.

2. **In-window Acknowledgment Sequence Number Modification**:
   - **Description**: This attack targets the sequence numbers in the receiver's acknowledgment packets. If the sequence number is increased but remains valid, the sender will acknowledge this modified number in its data packets.
   - **Impact**: When the receiver gets these data packets, it will drop them as they acknowledge non-existent packets, leading to a SYNC and SYNCACK exchange. This results in the loss of an entire window of packets and a reduction in the allowed sending rate.
   - **Execution**: An attacker can perform this attack by sniffing and spoofing network traffic, injecting an acknowledgment with a slightly higher sequence number.

3. **REQUEST Connection Termination Attack**:
   - **Description**: This attack terminates a DCCP connection during the connection initiation phase. A client enters the REQUEST state after sending a REQUEST packet and stays in this state until it receives a RESPONSE packet.
   - **Impact**: Only RESPONSE or RESET packets are valid in the REQUEST state; any other packet results in a reset. Both the RFC 4340 pseudo-code and the Linux 3.13 DCCP implementation check packet types before sequence numbers, making it possible to reset the connection by sending any non-RESPONSE packet.
   - **Execution**: An off-path, third-party attacker can launch this attack by guessing the connection initiation time and source port, and then sending a non-RESPONSE packet with any sequence and acknowledgment numbers.

### Benefits of State-Based Strategy Generation

Our state-based strategy generation algorithm enabled us to find 9 attacks across 2 transport protocols and 5 implementations, with 5 of these attacks being previously unknown. Each tested implementation required approximately 60 hours of computation, or 300 hours without parallelism.

By contrast, the time-interval-based attack injection approach would require 720 million strategies to test, taking 24 million hours of computation, or 548 years with equivalent parallelism. The send-packet-based attack injection approach, while more practical, still requires 22,967 hours of computation, or about 191 days with equivalent parallelism. Additionally, it does not support packet injection attacks modeling third-party, off-path attackers, making it impossible to find certain attacks like the Reset and Syn-Reset attacks.

### Conclusion

Transport layer networking protocols are critical to the Internet, yet their testing has been largely manual and ad-hoc, leading to numerous vulnerabilities. SNAKE, a tool for systematic testing of unmodified transport protocol implementations, uses the protocol state machine to reduce the search space. We demonstrated SNAKE by testing TCP and DCCP, finding 9 attacks, 5 of which are believed to be previously unknown. SNAKE requires only a description of the protocol packet headers and state machine, both readily available from protocol specifications. We believe SNAKE can contribute to securing the transport layer of modern network stacks.

### Acknowledgment

This work was partially supported by the National Science Foundation under Grant Number CNS-1223834. The opinions, findings, and conclusions expressed are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[1] G. Lyon, “Nmap,” 2014. [Online]. Available: http://nmap.org/
[2] N. Cardwell, Y. Cheng, L. Brakmo, M. Mathis, B. Raghavan, N. Dukkipati, H.-k. J. Chu, A. Terzis, and T. Herbert, “Packetdrill: Scriptable network stack testing, from sockets to packets,” in USENIX Annual Technical Conference. USENIX, 2013, pp. 213–218.
[3] Centre for the Protection of National Infrastructure, “Security assessment of the transmission control protocol,” Centre for the Protection of National Infrastructure, Tech. Rep. CPNI Technical Note 3/2009, 2009.
[4] V. Paxson, M. Allman, S. Dawson, W. Fenner, J. Griner, I. Heavens, K. Lahey, J. Semke, and B. Volz, “Known TCP implementation problems,” RFC 2525 (Informational), Mar. 1999.
[5] N. Kothari, R. Mahajan, T. Millstein, R. Govidan, and M. Musuvathi, “Finding protocol manipulation attacks,” in Proceedings of the ACM SIGCOMM 2011 Conference. ACM, 2011, pp. 26–37.
[6] H. Lee, J. Seibert, E. Hoque, C. Killian, and C. Nita-Rotaru, “Turret: A platform for automated attack finding in unmodified distributed system implementations,” in IEEE 34th International Conference on Distributed Computing Systems (ICDCS). IEEE, 2014, pp. 660–669.
[7] B. Guha and B. Mukherjee, “Network security via reverse engineering of TCP code: Vulnerability analysis and proposed solutions,” IEEE Network, vol. 11, no. 4, pp. 40–48, 1997.
[8] V. Kumar, P. Jayalekshmy, G. Patra, and R. Thangavelu, “On remote exploitation of TCP sender for low-rate flooding denial-of-service attack,” IEEE Communications Letters, vol. 13, no. 1, pp. 46–48, 2009.
[9] A. Kuzmanovic and E. Knightly, “Low-rate TCP-targeted denial of service attacks and counter strategies,” IEEE/ACM Transactions on Networking, vol. 14, no. 4, pp. 683–696, 2006.
[10] R. Morris, “A weakness in the 4.2 BSD unix TCP/IP software,” AT&T Bell Leboratories, Tech. Rep., 1985.
[11] S. Savage, N. Cardwell, D. Wetherall, and T. Anderson, “TCP congestion control with a misbehaving receiver,” ACM SIGCOMM Computer Communication Review, vol. 29, no. 5, p. 71, Oct. 1999.
[12] J. Touch, “Defending TCP against spoofing attacks,” RFC 4953 (Informational), Jul. 2007.
[13] P. Watson, “Slipping in the window: TCP reset attacks,” CanSecWest, http://bandwidthco.com/whitepapers/netforensics/tcpip/TCPResetAttacks.pdf, 2004.
[14] G. Banks, M. Cova, V. Felmetsger, K. Almeroth, R. Kemmer, and G. Vigna, “SNOOZE: Toward a Stateful NetwOrk prOtocol fuzZEr,” in Information Security Conference, ser. Lecture Notes in Computer Science, S. Katsikas, J. Lopez, M. Backes, S. Gritzalis, and B. Preneel, Eds., vol. 4176. Springer, 2006, pp. 343–358.
[15] H. J. Abdelnur, R. State, and O. Festor, “KiF: A stateful SIP fuzzer,” in Proceedings of the 1st International Conference on Principles, Systems and Applications of IP Telecommunications, ser. IPTComm ’07. ACM, 2007, pp. 47–56.
[16] J. Wang, T. Guo, P. Zhang, and Q. Xiao, “A model-based behavioral fuzzing approach for network service,” in Third International Conference on Instrumentation, Measurement, Computer, Communication and Control (IMCCC). IEEE, 2013, pp. 1129–1134.
[17] P. Tsankov, M. T. Dashti, and D. Basin, “SECFUZZ: Fuzz-testing security protocols,” in 7th International Workshop on Automation of Software Test (AST), 2012, pp. 1–7.
[18] C. Y. Cho, D. Babic, P. Poosankam, K. Z. Chen, E. X. Wu, and D. Song, “MACE: Model-inference-assisted concolic exploration for protocol and vulnerability discovery,” in USENIX Security Symposium. USENIX, 2011.
[19] H. Guo, M. Wu, L. Zhou, G. Hu, J. Yang, and L. Zhang, “Practical software model checking via dynamic interface reduction,” in Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles, ser. SOSP ’11. ACM, 2011, p. 265.
[20] Y. Wang, Z. Zhang, D. D. D. Yao, B. Qu, and L. Guo, “Inferring protocol state machine from network traces: A probabilistic approach,” in Proceedings of the 9th International Conference on Applied Cryptography and Network Security, ser. ACNS’11. Springer-Verlag, Jun. 2011, pp. 1–18.
[21] J. C. King, “Symbolic execution and program testing,” Communications of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[22] J. Postel, “User datagram protocol,” RFC 768 (Standard), Aug. 1980.
[23] S. Floyd, M. Handley, J. Padhye, and J. Widmer, “TCP friendly rate control (TFRC): Protocol specification,” RFC 5348 (Proposed Standard), Sep. 2008.
[24] J. Widmer and M. Handley, “TCP-friendly multicast congestion control (TFMCC): Protocol specification,” RFC 4654 (Experimental), Aug. 2006.
[25] M. Musuvathi and D. R. Engler, “Model checking large network protocol implementations,” in Proceedings of the 1st Symposium on Networked Systems Design and Implementation, ser. NSDI’04. USENIX Association, 2004, pp. 155–168.
[26] J. Postel, “Transmission control protocol,” RFC 793 (Standard), Sep. 1981.
[27] E. Gansner, E. Koutsofios, and S. North, “Drawing graphs with dot,” [Online]. Available: http://www.graphviz.org/Documentation/dotguide.pdf, 2006.
[28] WebHosting Talk, “DOS attack – security hosting and technology,” 2004. [Online]. Available: https://www.webhostingtalk.com/showthread.php?t=293069
[29] M. Allman, V. Paxson, and E. Blanton, “TCP congestion control,” RFC 5681 (Draft Standard), p. 18, Sep. 2009.
[30] O. Andreasson, “TCP variables,” 2002. [Online]. Available: https://www.frozentux.net/ipsysctl-tutorial/chunkyhtml/tcpvariables.html
[31] S. Floyd, M. Handley, and E. Kohler, “Datagram congestion control protocol (DCCP),” RFC 4340 (Proposed Standard), 2006.
[32] S. Floyd and E. Kohler, “Profile for datagram congestion control protocol (DCCP) congestion control ID 2: TCP-like congestion control,” RFC 4341 (Proposed Standard), 2006.