### Specific Items and Annotation
You can annotate interesting items for future reference, enabling easy retrieval and analysis.

### Automated Match-and-Replace Rules
Automated match-and-replace rules allow for dynamic modification of the contents of requests and responses. This feature is useful in various scenarios, such as:
- Rewriting the value of a cookie or other parameter in all requests.
- Removing cache directives.
- Simulating a specific browser using the User-Agent header.

### Direct Access to Proxy Functionality from the Browser
In addition to the client UI, you can access proxy functionality directly from your browser. This allows you to browse the proxy history and reissue individual requests, ensuring that the responses are fully processed and interpreted in the normal way.

### HTTP Message Manipulation Utilities
Utilities for manipulating the format of HTTP messages, such as converting between different request methods and content encodings, are available. These tools can be particularly useful when fine-tuning attacks like cross-site scripting (XSS).

### On-the-Fly HTML Feature Modification
Functions to automatically modify certain HTML features on-the-fly include:
- Unhiding hidden form fields.
- Removing input field limits.
- Removing JavaScript form validation.

### Figures
**Figure 20-5:** Burp proxy supports configuration of fine-grained rules for intercepting requests and responses.
**Figure 20-6:** The proxy history, allowing you to view, filter, search, and annotate requests and responses made via the proxy.

### Web Application Spiders
Web application spiders function similarly to traditional web spiders but are designed to handle the complexities of functional web applications. They address challenges such as:
- Forms-based navigation.
- JavaScript-based navigation.
- Multistage functions requiring actions in a defined sequence.
- Authentication and sessions.
- Parameter-based identifiers.
- Volatile parameters in the URL query string.

### Integrated Testing Suites
Integrated testing suites often share data between the intercepting proxy and spider components, allowing you to use the target application in the normal way while all requests are processed by the proxy and passed to the spider for further analysis. This user-directed spidering technique is detailed in Chapter 4.

### Spider Features
Common features in web application spiders include:
- Automatic update of the site map with URLs accessed via the intercepting proxy.
- Passive spidering of content processed by the proxy.
- Presentation of discovered content in table and tree form.
- Fine-grained control over the scope of automated spidering.
- Automatic parsing of HTML forms, scripts, comments, and images.
- Parsing of JavaScript content for URLs and resource names.
- Automatic and user-guided submission of forms.
- Detection of customized File Not Found responses.
- Checking for the robots.txt file.
- Automatic retrieval of the root of all enumerated directories.
- Automatic processing and use of cookies.
- Automatic testing of session dependence of individual pages.
- Automatic use of the correct Referer header.
- Control over the speed and order of automated spider requests.

### Figures
**Figure 20-7:** Results of passive application spidering, where items in gray have been identified passively but not yet requested.
**Figure 20-8:** Burp Spider prompting for user guidance when submitting forms.

### Web Application Fuzzers
To become a proficient web application hacker, automation is essential. Common features in web application fuzzers include:
- Manually configured probing for common vulnerabilities.
- Built-in attack payloads and versatile functions to generate arbitrary payloads.
- The ability to save attack results and response data.
- Customizable functions for viewing and analyzing responses.
- Functions for extracting useful data from the application’s responses.

### Figure
**Figure 20-9:** Results of a fuzzing exercise using Burp Intruder.

### Web Vulnerability Scanners
Integrated testing suites may include functions to scan for common web application vulnerabilities, which fall into two categories:
- **Passive scanning:** Monitoring requests and responses to identify vulnerabilities.
- **Active scanning:** Sending new requests to probe for vulnerabilities.

### Scanner Features
Typical ways to use the scanning function within an integrated testing suite include:
- Selecting areas of functionality within the site map to scan.
- Supplementing manual testing with real-time feedback.
- Using the automated spider to crawl and scan the entire application.
- Enabling live scanning as you browse.

### Figure
**Figure 20-10:** Results of live scanning as you browse with Burp Scanner.

### Manual Request Tools
Manual request tools provide the basic facility to issue a single request and view its response. Features often include:
- Integration with other suite components.
- A history of all requests and responses.
- A multitabbed interface.
- The ability to automatically follow redirections.

### Figure
**Figure 20-11:** A request being reissued manually using Burp Repeater.

### Session Token Analyzers
Some testing suites include functions to analyze the randomness properties of session cookies and other tokens. Burp Sequencer is a powerful tool for this purpose.

### Figure
**Figure 20-12:** Using Burp Sequencer to test the randomness properties of an application’s session token.

### Shared Functions and Utilities
Integrated test suites provide additional features such as:
- Analysis of HTTP message structure.
- Rendering of HTML content.
- Display and editing of messages in text and hexadecimal form.
- Search functions within all requests and responses.
- Automatic updating of the HTTP Content-Length header.
- Built-in encoders and decoders.
- Response comparison and highlighting differences.
- Automated content discovery and attack surface analysis.
- Saving and retrieving testing sessions.
- Support for upstream web proxies and SOCKS proxies.
- Handling of application sessions and login tokens.
- In-tool support for HTTP authentication methods.
- Support for client SSL certificates.
- Handling of obscure HTTP features.
- Extensibility through third-party code.
- Scheduling of common tasks.
- Persistent configuration of tool options.
- Platform independence.

### Figure
**Figure 20-13:** Requests and responses can be analyzed into their HTTP structure and parameters.

### Testing Workflow
A typical workflow for using an integrated testing suite involves:
- Browsing the application via the intercepting proxy.
- Compiling the proxy history and sitemap.
- Performing passive spidering of discovered content.
- Driving the overall testing process using your browser.

### Figure
**Figure 20-14:** Typical workflow for using an integrated testing suite.