**Theorem 7.** Scheme 5 is an unconditionally secure, (l,d) self-healing session key distribution scheme with m log q-bit privacy and t-revocation capability, as well as t-wise forward and backward secrecy. The values for C3 and C4 are slightly larger than those given in Figure 3 of [27]; we compute the values purely from the formula provided in Table 1 to ensure a fair comparison.

**Table 1: Comparison between different self-healing key distribution schemes.**

| Scheme | Communication Overhead | Storage Overhead | Self-Healing | Security | Revocation Capability |
| --- | --- | --- | --- | --- | --- |
| Scheme 3 | (2mt + m + t + 1) log q | 3m log q | Yes | Unconditional | Yes |
| Scheme 4 | (mt² + 2mt + m) log q | (3mt + t² + 2m + t) log q | Yes | Unconditional | Yes |
| Scheme 5 | (m² + m) log q | (m² + m) log q | Yes | Computational | Yes |

**Figure 1: Possible values of m and t for different self-healing key distribution schemes.**  
The areas under the corresponding lines represent the possible values of m and t, assuming a 64KB packet size and a 64-bit integer q. C4 can only guarantee computational security, while the other two schemes can guarantee unconditional security.

In the context of group key management, the Logical Key Hierarchy (LKH) approach requires 2 log₂ n messages for rekeying, where n is the number of group members. Several techniques have been proposed to improve LKH. Canetti et al. [7] reduce the number of rekey messages to log₂ n using a pseudo-random generator. Keystone [34] uses Forward Error Correction to reduce message loss and employs unicast-based re-synchronization to help group members recover lost keys. Periodic or batch rekeying has been proposed to reduce rekey costs for groups with frequent joins and leaves [15, 25, 35, 36]. Other issues, such as determining where to add, delete, or update keys in a key tree, and efficiently placing encrypted keys in multicast rekey packets, have also been thoroughly studied [15, 19, 35, 36].

Variations of LKH include associating keys with each level in the key hierarchy [8], combining a-ary LKH+ with unicast-based rekeying to balance communication and storage costs [22], decentralized management of group keys [23], One-way Function Trees (OFT) [1], and ELK, which inserts key verification information into data packets to help recover lost group keys [21].

These methods generally require at least O(log n) computation and communication to remove a member. In contrast, MARKS [6] only requires constant computation by distributing seeds of group keys with Binary Hash Tree (BHT) and its variations. However, MARKS is effective only if the duration a member stays in the group is known at the time of joining. Banerjee and Bhattacharjee [2] proposed organizing group members into clusters, where the cluster head can communicate with cluster members via both unicast and multicast. This approach incurs constant processing, communication, and storage overhead for single member joins or leaves, and logarithmic overhead for batch joins and/or leaves.

Group key distribution is closely related to broadcast encryption. Early results are summarized in [30]. Berkovits [3] presented a method to broadcast a secret to a predetermined set of receivers using secret sharing. Fiat and Naor [10] developed broadcast encryption schemes resilient to one bad member and proposed approaches to build high-resilient schemes from low-resilient ones based on Perfect Hash Families (PHF). Safavi-Naini and Wang [24] applied PHF to construct group rekey schemes directly. Blundo et al. [4, 5] developed one-time broadcast encryption schemes and extended them to allow interactive group key distribution. They also studied trade-offs between storage and communication requirements and their lower bounds. Stinson and van Trung [31] continued this work and presented new constructions of key predistribution and broadcast encryption schemes. Just et al. [13] derived a lower bound on the broadcast message size using information-theoretic techniques. Kumar et al. [14] proposed two schemes that can revoke up to t group members with storage overhead O(t log n) and communication overhead O(t log n) and O(t²), respectively. Naor et al. [20] developed a subset-difference-based bulk rekey method, which requires log₂ n keys to be stored at members and 2t communication overhead. Gong [11] proposed a method to securely broadcast different keys to different group members, but the broadcast message size is linear to the group size, whereas our method's broadcast message size is linear to the maximum number of colluding users and independent of the group size.

Our work is based on the self-healing key distribution approach with revocation capability in [27]. This technique uses secret sharing based on two-dimensional polynomials to distribute group keys, enabling group members to recover lost session keys as long as they have received one broadcast rekey message before and one after the session. Compared to earlier approaches, the advantage of both [27] and our techniques is that the computation, communication, and storage overheads required to revoke group members and achieve self-healing capability are independent of the group size, making them suitable for very large groups. Our techniques also improve upon those in [27], as discussed in Section 3, and can handle coalitions of more evicted group members.

**Conclusion and Future Work**

In this paper, we presented several group key distribution schemes for very large and dynamic groups over unreliable channels. By introducing a novel personal key distribution technique, we developed efficient, unconditionally secure, and self-healing group key distribution schemes that significantly improve upon previous approaches. We also developed two techniques that allow trade-offs between the broadcast message size and the recoverability of lost session keys, further reducing the broadcast message size in scenarios with frequent but short-term disruptions and long-term but infrequent disruptions, respectively. We have developed an API implementation to facilitate the deployment of the proposed techniques [16].

Future work includes developing a model that characterizes failures in large and highly mobile wireless networks and further investigating the performance of the proposed schemes in this model. Additionally, we aim to explore more efficient ways to perform the initial key distribution for the proposed schemes.

**References**

[1] D. Balenson, D. McGrew, and A. Sherman. Key management for large dynamic groups: One-way function trees and amortized initialization. Internet Draft, draft-balenson-groupkeymgmt-oft-00.txt, February 2000.

[2] S. Banerjee and B. Bhattacharjee. Scalable secure group communication over IP multicast. In Proc. of Int’l Conf. on Network Protocols, November 2001.

[3] S. Berkovits. How to broadcast a secret. In EUROCRYPT ’91, LNCS 547, pages 536–541, 1991.

[4] C. Blundo, A. De Santis, Amir Herzberg, S. Kutten, U. Vaccaro, and M. Yung. Perfectly-secure key distribution for dynamic conferences. In CRYPTO ’92, LNCS 740, pages 471–486, 1993.

[5] C. Blundo, L. Mattos, and D. R. Stinson. Trade-offs between communication and storage in unconditionally secure schemes for broadcast encryption and interactive key distribution. In CRYPTO ’96, LNCS 1109, 1996.

[6] B. Briscoe. MARKS: Zero side-effect multicast key management using arbitrarily revealed key sequences. In Proc. of 1st Int’l Workshop on Networked Group Communication, 1999.

[7] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas. Multicast security: A taxonomy and some efficient constructions. In IEEE INFOCOMM ’99, 1999.

[8] I. Chang, R. Engel, D. Kandlur, D. Pendarakis, and D. Saha. Key management for secure internet multicast using Boolean function minimization techniques. In IEEE INFOCOMM’99, volume 2, pages 689–698, 1999.

[9] T. Cover and J. Thomas. Elements of Information Theory. John Wiley and Sons, Inc., 1991.

[10] A. Fiat and M. Naor. Broadcast encryption. In CRYPTO ’93, LNCS 773, pages 480–491, 1994.

[11] L. Gong. New protocols for third-party-based authentication and secure broadcast. In Proc. of the 2nd ACM Conf. on Computer and Communications Security, 1994.

[12] H. Harney and C. Muckenhirn. Group key management protocol (GKMP) architecture. IETF Request for Comments, RFC 2094, July 1997.

[13] M. Just, E. Kranakis, D. Krizanc, and P. van Oorschot. On key distribution via true broadcasting. In Proc. of ACM Conf. on Computer and Communications Security, 1994.

[14] R. Kumar, S. Rajagopalan, and A. Sahai. Coding constructions for blacklisting problems without computational assumptions. In CRYPTO ’99, LNCS 1666, pages 609–623, 1999.

[15] X. S. Li, Y. R. Yang, M. Gouda, and S. S. Lam. Batch rekeying for secure group communications. In Proc. of 10th Int’l World Wide Web Conf., May 2001.

[16] D. Liu, P. Ning, and K. Sun. Efficient and self-healing group key distribution with revocation capability. Technical Report TR-2003-03, Department of Computer Science, North Carolina State University, 2003.

[17] M. Luby and J. Staddon. Combinatorial bounds for broadcast encryption. In EUROCRYPT ’98, LNCS 1403, 1998.

[18] S. Mittra. Iolus: A framework for scalable secure multicasting. In ACM SIGCOMM ’97, pages 277–288, 1997.

[19] M. J. Moyer, J. R. Rao, and P. Rohatgi. Maintaining balanced key trees for secure multicast. Internet Draft, draft-irtf-smug-key-tree-balance-00.txt, June 1999.

[20] D. Naor, M. Naor, and J. Lotspiech. Revocation and tracing schemes for stateless receivers. In CRYPTO ’01, LNCS 2139, pages 41–62, 2001.

[21] A. Perrig, D. Song, and J.D. Tygar. ELK, a new protocol for efficient large-group key distribution. In Proc. of IEEE Symp. on Security and Privacy, pages 247–262, 2001.

[22] R. Canetti, T. Malkin, and K. Nissim. Efficient communications-storage tradeoffs for multicast encryption. In EUROCRYPT ’99, LNCS 1592, pages 459–474, 1999.

[23] O. Rodeh, K. Birman, and D. Dolev. Optimized group rekey for group communication systems. In Proc. of Network and Distributed Systems Security Symp., 2000.

[24] R. Safavi-Naini and H. Wang. New constructions of secure multicast re-keying schemes using perfect hash families. In Proc. of the 7th ACM Conf. on Computer and Communications Security, pages 228–234, 2000.

[25] S. Setia, S. Koussih, and S. Jajodia. Kronos: A scalable group re-keying approach for secure multicast. In Proc. of IEEE Symp. on Security and Privacy, pages 215–228, 2000.

[26] A. Shamir. How to share a secret. Communications of the ACM, 22(11):612–613, 1979.

[27] J. Staddon, S. Miner, M. Franklin, D. Balfanz, M. Malkin, and D. Dean. Self-healing key distribution with revocation. In Proc. of 2002 IEEE Symp. on Security and Privacy, pages 224–240, 2002.

[28] M. Steiner, G. Tsudik, and M. Waidner. CLIQUES: A new approach to group key agreement. In Proc. of the Int’l Conf. on Distributed Computing Systems, pages 380–387, 1998.

[29] M. Steiner, G. Tsudik, and M. Waidner. Key agreement in dynamic peer groups. IEEE Trans. on Parallel and Distributed Systems, 11(8):769–780, August 2000.

[30] D. R. Stinson. On some methods for unconditionally secure key distribution and broadcast encryption. Designs, Codes and Cryptology, 12:215–243, 1997.

[31] D. R. Stinson and T. van Trung. Some new results on key distribution patterns and broadcast encryption. Designs, Codes and Cryptography, 14:261–279, 1998.

[32] D. Wallner, E. Harder, and R. Agee. Key management for multicast: Issues and architectures. IETF Request For Comments, RFC 2627, June 1999.

[33] C. K. Wong, M. G. Gouda, and S. S. Lam. Secure group communications using key graphs. In ACM SIGCOMM ’98, pages 68–79, 1998.

[34] C. K. Wong and S. S. Lam. Keystone: A group key management service. In Int’l Conf. on Telecomm., 2000.

[35] Y. R. Yang, X. S. Li, X. B. Zhang, and Simon S. Lam. Reliable group rekeying: A performance analysis. In ACM SIGCOMM ’01, pages 27–38, 2001.

[36] X. B. Zhang, S. S. Lam, D. Lee, and Y. R. Yang. Protocol design for scalable and reliable group rekeying. In Proc. SPIE Conf. on Scalability and Traffic Control in IP Networks, August 2001.