### Library OSes and Graphics Performance

Library Operating Systems (OSes), such as DrawBridge for Windows [39], provide user-space linkable OSes that execute applications in an isolated environment with a separate kernel. One of the open research challenges in these systems is achieving high-performance graphics. Android natively offers several mechanisms to maintain smooth UI performance. Anception’s design leverages this existing codebase to provide high-performance graphics.

### ExpressOS and Security Challenges

ExpressOS [35] focuses on running applications on a small, verified kernel. However, it requires that applications fully trust the data received from the unverified UI stack. Additionally, all privileged system services, including the UI and input stack, execute in the same virtual machine (VM), exposing sensitive user interactions to potential malware.

### System Call Servicing in Different Kernels

The basic mechanism of servicing system calls in different kernels has been used in various systems, such as Pods [32], VirtuOS [38], and ProxOS [43], for purposes like improving server reliability, isolating services, and enhancing tolerance against driver bugs. Anception incorporates lessons learned from system call interposition tools and their pitfalls, as described in [21] and [20].

### Flicker and Application Logic

Flicker [36] drastically reduces the trusted base of applications using AMD-specific processor support. It requires developers to construct Pieces of Application Logic (PALs) secured by hardware primitives. While Flicker promotes better modularity, it necessitates modifying applications for protection. In contrast, Anception works with unmodified applications.

### Microkernels for Smartphones

L4Android is a microkernel-based OS framework for Android built on the L4 microkernel [33]. Although microkernels reduce the trusted base of the core kernel, other privileged user-space processes can still be exploited to attack trusted applications. Anception provides an architecture to further reduce the trusted base by using lightweight Anception containers, where even privileged system processes are sandboxed away from trusted applications.

### App Sandboxing

Current approaches to providing isolation on Android focus on policy-based methods. For example, TrustDroid [11] creates trust domains through framework modifications and IPC monitoring, AppFence [26] presents fake data to untrusted applications, and Aurasium [46] performs bytecode rewriting to embed isolation policies in application code. Janus [23] was an early tool implementing policy-based system call interception, and seccomp [1] is a more recent version based on similar principles. These systems are vulnerable to privileged user-space bugs and kernel exploits and do not enable a framework for designing secure applications. PREC [24] targets foiling exploits by exponentially slowing down the execution of system calls from suspicious contexts but does not protect against kernel-level exploits or reduce the amount of system code that applications must trust.

### File System Isolation

Android recently incorporated a multiuser feature that helps set up multiple user accounts and share a single device. Each user is assigned a unique user ID and corresponding directory on the filesystem (`/data/users/ID`). When the device switches to a user, symbolic links are set up from an application's directory (`/data/data/APP.PKG`) to the private user directory. However, this design does not aim to isolate malware that uses privilege escalation attacks and does not provide memory isolation in the event of an OS compromise.

### Conclusion

Modern operating systems like Android provide a large attack surface for malware, consisting of both privileged services and the operating system kernel. This paper presents Anception, a system architecture for de-privileging both portions of the kernel services and several system services for Android, with the goal of protecting UI input and virtual memory of high-assurance applications from malware. To achieve this, security-relevant portions of applications (UI-related services, virtual memory, code, and security-relevant keys) are kept on the host, while the rest of the application's functionality and many system services are segregated into a guest VM container. Analysis shows that the Anception architecture moves significant chunks of privileged code to an unprivileged container and would have blocked 23 out of 25 previously reported privilege-escalation vulnerabilities on Android. The penalty for de-privileging code with Anception is modest. While I/O and cross-container IPCs take a performance hit on microbenchmarks, the impact on macrobenchmarks and real applications is minimal.

### Acknowledgments

We thank the reviewers for their thoughtful feedback. This material is based upon work supported by the National Science Foundation under Grant Numbers 093629 and 1318722. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation.

### References

[1] Google Chrome Security Team. seccomp-sandbox. Accessed 18 July 2013. http://code.google.com/p/seccompsandbox/

[2] Kaspersky Labs. Targeted Trojan Attack Stealing Personal Information. http://www.securelist.com/en/blog/208194186/Android-Trojan-Found-in-Targeted-Attack

[3] McAfee Labs. Phishing Attack Replaces Banking App with Malware. http://blogs.mcafee.com/mcafee-labs/phishing-attack-replaces-android-banking-apps-with-malware

[4] AMIRI SANI, A., BOOS, K., YUN, M. H., AND ZHONG, L. Rio: A System Solution for Sharing I/O Between Mobile Systems. In Proc. of the 12th Annual Int. Conf. on Mobile Systems, Applications, and Services (New York, NY, USA, 2014), MobiSys '14, ACM, pp. 259–272.

[5] ANDRUS, J., DALL, C., HOF, A. V., LAADAN, O., AND NIEH, J. Cells: A Virtual Mobile Smartphone Architecture. In Proc. of the 23rd ACM Symp. on Operating Systems Principles (New York, NY, USA, 2011), SOSP '11, ACM, pp. 173–187.

[6] Antutu Benchmark for Android. Accessed 18 July 2013. https://play.google.com/store/apps/details?id=com.antutu.ABenchMark

[7] ARTENSTEIN, N., AND REVIVO, I. Man-in-the-Binder: He Who Controls IPC, Controls the Droid. In Europe BlackHat Conf. (Amsterdam, The Netherlands, 2014).

[8] BARR, K., BUNGALE, P., DEASY, S., GYURIS, V., HUNG, P., NEWELL, C., TUCH, H., AND ZOPPIS, B. The VMware Mobile Virtualization Platform: Is That a Hypervisor in Your Pocket? SIGOPS Oper. Syst. Rev. 44, 4 (Dec. 2010), 124–135.

[9] BAUMANN, A., PEINADO, M., AND HUNT, G. Shielding Applications from an Untrusted Cloud with Haven. In Proc. of the 11th USENIX Conf. on Operating Systems Design and Implementation (Berkeley, CA, USA, 2014), OSDI'14, USENIX Association, pp. 267–283.

[10] BERNASCHI, M., GABRIELLI, E., AND MANCINI, L. V. Remus: A Security-Enhanced Operating System. ACM Trans. Inf. Syst. Secur. 5, 1 (Feb. 2002), 36–61.

[11] BUGIEL, S., DAVI, L., DMITRIENKO, A., HEUSER, S., SADEGHI, A.-R., AND SHASTRY, B. Practical and Lightweight Domain Isolation on Android. In Proc. of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 51–62.

[12] CHECKOWAY, S., AND SHACHAM, H. Iago Attacks: Why the System Call API is a Bad Untrusted RPC Interface. In Proc. of the 18th Int. Conf. on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2013), ASPLOS '13, ACM, pp. 253–264.

[13] CHEN, X., GARFINKEL, T., LEWIS, E. C., SUBRAHMANYAM, P., WALDSPURGER, C. A., BONEH, D., DWOSKIN, J., AND PORTS, D. R. Overshadow: A Virtualization-Based Approach to Retrofitting Protection in Commodity Operating Systems. In Proc. of the 13th Int. Conf. on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2008), ASPLOS XIII, ACM, pp. 2–13.

[14] Linux Kernel Vulnerabilities: CVE Database. http://www.cvedetails.com/vulnerability-list/vendor-id-33/product-id-47/cvssscoremin-7/cvssscoremax-7.99/Linux-Linux-Kernel.html

[15] DALL, C., AND NIEH, J. KVM for ARM. In Proc. of the 12th Annual Linux Sym. (2010), OLS'10.

[16] DIKE, J. User-Mode Linux. In ALS '01: Proc. of the 5th Annual Linux Showcase & Conf. (Berkeley, CA, USA, 2001), USENIX Association, p. 2.

[17] Dual Android Using Xen. Efficient GPU Virtualization. Samsung R&D UK. http://ftp.osuosl.org/pub/fosdem//2014/UD2120 Chavanne/Saturday/DualAndroid on Nexus 10 using XEN.webm

[18] EncFS. http://www.arg0.net/encfs

[19] Filesystem in Userspace. http://fuse.sourceforge.net/

[20] GARFINKEL, T. Traps and Pitfalls: Practical Problems in System Call Interposition Based Security Tools. In Proc. Network and Distributed Systems Security Symp. (2003), pp. 163–176.

[21] GARFINKEL, T., PFAFF, B., AND ROSENBLUM, M. Ostia: A Delegating Architecture for Secure System Call Interposition. In IN NDSS (2003). http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2011-1823

[22] CVE-2011-1823. Gingerbreak. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1823

[23] GOLDBERG, I., WAGNER, D., THOMAS, R., AND BREWER, E. A. A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. In Proc. of the 6th Conf. on USENIX Security Symp., Focusing on Applications of Cryptography - Volume 6 (Berkeley, CA, USA, 1996), SSYM'96, USENIX Association, pp. 1–1.

[24] HO, T.-H., DEAN, D., GU, X., AND ENCK, W. PREC: Practical Root Exploit Containment for Android Devices. In 4th ACM Conf. on Data and Application Security and Privacy (San Antonio, TX, March 2014).

[25] HOFMANN, O. S., KIM, S., DUNN, A. M., LEE, M. Z., AND WITCHEL, E. InkTag: Secure Applications on an Untrusted Operating System. In Proc. of the 18th Int. Conf. on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2013), ASPLOS '13, ACM, pp. 265–278.

[26] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND WETHERALL, D. These Aren't the Droids You're Looking For: Retrofitting Android to Protect Data from Imperious Applications. In Proc. of the 18th ACM Conf. on Computer and Communications Security (New York, NY, USA, 2011), CCS '11, ACM, pp. 639–652.

[27] HWANG, J. Y., SUH, S. B., HEO, S. K., PARK, C. J., RYU, J. M., PARK, S. Y., AND KIM, C. R. Xen on ARM: System Virtualization Using Xen Hypervisor for ARM-Based Secure Mobile Phones. pp. 257–261.

[28] JEONG, S., LEE, K., LEE, S., SON, S., AND WON, Y. I/O Stack Optimization for Smartphones. In Proceedings of the 2013 USENIX Conference on Annual Technical Conference (Berkeley, CA, USA, 2013), USENIX ATC'13, USENIX Association, pp. 309–320.

[29] JIANG, X. GingerMaster Malware on Android. http://www.csc.ncsu.edu/faculty/jiang/GingerMaster/

[30] Kaspersky Security Bulletin for 2013. https://www.securelist.com/en/analysis/204792318/Kaspersky-Security-Bulletin-2013-Overall-statistics-for-2013

[31] Kernelchopper/Motochopper Exploit. http://forum.xda-developers.com/showthread.php?t=2255491

[32] LAADAN, O., AND NIEH, J. Operating System Virtualization: Practice and Experience. In Proc. of the 3rd Annual Haifa Experimental Systems Conf. (New York, NY, USA, 2010), SYSTOR '10, ACM, pp. 17:1–17:12.

[33] LANGE, M., LIEBERGELD, S., LACKORZYNSKI, A., WARG, A., AND PETER, M. L4Android: A Generic Operating System Framework for Secure Smartphones. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (New York, NY, USA, 2011), SPSM '11, ACM, pp. 39–50.

[34] Levitator. Jon Larimer and Jon Oberheide. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1352

[35] MAI, H., PEK, E., XUE, H., KING, S. T., AND MADHUSUDAN, P. Verifying Security Invariants in ExpressOS. In Proc. of the 18th Int. Conf. on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2013), ASPLOS '13, ACM, pp. 293–304.

[36] MCCUNE, J. M., PARNO, B. J., PERRIG, A., REITER, M. K., AND ISOZAKI, H. Flicker: An Execution Infrastructure for TCB Minimization. In Proc. of the 3rd ACM SIGOPS/EuroSys European Conf. on Computer Systems 2008 (New York, NY, USA, 2008), Eurosys '08, ACM, pp. 315–328.

[37] mempdroid exploit. CVE-2012-0056. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0056

[38] NIKOLAEV, R., AND BACK, G. VirtuOS: An Operating System with Kernel Virtualization. In Proc. of the 24th ACM Symp. on Operating Systems Principles (New York, NY, USA, 2013), SOSP '13, ACM, pp. 116–132.

[39] PORTER, D. E., BOYD-WICKIZER, S., HOWELL, J., OLINSKY, R., AND HUNT, G. C. Rethinking the Library OS from the Top Down. In Proc. of the 16th Int. Conf. on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2011), ASPLOS XVI, ACM, pp. 291–304.

[40] RUSSEL, R. lguest: Implementing the Little Linux Hypervisor. In OLS '07: Proc. of the Linux Sym. (June 2007), vol. 2, pp. 173–178.

[41] RUSSELL, R. virtio: Towards a De-Facto Standard for Virtual I/O Devices. SIGOPS Oper. Syst. Rev. 42, 5 (July 2008), 95–103.

[42] SunSpider Benchmark for Android. Accessed 18 July 2013. https://www.webkit.org/perf/sunspider/sunspider.html

[43] TA-MIN, R., LITTY, L., AND LIE, D. Splitting Interfaces: Making Trust Between Applications and Operating Systems Configurable. In Proc. of the 7th Symp. on Operating Systems Design and Implementation (Berkeley, CA, USA, 2006), OSDI '06, USENIX Association, pp. 279–292.

[44] WEI, X., GOMEZ, L., NEAMTIU, I., AND FALOUTSOS, M. Profile-Droid: Multi-Layer Profiling of Android Applications. In Proc. of the 18th Annual Int. Conf. on Mobile Computing and Networking (New York, NY, USA, 2012), Mobicom '12, ACM, pp. 137–148.

[45] WU, C., ZHOU, Y., PATEL, K., LIANG, Z., AND JIANG, X. AirBag: Boosting Smartphone Resistance to Malware Infection. In Proc. of the Network and Distributed System Security Symp. (NDSS) (San Diego, CA, February 2014).

[46] XU, R., SAIDI, H., AND ANDERSON, R. Aurasium: Practical Policy Enforcement for Android Applications. In Proc. of the 21st USENIX Conf. on Security Symp. (Berkeley, CA, USA, 2012), Security'12, USENIX Association, pp. 27–27.

[47] YANG, J., AND SHIN, K. G. Using Hypervisor to Provide Data Secrecy for User Applications on a Per-Page Basis. In Proc. of the 4th ACM SIGPLAN/SIGOPS Int. Conf. on Virtual Execution Environments (New York, NY, USA, 2008), VEE '08, ACM, pp. 71–80.