### Network Analysis and Attack Graphs

#### Field Test Network
The network, depicted in Figure 6, consists of 252 hosts, 3,777 ports, and 8,585 vulnerability instances. No credentials were modeled. The prototype utilized Nessus scans to analyze the network.

**Figure 7: Simplified MP Attack Graph for Field Test Network**

During the analysis, it was discovered that a rule allowed internal access to all hosts on the inside network via port 53. This misconfiguration only permitted access from a few IP addresses that are not typically used. A Nessus scan from the external network to the internal network would not have detected this, as the scanner would not have used one of the source IP addresses capable of crossing the firewall. The rule was subsequently corrected.

We also recomputed the results for all possible starting locations, placing an attacker with the ability to spoof any source IP on all four links and allowing all hosts to initiate attacks. No recommendations were generated in this case. The process of loading the data, computing reachability, generating the MP graph, and saving the results took 0.54 seconds. The resulting MP graph illustrates all possible compromises in the network, from all sources to all targets.

The field trial's results are encouraging and highlight the utility of the prototype. We are planning additional field trials on larger, more complex networks.

#### Simulation Test Results
To explore the scalability of the NetSPA prototype, we used an automated network generator. The generator created a network with three sites, each having a generic structure with its own border firewall, DMZ, internal administrative LAN, and multiple other internal subnets. Each border firewall had 400 filtering rules, six hosts on the DMZ and administrative LANs, and 80 other internal subnets per site. Each host had 30 open ports, with half having ten remote-to-other vulnerabilities and the other half having one remote-to-root vulnerability and nine remote-to-other vulnerabilities. The available attack path to each site from the outside compromised one DMZ host, then one administrative LAN host, and finally all vulnerable hosts on the inside. NetSPA collapsed each site’s 80 internal subnets into single unfiltered reachability groups.

**Figure 9: NetSPA Prototype Performance on Simulated Networks**

The figure shows the performance with varying numbers of hosts on the 80 internal subnets of each site. These tests were conducted on a Windows Server 2003 machine with dual 3.2GHz Xeon processors and 2GB of main memory. The prototype is single-threaded and never required swap space. The Y-axis represents elapsed time in seconds, and the X-axis represents the total number of hosts in the network. The plot indicates linear scaling, as expected, and the system handled a network with over 50,000 hosts and over 1.5 million ports in under four minutes. NetSPA computed an "all sources, all targets" graph for the 50,000-host network in under twelve minutes.

Further examination of different network configurations via simulation is detailed in [18]. The results in [18] are based on the use of predictive graphs, and we expect equal or better performance with MP graphs.

### Related Work

Some of the earliest work on attack graphs was done manually. Schneier’s attack trees [29] were designed to show how multiple attack vectors could compromise a single target. This approach is useful for brainstorming potential attacks with a single goal or target, such as opening a safe.

Ritchey and Ammann [26] used model checking techniques to find counterexamples to asserted security policies. Although model checking is powerful and does not require a monotonicity assumption, it scales poorly for this application, as noted in [15] and elsewhere.

Others explored the use of full attack graphs [8, 30], as shown in Figure 3a. Full graphs grow combinatorially and are impractical for large networks.

Ammann [7] developed an algorithm with a complexity of approximately O(n^6) [19], capable of finding all exploits that can reach a specified goal. Jajodia et al. [15] adopted this algorithm and used Nessus scans to identify some vulnerability locations and reachability. The paper proposes using Nessus to discern reachability by scanning from every subnet to every other subnet. This approach may introduce false negatives by neglecting reachability unavailable to the machine running the Nessus scanner.

In later work, Ammann et al. [6] presented an O(n^3) algorithm that quickly determines the worst-case attack paths to all compromisable hosts, arguing that such a report is more useful to an analyst or penetration tester than a traditional attack graph. The method may also be applicable to MP graphs in O(n^3) time.

An approach by Ou et al., called MulVAL [25], uses a monotonic, logic-based approach. MulVAL requires reachability information and can produce counterexamples for a given security policy. The results in [25] imply a runtime between O(n^2) and O(n^3).

Other research has focused on the source data required to build attack graphs. Ritchey et al. [27] propose a framework for modeling reachability. NetSPA uses a simpler reachability model decoupled from the underlying host’s software and vulnerabilities. Detailed models of vulnerability and attacker action, such as Templeton and Levitt’s prerequisite/postcondition model [31] and Cuppens and Ortalo’s LAMBDA language [14], provide more detailed information. However, no readily available vulnerability database or similarly detailed scanner exists to populate these models, making such tools highly desirable.

Another research focus is tools to explore attack graphs and utilize the information they contain. Noel et al. [24] propose a symbolic equation simplifier to produce recommendations from the graphs of [15]. They also simplified graphs by collapsing related nodes [22] and transforming the results into an adjacency matrix [23]. NetSPA’s simplified MP graphs serve a similar purpose to [22], but improved visualization remains a concern.

Attack graphs can be used to form scenarios and filter IDS alerts. If a series of alerts matches a path in the attack graph, the series is more likely to be genuine. Papers such as [11, 13, 21] explore this use, but no practical application has yet been constructed. Ning identifies the method in [21] as NP-complete. NetSPA does not address this application.

Skybox View [5] is a commercial tool that performs attack graph analysis. The company’s patent [12] describes their algorithm, asserts it is O(n^3), and suggests O(n^2) is possible. Based on the patent, we believe Skybox may build a variant of a host-compromised graph [17, 18] and may report only the shortest attack paths to a target.

### Conclusion and Future Work

Attack graphs are a valuable tool for network defenders. Vulnerability scanners like Nessus report numerous vulnerabilities, prioritizing them based on severity in isolation. The effort required to patch all identified vulnerabilities can be overwhelming. Attack graphs coalesce a large amount of source data into a useful form, focusing defenders’ efforts where they are most needed.

Attack graphs also enable the safe evaluation of what-if scenarios. Defenders can hypothesize new zero-day vulnerabilities on critical services, evaluate the impact of changing filtering rulesets, and determine the effect of adding a new, unpatched computer to various locations in a network. Alterations to the network’s defensive posture can be evaluated before implementation.

The NetSPA system builds a new graph type, the multiple-prerequisite graph, at a very high rate of speed, enabling defenders to quickly evaluate their network’s security. The NetSPA prototype can be applied to real operational networks using data that network operators routinely collect. It produces valuable recommendations in seconds, helping defenders filter through thousands of vulnerability reports to find the most critical vulnerabilities.

The NetSPA prototype is currently useful, as it can automatically import readily available source data, quickly compute network reachability, generate the MP graph, and produce useful recommendations. However, additional work remains. The MP graph can support credentials as prerequisites for successful attacks, but we lack readily available credential data and have not conducted field trials utilizing it. "Client-side" attacks, where an attacker uses a malicious server to compromise a vulnerable client, are not modeled. The recommendation algorithm does not evaluate the effect of protecting multiple prerequisites. New approaches to graph visualization and simplification may make better use of the graph. Future work on obtaining better source data and producing better recommendations and analyses promises to further improve the system’s utility.

### Acknowledgments

We would like to thank Seth Webster and Doug Stetson for reviewing much of the NetSPA prototype’s design, Chris Scott, Kendra Kratkiewicz, Rob Cunningham, and Mike Artz for their contributions to previous versions of NetSPA, Carrie Gates for feedback on the paper, and unnamed system administrators who helped us perform the field trial.

### References

[1] Bugtraq vulnerability database. http://www.securityfocus.com/archive/.
[2] Common vulnerabilities and exposures dictionary. http://cve.mitre.org.
[3] Graphviz - graph visualization software. http://www.graphviz.org.
[4] Nessus security scanner. http://www.nessus.org.
[5] Skybox security, inc. http://www.skyboxsecurity.com.
[6] P. Ammann, J. Pamula, R. Ritchey, and J. Street. A host-based approach to network attack chaining analysis. In ACSAC '05: Proceedings of the 21st Annual Computer Security Applications Conference, pages 72–84. IEEE Computer Society, 2005.
[7] P. Ammann, D. Wijesekera, and S. Kaushik. Scalable, graph-based network vulnerability analysis. In Proceedings of the 9th ACM Conference on Computer and Communications Security, pages 217–224. ACM Press, 2002.
[8] M. Artz. NETspa, a network security planning architecture. Master’s thesis, Massachusetts Institute of Technology, 2002.
[9] D. Bilar. Quantitative Risk Analysis of Computer Networks. PhD thesis, Dartmouth College, 2003.
[10] R. E. Bryant. Graph-based algorithms for boolean function manipulation. In IEEE Trans. Comput., volume 35, pages 677–691. IEEE Computer Society, 1986.
[11] S. Cheung, U. Lindqvist, et al. Modeling multistep cyber attacks for scenario recognition. In Proceedings of the Third DARPA Information Survivability Conference and Exposition (DISCEX III), pages 284–292, 2003.
[12] G. Cohen et al. System and method for risk detection and analysis in a computer network. United States Patent 6,952,779, October 2005.
[13] F. Cuppens. Alert correlation in a cooperative intrusion detection framework. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, Washington, DC, 2002.
[14] F. Cuppens and R. Ortalo. LAMBDA: A language to model a database for detection of attacks. In Proceedings of the Third International Workshop on Recent Advances in Intrusion Detection, pages 197–216, 2000.
[15] S. Jajodia, S. Noel, and B. O’Berry. Topological Analysis of Network Attack Vulnerability, chapter 5. Kluwer Academic Publisher, 2003.
[16] J. Lind-Nielsen et al. BuDDy, a binary decision diagram library. http://buddy.sourceforge.net/.
[17] R. P. Lippmann et al. Validating and restoring defense in depth using attack graphs. In Proceedings of MILCOM 2006, Washington, DC.
[18] R. P. Lippmann et al. Evaluating and strengthening enterprise network security using attack graphs. Technical report, MIT Lincoln Laboratory, Lexington, MA, 2005. ESC-TR-2005-064.
[19] R. P. Lippmann and K. W. Ingols. An annotated review of past papers on attack graphs. Technical report, MIT Lincoln Laboratory, Lexington, MA, 2005. ESC-TR-2005-054.
[20] P. Meil, T. Grance, et al. NVD national vulnerability database. http://nvd.nist.gov.
[21] P. Ning and D. Xu. Learning attack strategies from intrusion alerts. In Proceedings of the 10th ACM Conference on Computer and Communications Security, pages 200–209, New York, NY, 2003. ACM Press.
[22] S. Noel and S. Jajodia. Managing attack graph complexity through visual hierarchical aggregation. In VizSEC/DMSEC '04: Proceedings of the 2004 ACM workshop on Visualization and data mining for computer security, pages 109–118, New York, NY, USA, 2004. ACM Press.
[23] S. Noel and S. Jajodia. Understanding complex network attack graphs through clustered adjacency matrices. In Proceedings of the 21st Annual Computer Security Conference (ACSAC), pages 160–169, 2005.
[24] S. Noel, S. Jajodia, B. O’Berry, and M. Jacobs. Efficient minimum-cost network hardening via exploit dependency graphs. In ACSAC '03: Proceedings of the 19th Annual Computer Security Applications Conference, pages 86–95. IEEE Computer Society, 2003.
[25] X. Ou, S. Govindavajhala, and A. Appel. MulVAL: A logic-based network security analyzer. In Proceedings of the 14th USENIX Security Symposium, pages 113–128, 2005.
[26] R. Ritchey and P. Ammann. Using model checking to analyze network vulnerabilities. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 156–165, 2000.
[27] R. Ritchey, B. O’Berry, and S. Noel. Representing TCP/IP connectivity for topological analysis of network security. In Proceedings of the 18th Annual Computer Security Applications Conference, Las Vegas, NV, 2002.
[28] S. Schechter, J. Jung, W. Stockwell, and C. McLain. Inoculating SSH against address harvesting. In Proceedings of the 13th Annual Network and Distributed System Security Symposium, San Diego, CA, 2006.
[29] B. Schneier. Attack trees. Dr. Dobb’s Journal, 1999.
[30] L. P. Swiler et al. Computer-attack graph generation tool. In Proceedings DARPA Information Survivability Conference and Exposition (DISCEX II), pages 307–321, Los Alamitos, CA.
[31] S. Templeton and K. Levitt. A requires/provides model for computer attacks. In Proceedings of the 2000 Workshop on New Security Paradigms, New York, NY, 2001. ACM Press.
[32] A. Wool. A quantitative study of firewall configuration errors. In IEEE Computer, pages 62–67, 2004.
[33] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mohapatra. FIREMAN: A toolkit for FIREwall modeling and ANalysis. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, 2006.

Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06) 0-7695-2716-7/06 $20.00 © 2006