# HITCON 2019 - Ta-Lun Yen (es)

## Trust in Apple’s Secret Garden: Exploring & Reversing Apple’s Continuity Protocol

### Outline
- **Motivation**
- **Introduction to Continuity Protocol**
  - iCloud, APNS, iMessage
  - Continuity
    - Previous Research
    - Software Stack
    - Protocol
- **Remarks**

### About Me
- **Professional Background**: DevOps and Fullstack Developer
- **Independent Security Researcher**
- **Hobbies**: Tinkering and Hacking Devices or New Technologies
- **Focus Area**: Security in Communication Processes

### Motivation
- **Objective**: Investigate how Apple implements security.
- **Goal**: Shed light on Apple’s "secret garden."
- **Usability**: Make iOS devices more functional on non-macOS devices.
- **Responsible Disclosure and Bug Bounty**:
  - No apparent vulnerabilities found yet.
  - No bug bounty program for this domain.

### Continuity
- **Features**: Handoff, Universal Clipboard, iPhone Cellular Calls, SMS/MMS messaging, Instant Hotspot, Continuity Camera, AirDrop, Apple Pay, and Auto Unlock.
- **Dependencies**: Heavily relies on Bluetooth Low Energy (BLE) and iMessage/iCloud.
- **Bluetooth Requirement**: Most features do not work without Bluetooth.

### Why Continuity?
- **Instant Hotspot (macOS + iOS)**:
  - Open Wi-Fi menu.
  - Wait for the device to appear.
  - Click on the device's name.
- **Not-so-Instant Hotspot (!macOS + iOS)**:
  - Manually enable the hotspot on the phone.
  - Scan for Wi-Fi networks.
  - It usually works, but sometimes it doesn’t.
- **New Association**: Only when the Hotspot page is active.

### iCloud, APNs, IDS, iMessage
- **iCloud**:
  - Launched around the end of 2011.
  - Approximately 850 million users.
  - Multiple services: Backup, Device Locator, Messaging.
  - Push Service (APNs).
- **APNs (Apple Push Notification Service)**:
  - Device ID (deviceToken), unique per device.
  - Uses Public-Key Cryptography and TLS.
- **iMessage**:
  - Proprietary messaging service.
  - Supports text and attachments.
  - End-to-End encryption.
  - Continuity messages are encrypted similarly to iMessage.
- **identityservicesd (IDS)**:
  - Directory service for iMessage keys.
  - Links with iCloud to access any other device’s public key using the corresponding phone number or email.

### iMessage Onboarding
- **Key Generation**:
  - RSA and ECDSA keys.
  - Public key sent to iCloud, associated with (phone number/email) and APNs address.
  - Private key remains on the device.
  - Accessible via Keychain.

### Sending with iMessage
- **Message Creation**:
  - Generates a binary plist (bplist).
  - Concatenates target public key, AES-encrypted bplist, and session key.
  - Encrypts the AES key with the RSA public key.
  - Appends an ECDSA-SHA1 signature at the end.

### iMessage Attachment Mode
- **Payload Size**:
  - >4KB or >16KB, depending on the iOS version.
- **Encryption**:
  - Content encrypted with AES-CTR (256-bit).
  - Sends URI and content’s SHA-1 instead.

### Cellular Call Relay
- **Requirements**:
  - iPad/Mac must be on the same Wi-Fi network as the phone.
- **Functionality**:
  - Receive/make cellular calls using iPad/Mac.
  - Relies on APNs.
- **Security**:
  - Audio transmitted via a secure peer-to-peer connection.
- **Termination**:
  - Call terminated via APNs.
  - Potential vulnerabilities: DoS, spying, impersonation (as demonstrated by Martin Vigo).

### AirDrop
- **Technology**:
  - Based on BLE and AWDL (Apple Wireless Direct Link).
- **Bootstrapping**:
  - Detects nearby devices via BLE.
  - Sets up transfer.
- **Research**:
  - Milan Stute et al. (2018): Analysis of the AWDL protocol.

### Continuity Stack
- **Module Hooks**:
  - Shares data with sharingd upon message receipt.
  - Host → bluetoothd → sharingd → Target module.

### Flow
- **Encryption and Signing**:
  - Messages are encrypted-then-signed.
  - Received via HCI.
  - Passed to sharingd, then to IDS, MessageProtection, and back to sharingd, finally to the target service.

### Instant Hotspot Flow
- **Device Connection**:
  - Connects to the hotspot and uses GATT to exchange connection info (SSID/PSK).
  - Establishes Wi-Fi connection with the hotspot.

### Continuity Broadcast Protocol
- **Broadcast**:
  - Continuous broadcast on CH37.
  - Includes MAC, Type ID, and Payload.
- **Validation**:
  - None; uses private addresses.
  - VSC translates private to public addresses, changing on each power cycle.

### Additional Tools for Xcode ≥ 11
- **Nearby**:
  - Available for iOS ≥ 10.

### Attributes
- **Instant Hotspot**:
  - Battery Life
  - Cell Service Type
  - Cell Quality

### Activity
- **Handoff**:
  - Broadcasts when applicable (e.g., Firefox open and in the foreground).
- **Instant Hotspot**:
  - Handshake occurs only when devices are in proximity.
- **Nearby**:
  - Always broadcasting.

### Identity
- **Instant Hotspot**:
  - Wi-Fi connection made with public MAC.
- **Contextual Analysis**:
  - Wi-Fi connection after Continuity message.
- **MAC Address Relationship**:
  - Wi-Fi MAC + 1 = Bluetooth MAC.

### Spoofing
- **Tools**:
  - ubertooth-btle in faux slave mode.
  - Requires sender/receiver public MAC.

### Continuity Protocol
- **Verification and Decryption**:
  - Each connection is associated with a UUID.
  - If UUID is known, no need to fetch the public key again.
- **Key Management**:
  - Deleting “iMessage ____ Key” in Keychain can break IDS.
  - Fixed by rebooting the phone and Mac.
  - Keys are downloaded, uploaded, or regenerated on iMessage login.

### Malleability
- **Security Concerns**:
  - Messages are only signed (no MAC).
  - Replay attacks were possible.
  - Certificate Pinning not implemented.
  - Compression Oracle attack potential due to Compressed-then-Encrypted messages.

### SecMPVerifyAndExposeMessage
- **Verification Process**:
  - Verifies payload size.
  - Raw payload from HCI is verified using SecKeyDigestAndVerifyWithError.
  - Signing is done against the SHA-1 digest of the payload.
  - If verification passes, actual decryption is performed.

### Message Verification and Decryption
- **Security Framework**:
  - Relies on Security.transforms.
  - Uses SecVerifyTransformCreate and SecDecryptTransformCreate.

### Data Structure
- **HCI Payload**:
  - Can be split into multiple packets.
  - Payload length and signature are included.
  - Header before length (0x03-0x27).
  - Continuation packets have a total length minus payload length equal to the signature length.

### Actual Decryption
- **Stages**:
  - **First Stage**: RSA-OAEP of the first 160 bytes.
  - **Second Stage**: 
    - Decrypts the first 16 bytes to get the AES-128 CTR key.
    - Decrypts the remaining data.
  - **Third Stage**: Unzips the gzip-compressed bplist.

### Remarks
- **Trust in Closed-Source Systems**:
  - Blindly trusting a closed-source device is risky.
- **Enhanced Security**:
  - More encryption can be used, such as in broadcasts, backed by IDS.
- **No Exploits Found**:
  - No blatant exploits were discovered during the research.

### Additional Resources
- **GitHub Repository**: [evanslify/continuity](https://github.com/evanslify/continuity)
- **Future Work**: Other features will be added over time.