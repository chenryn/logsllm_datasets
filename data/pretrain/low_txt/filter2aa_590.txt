# DEF CON 13: Windows vs. FreeBSD vs. Linux

## Introduction
**Title:** Why Deploying Linux in Your Environment May Be a Risk  
**Subtitle:** A Comparative Analysis of Windows, FreeBSD, and Linux

**Disclaimer:**
- "Do not believe in anything simply because you have heard it... But after observation and analysis, when you find that anything agrees with reason and is conducive to the good and benefit of one and all, then accept it and live up to it." - Buddha

**Speaker Background:**
- Daytime: Security Consultant at a "Beltway bandit" firm in Linthicum, MD.
- Night: Founder of the Shmoo Group and Capital Area Wireless Network, periodic author.

## Safety and Audience Engagement
- **Safety Note:** This talk may be provocative and interactive.
- **Audience Segments:**
  - Linux Zealots
  - Windows / BSD / Others

## Security Fundamentals
- **For the Feds:** Information Assurance
- **Tactical Coding Error vs. Design Flaw**
- **Script Kiddie vs. Dedicated Attacker**
- **Host Hardening vs. Long-term Operational Security**

## Long-term Operational Security
- **Often Overlooked Aspect:**
  - We are not an end in and of ourselves.
  - An IDS does not equate to operational security.
- **Training vs. Practice:**
  - Any idiot can be trained to secure a host, but running a long-term secure enterprise is challenging.

## Enter Rant Mode

## Potter’s Pyramid of IT Security Needs
- **Hierarchy:**
  - IDS
  - Patch Management
  - Operational Procedures
  - Firewalls
  - Authentication/Authorization
  - Software ACLs
  - Honeypots
- **Sophistication and Operational Cost**

## Development Method Matters
- **Structured Process vs. Open Source:**
  - Structured process is essential for building a secure and scalable system.
  - Open source benefits from many eyes and community-driven integration.
- **Challenges:**
  - Process-driven code can still be flawed.
  - Not all open-source projects have sufficient security scrutiny.

## Real Differences
- **Beyond Zealotry and Media:**
  - Assessing the real differences is complex and full of red herrings.
  - Methods:
    - Examine development processes.
    - Analyze the history of security in the architecture.
    - Consider vulnerability statistics.
    - Look at future directions in security.
    - Gather enterprise data on security budget allocation.

## Vulnerability Statistics
- **Tactical Coding Errors:**
  - Vulnerability stats often reflect coding errors, not systemic issues.
  - Example: MS reduced patches from 35 to 12, but this doesn't necessarily mean fewer vulnerabilities.
  - Impact varies, and the source of the vulnerability (kernel, integrated app, third-party) is crucial.

## Windows Overview
- **Integrated System:**
  - Applications are tightly integrated with the operating system.
  - MS works as a unified organization, ensuring compatibility between Office and Windows upgrades.
- **Release Methodologies:**
  - Well-publicized, with a large developer network.
  - Market dominance can lead to complacency (e.g., IE).
- **Security Roadmap:**
  - Long-term security initiatives.
  - Internal code security programs.
  - Full MLS-compliant OS by 2009.

## FreeBSD Overview
- **End-to-End System:**
  - Kernel to userland system utilities.
  - Structured development process with core team accountability.
  - Third-party software packaged by the FreeBSD team.
- **Release Methodologies:**
  - Dedicated release engineering and packaging teams.
- **Security Roadmap:**
  - Advanced EOL notifications.
  - Integrated security features like Securelevels and expanded ACLs.

## Linux Overview
- **Bazaar Model:**
  - Linus Torvalds controls the kernel.
  - Community-driven development for the rest.
  - Distributions integrate and package components.
- **Release Methodologies:**
  - Kernel releases are flexible and iterative.
  - Distro-specific release schedules and kernel versions.
- **Security Roadmap:**
  - Limited formal roadmap.
  - RedHat's focus on integrating SELinux.
  - Various add-ons like GRSec.

## Vulnerability Statistics Revisited
- **Study by Ford, Thompson, and Casteran:**
  - Compared RH Linux ES 3 and Windows 2k3.
  - High and medium severity vulnerabilities and days of risk.

## Patching
- **Microsoft:**
  - Monthly roll-up patches.
  - Simplifies ongoing operations and reduces patch deployment times.
- ***NIX Systems:**
  - Direct patches from developers or distros.
  - Challenges in determining necessity and deployment.

## Debian Case Study
- **Security Update Challenges:**
  - ARM build daemon issues delaying security updates.

## Signal-to-Noise Ratio (SnR)
- **Importance of Staying Informed:**
  - Security admins must stay updated.
  - Managing SnR in Linux distro security announcements.

## Future Outlook
- **Linux:**
  - Survives through community support and global zealots.
- **Microsoft:**
  - Pushes security boundaries beyond typical OSS capabilities.
- **BSDs:**
  - Leaders in operational security within the OSS movement.

## Q&A
- **Contact Information:**
  - Email: PI:EMAIL
- **Flames:**
  - /dev/null
- **Talk Availability:**
  - www.shmoo.com/~gdead
- **Recommended Reading:**
  - "Mastering FreeBSD and OpenBSD Security" by O’Reilly