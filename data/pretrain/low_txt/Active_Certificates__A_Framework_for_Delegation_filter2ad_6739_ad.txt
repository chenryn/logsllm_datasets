### Previous Version of the Ninja Platform

The earlier version of the Ninja platform [18] utilized RMI-style interfaces, which consisted of a collection of method signatures (i.e., a Java interface). To interpose on a service that uses a method interface, it is necessary to provide an implementation for each method. In contrast, message interfaces allow a certificate to operate as a message filter, with only partial or no knowledge of the interface. This makes it natural to express "vertical policies," which are the same for every request type. For example, a name certificate, as described in Section 5.5, is a vertical policy.

Request-dependent "horizontal" policies can also be easily represented using message interfaces by branching on the message type. Even in this case, message interfaces have the advantage of being able to adapt to an evolving service interface by denying any unrecognized request types. A policy that has both horizontal and vertical components (which is often the case in practice) is also naturally represented in message interfaces. Method interfaces, on the other hand, would require code duplication to implement the vertical components of policies.

This experience suggests that in other systems that use messages to encode remote calls (e.g., RPC over SOAP [7]), active certificates should be implemented as message filters instead of RPC wrappers.

### Related Work

Several certificate systems have attempted to incorporate the concept of delegation. For example, proxy certificates [34] are a proposed way to add delegation to X.509 [8], and SPKI [10] uses delegation as a central concept in its operation. Both systems include mechanisms to restrict delegation: proxy certificates allow one to specify a restriction in a (yet-to-be-specified) policy language, and SPKI supports application-specific restriction tags. In both cases, further standardization on application semantics is required, and this process must be repeated for each new application domain.

Some systems have used a general-purpose programming language to specify policy. PolicyMaker [4] manages collections of assertions, which can include arbitrary programs in a safe version of AWK, and computes policy decisions based on these assertions. Proof-Carrying Certificates [3] use proofs written in Twelf [29], a powerful language. Both systems, in typical usage, lack the transparency of active certificates. PolicyMaker applications must define security attributes that are relevant and specify local policy in terms of them. Proof-Carrying Certificates must prove an application-dependent theorem, with local policy represented by axioms. However, a variant of PolicyMaker could be used to produce a system similar to active certificates, where an entire request is passed as a query to the policy management system, and a language appropriate for parsing such requests is used to define assertions. Such a system would lack the full proxying aspects of active certificates and have a less general area of application than PolicyMaker, but it would combine several of their strengths.

Proxy-based solutions can be used to implement general delegation policies with complete transparency. Several projects have used proxy technology to perform security adaptation [32, 12]. However, maintaining an online proxy imposes significant computational, connectivity, and management overhead on its owner. Additionally, the prevalence of such proxies might put excessive bandwidth requirements on the infrastructure due to inefficient routes. Most importantly, the proxy has to maintain its owner’s private key, making it an attractive attack target.

Active certificates avoid these pitfalls by executing at the resource. They are, however, less expressive than proxies since they are instantiated only temporarily during access to the resource and cannot maintain persistent state. To implement policies that require persistent state, a hybrid solution is possible, where an online proxy stores the necessary persistent state and an active certificate is used to specify policy with input from the proxy. The proxy does not need to store its owner’s public key; instead, it can have its own key recognized by the certificate. This solution combines the expressive power of proxies with the security advantages of active certificates, as the proxy is only trusted to maintain correct state, not to authorize the use of Alice’s rights.

### Future Work

Although active certificates provide a powerful delegation mechanism, effective management of certificates is essential to fully exploit their potential. In a complex system with a large pool of available certificates, automated search mechanisms are needed to find a sequence of certificates that will allow Bob to use the resource. There has been much research into the problem of deciding authentication [20, 23, 5, 6] with varied results. However, the use of programs to specify policies makes this problem undecidable. Nonetheless, we hope to attach attributes to certificates to make searches for a trust path feasible in practice by expressing which certificates may be useful to solve a particular authentication problem. For example, if a higher-level policy language is translated into active certificates, such attributes could take the form of the original high-level language source. This would allow active certificates to be managed in the same way as conventional certificates.

Such "translation annotations" can also serve to check certain certificate properties, provided it is possible to prove that the certificate code is indeed a semantically equivalent translation of the annotation [30]. Such a proof would ensure that the certificate program is bound by any restrictions inherent in the source language. For example, a translation from a policy language with bounded execution time can ease concerns of resource misuse by the certificate. We are also investigating other properties that may be useful to prove about active certificates and other ways of proving them.

Finally, we are evaluating the performance impact of using active certificates. One promising feature of active certificates is that complex functions, such as interpreting high-level policies or finding a trust path, are shifted from servers onto clients. This allows us to exploit the vast disparities in the aggregate computing power of services and their large user bases to improve performance.

### Conclusions

In this paper, we presented a novel approach to delegation based on active certificates. This approach combines the strengths of previous methods, including expressivity, transparency, offline operation, and convenience. These features make active certificates useful tools for expressing delegation. We also explained how to use active certificates as a platform to build larger systems, which has important advantages such as extensibility. We performed a formal security analysis of active certificates and built a prototype implementation validating our techniques. Active certificates represent an exciting new direction in delegation and present many opportunities for further research.

### Acknowledgments

We would like to thank Adrian Perrig, Mark Miller, David Wagner, Dawn Song, Oleg Kolesnikov, and the anonymous referees for their insightful comments on earlier versions of this paper.

### References

[1] M. Abadi, M. Burrows, B. Lampson, and G. Plotkin. A calculus for access control in distributed systems. ACM Transactions on Programming Languages and Systems, 15(4):706–734, September 1993.

[2] American National Standards Institute. Public key cryptography for the financial service industry: Certificate management. ANSI X9.57-1997, 1997.

[3] A.W. Appel and E.W. Felten. Proof-carrying authentication. In 5th ACM Conference on Computer and Communications Security, pages 52–62, Singapore, November 1999. ACM Press.

[4] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust management. In Proceedings of the IEEE Symposium on Research in Security and Privacy, Oakland, CA, May 1996. IEEE Computer Society Press.

[5] M. Blaze, J. Feigenbaum, and M. Strauss. Compliance checking in the PolicyMaker trust management system. In Hirschfeld [21], pages 254–274.

[6] D. Clarke, J.-E. Elien, C. Ellison, M. Fredette, A. Morcos, and R.L. Rivest. Certificate chain discovery in SPKI/SDSI. http://theory.lcs.mit.edu/~rivest/publications.html.

[7] WWW Consortium. Simple object access protocol (SOAP) 1.1. http://www.w3.org/TR/SOAP/.

[10] C.M. Ellison, B. Frantz, B. Lampson, R. Rivest, B.M. Thomas, and T. Ylonen. SPKI certificate theory. Internet Draft, March 1998. Expires: 16 September 1998.

[11] A. Fox, S. D. Gribble, Y. Chawathe, and E. A. Brewer. Adapting to network and client variation using active proxies: Lessons and perspectives. Special Issue of IEEE Personal Communications on Adaptation, August 1998.

[12] A. Fox and S.D. Gribble. Security on the move: Indirect authentication using Kerberos. In 2nd ACM International Conference on Mobile Computing and Networking, November 1996.

[13] G.Back, W.C. Hsieh, and J. Lepreau. Processes in KaffeOS: Isolation, resource management, and sharing in Java. In Fourth Symposium on Operating Systems Design and Implementation (OSDI), October 2000.

[14] I. Goldberg, S. Gribble, D. Wagner, and E. Brewer. The Ninja Jukebox. In Second USENIX Symposium on Internet Technologies and Systems (USITS), Boulder, CO, October 1999.

[8] Consultative Committee on International Telegraphy and Telephony. Recommendation X.509: The Directory—Authentication Framework, 1988.

[9] T. Dierks and C. Allen. The TLS protocol version 1.0. RFC2246, January 1999.

[15] L. Gong. Inside Java 2 Platform Security. Addison-Wesley, June 1999.

[32] S. Ross, J. Hill, M. Chen, A. Joseph, D. Culler, and E. Brewer. A composable framework for secure multi-modal access to Internet services from Post-PC devices. In Third IEEE Workshop on Mobile Computing Systems and Applications (WMCSA), to appear, Monterey, CA, 2000.

[33] A. Rudys, J. Clements, and D.S. Wallach. Termination in language-based systems. In Network and Distributed Systems Security Symposium '01, 2001.

[34] S. Tuecke. Internet X.509 public key infrastructure proxy certificate profile. Internet Draft, 2001.

[35] S.R. van den Berg. Procmail - autonomous mail processor. http://www.procmail.org/.

[36] J.R. von Behren, S. Czerwinski, A.D. Joseph, E.A. Brewer, and J. Kubiatowicz. NinjaMail: The design of a high-performance clustered, distributed e-mail system. In First International Workshop on Scalable Web Services, Toronto, Canada, August 2000.

[16] J. Gosling, B. Joy, and G. Steele. The Java Language Specification. Addison Wesley, 1997.

[17] S. Gribble, M. Welsh, R. von Behren, E. Brewer, D. Culler, N. Borisov, S. Czerwinski, R. Gummadi, J. Hill, A. Josheph, R. Katz, Z. Mao, S. Ross, and B. Zhao. The Ninja architecture for robust Internet-scale systems and services. Special Issue of Computer Networks on Pervasive Computing, March 2001.

[18] S.D. Gribble, M. Welsh, E.A. Brewer, and D. Culler. The MultiSpace: An evolutionary platform for infrastructural services. In Proceedings of the 1999 USENIX Annual Technical Conference (USENIX-99), pages 157–170, Berkeley, CA, June 6–11 1999. USENIX Association.

[19] P. Gutmann. X.509 style guide. http://www.cs.auckland.ac.nz/~pgut001/pubs/x509guide.txt, October 2000.

[20] M.H. Harrison, W.L. Ruzzo, and J.D. Ullman. Protection in operating systems. Communications of the ACM, 19(8):461–471, 1976.

[21] R. Hirschfeld, editor. Financial Cryptography, Anguilla, British West Indies, February 1998.

[22] J. Howell and D. Kotz. A formal semantics for SPKI. In 6th European Symposium on Research in Computer Security, pages 140–158, 2000.

[23] A.K. Jones, R.J. Lipton, and L. Snyder. A linear time algorithm for deciding security. In 17th IEEE Symposium on the Foundations of Computer Science, pages 33–41, 1976.

[24] P. Kocher. On certificate revocation and validation. In Hirschfeld [21], pages 172–177.

[25] S. Micali. Efficient certificate revocation. Technical Memo MIT/LCS/TM-542b, Massachusetts Institute of Technology, Laboratory for Computer Science, March 1996.

[26] Microsoft. Microsoft .NET. http://www.microsoft.com/net/.

[27] Sun Microsystems. Sun Open Net Environment (Sun ONE). http://www.sun.com/software/sunone/.

[28] M. Naor and K. Nissim. Certificate revocation and certificate update. In Proceedings of the 7th USENIX Security Symposium, pages 217–228, Berkeley, January 26–29 1998. Usenix Association.

[29] F. Pfenning and C. Schurmann. System description: Twelf—a meta-logical framework for deductive systems. In 16th International Conference on Automated Deduction (CADE-16), Trento, Italy, June 1999.

[30] A. Puneli, M. Siegel, and E. Signerman. Translation validation. In 4th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, Lisbon, Portugal, March 1998.

[31] R. Rivest. Can we eliminate certificate revocation lists? In Hirschfeld [21], pages 178–183.