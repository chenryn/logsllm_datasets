### Chapter 7: Bringing Semantic Security to Semantic Web Services

**Authors:**
- Richard S. Patterson, University of Georgia
- John A. Miller, University of Georgia
- Jorge Cardoso, University of Madeira
- Mike Davis, U.S. Department of Veterans Affairs & Chair, HL7 Security Committee

**Abstract:**
Semantic Web services are emerging as the next evolution of Service-Oriented Architecture (SOA). One of the most significant challenges in this domain is authorization. While other areas of Semantic Web services have focused on determining which parts of a Web service require semantic information, how to best utilize these semantics, and agreeing on standards, authorization introduces additional fine-grained security implications. For instance, how much authorization information is necessary for the semantic discovery of Web services? Does this information create new security vulnerabilities? This chapter examines a framework for expressing the appropriate authorization information to facilitate the semantic discovery of Web services, ensuring that the requesting service likely has the authority to invoke them.

**Keywords:**
Web Services Discovery, Authorization, Semantic Matching of Web Services, Ontology-based matching of Authorization, Web Service Authorization Discovery, Semantic Web Services

### 1. Introduction

#### 1.1 The Semantic Web
The current World Wide Web primarily consists of documents written in HTML, a language designed for visual presentation. HTML uses markup symbols to format web pages for display in browsers. Most web content is intended for human consumption, with computers unable to interpret the inherent meaning of the information.

To enable machine-to-machine exchange and automated processing, the information on the Web must be presented in a way that computers can understand. This is the goal of the Semantic Web, which aims to extend the current Web by adding well-defined meaning to information, thereby enhancing cooperation between computers and people. The next generation of the Web will integrate existing technologies with knowledge representation formalisms (Grau, 2004).

Currently, the Web is evolving, and various approaches are being explored to add semantics to web resources. New standards and languages, such as the Resource Description Framework (RDF) and the Web Ontology Language (OWL), are being developed to provide descriptive information and rules. RDF and OWL enable the Web to become a global infrastructure for sharing both documents and data, making it easier and more reliable to search and reuse information. RDF provides a set of rules for simple descriptive information, while OWL extends RDF to define structured ontologies, allowing richer integration and interoperability of data across different domains.

#### 1.2 Semantic Web Services
The intersection of the Semantic Web and Web services, known as Semantic Web services, is expected to be highly significant. Academia has approached this area from the Semantic Web perspective, while industry is beginning to recognize its importance from the Web services side (Cardoso et al., 2005). Semantic Web services combine the syntactic definition of Web services with the semantic Web, as shown in Figure 1.

**Figure 1:** The nature of semantic Web services

Several approaches have been developed to bring semantics to Web services, including WSDL-S (Akkiraju et al., 2006), OWL-S (Martin et al., 2004; OWL-S, 2004), and WSMO (WSMO, 2004; Feier et al., 2005). This chapter focuses on the WSDL-S approach, which involves mapping concepts in a Web service description (WSDL specification) to ontological concepts.

#### 1.3 Semantically Annotated Web Services: WSDL-S
One solution to create semantic Web services is by mapping concepts in a Web service description to ontological concepts. This approach allows users to explicitly define the semantics of a Web service for a given domain. With the help of ontologies, the meaning of service data and functionality can be explained, enabling automated integration with a higher degree of success.

WSDL-S (Patil et al., 2004; Rajasekaran et al., 2004) establishes mappings between WSDL descriptions and ontological concepts. The idea of mapping service, task, or activity descriptions to ontological concepts was first introduced by Cardoso and Sheth (2003). Figure 2 illustrates the METEOR-S WSDL-S Annotator tool and the mappings established between WSDL descriptions and ontological concepts.

**Figure 2:** Annotating Web services with ontological concepts

Based on the analysis of WSDL descriptions, three types of elements can have their semantics enhanced by annotating them with ontological concepts: operations, messages, preconditions, and effects. These elements are explicitly declared in a WSDL description.

- **Operations:** Each WSDL description may include multiple operations with different functionalities. To add semantics, these operations must be mapped to ontological concepts to describe their functionality.
- **Messages:** Message parts, which are input and output parameters of operations, are defined in WSDL using XML Schema. Ontologies, which are more expressive than XML Schema, can be used to annotate WSDL message parts. This not only brings user requirements and service advertisements to a common conceptual space but also facilitates reasoning mechanisms.
- **Preconditions and Effects:** Each WSDL operation may have preconditions and effects. Preconditions are logical conditions that must be true to execute an operation, while effects are changes that occur after the operation. After annotating the operations, inputs, and outputs, preconditions and effects can also be annotated. This is important for Web services because multiple operations may have the same functionality and inputs/outputs but different effects.

**Figure 3:** WSDL example

The WSDL-S specification indicates that the Web service provides two operations: 'RegisterStudent' and 'StudentInformation'. The first operation has an input named 'student', semantically described by the ontological concept "sm:StudentInfo", and an output named 'ID', semantically described by the concept "sm:StudentID". The operation 'RegisterStudent' is semantically annotated with the ontological concept "sm:RegisterStudent". The second operation, 'StudentInformation', uses similar ontological concepts to annotate the input, output, and action. The ontological concepts are expressed in the ontology `http://dme.uma.pt/jcardoso/StudentMng.owl#`, specified using OWL (OWL, 2004).

To create, represent, and manipulate WSDL-S documents, WSDL4J (http://sourceforge.net/projects/wsdl4j/) can be used. WSDL4J provides Java APIs for WSDL parsing and generation and supports extensibility elements, allowing WSDL to represent specific technologies under various elements.

### 2. Web Services Security Background

Web services can expose inter-organizational components such as business-critical data, business processes, and internal workflows (Shivaram, 2003). Organizations may expose these components to capitalize on the cost savings and reduced complexity that Web services can add to their SOA. As SOA becomes more dynamic, loosely defined, and ubiquitous, new security measures are needed to protect key business information. Current standards address authentication, encryption, and identity management, using a combination of established technologies like keys, username tokens, and RSA encryption, along with newer technologies like XML Signature (XML-Signature, 2002) and SAML (SAML 2.0, 2005).

In securing Web services, five fundamental areas need to be considered: Message Level Protection, Message Privacy, Parameter Checking, Authentication, and Authorization. It is important to focus on Web service security rather than general network security, as they operate at different layers of the ISO model. Web service security is at the application layer.

While some solutions use the same or similar technologies, not all were developed specifically for Web services. Four of the five areas have been addressed, but authorization remains a challenge. Authorization aided by semantics is crucial not only for Web services but also for the Semantic Web.

As Web services evolve into Semantic Web services for automated discovery and execution of business processes (Verma, 2005), two questions become more prevalent:
- From the Service Provider's perspective, how much information should be shared with an entity with no previous relationship?
- From the Requester's perspective, how does the Requester know if they will have access to the discovered information and resources?

This chapter begins by reviewing the current technologies for securing Web services and then explores an approach that uses semantics to aid Providers and Requesters in answering these questions.

#### 2.1 Message Privacy
Message privacy ensures the confidentiality of a message, preventing unauthorized entities from accessing the information within it. This includes the XML Signature and Token found in the message header, as shown in Figure 4. To ensure confidentiality, an encryption scheme must be implemented.

**Figure 4:** SOAP Message in transit

Traditional point-to-point encryption schemes, such as SSL, do not suffice for Web services, as they operate at the Network layer of the ISO model. Once a message is received by an intermediary, it is decrypted entirely, even if the intermediary is not the service provider. Furthermore, a message may cross multiple trust domains due to complex routing. An end-to-end encryption scheme is needed.

The XML Encryption standard provides the necessary framework for this, allowing the encryption of any combination of the message body, header, attachments, and sub-structures (XML-Encryption, 2002). When a message or part of a message is encrypted, the encryption information can be made available in the message header, useful for complex services where each Web service in the chain needs to know how to decrypt the relevant section.

For example, when a requester encrypts a message body and XML Signature information in the header, it may specify in the header that it has used the providing service’s public key. Only the private key can decrypt the data. The provider, upon receiving the message, decrypts it using its private key.

XML Encryption allows multiple keys to be used within a message to encrypt different sections. Each encrypted section is referenced in the message header and mapped to the key information if provided, ensuring end-to-end encryption through intermediaries.

**Table 1:** XML Algorithms

| Purpose | Algorithm | Specified as |
|---------|-----------|--------------|
| Digest | SHA1 | Required |
| Digest | SHA256 | Recommended |
| Signature | DSAwithSHA1 (DSS) | Required |
| Signature | RSAwithSHA1 | Recommended |
| Canonicalization | Canonical XML (omits comments) | Required |
| Canonicalization | XML with Comments | Recommended |
| Transform | XPath | Recommended |
| Transform | Enveloped Signature | Required |

Table 1 provides an overview of the algorithms specified in the XML-Signature and XML-Encryption standards. Required algorithms are the minimum to comply with the standard, while recommended ones are suggested.

#### 2.2 Message Level Protection
Message Level Protection ensures message integrity, allowing the detection of modifications to a SOAP message and guaranteeing that the contents have not been altered (Web Services Architecture, 2004). This is achieved by creating a message digest, a cryptographic checksum of an octet stream (WS-Security, 2002), using an algorithm like SHA-1 (NIST, 1993), as required in the XML Signature specification.

The provider of the Web service receives the message, the digest, and the algorithm used to create the digest. Using this information, the provider can recreate the digest and compare it to the one received from the requester. Any changes, even the addition of a single whitespace, can be detected, solving the problem of Message Level Protection.

When a message is passed from a Requester Web service to a provider Web service, the message body should be digitally signed using the XML Signature specification. There are several token options for signing a message, categorized as either endorsed or unendorsed. An endorsed token, like an X.509 certificate, has claims validated by a trusted authority. An unendorsed token, like a username-password token, may not have validated claims but can be a proof-of-possession token.

When signing a message, the signature parameters consist of a security token and the message digest. The output is the message signature, which appears in the message header. The provider must have the message, the digest, the algorithm used, and the key or token to verify the contents. Security elements in the header contain information on the algorithm and token, allowing the provider to compare the digest to the message.

**Figure 5:** SOAP Message with XML-Signature

#### 2.3 Message Validity
Message Validity ensures that the contents of a message are appropriate and well-formed. This involves verifying data types and checking for malicious code. Verifying data types is straightforward, but checking for malicious code is more complex.

Malicious code within a message can appear as part of the XML message or as parameters to be passed to operations. XML viruses and worms are commonly passed within XML documents or messages (Lilly, 2002). Specialized software is available to scan XML for malicious content, ensuring the security and integrity of the message.