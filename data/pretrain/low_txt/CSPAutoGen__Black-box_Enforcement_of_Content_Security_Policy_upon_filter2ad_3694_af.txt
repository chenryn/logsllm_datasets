### 95.9% (421/439)

By replacing the current Python implementation of the parser with a more efficient one, such as Mozilla’s DOMParser [2], we can improve performance. Since the CSPAutoGen JavaScript server and the applier engine are hosted on the same physical server, the script transmission delay during the rewriting phase is acceptable, with a median value of 51 ms per webpage.

The overhead for gAST building and template matching is minimal. During loading, CSPAutoGen processes approximately 20 scripts per webpage on average. The estimated overall overhead for gAST building is 4 ms, and for template matching, it is 2 ms.

### 6.6 Compatibility

In this section, we evaluate CSPAutoGen's compatibility with real-world websites in two aspects: appearance and deep, behind-the-login functionalities.

#### Appearance

We assess whether the front pages of the Alexa Top 50 websites can be correctly displayed by comparing the similarity scores of screenshots taken with and without CSPAutoGen deployed. Our methodology involves browsing each front page twice: first, with CSPAutoGen deployed, and then without. We take screenshots after each load, referred to as `CSP_image` and `std_image`, respectively. We calculate the image similarity score, `CSP_score`, based on image histograms [26]. If `CSP_score` is greater than 0.9, indicating that users can hardly notice any difference, we do not further examine the website. For about half of the 50 websites, due to the presence of advertisements and real-time content (such as news), even consecutive screenshots without CSPAutoGen result in a similarity score, `std_score`, less than 0.9. Therefore, if `CSP_score` is less than 0.9, we manually compare the two screenshots.

The results show that the front pages of 28 websites pass our initial filtering stage, i.e., `CSP_score` is greater than 0.9. We manually examined the remaining 22 websites' front pages and found that any noticeable differences were caused by advertisements and news updates. Comparing `CSP_score` with `std_score` for these 22 websites, we found that the differences between the two scores were all less than 0.1, confirming that the low similarity scores were due to the website itself. Additionally, we verified that the DOM tree structures of these webpages with and without CSPAutoGen were identical.

#### Behind-the-Login Functionalities

To explore the deep, behind-the-login functionalities of websites with CSPAutoGen deployed, we selected five major website categories based on their functionalities: email, online searching, online shopping, online social networking, and web portals. For each category, we conducted an extensive case study on the most popular website (based on Alexa ranking) that had not deployed CSP at the time of our study.

The results show that all tested functionalities of these websites work properly with CSPAutoGen deployed. Table 7 shows the matching rates of unique dynamic and runtime-included inline scripts that CSPAutoGen encountered and processed in the experiment. Below are the details of the experiments:

- **Email—Gmail**: We registered and logged into a new Google account. We sent ten emails to different recipients with various attachments, links, and photos. All recipients received the emails successfully. Recipients replied with different attachments and contents, which we received and rendered correctly. We also successfully downloaded all attachments from the graphic user interface.
  
- **Online Searching—Google**: Using the Google account from the Gmail experiment, we searched for ten different keywords on various Google products, including Google Search, Google Images, Google Books, Google Maps, Google Shopping, Google Videos, Google News, Google Flights, and Google Apps. All search results were displayed correctly. We also used Google’s advanced search functionality, performing ten searches with random conditions.

- **Online Shopping—Amazon**: We registered and logged into an Amazon account. We searched for ten different products, such as jewelry and books. After reviewing product descriptions and customer reviews, we successfully purchased a book and a coffee maker using a newly added credit card.

- **Online Social Network—LinkedIn**: Since both Facebook and Twitter have deployed CSP, we used LinkedIn for the experiment. We registered and logged into a new LinkedIn account. We uploaded a photo, published a post, searched for and connected with five people. We liked, commented on, and shared two posts from these connections. Lastly, we sent messages to two people, one connected with the account and one not.

- **Web Portal—Yahoo**: We registered a Yahoo account via audio code and logged into the account. We opened ten news/posts belonging to different categories. We liked, commented on two news articles, and shared them to our Facebook and Twitter accounts.

### 7. Discussion

#### Inline CSS

In the current version of CSPAutoGen, we do not disable inline CSS. However, CSPAutoGen can be easily extended to support disabling inline CSS without incurring compatibility issues, as we did for JavaScript. We plan to support disabling inline CSS in the next version of CSPAutoGen. Note that even if CSPAutoGen does not support disabling inline CSS, an attacker cannot inject JavaScript embedded in CSS rules because injected scripts are blocked by CSPAutoGen.

#### Obfuscated Code

Code obfuscation does not affect the generation of gAST and symbolic templates, as obfuscated code is still parsed and executed in the browser. The number of flexible types in obfuscated code is similar to that in normal code, as most strings in obfuscated code are inferred as `const` or `enum` types.

#### Event Triggering

In the headless browser cluster during the training phase, we triggered all registered events. However, triggering has no effect on template generation because we obtain all scripts in the DOM, regardless of whether they are triggered. The only exception is when dynamic scripts or runtime-included scripts are embedded inside an event handler, but in practice, we did not find any web developers doing so.

#### Script Execution Sequence

CSPAutoGen does not change the original script execution sequence. Both synchronous and asynchronous scripts are executed as they are. For example, synchronous scripts inside `eval` or `eval-like` functions are executed synchronously through symbolic templates, while asynchronous, runtime-included, inline scripts are executed inside DOM event handlers.

### 8. Related Work

#### Automatic Enforcement of CSP

Several works have been proposed for the automatic enforcement of CSP [12, 14, 17, 23]. The first work facilitating CSP adoption was deDacota [12], which statically rewrites ASP.NET applications to separate data and code. AutoCSP [14] uses dynamic taint analysis in PHP to find trusted elements of dynamically generated HTML pages and infers a policy to block untrusted elements. Both AutoCSP and deDacota are white-box approaches, requiring access to target application codes and server modifications. They cannot securely transform runtime-included inline scripts or dynamic scripts. In contrast, CSPAutoGen requires no server-side modifications and allows trusted runtime-included inline scripts and dynamic scripts.

A black-box approach, autoCSP [17], generates strict policies and gradually relaxes them by adding scripts from user violation reports to its whitelist. Kerschbaumer et al. [23] use crowdsourcing to collect JavaScript hashes and generate CSP rules based on these hashes, adopting strict string matching for inline scripts. Neither approach can process inline scripts with runtime information, runtime-included inline scripts, or dynamic scripts. According to our manual analysis, 46 of the Top 50 Alexa websites contain such script usages, making these approaches unsuitable for real-world deployment. CSPAutoGen, however, is compatible with all Alexa Top 50 websites.

#### Defenses Against XSS Attacks

Researchers have proposed many approaches to defend against XSS attacks, categorized as server-side methods [9, 10, 19, 21, 22, 29, 30, 36–38, 40, 42] and client-side methods [20, 32]. We focus on CSP deployment because it has been adopted by all major browsers and standardized by W3C [1].

**Server-side Defenses**: XSS-GUARD [10] dynamically determines legitimate scripts and removes illegitimate ones from responses. However, it only works at the server side and cannot determine the legitimacy of dynamic scripts. BLUEPRINT [30] ensures the safe construction of the intended HTML parse tree on the client without changing the browser. Template-based approaches [36, 37] propose novel web frameworks that incorporate correct sanitization based on contexts. Many works are based on server-side input sanitization [9, 19, 40]. These approaches require server-side modifications, whereas CSPAutoGen has a more flexible deployment model, which can be at a server, client, or middlebox.

**Flow Analysis and Taint Tracking**: Many other XSS defenses are based on flow analysis or taint tracking [21, 22, 29, 31, 38, 42]. Compared to CSPAutoGen, such programming analysis requires server modifications and is language-specific. For example, Taj [42] works specifically for Java, while Pixy [21] operates only on PHP.

**Client-side Defenses**: Lekies et al. [27] focus on detecting DOM-based XSS vulnerabilities using taint analysis. Saxena et al. [39] highlight client-side validation vulnerabilities and propose a dynamic analysis system to discover them. Noxes [25] is a client-side firewall-based defense that protects users with permit/deny rules to restrict HTTP requests. Similar to CSP, BEEP [20] and ConScript [32] are policy-based approaches, but they are not supported by existing browsers, requiring client-side modifications.

#### Rewriting Techniques

CSPAutoGen rewrites webpages to automatically generate CSPs without compromising compatibility. Rewriting techniques have been widely used in academia [13, 24, 28] and industry [4, 6]. WebShield [28] rewrites webpages to enable web defense techniques. Erlingsson et al. [13] enforce security policies on binaries using rewriting. In industry, ShapeSecurity [6] rewrites websites to prevent bots and malware, and Google’s PageSpeed Module [4] improves website performance by rewriting webpages.

#### AST Techniques

Abstract Syntax Trees (ASTs) have been widely used by web security researchers to extract JavaScript structure information [11, 18, 35]. However, these works do not aim to generate script templates and thus cannot address the challenges of inline scripts with runtime information or dynamic scripts.

### 9. Conclusion

In conclusion, we propose CSPAutoGen, which generates CSPs from a training dataset, rewrites webpages in real-time to insert CSPs, and applies CSPs at client browsers. CSPAutoGen can handle all real-world yet unsafe script usages, such as inline scripts with runtime information and dynamic scripts, and securely convert them to be compatible with CSP.

Our evaluation shows that CSPAutoGen can correctly render all Top 50 Alexa websites. The correctness evaluation, comparing generated gAST templates with web framework source code, shows that CSPAutoGen can successfully infer type information with 95.9% accuracy. Additionally, CSPAutoGen incurs only a 9.1% median overhead when rendering the front pages of Alexa Top 50 websites.

### 10. Acknowledgements

This work is collectively supported by the U.S. National Science Foundation (NSF) under Grants CNS-1646662, CNS-1563843, the National Natural Science Foundation of China (NSFC) under Grant No. 61472359, and the Defense Advanced Research Projects Agency (DARPA) under Agreement No. FA8650-15-C-7561. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of NSF, NSFC, DARPA, or the Government.

### 11. References

[1] Content Security Policy. http://www.w3.org/TR/2012/CR-CSP-20121115/.

[2] DOMParser. https://developer.mozilla.org/en-US/docs/Web/API/DOMParser.

[3] Esprima. http://esprima.org/.

[4] PageSpeed Module: Open-source server modules that optimize your site automatically. https://developers.google.com/speed/pagespeed/module/.

[5] Scrapy | A fast and powerful scraping and web crawling framework. http://scrapy.org/.

[6] Shape Security. https://www.shapesecurity.com/.

[7] Standards-compliant library for parsing and serializing HTML documents and fragments in Python. https://github.com/html5lib/html5lib-python.

[8] VirusTotal. https://www.virustotal.com/.

[9] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. SANER: Composing static and dynamic analysis to validate sanitization in web applications. In IEEE S&P, 2008.

[10] P. Bisht and V. Venkatakrishnan. XSS-GUARD: Precise dynamic prevention of cross-site scripting attacks. In DIMVA, 2008.

[11] C. Curtsinger, B. Livshits, B. G. Zorn, and C. Seifert. Zozzle: Fast and precise in-browser JavaScript malware detection. In USENIX Security, 2011.

[12] A. Doupé, W. Cui, M. H. Jakubowski, M. Peinado, C. Kruegel, and G. Vigna. deDacota: Toward preventing server-side XSS via automatic code and data separation. In SIGSAC, 2013.

[13] U. Erlingsson and F. B. Schneider. IRM enforcement of Java stack inspection. In IEEE S&P, 2000.

[14] M. Fazzini, P. Saxena, and A. Orso. AutoCSP: Automatically retrofitting CSP to web applications. In ICSE, 2015.

[15] D. Flanagan. JavaScript: The definitive guide. O’Reilly Media, Inc., 2006.

[16] H. Gao, Y. Chen, K. Lee, D. Palsetia, and A. N. Choudhary. Towards online spam filtering in social networks. In Proceedings of Network and Distributed Systems Security Symposium, NDSS, 2012.

[17] N. Golubovic. autoCSP: CSP-injecting reverse HTTP proxy. B.S. Thesis, Ruhr University Bochum, 2013.

[18] S. Guarnieri and V. B. Livshits. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. In USENIX Security, 2009.

[19] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. Fast and precise sanitizer analysis with BEK. In USENIX Security, 2011.

[20] T. Jim, N. Swamy, and M. Hicks. Defeating script injection attacks with browser-enforced embedded policies. In WWW, 2007.

[21] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis tool for detecting web application vulnerabilities. In IEEE S&P, 2006.

[22] N. Jovanovic, C. Kruegel, and E. Kirda. Precise alias analysis for static detection of web application vulnerabilities. In PLAS, 2006.

[23] C. Kerschbaumer, S. Stamm, and S. Brunthaler. Injecting CSP for fun and security. In ICISSP, 2016.

[24] E. Kiciman and B. Livshits. AJAXScope: A platform for remotely monitoring the client-side behavior of Web 2.0 applications. In SIGOPS, 2007.

[25] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A client-side solution for mitigating cross-site scripting attacks. In SAC, 2006.

[26] S. Lee, J. Xin, and S. Westland. Evaluation of image similarity by histogram intersection. Color Research & Application, 2005.

[27] S. Lekies, B. Stock, and M. Johns. 25 million flows later: Large-scale detection of DOM-based XSS. In CCS, 2013.

[28] Z. Li, Y. Tang, Y. Cao, V. Rastogi, Y. Chen, B. Liu, and C. Sbisa. WebShield: Enabling various web defense techniques without client-side modifications. In NDSS, 2011.

[29] V. B. Livshits and M. S. Lam. Finding security vulnerabilities in Java applications with static analysis. In USENIX Security, 2005.

[30] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In IEEE S&P, 2009.

[31] M. Martin and M. S. Lam. Automatic generation of XSS and SQL injection attacks with goal-directed model checking. In USENIX Security, 2008.

[32] L. Meyerovich and B. Livshits. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In IEEE S&P, 2010.

[33] R. Perdisci, D. Dagon, W. Lee, P. Fogla, and M. I. Sharif. Misleading worm signature generators using deliberate noise injection. In IEEE S&P, 2006.

[34] PhantomJS. PhantomJS. http://phantomjs.org/.

[35] E. B. Pratik Soni and P. Saxena. The SICILIAN Defense: Signature-based whitelisting of web JavaScript. In CCS, 2015.

[36] W. K. Robertson and G. Vigna. Static enforcement of web application integrity through strong typing. In USENIX Security, 2009.

[37] M. Samuel, P. Saxena, and D. Song. Context-sensitive auto-sanitization in web templating languages using type qualifiers. In CCS, 2011.

[38] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song. A symbolic execution framework for JavaScript. In IEEE S&P, 2010.

[39] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX: Systematic discovery of client-side validation vulnerabilities in rich web applications. In NDSS, 2010.

[40] P. Saxena, D. Molnar, and B. Livshits. SCRIPTGARD: Automatic context-sensitive sanitization for large-scale legacy web applications. In CCS, 2011.

[41] S. Stamm, B. Sterne, and G. Markham. Reining in the web with content security policy. In WWW, 2010.

[42] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weisman. TAJ: Effective taint analysis of web applications. SIGPLAN, 2009.

[43] G. Wang, T. Wang, H. Zheng, and B. Y. Zhao. Man vs. machine: Practical adversarial detection of malicious crowdsourcing workers. In USENIX Security, 2014.

[44] R. Wang, W. Enck, D. S. Reeves, X. Zhang, P. Ning, D. Xu, W. Zhou, and A. M. Azab. EASEAndroid: Automatic policy analysis and refinement for security enhanced Android via large-scale semi-supervised learning. In USENIX Security, 2015.

[45] M. Weissbacher, T. Lauinger, and W. Robertson. Why is CSP failing? Trends and challenges in CSP adoption. In RAID, 2014.

[46] XCampo. A XSS payload generator. https://code.google.com/p/xcampo/.