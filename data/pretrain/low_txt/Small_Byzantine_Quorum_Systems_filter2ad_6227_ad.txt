### U-Masking and U-Dissemination Protocol

The U-masking (or U-dissemination) protocol ensures safe (or regular) semantics for generic (or self-verifying) data. The protocol is designed to be live, meaning it guarantees that message resending will eventually stop, even in an unreliable asynchronous network. This is because, under such a network, a repeatedly sent message must eventually reach its destination. Consequently, each send/receive/wait step can be treated as a reliable asynchronous send to a responsive quorum of servers. The proof of safety and liveness follows the original proof by Malkhi and Reiter.

### Message Retransmission Management

Managing message retransmission within the Byzantine quorum protocol, rather than abstracting it into the communication layer, offers several advantages. Specifically, it allows for better control over buffer consumption, even if the server's network protocol software is vulnerable to Byzantine failures. In this context, a read or write request may consume client buffer memory proportional to \( \lambda \), the number of servers. If a client issues \( c \) concurrent operations, the total memory consumption is \( O(\lambda c) \). In an asynchronous system, each request may take an arbitrary amount of time to complete, making \( c \) potentially unbounded. However, the protocol can be adapted to limit the number of outstanding requests from each client. For example, if a client application using the BQS system is single-threaded and blocks for reads and writes, the system buffer consumption is naturally bounded to \( O(\lambda) \) buffers per client. A more general solution involves the protocol managing buffer allocation and deallocation from a finite set, blocking incoming requests when insufficient buffers are available.

### Finite Buffer U-Masking and U-Dissemination Protocol

In the Finite Buffer U-masking or U-dissemination protocol, we assume \( \beta \) local buffers and add two steps: FIRST and LAST, before and after both the read and write functions, respectively.

- **FIRST:** Wait for \( \lambda \) local buffers to be available, then lock \( \lambda \) local buffers.
- **LAST:** Unlock the \( \lambda \) local buffers claimed in step FIRST.

We provide the complete proofs for the following three theorems in our technical report [22].

**Theorem 4:** The Finite Buffer U-masking protocol for generic data follows safe semantics, and the Finite Buffer U-dissemination protocol for self-verifying data follows regular semantics. (Safety)

**Proof:** The safety of the Finite Buffer protocol is derived from the fact that each send/wait/repeat step is equivalent to a reliable asynchronous send, and it inherits the safety properties of Malkhi and Reiter's original protocol.

**Theorem 5:** The Finite Buffer U-masking and U-dissemination protocols are live (i.e., all requests eventually terminate). (Liveness)

**Proof:** This follows from three facts:
1. Step FIRST terminates because the rest of the protocol is live.
2. Each network send/wait/resend step terminates because it must eventually reach a responsive set of servers.
3. The original Malkhi and Reiter protocols terminate.

**Theorem 6:** The Finite Buffer U-masking and U-dissemination protocol consumes at most \( \beta \) buffers. (Finite Buffering)

**Proof:** This follows from the locking mechanism in step FIRST.

### Related Work

There is extensive research on quorum systems [11, 13, 18, 29], but Byzantine failures were first considered by Malkhi and Reiter [19]. They have extended their work in various directions, including distinguishing between crash and Byzantine failures [21]. In their work, Malkhi and Reiter show how to use smaller quorums, but these constructions require as many total servers as their previous work. Investigating whether our SBQ protocols can be adapted to these smaller quorums remains future work. Additionally, they explore the load of the quorum system and present a quorum construction that does not require clients to know about failure scenarios [19]. Exploring these concepts in the context of SBQ is also future work.

The idea of distinct read and write quorums has been explored before [11], but not in the context of Byzantine failures. Bazzi [4] explored Byzantine quorums in a synchronous environment with reliable channels, showing that fewer servers (f + 1 for self-verifying data, 2f + 1 otherwise) are needed. Our work presents an alternative asynchronous algorithm that efficiently utilizes additional servers to avoid slow reads.

Bazzi [5] argues that an important metric of a quorum system is the asynchronous access cost—the number of servers contacted during an operation. In a sense, SBQ has already optimized its use of messages by using asymmetric quorums, making further optimization of asynchronous cost challenging.

Triantaﬁllou and Taylor [30] have extended work on quorums under a fail-stop assumption by reasoning about the location of replicas. They present results that provide similar availability to quorum systems but with improved latency. Extending these results to Byzantine environments remains future work.

Phalanx [20] builds shared data abstractions and provides a locking service, both of which can tolerate Byzantine failures of servers or clients. It uses dissemination and masking quorums. Asymmetric quorums are not appropriate in this case because implementing locks requires determining when the write operation completes.

Castro and Liskov [9] addressed the problem of reliable storage under Byzantine failures. They implemented a Byzantine-fault-tolerant NFS service using a different technique from quorum systems. They use self-verifying data only for view-change and new-view messages and can tolerate f Byzantine failures using 3f + 1 servers.

When using non-self-verifying data, faulty servers can force new timestamps to take arbitrarily large values, compromising the safety of the protocol. All the quorum protocols discussed in this paper are vulnerable to this problem, but it can be solved by applying known techniques [17].

### Conclusion

We present two Small Byzantine Quorum (SBQ) protocols for shared variables: one that provides safe semantics for generic data using 3f + 1 servers and another that provides regular semantics for self-verifying data using 2f + 1 servers. This reduces the number of servers needed by previous protocols in the reliable asynchronous communication model. Our protocols use novel a-masking and a-dissemination quorums, differing from existing quorums for Byzantine systems by distinguishing between read and write quorums.

The reliable channels required by our protocols can be difficult to engineer, especially when Byzantine failures are a concern. We therefore consider Byzantine quorum protocols with different system models. For reliable synchronous networks, protocols that rely on synchrony can be forced to wait for a timeout if faulty servers do not reply. It can be advantageous to use asynchronous protocols and to use the synchrony assumption only in the network layer. We propose an intermediate protocol for the synchronous model that tolerates f Byzantine failures and provides the guarantee of self-timed operation as long as the number of actual failures does not exceed a threshold \( \theta \leq f \).

For unreliable asynchronous networks, we show how to adapt Malkhi and Reiter’s protocol to provide safe semantics using 4f + 1 servers or, if the data is self-verifying, regular semantics using 3f + 1 servers.

A limitation of the asymmetric quorums used by the SBQ protocols is the loss of implicit synchronization provided by blocking writes. We are exploring the benefits and limitations of solutions that combine SBQ protocols with explicit end-to-end acknowledgments of writes that have been successfully read.

### References

[1] MQSeries, IBM, http://www-4.ibm.com/software/ts/mqseries.
[2] L. Alvisi, D. Malkhi, E. Pierce, and R. Wright. Dynamic Byzantine quorum systems. In Proceedings of the International Conference on Dependable Systems and Networks, June 2000.
[3] G. Banga and P. Druschel. Measuring the capacity of a web server. In Usenix Symposium on Internet Technologies and Systems, Oct. 1997.
[4] R. A. Bazzi. Synchronous Byzantine quorum systems. Distributed Computing Journal Volume 13, Issue 1, pages 45–52, January 2000.
[5] R. A. Bazzi. Access cost for asynchronous Byzantine quorum systems. Distributed Computing Journal volume 14, Issue 1, pages 41–48, January 2001.
[6] J. W. Byers, M. Luby, M. Mitzenmacher, and A. Rege. A digital fountain approach to reliable distribution of bulk data. In SIGCOMM, pages 56–67, 1998.
[7] M. Castro and B. Liskov. Authenticated Byzantine fault tolerance without public-key cryptography. Technical Report /LCS/TM-595, MIT, 1999.
[8] M. Castro and B. Liskov. Proactive recovery in a Byzantine-fault-tolerant system. In Proceedings of the Fourth Symposium on Operating Systems Design and Implementation (OSDI ’00), San Diego, USA, pages 273–287, October 2000.
[9] M. Castro and N. Liskov. Practical Byzantine fault tolerance. In Proceedings of the Third Symposium on Operating Systems Design and Implementation (OSDI ’99), New Orleans, USA, pages 173–186, February 1999.
[10] B. Chandra, M. Dahlin, L. Gao, and A. Nayate. End-to-end WAN service availability. In Third Usenix Symposium on Internet Technologies and Systems (USITS01), March 2001.
[11] S. Davidson, H. Garcia-Molina, and D. Skeen. Consistency in a partitioned network: a survey. ACM Computing Surveys (CSUR) Volume 17, Issue 3, pages 341–370, September 1985.
[12] J. Gray and A. Reuter. Transaction processing: Concepts and techniques, 1993.
[13] M. Herlihy. A quorum-consensus replication method for abstract data types. In ACM Transactions on Computer Systems (TOCS) Volume 4, Issue 1, pages 32–53, 1986.
[14] J. Hill, R. Szewczyk, A. Woo, S. Hollar, D. Culler, and K. Pister. System architecture directions for networked sensors. In Proceedings of the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS ’00), Cambridge, USA, pages 93–104, October 2000.
[15] A. D. Joseph, F. A. deLespinasse, J. A. Tauber, D. K. Gifford, and F. M. Kaashoek. Rover: A Toolkit for Mobile Information Access. In Proceedings of the 15th ACM Symposium on Operating Systems Principles, pages 156–171, Copper Mountain, Co., 1995.
[16] L. Lamport. On interprocess communications. Distributed Computing, pages 77–101, 1986.
[17] M. Li, . Tromp, and P. M. B. Vitányi. How to share concurrent wait-free variables. Journal of the ACM, 43(4):723–746, 1996.
[18] N. A. Lynch and A. A. Shvartsman. Robust emulation of shared memory using dynamic quorum-acknowledged broadcasts. In Symposium on Fault-Tolerant Computing, pages 272–281, 1997.
[19] D. Malkhi and M. Reiter. Byzantine quorum systems. Distributed Computing, pages 203–213, 1998.
[20] D. Malkhi and M. Reiter. Secure and scalable replication in Phalanx. In Proc. 17th IEEE Symposium on Reliable Distributed Systems, West Lafayette, Indiana, USA, Oct 1998.
[21] D. Malkhi, M. Reiter, and A. Wool. The load and availability of Byzantine quorum systems. SIAM Journal on Computing 29(6), pages 1889–1906, 2000.
[22] J.-P. Martin, L. Alvisi, and M. Dahlin. Small Byzantine quorum systems. Technical report, University of Texas at Austin, Department of Computer Sciences, December 2001.
[23] J. Postel. Transmission control protocol. Technical Report RFC-793, Internet Engineering Task Force Network Working Group, Sept. 1981.
[24] A. Ricciardi. Personal communication, Nov. 2001.
[25] J. Robinson. Reliable link layer protocols. Technical Report RFC-935, Internet Engineering Task Force Network Working Group, Jan. 1985.
[26] R. Rodrigues, M. Castro, and B. Liskov. BASE: Using abstraction to improve fault tolerance. In Proceedings of the 18th Symposium on Operating Systems Principles (SOSP ’01), October 2001.
[27] M. Sachs and A. Varma. Fibre channel. IEEE Communications, pages 40–49, August 1996.
[28] M. Schroeder, A. Birrell, M. Burrows, H. Murray, R. Needham, T. Rodeheffer, E. Satterthwaite, and C. Thacker. Autonet: A high-speed, self-configuring local area network using point-to-point links. IEEE Journal on Selected Areas in Communications, 9(8), October 1991.
[29] R. H. Thomas. A majority consensus approach to concurrency control for multiple copy databases. Database Systems, 4(2):180–209, 1979.
[30] P. Triantaﬁllou and D. J. Taylor. The location-based paradigm for replication: Achieving efficiency and availability in distributed systems. In IEEE Transactions on Software Engineering, 21/1, pages 1–18, January 1995.