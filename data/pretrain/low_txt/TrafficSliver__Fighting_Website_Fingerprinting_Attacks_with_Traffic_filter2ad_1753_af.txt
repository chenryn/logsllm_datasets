### Performance Evaluation of Our Network-Layer Defense

In our evaluation, we focus on three key metrics: throughput, load on the middle Onion Router (OR), and packet inter-arrival time. The results are presented in Figure 7.

1. **Throughput**: As shown in Figure 7a, we observe a slight decrease in throughput of approximately 20% when using TrafficSliver-Net. We believe this reduction will not significantly impact the user's web browsing experience.

2. **Load on Middle OR**: Figure 7b indicates that the processing overhead for the middle ORs is negligible when using TrafficSliver-Net. This suggests that our defense does not impose a significant burden on the network infrastructure.

3. **Packet Inter-Arrival Time**: Figure 7c compares the packet inter-arrival times of TrafficSliver-Net with those of the original Tor. While the use of multiple connections in TrafficSliver-Net reduces the average inter-arrival time, it also increases the number of outliers. This can be attributed to the varying data rates across different connections.

### Feature Importance Analysis

To evaluate the effectiveness of our defenses, we analyzed the importance scores of various features used by classifiers. These features can be categorized into two types:
- **Size-Related Features**: Extracted based on information about packet sizes and ordering.
- **Timing-Related Features**: Involving timing information.

Figure 5 shows the importance scores of the top 50 best-ranked features for both defended and non-defended traces. Non-defended traces are easily detected by classifiers, which typically rely on size-related and ordering features. However, the importance of these features significantly decreases for defended traces, especially when using TrafficSlilver-Net. This is because TrafficSliver-Net obfuscates not only the size-related features but also the order of transmitting consecutive packets, thanks to the use of two splitting points for incoming and outgoing traffic and the weighted selection of individual circuits for batches of Tor cells.

Despite these improvements, TrafficSliver-Net does not add any artificial delays or dummy traffic, making it less effective against timing-related features. Consequently, k-FP, which considers timing information, performs better against TrafficSliver-Net. In contrast, TrafficSliver-App, while not fully obfuscating all size and ordering features, still manages to reduce the overall feature importance score to a notably lower value (less than 0.02). This forces WFP attacks to rely on highly fluctuating characteristics such as data rate, page loading time, or inter-packet timing.

### Overhead and Comparison to Prior Defenses

#### Security Against State-of-the-Art WFP Attacks

We compared the security and overhead of TrafficSliver-Net and TrafficSliver-App with popular prior WFP defenses: CS-BuFLO [6], Tamaraw [7], and WTF-PAD [23]. Table 4 presents the classification results in a closed-world scenario for a malicious entry OR.

- **TrafficSliver-Net** outperforms CS-BuFLO and WTF-PAD, achieving similar accuracies to Tamaraw for ùëò-NN and CUMUL. However, Tamaraw is more robust against k-FP and DF, albeit at the cost of significantly higher bandwidth and latency overheads.
- **TrafficSliver-App** reduces the detection rate of state-of-the-art WFP classifiers, though it does not match the protection level of CS-BuFLO and Tamaraw. It outperforms WTF-PAD, the only other application-layer defense, by a significant margin.

#### Performance Overhead

An acceptable performance overhead is crucial for real-world deployment. We measured the bandwidth and latency overheads of our defenses and compared them with prior WFP defenses.

- **Bandwidth Overhead**: Both TrafficSliver-Net and TrafficSliver-App produce only a small bandwidth overhead, unlike previous WFP defenses.
- **Latency Overhead**: While the latency overhead is more noticeable, it is still several orders of magnitude lower than that of CS-BuFLO and Tamaraw. Although WTF-PAD does not introduce any time delays, it provides insufficient security against WFP attacks.

### Discussion and Limitations

Our TrafficSliver defenses provide protection against malicious entry ORs but do not address the case of a malicious ISP. To defend against eavesdroppers on the link between a Tor user and an entry OR, users can utilize different access links (e.g., distinct ISPs via DSL, Wi-Fi, or cellular networks) as proposed by Henri et al. [20].

Additionally, the use of multiple entry ORs by TrafficSliver may increase the chances of an attacker becoming one of these ORs. However, even if an attacker controls several entry ORs, our evaluation shows that TrafficSliver can still mitigate WFP attacks. We recommend adopting the existing guard concept in Tor [28] for the selection of entry ORs, which has been suggested for multipath extensions to improve performance.

**TrafficSliver-Net** is suitable for arbitrary TCP traffic, while **TrafficSliver-App** is specific to HTTP(S) traffic. The latter may face issues with user sessions, as end-connections to destinations are made from different exit ORs. This can be mitigated by using the same exit OR for all sub-circuits.

### Conclusion

We proposed novel lightweight TrafficSliver defenses at the network and application layers to protect against WFP performed by malicious entry ORs. Our network-layer defense, TrafficSliver-Net, drastically reduces the accuracy of state-of-the-art WFP attacks without adding artificial delays or dummy traffic. TrafficSliver-App, on the other hand, reduces accuracy through light modifications on the client side, without requiring changes to the underlying anonymization network.

Through extensive evaluation, we identified system parameters and traffic-splitting strategies that effectively counter WFP attacks. Our defenses are compatible with the current Tor network and do not introduce significant bandwidth or latency overheads, making them suitable candidates for deployment in Tor.

The source code of our TrafficSliver defenses is available at [1].

### Acknowledgements

This work was funded by the Luxembourg National Research Fund (FNR) within the CORE Junior Track project PETIT, the EU and state Brandenburg EFRE StaF project INSPIRE, and the German Federal Ministry of Education and Research (BMBF) under the projects KISS_KI and WAIKIKI. We thank Daniel Forster for the initial prototype of TrafficSliver-Net.

### References

[1] 2020. https://github.com/TrafficSliver.
[2] Kota Abe and Shigeki Goto. 2016. Fingerprinting Attack on Tor Anonymity using Deep Learning. In Proceedings of the Asia Pacific Advanced Network Workshop (APAN).
[3] Alexa. 2020. Alexa Tor 100 most popular websites. https://www.alexa.com/. (Accessed: September 2018).
[4] Mashael AlSabah, Kevin Bauer, Tariq Elahi, and Ian Goldberg. 2013. The Path Less Travelled: Overcoming Tor‚Äôs Bottlenecks with Traffic Splitting. In Proceedings on Privacy Enhancing Technologies (PoPETS). Springer, Bloomington, IND, USA.
[5] Sanjit Bhat, David Lu, Albert Kwon, and Srinivas Devadas. 2019. Var-CNN: A Data-Efficient Website Fingerprinting Attack Based on Deep Learning. In Proceedings on Privacy Enhancing Technologies (PoPETS). Sciendo, Stockolm, Sweden.
[6] Xiang Cai, Rishab Nithyanand, and Rob Johnson. 2014. CS-BuFLO: A Congestion Sensitive Website Fingerprinting Defense. In Proceedings of the 13th Workshop on Privacy in the Electronic Society (WPES). ACM, Scottsdale, AZ, USA.
[7] Xiang Cai, Rishab Nithyanand, Tao Wang, Rob Johnson, and Ian Goldberg. 2014. A Systematic Approach to Developing and Evaluating Website Fingerprinting Defenses. In Proceedings of the 21st ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, Scottsdale, Arizona, USA.
[8] Xiang Cai, Xin Cheng Zhang, Brijesh Joshi, and Rob Johnson. 2012. Touching from a distance: website fingerprinting attacks and defenses. In 19th Conference on Computer and communications security (CCS). ACM, Raleigh, NC, USA, 605‚Äì616.
[9] Giovanni Cherubin, Jamie Hayes, and Marc Juarez. 2017. Website Fingerprinting Defenses at the Application Layer. In 17th Privacy Enhancing Technologies Symposium (PETS). DE GRUYTER, Minneapolis, USA, 186‚Äì203.
[10] Wladimir De la Cadena, Daniel Kaiser, Asya Mitseva, Andriy Panchenko, and Thomas Engel. 2019. Analysis of Multi-path Onion Routing-Based Anonymization Networks. In Proceedings of the 33rd Annual IFIP Conference on Data and Applications Security and Privacy (DBSec). Springer, Charleston, SC, USA.
[11] Roger Dingledine and Nick Mathewson. 2019. Tor Protocol Specification. https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt. (Accessed: January 2020).
[12] Roger Dingledine, Nick Mathewson, and Paul Syverson. 2004. Tor: The Second-Generation Onion Router. In 13th Conference on USENIX Security Symposium. USENIX Association, San Diego, CA, USA, 303‚Äì320.
[13] Kevin Dyer, Scott Coull, Thomas Ristenpart, and Thomas Shrimpton. 2012. Peek-a-Boo, I Still See You: Why Efficient Traffic Analysis Countermeasures Fail. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (S&P). IEEE, San Francisco, CA, USA.
[14] Roy T. Fielding, Yves Lafon, and Julian F. Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Range Requests. https://tools.ietf.org/html/rfc7233.
[15] Roy T. Fielding and Julian F. Reschke. 2014. Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. https://tools.ietf.org/html/rfc7231.
[16] OpenJS Foundation. 2020. Node.js. https://nodejs.org/en/. (Accessed: March 2020).
[17] Ian Goldberg. 2019. Network-Based Website Fingerprinting. https://tools.ietf.org/html/draft-wood-privsec-wfattacks-00. (Accessed: August 2019).
[18] Jiajun Gong and Tao Wang. 2020. Zero-delay Lightweight Defenses against Website Fingerprinting. In 29th USENIX Security Symposium. USENIX Association, Boston, MA, USA.
[19] Jamie Hayes and George Danezis. 2016. k-fingerprinting: A Robust Scalable Website Fingerprinting Technique. In Proceedings of the 25th USENIX conference on Security Symposium. USENIX Association, Austin, TX, USA.
[20] S√©bastien Henri, Gin√©s Garc√≠a-Avil√©s, Pablo Serrano, Albert Banchs, and Patrick Thiran. 2020. Protecting against Website Fingerprinting with Multihoming. In Proceedings on Privacy Enhancing Technologies (PoPETS). Sciendo, Montreal, Canada.
[21] Rob Jansen, Tavish Vaidya, and Micah Sherr. 2019. Point Break: A Study of Bandwidth Denial-of-Service Attacks against Tor. In Proceedings of the 28th USENIX conference on Security Symposium. USENIX Association, Santa Clara, CA.
[22] Marc Juarez, Sadia Afroz, Gunes Acar, Claudia Diaz, and Rachel Greenstadt. 2014. A Critical Evaluation of Website Fingerprinting Attacks. In Proceedings of the 21st ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, Scottsdale, AZ, USA.
[23] Marc Juarez, Mohsen Imani, Mike Perry, Claudia Diaz, and Matthew Wright. 2016. Toward an Efficient Website Fingerprinting Defense. In Proceedings of the 21st European Symposium on Research in Computer Security (ESORICS). Springer, Heraklion, Greece.
[24] Sheharbano Khattak, Taria Elahi, Laurent Simon, Colleen M. Swanson, Steven J. Murdoch, and Ian Goldberg. 2016. SoK: Making Sense of Censorship Resistance Systems. In 16th Privacy Enhancing Technologies Symposium (PETS). DE GRUYTER, Darmstadt, Germany, 37‚Äì61.
[25] Wladimir De la Cadena, Asya Mitseva, Jan Pennekamp, Jens Hiller, Fabian Lanze, Thomas Engel, Klaus Wehrle, and Andriy Panchenko. 2019. POSTER: Traffic Splitting to Counter Website Fingerprinting. In 26th Conference on Computer and Communications Security (CCS). ACM, London, UK, 2533‚Äì2535.
[26] Shuai Li, Huajun Guo, and Nicholas Hopper. 2018. Measuring Information Leakage in Website Fingerprinting Attacks and Defenses. In 25th Conference on Computer and Communications Security (CCS). ACM, Toronto, Canada, 1977‚Äì1992.
[27] Marc Liberatore and Brian Levine. 2006. Inferring the Source of Encrypted HTTP Connections. In Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS). ACM, Alexandria, VA, USA.
[28] Isis Lovecruft, George Kadianakis, Ola Bini, and Nick Mathewson. 2019. Tor Guard Specification. https://gitweb.torproject.org/torspec.git/tree/guard-spec.txt. (Accessed: January 2020).
[29] David Lu, Sanjit Bhat, Albert Kwon, and Srinivas Devadas. 2018. DynaFlow: An Efficient Website Fingerprinting Defense Based on Dynamically-Adjusting Flows. In 17th Workshop on Privacy in the Electronic Society (WPES). ACM, Toronto, Canada, 109‚Äì113.
[30] Xiapu Luo, Peng Zhou, Edmond W. W. Chan, Wenke Lee, Rocky K. C. Chang, and Roberto Perdisci. 2011. HTTPOS: Sealing information leaks with browser-side obfuscation of encrypted flows. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, CA, USA.
[31] Nick Mathewson. 2019. New Release: Tor 0.4.0.5. https://blog.torproject.org/new-release-tor-0405. (Accessed: January 2020).
[32] Rishab Nithyanand, Xiang Cai, and Rob Johnson. 2014. Glove: A Bespoke Website Fingerprinting Defense. In Proceedings of the 13th Workshop on Privacy in the Electronic Society (WPES). ACM, Scottsdale, Arizona, USA.
[33] Se Eun Oh, Saikrishna Sunkam, and Nicholas Hopper. 2019. ùëù1-FP: Extraction, Classification, and Prediction of Website Fingerprints with Deep Learning. In 19th Privacy Enhancing Technologies Symposium (PETS). DE GRUYTER, Stockholm, Sweden, 191‚Äì209.
[34] Andriy Panchenko, Fabian Lanze, Andreas Zinnen, Martin Henze, Jan Pennekamp, Klaus Wehrle, and Thomas Engel. 2016. Website Fingerprinting at Internet Scale. In 23rd Annual Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, CA, USA.
[35] Andriy Panchenko, Lukas Niessen, Andreas Zinnen, and Thomas Engel. 2011. Website Fingerprinting in Onion Routing Based Anonymization Networks. In Proceedings of the 10th Annual ACM Workshop on Privacy in the Electronic Society (WPES) (Chicago, Illinois, USA). ACM.
[36] Andriy Panchenko and Johannes Renner. 2009. Path Selection Metrics for Performance-Improved Onion Routing. In Proceedings of the 9th IEEE/IPSJ Symposium on Applications and the Internet (SAINT). IEEE, Seattle, Washington, USA.