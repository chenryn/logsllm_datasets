### Introduction

This paper evaluates the performance of an intrusion-tolerant consensus protocol, Turquois, specifically designed for wireless ad-hoc networks. The protocol is designed to tolerate Byzantine faults and aims to optimize performance in resource-constrained environments. We compare Turquois with two well-known protocols, Bracha and ABBA, under different failure scenarios: no process failures, fail-stop failures, and Byzantine failures.

### Performance Analysis

#### Latency and Confidence Intervals

The following tables present the average latency and confidence intervals (at a 95% confidence level) for the three protocols in an 802.11b network under different failure conditions.

**Table 1: No Process Failures**

| Group Size | Unanimous (Turquois) | Divergent (Turquois) | Unanimous (Bracha) | Divergent (Bracha) | Unanimous (ABBA) | Divergent (ABBA) |
|------------|----------------------|----------------------|--------------------|--------------------|------------------|------------------|
| n=4        | 14.90 ± 4.74         | 28.67 ± 9.99         | 42.26 ± 3.17       | 99.61 ± 3.05       | 101.06 ± 8.15    | 127.39 ± 37.93   |
| n=7        | 26.85 ± 6.18         | 54.38 ± 10.05        | 106.28 ± 37.63     | 519.76 ± 26.70     | 715.15 ± 112.90  | 2282.23 ± 100.34 |
| n=10       | 43.15 ± 10.05        | 71.75 ± 25.05        | 168.45 ± 52.53     | 2619.35 ± 75.43    | 6276.91 ± 110.69 | 6267.88 ± 355.51 |
| n=13       | 60.94 ± 14.15        | 128.07 ± 42.51       | 375.00 ± 355.51    | 6267.88 ± 143.00   | 10420.00 ± 2640.11 | 6469.38 ± 159.40 |
| n=16       | 87.57 ± 22.34        | 1914.54 ± 283.18     | 395.96 ± 136.64    | 6469.38 ± 159.40   | 7321.41 ± 28.04  | 7321.41 ± 28.04  |

**Table 2: Fail-Stop Failures**

| Group Size | Unanimous (Turquois) | Divergent (Turquois) | Unanimous (Bracha) | Divergent (Bracha) | Unanimous (ABBA) | Divergent (ABBA) |
|------------|----------------------|----------------------|--------------------|--------------------|------------------|------------------|
| n=4        | 42.26 ± 3.17         | 99.61 ± 3.05         | 42.26 ± 3.17       | 99.61 ± 3.05       | 101.06 ± 8.15    | 127.39 ± 37.93   |
| n=7        | 106.28 ± 37.63       | 519.76 ± 26.70       | 106.28 ± 37.63     | 519.76 ± 26.70     | 715.15 ± 112.90  | 2282.23 ± 100.34 |
| n=10       | 168.45 ± 52.53       | 2619.35 ± 75.43      | 168.45 ± 52.53     | 2619.35 ± 75.43    | 6276.91 ± 110.69 | 6267.88 ± 355.51 |
| n=13       | 375.00 ± 355.51      | 6267.88 ± 143.00     | 375.00 ± 355.51    | 6267.88 ± 143.00   | 10420.00 ± 2640.11 | 6469.38 ± 159.40 |
| n=16       | 395.96 ± 136.64      | 6469.38 ± 159.40     | 395.96 ± 136.64    | 6469.38 ± 159.40   | 7321.41 ± 28.04  | 7321.41 ± 28.04  |

**Table 3: Byzantine Failures**

| Group Size | Unanimous (Turquois) | Divergent (Turquois) | Unanimous (Bracha) | Divergent (Bracha) | Unanimous (ABBA) | Divergent (ABBA) |
|------------|----------------------|----------------------|--------------------|--------------------|------------------|------------------|
| n=4        | 44.74 ± 6.99         | 248.66 ± 23.40       | 42.26 ± 3.17       | 99.61 ± 3.05       | 101.06 ± 8.15    | 127.39 ± 37.93   |
| n=7        | 96.20 ± 54.17        | 1634.17 ± 54.17      | 106.28 ± 37.63     | 519.76 ± 26.70     | 715.15 ± 112.90  | 2282.23 ± 100.34 |
| n=10       | 145.22 ± 114.10      | 5633.47 ± 114.10     | 168.45 ± 52.53     | 2619.35 ± 75.43    | 6276.91 ± 110.69 | 6267.88 ± 355.51 |
| n=13       | 386.39 ± 180.10      | 12656.41 ± 180.10    | 375.00 ± 355.51    | 6267.88 ± 143.00   | 10420.00 ± 2640.11 | 6469.38 ± 159.40 |
| n=16       | 590.95 ± 20412.36    | 20412.36 ± 20412.36  | 395.96 ± 136.64    | 6469.38 ± 159.40   | 7321.41 ± 28.04  | 7321.41 ± 28.04  |

### Discussion

The results show that Turquois outperforms both Bracha and ABBA in terms of average latency, especially as the group size increases. This is particularly noticeable in the divergent distribution scenario, where many messages from Byzantine processes fail to pass the validation mechanisms of the protocols.

The reason for this is that many messages sent by Byzantine processes carry values that do not pass the validation checks, forcing the protocol to execute extra rounds to reach a decision. This issue becomes more pronounced with a higher group size, especially in the divergent distribution.

Despite its non-optimized timeout mechanism, which makes it more sensitive to message delays, Turquois still manages to be the faster protocol. This is due to its broadcasting mechanism, which allows the protocol to take full advantage of the unreliable communication medium. By broadcasting a message to multiple nodes, the cost of transmitting the same message to a single node is reduced. Additionally, Turquois avoids the use of public-key cryptography during normal operation to preserve the computational power of mobile nodes, which is usually limited.

### Conclusions

The paper presents Turquois, an intrusion-tolerant consensus protocol designed for wireless ad-hoc networks. The protocol is designed to tolerate up to \( f < \frac{n}{3} \) Byzantine processes, where \( n \) is the total number of processes. Its design takes into account the typically constrained resources of ad-hoc networks while aiming for optimal performance. The key to its performance is the decision to assume an unreliable communication model, which allows the protocol to be inherently resilient to message omissions and delays.

### References

[1] N. Badache, M. Hurfin, and R. Macedo. Solving the consensus problem in a mobile environment. In Proceedings of the 18th IEEE International Conference on Performance, Computing, and Communications, pages 29-35, 1999.

[2] M. Ben-Or. Another advantage of free choice: Completely asynchronous agreement protocols. In Proceedings of the 2nd ACM Symposium on Principles of Distributed Computing, pages 27-30, 1983.

[3] A. Bessani, P. Sousa, M. Correia, N. F. Neves, and P. Verissimo. The CRUTIAL way of critical infrastructure protection. IEEE Security and Privacy, 6(6):44-51, 2008.

[4] V. Bhandari and N. Vaidya. On reliable broadcast in a radio network. In Proceedings of the 24th ACM Symposium on Principles of Distributed Computing, pages 138-147, 2005.

[5] M. Biely, J. Widder, B. Charron-Bost, A. Gaillard, M. Hutle, and A. Schiper. Tolerating corrupted communication. In Proceedings of the 26th ACM Symposium on Principles of Distributed Computing, pages 244-253, 2007.

[6] F. Borran, R. Prakash, and A. Schiper. Extending PaxosLastVoting with an adequate communication layer for wireless ad hoc networks. In Proceedings of the 27th IEEE International Symposium on Reliable Distributed Systems, pages 227-236, 2008.

[7] G. Bracha. An asynchronous L(n -1)/3J-resilient consensus protocol. In Proceedings of the 3rd ACM Symposium on Principles of Distributed Computing, pages 154-162, 1984.

[8] C. Cachin, K. Kursawe, and V. Shoup. Random oracles in Constantinople: Practical asynchronous Byzantine agreement using cryptography. Journal of Cryptology, 18(3):219-246, 2005.

[9] T. Chandra and S. Toueg. Unreliable failure detectors for reliable distributed systems. Journal of the ACM, 43(2):225-267, 1996.

[10] B. Charron-Bost and A. Schiper. The heard-of model: Computing in distributed systems with benign failures. Technical Report LSR-REPORT-2007-001, EPFL, 2007.

[11] G. Chockler, M. Demirbas, S. Gilbert, and C. Newport. Consensus and collision detectors in wireless ad hoc networks. In Proceedings of the 24th ACM Symposium on Principles of Distributed Computing, 2005.

[12] V. Drabkin, R. Friedman, and M. Segal. Efficient Byzantine broadcast in wireless ad-hoc networks. In Proceedings of the International Conference on Dependable Systems and Networks, pages 160-169, 2005.

[13] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed consensus with one faulty process. Journal of the ACM, 32(2):374-382, 1985.

[14] C. Koo. Broadcast in radio networks tolerating Byzantine behavior. In Proceedings of the 23rd Annual ACM Symposium on Principles of Distributed Computing, pages 275-282, 2004.

[15] C.-Y. Koo, V. Bhandari, J. Katz, and N. H. Vaidya. Reliable broadcast in radio networks: The bounded collision case. In Proceedings of the 25th annual ACM symposium on Principles of Distributed Computing, pages 258-264, 2006.

[16] L. Lamport. The part-time parliament. ACM Transactions on Computer Systems, 16(2):133-169, 1998.

[17] A. J. Menezes, P. C. V. Oorschot, and S. A. Vanstone. Handbook of Applied Cryptography. CRC Press, 1997.

[18] H. Moniz, N. F. Neves, and M. Correia. Turquois: Byzantine consensus in wireless ad hoc networks (extended version). Technical Report DI/FCUL TR-10-02, Department of Computer Science, University of Lisbon, 2010.

[19] H. Moniz, N. F. Neves, M. Correia, and P. Verissimo. Randomization can be a healer: Consensus with dynamic omission failures. In Proceedings of the 23rd International Symposium on Distributed Computing, pages 63-77, 2009.

[20] A. Pelc and D. Peleg. Broadcasting with locally bounded Byzantine faults. Information Processing Letters, 93(3):109-115, 2005.

[21] M. O. Rabin. Randomized Byzantine generals. In Proceedings of the 24th Annual IEEE Symposium on Foundations of Computer Science, pages 403-409, 1983.

[22] M. K. Reiter. The Rampart toolkit for building high-integrity services. Theory and Practice in Distributed Systems, volume 938, pages 99-110. Springer-Verlag, 1995.

[23] R. Rivest, A. Shamir, and L. Adleman. A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM, 21(2):120-126, February 1978.

[24] N. Santoro and P. Widmayer. Agreement in synchronous networks with ubiquitous faults. Theoretical Computer Science, 384(2-3):232-249, 2007.

[25] N. Santoro and P. Widmeyer. Time is not a healer. In Proceedings of the 6th Symposium on Theoretical Aspects of Computer Science, pages 304-313, 1989.

[26] U. Schmid, B. Weiss, and I. Keidar. Impossibility and lower bounds for consensus under link failures. SIAM Journal on Computing, 38(5):1912-1951, 2009.

[27] H. Seba, N. Badache, and A. Bouabdallah. Solving the consensus problem in a dynamic group: An approach suitable for a mobile environment. In Proceedings of the 7th IEEE International Symposium on Computers and Communications, pages 327-332, 2002.

[28] E. Vollset and P. D. Ezhilchelvan. Design and performance study of crash-tolerant protocols for broadcasting and reaching consensus in MANETs. In Proceedings of the 24th IEEE Symposium on Reliable Distributed Systems, pages 166-175, 2005.

[29] B. White, J. Lepreau, L. Stoller, R. Ricci, S. Guruprasad, M. Newbold, M. Hibler, C. Barb, and A. Joglekar. An integrated experimental environment for distributed systems and networks. In Proceedings of the 5th Symposium on Operating Systems Design and Implementation, pages 255-270, 2002.

[30] W. Wu, J. Cao, J. Yang, and M. Raynal. Design and performance evaluation of efficient consensus protocols for mobile ad hoc networks. IEEE Transactions on Computers, 56(8):1055-1070, August 2007.