# Optimized Text

## Assembly Code Snippet
```assembly
mov    %r15, %rdx
mov    $0x3c, %esi
mov    %rbp, %rdi
sub    %rbp, %rdx
movl   $0x0, 0xbc(%rsp)
movl   $0x0, 0xbc(%rsp)
callq  4044d0
```

## Data Distribution
The following table represents the distribution of a certain metric (possibly related to instruction importance) across various rows and columns. Each row corresponds to the location of instructions in VUCs, while each column represents the rate of instructions whose metric falls within specific ranges.

| Metric Ranges | 0.0-0.1 | 0.1-0.2 | 0.2-0.3 | 0.3-0.4 | 0.4-0.5 | 0.5-0.6 | 0.6-0.7 | 0.7-0.8 | 0.8-0.9 | 0.9-1.0 |
|---------------|---------|---------|---------|---------|---------|---------|---------|---------|---------|---------|
| Row 1         | 0.30%   | 0.64%   | 1.32%   | 2.12%   | 2.62%   | 3.38%   | 4.10%   | 5.20%   | 6.54%   | -       |
| Row 2         | 0.64%   | 1.38%   | 1.80%   | 2.70%   | 3.18%   | 3.84%   | 4.78%   | 5.82%   | 7.54%   | -       |
| ...           | ...     | ...     | ...     | ...     | ...     | ...     | ...     | ...     | ...     | ...     |
| Row 10        | 0.74%   | 1.72%   | 2.18%   | 2.80%   | 3.40%   | 4.28%   | 4.88%   | 5.94%   | 7.08%   | -       |

## Importance Visualization and Distribution
### Figure 6
**Instruction Importance Measurement:**
- \(\alpha_k\) is an index that measures the importance of the \(k\)-th instruction, where a smaller value indicates greater significance.
- **Figure 6a:** The left side shows the \(\alpha\) values for each instruction. It is evident that instructions involving variables of the same type play a more significant role in type inference. Notably, the instruction in column 3, which operates on a variable of type `char`, has a small \(\alpha\) value, suggesting it is highly influential. This can be attributed to the fact that its representation is similar to the central instruction (column 11), leading the model to treat them as operations on the same variable.
- **Figure 6b:** The heat map illustrates the statistical distribution of \(\alpha\) values for each instruction across the test data. Each row represents the location of instructions in VUCs, and each column represents the percentage of instructions with \(\alpha\) values in the specified range. For example, the value in column 11, row 5, indicates that 16.82% of central instructions have \(\alpha\) values between 0.5 and 1.0.

### Observations
- The heat map shows that the model effectively focuses on the central instruction, which operates on the target variable, and nearby instructions have a positive influence on the prediction.
- The next-door neighboring instructions vary significantly from the central instruction, indicating that the feature extraction method introduces some noise.

## Additional Experiments
### Training and Inference Speed
- **Training Time:**
  - CNN-based classification models: ~2 hours
  - Word2Vec model: ~3 hours
- **Testing Phase:**
  - Extraction: ~24 minutes
  - Prediction (including inference and voting): ~5 minutes
  - Each binary: ~6 seconds

### Compiler Sensitivity
- **GCC vs. Clang:**
  - We tested our prototype on binaries compiled from both GCC and Clang.
  - The performance of the classifiers on Clang-compiled binaries is shown in Table VIII, indicating good results across all stages.
  - **Table VIII: Performance of Classifiers on Clang-Compiled Binaries**
    - Precision, Recall, and F1-score are provided for each stage, showing high accuracy and transferability.

### Related Work
- **Variable Recovery and Type Inference:**
  - Previous works like DIVINE, REWARDS, TIE, and ELKAVYA have focused on variable recovery and type inference using rule-based and machine learning methods.
  - CATI is the first system to approach type inference as a text classification problem, leveraging instruction context and overcoming the challenge of uncertain samples.

### Conclusion
- **CATI System:**
  - CATI uses a novel feature called VUC to improve the representation of variables and employs CNN models with a voting mechanism to infer variable types from stripped binaries.
  - The system demonstrates superior accuracy compared to previous works and highlights the importance of VUC in enhancing classification results.

### Acknowledgments
- We thank Nuno Neves, the anonymous reviewers, and Yifei Huang for their contributions.
- This work was supported by grants from the Chinese National Natural Science Foundation (NSFC 61272078).

### References
- [1] J. He, P. Ivanov, P. Tsankov, V. Raychev, and M. Vechev, “Debin: Predicting debug information in stripped binaries,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 1667–1680.
- [2] A. Prakash, X. Hu, and H. Yin, “vfguard: Strict protection for virtual function calls in COTS C++ binaries.” in NDSS, 2015.
- [3] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables,” in 2013 IEEE Symposium on Security and Privacy.
- [4] M. Zhang and R. Sekar, “Control flow integrity for {COTS} binaries,” in Presented as part of the 22nd {USENIX} Security Symposium ({USENIX} Security 13), 2013, pp. 337–352.
- [5] S. Eschweiler, K. Yakdan, and E. Gerhards-Padilla, “discovre: Efficient cross-architecture identification of bugs in binary code.” in NDSS, 2016.
- [6] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow, “Leveraging semantic signatures for bug search in binary programs,” in Proceedings of the 30th Annual Computer Security Applications Conference. ACM, 2014, pp. 406–415.
- [7] U. Alon, S. Brody, O. Levy, and E. Yahav, “code2seq: Generating sequences from structured representations of code,” arXiv preprint arXiv:1808.01400, 2018.
- [8] N. D. Bui, L. Jiang, and Y. Yu, “Cross-language learning for program classification using bilateral tree-based convolutional neural networks,” in Workshops at the Thirty-Second AAAI Conference on Artificial Intelligence, 2018.
- [9] S. H. Ding, B. C. Fung, and P. Charland, “Asm2vec: Boosting static representation robustness for binary clone search against code obfuscation and compiler optimization,” in Asm2Vec: Boosting Static Representation Robustness for Binary Clone Search against Code Obfuscation and Compiler Optimization. IEEE, 2019, p. 0.
- [10] B. Liu, W. Huo, C. Zhang, W. Li, F. Li, A. Piao, and W. Zou, “αdiff: cross-version binary code similarity detection with DNN,” in Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering. ACM, 2018, pp. 667–678.
- [11] V. Jain, S. Rawat, C. Giuffrida, and H. Bos, “Tiff: Using input type inference to improve fuzzing,” in Proceedings of the 34th Annual Computer Security Applications Conference. ACM, 2018, pp. 505–517.
- [12] “IDA Pro,” https://www.hex-rays.com/.
- [13] J. Lee, T. Avgerinos, and D. Brumley, “Tie: Principled reverse engineering of types in binary programs.” in NDSS, 2011.
- [14] K. ElWazeer, K. Anand, A. Kotha, M. Smithson, and R. Barua, “Scalable variable and data type detection in a binary rewriter,” ACM SIGPLAN Notices, vol. 48, no. 6, pp. 51–60, 2013.
- [15] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “Vtint: Protecting virtual function tables’ integrity.” in NDSS, 2015.
- [16] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data structures from binary execution,” in Proceedings of the 11th Annual Information Security Symposium. CERIAS-Purdue University, 2010, p. 5.
- [17] I. Haller, A. Slowinska, and H. Bos, “Mempick: High-level data structure detection in C/C++ binaries,” in 2013 20th Working Conference on Reverse Engineering (WCRE). IEEE, 2013, pp. 32–41.
- [18] Z. Xu, C. Wen, and S. Qin, “Learning types for binaries,” in International Conference on Formal Engineering Methods. Springer, 2017, pp. 430–446.
- [19] T. Bao, and D. Brumley, “{BYTEWEIGHT}: Learning to recognize functions in binary code,” in 23rd {USENIX} Security Symposium ({USENIX} Security 14), 2014, pp. 845–860.
- [20] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “Bap: A binary analysis platform,” in International Conference on Computer Aided Verification. Springer, 2011, pp. 463–469.
- [21] J. Lafferty, A. McCallum, and F. C. Pereira, “Conditional random fields: Probabilistic models for segmenting and labeling sequence data,” 2001.
- [22] A. Maier, H. Gascon, C. Wressnegger, and K. Rieck, “Typeminer: Recovering types in binary programs using machine learning,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2019, pp. 288–308.
- [23] D. Zeng and G. Tan, “From debugging-information based binary-level type inference to CFG generation,” in Proceedings of the Eighth ACM Conference on Data and Application Security and Privacy. ACM, 2018, pp. 366–376.
- [24] T. Mikolov, I. Sutskever, K. Chen, G. S. Corrado, and J. Dean, “Distributed representations of words and phrases and their compositionality,” in Advances in Neural Information Processing Systems, 2013, pp. 3111–3119.
- [25] G. Balakrishnan and T. Reps, “Divine: Discovering variables in executables,” in International Workshop on Verification, Model Checking, and Abstract Interpretation. Springer, 2007, pp. 1–28.
- [26] “The DWARF Debugging Standard.” http://dwarfstd.org/.
- [27] “gensim,” https://radimrehurek.com/gensim/.
- [28] “Keras,” https://www.tensorflow.org/guide/keras.
- [29] “scikit-learn,” https://scikit-learn.org/.
- [30] Z. L. Chua, S. Shen, P. Saxena, and Z. Liang, “Neural nets can learn function type signatures from binaries,” in 26th USENIX Security Symposium, 2017, pp. 99–116.
- [31] D. Dewey and J. T. Griffin, “Static detection of C++ vtable escape vulnerabilities in binary code.” in NDSS, 2012.
- [32] M. Noonan, A. Loginov, and D. Cok, “Polymorphic type inference for machine code,” in ACM SIGPLAN Notices, vol. 51, no. 6. ACM, 2016, pp. 27–41.
- [33] A. Pawlowski, M. Contag, V. van der Veen, C. Ouwehand, T. Holz, H. Bos, E. Athanasopoulos, and C. Giuffrida, “Marx: Uncovering class hierarchies in C++ programs.” in NDSS, 2017.
- [34] T. Rupprecht, X. Chen, D. H. White, J. H. Boockmann, G. Lütgen, and H. Bos, “DSIBin: Identifying dynamic data structures in C/C++ binaries,” in Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering. IEEE Press, 2017, pp. 331–341.
- [35] J. Z. Kolter and M. A. Maloof, “Learning to detect malicious executables in the wild,” in Proceedings of the tenth ACM SIGKDD international conference on Knowledge discovery and data mining. ACM, 2004, pp. 470–478.
- [36] R. Moskovitch, C. Feher, N. Tzachar, E. Berger, M. Gitelman, S. Dolev, and Y. Elovici, “Unknown malcode detection using opcode representation,” in European conference on intelligence and security informatics. Springer, 2008, pp. 204–215.
- [37] M. G. Schultz, E. Eskin, F. Zadok, and S. J. Stolfo, “Data mining methods for detection of new malicious executables,” in Proceedings 2001 IEEE Symposium on Security and Privacy. S&P 2001. IEEE, 2000, pp. 38–49.
- [38] E. C. R. Shin, D. Song, and R. Moazzezi, “Recognizing functions in binaries with neural networks,” in 24th {USENIX} Security Symposium ({USENIX} Security 15), 2015, pp. 611–626.