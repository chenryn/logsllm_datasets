@person142 responded to #8354, expressing a preference for a Cython-optimized API. This topic had previously been discussed in issue #7242, where I expressed my opposition to the idea. The reasoning was that managing all reasonable halting conditions for a scalar solver is already quite challenging, and this complexity would likely increase significantly with a vectorized scalar solver. My recommendation was to provide a Cython API for a scalar solver and allow users to handle the looping over it.

In #8357, only Newton methods were vectorized. In #8431, we introduced the capability for users to use a "tight loop" in C with Brent, Ridder, and other root-finding algorithms. We also decided to split up the Newton, Halley's, and secant methods into different calls within `cython_optimize`.

I personally support this approach (and wish it had been implemented this way in the `optimize` module), but some team members may feel strongly that the APIs should be consistent.

We discussed which callbacks to support and agreed that `cython_optimize` should be written in pure C to enable the release of the Global Interpreter Lock (GIL). This commit includes links to annotated HTML files that demonstrate that `zeros_struct` and `zeros_array` are implemented in pure C, allowing them to release the GIL and call Cython's `prange`.

The Cython optimize API in #8431 was further discussed in two SciPy-Dev posts, particularly focusing on the design of callback signatures.