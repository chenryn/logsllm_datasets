### Table of Contents

#### Chapter 10: Advanced Builds
- **10.14.** Jenkins Stores Parameter Values for Each Build ..................................................... 265
- **10.15.** Jenkins Stores Parameter Values for Each Build ..................................................... 266
- **10.16.** Adding a Parameterized Trigger to a Build Job ...................................................... 266
- **10.17.** The Build Job You Trigger Must Also Be a Parameterized Build Job ........................... 267
- **10.18.** Passing a Predefined Parameter to a Parameterized Build Job ................................. 268
- **10.19.** Creating a Multiconfiguration Build Job ................................................................ 269
- **10.20.** Adding an Axis to a Multiconfiguration Build ....................................................... 269
- **10.21.** Defining an Axis of Slave Nodes .......................................................................... 270
- **10.22.** Defining an Axis of JDK Versions ........................................................................ 270
- **10.23.** Defining a User-Defined Axis .............................................................................. 271
- **10.24.** Multiconfiguration Build Results ......................................................................... 272
- **10.25.** Setting Up a Combination Filter .......................................................................... 273
- **10.26.** Build Results Using a Combination Filter ............................................................ 274
- **10.27.** A Job Generated by the Maven Jenkins Plugin ...................................................... 276
- **10.28.** Jenkins Master Job Generated ............................................................................ 277
- **10.29.** Artifactory Jenkins Plugin Configuration .............................................................. 280
- **10.30.** Triggering Several Other Builds After a Build Job ............................................... 282
- **10.31.** A Build Job Dependency Graph ......................................................................... 283
- **10.32.** Configuring a Join in the Phoenix-Web-Tests Build Job ......................................... 284
- **10.33.** A More Complicated Build Job Dependency Graph ............................................... 284
- **10.34.** Adding a New Lock ......................................................................................... 285
- **10.35.** Configuring a Build Job to Use a Lock .............................................................. 285
- **10.36.** Configuring a Maven Release Using the M2Release Plugin ..................................... 287
- **10.37.** The Perform Maven Release Menu Option ......................................................... 287
- **10.38.** Performing a Maven Release in Jenkins ............................................................ 288
- **10.39.** Adding a "Copy Artifacts from Another Project" Build Step ................................. 289
- **10.40.** Running Web Tests Against a Copied WAR File .................................................. 291
- **10.41.** Copying from a Multiconfiguration Build .......................................................... 292
- **10.42.** Build Jobs in the Promotion Process ................................................................... 293
- **10.43.** Configuring a Build Promotion Process ............................................................ 294
- **10.44.** Configuring a Manual Build Promotion Process .................................................. 295
- **10.45.** Viewing the Details of a Build Promotion ......................................................... 296
- **10.46.** Using Fingerprints in the Build Promotion Process .............................................. 297
- **10.47.** Fetching the WAR File from the Upstream Build Job ........................................... 297
- **10.48.** Archiving the WAR File for Use in the Downstream Job ....................................... 298
- **10.49.** Fetching the WAR File from the Integration Job .................................................. 298
- **10.50.** We Need to Determine the Fingerprint of the WAR File We Use .............................. 298
- **10.51.** Fetching the Latest Promoted WAR File ........................................................... 299
- **10.52.** Promoted Builds Are Indicated by a Star in the Build History ................................. 299
- **10.53.** Reporting on Aggregate Test Results ................................................................... 300
- **10.54.** Viewing Aggregate Test Results ........................................................................ 301
- **10.55.** Configuring a Manual Step in the Build Pipeline .................................................. 302
- **10.56.** Creating a Build Pipeline View ........................................................................ 302
- **10.57.** Configuring a Build Pipeline View ..................................................................... 303
- **10.58.** A Build Pipeline in Action .............................................................................. 304

#### Chapter 11: Managing Slave Nodes
- **11.1.** Managing Slave Nodes ...................................................................................... 306
- **11.2.** Creating a New Slave Node ............................................................................... 307
- **11.3.** Creating a Unix Slave Node .............................................................................. 307
- **11.4.** Taking a Slave Offline When Idle ........................................................................ 309
- **11.5.** Configuring Tool Locations ............................................................................... 310
- **11.6.** Your New Slave Node in Action ......................................................................... 310
- **11.7.** Creating a Slave Node for JNLP .......................................................................... 311
- **11.8.** Launching a Slave via Java Web Start ................................................................... 312
- **11.9.** The Jenkins Slave Agent in Action ....................................................................... 312
- **11.10.** The Jenkins Slave Failing to Connect to the Master .............................................. 313
- **11.11.** Configuring the Jenkins Slave Port ..................................................................... 313
- **11.12.** Installing the Jenkins Slave as a Windows Service ............................................... 314
- **11.13.** Managing the Jenkins Windows Service ............................................................ 314
- **11.14.** Letting Jenkins Control a Windows Slave as a Windows Service ............................ 315
- **11.15.** Running a Build Job on a Particular Slave Node .................................................. 316
- **11.16.** Jenkins Proactively Monitors Your Build Agents .................................................. 318
- **11.17.** You Manage Your EC2 Instances Using the Amazon AWS Management Console ......... 319
- **11.18.** Configuring an Amazon EC2 Slave ..................................................................... 320
- **11.19.** Configuring an Amazon EC2 Slave ..................................................................... 321
- **11.20.** Creating a New Amazon EC2 Image ................................................................... 322
- **11.21.** Bringing an Amazon EC2 Slave Online Manually ................................................. 322

#### Chapter 12: Automated Deployment
- **12.1.** A Simple Automated Deployment Pipeline ............................................................ 331
- **12.2.** Copying the Binary Artifact to Be Deployed ......................................................... 331
- **12.3.** Deploying to Tomcat Using the Deploy Plugin ..................................................... 332
- **12.4.** Adding a "Build Selector for Copy Artifact" Parameter ........................................... 333
- **12.5.** Configuring a Build Selector Parameter ............................................................ 333
- **12.6.** Specify Where to Find the Artifacts to Be Deployed ............................................... 334
- **12.7.** Choosing the Build to Redeploy .......................................................................... 334
- **12.8.** Using the "Specified by Permalink" Option ......................................................... 335
- **12.9.** Using a Specific Build ..................................................................................... 335
- **12.10.** Using a Maven Enterprise Repository ................................................................ 336
- **12.11.** Deploying an Artifact from a Maven Repository ................................................... 339
- **12.12.** Preparing the WAR to Be Deployed ................................................................... 339
- **12.13.** Configuring a Remote Host .............................................................................. 340
- **12.14.** Deploying Files to a Remote Host in the Build Section ......................................... 341
- **12.15.** Deploying Files to a Remote Host in the Post-Build Actions ................................. 342

#### Chapter 13: Maintenance and Monitoring
- **13.1.** Discarding Old Builds ...................................................................................... 345
- **13.2.** Discarding Old Builds—Advanced Options ......................................................... 346
- **13.3.** Viewing Disk Usage ......................................................................................... 347
- **13.4.** Displaying Disk Usage for a Project ..................................................................... 347
- **13.5.** Displaying Project Disk Usage Over Time ........................................................... 348
- **13.6.** Maven Build Jobs—Advanced Options ............................................................... 348
- **13.7.** Jenkins Load Statistics ..................................................................................... 350
- **13.8.** The Jenkins Monitoring Plugin ........................................................................... 351
- **13.9.** The Builds Directory ......................................................................................... 352
- **13.10.** The Jenkins Backup Manager Plugin ................................................................... 353
- **13.11.** Configuring the Jenkins Backup Manager ........................................................... 354
- **13.12.** Configuring the Thin Backup Plugin ................................................................... 355
- **13.13.** Restoring a Previous Configuration ..................................................................... 355
- **13.14.** Reloading the Configuration from Disk ............................................................... 356
- **13.15.** Jenkins Will Inform You If Your Data Is Not Compatible with the Current Version ........ 357
- **13.16.** Managing Out-of-Date Build Jobs Data .............................................................. 358

#### Appendix A: Additional Examples
- **A.1.** A Project Containing Freely-Named Test Classes .................................................... 364

### Copyright
**Copyright © 2011 John Ferguson Smart**

- **Printed version published by:** O'Reilly Media, 1005 Gravenstein Highway North, Sebastopol, CA 95472.
- **Online version published by:** Wakaleo Consulting, 111 Donald Street, Karori, Wellington 6012, New Zealand.

This work is licensed under a Creative Commons Attribution-Noncommercial-No Derivative Works 3.0 United States license. For more information about this license, see [http://creativecommons.org/licenses/by-nc-nd/3.0/us/](http://creativecommons.org/licenses/by-nc-nd/3.0/us/). You are free to share, copy, distribute, display, and perform the work under the following conditions:
- You must attribute the work to John Ferguson Smart.
- You may not use this work for commercial purposes.
- You may not alter, transform, or build upon this work.

**Trademarks:**
- Java™ and all Java-based trademarks and logos are trademarks or registered trademarks of Sun Microsystems, Inc., in the United States and other countries.
- Eclipse™ is a trademark of the Eclipse Foundation, Inc., in the United States and other countries.
- Apache and the Apache feather logo are trademarks of The Apache Software Foundation.
- Linux® is the registered trademark of Linus Torvalds in the U.S. and other countries.

**Disclaimer:**
While every precaution has been taken in the preparation of this book, the publisher and authors assume no responsibility for errors or omissions, or for damages resulting from the use of the information contained herein.

### Foreword
**Kohsuke Kawaguchi**

Seven years ago, I wrote the first line of code that started the project now known as Jenkins, originally called Hudson. I used to be the guy who broke the build, so I needed a program to catch my mistakes before my colleagues did. It was just a simple tool, but it rapidly evolved into what I believe is the most dominant CI server on the market, encompassing a broad plugin ecosystem, commercial distributions, hosted Jenkins-as-a-Service, user groups, meet-ups, trainings, and more.

The project was open-sourced from its inception and critically relied on the help and love of the community. I've learned that there are many ways to help an open source project, and writing code is just one of them. Spreading the word, helping other users, organizing meet-ups, and writing documentation are also important.

In this sense, John is an important part of the Jenkins community, even though he hasn’t contributed code. Instead, he makes Jenkins more approachable to new users through his popular blog, where he regularly discusses continuous integration practices and other software development topics. He is good at explaining things so that people new to Jenkins can understand them, which is something often hard for those who develop Jenkins day in and day out. He is also well-known for his training courses, making Jenkins accessible to more people.

These days, I focus on Open Source Jenkins, the CloudBees pro version of Jenkins, and taking Jenkins to the private and public cloud with CloudBees DEV@cloud service. In this role, I have more interaction with John, and my respect for his passion has only grown.

I was truly delighted that he took on the daunting task of writing a book about Jenkins. It gives a great overview of the typical main ingredients of continuous integration. And for me personally, I always get asked if there’s a book about Jenkins, and I can finally answer this question positively! But more importantly, this book reflects his passion and long experience in teaching people how to use Jenkins. Don't take my word for it; read on to see it for yourself.

### Preface

#### Audience
This book is aimed at relatively technical readers, though no prior experience with Continuous Integration (CI) is assumed. You may be new to CI and want to learn about its benefits, or you might already be using Jenkins or Hudson and want to discover how to take your CI infrastructure further.

Much of this book discusses Jenkins in the context of Java or JVM-related projects, but even if you are using another technology stack, this book should provide a good foundation in CI with Jenkins. We discuss how to build projects using several non-Java technologies, including Grails, Ruby on Rails, and .NET. Many topics, such as general configuration, notification, distributed builds, and security, are applicable regardless of the language you are using.

#### Book Layout
Continuous Integration is like many things: the more you put in, the more value you will get out. While even a basic CI setup will produce positive improvements in your team process, there are significant advantages to gradually assimilating and implementing more advanced techniques. This book is organized as a progressive journey into the world of CI with Jenkins, starting with a high-level guided tour, moving on to installing and configuring your Jenkins server, and setting up basic build jobs. Once the basics are mastered, we delve into more advanced topics, including automated testing practices, security, advanced notification techniques, and measuring and reporting on code quality metrics. Next, we move on to more advanced build techniques such as matrix builds, distributed builds, and cloud-based CI, before discussing how to implement Continuous Deployment with Jenkins. Finally, we cover some tips on maintaining your Jenkins server.

#### Jenkins or Hudson?
As discussed in the introduction, Jenkins was originally known as Hudson. In 2009, Oracle purchased Sun and inherited the code base of Hudson. In early 2011, tensions between Oracle and the open-source community led to the project forking into two separate entities: Jenkins, run by most of the original Hudson developers, and Hudson, which remained under the control of Oracle.

This book primarily focuses on Jenkins, but much of the content was initially written before the fork, and the products remain very similar. Although the examples and illustrations refer to Jenkins, almost all of what is discussed will also apply to Hudson.

#### Font Conventions
This book follows certain conventions for font usage. Understanding these conventions up-front makes it easier to use this book.

- **Italic**: Used for filenames, file extensions, URLs, application names, emphasis, and new terms when they are first introduced.
- **Constant width**: Used for Java class names, methods, variables, properties, data types, database elements, and snippets of code that appear in text.
- **Constant width bold**: Used for commands you enter at the command line and to highlight new code inserted in a running example.
- **Constant width italic**: Used to annotate output.

#### Command-Line Conventions
From time to time, this book discusses command-line instructions. When we do, output produced by the console (e.g., command prompts or screen output) is displayed in normal characters, and commands (what you type) are written in bold. For example:

```bash
$ ls -al
total 168
drwxr-xr-x 16 johnsmart staff 544 21 Jan 07:20 .
drwxr-xr-x+ 85 johnsmart staff 2890 21 Jan 07:10 ..
-rw-r--r-- 1 johnsmart staff 30 26 May 2009 .owner
-rw-r--r--@ 1 johnsmart staff 1813 16 Apr 2009 config.xml
drwxr-xr-x 181 johnsmart staff 6154 26 May 2009 fingerprints
drwxr-xr-x 17 johnsmart staff 578 16 Apr 2009 jobs
drwxr-xr-x 3 johnsmart staff 102 15 Apr 2009 log
drwxr-xr-x 63 johnsmart staff 2142 26 May 2009 plugins
-rw-r--r-- 1 johnsmart staff 46 26 May 2009 queue.xml
-rw-r--r--@ 1 johnsmart staff 64 13 Nov 2008 secret.key
-rw-r--r-- 1 johnsmart staff 51568 26 May 2009 update-center.json
drwxr-xr-x 3 johnsmart staff 102 26 May 2009 updates
drwxr-xr-x 3 johnsmart staff 102 15 Apr 2009 userContent
drwxr-xr-x 12 johnsmart staff 408 17 Feb 2009 users
drwxr-xr-x 28 johnsmart staff 952 26 May 2009 war
```

Where necessary, the backslash character at the end of the line is used to indicate a line break. You can type this all on one line (without the backslash) if you prefer. Ignore the “>” character at the start of subsequent lines—it’s a Unix prompt character:

```bash
$ wget -O - http://jenkins-ci.org/debian/jenkins-ci.org.key \
> | sudo apt-key add -
```

For consistency, unless we are discussing a Windows-specific issue, we will use Unix-style command prompts (the dollar sign, “$”), as shown here:

```bash
$ java -jar jenkins.war
```

or:

```bash
$ svn list svn://localhost
```

However, unless we say otherwise, Windows users can safely use these commands from the Windows command console:

```cmd
C:\Documents and Settings\Owner> java -jar jenkins.war
```

or:

```cmd
C:\Documents and Settings\Owner> svn list svn://localhost
```

#### Contributors
This book was a collaborative effort involving many people playing different roles. In particular, the following people generously contributed their time, knowledge, and writing skills to make this a better book:

- **Evgeny Goldin**: A Russian-born software engineer living in Israel. He is a lead developer at Thomson Reuters, responsible for activities related to Maven, Groovy, and build tools such as Artifactory and Jenkins. He has extensive experience in a range of technologies, including Perl, Java, JavaScript, and Groovy. Evgeny contributed a section on generating Maven build jobs automatically in Chapter 10, Advanced Builds.

- **Matthew McCullough**: An energetic 15-year veteran of enterprise software development, open-source education, and co-founder of Ambient Ideas, LLC, a Denver consultancy. Matthew is a trainer for GitHub.com, author of the Git Master Class series for O’Reilly, speaker at over 30 national and international conferences, author of 3 of the top 10 DZone RefCards, and President of the Denver Open Source Users Group. His research centers around project automation, including build tools (Maven, Leiningen, Gradle), distributed version control (Git), Continuous Integration (Jenkins), and Quality Metrics (Sonar).