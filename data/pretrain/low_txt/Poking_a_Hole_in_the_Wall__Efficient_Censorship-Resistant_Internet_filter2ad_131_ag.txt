### Table 3: Reachability Tests on Popular WebRTC Services

The testing environment for Protozoa was less restrictive compared to typical ISP connections. Specifically, we could access websites that would normally trigger ISP blockpages when browsed over a VPN. Given that our VPSes are located in datacenters, to ensure reliable Protozoa testing, in Russia and India, we routed all VPS traffic through a VPN server hosted in the same country. This setup allowed us to encounter blockpages when visiting forbidden websites. However, this differentiation did not occur with the VPS in China, where the pages blocked when browsing over a VPN inside the country were also blocked when accessed from our VPS in a datacenter.

#### Availability of WebRTC Services

For Protozoa to function, it is essential to connect to a foreign WebRTC service. Since Protozoa does not assume any specific WebRTC application, it is only necessary to find one unblocked application within the censored region. Table 3 shows that multiple WebRTC applications are available in the countries focused on in our evaluation. Importantly, despite several WebRTC applications being blocked in China, users still have many alternative WebRTC media applications that can be used as carriers for Protozoa covert channels.

#### Reaching Censored Content

To reach our blocked page sets, we leveraged whereby.com to establish Protozoa connections. We successfully accessed all such blocked websites in China, Russia, and India.

### 7.3 Ethical Considerations

The experiments conducted in this section involve accessing censored content from various vantage points within countries known to experience Internet censorship. These accesses raise important ethical concerns, as they risk triggering reprisals from local authorities. We followed the best practices described in the Menlo report [14] to guide three major decisions in our experimental design:

1. **No Volunteer Recruitment**: We did not recruit volunteers for our experiments. Instead, we rented VPSes from commercial VPS providers who understand the legal implications of offering network and computing services in each country they operate.
2. **Integrity of WebRTC Applications**: Although Protozoa uses the signaling infrastructure of existing WebRTC applications, it does not compromise their integrity. Covert traffic is exclusively forwarded by replacing user-generated video content.
3. **No Sensitive Data Collection**: We did not collect any sensitive user data.

### 8. Security Discussion

We now discuss some potential attacks on Protozoa and corresponding defenses:

- **Packet Dropping**: An adversary may drop selected packets of WebRTC media streams to slow down covert data transmission or disrupt Protozoa's functioning. Unlike other systems [27, 34], Protozoa is robust against these attacks because it does not rely on specific packets for managing covert channels. Section 6.3 shows that applications using Protozoa’s covert channels can tolerate a large percentage of dropped packets without terminating.
  
- **Active Probing**: Active probing attacks aim to identify Protozoa proxies by attempting to join active chatrooms and detect the transmission of corrupted video streams. By selecting WebRTC chatrooms that implement member admission controls (e.g., using passwords or contact list checks), Protozoa users can evade this attack.
  
- **Fingerprinting of Cover Videos**: If Protozoa is set up to stream a pre-recorded cover video, an adversary may attempt to identify a particular user by fingerprinting the video. This threat can be countered by rotating the pre-recorded video or feeding a live video from the local camera.
  
- **Long-term User Profiling**: An adversary may track a user’s interactions with WebRTC services to build a profile of interactions with multimedia applications. An accurate profile may enable the adversary to indirectly detect the usage of Protozoa through connections with unusual durations or calls at unusual times. Assessing the feasibility of this threat is an interesting direction for future work.

### 9. Related Work

We now describe past approaches aimed at evading Internet censorship and locate Protozoa in the spectrum of existing techniques.

#### 9.1 Comparison with Similar Systems

Protozoa fits into the family of multimedia covert streaming systems and stands out by introducing a new technique—encoded media tunneling. We compare our system against two other branches of this family (Figure 1 provides a visual comparison):

- **Media Protocol Mimicking**: Previous systems have introduced traffic morphing [77] techniques for the transmission of covert data by imitating multimedia protocols. For example, Skype-Morph [51] and CensorSpoofer [74] deliver throughputs of 344Kbps [51] and 64Kbps [74], respectively. However, due to the difficulty in mimicking the complete behavior of multimedia protocols, these systems are prone to detection with 100% accuracy through a combination of passive and active attacks [34]. In contrast, Protozoa provides strong resistance against traffic analysis and higher throughput (around 1.4Mbps).

- **Raw Media Tunneling**: Systems like FreeWave [36], Facet [46], DeltaShaper [3], and CovertCast [50] modulate covert data in the audio/video input of multimedia applications. Some of these systems can sustain reasonable throughput. For instance, Facet can reach 471Kbps [46] and CovertCast 168Kbps [50]. However, these systems are vulnerable to statistical traffic analysis techniques [4, 27]: FreeWave, Facet, and CovertCast are detected with over 99% accuracy, while DeltaShaper between 85%-95% [4, 27]. Protozoa outperforms these systems in both performance and security.

#### 9.2 Beyond Multimedia Covert Streaming

Protocol mimicking is a general technique for carrying covert data by imitating the behavior of a carrier protocol. However, most solutions [15, 16, 76] suffer from the same limitations as their multimedia protocol siblings and are prone to network attacks [34, 73].

- **Protocol Tunneling**: SWEET [86], CloudTransport [9], and Castle [29] tunnel covert data through steganographically marked email, cloud storage services, and real-time strategy games, respectively. Meek [23, 66] leverages domain fronting to hide Tor traffic inside HTTPS connections to allowed hosts. However, unlike Protozoa, some of these systems have not been evaluated against state-of-the-art traffic analysis attacks, and others have already been shown to be vulnerable to detection [73].

- **Ephemeral Proxies**: Snowflake [21, 22] (which uses WebRTC connections) redirects traffic through short-lived proxies provided by volunteers. Unlike Protozoa, the covert traffic is fingerprintable, and the presence of secret messages can be detected through traffic analysis.

- **Protocol Randomization**: Protocol randomization [13] transforms traffic into random bytes to evade protocol blacklists but fails in the presence of protocol whitelisting and is vulnerable to entropy analysis [73].

- **Refraction Networking**: Refraction networking [7, 8, 17, 24, 25, 35, 38, 78, 79] incorporates special traffic redirection routers inside cooperative ISPs, which need to be carefully placed. Otherwise, a censor can avoid network paths containing such routers [53, 54, 65]. In contrast, Protozoa relies on individual trusted users located outside the censored region.

- **Packet Manipulation Strategies**: Packet manipulation strategies [6, 40, 45, 75] aim to invalidate the state of censors’ firewalls. Protozoa’s covert channels can breach through such firewalls provided that WebRTC traffic is not blocked.

- **CDN-based Access**: Some systems provide access to censored content cached in CDNs [33, 87]. Protozoa provides access to any publicly available content accessible to the Protozoa proxies. MassBrowser [55] leverages cache browsing [33, 87] and volunteer proxies to reach censored content. However, since the connections between clients and proxies are protected with a variant of Obfsproxy [13], they are also affected by the limitations of protocol randomization.

### 10. Conclusions

This paper introduced Protozoa, the first multimedia-based censorship circumvention tool that generates secure covert channels by instrumenting the WebRTC multimedia framework. Our evaluation shows that Protozoa traffic cannot be distinguished from typical WebRTC flows by state-of-the-art traffic analysis techniques. Further, our results show that Protozoa enables an increase in throughput of up to three orders of magnitude compared to similar (and less secure) tunneling tools. Currently, Protozoa requires active user support at the proxy’s end and demands users to find trusted proxies for exchanging covert content. Devising a scalable solution for finding trusted proxies is an interesting direction for future work.

### Acknowledgments

We thank our shepherd, Nick Feamster, and the anonymous reviewers for their comments. This work was partially supported by national funds through Fundação para a Ciência e a Tecnologia (FCT) via the SFRH/BD/136967/2018 grant, and the PTDC/EEI-COM/29271/2017 and UIDB/50021/2020 projects.

### References

[1] A, S., A, H., & H, J. A. (2013). Internet censorship in Iran: A first look. In Proceedings of the 3rd USENIX Workshop on Free and Open Communications on the Internet (Washington, DC, USA).

[2] B, D. (2020). Protozoa code repository. https://github.com/dmbb/Protozoa. Accessed: 2020-08-20.

[3] B, D., S, N., & R, L. (2017). Deltashaper: Enabling unobservable censorship-resistant TCP tunneling over videoconferencing streams. In Proceedings on Privacy Enhancing Technologies (Minneapolis, MN, USA), vol. 2017(4), pp. 5–22.

[4] B, D., S, N., & R, L. (2018). Effective detection of multimedia protocol tunneling using machine learning. In Proceedings of the 27th USENIX Security Symposium (Baltimore, MD, USA).

[5] B, M., MG, D., N, M., C, E., & N, K. (2004). The secure real-time transport protocol (SRTP). RFC 3711, March 2004.

[6] B, K., H, G., Q, X., & L, D. (2019). Geneva: Evolving censorship evasion strategies. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (London, UK), pp. 2199–2214.

[7] B, C., & G, I. (2016). Slitheen: Perfectly imitated decoy routing through traffic replacement. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (Vienna, Austria), pp. 1702–1714.

[8] B, C., & G, I. (2018). Secure asymmetry and deployability for decoy routing systems. In Proceedings on Privacy Enhancing Technologies (Barcelona, Spain), vol. 2018(3), pp. 43–62.

[9] B, C., H, A., & S, V. (2014). CloudTransport: Using cloud storage for censorship-resistant networking. In Privacy Enhancing Technologies, vol. 8555 of Lecture Notes in Computer Science. Springer International Publishing, pp. 1–20.

[10] C C & R. (2020). Report says China internet firms censored coronavirus terms, criticism early in outbreak. https://www.reuters.com/article/us-health-coronavirus-china-censorship/report-says-china-internet-rms-censored-coronavirus-terms-criticism-early-in-outbreak-idUSKBN20Q1VS. Accessed: 2020-08-20.

[11] C, A., C, T., C, M., D C, E., F, A., & K, M. A. (2014). Censorship in the wild: Analyzing Internet filtering in Syria. In Proceedings of the 2014 Conference on Internet Measurement Conference (Vancouver, BC, Canada), pp. 285–298.

[12] C, V., B, A., & K, V. (2009). Anomaly detection: A survey. ACM computing surveys (CSUR) 41, 3.

[13] D, R. (2012). Obfsproxy: the next step in the censorship arms race. https://blog.torproject.org/blog/obfsproxy-next-step-censorship-arms-race. Accessed: 2020-08-20.

[14] D, D., & K, E. (2012). The Menlo report: Ethical principles guiding information and communication technology research. U.S. Department of Homeland Security, Tech. Rep.

[15] D, K. P., C, S. E., R, T., & S, T. (2013). Protocol misidentification made easy with format-transforming encryption. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (Berlin, Germany), pp. 61–72.

[16] D, K. P., C, S. E., & S, T. (2015). Marionette: A programmable network-traffic obfuscation system. In Proceedings of the 24th USENIX Conference on Security Symposium (Washington, D.C., USA), pp. 367–382.