### 4.3 Detected POP Gadget Chains

Next, we evaluated the reported POP gadget chains generated by our prototype. For WordPress and Open Web Analytics, we simplified the POI (Property-Oriented Injection) vulnerabilities to enable our prototype to detect them, thus including these applications in our gadget chain evaluation.

The total number of exploitable gadget chains reported by our prototype is compared to the known gadget chains from security advisories in Table 1. In total, 36 exploitable gadget chains were reported. Our prototype successfully detected a gadget chain in 6 out of 10 applications, with 28 of these gadget chains being previously unknown. The length of the detected gadget chains ranges from 1 to 8 gadgets, with an average chain length of 3 gadgets.

Table 2 highlights the magic methods used as initial gadgets, with the most frequently abused magic method being `__destruct()`, used by 86% of the gadget chains. Only four gadget chains initially exploited `__toString()`, and one chain exploited `__wakeup()`.

Table 3 lists the different types of vulnerabilities detected in each application through POP. The most common vulnerability types are file deletion (FD), file creation (FC), and file modification (FM). Additionally, SQL injection (SQLi) and local file inclusion (LFI) vulnerabilities were detected, along with one instance of XML external entity injection (XXE).

Surprisingly, 9 chains were found in Open Web Analytics, despite only 24 initial gadgets being available. This is because a single call to a method with a frequently used name can lead to a significant portion of the application's code. Due to one dynamic class invocation (refer to Section 4.1), 10 false positives also occurred. For LiveZilla, WordPress, and GLPI, no gadget chain was detected by our tool. Since no gadget chain is publicly documented for these applications, we assume that the POI vulnerability is not exploitable with their core code. False negatives occurred in Piwik and Vanilla Forums, where our prototype analyzed dynamic OOP features imprecisely.

### 5. Related Work

Code reuse attacks and object-oriented programming (OOP) analysis have been extensively studied over the years. However, these techniques have not been applied to PHP-based web applications before. In this section, we review related work in both fields.

#### 5.1 Code Reuse Techniques

The concept of reusing existing code instead of injecting shellcode was first publicly documented by Solar Designer, who demonstrated how to bypass a non-executable stack [32]. The idea is to construct a fake call stack containing necessary parameters and meta-information, leading to a diversion of the control flow. While an adversary can return to any location, they typically return to functions provided by the C standard library, hence the term "return-to-libc" attack.

This basic idea has been extended over the years, leading to the technique now known as return-oriented programming (ROP) [21, 27]. Instead of reusing complete functions, ROP allows an adversary to chain small code fragments to build a malicious payload. There are ROP compilers [16, 29] capable of automatically converting given code into application-specific ROP chains, and Snow et al. demonstrated how such chains can be built on-the-fly [31]. Another related technique uses gadgets that do not end in return instructions but instead use indirect jumps [3, 5].

In 2009/2010, Esser presented the idea of applying code reuse attacks to PHP-based web applications [9, 10], demonstrating the practical feasibility of such an approach and coining the term property-oriented programming (POP). We build upon this work and propose a static analysis approach to detect PHP object injection vulnerabilities and POP gadget chains in an automated way.

#### 5.2 Analysis of Web Applications

Due to the practical importance of PHP-based web applications, numerous techniques have been developed to analyze such applications for potential (injection) vulnerabilities [1, 6, 7, 15, 18, 20, 33, 44–46]. Our static code analysis is based on block and function summaries, a concept first introduced by Xie and Aiken [46]. We have previously extended it for precise analysis of PHP built-in features [6] and for second-order vulnerability detection [7]. In this work, we extend our procedural data flow analysis to support relevant OOP features for POI detection. To the best of our knowledge, none of the existing approaches can analyze object-oriented PHP code.

The challenges of performing efficient OOP analysis on large applications have been addressed for other programming languages. Smaragdakis et al. [30] provide a broad overview of different approaches to perform object-sensitivity analysis and introduce type-sensitive analysis as a more scalable solution. Although their approach looks promising, it is not applicable to weakly-typed languages like PHP.

Several static code analysis approaches have been proposed for points-to analysis in weakly-typed JavaScript [2, 11, 12, 17, 35] and Java [23, 25, 40]. For example, Livshits and Lam proposed a static analysis approach to detect security vulnerabilities in Java applications [23], and Tripp et al. designed static taint analysis for Java, implemented in the TAJ system [40]. These approaches generally cannot be adapted to PHP due to the lack of type information in PHP.

### 6. Conclusion and Future Work

Code reuse attacks are not only a threat for memory corruption vulnerabilities in binary executables but also for web applications. In this paper, we studied the nature of PHP object injection vulnerabilities that can be exploited via property-oriented programming. In such attacks, an object with modified properties is injected into the application, and through PHP's magic methods, the control flow is diverted, allowing an adversary to perform malicious computations. We proposed and implemented an automated approach for efficient gadget chain detection. An empirical evaluation demonstrates that our method can find new POI vulnerabilities and various types of gadget chains.

Our prototype models only relevant OOP features for POP detection. False positives and negatives can occur due to imprecise handling of dynamic OOP features [14]. Future work will extend the support for OOP features and address the challenge of framework analysis [24, 34].

### 7. References

[1] Balzarotti, D., Cova, M., Felmetsger, V., Jovanovic, N., Kirda, E., Kruegel, C., and Vigna, G. Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications. In IEEE Symposium on Security and Privacy (2008).

[2] Barth, A., Weinberger, J., and Song, D. Cross-Origin JavaScript Capability Leaks: Detection, Exploitation, and Defense. In USENIX Security Symposium (2009), pp. 187–198.

[3] Bletsch, T., Jiang, X., Freeh, V. W., and Liang, Z. Jump-oriented Programming: A New Class of Code-reuse Attack. In ACM Symposium on Information, Computer and Communications Security (ASIACCS) (2011).

[4] Bodden, E., Sewe, A., Sinschek, J., Oueslati, H., and Mezini, M. Taming Reflection: Aiding Static Analysis in the Presence of Reflection and Custom Class Loaders. In Proceedings of the 33rd International Conference on Software Engineering (2011), ICSE ’11, pp. 241–250.

[5] Checkoway, S., Davi, L., Dmitrienko, A., Sadeghi, A.-R., Shacham, H., and Winandy, M. Return-oriented programming without returns. In ACM Conference on Computer and Communications Security (CCS) (2010).

[6] Dahse, J., and Holz, T. Simulation of Built-in PHP Features for Precise Static Code Analysis. In Symposium on Network and Distributed System Security (NDSS) (2014).

[7] Dahse, J., and Holz, T. Static Detection of Second-Order Vulnerabilities in Web Applications. In USENIX Security Symposium (2014).

[8] Dean, J., Grove, D., and Chambers, C. Optimization of Object-oriented Programs using Static Class Hierarchy Analysis. In ECOOP’95 Object-Oriented Programming, 9th European Conference, Åarhus, Denmark, August 7–11, 1995 (1995), Springer, pp. 77–101.

[9] Esser, S. Shocking News in PHP Exploitation. In Power of Community (POC) (2009).

[10] Esser, S. Utilizing Code Reuse Or Return Oriented Programming in PHP Applications. In BlackHat USA (2010).

[11] Guarnieri, S., and Livshits, V. B. GATEKEEPER: Mostly Static Enforcement of Security and Reliability Policies for JavaScript Code. In USENIX Security Symposium (2009), pp. 151–168.

[12] Guarnieri, S., Pistoia, M., Tripp, O., Dolby, J., Teilhet, S., and Berg, R. Saving the World Wide Web from Vulnerable JavaScript. In Proceedings of the 2011 International Symposium on Software Testing and Analysis (2011), ACM, pp. 177–187.

[13] Halfond, W. G., Viegas, J., and Orso, A. A Classification of SQL Injection Attacks and Countermeasures. In Proceedings of the IEEE International Symposium on Secure Software Engineering (2006).

[14] Hills, M., Klint, P., and Vinju, J. An Empirical Study of PHP Feature Usage. In International Symposium on Software Testing and Analysis (ISSTA) (2013).

[15] Huang, Y.-W., Yu, F., Hang, C., Tsai, C.-H., Lee, D.-T., and Kuo, S.-Y. Securing Web Application Code by Static Analysis and Runtime Protection. In International Conference on the World Wide Web (WWW) (2004).

[16] Hund, R., Holz, T., and Freiling, F. C. Return-oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms. In USENIX Security Symposium (2009).

[31] Snow, K. Z., Monrose, F., Davi, L., Dmitrienko, A., Liebchen, C., and Sadeghi, A.-R. Just-in-Time Code Reuse: On the Effectiveness of Fine-grained Address Space Layout Randomization. In IEEE Symposium on Security and Privacy (2013).

[32] Solar Designer. Getting around non-executable stack (and fix). http://seclists.org/bugtraq/1997/Aug/63, as of May 2014.

[17] Jang, D., and Choe, K.-M. Points-to analysis for JavaScript. In Proceedings of the 2009 ACM Symposium on Applied Computing (2009), ACM, pp. 1930–1937.

[18] Jovanovic, N., Kruegel, C., and Kirda, E. Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities (Short Paper). In IEEE Symposium on Security and Privacy (2006).

[19] Klein, A. Cross-Site Scripting Explained. Sanctum White Paper (2002).

[20] Kneuss, E., Suter, P., and Kuncak, V. Phantm: PHP Analyzer for Type Mismatch. In ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE) (2010).

[21] Krahmer, S. x86-64 Buffer Overflow Exploits and the Borrowed Code Chunks Exploitation Technique. http://users.suse.com/~krahmer/no-nx.pdf, 2005.

[22] Livshits, B., Whaley, J., and Lam, M. S. Reflection Analysis for Java. In Proceedings of the Third Asian Conference on Programming Languages and Systems (2005), APLAS’05, pp. 139–160.

[23] Livshits, V. B., and Lam, M. S. Finding Security Vulnerabilities in Java Applications with Static Analysis. In USENIX Security Symposium (2005).

[24] Madsen, M., Livshits, B., and Fanning, M. Practical Static Analysis of JavaScript Applications in the Presence of Frameworks and Libraries. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (2013), ESEC/FSE 2013, ACM, pp. 499–509.

[25] Milanova, A., Rountev, A., and Ryder, B. G. Parameterized Object Sensitivity for Points-to and Side-effect Analyses for Java. ACM SIGSOFT Software Engineering Notes 27, 4 (2002), 1–11.

[26] MITRE. Common Vulnerabilities and Exposures (CVE). http://cve.mitre.org/, as of May 2014.

[27] Roemer, R., Buchanan, E., Shacham, H., and Savage, S. Return-Oriented Programming: Systems, Languages, and Applications. ACM Transactions on Information and System Security 15, 1 (Mar. 2012).

[28] Schwartz, E. J., Avgerinos, T., and Brumley, D. All You Ever Wanted to Know About Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask). In IEEE Symposium on Security and Privacy (2010).

[29] Schwartz, E. J., Avgerinos, T., and Brumley, D. Q: Exploit Hardening Made Easy. In USENIX Security Symposium (2011).

[30] Smaragdakis, Y., Bravenboer, M., and Lhoták, O. Pick Your Contexts Well: Understanding Object-sensitivity. ACM SIGPLAN Notices 46, 1 (2011), 17–30.

[33] Son, S., and Shmatikov, V. SAFERPHP: Finding Semantic Vulnerabilities in PHP Applications. In ACM SIGPLAN Workshop on Programming Languages and Analysis for Security (PLAS) (2011).

[34] Sridharan, M., Artzi, S., Pistoia, M., Guarnieri, S., Tripp, O., and Berg, R. F4F: Taint Analysis of Framework-based Web Applications. ACM SIGPLAN Notices 46, 10 (2011), 1053–1068.

[35] Sridharan, M., Dolby, J., Chandra, S., Schäfer, M., and Tip, F. Correlation Tracking for Points-to Analysis of JavaScript. In ECOOP 2012–Object-Oriented Programming. Springer, 2012, pp. 435–458.

[36] Sundaresan, V., Hendren, L., Razafimahefa, C., Vallée-Rai, R., Lam, P., Gagnon, E., and Godin, C. Practical Virtual Method Call Resolution for Java. ACM SIGPLAN Notices 35, 10 (2000), 264–280.

[37] Szekeres, L., Payer, M., Wei, T., and Song, D. SoK: Eternal War in Memory. In IEEE Symposium on Security and Privacy (2013).

[38] The PHP Group. PHP: Autoloading Classes. http://php.net/manual/language.oop5.autoload.php, as of May 2014.

[39] The PHP Group. PHP: Magic Methods. http://php.net/manual/language.oop5.magic.php, as of May 2014.

[40] Tripp, O., Pistoia, M., Fink, S. J., Sridharan, M., and Weisman, O. TAJ: Effective Taint Analysis of Web Applications. ACM Sigplan Notices 44, 6 (2009), 87–97.

[41] van der Veen, V., Dutt-Sharma, N., Cavallaro, L., and Bos, H. Memory Errors: The Past, the Present, and the Future. In Symposium on Recent Advances in Intrusion Detection (RAID) (2012).

[42] W3Techs. Usage of Content Management Systems for Websites. http://w3techs.com/technologies/overview/content_management/all, as of May 2014.

[43] W3Techs. Usage of Server-side Programming Languages for Websites. http://w3techs.com/technologies/overview/programming_language/all, as of May 2014.

[44] Wasserman, G., and Su, Z. Static Detection of Cross-Site Scripting Vulnerabilities. In International Conference on Software Engineering (ICSE) (2008).

[45] Wassermann, G., and Su, Z. Sound and Precise Analysis of Web Applications for Injection Vulnerabilities. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI) (2007).

[46] Xie, Y., and Aiken, A. Static Detection of Security Vulnerabilities in Scripting Languages. In USENIX Security Symposium (2006).