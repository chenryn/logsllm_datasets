### Time and Region Size Relationship

The increase in search time is significantly smaller compared to the increase in region size. Specifically, when the region size increases by a factor of 10, the corresponding search time only increases by a factor of 2.2. For a group with 1,000 members, the percentage of bufferers is only 1%. Compared to a scenario where every member buffers the message, our algorithm reduces the buffer space requirement by a factor of 100.

### Experimental Results

In this section, we compare the buffer requirements of Bimodal Multicast and RRMP on the UNIX platform. The experiment was conducted in a local area network (LAN) consisting of 30 machines. The sender transmits 1-byte messages at a rate of 100 messages per second, and these messages are delivered to the application in FIFO order. We randomly dropped messages with a probability of 1% at each receiver and compared the number of buffered messages between the two protocols. The results are illustrated in Figure 9, where the x-axis represents the measurement times and the y-axis shows the number of buffered messages.

#### Bimodal Multicast Protocol

In the Bimodal Multicast protocol, a receiver buffers received messages for a fixed amount of time after their initial reception and then performs garbage collection [2]. In the current implementation, the length of a gossip round is 100ms, and a receiver keeps a message for 10 rounds. As shown in Figure 9, the number of messages in a member's buffer is around 100.

#### RRMP Protocol

In contrast, the RRMP protocol divides its buffer space into two parts: a short-term buffer and a long-term buffer. When a member first receives a message, it stores the message in the short-term buffer until no request for that message has been received for a certain period (50ms in the current implementation). Then, the member randomly decides to become a long-term bufferer with a probability \( \frac{C}{\epsilon} \). In this experiment, we set \( C = 6 \) and \( \epsilon = 30 \), resulting in an average of 20% of the members in a region serving as long-term bufferers. A long-term bufferer retains the message for 1 second. As shown in Figure 9, the buffer requirements for RRMP are substantially lower than those for Bimodal Multicast.

### Buffer Space Reduction in Bimodal Multicast

To reduce the buffer space in Bimodal Multicast, a member could buffer received messages for a shorter period. To be comparable to RRMP, a member should buffer a message for approximately 250ms. However, as demonstrated in [15], a significant fraction of message losses in Bimodal Multicast may take longer than 250ms to recover due to randomization. If a message loss cannot be recovered within a certain time, the protocol gives up on the message and reports the loss to the application, potentially increasing the loss rate.

### Impact on Error Recovery Latency

A concern with the two-phase buffering scheme in RRMP is its potential negative impact on error recovery latency. After a message becomes idle (i.e., no request for the message has been received for 50ms), only a subset of members in a local region will continue to buffer the message. If a member discards a message and later receives a retransmission request, it must search for a bufferer. This is usually not a problem in a LAN or when message losses are random and independent, as previous work has shown that error recovery latency in such cases is much smaller than 50ms [15].

In a wide area network (WAN), where all members in a region may miss the same message, the situation is different. To study the behavior of RRMP in such scenarios, we conducted another experiment where we emulated a WAN by dividing the 30 members evenly into two local regions. Messages sent within a local region experienced normal delays, while messages sent between regions had an additional delay of 30ms and a random loss probability of 5%.

### Comparison with Single-Phase Buffering

As a comparison, we implemented a single-phase buffering scheme where all members continue to buffer an idle message for 1 second. We compared the error recovery latency between the two schemes, as shown in Figure 10. The x-axis represents the error recovery latency in milliseconds, and the y-axis shows the percentage of message losses recovered within the corresponding time. The figure indicates that the two-phase buffering scheme incurs only a small performance penalty in error recovery latency while providing a substantial reduction in buffer requirements.

### Discussion

In RRMP, a member may discard a message before it has been received by all members in the group, which contrasts with stability detection protocols where a message is discarded only after it has been delivered everywhere. Consequently, our buffering scheme introduces a small probability of violating the reliability guarantee of the multicast service. This probability can be minimized with carefully chosen parameters but must still be considered in application design.

Applications requiring stronger guarantees should use protocols that provide better reliability, such as virtual synchrony [1]. The probabilistic guarantees offered by RRMP have the benefits of superior scalability and intrinsic robustness in networks subject to message loss and process failures, but they are not suitable when absolute reliability is required.

### Related Work

In RRMP, the set of long-term bufferers is chosen randomly from all receivers in a region. Previously, we proposed a deterministic algorithm [12] that selects a subset of receivers using a hash function. The choice reflects a trade-off between network traffic and computation overhead. The deterministic approach avoids the latency and network traffic associated with the search process but incurs computation overhead. In contrast, the randomized algorithm allows easy adaptation to group membership dynamics.

### Conclusion

Designing an efficient buffer management algorithm is challenging in large multicast groups where no member has complete group membership information and delivery latencies can vary significantly. This paper presents an innovative two-phase buffering algorithm that addresses variations in delivery latency. Unlike tree-based protocols, RRMP achieves better load balancing by distributing the buffering load among all members in the region. Simulation and experimental results demonstrate the algorithm's good performance.

### Acknowledgments

We thank Fred Douglis and the anonymous reviewers for their comments on an early draft of the paper.

### References

[1] K. P. Birman. Building Secure and Reliable Network Applications. Manning Publishing Company and Prentice Hall, 1997.
[2] K. P. Birman, M. Hayden, O. Ozkasap, Z. Xiao, M. Budiu, and Y. Minsky. Bimodal multicast. In ACM Transactions on Computer Systems, May 1999.
[3] D. D. Clark and D. L. Tennenhouse. Architectural considerations for a new generation of protocols. In Proceedings of ACM SIGCOMM, 1990.
[4] S. E. Deering and D. R. Cheriton. Multicast routing in datagram internetworks and extended LANs. In ACM Transactions on Computer Systems, May 1990.
[5] R. Durrett. The Essentials of Probability. Duxbury Press, 1994.
[6] P. T. Eugster, R. Guerraoui, S. B. Handurukande, A. M. Kermarrec, and P. Kouznetsov. Lightweight probabilistic broadcast. In Proceedings of the International Conference on Dependable Systems and Networks, July 2001.
[7] S. Floyd, V. Jacobson, S. McCanne, C.-G. Liu, and L. Zhang. A reliable multicast framework for lightweight sessions and application level framing. In Proceedings of ACM SIGCOMM, 1995.
[8] K. Guo and I. Rhee. Message stability detection for reliable multicast. In Proceedings of IEEE INFOCOM, 2000.
[9] H. Holbrook, S. Singhal, and D. Cheriton. Log-based receiver-reliable multicast for distributed interactive simulation. In Proceedings of ACM SIGCOMM, 1995.
[10] P. Kouznetsov, R. Guerraoui, S. B. Handurukande, and A. M. Kermarrec. Reducing noise in gossip-based reliable broadcast. In Proceedings of the 20th IEEE Symposium on Reliable Distributed Systems, Oct. 2001.
[11] C.-G. Liu, D. Estrin, S. Shenker, and L. Zhang. Local error recovery in SRM: Comparison of two approaches. In IEEE/ACM Transactions on Networking, Dec. 1998.
[12] O. Ozkasap, R. van Renesse, K. P. Birman, and Z. Xiao. Efficient buffering in reliable multicast protocols. In International Workshop on Networked Group Communication, Nov. 1999.
[13] S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. Reliable multicast transport protocol (RMTP). In IEEE Journal on Selected Areas in Communication, special issue on Network Support for Multipoint Communication, 1997.
[14] P. Sharma, D. Estrin, S. Floyd, and L. Zhang. Scalable session messages in SRM using self-configuration. Technical report, University of Southern California, 1998.
[15] Z. Xiao. Efficient Error Recovery for Reliable Multicast. PhD thesis, Cornell University, Jan. 2001.
[16] Z. Xiao and K. P. Birman. A randomized error recovery algorithm for reliable multicast. In Proceedings of IEEE INFOCOM, Apr. 2001.
[17] R. Yavatkar, J. Griffoen, and M. Sudan. A reliable dissemination protocol for interactive collaborative applications. In Proceedings of ACM Multimedia, 1995.