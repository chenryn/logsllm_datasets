### Domain Relaxation

In certain scenarios, two web pages may be considered part of the same domain, allowing them to access each other’s Document Object Model (DOM). This can be achieved through domain relaxation in our system. One approach is to assign the `profile.a.com` page a secrecy tag `F({profile.a.com}, {profile.a.com, login.a.com})`, enabling it to receive secrets from `login.a.com`. Conversely, `login.a.com` would have a corresponding secrecy label.

Another method is to grant each page the `name.a.com → a.com` reclassification capability. This would permit these pages to communicate with `a.com` but not directly with each other, as reclassification is currently applied only when necessary to complete a request and only on the source entity. To enable direct communication, their respective secrecy tags `name.a.com` would need to be replaced with `a.com`. This can be accomplished by the browser traversing the page's DOM and updating the secrecy tags of relevant nodes from `name.a.com` to `a.com`.

### Content Security Policy (CSP)

A Content Security Policy (CSP) allows a web page to specify the sources from which resources (e.g., third-party scripts) can be loaded. The policy applies to images, scripts, and other resources. CSPs can be interpreted as policies set by the host page to control information flow between the host and remote servers from which external resources originate. When a request (e.g., an HTTP GET) is sent, information flows from the browser to the remote server. The host page can embed arbitrary information in the URL string of the HTTP GET request, allowing it to send data to the remote server.

Once loaded, external resources such as scripts can interact with the rest of the page and with remote servers. Our generalized CSP (GCSP) (Section III-B2) can be used to specify the information-flow constraints present in CSPs.

### Differences Between GCSP and Existing CSP

There are two main differences between our GCSP and the existing CSP:

1. **Transitive Information Flows**: The existing CSP only takes effect at resource-loading time and does not constrain transitive information flows. For example, if a URL's CSP forbids scripts from `ad.com`, it does not prevent an extension's content script running in the same page from sending or receiving information from `ad.com`. In contrast, GCSP enforces a stricter policy: any information tagged with a URL secrecy tag cannot be sent to components that do not have that tag.

2. **Additional Policies**: CSPs also enforce policies beyond information flow. For instance, not loading resources from an external source prevents that source from using local resources such as the screen or CPU. This effectively protects users from seeing offensive ads and prevents scripts from draining the laptop battery.

### Third-Party Content Embedding

Modern browsers allow web pages to embed third-party content with minimal restrictions. Our modified browser imposes stricter constraints. To allow web pages to load third-party content, we explicitly enable two-way communication between the page and the external resources. For example, the DOM label from Section III-D explicitly allows the `cnn.com` page to receive secrets from `ad.com` and to reclassify its own secrets to allow requests to `ad.com`.

```
doc1 S = F({cnn.user}, {cnn.*, ad.*, google.*}), I = {}, D = {+network, cnn.* → ad.*, cnn.* → google.*}
```

If all label checks need to succeed, we can assign the permissive label `(F({}, allS), allI, {-allS, +allI})` to extensions and DOM elements. Here, `allS` and `allI` denote all the secrecy and integrity tags. This label allows an entity to access and declassify all private data.

### postMessage API

The `postMessage` API is a JavaScript feature that enables web pages to communicate across domains on the client side. It works in two conditions: a parent page embedding another page in an iframe or a parent page opening another page in a new tab. In both cases, the API allows two-way communication. The sender must specify the destination, and the receiver can check the source.

To enable `postMessage` communications in our system, the sender and receiver's labels need to be adjusted. If a host page attempts to send data directly to an iframe from a different origin, the request would be denied by our browser. To allow `postMessage` to work, labels are assigned to the host and iframed page in a similar manner as discussed for the Same-Origin Policy (SOP) and CSP.

### iframe Policies

iframes were introduced as an isolation mechanism for a parent page to confine untrusted pages. However, they have been misused to embed trusted pages within malicious pages, leading to phishing and clickjacking attacks.

To prevent such attacks, a server can use the `X-Frame-Options` header to specify that the page should not be rendered inside an iframe at all or should only be rendered inside an iframe of a page from a specified origin.

In a pure information-flow approach, disallowing a page from loading in an iframe is challenging. We can, however, prevent the parent page from gaining information from a loaded iframe. For example, if `a.com` tries to place `victim.com` in an iframe and receive information from it, `a.com` would need a secrecy label that includes `victim.com`'s secrets. To prevent this, the browser would generate `a.com`'s label from something other than `a.com`'s (self-supplied) CSP. Such restrictions can be expressed cleanly using our composition operators (Section III-B2).

### Conclusion

We have developed an approach for reasoning about information flows in a fully-fledged web browser. Our approach supports common browser policies like the Same-Origin Policy and more flexible, practically useful policies that current browsers cannot. We applied our approach to Chromium, developing a formal model and a functional prototype system. A proof of noninterference provides assurance of the model's correctness. A formal analysis also reveals some limits to the provided protections. Using the prototype, we experimentally validated the ability of our design to offer additional protection while continuing to support standard browsing functionality.

We believe our approach and model strike a balance between practicality and formal guarantees, serving as a step towards developing rich information-flow enforcement models that acknowledge practical constraints.

### Acknowledgment

This research was supported in part by the US Navy grant N000141310156; NSF grants 0917047, 1018211, and 1320470; and the Singapore National Research Foundation under its International Research Centre @ Singapore Funding Initiative, administered by the IDM Programme Office.

### References

[1] 64px.com. Facebook for Chrome, 2014. https://chrome.google.com/webstore/detail/facebook-for-chrome/gdalhedleemkkdjddjgfjmcnbpejpapp.

[2] S. A. Zdancewic. Programming Languages for Information Security. PhD thesis, Cornell University, 2002.

[3] S. Agarwal. Session hijacking or cookie stealing using PHP and JavaScript, 2011. http://www.martani.net/2009/08/xss-steal-passwords-using-javascript.html.

[4] O. Arden, M. D. George, J. Liu, K. Vikram, A. Askarov, and A. C. Myers. Sharing mobile code securely with information flow control. In Proc. IEEE S&P, 2012.

[5] T. H. Austin and C. Flanagan. Efficient purely-dynamic information flow analysis. In Proceedings of the ACM SIGPLAN Fourth Workshop on Programming Languages and Analysis for Security, PLAS ’09, 2009.

[6] T. H. Austin and C. Flanagan. Multiple facets for dynamic information flow. In Proc. POPL, 2012.

[7] S. Bandhakavi, N. Tiku, W. Pittman, S. T. King, P. Madhusudan, and M. Winslett. Vetting browser extensions for security vulnerabilities with VEX. Commun ACM, 54(9):91–99, Sept. 2011.

[8] A. Barth, A. P. Felt, P. Saxena, and A. Boodman. Protecting browsers from extension vulnerabilities. In Proc. NDSS, 2010.

[9] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In Proc. CCS, 2008.

[10] A. Barth, C. Jackson, C. Reis, and T. G. C. Team. The security architecture of the Chromium browser. Technical report, 2008.

[11] L. Bauer, S. Cai, L. Jia, T. Passaro, M. Stroucken, and Y. Tian. Run-time monitoring and formal analysis of information flows in Chromium. Technical Report CMU-CyLab-14-015, CyLab, Carnegie Mellon University, 2014.

[12] L. Bauer, S. Cai, L. Jia, T. Passaro, and Y. Tian. Analyzing the dangers posed by Chrome extensions. In Proc. IEEE CNS, 2014.

[13] A. Bichhawat, V. Rajani, D. Garg, and C. Hammer. Information flow control in WebKit’s JavaScript bytecode. In POST, 2014.

[14] K. Boda, Á. M. Földes, G. G. Gulyás, and S. Imre. User tracking on the web via cross-browser fingerprinting. In Information Security Technology for Applications, 2012.

[15] A. Bohannon and B. C. Pierce. Featherweight Firefox: Formalizing the core of a web browser. In Proc. USENIX WebApps, 2010.

[16] A. Chudnov and D. A. Naumann. Information flow monitor inlining. In Proc. IEEE CSF, 2010.

[17] R. Chugh, J. A. Meister, R. Jhala, and S. Lerner. Staged information flow for JavaScript. In Proc. PLDI, 2009.

[18] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen. A safety-oriented platform for web applications. In Proc. IEEE S&P, 2006.

[19] W. De Groef, D. Devriese, N. Nikiforakis, and F. Piessens. FlowFox: A web browser with flexible and precise information flow control. In Proc. ACM CCS, 2012.

[20] D. Devriese and F. Piessens. Noninterference through secure multi-execution. In Proc. IEEE S&P, 2010.

[21] E. W. Felten and M. A. Schneider. Timing attacks on web privacy. In Proc. ACM CCS, 2000.

[22] D. Fett, R. Küsters, and G. Schmitz. An expressive model for the Web infrastructure: Definition and application to the Browser ID SSO system. In Proc. IEEE S&P, 2014.

[23] Google.com. Google Mail Checker, 2014. https://chrome.google.com/webstore/detail/google-mail-checker/mihcahmgecmbnbcchbopgniflfhgnkff.

[24] W. Gordon. Many browser extensions have become adware or malware. Check yours now, 2014. http://lifehacker.com/many-browser-extensions-have-become-adware-or-malware-1505117457.

[25] C. Grier, S. Tang, and S. T. King. Designing and implementing the OP and OP2 web browsers. ACM Trans Web, 5(2):11:1–11:35, May 2011.

[26] J. Grossman. XSS Attacks: Cross-site scripting exploits and defense. Syngress, 2007.

[27] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. JSFlow: Tracking information flow in JavaScript and its APIs. In Proc. ACM SAC, 2014.

[28] D. Hedin and A. Sabelfeld. Information-flow security for a core of JavaScript. In Proc. IEEE CSF, 2012.

[29] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schechter, and C. Jackson. Clickjacking: attacks and defenses. In Proc. USENIX Security, 2012.

[30] IETF. X-Frame-Options, HTTP field header, 2013. http://tools.ietf.org/html/rfc7034.

[31] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An empirical study of privacy-violating information flows in JavaScript web applications. In Proc. ACM CCS, 2010.

[32] L. Jia, J. Aljuraidan, E. Fragkaki, L. Bauer, M. Stroucken, K. Fukushima, S. Kiyomoto, and Y. Miyake. Run-time enforcement of information-flow properties on Android. In Proc. ESORICS, 2013.

[33] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler, and R. Morris. Information flow control for standard OS abstractions. In Proc. SOSP, 2007.

[34] L. Liu, X. Zhang, and S. Chen. Botnet with browser extensions. In Proc. IEEE SocialCom, 2011.

[35] R. S. Liverani and N. Freeman. Abusing Firefox extensions, 2009. http://www.defcon.org/images/defcon-17.

[36] F. Martani. XSS, Passwords theft using JavaScript, 2009. http://www.martani.net/2009/08/xss-steal-passwords-using-javascript.html.

[37] S. Moore and S. Chong. Static analysis for efficient hybrid information-flow control. In Proc. IEEE CSF, 2011.

[38] A. C. Myers. Practical mostly-static information flow control. In Proc. POPL, 1999.

[39] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and C. Cowan. User-driven access control: Rethinking permission granting in modern operating systems. In Proc. IEEE S&P, 2012.

[40] A. Russo and A. Sabelfeld. Dynamic vs. static flow-sensitive security analysis. In Proc. IEEE CSF, 2010.

[41] A. Sabelfeld and A. C. Myers. Language-based information-flow security. IEEE J Sel Area Comm, 21(1):5–19, 2003.

[42] D. Stefan, E. Z. Yang, B. Karp, P. Marchenko, A. Russo, and D. Mazières. Protecting users by confining JavaScript with COWL. In Proc. OSDI, 2014.

[43] S. Tang, H. Mai, and S. T. King. Trust and protection in the Illinois browser operating system. In Proc. OSDI, 2010.

[44] W3C. Content Security Policy 1.1, 2014. http://www.w3.org/TR/CSP11/.

[45] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The multi-principal OS construction of the Gazelle web browser. In Proc. USENIX Security, 2009.

[46] J. Wang, X. Li, X. Liu, X. Dong, J. Wang, Z. Liang, and Z. Feng. An empirical study of dangerous behaviors in Firefox extensions. In ISC, 2012.

[47] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen, and S. King. Automated web patrol with strider honeymonkeys. In Proc. NDSS, 2006.

[48] E. Z. Yang, D. Stefan, J. Mitchell, D. Mazières, P. Marchenko, and B. Karp. Toward principled browser security. In Proc. HotOS, 2013.

[49] A. Yip, N. Narula, M. Krohn, and R. Morris. Privacy-preserving browser-side scripting with BFlow. In Proc. EuroSys, 2009.