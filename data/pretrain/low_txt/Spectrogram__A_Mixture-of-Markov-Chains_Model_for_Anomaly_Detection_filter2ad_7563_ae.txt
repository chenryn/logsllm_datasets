### ASCII Encoded Shellcode Detection

**Figure 8. ROC for ASCII Encoded Shellcode**
- **(a) Student Server - ASCII Shellcode**
- **(b) Department Server - ASCII Shellcode**

ASCII encoded shellcode can hide binary x86 instructions as printable characters, potentially frustrating statistical sensors. When small n-gram sizes are used, the sensors focus only on character distributions rather than content. In the low false-positive rate range, the n-gram size significantly affects the discrimination ability.

| Gram-Level | Train Time (Matlab) | Sensor Speed (C++) | Model Size |
|------------|---------------------|--------------------|------------|
| 2-Gram     | 50.3 s              | 17,094 req/s       | 3.1 Mb     |
| 3-Gram     | 35.5 s              | 12,195 req/s       | 4.6 Mb     |
| 5-Gram     | 54.8 s              | 7,262 req/s        | 7.7 Mb     |
| 7-Gram     | 69.4 s              | 4,721 req/s        | 11 Mb      |
| 15-Gram    | 89.8 s              | 1,960 req/s        | 23 Mb      |

**Table 4. Run-times for SG-5 on a 3GHz Machine (Offline Tests)**
- Training is done in MATLAB, and the final sensor is implemented in C++.
- Training time depends on data and convergence rate.
- 15,927 samples were used, and an average of five trials is reported.
- Packet reassembly is done using the tcpflow library.

### Benefits of Large N-Gram Sizes
The use of large n-gram sizes without under-fitting highlights the benefit of the proposed Markov-chain factorization. The appropriate n-gram and mixture size will depend on the type of data observed by the monitored server. More dynamic content requires larger mixture sizes, while more complex structure or input necessitates larger n-gram sizes. Optimal settings for these parameters should be determined through cross-validation. Methods and tools to automate this process are being developed and will be made available. The threshold setting can be automatically adjusted based on the false positive rate on the training data, e.g., finding the threshold that yields a 0.0011% false positive rate.

### Training: Spectrogram as a Supervised Learning Sensor
In our experiments, we monitored remote hosts and manually labeled legitimate requests. Using Unix commands like `tr`, `grep`, `sort`, `uniq`, and manual examination, we generated a clean dataset of unique requests from over 6 million samples within a few hours. More efficient methods for generating labeled data are under investigation. Since only unique samples of legitimate requests are needed, one possibility is for script writers to generate samples of legitimate requests during code testing. We also refer readers to the work by Cretu et al. [6] on automated data sanitization and labeling. Spectrogram's model does not support online/continuous training. However, training with over 15,000 samples takes only a few minutes. Automated nightly or even hourly re-training is feasible to handle script updates. False positives identified in logs can be reinserted into the training set for future recognition. Individual models can be trained at different intervals based on the update frequency of different hosts.

### Scalability and Forensics
Two main scalability issues are speed and model capacity. Our results show that the sensor can handle thousands of requests per second. Deploying multiple sensors in parallel to monitor different subnets or individual hosts can further enhance performance, especially in large data centers. Since sensors are driven by legitimate data, there is no need to keep individual sensors consistent if the content does not overlap. Additional speed improvements are possible with on-host implementation, without packet reassembly.

Regarding model capacity, using larger settings for M and N during training increases the level of detail with which Spectrogram models the content. This feature addresses highly dynamic content within specific services. In our experiments, two independent sensors were sufficient for all department websites. For highly dynamic content streams, improved data normalization procedures can be introduced to add stability to the model. One approach is to incorporate domain knowledge to filter content into symbol streams and have Spectrogram model these transitions.

### White-listing
Spectrogram is protocol-aware and script-aware and includes a white-listing feature based on script names and request types. This allows for reducing false positives by white-listing scripts with highly dynamic input, such as POST requests with binary content.

### Evasion Tactics
Spectrogram is designed to resist common evasion tactics:
- **Fragmentation Attacks:** Spectrogram dynamically reassembles requests to reconstruct attacks, seeing what the target script sees.
- **Polymorphism:** Spectrogram uses anomaly detection and never trains on malicious content, making polymorphism ineffective.
- **Blending Attacks:** Spectrogram uses higher-order statistics in addition to length. An attacker would need to insert content and structure statistically consistent with normal requests at the n-gram level while remaining within acceptable input length, effectively sending a legitimate request. If protected scripts read data from foreign sources, additional data sanitization must be in place.

### Conclusions
As web-exploit threats expand and signature-based approaches become less effective, statistical-based IDS solutions offer more natural resistance. Spectrogram represents a step in this direction, offering improvements over previous sensors by designing a model specific for web-layer inputs and an architecture that provides the flexibility needed for a usable NIDS solution in terms of speed and deployment requirements. This paper studies the anomaly detection problem in the context of n-gram modeling, discusses the ill-posed nature of the problem, and derives a relaxation of the task into a more tractable linear form using Markov-chains. Our experiments highlight the beneficial effects of these changes. A parameter estimation technique to train this model is provided. Spectrogram has two adjustable parameters: the mixture-size and the gram-size, and the optimal settings for both can be found by cross-validation to achieve the desired trade-off between speed and accuracy.

### Acknowledgments
This research was sponsored by the NSF through grants CNS-07-14647 and CNS-04-26623, and by ONR through grant No. N00014-07-1-0907. We authorize the U.S. Government to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF or the U.S. Government.

### References
[1] K. G. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and A. D. Keromytis. Detecting Targeted Attacks Using Shadow Honeypots. In Proceedings of the 14th USENIX Security Symposium, August.

[2] P. Biondi. Shellforge Project, 2006.

[3] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards Automatic Generation of Vulnerability-Based Signatures. In Proceedings of the IEEE Symposium on Security and Privacy.

[4] M. Costa, J. Crowcroft, M. Castro, and A. Rowstron. Vigilante: End-to-End Containment of Internet Worms. In Proceedings of the Symposium on Systems and Operating Systems Principles (SOSP), October.

[5] J. R. Crandall, Z. Su, S. F. Wu, and F. T. Chong. On Deriving Unknown Vulnerabilities from Zero-Day Polymorphic and Metamorphic Worm Exploits. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS), November.

[22] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically Generating Signatures for Polymorphic Worms. In Proceedings of the IEEE Symposium on Security and Privacy, May.

[23] J. Newsome and D. Song. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In Proceedings of the 12th Symposium on Network and Distributed System Security (NDSS), February 2005.

[24] Panda Labs. MPack Uncovered, 2007.

[25] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. Browsershield: Vulnerability-driven Filtering of Dynamic HTML. In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI), 2006.

[26] SANS. SANS Top 20. http://www.sans.org/top20/.

[27] S. Siddharth. Evading NIDS, 2005. http://www.securityfocus.com/infocus/1852.

[28] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated Worm Fingerprinting. In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI).

[29] Snort Development Team. Snort Project.

[30] Y. Song, M. E. Locasto, A. Stavrou, A. D. Keromytis, and S. J. Stolfo. On the Infeasibility of Modeling Polymorphic Shellcode. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).

[31] Sophos. Security Threat Report. Technical report, Sophos, https://secure.sophos.com/security/whitepapers/sophos-security-report-2008, July 2008.

[32] T. Toth and C. Kruegel. Accurate Buffer Overflow Detection via Abstract Payload Execution. In Proceedings of the 5th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 274–291, October.

[33] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits. In Proceedings of the ACM SIGCOMM Conference, pages 193–204, August 2004.

[34] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous Payload-based Worm Detection and Signature Generation. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 227–246, September.

[35] J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt. Automatic Diagnosis and Response to Memory Corruption Vulnerabilities. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS), November.

[36] V. Yegneswaran, J. T. Griffin, P. Barford, and S. Jha. An Architecture for Generating Semantics-Aware Signatures. In Proceedings of the 14th USENIX Security Symposium.

[6] G. F. Cretu, A. Stavrou, M. E. Locasto, S. J. Stolfo, and A. D. Keromytis. Casting out Demons: Sanitizing Training Data for Anomaly Detection. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), May 2008.

[7] W. Cui, M. Peinado, H. J. Wang, and M. E. Locasto. ShieldGen: Automated Data Patch Generation for Unknown Vulnerabilities with Informed Probing. In Proceedings of the IEEE Symposium on Security and Privacy, May.

[8] A. Dempster, N. Laird, and D. Rubin. Maximum Likelihood from Incomplete Data via the EM Algorithm. Journal of the Royal Statistical Society, pages 1–38, 1977.

[9] J. Elson. tcpflow – A TCP Flow Recorder, 2003. http://www.circlemud.org/jelson/software/tcpflow/.

[10] M. V. Gundy, D. Balzarotti, and G. Vigna. Catch Me, If You Can: Evading Network Signatures with Web-based Polymorphic Worms. In Proceedings of the First USENIX Workshop on Offensive Technologies (WOOT), August 2007.

[11] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting Past and Present Intrusions through Vulnerability-Specific Predicates. In Proceedings of the Symposium on Systems and Operating Systems Principles (SOSP), October.

[12] S. J. S. Ke Wang, Janak J. Parekh. Anagram: A Content Anomaly Detector Resistant to Mimicry Attack. In Proceedings of the 9th International Symposium on Recent Advances in Intrusion Detection (RAID).

[13] H.-A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Signature Detection. In Proceedings of the USENIX Security Conference.

[14] O. Kolesnikov and W. Lee. Advanced Polymorphic Worms: Evading IDS by Blending in with Normal Traffic. In Proceedings of the USENIX Security Symposium, 2006.

[15] C. Kruegel and G. Vigna. Anomaly Detection of Web-Based Attacks. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS).

[16] C. Kruegel, G. Vigna, and W. Robertson. A Multi-Model Approach to the Detection of Web-based Attacks. Computer Networks, 48, 2005.

[17] C. Krugel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Polymorphic Worm Detection Using Structural Information of Executables. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 207–226, September.

[18] Z. Liang and R. Sekar. Fast and Automated Generation of Attack Signatures: A Basis for Building Self-Protecting Servers. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS), November.

[19] B. Livshits and W. Cui. Spectator: Detection and Containment of JavaScript Worms. In Proceedings of the USENIX Annual Technical Conference, June 2008.

[20] M. E. Locasto, K. Wang, A. D. Keromytis, and S. J. Stolfo. FLIPS: Hybrid Adaptive Intrusion Prevention. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID), pages 82–101, September.

[21] Metasploit Development Team. Metasploit Project, 2006.