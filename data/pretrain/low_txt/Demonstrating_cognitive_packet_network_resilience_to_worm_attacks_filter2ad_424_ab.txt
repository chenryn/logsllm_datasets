### Potential Consequences of Network Attacks

Network attacks can result in a range of consequences, from minor issues like printing an unwanted message to more severe problems such as the deletion or modification of system files, reduced system performance, or even total system failure. From a service quality perspective, these disruptions can lead to significant information loss and delays, particularly if the attack spreads widely across the network.

### Emulating Network Worms for Resilience Testing

To evaluate a network's resilience against such attacks, it is crucial to emulate network worms in a controlled and reproducible manner. We have developed an emulator that simulates the infection of a worm, causing a network node to fail by disabling all Ethernet interfaces connected to the network. This prevents any traffic from passing through the affected node. The failure can be restored by re-enabling these interfaces.

The propagation of failures can be random, based on a probability distribution, or follow a specific pattern. In our current application, we model the spread of the failure using the AAWP (Analytical Active Worm Propagation) model, a discrete-time and continuous-state deterministic approximation model proposed by Chen et al. [1]. This model categorizes each node into one of three states: infected, immunized, or vulnerable.

- **Infected:** The node has been compromised and can infect other nodes.
- **Immunized:** The node is protected and cannot be infected.
- **Vulnerable:** The node is susceptible to infection.

In our implementation, we assume that all hosts can directly reach each other, making the network topology irrelevant. During each scan, the "worm" randomly selects another host:
- If the host is immunized, nothing happens.
- If the host is vulnerable, it becomes infected.
- If the host is already infected, it remains in that state.

The time required for a computer worm to find a server through random IP scans, known as the infection delay time, is a random value within a predetermined range. This delay represents the time needed for a node to become fully infected before it can infect others. Our emulator can be extended to incorporate more complex models that consider factors such as the distance between nodes, network congestion, and other parameters.

To simulate the impact of patching, we dynamically immunize some hosts, which, after a random waiting period, start immunizing other hosts (both infected and vulnerable). The scanning mechanism used is random, but other methods, such as local subnet and topological scanning, could also be employed.

### Proposed Demonstration

Our demonstration will feature real-time experiments conducted on a 46-node testbed at Imperial College London, under various traffic conditions. The testbed topology mirrors the real SWITCHlan network, which serves universities, federal institutes of technology, and major research institutes in Switzerland. To enhance realism, we use actual details of the 46-router backbone, including bandwidth, OSPF costs, and link-level delays provided by the SWITCHlan network administrators [16].

The goal of our demo is to showcase the response and stability of the Cognitive Packet Network (CPN) under emulated worm spreads and intermittent failures generated by our failure emulator. We will demonstrate that CPN quickly adapts to failures without significantly degrading the measured Quality of Service (QoS) provided to network users.

### References

[1] Z. Chen, L. Gao, and K. Kwiat. Modeling the Spread of Active Worms. In Proceedings of the IEEE INFOCOM 2003, volume 3, pages 1890–1900, San Francisco, CA, USA, Apr. 2003.

[2] S. Dobson, S. Denazis, A. Fernández, D. Gaïti, E. Gelenbe, F. Massacci, P. Nixon, F. Saffre, N. Schmidt, and F. Zambonelli. A survey of autonomic communications. ACM Trans. Adapt. Autonomous Systems (TAAS), 1(2):223–259, 2006.

[3] E. Gelenbe. Random Neural Networks with Negative and Positive Signals and Product Form Solution. Neural computation, 1(4):502–510, 1989.

[4] E. Gelenbe. Cognitive Packet Network. US Patent, 6804201 B1, Oct. 2004.

[5] E. Gelenbe. Steps towards self-aware networks. Communications of the ACM, 52(7):66–75, July 2009.

[6] E. Gelenbe, M. Gellman, R. Lent, P. Liu, and P. Su. Autonomous Smart Routing for Network QoS. In Proceedings of the First International Conference on Autonomic Computing (ICAC), pages 232–239, New York, NY, USA, May 2004.

[7] E. Gelenbe, M. Gellman, and G. Loukas. An Autonomic Approach to Denial of Service Defence. In Proceedings of First International IEEE WoWMoM Workshop on Autonomic Communications and Computing (ACC’05), pages 537–541, Taormina, Italy, June 2005.

[8] E. Gelenbe and R. Lent. Power-aware ad hoc cognitive packet networks. Ad Hoc Networks Journal, 2(3):205–216, July 2004.

[9] E. Gelenbe, R. Lent, A. Montuori, and Z. Xu. Towards Networks with Cognitive Packets. In Proceedings of the 8th International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (IEEE MASCOTS), pages 3–12, San Francisco, CA, USA, Aug. 2000. Opening Invited Paper.

[10] E. Gelenbe, R. Lent, A. Montuori, and Z. Xu. Cognitive Packet Networks: QoS and Performance. In Proceedings of the 10th IEEE International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunications Systems (MASCOTS’02), pages 3–9, Fort Worth, Texas, USA, Oct. 2002. Opening Keynote Paper.

[11] E. Gelenbe, R. Lent, and Z. Xu. Design and Performance of Cognitive Packet Networks. Performance Evaluation, 46(2-3):155–176, Oct. 2001.

[12] E. Gelenbe and G. Loukas. A Self-Aware Approach to Denial of Service Defence. Computer Networks, 51(5):1299–1314, Apr. 2007.

[13] E. Gelenbe and A. Nunez. Traffic Engineering with Cognitive Packet Networks. Simulation Series, 35(4):514–518, Apr. 2003.

[14] E. Gelenbe, G. Sakellari, and M. D’Arienzo. Admission of QoS Aware Users in a Smart Network. ACM Transactions on Autonomous and Adaptive Systems, 3(1):4:1–4:28, Mar. 2008.

[15] E. Gelenbe, E. Seref, and Z. Xu. Simulation with Learning Agents. Proceedings of the IEEE, 89(2):148–157, Feb. 2001.

[16] M. Gellman and P. Liu. Random Neural Networks for the Adaptive Control of Packet Networks. In Proceedings of the 16th International Conference on Artificial Neural Networks (ICANN 2006), pages 313–320, Athens, Greece, Sep. 2006.

[17] G. Loukas and G. Oke. Likelihood Ratios and Recurrent Random Neural Networks in Detection of Denial of Service Attacks. In Proceedings of the International Symposium on Performance Evaluation of Computer and Telecommunication Systems (SPECTS 2007), pages 16–18, San Diego, California, USA, July 2007.

[18] G. Oke and G. Loukas. A Denial of Service Detector based on Maximum Likelihood Detection and the Random Neural Network. The Computer Journal, 50(6):717–727, Sep. 2007.

[19] G. Oke and G. Loukas. Distributed Defence Against Denial of Service Attacks: A Practical View. In Proceedings of 1st BCS International Academic Conference, Visions of Computer Science, pages 153–162, London, UK, Sep. 2008.

[20] G. Oke, G. Loukas, and E. Gelenbe. Detecting Denial of Service Attacks with Bayesian Classifiers and the Random Neural Network. In Proceedings of the IEEE International Fuzzy Systems Conference (FUZZ-IEEE 2007), pages 1964–1969, London, UK, July 2007.

[21] G. Sakellari. The Cognitive Packet Network: A Survey. The Computer Journal: Special Issue on Random Neural Networks, doi:10.1093/comjnl/bxp053, June 2009.

[22] P. Su and M. Gellman. Using adaptive routing to achieve Quality of Service. Performance Evaluation, 57(2):105–119, June 2004.

1. http://www.switch.ch/network/