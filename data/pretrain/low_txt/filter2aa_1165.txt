### Gone Apple Pickin’: Red Teaming macOS Environments in 2021
**Cedric Owens**  
**DEF CON 29**

#### BIO
- Offensive Security Engineer
- Blue Team Experience
- macOS Post-Exploitation
- Nostalgia for the 80s/90s
- @cedowens

#### AGENDA
- Why Do We Care about macOS?
- Overview of Common Tech Environments
- macOS Payloads & Post-Exploitation
- Other Attack Vectors
- Detection Opportunities

### Why Do We Care about macOS?
- Most companies are still primarily Windows-based.
- In the San Francisco Bay Area, tech companies often use macOS, Linux, and cloud environments.
- macOS environments offer unique challenges and opportunities for security assessments.

### Is a Slowly Growing Trend
- macOS is different from Windows but still has many vulnerabilities to exploit.
- Significant damage can be done without compromising Active Directory (AD).

### Common Tech Stacks: A 10,000-Foot View
- **App Servers**: 80%
- **Access Control**: 15% (restricted by VPN, VPC, LDAP groups, etc.)
- **Access Tokens/Keys**: 5% (stored on corporate laptops)
- **Production Environment**
- **Corporate Environment**

### Common macOS Deployments
- **Management Methods**:
  - Custom (high-cost)
  - Managed with JAMF Pro (common)
  - Admin server, Infrastructure Manager, Agent
  - Kandji (emerging)

### Common JAMF Deployment
- **JAMF Admin Server** (check connection: `$jamf checkJSSConnection`)
- **JAMF Agent**
- **JAMF Self Service**

### Remote Management
- **JAMF Management Server**
- **JAMF Admin Account with SSH Access to Managed Devices**
- **Static Password Usage?**
- **SSH with Full Disk Access by Default if Enabled**

### Compromised JAMF Admin Creds
- **JAMF Admin Credentials**
- **Push Malicious Policies/Scripts**
- **Managed macOS Fleet**

### Variations in JAMF Deployments
- **Example 1: macOS Bound to AD**
  - JAMF agent on macOS fleet
  - Bound to AD
  - Tools like Machound, Bifrost
  - Commands: `dscl`, `ldapsearch`, `klist`, `kcc`

- **Example 2: Access via NoMAD**
  - macOS fleet not bound to AD
  - Kerberos authentication
  - Local account with SSO for network resources
  - Commands: `defaults read`, `klist`, `kcc`

- **Example 3: Segregated AD Access**
  - JAMF agent on macOS fleet
  - Authentication via Okta Federated Servers
  - Restricted by VPN
  - Commands: `/Library/Application Support/JAMF`, `defaults read`

### Red Team Approaches – Initial Access
- **IDaaS Targeting**
  - 2FA MIM Phishing: Credential Harvesting
  - Federated Login: Email and File Access
  - Internal Phishing: Potential objectives without host access

- **IDaaS Pillaging**
  - Productivity portals with sensitive content
  - Exfiltration tools: GD-Thief, GDir-Thief, Conf-Thief, Slackhound, SlackPirate

### macOS Security Basics
- **Prevention**
  - **Gatekeeper**: Evaluates file types, checks signing and notarization
  - **XProtect**: Malware definitions and blacklisting

- **Detection**
  - **TCC (Privacy Protections)**: Protects folders like Desktop, Documents, Downloads, iCloud Drive
  - **Unprotected Directories**: Home directory, `.ssh`, `.aws`, `/tmp`

- **Removal**
  - **Malware Removal Tool**: Removes known malware based on Apple's intelligence

### Initial Access - macOS
- **Payload Options**:
  - Mach-o: Requires delivery/upload method
  - Apps: Remote-friendly
  - Installer Packages: Remote-friendly
  - Weaponized PDF
  - Shell Script Trickeration: On patched systems
  - JXA: Requires delivery/upload method
  - Python: Will be removed by default soon, pairs well with Office macros
  - Office Macros: Remote-friendly but sandboxed
  - Browser Extensions: Additional Google store controls
  - Applescript: Depends on file type, requires delivery/upload method

### Initial Access: Installer Packages
- **Installer Packages**:
  - Payload-free or Archive to install other packages
  - Scripts: `preinstall`, `postinstall`
  - Elevated (as root) execution
  - Checked by Gatekeeper, bypassable via right-click -> open

### Initial Access: App Package Example
- **Bundle**: `[Name].app/Contents/MacOS/[Name]`
- **Xcode Project**: New Project -> App -> Language: Swift, User Interface: Storyboard
- **Design and Code**: Add Info.plist entries, set sandbox settings, add code for remote payload

### Initial Access: macOS MS Office Macros
- **Old but Still Effective**:
  - Bypass mail filters: Simple string concatenation
  - Limited disk access
  - Can access: `osascript`, `curl`, `dscl`, `screencapture`, `python`
  - Sandbox escape techniques

### CVE-2021-30657: Masquerading Shell Scripts
- **Reported and Fixed**: Big Sur 11.3+ and Catalina Update 2021-002
- **Bypasses Gatekeeper**: Uses shell scripts or Python
- **Benefits**:
  - Gatekeeper bypass
  - No App Transport Security Controls
  - Access to non-TCC folders
  - Social engineering to download and run fake app

### macOS: Other Things to Know
- **TCC**: Protects specific folders, unprotected directories
- **Quarantine Attribute**: Appended by browsers, not by `curl`
- **Signing and Notarizing**: Time-consuming, social engineering still effective

### macOS Pillaging – Lateral Movement & Privilege Escalation
- **On-System Credentials**: AWS, GCP, Azure
- **Chrome "Cookie Crimes"**
- **SSH Keys and Known Hosts**
- **User Prompt for Creds**
- **Search Zsh History**
- **Interesting Files and Databases**: Chrome Login Data, History db

### macOS Pillaging – Persistence
- **Options Beyond Launch Daemons and Agents**:
  - @theevilbit: “Beyond Good Ole’ LaunchAgents”
  - @D00MFist’s PersistentJXA
  - My Persistent-Swift repo
  - @xorrior’s Authorization Plugin
  - Atom init script persistence
  - SSHrc persistence
  - Vim plugin persistence
  - Sublime text app script persistence
  - Zsh profile persistence

### Other Attack Vectors
- **CI/CD Pipeline**:
  - Developer commits code
  - Jenkins build and push image
  - Polls registry
  - Path across dev, corp, prod environments
  - Lots of integrations and secrets

- **Jenkins Misconfigurations**:
  - Unauth Build Jobs: Create new job, execute shell, view results
  - Unauth Script Console: Run Groovy script for host access

- **Other Juicy Targets**:
  - Internal Wiki, Ticketing System, Slack, Docker API, Internal Git
  - Cloud Hosted Environments: Entry points, payload phishing, code repos, CI/CD hosts, logs

### Defensive Recommendations
- **Endpoint Detection & Response**
- **Apple Endpoint Security Framework**
- **Command Line Executions**: Detect suspicious commands, parent-child relationships
- **Network Detections**: One-to-many attacks, beaconing, IdaaS abuse, Jenkins abuse
- **Cloud Visibility and Detection**: Common post-exploitation and privilege escalation methods
- **Auditing IAM Roles**

### Resources
- **My Blog**: [https://cedowens.medium.com/](https://cedowens.medium.com/)
- **Xorrior’s Blogs**: [https://medium.com/@xorrior](https://medium.com/@xorrior)
- **Phil Stokes on Malicious AppleScript**: [https://www.sentinelone.com/blog/how-offensive-actors-use-applescript-for-attacking-macos/](https://www.sentinelone.com/blog/how-offensive-actors-use-applescript-for-attacking-macos/)
- **Mystikal by D00MFist**: [https://github.com/D00MFist/Mystikal](https://github.com/D00MFist/Mystikal)
- **PersistentJXA by D00MFist**: [https://github.com/D00MFist/PersistentJXA](https://github.com/D00MFist/PersistentJXA)
- **My Persistent-Swift Repo**: [https://github.com/cedowens/Persistent-Swift](https://github.com/cedowens/Persistent-Swift)
- **Csaba Fitzl Security Research**: [https://theevilbit.github.io/posts/](https://theevilbit.github.io/posts/)
- **JAMF Configurations**: [https://objectivebythesea.com/v3/talks/OBTS_v3_cHall_lRoberts.pdf](https://objectivebythesea.com/v3/talks/OBTS_v3_cHall_lRoberts.pdf)
- **My SwiftBelt Enumeration Tool**: [https://github.com/cedowens/SwiftBelt](https://github.com/cedowens/SwiftBelt)
- **Madhav Bhatt’s MS Office Sandbox Escape**: [https://desi-jarvis.medium.com/office365-macos-sandbox-escape-fcce4fa4123c](https://desi-jarvis.medium.com/office365-macos-sandbox-escape-fcce4fa4123c)
- **My MacShellSwift Post Exp Tool**: [https://github.com/cedowens/MacShellSwift](https://github.com/cedowens/MacShellSwift)
- **Antonio Piazza’s Thief Tool Sets**: [https://antman1p-30185.medium.com/](https://antman1p-30185.medium.com/)
- **Machound Blog Post**: [https://www.xmcyber.com/introducing-machound-a-solution-to-macos-active-directory-based-attacks/](https://www.xmcyber.com/introducing-machound-a-solution-to-macos-active-directory-based-attacks/)
- **Bifrost Blog Post by Cody Thomas**: [https://posts.specterops.io/when-kirbi-walks-the-bifrost-4c727807744f](https://posts.specterops.io/when-kirbi-walks-the-bifrost-4c727807744f)
- **Howard Oakley’s Blog**: [https://eclecticlight.co/2020/01/27/what-could-possibly-go-wrong-on-an-app-first-run/](https://eclecticlight.co/2020/01/27/what-could-possibly-go-wrong-on-an-app-first-run/)
- **Adam Chester’s Blog on macOS Sandbox Escape**: [https://blog.xpnsec.com/escaping-the-sandbox-microsoft-office-on-macos/](https://blog.xpnsec.com/escaping-the-sandbox-microsoft-office-on-macos/)
- **Info on Recent Shlayer Campaign**: [https://www.intego.com/mac-security-blog/new-mac-malware-reveals-google-searches-can-be-unsafe/](https://www.intego.com/mac-security-blog/new-mac-malware-reveals-google-searches-can-be-unsafe/)
- **Xorrior’s macOS Tools**: [https://github.com/xorrior/macOSTools](https://github.com/xorrior/macOSTools)
- **Mangopdf’s Cookie Crimes Blog**: [https://github.com/defaultnamehere/cookie_crimes](https://github.com/defaultnamehere/cookie_crimes)

### Thank You!