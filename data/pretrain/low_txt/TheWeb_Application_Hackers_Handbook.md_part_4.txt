If you are already familiar with the primary web technologies, you may skim through this chapter.

### Chapter 4: Mapping the Application
This chapter outlines the first essential step when targeting a new application: gathering as much information as possible to map its attack surface and formulate your plan of attack. This process involves exploring and probing the application to catalog all its content and functionality, identifying all entry points for user input, and discovering the technologies in use.

### Chapter 5: Bypassing Client-Side Controls
This chapter covers the first area of actual vulnerability, which arises when an application relies on client-side controls for security. This approach is often flawed because client-side controls can be circumvented. The two main ways applications make themselves vulnerable are by transmitting data via the client under the assumption that it will not be modified and by relying on client-side checks on user input. The chapter describes various technologies, including lightweight controls implemented within HTML, HTTP, and JavaScript, and more heavyweight controls using Java applets, ActiveX controls, Silverlight, and Flash objects.

### Chapters 6, 7, and 8: Controlling User Access
These chapters cover some of the most important defense mechanisms in web applications: those responsible for controlling user access.

- **Chapter 6: Attacking Authentication** examines the various functions by which applications verify users' identities, including the main login function and peripheral authentication-related functions such as user registration, password changing, and account recovery. Authentication mechanisms contain numerous vulnerabilities, both in design and implementation, which attackers can exploit to gain unauthorized access. These range from obvious defects, such as weak passwords and susceptibility to brute-force attacks, to more obscure problems within the authentication logic. The chapter also details multistage login mechanisms used in many security-critical applications and the new kinds of vulnerabilities they often contain.

- **Chapter 7: Attacking Session Management** examines the mechanism by which most applications supplement the stateless HTTP protocol with the concept of a stateful session, enabling them to uniquely identify each user across multiple requests. This mechanism is a key target for attackers, as breaking it allows them to bypass the login and masquerade as other users without knowing their credentials. The chapter looks at common defects in the generation and transmission of session tokens and describes how to discover and exploit these.

- **Chapter 8: Attacking Access Controls** looks at the ways applications enforce access controls, relying on authentication and session management mechanisms. The chapter describes various ways access controls can be broken and how to detect and exploit these weaknesses.

### Chapters 9 and 10: Injection Vulnerabilities
These chapters cover a large category of related vulnerabilities that arise when applications embed user input into interpreted code in an unsafe way.

- **Chapter 9: Attacking Data Stores** begins with a detailed examination of SQL injection vulnerabilities, covering the full range of attacks from the most obvious to advanced techniques involving out-of-band channels, inference, and time delays. It also covers similar attacks against other data stores, including NoSQL, XPath, and LDAP.

- **Chapter 10: Attacking Back-End Components** describes several other categories of injection vulnerabilities, including the injection of operating system commands, injection into web scripting languages, file path traversal attacks, file inclusion vulnerabilities, injection into XML, SOAP, back-end HTTP requests, and email services.

### Chapter 11: Attacking Application Logic
This chapter examines a significant and frequently overlooked area of every application’s attack surface: the internal logic it employs to implement its functionality. Defects in application logic are varied and harder to characterize than common vulnerabilities like SQL injection and cross-site scripting. The chapter presents real-world examples of defective logic and derives specific tests to locate many types of logic flaws that often go undetected.

### Chapters 12 and 13: Attacking Users
These chapters cover a large and topical area of related vulnerabilities that arise when defects within a web application enable a malicious user to attack other users and compromise them in various ways.

- **Chapter 12: Attacking Users: Cross-Site Scripting (XSS)** examines the most prominent vulnerability of this kind, affecting the vast majority of web applications. The chapter details all the different flavors of XSS vulnerabilities and describes an effective methodology for detecting and exploiting even the most obscure manifestations.

- **Chapter 13: Attacking Users: Other Techniques** looks at several other types of attacks against users, including request forgery, UI redress, cross-domain data capture, same-origin policy attacks, HTTP header injection, cookie injection, session fixation, open redirection, client-side SQL injection, local privacy attacks, and exploiting bugs in ActiveX controls. The chapter concludes with a discussion of attacks against users that do not depend on vulnerabilities in any particular web application but can be delivered via any malicious website or suitably positioned attacker.

### Chapter 14: Automating Customized Attacks
This chapter does not introduce new categories of vulnerabilities but describes a crucial technique for effectively attacking web applications. Because every web application is different, most attacks are customized, tailored to the application’s specific behavior. The chapter provides a proven methodology for automating these tasks, making customized attacks easier, faster, and more effective. It also examines common barriers to automation, such as defensive session-handling mechanisms and CAPTCHA controls, and describes tools and techniques to overcome these barriers.

### Chapter 15: Exploiting Information Disclosure
This chapter examines various ways applications leak information when under active attack. It describes how to investigate anomalous behavior and error messages to gain a deeper understanding of the application’s internal workings and fine-tune your attack. The chapter also covers ways to manipulate defective error handling to systematically retrieve sensitive information from the application.

### Chapter 16: Attacking Native Compiled Applications
This chapter looks at important vulnerabilities in applications written in native code languages such as C and C++. These vulnerabilities include buffer overflows, integer vulnerabilities, and format string flaws. The chapter focuses on detecting these vulnerabilities in web applications and provides real-world examples of how they have been exploited.

### Chapter 17: Attacking Application Architecture
This chapter examines an important area of web application security often overlooked. Many applications employ a tiered architecture, and failing to segregate different tiers properly can leave an application vulnerable. The chapter also looks at the range of threats that arise in shared hosting environments, including those known as “cloud computing.”

### Chapter 18: Attacking the Application Server
This chapter describes various ways to target a web application by targeting the web server on which it runs. Vulnerabilities in web servers are broadly composed of configuration defects and security flaws within the web server software. The chapter includes attacks against the web server because they can often be used to compromise an application directly.

### Chapter 19: Finding Vulnerabilities in Source Code
This chapter describes a different approach to finding security flaws by reviewing an application’s source code. Reviewing source code can be highly effective in discovering vulnerabilities that would be difficult or time-consuming to detect by probing the running application. The chapter provides a methodology and a language-by-language cheat sheet to perform an effective code review.

### Chapter 20: A Web Application Hacker’s Toolkit
This chapter pulls together the various tools described in the book, which are the same tools the authors use when attacking real-world web applications. It examines the key features of these tools and describes the type of workflow needed to get the best out of them. The chapter also discusses the effectiveness of fully automated tools and provides tips for getting the most out of your toolkit.

### Chapter 21: A Web Application Hacker’s Methodology
This chapter is a comprehensive and structured collation of all the procedures and techniques described in the book. It organizes and orders these according to the logical dependencies between tasks when carrying out an actual attack. If you have read and understood all the vulnerabilities and techniques, you can use this methodology as a complete checklist and work plan when attacking a web application.

### What’s New in This Edition
In the four years since the first edition was published, much has changed, and much has stayed the same. The march of new technology has given rise to specific new vulnerabilities and attacks, and the ingenuity of hackers has led to new attack techniques and ways of exploiting old bugs. However, the fundamental concepts remain largely the same. The second edition is not a complete rewrite; approximately 30% of the content is new or extensively revised, while the remaining 70% has had minor modifications or none at all.

One significant new feature is the inclusion of real examples of nearly all the vulnerabilities covered, with “Try It!” links allowing readers to work interactively with the examples online. Here is a summary of the key areas where material has been added or rewritten:

- **Chapter 1: Web Application (In)security** has been updated to reflect new uses of web applications, broad trends in technologies, and changes in a typical organization’s security perimeter.
- **Chapter 2: Core Defense Mechanisms** has had minor changes, with a few examples added of generic techniques for bypassing input validation defenses.
- **Chapter 3: Web Application Technologies** has been expanded with new sections on REST, Ruby on Rails, SQL, XML, web services, CSS, VBScript, the document object model, Ajax, JSON, the same-origin policy, and HTML5.
- **Chapter 4: Mapping the Application** has received minor updates to reflect developments in techniques for mapping content and functionality.
- **Chapter 5: Bypassing Client-Side Controls** has been updated more extensively, with a focus on browser extension technologies, bytecode decompilation, debugging, and handling serialized data.
- **Chapter 6: Attacking Authentication** remains current with only minor updates.
- **Chapter 7: Attacking Session Management** has been updated to cover new tools for testing token randomness and new material on attacking encrypted tokens.
- **Chapter 8: Attacking Access Controls** now covers access control vulnerabilities arising from direct access to server-side methods and platform misconfiguration.
- **Chapters 9 and 10** have been reorganized to create more manageable chapters, with a focus on practical situations where SQL injection is still found and new sections on using automated tools for exploitation.
- **Chapter 11: Attacking Application Logic** includes more real-world examples of common logic flaws and an example of identifying and exploiting encryption oracles.
- **Chapter 12: Attacking Users: Cross-Site Scripting** has been extensively updated, with new sections on bypassing defensive filters, obfuscating script code, and delivering working XSS exploits.
- **Chapter 13: Attacking Users: Other Techniques** unites the remainder of this area, with updates on CSRF, UI redress, cross-domain data capture, and general attacks against web users.
- **Chapter 14: Automating Customized Attacks** has been expanded to cover new automation techniques and tools.