# Phantom Attack: Evading System Call Monitoring

## Authors
- Rex Guo, Ph.D.
- Junyuan Zeng, Ph.D.

## Contact Information
- @Xiaofei_Rex
- jzeng04 *NOSPAM* gmail DOT com

## Overview
This document discusses the Phantom Attack, a method for evading system call monitoring. The attack is illustrated through an incident from both the attacker's and defender's perspectives. We will cover the techniques used, including privilege escalation, lateral movement, and specific vulnerabilities like TOCTOU and semantic confusion. Additionally, we will explore open-source projects for system call monitoring and provide mitigation strategies.

## An Incident - An Attacker’s View

### Web Application RCE on Joe-Box
- Exploited a web application RCE (Remote Code Execution) vulnerability on `joe-box`.
- Executed a reverse shell to gain initial access.

### Privilege Escalation Using Sudo
- Utilized CVE-2021-3156 to escalate privileges using `sudo`.

### Reading Sensitive Files
- Read `/etc/shadow` to obtain password hashes.

### Reading SSH Process Environment Variables
- Extracted environment variables from the SSH process.

### Lateral Movement to Alice-Box
- Performed lateral movement to `alice-box` using SSH hijacking.

## An Incident - A Defender’s View

### Detection Rule Example
- **Rule**: Untrusted program reads `/etc/shadow`
- **Condition**:
  - `syscall == open(at)`
  - `read permission is used`
  - `filename == /etc/shadow`
  - `program is not in allowlist`

## Agenda
- Introduction to System Call Monitoring
- Open Source System Call Monitoring Projects
- TOCTOU - Phantom v1 Attack
- Semantic Confusion - Phantom v2 Attack
- Takeaways

## System Call Monitoring
### Overview
- **User Space** and **Kernel Space**
- **Programs and Applications**
- **Syscall Code Path**
- **Hooks and Events**
- **Monitoring Agent**

### Syscall Interception
#### Methods
- **tracepoint/raw_tracepoint**
  - Low overhead but only static system call interceptions
  - Provided by Linux Kernel: `sys_enter` and `sys_exit`
  - Functions: `trace_sys_enter(regs, id)` and `trace_sys_exit(regs, id)`

- **kprobe/kretprobe**
  - Dynamic hook in the kernel
  - Slower compared to tracepoints
  - Requires knowledge of data placement on the stack and register
  - Alternatives: `LD_PRELOAD` and `Ptrace` (high performance overhead)

### Syscall Data Collection
- Tracing programs collect system call data (e.g., arguments)
- Tracing programs can attach to different hooks (e.g., `tracepoints`, `kprobes`)
- Implementations: 
  - **Linux native mechanisms**: `ftrace`, `perf_events`
  - **Kernel modules**
  - **eBPF programs**: Execute user code in the kernel

## Open Source Projects (as of July 15, 2021)
### Falco (created by Sysdig)
- **CNCF incubating project** for security and compliance
- **GitHub stars**: 3.9K
- Consumes kernel events and enriches them with cloud-native stack information
- Supports both kernel module and eBPF programs for tracing

### Tracee (created by Aqua Security)
- **GitHub stars**: 1.1K
- Runtime security and forensics tool based on eBPF

## Vulnerabilities
### Time-of-check time-of-use (TOCTOU)
- **Time-of-check**: Tracing programs collect system call data (e.g., arguments)
- **Time-of-use**: Kernel uses different data than what tracing programs check
- **Example**: `sys_openat(int dfd, const char __user * filename, int flags, umode_t mode)`
- **Phantom v1 attack**: Exploits TOCTOU

### Semantic Confusion
- **Different interpretations** of data between the kernel and tracing programs
- **Example**: Symbolic link interpretation
- **Phantom v2 attack**: Exploits semantic confusion

### Affected Projects
- **Falco**: Vulnerable to both Phantom v1 and v2
- **Tracee**: Vulnerable to Phantom v1

## TOCTOU - openat
### Syscall Table (x86_64)
- **Syscalls**: `sys_openat`, `sys_mkdirat`, `sys_mknodat`

### Kernel Function
- **Function**: `do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)`
- **Steps**:
  - `getname(filename)`
  - `get_unused_fd_flags(flags)`
  - `do_filp_open(dfd, tmp, &op)`

### User Space and Kernel Interaction
- **Syscall enter and exit**
- **Tracing programs**: `trace_sys_enter(regs, regs->orig_ax)` and `trace_sys_exit(regs, regs->ax)`

## TOCTOU - Falco
- **CVE-2021-33505**: CVSS v3.0 score 7.3
- **Affected versions**: Falco older than v0.29.1 and open source sysdig
- **Commercial versions**: Also affected
- **Interception methods**: `raw_tracepoints` (sys_enter and sys_exit)
- **Vulnerable syscalls**: `connect`, `sendto/sendmsg`, `open/openat`, `rename`, `mkdir`, `rmdir`, `unlink/unlinkat`, `symlink/symlinkat`, `chmod/fchmod/fchmodat`, `creat`

## TOCTOU - Tracee
- **Vulnerable to TOCTOU**: e.g., `connect` syscall
- **Maintainer quotes**: "TOCTTOU attacks on system calls wrappers/tracers is a well-known issue, and Tracee is no exception."

## Phantom v1 Exploit Plan
- **Trigger target syscall with malicious arguments**
- **Kernel reads malicious arguments and performs action**
- **Overwrite user space argument pointer with benign data**
- **Tracing program checks overwritten data at sys_exit**
- **Challenges**:
  - Synchronization with kernel thread read
  - Ensuring tracing program gets the overwritten copy

## Userfaultfd Syscall
- **Purpose**: Offload page faults to userland
- **Use cases**: Memory externalization, remote node memory access
- **Behavior**: Pauses kernel thread and waits for user space response
- **Exploitation**: Helps exploit kernel race condition bugs

## Interrupts and Scheduling
- **Interrupts**: Notify processor of immediate attention events
- **Handlers**: Divert control flow to interrupt handlers
- **System call triggers**: Hardware interrupts, interprocessor interrupts (IPIs)
- **Scheduling functions**: `sched_setscheduler()`, `sched_setaffinity()`

## Phantom v1 Attack - An Openat Example
- **Detailed steps and code examples** (to be provided)

## Semantic Confusion - File Link
- **Different interpretations**: Kernel vs. tracing programs
- **Falco**: Reads symbolic link without interpretation
- **Tracee**: Not vulnerable to `openat` (uses `security_file_open` LSM hook)

## Phantom v2 - An File Link Example
- **Steps to bypass Falco rule**:
  - Create symlink `/tmp/shadow -> /etc/shadow`
  - Tracing programs read `/tmp/shadow`
  - Rule bypassed as `/etc/shadow` is not directly opened

## Mitigation
- **Detection (Falco team)**:
  - Detect unprivileged usage of `userfaultfd` syscall
  - Register and monitor memory address ranges
  - Read data used by system calls
  - Use LSM hooks and kernel data structures

## Takeaways
- **Phantom attack** exploits differences in data reading and interpretation times.
- **Raw tracepoints** are not ideal for secure tracing.
- **Mitigation**:
  - Detect abnormal usages of `userfaultfd`
  - Ensure consistent data reading and interpretation by kernel and tracing programs

## Further Discussion
- **Contact**: @Xiaofei_REX (OpenDM)
- **Repository**: [GitHub](https://github.com/rexguowork/phantom-attack) (will be released during Defcon)

## Acknowledgement
- **Chris Arges** (ebpf, kernel tracing)
- **Joel Schopp** (kernel tracing, TOCTOU)
- **Yu Wang** (TOCTOU)
- **Falco open source team** (Leonardo Di Donato, etc.)