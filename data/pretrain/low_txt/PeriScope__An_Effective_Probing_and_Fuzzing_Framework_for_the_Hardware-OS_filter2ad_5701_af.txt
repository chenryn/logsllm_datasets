### Symbolic Checking and Double-Fetch Bugs

With the help of symbolic checking, Deadline can precisely discern double-fetch bugs from statically identified multi-reads. However, techniques based on symbolic execution may not scale well due to the path explosion problem.

### Static Analysis Techniques

Traditionally, static analysis techniques have been applied to the system call interface. Although the core ideas can be extended to the hardware-OS interface, identifying the necessary entry points is more challenging. This is because accesses to I/O mappings are difficult to distinguish from other memory accesses, and interrupt processing code can run in different, unrelated contexts (e.g., software interrupt context, kernel thread context, etc.).

### Finding Double-Fetch Bugs

Double-fetch bugs are a special case of time-of-check-to-time-of-use (TOCTTOU) race conditions. They occur when privileged code fetches a value from a memory location multiple times, while less privileged code can change the value between the fetches. Previous work has explored multiple reads of user-space memory from OS kernels or trusted execution environments, as well as multiple reads of memory shared between different hypervisor domains. These studies use either static analysis (e.g., static code pattern matching and symbolic execution) or dynamic analysis (e.g., memory access tracing followed by pattern analysis and cache behavior-guided fuzzing).

PERIFUZZ is a dynamic approach that targets a different attack surface: I/O memory mappings shared between peripheral devices and kernel drivers. PERIFUZZ and DECAF are currently the only two tools sufficiently generic to support double-fetch fuzzing without requiring instrumentation or manual analysis of the target code. However, DECAF cannot fuzz double-fetches from MMIO and DMA coherent mappings because these mappings are typically uncached, and DECAF relies on cache side channels to detect double-fetches.

### Conclusion

The interactions between peripherals and drivers can be complex, making it difficult to write correct device driver software. Unfortunately, vulnerabilities in wireless communication peripherals and corresponding drivers can be exploited to achieve remote kernel code execution without invoking a single system call. Until now, no versatile framework has existed to analyze these interactions.

This paper presents PERISCOPE, a generic probing framework that addresses the specific analysis needs of the two peripheral interface mechanisms: MMIO and DMA. Our fuzzing component, PERIFUZZ, builds upon this framework and can help end users find bugs in device drivers reachable from a compromised device. Uniquely, PERIFUZZ can expose double-fetch bugs by fuzzing overlapping fetches and by warning about overlapping fetches that occurred before a driver crash. Using these tools, we found 15 unique vulnerabilities in the Wi-Fi drivers of two flagship Android smartphones, including 9 previously unknown ones.

### Acknowledgment

The authors would like to thank the anonymous reviewers for their valuable feedback. We also thank Paul Kirth and Joseph Nash for their help with proofreading this paper. This material is based upon work partially supported by the Defense Advanced Research Projects Agency under contracts FA8750-15-C-0124 and FA8750-15-C-0085, by the United States Office of Naval Research under contract N00014-15-1-2948, N00014-17-1-2011, and N00014-17-1-2782, and by the National Science Foundation under awards CNS-1619211 and CNS-1513837. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Defense Advanced Research Projects Agency or its Contracting Agents, the Office of Naval Research or its Contracting Agents, the National Science Foundation, or any other agency of the U.S. Government. The authors also gratefully acknowledge a gift from Oracle Corporation and from Google’s Anti-Abuse group.

### References

[1] "Facedancer11." [Online]. Available: http://goodfet.sourceforge.net/hardware/facedancer11
[2] "ktap: A lightweight script-based dynamic tracing tool for Linux." [Online]. Available: https://github.com/ktap/ktap
[3] "LTTng." [Online]. Available: https://lttng.org
[4] "SystemTap." [Online]. Available: https://sourceware.org/systemtap
[5] "Using the Linux kernel Tracepoints." [Online]. Available: https://www.kernel.org/doc/Documentation/trace/tracepoints.txt
[6] "Kernel probes (Kprobes)," 2004. [Online]. Available: https://www.kernel.org/doc/Documentation/kprobes.txt
[7] "ftrace - function tracer," 2008. [Online]. Available: https://www.kernel.org/doc/Documentation/trace/ftrace.txt
[8] "Memory mapped I/O trace," 2014. [Online]. Available: https://nouveau.freedesktop.org/wiki/MmioTrace
[9] "Project Triforce: Run AFL on everything!" 2016. [Online]. Available: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run-afl-on-everything
[10] "ProtoFuzz: A protobuf fuzzer," 2016. [Online]. Available: https://blog.trailofbits.com/2016/05/18/protofuzz-a-protobuf-fuzzer
[11] "BlueBorne vulnerabilities," 2017. [Online]. Available: https://armis.com/blueborne
[12] "BlueZ: Official Linux Bluetooth protocol stack," 2018. [Online]. Available: http://www.bluez.org
[13] "Fluoride Bluetooth stack," 2018. [Online]. Available: https://android.googlesource.com/platform/system/bt
[14] "Trinity: Linux system call fuzzer," 2018. [Online]. Available: https://github.com/kernelslacker/trinity
[15] S. Angel, R. S. Wahby, M. Howald, J. B. Leners, M. Spilo, Z. Sun, A. J. Blumberg, and M. Walfish, “Defending against malicious peripherals with Cinch,” in Proceedings of the USENIX Security Symposium, 2016.
[16] N. Artenstein, “BroadPwn: Remotely compromising Android and iOS via a bug in Broadcom’s Wi-Fi chipsets,” Black Hat USA, 2017.
[17] D. Aumaitre and C. Devine, “Subverting Windows 7 x64 kernel with DMA attacks,” HITBSecConf Amsterdam, 2010.
[18] T. Ball, E. Bounimova, B. Cook, V. Levin, J. Lichtenberg, C. McGarvey, B. Ondrusek, S. K. Rajamani, and A. Ustuner, “Thorough static analysis of device drivers,” in Proceedings of the ACM European Conference on Computer Systems (EuroSys), 2006.
[19] I. Beer, “pwn4fun spring 2014 - Safari part II,” 2014. [Online]. Available: https://googleprojectzero.blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html
[20] F. Bellard, “QEMU, a fast and portable dynamic translator,” in Proceedings of the USENIX Annual Technical Conference, FREENIX Track, 2005.
[21] G. Beniamini, “Over the air - vol. 2, pt. 2: Exploiting the Wi-Fi stack on Apple devices,” 2017. [Online]. Available: https://googleprojectzero.blogspot.com/2017/10/over-air-vol-2-pt-2-exploiting-wi-fi.html
[22] ——, “Over the air - vol. 2, pt. 3: Exploiting the Wi-Fi stack on Apple devices,” 2017. [Online]. Available: https://googleprojectzero.blogspot.com/2017/10/over-air-vol-2-pt-3-exploiting-wi-fi.html
[23] ——, “Over the air: Exploiting Broadcom’s Wi-Fi stack (part 1),” 2017. [Online]. Available: https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi-4.html
[24] ——, “Over the air: Exploiting Broadcom’s Wi-Fi stack (part 2),” 2017. [Online]. Available: https://googleprojectzero.blogspot.com/2017/04/over-air-exploiting-broadcoms-wi-fi-11.html
[25] M. Böhme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury, “Directed greybox fuzzing,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.
[26] M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based greybox fuzzing as Markov chain,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2016.
[27] S. Boyd-Wickizer and N. Zeldovich, “Tolerating malicious device drivers in Linux,” in Proceedings of the USENIX Annual Technical Conference (ATC), 2010.
[28] A. Cama, “A walk with Shannon: A walkthrough of a pwn2own baseband exploit,” OPCDE Kenya, 2018.
[29] Q. Casasnovas, “[patch] kcov: add AFL-style tracing,” 2016. [Online]. Available: https://lkml.org/lkml/2016/5/21/58
[30] H. Chen, Y. Xue, Y. Li, B. Chen, X. Xie, X. Wu, and Y. Liu, “Hawkeye: Towards a desired directed grey-box fuzzer,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2018.
[31] P. Chen and H. Chen, “Angora: Efficient fuzzing by principled search,” in Proceedings of the IEEE Symposium on Security and Privacy, 2018.
[32] V. Chipounov and G. Candea, “Reverse engineering of binary device drivers with RevNIC,” in Proceedings of the ACM European Conference on Computer Systems (EuroSys), 2010.
[33] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: A platform for in-vivo multi-path analysis of software systems,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2011.
[34] P. Chubb, “Linux kernel infrastructure for user-level device drivers,” in Linux Conference, 2004.
[35] J. Corina, A. Machiry, C. Salls, Y. Shoshitaishvili, S. Hao, C. Kruegel, and G. Vigna, “DIFUZE: Interface aware fuzzing for kernel drivers,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.
[36] L. Duflot, Y.-A. Perez, G. Valadon, and O. Levillain, “Can you still trust your network card?” CanSecWest, 2010.
[37] S. Gan, C. Zhang, X. Qin, X. Tu, K. Li, Z. Pei, and Z. Chen, “CollAFL: Path sensitive fuzzing,” in Proceedings of the IEEE Symposium on Security and Privacy, 2018.
[38] V. Ganapathy, M. J. Renzelmann, A. Balakrishnan, M. M. Swift, and S. Jha, “The design and implementation of microdrivers,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2008.
[39] D. Gens, S. Schmitt, L. Davi, and A.-R. Sadeghi, “K-Miner: Uncovering the Network and memory corruption in Linux,” in Proceedings of the Distributed System Security Symposium (NDSS), 2018.
[40] B. Gregg, “Linux extended BPF (eBPF) tracing tools,” 2018. [Online]. Available: http://www.brendangregg.com/ebpf.html
[41] H. Han and S. K. Cha, “IMF: Inferred model-based fuzzer,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.
[42] J. Hertz and T. Newsham, “A Linux system call fuzzer using TriforceAFL,” 2016. [Online]. Available: https://github.com/nccgroup/TriforceLinuxSyscallFuzzer
[43] D. R. Jeong, K. Kim, B. Shivakumar, B. Lee, and I. Shin, “Razzer: Finding kernel race bugs through fuzzing,” in Proceedings of the IEEE Symposium on Security and Privacy, 2019, To appear.
[44] M. Jodeit and M. Johns, “USB device drivers: A stepping stone into your kernel,” in Proceedings of the European Conference on Computer Network Defense (EC2ND), 2010.
[45] M. Jurczyk and G. Coldwind, “Identifying and exploiting Windows kernel race conditions via memory access patterns,” 2013.
[46] A. Kadav, M. J. Renzelmann, and M. M. Swift, “Fine-grained fault tolerance using device checkpoints,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2013.
[47] S. Keil and C. Kolbitsch, “Stateful fuzzing of wireless device drivers in an emulated environment,” Black Hat Japan, 2007.
[48] A. Konovalov and D. Vyukov, “KernelAddressSanitizer (KASan): a fast memory error detector for the Linux kernel,” LinuxCon North America, 2015.
[49] V. Kuznetsov, V. Chipounov, and G. Candea, “Testing closed-source binary device drivers with DDT,” in Proceedings of the USENIX Annual Technical Conference (ATC), 2010.
[50] B. Leslie, P. Chubb, N. Fitzroy-Dale, S. Götz, C. Gray, L. Macpherson, D. Potts, Y.-T. Shen, K. Elphinstone, and G. Heiser, “User-level device drivers: Achieved performance,” Journal of Computer Science and Technology, vol. 20, no. 5, pp. 654–664, 2005.
[51] A. Machiry, C. Spensky, J. Corina, N. Stephens, C. Kruegel, and G. Vigna, “Dr. Checker: A soundy analysis for Linux kernel drivers,” in Proceedings of the USENIX Security Symposium, 2017.
[52] A. Markuze, A. Morrison, and D. Tsafrir, “True IOMMU protection from DMA attacks: When copy is faster than zero copy,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2016.
[53] A. Markuze, I. Smolyar, A. Morrison, and D. Tsafrir, “DAMN: Overhead-free IOMMU protection for networking,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2018.
[54] M. Mendonça and N. Neves, “Fuzzing Wi-Fi drivers to locate security vulnerabilities,” in Proceedings of the European Dependable Computing Conference (EDCC), 2008.
[55] R. J. Moore, “A universal dynamic trace for Linux and other operating systems,” in Proceedings of the USENIX Annual Technical Conference, FREENIX Track, 2001.
[56] M. Muench, J. Stijohann, F. Kargl, A. Francillon, and D. Balzarotti, “What you corrupt is not what you crash: Challenges in fuzzing embedded devices,” in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2018.
[57] V. Nossum and Q. Casasnovas, “Filesystem fuzzing with American fuzzy lop,” Vault, 2016.
[58] S. Pailoor, A. Aday, and S. Jana, “Moonshine: Optimizing OS fuzzer seed selection with trace distillation,” in Proceedings of the USENIX Security Symposium, 2018.
[59] J. Pan, G. Yan, and X. Fan, “Digtool: A virtualization-based framework for detecting kernel vulnerabilities,” in Proceedings of the USENIX Security Symposium, 2017.
[60] J. Patrick-Evans, L. Cavallaro, and J. Kinder, “POTUS: Probing off-the-shelf USB drivers with symbolic fault injection,” in Proceedings of the USENIX Workshop on Offensive Technologies (WOOT), 2017.
[61] N. Redini, A. Machiry, D. Das, Y. Fratantonio, A. Bianchi, E. Gustafson, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “BootStomp: On the security of bootloaders in mobile devices,” in Proceedings of the USENIX Security Symposium, 2017.
[62] M. J. Renzelmann, A. Kadav, and M. M. Swift, “SymDrive: Testing drivers without devices,” in Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.
[63] A. Ryabinin, “UBSan: Run-time undefined behavior sanity checker,” 2014. [Online]. Available: https://lwn.net/Articles/617364
[64] M. Schulz, D. Wegemer, and M. Hollick, “The Nexmon firmware analysis and modification framework: Empowering researchers to enhance Wi-Fi devices,” Computer Communications, 2018.
[65] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz, “kAFL: Hardware-assisted feedback fuzzing for OS kernels,” in Proceedings of the USENIX Security Symposium, 2017.
[66] S. Schumilo, R. Spenneberg, and H. Schwartke, “Don’t trust your USB! How to find bugs in USB device drivers,” Black Hat Europe, 2014.
[67] M. Schwarz, D. Gruss, M. Lipp, C. Maurice, T. Schuster, A. Fogh, and S. Mangard, “Automated detection, exploitation, and elimination of double-fetch bugs using modern CPU features,” in Proceedings of the ACM Asia Conference on Computer and Communications Security (ASIACCS), 2018.
[68] F. J. Serna, “MS08-061: The case of the kernel mode double-fetch,” 2008. [Online]. Available: https://blogs.technet.microsoft.com/srd/2008/10/14/ms08-061-the-case-of-the-kernel-mode-double-fetch
[69] P. Stewin and I. Bystrov, “Understanding DMA malware,” in Proceedings of the Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2012.
[70] M. M. Swift, M. Annamalai, B. N. Bershad, and H. M. Levy, “Recovering device drivers,” in Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2004.
[71] S. M. S. Talebi, H. Tavakoli, H. Zhang, Z. Zhang, A. A. Sani, and Z. Qian, “Charm: Facilitating dynamic analysis of device drivers of mobile systems,” in Proceedings of the USENIX Security Symposium, 2018.
[72] D. J. Tian, A. Bates, and K. Butler, “Defending against malicious USB firmware with GoodUSB,” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2015.
[73] D. J. Tian, N. Scaife, A. Bates, K. Butler, and P. Traynor, “Making USB great again with USBFILTER,” in Proceedings of the USENIX Security Symposium, 2016.
[74] D. Vyukov, “Kernel: Add kcov code coverage,” 2016. [Online]. Available: https://lwn.net/Articles/671640
[75] ——, “Syzkaller - kernel fuzzer,” 2018. [Online]. Available: https://github.com/google/syzkaller
[76] P. Wang, J. Krinke, K. Lu, G. Li, and S. Dodier-Lazaro, “How double-fetch situations turn into double-fetch vulnerabilities: A study of double fetches in the Linux kernel,” in Proceedings of the USENIX Security Symposium, 2017.
[77] R.-P. Weinmann, “All your baseband are belong to us,” DeepSec, 2010.
[78] F. Wilhelm, “Xenpwn: Breaking paravirtualized devices,” Black Hat USA, 2016.
[79] M. Xu, C. Qian, K. Lu, M. Backes, and T. Kim, “Precise and scalable detection of double-fetch bugs in OS kernels,” in Proceedings of the IEEE Symposium on Security and Privacy, 2018.
[80] J. Zaddach, L. Bruno, A. Francillon, D. Balzarotti et al., “AVATAR: A framework to support dynamic security analysis of embedded systems’ firmwares,” in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2014.
[81] M. Zalewski, “American fuzzy lop,” 2018. [Online]. Available: http://lcamtuf.coredump.cx/afl