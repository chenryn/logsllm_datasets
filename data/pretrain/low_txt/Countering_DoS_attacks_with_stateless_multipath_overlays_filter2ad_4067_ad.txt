### Effectiveness of the System Under Attack

To evaluate the effectiveness of our system in the presence of attacks, we conducted an experiment where we randomly disabled overlay nodes. In this scenario, the client continued to distribute data across all available overlay nodes, as it was unaware which nodes were under attack. We then varied the proportion of attacked overlay nodes and measured the throughput of the resulting link.

**Figure 7** illustrates the decrease in uplink throughput when the system is under attack. The attack targets a random fraction of the overlay nodes. When no replication is used and the system relies on TCP to recover lost packets, the connection performs relatively well with packet loss rates up to 9-10% of the total packets transmitted. As we increase the packet replication factor, the network's resilience improves, which aligns with our expectations from the analysis. **Figure 8** provides corresponding results for latency.

### Ticket Generation Performance

We also measured the ticket generation capacity of a single overlay node. The ticket generation process consists of four main steps: session key generation, AES encryption of the ticket, computation of the UMAC tag, and encryption of the packet using the client’s public key. Our findings indicate that even for small public keys (e.g., 256 bits), the public key encryption step accounts for approximately 95% of the ticket generation time. As the size of the client’s public key increases, the number of tickets that can be generated by an overlay node decreases, as shown in **Figure 9**. Using a 3 GHz Intel Pentium 4 machine, we were able to generate approximately 11,862 tickets per second. In an ION with 128 nodes, the ticket-generation subsystem could support 1.5 million new users per second, assuming a random distribution of users across ION nodes.

### Related Work

The Internet's increased popularity and utility have made it a target for malicious and ignorant users, leading to the persistence of Denial of Service (DoS) attacks. [1] explores the two main aspects of the SOS architecture—filtering and overlay routing—considering several alternative mechanisms. It is noted that in some cases, the security properties offered by SOS can be maintained with simpler and more predictable mechanisms. However, certain secondary properties, such as the ability to rapidly reconfigure the architecture in response to a breach, are compromised. In most other respects, the two approaches are very similar. [23] provides an analysis of security and performance trade-offs in IONs. Wang et al. [22] used an online network simulator to investigate the resistance of proxy networks (such as SOS) against simple DoS attacks, concluding that the resistance increases linearly with the network's size. However, they assumed that users could instantaneously detect and switch to new nodes with zero overhead, an assumption that does not hold for any ION architecture prior to ours.

[24] introduces the first system to create stateless flow filtering by having each router add "capabilities" to packets, allowing the receiver to send these capabilities to its peers, enabling higher traffic rates for privileged traffic. Unprivileged traffic is limited to a fraction of the available bandwidth, thus preventing new connections from being established during a DoS attack but preserving existing ones. Estrin et al. [8] first proposed a capability-like mechanism for network packets.

Gligor [9] proposed using a server to produce tickets at line speeds, requiring clients to obtain a ticket before accessing a protected service. This approach primarily focuses on application-level DoS protection. Anderson et al. [4] subsequently proposed a similar system for use at the network layer, assuming a distributed token server architecture and rate-limiting/ filtering traffic on routers based on these tokens.

### Conclusions

We examined the vulnerability of indirection-based overlay networks (IONs) to more sophisticated attackers than those considered by systems like SOS, I3, MayDay, and Tor. Our scope included both simple flooding attacks and more advanced attackers capable of eavesdropping and targeting specific hosts. Even with limited resources, a sophisticated attacker can disrupt all communication attempts by the victim. We presented an analytical model to quantify the impact of such attacks on end-to-end communication throughput and the resilience of ION DDoS defenses to congestion-based DDoS attacks. To our knowledge, this is the first non-trivial attack model for DoS attacks in the literature.

We proposed a spread-spectrum-like paradigm to create per-packet path diversity. Using the same analytical models, we quantified the resistance of our system to DDoS attacks and demonstrated that a reasonably sized overlay network can withstand attacks much larger than those seen to date. Our performance measurements using an experimental prototype on PlanetLab show that, despite the introduction of an overlay mechanism, there is very little to no increase in end-to-end latency when using packet replication, and throughput drops by less than 15% in all cases. Finally, we showed that our system can withstand attacks involving millions of attackers, causing up to 40% of overlay nodes to become unreachable.

Our approach offers an effective solution against congestion-based denial of service attacks in most environments, as it does not require modifications to clients, servers, protocols, or routers in terms of hardware or existing software. Future work includes better characterizing the trade-offs we have explored so far by introducing a coding scheme for data transmission that adapts to the network characteristics of each path. Additionally, we are investigating mechanisms to protect our system against attackers that can take over overlay nodes and subvert part of the infrastructure. Finally, we are interested in deploying and using this protection system on a larger scale to gain operational experience in a real environment.

### References

[1] D. G. Andersen. Mayday: Distributed Filtering for Internet Services. In Proceedings of the 4th USENIX Symposium on Internet Technologies and Systems (USITS), March 2003.
[2] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. N. Rao. Improving Web Availability for Clients with MONET. In Proceedings of the 2nd Symposium on Networked Systems Design and Implementation (NSDI), May 2005.
[3] D. G. Andersen, A. C. Snoeren, and H. Balakrishnan. Best-Path vs. Multi-Path Overlay Routing. In Proceedings of the Internet Measurement Conference, October 2003.
[4] T. Anderson, T. Roscoe, and D. Wetherall. Preventing Internet Denial-of-Service with Capabilities. In Proceedings of the 2nd Workshop on Hot Topics in Networks (HotNets-II), November 2003.
[5] M. Bailey, E. Cooke, F. Jahanian, J. Nazario, and D. Watson. The Internet Motion Sensor: A Distributed Blackhole Monitoring System. In Proceedings of the ISOC Symposium on Network and Distributed Systems Security (SNDSS), pages 167–179, February 2005.
[6] J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and P. Rogaway. UMAC: Fast and Secure Message Authentication. Lecture Notes in Computer Science, 1666:216–233, 1999.
[7] T. Diament, H. K. Lee, A. D. Keromytis, and M. Yung. The Dual Receiver Cryptogram and Its Applications. In Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS), October 2004.
[8] D. Estrin, J. Mogul, and G. Tsudik. VISA Protocols for Controlling Inter-Organizational Datagram Flow. IEEE Journal on Selected Areas in Communications, May 1989.
[9] V. D. Gligor. Guaranteeing Access in Spite of Distributed Service-Flooding Attacks. In Proceedings of the Security Protocols Workshop, April 2003.
[10] K. P. Gummadi, H. V. Madhyastha, S. D. Gribble, H. M. Levy, and D. Wetherall. Improving the Reliability of Internet Paths with One-hop Source Routing. In Proceedings of the 6th Symposium on Operating Systems Design & Implementation, December 2004.
[11] J. Ioannidis and S. M. Bellovin. Implementing Pushback: Router-Based Defense Against DDoS Attacks. In Proceedings of the ISOC Symposium on Network and Distributed System Security (SNDSS), February 2002.
[12] M. Jakobsson and A. Juels. Proofs of Work and Bread Pudding Protocols. In Proceedings of the IFIP TC6 & TC11 Joint Conference on Communications and Multimedia Security, September 1999.
[13] A. D. Keromytis, V. Misra, and D. Rubenstein. SOS: Secure Overlay Services. In Proceedings of ACM SIGCOMM, pages 61–72, August 2002.
[14] A. D. Keromytis, J. L. Wright, and T. de Raadt. The Design of the OpenBSD Cryptographic Framework. In Proceedings of the USENIX Annual Technical Conference, pages 181–196, June 2003.
[15] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click modular router. ACM Transactions on Computer Systems (ToCS), 18(3):263–297, August 2000.
[16] A. Kuzmanovic and E. W. Knightly. Low-Rate TCP-Targeted Denial of Service Attacks. In Proceedings of ACM SIGCOMM, pages 75–86, August 2003.
[17] D. Moore, G. Voelker, and S. Savage. Inferring Internet Denial-of-Service Activity. In Proceedings of the 10th USENIX Security Symposium, pages 9–22, August 2001.
[18] W. G. Morein, A. Stavrou, D. L. Cook, A. D. Keromytis, V. Misra, and D. Rubenstein. Using Graphic Turing Tests to Counter Automated DDoS Attacks Against Web Servers. In Proceedings of the 10th ACM International Conference on Computer and Communications Security (CCS), pages 8–19, October 2003.
[19] E. M. Nahum, M.-C. Rosu, S. Seshan, and J. Almeida. The effects of wide-area conditions on WWW server performance. In Proceedings of the ACM SIGMETRICS, pages 257–267, June 2001.
[20] A. Stavrou, A. D. Keromytis, J. Nieh, V. Misra, and D. Rubenstein. MOVE: An End-to-End Solution To Network Denial of Service. In Proceedings of the ISOC Symposium on Network and Distributed System Security (SNDSS), pages 81–96, February 2005.
[21] L. von Ahn, M. Blum, N. J. Hopper, and J. Langford. CAPTCHA: Using Hard AI Problems For Security. In Proceedings of EUROCRYPT, May 2003.
[22] J. Wang, X. Liu, and A. A. Chien. Empirical Study of Tolerating Denial-of-Service Attacks with a Proxy Network. In Proceedings of the 14th USENIX Security Symposium, pages 51–64, August 2005.
[23] D. Xuan, S. Chellappan, and X. Wang. Analyzing the Secure Overlay Services Architecture under Intelligent DDoS Attacks. In Proceedings of the 24th International Conference on Distributed Computing Systems (ICDCS), pages 408–417, March 2004.
[24] A. Yaar, A. Perrig, and D. Song. An Endhost Capability Mechanism to Mitigate DDoS Flooding Attacks. In Proceedings of the IEEE Symposium on Security and Privacy, May 2004.

### Appendix

#### Analysis of Sweeping Attacks

**Proposition 1.** The percentage of users that will have to reset their connections at least \( k > 1 \) times during the attack is:
\[ P_k(t_u, t_a, p_d) = \sum_{i=1}^{\lfloor \frac{t_u}{t_a} \rfloor} P_{k-1}(t_u - i \cdot t_a, t_a, p_d) \cdot p_d \]
where \( t_u \) is the average user time, \( t_a \) is the attack time, and \( p_d \) is the percentage of nodes attacked simultaneously. We assume immediate attack detection (\( t_d = 0 \)).

**Proof.** The percentage of users that will be affected by the attack at least once is:
\[ P_1(t_u, t_a, p_d) = \frac{t_u}{t_a} \cdot p_d \]

Note that if \( t_u \gg t_a \), the above probability can exceed 100%, meaning the attack will certainly affect the clients, possibly more than once. When \( P_1 > 100\% \), we set \( P_1 = 100\% \). We will prove (1) using induction.

**Base case for \( k = 2 \)**:
\[ P_2(t_u, t_a, p_d) = \sum_{i=1}^{\lfloor \frac{t_u}{t_a} \rfloor} P_1(t_u - i \cdot t_a, t_a, p_d) \cdot p_d \]

In our model, the attacker can only attack \( \frac{t_u}{t_a} \cdot p_d \) sets of nodes. A client suffers an attack when the set of overlay nodes they are connected to is attacked. The probability for a client to be in the first set of attacked nodes is \( p_d \). After detecting the attack, the client will select a new overlay node. The probability that this new overlay node is part of the attack window, and thus the client will suffer another attack, is \( P_1(t_u - t_a, t_a, p_d) \). Therefore, the probability of being attacked at least twice when the client is in the first set of attacked nodes is \( P_1(t_u - t_a, t_a, p_d) \cdot p_d \). For a client connected to the second set of nodes, the probability of being attacked twice is \( P_1(t_u - 2 \cdot t_a, t_a, p_d) \cdot p_d \). Summing up the fractions of clients connected to the \( i \)-th set for which \( t_u - i \cdot t_a > 0 \), we get (3).

Assuming the formula holds for \( k = j \), we will prove it holds for \( k = j + 1 \). \( P_k \) is the probability that a client will be re-attacked at least \( k \) times. If the client is in the first set attacked, the probability of being attacked \( j + 1 \) times is the probability of initially being in the first set, which is \( p_d \), multiplied by the probability that they will select overlay nodes that can be re-attacked \( j \) times in the remaining \( t_u - t_a \) time. The probability of both being in the first attacked set and being re-attacked \( j \) more times is:
\[ P_{j+1}^1 = P_j(t_u - t_a, t_a, p_d) \cdot p_d \]

For a node that connects initially to the \( i \)-th set, the probability of being attacked \( j + 1 \) times is:
\[ P_{j+1}^i = P_j(t_u - i \cdot t_a, t_a, p_d) \cdot p_d \]

Summing all the sets \( i \) for which \( t_u - i \cdot t_a > 0 \), we get (1).

**Proposition 2.** In the general case where \( t_d \geq 0 \), the percentage of nodes that will have to reset their connections at least \( k > 1 \) times during the attack is:

a) If \( t_d \geq t_a \):
\[ P_k(t_u, t_a, p_d) = \left( \frac{t_u}{t_a} \cdot p_d \right)^k \]

b) If \( t_d < t_a \):
\[ P_k(t_u, t_a, p_d) = \sum_{i=1}^{\lfloor \frac{t_u + t_d}{t_a} \rfloor} P_{k-1}(t_u + t_d - i \cdot t_a, t_a, p_d) \cdot p_d \]

In the general case where \( t_d \geq 0 \), we assume that the user is not discouraged by the attack and will continue to use the system for \( t_u \) time. We derive (2) using the fact that since \( t_d \geq t_a \), the client will have the same probability to select a set of overlay nodes that will be attacked as at the beginning of the attack: \( \frac{t_u}{t_a} \cdot p_d \). The percentage of users that will be attacked \( k \) times is \( \left( \frac{t_u}{t_a} \cdot p_d \right)^k \). Equation (4) follows from Proposition 1 if we change the usage time of a user from \( t_u \) to \( t_u + t_d \), i.e., the user will have to pay a penalty of \( t_d \) each time they are attacked, increasing their total usage time by the same amount.