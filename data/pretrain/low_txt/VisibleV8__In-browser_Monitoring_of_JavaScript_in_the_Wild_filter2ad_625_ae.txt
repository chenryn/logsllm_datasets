# IMC '19, October 21–23, 2019, Amsterdam, Netherlands

## Deobfuscated Script Behavior
The deobfuscated script's behavior is straightforward: if any of its artifact probes succeed, it performs no action. Conversely, if all probes fail, the script reloads the current frame or page, presumably to display new content that is deemed too valuable for bots to access.

## 6. Related Work

### Security and Sandboxing
- **JStill** [56] utilized static code signatures to detect common JavaScript (JS) obfuscation techniques employed by malware.
- **Revolver** [28] employed static lexical fingerprints and spatial clustering to track the evolution of JS malware samples, aiding in the evasion of detection by the Wepawet browser honeypot/sandbox.
- **Saxena et al.** [46] used off-line symbolic execution to identify cross-site scripting (XSS) vulnerabilities in web applications.
- **Rozzle** [29] enhanced existing malware classifiers using a pragmatic form of symbolic execution, improving both dynamic and static analysis.
- **Hulk** [27] applied JS dynamic analysis to detect malicious behavior in Chrome browser extensions.

### Taint Analysis
Taint analysis has been used to identify XSS vulnerabilities [31, 51] and leaks of private data to third parties [19, 53]. This typically requires substantial patches to a fixed, often obsolete, browser version. An exception [20] uses JS source rewriting for inline flow monitoring without modifying the JS engine, but this approach incurs prohibitive overhead.

### Browsing Record and Replay Systems
Systems like **WebCapsule** [41] and **JSgraph** [33] provide sophisticated causality tracking across HTTP, DOM, and JS events. However, these systems become obsolete as browser codebases evolve, and patches are often left unmaintained.

### JS Sandboxing
Published JS sandboxing systems include in-band systems like **JSand** [14] and **Phung et al.** [43], and out-of-band systems like **ConScript** [37]. Attempts to fully sandbox JS execution within a JS engine implemented in JS [18, 52] have shown unacceptable performance.

### Measurements
- **Richards' survey** [44] on the use and misuse of JS's `eval` feature provides an exhaustive catalog and prompted follow-up mitigation efforts [26].
- **Nikiforakis' measurement** [42] of remote JS script inclusions on top websites highlighted the distributed nature of JS web applications and associated trust and security issues.
- **Mayer and Mitchell's Fourth-Party web measurement framework** [35] demonstrated the value of comprehensive web measurements in third-party web tracking.

### Browser Fingerprinting and Tracking
- **Acar et al.** [13] used in-browser instrumentation to detect and measure browser fingerprinting with **FPDetective**.
- **Englehardt and Narayanan's survey** [22] showcased the popular **OpenWPM** web privacy measurement platform built around Firefox.
- **Merzdovnik et al.** [36] measured the effectiveness of tracker-blocking tools like Ghostery and AdBlock Plus, focusing on 3rd-party tracking sources and blocker success rates.
- **Lauinger et al.** [30] discovered widespread use of outdated or vulnerable JS libraries on top sites.
- **Snyder's measurement** [49] found that approximately 50% of available JS browser API features were unused on top websites. A follow-up work [50] explored disabling potentially dangerous or undesirable JS browser API features to reduce the attack surface without disrupting user experience.

## 7. Conclusion
We have argued for the benefits of out-of-band over in-band JS instrumentation for measuring web security and privacy concerns. We introduced **VisibleV8**, a custom variant of Chrome designed to measure native JS/browser features used on the web. VV8 is modern, stealthy, and fast, suitable for both interactive use and web-scale automation. Our implementation is a small, highly maintainable patch easily ported to new browser versions. The resulting instrumentation, hidden inside the JS engine, is transparent to visited pages, performs well, and provides fine-grained feature tracking by source script and security origin. With VV8, we observed that 29% of the Alexa top 50k sites actively test for common automated browser frameworks, which is concerning for security and privacy research. VisibleV8 has proven to be a transparent, efficient, and effective observation platform, and we hope its public release will contribute to the development of next-generation web instrumentation and measurement tools.

## 8. Availability
The VisibleV8 patches to Chromium, along with tools and documentation, are publicly available at:
https://kapravelos.com/projects/vv8

## 9. Acknowledgements
We would like to thank our shepherd Dave Levin and the anonymous reviewers for their insightful comments and feedback. This work was supported by the Office of Naval Research (ONR) under grant N00014-17-1-2541, by DARPA under agreement number FA8750-19-C-0003, and by the National Science Foundation (NSF) under grant CNS-1703375.

## References
[1] 2014. Understanding web pages better. https://webmasters.googleblog.com/2014/05/understanding-web-pages-better.html. (2014). Accessed: 2019-8-19.
[2] 2016. javascript - Can a website detect when you are using selenium with chromedriver? https://stackoverflow.com/a/41220267. (2016). Accessed: 2018-11-15.
[3] 2017. Bug 1424176. https://bugzilla.mozilla.org/show_bug.cgi?id=1424176. (2017). Accessed: 2018-11-15.
[4] 2017. Issue 793217. https://bugs.chromium.org/p/chromium/issues/detail?id=793217. (2017). Accessed: 2018-11-15.
[5] 2018. marmelab/gremlins.js: Monkey testing library for web apps and Node.js. https://github.com/marmelab/gremlins.js. (2018). Accessed: 2018-11-15.
[6] 2018. The State of the Octoverse: top programming languages of 2018. https://github.blog/2018-11-15-state-of-the-octoverse-top-programming-languages/. (2018). Accessed: 2019-5-8.
[7] 2018. WebIDL Level 1. https://www.w3.org/TR/WebIDL-1/. (2018). Accessed: 2019-1-25.
[8] 2019. BrowserBench.org. https://browserbench.org/. (2019). Accessed: 2019-1-25.
[9] 2019. Dromaeo. http://dromaeo.com/?recommended. (2019). Accessed: 2019-1-25.
[10] 2019. PhantomJS - Scriptable Headless Browser. http://phantomjs.org/. (2019). Accessed: 2019-2-1.
[11] 2019. Selenium - Web Browser Automation. https://docs.seleniumhq.org/. (2019). Accessed: 2019-2-1.
[12] 2019. The RedMonk Programming Language Rankings: January 2019. https://redmonk.com/sogrady/2019/03/20/language-rankings-1-19/. (2019). Accessed: 2019-5-8.
[13] Gunes Acar, Marc Juarez, Nick Nikiforakis, Claudia Diaz, Seda Gürses, Frank Piessens, and Bart Preneel. 2013. FPDetective: Dusting the Web for Fingerprinters. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[14] Pieter Agten, Steven Van Acker, Yoran Brondsema, Phu H Phung, Lieven Desmet, and Frank Piessens. 2012. JSand: Complete Client-Side Sandboxing of Third-Party JavaScript without Browser Modifications. In Proceedings of the Annual Computer Security Applications Conference (ACSAC). ACM.
[15] James P Anderson. 1972. Computer Security Technology Planning Study. Volume 2. Technical Report. Anderson (James P) and Co Fort Washington PA.
[16] Marc Andreessen. 2011. Why Software is Eating the World. //www.wsj.com/articles/SB10001424053111903480904576512250915629460. (2011). Accessed: 2018-04-20.
[17] Yinzhi Cao, Zhanhao Chen, Song Li, and Shujiang Wu. 2017. Deterministic Browser. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[18] Yinzhi Cao, Zhichun Li, Vaibhav Rastogi, Yan Chen, and Xitao Wen. 2012. Virtual Browser: A Virtualized Browser to Sandbox Third-party JavaScripts with Enhanced Security. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security (ASIACCS '12). ACM.
[19] Quan Chen and Alexandros Kapravelos. 2018. Mystique: Uncovering Information Leakage from Browser Extensions. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). https://doi.org/10.1145/3243734.3243823
[20] Andrey Chudnov and David A Naumann. 2015. Inlined information flow monitoring for JavaScript. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). ACM.
[21] Anupam Das, Gunes Acar, Nikita Borisov, and Amogh Pradeep. 2018. The Web’s Sixth Sense: A Study of Scripts Accessing Smartphone Sensors. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). https://doi.org/10.1145/3243734.3243860
[22] Steven Englehardt and Arvind Narayanan. 2016. Online Tracking: A 1-million-site Measurement and Analysis. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). ACM. https://doi.org/10.1145/2976749.2978313
[23] Úlfar Erlingsson. 2003. The Inlined Reference Monitor Approach to Security Policy Enforcement. Technical Report. Cornell University.
[24] Luca Invernizzi, Kurt Thomas, Alexandros Kapravelos, Oxana Comanescu, Jean-Michel Picod, and Elie Bursztein. 2016. Cloak of Visibility: Detecting When Machines Browse A Different Web. In Proceedings of the IEEE Symposium on Security and Privacy.
[25] Gregoire Jacob, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. 2012. PUBCRAWL: Protecting Users and Businesses from CRAWLers. In Proceedings of the USENIX Security Symposium.
[26] Simon Holm Jensen, Peter A. Jonsson, and Anders Møller. 2012. Remedying the Eval That Men Do. In Proceedings of the 2012 International Symposium on Software Testing and Analysis (ISSTA 2012). ACM. https://doi.org/10.1145/2338965.2336758
[27] Alexandros Kapravelos, Chris Grier, Neha Chachra, Chris Kruegel, Giovanni Vigna, and Vern Paxson. 2014. Hulk: Eliciting Malicious Behavior in Browser Extensions. In Proceedings of the USENIX Security Symposium. USENIX.
[28] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Chris Kruegel, and Giovanni Vigna. 2013. Revolver: An Automated Approach to the Detection of Evasive Web-based Malware. In Proceedings of the USENIX Security Symposium.
[29] Clemens Kolbitsch, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. 2012. Rozzle: De-Cloaking Internet Malware. In Proceedings of the IEEE Symposium on Security and Privacy. IEEE.
[54] Antoine Vastel. 2019. Fingerprint-Scanner. https://github.com/antoinevastel/fpscanner/. (2019). Accessed: 2019-2-1.
[55] Antoine Vastel, Pierre Laperdrix, Walter Rudametkin, and Romain Rouvoy. 2018. Fp-Scanner: The Privacy Implications of Browser Fingerprint Inconsistencies. In Proceedings of the USENIX Security Symposium.
[56] Wei Xu, Fangfang Zhang, and Sencun Zhu. 2013. JStill: Mostly Static Detection of Obfuscated Malicious JavaScript Code. In Proceedings of the third ACM conference on Data and application security and privacy. ACM.
[30] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web. In Proceedings of the Symposium on Network and Distributed System Security (NDSS).
[31] Sebastian Lekies, Krzysztof Kotowicz, Samuel Groß, Eduardo A. Vela Nava, and Martin Johns. 2017. Code-Reuse Attacks for the Web: Breaking Cross-Site Scripting Mitigations via Script Gadgets. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). https://doi.org/10.1145/3133956.3134091
[32] Sebastian Lekies, Ben Stock, and Martin Johns. 2013. 25 Million Flows Later: Large-scale Detection of DOM-based XSS. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). ACM. https://doi.org/10.1145/2508859.2516703
[33] Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci. 2018. JSgraph: Enabling Reconstruction of Web Attacks via Efficient Tracking of Live In-Browser JavaScript Executions. In NDSS.
[34] Z. Li, S. Alrwais, X. Wang, and E. Alowaisheq. 2014. Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections. In Proceedings of the IEEE Symposium on Security and Privacy.
[35] J. R. Mayer and J. C. Mitchell. 2012. Third-Party Web Tracking: Policy and Technology. In Proceedings of the IEEE Symposium on Security and Privacy.
[36] Georg Merzdovnik, Markus Huber, Damjan Buhov, Nick Nikiforakis, Sebastian Neuner, Martin Schmiedecker, and Edgar Weippl. 2017. Block Me If You Can: A Large-Scale Study of Tracker-Blocking Tools. In Proceedings of the IEEE Symposium on Security and Privacy. IEEE.
[37] Leo A Meyerovich and Benjamin Livshits. 2010. ConScript: Specifying and enforcing fine-grained security policies for JavaScript in the browser. In Proceedings of the IEEE Symposium on Security and Privacy.
[38] Najmeh Miramirkhani, Oleksii Starov, and Nick Nikiforakis. 2017. Dial One for Scam: A Large-Scale Analysis of Technical Support Scams. In Proceedings of the Symposium on Network and Distributed System Security (NDSS).
[39] Keaton Mowery, Dillon Bogenreif, Scott Yilek, and Hovav Shacham. 2011. Fingerprinting information in JavaScript implementations. In Proceedings of W2SP.
[40] Martin Mulazzani, Philipp Reschl, Markus Huber, Manuel Leithner, Sebastian Schrittwieser, and Edgar Weippl. 2013. Fast and Reliable Browser Identification with JavaScript Engine Fingerprinting. In Proceedings of W2SP.
[41] Christopher Neasbitt, Bo Li, Roberto Perdisci, Long Lu, Kapil Singh, and Kang Li. 2015. WebCapsule: Towards a Lightweight Forensic Engine for Web Browsers. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). ACM. https://doi.org/10.1145/2810103.2813656
[42] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012. ou Are What You Include: Large-scale Evaluation of Remote JavaScript Inclusions. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[43] Phu H. Phung, David Sands, and Andrey Chudnov. 2009. Lightweight Self-protecting JavaScript. In Proceedings of the 4th International Symposium on Information, Computer, and Communications Security (ASIACCS '09). ACM. https://doi.org/10.1145/1533057.1533067
[44] Gregor Richards, Christian Hammer, Brian Burg, and Jan Vitek. 2011. The eval that men do. ECOOP 2011–Object-Oriented Programming (2011).
[45] Franziska Roesner, Tadayoshi Kohno, and David Wetherall. 2012. Detecting and Defending Against Third-Party Tracking on the Web. In Proceedings of the USENIX Symposium on Networked Systems Design & Implementation.
[46] Prateek Saxena, Devdatta Akhawe, Steve Hanna, Feng Mao, Stephen McCamant, and Dawn Song. 2010. A Symbolic Execution Framework for JavaScript. In Proceedings of the IEEE Symposium on Security and Privacy. IEEE.
[47] Michael Schwarz, Moritz Lipp, and Daniel Gruss. 2018. JavaScript Zero: Real JavaScript and Zero Side-Channel Attacks. In Proceedings of the Symposium on Network and Distributed System Security (NDSS).
[48] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee. 2010. On the Incoherencies in Web Browser Access Control Policies. In Proceedings of the IEEE Symposium on Security and Privacy.
[49] Peter Snyder, Lara Ansari, Cynthia Taylor, and Chris Kanich. 2016. Browser Feature Usage on the Modern Web. In Proceedings of the 2016 ACM on Internet Measurement Conference. ACM.
[50] Peter Snyder, Cynthia Taylor, and Chris Kanich. 2017. Most Websites Don’t Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security. In Proceedings of the ACM Conference on Computer and Communications Security (CCS).
[51] Ben Stock, Stephan Pfistner, Bernd Kaiser, Sebastian Lekies, and Martin Johns. 2015. From Facepalm to Brain Bender: Exploring Client-Side Cross-Site Scripting. In Proceedings of the ACM Conference on Computer and Communications Security (CCS). ACM. https://doi.org/10.1145/2810103.2813625
[52] Jeff Terrace, Stephen R Beard, and Naga Praveen Kumar Katta. 2012. JavaScript in JavaScript (js.js): Sandboxing Third-Party Scripts. In Proceedings of the 3rd USENIX Conference on Web Application Development. USENIX.
[53] Minh Tran, Xinshu Dong, Zhenkai Liang, and Xuxian Jiang. 2012. Tracking the trackers: Fast and scalable dynamic analysis of web content for privacy violations. In International Conference on Applied Cryptography and Network