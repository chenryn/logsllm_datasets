# 针对信息窃取恶意软件AZORult的分析

#### 译文声明
本文为翻译文章，原文链接：[https://blog.minerva-labs.com/](https://blog.minerva-labs.com/)。译文仅供参考，具体内容及含义以原文为准。

## 引言
AZORult是一种信息窃取型恶意软件，随着时间推移已演变为具备多层功能的复杂工具。正如达尔文自然选择理论所阐述的那样，人工选择（即选择性育种）同样可以驱动进化过程。在信息安全领域，这一生物学原理也适用于恶意软件的发展。攻击者会不断评估其工具的具体特征与其生存能力的相关性，并通过“基因工程”来改进恶意软件的功能。接下来，我们将深入探讨一个信息窃取恶意软件的特性。每一层隐藏的功能都是精心设计的，以提高其在野外环境中的存活率。

## 攻击案例分析
上周，我们成功阻止了一起针对客户网站的攻击事件。该攻击使用了一封名为“Quotation Request – EP”的经典恶意邮件，发件人是一家非洲能源公司的电子邮件账户。邮件附件包含两个文件：一个文本文件和一个带有DDE对象的Microsoft Word文档。一旦用户打开文档，它将从受感染的网站下载一个MSI文件。

该MSI文件是通过`msi2exe`工具从普通可执行文件转换而来的安装程序，将恶意代码包装成看似正常的Windows安装程序。这仅是众多隐藏恶意代码手段的第一层。为了获取并分析其中的可执行文件，我使用7-Zip将其解压，并将MSI文件作为归档文件打开。

进一步分析发现，真正的罪魁祸首是一个名为`Binary._D7D112F049BA1A655B5D9A1D0702DEE5`的资源，这是一个嵌入在MSI文件中的标准Windows可执行文件。然而，通过PEStudio进行详细检查后，我们发现实际情况并非如此简单：这是一个经过编译的AutoIt脚本——又一层用来封装实际payload的外壳。

利用Exe2Aut工具反编译了该可执行文件，但反编译后的脚本仍然被混淆。尽管混淆程度不高，主要依赖于单一字符串混淆函数，我们还是编写了一个Python脚本来完成反混淆工作。反混淆后的脚本显示，攻击者使用了经典的进程空洞技术（process hollowing），具体步骤如下：
- 创建目标进程的第二个暂停实例；
- 分配可写且可执行的内存区域；
- 将希望执行的payload写入远程进程；
- 设置主线程状态为运行注入代码，并恢复进程执行。

注入的payload本身也采用了相同的混淆方法处理，因此，在应用我们的反混淆脚本之后，可以直接观察到其内容。开头部分出现了ASCII字符串MZ（4D和5A），这是Windows可执行文件的标准魔数，强烈暗示着存在另一个payload。使用Python脚本提取此缓冲区后，虽然头部损坏，但依然可以通过PEstudio查看二进制文件。令人惊讶的是，攻击者认为之前使用的所有技术还不够隐蔽，因此再次用UPX压缩了文件。即使在压缩状态下，我们仍能通过十六进制编辑器识别出多个指向浏览器密码窃取功能的字符串。

通过网络活动监控，确认了该恶意软件首先向C2服务器发送指令，随后接收回传的密码窃取命令并将结果发送回去。更深入的研究揭示，此payload实际上是AZORult——一种自2016年起便活跃于各种论坛上的知名信息窃取恶意软件。

## 实践中的人工选择
此次活动中使用的AZORult恶意软件采用了六种技术来逃避检测，展示了其开发者如何通过反复试验选择最有效的组合：
- **RAR归档**：文件以压缩格式打包，试图绕过静态扫描和对危险文件类型的限制。
- **多层封装**：利用多层次结构掩盖最终的信息窃取功能，可能会欺骗某些安全产品。
- **MSI文件释放payload**：许多机器学习防病毒解决方案忽略了这种文件类型。
- **AutoIt脚本**：非常规脚本语言的使用使得生成的二进制文件与传统C/C++可执行文件显著不同。
- **代码注入**：恶意软件会在内存中解密其有效载荷，仅在经过几层迷惑技巧之后才执行。
- **DDE技术**：利用DDE功能允许攻击者将payload嵌入到不太可疑的docx格式中。

我们还追踪到了早期尝试，表明这些攻击者经历了一个人工选择过程，逐步优化了他们的恶意软件版本。例如，先前的变种曾使用SCR扩展而非MSI；另一种情况则依赖于直接从受损网站下载受感染docx文件的链接机制。

### IOC (Indicators of Compromise)
- **URLs**
  - hxxp://ipool[.]by/bitrix/css/8/DOC71574662-QUOTATION[.]doc
  - hxxp://ipool[.]by/bitrix/css/8/aksu[.]msi
  - hxxp://www[.]sckm[.]Krakow[.]pl/aksu[.]msi
  - hxxp://aksuperstore[.]com/fh8nzhme/gate[.]php
- **Files (SHA-256)**
  - Analyzed DDE docx: ac342e80cbdff7680b5b7790cc799e2f05be60e241c23b95262383fd694f5a7a
  - Analyzed MSI Installer: e7a842f67813a47bece678a1a5848b4722f737498303fafc7786de9a81d53d06
  - Unzipped executable: 717db128de25eec80523b36bfaf506f5421b0072795f518177a5e84d1dde2ef7
  - Decompiled obfuscated AutoIt: 31f807ddfc479e40d4d646ff859d05ab29848d21dee021fa7b8523d2d9de5edd
  - Deobfuscated AutoIt: b074be8b1078c66106844b6363ff19226a6f94ce0d1d4dd55077cc30dd7819c5
  - Similar DDE document downloaded directly from a compromised website: dc3fac021fae581bf086db6b49f698f0adc80ebe7ca7a28e80c785673065a127
  - The builder (Trojanized): 329030c400932d06642f9dbc5be71c59588f02d27d9f3823afa75df93407027b
  - Similar MSI installers:
    - efa6af034648f8e08098ea56445ccab1af67376ca45723735602f9bdd59e5b5d
    - 9d7a10fa3e5fd2250e717d359fcff881d9591e0fe17795bab7aac747e8514247
    - dc3fac021fae581bf086db6b49f698f0adc80ebe7ca7a28e80c785673065a127