### Protection and Prevention Based on Encoding and Obfuscation Techniques

Given the wide array of encoding and obfuscation techniques available to attackers, it is challenging to provide comprehensive protection and prevention. Similarly, we argue that scriptless attacks cannot be effectively prevented at the server-side.

Jim et al. introduced Browser-Enforced Embedded Policies (BEEP) [26], a policy-driven browser extension that controls whether specific scripts are allowed to execute. BEEP enables users to whitelist legitimate scripts and disable scripts for certain regions of a web page. This concept forms another foundation for Content Security Policy (CSP) [43]. Nadji et al. proposed Document Structure Integrity (DSI) [35], which ensures that dynamic content is separated from static content on the server-side, while both are combined in an integrity-preserving manner on the client-side. Blueprint by Louw and Venkatakrishnan [31] follows a similar approach: a server-side application encodes the content into a model representation that can be processed by the client-side part of the tool. Saxena et al. presented ScriptGuard [41], a context-sensitive XSS sanitation tool capable of automatic context detection and appropriate sanitation routine selection. Note that these approaches primarily focus on preventing code scripting, implying that scriptless attacks, which do not use dynamic content, can potentially bypass such protection mechanisms.

Heiderich et al. published research on XSS vulnerabilities caused by SVG graphics bypassing modern HTML sanitizers [20] and on detecting DOM-based attacks in the context of browser malware and complex cross-context scripting attacks [19].

Martin and Lam [34] and Kieyzun et al. [29] introduced tools capable of automatically generating XSS and SQL injection attacks against web applications. XSSDS [28] is a system that determines if an attack is successful by comparing HTTP requests and responses. Recent papers have offered different approaches to discovering parameter injection [1] and parameter tampering vulnerabilities [5]. However, these types of tools are not yet available for automated discovery and creation of scriptless attacks, although we expect that similar concepts can be identified and applied to the development of consistent tools in the future.

### Conclusion and Outlook

In this paper, we introduced a class of attacks against web applications called scriptless attacks. The key characteristic of these attacks is that they do not rely on the execution of JavaScript (or any other language) code. Instead, they are based solely on standard browser features available in modern user agents and defined in the current HTML and CSS3 specification drafts. These attacks can be seen as a generalization of CSS-based history stealing [22, 32] and similar attack vectors [52]. We discussed several browser features useful for scriptless attacks, covering various ways in which an adversary can access information or establish a side channel. Furthermore, we presented several scriptless attacks against an exemplary web application and demonstrated how an adversary can successfully obtain sensitive information such as CSRF tokens or user inputs by abusing legitimate browser concepts. We also showed that an adversary can exfiltrate specific information and establish side channels, making these attacks feasible.

While the attacks discussed in this paper may not represent the entirety of methods to illegitimately retrieve sensitive user data, we believe that the attack components we discussed are of great importance to other attack vectors. A detailed analysis and further investigation of possible defense mechanisms will likely reveal more attack vectors. We hope that this paper spurs research on attacks against web applications that do not rely on the execution of JavaScript code.

As another contribution, we introduced a browser patch that enables a website to determine if it is being loaded in a detached view or pop-up window, showcasing a mitigation technique for several kinds of attacks. In our future work, we will explore more ways to deal with and prevent scriptless attacks.

### Acknowledgments

This work has been supported by the German Federal Ministry of Education and Research (BMBF grant 01BY1205A JSAgents).

### References

[1] M. Balduzzi, C. Gimenez, D. Balzarotti, and E. Kirda. Automated Discovery of Parameter Pollution Vulnerabilities in Web Applications. In Network and Distributed System Security Symposium (NDSS), 2011.

[2] D. Baron. :visited support allows queries into global history. https://bugzilla.mozilla.org/147777, 2002.

[3] A. Barth, C. Jackson, and J. C. Mitchell. Robust Defenses for Cross-Site Request Forgery. In ACM Conference on Computer and Communications Security (CCS), 2008.

[4] D. Bates, A. Barth, and C. Jackson. Regular expressions considered harmful in client-side XSS filters. In Proceedings of the 19th International Conference on World Wide Web, pages 91–100. ACM, 2010.

[5] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. Venkatakrishnan. NoTamper: Automatic Blackbox Detection of Parameter Tampering Opportunities in Web Applications. In ACM Conference on Computer and Communications Security (CCS), 2010.

[6] P. Bisht and V. Venkatakrishnan. XSS-GUARD: Precise Dynamic Prevention of Cross-Site Scripting Attacks. In Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA). Springer, 2008.

[7] A. Bortz and D. Boneh. Exposing Private Information by Timing Web Applications. In 16th International Conference on World Wide Web (WWW), 2007.

[8] B. Bos, T. Celik, I. Hickson, and H. Wium Lie. Generated content, automatic numbering, and lists. http://www.w3.org/TR/CSS21/generate.html, June 2011.

[9] Z. Braniecki. CSS allows to check history via :visited. https://bugzilla.mozilla.org/224954, 2003.

[10] D. Brumley and D. Boneh. Remote Timing Attacks are Practical. In USENIX Security Symposium, 2003.

[11] CERT Coordination Center. Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests. http://www.cert.org/advisories/CA-2000-02.html, 2000.

[12] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-Channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. In IEEE Symposium on Security and Privacy, 2010.

[13] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. Zozzle: Fast and precise in-browser JavaScript malware detection. In USENIX Security Symposium, 2011.

[14] J. Daggett. CSS fonts module level 3. http://www.w3.org/TR/css3-fonts/, Oct. 2011.

[15] E. W. Felten and M. A. Schneider. Timing Attacks on Web Privacy. In ACM Conference on Computer and Communications Security (CCS), 2000.

[16] M. Heiderich. Content exfiltration using scrollbar detection and media queries. http://html5sec.org/scrollbar/test, June 2012.

[17] M. Heiderich. Measurement-based content exfiltration using smart scrollbars. http://html5sec.org/webkit/test, June 2012.

[18] M. Heiderich. Scriptless SVG Keylogger. http://html5sec.org/keylogger, June 2012.

[19] M. Heiderich, T. Frosch, and T. Holz. IceShield: Detection and Mitigation of Malicious Websites with a Frozen DOM. In Recent Advances in Intrusion Detection (RAID), 2011.

[20] M. Heiderich, T. Frosch, M. Jensen, and T. Holz. Crouching Tiger – Hidden Payload: Security Risks of Scalable Vector Graphics. In ACM Conference on Computer and Communications Security (CCS), 2011.

[21] D. Huang and C. Jackson. Clickjacking Attacks Unresolved. https://docs.google.com/document/pub?id=1hVcxPeCidZrM5acFH9ZoTYzg1D0VjkG3BDW_oUdn5qc, June 2011.

[22] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protecting Browser State From Web Privacy Attacks. In 15th International Conference on World Wide Web (WWW), 2006.

[23] D. Jackson, D. Hyatt, C. Marrin, S. Galineau, and L. D. Baron. CSS animations. http://dev.w3.org/csswg/css3-animations/, Mar. 2012.

[24] A. Janc and L. Olejnik. Web Browser History Detection as a Real-World Privacy Threat. In European Symposium on Research in Computer Security (ESORICS), 2010.

[25] D. Jang, R. Jhala, S. Lerner, and H. Shacham. An Empirical Study of Privacy-violating Information Flows in JavaScript Web Applications. In ACM Conference on Computer and Communications Security (CCS), 2010.

[26] T. Jim, N. Swamy, and M. Hicks. Defeating Script Injection Attacks with Browser-enforced Embedded Policies. In 16th International Conference on World Wide Web (WWW). ACM, 2007.

[27] M. Johns. Code Injection Vulnerabilities in Web Applications – Exemplified at Cross-Site Scripting. PhD thesis, University of Passau, Passau, July 2009.

[28] M. Johns, B. Engelmann, and J. Posegga. XSSDS: Server-side Detection of Cross-site Scripting Attacks. In Annual Computer Security Applications Conference (ACSAC), 2008.

[29] A. Kieyzun, P. Guo, K. Jayaraman, and M. Ernst. Automatic Creation of SQL Injection and Cross-site Scripting Attacks. In 31st International Conference on Software Engineering. IEEE Computer Society, 2009.

[30] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-side Solution for Mitigating Cross-site Scripting Attacks. In ACM Symposium on Applied Computing (SAC), 2006.

[31] M. Louw and V. Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In IEEE Symposium on Security and Privacy, 2009.

[32] M. Jakobsson and S. Stamm. Invasive Browser Sniffing and Countermeasures. In 15th International Conference on World Wide Web (WWW), 2006.

[33] G. Maone. NoScript :: Firefox add-ons. https://addons.mozilla.org/de/firefox/addon/722/, July 2010.

[34] M. Martin and M. Lam. Automatic Generation of XSS and SQL Injection Attacks With Goal-directed Model Checking. In USENIX Security Symposium, 2008.

[35] Y. Nadji, P. Saxena, and D. Song. Document Structure Integrity: A Robust Basis for Cross-site Scripting Defense. In Network and Distributed System Security Symposium (NDSS), 2009.

[36] OWASP. Top Ten Project. https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project, Jan. 2012.

[37] T. Pietraszek and C. Berghe. Defending Against Injection Attacks Through Context-sensitive String Evaluation. In Recent Advances in Intrusion Detection (RAID), 2006.

[38] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds. In ACM Conference on Computer and Communications Security (CCS), 2009.

[39] J. Ruderman. CSS on a:visited can load an image and/or reveal if visitor been to a site. https://bugzilla.mozilla.org/57351, 2000.

[40] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting Frame Busting: a Study of Clickjacking Vulnerabilities on Popular Sites. In Web 2.0 Security and Privacy (W2SP) Workshop, July 2010.

[41] P. Saxena, D. Molnar, and B. Livshits. ScriptGuard: Preventing script injection attacks in legacy web applications with automatic sanitization. Technical report, Technical Report MSR-TR-2010-128, Microsoft Research, 2010.

[42] D. X. Song, D. Wagner, and X. Tian. Timing Analysis of Keystrokes and Timing Attacks on SSH. In USENIX Security Symposium, 2001.

[43] S. Stamm, B. Sterne, and G. Markham. Reining in the Web with Content Security Policy. In 19th International Conference on World Wide Web (WWW), 2010.

[44] M. Van Gundy and H. Chen. Noncespaces: Using Randomization to Enforce Information Flow Tracking and Thwart Cross-site Scripting Attacks. In Network and Distributed System Security Symposium (NDSS), 2009.

[45] E. Vela. CSS Attribute Reader Proof Of Concept. http://eaea.sirdarckcat.net/cssar/v2/, Nov. 2009.

[46] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Network and Distributed System Security Symposium (NDSS), 2007.

[47] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and C. Jackson. I Still Know What You Visited Last Summer: Leaking Browsing History via User Interaction and Side Channel Attacks. In IEEE Symposium on Security and Privacy, 2011.

[48] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter, R. Shin, and D. Song. A Systematic Analysis of XSS Sanitization in Web Application Frameworks. In European Symposium on Research in Computer Security (ESORICS), 2011.

[49] H. Wium Lie, T. Celik, D. Glazman, and A. van Kesteren. Media queries. http://www.w3.org/TR/css3-mediaqueries/, July 2010.

[50] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel. A Practical Attack to De-anonymize Social Network Users. In IEEE Symposium on Security and Privacy, 2010.

[51] P. Wurzinger, C. Platzer, C. Ludl, E. Kirda, and C. Kruegel. SWAP: Mitigating XSS Attacks Using a Reverse Proxy. In ICSE Workshop on Software Engineering for Secure Systems. IEEE Computer Society, 2009.

[52] M. Zalewski. Postcards from the post-XSS world. http://lcamtuf.coredump.cx/postxss/, 2011.