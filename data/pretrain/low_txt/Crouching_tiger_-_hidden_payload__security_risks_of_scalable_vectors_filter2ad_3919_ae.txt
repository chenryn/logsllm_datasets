### Analysis of Visual Aberrations and File Compression in SVG Purification

#### Visual Aberrations
Our analysis focused on identifying visual aberrations that, while numerically significant, are not easily discernible by human observers. Specifically, we manually analyzed 1,000 test cases where the absolute error was greater than zero. Our goal was to determine how often a human observer would notice these aberrations. It is important to note that this approach may not be universally valid, especially in contexts requiring high precision, such as medical applications. However, in the context of a website, a visual impact is only relevant if a user can actually perceive it.

During the manual inspection, we spent approximately 10 seconds comparing each pair of images, aided by a difference image to support our observations. The results indicated that only 46.3% of the erroneous samples were perceived as different from their original. Given that user experiences may vary, we have provided a website where all defective images, along with their originals and difference images, can be freely inspected [6].

#### File Compression
Several side effects were observed during the purification process and the evaluation of its results. One positive side effect was the compression of files due to the removal of elements that do not contribute to the visual appearance of the image. SVGPurifier achieved an average compression ratio of 2.6. In some cases, the file size increased slightly after purification, which was typically due to the addition of missing closing tags by SVGPurifier.

In our test set, 1.59% of the files contained one or more instances of the `<metadata>` element. In most of the 1,686 cases, this element was used to store a base64-encoded representation of Adobe Illustrator's proprietary AI file format within the SVG file. SVGPurifier removed these elements without any visual impact, resulting in a significant reduction in file size.

### Related Work

The Cross-Site Scripting (XSS) problem, being one of the most common issues in web security, has received considerable attention over the past decade [11, 12, 20, 27–29, 31, 36, 39, 40, 42]. Various types of attacks have been studied [12, 28, 31], and numerous approaches to prevent XSS attacks have been proposed, including information flow and taint tracking [20, 36, 39, 40], and client- or server-side analysis [11, 29, 40]. John’s dissertation [27] provides a detailed exploration of attack and defense techniques, while Phung et al. [38] presented specific defenses against client-side and JavaScript-based attacks. However, none of these works addressed the threat of malicious image files in the JavaScript execution context. This paper introduces new innovative attacks, highlighting that even previously unsuspected `<img>` tags can introduce security vulnerabilities due to the tight integration of SVG images into modern browsers.

One exception is the work by Barth et al. [9], who discussed attacks and mitigations related to faulty and jaunty content sniffing. Deprecated browsers like Opera 9 and Internet Explorer 6 allowed the execution of JavaScript by combining image tags with JavaScript URIs, but this behavior is no longer supported by modern browsers. In contrast, the risks of XSS and related attacks induced by SVG images have not yet been thoroughly investigated.

SVG as a subject itself has rarely surfaced in the scientific security community. Damiani et al. [18] dealt with access control requirements for parts of SVG files, suggesting that sensitive personal information should be rendered differently for different viewers. However, they did not address the threat of misusing SVG files as attack vectors. Similarly, Mohammed et al. [33–35] investigated the use of SVG images in medical contexts, focusing on security guarantees for sensitive information, but did not resolve the offensive use of SVG files.

Research on code embedded in document formats is closely related to our findings. For example, Backes et al. [8] showed that maliciously prepared PostScript files can be used as attack vectors, and Checkoway et al. [13] discussed malicious TEX files that can lead to arbitrary code execution and data exfiltration. Mason et al. [32] demonstrated that even pure text files might contain shellcode. We continue this line of inquiry and present attacks related to SVG images.

An orthogonal area of research involves alternative browser designs [10, 15, 19, 41], which explore ways to improve the security of state-of-the-art browsers, such as creating separate protection domains. The results presented in this paper should be considered when designing more secure browsers, particularly in light of the potential for `<img>` tags to introduce suspicious content.

### Conclusion

In this paper, we provide an overview of Scalable Vector Graphics (SVG) and their security implications for the World Wide Web, based on the new HTML5 specification drafts. We demonstrate that this image format, which has existed for over a decade, significantly changes the browser and web security landscape. We introduce several novel attacks against modern browsers and show that SVG images embedded via `<img>` tags and CSS can execute arbitrary JavaScript code and similar attacks. The discussed XSS filter bypasses, which work against several browsers, can have a high impact in targeted attack scenarios.

To mitigate these attacks, we propose SVGPurifier as a practical solution capable of removing potentially malicious code from SVG files. We have empirically shown that the software is usable in real-world scenarios, such as purifying the SVG files stored by Wikipedia. We are in discussions with the Wikipedia team, who may adopt SVGPurifier into their infrastructure. Additionally, many of the identified attacks have already been fixed by major browser vendors.

### References

[1] National vulnerability database (NVD) (CVE-2007-1765). http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2007-1765, Mar. 2007.
[2] National vulnerability database (NVD) (CVE-2008-3702). http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2008-3702, Aug. 2008.
[3] Fonts – SVG 1.1 (Second Edition). http://www.w3.org/TR/SVG/fonts.html, June 2010.
[4] National vulnerability database (NVD) (CVE-2010-3113). http://web.nvd.nist.gov/view/vuln/detail?vulnId=cve-2010-3113, Aug. 2010.
[5] Scalable vector graphics (SVG) 1.1 (Second edition). http://www.w3.org/TR/SVG11/, June 2010.
[6] SVGPurifier: inaccurately converted images. http://svgpurifier.nds.rub.de/, May 2011.
[7] Adobe Systems Inc. Illustrator 10 XML Extensions Guide, Sept. 2001.
[8] M. Backes, M. Durmuth, and D. Unruh. Information Flow in the Peer-Reviewing Process. In IEEE Symposium on Security and Privacy, 2007.
[9] A. Barth, J. Caballero, and D. Song. Secure Content Sniffing for Web Browsers, or How to Stop Papers from Reviewing Themselves. In IEEE Symposium on Security and Privacy, 2009.
[10] A. Barth, C. Jackson, C. Reis, and Google Chrome Team. The Security Architecture of the Chromium Browser, 2008. http://seclab.stanford.edu/websec/chromium/.
[11] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: Precise Dynamic Prevention of Cross-Site Scripting Attacks. In Conference on Detection of Intrusions and Malware & Vulnerability Assessment, 2008.
[12] H. Bojinov, E. Bursztein, and D. Boneh. XCS: Cross Channel Scripting and its Impact on Web Applications. In ACM Conference on Computer and Communications Security (CCS), 2009.
[13] S. Checkoway, H. Shacham, and E. Rescorla. Are Text-only Data Formats Safe? or, Use This LaTeX Class File to Pwn Your Computer. In USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET), 2010.
[14] J. Clark. XSL transformations (XSLT). http://www.w3.org/TR/xslt, Nov. 1999.
[15] R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen. A Safety-Oriented Platform for Web Applications. In IEEE Symposium on Security and Privacy, 2006.
[16] A. Dabirsiaghi. The OWASP AntiSamy project. http://code.google.com/p/owaspantisamy/, Apr. 2011.
[17] E. Dahlström. SVG and HTML. http://dev.w3.org/SVG/proposals/svg-html/svg-html-proposal.html, July 2008.
[18] E. Damiani, S. De Capitani di Vimercati, E. Fernandez-Medina, and P. Samarati. An access control system for SVG documents. King’s College, University of Cambridge, UK, pages 29–31, 2002.
[19] C. Grier, S. Tang, and S. T. King. Secure Web Browsing with the OP Web Browser. In IEEE Symposium on Security and Privacy, 2008.
[20] M. V. Gundy and H. Chen. Noncespaces: Using Randomization to Enforce Information Flow Tracking and Thwart Cross-Site Scripting Attacks. In Symposium on Network and Distributed System Security (NDSS), 2009.
[21] U. Harnhammar. kses - PHP HTML/XHTML filter. http://sourceforge.net/projects/kses/, Mar. 2010.
[22] M. Heiderich. Opera SVG AII testcase. http://heideri.ch/opera/, 2011.
[23] M. Heiderich. SVG chameleon via XSLT - HTML5 Security Cheatsheet. http://html5sec.org/#125, Mar. 2011.
[24] M. Heiderich and T. Frosch. SVGpurifier smoketest. http://heideri.ch/svgpurifier/SVGPurifier/, Apr. 2011.
[25] I. Hickson. HTML standard — the map element. http://whatwg.org/specs/web-apps/current-work/multipage/the-map-element.html#svg-0, Apr. 2011.
[26] L. Huang, Z. Weinberg, C. Evans, and C. Jackson. Protecting browsers from Cross-Origin CSS attacks. In ACM Conference on Computer and Communications Security (CCS) 2010), 2010.
[27] M. Johns. Code Injection Vulnerabilities in Web Applications - Exemplified at Cross-site Scripting. PhD thesis, University of Passau, Passau, July 2009.
[28] C. Karlof, U. Shankar, J. D. Tygar, and D. Wagner. Dynamic Pharming Attacks and Locked Same-Origin Policies for Web Browsers. In ACM Conference on Computer and Communications Security (CCS), 2007.
[29] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A Client-Side Solution for Mitigating Cross-Site Scripting Attacks. In ACM Symposium On Applied Computing (SAC), 2006.
[30] E. Lawrence. Same origin policy part 1: No peeking. http://blogs.msdn.com/b/ieinternals/archive/2009/08/28/explaining-same-origin-policy-part-1-deny-read.aspx, Aug. 2009.
[31] M. Martin and M. S. Lam. Automatic Generation of XSS and SQL Injection Attacks with Goal-directed Model Checking. In USENIX Security Symposium, 2008.
[32] J. Mason, S. Small, F. Monrose, and G. MacManus. English Shellcode. In ACM Conference on Computer and Communications Security (CCS), 2009.
[33] S. Mohammed, L. Chamarette, J. Fiaidhi, and S. Osborn. A Safe RSS Approach for Securely Sharing Mobile SVG Biomedical Images for Web 2.0. In 12th IEEE International Conference on Computational Science and Engineering, 2009.
[34] S. Mohammed, J. Fiaidhi, H. Ghenniwa, and M. Hahn. Developing a Secure Web Service Architecture for SVG Image Delivery. Journal of Computer Science, 2(2):171–179, 2006.
[35] S. M. A. Mohammed and J. A. W. Fiadhi. Developing Secure Transcoding Intermediary for SVG Medical Images within Peer-to-Peer Ubiquitous Environment. In CNSR ’05 Proceedings of the 3rd Annual Communication Networks and Services Research Conference, 2005.
[36] Y. Nadji, P. Saxena, and D. Song. Document Structure Integrity: A Robust Basis for Cross-site Scripting Defense. In Symposium on Network and Distributed System Security (NDSS), 2009.
[37] S. Patnaik. htmLawed. http://www.bioinformatics.org/phplabware/internal_utilities/htmLawed/.
[38] P. H. Phung, D. Sands, and A. Chudnov. Lightweight Self-Protecting JavaScript. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2009.
[39] T. Pietraszek and C. V. Berghe. Defending Against Injection Attacks Through Context-Sensitive String Evaluation. In Symposium on Recent Advances in Intrusion Detection (RAID), 2005.
[40] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Symposium on Network and Distributed System Security (NDSS), 2007.
[41] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The Multi-Principal OS Construction of the Gazelle Web Browser. In USENIX Security Symposium, 2009.
[42] G. Wassermann and Z. Su. Static Detection of Cross-Site Scripting Vulnerabilities. In International Conference on Software Engineering (ICSE), 2008.
[43] E. Z. Yang. HTML Purifier. http://htmlpurifier.org/, Mar. 2011.