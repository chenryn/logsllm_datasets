### SaTC: Bridging the Gap Between Front-End and Back-End in IoT Security

SaTC (Security Analysis Tool for Connected Devices) focuses on building a robust relationship between the front-end and back-end components of IoT devices. While we leave the solutions for dealing with obfuscation techniques to future work, we conducted an empirical evaluation to measure the applicability of SaTC concerning encryption and obfuscation.

#### Empirical Evaluation

To evaluate SaTC's effectiveness, we collected 186 widely used home Wi-Fi routers from seven leading vendors. Our goal was to inspect these devices for encryption and obfuscation. The results were as follows:

- **Encryption**: Only four out of 186 devices were protected with encryption, all of which were D-Link routers.
- **Obfuscation**: Only one device, specifically the NetGear R6400 v2, used obfuscation to protect parts of the front-end JavaScript code.

After manually decoding the four encrypted samples, SaTC handled them as effectively as it did with other devices. For unpacking, we used off-the-shelf tools like binwalk, which successfully unpacked all devices except the Tenda AC11 due to its unsupported filesystem.

For the NetGear R6400 v2, SaTC failed to extract any keywords from the obfuscated JavaScript files. However, the HTML files were not obfuscated, allowing SaTC to extract useful keywords and identify two command injection vulnerabilities.

Overall, encryption and obfuscation techniques are not widely used in real-world IoT devices, and SaTC remains effective in discovering vulnerabilities across a large number of firmware samples. We plan to integrate existing deobfuscation approaches [4, 19, 29] to further enhance SaTC's capabilities.

### Related Work

We focus on the most relevant works in dynamic and static methods of vulnerability discovery for firmware, and taint tracking.

#### Dynamic Analysis

- **Fuzzing Technologies**: Many studies [22, 48, 54, 55] use fuzzing to detect vulnerabilities in IoT devices. SR-Fuzzer [52] is an automated fuzzing framework for testing physical SOHO routers, requiring a large number of web requests to model user-input semantics. FIRMADYNE [7] is a state-of-the-art firmware emulation framework, but it has low network reachability and web service availability. FIRMAE [23] improves the success rate using heuristics but may struggle with new devices and configurations. IoTFuzzer [8] targets memory corruption via official apps but faces challenges in code coverage and attack surface. FIRM-AFL [53] is a greybox fuzzer for IoT devices but faces difficulties in faithful emulation across various CPU architectures.

#### Static Analysis

- **Static Techniques**: KARONTE [34] uses multi-binary taint analysis but focuses only on back-end binaries, leading to false negatives. Firmalice [37] detects authentication bypass vulnerabilities using symbolic execution and program slicing but suffers from constraint solver overload. FIE [17] analyzes open-source MSP430 firmware programs but may produce false positives or negatives due to imprecision.

#### Taint Tracking

- **Taint Analysis**: DTaint [9] tracks data generated by `recv` and similar functions but ignores front-end file semantics. CryptoREX [51] identifies crypto misuse in IoT devices. TaintInduce [11] enhances taint propagation accuracy through learning platform-specific rules. Greyone [18] proposes a fuzzing-driven taint inference solution, FTI, to improve taint attribute detection. Neutaint [36] uses neural program embeddings for information flow tracking but faces challenges with accumulated errors and overhead.

### Conclusions

SaTC is a novel approach for detecting security vulnerabilities in embedded systems. By leveraging the commonality of variable names between front-end files and back-end functions, SaTC accurately identifies input entry points in back-end binaries. It then uses a customized taint engine to efficiently detect dangerous uses of untrusted input. SaTC has discovered 33 zero-day software bugs from 39 firmware samples, with 30 of them assigned CVE/CNVD/PSV IDs. Our evaluation shows that SaTC outperforms state-of-the-art tools in discovering bugs in firmware samples.

### Acknowledgements

We thank Dr. Kevin Butler, our shepherd, and the anonymous reviewers for their valuable feedback. We also appreciate the contributions of Yue Liu, Yuwei Liu, Minghang Shen, Huikai Xu, and Chutong Liu. This research is supported by the National Natural Science Foundation of China, Beijing Nova Program of Science and Technology, BNRist Network and Software Security Research Program, National Key Research and Development Program, and the Science and Technology Commission of Shanghai Municipality Research Program.

### References

[1] Eirini Anthi, et al. A supervised intrusion detection system for smart home IoT devices. IEEE Internet of Things Journal, 6(5):9042–9053, 2019.
...
[55] Lipeng Zhu, et al. FIoT: Detecting the Memory Corruption in Lightweight IoT Device Firmware. In 2019 18th IEEE International Conference On Trust, Security And Privacy In Computing And Communications/13th IEEE International Conference On Big Data Science And Engineering, pages 248–255. IEEE, 2019.