---
author: Nader Dabit
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 7431
date: '2017-05-19 10:28:00'
editorchoice: false
excerpt: 我们正处于一个转折点。除了少数特定案例，使用原生框架和团队来构建及维护移动应用已不再具有意义。
fromurl: https://hackernoon.com/the-cost-of-native-mobile-app-development-is-too-damn-high-4d258025033a
id: 8521
islctt: true
largepic: /data/attachment/album/201705/18/153154kw44b4yuu4wjzsco.jpg
permalink: /article-8521-1.html
pic: /data/attachment/album/201705/18/153154kw44b4yuu4wjzsco.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我们正处于一个转折点。除了少数特定案例，使用原生框架和团队来构建及维护移动应用已不再具有意义。
tags:
- JavaScript
- 移动应用
thumb: false
title: 原生移动应用的开发成本过高！
titlepic: true
translator: fuowang
updated: '2017-05-19 10:28:00'
---

![](/data/attachment/album/201705/18/153154kw44b4yuu4wjzsco.jpg)

> 一个有价值的命题

我们正处于一个转折点。除了少数特定案例，使用原生框架和团队来构建及维护移动应用已不再具有意义。

![](/data/attachment/album/201705/19/112427dv88de7dmmvvijme.jpg)
*在美国雇佣 iOS、Android 和 JavaScript 开发人员的平均费用*

在过去的几年中，原生移动应用开发的成本急剧上升且难以控制。对于没有大量资金的新创业者来说，创建原生应用、MVP 设计架构和原型变得越来越困难。现有公司需要争夺人才，以迭代现有应用或构建新应用。为了留住最佳人才，他们与全球各地的公司竞争，提供高额薪资和其他福利。

![](/data/attachment/album/201705/19/112428c22s24203yc0szmk.png)
*2015 年初，原生方式和混合方式开发 MVP 设计架构的成本对比*

### 这意味着什么？

如果你的公司规模较大或拥有充足的资金，过去认为只需投入足够的资金就能解决原生应用开发的问题。然而，事实并非如此。

即使是 Facebook 这样资源丰富的公司也遇到了原生应用开发中的难题。他们的移动应用庞大而复杂，[编译时间竟然长达 15 分钟](https://devchat.tv/react-native-radio/08-bridging-react-native-components-with-tadeu-zagallo)。这意味着即使是最小的用户界面改动，测试也需要几个小时甚至几天的时间。此外，每次更改都需要在两个完全不同的环境（iOS 和 Android）中进行测试，开发团队需要同时掌握两种语言和框架，这使得问题更加复杂。

Facebook 对此的解决方案是 [React Native](https://facebook.github.io/react-native/)。

### 能否仅依赖 Web 应用？

有些人认为移动应用的时代已经结束。尽管我非常尊重 [Eric Elliott](https://medium.com/u/c359511de780) 及其工作，但让我们通过一些近期数据来看看相反的观点：

![](/data/attachment/album/201705/19/112429lin9q7dmnd029z1g.png)
*人们在移动应用上花费的时间（2016年4月）*

> 人们使用应用的时间占手机使用总时长的 90%

目前，全球有 25 亿人在使用移动设备。这一数字预计很快将达到 50 亿。放弃 45 亿潜在用户显然是不明智的。

传统问题是原生移动应用的开发成本对大多数公司来说太高了。然而，面向 Web 的开发成本也在增加。[在美国，JavaScript 开发者的平均工资已达 $97,000.00](http://www.indeed.com/salary?q1=javascript+developer&l1=united+states&tm=1)。

随着复杂性的增加以及对高质量 Web 开发的需求激增，雇佣 JavaScript 开发者的成本几乎与原生应用开发者相当。因此，Web 开发更便宜的说法已经站不住脚。

### 混合应用如何？

混合应用将 HTML5 应用嵌入到原生容器中，并提供访问原生平台特性的权限。Cordova 和 PhoneGap 是典型的例子。

如果你的目标是构建 MVP 设计架构、产品原型，或者不担心用户体验的模拟程度，混合应用是一个不错的选择。但请注意，如果最终需要将其转换为原生应用，整个项目可能需要重写。

在这个领域有许多创新，我个人最喜欢的是 [Ionic Framework](https://ionicframework.com/)。混合开发正在不断改进，但尚未达到原生开发的流畅度。

许多公司，包括初创企业和大中型企业，发现混合应用在质量上未能满足客户期望，显得粗糙且不够专业。

有说法称应用商店排名前 100 的应用都不是混合应用。虽然我没有具体证据支持这一点，但如果其中只有 0% 到 5% 是混合应用，我也不会感到惊讶。

> “我们在 HTML5 上押注过多是我们最大的错误。” — 马克·扎克伯格

### 解决方案

如果你关注移动开发领域的最新动态，你一定听说过像 [NativeScript](https://www.nativescript.org/) 和 [React Native](https://facebook.github.io/react-native/) 这样的项目。

通过这些项目，可以使用由 JavaScript 编写的 UI 组件来构建高质量的原生移动应用，就像传统的 iOS 和 Android 应用一样。

无论是单个工程师还是专业的工程师团队，都可以通过 React Native 使用 [现有代码库](https://github.com/necolas/react-native-web) 或 [底层技术](https://facebook.github.io/react/) 进行跨平台移动应用开发、[原生桌面开发](https://github.com/ptmt/react-native-macos)，甚至 Web 开发。你可以将应用发布到 App Store、Play Store 和 Web 上，从而在保证原生性能和质量的同时，大幅降低成本。

使用 React Native 进行跨平台开发时，重复使用 80% 到 90% 的代码是非常常见的。

如果你的团队采用 React Native，不仅可以消除团队之间的分歧，还可以确保 UI 和 API 设计的一致性，并加快开发速度。

React Native 不需要编译，在保存时应用可以实时更新，从而进一步提高开发效率。

React Native 还可以使用 [Code Push](http://microsoft.github.io/code-push/) 和 [AppHub](https://apphub.io/) 等工具远程更新 JavaScript 代码。这意味着你可以向用户实时推送更新、新功能，快速修复 bug，绕过打包、发布等繁琐过程，避免 App Store 和 Google Play Store 的审核流程，通常需要 2 到 7 天的时间。

如果该领域的创新能够持续，未来你甚至可以为 [Apple Watch](https://github.com/elliottsj/apple-watch-uikit)、[Apple TV](https://github.com/douglowder/react-native-appletv) 和 [Tizen](https://www.tizen.org/blogs/srsaul/2016/samsung-committed-bringing-react-native-tizen) 等平台开发应用。

---