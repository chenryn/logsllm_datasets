### Maximum Compatibility
NORAX is designed to be the final step in a series of binary hardening techniques. This ensures that NORAX maintains all data references established by previous steps, if any.

### Current Limitations

#### Unforeseeable Code
NORAX relies on static binary analysis and rewriting. The current implementation cannot handle dynamically generated code (e.g., JIT compilation) or self-modifying code. Additionally, NORAX cannot patch customized ELF files containing unrecognized sections, which may include both code and data. For example, the `.ARM.exidx` and `.ARM.extab` sections in the `dex2oat` program are not recognized by the current version of NORAX. However, these limitations are common to most static binary rewriting tools. It is important to note that modules converted by NORAX can coexist seamlessly with such programs without any loss of functionality.

**Note:** `dex2oat` is an optimization tool that converts applications' bytecode to native code.

#### Indirect Memory Disclosure
NORAX prevents attackers from directly reading the code to search for gadgets loaded in memory. However, code pointers in data areas such as the stack and heap remain vulnerable to indirect memory disclosure attacks. These attacks can lead to whole function reuse or call-preceded gadget reuse [48], [49]. This limitation is shared by all related solutions using binary rewriting [11], [13], [14], [47]. Furthermore, a recent study [50] indicates that even the most advanced source-code-based techniques [8], [9] are susceptible to such attacks. We argue that defending against indirect memory disclosure is a separate research topic and is beyond the scope of this work.

### Conclusion
We present NORAX, a comprehensive and practical system that provides execute-only memory protection for COTS binaries on AArch64 platforms. NORAX demonstrates that, while identifying data from code in COTS binaries is generally undecidable, it is feasible within the context of AArch64 platforms. To showcase its practicability, we implemented NORAX on commodity mobile phones, including the Samsung Galaxy S6 and LG Nexus 5X, and protected their stock system binaries from direct memory disclosure attacks. Our evaluation shows that NORAX enforces strong protection while incurring minimal overhead—an average slowdown of 1.18% and a memory footprint increase of 2.21%. This suggests that NORAX is suitable for real-world adoption.

### Acknowledgment
We thank the anonymous reviewers for their insightful comments. We also extend our gratitude to Michalis Polychronakis, Michael Grace, Jia Ma, and Xun Chen for their valuable discussions during the development of NORAX. This project was supported by the Office of Naval Research (Grant#: N00014-17-1-2227) and the National Science Foundation (Grant#: CNS-1421824). Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References
[1] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization,” in Security and Privacy (SP), 2013 IEEE Symposium on. IEEE, 2013, pp. 574–588.
[2] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazières, and D. Boneh, “Hacking blind,” in 2014 IEEE Symposium on Security and Privacy. IEEE, 2014, pp. 227–242.
[3] L. V. Davi, A. Dmitrienko, S. Nürnberger, and A.-R. Sadeghi, “Gadge me if you can: secure and efficient ad-hoc instruction-level randomization for x86 and ARM,” in Proceedings of the 8th ACM SIGSAC symposium on Information, computer and communications security. ACM, 2013, pp. 299–310.
[4] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the gadgets: Hindering return-oriented programming using in-place code randomization,” in 2012 IEEE Symposium on Security and Privacy. IEEE, 2012, pp. 601–615.
[5] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “ILR: Where’d my gadgets go?” in 2012 IEEE Symposium on Security and Privacy. IEEE, 2012, pp. 571–585.
[6] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software.” in ACSAC, vol. 6, 2006, pp. 339–348.
[7] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code,” in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 157–168.
[8] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz, “Readactor: Practical code randomization resilient to memory disclosure,” in 2015 IEEE Symposium on Security and Privacy. IEEE, 2015, pp. 763–780.
[9] S. J. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi, A.-R. Sadeghi, T. Holz, B. De Sutter, and M. Franz, “It’s a trap: Table randomization and protection against function-reuse attacks,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 243–255.
[10] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.-R. Sadeghi, “Leakage-resilient layout randomization for mobile devices,” in Proceedings of the 2016 Network and Distributed System Security (NDSS) Symposium, 2016.
[11] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny, “You can run but you can’t read: Preventing disclosure exploits in executable code,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 1342–1353.
[12] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell, and M. Horowitz, “Architectural support for copy and tamper resistant software,” ACM SIGPLAN Notices, vol. 35, no. 11, pp. 168–177, 2000.
[13] A. Tang, S. Sethumadhavan, and S. Stolfo, “Heisenbyte: Thwarting memory disclosure attacks using destructive code reads,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 256–267.
[14] J. Werner, G. Baltas, R. Dallara, N. Otterness, K. Z. Snow, F. Monrose, and M. Polychronakis, “No-execute-after-read: Preventing code disclosure in commodity software,” in Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security. ACM, 2016, pp. 35–46.
[15] K. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Polychronakis, “Return to the zombie gadgets: Undermining destructive code reads via code inference attacks,” in IEEE Symposium on Security and Privacy, 2016.
[16] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee, “From zygote to morula: Fortifying weakened ASLR on Android,” in 2014 IEEE Symposium on Security and Privacy. IEEE, 2014, pp. 424–439.
[17] “EL0 Execute-Only Memory,” https://armv8-ref.codingbelief.com/en/chapter_d4/d44_1_memory_access_control.html.
[18] “Android executables mandatorily need to be PIE,” https://source.android.com/security/enhancements/enhancements50.html.
[19] R. Wartell, Y. Zhou, K. W. Hamlen, M. Kantarcioglu, and B. Thuraisingham, “Differentiating code from data in x86 binaries,” in Joint European Conference on Machine Learning and Knowledge Discovery in Databases. Springer, 2011, pp. 522–536.
[20] “Apple warns developers when binaries are not compiled as position-independent,” https://developer.apple.com/library/content/qa/qa1788/index.html.
[21] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos, “An in-depth analysis of disassembly on full-scale x86/x64 binaries.”
[22] C. Cifuentes and M. Van Emmerik, “Recovery of jump table case statements from binary code,” in IEEE International Workshop on Program Comprehension, 1999.
[45] Y. Chen, Z. Wang, D. Whalley, and L. Lu, “Remix: On-demand live randomization,” in Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy. ACM, 2016, pp. 50–61.
[46] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi, “Timely rerandomization for mitigating memory disclosures,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 268–279.
[47] J. Gionta, W. Enck, and P. Ning, “HIDEM: Protecting the contents of userspace memory in the face of disclosure vulnerabilities,” in Proceedings of the 5th ACM Conference on Data and Application Security and Privacy. ACM, 2015, pp. 325–336.
[48] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen, M. Qunaibit, and A.-R. Sadeghi, “Losing control: On the effectiveness of control-flow integrity under stack attacks,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 952–963.
[49] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz, “Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications,” in 2015 IEEE Symposium on Security and Privacy. IEEE, 2015, pp. 745–762.
[50] R. Rudd, R. Skowyra, D. Bigelow, V. Dedhia, T. Hobson, C. L. Stephen Crane, P. Larsen, L. Davi, M. Franz, A.-R. Sadeghi, and H. Okhravi, “Address-Oblivious Code Reuse: On the Effectiveness of Leakage Resilient Diversity,” in Proceedings of the Network and Distributed System Security Symposium (NDSS’17), Feb 2017.
[23] R. Qiao and R. Sekar, “Function interface analysis: A principled approach for function recognition in COTS binaries,” in The 47th IEEE/IFIP International Conference on Dependable Systems and Networks, 2017.
[24] “Exception syndrome register (ESR) interpretation,” http://infocenter.arm.com/help/topic/com.arm.doc.ddi0500e/CIHFICFI.html.
[25] “Android compatibility test suite,” https://source.android.com/compatibility/cts/index.html.
[26] “DWARF standards,” http://www.dwarfstd.org.
[27] D. Niemi, “Unixbench 4.1.0.”
[28] L. Szekeres, M. Payer, T. Wei, and D. Song, “SOK: Eternal war in memory,” in Security and Privacy (SP), 2013 IEEE Symposium on. IEEE, 2013, pp. 48–62.
[29] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-Flow Integrity,” in Proceedings of the 12th ACM Conference on Computer and Communications Security. ACM, 2005, pp. 340–353.
[30] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity in GCC & LLVM,” in 23rd USENIX Security Symposium (USENIX Security 14), 2014, pp. 941–955.
[31] B. Niu and G. Tan, “RockJIT: Securing just-in-time compilation using modular control-flow integrity,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 1317–1328.
[32] ——, “Per-input control-flow integrity,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 914–926.
[33] A. J. Mashtizadeh, A. Bittau, D. Boneh, and D. Mazières, “CCFI: Cryptographically enforced control flow integrity,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 941–951.
[34] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz, “Opaque control-flow integrity.” in NDSS, 2015.
[35] P. Team, “grsecurity: RAP is here,” 2016.
[36] M. Zhang and R. Sekar, “Control flow integrity for COTS binaries,” in Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), 2013, pp. 337–352.
[37] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical Control Flow Integrity and Randomization for Binary Executables,” in Proceedings of the 2013 IEEE Symposium on Security and Privacy, ser. SP ’13. Washington, DC, USA: IEEE Computer Society, 2013, pp. 559–573.
[38] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of control: Overcoming control-flow integrity,” in 2014 IEEE Symposium on Security and Privacy. IEEE, 2014, pp. 575–589.
[39] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection,” in 23rd USENIX Security Symposium (USENIX Security 14), 2014, pp. 401–416.
[40] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Control-flow bending: On the effectiveness of control-flow integrity,” in 24th USENIX Security Symposium (USENIX Security 15), 2015, pp. 161–176.
[41] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi, and S. Sidiroglou-Douskos, “Control jujutsu: On the weaknesses of fine-grained control flow integrity,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 901–913.
[42] P. Team, “PaX Address Space Layout Randomization (ASLR),” 2003.
[43] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Efficient techniques for comprehensive protection from memory error exploits.” in Usenix Security, 2005.
[44] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose, “Isomeron: Code randomization resilient to (just-in-time) return-oriented programming.” in NDSS, 2015.