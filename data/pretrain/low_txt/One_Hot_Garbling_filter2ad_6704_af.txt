### Inverse Gate Optimization

To efficiently compute \((a \cdot \alpha)^{-1} \cdot \alpha = a^{-1}\), we have developed an inverse gate. Due to space constraints, a detailed formalization of this module is provided in Appendix B.

### S-Boxes

The AES S-Box, which is the only non-linear component of the AES block cipher, performs a single inversion in \(GF(2^8)\). All other parts of the S-Box are linear. The state-of-the-art Boolean circuit S-Box uses 32 AND gates [BP10]. With the half-gates technique, this implementation consumes 64 ciphertexts.

Our full inverse gate consumes 58 ciphertexts: 22 to compute \(a \cdot \alpha\), 22 to compute the inverse, and 14 to handle the case where \(a = 0\). This reduces communication by approximately 10%.

### Bitwise Outer Product

We used our implementation to compute the bitwise outer product of two 128-bit vectors. We instantiated our approach with various "chunking factors" \(k\) (see Section 7.2). Increasing \(k\) decreases communication but increases computation due to the exponential scaling of our one-hot gate. The standard method computes outer products by simply ANDing pairs of values. At \(k = 6\), our approach improves communication by 6.2× and time by 4.1×.

### General Outer Products

If the chosen chunk size \(k\) is logarithmic in the size of the input, the parties can compute \(a \otimes b\) in polynomial time. In terms of communication, the parties use \(O(nm/k)\) garbled rows, improving over the standard method by a factor of \(k\). Formally, we improve outer product communication by a logarithmic factor. In practice, we choose constants \(k\) that yield good performance.

Figure 7 shows the practical efficiency obtained when implementing general outer products with different values of \(k\). Our approach significantly improves outer products over prior state-of-the-art methods.

### Binary Matrix Multiplication

It is well known that outer products can be used to efficiently multiply matrices. We implemented this approach, and for a chunking factor \(k = 6\), our method improves 128×128 square matrix multiplication by 6.2× in communication and 5× in time.

### Integer Multiplication

Consider bit vectors \(a, b \in \{0, 1\}^n\) that each represent \(n\)-bit numbers. The outer product \(a \otimes b\) can be used to help calculate the product \(a \cdot b\). See Appendix B for further discussion.

We implemented 32-bit integer multiplication using our technique and the standard method (inspired by [WMK16]). The best performance was achieved with a chunking factor \(k = 6\).

### S-Box Implementation

We implemented the [BP10] S-Box and our one-hot version:

| Method | Communication (Bytes) | Time (μs) |
|--------|-----------------------|-----------|
| Standard | 929 | 105.8 |
| Ours | 1024 | 103.6 |

Improvement:
- Communication: 1.10×
- Time: 0.98×

On a WAN, our implementation is slightly slower than the standard S-Box, but this can likely be improved through low-level code optimization. It may be possible to further apply our technique to block ciphers by co-designing with our new cost structure in mind. Such fine-grained approaches are left for future work.

### Modular Reduction

Let \(x \mod y\) denote a function that computes the remainder of \(x\) divided by \(y\). Suppose the parties hold a sharing \(\langle a \rangle\) and wish to compute \(\langle a \mod \ell \rangle\), where \(\ell\) is a public constant. This computation is useful, for example, in arithmetic fields like \(\mathbb{Z}_p\).

The Boolean circuit that computes \((\cdot) \mod \ell\) is an expensive quadratic construction. One-hot gates can improve the cost. Our module first subtracts a random mask \(\alpha\) from \(a\) and then reveals \(a - \alpha\) to \(E\). It splits \(a\) into small \(k\)-bit chunks and, for each chunk, efficiently computes \((\cdot) \mod \ell\) using a one-hot gate. The reduced chunks can then be recombined, and the mask stripped off using addition mod \(\ell\).

For our experiment, we implemented modular reduction for 32-bit numbers using the prime modulus \(p = 65521\) (the largest 16-bit prime). Our standard implementation conditionally subtracts \(p \cdot 2^k\) for \(k \in [16]\), requiring 16 conditional subtractions. Our optimized version uses a chunking factor \(k = 8\), requiring only 3 additions and 3 conditional subtractions, substantially improving performance:

| Method | Communication (KB) | Time (ms) |
|--------|---------------------|-----------|
| Standard | 10.5 | 1.08 |
| Ours | 35.1 | 3.75 |

Improvement:
- Communication: 3.3×
- Time: 3.5×

### Exponentiation

Suppose the parties hold a sharing \(\langle a \rangle\) and wish to compute \(\langle \ell^a \rangle\), where \(\ell\) is a publicly agreed constant. For special cases of \(\ell\) (e.g., \(\ell = 2\)), there are fast circuits that compute \(\langle \ell^a \rangle\). However, for arbitrary \(\ell\), repeated multiplication inside GC is expensive. One-hot gates can reduce the number of needed multiplications.

Our module first subtracts a uniform additive mask \(\alpha\) from \(a\) and then reveals \(a - \alpha\) to \(E\). It splits \(\langle a - \alpha \rangle\) into small \(k\)-bit chunks and, for each chunk \(c\), computes \(\langle \ell^c \rangle\) using a one-hot gate. These intermediate values are combined, and the mask is stripped off using multiplication. We use our improved multiplication technique (Section 7.4) to further enhance the module.

We implemented exponents for 32-bit numbers using a standard technique (which consumes 31 standard multiplications) and our technique (with chunking factor \(k = 8\), which consumes only 4 improved multiplications):

| Method | Communication (KB) | Time (ms) |
|--------|---------------------|-----------|
| Standard | 87 | 10.6 |
| Ours | 1024 | 101 |

Improvement:
- Communication: 11.8×
- Time: 9.52×

### Acknowledgments

This work was supported in part by NSF award #1909769, a Facebook research award, a Cisco research award, and Georgia Tech’s IISP cybersecurity seed funding (CSF) award.

### References

- [AAL+] David Archer, Victor Arribas Abril, Steve Lu, Pieter Maene, Nele Mertens, 'Bristol fashion' MPC circuits. https://homes.esat.kuleuven.be/~nsmart/MPC.
- [ADI+17] Benny Applebaum, Ivan Damgård, Yuval Ishai, Michael Nielsen, and Lior Zichron. Secure arithmetic computation with constant computational overhead. In Jonathan Katz and Hovav Shacham, editors, CRYPTO 2017, Part I, volume 10401 of LNCS, pages 223–254. Springer, Heidelberg, August 2017.
- [BCG+19] Elette Boyle, Geoffroy Couteau, Niv Gilboa, Yuval Ishai, Lisa Kohl, and Peter Scholl. Efficient pseudorandom correlation generators: Silent OT extension and more. In Alexandra Boldyreva and Daniele Micciancio, editors, CRYPTO 2019, Part III, volume 11694 of LNCS, pages 489–518. Springer, Heidelberg, August 2019.
- [BDP+20] Joan Boyar, Morris Dworkin, Rene Peralta, Meltem Turan, Cagdas Calik, and Luis Brandao. Circuit Minimization Work. http://cs-www.cs.yale.edu/homes/peralta/CircuitStuff/CMT.html, 2020.
- [BGI14] Elette Boyle, Shafi Goldwasser, and Ioana Ivan. Functional signatures and pseudorandom functions. In Hugo Krawczyk, editor, PKC 2014, volume 8383 of LNCS, pages 501–519. Springer, Heidelberg, March 2014.
- [BHKR13] Mihir Bellare, Viet Tung Hoang, Sriram Keelveedhi, and Phillip Rogaway. Efficient garbling from a fixed-key blockcipher. In 2013 IEEE Symposium on Security and Privacy, pages 478–492. IEEE Computer Society Press, May 2013.
- [BHR12] Mihir Bellare, Viet Tung Hoang, and Phillip Rogaway. Foundations of garbled circuits. In Ting Yu, George Danezis, and Virgil D. Gligor, editors, ACM CCS 2012, pages 784–796. ACM Press, October 2012.
- [BIB89] Judit Bar-Ilan and Donald Beaver. Non-cryptographic fault-tolerant computing in constant number of rounds of interaction. In Piotr Rudnicki, editor, 8th ACM PODC, pages 201–209. ACM, August 1989.
- [BMP13] Joan Boyar, Philip Matthews, and René Peralta. Logic minimization techniques with applications to cryptology. Journal of Cryptology, 26(2):280–312, April 2013.
- [BMR90] Donald Beaver, Silvio Micali, and Phillip Rogaway. The round complexity of secure protocols (extended abstract). In 22nd ACM STOC, pages 503–513. ACM Press, May 1990.
- [BMR16] Marshall Ball, Tal Malkin, and Mike Rosulek. Garbling gadgets for Boolean and arithmetic circuits. In Edgar R. Weippl, Stefan Katzenbeisser, Christopher Kruegel, Andrew C. Myers, and Shai Halevi, editors, ACM CCS 2016, pages 565–577. ACM Press, October 2016.
- [BP10] Joan Boyar and René Peralta. A new combinational logic minimization technique with applications to cryptology. Experimental Algorithms Lecture Notes in Computer Science, page 178–189, 2010.
- [BW13] Dan Boneh and Brent Waters. Constrained pseudorandom functions and their applications. In Kazue Sako and Palash Sarkar, editors, ASIACRYPT 2013, Part II, volume 8270 of LNCS, pages 280–300. Springer, Heidelberg, December 2013.
- [CKKZ12] Seung Geol Choi, Jonathan Katz, Ranjit Kumaresan, and Hong-Sheng Zhou. On the security of the “free-XOR” technique. In Ronald Cramer, editor, TCC 2012, volume 7194 of LNCS, pages 39–53. Springer, Heidelberg, March 2012.
- [DKS+17] Ghada Dessouky, Farinaz Koushanfar, Ahmad-Reza Sadeghi, Thomas Schneider, Shaza Zeitouni, and Michael Zohner. Pushing the communication barrier in secure computation using lookup tables. In NDSS 2017. The Internet Society, February / March 2017.
- [DNNR17] Ivan Damgård, Jesper Buus Nielsen, Michael Nielsen, and Samuel Ranellucci. The TinyTable protocol for 2-party secure computation, or: Gate-scrambling revisited. In Jonathan Katz and Hovav Shacham, editors, CRYPTO 2017, Part I, volume 10401 of LNCS, pages 167–187. Springer, Heidelberg, August 2017.
- [Ds17] Jack Doerner and abhi shelat. Scaling ORAM for secure computation. In Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu, editors, ACM CCS 2017, pages 523–535. ACM Press, October / November 2017.
- [GGM84] Oded Goldreich, Shafi Goldwasser, and Silvio Micali. How to construct random functions (extended abstract). In 25th FOCS, pages 464–479. IEEE Computer Society Press, October 1984.
- [GKPP06] Jorge Guajardo, Sandeep S. Kumar, Christof Paar, and Jan Pelzl. Efficient software-implementation of finite fields with applications to cryptography. In Acta Applicandae Mathematica, 2006.
- [GKWY20] Chun Guo, Jonathan Katz, Xiao Wang, and Yu Yu. Efficient and secure multiparty computation from fixed-key block ciphers. In 2020 IEEE Symposium on Security and Privacy, pages 825–841. IEEE Computer Society Press, May 2020.
- [GLMY16] Adam Groce, Alex Ledger, Alex J. Malozemoff, and Arkady Yerukhimovich. CompGC: Efficient offline/online semi-honest two-party computation. Cryptology ePrint Archive, Report 2016/458, 2016. https://eprint.iacr.org/2016/458.
- [GLNP18] Shay Gueron, Yehuda Lindell, Ariel Nof, and Benny Pinkas. Fast garbling of circuits under standard assumptions. Journal of Cryptology, 31(3):798–844, July 2018.
- [HK20a] David Heath and Vladimir Kolesnikov. Stacked garbling - garbled circuit proportional to longest execution path. In Daniele Micciancio and Thomas Ristenpart, editors, CRYPTO 2020, Part II, volume 12171 of LNCS, pages 763–792. Springer, Heidelberg, August 2020.
- [HK20b] David Heath and Vladimir Kolesnikov. Stacked garbling for disjunctive zero-knowledge proofs. In Anne Canteaut and Yuval Ishai, editors, EUROCRYPT 2020, Part III, volume 12107 of LNCS, pages 569–598. Springer, Heidelberg, May 2020.
- [HK21] David Heath and Vladimir Kolesnikov. Logstack: Stacked garbling with \(O(b \log b)\) computation. Cryptology ePrint Archive, Report 2021/531, 2021. https://eprint.iacr.org/2015/751.pdf.
- [HKP20] David Heath, Vladimir Kolesnikov, and Stanislav Peceny. MOTIF: (almost) free branching in GMW - via vector-scalar multiplication. In ASIACRYPT 2020, Part III, LNCS, pages 3–30. Springer, Heidelberg, December 2020.
- [HKS+10] Wilko Henecka, Stefan Kögl, Ahmad-Reza Sadeghi, Thomas Schneider, and Immo Wehrenberg. TASTY: tool for automating secure two-party computations. In Ehab Al-Shaer, Angelos D. Keromytis, and Vitaly Shmatikov, editors, ACM CCS 2010, pages 451–462. ACM Press, October 2010.
- [IKM+13] Yuval Ishai, Eyal Kushilevitz, Sigurd Meldgaard, Claudio Orlandi, and Anat Paskin-Cherniavsky. On the power of correlated randomness in secure computation. In Amit Sahai, editor, TCC 2013, volume 7785 of LNCS, pages 600–620. Springer, Heidelberg, March 2013.
- [JKO13] Marek Jawurek, Florian Kerschbaum, and Claudio Orlandi. Zero-knowledge using garbled circuits: how to prove non-algebraic statements efficiently.