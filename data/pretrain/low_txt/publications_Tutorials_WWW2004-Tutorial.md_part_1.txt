# Service-Oriented Architectures and Semantic Web Processes

**Authors:**
- Jorge Cardoso, University of Madeira (Portugal)
- Francisco Curbera, IBM T.J. Watson Research Center (USA)
- Amit Sheth, LSDIS Lab, University of Georgia and Semagix, Inc (USA)

## 1. Service-Oriented Architectures and Web Services
### 1.1 Overview
- **IT for a New Business Model:** 
  - Service-Oriented Architectures (SOAs) and web services as an XML-based instantiation.
  - Key components: protocols, metadata, discovery, and composition.

### 1.2 A New Business Environment
- **Outsourcing and Core Focus:**
  - Enterprises outsource non-essential functions to focus on core values.
  - Vertically integrated enterprises are being replaced by heavily networked ones.
  - Internal applications are now provided by external parties, blurring corporate boundaries.
  - The need for IT models to adapt to the new business interaction model is crucial.

### 1.3 Enterprises as IT Islands
- **Value-Added Networks and Proprietary Protocols:**
  - Support most B2B interactions.
  - Ad-hoc bridges support interorganizational interactions.
  - Most application interactions occur within the enterprise.
  - Applications typically belong to a single administrative domain.

### 1.4 Fully Networked Enterprises
- **Web-Based Interactions:**
  - Pervasive and based on standard protocols.
  - Increased frequency and reach of external interactions.
  - Internal applications seamlessly extend beyond the enterprise.
  - Applications naturally belong to multiple administrative domains.

### 1.5 Fully Networked Business Interactions
- **Internal vs. External Blurring:**
  - The distinction between internal and external applications and providers diminishes.
  - Multiple potential providers for each required function.
  - Standard protocols and peer-to-peer interactions.
  - Asynchronous, stateful, and bidirectional interactions.
  - Multi-party interactions are common and essential for advanced enterprise integration.

### 1.6 IT for the New Enterprise: Business Components
- **Raising Abstraction Levels:**
  - Focus on business functions and requirements.
  - Encapsulation of business functions into service components.
  - Different granularity levels: coarse-grained business services vs. fine-grained objects.
  - Explicit contracts for independent party access and automatic binding.
  - Integration of business processes and functions through service compositions.
  - Creation of new value through integration and composition.

### 1.7 Traditional Middleware
- **Distributed Object Systems:**
  - Based on client-server paradigm.
  - Asymmetric interaction model.
  - Biased towards synchronous protocols.
  - Name-oriented object discovery.

### 1.8 Service-Oriented Middleware
- **Peer-to-Peer Interactions:**
  - Symmetric interaction model.
  - Mixes synchronous and asynchronous protocols.
  - Capability-based service discovery.
  - Public contracts assigned to network-accessible objects.

### 1.9 Coupling Between Applications
- **Explicit and Implicit Contracts:**
  - Explicit contracts define message formats, content constraints, sequencing, and QoS characteristics.
  - Tight coupling leads to monolithic and brittle distributed applications.
  - Small changes in one application can require matching changes in partner applications.

### 1.10 A Plan for Building a SOA
- **Key Requirements:**
  - Standardized interaction protocols.
  - Explicit contracts to define allowable changes without breaking interactions.
  - Standardized contract languages and formats.
  - Points of variability in the contract for dynamic adaptation.
  - Native composition models and runtimes.

### 1.11 Web Services as a SOA
- **Current Status:**
  - Web services as an implementation of SOA.
  - Technologies like WSDL, WS-Policy, UDDI, and Inspection Description.
  - Reliable messaging, security, and transactions.
  - Messaging protocols like SOAP and other transport layers.

### 1.12 Protocols
- **SOAP:**
  - Lightweight XML-based mechanism for exchanging structured information.
  - Transport-independent messaging model with bindings for HTTP.
  - Encoding model and RPC convention.
  - Standard message format with envelope, headers, body, and attachments.

### 1.13 Metadata
- **WSDL:**
  - Extensible, platform-independent XML language for describing services.
  - Functional description, access protocol, and deployment details.
  - Does not include QoS, taxonomies, or business information.
  - Component definition language for web services.

### 1.14 WS-Policy Framework
- **QoS Behaviors:**
  - Complements functional descriptions with QoS behaviors.
  - General framework for declaratively asserting how a service may be accessed.
  - Policy expressions with generic operators and usage attributes.
  - Domain-specific assertions for security, transactions, and reliable messaging.

This revised version aims to provide a clear, coherent, and professional overview of the key concepts and components related to Service-Oriented Architectures and Web Services.