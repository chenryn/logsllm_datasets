### User Interface Interaction and Browser Compatibility Testing

The student will interact with the application's interface and provide feedback on their experience when running the application across four different browsers.

### API-Specific Test Summary

In comparing JSKERNEL with two other defenses, Fuzzyfox and DeterFox, we find that JSKERNEL exhibits the least observable differences. Specifically:
- Fuzzyfox: 13 out of 20 applications show observable differences.
- DeterFox: 7 out of 20 applications show observable differences.
- JSKERNEL: 4 out of 20 applications show observable differences.

All observable differences in JSKERNEL are related to variations in frames per second (FPS), caused by the use of the synchronous timer `performance.now()`. This function is primarily used for fine-grained time-related operations, such as timing and generating animations with time constraints.

Fuzzyfox and DeterFox introduce non-time-related differences, such as loading errors for apps, images, objects, and backgrounds. In contrast, JSKERNEL only introduces time-related differences, such as higher FPS and a faster clock. This is because Fuzzyfox and DeterFox modify the browser's source code, which is written in C or C++, making them more susceptible to crashes due to small engineering errors. JSKERNEL, being written in JavaScript, benefits from the browser's memory protection mechanisms.

### Semi-Automated Compatibility Test on Alexa Top 100 Websites

We conducted a compatibility test of JSKERNEL with the top 100 websites listed on Alexa. Our methodology involved visiting each website twice—once with JSKERNEL and once without—on Google Chrome. During each visit, we captured the Document Object Model (DOM) of the website and serialized it into a string. We then compared these strings using cosine similarity. If the similarity score was above 99%, we considered the two visits to have rendered the same results; otherwise, we had a human reviewer compare the renderings.

Our evaluation showed that 90% of the websites had a similarity score greater than 99% when visited with and without JSKERNEL. The remaining 10 websites, which had lower similarity scores, were found to be affected by dynamic content, such as ads. We also manually checked these 10 websites by visiting them twice directly on Google Chrome without JSKERNEL and calculated the similarity scores. The scores were very close, with less than a 2% difference, to those obtained in the JSKERNEL compatibility test.

### Week-Long User Experience Test

We conducted a week-long user experience test to evaluate the compatibility of JSKERNEL. A student, not involved in the project, installed JSKERNEL on their Chrome browser and used it for a week. In the first two days, the student encountered three issues:
1. **Overleaf**: The student could not compile a PDF file. This was due to a bug in our web worker implementation handling absolute paths.
2. **Google Calendar**: All Mondays were displayed as Wednesdays, caused by a bug in our Date object implementation.
3. **Google Maps**: A Google Map Worker accessed the Worker location, which incorrectly pointed to our kernel worker due to a bug.

After fixing these bugs, the student did not experience any further compatibility issues during the remaining five days of the test.

### Discussion

#### Robustness Against Self-Modifying Code

JSKERNEL is designed to be robust against self-modifying code. Even if an adversary knows that JSKERNEL is present, they cannot bypass its protections. The reasons are:
1. **Encapsulation**: All JSKERNEL code and attack-related APIs are encapsulated within the JSKERNEL kernel, preventing direct access.
2. **Interface Modifiability**: Any modifications to the JSKERNEL interface by an adversary will only affect the website's functionality, not the underlying APIs.
3. **Context Injection**: JSKERNEL injects the kernel into every new JavaScript context, such as newly opened windows and iframes.
4. **Function Redefinition**: JSKERNEL redefines all JavaScript functions using a customized pointer and uses `Object.freeze()` to prevent prototype pollution.

In the future, we plan to follow Bhargavan et al. [27] and write JSKERNEL in a defensive JavaScript subset.

#### Defense Against Unknown Vulnerabilities

JSKERNEL can defend against unknown timing attacks by scheduling all asynchronous events in a deterministic order. For other web concurrency attacks, JSKERNEL currently requires vulnerability-specific policies. Future work will focus on automatically extracting policies for new vulnerabilities.

#### Triggering Conditions vs. Underlying Vulnerabilities

Web concurrency attacks exploit the nature of vulnerability triggering conditions, which require concurrency information from different threads. The underlying vulnerabilities, such as use-after-free, cross-site information leaks, or privilege escalation, may vary.

### Related Work

#### Defenses Against Timing Attacks

There are three main categories of defenses against timing attacks: attack surface reduction, fuzzy time, and determinism.
1. **Attack Surface Reduction**: Snyder et al. [1] suggest disabling certain JavaScript APIs to reduce the attack surface. While effective, this approach can cause compatibility issues.
2. **Fuzzy Time**: Kohlbrenner et al. [6] randomize execution performance by introducing pause tasks into the browser's event queue. JavaScript Zero [3] redefines timing-related APIs and introduces fuzzy time at the browser extension level, but it still cannot fundamentally prevent timing attacks.
3. **Deterministic Execution Model**: The deterministic browser project [14] applies a deterministic execution model to modern browsers. JSKERNEL, which can be installed on existing browsers like Google Chrome, Firefox, and Microsoft Edge, also defends against low-level attacks and all types of timing channels, including floating-point ones.

#### Defenses Against Low-Level Attacks

Snyder et al. [1] disable certain JavaScript APIs to reduce the attack surface, but this reduces functionality. BrowserShield [2] rewrites JavaScript code to defend against low-level vulnerabilities, but it incurs significant overhead. JShield [43] modifies the browser to enforce security signatures, but it is browser-specific and requires updates with each new version. JSKERNEL, in contrast, is compatible with multiple browsers and does not need updates for new versions.

#### Third-Party JavaScript Isolation

Third-party JavaScript isolation techniques, such as AdJail [44], AdSentry [45], JSand [46], PAD [47], AdJust [48], and Virtual Browser [49], provide sandboxes for third-party JavaScript like ads. These works prevent tampering with trusted content. JSKERNEL currently uses an anonymous closure for isolation but can adopt any of the aforementioned techniques. Its primary contribution is the enforcement of a customized event scheduling policy to defend against web concurrency attacks, which is orthogonal to the isolation problem.

### Conclusion

In this paper, we introduced JSKERNEL, the first approach to introduce a kernel concept that enforces the order of JavaScript execution to defend against web concurrency attacks. We implemented a prototype system as extensions for Firefox, Google Chrome, and Edge, and made it open-source. Our evaluation shows that JSKERNEL is fast, robust to various attacks, and backward-compatible with existing web applications.

### Acknowledgments

We thank our shepherd, Neeraj Suri, and anonymous reviewers for their valuable comments and feedback. This work was supported in part by the National Science Foundation (NSF) grant CNS-18-54001. The views and conclusions expressed herein are those of the authors and do not necessarily represent the official policies or endorsements of the NSF.

### References

[1] P. Snyder, C. Taylor, and C. Kanich, “Most websites don’t need to vibrate: A cost-benefit approach to improving browser security,” in Proceedings of the 2017 ACM CCS, 2017.

[2] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir, “Browsershield: vulnerability-driven filtering of dynamic HTML,” in OSDI: USENIX Symposium on Operating Systems Design and Implementation, 2006.

[3] M. Schwarz, M. Lipp, and D. Gruss, “JavaScript zero: Real JavaScript and zero side-channel attacks,” in NDSS, 2018.

[4] Canvas defender. https://addons.mozilla.org/en-US/firefox/addon/

[5] Disable WebRTC. https://addons.mozilla.org/en-US/firefox/addon/no-canvas-fingerprinting/.

[6] D. Kohlbrenner and H. Shacham, “Trusted browsers for uncertain times,” in 25th USENIX Security Symposium (USENIX Security 16), 2016, pp. 463–480.

[7] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis, “The spy in the sandbox - practical cache attacks in JavaScript,” CoRR, vol. abs/1502.07373, 2015. [Online]. Available: http://arxiv.org/abs/1502.07373

[8] T. Van Goethem, W. Joosen, and N. Nikiforakis, “The clock is still ticking: Timing attacks in the modern web,” in Proceedings of the 22nd ACM CCS, 2015.

[9] P. Stone., “Pixel perfect timing attacks with HTML5,” Tech. Rep., 2013. [Online]. Available: https://www.contextis.com/resources/white-papers/pixel-perfect-timing-attacks-with-html5

[10] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and H. Shacham, “On subnormal floating point and abnormal timing,” in Proceedings of the 2015 IEEE Symposium on Security and Privacy, 2015.

[11] P. Vila and B. Kopf, “Loophole: Timing attacks on shared event loops in Chrome,” in 26th USENIX Security Symposium (USENIX Security 17), 2017.

[12] M. Schwarz, C. Maurice, D. Gruss, and S. Mangard, “Fantastic timers and where to find them: High-resolution microarchitectural attacks in JavaScript,” in Financial Cryptography and Data Security (FC), 2017.

[13] Web workers after free in use cache::getwrapperpreservecolor(). https://bugzilla.mozilla.org/show_bug.cgi?id=1418074.

[14] Y. Cao, Z. Chen, S. Li, and S. Wu, “Deterministic browser,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’17. ACM, 2017, pp. 163–178.

[15] J. Resig, “Dromaeo JavaScript performance test suite,” Tech. Rep. [Online]. Available: http://dromaeo.com/

[16] J. Yang, A. Cui, S. Stolfo, and S. Sethumadhavan, “Concurrency attacks,” in Presented as part of the 4th {USENIX} Workshop on Hot Topics in Parallelism, 2012.

[17] (2018) Tor browser. https://www.torproject.org/projects/torbrowser.html.

[18] Cross domain policy override using web workers. https://bugzilla.mozilla.org/show_bug.cgi?id=879787.

[19] Asan segv on unknown address in worker::seteventlistener. https://bugzilla.mozilla.org/show_bug.cgi?id=897678.

[20] Firefox reproducibly crashes when using asm.js code in workers and transferable objects. https://bugzilla.mozilla.org/show_bug.cgi?id=950604.

[21] Cross-origin information disclosure with error message of web workers. https://bugzilla.mozilla.org/show_bug.cgi?id=947592.

[22] Cross-origin information disclosure with error message of web workers importscripts(). https://bugzilla.mozilla.org/show_bug.cgi?id=1160890.

[23] Fingerprinting users in private window using web-worker + indexeddb. https://bugzilla.mozilla.org/show_bug.cgi?id=1410106.

[24] (2018) Selenium. https://www.seleniumhq.org/.

[25] Performance sheriffing/raptor. https://wiki.mozilla.org/Performance_sheriffing/Raptor.

[26] (2018) Codepen - front end developer playground and code editor in the browser. https://codepen.io/.

[27] K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis, “Defensive JavaScript,” in Foundations of Security Analysis and Design VII. Springer, 2014, pp. 88–123.

[28] M. Andrysco, A. Nötzli, F. Brown, R. Jhala, and D. Stefan, “Towards verified, constant-time floating point operations,” in Proceedings of the 2018 ACM CCS, 2018.

[29] A. Aviram, S. Hu, B. Ford, and R. Gummadi, “Determinating timing channels in compute clouds,” in Proceedings of the 2010 ACM Workshop on Cloud Computing Security Workshop, ser. CCSW ’10, 2010.

[30] W. Wu, E. Zhai, D. Jackowitz, D. I. Wolinsky, L. Gu, and B. Ford, “Warding off timing attacks in deterland,” CoRR, vol. abs/1504.07070, 2015. [Online]. Available: http://arxiv.org/abs/1504.07070

[31] M. Huisman, P. Worah, and K. Sunesen, “A temporal logic characterisation of observational determinism,” 19th IEEE Computer Security Foundations Workshop (CSFW’06), pp. 13 pp.–3, 2006.

[32] A. Sabelfeld and D. Sands, “Probabilistic noninterference for multi-threaded programs,” in Proceedings of the 13th IEEE Workshop on Computer Security Foundations, ser. CSFW ’00, 2000.

[33] G. Smith and D. Volpano, “Secure information flow in a multi-threaded imperative language,” in POPL, 1998.

[34] S. Zdancewic and A. C. Myers, “Observational determinism for concurrent program security,” in CSFW, 2003.

[35] D. Volpano and G. Smith, “Eliminating covert flows with minimum typings,” in Computer Security Foundations Workshop, 1997. Proceedings., 10th. IEEE, 1997, pp. 156–168.

[36] H. Cui, J. Simsa, Y.-H. Lin, H. Li, B. Blum, X. Xu, J. Yang, G. A. Gibson, and R. E. Bryant, “Parrot: a practical runtime for deterministic, stable, and reliable threads,” in SOSP, 2013.

[37] H. Cui, J. Wu, J. Gallagher, H. Guo, and J. Yang, “Efficient deterministic multithreading through schedule relaxation,” in SOSP, 2011.

[38] H. Cui, J. Wu, C.-C. Tsai, and J. Yang, “Stable deterministic multithreading through schedule memoization,” in Proceedings of the 9th USENIX OSDI, 2010.

[39] T. Liu, C. Curtsinger, and E. D. Berger, “Dthreads: efficient deterministic multithreading,” in SOSP, 2011.

[40] M. Olszewski, J. Ansel, and S. P. Amarasinghe, “Kendo: efficient deterministic multithreading in software,” in ASPLOS, 2009.

[41] J. Yang, H. Cui, J. Wu, Y. Tang, and G. Hu, “Making parallel programs reliable with stable multithreading,” Commun. ACM, vol. 57, no. 3, pp. 58–69, Mar. 2014.

[42] D. Jefferson, “Virtual time,” ACM Trans. Program. Lang. Syst., vol. 7, pp. 404–425, 1983.

[43] Y. Cao, X. Pan, Y. Chen, and J. Zhuge, “JShield: Towards real-time and vulnerability-based detection of polluted drive-by download attacks,” in Proceedings of the 30th Annual Computer Security Applications Conference, ser. ACSAC, 2014.

[44] M. T. Louw, K. T. Ganesh, and V. N. Venkatakrishnan, “AdJail: Practical enforcement of confidentiality and integrity policies on web advertisements,” in Proceedings of the 19th USENIX Conference on Security, ser. USENIX Security’10, 2010.

[45] X. Dong, M. Tran, Z. Liang, and X. Jiang, “AdSentry: comprehensive and flexible confinement of JavaScript-based advertisements,” in Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 2011, pp. 297–306.

[46] P. Agten, S. Van Acker, Y. Brondsema, P. H. Phung, L. Desmet, and F. Piessens, “JSand: complete client-side sandboxing of third-party JavaScript without browser modifications,” in Proceedings of the 28th Annual Computer Security Applications Conference. ACM, 2012, pp. 1–10.

[47] W. Wang, Y. Kwon, Y. Zheng, Y. Aafer, I.-L. Kim, W.-C. Lee, Y. Liu, W. Meng, X. Zhang, and P. Eugster, “PAD: Programming third-party web advertisement censorship,” in Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering, ser. ASE 2017. Piscataway, NJ, USA: IEEE Press, 2017, pp. 240–251. [Online]. Available: http://dl.acm.org/citation.cfm?id=3155562.3155596

[48] W. Wang, I. L. Kim, and Y. Zheng, “AdJust: Runtime mitigation of resource abusing third-party online ads,” in 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE), May 2019, pp. 1005–1015.

[49] Y. Cao, Z. Li, V. Rastogi, Y. Chen, and X. Wen, “Virtual browser: A virtualized browser to sandbox third-party JavaScripts with enhanced security,” in Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ser. ASIACCS ’12, 2012.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 11:24:51 UTC from IEEE Xplore. Restrictions apply.