### Ineffective Attacks Against BBR

In this section, we describe how some previously known attacks against congestion control mechanisms are ineffective against BBR. For a visual representation of these attacks, readers can refer to Appendix C.

#### Acknowledgment Bursts
In this attack, the attacker accumulates \( n \) acknowledgment (ACK) packets from the receiver and forwards them to the sender in a single burst. According to [29], this attack caused New Reno to send data in bursts because TCP is ACK-clocked, meaning its sending behavior closely mimics the acknowledgment behavior. However, BBR is not affected by this attack. In BBR, even though the delivery rate samples computed for the first \( n-1 \) ACKs in the burst are deflated, the delivery rate sample for the \( n \)-th (last) ACK in the burst remains unchanged. Since the delivery rate samples for the first \( n-1 \) ACKs are always less than the \( n \)-th (last) ACK, and all ACKs arrive at the same time, the larger delivery rate sample takes precedence. Therefore, this attack does not impact BBR's bandwidth estimate (BtlBw).

#### Acknowledgment Division
In this attack, a single ACK acknowledging \( m \) bytes is divided into \( n \) valid ACKs, each acknowledging approximately \( m/n \) bytes. As reported in [36], this attack caused the congestion window (cwnd) to grow \( n \) times as fast because for each ACK, cwnd increased by one segment. The effectiveness of this attack on BBR depends on how the attacker injects the divided ACKs:

- **If the divided ACKs are sent at the same time as the original ACK**: The attack is ineffective for the same reason as the acknowledgment burst attack. The delivery rate samples for the first \( n-1 \) ACKs are deflated, but the last ACK remains unchanged, and the larger delivery rate sample takes precedence.
- **If the divided ACKs are sent at the same time as the last ACK before the one being divided**: The ACK rate is clamped by BBR’s current sending rate.
- **If the divided ACKs are sent during BBR’s probing phase**: The sender's sending rate increases, similar to the acknowledgment burst attack.
- **If the divided ACKs are evenly spaced**: The ACK rate of the divided ACKs is no different from the ACK rate without the attack.

#### Duplicate Acknowledgments
In this attack, \( n \) duplicate acknowledgments are injected for every acknowledgment packet from the receiver. Congestion control schemes such as CUBIC and New Reno, which use packet loss to detect congestion, enter Fast Recovery when three or more duplicate ACKs are received, halving the congestion window and reducing the sending rate. Although BBR is not loss-based, it includes a mechanism to handle packet loss by entering a Recovery state. This attack is ineffective against BBR because BBR does not back off from the network upon packet loss. Instead, BBR sets cwnd to the amount of in-flight data and retransmits the lost segment until all outstanding data is acknowledged.

### Defenses
Most of our attacks rely on the ability to modify acknowledgment information in TCP packets. The best defense against these attacks is to encrypt or authenticate this information. QUIC, a new transport protocol initially developed by Google and currently being standardized by the IETF, takes this approach. Unfortunately, adding such authentication to TCP is impractical due to backward compatibility issues. Prior work [39] has suggested adding a nonce to TCP acknowledgments to prevent optimistic ACK attacks, but this also suffers from backward compatibility issues. Some attacks, like the Delayed ACK attack, require only the ability to delay or reorder packets and appear to be inherent in trying to infer model parameters from delivered packets.

### Related Work
**Congestion Control Attacks**: The work in [36] demonstrates how a misbehaving receiver can undermine congestion control, causing senders to send data at a faster pace without compromising reliability. It shows that TCP is susceptible to divided, duplicate, and optimistic acknowledgment attacks.

**Off-Path Attackers**: Much research has focused on off-path attackers who have write-only access to a flow. Sequence numbers can be predicted [5, 7, 18, 23, 33–35] to inject malicious content into a victim’s connection. The work in [35] shows how sequence numbers can be leaked to unprivileged, on-device malware to coordinate with an off-path attacker, leading to connection hijacking in under one second. The work in [5] aims to improve initial sequence number generation to make it more difficult for off-path attackers to succeed.

**Protocol Fuzzing**: Program analysis by automatically generating inputs has long been used to test for security, robustness, and reliability. Instead of generating random inputs, the work in [22] generates relevant tests tailored to all possible source code paths. Similar approaches have been used for network protocol analysis. MAX [32] discovers attacks in network protocols but requires source code to be annotated where vulnerabilities are likely to exist, yielding thorough manual analysis. This motivated model-guided testing [19, 20, 29], where a protocol’s state machine is used to discover relevant attacks, which has been applied to various protocols. KiF [1], SNOOZE [4], and SNAKE [28] all take model-guided approaches to discover relevant and effective attack strategies in network protocols. TCPWN [29] uses a model-guided approach to discover acknowledgment-based manipulation attacks in TCP congestion control implementations. As discussed in Section 3, TCPWN cannot be directly applied to BBR.

### Conclusion
We identified five classes of attacks from on-path attackers that caused BBR to send data at high, slow, and stalled rates. We found that due to BBR's multiplicative probing for bandwidth, an attacker who optimistically acknowledges data can cause BBR to increase its sending rate by 13x in under one second. We showed that the combination of gain cycling and delayed acknowledgments by an attacker caused BBR to sequentially decrease its sending rate. We also demonstrated that an attacker preventing new data from being acknowledged caused retransmission timeouts, forcing BBR to reset and rediscover the network path model each time. Additionally, we identified two attacks that stall data transmission: an attacker preventing new data from being acknowledged and an attacker optimistically acknowledging lost data, causing sequence numbers to desynchronize. Finally, we show how the burst, divide, and duplicate acknowledgment attacks against prior congestion control schemes are not effective against BBR.

### References
[1] Humberto J. Abdelnur, Radu State, and Olivier Festor. KiF: A Stateful SIP Fuzzer. In Proceedings of the 1st International Conference on Principles, Systems and Applications of IP Telecommunications, pages 47–56, New York, NY, USA, 2007. ACM.

[2] Amit Aggarwal, Stefan Savage, and Thomas Anderson. Understanding the Performance of TCP Pacing. Proceedings - IEEE INFOCOM, 01 2000.

[3] Jong Suk Ahn, Peter B. Danzig, Zhen Liu, and Limin Yan. Evaluation of TCP Vegas: Emulation and Experiment. SIGCOMM Comput. Commun. Rev., 25(4):185–195, October 1995.

[4] G. Banks, M. Cova, V. Felmetsger, K. Almeroth, R. Kemmerer, and G. Vigna. SNOOZE: Toward a stateful network protocol fuzzer. In International Conference on Information Security, pages 343–358. 2006.

[5] S. Bellovin. Defending Against Sequence Number Attacks. https://tools.ietf.org/html/rfc1948, 1996.

[6] Lawrence S. Brakmo, Sean W. O’malley, and Larry L. Peterson. TCP Vegas: New Techniques for Congestion Detection and Avoidance. In In SIGCOMM, 1994.

[7] Yue Cao, Zhiyun Qian, Zhongjie Wang, Tuan Dao, Srikanth V. Krishnamurthy, and Lisa M. Marvel. Off-Path TCP Exploits: Global Rate Limit Considered Dangerous. In Proceedings of the 25th USENIX Conference on Security Symposium, SEC’16, pages 209–225, Berkeley, CA, USA, 2016. USENIX Association.

[8] N. Cardwell, J. Priyaranjan, E. Dumazet, K. Yang, D. Miller, and Y. Seung. Linux TCP BBR. https://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git/tree/net/ipv4/tcp_bbr.c, 2018.

[9] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, and Van Jacobson. BBR: Congestion-Based Congestion Control. ACM Queue, 2016.

[10] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, and Van Jacobson. BBR Congestion Control. https://www.ietf.org/proceedings/97/slides/slides-97-iccrg-bbr-congestion-control-02.pdf, November 2016.

[11] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, and Van Jacobson. BBR Congestion Control: An Update. https://www.ietf.org/proceedings/98/slides/slides-98-iccrg-an-update-on-bbr-congestion-control-00.pdf, March 2017.

[12] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar, Victor Vasiliev, and Van Jacobson. BBR Congestion Control: IETF 100 Update: BBR in shallow buffers. https://datatracker.ietf.org/meeting/100/materials/slides-100-iccrg-a-quick-bbr-update-bbr-in-shallow-buffers, November 2017.

[13] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar, Victor Vasiliev, and Van Jacobson. BBR Congestion Control: IETF 99 Update. https://www.ietf.org/proceedings/99/slides/slides-99-iccrg-iccrg-presentation-2-00.pdf, July 2017.

[14] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar, Victor Vasiliev, Priyaranjan Jha, Yousuk Seung, and Van Jacobson. BBR Congestion Control Work at Google: IETF 101 Update. https://datatracker.ietf.org/meeting/101/materials/slides-101-iccrg-an-update-on-bbr-work-at-google-00, March 2018.

[15] Neal Cardwell, Yuchung Cheng, C. Stephen Gunn, Soheil Hassas Yeganeh, Ian Swett, Jana Iyengar, Victor Vasiliev, Priyaranjan Jha, Yousuk Seung, Kevin Yang, Matt Mathis, and Van Jacobson. BBR Congestion Control Work at Google: IETF 101 Update. https://datatracker.ietf.org/meeting/102/materials/slides-102-iccrg-an-update-on-bbr-work-at-google-00, July 2018.

[16] Neal Cardwell, Yuchung Cheng, Soheil Hassas Yeganeh, and Van Jacobson. BBR Congestion Control. https://tools.ietf.org/id/draft-cardwell-iccrg-bbr-congestion-control-00.html, 2017.

[17] Neal Cardwell, Yuchung Cheng, Soheil Hassas Yeganeh, and Van Jacobson. Delivery Rate Estimation. https://tools.ietf.org/html/draft-cheng-iccrg-delivery-rate-estimation-00, 2018.

[18] Weiteng Chen and Zhiyun Qian. Off-Path TCP Exploit: How Wireless Routers Can Jeopardize Your Secrets. In 27th USENIX Security Symposium (USENIX Security 18), pages 1581–1598, Baltimore, MD, 2018. USENIX Association.

[19] C. Cho, D. Babic, P. Poosankam, K. Chen, E. Wu, and D. Song. MACE: Model-inference-Assisted Concolic Exploration for Protocol and Vulnerability Discovery. In USENIX Conference on Security, 2011.

[20] Joeri de Ruiter and Erik Poll. Protocol State Fuzzing of TLS Implementations. In 24th USENIX Security Symposium (USENIX Security 15), pages 193–206, Washington, D.C., 2015. USENIX Association.

[21] Defense Advanced Research Projects Agency. Transmission Control Protocol. https://tools.ietf.org/html/rfc793, 1981.

[22] Joe W. Duran and Simeon Ntafos. A report on random testing. In Proceedings of the 5th International Conference on Software Engineering, ICSE ’81, pages 179–183, Piscataway, NJ, USA, 1981. IEEE Press.

[23] Yossi Gilad and Amir Herzberg. Off-Path Attacking the Web. In Proceedings of the 6th USENIX Conference on Offensive Technologies, WOOT’12, pages 5–5, Berkeley, CA, USA, 2012. USENIX Association.

[24] University of Southern California Information Sciences Institute. Transmission Control Protocol. https://tools.ietf.org/html/rfc793, 1981.

[25] J. Iyengar, Ed and Fastly and M. Thomas, Ed and Mozilla. QUIC: A UDP-Based Multiplexed and Secure Transport. https://tools.ietf.org/html/draft-ietf-quic-transport-18, 2019.

[26] Van Jacobson. Congestion Avoidance and Control. ACM SIGCOMM Computer Communication Review, 18(4):314–329, 1988.

[27] R. Jain. A delay-based approach for congestion avoidance in interconnected heterogeneous computer networks. SIGCOMM Comput. Commun. Rev., 19(5):56–71, October 1989.

[28] S. Jero, H. Lee, and C. Nita-Rotaru. Leveraging State Information for Automated Attack Discovery in Transport Protocol Implementations. In IEEE/IFIP International Conference on Dependable Systems and Networks, 2015.

[29] Samuel Jero, Endadul Hoque, David Choffnes, Alan Mislove, and Cristina Nita-Rotaru. Automated Attack Discovery in TCP Congestion Control Using a Model-guided Approach. In Proc. of Network & Distributed System Security Symposium (NDSS), 2018.

[30] Laurent Joncheray. A simple active attack against TCP. In USENIX Security Symposium, 1995.

[31] L Kleinrock. Power and deterministic rules of thumb for probabilistic problems in computer communications. 01 1979.

[32] Manipulation Attacks. 2011. In SIGCOMM, pages 26–37.

[33] Robert T. Morris. A Weakness in the 4.2BSD Unix TCP/IP Software, 1985.

[34] Z. Qian and Z. M. Mao. Off-Path TCP Sequence Number Inference Attack - How Firewall Middleboxes Reduce Security. In 2012 IEEE Symposium on Security and Privacy, pages 347–361, May 2012.

[35] Zhiyun Qian, Z. Morley Mao, and Yinglian Xie. Collaborative TCP sequence number inference attack: how to crack sequence number under a second. In ACM Conference on Computer and Communications Security, 2012.

[36] Stefan Savage, Neal Cardwell, David Wetherall, and Tom Anderson. TCP Congestion Control with a Misbehaving Receiver. ACM SIGCOMM Computer Communication Review, 29(5), 1999.

[37] V. Jacobsen and LBL and R. Braden and ISI. TCP Extensions for Long-Delay Paths. https://tools.ietf.org/html/rfc1072, October 1988.

[38] David X. Wei, Cheng Jin, Steven H. Low, and Sanjay Hegde. FAST TCP: Motivation, Architecture, Algorithms, Performance. IEEE/ACM Trans. Netw., 14(6):1246–1259, December 2006.

[39] Lixia Zhang, Scott Shenker, and Daivd D. Clark. Observations on the Dynamics of a Congestion Control Algorithm: The Effects of Two-way Traffic. SIGCOMM Comput. Commun. Rev., 21(4):133–147, August 1991.

### Appendices
**A. Attack Strategy Categorization**
The algorithm for categorizing attack strategies is shown in Algorithm A1.

**B. Illustrations of Malicious Actions Used by Our Attack Strategies Against BBR**
See Figure B1.

**C. Illustrations of Ineffective Attacks Against BBR**
See Appendix C for visual representations of the ineffective attacks.