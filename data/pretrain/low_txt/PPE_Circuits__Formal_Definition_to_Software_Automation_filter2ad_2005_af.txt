### Boneh-Franklin01 ([28])
- **Testable**: Yes
- **Type**: I

### Gentry-Silverberg02 ([38])
- **Testable**: Yes
- **Type**: I

### Boneh-Boyen04a ([26]) (ℓ = 160)
- **Testable**: Yes
- **Type**: I

### Waters05 ([52]) (|H(id)| = 16)
- **Testable**: Yes
- **Type**: I

### Naccache05 ([50]) (B(H(id)) = 8)
- **Testable**: Yes
- **Type**: I

### Our Tool: AutoPPE
- **Output**: PPE Circuit
- **Testable**: Yes
- **Type**: I

### Custom Testcase 1 (Figure 12)
- **Testable**: Yes
- **Type**: I

### Custom Testcase 2 (Figure 14)
- **Testable**: Yes
- **Type**: I

### Boyen-Waters ([31])
- **Testable**: Yes
- **Type**: I

### AGOT14 ([3])
- **Testable**: Yes
- **Type**: I

### RW13 ([51]) (a = 60)
- **Testable**: Yes
- **Type**: I

### RW13 ([51]) (a = 8)
- **Testable**: Yes
- **Type**: I

### 100-DDH
- **Testable**: Yes
- **Type**: I

### 100-DBDH
- **Testable**: Yes
- **Type**: I

### DLIN
- **Testable**: Yes
- **Type**: I

### Table 1: Summary of AutoCircuitPPE Test Results
- **IBE Schemes**: We used our tool to output a PPE circuit that tests for the well-formedness of a secret key of an identity given the master public key and the identity.
- **VRF Schemes**: We constructed a PPE circuit that tests for the validity of VRF output and proof of pseudorandomness given the verification key and VRF input.
- **Signature Schemes**: We generated a PPE circuit that acts as a verification procedure, checking the well-formedness of a signature given the message and verification key.

Each scheme was encoded into a PPE problem instance similar to [45] (See [45] Section 5.2 for more details). For VRF bit string inputs in [34, 46, 47], we encoded them as a vector of Zp variables. The size of the polynomials in these schemes grows exponentially with the length of the encoding of the input, so we tested these schemes only with short-length encodings.

### Flexibility and Performance
- **Flexibility**: Our tool was tested on problem instances in Type I, II, and III pairing settings. Many PPE problem instances in Table 1 are in the Type I setting, but we also translated several schemes into the Type III setting for testing.
- **Performance**: AutoCircuitPPE outputs a PPE testing circuit for all problem instances where AutoPPE outputs a PPE testing set. Additionally, our tool outputs PPE testing circuits for the Bellare-Kiltz-Peikert-Waters IBE [24], Dodis VRF [34], Boyen-Waters IBE [30], and some custom test cases where AutoPPE was not able to produce a valid PPE testing set.

### Custom Examples
- **100-DDH and 100-DBDH**: These examples have already been tested in [45].
- **DLIN Test Case**: The trusted set contains polynomials {a, b, c, ax, by} in group G1, and the untrusted set contains the polynomial c(x + y) in group G1. The 100-DBDH and DLIN examples are not PPE Testable under the Decisional Bilinear Diffie-Hellman (DBDH) assumption and DLIN assumptions, respectively.

### Optimization
- **AutoCircuitPPE**: Optimizes the output of the QSearch algorithm (Section 4.3). Post-optimization, the number of PPE gates and Boolean gates is significantly reduced. For example, the Bellare et al. IBE scheme for 4-bit identities, Dodis VRF for 4-bit inputs, and the Boyen-Waters IBE scheme had their boolean gates reduced from 98, 180, and 491 to 31, 49, and 124, respectively.

### Open Problems
- **Rational Polynomials**: Our tool does not handle rational polynomials, which rules out many interesting schemes such as the Gentry IBE [37], Boneh-Boyen signatures [26], and Dodis-Yampolskiy VRF [35]. A well-formedness test for such schemes should check if the denominators of the untrusted rational polynomials evaluate to 0 and output INVALID accordingly.
- **Efficient Encoding**: We need a more efficient method for encoding schemes for automated analysis. In the Dodis VRF scheme [34], the VRF function on input bit string x and private key {a1, a2, ..., an} outputs i s.t. xi = 1 ai. To input the scheme to our tool, we encode the exponent polynomials as i = 1(ai xi + 1 − xi), which has an exponential number of monomials, incurring a huge computational cost for finding PPEs in our rules.

### Conclusion
- **Automation**: Computer automation holds great promise for improving the speed, accuracy, and capabilities of cryptographic implementations. This work presents an automation algorithm and software tool for designing (pairing-based) cryptographic verification algorithms that can support arbitrary logic. The tool found verification algorithms for schemes that could not be handled by prior tools and for which we were unable to find solutions by hand. It executes quickly (usually 100 seconds or less) even for schemes with 100 or more elements in their description.

### Acknowledgments
- **Support**: Susan Hohenberger was supported by NSF CNS-1414023, NSF CNS-1908181, the Office of Naval Research N00014-19-1-2294, and a Packard Foundation Subaward via UT Austin. Satyanarayana Vusirikala was supported by a UT Austin Provost Fellowship, NSF grants CNS-1908611 and CNS-1414082, DARPA SafeWare, and the Packard Foundation. Brent Waters was supported by NSF CNS-1414082, CNS-1908611, Simons Investigator Award, and Packard Foundation Fellowship.

### References
- **[1]** Masayuki Abe, Melissa Chase, Bernardo David, Markulf Kohlweiss, Ryo Nishimaki, and Miyako Ohkubo. 2012. Constant-Size Structure-Preserving Signatures: Generic Constructions and Simple Assumptions. Cryptology ePrint Archive, Report 2012/285. https://eprint.iacr.org/2012/285.
- **[2]** Masayuki Abe, Jens Groth, Miyako Ohkubo, and Takeya Tango. 2014. Converting Cryptographic Schemes from Symmetric to Asymmetric Bilinear Groups. In Advances in Cryptology - CRYPTO. Springer, 241–260.
- **[3]** Masayuki Abe, Jens Groth, Miyako Ohkubo, and Mehdi Tibouchi. 2014. Structure-Preserving Signatures from Type II Pairings. In Advances in Cryptology - CRYPTO 2014. 390–407.
- **[4]** Masayuki Abe, Fumitaka Hoshino, and Miyako Ohkubo. 2016. Design in Type-I, Run in Type-III: Fast and Scalable Bilinear-Type Conversion Using Integer Programming. In Advances in Cryptology - CRYPTO. Springer, 387–415.
- **[5]** Joseph A. Akinyele, Gilles Barthe, Benjamin Grégoire, Benedikt Schmidt, and Pierre-Yves Strub. 2014. Certified Synthesis of Efficient Batch Verifiers. In IEEE 27th Computer Security Foundations Symposium. IEEE Computer Society, 153–165.
- **[6]** Joseph A. Akinyele, Christina Garman, and Susan Hohenberger. 2015. Automating Fast and Secure Translations from Type-I to Type-III Pairing Schemes. In ACM SIGSAC Conference on Computer and Communications Security. ACM, 1370–1381.
- **[7]** Joseph A. Akinyele, Matthew Green, and Susan Hohenberger. 2013. Using SMT Solvers to Automate Design Tasks for Encryption and Signature Schemes. In ACM SIGSAC Conference on Computer and Communications Security. ACM, 399–410.
- **[8]** Joseph A. Akinyele, Matthew Green, Susan Hohenberger, and Matthew W. Pagano. 2012. Machine-Generated Algorithms, Proofs, and Software for the Batch Verification of Digital Signature Schemes. In the ACM Conference on Computer and Communications Security. ACM, 474–487.
- **[9]** Joseph A. Akinyele, Matthew Green, Susan Hohenberger, and Matthew W. Pagano. 2014. Machine-Generated Algorithms, Proofs, and Software for the Batch Verification of Digital Signature Schemes. Journal of Computer Security 22, 6 (2014), 867–912.
- **[10]** José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, Matthew Campagna, Ernie Cohen, Benjamin Grégoire, Vitor Pereira, Bernardo Portela, Pierre-Yves Strub, and Serdar Tasiran. 2019. A Machine-Checked Proof of Security for AWS Key Management Service. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1231–1247.