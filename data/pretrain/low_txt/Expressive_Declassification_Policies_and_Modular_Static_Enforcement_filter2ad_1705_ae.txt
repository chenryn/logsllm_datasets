### Recent Proposals for Declassification

Many recent proposals for declassification have highlighted various shortcomings and anomalies, which motivate the "prudent principles" we address in Section 10. A notable work by van der Meyden [35] builds upon Rushby's influential analysis of declassification policies, which require interfering flows to pass through channels labeled at a level representing trusted sanitization code [27]. Similar to our approach, these works distinguish between low and high events, purging the latter to eliminate timing leaks. However, our work addresses finer-grained policies and their enforcement in a concrete programming language.

### Gradual Release and Cryptographic Primitives

Our work is directly inspired by the gradual release paper [4], particularly the semantic property introduced in its first part. Our formalization differs, as we correct a significant weakness in the attacker model: in their model, the attacker observes no steps if the computation does not terminate. For terminating computations, their low events include both termination and low writes. Askarov and Sabelfeld [4] extend gradual release to programs using cryptographic primitives, where declassification is an atomic action achieved by releasing a previously secret key. The data of interest is already released but encrypted under that key. In Section 2 of [4], there are brief comments on combining gradual release with delimited release [28], but no specific details on how this would be implemented. Gradual release is enforced by a standard type system, including the constraint that declassification commands are low [4]. This aligns with our results, as we use a similar type system and consider every flow specification to have agreements for all secrets read by the declassification.

### Verification and Relational Logic

Any logic or verification system can be used to discharge the "valid pre-assertion" proof obligation (Definition 6.2(2)). Tools like ESC/Java and Spec# [7] can reason about pointer isolation (see Section 8). To verify relational correctness (Definition 6.2(3)), Benton's [8] relational logic suffices for the simple imperative language in Section 3 and can be implemented by self-composition [26]. Motivated by the less conservative analysis provided by logics compared to traditional type systems, Amtoft et al. [1] develop a relational logic for object-based programs, using regions to express agreements (called "independences") for anonymous objects. This approach allows the prevention of illegal flows while permitting standard programming idioms, including low/high aliases to objects with both low and high fields. Additionally, it enables the expression of fine-grained flow policies, as proposed here.

### State Predicates and Release Policy

Our use of state predicates in release policy is inspired by Chong and Myers [11], who formulate the idea elegantly relative to an abstract notion of "conditions" and means for verifying them. Policy is expressed using fancy types that label variables and designate a series of "conditions" after which the secret may be released. While they do not provide examples of temporal series of events, their security property caters to such scenarios. Our proposal is more definite (and thus less general) in tying conditions to state predicates, which can express past events using specification-only history variables. Their security property is rather weak, as noted in [29]: the program is non-interferent until the conditions are met, after which there is no constraint on what might leak. Another proposal for state-dependent labels [10] conditions the level on a boolean ghost variable, subject to updates in program annotations, thereby expressing where in the code declassification is allowed. This is subsumed by our proposal.

### Bisimulation and Declassification Policies

Several interesting proposals treat "where" declassification policies using notions of bisimulation that "reset" the program state at each release, which, for sequential code, does not correspond to feasible attacks. Pre-assertions can be sensibly combined with any means to specify where in the code declassification is permitted, potentially achieving an end-to-end property like CGR.

Askarov and Sabelfeld [5] propose a combination of "what" and "where" policies, called localized delimited release, different from ours. The idea is to instrument the semantics to track expressions that have been declassified. The security property is defined as a kind of bisimulation where indistinguishability is with respect to the expressions that have been declassified "up to now." The property is termination-insensitive and differs from gradual release in that, although release cannot happen unless a declassify command executes, the actual change in knowledge may come later. This is illustrated by the example `h0 := h; h := 0; l := declassify(h); h := h0; l := h`, where nothing is learned at the declassify step, but `h` is learned in the last step. Allowing such delayed release might be difficult to reconcile with "when" policies like the accurate audit log in our Section 2. Localized delimited release adheres to the prudent principles and is enforced by the type system for delimited release [28], with the additional restriction against declassification under high branch conditions. It could be interesting to adapt this work to use more semantic reasoning about equivalence of expressions and to incorporate assertions in policies. Adapting the instrumented semantics to features of richer languages, such as heap objects, is not straightforward.

### Discussion

We extend the gradual release security property [4], which uses knowledge to describe information flow, with state conditions and agreements. Conditioned gradual release captures the conditions under which secrets are released, the extent of their release, and the absence of flows except by explicit downgrading actions. Our policy specifications make simple use of static security labels and program assertions, tying information policy directly with application requirements and access mechanisms. Our enforcement regime combines simple type-based rules with program verification. To prove soundness, we devised a novel technique: due to declassification, it is not possible to define a notion of simulation (or unwinding conditions) of the usual sort. Instead, our proof constructs a simulation instance for a given pair of runs. Working out the details led to revisions of several obvious but incorrect definitions. We believe our proofs address the main complications and that the technique will extend to the more complex notion of low-equivalence used for heaps in both [1] and [33] for Jif-style level-polymorphic typing. Heap data structures are essential for many applications.

Zdancewic [38] poses three challenges for information-flow security: integration with existing infrastructure, escaping the confines of pure noninterference, and managing complex policies. Our approach fits well with access control. For example, currently-enabled permissions in Java stack inspection can be tracked in a ghost variable [30], so flow specifications can express what is released given various privileges (cf. [6]). Zdancewic's second challenge is to "escape the confines of pure noninterference"; he mentions both declassification and the conservativity of flow-insensitive static analysis. The third challenge is to manage complex policies. We conjecture that such policies should mostly be expressed using ordinary program specifications, including state-based descriptions of sophisticated access controls.

Sabelfeld and Sands [29] suggest informal principles, with which our proposal seems to be in accord. Semantic consistency states that replacing a "declass-free" subprogram with a semantically equivalent one does not affect security. For an attacker model in which intermediate states are visible, the relevant notion of equivalence is trace equivalence; for this, our proposal is semantically consistent. Such fine-grained observations disallow many standard compiler optimizations, even `skip` for `l := l`, so one must take the principle and theoretical models with a grain of salt. The principle of conservativity corresponds to our Proposition 5.7. This is problematic for [11] because their notion of security is not purely semantic. The principle of monotonicity of release states that adding a declassification cannot make a secure program insecure. This presupposes a treatment of declassification in which there is an explicit construct that can be "added" to a program. Unlike Jif and similar notations, our declassify construct is distinct from policy specifications; if we wrap `l := l` in a declassify, we must also add a baseline flow specification, `flow pre A(l) mod l`, or CGR is violated. The principle of non-occlusion states that adding declassification cannot make an insecure program secure. Our proposal satisfies this principle, as the semantics of an assignment are not altered by marking it as a declassify. A natural extension of our work is to add atomic blocks to the language (c.f. [16]), which would embody a more realistic attacker model for many purposes. Declassification of atomic blocks would not risk occlusion.

### Acknowledgements

The exposition in this version of the paper is improved thanks to feedback from Aslan Askarov, Paul Karger, Andrei Sabelfeld, and anonymous referees. We also thank the organizers and participants of the Dagstuhl Seminar on Mobility, Ubiquity, and Security, held in February 2007.

### References

[1] T. Amtoft, S. Bandhakavi, and A. Banerjee. A logic for information flow in object-oriented programs. In POPL, pages 91â€“102, 2006.
[2] T. Amtoft and A. Banerjee. Verification condition generation for conditional information flow. In FMSE, 2007.
[3] A. Askarov and A. Sabelfeld. Secure implementation of cryptographic protocols: A case study of mutual distrust. In ESORICS, pages 197â€“221, 2005.
[4] A. Askarov and A. Sabelfeld. Gradual release: Unifying declassification, encryption, and key release policies. In IEEE Symp. Security and Privacy, pages 207â€“221, 2007.
[5] A. Askarov and A. Sabelfeld. Localized delimited release: Combining the what and where dimensions of information release. In PLAS, pages 53â€“60, 2007.
[6] A. Banerjee and D. A. Naumann. Stack-based access control for secure information flow. Journal of Functional Programming, 15(2):131â€“177, 2005. Special issue on Language-Based Security.
[7] M. Barnett, K. R. M. Leino, and W. Schulte. The Spec# programming system: An overview. In CASSIS, 2004.
[8] N. Benton. Simple relational correctness proofs for static analyses and program transformations. In POPL, pages 14â€“25, 2004.
[9] G. Boudol. On typing information flow. In ICTAC, 2005.
[10] N. Broberg and D. Sands. Flow locks. In ESOP, pages 180â€“196, 2006.
[11] S. Chong and A. C. Myers. Security policies for downgrading. In ACM CCS, pages 198â€“209, 2004.
[12] D. Clarke and S. Drossopoulou. Ownership, encapsulation, and the disjointness of type and effect. In OOPSLA, pages 292â€“310, 2002.
[13] E. S. Cohen. Information transmission in sequential programs. In R. DeMillo, D. Dobkin, A. Jones, and R. Lipton, editors, Foundations of Secure Computation, 1978.
[14] B. Cook, A. Podelski, and A. Rybalchenko. Termination proofs for systems code. In PLDI, 2006.
[15] D. E. Denning. Cryptography and Data Security. 1982.
[16] C. Flanagan and S. Qadeer. A type and effect system for atomicity. In PLDI, 2003.
[17] B. Hicks, D. King, P. McDaniel, and M. Hicks. Trusted declassification: High-level policy for a security-typed language. In PLAS, pages 65â€“74, 2006.
[18] K. Hristova, T. Rothamel, Y. A. Liu, and S. D. Stoller. Efficient type inference for secure information flow. In PLAS, pages 85â€“94, 2006.
[19] G. T. Leavens, Y. Cheon, C. Clifton, C. Ruby, and D. R. Cok. How the design of JML accommodates both runtime assertion checking and formal verification. In FMCO, 2003.
[20] P. Li and S. Zdancewic. Downgrading policies and relaxed noninterference. In POPL, 2005.
[21] H. Mantel and A. Reinhard. Controlling the what and where of declassification in language-based security. In ESOP, pages 141â€“156, 2007.
[22] P. MÃ¼ller. Modular Specification and Verification of Object-Oriented Programs, volume 2262 of LNCS. Springer-Verlag, 2002.
[23] P. MÃ¼ller and A. Rudich. Ownership transfer in universe types. In OOPSLA, pages 461â€“478, 2007.
[24] A. C. Myers. JFlow: Practical mostly-static information flow control. In POPL, pages 228â€“241, 1999.
[25] D. A. Naumann. Verifying a secure information flow analyzer. In TPHOLS, pages 211â€“226, 2005.
[26] D. A. Naumann. From coupling relations to mated invariants for secure information flow and data abstraction. In ESORICS, 2006.
[27] J. Rushby. Noninterference, transitivity, and channel-control security policies. Technical report, SRI, Dec. 1992.
[28] A. Sabelfeld and A. C. Myers. A model for delimited information release. In ISSS, 2004.
[29] A. Sabelfeld and D. Sands. Dimensions and principles of declassification. Journal of Computer Security, 2007.
[30] J. Smans, B. Jacobs, and F. Piessens. Static verification of code access security policy compliance of .NET applications. Journal of Object Technology, 2006.
[31] S. F. Smith and M. Thober. Improving usability of information flow security in Java. In PLAS, pages 11â€“20, 2007.
[32] M. Strecker. Formal analysis of an information flow type system for MicroJava (extended version). Technical report, Technische UniversitÃ¤t MÃ¼nchen, July 2003.
[33] Q. Sun, A. Banerjee, and D. A. Naumann. Modular and constraint-based information flow inference for an object-oriented language. In SAS, 2004.
[34] T. Terauchi and A. Aiken. Secure information flow as a safety problem. In SAS, pages 352â€“367, 2005.
[35] R. van der Meyden. What, indeed, is intransitive noninterference? In ESORICS, pages 235â€“250, 2007.
[36] D. Volpano and G. Smith. Eliminating covert flows with minimum typings. In CSFW, pages 156â€“169, 1997.
[37] D. Volpano, G. Smith, and C. Irvine. A sound type system for secure flow analysis. Journal of Computer Security, 1996.
[38] S. Zdancewic. Challenges for information-flow security. In PLID, 2004.