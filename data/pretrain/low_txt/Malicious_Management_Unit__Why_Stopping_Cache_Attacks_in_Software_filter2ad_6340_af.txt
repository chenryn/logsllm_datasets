### Scenario of Trusted Components Managing Shared Pages

In scenarios where trusted components, such as the kernel, manage shared pages across security domains, either explicitly (e.g., through kernel buffers) or implicitly (e.g., via deduplicated page tables [9]), an attacker may indirectly control access to these shared pages. Simple coloring mechanisms are insufficient to address this issue. Even if all such scenarios could be identified, implementing a zero-sharing solution compatible with coloring would have profound implications for system design and introduce new performance-security trade-offs. In short, there is no straightforward software fix, and this remains an open challenge for future research.

We also note that addressing this challenge is non-trivial for hardware-based solutions. For example, the published implementation of CATalyst [30] moves page table pages mapping secure pages out of the secure domain, which can potentially open the door to MMU-to-MMU attacks. A quick fix would be to keep secure page table pages within the secure domain, but this would further reduce CATalyst’s number of supported secure pages by a worst-case factor of 5 on a 4-level page table architecture.

### Related Work

#### Cache Attacks and Defenses

We have already covered literature on cache attacks and defenses in Sections 3 and 4. Here, we focus on related work that uses side-channel attacks in the context of Intel SGX and ASLR.

#### Intel SGX

Intel Security Guard eXtensions (SGX) is a feature available on recent Intel processors since Skylake, offering protected enclaves isolated from the rest of the system, including the privileged OS and hypervisor. This allows for the execution of security-sensitive application logic in an untrusted runtime environment. However, when a page fault occurs during enclave execution, control is handed over to the untrusted OS, revealing the base address of the faulting page. This property can be exploited in a controlled-channel (page fault) attack, where a malicious OS can clear the present bit in the Page Table Entries (PTEs) of a victim enclave, obtain a page-level execution trace, and leak information [41].

Several defenses have been proposed to counter controlled-channel attacks. Shih et al. [37] observed that code running in a transaction using Intel TSX immediately returns to a user-level abort handler whenever a page fault occurs, rather than notifying a potentially malicious OS. Their T-SGX compiler wraps each basic block in a transaction guaranteed to trap to a carefully designed springboard page at each attack attempt. Chen et al. [5] extended this design to not only hide page faults but also monitor suspicious interrupt rates. Constan et al. [7] presented Sanctum, a hardware-software co-design that prevents controlled-channel attacks by dispatching page faults directly to enclaves and allowing enclaves to maintain their own virtual-to-physical mappings in a separate page table hierarchy in enclave-private memory. Van Bulck et al. [38] noted that malicious operating systems can monitor memory accesses from enclaves without resorting to page faults by exploiting other side-effects from the address translation process.

#### ASLR

Address Space Layout Randomization (ASLR) is used to mitigate memory corruption attacks by making addresses unpredictable to an attacker. ASLR is commonly applied to user-space applications (e.g., web browsers) and OS kernels (i.e., KASLR) due to its effectiveness and low overhead. Unfortunately, ASLR suffers from various side-channel attacks, which we discuss here.

Memory deduplication, a mechanism for reducing the footprint of applications and virtual machines in the cloud by merging memory pages with the same contents, can be abused to break ASLR and leak sensitive information [2, 4]. Oliverio et al. [32] showed that by only merging idle pages, it is possible to mitigate security issues with memory deduplication. The AnC attack [12] demonstrates an EVICT + TIME attack on the MMU that leaks pointers in JavaScript, breaking ASLR. Hund et al. [20] demonstrated three different timing side-channel attacks to bypass KASLR. The first attack is a variant of PRIME + PROBE that searches for cache collisions with the kernel address. The second and third attacks exploit virtual address translation side channels that measurably affect user-level page fault latencies. Modern operating systems mitigate access to physical addresses, and excessive use of user-level page faults leading to segmentation faults can be prevented [20]. Gruss et al. [15] observed that the prefetch instruction leaks timing information on address translation and can be used to prefetch privileged memory without triggering page faults. Similarly, Jang et al. [22] proposed using Intel TSX to suppress page faults and bypass KASLR.

### Conclusion

In recent years, cache side-channel attacks have established themselves as a serious threat. The research community has scrambled to devise powerful defenses to stop them by partitioning shared CPU caches into different security domains. Due to their scalability, flexibility, and portability, software-based defenses are commonly seen as particularly attractive. Unfortunately, as we have shown, they are also inherently weak. The problem is that state-of-the-art defenses only partition the cache based on direct memory accesses to the cache by untrusted code.

In this paper, we have shown that indirect cache attacks, where another trusted component such as the MMU accesses the cache on the attackers' behalf, are just as dangerous. The trusted component acts as a confused deputy, allowing attackers to mount cache attacks that bypass all existing software-based defenses without violating the cache partitioning mechanisms themselves. We have exemplified this new class of attacks with MMU-based indirect cache attacks and demonstrated their effectiveness against existing defenses in practical settings. We have also discussed mitigations and shown that devising general-purpose software-based defenses that stop arbitrary direct and indirect cache attacks remains an open challenge for future research.

### Acknowledgements

We would like to thank the anonymous reviewers for their valuable feedback. The research leading to these results has received funding from the European Union’s Horizon 2020 Research and Innovation Programme, under Grant Agreement No. 786669, and was supported in part by the MALPAY project and by the Netherlands Organisation for Scientific Research through grants NWO 639.023.309 VICI “Dowsing”, NWO 639.021.753 VENI “PantaRhei”, and NWO 629.002.204 “Parallax”.

### References

[1] Thomas W. Barr, Alan L. Cox, and Scott Rixner. Translation Caching: Skip, Don’t Walk (the Page Table). ISCA ’10.
[2] Antonio Barresi, Kaveh Razavi, Mathias Payer, and Thomas R. Gross. CAIN: Silently Breaking ASLR in the Cloud. WOOT ’15.
[3] Brian N Bershad, Dennis Lee, Theodore H Romer, and J Bradley Chen. Avoiding Conflict Misses Dynamically in Large Direct-Mapped Caches. In ACM SIGPLAN Notices, volume 29, pages 158–170. ACM, 1994.
[4] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector. S&P ’16.
[5] Sanchuan Chen, Xiaokuan Zhang, Michael K Reiter, and Yinqian Zhang. Detecting Privileged Side-channel Attacks in Shielded Execution with Déjà Vu. ASIA CCS ’17.
[6] Patrick Colp, Jiawen Zhang, James Gleeson, Sahil Suneja, Eyal de Lara, Himanshu Raj, Stefan Saroiu, and Alec Wolman. Protecting Data on Smartphones and Tablets from Memory Attacks. ACM SIGPLAN Notices, 50(4):177–189, 2015.
[7] Victor Costan, Ilia A Lebedev, and Srinivas Devadas. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. USENIX Security ’16.
[8] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen. Prime+Abort: A Timer-Free High-Precision L3 Cache Attack using Intel TSX. USENIX Security ’17.
[9] Xiaowan Dong, Sandhya Dwarkadas, and Alan L Cox. Shared Address Translation Revisited. EuroSys ’16.
[10] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU. S&P ’18.
[11] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Translation Leak-aside Buffer: Defeating Cache Side-channel Protections with TLB Attacks. USENIX Security ’18.
[12] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. ASLR on the line: Practical cache attacks on the MMU.
[13] Marc Green, Leandro Rodrigues-Lima, Andreas Zankl, Gorka Irazoqui, Johann Heyszl, and Thomas Eisenbarth. AutoLock: Why Cache Attacks on ARM Are Harder Than You Think. USENIX Security ’17.
[14] Daniel Gruss, Julian Lettner, Felix Schuster, Olya Ohrimenko, Istvan Haller, and Manuel Costa. Strong and Efficient Cache Side-Channel Protection using Hardware Transactional Memory. USENIX Security ’17.
[15] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Mangard. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. CCS ’16.
[16] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. Flush + Flush: A Fast and Stealthy Cache Attack. In Detection of Intrusions and Malware, and Vulnerability Assessment, pages 279–299. Springer, 2016.
[17] David Gullasch, Endre Bangerter, and Stephan Krenn. Cache Games–Bringing Access-Based Cache Attacks on AES to Practice. In S&P ’11.
[18] Andrew Herdrich, Edwin Verplanke, Priya Autee, Ramesh Illikkal, Chris Gianos, Ronak Singhal, and Ravi Iyer. Cache QoS: From Concept to Reality in the Intel® Xeon® Processor E5-2600 v3 Product Family. HPCA ’16.
[19] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical Timing Side Channel Attacks Against Kernel Space ASLR. S&P ’13.
[20] Ralf Hund, Carsten Willems, and Thorsten Holz. Practical Timing Side Channel Attacks Against Kernel Space ASLR. S&P ’13.
[21] Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar. S$A: A Shared Cache Attack that Works Across Cores and Defies VM Sandboxing–and its Application to AES. S&P ’15.
[22] Yeongjin Jang, Sangho Lee, and Taesoo Kim. Breaking Kernel Address Space Layout Randomization with Intel TSX. CCS ’16.
[23] Mehmet Kayaalp, Dmitry Ponomarev, Nael Abu-Ghazaleh, and Aamer Jaleel. A High-Resolution Side-Channel Attack on Last-Level Cache. DAC ’16.
[24] Richard E Kessler and Mark D Hill. Page Placement Algorithms for Large Real-Indexed Caches.
[25] Taesoo Kim, Marcus Peinado, and Gloria Mainar-Ruiz. STEALTHMEM: System-Level Protection Against Cache-Based Side Channel Attacks in the Cloud. USENIX Security ’12.
[26] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre Attacks: Exploiting Speculative Execution.
[27] Nate Lawson. Side-Channel Attacks on Cryptographic Software.
[28] Jochen Liedtke, Hermann Hartig, and Michael Hohmuth. OS-controlled Cache Predictability for Real-time Systems. RTAS ’17.
[29] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel memory from user space.
[30] Fangfei Liu, Qian Ge, Yuval Yarom, Frank Mckeen, Carlos Rozas, Gernot Heiser, and Ruby B Lee. CATalyst: Defeating Last-Level Cache Side Channel Attacks in Cloud Computing. HPCA ’16.
[31] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B Lee. Last-Level Cache Side-Channel Attacks are Practical. S&P ’15.
[32] Marco Oliverio, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. Secure Page Fusion with VUsion. SOSP ’17.
[33] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache Attacks and Countermeasures: the Case of AES. In Cryptographers’ Track at the RSA Conference, pages 1–20. Springer, 2006.
[34] Ashay Rane, Calvin Lin, and Mohit Tiwari. Raccoon: Closing Digital Side-Channels through Obfuscated Execution. USENIX Security ’15.
[35] ARM Limited. PL310 Cache Controller Technical Reference Manual.
[36] CAT Intel. Improving Real-Time Performance by Utilizing Cache Allocation Technology. Intel Corporation, April, 2015.
[37] Ming-Wei Shih, Sangho Lee, Taesoo Kim, and Marcus Peinado. T-SGX: Eradicating Controlled-Channel Attacks against Enclave Programs. NDSS ’17.
[38] Jo Van Bulck, Nico Weichbrodt, Rüdiger Kapitza, Frank Piessens, and Raoul Strackx. Telling Your Secrets Without Page Faults: Stealthy Page Table-Based Attacks on Enclaved Execution. USENIX Security ’17.
[39] Stephan van Schaik, Kaveh Razavi, Ben Gras, Herbert Bos, and Cristiano Giuffrida. RevAnC: A Framework for Reverse Engineering Hardware Page Table Caches. EuroSec ’17.
[40] Barry Duane Williamson. Line Allocation in Multi-Level Hierarchical Data Stores, September 18, 2012. US Patent 8,271,733.
[41] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. S&P ’15.
[42] Yuval Yarom and Katrina Falkner. FLUSH + RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. USENIX Security’14.
[43] Ying Ye, Richard West, Zhuoqun Cheng, and Ye Li. COLORIS: A Dynamic Cache Partitioning System Using Page Coloring. PACT ’14.
[44] Ziqiao Zhou, Michael K Reiter, and Yinqian Zhang. A Software Approach to Defeating Side Channels in Last-Level Caches. CCS ’16.

### Appendix A: Extended Results

**Figure 8:** Comparison of PRIME + PROBE, PRIME + ABORT, XLATE + PROBE, and XLATE + ABORT while applying page coloring or way partitioning with 4, 8, and 12 ways available to the attacker.

**Figure 9:** Demonstration that we can fully mitigate the XLATE family of attacks by extending page coloring to page tables.