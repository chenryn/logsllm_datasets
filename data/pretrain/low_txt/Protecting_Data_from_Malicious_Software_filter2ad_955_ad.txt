### 5.3. Where Does the FileMonster Fit into the Development of Sandboxes?

As previously discussed, a significant amount of research has been conducted on the underlying wrapping technology. It has been demonstrated that wrapping can be effectively implemented on various operating systems in a secure manner. The potential of sandboxing as a defensive mechanism is well-recognized, yet it remains underutilized. The authors of this paper believe that the primary reason for this is the complexity involved in configuring and using existing sandboxing mechanisms. The FileMonster was designed with these challenges in mind.

We are not the first to recognize the need for more user-friendly sandboxing technology. Recent work described in [4] presents a tool called WindowBox, which provides a simplified sandboxing mechanism. This tool offers a form of sandbox separation between applications running on different virtual desktops. Information can only be transferred from one desktop to another with the explicit approval of the user. Belfanz et al. argue that this model provides users with an intuitive way to separate and protect their applications from each other. However, a potential drawback is that all applications on a single desktop have full access to any data associated with that desktop. If a user is tricked into running a malicious program, it could damage any accessible data. To benefit from this model, users must change their work habits and consider how to group applications on desktops. Although we take a different approach, this paper represents a commendable effort to provide a more user-friendly sandbox environment, which we have not had the opportunity to explore firsthand.

While the FileMonster shares some characteristics with application sandboxes, it differs in its focus on protecting a user's documents rather than encapsulating untrusted applications. In this sense, the FileMonster functions more as an extension of an operating system's access control mechanisms. We believe that our prototype protects file resources in a manner that is intuitive for the user and significantly easier to manage. The data-centric model of protection allows users to associate read and write permissions directly with specific files or file types, rather than deciding which applications are dangerous enough to be sandboxed. By default, all applications are subject to the restrictions set by the FileMonster, making it an ideal system for protecting against malicious software that the user may not even realize is executing. Additionally, the ability to require secure file confirmation gives the FileMonster a security advantage over many application sandboxes.

### 6. Discussion

The prototype described in this paper offers a unique solution to the established problem of controlling malicious software within a discretionary access control environment. Other research efforts in the areas of function wrapping and application sandboxing have provided the necessary building blocks, but have not produced a system that is both secure and easy to use. We hope that the FileMonster can fill this gap and provide a much-needed layer of protection against damage or snooping by malicious software of all types.

The FileMonster provides read and write confirmation permissions to increase a user’s awareness of an application’s access to critical documents. The scope of our prototype’s protection is more limited than that of many application-centric measures, which aim to protect all types of resources. The FileMonster does not attempt to protect against nuisance attacks like denial of service or email floods. Instead, we have focused our protective measures on what we believe is most important: defending critical user documents. The FileMonster is most effective and least obtrusive when restricted to protecting important user documents. To this end, we have included features such as session caching and application associations, which make it simple for users to configure the tool to provide an appropriate level of additional security without interfering with normal work habits.

Because the FileMonster relies on the user to make security decisions, the user must have a certain degree of security awareness. They must be able to distinguish between ordinary and potentially malicious file operations. Usually, the context of the operation provides enough information to make a sensible decision. For example, when a user elects to save a document titled "MyDocument.doc," they should expect the FileMonster to present a confirm-on-write dialog box indicating that Microsoft Word is attempting to write to the file. In our experience, most users do not have trouble making these decisions. However, there will undoubtedly be situations that are not as straightforward, and the burden of making the correct decision will fall on the user. We have yet to explore this further in a larger test environment, but we hope to make the FileMonster available for broader use in the near future and to leverage this experience to improve the current concept.

### 7. Future Work

We will continue to improve the FileMonster by reducing the number of unnecessary confirmation requests and improving the user interface. The benchmarking discussed in Section 3.4 will help us quantify the improvements we make to the system. Ultimately, the success or failure of this prototype will depend on its ease of use and unobtrusiveness. Our usability studies so far have focused on reducing the number of spurious confirmation requests, which is crucial because frequent dialog boxes can lead users to disable the FileMonster or ignore actual attacks. Reducing the number of confirmations will increase the relative importance of each one. We plan to further evaluate usability by releasing a version of the tool for public exploration.

One possible improvement to the security and usability of the tool is to introduce hardware-based methods for accepting user confirmations. A device driver could be written to distinguish between a user pressing a key on the keyboard and an application sending a "keystroke" to another application. This would enable the FileMonster to accept confirmation requests on the insecure user desktop without the need to switch to the secure FileMonster desktop, providing the security of secure file confirmation mode with the convenience of simple file confirmation mode.

A known weakness of the FileMonster is the possibility of a malicious attack that manipulates a trusted application to read or damage protected files (discussed in Section 3.2). We have not yet addressed this difficult problem, other than cautioning against the use of application associations in high-security environments. One possible solution is to trap Windows system calls related to the passing of messages between applications, allowing us to restrict the messages sent to trusted applications and prevent malicious software from manipulating trusted programs and attacking protected files.

Another area that needs evaluation is whether users can easily differentiate between benign and malicious confirmation requests. The FileMonster might be improved to help users evaluate the seriousness of a confirmation dialog box. For example, a high importance could be given to confirmation requests originating from applications not part of a set of trusted applications. The easiest method of establishing this trusted code base would be to include all executables on the system at the time the FileMonster was installed or to include all programs configured as application associations.

Testing a user’s ability to differentiate between malicious and benign requests requires a detailed experiment, as we need to ascertain users’ reactions to malicious software when they are not expecting an attack. Our experiments so far have not included actual malicious software attacks. In the future, we hope to conduct a more comprehensive experiment, perhaps through a large-scale evaluation within the computer security community.

### 8. References

[1] A. Berman, V. Bourassa, E. Selberg, “TRON: Process-specific file protection for the UNIX operating system.” In Proceedings of the 1995 USENIX Winter Technical Conference, pages 165--175. USENIX Association, 1995.

[2] R. Balzer, N. Goldman, “Mediating Connectors: A non-bypassable process wrapping technology.” In Proceedings of the 2000 DARPA Information Survivability Conference and Exposition, pp. 361-368, 1999.

[3] M. Blaze, “A Cryptographic File System for Unix.” In Proceedings of the 1st ACM Conference on Computer and Communications Security, Fairfax, Virginia, November 1993, pp. 9--16.

[4] D. Balfanz, D. Simon, “WindowBox: A Simple Security Model for the Connected Desktop.” In Proceedings of the 2000 Windows System Symposium, August, 2000.

[5] F. Chang, A. Itzkovitz, V. Karamcheti, “User-level resource-constrained sandboxing.” In Proceedings of the 4th USENIX Windows Systems Symposium, 2000.

[6] T. Fraser, L. Badger, and M. Feldman, “Hardening COTS Software with Generic Software Wrappers.” In Proceedings of the 1999 IEEE Symposium on Security and Privacy, 1999.

[7] C. Friberg, A. Held, “Support for Discretionary Role Based Access Control in ACL-oriented Operating Systems,” In Proceedings of the 2nd ACM Workshop on Role Based Access Control, pages 83--94. ACM, Fairfax, VA, November 6-7, 1997.

[8] D. Ghormley, D. Petrou, Anderson, T. “SLIC: An Extensibility System for Commodity Operating Systems.” In USENIX 1998 Annual Technical Conference, June 1998.

[9] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer, “A Secure Environment for Untrusted Helper Applications --- Confining the Wily Hacker.” In Proceedings of the 1996 USENIX Security Symposium, 1996.

[10] G. Hunt, D. Brubacher, “Detours: Binary interception of Win32 Functions.” In Proceedings of the 3rd USENIX Windows NT Symposium, July, 1999.

[11] C. Johnson, “GateKeeper Version 1.3 Documentation.” From http://gargravarr.cc.utexas.edu/gatekeeper/gatekeeper.html (May 29, 2001).

[12] T. Jeaeger, A. Prakash, and A. Rubin, “Building systems that flexibly control downloaded executable context.” In Proceedings of the 6th USENIX Security Symposium, 1996.

[13] P. Karger, “Limiting the Damage Potential of Discretionary Trojan Horses.” In Proceedings of the 1987 IEEE Symposium on Security and Privacy, pp. 27-29, April 1987.

[14] G. McGraw, E. Felten. Securing Java: Getting Down to Business with Mobile Code. John Wiley and Sons, 1999.

[15] T. Mitchem, R. Lu, R. O’Brien, “Using Kernel Hypervisors to Secure Applications.” In Proceedings of the 1997 Annual Computer Security Application Conference, December 1997.

[16] C. Pfleeger. Security in Computing. Prentice Hall, NJ, 1997, p. 270.

[17] D. Wagner. “Janus: an approach for confinement of untrusted applications.” Master’s Thesis, UC Berkeley, Computer Science Division, 1996.

* This article reflects the views of the authors only and does not necessarily reflect the views of the Department of Defense or the Defense Advanced Research Projects Agency.

Approved for Public Release, Distribution Unlimited

Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC'02)
1063-9527/02 $17.00 © 2002 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 07:28:30 UTC from IEEE Xplore. Restrictions apply.