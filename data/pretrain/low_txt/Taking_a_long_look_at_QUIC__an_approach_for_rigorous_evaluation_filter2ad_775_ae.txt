### Version Stability and Performance

Despite substantial changes to the QUIC codebase, including reorganization of the code that posed challenges for instrumentation, versions within a certain range produced nearly identical results. This consistency is supported by changelogs [12], which indicate that most modifications were related to cryptography logic, QUIC flags, and connection IDs.

### Performance Consistency Across Versions

Based on the stable performance of recent QUIC versions, we expect our observations about its current congestion control algorithm to remain valid in the future, except where specific improvements have been identified. At the time of writing, the BBR congestion control algorithm had not been deployed in the "stable" branch, preventing a fair comparison with Cubic in QUIC or TCP. A private communication with a QUIC team member indicated that BBR was not yet performing as well as Cubic in deployment tests.

### Comparison with QUIC 37

At the time of publication, the latest stable version of Chromium was 60.0.3112.101, which included QUIC 37 as the latest stable version. To enhance our longitudinal analysis and demonstrate the adaptability of our approach to new QUIC versions, we instrumented, tested, and compared QUIC 37 with version 34 (used in previous experiments).

The primary change in QUIC 37 is an increase in the maximum allowed congestion window (MACW) from 430 to 2000. This allows QUIC to achieve higher throughput, especially in high-bandwidth networks, compared to version 34. Figure 15 shows the comparison between TCP and QUIC version 37 for various object sizes, with MACW set to 430 (Figure 15a) and 2000 (Figure 15b). When comparing Figures 15a and 6a, we find that QUIC versions 34 and 37 have almost identical performance when using the same MACW, corroborated by QUIC version changelogs [12]. Our previous findings, such as QUIC's performance degradation in the presence of deep packet reordering, still hold for this new version.

### Impact of Proxying

We next evaluate the impact of QUIC’s design decisions on in-network performance optimization. Many high-latency networks use transparent TCP proxies to reduce end-to-end delays and improve loss recovery [40]. However, QUIC encrypts both payloads and transport headers, making such proxying impossible for in-network devices.

To assess the impact of this decision, we developed a QUIC proxy and co-located it with a TCP proxy to compare their effects on end-to-end performance (Figure 16). For these experiments, we consider page load times (PLTs) as done in previous sections.

### Experimental Setup and Results

**Figure 16: QUIC Proxy Test Setup**
- **Client's Machine**
- **Server**
- **Router (running network emulator)**
- **Proxy**
- **RTT: 40ms (Client to Proxy), 40ms (Proxy to Server), 80ms (End-to-End)**

**Table 6: Mean (std) of QoE Metrics for a YouTube Video in Different Qualities, Averaged Over 10 Runs (100Mbps, 1% Loss)**
- **QUIC Benefits**: Clear for high-quality videos.
- **Rebuffers**: While the absolute number of rebuffers for QUIC is higher for hd2160, it loads and plays more of the video in a given time compared to TCP, with fewer (about 30%) rebuffers per playing second.

**Figures 17 and 18: QUIC vs. TCP Proxied and Direct Connection Comparisons**
- **Figure 17**: QUIC vs. proxied TCP. Red cells indicate that QUIC performs better.
- **Figure 18**: QUIC with and without proxy. Positive numbers (red cells) mean QUIC performs better connecting directly to the server.

### Conclusions

In low loss/latency scenarios, QUIC's benefits over TCP diminish or disappear when compared to unproxied TCP. In high-delay links, QUIC still outperforms TCP. Proxies can help TCP recover many of the benefits of QUIC, primarily in lossy scenarios and when the proxy is equidistant from the client and server.

For the QUIC proxy, we find that it hurts performance for small object sizes (likely due to inefficiencies and the inability to establish connections via 0-RTT), but performance improves under loss for large objects. Our initial attempt at a QUIC proxy provides mixed results, and further tuning is required to identify additional potential benefits.

### Future Work

- **Performance Evaluation**: Additional operational networks, particularly mobile and data center environments.
- **Fairness Improvement**: Techniques to improve QUIC’s fairness to TCP while maintaining high utilization.
- **Automation and Adaptation**: Automate the steps used for analysis and port the approach to other application-layer protocols. This includes adapting our state-machine inference approach and encouraging developers to annotate state transitions in their code.

### Acknowledgements

We thank the anonymous reviewers and our shepherd Costin Raiciu for their valuable feedback. Jana Iyengar provided comments on early versions of this work. This work is funded in part by NSF grants CNS-1600266 and CNS-1617728.

### References

[1] Android Debug Bridge. https://developer.android.com/studio/command-line/adb.html
[2] Chrome Debugger Protocol. https://developer.chrome.com/devtools/docs/debugger-protocol
[3] Chromium. https://www.chromium.org/Home
[4] I. Grigorik. Deciphering the Critical Rendering Path. https://calendar.perfplanet.com/2012/deciphering-the-critical-rendering-path/
[5] IETF QUIC WG. https://github.com/quicwg
[6] Linux Network Emulation. http://www.linuxfoundation.org/collaborate/workgroups/networking/netem
[7] Linux Traffic Control. http://linux.die.net/man/8/tc
[8] Playing with QUIC. https://www.chromium.org/quic/playing-with-quic
[9] QUIC: A UDP-Based Secure and Reliable Transport for HTTP/2. https://tools.ietf.org/html/draft-tsvwg-quic-protocol-02
[10] QUIC at 10,000 Feet. https://docs.google.com/document/d/1gY9-YNDNAB1eip-RTPbqphgySwSNSDHLq9D5Bty4FSU
[11] QUIC Loss Recovery and Congestion Control. https://tools.ietf.org/html/draft-tsvwg-quic-loss-recovery-01
[12] QUIC Wire Layout Specification. https://docs.google.com/document/d/1WJvyZflAO2pq77yOLbp9NsGjC1CHetAXV8I0fQe-B_U
[13] TCP Probe. https://wiki.linuxfoundation.org/networking/tcpprobe
[14] Welch’s t-test. https://en.wikipedia.org/wiki/Welch%27s_t-test
[15] I. Beschastnikh, Y. Brun, S. Schneider, M. Sloan, and M. D. Ernst. Leveraging Existing Instrumentation to Automatically Infer Invariant-constrained Models. In Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering, 2011.
[16] P. Biswal and O. Gnawali. Does QUIC Make the Web Faster? In IEEE GLOBECOM, 2016.
[17] G. Carlucci, L. De Cicco, and S. Mascolo. HTTP over UDP: An Experimental Investigation of QUIC. In Proc. of SAC, 2015.
[18] Chromium Blog. A QUIC Update on Google’s Experimental Transport. http://blog.chromium.org/2015/04/a-quic-update-on-googles-experimental.html, April 2015.
[19] C. Cimpanu. Google Creates New Algorithm for Handling TCP Traffic Congestion Control. http://news.softpedia.com/news/google-creates-new-algorithm-for-handling-tcp-traffic-congestion-control-508398.shtml, September 2016.
[20] S. R. Das. Evaluation of QUIC on Web Page Performance. Master’s thesis, Massachusetts Institute of Technology, 2014.
[21] M. Dong, Q. Li, D. Zarchy, P. B. Godfrey, and M. Schapira. PCC: Re-architecting Congestion Control for Consistent High Performance. In Proc. of USENIX NSDI, 2015.
[22] N. Dukkipati, N. Cardwell, Y. Cheng, and M. Mathis. An Algorithm for Fast Recovery of Tail Losses. Tail Loss Probe (TLP): https://tools.ietf.org/html/draft-dukkipati-tcpm-tcp-loss-probe-01, February 2013.
[23] M. Fischlin and F. Günther. Multi-stage Key Exchange and the Case of Google’s QUIC Protocol. In Proc. of ACM CCS, 2014.
[24] S. Ha and I. Rhee. Taming the Elephants: New TCP Slow Start. In Comput. Netw., 2011.
[25] T. Jager, J. Schwenk, and J. Somorovsky. On the Security of TLS 1.3 and QUIC against Weaknesses in PKCS#1 v1.5 Encryption. In Proc. of ACM CCS, 2015.
[26] A. Langley, A. Riddoch, A. Wilk, A. Vicente, C. Krasic, D. Zhang, F. Yang, F. Kouranov, I. Swett, J. Iyengar, J. Bailey, J. Dorfman, J. Kulik, J. Roskind, P. Westin, R. Tenneti, R. Shade, R. Hamilton, V. Vasiliev, W.-T. Chang, and Z. Shi. The QUIC Transport Protocol: Design and Internet-scale Deployment. In Proc. of ACM SIGCOMM, 2017.
[27] R. Lychev, S. Jero, A. Boldyreva, and C. Nita-Rotaru. How Secure and Quick is QUIC? Provable Security and Performance Analyses. In Proc. of IEEE Security and Privacy, 2015.
[28] M. Mathis, N. Dukkipati, and Y. Cheng. Proportional Rate Reduction for TCP. https://tools.ietf.org/html/rfc6937, May 2013.
[29] S. McQuistin and C. S. Perkins. Is Explicit Congestion Notification Usable with UDP? In Proc. of IMC, 2015.
[30] P. Megyesi, Z. Krämer, and S. Molnár. How Quick is QUIC? In Proc. of ICC, May 2016.
[31] A. Molavi Kakhki, F. Li, D. Choffnes, A. Mislove, and E. Katz-Bassett. BingeOn Under the Microscope: Understanding T-Mobile’s Zero-rating Implementation. In ACM SIGCOMM Internet-QoE Workshop, Aug. 2016.
[32] R. Netravali, A. Sivaraman, S. Das, A. Goyal, K. Winstein, J. Mickens, and H. Balakrishnan. Mahimahi: Accurate Record-and-replay for HTTP. In Proc. of USENIX ATC, 2015.
[33] A. Nikravesh, H. Yao, S. Xu, D. R. Choffnes, and Z. M. Mao. Mobilyzer: An Open Platform for Controllable Mobile Network Measurements. In Proc. of MobiSys, 2015.
[34] J. Odvarko, A. Jain, and A. Davies. HTTP Archive (HAR) Format. https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html, August 2012.
[35] I. Swett. QUIC Congestion Control and Loss Recovery. https://docs.google.com/presentation/d/1T9GtMz1CvPpZtmF8g-W7j9XHZBOCp9cu1fW0sMsmpoo
[36] I. Swett. QUIC Deployment Experience @Google. https://www.ietf.org/proceedings/96/slides/slides-96-quic-3.pdf, 2016.
[37] I. Swett. QUIC FEC v1. https://docs.google.com/document/d/1Hg1SaLEl6T4rEU9j-isovCo8VEjjnuCPTcLNJewj7Nk/edit, February 2016.
[38] A. Vernersson. Analysis of UDP-based Reliable Transport Using Network Emulation. Master’s thesis, Luleå University of Technology, 2015.
[39] X. S. Wang, A. Balasubramanian, A. Krishnamurthy, and D. Wetherall. How Speedy is SPDY? In Proc. of USENIX NSDI, 2014.
[40] X. Xu, Y. Jiang, T. Flach, E. Katz-Bassett, D. R. Choffnes, and R. Govindan. Investigating Transparent Web Proxies in Cellular Networks. In Proc. PAM, 2015.
[41] Zhang, Ming and Karp, Brad and Floyd, Sally and Peterson, Larry. RR-TCP: A Reordering-Robust TCP with DSACK. In Proceedings of the 11th IEEE International Conference on Network Protocols, ICNP ’03, Washington, DC, USA, 2003. IEEE Computer Society.