### 6.2.1. Impact of Client Model Size on Notification Forwarding

**Figure 7** illustrates the effect of client model size, specifically the number of attributes, on the rate of notification forwarding. As shown in **Figure 6(b)**, the computational costs associated with this process are primarily determined by the total number of output events that the dispatcher must generate. The measured rate of output events is nearly constant for a given feature set (attributes in the address and other parameters) regardless of the branching factor (number of Pongers). Therefore, the primary factor influencing throughput is the size of the potential receiver set. At ten Ponger nodes, the cost is not comparable due to the significant overhead from Java garbage collection and other system activities.

### 6.2.2. Effect of Client Model Size on Performance

The size of the client models, defined by the number of attributes in the exposed address, significantly impacts system performance. The size of a client model is quantified by the number of attributes in its address, which is proportional to half the size of the default filters generated for intentional addressing. **Figure 7** demonstrates how the output notification rate of Selective Notification varies with the size of the attribute model. This experiment was conducted with 60-second message persistence, 10-second filter coagulation, and 50 Ponger applications. The second data point (5 model attributes) corresponds roughly to the attribute model size used in the experiment from which data was collected in **Figure 6**.

### 6.2.3. Round-Trip Message Time

Our experiments recorded the round-trip message time for ping and pong message pairs. **Figure 8** shows the ping-pong time over the course of an experiment, presented in both linear and logarithmic scales. The data is from an experiment with 50 Pongers, where attribute changes occurred every ten seconds and notification persistence was set to 60 seconds. Ten messages were input to the dispatcher per second, ensuring the system was not processor-saturated. The experiment ran for 200 seconds, with an average round-trip time of 220 milliseconds and a standard deviation of 430 milliseconds. Deviations were observed due to persistent notification timeouts, filter coagulation, client model changes, and Java garbage collection. Under the worst-case conditions, the round-trip time could be as high as three or four seconds.

### 6.3. A Model of Scale

From these experiments, it is evident that the throughput of Selective Notification is heavily influenced by the number of clients and dispatchers connected to a dispatcher, as well as the size of client models. The rates of client attribute (model) changes also play a significant role. Using the measurements from the previous section for a dispatcher operating under controlled conditions, we can estimate the maximum throughput potential of Selective Notification in large distributed applications.

To serve a large number of clients, a hierarchy of Selective Notification dispatchers is necessary. For instance, a system with a million clients could be served by a three-level tree of dispatchers if the branching factor is 100. **Figure 9** shows the estimated worst-case notification throughput and delivery time for variations in dispatcher-tree branching factor and resource dedication. We consider dedicated dispatcher networks (labeled with solid shapes), where dispatchers use all computational resources, and peer dispatcher networks (labeled with shape outlines), where dispatchers use one-tenth of the resources while clients use the remainder.

Using our current implementation, a dedicated dispatcher tree with a branching factor of one thousand can support a notification every three seconds and deliver events in four seconds to a million elements. With a branching factor of ten, a peer dispatcher tree can support four notifications per second, delivered in 60 seconds. By using dedicated dispatchers at higher levels of the tree and peer dispatchers at lower levels, intermediate results for both notification rate and throughput can be achieved. For example, 10,100 dedicated dispatchers at the base of the tree with a branching factor of 100, followed by peer dispatchers with a branching factor of ten to the clients, would result in four notifications per second with a 24-second delivery time.

### 7. Conclusions

We have introduced a comprehensive and symmetric approach to communication between managing entities and managed entities, which has immediate utility in dealing with security attacks and other traumas requiring rapid reconfiguration of large networked information systems. Our experimental assessment of the implementation suggests that the approach scales and provides acceptable performance. It may be possible to cope with worm attacks in very large networks through rapid, targeted event dissemination, as illustrated in Section 4.

While additional properties in management relationships are necessary to implement loosely coupled management, symmetric decoupled communication can serve as a backbone for potential architectures. These systems will allow flexible, dynamic, and run-time management relationships to reflect and change with system and manager state. As a result, traditional management structures, such as hierarchies, may be applicable to very large and dynamic systems, including those with more widely distributed and cooperative forms of management.

### 8. Acknowledgements

We are grateful for many helpful discussions about this work and the Siena software system with Antonio Carzaniga, Alex Wolf, and Dennis Heimbigner. This work was supported in part by the Defense Advanced Research Projects Agency under grant N66001-00-8945 (SPAWAR) and the Air Force Research Laboratory under grant F30602-01-1-0503. The views and conclusions contained in this document are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA, the Air Force, or the U.S. Government.

### References

[1] W. Adjie-Winoto, E. Schwartz, H. Balakrishnan, and J. Lilley. "The design and implementation of an intentional naming system." Operating Systems Review, Vol. 34 No. 5, pp 186-2001, December 1999.

[2] A. Carzaniga, D. Rosenblum, A. Wolf. "Design and Evaluation of a Wide-Area Event Notification Service." ACM Transactions on Computer Systems, Vol. 19, No. 3, pp. 332-383, August 2001.

[3] A. Carzaniga, A. Wolf. "Content-based Networking: A New Communication Infrastructure." NSF Workshop on an Infrastructure for Mobile and Wireless Systems. In conjunction with the IEEE International Conference on Computer Communications and Networks, Scotsdale AZ, October, 2001.

[4] G. Cugola, E. Di Nitto, A. Fuggetta. "The JEDI event-based infrastructure and its application to the development of the OPSS WFMS." IEEE Transactions on Software Engineering, Volume: 27 Issue: 9, pp 827 -850, September 2001.

[5] P. Eugster, P. Felber, R. Guerraoui, A. Kermarrec. "The Many Faces of Publish/Subscribe." Microsoft Research Technical Report EPFL, DSC ID:2000104, January 2001.

[6] B. Gerkey, M. Mataric. "Murdoch: Publish/Subscribe Task Allocation for Heterogeneous Agents." Fourth ACM International Conference on Autonomous Agents, Barcelona, Spain, June 2000.

[7] R.S. Hall, D. Heimbigner, A.L. Wolf. "A Cooperative Approach to Support Software Deployment Using the Software Dock." IEEE/ACM International Conference on Software Engineering, Los Angeles CA. May 1999.

[8] D. Heimbigner. "Adapting publish/subscribe middleware to achieve Gnutella-like functionality." Eighth Annual Workshop on Selected Areas in Cryptography, pp 176-181, Toronto, Canada, 2001.

[9] C. Intanagonwiwat, R. Govindan, D. Estrin. "Directed Diffusion: A Scalable and Robust Communication Paradigm for Sensor Networks." ACM International Conference on Mobile Computing and Networking, Boston MA. August 2000.

[10] J. Martin-Flatin, S. Znaty, J. Hubaux. "A Survey of Distributed Network and Systems Management Paradigms." Journal of Network and Systems Management, Vol.7, No. 1, pp 9-22. 1999.

[11] N. Skarmeas, K.L. Clark. "Content based routing as the basis for intra-agent communication." Fifth International Workshop on Intelligent Agents(V): Agent Theories, Languages, and Architectures, Paris, France, July 1998.

[12] W. Vogels, C. Re, R. van Renesse, K. Birman. "A Collaborative Infrastructure for Scalable and Robust News Delivery." IEEE Workshop on Resource Sharing in Massively Distributed Systems, Vienna, Austria, July 2002.

[13] R. van Renesse, K. Birman. "Scalable Management and Data Mining Using Astrolabe." First International Workshop on Peer-to-Peer Systems. Cambridge, Massachusetts. March 2002.

---

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)  
0-7695-2052-9/04 $ 20.00 © 2004 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 11:50:41 UTC from IEEE Xplore. Restrictions apply.**