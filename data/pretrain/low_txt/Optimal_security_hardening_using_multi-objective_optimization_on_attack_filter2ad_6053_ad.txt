### Results and Analysis

The following results are presented based on the parameters selected in the previous section. It is generally recommended that a preference-based approach should normalize the functions before combining them into a single function. However, we observed no significant changes in the solutions when normalizing Problem 1. Figure 5 illustrates the solutions obtained from multiple runs of the Simple Genetic Algorithm (SGA) for Problem 1 with varying values of \(\alpha\). Typically, a decision maker might assign equal weights to both objective functions by setting \(\alpha = 0.5\).

Figure 5 shows that such an assignment does not necessarily provide the desired balance between residual damage and total security control cost. Additionally, this balance cannot be achieved by assigning weight values close to 0.5. The solutions are highly sensitive to the weights, and in this case, a much higher preference must be given to the total security control cost to find alternative solutions. Since the weights do not always influence the objectives as intended, understanding their effect is a non-trivial task for a decision maker. Conducting an exhaustive analysis of the weight effects on the objectives is also not always feasible. Given these challenges, the decision maker should consider obtaining a comprehensive view of the possible trade-offs.

### Multi-Objective Optimization and Sensitivity Analysis

With this requirement in mind, we now consider Problem 2. Figure 6 displays the solutions obtained from a single run of the Non-dominated Sorting Genetic Algorithm II (NSGA-II) on Problem 2. NSGA-II identified all the solutions from multiple SGA runs, along with three additional solutions. Notably, there are no solutions in the intermediate range of [25, 45] for residual damage. This concentration of solutions at the extremes suggests a lack of variety in the security controls under consideration. Most security controls for the example network involve either disabling or patching a service, resulting in a sparse coverage matrix. For a more continuous Pareto front, it is necessary to have security controls with comparable costs and the ability to cover multiple services. A larger, more complex real-world problem would likely include more attack scenarios and a mix of both local and global security controls, reducing gaps in the Pareto front.

Once the decision maker has a better perspective on the possible solutions, further analysis can be conducted in terms of sensitivity to security control failures. Such sensitivity analysis is valuable for reducing decision-making time and ensuring some level of fault tolerance in the network. Figure 6 also shows the sensitivity of one solution to a failure in one of the security controls. For instance, a solution with security controls SC4 and SC11 will incur high residual damage if SC4 fails. Therefore, the decision maker may perform a sensitivity analysis on each solution to inform the final choice. However, the decision maker has limited control over the additional residual damage incurred in the event of a failure.

### Robustness and Perturbation Analysis

Problem 3 addresses this issue by allowing the decision maker to specify the maximum allowed perturbation in residual damage. The scope of failure, represented by the radius \(r\), can also be specified to analyze the robustness of the solutions. In this study, we focus on obtaining fully robust solutions, where the residual damage should not increase, and thus set \(D\) to zero. Due to the sparse nature of the coverage matrix, we set the perturbation radius \(r\) to 1. Figure 7 shows the solutions obtained for this problem.

### Robust Solutions

The solutions to Problem 3 reveal that none of the previously obtained optimum solutions, except the trivial zero security control cost (SCC) solution, are fully robust, even for a single security control failure. Table 4 lists the security controls corresponding to the robust solutions. With the goal of achieving a good balance between residual damage and total security control cost, the decision maker's choice can be justifiably biased towards Solution R3.

### Properties of Solution R3

We present some interesting properties exploited by Solution R3 from the attack tree. To highlight the key features, we compress the attack tree for our example network model, as shown in Figure 8. Solution R3 clearly identifies the existence of subtrees ST1 and ST2. In the event of a failure of SC11, n7 would collect a value of 10.8. Since n3 has an AND decomposition with SC7, it will be disabled, thereby not contributing its individual damage value of 12 to the residual damage at that node (10.8). If SC7 fails, SC11 will disable n7, which in turn will disable n3. In this case, the residual damage at n3 would be zero. Similarly, n6 and n8 never propagate a residual damage of more than 10.8 to their parent node. Consequently, n2 never propagates a value more than 13.5. The individual cost of 36 at n1 is never added to this residual damage value of 13.5 from n2, as n1 is always falsified by security controls SC3 and SC4, only one of which is assumed to fail at a time. The solution wisely applies security controls covering multiple attack scenarios and at multiple points in those scenarios to minimize damage.

### Conclusion and Future Work

In this paper, we addressed the system administrator's dilemma of selecting a subset of security hardening measures from a given set to minimize the total implementation cost while staying within budget and minimizing the cost of residual damage. One key contribution of our approach is the use of an attack tree model of the network to guide the optimization process. By using an attack tree, we were able to better direct the optimization by providing knowledge about the attributes that make an attack possible. A systematic analysis enabled us to approach the problem in a modular fashion, providing the decision maker with additional information to form a concrete opinion about the quality of different trade-off solutions.

The cost model adopted in this paper is somewhat simplistic. We assume that, from a cost of implementation perspective, the security measures are independent of each other, which may not be the case in real life. Additionally, we have assumed that the system administrator's decision is not influenced by an understanding of the cost to break the system. The possible decomposition of an attack tree to divide the problem into sub-problems is an interesting area to explore. Finally, there is a dynamic aspect to the system administrator's dilemma, where decisions may need to be revised during runtime based on emerging security conditions. In future work, we plan to refine our model to incorporate these scenarios.

### Acknowledgments

This work was partially supported by the U.S. Air Force Office of Scientific Research under contract FA9550-07-1-0042. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing official policies, either expressed or implied, of the U.S. Air Force or other federal government agencies.

### References

[1] Ammann, P., Wijesekera, D., and Kaushik, S. Scalable, Graph-Based Network Vulnerability Analysis. In Proceedings of the Ninth Conference on Computer and Communications Security (Washington, DC, USA, 2002), pp. 217–224.

[2] Berger, B. Data-centric Quantitative Computer Security Risk Assessment. Information Security Reading Room, SANS (2003).

[3] Butler, S. Security Attribute Evaluation Method: A Cost-benefit Approach. In ICSE 2002: Proceedings of the 24rd International Conference on Software Engineering (Orlando, FL, USA, 2002), pp. 232–240.

[4] Butler, S., and Fischbeck, P. Multi-attribute Risk Assessment. In Proceedings of SREIS02 in conjunction of 10th IEEE International Requirements Engineering Conference (Raleigh, NC, USA, 2002).

[5] Coello, C. A. C. An Updated Survey of GA-based Multiobjective Optimization Techniques. ACM Computing Surveys 32, 2 (2000), 109–143.

[6] Dawkins, J., Campbell, C., and Hale, J. Modeling Network Attacks: Extending the Attack Tree Paradigm. In Proceedings of the Workshop on Statistical Machine Learning Techniques in Computer Intrusion Detection (Baltimore, MD, USA, 2002), Johns Hopkins University.

[7] Deb, K. Multi-objective Optimization Using Evolutionary Algorithms. John Wiley & Sons Inc., 2001.

[8] Deb, K., Pratap, A., Agarwal, S., and Meyarivan, T. A Fast and Elitist Multiobjective Genetic Algorithm: NSGA–II. IEEE Transactions on Evolutionary Computation 6, 2 (2002), 182–197.

[9] Goldberg, D. E. Genetic Algorithms in Search, Optimization, and Machine Learning. Addison-Wesley, 1989.

[10] Gupta, M., Rees, J., Chaturvedi, A., and Chi, J. Matching Information Security Vulnerabilities to Organizational Security Policies: A Genetic Algorithm Approach. Decision Support Systems 41, 3 (2006), 592–603.

[11] Jha, S., Sheyner, O., and Wing, J. M. Two Formal Analysis of Attack Graphs. In Proceedings of the 15th IEEE Computer Security Foundations Workshop (Cape Breton, Nova Scotia, Canada, 2002), pp. 49–63.

[12] Lee, W. Toward Cost-sensitive Modeling for Intrusion Detection and Response. Journal of Computer Security 10, 1 (2002), 5–22.

[13] Moore, A., Ellison, R., and Linger, R. Attack Modeling for Information Survivability. Technical Note CMU/SEI-2001-TN-001, Carnegie Melon University / Software Engineering Institute, March 2001.

[14] Noel, S., Jajodia, S., O’Berry, B., and Jacobs, M. Efficient Minimum-cost Network Hardening via Exploit Dependency Graphs. In Proceedings of the 19th Annual Computer Security Applications Conference (Las Vegas, NV, USA, 2003), pp. 86–95.

[15] Phillips, C., and Swiler, L. A Graph-Based System for Network-Vulnerability Analysis. In Proceedings of the 1998 New Security Paradigms Workshop (Chicago, IL, USA, 1998), pp. 71–79.

[16] Ray, I., and Poolsappasit, N. Using Attack Trees to Identify Malicious Attacks from Authorized Insiders. In ESORICS 2005 (Milan, Italy, 2005), pp. 231–246.

[17] Schneier, B. Attack Trees. Dr. Dobb’s Journal (1999).

[18] Sheyner, O., Haines, J., Jha, S., Lippmann, R., and Wing, J. M. Automated Generation and Analysis of Attack Graphs. In SP 2002: Proceedings of the IEEE Symposium on Security and Privacy (Oakland, CA, USA, 2002), pp. 273–284.

[19] Stoneburner, G., Goguen, A., and Feringa, A. Risk Management Guide for Information Technology Systems. NIST Special Publication 800–30 (2002).

[20] Swiler, L., Phillips, C., Ellis, D., and Chakerian, S. Computer-Attack Graph Generation Tool. In Proceedings of the DARPA Information Survivability Conference and Exposition II (Anaheim, CA, USA, 2001), pp. 307–321.