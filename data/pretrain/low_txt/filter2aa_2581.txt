# Security Measurement and Assuring Reliability through Metrics Technology (SMART)

## Applying Reliability Metrics to Security Vulnerabilities
**Authors: Wayne Zage, Dolores Zage, Blake Self**

### Presentation Outline
1. **Background/Overview of S2ERC and Design Metrics**
2. **Vulnerability Analyses**

---

## Background/Overview of S2ERC and Design Metrics

### Security and Software Engineering Research Center (S2ERC)
- **Establishment**: Founded in 1986 and extended in 2010.
- **Participation**: Over ten universities with more than 50 researchers.
- **Key Features**: Collaborative, customized projects and technology transfer to affiliates.

### S2ERC Participating Universities
- Ball State
- DePaul
- Illinois at Chicago
- Iowa State
- IUPUI
- IPFW
- Penn State
- Purdue
- West Florida
- Limerick

### S2ERC Industrial Affiliates
- Angie’s List
- Bingham McHale
- Blue Cross Blue Shield
- Boeing
- John Deere
- Intelligent Information Technologies
- Iowa Dept. of Transportation
- Lockheed Martin
- MacAulay Brown
- NASA
- Northrop Grumman
- Ontario Systems
- Raytheon
- NSWC – Crane
- Rockwell Collins
- TIAA
- Union Pacific
- US Army Research Lab
- US Dept. of Homeland Security

### S2ERC Design Metrics Research Timeline
- **1986-2003**: Reliability studies, technology development, industry validation, and symposiums.
- **2004-2009**: High-reliability process development, industry-funded research, and workshops.

### S2ERC National Recognition
- **2007 Alexander Schwarzkopf Prize for Technological Innovation**: Awarded by the NSF I/UCRC Association for developing software design metrics that identify fault-prone modules early in the software lifecycle, significantly improving software quality and productivity.

### Overview of the Design Metrics, De and Di
- **De (External Metric)**: Provides an external view of design complexity.
  - Formula: \( De = e1 \times (inflows \times outflows) + e2 \times (fan\ in \times fan\ out) \)
  - Example: \( De = ( (2+2+3) \times (1+2) ) + (1 \times 2) = 23 \)

- **Di (Internal Metric)**: Provides an internal view of design complexity.
  - Formula: \( Di = w1 \times CC + w2 \times DSM + w3 \times I/O \)
  - Where:
    - \( CC \): Central Calls (procedure or function invocations)
    - \( DSM \): Data Structure Manipulations (references to complex data types)
    - \( I/O \): Input/Output (external device accesses)

### Funding and Application
- **Funding Sources**:
  - National Science Foundation
  - Motorola Corp.
  - Nortel Technologies
  - Telcordia Technologies
  - Northrop Grumman Corp.
  - Computer Sciences Corp.
  - GTE Data Services
  - Magnavox Electronic Systems Co.
  - Harris Corp.
  - Raytheon
  - US Army Research Lab
  - Ball State University

- **Application**:
  - University-based projects
  - CSC’s STANFINS project
  - Systems from the US Army Research Lab
  - Harris’ ROCC project
  - Magnavox’s AFATDS project
  - PBX system from Telcordia Technologies
  - Three Northrop Grumman projects
  - Three Raytheon projects
  - Telecommunications systems from Motorola

- **Results**: The design metrics correctly identified at least 76% of the defect-prone modules 100% of the time.

---

## Extending Design Metrics Technology to a Software Security Engineering Process

### Software Reality
- **Complexity**: Involves multiple technologies and suppliers.
- **Defects**:
  - Intentional vulnerabilities
  - Unintentional vulnerabilities

### SMART Project Objectives
- **Investigate Overlap and Interrelationships**: Examine the software constructs that affect both reliability and security.
- **Develop Security Metrics**: Identify, categorize, and analyze security weaknesses.

### Representative Systems/Technologies
- Drupal
- OpenSSH
- Apache HTTP Server
- OpenSolaris
- Firefox

### General Process of Metric/Vulnerability Analysis
1. **Vulnerability Updates by Module**
2. **Selected System’s Published CVS Reports**
3. **Vulnerability Updates Scan**
4. **Parses Metrics + Vulnerabilities**
5. **Analysis and Match CWE Category**
6. **Results/Reports**

### Case Studies

#### Apache HTTP Server
- **Design and Development**: Designed by Robert McCool and developed by the Apache Software Foundation.
- **Popularity**: Since April 1996, Apache has been the most popular HTTP server, serving over 46% of all websites as of March 2009.
- **Vulnerabilities**:
  - Version 1.3.1: 144 files, 8 vulnerabilities identified.
  - **Metric Analysis**: 87.5% or 7 out of the 8 vulnerable modules were identified in the top 10%.

#### OpenSolaris
- **Base and Release**: Based on Sun Microsystems' Solaris, latest release 2009.06.
- **Vulnerabilities**:
  - 22,600 files, 23 module updates from vulnerabilities totaling 37 changes.
  - **Metric Analysis**: 60% or 3 out of the 5 vulnerable modules or 69% or 9 out of 13 changes were identified.

#### Firefox
- **Design and Development**: Developed by Mozilla Corporation.
- **Popularity**: 22.05% of web browser usage share as of March 2009.
- **Vulnerabilities**:
  - Multiple versions studied.
  - At least 51% and at most 86% of reported vulnerabilities are in Data Handling.
  - Data Structure Manipulations (DSM) is the best predictor of vulnerabilities.

#### OpenSSH
- **Development**: Developed by the OpenBSD Project.
- **Latest Release**: 5.5/5.5p1 on 04/16/2010.
- **Vulnerabilities**:
  - Files: 243, Modules: 2,437, Definitions: 2,992, Preprocessor directives: 5,147, User-defined include files: 1,101, Conditional expressions: 61,815, XML tags: 703,850.
  - 31 vulnerable modules identified.
  - **Metric Analysis**: 18 of the 31 vulnerable modules in the top 10% (58%), 23 in the top 20% (74%).

#### Drupal
- **Initial Release**: January 2001.
- **Latest Release**: 6.17 in June 2010.
- **Technology**: Written in PHP, cross-platform, open-source content management system.
- **Vulnerabilities**:
  - Constructed the Drupal Vulnerabilities Miner (DVM).
  - Isolated 277 RCS file patches from 140 vulnerability updates.
  - Approximately 105 Drupal PHP files.

### Benefits
- **Prioritization**: Knowledge of where vulnerabilities are likely to reside helps prioritize security efforts.
- **Coverage**: Analyzing multiple technologies and mapping vulnerabilities to the Common Weakness Enumeration (CWE) ensures comprehensive coverage.
- **Commonality and Individuality**: Merging multiple technologies through mapping individual XML representations isolates common and unique aspects.

### Next Research Steps
- **Continue Analysis**: Further analysis of open-source systems.
- **Investigate Primitives**: Explore other primitives to identify and categorize security weaknesses.
- **Apply to Other Systems**: Extend the technology to non-open-source systems.
- **Network Model Integration**: Combine findings into a network model.

---

This optimized version provides a clear, coherent, and professional overview of the SMART project and its objectives, along with detailed case studies and future research directions.