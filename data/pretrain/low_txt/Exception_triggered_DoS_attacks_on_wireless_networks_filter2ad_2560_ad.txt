### Authorized Use and Download Information
- **Authorized User**: Tsinghua University
- **Download Date**: March 20, 2021
- **Download Time**: 09:58:48 UTC
- **Source**: IEEE Xplore
- **Restrictions**: Apply as per the license agreement.

### Figure 7: MIPv6 Binding Error and Bind Ack Vulnerability

**Vulnerability Overview**:
1. **Binding Error Vulnerability**:
   - According to Mobile IPv6 [18], if a BINDING ERROR message is sent from the Correspondent Node (CN) to the Mobile Node (MN) with the status field set to 2 (indicating an unrecognized mobility header), the MN should cease its attempt to use route optimization.
   - Since the BINDING ERROR message is not protected, it can be easily spoofed by an attacker to nullify the Return Routability (RR) procedure.
   - As shown in Figure 7, when the attacker sniffs the BINDING UPDATE sent by the MN, it sends a spoofed BINDING ERROR to the MN. If the spoofed BINDING ERROR reaches the MN earlier than the valid BINDING ACKNOWLEDGEMENT from the CN, the MN will discard the valid BINDING ACKNOWLEDGEMENT, causing the RR procedure to fail.
   - The attacker typically has a loose time window for this attack because the CN is usually far from the MN, while the attacker is in the same wireless network as the MN.

2. **Binding Acknowledgement Vulnerability**:
   - Similar to the binding error vulnerability, the BINDING ACKNOWLEDGEMENT messages with status codes 136, 137, and 138 indicate errors and are not protected [18].
   - These messages can be easily spoofed by an external entity and accepted by the MN.
   - The timing diagram in Figure 7 provides the details of this vulnerability.

**Disrupting On-Going Sessions**:
- The vulnerabilities can also be used to disrupt route optimization in on-going sessions, not just new ones.
- Mobile IPv6 RFC states that the RR procedure is repeated every few minutes to maintain communication and update binding keys.
- For example, in the MIPL [4] implementation, binding keys are updated every 3 minutes by performing the RR procedure again.
- Therefore, the attacker only needs to wait at most 3 minutes to disrupt an on-going session’s route optimization using the two vulnerabilities described above.

### 5. Evaluation

In this section, we describe our evaluations of the exception-triggered attack on both TLS-based EAP protocols and MIPv6 Return Routability procedures.

#### 5.1 Evaluation on TLS-based EAP Protocols

**5.1.1 Real-world Experiment**

**Experiment Methodology**:
- The university's wireless network authenticates users using PEAP (Protected EAP) [8], which adopts PEAPv0/EAP-MSCHAPv2 with TLSv1.1 [13] as the security method.
- The Access Point (AP) passes the EAP messages to the back-end authentication server for processing.
- In our experiment, we used up to three laptops as normal clients to connect to the university’s wireless network, while another laptop acted as the attacker.
- We first conducted controlled in-lab experiments using different wireless cards in various operating systems as normal users and launched DoS attacks against them.
- We tested the following wireless network management utilities: 
  1. Windows native client utility of Windows XP and Vista
  2. Dell utility
  3. Proxim utility
  4. Linux Network Manager utility of Ubuntu
- We also tested the attack with 1 to 3 clients connecting to the network simultaneously.
- Additionally, we tested the attack in the university’s cafeteria, where the clients were more diverse and out of our control.

**Experimental Results**:
- **Feasibility**:
  - Different WLAN card management programs have quite different automatic retry functions. For example, the Windows native client utility of Windows XP and Vista, and the Dell utility try to connect to the network only once. If the authentication fails, they do not automatically retry the connection but wait for user-initiated actions.
  - The Proxim utility and the Linux Network Manager utility of Ubuntu store the supplied credentials and automatically retry to connect even if it fails multiple times.
  - Although the automatic retry function may make the attack harder, we did not find any difference in the attack success rate in our real experiments.
  - We found that, on average, it takes 0.29 milliseconds for the attacker to compute and send a spoofed message after encountering an appropriate message.

- **Success Rates**:
  - In our lab experiments, we tested our DoS attack against 1 to 3 clients attempting to connect to the major university’s wireless network simultaneously.
  - Our attacker always achieved a 100% success rate with the default CWMin parameter, as no clients could get authenticated and enter the wireless network under the attack.
  - In the university’s cafeteria, our attacker was 100% successful in these experiments on the channel it was running on, as we did not detect even a single EAP SUCCESS message. This experiment ran for 35 minutes, and all 7 different hosts observed failed authentications.

- **Efficiency**:
  - Unlike jamming-based attacks, the exception-triggered attack does not need to send attack messages frequently.
  - For the error message-based attack, it only costs the attacker one spoofed error message of 79 bytes, compared to 14 messages of a total length of 1480 bytes between the victim clients and the TLS server.
  - The attack efficiency ratio for spoofing error messages is 5.34% in terms of packet volume and 7.14% in the number of messages.
  - For the misleading message-based attack, the length of the SERVER HELLO message is 119 bytes, and there is only one attack point. The efficiency ratio in terms of packet volume is 8.04%, and the ratio in the number of messages is 7.14%.

**5.1.2 Ns-2 Simulation**

**Simulation Methodology**:
- We simulated the DoS attack of spoofing a server in the ns-2 simulator [5] to study the performance and scalability of our attacker.
- Ns-2, by itself, does not have the TLS and EAP protocols, so we first implemented the TLS and EAP modules in it.
- In our simulation, we simulated the error message-based attack of spoofing the server.
- The attacker spoofs a FATAL ALERT message and sends it to the client whenever it sniffs a relevant message from the TLS client to the TLS server.
- The attacker was active at two attack points, the same as the real attacker (See Section 3.2.1).
- The attacker has the ability to change the CWMin parameter of his WLAN card drivers, so the attacker can potentially get fast access to the channel.
- We varied the CWMin of the attacker node from 1 to 31, while keeping the CWMin as 31 for all other nodes.
- The automatic retry feature is also implemented into the TLS protocol. The TLS authentication process is restarted if the client fails in its authentication attempt. By default, the client tries for a maximum of 18 times before giving up completely.
- In our ns-2 simulation setup, we created one TLS server, one TLS attacker, and varied the number of TLS clients from 1 to a maximum of 50.
- The inter-arrival time between clients is very small, randomly chosen between 0 and 0.5 seconds, ensuring that the authentications of all clients are overlapped.
- The access points broadcast BEACON messages every 50 ms, as observed in real experiments.
- The TLS server and access points are connected via a wired network in practice. For convenience, we put them on the same node and injected certain latency in the communication between the TLS server and the access point. The default latency is set to 10 ms, which is observed in our real experiment in the campus setting.

**Experimental Results**:
- **Figure 8** shows the attack success rate with different CWMin values as a function of the number of clients. Except for CWMin = 31, the attack stops all authentication attempts, regardless of the number of clients trying simultaneously.
- With CWMin as 31, the attacker has the same ability as normal clients to access the channel, and hence, with certain probability, the attack packets are later than the legitimate responses, allowing some clients to get authenticated.
- Interestingly, we see that the authentication success rate goes up first and then drops to zero. By inspecting the logs carefully, we find that when the number of clients is small (e.g., less than 10), the TLS server delay plays an important role. The attack packet usually gets into the channel during the 10 ms delay. However, as the number of clients increases, the attacker may have to wait more than 10 ms to get the channel when other nodes, by chance, occupy the channel to send packets. So the 10 ms advantage of the attacker over the AP is mitigated.
- As the number of clients keeps increasing, the AP has more and more packets in its queue, causing the TLS server response to be delayed for a long time at the AP. On the other hand, the attacker packets usually are not queued because the attacker has much fewer packets to send than the AP.
- **Figure 9** shows the effect of the TLS server delay on the attack success rate.