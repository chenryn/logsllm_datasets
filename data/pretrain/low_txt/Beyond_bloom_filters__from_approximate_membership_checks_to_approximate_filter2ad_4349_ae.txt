### Optimized Text

We utilized a widely referenced MPEG-encoded movie, "susi 040.mpg," available from the Tektronix FTP site [22], which is also used by the MPEG standards committee. The file composition includes 8.5% I-Frames, 25% P-Frames, and 66.5% B-Frames. In terms of byte distribution, 29% of the bytes are from I-Frames, 35% from P-Frames, and 34% from B-Frames.

In our experiments, we evaluated various frame dropping methods, comparing final results based on the loss rate measured in bytes. We tested several dropping strategies:
1. **Random Loss**: Randomly drops frames.
2. **B-Frame Dropping**: Selectively drops B-Frames randomly (requiring standards changes as described in [9]).
3. **Packet Random Dropping with I-Frame Tail Dropping**: Randomly drops packets and performs pure I-frame tail dropping, where once an I-Frame packet is dropped, all subsequent packets and intermediate frames are dropped until the next I-Frame.
4. **Combined B-Frame and I-Frame Dropping**: Initially drops B-Frames up to a maximum drop probability (we found that dropping more than 20% of B-Frames degrades video quality), followed by I-Frame tail dropping.

To compare the performance of these schemes uniformly, we converted the frame loss probability into a byte loss probability for the latter two strategies. The first two strategies have been previously evaluated in [9]. To our knowledge, the third and fourth strategies are novel. Generally, we believe that ACSMs (Approximate Concurrent State Machines) can enable a broader range of video drop policies than previously thought possible.

For each strategy, we identified two thresholds:
- **Threshold 1**: The loss threshold at which the video is almost completely unaffected.
- **Threshold 2**: The threshold at which the video quality becomes unacceptable.

These thresholds are perceptual, and the key takeaway is that selective video dropping can enhance user satisfaction during periods of limited bandwidth.

**B-Frame Loss Experiment**:
- We parsed the video file and dropped B-Frames according to a specified B-Frame loss probability.
- We played the modified video using the Windows Media Player and gradually increased the loss probability until we observed the first errors (Threshold 1) and until the quality became unacceptable (Threshold 2).
- We then reported Threshold 1 and 2, converting the frame loss probability to a byte loss probability by summing the lengths of all dropped frames and dividing by the total number of bytes in the original video.

**Results**:
- **Random Drop**: Artifacts are noticeable even at a very low drop rate (2%). Beyond a 15% drop rate, the picture quality is severely degraded. Thus, Threshold 1 is 2%, and Threshold 2 is 15%.
- **B-Frame Dropping**: Dropping B-Frames had minimal impact on picture quality but affected the temporal plane, causing scene skipping at high losses. Up to a 6% drop rate, quality remains acceptable. Quality degrades significantly at around 12%.
- **I-Frame Tail-Dropping**: Artifacts appear at a 3% drop rate, but severe degradation occurs only at a 25% drop rate.
- **Combined B-Frame and I-Frame Dropping**: Using B-Frame dropping up to a 6% loss probability, followed by I-Frame tail dropping, this scheme performs similarly to pure B-Frame dropping, with artifacts becoming noticeable at 6% and severe degradation at a 30% loss rate.

**Summary**:
- The combined scheme has the best thresholds (6%, 30%).
- Uniform drop probability (as in RED) ensures fairness across all video streams.
- For the combined scheme, a counter tracks the total current B-Frame byte loss probability, and random loss of other frame packets is initiated when this counter exceeds a threshold.

**Example of ACSM Implementation**:
- We used an FCF ACSM with a 14-bit fingerprint, 3 bits for state, and 1 bit for a timer to classify frame types and drop status per stream using I-Frame tail dropping.
- To prevent bucket overflow, we used a utilization of 2/3 for the maximum number of simultaneous flows.
- The probability of incorrectly dropping a packet (false positive or "Don’t Know") was 0.37%, and the probability of not dropping a video packet that should have been dropped (false negative) was 0.38%.
- These small error probabilities do not significantly affect the video congestion policy, and the net state per stream is reduced to 27 bits compared to 100 bits for the complete state scheme, resulting in a nearly fourfold reduction in memory without much impact on the video policy.

**Comparison with Previous Work**:
- Our results for improved quality with B-Frame dropping align with earlier studies (e.g., [9]), which report a 2 to 3 dB gain in PSNR using B-Frame dropping.
- However, [9] does not provide results for I-Frame tail dropping.

**Limitations**:
- Our video did not include audio, and perceptual methods can vary among users.
- Nonetheless, the results suggest the potential of ACSMs for video congestion, providing a rich set of implementable video drop policies in routers and switches without requiring standards changes.

### 5.2.2 Real-time Identification of P2P Traffic

Recent studies [10] have shown that Peer-to-Peer (P2P) traffic continues to grow, reaching alarming percentages, such as 30% of all traffic at peering points. Many organizations and ISPs aim to control such traffic in favor of mission-critical traffic. However, P2P traffic often conceals itself, tunneling through well-known ports like Port 80 and operating on any port number, making simple port-based discrimination ineffective. A recent proposal [19] suggests identifying P2P packets by looking for content signatures within packets, but P2P protocols increasingly use encryption to obfuscate their payloads.

A more compelling approach, as shown in [10], involves detecting certain traffic flow patterns using simple state machines, which can accurately identify P2P flows. For example, a (DestIP, SourceIP) pair with concurrent UDP and TCP connections has a high probability of being P2P traffic. Another test uses patterns of (IP, port) pairs.

**ACSMs for P2P Identification**:
- We believe that ACSMs can benefit real-time P2P identification and control.
- [10] uses extensive offline trace analysis, which is useful for post-facto traffic characterization but slow for real-time control.
- ACSMs can be used for online, real-time characterization, providing fast control (e.g., rate limiting).

**Simulation Results**:
- We simulated the simplest state machine test in [10] (TCP-UDP pairs) using a synthetic log with 64K active flows, each with an average of 15 packets.
- We varied the P2P percentage parameter, which controls the fraction of TCP flows with a concurrent UDP flow.
- The experiment compared the number of misclassified flows using an ACSM versus a full state machine.

**Results**:
- **15% P2P Traffic**: 0% False Positive, 0.29% False Negative, 0.17% Don’t Know (DK)
- **25% P2P Traffic**: 0% False Positive, 0.31% False Negative, 0.156% DK
- **40% P2P Traffic**: 0% False Positive, 0.34% False Negative, 0.149% DK

Even when combining these probabilities, the misclassification rates are comparable to those reported in [10] for the heuristics themselves (e.g., false positive rates of 6%). The slight loss in fidelity is offset by a significant reduction in memory (from 96 bits per flow to 18 bits per flow using ACSMs), making it feasible to implement with a few Mbits of on-chip SRAM, even at speeds of 20 Gbps and higher.

**Limitations**:
- We used a synthetic model, which may not capture all dynamics of real traffic.
- We did not implement the full state machine in [10].
- Our model only included UDP connections starting within TCP connections, not vice versa.

**Conclusion**:
- P2P identification is likely to be an ongoing arms race, with P2P authors potentially changing their programs to evade detection.
- Programmable ACSMs can be reprogrammed to employ new detection state machines, similar to updating virus definitions.

### 6. Conclusion

In this paper, we introduced Approximate Concurrent State Machines (ACSMs). Similar to Bloom filters, our best scheme combines hashing and fingerprints, using d-left hashing to achieve near-perfect hash functions in dynamic settings. Surprisingly, for membership checking in a dynamic set, our data structure requires less space than a comparable counting Bloom filter.

ACSMs are particularly relevant to the trend of networking devices becoming more application-aware, often by maintaining a state machine for each TCP flow. Due to the high memory requirements (e.g., 1 million concurrent connections for IDS devices), implementations often use low-speed DRAM, limiting speeds to a few Gbps. By reducing memory needs by a factor of 5 or more, ACSMs enable on-chip SRAM and higher-speed implementations. The small probabilities of error are often tolerable for Application Level QoS mechanisms, as they only mean adjusting the QoS level for occasional connections.

We demonstrated the potential uses of ACSMs for application-aware forwarding, specifically for Active Queue Management schemes for video flows and real-time detection and control of P2P traffic. We also believe programmable ACSMs can be a powerful tool for traffic analysis. Our investigation of applications is preliminary, and more detailed experiments are needed to confirm the promise of ACSMs for practical applications. This paper focuses on introducing the problem, three specific data structures to solve it, and the analytical and simulation comparison of these schemes. Given the widespread use of Bloom filters and related variants, we anticipate that ACSMs will find many new applications in the future.

### 7. References

[1] E. Amir, S. McCanne, M. Vitterli. A Layered DCT coder for Internet Video. In Proc. IEEE International Conference on Image Processing, Lausanne, Switzerland, Sept 1996.

[2] B. Bloom. Space/time tradeoffs in hash coding with allowable errors. Communications of the ACM, 13(7):422-426, 1970.

[3] A. Broder and M. Mitzenmacher. Using multiple hash functions to improve IP Lookups. In Proceedings of IEEE INFOCOM, pp. 1454-1463, 2001.

[4] A. Broder and M. Mitzenmacher. Network applications of Bloom filters: A survey. Internet Mathematics, 1(4):485-509, 2004.

[5] B. Chazelle, J. Kilian, R. Rubinfeld, and A. Tal. The Bloomier filter: An efficient data structure for static support lookup tables. In Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms (SODA), pp 30-39, 2004.

[6] F. Bonomi, M. Mitzenmacher, R. Panigrahy, S. Singh, and G. Varghese. An Improved Construction for Counting Bloom Filters. To appear in the 2006 European Symposium on Algorithms.

[7] S. Dharmapurikar, P. Krishnamurthy, T. Sproull, and J. Lockwood. Deep Packet Inspection using Parallel Bloom Filters. In IEEE Hot Interconnects 12, Stanford, CA, August 2003. IEEE Computer Society Press.

[8] L. Fan, P. Cao, J. Almeida, and A. Z. Broder. Summary cache: A scalable wide-area Web cache sharing protocol. IEEE/ACM Transactions on Networking, 8(3):281-293, 2000.

[9] D. Forsgren, U. Jennehag, P. Osterberg. Objective End-to-end QoS Gain from Packet Prioritization and Layering in MPEG-2 streaming video. At http://amp.ece.cmu.edu/packetvideo2002/papers/61-ananhseors.pdf

[10] T. Karagiannis, A. Broido, M. Faloutsos, and K.C. Claffy. Transport Layer Identification of P2P Traffic. In Proceedings of ACM SIGCOMM, 2004.

[11] T. Karagiannis, A. Broido, M. Faloutsos, and K.C. Claffy. BLINC: Multilevel Traffic Classification in the Dark. In Proceedings of ACM SIGCOMM, 2005.

[12] A. Kirsch and M. Mitzenmacher. Simple Summaries for Hashing with Multiple Choices. In Proc. of the Forty-Third Annual Allerton Conference, 2005.

[13] Y. Lu, B. Prabhakar, and F. Bonomi. Bloom Filters: Design Innovations and Novel Applications. In Proc. of the Forty-Third Annual Allerton Conference, 2005.

[14] Steve McCanne. Scalable Compression and Transmission of Internet Multicast Video. Ph.D. Thesis, Berkeley.

[15] M. Mitzenmacher. Compressed Bloom Filters. IEEE/ACM Transactions on Networking, 10(5):613-620, 2002.

[16] M. Mitzenmacher and E. Upfal. Probability and Computing: Randomized Algorithms and Probabilistic Analysis. Cambridge University Press, 2005.

[17] A. Pagh, R. Pagh, and S. Srinivas Rao. An Optimal Bloom Filter Replacement. In Proceedings of the Sixteenth Annual ACM-SIAM Symposium on Discrete Algorithms (SODA), pp. 823-829, 2005.

[18] A. Romanow and S. Floyd. Dynamics of TCP Traffic over ATM Networks. IEEE Journal on Selected Areas in Communications, 13(4): 633-641, 1995.

[19] S. Sen, O. Spatscheck, and D. Wang. Accurate, Scalable In-network Identification of P2P Traffic Using Application Signatures. In 13th International World Wide Web Conference, New York City, 17-22 May 2004.

[20] H. Song, S. Dharmapurikar, J. Turner, and J. Lockwood. Fast hash table lookup using extended Bloom filter: An aid to network processing. In Proceedings of ACM SIGCOMM, pp. 181-192, 2005.

[21] A. Snoeren, C. Partridge, L. Sanchez, C. Jones, F. Tchakountio, B. Schwartz, S. Kent, and W. Strayer. Single-Packet IP Traceback. IEEE/ACM Transactions on Networking, 10(6):721-734, 2002.

[22] Tektronix FTP site, ftp://ftp.tek.com/tv/test/streams/Element/MPEG-Video/625/

[23] K. Thomson, G. J. Miller, and R. Wilder. Wide-area traffic patterns and characteristics. IEEE Network, December 1997.

[24] B. Vöcking. How asymmetry helps load balancing. In Proceedings of the 40th IEEE-FOCS, pp. 131-140, 1999.