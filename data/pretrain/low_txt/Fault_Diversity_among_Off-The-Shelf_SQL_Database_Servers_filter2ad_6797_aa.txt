# Fault Diversity among Off-The-Shelf SQL Database Servers

**Authors:**
- Ilir Gashi
- Peter T. Popov
- Lorenzo Strigini

**Affiliation:**
Centre for Software Reliability, City University, Northampton Square, London, EC1V 0HB

**Contact:**
- Ilir Gashi: [Email]
- Peter T. Popov: [Email]
- Lorenzo Strigini: [Email]

## Abstract

Fault tolerance is often the only viable way to achieve the required system dependability when using "off-the-shelf" (OTS) products. We studied a sample of bug reports from four OTS SQL servers to estimate the potential benefits of software fault tolerance, specifically through modular redundancy with diversity, in complex OTS software. We examined whether these bugs would cause coincident failures in more than one server. Our findings indicate that very few bugs affected two of the four servers, and none caused failures in more than two. Only four bugs would result in identical, undetectable failures in two servers. Therefore, a fault-tolerant server built with diverse OTS servers appears to offer significant improvements in availability and failure rates compared to individual OTS servers or their replicated, non-diverse configurations.

## 1. Introduction

When systems are built using "off-the-shelf" (OTS) products, fault tolerance is often the only feasible method to achieve the necessary system dependability [23, 30, 12]. Fault tolerance can take various forms, from simple error detection and recovery add-ons (e.g., wrappers [22]) to full-fledged "diverse modular redundancy" [16], which involves replication with diverse versions of components. Even this latter class of solutions becomes cost-effective with many OTS products and has the advantage of a relatively simple architecture. The cost of acquiring two or more OTS products (some of which may be free) is significantly lower than developing a custom solution.

These design solutions are well-documented in the literature. For developers using OTS components, the key questions are about the dependability gains, implementation challenges, and additional costs associated with these solutions.

To investigate these issues for a realistic category of OTS products, we chose SQL database servers. These are complex products with numerous faults in each release and features that imply an accepted possibility of incorrect behavior, albeit rare. An example is the known "write skew" [3] problem in some optimistic concurrency control architectures [7]. Further dependability improvements for OTS SQL servers seem possible only through fault tolerance via design diversity [11]. Given the many available OTS SQL servers and the standardization of their functionality (SQL 92 and SQL 99), it seems reasonable to build a fault-tolerant SQL server from existing OTS servers.

The effort required to develop an SQL server using design diversity (e.g., several OTS SQL servers and suitably adapted middleware) necessitates strong evidence of its usefulness. This paper begins to explore such empirical evidence by investigating the potential of design diversity to deliver significant dependability improvements for SQL servers compared to solutions that can only tolerate crash failures. To this end, we conducted experiments to determine the dependability gains achieved through fault tolerance.

A preliminary evaluation step concerns fault diversity rather than failure diversity. By manually selecting test cases, one can check whether the diverse redundant configuration would tolerate known bugs in the repositories of bugs reported for the various OTS servers. We conducted a study on four SQL servers, both commercial and open-source, and collected known bug reports for these servers. For each bug, we ran the test case that would trigger it on all four servers (if possible) to check for coincident failures. We found the number of coincident failures to be very low.

This paper is structured as follows:
- Section 2: Background and motivation of the study and related work.
- Section 3: Description of how the study was conducted and the terminology for classifying faults.
- Section 4: Presentation of the quantitative results obtained.
- Section 5: Description of the bugs that caused coincident failures.
- Section 6: Discussion of the potential reliability gains from using diverse OTS SQL servers.
- Section 7: Conclusions and possible future work.

## 2. Background and Related Work

### 2.1. Fault Tolerance in Databases

Software fault tolerance has been extensively studied and successfully applied in various sectors, including databases. Standard database mechanisms such as "transaction rollback and retry" and "checkpointing" can be used to tolerate faults due to transient conditions. These techniques can be used with or without data replication in the databases.

There are many solutions for data replication [4, 33, 20], either as a feature of many commercial SQL servers or as middleware that can be used with a variety of SQL servers. Typically, these replication solutions work with sets of identical servers. Jimenez-Peris et al. [13] discuss the various ways in which database replication with OTS servers can be organized, namely treating the servers as white, grey, or black boxes. All commercial offerings are of the white-box kind, where code necessary for replication is added inside the server product. The grey-box approach, as implemented in [14], assumes that servers provide specific services to assist with replication. The black-box approach uses the standard interfaces of the servers. Both the grey and black box approaches are implemented via middleware on top of the existing servers. To the best of our knowledge, a common assumption in known replication solutions is that the SQL servers will fail in a "fail-stop" manner [26], with detectable clean crashes, leaving a copy of a correct state for use in recovery. This assumption simplifies the protocols for data replication and allows for performance optimization.

### 2.2. Studies of Faults and Failures

The usefulness of diversity depends on the frequency of those failures that cannot be tolerated without it. There have been relatively few related studies. Gray studied the TANDEM NonStop system [10] and observed that over an unspecified measured period, only one out of 132 faults caused deterministic failures, i.e., the same failure was observed on retry. Gray calls these "Bohrbugs." The others, which he calls "Heisenbugs," caused failures under special conditions (e.g., created by a combination of the state of the operating system and other software), making them difficult to reproduce artificially. Heisenbugs, if detected, can be tolerated by replication without diversity, as in the Tandem system. A later study [17] of field software failures for the Tandem Guardian90 operating system found that 82% of the reported field software faults were tolerated. However, 18% of the faults led to both non-diverse processes in a Tandem process failing, resulting in a system failure.

Related studies exist on the determinism and fail-stop properties of database failures, but they, like our study, concern faults rather than failure measurements. A study [5] examined fault reports of three applications (Apache Web server, GNOME, and MySQL server). Only a small fraction (5-14%) of the faults were Heisenbugs triggered by transient conditions that would be tolerated by a simple "rollback and retry" approach. However, the reason for the few Heisenbugs might be that people are less likely to report faults they cannot reproduce, as acknowledged by the authors in [5]. In another study [6], the same authors found (via fault injection) that a significant number of faults (7%) violated the fail-stop model by writing incorrect data to stable storage. Even though this number falls to 2% when applying the Postgres95 transaction mechanism, it remains high for applications with stringent reliability requirements.

### 2.3. Diversity with Off-the-Shelf Applications

Other researchers have also considered the potential of diversity for improving the dependability of OTS software. Various architectures have been proposed that use diversity for intrusion tolerance, such as HACQIT [25], which demonstrates diverse replication (with two OTS web servers - Microsoftâ€™s IIS and Apache web server) to detect failures (especially maliciously caused ones) and initiate recovery; SITAR [32], an intrusion-tolerant architecture for distributed services and especially COTS servers; or the Cactus architecture [12], intended to enhance the survivability of applications supporting diversity among application modules. Another example [2] uses diverse Java virtual machines for interoperability rather than for tolerating failures.

## 3. Description of the Study

### 3.1. Bug Reports

We used two commercial (Oracle 8.0.5 and Microsoft SQL Server 7 (without any service packs applied)) and two open-source (PostgreSQL Version 7.0.0 and Interbase Version 6.0) SQL servers in this study. Interbase, Oracle, and MSSQL were run on the Windows 2000 Professional operating system, whereas PostgreSQL (which is not available for Windows) was run on RedHat Linux 6.0 (Hedwig).

We only considered bugs that caused failure of a server's core engine, excluding bugs affecting client application tools or various connectivity APIs (JDBC/ODBC, etc.), as these functions would be provided by the middleware in a future fault-tolerant architecture.

For each server, there is an accessible repository of known bug reports. We collected:
- Interbase bugs [27] reported between August 2000 and August 2001.
- PostgreSQL bugs [24] reported between May 2000 and January 2001.
- Oracle bugs [19] reported between September 1998 and December 2002.
- MSSQL bugs [18] for both MSSQL 7 and MSSQL 2000, available as of August 2003, that included "bug scripts" and were core engine bugs.

For Oracle and MSSQL, we collected reports from longer periods because some reports do not include bug scripts, and we could not verify the presence of the bug in other servers. Extending the collection period allowed us to obtain reasonably large (though imperfect) samples of bug reports. Despite this, the sample for Oracle contained only 18 bugs, as most reports omitted the bug scripts.

### 3.2. Reproducibility of Failures

All these servers offer features that are extensions to the basic SQL standard, and these extensions differ among the servers. For each reported bug, we attempted to run the corresponding bug script. Full details are available in [8].

## 4. Quantitative Results

[Insert quantitative results here]

## 5. Bugs Causing Coincident Failures

[Insert description of bugs causing coincident failures here]

## 6. Potential Reliability Gains

[Insert discussion of potential reliability gains here]

## 7. Conclusions and Future Work

[Insert conclusions and possible future work here]

---

**Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSNâ€™04)**
0-7695-2052-9/04 $ 20.00 Â© 2004 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22, 2021, at 04:18:53 UTC from IEEE Xplore. Restrictions apply.