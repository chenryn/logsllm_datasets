### Julian Grizzard - DEFCON 13 Presentation

#### Memory Hierarchy Detail
- **Slide 47**: Memory Hierarchy Detail
- **Slide 48**: Spine Architecture - Attacking
- **Slide 49**: Example 2 (VFS - /proc)
- **Slide 50**: Example 2 - Sys Call Uses VFS
- **Slide 51**: Example 2 - /proc Filesystem
- **Slide 52**: Example 2 - File Operations
- **Slide 53**: Example 2 - Read Directory
- **Slide 54**: Example 2 - Attacking

#### Recovery Methods
- **Manual methods** similar to SCT work.
- **Consistency checking on function pointers and hashing of execution code** is generally effective.
- **Maintain a good copy of the known good state** to facilitate repair.
- **IRS (Intrusion Recovery System)** can automate this process.

#### Demos
- **Intrusion Recovery System Demonstration**

#### Limitations and Conclusions
- **Can an attacker install a microkernel-level rootkit?**
- **What if the attacker has physical access?**
- **There is no one-size-fits-all solution.** However, an IRS can enhance system reliability.

#### Acknowledgments
- **Henry Owen, John Levine, Sven Krasser, Greg Conti, Jonathan Torian, Lawrence Phillips, Jessica Frame, Andrew Davenport, and many more.**

#### Links
- [Network and Security Architecture website](http://www.ece.gatech.edu/research/labs/nsa/index.shtml)
- [Georgia Tech Information Security Center](http://www.gtisc.gatech.edu/)
- [Fiasco project](http://os.inf.tu-dresden.de/fiasco/)
- [Xen](http://www.cl.cam.ac.uk/Research/SRG/netos/xen/)
- [Samhain Labs](http://la-samhna.de)
- [Chkrootkit](http://www.chkrootkit.org)
- [DaWheel, “So you don’t have to reinvent it!”](http://www.dawheel.org)

#### Questions
- **Starter Questions:**
  1. How many have personally dealt with recovery from a rootkit?
  2. Has anyone seen any rootkits that use direct memory access?
  3. Has anyone ever cleaned a system infected with a rootkit without reinstalling?

**Contact:**
- Julian Grizzard
- grizzard AT ece.gatech.edu

#### Additional Slides
- **User-Level versus Kernel-Level**
  - **User-Level**: Modify/replace system binaries (e.g., ps, netstat, ls, top, passwd).
  - **Kernel-Level**: Modify/replace kernel processes (e.g., system call table).

- **Additional Malware Functionality**
  - **Information harvesting**: Credit cards, bank accounts.
  - **Resource usage**: Spam relaying, distributed denial of service.

- **Entry Redirection and Overwrite**
  - **Entry Redirection**: Trojaned read system call; active SCT points to it.
  - **Entry Overwrite**: System call code overwritten; SCT still intact.
  - **Table Redirection**: Handler points to Trojan table.

- **History of Kernel-Level Rootkits**
  - **Heroin (October 1997)**: First public LKM.
  - **Knark (June 1999)**: Highly popular LKM.
  - **SucKIT (December 2001)**: First public /dev/kmem entry.
  - **Adore-ng 0.31 (January 2004)**: Uses VFS redirection; works on Linux 2.6.X.

- **Kernel-Level Rootkit Targets**
  - System call table.
  - Interrupt descriptor table.
  - Virtual file system layer.
  - Kernel data structures.

- **Kernel Entry**
  - Linux kernel module (LKM).
  - /dev/kmem, /dev/mem, /dev/port.
  - Direct memory access (DMA).
  - Modify kernel image on disk.

- **System Call Table Modifications**
  - System calls are the main gateway from user space to kernel space.
  - Most commonly targeted kernel structure.
  - Can redirect individual system calls or the entire table.

- **Example Kernel-Level Rootkits**
  - **adore-ng**: VFS Redirection, Module.
  - **kmem r.tgz, zk, sucKIT**: SCT Table Redirection, kmem.
  - **adore, knark, heroin**: SCT Entry Redirection, Module.

- **System Call Table Tools**
  - Developed tools to query and repair the system call table.
  - Based on sucKIT source code and work from user space.
  - Algorithm to recover from rootkits is similar to the algorithm used by rootkits.

- **Virtual Machines/Hypervisors**
  - VMware, User Mode Linux, Xen, L4.

- **History of Microkernels**
  - Mach project (CMU, 1985), QNX, Windows NT, LynxOS, Chorus, Mac OS X.

- **Microkernel Requirements**
  - Tasks, IPC, I/O Support.

- **L4 IPCs**
  - Fast IPCs, Flexpages, Clans and chiefs, System calls, page faults as IPCs.

- **L4 I/O (from Fiasco lecture slides)**
  - Hardware interrupts mapped to IPC.
  - Special thread ID for interrupts.
  - No sharing support, one thread per interrupt.
  - Cli/sti only allowed in kernel and trusted servers.
  - I/O memory and I/O ports: flexpages.
  - Missing feature: pass interrupt association.
  - I/O port access, DMA - big security risk.

- **Rmgr (lecture slides)**
  - Resources: serves page faults (physical memory, I/O ports, tasks, interrupts).

- **Booting the System (lecture slides)**
  - Modified grub, multi-boot specification.
  - Rmgr, sigma0, root task (rmgr II).
  - IDT, GDT vs. LDT.

- **L4 Security Problems**
  - Passing interrupt association.
  - Direct memory access.
  - Fill up page mapping database.
  - Kernel accessible on disk.
  - Cli/sti.

- **Spine Architecture Details**
  - Uses L4 Fiasco microkernel.
  - L4Linux runs on top of the microkernel.
  - User tasks run on L4Linux.
  - Intrusion recovery system consists of levels 0 through 3.

- **L4Linux**
  - Port of Linux kernel to L4 architecture.
  - Paravirtualization vs. pure virtualization.
  - Linux kernel runs in user space.
  - Binary compatible.

- **Intrusion Recovery System**
  - Capable of recovering from rootkit installations.
  - Maintains a copy of known good state to verify system integrity and repair if needed.
  - Must be an integral part of the operating system.

- **Multi-Level IRS Reasoning**
  - Difficult to monitor the state of the entire system from one vantage point.
  - Bridging the semantic gap between layers of the system.
  - Multi-level approach:
    - **L3**: Verify file system state and repair if needed.
    - **L2**: Kernel module to verify integrity of L4Linux and L3 and repair if needed.
    - **L1**: Microkernel modifications to verify state of L2 and repair if needed; provides secure storage for known good state.
    - **L0**: Hardware support for maintaining isolation and verifying L1 (more hardware needed).