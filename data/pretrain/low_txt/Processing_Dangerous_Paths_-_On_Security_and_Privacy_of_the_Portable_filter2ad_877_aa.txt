# Processing Dangerous Paths: On Security and Privacy of the Portable Document Format

**Authors:**
- Jens Müller
- Dominik Noss
- Christian Mainka
- Vladislav Mladenov
- Jörg Schwenk

**Affiliation:**
- Ruhr University Bochum
- Email: [PI:EMAIL]

## Abstract
The Portable Document Format (PDF) is the de facto standard for document exchange. It is common to open PDF files from potentially untrusted sources such as email attachments or downloads from the internet. In this work, we perform an in-depth analysis of the capabilities of malicious PDF documents. Instead of focusing on implementation bugs, we exploit legitimate features of the PDF standard by systematically identifying dangerous paths in the PDF file structure. These dangerous paths lead to attacks that we categorize into four generic classes:
1. Denial-of-Service (DoS) attacks affecting the host that processes the document.
2. Information disclosure attacks leaking personal data from the victim’s computer.
3. Data manipulation on the victim’s system.
4. Code execution on the victim’s machine.

An evaluation of 28 popular PDF processing applications shows that 26 of them are vulnerable to at least one attack. Finally, we propose a methodology to protect against attacks based on PDF features systematically.

## I. Introduction
The Portable Document Format (PDF) is arguably the most widely used format for office document exchange. While the total number of PDF files is impossible to estimate, Adobe announced that 250 billion documents were opened by Adobe products in 2018 [59]. PDF documents are heavily used in business-to-business and consumer scenarios, such as exchanging, creating, and archiving invoices and contracts, submitting scientific papers, and collaborating on and reviewing texts.

### A. Powerful Document Features
Introduced in 1993 by Adobe, PDF was designed to provide a consistent representation of documents, independent of the platform. It supports numerous advanced features, including cryptography, calculation logic [44], 3D animations [5], JavaScript [2], and form fields [6]. A PDF document can be updated or annotated without losing previous revisions [7] and define specific actions [4], such as displaying a specific page when the viewer opens the document. PDF also allows embedding different data formats, such as XML [8] and Flash [3]. Each of these formats has its strengths, but their inclusion also enables potential weaknesses and concerns. In this work, we analyze the security of native PDF functions.

### B. Security and Privacy Threats
We present a systematic and structured analysis of standard PDF features relevant to the security and privacy of users. Even though PDF is a relatively old and well-established data format, our study reveals novel insights regarding the abuse of dangerous features induced by opening a malicious PDF document. We categorize our attacks into four classes:
1. **Denial-of-Service (DoS) Attacks**: Affecting the processing application and the host on which the PDF file is opened.
2. **Information Disclosure Attacks**: Leaking personal data from the victim’s computer, such as PDF form data, local files on disk, or NTLM user credentials.
3. **Data Manipulation Attacks**: Modifying PDF form values, writing local files on the host system, or masking the displayed content of a document based on the opening application.
4. **Code Execution**: Silently launching an executable embedded within the document.

### C. Responsible Disclosure
We reported our attacks and findings to the affected vendors and proposed appropriate countermeasures, resulting in the following Common Vulnerabilities and Exposures (CVEs):
- CVE-2020-28352
- CVE-2020-28353
- CVE-2020-28354
- CVE-2020-28355
- CVE-2020-28356
- CVE-2020-28357
- CVE-2020-28358
- CVE-2020-28359
- CVE-2020-28410
- CVE-2020-28411
- CVE-2020-28412

While it is possible to mitigate most of the attacks on the implementation level, all of them are based on legitimate features defined in the PDF standard. To sustainably eliminate the root cause of these vulnerabilities in future implementations, we recommend removing dangerous functionality from the PDF specification or adding proper implementation advice to its security considerations.

### D. Contributions
Our contributions can be summarized as follows:
- We present a systematic analysis of the security of native PDF features, distilling dangerous paths from the 1300-page PDF specification (Section V).
- Based on this methodology, we craft our attack vectors, resulting in 209 different attack variants that can be generalized into four attack classes (Section VI).
- We evaluate 28 popular PDF viewers and show that 26 of them are vulnerable to at least one attack (Section VII).
- We present techniques for JavaScript-based fingerprinting of PDF viewers and bypassing Digital Rights Management, and discuss the consequences of hidden data added by legitimate PDF editors to every document (Section VIII).
- We discuss countermeasures for PDF implementations and the specification, and propose a methodology to systematically protect against attack variants (Section IX).
- We release a comprehensive suite of malicious PDF files that can be used by developers to test their software [1].

## II. PDF Basics
This section briefly introduces the PDF document structure, focusing on the building blocks relevant for understanding the attacks discussed in this paper.

### A. Basic Blocks
A PDF document consists of four basic sections:
1. **Header**: Defines the PDF document version (1.1 to 2.0).
2. **Body**: Contains the content, a bundle of PDF objects.
3. **Index Table**: References each object in the body.
4. **Trailer**: Defines the root element of the document and a reference to the index table.

The most important section is the body, which contains the PDF objects—the actual content of the document. An object can define a headline, a text block, or an image.

### B. PDF Forms
With PDF version 1.2, Adobe introduced AcroForms in 1996. Similar to HTML forms, AcroForms allow defining input fields, checkboxes, and buttons. User input can either be stored directly into the document (using incremental updates) or submitted to a dedicated server. In the latter case, AcroForms use the Forms Data Format (FDF), which is based on raw PDF objects, for transmitting the data.

### C. Actions & JavaScript
The PDF specification defines multiple actions for various purposes. These actions can be used, for example, to navigate to a certain page in the document (GoTo action). Actions are often combined with form elements or annotations (e.g., clickable hyperlinks referencing a website are technically realized by combining a Link annotation with a URI action). However, actions can also be set to trigger automatically based on various events such as opening, printing, or closing the document.

A special action in PDF is the execution of JavaScript code. Adobe defined a basic set of functions [2], but PDF applications often choose to implement a subset of Adobe’s standard and extend their feature set with proprietary functions (see Section VIII). JavaScript provides significant flexibility for documents, enabling complex input validation of forms or changing their values based on specific conditions.

### D. PDF File Handles
A file handle (or PDF File Specification) is a multi-purpose object that can be an embedded file, a local file on disk, a remote URL, or a network share, depending on given parameters and context. File handles define the targets of many PDF actions, such as where to submit form data (via SubmitForm action) or which hyperlinks to follow in a document (via URI or GoToR action).

## III. Related Work
PDF documents have been considered relatively secure against malware and other security threats until 2001 [56], when the Peachy virus misused PDF features to run malicious VBScript [57]. In the following years, PDF malware grew in importance, mostly based on implementation bugs in viewer applications [58, 52]. During this period, PDF malware focused mainly on abusing JavaScript. To estimate the importance of JavaScript-based vulnerabilities in PDF documents, we filtered the CVE database for entries relating to 28 PDF processing applications. Since 2003, there have been 1325 relevant CVE IDs, of which 73 lead to code execution—the rest being DoS, data leakage, or other vulnerabilities. Of all PDF-related CVE IDs, 138 entries are due to JavaScript [2].

Laskov et al. [34] outline two classes of JavaScript PDF exploits: either the JavaScript API is targeted directly, or the API is abused to target other software components.

In 2008, Filiol et al. analyzed malicious PDF features beyond JavaScript. Their work was extended in the following years by multiple researchers who found new methods to carry out DoS, URI invocation, code execution, and information leakage using PDF files [48, 16, 49, 63, 51, 31, 32]. Even though the security impact of specific attack variants based on insecure PDF features was understood and fixed in many implementations, new variants were reported in 2018 [24, 30, 50]. In contrast to our work, previous research on insecure features of PDF documents focused on single features and mainly on single applications such as Acrobat Reader and Foxit Reader, and was not driven by a systematic approach.

To prevent harm, different security tools were proposed to identify maliciously crafted documents [34, 37, 53, 18, 38, 55, 15]. Such tools rely on the detection of known attack patterns and on a structural analysis of PDF files. In 2017, Tong et al. introduced a concept for PDF malware detection based on machine learning and its implementation [62, 61]. Maiorca et al. provided an overview of current PDF malware techniques and compared existing security tools [36]. In our research, we focus on the security of the PDF viewers and not on additional protection tools. Thus, we do not evaluate whether third-party tools are able to detect our attacks.

While studying the related work on PDF security, we determined two gaps which we address in this paper. First, there is no systematic approach to finding attacks based on insecure PDF features, as all relevant work, which is widespread in multiple scientific papers, technical reports, and blog posts, focuses on single features or attack variants. Second, there is no comprehensive evaluation of a large set of popular PDF viewers, beyond Acrobat Reader and Foxit Reader.

## IV. Attacker Model
In this section, we describe the attacker model, including the attacker's capabilities and the winning condition.

### A. Actions of the Victim
The victim is an individual who retrieves and opens a malicious PDF document from an attacker-controlled source. This is a realistic attack scenario, as even sophisticated users download and open PDF files from untrusted sources such as email attachments or the internet. For example, invoices or academic papers are usually shared as PDF documents. PDF is often considered relatively "safe" by end-users [14], compared to other file formats such as Word documents, which are well-known to contain potentially dangerous macros [25].

To open the PDF document, the victim uses a pre-installed application that processes the file to display its content. Different applications may process the file or interpret features of the PDF standard differently, thereby enabling or disabling the various attack vectors described in this paper.

### B. Attacker's Capabilities
The attacker can create a new PDF file or modify an existing document, which we denote as the malicious document. We do not require the malicious document to be compliant with the PDF specification, although the attacker targets basic functionality and features of the PDF standard. The attacker has full control over the document structure and its content. While the attacker can easily craft a malicious document that looks benign once opened and interpreted by the PDF application (i.e., similar to a document that the victim would expect), this is not assumed to be necessary, because all attacks are automatically triggered once the file is opened. The only interaction of the victim is to open the malicious document on their computer.

### C. Winning Condition
An attack is classified as successful if its winning condition is fulfilled. The winning condition—the goal of the attacker—is dependent on the attack class and documented in the corresponding section. For example, in the DoS attack class, the winning condition is reached if the PDF processing application can be forced to consume all available resources (i.e., memory or CPU time). In the information disclosure class of attacks, the winning condition is fulfilled if the attacker manages to obtain sensitive data, such as local files from the victim’s disk.

## V. Methodology
To identify attack vectors, we systematically surveyed which potentially dangerous features exist in the PDF specification. We started by creating a comprehensive survey with all PDF actions that can be called. As a base, we used the list provided in the PDF specification, see [60, section 8.5.3]. This list contains 18 different actions, which we carefully studied. We selected eight actions (see Call Action in Figure 1)—the ones that directly or indirectly allow access to a file handle (see File in Figure 1) and may therefore be abused for dangerous features such as URL invocation or writing to files.

Having a list of security-sensitive actions, we proceeded by investigating all objects and related events that can trigger these actions. This process was the most time-consuming part of our investigation, as the entire specification was analyzed. We identified four PDF objects that allow calling arbitrary actions (Page, Annotation, Field, and Catalog), as shown in the upper part of Figure 1. For calling them, most objects offer multiple alternatives. The Catalog object, for example, defines the OpenAction or additional actions (AA) as events. Each event can launch any sequence of PDF actions, which are depicted in the middle part of Figure 1 (Launch, Thread, etc.). Additionally, JavaScript actions can be embedded within documents, opening a new area for attacks. By using JavaScript, for example, new annotations can be created, which can have actions that once again lead to accessing file handles.

If a path from an event over an action to a file handle exists and is not explicitly blocked by the application opening the document, we denote it as a "dangerous path," resulting, for example, in file system access or URL invocation. Our approach is comprehensive in the sense that all attacks based on such dangerous paths are covered, as all existing paths in the PDF specification down to a file handle are mapped.

Another kind of dangerous path arises when the specification enables objects to create reference circles, resulting in infinite loops. Further discovered attacks—such as deflate bombs and content masking—are based on flaws in the document structure level, which we observed during our study of the specification.

Finally, we systematized our results, created a list of all possible attacks, and classified them accordingly. To generate our test suite of malicious PDF documents, we chose a semi-automated approach: we hand-crafted the payloads to test for a particular weakness and wrote a set of helper tools in Python to generate a broad set of attack variants and a valid PDF structure for each test case. To improve the impact of the attacks, we also built exploits by chaining multiple actions. For example, an attacker can craft a document that first reads data from a local file using the Import action and then sends the content to the attacker’s server using the SubmitForm action.

Our efforts resulted in 209 unique PDF files [1], which we manually opened in 28 PDF applications to observe the result. This process can be automated by launching each test for each PDF viewer in a batch script and logging the program’s behavior, depending on the attack class (e.g., CPU or memory exhaustion for DoS, file exists checks for file write access attacks, etc.).

## VI. Attacks
In this section, we introduce the attacks that we elaborated during our security analysis. The "dangerous path" is given at the end of each attack description.

### Clariﬁcation of Novelty
Of course, this work is not the first research on PDF security (see Section III). However, we are the first to cover the entire specification for attacks based on the dangerous path. While variants of some attacks have been presented before, our work goes far beyond systematizing existing results. It provides many new insights as well as novel attacks. The novelty level for each attack is given below:
- **Well-known attacks**: Code execution via Launch action [5].
- **Novel attack variants**: Infinite loop, deflate bomb, URL invocation, credential theft, content masking.
- **Previously unknown attacks**: Form data leakage, local file leakage, form modification, file write access.

Previous work relevant to a specific attack is provided in each corresponding attack section.

### A. Denial-of-Service (DoS)
The goal of this class of attacks is to build a specially crafted PDF document that enforces processing applications to consume all available resources (i.e., computing time or memory) or causes them to crash. Note that while the impact of DoS is limited for end-users, it can lead to severe business impairment if the document is processed on a server, for example, by a library that generates preview thumbnails of PDF files uploaded to cloud storage.

#### 1. Infinite Loop
Inducing an endless loop causes the program execution to get stuck. The PDF standard allows various elements of the document structure to reference themselves or other elements of the same type, leading to cycles if not explicitly handled by the implementation. For example, a Pages object may reference other pages, which is a known problem of the specification, discovered in CVE-2007-0104. We systematically studied the PDF standard for further constructs that allow for reference cycles, recursion, or other kinds of loops and found the following novel variants:
- **Action loop**: PDF actions allow specifying a Next action, resulting in "action cycles."
- **ObjStm loop**: Object streams may extend other object streams, allowing the crafting of a document with cycles.
- **Outline loop**: PDF documents may contain an outline whose entries can refer to themselves or each other.
- **Calculations**: PDF defines "Type 4" calculator functions, for example, to transform colors. Processing hard-to-solve mathematical formulas may lead to high CPU demands.
- **JavaScript**: In case the PDF application processes scripts within documents, infinite loops can be induced.

**Dangerous paths (examples)**:
- Action ⇒ /Next ⇒ Action
- ObjStm ⇒ /Extends ⇒ ObjStm

#### 2. Deflate Bomb
Data amplification attacks based on malicious zip archives are well-known (see [12, 22, 45]). The first publicly documented DoS attack using a "zip bomb" was conducted in 1996 against a Fidonet BBS administrator [1]. However, not only zip files but also stream objects within PDF documents can be compressed using various algorithms such as Deflate [20] to reduce the overall file size. The question arises if compression bombs based on malicious PDF documents can be built to cause processing applications to allocate all available memory. We achieve this goal by chaining a compressed stream to one or multiple FlateDecode filters.

**Dangerous path**:
- Filter ⇒ /FlateDecode ⇒ [...] ⇒ /FlateDecode

### B. Information Disclosure
The goal of this class of attacks is to track the usage of a document by silently invoking a connection to the attacker’s server once the file is opened, or to leak PDF document form data, local files, or NTLM credentials to the attacker.

#### 1. URL Invocation
Tracking pixels in HTML emails are well-documented [8], but the existence of similar technologies for PDF files is largely unknown to the general public. However, PDF documents that silently "phone home" should be considered privacy-invasive. They can be used, for example, to deanonymize reviewers, journalists, or activists behind a shared mailbox. The goal of this attack is to open a backchannel to an attacker-controlled server once the PDF file is opened by the victim. Besides learning when the file was opened and by whom (i.e., by which IP address), the attacker may learn additional (limited) information such as the victim’s PDF viewer application and operating system, derived from the User-Agent HTTP header. The possibility of malicious URI resolving in PDF documents has been introduced by Hamon [27], who gave an evaluation for URI and SubmitForm actions in Acrobat Reader. We extend their analysis to all standard PDF features that allow opening a URL, such as ImportData, Launch, GoToR, JavaScript, and to a broad set of viewers.

**Dangerous path**:
- [All events] ⇒ [All actions] ⇒ URL

#### 2. Form Data Leakage
Documents can contain forms to be filled out by the user—a feature introduced with PDF version 1.2 in 1996 and used daily for routine office tasks, such as travel authorization or vacation requests. Depending on the nature of the form, user input can certainly contain sensitive information (e.g., financial or medical records). Therefore, the question arises if an attacker can access and leak such information. The idea of this attack is as follows: the victim downloads a form—a PDF document containing form fields—from an attacker-controlled source and fills it out on screen, for example, to print it. Note that there are legitimate cases where a form is obtained from a third party, while the user input should not be revealed to this party. For example, European SEPA remittance slips can be downloaded from all over the web [9]—even though they have to be manually signed to be accepted by a local bank. The form is manipulated by the attacker in such a way that it silently, without the user noticing, sends input data to the attacker’s server. To the best of our knowledge, we are the first to demonstrate such attacks, which can be carried out using the PDF SubmitForm action or by reading and exfiltrating the form values using standard JavaScript functions.

**Dangerous path**:
- Page ⇒ (on close) ⇒ SubmitForm ⇒ URL

#### 3. Local File Leakage
The PDF standard defines various methods to embed external files into a document or otherwise access files on the host’s file system:
- **External streams**: Documents can contain stream objects (e.g., images) to be included from external files on disk.
- **Reference XObjects**: This feature allows a document to import content from another (external) PDF document.
- **Open Prepress Interface**: Before printing a document, local files can be defined as low-resolution placeholders.
- **Forms Data Format (FDF)**: Interactive form data can be stored in and auto-imported from external FDF files.
- **JavaScript functions**: The Adobe JavaScript reference enables documents to read data from or import local files.

If a malicious document managed to first read files from the victim’s disk and second, send them back to the attacker, such behavior would be critical. Standard PDF functions can be chained together to achieve exactly this. For example, form values can be references to stream objects, and every stream, on its part, can reference an external file. Moreover, forms can be crafted to auto-submit themselves using various events, as documented in Figure 1 in Section IX. Furthermore, standard JavaScript functions can be used to access local files and leak their content. We give a systematic overview of this new chaining technique in terms of a directed graph containing all chains detected during our evaluation and are the first to demonstrate these attacks.

**Dangerous path**:
- [All events] ⇒ ImportData ⇒ local file
- ⇒ /Next ⇒ SubmitForm ⇒ URL

#### 4. Credential Theft
In 1997, Aaron Spangler posted a vulnerability in Windows NT on the Bugtraq mailing list [54]: any client program can trigger a connection to a rogue SMB server. If the server requests authentication, Windows will automatically try to log in with a hash of the user’s credentials. Such captured NTLM hashes allow for efficient offline cracking [11] and can be reused by applying pass-the-hash or relay attacks [29, 43] to authenticate under the user’s identity. This design flaw in the Windows operating system is not solved until today. Back in 1997, Spangler used a remote image to trick web browsers into making a connection to and thereby authenticating to the attacker’s host. In April 2018, Check Point Research [50] showed that a similar attack can be performed with malicious PDF files. They found that the target of GoToR and GoToE actions can be set to \\\\attacker.com\\dummyfile, thereby leaking credentials in the form of NTLM hashes. The issue was quickly fixed by Adobe and Foxit. We describe novel variants of this attack, for example, by using various other techniques to access a network share, such as by including it as external content stream or by testing different PDF actions, thereby bypassing existing protection mechanisms.

**Dangerous path**:
- [All events] ⇒ [All actions] ⇒ network share

### C. Data Manipulation
[Continuation of the paper with the remaining sections and details.]

---

**References:**
- [1] Example Reference
- [2] Another Example Reference
- [3] Yet Another Example Reference
- [4] More Example References
- [5] Additional Example Reference
- [6] Further Example Reference
- [7] More References
- [8] Tracking Pixels in HTML Emails
- [9] European SEPA Remittance Slips
- [10] Example Reference
- [11] NTLM Hash Cracking
- [12] Zip Bomb Example
- [13] Network Share Attack
- [14] End-User Perception of PDF Security
- [15] PDF Malware Detection Tools
- [16] Previous Research on PDF Security
- [17] Example Reference
- [18] PDF Malware Detection
- [19] Adobe Critical Vulnerabilities
- [20] Deflate Compression
- [21] Example Reference
- [22] Data Amplification Attacks
- [23] Example Reference
- [24] Recent PDF Security Research
- [25] Macro Security in Word Documents
- [26] Example Reference
- [27] Malicious URI Resolving
- [28] Example Reference
- [29] Pass-the-Hash Attacks
- [30] Recent PDF Security Findings
- [31] Previous Research on PDF Security
- [32] PDF Exploits
- [33] Example Reference
- [34] JavaScript PDF Exploits
- [35] Example Reference
- [36] Overview of PDF Malware Techniques
- [37] PDF Malware Detection Tools
- [38] Structural Analysis of PDF Files
- [39] Example Reference
- [40] Example Reference
- [41] Example Reference
- [42] Example Reference
- [43] Relay Attacks
- [44] Calculation Logic in PDF
- [45] Data Amplification Attacks
- [46] Example Reference
- [47] Backchannels in Email Clients
- [48] Previous Research on PDF Security
- [49] PDF Exploits
- [50] Recent PDF Security Research
- [51] Previous Research on PDF Security
- [52] Implementation Bugs in PDF Viewers
- [53] PDF Malware Detection Tools
- [54] Windows NT Vulnerability
- [55] PDF Malware Detection
- [56] Early PDF Security Considerations
- [57] Peachy Virus
- [58] Implementation Bugs in PDF Viewers
- [59] Adobe Product Usage Statistics
- [60] PDF Specification
- [61] Machine Learning for PDF Malware Detection
- [62] Concept for PDF Malware Detection
- [63] Previous Research on PDF Security

---

**Footnotes:**
- [1] Our test suite of PDF documents can be found at https://pdf-insecurity.org/download/pdf-dangerous-paths/exploits-and-helper-scripts.zip.
- [2] The total number of JavaScript-related issues may be higher because JavaScript engine bugs usually do not get separate CVE IDs for integrators.
- [3] File handles can be embedded files, local files, URLs, or network shares.
- [4] Only a small number of variants was known because previous research did not systematically investigate the PDF specification or test all possible paths.
- [5] Note that even though the danger of the PDF Launch action is well known in the sense that it has been publicly documented, security gaps still exist in multiple implementations, as confirmed by our evaluation (see Section VII).
- [6] Note that exfiltration does not necessarily have to occur via the network: for example, if a cloud storage service generates thumbnail images from uploaded PDF documents, the backchannel can be the rendered image itself. If a reviewer adds comments to a malicious PDF document, local files may unintentionally be included when saving, exporting, or printing the document.
- [7] Crashes are classified as a winning condition because they affect the user experience, especially if further, legitimate documents are already opened by the same PDF application (in multiple tabs/windows) and if there are unsaved changes, resulting in data loss. Furthermore, crashes have led to code overflow vulnerabilities in the past, which have been classified as critical by Adobe [19].
- [8] A recent study by Poddebniak et al. [47] revealed backchannels in 40 out of 48 tested email clients.
- [9] E.g., https://www.ibancalculator.com/fileadmin/EU-Ueberweisung.pdf.
- [10] Note that exfiltration does not necessarily have to occur via the network: for example, if a cloud storage service generates thumbnail images from uploaded PDF documents, the backchannel can be the rendered image itself. If a reviewer adds comments to a malicious PDF document, local files may unintentionally be included when saving, exporting, or printing the document.
- [11] Efficient offline cracking of NTLM hashes.
- [12] Well-known data amplification attacks.
- [13] Network share attack example.
- [14] End-user perception of PDF security.
- [15] PDF malware detection tools.
- [16] Previous research on PDF security.
- [17] Example reference.
- [18] PDF malware detection.
- [19] Adobe critical vulnerabilities.
- [20] Deflate compression.
- [21] Example reference.
- [22] Data amplification attacks.
- [23] Example reference.
- [24] Recent PDF security research.
- [25] Macro security in Word documents.
- [26] Example reference.
- [27] Malicious URI resolving.
- [28] Example reference.
- [29] Pass-the-hash attacks.
- [30] Recent PDF security findings.
- [31] Previous research on PDF security.
- [32] PDF exploits.
- [33] Example reference.
- [34] JavaScript PDF exploits.
- [35] Example reference.
- [36] Overview of PDF malware techniques.
- [37] PDF malware detection tools.
- [38] Structural analysis of PDF files.
- [39] Example reference.
- [40] Example reference.
- [41] Example reference.
- [42] Example reference.
- [43] Relay attacks.
- [44] Calculation logic in PDF.
- [45] Data amplification attacks.
- [46] Example reference.
- [47] Backchannels in email clients.
- [48] Previous research on PDF security.
- [49] PDF exploits.
- [50] Recent PDF security research.
- [51] Previous research on PDF security.
- [52] Implementation bugs in PDF viewers.
- [53] PDF malware detection tools.
- [54] Windows NT vulnerability.
- [55] PDF malware detection.
- [56] Early PDF security considerations.
- [57] Peachy virus.
- [58] Implementation bugs in PDF viewers.
- [59] Adobe product usage statistics.
- [60] PDF specification.
- [61] Machine learning for PDF malware detection.
- [62] Concept for PDF malware detection.
- [63] Previous research on PDF security.