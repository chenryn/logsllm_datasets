### 5.3.2 Performance of BINDER in the First 10 Minutes

In this section, we focus on BINDER's performance during the first 10 minutes of operation.

#### Table 4: The Impact of Dupper Values on BINDER’s False Negatives

| Dupper (new) (sec) | Dupper (old) (sec) | Number of Email Worms Detected |
|-------------------|--------------------|---------------------------------|
| 10                | 22                 | 20                              |
| 20                | 21                 | 21                              |
| 30                | 21                 | 21                              |
| 40                | 19                 | 19                              |
| 50                | 17                 | 17                              |
| 60                | 15                 | 15                              |

According to our parameter selection discussion, Dupper (new) and Dupper (old) typically take values between 10 and 60 seconds, while Dupper (prev) usually ranges from 600 to 3600 seconds. Since our traces are only 10 minutes long, Dupper (prev) does not affect BINDER's performance in terms of false negatives. Therefore, we study the impact of Dupper (new) on BINDER's false negative rate.

Table 4 shows the number of email worms detected by BINDER when Dupper (new) is set to a value between 10 and 60 seconds. With Dupper (new) set to 30 seconds, BINDER missed only one email worm (W32.Swen.A@mm). This occurred because the first connection was detected as user-intended due to user input, and all subsequent connections were treated as repetitions of the first.

### 5.3.3 Experiments with Blaster

We tested BINDER against the Blaster worm [27]. In this experiment, we ran two Windows XP virtual machines (VMs), A and B, in a private network. BINDER was run on VM B, while ms-blast.exe was executed on VM A. Blaster on VM A scanned the network, found VM B, and attempted to infect it. By analyzing the infection trace collected by BINDER, we observed that BINDER detected the first outbound connection made by the process tftp.exe as an extrusion. This detection was successful because neither tftp.exe nor its parent process, cmd.exe, received any user input. Thus, BINDER successfully detected Blaster even before the worm was transferred via TFTP.

### 6. Countermeasures and Solutions

Our limited user study indicates that BINDER limits the number of false alarms to at most five over four weeks on each computer. We also demonstrated that BINDER successfully detects break-ins by adware (Gator, CNMIN, Spydeleter), the Blaster worm, and 22 email worms. However, BINDER is not a complete system; its goal is to verify that user intent can be a simple and effective detector for a large class of malware with a very low false positive rate. This section discusses potential countermeasures if BINDER's scheme is known to adversaries. While we have tried to investigate all possible attacks, we cannot claim to have considered all possible vulnerabilities.

- **Direct Attack**: Subvert BINDER on the compromised system.
- **Hiding Inside Other Processes**: Inject malicious code into other processes.
- **Faking User Input**: Use operating system APIs to generate synthesized actions.
- **Tricking the User to Input**: Trick users into clicking on pop-up windows or transparent overlay windows that intercept user input.
- **Exploiting the Whitelist**: Replace executables of whitelisted programs with tweaked versions.
- **Exploiting User Input in History**: When a malicious process is allowed to make one outbound connection due to user input (e.g., opening a malicious email attachment), it can evade BINDER's detection by connecting to a collusive remote site to keep receiving data, making BINDER think new connections are triggered by data arrivals.
- **Covert Channels**: Use a legitimate process to make connections and use them as a covert channel to leak information. For example, spyware can have an existing IE process download a web page of a tweaked hyperlink using Windows shell APIs after a user clicks on the IE window of the same process. A collusive remote server can then obtain private information from the tweaked hyperlink.

**Direct Attack** is a general limitation of all end-host software (e.g., antivirus, personal firewalls [37], virus throttles [33]). Widespread availability of Trusted Computing-related Virtual Machine-based protection [6] or similar isolation techniques is necessary to make BINDER or similar systems robust in production environments.

The countermeasures of hiding inside other processes, faking user input, tricking users to input, and exploiting whitelisting are inherent limitations of today's operating systems. The effectiveness of BINDER in malware detection highlights the need for next-generation operating systems with features such as process isolation, trustworthy user input, and reflection on user intent. Possible incomplete solutions include monitoring system APIs and verifying the integrity of whitelisted programs. Even without a bulletproof solution, a deployed BINDER system can significantly raise the bar for adversaries.

For the countermeasure of exploiting user input in history, a possible solution is to add more constraints on how a user-intended connection may be triggered. This requires further research. For covert channels, possible solutions are discussed in [1].

### 7. Conclusions and Future Work

In this paper, we present the design and implementation of BINDER, a host-based system that detects break-ins of worms, spyware, and adware on personal computers by capturing their extrusions. The main contributions of this paper are:

- **User Intent Detection**: BINDER leverages the unique characteristic of personal computers—user intent. Our evaluations show that user intent is a simple and effective detector for a large class of malware with a very low false positive rate.
- **Controlled Testbed**: The testbed based on the Click modular router and VMWare allows us to repeat the entire break-in and propagation process of email worms without causing unwanted damage.

In the future, we plan to study the advantages of sharing extrusion information among distributed BINDER systems.

### References

[18] M. Russinovich and B. Cogswell. Pstools. http://www.sysinternals.com/ntw2k/freeware/pstools.shtml.

[19] M. Russinovich and B. Cogswell. Tdimon. http://www.sysinternals.com/ntw2k/freeware/tdimon.shtml.

[20] S. Saroiu, S. D. Gribble, and H. M. Levy. Measurement and analysis of spyware in a university environment. In Proceedings of the First Symposium on Networked Systems Design and Implementation, March 2004.

[21] Snort. Snort, The Open Source Network Intrusion Detection System. http://www.snort.org/.

[22] S. Staniford, V. Paxson, and N. Weaver. How to own the internet in your spare time. In Proceedings of the 11th Usenix Security Symposium, August 2002.

[23] Suzi. How to get rid of spy-deleter. http://netrn.net/spywareblog/archives/2004/03/12/how-to-get-rid-of-spy-deleter/.

[24] Symantec. Adware.Gator. http://securityresponse.symantec.com/avcenter/venc/data/adware.gator.html.

[25] Symantec. Symantec Norton Antivirus. http://www.symantec.com/.

[26] Symantec. Symantec Security Response Threat Index. http://securityresponse.symantec.com/avcenter/venc/auto/index/indexA.html.

[27] Symantec. W32.Blaster.Worm. http://securityresponse.symantec.com/avcenter/venc/data/w32.blaster.worm.html.

[28] Symantec. Symantec Internet Security Threat Report. http://enterprisesecurity.symantec.com/content.cfm?articleid=1539, September 2004.

[29] VMWare. VMware Workstation 4.5. http://www.vmware.com/.

[30] H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier. SHIELD: Vulnerability-driven network filters for preventing known vulnerability exploits. In Proceedings of ACM SIGCOMM, August 2004.

[31] H. J. Wang, J. C. Platt, Y. Chen, R. Zhang, and Y.-M. Wang. Automatic misconfiguration troubleshooting with peer pressure. In Usenix OSDI, San Francisco, CA, December 2004.

[32] N. Weaver, S. Staniford, and V. Paxson. Very fast containment of scanning worms. In Proceedings of the 13th Usenix Security Symposium, August 2004.

[33] M. M. Williamson. Throttling viruses: Restricting propagation to defeat malicious mobile code. Technical Report HPL-2002-172, HP Labs Bristol, 2002.

[34] WinDump. Windump. http://windump.polito.it/.

[35] WinPcap. Winpcap. http://winpcap.polito.it/.

[36] Y. Zhang and V. Paxson. Detecting stepping stones. In Proceedings of the 9th USENIX Security Symposium, August 2000.

[37] ZoneAlarm. http://www.zonelabs.com/.

[1] K. Borders and A. Prakash. Web tap: Detecting covert web traffic. In Proceedings of the 11th ACM Conference on Computer and Communication Security, October 2004.

[2] W. Cui, R. H. Katz, and W. Tian Tan. BINDER: An extrusion-based break-in detector for personal computers. In Proceedings of 2005 USENIX Annual Technical Conference, April 2005.

[3] eXtremail. extremail server. http://www.extremail.com/.

[4] T. Goldring. User profiling for intrusion detection in Windows NT. In Proceedings of the 35th Symposium on the Interface, 2003.

[5] S. A. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detection using sequences of system calls. Journal of Computer Security, 6(3):151–180, 1998.

[6] Intel. Intel virtualization technology, 2005.

[7] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast portscan detection using sequential hypothesis testing. In 2004 IEEE Symposium on Security and Privacy, May 2004.

[8] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click modular router. ACM Transactions on Computer Systems, 18(3):263–297, August 2000.

[9] E. Kohler, R. Morris, and M. Poletto. Modular components for network address translation. In Proceedings of OPE-NARCH’02, June 2002.

[10] W. Lee and S. Stolfo. A framework for constructing features and models for intrusion detection systems. ACM Transactions on Information and System Security, 3(4), November 2000.

[11] R. A. Maxion and T. N. Townsend. Masquerade detection using truncated command lines. In Proceedings of the International Conference on Dependable Systems and Networks, June 2002.

[12] Trend Micro. ADW CNSMIN.A. http://www.trendmicro.com/vinfo/virusencyclo/default5.asp?VName=ADW CNSMIN.A.

[13] Microsoft. Hooks. http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks.asp.

[14] Microsoft. Windows Security Auditing. http://www.microsoft.com/technet/security/prodtech/win2000/secwin2k/09detect.mspx.

[15] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, and N. Weaver. Inside the Slammer worm. IEEE Magazine of Security and Privacy, August 2003.

[16] V. Paxson. Bro: a system for detecting network intruders in real-time. Computer Networks, 31(23-24):2435–2463, 1999.

[17] rattle. Using process infection to bypass Windows software firewalls. http://www.phrack.org/show.php?p=62&a=13, 2004.

Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE