### Linux VServer
[Linux VServer](https://en.wikipedia.org/wiki/Linux-VServer) 是一种 jail 机制，用于对计算机系统上的资源（如文件系统、CPU 处理时间、网络地址和内存等）进行安全划分。每个被划分的区域被称为**安全上下文**（security context），其中运行的虚拟系统则称为**虚拟私有服务器**（Virtual Private Server, VPS）。

### 2004 — Solaris Containers
[Solaris Containers](https://en.wikipedia.org/wiki/Solaris_Containers) 支持 x86 和 SPARC 系统，并首次出现在 2004 年 2 月发布的 Solaris 10 Build 51 Beta 版本中，随后在 2005 年正式发布于 Solaris 10。Solaris Container 结合了系统资源控制和通过 zones 提供的**边界分离**（boundary separation）。Zones 是单个操作系统实例中的完全隔离的虚拟服务器。

### 2005 — OpenVZ
[OpenVZ](https://en.wikipedia.org/wiki/OpenVZ) 类似于 Solaris Containers，通过对 Linux 内核打补丁来提供虚拟化、隔离、资源管理和**状态检查**（checkpointing）。每个 OpenVZ 容器都有一套独立的文件系统、用户及用户组、进程树、网络、设备和 IPC 对象。

### 2006 — Process Containers
[Process Containers](https://en.wikipedia.org/wiki/Cgroups) 由 Google 在 2006 年实现，旨在限制、记账并隔离一组进程的资源使用（包括 CPU、内存、磁盘 I/O 和网络等）。为了避免与 Linux 内核上下文中的“容器”一词混淆，后来改名为 Control Groups，并被合并到 2.6.24 内核版本中。这表明 Google 很早就参与了容器技术的开发，并将其回馈给社区。

### 2007 — Control Groups
如上所述，Control Groups（cgroups）是由 Google 实现的，并于 2007 年添加到 Linux 内核中。

### 2008 — LXC
[LXC](https://en.wikipedia.org/wiki/LXC) 指的是 LinuX Containers，是第一个完善的 Linux 容器管理器实现方案，通过 cgroups 和 Linux **命名空间**（namespace）实现。LXC 存在于 liblxc 库中，提供了多种编程语言的 API 实现，包括 Python3、Python2、Lua、Go、Ruby 和 Haskell。与其他容器技术不同，LXC 可以在普通的 Linux 内核上运行，而无需额外补丁。目前 [LXC 项目](https://linuxcontainers.org/lxc/introduction/) 由 Canonical 公司赞助并托管。

### 2011 — Warden
[Warden](https://docs.cloudfoundry.org/concepts/architecture/warden.html) 由 CloudFoundry 在 2011 年开发，最初基于 LXC，后替换为自己的实现。与 LXC 不同，Warden 不依赖于特定的操作系统，可以在任何提供隔离环境的操作系统上运行。它以后台守护进程的形式运行，为容器管理提供 API。更多详情请参考 [Warden 文档](https://docs.cloudfoundry.org/concepts/architecture/warden.html) 和 [这篇博客文章](http://blog.altoros.com/cloud-foundry-containers-warden-docker-garden.html)。

### 2013 — LMCTFY
[lmctfy](https://github.com/google/lmctfy) 的意思是“让我为你包含”（Let Me Contain That For You），这是 Google 容器技术的一个开源版本，提供 Linux 应用容器。Google 启动该项目旨在提供性能可保证、高资源利用率、资源共享、可超售且接近零消耗的容器（参见 [lmctfy 演讲稿](http://www.linuxplumbersconf.org/2013/ocw//system/presentations/1239/original/lmctfy%20(1).pdf)）。目前 Kubernetes 使用的 cAdvisor 工具就是从 lmctfy 项目演变而来的。lmctfy 于 2013 年 10 月首次发布，2015 年 Google 决定将核心概念抽象为 libcontainer，因此 lmctfy 现已停止活跃开发。

libcontainer 项目最初由 [Docker](https://github.com/docker/libcontainer) 发起，现已移交给开放容器基金会（Open Container Foundation）。

### 2013 — Docker
[Docker](https://en.wikipedia.org/wiki/Docker_(software)) 是迄今为止最流行和广泛使用的容器管理系统。它最初是 dotCloud（一家 PaaS 服务公司）的内部项目，该公司后来更名为 Docker。类似 Warden，Docker 最初也使用 LXC，但后来采用自己开发的 libcontainer 替代了它。与其他容器平台不同，Docker 引入了一整套管理容器的生态系统，包括高效、分层的容器镜像模型、全局和本地的容器注册库、清晰的 REST API 和命令行工具等。后期，Docker 还推动实现了名为 Docker Swarm 的容器集群管理方案。

### 2014 — Rocket
[Rocket](https://coreos.com/blog/rocket/) 由 CoreOS 启动，类似于 Docker，但修复了一些 Docker 中发现的问题。CoreOS 表示其目标是提供比 Docker 更严格的安全性和产品需求。更重要的是，Rocket 基于更开放的标准 App Container 规范实现。除了 Rocket，CoreOS 还开发了其他几个可用于 Docker 和 Kubernetes 的容器相关产品，如 [CoreOS 操作系统](https://en.wikipedia.org/wiki/CoreOS)、[etcd](https://coreos.com/etcd/) 和 [flannel](https://github.com/coreos/flannel)。

### 2016 — Windows Containers
微软在 2015 年为 Windows Server 添加了对基于 Windows 的应用程序的容器支持，称为 [Windows Containers](https://msdn.microsoft.com/en-us/virtualization/windowscontainers/about/about_overview)。这一功能随 Windows Server 2016 一同发布。通过该实现，Docker 可以直接在 Windows 上运行容器，而无需启动一个虚拟机来运行 Docker（早期在 Windows 上运行 Docker 需要使用 Linux 虚拟机）。

### 容器的未来
截至 2016 年 1 月，行业内的一个显著趋势是软件应用部署正逐渐从虚拟机转向容器。主要原因是容器相比虚拟机更加灵活且消耗更低。Google 已经使用容器技术多年，在 [Borg 和 Omega](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43438.pdf) 容器集群管理平台上大规模运行其应用程序。此外，Google 为容器领域贡献了 cgroups 的实现并参与了 libcontainer 项目。多年来，Google 通过容器在性能、资源利用和整体效率方面取得了巨大收益。最近，微软也在 Windows Server 上迅速采取行动，实现了对容器的原生支持。

尽管 Docker、Rocket 和其他容器平台在单一主机上运行时存在单点故障的风险，但可以通过使用容器宿主机集群来避免这个问题。借鉴 Borg 的经验，Google 开发了一个名为 [Kubernetes](http://kubernetes.io/) 的开源容器集群管理系统。Docker 也推出了 [Docker Swarm](https://docs.docker.com/swarm/) 解决方案。这些解决方案仍处于早期阶段，可能需要几个月或几年才能实现完整的功能集并稳定应用于生产环境中。

**微服务**（Microservices）是另一种突破性技术，可以与容器结合使用进行部署。微服务并不是全新的概念，而是比标准 Web 服务更为轻量级的服务。通过将功能单元（可能是单一服务或 API 方法）打包到一个服务中，并嵌入到轻量级 Web 服务器软件中实现。

综上所述，我们可以预测在未来几年内，容器可能会替代甚至完全取代某些场景下的虚拟机。去年我为一些企业在 POC 层面实现了基于容器的解决方案，有些人希望在生产环境中尝试它们。随着容器集群管理系统的进一步成熟，这一天或许很快就会到来。