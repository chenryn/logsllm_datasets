以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[17] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, 和 H. Hinton, “StackGuard: 自动适应性缓冲区溢出攻击检测与预防。”在 SECURITY, 1998。

[18] C. Lattner 和 V. Adve, “LLVM: 一个用于终身程序分析与转换的编译框架。”在国际代码生成与优化研讨会 (CGO 2004), IEEE, 2004, pp. 75–86。

[19] F. Wang 和 Y. Shoshitaishvili, “Angr：下一代二进制分析工具。”在 2017 IEEE 网络安全开发会议 (SecDev)。IEEE, 2017, pp. 8–9。

[20] C. Zhang, C. Song, K. Z. Chen, Z. Chen, 和 D. Song, “VTint: 保护虚函数表的完整性。”在 NDSS, 2015。

[21] M. Castro, M. Costa, 和 T. Harris, “通过强制数据流完整性来保护软件。”在第七届操作系统设计与实现研讨会, 2006, pp. 147–160。

[22] C. Song, B. Lee, K. Lu, W. Harris, T. Kim, 和 W. Lee, “通过数据流完整性强制内核安全不变量。”在 NDSS, 2016。

[23] A. Pawlowski, V. van der Veen, D. Andriesse, E. van der Kouwe, T. Holz, C. Giuffrida, 和 H. Bos, “VPS: 从低级二进制文件中挖掘高级 C++ 构造以保护动态分派。”在第 35 届年度计算机安全应用会议 (ACM, Dec 2019), p. 97–112。在线可访问: https://dl.acm.org/doi/10.1145/3359789.3359797

[24] N. Burow, D. McKee, S. A. Carr, 和 M. Payer, “CFIxx: C++ 虚拟分派的对象类型完整性。”在 ISOC 网络与分布式系统安全研讨会 (NDSS)。https://hexhive.epfl.ch/publications/files/18NDSS.pdf, 2018。

[25] V. Van Der Veen, E. Göktas, M. Contag, A. Pawoloski, X. Chen, S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, 和 C. Giuffrida, “艰难的选择：在二进制级别缓解高级代码重用攻击。”在 2016 IEEE 安全与隐私研讨会 (SP)。IEEE, 2016, pp. 934–953。

[26] A. Prakash, X. Hu, 和 H. Yin, “VFguard: 对 COTS C++ 二进制文件中的虚拟函数调用进行严格保护。”在 NDSS, 2015。

[27] N. Carlini, A. Barresi, M. Payer, D. Wagner, 和 T. R. Gross, “控制流弯曲：控制流完整性的有效性。”在第 24 届 USENIX 安全研讨会 (USENIX Security 15), 2015, pp. 161–176。

[28] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen, M. Qunaibit, 和 A.-R. Sadeghi, “失去控制：在堆栈攻击下的控制流完整性有效性。”在第 22 届 ACM SIGSAC 计算机与通信安全会议。ACM, 2015, pp. 952–963。

[29] S. Andersen 和 V. Abella, “数据执行保护：Microsoft Windows XP Service Pack 2 中的功能变更，第 3 部分：内存保护技术。”http://technet.microsoft.com/en-us/library/bb457155.aspx, 2004。

[30] A. Sotirov, “JavaScript 中的堆风水。”Black Hat Europe, 2007。

[31] O. Oleksenko, D. Kuvaiskii, P. Bhatotia, P. Felber, 和 C. Fetzer, “Intel MPX 解析：跨层分析 Intel MPX 系统堆栈。”ACM 计算系统测量与分析学报, 第 2 卷, 第 2 期, pp. 1–30, 2018。

[32] Y. Li, M. Wang, C. Zhang, X. Chen, S. Yang, 和 Y. Liu, “寻找盾牌中的裂缝：关于控制流完整性机制的安全性。”在 2020 年 ACM SIGSAC 计算机与通信安全会议。ACM, 2020。

[33] B. Maxwell, D. Thompson, G. Amerson, 和 L. Johnson, “CRC 方法分析及潜在的数据完整性攻击。”在新兴技术国际会议, 2003, pp. 25–26。

[34] K. K. Ispoglou, B. AlBassam, T. Jaeger, 和 M. Payer, “块导向编程：自动化数据仅攻击。”在 2018 年 ACM SIGSAC 计算机与通信安全会议。ACM, 2018, pp. 1868–1882。

[35] K. Serebryany 和 M. Böhme, “AFLGo：引导 AFL 到达特定目标位置。”2017。

[36] J. Vanegue, “自动利用挑战。”在 H2HC 会议, 2013。

[37] Y. Chen 和 X. Xing, “Slake：促进 Linux 内核漏洞利用中的 Slab 操作。”在 2019 年 ACM SIGSAC 计算机与通信安全会议。ACM, 2019, pp. 1707–1722。

[38] S. Heelan, T. Melham, 和 D. Kroening, “自动堆布局操纵以进行利用。”在第 27 届 USENIX 安全研讨会 (USENIX Security 18), 2018, pp. 763–779。

[39] “Firefox 浏览器。”https://www.mozilla.org/, 2020。

[40] “Chromium 项目。”https://www.chromium.org/, 2020。

[41] “OpenCASCADE。”https://github.com/tpaviot/oce, 2019。

[42] “Bento4 | 快速、现代的工具和 C++ 类库。”https://github.com/axiomatic-systems/Bento4, 2020。

[43] “ImageMagick。”https://www.imagemagick.org/, 2020。

[44] “Exif, IPTC & XMP 元数据和 ICC 配置文件。”https://www.exiv2.org/, 2020。

[45] “开源计算机视觉库。”https://opencv.org/, 2020。

[46] “Qt 的官方镜像。”https://github.com/qt, 2020。

[47] “GRaphical Universal Modeler。”https://agrum.gitlab.io/, 2020。

[48] “开源/免费软件跨平台网络引擎。”https://github.com/SLikeSoft/SLikeNet, 2020。

[49] “Bitcoin - 开源 P2P 货币。”https://bitcoin.org/en/, 2020。

[50] “ZNC - 高级 IRC 代理服务器。”https://github.com/znc/znc, 2020。

[51] “MongoDB。”https://github.com/mongodb/mongo, 2020。

[52] “Open Babel：开源化学工具箱。”http://openbabel.org/wiki/Main_Page, 2020。

[53] “Clang：LLVM 的 C 语言族前端。”https://clang.llvm.org/, 2005。

[54] “LLVM 编译器基础设施。”https://llvm.org/, 2000。

[55] “Valgrind 主页。”https://valgrind.org/, 2020。

[56] M. Namolaru, “GCC 中的去虚拟化。”在 GCC 开发者峰会论文集。Citeseer, 2006, pp. 125–133。

[57] “Intel 内存保护扩展。”2018。在线可访问: https://software.intel.com/content/www/us/en/develop/articles/introduction-to-intel-memory-protection-extensions.html

[58] “处理器跟踪。”https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing, 2013。

[59] R. M. Yoo, C. J. Hughes, K. Lai, 和 R. Rajwar, “Intel® 事务同步扩展对高性能计算的性能评估。”在国际高性能计算、网络、存储和分析会议, 2013, pp. 1–11。

[60] B. Niu 和 G. Tan, “模块化控制流完整性。”在 ACM SIGPLAN 通知, 第 49 卷, 第 6 期。ACM, 2014, pp. 577–587。

[61] ——, “每输入控制流完整性。”在第 22 届 ACM SIGSAC 计算机与通信安全会议。ACM, 2015, pp. 914–926。

[62] M. Khandaker, A. Naser, W. Liu, Z. Wang, Y. Zhou, 和 Y. Cheng, “自适应调用站点敏感控制流完整性。”在 2019 IEEE 欧洲安全与隐私研讨会 (EuroS&P)。IEEE, 2019, pp. 95–110。

[63] “Pin - 一个动态二进制插桩工具。”2018。在线可访问: https://software.intel.com/content/www/us/en/develop/articles/pin-a-dynamic-binary-instrumentation-tool.html

[64] D. Jang, Z. Tatlock, 和 S. Lerner, “SafeDispatch：从内存破坏攻击中保护 C++ 虚拟调用。”在 NDSS, 2014。

[65] M. Payer, A. Barresi, 和 T. R. Gross, “通过二进制加固实现细粒度控制流完整性。”在入侵检测与恶意软件评估国际会议。Springer, 2015, pp. 144–164。

[66] “SafeDispatch 的重现。”https://github.com/kongxiao0532/safedispatch-reproduce, 2020。

[67] “用于测试 CFI 攻击解决方案有效性的基准。”https://github.com/cooplus-vscape/CFIbenchmark, 2021。

[68] “Python 套接字包中的缓冲区溢出。”https://bugs.python.org/issue20246, 2014。

[69] “Mozilla Firefox 音频驱动程序越界。”https://bugzilla.mozilla.org/show_bug.cgi?id=1446062, 2018。

[70] “jemalloc：通用 malloc(3) 实现。”2017。在线可访问: https://github.com/jemalloc/jemalloc

[71] “Mozilla 垃圾收集。”2005。在线可访问: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Internals/Garbage_collection

[72] E. Goktas, E. Athanasopoulos, H. Bos, 和 G. Portokalidis, “失控：克服控制流完整性。”在 2014 IEEE 安全与隐私研讨会。IEEE, pp. 575–589。在线可访问: http://ieeexplore.ieee.org/document/6956588/

[73] E. Gökta¸s, E. Athanasopoulos, M. Polychronakis, H. Bos, 和 G. Portokalidis, “大小确实重要：为什么使用 gadget 链长度来防止代码重用攻击是困难的。”在第 23 届 USENIX 安全研讨会 (USENIX Security 14), 2014, pp. 417–432。

[74] N. Carlini 和 D. Wagner, “ROP 仍然危险：突破现代防御。”在第 23 届 USENIX 安全研讨会 (USENIX Security 14), 2014, pp. 385–399。

[75] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi, 和 S. Sidiroglou-Douskos, “控制柔术：细粒度控制流完整性的弱点。”在第 22 届 ACM SIGSAC 计算机与通信安全会议 - CCS '15。ACM Press, pp. 901–913。在线可访问: http://dl.acm.org/citation.cfm?doid=2810103.2813646

[76] D. Brumley, P. Poosankam, D. Song, 和 J. Zheng, “基于补丁的自动漏洞利用生成是可能的：技术和影响。”在 2008 IEEE 安全与隐私研讨会 (SP 2008)。IEEE, 2008, pp. 143–157。

[77] T. Bao, R. Wang, Y. Shoshitaishvili, 和 D. Brumley, “你的漏洞利用是我的：远程漏洞利用的自动 shellcode 移植。”在 IEEE 安全与隐私研讨会 (Oakland)。IEEE, May 2017, p. 824–839。在线可访问: http://ieeexplore.ieee.org/document/7958612/

[78] D. Repel, J. Kinder, 和 L. Cavallaro, “模块化合成堆栈漏洞利用。”ACM Press, 2017, p. 25–35。在线可访问: http://dl.acm.org/citation.cfm?doid=3139337.3139346

[79] B. Garmany, M. Stoffel, R. Gawlik, P. Koppe, T. Blazytko, 和 T. Holz, “向 Web 浏览器生成自动化的漏洞利用原语。”在第 34 届年度计算机安全应用会议。ACM, Dec 2018, p. 300–312。在线可访问: https://dl.acm.org/doi/10.1145/3274694.3274723

[80] W. Wu, Y. Chen, J. Xu, X. Xing, X. Gong, 和 W. Zou, “Fuze：促进内核 use-after-free 漏洞的漏洞利用生成。”在第 27 届 USENIX 安全研讨会 (USENIX Security 18), 2018, pp. 781–797。

[81] I. Yun, D. Kapil, 和 T. Kim, “自动技术以系统地发现新的堆漏洞利用原语。”在第 29 届 USENIX 安全研讨会 (USENIX Security 20)。USENIX Association, Aug. 2020, pp. 1111–1128。在线可访问: https://www.usenix.org/conference/usenixsecurity20/presentation/yun

[82] F. Deng, J. Wang, B. Zhang, C. Feng, Z. Jiang, 和 Y. Su, “基于模式的软件测试框架，用于元数据损坏漏洞的可利用性评估。”科学编程, 第 2020 卷, 2020。

[83] Z. Zhao, Y. Wang, 和 X. Gong, “Haepg：一个自动多跳漏洞利用生成框架。”在入侵检测与恶意软件评估国际会议。Springer, 2020, pp. 89–109。

[84] H. Hu, Z. L. Chua, S. Adrian, P. Saxena, 和 Z. Liang, “数据定向漏洞利用的自动生成。”在第 24 届 USENIX 安全研讨会 (USENIX Security 15), 2015, pp. 177–192。

[85] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, 和 Z. Liang, “数据定向编程：非控制数据攻击的表现力。”在 2016 IEEE 安全与隐私研讨会 (SP)。IEEE, 2016, pp. 969–986。

[86] “Pymalloc：专用对象分配器。”https://docs.python.org/2.3/whatsnew/section-pymalloc.html, 2002。

[87] “GNU C 库 (glibc)。”2019, 在线访问日期：2019 年 2 月 26 日。在线可访问: https://www.gnu.org/software/libc/

[88] Y. Chen 和 X. Xing, “内核漏洞利用中的弹性对象系统研究。”在 2020 年 ACM SIGSAC 计算机与通信安全会议。ACM, 2020。

### 附录

由于篇幅限制，我们展示了 PyQt 的案例研究、针对 Firefox 的漏洞利用草图、受 CFI 保护但被 COOPLUS 绕过的基准代码，以及 VScape 如何为原语执行能力分析的详细信息。

#### A.1 PyQt-5.12 的案例研究

CPython 本身没有适用于 COOPLUS 的虚拟调用，因为它是一个完全用 C 语言开发的程序。但通过绑定库，Python 可以轻松使用编译成共享库的 API。PyQt 是 Python GUI 编程中广泛使用的库，它是用 C++ 开发的。结合公开记录的堆溢出漏洞 CVE-2014-1912 [68]，我们评估了 COOPLUS 攻击对 AAR 和 AAW 的效果，就像我们在 Firefox 上所做的那样。

**图 10：PyQt 中的 COOPLUS 漏洞利用原语。**
1. 易受攻击的对象：套接字字符缓冲区
2. 受害对象：QWidgetPrivate
3. 中继对象：pyListObject 的项列表

与 Firefox 类似，Python 实现了一个名为 Pymalloc [86] 的独立分配器来管理用户控制的 Pyobjects。但当 Pyobject 的大小超过某个阈值（64 位系统上为 512 字节）时，本地分配器将接管它。在 Linux 上，CPython 使用 ptmalloc [87] 来管理本地堆。与 jemalloc 相比，ptmalloc 使堆布局极其随意，没有严格的隔离。

**放大策略**：CVE-2014-1912 [68] 是一个典型的堆溢出漏洞。攻击者可以直接写入任意值到边界外区域，并且被破坏的字节数足以满足我们的实验需求。当 bytearray 的大小为 512 字节时，三个关键对象可以紧密放置。在这种情况下，受害对象和伪造对象的 VTables 靠得很近，我们不需要猜测 Qt 库的基地址。部分覆盖就足以完成劫持。

易受攻击的对象是本地堆中的字符缓冲区。因此，原语中的受害对象和中继对象也应维护在本地堆中。在这种情况下，对象没有其他大小要求。

我们在 Firefox 上使用的策略在这个案例中同样有效。我们发现 CPython 中 pyListObject 的数据字段是一个理想的中继对象。根据观察，当 pyListObject 的项超过 64 个时，项表将被分配到本地堆中。我们选择能够篡改中继对象中指针的 Hi Address 的布尔值，将指针重定向到非映射地址，伪造一个 pyString 对象，并将字符串的大小设置为 0x7ff..f（设置一个较大的字符串大小）。结果，我们可以泄露大范围的内存。然后我们获取库 array.cpython 的基地址，并伪造一个 bytearray 对象用于 AAR 和 AAW。

**漏洞利用中的原语**：与我们在 Firefox 案例中所做的一样，我们列出了两个规则：
1. 受害成员变量偏移量 mod 8 > 1
2. 原语应该有 ST-OW-nonPtr gadgets

最终，选择了原语组合 (QWidgetPrivate::endBackingStorePainting(), QWidgetPrivate, QOpenGLWidgetPrivate) 用于此案例中的字节翻转。

唯一的要求是控制流没有约束。伪造函数 QOpenGLWidgetPrivate::endBackingStorePainting() 所做的只是将伪造对象中偏移量 +490 处的字节设置为零。由于这种操作非常简单，所以它非常适合用于字节翻转。

---

希望这些优化后的文本能更好地满足您的需求。如果有任何进一步的修改或补充，请随时告知。