### Restrictions Imposed by ADsafe

The vulnerability in question is not only confined to the restrictions imposed by ADsafe but is also exploitable on modern browsers. In our accompanying technical report [35], we demonstrate how the exploit code can be used to create a JSLint-compliant script element. When this script is executed alongside the (vulnerable) ADsafe library, it can obtain a reference to the document object. This exploit has been successfully tested on Firefox, Chrome, and Safari.

Interestingly, there are examples of API confinement that are secure under standard JavaScript semantics but not under SESlight semantics. For instance, consider the following API:

```javascript
var x = function critical() {};
var api = function() {
    var a = this;
    if (typeof a === "object") {
        delete a.x;
    }
    return x;
};
```

This API fails to confine the `critical` function under SESlight semantics and threat model. However, it is secure under standard JavaScript semantics for restricted untrusted code that only accesses the global `api` variable. In standard JavaScript, the `this` value of the `api` function would be the global object, and the `x` binding would be deleted before the function returns. Under SESlight semantics, the `this` value would be `undefined`, causing the function to return the `critical` function.

### Limitations of ENCAP

ENCAP, like other flow-insensitive and context-insensitive analysis tools, has inherent limitations and imprecision. For example, when applied to the Cajita runtime library of the Google Caja framework [6], ENCAP generated a large number of false positives. This occurred because the `freeze` function was being called on the return values of all library methods. Due to context insensitivity, the return value from all calls to `freeze` propagated to all call sites, creating numerous spurious points-to edges.

### Related Work

There is a long history of using static analysis and language-based techniques to secure extensible software, including notable works such as Typed Assembly Language [31], Proof-Carrying Code, and Software-based Fault Isolation [38]. These efforts have primarily focused on providing strong guarantees about untrusted extensions and their access to trusted interfaces for security-critical services. However, less attention has been given to the effects of granting arbitrary, untrusted extensions unfettered access to such trusted interfaces.

Until recently, most work on "API security" has centered around cryptographic security modules and their interfaces [4]. For these cryptographic APIs, keys serve as security-critical objects, and static analysis has been used to determine whether these keys are properly confined within the security module. This line of work is closely related to formalisms like BAN logic [5], which use similar abstract analysis to reason about all possible interactions in security protocols.

As security-relevant services with rich interfaces are increasingly written in high-level, type-safe languages, the abstract analysis of API security properties has become more widely applicable. For server-side web software written in languages other than JavaScript, several efforts have employed static analysis to identify and prevent Cross-Site Scripting (XSS) attacks or SQL injection. Examples include the taint-based XSS analysis in Pixy [16] and the SQL injection analysis by Xie and Aiken [41], both in the context of PHP. Additionally, Livshits and Lam [21] implemented a Datalog-based analysis in Java to establish security properties such as proper sanitization.

Compared to these works, JavaScript presents unique challenges due to its highly dynamic nature. Maffeis et al. [23, 25] have analyzed various subsets of JavaScript and defined sandboxes based on filtering, rewriting, and wrapping to restrict untrusted code. In earlier work [22], Maffeis et al. presented a small-step operational semantics for JavaScript based on the 3rd edition of the ECMA262 standard. Our SESlight semantics are structurally similar, with the main difference being in the modeling of scope objects.

An alternative approach to defining JavaScript semantics is that of Guha et al. [12], who describe the semantics by de-sugaring the surface language to a core calculus, LambdaJS, and then providing execution rules for expressions in LambdaJS.

Recently, flow-insensitive static analysis of JavaScript code has been explored in research efforts such as Staged Information Flow [8] and Gatekeeper [11]. Both projects use mostly-static techniques supported by some runtime checks. Staged Information Flow leaves the analysis of all dynamic code and `eval` to runtime checks. Gatekeeper, which aims to constrain potentially-obfuscated, malicious JavaScript widgets executing within a host web page, uses Datalog in a manner similar to our work. However, Gatekeeper does not statically analyze `eval` and lacks a rigorous proof of soundness for their analysis.

Finally, the VEX system uses static information-flow analysis to find security vulnerabilities in web browser extensions. Like our work, VEX is based on a formal semantics for a fragment of JavaScript [12, 22]. Despite similarities, VEX focuses on preventing script injection attacks and analyzes certain types of explicit flows from untrusted sources to executable sinks. In contrast, we consider the confinement of security-critical objects. VEX's static analysis is path-sensitive, context-sensitive, and uses precise summaries, but it is fundamentally unsound. Our static analysis, while simpler, applies to the core of an important new JavaScript variant and guarantees soundness.

### Conclusion and Future Work

JavaScript was originally designed for adding small scripting functions to web pages, but the web has become dramatically more sophisticated over the past 15 years. As larger and more complex applications have become commonplace, web application developers and users have become increasingly interested in robustness, reliability, and security of large JavaScript code bases. In this paper, we study a restricted sublanguage, SESlight, based on the recently standardized ES5S. We believe SESlight allows concerned programmers to develop secure applications that provide restricted access to untrusted code, thereby better supporting the principle of least privilege than previous ad hoc subsets of JavaScript.

We demonstrate how SESlight supports confinement by developing precise semantics for SESlight, presenting an automated tool, ENCAP, that provably verifies confinement, and using ENCAP to analyze code previously defined to provide confinement in restricted forms of JavaScript. In our case studies, we found a previously undetected confinement oversight in the Yahoo! ADsafe library [9], proved confinement of a repaired version of ADsafe automatically, and demonstrated confinement for other isolation examples from the object-capability and security literature.

While SESlight requires programmers of security-critical code to use a more limited form of JavaScript, we believe the clean semantic properties of SESlight and the power of ENCAP and other analysis methods enabled by SESlight provide ample motivation for concerned programmers to adopt this language. The success of our tool on existing code suggests that careful programmers may already respect some of the semantically motivated limitations of SESlight.

Further effort may be needed to drive interest in SESlight, and additional technical work can provide more powerful analysis methods for versions of JavaScript that support traditional programming language properties such as the static contour model of scope and the ability to rename bound variables without changing program semantics. Techniques such as object-sensitive analysis [28] and CFA2 [37] may lead to more powerful tools that aid future programmers in developing security-critical code and provide more useful diagnostics when confinement cannot be established. We also believe that further work may allow us to extend the present tool and proofs to broader classes of untrusted code.

### Acknowledgment

We thank the Google Caja team for invaluable comments and discussions. We are indebted to Shriram Krishnamurthi and anonymous reviewers for their comments and suggestions. Mitchell and Taly acknowledge the support of the National Science Foundation, the Air Force Office of Scientific Research, the Office of Naval Research, and Google, Inc.

### References

[1] L. O. Andersen. Program Analysis and Specialization for the C Programming Language. PhD thesis, DIKU, University of Copenhagen, 1994.
[2] I. Atsushi, B. C. Pierce, and P. Wadler. Featherweight Java: A minimal core calculus for Java and GJ. In ACM Transactions on Programming Languages and Systems, pages 132–146, 1999.
[3] M. Berndl, O. Lhoták, F. Qian, L. Hendren, and N. Umanee. Points-to analysis using bdds. In Proc. of PLDI, pages 103 – 114, 2003.
[4] M. Bortolozzo, M. Centenaro, R. Focardi, and G. Steel. Attacking and fixing PKCS#11 security tokens. In Proc. of CCS, pages 260–269, 2010.
[5] M. Burrows, M. Abadi, and R. Needham. A logic of authentication. ACM Trans. Comput. Syst., 8, 1990.
[6] Google Caja Team. Google-Caja: A source-to-source translator for securing JavaScript-based Web content. http://code.google.com/p/google-caja/.
[7] S. Ceri, G. Gottlob, and L. Tanca. What you always wanted to know about Datalog (and never dared to ask). IEEE Trans. on Knowl. and Data Eng., 1:146 – 166, 1989.
[8] R. Chugh, J.A. Meister, R. Jhala, and S. Lerner. Staged information flow for JavaScript. In Proc. of PLDI, 2009.
[9] D. Crockford. ADsafe: Making JavaScript safe for advertising. http://www.adsafe.org/, 2008.
[10] ECMA. ECMA-262: ECMAScript Language Specification. Fifth edition, December 2009.
[11] S. Guarnieri and B. V. Livshits. Gatekeeper: Mostly static enforcement of security and reliability policies for JavaScript code. In Proc. of USENIX security symposium, pages 50–62, 2009.
[12] A. Guha, C. Saftoiu, and S. Krishnamurthi. The essence of JavaScript. In Proc. of ECOOP, pages 126–150, 2010.
[13] A. Guha, C. Saftoiu, and S. Krishnamurthi. Typing local control and state using flow analysis. Accepted at ESOP, 2011.
[14] D. Van Horn and H. G. Mairson. Deciding kCFA is complete for EXPTIME. In Proc. of ICFP, pages 275–282, 2008.
[15] D. Jang and K. Choe. Points-to analysis for JavaScript. In Proc. of ACSAC, pages 1930–1937, 2009.
[16] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis tool for detecting Web application vulnerabilities (short paper). In Proc. of the 2006 IEEE S&P, pages 258–263, 2006.
[17] J. H. Morris Jr. Protection in programming languages. Commun. ACM, 16:15–21, 1973.
[18] S. Krishnamurthi. Confining the ghost in the machine: Using types to secure JavaScript sandboxing. In Proc. of APLWACA, 2010.
[25] S. Maffeis and A. Taly. Language-based isolation of untrusted JavaScript. In Proc. of CSF, pages 77–91, 2009.
[26] J. Midtgaard and T. Jensen. A calculational approach to control-flow analysis by abstract interpretation. In Proc. of SAS, pages 347–362, 2008.
[27] M. Might, Y. Smaragdakis, and D. Van Horn. Resolving and exploiting the k-CFA paradox: Illuminating functional vs. object-oriented program analysis. In Proc. of PLDI, pages 305–315, 2010.
[28] A. Milanova, A. Rountev, and B. G. Ryder. Parameterized object sensitivity for points-to analysis for Java. ACM Trans. Softw. Eng. Methodol., 14(1):1–41, 2005.
[29] M. S. Miller. Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control. PhD thesis, Johns Hopkins University, 2006.
[30] M. S. Miller, C. Morningstar, and B. Frantz. Capability-based financial instruments. In Proc. of FC, FC ’00, pages 349–378, 2001.
[31] G. Morrisett, D. Walker, K. Crary, and N. Glew. From System F to typed assembly language. In Proc. of POPL, pages 85–97, 1998.
[32] G. D. Plotkin. A structural approach to operational semantics. J. Log. Algebr. Program., 60-61:17–139, 2004.
[33] J. A. Rees. A security kernel based on the lambda-calculus. Technical report, Massachusetts Institute of Technology, Cambridge, MA, USA, 1996.
[34] A. Taly, Ú. Erlingsson, J. C. Mitchell, M. S. Miller, and J. Nagra. An operational semantics for SESlight. http://theory.stanford.edu/∼ataly/Semantics/seslSemantics.txt.
[35] A. Taly, Ú. Erlingsson, J. C. Mitchell, M. S. Miller, and J. Nagra. Automated analysis of security-critical JavaScript APIs. Technical Report http://theory.stanford.edu/∼ataly/Papers/sp11TechReport.pdf, 2011.
[19] B. W. Lampson. A note on the confinement problem. Commun. ACM, 16:613–615, 1973.
[36] The Facebook Team. FBJS. http://wiki.developers.facebook.com/index.php/FBJS.
[20] H. M. Levy. Capability-Based Computer Systems. Butterworth-Heinemann, Newton, MA, USA, 1984.
[21] B. V. Livshits and M. S. Lam. Finding security vulnerabilities in Java applications with static analysis. In Proc. of USENIX security symposium, pages 1–18, 2005.
[22] S. Maffeis, J. C. Mitchell, and A. Taly. An operational semantics for JavaScript. In Proc. of APLAS, pages 307–325, 2008.
[23] S. Maffeis, J. C. Mitchell, and A. Taly. Isolating JavaScript with filters, rewriting, and wrappers. In Proc. of ESORICS, pages 505–522, 2009.
[24] S. Maffeis, J. C. Mitchell, and A. Taly. Object capabilities and isolation of untrusted Web applications. In Proc. of IEEE S&P, pages 125–140, 2010.
[37] D. Vardoulakis and O. Shivers. CFA2: A context-free approach to control-flow analysis. In Proc. of ESOP, pages 570–589, 2010.
[38] R. Wahbe, S. Lucco, T. E. Anderson, and S.L. Graham. Efficient software-based fault isolation. In Proc. of SOSP, pages 203–216, 1994.
[39] J. Whaley. BDDBDDB: Bdd based deductive database. http://bddbddb.sourceforge.net/, 2004.
[40] J. Whaley and M. S. Lam. Cloning-based context-sensitive pointer alias analysis using binary decision diagrams. In Proc. of PLDI, pages 131–144, 2004.
[41] Y. Xie and A. Aiken. Static detection of security vulnerabilities in scripting languages. In Proc. of USENIX security symposium, page 179192, 2006.