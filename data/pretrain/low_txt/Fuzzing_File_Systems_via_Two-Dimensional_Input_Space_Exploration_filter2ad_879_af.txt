以下是优化后的文本，使其更加清晰、连贯和专业：

---

**参考文献**

[22] H. Han 和 S. K. Cha. IMF: 基于推断模型的模糊测试器. 在第 24 届 ACM 计算机与通信安全会议 (CCS) 上发表, 德克萨斯州达拉斯, 2017 年 10 月至 11 月.

[25] D. Jones. Linux 系统调用模糊测试器. https://github.com/kernelslacker/trinity, 2018.

[26] Kernel.org Bugzilla. Btrfs 错误条目. https://bugzilla.kernel.org/buglist.cgi?component=btrfs, 2018.

[27] Kernel.org Bugzilla. ext4 错误条目. https://bugzilla.kernel.org/buglist.cgi?component=ext4, 2018.

[28] R. Langner. Stuxnet: 解剖一种网络战武器. 在第 32 届 IEEE 安全与隐私研讨会 (Oakland) 上发表, 加利福尼亚州奥克兰, 2011 年 5 月.

[29] M. Larabel. F2FS 文件系统推进加密支持. https://www.phoronix.com/scan.php?page=news_item&px=F2FS-Encryption-Support, 2015.

[30] C. Lee, D. Sim, J. Y. Hwang, 和 S. Cho. F2FS: 一种适用于闪存存储的新文件系统. 在第 13 届 USENIX 文件和存储技术会议 (FAST) 上发表, 加利福尼亚州圣克拉拉, 2015 年 2 月.

[31] Linux. 直接访问文件. Documentation/ﬁlesystems/dax.txt, 2015. https://www.kernel.org/doc/

[32] Linux. fuse - 用户空间文件系统 (FUSE) 设备. http://man7.org/linux/man-pages/man4/fuse.4.html, 2015.

[33] X. Liu, Q. Wei, Q. Wang, Z. Zhao, 和 Z. Yin. CAFA: 一种用于提高覆盖率的校验和感知模糊辅助工具. 安全与通信网络, 2018, 2018.

[34] LLVM 项目. libFuzzer - 一个基于覆盖率引导的模糊测试库. https://llvm.org/docs/LibFuzzer.html, 2018.

[35] Microsoft. Windows. https://www.microsoft.com/en-us/windows, 2018.

[36] C. Min, S. Kashyap, B. Lee, C. Song, 和 T. Kim. 交叉检查语义正确性: 查找文件系统错误的案例. 在第 25 届 ACM 操作系统原理研讨会 (SOSP) 上发表, 加利福尼亚州蒙特雷, 2015 年 10 月.

[37] MITRE 公司. CVE-2009-1235. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1235, 2009.

[38] MITRE 公司. CVE-2017-13830. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-13830, 2017.

[39] MITRE 公司. CVE-2017-6990. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6990, 2017.

[40] MITRE 公司. F2FS CVE 条目. http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=f2fs, 2018.

[41] Mozilla 公司. MozPeach. https://github.com/MozillaSecurity/peach, 2017.

[42] Mozilla 公司. JavaScript 引擎模糊测试器. https://github.com/MozillaSecurity/funfuzz, 2018.

[43] MWR 实验室. 跨平台内核模糊测试框架. https://github.com/mwrlabs/KernelFuzzer, 2016.

[44] MWR 实验室. macOS 内核模糊测试器. OSXFuzz, 2017. https://github.com/mwrlabs/

[45] NCC 集团. 使用 TriforceAFL 对 OpenBSD amd64 进行系统调用模糊测试. https://github.com/nccgroup/TriforceOpenBSDFuzzer, 2016.

[46] NCC 集团. 使用 AFL/QEMU 进行全系统仿真模糊测试. https://github.com/nccgroup/TriforceAFL, 2017.

[47] NCC 集团. 使用 TriforceAFL 的 Linux 系统调用模糊测试器. https://github.com/nccgroup/TriforceLinuxSyscallFuzzer, 2017.

[48] V. Nossum 和 Q. Casasnovas. 使用 American Fuzzy Lop 进行文件系统模糊测试. 在 Vault Linux 存储和文件系统会议上发表, 2016.

[49] S. Pailoor, A. Aday, 和 S. Jana. MoonShine: 通过跟踪蒸馏优化操作系统模糊测试种子选择. 在第 27 届 USENIX 安全研讨会 (Security) 上发表, 马里兰州巴尔的摩, 2018 年 8 月.

[50] Peach Tech. Peach Fuzzer. https://sourceforge.net/projects/peachfuzz, 2016.

[23] R. Hodován, Á. Kiss, 和 T. Gyimóthy. Grammarinator: 一个基于语法的开源模糊测试器. 在第 9 届 ACM SIGSOFT 自动化测试用例设计、选择和评估国际研讨会上发表, ACM, 2018.

[24] M. Höschele 和 A. Zeller. 从动态污点中挖掘输入语法. 在第 32 届 IEEE/ACM 国际软件工程会议上发表, 2018.

[51] H. Peng, Y. Shoshitaishvili, 和 M. Payer. T-Fuzz: 通过程序转换进行模糊测试. 在第 39 届 IEEE 安全与隐私研讨会 (Oakland) 上发表, 加利福尼亚州旧金山, 2018 年 5 月.

[52] D. E. Porter, S. Boyd-Wickizer, J. Howell, R. Olinsky, 和 G. C. Hunt. 从上到下重新思考库操作系统. 在 ACM SIGPLAN 通知, 2011.

[53] D. E. Porter, S. Boyd-Wickizer, J. Howell, R. Olinsky, 和 G. C. Hunt. 从上到下重新思考库操作系统. 在 ACM SIGPLAN 通知, ACM, 2011.

[54] O. Purdila, L. A. Grijincu, 和 N. Tapus. LKL: Linux 内核库. 在第 9 届 Roedunet 国际会议 (RoEduNet) 上发表, IEEE, 2010.

[55] N. Rath 和 M. Szeredi. 一个连接到 SSH 服务器的网络文件系统客户端. https://github.com/libfuse/sshfs, 2018.

[56] Red Hat Inc. 用于管理 XFS 文件系统的实用工具. https://git.kernel.org/pub/scm/fs/xfs/xfsprogs-dev.git, 2018.

[57] Ribose Inc. FuzzBSD, 一个用于测试 BSD 内核的文件系统镜像模糊测试脚本. https://github.com/riboseinc/fuzzbsd, 2017.

[58] T. Ridge, D. Sheets, T. Tuerk, A. Giugliano, A. Madhavapeddy, 和 P. Sewell. SibylFS: POSIX 和实际文件系统的正式规范和基于 Oracle 的测试. 在第 25 届 ACM 操作系统原理研讨会 (SOSP) 上发表, 加利福尼亚州蒙特雷, 2015 年 10 月.

[59] O. Rodeh, J. Bacik, 和 C. Mason. BTRFS: Linux B-tree 文件系统. 在 ACM 存储事务 (TOS) 会议上发表, 2013.

[60] B. Schneier. "Evil Maid" 攻击加密硬盘. https://www.schneier.com/blog/archives/2009/10/evil_maid_attac.html, 2009.

[61] S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, 和 T. Holz. kaﬂ: 用于操作系统内核的硬件辅助反馈模糊测试. 在第 26 届 USENIX 安全研讨会 (Security) 上发表, 加拿大不列颠哥伦比亚省温哥华, 2017 年 8 月.

[62] SGI, OSDL 和 Bull. Linux 测试项目. https://github.com/linux-test-project/ltp, 2018.

[63] Silicon Graphics Inc. (SGI). (x)fstests 是一个文件系统测试套件. https://github.com/kdave/xfstests, 2018.

[64] Silicon Graphics Inc. (SGI) 和 Red Hat Inc. XFS. http://xfs.org, 2018.

[65] K. Sun, D. Fryer, J. Chu, M. Lakier, A. D. Brown, 和 A. Goel. Spiffy: 启用文件系统感知的存储应用程序. 在第 16 届 USENIX 文件和存储技术会议 (FAST) 上发表, 加利福尼亚州奥克兰, 2018 年 2 月.

[66] K. Sun, M. Lakier, A. D. Brown, 和 A. Goel. 将 VFS 分解以管理文件系统. 在第 10 届 USENIX 存储和文件系统热点研讨会 (HotStorage) 上发表, 马萨诸塞州波士顿, 2018 年 7 月.

[67] GNOME 项目. GVfs. https://wiki.gnome.org/Projects/gvfs, 2018.

[68] L. Torvalds. Linux 内核源代码树. https://github.com/torvalds/linux, 2018.

[69] T. Ts’o. Ext2/3/4 文件系统实用工具. https://github.com/tytso/e2fsprogs, 2018.

[70] Tuxera. NTFS-3G. https://www.tuxera.com/community/open-source-ntfs-3g, 2017.

[71] T. Wang, T. Wei, G. Gu, 和 W. Zou. TaintScope: 一种用于自动软件漏洞检测的校验和感知定向模糊测试工具. 在第 31 届 IEEE 安全与隐私研讨会 (Oakland) 上发表, 加利福尼亚州奥克兰, 2010 年 5 月.

[72] M. Xie 和 L. Zefan. 提高 Btrfs 性能. LinuxCon 日本, 2011.

[73] J. Yang, C. Sar, 和 D. Engler. Explode: 一种轻量级、通用的存储系统严重错误查找系统. 在第 7 届 USENIX 操作系统设计与实现研讨会 (OSDI) 上发表, 华盛顿州西雅图, 2006 年 11 月.

[74] J. Yang, P. Twohey, D. Engler, 和 M. Musuvathi. 使用模型检查来查找严重的文件系统错误. 在 ACM 计算机系统事务 (TOCS) 会议上发表, 2006.

[75] M. Zalewski. american fuzzy lop (2.52b) - conﬁg.h. https://github.com/mirrorer/afl/blob/master/config.h, 2017.

[76] M. Zalewski. american fuzzy lop (2.52b). http://lcamtuf.coredump.cx/afl, 2018.

[77] Zero Day Initiative. CVE-2018-4268. https://www.zerodayinitiative.com/advisories/ZDI-18-602, 2018.

---

**附录**

**A. 种子镜像**

图 9 显示了在评估中由 JANUS 测试的种子镜像的层次结构。

**B. 覆盖率分析: AFL 与 KCOV**

图 10 显示了 AFL 注入的代码和 Syzkaller 用于运行时路径覆盖率分析的代码。

AFL 和 KCOV 使用两种不同的方法对模糊测试目标进行插桩，并以不同的格式保留运行时路径覆盖率。具体来说，AFL 为每个基本块分配一个随机数，在每个分支处注入图 10 所示的代码。位图中的每个字节设置可以被视为特定代码路径的一次命中。

KCOV 依赖于 GCC（>= 6.0）的 `-fsanitize-coverage=trace-pc` 标志，在每个基本块处注入代码，将当前 PC 值发射到用户空间映射的缓冲区中。在执行完变异输入后，Syzkaller 使用每两个连续的 PC 值计算出一个哈希值，以表示特定的代码路径（见图 10）。

需要注意的是，Syzkaller 使用 PC 值的最低 32 位来标记相应的基本块，这比 AFL 生成的伪随机数具有更低的随机性，从而导致更多的冲突，降低了模糊测试的性能。

**C. 一个 LKL 示例**

图 11 提供了一个简单的示例，说明如何在用户应用程序中使用 LKL 来操作 ext4 镜像。

**D. 序列化格式**

JANUS 通过遵循图 12 中描述的格式，将生成的程序及其推测的镜像状态序列化为二进制文件。

**E. 图像模糊测试的测试程序**

图 13 展示了在评估 JANUS 和 Syzkaller 在图像模糊测试中的有效性时，要对任何变异图像执行的固定系统调用序列。

**F. 支持的系统调用**

在我们的实现中，JANUS 支持生成和变异以下 34 个系统调用：read(), write(), open(), seek(), mmap(), getdents64(), pread64(), pwrite64(), stat(), lstat(), rename(), fsync(), fdatasync(), syncfs(), sendfile(), access(), ftruncate(), truncate(), fstat(), statfs(), fstatfs(), utimes(), mkdir(), rmdir(), link(), unlink(), symlink(), readlink(), chmod(), fchmod(), setxattr(), fallocate(), listxattr(), 和 removexattr()。

**G. 由 JANUS 发现的文件系统错误**

表 VI 列出了 JANUS 在五个广泛使用的文件系统中发现的先前未知且已修补的错误。

---

希望这些修改能使文本更加清晰、连贯和专业。如果还有其他需要进一步优化的地方，请告诉我！