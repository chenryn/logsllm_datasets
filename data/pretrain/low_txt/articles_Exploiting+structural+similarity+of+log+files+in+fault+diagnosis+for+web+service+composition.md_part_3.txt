### Fault Diagnosis by Classifying Log Data Using a Generative Model

In this study, we propose a fault diagnosis approach that classifies log data using a generative model. The main steps of our approach are as follows:

1. **Data Representation**: We represent a portion of the log data using a model based on different XML structures.
2. **Training Dataset Generation**: We generate the training dataset by labeling each record of the XML log data. Our testbed consists of 30 web services running on a platform, and we inject 95 faults into these services to simulate common failures in application and middleware levels.
3. **Synthetic Data Generation**: We also implement a synthetic data generation program to simulate the creation of log data, based on a symptom database for IBM WebSphere Application Server. From this database, we generated 1,000 pieces of log records from 11,601 pieces of XML log records.

### Classification Task

The Conditional Bayesian Network (CBN) model plays a key role in the classification task. It is a generative model based on Bayesian networks. Log records in the training dataset with the same category share the parameters of a CBN. This means there is a set of such parameters for each fault category. The similarity-based probabilities of the CBNs can improve the accuracy of the classification task.

For the testing dataset, log records are classified into possible fault categories by calculating the probability that each category will generate the log data record. Given a category \( c \) and a test log record \( r_{\text{test}} \), the conditional probability can be estimated using the following formula:

\[
P(r_{\text{test}} | c) = \prod_{n_s \in N_s} P(n_s | pa(n_s), c) \times \prod_{n_t \in N_t} P(n_t | pa(n_t), c)
\]

Given the set of predefined categories, our objective is to assign the most probable category labels to unlabeled log records based on the likelihood inference in corresponding CBNs. According to the computed conditional probabilities, we choose the category \( c \) with the maximum posteriori probability value to label the test log record:

\[
c_{\text{MAP}} = \arg\max_{c \in C} P(c) P(r_{\text{test}} | c)
\]

\[
= \arg\max_{c \in C} P(c) \prod_{n_s \in N_s} P(n_s | pa(n_s), c) \times \prod_{n_t \in N_t} P(n_t | pa(n_t), c)
\]

### Datasets

The training and testing datasets are selected randomly in a 90/10 ratio. To simulate the update of the training dataset in a dynamic environment, new log data are added to the training dataset at a fixed rate. For each dataset, we design 40 simulation cases, each with a corresponding training and testing dataset.

Table 3 shows the detailed information of example datasets used in the evaluation. The real and synthetic datasets are further divided into two subsets with different structures. We select 65% of the data records in the training dataset, which have a structure different from the other portion. For the testing dataset, we select only 30% of the records, whose structure is the same as the major portion of the training dataset.

### Evaluation

To evaluate our approach for fault classification of web service flows, we conducted experiments on both real and synthetic log datasets. We compare the classification results of our approach with those of other classifiers for semi-structured documents. Experimental results show that our approach outperforms other approaches in dynamic and heterogeneous environments.

#### Evaluation Results

We define accuracy as the proportion of log records that are correctly assigned to a category. The average accuracy is used as the key metric in this experiment, which is the mean accuracy over all categories of the real and synthetic datasets.

#### Comparative Analysis

- **Accuracy**: The comparative results of three classification approaches (BN, SBN, and DSBN) are demonstrated. For different algorithms with the same update rate (UR), BN has poor diagnosis accuracy since it cannot handle heterogeneous training data. SBN and DSBN can handle heterogeneous data, resulting in lower misdiagnosis rates.
- **Misdiagnosis Rate**: SBN and DSBN have lower misdiagnosis rates compared to BN. SBN has a slight advantage over DSBN in terms of misdiagnosis rate.
- **Diagnosis Time**: SBN spends the most time since it needs to learn from the whole dataset for updating the generation model. DSBN, which adjusts the generation model incrementally, has slightly more time cost than BN but is more suitable for deployment in practical systems due to its balance between accuracy and efficiency.

### Conclusion

In this paper, we focus on fault diagnosis by analyzing semi-structured log data. By transforming the fault diagnosis problem into a classification problem, we utilize classification methods to diagnose faults. We propose a similarity-based Bayesian learning approach for constructing combined Bayesian networks, which are used as generative models to classify fault-related log data. Our approach can learn from training data with different structural information and consists of three main steps: (1) estimating similarity degrees of structural elements from different log files, (2) constructing the basic structure of CBNs by computing its probabilities using a similarity-based learning algorithm, and (3) classifying test log data into possible fault categories based on the generated CBNs.

Based on the evaluation results, SBN outperforms BN when the size of the log dataset increases. In terms of both diagnosis accuracy and time, the proposed DSBN algorithm has advantages over SBN and BN. Since diagnosis time is a major consideration in fault-tolerant service flow execution, DSBN is more suitable for deployment in practical systems.

### Future Work

In the future, we plan to enlarge the size of log datasets from more real-world service flows. Additionally, we will study strategies and mechanisms for optimizing the trade-off between accuracy and efficiency in fault diagnosis for web service composition.

### Acknowledgment

This work is partially supported by the National Basic Research Priorities Programme (No. 2013CB329502), the National Natural Science Foundation of China (No. 61472468, 61502115), the General Research Fund of Hong Kong (No. 417112), and the Fundamental Research Funds for the Central Universities (No. 3262014T75, 3262015T20, 3262015T70, 3262016T31).

### References

[1] M.P. Papazoglou, P. Traverso, S. Dustdar, F. Leymann, Computer 40(11) (2007) 38-45.
[2] M.P. Papazoglou, W.-J. Heuvel, VLDB J. 16(3) (2007) 389-415.
[3] L. Richardson, S. Ruby, RESTful Web Services, O'Reilly, Sebastopol, CA, 2007.
[4] C. Pautasso, O. Zimmermann, F. Leymann, RESTful Web services vs. Big‘ Web services: making the right architectural decision, in: Proc. International World Wide Web Conference (WWW’08), Beijing, China, 2008.
[5] Q.Z. Sheng, X. Qiao, A.V. Vasilakos, C. Szabo, S. Bourne, et al., Inf. Sci. 280(2014) 218-238.
[6] A. Alves, A. Arkin, S. Askary, C. Barreto, B. Bloch, et al. (Eds.), Web Service Business Process Execution Language Version 2.0, 2007. Available online at: http://docs.oasis-open.org/wsbpel/2.0/OS/wsbpel-v2.0-OS.html.
[7] J. Lee, S.-J. Lee, P.-F. Wang, IEEE Trans. Serv. Comput. 8(2) (2015).
[8] L. Ardissono, R. Furnari, A. Goy, G. Petrone, M. Segnan, Fault tolerant web service orchestration by means of diagnosis, in: Proc. European Workshop on Software Architecture (EWSA’06), Nantes, France, 2006.
[9] G. Friedrich, M. Fugini, E. Mussi, B. Pernici, G. Tagni, IEEE Trans. Softw. Eng. 36(2010) 198-215.
[10] O. Kopp, F. Leymann, D. Wutke, Fault handling in the web service stack, in: Proc. International Conference on Service Oriented Computing, LNCS 6470, 2010, pp. 303-317.
[11] WS-DIAMOND team, WS-DIAMOND: Web Services DIAgnosability, MONitoring and Diagnosis, 2005. Available online at: http://wsdiamond.di.unito.it/.
[12] Y. Yan, P. Dague, Monitoring and diagnosing orchestrated web service processes, in: Proc. IEEE International Conference on Web Services (ICWS’07), Salt Lake City, Utah, USA, 2007.
[13] Y. Yan, P. Dague, Y. Pencolé, M.O. Cordier, Int. J. Web Serv. Res. (JWSR) 6(1) (2009) 87-110.
[14] W. Mayer, G. Friedrich, M. Stumptner, Diagnosis of service failures by trace analysis with partial knowledge, in: Proc. International Conference on Service Oriented Computing, LNCS 6470, 2010, pp. 334-349.
[15] Y. Dai, L. Yang, B. Zhang, Z. Zhu, Exception diagnosis for composite service based on error propagation degree, in: Proc. IEEE International Conference on Services Computing (SCC’11), 2011, pp. 160-167.
[16] Z. Zhu, J. Li, Y. Zhao, Z. Li, SCENETester: a testing framework to support fault diagnosis for web service composition, in: Proc. IEEE International Conference on Computer and Information Technology, 2011, pp. 109-114.
[17] Z. Jia, R. Chen, Hybrid model-based diagnosis of web service compositions, in: Proc. International Joint AAAI Conference on Artificial Intelligence (AAAI'13), Bellevue, Washington, USA, 2013, pp. 1617-1618.
[18] T. Li, F. Liang, S. Ma, W. Peng, An integrated framework on mining log files for computing system management, in: Proc. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD’05), Chicago, Illinois, USA, 2005.
[19] W. Peng, T. Li, S. Ma, SIGKDD Explor. 7(1) (2008) 44-51.
[20] T. Reidemeister, M.A. Munawar, M. Jiang, P.A.S. Ward, Diagnosis of recurrent faults using log files, in: Proc. Conference of the Center for Advanced Studies on Collaborative Research (CASCON’09), Ontario, Canada, 2009.
[21] S. Duan, S. Babu, K. Munagala, FA: a system for automating failure diagnosis, in: Proc. IEEE International Conference on Data Engineering (ICDE’09), Shanghai, China, 2009.
[22] L. Denoyer, P. Gallinari, Inf. Process. Manag. 40(5) (2004) 807-827.
[23] M.J. Zaki, C.C. Aggarwal, XRules: an effective structural classifier for XML data, in: Proc. ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (SIGKDD’03), Washington, DC, USA, 2003.
[24] S. Modafferi, M. Enrico, P. Barbara, SH-BPEL: a self-healing plugin for WS-BPEL engines, in: Proc. Workshop on Middleware for Service-Oriented Computing, Melbourne, Australia, 2006.
[25] X. Han, Z. Shi, W. Niu, K. Chen, X. Yang, Similarity-based Bayesian learning from semi-structured log files for fault diagnosis of web services, in: Proc. IEEE/WIC/ACM International Conference on Web Intelligence, Toronto, Canada, 2010.
[26] S. Melnik, H. Garcia-Molina, E. Rahm, Similarity flooding: a versatile graph matching algorithm and its application to schema matching, in: Proc. IEEE International Conference on Data Engineering (ICDE’02), San Jose, California, USA, 2002.
[27] ActiveVOS, Available online at http://www.activevos.com/developers/sdks, 2011.
[28] S.K. Chilukuri, K. Doraisamy, Symptom database builder for autonomic computing, in: Proc. International Conference on Autonomic and Autonomous Systems (ICAS’06), Silicon Valley, CA, USA, 2006.