### Optimized Text

#### Introduction
During the interaction with botmasters, which can last for several hours [10], it is crucial to prevent bots from infecting a network of hosts. Although honeypots serve as essential decoy systems, allowing bots to communicate through a honey-wall [16] is risky, as it only limits communication rates. Given that bots generate minimal traffic and communicate stealthily with their botmaster, an intelligent system is required to control bot behavior during communication. This can be achieved by BotTee, which recognizes individual bot behaviors and controls specific bot actions, enabling secure monitoring of bot activities for extended periods. The hooking technique allows potentially malicious bot commands to be replaced with more benign actions or thwarted entirely.

#### Application and Command Correlation
The following table illustrates the correlation between bot commands and non-malicious applications. The bot commands are compared to the activities of benign applications to highlight their similarities.

| Application | Description | Bot Command | Internet Explorer | Winscp | Outlook Express | Notepad | PuTTy |
|-------------|-------------|-------------|------------------|--------|-----------------|---------|-------|
| Downloading a file | Clicking other links in the browser | download | visit | download | - | - | - |
| Connecting the server | - | connect | - | - | - | - | connect |
| Sending email | - | email | - | - | - | - | - |
| Executing notepad.exe on a local host | - | execute | - | - | - | - | - |
| Connecting a FTP server | - | connect | - | - | - | - | - |
| Downloading a file from a FTP server | - | download | - | - | - | - | - |
| Running 'ping' command | - | synflood | - | - | - | - | - |

| Correlation (ρ) | Probability (θ1 (%)) | CACT Length Matching (k) | Is Malicious? |
|-----------------|----------------------|---------------------------|---------------|
| 0.7713 | 97.49 | 9 | Yes |
| 0.0225 | 14.28 | 52 | No |
| 0.8727 | 99.97 | 13 | Yes |
| 0.8957 | 89.57 | 5 | No |
| 0.2529 | 51.92 | 25 | No |
| 0.8185 | 90.98 | 6 | No |
| 0.5564 | 66.99 | 6 | No |
| 0.6573 | 92.35 | 9 | No |
| 0.3692 | 52.87 | 7 | No |

**Note:** The results in the table show the correlation between bot commands and the activities of non-malicious applications. The bot commands are comparable to the actions performed by these benign applications.

#### Hooking Technique and Performance
Due to the overhead associated with hooking, intercepting all API calls at runtime is impractical. The results demonstrate that the set of calls in ComAPI is sufficient to recognize individual bot behaviors with minimal performance degradation. By considering the arguments of API calls, BotTee can accurately control current active bots. Additionally, using a compact finite state automaton approach [19] makes BotTee more practical and robust against severe obfuscation. This approach allows BotTee to identify individual actions dynamically without the need for semantic templates.

#### Related Work
Many network-based botnet detection schemes have been proposed in recent years. Researchers such as Felix [1], Evan [7], and Moheeb [2] have investigated botnet dynamics. Felix [1] suggested a method to mitigate DDoS attacks by shutting down centralized C&C servers. Moheeb [2] examined botnet behaviors by tracking IRC botnets using IRC protocol and DNS tracking techniques. These works employed honeypots to collect bot binaries infiltrating active botnets on the internet. David [5] studied global diurnal behaviors of botnets using DNS sinkholing. Guofei proposed three schemes to observe network-level botnet behaviors: BotHunter [20], BotSniffer [6], and BotMiner [21]. Rishi [8] proposed a signature-based IRC botnet detection system by identifying IRC bot nickname patterns and NICK messages. An anomaly-based botnet detection algorithm [22] was presented by combining IRC statistics and TCP work weight. Machine learning-based botnet detection also utilizes general network-level traffic features of chat-like protocols like IRC. Unlike most works that focus on IRC-based botnets, BotTee deals with characteristics of bots and botnets at the host level, independent of the network protocol used or the employment of encryption.

Several techniques have been presented for host-based bot detection using Detours [12]. Research on application behaviors through system calls has been ongoing for years [23]-[25]. Botswat [9] is a host-based behavioral bot detection system based on Detours, analyzing the behavior of installed bots to distinguish malicious bots from benign processes. BotTracer [10] uses known bot characteristics such as automatic startup, C&C channel establishment, and specific attacks. It detects bots through a few system calls related to disk access and process memory, which is insufficient for recognizing specific bot system-level activities. Lorenzo et al. [26] proposed a layered architecture for detecting malicious behaviors using tainting analysis in data control flow. However, our approach, BotTee, recognizes more specific bot behaviors, including common network threats like DoS, spam, click fraud, proxy, and scan, and is simpler and more efficient than taint analysis.

#### Conclusion
This paper proposes a method for identifying high-level commands executed by bots in real-time. This capability is useful for analyzing bot activities, intended victims, and control structures. The method is based on hooking selected system calls and comparing the resulting traces with previously captured bot command templates. The comparison involves computing the least common call trace subsequence and correlating call trace timing.

BotTee, the implemented system, was evaluated in a private network with actual bot instances. Under these conditions, BotTee successfully identified important bot commands from system call traces, even for commands executed by bots from other families not represented during template construction. With proper threshold selection, BotTee does not mis-identify commands and is relatively robust to call injection attacks. BotTee does not rely on network traffic analysis and is independent of the control protocol used. This approach can be combined with methods that examine network traffic for better overall performance. Further, logging and inspecting the arguments of captured system calls can provide additional insights into the attacker's intentions.

#### References
[1] F. C. Freiling, T. Holz, and G. Wicherski, “Botnet Tracking: Exploring a Root-Cause Methodology to Prevent Distributed Denial-of-Service Attacks,” in 10th European Symposium on Research in Computer Security, 2005.
[2] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis, “A Multi-faceted Approach to Understanding the Botnet Phenomenon,” in 6th ACM SIGCOMM conference on Internet measurement. ACM, 2006.
[3] P. Barford and V. Yegneswaran, “An Inside Look at Botnets,” in Special Workshop on Malware Detection, Advances in Information Security, 2006.
[4] M. A. Rajab, J. Zarfoss, F. Monrose, and A. Terzis, “My Botnet is Bigger than Yours (Maybe, Better than Yours): why size estimates remain challenging,” in First Workshop on Hot Topics in Understanding Botnets, 2007.
[5] D. Dagon, C. Zou, and W. Lee, “Modeling Botnet Propagation Using Time Zones,” in Network and Distributed System Security Symposium. The Internet Society, 2006.
[6] G. Gu, J. Zhang, and W. Lee, “BotSniffer: Detecting Botnet Command and Control Channels in Network Traffic,” in 15th Annual Network and Distributed System Security Symposium, 2008.
[7] E. Cooke, F. Jahanian, and D. McPherson, “The Zombie Roundup: Understanding, Detecting, and Disrupting Botnets,” in the Steps to Reducing Unwanted Traffic on the Internet Workshop. USENIX Association, 2005.
[8] J. Goebel, “Rishi: Identify Bot Contaminated Hosts by IRC Nickname Evaluation,” in First Workshop on Hot Topics in Understanding Botnets. USENIX Association, 2007.
[9] E. Stinson and J. C. Mitchell, “Characterizing Bots’ Remote Control Behavior,” in International Conference on Detection of Intrusions & Malware, and Vulnerability Assessment, 2007.
[10] L. Liu, S. Chen, G. Yan, and Z. Zhang, “BotTracer: Execution-based Bot-like Malware Detection,” in 11th Information Security Conference, 2008.
[11] Q. Zhang, “Polymorphic and Metamorphic Malware Detection,” Ph.D. dissertation, North Carolina State University, 2008.
[12] “Hooking,” http://en.wikipedia.org/wiki/Hooking.
[13] K. Jain and R. Sekar, “User-level infrastructure for system call interposition: A platform for intrusion detection and confinement,” in Network and Distributed Systems Security Symposium, 2000.
[14] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction to Algorithms, second edition. MIT Press and McGraw-Hill, 350-355. ISBN 0-262-53196-8, 2001.
[15] U. Bayer, C. Kruegel, and E. Kirda, “TTAnalyze: A tool for analyzing malware,” in 15th European Institute for Computer Antivirus Research Annual Conference, 2006.
[16] “The Honeynet Project,” http://www.honeynet.org/.
[17] “Obtaining Accurate Timestamps under Windows XP,” http://www.lochan.org/2005/keith-cl/useful/win32time.html.
[18] M. Vrable, J. Ma, J. Chen, D. Moore, E. Vandekieft, A. C. Snoeren, G. M. Voelker, and S. Savage, “Scalability, fidelity, and containment in the potemkin virtual honeyfarm,” SIGOPS Oper. Syst. Rev., vol. 39, no. 5, pp. 148–162, 2005.
[19] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni, “A Fast Automaton-based Method for Detecting Anomalous Program Behaviors,” in IEEE Symposium on Security and Privacy, 2001.
[20] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee, “BotHunter: Detecting Malware Infection Through IDS-Driven Dialog Correlation,” in 16th USENIX Security Symposium, 2007.
[21] G. Gu, R. Perdisci, J. Zhang, and W. Lee, “BotMiner: Clustering Analysis of Network Traffic for Protocol- and Structure-Independent Botnet Detection,” in 17th USENIX Security Symposium, 2008.
[22] J. R. Binkley and S. Singh, “An algorithm for anomaly-based botnet detection,” in 2nd conference on Steps to Reducing Unwanted Traffic on the Internet. USENIX Association, 2006.
[23] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant, “Semantics-Aware Malware Detection,” in IEEE Symposium on Security and Privacy, 2005.
[24] D. Wagner and R. Dean, “Intrusion Detection via Static Analysis,” in IEEE Symposium on Security and Privacy, 2001.
[25] Q. Zhang and D. S. Reeves, “MetaAware: Identifying Metamorphic Malware,” in 23rd Annual Computer Security Applications Conference, 2007.
[26] L. Martignoni, E. Stinson, M. Fredrikson, S. Jha, and J. C. Mitchell, “A layered architecture for detecting malicious behaviors,” in 11th international symposium on Recent Advances in Intrusion Detection, 2008.