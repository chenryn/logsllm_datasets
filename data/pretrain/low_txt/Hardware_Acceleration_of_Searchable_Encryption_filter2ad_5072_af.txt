# Table 1: Security and Asymptotic Complexity of State-of-the-Art DSSE Schemes

| Scheme/Property | Update Privacy | Size Privacy | Forward Privacy | Backward Privacy | Client Storage | Index Size | Search Cost | Update Cost | Parallelizable |
|-----------------|----------------|--------------|-----------------|------------------|---------------|------------|-------------|-------------|---------------|
| SPS14 [27]      | \(\mathcal{O}(1)\) | \(\mathcal{O}(1)\) | No | No | \(\mathcal{O}(1)\) | \(\mathcal{O}(n + m)\) | \(\mathcal{O}(\log n)\) | \(\mathcal{O}(n + m)\) | No |
| B16 [3]         | \(\mathcal{O}(1)\) | \(\mathcal{O}(1)\) | Yes | No | \(\mathcal{O}(1)\) | \(\mathcal{O}(n + m)\) | \(\mathcal{O}(\log n)\) | \(\mathcal{O}(n + m)\) | No |
| IM-DSSE         | \(\mathcal{O}(1)\) | \(\mathcal{O}(1)\) | Yes | Yes | \(\mathcal{O}(1)\) | \(\mathcal{O}(n + m)\) | \(\mathcal{O}(\log n)\) | \(\mathcal{O}(n + m)\) | Yes |

**Notes:**
- \(n\) and \(m\) denote the maximum number of keywords and files, respectively.
- \(n' < n\) and \(m' < m\) denote the actual number of keywords and files, respectively.
- \(k \leq n \cdot m\) is the number of keyword-file pairs.
- \(u\) = # unique keywords included in an updated file.
- \(r\) = # files matching search query.
- \(p\) = # processors.
- \(0 < \epsilon < 1\), \(\Delta_k\) = # historical update (add/delete) operations on keyword \(k\).
- \(\Delta_u\) = (accumulated) # unique keywords being newly added.
- The security parameter \(\lambda\) is omitted for analyzed complexity cost.
- Update privacy levels \(\{L_1, \ldots, L_5\}\) are described in Section 4.

## Detailed Performance Comparison

### Computational and Network Delays
- **IM-DSSEI and IM-DSSEI+II Schemes:**
  - In the desktop setting, the total delay is dominated by \(\mathcal{O}(n)\) AES-CTR decryptions, compared to \(\mathcal{O}(n)/128\) in the network setting when the server data is stored on an SSD.
  - The client computation in the IM-DSSEII scheme contributes almost 100% to the total delay, which is reflected in Figure 7b. This highlights the limitation of computational capability on mobile devices.

### Asymptotic Performance
- **Kamara et al. [18]:**
  - Achieves optimal sublinear search time but leaks significant information during updates.
  - Our IM-DSSE framework has linear search time but highly secure updates and can be parallelized.
- **Kamara et al. [16]:**
  - Uses red-black trees as the main data structure, achieving parallel search and oblivious update.
  - Incurs extreme server storage overhead due to large encrypted index size.
- **Stefanov et al. [27]:**
  - Requires high client storage (e.g., 210 MB for a moderate number of file-keyword pairs).
  - The client fetches a non-negligible amount of data from the server and performs an oblivious sort.
  - Our framework only requires two hash tables and three symmetric secret keys.
  - Data structure grows linearly with deletions, requiring re-encryption eventually. Our schemes do not require re-encryption and have constant storage regardless of the number of updates.
- **Cash et al. [5]:**
  - Introduces the most efficient DSSE scheme with sub-linear search complexity.
  - Despite being asymptotically better, our simulated results show it is only one order of magnitude faster in practice on very-large databases.
  - Does not offer forward-privacy, making it less secure than our schemes.

## Related Work

- **SSE Introduction:**
  - First introduced by Song et al. [26], followed by several improvements (e.g., [9, 8]).
  - Curtmola et al. [9] proposed a sublinear SSE scheme and introduced adaptive security against chosen-keyword attacks (CKA2).
  - Refinements of [9] offered extended functionalities but were limited by their static nature.
- **DSSE Developments:**
  - Kamara et al. [18] developed a DSSE scheme for dynamic file collections via an encrypted index, but it leaked significant information and was not parallelizable.
  - Kamara et al. [16] proposed a more secure and parallelizable DSSE scheme.
  - Recent DSSE schemes (e.g., [27, 5, 24, 12, 3, 15]) offer various trade-offs between security, functionality, and efficiency.
  - We compared several state-of-the-art DSSE schemes (i.e., [27, 5, 18, 17, 3, 12]) in Table 1 and Section 5.
- **Leakage and Attacks:**
  - Most traditional DSSE schemes, including ours, leak search and access patterns, making them vulnerable to statistical inference attacks (e.g., [14, 25, 4, 20, 23, 32]).
  - Oblivious Random Access Machine (ORAM) techniques (e.g., [11, 28]) can hide these patterns but are too costly for practical DSSE applications.
  - Hiding access pattern leakages in DSSE with more efficient approaches remains an open research problem.

## Conclusions

In this article, we presented IM-DSSE, a new DSSE framework that offers high privacy, efficient updates, and low search latency. Our constructions use a simple yet efficient incidence matrix data structure combined with two hash tables, enabling secure and efficient search and update operations. The framework is designed for cloud infrastructure and personal usage in different applications and environments. All schemes in IM-DSSE are proven to be secure and achieve the highest privacy among their counterparts. We conducted a detailed experimental analysis on real Amazon EC2 cloud systems, demonstrating the high practicality of our framework even on mobile devices with large datasets. The full-fledged implementation of our framework is available for public use and analysis.

## References

[1] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In Proceedings of the 1st ACM conference on Computer and Communications Security (CCS ’93), pages 62–73, NY, USA, 1993. ACM.

[2] C. Bösch, A. Peter, B. Leenders, H. W. Lim, Q. Tang, H. Wang, P. Hartel, and W. Jonker. Distributed searchable symmetric encryption. In Privacy, Security and Trust (PST), 2014 Twelfth Annual International Conference on, pages 330–337. IEEE, 2014.

[3] R. Bost. Sophos âĂŞ forward secure searchable encryption. In Proceedings of the 2016 ACM Conference on Computer and Communications Security. ACM, 2016.

[4] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks against searchable encryption. In Proceedings of the 22nd ACM CCS, pages 668–679, 2015.

[5] D. Cash, J. Jaeger, S. Jarecki, C. Jutla, H. Krawcyk, M.-C. Rosu, and M. Steiner. Dynamic searchable encryption in very-large databases: Data structures and implementation. In 21th Annual Network and Distributed System Security Symposium — NDSS 2014. The Internet Society, February 23-26, 2014.

[6] D. Cash, S. Jarecki, C. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. Highly-scalable searchable symmetric encryption with support for boolean queries. In Advances in Cryptology, CRYPTO 2013, volume 8042 of Lecture Notes in Computer Science, pages 353–373, 2013.

[7] D. Cash and S. Tessaro. The locality of searchable symmetric encryption. In Advances in Cryptology - EUROCRYPT 2014, pages 351–368. Springer, 2014.

[8] M. Chase and S. Kamara. Structured encryption and controlled disclosure. In Advances in Cryptology - ASIACRYPT 2010, volume 6477 of Lecture Notes in Computer Science, pages 577–594, 2010.

[9] R. Curtmola, J. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: Improved definitions and efficient constructions. In Proceedings of the 13th ACM conference on Computer and communications security, CCS ’06, pages 79–88. ACM, 2006.

[10] N. Dukkipati, T. Reçce, Y. Cheng, J. Chu, T. Herbert, A. Agarwal, A. Jain, and N. Sutin. An argument for increasing TCP’s initial congestion window. Computer Communication Review, 40(3):26–33, 2010.

[11] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. J. ACM, 43(3):431–473, 1996.

[12] F. Hahn and F. Kerschbaum. Searchable encryption with secure and efficient updates. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 310–320. ACM, 2014.

[13] T. Hoang, A. Yavuz, and J. Guajardo. Practical and secure dynamic searchable encryption via oblivious access on distributed data structure. In Proceedings of the 32nd Annual Computer Security Applications Conference (ACSAC). ACM, 2016.

[14] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: Ramification, attack and mitigation. In NDSS, volume 20, page 12, 2012.

[15] S. Kamara and T. Moataz. Boolean searchable symmetric encryption with worst-case sub-linear complexity. EUROCRYPT 2017, 2017.

[16] S. Kamara and C. Papamanthou. Parallel and dynamic searchable symmetric encryption. In Financial Cryptography and Data Security (FC), volume 7859 of Lecture Notes in Computer Science, pages 258–274. Springer Berlin Heidelberg, 2013.

[17] S. Kamara and C. Papamanthou. Parallel and dynamic searchable symmetric encryption. In Financial Cryptography and Data Security, pages 258–274. Springer, 2013.

[18] S. Kamara, C. Papamanthou, and T. Roeder. Dynamic searchable symmetric encryption. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 965–976, New York, NY, USA, 2012. ACM.

[19] H. Krawczyk. Cryptographic extraction and key derivation: The HKDF scheme. In Advances in Cryptology - CRYPTO 2010, volume 6223 of LNCS, pages 631–648. Springer, August 15-19 2010.

[20] C. Liu, L. Zhu, M. Wang, and Y.-a. Tan. Search pattern leakage in searchable encryption: Attacks and new construction. Information Sciences, 265:176–188, 2014.

[21] I. Miers and P. Mohassel. Io-dsse: Scaling dynamic searchable encryption to millions of indexes by improving locality. 2016.

[22] M. Naveed. The fallacy of composition of oblivious RAM and searchable encryption. IACR Cryptology ePrint Archive, 2015:668, 2015.

[23] M. Naveed, S. Kamara, and C. V. Wright. Inference attacks on property-preserving encrypted databases. In Proceedings of the 22nd ACM CCS, pages 644–655, 2015.

[24] M. Naveed, M. Prabhakaran, and C. A. Gunter. Dynamic searchable encryption via blind storage. In 35th IEEE Symposium on Security and Privacy, pages 48–62, May 2014.

[25] D. Pouliot and C. V. Wright. The shadow nemesis: Inference attacks on efficiently deployable, efficiently searchable encryption. In Proceedings of the 2016 ACM Conference on Computer and Communications Security. ACM, 2016.

[26] D. X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 44–55, 2000.

[27] E. Stefanov, C. Papamanthou, and E. Shi. Practical dynamic searchable encryption with small leakage. In 21st Annual Network and Distributed System Security Symposium — NDSS 2014. The Internet Society, February 23-26, 2014.

[28] E. Stefanov, M. Van Dijk, E. Shi, C. Fletcher, L. Ren, X. Yu, and S. Devadas. Path ORAM: An extremely simple oblivious RAM protocol. In Proceedings of the 2013 ACM SIGSAC conference on Computer and Communications security, pages 299–310. ACM, 2013.

[29] B. Wang, S. Yu, W. Lou, and Y. T. Hou. Privacy-preserving multi-keyword fuzzy search over encrypted data in the cloud. In INFOCOM, 2014 Proceedings IEEE, pages 2112–2120. IEEE, 2014.

[30] Z. Xia, X. Wang, X. Sun, and Q. Wang. A secure and dynamic multi-keyword ranked search scheme over encrypted cloud data. IEEE Transactions on Parallel and Distributed Systems, 27(2):340–352, 2016.

[31] A. A. Yavuz and J. Guajardo. Dynamic searchable symmetric encryption with minimal leakage and efficient updates on commodity hardware. In International Conference on Selected Areas in Cryptography, pages 241–259. Springer, 2015.

[32] Y. Zhang, J. Katz, and C. Papamanthou. All your queries are belong to us: The power of file-injection attacks on searchable encryption. In 25th USENIX Security ’16, pages 707–720, Austin, TX, 2016.