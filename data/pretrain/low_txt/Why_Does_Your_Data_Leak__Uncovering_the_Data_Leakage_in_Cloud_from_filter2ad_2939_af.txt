### Critical System Capabilities and Vulnerability Identification

A number of tools, such as CHEX [32] and Harehunter [21], have been developed to identify critical system capabilities. Recently, there have also been efforts to identify server-side vulnerabilities in mobile applications. For example:

- **Password Brute-Forcing Attacks** [47]: These occur when a server fails to track the number of user login attempts.
- **Shopping for Free** [40]: This happens if a merchant server does not validate payment information.
- **SQL Injection and Server API Misuse** [46, 49]: These vulnerabilities arise when servers do not properly check requests from apps.
- **Insecure User Tokens** [48]: This occurs when servers use tokens with no randomness in authorization.

Corresponding tools, such as AutoForge [47] and AuthScope [48], have been developed to detect these vulnerabilities.

### Misconfiguration Vulnerability Detection

Complex software systems, such as mBaaS (Mobile Backend as a Service) clouds, are difficult to configure and manage, leading to various configuration errors. Incorrect access control configurations, such as permission misconfigurations, can lead to security vulnerabilities. Unlike key misuse vulnerabilities, which are caused by mistakes from app developers, permission misconfigurations are typically caused by system administrators.

#### Tools for Detecting Permission Misconfigurations

- **FIREMAN [41]**: Uses symbolic model checking on firewall configurations to infer policy violations and inconsistencies.
- **Bauer et al. [25]**: Applied association rule mining to access control logs in typical application systems (e.g., healthcare) to infer intended policies and misconfigurations.
- **Baaz [26]**: Infers permission misconfigurations by monitoring updates to access control metadata and looking for inconsistencies among peers.

#### Configuration Testing

Several tools have been developed to detect misconfigurations through configuration testing:

- **ConfErr [31]**: A blackbox configuration testing tool that exposes configuration errors by injecting spelling, structural, and semantic errors.
- **ConfAid [22]**: A white-box configuration diagnosis tool that explores control and data flows related to erroneous behavior in configuration files.
- **SPEX [39]**: Another white-box configuration testing tool that generates configuration errors based on how configuration parameters are read and used.

LeakScope, being a blackbox testing tool, infers whether a cloud server has correctly configured user permissions by examining differences in server response messages. We believe cloud providers could go beyond blackbox testing and develop whitebox approaches to proactively detect permission misconfigurations.

### Conclusion

We have studied the reasons behind recent private data leaks from the cloud and identified two root causes: the misuse of keys in mobile app authentication and the misconfiguration of user permissions in authorization. We designed and implemented LeakScope to automatically identify cloud services that may contain data leakage vulnerabilities. Our evaluation, which included over 1.6 million mobile apps from the Google Play Store, uncovered tens of thousands of vulnerable cloud services, including those from major providers like Google, Amazon, and Microsoft. We have made responsible disclosures to each of the vulnerable service providers, who have confirmed the vulnerabilities and are actively working with mobile app developers to patch their services.

### Acknowledgments

We are grateful to the anonymous reviewers for their invaluable feedback. We also thank Erick Bauman and Atanas Rountev for their helpful comments on an early draft of the paper. This work was supported in part by AFOSR under grant FA9550-14-1-0119 and NSF awards 1718084, 1834213, and 1834215. Any opinions, findings, conclusions, or recommendations expressed are those of the authors and not necessarily of the AFOSR and NSF.

### References

[References listed here as per the original text]

### Appendix

In Table III, we used 1* and 2* to denote two sets of APIs due to space limitations. The concrete definitions of these APIs are provided in Table IX. There are 7 APIs in 1* and 17 APIs in 2*. We are interested in all of the first parameters, specifically the `bucketName` as reported in Table V.

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the essential content and structure of the original text.