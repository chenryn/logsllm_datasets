### Enhanced Text

Clients interacting with a honeyd platform that includes scripting provide more detailed information about themselves compared to a standard honeyd setup without any scripts. Similarity scores are not sufficient to evaluate the effectiveness of the emulation, as they do not offer insights into the actual behavior of the system. It is challenging to determine whether observed deviations in tests are significant enough to terminate the conversation with the client.

To address this, a real ScriptGen honeypot was deployed on the Internet from March to April 2005. The following ports were emulated using honeyd [14] scripts:
- **TCP Port 80 (HTTP)**: Emulated by ScriptGen
- **TCP Port 135 (DCE endpoint resolution)**: Only opened
- **UDP Port 137 (NetBios Name Service)**: Emulated by ScriptGen
- **TCP Port 139 (NetBios Session Service)**: Emulated by ScriptGen

The sample tcpdump file was created using interaction data from high-interaction honeypots provided by the Leurre’com project [4, 5, 6, 7, 8, 9]. This file contained requests from 1,107 different clients observed over a five-month period against a VMware honeypot.

#### 4.1 NetBios Scanners

An initial evaluation of the ScriptGen emulation involved running well-known NetBios scanners against the automatically generated script. All scanners successfully identified the host using the NetBios Name Service, correctly fetching information from the emulated host as if it were a real one. This indicates that the ScriptGen honeypot can perform adequately in simple scenarios, matching the emulation quality of a high-interaction honeypot running VMware.

#### 4.2 Comparison with a High-Interaction Honeypot

For a more comprehensive evaluation, the ScriptGen-based honeypot was deployed on the Internet and placed on the same subnet as a VMware high-interaction honeypot. This allowed for a direct comparison of the two honeypot implementations in a homogeneous environment.

According to [12], IP addresses can be considered free of "DHCP artifacts" for periods shorter than 24 hours. This means that each IP address can be uniquely associated with a single attacking client, even if it is dynamically assigned. By analyzing the collected data day by day, we could identify clients performing activities on both honeypots.

Table 3 shows the results extracted from the observation of tcpdump files for both environments over the two months. For clarity, we focus on the NetBios TCP port 139, which had the most complex ScriptGen state machine. Both environments experienced around 300 attacks, but only 45 attackers targeted both honeypots.

Table 4 provides a detailed comparison of a single client's behavior when interacting with both environments. The first two columns show the length of the observed sequences, which is the number of client and server messages. The ScriptGen environment consistently generated conversations of length 4, a pattern observed in 1,992 sequences (67% of the total). This peculiar behavior may be due to the way the ScriptGen honeypot handles messages.

Using Similarity Vectors, we compared the messages sent by the ScriptGen honeypot with those sent by the VMware environment. The table shows that the first client request, the corresponding answer, and the second client request were identical in both environments. However, the response to the second client request had an 80% similarity score, indicating a discrepancy that may cause the client to reject the ScriptGen answer and prematurely close the TCP session. Additionally, while clients typically performed each activity once on the VMware environment, multiple attempts were observed on the ScriptGen honeypot.

Analysis with a protocol analyzer [1] revealed that the issue stems from the preliminary and incomplete implementation of Dependency Handling (see section 2.4.3 on page 5). The SMB Header contains a Process ID field, which must match between the request and the response. Since the Dependency Handling support was inactive during the emulation, the ScriptGen emulator used the Process ID from the tcpdump samples without modification, leading to the rejection of the response by the client.

We fixed this problem and replayed the messages observed in the VMware environment against the new script. The results highlighted the importance of dependency handling. While several correct messages were exchanged, the emulator still provided erroneous replies near the end of the conversation. This is likely because the observed client activity was not present in the initial tcpdump sample file. The emulator can only handle behaviors seen in the sample data and may struggle with new activities generated by tools or worms that emerged after the sample was built.

ScriptGen emulators may not always handle newly encountered activities correctly. In the context of the Leurre’com project [4, 5, 6, 7, 8, 9], our primary goal is to gather long-term statistical data on attacks, so promptly detecting new activities is not a top priority. However, low certainty levels can signal such situations and trigger appropriate responses. An incremental version of the Region Analysis algorithm, allowing for refinement of existing state machines with new samples, is currently under development.

#### 4.3 Region Analysis Validation

In Section 2.4.2 on page 4, Region Analysis is described as a method to identify semantically important parts of the protocol, enabling pattern matching to distinguish incoming client requests and choose the future state. Here, we examine the impact of Region Analysis on a real case example, specifically the label of a transition in the NetBios Session Service state machine (TCP port 139) used in the ScriptGen honeypot. The analyzed packet is a Negotiate Protocol Request sent by the client during the initial steps of a conversation on that port.

Using a protocol analyzer [1], we determined the fields that Region Analysis considers important for discriminating between incoming packets. These fields and their values are listed below:

- **NetBIOS Session Service**
  - Message type: Session Message
  - Flags: 0x00
  - Message length: Not considered discriminating
- **SMB Header**
  - Server component: SMB
  - SMB Command: Negotiate Protocol
  - NT Status: STATUS_SUCCESS
  - Flags: 0x18 (characterize the type of query)
  - Flags2: Considered mutating (includes request for Unicode Strings and other features)
  - Signature: All zeroes
  - Reserver: All zeroes
  - Process ID: Mutating
  - UserID: Mutating
  - MultiplexID: Mutating
- **Negotiate Protocol Request**
  - WordCount: Mutating
  - ByteCount: Mutating
  - List of dialects: Mutating

Region Analysis correctly identifies fields with semantic meaning and distinguishes them from those that do not carry semantic value. The original state machine would have failed to handle packets with different Process IDs, as it did not recognize the semantic value of this difference. After Region Analysis, the emulator can ignore such differences, highlighting the importance of macroclusterings and microclusterings and the inadequacy of a simple bytewise pattern matching approach.

#### 4.4 Relationship Between Complexity and Emulation Quality

It has been shown that the ScriptGen honeypot can sustain a conversation for a certain number of steps. The question is whether there is control over the number of steps to maintain the conversation as long as needed.

By correlating the number of nodes in the state machine with the obtained similarity score, we derived the curve shown in Figure 7. This curve illustrates the relationship between the complexity of the state machine and the similarity score, which is the average of the values in the vectors discussed earlier. A similarity score of 1.0 indicates that the conversation generated by the emulated server is identical in content and length to that of a real server. A higher similarity score corresponds to a longer conversation between the client and server.

### Conclusions

ScriptGen is a tool capable of creating honeyd-compatible emulators for any protocol using a given sample of interaction. No assumptions are made about the nature of the protocol, making it applicable to a wide range of protocols without prior knowledge of their behavior.

When tested with the SMB protocol, ScriptGen demonstrated sensitivity to the choice of simplification parameters and the sample tcpdump file. Nonetheless, it generated emulators that could sustain valid conversations with clients for a certain number of steps, depending on the complexity of the built emulator. Greater complexity generally yields better results in deceiving attack tools.

Preliminary results are highly encouraging, opening new avenues for research and providing practical improvements for honeyd users. There is room for improvement, particularly in enhancing dependency handling and conducting further validation. Dynamic evolution of the state machine when encountering new activities is another promising research topic. As it stands, the method brings novel and important contributions, including the enrichment of the PI algorithm through region analysis, a new method for automatically creating honeyd scripts for a wide class of services and protocols, and a robust validation methodology.

### References

[1] Ethereal, the world’s most popular protocol analyzer. http://www.ethereal.com accessed at 03/09/2005.
[2] The tcpreplay official homepage. http://tcpreplay.sourceforge.net accessed at 03/09/2005.
[3] M. A. Beddoe. Network protocol analysis using bioinformatics algorithms. http://www.insidiae.com/PI accessed at 03/09/2005, 2005.
[4] M. Dacier, F. Pouget, and H. Debar. Attack processes found in NATO Symposium IST-041/RSY-013, Toulouse, France, April 2004.
[5] M. Dacier, F. Pouget, and H. Debar. Honeypot-based forensics. In Proceedings of AusCERT Asia Pacific Information Technology Security Conference 2004, Brisbane, Australia, May 2004.
[6] M. Dacier, F. Pouget, and H. Debar. Honeypots, a practical mean to validate malicious fault assumptions. In Proceedings of the 10th Pacific Ream Dependable Computing Conference (PRDC04), Tahiti, February 2004.
[7] M. Dacier, F. Pouget, and H. Debar. Towards a better understanding of internet threats to enhance survivability. In Proceedings of the International Infrastructure Survivability Workshop 2004 (IISW’04), Lisbonne, Portugal, December 2004.
[8] M. Dacier, F. Pouget, and H. Debar. Honeynets: foundations for the development of early warning information systems. In J. Kowalik, J. Gorski, and A. Sachenko, editors, Proceedings of the Cyberspace Security and Defense: Research Issues, 2005.
[9] M. Dacier, F. Pouget, and H. Debar. Leurre.com: On the advantages of deploying a large scale distributed honeypot platform. In Proceedings of the E-Crime and Computer Conference 2005 (ECCE’05), Monaco, March 2005.
[10] G. H. Hong and S. F. Wu. On interactive internet traffic replay. In 8th Symposium on Recent Advanced Intrusion Detection (RAID), LNCS, Seattle, September 2005. Springer.
[11] E. Kohler. The Click modular router. PhD thesis, MIT, November 2000.
[12] D. Moore, C. Shannon, and J. Brown. Code red: a case study on the spread and victims of an internet worm. In Proceedings of ACM SIGCOMM Internet Measurement Workshop, November 2002.
[13] Pang, Yegneswaran, Barford, Paxson, and Peterson. Characteristics of background radiation. In Proceedings of the 4th ACM SIGCOMM conference on the Internet Measurement, 2004.
[14] N. Provos. A virtual honeypot framework. In Proceedings of the 12th USENIX Security Symposium, pages 1–14, August 2004.
[15] V. Yegneswaran, P. Barford, and D. Plonka. On the design and use of internet sinks for network abuse monitoring. In Proceedings of the Network and Distributed Security Symposium (NDSS), February 2004.