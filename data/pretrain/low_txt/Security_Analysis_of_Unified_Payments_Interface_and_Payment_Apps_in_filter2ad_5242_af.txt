### References

1. **Bradley Reaves, Nolen Scaife, Adam Bates, Patrick Traynor, and Kevin R.B. Butler.** "Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking Applications in the Developing World." *24th USENIX Security Symposium (USENIX Security 15)*, pages 17-32, 2015.

2. **Bradley Reaves, Luis Vargas, Nolen Scaife, Dave Tian, Logan Blue, Patrick Traynor, and Kevin R.B. Butler.** "Characterizing the Security of the SMS Ecosystem with Public Gateways." *ACM Transactions on Privacy and Security*, 22(2):1-31, December 2018.

3. **M. Roland, J. Langer, and J. Scharinger.** "Applying Relay Attacks to Google Wallet." *2013 5th International Workshop on Near Field Communication (NFC)*, pages 1-6, February 2013.

4. **Michael Roland and Josef Langer.** "Cloning Credit Cards: A Combined Pre-Play and Downgrade Attack on EMV Contactless." *Proceedings of the 7th USENIX Conference on Offensive Technologies (WOOT’13)*, pages 6-6, 2013.

5. **M. Sabt, M. Achemlal, and A. Bouabdallah.** "Trusted Execution Environment: What It Is, and What It Is Not." *2015 IEEE Trustcom/BigDataSE/ISPA*, volume 1, pages 57-64, August 2015.

6. **Hossein Siadati, Toan Nguyen, Payas Gupta, Markus Jakobsson, and Nasir Memon.** "Mind Your SMSes." *Computers & Security*, 65:14-28, March 2017.

7. **Soot.** "Soot Tutorial." *https://www.sable.mcgill.ca/soot/tutorial/profiler2/index.html*. [Online; accessed October 2018].

8. **Chris McMahon Stone, Tom Chothia, and Flavio D. Garcia.** "Spinner: Semi-Automatic Detection of Pinning Without Hostname Verification." *Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC 2017)*, pages 176-188, 2017.

9. **Vincent F. Taylor and Ivan Martinovic.** "Short Paper: A Longitudinal Study of Financial Apps in the Google Play Store." *Financial Cryptography and Data Security*, pages 302-309, 2017.

10. **Economic Times.** "New Form of OTP Theft on Rise, Many Techies Victims." *https://economictimes.indiatimes.com/news/politics-and-nation/new-form-of-otp-theft-on-rise-many-techies-victims/articleshow/67521098.cms*. [Online; accessed August 2019].

11. **India Today.** "Fraudsters Steal Rs 91,000 from a Man's e-Wallet." *https://www.indiatoday.in/technology/news/story/fraudsters-steal-rs-91-000-from-a-man-s-e-wallet-1382689-2018-11-05*. [Online; accessed August 2019].

12. **Patrick Traynor, Thomas La Porta, and Patrick McDaniel.** "Security for Telecommunications Networks." *Advances in Information Security*, 2008.

13. **Wandera.** "What Are App Permissions – A Look into Android App Permissions." *https://www.wandera.com/mobile-security/app-and-data-leaks/app-permissions/*. [Online; accessed August 2019].

14. **Jane K. Winn and Louis De Koker.** "Introduction to Mobile Money in Developing Countries: Financial Inclusion and Financial Integrity Conference Special Issue." *University of Washington School of Law Research Paper*, (2013-01), 2013.

15. **Wenbo Yang, Yuanyuan Zhang, Juanru Li, Hui Liu, Qing Wang, Yueheng Zhang, and Dawu Gu.** "Show Me the Money! Finding Flawed Implementations of Third-Party In-App Payment in Android Apps." *NDSS*, 2017.

16. **Changsok Yoo, Byung-Tak Kang, and Huy Kang Kim.** "Case Study of the Vulnerability of OTP Implemented in Internet Banking Systems of South Korea." *Multimedia Tools and Applications*, 74:3289-3303, May 2015.

### Appendix

#### 9.1 BHIM Code Instrumentation

We provide a brief discussion of one example instrumentation of BHIM with the goal of determining the workflow of the UPI protocol. BHIM version 1.3 consists of approximately 516,000 lines of obfuscated smali code. Some apps, such as Paytm, are even larger than BHIM, posing a significant reverse engineering challenge.

After searching through the BHIM code, we located the snippet below that belongs to the NPCI library and is integrated with the BHIM app. We found that NPCI had not obfuscated the name of the package, as shown in line #1 in `org/npci/upiapp/utils`. However, the method names are obfuscated, as indicated by the method name at line #19 called `a`. The third-party libraries used by NPCI are not obfuscated, as seen by the class `org.apache.http.impl.client.DefaultHttpClient` at line #17.

We instrumented different portions of the BHIM app to determine the control flow of the program. We found that when using automated tools such as Soot [7] to instrument the app, we encountered unexpected failures, such as the app hanging indefinitely (we did get Soot to work for smaller test programs). We were unable to root-cause why BHIM's instrumentation with Soot did not work. Hence, we resorted to a careful smali code instrumentation of BHIM.

Listing 1 shows the method that performs an HTTP GET request. Since the methods are all static methods, by Android (and Java) convention, the first parameter is stored in the register `p0`, the second in register `p1`, and so on. The registers `v0`, `v1`, etc., are local to a method body. Listing 2 contains code that prints the parameters to the GET request contained in the parameter `p1`. We inserted the code in Listing 2 after line #38, right at the beginning of the function (after the function prologue at line #35). The inserted code snippet prints the parameters using the `System.out.print` API call. The printed debug statements appear in the Android logcat logs. We performed similar instrumentation for HTTP POST methods.

Some apps, such as Paytm, which contain several DEX files (with each DEX file containing a maximum of 65,536 methods), were even more challenging to instrument, as they obfuscate the calls to most of the third-party libraries they use. In such cases, further experimentation and analysis were required to discover the calls. Additionally, the security defenses used by these apps may change across app revisions. For instance, while older versions of Paytm could be repackaged, the latest version of the app resists repackaging.

```java
// Listing 1: BHIM code snippet
class public Lin / org / npci / upiapp / utils / RestClient ;
super Ljava / lang / Object ;
source "RestClient.java"

# annotations
.annotation system Ldalvik / annotation / MemberClasses ;
value = {
    Lin / org / npci / upiapp / utils / RestClient$UnsuccessfulRestCall ;
}
.end annotation

# static fields
.field private static final a: Ljava / lang / String ;
.field private static b: Lorg / apache / http / impl / client / DefaultHttpClient ;
.field private static c: Lorg / apache / http / impl / client / DefaultHttpClient ;

.method public static a(Landroid / content / Context ; Ljava / lang / String ; Ljava / util / Map ;)Lin / org / npci / upiapp / models / ApiResponse ;)
.locals 6
.annotation system Ldalvik / annotation / Signature ;
value = {
    "(",
    "Landroid / content / Context ;",
    "Ljava / lang / String ;",
    "Ljava / util / Map ;)",
    "Lin / org / npci / upiapp / models / ApiResponse ;"
}
.end annotation
.prologue
const /16 v5, 0x130
.line 404
new-instance v2, Lorg / apache / http / client / methods / HttpGet ;
invoke-direct {v2}, Lorg / apache / http / client / methods / HttpGet ;->()V
.line 405
...
move-result-object v2
const-string v3, ". Response Code: "
invoke-virtual {v2, v3}, Ljava / lang / StringBuilder ;->append(Ljava / lang / String;)Ljava / lang / StringBuilder ;
move-result-object v2
invoke-interface {v0}, Lorg / apache / http / HttpResponse ;->getStatusLine()Lorg / apache / http / StatusLine ;
move-result-object v0
invoke-interface {v0}, Lorg / apache / http / StatusLine ;->getStatusCode()I
.move-result v0
...
.end method
```

```java
// Listing 2: HTTP GET Instrumentation Code
sget-object v0, Ljava / lang / System ;->out:Ljava / io / PrintStream ;
new-instance v1, Ljava / lang / StringBuilder ;
invoke-direct {v1}, Ljava / lang / StringBuilder ;->()V
const-string / jumbo v2, "Log_debug_upi_str0: "
invoke-virtual {v1, v2}, Ljava / lang / StringBuilder ;->append(Ljava / lang / String;)Ljava / lang / StringBuilder ;
move-result-object v1
invoke-virtual {v1, p1}, Ljava / lang / StringBuilder ;->append(Ljava / lang / String;)Ljava / lang / StringBuilder ;
move-result-object v1
invoke-virtual {v1}, Ljava / lang / StringBuilder ;->toString()Ljava / lang / String ;
move-result-object v1
invoke-virtual {v0, v1}, Ljava / io / PrintStream ;->println(Ljava / lang / String;)V

sget-object v0, Ljava / lang / System ;->out:Ljava / io / PrintStream ;
new-instance v1, Ljava / lang / StringBuilder ;
invoke-direct {v1}, Ljava / lang / StringBuilder ;->()V
const-string / jumbo v2, "Log_debug_upi_restclient_map0: "
invoke-virtual {v1, v2}, Ljava / lang / StringBuilder ;->append(Ljava / lang / String;)Ljava / lang / StringBuilder ;
move-result-object v1
invoke-virtual {p2}, Ljava / lang / Object ;->toString()Ljava / lang / String ;
move-result-object v2
invoke-virtual {v1, v2}, Ljava / lang / StringBuilder ;->append(Ljava / lang / String;)Ljava / lang / StringBuilder ;
move-result-object v1
invoke-virtual {v1}, Ljava / lang / StringBuilder ;->toString()Ljava / lang / String ;
move-result-object v1
invoke-virtual {v0, v1}, Ljava / io / PrintStream ;->println(Ljava / lang / String;)V
```

---

This revised version of the text is more structured, clear, and professional, making it easier to read and understand.