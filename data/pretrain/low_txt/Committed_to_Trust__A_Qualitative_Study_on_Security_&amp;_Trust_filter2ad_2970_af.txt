### Research Findings and Analysis

**Decision-Making and Infrastructure:**
Our participants reported that decisions are made based on direct community input and feedback. They also leverage package registries and other distribution infrastructures, tailored to the needs of their users. The use of modern build systems is prevalent, including during testing and deployment, with criteria for dependencies ranging from readily available metrics to thorough reviews.

**RQ2: Guidance and Policies in Open Source Projects**
There was a divergence in opinions regarding the usefulness of written guidance, with some preferring more hands-on approaches to knowledge transfer. Larger projects often have dedicated security teams, while smaller projects typically provide a single point of contact for security. Most projects have some form of disclosure policy or contact for security issues.

**RQ3: Approaches to Security and Trust Challenges**
Most participants reported no significant security or trust incidents, though many were familiar with suspicious or low-quality commits and potential vulnerabilities introduced by dependencies. Trust with new contributors is often established through a meritocracy system, with some projects assuming initial trustworthiness to facilitate first-time contributions. Larger, older projects more frequently reported incidents and had more structured incident handling processes.

### Detailed Discussion

**Ecosystem Interconnectivity:**
Open source projects are part of a larger, interconnected ecosystem of components, libraries, and software registries. A compromised dependency can introduce vulnerabilities into thousands of downstream projects. This interdependence was well-recognized by our participants:

> "We don’t have the resources to fix all the dependencies. Every backward-incompatible change we make to address security concerns has far-reaching repercussions in the ecosystem beyond our project." — P22

**Community-Driven Development:**
Project development, as described by our participants, is highly community-driven and practical. Decisions such as release windows, announcements, and distribution infrastructure are based on the input, feedback, and needs of contributors and users. Security and trust incidents are generally handled "as they happen," which is a pragmatic strategy given the limited resources of smaller communities.

**False Positives and Security Warnings:**
The combination of deep dependency chains and automatic testing can lead to many false positive security warnings. These false positives can create a habituation effect, where repeated false alarms diminish the perceived importance of security warnings. As one participant noted:

> "A false positive is worse than missing a real vulnerability because if you miss a real vulnerability, everyone becomes more vigilant about security. If there’s a false positive, people start to dismiss security warnings altogether. It's much harder to reverse this attitude than it is to make people care about security." — P06

**Conclusion:**
In 27 in-depth, semi-structured interviews with owners, maintainers, and contributors from a diverse set of open source projects, we explored their security measures and trust processes. We found that these projects are highly diverse in both their deployed security measures and trust processes, as well as their underlying motivations.

As projects grow in scope and contributors, so do their needs for robust security and trust processes. We argue for supporting projects in ways that align with their growth. Small projects, while not able to match the security and trust measures of large, corporate-backed projects, should still receive appropriate support. Future considerations include identifying measures that balance working hours and security improvement, especially for smaller projects.

Smaller projects often handle security and trust incidents "as they happen." Elaborate incident playbooks and committer structures may be less useful due to frequent changes in committers and structures. Public, general example playbooks and resources could better support these projects when needed.

As researchers, we advocate for treating open source developers as valuable partners in enhancing security and trust in OSS and software ecosystems. We argue for support that considers the individual strengths and limitations of each project, particularly for smaller projects with limited resources and contributors.

### Acknowledgements
We would like to thank our interviewees for their participation and valuable time. Your contributions have brought us one step closer to more secure and trustworthy software. We also thank the anonymous reviewers for their feedback.

### References
[1] GitHub, The State of the Octoverse, https://octoverse.github.com/, Accessed: 2021-10-15, 2020.
[2] Microsoft, GitHub, https://github.com, Accessed: 2021-09-29, 2008.
[3] GitLab Inc., GitLab, https://gitlab.com, Accessed: 2021-09-29, 2014.
[4] Cybersecurity and I. S. A. (CISA), Malware discovered in popular npm package, ua-parser-js, https://us-cert.cisa.gov/ncas/current-activity/2021/10/22/malware-discovered-popular-npm-package-ua-parser-js, Accessed: 2021-10-24, 2021.
[5] L. Abrams, Popular npm library hijacked to install password-stealers, miners, https://www.bleepingcomputer.com/news/security/popular-npm-library-hijacked-to-install-password-stealers-miners/, Accessed: 2021-10-24, 2021.
[6] M. Hanley, Github’s commitment to npm ecosystem security, https://github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-security/#security-issues-related-to-the-npm-registry, Accessed: 2021-11-17, Nov. 2021.
[7] A. Sharma, Npm fixes private package names leak, serious authorization bug, https://www.bleepingcomputer.com/news/security/npm-fixes-private-package-names-leak-serious-authorization-bug/, Accessed: 2021-11-16, Nov. 2021.
[8] The Linux Foundation, “Open source software supply chain security,” Tech. Rep., Feb. 2020, Accessed: 2021-11-16.
[9] RedHat, The State of Enterprise Open Source 2020: Enterprise open source use rises, proprietary software declines, https://www.redhat.com/en/blog/state-enterprise-open-source-2020-enterprise-open-source-use-rises-proprietary-software-declines, Accessed: 2021-06-23, Feb. 2020.
[10] Linux Foundation’s Technical Advisory Board, Report on University of Minnesota breach-of-trust incident, https://lwn.net/ml/linux-kernel/202105051005.49BFABCE@keescook/, Accessed: 2021-11-27, May 2021.
[11] K. Thompson, “Reflections on trusting trust,” Commun. ACM, vol. 27, no. 8, pp. 761–763, Aug. 1984.
[12] A. Pietri, D. Spinellis, and S. Zacchiroli, “The software heritage graph dataset: Public software development under one roof,” in Proceedings of the 16th International Conference on Mining Software Repositories, ser. MSR ’19, Montreal, Quebec, Canada: IEEE Press, 2019, pp. 138–142.
[13] ——, “The software heritage graph dataset: Large-scale analysis of public software development history,” in Proceedings of the 17th International Conference on Mining Software Repositories, ser. MSR ’20, Seoul, Republic of Korea: Association for Computing Machinery, 2020, pp. 1–5.
[14] A. Alali, H. Kagdi, and J. I. Maletic, “What’s a typical commit? a characterization of open source software repositories,” in 2008 16th IEEE International Conference on Program Comprehension, 2008, pp. 182–191.
[15] G. Robles, L. Arjona Reina, A. Serebrenik, B. Vasilescu, and J. M. González-Barahona, “Floss 2013: A survey dataset about free software contributors: Challenges for curating, sharing, and combining,” in Proceedings of the 11th Working Conference on Mining Software Repositories, ser. MSR 2014, New York, NY, USA: Association for Computing Machinery, 2014, pp. 396–399.
[16] A. Gkortzis, D. Mitropoulos, and D. Spinellis, “Vulinoss: A dataset of security vulnerabilities in open-source systems,” in Proceedings of the 15th International Conference on Mining Software Repositories, ser. MSR ’18, Gothenburg, Sweden: Association for Computing Machinery, 2018, pp. 18–21.
[17] M. Shahzad, M. Z. Shafiq, and A. X. Liu, “A large scale exploratory analysis of software vulnerability life cycles,” in Proceedings of the 34th International Conference on Software Engineering, ser. ICSE ’12, Zurich, Switzerland: IEEE Press, 2012, pp. 771–781.
[18] G. Gousios and D. Spinellis, “Ghtorrent: Github’s data from a firehose,” in Proceedings of the 9th IEEE Working Conference on Mining Software Repositories, ser. MSR ’12, Zurich, Switzerland: IEEE Press, 2012, pp. 12–21.
[19] G. Gousios, B. Vasilescu, A. Serebrenik, and A. Zaidman, “Lean ghtorrent: Github data on demand,” in Proceedings of the 11th Working Conference on Mining Software Repositories, ser. MSR 2014, Hyderabad, India: Association for Computing Machinery, 2014, pp. 384–387.
[20] Q. Tu et al., “Evolution in open source software: A case study,” in Proceedings 2000 International Conference on Software Maintenance, IEEE, 2000, pp. 131–142.
[21] A. Mockus, R. T. Fielding, and J. D. Herbsleb, “Two case studies of open source software development: Apache and mozilla,” ACM Transactions on Software Engineering and Methodology (TOSEM), vol. 11, no. 3, pp. 309–346, 2002.
[22] T. T. Dinh-Trong and J. M. Bieman, “The FreeBSD project: A replication case study of open source development,” IEEE Transactions on Software Engineering, vol. 31, no. 6, pp. 481–494, 2005.
[23] N. Edwards and L. Chen, “An historical examination of open source releases and their vulnerabilities,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security, ser. CCS ’12, Raleigh, North Carolina, USA: Association for Computing Machinery, 2012, pp. 183–194.
[24] A. D. Householder, J. Chrabaszcz, T. Novelly, D. Warren, and J. M. Spring, “Historical analysis of exploit availability timelines,” in 13th USENIX Workshop on Cyber Security Experimentation and Test (CSET 20), 2020.
[25] A. Bosu, J. C. Carver, M. Hafiz, P. Hilley, and D. Janni, “When are OSS developers more likely to introduce vulnerable code changes? a case study,” in Open Source Software: Mobile Open Source Technologies, L. Corral, A. Sillitti, G. Succi, J. Vlasenko, and A. I. Wasserman, Eds., Berlin, Heidelberg: Springer Berlin Heidelberg, 2014, pp. 234–236.
[26] P. Anbalagan and M. Vouk, “Towards a unifying approach in understanding security problems,” in 20th International Symposium on Software Reliability Engineering, 2009, pp. 136–145.
[27] L. Tan, C. Liu, Z. Li, X. Wang, Y. Zhou, and C. Zhai, “Bug characteristics in open source software,” Empirical software engineering, vol. 19, no. 6, pp. 1665–1705, 2014.
[28] J. Walden, “The impact of a major security event on an open source project: The case of OpenSSL,” in Proceedings of the 17th International Conference on Mining Software Repositories, 2020, pp. 409–419.
[29] K. Altinkemer, J. Rees, and S. Sridhar, “Vulnerabilities and patches of open source software: An empirical study,” Journal of Information System Security, vol. 4, no. 2, pp. 3–25, 2008.
[30] M. Alenezi and Y. Javed, “Open source web application security: A static analysis approach,” in 2016 International Conference on Engineering & MIS (ICEMIS), 2016, pp. 1–5.
[31] F. Zampetti, S. Scalabrino, R. Oliveto, G. Canfora, and M. Di Penta, “How open source projects use static code analysis tools in continuous integration pipelines,” in Proceedings of the 14th International Conference on Mining Software Repositories, ser. MSR ’17, Buenos Aires, Argentina: IEEE Press, 2017, pp. 334–344.
[32] M. Zahedi, M. Ali Babar, and C. Treude, “An empirical study of security issues posted in open source projects,” in Proceedings of the 51st Hawaii International Conference on System Sciences (HICSS18), 2018, pp. 5504–5513.
[33] P. Deligiannis, A. F. Donaldson, and Z. Rakamaric, “Fast and precise symbolic analysis of concurrency bugs in device drivers,” in 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), IEEE, 2015, pp. 166–177.
[34] J.-J. Bai, J. Lawall, Q.-L. Chen, and S.-M. Hu, “Effective static analysis of concurrency use-after-free bugs in Linux device drivers,” in 2019 USENIX Annual Technical Conference (USENIX ATC 19), 2019, pp. 255–268.
[35] J. Śliwerski, T. Zimmermann, and A. Zeller, “When do changes induce fixes?” SIGSOFT Softw. Eng. Notes, vol. 30, no. 4, pp. 1–5, May 2005.
[36] F. Li and V. Paxson, “A large-scale empirical study of security patches,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, 2017, pp. 2201–2215.
[37] R. Ramsauer, L. Bulwahn, D. Lohmann, and W. Mauerer, “The sound of silence: Mining security vulnerabilities from secret integration channels in open-source projects,” in Proceedings of the 2020 ACM SIGSAC Conference on Cloud Computing Security Workshop, ser. CCSW’20, Virtual Event, USA: Association for Computing Machinery, 2020.
[38] V. Piantadosi, S. Scalabrino, and R. Oliveto, “Fixing of security vulnerabilities in open source projects: A case study of Apache HTTP Server and Apache Tomcat,” in 2019 12th IEEE Conference on Software Testing, Validation and Verification (ICST), 2019, pp. 68–78.
[39] L. Dabbish, C. Stuart, J. Tsay, and J. Herbsleb, “Social coding in GitHub: Transparency and collaboration in an open software repository,” in Proceedings of the ACM 2012 Conference on Computer Supported Cooperative Work, ser. CSCW ’12, Seattle, Washington, USA: Association for Computing Machinery, 2012, pp. 1277–1286.
[40] B. Vasilescu, K. Blincoe, Q. Xuan, et al., “The sky is not the limit: Multitasking across GitHub projects,” in Proceedings of the 38th International Conference on Software Engineering, ser. ICSE ’16, Austin, Texas: Association for Computing Machinery, 2016, pp. 994–1005.
[41] K. Constantino, M. Souza, S. Zhou, E. Figueiredo, and C. Kästner, “Perceptions of open-source software developers on collaborations: An interview and survey study,” Journal of Software: Evolution and Process, e2393, 2021.
[42] L. Moldon, M. Strohmaier, and J. Wachs, “How gamification affects software developers: Cautionary evidence from a natural experiment on GitHub,” in 2021 IEEE/ACM 43rd International Conference on Software Engineering (ICSE), 2021, pp. 549–561.
[43] C. Overney, J. Meinicke, C. Kästner, and B. Vasilescu, “How to not get rich: An empirical study of donations in open source,” in Proceedings of the ACM/IEEE 42nd International Conference on Software Engineering, 2020, pp. 1209–1221.
[44] G. Gousios, M. Pinzger, and A. v. Deursen, “An exploratory study of the pull-based software development model,” in Proceedings of the 36th International Conference on Software Engineering, ser. ICSE 2014, Hyderabad, India: Association for Computing Machinery, 2014, pp. 345–355.
[45] J. Tsay, L. Dabbish, and J. Herbsleb, “Influence of social and technical factors for evaluating contribution in GitHub,” in Proceedings of the 36th International Conference on Software Engineering, ser. ICSE 2014, Hyderabad, India: Association for Computing Machinery, 2014, pp. 356–366.
[46] D. Ford, M. Behroozi, A. Serebrenik, and C. Parnin, “Beyond the code itself: How programmers really look at pull requests,” in Proceedings of the 41st International Conference on Software Engineering: Software Engineering in Society, ser. ICSE-SEIS ’19, Montreal, Quebec, Canada: IEEE Press, 2019, pp. 51–60.
[47] W. Li, N. Meng, L. Li, and H. Cai, “Understanding language selection in multi-language software projects on GitHub,” in 2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion), 2021, pp. 256–257.
[48] H. Hata, R. G. Kula, T. Ishio, and C. Treude, “Research artifact: The potential of meta-maintenance on GitHub,” in 2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion), 2021, pp. 256–257.