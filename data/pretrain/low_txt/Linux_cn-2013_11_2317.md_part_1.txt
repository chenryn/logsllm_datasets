---

**作者**: 未提供  
**类别**: 技术  
**评论数据**: 无  
**统计**: 
  - 评论数: 0
  - 收藏次数: 0
  - 点赞数: 4
  - 分享次数: 0
  - 阅读量: 14,457  
**日期**: 2013-11-30 19:48:00  
**编辑推荐**: 否  
**摘要**: 本文基于StackExchange上的一个问答，其中提问者询问了在计算机科学和数学课程中学到的算法在实际中的应用。Vijay D对该问题进行了详尽的回答，并受到了广泛关注。我们将此回答翻译后分享给大家。  
**原文链接**: 无  
**ID**: 2317  
**是否精选**: 是  
**大图**: /data/attachment/album/201311/30/182019yhnv4yipj17ljli9.gif  
**永久链接**: /article-2317-1.html  
**图片**: /data/attachment/album/201311/30/182019yhnv4yipj17ljli9.gif.thumb.jpg  
**相关文章**: 无  
**审阅者**: 无  
**选择器**: 无  
**总结**: 本文基于StackExchange上的一个问答，其中提问者询问了在计算机科学和数学课程中学到的算法在实际中的应用。Vijay D对该问题进行了详尽的回答，并受到了广泛关注。我们将此回答翻译后分享给大家。  
**标签**: 算法, 应用  
**缩略图**: 否  
**标题**: 那些算法在哪里？  
**标题图片**: 否  
**译者**: geekpi  
**更新时间**: 2013-11-30 19:48:00  

### 那些算法在哪里？

本文来源于StackExchange上的一篇[问题](http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/)回答。提问者问到，在计算机科学和数学课程中学习到的那些算法到底在哪些地方被实际应用？[Vijay D](http://cstheory.stackexchange.com/users/4155/vijay-d)对此进行了详细的[回答](http://cstheory.stackexchange.com/questions/19759/core-algorithms-deployed/19773#19773)，并得到了提问者和众多读者的关注。我们将这篇回答翻译过来以飨读者。

![](/data/attachment/album/201311/30/182019yhnv4yipj17ljli9.gif)

[Vijay D](http://cstheory.stackexchange.com/users/4155/vijay-d)写道：

在我看来，系统背后的主要算法更容易在非算法课程中找到，这与应用数学中的成果比理论数学更容易出现在实际应用中是一个道理。在讲座中，很少有实际问题能够精确匹配到一个抽象问题。归根结底，我认为没有理由让流行的算法课程，如Strassen乘法、AKS素性测试或Moser-Tardos算法与底层实际问题（如实现视频数据库、优化编译器、操作系统、网络拥塞控制系统或其他系统）直接相关。这些课程的价值在于学习如何利用复杂的方法发现问题的本质并找到有效的解决方案。高级算法和简单算法的分析都不简单。因此，我不会忽略简单的随机算法或PageRank。

你可以选择任何一个大型软件，并在其内部找到它所采用的基础和高级算法。作为研究案例，我选择了Linux内核，并会示例一些Chromium中的例子。

#### Linux内核中的基本数据结构和算法

**Linux内核** ([源代码链接在GitHub](https://github.com/mirrors/linux-2.6)):

1. **链表**:
   - [单向链表](https://github.com/mirrors/linux-2.6/blob/master/lib/llist.c)
   - [双向链表](https://github.com/mirrors/linux-2.6/blob/master/include/linux/list.h)
   - [无锁链表](https://github.com/mirrors/linux-2.6/blob/master/include/linux/llist.h)

2. **B+树**:
   - [B+树实现](https://github.com/mirrors/linux-2.6/blob/39caa0916ef27cf1da5026eb708a2b8413156f75/lib/btree.c)
     > 一个相对简单的B+树实现。我将其作为一个学习练习来帮助理解B+树的工作原理。这也被证明是有用的。
     >
     > ... 
     >
     > 一个在教科书中并不常见的技巧。最小值在右侧而不是左侧。所有在一个节点中使用的槽都在左侧，所有未使用的槽包含空值(NUL)。大多数操作只简单地遍历所有槽并在第一个空值(NUL)处终止。

3. **优先级列表**:
   - [优先级列表](https://github.com/mirrors/linux-2.6/blob/master/include/linux/plist.h) 用于 [互斥量](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/include/linux/rtmutex.h)、[驱动程序](https://github.com/mirrors/linux-2.6/blob/f0d55cc1a65852e6647d4f5d707c1c9b5471ce3c/drivers/powercap/intel_rapl.c)等。

4. **红黑树**:
   - [红黑树](https://github.com/mirrors/linux-2.6/blob/master/include/linux/rbtree.h) 用于调度、虚拟内存管理、文件描述符跟踪和目录项管理等。

5. **区间树**:
   - [区间树](https://github.com/mirrors/linux-2.6/blob/master/include/linux/interval_tree.h)

6. **根树**:
   - [根树](https://github.com/mirrors/linux-2.6/blob/master/include/linux/radix-tree.h) 用于内存管理、NFS相关查询和网络功能。
     > 根树的一个通用用途是存储指向结构页的指针。

7. **优先级堆**:
   - [优先级堆](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/include/linux/prio_heap.h) 用于[cgroup](https://github.com/mirrors/linux-2.6/blob/42a2d923cc349583ebf6fdd52a7d35e1c2f7e6bd/include/linux/cgroup.h)。
     > 《简单的基于CLR的只插入的，含有指针的定长优先级堆》第七章

8. **哈希函数**:
   - [哈希函数](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/include/linux/hash.h)，参考了Knuth和一篇论文。
     > Knuth建议使用接近黄金比例的最大整数作为乘法哈希的机器字。Chuck Lever验证了该技术的有效性：
     >
     > [http://www.citi.umich.edu/techreports/reports/citi-tr-00-1.pdf](http://www.citi.umich.edu/techreports/reports/citi-tr-00-1.pdf)
     >
     > 这些素数的选择是位稀疏的，可以通过移位和加法操作实现，而不需要使用慢速的乘法器。

9. **自定义哈希函数**:
   - 有些代码，例如[这个驱动程序](https://github.com/mirrors/linux-2.6/blob/0b1e73ed225d8f7aeef96b74147215ca8b990dce/drivers/staging/lustre/lustre/lov/lov_pool.c)，实现了自己的哈希函数。
     > 使用了一种旋转哈希算法的哈希函数
     >
     > Knuth, D. 《计算机程序设计艺术, 卷 3: 排序与搜索》, 第6、7章. Addison Wesley, 1973

10. **哈希表**:
    - [哈希表](https://github.com/mirrors/linux-2.6/blob/master/include/linux/hashtable.h) 用于实现[inode](https://github.com/mirrors/linux-2.6/blob/42a2d923cc349583ebf6fdd52a7d35e1c2f7e6bd/fs/inode.c)、[文件系统完整性检查](https://github.com/mirrors/linux-2.6/blob/ff812d724254b95df76b7775d1359d856927a840/fs/btrfs/check-integrity.c)等。

11. **位数组**:
    - [位数组](https://github.com/mirrors/linux-2.6/blob/master/include/linux/bitmap.h) 用于处理标志位、中断等。在Knuth的书卷4中也有阐述。

12. **信号量和自旋锁**:
    - [信号量](https://github.com/mirrors/linux-2.6/blob/master/include/linux/semaphore.h) 和 [自旋锁](https://github.com/mirrors/linux-2.6/blob/master/include/linux/spinlock.h)

13. **二分查找**:
    - [二分查找](https://github.com/mirrors/linux-2.6/blob/master/lib/bsearch.c) 用于[中断处理](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/drivers/sh/intc/chip.c)、[寄存器缓存查询](https://github.com/mirrors/linux-2.6/blob/10d0c9705e80bbd3d587c5fad24599aabaca6688/drivers/base/regmap/regcache.c)等。

14. **B树的二分查找**:
    - [B树的二分查找](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/fs/befs/btree.c)

15. **深度优先搜索**:
    - [深度优先搜索](https://github.com/mirrors/linux-2.6/blob/a9238741987386bb549d61572973c7e62b2a4145/drivers/acpi/acpica/nswalk.c) 广泛用于[目录配置](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/fs/configfs/dir.c)。
      > 执行一个修改过的命名空间树的深度优先遍历，从指定的`start_handle`节点开始（及结束）。回调函数会在任何参数匹配的节点被发现时被调用。如果回调函数返回非零值，搜索将立即终止并将结果返回给调用者。

16. **广度优先搜索**:
    - [广度优先搜索](https://github.com/mirrors/linux-2.6/blob/4fbf888accb39af423f271111d44e8186f053723/kernel/locking/lockdep.c) 用于检测运行时锁定的正确性。

17. **归并排序**:
    - [链表中的归并排序](https://github.com/mirrors/linux-2.6/blob/master/lib/list_sort.c) 用于[垃圾收集](https://github.com/mirrors/linux-2.6/blob/42a2d923cc349583ebf6fdd52a7d35e1c2f7e6bd/fs/ubifs/gc.c)、[文件系统管理](https://github.com/mirrors/linux-2.6/blob/ff812d724254b95df76b7775d1359d856927a840/fs/btrfs/raid56.c)等。

18. **冒泡排序**:
    - [冒泡排序](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/drivers/media/common/saa7146/saa7146_hlp.c) 在一个驱动库中有一个令人惊讶的实现。

19. **Knuth-Morris-Pratt 字符串匹配**:
    - [Knuth-Morris-Pratt 字符串匹配](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/lib/ts_kmp.c)
      > 根据Knuth、Morris和Pratt[1]实现了一个线性时间的字符串匹配算法。他们的算法避免了转换函数DELTA的显式计算。对于长度为n的文本，其匹配时间为O(n)，对于长度为m的模式(pattern)，仅使用一个辅助函数PI[1 . .m]，预先计算模式的时间为O(m)。数组PI允许转换函数DELTA被实时有效地计算。粗略地说，对于任何状态"q"= 0,1,…、m和在SIGMA中的任何字符"a",PI["q"]的值包含的信息是独立的"a"并需要计算DELTA("q","a") [2]。既然PI只有m个记录，而DELTA有O(m |SIGMA|)个记录，在预处理时间计算PI而不是DELTA的时候，我们可以节省一个因数|SIGMA|
      >
      > [1] Cormen, Leiserson, Rivest, Stein，《算法导论》，第二版，MIT出版社
      >
      > [2] 见有限自动机原理

20. **Boyer-Moore 模式匹配**:
    - [Boyer-Moore 模式匹配](https://github.com/mirrors/linux-2.6/blob/b3a3a9c441e2c8f6b6760de9331023a7906a4ac6/lib/ts_bm.c) 是在寻找替代品时的参考和建议。
      > 实现了Boyer-Moore字符串匹配算法:
      >
      > [1] 《一个快速的字符串搜索算法》，R.S. Boyer and Moore. 计算机通信协会，20(10), 1977, pp. 762-772.
      >
      > [2] 《准确的字符串匹配算法手册》，Thierry Lecroq, 2004 [http://www-igm.univ-mlv.fr/~lecroq/string/string.pdf](http://www-igm.univ-mlv.fr/%7Elecroq/string/string.pdf)

通过以上示例可以看出，许多基础和高级算法在Linux内核中都有广泛应用。这些算法不仅提高了系统的性能，还确保了其可靠性和可维护性。