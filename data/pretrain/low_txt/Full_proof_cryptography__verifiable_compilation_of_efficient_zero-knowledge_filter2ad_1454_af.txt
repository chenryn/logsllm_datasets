### Introduction to Different Abstract Input Languages

Various abstract input languages have been proposed, such as those in [4, 7, 37, 50]. However, none of these tools support formal verification. 

### Formal Verification in ZK-PoK

Several studies have explored the application of formal verification to Zero-Knowledge Proofs of Knowledge (ZK-PoK). Barthe et al. [11] utilized CertiCrypt to prove the soundness, completeness, and zero-knowledge properties of Σ-protocols and their simple And/Or compositions. Although these results were manually constructed and needed extension for a broader range of proof goals and arbitrary Boolean compositions, they laid the foundation for the formal verification infrastructure of ZKCrypt. Backes et al. [3] introduced a method to check the proper use of zero-knowledge proofs and applied it to the DAA protocol.

### Conclusions

ZKCrypt is an experimental high-assurance zero-knowledge compiler that leverages state-of-the-art approaches in verified and verifying compilation within the realm of cryptography. It achieves an unprecedented level of confidence among cryptographic compilers. The verification infrastructure of ZKCrypt is built on the CertiCrypt platform, relying on a set of carefully isolated concepts, including a new unified approach to special soundness and a novel formal treatment of goal resolution as a compilation step. We have demonstrated that both the compiler and the verification component can handle a wide range of applications using ZK-PoKs.

There are numerous opportunities for future research in cryptographic compilation and verification, particularly for ZK-PoKs. One future task is to verify the final stage of the compiler chain, code generation, to cover the entire compilation process. Another interesting question is how far verified compilation can be extended beyond ZK-PoKs.

### References

[1] ABC4TRUST EU PROJECT. Official Website. https://abc4trust.eu/, 2011.

[2] ALMEIDA, J. B., BANGERTER, E., BARBOSA, M., KRENN, S., SADEGHI, A.-R., AND SCHNEIDER, T. A Certifying Compiler for Zero-Knowledge Proofs of Knowledge Based on Σ-Protocols. In ESORICS '10 (2010), vol. 6345 of LNCS, Springer.

[3] BACKES, M., HRITCU, C., AND MAFFEI, M. Type-Checking Zero-Knowledge. In ACM CCS 08 (2008), ACM, pp. 357–370.

[4] BAIN, A., MITCHELL, J. C., SHARMA, R., STEFAN, D., AND ZIMMERMAN, J. A Domain-Specific Language for Computing on Encrypted Data (Invited Talk). In FSTTCS 2011 (2011), vol. 13 of LIPIcs, Schloss Dagstuhl, pp. 6–24.

[5] BANGERTER, E., BARZAN, S., KRENN, S., SADEGHI, A.-R., SCHNEIDER, T., AND TSAY, J.-K. Bringing Zero-Knowledge Proofs of Knowledge to Practice. In SPW 09 (2009).

[6] BANGERTER, E., BRINER, T., HENEKA, W., KRENN, S., SADEGHI, A.-R., AND SCHNEIDER, T. Automatic Generation of Σ-Protocols. In EuroPKI 09 (2009).

[7] BANGERTER, E., KRENN, S., SEIFRIZ, M., AND ULTES-NITSCHE, U. cPLC - A Cryptographic Programming Language and Compiler. In ISSA 2011 (2011), IEEE.

[8] BARTHE, G., GRÉGOIRE, B., AND BÉGUELIN, S. Formal Certification of Code-Based Cryptographic Proofs. In POPL 09 (2009), pp. 90–101.

[9] BARTHE, G., GRÉGOIRE, B., HERAUD, S., OLMEDO, F., AND ZANELLA BÉGUELIN, S. Verified Indifferentiable Hashing into Elliptic Curves. In POST 2012 (Heidelberg, 2012), LNCS, Springer.

[10] BARTHE, G., GRÉGOIRE, B., HERAUD, S., AND ZANELLA BÉGUELIN, S. Computer-Aided Security Proofs for the Working Cryptographer. In CRYPTO 2011 (Heidelberg, 2011), vol. 6841 of LNCS, Springer, pp. 71–90.

[11] BARTHE, G., HEDIN, D., ZANELLA BÉGUELIN, S., GRÉGOIRE, B., AND HERAUD, S. A Machine-Checked Formalization of Σ-Protocols. In CSF 2010 (2010), IEEE.

[12] BARTHE, G., KÖPF, B., OLMEDO, F., AND ZANELLA BÉGUELIN, S. Probabilistic Reasoning for Differential Privacy. In POPL 2012 (2012), ACM.

[13] BORISOV, N., GOLDBERG, I., AND BREWER, E. Off-the-Record Communication, or, Why Not to Use PGP. In WPES 2004 (2004), ACM, pp. 77–84.

[14] BRANDS, S. An Efficient Off-line Electronic Cash System Based on the Representation Problem. Tech. Rep. CS-R9323, CWI, 1993.

[15] BRICKELL, E. F., CAMENISCH, J., AND CHEN, L. Direct Anonymous Attestation. In ACM CCS 04 (2004), ACM.

[16] BRINER, T. Compiler for Zero-Knowledge Proof-of-Knowledge Protocols. Master’s thesis, ETH Zurich, 2004.

[17] CAMENISCH, J., AND HERREWEGHEN, E. V. Design and Implementation of the idemix Anonymous Credential System. In ACM CCS 02 (2002), ACM Press, pp. 21–30.

[18] CAMENISCH, J., AND LYSYANSKAYA, A. A Signature Scheme with Efficient Protocols. In SCN 02 (2002), vol. 2576 of LNCS, Springer, pp. 268–289.

[19] CAMENISCH, J., AND SHOUP, V. Practical Verifiable Encryption and Decryption of Discrete Logarithms. In CRYPTO 03 (2003), vol. 2729 of LNCS, Springer.

[20] CAMENISCH, J., AND STADLER, M. Efficient Group Signature Schemes for Large Groups. In CRYPTO 97 (1997), vol. 1294 of LNCS, Springer, pp. 410–424.

[21] CAMENISCH et al., J. Specification of the Identity Mixer Cryptographic Library (Version 2.3.0). Research Report RZ 3730 (#99740), IBM Research, 2010.

[22] CHAUM, D. Security without Identification: Transaction Systems to Make Big Brother Obsolete. Commun. ACM 28, 10 (1985), 1030–1044.

[23] CHAUM, D., AND EVERTSE, J.-H. A Secure and Privacy-Protecting Protocol for Transmitting Personal Information Between Organizations. In CRYPTO (1986), vol. 263 of LNCS, Springer, pp. 118–167.

[24] CRAMER, R. Modular Design of Secure yet Practical Cryptographic Protocols. PhD thesis, CWI and University of Amsterdam, 1997.

[25] CRAMER, R., DAMGÅRD, I., AND SCHOENMAKERS, B. Proofs of Partial Knowledge and Simplified Design of Witness Hiding Protocols. In CRYPTO 94 (1994), vol. 839 of LNCS, Springer, pp. 174–187.

[26] DAMGÅRD, I. On Σ-Protocols, 2004. Lecture on Cryptologic Protocol Theory; Faculty of Science, University of Aarhus.

[27] DAMGÅRD, I., AND FUJISAKI, E. A Statistically-Hiding Integer Commitment Scheme Based on Groups with Hidden Order. In ASIACRYPT 02 (2002), vol. 2501 of LNCS, Springer, pp. 77–85.

[28] DAMGÅRD, I., GEISLER, M., KRØIGAARD, M., AND NIELSEN, J. B. Asynchronous Multiparty Computation: Theory and Implementation. In PKC 09 (2009), vol. 5443 of LNCS, Springer, pp. 160–179.

[29] FIAT, A., AND SHAMIR, A. How to Prove Yourself: Practical Solutions to Identification and Signature Problems. In CRYPTO 86 (1987), vol. 263 of LNCS, Springer.

[30] FUJISAKI, E., AND OKAMOTO, T. Statistical Zero Knowledge Protocols to Prove Modular Polynomial Relations. In CRYPTO 97 (1997), vol. 1294 of LNCS, Springer.

[31] GOLDBERG, I., USTAOGLU, B., GUNDY, M. V., AND CHEN, H. Multi-Party Off-the-Record Messaging. In ACM CCS 09 (2009), ACM, pp. 358–368.

[32] GOLDREICH, O. Zero-Knowledge Twenty Years After Its Invention. Tech. Rep. TR02-063, Electronic Colloquium on Computational Complexity, 2002.

[33] GOLDREICH, O., MICALI, S., AND WIGDERSON, A. Proofs That Yield Nothing but Their Validity or All Languages in NP Have Zero-Knowledge Proof Systems. Journal of the ACM 38, 1 (1991), 691–729.

[34] GOLDWASSER, S., MICALI, S., AND RACKOFF, C. The Knowledge Complexity of Interactive Proof-Systems. In STOC 85 (1985), ACM, pp. 291–304.

[35] GONTHIER, G., MAHBOUBI, A., AND TASSI, E. A Small Scale Reflection Extension for the Coq System. Rapport de recherche RR-6455, INRIA, 2008.

[36] GUILLOU, L., AND QUISQUATER, J.-J. A "Paradoxical" Identity-Based Signature Scheme Resulting from Zero-Knowledge. In CRYPTO 88 (1990), vol. 403 of LNCS, Springer, pp. 216–231.

[37] KIYOMOTO, S., OTA, H., AND TANAKA, T. A Security Protocol Compiler Generating C Source Codes. In ISA 08 (2008), IEEE, pp. 20–25.

[38] LAGRANGE, J. L. Œuvres, 1770.

[39] LEROY, X. Formal Certification of a Compiler Back-End or: Programming a Compiler with a Proof Assistant. In POPL 06 (2006), ACM Press, pp. 42–54.

[40] LIPMAA, H. On Diophantine Complexity and Statistical Zero-Knowledge Arguments. In ASIACRYPT 03 (2003), vol. 2894 of LNCS, Springer, pp. 398–415.

[41] MACKENZIE, P., OPREA, A., REITER, M. Automatic Generation of Two-Party Computations. In ACM CCS 03 (2003), ACM, pp. 210–219.

[42] MALKHI, D., NISAN, N., PINKAS, B., AND SELLA, Y. Fairplay – Secure Two-Party Computation System. In USENIX Security Symposium (2004), USENIX Association.

[43] MEIKLEJOHN, S., ERWAY, C., KÜPÇÜ, A., HINKLE, T., AND LYSYANSKAYA, A. ZKPDL: A Language-Based System for Efficient Zero-Knowledge Proofs and Electronic Cash. In USENIX Security Symposium (2010), USENIX Association, pp. 193–206.

[44] MICROSOFT. U-Prove. http://www.microsoft.com/u-prove, 2011.

[45] NECULA, G. C., AND LEE, P. The Design and Implementation of a Certifying Compiler. In PLDI (New York, NY, USA, 1998), vol. 33, PUB-ACM, pp. 333–344.

[46] NIPKOW, T., AND PAULSON, L. Isabelle Web Site. http://isabelle.in.tun.de, 2010.

[47] RIAL, A., AND DANEZIS, G. Privacy-Preserving Smart Metering, 2011.

[48] RIVEST, R., SHAMIR, A., AND TAUMAN, Y. How to Leak a Secret - Theory and Applications of Ring Signatures. In ASIACRYPT 01 (2001), vol. 2248 of LNCS, Springer.

[49] SCHNORR, C. Efficient Signature Generation by Smart Cards. Journal of Cryptology 4, 3 (1991), 161–174.

[50] SCHRÖPFER, A., KERSCHBAUM, F., BISWAS, D., GEISSINGER, S., AND SCHÜTZ, C. L1 - Faster Development and Benchmarking of Cryptographic Protocols. In SPEED-CC 09 (2009).

[51] WANG, B., AND SONG, Z. A Non-Interactive Deniable Authentication Scheme Based on Designated Verifier Proofs. Information Sciences 179, 6 (2009), 858–865.

[52] ZUCK, L. D., PNUELI, A., GOLDBERG, B., BARRETT, C. W., FANG, Y., AND HU, Y. Translation and Run-Time Validation of Loop Transformations. Formal Methods in System Design 27, 3 (2005), 335–360.

### Appendix

#### A. Overview of CertiCrypt

CertiCrypt [8, 10] is an automated toolset for proving the security of cryptographic constructions in the computational model. It builds upon state-of-the-art verification technologies to support code-based proofs, where security is cast in terms of equivalence of probabilistic programs. The core of CertiCrypt is a rich set of verification techniques based on a Relational Hoare Logic for probabilistic programs [8]. A recent extension [9] supports reasoning about a broad range of quantitative properties, including statistical distance, which is crucial in our definition of zero-knowledge.

The CertiCrypt toolset consists of two main components. Both allow proving that the distributions generated by probabilistic experiments are identical or statistically close, but differ in their degree of automation, flexibility, and formal guarantees. The first component, called CertiCrypt, excels in flexibility and is fully formalized in the Coq proof assistant; its verification methods are implemented in Coq and proved correct with respect to program semantics. The second component, EasyCrypt, delivers a higher degree of automation by relying on SMT solvers and automated theorem provers to discharge verification conditions arising in proofs. EasyCrypt generates proof certificates that can be mechanically checked in Coq, thus practically reducing the trusted computing base to that of the first component; however, it lacks generality as it only exposes a limited set of proof methods. ZKCrypt takes advantage of both components: it uses the latter to check the correctness of goal resolution and the former for verifying the compiler for reference implementations and the equivalence of reference and optimized implementations. Below, we outline some of the essential features of both components.

**Language:**
Programs are written in a procedural, probabilistic imperative language that includes deterministic and random assignments, conditional statements, and loops. This base language suffices to conveniently express a wide class of cryptographic experiments and security properties. To achieve greater flexibility, the language of deterministic and random expressions is user-extensible. A program \( c \) in the language of CertiCrypt denotes a function \( \llbracket c \rrbracket \) from an initial memory \( m \) (a mapping from program variables to values) to a distribution over final memories. We denote by \( \Pr[c, S : m] \) the probability of event \( S \) with respect to the distribution \( \llbracket c \rrbracket(m) \). For a more detailed description of the language and its semantics, see Barthe et al. [12].

**Reasoning Principles:**
Proving the (approximate) equivalence of the distributions generated by two probabilistic programs in CertiCrypt amounts to deriving valid judgments in an approximate Relational Hoare Logic (apRHL). We restrict our attention in this paper to a fragment of apRHL that captures both perfect and statistical indistinguishability of distributions generated by programs. We consider judgments of the form \( c_1 \sim_\epsilon c_2 : \Psi \Rightarrow \Phi \) where \( c_1 \) and \( c_2 \) are probabilistic programs, \( \Psi, \Phi \) are binary relations over program memories, and \( \epsilon \in [0, 1] \). Taking \( \Phi \) as the equality relation on a subset of observable program variables \( X \), one recovers the usual definition of statistical indistinguishability. In particular, given an event \( A \), represented as a predicate over memories, if \( A \) only depends on variables in \( X \), one has:
\[ m_1 \Psi m_2 \implies | \Pr[c_1, m_1 : A] - \Pr[c_2, m_2 : A] | \leq \epsilon. \]
We let \( c_1 \approx_{\Psi, X}^\epsilon c_2 \) denote the validity of \( c_1 \sim_\epsilon c_2 : \Psi \Rightarrow \Phi \) when \( \Phi \) is the equality relation on variables in \( X \); we omit \( \Psi \) when it is the total relation or can be inferred from the context.

#### B. Input File of the Use Case

Figure 6 shows the input (a .zk-file) for our running example. It is obtained by instantiating the template \( CL(m_1, m_2) \) with the mapping underlying the CL-signature scheme [18] (cf. Equation 1), as is already done in the identity mixer specification. The rest of the file describes the algebraic setting and required security goals.

The first two blocks, **Declarations** and **Inputs**, declare all variables used in the protocol and the public and private inputs of the parties. Typically, variables will be declared as private if and only if knowledge of these values has to be proven. The **Properties** block specifies the security properties and the overall structure of the protocol. The **KnowledgeError** of the generated protocol shall be at most \( 2^{-80} \), and the statistical distance of simulated from real protocol runs must be at most \( 2^{-SZKParameter} \). Inside ZKCrypt, the **KnowledgeError** parameter is translated onto a concrete challenge length, and **SZKParameter** gives the security parameter controlling the tightness of the HVZK property. The proof goal only consists of a single predicate. It shall be proven using a SigmaGSP-protocol; the maximum **ChallengeLength** that may safely be used for the homomorphism is specified (this cannot be computed from phi as it would require to compute the order of \( \mathbb{Z}_{\text{mod}}^*(n) \)). For concrete values of \( n \), i.e., strong RSA moduli, this parameter implicitly gives the concrete value of \( d \) (the product of all primes smaller than \( c+ \) dividing ord \( H \)) for which the proof of knowledge property holds.

```plaintext
:= n, z, R_1, A, S, R_2, b;
Declarations {
    Int(2048) n;
    Zmod*(n) z, R_1, R_2, A, S;
    Int(1000) m_1, m_2, e, v, b;
}
Inputs {
    Public := n, z, R_1, A, S, R_2, b;
    ProverPrivate := e, m_2, v;
}
Properties {
    KnowledgeError := 80;
    SZKParameter := 80;
    ProtocolComposition := P_0;
}
SigmaGSP P_0 {
    Homomorphism(phi: Z^3 -> Zmod*(n): (e, m_2, v) |-> (A^e * S^v * R_2^m_2));
    ChallengeLength := 80;
    Relation((z * R_1^(-m_1)) = phi(e, m_2, v) And m_2 >= b);
}
```

**Figure 6: .zk-file specifying Idemix proof goal G.**