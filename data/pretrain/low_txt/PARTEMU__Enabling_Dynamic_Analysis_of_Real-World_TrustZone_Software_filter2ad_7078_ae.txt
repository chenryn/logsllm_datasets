### Shared Memory Design and Security Implications

Shared memory is inherently supported by design in some Trusted Execution Environments (TEEs), whereas QSEE does not natively support it. This issue did not apply to OP-TEE or TEEGRIS, as they map shared memory buffers to random virtual addresses. Additionally, the GlobalPlatform TEE Client API, which both OP-TEE and TEEGRIS implement, does not provide direct shared memory pointers between the Client Application (CA) and the Trusted Application (TA).

### Unvalidated Types and Their Consequences

The GlobalPlatform TEE Client API [20] requires a specific check that was missing in some TAs. This API allows CAs to specify the type and content of four arguments for a command to a TA. The types can be broadly categorized as either values or buffers. We found that some TAs implicitly assumed the types of arguments sent by the CAs, leading to misinterpretation of buffer addresses as values or, more critically, dereferencing of values. This results in vulnerabilities similar to those caused by unvalidated pointers from the normal world, potentially compromising both confidentiality and integrity.

### Reproducibility and False Positives

A Trust Application (TA) crash is classified as a false positive if it cannot be reproduced on a real device. The primary cause of false positives is insufficient fidelity in the emulation of hardware or software components that the TA interacts with. Since the only software component the TA interacts with is the TrustZone OS (TZOS), and we reuse the original TZOS binary, false positives are unlikely to arise from software. Therefore, the most likely cause is insufficient hardware emulation. However, most TAs do not interact extensively with hardware and do not crash even if such hardware is unavailable, making PARTEMU's results highly reproducible.

Our results confirm this: out of 48 unique crashes, we had devices for 24, and all 24 were reproducible. Two TAs accessed specialized hardware that we did not emulate. Of the remaining crashes, only three other TAs accessed specialized hardware. If we conservatively assume these three crashes are false positives, PARTEMU has a true positive rate of 45/48 (93%), which is sufficiently high to be useful.

### Use Case: Fuzz Testing TZOS

Our second target for fuzz testing was the SMC API exported by the TZOS. We performed SMC API tests on QSEE v4.0, one of our four target TZOSes. Our aim was not to compare the security of different TZOSes but to demonstrate the utility of PARTEMU for TZOS testing. We chose QSEE due to its relatively simple and synchronous SMC calling convention [37]. Generally, the normal world OS calls SMCs to request services from the secure monitor, TZOS, or TAs. This API is similar to the system call API, where the caller specifies an SMC number and several arguments in registers.

The TZOS should protect itself from a compromised normal world issuing arbitrary SMCs. Consistent with this threat model, we used normal world driver programs to fuzz test the QSEE SMC API. The driver program gets fuzz testing input from AFL, transforms these into SMC arguments, and sends the SMC. Crashes are detected if QEMU raises an abort. An additional challenge is that argument types can be either values or buffers, which we determine using part of the AFL input.

In total, AFL identified 124 distinct SMCs and found crashes in 3 SMCs. These crashes only affected TZOS availability and had limited security impact. However, interestingly, all these crashes tested QSEE code paths that would not normally be exercised on a real device but could be triggered by an attacker who compromises the normal world. We discuss two cases below:

#### Normal-World Checks

One crash we found in QSEE, which was independently fixed, was an invalid pointer dereference triggered when the normal world requested the TZOS to load a TA that was already loaded. This QSEE path was "shielded" by normal-world checks: the Linux kernel TEE driver [37] checked with QSEE if the TA was already loaded before sending a request. If it was, the TEE driver did not send a request to load the TA. An attacker who compromises the Linux kernel itself, however, could bypass this check and trigger this code path.

#### Assumptions of Normal-World Call Sequence

Another crash in QSEE was an uninitialized pointer dereference. This pointer was initialized by another SMC call that the Linux kernel on the device normally issued during boot. A compromised normal world would skip this SMC, triggering the vulnerability. On a real device, such a condition would not occur because the initialization happens during boot.

### Related Work

Our work is closely related to approaches that attempt to run real-world software in an emulator for dynamic analysis. Avatar [59], PROSPECT [28], Charm [49], and Surrogates [31] enable dynamic analysis by running the target in a virtualized or emulated environment and forwarding accesses to real hardware. While Avatar, PROSPECT, and Surrogates target embedded device firmware, Charm targets Linux kernel device drivers on mobile systems like Android. These approaches work when the hardware exposes interfaces like JTAG or USB. However, TrustZone hardware does not expose such interfaces, and running a software proxy for hardware access in the TrustZone is not possible due to code signing.

Other approaches, such as Costin et al. [15] and FIRMA-DYNE [11], attempt to emulate hardware to test embedded firmware. Hardware emulation is feasible in these cases because the hardware is well-documented or standard. We study how to emulate the non-standard and undocumented hardware required to run real-world TrustZone OSes. We show that it is possible to skip emulation of extremely complicated hardware by emulating other software components instead.

Firmware re-hosting [23] involves migrating firmware from its original hardware environment to a virtual environment. Pretender [23] attempts automated firmware re-hosting by generating hardware models using machine learning on runtime traces. P2IM [19] uses manually-defined hardware register patterns and generates hardware models automatically at runtime. While these systems were tested on simpler microcontrollers, they show potential for automating much of our work.

Concurrently with our work, Komaromy developed TEEMU [30], an emulator to run TAs for <t-base, an older version of the Kinibi TZOS. Unlike our work, TEEMU does not re-host the <t-base TZOS itself but emulates it by manually re-implementing specific system calls. This limits TEEMU to testing <t-base TAs that use only those system calls and does not allow testing the <t-base TZOS itself. Reproducibility depends on the fidelity of the re-implementation of the TZOS system calls. Similar limitations apply to the Open-TEE [33, 35] project, which is a virtual TZOS implementing the GlobalPlatform TEE API [21]. In contrast, PARTEMU supports full-system emulation by re-hosting unmodified TA and TZOS binaries, allowing holistic testing of TrustZone and making it significantly more likely that any issues found are reproducible on a real device.

PARTEMU enables using advances in dynamic analysis on real-world TrustZone software. So far, the main technique to analyze real-world TrustZone software has been static binary reverse-engineering of TAs and the TZOS [7, 8]. Dynamic analysis for TrustZone software has been limited to blind fuzzing [6] and emulation of particular parts of TrustZone [30]. PARTEMU enables dynamic analysis techniques such as feedback-driven fuzz testing [9, 12, 40, 61], symbolic and concolic execution [10, 13, 48], taint analysis [14, 17, 58], and debugging for real-world TrustZone software.

### Discussion and Future Work

#### Dealing with Stateful TAs

On a random sample of 10 TAs, AFL had basic-block coverage varying from 0.2% to 45.6% with a median of 17.7%. A major limiting factor for coverage was TA state: several TAs had internal finite state machines and required a sequence of multiple inputs to drive them to interesting states (e.g., connected, authorized, processing). Our driver currently sends a single message to a newly forked TA instance each time to avoid stability issues (Section 8.1). Therefore, we cannot get past state checks, which require a sequence of inputs. We plan to handle TA state in future work. Even with limited coverage, PARTEMU was able to find several non-trivial real-world vulnerabilities.

#### Hardware Roots of Trust

PARTEMU does not emulate hardware roots of trust, such as the factory-installed per-device private key signed by the Samsung CA [42] and used for remote attestation. Code paths in TAs that depend on remote attestation succeeding may not work. For example, Samsung Pay uses remote attestation for credit card enrollment; we cannot successfully enroll a credit card using a Samsung Pay TA [44] running on PARTEMU because we do not have access to the attestation key present on a real device. While such TAs that depend on a valid root of trust require other techniques to test, they are few in number, and PARTEMU can test the vast majority of TAs.

#### Performance

Since we ran PARTEMU on an x86 machine, we could not take advantage of ARMv8 hardware virtualization [16]. AFL ran at around 10-25 executions per second for QSEE, OP-TEE, and TEEGRIS, while our performance optimizations for Kinibi (Section 8.3) enabled 125 executions per second. Even this was sufficient to find several non-trivial vulnerabilities, but we believe PARTEMU would be even more useful if it could run faster. To this end, we plan to explore running PARTEMU directly on ARMv8 hardware.

### Conclusion

In this work, we addressed the lack of dynamic analysis for real-world TrustZone software by building an emulator that runs four widespread, real-world TZOSes: QSEE, Kinibi, TEEGRIS, and OP-TEE. We studied the software and hardware emulation effort required to run these TZOSes and found that emulating the required hardware and software dependencies was feasible. We implemented our emulation on PARTEMU, enabling dynamic analysis of real-world TZOSes. We demonstrated PARTEMU's utility by finding 48 previously-unknown vulnerabilities across 194 TAs from 12 different Android smartphone vendors and an IoT vendor. We identified patterns of developer mistakes unique to TrustZone development, highlighting the need for TrustZone-specific developer education. This work shows that dynamic analysis of real-world TrustZone software using emulation is both feasible and beneficial.

### Disclosure

We have notified each vendor of any relevant findings and are working with their security teams to address the issues.

### Acknowledgements

We thank Stephen McLaughlin for automating parts of our analysis and interpreting results. We also thank our anonymous reviewers for their suggestions, which significantly improved the presentation and scope of this work. We thank Peng Ning, Kunal Patel, Laurent Simon, Luke Deshotels, and Stephen McLaughlin for helpful discussions and suggestions during various stages of this work.

### References

[1] Apple. iOS Security. https://www.apple.com/business/site/docs/iOS_Security_Guide.pdf.
[2] ARM. ARM TrustZone. http://www.arm.com/products/processors/technologies/trustzone/index.php.
[3] JEDEC. Embedded Multimedia Card eMMC. http://www.jedec.org/standards-documents/results/JESD84-A.
[4] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and W. Shen. Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, 2014.
[5] F. Bellard. QEMU, a Fast and Portable Dynamic Translator. In Proceedings of the USENIX Annual Technical Conference, 2005.
[6] G. Beniamini. FuzzZone. https://github.com/laginimaineb/fuzz_zone/tree/master/FuzzZone.
[7] G. Beniamini. TrustZone Kernel Privilege Escalation. http://bits-please.blogspot.com/2016/06/trustzone-kernel-privilege-escalation.html.
[8] D. Berard. Kinibi TEE: Trusted Application exploitation. https://www.synacktiv.com/posts/exploit/kinibi-tee-trusted-application-exploitation.html.
[9] M. Böhme, V.-T. Pham, and A. Roychoudhury. Coverage-based greybox fuzzing as Markov chain. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, 2016.
[10] C. Cadar, D. Dunbar, and D. Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, 2008.
[11] D. D. Chen, M. Woo, D. Brumley, and M. Egele. Towards automated dynamic analysis for Linux-based embedded firmware. In NDSS, 2016.
[12] P. Chen and H. Chen. Angora: Efficient Fuzzing by Principled Search. In 2018 IEEE Symposium on Security and Privacy (SP), 2018.
[13] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: A platform for in-vivo multi-path analysis of software systems. In Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, 2011.
[14] J. Clause, W. Li, and A. Orso. Dytan: A generic dynamic taint analysis framework. In Proceedings of the 2007 International Symposium on Software Testing and Analysis, 2007.
[15] A. Costin, A. Zarras, and A. Francillon. Automated dynamic firmware analysis at scale: A case study on embedded web interfaces. In Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security, 2016.
[16] C. Dall and J. Nieh. KVM/ARM: The design and implementation of the Linux ARM hypervisor. In Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems, 2014.
[17] B. Dolan-Gavitt, J. Hodosh, P. Hulin, T. Leek, and R. Whelan. Repeatable Reverse Engineering with PANDA. In Proceedings of the 5th Program Protection and Reverse Engineering Workshop, PPREW, 2015.
[18] J.-E. Ekberg. Trusted Execution Environments (and Android). https://usmile.at/sites/default/files/androidsecuritysymposium/presentations2015/Ekberg_AndroidAndTrustedExecutionEnvironments.pdf.
[19] B. Feng, A. Mera, and L. Lu. P2IM: Scalable and hardware-independent firmware testing via automatic peripheral interface modeling. In Proceedings of the 29th USENIX Security Symposium, 2020.
[20] GlobalPlatform. TEE Client API Specification v1.0. https://globalplatform.org/specs-library/tee-client-api-specification/.
[21] GlobalPlatform. TEE Internal Core API Specification v1.2.1. https://globalplatform.org/specs-library/tee-internal-core-api-specification/.
[22] GlobalPlatform. GP TEE Certificate: TEEgris 2.5 on MT6737T. https://globalplatform.org/wp-content/uploads/2018/03/GP-TEE-2017_01_Certificate_MediaTek_GP170002_20171027_Gil.pdf.
[23] E. Gustafson, M. Muench, C. Spensky, N. Redini, A. Machiry, Y. Fratantonio, D. Balzarotti, A. Francillon, Y. R. Choe, C. Kruegel, and G. Vigna. Toward the analysis of embedded firmware through automated rehosting. In 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2019), 2019.
[24] J. Hertz and T. Newsham. AFL/QEMU fuzzing with full-system emulation. https://github.com/nccgroup/TriforceAFL.
[25] IETF. The Open Trust Protocol (OTrP). https://www.ietf.org/archive/id/draft-pei-opentrustprotocol-06.txt.
[26] JEDEC. e.MMC v5.1A. https://www.jedec.org/standards-documents/technology-focus-areas/flash-memory-ssds-ufs-emmc/e-mmc.
[27] JEDEC. Universal Flash Storage (UFS) 3.0. https://www.jedec.org/standards-documents/focus/flash/universal-flash-storage-ufs.
[28] M. Kammerstetter, C. Platzer, and W. Kastner. PROSPECT: Peripheral Proxying Supported Embedded Code Testing. In 9th ACM Symposium on Information, Computer and Communications Security, ASIA CCS '14, Kyoto, Japan - June 03 - 06, 2014, 2014.
[38] Qualcomm. Qualcomm Security for Mobile Computing. https://www.qualcomm.com/solutions/mobile-computing/features/security.
[39] Qualcomm. Secure Boot and Image Authentication. https://www.qualcomm.com/media/documents/