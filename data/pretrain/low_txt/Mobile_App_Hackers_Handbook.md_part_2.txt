### Figures Overview

**Chapter 10:**
- **Figure 10.12:** Applying the Full Filesystem Access Hack Using SamWP8 Tools
- **Figure 10.13:** Browsing the Filesystem
- **Figure 10.14:** Home Screen with Spavlin’s MBN Applied
- **Figure 10.15:** Configuration of Checkboxes and Radio Buttons
- **Figure 10.16:** Browsing an App’s Install Directory in Explorer
- **Figure 10.17:** Opening a .NET Assembly from a Device’s Filesystem

**Chapter 11:**
- **Figure 11.1:** Viewing XAML Files in .NET Reflector
- **Figure 11.2:** Proxy Settings Disabled
- **Figure 11.3:** Proxy Settings Configured
- **Figure 11.4:** Burp Suite Captures Web Traffic from a Windows Phone Device
- **Figure 11.5:** Exporting Burp Suite CA Certificate
- **Figure 11.6:** Installing the Certificate onto the Device
- **Figure 11.7:** .NET Reflector Showing XAML Pages in a Windows Phone 8 Application
- **Figure 11.8:** .NET Reflector Showing an XAML Page’s OnNavigatedTo() Implementation
- **Figure 11.9:** The Native Toast Notification Launcher Sending a Toast Message
- **Figure 11.10:** The XAML Screen Launched After Tapping the Toast Notification
- **Figure 11.11:** Names Parsed Out from the XML Document
- **Figure 11.12:** Out-of-Memory Exception Reported by Visual Studio Due to a “Billion Laughs” Attack
- **Figure 11.13:** Result of External Entity Resolution of the “Secret File” in a Message Box
- **Figure 11.14:** SQLite Syntax Error
- **Figure 11.15:** EncryptAndSaveData() in .NET Reflector
- **Figure 11.16:** Reversed CIL Code in .NET Reflector and Reflexil
- **Figure 11.17:** Deleting an Instruction in Reflexil
- **Figure 11.18:** Modified CIL Code After Deleting Instructions
- **Figure 11.19:** New Disassembly for SaveAndEncryptData() After Patching the Method
- **Figure 11.20:** Editing an Existing Instruction in Reflexil
- **Figure 11.21:** Patching a Method in C#

**Chapter 12:**
- **Figure 12.1:** Accessing an __ApplicationSettings File on a Device’s Filesystem
- **Figure 12.2:** Browsing an App’s INetCookies Directory on a Device
- **Figure 12.3:** Original Image of the Linux Mascot, Tux the Penguin
- **Figure 12.4:** Recovered Image of Tux the Penguin

**Chapter 14:**
- **Figure 14.1:** The Developer Mode Menu
- **Figure 14.2:** Elcomsoft Cracking the BlackBerry Backup Encryption
- **Figure 14.3:** Sachesi Helps You Access BAR Files
- **Figure 14.4:** Splitting the Firmware Image Using Sachesi
- **Figure 14.5:** Extracting the Application Using Sachesi
- **Figure 14.6:** The Extracted Application
- **Figure 14.7:** Rename the Original BAR File
- **Figure 14.8:** Result of Extracting the BAR File
- **Figure 14.9:** Example MANIFEST.MF File
- **Figure 14.10:** BAR Root Directory
- **Figure 14.11:** Contents of the Native Directory
- **Figure 14.12:** The bar-descriptor.xml File
- **Figure 14.13:** The Assets Subdirectory
- **Figure 14.14:** Example QML File
- **Figure 14.15:** The MANIFEST.MF File for a WebWorks Application
- **Figure 14.16:** The Entry Point for a WebWorks Application
- **Figure 14.17:** The BARs Native Subdirectory
- **Figure 14.18:** The jnext Directory

**Chapter 15:**
- **Figure 15.1:** Container Separation in BlackBerry Balance
- **Figure 15.2:** An Example File Browser Application

**Chapter 16:**
- **Figure 16.1:** Disassembly of Vulnerable Function in IDA Pro

### Introduction

Mobile computing has revolutionized the way we work, interact, and socialize. Personal data is no longer confined to desktops in the sanctuary of our offices or homes. Instead, we carry personally identifiable information, financial data, personal and corporate emails, and much more in our pockets, wherever we go. Smartphones are becoming ubiquitous, with the average device hosting at least 40 applications, significantly expanding the attack surface.

Smartphones have not only become commonplace in consumer markets but also in the enterprise sector. Enterprise mobile applications extend the corporate environment beyond the workplace, introducing new security concerns and exposing organizations to various types of threats. Enterprises adopting "Bring Your Own Device" (BYOD) strategies must be particularly mindful of the array of applications that smartphones may run within the corporate network.

This book serves as a practical guide to reviewing the security of mobile applications on the most widely adopted mobile operating systems: Apple iOS, Google Android, BlackBerry, and Windows Mobile. It focuses on client-side security, examining mobile applications in the context of these devices rather than server-side applications, where security is more mature and better understood.

### Overview of This Book

The primary focus of this book is practical. While we provide some background theory to help you understand the fundamentals of mobile application vulnerabilities, our main objective is to document the techniques needed to identify, attack, and exploit these vulnerabilities. We include real-world examples derived from our extensive experience and publicly documented vulnerabilities.

In addition to describing mobile application security vulnerabilities and attack techniques, we detail defense-in-depth strategies and countermeasures that application developers can use to effectively secure their applications. This information enables penetration testers, security consultants, and developers to provide high-quality remediation advice to application owners.

In essence, this book aims to be a comprehensive reference for mobile application security, combining publicly available knowledge on the attack and defense of mobile applications with the blended experience of the authors.

### How This Book Is Organized

The book is divided into sections covering each of the major mobile device platforms. For each platform, we provide a pragmatic approach to performing a mobile application security assessment. We start with the necessary background information on how to analyze the application itself, followed by detailed information on how to attack the application and the categories of vulnerabilities that affect the relevant platform. Finally, we provide remedial actions that can be implemented to develop secure mobile applications.

If you are new to mobile application security, it is recommended that you read the book from start to finish to acquire the knowledge and understanding needed to tackle later chapters. If you are only interested in a specific platform or area, you can jump straight into the relevant subsection. Cross-references to other chapters are included to fill any gaps in your understanding.

**Chapter 1: Mobile Application (In)Security**
- Describes the current state of security in mobile applications.
- Examines key attack surfaces, the evolution of mobile security, and existing standards and frameworks.
- Provides an overview of useful mobile security resources and insights into the future of mobile application security.

**Chapter 2: Analyzing iOS Applications**
- Focuses on iOS application assessment.
- Covers foundational knowledge on the security features of the iOS platform, jailbreaking, accessing the device and file system, and important concepts like the Data Protection API and Keychain.
- Discusses App Store encryption, reverse engineering of iOS binaries, generic exploits, and mitigation features.

**Chapter 3: Attacking iOS Applications**
- Details offensive techniques for attacking iOS applications.
- Introduces Objective-C and Swift, the languages used for iOS development, and outlines how the runtimes can be manipulated.
- Describes client-side injection attacks, Inter Process Communication (IPC), and associated insecurities.

**Chapter 4: Identifying iOS Implementation Issues**
- Examines implementation issues specific to the iOS platform.
- Audits iOS applications for vulnerabilities related to improper use of the address book, geolocation frameworks, and logging system.
- Discusses residual data, caching, and memory corruption issues.

**Chapter 5: Writing Secure iOS Applications**
- Transitions to the defender's perspective.
- Provides techniques for developers to protect against manipulation, including secure encryption, data erasure, and binary protections.

**Chapter 6: Analyzing Android Applications**
- Provides the necessary background on the security features of the Android platform.
- Examines rooting, application packaging, and tools for building a test environment.
- Describes how packages are compiled and how security assessments can be conducted through decompilation.

**Chapter 7: Attacking Android Applications**
- Details common areas of vulnerability in Android applications and techniques to exploit them.
- Explores insecure services, content providers, broadcasts, intents, and activities.
- Addresses file system storage, network communications, and JavaScript interfaces.

**Chapter 8: Identifying Android Implementation Issues**
- Teaches how to identify vulnerabilities in OEM device applications and powerful packages.
- Explores privilege escalation, remote exploitation, and the use of Drozer, an Android attack tool.

**Chapter 9: Writing Secure Android Applications**
- Concludes the Android section with defensive advice.
- Provides instructions on implementing encryption, root detection, and code obfuscation.
- Includes an application checklist for auditing.

**Chapter 10: Analyzing Windows Phone Applications**
- Details essential knowledge for the Windows Phone (WP8) platform.
- Examines fundamental security protections, application capabilities, and the Windows Data Protection API (DPAPI).

**Chapter 11: Attacking Windows Phone Applications**
- Analyzes common insecurities in WP8 applications.
- Covers transport security, network communication interception, and certificate pinning.
- Explores reverse engineering and injection attacks, including SQL injection, web browser control injection, and file handling routines.

**Chapter 12: Identifying Windows Phone Implementation Issues**
- Focuses on common issues in insecurely implemented WP8 applications.
- Examines log data, clipboard protections, caching, and geo-location leakages.
- Discusses memory corruption issues and their implications.

**Chapter 13: Writing Secure Windows Phone Applications**
- Details how to develop secure WP8 applications.
- Covers secure encryption, data erasure, and binary protections.
- Provides in-depth analysis on anti-tamper implementations and compiler protections.

**Chapter 14: Analyzing BlackBerry Applications**
- Provides foundational knowledge on different types of BlackBerry applications and their development and distribution.
- Examines the BlackBerry platform, core security features, and how to build a test environment.
- Discusses the Security Builder API, transport insecurities, and certificate pinning.

**Chapter 15: Attacking BlackBerry Applications**
- Provides insight into BlackBerry application security.
- Discusses the application runtime, System API, and programming frameworks.
- Examines IPC mechanisms and how insecurely implemented IPC can be exploited.

**Chapter 16: Identifying BlackBerry Application Implementation Issues**
- Discusses common issues in BlackBerry applications due to misuse of APIs.
- Investigates information leakages, system logging, and memory corruption vulnerabilities.

**Chapter 17: Writing Secure BlackBerry Applications**
- Focuses on improving the security of BlackBerry applications.
- Discusses secure deletion of data, encryption, and practical examples using built-in APIs and custom functions.

**Chapter 18: Cross-Platform Applications**
- Examines cross-platform mobile applications.
- Breaks down the functionality offered by various implementations and details the vulnerability categories affecting them.
- Provides practical examples of exploiting these vulnerabilities in Apache Cordova.

### Who Should Read This Book

This book is primarily intended for anyone with a personal or professional interest in attacking mobile applications, as well as those responsible for developing mobile applications. It provides a detailed analysis of how to attack and secure iOS, Android, BlackBerry, and Windows Phone applications, serving as a reference point for generic mobile application security regardless of the operating platform.

We provide code extracts showing how applications can be vulnerable, which are simple enough to understand without prior knowledge of the language. However, having some basic experience with reading or writing code will be beneficial.

### Tools You Will Need

This book emphasizes hands-on, practical techniques for attacking mobile applications. While it is possible to follow many examples in a simulated or emulated environment, running applications on a physical device is highly recommended. The companion website, www.mobileapphacker.com, provides additional resources, including source code, tool links, and a checklist for attacking typical applications.

### Chapter 1: Mobile Application (In)security

There is little doubt that mobile computing has changed the world, transforming the way we work, interact, and socialize. It has brought infinite possibilities to our fingertips, available all the time. The ability to do online banking, check email, play the stock market, and much more are now just a tap away.