### Unicorn and Policy Miners

We utilize Unicorn to develop two state-of-the-art miners. Detailed information on the miners built using Unicorn is provided in Sections 8 and 9, as well as Appendices B and C. For Role-Based Access Control (RBAC), we compare our miner with the one presented in [30]. For Attribute-Based Access Control (ABAC), we use the miner from [18] for comparison. Currently, there are no known miners for eXtensible Access Control Markup Language (XACML) and spatio-temporal RBAC. For business meaningful RBAC (BM-RBAC), we contacted the authors of miners for this RBAC extension [30, 56], but their algorithm implementations were not available.

#### Objective Function

Our objective function is defined as:
\[ \lambda \parallel I \parallel + L(\text{Auth}, I; \phi) \]
where:
- \(\lambda\) is a trade-off hyper-parameter.
- \(\parallel I \parallel\) is the complexity measure of \(I\) in the policy language.
- \(\phi\) is the template formula for the corresponding policy language.

The values for the hyper-parameters were determined using grid search.

### Evaluation Metrics and Methods

To evaluate the miners for RBAC, BM-RBAC, and XACML, we use 5-fold cross-validation [21, 22, 79]. To assess the generalizability of the mined policies, we measure the true positive rate (TPR) and false positive rate (FPR) [59]. The complexity of the mined policies is measured using \(\parallel I \parallel\).

For ABAC and Spatio-Temporal Attribute-Based Access Control (STARBAC), which receive logs instead of access control matrices as input, we use universal cross-validation [18]. We measure the TPR, FPR, precision, and complexity of the mined policies. Only those policies with an FPR below 5% were considered.

### Experimental Setup

All policy miners, except the one for BM-RBAC, were developed in Python 3.6 and executed on machines with 2.8 GHz 8-core CPUs and 32 GB of RAM. The miner for BM-RBAC was developed in PyTorch version 0.4 [58] and executed on an NVIDIA GTX Titan X GPU with 12 GB of RAM. For all policy languages except STARBAC, our experiments completed within 4 hours. For STARBAC, they took 7 hours. It is important to note that organizations do not need to mine policies regularly, so real-time mining is not a requirement [18].

### Results

Figures 2–4 compare the TPRs, complexities, and precisions of the policies mined using Unicorn with those mined by the state of the art across different datasets and policy languages. Our key observations are:

**Figure 2:**
- **Comparison of TPRs:** Policies mined using Unicorn have TPRs within 5% of the state-of-the-art policies. For XACML and STARBAC, where no other miners exist, we achieve TPRs above 75% in all cases.

**Figure 3:**
- **Comparison of Complexities:** In most cases, the policies mined using Unicorn have lower complexities than those mined by the state of the art. For XACML and STARBAC, we compared the complexity of the mined policy with that of the original policy.

**Figure 4:**
- **Comparison of Precisions:** When mining from logs, policies mined using Unicorn have similar or greater precision than those mined by the state of the art, sometimes substantially greater.

- **False Positive Rate (FPR):** In all cases, the mined policies have an FPR ≤ 5%.

### Discussion

Our experimental results show that, with the exception of ABAC, all policies mined attain a TPR of at least 80% in most cases. The lower TPR in ABAC is due to the fact that the logs contain only 7% of all possible requests [18]. However, even in this case, our ABAC miner achieves a TPR within 5% of the state of the art [18]. Additionally, our ABAC miner produces policies with substantially lower complexity and higher precision.

These results support our hypothesis that Unicorn can be used to build competitive policy miners for a wide variety of policy languages. These miners are well-suited for practical use, as they facilitate the specification and maintenance of policies without replacing human administrators, especially when working with logs. Sparse logs, such as those used in ABAC, contain only a fraction of all possible authorization requests, making it challenging for miners to deduce all permission assignments. Therefore, mined policies must be simple and easy to interpret.

### Related Work

#### Policy Mining

- **RBAC Mining:** Early research focused on combinatorial algorithms to find minimal role assignments [51, 63, 72, 74, 80]. Machine learning techniques like latent Dirichlet allocation [56] and deterministic annealing [30, 67] were later used to maximize the likelihood of given permission assignments. Recent works include mining RBAC policies with time constraints [53, 54] and role hierarchies [35, 66].

- **Other Miners:** Miners have been proposed for other policy languages like ABAC [18, 76] and ReBAC [12]. These algorithms use dedicated combinatorial and machine learning methods tailored to the specific policy language. Unicorn offers a more general solution applicable to a broader class of policy languages.

#### Interpretable Machine Learning

- **Interpretable Models:** Algorithms that train interpretable models consisting of human-readable rules [2, 17, 42, 44, 65] are attractive for policy mining. However, these rules often do not comply with the syntax of the underlying policy language. Unicorn can mine policies that are both accurate and compliant with the policy language's syntax, such as XACML.

### Conclusion

The challenge of specifying and maintaining access control policies has led to the development of numerous policy languages and associated miners. Developing these miners is complex and inflexible. Unicorn provides a universal method for building policy miners that work effectively for a wide variety of policy languages. Our experimental validation, including comparisons with state-of-the-art miners, shows that Unicorn-built miners are highly competitive.

Future work includes automating the entire workflow, envisioning a universal policy mining algorithm that, given the policy language, permission assignment, and objective function, automatically computes the probabilistic model and the most likely policy.

### References

[1] Aich, S., Sural, S., & Majumdar, A. K. (2007). STARBAC: Spatiotemporal Role Based Access Control. In OTM Confederated International Conferences "On the Move to Meaningful Internet Systems". Springer, 1567–1582.

[2] Angelino, E., Larus-Stone, N., Alabi, D., Seltzer, M., & Rudin, C. (2017). Learning Certifiably Optimal Rule Lists. In Proceedings of the 23rd ACM SIGKDD International Conference on Knowledge Discovery and Data Mining. ACM, 35–44.

... (Additional references follow the same format)

---

This optimized text is more structured, clear, and professional, providing a comprehensive overview of the topic and the experimental results.