### Method to Determine the Correct Order of Deobfuscation Logic

For multi-level obfuscated samples, manual analysis is necessary to determine the correct order in which deobfuscation logic should be applied. Our approach, however, can automatically handle this process.

### 6.2.3 Deobfuscation Efficiency

Figure 9 illustrates the average time required to deobfuscate one obfuscated script. The size of the original scripts used as samples ranges from 400 bytes to 400 KB, with an average size of 5.4 KB. On average, it takes less than half a second to deobfuscate a script. The emulator, which is responsible for undoing the obfuscation, takes about two-thirds of the total time, while the remaining time is spent on reconstructing the Abstract Syntax Tree (AST) and recovering the scripts.

- **Encoding-based Obfuscation**: The emulator must decode the obfuscated content, which is slower than string stitching for string-based obfuscation.
- **Token-based Obfuscation**: This type of obfuscation involves more subtrees, making the deobfuscation process more computationally intensive. A typical token-based obfuscated script can contain over 50 obfuscated subtrees, significantly increasing the time required for deobfuscation. The time spent on the emulator is difficult to reduce.

### 6.2.4 Attack Detection Based on Deobfuscated Scripts

Table 6 demonstrates the impact of deobfuscation on detection. We use the same sample set as in Section 2.3, with the unobfuscated samples serving as the training set for our detection system. The samples were submitted to Microsoft Online Defender [10] and VirusTotal [11]. For VirusTotal, if any antivirus engine detects the sample, it is considered detected. We excluded Kaspersky, ZoneAlarm, and Sophos AV, as these engines detect obfuscation rather than maliciousness, leading to high false positives.

- **Detection Rates**:
  - **Windows Defender**: The detection rate drops from 89% to 1.3%, a reduction of at least 68 times.
  - **VirusTotal**: The detection rate reduces by at least 12.5%.
  - **Our Approach**: The detection rate is almost unaffected by obfuscation, with a maximum reduction of 8%.

Deobfuscation significantly improves the detection rates for both Windows Defender and VirusTotal. The detection rate increases by at least 48% for Windows Defender and 82.6% for VirusTotal.

- **Obfuscation Schemes**:
  - **Scheme 2 (String Split)**: This scheme is the most easily bypassed because if the strings are not split finely enough, they can still match signatures.
  - **Scheme 1**: This scheme has the worst deobfuscation effect, as the other three schemes are based on script blocks, which do not change the structure within the block.

No detection approach produced false positives, likely due to the relatively simple and unambiguous structure of PowerShell scripts.

### 6.2.5 Comparison with State-of-the-Art PowerShell Detection Approaches

Rusak et al. [53] and Hendler et al. [32] present the latest detection approaches for PowerShell, using AST-based and character-based features, respectively. We reproduced these approaches for comparison, using the same training and testing sets. The results are shown in Table 7.

- **Results**:
  - Both AST-based and character-based approaches are bypassed by obfuscation.
  - Our deobfuscation system increases their true positive rate (TPR) by 87.2%.
  - Once deobfuscated, these approaches achieve similar or even higher TPRs than our approach.
  - However, our semantic-aware approach is more robust against evasion techniques, such as mixing benign pieces into malicious samples, which can significantly decrease the TPR of syntax-level approaches.

### 6.2.6 Breakdown Analysis of Techniques Used in Our Deobfuscation

To evaluate the individual contributions of the major techniques in our deobfuscation process, we removed or replaced one technique at a time and measured the impact on performance. The results are shown in Table 8.

- **Techniques**:
  - **Extract Subtrees (§4.2)**: Removing this phase increases analysis time by 404.3% and decreases deobfuscation and detection accuracy.
  - **Obfuscation Detection (§4.3)**: Replacing this with a regex-based detector from PSDEM [41] reduces similarity and detection accuracy by 43.7% and 54.7%, respectively.
  - **Emulation-based Recovery (§4.4)**: Using PSDEM’s string manipulation approach reduces similarity and detection accuracy by nearly half.
  - **AST Update (§4.5)**: This phase is designed to complete the deobfuscation process but has limited benefits for single-layer obfuscation.
  - **Post Processing (§4.6)**: Removing this phase decreases recovery similarity by 7%.

### 7.1 Generality of Our Approach

Although our subtree-based deobfuscation approach was developed for PowerShell, its design is not specific to PowerShell. It can be applied to any language where obfuscation hides script pieces as strings, such as JavaScript [66].

- **Requirements**:
  - A parser and an unmodified interpreter for the target language, which are typically available as official tools.
  - The strategy for updating the tree and constructing the deobfuscated script is reusable.
  - The only additional work required for a new language is to collect obfuscated samples and adapt the deobfuscation system accordingly.