### SHA-256 Block Shuffle and Related Formal Verification Efforts

The Cryptol synthesizer has been used to verify the SHA-256 block shuffle, but not the SHA-256 management code or HMAC. The Cryptol synthesizer is not foundational because its semantics are not formally specified, let alone proven.

#### CAO: A Domain-Specific Language for Cryptographic Applications
CAO is a domain-specific language (DSL) for cryptographic applications, which is compiled into C [11] and equipped with verification technology based on the FRAMA-C tool suite [4].

#### Verified Libraries of Arbitrary-Precision Arithmetic Functions
Arbitrary-precision arithmetic functions have been verified by Fischer [39] and Berghofer [17] using Isabelle/HOL. Bertot et al. [20] verified GMP’s computation of square roots in Coq, based on Filliatre’s CORRECTNESS tool for ML-style programs with imperative features [26]. However, these formalizations are not foundationally connected to a verified compiler.

#### Verified Assembly Implementations
Verified assembly implementations of arithmetic functions have been developed by Myreen and Curello [36] and Affeldt [1]. They use proof-producing (de)compilation and simulation to link assembly code and memory layout to functional specifications at the level of FIPS specifications. Chen et al. [24] verified the Montgomery step in Bernstein’s high-speed implementation of elliptic curve 25519 [18], using a combination of SMT solving and Coq to implement a Hoare logic for Bernstein’s portable assembly representation qhasm.

The abstraction techniques and representation predicates in these works are compatible with our memory layout predicates. An important future step is to condense commonalities of these libraries into an ontology for crypto-related reasoning principles, reusable across multiple language levels and realized in multiple proof assistants. This is crucial for scaling our work to larger fragments of cryptographic libraries.

#### Formal Verification of Protocols
Formal verification of protocols is an established research area, and efforts to link abstract protocol verifications to implementations are emerging using automated techniques like model extraction or code generation [8], or interactive proof [2].

Toma and Borrione [41] used ACL2 to prove the correctness of a VHDL implementation of the SHA-1 block-shuffle algorithm, but there is no connection to a verified compiler for VHDL.

Backes et al. [10] mechanically verified (in EasyCrypt) that Merkle-Damgård constructions have certain security properties.

#### EasyCrypt and CertiCrypt
Almeida et al. [3] described the use of their EasyCrypt tool to verify the security of an implementation of the RSA-OAEP encryption scheme. A functional specification of RSA-OAEP is written in EasyCrypt, which then verifies its security properties. An unverified Python script translates the EasyCrypt specification to (an extension of) C, which is then compiled to assembly language using an extension of CompCert. Finally, a leakage tool verifies that the assembly language program has no more program counter leakage than the source code.

The EasyCrypt verifier is not foundational; it is an OCaml program whose correctness is not proved. The translation from C to assembly language is foundational, using CompCert. However, EasyCrypt’s C code relies on bignum library functions, but provides no mechanism to prove these functions correct.

CertiCrypt [13] is a system for reasoning about cryptographic algorithms in Coq; it is foundational, but (like EasyCrypt) has no foundational connection to a C semantics. ZKCrypt [9] is a synthesizer that generates C code for zero-knowledge proofs, implemented in CertiCrypt, also with no foundational connection to a C semantics.

Bhargavan et al. [21] "implemented TLS with verified cryptographic security" in F# using the F7 type-checker. F7 is not capable of reasoning about all the required cryptographic/probabilistic relationships, so parts of the proof are completed using EasyCrypt, and there is no formal relationship between the EasyCrypt proofs and the F7 proof. One must inspect the code to ensure that the things admitted in F7 are the same as those proved in EasyCrypt. F7 is also not foundational, as the type checker has a large amount of trusted code and depends on the Z3 SMT solver. Another difference is that the code provides a reference implementation in F#, not an efficient implementation in C.

#### CryptoVerif
CryptoVerif [22] is a prover (implemented in OCaml) for security protocols, from which one can extract an OCaml program from a CryptoVerif model [23]. CryptoVerif is not foundational, the extraction is not foundational, and the compiler for OCaml is not foundationally verified.

#### C Program Verification
There are many program analysis tools for C, but most do not address functional specification or functional correctness and are unsound and incomplete. They are useful in practice but cannot be used for end-to-end verification.

Foundational formal verification of C programs has only recently become possible, with significant works being the operating-system kernels seL4 [32] and CertiKOS [29]. Both proofs are refinement proofs between functional specifications and operational semantics, done in higher-order logics: seL4 in Isabelle/HOL and CertiKOS in Coq.

Neither of these proof frameworks uses separation logic, and neither can accommodate the use of addressable local variables in C, making it impossible to prove OpenSSL’s HMAC/SHA in these frameworks. Additionally, neither can handle function pointers, which OpenSSL uses in its "engines" mechanism, an object-oriented style of programming that dynamically connects components together, such as HMAC and SHA. The Verifiable C program logic is capable of reasoning about such object-oriented patterns in C [6, Chapter 29], although this has not been done in the work described in this paper.

### Conclusion
Widely used open-source cryptographic libraries like OpenSSL, operating systems kernels, and the C compilers that build them form the backbone of public communication security. Since 2013, it has become clear that hackers and nation-states are willing to invest enormous resources in searching for and exploiting vulnerabilities. Other authors have demonstrated that compilers [34] and OS kernels [32, 29] can be built to a provably zero-functional-correctness-defect standard. Here, we have demonstrated the same, in a modular way, for key components of our common cryptographic infrastructure.

Functional correctness implies zero buffer-overrun defects. However, side channels such as timing, fault-injection, and leaks through dead memory are not addressed here. Our approach does not solve these problems but ensures they are not made worse. Because we can reason about standard C code, other authors' techniques for side channel analysis are applicable without obstruction.

Functional correctness (with respect to a specification) does not always guarantee that a program has abstract security properties. By linking a proof of cryptographic security to a proof of program correctness, we provide that guarantee.

### Acknowledgments
This work was funded in part by DARPA award FA8750-12-2-029 and by a grant from Google ATAP.

### References
[1] AFFELDT, R. On construction of a library of formally verified low-level arithmetic functions. Innovations in Systems and Software Engineering (ISSE) 9, 2 (2013), 59–77.
[2] AFFELDT, R., AND SAKAGUCHI, K. An intrinsic encoding of a subset of C and its application to TLS network packet processing. Journal of Formalized Reasoning 7, 1 (2014), 63–104.
[3] ALMEIDA, J. B., BARBOSA, M., BARTHE, G., AND DUPRESSOIR, F. Certified computer-aided cryptography: efficient provably secure machine code from high-level implementations. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (2013), ACM, pp. 1217–1230.
[4] ALMEIDA, J. B., BARBOSA, M., FILLIÂTRE, J., PINTO, J. S., AND VIEIRA, B. CAOVerif: An open-source deductive verification platform for cryptographic software implementations. Sci. Comput. Program. 91 (2014), 216–233.
[5] APPEL, A. W. Verification of a cryptographic primitive: SHA-256. ACM Trans. on Programming Languages and Systems 37, 2 (Apr. 2015), 7:1–7:31.
[6] APPEL, A. W., DOCKINS, R., HOBOR, A., BERINGER, L., DODDS, J., STEWART, G., BLAZY, S., AND LEROY, X. Program Logics for Certified Compilers. Cambridge, 2014.
[7] APPEL, A. W., MICHAEL, N. G., STUMP, A., AND VIRGA, R. A trustworthy proof checker. J. Automated Reasoning 31 (2003), 231–260.
[8] AVALLE, M., PIRONTI, A., AND SISTO, R. Formal verification of security protocol implementations: a survey. Formal Asp. Comput. 26, 1 (2014), 99–123.
[9] BACELAR ALMEIDA, J., BARBOSA, M., BANGERTER, E., BARTHE, G., KRENN, S., AND ZANELLA BÉGUELIN, S. Full proof cryptography: verifiable compilation of efficient zero-knowledge protocols. In Proceedings of the 2012 ACM conference on Computer and communications security (2012), ACM, pp. 488–500.
[10] BACKES, M., BARTHE, G., BERG, M., GRÉGOIRE, B., KUNZ, C., SKORUPPA, M., AND BÉGUELIN, S. Z. Verified security of Merkle-Damgård. In Computer Security Foundations Symposium (CSF), 2012 IEEE 25th (2012), IEEE, pp. 354–368.
[22] BLANCHET, B. A computationally sound mechanized prover for security protocols. Dependable and Secure Computing, IEEE Transactions on 5, 4 (2008), 193–207.
[23] CADÉ, D., AND BLANCHET, B. Proved generation of implementations from computationally secure protocol specifications. In Principles of Security and Trust. Springer, 2013, pp. 63–82.
[24] CHEN, Y., HSU, C., LIN, H., SCHWABE, P., TSAI, M., WANG, B., YANG, B., AND YANG, S. Verifying curve25519 software. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (2014), G. Ahn, M. Yung, and N. Li, Eds., ACM, pp. 299–309.
[25] ERKOK, L., CARLSSON, M., AND WICK, A. Hardware/software co-verification of cryptographic algorithms using Cryptol. In Formal Methods in Computer-Aided Design, 2009 (FMCAD’09) (2009), IEEE, pp. 188–191.
[26] FILLIÂTRE, J. Verification of non-functional programs using interpretations in type theory. J. Funct. Program. 13, 4 (2003), 709–745.
[27] Keyed-hash message authentication code. Tech. Rep. FIPS PUB 198-1, Information Technology Laboratory, National Institute of Standards and Technology, Gaithersburg, MD, July 2008.
[28] Secure hash standard (SHS). Tech. Rep. FIPS PUB 180-4, Information Technology Laboratory, National Institute of Standards and Technology, Gaithersburg, MD, Mar. 2012.
[29] GU, L., VAYNBERG, A., FORD, B., SHAO, Z., AND COSTANZO, D. CertiKOS: A certified kernel for secure cloud computing. In Proceedings of the Second Asia-Pacific Workshop on Systems (2011), APSys’11, ACM, pp. 3:1–3:5.
[30] HALEVI, S. A plausible approach to computer-aided cryptographic proofs. http://eprint.iacr.org/2005/181, 2005.
[31] HOARE, C. A. R. An axiomatic basis for computer programming. Commun. ACM 12, 10 (October 1969), 578–580.
[32] KLEIN, G., ELPHINSTONE, K., HEISER, G., ANDRONICK, J., COCK, D., DERRIN, P., ELKADUWE, D., ENGELHARDT, K., KOLANSKI, R., NORRISH, M., ET AL. seL4: Formal verification of an OS kernel. In Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles (2009), ACM, pp. 207–220.
[33] KOBLITZ, N., AND MENEZES, A. Another look at HMAC. Journal of Mathematical Cryptology 7, 3 (2013), 225–251.
[34] LEROY, X. Formal certification of a compiler back-end, or: programming a compiler with a proof assistant. In POPL’06 (2006), pp. 42–54.
[35] LEROY, X. Formal verification of a realistic compiler. Communications of the ACM 52, 7 (2009), 107–115.
[36] MYREEN, M. O., AND CURELLO, G. Proof pearl: A verified bignum implementation in x86-64 machine code. In Certified Programs and Proofs - Third International Conference, CPP 2013, Proceedings (2013), G. Gonthier and M. Norrish, Eds., vol. 8307 of Lecture Notes in Computer Science, Springer, pp. 66–81.
[37] O’HEARN, P., REYNOLDS, J., AND YANG, H. Local reasoning about programs that alter data structures. In CSL’01: Annual Conference of the European Association for Computer Science Logic (Sept. 2001), pp. 1–19. LNCS 2142.
[38] PETCHER, A., AND MORRISETT, G. The foundational cryptography framework. In Principles of Security and Trust - 4th International Conference, POST 2015, Proceedings (2015), R. Focardi and A. C. Myers, Eds., vol. 9036 of Lecture Notes in Computer Science, Springer, pp. 53–72.
[39] SCHMALTZ, S. F. F. Formal verification of a big integer library including division. Master’s thesis, Saarland University, 2007. busserver.cs.uni-sb.de/publikationen/Fi08DATE.pdf.
[40] SMITH, E. W., AND DILL, D. L. Automatic formal verification of block cipher implementations. In Formal Methods in Computer-Aided Design (FMCAD’08) (2008), IEEE, pp. 1–7.
[41] TOMA, D., AND BORRIONE, D. Formal verification of a SHA-1 circuit core using ACL2. In Theorem Proving in Higher Order Logics. Springer, 2005, pp. 326–341.
[11] BARBOSA, M., CASTRO, D., AND SILVA, P. F. Compiling CAO: from cryptographic specifications to C implementations. In Principles of Security and Trust - Third International Conference, POST 2014, Proceedings (2014), M. Abadi and S. Kremer, Eds., vol. 8414 of Lecture Notes in Computer Science, Springer, pp. 240–244.
[12] BARTHE, G., DUPRESSOIR, F., GRÉGOIRE, B., KUNZ, C., SCHMIDT, B., AND STRUB, P.-Y. EasyCrypt: A tutorial. In Foundations of Security Analysis and Design VII. Springer, 2014, pp. 146–166.
[13] BARTHE, G., GRÉGOIRE, B., AND ZANELLA BÉGUELIN, S. Formal certification of code-based cryptographic proofs. In Proceedings of the 36th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (New York, NY, USA, 2009), POPL ’09, ACM, pp. 90–101.
[14] BELLARE, M. New proofs for NMAC and HMAC: Security without collision-resistance. In Advances in Cryptology-CRYPTO 2006. Springer, 2006, pp. 602–619.
[15] BELLARE, M., CANETTI, R., AND KRAWCZYK, H. Keying hash functions for message authentication. In Advances in CryptologyCRYPTO96 (1996), Springer, pp. 1–15.
[16] BELLARE, M., AND ROGAWAY, P. Code-based game-playing proofs and the security of triple encryption. IACR Cryptology ePrint Archive 2004 (2004), 331.
[17] BERGHOFER, S. Verification of dependable software using SPARK and Isabelle. In 6th International Workshop on Systems Software Verification, SSV 2011 (2011), J. Brauer, M. Roveri, and H. Tews, Eds., vol. 24 of OASICS, Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, pp. 15–31.
[18] BERNSTEIN, D. J. Curve25519: New Diffie-Hellman speed records. In Public Key Cryptography - PKC 2006, 9th International Conference on Theory and Practice of Public-Key Cryptography, Proceedings (2006), M. Yung, Y. Dodis, A. Kiayias, and T. Malkin, Eds., vol. 3958 of Lecture Notes in Computer Science, Springer, pp. 207–228.
[19] BERNSTEIN, D. J. cr.yp.to/talks/2012.03.20/slides.pdf, Mar. 2012. The HMAC brawl.
[20] BERTOT, Y., MAGAUD, N., AND ZIMMERMANN, P. A proof of GMP square root. J. Autom. Reasoning 29, 3-4 (2002), 225–252.
[21] BHARGAVAN, K., FOURNET, C., KOHLWEISS, M., PIRONTI, A., AND STRUB, P. Implementing TLS with verified cryptographic security. In Security and Privacy (SP), 2013 IEEE Symposium on (2013), IEEE, pp. 445–459.