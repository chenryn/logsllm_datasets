### 优化后的文本

#### 25 – EM – End of Medium
**含义：** 已到达介质末端，存储空间已满。

**说明：** EM（End of Medium）用于表示数据存储到达串行存储介质的逻辑终点。例如，在磁带或磁盘上，当数据写到介质的末尾时，EM表示逻辑上的结束点，而不需要实际达到物理介质的末尾。

#### 26 – SUB – Substitute Character
**含义：** 替补/替换字符。

**说明：** SUB（Substitute Character）是一个控制字符，用于替换错误或损坏的数据。在早期的通信系统中，这个字符常用于标记需要替换的字符位置。

#### 27 – ESC – Escape
**含义：** 逃离/取消。

**说明：** ESC（Escape）是ASCII标准中的一个重要控制字符，由Bob Bemer提议引入。ESC用于启动一段扩展字符序列，允许在不修改原始ASCII标准的情况下添加新的控制命令。广泛应用于打印机和终端设备中，用于控制字体、字符位置和颜色等设置。如果没有ESC字符，ASCII标准可能无法适应新技术的需求，从而被其他标准取代。

#### 28 – FS – File Separator
**含义：** 文件分隔符。

**说明：** FS（File Separator）是一个有趣的控制字符，反映了1960年代计算机技术的特点。当时的数据存储主要是顺序存储介质，如穿孔卡片、纸带和磁带。FS用于分隔两个独立的文件，有助于在串行数据流中明确文件边界。

#### 29 – GS – Group Separator
**含义：** 分组符。

**说明：** GS（Group Separator）用于分隔串行数据存储系统中的不同组。在ASCII定义的时代，数据库通常以表的形式组织，每个表包含多个记录。GS用于区分不同的表或组，使得数据更加有序。

#### 30 – RS – Record Separator
**含义：** 记录分隔符。

**说明：** RS（Record Separator）用于分隔同一组或表内的多个记录。在串行数据存储中，RS帮助区分不同的记录，确保数据结构清晰。

#### 31 – US – Unit Separator
**含义：** 单元分隔符。

**说明：** US（Unit Separator）用于分隔串行数据存储环境下的不同字段（Field）。在ASCII定义中，最小的数据项称为单元（Unit），现在我们称之为字段（Field）。US允许字段具有可变长度，提高了数据存储效率，特别是在存储空间有限的情况下。

#### 32 – SP – Space
**含义：** 空格键。

**说明：** SP（Space）虽然在现代文本中非常常见，但它实际上是一个控制字符。空格键用于在输出设备上向前移动一个字符位置，并清除当前位置的内容。在许多程序中，空格还用于处理换行和其他格式化任务。

#### 127 – DEL – Delete
**含义：** 删除。

**说明：** DEL（Delete）是一个特殊的控制字符，其值为127。在早期的纸带系统中，DEL用于删除数据。由于纸带使用7个孔洞编码数据，127对应的二进制值为1111111b，表示所有7个比特位都为高电平，因此将所有孔洞穿孔，从而删除现有数据。

### 控制字符的标准读法
常见的ASCII字符及其他特殊字符的英文叫法可以在Unicode官方网站上找到：
- [C0 Control and Basic Latin Range (0000-007F)](http://www.unicode.org/charts/PDF/U0000.pdf)
- [Alphabetic Presentation Forms Range (FB00-FB4F)](http://www._unicode.org/charts/PDF/UFB00.pdf)
- [CJK Compatibility Forms](http://www.unicode.org/charts/PDF/UFE30.pdf)
- [Fullwidth ASCII Punctuation](http://www.unicode.org/charts/PDF/UFF00.pdf)

### 引用
1. [C0 and C1 Control Codes](http://en.wikipedia.org/wiki/C0_and_C1_control_codes)
2. [Control Character](http://en.wikipedia.org/wiki/Control_character)
3. [ASCII Character Map](http://www.lammertbies.nl/comm/info/ascii-characters.html)
4. [百度百科：ASCII](http://baike.baidu.com/view/15482.htm)
5. [ASCII Encoding Table](http://www.dreamdu.com/xhtml/ascii/)

### ASCII码的组成
#### 第一部分：ASCII非打印控制字符表
- 数字0–31分配给控制字符，用于控制打印机等外围设备。
- 例如，12代表换页功能，指示打印机跳到下一页的开头。

#### 第二部分：ASCII打印字符
- 数字32–126分配给键盘上可以找到的字符，这些字符在文档查看或打印时出现。
- 数字127代表DELETE命令。

#### 第三部分：扩展ASCII打印字符
- 扩展ASCII字符满足了对更多字符的需求，增加了128个字符，总共256个。
- 即使如此，许多语言仍包含无法压缩到256个字符中的符号，因此出现了ASCII的变体来囊括地区性字符和符号。

### Vim中的不可见字符
```plaintext
^@ = 0x00 Null值
^H = 0x08 退格
^I = 0x09 水平制表
^J = 0x0A 换行
^M = 0x0D 回车
```

### 功能码（Function Code）
- ASCII字符集前32个字符（0-31）是不可见的控制字符，统称为功能字符（Function Code）。
- 这些字符用于特定的控制功能，例如删除、换行等。

### 其他链接
- [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76)
- [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity)
- [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118)
- [德哥 / digoal's GitHub](https://github.com/digoal/blog/blob/master/README.md)
- [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity)
- [购买PolarDB云服务折扣活动](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al)
- [关于德哥](https://github.com/digoal/blog/blob/master/me/readme.md)