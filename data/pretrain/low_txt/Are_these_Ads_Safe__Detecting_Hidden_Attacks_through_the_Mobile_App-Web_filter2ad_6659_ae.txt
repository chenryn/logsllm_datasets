### Systematic Methodology for Analyzing Web Malvertising in Mobile Applications

A systematic methodology is employed to crawl websites and load ad content, followed by an analysis of the redirection chains and landing pages for any signs of malicious activity. Zarras et al. [4] have also conducted studies on web malvertising. However, our work differs from these studies in several key aspects:

1. **Focus on Mobile Applications**: Our primary focus is on mobile applications, an area that has not been extensively studied in the context of malvertising. We examine all app-web interactions, not just advertisements.
2. **Triggering Component**: For mobile applications, an additional triggering component is necessary in the methodology. Unlike web pages, where the entire content (including ads) is loaded at once, mobile apps require specific triggers to initiate the loading of web content. This increases the complexity of the methodology, and we have made significant contributions to enhance this process.
3. **Malware Propagation Vectors**: The vectors through which malware propagates via web malvertising differ significantly from those in mobile environments. On mobile platforms like Android, drive-by-downloads are virtually non-existent due to process-level sandboxing. Similarly, link hijacking, where embedded malicious code automatically redirects users without their interaction, is not possible in mobile apps. Instead, the main propagation vector for malware in mobile apps is trojans. Collecting and analyzing trojans further complicates our methodology, as it requires the automatic downloading and analysis of content from landing pages.

### Malware Analysis and Detection

Both industry and academia are actively engaged in analyzing potentially malicious or malicious applications to understand their behavior. Here, we discuss works related to mobile platforms:

- **Google Bouncer and VerifyApps**: Google has implemented a service called Bouncer to analyze applications uploaded to Google Play for malicious activity [39]. More recently, Google introduced VerifyApps, which collects and analyzes applications from various sources, including those not on Google Play. While the details of the analysis are not public, it likely involves both static and dynamic analysis. VerifyApps uses the results to warn users when they install suspicious applications [40].
- **Academic Sandboxes**: Dynamic analysis sandboxes such as Mobile Sandbox [41] and Andrubis [42] provide detailed reports on analyzed applications, including permissions and servers contacted during runtime. However, no existing system incorporates the type of analysis we perform, which involves understanding app-web interfaces and following web links from applications to detect malicious content. If such analysis were supported by the industry or government, it would be highly effective in reducing instances of malicious content accessible from mobile applications. Additionally, incorporating their results could enhance our detection capabilities.

### Honeypots and Related Techniques

Honeypots, such as HoneyMonkey [43], interact with attackers to gather valuable information about malicious servers and previously unknown vulnerabilities. These systems also require triggering and detection, but the complexity of triggering in mobile UIs is greater. Our detection focuses on recognizing scams and download trojans rather than identifying exploits.

### Android Malware Detection Techniques

Several techniques have been proposed for detecting Android malware:
- **Zhou et al. [44]**: Analyzed mobile applications from Play and third-party stores, detecting multiple instances of malware.
- **Grace et al. [45]**: Performed static analysis to systematically detect malware.
- **Arp et al. [46]**: Introduced a machine-learning-based system to detect and classify Android malware.
- **Zhang et al. [47]**: Proposed a dynamic analysis based on permission use to detect malicious applications.
- **Feng et al. [48]** and **Zhang et al. [49]**: Developed semantics-aware static analyses to defeat malware obfuscation attacks.

These approaches complement our methodology and can be integrated to enhance our detection capabilities.

### Conclusion

Understanding how malware and scam attacks reach users is crucial for protecting mobile platforms. In this paper, we explored the app-web interface, where users may navigate from an application to a web destination via advertisements or embedded web links. Over a two-month period, we studied more than 600,000 applications across two continents and identified several malware and scam campaigns. By gathering provenance, we were able to identify responsible parties such as ad networks and application developers. Our study demonstrates that deploying such a system can offer better protection in the Android ecosystem by screening out applications that embed links leading to malicious content and making ad networks more accountable for their ad content.

### Acknowledgment

We thank our reviewers for their valuable comments and Kexin Zhang and Yao Xiao for their assistance in data collection and early implementation. This research was supported by NPRP grant 6-1014-2-414 from the Qatar National Research Fund, NSF grant CNS-1408790, and NSFC grant 61472209. The statements made herein are solely the responsibility of the authors.

### References

[1] "Smartphone OS Market Share, Q1 2015," http://www.idc.com/prodserv/smartphone-os-market-share.jsp.
[2] "Malware Infected as Many Android Devices as Windows Laptops in 2014," http://bgr.com/2015/02/17/android-vs-windows-malware-infection/.
[3] "Android Phones Hit by 'Ransomware'," http://bits.blogs.nytimes.com/2014/08/22/android-phones-hit-by-ransomware/?r=0.
[4] A. Zarras, A. Kapravelos, G. Stringhini, T. Holz, C. Kruegel, and G. Vigna, "The Dark Alleys of Madison Avenue: Understanding Malicious Advertisements," in Proceedings of the 2014 Conference on Internet Measurement Conference, ACM, 2014, pp. 373–380.
[5] Z. Li, K. Zhang, Y. Xie, F. Yu, and X. Wang, "Knowing Your Enemy: Understanding and Detecting Malicious Web Advertising," in Proceedings of the 2012 ACM Conference on Computer and Communications Security, ACM, 2012, pp. 674–686.
[6] V. Rastogi, Y. Chen, and W. Enck, "AppsPlayground: Automatic Security Analysis of Smartphone Applications," in Proceedings of ACM CODASPY, 2013.
[7] "Selendroid: Selenium for Android," http://selendroid.io/.
[8] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou, "Fast, Scalable Detection of Piggybacked Mobile Applications," in Proceedings of the Third ACM Conference on Data and Application Security and Privacy, ACM, 2013, pp. 185–196.
[9] Symantec, "Airpush Begins Obfuscating Ad Modules," November 2012, http://www.symantec.com/connect/blogs/airpush-begins-obfuscating-ad-modules.
[10] V. Rastogi, Y. Chen, and W. Enck, "AppsPlayground: Automatic Security Analysis of Smartphone Applications," in Proceedings of the Third ACM Conference on Data and Application Security and Privacy, ACM, 2013, pp. 209–220.
[11] "Genymotion," https://www.genymotion.com/.
[12] "Android-x86 Running ARM Apps Thanks to Libhoudini and Buildroid.org," 2012, http://forum.xda-developers.com/showthread.php?t=1750783.
[13] "Celery: Distributed Task Queue," http://www.celeryproject.org/.
[14] N. Viennot, E. Garcia, and J. Nieh, "A Measurement Study of Google Play," in The 2014 ACM International Conference on Measurement and Modeling of Computer Systems, ACM, 2014, pp. 221–233.
[15] "Tapcontext Shit Breaking Policy Making Loosing Active Users," http://forums.makingmoneywithandroid.com/advertising-networks/1868-tapcontext-shit-breaking-policy-making-loosing-active-users.html#post12949.
[16] "Armor for Android," http://www.androidauthority.com/armor-for-android-342192/.
[17] "Reputation of amarktflow.com," https://www.mywot.com/en/scorecard/amarktflow.com.
[18] "Free iPad Mini Scam Spreads via Facebook Rogue Application," https://nakedsecurity.sophos.com/2012/10/31/free-ipad-mini-facebook/.
[19] "Apple iPad Scam," http://www.macworld.co.uk/feature/iphone/free-iphone-ipad-scam-fake-auction-site-facebook-3608522/.
[20] "How to Spot a Free iPhone or iPad Scam," http://blog.spamfighter.com/software/how-to-spot-a-free-iphone-or-ipad-scam/.
[21] T. Azim and I. Neamtiu, "Targeted and Depth-First Exploration for Systematic Testing of Android Apps," ACM SIGPLAN Notices, vol. 48, no. 10, pp. 641–660, 2013.
[22] W. Choi, G. Necula, and K. Sen, "Guided GUI Testing of Android Apps with Minimal Restart and Approximate Learning," in ACM SIGPLAN Notices, vol. 48, no. 10, ACM, 2013, pp. 623–640.
[23] B. Liu, S. Nath, R. Govindan, and J. Liu, "Decaf: Detecting and Characterizing Ad Fraud in Mobile Apps," in Proc. of NSDI, 2014.
[24] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, "SMV-Hunter: Large Scale, Automated Detection of SSL/TLS Man-in-the-Middle Vulnerabilities in Android Apps," in Proceedings of Network and Distributed Systems Security (NDSS), 2014.
[25] L. Ravindranath, S. Nath, J. Padhye, and H. Balakrishnan, "Automatic and Scalable Fault Detection for Mobile Applications," in Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, ACM, 2014, pp. 190–203.
[26] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath, R. Wang, and D. Wetherall, "Brahmastra: Driving Apps to Test the Security of Third-Party Components," in 23rd USENIX Security Symposium (USENIX Security 14), USENIX Association, 2014, pp. 1021–1036.
[27] S. Hao, B. Liu, S. Nath, W. G. Halfond, and R. Govindan, "Puma: Programmable UI-Automation for Large-Scale Dynamic Analysis of Mobile Apps," in Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, ACM, 2014, pp. 204–217.
[28] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang, "AppIntent: Analyzing Sensitive Data Transmission in Android for Privacy Leakage Detection," in ACM CCS, 2013.
[29] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu, "Effective Real-Time Android Application Auditing," in IEEE Security and Privacy, 2015.
[30] J. Crussell, R. Stevens, and H. Chen, "MadFraud: Investigating Ad Fraud in Android Applications," in Proceedings of the 12th Annual International Conference on Mobile Systems, Applications, and Services, ACM, 2014, pp. 123–134.
[31] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and A. Sheth, "TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones," in OSDI, 2010.
[32] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall, "These Aren't the Droids You're Looking For: Retrofitting Android to Protect Data from Imperious Applications," in Proceedings of ACM CCS, 2011.
[33] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri, "A Study of Android Application Security," in USENIX Security, 2011.
[34] C. Gibler, J. Crussell, J. Erickson, and H. Chen, "AndroidLeaks: Automatically Detecting Potential Privacy Leaks in Android Applications on a Large Scale," Trust and Trustworthy Computing, 2012.
[35] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, "Unsafe Exposure Analysis of Mobile In-App Advertisements," in Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, ACM, 2012, pp. 101–112.
[36] Y. Zhang, D. Song, H. Xue, and T. Wei, "Ad Vulna: A Vulnaggressive (Vulnerable & Aggressive) Adware Threatening Millions," 2013, https://www.fireeye.com/blog/threat-research/2013/10/ad-vulna-a-vulnaggressive-vulnerable-aggressive-adware-threatening-millions.html.
[37] S. Shekhar, M. Dietz, and D. S. Wallach, "AdSplit: Separating Smartphone Advertising from Applications," in USENIX Security Symposium, 2012, pp. 553–567.
[38] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach, "Quire: Lightweight Provenance for Smart Phone Operating Systems," in USENIX Security Symposium, 2011, p. 24.
[39] H. Lockheimer, "Android and Security," February 2012, http://googlemobile.blogspot.com/2012/02/android-and-security.html.
[40] "Protect Against Harmful Apps," https://support.google.com/accounts/answer/2812853?hl=en.
[41] M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and J. Hoffmann, "Mobile-Sandbox: Having a Deeper Look into Android Applications," in Proceedings of the 28th Annual ACM Symposium on Applied Computing, ACM, 2013, pp. 1808–1815.
[42] M. Lindorfer, M. Neugschwandtner, L. Weichselbaum, Y. Fratantonio, V. van der Veen, and C. Platzer, "Andrubis-1,000,000 Apps Later: A View on Current Android Malware Behaviors," in Proceedings of the 3rd International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS), 2014.
[43] Y.-M. Wang, D. Beck, X. Jiang, R. Roussev, C. Verbowski, S. Chen, and S. King, "Automated Web Patrol with Strider Honeymonkeys," in Proceedings of the 2006 Network and Distributed System Security Symposium, 2006, pp. 35–49.
[44] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, "Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets," in Proceedings of the 19th Network and Distributed System Security Symposium, ser. NDSS '12, 2012.
[45] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, "RiskRanker: Scalable and Accurate Zero-Day Android Malware Detection," in Proceedings of the 10th International Conference on Mobile Systems, Applications, and Services, ser. MobiSys '12, ACM, 2012.
[46] D. Arp, M. Spreitzenbarth, M. Hübner, H. Gascon, and K. Rieck, "Drebin: Effective and Explainable Detection of Android Malware in Your Pocket," in Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS), 2014.
[47] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and B. Zang, "Vetting Undesirable Behaviors in Android Apps with Permission Use Analysis," in Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, ACM, 2013, pp. 611–622.
[48] Y. Feng, S. Anand, I. Dillig, and A. Aiken, "Apposcopy: Semantics-Based Detection of Android Malware Through Static Analysis," in Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, ACM, 2014, pp. 576–587.
[49] M. Zhang, Y. Duan, H. Yin, and Z. Zhao, "Semantics-Aware Android Malware Classification Using Weighted Contextual API Dependency Graphs," in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, ACM, 2014, pp. 1105–1116.
[50] V. Rastogi, Y. Chen, and X. Jiang, "DroidChameleon: Evaluating Android Anti-Malware Against Transformation Attacks," in Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security, ACM, 2013, pp. 329–334.