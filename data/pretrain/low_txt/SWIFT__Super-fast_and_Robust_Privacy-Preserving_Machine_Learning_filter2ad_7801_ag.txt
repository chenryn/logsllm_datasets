### Table 5: 4PC NN Inference
- **Throughput (TP) in (#queries/min):**
  - 5.40
  - 157.11
  - 81.46

**Table 5 Summary:**
- This table summarizes the neural network (NN) inference performance in a 4-party computation (4PC) setting.
- Our approach outperforms FLASH in all aspects, with at least a 2.5× improvement in throughput (TP) for each NN architecture.
- We achieve comparable performance to Trident [15], as the additional verification rounds are offset by the increased number of rounds required for computing NN inference. This highlights the practical relevance of our work.

**Additional Observations:**
- The 4PC setup demonstrates approximately a 3× improvement over our 3PC setup for NN inference. This improvement is attributed to the addition of an extra honest server, which enhances the overall system performance.

---

### Acknowledgements
- We extend our gratitude to Guevara Noubir, our shepherd, and the anonymous reviewers for their valuable feedback.
- **Financial Support:**
  - Nishat Koti: Cisco PhD Fellowship 2020
  - Mahak Pancholi: Cisco MTech Fellowship 2020
  - Arpita Patra: SERB MATRICS (Theoretical Sciences) Grant 2020 and Google India AI/ML Research Award 2020
  - Ajith Suresh: Google PhD Fellowship 2019
- The authors also acknowledge the financial support from Google Cloud for benchmarking.

**USENIX Association**
- 30th USENIX Security Symposium, 2663

---

### References
[1] M. Abspoel, A. P. K. Dalskov, D. Escudero, and A. Nof. An efficient passive-to-active compiler for honest-majority MPC over rings. In ACNS, 2021.
[2] B. Alon, E. Omri, and A. Paskin-Cherniavsky. MPC with Friends and Foes. In CRYPTO, pages 677–706, 2020.
[3] T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman, and O. Weinstein. Optimized honest-majority MPC for malicious adversaries - breaking the 1 billion-gate per second barrier. In IEEE S&P, pages 843–862, 2017.
[4] T. Araki, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara. High-throughput semi-honest secure three-party computation with an honest majority. In ACM CCS, pages 805–817, 2016.
[5] C. Baum, I. Damgård, T. Toft, and R. W. Zakarias. Better preprocessing for secure multiparty computation. In ACNS, pages 327–345, 2016.
[6] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A framework for fast privacy-preserving computations. In ESORICS, pages 192–206, 2008.
[7] P. Bogetoft, D. L. Christensen, I. Damgård, M. Geisler, T. Jakobsen, M. Krøigaard, J. D. Nielsen, J. B. Nielsen, K. Nielsen, J. Pagter, et al. Secure multiparty computation goes live. In FC, pages 325–343, 2009.
[8] D. Boneh, E. Boyle, H. Corrigan-Gibbs, N. Gilboa, and Y. Ishai. Zero-knowledge proofs on secret-shared data via fully linear PCPs. In CRYPTO, pages 67–97, 2019.
[9] E. Boyle, N. Gilboa, Y. Ishai, and A. Nof. Practical fully secure three-party computation via sublinear distributed zero-knowledge proofs. In ACM CCS, pages 869–886, 2019.
[10] P. Bunn and R. Ostrovsky. Secure two-party k-means clustering. In ACM CCS, pages 486–497, 2007.
[11] M. Byali, H. Chaudhari, A. Patra, and A. Suresh. FLASH: A fast and robust framework for privacy-preserving machine learning. PETS, 2020.
[14] H. Chaudhari, A. Choudhury, A. Patra, and A. Suresh. ASTRA: High Throughput 3PC over Rings with Application to Secure Prediction. In ACM CCSW@CCS, 2019.
[15] H. Chaudhari, R. Rachuri, and A. Suresh. Trident: Efficient 4PC Framework for Privacy Preserving Machine Learning. NDSS, 2020.
[16] K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell, and A. Nof. Fast large-scale honest-majority MPC for malicious adversaries. In CRYPTO, pages 34–64, 2018.
[17] R. Cleve. Limits on the security of coin flips when half the processors are faulty (extended abstract). In ACM STOC, pages 364–369, 1986.
[18] R. Cohen, I. Haitner, E. Omri, and L. Rotem. Characterization of secure multiparty computation without broadcast. J. Cryptology, pages 587–609, 2018.
[19] R. Cramer, I. Damgård, D. Escudero, P. Scholl, and C. Xing. SPDZ2k: Efficient MPC mod 2k for dishonest majority. In CRYPTO, pages 769–798, 2018.
[20] R. Cramer, S. Fehr, Y. Ishai, and E. Kushilevitz. Efficient multi-party computation over rings. In EUROCRYPT, pages 596–613, 2003.
[21] Cryptography and P. E. G. ENCRYPTO Utils. encryptogroup/ENCRYPTO_utils. at TU Darmstadt. https://github.com/encryptogroup/ENCRYPTO_utils
[22] A. Dalskov, D. Escudero, and M. Keller. Fantastic Four: Honest-Majority Four-Party Secure Computation With Malicious Security. Cryptology ePrint Archive, 2020. https://eprint.iacr.org/2020/1330
[23] I. Damgård, D. Escudero, T. K. Frederiksen, M. Keller, P. Scholl, and N. Volgushev. New primitives for actively-secure MPC over rings with applications to private machine learning. IEEE S&P, 2019.
[24] I. Damgård, M. Keller, E. Larraia, V. Pastro, P. Scholl, and N. P. Smart. Practical covertly secure MPC for dishonest majority - or: Breaking the SPDZ limits. In ESORICS, pages 1–18, 2013.
[12] M. Byali, C. Hazay, A. Patra, and S. Singla. Fast actively secure five-party computation with security beyond abort. In ACM CCS, pages 1573–1590, 2019.
[25] I. Damgård, C. Orlandi, and M. Simkin. Yet another compiler for active security or: Efficient MPC over arbitrary rings. In CRYPTO, pages 799–829, 2018.
[13] M. Byali, A. Joseph, A. Patra, and D. Ravi. Fast secure computation for small population over the internet. In ACM CCS, pages 677–694, 2018.
[26] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. Multiparty computation from somewhat homomorphic encryption. In CRYPTO, pages 643–662, 2012.
[27] D. Demmler, T. Schneider, and M. Zohner. ABY - A framework for efficient mixed-protocol secure two-party computation. In NDSS, 2015.
[42] S. Mazloom, P. H. Le, S. Ranellucci, and S. D. Gordon. Secure parallel computation on national scale volumes of data. In USENIX, pages 2487–2504, 2020.
[28] W. Du and M. J. Atallah. Privacy-preserving cooperative scientific computations. In IEEE CSFW-14, pages 273–294, 2001.
[29] H. Eerikson, M. Keller, C. Orlandi, P. Pullonen, J. Puura, and M. Simkin. Use Your Brain! Arithmetic 3PC for Any Modulus with Active Security. In ITC, 2020.
[30] J. Furukawa, Y. Lindell, A. Nof, and O. Weinstein. High-throughput secure three-party computation for malicious adversaries and an honest majority. In EUROCRYPT, pages 225–255, 2017.
[31] S. D. Gordon, S. Ranellucci, and X. Wang. Secure computation with low communication from cross-checking. In ASIACRYPT, pages 59–85, 2018.
[32] G. Jagannathan and R. N. Wright. Privacy-preserving distributed k-means clustering over arbitrarily partitioned data. In ACM SIGKDD, pages 593–599, 2005.
[33] M. Keller, E. Orsini, and P. Scholl. MASCOT: faster malicious arithmetic secure computation with oblivious transfer. In ACM CCS, pages 830–842, 2016.
[34] M. Keller, V. Pastro, and D. Rotaru. Overdrive: Making SPDZ great again. In EUROCRYPT, pages 158–189, 2018.
[35] M. Keller, P. Scholl, and N. P. Smart. An architecture for practical actively secure MPC with dishonest majority. In ACM CCS, pages 549–560, 2013.
[36] N. Koti, M. Pancholi, A. Patra, and A. Suresh. SWIFT: Super-fast and Robust Privacy-Preserving Machine Learning. Cryptology ePrint Archive, 2020. https://eprint.iacr.org/2020/592
[37] A. Krizhevsky, V. Nair, and G. Hinton. The CIFAR-10 dataset. 2014. https://www.cs.toronto.edu/~kriz/cifar.html
[38] Y. LeCun, L. Bottou, Y. Bengio, and P. Haffner. Gradient-based learning applied to document recognition. Proceedings of the IEEE, pages 2278–2324, 1998.
[39] Y. LeCun and C. Cortes. MNIST handwritten digit database. http://yann.lecun.com/exdb/mnist/ 2010.
[43] P. Mohassel and P. Rindal. ABY3: A mixed protocol framework for machine learning. In ACM CCS, pages 35–52, 2018.
[44] P. Mohassel, M. Rosulek, and Y. Zhang. Fast and secure three-party computation: The garbled circuit approach. In ACM CCS, pages 591–602, 2015.
[45] P. Mohassel and Y. Zhang. SecureML: A system for scalable privacy-preserving machine learning. In IEEE S&P, pages 19–38, 2017.
[46] P. S. Nordholt and M. Veeningen. Minimising communication in honest-majority MPC by batchwise multiplication verification. In ACNS, pages 321–339, 2018.
[47] A. Patra and D. Ravi. On the exact round complexity of secure three-party computation. In CRYPTO, pages 425–458, 2018.
[48] A. Patra and A. Suresh. BLAZE: Blazing Fast Privacy-Preserving Machine Learning. NDSS, 2020. https://eprint.iacr.org/2020/042
[49] M. C. Pease, R. E. Shostak, and L. Lamport. Reaching agreement in the presence of faults. J. ACM, pages 228–234, 1980.
[50] M. S. Riazi, C. Weinert, O. Tkachenko, E. M. Songhori, T. Schneider, and F. Koushanfar. Chameleon: A hybrid secure computation framework for machine learning applications. In AsiaCCS, pages 707–721, 2018.
[51] A. P. Sanil, A. F. Karr, X. Lin, and J. P. Reiter. Privacy preserving regression modelling via distributed computation. In ACM SIGKDD, pages 677–682, 2004.
[52] K. Simonyan and A. Zisserman. Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556, 2014.
[53] A. B. Slavkovic, Y. Nardi, and M. M. Tibbits. Secure logistic regression of horizontally and vertically partitioned distributed databases. In ICDM, pages 723–728, 2007.
[40] Y. Lindell and B. Pinkas. Privacy preserving data mining. J. Cryptology, pages 177–206, 2002.
[54] J. Vaidya, H. Yu, and X. Jiang. Privacy-preserving SVM classification. Knowl. Inf. Syst., pages 161–178, 2008.
[41] E. Makri, D. Rotaru, N. P. Smart, and F. Vercauteren. EPIC: efficient private image classification (or: Learning from the masters). In CT-RSA, pages 473–492, 2019.
[55] S. Wagh, D. Gupta, and N. Chandran. SecureNN: 3-party secure computation for neural network training. PoPETs, pages 26–49, 2019.
[56] S. Wagh, S. Tople, F. Benhamouda, E. Kushilevitz, P. Mittal, and T. Rabin. FALCON: Honest-Majority Maliciously Secure Framework for Private Deep Learning. PoPETS, pages 188–208, 2021. https://arxiv.org/abs/2004.02229v1
[57] H. Yu, J. Vaidya, and X. Jiang. Privacy-preserving SVM classification on vertically partitioned data. In PAKDD, pages 647–656, 2006.

---

### Preliminaries

#### Shared Key Setup
- **Secure Pseudo-Random Function (PRF):** Let \( F : \{0,1\}^\kappa \times \{0,1\}^\kappa \rightarrow X \) be a secure PRF, where the co-domain \( X \) is \( \mathbb{Z}_{2^\ell} \).
- **Keys for 3PC:**
  - Each pair of servers shares a key: \( k_{01}, k_{02}, k_{12} \) for pairs \( (P_0, P_1), (P_0, P_2), (P_1, P_2) \) respectively.
  - A shared key known to all servers: \( k_P \).
- **Random Value Sampling:** Servers \( P_0 \) and \( P_1 \) can sample a random value \( r \in \mathbb{Z}_{2^\ell} \) non-interactively by invoking \( F_{k_{01}}(id_{01}) \), where \( id_{01} \) is a counter maintained by the servers and updated after each PRF invocation.
- **Key Setup Functionality:** The key setup is modeled via a functionality \( F_{\text{setup}} \) (Figure 6) that can be realized using any secure MPC protocol. The analogous key setup functionality for 4PC is given in Figure 7.

**Functionality \( F_{\text{setup}} \)**
- **Interactions:** \( F_{\text{setup}} \) interacts with the servers in \( P \) and the adversary \( S \).
- **Key Generation:**
  - \( F_{\text{setup}} \) picks random keys \( k_{ij} \) for \( i, j \in \{0,1,2\} \) and \( k_P \).
  - For server \( P_s \):
    - \( y_s = (k_{01}, k_{02}, k_P) \) when \( P_s = P_0 \).
    - \( y_s = (k_{01}, k_{12}, k_P) \) when \( P_s = P_1 \).
    - \( y_s = (k_{02}, k_{12}, k_P) \) when \( P_s = P_2 \).
- **Output:** Send \( (\text{Output}, y_s) \) to every \( P_s \in P \).

**Figure 6: 3PC: Ideal functionality for shared-key setup**

**Functionality \( F_{\text{setup4}} \)**
- **Interactions:** \( F_{\text{setup4}} \) interacts with the servers in \( P \) and the adversary \( S \).
- **Key Generation:**
  - \( F_{\text{setup4}} \) picks random keys \( k_{ij} \) and \( k_{ijk} \) for \( i, j, k \in \{0,1,2\} \) and \( k_P \).
  - For server \( P_s \):
    - \( y_s = (k_{01}, k_{02}, k_{03}, k_{012}, k_{013}, k_{023}, k_P) \) when \( P_s = P_0 \).
    - \( y_s = (k_{01}, k_{12}, k_{13}, k_{012}, k_{013}, k_{123}, k_P) \) when \( P_s = P_1 \).
    - \( y_s = (k_{02}, k_{12}, k_{23}, k_{012}, k_{023}, k_{123}, k_P) \) when \( P_s = P_2 \).
    - \( y_s = (k_{03}, k_{13}, k_{23}, k_{013}, k_{023}, k_{123}, k_P) \) when \( P_s = P_3 \).
- **Output:** Send \( (\text{Output}, y_s) \) to every \( P_s \in P \).

**Figure 7: 4PC: Ideal functionality for shared-key setup**

**Additive Sharing of 0:**
- To generate a 3-out-of-3 additive sharing of 0, i.e., \( \zeta_s \) for \( s \in \{0,1,2\} \) such that \( P_s \) holds \( \zeta_s \) and \( \zeta_0 + \zeta_1 + \zeta_2 = 0 \), servers proceed as follows:
  - Every pair of servers \( P_s, P_{(s+1) \% 3} \) non-interactively generate \( r_s \) as described earlier.
  - Each \( P_s \) sets \( \zeta_s = r_s - r_{(s-1) \% 3} \).

---

### B. 3PC Protocols

#### Joint Message Passing
- **Ideal Functionality \( F_{\text{jmp}} \):** The ideal functionality for joint message passing (jmp) appears in Figure 8.
- **Interactions:**
  - \( F_{\text{jmp}} \) interacts with the servers in \( P \) and the adversary \( S \).
  - Step 1: \( F_{\text{jmp}} \) receives \( (\text{Input}, v_s) \) from \( P_s \) for \( s \in \{i, j\} \), and \( (\text{Select}, \text{ttp}) \) from \( S \). Here, \( \text{ttp} \) denotes the server that \( S \) wants to choose as the trusted third party (TTP). Let \( P^* \in P \) denote the server corrupted by \( S \).
  - Step 2: If \( v_i = v_j \) and \( \text{ttp} = \bot \), then set \( \text{msg}_i = \text{msg}_j = \bot \), \( \text{msg}_k = v_i \), and go to Step 5.
  - Step 3: If \( \text{ttp} \in P \setminus \{P^*\} \), then set \( \text{msg}_i = \text{msg}_j = \text{msg}_k = \text{ttp} \).
  - Step 4: Else, set the TTP to be the honest server with the smallest index. Set \( \text{msg}_i = \text{msg}_j = \text{msg}_k = \text{TTP} \).
  - Step 5: Send \( (\text{Output}, \text{msgs}) \) to \( P_s \) for \( s \in \{0,1,2\} \).

**Figure 8: 3PC: Ideal functionality for jmp primitive**

#### Joint Sharing
- **Protocol \( \Pi_{\text{jsh}}(P_i, P_j, v) \):** The joint sharing protocol appears in Figure 9.
- **Preprocessing:**

---

This version of the text is more structured, clear, and professional, with improved readability and coherence.