### 11.2.1 Discussion of Invalid Results

Table 2 and Figure 8c contain several false positives and false negatives. To better understand the limitations of our approach, we will highlight these instances.

#### False Negatives
- **RC2**: RC2 uses regular addition (with carry over) instead of XOR. The Feistel signature highlighted in Section 10.2 relies on the presence of the XOR operation. Therefore, RC2 is not identified as a Feistel cipher.
- **SHA512**: SHA512 consistently appears as a false negative in the sequential block permutation class of primitives. This is because a Data Flow Graph (DFG) consisting of n (i.e., 4) instances of SHA512 is required for successful identification. However, such a DFG contains over 1,000,000 vertices, causing the construction phase to exceed the timeout threshold. Increasing the timeout value mitigates this issue but also increases the total analysis time. A similar problem occurs with SHA3 when d ≥ 3, leading to the Keccak-F function being inlined and the construction phase exceeding the timeout.
- **TwoFish**: TwoFish is a Feistel cipher with a complex round function. The Feistel signature used in the analysis supports a round function consisting of up to 8 consecutive arithmetic/logical operations. The complexity of the TwoFish round function exceeds this limit. Extending the signature beyond 8 consecutive operations significantly impacts the running time of our implementation.

#### False Positives
- **AES Key Schedule**: The AES key schedule is identified as a Feistel network. This is because its structure can be formulated as one, where each round \( L_{i+1} = R_i \) and \( R_{i+1} = L_i \oplus F(R_i, K_i) \), with \( i \) denoting the round number and \( F \) being some function. This example illustrates that the taxonomical tree of cryptographic primitives is not always clear-cut, and there can be some overlap between different classes.
- **RC4 and ChaCha**: Both RC4 and ChaCha, which are stream ciphers, are identified as sequential block permutations. Inspection reveals that both implementations maintain an internal state of size \( b \). This state is used directly as the cipher's keystream. After the internal state is fully consumed, a new internal state is generated. Thus, the structure can be viewed as a special case of a block cipher with a block size of \( b \) bytes.

### 11.3 Performance on Proprietary Algorithms

Next, we analyze various proprietary algorithms. Most of these algorithms were originally confidential but have since been leaked or reverse-engineered. Table 3 summarizes the analysis results for these algorithms. Descriptions, analysis results, and other relevant information are condensed into a single table due to space constraints. All signatures target a generic class of primitives and were not pre-constructed to fit a particular sample. All algorithms are successfully identified, except for Red Pike. Similar to RC2, Red Pike uses addition instead of exclusive-or and is therefore not identified as a Feistel cipher.

### Analysis Result for Various Firmware Images

The test set of representative real-world firmware images includes binaries for the Emerson ControlWave Micro RTU, Emerson ControlWave XFC flow computer, Schneider Electric M340 PLC, and Volkswagen IPC. The size, nature, and complexity of these images ensure test-set realism. Table 4 depicts the analysis results for all the firmware images. To the best of our knowledge, the table covers all cryptographic algorithms present in the sample set of firmware images. The images are flat binaries, and hence symbol names are absent. The results show that all the cryptographic primitives were identified, except for the Megamos cipher. Further examination reveals that the non-linear feedback function in the Megamos cipher is implemented as a subroutine, and the shift register is updated based on its return value via an if-statement. This violates the implicit flow limitation inherent to DFG-based approaches discussed in Section 2.

### 12 Conclusions

Despite the availability of royalty-free, publicly documented, and peer-reviewed cryptographic primitives, proprietary alternatives persist across many industry verticals, especially in embedded systems. Analyzing these undocumented and proprietary primitives often requires locating and classifying them in large binary images, a time-consuming and labor-intensive task. Our novel approach combines DFG isomorphism with symbolic execution and introduces a specialized domain-specific language (DSL) to identify unknown proprietary cryptographic algorithms within well-defined taxonomical classes. This approach is architecture and platform-agnostic and performs well in terms of accuracy and running time on real-world binary firmware images.

#### Future Work
DFGs do not allow for the expression of code flow information, potentially losing valuable indicators such as whether two nodes originate from the same execution address, which could hint at a round function. Incorporating code flow information is left for future work.

### 13 Acknowledgements

This work was funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy - EXC 2092 CaSa - 390781972.

### References

[1] Ross Anderson, Mike Bond, Jolyon Clulow, and Sergei Skorobogatov. Cryptographic processors—a survey. Proceedings of the IEEE, 94(2):357–369, 2006.
[2] Jean-Philippe Aumasson, Jorge Nakahara, and Pouyan Sepehrdad. Cryptanalysis of the ISDB scrambling algorithm (Multi2). In International Workshop on Fast Software Encryption, pages 296–307. Springer, 2009.
[3] Luigi Auriemma. Signsrch tool. Tool for searching signatures inside files, 2013.
[4] Roberto Avanzi. A salad of block ciphers. IACR Cryptology ePrint Archive, 2016:1171, 2016.
[5] BBC News. Car key immobiliser hack revelations blocked by UK court. 2013. https://www.bbc.com/news/technology-23487928.
[6] Eli Biham and Orr Dunkelman. Cryptanalysis of the A5/1 GSM stream cipher. In International Conference on Cryptology in India, pages 43–51. Springer, 2000.
[7] Eli Biham, Orr Dunkelman, Sebastiaan Indesteege, Nathan Keller, and Bart Preneel. How to steal cars: a practical attack on KeeLoq. In EUROCRYPT, pages 1–18, 2008.
[8] Eli Biham, Orr Dunkelman, and Nathan Keller. A related-key rectangle attack on the full Kasumi. In International Conference on the Theory and Application of Cryptology and Information Security, pages 443–461. Springer, 2005.
[9] Fabrizio Biondi, Sébastien Josse, Axel Legay, and Thomas Sirvent. Effectiveness of synthesis in concolic deobfuscation. Computers & Security, 70:500–515, 2017.
[10] Alex Biryukov, Adi Shamir, and David Wagner. Real-time cryptanalysis of A5/1 on a PC. In International Workshop on Fast Software Encryption, pages 1–18. Springer, 2000.
[11] Tim Blazytko, Moritz Contag, Cornelius Aschermann, and Thorsten Holz. Syntia: Synthesizing the semantics of obfuscated code. In Proceedings of the 26th USENIX Security Symposium, pages 643–659, 2017.
[12] Andrey Bogdanov. Cryptanalysis of the KeeLoq block cipher. IACR Cryptology ePrint Archive, 2007:55, 2007.
[13] Wouter Bokslag. An assessment of ECM authentication in modern vehicles.
[14] Steve Bono, Matthew Green, Adam Stubblefield, Ari Juels, Aviel D. Rubin, and Michael Szydlo. Security analysis of a cryptographically-enabled RFID device. In USENIX Security Symposium, volume 31, pages 1–16, 2005.
[15] Marc Briceno, Ian Goldberg, and David Wagner. An implementation of COMP128. 1998. http://www.iol.ie/kooltek/a3a8.txt.
[16] Marc Briceno, Ian Goldberg, and David Wagner. A pedagogical implementation of the GSM A5/1 and A5/2 “voice privacy” encryption algorithms. Originally published at http://www.scard.org, mirror at http://cryptome.org/gsm-a512.htm, 26, 1999.
[17] Billy Brumley. A3/A8 & COMP128. T-79.514 Special Course on Cryptology, pages 1–18, 2004.
[18] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn Song. Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering. In Proceedings of the 16th ACM conference on Computer and communications security, pages 621–634, 2009.
[19] Joan Calvet, José M. Fernandez, and Jean-Yves Marion. Aligot: Cryptographic function identification in obfuscated binary programs. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 169–182, 2012.
[20] Nicolas T. Courtois. The dark side of security by obscurity and cloning Mifare Classic rail and building passes, anywhere, anytime. 2009.
[21] Nicolas T. Courtois, Gregory V. Bard, and David Wagner. Algebraic and slide attacks on KeeLoq. In International Workshop on Fast Software Encryption, pages 97–115. Springer, 2008.
[22] Nicolas T. Courtois, Sean O’Neil, and Jean-Jacques Quisquater. Practical algebraic attacks on the Hitag2 stream cipher. In International Conference on Information Security, pages 167–176. Springer, 2009.
[23] Gmane Cypherpunk mailing list. Red Pike cipher. 2004. http://permalink.gmane.org/gmane.comp.security.cypherpunks/3680.
[24] Robin David. Formal Approaches for Automatic Deobfuscation and Reverse-engineering of Protected Codes.