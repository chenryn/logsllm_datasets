# An Attacker's Perspective on Docker: Approaching Multi-Container Applications

## Wesley McGrew, Ph.D.
**Director of Cyber Operations, HORNE Cyber**  
Email: [mcgrewsecurity@horne.com](mailto:mcgrewsecurity@horne.com)  
Twitter: [@mcgrewsecurity](https://twitter.com/mcgrewsecurity)

### Background
- **Education**: Ph.D. in Computer Science from Mississippi State University
- **Academic Experience**:
  - National Security Agency (NSA) Center of Academic Excellence (CAE) – Research, Education, and Cyber Operations at MSU
  - Industrial Control Systems – Human-Machine Interfaces
  - Research & Education in Reverse Engineering & Malware Attribution
- **Professional Experience**:
  - Director of Cyber Operations at HORNE Cyber
  - Computer Network Operations (CNO/CNE/CAN)
  - Penetration Testing, Red Teaming, and Application Security
  - Operational Security for Testing Engagements

### Intentions
- **Objective**: To highlight the relationship between an attacker’s skill set and its evolution over time compared to developer trends.
- **Leveraging Existing Knowledge**: How to use your current skills effectively.
- **Learning New Technologies**: Guidance on how to approach learning new technologies.
- **Exposure to Multi-Container Applications**: Provide experienced hackers with exposure to applications composed of multiple containers.
- **Exploring Internals**: Delve into the internals of these applications using concrete Docker examples that follow common practices (e.g., those found in tutorials and intuitive/naïve usage).
- **Inspiration**: Inspired by HD Moore and Valsmith's presentation "Tactical Exploitation" at DEF CON 15.
- **Target Audience**: Attackers, Penetration Testers, Red Teams, CNE, and CNO professionals.

### Prior Art in Docker
- **David Mortman, DEF CON 23**: "Docker, Docker, Give Me the News, I Got a Bad Case of Securing You" – Discusses underlying implementation and architecture.
- **Aaron Grattafiori, DEF CON 23**: "Understanding and Hardening Linux Containers" – Focuses on kernel capabilities and low-level security advice.
- **Docker Documentation**: Highlights the lack of default-on security features.
- **Anthony Bettini, Black Hat Europe 2015**: "Vulnerability Exploitation in Docker Containers" – Addresses platform vulnerabilities.
- **Michael Cherney and Sagie Dulce, Black Hat USA 2017**: "Well, That Escalated Quickly! How Abusing Docker API Led to Remote Code Execution, Same Origin Bypass and Persistence in The Hypervisor via Shadow Containers" – Targets developers.

### Containerization & Docker
- **Operating-System-Level Virtualization**: As an attacker, you are likely familiar with hardware/platform virtualization. Containerization is a "lighter" form of virtualization that shares the kernel but provides multiple user-space environments.
- **Key Components**:
  - **Images and Containers**: High-level composition into applications.
  - **Development and Deployment**: Simplifies both processes.

### Vulnerabilities & Layers of Abstraction
- **Vulnerability Life Cycle**: Begins with a mistake, not just discovery.
- **Abstraction Layers**: Everything is built on top of the physical properties of silicon. Vulnerabilities often arise from a lack of understanding of underlying layers.
- **Examples**:
  - Web application vulnerabilities
  - Memory corruption and memory models
  - Broken "magic boxes"

### The Magic Box
- **User Experience**: From scripting languages and OS services to high-level languages and OS APIs, down to machine code and virtual memory.

### Keeping Up with Technology
- **Attack Surface and Environment**: You cannot dictate the language, protocols, platforms, and frameworks used by your target.
- **Skill Gaps**:
  - **Layers of Abstraction**
  - **Specifics of Technology**

### Movement and Abstraction in Development
- **Web Application Development**:
  - From CGI, binaries, scripts, web-specific languages, frameworks, to client-side + APIs.
- **Next-Level Abstraction - Containerization**: Combines mixed-technology software into building block containers, reducing the need for monolithic development.

### Mindset Shift
- **From "Hello World" to Advanced Constructs**:
  - **Developer**: What can I build with these language constructs?
  - **Hacker**: How does "Hello World" work?

### Abstraction for Hackers
- **Efficient Development**: Abstraction allows for more efficient development, higher-level technologies, and lower prerequisites for developers.
- **Building Block Containers**: Combine mixed-technology software to create applications, rather than writing them in a monolithic style.

### Developers vs. Hackers
- **Average Developer**: Works with abstraction, which becomes more lucrative over time.
- **Typical Hacker**: Develops a deeper understanding of how things work, leading to more interesting bugs and new bug classes.
- **Training Gap**: Penetration testers need more than a basic understanding of memory corruption and tool use to target modern applications.

### A Useful Shift for Attackers
- **Containerization**: Enables the design of applications composed of many independent, single-purpose services.
- **Post-Exploitation**: Democratizes post-exploitation manipulation and instrumentation, allowing for observation and instrumenting program flow/data.
- **Multi-Container Applications**: Leverage system/network-level post-exploitation and sniffing tools.

### Taking Advantage of Abstraction
- **Organization-Wide Attack**: Progression of compromising connected systems.
- **Multi-Container Networks**: Each application has its own network, possibly shared with other applications.
- **Test Microcosm**: Testing a multi-container application is like testing an entire organization.
- **Exploitation**: Begins with specific software in one container, then pivots to the internal network of other containers, services, data, and protocols.

### Docker as a Target Application Platform
- **Monolithic vs. Multi-Container Applications**:
  - **Ease of Deployment**: Monolithic applications.
  - **Docker Container Networks**: Default shared between containers, with configurations defining published ports.
  - **Internal Network**: Containers can freely scan, connect, and probe each other.

### Basic Exploration of Docker Container Applications
- **Connectivity Check**: Quick check from one container to another without explicit configuration.

### Implications
- **Access Through Conventional Exploits**: Places attackers into an internal network with opportunities to pivot.
- **Familiar Territory**: For attackers with system/network-level attack experience.
- **Limits**: "Living off the land" is more challenging due to minimalistic images.
- **Identification**: Recognize when you are inside a Docker container network after exploiting the external attack surface.

### Exploitation and Post-Exploitation
- **Externally with Kali & Metasploit**:
  - **Example**: Leveraging an older Joomla version in Docker Hub repositories.
  - **Pivoting**: Manipulation of a multi-container voting application (from Docker tutorials).

### Take-Aways
- **Existing Skills**: Become useful at a lower relative position of abstraction in newer applications.
- **Developer Trends**: Moving up the stack, so the new "low level" moves up.
- **Update Yourself**: Work "up" the stack as well.
- **New Development Practices**: Such as multi-container application composition.
- **Chase Trendy Technologies**: Look at the attack surface.
- **Opportunity for Attackers**: Leverage existing network/system-level knowledge to explore the internals of multi-container applications.
- **Skill Evolution**: Your existing skills are moving "down" the stack relative to where applications are being developed, and you can take advantage of it.

### Discussion & Contact Information
- **Whitepaper**: Available in conference materials, with more references and resources.
- **Contact**:
  - **Wesley McGrew**
  - **Director of Cyber Operations, HORNE Cyber**
  - **Email**: [mcgrewsecurity@horne.com](mailto:mcgrewsecurity@horne.com)
  - **Twitter**: [@mcgrewsecurity](https://twitter.com/mcgrewsecurity)