---
**作者**: Nils Ganther  
**类别**: 观点  
**评论数据**: 无  
**统计信息**:
  - 评论数: 0
  - 收藏次数: 0
  - 点赞数: 0
  - 分享次数: 0
  - 浏览量: 7065
**日期**: 2019-06-10 12:31:53  
**编辑推荐**: 否  
**摘要**: 本文讲述了如何利用Electron框架在Linux桌面上构建一个原生运行的开源电子邮件服务。  
**来源网址**: <https://opensource.com/article/19/4/linux-desktop-electron>  
**文章ID**: 10957  
**是否翻译**: 是  
**大图**: /data/attachment/album/201906/10/123114abz0lvbllktkulx7.jpg  
**永久链接**: /article-10957-1.html  
**缩略图**: /data/attachment/album/201906/10/123114abz0lvbllktkulx7.jpg.thumb.jpg  
**相关文章**: 无  
**审阅者**: wxy  
**选择者**: lujun9972  
**总结**: 本文讲述了如何利用Electron框架在Linux桌面上构建一个原生运行的开源电子邮件服务。  
**标签**:
  - Electron
**是否有缩略图**: 否  
**标题**: 我们是如何使用 Electron 构建 Linux 桌面应用程序的  
**是否显示标题图片**: 是  
**翻译者**: wxy  
**更新日期**: 2019-06-10 12:31:53  
---

> 这是借助 Electron 框架，构建一个在 Linux 桌面上原生运行的开源电子邮件服务的故事。

![](/data/attachment/album/201906/10/123114abz0lvbllktkulx7.jpg)

[Tutanota](https://tutanota.com/) 是一种安全的开源电子邮件服务，支持通过浏览器、iOS 和 Android 应用程序访问。其客户端代码基于 GPLv3 许可发布，Android 版本可在 [F-Droid](https://f-droid.org/en/packages/de.tutao.tutanota/) 上获取，以确保用户能够使用完全独立于 Google 的版本。鉴于 Tutanota 对开源和 Linux 客户端开发的关注，我们希望为 Linux 及其他平台提供一个桌面应用程序。作为一支小团队，我们迅速排除了为 Linux、Windows 和 MacOS 开发原生应用程序的可能性，并选择了 [Electron](https://electronjs.org/) 作为构建工具。

对于任何希望快速交付跨平台且视觉一致的应用程序的人来说，Electron 是理想的选择，尤其是当你的 Web 应用程序需要从浏览器 API 的限制中解脱出来时。Tutanota 就是一个很好的例子。它基于 [SystemJS](https://github.com/systemjs/systemjs) 和 [Mithril](https://mithril.js.org/)，旨在为用户提供简单且安全的电子邮件通信体验。因此，它必须具备许多用户期望从电子邮件客户端获得的标准功能。

得益于现代 API 和标准的支持，一些功能（如基本推送通知、文本搜索、联系人管理和双因素认证）在浏览器环境中实现起来相对容易。然而，其他功能（例如自动备份或无需服务器中转的 IMAP 支持）则需要对系统资源进行更严格的控制，而这正是 Electron 所提供的能力。

尽管有人批评 Electron “只是一个简单的封装”，但它确实带来了显著的优势：
- **快速构建跨平台应用**：Electron 能够让你迅速为 Linux、Windows 和 MacOS 创建 Web 应用。
- **与 Web 应用同步**：可以轻松地将桌面客户端的功能与 Web 应用保持一致。
- **增强用户体验**：发布后，你可以自由添加桌面特有的功能，从而提升可用性和安全性。
- **原生体验**：这是让应用既具有原生感又融入用户系统的绝佳方法。

### 满足用户需求

Tutanota 不依赖于巨额投资，而是依靠社区驱动。随着越来越多的用户升级到付费计划，我们的团队得以有机增长。倾听用户需求不仅对我们至关重要，也是成功的关键。

提供桌面客户端是 Tutanota 用户[最渴望的功能之一](https://tutanota.uservoice.com/forums/237921-general/filters/top?status_id=1177482)，现在我们自豪地推出了免费的测试版。（我们还实现了另一个高需求的功能 —— [加密数据搜索](https://tutanota.com/blog/posts/first-search-encrypted-data/) —— 但那是另一个话题了。）

我们乐于为用户提供签名版本的 Tutanota，并支持浏览器中无法实现的功能，例如通过后台进程推送通知。接下来，我们计划增加更多特定于桌面的功能，比如不依赖服务器代理的 IMAP 支持、自动备份及离线访问等。

我们之所以选择 Electron，是因为它的 Chromium 和 Node.js 组合非常适合我们的小型开发团队，并且只需对现有 Web 应用做出最小调整即可。开始阶段，我们可以直接利用浏览器 API 实现所有功能，之后再逐步替换为更原生的组件。这种方法特别适用于附件下载和通知处理。

### 调整安全性

我们知道有些人对 Electron 的安全性有所顾虑，但我们发现该框架在微调 Web 应用程序访问权限方面非常令人满意。你可以参考 Electron 的[安全文档](https://electronjs.org/docs/tutorial/security)以及 Luca Carettoni 的[Electron 安全清单](https://www.blackhat.com/docs/us-17/thursday/us-17-Carettoni-Electronegativity-A-Study-Of-Electron-Security-wp.pdf)等资源来帮助防止 Web 应用程序中的不可信内容引发灾难性后果。

### 实现特定功能

Tutanota Web 客户端自一开始就设计了一种可靠的进程间通信协议。我们利用 Web 线程在加密和请求数据时保持用户界面（UI）响应性。当我们开始开发移动应用时，这套协议派上了用场，允许我们在原生部分和 Web 视图之间进行通信。

因此，在构建桌面客户端时，许多用于本地推送通知、打开邮箱及文件系统操作的部分已经存在，只需在 Node.js 端实现即可。另一个便利之处在于我们的构建过程使用了 [Babel 转译器](https://babeljs.io/)，使我们能够以现代 ES6 JavaScript 编写整个代码库，并根据不同环境混合和匹配功能模块。这让我们能够快速调整基于 Electron 的桌面应用程序代码。当然，过程中也遇到了一些挑战。

### 克服挑战

虽然 Electron 使我们能够轻松地与不同平台的桌面环境集成，但实际投入的时间却超出预期！最终，那些看似微不足道的小事实际上占据了大量时间，但对于完成桌面客户端项目至关重要。

平台特定代码导致了大部分障碍：
- 例如，窗口管理和托盘在三个平台上略有不同的处理方式。
- 在 Windows 注册表中注册 Tutanota 作为默认邮件程序并设置自动启动，同时确保以 [UAC](https://en.wikipedia.org/wiki/User_Account_Control) 兼容的方式提示用户进行管理员访问。
- 我们还需要使用 Electron 的 API 提供诸如复制、粘贴、撤销和重做等标准功能。

由于用户对不同平台上某些（有时并不直接兼容）行为的期望，这一过程变得有些复杂。为了让三个版本都感觉像原生应用，我们需要进行多次迭代，甚至对 Web 应用程序进行了一些适度补充，以提供类似浏览器中的文本搜索功能。

### 总结

总的来说，我们在使用 Electron 方面的经验是积极的，该项目在不到四个月的时间内顺利完成。尽管有一些相当耗时的功能，但我们惊讶地发现，能够轻松地为 Linux 推出 [Tutanota 桌面客户端](https://tutanota.com/blog/posts/desktop-clients/) 的测试版。如果你感兴趣，可以在 [GitHub](https://www.github.com/tutao/tutanota) 上深入了解源代码。

---
**原文作者**: [Nils Ganther](https://opensource.com/users/nils-ganther)  
**选题**: [lujun9972](https://github.com/lujun9972)  
**翻译**: [wxy](https://github.com/wxy)  
**校对**: [wxy](https://github.com/wxy)  
**原创编译**: [LCTT](https://github.com/LCTT/TranslateProject)  
**荣誉推出**: [Linux中国](https://linux.cn/)
---