### 使用ZooKeeper等工具实现共识

像ZooKeeper这样的工具为应用程序提供了“外包”的共识、故障检测和成员服务。这些工具在分布式系统中扮演了重要角色，尽管它们的使用可能具有一定的复杂性，但相比自行开发一个能够应对[第八章](ch8.md)所述所有问题的算法来说，使用这些工具显然是更优的选择。如果你面临的问题可以归结为共识，并且希望该解决方案具备容错能力，那么采用类似ZooKeeper的工具是明智之举。

然而，并非所有的系统都需要共识机制：例如，在无主复制或多主复制系统中，通常不会依赖全局性的共识。这类系统中的冲突（请参阅[处理写入冲突](ch5.md#处理写入冲突)）往往是由于不同节点之间未能达成一致所致。不过，在某些情况下，这种不一致性可能是可接受的，我们或许只需适应没有线性一致性的状态，并学会更好地处理分支与合并版本历史的数据。

### 分布式系统理论的重要性

本章引用了大量的分布式系统理论研究成果。虽然理论论文和证明往往难以理解，有时也会基于一些不切实际的假设，但它们对于指导实践具有极其重要的价值。这些理论帮助我们推断什么是可以实现的，什么是不可能做到的，还能帮助我们发现一些反直觉的分布式系统缺陷。如果时间允许，深入研究这些参考资料是非常值得的。

### 本书第二部分总结

至此，我们已经完成了本书[第二部分](part-ii.md)的内容，其中包括对复制（[第五章](ch5.md)）、分片（[第六章](ch6.md)）、事务（[第七章](ch7.md)）、分布式系统的故障模型（[第八章](ch8.md)）以及最终的一致性和共识（[第九章](ch9.md)）的介绍。现在，我们已经打下了坚实的理论基础，接下来将在[第三部分](part-iii.md)转向更为实用的系统构建方法，并讨论如何利用异构组件构建强大的应用程序。

## 参考文献
1. Peter Bailis and Ali Ghodsi: “[Eventual Consistency Today: Limitations, Extensions, and Beyond](http://queue.acm.org/detail.cfm?id=2462076),” *ACM Queue*, volume 11, number 3, pages 55-63, March 2013. [doi:10.1145/2460276.2462076](http://dx.doi.org/10.1145/2460276.2462076)
2. Prince Mahajan, Lorenzo Alvisi, and Mike Dahlin: “[Consistency, Availability, and Convergence](http://apps.cs.utexas.edu/tech_reports/reports/tr/TR-2036.pdf),” University of Texas at Austin, Department of Computer Science, Tech Report UTCS TR-11-22, May 2011.
3. Alex Scotti: “[Adventures in Building Your Own Database](http://www.slideshare.net/AlexScotti1/allyourbase-55212398),” at *All Your Base*, November 2015.
... (其他参考文献省略)

通过以上优化，文本更加清晰、连贯，并且更具专业性。希望这对你有所帮助！