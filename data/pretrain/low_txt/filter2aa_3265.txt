# Authors and Affiliations
- **Dongsung Kim**
  - Graduate Student, Sungkyunkwan University
  - @kid1ng / [https://kidi.ng](https://kidi.ng)
- **Hyoung-Kee Choi**
  - Professor, Sungkyunkwan University
  - [https://hit.skku.edu/~hkchoi](https://hit.skku.edu/~hkchoi)

# Motivation
This section outlines the key points of our research:
- **Tizen Security Internals**
- **Dan the D-Bus Analyzer**
- **Privilege Violations**
- **Conclusion**

# Samsung’s Smartwatch Products: S2, S3, Sport
- **Features**:
  - Fitness tracking
  - Control of smart devices
  - Receiving calls, texts, and emails
  - NFC payments
- **Connectivity**:
  - Bluetooth only or with dedicated cellular LTE
- **App Marketplace**:
  - Samsung Galaxy Apps
  - Development with Tizen SDK and Samsung SDK
- **Sensitive Information and High Privileges**:
  - Powerful processor and tracking sensors
  - Personal data from the user’s smartphone (contacts, calendar, location, email, notifications, etc.)
  - Access to privileged actions must be controlled (e.g., sending a quick reply, obtaining GPS location)

*Image: Samsung*

# Tizen: A Linux-Based Open Source Operating System
- **Maintained by**:
  - The Linux Foundation
  - Mainly developed by Samsung
- **Shipped with**:
  - Smartwatches, wearables, smartphones, cameras, smart TVs, home appliances, etc.
- **Samsung Gear Firmware**:
  - Tizen’s open-source components (operating system, system services, etc.)
  - Samsung’s closed-source components (drivers, system services, applications, etc.)

*Image: Tizen Project, a Linux Foundation Project*

# Previous Research on Tizen
- **May 2015: Ajin Abraham**
  - "Hacking Samsung’s Tizen: The OS of Everything" at HITBSecConf
  - Findings: Over-privileged apps, no DEP, broken ASLR, WebKit vulnerabilities
- **April 2017: Amihai Neiderman**
  - "Breaking Tizen" at Security Analyst Summit
  - Findings: 40 0-day vulnerabilities in Tizen and Tizen Store
- **July 2017: PVS-Studio**
  - "27 000 Errors in the Tizen Operating System"
  - Findings: 900 code errors in a portion of Tizen source code

# Funding and Operation
- **Sungkyunkwan University** is funded and operated by the Samsung Foundation.

# Tizen Subsystems
- **Files, Directories, UNIX Sockets, Utilities**
- **Applications**:
  - Use Tizen APIs to access subsystems (e.g., Frameworks, Services)
- **Services**:
  - Special privileged daemons dedicated for resources (e.g., Wi-Fi, Bluetooth, GPS, messaging, sensors)
  - Must reject requests from unauthorized parties

*Source: Tizen Wiki*

# Privilege Management in Tizen
- **Service Checks**:
  - Service must check if the calling app has the required access
  - App must acquire the “privilege” in advance
- **Manifest File**:
  - App developer specifies privileges in `tizen-manifest.xml`
  - User accepts the permission for the app
  - Installer checks and registers the privilege policy
  - Accesses are controlled at runtime
- **Privileges**:
  - Examples: internet, bluetooth, network.set, screenshot, notification, email
  - Levels: Public, Partner, Platform, private use

*Source: Tizen Wiki*
*Image: “locked” by Jenie Tomboc / CC BY*

# Access Control Mechanisms
- **Discretionary Access Control (DAC)**:
  - Classic UNIX user ID + group ID policies
- **SMACK (Simplified Mandatory Access Control in Kernel)**:
  - Kernel-space isolation
  - App receives a unique label at install time (e.g., User::Pkg::sample_app)
  - For every kernel object access, the current context (label) is checked against SMACK rules
- **Cynara**:
  - User-space privilege management daemon
  - Used by services to check the calling application’s privilege
  - Identifies an application with its SMACK label
  - Checks the label against the Cynara database
- **Security Manager**:
  - Security policy configurator daemon
  - Populates DAC policies, SMACK labels, and Cynara database from different sources (e.g., default filesystem, manifest files)

*Source: Tizen Wiki*

# Inter-Process Communication (IPC) System
- **D-Bus**:
  - For Linux-like operating systems, integrated with systemd
  - High-level messages, useful built-in functions (e.g., discoverability, introspection)
  - Service daemon registers to D-Bus daemon, clients request resources via messages
  - Tizen heavily relies on D-Bus
- **Concepts**:
  - Service (Bus name, Destination)
  - Client (Application, Source)
  - Object, Interface, Method, Property

*Source: freedesktop.org Project, Pid Eins*
*Image: “File:D-Bus method invocation.svg“ by Javier Cantero / CC BY-SA 4.0*

# D-Bus and Cynara Integration
- **Patched to Perform Cynara Checks**:
  - Introduced along with Cynara (Tizen 3.0)
  - Never accepted in upstream
- **Granular Access Control to Messages**:
  - `<policy>` element in busconfig file
  - Destination, interface, member, and privilege
  - D-Bus daemon asks Cynara to allow or deny

*Source: Tizen Wiki*

# Location Manager API
- **Location Manager API with Location Privilege**
- **Location Manager API without Location Privilege**
- **dlog**: Tizen’s system log
- **Location Library**: `liblbs-location.so.1` performs `location_check_cynara`
- **First Privilege Check**:
  - PID

# Reverse Engineering and Patching
- **Reverse Engineering `liblbs-location.so.1`**:
  - Patch to bypass the first privilege check
- **Patching `liblbs-location.so.1`**:
  - D-Bus library `LBS_DBUS_CLIENT` sends a request to Location daemon `lbs-server`
  - D-Bus daemon rejects the request with `DBus.Error.AccessDenied`
  - **Second Privilege Check**

*Image: Tizen Wiki*

# Privilege Violation Points
- **Two Points for Checking Privileges of Malware**:
  - **② D-Bus Daemon**: Request in transit
  - **③ Service Daemon**: After receiving the request
- **Failing Both Could Allow Privilege Violation**

*Image: Tizen Wiki*

# Using `dbus-send` for Testing
- **Sending Non-Privileged Requests**:
  - Use `dbus-send` directly to send messages to the D-Bus daemon
  - Errors suggest privilege validation always happens first
  - Idea: Send non-privileged requests to all, then gather services that return any error but `DBus.Error.AccessDenied` → Potential privilege violation?

*Example Command*:
```bash
dbus-send --system --print-reply --dest=org.tizen.lbs.Providers.LbsServer /org/tizen/lbs/Providers/LbsServer org.tizen.lbs.Manager.AddReference
```

*Error Examples*:
- `DBus.Error.AccessDenied`: … privilege="http://tizen.org/privilege/location" (uid=654 pid=2536 comm="")
- `DBus.Error.InvalidArgs`: Type of message, '()', does not match expected type '(i)'

# Dan: The D-Bus Analyzer
- **Evaluates Privilege Verification of D-Bus Services**:
  - Spawns a test process on a remote device
  - Recursively scans the D-Bus tree for its structure (bus names, objects, interfaces, properties, methods, etc.)
  - Reads every property of every object
  - Calls every method of every interface
- **Output**:
  - D-Bus tree flattened into a JSON file (`db.json`)
  - `dbus-send` commands that require further attention (introspectable properties, callable methods)

*Image: “File:Dan Howell by Gage Skidmore.jpg“ by Gage Skidmore / CC BY-SA 3.0*
*GitHub Repository*: [https://github.com/kiding/dan](https://github.com/kiding/dan)

# Module Execution and Data Collection
- **Each Module Sends a Shell Script to Run**:
  - Wraps the script into an application
  - No privilege in `tizen-manifest.xml`
  - Main function of the app:
    - Executes the script
    - Compresses `stderr` and `stdout` into `tar.gz`
    - Logs the location of the `tar.gz`
- **Builds, Installs, and Runs the App on the Target Device**:
  - Automated with Tizen Studio and `sdb`
  - Waits for the `tar.gz` location to appear in the log
  - Pulls and decompresses the `tar.gz`

*Image: “File:Dan Howell by Gage Skidmore.jpg“ by Gage Skidmore / CC BY-SA 3.0*
*GitHub Repository*: [https://github.com/kiding/dan](https://github.com/kiding/dan)

# Aggregating D-Bus Services
- **Aggregate All Possible Services (Bus Names)**:
  - One service can have multiple bus names
  - Unique: `:1.4`
  - Well-known: `org.example.service`
- **From Extracted Firmware**:
  - `/usr/share/dbus-1/*`
- **From Runtime**:
  - Call D-Bus built-in method to D-Bus daemon: `org.freedesktop.DBus.ListNames`

*Source: freedesktop.org*

# Introspecting D-Bus Services
- **Recursively Introspects the Services**:
  - Objects, interfaces, methods, etc.
- **Each Service Can Provide Its Object Structure**:
  - Call D-Bus built-in method to service daemon: `org.freedesktop.DBus.Introspectable.Introspect`
  - Service can respond with well-formatted XML

*Example*:
- Bus name: `org.freedesktop.systemd1`
- Object: `/`
- Child objects

# Reading Properties and Calling Methods
- **Reads Every Property Value of Every Object for All Interfaces**:
  - Call D-Bus built-in method to service daemon: `org.freedesktop.DBus.Properties.GetAll`
  - Parses `dbus-send` format into a JSON-compliant form with a custom Bison parser

*Example*:
- Bus name: `org.freedesktop.systemd1`
- Object: `…/syslog_2eservice`
- Interface: `org.freedesktop.systemd1.Service`
- `GetAll.jison`

- **Calls Every Method of Every Interface for All Objects**:
  - Using random arguments to never actually execute the program logic
  - Parses the returned error, then categorizes each method
  - **Ignore**: `AccessDenied`, `ServiceUnknown`, `UnknownObject`, `NoReply`
  - **Callable**: Other errors or no error at all

*Example Command*:
```bash
dbus-send --system --print-reply --dest=org.example.service /org/example/object org.example.method string:1 string:1 string:1 string:1 string:1 string:1 string:1 string:1
```

*Error Examples*:
- `DBus.Error.InvalidArgs`
- No error (ignore)
- Callable

# Pruning and Output
- **Prunes Duplicate Bus Names**:
  - Unique: `:1.6`
  - Well-known: `org.freedesktop.systemd1`
  - Hash every object, remove duplicates
- **Prints Properties and Callable Methods**:
  - In `dbus-send` command form
  - For further manual analysis

*Output Files*:
- `db.json`
- `properties.log`
- `methods.log`

# Target Device and Statistics
- **Target Device**:
  - Samsung Gear Sport: Build RC4, Tizen 3.0.0.2, Release Date 2018-03-28
  - Takes about an hour
- **Statistics**:
  - Total number of bus names: 269
  - Readable properties: 130,634
  - Callable methods: 2,319 (excluding default interfaces like `org.freedesktop.DBus`)

# Third Privilege Check
- **Log Suggests Access is Denied**:
  - After service explicitly asks Cynara
  - No D-Bus error gets returned; treated as a normal D-Bus call
  - Dan categorizes methods as “Callable”
- **Examine Manually Further for Exploits**:
  - On Gear Sport and Gear S2

*Image: Tizen Wiki*

# Exploitable Features
- **Wi-Fi**
- **Bluetooth**
- **Screen**
- **Notification**
- **Email**
- **Many More**

*Image: “1f4a5.svg” by Twitter, Inc and other contributors / CC BY 4.0*

# Wi-Fi API Exposure
- **D-Bus APIs for `wpa_supplicant` are Fully Exposed**:
  - `wpa_supplicant`: Free software implementation of 802.11i
  - Tizen builds its own API/daemons on top
- **Every Method is Callable, Every Property is Readable**:
  - CreateInterface, RemoveInterface, Scan, etc.
  - WPS Start, GetPin; P2P Find, Connect, etc.
- **Violated Tizen Privileges**:
  - `network.get`, `network.profile`, `network.set`, `wifidirect`
  - `location`, `location.enable` (Platform level; private privilege)

# GPS Tracking
- **GPS Coordinates Can Be Publicly Queried from**:
  - BSSID of nearby Wi-Fi networks
  - Signal values of the networks
- **Malware Can Track User Even if Location is Off**:
  - Force-trigger Wi-Fi Scan
  - Acquire network information
  - Query current location

# Bluetooth API Exposure
- **Partially Exposed: `projectx.bt/bt_core`**:
  - Tizen’s own API/daemons for Bluetooth
  - Silently authorize incoming pair request
  - Force discoverable “piscan” mode
  - Prompt a PIN request system UI
  - …
- **Malware Can Phish User to Obtain PIN**:
  - Present legitimate system UI to trick user
  - Any input is returned to the malware

*Actual Name of the Paired Smartphone*

# Bluez API Exposure
- **Partially Exposed: `bluez`**:
  - `bluez`: Bluetooth stack for Linux-like operating systems
  - Force disconnect, gather information, etc.
- **Bonus: No Restriction on `hcidump` Utility**:
  - Any user can dump Bluetooth packets with no superuser privilege
  - Dump HCI packets + force disconnect + auto reconnect → Extract link key
- **Violated Tizen Privileges**:
  - `bluetooth`
  - `bluetoothmanager` (Platform level; private)

*Demo*

# Screen Capture
- **Partially Exposed: `enlightenment.screen_capture`**:
  - `dump_topvwins` dumps windows into PNG files
- **Violated Tizen Privileges**:
  - `screenshot` (Platform level; private)

*Demo*

# Notification Management
- **Partially Exposed: `com.samsung.wnoti`**:
  - Manages notifications transmitted to Gear
  - Many functions involving notifications
  - `ClearAll` to remove all notifications
  - `GetCategories` to read all data
  - …
- **Violated Tizen Privileges**:
  - `notification`, `push`, ???

*Demo*

# Email Management
- **`wemail_consumer_service`**:
  - Manages user’s mailbox on Gear, communicates with manager on phone
  - `req_show_on_device` to launch Email app on phone
  - `req_mail_state` to modify message data
  - `req_send_mail` to send any email from user’s address
- **“Security” for Private Methods**:
  - `{"id":"wemail-private-send-mail-noti", …}`
  - `strcmp` and nothing more
- **Violated Tizen Privileges**:
  - `messaging.write`
  - `email`, `email.admin` (Platform level; private)

*Demo*

# Sequence Shortened from
[https://youtu.be/Yc4AvlJLLpw](https://youtu.be/Yc4AvlJLLpw)

# Configuration Files
- **`wnoti-service.conf`**: Only three methods are listed
  - Many other sensitive methods are missing

# Wi-Fi Configuration
- **`connman.conf` and `net-config.conf`**:
  - Protect Tizen’s own Wi-Fi daemons
- **`wpa_supplicant.conf` Does Not Exist**:
  - D-Bus is not hierarchical

*Image: Tizen Wiki*

# D-Bus Client API and PoC Application
- **D-Bus Client API is Officially Supported**:
  - Eldbus: D-Bus integration with Enlightenment/EFL
- **PoC Application “BitWatch”**:
  - Benign-looking watch face
  - Privilege: `network.get`, `internet`
  - Reads notification data, sends it to a remote server
- **Submitted to Samsung Galaxy Apps**:
  - Obfuscated to hide system service names
  - Passed validation process
  - Gone on sale until we took it down

# Vulnerability Reporting and Patching
- **April 10th**: Vulnerabilities reported to Samsung Mobile Security
- **April 19th**: Report triaged by Samsung
- **Patches for Open-Source Services Committed to the Tizen Git Repository**
- **May 29th**: Updates released for Gear Sport and S3
- **July 13th**: Severity assigned High

# Conclusion
- **Tizen Security Internals**:
  - Objects and privileges
  - Where privileges are validated: ① application, ② Cynara-aware D-Bus, and ③ service
- **Dan the D-Bus Analyzer**:
  - Uses `AccessDenied` as an oracle to discover privilege violations
- **Privilege Violations**:
  - Wi-Fi, Bluetooth, screen, notification, email takeover
  - Possibility of distribution via official store

# Future Work
- **Can Dan be Applied to**:
  - Other Tizen systems: Smart TV, home appliances, IoT, etc.
  - Other D-Bus systems: Linux-like operating systems, etc.
- **Obfuscation Techniques**:
  - To bypass future mitigations of Galaxy Apps

# Acknowledgments
- **Hyoung-Kee Choi** for guidance
- **Hyoseok Lee** for initial research
- **Betty Bae** for proofreading
- **Gyeonghwan Hong, Shinjo Park, and John Steinbach** for advice