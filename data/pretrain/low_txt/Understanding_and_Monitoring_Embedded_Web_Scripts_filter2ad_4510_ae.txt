### Serving Articles from Diverse Sources

When serving articles from various sources, it is important to note that these sources may not adhere to a uniform coding pattern or content layout. This variability can lead to scripts from domains like `twitter.com` injecting Twitter feeds into containers with differing attributes. Such inconsistencies occasionally result in violations, which can be attributed to either suspicious behavior or major script updates, as discussed in the following sections.

#### 8.3 Suspicious Violations

During our robustness experiment, we observed that on rare occasions, Facebook scripts loaded other ad networks and analytics scripts, triggering a large number of alerts. For instance, on sites such as `staples.com` and `dailymotion.com`, Facebook scripts accessed the same information as `krxd.net` and `enlighten.com`, effectively reading the entire page content. In other cases, such as `goodreads.com` and `hostgator.com`, Facebook scripts read the `action` attribute of all forms on the host page. This behavior was only visible during specific periods, and we observed this access at the start of the experiment and again 18 days later. In extremely rare instances, such as on `tutsplus.com` and `drupal.org`, ScriptInspector detected that Facebook scripts read the value of the user's username and password input fields, which is concerning. We are uncertain whether this behavior is intentional and suspect that site owners may be unaware of it.

Additionally, Google advertising scripts were observed reading the entire page content by calling `documentElement.innerHTML`. This behavior was noted only once, specifically on `nfl.com`. This could be due to a bug in the advertising script or an indication that Google is crawling the page content for future contextual targeting.

#### 8.4 Impact of Major Updates

Throughout our evaluation, we encountered significant changes in three third-party scripts, leading to multiple duplicate alarms across most sites embedding them. Specifically, `facebook.net` scripts began reading properties (e.g., `href`, `rel`) of all link elements on the page starting December 30, 2014, and `doubleverify.com` scripts showed similar behavior changes beginning February 5, 2015. Furthermore, `krxd.net` scripts started injecting an invisible `DIV` element into all pages embedding it from January 26, 2015. We addressed these violations by updating their base policies, as the new behaviors were not site-specific. These cases illustrate that while major updates to third-party scripts may require policy updates, they occur infrequently, and minor adjustments to base policies are often sufficient to cover the new behavior.

Determining whether a page has undergone major changes over the course of our experiment is challenging. However, we did observe this for two sites: `theblaze.com`, which added an advertising slot on their front page, and `inc.com`, which redesigned its general user interface. In both cases, we added an additional advertising container permission to their site-specific policies. While it can be cumbersome for developers to approve new permissions after a major site update, we do not expect policy-breaking changes to occur frequently for most sites. Additionally, it may be beneficial for site administrators to be informed when a change significantly impacts script behavior, necessitating a policy update.

### 9. Related Work

The risks associated with embedded web scripts have been well-documented, and numerous solutions have been proposed. Below, we highlight the most relevant previous work.

#### Client-Side Script Protections

Several client-side protections have been proposed to limit what embedded scripts can do and how they interact with page resources. Browser-Enforced Embedded Policies (BEEP) [15] and Content Security Policy (CSP 1.0, 1.1) [29] use a whitelist approach to restrict the source of dynamically loaded scripts. Our work, in contrast, supports fine-grained access control policies at the level of actions on individual DOM nodes.

MashupOS [27] introduced new attributes and tags for isolation, offering more flexible security policies than the same-origin policy (SOP). OMash [7] introduces private/public member functions for different scripts. ESCUDO [14] applies the concept of OS protection rings to limit script permissions, while JCShadow [24] uses multiple execution contexts to isolate JavaScript execution. TreeHouse [12] leverages HTML5 web workers to isolate execution context and virtualizes the host DOM via a hypervisor-like interface to enforce access control policies. JSand [4] isolates Secure ECMAScript (SES) execution by wrapping resource accesses using the Harmony Proxy API. Adjail [19] places advertising scripts in a shadow page, forwarding displaying content and user events to the main page. Our work focuses on understanding and monitoring script behavior rather than isolating and enforcing security policies in the browser.

#### Script Transformations

Previous works have provided mechanisms for incorporating policies into scripts. ConScript [21] uses aspect-oriented programming to weave generic policy checking advice with API calls of interest. Similarly, WebJail [3] leverages aspect-oriented programming methods to enforce access control policies, specifically for mashup applications. Phung et al. [25] wrap JavaScript built-in functions with mediation code before executing third-party scripts. AD-Safe [8] and Caja [22] mediate access by rewriting third-party scripts. The advantage of these solutions is that no browser modifications are needed to enforce policies. However, rewriting-based solutions may fail to preserve the original program's semantics and can be challenging to implement in a way that cannot be circumvented [20]. We implemented ScriptInspector by modifying a browser instead of using rewriting, providing higher confidence in complete mediation and making it easier to attribute dynamically introduced code. Although our policies are independent of the ScriptInspector implementation, they could be enforced client-side using script rewriting.

#### Policy Generation

Automated policy generation has not been extensively studied compared to access mediation and script isolation mechanisms. ConScript [21] suggested auto-generating policies but did not evaluate this feature. Mash-IF [18] provides a GUI tool for developers to mark sensitive information on the page, using information flow tracking techniques to restrict data leakage. Unlike Mash-IF, PolicyGenerator auto-suggests public elements and demonstrates that the inaccuracies of performing taint tracking on JavaScript can be avoided by using simple yet robust policies focused on resource access. Zhou et al. [33] developed a method for automatically identifying nodes with sensitive content in the DOM but found it difficult to accurately distinguish sensitive nodes for many sites. This paper is the first to demonstrate that automated tools can help generate robust policies for popular third-party scripts.

#### Script Behavior Visualization

Several tools present script behaviors in a user-understandable way. Wang et al. [28] used a browser-based interface to explore relationships between requests and discover vulnerabilities. Popular browser extensions like Ghostery [10] and Abine [1] help users and site administrators understand the third-party services on the current page. A recent Chrome developer tool [9] informs users about the resources a Chrome extension is accessing, albeit at a coarse granularity. The success of these tools supports our hope that Visualizer and PolicyGenerator can be valuable to web developers in understanding scripts and developing policies.

### 10. Deployment

In this section, we discuss potential deployment scenarios. So far, we have focused on the scenario where a site administrator wants to understand the behaviors of embedded scripts to protect clients from privacy compromises by malicious or compromised scripts and ensure the integrity of the site from unintended modifications. The tools we developed can be used in several other ways, as outlined below.

#### Access Visualization

Visualizer can be used by either an interested web developer or a sophisticated user. After examining the accessed resources, a developer can make an informed decision to choose the service provider that most respects site integrity and user privacy. A sophisticated user may use extensions like NoScript [11] to block third-party scripts with suspicious behaviors revealed by Visualizer.

#### Policy Generation Service

A third-party service provider or dedicated security service could develop base policies for commonly-used scripts. A cooperating third-party service provider may make site-specific policy generation part of the implementation process. For example, policies can be inferred by analyzing the implementation code. In a less ideal scenario, the policy generation service could provide a description of how to generate a site-specific policy for the script based on the properties of the embedding site. Site administrators would then use that description to manually generate their own site-specific policies.

#### Access Monitoring

After a policy has been generated, we envision two ways a site administrator can monitor future accesses. An easy-to-adopt approach is to continue running ScriptInspector with the policies on simulated sessions. An alternative approach is to sample real-world traffic using a reverse proxy and forward sampled requests to run in ScriptInspector with user credentials. The second approach provides higher confidence that the integrity and privacy properties are not violated in real sessions but risks interfering with the normal behavior of the site if repeating requests alter server state. For both cases, the site administrator would examine alerts and respond by either changing policies or altering the site to remove misbehaving scripts. More security-focused sites could automate this process to automatically remove scripts that generate alarms.

#### Policy Enforcement

Our prototype ScriptInspector is not intended for end-users to enforce policies at runtime due to its high runtime overhead. Each DOM API access requires at least one stack computation, and node removal APIs require walking the subtree and computing access violations. However, some policies may be enforced by other browser security mechanisms, such as blacklisting scripts from a particular domain using content security policy, which is currently supported by major browsers. We envision a future where a more expressive analog to CSP is adopted by popular browsers and servers can provide headers with restrictive policies for embedded scripts that would be enforced by browsers at runtime. This would offer the best protection, ensuring that the actual behavior of the dynamically-loaded script on the client's browser does not violate the server's script policy.

### Availability

ScriptInspector, Visualizer, and PolicyGenerator, along with all the policies we developed, are available under an open-source license from http://ScriptInspector.org.

### Acknowledgements

This work was partially supported by grants from the National Science Foundation and Air Force Office of Scientific Research, and a gift from Google. The authors thank Ivan Alagenchev, Longze Chen, Haina Li, and Weilin Xu for their valuable contributions to this work.

### References

[1] Abine, Inc. Protect your privacy with DoNotTrackMe from Abine. https://www.abine.com/index.html.

[2] Gunes Acar, Marc Juarez, Nick Nikiforakis, Claudia Diaz, Seda Gürses, Frank Piessens, and Bart Preneel. FPDetective: Dusting the Web for Fingerprinters. In 20th ACM Conference on Computer and Communications Security, 2013.

[21] Leo A. Meyerovich and Benjamin Livshits. ConScript: Specifying and Enforcing Fine-Grained Security Policies for JavaScript in the Browser. In 31st IEEE Symposium on Security and Privacy, 2010.

[22] Mark S. Miller, Mike Samuel, Ben Laurie, Ihab Awad, and Mike Stay. Caja: Safe Active Content. San Francisco, CA, USA, 2007. http://google-caja.googlecode.com/files/caja-spec-2008-01-15.pdf.

[23] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. You Are What You Include: Large-Scale Evaluation of Remote JavaScript Inclusions. In 19th ACM Conference on Computer and Communications Security, 2012.

[24] Kailas Patil, Xinshu Dong, Xiaolei Li, Zhenkai Liang, and Xuxian Jiang. Towards Fine-Grained Access Control in JavaScript Contexts. In 2011 International Conference on Distributed Computing Systems, 2011.

[25] Phu H. Phung, Davis Sands, and Andrey Chudnov. Lightweight Self-Protecting JavaScript. In 4th International Symposium on Information, Computer, and Communications Security, 2009.

[26] Prateek Saxena, Devdatta Akhawe, Steve Hanna, Feng Mao, Stephen McCamant, and Dawn Song. A Symbolic Execution Framework for JavaScript. In 31st IEEE Symposium on Security and Privacy, 2010.

[27] Helen J. Wang, Xiaofeng Fan, Jon Howell, and Collin Jackson. Protection and Communication Abstractions for Web Browsers in MashupOS. In 21st ACM SIGOPS Symposium on Operating Systems Principles, 2007.

[28] Rui Wang, Shuo Chen, and XiaoFeng Wang. Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided Security Study of Commercially Deployed Single-Sign-On Web Services. In 33rd IEEE Symposium on Security and Privacy, 2012.

[29] Wikipedia. Content Security Policy. http://en.wikipedia.org/wiki/Content_Security_Policy.

[30] Wikipedia. Google Analytics Popularity. http://en.wikipedia.org/wiki/Google_Analytics#Popularity.

[31] Lenny Zeltser. Malvertising: The Use of Malicious Ads to Install Malware. http://www.infosecisland.com/blogview/14371.

[32] Yunhui Zheng, Xiangyu Zhang, and Vijay Ganesh. Z3-str: A Z3-based String Solver for Web Application Analysis. In 9th Joint Meeting on Foundations of Software Engineering, 2013.

[33] Yuchen Zhou and David Evans. Protecting Private Web Content From Embedded Scripts. In 16th European Symposium On Research In Computer Security, 2011.

[3] Steven Van Acker, Philippe De Ryck, Lieven Desmet, Frank Piessens, and Wouter Joosen. WebJail: Least-privilege Integration of Third-party Components in Web Mashups. In Proceedings of the 27th Annual Computer Security Applications Conference, 2011.

[4] Pieter Agten, Steven Van Acker, Yoran Brondsema, Phu H. Phung, Lieven Desmet, and Frank Piessens. JSand: Complete Client-Side Sandboxing of Third-party JavaScript without Browser Modifications. In 28th Annual Computer Security Applications Conference, 2012.

[5] Sruthi Bandhakavi, Nandit Tiku, Wyatt Pittman, Samuel T. King, P. Madhusudan, and Marianne Winslett. Vetting Browser Extensions for Security Vulnerabilities with VEX. In 19th USENIX Security Symposium, 2010.

[6] Marco Cova, Christopher Kruegel, and Giovanni Vigna. Detection and Analysis of Drive-by-Download Attacks and Malicious JavaScript Code. In 19th International Conference on World Wide Web, 2010.

[7] Steven Crites, Francis Hsu, and Hao Chen. OMash: Enabling Secure Web Mashups via Object Abstractions. In 15th ACM Conference on Computer and Communications Security, 2008.

[8] Douglas Crockford. ADsafe: Making JavaScript Safe for Advertising. www.adsafe.org, 2007.

[9] Adrienne Porter Felt. See What Your Apps and Extensions Have Been Up To. http://blog.chromium.org/2014/06/see-what-your-apps-extensions-have-been.html.

[10] Ghostery, Inc. Ghostery. http://www.ghostery.com/.

[11] InformAction. NoScript - JavaScript/Java/Flash blocker for a safer Firefox experience. http://noscript.net/.

[12] Lon Ingram and Michael Walfish. TreeHouse: JavaScript sandboxes to help web developers help themselves. In USENIX Annual Technical Conference, 2012.

[13] Dongseok Jang, Ranjit Jhala, Sorin Lerner, and Hovav Shacham. An Empirical Study of Privacy-Violating Information Flows in JavaScript Web Applications. In 17th ACM Conference on Computer and Communications Security, 2010.

[14] Karthick Jayaraman, Wenliang Du, Balamurugan Rajagopalan, and Steve J. Chapin. ESCUDO: A Fine-Grained Protection Model for Web Browsers. In 30th IEEE International Conference on Distributed Computing Systems, 2010.

[15] Trevor Jim, Nikhil Swamy, and Michael Hicks. Defeating Script Injection Attacks with Browser-Enforced Embedded Policies. In 16th International Conference on World Wide Web, 2007.

[16] Eric Lawrence. Fiddler - The Free Web Debugging Proxy by Telerik. http://www.telerik.com/fiddler.

[17] Zhou Li, Sumayah Alrwais, XiaoFeng Wang, and Eihal Alowaisheq. Hunting the Red Fox Online: Understanding and Detection of Mass Redirect-Script Injections. In 35th IEEE Symposium on Security and Privacy, 2014.

[18] Zhou Li, Kehuan Zhang, and XiaoFeng Wang. Mash-IF: Practical Information-Flow Control within Client-Side Mashups. In 2010 IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2010.

[19] Mike Ter Louw, Karthik Thotta Ganesh, and V. N. Venkatakrishnan. AdJail: Practical Enforcement of Confidentiality and Integrity Policies on Web Advertisements. In 19th USENIX Security Symposium, 2010.

[20] Jonas Magazinius, Phu H. Phung, and David Sands. Safe Wrappers and Sane Policies for Self-Protecting JavaScript. In 15th Nordic Conference in Secure IT Systems, 2010.