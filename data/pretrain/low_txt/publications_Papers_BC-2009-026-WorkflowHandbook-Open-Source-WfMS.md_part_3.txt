### Process Definition Application: RUNA WFE

**1. Conformance to WfMC Model**
RUNA WFE is partially conformant to the Workflow Management Coalition (WfMC) model, as it does not interact with other workflow enactment services.

**2. Runtime Perspective**
- **Installation and Testing:** The installation and testing of RUNA WFE took 2 hours and 20 minutes.
- **Documentation:** The provided documentation was comprehensive, facilitating a smooth installation and testing process without significant issues.
- **User Interface:** The web-based administration and client application are user-friendly, contributing to an easy testing experience.
- **System Requirements:** RUNA WFE requires the installation of the Java Development Kit (JDK). It operates on a middleware platform and supports integration with popular database management systems (DBMS). It also provides effective transaction management, including exception handling and rollback during process execution.

**3. Design Time Perspective**
- **Process Definition:** Defining our sample workflow process using RUNA GPD (a process editor for RUNA built on the Eclipse workbench) took 3 hours and 57 minutes.
- **Documentation:** The provided documentation was thorough, offering several workflow process definition examples.
- **Limitations:** RUNA WFE does not support sub-processes, leading to complex and confusing workflow diagrams. Additionally, it requires direct implementation of user forms, which can be challenging for inexperienced users.
- **Organizational Perspective:** The system supports the definition of the organizational perspective.
- **Workflow Language:** RUNA WFE uses jPDL (Java Process Definition Language) for workflow processes.

### WfMOpen

**Overview**
WfMOpen is a J2EE-based implementation of a workflow engine. It is based on a set of Java interfaces that define the API for workflow management. It is suitable for process-based application implementations and business process management tasks. The most recent version, WfMOpen 2.2, was released in May 2008.

**1. Conformance to WfMC Model**
WfMOpen is only partially conformant to the WfMC model because it does not interact with other workflow enactment services.

**2. Runtime Perspective**
- **Installation and Testing:** Installing and testing WfMOpen took 12 hours and 47 minutes.
- **Documentation:** The available documentation was confusing, dispersed, and insufficient, making the installation and testing process complex.
- **User Interface:** The web-based management environment is user-unfriendly.
- **System Requirements:** WfMOpen requires the installation of JDK and JBoss. It operates on a middleware platform (Java RMI, CORBA, and SOAP).
- **Database Integration:** Database integration is limited to the default DBMS of the system.
- **Exception Handling:** The system offers built-in solutions for handling exceptions during process execution.

**3. Design Time Perspective**
- **Process Definition:** Defining our sample workflow process using JPEd took 3 hours and 3 minutes.
- **Documentation:** The lack of documentation for JPEd made the process definition complex.
- **Ease of Use:** After understanding how JPEd works, it becomes practical and easy to use.
- **Organizational Perspective:** WfMOpen supports the organizational perspective.
- **Workflow Language:** WfMOpen uses XPDL with some extensions to define workflow processes.

### YAWL

**Overview**
YAWL (Yet Another Workflow Language) is an open-source workflow solution developed by Wil van der Aalst, Lachlan Aldred, Marlon Dumas, and Arthur ter Hofstede from Queensland University of Technology. The language is based on Petri nets and provides direct support for all workflow patterns, persistence, automated form generation, and workflow administration. The latest version, YAWL 2.2, was released in November 2008.

**1. Conformance to WfMC Model**
YAWL is fully conformant to the WfMC reference model specifications.

**2. Runtime Perspective**
- **Installation and Testing:** Installing and testing YAWL took only 49 minutes.
- **Documentation:** The provided documentation is comprehensive, allowing for a straightforward installation process.
- **User Interface:** The web-based administration and client application are user-friendly and easy to use.
- **System Requirements:** YAWL requires the installation of the Java Runtime Environment (JRE) and Apache Tomcat.
- **Middleware Platform:** YAWL is compatible with SOAP.
- **Database Integration:** Database integration is limited to PostgreSQL or Hypersonic.
- **Exception Handling:** YAWL allows for exception handling during process execution.

**3. Design Time Perspective**
- **Process Definition:** Using the graphical editor, defining our sample workflow process took 1 hour and 55 minutes.
- **Documentation:** The provided documentation for the editor is comprehensive.
- **Ease of Use:** The process definition editor uses a small set of elements and a "drag and drop" interface, simplifying the process design.
- **Limitations:** YAWL does not support the organizational perspective, making it difficult to associate participants or roles with tasks.

### Related Work

- **Aalst et al. [16]**: Compares the functionality of 15 workflow languages based on workflow patterns.
- **Murray [21]**: Analyzes the implementation of a commercially available healthcare workflow system in two hospital settings, including parameters similar to our organizational perspective and ease of use.
- **Stoilova and Stoilov [22]**: Proposes an evaluation template for workflow management systems, including categories such as functional and usability, which align with our parameters.

### Relevance and Value

Selecting an appropriate workflow system for managing business processes is a critical and complex decision. Open-source solutions offer advantages like source code access and customization, making them appealing to IS and IT decision-makers. This chapter evaluates and compares popular open-source WfMS based on the WfMC reference model and runtime and design time perspectives, providing valuable insights for industry decision-makers.

### Acknowledgements

This work was supported by the Foundation for Science and Technology (FCT), POCTI-219, and FEDER. We also acknowledge the support of SAP Research, CEC Dresden, Germany.

### References

1. TDG, Open Source Software: Case Studies Examining Its Use. 2003, The Dravis Group.
2. Peeling, N. and J. Satchell, Analysis of the Impact of Open Source Software. 2001, QinetiQ.
3. Aalst, W.M.P.v.d. and K.v. Hee, Workflow Management: Models, Methods, and Systems. 1st edition ed. 2002: MIT Press Cambridge, MA, USA.
4. EWLS, Free Software / Open Source: Information Society Opportunities for Europe? 2000, European Working group on Libre Software.
5. Kenwood, C.A., A Business Case Study of Open Source Software. 2001, The MITRE Corporation.
6. Hollingsworth, D., The Workflow Reference Model. 1995, Workflow Management Coalition.
7. BONITA. BONITA: Workflow Cooperative System. 2007 [cited 21. May 2007]; Available from: http://bonita.objectweb.org.
8. Shark. Enhydra Shark: Java Open Source workflow engine based on XPDL. 2007 [cited 22.05.2007]; Available from: http://www.enhydra.org/workflow/shark/index.html.
9. jawflow. jawflow: Java Workflow Manager. 2007 [cited 22.05.2007]; Available from: https://www-304.ibm.com/jct03004c/servers/solutions/finder/solution/overview.jsp?solution_id=soq74085540080014002%7C30.
10. jBPM. JBoss jBPM. 2007 [cited 22.05.2007]; Available from: http://www.jbpm.org/.
11. JFolder. JFolder - Application development and deployment platform. 2006 [cited 22.05.2007]; 1.1 Alpha: [Available from: http://www.powerfolder.org.
12. JOpera. JOpera Project: Process Support for more than Web Services. 2004 [cited 22.05.2007]; Available from: http://www.iks.ethz.ch/jopera.
13. OpenWFE. OpenWFE - open source workflow engine. 2007 [cited 22.05.2007]; Available from: http://www.openwfe.org/.
14. Runa. RUNA WFE. 2007 [cited 22.05.2007]; Available from: http://runawfe.sourceforge.net/.
15. WfMOpen. WfMOpen. 2005 [cited 22.05.2007]; Available from: http://wfmopen.sourceforge.net.
16. Aalst, W.M.P.v.d., et al., Workflow Patterns. Distributed and Parallel Databases, 2003. 14(1): p. 5-51.
17. YAWL. YAWL: Yet Another Workflow Language. 2007 [cited 22.05.2007]; Available from: http://yawlfoundation.org/product/index.php.
18. Fitzgerald, B. and T. Kenny. Open Source Software can Improve the Health of the Bank Balance - The Beaumont. in 24th International Conference on Information Systems (ICIS). 2003. Seattle.
19. Scacchi, W. OpenEC/B: electronic commerce and free/open source software development. in The 5th Workshop on Open Source Software Engineering, part of The 27th International Conference on Software Engineering (ICSE 2005). 2005. St. Louis, Missouri: ACM Press, New York, NY, USA.
20. Gurbani, V.K., A. Garvert, and J.D. Herbsleb, A case study of open source tools and practices in a commercial setting. SIGSOFT Softw. Eng. Notes, 2005. 30(4): p. 1-6.
21. Murray, M. Strategies for the Successful Implementation of Workflow Systems within Healthcare: A Cross Case Comparison. in 36th Annual Hawaii International Conference on System Sciences (HICSS'03). 2003: IEEE Computer Society Washington, DC, USA.
22. Stoilova, K. and T. Stoilo. Comparison of Workflow Software Products. in International Conference on Computer Systems and Technologies - CompSysTech'2006. 2006. Veliko Tarnovo, Bulgaria.

### Index

- Bonita, 335
- Enhydra Shark, 335
- Framework, 333
- JawFlow, 335
- JBoss jBPM, 335
- JFolder, 335
- JOpera, 335
- Open Source Software, 333
- Open Source Workflow Systems, 335
- OpenWFE, 335
- RUNA WFE, 335
- WfMC Reference Model, 334
- WfMOpen, 335
- Workflow Management Systems, 333
- YAWL, 335