### Secret Data Leakage in App K

**Figure 7: Alice Reads Bob’s Information in App K.**

In addition to users' private data, more sensitive secret data can also be leaked due to the vulnerabilities discovered by AuthScope. For example, app K is a second-hand goods trading application on Google Play, with between 500,000 and 1,000,000 downloads. This app allows any registered user to buy or sell second-hand goods. Unfortunately, we found that an authorization vulnerability can lead to the leakage of users' secret data.

After authentication, the server pushes detailed information about the user based on their email address. By substituting Alice's email with Bob's, AuthScope successfully retrieved Bob's information, part of which is shown in Figure 7. The response message includes several private records such as:
- Registration date (line 2)
- Modification date (line 3)
- User name (line 4)
- Phone number (line 10)
- Home address (line 14)
- Geolocation (lines 17 and 18, which were null in our test case)
- Last login time (line 22)

Among these leaked data, the most dangerous record is Bob’s hashed password (7c4a8d09ca3762af61e59520943dc26494f8941b). Under no circumstances should the app provide a user's password, even in hashed form. Further investigation revealed that this hash was generated using SHA-1, which can be easily cracked by many online services (e.g., https://crackstation.net/, which can return the plaintext of this password in less than a second).

With this authorization vulnerability in app K's server, an attacker can easily obtain the hashed password and further crack the user’s password if they have the victim’s email address. Given the recent large-scale data breaches, it is likely that attackers can trivially probe the victim’s email in K’s server. Additionally, when opening a seller’s page, the seller's email address is embedded in the metadata. Therefore, an adversary can crawl all the products in this service, collect all sellers' emails, and subsequently obtain their hashed passwords. Considering that many online users reuse their passwords, such an attack can cause serious damage to numerous users.

### Discussions

#### Limitations and Future Work

While AuthScope has made significant progress in automatically discovering authorization vulnerabilities in online services, it still has several limitations:

1. **False Negatives**: AuthScope currently focuses on apps that use Facebook login to bypass the authentication step. However, not all apps use social logins. In our experiment, we filtered out over 25,000 mobile apps that do not use Facebook logins. Handling other social login schemes (e.g., Google login) or generally automating the login process for remote services remains an unsolved problem. This may require addressing challenges such as automated service sign-up, more intelligent Android UI recognition, and test case generation.

2. **Unauthorized Write Attacks**: AuthScope primarily discovers authorization vulnerabilities that lead to information leakage and account hijacking attacks, which are unauthorized read operations. However, there are other types of attacks, such as unauthorized write operations, where a user should not be able to modify items belonging to other users. Currently, AuthScope cannot automatically infer unauthorized write vulnerabilities.

3. **Platform and Protocol Limitations**: Vulnerable authorizations are a general problem in online services, not limited to Android app server-side implementations. Our current prototype performs dynamic Android app analysis and protocol reverse engineering to identify vulnerabilities. We believe our methodology can be applied to other platforms like iOS and Windows. Additionally, AuthScope currently handles only HTTP/HTTPS protocols. Future work will include extending AuthScope to analyze vulnerabilities in other platforms and protocols, as well as addressing the first two limitations.

#### Practicality of the Attack and Countermeasures

Using predictable numbers without additional authorization checks to allow access to a user’s private resources is fundamentally flawed. Service developers may feel secure using email addresses or sophisticated identifiers like Facebook IDs for authorization. However, recent massive data leaks have exposed a large volume of Internet users' email addresses, making them public information. Similarly, Facebook IDs can be crawled and considered public. Therefore, the attacks we discovered are quite practical.

To mitigate these vulnerabilities, we urge service developers to follow best practices, such as:
- Using random tokens for each session
- Enforcing security checks with the token and specific user
- Never assuming that a client is always trusted

#### Ethics and Responsible Disclosure

During the development of AuthScope for vulnerability discovery, we adhered to the highest ethical standards:
- We only tested the services with two legitimate users (Alice and Bob) and never stole any other user’s private information.
- We did not send a large volume of traffic to any remote service, ensuring that all traffic was generated at the speed of normal user interactions.
- We made responsible disclosures upon discovering vulnerabilities, immediately notifying developers based on the contact information provided on Google Play. Some developers contacted us to discuss and patch their vulnerabilities. For apps whose vulnerabilities remain unfixed, we masked their names with '***' in Table 3. We will continue to assist in fixing these vulnerabilities.

### Related Work

#### Vulnerability Discovery in Online Services

Developing vulnerability-free software is challenging, and many online services contain various vulnerabilities, including SQL injection, cross-site scripting, cross-site forgery, broken authentication, and application logic vulnerabilities. Significant efforts have been made to identify these vulnerabilities through white-box analysis of server code or black-box analysis of network traffic.

There are also efforts focused on access control issues in online services, particularly on authentication-related problems such as single-sign-on, OAuth, authentication vulnerability scanning, and password brute-force attacks. Compared to these works, AuthScope is among the first to investigate post-authentication issues in online services and can automatically discover vulnerable authorizations in mobile apps enabled with social login.

#### Dynamic Analysis of Mobile Apps

AuthScope leverages dynamic analysis of Android apps to generate server request messages. There has been extensive research in dynamic analysis of Android apps, including tools like Monkey, Robotium, AppsPlayground, and DynoDroid. Recent efforts have also explored symbolic execution for more systematic dynamic analysis.

Compared to these works, AuthScope is partially inspired by AppsPlayground and extends it to support more accurate and deeper UI element exploration. While symbolic execution could improve coverage, we found that identifying vulnerable authorizations does not necessarily require a large volume of request messages.

#### Protocol Reverse Engineering

AuthScope needs to reverse engineer the application protocol fields of interest and perform field substitution to identify security vulnerabilities. Over the past decade, significant efforts have been made to analyze both network messages and instruction traces to discover protocol formats and use them for security applications. AuthScope is particularly inspired by the Protocol Informatics project and uses a customized Needleman-Wunsch algorithm to align and diff protocol messages, inferring only the fields of interest.

### Conclusion

We have presented the design, implementation, and evaluation of AuthScope, a tool that can automatically execute a mobile app, generate post-authentication messages, and pinpoint vulnerable access control implementations, particularly vulnerable authorizations, on the server side. We tested AuthScope with 4,838 popular mobile apps from Google Play and identified 597 vulnerable authorization implementations in 306 mobile apps. These are serious security vulnerabilities, easy to exploit, and can cause severe damage to end users, such as personal information leakage and account hijacking. We have made responsible disclosures to all vulnerable service providers, and many have acknowledged and patched (or started to patch) their vulnerabilities. Given the capability of such automated analysis, we hope to raise awareness of vulnerable authorization implementation issues in online services and encourage the remaining vulnerable service providers to patch their services promptly.

### Acknowledgment

We would like to thank the anonymous reviewers for their valuable feedback. This research was supported in part by AFOSR under grants FA9550-14-1-0119 and FA9550-14-1-0173, and NSF awards 1453011 and 1516425. Any opinions, findings, conclusions, or recommendations expressed are those of the authors and not necessarily of the AFOSR and NSF.

### References

[1] “Facebook app-specific IDs,” https://developers.facebook.com/docs/graph-api/reference/user/.

[2] Hypertext Transfer Protocol. https://www.w3.org/Protocols/rfc2616/rfc2616.html. Last accessed in May 2017.

[3] “Plain text offenders,” last accessed in May 2017.

[4] “Robotium,” https://code.google.com/p/robotium/, last accessed in May 2017.

[5] “Using Burp Proxy,” https://portswigger.net/burp/help/proxy_using.html, last accessed in May 2017.

[6] “Xposed Module Repository,” http://repo.xposed.info/.

[7] “UI/Application Exerciser Monkey,” https://developer.android.com/tools/help/monkey.html, 2017.

[8] S. Anand, M. Naik, M. J. Harrold, and H. Yang, “Automated concolic testing of smartphone apps,” in Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, ser. FSE ’12. New York, NY, USA: ACM, 2012, pp. 59:1–59:11.

[9] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps,” in Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI ’14. New York, NY, USA: ACM, 2014, pp. 259–269.

[10] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and J. S. Dong, “AuthScan: Automatic extraction of web authentication protocols from implementations.” in NDSS, 2013.

[11] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request forgery,” in Proceedings of the 15th ACM conference on Computer and Communications Security. ACM, 2008, pp. 75–88.

[12] E. Bauman, Y. Lu, and Z. Lin, “Half a century of practice: Who is still storing plaintext passwords?” in Proceedings of the 11th International Conference on Information Security Practice and Experience, Beijing, China, May 2015.

[13] M. Beddoe, “The Protocol Informatics Project,” 2017, https://github.com/wolever/Protocol-Informatics.

[14] J. Caballero and D. Song, “Polyglot: Automatic extraction of protocol format using dynamic binary analysis,” in Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS’07), Alexandria, Virginia, USA, 2007, pp. 317–329.

[15] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, “OAuth demystified for mobile application developers,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 892–903.

[16] A. Continella, Y. Fratantonio, M. Lindorfer, A. Puccetti, A. Zand, C. Kruegel, and G. Vigna, “Obfuscation-resilient privacy leak detection for mobile apps through differential analysis,” in Proceedings of the ISOC Network and Distributed System Security Symposium (NDSS), 2017, pp. 1–16.

[17] W. Cui, J. Kannan, and H. J. Wang, “Discoverer: Automatic protocol reverse engineering from network traces,” in Proceedings of the 16th USENIX Security Symposium (Security’07), Boston, MA, August 2007.

[18] W. Cui, M. Peinado, K. Chen, H. J. Wang, and L. Irun-Briz, “Tupni: Automatic reverse engineering of input formats,” in Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS’08), Alexandria, Virginia, USA, October 2008, pp. 391–402.

[19] M. Dalton, C. Kozyrakis, and N. Zeldovich, “Nemesis: Preventing authentication & access control vulnerabilities in web applications.” in USENIX Security Symposium, 2009, pp. 267–282.

[20] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and L. Stewart, “HTTP Authentication: Basic and Digest Access Authentication,” Tech. Rep., 1999.

[21] W. G. Halfond, J. Viegas, and A. Orso, “A classification of SQL-injection attacks and countermeasures,” in Proceedings of the IEEE International Symposium on Secure Software Engineering, vol. 1. IEEE, 2006, pp. 13–15.

[22] Z. Lin, X. Jiang, D. Xu, and X. Zhang, “Automatic protocol format reverse engineering through context-aware monitored execution,” in Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08), San Diego, CA, February 2008.

[23] Z. Lin and X. Zhang, “Deriving input syntactic structure from execution,” in Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE’08), Atlanta, GA, USA, November 2008.

[24] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: Statically vetting Android apps for component hijacking vulnerabilities,” in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 229–240.

[25] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and G. M. Voelker, “Unexpected means of protocol inference,” in Proceedings of the 6th ACM SIGCOMM on Internet Measurement (IMC’06). Rio de Janeiro, Brazil: ACM Press, 2006, pp. 313–326.

[26] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation system for Android apps,” in Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, 2013, pp. 224–234.

[27] A. Memon, I. Banerjee, and A. Nagarajan, “GUI ripping: Reverse engineering of graphical user interfaces for testing,” in Proceedings of the 10th Working Conference on Reverse Engineering, ser. WCRE ’03. Washington, DC, USA: IEEE Computer Society, 2003, pp. 260–.

[28] P. Milani Compareti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex: Protocol Specification Extraction,” in IEEE Symposium on Security & Privacy, Oakland, CA, 2009, pp. 110–125.

[29] N. Mirzaei, S. Malek, C. S. Păsăreanu, N. Esfahani, and R. Mahmood, “Testing Android apps through symbolic execution,” ACM SIGSOFT Software Engineering Notes, vol. 37, no. 6, pp. 1–5, 2012.

[30] S. B. Needleman and C. D. Wunsch, “A general method applicable to the search for similarities in the amino acid sequence of two proteins,” Journal of Molecular Biology, vol. 48, no. 3, pp. 443–453, 1970.

[31] B. Nguyen, B. Robbins, I. Banerjee, and A. Memon, “GUITAR: An innovative tool for automated testing of GUI-driven software,” Automated Software Engineering, pp. 1–41, 2013.

[32] E. I. Organick, The Multics System: An Examination of Its Structure. MIT Press, 1972.

[33] G. Pellegrino and D. Balzaroti, “Toward black-box detection of logic flaws in web applications.” in NDSS, 2014.

[34] V. Rastogi, Y. Chen, and W. Enck, “AppsPlayground: Automatic Security Analysis of Smartphone Applications,” in Third ACM Conference on Data and Application Security and Privacy, 2013.

[35] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “SMV-Hunter: Large scale, automated detection of SSL/TLS man-in-the-middle vulnerabilities in Android apps,” in Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS’14), San Diego, CA, February 2014.

[36] S.-T. Sun and K. Beznosov, “The devil is in the (implementation) details: An empirical analysis of OAuth SSO systems,” in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 378–390.

[37] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna, “Cross-site scripting prevention with dynamic data tainting and static analysis.” in NDSS, vol. 2007, 2007, p. 12.

[38] R. Wang, S. Chen, and X. Wang, “Signing me onto your accounts through Facebook and Google: A traffic-guided security study of commercially deployed single-sign-on web services,” in Security and Privacy (SP), 2012 IEEE Symposium on. IEEE, 2012, pp. 365–379.

[39] R. Wang, S. Chen, X. Wang, and S. Qadeer, “How to shop for free online–security analysis of cashier-as-a-service based web stores,” in Security and Privacy (SP), 2011 IEEE Symposium on. IEEE, 2011, pp. 465–480.

[40] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich, “Explicating SDKs: Uncovering assumptions underlying secure authentication and authorization.” in USENIX Security, vol. 13, 2013.

[41] G. Wondracek, P. Milani, C. Kruegel, and E. Kirda, “Automatic network protocol analysis,” in Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS’08), San Diego, CA, February 2008.

[42] M. Y. Wong and D. Lie, “IntelliDroid: A targeted input generator for the dynamic analysis of Android malware,” in Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS’16), San Diego, CA, February 2016.

[43] L. Xing, Y. Chen, X. Wang, and S. Chen, “InterGuard: Toward automatic protection of third-party web service integrations.” in NDSS, 2013.

[44] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang, “Upgrading your Android, elevating my malware: Privilege escalation through mobile OS updating,” in Proceedings of the 2014 IEEE Symposium on Security and Privacy, ser. SP ’14. Washington, DC, USA: IEEE Computer Society, 2014, pp. 393–408.

[45] Y. Zhou and D. Evans, “SSOscan: Automated testing of web applications for single sign-on vulnerabilities.” in USENIX Security, 2014, pp. 495–510.

[46] C. Zuo and Z. Lin, “Exposing server URLs of mobile apps with selective symbolic execution,” in Proceedings of the 26th World Wide Web Conference, Perth, Australia, April 2017.

[47] C. Zuo, W. Wang, R. Wang, and Z. Lin, “Automatic forgery of cryptographically consistent messages to identify security vulnerabilities in mobile services,” in Proceedings of the 21st Annual Network and Distributed System Security Symposium (NDSS’16), San Diego, CA, February 2016.