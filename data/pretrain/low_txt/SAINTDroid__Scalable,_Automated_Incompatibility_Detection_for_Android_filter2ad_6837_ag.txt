### Introduction

GAINDroid, a tool designed to detect potential mismatches in Android applications, has been compared with state-of-the-art approaches such as CiD, Cider, and Lint. Our results indicate that GAINDroid is more effective, detecting a higher number of potential mismatches while generating fewer false positives. Metrics including precision, recall, and F-Measure support our claim that GAINDroid outperforms the other tools. Additionally, GAINDroid can perform analysis at least three times faster than CiD and Lint.

### Case Study

To further validate GAINDroid, we conducted a case study using 3,571 real-world Android apps downloaded from Androzoo [32] and F-Droid [9]. The analysis revealed that 41.19% of the downloaded apps contain at least one potential API invocation mismatch. Furthermore, 20.05% of the analyzed apps are at risk of crashing due to API callback mismatches. Regarding permission mismatches, 12.34% of the apps suffer from permission request mismatches, while 68.68% may crash due to permission revocation mismatches. These findings highlight the prevalence of such issues in modern Android applications and demonstrate the utility of GAINDroid for large-scale analysis.

### Future Work

#### Extending Comparisons
Our immediate plan is to contact Huang et al. [46] and He et al. [44] to request access to Cider and IctApiFinder. This will enable us to conduct more extensive experiments to compare their effectiveness and efficiency with GAINDroid. We also aim to evaluate whether these tools can handle misuse of the Android permission mechanism.

#### Developer Engagement
We intend to reach out to the authors of apps that showed mismatch problems. Given the rapid evolution of the Android framework, developers often struggle to keep their apps up to date with new features and APIs, leading to compatibility issues.

#### Enhancing GAINDroid
To increase the number of true positives detected by GAINDroid, we plan to implement several additional features:

1. **Anonymous Classes Analysis:**
   As described in the Results section, GAINDroid currently cannot identify API methods within anonymous classes in apps like MaterialFBook, DuckDuckGo, and Padland. We plan to develop a module that can recognize and analyze anonymous classes, thereby identifying previously undetected API invocations and callbacks.

2. **Inaccessible APIs Detection:**
   It is known that developers sometimes use inaccessible APIs, such as internal and hidden APIs [50], which are often classified as unstable or subject to future changes. Starting from Android level 28, Google [20] will implement more restrictions on the use of these APIs. To address this, we aim to include the capability to identify internal and hidden methods within an Android app, warning developers about potential runtime crashes due to system updates.

3. **Behavioral Changes in API Methods:**
   We are interested in identifying behavioral changes in API methods across different levels of Android APIs. Although methods may retain the same signature, their implementations can change to improve performance and security. We plan to create a repository containing all changes to a method, and whenever a developer uses an API, GAINDroid will alert them to any behavioral changes. For example, `WifiInfo.getMacAddress()` and `BluetoothAdapter.getAddress()` now return a default constant value starting from Android level 23, which has led to many online discussions [11].

4. **API Deprecation Guidance:**
   Another idea is to provide guidance to users to replace outdated or deprecated APIs with more updated ones. For instance, GAINDroid could recommend replacing the Apache HTTP Client class with the `HttpURLConnection` class.

### Conclusion

The results of our case study and the planned enhancements for GAINDroid underscore its potential to significantly improve the reliability and performance of Android applications. By addressing the identified gaps and expanding our comparisons, we aim to make GAINDroid an even more robust tool for developers.

### Bibliography

[1] Adaway. https://github.com/AdAway/AdAway/releases/tag/v3.0.2". 2.3, 5.2  
[2] Afwall. https://github.com/ukanth/afwall/tree/71e6c66". 4.1  
[3] Android lint. http://tools.android.com/tips/lint. 5.1, 7.1, 7  
[4] Android market share. https://www.statista.com/statistics/266136/global-market-share-held-by-smartphone-operating-systems/. 1  
[5] Android runtime permissions. https://source.android.com/devices/tech/conﬁg/runtime perms. 2.3, 2.3  
[6] Android versions. https://en.wikipedia.org/wiki/Android version history. 2.1  
[7] Bazaar repository. https://cafebazaar.ir. 6  
[8] Duck duck go. https://github.com/duckduckgo/Android/tree/2d7d379". 4.1  
[9] F-droid repository. https://f-droid.org/. 4.1, 5.2, 6, 8  
[10] Foss browser. e08f5b6". 4.1 https://github.com/scoute-dich/browser/commit/  
[11] Getting mac address in android 23. http://stackoverflow.com/questions/33159224/getting-mac-address-in-android-6-0. 8  
[12] Google play apps repository. https://www.statista.com/statistics/266210/number-of-available-applications-in-the-google-play-store/. 1  
[13] Kolab notes. https://github.com/konradrenner/kolabnotes-android/commit/14ba3c3". 4.1, 5.2  
[14] Materialfbook. 2cb3c61". 4.1 https://github.com/ZeeRooo/MaterialFBook/tree/  
[15] Meet google play’s target api level requirement. https://developer.android.com/distribute/best-practices/develop/target-sdk". 6  
[16] Network monitor. https://github.com/caarmen/network-monitor/tree/0e17b95". 4.1  
[17] Nyaa pantsu. https://github.com/NyaaPantsu/NyaaPantsu-android-app/tree/53ad9a8". 4.1  
[18] Padland. https://github.com/mikifus/padland/commit/38f7e66". 4.1  
[19] Permissions in android. https://developer.android.com/guide/topics/permissions/overview#permission-groups. 1, 2.3  
[20] Restrictions on non-sdk interfaces. https://developer.android.com/about/versions/pie/restrictions-non-sdk-interfaces. 6, 8  
[21] sdkmanager tool. https://developer.android.com/studio/command-line/sdkmanager. 3  
[22] Simple solitaire. https://github.com/TobiasBielefeld/Simple-Solitaire/commit/1483ee". 2.2.2, 4.1  
[23] Survival manual. 13b1f43". 4.1 https://github.com/ligi/SurvivalManual/tree/  
[24] Uber rides. https://github.com/uber/rides-android-sdk/tree/4d77c38". 4.1  
[25] Using sdk in android apps. https://developer.android.com/guide/topics/manifest/uses-sdk-element. 2.1, 2.2  
[26] Android - aosp. https://github.com/aosp-mirror/, 2018. 5.3  
[27] Android platform frameworks base. https://github.com/aosp-mirror/platform_frameworks_base/releases, August 2018. 1  
[28] Apktool. https://ibotpeaches.github.io/Apktool/, 2018. 4  
[29] FOSDEM Companion. https://github.com/cbeyls/fosdem-companion-android/releases/tag/1.5.0, 2018. 5.2  
[30] Offline Calendar. https://github.com/PrivacyApps/offline-calendar/releases/tag/v1.8, 2018. 5.2  
[31] Yousra Aafer, Xiao Zhang, and Wenliang Du. Harvesting inconsistent security configurations in custom android roms via differential analysis. In USENIX Security Symposium, pages 1153–1168, 2016. 7  
[32] Kevin Allix, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. Androzoo: Collecting millions of android apps for the research community. In Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working Conference on, pages 468–471. IEEE, 2016. 4.1, 5.2, 8  
[33] AndroidCentral. System Update, Phone Died During 2013. http://forums.androidcentral.com/htc-desire-c/265098-phone-died-during-system-update.html. 1  
[34] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. Pscout: analyzing the android permission specification. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 217–228. ACM, 2012. 3.3  
[35] Gabriele Bavota, Mario Linares-Vasquez, Carlos Eduardo Bernal-Cardenas, Massimiliano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. The impact of API change-and fault-proneness on the user ratings of android apps. IEEE Transactions on Software Engineering, 41(4):384–407, 2015. 7  
[36] A. Bera. How To Fix Apps Crashing After 4.4 Kit-Kat Update Problem On Nexus 7, 2016. http://www.technobezz.com/fix-apps-crashing-4-4-kitkat-update-problem-nexus-7/. 1  
[37] Marcus Bueschleb. PassAndroid. https://github.com/ligi/PassAndroid/tree/fcd9ba", 2018. 4.1  
[38] Dave Burke. Introducing Android 9 pie. https://android-developers.googleblog.com/2018/08/introducing-android-9-pie.html, 2018. 2.1  
[39] Zach Epstein. Did Apps Just Start Crashing Constantly on Your Android Phone?, 2015. http://bgr.com/2015/04/28/android-tips-tricks-fix-crashing-apps/. 1  
[40] Mattia Fazzini and Alessandro Orso. Automated cross-platform inconsistency detection for mobile apps. In Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering, ASE 2017, pages 308–318, Piscataway, NJ, USA, 2017. IEEE Press. 7  
[41] Aurélien Géron. Hands-on machine learning with Scikit-Learn and TensorFlow: concepts, tools, and techniques to build intelligent systems. “O’Reilly Media, Inc.”, 2017. 5  
[42] Cyril Goutte and Eric Gaussier. A probabilistic interpretation of precision, recall and f-score, with implication for evaluation. In European Conference on Information Retrieval, pages 345–359. Springer, 2005. 5  
[43] Dan Han, Chenlei Zhang, Xiaochao Fan, Abram Hindle, Kenny Wong, and Eleni Stroulia. Understanding android fragmentation with topic analysis of vendor-specific bugs. In Reverse Engineering (WCRE), 2012 19th Working Conference on, pages 83–92. IEEE, 2012. 7  
[44] Dongjie He, Lian Li, Lei Wang, Hengjie Zheng, Guangwei Li, and Jingling Xue. Understanding and detecting evolution-induced compatibility issues in android apps. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pages 167–177. ACM, 2018. 1, 4.2.1, 7.1, 8  
[45] Ville-Veikko Helppi. What Every App Developer Should Know About Android. http://www.smashingmagazine.com/2014/10/02/what-every-app-developer-should-know-about-android/, October 2014. 1  
[46] Huaxun Huang, Lili Wei, Yepang Liu, and Shing-Chi Cheung. Understanding and detecting callback compatibility issues for android applications. 2018. 1, 4.1, 4.1, 4.2.1, 4.2.2, 4.3, 5.1, 7.1, 7, 8  
[47] Apple breaks new iphones with terrible software update. http://www.slate.com/blogs/future_tense/2014/09/24/apple_ios_8_0_1_software_update_major_bugs_hit_iphone_6_6_plus.html, 2014. 1  
[48] Maxime Lamothe and Weiyi Shang. Exploring the use of automated API migrating techniques in practice: An experience report on android. 2018. 7  
[49] Huoran Li, Xuan Lu, Xuanzhe Liu, Tao Xie, Kaigui Bian, Felix Xiaozhu Lin, Qiaozhu Mei, and Feng Feng. Characterizing smartphone usage patterns from millions of android users. In Proceedings of the 2015 Internet Measurement Conference, pages 459–472. ACM, 2015. 7  
[50] Li Li, Tegawendé F Bissyandé, Yves Le Traon, and Jacques Klein. Accessing inaccessible android APIs: An empirical study. In Software Maintenance and Evolution (ICSME), 2016 IEEE International Conference on, pages 411–422. IEEE, 2016. 8  
[51] Li Li, Tegawendé F. Bissyandé, Haoyu Wang, and Jacques Klein. CID: Automating the detection of API-related compatibility issues in android apps. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, ISSTA 2018, pages 153–163, New York, NY, USA, 2018. ACM. 1, 4.1, 4.2.2, 4.3, 5.1, 5.1, 7.1, 7  
[52] Li Li, Jun Gao, Tegawendé F Bissyandé, Lei Ma, Xin Xia, and Jacques Klein. Characterising deprecated android APIs. In Proceedings of the 15th International Conference on Mining Software Repositories, pages 254–264. ACM, 2018. 7  
[53] Mario Linares-Vásquez, Gabriele Bavota, Carlos Bernal-Cárdenas, Massimiliano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. API change and fault proneness: a threat to the success of android apps. In Proceedings of the 2013 9th joint meeting on foundations of software engineering, pages 477–487. ACM, 2013. 7  
[54] Mario Linares-Vásquez, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. How do API changes trigger stack overflow discussions? a study on the android SDK. In proceedings of the 22nd International Conference on Program Comprehension, pages 83–94. ACM, 2014. 1  
[55] Yepang Liu, Chang Xu, and Shing-Chi Cheung. Characterizing and detecting performance bugs for smartphone applications. In Proceedings of the 36th International Conference on Software Engineering, pages 1013–1024. ACM, 2014. 7  
[56] Mehran Mahmoudi and Sarah Nadi. The android update problem: an empirical study. In Proceedings of the 15th International Conference on Mining Software Repositories, pages 220–230. ACM, 2018. 7  
[57] Tyler McDonnell, Baishakhi Ray, and Miryung Kim. An empirical study of API stability and adoption in the android ecosystem. In Software Maintenance (ICSM), 2013 29th IEEE International Conference on, pages 70–79. IEEE, 2013. 7  
[58] Michael Kassner. Beware of danger lurking in Android phone updates. http://www.techrepublic.com/article/beware-of-danger-lurking-in-android-phone-updates/, April 2014. 2.1  
[59] Kevin Moran, Mario Linares-Vásquez, Carlos Bernal-Cárdenas, Christopher Vendome, and Denys Poshyvanyk. Crashscope: A practical tool for automated testing of android applications. In Software Engineering Companion (ICSE-C), 2017 IEEE/ACM 39th International Conference on, pages 15–18. IEEE, 2017. 7  
[60] Suhaib Mujahid. Detecting wearable app permission mismatches: a case study on android wear. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering, pages 1065–1067. ACM, 2017. 1  
[61] Suhaib Mujahid and Emad Shihab Rabe Abdalkareem. Studying permission related issues in android wearable apps. 1  
[62] Patrick Mutchler, Yeganeh Safaei, Adam Doupé, and John Mitchell. Target fragmentation in android apps. In 2016 IEEE Security and Privacy Workshops (SPW), pages 204–213. IEEE, 2016. 7  
[63] Abhinav Pathak, Y Charlie Hu, and Ming Zhang. Bootstrapping energy debugging on smartphones: a first look at energy bugs in mobile devices. In Proceedings of the 10th ACM Workshop on Hot Topics in Networks, page 5. ACM, 2011. 7  
[64] Mehul Rajput. Tips For Solving Your Android App Crashing Issues, 2015. http://tech.co/tips-solving-android-app-crashing-issues-2015-10. 1  
[65] Mallisa Tolentino. Will These Bugs be Fixed in Android 5.1.1 Update. http://siliconangle.com/blog/2015/04/24/will-these-bugs-be-fixed-in-android-5-1-1-update/, April 2015. 1  
[66] Yutaka Tsutano, Shakthi Bachala, Witawas Srisa-An, Gregg Rothermel, and Jackson Dinh. An efficient, robust, and scalable approach for analyzing interacting android apps. In Proceedings of the 39th International Conference on Software Engineering, pages 324–334. IEEE Press, 2017. 3.1, 4  
[67] Lili Wei, Yepang Liu, and Shing-Chi Cheung. Taming android fragmentation: Characterizing and detecting compatibility issues for android apps. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, pages 226–237. ACM, 2016. 1, 7, 7  
[68] Daoyuan Wu, Ximing Liu, Jiayun Xu, David Lo, and Debin Gao. Measuring the declared SDK versions and their consistency with API calls in android apps. In International Conference on Wireless Algorithms, Systems, and Applications, pages 678–690. Springer, 2017. 1, 3.4, 7  
[69] YouTube API change: some older devices can’t update to new app. http://hexus.net/ce/news/audio-visual/82570-youtube-api-change-older-devices-update-new-app/, 2014. 1  
[70] Xiaoyong Zhou, Yeonjoon Lee, Nan Zhang, Muhammad Naveed, and XiaoFeng Wang. The peril of fragmentation: Security hazards in android device driver customizations. In Security and Privacy (SP), 2014 IEEE Symposium on, pages 409–423. IEEE, 2014. 7