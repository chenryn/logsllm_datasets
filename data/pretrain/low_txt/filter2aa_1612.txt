# Many Ways to Exploit YoHo: Hacking Facebook & YoVille

## Authors
- **Sean Barnum**  
  Cybersecurity Principal, MITRE
- **EvilAdamSmith**  
  Senior Security Consultant
- **Tom Stracener “Strace”**  
  Contract Engineer, MITRE

## Miscellaneous Disclaimers
© Stracener, Tom 2010

### It's Medicinal!
© Stracener, Tom 2010

### What is YoVille?
© Stracener, Tom 2010

## Roadmap
1. Introduction
2. Client-Side Trust Attacks within Application APIs
3. Attack Patterns Against Social Network Gaming
4. Impact of the Attacks Using YoVille as an Example
5. How to Keep Your Software Off the Stage at DEF CON
© Stracener, Tom 2010

## Client-Side Trust
- **User**
- **Gateway App**
- **X-Application Trust**
- **APP2**
- **Client-Side Trust**
- **APP1**
© Stracener, Tom 2010

## Attack Characteristics
- **Amplification**: An attacker can use one compromised account to attack that user's friends via social gaming.
- **Deception**: Phishers can create messages to lure users into clicking on malicious links or buttons, sometimes with the URI masked.
- **Easy to Exploit**: By using a Man-in-the-Middle (MITM) proxy, an attacker can create fake but legitimate-looking prizes, gifts, or awards. Manipulating the API is trivial.
- **Trust**: Since the attacks often originate from in-game friends or neighbors, there is a greater tendency to trust the content as legitimate.
- **Stealth**: Because the attacks happen at the application logic layer, they are very difficult to detect (i.e., no noisy metacharacters or scripts).
- **Urgency**: Users are trained to quickly click and claim items their friends discover before the item expires or is used up.
© Stracener, Tom 2010

## Attack Patterns for Client-Side Trust
1. Application API Manipulation via Man-in-the-Middle
2. Application API Content Spoofing via API Manipulation
3. Transaction or Event Tampering via API Manipulation
4. Transaction or Event Replay via API Manipulation
© Stracener, Tom 2010

## Attacks Can Prey on User Interests or Vanity
- The best kind of lies are those we want to believe…
- Clicking "Allow" takes you to an Adobe PDF exploit.
© Stracener, Tom 2010

## Anatomy of a Web 2.0 Application Framework
- **Master Application**
  - JavaScript
  - Java
  - Flash
  - HTTP
  - SSL
  - API-KEY
  - REST
  - Web Application API
  - JSON
  - AJAX
  - Application Tier
  - Feeds/RSS
  - Digital Signatures
  - Encryption
  - CSS/XSL
  - XML
  - Persistent Storage
  - IFRAME
  - HTML
- **Client Browser**
  - API-Request Broker
  - User Page within Master Application is updated
  - Application Feed
  - Event Feed
  - User
  - Application Interface
  - Application API
  - User Profile
  - Friend Profile
  - Application Framework & API
  - IFRAME
  - Flash
  - Applet
  - ActiveX
© Stracener, Tom 2010

## Application API Content Spoofing
- **Description**: An attacker can modify message content or make API calls to create arbitrary content within cross-application messages.
- **Root Cause**: Failure to protect data from modification (i.e., failure to ensure data integrity).
- **Impact**: Attacker can create deceptive content that enables social engineering attacks, phishing, or user harassment.
- **Example**: Content can be spoofed by modifying messages or creating new messages via direct query.
© Stracener, Tom 2010

## Attack Execution Flow: Spoofing
1. Direct API Call
2. Application Acknowledgment
3. Feed published to Gateway App via Feed
4. Message can be a 'wall update' or a 'gift', for example
5. Gift or Message is Delivered to Target
6. Gift/Message Sent
- **Client**
- **App API Method**
- **Gateway App**
- **Cont.**
- **App: GUI**
- **GW: Messages\Inbox**
- **Feed**
- **GW: User News Feed**
- **GW: Notification\Alerts**
© Stracener, Tom 2010

## Additional Attack Patterns
5. Application API Navigation Remapping
6. Application API Button Hijacking
7. Harvesting Usernames via API Event Monitoring
8. Exploit Injection via Application API Message
9. Malware Propagation via Application API Message
© Stracener, Tom 2010

## Application API Navigation Remapping
- **Description**: When web application links that should point back to the application or its content are rewritten to trick users into following a malicious link.
- **Root Cause**: Failure to protect data from modification (i.e., failure to ensure data integrity).
- **Impact**: Potential compromise of the user’s machine and/or accounts via direct exploitation of browser or plugin flaws. Potential for spoofing, phishing, and authorization of malicious applications.
- **API Request: Feed Processing**
  - MITM Proxy view
  - Examples follow in the next few slides
- **Link (Navigation) Tampering**
  - `&feed_info[template_data][name]=` - Title of message, clickable=Yes
  - `&feed_info[template_data][href]=` - URL for message title, URI masked=Yes
  - `&feed_info[template_data][caption]=` - Content of message, Clickable=No
  - `&feed_info[template_data][media][0][src]=` - Location of Image, URI masked=Yes, Clickable=No
  - `&feed_info[template_data][media][0][href]=` - Link for image within message, clickable=Yes, URI masked=Yes
  - `&feed_info[action_link][0][text]=` - Content of action text, URI masked=Yes, i.e., "Claim Mystery Keys"
  - `&feed_info[action_link][0][href]=` - Content of message, Clickable=No
  - `&feed_info[template_data][media][0][src]=` - Hyperlink for Message Image, URI masked=Yes
© Stracener, Tom 2010

## Attack Execution Flow
1. Application Event
2. Attacker Modifies Link Destinations
3. Application Event Message
4. Event published to Gateway App via Feed
- **Game Application accessed via Gateway application**
- **Game Application generates a structured API request to update Gateway App.**
- **Attack Patterns**
  - 5. Application API Navigation Remapping
  - 6. Application API Button Hijacking
  - 7. Harvesting Usernames via API Event Monitoring
  - 8. Exploit Injection via Application API Message
  - 9. Malware Propagation via Application API Message
- **Application API Button Hijacking**
  - CAPEC: 388
  - You’ll have to come see the talk. ;-)
- **Malware Propagation via Application API Message**
  - CAPEC: 391
  - You’ll have to come see the talk. ;-)
© Stracener, Tom 2010

## How to Keep Your Software off the Stage at DEF CON
- To build secure software, you MUST understand how it will be attacked.
- **Resources**
  - [CAPEC](http://capec.mitre.org)
  - [CWE](http://cwe.mitre.org)
- A broad understanding of the attackers' perspective resides in the heads of a relatively small group of people, most of whom are here this weekend.
- The only way to scale this knowledge is to capture and share it in a structured and standardized way.
- **Attack Patterns for Social Gaming**
  - Application API Manipulation via Man-in-the-Middle
  - Application API Content Spoofing via API Manipulation
  - Transaction or Event Tampering via API Manipulation
  - Transaction or Event Replay via API Manipulation
  - Application API Navigation Remapping
  - Application API Button Hijacking
  - Harvesting Usernames via API Event Monitoring
  - Exploit Injection via Application API Message
  - Malware Propagation via Application API Message
  - CAPEC-383
  - CAPEC-384
  - CAPEC-385
  - CAPEC-386
  - CAPEC-387
  - CAPEC-388
  - CAPEC-389
  - CAPEC-390
  - CAPEC-391
- **Prescriptive Guidance**
  - In other words: How do I avoid this $H17?
  - You’ll have to come see the talk. ;-)
© Stracener, Tom 2010