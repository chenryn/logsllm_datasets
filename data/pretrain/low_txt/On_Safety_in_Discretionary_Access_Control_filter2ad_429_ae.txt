### Subjects or Objects as Their Counterparts Are Not Specified for the Solworth-Sloan Scheme

For simplicity, we consider a Discretionary Control Object (SDCO) scheme that has only three rights: own, read (re), and write (wr). In the Solworth-Sloan scheme, if two objects \( o_1 \) and \( o_2 \) have the same label, then they always have the same access characteristics. This means that in every state, the set of subjects having a right \( r \) over \( o_1 \) is the same as the set of subjects having the right \( r \) over \( o_2 \). However, in the SDCO scheme, it is possible to reach states where \( o_1 \) and \( o_2 \) have different access characteristics. Therefore, each object needs to be assigned a distinct label.

### Label Creation and Group Assignment

Before creating an object, one must create a new label. When creating a new label \( \ell \), one must assign a group to \( \text{auth}(\ell, \text{own}) \), \( \text{auth}(\ell, \text{re}) \), and \( \text{auth}(\ell, \text{wr}) \). Each pair \( \langle \ell, r \rangle \) determines a unique access class, requiring the creation of a distinct group. We use \( g(o, r) \) to denote the group that will be assigned to have the right \( r \) over object \( o \).

To track which subset of rights a subject has over an object, we need 8 group tags, one corresponding to each subset of \{own, re, wr\}. We use \( \text{tg}(o, x) \), where \( x \) is a 3-bit string, to denote these tags.

### Object Creation Process

For a subject \( s \) to create an object \( o \), the following steps are required:

1. **Create an NGS (Nested Group Structure) \( e \)**:
   - \( e.G = \{g(o, \text{own}), g(o, \text{re}), g(o, \text{wr})\} \)
   - \( e.Tg = \{\text{tg}(o, 000), \text{tg}(o, 001), \text{tg}(o, 010), \text{tg}(o, 011), \text{tg}(o, 100), \text{tg}(o, 101), \text{tg}(o, 110), \text{tg}(o, 111)\} \)
   - \( e.gtag[s] = \text{tg}(o, 100) \) and \( e.gtag[s'] = \text{tg}(o, 000) \) for every \( s' \in S \setminus \{s\} \)
   - \( e.ntg = \text{tg}(o, 000) \)
   - \( e.admin = e \)
   - \( e.patterns[g(o, \text{own})] = \{\langle *u, \text{tg}(o, 100) \rangle, \langle *u, \text{tg}(o, 101) \rangle, \langle *u, \text{tg}(o, 110) \rangle, \langle *u, \text{tg}(o, 111) \rangle\} \)
   - \( e.patterns[g(o, \text{re})] = \{\langle *u, \text{tg}(o, 010) \rangle, \langle *u, \text{tg}(o, 011) \rangle, \langle *u, \text{tg}(o, 110) \rangle, \langle *u, \text{tg}(o, 111) \rangle\} \)
   - \( e.patterns[g(o, \text{wr})] = \{\langle *u, \text{tg}(o, 001) \rangle, \langle *u, \text{tg}(o, 011) \rangle, \langle *u, \text{tg}(o, 101) \rangle, \langle *u, \text{tg}(o, 111) \rangle\} \)

   In each tag, the first bit corresponds to own, the second to re, and the third to wr. In the set of patterns for the group that corresponds to own, the first bit is always set in each tag, and similarly for the groups that correspond to re and wr, respectively.

   - \( e.GRS = \{\text{Relabel}(g(o, b_1b_2b_3), g(o, b'_1b'_2b'_3)) = g(o, \text{own}) \mid b_1b_2b_3, b'_1b'_2b'_3 \in \{0, 1\}^3 \land b_1b_2b_3 \text{ and } b'_1b'_2b'_3 \text{ differ in exactly one bit}\} \)

2. **Create the label \( \ell(o) \)** using the action \( \text{create\_label}(s, \langle s, t(o) \rangle, g(o, \text{re}), g(o, \text{wr})) \).

3. **Create the object \( o \)** and label it with \( \ell(o) \) using the action \( \text{create\_object}(s, o, \langle s, t(o) \rangle) \).

### Granting and Revoking Rights

To grant or revoke a right, one uses group relabelling. For instance, suppose \( s \) is a subject, and for the NGS \( e \), \( e.gtag[s] = \text{tg}(o, 000) \). This indicates that \( s \) is not a member of any of the groups \( g(o, \text{own}) \), \( g(o, \text{re}) \), or \( g(o, \text{wr}) \). To grant the right re, relabel \( \langle s, \text{tg}(o, 000) \rangle \) to \( \langle s, \text{tg}(o, 010) \rangle \). This results in \( s \) becoming a member of the group \( g(o, \text{re}) \), thereby giving \( s \) the right re over the object \( o \). Similarly, to revoke the right re, relabel \( \langle s, \text{tg}(o, 010) \rangle \) to \( \langle s, \text{tg}(o, 000) \rangle \). These operations can only be carried out by a subject that is a member of the group \( g(o, \text{own}) \).

### Observations

- The above mapping does not capture the state invariant in SDCO that in every state, there is exactly one owner for every object. In the Solworth-Sloan system, relabelling operations can lead to states where there are multiple owners for an object or no owner at all.
- Destruction of subjects and objects is not specified in the Solworth-Sloan scheme, making it difficult to handle such constructs. Adding state-change rules for destruction would be non-trivial due to the need to track various components of the state.
- Implementing a relatively simple DAC scheme like SDCO in the Solworth-Sloan scheme involves considerable overhead. For each object, a set of labels and tags must be created, leading to exponential growth in the number of rights and subjects.

### Conclusion

Our analysis shows that several claims made by Solworth and Sloan [27] are incorrect. The motivation for the new scheme (decidable safety) is invalid, and the scheme is not effective in implementing relatively simple DAC schemes. Safety in existing general DAC schemes is decidable, and there is no need to invent new DAC schemes with decidable safety as the primary goal.

### Acknowledgements

Portions of this work were supported by NSF Grants CCR-0325951 and IIS-0430274 and by sponsors of CERIAS.

### References

[1] P. Ammann and R. S. Sandhu. Safety analysis for the extended schematic protection model. In Proceedings of the 1991 IEEE Symposium on Security and Privacy, pages 87–97, May 1991.
[2] P. Ammann and R. S. Sandhu. The extended schematic Journal of Computer Security, 1(3-4):335–383, 1992.
[3] E. Bertino, C. Bettini, E. Ferrari, and P. Samarati. An access control model supporting periodicity constraints and temporal reasoning. ACM Transactions on Database Systems, 23(3):231–285, 1998.
[4] E. Bertino, C. Bettini, and P. Samarati. A temporal authorization model. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), pages 126–135. ACM Press, 1994.
[5] T. Budd. Safety in grammatical protection systems. International Journal of Computer and Information Sciences, 12(6):413–430, 1983.
[6] N. C. S. Center. A guide to understanding discretionary access control in trusted systems, Sept. 1987. NCSC-TG-003.
[7] D. D. Downs, J. R. Rub, K. C. Kung, and C. S. Jordan. Issues in discretionary access control. In Proceedings of IEEE Symposium on Research in Security and Privacy, pages 208–218, Apr. 1985.
[8] G. S. Graham and P. J. Denning. Protection — principles and practice. In Proceedings of the AFIPS Spring Joint Computer Conference, volume 40, pages 417–429. AFIPS Press, May 16–18 1972.
[9] P. P. Griffiths and B. W. Wade. An authorization mechanism for a relational database system. ACM Transactions on Database Systems, 1(3):242–255, 1976.
[10] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman. Protection in operating systems. Communications of the ACM, 19(8):461–471, Aug. 1976.
[11] A. K. Jones, R. J. Lipton, and L. Snyder. A linear time algorithm for deciding security. In 17th Annual IEEE Symposium on Foundations of Computer Science (FOCS), pages 33–41, October 1976.
[12] L. Lamport. The temporal logic of actions. ACM Transactions on Programming Languages and Systems (TOPLAS), 16(3):872–923, May 1994.
[13] B. W. Lampson. Protection. In Proceedings of the 5th Princeton Conference on Information Sciences and Systems, 1971. Reprinted in ACM Operating Systems Review, 8(1):18-24, Jan 1974.
[14] N. Li and M. V. Tripunitara. Security analysis in role-based access control. In Proceedings of the Ninth ACM Symposium on Access Control Models and Technologies (SACMAT 2004), pages 126–135, June 2004.
[15] N. Li and M. V. Tripunitara. On safety in discretionary access control. Technical Report CERIAS-TR-2005-20, Center for Education and Research in Information Assurance and Security, Purdue University, Feb. 2005.
[16] N. Li, W. H. Winsborough, and J. C. Mitchell. Beyond proof-of-compliance: Safety and availability analysis in trust management. In Proceedings of IEEE Symposium on Security and Privacy, pages 123–139. IEEE Computer Society Press, May 2003.
[17] R. J. Lipton and L. Snyder. A linear time algorithm for deciding subject security. Journal of the ACM, 24(3):455–464, 1977.
[18] T. Lunt. Access control policies: Some unanswered questions. In Proceedings of the 2nd IEEE Computer Security Foundations Workshop, pages 227–245. IEEE Computer Society Press, June 1988.
[19] N. H. Minsky. Selective and locally controlled transport of privileges. ACM Transactions on Programming Languages and Systems, 6(4):573–602, Oct. 1984.
[20] R. Motwani, R. Panigrahy, V. A. Saraswat, and S. Ventkatasubramanian. On the decidability of accessibility problems (extended abstract). In Proceedings of the Thirty-Second Annual ACM Symposium on Theory of Computing, pages 306–315. ACM Press, May 2000.
[21] S. Osborn, R. S. Sandhu, and Q. Munawer. Configuring role-based access control to enforce mandatory and discretionary access control policies. ACM Transactions on Information and System Security, 3(2):85–106, May 2000.
[22] P. Samarati and S. de Capitani di Vimercati. Access control: Policies, models, and mechanisms. In R. Focardi and R. Gorrieri, editors, Foundations of Security Analysis and Design, volume 2171 of Lecture Notes in Computer Science, pages 137–196. Springer, 2001.
[23] R. S. Sandhu. The schematic protection model: Its definition and analysis for acyclic attenuating systems. Journal of the ACM, 35(2):404–432, 1988.
[24] R. S. Sandhu. Expressive power of the schematic protection model. Journal of Computer Security, 1(1):59–98, 1992.
[25] R. S. Sandhu. The typed access matrix model. In Proceedings of the 1992 IEEE Symposium on Security and Privacy, pages 122–136. IEEE Computer Society Press, May 1992.
[26] R. S. Sandhu. Undecidability of the safety problem for the schematic protection model with cyclic creates. Journal of Computer and System Sciences, 44(1):141–159, Feb. 1992.
[27] J. A. Solworth and R. H. Sloan. A layered design of discretionary access controls with decidable safety properties. In Proceedings of IEEE Symposium on Research in Security and Privacy, May 2004.
[28] J. A. Solworth and R. H. Sloan. Security property based administrative controls. In Proceedings of the Ninth European Symposium on Research in Computer Security (ESORICS 2004), pages 244–259. Springer, Sept. 2004.
[29] M. Soshi. Safety analysis of the dynamic-typed access matrix model. In Proceedings of the Sixth European Symposium on Research in Computer Security (ESORICS 2000), pages 106–121. Springer, Oct. 2000.
[30] M. Soshi, M. Maekawa, and E. Okamoto. The dynamic-typed access matrix model and decidability of the safety problem. IEICE Transactions on Fundamentals, E87-A(1):190–203, Jan. 2004.