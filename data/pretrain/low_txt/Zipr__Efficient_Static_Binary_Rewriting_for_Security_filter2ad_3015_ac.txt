### Introduction

In Figures 3 and 4, the performance and file size overheads of SPEC CPU2006 benchmarks are illustrated (bars 1 and 2). When new functionalities, such as security enhancements, are added to an application, it is necessary to update the Exception Handling (EH) tables. As a preliminary investigation into the composition of security techniques with exception handling, we applied a diversity transform to six working C++ benchmarks in SPEC CPU2006. These benchmarks were chosen because they are often excluded from rewriter evaluations due to their complexity, which arises from extensive use of exception handling and large code sizes.

### Transformations and Results

For these benchmarks, we applied a stack-layout diversity transform (SLX), which randomly pads the activation records of functions and inserts canaries [8]. This transform has been proven effective in preventing certain types of stack buffer overflow attacks.

Figure 5 shows the performance overhead of two configurations when SLX is applied. In bar 1, EH-table rewriting is not applied, while in bar 2, EH-table rewriting is enabled.

Notably, bar 1 is missing for 453.povray and 471.omnetpp. This is because these applications dynamically throw exceptions, causing the benchmark to fail unless the EH tables are updated. These results highlight the need for a robust binary rewriter to handle applications that throw exceptions. The geometric mean for the working benchmarks in this configuration is 1.26 (displayed as the 'ghost' bar). For SLX with EH-table rewriting (bar 2), the geometric mean is 1.1.

### Related Work

Several static binary rewriters have been developed, each with specific capabilities and limitations. Some rewriters, such as [20] and [10], are designed to transform the input binary to accomplish a particular task. Others, like [19] and [18], work only at the linking phase or require debugging symbols and relocation information. Some do not provide a high-level API for developing transformations [9].

Recent notable static binary rewriting platforms that do not require debugging information or other metadata include SecondWrite [3], UROBOROS [17], and Ramblr [15]. 

- **SecondWrite** recreates an Intermediate Representation (IR) from the input binary, applies user-specified transformations, and then passes the transformed IR to the LLVM compiler to generate the rewritten program. It splits the original program stack into individual frames, converts constants and variable memory accesses into symbols, and constructs an IR that can be analyzed by LLVM.
  
- **UROBOROS and Ramblr** recreate reassembleable disassembly from the input binary, apply user-specified transformations, and pass the modified representation to an assembler to generate the rewritten binary. Reassembleable disassembly differs from traditional disassembly by replacing constant immediates with symbols, allowing an unmodified assembler to place data and code arbitrarily and update symbolic addresses with absolute addresses as the final step.

To the best of our knowledge, SecondWrite, UROBOROS, and Ramblr have not yet implemented exception handling support.

### Summary

Static binary rewriting is emerging as an important tool for late-stage modification of binaries. To be widely adopted, binary rewriters must be robust and widely applicable. This paper describes and evaluates an approach for rewriting applications that use stack unwinding for exception handling. Beyond expanding the use of static binary rewriting to an important class of applications, the technique also improves performance. Measurements using the full SPEC CPU2016 benchmark suite showed that when the technique was incorporated into a modern, fully-featured binary writer, runtime overhead was reduced from 15% to 3%.

### Acknowledgments

The authors thank the anonymous referees for their valuable comments and helpful suggestions. The work is supported by AFRL and DARPA under Grant Nos.: FA8750-15-C-0118, FA8750-14-C-0110, and FA8750-17-2-0079.

### Case Study: Webservers, Ada, and Libraries

To demonstrate the robustness of our EH-table rewriting under a wider range of exception handling situations, we tested an Ada program. Ada uses exception handling as part of normal operation, such as checking end-of-file (EOF) conditions by throwing and catching exceptions.

We selected the Ada Web Server (AWS) [2], a large, open-source project written in Ada that provides web services. We chose the WPS (web page server) example, which provides basic web page services and is easy to test. A single web page request often involves tens or even hundreds of exceptions, making AWS a suitable test for the functional correctness of our EH-table rewriting.

We compiled WPS with the GNU gnat compiler using optimization level -O2, and performed a rewrite with and without EH-table rewriting on the main executable and two Ada runtime libraries: libgnat.so and libgnarl.so. After rewriting, we used Apache Jmeter to run a battery of web requests. We observed no failures, concluding that the rewriting is robust for Ada and system libraries.

For the three rewritten executables, we observed file size overheads of 94.8%, 44.3%, and 56.7% after EH-table rewriting (with the optimized code layout). Unfortunately, we were unable to adequately measure performance overheads due to I/O-bound test setup, which would make presenting performance numbers misleading.

### References

[1] [n. d.]. The DWARF Debugging Standard. ([n. d.]). http://www.dwarfstd.org

[2] AdaCore. 2017. AWS Ada Web Server. (2017). http://libre.adacore.com/tools/aws/

[3] Kapil Anand, Matthew Smithson, Khaled Elwazeer, Aparna Kotha, Jim Gruen, Nathan Giles, and Rajeev Barua. 2013. A compiler-level intermediate representation based binary analysis and rewriting system. In Proceedings of the 8th ACM European Conference on Computer Systems - EuroSys ’13. ACM Press, New York, New York, USA, 295. https://doi.org/10.1145/2465351.2465380

[4] Mahmoud Elnaggar, Jason Hiser, Tony Lin, Anh Nguyen-Tuong, Michele Co, Jack Davidson, and Nicola Bezzo. 2017. Online Control Adaptation for Safe and Secure Autonomous Vehicle Operations. In NASA/ESA Conference on Adaptive Hardware and Systems.

[5] William H. Hawkins, Michele Co, Jason D. Hiser, Anh Nguyen-Tuong, and Jack W. Davidson. 2017. Zipr: Efficient Static Binary Rewriting for Security. In The 47th IEEE/IFIP International Conference on Dependable Systems and Networks.

[6] William H. Hawkins, Jason D. Hiser, and Jack W. Davidson. 2016. Dynamic Canary Randomization for Improved Software Security. In Proceedings of the 11th Annual Cyber and Information Security Research Conference on - CISRC ’16. ACM Press, New York, New York, USA, 1–7. https://doi.org/10.1145/2897795.2897803

[7] Michael A. Laurenzano, Mustafa M. Tikir, Laura Carrington, and Allan Snavely. 2010. PEBIL: Efficient static binary instrumentation for Linux. In 2010 IEEE International Symposium on Performance Analysis of Systems & Software (ISPASS). IEEE, 175–183. https://doi.org/10.1109/ISPASS.2010.5452024

[8] Benjamin D. Rodes, Anh Nguyen-Tuong, Jason D. Hiser, John C. Knight, Michele Co, and Jack W. Davidson. 2013. Defense against Stack-Based Attacks Using Speculative Stack Layout Transformation. Springer Berlin Heidelberg, Berlin, Heidelberg, 308–313. https://doi.org/10.1007/978-3-642-35632-2_29

[9] Ted Romer, Geoff Voelker, Dennis Lee, Alec Wolman, Wayne Wong, Hank Levy, Brian Bershad, and Brad Chen. 1997. Instrumentation and Optimization of Win32/Intel Executables Using Etch. In Proceedings of the USENIX Windows NT Workshop (NT’97). USENIX Association, Berkeley, CA, USA, 1–1. http://dl.acm.org/citation.cfm?id=1267658.1267659

[10] Amitabh Srivastava, Alan Eustace, Amitabh Srivastava, and Alan Eustace. 1994. ATOM: A System for Building Customized Program Analysis Tools. In Proceedings of the ACM SIGPLAN 1994 conference on Programming language design and implementation - PLDI ’94, Vol. 29. ACM Press, New York, New York, USA, 196–205.

[11] Standard Performance Evaluation Corporation. 2006. SPEC CPU2006 Benchmarks. (2006). http://www.spec.org/osg/cpu2006.

[12] Ian Lance Taylor. 2011. Airs - Ian Lance Taylor. (2011). http://www.airs.com/blog/archives/460. https://doi.org/10.1145/178243.178260

[13] L. Van Put, D. Chanet, B. De Bus, B. De Sutter, and K. De Bosschere. 2005. DIABLO: a reliable, retargetable and extensible link-time rewriting framework. In Proceedings of the Fifth IEEE International Symposium on Signal Processing and Information Technology, 2005. IEEE, 7–12. https://doi.org/10.1109/ISSPIT.2005.1577061

[14] Mike Walker. 2015. Machine vs. Machine: Lessons from the First Year of Cyber Grand Challenge | USENIX. (2015). https://www.usenix.org/node/190798

[15] Ruoyu Wang, Yan Shoshitaishvili, Antonio Bianchi, Aravind Machiry, John Grosen, Paul Grosen, Christopher Kruegel, and Giovanni Vigna. [n. d.]. Ramblr: Making Reassembly Great Again. ([n. d.]). https://doi.org/10.14722/ndss.2017.23225

[16] Shuai Wang, Pei Wang, and Dinghao Wu. 2015. Reassembleable Disassembling. In 24th USENIX Security Symposium (USENIX Security 15). USENIX Association, Washington, D.C., 627–642. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/wang-shuai

[17] Shuai Wang, Pei Wang, and Dinghao Wu. 2016. UROBOROS: Instrumenting Stripped Binaries with Static Reassembling. In 2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER). IEEE, 236–247. https://doi.org/10.1109/SANER.2016.106

[18] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012. Binary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary Code. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS ’12). ACM, New York, NY, USA, 157–168. https://doi.org/10.1145/2382196.2382216

[19] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012. Securing Untrusted Code via Compiler-agnostic Binary Rewriting. In Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC ’12). ACM, New York, NY, USA, 299–308. https://doi.org/10.1145/2420950.2420995

[20] Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, R. Sekar, Mingwei Zhang, Rui Qiao, Niranjan Hasabnis, and R. Sekar. 2014. A platform for secure static binary instrumentation. ACM SIGPLAN Notices 49, 7 (sep 2014), 129–140. https://doi.org/10.1145/2674025.2576208

Session 1: Binary Rewriting and Transformation
FEAST'17, November 3, 2017, Dallas, TX, USA