### System Behavior and Consistency Verification

Initially, the system has no way of knowing about any duplication information regarding the tasks it handles, as no duplicated tasks have been assigned yet. When collusive entities eventually receive these duplicated tasks, they must return results consistent with the initial results. Any inconsistency can be detected by the master, thereby preventing strategic attackers from misbehaving, as their actions could always be detected if there are duplicated tasks. However, this approach may delay the execution of duplicated tasks, potentially degrading system performance. In the following section, we will evaluate the performance overhead of SecureMR under both the naive task scheduling algorithm and the commitment-based task scheduling algorithm.

### Experimental Evaluation

#### System Implementation

We have implemented a prototype of SecureMR based on Hadoop [2], an existing implementation of MapReduce. Our prototype includes both the naive task scheduling algorithm and the commitment-based task scheduling algorithm discussed in previous sections. For consistency verification, we have implemented a non-blocking replication-based scheme, allowing reducers to proceed without waiting for all duplicates of a map task to finish. Users are informed of any detected inconsistencies after all duplicates complete.

#### Experiment Setup

Our experiments were conducted on 14 hosts provided by the Virtual Computing Lab (VCL), a distributed computing system with hundreds of hosts connected through campus networks [25]. The Hadoop Distributed File System (HDFS) was also deployed in VCL. We used 11 hosts as workers offering MapReduce services and one host as the master. HDFS utilized 13 nodes, excluding the master host. All hosts had similar hardware and software configurations: 2.66GHz Intel Core 2 Duo, Ubuntu Linux 8.04, Sun JDK 6, and Hadoop 0.19. Experiments were conducted using the Hadoop WordCount application [20].

#### Performance Analysis

First, we estimate the additional overhead introduced by SecureMR in Tables I and II. Table I shows the performance overhead of SecureMR on the master, mappers, and reducers. Table II details the additional bytes transmitted during communication between these entities. Note that no additional messages are introduced. Here, \( T \) and \( D \) denote the time and data transmission costs for various secure operations such as encryption, decryption, signature, verification, and hashing. \( r \) represents the number of reducers. Each partition size is approximately 14MB. We use SHA-1 for generating hash values and RSA for creating signatures and encrypting/decrypting data. The estimation indicates that the communication cost is negligible, and the cost on each entity is minimal.

We also conducted experiments to evaluate the performance overhead caused by SecureMR. Figure 10 shows the response time versus the number of reduce tasks under two scenarios: MapReduce and SecureMR without duplication, with 60 map tasks and 1GB of data. The overhead of SecureMR is below 10 seconds, which is small compared to the overall response time of about 250 seconds. Figure 11 shows the response time versus the data size, with 60 map tasks and 25 reduce tasks. Since the data size primarily affects the time to generate hash values, the overhead is similar to that in Figure 10.

Regarding the performance overhead of executing duplicated tasks, we compared the response times in three cases: MapReduce, SecureMR with naive scheduling, and SecureMR with commitment-based scheduling. Figure 12 illustrates the response time versus the duplication rate. With our non-blocking verification mechanism, the difference between the two scheduling algorithms is minimal. The results show that the time overhead increases slowly with the duplication rate.

### Related Work

MapReduce has gained significant attention for its simple model and parallel computation capabilities in various applications and research areas. Chu et al. [6] applied MapReduce to multicore computation for machine learning. Ekanayake et al. [4] used MapReduce for high-energy physics data analysis and K-means clustering. Mackey et al. [3] utilized MapReduce for high-end computing applications. Most of these works focus on leveraging MapReduce for specific domains, with little attention to service integrity protection. SecureMR provides practical security mechanisms to ensure the integrity of MapReduce data processing services.

The service integrity issues addressed in this paper share similarities with problems tackled in [13]–[19]. Du et al. [13] used sampling techniques for uncheatable grid computing. Zhao et al. [14] proposed Quiz for collusion-resistant result verification. Sarmenta et al. [15] introduced majority voting and spot-checking techniques for credibility-based fault tolerance. Although several techniques have been proposed for service integrity in different areas [11], [13], [26], ensuring integrity in MapReduce presents unique challenges due to massive data processing and multi-party distributed computation. SecureMR adopts a new decentralized replication-based integrity verification scheme to address these challenges, fully utilizing the existing MapReduce architecture.

In terms of system security, Srivatsa and Liu [27] proposed security guards and a resilient network design for content-based publish-subscribe systems. PeerReview [28] ensures that Byzantine faults observed by a correct node are eventually detected and linked to a faulty node. Swamynathan et al. [29] improved the accuracy of reputation systems using statistical metrics. Unlike previous work, SecureMR relies on a trustworthy master and leverages the natural redundancy of map and reduce services and existing MapReduce mechanisms for comprehensive consistency verification.

### Conclusion and Future Work

In this paper, we presented SecureMR, a practical framework for ensuring the integrity of MapReduce data processing services. We implemented a scalable, decentralized replication-based verification scheme and evaluated its performance impact. Based on Hadoop [2], we developed a prototype, proved its security properties, and tested it on a real distributed computing system. Initial experimental results show that SecureMR ensures data processing service integrity with low performance overhead.

However, while SecureMR effectively detects misbehavior by malicious workers, it cannot detect inconsistencies when all duplicated tasks are processed by a collusive group. To counter this, we may consider sampling techniques. The unique properties of MapReduce present new opportunities and challenges for adopting such techniques.

### Acknowledgment

This work was supported by the U.S. Army Research Office under grant W911NF-08-1-0105 managed by NCSU Secure Open Systems Initiative (SOSI) and by the NSF under grant IIS-0430166. The contents of this paper do not necessarily reflect the position or policies of the U.S. Government.

### References

[1] J. Dean and S. Ghemawat, “MapReduce: simplified data processing on large clusters,” in OSDI'04: Proceedings of the 6th conference on Symposium on Opearting Systems Design & Implementation. Berkeley, CA, USA: USENIX Association, 2004, pp. 10–10.
[2] “Hadoop Tutorial,” http://public.yahoo.com/gogate/hadoop-tutorial/start-tutorial.html.
[3] G. Mackey, S. Sehrish, J. Lopez, J. Bent, S. Habib, and J. Wang, “Introducing MapReduce to high end computing,” in Petascale Data Storage Workshop Held in conjunction with SC08, 2008.
[4] J. Ekanayake, S. Pallickara, and G. Fox, “MapReduce for data intensive scientific analysis,” in eScience, 2008. eScience '08. IEEE Fourth International Conference on, 2008, pp. 277–284.
[5] M. Laclavík, M. Šeleng, and L. Hluchý, “Towards large scale semantic annotation built on MapReduce architecture,” in ICCS '08: Proceedings of the 8th international conference on Computational Science, Part III. Berlin, Heidelberg: Springer-Verlag, 2008, pp. 331–338.
[6] C. T. Chu, S. K. Kim, Y. A. Lin, Y. Yu, G. R. Bradski, A. Y. Ng, and K. Olukotun, “Map-Reduce for machine learning on multicore,” in NIPS, B. Schölkopf, J. C. Platt, and T. Hoffman, Eds. MIT Press, 2006, pp. 281–288. [Online]. Available: http://dblp.uni-trier.de/rec/bibtex/conf/nips/ChuKLYBNO06
[7] G. A. amd F. Casati, H. Kuno, and V. Machiraju, “Web Services Concepts, Architectures and Applications Series: Data-Centric Systems and Applications,” Addison-Wesley Professional, 2002.
[8] T. Erl, “Service-Oriented Architecture (SOA): Concepts, Technology, and Design,” Prentice Hall, 2005.
[9] “Amazon Elastic Compute Cloud,” http://aws.amazon.com/ec2/.
[10] D. P. Anderson, “BOINC: a system for public-resource computing and storage,” 2004, pp. 4–10. [Online]. Available: http://dx.doi.org/10.1109/GRID.2004.14
[11] “SETI@home.” http://setiathome.ssl.berkeley.edu/.
[12] “Amazon Elastic MapReduce,” http://docs.amazonwebservices.com/Elastic-MapReduce/latest/DeveloperGuide/index.html.
[13] W. Du, J. Jia, M. Mangal, and M. Murugesan, “Uncheatable grid computing,” in ICDCS '04: Proceedings of the 24th International Conference on Distributed Computing Systems (ICDCS'04). Washington, DC, USA: IEEE Computer Society, 2004, pp. 4–11.
[14] S. Zhao, V. Lo, and C. GauthierDickey, “Result verification and trust-based scheduling in peer-to-peer grids,” in P2P '05: Proceedings of the Fifth IEEE International Conference on Peer-to-Peer Computing. Washington, DC, USA: IEEE Computer Society, 2005, pp. 31–38.
[15] L. F. G. Sarmenta, “Sabotage-tolerance mechanisms for volunteer computing systems,” Future Generation Computer Systems, vol. 18, no. 4, pp. 561–572, 2002. [Online]. Available: citeseer.ist.psu.edu/sarmenta02sabotagetolerance.html
[16] C. Germain-Renaud and D. Monnier-Ragaigne, “Grid result checking,” in CF '05: Proceedings of the 2nd conference on Computing frontiers. New York, NY, USA: ACM, 2005, pp. 87–96.
[17] P. Domingues, B. Sousa, and L. Moura Silva, “Sabotage-tolerance and trust management in desktop grid computing,” Future Gener. Comput. Syst., vol. 23, no. 7, pp. 904–912, 2007.
[18] P. Golle and S. Stubblebine, “Secure distributed computing in a commercial environment,” in 5th International Conference Financial Cryptography (FC). Springer-Verlag, 2001, pp. 289–304.
[19] P. Golle and I. Mironov, “Uncheatable distributed computations,” in CT-RSA 2001: Proceedings of the 2001 Conference on Topics in Cryptology. London, UK: Springer-Verlag, 2001, pp. 425–440.
[20] “WordCount, Hadoop,” http://wiki.apache.org/hadoop/WordCount.
[21] M. J. Atallah, Y. Cho, and A. Kundu, “Efficient data authentication in an environment of untrusted third-party distributors,” in ICDE '08: Proceedings of the 2008 IEEE 24th International Conference on Data Engineering. Washington, DC, USA: IEEE Computer Society, 2008, pp. 696–704.
[22] K. Fu, M. F. Kaashoek, and D. Mazières, “Fast and secure distributed read-only file system,” ACM Trans. Comput. Syst., vol. 20, no. 1, pp. 1–24, 2002.
[23] P. Devanbu, M. Gertz, C. Martel, and S. G. Stubblebine, “Authentic third-party data publication,” in In Fourteenth IFIP 11.3 Conference on Database Security, 1999, pp. 101–112.
[24] Q. Zhang, T. Yu, and P. Ning, “A framework for identifying compromised nodes in wireless sensor networks,” ACM Trans. Inf. Syst. Secur., vol. 11, no. 3, pp. 1–37, 2008.
[25] “Virtual Computing Lab,” http://vcl.ncsu.edu/.
[26] D. Szajda, B. Lawson, and J. Owen, “Toward an optimal redundancy strategy for distributed computations,” in Cluster Computing, 2005. IEEE International, Sept. 2005, pp. 1–11.
[27] M. Srivatsa and L. Liu, “Securing publish-subscribe overlay services with EventGuard,” in CCS '05: Proceedings of the 12th ACM conference on Computer and communications security. New York, NY, USA: ACM, 2005, pp. 289–298.
[28] A. Haeberlen, P. Kouznetsov, and P. Druschel, “PeerReview: practical accountability for distributed systems,” in SOSP '07: Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles. New York, NY, USA: ACM, 2007, pp. 175–188. [Online]. Available: http://dx.doi.org/10.1145/1294261.1294279
[29] G. Swamynathan, B. Zhao, K. Almeroth, and S. Jammalamadaka, “Towards reliable reputations for dynamic networked systems,” in Reliable Distributed Systems, 2008. SRDS '08. IEEE Symposium on, Oct. 2008, pp. 195–204.