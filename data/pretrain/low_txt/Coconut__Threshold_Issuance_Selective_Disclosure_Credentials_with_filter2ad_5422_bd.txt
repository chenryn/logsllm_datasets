### Request, Issue, and Verify Credentials

- **Request Credential**
- **Issue Credential**
- **Verify Credential**

**Complexity:**
- **Request Credential:** O(n)
- **Issue Credential:** O(n)
- **Verify Credential:** O(1)

### Signature on One Private Attribute

- **Request Credential**
- **Issue Credential**
- **Verify Credential**

**Complexity:**
- **Request Credential:** O(n)
- **Issue Credential:** O(n)
- **Verify Credential:** O(1)

**Size [B]:**
- **Request Credential:** 32
- **Issue Credential:** 132
- **Verify Credential:** 162
- **Total Transaction Size:** 516
- **Signature Size (Public Attribute):** 132
- **Signature Size (Private Attribute):** 355

**Table II: Communication Complexity and Transaction Size for the Coconut Credentials Scheme**
- When signing one public and one private attribute. (Refer to Figure 2 in Section III.)

## VI. Evaluation

In this section, we present the evaluation of the Coconut threshold credentials scheme. We first provide a benchmark of the cryptographic primitives described in Section III, followed by an evaluation of the smart contracts detailed in Section V.

### A. Cryptographic Primitives

We implemented the cryptographic primitives described in Section III using Python, with the `petlib` and `bplib` libraries. The bilinear pairing is defined over the Barreto-Naehrig curve, utilizing OpenSSL as the arithmetic backend.

#### Timing Benchmark

Table I presents the mean (µ) and standard deviation (σ) of the execution times for each procedure described in Section III. Each entry is the result of multiple runs to ensure accuracy.

---

This revision aims to make the text more structured and easier to read, with clear headings and subheadings. It also ensures that the information is presented in a logical and coherent manner.