### Performance Impact

The slowdown for the SPEC CPU2006 applications ranges from 3.2% to 2.19x, with an average slowdown of 1.56x. For database servers, the overhead is 0.4%, 8.19%, and 214% for PostgreSQL, SQLite, and MySQL, respectively. For the Apache and Nginx web servers, the overhead is 3.2x and 2.8x, respectively. As mentioned earlier, this high overhead is primarily due to the underlying dynamic binary instrumentation framework.

### Related Work

#### Canary-Based Stack Protections

Canary-based stack protections were popularized by StackGuard [10]. Subsequently, ProPolice [13] introduced a series of GCC patches for StackGuard, which, among other features, reordered local variables in the stack, placing buffers after (local) pointers and function arguments in the stack frame. ProPolice was later integrated into GCC by RedHat as the Stack Smashing Protector (SSP) [38]. In parallel, Microsoft introduced the GuardStack (/GS) [28] compiler flag, which also places a canary in the stack using heuristics similar to those of SSP. Since modern stack protectors follow a design similar to that of SSP, DynaGuard’s architecture can be easily adopted by popular compilers, as it incurs negligible overhead. Additionally, other canary-based defenses, such as ValueGuard [44], which aim to protect against data-only attacks, can benefit from DynaGuard’s dynamic update of canaries.

#### Preventing Canary Brute-Force Attacks

RAF SSP [25], like DynaGuard, aims to refresh stack-based canaries in networking servers. However, upon a fork system call, RAF SSP only updates the canary in the TLS area, ignoring the frames inherited from the parent process. This design fails to guarantee program correctness in the general case, as it assumes that a child process never reuses inherited frames legitimately. It also checks for the noreturn attribute to avoid scenarios similar to those shown in Fig. 1. Furthermore, RAF SSP does not handle exceptions, a vital component for avoiding the ungraceful termination of server applications.

#### Return Address Integrity

Several mechanisms have been proposed to protect the integrity of return addresses. RAD [7] is implemented as a compiler patch and creates a safe area where a copy of the return address is stored. Similar defenses have been implemented at the micro-architectural level [34], using binary rewriting [8], or by utilizing a shadow stack [41]. These mechanisms, however, do not address the same problem as DynaGuard and have not gained traction, mainly due to compatibility and performance issues (e.g., they nullify several micro-architectural optimizations, such as return address prediction) [11]. In contrast, DynaGuard enhances a widely adopted mechanism without breaking accepted conventions around the format of the function prologue and epilogue, or the stack layout.

#### Other Memory Corruption Defenses

Several protections have been proposed against memory corruption attacks, which are beyond the scope of the current work. ASLR-based defenses randomize, among others, the base address of the stack [35] or introduce variable spacing between stack frames [3, 15] to protect against (stack) object corruption. Protection mechanisms like W^X [12] and DEP [30] prevent the execution of injected code by ensuring that memory is never both writable and executable. Defenses like SafeSEH [29] and SEHOP [42] attempt to prevent exploits that abuse the exception handling mechanism to execute arbitrary code. Finally, some protection mechanisms abandon the current stack organization entirely. StackArmor [6] operates at the binary level and relies on a combination of randomization and isolation to make stack objects appear as if drawn from a fully randomized space. SafeStack [22] splits the stack into safe and unsafe regions, enforcing code pointer integrity to prevent control-flow hijacking attacks. However, these mechanisms also have limitations in terms of both performance and effectiveness [11, 14].

### Conclusion

In this paper, we address a limitation of current canary-based protection mechanisms, which allows for brute-forcing the canary, byte-by-byte, in forking applications. We resolve this issue by proposing the dynamic update of canaries in forked processes upon their creation. Our design utilizes a per-process, in-memory data structure to update the stack canaries at runtime. We prototype the proposed architecture in DynaGuard, which comes in two flavors: a compiler-based version operating at the source code level and a DBI-based version operating at the binary level. The compiler-based version of DynaGuard incurs an average overhead of 1.2% and can be easily integrated into modern compiler toolchains.

### Availability

Our prototype implementation of DynaGuard is available at: https://github.com/nettrino/dynaguard

### Acknowledgments

We are grateful to George Kontaxis and George Argyros for their valuable feedback on earlier versions of this paper. This work was supported by the Office of Naval Research (ONR) through contracts N00014-12-1-0166 and N00014-15-1-2378. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government or ONR.

### References

[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In Proc. of CCS, pages 340–353, 2005.
[2] A. Ayer. LibreSSL’s PRNG is Unsafe on Linux. https://www.agwa.name/blog/post/libressls_prng_is_unsafe_on_linux, 2014.
[3] S. Bhatkar, D. C. DuVarney, and S. R. Efficient Techniques for Comprehensive Protection from Memory Error Exploits. In Proc. of USENIX Sec, pages 271–286, 2005.
[4] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazieres, and D. Boneh. Hacking Blind. In Proc. of IEEE S&P, pages 227–242, 2014.
[5] M. Boßlet. OpenSSL PRNG Is Not (Really) Fork-safe. https://goo.gl/sZuopi, 2013.
[6] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida. StackArmor: Comprehensive Protection from Stack-based Memory Error Vulnerabilities for Binaries. In Proc. of NDSS, 2015.
[7] T.-c. Chiueh and F.-H. Hsu. RAD: A Compile-Time Solution to Buffer Overflow Attacks. In Proc. of ICDCS, pages 409–417, 2001.
[8] M. L. Corliss, E. C. Lewis, and A. Roth. Using DISE to Protect Return Addresses from Attack. ACM SIGARCH Computer Architecture News, 33(1):65–72, 2005.
[9] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuard: Protecting Pointers From Buffer Overflow Vulnerabilities. In Proc. of USENIX Sec, pages 91–104, 2003.
[10] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In Proc. of USENIX Sec, pages 63–78, 1997.
[11] T. H. Dang, P. Maniatis, and D. Wagner. The Performance Cost of Shadow Stacks and Stack Canaries. In Proc. of ASIACCS, pages 555–566, 2015.
[12] T. de Raadt. Advances in OpenBSD. http://www.openbsd.org/papers/csw03/index.html, 2003.
[13] H. Etoh. GCC extension for protecting applications from stack-smashing attacks. http://goo.gl/Tioc4C, 2005.
[14] I. Evans, S. Fingeret, J. González, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the Point(er): On the Effectiveness of Code Pointer Integrity. In Proc. of IEEE S&P, 2015.
[15] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced Operating System Security Through Efficient and Fine-grained Address Space Randomization. In Proc. of USENIX Sec, pages 475–490, 2012.
[16] B. Hawkes. Exploiting OpenBSD. http://inertiawar.com/openbsd/, 2006.
[17] J. L. Henning. SPEC CPU2006 Benchmark Descriptions. ACM SIGARCH Computer Architecture News, 34(4):1–17, 2006.
[18] M. Howard, M. Miller, J. Lambert, and M. Thomlinson. Windows ISV Software Security Defenses. https://msdn.microsoft.com/en-us/library/bb430720.aspx, 2010.
[19] Intel. Pin: Instrumentation API. http://www.cs.virginia.edu/kim/publicity/pin/docs/31933/Pin/html/group_INS__INST__API.html, 2009.
[20] Jonathan Corbet. x86 NX support. https://lwn.net/Articles/87814/, 2003.
[32] OpenSSL. Random fork-safety. https://wiki.openssl.org/index.php/Random_fork-safety, 2014.
[33] Oracle. MySQL Benchmark Tool. https://dev.mysql.com/downloads/benchmarks.html, 2015.
[34] Y.-J. Park and G. Lee. Repairing Return Address Stack for Buffer Overflow Protection. In Proc. of CF, pages 335–342, 2004.
[21] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis. libdft: Practical Dynamic Data Flow Tracking for Commodity Systems. In Proc. of VEE, pages 121–132, 2012.
[35] PaX Team. Address Space Layout Randomization. https://pax.grsecurity.net/docs/aslr.txt, 2003.
[22] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-Pointer Integrity. In Proc. of OSDI, pages 147–163, 2014.
[23] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee. From Zygote to Morula: Fortifying Weakened ASLR on Android. In Proc. of IEEE S&P, pages 424–439, 2014.
[24] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In Proc. of PLDI, pages 190–200, 2005.
[25] H. Marco-Gisbert and I. Ripoll. Preventing Brute Force Attacks Against Stack Canary Protection on Networking Servers. In Proc. of NCA, pages 243–250, 2013.
[26] H. Marco-Gisbert and I. Ripoll. On the Effectiveness of Full-ASLR on 64-bit Linux. In DeepSeC, 2014.
[27] Metasploit. Nginx HTTP Server 1.3.9-1.4.0 - Chuncked Encoding Stack Buffer Overflow. http://www.exploit-db.com/exploits/25775/, 2013.
[28] Microsoft. /GS (Buffer Security Check). https://msdn.microsoft.com/en-us/library/8dbf701c.aspx, 2002.
[29] Microsoft. /SAFESEH (Image has Safe Exception Handlers). https://msdn.microsoft.com/en-us/library/9a89h429.aspx, 2003.
[30] Microsoft. A detailed description of the Data Execution Prevention (DEP) feature. http://support.microsoft.com/kb/875352, 2013.
[31] OpenBSD. i386 W^X. https://marc.info/?l=openbsd-misc&m=105056000801065, 2003.
[36] PaX Team. Non-executable pages design & implementation. https://pax.grsecurity.net/docs/noexec.txt, 2003.
[37] PaX Team. new gcc plugin: latent entropy extraction. https://grsecurity.net/pipermail/grsecurity/2012-July/001093.html, 2012.
[38] A. 'pi3' Zabrocki. Scraps of notes on remote stack overflow exploitation. http://phrack.org/issues/67/13.html, 2010.
[39] PTS. Phoronix Test Suite, June 2015. http://www.phoronix-test-suite.com.
[40] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86). In Proc. of CCS, pages 552–561, 2007.
[41] S. Sinnadurai, Q. Zhao, and W. fai Wong. Transparent Runtime Shadow Stack: Protection against malicious return address modifications, 2008. http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.120.5702.
[42] skape. Preventing the Exploitation of SEH Overwrites. http://www.uninformed.org/?v=5&a=2&t=txt, 2006.
[43] R. M. Stallman and the GCC Developer Community. GNU Compiler Collection Internals. https://gcc.gnu.org/onlinedocs/gccint/, 2015.
[44] S. Van Acker, N. Nikiforakis, P. Philippaerts, Y. Younan, and F. Piessens. ValueGuard: Protection of native applications against data-only buffer overflows. In Proc. of ICISS, pages 156–170, 2010.
[45] V. van der Veen, N. Dutt-Sharma, L. Cavallaro, and H. Bos. Memory Errors: The Past, the Present, and the Future. In Proc. of RAID, pages 86–106, 2012.