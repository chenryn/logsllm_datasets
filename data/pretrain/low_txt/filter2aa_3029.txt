# Revolutionizing the Field of Grey-box Attack Surface Testing with Evolutionary Fuzzing

**Authors:**
- Jared DeMott
- Dr. Richard Enbody (rmenbody@msu.edu)
- Dr. William Punch

**Conference:**
- DEFCON 2007

**Organization:**
- VDA Labs, LLC
- [www.vdalabs.com](http://www.vdalabs.com)

## Agenda
1. **Goals and Previous Works**
2. **Background**
   - Software, fuzzing, and evolutionary testing
3. **Detailed Description of EFS**
   - GPF, PaiMei, and development++
4. **Initial Benchmarking Results**
5. **Initial Results on a Real-World Application**
6. **Conclusion and Future Works**

## Goals and Previous Works
- **Research Focus:** Building a better fuzzer.
- **EFS (Evolutionary Fuzzing System):** A new type of fuzzer.
- **Current Status:** No definitive proof yet that EFS is superior to existing approaches.
- **Comparison Needed:** Full RFC type, GPF, Autodafe, Sulley, etc.
- **Unique Approach:** As of June 21, 2007, no other available fuzzers learn the protocol via a grey-box evolutionary approach.
- **Related Research:**
  - Embleton, Sparks, and Cunningham’s Sidewinder research (code not released).
  - Hoglund claims to have recreated something similar to Sidewinder but has not released details.
  - Autodafe and Sulley are grey-box but require a capture (like GPF) or a definition file (like Spike) and do not evolve.

## Section 1: Background
### Software Testing
- **Challenges:**
  - Difficult, tedious, and labor-intensive.
  - Cannot prove anything other than the existence of bugs.
  - Poorly integrated into the development process.
  - Often abused and/or misunderstood.
  - Has a stigma as being "easier" than engineering.
- **Costs:**
  - Approximately 50% of initial development costs.
  - Primary method for gaining confidence in the correctness of software (pre-release).
  - When done right, increases usability, reliability, and security.
- **Example:**
  - Microsoft's Security Development Lifecycle (SDL).

### Fuzzing, Testing, QC, and QA
- **Fuzzing:**
  - One small piece of the bigger puzzle, but shown to be useful for ensuring better security.
  - Another term for interface robustness testing.
  - Focuses on:
    - Input validation errors.
    - Dynamic testing of the finished product.
    - Interfaces with security implications (attack surface).
- **Attack Surface:**
  - Portion of code that is externally exercisable in the finished product.
  - Changes of privilege may occur.

### Evolutionary Testing
- **Definition:**
  - Uses evolutionary algorithms (GAs) to discover better test data.
  - Inspired by evolutionary biology.
- **Key Components:**
  - Granular fitness function.
  - Requires structural (white-box) information (source code).
- **Current ET Method for Deriving Fitness:**
  - Approach_level + norm(branch distance).
  - Example: `fitness = 2 + norm(10)` (Zero means we've found test data).

## Section 2: Detailed Description of EFS
### How the Evolution Works
- **GA or GP?**
  - Variable length GA, not working to find code snippets as in GP.
  - Code coverage + diversity = fitness function.
  - Niching or speciation used for diversity.
- **Corollaries:**
  - Code coverage does not equal security, but less than 100% attack surface coverage means even less security.
  - 100% attack surface coverage + diverse test cases that follow and break the protocol with attack/fuzzing heuristics throughout = the best approach known.
- **Data Structures:**
  - Pools, Sessions, Tokens, Legs.
- **Evolutionary Operations:**
  - Session Crossover, Session Mutation, Pool Crossover, Pool Mutation.

### Simple Example of Maturing EFS Data
- **Generation 1:**
  - S1: “USER #$%^&*Aflkdsjflk”
  - S2: “ksdfjkj\nPASS %n%n%n%n”
  - S3: “\r\njksd Jared9338498\d\d\xfefe”
- **Generation 15:**
  - S1: “USER #$%\n PASS %n%n%n%n\r\njksd”
  - S2: “PASS\nQUIT NNNNNNNNNN\r\n”
  - S3: “RETR\r\nUSER ;asidf;asifh; kldsjf;kdfj”

### EFS: GPF –E Parameters
- **Parameters:**
  - MySQL Host, User, Password
  - ID, Generation
  - PaiMei Host, Port, Stalk Type
  - Playmode, Host, Port, Sport, Proto, Delay, Wait
  - Display Level, Print Choice
  - Pools, MaxSessions, MaxLegs, MaxToks, MaxGenerations, SessionMutationRate, PoolCrossoverRate, PoolMutationRate
  - UserFunc, SeedFile, Proxy

### EFS: Stalker Start-up Sequence
- **Steps:**
  - Create and load PIDA file using IDApro.
  - Load PIDA file in PaiMei.
  - Configure and start test target.
  - Stalk by functions or basic blocks.
  - Filter common breakpoints.
  - Start-up, connect, send junk, disconnect, GUI.
  - Connect to MySQL.
  - Listen for incoming GPF connection.
  - Start GPF in the –E (evolutionary) mode.

## Section 3: Research Evaluation
### Benchmarking EFS
- **Metrics:**
  - Attack surface coverage.
  - Text and Binary protocols.
  - Functions vs. Basic Blocks.
  - Pool vs. Diversity (also called niching).
- **Toolkit:**
  - Two network programs to test EFS’s ability to discover a protocol.
  - Clear text (TextServer).
  - Binary (BinaryServer).
  - Intend to insert easy and hard-to-find bugs to test 0-day hunting ability.

### TextServer
- **Settings:**
  - Low (1 path), Medium (9 paths), High (19 paths).
- **Protocol:**
  - “Welcome.\r\n Your IP is 192.168.31.103”
  - “cmd x\r\n” 
  - “Cmd x ready. Proceed.\r\n”
  - “y\r\n” 
  - “Sub Cmd y ok.\r\n”
  - “calculate\r\n” 
  - “= x + y\r\n”

### Measuring the Attack Surface
- **Example:**
  - TextServer on Medium:
    - Startup and shutdown: 137 BBs or 23% of code.
    - Network code: 15 BBs or 3% of code.
    - Parsing: 94 BBs or 16% of code.
    - Total Attack Surface: 109 BBs or 18% of code.
    - Code accounted for: 137+94 BBs or 39%.

### Seed File for TextServer
- **Contents:**
  - “\r\n”
  - “calculate”
  - “cmd “
  - “1”
  - “2”
  - “3”
  - “4”
  - “5”
  - “6”
  - “7”
  - “8”
  - “9”

### Clear Text Results
- **Findings:**
  - EFS had no trouble learning the language of TextServer.exe.
  - Best session was found quickly.
  - Entire attack surface was not completely covered.
  - Used pools to increase session diversity with some success but still not 100%.

### Binary Protocol Results
- **Initial Tests:**
  - Lengths should not be too much trouble as EFS/GPF has a token type for lengths.
  - Hashes are not yet implemented in GPF.
  - Binary protocol not yet implemented/tested.

### Functions vs. Basic Blocks
- **Recommendations:**
  - For applications with few functions, use basic blocks.
  - For more complex protocols, functions suffice and increase run speed.

### Testing the Effects of Pools
- **Findings:**
  - Pools work to achieve better session diversity.
  - Achieved better crash diversity in gFTP.
  - Did not achieve 100% coverage of the attack surface.
  - Case study at the end will show the positive effects of pools.

### Niching (or Speciation) to Foster Diversity
- **Recently Implemented:**
  - Provides a fitness boost for sessions and pools that are diverse when compared to the best.
  - Fitness = Hits + ( (UNIQUE/BEST) * (BEST-1) )
  - UNIQUE: number of hits not found in the best session.
  - BEST: Session or Pool with the best code coverage fitness.

### Diversity in Action
- **Example:**
  - S1: 10 hits - (a, b, c, d, e, f, g, h, i, j)
  - S2: 7 hits - (a, b, d, e, f, g, h)
  - S3: 5 hits - (v, w, x, y, z)
  - Final fitnesses:
    - S1: 10 + ( (0/10) * 9) = 10
    - S2: 7 + ( (0/10) * 9) = 7
    - S3: 5 + ( (5/10) * 9) = 9.5

### Pools and Diversity
- **High, BBs, 1 Pool:**
  - Best Session: 43
  - Diversity Peak: 80
  - Downward trend
- **High, BBs, Multi-Pool:**
  - Best Session: 47
  - Diversity Peak: 87
  - Up and down trend
- **High, BBs, Multi-Pool, DIVERSITY ON:**
  - AVG: 46
  - Total Peak: 107
  - Up and down trend

## Section 4: Results
### Initial Results
- **Golden FTP:**
  - Found lots of bugs.
- **IIS FTP/SMTP:**
  - Found no bugs but showed some instability in FTP.
  - Would lock or die occasionally.
  - Plan to test many more.
  - Haven't tried any with diversity on yet.

### Challenges and Future Work
- **Modifying EFS:**
  - To work on files as well.
  - Compare performance with existing fuzzing technologies.
  - Determine the probability of finding various bug types.
  - Identify what bugs can be found and in what software.
- **General Domain Robustness:**
  - File fuzzing == dumb fuzzing.
  - Network apps == Intelligent (RFC aware) fuzzing.
- **PIDA Files:**
  - Great but a pain.
  - Binary could be obfuscated, encrypted, or IDA just doesn’t do well with it.
- **Speed:**
  - Auto-detecting the optimal session-wait to determine if functions or basic blocks are more practical.
- **Binary Protocols:**
  - Need more testing here.
- **Normal Testing Challenges:**
  - Monitoring, instrumentation, logging, statistics, etc.

## References
1. J. DeMott, R. Enbody, W. Punch, “Revolutionizing the Field of Grey-box Attack Surface Testing with Evolutionary Fuzzing”, BlackHat and Defcon 2007.
2. P. McMinn and M. Holcombe, “Evolutionary Testing Using an Extended Chaining Approach”, ACM Evolutionary Computation, Pgs 41-64, Volume 14, Issue 1 (March 2006).
3. J. DeMott, “Benchmarking Grey-box Robustness Testing Tools with an Analysis of the Evolutionary Fuzzing System (EFS)”, continuing PhD research.

## Acknowledgments
- **Thanks to:**
  - God
  - Family (Wonderful wife and two boys who think I'm the coolest.)
  - Friends
  - BH and DEFCON
  - Applied Security, Inc.
  - Michigan State University
  - JS -- my hacker bug from VDA Labs
  - Arun K. from Infosecwriters.com
  - L@stplace for letting me do CTF with them