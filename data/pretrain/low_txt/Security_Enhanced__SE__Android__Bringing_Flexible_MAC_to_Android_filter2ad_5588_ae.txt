# Summary

This paper explains the need for mandatory access control (MAC) in Android, identifies the challenges to enabling the effective use of SELinux in Android, and presents how these challenges were overcome in the SE Android reference implementation. The benefits of SE Android are concretely demonstrated through a series of case studies on the impact of SE Android on public Android root exploits and application vulnerabilities. The size and performance overhead imposed by the implementation is evaluated and shown to be negligible.

# 5.2. Performance

To ensure that SE Android is acceptable for mainline Android, it must not impose significant runtime performance overhead. To measure this, we ran two well-known benchmark applications from the Google Play Store: AnTuTu by AnTuTu Labs and Benchmark by Softweg. Each benchmark was executed on both the AOSP and SE Android builds on the same device, with a large number of trials to sharpen the distribution. We ensured that the same number of apps/services were loaded and running at any time during the tests.

### 5.2.1. AnTuTu Performance Test

The results for 200 runs of the AnTuTu benchmark on both AOSP and SE Android are shown in Table 5. The memory, integer, and float tests should be unaffected by SE Android as they do not involve system calls. The score3d and score2d tests measure graphical performance and should also be unaffected. These tests measure frames per second (fps) for various images and graphics. The sd-write and sdread tests perform writes and reads on SD-card storage, measuring data transfer rates. The database I/O test exercises the Android SQLite database functionality. For these tests, we expect some small overhead from SE Android due to the creation and fetching of extended attributes for file security labeling and additional permission checking. For most tests, the SE Android result shows negligible overhead and is within one standard deviation of the AOSP result.

| **Test** | **AOSP Mean** | **AOSP SD** | **SE Android Mean** | **SE Android SD** |
|----------|---------------|-------------|---------------------|-------------------|
| Total Score | 4172.68 | 148.83 | 4165.31 | 148.83 |
| Memory | 507.05 | 51.81 | 514.27 | 51.81 |
| Integer | 838.89 | 57.61 | 842.95 | 57.61 |
| Float | 672.25 | 61.48 | 673.68 | 61.48 |
| Score2D | 279.85 | 36.22 | 273.23 | 36.22 |
| Score3D | 1230.67 | 0.86 | 1230.46 | 0.86 |
| SD Read | 191.11 | 0.662 | 191.01 | 0.662 |
| SD Write | 115.45 | 5.61 | 115.15 | 5.61 |
| Database | 337.40 | 22.85 | 324.55 | 22.85 |

**Table 5. AnTuTu Comparative Benchmarking (n = 200) Full Maguro-Userdebug (4.2)**

### 5.2.2. Softweg Performance Test

The results for 200 runs of the Benchmark by Softweg on both AOSP and SE Android are shown in Table 6. The memory and CPU scores should be unaffected by SE Android as they do not involve system calls. The graphics scores measure MPixels per second for transparent and opaque image overlays and should also be unaffected. For most tests, the SE Android result shows negligible overhead and is within one standard deviation of the AOSP result. As with AnTuTu, for the filesystem and SD-card tests, we expect some small overhead from SE Android due to the need to create and fetch the extended attributes for file security labeling and additional permission checking. The filesystem write and read tests measured the speed (M/sec) of writing and reading 1M. The create and delete tests measured the time (seconds) it took to create or delete 1000 empty files. These create and delete tests can be viewed as a worst-case overhead for SE Android since the overhead of extended attribute creation and removal is not amortized over any real usage of the file.

| **Test** | **AOSP Mean** | **AOSP SD** | **SE Android Mean** | **SE Android SD** |
|----------|---------------|-------------|---------------------|-------------------|
| Total Memory | 588.88 | 68.61 | 591.71 | 67.28 |
| Copy Memory | 535.11 | 62.35 | 537.68 | 61.13 |
| Total CPU | 3167.07 | 149.51 | 3113.31 | 138.51 |
| MFLOPS DP | 17.61 | 1.09 | 17.46 | 0.98 |
| MFLOPS SP | 41.85 | 5.06 | 41.22 | 5.20 |
| MWIPS DP | 200.86 | 8.83 | 197.16 | 10.10 |
| MWIPS SP | 289.18 | 19.04 | 283.73 | 14.93 |
| VAX MIPS DP | 139.03 | 6.19 | 136.73 | 6.62 |
| VAX MIPS SP | 191.31 | 16.08 | 187.69 | 15.12 |

**Table 6. Softweg Comparative Benchmarking (n = 200) Full Maguro-Userdebug (4.2)**

# 6. Related Work

There has been extensive research into extensions to the Android access control model [14, 39, 13, 36, 38, 7, 18, 15, 10, 6]. Most of these extensions, including Kirin [14], SAINT [39], TaintDroid [13], Porscha [38], AppFence [18], IPC Inspection [15], and QUIRE [10], only address access control at the Android middleware layer and do not provide solutions for the underlying weaknesses of the Linux DAC mechanism. Since any access control model implemented by the Android middleware is fundamentally dependent on kernel layer controls, these solutions remain vulnerable to root exploits and application vulnerabilities described in Section 4. Of these, Kirin and SAINT are the closest to our install-time MAC mechanism and have demonstrated the value of such controls for Android. Our work provides a foundation for supporting such install-time policies in Android.

Prior research has also explored integrating and applying SELinux in embedded systems [9] and in Android [35, 44]. While these efforts have shown how to enable SELinux, they have not addressed many of the challenges present in enabling its effective use in Android, as noted in Section 2. Our work is the first to fully address the integration of SELinux support into the Android kernel and userspace and to create a suitable SELinux policy for Android, as described in Section 3. Our work is also the first to concretely demonstrate the benefits of SELinux for Android through the analysis and testing described in Section 4.

TrustDroid [7] and XManDroid [6] bear the greatest similarity to our work, both in their goals and approach. These systems provided MAC at both the middleware and kernel layers, although the kernel layer solution relied on TOMOYO Linux [37] rather than SELinux. SELinux provides a more natural and complete way of enforcing data separation based on security labels, unlike the pathname-based security model of TOMOYO. Our work fills the gap in mainline Android for kernel layer MAC and provides a sound base on which these systems and others like them can build. Our work would benefit from incorporating some of the ideas for runtime MMAC explored in TrustDroid and XManDroid.

# Availability

The Security Enhanced Android software is available from http://selinuxproject.org/page/SEAndroid. Many of the changes have already been merged into the Android Open Source Project (AOSP) master branch, and ongoing work aims to bring the remaining changes to mainline Android.

# Acknowledgments

We thank the rest of the SE Android development team for their contributions, particularly Joman Chu for his work on device admin support and James Carter for his work on SEAndroidManager. We also thank William Roberts, Haiqing Jiang, Joshua Brindle, Bryan Hinton, Tim Radzykewycz, and the rest of the external SE Android community for their feedback, code review, and contributions of code and policy to SE Android. We thank Kenny Root, Jean-Baptiste Queru, Ying Wang, Matthew Finifter, and the rest of the Google Android team for shepherding the SE Android changes through the AOSP submission process, reviewing the code, integrating it into the AOSP build, and helping to improve it. We thank the anonymous reviewers of the paper for their comments.

# References

[1] Android Open Source Project. Android Security Overview. http://source.android.com/tech/security/.

[2] Android Open Source Project. Publishing on Google Play. http://developer.android.com/guide/publishing/publishing.html.

[3] Android Open Source Project. Security and Permissions. http://developer.android.com/guide/topics/security/security.html.

[4] Android Open Source Project. What is Android? http://developer.android.com/guide/basics/what-is-android.html.

[5] AnTuTu Labs. AnTuTu Benchmark. https://play.google.com/store/apps/details?id=com.antutu.ABenchMark.

[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards Taming Privilege-Escalation Attacks on Android. In 19th Annual Network & Distributed System Security Symposium, February 2012.

[7] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and B. Shastry. Practical and Lightweight Domain Isolation on Android. In 1st ACM CCS Workshop on Security and Privacy in Mobile Devices (SPSM’11), October 2011.

[8] J. Carter. Using GConf as an Example of How to Create an Userspace Object Manager. In 3rd Annual SELinux Symposium, pages 25–32, March 2007.

[9] R. Coker. Porting NSA Security Enhanced Linux to Handheld Devices. In 2003 Linux Symposium, July 2003.

[10] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. QUIRE: Lightweight Provenance for Smart Phone Operating Systems. In 20th USENIX Security Symposium, August 2011.

[11] J. Donenfeld. Linux Local Privilege Escalation via SUID /proc/pid/mem Write. http://blog.zx2c4.com/749.