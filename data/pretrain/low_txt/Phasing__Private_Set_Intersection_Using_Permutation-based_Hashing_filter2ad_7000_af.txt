### Communication (Table 8)

The amount of communication performed during protocol execution is often more limiting than the required computation power, as the latter can be scaled up more easily by using more machines. The naive hashing approach has the lowest communication among all protocols, followed by the server-aided solution of [15]. Among the secure two-party PSI protocols, the DH-based ECC protocol of [18] has the lowest communication. In the setting for \( n = 2^{24} \) elements of short bit-length \( \sigma = 32 \) bits, our OT-Phasing protocol nearly achieves the same complexity as the DH-based ECC protocol, which is due to the use of fewer Oblivious Transfers (OTs).

### Experiments with Different Input Sizes

To examine the setting where the two parties have different input sizes, we set \( n_1 \in \{2^{16}, 2^{20}, 2^{24}\} \) and \( n_2 \in \{2^8, 2^{12}\} \) and run the protocols on all combinations such that \( n_2 \ll n_1 \). Note that we excluded the original OT-based PSI protocol of [22] from the comparison, as the bin size \( \max\beta \) becomes large when \( \beta \ll n \), and the memory requirement when padding all bins to \( \max\beta \) elements quickly exceeded the available memory.

In this setting, unlike the equal input sizes experiments in §8.2.1, we use \( h = 2 \) hash functions instead of \( h = 3 \). This results in less total computation and communication (cf. §6.2). Since we use \( h = 2 \) hash functions, we also increase the number of bins from \( 1.2n_2 \) to \( 2.4n_2 \). Furthermore, we do not use a stash for our OT-Phasing protocol with different input sizes, as the stash would greatly increase the overall communication. However, not using a stash reveals some information about \( P_2 \)'s set (cf. §7). We show how to secure our protocol at a much lower cost by increasing the number of bins in the full version [21].

### Run-Time (Table 9)

Similar to the results for equal set sizes, the naive hashing protocol is the fastest protocol for all parameters. The server-aided protocol of [15] is the second fastest protocol but scales better than the naive hashing protocol for an increasing number of elements. The best scaling protocol is our OT-Phasing protocol. It achieves the same performance as the server-aided protocol for \( n_2 = 2^8 \), \( n_1 = 2^{24} \) with short bit-length \( \sigma = 32 \). For \( n_1 = 2^{24} \), its run-time is at most twice that of the server-aided protocol in both network settings.

When switching to the WAN setting, the run-times of all protocols are increased by a factor of 4-6 while the relative performance between the protocols remains similar, analogously to the equal set size experiments.

### Communication (Table 10)

As expected, the naive hashing solution again has the lowest communication overhead. Surprisingly, our OT-Phasing protocol achieves nearly the same communication as the server-aided protocol of [15] and has only two times the communication of the naive hashing protocol for all bit-lengths. Furthermore, our OT-Phasing protocol requires a factor of 2-3 less communication than the DH-based ECC protocol of [18] for nearly all parameters. The low communication of our OT-Phasing protocol for unequal set sizes is due to the low number of OTs performed.

### Acknowledgements

We thank Elaine Shi and the anonymous reviewers of USENIX Security 2015 for their helpful comments. This work was supported by the European Union’s 7th Framework Program (FP7/2007-2013) under grant agreement n. 609611 (PRACTICE) and via a Marie Curie Career Integration Grant, by the DFG as part of project E3 within the CRC 1119 CROSSING, by the German Federal Ministry of Education and Research (BMBF) within EC SPRIDE, by the Hessian LOEWE excellence initiative within CASED, by a grant from the Israel Ministry of Science and Technology (grant 3-9094), by a Magneton grant of the Israeli Ministry of Economy, by the Israel Science Foundation (Grant No. 483/13), and by the Israeli Centers of Research Excellence (I-CORE) Program (Center No. 4/11).

### References

[1] Y. Arbitman, M. Naor, and G. Segev. Backyard cuckoo hashing: Constant worst-case operations with a succinct representation. In FOCS’10, pages 787–796. IEEE, 2010.

[2] G. Asharov, Y. Lindell, T. Schneider, and M. Zohner. More efficient oblivious transfer and extensions for faster secure computation. In CCS’13, pages 535–548. ACM, 2013.

[3] E. De Cristofaro and G. Tsudik. Practical private set intersection protocols with linear complexity. In FC’10, volume 6052 of LNCS, pages 143–159. Springer, 2010.

[4] E. De Cristofaro and G. Tsudik. Experimenting with fast private set intersection. In TRUST’12, volume 7344 of LNCS, pages 55–73. Springer, 2012.

[5] D. Demmler, T. Schneider, and M. Zohner. ABY - A framework for efficient mixed-protocol secure two-party computation. In NDSS’15. The Internet Society, 2015.

[6] M. Dietzfelbinger, A. Goerdt, M. Mitzenmacher, A. Montanari, R. Pagh, and M. Rink. Tight thresholds for cuckoo hashing via XORSAT. In ICALP’10, volume 6198 of LNCS, pages 213–225. Springer, 2010.

[7] C. Dong, L. Chen, and Z. Wen. When private set intersection meets big data: An efficient and scalable protocol. In CCS’13, pages 789–800. ACM, 2013.

[8] S. Even, O. Goldreich, and A. Lempel. A randomized protocol for signing contracts. Communications of the ACM, 28(6):637–647, 1985.

[9] M. J. Freedman, C. Hazay, K. Nissim, and B. Pinkas. Efficient set-intersection with simulation-based security. In Journal of Cryptology, pages 1–41. Springer, October 2014.

[10] M. J. Freedman, K. Nissim, and B. Pinkas. Efficient private matching and set intersection. In EUROCRYPT’04, volume 3027 of LNCS, pages 1–19. Springer, 2004.

[11] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game or a completeness theorem for protocols with honest majority. In STOC’87, pages 218–229. ACM, 1987.

[12] Y. Huang, D. Evans, and J. Katz. Private set intersection: Are garbled circuits better than custom protocols? In NDSS’12. The Internet Society, 2012.

[13] B. A. Huberman, M. Franklin, and T. Hogg. Enhancing privacy and trust in electronic communities. In EC’99, pages 78–86. ACM, 1999.

[14] S. Jarecki and X. Liu. Efficient oblivious pseudorandom function with applications to adaptive OT and secure computation of set intersection. In TCC’09, volume 5444 of LNCS, pages 577–594. Springer, 2009.

[15] S. Kamara, P. Mohassel, M. Raykova, and S. Sadeghian. Scaling private set intersection to billion-element sets. In FC’14, volume 8437 of LNCS, pages 195–215. Springer, 2014.

[16] A. Kirsch, M. Mitzenmacher, and U. Wieder. More robust hashing: Cuckoo hashing with a stash. SIAM Journal of Computing, 39(4):1543–1561, 2009.

[17] V. Kolesnikov and R. Kumaresan. Improved OT extension for transferring short secrets. In CRYPTO’13 (2), volume 8043 of LNCS, pages 54–70. Springer, 2013.

[18] C. Meadows. A more efficient cryptographic matchmaking protocol for use in the absence of a continuously available third party. In S&P’86, pages 134–137. IEEE, 1986.

[19] R. Pagh and F. F. Rodler. Cuckoo hashing. In European Symposium on Algorithms (ESA’01), volume 2161 of LNCS, pages 121–133. Springer, 2001.

[20] R. Pagh and F. F. Rodler. Cuckoo hashing. Journal of Algorithms, 51(2):122–144, 2004.

[21] B. Pinkas, T. Schneider, G. Segev, and M. Zohner. Phasing: Private set intersection using permutation-based hashing. Cryptology ePrint Archive, Report 2015/634, 2015. http://eprint.iacr.org/2015/634.

[22] B. Pinkas, T. Schneider, and M. Zohner. Faster private set intersection based on OT extension. In USENIX Security Symposium, pages 797–812. USENIX, 2014.

[23] M. Raab and A. Steger. “Balls into bins” - a simple and tight analysis. In RANDOM’98, volume 1518 of LNCS, pages 159–170. Springer, 1998.

[24] X. Shaun Wang, C. Liu, K. Nayak, Y. Huang, and E. Shi. iDASH secure genome analysis competition using ObliVM. Cryptology ePrint Archive, Report 2015/191, 2015. http://eprint.iacr.org/2015/191.

[25] A. C. Yao. How to generate and exchange secrets. In FOCS’86, pages 162–167. IEEE, 1986.