### Optimized Text

**Browser Behavior and Content Security Policy (CSP)**
When a browser encounters a CSP, it enforces the policy and may block certain actions. For instance, if cross-origin resource sharing (CORS) is involved, the server must explicitly allow the request. Educating customers about these nuances can be challenging. One participant noted, "It's difficult to explain that the browser decides based on the CSP and then forbids certain actions, but when it comes to cross-origin resource sharing, it's the server that controls this."

**Misunderstandings of CSP Capabilities**
Three participants only explained that if a CSP were present on an attacked page, it would prevent data exfiltration to an attacker-controlled server. However, they did not mention that the CSP also prohibits the execution of malicious code. The full results of our drawing task analysis are available in Appendix H. Notably, one participant drew a Cross-Site Request Forgery (CSRF) attack instead of a Cross-Site Scripting (XSS) attack.

**Key Takeaways:**
- Server-side XSS variants are more prominent in developers' minds.
- Two participants mistakenly believed that XSS is a server-side problem and concluded that CSP is enforced on the server.

**Reflections on Methodology**
The extensive pre-study eliminated any application bugs that could have caused issues during the programming task. The coding task achieved its intended goal by revealing strategies, information sources, and roadblocks. Participants often remembered additional concepts or problems during the coding task that they had forgotten during the interview. 

The remote-control process for the coding task reduced setup time but was more exhausting for participants, as they had to control a foreign system. Network lags also affected performance. Running the application natively allowed participants to work as they preferred but required significant setup effort. Using Docker files provided a good balance, with a quick setup (usually less than three minutes) and the ability to use participants' coding environments. However, changes to the code required a Docker rebuild, causing a slight delay (less than 20 seconds). Mounting the directory directly into Docker for live updates was considered but posed risks of inconsistencies.

The drawing task enriched our data and provided deeper insights into participants' understanding of XSS and CSP. Some misconceptions would not have been uncovered without this task. Ten participants used Zoom’s annotate feature, which sometimes did not appear in recordings. Fortunately, we took screenshots of the drawings. Using diagrams.net for the drawing task required minimal setup and was easier for participants, with both recordings capturing the process.

**Recruitment Challenges**
Only a small fraction of websites deploy CSP, making it challenging to recruit web developers with relevant experience. Our targeted group is limited, hard to reach, and highly educated in both web development and IT security. We compensated participants with a €50 voucher for their time. Out of 30 potential participants who completed the screening survey, only 12 participated in the interview, including the drawing and coding tasks.

Initial recruitment attempts, such as bulk emails to top sites with CSP, resulted in no responses. Using OWASP as a trusted third party was more successful, with 13 potential participants completing the survey. Despite reminders, only six responded. Cold-calling web development companies and LinkedIn advertisements were largely unsuccessful, with indications that many entries were bots. A talk at an OWASP event resulted in five new entries, with four participating in the interview. One participant was recruited via word-of-mouth. Overall, using a trusted third party like OWASP was the most effective recruitment method.

**Limitations**
Our study has three main limitations:
1. **Sample Bias:** Our sample may be biased towards security-aware developers due to recruitment through OWASP.
2. **Interview Limitations:** While we built rapport and ensured free and willing participation, some concepts may have been missed or misstated. The coding task supplemented the interview to mitigate this.
3. **Artificial Setting:** The coding task's artificial setting may have introduced bias. We tried to make the task as pleasant as possible by offering multiple programming languages and setup options, and clarifying that we were interested in the process rather than the correctness of solutions.

**Conclusion**
This paper presents the first qualitative study involving 12 real-world web developers to evaluate the usability of CSP. Through interviews, drawing, and coding tasks, we investigated participants' mindsets regarding XSS and uncovered reasons behind the use of insecure CSP practices. Motivations for deploying CSP range from mitigating XSS to fulfilling a checkbox requirement from penetration tests. We identified knowledge gaps and technical roadblocks, arguing that better information sources and standardized implementation by browser vendors could ease deployment. Tools for generating, evaluating, and analyzing CSPs are common. Our methodological choices and lessons learned, particularly in recruitment, highlight the challenges and successes of our approach. We hope our insights will inform the design of future web security mechanisms to avoid similar complexities.

**Acknowledgements**
We thank the reviewers for their constructive feedback and our colleagues and student helpers for their assistance in the pre-study and transcription process. We also extend our gratitude to all participants for their time and valuable insights.

**References**
[1] Vishal Arghode. Qualitative and quantitative research: Paradigmatic differences. Global Education Journal, 2012(4), 2012.
[2] A. Barth. RFC 6454: The Web Origin Concept. Online at https://www.ietf.org/rfc/rfc6454.txt, 2011.
[3] A Blandford, D Furniss, and S Makri. Introduction: Behind the scenes. 2016.
[4] Chromium Blog. Protecting users from insecure downloads in Google Chrome. https://blog.chromium.org/2020/02/protecting-users-from-insecure.html.
[5] Mozilla Security Blog. Firefox 83 introduces HTTPS-only mode. https://blog.mozilla.org/security/2020/11/17/firefox-83-introduces-https-only-mode/.
[6] Virginia Braun and Victoria Clarke. Using thematic analysis in psychology. Qualitative Research in Psychology, 3(2):77–101, 2006.
[7] Stefano Calzavara, Alvise Rabitti, and Michele Bugliesi. Content security problems?: Evaluating the effectiveness of content security policy in the wild. In CCS, 2016.
[8] Stefano Calzavara, Sebastian Roth, Alvise Rabitti, Michael Backes, and Ben Stock. A tale of two headers: a formal analysis of inconsistent click-jacking protection on the web. In 29th USENIX Security Symposium (USENIX Security 20), pages 683–697, 2020.
[9] Stefano Calzavara, Tobias Urban, Dennis Tatang, Marius Steffens, and Ben Stock. Reining in the web’s inconsistencies with site policy. In NDSS, 2021.
[10] John L Campbell, Charles Quincy, Jordan Osserman, and Ove K Pedersen. Coding in-depth semistructured interviews: Problems of unitization and intercoder reliability and agreement. Sociological Methods & Research, 42(3):294–320, 2013.
[11] content-security policy.com. CSP: Hashing. https://content-security-policy.com/hash/
[12] content-security policy.com. CSP: Nonces. https://content-security-policy.com/nonce/
[13] MITRE Common Weakness Enumeration (CWE). CVE search for security vulnerabilities (Cross Site Scripting (XSS)). https://www.cvedetails.com/vulnerability-list.php?vendor_id=0&product_id=0&version_id=0&page=15&hasexp=0&opdos=0&opec=0&opov=0&opcsrf=0&opgpriv=0&opsqli=0&opxss=1&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opfileinc=0&opginf=0&cvssscoremin=0&cvssscoremax=0&year=0&month=0&cweid=0&order=1&trc=19379&sha=e3bb5586965f5a13bfaa78233a10ebc3f9606d12
[14] diagrams.net. Diagrams. https://www.diagrams.net/
[15] Adam Doupé, Weidong Cui, Mariusz H Jakubowski, Marcus Peinado, Christopher Kruegel, and Giovanni Vigna. DeDacota: Toward preventing server-side XSS via automatic code and data separation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, pages 1205–1216, 2013.
[16] TeamViewer Germany GmbH. TeamViewer. https://www.teamviewer.com/
[17] Google. WithGoogle: Content Security Policy. https://csp.withgoogle.com/docs/strict-csp.html
[18] Peter Leo Gorski, Luigi Lo Iacono, Stephan Wiefling, and Sebastian Möller. Warn if secure or how to deal with security by default in software development?. In HAISA, pages 170–190, 2018.
[19] Daniel Hausknecht, Jonas Magazinius, and Andrei Sabelfeld. May I?-Content Security Policy endorsement for browser extensions. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 261–281. Springer, 2015.
[20] Ben Hayak. Same Origin Method Execution (SOME). Online at http://www.benhayak.com/2015/06/same-origin-method-execution-some.html, 2015.
[21] Mario Heiderich, Marcus Niemietz, Felix Schuster, Thorsten Holz, and Jörg Schwenk. Scriptless attacks: stealing the pie without touching the sill. In Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012.
[22] Mario Heiderich, Jörg Schwenk, Tilman Frosch, Jonas Magazinius, and Edward Z Yang. MXSS attacks: Attacking well-secured web-applications by using innerHTML mutations. In ACM SIGSAC conference on Computer & communications security. ACM, 2013.
[23] Iulia Ion, Niharika Sachdeva, Ponnurangam Kumaraguru, and Srdjan Čapkun. Home is safer than the cloud! privacy concerns for consumer cloud storage. In Proceedings of the Seventh Symposium on Usable Privacy and Security, pages 1–20, 2011.
[24] Internet Security Research Group (ISRG). Let's Encrypt. https://letsencrypt.org/
[25] Markus Jakobsson, Zulfikar Ramzan, and Sid Stamm. JavaScript breaks free. http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.3195&rep=rep1&type=pdf
[26] Burke Johnson and Larry Christensen. Educational research: Quantitative, qualitative, and mixed approaches. Sage, 2008.
[27] Ruogu Kang, Laura Dabbish, Nathaniel Fruchter, and Sara Kiesler. "My data just goes everywhere:" User mental models of the internet and implications for privacy and security. In Eleventh Symposium On Usable Privacy and Security (SOUPS 2015), pages 39–52, 2015.
[28] Amit Klein. DOM-based cross-site scripting or XSS of the third kind. http://www.webappsec.org/projects/articles/071105.shtml, 2005.
[29] Klaus Krippendorff. Content analysis: An introduction to its methodology. Sage, London, 2004.
[30] Katharina Krombholz, Karoline Busse, Katharina Pfeffer, Matthew Smith, and Emanuel von Zezschwitz. "If HTTPS Were Secure, I Wouldn’t Need 2FA"-End User and Administrator Mental Models of HTTPS. IEEE Security & Privacy, 2019.
[31] Thomas D LaToza, Gina Venolia, and Robert DeLine. Maintaining mental models: a study of developer work habits. In Proceedings of the 28th international conference on Software engineering, pages 492–501, 2006.
[32] Jonathan Lazar, Jinjuan Heidi Feng, and Harry Hochheiser. Research methods in human-computer interaction. Morgan Kaufmann, 2017.
[33] Sebastian Lekies, Ben Stock, and Martin Johns. 25 million flows later: Large-scale detection of DOM-based XSS. In CCS, 2013.
[34] Sebastian Lekies, Krzysztof Kotowicz, Samuel Groß, Eduardo A Vela Nava, and Martin Johns. Code-reuse attacks for the web: Breaking cross-site scripting mitigations via script gadgets. In ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM, 2017.
[35] Calendly LLC. Calendly. https://calendly.com/
[36] Alena Naiakshina, Anastasia Danilova, Christian Tiefenau, and Matthew Smith. Deception task design in developer password studies: Exploring a student sample. In Fourteenth Symposium on Usable Privacy and Security (SOUPS 2018), pages 297–313, 2018.
[37] Alena Naiakshina, Anastasia Danilova, Eva Gerlitz, and Matthew Smith. On conducting security developer studies with CS students: Examining a password-storage study with CS students, freelancers, and company developers. In Proceedings of the 2020 CHI Conference on Human Factors in Computing Systems, pages 1–13, 2020.
[38] Mozilla Development Network. CSP: frame-ancestors. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors
[39] Open Web Application Security Project (OWASP). OWASP Top 10 Web Application Security Risks 2017. https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)
[40] Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou, Yan Chen, and Tingzhe Zhou. CSPAutoGen: Black-box enforcement of content security policy upon real-world websites. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 653–665, 2016.
[41] Phil Ringnalda. Getting around IE’s MIME type mangling. http://weblog.philringnalda.com/2004/04/06/getting-around-ies-mime-type-mangling
[42] David Ross. Happy 10th birthday cross-site scripting. Online at https://blogs.msdn.microsoft.com/dross/2009/12/15/happy-10th-birthday-cross-site-scripting/, 2009.