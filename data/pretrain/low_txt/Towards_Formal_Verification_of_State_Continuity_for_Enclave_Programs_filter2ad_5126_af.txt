### Monotonic State Interfaces and Stable Predicates for Efficient Modeling of States

**RollSec [22]** is a prototype framework that extracts variable-based program states using program syntax, control flow, and data flow information. It requires monitoring, recording, and compensation modules to identify and manage state changes.

### Symbolic Verification of State Continuity Properties for Enclave Programs

In this paper, we present the first attempt at symbolic verification of state continuity properties for enclave programs. We demonstrate that SGX-specific semantics and operations can be modeled as multiset rewriting rules, and the state continuity property can be reasoned about using the Tamarin Prover. Our method's effectiveness is shown through the analysis of three types of state continuity flaws in three open-source projects. This study highlights the potential of symbolic verification tools, such as the Tamarin Prover, in more diverse and complex scenarios.

### Acknowledgments

We are grateful to Cas Cremers for valuable feedback and guidance, as well as other reviewers for their insightful comments. We also thank the Tamarin community, particularly Jannik Dreier, Jonathan Hoyland, Benjamin Kiesl, and Kevin Milner, for their support and insights on the Google forum. The authors from The Ohio State University were partially supported by NSF grant 1834213.

---

### References

[1] **Hyperledger Sawtooth.** Retrieved January 20, 2021, from https://www.hyperledger.org/use/sawtooth.

[2] **Hyperledger Sawtooth-PoET Patch.** Retrieved January 12, 2021, from https://github.com/hyperledger/sawtooth-poet/commit/6f9db4998a11b427c6a24ea42f9891cb9ff0101e.

[3] **Hyperledger Sawtooth-PoET Vulnerable.** Retrieved January 12, 2021, from https://github.com/hyperledger/sawtooth-core/releases/tag/v1.0.5, Filepath /consensus/poet/sgx/sawtooth_poet_sgx/libpoet_enclave/poet_enclave.cpp.

[4] **Intel SGX Software Development Kit (SDK).** Retrieved January 27, 2021, from https://software.intel.com/content/www/us/en/develop/topics/software-guard-extensions/sdk.html.

[5] **Tamarin Manual.** Retrieved January 18, 2021, from https://tamarin-prover.github.io/manual/book/001_introduction.html.

[19] Y. Chen, W. Sun, N. Zhang, Q. Zheng, W. Lou, and Y. T. Hou. Towards efficient fine-grained access control and trustworthy data processing for remote monitoring services in IoT. *IEEE Transactions on Information Forensics and Security*, 14(7):1830–1842, 2019. GitHub: https://github.com/fishermano/SGXEnabledAccess.

[20] V. Cortier, S. Delaune, and J. Dreier. Automatic generation of sources lemmas in Tamarin: towards automatic proofs of security protocols. In *European Symposium on Research in Computer Security*, pages 3–22. Springer, 2020.

[21] C. Cremers, M. Horvat, J. Hoyland, S. Scott, and T. van der Merwe. A comprehensive symbolic analysis of TLS 1.3. In *ACM SIGSAC Conference on Computer and Communications Security*, pages 1773–1788. ACM, October 2017.

[22] W. Dai, Y. Du, H. Jin, W. Qiang, D. Zou, S. Xu, and Z. Liu. Rollsec: Automatically secure software states against general rollback. *International Journal of Parallel Programming*, 46:788–805, 2017.

[6] D. Ahman, C. Fournet, C. Hrițcu, K. Maillard, A. Rastogi, and N. Swamy. Recalling a witness: Foundations and applications of monotonic state. *Proc. ACM Program. Lang.*, 2, December 2017.

[23] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A logic of secure systems and its application to trusted computing. In *2009 30th IEEE Symposium on Security and Privacy*, pages 221–236. IEEE, 2009.

[7] I. Anati, S. Gueron, S. P. Johnson, and V. R. Scarlata. Innovative technology for CPU-based attestation and sealing. In *2nd HASP*, 2013.

[8] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. L. Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer. Scone: Secure Linux containers with Intel SGX. In *12th USENIX OSDI*, 2016.

[9] G. Bai, J. Hao, J. Wu, Y. Liu, Z. Liang, and A. Martin. Trustfound: Towards a formal foundation for model checking trusted computing platforms. In *International Symposium on Formal Methods*, pages 110–126. Springer, 2014.

[10] M. Barbosa, G. Barthe, K. Bhargavan, B. Blanchet, C. Cremers, K. Liao, and B. Parno. Sok: Computer-aided cryptography. *Cryptology ePrint Archive*, Report 2019/1393, 2019. https://eprint.iacr.org/2019/1393.

[11] M. Barnett, B.-Y. E. Chang, R. DeLine, B. Jacobs, and K. Rustan M. Leino. Boogie: A modular reusable verifier for object-oriented programs. In *International Symposium on Formal Methods for Components and Objects*, pages 364–387. Springer, 2005.

[12] D. Basin, J. Dreier, L. Hirschi, S. Radomirovic, R. Sasse, and V. Stettler. A formal analysis of 5G authentication. In *Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security*, pages 1383–1396. ACM, 2018.

[13] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted cloud with Haven. *ACM Transactions on Computer Systems*, 33(3), August 2015.

[14] K. Bhargavan, B. Blanchet, and N. Kobeissi. Verified models and reference implementations for the TLS 1.3 standard candidate. In *2017 IEEE Symposium on Security and Privacy*, pages 483–502. IEEE Computer Society, 2017.

[15] B. Blanchet. Modeling and verifying security protocols with the applied pi calculus and ProVerif. *Foundations and Trends® in Privacy and Security*, 1(1-2):1–135, 2016.

[16] M. Brandenburger, C. Cachin, M. Lorenz, and R. Kapitza. Rollback and forking detection for trusted execution environments using lightweight collective memory. In *2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks*, pages 157–168, 2017.

[17] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai. Stealing Intel secrets from SGX enclaves via speculative execution. In *Proceedings of the 2019 IEEE European Symposium on Security and Privacy*, June 2019.

[18] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. K. Ports. Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems. In *Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems*. ACM, 2008.

[24] L. De Moura and N. Bjørner. Z3: An efficient SMT solver. In *International conference on Tools and Algorithms for the Construction and Analysis of Systems*, pages 337–340. Springer, 2008.

[25] S. Delaune, S. Kremer, M. D. Ryan, and G. Steel. A formal analysis of authentication in the TPM. In *International Workshop on Formal Aspects in Security and Trust*, pages 111–125. Springer, 2010.

[26] A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, J. Protzenko, A. Rastogi, N. Swamy, S. Zanella-Beguelin, K. Bhargavan, J. Pan, and J. K. Zinzindohoue. Implementing and proving the TLS 1.3 record layer. In *2017 IEEE Symposium on Security and Privacy*, pages 463–482, 2017.

[27] D. Dolev and A. Yao. On the security of public key protocols. *IEEE Transactions on Information Theory*, 29(2):198–208, 1983.

[28] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In *Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles*, pages 193–206. ACM, 2003.

[29] G. Girol, L. Hirschi, R. Sasse, D. Jackson, C. Cremers, and D. Basin. A spectral analysis of Noise: A comprehensive, automated, formal analysis of Diffie-Hellman protocols. In *USENIX Security Symposium*, 2020.

[30] M. Hoekstra, R. Lal, P. Pappachan, V. Phegade, and J. Del Cuvillo. Using innovative instructions to create trustworthy software solutions. *HASP@ ISCA*, 11(10.1145):2487726–2488370, 2013.

[31] J. Hoyland. An Analysis of TLS 1.3 and its use in Composite Protocols. PhD thesis, 2018. Royal Holloway, University of London.

[32] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel. Ryoan: A distributed sandbox for untrusted computation on secret data. In *12th USENIX OSDI*, 2016.

[33] C. Jacomme, S. Kremer, and G. Scerri. Symbolic models for isolated execution environments. In *2017 IEEE European Symposium on Security and Privacy*, pages 530–545, 2017.

[34] Y. Jang, J. Lee, S. Lee, and T. Kim. SGX-Bomb: Locking down the processor via rowhammer attack. In *Proceedings of the 2nd Workshop on System Software for Trusted Execution*, pages 1–6, 2017.

[35] N. Kobeissi, K. Bhargavan, and B. Blanchet. Automated verification for secure messaging protocols and their implementations: A symbolic and computational approach. In *IEEE European Symposium on Security and Privacy*, pages 435–450, 2017.

[36] N. Kobeissi, G. Nicolas, and K. Bhargavan. Noise Explorer: Fully automated modeling and verification for arbitrary Noise protocols. In *2019 IEEE European Symposium on Security and Privacy*, pages 356–370, 2019.

[37] S. Kremer and R. Künnemann. Automated analysis of security protocols with global state. *Journal of Computer Security*, 24(5):583–616, 2016.

[38] S. Matetic, M. Ahmed, K. Kostiainen, A. Dhar, D. Sommer, A. Gervais, A. Juels, and S. Capkun. ROTE: Rollback protection for trusted execution. In *26th USENIX Security Symposium*, pages 1289–1306. USENIX Association, 2017.

[39] F. McKeen, I. Alexandrovich, A. Berenzon, C. Rozas, H. Shafi, V. Shanbhogue, and U. Savagaonkar. Innovative instructions and software model for isolated execution. In *2nd HASP*, 2013.

[40] S. Meier, B. Schmidt, C. Cremers, and D. Basin. The Tamarin prover for the symbolic analysis of security protocols. Pages 696–701, 2013.

[41] B. Parno, J. Lorch, J. (JD) Douceur, J. Mickens, and J. M. McCune. Memoir: Practical state continuity for protected modules. In *Proceedings of the IEEE Symposium on Security and Privacy*. IEEE, May 2011.

[42] A. Sakurai. BI-SGX: Secure Cloud Computation. *58th SIGBIO Bioinformatics Study Group*, Japan, 2019. Website: https://bi-sgx.net/, GitHub: https://github.com/hello31337/BI-SGX.

[43] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich. VC3: Trustworthy data analytics in the cloud using SGX. In *36th IEEE Symposium on Security and Privacy*, 2015.

[44] J. Shao, Y. Qin, D. Feng, and W. Wang. Formal analysis of enhanced authorization in the TPM 2.0. In *Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security*, pages 273–284, 2015.

[45] F. Shaon, M. Kantarcioglu, Z. Lin, and L. Khan. A practical encrypted data analytic framework with trusted processors. In *Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS’17)*, Dallas, TX, November 2017.

[46] R. Sinha, S. Rajamani, S. A. Seshia, and K. Vaswani. Moat: Verifying confidentiality of enclave programs. In *The ACM Conference on Computer and Communications Security*. ACM, October 2015.

[47] B. Smyth, M. Ryan, and L. Chen. Formal analysis of anonymity in ECC-based direct anonymous attestation schemes. In *International Workshop on Formal Aspects in Security and Trust*, pages 245–262. Springer, 2011.

[48] D. Xiaodong Song, S. Berezin, and A. Perrig. Athena: A novel approach to efficient automatic security protocol analysis 1. *Journal of Computer Security*, 9(1-2):47–74, 2001.

[49] R. Strackx, B. Jacobs, and F. Piessens. ICE: A passive, high-speed, state-continuity scheme. In *Proceedings of the 30th Annual Computer Security Applications Conference*, pages 106–115. ACM, 2014.

[50] R. Strackx and F. Piessens. Ariadne: A minimal approach to state continuity. In *25th USENIX Security Symposium*, 2016.

[51] F. Tramer, F. Zhang, H. Lin, J.-P. Hubaux, A. Juels, and E. Shi. Sealed-glass proofs: Using transparent enclaves to prove and sell knowledge. *Cryptology ePrint Archive*, Report 2016/635, 2016.

[52] C.-C. Tsai, D. E. Porter, and M. Vij. Graphene-SGX: A practical library OS for unmodified applications on SGX. In *USENIX ATC*, 2017.

[53] N. Weichbrodt, A. Kurmus, P. Pietzuch, and R. Kapitza. AsyncShock: Exploiting synchronization bugs in Intel SGX enclaves. In *Computer Security – ESORICS 2016*, pages 440–457. Springer, 2016.

[54] S. Xu, Y. Zhao, Z. Ren, L. Wu, Y. Tong, and H. Zhang. A symbolic model for systematically analyzing TEE-based protocols. In *International Conference on Information and Communications Security*, pages 126–144. Springer, 2020.

[55] Y. Xu, W. Cui, and M. Peinado. Controlled-Channel Attacks: Deterministic side channels for untrusted operating systems. In *Proceedings of the 2015 IEEE Symposium on Security and Privacy*, pages 640–656, 2015.

[56] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi. Town Crier: An authenticated data feed for smart contracts. In *23rd ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2016.

[57] J. Zhu, X. Yan, and W. Huang. A formal framework for state continuity of protected modules. In *2018 4th International Conference on Big Data Computing and Communications*, pages 114–119, 2018.

### Rule Execution Criteria

In the Tamarin proof process, only certain rules are considered part of the trace. For a given target lemma, a candidate rule is considered executable if it satisfies the following criteria:

1. **Premise Facts:** The premise facts (except the built-in facts Fr and In) of the candidate rule should be produced by other rules and can be consumed from the current system state.
2. **Action-Label Variables:** The variables of action-labels specified in the candidate rule’s action part should comply with the model’s restriction axioms and the target lemma’s variable constraints.
3. **Type Restrictions:** The execution of the rule should respect the type restriction (§2.2.4) constraint for all the variables prefixed with the ‘~’ symbol. However, this restriction is nullified if the variables are part of a persistent fact.
4. **Pattern Matching:** Variables with the same name across all received facts of a rule should receive the same value (pattern matching).
5. **Timepoint Constraints:** The order of the candidate rule’s execution, for timepoints of all action-labels of the candidate rule, should satisfy the timepoint constraints specified in the model’s restriction axioms and the target property.
6. **Helper Lemma Constraints:** If the candidate rule execution is part of the target lemma, which is influenced by a helper lemma (§2.2.5), the rule execution should satisfy the helper lemma’s constraints.

Rules satisfying these conditions can be executed in parallel. Upon execution of a rule, the consumed linear facts are removed from the system state, and the produced facts are added to the system state. During the verification process, the backward search algorithm ensures that a valid rule execution trace satisfies the above-mentioned criteria and maintains a consistent system state when looking at the top-down execution of the model.

### Tamarin Sawtooth Attack Trace

Figure 6 shows a Sawtooth attack (§5.1.3) produced by Tamarin in interactive GUI mode. In the trace, ovals denote adversary actions; rectangle boxes denote model rules; bold and gray arrows denote fact dependency for linear and persistent facts, respectively; dotted, red, and black arrows show adversary message reuse, message deductions, and public channel interaction.

The attack can be seen at the last two CWC rule instances of enclave-process instances `p_id` and `p_id.1`. In these rules, the certificate is generated with the same `MC_ref` value (symbolically denoted as ‘1’+‘1’) in the same platform with identity instance `platform`.

---

### Figure 6: Tamarin Produced Attack Trace for Sawtooth

![](figure_6.png)

---

### Signup & Association Network Formation

- **Monotonic Counter**
- **Ecall CreateWaitTimer (CWT)**
- **Ecall CreateWaitCertificate (CWC)**
- **Process p_id**
- **Process p_id.1**
- **p_id Rule CWC1**
- **p_id Rule CWC2**
- **p_id.1 Rule CWC1**
- **p_id.1 Rule CWC2**
- **Duplicate Cert Attack**
- **Sign-up Phase and Association Network Formation**
- **Ecall CWT**

---

This version of the text is more structured, coherent, and professional, with clear headings and subheadings to improve readability and organization.