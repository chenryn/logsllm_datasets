### Optimized Text

**Sage Protocol Overview:**

- Each message in the Sage protocol begins with an author identifier and a sequence number. This ensures that messages are grouped by author in the order they were created.
- The `Shutdown()` function gathers digests of all messages published by other participants. It then calculates the digest of the transcripts received from each party, combines these digests into a single digest, and publishes it. The function also collects the combined digests from all other parties.
- At this point, the party (denoted as ˆX) determines if consensus has been reached with each other party on the session transcript. Since the setup phase confirmed the views of chat participants and the session ID, all transcripts already agree on the set of participants and the chat instance.
- As discussed in §4.3, the only way for an adversary to break consensus is to introduce different messages into the transcript. However, the adversary does not yet have the signature keys, so they cannot inject new messages or impersonate honest users. Their only freedom lies in the hash function, which we assume to be collision and preimage resistant.

**Algorithm 7: Shutdown()**

- **Context:** Called by party ˆX when the application decides to shut down the session.
- **Inputs:**
  - `Sent`: All sent messages.
  - `Received`: All received messages.
  - `Pi`: Set of participants.
  - `sidi`: Session ID.
  - `e ˆX,i`: Ephemeral signing key.
- **Outputs:**
  - `consensus ˆY` values indicating if consensus has been reached for each party ˆY.
  - Publishes the private ephemeral signing key for the current session `e ˆX,i`.

**Steps:**

1. **Publish Digest of Sent Messages:**
   - Sort `Sent` messages in lexical order.
   - Calculate the hash `h ˆX` of the sorted messages.
   - Send `("shutdown", h ˆX)` using `AuthSend()`.

2. **Collect Digests of Others' Transcripts:**
   - Initialize `Outstanding` as the set of participants excluding ˆX.
   - While `Outstanding` is not empty:
     - Receive and process `("shutdown", h')` from each participant ˆY.
     - Sort received messages from ˆY in lexical order.
     - Calculate the hash `h ˆY` of the sorted messages.
     - Remove ˆY from `Outstanding`.

3. **Publish Digest of Full Chat:**
   - Sort participants in lexical order.
   - Calculate the hash `h` of the combined digests.
   - Send `("digest", h)` using `AuthSend()`.

4. **Determine Consensus:**
   - Reinitialize `Outstanding` as the set of participants excluding ˆX.
   - While `Outstanding` is not empty:
     - Receive and process `("digest", h')` from each participant ˆY.
     - If the received digest matches the calculated digest, set `consensus ˆY` to true.
     - Remove ˆY from `Outstanding`.

5. **Verify No One Is Listening:**
   - Send `("end")` using `AuthSend()`.
   - Reinitialize `Outstanding` as the set of participants excluding ˆX.
   - While `Outstanding` is not empty:
     - Receive and process messages from each participant ˆY.
     - If any message is not `"end"`, return.
     - Remove ˆY from `Outstanding`.

6. **Publish Ephemeral Signing Key:**
   - Broadcast `(sidi, ˆX, e ˆX,i)` to all participants.

**Consistency and Consensus:**

- The protocol ensures that chat participants reach pairwise consensus, as described in §3.2.2.
- The consensus approach is straightforward and does not attempt to correct errors; it only determines consensus at the end of the session.
- This simple approach allows the network layer to choose more sophisticated consensus-ensuring algorithms, such as totally ordered multicast or KleeQ-like algorithms.
- The protocol can detect violations of reliable delivery at the mpOTR level, and signatures used to authenticate messages are transferable within the chatroom.
- Honest users can agree on a transcript that is the union of all messages that have reached at least one honest user.

**Conclusion:**

- Our proposed framework for multi-party Off-the-Record (mpOTR) communication does not rely on a central server. Instead, it mimics a typical private meeting where each user authenticates other participants individually.
- The main goals of mpOTR are confidentiality, consensus, and repudiation. Confidentiality is achieved through standard cryptographic measures, consensus through unforgeable signatures, and repudiation through the ability to disassociate from the signing key pair.
- The distribution of chatroom-specific signature keys is a crucial step, serving as the authentication mechanism during the chat. Deniability is a consequence of forward secrecy and the deniability of the key agreement protocol.
- We are currently implementing and improving the efficiency of mpOTR. The setup phase is critical for consensus and deniability, and we are exploring more efficient protocols for the exchange of signing keys.
- A complete formalization and verification of our model will enhance our understanding and help us select suitable primitives and analyze mpOTR's interaction with anonymity-providing protocols and networks.

**Acknowledgments:**

- We thank Mark Gondree, Matt Franklin, Matt Bishop, Zhendong Su, and Phillip Rogaway for their feedback during the early stages of this research. We also thank the anonymous reviewers for their helpful comments. This research is supported by the National Science Foundation under Grant No. 0831547 (Van Gundy and Chen), MITACS (Goldberg), and NSERC (Goldberg).

**References:**

- [1] C. Alexander and I. Goldberg. Improved User Authentication in Off-The-Record Messaging. In P. Ning and T. Yu, editors, WPES’07: Proceedings of the 2007 ACM workshop on Privacy in electronic society, pages 41–47, New York, NY, USA, 2007. ACM.
- [2] M. Bellare and C. Namprempre. Authenticated Encryption: Relations among notions and analysis of the generic composition paradigm. In T. Okamoto, editor, Advances in Cryptology – ASIACRYPT 2000, volume 1976 of LNCS, New York, NY, USA, Dec. 2000. Springer-Verlag.
- [3] M. Bellare and P. Rogaway. Entity Authentication and Key Distribution. In D. R. Stinson, editor, Advances in Cryptology – CRYPTO’93, volume 773 of LNCS, pages 232–249, Santa Barbara, CA, USA, 1993. Springer Verlag. Full version available at http://www.cs.ucdavis.edu/~rogaway/papers/eakd-abstract.html.
- [4] J. Bian, R. Seker, and U. Topaloglu. Off-the-Record Instant Messaging for Group Conversation. In IRI ’07: Proceedings of Information Reuse and Integration, pages 79–84. IEEE Computer Society, 2007.
- [5] J.-M. Bohli, M. I. G. Vasco, and R. Steinwandt. Secure Group Key Establishment Revisited. Cryptology ePrint Archive, Report 2005/395, 2005. http://eprint.iacr.org/2005/395.
- [6] N. Borisov, I. Goldberg, and E. Brewer. Off-the-record communication, or, why not to use PGP. In V. Atluri, P. Syverson, and S. D. C. di Vimercati, editors, WPES ’04: Proceedings of the 2004 ACM workshop on Privacy in the electronic society, pages 77–84, New York, NY, USA, 2004. ACM.
- [7] C. Boyd, W. Mao, and K. G. Paterson. Key Agreement Using Statically Keyed Authenticators. In B. Christianson, B. Crispo, J. A. Malcolm, and M. Roe, editors, Security Protocols, 11th International Workshop, Revised Selected Papers, volume 3364 of LNCS, pages 255–271, Berlin, Germany, 2005. Springer Verlag.
- [8] R. Canetti, C. Dwork, M. Naor, and R. Ostrovsky. Deniable Encryption. In B. S. Kaliski, Jr., editor, Advances in Cryptology – CRYPTO’97, volume 1294 of LNCS, pages 90–104, Santa Barbara, CA, USA, 1997. Springer Verlag.
- [9] S. M. Cherry. IM means business. IEEE Spectrum, 38:28–32, November 2002.
- [10] M. Di Raimondo, R. Gennaro, and H. Krawczyk. Secure Off-the-Record Messaging. In V. Atluri, S. D. C. di Vimercati, and R. Dingledine, editors, WPES’05: Proceedings of the 2005 ACM workshop on Privacy in electronic society, pages 81–89, New York, NY, USA, 2005. ACM.
- [11] M. Di Raimondo, R. Gennaro, and H. Krawczyk. Deniable Authentication and Key Exchange. In R. N. Wright, S. De Capitani di Vimercati, and V. Shmatikov, editors, CCS 2006: Proceedings of the 13th ACM Conference on Computer and Communications security, pages 400–409, New York, NY, USA, 2006. ACM.
- [12] C. Dwork, M. Naor, and A. Sahai. Concurrent Zero-Knowledge. Journal of the ACM, 51(6):851–898, 2004. http://www.wisdom.weizmann.ac.il/%7Enaor/PAPERS/time.ps.
- [13] H. Krawczyk. SKEME: A Versatile Secure Key Exchange Mechanism for Internet. In SNDSS ’96: Proceedings of the 1996 Symposium on Network and Distributed System Security, pages 114–127, 1996.
- [14] L. Law, A. Menezes, M. Qu, J. Solinas, and S. Vanstone. An Efficient Protocol for Authenticated Key Agreement. Designs, Codes and Cryptography, 28(2):119–134, 2003.
- [15] M. Mannan. Secure Public Instant Messaging. Master’s thesis, Carleton University, Ottawa, Canada, August 2005.
- [16] M. Mannan and P. C. van Oorschot. A Protocol for Secure Public Instant Messaging. In G. Di Crescenzo and A. Rubin, editors, Financial Cryptography and Data Security – FC 2006, volume 4107 of LNCS, pages 20–35, Anguilla, British West Indies, 2006. Springer Verlag. Full version available at http://www.scs.carleton.ca/research/tech_reports/2006/download/TR-06-01.pdf.
- [17] A. Menezes and B. Ustaoglu. Comparing the pre- and post-specified peer models for key agreement. In Y. Mu, W. Susilo, and J. Seberry, editors, Information Security and Privacy – ACISP 2008, volume 5107 of LNCS, pages 53–68. Springer, 2008.
- [18] J. Reardon, A. Kligman, B. Agala, and I. Goldberg. KleeQ: Asynchronous Key Management for Dynamic Ad-Hoc Networks. Technical Report CACR 2007-03, Center for Applied Cryptographic Research, University of Waterloo, Waterloo, ON, Canada, 2007.