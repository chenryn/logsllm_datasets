# OblivP2P: An Oblivious Peer-to-Peer Content Sharing System

## Authors
- Yaoqi Jia, National University of Singapore
- Tarik Moataz, Colorado State University and Telecom Bretagne
- Shruti Tople, National University of Singapore
- Prateek Saxena, National University of Singapore

## Publication Information
- **Conference:** 25th USENIX Security Symposium
- **Date:** August 10â€“12, 2016
- **Location:** Austin, TX
- **ISBN:** 978-1-931971-32-4
- **Access:** Open access to the Proceedings is sponsored by USENIX
- **Link:** [Proceedings](https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/jia)

## Abstract
Peer-to-peer (P2P) systems are widely used to distribute trust, increase availability, and improve performance. Content-sharing P2P systems, such as BitTorrent and Storj, and more recent peer-assisted CDNs like Akamai Netsession, are being deployed extensively. A significant security concern in these systems is the risk of long-term traffic analysis, a challenge with few known solutions.

In this paper, we propose a new approach to protect against persistent, global traffic analysis in P2P content-sharing systems. Our approach involves hiding data access patterns, making P2.P systems oblivious. We introduce OBLIVP2P, a scalable distributed ORAM (Oblivious RAM) protocol designed for real P2P settings. Our protocol achieves the following:

1. **Scalability:** Our construction retains the linear scalability of the original P2P network with respect to the number of peers.
2. **Performance:** Experiments simulating 16,384 peers on 15 DeterLab nodes show that our system can process up to 7 requests of 512KB each per second, suitable for moderately latency-sensitive applications. The remaining bottlenecks are computational, not bandwidth-related.
3. **Decentralization:** No centralized infrastructure acts as a bottleneck, ensuring that network and computational overheads can be fully offloaded to the P2P network.
4. **Parallelizability:** Our construction is highly parallelizable, suggesting that computational bottlenecks can be significantly reduced if deployed on a network with many real machines.

## 1. Introduction
Content-sharing P2P systems, such as BitTorrent, Storj, and Freenet, are popular for sharing files on the Internet. More recently, peer-assisted CDNs like Akamai Netsession and Squirrel are gaining adoption to offload web CDN traffic to clients. These systems attract millions of users, but they are susceptible to long-term traffic analysis through global monitoring. For example, copyright enforcement organizations, government agencies, and ISPs monitor BitTorrent traffic to identify illegal activities, which can also reveal the data requested and sent by peers.

To address this, users often employ anonymous networks like Mix networks and Tor-based systems. However, these solutions are still vulnerable to long-term traffic pattern analysis attacks, which pose a significant threat to P2P systems. In this paper, we investigate a new approach to hide data access patterns in P2P systems, thereby protecting user data from long-term monitoring.

### 1.1 Approach
We draw inspiration from the concept of Oblivious RAM (ORAM), proposed by Goldreich and Ostrovsky, which hides data access patterns between a trusted CPU and an untrusted memory. We adapt ORAM to the P2P setting, introducing two key challenges: 

- **Obliviousness:** Unlike traditional ORAM, where a single client accesses untrusted storage, P2P systems involve multiple peers acting as both clients and servers. Adversarial peers can see plaintext and learn about data requests, a threat not present in traditional ORAM.
- **Scalability:** Ensuring that the throughput scales linearly with the number of peers, without any centralized bottleneck, and can be parallelized.

**Solution Overview:**
- **OBLIVP2P-0 (Centralized Protocol):** Directly adapts ORAM to a P2P setting, using a centralized, trusted tracker. This variant has limited scalability due to the heavy computation load on the tracker.
- **OBLIVP2P-1 (Distributed Protocol):** Our main contribution, which provides both obliviousness and scalability. It distributes ORAM operations among peers, avoiding a single bottleneck. The key building block, Oblivious Selection (OblivSel), combines private information retrieval with recent ORAM advances. Our construction is secure in the honest-but-curious adversary model.

### 1.2 System and Results
We provide a prototype implementation of both OBLIVP2P-0 and OBLIVP2P-1 in Python, with source code available online. Our experiments on DeterLab with 15 servers simulating up to 214 peers show that OBLIVP2P-0 is limited in scalability, while OBLIVP2P-1 scales linearly. It achieves a throughput of 3.19 MBps for a network of 214 peers, corresponding to 7 requests per second for a block size of 512 KB. Our protocol is highly parallelizable and shows no single entity bottleneck, confirming that the network and computational overheads can be fully offloaded to the P2P network.

### Contributions
- **Problem Formulation:** We formulate the problem of making data access patterns oblivious in P2P systems, a necessary step in defending against long-term traffic analysis.
- **New Protocols:** We propose OBLIVP2P, the first candidate for an oblivious P2P protocol in content-sharing systems. Our main building block, Oblivious Selection, uses recent ORAM and private information retrieval techniques.
- **System Implementation & Evaluation:** Our prototype implementation is available online, and we experimentally evaluate the system's throughput, latency, and the impact of optimizations.

## 2. Problem
Many P2P applications, including BitTorrent, Gnutella, Freenet, Storj, and peer-assisted CDNs, are not designed with security in mind, making them vulnerable to traffic pattern analysis. We focus on BitTorrent as our primary case study.

### 2.1 BitTorrent: A P2P Protocol
BitTorrent allows sharing of large files by dividing them into blocks and distributing them among peers. Each peer holds data blocks and acts as both a client and a server. A tracker tracks which peers are downloading/uploading files and maintains the state of the network. Peers request resources from the tracker, which responds with IP addresses of peers holding the resource. The requester then downloads the blocks from these peers and concatenates them to construct the entire file.

### 2.2 Threat Model
In our threat model, we consider the tracker as a trusted party and peers as passive honest-but-curious adversaries. We consider two types of adversaries:

- **Global Passive Adversary:** Tools like Global BitTorrent Monitor or BitStalker can accurately and efficiently monitor BitTorrent traffic, revealing digital identities and downloaded content. We assume the presence of a global adversary capable of observing long-term traffic.
- **Passive Colluding Peers:** Some peers controlled by the global adversary can collude to share observed/served requests and local storage contents, collectively gleaning information about other peers in the network.

This formalizes the threat model and sets the stage for our proposed solution.