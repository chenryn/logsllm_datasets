### The Balance Update and Re-entrancy Safety

The balance is updated after the external call, ensuring that the contract remains safe from re-entrancy attacks. However, the access pattern to these lock variables during contract re-entrance matches a known attack pattern. Specifically, the internal state (the lock variable) that affects the control flow in subsequent (re-entered) invocations of the contract is updated subsequently (at ). At the bytecode level, it is challenging to distinguish benign state updates of locks from those of critical variables such as balances. Manual locking is error-prone because it can allow an attacker to re-enter other functions of the same contract unless the entry of every function is guarded by the lock. In contrast, Sereum automatically introduces locks for all potentially dangerous variables (detected via taint tracking) across all functions, thereby removing the burden from developers to manually determine all possible vulnerable functions and critical variables.

### Performance and Memory Overhead

Given the lack of benchmarks consisting of realistic contracts for EVM implementations, we measured the performance overhead by timing the execution of a subset of blocks from the Ethereum blockchain. We sampled blocks starting from 460000, 450000, 440000, 4300000, and 4200000, using 10 consecutive blocks. We ran these 50 blocks in batches of 10,000 times, accounting only for the EVM's execution time. We performed one run with plain geth, on which Sereum is based, and one with Sereum with attack detection enabled. For the performance evaluation, we excluded transactions flagged by Sereum as re-entrancy attacks, as Sereum aborts these transactions early, leading to shorter execution times compared to normal execution.

We measured the performance overhead of Sereum compared to plain geth when running 50 blocks in batch, averaging the runtime over 10,000 runs of the same 50 blocks. The benchmarking was conducted on an 8-core Intel(R) Xeon(R) CPU E5-1630 v4 with 3.70GHz and 32 GB RAM. The mean runtime of geth was 2277.0 ms (σ = 146.7 ms), while the mean runtime of Sereum was 2494.5 ms (σ = 174.8 ms). This results in a mean overhead of 217.6 ms (σ = 100.9 ms) or 9.6%.

Additionally, we measured the memory usage of the whole Ethereum client using Linux cgroups, sampling the memory usage every second during the runtime benchmarks. Sereum required an average of 9767 MB of memory with active attack detection, while plain geth required 9252 MB.

These results demonstrate that Sereum can effectively detect re-entrancy attacks with a negligible overhead. The actual runtime overhead is not noticeable, as the average time until the next block is mined is 14.5 seconds, containing 130 transactions on average (between Jan 1, 2018, and Aug 7, 2018). Based on our benchmark results, a rough estimate of EVM execution time per block is 0.05 seconds, with Sereum adding 0.005 seconds of overhead. Compared to the total block time, the runtime overhead of Sereum is not noticeable during normal usage.

### Related Work

In this section, we overview related work beyond the state-of-the-art defenses and analysis tools described in Section II.

**Vyper [7]**: An experimental language designed to maximize the difficulty of writing misleading code while ensuring human-readability for easy auditing. It achieves better code clarity by limiting high-level programming features such as class inheritance, function overloading, infinite loops, and recursive calls. This approach sacrifices expressiveness for gas predictability.

**Babbage [36]**: A visual programming language proposed by the Ethereum community, consisting of mechanical components to help programmers understand the interactivity of components in a contract.

**Bamboo [2]**: Another contract programming language focusing on the state transition of contracts, where a contract is described as a state machine whose state changes with the contract signature.

**Obsidian [14]**: A Solidity-like language that adds state and state transitions as first-class constructs, aiming to make contracts more predictable.

**Simplicity [33]**: A language with larger expressiveness yet allowing easy static analysis compared to EVM code. Static analysis provides useful upper bound computation estimation on transactions, giving peers more predictable views on transaction execution. Simplicity also features self-contained transactions that exclude the global state in contract execution.

These proposals aim to make contracts more predictable. However, wide-scale deployment of new programming models would require rewriting all legacy software, which demands significant development effort.

### Conclusion

Re-entrancy attacks exploit inconsistent internal states of smart contracts during unsafe re-entrancy, potentially allowing an attacker to drain all available assets from a smart contract. Advanced offline analysis tools were believed to accurately detect these vulnerabilities, but they can only detect basic re-entrancy attacks and fail to accurately detect new patterns such as cross-function, delegated, and create-based re-entrancy. Protecting existing contracts is challenging due to the immutability of smart contract code and the anonymity of contract creators, which hinders responsible disclosure and deployment of patched contracts.

To address these issues, we introduce Sereum, a novel runtime smart contract security solution that uses dynamic taint tracking to monitor data flows during smart contract execution. Sereum automatically detects and prevents inconsistent states, effectively preventing both basic and advanced re-entrancy attacks without requiring any semantic knowledge of the contract. By running Sereum on almost 80 million Ethereum transactions involving 93,942 contracts, we show that Sereum can prevent re-entrancy attacks with negligible overhead. Sereum can be integrated into the blockchain ecosystem to protect existing contracts and can also be executed locally by contract developers to identify and patch vulnerabilities.

Finally, we are the first to present and analyze false positive cases when searching for re-entrancy vulnerabilities, revealing root causes and providing concrete advice to smart contract developers to avoid suspicious patterns during development.

### Acknowledgment

This work has been partially funded by the DFG as part of project S2 within the CRC 1119 CROSSING.

### References

[1] https://github.com/nexusdev/hack-recovery, [Online; accessed Jul 28, 2018].

[2] “Bamboo: a language for morphing smart contracts,” https://github.com/pirapira/bamboo, [Online; accessed Jul 24, 2018].

[3] “ethersplay: EVM disassembler and related analysis tools.” https://github.com/trailofbits/ethersplay, [Online; accessed Jul 28, 2018].

[4] “Securing smart contracts project,” https://www.syssec.wiwi.uni-due.de/en/research/research-projects/securing-smart-contracts/.

[5] “Solidity documentation,” [Online; accessed Aug 6, 2018]. [Online]. Available: http://solidity.readthedocs.io/

[6] “Solidity withdrawal from contracts,” [Online; accessed Jul 25, 2018]. [Online]. Available: https://solidity.readthedocs.io/en/develop/common-patterns.html#withdrawal-from-contracts

[7] “Vyper,” https://github.com/ethereum/vyper.

[8] “Critical ether token wrapper vulnerability - eth tokens salvaged from potential attacks,” https://www.reddit.com/r/MakerDAO/comments/4niu10/critical_ether_token_wrapper_vulnerability_eth/, Jun. 2016, [Online; accessed Jul 28, 2018].

[9] “A list of altcoins,” https://www.investitin.com/altcoin-list/, 2018, [Online; accessed Aug 6, 2018].

[10] N. Atzei, M. Bartoletti, and T. Cimoli, “A survey of attacks on Ethereum smart contracts (SoK),” in Proceedings of the 6th International Conference on Principles of Security and Trust, 2017.

[11] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley, “Enhancing symbolic execution with veritesting,” in Proceedings of the 36th International Conference on Software Engineering, ser. ICSE 2014. ACM, 2014.

[12] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Gollamudi, G. Gonthier, N. Kobeissi, N. Kulatova, A. Rastogi, T. Sibut-Pinote, N. Swamy, and S. Z. Béguelin, “Formal verification of smart contracts: Short paper,” in Proceedings of the 2016 ACM Workshop on Programming Languages and Analysis for Security, 2016.

[13] J. Clause, W. Li, and A. Orso, “Dytan: A generic dynamic taint analysis framework,” in Proceedings of the 2007 International Symposium on Software Testing and Analysis. ACM, 2007.

[14] M. Coblenz, “Obsidian: A safer blockchain programming language,” in 2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C), May 2017.

[15] ConsenSys Diligence, “Ethereum smart contract best practices,” [Online; accessed Jul 25, 2018]. [Online]. Available: https://consensys.github.io/smart-contract-best-practices/known_attacks/

[16] P. Daian, “Chasing the DAO attackers wake,” https://pdaian.com/blog/chasing-the-dao-attackers-wake/, [Online; accessed Jul 26, 2018].

[17] “DAO contract address,” https://etherscan.io/address/0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413, [Online; accessed Aug 1, 2018].

[18] “TheDarkDAO contract address.” [Online]. Available: https://etherscan.io/address/0x304a554a310C7e546dfe434669C62820b7D83490

[19] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones,” ACM Transactions on Computer Systems (TOCS), vol. 32, no. 2, 2014.

[20] I. Grishchenko, M. Maffei, and C. Schneidewind, “A semantic framework for the security analysis of Ethereum smart contracts,” in Proceedings of the 7th International Conference on Principles of Security and Trust, 2018.

[21] S. Grossman, I. Abraham, G. Golan-Gueta, Y. Michalevsky, N. Rinetzky, M. Sagiv, and Y. Zohar, “Online detection of effectively callback-free objects with applications to smart contracts,” Proceedings of the ACM on Programming Languages, 2017.

[22] E. Hildenbrandt, M. Saxena, X. Zhu, N. Rodrigues, P. Daian, D. Guth, and G. Rosu, “KEVM: A complete semantics of the Ethereum Virtual Machine,” Tech. Rep., 2017.

[23] C. Jentzsch, “The History of the DAO and Lessons Learned,” Aug 2016, [Online; accessed Aug 1, 2018]. [Online]. Available: https://blog.slock.it/the-history-of-the-dao-and-lessons-learned-d06740f8cfa5

[24] H. Jordan, B. Scholz, and P. Suboti´c, “Soufflé: On synthesis of program analyzers,” in International Conference on Computer Aided Verification. Springer, 2016.

[25] S. Kalra, S. Goel, M. Dhawan, and S. Sharma, “ZEUS: Analyzing safety of smart contracts,” in Proceedings 2018 Network and Distributed System Security Symposium.

[26] J. C. King, “Symbolic execution and program testing,” Communications of the ACM, vol. 19, no. 7, 1976.

[27] J. Krupp and C. Rossow, “TEETHER: Gnawing at Ethereum to automatically exploit smart contracts,” in 27th USENIX Security Symposium (USENIX Security 18), 2018. Internet Society, 2018.

[28] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea, “Efficient state merging in symbolic execution,” in Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, 2012.

[29] L. Luu, D. Chu, H. Olickel, P. Saxena, and A. Hobor, “Making smart contracts smarter,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, 2016.

[30] “Manticore symbolic execution tool v0.2.2.” [Online]. Available: https://github.com/trailofbits/manticore

[31] “Mythril v0.19.7.” [Online]. Available: https://github.com/ConsenSys/mythril

[32] I. Nikolic, A. Kolluri, I. Sergey, P. Saxena, and A. Hobor, “Finding the greedy, prodigal, and suicidal contracts at scale,” in 34th Annual Computer Security Applications Conference (ACSAC’18), 2018.

[33] R. O’Connor, “Simplicity: A new language for blockchains,” in Proceedings of the 2017 Workshop on Programming Languages and Analysis for Security. ACM, Oct. 2017.

[34] “Oyente tool,” https://github.com/melonproject/oyente, [Online; accessed Jul 26, 2018].

[35] R. Price, “Digital currency Ethereum is cratering because of a $50 million hack,” https://www.businessinsider.com/dao-hacked-ethereum-crashing-in-value-tens-of-millions-allegedly-stolen-2016-6, Jun. 2016, [Online; accessed May 4, 2018].

[36] C. Reitwiessner, “Babbage – a mechanical smart contract language,” https://medium.com/@chriseth/babbage-a-mechanical-smart-contract-language-5c8329ec5a0e, 2017, [Online; accessed Jul 24, 2018].

[37] E. J. Schwartz, T. Avgerinos, and D. Brumley, “All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask),” in 31st IEEE Symposium on Security and Privacy, S&P, 2010.

[38] M. Suiche, “Porosity: A decompiler for blockchain-based smart contract bytecode,” 2017. [Online]. Available: https://github.com/comaeio/porosity

[39] J. Tanner, https://blog.indorse.io/ethereum-upgradeable-smart-contract-strategies-456350d0557c, Mar 2018, [Online; accessed Aug 6, 2018].

[40] S. Tikhomirov, E. Voskresenskaya, I. Ivanitskiy, R. Takhaviev, E. Marchenko, and Y. Alexandrov, “SmartCheck: Static analysis of Ethereum smart contracts,” in Proceedings of the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain, 2018.

[41] D. Trabish, A. Mattavelli, N. Rinetzky, and C. Cadar, “Chopped symbolic execution,” in Proceedings of the 40th International Conference on Software Engineering, 2018.

[42] P. Tsankov, A. M. Dan, D. D. Cohen, A. Gervais, F. Buenzli, and M. T. Vechev, “Securify: Practical security analysis of smart contracts,” in Proceedings of the 2018 ACM Conference on Computer and Communications Security, CCS, 2018.

[43] J. Wilcke, “Ethereum network currently undergoing DoS attack,” https://blog.ethereum.org/2016/09/22/ethereum-network-currently-undergoing-dos-attack/, 2016, [Online; accessed Jul 28, 2018].

[44] G. Wood, “Ethereum: A secure decentralised generalised transaction ledger (EIP-150 revision),” 2016. [Online]. Available: http://gavwood.com/paper.pdf

[45] Y. Zhou, D. Kumar, S. Bakshi, J. Mason, A. Miller, and M. Bailey, “Erays: Reverse engineering Ethereum’s opaque smart contracts,” in 27th USENIX Security Symposium, 2018.