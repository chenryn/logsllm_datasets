### Key Points

In TLS v1.3, the client must send the key share \( g^r \) to the server before receiving the server’s random nonce \( \mu_S \). Consequently, we cannot use \( \mu_S \) but can only use the client nonce \( \mu_C \) to generate the ephemeral random value \( r \). Specifically, we compute \( r \leftarrow H(\tilde{k}, \mu_C) \), where \( \tilde{k} \) is the inspection key. Since the inspector can recover \( r \), they can also reconstruct the traffic key.

Excluding the server's random nonce \( \mu_S \) from the inputs to the hash function \( H \) does not prevent the inspector from reconstructing the secret value \( Z \), meaning TLS inspection remains possible. However, the absence of \( \mu_S \) slightly weakens the security model presented in Definition 4.1, as the adversary might have more control over the generation of \( r \). We assume that the adversary should not have access to the inspection key, making full control of \( r \) difficult. In other words, the adversary \( A \) in Definition 4.1 no longer has the ability to choose and fix the client's random nonce as a uniform string by the attack game.

It is straightforward to prove that the KEM in TLS v1.3 is secure under the weakened security model, similar to the proof of Theorem 4.3. A more formal treatment is provided in Appendix A.

We note that IA2-TLS based on RSA will no longer be possible, as RSA-KEM is not supported in TLS v1.3.

### Application to Intrusion Detection Systems (IDS)

Thanks to its flexibility, IA2-TLS can meet various demands for traffic monitoring and inspection systems, including Intrusion Detection Systems (IDS). When IA2-TLS is deployed in an IDS to inspect organizational network traffic, the company may want to know whether their users are accessing HTTPS websites using browsers that support IA2-TLS before they connect. IA2-TLS offers this capability as follows:

- The TLS handshake is completed after the client and server exchange Finished messages.
- The IDS can capture these messages and check if the key used to encrypt the Finished messages matches the key derived from the IA2-TLS protocol using the inspection key and the client and server random nonces.
- If the keys do not match, the IDS can terminate the connection to protect the system from unmonitored traffic.
- When ECDHE is used, the IDS can verify the user’s non-compliant behavior by observing the CT-value included in the ClientKeyExchange message, rather than decrypting the Finished message. This reduces the computational overhead required to detect monitoring bypasses.

### Managing Inspection Keys

Depending on the application, the inspector may create an inspection key by applying a Pseudorandom Function (PRF) to the user’s ID and a uniform string of their choice. This way, a user-specific inspection key can be generated. While our security model for IA2-TLS assumes that the inspection key is not compromised, revealing the inspection key would expose the client’s Pre-Master Secret (PMS) for all sessions. Therefore, minimizing the risk of inspection key exposure is crucial. Regularly updating the inspection key can be one solution.

### Conclusion

In this paper, we proposed IA2-TLS, a new TLS inspection solution. Compared to various existing inspection methods, our solution offers higher flexibility and efficiency by avoiding the need for TLS proxies, which require managing the proxy’s certificate and decrypting and re-encrypting network traffic.

As an implementation result, we presented IA2-TLS Client and IA2-TLS Inspector programs, which realize the non-real-time inspection functionality of IA2-TLS.

We envision that this work can lead to the development of many in-network monitoring tools that are less intrusive and more efficient. Our ongoing research includes implementing IA2-TLS v1.3 and a real-time inspector that integrates the inspector program into an IDS, extending beyond the offline inspector presented in this paper.

### References

[1] M. Abdalla, M. Bellare, and P. Rogaway. The Oracle Diffie-Hellman Assumptions and an Analysis of DHIES. In CT-RSA 2001, LNCS 2020, pp. 143–158, Springer, 2001.

[2] M. Bellare and P. Rogaway. Random Oracles are Practical: A Paradigm for Designing Efficient Protocols. In ACM-CCS 1993, pp. 62–73, ACM, 1993.

[3] D. Bleichenbacher. Chosen Ciphertext Attacks against Protocols Based on the RSA Encryption Standard PKCS #1. In Crypto 1998, LNCS 1462, pp. 1–12, Springer, 1998.

[4] S. Canard, A. Diop, N. Kheir, M. Paindavoine, and M. Sabt. BlindIDS: Market-compliant and privacy-friendly intrusion detection system over encrypted traffic. In AsiaCCS 2017, pp. 561–574, ACM, 2017.

[5] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246, Network Working Group, 2008.

[6] Z. Durumeric, Z. Ma, D. Springall, R. Barnes, N. Sullivan, E. Bursztein, M. Bailey, J. A. Halderman, and V. Paxson. The Security Impact of HTTPS Interception. In NDSS 2017, 2017.

[7] R. Du Toit. Responsibly Intercepting TLS and the impact of TLS1.3. Symantec Technical Brief. Available at https://www.symantec.com/content/dam/symantec/docs/other-resources/responsibly-intercepting-tls-and-the-impact-of-tls-1.3-en.pdf, 2018.

[8] M. Green. The Many Flaws of Dual_EC_DRBG. Available at https://blog.cryptographyengineering.com/2013/09/18/the-many-flaws-of-dualecdrbg/, 2013.

[9] J. Han, S. Kim, J. Ha, and D. Han. SGX-Box: Enabling Visibility on Encrypted Traffic Using a Secure Middlebox Module. In APNet 2017, ACM, 2017.

[10] L-S. Huang, A. Rice, E. Ellingsen, and C. Jackson. Analyzing Forged SSL Certificates in the Wild. In IEEE S&P 2014, IEEE, 2014.

[11] T. Jager, F. Kohlar, S. Schäge, and J. Schwenk. On the Security of TLS-DHE in the Standard Model. In Crypto 2012, LNCS 7417, pp. 273–293, Springer, 2012.

[12] J. Jarmoc. SSL/TLS Interception Proxies and Transitive Trust. Presentation at Black Hat Europe 2012.

[13] B. Kaliski. PKCS#1: RSA Encryption Version 1.5. RFC 2313, Network Working Group, 1998.

[14] H. Krawczyk and P. Eronen. HMAC-based Extract-and-Expand Key Derivation Function (HKDF). RFC 5869, Network Working Group, 2010.

[15] H. Krawczyk, K. G. Paterson, and H. Wee. On the Security of the TLS Protocol: A Systematic Analysis. In Crypto 2013, LNCS 8042, pp. 429–448, Springer, 2013.

[16] D. Naylor, K. Schomp, M. Varvello, I. Leontiadis, J. Blackburn, D. R. Lopez, K. Papagiannaki, P. Rodriguez Rodriguez, and P. Steenkiste. Multi-Context TLS (mcTLS): Enabling Secure In-Network Functionality in TLS. In SIGCOMM 2015, ACM, 2015.

[17] T. Okamoto and D. Pointcheval. REACT: Rapid Enhanced-security Asymmetric Cryptosystem Transform. In CT-RSA 2001, LNCS 2020, pp. 159–175, Springer, 2001.

[18] M. O’Neill, S. Ruoti, K. Seamons, and D. Zappala. TLS Proxies: Friend or Foe? In IMC 2016, ACM, 2016.

[19] K. Poulsen. Edward Snowden’s E-Mail Provider Defied FBI Demands to Turn Over Crypto Keys, Documents Show. In Wired, October 2013.

[20] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3. RFC 8446, Network Working Group, 2018.

[21] J. Sherry, C. Lan, P. A. Popa, and S. Ratnasami. BlindBox: Deep Packet Inspection over Encrypted Traffic. In SIGCOMM 2015, ACM, 2015.

[22] D. Song, D. A. Wagner, and A. Perrig. Practical Techniques for Searches on Encrypted Data. In IEEE S&P, 2000, pp. 44–55, IEEE Computer Society, 2000.

[23] HTTPS encryption on the web. https://transparencyreport.google.com/https/overview?hl=en. Accessed: 15-05-2019.

[24] BoringSSL. https://opensource.google.com/projects/boringssl. Accessed: 15-05-2019.

[25] OpenSSL. https://www.openssl.org/. Accessed: 15-05-2019.

[26] The Chromium Projects. https://www.chromium.org/Home. Accessed: 2019-05-15.

[27] tshark - The Wireshark Network Analyzer 3.0.1. https://www.wireshark.org/docs/man-pages/tshark.html. Accessed: 15-05-2019.

[28] CYBER; Middlebox Security Protocol; Part 3: Profile for Enterprise Network and Data Centre Access Control. https://www.etsi.org/deliver/etsi_ts/103500_103599/10352303/01.01.01_60/ts_10352303v010101p.pdf. Accessed: 31-07-2019.

### Security Analysis of IA2-TLS Version 1.3

#### IA2-TLSv1.3-KEM

For the formal security analysis, we extract the key encapsulation (KEM) from the IA2-TLS handshake in TLS v1.3 and define the following KEM scheme, which we call “IA2-TLSv1.3-KEM”. This KEM scheme is based on the randomized KEM scheme used in Section 2.2, but we rename the PMS, CT, and MS to “KS (key share)”, “SEC (secret)”, and “TK (traffic key)” respectively, to be compatible with the TLS v1.3 description.

**Formal Description of IA2-TLSv1.3-KEM:**

- **Key Generation:**
  \[
  (\text{pk}_S, \text{sk}_S) \leftarrow \text{GKEM}(1^n)
  \]
  \[
  \tilde{k} \leftarrow \{0, 1\}^\ell
  \]
  \[
  \text{return} (\text{pk}_S, \text{sk}_S, \tilde{k})
  \]

- **Encryption:**
  \[
  r \leftarrow H(\tilde{k}, \mu_C)
  \]
  \[
  (\text{KS}, \text{SEC}) \leftarrow \text{EKEM}(\text{pk}_S; r)
  \]
  \[
  \text{TK} \leftarrow \text{HKDF}(\text{SEC})
  \]
  \[
  \text{return} (\text{KS}, \text{TK})
  \]

- **Decryption:**
  \[
  \text{SEC} \leftarrow \text{DKEM}(\text{sk}_S, \text{KS})
  \]
  \[
  \text{TK} \leftarrow \text{HKDF}(\text{SEC})
  \]
  \[
  \text{return TK}
  \]

Based on the discussion in Section 7.1, we formulate a security model for the IA2-TLSv1.3-KEM, which is weaker than Definition 4.1, as the adversary now does not have full control of \( \mu_C \).

**Definition A.1 (IND-CCA of IA2-TLSv1.3-KEM):** Let \( A \) be an adversary. Consider the following game:

- **Setup:**
  \[
  (\text{sk}_S, \text{pk}_S, \tilde{k}) \leftarrow \text{GIA2-TLSv1.3-KEM}(1^n)
  \]
  \[
  \mu_C^* \leftarrow \{0, 1\}^\lambda
  \]
  \[
  (\text{KS}^*, \text{TK}^*) \leftarrow \text{EIA2-TLSv1.3-KEM}(\text{pk}_S, \tilde{k}, \mu_C^*)
  \]
  \[
  K_0 = \text{TK}^*; \quad K_1 \leftarrow \{0, 1\}^{\lambda'}; \quad \beta \leftarrow \{0, 1\}
  \]

- **Challenge:**
  \[
  \beta' \leftarrow A^{\text{Encap}(\text{pk}_S, \tilde{k}, \mu_C^*), \text{Decap}(\text{sk}_S, \cdot)}(\text{pk}_S, K_\beta, \text{KS}^*, \mu_C^*)
  \]
  \[
  \text{return} (\beta' = \beta)
  \]

- **Oracle Definitions:**
  - **Encap:**
    \[
    (\text{KS}, \text{TK}) \leftarrow \text{EIA2-TLSv1.3-KEM}(\text{pk}_S, \tilde{k}, \mu_C)
    \]
    \[
    \text{return} (\text{KS}, \text{TK})
    \]

  - **Decap:**
    \[
    \text{TK} \leftarrow \text{DIA2-TLSv1.3-KEM}(\text{sk}_S, \text{KS})
    \]
    \[
    \text{return TK}
    \]

We define \( A \)'s advantage as:
\[
\text{Adv}_{A, \text{IA2-TLSv1.3-KEM}}^{\text{ind-cca}}(n) = \Pr[\text{CCAA, IA2-TLSv1.3-KEM}(n) = 1]
\]

The IA2-TLSv1.3-KEM scheme is IND-CCA secure if there exists a negligible function \( \epsilon(n) \) such that:
\[
\text{Adv}_{A, \text{IA2-TLSv1.3-KEM}}^{\text{ind-cca}}(n) \leq \epsilon(n)
\]

We can prove the security of IA2-TLSv1.3-KEM assuming that the underlying randomized KEM is OW-PCA secure (Definition 4.2). It is essential to assume that the hash function \( H \) and HKDF are random oracles. By choosing a static value for \( \mu_C \), the adversary may be able to get some information about the SEC value. However, this problem is fixed by weakening the security model, so that \( \mu_C \) is always chosen uniformly at random and is not under the control of the adversary. We state the following theorem:

**Theorem A.2:** The IA2-TLSv1.3-KEM scheme is IND-CCA secure if the underlying randomized KEM scheme is OW-PCA secure, and \( H \) and HKDF are random oracles.

**Proof (Sketch):** The proof is similar to the proof of Theorem 4.3. The random oracles \( H \) and HKDF are simulated through a sequence of games. Due to the weakened model of security, \( \mu_C \) is chosen uniformly by the game, ensuring that the output of \( H \) is uniform in the space of randomness for \( r \). The encapsulation queries are handled accordingly, and decapsulation queries are handled using the PCA oracle. (The complete proof will be provided in the full version of this paper.)

\(\blacksquare\)

As mentioned previously, TLS v1.3 mandates the use of ephemeral DH-KEM (DHE-KEM). Hence, in the above description, the server’s public key \( \text{pk}_S \) is equivalent to the ephemeral DH value signed by the server itself, i.e., \(\{{\text{ID}_S, \text{pk}_S^{\text{sig}_S}\}}_{\text{CA}}, \{{g^t\}}_S\), where \(\{{\text{ID}_S, \text{pk}_S^{\text{sig}_S}\}}_{\text{CA}}\) is a certificate for the server’s signature verification key \(\text{pk}_S^{\text{sig}_S}\), issued by CA, and \(\{{g^t\}}_S\) is a signature on the ephemeral DH value \( g^t \). The PCA oracle in the above proof should be instantiated by the DDH oracle \((g, \cdot, \cdot, \cdot)\), which is related to the GDH (not SDH) problem [17].

**Session 3: Network Security ASIA CCS '20, October 5–9, 2020, Taipei, Taiwan**