### End-to-End Latency for Null and Recursive Null RPCs

We conducted tests to measure the end-to-end latencies for a null Remote Procedure Call (RPC) that immediately returns, and a recursive null RPC that calls itself \( n \) times before returning null. These tests aim to isolate the raw cost of RPC invocation, excluding any additional computation performed by the RPC library.

#### Performance Overheads

- **Jigsaw**: The function invocation overheads for Jigsaw are consistently between 3–5 microseconds across all tests.
- **Pivot**: Pivot's overheads are significantly higher, ranging from 369 to 491 microseconds. This discrepancy can be attributed to several factors:
  - **PostMessage Roundtrips**: Each Pivot RPC requires two `postMessage()` roundtrips: one between the calling satellite and the master, and another between the master and the responding satellite. These roundtrips add approximately 230 microseconds to each Pivot RPC.
  - **Generator Overhead**: As explained in Section V-C, the overhead introduced by generators increases with the depth of the call chain. This explains the gradual increase in latency for the recursive null RPCs in Figure 18, where the white bar (representing Pivot) grows more than the striped bar (representing Jigsaw).

### Comparison with Other Frameworks

- **PostMash**: An asynchronous `postMessage()` framework like PostMash incurs similar `postMessage()` RTT costs but avoids the additional generator latencies. For applications requiring only asynchronous cross-domain communication, PostMash is more appropriate. However, for applications needing synchronous RPCs, Pivot offers significant performance improvements over other synchronous frameworks (as discussed in §V-D).

### Size of Rewritten Code

Figure 19 illustrates the size of fully rewritten libraries in Jigsaw and Pivot. Pivot's rewritten libraries are comparable in size to those of Jigsaw, indicating that Pivot does not fundamentally change the amount of code a secure web application must download. Additionally, Pivot can safely integrate unrewritten libraries, which are typically 2–4 times smaller than their rewritten counterparts.

### Related Work

#### Leveraging Browser-Provided Isolation

- **TreeHouse [14]** and **Privilege-separated JavaScript (PSJ) [3]** use browser-enforced protection domains. PSJ employs frames, while TreeHouse uses web workers. Both systems use a trusted coordinator frame to route messages and control sensitive operations. However, neither provides synchronous RPC interfaces, making it challenging to port legacy applications without refactoring.
- **PostMash [4]** uses frames and `postMessage()` for cross-domain communication. It includes a JavaScript stub in the integrator’s frame, which must be trusted. In contrast, Pivot places untrusted code in external frames, eliminating the need for trust in the master frame and providing synchronous interfaces.
- **SMash [15]** uses fragment identifiers in URLs for cross-frame communication, a technique that no longer works on many modern browsers. `postMessage()` is now the standard mechanism for cross-frame communication.

#### Rewriting-Based Isolation

- **Caja [24]** and **Jigsaw [22]** use code rewriting to place mutually untrusting code within the same frame and provide synchronous RPCs. Pivot, however, selectively rewrites code, reducing performance penalties and achieving superior performance (as shown in Section V).
- **Narrative JS [25]** and **task.js [26]** use rewriting to transform asynchronous JavaScript into pseudo-synchronous forms, but they require special syntax and do not provide security features like cross-domain isolation or RPC registration interfaces.

### Conclusions

Pivot is a new isolation framework for web applications that leverages iframes and rewriting to provide synchronous cross-domain RPCs. By using built-in isolation mechanisms, Pivot avoids rewriting libraries that do not make synchronous RPC calls. This selective rewriting approach results in up to two orders of magnitude faster RPCs compared to Jigsaw, a state-of-the-art rewrite-everything framework. Pivot also provides true synchrony without forcing developers to use special function call syntax or new concurrency semantics.

### References

[1] B. Adida, A. Barth, and C. Jackson. Rootkits for JavaScript Environments. In Proceedings of the USENIX Workshop on Offensive Technologies, Montreal, Canada, August 2009.

[2] A. Adya, J. Howell, M. Theimer, W. Bolosky, and J. Douceur. Cooperative Task Management without Manual Stack Management. In Proceedings of USENIX ATC, Monterey, CA, June 2002.

[3] D. Akhawe, P. Saxena, and D. Song. Privilege Separation in HTML5 Applications. In Proceedings of USENIX Security, Bellevue, WA, August 2012.

[4] A. Barth, C. Jackson, and W. Li. Attacks on JavaScript Mashup Communication. In Proceedings of Web 2.0 Security and Privacy, Oakland, CA, May 2009.

[5] P. Boere. DOM-Storage-Query-Language: A SQL-inspired interface for DOM Storage. http://code.google.com/p/dom-storage-query-language/, 2011.

[6] Compuware. Compuware AJAX Edition: Free Web Performance Analysis and Debugging Tool. http://www.compuware.com/en_us/application-performance-management/products/ajax-free-edition/overview.html, 2014.

[7] S. Crites, F. Hsu, and H. Chen. OMash: Enabling Secure Web Mashups via Object Abstractions. In Proceedings of CCS, Alexandria, VA, October 2008.

[8] M. Dhawan, C.-C. Shan, and V. Ganapathy. Enhancing JavaScript with Transactions. In Proceedings of the European Conference on Object-Oriented Programming (ECOOP), Beijing, China, June 2012.

[9] Ecma International. Draft ECMAScript 6 Specification: Generators. http://wiki.ecmascript.org/doku.php?id=harmony:generators, February 20, 2014.

[10] A. Gavrilov. Bubblemark animation test: Silverlight (JavaScript and CLR) vs DHTML vs Flash (Flex) vs WPF vs Apollo vs Java (Swing). http://bubblemark.com/, 2009.

[11] G. Gherardi. JsonRPCjs. https://github.com/gimmi/jsonrpcjs, 2012.

[12] Google. Google-Caja: Performance of cajoled code. http://code.google.com/p/google-caja/wiki/Performance, October 4, 2011.

[13] J. Howell, B. Parno, and J. Douceur. Embassies: Radically Refactoring the Web. In Proceedings of NSDI, Lombard, IL, April 2013.

[14] L. Ingram and M. Walfish. TreeHouse: JavaScript Sandboxes to Help Web Developers Help Themselves. In Proceedings of USENIX ATC, Boston, MA, June 2012.

[15] F. D. Keukelaere, S. Bhola, M. Steiner, S. Chari, and S. Yoshihama. SMash: Secure Component Model for Cross-Domain Mashups on Unmodified Browsers. In Proceedings of WWW, Beijing, China, April 2008.

[16] O. Kiselyov, S. Peyton-Jones, and A. Sabry. Lazy v. Yield: Incremental, Linear Pretty-printing. In Proceedings of APLAS, Kyoto, Japan, December 2012.

[17] Z. Li, K. Zhang, and X. Wang. Mash-IF: Practical Information-Flow Control within Client-side Mashups. In Proceedings of DSN, Chicago, IL, June 2010.

[18] L. Meyerovich, A. Felt, and M. Miller. Object Views: Fine-grained Sharing in Browsers. In Proceedings of WWW, Raleigh, NC, April 2010. ACM.

[19] L. Meyerovich and B. Livshits. ConScript: Specifying and Enforcing Fine-grained Security Policies for JavaScript in the Browser. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2010.

[20] J. Mickens. Silo: Exploiting JavaScript and DOM Storage for Faster Page Loads. In Proceedings of USENIX WebApps, Boston, MA, June 2010.

[21] J. Mickens. Rivet: Browser-agnostic Remote Debugging for Web Applications. In Proceedings of USENIX ATC, Boston, MA, June 2012.

[22] J. Mickens and M. Finifter. Jigsaw: Efficient, Low-effort Mashup Isolation. In Proceedings of USENIX WebApps, Boston, MA, June 2012.

[23] J. Mickens, J. Howell, and J. Elson. Mugshot: Deterministic Capture and Replay for JavaScript Applications. In Proceedings of NSDI, San Jose, CA, April 2010.

[24] M. Miller, M. Samuel, B. Laurie, I. Awad, and M. Stay. Caja: Safe active content in sanitized JavaScript. Google white paper. http://google-caja.googlecode.com/files/caja-spec-2008-06-07.pdf, June 7, 2008.

[25] N. Mix. Narrative JavaScript. http://www.neilmix.com/narrativejs, 2014.

[26] Mozilla. task.js: Beautiful Concurrency for JavaScript. https://github.com/mozilla/task.js, March 21, 2013.

[27] Oni Labs. StratiﬁedJS: JavaScript plus Structured Concurrency. http://onilabs.com/stratiﬁedjs, 2011.

[28] T. Parr. The Definitive ANTLR Reference. Pragmatic Bookshelf, Raleigh, North Carolina, 2007.

[29] G. Richards, C. Hammer, F. Nardelli, S. Jagannathan, and J. Vitek. Flexible Access Control for JavaScript. In Proceedings of OOPSLA, Indianapolis, IN, October 2013.

[30] E. Stark, M. Hamburg, and D. Boneh. Symmetric Cryptography in JavaScript. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), Honolulu, HI, December 2009.

[31] D. Synodinos. ECMAScript 5, Caja and Retrofitting Security: An Interview with Mark S. Miller. http://www.infoq.com/interviews/ecmascript-5-caja-retrofitting-security, February 25, 2011.

[32] R. von Behren, J. Condit, F. Zhou, G. Necula, and E. Brewer. Capriccio: Scalable Threads for Internet Services. In Proceedings of SOSP, Lake George, NY, October 2003.

[33] W3C Web Apps Working Group. Web Storage: W3C Working Draft. http://www.w3.org/TR/webstorage/, July 30 2013.

[34] H. Wang, X. Fan, J. Howell, and C. Jackson. Protection and Communication Abstractions for Web Browsers in MashupOS. In Proceedings of SOSP, Stevenson, WA, October 2007.

[35] Web Hypertext Application Technology Working Group (WHATWG). HTML Living Standard, Section 4.8.2: The iframe element. http://www.whatwg.org/specs/web-apps/current-work/#attr-iframe-sandbox, March 13, 2014.

[36] J. Wright. jwacs: Javascript With Advanced Continuation Support. http://chumsley.org/jwacs/, 2006.