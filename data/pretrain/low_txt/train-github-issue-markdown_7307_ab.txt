以下是优化后的文本，使其更加清晰、连贯和专业：

---

**构建配置与环境设置**

```bash
USE_ROCM=0
USE_NNPACK=0
USE_MKLDNN=0
USE_QNNPACK=0
USE_GLOO_IBVERBS=0
CAFFE2_STATIC_LINK_CUDA=0
RERUN_CMAKE=1

# 根据传入参数动态设置某些选项
if [ "$#" -gt 0 ]; then
  case "$1" in
    "nnpack")
      USE_NNPACK=1
      shift
      ;;
    "mkldnn")
      USE_MKLDNN=1
      shift
      ;;
    "qnnpack")
      USE_QNNPACK=1
      shift
      ;;
    *)
      break
      ;;
  esac
fi

CMAKE_INSTALL='make install'
BUILD_SHARED_LIBS=ON
USER_CFLAGS=""
USER_LDFLAGS=""

# 检查特定环境变量是否为空
if [ -n "${USER_CFLAGS}" ] || [ -n "${USER_LDFLAGS}" ]; then
  # 执行相应操作
fi

# 获取系统信息并设置基础目录
BASE_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)
TORCH_LIB_DIR="${BASE_DIR}/torch/lib"
INSTALL_DIR="${TORCH_LIB_DIR}/tmp_install"
THIRD_PARTY_DIR="${BASE_DIR}/third_party"

# 初始化编译器标志
C_FLAGS=""
LDFLAGS=""
LD_POSTFIX=".so"

# 根据操作系统类型设置额外的链接标志
if [ "$(uname)" = "Darwin" ]; then
  LDFLAGS+=" -Wl,-rpath,@loader_path"
else
  LDFLAGS+=" -Wl,-rpath,$ORIGIN"
fi

CPP_FLAGS=" -std=c++11 "
THD_FLAGS=""

# CUDA 相关设置
CUDA_NVCC_FLAGS=" -DOMPI_SKIP_MPICXX=1"
CUDA_DEVICE_DEBUG=0

# 设置最大并行任务数
MAX_JOBS=$(getconf _NPROCESSORS_ONLN)

# 构建模式
BUILD_TYPE="Release"
echo "Building in ${BUILD_TYPE} mode"

# 创建安装目录
mkdir -p "${INSTALL_DIR}"

# 构建 Caffe2
if [ "$1" = "caffe2" ]; then
  EXTRA_CAFFE2_CMAKE_FLAGS=()
  if [ -n "${CMAKE_PREFIX_PATH}" ]; then
    EXTRA_CAFFE2_CMAKE_FLAGS+=("-DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}")
  fi

  cmake "${BASE_DIR}" \
    -DPYTHON_EXECUTABLE=/opt/conda/bin/python \
    -DPYTHON_LIBRARY=/opt/conda/lib/libpython3.6m.so.1.0 \
    -DPYTHON_INCLUDE_DIR=/opt/conda/include/python3.6m \
    -DBUILDING_WITH_TORCH_LIBS=ON \
    -DTORCH_BUILD_VERSION=1.0.0a0+6d9a7d0 \
    -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" \
    -DBUILD_TORCH=ON \
    -DBUILD_PYTHON=ON \
    -DBUILD_SHARED_LIBS=ON \
    -DBUILD_BINARY=OFF \
    -DBUILD_TEST=ON \
    -DINSTALL_TEST=ON \
    -DBUILD_CAFFE2_OPS=ON \
    -DONNX_NAMESPACE=onnx_torch \
    -DUSE_CUDA=0 \
    -DUSE_DISTRIBUTED=ON \
    -DUSE_FBGEMM=0 \
    -DUSE_NUMPY="" \
    -DNUMPY_INCLUDE_DIR=/opt/conda/lib/python3.6/site-packages/numpy-1.16.0.dev0+2668b31-py3.6-linux-x86_64.egg/numpy/core/include \
    -DCAFFE2_STATIC_LINK_CUDA=0 \
    -DUSE_ROCM=0 \
    -DUSE_NNPACK=1 \
    -DUSE_LEVELDB=OFF \
    -DUSE_LMDB=OFF \
    -DUSE_OPENCV=OFF \
    -DUSE_QNNPACK=1 \
    -DUSE_FFMPEG=OFF \
    -DUSE_GLOG=OFF \
    -DUSE_GFLAGS=OFF \
    -DUSE_SYSTEM_EIGEN_INSTALL=OFF \
    -DCUDNN_INCLUDE_DIR="" \
    -DCUDNN_LIB_DIR="" \
    -DCUDNN_LIBRARY="" \
    -DUSE_MKLDNN=1 \
    -DNCCL_EXTERNAL=0 \
    -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" \
    -DCMAKE_C_FLAGS="" \
    -DCMAKE_CXX_FLAGS="" \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
    -DTHD_SO_VERSION=1 \
    "${EXTRA_CAFFE2_CMAKE_FLAGS[@]}"
fi
```

**CMake 配置输出**

```plaintext
-- The CXX compiler identification is GNU 8.2.0
-- The C compiler identification is GNU 8.2.0
-- Check for working CXX compiler: /usr/local/bin/c++
-- Check for working CXX compiler: /usr/local/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Check for working C compiler: /usr/local/bin/gcc
-- Check for working C compiler: /usr/local/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Not forcing any particular BLAS to be found
-- Performing Test COMPILER_WORKS
-- Performing Test COMPILER_WORKS - Success
-- Performing Test SUPPORT_GLIBCXX_USE_C99
-- Performing Test SUPPORT_GLIBCXX_USE_C99 - Success
-- Performing Test CAFFE2_EXCEPTION_PTR_SUPPORTED
-- Performing Test CAFFE2_EXCEPTION_PTR_SUPPORTED - Success
-- std::exception_ptr is supported.
-- Performing Test CAFFE2_IS_NUMA_AVAILABLE
-- Performing Test CAFFE2_IS_NUMA_AVAILABLE - Success
-- NUMA is available
-- Performing Test CAFFE2_NEED_TO_TURN_OFF_DEPRECATION_WARNING
-- Performing Test CAFFE2_NEED_TO_TURN_OFF_DEPRECATION_WARNING - Failed
-- Turning off deprecation warning due to glog.
-- Performing Test CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS
-- Performing Test CAFFE2_COMPILER_SUPPORTS_AVX2_EXTENSIONS - Success
-- Current compiler supports avx2 extension. Will build perfkernels.
-- Performing Test CAFFE2_COMPILER_SUPPORTS_AVX512F_EXTENSIONS
-- Performing Test CAFFE2_COMPILER_SUPPORTS_AVX512F_EXTENSIONS - Success
-- Current compiler supports avx512f extension. Will build fbgemm.
-- Performing Test COMPILER_SUPPORTS_HIDDEN_VISIBILITY
-- Performing Test COMPILER_SUPPORTS_HIDDEN_VISIBILITY - Success
-- Performing Test COMPILER_SUPPORTS_HIDDEN_INLINE_VISIBILITY
-- Performing Test COMPILER_SUPPORTS_HIDDEN_INLINE_VISIBILITY - Success
-- Performing Test COMPILER_SUPPORTS_RDYNAMIC
-- Performing Test COMPILER_SUPPORTS_RDYNAMIC - Success
-- Building using own protobuf under third_party per request.
-- Use custom protobuf build.
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - not found
-- Looking for pthread_create in pthreads
-- Looking for pthread_create in pthreads - not found
-- Looking for pthread_create in pthread
-- Looking for pthread_create in pthread - found
-- Found Threads: TRUE  
-- Caffe2 protobuf include directory: $$
-- The BLAS backend of choice:MKL
-- Looking for sys/types.h
-- Looking for sys/types.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for stddef.h
-- Looking for stddef.h - found
-- Check size of void*
-- Check size of void* - done
-- Checking for [mkl_intel_lp64 - mkl_gnu_thread - mkl_core - gomp - pthread - m - dl]
--   Library mkl_intel_lp64: /opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so
--   Library mkl_gnu_thread: /opt/intel/mkl/lib/intel64/libmkl_gnu_thread.so
--   Library mkl_core: /opt/intel/mkl/lib/intel64/libmkl_core.so
-- Try OpenMP C flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Try OpenMP CXX flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Found OpenMP: -fopenmp  
--   Library gomp: -fopenmp
--   Library pthread: /usr/lib/x86_64-linux-gnu/libpthread.so
--   Library m: /usr/lib/x86_64-linux-gnu/libm.so
--   Library dl: /usr/lib/x86_64-linux-gnu/libdl.so
-- Looking for cblas_sgemm
-- Looking for cblas_sgemm - found
-- The ASM compiler identification is GNU
-- Found assembler: /usr/local/bin/gcc
-- Check if compiler accepts -pthread
-- Check if compiler accepts -pthread - yes
```

---

通过这种方式，文本变得更加结构化和易于理解。希望这对你有帮助！