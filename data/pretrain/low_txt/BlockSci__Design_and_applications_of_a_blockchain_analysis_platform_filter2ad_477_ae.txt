Certainly! Here is the optimized version of your text:

---

The naive estimate is much lower and more stable over time. Starting in 2018, the naive estimate converges closer to our improved estimate. We hypothesize that this convergence is partially due to the scarcity of block space, which has led to an increase in transaction fees. This, in turn, encourages intermediaries to batch multiple payments into a single transaction, thereby reducing some of the self-churn evident in the earlier naive estimates.

Spikes in the graph, such as the one observed in mid-2019, may represent large intermediaries (e.g., exchanges) moving significant amounts of Bitcoin to addresses with updated access control structures. However, several caveats should be noted. First, this method likely still fails to exclude all transfers of value between addresses controlled by the same entity. Without ground truth, it is challenging to determine the accuracy of the estimate. Second, it does not account for transfers of possession that do not touch the blockchain. When exchanges, online wallets, and other intermediaries hold funds on behalf of users, payments and transfers of "bitcoins" might occur even though no actual bitcoins change hands (only internal database balances are updated). Despite these limitations, we believe that this metric can serve as a useful proxy for understanding cryptocurrency usage and for comparing different cryptocurrencies.

### 3.5 Other Applications of BlockSci

In addition to our own use, BlockSci has been utilized in various academic and industry settings. We are currently aware of at least 9 peer-reviewed articles, 6 preprints, and 2 software projects that employ BlockSci for blockchain analysis (a full list is available online [6]).

Common themes among these papers include privacy and forensics. These studies cover information leaks from payments and purchases through intermediaries [4], the use of intermediaries to convert between cryptocurrencies [12], and the identification of entities and the analysis of their behavior in the transaction graph [6, 11, 23–25]. Many of these findings are of interest to law enforcement and regulators, and we have assisted regulators in using BlockSci for their investigations. Other themes include issues surrounding the security and scalability of cryptocurrencies [26–28] and economic analyses of cryptocurrencies [29].

BlockSci has also served as the foundation for specialized blockchain analysis tools. Boshmaf, Al Jawaheri, and Al Sabah [23] have developed a tagging system on top of BlockSci, and the GraphSense blockchain analytics platform uses BlockSci’s parser and altcoin support to generate an address graph from the transaction graph [30].

### 4 Conclusion

There is a high level of interest in blockchain analysis among developers, researchers, and students, leading to an unmet need for effective analysis tools. While general-purpose in-memory graph databases exist, a tool customized for blockchain data can leverage its append-only nature and provide integrated high-performance routines for common tasks such as address linking.

BlockSci has already been widely used as a research and educational tool. We hope it will continue to be broadly useful and plan to maintain it as open-source software.

### Acknowledgments

We are grateful to Lucas Mayer for prototype code, Danny Yuxing Huang, Pranay Anchuri, Shaanan Cohney, Rainer Böhme, Michael Fröwis, Jakob Hollenstein, Jason Anastasopoulos, Sarah Meiklejohn, and Dillon Reisman for useful discussions, and Chainalysis for providing access to their Reactor tool. We also thank the anonymous USENIX Security reviewers, the reviewers of the artifact evaluation process, and our shepherd Anita Nikolich for their feedback.

This work is supported by NSF grants CNS-1421689 and CNS-1651938, a grant from the Ripple University Blockchain Research Initiative, the European Union’s Horizon 2020 research and innovation programme under grant agreement No. 740558, the Austrian FFG’s KIRAS programme under project VIRTCRIME, and an NSF Graduate Research Fellowship under grant number DGE-1148900.

### References

[1] Frank McSherry, Michael Isard, and Derek Gordon Murray. “Scalability! But at what COST?” In: Proceedings of the 15th Workshop on Hot Topics in Operating Systems (HotOS XV). May 2015. URL: https://www.usenix.org/conference/hotos15/workshop-program/presentation/mcsherry (visited on 06/12/2020).

[2] Facebook Database Engineering Team. RocksDB. A persistent key-value store for fast storage environments. Version 6.10.2. June 5, 2020. URL: https://rocksdb.org/.

[3] Sarah Meiklejohn et al. “A Fistful of Bitcoins: Characterizing Payments Among Men with No Names”. In: Proceedings of the 2013 Internet Measurement Conference (IMC). Oct. 2013. DOI: 10.1145/2504730.2504747.

[4] Steven Goldfeder et al. “When the cookie meets the blockchain: Privacy risks of web payments via cryptocurrencies”. In: Proceedings on Privacy Enhancing Technologies. Vol. 2018. Oct. 2018. DOI: 10.1515/popets-2018-0038.

[5] Wenzel Jakob. Lock-free parallel disjoint set data structure. June 14, 2020. URL: https://github.com/wjakob/dset.

[6] Michael Fröwis et al. “Safeguarding the Evidential Value of Forensic Cryptocurrency Investigations”. In: (July 28, 2019). arXiv: 1906.12221.

[7] Wenzel Jakob. pybind11 — Seamless operability between C++11 and Python. Version 2.5.0. Mar. 31, 2020. URL: https://github.com/pybind/pybind11.

[8] Martin Fowler. FluentInterface. Dec. 20, 2020. URL: https://www.martinfowler.com/bliki/FluentInterface.html (visited on 02/14/2020).

[9] Harry Kalodner et al. BlockSci: Design and applications of a blockchain analysis platform. Sept. 8, 2017. arXiv: 1709.02489.

[10] Alex Biryukov and Daniel Feher. “Privacy and Linkability of Mining in Zcash”. In: 2019 IEEE Conference on Communications and Network Security (CNS). June 2019. DOI: 10.1109/CNS.2019.8802711.

[11] Danny Yuxing Huang et al. “Tracking Ransomware End-to-end”. In: Proceedings of the 39th IEEE Symposium on Security & Privacy (S&P). May 2018. DOI: 10.1109/SP.2018.00047.

[12] Haaroon Yousaf, George Kappos, and Sarah Meiklejohn. “Tracing Transactions Across Cryptocurrency Ledgers”. In: Proceedings of the 28th USENIX Security Symposium (USENIX Security). Aug. 2019. URL: https://www.usenix.org/conference/usenixsecurity19/presentation/yousaf (visited on 06/13/2020).

[13] Rosario Gennaro, Steven Goldfeder, and Arvind Narayanan. “Threshold-Optimal DSA/ECDSA Signatures and an Application to Bitcoin Wallet Security”. In: Proceedings of the 14th International Conference on Applied Cryptography and Network Security (ACNS). Vol. 9696. Lecture Notes in Computer Science (LNCS). June 2016. DOI: 10.1007/978-3-319-39555-5_9.

[14] Claus-Peter Schnorr. “Efficient signature generation by smart cards”. In: Journal of Cryptology 4 (1991). DOI: 10.1007/BF00196725.

[15] Bitcoin Core. Technology roadmap - Schnorr signatures and signature aggregation. URL: https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/ (visited on 06/07/2020).

[16] Yujin Kwon et al. “Bitcoin vs. Bitcoin Cash: Coexistence or Downfall of Bitcoin Cash?” In: Proceedings of the 40th IEEE Symposium on Security & Privacy (S&P). May 2019. DOI: 10.1109/SP.2019.00075.

[17] Abraham Hinteregger and Bernhard Haslhofer. “Short Paper: An Empirical Analysis of Monero Cross-chain Traceability”. In: Proceedings of the 23rd International Conference on Financial Cryptography and Data Security (FC). Vol. 11598. Lecture Notes in Computer Science (LNCS). Feb. 2019. DOI: 10.1007/978-3-030-32101-7_10.

[18] Francisco Memoria. Bitcoin Gold Wallet Scam Sees Fraudsters Steal $3.2 Million. CCN Markets. Nov. 24, 2017. URL: https://www.ccn.com/bitcoin-gold-wallet-scam-nets-fraudsters-3-2-million-after-stealing-users-private-keys/ (visited on 02/14/2020).

[19] Ron Lavi, Or Sattath, and Aviv Zohar. “Redesigning Bitcoin’s fee market”. In: Companion Proceedings of the The Web Conference (WWW) 2019. May 2019. DOI: 10.1145/3308558.3313454.

[20] Soumya Basu et al. Towards a Functional Fee Market for Cryptocurrencies. DOI: 10.2139/ssrn.3318327.

[21] Bitcoin Core. estimatesmartfee (0.19.0 RPC). Version 0.19.0. URL: https://bitcoincore.org/en/doc/0.19.0/rpc/util/estimatesmartfee/ (visited on 02/15/2020).

[22] Peter Todd. Discourage fee sniping with nLockTime. Pull Request #2340. Dec. 19, 2014. URL: https://github.com/bitcoin/bitcoin/pull/2340 (visited on 06/14/2020).

[23] Yazan Boshmaf, Husam Al Jawaheri, and Mashael Al Sabah. “BlockTag: Design and Applications of a Tagging System for Blockchain Analysis”. In: Proceedings of the 34th IFIP TC11 Information Security Conference & Privacy Conference. June 2019. DOI: 10.1007/978-3-030-22312-0_21.

[24] Marc Jourdan et al. “Characterizing Entities in the Bitcoin Blockchain”. In: 2018 IEEE International Conference on Data Mining Workshops (ICDMW). Oct. 2018. DOI: 10.1109/ICDMW.2018.00016.

[25] Yury Zhauniarovich et al. Characterizing Bitcoin donations to open source software on GitHub. July 9, 2019. arXiv: 1907.04002.

[26] Iain Stewart et al. “Committing to quantum resistance: a slow defence for Bitcoin against a fast quantum computing attack”. In: Royal Society Open Science 5.6 (June 6, 2018). DOI: 10.1098/rsos.180410.

[27] Cristina Pérez-Solà et al. “Another coin bites the dust: an analysis of dust in UTXO-based cryptocurrencies”. In: Royal Society Open Science 6.1 (January 1, 2019). DOI: 10.1098/rsos.180817.

[28] Cristina Pérez-Solà et al. Analysis of the SegWit adoption in Bitcoin. URL: https://deic-web.uab.cat/~guille/publications/papers/2018.recsi.segwit.pdf (visited on 06/13/2020).

[29] Bruno Biais et al. Equilibrium Bitcoin Pricing. DOI: 10.2139/ssrn.3261063.

[30] Bernhard Haslhofer, Roman Karl, and Erwin Filtz. “O Bitcoin Where Art Thou? Insight into Large-Scale Transaction Graphs”. In: Joint Proceedings of the Posters and Demos Track of the 12th International Conference on Semantic Systems and the 1st International Workshop on Semantic Change & Evolving Semantics (SuCCESS’16). September 13, 2016. URL: http://ceur-ws.org/Vol-1695/paper20.pdf (visited on 06/14/2020).

[31] Neo4j Labs. Awesome Procedures On Cypher (APOC). May 23, 2020. URL: https://neo4j.com/labs/apoc/ (visited on 06/14/2020).

### Table 6: Bitcoin Core Fee Estimates

Bitcoin Core fee estimates are chosen such that 60% of past transactions were included within half of the target interval, 85% within the target interval, and 95% within twice the target interval. The differences between actual inclusion times and targeted inclusion times of transactions are shown below.

| Target T | 20 min | 40 min | 60 min | 120 min | 240 min |
|----------|--------|--------|--------|---------|---------|
| 60% (0.5T) | +0.48 | -7.00 | -13.25 | -38.25 | -96.53 |
| 85% (T) | +3.63 | -2.90 | -2.52 | -26.67 | -126.35 |
| 95% (2T) | +5.52 | +18.47 | +58.92 | +108.64 | -41.58 |

### A Graph Database Comparison

We model a simplified transaction graph that includes all important types of nodes but omits many of the properties that BlockSci provides access to (thus requiring less storage than a full layout). While many different graph layouts are conceivable, we chose a layout that models the transaction graph as explicitly as possible (see Figure 10). There are four types of nodes: blocks, transactions, outputs, and addresses. Blocks reference included transactions, transactions reference previous outputs being spent and new outputs being created, and outputs reference the address they send value to.

Table 7 shows the Cypher queries used. Minor syntax changes were necessary due to the particularities of the respective import scripts.

Table 8 contains the full measurements of our performance analysis. All benchmarks were run on an r5.8xlarge EC2 instance (32 vCPUs, 256 GiB memory, 800 GiB EBS volume).

### Table 7: Cypher Queries Used in the Graph Database Performance Comparison

| Query | Description |
|-------|-------------|
| Tx locktime > 0 | `MATCH (tx:Tx) WHERE tx.locktime > 0 RETURN COUNT(*)` |
| Max output value | `MATCH (o:Output) RETURN MAX(o.value)` |
| Calculate fee | `MATCH (i)(o) WITH tx, (totalIn - SUM(o.value)) as fee RETURN MAX(fee)` |
| Satoshi Dice address | `MATCH (a)()-[:TX_OUTPUT]->(o) RETURN o.address` |
| Zero-conf outputs | `MATCH (o:Output {confirmations: 0}) RETURN COUNT(*)` |
| Locktime change (RedisGraph) | `MATCH (tx:Tx)-[:TX_OUTPUT]->(o) WHERE tx.locktime > 0 AND tx2.locktime > 0 WITH tx, COUNT(o) as cnt WHERE cnt = 1 RETURN COUNT(*)` |

### Figure 10: Property Graph Model

```
Block
CONTAINS
Output
TX_INPUT
Tx
TX_OUTPUT
Output
TO_ADDRESS
Address
```

### Table 8: Average Running Time in Seconds and Standard Deviation (in Parentheses) Over Five Consecutive Runs for Various Graph Queries and Data Set Sizes on an r5.8xlarge EC2 Instance (32 vCPUs, 256 GiB Memory)

| Query | 12.5M Transactions | 25M Transactions | 50M Transactions | 100M Transactions |
|-------|--------------------|------------------|------------------|-------------------|
| Tx locktime > 0 | ... | ... | ... | ... |
| Max output value | ... | ... | ... | ... |
| Calculate fee | ... | ... | ... | ... |
| Satoshi Dice address | ... | ... | ... | ... |
| Zero-conf outputs | ... | ... | ... | ... |
| Locktime change | ... | ... | ... | ... |

---

I've organized and refined the text to improve clarity, coherence, and professionalism. If you need further adjustments or additional details, feel free to let me know!