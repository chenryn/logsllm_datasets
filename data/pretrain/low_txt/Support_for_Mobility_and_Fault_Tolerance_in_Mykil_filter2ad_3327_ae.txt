### Member Key Updates and CPU Overhead

In the Iolus protocol, members will update keys as follows: 25,000 members will update two keys, 12,500 members will update three keys, 6,250 members will update four keys, and so on. In contrast, in the Mykil protocol, only members within a specific area are affected. For an area with 5,000 members, 2,500 members will update one key, 1,250 members will update two keys, 625 members will update three keys, 313 members will update four keys, and so on. Consequently, Iolus incurs the minimum amount of CPU overhead per member, while Mykil incurs a slightly higher CPU overhead, and LKH (Logical Key Hierarchy) incurs significantly larger overhead.

### Bandwidth Consumption

The bandwidth consumption per group member during a rekeying operation depends on the length of the key update message. For a join event, the length of the key update message is the same in all three protocols, specifically the length of the encrypted new group/area key. Both LKH and Mykil also unicast the key path to the new member. In Mykil, this corresponds to 16*12 = 172 bytes for an area of 5,000 members. In LKH, it corresponds to 16*17 = 272 bytes for a group of 100,000 members.

For a leave event, the length of the key update message in Iolus depends on the area size. For an area of 5,000 members and assuming 128-bit keys, the length of this message will be about 80,000 bytes. In LKH and Mykil, the size of the rekeying message during a leave event depends on the height of the tree. Specifically, an updated key corresponding to a node \( \alpha \) is encrypted separately by the keys of all children of \( \alpha \). Since all keys along the path from the root to the leaf corresponding to the leaving member are updated, this implies a rekeying message of \( \log_2(n) \times k \) bytes in LKH (where \( n \) is the number of members and \( k \) is the key size), and a similar calculation for Mykil. Figure 7 shows the bandwidth requirements for the three protocols, and Figure 8 provides a detailed comparison of the bandwidth requirements in Mykil and LKH. These graphs clearly demonstrate that both Mykil and LKH require significantly lower bandwidth than Iolus. The bandwidth requirement in Mykil can be further reduced by aggregating consecutive join or leave events. For example, Figure 9 shows the reduction in Mykil by aggregating ten consecutive leave events.

### Join and Rejoin Protocol Performance

We used OpenSSL libraries for cryptography in our implementation. When a 2048-bit key is used, the length of data that can be encrypted by a public key has an upper limit of 256 bytes in the OpenSSL library. At least 41 bytes are needed for the padding method (RSA PKCS1 OAEP PADDING). Therefore, only 215 bytes of buffer can be used to store data in every encryption function call. We attempted to fit our data into this 215-byte buffer to avoid breaking large data into smaller pieces and reassembling them. However, in step 7 of the join protocol or step 6 of the rejoin protocol, the area controller needs to send a set of keys along the path from the joining member to the root in the auxiliary tree, which turned out to be too large to fit within a 215-byte buffer. Thus, in our implementation, the area controller creates a one-time symmetric key, communicates it to the client by encrypting it using the client's public key, and then sends the set of auxiliary keys by encrypting them using the one-time symmetric key.

The average time for a member to join (using the join protocol) was measured to be about 0.45 seconds on a network of three Pentium III 1.0 GHz PCs running RedHat Linux 8.0. With RSA blinding enabled, which blinds the correlation between the encryption/decryption time and the key value, the time increases by only about 0.01 seconds per join operation. The average time for a member to rejoin (using the rejoin protocol) was measured to be about 0.4 seconds under the same computing environment. While there is not much difference in the performance of the join and rejoin protocols, the rejoin protocol does not require participation from the registration server, thus reducing communication and computation load on that server. Furthermore, if steps 4 and 5 are removed from the rejoin protocol (option 2 discussed in Section IV-B), the rejoin time is reduced to about 0.28 seconds.

### Hand-held Devices

An important goal of Mykil is to enable clients to access a multicast service via smaller, hand-held devices such as PDAs and laptops. Current state-of-the-art PDAs running Linux have 400-500 MHz CPUs and 16-32 MB of memory. Based on our discussion on storage requirements in Section V-A, it is clear that the storage requirements of Mykil can easily be satisfied by modern PDAs. To evaluate the computational feasibility of running Mykil on such devices, we ported Mykil to a low-end laptop (Celeron; 600 MHz; 64 MB RAM) running Linux. We experimented with the RC4 encryption algorithm to encrypt/decrypt multicast data. We observed that it took about 0.32 seconds to encrypt/decrypt a 16 MB file, i.e., data can be encrypted or decrypted at about 50 MB/sec on this device. This level of computational power is more than adequate for processing multimedia. For example, a 10 MB file can store one minute of a high-resolution MPEG-4 film (resolution 720 x 416; sound quality 128 KBit/s 44 KHz). It would take only about 200 milliseconds to encrypt/decrypt this file using RC4 on a modern PDA. These preliminary experiments suggest that there should be no problem in porting Mykil to a modern PDA. We plan to do so in the near future.

### Conclusion and Future Work

We have proposed a key management protocol called Mykil that combines two hierarchical schemes, retaining all the important advantages of both. These include scalability, mapping to the underlying network infrastructure, and operation in a disconnected environment. Mykil improves on LKH by reducing resource requirements for group members, providing support for operation in a disconnected environment, and enabling the mapping of the group organization to the underlying network infrastructure. Mykil also improves on Iolus by reducing bandwidth requirements and eliminating the performance bottleneck of the area controller. Additionally, Mykil supports smaller, hand-held devices, user mobility, and robustness. An analysis shows that the resource requirements for a group member in Mykil are reasonable, and a client can use this protocol via smaller, hand-held devices. We have implemented Mykil at the application level on a network of Unix/Linux systems. Performance measurements from this implementation show that the performance of the join and rejoin protocols, which are critical for supporting member mobility and fault tolerance, is adequate. Furthermore, we have provided a proof-of-concept that Mykil is suitable for group members using hand-held devices. Future work includes building a large-scale secure information dissemination system using Mykil.

### References

[1] Conﬁguring VIP and Virtual IP Interface Redundancy. URL: http://www.cisco.com/univercd/cc/td/doc/product/webscale/css/advcfggd/vipredun.htm.
[2] N. Budhiraja, K. Marzullo, F. Schneider, and S. Toueg. Primary-backup protocols: Lower bounds and optimal implementations. In The 3rd IFIP Conference on Dependable Computing for Critical Applications, 1992.
[3] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas. Multicast security: A taxonomy and some efﬁcient constructions. Proceedings of INFOCOMM’99, March 1999.
[4] I. Chang, R. Engel, D. Kandlur, D. Pendarakis, and D. Daha. Key management for secure Internet multicast using boolean function minimization technique. ACM SIGCOMM’99, March 1999.
[5] F. Cristian. Understanding fault-tolerant distributed systems. Communications of ACM, 34(2):56–78, Feb 1991.
[6] A. Eskicioglu. Multimedia security in group communications: Recent progress in wired and wireless networks. ACM Multimedia Systems Journal, September 2003.
[7] T. Hardjono, B. Cain, and I. Monga. Intra-Domain group key management protocol (IGKMP). Internet draft, IETF, February 2000.
[8] X. Li, Y. Yang, M. Gouda, and S. Lam. Batch rekeying for secure group communications. In World Wide Web Conference 10, May 2001.
[9] J. Lin and S. Paul. RMTP: a reliable multicast transport protocol. In Proceedings of IEEE INFOCOM’96, pages 1414–1424, 1996.
[10] D. McGrew and A. Sherman. Key establishment in large dynamic groups using one-way function trees, May 1998. Available at http://www.cs.umbc.edu/~sherman/Papers/itse.ps.
[11] S. Mishra. Key management in large group multicast. Technical Report CU-CS-940-02, Department of Computer Science, University of Colorado, Boulder, CO., 2002.
[12] S. Mishra, C. Fetzer, and F. Cristian. The Timewheel group communication system. IEEE Transaction on Computers, 51(8), August 2002.
[13] S. Mittra. Iolus: A framework for scalable secure multicasting. In Proceedings of the ACM SIGCOMM’97, September 1997.
[14] R. Molva and A. Pannetrat. Scalable multicast security in dynamic groups. In the 6th ACM CCS, November 1999.
[15] C. Neuman and T. Theodore. Kerberos: An authentication service for computer networks. IEEE Communications, 32(9), September 1994.
[16] S. Paul, K. Sabnani, J. Lin, and S. Bhattacharyya. Reliable Multicast Transport Protocol (RMTP). IEEE Journal on Selected Areas in Communications, 15(3):407–421, April 1997.
[17] A. Perrig, D. Song, and J. Tygar. ELK, a new protocol for efﬁcient large-group key distribution. In the IEEE Symposium on Security and Privacy, 2001.
[18] P. Rohatgi. A compact and fast hybrid signature scheme for multicast packet authentication. In the 6th ACM CCS, November 1999.
[19] S. Setia, S. Koussih, and S. Jajodia. Kronos: A scalable group re-keying approach for secure multicast. In Proceedings of the IEEE Symposium on Research in Security and Privacy, May 2000.
[20] D. Wallner, E. Harder, and R. Agee. Key management for multicast: Issues and architectures. RFC (Informational) 2627, IETF, June 1999.
[21] C. Wong, M. Gouda, and S. Lam. Secure group communication using key graphs. In Proceedings of the ACM SIGCOMM’98, October 1998.
[22] R. Yang, S. Li, B. Zhang, and S. Lam. Reliable group rekeying: A performance analysis. In ACM SIGCOMM’01, August 2001.
[23] S. Zhu, S. Setia, and S. Jajodia. Performance optimizations for group key management schemes. In ICDCS, Providence, RI, May 2003.