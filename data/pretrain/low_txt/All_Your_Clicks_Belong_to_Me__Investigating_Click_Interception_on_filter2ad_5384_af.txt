### Figure 3: A Fake Antivirus (AV) Website Visited Due to Click Interception

### 6. Discussion and Future Work

In this section, we discuss the limitations of our work, potential mitigation strategies for the click interception threat, and our future research directions.

#### Third-Party Script Detection
Our methodology for distinguishing first-party scripts from third-party scripts is not 100% accurate. First, domain substring matching can be problematic if an adversary creates victim-specific subdomains. For example, a third-party could generate a subdomain like `xyz.third-party.org` by adding a new entry in its name server. Our technique would mislabel this subdomain as a first-party URL if it is included by `xyz.com`. Second, organizations may use distinct email addresses for their subsidiaries. For instance, the Start of Authority (SOA) email address for `https://www.instagram.com/` is `PI:EMAIL`, while that for `https://www.facebook.net/` is `dns@facebook.com`. We classify scripts loaded directly from Facebook on Instagram as third-party scripts, even though Instagram is owned by Facebook. Although our approach to determining the relationship between two hosts is not complete, it is sufficient for our goals and provides better results compared to similar approaches using only WHOIS records [4].

#### Measurement Scope
We only visited the main pages of the top 250,000 Alexa-ranked websites, which means we might have missed scripts loaded only on sub-pages. However, our goal was to gain a preliminary understanding of the click interception problem. We do not intend to and are not able to cover all pages and scripts on these websites. In the future, we will consider sub-pages to investigate the differences between main pages and sub-pages.

#### Artificial Interaction with Web Pages
OBSERVER uses an artificial method to interact with websites, such as clicking all elements on a page, to automate the analysis. This behavior may differ from that of a real user. Nevertheless, our goal is to collect as much click-related data as possible during each page visit. It would be an interesting research topic to study whether developers write code to distinguish authentic clicks from automatically generated ones [9].

#### Generating Security Warnings
Click interception can direct a user to an unknown URL by modifying first-party hyperlinks or hijacking user clicks on first-party elements. It exploits the fact that users cannot determine the provenance of the URL they are about to visit. To protect users from potentially attacker-controlled URLs, one possible defense is to provide provenance information for each hyperlink and click. Specifically, the browser can display a message alongside each hyperlink indicating whether the associated URL is provided by the first-party website or a third party. The additional message needs to be unforgeable and tamper-proof from JavaScript, so adversaries cannot manipulate such security-related data. One potential implementation is to utilize the browser UI, which is usually not accessible to JavaScript. For example, we can display the message in the status bar when the user hovers over a link. Similarly, to defend against event-listener interception, we can display an unforgeable warning message if the user hovers over an element that is potentially intercepted by a third-party script. However, this may cause many false positives, as an event handler may not necessarily initiate navigation upon a user click. Therefore, it might be better to show such warnings when the user actually performs the click, as done in [10]. According to our experiments, OBSERVER introduces negligible performance overhead on navigation, making it suitable for extension as a real-time detection tool for end-users. We plan to extend OBSERVER by incorporating these defenses and conduct a user study to evaluate their effectiveness.

#### Ensuring Link and Click Integrity
The above defenses require users to make security decisions, which may not be very effective in practice. Alternatively, the browser can automatically enforce integrity policies for hyperlinks and click event handlers. For example, an integrity policy can specify that all first-party hyperlinks should not be modifiable by third-party JavaScript code. One may further specify that third-party scripts are not allowed to control frame navigations, although listening for user clicks is still permitted. Enforcing such policies would effectively prevent click interception by hyperlinks and event handlers. However, it might also break the functionalities of some third-party components. To give users and website administrators better control, the policies can specify permissions for each script, matched by an absolute URL, domain name, wildcard, or secret token, mimicking the Content Security Policy [33]. We plan to develop and evaluate such an integrity protection mechanism as part of our future work.

### 7. Conclusion
We have investigated the click interception problem on the web using a custom analysis framework based on the Chromium browser. We collected data from the top 250,000 Alexa-ranked websites and identified several techniques used to intercept user clicks. We detected that 437 third-party scripts intercepted user clicks using hyperlinks, event handlers, and visual deceptions on 613 websites. We further revealed that many third-party scripts intercept user clicks for monetization through ad click fraud. Additionally, we demonstrated that click interception can lead users to malicious content. Our research sheds light on an emerging client-side threat and highlights the need to restrict the privileges of third-party JavaScript code.

### 8. Acknowledgments
The authors thank the anonymous reviewers and our shepherd, Franziska Roesner, for their helpful suggestions and feedback to improve the paper. This material is based on research supported by CUHK under grant 4055081. The views, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily represent the views of CUHK.

### References
[1] Devdatta Akhawe, Warren He, Zhiwei Li, Reza Moazzezi, and Dawn Song. Clickjacking Revisited: A Perceptual View of UI Security. In Proceedings of the 6th USENIX Workshop on Offensive Technologies (WOOT), 2014.
[2] Sumayah Alrwais, Christopher Dunn, Minaxi Gupta, Alexandre Gerber, Oliver Spatscheck, and Eric Osterweil. Dissecting Ghost Clicks: A Tale of Ad Fraud Via Misdirected Human Clicks. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2012.
...
[33] W3C. Content Security Policy Level 3. https://www.w3.org/TR/CSP3/.
...
[40] Yuchen Zhou and David Evans. Understanding and Monitoring Embedded Web Scripts. In Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2015.