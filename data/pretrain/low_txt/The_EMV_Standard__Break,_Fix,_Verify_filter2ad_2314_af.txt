### Contactless Card and Attacker's Equipment

(4) is a contactless card, and the attacker’s equipment consists of devices (2) and (3), which are the card emulator and the POS emulator, respectively. In this scenario, the trace represents a transaction where the attacker modifies the Transaction Cryptogram (TC) before delivering it to the terminal. The terminal accepts the transaction if the Signed Dynamic Authentication Data (SDAD), produced and returned by the card, passes the terminal’s verification. However, the issuing bank should later decline the transaction due to the incorrect TC. It is important to note that the terminal can only verify the correctness of the SDAD but not the TC, as the latter is verified using a symmetric key known only to the card and the bank.

This type of attack, often referred to as a “free lunch” attack, allows the criminal to purchase low-value goods or services without being charged. However, this business model is unlikely to be attractive for criminals for two reasons: first, the transactions are of low value, and second, the criminal's bank will likely not ignore the defrauded merchant’s complaints indefinitely. For ethical reasons, we did not test this attack as it would constitute actual fraud.

### Defenses Against Attacks on Visa

As reported in Section V-B, the most common configuration of the Mastercard contactless protocol currently in use (namely CDA in conjunction with online PIN) is secure. In contrast, Visa’s configurations are not. Fortunately, Visa’s problems can be addressed by implementing the following three changes, which can be realized by Visa and the banks in a reasonable amount of time and effort without affecting the cards currently in circulation.

The Visa contactless protocol [32] specifies that special-purpose readers may perform Dynamic Data Authentication (DDA) for online transactions. This is the only configuration of the protocol where all three security properties hold (Table II, Line 4). However, our tests on over ten different live terminals at various merchants indicate that none of them used this configuration. To prevent the PIN bypass attack described in Section VI-B, we recommend that terminals should use DDA for online transactions. Specifically, all terminals must, for all transactions:

1. Set the first bit of TTQ’s first byte.
2. Verify the SDAD.

If implemented, these measures would require high-value transactions to be processed with Visa’s secure configuration, assuming that the cards used for such transactions are capable of producing digital signatures, which modern cards are. Furthermore, to prevent the offline attack of Section VI-C, we propose either:

3a. All terminals set the 8th bit of TTQ’s second byte for all transactions; or
3b. Ensure that (NC, CID, AC, PDOL, ATC, CTQ, UN, IAD, AIP) is the input to the SDAD, i.e., d in Figure 2.

The fix 3(a) requires all transactions to be processed online and is preferable over 3(b) because it does not require changes to the standard and thus does not affect the consumer cards in circulation. Additionally, offline transactions are not presently common; none of the more than 30 transactions we conducted during our tests were authorized offline. However, if the capability to process certain transactions offline is imperative (e.g., in transit systems or street parking meters), more aggressive fixes such as 3(b) would be needed.

### Conclusions

We have presented a formal model of the latest version of the EMV standard, featuring all relevant methods for offline data authentication, cardholder verification, and transaction authorization. Using the Tamarin tool, we conducted a full-scale, automatic, formal analysis of this model, uncovering numerous security flaws. These flaws violate fundamental security properties such as authentication and other guarantees about accepted transactions. Our analysis also identified EMV configurations that lead to secure transactions, and we proved their correctness.

Our analysis revealed significant differences between the security of the contactless payment protocols of Mastercard and Visa, showing that Mastercard is more secure than Visa. We found no major issues with the Mastercard protocol version running in modern cards, with only minor shortcomings arising from older authentication modes (SDA and DDA) that seem hard to exploit in practice. In contrast, Visa suffers from several critical issues. The shortcomings we report lead to serious, practical attacks, including a PIN bypass for transactions that surpass the cardholder verification limit. Using our proof-of-concept Android application, we successfully tested this attack on real-world transactions in actual stores, demonstrating that the PIN is useless for Visa contactless transactions. As a result, we believe that the liability shift from banks to consumers or merchants is unjustified for such transactions. Banks, EMVCo, Visa, or some other entity should be liable for such fraudulent transactions.

As part of our analysis, we suggested and verified fixes that banks and Visa can deploy on existing terminals to prevent current and future attacks. The good news is that these fixes do not require changes to the EMV standard itself or to consumer cards currently in circulation and can therefore be feasibly deployed through software updates.

### Future Work

In future work, we plan to merge our EMV contact and contactless models into a single model to analyze cross-protocol executions. We also plan to further refine and extend our models to consider other, possibly stronger, adversaries, such as those with dynamic compromise capabilities.

### References

[References listed here]

### Acronyms

- **AAC**: Application Authentication Cryptogram
- **AC**: Application Cryptogram
- **AFL**: Application File Locator
- **AID**: Application Identifier
- **AIP**: Application Interchange Profile
- **APDU**: Application Protocol Data Unit
- **ARC**: Authorization Response Code
- **ARPC**: Authorization Response Cryptogram
- **ARQC**: Authorization Request Cryptogram
- **ATC**: Application Transaction Counter
- **CA**: Certificate Authority
- **CDA**: Combined Dynamic Data Authentication
- **CDCVM**: Consumer Device CVM
- **CDOL**: Card Risk Management Data Object List
- **CID**: Cryptogram Information Data
- **CTQ**: Card Transaction Qualifiers
- **CVM**: Cardholder Verification Method
- **CVMR**: Cardholder Verification Method Results
- **DDA**: Dynamic Data Authentication
- **DDOL**: Dynamic Data Object List
- **HCE**: Host-based Card Emulation
- **IAD**: Issuer Application Data
- **MAC**: Message Authentication Code
- **NFC**: Near Field Communication
- **ODA**: Offline Data Authentication
- **PAN**: Primary Account Number
- **PDOL**: Processing Data Object List
- **PK**: Public Key
- **POS**: Point-Of-Sale
- **PSE**: Payment System Environment
- **SDA**: Static Data Authentication
- **SDAD**: Signed Dynamic Authentication Data
- **SSAD**: Signed Static Authentication Data
- **TA**: Transaction Authorization
- **TC**: Transaction Cryptogram
- **TTQ**: Terminal Transaction Qualifiers