### Security Evaluation Against a Spectrum of User/Kernel Malware

#### Data Summary
- **File Sizes (KB):** 142, 141, 145, 167, 174, 166, 200, 206, 121, 169, 212, 158, 216, 245, 286, 257, 247, 215, 222, 143, 168, 230, 215, 233, 177, 297
- **Compression Ratios (%):** 42.7, 57.6, 61.0, 41.1, 79.8, 60.8, 60.1, 40.5, 77.7, 49.5, 60.4, 65.2, 48.1, 57.1, 61.7, 59.7

#### Malware Analysis
- **Names:**
  - Injectso
  - Cymothoa v1
  - Cymothoa v2
  - Cymothoa v3
  - Cymothoa v4
  - Hotpatch
  - Xlibtrace
  - Hijacker
  - Infelf v1
  - Infelf v2
  - Arches
  - Elf-infector
  - ERESI
  - KBeast
  - Sebek
  - Adore-ng

- **Infection Methods:**
  - Online infection: Shared object injection
  - Online infection: Fork process
  - Online infection: Clone thread
  - Online infection: Settimer parasite
  - Online infection: Signal/Alarm parasite
  - Online infection: Library injection
  - Online infection: $LD_PRELOAD linker
  - Online infection: Global offset table poisoning
  - Offline binary infection
  - Kernel rootkit

- **Payloads:**
  - UDP server
  - Bind /bin/sh to TCP port and fork shell
  - Remote file sniffer
  - Single process backdoor
  - File writing of injecting timestamp
  - Tracking function invocation
  - Redirection of library function
  - Remote shell server
  - Register dumping
  - File/Process hiding, keystroke sniffer
  - Confidential data collection
  - File/Process hiding

- **Notes:**
  - Case study I: Recover sys fork and TCP server
  - Case study II: Recover sys clone and TCP server, Recover sys settimer and signal handler
  - Case study III: Recover remote shell socket operations, Recover register dumping operations on terminal
  - Case study IV: Recover kernel code in sebek module, Recover kernel code in adore-ng module

#### Detailed Case Studies

##### Case Study I – Cymothoa
Cymothoa [11] is a shell-code injection framework that uses various infection methods and payload types. The parasite executable coexists with the host process stealthily while the host process continues to work properly. We tested all four working parasites introduced in "Single Process Parasite" [12] in Phrack issue 68 and successfully revealed all four attack behaviors.

- **Control Flow:**
  - The parasite uses `sys_fork` and `sys_clone` system calls to create a child process/thread to execute its payload.
  - Later variants utilize `settimer` and `signal` to schedule the shellcode inside the host process.
  - The most stealthy variant (variant 4) creates a backdoor parasite living within another process (e.g., bash).
  - The shellcode registers a signal handler for the SIGALRM signal, opens a non-blocking I/O socket, binds it to a specific port, and sets the SIGALRM timer.
  - When the SIGALRM signal is handled, the parasite accepts any connection on the socket and launches a remote shell.
  - The parent then sets the timer again and resumes execution of the host process.

- **Detection:**
  - The kernel code executed by the shellcode's actions (e.g., setting the signal handler, creating the TCP server, and setting the alarm clock) are recorded in the kernel recovery log.
  - This reveals both the infection method and payload behaviors of the stealthy parasite.
  - Existing kernel minimization techniques may fail to detect this attack because other applications will likely add these kernel regions into the union-based minimized kernel.

##### Case Study II – Infelf
Infelf [13] is an offline binary infection tool that implants trojan code into an existing binary program. It splits trojan code into multiple instruction blocks, inserts them into free alignment areas between functions, and concatenates their execution path with jump instructions.

- **Example:**
  - We used this tool to implant a hardware register printing function into the gvim binary and redirect gvim’s entry function to this shellcode.
  - During gvim’s startup, FACE-CHANGE recovers numerous TTY kernel functions which are not included in gvim’s kernel view.
  - A whole-system kernel minimization technique would be unable to detect this attack on a system containing both gvim and terminal applications that require the kernel’s TTY functions (such as tcpdump or bash).

##### Case Study III – KBeast Rootkit
KBeast [14] is a new rootkit that inherits many features from traditional Linux kernel rootkits (e.g., file/process/socket/module hiding, keystroke sniffer) and supports recent kernel versions.

- **Detection:**
  - We use the kernel view for the bash program to detect the existence of KBeast.
  - All keystrokes typed in bash are processed by the keyboard event handler.
  - KBeast intercepts and reads the keystrokes, stores this data into a hidden file, and hides its existence by removing itself from the kernel module list.
  - By backtracking the recovered kernel functions, we find code addresses with an UNKNOWN tag, indicating that these memory addresses are not in any identified memory regions.
  - KBeast’s code hijacks the entries of some system calls and invokes `strnlen` to check the length of the keystroke buffer, `filp_open` to open the hidden file, and `do_sync_write` to write the keystroke data into this file.

#### Performance Evaluation
- **System Performance:**
  - We use the UnixBench benchmark suite to measure and evaluate system performance.
  - **Measurements:**
    1. Run UnixBench without enabling FACE-CHANGE to get a baseline result.
    2. Enable FACE-CHANGE, load one kernel view (Apache), and run the benchmark.
    3. Launch applications from Table I and load their kernel views one at a time, rerunning the benchmark after each kernel view is loaded.

- **Results:**
  - Enabling our system incurs 5%~7% performance overhead on the whole system.
  - Adding multiple kernel views has a trivial impact on system performance.
  - The only performance degradation occurs during the subtest Pipe-based Context Switching of UnixBench, which is expected due to additional traps triggered by FACE-CHANGE.

#### Challenges and Future Work
- **Challenge:**
  - If a web server is compromised and a parasite command-and-control (C&C) server is installed, and if this C&C server uses only kernel functionalities within the kernel view of the host web server, FACE-CHANGE does not need to recover any missing kernel code, making detection impossible.
  - This problem requires a deeper understanding and finer-grained profiling of the semantic behaviors of each application.

- **Future Work:**
  - In addition to recording an application’s kernel usage in the profiling phase, we need to profile the application’s behavior, specifically its interactions with the kernel.
  - This will allow us to classify malicious behavior during the runtime phase if it violates the application’s known behaviors.