# SIM Toolkit (STK) Applications and Development

**Presenters:**
- Karl Koscher (@supersat)
- Eric Butler (@codebutler)

**Revision Date:** July 8, 2013
**Updated Slides:** Available from defcon.org and http://simhacks.github.io/

## Introduction
- **Applications on SIM Cards:** These applications reside on the SIM card, with the phone acting as a simple host for user interface (UI) and connectivity.
- **Control by Telcos:** Since telcos own the SIMs, they control the applications.
- **SIM Toolkit (STK) Applications:** Widely used in developing countries for mobile banking and other services. However, there is limited documentation available on their development and functionality.

## Exploration at Toorcamp 2012
- **GSM Network Setup:** Toorcamp 2012 had its own GSM network, which included SIM cards supporting STK.
- **Research and Development:** After extensive research, we figured out how to program these SIMs. This presentation aims to share our findings and help others avoid the same challenges.

## Capabilities of SIM Cards
- **Powerful Capabilities:** SIM cards are more powerful than commonly perceived. They can be used for secure storage of SSH keys, Bitcoin, and phone decryption keys.
- **Development Platform:** STK app development is similar to Java Card development, making unlocked STK SIMs a cost-effective smart card development platform.

## STK Application Features
- **User Interface (UI):** Display text, menus, play tones, and read input.
- **Communication:** Send SMS, initiate calls, and use data services.
- **Event Handling:** Respond to events like call connected, call disconnected, etc.
- **Interactions:** Interact with the rest of the SIM card and run arbitrary AT commands on the phone.

## Technology Stack
- **Smart Cards**
- **Java Card**
- **GlobalPlatform**
- **SMS**
- **SIM Toolkit API**

## Standards and Protocols
- **ISO 7816-1:** Physical characteristics
- **ISO 7816-2:** Electrical contacts
- **ISO 7816-3:** Electrical interface, Transmission Protocol Data Units (TPDUs)
  - **T=0:** Byte-oriented protocol
  - **T=1:** Block-oriented protocol
- **ISO 7816-4:** Standard commands, Application Protocol Data Units (APDUs)
- **ISO 14443-4:** APDUs over RFID

## Command and Response APDUs
- **Command APDU Structure:**
  - **Class (CLS):** Indicates the command class
  - **Instruction (INS):** Specifies the command
  - **Parameters (P1, P2):** Additional parameters
  - **Data:** Command-specific data
  - **Length (Lc):** Length of the data field
  - **Expected (Le):** Expected length of the response
  - **Optional (SW1, SW2):** Status words indicating success or error

- **Response APDU Structure:**
  - **Status Words (SW1, SW2):** Indicate the result of the command
  - **Common Status Codes:**
    - **90 00:** Success
    - **6A 80:** Incorrect parameter
    - **6B 00:** Incorrect Le

## Java Card Development
- **Java Card Differences:**
  - No garbage collection
  - Limited data types (no chars, strings, floats, multi-dim arrays)
  - Instance and class variables stored in EEPROM with limited write cycles
  - Exceptions are supported

- **Mandatory Methods:**
  - **install (static):** Creates the application object and registers it with the card manager
  - **process:** Handles APDUs sent to the card (byte array in, byte array out)

## Development Environment
- **IDEs and Tools:**
  - Specialized IDEs are available, but not required.
  - Download the Java Card Development Kit from Oracle (free).
  - For Eclipse, remove the JRE system library and add the Java Card library.
  - Target Java 1.1 bytecode; 1.3 source code compatibility is acceptable.

- **Conversion and Packaging:**
  - Convert .class files to Java Card bytecode using the converter tool in the SDK.
  - Specify application ID, API export directory, etc.
  - The resulting CAP file is a ZIP archive of CAP components defining your app.

## Example Commands
- **Eclipse Settings:**
  ```sh
  $ javac -cp ../sim-tools/javacard/lib/api21.jar -target 1.1 -source 1.3 com/degdeg/HelloCard/HelloApplet.java
  java -jar ../sim-tools/javacard/bin/converter.jar -exportpath ../sim-tools/javacard/api21_export_files -applet 0xde:0xfc:0x09:0x20:0x13:0x01 com.degdeg.HelloCard.HelloApplet com.degdeg.HelloCard 0xde:0xfc:0x09:0x20:0x13 1.0
  ```

- **Loading and Authorizing Apps:**
  - **Issuer Security Domain (ISD):** All apps are loaded and authorized by the ISD.
  - **Two-Step Process:**
    - Load the binary
    - Instantiate the app
  - **Commands:**
    - **INSTALL for load:**
      ```sh
      80 E6 02 00 12 07 F0 F1 F2 F3 F4 F5 01 00 00 06 EF 04 C6 02 05 00 00
      ```
    - **LOAD:**
      ```sh
      80 E8 00 00 6C C4 81 F7 01 00 11 DE CA FF ED 01 02 04 00 01 07 F0 F1 F2 F3 F4 F5 01 ...
      80 E8 00 01 6C ...
      80 E8 80 02 20 ...
      ```
    - **INSTALL for install and make selectable:**
      ```sh
      80 E6 0C 00 36 07 F0 F1 F2 F3 F4 F5 01 08 F0 F1 F2 F3 F4 F5 01 01 08 F0 F1 F2 F3 F4 F5 01 01 01 00 18 EF 14 C8 02 05 00 C7 02 00 00 CA 0A 01 00 FF 00 10 01 00 00 00 00 C9 00 00
      ```

## Over-the-Air (OTA) Updates
- **SIMalliance Loader:** A free tool for programming SIMs, though it may require configuration for specific SIM cards.
- **SMS Packets:** Used to send APDUs to the SIM card.
- **CAT ENVELOPE (A0 C2):** Used for sending SMS-PP Download (D1) commands.

## STK App Development
- **App Registration:** The app registers itself with the SIM Toolkit API, and the phone informs the STK of its capabilities.
- **Event Handling:** Selection of an app triggers an event, and the app can send UI requests back to the phone.

## Potential Applications
- **Security and Storage:** Secure storage of SSH keys, Bitcoin, and phone decryption keys.
- **Botnets and Remote Control:** Potential for creating SIM card botnets.
- **API Integration:** If phones provide an API to send APDUs to SIM apps, new possibilities will emerge.

## Resources
- **Tools and Documentation:**
  - http://simhacks.github.io/
  - Java Card 2.1.1 Virtual Machine Specification
  - GlobalPlatform Card Specification 2.1/2.2
  - GSM 03.48 – Secure remote SIM access
  - GSM 03.40 – SMS standard
  - ETSI TS 101 220 – Assigned numbers
  - ETSI TS 102 221 – UICC/(U)SIM spec
  - ETSI TS 102 223 – Card Application Toolkit
  - ETSI TS 102 226 – Remote APDUs
  - ETSI TS 102 241 – UICC/SIM API for JavaCard

- **Additional Reading:**
  - http://adywicaksono.wordpress.com/2008/05/21/understanding-gsm-0348/
  - http://wiki.thc.org/gsm/simtoolkit
  - http://randomoracle.wordpress.com/2013/01/28/using-the-secure-element-on-android-devices-33/

**Learn more and get the tools at:**
- http://simhacks.github.io/