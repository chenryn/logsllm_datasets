### Use Cases for On-Device Instrumentation and TZ-M Protected Shadow Stack

In scenarios where on-device instrumentation is not a concern, a TrustZone-M (TZ-M) protected shadow stack can be utilized with binary patching. This approach has the advantage of not requiring Branch Monitor logic in the supervisor call handler.

### 7. Related Work

#### 7.1. Code-Reuse Attack Countermeasures

Code-reuse attack countermeasures have been a focal point of research over the past decade. The most widely used mitigation technique against this class of attacks is Address Space Layout Randomization (ASLR) [13, 34]. ASLR relies on shuffling the base addresses of the executable, stack, and heap in virtual memory, thereby forcing an attacker to guess the location of the target code or data. However, ASLR is impractical for constrained devices that lack Memory Management Units (MMUs) and have limited memory resources.

#### 7.2. Evaluation of Shadow Stacks

Dang et al. [14] conducted a comprehensive evaluation of various shadow stack schemes under different adversarial models. Traditional shadow stacks, including Dang et al.’s parallel shadow stack [14] and others [24, 25, 38], are based on unprotected shadow stacks. These can be compromised if the shadow stack's location is known, as they reside in the same address space as the vulnerable application. Shadow stacks protected by canary values [20, 42] can withstand sequential write attacks but are vulnerable to arbitrary writes to specific memory addresses.

Dang et al. identified only two schemes that operate under an equivalent adversarial model as CaRE, specifically with regard to the ability to withstand the disclosure of the shadow stack's location: Chiueh and Hsu’s Read-Only RAD [10] and Abadi et al.’s CFI scheme [2]. Read-Only RAD incurs a substantial overhead, ranging from 1900% to 4400% according to benchmarks by the authors. Abadi et al.’s protected shadow stack achieves a more modest overhead between 5% and 55% (with an average of 21%). However, it relies on x86 memory segments, a hardware feature not available on low-end microcontrollers (MCUs). In contrast, CaRE provides equivalent security guarantees without requiring hardware features unique to high-end general-purpose processors and outperforms previous software-only protected shadow stacks.

#### 7.3. Stronger Adversary Models

Additionally, CaRE considers an even stronger adversary who can exploit interrupt handling to undermine Control-Flow Integrity (CFI) protection, a scenario largely ignored in previous CFI works. Prior work, such as ROPDefender [17] and PICFI [39], supports software exception handling, particularly for C++ exceptions. To the best of our knowledge, CaRE is the first scheme to protect hardware interrupts initiated by the CPU, which is essential for CFI in bare-metal programs. We do not claim to handle software exceptions, as our system model assumes C programs.

#### 7.4. Hardware Support for CFI

The prevalence of Return-Oriented Programming (ROP) and Jump-Oriented Programming (JOP) exploitation techniques in runtime attacks on modern PC platforms has prompted processor manufacturers to provide hardware support for CFI enforcement. In June 2016, Intel announced its Control-Flow Enforcement Technology [30], which adds support for shadow call stacks and indirect call validation to the x86/x86-64 instruction set architecture. Similarly, the ARMv8.3-A architecture provides Pointer Authentication (PAC) [43] instructions for ARM application processors, which can be leveraged for memory corruption countermeasures such as stack protection and CFI. However, countermeasures suitable for resource-constrained embedded devices have received far less attention.

Kumar et al. [33] proposed a software-hardware co-design for the AVR family of microcontrollers, placing control-flow data in a separate safe-stack in protected memory. Francillon et al. [22] proposed a similar hardware architecture where the safe-stack is accessible only to return and call instructions. AVRAND by Pastrana et al. [41] is a software-based defense against code reuse attacks for AVR devices. HAFIX [16] is a hardware-based CFI solution for the Intel Siskiyou Peak and SPARC embedded system architectures. SOFIA [11] is a hardware-based security architecture for the LEON3 soft microprocessor, providing software integrity protection and CFI through instruction set randomization.

### 8. Conclusion

Security is paramount for the safe and reliable operation of connected IoT devices. It is only a matter of time before attacks against these devices evolve from simple attacks, such as targeting default passwords, to advanced exploitation techniques like code-reuse attacks. The introduction of lightweight trust anchors, such as TrustZone-M, to constrained IoT devices will enable the deployment of more advanced security mechanisms on these devices. We demonstrate why and how a well-understood CFI technique needs to be adapted for low-end IoT devices to improve their resilience against advanced attacks. Leveraging hardware-assisted security is an important enabler in CaRE, but it also meets other requirements crucial for practical deployment on small devices, such as interrupt-awareness, layout-preserving instrumentation, and the possibility for on-device instrumentation. For small, interrupt-driven devices, ensuring CFI in both interruptible code and code executing in interrupt contexts is essential.

### Acknowledgments

This work was supported by the German Science Foundation (project S2, CRC 1119 CROSSING), Tekes—the Finnish Funding Agency for Innovation (CloSer project), and the Intel Collaborative Research Institute for Secure Computing (ICRI-SC).

### References

1. ARM compiler version 6.4 software development guide. http://infocenter.arm.com/help/topic/com.arm.doc.dui0773e (2015)
2. Abadi, M., Budiu, M., Erlingsson, U., Ligatti, J.: Control-Flow Integrity Principles, Implementations, and Applications. ACM Trans. Inf. Syst. Secur. 13(1), 4:1–4:40 (2009). http://doi.acm.org/10.1145/1609956.1609960
3. ARM Ltd.: Procedure Call Standard for the ARM Architecture (2009). http://infocenter.arm.com/help/topic/com.arm.doc.ihi0042d
4. ARM Ltd.: ARMv8-M Architecture Reference Manual. (2016). http://infocenter.arm.com/help/topic/com.arm.doc.ddi0553a.b
5. Brown, N.: Control-Flow Integrity for Real-time Embedded Systems. Master’s thesis, Worcester Polytechnic Institute, Worcester, MA, USA (2017)
6. Buchanan, E., Roemer, R., Shacham, H., Savage, S.: When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC. In: Proceedings of the 15th ACM Conference on Computer and Communications Security. CCS 2008, pp. 27–38. ACM, New York (2008). http://doi.acm.org/10.1145/1455770.1455776
7. Carlini, N., Barresi, A., Payer, M., Wagner, D., Gross, T.R.: Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In: Proceedings of the 24th USENIX Conference on Security Symposium. SEC 2015, pp. 161–176. USENIX Association, Berkeley (2015). http://dl.acm.org/citation.cfm?id=2831143.2831154
8. Checkoway, S., Davi, L., Dmitrienko, A., Sadeghi, A.R., Shacham, H., Winandy, M.: Return-Oriented Programming Without Returns. In: Proceedings of the 17th ACM Conference on Computer and Communications Security. CCS 2010, pp. 559–572. ACM, New York (2010). http://doi.acm.org/10.1145/1866307.1866370
9. Checkoway, S., Feldman, A.J., Kantor, B., Halderman, J.A., Felten, E.W., Shacham, H.: Can DRES Provide Long-Lasting Security? The Case of Return-Oriented Programming and the AVC Advantage. In: Proceedings of the 2009 Conference on Electronic Voting Technology/Workshop on Trustworthy Elections. EVT/WOTE 2009, p. 6. USENIX Association, Berkeley (2009). http://dl.acm.org/citation.cfm?id=1855491.1855497
10. Chiueh, T.C., Hsu, F.H.: RAD: A Compile-Time Solution to Buffer Overflow Attacks. In: 21st International Conference on Distributed Computing Systems, pp. 409–417, April 2001
11. de Clercq, R., Keulenaer, R.D., Coppens, B., Yang, B., Maene, P., d. Bosschere, K., Preneel, B., De Sutter, B., Verbauwhede, I.: SOFIA: Software and Control Flow Integrity Architecture. In: 2016 Design, Automation Test in Europe Conference Exhibition (DATE), pp. 1172–1177, March 2016
12. de Clercq, R., Piessens, F., Schellekens, D., Verbauwhede, I.: Secure Interrupts on Low-End Microcontrollers. In: 2014 IEEE 25th International Conference on Application-Specific Systems, Architectures and Processors, pp. 147–152, June 2014
13. Cohen, F.B.: Operating System Protection Through Program Evolution. Comput. Secur. 12(6), 565–584 (1993). http://dx.doi.org/10.1016/0167-4048(93)90054–9
14. Dang, T.H., Maniatis, P., Wagner, D.: The Performance Cost of Shadow Stacks and Stack Canaries. In: Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security. ASIA CCS 2015, pp. 555–566. ACM, New York (2015). http://doi.acm.org/10.1145/2714576.2714635
15. Davi, L., Dmitrienko, A., Egele, M., Fischer, T., Holz, T., Hund, R., Nürnberger, S., Sadeghi, A.R.: MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In: 19th Annual Network and Distributed System Security Symposium. NDSS 2012, February 5–8, San Diego, USA (2012). http://www.internetsociety.org/mocfi-framework-mitigate-control-flow-attacks-smartphones
16. Davi, L., Hanreich, M., Paul, D., Sadeghi, A.R., Koeberl, P., Sullivan, D., Arias, O., Jin, Y.: HA-FIX: Hardware-Assisted Flow Integrity Extension. In: Proceedings of the 52Nd Annual Design Automation Conference. DAC 2015, pp. 74:1–74:6. ACM, New York (2015). http://doi.acm.org/10.1145/2744769.2744847
17. Davi, L., Sadeghi, A.R., Winandy, M.: ROPDefender: A Detection Tool to Defend Against Return-Oriented Programming Attacks. In: Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security. ASIACCS 2011, pp. 40–51. ACM, New York (2011). http://doi.acm.org/10.1145/1966913.1966920
18. Eldefrawy, K., Francillon, A., Perito, D., Tsudik, G.: SMART: Secure and Minimal Architecture for (Establishing a Dynamic) Root of Trust. In: 19th Annual Network and Distributed System Security Symposium. NDSS 2012, February 5–8, San Diego, USA, February 2012. http://www.eurecom.fr/publication/3536
19. Ericsson: Ericsson Mobility Report (2015). http://www.ericsson.com/res/docs/2015/mobility-report/ericsson-mobility-report-nov-2015.pdf
20. Erlingsson, U., Abadi, M., Vrable, M., Budiu, M., Necula, G.C.: XFI: Software Guards for System Address Spaces. In: Proceedings of the 7th Symposium on Operating Systems Design and Implementation. OSDI 2006, pp. 75–88. USENIX Association, Berkeley (2006). http://dl.acm.org/citation.cfm?id=1298455.1298463
21. Francillon, A., Castelluccia, C.: Code Injection Attacks on Harvard-Architecture Devices. In: Proceedings of the 15th ACM Conference on Computer and Communications Security. CCS 2008, pp. 15–26. ACM, New York (2008). http://doi.acm.org/10.1145/1455770.1455775
22. Francillon, A., Perito, D., Castelluccia, C.: Defending Embedded Systems Against Control Flow Attacks. In: Proceedings of the First ACM Workshop on Secure Execution of Untrusted Code. SecuCode 2009, pp. 19–26. ACM, New York (2009). http://doi.acm.org/10.1145/1655077.1655083
23. Gartner: Gartner Says Managing Identities and Access Will Be Critical to the Success of the Internet of Things (2015). http://www.gartner.com/newsroom/id/2985717
24. Griffin, J.T., Jha, S., Miller, B.P.: Detecting Manipulated Remote Call Streams. In: Proceedings of the 11th USENIX Security Symposium, pp. 61–79. USENIX Association, Berkeley (2002). http://dl.acm.org/citation.cfm?id=647253.720282
25. Griffin, J.T., Jha, S., Miller, B.P.: Efficient Context-Sensitive Intrusion Detection. In: Proceedings of the Network and Distributed System Security Symposium. NDSS 2004 (2004)
26. Eclipse IoT Working Group, IEEE IoT, AGILE IoT and IoT Council: IoT Developer Survey 2017 (2017). https://ianskerrett.wordpress.com/2017/04/19/iot-developer-trends-2017-edition/
27. Habibi, J., Panicker, A., Gupta, A., Bertino, E.: DisARM: Mitigating Buffer Overflow Attacks on Embedded Devices. In: Qiu, M., Xu, S., Yung, M., Zhang, H. (eds.) NSS 2015. LNCS, vol. 9408. Springer, Cham (2015). doi:10.1007/978-3-319-25645-0_8
28. Hewlett-Packard: Data Execution Prevention (2006). http://h10032.www1.hp.com/ctg/Manual/c00387685.pdf
29. Hu, H., Shinde, S., Adrian, S., Chua, Z.L., Saxena, P., Liang, Z.: Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks. In: IEEE Symposium on Security and Privacy, SP 2016, San Jose, CA, USA, May 22–26, 2016, pp. 969–986 (2016). http://doi.ieeecomputersociety.org/10.1109/SP.2016.62
30. Intel: Control-Flow Enforcement Technology Preview (2016). https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf
31. Koeberl, P., Schulz, S., Sadeghi, A.R., Varadharajan, V.: TrustLite: A Security Architecture for Tiny Embedded Devices. In: Proceedings of the Ninth European Conference on Computer Systems. EuroSys 2014, pp. 10:1–10:14. ACM, New York (2014). http://doi.acm.org/10.1145/2592798.2592824
32. Kornau, T.: Return Oriented Programming for the ARM Architecture. Master’s thesis, Ruhr-University Bochum (2009). http://static.googleusercontent.com/media/www.zynamics.com/en//downloads/kornau-tim-diplomarbeit-rop.pdf
33. Kumar, R., Singhania, A., Castner, A., Kohler, E., Srivastava, M.: A System for Coarse Grained Memory Protection in Tiny Embedded Processors. In: Proceedings of the 44th Annual Design Automation Conference. DAC 2007, pp. 218–223. ACM, New York (2007). http://doi.acm.org/10.1145/1278480.1278534
34. Larsen, P., Homescu, A., Brunthaler, S., Franz, M.: SoK: Automated Software Diversity. In: Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP 2014, pp. 276–291. IEEE Computer Society, Washington, DC (2014). http://dx.doi.org/10.1109/SP.2014.25
35. Le, L.: ARM Exploitation ROPMap. BlackHat USA (2011)
36. Lian, W., Shacham, H., Savage, S.: Too LeJIT to Quit: Extending JIT Spraying to ARM. In: Kirda, E. (ed.) Proceedings of NDSS 2015. Internet Society, February 2015
37. Microsoft: Enhanced Mitigation Experience Toolkit (2016). https://www.microsoft.com/emet
38. Nebenzahl, D., Sagiv, M., Wool, A.: Install-Time Vaccination of Windows Executables to Defend Against Stack Smashing Attacks. IEEE Trans. Dependable Secur. Comput. 3(1), 78–90 (2006). http://dx.doi.org/10.1109/TDSC.2006.14
39. Niu, B., Tan, G.: Per-Input Control-Flow Integrity. In: Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. CCS 2015, pp. 914–926. ACM, New York (2015). http://doi.acm.org/10.1145/2810103.2813644
40. Noorman, J., Agten, P., Daniels, W., Strackx, R., Van Herrewege, A., Huygens, C., Preneel, B., Verbauwhede, I., Piessens, F.: Sancus: Low-Cost Trustworthy Extensible Networked Devices with a Zero-Software Trusted Computing Base. In: Proceedings of the 22nd USENIX Conference on Security. SEC 2013, pp. 479–494. USENIX Association, Berkeley (2013). http://dl.acm.org/citation.cfm?id=2534766.2534808
41. Pastrana, S., Tapiador, J., Suarez-Tangil, G., Peris-López, P.: AVRAND: A Software-Based Defense Against Code Reuse Attacks for AVR Embedded Devices. In: Caballero, J., Zurutuza, U., Rodríguez, R.J. (eds.) DIMVA 2016. LNCS, vol. 9721, pp. 58–77. Springer, Cham (2016). doi:10.1007/978-3-319-40667-1_4
42. Prasad, M., Chiueh, T.: A Binary Rewriting Defense Against Stack Based Overflow Attacks. In: Proceedings of the USENIX Annual Technical Conference, pp. 211–224 (2003)
43. Qualcomm Technologies Inc: Pointer Authentication on ARMv8.3. https://www.qualcomm.com/media/documents/files/whitepaper-pointer-authentication-on-armv8-3.pdf (2017).
44. Shacham, H.: The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In: Proceedings of the 14th ACM Conference on Computer and Communications Security. CCS 2007, pp. 552–561. ACM, New York (2007). http://doi.acm.org/10.1145/1315245.1315313
45. Designer, S.: lpr LIBC RETURN exploit (1997). http://insecure.org/sploits/linux.libc.return.lpr.sploit.html
46. Szekeres, L., Payer, M., Wei, T., Song, D.: SoK: Eternal War in Memory. In: Proceedings of the 2013 IEEE Symposium on Security and Privacy. SP 2013, pp. 48–62. IEEE Computer Society, Washington, DC (2013). http://dx.doi.org/10.1109/SP.2013.13
47. Weicker, R.P.: Dhrystone: A Synthetic Systems Programming Benchmark. Commun. ACM 27(10), 1013–1030 (1984). http://doi.acm.org/10.1145/358274.358283
48. Yiu, J.: ARMv8-M Architecture Technical Overview (2015). https://community.arm.com/docs/DOC-10896