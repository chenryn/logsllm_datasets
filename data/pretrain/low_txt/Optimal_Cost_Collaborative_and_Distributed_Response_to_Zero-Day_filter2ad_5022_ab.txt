### Mechanism with Pre-Shared Key
A mechanism using a pre-shared key was adopted.

### Control Center
The control center is composed of several software modules, including the launcher, log receiver, log analyzer, traffic analyzer, and firewall controller. These components run on a UNIX-based system. The network administrator initiates the launcher with root privileges, which in turn launches the log receiver and triggers the log and traffic analyzers. When a compromised host or master is identified, a message is output to the console. The traffic analyzer was implemented in C for performance reasons, while other modules were developed in Python to simplify implementation.

The log receiver, built using the Twisted framework, receives messages from clients and redirects them to the standard output. If Twisted is not available, the agent will wait and attempt to fetch the command again.

### Time-Based Patterns
We observed that many malicious software programs are designed to periodically communicate with their controllers. After communicating with the master, the compromised hosts either rapidly request resources from a remote server (e.g., updating malware or fetching new commands) or sleep for a fixed period if no command is sent. For example, in Figure 4, a compromised host communicates with its master every 900 seconds. By monitoring connections established at regular intervals, we can identify the master. To enhance detection accuracy, we employ discrete Fourier transformation (DFT). If the communication interval is \( T \), DFT analysis will show a high amplitude at the frequency of \( \frac{1}{T} \) in the spectrum density plot. However, intelligent malware may use random intervals, rendering time-based detection ineffective. To address this, we consider additional patterns.

### Other Patterns
HTTP is commonly used for transmitting web pages and associated resources. Regular web pages often include images, style sheets, and scripts. Malware on compromised hosts, however, typically do not use these elements, as they are lightweight and do not require HTML parsers. Thus, detecting requests without JavaScript or images, or those with simple plain-text requests, can help identify communications to masters. However, this approach may generate false positives due to similar patterns in legitimate web services. To mitigate this, we integrate other patterns:

- **User-Agent**: This request header field, defined in RFC2616, is typically sent by well-mannered browsers. Many malware programs do not send a User-Agent or use faked ones like "Microsoft IE" or "Mozilla/6.0".
- **HTTP Version**: Modern browsers use HTTP/1.1, while many malware programs use the obsolete HTTP/1.0. Therefore, traffic using HTTP/1.0 is suspicious.

By integrating these features into the detection module, we can improve the accuracy of our detection.

### Workflow
The traffic analyzer identifies whether other hosts within the enterprise network are communicating with a known malware-master. In practice, various types of malware exist in the network. Passive discovery can detect different kinds of malware through pattern-matching, though it may produce some false positives. For example, network-based applications like IM and P2P software may also communicate periodically with external servers. Using application-specific knowledge, we can filter out false positives and enhance the accuracy of passive discovery. Combining active and passive discovery methods, our system achieves a high detection rate.

### Patterns of Malware
Malware propagation generally involves two parts: the master (or controller) and the agent (installed on compromised hosts). Although agents vary in implementation, their basic function is to communicate with the master and fetch commands. After receiving a command, the agent executes it.

### Experimental Evaluation
In this section, we demonstrate the feasibility and effectiveness of our proposed detection framework through real-world experiments conducted in a controlled testbed.

#### Experimental Setup
We selected malware samples from http://www.gangsir.cn/, a site providing popular malware samples updated monthly. To save time and minimize impact on the campus network, we used virtual machines (VMs) on Mac OS X with VirtualBox. The guest OS is Windows XP SP3, fully patched but without antivirus software. Snapshots are taken after OS installation. Each experiment begins with a USB stick containing malware, and snapshots are restored after each experiment.

#### Experimental Results
To validate the detection system, we implemented both passive and active discovery methods.

**Passive Discovery:**
We emulated a realistic scenario in an enterprise network where the network administrator may be unaware of individual compromised computers. Detection Agents (DAs) were installed on all hosts. In our experiment, ten VMs running Windows XP were used, with hosts 0, 1, and 2 compromised before DAs were installed, and host 3 compromised during the experiment.

Results showed that the first compromised host was identified 120 seconds after the attack began. Subsequent compromised hosts and masters were reported, with false positives reduced by maintaining a whitelist of known good servers.

**Active Discovery:**
We set up ten client computers running Windows XP. Host 0 was initially compromised and detected, followed by the installation of DAs. Hosts 1, 2, and 3 were also compromised but without DAs. The experiment started, and within minutes, all compromised hosts were detected. No false positives were found in active discovery mode. The detection rate increased linearly over time, taking approximately half a minute to detect all compromised hosts in our experimental network.

### Related Work
We review existing work related to worm, malware, botnet, and detection systems. Many real-world worms and malware have caused significant damage, such as the Slammer worm and Stuxnet. Detection systems can be host-based or network-based. Host-based schemes focus on software anomaly behavior, while network-based schemes use traffic analysis. Our proposed framework uses distributed network sensors to detect stealthy attacks in enterprise networks, processing and aggregating network traffic and system logs efficiently.

### Final Remarks
In this paper, we propose a distributed network sensor-based intrusion detection framework to detect emerging stealthy attacks in enterprise networks. The framework includes detection agents on hosts and a control center. The agents monitor and process network traffic and suspicious events, generating alerts. The control center collects and aggregates information, detects attack behavior, and traces compromised hosts and attack origins. We implemented a prototypical system and demonstrated its effectiveness through real-world data. Future work will focus on temporal and spatial aggregation techniques to reduce bandwidth usage and enhance the framework with advanced detection and forensics techniques.

### Acknowledgment
This research was sponsored by the ARL (Army Research Laboratory) under grant number W911NF-11-1-0193. The views and conclusions are those of the authors and do not represent the official policies of the Army Research Laboratory or the U.S. Government.

### References
[1] D. S. Alberts and F. P. S. John Garstka, “Network centric warfare,” in CCRP, 2010.
[2] Y. Liu, P. Ning, and M. Reiter, “False data injection attacks against state estimation in electric power grids,” in Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS), 2009.
[3] W. Yu, N. Zhang, X. Fu, and W. Zhao, “Self-disciplinary worms and countermeasures: Modeling and analysis,” IEEE Transactions on Parallel and Distributed Systems (TPDS), vol. 21, no. 10, 2010.
[4] F. Giroire, J. Chandrashekar, N. Taft, E. M. Schooler, and D. Papagiannaki, “Exploiting temporal persistence to detect covert botnet channels,” in Proceeding of RAID, 2009.
[5] J. Z. Kolter and M. A. Maloof, “Learning to detect malicious executables in the wild,” in Proceedings of the 10th ACM International Conference on Knowledge Discovery and Data Mining (SIGKDD), Seattle, WA, August 2004.
[6] J. G. e. R. Fielding, UC Irvine, “Hypertext transfer protocol – http/1.1,” http://www.ietf.org/rfc/rfc2616.txt, 1999.
[7] D. Moore, V. Paxson, and S. Savage, “Inside the slammer worm,” IEEE Magazine of Security and Privacy, vol. 1, no. 4, pp. 33–39, 2003.
[8] R. McMillan, Was Stuxnet Built to Attack Iran’s Nuclear Program?, http://www.pcworld.com/businesscenter/article/205827/was stuxnet built to attack irans nuclear program.html, 2010.
[9] Binary Text Scan.
[10] X. F. Wang, Z. Li, J. Xu, M. Reiter, C. Kil, and J. Choi, “Packet vaccine: Black-box exploit detection and signature generation,” in Proceedings of the 13th ACM Conference on Computer and Communication Security (CCS), Alexandria, VA, October/November 2006.
[11] P. M. Comparetti, G. Salvaneschi, C. Kolbitsch, E. Kirda, and S. Z. Christopher Kruegel (University of California, Santa Barbara), “Identifying dormant functionality in malware programs,” in Proceedings of the 2010 IEEE Symposium on Security and Privacy (S&P), Oakland, CA, May 2010.
[12] G. Jacob, R. Hund, T. Holz, and C. Kruegel, “Jackstraws: Picking command and control connections from bot traffic,” in Proceedings of the 13th USENIX Security Symposium (SECURITY), San Francisco, August 2011.
[13] W. T. Strayer, D. Lapsley, R. Walsh, and C. Livadas, “Botnet detection: Countering the largest security threat,” in Book Chapter - Botnet Detection Based on Network Behavior, 2008.
[14] D. Ramsbrock, X. Wang, and X. Jiang, “A first step towards live botmaster traceback,” pp. 59–77, 2008. [Online]. Available: http://dx.doi.org/10.1007/978-3-540-87403-4 4
[15] A. Lakhina, M. Crovella, and C. Diot, “Mining anomalies using traffic feature distribution,” in Proceedings of ACM SIGCOMM, Philadelphia, PA, August 2005.
[16] R. Perdisci, O. Kolesnikov, P. Fogla, M. Sharif, and W. Lee, “Polymorphic blending attacks,” in Proceedings of the 15-th USENIX Security Symposium (SECURITY), Vancouver, B.C., August 2006.