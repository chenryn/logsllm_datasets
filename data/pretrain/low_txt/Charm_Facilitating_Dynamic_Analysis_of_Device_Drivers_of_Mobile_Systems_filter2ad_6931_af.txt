### 8. Limitations and Future Work

#### DMA Support
As mentioned in §4.1, Charm currently does not support Direct Memory Access (DMA). To address this, we plan to integrate a Distributed Shared Memory (DSM) implementation into our prototype. This integration will ensure that memory pages accessed through DMA remain coherent. However, for performance optimization, we may need to insert explicit update operations in the driver and in the mobile system’s kernel stub to notify the DSM system of the completion of DMA.

#### Closed Source (Binary) Drivers
Charm does not currently support closed-source (binary) device drivers. Our future plans include extending support for these drivers by using ARM virtual machines instead of the x86 virtual machines used in this paper. We will either run the ARM virtual machine on an ARM workstation or on an x86 server with an ARM-to-x86 interpreter. To make this feasible, we will need to improve the performance of the interpreter to overcome the limitations discussed in §3.2.

#### Automatic Device Driver Porting
Our evaluations in §6.1 demonstrated that porting a new driver to Charm requires significant time and engineering effort. To streamline this process, we plan to develop a framework for automatic porting of device drivers to Charm. With this framework, security analysts will only need to provide the driver's source code and a list of resident modules. The framework will automatically implement the required Remote Procedure Calls (RPCs) and port the driver to Charm.

### 9. Conclusions

We introduced Charm, a system solution that enables the execution of mobile device drivers within a virtual machine running on a workstation. Charm facilitates the application of various existing dynamic analysis techniques, such as interactive debugging, record-and-replay, and enhanced fuzzing, to these device drivers. Our extensive evaluation showed that Charm can support a variety of device drivers and mobile systems (e.g., 4 drivers from 3 different smartphones in our prototype), achieves reasonable performance, and is effective in enabling security analysts to find, study, and analyze driver vulnerabilities, and even build exploits.

### Acknowledgments

This work was supported by NSF Awards #1617481 and #1617573. We are grateful to the paper shepherd, Adwait Nadkarni, and the reviewers for their insightful comments.

### References

[1] ANDROID FRAGMENTATION VISUALIZED (AUGUST 2015). https://opensignal.com/legacy-assets/pdf/reports/2015_08_fragmentation_report.pdf.
[2] Android Security Bulletins. https://source.android.com/security/bulletin/.
[3] Anubis: Analyzing Unknown Binaries. http://anubis.iseclab.org/.
[4] Code coverage tool for compiled programs (KCOV). https://github.com/SimonKagstrom/kcov.
[5] Exploiting the Linux kernel via packet sockets. https://googleprojectzero.blogspot.com/2017/05/exploiting-linux-kernel-via-packet.html.
[6] Google Issue Tracker: Issues. https://developers.google.com/issue-tracker/concepts/issues.
[7] Google Syzkaller: An unsupervised, coverage-guided Linux system call fuzzer. https://opensource.google.com/projects/syzkaller.
[8] Instructions for using Syzkaller to fuzz an Android device. https://github.com/google/syzkaller/blob/master/docs/linux/setup_linux-host_android-device_arm64-kernel.md.
[9] The Kernel Address Sanitizer (KASAN). https://github.com/google/kasan/wiki.
[10] The Kernel Memory Sanitizer (KMSAN). https://github.com/google/kmsan/blob/master/README.md.
[11] The Kernel Thread Sanitizer (KTSAN). https://github.com/google/ktsan/wiki.
[12] The Kernel Undefined Behavior Sanitizer (KUBSAN). https://www.kernel.org/doc/html/v4.11/dev-tools/ubsan.html.
[13] USB Gadget API for Linux. https://www.kernel.org/doc/html/v4.13/driver-api/usb/gadget.html, 2004.
[14] Access UART ports of Xperia devices. https://developer.sony.com/develop/open-devices/guides/access-uart-ports, 2013.
[15] Building a Nexus 4 UART Debug Cable. https://www.optiv.com/blog/building-a-nexus-4-uart-debug-cable, 2013.
[16] Building a Pixel kernel with KASAN+KCOV. https://source.android.com/devices/tech/debug/kasan-kcov, 2017.
[17] Peach Fuzzer for Driver Fuzzing Whitepaper. https://www.peach.tech/datasheets/driver-fuzzing/peach-fuzzer-driver-fuzzing-whitepaper/, 2017.
[18] Devices supported by LineageOS. https://wiki.lineageos.org/devices/, 2018.
[19] Samsung publishes kernel source code for Galaxy S9/S9+ Snapdragon and Exynos models. https://www.androidpolice.com/2018/03/14/samsung-publishes-kernel-source-code-galaxy-s9-s9-snapdragon-exynos-models/, 2018.
[20] Serial debugging. https://wiki.postmarketos.org/wiki/Serial_debugging, 2018.
[21] ABRAMSON, D., JACKSON, J., MUTHRASANALLUR, S., NEIGER, G., REGNIER, G., SANKARAN, R., SCHOINAS, I., UHLIG, R., VEMBU, B., AND WIEGERT, J. Intel Virtualization Technology for Directed I/O. Intel Technology Journal (2006).
[22] AMIRI SANI, A., BOOS, K., YUN, M., AND ZHONG, L. Rio: A System Solution for Sharing I/O between Mobile Systems. In Proc. ACM MobiSys (2014).
[23] BALL, T., BOUNIMOVA, E., COOK, B., LEVIN, V., LICHTENBERG, J., MCGARVEY, C., ONDRUSEK, B., RAJAMANI, S. K., AND USTUNER, A. Thorough Static Analysis of Device Drivers. In Proc. ACM EuroSys (2006).
[24] BEN-YEHUDA, M., DAY, M. D., DUBITZKY, Z., FACTOR, M., HAR’EL, N., GORDON, A., LIGUORI, A., WASSERMAN, O., AND YASSOUR, B. A. The Turtles Project: Design and Implementation of Nested Virtualization. In Proc. USENIX OSDI (2010).
[25] BLASING, T., BATYUK, L., SCHMIDT, A.-D., CAMTEPE, S., AND ALBAYRAK, S. An Android Application Sandbox System for Suspicious Software Detection. In Proc. IEEE International Conference on Malicious and Unwanted Software (Malware) (2010).
[26] BÖHME, M., PHAM, V.-T., NGUYEN, M.-D., AND ROY-CHOUDHURY, A. Directed Greybox Fuzzing. In Proc. ACM CCS (2017).
[27] CADAR, C., DUNBAR, D., AND ENGLER, D. KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs. In Proc. USENIX OSDI (2008).
[28] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY, D. Unleashing Mayhem on Binary Code. In Proc. IEEE Symposium on Security and Privacy (S&P) (2012).
[29] CHA, S. K., WOO, M., AND BRUMLEY, D. Program-Adaptive Mutational Fuzzing. In Proc. IEEE Symposium on Security and Privacy (S&P) (2015).
[30] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems. In Proc. ACM ASPLOS (2011).
[31] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. The S2E Platform: Design, Implementation, and Applications. ACM Transactions on Computer Systems (TOCS) (2012).
[32] CHOU, A., YANG, J., CHELF, B., HALLEM, S., AND ENGLER, D. An Empirical Study of Operating Systems Errors. In Proc. ACM SOSP (2001).
[33] CHOW, J., GARFINKEL, T., AND CHEN, P. M. Decoupling Dynamic Program Analysis from Execution in Virtual Environments. In USENIX Annual Technical Conference (2008).
[34] CHOW, J., PFAFF, B., GARFINKEL, T., CHRISTOPHER, K., AND ROSENBLUM, M. Understanding Data Lifetime via Whole System Simulation. In USENIX Security (2004).
[35] CHUN, B.-G., IHM, S., MANIATIS, P., NAIK, M., AND PATTI, A. CloneCloud: Elastic Execution Between Mobile Device and Cloud. In Proc. ACM EuroSys (2011).
[36] CORINA, J., MACHIRY, A., SALLS, C., SHOSHITAISHVILI, Y., HAO, S., KRUEGEL, C., AND VIGNA, G. DIFUZE: Interface Aware Fuzzing for Kernel Drivers. In Proc. ACM CCS (2017).
[37] COSTIN, A., ZADDACH, J., FRANCILLON, A., BALZAROTTI, D., AND ANTIPOLIS, S. A Large-Scale Analysis of the Security of Embedded Firmwares. In Proc. USENIX Security Symposium (2014).
[38] CUERVO, E., BALASUBRAMANIAN, A., CHO, D.-K., WOLMAN, A., SAROIU, S., CHANDRA, R., AND BAHL, P. MAUI: Making Smartphones Last Longer with Code Offload. In Proc. ACM MobiSys (2010).
[39] DAVIDSON, D., MOENCH, B., JHA, S., AND RISTENPART, T. FIE on Firmware: Finding Vulnerabilities in Embedded Systems Using Symbolic Execution. In Proc. USENIX Security (2013).
[40] DRAKE, J. J. Stagefright: An android exploitation case study. In Proc. USENIX Workshop on Offensive Technologies (WOOT) (2016).
[41] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. N. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proc. USENIX OSDI (2010).
[42] GODEFROID, P., LEVIN, M. Y., AND MOLNAR, D. Automated Whitebox Fuzz Testing. In Proc. Internet Society NDSS (2008).
[43] GORDON, A., AMIT, N., HAR’EL, N., BEN-YEHUDA, M., LANDAU, A., TSAFRIR, D., AND SCHUSTER, A. ELI: Bare-Metal Performance for I/O Virtualization. In Proc. ACM ASPLOS (2012).
[44] GORDON, M. S., HONG, D. K., CHEN, P. M., FLINN, J., MAHLKE, S., AND MAO, Z. M. Accelerating Mobile Applications Through Flip-Flop Replication. In Proc. ACM MobiSys (2015).
[45] GORDON, M. S., JAMSHIDI, D. A., MAHLKE, S., MAO, Z. M., AND CHEN, X. COMET: Code Offload by Migrating Execution Transparently. In Proc. USENIX OSDI (2012).
[46] HAN, H., AND CHA, S. K. IMF: Inferred Model-based Fuzzer. In Proc. ACM CCS (2017).
[47] KANG, M. G., POOSANKAM, P., AND YIN, H. Renovo: A Hidden Code Extractor for Packed Executables. In Proc. ACM Workshop on Recurring Malcode (WORM) (2007).
[48] KEIL, S., AND KOLBITSCH, C. Stateful Fuzzing of Wireless Device Drivers in an Emulated Environment. Black Hat Japan (2007).
[49] KIRAT, D., AND VIGNA, G. MalGene: Automatic Extraction of Malware Analysis Evasion Signature. In Proc. ACM CCS (2015).
[50] KOSCHER, K., KOHNO, T., AND MOLNAR, D. SURROGATES: Enabling Near-Real-Time Dynamic Analyses of Embedded Systems. In Proc. USENIX Workshop on Offensive Technologies (WOOT) (2015).
[51] KUZNETSOV, V., CHIPOUNOV, V., AND CANDEA, G. Testing Closed-Source Binary Device Drivers with DDT. In Proc. USENIX ATC (2010).
[52] LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER, T., HAAS, W., MANGARD, S., KOCHER, P., GENKIN, D., YAROM, Y., AND HAMBURG, M. Meltdown. ArXiv e-prints (Jan. 2018).
[53] LIU, J., HUANG, W., ABALI, B., AND PANDA, D. K. High Performance VMM-Bypass I/O in Virtual Machines. In Proc. USENIX ATC (2006).
[54] LIU, M., LI, T., JIA, N., CURRID, A., AND TROY, V. Understanding the Virtualization “Tax” of Scale-out Pass-Through GPUs in GaaS Clouds: An Empirical Study. In Proc. IEEE High Performance Computer Architecture (HPCA) (2015).
[55] LIU, Z. E. Advanced Heap Manipulation in Windows 8. In Black Hat Europe (2013).
[56] MACHIRY, A., SPENSKY, C., CORINA, J., STEPHENS, N., KRUEGEL, C., AND VIGNA, G. DR. CHECKER: A Soundy Analysis for Linux Kernel Drivers. In Proc. USENIX Security Symposium (2017).
[57] MENDONÇA, M., AND NEVES, N. Fuzzing Wi-Fi Drivers to Locate Security Vulnerabilities. In Proc. IEEE European Dependable Computing Conference (EDCC) (2008).
[58] MUTTI, S., FRATANTONIO, Y., BIANCHI, A., INVERNIZZI, L., CORBETTA, J., KIRAT, D., KRUEGEL, C., AND VIGNA, G. BareDroid: Large-Scale Analysis of Android Apps on Real Devices. In Proc. Annual Computer Security Applications Conference (ACSAC) (2015).
[59] NEWSOME, J. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. In Proc. Internet Society NDSS (2005).
[60] OH, S., YOO, H., JEONG, D. R., BUI, D. H., AND SHIN, I. Mobile Plus: Multi-device Mobile Platform for Cross-device Functionality Sharing. In Proc. ACM MobiSys (2017).
[61] PALIX, N., THOMAS, G., SAHA, S., CALVÈS, C., LAWALL, J., AND MULLER, G. Faults in Linux: Ten Years Later. In Proc. ACM ASPLOS (2011).
[62] PETSIOS, T., ZHAO, J., KEROMYTIS, A. D., AND JANA, S. SlowFuzz: Automated Domain-Independent Detection of Algorithmic Complexity Vulnerabilities. In Proc. ACM CCS (2017).
[63] RAWAT, S., JAIN, V., KUMAR, A., AN CRISTIANO GIUFFRIDA, L. C., AND BOS, H. VUzzer: Application-aware Evolutionary Fuzzing. In Proc. Internet Society NDSS (2017).
[64] RENZELMANN, M. J., KADAV, A., AND SWIFT, M. M. SymDrive: Testing Drivers without Devices. In Proc. USENIX OSDI (2012).
[65] SCHUMILO, S., ASCHERMANN, C., GAWLIK, R., SCHINZEL, S., AND HOLZ, T. kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels. In Proc. USENIX Security Symposium (2017).
[66] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL, C., AND VIGNA, G. Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proc. Internet Society NDSS (2015).
[67] WANG, J., CHEN, B., WEI, L., AND LIU, Y. Skyfire: Data-Driven Seed Generation for Fuzzing. In Proc. IEEE Security and Privacy (S&P) (2017).
[68] WANG, R., AZAB, A. M., ENCK, W., LI, N., NING, P., CHEN, X., SHEN, W., AND CHENG, Y. SPOKE: Scalable Knowledge Collection and Attack Surface Analysis of Access Control Policy for Security Enhanced Android. In Proc. ACM ASIA CCS (2017).
[69] WANG, T., WEI, T., GU, G., AND ZOU, W. TaintScope: A Checksum-Aware Directed Fuzzing Tool for Automatic Software Vulnerability Detection. In Proc. IEEE Symposium on Security and Privacy (S&P) (2010).
[70] WANG, X., ZELDOVICH, N., KAASHOEK, M. F., AND SOLAR-LEZAMA, A. Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior. In Proc. ACM SOSP (2013).
[71] WILLEMS, C., HOLZ, T., AND FREILING, F. Toward Automated Dynamic Malware Analysis Using CWSandbox. IEEE Security & Privacy (2007).
[72] WOO, M., CHA, S. K., GOTTLIEB, S., AND BRUMLEY, D. Scheduling Black-box Mutational Fuzzing. In Proc. ACM CCS (2013).
[73] YADEGARI, B., AND DEBRAY, S. Symbolic Execution of Obfuscated Code. In Proc. ACM CCS (2015).
[74] YADEGARI, B., JOHANNESMEYER, B., WHITELY, B., AND DEBRAY, S. A Generic Approach to Automatic Deobfuscation of Executable Code. In Proc. IEEE Symposium on Security and Privacy (S&P) (2015).
[75] YAN, L. K., AND YIN, H. DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In Proc. USENIX Security (2012).
[76] YIN, H., SONG, D., EGELE, M., KRUEGEL, C., AND KIRDA, E. Panorama: Capturing System-wide Information Flow for Malware Detection and Analysis. In Proc. ACM CCS (2007).
[77] ZADDACH, J., BRUNO, L., FRANCILLON, A., AND BALZAROTTI, D. Avatar: A Framework to Support Dynamic Security Analysis of Embedded Systems Firmware. In Proc. Internet Society NDSS (2014).
[78] ZHANG, H., SHE, D., AND QIAN, Z. Android Root and its Providers: A Double-Edged Sword. In Proc. ACM CCS (2015).
[79] ZHANG, Y., LUO, X., AND YIN, H. DexHunter: Toward Extracting Hidden Code from Packed Android Applications. In Proc. European Symposium on Research in Computer Security (ESORICS) (2015).

---

This version of the text is more structured, clear, and professional. It also ensures that all references are correctly formatted and easy to follow.