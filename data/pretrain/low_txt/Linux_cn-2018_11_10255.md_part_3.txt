1985年，两位来自麻省理工学院（MIT）的教授——哈尔·阿伯尔森（Harold "Hal" Abelson）和杰拉尔德·瑟斯曼（Gerald Sussman），以及瑟斯曼的妻子朱莉·瑟斯曼（Julie Sussman）共同出版了一本名为《计算机程序的构造和解释》（*Structure and Interpretation of Computer Programs*，简称SICP）的教科书。该书采用Scheme语言（一种Lisp方言）来讲解编程技巧，并在接下来的二十年间被用作MIT入门编程课程的教材。

我认为，《计算机程序的构造和解释》一书极大地增加了Lisp语言的神秘感。它通过Lisp传达了深刻的、几乎可称为哲学层面的编程思想。尽管这些思想具有普遍性，可以用任何一种编程语言表达，但作者们选择了Lisp。结果，这本书以其独特而卓越的内容吸引了几代程序员的关注，并因此间接提升了Lisp的地位。从此，Lisp不再仅仅是“麦卡锡优雅表达方式”的代名词；它成为了传授编程精髓的语言。

关于SICP的独特之处值得进一步探讨，因为在我看来，直到今天，这本书与Lisp之间的关联仍然十分紧密。书的封面就充满了象征意义：一位巫师或炼金术士正走向一张桌子准备施展魔法。他一手握着测径仪或圆规，另一手拿着一个球体，上面刻有“eval”和“apply”。对面的女人指向桌子；背景中漂浮着希腊字母λ（lambda），散发着光芒。
![SICP 封面插图](/data/attachment/album/201811/20/171512jueceanmca9whatm.jpg)
*SICP 封面插图*

这幅画究竟想表达什么？为什么桌子会有动物腿？女人为何指着桌子？墨水瓶有何作用？是否可以认为这位巫师已经揭示了宇宙的秘密，而这些秘密隐藏在eval/apply循环和Lambda演算之中？显然如此。这张图片无疑对当今人们谈论Lisp的方式产生了深远影响。

然而，这本书的内容并不比其封面更寻常。SICP不同于其他任何一本计算机科学教科书。在引言中，作者们表示，这本书不仅教授如何使用Lisp编程，还探讨了“心智、复数计算机程序及计算机本身”这三个现象的核心    19 。随后他们详细阐述了自己对于编程不应仅被视为计算机科学训练的观点，而是应当作为一种“程序性认识论”（procedural epistemology）的新形式存在    20 。程序是一种组织人类思想的新方法。第一章简要介绍了Lisp，但之后大部分章节则专注于更为抽象的概念，包括不同编程范式的讨论、面向对象系统中“时间”和“一致性”的探讨，甚至还有通信基本限制如何导致同步问题的研究——这些限制类似于相对论中的光速不变原理    21 。所有这些都是相当深奥的主题。

但这并不意味这本书质量不佳；实际上，它非常出色。在我所读过的所有书籍中，这本书对重要编程理念的论述最为深刻。书中迅速地从面向对象编程的基本缺陷过渡到函数式语言“最小化可变状态”的优点，令人印象深刻。紧接着，它又提出了一种可能类似现今RxJS流范式的概念，展示了如何结合两者的优点。SICP以类似于麦卡锡最初的Lisp论文的方式提炼出了高级编程的本质。阅读完此书后，你会迫不及待地想要推荐给你的程序员朋友们。如果他们在看到封面后没有继续深入阅读，那么他们只会记住那张长着动物腿的桌子上方写着eval/apply的神秘物品。顺便说一句，封面上人物穿的鞋子也给我留下了深刻印象。

然而，SICP最重要的贡献可能是将Lisp提升为一种必不可少的教学工具。在这本书问世之前，人们相互推荐学习Lisp以提高编程技能。1979年的Byte杂志Lisp特刊证实了这一点。正如之前提到的那位编辑所说，Lisp值得一学，因为它“提供了另一种分析问题的方法”    22 。但SICP并未仅仅把Lisp作为辅助语言；而是将其定位为*入门*语言。这就隐含了一个观点：Lisp是最能把握计算机编程基础的语言。可以说，当今天的程序员鼓励彼此“至少在去世前尝试一下Lisp”时，很大程度上是因为SICP的影响。毕竟，像Brainfuck这样的编程语言或许也能提供“另一种分析问题的方法”，但人们选择学习Lisp而非Brainfuck，是因为他们知道，在长达二十年的时间里，Lisp一直被认为极其有用，以至于MIT在向本科生介绍其他语言之前，都会先教授Lisp。

### Lisp 的复兴

就在SICP出版同年，本贾尼·斯特劳斯特卢普（Bjarne Stroustrup）发布了C++的第一个版本，将面向对象编程推向大众视野。几年后，随着Lisp计算机市场的崩溃以及人工智能寒冬的到来，在接下来的十年里，C++及其后来者Java成为前景光明的语言，而Lisp逐渐被遗忘。

确定人们对Lisp重新产生兴趣的具体时间是不可能的，但这一趋势很可能始于保罗·格雷厄姆发表了一系列声称Lisp是最佳入门语言的文章之后。作为Y-Combinator联合创始人兼Hacker News创办人，保罗·格雷厄姆的文章具有广泛影响力。例如，在他的文章《胜于平庸》中，他声称Lisp宏使Lisp优于其他语言。由于他在自己创立的公司Viaweb中使用了Lisp，使得他能够比竞争对手更快地推出新功能。至少有一部分程序员被说服了。然而，大多数主流程序员并没有转向Lisp。

实际情况是，虽然Lisp没有变得流行起来，但它越来越多地启发了其他广受欢迎的语言的发展。Python引入了列表推导式，C#加入了LINQ，Ruby……嗯，[Ruby 被视为一种 Lisp](http://www.randomhacks.net/2005/12/03/why-ruby-is-an-acceptable-lisp/)。正如格雷厄姆在2001年所指出的，“常用语言中体现出来的‘默认语言’正在越来越接近Lisp”    23 。尽管其他语言变得越来越像Lisp，但Lisp本身依然保持着作为“很少有人了解但却应该学习的神秘语言”的特殊地位。在1980年庆祝Lisp诞生二十周年之际，麦卡锡写道，Lisp之所以能够长期生存下来，是因为它达到了“编程语言领域中某种近似局部最优的状态”    24 。这句话未能充分说明Lisp的真实影响力。Lisp之所以能存活超过半个世纪，并非因为程序员每年勉强承认它是最好的编程工具；事实上，即使绝大多数程序员从未使用过它，它还是存活了下来。得益于它的起源及其在人工智能研究中的应用，也许还得益于SICP的遗产，Lisp始终保持着迷人的魅力。在我们能够想象上帝用其他新的编程语言创造世界之前，Lisp永远不会失去其崇高的地位。