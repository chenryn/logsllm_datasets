# SMART: Secure and Minimal Architecture for Establishing a Dynamic Root of Trust

**Authors:**
- Karim El Defrawy, UCI
- Aur√©lien Francillon, ETH
- Daniele Perito, INRIA
- Gene Tsudik, UCI

**Date: February 8, 2012**

## Low-end Embedded Devices

- **Characteristics:**
  - **Cost and Power:** These devices are low-cost and low-power.
  - **Architecture:** They are built around a Microcontroller Unit (MCU).
  - **Resource Constraints:**
    - **Memory:**
      - 4 KB Data Memory (SRAM)
      - 128 KB Program Memory (Flash)
    - **Power and Computation Capabilities:** Limited.
  - **Examples:**
    - MSP430
    - AVR

## Critical Cyber-Physical Systems

- **Definition:** A cyber-physical system (CPS) is a system where there is tight coordination between the computational and physical elements, often through sensors and actuators.

## Why Security Now?

- **Historical Context:**
  - CPSs were designed with reliability in mind.
  - Security was often an afterthought, acceptable when connectivity was limited.
- **Current Trends:**
  - The push for wireless connectivity for ease of management.
  - Examples:
    - Implantable medical devices accessible via home readers through RF channels.
    - In-car systems connected via wireless.
  - Indirect connections to the Internet increase the attack surface.

## Recent Attacks

- **Stuxnet [1]:**
  - Infected controlling Windows machines.
  - Altered parameters of the PLCs in Iranian nuclear reactors.
- **Automotive Controllers [2]:**
  - Exploited the internal controller-area network (CAN).
  - Access to one subsystem (e.g., Bluetooth) allowed access to critical subsystems (e.g., braking).
- **Medical Devices:**
  - Insulin pumps hack [3].
  - Implantable cardioverter defibrillator [4].

**References:**
- [1] W32.Stuxnet Dossier. Nicolas Falliere, Liam O Murchu, and Eric Chien. Symantec 2011.
- [2] Comprehensive Experimental Analyses of Automotive Attack Surfaces. S. Checkoway et al. USENIX 2011.
- [3] Hacking Medical Devices for Fun and Insulin: Breaking the Human SCADA System. Jerome Radcliffe. Blackhat 2011.
- [4] Pacemakers and Implantable Cardiac Defibrillators: Software Radio Attacks and Zero-Power Defenses. S&P 2008.

## Remote Attestation

- **Definitions:**
  - A two-party protocol between a trusted verifier and an untrusted prover.
  - Remotely verifies the internal state of the prover.
- **Components:**
  - **Prover:** The untrusted embedded device.
  - **Verifier:** The trusted reader/controller/base station.
  - **Internal State:** Composed of code, registers, data memory, and I/O.
- **Types:**
  - **Secure Hardware Supported (e.g., TPM):** Provides robust security but can be expensive.
  - **Software Attestation:** Does not support multi-hop communication.

- **Challenges:**
  - Malicious software may lie about the prover's state.
  - Need guarantees that the device is not lying.

## SMART: Secure and Minimal Architecture for a Root of Trust

- **Motivation:**
  - Existing solutions like TPMs are too expensive for embedded devices.
  - Aim to identify the minimal set of architectural features required for remote attestation.
- **Desirable Features:**
  - Minimal modifications to existing platforms.
  - Security under a strong attacker model.
  - Portability across multiple platforms (implemented on AVR and MSP430).

## Security Goals

- **Establish a dynamic root of trust on the prover:**
  - Ensure untampered execution of a target piece of code, even on a corrupted platform.
- **Specific Goals:**
  - **Prover Authentication:** Verify the identity of the prover.
  - **External Verification:** Determine the internal state of the prover.
  - **Guaranteed Execution:** Confirm the execution state.
  - No tamper resistance or hardware attacks.

## Building Blocks

- **Secure Key Storage:**
  - Required for multi-hop authentication.
  - Provides prover authentication.
- **Trusted ROM Code Memory Region:**
  - Read-only ensures integrity.
  - Accesses and operates on the key.
- **MCU Access Controls:**
  - Grants key access to the Trusted ROM.

### Key Storage

- **Requirements:**
  - The key cannot be stored in normal memory due to the risk of malware stealing it.
  - Only a trusted code region should be able to access the key.

### Trusted Code Region

- **Challenges:**
  - Low-end embedded devices lack support for rings to restrict memory access.
  - Adding such support would introduce significant complexity.
- **Solution:**
  - Restrict access to a read-only trusted code region.
  - Implement access control easily.

### Memory Access Control

- **Requirement:**
  - Only ROM code should be able to access the key.
  - Control the program counter value to enforce this.

## The Complete Protocol

- **Steps:**
  - Verifier sends a nonce and target code to the prover.
  - Prover responds with the HMAC result.

## Problems to Solve

- **Shared Resources:**
  - Malware can set up the environment to compromise trusted code and extract the key.
  - Interrupts can execute asynchronously while the key is in main memory.
  - Malware can use code gadgets in ROM to access the key (e.g., return-oriented programming).
  - ROM code might leave traces of the key in memory after execution.

## Counter Measures

- **Atomic ROM Code Execution:**
  - Enforced in hardware.
  - Enter at the first instruction and exit at the last.
- **Memory Safety:**
  - Instrument ROM code to check for errors.
  - Reboot and clean memory upon detection.
- **Interrupt Handling:**
  - Disable interrupts before key usage.
- **Key Erasure:**
  - Erase key material before the end of execution.

## Schematics

- **Implementation:**
  - Implemented on two common MCU platforms: AVR and MSP430.

## Cost of Adding ROM and Access Control

- **Efficiency:**
  - SMART provides an efficient hardware attestation solution for embedded devices.
  - Requires few additional gates.
  - No runtime cost.

## Considerations on SMART

- **Benefits:**
  - Efficient hardware attestation for embedded devices.
  - Low additional gate count.
  - No runtime overhead.

## Conclusion

- **Summary:**
  - SMART offers a secure and minimal architecture for establishing a dynamic root of trust in embedded devices.
  - It addresses the challenges of resource constraints and security in a cost-effective manner.

**Questions?**