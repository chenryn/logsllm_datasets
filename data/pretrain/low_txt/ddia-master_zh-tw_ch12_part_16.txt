### 信息时代的决定性特征

在信息时代，互联网、数据存储、处理以及软件驱动的自动化正在对全球经济和人类社会产生深远影响。过去十年中，我们的日常生活和社会组织已经发生了显著变化，并且在未来十年中可能还会经历根本性的变革。这种转变可以与工业革命相提并论。

### 工业革命的影响

工业革命通过重大的技术与农业进步实现了持续的经济增长和生活水平的显著提高。然而，它也带来了一些严重的问题：空气污染（由于烟雾和化学过程）和水污染（来自工业废物和生活垃圾）是其显著后果之一。工厂主享受着奢侈的生活，而城市工人却经常生活在恶劣的住房条件下，长时间在艰苦的工作环境中劳动。童工现象普遍存在，甚至包括危险且低薪的矿井工作。

保护措施的制定经历了很长时间，例如环境保护条例、工作场所安全条例、禁止使用童工以及食品卫生检查。这些措施无疑增加了生产成本，因为工厂不能再随意排放废物、销售受污染的食物或剥削工人。但整个社会都从中受益良多，很少有人愿意回到这些法规实施之前的时代。

### 信息时代的挑战

正如工业革命有其黑暗面需要应对一样，我们在转向信息时代的过程中也需要解决一些重大问题。我认为数据的收集和使用就是其中之一。用 Bruce Schneier 的话来说：

> 数据是信息时代的污染问题，保护隐私是环境挑战。几乎所有的计算机都能生成信息。它堆积在周围，开始腐烂。我们如何处理它——我们如何控制它，以及如何摆脱它——是信息经济健康发展的核心议题。正如我们今天回顾工业时代的早期年代，并想知道我们的祖先在忙于建设工业世界的过程时怎么能忽略污染问题；我们的孙辈在回望信息时代的早期年代时，将会就我们如何应对数据收集和滥用的挑战来评断我们。
>
> 我们应该设法让他们感到骄傲。

### 立法与自律

数据保护法可能有助于维护个人的权利。例如，1995 年的“欧洲数据保护指令”规定，个人数据必须“为特定的、明确的和合法的目的收集，而不是以与这些目的不相符的方式进一步处理”，并且数据必须“就收集的目的而言适当、相关、不过分。”

然而，在当今的互联网环境下，这些立法的有效性仍有待商榷。这些规则直接否定了大数据的理念，即最大限度地收集数据，将其与其他数据集结合起来进行试验和探索，以便产生新的洞察。探索意味着将数据用于未曾预期的目的，这与用户同意的“特定和明确”目的相反（如果我们可以有意义地表示同意的话）。更新的规章正在制定中。

那些收集了大量个人信息的公司反对监管，认为这是创新的负担与阻碍。在某种程度上，这种反对是有道理的。例如，分享医疗数据时，存在明显的隐私风险，但也存在潜在的机会：如果数据分析能够帮助我们实现更好的诊断或找到更好的治疗方法，能够挽救多少人的生命？过度监管可能会阻止这种突破。在这种潜在机会与风险之间找到平衡是非常困难的。

从根本上说，我认为我们需要科技行业在个人数据方面的文化转变。我们应该停止将用户视为待优化的数据指标，并记住他们是值得尊重、有尊严和能动性的人。我们应当在数据收集和实际处理中自我约束，以建立和维持依赖我们软件的人们的信任。我们应当承担教育终端用户的责任，告诉他们我们是如何使用他们的数据的，而不是将他们蒙在鼓里。

我们应该允许每个人保留自己的隐私——即对自己数据的控制权——而不是通过监视来窃取这种控制权。我们控制自己数据的个体权利就像是国家公园的自然环境：如果我们不去明确地保护它、关心它，它就会被破坏。这将是公地的悲剧，我们都会因此而变得更糟。无所不在的监视并非不可避免——我们现在仍然能阻止它。

### 本章小结

在本章中，我们讨论了设计数据系统的新方法，并包含了个人观点和对未来的猜测。我们从这样的观察开始：没有单一工具能够高效服务所有可能的用例，因此应用必须组合使用几种不同的软件才能实现其目标。我们讨论了如何使用批处理和事件流来解决这一**数据整合**问题，使数据变更在不同系统之间流动。

在这种方法中，某些系统被指定为记录系统，而其他数据则通过转换衍生自记录系统。通过这种方式，我们可以维护索引、物化视图、机器学习模型、统计摘要等。通过使这些衍生和转换操作异步且松散耦合，可以防止一个问题区域扩散到系统的不相关部分，从而增加整个系统的稳健性和容错性。

将数据流表示为从一个数据集到另一个数据集的转换也有助于演化应用程序：如果你想更改其中一个处理步骤，例如更改索引或缓存的结构，则可以在整个输入数据集上重新执行新的转换代码，以便重新派生输出。同样，出现问题时，你也可以修复代码并重新处理数据以恢复。

这些过程与数据库内部已经完成的过程非常类似，因此我们将数据流应用的概念重新改写为**拆分**数据库组件，并通过组合这些松散耦合的组件来构建应用程序。

衍生状态可以通过观察底层数据的变更来更新。此外，衍生状态本身可以进一步被下游消费者观察。我们甚至可以将这种数据流一路传送到显示数据的终端用户设备，从而构建可动态更新以反映数据变更，并在离线时继续工作的用户界面。

接下来，我们讨论了如何确保所有这些处理在出现故障时保持正确。我们看到，可扩展的强完整性保证可以通过异步事件处理来实现，通过使用端到端操作标识符使操作幂等，以及通过异步检查约束。客户端可以等到检查通过，或者不等待继续前进，但可能会冒违反约束的风险。这种方法比使用分布式事务的传统方法更具可扩展性和可靠性，并且在实践中适用于许多业务流程。

通过围绕数据流构建应用程序，并非同步检查约束，我们可以避免绝大多数的协调工作，建立保证完整性和性能良好的系统，即使在地理分布和出现故障的情况下也是如此。然后，我们对使用审计来验证数据完整性和损坏检测进行了一些讨论。

最后，我们退后一步，审视了构建数据密集型应用的一些道德问题。我们看到，虽然数据可以用来做好事，但它也可能造成很大伤害：做出严重影响人们生活的决定却难以申诉，导致歧视和剥削、监视常态化、曝光私密信息。我们也冒着数据泄露的风险，并且可能会发现，即使是善意地使用数据也可能会导致意想不到的后果。

由于软件和数据对世界产生了如此巨大的影响，我们工程师们必须牢记，我们有责任为我们想要的那种世界而努力：一个尊重人们，尊重人性的世界。我希望我们能够一起为实现这一目标而努力。

### 参考文献

1. Rachid Belaid: “[Postgres Full-Text Search is Good Enough!](http://rachbelaid.com/postgres-full-text-search-is-good-enough/),” *rachbelaid.com*, July 13, 2015.
2. Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: “[Challenges to Adopting Stronger Consistency at Scale](https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-ajoux.pdf),” at *15th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2015.
3. Pat Helland and Dave Campbell: “[Building on Quicksand](https://database.cs.wisc.edu/cidr/cidr2009/Paper_133.pdf),” at *4th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2009.
4. Jessica Kerr:  “[Provenance and Causality in Distributed Systems](http://blog.jessitron.com/2016/09/provenance-and-causality-in-distributed.html),” *blog.jessitron.com*, September 25, 2016.
5. Kostas Tzoumas: “[Batch Is a Special Case of Streaming](http://data-artisans.com/batch-is-a-special-case-of-streaming/),” *data-artisans.com*, September 15, 2015.
6. Shinji Kim and Robert Blafford: “[Stream Windowing Performance Analysis: Concord and Spark Streaming](http://concord.io/posts/windowing_performance_analysis_w_spark_streaming),” *concord.io*, July 6, 2016.