### Enhanced User Interaction with Nitpicker

Nitpicker can significantly enhance user interaction across different classification levels by integrating them into a single desktop environment. This is achieved through the use of RDP sessions on virtual consoles, where each console provides a full-screen GUI. Nitpicker's ability to tint views of different classification levels with distinct colors and its floating-labels mechanism offer a convenient way to distinguish between different domains.

### Comparison with Multi-Server OSs

Multi-server operating systems like EROS [21] use confinement to decompose OS functionality into small, independently evaluable components. For EROS, there is EWS [22] as the graphical user interface (GUI). Compared to EWS, Nitpicker offers lower complexity and greater flexibility for applications. Compatibility with EWS can be maintained by running EWS as a client of Nitpicker. Different compartments can even use dedicated instances of EWS. However, Nitpicker's key strength—supporting legacy window systems as clients—remains largely underutilized because EROS does not support executing legacy software. Coyotos [2], the successor to EROS, will provide support for legacy software via a Linux emulation layer. When Coyotos supports X11, Nitpicker will be well-suited to integrate X11-based legacy software with EWS windows.

### Implementation

To demonstrate the feasibility of our design, we implemented it on a specific platform, enabling us to observe performance and evaluate the source-code complexity. The platform was based on the L4/Fiasco [18, 19] microkernel, which allows the safe execution of one or multiple L4Linux kernel servers [17] alongside native L4-based applications. All L4 applications, including L4Linux, run in user mode within isolated protection domains. Communication between these domains is facilitated by L4 inter-process communication (IPC).

For handling mouse and keyboard input, we ported the input subsystem from GNU/Linux kernel version 2.6 to L4/Fiasco. Graphical output was managed using the VESA frame buffer, which is supported by most modern graphics cards. Our lightweight software graphics routines include functions for drawing rectangles, blitting pixels, and rendering text using a compiled-in font. The rectangle drawing function is used for painting view borders in X-ray mode, while the blitting function supports solid, dimmed, and masked pixel transfer. The masked mode is used for the mouse cursor, which is implemented as a special view that always remains on top.

To evaluate support for legacy applications, we ported two legacy window systems, DOpE and X11, to Nitpicker (Figure 7). For DOpE, we added 160 lines of support code, replacing DOpE’s screen and input drivers and propagating window placement information to corresponding views. For X11, we implemented screen (400 LOC) and input (250 LOC) drivers as modules for XFree86 [10]. We propagate window events from X11 to Nitpicker using a custom X11 client (200 LOC) that scans all windows and registers itself as an event handler for window events at the root window. No changes to the X server were required. X11 and DOpE client applications can run without modification in this setup. Figure 7 shows Nitpicker in X-ray mode with X11 and DOpE as clients. Note that the translucency effect, implemented by DOpE, does not display X11 windows, as DOpE has no access to X11 session data.

### Evaluation

We aimed for low complexity as a primary design goal. Our implementation of Nitpicker consists of just 1,500 lines of C code (LOC), a fraction of EWS’s size (5,400 LOC) and an order of magnitude smaller than Trusted X (30,000 LOC) and X11 (> 80,000 LOC without drivers). The main reason for this reduced complexity, compared to EWS, is the client-side window handling. This design decision eliminates the need for Nitpicker to implement policies for rearranging windows, simplifying the internal logic and enhancing client flexibility. For example, scrollable menus in WindowMaker and virtual desktops work with X11 on Nitpicker exactly as they do on native X11.

An interesting aspect regarding source-code complexity is the amount of generated code. While the client interface description of Nitpicker is only 50 lines of IDL code, the generated stub code comprises about 1,000 lines of C code. This highlights the critical role of compilers and tools in secure systems.

We evaluated Nitpicker’s performance by comparing the CPU demand of DOpE running as a Nitpicker client against native DOpE. In both scenarios, we stressed DOpE by displaying four 320x240-pixel animations at 25 frames per second while continuously generating artificial redraw requests for another DOpE window. Using an Intel Celeron PC clocked at 900 MHz, we found that Nitpicker does not require additional pixel copying. We expected DOpE on Nitpicker to perform slightly worse due to two additional context switches per redraw operation and the overhead of traversing Nitpicker’s view stack. In X-ray mode, the additional load increased by up to 25 percent, mainly due to the unoptimized dimmed blitting function. In Flat mode, the additional load dropped to less than one percent. This low overhead confirms the feasibility of Nitpicker’s design in terms of output performance.

### Application Scenario

To highlight the benefits of Nitpicker with commodity applications, consider an application scenario involving Mozilla Thunderbird. Mail readers like Thunderbird are popular for their rich features, such as spam filtering and powerful search functions, but this convenience comes at the cost of high complexity and potential security risks. For example, using Thunderbird on GNU/Linux involves millions of lines of code, potentially putting user secrets at risk.

In our scenario, only a small fraction of this code—GNU Privacy Guard (GnuPG) [4]—needs private keys for operation. We ported GnuPG to the L4 platform, creating L4GnuPG, and complemented it with a trusted text viewer. We interfaced L4GnuPG with Thunderbird using a L4Linux proxy process that redirects Thunderbird’s calls to GnuPG to L4GnuPG. L4GnuPG uses DOpE as its widget set, running within an isolated address space. In this setup, L4GnuPG is the only process that can access the user’s confidential signing key. When the user activates the signing function in Thunderbird, the L4Linux proxy process transfers the email to L4GnuPG, which presents the email in a DOpE window. The user can then decide to sign the email or cancel the operation. If signed, L4GnuPG requests a passphrase, signs the email, and transfers the result back to Thunderbird via the L4Linux proxy process.

In this scenario, the confidentiality of the signing key depends on only 105,000 LOC, including L4/Fiasco (15,000 LOC), trusted L4 services (35,000 LOC), and L4GnuPG (55,000 LOC). The isolation of the legacy X11 window system and the GUI of the trusted application depends only on the L4/Fiasco kernel and Nitpicker (1,500 LOC). This setup retains the powerful features and usability of a commodity application while minimizing the trusted computing base (TCB) for security-sensitive functions. This scenario underscores Nitpicker’s strengths: low complexity and support for legacy graphical user interfaces.

### Current Limitations

While Nitpicker has several strengths, it also has some limitations. Currently, Nitpicker attaches exactly one label to each view, which can leave orphaned areas unlabeled on the screen (Figure 9). Although the dimming technique in X-ray mode prevents confusion about the focused view, a shading policy as described in [12] could be deployed to blank out orphaned areas. This will be implemented in a future version.

Additionally, Nitpicker performs graphical output via software graphics routines. Making hardware-accelerated graphics usable by both Nitpicker and untrusted clients is a challenging problem and will be a focus of future work.

### Related Work

This section complements Section 3 with related work that inspired the design of Nitpicker. J. Epstein addressed the problem of expressive and unique labeling of windows for Trusted X11 in [12]. He estimated different labeling techniques for marking classified information and introduced a technique to detect and blank out orphaned window areas. The dimming of non-focused windows was inspired by Apple’s Exposé feature in Mac OS X. J. Shapiro described the dimming of unfocused windows for EWS in [22]. Apple Quartz is an existing implementation of client-side window handling, used to integrate X11 with the Aqua GUI of Mac OS X. The X server provided by Apple enables the use of any legacy window manager (e.g., WindowMaker) for managing X windows. Apple significantly changed the XFree86 source base, rendering each X window into a dedicated pixel buffer. In contrast, we did not change the X server and used only one buffer for all X windows.

### Conclusion

With Nitpicker, we have advanced the discussion of GUI-related security mechanisms in operating systems. By moving non-security-related functionality from the GUI server to the clients, we minimized the complexity of the security-sensitive GUI server to just 1,500 lines of C code. This low complexity is a fraction of existing approaches.

When running on a host OS that provides isolated protection domains, Nitpicker maintains the isolation of its clients to prevent applications from spying on each other by exploiting GUI server functionality. Unlike today’s GUI servers, which expose user input to any application, Nitpicker routes user input to exactly one focused client at a time, protecting the user from spyware. Provided an OS that supports secure booting and client authentication, Nitpicker enables the user to clearly identify each client application via a combination of dimming and labeling techniques, while preserving a high flexibility of client GUIs. This helps users identify and disarm Trojan Horses.

Thanks to its extremely low complexity and resource management, Nitpicker is robust against denial-of-service attacks driven by client applications, ensuring the service of sensitive client applications. Additionally, Nitpicker facilitates the support for existing legacy applications using flexible buffers and views, enabling the continued use of commodity window systems alongside the safe execution of low-complexity, security-sensitive applications.

Our implementation proves the feasibility of the presented design. We frequently use our custom software stack for public talks and lectures. At the time of publishing, the implementation of Nitpicker will be publicly available under the terms of the GNU General Public License.

We thank Jonathan S. Shapiro for his insights on (more or less) covered channels and resource management, and Alexander Warg for valuable discussions during the design of Nitpicker.

### References

[1] Apple Mac OS X website. URL: http://www.apple.com/macosx/.

[2] Coyotos website. URL: http://www.coyotos.org.

[3] Fresco website. URL: http://www.fresco.org.

[4] GNU Privacy Guard website. URL: http://www.gnupg.org.

[5] Intel Vanderpool technology website. URL: http://www.intel.com/technology/computing/vptech/.

[6] Microsoft’s Virtualization Architecture. TWAR05013 at WinHEC 2005.

[7] NGSCB presentation at WinHEC 2004. URL: http://download.microsoft.com/download/1/8/f/18f8cee2-0b64-41f2-893d-a6f2295b40c8/TW04008_WINHEC2004.ppt.

[8] SINAvpn website. URL: http://www.sinavpn.com.

[9] VMware website. URL: http://www.vmware.com.

[10] XFree86 website. URL: http://www.xfree86.org.

[11] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the Art of Virtualization. In Proceedings of the 19th ACM Symposium on Operating System Principles (SOSP), Oct. 2003.

[12] J. Epstein. A prototype for Trusted X labeling policies. In Proceedings of the 6th Annual Computer Security Applications Conference, Dec. 1990.

[13] J. Epstein, J. McHugh, H. Orman, R. Pascale, A. Marmor-Squires, and B. D. et al. A high assurance window system prototype.

[14] N. Feske and H. Härtig. Demonstration of DOpE — a Window Server for Real-Time and Embedded Systems. In 24th IEEE Real-Time Systems Symposium (RTSS), pages 74–77, Cancun, Mexico, Dec. 2003.

[15] N. Feske and C. Helmuth. Overlay window management: User interaction with multiple security domains. Technical Report TUD-FI04-02-März-2004, TU Dresden, 2004.

[16] K. Fraser, S. Hand, I. Pratt, and A. Warfield. Safe Hardware Access with the Xen Virtual Machine Monitor. In Proceedings of the 1st Workshop on Operating System and Architectural Support for the on-demand IT InfraStructure (OASIS 2004), Boston, MA, Oct. 2004.

[17] H. Härtig, M. Hohmuth, and J. Wolter. Taming Linux. In Proceedings of the 5th Annual Australasian Conference on Parallel And Real-Time Systems (PART ’98), Adelaide, Australia, Sept. 1998.

[18] M. Hohmuth. The Fiasco kernel: System architecture. Technical Report TUD-FI02-06-Juli-2002, TU Dresden, 2002.

[19] J. Liedtke. L4 reference manual. Technical report, Sept. 1996. RC 20549, IBM T. J. Watson Research Center.

[20] M. Peinado, P. England, and Y. Chen. An Overview of NGSCB.

[21] J. S. Shapiro. EROS: A Capability System. PhD thesis, University of Pennsylvania, Apr. 1999.

[22] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia. Design of the EROS Trusted Window System. In Proceedings of the 13th USENIX Security Symposium (2004), pages 165–178, 2004.