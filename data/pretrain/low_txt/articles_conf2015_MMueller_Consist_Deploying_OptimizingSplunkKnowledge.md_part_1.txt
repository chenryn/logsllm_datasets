# Copyright © 2015 Splunk Inc.
# Optimizing Splunk
# Knowledge Objects
# Martin Müller
# Professional Services Consultant
# Consist Software Solutions GmbH

## Disclaimer
During the course of this presentation, we may make forward-looking statements regarding future events or the expected performance of the company. We caution you that such statements reflect our current expectations and estimates based on factors currently known to us, and actual events or results could differ materially. For important factors that may cause actual results to differ from those contained in our forward-looking statements, please review our filings with the SEC. The forward-looking statements made in this presentation are being made as of the time and date of its live presentation. If reviewed after its live presentation, this presentation may not contain current or accurate information. We do not assume any obligation to update any forward-looking statements we may make.

Additionally, any information about our roadmap outlines our general product direction and is subject to change at any time without notice. It is for informational purposes only and shall not be incorporated into any contract or other commitment. Splunk undertakes no obligation either to develop the features or functionality described or to include any such feature or functionality in a future release.

## Why Are We Here?
- "Oversized searches are the largest performance problem we face in our environment." - Jacob Wilkins, General Electric
- Observed search runtime progression during development.
- Massive growth in job startup time.
- Knowledge Object optimization reduced overhead by 80%.

## Who Is That Guy?
- Professional Services Consultant, Certified Architect, Splunk-It-All
- Five years at EMEA Splunk Partner
- Heavy Splunker since 2012
- Contact: martin@example.com
- Give karma at Splunk Answers: [Link]
- Hang in #splunk on Efnet: martin_m

## Session Objectives
- Understand how Splunk turns a search into results.
- Learn how to recognize if you have a performance problem (Spoiler Alert: You do!).
- Use this knowledge to your advantage when specifying search-time knowledge.
- Covered knowledge objects:
  - Fields
  - Reverse Lookups
  - Event Types
  - Tags

## Let's Dive In...
- First, let's explore the Job Inspector!
  - `normalizedSearch`: Ultra-verbose stage of search assembly.
  - Performance stats, e.g., time spent assembling the `normalizedSearch`.
  - Links to `search.log` to look for more hidden performance hogs.
  - More at: [Splunk Documentation Link]

## Fields
### Calculated Fields (1)
- **Example**: `TA-splunk, props.conf: [audittrail]`
  - `EVAL-action=case(condN, valN, 1=1, action)`
- **Issue**: Splunk's assumption about looking for indexed tokens doesn't hold.
- **Consequence**: No way to translate the eval expression into tokens.
- **Plain Search**: `index=_audit action=search`
- **Normalized Search**: `index=_audit (action=search OR (sourcetype=audittrail))`
- **Result**: Loads all events for that stanza plus events with the token, filtering later.

### Calculated Fields (2)
- **Scenario**: Searching for a different sourcetype.
  - `index=_internal sourcetype=splunk* action=logout`
  - `index=_internal sourcetype="splunk*" (action=logout OR (sourcetype=audittrail))`
- **Behavior**: Splunk expands each segment of your search on its own.
- **Impact**: For each calculated field, add the stanza to every search for that field.
- **Conclusion**: This is just the beginning of `normalizedSearch` overhead!

### Field Aliases
- **Purpose**: Normalize field names across different sourcetypes.
  - Sourcetype A has field `username`, Sourcetype B has field `uid`, etc.
- **Example**: `sourcetype=A user=martin`
  - Normalized Search: `sourcetype=A ((sourcetype=A AND (username=martin)) OR (sourcetype=B AND (uid=martin)) OR (sourcetype=audittrail AND (uid=martin))) OR (user=martin)`
- **Impact**: All field aliases for all sourcetypes are used in all searches!

### Real-World Example
- **App**: Splunk App for Enterprise Security 3.3.1
- **Field Aliases**: 19 field aliases for `user`
- **Observation**: `normalizedSearch` strings and search startup time grow.
- **Benefit**: Without standardized field names, searching over different sourcetypes would be impossible.
- **Recommendation**: Extract standardized field names directly when building TAs.

### Real-World Example (Cont.)
- **Search**: `user=martin`
- **Normalized Search** (2kB):
  - `((((sourcetype="*") AND (username=martin)) OR (sourcetype=A AND (username=martin)) OR (sourcetype=B AND (uid=martin)) OR ... OR (sourcetype=audittrail AND (uid=martin)))) OR (user=martin)`

## Demo

## Fields Recap
- Each search segment is expanded on its own without context.
- `props.conf` for one sourcetype will radiate into `normalizedSearch` of other sourcetypes when field names match.
- **Avoid**: Calculated fields and field aliases where possible.
  - Extract fields using standardized names in the first place.
  - Some calculated fields can be replaced with lookups.
- **Monitor**: Their effects where unavoidable.
- **Use Case**: Both are fine for fields you only use as output.

## Reverse Lookups
### How Reverse Lookups Work
- **Example**: `props.conf: [splunk_web_access]`
  - `LOOKUP-ul = user_location user OUTPUT location`
- **Reverse Lookup**: Search for `location` rather than `user`.
  - `index=_internal location="Las Vegas"`
  - Normalized Search: `index=_internal (((sourcetype=splunk_web_access) AND ((user=Martin) OR (user=Tom)))) OR (location="Las Vegas"))`

### Actually, I Lied...
- **Actual Normalized Search**:
  - `index=_internal (((sourcetype=splunk_web_access) AND ((((sourcetype=A AND (username=Martin)) OR (sourcetype=B AND (uid=Martin)) OR (sourcetype=audittrail AND (uid=Martin)))) OR (user=Martin)) OR ((((sourcetype=A AND (username=Tom)) OR (sourcetype=B AND (uid=Tom)) OR (sourcetype=audittrail AND (uid=Tom)))) OR (user=Tom)))))) OR (location="Las Vegas")`
- **Impact**: Other sourcetypes' `props.conf` settings radiate into this search.

### Expanding to More Sourcetypes
- **_internal Index**: Seven sourcetypes with a `user` field.
- **Normalized Search** (72kB for 50 users, breaking PowerPoint):
  - `index=_internal (((sourcetype=scheduler) AND ... OR (sourcetype=splunkd_ui_access) AND ...)) OR (location="Las Vegas"))`
- **Behavior**: Above 50 values per lookup, Splunk reverts to "classic" behavior: Load all events, filter later.

## Demo

### Migration Strategies (1)
- **Subsearch Using `inputlookup`**:
  - `index=_internal [inputlookup user_location | search location="Las Vegas" | fields user]`
  - **Benefits**: Removes per-sourcetype duplication, allows choice between reverse lookups and classic behavior.
  - **Drawbacks**: Ignores configured knowledge per sourcetype, more effort to write and maintain searches, not eventtype-compatible, subsearch overhead.

### Migration Strategies (2)
- **Define Per-Sourcetype Automatic Lookup Using Sourcetype-Specific Input Fields**:
  - `LOOKUP-ul = user_location user AS username OUTPUT location`
  - **Benefits**: Removes per-alias duplication, transparent to the search and user.
  - **Drawbacks**: More effort to write and maintain knowledge objects, retains per-sourcetype duplication.

### Result
- Removed 80% of key-value pairs from the `normalizedSearch`!

### Migration Strategies (3)
- **Define Per-Sourcetype Automatic Lookup Using Sourcetype-Specific Output Fields**
  - **Benefits**: Similar to strategy (2), but with specific output fields.