### Rootkit Analysis and Forenscope Capabilities

#### Debug Registers
Although Forenscope does not faithfully restore the contents of the debug registers, this is generally not a problem for most typical applications, as only debuggers typically utilize this functionality.

#### Phalanx B6
Phalanx B6 hijacks the system call table by directly writing to memory via the `/dev/mem` device. It operates by scanning the internal symbol table of the kernel and redirecting control flow to its own internal functions. Informant detects Phalanx by checking the system call table and common kernel pointers, while Neutralizer restores the correct pointers to neutralize Phalanx.

#### Adore
Adore is a classic rootkit that hijacks kernel pointers to deceive tools such as `ps` and `netstat`. It works by overwriting pointers in the `/proc` filesystem to redirect control flow to its own functions, rather than modifying the system call table directly. Informant detects that the pointers used by Adore do not belong to the original read-only program code segment of the kernel. Neutralizer restores the correct pointers, which is simple and safe because the overwritten VFS function operations tables point to static functions like `proc_readdir`, while Adore has custom handlers located in untrusted writable kernel module address space.

#### Mood-NT
Mood-NT is a versatile multi-mode rootkit capable of hooking the system call table, using debug registers, and modifying kernel pointers. Due to its versatility, attackers can customize it for different purposes. Like the previously described rootkits, Forenscope detects Mood-NT in various modes. Our experiments indicate that Mood-NT hooks 44 system calls, all of which are detected by Forenscope. Each hook points out of the kernel’s read-only program code address space and into the untrusted memory area occupied by the rootkit.

### Forenscope Size and Efficiency
Forenscope is written in a combination of C and x86 assembly code. Table 5 shows that Forenscope is a very small program, consuming less than 48 KB in code and 125 KB in running memory footprint. The lines of code reported in the table are from the output of the `sloccount` [29] program. We break down the size of each component into core C and assembly code, hardware-specific restoration code, and module code. To minimize its size, Forenscope reuses existing kernel code to reinitialize the disk and network; the size of this kernel code is device-specific and therefore excluded from the table, as these components are not part of Forenscope. The small compiled size of Forenscope and its modules implies that a minimal amount of host memory is overwritten when Forenscope is loaded onto the system. Furthermore, the compact code base makes it more suitable for auditing and verification.

### Discussion
While evaluating Forenscope, we observed different behaviors of rootkits on virtual machines and physical hardware. Our observations confirm the results of Garfinkel et al. [17] that virtual machines cannot emulate intricate hardware nuances faithfully, causing some malware to fail to activate. For example, malware such as the Storm worm and Conficker [30] intentionally avoid activation when they sense the presence of virtualization to thwart analysis. Hence, analyzing a system for rootkits using a virtual machine may not only cause some rootkits to go undetected but also alert them to detection attempts. Since Forenscope continues to run the system without exposing issues raised by running virtualization systems, we argue that the system is unlikely to tip off an attacker to the presence of forensic software.

Legally, the use of live forensic tools is still under scrutiny due to issues of taint and blurriness. While some recent cases [2] suggest that courts are starting to recognize the value of volatile memory contents, the validity of the evidence is still being contested. A recent manual on collecting evidence in criminal investigations released by the Department of Justice [6] instructs that no limitations should be placed on the forensic techniques that may be used. It also states that the use of forensic software, regardless of its sophistication, does not affect constitutional requirements. Although we do not make strict claims of legal validity in the courts, we are encouraged by these guidelines to collect as much volatile information as possible. We objectively compare our tool against the state of the art and find that it collects more forms of evidence with better fidelity than existing tools.

### Countermeasures
Although Forenscope provides deep forensic analysis in a wide variety of scenarios, there are countermeasures that attackers and criminals can use to counter its use. From an incident response perspective, we assume that the machine is controlled by the owner and that the attacker does not have physical access to it. This means that only software-based anti-forensic techniques are feasible, although some may involve changing hardware settings through software. Most of the hardware and software states involved in these anti-forensic techniques are cleared upon reboot or rendered harmless in Forenscope’s clean environment. In an investigation, the adversary may elect to use a BIOS password, employ a secure bootloader, disable booting from external devices, or change BIOS settings to clear memory at boot time. These mitigation techniques may work, but if the investigator is sophisticated enough, they can try techniques suggested by Halderman et al. [19] to cool the memory chips and relocate them to another machine configured to preserve the contents of DRAM at boot time. One other avenue for working around a password-protected BIOS is to engage the bootloader itself. We found that some bootloaders, such as GRUB, allow booting to external devices even if the functionality is disabled in the BIOS. The only mitigation against this channel is to use password protection on GRUB itself, which we believe is not frequently used.

### Limitations
The only safe harbor for malware to evade Forenscope is in conventional memory itself because the act of rebooting pollutes the contents of the lower 640 KB of memory, potentially erasing evidence. However, we contend that although this technique is possible, it is highly unlikely for three reasons: first, for such malware to persist and alter the control flow, the kernel must map this memory area in the virtual address space, which requires a change in the system page tables, easily detectable by Forenscope. Second, such malware would have to inject a payload into conventional memory, and if the payload is corrupted by the reboot process, the system will crash. Finally, such malware won’t survive computer hibernation because conventional memory is not saved in the process. Even if Forenscope is unable to restore the system due to extenuating circumstances, we still have an intact memory dump and disk image to analyze. Although Forenscope has been designed with investigation in mind, we have not designed it to be completely transparent. For instance, malware might detect the presence of Forenscope by checking BitBlocker write latencies or scanning conventional memory.

### Related Work
Forenscope uses many technologies to achieve a high-fidelity forensic analysis environment through introspection, data structure analysis, and integrity checking. Many of the introspective techniques used by Forenscope were inspired by similar functionality in debuggers and simulators. VMware’s VMsafe protects guest virtual machines from malware by using introspection. A virtual machine infrastructure running VMsafe has a security monitor that periodically checks key structures in the guest operating system for alteration or corruption. Projects such as Xenaccess [22] take the idea further and provide a way to list running processes, open files, and other items of interest from a running virtual machine in a Xen environment. Although Xenaccess and Forenscope provide similar features, Xenaccess depends on the Xen VMM, but the investigator cannot rely on its presence or integrity. On some older critical infrastructure machines, legacy software requirements make it impractical to change the software configuration. Forenscope does not have such requirements. Forenscope’s techniques to recover operating system state from structures such as the process list have been explored in the context of analyzing memory dumps using data structure organization derived from reverse-engineered sources [14,27]. Attestation shows that a machine is running with an approved software and hardware configuration by performing an integrity check. Forenscope builds upon work from the VM introspection community to allow forensic analysis of machines that are not prepared a priori for such introspection. It provides a transparent analysis platform that does not alter the host environment and supports services such as BitBlocker, allowing an investigator to explore a machine without inducing taint.

### Concluding Remarks
Forenscope explores live forensic techniques and the issues of evidence preservation, non-intrusiveness, and fidelity that concern such approaches. Measured against existing tools, our experiments show that Forenscope can achieve better compliance within the guidelines prescribed by the community. Forenscope shows that volatile state can be preserved, and the techniques embodied in Forenscope are broadly applicable. We encourage further development of tools based on our high-fidelity analysis framework and believe that it can enable the advancement of analysis tools such as KOP [9]. Extensive evaluation of our techniques has shown that they are safe, practical, and effective by minimally tainting the system, while causing no disruption to critical systems. We believe that these techniques can be used in cases where traditional tools are unable to meet the needs of modern investigations. To continue the development of this tool, we plan to work closely with partners to better evaluate the use of this tool in real-world scenarios such as incident response in a variety of contexts.

### Acknowledgements
We would like to thank the anonymous reviewers, Winston Wan, Mirko Montanari, and Kevin Larson for their valuable feedback. This research was supported by grants from DOE DE-OE0000097 under TCIPG (tcip.iti.illinois.edu) and a Siebel Fellowship. The opinions expressed in this paper are those of the authors alone.

### References
[1] SANS Top 7 New IR/Forensic Trends In 2008.
http://computer-forensics.sans.org/community/top7_forensic_trends.php.

[2] Columbia Pictures Indus. v. Bunnell, U.S. Dist. LEXIS 46364. C.D. Cal. http://www.eff.org/cases/columbia-pictures-industries-v-bunnell, 2007.

[3] Prosecuting Computer Crimes, pages 141–142. US Department of Justice, 2007.

[4] Electronic Crime Scene Investigation: A Guide for First Responders. pages 25–27, 2008.

[5] Ramdisks - Now We are Talking Hyperspace!
http://www.linux-mag.com/cache/7388/1.html, 2009.

[6] Searching and Seizing Computers and Obtaining Electronic Evidence in Criminal Investigations, pages 79,89. Computer Crime and Intellectual Property Section, Criminal Division, 2009.

[7] K. Amari. Techniques and Tools for Recovering and Analyzing Data from Volatile Memory, 2009.

[8] D. Brezinski and T. Killalea. Guidelines for Evidence Collection and Archiving. RFC 3227 (Best Current Practice), Feb. 2002.

[9] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang. Mapping kernel objects to enable systematic integrity checking. In CCS '09: Proceedings of the 16th ACM conference on Computer and communications security, pages 555–565, New York, NY, USA, 2009. ACM.

[10] C. C. Center. How the FBI Investigates Computer Crime.
http://www.cert.org/tech_tips/FBI_investigates_crime.html, 2004.

[11] E. Chan, J. Carlyle, F. David, R. Farivar, and R. Campbell. BootJacker: Compromising Computers using Forced Restarts. In Proceedings of the 15th ACM conference on Computer and Communications Security, pages 555–564. ACM New York, NY, USA, 2008.

[12] D. Dai Zovi. Hardware Virtualization Rootkits. BlackHat Briefings USA, August, 2006.

[13] F. M. David, J. C. Carlyle, and R. H. Campbell. Exploring Recovery from Operating System Lockups. In USENIX Annual Technical Conference, Santa Clara, CA, June 2007.

[14] B. Dolan-Gavitt. The VAD tree: A Process-eye View of Physical Memory. Digital Investigation, 4:62–64, 2007.

[15] Edge, Jake. DR rootkit released under the GPL.
http://lwn.net/Articles/297775/.

[16] Fuzen Op. The FU rootkit.
http://www.rootkit.com/project.php?id=12.

[17] T. Garfinkel, K. Adams, A. Warfield, and J. Franklin. Compatibility is not transparency: VMM detection myths and realities. In Proceedings of the 11th Workshop on Hot Topics in Operating Systems (HotOS-XI), May 2007.

[18] P. Gutmann. Secure Deletion of Data from Magnetic and Solid-State Memory. In Proceedings of the 6th USENIX Security Symposium, pages 77–90, July 1996.

[19] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, and J. A. Calandrino. Lest We Remember: Cold Boot Attacks on Encryption Keys. In Proc of the 17th USENIX Security Symposium, San Jose, CA, July 2008.

[20] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J. Wang, and J. R. Lorch. SubVirt: Implementing malware with virtual machines. In Proceedings of the IEEE Symposium on Security and Privacy, pages 314–327, Washington, DC, USA, 2006. IEEE Computer Society.

[21] W. Link and H. May. Eigenschaften von MOS-Ein-Transistorspeicherzellen bei tieften Temperaturen. In Archiv fur Elektronik und Ubertragungstechnik, pages 33–229–235, June 1979.

[22] B. Payne, M. de Carbone, and W. Lee. Secure and flexible monitoring of virtual machines. In Proceedings of 23rd Annual Computer Security Applications Conference, pages 385–397, 2007.

[23] N. Petroni, T. Fraser, J. Molina, and W. Arbaugh. Copilot-A Coprocessor-based Kernel Runtime Integrity Monitor. In Proceedings of the 13th USENIX Security Symposium, pages 179–194, 2004.

[24] J. Pournelle. OS | 2: What it is, What it isn’t – and some of the Alternatives. Infoworld, 1988.

[25] M. Rozier, V. Abrossimov, F. Armand, I. Boule, M. Gien, M. Guillemont, F. Herrmann, C. Kaiser, S. Langlois, P. Lonard, and W. Neuhauser. Overview of the CHORUS Distributed Operating Systems. Computing Systems, 1:39–69, 1991.

[26] A. Savoldi and P. Gubian. Blurriness in Live Forensics: An Introduction. In Proceedings of Advances in Information Security and Its Application: Third International Conference, Seoul, Korea, page 119. Springer, 2009.

[27] A. Schuster. Searching for Processes and Threads in Microsoft Windows Memory Dumps. The Proceedings of the 6th Annual Digital Forensics Research Workshop, 2006.

[28] S. Sparks and J. Butler. Raising The Bar for Windows Rootkit Detection. Phrack, 11(63), 2005.

[29] D. A. Wheeler. SLOCCount.
http://www.dwheeler.com/sloccount.

[30] B. Zdrnja. More tricks from Conficker and VM detection.
http://isc.sans.org/diary.html?storyid=5842, 2009.