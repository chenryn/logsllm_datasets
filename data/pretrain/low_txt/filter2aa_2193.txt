### Weaponizing the Web: Increasing Attacks on User-Generated Content

**Event:** Black Hat USA 2009  
**Date:** Saturday, August 1, 2009

#### Presenters:
- **Nathan Hamiel**
  - Senior Consultant at Idea InfoSec
  - Associate Professor at University of Advancing Technology (UAT)
  - Hexagon Security Group
  - 23rd Degree Mason, LavaRolling Enthusiast

- **Shawn Moyer**
  - Principal Consultant at FishNet Security
  - Self-styled Wikipedian

---

### Preview for the ADHD
- Navel gazing and rants
- Democratization of misinformation
- Trust, integration, and shared exposure
- Features arms race and emerging attack surfaces
- Actual information and content
- A novel approach to an old bug
- Tool release and ensuing demos
- Stupid API tricks and multi-site mayhem
- Rants first, sorry!

---

### Voice of the People: User-Generated Content
- User-driven, social, and collaborative content
- Blogs, wikis, social networks, and web communities
- Integration with traditional web media
- Aggregation, syndication, and shared APIs
- Increasing client-side logic (REST, JSON, etc.)

---

### What Could Possibly Go Wrong?
- **Example 1: Moot as Time's Person of the Year**
  - Internet polls are not trusted.
- **Example 2: Post-MJ Celebrity Death Hoaxes**
  - Some "real" news outlets picked up on these hoaxes.
  - Note: Please stop Rickrolling.
- **Example 3: New York Times Aggregation Fail**
  - HTML injection in an article about HTML injection.
  - Aggregation, syndication, and shared exposure.

- **Example 4: DailyKos Trolls Twittering Dittoheads**
  - Fake economic and budget numbers.
  - Examples include:
    - $3 million for replacement tires for 1992-1995 Geo Metros.
    - $750,000 for an underground tunnel connecting a middle school and high school in North Carolina.
    - $4.7 million for a program supplying public television to K-8 classrooms.
    - $2.3 million for a museum dedicated to the electric bass guitar.

---

### Shared Exposure
- The emerging socialized web
- Multi-site aggregation = Attacker ROI
- Multipoint attack surfaces, APIs, and "Digg this!"
- (n)th-parties and shared exposure
- "Malware-like" legitimate functionality
- Silent updates and presence announcements
- Offsite links and wrapped external content
- Try blocking .js for googleapis.com. I dare you.

---

### Unite for Problems
- Top BOTSites
- Bolting On Fail: Retrofitting the Thing of The Now
- More Firefox fail. No, seriously.

---

### Exposing Yourself
- APIs are the new hotness
- Integrating other site functions (e.g., tweets in Facebook)
- Hooks into fluffy clouds of amorphous love (e.g., googleapis, amazonws)
- Cross-domain content and sandboxing
- Two major types of APIs:
  - For consumption of application services
  - For integration of apps on another site

---

### API Stacking
- Your app is so ugly its APIs have APIs
- How far away from what we are using do we need to be?
- Complexity breeds exposure.

- **API as Anon Proxy:**
  - Attacks anonymization via shared APIs

- **No Place Like 127.0.0.1:**
  - Hi5 API localhost dev page. Oops!

- **API Redirect Loops:**
  - Triangle of Death
  - (Rectangle|Pentagon|Hexagram|Octagon) of Death

---

### Now We Break Some Stuff
- **CSRF / Session Riding / XSRF:**
  - Well understood since Pete Watkins' work in 2001
  - Often tough to audit for, nuanced
  - Typically described as a "static" attack
  - Per-user forgeries usually only via XSS
  - Can be silly, bad, or really, really bad
  - Our continued move to "web everything"
  - Classical mitigations: Referrer, POSTs, tokens

- **Do You Use a Browser for It?**

- **Classical CSRF:**
  - Via POST

- **"Dynamic" CSRF:**
  - Per-request, per-session, per-user forgeries
  - Described by Samy, recent bit.ly XSS, and other XSS worms
  - Many "complex" CSRFs are ignored
  - POST-based, tokenized, per-user requests
  - Still exploitable, but higher bar
  - See also: [Hacking CSRF Tokens Using CSS History Hack](http://securethoughts.com/2009/07/hacking-csrf-tokens-using-css-history-hack/)

---

### Enter the Fist
- **MonkeyFist: PoC Dynamic CSRF Tool**
  - [Hexsec Labs](http://hexsec.com/labs)
  - Small Python web server
  - Creates payload/patterns based on referrer
  - Automates per-request, "dynamic" CSRF
  - Constructs hidden POSTs, redirects, refreshes
  - Makes requests for tokens or steals from referrer

- **MF Payload Options:**
  - Payload with number
  - Site entry w/ domain
  - Attack method (GET, POST, PAGE)
  - Session data to grab
  - URL to send attack to
  - Header to add to POST request
  - Value for defined header
  - POST Variable name
  - Value for defined POST variable
  - Destination for meta refresh

- **Payloads.xml**

- **Dynamic Redirect Attack**

- **POST Construct**

- **Dynamic Page**

- **Fist Full of Fail**

- **What You Just Saw:**
  - MF "Dynamic" CSRF of anon Wikipedia edit
  - Requests were replayable but unique
  - WPEdittime, WPStarttime, other session values
  - MF requested session values, hidden POST
  - We think this is pretty nifty. OMGTHETANS!

---

### Hrmm.
- CSRF mitigations are well understood
- Still, you have to get a lot of things right
- No bolt-on fixes, sorry
- Look at your code! Forget SOP.
- Thanks for listening. Send bugfixes.
- Nathanâ€™s blog: [neohaxor.org](http://www.neohaxor.org)
- Shawn hates blogs.

---

**Thank you for attending Black Hat USA 2009!**