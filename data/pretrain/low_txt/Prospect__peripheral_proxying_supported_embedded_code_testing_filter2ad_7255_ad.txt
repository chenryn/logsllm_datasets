### 5.2 Case Study: Security Audit of a Proprietary Fire Alarm System

Under a legally binding non-disclosure agreement, we were able to use PROSPECT to conduct a full-scale security audit of a widely used fire alarm system over a period of more than six months. A schematic overview of the overall fire alarm system is provided in Figure 5. The lower part of the diagram shows the fire alarm system, which includes a field-level bus with various sensors (such as smoke detectors) and actuators (such as alarm lights or sirens) connected to it. Typically, there is one fire alarm system per building, with sensors and actuators distributed throughout the rooms and exterior of each building. Each fire alarm system is connected via a network (i.e., TCP/IP) to a central building management server, which oversees all fire alarm systems across multiple buildings. This setup allows the server to manage the fire alarm systems and take necessary actions in the event of a fire. From a security perspective, the TCP/IP connection between the fire alarm systems and the building management server is particularly interesting. If an attacker gains access to the fire alarm systems through the building network or even the Internet, they could potentially trigger false alarms or disable the fire alarms, leading to a dangerous situation for the building's occupants.

On a technical level, the fire alarm system we analyzed is a customized embedded Linux system with custom drivers, custom peripheral hardware components, and several proprietary user-space programs that together form the overall fire alarm system.

### 6. Results and Discussion

#### 6.1 Performance Impact

Table 5 presents the average performance impact of our system, as discussed in Section 5.1. The values are arithmetic means of all recorded system calls. Specifically, the average number of read() accesses is calculated from 166,972 native and 196,075 forwarded system calls, respectively. The results clearly show that for system calls that can be forwarded without further consideration (e.g., lseek(), read(), write(), and _newselect()), the slowdown is practically insignificant. This is because the primary use of PROSPECT is for program debugging (i.e., single-stepping) and dynamic code analysis. Our results indicate that the _newselect() call was slightly faster with PROSPECT compared to the native system. This is due to the nature of the system call, which blocks until either the given timeout is reached or one of the monitored file descriptors is ready. Given the close relationship with peripheral hardware behavior (e.g., sleep modes), small variances in the recorded values are unavoidable.

In contrast, the ioctl() and open() calls cause a significant slowdown. The ioctl() slowdown is attributed to the dynamic memory tunneling mechanism described in Section 4.3, while the open() slowdown is due to the connection establishment between the PROSPECT client and server. On the virtual analysis environment, we were unable to capture close() calls on virtual character devices, so we cannot provide a performance comparison. However, since close() also works on an existing PROSPECT connection and no special considerations are necessary for the call, we believe the performance impact is comparable to the lseek(), read(), write(), and _newselect() calls. Table 5 also lists the frequency of each specific system call, showing that the most frequently used calls are also the fastest. For instance, write(), read(), seek(), and _newselect() account for 95.71% of all forwarded system calls. The distribution of system calls between native and forwarded execution varied slightly between analysis runs due to the internal state of the peripheral hardware.

#### 6.2 Proprietary Fire Alarm System Security Audit

During our fire alarm security analysis (Section 5.2), we conducted extensive fuzz testing using the setup shown in Figure 6. During the analysis, PROSPECT successfully forwarded more than 500,000 system calls per analysis run to the target system without issues. We were also able to manually debug and single-step through the fire alarm application code. Our fuzz tests revealed a previously unknown zero-day vulnerability, which was reported to the manufacturer. This case study demonstrates that even under demanding real-life requirements (29 multi-threaded processes concurrently accessing five different hardware peripherals), our system performed well and enabled us to conduct both dynamic analysis and extensive fuzz testing to discover vulnerabilities.

### 7. Limitations and Future Work

PROSPECT has several limitations that need to be considered. Currently, our system uses TCP/IP over a network connection between the virtual analysis system and the embedded target system. If the user-space application under analysis changes the network configuration, this would also bring down the PROSPECT connection. Similarly, if the target system lacks a network interface, PROSPECT cannot be used. We plan to add support for different communication interfaces (such as serial links) to PROSPECT to address these cases. Another limitation is that PROSPECT requires pthreads on the target system and currently only runs on Linux. Additionally, mmap support for character devices is missing due to the lack of support in FUSE. Since mmap calls can be forwarded using a similar approach as described in Section 4.3, we plan to implement full mmap support in future versions.

As PROSPECT requires only minimal supported functionality on the target system and FUSE has been ported to various operating systems (Section 3), our system could be easily ported to different architectures and operating systems. For some implementations, the considerable slowdown caused by PROSPECT might lead to issues. However, this situation also occurs when single-stepping through programs, and solutions such as altering the information returned by timing-related system calls exist. Additionally, our system does not currently provide any security features.

Another consideration, briefly discussed in Section 3, is that when accessing devices on UNIX systems, their access rights are determined by the device’s permissions. The client implementation needs to create virtual character devices and therefore requires root privileges. In contrast, the PROSPECT server can be run as any user on the target system, but it is recommended to run it as root to ensure all devices are accessible. Through PROSPECT, the investigated process inherits the device access permissions from the server. As a result, it could be possible for an investigated process to access devices even though that would not be possible under normal circumstances. This property is not necessarily a limitation, as it provides an additional way to influence system behavior during analysis.

Regarding the high slowdown for unrestricted ioctl() calls, our implementation still has room for improvement. For example, instead of querying the /proc file system, we could implement a more efficient mechanism to minimize execution time in future implementations.

### 8. Related Work

When dealing with security analysis on embedded systems, most research approaches use static analysis. For instance, Khare et al. presented key problems faced when using static analysis techniques on large embedded code bases [9]. Their work focuses on improving the overall security of embedded systems through static analysis of source code.

In contrast, Ramakrishnan and Gopal do not require access to source code, as their static program analysis techniques run on embedded binaries [22]. However, their focus is not on embedded security or vulnerability discovery. Zili Shao et al. introduced a mixed hardware/software system to check for and protect embedded systems from buffer overflow attacks [18]. Their system operates during program execution but is more focused on vulnerability protection than discovery.

Sumpf and Brakensiek introduced device driver isolation within virtualized embedded platforms [21], which is the most closely related system to PROSPECT. They created device drivers with a generalized interface to provide homogeneous access for virtual machines. However, their system requires knowledge of the driver implementation and is limited to L4 microkernels, making it unsuitable for unknown peripheral devices.

### 9. Conclusion

PROSPECT has proven to be a valuable tool, enabling us to conduct a full-scale dynamic security analysis of a widely used fire alarm system. Without PROSPECT, dynamic analysis would have been infeasible due to the limitations of the fire alarm embedded system. We believe that PROSPECT’s approach has significant practical impact, allowing us to overcome the limitations of static analysis common in embedded vulnerability discovery. The general concept is applicable to a wide range of embedded systems, including smartphones and field-level SCADA components.

### 10. Acknowledgements

The research leading to these results has received funding from the Austrian Research Promotion Agency (FFG) under grants 836276 (SG2), 834005 (Fire-IP), and the European Union Seventh Framework Programme under grant agreement n. 257007 (SysSec). We would like to thank the anonymous reviewers for their helpful feedback and improvement suggestions. We also extend our gratitude to Trustworks [12] for providing valuable insights and tools that made this research possible.

### 11. References

[1] A. Austin and L. Williams. One technique is not enough: A comparison of vulnerability discovery techniques. In Empirical Software Engineering and Measurement (ESEM), 2011 International Symposium on, pages 97–106, 2011.

[2] S. Bekrar, C. Bekrar, R. Groz, and L. Mounier. Finding software vulnerabilities by smart fuzzing. In Software Testing, Verification and Validation (ICST), 2011 IEEE Fourth International Conference on, pages 427–430, 2011.

[3] D. Brylow, N. Damgaard, and J. Palsberg. Static checking of interrupt-driven software. In Proceedings of the 23rd International Conference on Software Engineering, ICSE ’01, pages 47–56, Washington, DC, USA, 2001. IEEE Computer Society.

[4] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley. Unleashing mayhem on binary code. In Security and Privacy (SP), 2012 IEEE Symposium on, pages 380–394, 2012.

[5] W. Drewry and T. Ormandy. Flayer: Exposing application internals, 2007.

[6] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. In In Proc. Network and Distributed Systems Security Symposium, pages 191–206, 2003.

[7] S. Karnouskos. Stuxnet worm impact on industrial cyber-physical system security. In IECON 2011 - 37th Annual Conference on IEEE Industrial Electronics Society, pages 4490–4494, 2011.

[8] M. Kermani, M. Zhang, A. Raghunathan, and N. Jha. Emerging frontiers in embedded security. In VLSI Design and 2013 12th International Conference on Embedded Systems (VLSID), 2013 26th International Conference on, pages 203–208, 2013.

[9] S. Khare, S. Saraswat, and S. Kumar. Static program analysis of large embedded code base: An experience. In Proceedings of the 4th India Software Engineering Conference, ISEC ’11, pages 99–102, New York, NY, USA, 2011. ACM.

[10] P. Koopman. Embedded system security. Computer, 37(7):95–97, July 2004.

[11] B. Liu, L. Shi, Z. Cai, and M. Li. Software vulnerability discovery techniques: A survey. In Multimedia Information Networking and Security (MINES), 2012 Fourth International Conference on, pages 152–156, 2012.

[12] Trustworks KG. http://www.trustworks.at (retrieved 2013-04-17), 2013.

[13] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy, SP ’07, pages 231–245, Washington, DC, USA, 2007. IEEE Computer Society.

[14] S. Parameswaran and T. Wolf. Embedded systems analysis of embedded executable assembly code. In Proceedings of the 2004 international conference on Compilers, architecture, and synthesis for embedded systems, CASES ’04, pages 157–166, New York, NY, USA, 2004. ACM.

[15] F. Project. Filesystem in userspace. http://fuse.sourceforge.net/ (retrieved 2013-04-17), 2013.

[16] E. Schwartz, T. Avgerinos, and D. Brumley. All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask). In Security and Privacy (SP), 2010 IEEE Symposium on, pages 317–331, 2010.

[17] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. AddressSanitizer: A fast address sanity checker. In Proceedings of the 2012 USENIX conference on Annual Technical Conference, USENIX ATC'12, pages 28–28, Berkeley, CA, USA, 2012. USENIX Association.

[18] Z. Shao, C. Xue, Q. Zhuge, M. Qiu, B. Xiao, and E. H.-M. Sha. Security protection and checking for embedded system integration against buffer overflow attacks via hardware/software. IEEE Transactions on Computers, 55(4):443–453, 2006.

[19] K. V. Shibu. Introduction To Embedded Systems. McGraw-Hill Education, 2009.

[20] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna. Your botnet is my botnet: Analysis of a botnet takeover. In Proceedings of the 16th ACM conference on Computer and communications security, CCS ’09, pages 635–647, New York, NY, USA, 2009. ACM.

[21] S. Sumpf and J. Brakensiek. Device driver isolation within virtualized embedded platforms. In Consumer Communications and Networking Conference, 2009. CCNC 2009. 6th IEEE, pages 1–5, 2009.

[22] R. Venkitaraman and G. Gupta. Static program security—an overview. Design Automation for Embedded Systems, 12(3):173–183, 2008.

[23] J. Viega and H. Thompson. The state of embedded-device security (spoiler alert: It’s bad). Security Privacy, IEEE, 10(5):68–70, 2012.

[24] C. Willems, T. Holz, and F. Freiling. Toward automated dynamic malware analysis using CWSandbox. Security Privacy, IEEE, 5(2):32–39, 2007.