### 5. DISCUSSION AND LIMITATIONS

The primary objective of this work is to understand the threat posed by invalid inputs to system services. The most significant limitation of our approach is the manual nature of much of the work. We manually inspected the source code of Android system services to determine the ratio of methods that perform input validation. Subsequently, we developed a semi-automated tool to fuzz the system services. This tool continuously sends requests to the system services and records all system logs. Although the tool uses a script to filter out unnecessary log messages, the messages from the target services and the tool itself are still checked manually.

Future work could address these limitations by employing static analysis tools to analyze the source code of the system services and developing more advanced scripts to automatically check log messages.

Currently, the fuzzer (buzzer) is not cross-version compatible due to its heavy reliance on native libraries. The NDK has been configured to compile buzzer for a specific version, but it can be reconfigured for other versions. Therefore, buzzer's design is not tied to a particular Android version and can be adapted to work with other versions with additional effort.

To mitigate the vulnerabilities identified in this work, we recommend using whitelists or positive validation in interface methods. Specifically, interface methods should verify that incoming arguments match a set of tightly constrained known good values. Any argument that does not conform to these values should be rejected. For example, the `WifiServiceImpl.setFrequencyBand` method should reject requests containing band numbers greater than two or less than zero. Additionally, for arguments that are too complex to restrict, the related system service methods should at least reject known bad values. Our analysis revealed that nine out of 16 vulnerable methods do perform some form of input validation. System service developers should implement stricter testing for these services.

### 6. RELATED WORK

#### 6.1 Input Validation

Most studies on input validation focus on web applications [10, 30], addressing issues such as cross-site scripting and SQL injection. In these scenarios, the client and server are separate information systems. If the server is attacked, both the server and other clients accessing it are affected, while the attacker remains unaffected. In contrast, the input validation studied in this work is within a single system, where the app and system services coexist on the same Android device. If a system service is attacked, the malicious app may also be impacted. For instance, if a malicious app sends a request to set the WiFi frequency band number to a value greater than two, the device will lose connection to the WiFi access point, and the malicious app will no longer be able to access the network via WiFi.

#### 6.2 Fuzzers in Android and Linux

Our tool was inspired by the Linux System Call fuzzer, Trinity [9]. Trinity employs techniques to pass semi-intelligent arguments to system calls, reducing the time spent on "useless" tests and increasing the likelihood of discovering interesting cases that may result in unexpected errors. For example, Trinity creates a list of file descriptors and randomly selects one when a system call requires a file descriptor. Similarly, our fuzzer (buzzer) passes semi-intelligent arguments to system services. We manually inspected all the methods provided by the system services. Many of these methods receive integer values, such as user IDs, and validate them before use. Buzzer collects all user IDs in the system and randomly sends them to the methods that require them. Additionally, many methods reject requests if the app lacks the necessary permissions, which third-party apps cannot request. We recorded these functions, and buzzer does not fuzz these methods.

There are other fuzzers in the Android ecosystem, such as the intent fuzzer [7, 28, 35]. The intent fuzzer [7] is an unprivileged app that injects valid intents with blank data fields into other apps' exported components. Maji et al. [28] extended this basic intent fuzzer by creating a set of valid and semi-valid intents with object fields from the Android documentation, selectively leaving some fields blank. DroidFuzzer [35] focuses on activities that process MIME data passed via URIs, injecting intents with abnormal data generated from normal data seeds using mutation. Inter-component communication in Android is based on Binder. The work done by previous literature can complement the argument generation methods in buzzer, especially for system service activities that receive many requests with Intent values.

#### 6.3 Android Security

A substantial body of research exists on Android security, covering various aspects. Examples include:

- **Privilege Escalation** [14, 15, 18]: These attacks exploit deficiencies in Android's permission mechanism, allowing apps with fewer permissions to access components of more privileged apps.
- **Privacy Leaks** [11, 19, 23]: These attacks involve the unauthorized exposure of users' private data.
- **Repackage Attacks** [22, 36, 37]: These involve decompiling an Android app, inserting malicious functions, and recompiling it. All of these examples concern intra- and inter-application communication or the security of the app itself.

Other studies have focused on the hazards of Android system customization [32, 38, 21], the updating mechanism in Android OS [33], UI state inference attacks [17], and the security quality of third-party components and libraries in Android apps [13, 20, 31].

To the best of our knowledge, there is limited research focusing specifically on system services, particularly regarding input validation vulnerabilities. This paper addresses the security implications of system services and identifies input validation problems within them.

### 7. CONCLUSION

In this work, we have taken the first steps to analyze Android-specific input validation vulnerabilities. Specifically, we:

a) Measured the corresponding attack surface and reported the current input validation status of Android system services.
b) Developed a new input validation vulnerability scanner for Android devices. This tool fuzzes all Android system services by sending requests with malformed arguments. Through comprehensive evaluation of over 90 system services and over 1,900 system service methods, we identified 16 vulnerabilities in Android system services.

### 8. REFERENCES

[1] Android AIDL Guide. http://developer.android.com/guide/components/aidl.html
[2] Android Init Language. https://android.googlesource.com/platform/system/core/+/master/init/readme.txt
[3] Android Init.rc File. https://android.googlesource.com/platform/system/core/+/master/rootdir/init.rc
[4] Android Open Source Project. https://android.googlesource.com/
[5] Android Shipments in 2014. http://www.cnet.com/news/android-shipments-exceed-1-billion-for-first-time-in-2014/
[6] Factory Images for Nexus Devices. https://developers.google.com/android/nexus/images
[7] Intent Fuzzer. https://www.isecpartners.com/tools/mobile-security/intent-fuzzer.aspx
[8] Symantec’s Threat Report. http://know.symantec.com/LP=1123
[9] Trinity - A Linux System Call Fuzz Tester. http://codemonkey.org.uk/projects/trinity/
[10] M. A. Alkhalaf. Automatic Detection and Repair of Input Validation and Sanitization Bugs. PhD thesis, UNIVERSITY OF CALIFORNIA Santa Barbara, 2014.
[11] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In PLDI. ACM, 2014.
[12] A. Barth, C. Jackson, and J. C. Mitchell. Robust Defenses for Cross-Site Request Forgery. In CCS. ACM, 2008.
[13] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath, R. Wang, and D. Wetherall. Brahmastra: Driving Apps to Test the Security of Third-Party Components. In USENIX Security Symposium. USENIX Association, 2014.
[14] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-R. Sadeghi. Xmandroid: A New Android Evolution to Mitigate Privilege Escalation Attacks. Technische Universität Darmstadt, Technical Report TR-2011-04, 2011.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards Taming Privilege-Escalation Attacks on Android. In NDSS, 2012.
[16] G. Chen, H. Jin, D. Zou, B. B. Zhou, Z. Liang, W. Zheng, and X. Shi. Safestack: Automatically Patching Stack-Based Buffer Overflow Vulnerabilities. IEEE Transactions on Dependable and Secure Computing, 2013.
[17] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into Your App Without Actually Seeing It: UI State Inference and Novel Android Attacks. In USENIX Security Symposium. USENIX Association, 2014.
[18] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege Escalation Attacks on Android. In Information Security. Springer, 2011.
[19] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. ACM TOCS, 2014.
[20] M. Georgiev, S. Jana, and V. Shmatikov. Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks. In NDSS, 2014.
[21] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability Leaks in Stock Android Smartphones. In NDSS, 2012.
[22] S. Hanna, L. Huang, E. Wu, S. Li, C. Chen, and D. Song. Juxtapp: A Scalable System for Detecting Code Reuse Among Android Applications. In DIMVA. Springer, 2013.
[23] J. Kim, Y. Yoon, K. Yi, J. Shin, and S. Center. Scandal: Static Analyzer for Detecting Privacy Leaks in Android Applications. MoST, 2012.
[24] Y. Kosuga, K. Kono, M. Hanaoka, M. Hishiyama, and Y. Takahama. Sania: Syntactic and Semantic Analysis for Automated Testing Against SQL Injection. In ACSAC, 2007.
[25] T. Li, X. Zhou, L. Xing, Y. Lee, M. Naveed, X. Wang, and X. Han. Mayhem in the Push Clouds: Understanding and Mitigating Security Hazards in Mobile Push-Messaging Services. In CCS. ACM, 2014.
[26] M. T. Louw and V. Venkatakrishnan. Blueprint: Robust Prevention of Cross-Site Scripting Attacks for Existing Browsers. In Security and Privacy. IEEE, 2009.
[27] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In CCS. ACM, 2012.
[28] A. K. Maji, F. A. Arshad, S. Bagchi, and J. S. Rellermeyer. An Empirical Study of the Robustness of Inter-Component Communication in Android. In DSN. IEEE, 2012.
[29] Y. Nadji, P. Saxena, and D. Song. Document Structure Integrity: A Robust Basis for Cross-Site Scripting Defense. In NDSS, 2009.
[30] T. Scholte, D. Balzarotti, and E. Kirda. Have Things Changed Now? An Empirical Study on Input Validation Vulnerabilities in Web Applications. Computers & Security, 2012.
[31] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit: Separating Smartphone Advertising from Applications. In USENIX Security Symposium. USENIX Association, 2012.
[32] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The Impact of Vendor Customizations on Android Security. In CCS. ACM, 2013.
[33] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang. Upgrading Your Android, Elevating My Malware: Privilege Escalation Through Mobile OS Updating. In Security and Privacy (SP). IEEE, 2014.
[34] L.-K. Yan and H. Yin. Droidscope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In USENIX Security. USENIX Association, 2012.
[35] H. Ye, S. Cheng, L. Zhang, and F. Jiang. Droidfuzzer: Fuzzing the Android Apps with Intent-Filter Tag. In MoMM. ACM, 2013.
[36] F. Zhang, H. Huang, S. Zhu, D. Wu, and P. Liu. Viewdroid: Towards Obfuscation-Resilient Mobile Application Repackaging Detection. In WiSec 2014. Citeseer, 2014.
[37] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces. In CODASPY. ACM, 2012.
[38] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The Peril of Fragmentation: Security Hazards in Android Device Driver Customizations. In Security and Privacy (SP). IEEE, 2014.
[39] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolution. In Security and Privacy (SP). IEEE, 2012.