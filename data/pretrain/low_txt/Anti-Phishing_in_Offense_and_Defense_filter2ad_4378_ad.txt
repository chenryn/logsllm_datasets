# Table 3: The 20 Legitimate Websites

The following are the 20 legitimate websites used in our study:
- aol.com
- geico.com
- careerbuilder.com
- aaa.com
- my.wm.edu

## Observations and Results

### Account Lockout
First, as expected, none of these legitimate websites locked real accounts during our extensive testing.

### CAPTCHA Requirements
Second, if the set size \( S \) is 4 or 8, none of the legitimate websites required CAPTCHA tests. However, if the set size \( S \) is 12 or 16, only two websites prompted users to complete a CAPTCHA test after receiving \( S \) credentials. While this test may be an inconvenience for users, it does not prevent further interactions with the web server.

### Delay Induced by BogusBiter
Third, the delay caused by BogusBiter is minimal when the set size \( S \) is 4 or 8. Figure 4 illustrates the percentage of legitimate sites versus the delay caused by BogusBiter under four different set sizes. When \( S \) is 4 or 8, the delay for all 20 legitimate sites is less than 3 seconds, and for over 85% of the sites, the delay is less than one second. Therefore, even in the case of false positives, BogusBiter induces only a very small delay to users.

## Discussions

### Deployment Requirements
#### Client-Side
Users need to install BogusBiter on their client-side. Vulnerable users can install BogusBiter to protect themselves, while security-conscious users can do so to help protect others. Since BogusBiter is a browser extension, the installation process is straightforward.

#### Server-Side
Phishing-targeted legitimate websites need to deploy the defensive line enabled by BogusBiter. This deployment is relatively simple compared to that of Dynamic Security Skins [5] and BeamAuth [1], as our system only uses existing authentication information and does not alter the authentication mechanisms.

### Preparations for Massive Deployment
The primary concern with a massive deployment of BogusBiter is the potential increase in load on the authentication server of a legitimate site if its login page is wrongly flagged as a phishing page. However, widely-deployed phishing detection mechanisms such as those in IE 7 and Firefox 2 have a low false positive rate, especially for popular websites with a large user base. As reported in [32], both IE 7 and Firefox 2 achieve a zero false positive rate for 516 representative legitimate websites. Thus, only a few less-popular and poorly-designed legitimate websites may need to prepare for a massive deployment of BogusBiter. Operators of these websites can either revise their login pages or contact web browser vendors to address the issue.

### Limitations of BogusBiter
Phishers may use JavaScript attacks to evade BogusBiter, such as keystroke monitoring techniques to directly steal user credentials. These attacks can be mitigated by adopting the keystroke intercepting technique introduced in PwdHash [22]. However, phishers can still fabricate more sophisticated JavaScript attacks.

Phishers may also use non-standard login pages, such as irregular HTML forms, CAPTCHAs on login pages, or Flash-based login pages. For legitimate websites, non-standard login pages are uncommon due to accessibility and usability issues [27, 38]. Similarly, for phishing sites, non-HTML forms are not popular because they make phishing attacks more evident to users or detection tools. Therefore, standard HTML pages remain the focus of most anti-phishing research [4, 22, 29, 33].

## Related Work

### Client-Side Anti-Phishing Techniques
Client-side anti-phishing techniques can be classified into three main approaches:

1. **Enhancing Login Process Security:**
   - Ye and Smith [30] designed "Trusted Path" to convey trust signals from the web browser to the user.
   - Dhamija and Tygar [5] proposed "Dynamic Security Skins" to allow legitimate websites to prove their identity easily.
   - Ross et al. [22] developed PwdHash to generate different passwords for different domains.
   - Wu et al. [29] introduced "Web Wallet" to direct users to a safe path if the intended website does not match the current one.
   - Adida [1] proposed BeamAuth, which uses a secret token in a URL fragment identifier for web-based authentication.

2. **Improving Automatic Phishing Detection:**
   - Chou et al. [4] built SpoofGuard to compute spoof indexes using heuristics.
   - Zhang et al. [33] and Garera et al. [11] demonstrated that heuristic-based techniques can identify over 90% of phishing pages with about 1% false positives.
   - Both Firefox 2 and IE 7 have built-in automatic phishing detection features.

3. **Non-Preventive Anti-Phishing Approaches:**
   - Florêncio and Herley [8] proposed a password rescue scheme that relies on client-side reporting and server-side aggregation.
   - Parno et al. [19] introduced a Phoolproof anti-phishing mechanism that eliminates reliance on perfect user behavior but requires a trusted mobile device.
   - Birk et al. [2] introduced "active phishing tracing" to inject fingerprinted credentials into phishing sites for forensic analysis and judicial prosecution.

## Conclusion

We introduced BogusBiter, a new client-side anti-phishing tool that automatically protects vulnerable users by injecting a large number of bogus credentials into phishing sites. These bogus credentials hide real credentials and force phishers to verify them at legitimate websites, creating opportunities for timely detection of stolen credentials. BogusBiter is transparent to users and can be seamlessly integrated with current phishing detection and warning mechanisms on web browsers. We implemented BogusBiter as a Firefox 2 extension and evaluated its effectiveness and usability. Given the serious nature of phishing and the adaptability of phishers, we must pursue different approaches and promote the cooperation of various solutions. The effectiveness of BogusBiter depends on several factors, but we believe its unique approach will make a valuable contribution to anti-phishing research.

## Acknowledgments
We thank anonymous reviewers for their insightful comments and Barbara G. Monteith for her valuable suggestions. This work was partially supported by NSF grants CNS-0627339 and CNS-0627340.

## References
[1] B. Adida. BeamAuth: Two-factor web authentication with a bookmark. In Proceedings of the CCS, pages 48–57, 2007.
[2] D. Birk, M. Dornseif, S. Gajek, and F. Gröbert. Phishing phishers - tracing identity thieves and money launderer. Technical Report, Horst-Görtz Institute of Ruhr-University of Bochum, 2006.
[3] A. Bortz, D. Boneh, and P. Nandy. Exposing private information by timing web applications. In Proceedings of the WWW, pages 621–628, 2007.
[4] N. Chou, R. Ledesma, Y. Teraguchi, and J. C. Mitchell. Client-side defense against web-based identity theft. In Proceedings of the NDSS, 2004.
[5] R. Dhamija and J.D. Tygar. The battle against phishing: Dynamic security skins. In Proceedings of the SOUPS, pages 77–88, 2005.
[6] J. S. Downs, M. B. Holbrook, and L. F. Cranor. Decision strategies and susceptibility to phishing. In Proceedings of the SOUPS, pages 79–90, 2006.
[7] S. Egelman, L. F. Cranor, and J. Hong. You’ve been warned: An empirical study of the effectiveness of web browser phishing warnings. In Proceedings of the CHI, pages 1065–1074, 2008.
[8] D. Florêncio and C. Herley. Password rescue: A new approach to phishing prevention. In Proceedings of the HOTSEC, 2006.
[9] D. Florêncio and C. Herley. A large-scale study of web password habits. In Proceedings of the WWW, pages 657–666, 2007.
[10] D. Florêncio, C. Herley, and B. Coskun. Do strong web passwords accomplish anything? In Proceedings of the HOTSEC, 2007.
[11] S. Garera, N. Provos, M. Chew, and A. D. Rubin. A framework for detection and measurement of phishing attacks. In Proceedings of the WORM, 2007.
[12] T. N. Jagatic, N. A. Johnson, M. Jakobsson, and F. Menczer. Social phishing. Commun. ACM, 50(10):94–100, 2007.
[13] M. Jakobsson and S. Myers. Phishing and Countermeasures: Understanding the Increasing Problem of Electronic Identity Theft. Wiley-Interscience, ISBN 0-471-78245-9, 2006.
[14] M. Jakobsson and J. Ratkiewicz. Designing ethical phishing experiments: a study of (ROT13) rOnl query features. In Proceedings of the WWW, pages 513–522, 2006.
[15] M. Jakobsson and A. Young. Distributed phishing attacks. In Proceedings of the workshop on Resilient Financial Information Systems, 2005.
[16] P. Kumaraguru, Y. Rhee, A. Acquisti, L. F. Cranor, J. Hong, and E. Nung. Protecting people from phishing: The design and evaluation of an embedded training email system. In Proceedings of the CHI, pages 905–914, 2007.
[17] C. Ludl, S. McAllister, E. Kirda, and C. Kruegel. On the effectiveness of techniques to detect phishing sites. In Proceedings of the DIMVA, 2007.
[18] T. Moore and R. Clayton. Examining the impact of website takedown on phishing. In Proceedings of the APWG eCrime Researchers Summit, 2007.
[19] B. Parno, C. Kuo, and A. Perrig. Phoolproof phishing prevention. In Proceedings of the Financial Cryptography, pages 1–19, 2006.
[20] B. Pinkas and T. Sander. Securing passwords against dictionary attacks. In Proceedings of the CCS, pages 161–170, 2002.
[21] Rachna Dhamija and J.D. Tygar and Marti Hearst. Why phishing works. In Proceedings of the CHI, pages 581–590, 2006.
[22] B. Ross, C. Jackson, N. Miyake, D. Boneh, and J. C. Mitchell. Stronger password authentication using browser extensions. In Proceedings of the USENIX Security Symposium, pages 17–32, 2005.
[23] S. E. Schechter, R. Dhamija, A. Ozment, and I. Fischer. The emperor’s new security indicators: An evaluation of website authentication and the effect of role playing on usability studies. In Proceedings of the IEEE Symposium on Security and Privacy, pages 51–65, 2007.
[24] S. Sheng, B. Magnien, P. Kumaraguru, A. Acquisti, L. F. Cranor, J. Hong, and E. Nunge. Anti-Phishing Phil: the design and evaluation of a game that teaches people not to fall for phish. In Proceedings of the SOUPS, pages 88–99, 2007.
[25] L. von Ahn, M. Blum, N. Hopper, and J. Langford. CAPTCHA: Using hard AI problems for security. In Proceedings of the Eurocrypt, pages 294–311, 2003.
[26] T. Whalen and K. M. Inkpen. Gathering evidence: use of visual security cues in web browsers. In Proceedings of the conference on Graphics interface, pages 137–144, 2005.
[27] M. Wu. Fighting Phishing at the User Interface. PhD thesis, MIT, 2006.
[28] M. Wu, R. C. Miller, and S. L. Garfinkel. Do security toolbars actually prevent phishing attacks? In Proceedings of the CHI, pages 601–610, 2006.
[29] M. Wu, R. C. Miller, and G. Little. Web Wallet: preventing phishing attacks by revealing user intentions. In Proceedings of the SOUPS, pages 102–113, 2006.
[30] Z. E. Ye and S. Smith. Trusted paths for browsers. In Proceedings of the USENIX Security Symposium, pages 263–279, 2002.
[31] K.-P. Yee and K. Sitaker. Passpet: convenient password management and phishing protection. In Proceedings of the SOUPS, pages 32–43, 2006.
[32] Y. Zhang, S. Egelman, L. F. Cranor, and J. Hong. Phinding phish: Evaluating anti-phishing tools. In Proceedings of the NDSS, 2007.
[33] Y. Zhang, J. Hong, and L. Cranor. CANTINA: A content-based approach to detecting phishing web sites. In Proceedings of the WWW, pages 639–648, 2007.
[34] APWG: Phishing Scams by Targeted Company. http://www.millersmiles.co.uk/scams.php.
[35] Firefox 2 Phishing Protection Effectiveness Testing. http://www.mozilla.org/security/phishing-test.html.
[36] Firefox Phishing Protection. http://www.mozilla.com/en-US/firefox/phishing-protection/.
[37] Gone Phishing: Evaluating Anti-Phishing Tools for Windows. http://www.3sharp.com/projects/antiphishing/gone-phishing.pdf.
[38] Inaccessibility of CAPTCHA. http://www.w3.org/TR/turingtest/.
[39] Know your Enemy: Phishing. http://www.honeynet.org/papers/phishing/.
[40] Microsoft Phishing Filter. http://www.microsoft.com/protect/products/yourself/.
[41] PhishTank. http://www.phishtank.com/.