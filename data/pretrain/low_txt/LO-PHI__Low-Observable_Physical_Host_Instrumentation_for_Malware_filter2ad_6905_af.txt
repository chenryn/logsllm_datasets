### Debugging Technologies in Malware Analysis

Debugging technologies, when applied to malware analysis, can provide high-fidelity data while maintaining the necessary transparency. We plan to further explore these techniques and integrate any valuable developments into our framework.

In this work, we focused on system-level analysis using Volatility, which includes modules such as process lists, services, and sockets. While these modules are sufficient for the experiments described in this paper, expanding the scope to include introspection of individual processes' memory spaces (e.g., stack, heap, call trace) could be invaluable for analyzing advanced malware.

### Future Directions

LO-PHI currently employs the lowest level of instrumentation that we are aware of. We believe that continuing to push this boundary will be critical for analyzing more sophisticated future malware. Our capabilities in disk, memory, and CPU introspection position us well to investigate malware that attempts to infect the BIOS or peripherals of a System Under Test (SUT) for persistence. We plan to continue developing these capabilities.

### Conclusion

We introduced LO-PHI, a novel framework capable of instrumenting physical and virtual machines without requiring any software on the system, using a set of sensors and actuators. Additionally, we developed a supporting framework that automates the dynamic analysis of arbitrary binaries by introspecting into memory, disk, and network activity, reconstructing the semantic operations, and outputting them as concise events (e.g., process creation, file write).

We demonstrated that the sensors used to collect the necessary data produce minimal artifacts, enabling LO-PHI to analyze particularly sophisticated malware samples with relative ease. As malware continues to evolve and evade detection, we expect hardware-based analysis frameworks to become increasingly important. This work highlights the value of physical-machine introspection and instrumentation, as well as the importance of forensic-based malware analysis. We have shown that LO-PHI provides analytical capabilities that are not available with existing tools. To further advance the state of the art in malware analysis, we plan to open-source the project and engage the community.

### Acknowledgments

We would like to thank Brendon Chetwynd for his hardware development efforts and general guidance; Charles V. Wright for his invaluable mentorship, insights, and leadership in the early phases of this work; Joshua Hodosh and Ryan Whelan for their contributions to our memory introspection capabilities and early proofs-of-concept; and finally Lee Rossey, Doug Stetson, and John Wilkinson for their oversight and support throughout.

This work was sponsored by the Assistant Secretary of Defense for Research and Engineering under Air Force Contract #FA8721-05-C-0002. Opinions, interpretations, conclusions, and recommendations are those of the authors and are not necessarily endorsed by the United States Government.

### References

[1] "Iozone filesystem benchmark," http://www.iozone.org/.
[2] "libvirt: The Virtualization API," http://libvirt.org/.
[3] "OllyDbg," www.ollydbg.de.
[4] "Windbg," www.windbg.org.
[5] "An overview of exploit packs," http://contagiodump.blogspot.com/2010/06/overview-of-exploit-packs-update.html, May 2015.
[6] Altera Corporation, "PCI Express High Performance Reference Design," http://www.altera.com/literature/an/an456.pdf, October 2015.
[7] Anubis, "Analyzing Unknown Binaries," http://anubis.iseclab.org.
[8] D. Aumaitre and C. Devine, "Subverting windows 7 x64 kernel with DMA attacks," HITBSecConf 2010 Amsterdam, vol. 29, 2010.
[9] M. Auty, A. Case, M. Cohen, B. Dolan-Gavitt, M. H. Ligh, J. Levy, and A. Walters, "Volatility Framework - Volatile memory extraction utility framework," http://www.volatilityfoundation.org/.
[10] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky, "Hypersentry: Enabling stealthy in-context measurement of hypervisor integrity," in Proceedings of the 17th ACM conference on Computer and communications security (CCS). ACM, 2010, pp. 38–49.
[11] S. Bahram, X. Jiang, Z. Wang, M. Grace, J. Li, D. Srinivasan, J. Rhee, and D. Xu, "DKSM: Subverting virtual machine introspection for fun and profit," in Proceedings of the 29th Symposium on Reliable Distributed Systems (SRDS). IEEE, 2010, pp. 82–91.
[12] A. Baliga, V. Ganapathy, and L. Iftode, "Automatic inference and enforcement of kernel data structure invariants," in Proceedings of the 24th Annual Computer Security Applications Conference (ACSAC). IEEE, 2008, pp. 77–86.
[13] D. Balzarotti, M. Cova, C. Karlberger, E. Kirda, C. Kruegel, and G. Vigna, "Efficient detection of split personalities in malware." in In Proceedings of the 17th Annual Network & Distributed System Security Conference (NDSS). The Internet Society, 2010.
[14] F. Bellard, "Qemu, a fast and portable dynamic translator." in USENIX Annual Technical Conference, FREENIX Track, 2005, pp. 41–46.
[15] B. Blunden, The Rootkit Arsenal, 2nd ed. Jones and Barlett Learning, 2013.
[16] J. Bowling, "Clonezilla: build, clone, repeat," Linux journal, vol. 2011, no. 201, p. 6, 2011.
[17] D. Bruening, Q. Zhao, and S. Amarasinghe, "Transparent Dynamic Instrumentation," in Proceedings of the 8th Conference on Virtual Execution Environments (VEE). ACM SIGPLAN/SIGOPS, 2012.
[18] B. Carrier, "The Sleuth Kit," http://www.sleuthkit.org/.
[19] B. D. Carrier and J. Grand, "A hardware-based memory acquisition procedure for digital investigations," Digital Investigation, vol. 1, no. 1, pp. 50–60, 2004.
[20] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario, "Towards an understanding of anti-virtualization and anti-debugging behavior in modern malware," in Proceedings of the 38th annual International Conference on Dependable Systems and Networks (DSN). IEEE, 2008, pp. 177–186.
[21] M. Cohen, D. Bilby, and G. Caronni, "Distributed forensics and incident response in the enterprise," Digital Investigation, vol. 8, pp. S101–S110, 2011.
[22] M. Cohen and J. Metz, "PyTSK," https://github.com/py4n6/pytsk.
[23] B. Dees, "Native command queuing-advanced performance in desktop storage," Potentials, IEEE, vol. 24, no. 4, pp. 4–7, 2005.
[24] Z. Deng, X. Zhang, and D. Xu, "SPIDER: Stealthy Binary Program Instrumentation and Debugging Via Hardware Virtualization," in Proceedings of the 29th Annual Computer Security Applications Conference (ACSAC). ACM, 2013, pp. 289–298.
[25] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, "Ether: Malware Analysis via Hardware Virtualization Extensions," in Proceedings of the 15th Annual Conference on Computer and Communications Security (CCS). ACM, 2008.
[26] B. Dolan-Gavitt, T. Leek, J. Hodosh, and W. Lee, "Tappan Zee (North) Bridge: Mining Memory Accesses for Introspection," in Proceedings of the 20th conference on Computer and communications security (CCS). ACM, 2013, pp. 839–850.
[27] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Griffin, and W. Lee, "Virtuoso: Narrowing the semantic gap in virtual machine introspection," in Proceedings of the 32nd Symposium on Security and Privacy (Oakland). IEEE, 2011, pp. 297–312.
[28] M. Dornseif, "0wned by an iPod," Presentation, PacSec, 2004.
[29] L. Duflot, Y.-A. Perez, G. Valadon, and O. Levillain, "Can you still trust your network card," CanSecWest/core10, pp. 24–26, 2010.
[30] A. Fattori, R. Paleari, L. Martignoni, and M. Monga, "Dynamic and Transparent Analysis of Commodity Production Systems," in Proceedings of the 25th International Conference on Automated Software Engineering (ASE’10). IEEE/ACM, 2010.
[31] P. Ferrie, "Attacks on more virtual machine emulators," Symantec Technology Exchange, 2007.
[32] J. FitzPatrick and M. Crabill, "NSA Playset: PCIe," in DEF CON 22, 2014.
[33] Y. Fu and Z. Lin, "Space traveling across VM: Automatically bridging the semantic gap in virtual machine introspection via online kernel data redirection," in In Proceedings of the 33rd Annual Symposium on Security and Privacy (Oakland). IEEE, 2012, pp. 586–600.
[34] T. Garfinkel, "Traps and pitfalls: Practical problems in system call interposition based security tools." in In Proceedings of the 10th Annual Network and Distributed System Security Symposium (NDSS), vol. 3. The Internet Society, 2003, pp. 163–176.
[35] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh, "Terra: A virtual machine-based platform for trusted computing," ACM SIGOPS Operating Systems Review, vol. 37, no. 5, pp. 193–206, 2003.
[36] C. Guarnieri, A. Tanasi, J. Bremer, and M. Schloesser, "The Cuckoo Sandbox: Automated malware analysis," www.cuckoosandbox.org/.
[37] I. Habib, "Virtualization with KVM," Linux Journal, vol. 2008, no. 166, p. 8, 2008.
[38] N. A. Quynh and K. Suzaki, "Virt-ICE: Next-generation Debugger for Malware Analysis," in Black Hat USA, 2010.
[39] B. Hay and K. Nance, "Forensics examination of volatile system data using virtual introspection," ACM SIGOPS Operating Systems Review, vol. 42, no. 3, pp. 74–82, 2008.
[40] J. Heasman, "Implementing and detecting a PCI rootkit," Retrieved February, vol. 20, no. 2007, p. 3, 2006.
[41] IDA Pro, www.hex-rays.com/products/ida/.
[42] B. Jain, M. B. Baig, D. Zhang, D. E. Porter, and R. Sion, "SOK: Introspections on trust and the semantic gap," in Proceedings of the 35th Symposium on Security and Privacy (Oakland). IEEE, 2014, pp. 605–620.
[43] X. Jiang, X. Wang, and D. Xu, "Stealthy malware detection through VMM-based out-of-the-box semantic view reconstruction," in Proceedings of the 14th ACM conference on Computer and communications security (CCS). ACM, 2007, pp. 128–138.
[44] D. Kirat, G. Vigna, and C. Kruegel, "BareBox: Efficient Malware Analysis on Bare-metal," in Proceedings of the 27th Annual Computer Security Applications Conference (ACSAC). ACM, 2011.
[45] D. Kirat, G. Vigna, and C. Kruegel, "BareCloud: Bare-metal analysis-based evasive malware detection," in Proceedings of the 23rd USENIX conference on Security Symposium (SEC’14). USENIX Association, Berkeley, CA, USA, 2014, pp. 287–301.
[46] S. Krishnan, K. Z. Snow, and F. Monrose, "Trail of bytes: efficient support for forensic analysis," in Proceedings of the 17th ACM conference on Computer and communications security (CCS). ACM, 2010, pp. 50–60.
[47] E. Ladakis, L. Koromilas, G. Vasiliadis, M. Polychronakis, and S. Ioannidis, "You can type, but you can’t hide: A stealthy GPU-based keylogger," in Proceedings of the 6th European Workshop on System Security (EuroSec), 2013.
[48] T. K. Lengyel, J. Neumann, S. Maresca, B. D. Payne, and A. Kiayias, "Virtual machine introspection in a hybrid honeypot architecture." in In Proceedings of the 5th Workshop on Cyber Security Experimentation and Test (CSET). USENIX, 2012.
[49] Z. Lin, J. Rhee, C. Wu, X. Zhang, and D. Xu, "DimSum: Discovering semantic data of interest from un-mappable memory with confidence," in Proceedings of the 19th Annual Network and Distributed System Security Symposium (NDSS). The Internet Society, 2012.
[50] M. Lindorfer, C. Kolbitsch, and P. M. Comparetti, "Detecting environment-sensitive malware," in Proceedings of the 14th International Symposium on Recent Advances in Intrusion Detection (RAID). Springer, 2011, pp. 338–357.
[51] J. Mankin and D. Kaeli, "Dione: A flexible disk monitoring and analysis framework," in Proceedings of the 15th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID). Springer, 2012, pp. 127–146.
[52] A. Martin, "Firewire memory dump of a Windows XP computer: a forensic approach," Black Hat DC, 2007.
[53] J. Molina and W. Arbaugh, "Using independent auditors as intrusion detection systems," in In Proceedings of the 4th International Conference on Information and Communications Security (ICICS). Springer, 2002, pp. 291–302.
[54] H. Moon, H. Lee, J. Lee, K. Kim, Y. Paek, and B. B. Kang, "Vigilare: toward snoop-based kernel integrity monitor," in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 28–37.
[55] A. Ortega, "Paranoid Fish," http://github.com/a0rtega/pafish.
[56] B. D. Payne, "Libvmi: Simplified virtual machine introspection," https://github.com/bdpayne/libvmi.
[57] N. L. Petroni Jr, T. Fraser, J. Molina, and W. A. Arbaugh, "Copilot-a coprocessor-based kernel runtime integrity monitor." in In Proceedings of the 13th Security Symposium (SEC). USENIX, 2004, pp. 179–194.
[58] D. Quist and V. Smith, "Detecting the presence of virtual machines using the local data table," Offensive Computing, 2006.
[59] T. Raffetseder, C. Kruegel, and E. Kirda, "Detecting System Emulators," in Information Security. Springer, 2007.
[60] J. Rutkowska, "Red Pill," http://www.ouah.org/Red_Pill.html.
[61] J. Rutkowska, "Beyond the CPU: Defeating hardware-based RAM acquisition," Proceedings of BlackHat DC 2007, 2007.
[62] B. Schatz, "Bodysnatcher: Towards reliable volatile memory acquisition by software," Digital Investigation, vol. 4, pp. 126–134, 2007.
[63] K. Z. Snow, S. Krishnan, F. Monrose, and N. Provos, "SHELLOS: Enabling Fast Detection and Forensic Analysis of Code Injection Attacks," in In Proceedings of the 20th Security Symposium (SEC). USENIX, 2011.
[64] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, "BitBlaze: A New Approach to Computer Security via Binary Analysis," in Proceedings of the 4th International Conference on Information Systems Security (ICISS). Springer, 2008.
[65] D. Srinivasan, Z. Wang, X. Jiang, and D. Xu, "Process out-grafting: an efficient out-of-VM approach for fine-grained process execution monitoring," in Proceedings of the 18th ACM conference on Computer and communications security (CCS). ACM, 2011, pp. 363–374.
[66] P. Stewin, "A primitive for revealing stealthy peripheral-based attacks on the computing platform’s main memory," in Proceedings of the 13th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID). Springer, 2013, pp. 1–20.
[67] P. Stewin and I. Bystrov, "Understanding DMA malware," in In Proceedings of the 10th Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA). Springer, 2013, pp. 21–41.
[68] J. Stüttgen and M. Cohen, "Anti-forensic resilient memory acquisition," Digital Investigation, vol. 10, pp. S105–S115, 2013.
[69] A. Vasudevan and R. Yerraballi, "Stealth Breakpoints," in Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC’05), 2005.
[70] J. Wang, A. Stavrou, and A. Ghosh, "HyperCheck: A hardware-assisted integrity monitor," in In Proceedings of the 13th International Symposium on Recent Advances in Intrusion Detection (RAID). Springer, 2010, pp. 158–177.
[71] J. Wang, K. Sun, and A. Stavrou, "A dependability analysis of hardware-assisted polling integrity checking systems," in In Proceedings of the 42nd Annual International Conference on Dependable Systems and Networks (DSN). IEEE, 2011, pp. 1–5.
[72] J. Wang, F. Zhang, K. Sun, and A. Stavrou, "Firmware-assisted memory acquisition and analysis tools for digital forensics," in In Proceedings of the 6th International Workshop on Systematic Approaches to Digital Forensic Engineering (SADFE). IEEE, 2012, pp. 1–12.
[73] C. Willems, R. Hund, A. Fobian, D. Felsch, T. Holz, and A. Vasudevan, "Down to the bare metal: Using processor features for binary analysis," in Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC). ACM, 2012, pp. 189–198.
[74] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin, "V2E: Combining Hardware Virtualization and Software Emulation for Transparent and Extensible Malware Analysis," in Proceedings of the 8th SIGPLAN/SIGOPS Conference on Virtual Execution Environments (VEE). ACM, 2012. [Online]. Available: http://doi.acm.org/10.1145/2151024.2151053
[75] F. Zhang, K. Leach, K. Sun, and A. Stavrou, "Spectre: A dependable introspection framework via system management mode," in Dependable Systems and Networks (DSN), 2013 43rd Annual IEEE/IFIP International Conference on. IEEE, 2013, pp. 1–12.
[76] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer, "Secure coprocessor-based intrusion detection," in Proceedings of the 10th workshop on ACM SIGOPS European workshop. ACM, 2002, pp. 239–242.