### Optimized Text

#### Efficient Use of Inode Sizes and Reverse Lookup Table
Unused space can be utilized to store such data without increasing the inode sizes. If space is unavailable, the reverse lookup table can serve as an alternative, as it provides the same information. For each pathname component of a rule, the reverse lookup table requires 20 + N bytes: 16 bytes for the inode number, 2 bytes for the rule bitmask, and N + 2 bytes for a pathname component of length N. The non-existent names table contains one entry for every file being watched that does not currently exist. Each entry consumes 274 bytes: 16 bytes for the inode number, 2 bytes for the rule bitmask, and 256 bytes for the maximum supported pathname.

#### Example Usage and Storage Requirements
To illustrate how an administrator might use this system, we downloaded the open-source version of Tripwire [42]. This includes an example rule file for Linux, which, after expanding directories into lists of files, contains 4,730 rules. We examined a Red Hat Linux 6.1 [31] desktop machine to determine the number of watched files that actually exist on the hard drive. Of the 4,730 watched files, 4,689 existed on our example system. Using the data structure sizes mentioned above, the reverse lookup entries for the watched files consume 141 KB. Entries in the non-existent name table for the remaining 41 watched files consume 11 KB. In total, only 152 KB are needed for the storage IDS.

#### False Positives in Storage-Based Intrusion Detection
We have explored the false positive rate of storage-based intrusion detection through various methods.

To evaluate the file watch rules, we gathered two months of traces of all file system operations on a desktop machine in our group. We compared the files modified on this system with the watched file list from the open-source version of Tripwire. This revealed two distinct patterns where files were modified. Nightly, the user list (`/etc/passwd`) on the machine was overwritten by a central server. Most nights, it did not change, but the create and rename operations would have triggered an alert. Additionally, multiple binaries in the system were replaced over time by the administrative upgrade process. In only one case was a configuration file on the system changed by a local user.

For modifications arising from explicit administrative actions, a storage IDS can provide an added benefit. If an administrator pre-informs the admin console of updated files before they are distributed to machines, the IDS can verify that the desired updates occur correctly. Specifically, the admin console can read the new contents via the admin channel and verify that they are as intended. If so, the update is known to have succeeded, and the alert can be suppressed.

We also conducted two smaller studies. First, we evaluated our "hidden filename" rules by examining the entire filesystems of several desktops and servers; we found no uses of any of them, including the `.` or `..` followed by any number of spaces. Second, we evaluated our "inode time reversal" rules by examining lengthy traces of NFS activity from our environment and from two Harvard environments [8]; we found a significant number of false positives, primarily caused by unpacking archives with utilities like tar. Combined with the lack of time reversal in any of the toolkits, the use of this rule may be inadvisable.

#### Additional Related Work
Much related work has been discussed throughout the paper. For emphasis, we note that there have been many intrusion detection systems focused on host OS activity and network communication; Axelsson [1] recently surveyed the state-of-the-art. The most closely related tool, Tripwire [18], was used as an initial template for our prototype's file modification detection ruleset.

Our work is part of a recent line of research exploiting physical [12, 44] and virtual [4] protection boundaries to detect intrusions into system software. Notably, Garfinkel et al. [13] explore the utility of an IDS embedded in a virtual machine monitor (VMM), which can inspect machine state while being independent of most host software. Storage-based intrusion detection rules could be embedded in a VMM's storage module, rather than in a physical storage device, to identify suspicious storage activity.

Perhaps the most closely related work is the original proposal for self-securing storage [38], which argued for storage-embedded support for intrusion survival. Self-securing storage retains every version of all data and a log of all requests for a period called the detection window. For intrusions detected within this window, security administrators have a wealth of information for post-intrusion diagnosis and recovery.

Such versioning and auditing complement storage-based intrusion detection in several ways. First, when creating rules about storage activity for use in detection, administrators can use the latest audit log and version history to test new rules for false alarms. Second, the audit log could simplify the implementation of rules looking for patterns of requests. Third, administrators can use the history to investigate alerts of suspicious behavior (i.e., to check for supporting evidence within the history). Fourth, since the history is retained, a storage IDS can delay checks until the device is idle, allowing the device to avoid performance penalties for expensive checks by accepting a potentially longer detection latency.

#### Conclusions and Future Work
A storage IDS watches system activity from a new viewpoint, immediately exposing some common intruder actions. Running on separate hardware, this functionality remains in place even when client OSes or user accounts are compromised. Our prototype storage IDS demonstrates both feasibility and efficiency within a file server. Analysis of real intrusion tools indicates that most would be immediately detected by a storage IDS. After adjusting for the presence of a storage IDS, intrusion tools will have to choose between exposing themselves to detection or being removed whenever the system reboots.

In continuing work, we are developing a prototype storage IDS embedded in a device exporting a block-based interface (SCSI). To implement the same rules as our augmented NFS server, such a device must be able to parse and traverse the on-disk metadata structures of the file system it holds. For example, knowing whether `/usr/sbin/sshd` has changed on disk requires knowing not only whether the corresponding data blocks have changed but also whether the inode still points to the same blocks and whether the name still translates to the same inode. We have developed this translation functionality for two popular file systems, Linux's ext2fs and FreeBSD's FFS. The additional complexity required is small (under 200 lines of C code for each), simple (under 3 days of programming effort each), and changes infrequently (about 5 years between incompatible changes to on-disk structures). The latter, in particular, indicates that device vendors can deploy firmware and expect useful lifetimes that match the hardware. Sivathanu et al. [37] have evaluated the costs and benefits of device-embedded FS knowledge more generally, finding that it is feasible and valuable.

Another ongoing direction is the exploration of less exact rules and their impact on detection and false positive rates. In particular, the potential of pattern matching rules and general anomaly detection for storage remains unknown.

#### Acknowledgments
We thank the members and companies of the PDL Consortium (including EMC, Hewlett-Packard, Hitachi, IBM, Intel, Microsoft, Network Appliance, Oracle, Panasas, Seagate, Sun, and Veritas) for their interest, insights, feedback, and support. We also thank IBM and Intel for hardware grants supporting our research efforts. This material is based on research sponsored by the Air Force Research Laboratory, under agreement number F49620-01-1-0433, and by DARPA/ITO’s OASIS program, under Air Force contract number F30602-99-2-0539-AFRL. Craig Soules was supported by a USENIX Fellowship. Garth Goodson was supported by an IBM Fellowship.

#### References
[1] S. Axelsson. Research in intrusion-detection systems: a survey. Technical report 98–17. Department of Computer Engineering, Chalmers University of Technology, December 1998.
[2] M. Bishop and M. Dilger. Checking for race conditions in file accesses. Computing Systems, 9(2):131–152, Spring 1996.
[3] M. Castro and B. Liskov. Proactive recovery in a Byzantine-fault-tolerant system. Symposium on Operating Systems Design and Implementation, pages 273–287. USENIX Association, 2000.
[4] P. M. Chen and B. D. Noble. When virtual is better than real. Hot Topics in Operating Systems, pages 133–138. IEEE Comput. Soc., 2001.
[5] B. Cheswick and S. Bellovin. Firewalls and Internet security: repelling the wily hacker. Addison-Wesley, Reading, Mass. and London, 1994.
[6] D. Denning. An intrusion-detection model. IEEE Transactions on Software Engineering, SE-13(2):222–232, February 1987.
[7] D. E. Denning. Information warfare and security. Addison-Wesley, 1999.
[8] D. Ellard, J. Ledlie, P. Malkani, and M. Seltzer. Passive NFS tracing of an email and research workload. Conference on File and Storage Technologies, pages 203–217. USENIX Association, 2003.
[9] D. Farmer. What are MACtimes? Dr. Dobb’s Journal, 25(10):68–74, October 2000.
[10] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. A sense of self for UNIX processes. IEEE Symposium on Security and Privacy, pages 120–128. IEEE, 1996.
[11] G. R. Ganger, G. Economou, and S. M. Bielski. Finding and Containing Enemies Within the Walls with Self-securing Network Interfaces. Carnegie Mellon University Technical Report CMU-CS-03-109. January 2003.
[12] G. R. Ganger and D. F. Nagle. Better security via smarter devices. Hot Topics in Operating Systems, pages 100–105. IEEE, 2001.
[13] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. NDSS. The Internet Society, 2003.
[14] H. Gobioff. Security for a high performance commodity storage subsystem. PhD thesis, published as TR CMU–CS–99–160. Carnegie-Mellon University, Pittsburgh, PA, July 1999.
[15] J. H. Howard, M. L. Kazar, S. G. Menees, D. A. Nichols, M. Satyanarayanan, R. N. Sidebotham, and M. J. West. Scale and performance in a distributed file system. ACM Transactions on Computer Systems, 6(1):51–81, February 1988.
[16] Y. N. Huang, C. M. R. Kintala, L. Bernstein, and Y. M. Wang. Components for software fault-tolerance and rejuvenation. AT&T Bell Laboratories Technical Journal, 75(2):29–37, March-April 1996.
[17] J. Katcher. PostMark: a new file system benchmark. Technical report TR3022. Network Appliance, October 1997.
[18] G. H. Kim and E. H. Spafford. The design and implementation of Tripwire: a file system integrity checker. Conference on Computer and Communications Security, pages 18–29. ACM, 1994.
[19] C. Ko, M. Ruschitzka, and K. Levitt. Execution monitoring of security-critical programs in distributed systems: a specification-based approach. IEEE Symposium on Security and Privacy, pages 175–187. IEEE, 1997.
[20] P. Kumar and M. Satyanarayanan. Flexible and safe resolution of file conflicts. USENIX Annual Technical Conference, pages 95–106. USENIX Association, 1995.
[21] R. Lemos. Net News, 5 August 2002. ZDNet. http://zdnet.com.com/2100-1105-948404.html.
[22] P. Liu, S. Jajodia, and C. D. McCollum. Intrusion confinement by isolation in information systems. IFIP Working Conference on Database Security, pages 3–18. IFIP, 2000.
[23] T. F. Lunt and R. Jagannathan. A prototype real-time intrusion-detection expert system. IEEE Symposium on Security and Privacy, pages 59–66. IEEE, 1988.
[24] McAfee NetShield for Celerra. EMC Corporation, August 2002. http://www.emc.com/pdf/partnersalliances/einfo/McAfee_netshield.pdf.
[25] NFR Security. http://www.nfr.net/, August 2002.
[26] Packet Storm Security. Packet Storm, 26 January 2003. http://www.packetstormsecurity.org/.
[27] V. Paxson. Bro: a system for detecting network intruders in real-time. USENIX Security Symposium, pages 31–51. USENIX Association, 1998.
[28] J. Phillips. Antivirus scanning best practices guide. Technical report 3107. Network Appliance Inc. http://www.netapp.com/tech_library/3107.html.
[29] P. A. Porras and P. G. Neumann. EMERALD: event monitoring enabling responses to anomalous live disturbances. National Information Systems Security Conference, pages 353–365, 1997.
[30] W. Purczynski. GNU fileutils – recursive directory removal race condition. BugTraq mailing list, 11 March 2002.
[31] Red Hat Linux 6.1, 4 March 1999. ftp://ftp.redhat.com/pub/redhat/linux/6.1/.
[32] M. Rosenblum and J. K. Ousterhout. The design and implementation of a log-structured file system. ACM Transactions on Computer Systems, 10(1):26–52. ACM Press, February 1992.
[33] V. Samar and R. J. Schemers III. Unified login with pluggable authentication modules (PAM). Open Software Foundation RFC 86.0. Open Software Foundation, October 1995.
[34] J. Scambray, S. McClure, and G. Kurtz. Hacking exposed: network security secrets & solutions. Osborne/McGraw-Hill, 2001.
[35] B. Schneier and J. Kelsey. Secure audit logs to support computer forensics. ACM Transactions on Information and System Security, 2(2):159–176. ACM, May 1999.
[36] M. I. Seltzer, G. R. Ganger, M. K. McKusick, K. A. Smith, C. A. N. Soules, and C. A. Stein. Journaling versus Soft Updates: Asynchronous Meta-data Protection in File Systems. USENIX Annual Technical Conference, 2000.
[37] M. Sivathanu, V. Prabhakaran, F. I. Popovici, T. E. Denehy, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Semantically-smart disk systems. Conference on File and Storage Technologies, pages 73–89. USENIX Association, 2003.
[38] J. D. Strunk, G. R. Goodson, M. L. Scheinholtz, C. A. N. Soules, and G. R. Ganger. Self-securing storage: protecting data in compromised systems. Symposium on Operating Systems Design and Implementation, pages 165–180. USENIX Association, 2000.
[39] J. Sugerman, G. Venkitachalam, and B.-H. Lim. Virtualizing I/O Devices on VMware Workstation’s Hosted Virtual Machine Monitor. USENIX Annual Technical Conference, pages 1–14. USENIX Association, 2001.
[40] Sun Microsystems. NFS: network file system protocol specification, RFC–1094, March 1989.
[41] D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. Managing update conflicts in Bayou, a weakly connected replicated storage system. ACM Symposium on Operating System Principles. Published as Operating Systems Review, 29(5), 1995.
[42] Tripwire Open Source 2.3.1, August 2002. http://ftp4.sf.net/sourceforge/tripwire/tripwire-2.3.1-2.tar.gz.
[43] K. Vaidyanathan, R. E. Harper, S. W. Hunter, and K. S. Trivedi. Analysis and implementation of software rejuvenation in cluster systems. ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems. Published as Performance Evaluation Review, 29(1):62–71. ACM Press, 2002.
[44] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer. Secure Coprocessor-based Intrusion Detection. ACM SIGOPS European Workshop. ACM, 2002.