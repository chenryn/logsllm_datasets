### Resisting Revocation Attacks

One potential vulnerability in distributed node revocation is that each node can cast a vote against other nodes. Given the total number of nodes \( n = m^p \), this could represent a significant fraction of the node population. Consequently, only a fixed number of compromised nodes need to go undetected to revoke a substantial portion of the network, regardless of its size.

To prevent widespread release of revocation keys by compromised nodes, we require that only nodes with direct communication established with a specific node \( B \) have the ability to revoke \( B \).

We achieve this by distributing the revocation keys to the voting members of \( B \) in a deactivated form. Specifically, each voting member \( i \) stores its revocation key for \( B \), \( k_{Bi} \), masked (XORed) with a secret \( S_{Bi} \). This masked key will not hash to the correct verifying value and is thus useless for voting. Node \( B \) knows all the activation secrets \( S_{Bi} \) for \( 1 \leq i \leq m \). During the key discovery and setup phase, if node \( i \) wishes to complete key setup with node \( B \), it requests \( B \) to transmit its activation secret \( S_{Bi} \) (and vice versa). Once node \( i \) has received \( S_{Bi} \), it un-masks \( k_{Bi} \) using \( S_{Bi} \) and verifies the correctness of the unmasking secret by performing vote verification on the unmasked \( k_{Bi} \). Storing \( m \) masking factors on node \( B \) requires only \( O(m) \) space, which is insignificant compared to the \( O(m \log m) \) space needed for the voting and verification apparatus.

This policy of need-to-know key activation ensures that most recovered revocation keys through node capture are in an unusable masked state. To use these revocation keys to revoke some node \( A \), the adversary must now physically communicate with \( A \) and complete key setup for up to \( t \) new connections.

### Limiting Adversarial Actions

By implementing schemes to limit node replication and node generation, the adversary's ability to attempt sabotage through this method is significantly reduced. Generally, resistance against node replication imposes an upper limit \( d_{\text{max}} \) on the degree of a node. Once a malicious node has collected \( d_{\text{max}} \) activation values for its revocation keys, further requests for activation values will be rejected by other nodes, as it will be detected that this node is attempting to exceed its maximum allowed degree. Hence, the number of revocation keys issuable by each compromised node is limited to \( d_{\text{max}} \).

Even without assuming the implementation of schemes for resisting node replication, the requirement that the adversary establish physical (1-hop) communication with a target node is a strong deterrent to mounting a DoS attack via revocation. For example, if the adversary's goal is disruption rather than subversion of the network, and they have the ability to physically communicate with the target nodes, a radio jamming attack is likely cheaper and more effective than a revocation attack.

The vote-activation mechanism described above limits the damage an adversary can inflict by broadcasting node revocations. While it does not completely eliminate the potential for such an attack, it makes it less economically viable for an attacker to mount a revocation attack.

### Resistance Against Node Replication and Generation

In the event that node capture goes undetected by the network, it is essential to ensure the network is resistant to the addition of infiltrator nodes derived from captured nodes, especially to prevent revocation attacks. To limit node replication, the degree of any node can be restricted. The degree of a node in the network is approximately binomially distributed with parameters \( (m, \frac{d}{m}) \), having an expectation of \( d \) and variance close to \( d \). Therefore, very few nodes should have a degree \( \geq 3d \). This implies that we can limit the degree of nodes to \( d_{\text{max}} \), where \( d_{\text{max}} \) is a small multiple of \( d \), without disrupting network connectivity.

The expected degree \( d \) increases slowly with graph size \( n \). For example, \( d = O(\log n) \). Thus, \( d_{\text{max}} \) will generally be small compared to the total potential connectivity \( m \).

Since the random-pairwise scheme allows us to authenticate node identity, a method for node-degree counting can be implemented with the public-vote counting scheme. Each node contains a voting key and a way to verify valid voting keys. Each time a node \( A \) forms a connection with node \( B \), \( A \) broadcasts its voting key for \( B \) and vice versa. Each node can track the degree of all \( m \) nodes with which it shares pairwise keys and refuse to form new connections if the degree becomes too large.

One concern is the need to memorize \( d_{\text{max}} \) votes instead of a small number \( t \). Each vote still requires only \( \log m \) bits to store, as we only need to store its unique path in the Merkle tree. Directly storing \( d_{\text{max}} \) votes may still be feasible. For applications with a relatively large \( d_{\text{max}} \), an \( m \)-bit bit field is sufficient to record all \( m \) votes, as each bit could represent a unique path in the Merkle tree. Furthermore, since only a rough bound for the number of votes heard is needed, the bit field representation can be compressed using lossy sparse-storage directory mechanisms such as Coarse Vector [13] and Tristate [1] protocols.

### Evaluation of the Random Keys Scheme

#### Perfect Resilience Against Node Capture
Since each pairwise key is unique, capturing any node does not allow the adversary to decrypt additional communications in the network beyond those directly involving the compromised node. This is represented in Figure 2 as the line \( y=0 \).

#### Maximum Supported Network Size
The limited global payoff requirement cannot be used to compute the maximum network size for the random pairwise keys scheme because global information revealed from local node capture is always zero. Instead, the maximum network size is fixed at design time by Equation 6.

Figure 3 shows the maximum supportable network size for a random pairwise key scheme without distributed node revocation or multihop range extension. Figure 6 reflects the network sizes for the random pairwise scheme with all the features mentioned, including range extension. It can be seen that with a range extension of just two hops, the network sizes are comparable to other schemes. Additionally, the \( O(\log m) \) cost of including distributed node revocation does not significantly impact the maximum network size.

Given that the random pairwise scheme has perfect resilience against node capture and authentication features, this is a highly desirable result.

#### Resistance to Revocation Attack
If resistance against node replication is implemented, the theoretical number of nodes an attacker can revoke per successful node captured is \( \frac{d_{\text{max}}}{t} \), which is \( kd \) where \( k \) is a small constant. Since any captured node will have an expected \( d \) links, the number of nodes lost through revocations due to a captured node is a small constant factor of the links directly lost through the compromise of the node. As \( d \) grows only slowly with \( n \), the attacker is unable to target a significant portion of the network for revocation if only a small number of nodes are compromised. While a revocation attack amplifies the disruptive power of the attacker to some extent, it is unlikely that an attacker will find it economically attractive to obtain full control of a sensor node only to expend this successful intrusion in revoking a small constant number of other nodes. Physical destruction of each node is probably more economical if denial of service is the primary goal. This is especially true considering that they must explicitly establish communications with every node they wish to revoke.

### Related Work

We first review work in establishing shared keys in mobile computing, then review work in sensor network key establishment.

Tatebayashi, Matsuzaki, and Newman consider key distribution for resource-starved devices in a mobile environment [23]. Park et al. [18] point out weaknesses and improvements. Beller and Yacobi further develop key agreement and authentication protocols [4]. Boyd and Mathuria survey the previous work on key distribution and authentication for resource-starved devices in mobile environments [6]. Most of these approaches rely on asymmetric cryptography. Bergstrom, Driscoll, and Kimball consider the problem of secure remote control of resource-starved devices in a home [5].

Stajano and Anderson discuss the issues of bootstrapping security devices [22]. Their solution requires physical contact of the new device with a master device to imprint trusted and secret information.

Carman, Kruus, and Matt analyze a wide variety of approaches for key agreement and key distribution in sensor networks [8]. They analyze the overhead of these protocols on various hardware platforms.

Wong and Chan propose a key exchange for low-power computing devices [24]. However, their approach assumes an asymmetry in computation power, with one participant being a more powerful server.

Perrig et al. propose SPINS, a security architecture specifically designed for sensor networks [19]. In SPINS, each sensor node shares a secret key with the base station. To establish a new key, two nodes use the base station as a trusted third party to set up the new key.

We review the related work by Eschenauer and Gligor [10] in Section 4. Anderson and Perrig propose a key establishment mechanism for sensor networks based on initially exchanging keys in the clear [2]. Their key infection approach is secure as long as an attacker arrives after key exchange and did not eavesdrop on the exchange.

Zhou and Haas propose to secure ad hoc networks using asymmetric cryptography [25]. Kong et al. propose localized public-key infrastructure mechanisms based on secret sharing and multiparty computation techniques [14]. Such approaches are expensive in terms of computation and communication overhead.

Broadcast encryption by Fiat and Naor [11] is another model for distributing a shared key to a group of receivers. However, this model assumes a single sender and that the sender knows the key pools of all receivers. Subsequent papers further develop this approach [3, 12, 15].

Efficient bootstrapping of secure keys is critical for secure sensor network applications. Local processing of sensor data requires secure node-to-node communication. We present three efficient random key predistribution schemes for solving the security bootstrapping problem in resource-constrained sensor networks.

Each of these three schemes represents a different trade-off in the design space of random key protocols. The choice of which scheme is best for a given application will depend on which trade-off is the most appealing.

The q-composite scheme achieves significantly improved security under small-scale attacks at the cost of greater vulnerability to large-scale attacks. This increases the attacker's cost of mounting an attack, as the option of harvesting a small number of keys to extract a random sample of the readings in the entire network is no longer appealing, thus forcing the attacker to perform a large-scale node capture attack.

The (2-hop) multipath reinforcement scheme improves security at the cost of network communication overhead. Since the expected number of common neighbors is proportional to \( \frac{1}{n'} \) (where \( n' \) is the expected number of neighboring nodes), this scheme performs best when the deployment density is sparse relative to the communication radius of the nodes. It also presents the best characteristics when the variation in deployment density is low (i.e., nodes are regularly dispersed).

The random pairwise scheme has the best security properties of the three schemes. It possesses perfect resilience against node capture attacks, supports node-based revocation, and resists node replication. These properties come with the trade-off that the maximum supported network size is not as large as the other schemes.

### Acknowledgments

We are very grateful to Virgil Gligor for his helpful discussions and suggestions that improved the paper. We are also grateful to Falk Herrmann for his feedback and discussions. Finally, we would like to thank the anonymous reviewers for their comments and suggestions.

### References

[1] Anant Agarwal, Richard Simoni, Mark Horowitz, and John Hennessy. An evaluation of directory schemes for cache coherence. In Proceedings of the 15th Annual International Symposium on Computer Architecture, pages 280–289, 1988.

[2] Ross Anderson and Adrian Perrig. Key infection: Smart trust for smart dust. Unpublished Manuscript, November 2001.

[3] Dirk Balfanz, Drew Dean, Matt Franklin, Sara Miner, and Jessica Staddon. Self-healing key distribution with revocation. In Proceedings of the IEEE Symposium on Research in Security and Privacy, pages 241–257, May 2002.

[4] M. Beller and Y. Yacobi. Fully-fledged two-way public key authentication and key agreement for low-cost terminals. Electronics Letters, 29(11):999–1001, May 1993.

[5] Peter Bergstrom, Kevin Driscoll, and John Kimball. Making home automation communications secure. IEEE Computer, 34(10):50–56, Oct 2001.

[6] Colin Boyd and Anish Mathuria. Key establishment protocols for secure mobile communications: A selective survey. In Australasian Conference on Information Security and Privacy, pages 344–355, 1998.

[7] Michael Brown, Donny Cheung, Darrel Hankerson, Julio Lopez Hernandez, Michael Kirkup, and Alfred Menezes. PGP in constrained wireless devices. In 9th USENIX Security Symposium, August 2000.

[8] David W. Carman, Peter S. Kruus, and Brian J. Matt. Constraints and approaches for distributed sensor network security. NAI Labs Technical Report #00-010, September 2000.

[9] W. Diffie and M. E. Hellman. New directions in cryptography. IEEE Trans. Inform. Theory, IT-22:644–654, November 1976.

[10] Laurent Eschenauer and Virgil D. Gligor. A key-management scheme for distributed sensor networks. In Proceedings of the 9th ACM Conference on Computer and Communication Security, pages 41–47, November 2002.

[11] Amos Fiat and Moni Naor. Broadcast encryption. In Advances in Cryptology – CRYPTO ’93, volume 773 of Lecture Notes in Computer Science, 1994.

[12] J. Garay, J. Staddon, and A. Wool. Long-lived broadcast encryption. In Advances in Cryptology — CRYPTO ’2000, pages 333–352, 2000.

[13] Anoop Gupta, Wolf-Dietrich Weber, and Todd Mowry. Reducing memory and traffic requirements for scalable directory-based cache coherence schemes. In Proceedings of the 1990 International Conference on Parallel Processing (Vol. I Architecture), pages 312–321, 1990.

[14] Jiejun Kong, Petros Zerfos, Haiyun Luo, Songwu Lu, and Lixia Zhang. Providing robust and ubiquitous security support for mobile ad-hoc networks. In 9th International Conference on Network Protocols (ICNP’01), 2001.

[15] M. Luby and J. Staddon. Combinatorial bounds for broadcast encryption. In Advances in Cryptology — EUROCRYPT ’98, pages 512–526, 1998.

[16] R. Merkle. Secure communication over insecure channels. Communications of the ACM, 21(4):294–299, 1978.

[17] Ralph Merkle. Protocols for public key cryptosystems. In 1980 IEEE Symposium on Security and Privacy, 1980.

[18] C. Park, K. Kurosawa, T. Okamoto, and S. Tsujii. On key distribution and authentication in mobile radio networks. In Advances in Cryptology - EuroCrypt ’93, pages 461–465, 1993. Lecture Notes in Computer Science Volume 765.

[19] Adrian Perrig, Robert Szewczyk, Victor Wen, David Culler, and J. D. Tygar. SPINS: Security protocols for sensor networks. In Seventh Annual ACM International Conference on Mobile Computing and Networks (MobiCom 2001), July 2001.

[20] Ronald L. Rivest, Adi Shamir, and Leonard M. Adleman. A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM, 21(2):120–126, 1978.

[21] J. Spencer. The Strange Logic of Random Graphs. Number 22 in Algorithms and Combinatorics. 2000.

[22] Frank Stajano and Ross Anderson. The resurrecting duckling: Security issues for ad-hoc wireless networks. In Security Protocols, 7th International Workshop, 1999.

[23] M. Tatebayashi, N. Matsuzaki, and D. B. Jr. Newman. Key distribution protocol for digital mobile communication systems. In Advances in Cryptology - Crypto ’89, pages 324–334, 1989. Lecture Notes in Computer Science Volume 435.

[24] Duncan S. Wong and Agnes H. Chan. Efficient and mutually authenticated key exchange for low power computing devices. In Advances in Cryptology — ASIACRYPT ’2001, 2001.

[25] Lidong Zhou and Zygmunt J. Haas. Securing ad hoc networks. IEEE Network Magazine, 13(6):24–30, November/December 1999.