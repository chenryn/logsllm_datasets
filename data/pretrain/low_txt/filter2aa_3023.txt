# PacketFence: The Open Source NAC - A Two-Year Retrospective

## Presentation Plan
1. **Introduction to Network Access Control (NAC)**
2. **The Secret Sauce of PacketFence**
3. **Open Source Differentiation**
4. **Two Years as Lead Developer: The Good and the Bad**
5. **Future Roadmap for PacketFence**
6. **Community Engagement**
7. **About Me**

## What is Network Access Control (NAC)?
### NAC Elevator Pitch
- **NAC**: Network Access (or Admission) Control
  - **Authentication**: Maps usernames to IP or MAC addresses.
  - **Admission**: Allows, partially allows, or denies user or device access.
  - **Control**: Monitors for unauthorized activities such as outdated antivirus, patch levels, scanning corporate servers, and malware spread.

### Key Functions
- **User and Device Identification**: Know who is using your network.
- **Behavior Monitoring**: Ensure users and devices comply with security policies.
- **Remediation**: Helpdesk cost reduction by enabling self-service for users.
- **Guest Management**: Simplified guest access.
- **Asset/Inventory Management**: Centralized management of network assets.
- **Simplified Access Layer Configuration**: Reduce network management costs through centralized decision-making.

## The Secret Sauce
### Technology Stack
- **Programming Languages**: Mostly Perl, some PHP.
- **Design Principles**:
  - High-availability design.
  - Active-passive clustering.
  - Out-of-band operation.
  - Edge enforcement.
  - No agent required.
  - Web-based captive portal.
  - Comprehensive monitoring.

### Key Design Decisions
- **Out-of-Band Operation**:
  - Initial reliance on SNMP Traps (LinkUp/LinkDown, MAC Notification, Port-Security events).
  - Transition to RADIUS-based techniques (Wireless MAC-Authentication, 802.1X).
- **Edge Enforcement**:
  - SNMP Traps generate events, and PacketFence reacts by authorizing MACs or changing VLANs.
  - Use of SNMP, telnet, or SSH for vendor-specific configurations.
- **RADIUS and 802.1X**:
  - Key-value based protocol for AAA (Authentication, Authorization, Accounting).
  - Extensible Authentication Protocol (EAP) over RADIUS.
  - Actors: Supplicant (client), Authenticator (NAS), and Authentication Server (FreeRADIUS on PF Server).

### Captive Portal
- **Features**:
  - Various authentication mechanisms (LDAP, AD, RADIUS, Kerberos, Guests).
  - Redirection to the Internet after authentication.
  - Remediation information for isolated devices.
- **Implementation**:
  - DHCP and DNS blackhole.
  - SSL redirection.
  - WISPr support for Voice over IP (VoIP).

### Policy Checking and Monitoring
- **Tools**:
  - Nessus for client-side scanning.
  - Snort IDS for traffic monitoring and rule enforcement.
- **Quarantine**:
  - Separate VLAN for strong isolation.
  - Triggers based on operating system, browsers, MAC vendors, Nessus plugin IDs, and IDS rules.

## Open Source Advantage
- **Vendor Independence**: Supports a wide range of hardware brands.
- **Cost-Effective**: No proprietary pricing models.
- **Transparency**: Exposed technology stack reduces reliance on vendors.
- **Security**: Not solely based on obscurity.
- **Stack Familiarity**: Built on common Linux daemons and services.

## Two Years as Lead Developer
### Lessons Learned
- **Bypass Techniques**:
  - IP, MAC, and DHCP client spoofing.
  - User-Agent spoofing.
  - Per port exceptions and CDP vulnerabilities.
- **Wired 802.1X Bypass**:
  - Hub insertion between victim and switch.
  - Spoofing MAC addresses.
- **Supplicant Support**:
  - Variations in OS EAP support.
  - Proprietary supplicant quality and features.
- **Network Vendor Fragmentation**:
  - Inconsistent VLAN assignment and port-security implementations.
  - Firmware quality and regression issues.
- **Infrastructure Authentication**:
  - Challenges in user and admin adoption.
  - Importance of HTTPS and proper CA configuration.

### Challenges
- **SELinux Disabling**: Required for initial installation.
- **Short Release Cycles**: For a core infrastructure component.
- **Limited Code Contributions**: External contributors are scarce.
- **Platform Limitations**: Primarily CentOS/RHEL.

### Achievements
- **Development Process**:
  - Automated smoke tests and nightly packages.
  - Stable and feature branches.
  - Publicly visible development.
- **Usability Enhancements**:
  - Simplified documentation and installation.
  - Default VLAN management.
- **Enterprise Features**:
  - Web administration rights.
  - Routed environment support.
  - Guest workflow improvements.
- **Performance Gains**:
  - Significant improvements in MAC-Auth, 802.1X, and captive portal performance.
- **Technological Advancements**:
  - Web Services for network hardware management.
  - Tiered deployment architecture.
  - Cloud deployment on Amazon EC2.

## Future Roadmap
### Short-Term Goals
- **In-line Mode**: Support for legacy network hardware.
- **RADIUS Accounting and Bandwidth Monitoring**.
- **NAP/Statement of Health Checks**.
- **RADIUS CoA (RFC3576)**.
- **ACL/QoS Assignment**.
- **VPN Support**.
- **Debian/Ubuntu Support**.

### Long-Term Goals
- **Active-Active Clustering**.
- **nmap/OpenVAS Integration**.
- **Simplified Installation**.
- **Web Administration Interface Rewrite**.
- **Research Topics**:
  - IF-MAP support.
  - Multi-platform client-side agent.
  - Trusted Computing Group's Trusted Network Connect (TNC).

## Community Bonding
### Call for Collaboration
- **Network Hardware Vendors**: Contact us to support your hardware.
- **Security Software Vendors**: Integrate with your tools; we need licenses.
- **Developers**: Low barrier to entry, all in Perl. Audit our code and help fix issues.
- **Users**: Deploy PacketFence for your customers and provide feedback.

## About Me
- **Olivier Bilodeau**
  - System Architect at Inverse Inc.
  - Lead Developer of PacketFence since 2009.
  - Teaching Information Security to undergraduates in Montreal.
  - New father, open-source enthusiast, CTF participant, Android developer, and home brewer.
- **Social Media**:
  - Twitter: @packetfence
  - Identi.ca: @plaxx
  - Delicious: plaxxx
  - LinkedIn: olivier.bilodeau

## References
- **PacketFence**:
  - Project Website: [http://www.packetfence.org](http://www.packetfence.org)
  - Source Code Repository: [http://mtn.inverse.ca](http://mtn.inverse.ca)
  - Issue Tracker: [http://www.packetfence.org/bugs](http://www.packetfence.org/bugs)
- **802.1X**:
  - Wikipedia: [IEEE 802.1X](http://en.wikipedia.org/wiki/IEEE_802.1X)
  - Security Analysis: [An Initial Security Analysis of the IEEE 802.1X Standard](http://www.cs.umd.edu/~waa/1x.pdf)
  - Microsoft: [Mitigating the Threats of Rogue Machines â€” 802.1X or IPsec?](http://technet.microsoft.com/en-ca/library/cc512611.aspx)
- **Research**:
  - Cisco NAC: [No Agent for iOS](http://www.cisco.com/en/US/docs/security/nac/appliance/support_guide/agntsprt.html#wp125743)
  - Proxy Bypass: [Feature Ticket](http://www.packetfence.org/bugs/view.php?id=1035)
  - Squid: [SSL Bump](http://www.squid-cache.org/Doc/config/ssl_bump/), [Redirectors](http://wiki.squid-cache.org/Features/Redirectors)
- **Important Projects**:
  - FreeRADIUS: [http://freeradius.org/](http://freeradius.org/)
  - Net-SNMP: [http://www.net-snmp.org/](http://www.net-snmp.org/)
- **Tools**:
  - yersinia: [Comprehensive LAN Attack Tool](http://www.yersinia.net/)
  - iodine: [IP over DNS Tunneling](http://code.kryo.se/iodine/)

Thank you for your attention! See you in the debriefing room.