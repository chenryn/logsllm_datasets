### Property and Key Confirmation

The property under consideration has a non-negligible probability for the predicate `Pred` to be equal to the full (S, C)-key confirmation predicate. This means that the predicate evaluates to false in the final state.

\[
\Pr \left[ \text{ExpPred}_{\Pi, A}(n) = 1 \right]
\]

Assume that there exists a server session \(\text{sid}_s\) that has accepted, and \(\text{sid}_s.\text{pid} \notin \text{Corr} \cup \{\ast\}\), but there is no (partnered) client session that has accepted with the same key as \(\text{sid}_s\). Since we can always abort the adversary against key confirmation if some server session without a partner accepts, we can assume that there are no further oracle queries after \(\text{sid}_s\) accepts. Therefore, the key of \(\text{sid}_s\) is not revealed, and both \(\text{sid}_s.\text{pid}\) and \(\text{sid}_s.\text{id}\) are not corrupted. If \(\text{sid}_s.\text{id}\) had been a corrupt server session before, it would not have accepted.

Furthermore, \(\text{sid}_s\) has no partnered session because such a session would have the same key due to Match security, except with negligible probability.

To proceed, we guess the server session \(\text{sid}_s\) for which full key confirmation is violated by picking its index randomly among the at most \(n_s\) many sessions. In the first game hop, we use the key secrecy of the original protocol \(\Pi\) to replace the key for \(\text{sid}_s\) by a random key. Since there is no partnered session, the key is not required by any other session. The simulation is analogous to the proof of key secrecy for \(\Pi_{\text{MAC}}\). In the second game hop, we apply KDF security to make \((\text{key}_{\text{s}}, \text{key}_{\text{MAC}})\) random for \(\text{sid}_s\). Finally, we construct a MAC forger \(B\) as follows: The forger \(B\) black-box simulates \(A\), guesses \(\text{sid}_s\), and returns the MAC \(\tau_c\) received in session \(\text{sid}_s\) together with the "message" \(\text{sid}\) as a forgery. The winning probability is non-negligible since the MAC must be valid for \(\text{sid}_s\) to accept, and the random \(\text{key}_{\text{MAC}}\) is used for the first time to verify the validity of the MAC.

Next, we show that \(\Pi_{\text{MAC}}\) provides almost-full (C, S)-key confirmation. For this, we first note that key-confirmation identifier binding holds trivially, as the extended protocol sets \(\text{kcid} = \text{sid}\) such that partnered sessions with the same session identifier \(\text{sid}\) also have identical key-confirmation identifiers. Furthermore, Match security of the underlying protocol implies that sessions with the same \(\text{kcid}\) hold the same key if they eventually accept. Hence, the predicate \(\text{KCIDbind}\) is satisfied, except with negligible probability.

Assume next that \(\Pr \left[ \text{ExpPred}_{\Pi, A}(n) = 1 \right]\) has a non-negligible probability for the almost-full (C, S)-key confirmation predicate, i.e., the predicate evaluates to false in the final state. Then there exists a client session \(\text{sid}_c\) that has accepted and \(\text{sid}_c.\text{pid} \notin \text{Corr} \cup \{\ast\}\), but there is no server session that has set its key-confirmation identifier to \(\text{sid}\), or if it has, then it has accepted a different key.

To proceed, we guess the client session \(\text{sid}_c\) for which almost-full key confirmation is violated. In the first game hop, we use key secrecy of the original protocol \(\Pi\) to replace the key for \(\text{sid}_c\) by a random key. Since there is no partnered (completed) session in \(\Pi_{\text{MAC}}\) with the same \(\text{kcid}\) and the same key, the key is not required by any other session. The simulation is now analogous to the proof of key secrecy for \(\Pi_{\text{MAC}}\). In the second game hop, we once more apply KDF security to make \((\text{key}_{\text{s}}, \text{key}_{\text{MAC}})\) random for \(\text{sid}_c\). Finally, we construct a MAC forger \(B\) as follows: The forger \(B\) black-box simulates \(A\), guesses \(\text{sid}_c\), and returns the MAC \(\tau_s\) and \(\text{sid}\) as a forgery. The winning probability is non-negligible since the MAC must be valid for \(\text{sid}_c\) to accept, and the random \(\text{key}_{\text{MAC}}\) is used for the first time to check the validity of the MAC.

### Variations and Security Considerations

There are several variations to the above instantiation which, if done properly, can all be shown to be secure:

- **Single MAC Key**: One variation, followed, e.g., by NIST [2], is to generate only a single MAC key and let the client and server prepend a distinct key word in front of the "message" \(\text{sid}\) for the computation, e.g., "client"||\(\text{sid}\) and "server"||\(\text{sid}\). Here, the MAC would require to be one-time unforgeable.
- **Strongly Unforgeable MACs**: Another variant—which can be combined with the previous approach—is to use strongly unforgeable MACs (where it is also infeasible to create a new MAC for the same message), e.g., deterministic MACs where verification is done via re-computation, and define \(\text{kcid} = (\text{sid}, \tau_s, \tau_c)\).
- **Session Identifier in KDF**: A third variant is to include the session identifier \(\text{sid}\) in the key derivation, \(\text{KDF}(\text{key}, \text{sid})\). For public session identifiers and strong key derivation functions, this cannot harm the security. On the other hand, the basic security properties of the underlying protocol \(\Pi\) already tie session identifiers to session keys strongly, such that further linking through KDF seems unnecessary.
- **Removing Session Identifier from MAC Input**: If the session identifier is already strongly tied to the session keys, it is also possible to remove \(\text{sid}\) from the input of the MACs. This variant, together with a single MAC key and "client"/"server" labels, is used in HMQV-C [23], the 3-message variant of the HMQV protocol.

### Conclusion

Key confirmation is a widely targeted functional property in cryptographic key exchange protocols, but it has received only very limited formal treatment so far. Our work provides the first extensive formalization of key confirmation through corresponding security definitions in the game-based modeling tradition. A particular strength of our notions for key confirmation is their definitional modularity: they can easily be plugged together with more traditional notions like key secrecy to obtain combined security guarantees.

On the practical side, our analysis of the current TLS 1.3 draft-10 full handshake validates that it achieves the design goal of providing key confirmation. As a potentially surprising technical result, key confirmation in the full handshake does not require the exchange of Finished messages dedicated to this purpose in the specification, but can readily be established from the exchanged CertificateVerify messages. While this result cannot serve as an argument for dropping the Finished messages due to their use in further handshake variants, it casts light on the cryptographic strengths of various handshake messages in general and the session hash and online signatures concepts integrated into TLS 1.3 in particular.

Our generic transform on the theoretical side validates the widespread concept of achieving key confirmation through exchanged MACs over the protocol transcript, which not only formalizes a folklore approach but more importantly can serve as a verified blueprint for future key exchange protocol designs.

In future work, we plan to investigate the extension of our approach to the (extended) Canetti–Krawczyk model for key exchange and the interplay between key confirmation and forward secrecy. For example, it might be possible to generalize the results obtained for the security strengthening compilers introduced in [16] and [11] to other methods providing key confirmation.

### Acknowledgments

We thank the anonymous reviewers for valuable comments. Marc Fischlin is supported by the Heisenberg grant Fi 940/3-2 of the German Research Foundation (DFG). This work was done in part while Marc Fischlin was visiting the Simons Institute for the Theory of Computing, supported by the Simons Foundation and by the DIMACS/Simons Collaboration in Cryptography through NSF grant #CNS-1523467. Benedikt Schmidt is supported by ONR grant N00014-15-1-2750 and the European Commission’s Seventh Framework Programme Marie Curie Cofund Action AMAROUT II (grant no. 291803). This work has also been co-funded by the DFG as part of project S4 within the CRC 1119 CROSSING, the European Union Seventh Framework Programme (FP7/2007-2013) grant agreement 609611 (PRACTICE), and ERC Advanced Grant ERC-2010AdG-267188-CRIPTO.

### References

[1] E. Barker, L. Chen, A. Regenscheid, and M. Smid. SP 800-56B. Recommendation for Pair-Wise Key Establishment Schemes Using Integer Factorization Cryptography. NIST Special Publication, National Institute of Standards & Technology, Aug. 2009.
[2] E. Barker, L. Chen, A. Roginsky, and M. Smid. SP 800-56A r2. Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography. NIST Special Publication, National Institute of Standards & Technology, May 2013.
[3] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated key exchange secure against dictionary attacks. In B. Preneel, editor, Advances in Cryptology – EUROCRYPT 2000, volume 1807 of Lecture Notes in Computer Science, pages 139–155. Springer, Heidelberg, May 2000.
[4] M. Bellare and P. Rogaway. Entity authentication and key distribution. In D. R. Stinson, editor, Advances in Cryptology – CRYPTO'93, volume 773 of Lecture Notes in Computer Science, pages 232–249. Springer, Heidelberg, Aug. 1994.
[5] F. Bergsma, B. Dowling, F. Kohlar, J. Schwenk, and D. Stebila. Multiciphersuite security of the Secure Shell (SSH) protocol. In G.-J. Ahn, M. Yung, and N. Li, editors, ACM CCS 14: 21st Conference on Computer and Communications Security, pages 369–381. ACM Press, Nov. 2014.
[6] K. Bhargavan, A. Delignat-Lavaud, C. Fournet, A. Pironti, and P.-Y. Strub. Triple handshakes and cookie cutters: Breaking and fixing authentication over TLS. In 2014 IEEE Symposium on Security and Privacy, pages 98–113. IEEE Computer Society Press, May 2014.
[7] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P.-Y. Strub. Implementing TLS with verified cryptographic security. In 2013 IEEE Symposium on Security and Privacy, pages 445–459. IEEE Computer Society Press, May 2013.
[8] S. Blake-Wilson, D. Johnson, and A. Menezes. Key agreement protocols and their security analysis. In M. Darnell, editor, Cryptography and Coding, volume 1355 of Lecture Notes in Computer Science, pages 30–45. Springer Berlin Heidelberg, 1997.
[9] S. Blake-Wilson and A. Menezes. Authenticated Diffie-Hellman key agreement protocols (invited talk). In S. E. Tavares and H. Meijer, editors, SAC 1998: 5th Annual International Workshop on Selected Areas in Cryptography, volume 1556 of Lecture Notes in Computer Science, pages 339–361. Springer, Heidelberg, Aug. 1999.
[10] S. Blake-Wilson and A. Menezes. Unknown key-share attacks on the station-to-station (STS) protocol. In H. Imai and Y. Zheng, editors, PKC'99: 2nd International Workshop on Theory and Practice in Public Key Cryptography, volume 1560 of Lecture Notes in Computer Science, pages 154–170. Springer, Heidelberg, Mar. 1999.
[11] C. Boyd and J. Nieto. On forward secrecy in one-round key exchange. In L. Chen, editor, Cryptography and Coding, volume 7089 of Lecture Notes in Computer Science, pages 451–468. Springer Berlin Heidelberg, 2011.
[12] C. Brzuska. On the Foundations of Key Exchange. PhD thesis, Technische Universität Darmstadt, Darmstadt, Germany, 2013. http://tuprints.ulb.tu-darmstadt.de/3414/.
[13] C. Brzuska, M. Fischlin, B. Warinschi, and S. C. Williams. Composability of Bellare-Rogaway key exchange protocols. In Y. Chen, G. Danezis, and V. Shmatikov, editors, ACM CCS 11: 18th Conference on Computer and Communications Security, pages 51–62. ACM Press, Oct. 2011.
[14] R. Canetti and H. Krawczyk. Analysis of key-exchange protocols and their use for building secure channels. In B. Pfitzmann, editor, Advances in Cryptology – EUROCRYPT 2001, volume 2045 of Lecture Notes in Computer Science, pages 453–474. Springer, Heidelberg, May 2001.
[15] L. Chen and C. Kudla. Identity based authenticated key agreement protocols from pairings. In 16th IEEE Computer Security Foundations Workshop (CSFW-16 2003), pages 219–233. IEEE Computer Society, June 2003.
[16] C. J. F. Cremers and M. Feltz. Beyond eCK: Perfect forward secrecy under actor compromise and ephemeral-key reveal. In S. Foresti, M. Yung, and F. Martinelli, editors, ESORICS 2012: 17th European Symposium on Research in Computer Security, volume 7459 of Lecture Notes in Computer Science, pages 734–751. Springer, Heidelberg, Sept. 2012.
[17] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), Aug. 2008. Updated by RFCs 5746, 5878, 6176.
[18] B. Dowling, M. Fischlin, F. Günther, and D. Stebila. A cryptographic analysis of the TLS 1.3 handshake protocol candidates. In I. Ray, N. Li, and C. Kruegel, editors, ACM CCS 15: 22nd Conference on Computer and Communications Security, pages 1197–1210. ACM Press, Oct. 2015.
[19] B. Dowling, M. Fischlin, F. Günther, and D. Stebila. A cryptographic analysis of the TLS 1.3 draft-10 full and pre-shared key handshake protocol. Cryptology ePrint Archive, Report 2016/081, 2016. http://eprint.iacr.org/2016/081.
[20] EMVCo LLC. EMV ECC key establishment protocols. http://www.emvco.com/specifications.aspx?id=243, 2012.
[21] K. Hoeper and L. Chen. SP 800-120. Recommendation for EAP Methods Used in Wireless Network Access Authentication. NIST Special Publication, National Institute of Standards & Technology, Sept. 2009.
[22] T. Jager, F. Kohlar, S. Schäge, and J. Schwenk. On the security of TLS-DHE in the standard model. In R. Safavi-Naini and R. Canetti, editors, Advances in Cryptology – CRYPTO 2012, volume 7417 of Lecture Notes in Computer Science, pages 273–293. Springer, Heidelberg, Aug. 2012.
[23] H. Krawczyk. HMQV: A high-performance secure Diffie-Hellman protocol. In V. Shoup, editor, Advances in Cryptology – CRYPTO 2005, volume 3621 of Lecture Notes in Computer Science, pages 546–566. Springer, Heidelberg, Aug. 2005.
[24] H. Krawczyk, K. G. Paterson, and H. Wee. On the security of the TLS protocol: A systematic analysis. In R. Canetti and J. A. Garay, editors, Advances in Cryptology – CRYPTO 2013, Part I, volume 8042 of Lecture Notes in Computer Science, pages 429–448. Springer, Heidelberg, Aug. 2013.
[25] B. A. LaMacchia, K. E. Lauter, and A. Mityagin. Stronger security of authenticated key exchange. In Provable Security, First International Conference, ProvSec 2007, volume 4784 of Lecture Notes in Computer Science, pages 1–16. Springer, Nov. 2007.
[26] A. Langley. Comment at the Real World Crypto (RWC) Workshop, New York, Jan. 2014.
[27] A. J. Menezes, S. A. Vanstone, and P. C. V. Oorschot. Handbook of Applied Cryptography. CRC Press, 1996.
[28] P. Morrissey, N. P. Smart, and B. Warinschi. The TLS handshake protocol: A modular analysis. Journal of Cryptology, 23(2):187–223, Apr. 2010.
[29] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3 – draft-ietf-tls-tls13-10. https://tools.ietf.org/html/draft-ietf-tls-tls13-10, Oct. 2015.
[30] E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.3 – draft-ietf-tls-tls13-11. https://tools.ietf.org/html/draft-ietf-tls-tls13-11, Dec. 2015.
[31] TLS Mailing List. Subject: Kill Finished (and other tricks for hardware). https://www.ietf.org/mail-archive/web/tls/current/msg12162.html, Apr. 2014.
[32] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Protocol Architecture. RFC 4251 (Proposed Standard), Jan. 2006.