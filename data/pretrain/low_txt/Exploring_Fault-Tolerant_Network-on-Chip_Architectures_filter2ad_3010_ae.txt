### 4.1. Compactness and Efficiency of the AC Unit

To validate the compactness and efficiency of the proposed architecture, we synthesized the comparator unit (AC) using 90nm technology. The area and power budgets for the AC unit, as compared to those of a generic NoC router (see Figure 1), are presented in Table 1. It is evident that the AC unit imposes minimal area and power penalties on the overall design while providing full protection against logic errors. Additionally, the AC unit is also used to protect against Switch Allocator (SA) errors, further justifying its small overhead.

**Table 1: Power and Area Overhead of the AC Unit**

| Component | Generic NoC Router (5 PCs, 4 VCs per PC) | Allocation Comparator (AC) |
|-----------|-------------------------------------------|-----------------------------|
| Power     | 119.55 mW                                 | 2.02 mW (+1.69% overhead)   |
| Area      | 0.374862 mm²                              | 0.004474 mm² (+1.19% overhead) |

It should be noted that almost all the overhead in the proposed protective scheme comes from the AC unit alone. The Virtual Channel Allocator (VA) and SA are only slightly modified to accept invalidation signals from the AC. The AC unit monitors the results of the VA and SA.

### 4.2. Routing Unit Errors

A transient fault in the routing unit logic could cause a packet to be misdirected. Since subsequent virtual channel allocation and switch allocation would be based on this misdirection, no data corruption will occur. However, the erroneous direction may be blocked due to a link outage (hard fault) or a network edge in various topologies (e.g., mesh). This will be caught by the VA, which maintains state information for its adjacent routers. The VA can detect such behavior because it is aware of blocked links or links not permitted due to physical constraints, either pre-programmed in the allocator's state table or dynamically specified through incoming state information from adjacent routers.

Recovery depends on whether look-ahead routing is used:
- **With Look-Ahead Routing**: The error will be caught by the VA of the following router and reported to the previous router via an appropriate NACK message. This will invalidate the erroneous decision and force the routing unit to repeat the process. The entire recovery process takes 3 clock cycles in a 2-stage router (one for NACK propagation, one for new routing, and one for retransmission) and 2 clock cycles in a single-stage router.
- **Without Look-Ahead Routing**: The current router may reset the invalid direction and assign a new direction without informing the previous router. If current-node routing is used (i.e., 4-stage and 3-stage routers), the recovery phase is simpler, as the error is caught by the VA in the same router, resulting in a single-cycle delay for re-routing.

Misdirection to a non-blocked, functional path will not be caught by the VA since its state information will not raise an error flag. This could potentially cause deadlock in deterministic routing algorithms. In such cases, the error will be detected in the router receiving the misdirected flit, and a NACK to the sending router will fix the problem. The latency overhead is dependent on the number of pipeline stages (n) within the router, with a delay penalty of 1 + n (NACK + re-routing and retransmission).

In adaptive routing schemes, the error cannot be detected, but it is not catastrophic; it simply delays the flit traversal.

### 4.3. Switch Allocator Errors

A switch allocator error can lead to four different problems, some of which result in packet/flit loss:
1. **Control Signal Error**: A soft error in the control signals of the switch allocator could prevent flits from traversing the crossbar. This is the least problematic case, as flits will keep requesting access until they succeed.
2. **Mistaken Direction**: If a data flit is mistakenly sent to a different direction from the header flit, it will cause flit/packet loss, as it deviates from the wormhole created by its header flit.
3. **Duplicate Output**: A soft error could direct two flits to the same output, leading to a corrupt flit detected by the error detection code in the next router. A NACK will be sent, and the retransmission buffer will be used. Regardless of the number of pipeline stages, this error recovery process incurs a two-cycle latency overhead (NACK + retransmission).
4. **Multicasting**: An error could cause the allocator to send a flit to multiple outputs. If the flit is a data flit, the same error as in (b) occurs. If the flit is a header flit, multiple virtual channels will be reserved in all receiving routers, opening multiple wormholes for the same message. These wormholes will remain permanently reserved, reducing the effective buffer space in those routers.

The most challenging cases are (b) and (d). To prevent these scenarios, we propose the use of the Allocation Comparator (AC) Unit, which was introduced to protect against VA errors. The AC unit checks for invalid SA allocations (such as multicasting) and duplicate SA allocations. Upon detecting an error, the AC unit invalidates the SA allocation in the previous clock cycle. The overhead does not depend on the number of pipeline stages of a router. An SA error will be caught by the AC unit after the SA stage finishes, implying that the AC unit operates in the same stage as crossbar traversal. A NACK signal must be sent to all adjacent routers to ignore the previous transmission, and a new SA process will commence, incurring a single-clock latency overhead.

### 4.4. Crossbar Errors

A transient fault within the crossbar would produce single-bit upsets, not entire flits being misdirected as in the switch allocator case. Single-bit upsets are handled by the error detection and correction unit employed within each router, thus eliminating the problem.

### 4.5. Retransmission Buffer Errors

A single soft error in the retransmission buffer would be corrected by the error-correcting unit in the receiving router. A double (or more) error, however, would result in an endless retransmission loop since the original data itself is now corrupt. Given the low likelihood of a double bit-flip, such a scenario can be ignored. A fool-proof solution would be to use duplicate retransmission buffers, doubling the buffer area and power overhead.

### 4.6. Handshaking Signal Errors

Every router has several handshaking signal lines with neighboring routers to facilitate proper functionality and synchronization. Transient faults on these lines would disrupt the operation of the network. Since the number of handshaking signal lines is small, Triple Module Redundancy (TMR) can be used, where three lines and a voter ensure protection against soft errors. There is a slight area and power overhead increase, but the area occupied by these lines is negligible compared to the area of other router components.

### 5. Conclusions

In this paper, we presented a comprehensive plan to address various types of reliability hindrances in on-chip networks. We tackled common failure types by proposing a series of architectural techniques that work in tandem to protect the interconnect infrastructure.

A new hop-by-hop retransmission scheme was introduced to combat link errors, shown to be efficient in terms of both latency and power even under high error rates. The retransmission buffers required by this mechanism were also used in a newly proposed deadlock recovery technique, minimizing the incurred overhead. A detailed analysis of possible symptoms resulting from intra-router logic errors was presented, along with an array of protective measures and their effectiveness in various router architectures.

Importantly, all the mechanisms proposed in this work kept the critical path of the NoC router intact. For on-chip networks, ultra-low latencies are essential, so any reliability solution that significantly impacts latency is not well-suited. Our schemes work in parallel with critical components without deepening the router pipeline.

### 6. References

[1] J. Kim, D. Park, C. Nicopoulos, N. Vijaykrishnan, and C. R. Das, "Design and analysis of an NoC architecture from performance, reliability and energy perspective," in Proc. of the Symposium on Architecture for networking and communications systems (ANCS), 2005.

[2] Krewell, "Multicore Showdown," Microprocessor Report, vol. 19, pp. 41-45, 2005.

[3] L. Benini and G. D. Micheli, "Networks on Chips: A NewSoC Paradigm," IEEE Computer, vol. 35, pp. 70-78, 2002.

[4] W. J. Dally and B. Towles, "Route Packets, Not Wires: On-Chip Interconnection Networks," in Proc. of the Design Automation Conference (DAC), 2001.

[5] T. D. Richardson, C. Nicopoulos, D. Park, V. Narayanan, X. Yuan, C. Das, and V. Degalahal, "A Hybrid SoC Interconnect with Dynamic TDMA-Based Transaction-Less Buses and On-Chip Networks," in Proc. of the International Conference on VLSI Design, pp. 657-664, 2006.

[6] S. Murali, T. Theocharides, N. Vijaykrishnan, M. J. Irwin, L. Benini, and G. De Micheli, "Analysis of error recovery schemes for networks on chips," Design & Test of Computers, IEEE, vol. 22, pp. 434-442, 2005.

[7] K. Constantinides, S. Plaza, J. Blome, Z. Bin, V. Bertacco, S. Mahlke, T. Austin, and M. Orshansky, "BulletProof: A Defect-Tolerant CMP Switch Architecture," in Proc. of the High-Performance Computer Architecture (HPCA), pp. 3-14, 2006.

[8] A. Lorena and N. Michael, "Cost reduction and evaluation of temporary faults detecting technique," in Proc. of the Design, Automation and Test in Europe (DATE), 2000.

[9] D. Bertozzi, L. Benini, and G. De Micheli, "Low power error resilient encoding for on-chip data buses," in Proc. of the Design, Automation and Test in Europe Conference (DATE), pp. 102-109, 2002.

[10] R. Marculescu, "Networks-on-chip: the quest for on-chip fault-tolerant communication," in Proc. of the symposium on VLSI, pp. 8-12, 2003.

[11] K. L. Shepard and V. Narayanan, "Noise in deep submicron digital design," in Proc. of the International Conference on Computer-Aided Design (ICCAD), pp. 524-531, 1996.

[12] A. Krstic, J. Yi-Min, and C. Kwang-Ting, "Pattern generation for delay testing and dynamic timing analysis considering power-supply noise effects," IEEE Trans. on Computer-Aided Design of Integrated Circuits and Systems, vol. 20, pp. 416-425, 2001.

[13] T. Dumitras, S. Kerner, and R. Marculescu, "Towards on-chip fault-tolerant communication," in Proc. of the Asia and South Pacific Design Automation Conference (ASP-DAC), pp. 225-232, 2003.

[14] P. Shivakumar, M. Kistler, S. W. Keckler, D. Burger, and L. Alvisi, "Modeling the effect of technology trends on the soft error rate of combinational logic," in Proc. of the Dependable Systems and Networks (DSN), pp. 389-398, 2002.

[15] L. S. Peh and W. J. Dally, "A delay model and speculative architecture for pipelined routers," in Proc. of the High Performance Computer Architecture (HPCA), pp. 255-266, 2001.

[16] M. Galles, "Scalable Pipelined Interconnect for Distributed Endpoint Routing: The SGI SPIDER Chip," in Proc. of the Hot Interconnects Symposium IV, 1996.

[17] J. Kim, D. Park, T. Theocharides, N. Vijaykrishnan, and C. R. Das, "A low latency router supporting adaptivity for on-chip interconnects," in Proc. of the Design Automation Conference (DAC), pp. 559-564, 2005.

[18] R. Mullins, A. West, and S. Moore, "Low-latency virtual-channel routers for on-chip networks," in Proc. of the International Symposium on Computer Architecture (ISCA), pp. 188-197, 2004.

[19] S. Arjun, W. J. Dally, A. K. Gupta, and B. Towles, "GOAL: a load-balanced adaptive routing algorithm for torus networks," in Proc. of the International Symposium on Computer Architecture (ISCA), pp. 194-205, 2003.

[20] R. S. Srinivasa and R. S. Naresh, "Coding for system-on-chip networks: a unified framework," in Proc. of the Design Automation Conference (DAC), 2004.

[21] V. Praveen, B. Nilanjan, and S. C. Karam, "Quality-of-service and error control techniques for network-on-chip architectures," in Proc. of the Great Lakes symposium on VLSI, 2004.

[22] H. Zimmer and A. Jantsch, "A fault model notation and error-control scheme for switch-to-switch buses in a network-on-chip," in Proc. of the International Conference on Hardware/Software Codesign and System Synthesis (CODES+ISSS), pp. 188-193, 2003.

[23] W. J. Dally and B. Towles, Principles and practices of interconnection networks: Morgan Kaufmann, 2003.

[24] M. Dall'Osso, G. Biccari, L. Giovannini, D. Bertozzi, and L. Benini, "Xpipes: an insensitive parameterized network-on-chip architecture for multiprocessor SoCs," in Proc. of the International Conference on Computer Design (ICCD), pp. 536-539, 2003.

[25] W. J. Dally, L. R. Dennison, D. Harris, K. Kan, and T. Xanthopoulos, "Architecture and implementation of the reliable router," in Proc. of the Hot Interconnects II, pp. 197-208, 1994.

[26] W. Jie, "A deterministic fault-tolerant and deadlock-free routing protocol in 2-D meshes based on odd-even turn model," in Proc. of the International Conference on Supercomputing (ICS), pp. 67-76, 2002.

[27] N. Ted and S. L. Johnsson, "ROMM routing on mesh and torus networks," in Proc. of the Symposium on Parallel Algorithms and Architectures (SPAA), 1995.

[28] J. Duato, "A new theory of deadlock-free adaptive routing in wormhole networks," Parallel and Distributed Systems, IEEE Transactions on, vol. 4, pp. 1320-1331, 1993.

[29] K. V. Anjan and T. M. Pinkston, "An efficient, fully adaptive deadlock recovery scheme: DISHA," in Proc. of the International Symposium on Computer Architecture (ISCA), pp. 201-210, 1995.

[30] J. Duato, S. Yalamanchili, and L. Ni, "Interconnection networks: An engineering Approach.," Los Alamitos, Calif., IEEE Computer Society, 1997.

[31] P. Liden, P. Dahlgren, R. Johansson, and J. Karlsson, "On latching probability of particle induced transients in combinational networks," in Proc. of the Symposium on Fault-Tolerant Computing (FTCS), pp. 340-349, 1994.