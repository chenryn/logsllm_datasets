### Accessing Private Information

#### Security & Access Control
Research in this area aims to enhance the security and access control models used in mobile phones, focusing on improving usability. This research involves introducing developer-centric tools [30] that enforce the principle of least privilege, extending permission models, and defining user-defined runtime constraints [20, 21] to limit application access. Additionally, it includes detecting applications with malicious intent [9, 23].

- **Nauman et al. [20]**: They present a policy enforcement framework for Android that allows users to selectively grant permissions to applications and impose constraints on resource usage. Their extended package installer enables users to set constraints dynamically at runtime.
- **Ongtang [21]**: Ongtang introduces an infrastructure that governs install-time permission assignment and their run-time use, as dictated by application provider policies. This system provides necessary utilities for applications to assert and control security decisions on the platform.
- **Vidas [30]**: Vidas presents a tool that aids developers in specifying the minimum set of permissions required for a given mobile application. The tool analyzes application source code and automatically infers the minimal set of permissions needed to run the application.

#### Machine Learning in Security
Naive Bayes has been extensively used in spam detection [25, 18, 16, 28] and anomaly detection [26, 4] in network traffic flows. However, in the context of Android, there has been limited work. Shabtai et al. [27] present a behavioral-based detection framework for Android that implements a host-based intrusion detection system, monitoring events from the device and classifying them as normal or abnormal. Our work differs in that we use machine learning for the purpose of risk communication.

### Conclusions
We have discussed the importance of effectively communicating the risk of an application to users and proposed several methods to rate this risk. We tested these methods on large real-world datasets to understand each method’s ability to assign risk to applications. One particularly valuable method is the PNB model, which offers several advantages:
- **Monotonicity**: It can provide feedback on why a specific app's risk is high and how a developer could reduce that risk.
- **Performance**: It performs well in identifying most current malware apps as high risk, comparable to the sophisticated HMNB model.
- **Differentiation**: It can differentiate between critical and less-critical permissions, making it more difficult to evade compared to the BNB model.

### Acknowledgments
We would like to thank Xuxian Jiang and Yajin Zhou for providing us with their collection of Android malware samples and for checking the app mentioned in Section 6. Work by C. Gates, B. Sarma, N. Li was supported by the Air Force Office of Scientific Research MURI Grant FA9550-08-1-0265 and the National Science Foundation under Grant No. 0905442. H. Peng and Y. Qi were supported by NSF IIS-0916443, NSF CAREER award IIS-1054903, and the Center for Science of Information (CSoI), an NSF Science and Technology Center, under grant agreement CCF-0939370. Work by R. Potharaju and C. Nita-Rotaru was supported by NSF TC 0915655-CNS.

### References
[1] Andromo. http://andromo.com.
[2] Appsgeyser. http://appsgeyser.com.
[3] Google Bouncer. http://goo.gl/QnC6G.
[4] N. Amor, S. Benferhat, and Z. Elouedi. Naive Bayes vs Decision Trees in Intrusion Detection Systems. In Proceedings of the 2004 ACM Symposium on Applied Computing, pages 420–424. ACM, 2004.
[5] K. Au, Y. Zhou, Z. Huang, P. Gill, and D. Lie. Short Paper: A Look at Smartphone Permission Models. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices, pages 63–68. ACM, 2011.
[6] D. Barrera, H. Kayacik, P. van Oorschot, and A. Somayaji. A Methodology for Empirical Analysis of Permission-Based Security Models and Its Application to Android. In Proceedings of the 17th ACM Conference on Computer and Communications Security, pages 73–84. ACM, 2010.
[7] C. M. Bishop. Pattern Recognition and Machine Learning (Information Science and Statistics). Springer, 2007.
[8] D. Blei, A. Ng, and M. Jordan. Latent Dirichlet Allocation. J. Mach. Learning Research, 3, 2003.
[9] W. Enck, P. Gilbert, B. Chun, L. Cox, J. Jung, P. McDaniel, and A. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, pages 1–6. USENIX Association, 2010.
[10] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of Android Application Security. In Proceedings of the 20th USENIX Conference on Security, SEC’11, pages 21–21, Berkeley, CA, USA, 2011. USENIX Association.
[11] W. Enck, M. Ongtang, and P. McDaniel. On Lightweight Mobile Phone Application Certification. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS ’09, pages 235–245, New York, NY, USA, 2009. ACM.
[12] B. Fathi. Engineering Windows 7: User Account Control, October 2008. MSDN Blog on User Account Control.
[13] A. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android Permissions Demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security, pages 627–638. ACM, 2011.
[14] A. Felt, K. Greenwood, and D. Wagner. The Effectiveness of Application Permissions. In Proc. of the USENIX Conference on Web Application Development, 2011.
[15] A. P. Felt, K. Greenwood, and D. Wagner. The Effectiveness of Install-Time Permission Systems for Third-Party Applications. Technical Report UCB/EECS-2010-143, EECS Department, University of California, Berkeley, Dec 2010.
[16] J. Goodman and W. Yih. Online Discriminative Spam Filter Training. In Proceedings of the Third Conference on Email and Anti-Spam (CEAS), 2006.
[17] W. A. Magat, W. K. Viscusi, and J. Huber. Consumer Processing of Hazard Warning Information. Journal of Risk and Uncertainty, 1(2):201–32, June 1988.
[18] V. Metsis, I. Androutsopoulos, and G. Paliouras. Spam Filtering with Naive Bayes-Which Naive Bayes. In Third Conference on Email and Anti-Spam (CEAS), volume 17, pages 28–69, 2006.
[19] S. Motiee, K. Hawkey, and K. Beznosov. Do Windows Users Follow the Principle of Least Privilege? Investigating User Account Control Practices. In Proceedings of the Sixth Symposium on Usable Privacy and Security. ACM, 2010.
[20] M. Nauman, S. Khan, and X. Zhang. APEX: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, pages 328–332. ACM, 2010.
[21] M. Ongtang, S. McLaughlin, W. Enck, and P. McDaniel. Semantically Rich Application-Centric Security in Android. In Computer Security Applications Conference, 2009. ACSAC’09. Annual, pages 340–349. IEEE, 2009.
[22] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos. Paranoid Android: Versatile Protection for Smartphones. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 347–356. ACM, 2010.
[23] R. Potharaju, A. Newell, C. Nita-Rotaru, and X. Zhang. Plagiarizing Smartphone Applications: Attack Strategies and Defense. In Engineering Secure Software and Systems. Springer, 2012.
[24] B. Sarma, N. Li, C. Gates, R. Potharaju, C. Nita-Rotaru, and I. Molloy. Android Permissions: A Perspective Combining Risks and Benefits. In SACMAT '12: Proceedings of the Seventeenth ACM Symposium on Access Control Models and Technologies. ACM, 2012.
[25] K. Schneider. A Comparison of Event Models for Naive Bayes Anti-Spam Email Filtering. In Proceedings of the Tenth Conference on European Chapter of the Association for Computational Linguistics-Volume 1, pages 307–314. Association for Computational Linguistics, 2003.
[26] A. Sebyala, T. Olukemi, and L. Sacks. Active Platform Security Through Intrusion Detection Using Naive Bayesian Network for Anomaly Detection. In London Communications Symposium. Citeseer, 2002.
[27] A. Shabtai and Y. Elovici. Applying Behavioral Detection on Android-Based Devices. Mobile Wireless Middleware, Operating Systems, and Applications, pages 235–249, 2010.
[28] Y. Song, A. KoÅ, and C. L. Giles. Better Naive Bayes Classification for High-Precision Spam Detection. In Software Practice and Experience, 2009.
[29] D. W. Stewart and I. M. Martin. Intended and Unintended Consequences of Warning Messages: A Review and Synthesis of Empirical Research. Journal of Public Policy Marketing, 13(1):1–19, 1994.
[30] T. Vidas, N. Christin, and L. Cranor. Curbing Android Permission Creep. In Proceedings of the Web, volume 2, 2011.
[31] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolution. In Proceedings of the 33rd IEEE Symposium on Security and Privacy, 2012.

### Appendix
The posterior distribution of the hidden variables is given by:

\[ p(\psi, z|x, \alpha, \theta) = \frac{p(\psi, z, x|\alpha, \theta)}{p(x|\alpha, \theta)} \]

However, the exact computation of the posterior distribution is intractable. Therefore, we approximate the posterior distribution using:

\[ q(\psi, z|\beta, r) = \prod_{c=1}^{C} q(\psi_c|\beta_c) \prod_{n=1}^{N_c} q(z_{c,n}|r_{c,n}) \]

To obtain an accurate approximation, we use a variational Bayes approach. Specifically, we minimize the KL divergence of \( p \) and \( q \) via the following iterative variational updates:

**Update \( r \):**

\[ \rho_{c,n,k} = \exp\left\{\psi(\beta_{c,k}) - \psi\left(\sum_{l=1}^{K} \beta_{c,l}\right) + \sum_{m=0}^{M-1} \left[\psi(\theta_{k,m}) - \psi\left(\sum_{l=1}^{K} \theta_{k,l}\right)\right] x_{c,n,m} \right\} \]

\[ r_{c,n,k} = \frac{\rho_{c,n,k}}{\sum_{k=1}^{K} \rho_{c,n,k}} \]

**Update \( \theta \):**

\[ \theta_{k,m} = \frac{a_{0,k,m} + \sum_{c=1}^{C} \sum_{n=1}^{N_c} r_{c,n,k} x_{c,n,m}}{a_{0,k,0} + b_{0,k,0} + \sum_{c=1}^{C} \sum_{n=1}^{N_c} r_{c,n,k}} \]

**Update \( \alpha \) via Newton's method:**

\[ q_k = -C \psi'(\alpha_k) \]
\[ z = C \psi'\left(\sum_{k=1}^{K} \alpha_k\right) \]
\[ b = \frac{\sum_{k=1}^{K} g_k / q_k}{\sum_{k=1}^{K} 1 / q_k} \]
\[ \alpha_k^{\text{new}} = \alpha_k^{\text{old}} - \frac{g_k - b}{q_k} \]

**Update \( \beta \):**

\[ \beta_{c,k} = \alpha_k + \sum_{n=1}^{N_c} r_{c,n,k} \]

Here, \(\psi(.)\) denotes the digamma function.