### Locations and Data Security

Data can reside in various locations, such as memory addresses [20, 11, 33]. The compiler can optimize away "useless" instructions intended to clear memory before releasing it. The operating system can page a block of memory out to disk, leaving a copy on physical media until it is overwritten. Physical devices (RAM, magnetic media) can permanently retain traces of data written to them, even after the data has been overwritten.

### Protection of Private Keys

The same precautions and solutions used to protect traditional private keys apply to forward-secure private keys. Keys should never be written to permanent media without first being encrypted using a symmetric encryption algorithm. Whenever sensitive key material in memory is no longer needed, a special low-level 'cleanse' function that works around compiler optimizations should be used. When available, encrypted swap or pinning pages containing private keys in memory should be used to prevent keys from being inadvertently written to disk unencrypted. Forward-secure keys are no less secure than traditional keys in these regards.

However, in addition to protecting the current key from accidental exposure, FSS implementations must also ensure the permanent and secure destruction of old keying material during updates. For the copy in memory, the procedures mentioned above handle this. The complication arises with other, permanent, copies of the key, even when stored encrypted. Unless the key used to encrypt it is destroyed (implying that each period of an FSS key has a unique encryption key), an earlier private key would be recoverable from disk. Because it is often difficult or impossible to completely erase data from disks [20], this can pose a significant risk. Even worse, periodic backups, logging/journaling file systems, and other common features can all lead to multiple copies of the encrypted key existing. Therefore, even the encrypted key must be carefully managed to ensure the security of a forward-secure scheme.

It is important to note that this is no different from managing many short-lived traditional private keys instead of FSS. Both solutions introduce the new problem of securely managing many private keys.

### Protecting Against Timing Attacks

A common issue in implementing cryptographic systems is that, even though the implementation itself may be correct, it may inadvertently be vulnerable to side-channel attacks that can expose sensitive data in unexpected ways. One common group of side-channel attacks that signature schemes often face are timing attacks [24, 23]. Timing attacks are possible whenever an operation is performed in an automated and interactive fashion, such as protocol negotiation or operations performed by a smart card. By choosing specific inputs and measuring the time between request and reply, an attacker can infer information about the private key that compromises security.

There are two main varieties of timing attacks: those inherent to the algorithm itself and those due to a particular implementation of the algorithm. We will examine the impact of each of these on libfss in turn.

#### Inherent Algorithmic Timing Attacks

The first class of timing attacks arises because, with some algorithms, the amount of computation required for an operation varies significantly based on the input and private key together. By carefully selecting inputs, an attacker can use this to determine the private key bit by bit [24]. The FSS schemes in libfss are all of the generic type and do not perform any key-dependent operations themselves, so they are only vulnerable to these types of attacks if the base scheme used is. For other FSS schemes described in Section 2 (but not implemented in libfss currently) that are complete cryptographic algorithms and not generic constructions, this type of attack may apply directly.

For functions that are dependent on the private key in their performance, there are sometimes alternate ways of performing the necessary computation that do not depend on the private key. RSA "blinding" is an example of this, and libfss supports this technique to protect private keys using RSA as the base scheme. RSA blinding uses a random number and splits the computation into two parts, each using that number. By doing so, any correlation between the private key and execution time is removed.

When it is not possible to redesign the algorithm to remove the correlation between the private key and execution time, another technique that increases the amount of work required by the attacker is quantization [6]. Quantization works by padding the computation time until it is a multiple of a fixed quantum before returning the result to the user. Unless the quantum is larger than the operation could ever take, this counter-measure only adds noise to the attacker’s measurements and does not provably remove the attack [24]. Nonetheless, in practical terms, it does significantly increase the number of queries required.

To protect against these attacks, the FSS wrapper for RSA provides an option to enable a feature known as "blinding" that adds a random element to the computation, removing any correlation between the private key and execution time. For other base algorithms where timing attacks exist, the library does not contain support for quantizing internally, but software such as Matt Blaze’s [6] library can be used with libfss.

#### Implementation-Induced Timing Attacks

The second type of timing attack is caused by the implementation, typically with the way errors are handled. If a complex operation aborts as soon as an error is detected, it provides an indication as to which part of the input was invalid through the elapsed time. For forward-secure verification, for example, this could be used to infer which signatures in a chain are valid and invalid by introducing intentional corruptions and timing the verification.

The solution to this type of attack is to postpone returning an error as late as possible. libfss accomplishes this by continuing after all non-fatal errors and returning an error only if any stage of the operation fails. Additionally, all operations for which failure prevents continuing, such as memory allocation and conversion of keys from encoded binary forms to internal structures, are moved as far forward in the operations as possible to detect these errors early.

### Conclusion

In this paper, we have explored the practical performance characteristics of forward-secure signature schemes. We define a new framework for comparing signature schemes that takes into account the application environment in computing an amortized cost for basic operations. We use this tool to compare several different FSS schemes built using generic constructions, as well as several non-forward-secure signature schemes used as bases for these constructions. We use our performance metrics to examine a number of example uses for forward-secure signatures and provide recommendations for the optimal FSS scheme and configuration for each of these applications.

Our empirical study of FSS performance shows that, despite key generation and update operations being significantly more expensive than non-forward-secure equivalents, the performance of FSS is actually quite competitive if correctly used. In environments such as a Certificate Authority, the overhead of FSS is almost non-existent when costs are amortized. The greatest difference in performance between FSS and traditional signature schemes occurs when there are few signatures and verifications made by each key; even in these cases, FSS performs only two to four times slower. These results show concretely that forward-secure signatures are very practical. Many applications that currently use traditional signatures could switch to using forward-secure signatures with little penalty to performance but with an enormous improvement in the amount of inconvenience faced on key exposure.

There are several directions for future work based on this study. We have only looked at the performance of these generic FSS constructions using software implementations of the base signature schemes. Many applications now rely on hardware-based cryptographic co-processors when making traditional signatures, and the role these devices play in FSS needs to be explored. Our comparison also focused only on generic constructions due to their desirable property of being built upon well-known and well-trusted traditional signatures. Nonetheless, the performance of the other schemes described in Section 2, such as Bellare-Miner and Itkis-Reyzin, is also of interest, and in the future, we hope to expand our FSS reference implementation to include these schemes.

### References

[1] M. Abdalla and L. Reyzin. A new forward-secure digital signature scheme. Advances in Cryptology – ASIACRYPT 2000, Lecture Notes in Computer Science, 1976:116–129, Dec. 2000.
[2] R. Anderson. Two remarks on public-key cryptology From Invited Lecture, Fourth ACM Conference on Computer and Communications Security (April, 1997). http://www.cl.cam.ac.uk/TechReports/UCAM-CL-TR-549.pdf.
[3] ANSI X9.62-1998. Public key cryptography for the financial services industry: The elliptic curve digital signature algorithm (ECDSA), 1998.
[4] M. Bellare and S. K. Miner. A forward-secure digital signature scheme. Advances in Cryptology – CRYPTO ’99, Lecture Notes in Computer Science, 1666:431–448, Aug. 1999.
[5] M. Bellare and B. S. Yee. Forward-security in private-key cryptography. In Topics in Cryptology - CT-RSA ’03, The Cryptographers’ Track at the RSA Conference 2003, 2003.
[6] M. Blaze and J. Lacy. Simple Unix time quantization package, 1995. http://islab.oregonstate.edu/documents/People/blaze/quantize.shar.
[7] J. N. Bos and D. Chaum. Provably unforgeable signatures. Advances in Cryptology – CRYPTO ’92, Lecture Notes in Computer Science, 740:1–14, 1993.
[8] R. Canetti, O. Goldreich, and S. Halevi. The random oracle methodology, revisited. In Proc. of the thirtieth annual ACM symposium on Theory of computing (STOC ’98), 1998.
[9] R. Canetti, S. Halevi, and J. Katz. A forward-secure public-key encryption scheme. In Proc. of the 21st Annual IACR Eurocrypt conference (EUROCRYPT ’03), 2003.
[10] Certicom Research. SEC 2: Recommended elliptic curve domain parameters, Sep. 2000. http://www.secg.org/secg_docs.htm.
[11] G. D. Crescenzo, N. Ferguson, R. Impagliazzo, and M. Jakobsson. How to forget a secret. STACS ’99, Lecture Notes in Computer Science, 1563:500–509, 1999.
[12] T. Dierks and C. Allen. The TLS protocol. RFC 2246, IETF, January 1999.
[13] W. Diffie and M. E. Hellman. Multiuser cryptographic techniques. In AFIPS Conference Proceedings, volume 45, pages 109–112, 1976.
[14] W. Diffie, P. C. van Oorschot, and M. J. Wiener. Authentication and authenticated key exchanges. Designs, Codes, and Cryptography, 2(2), 1992.
[15] Y. Dodis, J. Katz, S. Xu, and M. Yung. Key-insulated public key cryptosystems. In Proc. of the 20th Annual IACR Eurocrypt conference (EUROCRYPT ’02), 2002.
[16] Y. Dodis, J. Katz, S. Xu, and M. Yung. Strong key-insulated signature schemes. In Proc. of the 6th Annual International Workshop on Practice and Theory in Public Key Cryptography (PKC ’03), 2003.
[17] A. Fiat and A. Shamir. How to prove yourself: Practical solutions to identification and signature problems. Advances in Cryptology - CRYPTO ’86, Lecture Notes in Computer Science, 263:181–187, 1986.
[18] L. C. Guillou and J.-J. Quisquater. A “paradoxical” identity-based signature scheme resulting from zero-knowledge. Advances in Cryptology – CRYPTO ’88, Lecture Notes in Computer Science, 403:216–231, Aug. 1988.
[19] C. Günther. An identity-based key-exchange protocol. In Proc. of the 7th Annual IACR Eurocrypt conference (EUROCRYPT ’89), 1989.
[20] P. Gutmann. Secure deletion of data from magnetic and solid-state memory. In Proceedings of 6th USENIX UNIX Security Symposium. USENIX Association, July 1996. San Jose, CA.
[21] G. Itkis and L. Reyzin. Forward-secure signatures with optimal signing and verifying. Advances in Cryptology – CRYPTO ’01, Lecture Notes in Computer Science, 2139:332–354, Aug. 2001.
[22] G. Itkis and L. Reyzin. SiBIR: Signer-base intrusion-resilient signatures. Advances in Cryptology – CRYPTO ’02, Lecture Notes in Computer Science, 2442, Aug. 2002.
[23] B. Kaliski. Timing attacks on cryptosystems. RSA Bulletin, 2, January 1996.
[24] P. C. Kocher. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. Advances in Cryptology – CRYPTO ’96, Lecture Notes in Computer Science, 1109:104–113, 1996.
[25] A. Kozlov and L. Reyzin. Forward-secure signatures with fast key update. In Proc. of the 3rd International Conference on Security in Communication Networks (SCN ’02), 2002.
[26] H. Krawczyk. Simple forward-secure signatures from any signature scheme. In Proc. of Seventh ACM Conference on Computer and Communications Security, pages 108–115, Nov. 2000.
[27] T. Malkin, D. Micciancio, and S. Miner. Efficient generic forward-secure signatures with an unbounded number of time periods. In Proc. of the 20th Annual IACR Eurocrypt conference (EUROCRYPT ’02), 2002.
[28] R. C. Merkle. A digital signature based on a conventional encryption function. Advances in Cryptology – CRYPTO ’89, Lecture Notes in Computer Science, pages 428–446, 1989.
[29] National Institute of Standards and Technology. Digital signature standard, FIPS 186-2, 2000.
[30] National Institute of Standards and Technology. Advanced encryption standard, FIPS 197, 2001.
[31] NESSIE consortium. Portfolio of recommended cryptographic primitives, February 2003. http://www.cryptonessie.org.
[32] H. Ong and C. P. Schnorr. Fast signature generation with a Fiat-Shamir-like scheme. In Proc. of the 8th Annual IACR Eurocrypt conference (EUROCRYPT ’90), 1990.
[33] N. Provos. Encrypting virtual memory. In Proceedings of the 9th USENIX Security Symposium, pages 35–44. USENIX Association, Aug. 2000. Denver, CO.
[34] R. Rivest, A. Shamir, and L. Adleman. A method for obtaining digital signatures and public-key cryptosystems. Communications of the ACM, 21(2):120–126, Feb. 1978.
[35] D. X. Song. Practical forward secure group signature schemes. In Proc. of the 8th ACM Conference on Computer and Communications Security (CCS ’01), 2001.
[36] The OpenSSL Group. OpenSSL, Oct 2003. http://www.openssl.org/.
[37] J. Viega, M. Messier, and P. Chandra. Network Security with OpenSSL. O’Reilly & Associates, Inc., 2002.
[38] M. J. Wiener. Performance comparison of public-key cryptosystems. CryptoBytes, 4(1), Summer 1998.