# 优化后的文本

## 通过量分析

在集群环境中，我们对不同重启方式下的总吞吐量进行了测量。图9展示了这些结果。

- **冷VM重启**：重启后立即的吞吐量下降了91%。
- **热VM重启**：重启后立即的吞吐量没有下降，这是由于文件缓存未丢失，即使是在重启后首次访问文件时也是如此。

### Web 访问性能

接下来，我们测量了Web服务器在VMM重启前后的吞吐量。实验中使用了Apache Web服务器，其内存中缓存了10,000个512 KB的文件。客户端主机中的10个`httperf`进程并行发送请求到服务器，每个文件仅被请求一次。图8（b）显示了结果。

- **热VM重启**：重启后的性能没有下降。
- **冷VM重启**：重启后的吞吐量下降了69%。

## 模型应用

基于运行11个虚拟机的实验结果，我们得到了以下模型函数：

- `rebootvmm(n) = -0.55n + 43`
- `resume(n) = 0.43n - 0.07`
- `rebootos(n) = 3.8n + 13`
- `boot(n) = 3.4n + 2.8`
- `resethw = 47`

利用这些函数，我们可以计算出使用热VM重启减少停机时间的函数：

\[ r(n) = 3.9n + 60 - 17\alpha \]

当 \(\alpha \leq 1\) 时，\(r(n)\) 始终为正数，这意味着热VM重启可以始终减少我们的配置中的停机时间。

## 集群环境

软件复原非常适合集群环境，如文献[7, 25]所述。在集群环境中，多个主机提供相同的服务，负载均衡器将请求分发给这些主机之一。即使某些主机为了复原VMM而重启，服务的停机时间也为零。然而，在某些主机重启期间，服务的总吞吐量会降低。热VM重启可以通过减少重启主机的停机时间来减轻这种性能下降。

### 虚拟机迁移

虚拟机迁移也可以在集群环境中用于减少总成本。与热VM重启不同，Xen中的Live Migration和VMware中的VMotion通过使用两个主机实现了几乎无服务停机时间的迁移。在VMM重启之前，它会将所有正在运行的VM的内存映像转移到目标主机，而不停止VM。之后，VMM重复传输自上次传输以来内存映像的变化，直到变化变得很小。最后，VMM停止VM并将剩余的变化和执行状态传输到目标主机。如果在集群环境中使用Live Migration，迁移的目标主机可以由其余主机共享。

假设一个由 \(m\) 个主机组成的集群，我们设每个主机的吞吐量为 \(p\)。当所有主机都在运行时，总吞吐量为 \(m \cdot p\)。图9根据我们的实验结果展示了总吞吐量随时间的变化。在一个主机的VMM复原期间，总吞吐量降至 \((m-1)p\)，因为复原的主机无法提供任何服务。使用热VM重启时，总吞吐量的下降仅持续很短的时间，这个时间与复原主机的停机时间相同，在我们的实验环境中为42秒。复原后，总吞吐量很快恢复到 \(m \cdot p\)。

然而，当我们使用冷VM重启（即正常的VMM重启）时，总吞吐量的下降会持续更长的时间。在我们的实验环境中，创建11个VM并运行JBoss时，这个时间段为241秒。此外，由于缓存未命中，复原后的总吞吐量会在一段时间内降为 \((m-\delta)p\)（其中 \(0 \leq \delta \leq 1\)）。在第5.5节的实验中，\(\delta\) 为0.69。

另一方面，使用Live Migration时，即使没有主机正在进行迁移，总吞吐量也是 \((m-1)p\)，因为一个主机被保留作为迁移的目标主机。这相当于不使用迁移的集群环境中总吞吐量的 \(\frac{m-1}{m}\)。如果 \(m\) 不够大，这一点至关重要。当一个主机进行Live Migration时，总吞吐量为 \((m-1.12)p\)，这是从报告中得出的，报告指出在Live Migration期间Apache Web服务器的性能下降了12% [8]。对于运行11个各具有1 GB内存的VM的情况，性能下降预计将持续17分钟。这是根据报告得出的，报告指出当只运行一个具有800 MB内存的VM时，迁移所需时间为72秒 [8]。尽管这些报告值不是在我们的实验环境中测得的，但趋势不会改变。

根据这些分析，热VM重启在集群环境中比Live Migration更有用。它可以减少性能下降，缩短复原主机的停机时间。而对于不能复制到多个主机的服务，Live Migration仍然有用，因为它可以使用备用主机来减少停机时间。

## 相关工作

Microreboot [6] 可以重新启动细粒度的应用组件以从软件故障中恢复。如果重新启动细粒度组件无法解决问题，Microreboot 会递归地尝试重新启动包含该细粒度组件的更粗粒度组件。如果重新启动更细粒度的组件可以解决问题，则包括该组件在内的应用程序的停机时间可以减少。Microreboot 是一种反应性技术，但主动使用它允许微复原。类似地，微内核操作系统 [1] 允许仅重新启动其实现为用户进程的子系统。Nooks [24] 允许仅重新启动操作系统中的设备驱动程序。因此，Microreboot 和其他以前的提议是针对子组件的快速重启技术。另一方面，热VM重启是一种在保留子组件状态的同时快速重启父组件的技术。

本文中，我们开发了一种机制，当父组件是VMM且子组件是VM时，仅复原父组件。检查点和重启 [23] 技术可用于仅复原操作系统。在这种情况下，父组件是操作系统，子组件是其进程。该机制在操作系统重启前将进程的状态保存到磁盘，并在重启后从磁盘恢复状态。这类似于VM的挂起和恢复，但由于需要处理大量内存，挂起和恢复VM更具挑战性。正如我们在实验中所展示的那样，简单地将VM的内存映像保存和恢复到磁盘是不现实的。热VM重启是一种新技术，通过保留内存映像几乎不依赖于内存大小。

为了加快使用慢速磁盘的挂起和恢复速度，使用了几种技术。在挂起时，VMware [26] 仅增量保存VM内存映像的修改部分到磁盘。这可以减少对慢速磁盘的访问，尽管在恢复时磁盘访问并未减少。Windows XP 在休眠（Suspend To Disk）时将压缩的内存映像保存到磁盘。这可以在休眠和恢复时减少磁盘访问。这些技术类似于增量检查点 [10] 和快速压缩检查点 [22]。另一方面，热VM重启不需要任何磁盘访问。

与其使用慢速硬盘进行挂起和恢复，可以使用更快的非易失性RAM磁盘，如i-RAM [14]。由于挂起和恢复的大部分时间都花在访问慢速磁盘上，因此RAM磁盘可以加快访问速度。然而，这样的非易失性RAM磁盘比硬盘昂贵得多。此外，还需要时间将内存映像从主内存复制到RAM磁盘，并在恢复时将其从RAM磁盘复制回主内存。热VM重启既不需要这种特殊设备，也不需要额外的内存复制。

Recovery Box [5] 仅在非易失性内存中保存操作系统和应用程序的状态，并在操作系统重启后快速恢复它们。Recovery Box 恢复因重启而丢失的部分机器状态，而热VM重启恢复因重启而丢失的所有VM状态。此外，Recovery Box 通过重用留在内存中的内核文本段来加速重启。这与我们的快速重新加载机制不同，因为Recovery Box 需要硬件支持来在重启期间保留内存内容。

为了缓解域0的软件老化，Xen提供了驱动域，这些域允许运行设备驱动程序。设备驱动程序是最容易出错的组件之一。在Xen的正常配置中，设备驱动程序在域0中运行，因此复原设备驱动程序需要重启域0和VMM。驱动域允许将设备驱动程序的错误局限在域U中，并在不重启VMM的情况下重新启动这些域。因此，使用驱动域减少了VMM的复原频率。然而，当VMM重启时，驱动域和域0都会重启，因为驱动域不能被挂起。因此，驱动域的存在增加了停机时间。

## 结论

本文提出了一种新的VMM快速复原技术——热VM重启。该技术通过使用内存挂起/恢复机制和快速重新加载机制，仅重启VMM。内存挂起/恢复机制在不访问内存映像的情况下执行VM的挂起和恢复。快速重新加载机制在VMM重启期间保留内存映像。热VM重启可以减少停机时间，并防止重启后的性能下降。我们基于Xen实现了这一技术，并进行了多项实验以证明其有效性。热VM重启最多可减少83%的停机时间，并在重启后保持相同的吞吐量。

我们未来的一个研究方向是在集群环境中经验性地评估热VM重启减少性能下降的效果。另一个方向是使特权VM能够在不重启VMM的情况下重新启动，并能够被挂起。

## 参考文献

[1] M. Accetta, R. Baron, W. Bolosky, D. Golub, R. Rashid, A. Tevanian, and M. Young. Mach: A New Kernel Foundation for UNIX Development. In Proceedings of the USENIX 1986 Summer Conference, pages 93–112, 1986.

[2] Advanced Configuration and Power Interface Specification. http://www.acpi.info/.

[3] AMD. AMD64 Virtualization Codenamed "Pacifica" Technology: Secure Virtual Machine Architecture Reference Manual, 2005.

[4] Apache Software Foundation. Apache HTTP Server Project. http://httpd.apache.org/.

[5] M. Baker and M. Sullivan. The Recovery Box: Using Fast Recovery to Provide High Availability in the UNIX Environment. In Proceedings of the Summer USENIX Conference, pages 31–44, 1992.

[6] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and A. Fox. Microreboot – A Technique for Cheap Recovery. In Proceedings of the 6th Symposium on Operating Systems Design and Implementation, pages 31–44, 2004.

[7] V. Castelli, R. Harper, P. Heidelberger, S. Hunter, K. Trivedi, K. Vaidyanathan, and W. Zeggert. Proactive Management of Software Aging. IBM Journal of Research & Development, 45(2):311–332, 2001.

[8] C. Clark, K. Fraser, S. Hand, J. Hansen, E. Jul, C. Limpach, I. Pratt, and A. Warfield. Live Migration of Virtual Machines. In Proceedings of the 2nd Symposium on Networked Systems Design and Implementation, pages 1–11, 2005.

[9] B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, I. Pratt, A. Warfield, P. Barham, and R. Neugebauer. Xen and the Art of Virtualization. In Proceedings of the Symposium on Operating Systems Principles, pages 164–177, 2003.

[10] S. Feldman and C. Brown. IGOR: A System for Program Debugging via Reversible Execution. In Proceedings of the Workshop on Parallel and Distributed Debugging, pages 112–123, 1989.

[11] K. Fraser. Xen changeset 11752. Xen Mercurial repositories.

[12] S. Garg, Y. Huang, C. Kintala, and K. Trivedi. Time and Load Based Software Rejuvenation: Policy, Evaluation and Optimality. In Proceedings of the 1st Fault Tolerance Symposium, pages 22–25, 1995.

[13] S. Garg, A. Moorsel, K. Vaidyanathan, and K. Trivedi. A Methodology for Detection and Estimation of Software Aging. In Proceedings of the 9th International Symposium on Software Reliability Engineering, pages 283–292, 1998. http://www.

[14] GIGABYTE Technology. i-RAM. gigabyte.com.tw/.

[15] V. Hanquez. Xen changeset 8640. Xen Mercurial repositories.

[16] Y. Huang, C. Kintala, N. Kolettis, and N. Fulton. Software Rejuvenation: Analysis, Module and Applications. In Proceedings of the 25th International Symposium on Fault-Tolerant Computing, pages 381–391, 1995.

[17] Intel Corporation. Intel Virtualization Technology Specification for the IA-32 Intel Architecture, 2005.

[18] JBoss Group. JBoss Application Server. http://www.jboss.com/.

[19] M. Kanno. Xen changeset 9392. Xen Mercurial repositories.

[20] D. Mosberger and T. Jin. httperf: A Tool for Measuring Web Server Performance. Performance Evaluation Review, 26(3):31–37, 1998.

[21] A. Pfiiffer. Reducing System Reboot Time with kexec. http://www.osdl.org/.

[22] J. Plank, J. Xu, and R. Netzer. Compressed Differences: An Algorithm for Fast Incremental Checkpointing. Technical Report CS–95–302, University of Tennessee, 1995.

[23] B. Randell. System Structure for Software Fault Tolerance. IEEE Transactions on Software Engineering, SE-1(2):220–232, 1975.

[24] M. Swift, B. Bershad, and H. Levy. Improving the Reliability of Commodity Operating Systems. In Proceedings of the 19th Symposium on Operating Systems Principles, pages 207–222, 2003.

[25] K. Vaidyanathan, R. Harper, S. Hunter, and K. Trivedi. Analysis and Implementation of Software Rejuvenation in Cluster Systems. In Proceedings of the 2001 ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems, pages 62–71, 2001.

[26] VMware Inc. VMware. http://www.vmware.com/.

[27] C. Waldspurger. Memory Resource Management in VMware ESX Server. In Proceedings of the 5th Symposium on Operating Systems Design and Implementation, pages 181–194, 2002.