### Observations and Architecture

These observations suggest a publish-subscribe architecture for managing state updates. Specifically, a game node registers a "subscription" that describes the objects it wishes to keep updated. Additionally, whenever a node changes the state of a game object, it creates a "publication" that is delivered to other nodes interested in that object. The subscription essentially implements an "area-of-interest" filtering, which we describe in further detail in Section 6.4.

### Key Requirements

A key requirement of this design is a flexible subscription language that allows the game to express its object subscriptions precisely. If the language is too coarse, the game may receive a large number of irrelevant updates, which will need to be filtered locally. Conversely, if the language is too flexible, it may preclude scalable routing of object updates. Fortunately, we can use the multi-attribute range query primitive, which Mercury implements scalably, as the subscription language for distributed games.

### Overview of the Section

In the remainder of this section, we describe the publish-subscribe system built on top of the Mercury routing layer, introduce Caduceus, our simple multiplayer distributed game, compare publish-subscribe to other possible solutions, and present some basic performance measurements.

## 6.2 Implementing Publish-Subscribe with Mercury

### Interface and API

The publish-subscribe system exposes a simple interface for applications. This API includes three basic calls: `send_publication`, `register_interest`, and `unregister_interest`.

- **`send_publication`**: This call is used to disseminate an object update via Mercury. It takes the updated object as its argument. When an application invokes this call, the publish-subscribe system assumes responsibility for delivering the object update to other interested nodes.
- **`register_interest`**: This call is used to subscribe to updates. It takes a multi-attribute range query as its argument. After an application invokes this call, the publish-subscribe system is responsible for delivering an update to the application whenever an object matching the query is added or modified.
- **`unregister_interest`**: This call simply cancels a subscription.

### Implementation Details

Our implementation of publish-subscribe using Mercury is relatively straightforward. Publications are routed as regular data items in Mercury. Subscriptions are similar to Mercury queries but with one important difference: Mercury queries can be discarded immediately after they are answered, while subscriptions must match not only objects currently existing in the system but also future matching objects. Thus, subscriptions must be retained at the nodes that receive them.

In our current implementation, subscriptions are hard state: they are retained until they are canceled by the querying node. To provide robustness in the face of node failures, we plan to implement subscriptions as soft state.

## 6.3 Caduceus

Caduceus is a two-dimensional, multiplayer, shooter game. Each player has a ship and a supply of missiles. Players pursue each other around the two-dimensional space and fire missiles when their opponents are in range. The goal is to kill as many opponents as possible.

Figure 10(a) presents a screenshot of the game. At any given time, a player sees the other ships in their immediate vicinity, as defined by the game window. The virtual game world is larger than the window, so there might be opponents located beyond any of the edges of the game window.

The state of the game is represented using two kinds of objects: ships and missiles. A ship consists of a location, velocity, and ancillary information such as fuel level. A missile is created whenever a ship fires shots. A missile consists of a location, velocity, and owner information. The main loop of Caduceus, shown in Figure 10(b), is relatively simple.

## 6.4 Alternative Update Routing Architectures

As stated previously, a central problem in distributed multiplayer gaming is ensuring that all nodes have (weakly) consistent views of the game state. To provide this (weak) consistency, nodes send updates to other nodes whenever the game state has changed. Most games have used either broadcast messaging or a centralized server to deliver these updates. Unfortunately, both these designs scale poorly to a large number of nodes.

To improve scalability, researchers have proposed area-of-interest filtering schemes, which divide the world into a fixed set of regions and map them to IP multicast groups. However, fixed regions result either in the delivery of a large number of irrelevant updates to clients or in the maintenance of a large number of IP multicast groups at routers.

In contrast, Mercury’s subscription language is ideal for implementing area-of-interest filtering. The subscription language makes it easy to describe arbitrary physical regions. As an example, Figure 10(c) shows two nodes expressing their interests in the rectangular regions near them. These regions do not need to fit a predefined tiling of the space.

Note that while tiling the space and assigning these tiles to different channels would be possible for a simple two-dimensional game, it becomes far more difficult in games with irregular spaces, such as corridors, or which have to deal with visibility constraints such as horizons. It is also difficult for multicast group-based schemes to support arbitrary interests such as "the location of all my teammates."

As shown in Figure 6(b), Mercury is able to handle 10,000 nodes while keeping the number of routing hops below 8. Assuming that the average-case, one-way delay between nodes is about 20ms (e.g., they are all well connected and within the U.S. west coast), this results in an end-to-end delay of less than 160ms. We believe that game-specific caching algorithms could further improve the routing performance, making Mercury-based games scalable to thousands of nodes.

## 6.5 Performance Evaluation

We evaluate the performance of our system with two metrics: hop count and message count. We run a varying number of players. The players move through the world according to a random waypoint model, with a motion time chosen uniformly at random from (1, 10) seconds, a destination chosen uniformly at random, and a speed chosen uniformly at random from (0, 360) pixels per second. The size of the game world is scaled according to the number of players. The dimensions are 640n × 480n, where n is the number of players. All results are based on the average of 3 experiments, with each experiment lasting 60 seconds. The experiments include the benefit of a log n sized LRU cache at each node, but do not include the benefits of any long pointers.

Table 1 summarizes the results. With respect to hop count, we find that the hop count increases only slightly as we double the number of nodes. To evaluate Mercury’s messaging efficiency, we compare it to two alternatives. In the "broadcast messages" column of the table, we report the number of messages that would have been transmitted if every update were sent to every node (as was done in first-generation distributed games). In the "optimal messages" column, we report the number of messages required to exactly satisfy each node’s interests, without any control message overhead. We find that Mercury performs substantially better than a broadcast scheme (43% as many messages transmitted for 20 nodes), and this performance difference increases when we increase the number of nodes, with Mercury using only 29% as many messages as broadcast for 40 nodes.

| # of Players | Average Hops | Broadcast Messages | Mercury Messages | Optimal Messages |
|--------------|--------------|--------------------|------------------|------------------|
| 20           | 4.44         | 170,000            | 74,295           | 28,154           |
| 40           | 4.61         | 695,240            | 199,076          | 58,644           |

**Table 1: Routing overheads for Caduceus, without long pointers.**

## 7. Conclusion

In this paper, we have described the design and implementation of Mercury, a scalable protocol for routing multi-attribute range-based queries. Our contributions compared to previous systems include support for multiple attributes and explicit load balancing. Mercury incorporates novel techniques to support random sampling of nodes within the system. Random sampling enables a number of lightweight approaches to performing load-balancing, node count estimation, and query selectivity estimation. Our evaluation clearly shows that Mercury scales well, has low lookup latency, and provides good load balancing properties.

In addition to providing high query-routing performance, Mercury provides a flexible range-based query primitive. Using this primitive, we are able to build an easy-to-use publish-subscribe facility for the maintenance of weakly consistent distributed state. We find that this facility is well suited for distributed state maintenance in distributed games. While we have only directly shown the suitability of Mercury for distributed games, we believe that the classes of applications that will benefit from our system include collaborative applications, such as shared whiteboards, distributed inventories, and possibly sensing applications as well.

## 8. Acknowledgements

We thank Justin Weisz for his initial work on adapting Caduceus to work with Mercury.

## 9. References

[1] Byers, J., Considine, J., and Mitzenmacher, M. Simple load balancing for distributed hash tables. Second International Workshop on Peer-to-Peer Systems (2003).

[2] Cabrera, L. F., Jones, M. B., and Theimer, M. Herald: Achieving a Global Event Notification Service. In Proceedings of the 8th IEEE Workshop on Hot Topics in Operating Systems (Elmau, Germany, May 2001).

[3] Carzaniga, A., Rosenblum, D. S., and Wolf, A. L. Design and Evaluation of a Wide-Area Event Notification Service. ACM Transactions on Computer Systems 19, 3 (Aug. 2001), 332-383.

[4] Castro, M., Druschel, P., Hu, Y. C., and Rowstron, A. Exploiting network proximity in distributed hash tables. In International Workshop on Future Directions in Distributed Computing (FuDiCo) (June 2002), O. Babaoglu, K. Birman, and K. Marzullo, Eds., pp. 52-55.

[5] Castro, M., Druschel, P., Kermarrec, A. M., Nandi, A., Rowstron, A., and A., S. Splitstream: High-bandwidth multicast in a cooperative environment. In Proceedings of the 19th Symposium on Operating System Principles (Oct. 2003).

[6] Castro M., et. al. SCRIBE: A large-scale and decentralized application-level multicast infrastructure. IEEE Journal on Selected Areas in Communications (JSAC) 20, 8 (Oct. 2002).

[7] Dabek, F., Kaashoek, M. F., Karger, D., Morris, R., and Stoica, I. Wide-area cooperative storage with CFS. In Proceedings of the 18th Symposium on Operating System Principles (Chateau Lake Louise, Banff, Canada, Oct. 2001).

[8] Ganeshan, P., Bawa, M., and Garcia-Molina, H. Online Balancing of Range-Partitioned Data with Applications to Peer-to-Peer Systems. In Conference on Very Large Databases (VLDB) (2004). To appear.

[9] Ghosh, B., Leighton, F. T., Maggs, B. M., Muthukrishnan, S., Plaxton, C. G., Rajaraman, R., Richa, A. W., Tarjan, R. E., and Zuckerman, D. Tight analyses of two local load balancing algorithms. In Proceedings of the 27th ACM STOC (1995), pp. 548-558.

[10] Gummadi, K., Gummadi, R., Ratnasamy, S., Gribble, S., Shenker, S., and Stoica, I. The Impact of DHT Routing Geometry on Resilience and Proximity. In Proceedings of the ACM SIGCOMM ’03 (Aug. 2003).

[11] Harvey, N. J. A., Jones, M. B., Saroiu, S., Theimer, M., and Wolman, A. Skipnet: A scalable overlay network with practical locality properties. In Proceedings of the 4th USENIX Symposium on Internet Technologies and Systems (Seattle, WA, Mar. 2003).

[12] Heubsch, R., Hellerstein, J., Lanhan, N., Loo, B. T., Shenker, S., and Stoica, I. Querying the Internet with PIER. In Proceedings of the 29th International Conference on Very Large DataBases (Sept. 2003).

[13] Karger, D., and Ruhl, M. Simple efficient load-balancing algorithms for peer-to-peer systems. Third International Workshop on Peer-to-Peer Systems (2004).

[14] Kleinberg, J. The Small-World Phenomenon: An Algorithmic Perspective. In Proceedings of the 32nd ACM STOC (2000).

[15] Kostic, D., Rodriguez, A., Albrecht, J., Bhirud, A., and Vahdat, A. Using random subsets to build scalable network services. In Proceedings of the 4th USENIX Symposium on Internet Technologies and Systems (Seattle, WA, Mar. 2003).

[16] Li, X., Kim, Y.-J., Govindan, R., and Hong, W. Multi-dimensional range queries in sensor networks. In Proceedings of the ACM Sensys 2003 (Nov. 2003).

[17] Macedonia, M. R., Zyda, M. J., Pratt, D. R., Brutzman, D. P., and Braham, P. T. Exploiting reality with multicast groups: A network architecture for large-scale virtual environments. In Proc. of the 1995 IEEE Virtual Reality Symposium (VRAIS95) (Mar. 1995).

[18] Manku, G., Bawa, M., and Raghavan, P. Symphony: Distributed hashing in a small world. In Proceedings of the 4th USENIX Symposium on Internet Technologies and Systems (Seattle, WA, Mar. 2003).

[19] Motwani, R., and Raghavan, P. Randomized Algorithms. Cambridge University Press, 1995.

[20] Randall, D. Math 8213A - Rapidly Mixing Markov Chains. http://www.math.gatech.edu/~randall/Course/lewis1.ps, 2003.

[21] Rao, A., Lakshminarayanan, K., Surana, S., Karp, R., and Stoica, I. Load Balancing in Structured P2P Systems. Second International Workshop on Peer-to-Peer Systems (2003).

[22] Ratnasamy, S., Francis, P., Handley, M., Karp, R., and Shenker, S. A Scalable Content-Addressable Network. In Proceedings of the SIGCOMM ’01 Symposium on Communications Architectures and Protocols (San Diego, California, Aug. 2001).

[23] Rowstron, A., and Druschel, P. Pastry: Scalable, distributed object location and routing for large-scale peer-to-peer systems. In IFIP/ACM International Conference on Distributed Systems Platforms (Middleware) (Nov. 2001), pp. 329-350.

[24] Singhal, S., and Cheriton, D. Using projection aggregations to support scalability in distributed simulation. In Proceedings of the 16th International Conference on Distributed Computing Systems (1996).

[25] Stoica, I., Morris, R., Karger, D., Kaashoek, F., and Balakrishnan, H. Chord: A scalable peer-to-peer lookup service for internet applications. In Proceedings of the SIGCOMM ’01 Symposium on Communications Architectures and Protocols (2001).