### Attacks on Servers’ Computational Resources

In scenarios where good clients send a fixed number of message copies and the server processes only a fixed fraction of the received messages, the impact of adversaries is diminished. Our work shares a similar ethos but differs significantly in its implementation. In the referenced work, the drop probability and repeat count are hard-coded, and the approach is not applicable to HTTP. Additionally, the authors do not consider congestion control, the implications of deployment in today’s Internet, or the case of unequal request loads. Gligor [16] observes that client retries and timeouts require less overhead while still providing the same qualitative performance bounds as proof-of-work schemes. Since the general approach does not meet his more stringent performance requirements, he does not consider using bandwidth as a currency.

Although we do not claim that bandwidth is strictly better than other currencies, we believe it is particularly natural. With other currencies, the server must either report an explicit price (e.g., by sending a puzzle with a specific difficulty) or have the clients guess the price. In contrast, with the "speak-up" method, the correct price emerges automatically, and neither the server nor the client needs to know the price in advance.

### Drawbacks of Currency-Based Schemes

Currency-based schemes have two main drawbacks. First, good clients must have sufficient currency (e.g., speak-up only applies when the good clients have enough bandwidth). Second, the currency can be unequally distributed (e.g., some clients have faster uplinks than others), which we discuss further in §9. Another critique is that these schemes provide some service to attackers, potentially making them weaker than the detection-and-blocking approaches we discuss below, such as profiling. However, under those schemes, a smart bot can imitate a good client, succeed in fooling the detection mechanism, and still receive some service.

### Commonly Deployed Defenses

The most commonly deployed defense [30] combines link over-provisioning [33] and profiling, a detect-and-block approach offered by several vendors [5, 9, 27]. These products build a historical profile of the defended server’s clientele and block traffic violating the profile during an attack. Other detect-and-block schemes include:

- **Resource Containers** [8]: Perform rate-limiting to allocate the server’s resources fairly.
- **CAPTCHAs** [47] (e.g., [29, 42]): Use reverse Turing tests to block bots.
- **Killbots** [21]: Combines CAPTCHAs and rate-limiting, defining a bot as a non-CAPTCHA-answering host that sends too many requests to an overloaded server.
- **Capabilities** [4, 50, 51]: The network blocks traffic not authorized by the application, using rate-limiting, CAPTCHAs, or other rules.

### Critiques of Detect-and-Block Methods

Detect-and-block methods can err. For example, CAPTCHAs can be thwarted by "bad humans" (cheap labor hired to attack a site or induced [32] to solve the CAPTCHAs) or "good bots" (legitimate, non-human clients or humans who do not answer CAPTCHAs). Rate-limiting by IP address can fail with NAT (a large block of customers is rate-limited as one customer) or spoofing (a small number of clients can get a large piece of the server). Profiling addresses some of these issues (e.g., many legitimate clients behind a NAT would cause the NAT’s external IP address to have a higher baseline rate in the server’s profile). However, savvy bots could, over time, build up their profile by appearing to be legitimate clients, at which point they could abuse their profile and attack.

### Combining with Related Work

Practical DDoS defense involves combining various methods from the taxonomy in §1. We do not outline a complete DDoS protection strategy here but focus on protecting two classes of resources:

1. **Access Links**: All sites, whether using speak-up or not, must defend their access links from saturation. Speak-up requires that the thinner is not congested (§4.3). The best current strategy for link defense seems to be a combination of over-provisioning (e.g., [33]), blocking obviously spurious traffic (e.g., ICMP floods), and shaping “in-band” traffic via historical profiling (e.g., [5, 9, 27]).

2. **Computational Resources**: Sites with scarce computational resources must implement application-level defense. Given that profiling is required to protect the link anyway, we must ask when it suffices as an application-level defense. Our answer is when the following conditions all hold: no pre-defined clientele (C3 from §2.2); non-human clientele (C4); and the negation of C5, i.e., when requests cause equal amounts of work, when spoofing is implausible, and when bots trigger alarms. When these conditions are not met, alternative methods can be used:
   - When C3 doesn’t hold, use capabilities [4, 50, 51] or explicit filters.
   - When C4 doesn’t hold, use CAPTCHAs to preferentially admit humans.
   - When C5 does hold, and C1 and C2 do too, we advocate speak-up as the application-level DDoS defense.

### Objections

Even under the conditions when speak-up is most applicable, it may raise objections, some of which we now address:

- **Bandwidth Envy**: Before speak-up, all good clients competed equally for a small share of the server. Under speak-up, more good clients are "better off" (i.e., can claim a larger portion of the server). Since speak-up allocates the server’s resources in proportion to a client’s bandwidth, high-bandwidth good clients are "more better off," and this inequality might be problematic. However, this unfairness only occurs under attack. A possible solution is for ISPs with low-bandwidth customers to offer access to high-bandwidth proxies whose purpose is to "pay bandwidth" to the thinner. These proxies would need to allocate their resources fairly—perhaps by implementing speak-up recursively.

- **Variable Bandwidth Costs**: In some countries, customers pay their ISPs "per-bit." For those customers, access to a server defended by speak-up (and under attack) would cost more than usual. Possible solutions include the proxy mentioned above or a "price tag": the thinner would expose the "going rate" in bytes, and the ISP would translate this figure to money and report it to customers, letting them choose whether to pay for access.

- **Incentives for ISPs**: One might ask whether speak-up gives ISPs an incentive to encourage botnets as a way to increase the bandwidth demanded by good clients. Our response is that such misalignment of incentives can happen in many commercial relationships (e.g., investment managers who needlessly generate commissions), but society relies on a combination of regulation, professional norms, and reputation to limit harmful conduct.

- **Solving the Wrong Problem**: One might ask, "If the problem is bots, then shouldn’t researchers address that mess instead of encouraging more traffic?" Our answer is that cleaning up bots is crucial, but even if bots are curtailed by orders of magnitude, a server with scarce computational resources must still limit bots’ influence. Speak-up is a way to do so.

- **Flash Crowds**: Speak-up treats a flash crowd (overload from good clients alone) just like an application-level DDoS attack. This fact might appear unsettling. However, it does not apply to the canonical case of a flash crowd, in which a hyperlink from slashdot.org overwhelms a residential website’s access link: speak-up would not have been deployed to defend a low-bandwidth site (see §2.2). For sites in our applicability regime, making good clients "bid" for access when all clients are good is certainly not ideal, but the issues here are the same as with speak-up in general.

### Conclusion

This study has sought to answer two high-level questions: (1) Which conditions call for speak-up’s peculiar brand of protection? (2) Does speak-up admit a practical design? Notably absent from this list is a question about how often the conditions in (1) do and will hold, i.e., who needs speak-up? To answer that question definitively will require not just a measurement effort but also a broader "market survey"—a survey about demand that, to be credible, will have to gather the opinions of network operators, server operators, and even users. Rather than trying to see who would buy—which we plan to do next—we decided first to see what we could build. Perhaps our priorities were inverted. Nevertheless, we report our main finding: based on the design, analysis, and evaluation of a prototype and subject to much future work and many issues, we can give a cautiously affirmative answer to question (2).

### Acknowledgments

We thank the HotNets 2005 attendees, especially Nick Feamster, Vern Paxson, Adrian Perrig, and Srini Seshan, for important critiques of our approach; Frans Kaashoek, Max Krohn, Sara Su, Arvind Thiagarajan, Keith Winstein, and the anonymous reviewers, both regular and shadow PC, for excellent comments on drafts; Ben Adida, Dave Andersen, Micah Brodsky, Russ Cox, Jon Crowcroft, Nick Feamster, Sachin Katti, Eddie Kohler, Christian Kreibich, Max Poletto, and Andrew Warfield, for useful conversations; and Emulab [13]. This work was supported by the NSF under grants CNS-0225660 and CNS-0520241, by an NDSEG Graduate Fellowship, and by British Telecom.

### References

[References listed as provided in the original text.]