# Malicious Proxies: The Web’s Evil Twin

## Introduction
- **About the Author:**
  - Edward J. Zaborowski
  - Experience in the security field since 1998, with expertise in:
    - Intrusion Detection Systems (IDS)
    - Penetration Testing
    - Malicious Logic Analysis
    - Incident Response
  - © 2009 Edward J. Zaborowski

- **Focus:**
  - This presentation will focus on HTTP proxies, specifically malicious ones.
  - Legitimate uses of proxies include:
    - Bandwidth savings
    - Filtering of websites
    - And more

## Why a Malicious Proxy?
- **Objective:**
  - To explore and demonstrate various nefarious ways to distort a user's interaction with web content.
  - To gather potentially useful information quickly and easily.

## Standard Proxies
- **Operation:**
  - A client requests a page through the proxy.
  - The proxy forwards the request to the server.
  - The server sends the response back to the proxy.
  - The proxy then serves the page to the client.

## Malicious Proxies
- **Operation:**
  - Similar to standard proxies, but with the ability to modify data.
  - Captures and modifies HTTP responses and requests.
  - Can change the response by adding HTML or JavaScript.

### Modifying Content
- **Methods:**
  - **Static HTML Modification:**
    - Cumbersome and requires extensive customization.
  - **JavaScript Injection:**
    - Easier to implement, as it can leverage common elements like the `<head>` tag.
    - JavaScript can modify the Document Object Model (DOM) consistently, reducing the need for major customization.

### Potential Issues
- **Challenges:**
  - Inserted JavaScript may be blocked by tools like NoScript.
  - Some AJAX-heavy sites may not function well.
  - Most sites use HTTP/1.1 compressed pages, which require decompression and modification.
  - Modifying the page can slow down delivery; using JavaScript to let the client make changes can save the proxy's CPU.

### Assigning a Proxy
- **Methods:**
  - **Static Assignment:**
    - Tedious and not very feasible.
  - **Dynamic Assignment:**
    - Via DNS (WPAD Record)
    - Via DHCP (Option 252)
    - Only works with browsers set to use auto-proxy detection.

## Doppelganger: Goals
- **Personal:**
  - A learning exercise in Ruby.
  - Code and documentation are not polished, but serve as a proof of concept.
- **Tool:**
  - Easy to use and semi-automated.
  - Targets all sites out of the box.

### Doppelganger Features
- **Capabilities:**
  - Can update WPAD DNS records.
  - Acts as a Greasemonkey for the web, not just Firefox.
  - Utilizes Google APIs for commonly used hosted JavaScript libraries (e.g., jQuery, Prototype, Mootools, Dojo, etc.).

### Requirements
- **Dependencies:**
  - Ruby
  - Webrick
  - OpenSSL library for Ruby
  - Ruby Gems:
    - dnsruby
    - packr
    - windows-pr*
    - win32-process*

### Generic Capabilities
- **Functions:**
  - Operates on both HTTP Requests and Responses.
  - Adds, removes, or modifies HTTP headers.
  - Injects or removes HTML, including JavaScript.

### Specific Capabilities
- **Features:**
  - Inserts a calling card.
  - Injects Flash applets.
  - Scrapes and decodes Basic Auth.
  - Steals submitted form data.
  - Captures other header data (e.g., cookies).

### Doppelganger Calling Card
- **Function:**
  - Removes all child tags of the `<body>` tag.
  - Adds a new tag prominently displaying a calling card image in the user’s browser.
  - Malicious scale: 1

### Doppelganger Header Capturing
- **Function:**
  - Captures entire headers.
  - Captures and decodes HTTP Basic Auth and cookies.
  - Malicious scale: 5+

### Doppelganger Flash Injection
- **Function:**
  - Adds appropriate tags for a Flash object at the end of the `<body>` tag.
  - Gathers more information about hosts.
  - Potentially exploits Flash vulnerabilities.
  - Malicious scale: 3+

### Doppelganger Form Data Capturing
- **Function:**
  - Finds all forms and binds to the "submit" event.
  - Form submission fires an Ajax request with serialized form data to a non-existent URL, which is logged by Doppelganger.
  - Gets data from forms on HTTP pages, even if they are submitted to HTTPS pages.
  - Malicious scale: 7+

### Other Uses
- **Potential Attacks:**
  - Phishing
  - Cross-Site Request Forgery (CSRF) attacks
  - Exploiting zero-day vulnerabilities (e.g., Firefox, Adobe)

### Future Additions
- **Planned Enhancements:**
  - More granular control over what pages to mimic.
  - Interactivity (on-the-fly reconfiguration).
  - Integration with sslstrip/sslsniff.

### Curious Findings
- **Observations:**
  - WPAD: In one hour, over 320 unique hosts grabbed the wpad.dat file.
  - Environment pushes proxy settings via Group Policy Object (GPO), but GPO does not set the proxy to the author's laptop.

### Mitigations
- **Recommendations:**
  - Serve the WPAD URL yourself.
  - Use DHCP Option 252 or DNS.
  - Ensure all browsers are configured to not automatically detect proxies.
  - This only protects against WPAD-type attacks.

## Questions and Script Ideas/Submissions
- **Contact Information:**
  - Edward J. Zaborowski
  - Email: [PI:EMAIL]
  - Project Link: http://doppelganger.googlecode.com

## Dedication
- **Dedicated to:**
  - My wife Kristen, mother Joyce, my brother Dave, and the memory of my sister Tina, my brother Eugene JR (Jay), and my father Gene, who inspire me every day.
  - © 2009 Edward J. Zaborowski