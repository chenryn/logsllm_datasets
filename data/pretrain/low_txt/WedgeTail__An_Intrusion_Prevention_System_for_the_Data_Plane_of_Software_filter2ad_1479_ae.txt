### 10. THE GOOD, THE BAD, AND THE UGLY

#### 10.1 Why WedgeTail and SPHINX?
To clearly differentiate our work from existing network troubleshooting solutions, we need to draw a distinct line. Traditional solutions, such as those described in [18, 20, 34], primarily focus on eliminating configuration conflicts, avoiding routing loops and black holes, and detecting policy inconsistencies. However, even with a correct configuration, forwarding devices can still fail due to software bugs, resource constraints, or other issues. A simple execution failure is concerning, but a malicious forwarding device poses a significant threat to network operators and associated hosts.

Recently, threats from state actors and insiders have been on the rise. In such scenarios, it is plausible to expect attackers to exploit vulnerabilities in forwarding devices at the core of the network to achieve their objectives, such as surveillance. Additionally, compromised forwarding devices can be deliberately placed by insiders, making the situation even more perilous. Therefore, we believe that networks require robust solutions to counter such adversaries. These solutions should not be evaluated solely based on detection time but rather on their ability to successfully detect all threats within a reasonable timeframe.

In summary, we view WedgeTail as complementary to traditional network troubleshooting solutions. To this end, WedgeTail is built on top of the most robust proposals in the network troubleshooting domain, including HSA [19].

#### 10.2 Why WedgeTail?
Existing works, such as [11], rely on administrator-defined policies for attack detection and are designed to handle weaker adversarial settings. They often fail to detect certain types of attacks (see §9.2) and do not address the localization of malicious forwarding devices. Furthermore, these solutions can introduce performance overhead, cannot distinguish between malicious actions like packet drops or delays, and do not prioritize the inspection of forwarding devices. 

WedgeTail, on the other hand, is designed to address these limitations. It provides more comprehensive and accurate detection, better performance, and greater autonomy in managing network security.

#### 10.3 Limitations and Future Work
We have evaluated WedgeTail across various network setups, configurations, and sizes, using different SDN controllers to demonstrate its practicality in simulated environments closely resembling real-world networks. Specifically, WedgeTail's high accuracy and performance in the Sprint Setup, which includes a large number of forwarding devices, rules, and trajectories, provides a solid foundation for further development and evaluation.

Additionally, we note that WedgeTail's core detection and response techniques, such as trajectory creation, scanning methodology, and inspection algorithms, are platform-independent and remain effective regardless of network dynamics. Our next step is to deploy WedgeTail in a real-world network setup, focusing on scalability.

We also acknowledge the need to explore WedgeTail's accuracy under more attack scenarios and use cases, such as virtualization and VM migrations. Based on our current evaluations, we do not anticipate any major obstacles in this regard.

Another challenge is the stability of the snapshots analyzed by our system, which can be an issue for all offline systems. Finally, we need to investigate WedgeTail's compatibility with distributed SDN controllers like ONOS, although we consider such platforms to be enablers rather than barriers. We aim to address these limitations in the near future.

### 11. CONCLUSION
In the era of cyber-warfare, cyber-terrorism, and increasing insider threats, it is crucial to protect the core infrastructure of networks. Software-Defined Networks (SDNs) are seen as the future of networking, and the security of the SDN control plane has been a topic of ongoing research. However, malicious forwarding devices, which are the enforcement points of decisions made at the control plane, pose a significant threat. SPHINX [11] was the first attempt to detect a broad class of attacks in SDNs without requiring trusted switches or hosts. Building on the same goals, we propose WedgeTail, a solution designed to handle stronger adversarial settings and outperform prior solutions in terms of accuracy, performance, and autonomy.

### Acknowledgments
The authors would like to express their gratitude to all anonymous reviewers for their valuable comments on the paper. Special thanks to Dr. Cong Wang for his feedback and assistance in improving the quality of this work. The first author also acknowledges the technical suggestions and recommendations from his former colleagues at the Information Security Research Group of University College London (UCL).

### References
[1] Mausezahn. http://www.perihel.at/sec/mz/.
[2] Open Networking Foundation (ONF). https://www.opennetworking.org/.
[3] S. T. Ali, V. Sivaraman, A. Radford, and S. Jha. A survey of securing networks using software-defined networking. IEEE transactions on reliability, 64(3):1086–1097, 2015.
[4] G. Andrienko, N. Andrienko, S. Rinzivillo, M. Nanni, and D. Pedreschi. A visual analytics toolkit for cluster-based classification of mobility data. In International Symposium on Spatial and Temporal Databases, pages 432–435. Springer, 2009.
[5] G. Andrienko, N. Andrienko, S. Rinzivillo, M. Nanni, D. Pedreschi, and F. Giannotti. Interactive visual clustering of large collections of trajectories. In Visual Analytics Science and Technology, 2009. VAST 2009. IEEE Symposium on, pages 3–10. IEEE, 2009.
[6] K. Benton, L. J. Camp, and C. Small. OpenFlow vulnerability assessment. In Proceedings of the second ACM SIGCOMM workshop on Hot topics in software-defined networking, pages 151–152. ACM, 2013.
[7] Cbench. https://goo.gl/10TLJk.
[8] T.-W. Chao, Y.-M. Ke, B.-H. Chen, J.-L. Chen, C. J. Hsieh, S.-C. Lee, and H.-C. Hsiao. Securing data planes in software-defined networks. In 2016 IEEE NetSoft Conference and Workshops (NetSoft), pages 465–470. IEEE, 2016.
[9] CRATE datasets. ftp://download.iwlab.foi.se/dataset.
[10] Data Set for IMC 2010 Data Center Measurement. http://pages.cs.wisc.edu/~tbenson/IMC10Data.html.
[11] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann. Sphinx: Detecting security attacks in software-defined networks. In NDSS, 2015.
[12] N. G. Duffield and M. Grossglauser. Trajectory sampling for direct traffic observation. In ACM SIGCOMM Computer Communication Review, volume 30, pages 271–282. ACM, 2000.
[13] R. Ghannam and A. Chung. Handling malicious switches in software-defined networks. In NOMS 2016-2016 IEEE/IFIP Network Operations and Management Symposium, pages 1245–1248. IEEE, 2016.
[14] F. Giannotti, M. Nanni, F. Pinelli, and D. Pedreschi. Trajectory pattern mining. In Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 330–339. ACM, 2007.
[15] N. Handigol, B. Heller, V. Jeyakumar, D. Mazières, and N. McKeown. I know what your packet did last hop: Using packet histories to troubleshoot networks. In 11th USENIX Symposium on Networked Systems Design and Implementation (NSDI 14), pages 71–85, 2014.
[16] P. Hunter. Pakistan YouTube block exposes fundamental internet security weakness: Concern that Pakistani action affected YouTube access elsewhere in the world. Computer Fraud & Security, 2008(4):10–11, 2008.
[17] A. Kamisiński and C. Fung. Flowmon: Detecting malicious switches in software-defined networks. In Proceedings of the 2015 Workshop on Automated Decision Making for Active Cyber Defense, pages 39–45. ACM, 2015.
[18] P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown, and S. Whyte. Real-time network policy checking using header space analysis. In Presented as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13), pages 99–111, 2013.
[19] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis: Static checking for networks. In Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12), pages 113–126, 2012.
[20] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow: Verifying network-wide invariants in real time. In Presented as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13), pages 15–27, 2013.
[21] T. H.-J. Kim, C. Basescu, L. Jia, S. B. Lee, Y.-C. Hu, and A. Perrig. Lightweight source authentication and path validation. In ACM SIGCOMM Computer Communication Review, volume 44, pages 271–282. ACM, 2014.
[22] R. Klöti, V. Kotronis, and P. Smith. OpenFlow: A security analysis. In 21st IEEE International Conference on Network Protocols (ICNP), pages 1–6. IEEE, 2013.
[28] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. Godfrey, and S. T. King. Debugging the data plane with Anteater. In ACM SIGCOMM Computer Communication Review, volume 41, pages 290–301. ACM, 2011.
[29] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. OpenFlow: Enabling innovation in campus networks. ACM SIGCOMM Computer Communication Review, 38(2):69–74, 2008.
[30] S. Meloni, J. Gómez-Gardenes, V. Latora, and Y. Moreno. Scaling breakdown in flow fluctuations on complex networks. Physical review letters, 100(20):208701, 2008.
[31] A. T. Mizrak, Y.-C. Cheng, K. Marzullo, and S. Savage. Fatih: Detecting and isolating malicious routers. In 2005 International Conference on Dependable Systems and Networks (DSN’05), pages 538–547. IEEE, 2005.
[32] A. T. Mizrak, S. Savage, and K. Marzullo. Detecting malicious packet losses. IEEE Transactions on Parallel and Distributed Systems, 20(2):191–206, 2009.
[33] Open Networking Foundation (ONF). SDN architecture, ONF TR-502. opennetworking.org/images/stories/downloads/sdn-resources/technical-reports/TR-SDN-ARCH-1.0-06062014.pdf.
[34] S. Orlowski, R. Wessäly, M. Pióro, and A. Tomaszewski. SNDlib 1.0—Survivable network design library. Networks, 55(3):276–286, 2010.
[35] N. Pelekis, I. Kopanakis, C. Panagiotakis, and Y. Theodoridis. Unsupervised trajectory sampling. In Machine learning and knowledge discovery in databases, pages 17–33. Springer, 2010.
[36] J. Rasley, B. Stephens, C. Dixon, E. Rozner, W. Felter, K. Agarwal, J. Carter, and R. Fonseca. Planck: Millisecond-scale monitoring and control for commodity networks. ACM SIGCOMM Computer Communication Review, 44(4):407–418, 2015.
[37] Route Views. http://www.routeviews.org.
[38] S. Scott-Hayward, S. Natarajan, and S. Sezer. A survey of security in software-defined networks. IEEE Communications Surveys & Tutorials, 18(1):623–654, 2015.
[39] N. Spring, R. Mahajan, D. Wetherall, and T. Anderson. Measuring ISP topologies with Rocketfuel. IEEE/ACM Transactions on Networking, 12(1):2–16, 2004.
[40] J. Suh, T. T. Kwon, C. Dixon, W. Felter, and J. Carter. OpenSample: A low-latency, sampling-based measurement platform for commodity SDN. In Distributed Computing Systems (ICDCS), 2014 IEEE 34th International Conference on, pages 228–237. IEEE, 2014.
[41] H. Zeng, S. Zhang, F. Ye, V. Jeyakumar, M. Ju, J. Liu, N. McKeown, and A. Vahdat. Libra: Divide and conquer to verify forwarding tables in huge networks. In 11th USENIX Symposium on Networked Systems Design and Implementation (NSDI 14), pages 87–99, 2014.
[42] X. Zhang, C. Lan, and A. Perrig. Secure and scalable fault localization under dynamic traffic patterns. In Security and Privacy (SP), 2012 IEEE Symposium on, pages 317–331. IEEE, 2012.
[23] S. Knight, H. X. Nguyen, N. Falkner, R. Bowden, and M. Roughan. The Internet topology zoo. IEEE Journal on Selected Areas in Communications, 29(9):1765–1775, 2011.
[43] X. Zhang, Z. Zhou, H.-C. Hsiao, T. H.-J. Kim, A. Perrig, and P. Tague. ShortMAC: Efficient data-plane fault localization. In NDSS, 2012.
[24] D. Kreutz, F. Ramos, and P. Verissimo. Towards secure and dependable software-defined networks. In Proceedings of the second ACM SIGCOMM workshop on Hot topics in software-defined networking, pages 55–60. ACM, 2013.
[25] D. Kreutz, F. M. Ramos, P. E. Verissimo, C. E. Rothenberg, S. Azodolmolky, and S. Uhlig. Software-defined networking: A comprehensive survey. Proceedings of the IEEE, 103(1):14–76, 2015.
[26] LBNL/ICSI Enterprise Tracing Project. http://www.icir.org/enterprise-tracing/.
[27] J.-G. Lee, J. Han, and X. Li. Trajectory outlier detection: A partition-and-detect framework. In 2008 IEEE 24th International Conference on Data Engineering, pages 140–149. IEEE, 2008.
[44] Y. J. Zhu and L. Jacob. On making TCP robust against spurious retransmissions. Computer Communications, 28(1):25–36, 2005.

### Appendix
#### A. Network Topologies
For completeness, we include representations of the network topologies used in our evaluations in Figure 11. Figure 11a shows the topology used in the AARNet Setup, extracted from the Internet Topology Zoo [23]. Figure 11b illustrates the topology used in the Zib54 Setup, extracted from SNDlib [34]. Figure 11c shows the network topology used in the Sprint Setup, where each node represents multiple interconnected forwarding devices, extracted from [39].

**Figure 11: Network Topologies Used in WedgeTail Evaluations**
- **a:** AARNet network topology simulated in the AARNet Setup.
- **b:** Zib54 network topology simulated in the Zib54 Setup.
- **c:** Backbone topology of Sprint simulated in the Sprint Setup.