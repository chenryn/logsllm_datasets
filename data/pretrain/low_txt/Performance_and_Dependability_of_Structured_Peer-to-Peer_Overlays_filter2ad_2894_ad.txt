# Optimized Text

## Introduction
Structured peer-to-peer (P2P) overlays provide a robust foundation for building distributed applications. However, concerns about their performance and dependability in real-world environments with high churn rates remain. This paper introduces MSPastry, which incorporates advanced techniques to achieve high performance and dependability. 

## Performance and Dependability
### Active Probing and Per-Hop Acknowledgments
The use of per-hop acknowledgments (acks) and active probing significantly reduces delay in P2P networks. When nodes generate 0.01 lookups per second, the delay with per-hop acks is 17% higher than when both techniques are used. If nodes generate 0.001 lookups per second, the delay is 61% higher. Active probing reduces delays by minimizing per-hop timeouts. In non-uniform traffic or daily/weekly variations, both techniques are essential.

### Tuning Active Probing
The active probing rate can be adjusted to achieve a target raw loss rate (Lr). Results from all traces show that self-tuning effectively achieves the desired Lr. For instance, without per-hop acks, a 5.3% message loss rate is achieved when tuning to 5%, and 1.2% when tuning to 1%. A lower Lr results in lower delay but increases control traffic. Changing the target from 5% to 1% increases control traffic by 2.6 times. The base configuration uses a 5% target, providing a good balance between overhead and delay with per-hop acks.

### Traffic Suppression
Active probing generates extra control traffic, which is less beneficial when application traffic is high. MSPastry suppresses probes and heartbeats using application traffic to reduce overhead. Increasing application traffic from 0 to 1 lookup per second per node suppresses over 70% of active probes. Additionally, the average time to failure detection improves by 13%.

## Simulator Validation
Several applications have been deployed using MSPastry, including a video broadcast using SplitStream on 108 desktop machines across Microsoft's network. Squirrel, a web cache, has been the primary cache for 52 machines at Microsoft Research Cambridge. Traces from Squirrel were used to validate the simulator.

### Squirrel Deployment
Squirrel users run a proxy on their machine, and web requests are redirected through this local proxy. Squirrel generates keys for web objects using SHA-1 hashing. Lookup messages are sent through MSPastry to the key of the requested object, and the root node caches the object.

Node arrivals, failures, and page lookups were logged in the Squirrel deployment. These logs generated a workload trace for the simulator. Figure 8 shows the total traffic per node from December 11th to December 17th, 2003. The simulation results closely match the real deployment statistics.

## Conclusions
MSPastry addresses the performance and dependability issues of structured P2P overlays in high-churn environments. Large-scale simulations with fault injection, guided by real traces, demonstrate that MSPastry achieves reliable routing with low delay and maintenance overhead. The system degrades gracefully with failures.

MSPastry, Squirrel, SplitStream, and the simulator are available to academic institutions upon request.

## References
[1] R. Bhagwan, S. Savage, and G. Voelker. Understanding availability. In IPTPS’03, February 2003.
[2] W. J. Bolosky, J. R. Douceur, D. Ely, and M. Theimer. Feasibility of a serverless distributed file system deployed on an existing set of desktop PCs. In SIGMETRICS’2000, pages 34–43, 2000.
[3] M. Castro, P. Druschel, A. Ganesh, A. Rowstron, and D. S. Wallach. Security for structured peer-to-peer overlay networks. In OSDI, Dec. 2002.
[4] M. Castro, P. Druschel, Y. C. Hu, and A. Rowstron. Exploiting network proximity in peer-to-peer overlay networks. Technical Report MSR-TR-2002-82, Microsoft Research, May 2002.
[5] M. Castro, P. Druschel, Y. C. Hu, and A. Rowstron. Proximity neighbor selection in tree-based structured peer-to-peer overlays. Technical Report MSR-TR-2003-52, Microsoft Research, June 2003.
[6] M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron, and A. Singh. SplitStream: High-bandwidth multicast in a cooperative environment. In SOSP’03, Oct. 2003.
[7] M. Castro, P. Druschel, A.-M. Kermarrec, and A. Rowstron. Scribe: A large-scale and decentralized application-level multicast infrastructure. IEEE JSAC, 20(8), October 2002.
[8] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and I. Stoica. Wide-area cooperative storage with CFS. In Proc. ACM SOSP’01, Banff, Canada, Oct. 2001.
[9] F. Dabek, J. Li, E. Sit, J. Robertson, M. F. Kaashoek, and R. Morris. Designing a DHT for Low Latency and High Throughput. In NSDI, March 2004.
[10] K. P. Gummadi, R. Gummadi, S. D. Gribble, S. Ratnasamy, S. Shenker, and I. Stoica. The impact of DHT routing geometry on resilience and proximity. In SIGCOMM, 2003.
[11] K. Hildrum, J. D. Kubiatowicz, S. Rao, and B. Y. Zhao. Distributed data location in a dynamic network. In SPAA’02, Aug. 2002.
[12] S. Iyer, A. Rowstron, and P. Druschel. Squirrel: A decentralized peer-to-peer web cache. In PODC, July 2002.
[13] P. Karn and C. Partridge. Improving round-trip estimates in reliable transport protocols. Theoretical Computer Science, 4(9):364–373, 1991.
[14] J. Li, J. Stribling, T. M. Gil, R. Morris, and F. Kaashoek. Comparing the performance of distributed hash tables under churn. In IPTPS, February 2004.
[15] R. Mahajan, M. Castro, and A. Rowstron. Controlling the cost of reliability in peer-to-peer overlays. In IPTPS’03, Feb. 2003.
[16] A. Muthitacharoen, R. Morris, T. Gil, and B. Chen. Ivy: A read/write peer-to-peer file system. In OSDI, Dec. 2002.
[17] C. G. Plaxton, R. Rajaraman, and A. W. Richa. Accessing nearby copies of replicated objects in a distributed environment. In SPAA, pages 311–320, June 1997.
[18] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker. A scalable content-addressable network. In SIGCOMM’01, San Diego, CA, Aug. 2001.
[19] S. Rhea, D. Geels, T. Roscoe, and J. Kubiatowicz. Handling Churn in a DHT. In Usenix, June 2004.
[20] A. Rowstron and P. Druschel. Pastry: Scalable, distributed object location and routing for large-scale peer-to-peer systems. In Middleware, Heidelberg, Germany, Nov. 2001.
[21] A. Rowstron and P. Druschel. Storage management and caching in PAST, a large-scale, persistent peer-to-peer storage utility. In SOSP’01, Banff, Canada, Oct. 2001.
[22] S. Saroiu, K. Gummadi, and S. Gribble. A measurement study of peer-to-peer file sharing systems. In MMCN, Jan. 2002.
[23] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup service for Internet applications. In SIGCOMM’01, San Diego, CA, Aug. 2001.
[24] H. Tangmunarunkit, R. Govindan, D. Estrin, and S. Shenker. The impact of routing policy on internet paths. In Proc. 20th IEEE INFOCOM, Alaska, USA, Apr. 2001.
[25] E. Zegura, K. Calvert, and S. Bhattacharjee. How to model an inter-network. In INFOCOM, 1996.
[26] S. Q. Zhuang, B. Y. Zhao, A. D. Joseph, R. H. Katz, and J. Kubiatowicz. Bayeux: An architecture for scalable and fault-tolerant wide-area data dissemination. In NOSSDAV, June 2001.

---

This optimized text provides a clearer, more coherent, and professional presentation of the original content.