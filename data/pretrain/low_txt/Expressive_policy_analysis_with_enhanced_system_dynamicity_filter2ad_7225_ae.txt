### 4.3 Termination and Complexity

We consider the termination and computational complexity properties of two key aspects of our formal framework: the runtime evaluation of policy rules and the offline analysis of policies using the abductive approach described earlier. By "evaluation," we mean determining the answers to queries about which actions are permitted, denied, or constrained by obligations, using SLDNF (Selective Linear Definite Negation First).

The language we use, which includes sorts such as Subject, Target, Action, Fluent, and Event, is finite. If we further stipulate that the models of a domain-constrained policy \( P = \Pi \cup D \) must be such that in the security policy component \(\Pi\), there is a maximum value \( t \) such that whenever a body of a policy rule is made true by the model, all time indices must belong to some interval \([t_s, t_s + t]\), and if only a finite number of actions can occur within any given finite time, then a finite amount of information needs to be stored about the system evolution to evaluate policies.

For example, if the policy includes:
\[ \text{permitted}(Sub, Tar, Act, T) \leftarrow \text{holdsAt}(f, T'), T = T' + 10, \]
we know we must record information about whether the fluent \( f \) holds 10 seconds in the past. Beyond 10 seconds, we may not need to store this information, depending on the other policies in \(\Pi\). For any given domain-constrained policy, a bound on the amount of domain-dependent information that needs to be stored can be calculated based on the language, the policy set, and the domain description.

To ensure that the evaluation of policy rules expressed in our formalism terminates and runs efficiently, we must ensure that there are no circular dependencies among the members of our security policies (see Definition 7). We achieve this by insisting that there is a total ordering among the triples \((Sub, Tar, Act)\), such that whenever an authorization or obligation policy rule contains \((Sub, Tar, Act)\) in the head with time index \( T \), all literals with time index \( T' = T \) in the body of the predicates permitted, denied, and obl can only contain \((Sub', Tar', Act')\) such that \((Sub', Tar', Act') < (Sub, Tar, Act)\) in the ordering. Furthermore, whenever a negative literal in the body of a policy rule contains a variable, that variable should also appear in some positive literal of the body. This ensures that the selection of literals during policy evaluation is safe in the sense of logic programming.

Under these conditions, a result from [12] can be used to show that the evaluation of queries for literals of permitted, denied, and obl can be performed in time polynomial in the length of the preceding history relevant to queries, with these histories being bounded by the size of the language, which we assume to be finite. Authorizations are typically evaluated when a request is received for permission to perform an action, and the fulfillment of obligations can be monitored using techniques such as view maintenance in relational databases or a version of the RETE algorithm for production rules. We also have soundness and completeness theorems for our formal framework for policy evaluation queries.

In the case of analysis tasks using the ACLP abductive procedures, matters are more complex. We have a guarantee of soundness. In the most general case, our language is expressive enough to allow the presence of circular dependencies among literals in policy rules, and thus there is no guarantee of termination and, consequently, no guarantee of completeness at the most general and unrestricted level. However, if we add a further restriction that, in addition to a maximum time interval \([t_s, t_s + t]\) in the body of policy rules (as we did for policy evaluation), there is also a maximum time in the past that we will recurse over in our analyses, we can ensure termination and completeness. Additionally, our language is expressive enough to represent, and our analysis algorithms powerful enough to solve, classes of problems such as those identified in [32] and [21], which are NP-hard, indicating the computational complexity of the abductive analysis we use. Having abduction as a uniform mechanism for solving analysis problems allows us to work on optimizations and approximations for abductive procedures semi-independently of the analysis. The implementation of abduction we use now is more general than strictly required for our analyses.

### 5. Conclusion

Our framework was designed to meet the requirements of expressiveness, efficiency, and fine-grained defaults. Many languages aim to achieve some of these goals, but none succeed in balancing them all. We defined the structure of the policy language and described how we use the Event Calculus (EC) to depict and reason about changing properties of the system. We provided examples of authorization and obligation rules and discussed how abductive algorithms at the heart of our framework can be used in the analysis, including the current implementation.

By separating the representation of the laws of system evolution and constraints on the system state from the authorizations and obligations that define policy decisions, we gain clarity in the representation and the ability to switch domain descriptions easily and study the behavior of policies on different systems.

The choices we made in the design of the language show that it is possible to encode subtle default relationships and decisions without sacrificing efficiency, readability, or conciseness. The use of temporal constraints and an explicit representation of time has enabled us to express complex dependencies of policy decisions on changing system states, as well as on other policies.

Abductive Constraint Logic Programming (ACLP) is a suitable paradigm for the kinds of analysis tasks we wish to perform on policies. We have successfully used it to provide rich diagnostic information on the system traces and initial conditions that give rise to properties of policies in heterogeneous environments. In this way, the use of ACLP with the Event Calculus and separable policies and system representations has been shown to be an effective combination for policy analysis. We have also used abduction in our analysis framework to fill in partially-specified systems, generating initial conditions that might give rise to, for example, modality conflicts as hypotheses.

Further work is ongoing at both the implementation and theoretical levels. Currently, all suitable ACLP systems use integers as the basis for their constraints, but the modularity of the abductive approach we have taken means that an implementation based on real numbers is entirely feasible. We are also completing work on translations between our framework and other languages for policy representation. We currently have translation schemes for Ponder2 [31] and are working on schemes for XACML [30] and others.

Our broader objective is to define a refinement framework, of which the analysis framework will form a part. Within this context, an expressive abstract policy language is necessary to represent a broad spectrum of high-level policies and to accommodate different concrete mechanisms on which policies need to be implemented. Our previous work on policy refinement [3] for network quality of service management suggests that many of the properties we have built into our analysis framework (expressivity, separation of the laws for system change from policies, flexible expression of defaults, etc.) are also valuable for policy refinement.

A formal policy framework must incorporate obligations as well as authorizations, include an analysis component using information about changing system state for accurate proof of significant properties, provide rich diagnostic information as output, separate the representation of the system from policy, and include policies that depend on each other.

### 6. Additional Authors
- Seraphin Calo (IBM T.J. Watson Research Center, email: PI:EMAIL)
- Morris Sloman (Department of Computing, Imperial College London, email: PI:EMAIL)

### 7. References
[1] D. Alrajeh, O. Ray, A. Russo, and S. Uchitel. Extracting requirements from scenarios with ILP. In S. Muggleton, R. P. Otero, and A. Tamaddoni-Nezhad, editors, ILP, volume 4455 of LNCS, pages 64–78. Springer, 2006.
[2] A. Bandara, S. Calo, R. Craven, J. Lobo, E. Lupu, J. Ma, A. Russo, and M. Sloman. An expressive policy analysis framework with enhanced system dynamicity. Technical Report, Department of Computing, Imperial College London, 2008.
[3] A. K. Bandara, E. C. Lupu, A. Russo, N. Dulay, M. Sloman, P. Flegkas, M. Charalambides, and G. Pavlou. Policy refinement for DiffServ quality of service management. In Integrated Network Management, pages 469–482. IEEE, 2005.
[4] S. Barker. Security policy specification in logic. In Proc. of Int. Conf. on AI, pages 143–148, June 2000.
[5] M. Y. Becker and S. Nanz. A logic for state-modifying authorization policies. In ESORICS, pages 203–218, 2007.
[6] M. Y. Becker and S. Nanz. The role of abduction in declarative authorization policies. In P. Hudak and D. S. Warren, editors, PADL, volume 4902 of LNCS, pages 84–99. Springer, 2008.
[7] M. Y. Becker and P. Sewell. Cassandra: Flexible trust management, applied to electronic health records. In CSFW, pages 139–154. IEEE Computer Society, 2004.
[8] D. F. C. Brewer and M. J. Nash. The Chinese Wall security policy. In IEEE Symposium on S & P, pages 206–214, 1989.
[9] G. Bruns, D. S. Dantas, and M. Huth. A simple and expressive semantic framework for policy composition in access control. In P. Ning, V. Atluri, V. D. Gligor, and H. Mantel, editors, FMSE, pages 12–21. ACM, 2007.
[10] G. Bruns and M. Huth. Access-control policies via Belnap logic: Effective and efficient composition and analysis. In CSF, pages 163–176. IEEE Computer Society, 2008.
[11] S. Chen, D. Wijesekera, and S. Jajodia. Incorporating dynamic constraints in the flexible authorization framework. In ESORICS, pages 1–16, 2004.
[12] J. Chomicki. Efficient checking of temporal integrity constraints using bounded history encoding. ACM Trans. Database Syst., 20(2):149–186, 1995.
[13] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Ponder policy specification language. In M. Sloman, J. Lobo, and E. Lupu, editors, POLICY, volume 1995 of LNCS, pages 18–38. Springer, 2001.
[14] D. J. Dougherty, K. Fisler, and S. Krishnamurthi. Specifying and reasoning about dynamic access-control policies. In U. Furbach and N. Shankar, editors, IJCAR, volume 4130 of LNCS, pages 632–646. Springer, 2006.
[15] D. J. Dougherty, K. Fisler, and S. Krishnamurthi. Obligations and their interaction with programs. In ESORICS, pages 375–389, 2007.
[16] D. Ferraiolo and D. Kuhn. Role-based access control. In 15th National Computer Security Conference, pages 554–563, 1992.
[17] K. Fisler, S. Krishnamurthi, L. A. Meyerovich, and M. C. Tschantz. Verification and change-impact analysis of access-control policies. In G.-C. Roman, W. G. Griswold, and B. Nuseibeh, editors, ICSE, pages 196–205. ACM, 2005.
[18] M. Gelfond and V. Lifschitz. The stable model semantics for logic programming. In R. Kowalski and K. Bowen, editors, Proc. 5th International Conference and Symposium on Logic Programming, pages 1070–1080, Seattle, Washington, August 15-19 1988.
[19] R. Goldblatt. Logics of Time and Computation. Center for the Study of Language and Information, Stanford, CA, USA, 2nd edition, 1992.
[20] J. Y. Halpern and V. Weissman. Using first-order logic to reason about policies. ACM Trans. Inf. Syst. Secur., 11(4), 2008.
[21] K. Irwin, T. Yu, and W. H. Winsborough. On the modeling and analysis of obligations. In Proc. of ACM CCS, pages 134–143, 2006.
[22] S. Jajodia, P. Samarati, M. L. Sapino, and V. S. Subrahmanian. Flexible support for multiple access control policies. ACM Trans. Database Syst., 26(2):214–260, 2001.
[23] S. Jajodia, P. Samarati, and V. Subrahmanian. A logical language for expressing authorizations. In Proc. of the IEEE Symposium on S & P, pages 31–42, 1997.
[24] S. Jajodia, P. Samarati, V. Subrahmanian, and E. Bertino. A unified framework for enforcing multiple access control policies. In Proc. of the ACM SIGMOD Conf., May 1997.
[25] R. Kowalski and M. Sergot. A logic-based calculus of events. New Generation Computing, 4:67–95, 1986.
[26] P. Loscocco and S. Smalley. Integrating flexible support for security policies into the Linux operating system. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, pages 29–42, Berkeley, CA, USA, 2001. USENIX Association.
[27] J. McCarthy. Elaboration tolerance. In Proc. Common Sense 98, 1998.
[28] R. Miller and M. Shanahan. Some alternative formulations of the event calculus. In A. C. Kakas and F. Sadri, editors, Computational Logic: Logic Programming and Beyond, volume 2408 of LNCS, pages 452–490. Springer, 2002.
[29] C. Nomikos, P. Rondogiannis, and M. Gergatsoulis. Temporal stratification tests for linear and branching-time deductive databases. Theor. Comput. Sci., 342(2-3):382–415, 2005.
[30] OASIS XACML TC. Extensible Access Control Markup Language (XACML) v2.0, 2005.
[31] G. Rusello, C. Dong, and N. Dulay. Authorization and conflict resolution for hierarchical domains. In Proc. of IEEE Policy Workshop, June 2007.
[32] R. Sandhu, V. Bhamidipati, and Q. Munawer. The ARBAC97 model for role-based administration of roles. ACM Trans. Inf. Syst. Secur., 2(1):105–135, 1999.
[33] R. Simon and M. E. Zurko. Separation of duty in role-based environments. In CSFW, pages 183–194. IEEE Computer Society, 1997.
[34] B. Van Nuffelen. Abductive Constraint Logic Programming: Implementation and Applications. PhD thesis, K.U.Leuven, Belgium, June 2004.