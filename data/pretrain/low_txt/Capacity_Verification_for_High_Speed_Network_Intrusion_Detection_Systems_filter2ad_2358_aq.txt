### Script to Launch Multiple Attacks

It is plausible that an attacker or a group of attackers might initiate a series of attacks, hoping that at least one will succeed. While these alerts are indeed related, the method used for alert correlation tends to be overly inclusive. The primary goal of alert correlation is to uncover the relationships between the underlying attacks; however, any correlation method can make errors when there is insufficient information. There are several other interesting attack strategies, but due to space constraints, they are not listed here.

### Observations with Clustering Constraint Cc2

One notable observation is that, under the clustering constraint Cc2, there are few hyper-alert correlation graphs with more than three stages. Given the high number of alerts related to BackOriﬁce and NetBus (tools used for remote host management), it is likely that many attackers employed multiple machines during their attacks. As a result, their strategies may not be fully captured by the restricted hyper-alert correlation graphs.

### Relaxing the Clustering Constraint

When we relax the clustering constraint to allow hyper-alert correlation graphs involving different source IP addresses but the same destination IP addresses (i.e., using clustering constraint Cc1), we observe graphs with more stages. Figure 6 illustrates a fully reduced hyper-alert correlation graph. However, the large number of alerts and source IP addresses involved in this graph makes it challenging to determine which hyper-alerts belong to the same sequence of attacks.

### Summary of Analysis

During the analysis of the DEF CON 8 CTF dataset, our utilities significantly simplified the process. We identified several attack strategies that were possibly used during the attacks. However, there were instances where we could not distinguish between multiple sequences of attacks, indicating that further work is needed to address this issue.

### Conclusion and Future Work

In this paper, we presented three utilities—adjustable graph reduction, focused analysis, and graph decomposition—to facilitate the analysis of large sets of correlated alerts. We evaluated the effectiveness of these utilities through a case study using the DEF CON 8 CTF dataset [10]. Our results show that these utilities can simplify the analysis of large volumes of alerts and reveal several recurring attack strategies.

Due to the nature of the DEF CON 8 CTF dataset, we were unable to assess the success rate of the alert correlation method. Although we identified several attack strategies, there were situations where it was difficult to draw definitive conclusions about the attack strategies. A hyper-alert correlation graph is an approximation of a real attack strategy, so the hyper-alert correlation method and the three utilities should be used with caution.

Our future work includes improving alert correlation techniques, automating the analysis process, refining our toolkit, and systematically developing hyper-alert types. We also plan to analyze alert streams from operational networks such as the NC State University campus network.

### Acknowledgments

This work is partially supported by the U.S. Army Research Office under grant DAAD19-02-1-0219, the National Science Foundation under grant 0207297, and the NCSU Center for Advanced Computing & Communication. The authors would like to thank the anonymous reviewers for their valuable comments.

### References

1. Javits, H., Valdes, A.: The NIDES statistical component: Description and justification. Technical report, SRI International, Computer Science Laboratory (1993)
2. Vigna, G., Kemmerer, R.A.: NetSTAT: A network-based intrusion detection system. Journal of Computer Security 7 (1999) 37–71
3. Valdes, A., Skinner, K.: Probabilistic alert correlation. In: Proceedings of the 4th International Symposium on Recent Advances in Intrusion Detection (RAID 2001). (2001) 54–68
4. Debar, H., Wespi, A.: Aggregation and correlation of intrusion-detection alerts. In: Recent Advances in Intrusion Detection. LNCS 2212 (2001) 85 – 103
5. Dain, O., Cunningham, R.: Fusing a heterogeneous alert stream into scenarios. In: Proceedings of the 2001 ACM Workshop on Data Mining for Security Applications. (2001) 1–13
6. Ning, P., Reeves, D.S., Cui, Y.: Correlating alerts using prerequisites of intrusions. Technical Report TR-2001-13, North Carolina State University, Department of Computer Science (2001)
7. Ning, P., Cui, Y.: An intrusion alert correlator based on prerequisites of intrusions. Technical Report TR-2002-01, North Carolina State University, Department of Computer Science (2002)
8. MIT Lincoln Lab: 2000 DARPA intrusion detection scenario specific datasets. http://www.ll.mit.edu/IST/ideval/data/2000/2000 data index.html (2000)
9. Manganaris, S., Christensen, M., Zerkle, D., Hermiz, K.: A data mining analysis of RTID alarms. Computer Networks 34 (2000) 571–577
10. DEFCON: Def con capture the flag (CTF) contest. http://www.defcon.org/html/defcon-8-post.html (2000) Archive accessible at http://wi2600.org/mediawhore/mirrors/shmoo/.
11. Bace, R.: Intrusion Detection. Macmillan Technology Publishing (2000)
12. Staniford, S., Hoagland, J., McAlerney, J.: Practical automated detection of stealthy portscans. To appear in Journal of Computer Security (2002)
13. Templeton, S., Levit, K.: A requires/provides model for computer attacks. In: Proceedings of New Security Paradigms Workshop, ACM Press (2000) 31 – 38
14. Cuppens, F., Miege, A.: Alert correlation in a cooperative intrusion detection framework. In: Proceedings of the 2002 IEEE Symposium on Security and Privacy. (2002)
15. Staniford-Chen, S., Cheung, S., Crawford, R., Dilger, M., Frank, J., Hoagland, J., Levitt, K., Wee, C., Yip, R., Zerkle, D.: GrIDS - a graph based intrusion detection system for large networks. In: Proceedings of the 19th National Information Systems Security Conference. Volume 1. (1996) 361–370
16. Ilgun, K., Kemmerer, R.A., Porras, P.A.: State transition analysis: A rule-based intrusion detection approach. IEEE Transaction on Software Engineering 21 (1995) 181–199
17. Cuppens, F., Ortalo, R.: LAMBDA: A language to model a database for detection of attacks. In: Proc. of Recent Advances in Intrusion Detection (RAID 2000). (2000) 197–216
18. Lin, J., Wang, X.S., Jajodia, S.: Abstraction-based misuse detection: High-level specifications and adaptable strategies. In: Proceedings of the 11th Computer Security Foundations Workshop, Rockport, MA (1998) 190–201
19. Ning, P., Jajodia, S., Wang, X.S.: Abstraction-based intrusion detection in distributed environments. ACM Transactions on Information and System Security 4 (2001) 407–452
20. Gruschke, B.: Integrated event management: Event correlation using dependency graphs. In: Proceedings of the 9th IFIP/IEEE International Workshop on Distributed Systems: Operations & Management. (1998)
21. Ricciulli, L., Shacham, N.: Modeling correlated alarms in network management systems. In: In Western Simulation Multiconference. (1997)
22. Gardner, R., Harle, D.: Pattern discovery and specification translation for alarm correlation. In: Proceedings of Network Operations and Management Symposium (NOMS’98). (1998) 713–722
23. ISS, Inc.: RealSecure intrusion detection system. (http://www.iss.net)
24. AT & T Research Labs: Graphviz - open source graph layout and drawing software. (http://www.research.att.com/sw/tools/graphviz/)

### A Mission-Impact-Based Approach to INFOSEC Alarm Correlation

**Phillip A. Porras, Martin W. Fong, and Alfonso Valdes**
SRI International
333 Ravenswood Avenue
Menlo Park, CA 94025-3493
{porras,mwfong,valdes}@sdl.sri.com

#### Abstract

We describe a mission-impact-based approach to the analysis of security alerts produced by spatially distributed heterogeneous information security (INFOSEC) devices, such as firewalls, intrusion detection systems, authentication services, and antivirus software. The intent of this work is to deliver an automated capability to reduce the time and cost of managing multiple INFOSEC devices through a strategy of topology analysis, alert prioritization, and common attribute-based alert aggregation. Our efforts to date have led to the development of a prototype system called the EMERALD Mission Impact Intrusion Report Correlation System, or M-Correlator. M-Correlator is intended to provide analysts (at all experience levels) a powerful capability to automatically fuse together and isolate those INFOSEC alerts that represent the greatest threat to the health and security of their networks.

#### Keywords

Network security, intrusion report correlation, alert management, alert prioritization.

#### 1. Introduction

Among the most visible areas of active research in the intrusion detection community is the development of technologies to manage and interpret security-relevant alert streams produced from an ever-increasing number of INFOSEC devices. While the bulk of the work in security alert management and intrusion report correlation has spawned from the intrusion detection community, this paper takes a much broader definition of alert stream contributors. Over recent years, the growing number of security enforcement services, access logs, intrusion detection systems, authentication servers, vulnerability scanners, and various operating system and application logs have given administrators a potential wealth of information to gain insight into security-relevant activities occurring within their systems. We broadly define these various security-relevant log producers as INFOSEC devices, and recognize them as having potential contributions to the problems of security incident detection and confidence reinforcement in discerning the credibility of INFOSEC alarms.

Unfortunately, this broader view of alert stream contributors adds to the complexity facing intrusion report correlation systems. INFOSEC devices range greatly in function, even within a single technology. For example, within the intrusion detection space, the variety of analysis methods that may be employed, the spatial distribution of sensors, and their target event streams (network traffic, host audit logs, other application logs), increases the difficulty in understanding the semantics of what each sensor is reporting, as well as the complexity of determining equivalence among the intrusion reports from different sensors.

The motivation for our work is straightforward: as we continue to incorporate and distribute advanced security services into our networks, we need the ability to understand the various forms of hostile and fault-related activity that our security services observe as they help to preserve the operational requirements of our systems. Today, in the absence of significant fieldable technology for security-incident correlation, there are several challenges in providing effective security management for mission-critical network environments:

- **Domain expertise**: Not widely available to interpret and isolate high-threat operations within active and visible Internet-connected networks. Also, skills are needed to understand the conditions under which one may merge INFOSEC alerts from different sources (e.g., merging firewall and OS syslogs with intrusion detection reports). In an environment where thousands (or tens of thousands) of INFOSEC alarms may be produced daily, it is important to understand redundancies in alert production that can simplify alert interpretation. Equally important are algorithms for prioritizing which security incidents pose the greatest administrative threats.
- **Volume of alerts**: The sheer volume of INFOSEC device alerts makes security management a time-consuming and therefore expensive effort. There are numerous examples of organizations that have found even small deployment of IDS sensors to be an overwhelming management cost. As a result, these IDS components are often tuned down to an extremely narrow and ad hoc selection of a few detection heuristics, effectively minimizing the coverage of the IDS tool.
- **Leveraging complementary information**: It is difficult to leverage potentially complementary information produced from heterogeneous INFOSEC devices. For example, information captured in a firewall log is typically manually analyzed in isolation from potentially relevant alert information captured by an IDS, syslog, or other INFOSEC alert source.

The remainder of this paper describes the design, implementation, and provides illustrative experiments developed during a two-year research study of IDS interoperability and intrusion report management that address the above issues.

#### 2. EMERALD M-Correlator Algorithm Overview

M-Correlator is designed to consolidate and rank a stream of security incidents relative to the needs of the analyst, given the topology and operational objectives of the protected network. The first phase of INFOSEC alert processing involves dynamically controllable filters, which provide remote subscribers with an ability to eliminate low-interest alerts while not preventing INFOSEC devices from producing alerts that may be of interest to other analysts. Next, the alerts are vetted against the known topology of the target network. A relevance score (Section 2.2) is produced through a comparison of the alert target’s known topology against the known vulnerability requirements of the incident type (i.e., incident vulnerability dependencies). Vulnerability dependency information is provided to M-Correlator through an Incident Handling Fact Base (Section 2.1). Next, a priority calculation (Section 2.3) is performed per alert to indicate (a) the degree to which an alert is targeting a critical asset or resource, and (b) the amount of interest the user has registered for this class of security alert. Last, an overall incident rank (Section 2.4) is assigned to each alert, which provides a combined assessment of the degree to which the incident appears to impact the overall mission of the network, and the probability that the activity reported in this alert was successful.

M-Correlator next attempts to combine related alerts with an attribute-based alert clustering algorithm (Section 3). The resulting correlated incident stream represents a filtered, lower-volume, content-rich security-incident stream, with an incident-ranking scheme that allows analysts to identify those incidents that pose the greatest risk to the currently specified mission objectives of the monitored network.

##### 2.1 An Incident Handling Fact Base

M-Correlator includes an Incident Handling Fact Base that provides the necessary information to optimally interpret alert content against the mission specification and relevance analysis. The incident handling fact base provides critical information needed to:

- Augment terse INFOSEC device alerts with meaningful descriptive information and associate alerts with M-Correlator-specific incident codes and classifications.
- Understand the dependencies of incident types to their required OS versions, hardware platforms, network services, and applications.
- Understand which incident types can be merged by the M-Correlator alert clustering algorithm.

Table 1 enumerates the field definitions of entries in the M-Correlator incident handling fact base. Entries in this fact base are referenced in subsequent sections, which describe topology vetting, prioritization, incident ranking, and alert clustering. The current M-Correlator fact base provides incident definitions for more than 1,000 intrusion report types from ISS’s Realsecure, Snort, the EMERALD suite of host and network-based intrusion detection sensors, and Checkpoint’s Firewall-1 product line. Incident types that are not represented in this fact base can still be managed and aggregated by the M-Correlator; however, the advanced alert clustering and relevance calculations are not performed on alerts that are absent from this fact base.

| Field Type | Description |
|------------|-------------|
| **Incident Code** | A unique code to indicate incident type. These codes have been derived from the original Boeing/NAI IDIP incident codes that were used by the Common Intrusion Detection Framework CISL specification. A mapping between this incident code and other well-known attack code specifications such as Bugtraq ID, CERT ID, and MITRE CVE codes is available using the References field. |
| **COTS Codes** | An equivalent code listing of well-known commercial off-the-shelf (COTS) incident name or numeric code value that expresses this incident. |
| **Incident Class** | An M-Correlator general categorization scheme used for abstractly registering interest in an incident that represents a common impact to the system. Incident types are associated with only one incident class. |
| **Description** | Human-readable incident description. |
| **Vulnerable OS and Hardware** | OS type(s) and version(s), and hardware architectures required for the successful invocation of the incident. |
| **Bound Ports and Applications** | The list of required network services and applications that must be enabled on the target of an alert for this incident type to succeed. |
| **Cluster List** | One or more index values that may be associated with incident types. Two alerts that share a common cluster name may be candidates for merger should other attributes be aligned. |
| **References** | Bugtraq ID, CERT ID, Common Vulnerabilities and Exposures (CVE) ID, and available descriptive URL. |

##### 2.2 Relevance Formulation

M-Correlator maintains an internal topology map of the protected network, which is dynamically managed by the analyst. Automated topology map generation is supported using Nmap, through which M-Correlator can identify the available assets on the network, IP address to hostname mappings, OS type and version information, active TCP and UDP network services per host, and hardware type. Nmap can be run on intervals to maintain an updated topology database, and this database can be dynamically inserted into the M-Correlator runtime process. Given the topology database and the vulnerable OS, hardware, and bound ports fields of the incident-handling knowledge (Section 2.1), M-Correlator develops a relevance score that assesses per alert, the likelihood of successful intrusion.

As each alert is processed by M-Correlator, the associated known dependencies for that alert, as indicated within the incident handling fact base, are compared against the configuration of the target machine. Positive and negative matches against these required dependencies result in increased or decreased weighting of the relevance score, respectively. Our model for calculating asset relevance may identify as many as five attributes that match the known topology of the target host:

- OS type and version
- Hardware type
- Service suite
- Enabled network service
- Application

##### 2.3 Priority Calculation

The priority calculation is performed per alert to indicate (a) the degree to which an alert is targeting a critical asset or resource, and (b) the amount of interest the user has registered for this class of security alert. The priority calculation is based on the following factors:

- **Criticality of the Target**: This factor assesses the importance of the target asset or resource. Critical assets are given higher priority.
- **User Interest**: This factor is based on the user's predefined interest in specific types of alerts. Users can register their interest in certain classes of alerts, and alerts that match these interests are given higher priority.

##### 2.4 Incident Rank

An overall incident rank is assigned to each alert, which provides a combined assessment of the degree to which the incident appears to impact the overall mission of the network and the probability that the activity reported in this alert was successful. The incident rank is calculated by combining the relevance score and the priority score. Alerts with higher ranks are considered more critical and are displayed to the analyst first.

#### 3. Attribute-Based Alert Clustering

M-Correlator next attempts to combine related alerts with an attribute-based alert clustering algorithm. The clustering algorithm identifies alerts that share common attributes, such as the same source IP address, destination IP address, or incident type. Alerts that are determined to be related are grouped into a single correlated incident, reducing the volume of alerts and providing a more comprehensive view of the security situation.

The resulting correlated incident stream represents a filtered, lower-volume, content-rich security-incident stream, with an incident-ranking scheme that allows analysts to identify those incidents that pose the greatest risk to the currently specified mission objectives of the monitored network.

#### 4. Conclusion and Future Work

In this paper, we presented three utilities—adjustable graph reduction, focused analysis, and graph decomposition—to facilitate the analysis of large sets of correlated alerts. We evaluated the effectiveness of these utilities through a case study using the DEF CON 8 CTF dataset [10]. Our results show that these utilities can simplify the analysis of large volumes of alerts and reveal several recurring attack strategies.

Due to the nature of the DEF CON 8 CTF dataset, we were unable to assess the success rate of the alert correlation method. Although we identified several attack strategies, there were situations where it was difficult to draw definitive conclusions about the attack strategies. A hyper-alert correlation graph is an approximation of a real attack strategy, so the hyper-alert correlation method and the three utilities should be used with caution.

Our future work includes improving alert correlation techniques, automating the analysis process, refining our toolkit, and systematically developing hyper-alert types. We also plan to analyze alert streams from operational networks such as the NC State University campus network.

#### Acknowledgments

This work is partially supported by the U.S. Army Research Office under grant DAAD19-02-1-0219, the National Science Foundation under grant 0207297, and the NCSU Center for Advanced Computing & Communication. The authors would like to thank the anonymous reviewers for their valuable comments.