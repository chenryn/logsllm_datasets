# irqdebloat Project Repository
- **Repository URL:** [https://github.com/messlabnyu/irqdebloat](https://github.com/messlabnyu/irqdebloat)
- **Authorized Use:** Limited to Tsinghua University.
- **Download Date:** August 07, 2022, at 12:36:44 UTC from IEEE Xplore.
- **Restrictions Apply.**

## References

1. **Cisco Meraki: Bluetooth Low Energy (BLE)**
   - **URL:** [https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE)](https://documentation.meraki.com/MR/Bluetooth/Bluetooth_Low_Energy_(BLE))

2. **Exploitee.rs**
   - **URL:** [https://www.exploitee.rs/](https://www.exploitee.rs/)

3. **LiME: Linux Memory Extractor**
   - **URL:** [https://github.com/504ensicsLabs/LiME](https://github.com/504ensicsLabs/LiME)

4. **Linux Kernel CVEs: Linux Vulnerability Tracker**
   - **URL:** [https://www.linuxkerncves.com/](https://www.linuxkerncves.com/)

5. **W.A. Arbaugh, D.J. Farber, and J.M. Smith. A Secure and Reliable Bootstrap Architecture.**
   - **Conference:** Proceedings of the 1997 IEEE Symposium on Security and Privacy, 1997.

6. **Arm Ltd. Cortex-M3 Technical Reference Manual: About the NVIC**
   - **URL:** [https://developer.arm.com/documentation/ddi0337/h/nested-vectored-interrupt-controller/about-the-nvic](https://developer.arm.com/documentation/ddi0337/h/nested-vectored-interrupt-controller/about-the-nvic)

7. **Arm Ltd. Generic Interrupt Controllers**
   - **URL:** [https://developer.arm.com/ip-products/system-ip/system-controllers/interrupt-controllers](https://developer.arm.com/ip-products/system-ip/system-controllers/interrupt-controllers)

8. **Babak Amin Azad, Pierre Laperdrix, and Nick Nikiforakis. Less is More: Quantifying the Security Benefits of Debloating Web Applications.**
   - **Conference:** 28th USENIX Security Symposium (USENIX Security 19), August 2019.

9. **Cristian Cadar, Daniel Dunbar, Dawson R Engler, et al. Klee: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs.**
   - **Conference:** OSDI, Volume 8, Pages 209–224, 2008.

10. **Dominique Chanet, Bjorn De Sutter, Bruno De Bus, Ludo Van Put, and Koen De Bosschere. System-Wide Compaction and Specialization of the Linux Kernel.**
    - **Conference:** Proceedings of the 2005 ACM SIGPLAN/SIGBED Conference on Languages, Compilers, and Tools for Embedded Systems, Pages 95–104, 2005.

11. **Daming D. Chen, Maverick Woo, David Brumley, and Manuel Egele. Towards Automated Dynamic Analysis for Linux-Based Embedded Firmware.**
    - **Conference:** NDSS, 2016.

12. **Yurong Chen, Tian Lan, and Guru Venkataramani. DamGate: Dynamic Adaptive Multi-Feature Gating in Program Binaries.**
    - **Conference:** 2017 Workshop on Forming an Ecosystem Around Software Transformation (FEAST 2017), 2017.

13. **Jake Christensen, Ionut Mugurel Anghel, Rob Taglang, Mihai Chiroiu, and Radu Sion. DECAF: Automatic, Adaptive De-Bloating and Hardening of COTS Firmware.**
    - **Conference:** 29th USENIX Security Symposium (USENIX Security 20), Pages 1713–1730, 2020.

14. **Abraham A Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer. Halucinator: Firmware Re-Hosting Through Abstraction Layer Emulation.**
    - **Conference:** 29th USENIX Security Symposium (USENIX Security 20), Pages 1201–1218, USENIX Association, August 2020.

15. **Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy. A Simple, Fast Dominance Algorithm.**
    - **Report:** Technical Report TR-06-33870, January 2006.

16. **Nicola Corna. me cleaner, 2018.**

17. **Nassim Corteggiani, Giovanni Camurati, and Aurélien Francillon. Inception: System-Wide Security Testing of Real-World Embedded Systems Software.**
    - **Conference:** 27th USENIX Security Symposium (USENIX Security 18), Pages 309–326, 2018.

18. **Andrei Costin, Apostolis Zarras, and Aurélien Francillon. Automated Dynamic Firmware Analysis at Scale: A Case Study on Embedded Web Interfaces.**
    - **Conference:** Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security, Pages 437–448, 2016.

19. **Ang Cui and Salvatore J. Stolfo. Defending Embedded Systems with Software Symbiotes.**
    - **Conference:** Proceedings of the 14th International Conference on Recent Advances in Intrusion Detection, 2011.

20. **Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. FIE on Firmware: Finding Vulnerabilities in Embedded Systems Using Symbolic Execution.**
    - **Conference:** 22nd USENIX Security Symposium (USENIX Security 13), Pages 463–478, 2013.

21. **Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan Whelan. Repeatable Reverse Engineering with PANDA.**
    - **Workshop:** Program Protection and Reverse Engineering Workshop (PPREW), 2015.

22. **Andrew Fasano, Tiemoko Ballo, Marius Muench, Tim Leek, Alexander Oleinik, Brendan Dolan-Gavitt, Manuel Egele, Aurélien Francillon, Long Lu, Nick Gregory, Davide Balzarotti, and William Robertson. SoK: Enabling Security Analyses of Embedded Systems via Rehosting.**
    - **Conference:** 16th ACM ASIA Conference on Computer and Communications Security (ASIACCS), June 2021.

23. **Bo Feng, Alejandro Mera, and Long Lu. P2IM: Scalable and Hardware-Independent Firmware Testing via Automatic Peripheral Interface Modeling.**
    - **Conference:** 29th USENIX Security Symposium (USENIX Security 20), Pages 1237–1254, 2020.

24. **Phil Goldstein. Disabling USB Ports: 4 Ways to Prevent Data Leaks via USB Devices.**
    - **URL:** [https://fedtechmagazine.com/article/2017/07/4-ways-prevent-leaks-usb-devices](https://fedtechmagazine.com/article/2017/07/4-ways-prevent-leaks-usb-devices), July 2017.

25. **Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry, Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe, Christophe Kruegel, and Giovanni Vigna. Toward the Analysis of Embedded Firmware Through Automated Re-Hosting.**
    - **Conference:** 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2019), Pages 135–150, Chaoyang District, Beijing, September 2019, USENIX Association.

26. **Lee Harrison, Hayawardh Vijayakumar, Rohan Padhye, Koushik Sen, and Michael Grace. PARTEMU: Enabling Dynamic Analysis of Real-World TrustZone Software Using Emulation.**
    - **Conference:** 29th USENIX Security Symposium (USENIX Security 20), Pages 789–806, 2020.

27. **Brian Heath, Neelay Velingker, Osbert Bastani, and Mayur Naik. PolyDroid: Learning-Driven Specialization of Mobile Applications.**
    - **URL:** [https://arxiv.org/abs/1902.09589](https://arxiv.org/abs/1902.09589), 2019.

28. **Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. Effective Program Debloating via Reinforcement Learning.**
    - **Conference:** Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, 2018.

29. **Noah M Johnson, Juan Caballero, Kevin Zhijie Chen, Stephen McCamant, Pongsin Poosankam, Daniel Reynaud, and Dawn Song. Differential Slicing: Identifying Causal Execution Differences for Security Applications.**
    - **Conference:** 2011 IEEE Symposium on Security and Privacy, Pages 347–362, IEEE, 2011.

30. **Markus Kammerstetter, Christian Platzer, and Wolfgang Kastner. PROSPECT: Peripheral Proxying Supported Embedded Code Testing.**
    - **Conference:** Proceedings of the 9th ACM Symposium on Information, Computer and Communications Security, Pages 329–340, 2014.

31. **Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis. Configuration-Driven Software Debloating.**
    - **Conference:** Proceedings of the 12th European Workshop on Systems Security (EuroSec), 2019.

32. **Karl Koscher, Tadayoshi Kohno, and David Molnar. SURROGATES: Enabling Near-Real-Time Dynamic Analyses of Embedded Systems.**
    - **Workshop:** 9th USENIX Workshop on Offensive Technologies (WOOT 15), 2015.

33. **Chi-Tai Lee, Jim-Min Lin, Zeng-Wei Hong, and Wei-Tsong Lee. An Application-Oriented Linux Kernel Customization for Embedded Systems.**
    - **Journal:** J. Inf. Sci. Eng., 20(6):1093–1107, 2004.

34. **Wenqiang Li, Le Guan, Jingqiang Lin, Jiameng Shi, and Fengjun Li. From Library Portability to Para-Rehosting: Natively Executing Microcontroller Software on Commodity Hardware.**
    - **Conference:** NDSS, 2021.

35. **Dominik Maier, Lukas Seidel, and Shinjo Park. BASESAFE: Baseband Sanitized Fuzzing through Emulation.**
    - **Conference:** Proceedings of the 13th ACM Conference on Security and Privacy in Wireless and Mobile Networks, Pages 122–132, 2020.

36. **Marius Muench, Dario Nisi, Aurélien Francillon, and Davide Balzarotti. Avatar 2: A Multi-Target Orchestration Platform.**
    - **Workshop:** Proc. Workshop Binary Anal. Res. (Colocated NDSS Symp.), 2018.

37. **Andy Nguyen. BleedingTooth: Linux Bluetooth Zero-Click Remote Code Execution.**
    - **URL:** [https://google.github.io/security-research/pocs/linux/bleedingtooth/writeup.html](https://google.github.io/security-research/pocs/linux/bleedingtooth/writeup.html), April 2021.

38. **Chenxiong Qian, Hyungjoon Koo, ChangSeok Oh, Taesoo Kim, and Wenke Lee. Slimium: Debloating the Chromium Browser with Feature Subsetting.**
    - **Conference:** Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS), 2020.

39. **Anh Quach, Rukayat Erinfolami, David Demicco, and Aravind Prakash. A Multi-OS Cross-Layer Study of Bloating in User Programs, Kernel, and Managed Execution Environments.**
    - **Conference:** 2017 Workshop on Forming an Ecosystem Around Software Transformation (FEAST 2017), 2017.

40. **Vaibhav Rastogi, Drew Davidson, Lorenzo De Carli, Somesh Jha, and Patrick McDaniel. Cimplifier: Automatically Debloating Containers.**
    - **Conference:** Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (FSE), 2017.

41. **Jan Ruge, Jiska Classen, Francesco Gringoli, and Matthias Hollick. Frankenstein: Advanced Wireless Fuzzing to Exploit New Bluetooth Escalation Targets.**
    - **Conference:** 29th USENIX Security Symposium (USENIX Security 20), Pages 19–36, 2020.

42. **Ben Seri, Gregory Vishnepolsky, and Dor Zusman. BLEEDINGBIT: The Hidden Attack Surface Within BLE Chips.**
    - **Report:** Technical report, 2019.

43. **Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. Firmalice: Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware.**
    - **Conference:** NDSS, Volume 1, Pages 1–1, 2015.

44. **Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. CHARM: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems.**
    - **Conference:** 27th USENIX Security Symposium (USENIX Security 18), Pages 291–307, 2018.

45. **Christopher Wright, William A. Moeglein, Saurabh Bagchi, Milind Kulkarni, and Abraham A. Clements. Challenges in Firmware Re-Hosting, Emulation, and Analysis.**
    - **Journal:** ACM Computing Surveys, 54(1), January 2021.

46. **Jianliang Wu, Ruoyu Wu, Daniele Antonioli, Mathias Payer, Nils Ole Tippenhauer, Dongyan Xu, Dave Jing Tian, and Antonio Bianchi. LIGHTBLUE: Automatic Profile-Aware Debloating of Bluetooth Stacks.**
    - **Conference:** Proceedings of the USENIX Security Symposium (USENIX Security), 2021.

47. **Qinge Xie, Qingyuan Gong, Xinlei He, Yang Chen, Xin Wang, Haitao Zheng, and Ben Y. Zhao. Trimming Mobile Applications for Bandwidth-Challenged Networks in Developing Regions.**
    - **URL:** [https://arxiv.org/abs/1912.01328](https://arxiv.org/abs/1912.01328), 2019.

48. **Bin Xin, William N Sumner, and Xiangyu Zhang. Efficient Program Execution Indexing.**
    - **Journal:** ACM SIGPLAN Notices, 43(6):238–248, 2008.

49. **Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti, et al. Avatar: A Framework to Support Dynamic Security Analysis of Embedded Systems’ Firmware.**
    - **Conference:** NDSS, 2014.

## Appendix A: Snapshot Registers

### ARM
- **General Purpose Registers (R0-R15):** Including banked versions of R13 and R14, which have separate values for each CPU mode (IRQ, FIQ, SVC, Undefined, Abort, and User).
- **Coprocessor Registers:**
  - **ttbr and sctlr:** For virtual memory and page tables.
  - **dacr:** For memory domain access permission.
  - **daif:** For masked exception configuration.
  - **tpidrprw:** Holds the current thread ID.
  - **vbar:** Exception table base.
  - **scr and hcr:** Control ARM secure/non-secure mode and hypervisor mode, respectively.

### MIPS
- **Architecture:** Currently supports MIPS Release 1.
- **General Purpose Registers ($0-$31 and pc).**
- **Exception State Registers:**
  - **status, cause, and badvaddr:** For the current CPU exception state.
  - **Context for the page table entry address.**

## Appendix B: Trace Analysis Performance

### Overview
- **Fuzzing Performance:** Results reported in Figure 4.
- **Offline Analysis:** Trace analysis is performed once per device.
- **Testbed:**
  - **Processor:** Dual-CPU 64-bit Intel® Xeon® X5690 @3.47GHz.
  - **Cores:** 24 cores in total.
  - **RAM:** 192GB.
  - **Parallel Execution:** Each trace analysis runs on 16 cores in parallel.

### Table VII: Performance Metrics
| Platform       | Analysis Time | Traces | Blocks |
|----------------|---------------|--------|--------|
| Beagle Linux   | 6 min         | 54     | 324,987 |
| Nuri Linux     | 1,196 min     | 104    | 9,495,362 |
| RasPi FreeBSD  | 55 min        | 500    | 3,402,507 |
| RasPi Linux    | 214 min       | 548    | 15,022,092 |
| RasPi RiscOS   | 4 min         | 36     | 3,373 |
| Romulus Linux  | 58 min        | 421    | 3,797,486 |
| Sabre Linux    | 173 min       | 66     | 3,127,335 |
| Sabre VxWorks  | 2 min         | 41     | 29,694 |
| WRT54GL Linux  | 30 min        | 544    | 1,603,233 |
| SteamLink Linux| 21 min        | 31     | 1,060,850 |

### Notes
- **Analysis Time Proportionality:** Generally proportional to the number of traces and total number of blocks.
- **Exception:** Linux on the Nuri platform often diverges and re-converges, increasing analysis time.

## Appendix C: Fuzzer Pseudocode

```python
# random(a, b): Uniform random float in [a, b]
# randint(a, b): Uniform random int in [a, b]
# rands(), patterns(), bitwins(), ints():
#   Return a list of I/O values according to the patterns described in §III-D1
# Globals for use in mmio_cb
seq, iov = None, None

# Called by emulator on MMIO reads
def mmio_cb():
    global seq, iov
    if seq:  # Still have some I/O values
        iov = seq.pop()
        return iov
    else:
        if consistent_io_prob > 0 and random(0, 1) < consistent_io_prob:
            iov = last_io
            return iov
        else:
            iov = random.choice(rands() + patterns() + bitwins() + ints())
            last_io = iov
            return iov

# Generate a single trace
def run_trace(MAX_BLOCKS=1000):
    trace = []
    while True:
        # Simulate execution and collect basic blocks
        block = next_block()
        if block in trace or len(trace) > MAX_BLOCKS:
            break
        trace.append(block)
    return trace

# Generate fuzzed inputs and test if they produce new coverage
def fuzz(MAX_GEN=1000):
    coverage = set()
    global seq
    seeds = [[]]
    for i in range(MAX_GEN):
        for s in seeds:
            for val in rands() + patterns() + bitwins() + ints():
                seq = s + [val]
                # Get trace for this sequence
                trace = run_trace()
                # Check coverage
                if new_cov(trace, coverage):
                    coverage.update(set(trace))
                    report(trace)
                    seeds.append(seq)
```

- **random(a, b):** Generates a uniform random float in the range [a, b].
- **randint(a, b):** Generates a uniform random integer in the range [a, b].
- **rands(), patterns(), bitwins(), ints():** Functions that return lists of I/O values based on specific patterns.
- **mmio_cb():** Callback function for MMIO reads, managing the sequence of I/O values.
- **run_trace(MAX_BLOCKS):** Generates a single trace, stopping after reaching a maximum number of blocks.
- **fuzz(MAX_GEN):** Main fuzzing function, generating and testing fuzzed inputs for new coverage.

---

This document has been optimized for clarity, coherence, and professionalism.