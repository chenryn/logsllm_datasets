以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[55] Y. Fratantonio, C. Qian, P. Chung, and W. Lee. "Cloak and Dagger: From Two Permissions to Complete Control of the UI Feedback Loop." In *Proc. IEEE S&P*, 2017.

[56] C. K. Georgiadis, I. Mavridis, G. Pangalos, and R. K. Thomas. "Flexible Team-Based Access Control Using Contexts." In *Proc. SACMAT*, 2001.

[57] D. Harkins. "Simultaneous Authentication of Equals: A Secure, Password-Based Key Exchange for Mesh Networks." In *Proc. SensorComm*, 2008.

[58] S. Hong, R. Baykov, L. Xu, S. Nadimpalli, and G. Gu. "Towards SDN-Defined Programmable BYOD (Bring Your Own Device) Security." In *Proc. NDSS*, 2016.

[59] S. Hong, L. Xu, H. Wang, and G. Gu. "Poisoning Network Visibility in Software-Defined Networks: New Attacks and Countermeasures." In *Proc. NDSS*, 2015.

[60] Y. J. Jia, Q. A. Chen, S. Wang, A. Rahmati, E. Fernandes, Z. M. Mao, and A. Prakash. "ContexIoT: Towards Providing Contextual Integrity to Appified IoT Platforms." In *Proc. NDSS*, 2016.

[61] X. Jin, X. Li, H. Zhang, N. Foster, J. Lee, R. Soule, C. Kim, and I. Stoica. "NetChain: Scale-Free Sub-RTT Coordination." In *Proc. NSDI*, 2018.

[62] X. Jin, X. Li, H. Zhang, R. Soulé, J. Lee, N. Foster, C. Kim, and I. Stoica. "NetCache: Balancing Key-Value Stores with Fast In-Network Caching." In *Proc. SOSP*, 2017.

[63] M. T. Jones. "Invoking User-Space Applications from the Kernel." IBM DeveloperWorks, 2018. URL: <https://www.ibm.com/developerworks/library/l-user-space-apps/index.html>

[64] L. Jose, L. Yan, G. Varghese, and N. McKeown. "Compiling Packet Programs to Reconfigurable Switches." In *Proc. NSDI*, 2015.

[65] N. Katta, M. Hira, C. Kim, A. Sivaraman, and J. Rexford. "HULA: Scalable Load Balancing Using Programmable Data Planes." In *Proc. SOSR*, 2016.

[66] M. Liu, L. Luo, J. Nelson, L. Ceze, A. Krishnamurthy, and K. Atreya. "IncBricks: Toward In-Network Computation with an In-Network Cache." In *Proc. ASPLOS*, 2017.

[67] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner. "OpenFlow: Enabling Innovation in Campus Networks." *ACM SIGCOMM Computer Communication Review*, 38(2):69–74, 2008.

[68] C. Monsanto, N. Foster, R. Harrison, and D. Walker. "A Compiler and Run-Time System for Network Programming Languages." In *Proc. POPL*, 2012.

[69] C. Monsanto, J. Reich, N. Foster, J. Rexford, and D. Walker. "Composing Software-Defined Networks." In *Proc. NSDI*, 2013.

[70] A. Morrison, L. Xue, A. Chen, and X. Luo. "Enforcing Context-Aware BYOD Policies with In-Network Security." In *Proc. HotCloud*, July 2018.

[71] D. M’Raihi, S. Machani, M. Pei, and J. Rydell. "Time-Based One-Time Password Algorithm." RFC 6238.

[72] A. Nadkarni and W. Enck. "ASM: A Programmable Interface for Extending Android Security." In *Proc. USENIX Security*, 2014.

[73] S. Narayana, A. Sivaraman, V. Nathan, P. Goyal, V. Arun, M. Alizadeh, V. Jeyakumar, and C. Kim. "Language-Directed Hardware Design for Network Performance Monitoring." In *Proc. SIGCOMM*, 2017.

[74] M. Nauman, S. Khan, X. Zhang, and J.-P. Seifert. "Beyond Kernel-Level Integrity Measurement: Enabling Remote Attestation for the Android Platform." In *Proc. TRUST*, 2010.

[75] T. O'Connor, W. Enck, W. M. Petullo, and A. Verma. "Pivot-Wall: SDN-Based Information Flow Control." In *Proc. SOSR*, 2018.

[76] B. Parducci. "eXtensible Access Control Markup Language (XACML) Specification." 2005.

[77] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. "A Security Enforcement Kernel for OpenFlow Networks." In *Proc. HotSDN*, 2012.

[78] M. Reitblatt, M. Canini, A. Guha, and N. Foster. "Fattire: Declarative Fault Tolerance for Software-Defined Networks." In *Proc. HotSDN*, 2013.

[79] C. Schlesinger, M. Greenberg, and D. Walker. "Concurrent NetCore: From Policies to Pipelines." In *Proc. ICFP*, 2014.

[80] S. Shin and G. Gu. "CloudWatcher: Network Security Monitoring Using OpenFlow in Dynamic Cloud Networks." In *Proc. ICNP*, 2012.

[81] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson. "Fresco: Modular Composable Security Services for Software-Defined Networks." In *Proc. NDSS*, 2013.

[82] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. "AVANT-GUARD: Scalable and Vigilant Switch Flow Management in Software-Defined Networks." In *Proc. CCS*, 2013.

[83] R. Skowyra, L. Xu, G. Gu, T. Hobson, V. Dedhia, J. Landry, and H. Okhravi. "Effective Topology Tampering Attacks and Defenses in Software-Defined Networks." In *Proc. DSN*, 2018.

[84] J. Sonchack, A. Aviv, E. Keller, and J. Smith. "Enabling Practical Software-Defined Networking Security Applications with OFX." In *Proc. NDSS*, 2016.

[85] H. Song. "Protocol-Oblivious Forwarding: Unleash the Power of SDN Through a Future-Proof Forwarding Plane." In *Proc. HotSDN*, 2013.

[86] Sophos. "Synchronized Security: Best-of-Breed Defense That’s More Coordinated Than Attacks." White Paper, 2013. URL: <https://www.sophos.com/en-us/medialibrary/gated-assets/white-papers/sophos-security-heartbeat-wpna.pdf>

[87] W. Tolone, G.-J. Ahn, and T. Pai. "Access Control in Collaborative Systems." *ACM Computing Surveys*, 37:29–41, 2005.

[88] N. Ulltveit-Moe and V. Oleshchuk. "Enforcing Mobile Security with Location-Aware Role-Based Access Control." *Security and Communication Networks*, 9:429–439, 2016.

[89] VMware. "Next Generation Security with VMware NSX and Palo Alto Networks VM-Series." White Paper, 2013.

[90] A. Voellmy, A. Agarwal, P. Hudak, N. Feamster, S. Burnett, and J. Launchbury. "Don’t Configure the Network, Program It! Domain-Specific Programming Languages for Network Systems." Technical Report, Yale University, 2010.

[91] X. Wang, K. Sun, Y. Wang, and J. Jing. "DeepDroid: Dynamically Enforcing Enterprise Policy on Android Devices." In *Proc. NDSS*, 2015.

[92] X. Wang, T. Yu, O. Mengshoel, and P. Tague. "Towards Continuous and Passive Authentication Across Mobile Devices: An Empirical Study." In *Proc. WiSec*, 2017.

[93] Z. Wang, Z. Qian, Q. Xu, Z. M. Mao, and M. Zhang. "An Untold Story of Middleboxes in Cellular Networks." In *Proc. SIGCOMM*, 2011.

[94] R. Ward and B. Beyer. "BeyondCorp: A New Approach to Enterprise Security." *USENIX ;login:*, 39:6–11, 2014.

[95] Wi-Fi Alliance. "Wi-Fi Certified WPA3 Security." Press Release, 2018. URL: <https://www.wi-fi.org/news-events/newsroom/wi-fi-alliance-introduces-wi-fi-certified-wpa3-security>

[96] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu. "Attacking the Brain: Races in the SDN Control Plane." In *Proc. USENIX Security*, 2017.

[97] R. Ye. "Android System Programming: Porting, Customizing, and Debugging Android HAL." Packt Publishing, 2017.

[98] T. Yu, S. K. Fayaz, M. Collins, V. Sekar, and S. Seshan. "PSI: Precise Security Instrumentation for Enterprise Networks." In *Proc. NDSS*, 2017.

[99] T. Yu, V. Sekar, S. Seshan, Y. Agarwal, and C. Xu. "Handling a Trillion (Unfixable) Flaws on a Billion Devices: Rethinking Network Security for the Internet-of-Things." In *Proc. HotNets*, 2016.

[100] Y. Yuan, D. Lin, R. Alur, and B. T. Loo. "Scenario-Based Programming for SDN Policies." In *Proc. CoNEXT*, 2015.

[101] N. Zahadat, P. Blessner, T. Blackburn, and B. Olson. "BYOD Security Engineering: A Framework and Its Analysis." *Computers & Security*, 55:81–99, 2015.

---

### 附录

#### A.1 Poise协议格式

在本小节中，我们扩展了第4.3节的讨论，并详细描述了Poise协议格式。Poise客户端模块定期为每个活动连接发送上下文数据包。上下文数据包与同一TCP/UDP流的数据包具有相同的流元组（源IP、目标IP、源端口、目标端口）。唯一的区别是：a) 上下文数据包具有特殊的IP协议号（对于TCP，IPProto=143；对于UDP，IPProto=144；这两个都是未分配的协议号 [21]），b) 上下文头位于传输层（TCP/UDP）头之后，c) 上下文数据包没有负载。Poise从不将上下文数据包传播到外部网络，而是在交换机处丢弃它们，并且不会修改数据包。图13显示了TCP流的格式。

**数据包**
- 以太网
- IP (proto=6)
- TCP
- 负载

**上下文数据包**
- 以太网
- IP (proto=143)
- TCP
- 上下文

**图13:** 上下文数据包具有特殊的IP协议号。Poise客户端的数据包具有不变的头部。

#### A.2 编译器优化

本小节扩展了第4.3节的讨论，并详细描述了编译器优化。

**表去重**

假设我们要组合两个对相同上下文类型进行检查的策略。一个简单的编译器会将每个检查编译成单独的匹配/动作表。这种方法的限制在于交换机支持的匹配/动作表的数量。根据交换机型号，这个数量通常在O(10)量级，非常小。我们的编译器可以识别出策略共享相同的上下文类型，并通过为每个唯一上下文创建一个表来合并对相同上下文类型的检查。然后，它将每个检查编译成匹配/动作表项而不是单独的表。这种优化使Poise能够将上下文类型的数量扩展到交换机支持的表项数量，而不是唯一表的数量。这个数量通常在O(1M)量级。

**策略折叠**

考虑一个策略，该策略逐一检查多个上下文字段，最后才做出最终决策。处理这种策略的关键挑战是这些检查会创建“依赖表”，由于P4的约束，这些表必须位于不同的阶段。实际上，这样的策略会导致很长的表链，可能会超出交换机可用阶段的数量（O(1-10)）。我们的优化将长度为k的表链折叠成多个较短的子链k1, k2, ..., kt，每个子链都在可用阶段内。由于另一个P4约束——每个阶段只能匹配一个表，因此需要重新循环数据包t次，每次对应一个子链。上下文数据包的重新循环会导致额外的延迟，因为这些数据包现在需要多次遍历交换机才能完成处理，还会导致专用交换机管道中的额外重新循环流量。

#### A.3 扩展性

本小节包含更多关于第8.5节的结果。图14显示了Poise在监视策略方面的扩展性，包括a) 监视器的数量和每个监视器的检查数量（图14a），b) 上下文和数据包的延迟（图14b），以及c) 重新循环上下文流量和数据流量的吞吐量（图14c）。

策略也可以使用监视器和常规上下文类型的混合。总体来说，监视器只是另一种类型的上下文，只不过它使用两个表而不是一个。图17、18、19和20展示了假设策略中有1、2、5和10个监视器时的扩展性结果；其余可用表用于常规上下文。

**图14:** Poise在监视策略下的扩展性。主要结论与非监视策略（第8.5节中的图11）相似。唯一的区别是监视器使用两个表，而常规上下文使用一个表。

#### A.4 客户端开销

本小节包含第8.6节中关于PoiseDroid模块引起的额外客户端开销的完整结果。

**CPU和流量开销**

图15a和15b显示了不同频率上下文数据包情况下的CPU和流量开销。对于每个数据点，我们使用移动应用AndFTP [1] 将一个1.73 GB的视频文件上传到远程FTP服务器，并从/proc/loadavg文件中收集CPU开销。如图所示，如果Poise要为每个数据包添加上下文信息，则CPU和流量开销将非常高（约10%）。由于网络原语是有状态的，它可以记住每个连接的过去决策；这使得一种优化设计成为可能，即客户端模块可以周期性地发送上下文数据包。Poise原语可以查找其有状态数据结构并相应地应用访问控制决策。例如，在每秒一个上下文数据包的频率下，CPU和流量开销都足够低，实际可行。

**电池开销**

表1显示了PoiseDroid客户端的电池开销，由PCMark [35] 测量。PCMark测试涵盖了各种活动，如浏览、视频播放、照片编辑、写作和数据操作。实验开始时，手机充满电（100%），测试运行直到电池电量降至20%以下。可以看到，在所有场景中，最高的开销仅为2.87%。

**综合基准**

图16显示了CF-Bench（一个用于测试多核移动设备的全面基准工具）获得的结果。与安装了PoiseDroid的基线系统（纯Android系统）相比，PoiseDroid分别在本地代码、Java代码和总体得分上引入了5%、4%和5%的额外开销。

**图16:** 使用CF-bench基准工具测量的PoiseDroid的整体开销（越高越好）。

---

### 图表

**图17:** 策略包含一个监视器和1-38个常规上下文的扩展性结果。Poise可以执行的（精确或范围）检查数量对于常规上下文或监视器上下文是相同的。以下所有图表也是如此。

**图18:** 策略包含两个监视器和1-36个常规上下文的扩展性结果。

**图19:** 策略包含五个监视器和1-30个常规上下文的扩展性结果。

**图20:** 策略包含十个监视器和1-20个常规上下文的扩展性结果。

---

希望这些优化能帮助您的文档更加清晰、连贯和专业。