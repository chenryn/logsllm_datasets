### Interaction with Mobile Devices and Services, 2012

#### References

1. **Android Device Names**  
   - **Source**: Jared Rummler's GitHub Repository  
   - **URL**: <https://github.com/jaredrummler/AndroidDeviceNames>

2. **Phishing Attacks on Modern Android**  
   - **Authors**: S. Aonzo, A. Merlo, G. Tavella, Y. Fratantonio  
   - **Conference**: CCS (Computer and Communications Security)  
   - **Year**: 2018

3. **Android UI Deception Revisited: Attacks and Defenses**  
   - **Authors**: E. Fernandes, Q. A. Chen, J. Paupore, G. Essl, J. A. Halderman, Z. M. Mao, A. Prakash  
   - **Conference**: Financial Cryptography and Data Security  
   - **Year**: 2016

4. **Android Q Privacy Change: Restrictions to Background Activity Starts**  
   - **URL**: <https://developer.android.com/preview/privacy/background-activity-starts#display-notification-user>

5. **Phishing on Mobile Devices**  
   - **Authors**: A. P. Felt, D. Wagner  
   - **Year**: 2011

6. **Analyzing Inter-Application Communication in Android**  
   - **Authors**: E. Chin, A. Felt, K. Greenwood, D. Wagner  
   - **Conference**: MobiSys  
   - **Year**: 2011

7. **Scandroid: Automated Side-Channel Analysis of Android APIs**  
   - **Authors**: R. Spreitzer, G. Palfinger, S. Mangard  
   - **Conference**: Security & Privacy in Wireless and Mobile Networks  
   - **Year**: 2018

8. **UI Redressing Attacks on Android Devices**  
   - **Authors**: M. Niemietz, J. Schwenk  
   - **Event**: Black Hat Abu Dhabi  
   - **Year**: 2012

9. **Analysis of Clickjacking Attacks and an Effective Defense Scheme for Android Devices**  
   - **Authors**: L. Wu, B. Brandt, X. Du, B. Ji  
   - **Conference**: CNS (Computer and Network Security)  
   - **Year**: 2016

10. **Cloak and Dagger: From Two Permissions to Complete Control of the UI Feedback Loop**  
    - **Authors**: Y. Fratantonio, C. Qian, S. P. Chung, W. Lee  
    - **Journal**: IEEE Security and Privacy  
    - **Year**: 2017

11. **ClickShield: Are You Hiding Something? Towards Eradicating Clickjacking on Android**  
    - **Authors**: A. Possemato, A. Lanzi, S. P. H. Chung, W. Lee, Y. Fratantonio  
    - **Conference**: CCS (Computer and Communications Security)  
    - **Year**: 2018

12. **Dr. Android and Mr. Hide: Fine-Grained Permissions in Android Applications**  
    - **Authors**: J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, T. Millstein  
    - **Conference**: SPSM (Security and Privacy in Smartphones and Mobile Devices)  
    - **Year**: 2012

13. **Security Concerns in Android mHealth Apps**  
    - **Authors**: D. He, M. Naveed, C. A. Gunter, K. Nahrstedt  
    - **Conference**: AMIA (American Medical Informatics Association)  
    - **Year**: 2014

14. **Tracking Human Mobility Using WiFi Signals**  
    - **Authors**: P. Sapiezynski, A. Stopczynski, R. Gatej, S. Lehmann  
    - **Year**: 2015

15. **Inferring User Routes and Locations Using Zero-Permission Mobile Sensors**  
    - **Authors**: S. Narain, T. D. Vo-Huu, K. Block, G. Noubir  
    - **Journal**: IEEE Security and Privacy  
    - **Year**: 2016

16. **PowerSpy: Location Tracking Using Mobile Device Power Analysis**  
    - **Authors**: Y. Michalevsky, A. Schulman, G. A. Veerapandian, D. Boneh, G. Nakibly  
    - **Conference**: USENIX Security  
    - **Year**: 2015

17. **Sleeping Android: The Danger of Dormant Permissions**  
    - **Authors**: J. Sellwood, J. Crampton  
    - **Conference**: SPSM (Security and Privacy in Smartphones and Mobile Devices)  
    - **Year**: 2013

18. **Resolving the Predicament of Android Custom Permissions**  
    - **Authors**: G. S. Tuncay, S. Demetriou, K. Ganju, C. A. Gunter  
    - **Conference**: NDSS (Network and Distributed System Security Symposium)  
    - **Year**: 2018

19. **User Interactions and Permission Use on Android**  
    - **Authors**: K. Micinski, R. Votipka, D. Stevens, N. Kofinas, M. L. Mazurek, J. S. Foster  
    - **Conference**: CHI (Conference on Human Factors in Computing Systems)  
    - **Year**: 2017

20. **Unravelling Security Issues of Runtime Permissions in Android**  
    - **Authors**: E. Alepis, C. Patsakis  
    - **Publication**: Hardware and Systems Security  
    - **Year**: 2019

21. **Practical Least Privilege for Cross-Origin Interactions on Mobile Operating Systems**  
    - **Author**: G. S. Tuncay  
    - **Type**: PhD Thesis  
    - **Institution**: University of Illinois at Urbana-Champaign  
    - **Year**: 2019

22. **False Transparency Attacks**  
    - **URL**: <https://sites.google.com/view/false-transparency-attacks/home>

### Appendices

#### A. Frequently Asked Questions

Here we address some common concerns that readers might have, presented in a Q&A format.

- **Why doesn’t the attacker just launch a normal phishing attack?**  
  Google Play (GP) has security mechanisms in place to detect phishing attacks. For example, GP does not allow apps with icons or titles that are too similar to existing apps. Suspicious apps are suspended indefinitely. Our attack avoids detection by GP because it does not mimic another app's UI. Users are generally aware of classic phishing attacks, making them more likely to be cautious. Our attacks, however, do not require mimicking another app’s UI and are unknown to users, making them more vulnerable. This was validated through our user study.

- **Couldn’t the app just pretend to do something useful with the permission to convince the users to grant it?**  
  While utility is a key factor in granting permissions, it is not the only one. Previous studies show that users consider both the relevance of the permission to the app’s utility (68% of the time) and the app developer’s reputation (32% of the time). The average denial rate is 14%. An attacker who cannot convincingly justify a permission (e.g., a QR app needing contact list access) will fail 68% of the time. Similarly, an app with little reputation will be denied 32% of the time. Chi-squared tests with Yates correction confirm that both factors significantly influence permission decisions. Our goal is to exploit users' trust in other apps without having to build that trust.

- **What is the attacker going to do with the permissions?**  
  Our attacks provide a platform for adversaries to obtain the permissions they need to achieve their goals. Each adversary can use our attack scheme to obtain specific permissions required for their attack strategy.

- **Why does Android allow invisible activities?**  
  Android aims to provide developers with UI design freedom. Transparent UI features often enhance user experience, but restrictions are difficult to implement. Android offers various transparency options, and it is unclear which ones could be exploited for attacks. Restricting transparency could introduce new vulnerabilities.

#### B. Survey Questions

Here are the questions used in our survey, discussed in detail in Section 6. Statements regarding display logic (e.g., skip to question X) are not shown to participants but are included for clarity. Answer options are shuffled at the time of participation. Attention check and demographic questions are omitted for brevity. Some questions were removed as they could prime users to be more security-conscious, potentially skewing results. The full set of questions is available in [33].

**Q1: Please choose your level of knowledge of Android permissions.**
- Expert
- Knowledgeable
- Average
- Some familiarity
- No familiarity

**Q2: On older Android versions, permissions required by an app were displayed at the time of installation and the installation would not proceed if you did not agree to grant all the listed permissions to the app.**
- True
- False
- I don’t know

**Q3: For your information, on more recent versions of Android, apps can prompt you at runtime with a permission request (also called permission prompt) to get access to some of the device resources. Such permissions that are requested when the app is in the foreground are called runtime permissions. The following screen is an example of a permissions request. You can give access to the app for the resource in question by choosing "Allow". Similarly, you can deny access by choosing "Deny". Please note that how this prompt screen looks might slightly vary depending on the device and Android version.**

**Q4: I remember seeing a similar permission screen while using my device (It could be for a different app and/or permission).**
- Yes
- No
- I am not sure

**Q5: Let’s do some role-playing now. Suppose for the sake of this survey that you have installed Viber, a popular messaging app with millions of downloads that allows you to communicate with your friends. Viber requires access to your contacts to allow you to contact your friends. If you don’t grant this permission, the functionality likely will not work. Suppose you have started Viber to message a friend and Viber prompted you to get permission to access your contacts for the first time, as shown in the following screen.**

**Q6: Please decide if you would like to allow Viber to access your contacts.**
- Allow
- Deny

**Q7: Continuing with the role-playing... Suppose now that you received a permission request from an app installed on your phone while you were not actively using any app. Below screenshot is an example of such a request.**

**Q8: What would you do about such a permission request?**
- Allow
- Deny
- It depends

**Q9: An app can request a permission and prompt you again in the future even if you might have denied this permission previously.**
- True
- False
- I don’t know

**Q10: An app can request a permission and prompt you again in the future even if you might have granted this permission previously.**
- True
- False
- I don’t know

**Q11: Suppose you previously denied a permission to an app you currently have on your device. If you were prompted again for the same permission by this app in the future, would you grant it?**
- Yes - Skip to Q12
- No - Skip to Q13
- It depends - Skip to Q12

**Q12: Which of the following conditions would influence you to grant the permission after denying it previously? (Choose all that apply)**
- The requested permission is necessary for the app to work
- The request is for a permission I do not care about or do not consider particularly risky
- The requesting app is highly popular (i.e., installed by millions of users)
- The requesting app is developed by a well-known company
- Other (Please specify):

**Q13: (Display if the first option of Q6 is chosen) Now back to role-playing again. Suppose you texted a couple of friends on Viber, then you switched to some other applications or perhaps stopped using your phone for a while. Eventually, you switched back to Viber to continue texting your friends and now you are prompted for the contacts permission as shown in the following screenshot.**

**Q14: (Display if the second option of Q6 is chosen) Now back to role-playing again. After being on your phone for a while and doing useful things, you switched back to Viber to text your friends and now you are prompted for the contacts permission as shown in the following screenshot.**

**Q15: What would you do?**
- Allow - Skip to Q17
- Deny - Skip to Q16

**Q16: What is the reason for denying the permission?**
- I already granted this permission to Viber so it should not ask me again
- I already denied this permission to Viber so it should not ask me again
- I always decline permissions
- Multiple requests for the same permission made me suspicious of Viber
- Other (Please specify):

**Q17: Suppose you are traveling the world and you found yourself wanting to go to the magical ancient Greek city of Ephesus. You open Google Maps to navigate to these ruins. You are prompted with a permission dialog as in the following picture.**

**Q18: Which option would you select?**
- Allow - Skip to Q19
- Deny - Skip to Q20

**Q19: Just asking to make sure we are on the same page... Which app did you just grant location permission to? - Skip to Q21**

**Q20: Just asking to make sure we are on the same page... Which app did you just deny the location permission to? - Skip to Q21**

**Q21: On Android versions that support runtime permissions, you are allowed to grant or revoke permissions to apps at any time by modifying permission settings via the Settings app.**
- True
- False
- I don’t know

**Q22: What would you think if an app has requested a permission it had previously requested during the same launch (i.e., after you started the app it requested the same permission twice within a small time frame)? Please select all that apply.**
- I would not think anything of it and proceed with granting/denying the permission normally.
- I would be suspicious of the requesting app.
- I would be suspicious of the other apps I have installed that use this permission.
- I would be suspicious of the Android operating system itself.
- Other (Please specify):

**Q23: (Display if the first option of Q22 is not chosen) What would you consider doing in this case (i.e., when an app requests the same permission twice during the same launch)? Please check all that apply.**
- Uninstalling the app that requested the permission
- Investigating other apps that request this permission via the Settings app
- Reformatting the operating system to go back to factory settings
- Other (Please specify):

**Q24: An app has to be in the foreground (i.e., showing on the screen) when it prompts you for a permission.**
- True
- False
- I don’t know

---

This revised text is more structured, clear, and professional, with improved readability and coherence.