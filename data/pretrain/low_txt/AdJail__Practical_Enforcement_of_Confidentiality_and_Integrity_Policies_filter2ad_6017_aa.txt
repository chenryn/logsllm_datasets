# AdJail: Practical Enforcement of Confidentiality and Integrity Policies on Web Advertisements

## Authors
- Mike Ter Louw
- Karthik Thotta Ganesh
- V. N. Venkatakrishnan

## Abstract
Web publishers often integrate third-party advertisements into web pages that also contain sensitive publisher data and end-user personal information. This practice exposes the page content to confidentiality and integrity attacks from these advertisements.

In this paper, we propose a novel framework to address the security threats posed by third-party advertisements. The core of our framework is an innovative isolation mechanism that allows publishers to transparently interpose between advertisements and end users. This mechanism supports fine-grained policy specification and enforcement without affecting the user experience of interactive ads. Our evaluation suggests that the framework is compatible with several mainstream ad networks, provides robust security against many threats, and incurs acceptable performance overheads.

## Introduction
On September 13, 2009, readers of the New York Times home web page were greeted by an animated image of a fake virus scan. The NY Times later clarified in an article [48] that the source of the rogue anti-virus attack was one of its advertising partners. Just two months prior, Facebook users were presented with deceptive advertisements that portrayed private images of their family and friends [38]. Facebook responded in an article [42], blaming advertisers for violating policy terms governing the use of personal images.

Publishers of online ads, such as the NY Times and Facebook, face two significant challenges: ensuring that ads do not violate the integrity of publisher web pages or breach the confidentiality of user data present on those pages. Ads are often tightly integrated into publisher web pages, coexisting with high-integrity content and sensitive information. Typically, ad content is dynamically fetched from ad networks (e.g., Google AdSense) by the user’s browser, leaving little opportunity for publishers to inspect and approve ads before they are rendered.

Online advertising is a lucrative market, expected to reach US$50 billion in the U.S. during 2011 [52]. For many publishers, online advertising is an economic necessity. However, publishers have few resources to enforce integrity and confidentiality policies on ads. One common approach is for ad networks to screen each ad for potential attacks, but this passive approach shifts the burden of protection from the publisher to the ad network. To enforce compliance, publishers must use out-of-band mechanisms (e.g., legal agreements), which leave them vulnerable to any gaps in the ad network's screening strategy. Rogue ads may slip through and cause damage, as seen in the high-profile examples above.

Given the dangers of rogue ads, publishers need an active, technological approach to protect themselves and their end users. In this paper, we address the problem of rogue ads from a publisher-centric perspective. At a basic level, a publisher is a web application that includes dynamically sourced content from an ad network in its output. Our objective is to empower this web application to serve ads from mainstream ad networks while protecting its end users from several threats posed by rogue ads.

### 1.1 Contributions
In this paper, we present ADJAIL, a framework that aids web applications in rendering ads from mainstream ad networks without compromising publisher security. Our framework achieves this protection by applying policy-based constraints on ad content. The five significant contributions of our approach are:

1. **Confidentiality and Integrity Policy Specification and Enforcement**: We define a simple and intuitive policy specification language for publishers to specify confidentiality and integrity policies on advertisements at a fine-grained level. We provide a novel and conceptually simple policy enforcement mechanism that offers principled security guarantees.

2. **Compatibility with Ad Network Targeting Algorithms**: Ad networks use targeting algorithms to select which ads to display based on factors such as page context and user behavior. These algorithms are often implemented as scripts that analyze publisher content to select and fetch appropriate ads. Our approach supports these targeting scripts while restricting their access to sensitive data.

3. **Compatibility with Ad Network Billing Operations**: Ad networks employ complex billing strategies based on metrics like ad impressions and mouse clicks. They also have mechanisms for dealing with click fraud [2]. Our approach preserves impression and click metrics, remaining transparent to billing and click-fraud detection mechanisms.

4. **Consistency in User Experience**: Our approach does not affect the user experience in interacting with ads. Any change in the user experience (in terms of content, position, and interactivity) may reduce the effectiveness of advertising. ADJAIL highlights the security trade-offs required for ensuring consistency in user experience for certain types of ads, such as inline text ads.

5. **Satisfaction of Practical Deployment Requirements**: Publishers should not have to expend significant labor in adopting a new framework, as this may make adoption prohibitively expensive. Furthermore, publishers should be able to deploy a solution that does not require end users to install new client software (e.g., browsers, plug-ins, etc.) or make changes to their existing client software. Therefore, we offer a practical solution that is easy to adopt and works on mainstream browsers in their default settings without any modifications.

### 1.2 Overview
The core of our approach is a novel policy enforcement strategy that allows the publisher to interpose itself transparently between the ad network and the end user. The enforcement strategy starts by fetching and executing ads in a hidden "sandbox" environment in the user’s browser, thus shielding the end user and web application from many harmful effects.

To preserve the user experience, all ad user interface elements are then extracted from the sandbox and communicated back to the original page environment, as permitted by the publisher’s policy. This step enables the user to see and interact with the ad as if no interposition happened. All user actions are communicated back to the sandbox, completing a two-way message conduit for synchronization. Our approach ensures transparency with regard to the number of ad clicks and impressions by interposing on the browser’s Document Object Model to suppress extraneous HTTP requests.

We have built a prototype implementation of ADJAIL that supports the specification and enforcement of fine-grained policies on ads sourced from leading ad networks. The prototype is designed to be compatible with several mainstream browsers, including Google Chrome, Firefox, Internet Explorer (IE), Safari, and Opera. A minor limitation of our implementation (but not of our architecture) is that it is not compatible with IE 7.x or below. However, the current ADJAIL prototype is compatible with IE 8.0 and later.

We evaluate ADJAIL on the dimensions of ad network compatibility, security, and performance overheads. Our compatibility evaluation tested ads from six mainstream ad networks. We find that ADJAIL provides excellent compatibility for most ads and strong protection from many significant threats posed by online ads. In our experiments, the currently unoptimized ADJAIL prototype encountered at most a 1.69× slowdown in rendering ads.

The remainder of this paper is organized as follows:
- Section 2 provides the threat model, scope, and related work.
- Section 3 discusses the architecture and main ideas behind ADJAIL.
- Section 4 details the implementation of ADJAIL.
- Section 5 presents our security, compatibility, and performance evaluation.
- Section 6 concludes the paper.

## 2 Threat Model and Related Work

### 2.1 Threat Model
Consider a publisher who wishes to carry ads on a webmail (web-based email) application. We will use this as a running example throughout the paper to illustrate the various aspects of our framework. A screenshot from an actual webmail application used in our evaluation appears in Figure 1. The top pane of the window presents the message list, and the bottom pane presents the email message text. Four numbered advertisements also appear in the figure:
1. A banner ad that appears on top of the webmail page.
2. A skyscraper ad that appears as a sidebar.
3. An inline text ad that appears when the user’s mouse hovers over an underlined word.
4. A floating ad that overlays the image of a clock on the page.

These ads highlight two interesting challenges we need to overcome:
1. The sidebar ad requires access to the email message text to ascertain page context and select relevant ads for display (i.e., contextual targeting). The inline text ad also requires access to the message for contextual targeting and to integrate ads among the text. However, providing access to the entire message carries the risk of exposing private content (e.g., email addresses) to the ad script.
2. The floating ad requires access to the real estate of the page to place the image of the clock over the message text. However, providing access to the page real estate enables an ad to overlay content over the entire page, which may interfere with trusted interface components.

These common examples illustrate how ads require non-trivial access to publisher content and the screen and will not work if such access is denied. In all of the examples above, the ad content is loaded and rendered by a third-party ad script (an ad script example appears in Figure 4a). Ad scripts are given full page access by default, posing threats to the confidentiality and integrity of page content. Our goal is to support the non-trivial access required by these and many other typical forms of ads while addressing the security concerns of executing third-party ad scripts.

### 2.2 Threat Scope
Web applications that display third-party content on client browsers are exposed to a wide variety of threats. It is important to clarify our threat model, specifically on the nature of protections we offer and the threats that are outside the scope of this work.

**In-Scope Threats**
The broad threats we address in this work are those targeted by recent efforts in the Web standards community for content restrictions (e.g., Content Security Policy [32, 43]). These policies are specified by a website to restrict the capabilities of third-party scripts, specifically with reference to access and modification of first-party (site-owned) content, as well as control over the screen. Policies can be negotiated between a publisher and its customers or directly reflect the site security and privacy practices.

Our framework provides a means for the specification and enforcement of such policies. For instance, in our webmail example, an integrity policy can be enforced such that email message content cannot be tampered with but can still be read (for contextual targeting of ads). Publishers may also choose to restrict where ads can appear on the page.

Publishers can also use our framework to enforce policies about the confidentiality of content. For instance, a publisher can enforce a policy that mail headers and email "address books" (containing private email addresses) cannot be read by ads. For the Facebook attack mentioned in §1, a policy specifying the confidentiality of user images, combined with our enforcement mechanism, would have prevented the attack.

**Out-of-Scope Threats**
Many security threats posed by ads (and other third-party content) have been identified by the security community. Recently, there has been intense research in this area, which can complement our approach for protection against specific attacks. In particular, our work does not address the following threats. In this section, we omit threats for which publishers can readily deploy strong protection (e.g., cross-site request forgeries).

1. **Browser Security Bugs**: We do not address browser vulnerabilities such as drive-by-downloads [49, 36, 5], attacks launched through plug-ins [24], vulnerabilities in image rendering [23], and so on.
2. **Opaque Content**: Our approach leverages web content introspection capabilities of JavaScript and is therefore most capable of enforcing fine-grained control where such transparency is available. Although our approach provides coarse-grained confidentiality and integrity protection from opaque content (e.g., Flash), the many possible attack vectors from these binary formats require special treatment [13].
3. **Frame Busting & Navigation Attacks**: These are difficult attacks for any dynamic policy enforcement mechanism to prevent due to the limited API exposed by browsers. A detailed discussion of protection measures against frame busting has been explored [39] and could be used to enhance our approach.
4. **Behavior Tracking Attacks**: These are attacks that track a user across multiple sites and sessions through the use of cookies. These could be addressed by users choosing restrictive cookie policies, though such policies may interfere with the functionality of some websites.
5. **Attacks Through Side Channels**: Sites can track users through side channels, such as the cache timing channel [11], the "visited links" feature of browsers [19], and so on. It is difficult to defend against these vectors without browser customization, which is impractical for publishers to deploy.

### 2.3 Related Work
**Privacy and Behavioral Targeting**
A few recent approaches have looked at the problem of addressing security issues in online advertising. Privads [15] and Adnostic [47] address this problem primarily from a user privacy perspective. They both rely on specialized, in-browser systems that support contextual placement of ads while preventing behavioral profiling of users. In contrast, our work mainly focuses on a different, publisher-centric problem of protecting the confidentiality and integrity of publisher and user-owned content. Our work is also aimed at providing compatibility with existing ad networks and browsers.

**Restricting Content Languages**
There have been numerous works [9, 6, 28, 29, 30, 12] in the area of JavaScript analysis that restrict content from ad networks to provide security protections. These works focus on limiting the JavaScript language features that untrusted scripts are allowed to use. The limitation is enforced statically by checking the untrusted script and ensuring it conforms to the language restrictions. Only those language features that are statically deterministic and amenable to analysis are allowed. Since much of the policy enforcement is done statically, these solutions typically have good runtime performance.