### Memory Deduplication and Side-Channel Attacks

To the best of our knowledge, memory deduplication across virtual machines (VMs) is not commonly used in many Infrastructure-as-a-Service (IaaS) clouds, such as Amazon EC2. This limitation restricts the applicability of the Flush-Reload side-channel attack in these environments.

### Multiple Victim Copies

Multiple instances of the same victim application may co-exist behind a load balancer to enhance throughput and reliability. In such scenarios, the adversary must determine whether the requests sent to the web server are being handled by the instance co-located with their attacker instance. These challenges can be overcome by issuing multiple concurrent requests or by co-locating multiple attacker applications with the victim replicas.

### Other Attack Targets

The NFA-based attack framework proposed in this paper provides a general approach for control-flow analysis in side-channel attacks. Its application extends beyond the three examples discussed in the paper. For instance, we believe that the latest version (v3.2.8 at the time of writing) of the GnuTLS libraries is vulnerable to plaintext-recovery attacks. A co-located adversary can use the attack framework to construct a padding oracle, revealing the correctness of the CBC mode padding during symmetric key decryption processes. Additionally, an adversary may employ Flush-Reload on a shared MySQL client library to monitor the victim's SQL query execution (e.g., by invoking `mysql_error()` and other functions), facilitating blind SQL injection attacks.

### Countermeasures

#### Future Research Directions

A key question for future research is how to design effective defenses against the attacks enabled by our proposed framework. Various countermeasures for cache-based side channels (not necessarily Flush-Reload channels) have been proposed in IaaS cloud contexts [31, 4, 36, 18, 41, 19, 35]. However, none of these are applicable to our attacks. We briefly discuss some potential defenses for our setting.

#### Mitigating Side Channels through Program Analysis

A general countermeasure to control-flow side channels, proposed by Molnar et al. [21] and further explored by Coppens et al. [9], involves the automatic detection of such side channels in source code and their remediation through generic source-to-source translation. This approach would thwart the attacks described here but incurs significant overhead. A complementary approach involves static analysis of binaries to measure their vulnerability to cache-based side channels [11]; however, this method only provides an approximation of the degree of vulnerability and no countermeasure.

#### Disabling the CLFLUSH Instruction

Disabling the `clflush` instruction in Platform-as-a-Service (PaaS) applications to prevent side-channel attacks is tempting. However, as `clflush` is a non-privileged instruction, trapping its execution in the privileged software layer (i.e., the operating system) is difficult without hardware modification. An alternative solution is to sandbox PaaS applications and specifically disallow the use of `clflush` in the application code. Still, the adversary might achieve the effects of `clflush` using other means, similar to a Prime-Probe protocol.

#### Increasing Background Noise with More Applications

Increasing the number of applications sharing the last-level caches can increase background noise in two ways. First, if more processes share the monitored executables, false positive noise increases. Second, as more processes are queued by the CPU scheduler, the last-level caches are less likely to be shared by the attacker and the victim simultaneously. However, the security provided by this approach is weak in practice unless the number of applications is artificially sustained even when there is less real demand.

#### Disallowing Resource Sharing

The most general countermeasure for any side-channel attack is to prevent sharing of the exploited resource. In our setting, this would mean disallowing the sharing of memory pages that serve as Flush-Reload attack vectors. An extreme realization would be to prohibit sharing any memory pages among different users, for example, by duplicating binary files for each user in the OS. Such a defense, however, would increase the memory footprint of each tenant, decreasing the number of tenants a PaaS provider could provision on a (virtual) machine and reducing machine utilization and service-provider profit. Selective memory sharing promises a more cost-effective approach; sharing of memory pages specifically carrying vulnerable code might then be disallowed. We leave the challenges of identifying, annotating, and protecting such code, as well as the development of alternative defenses, as interesting lines of future research.

#### Detecting Flush-Reload Attacks

An interesting observation from the experiments conducted in Section 8.1 is that the minimal performance degradation induced by the attacks in this paper offers little hope for detecting these attacks. Prior studies suggest that cross-tenant side-channel attacks in cloud settings can induce significant performance degradation in victim workloads, as was the case in the attacks demonstrated by Zhang et al. [40]. It is possible, therefore, that the attacks of Zhang et al. might be detected by monitoring the performance of the victim application. While our results do not conclusively rule out the use of victim application performance monitoring to detect the attacks in this paper, they also do not offer much promise for doing so.

However, it might be possible to employ the same type of side-channel analysis to detect Flush-Reload attacks, similar to the ideas of HomeAlone [39]. A victim might be able to infer the presence of an adversary by performing Flush-Reload monitoring of the cache to detect the Flush-Reload pattern induced by an adversary’s likely choice of NFA. We leave the implementation of this defense as future work.

### Conclusion

We have proposed a general automaton-driven framework to mount cache-based side-channel attacks and demonstrated its effectiveness specifically in PaaS environments. Our three case studies show that an attacker co-located with a victim can learn sensitive user data, such as the number of distinct items in a shopping cart; perform password-reset attacks against arbitrary users; and break XML encryption in a SAML-based authentication application. The attacks we illustrate are especially significant in some cases as they bypass existing or proposed side-channel countermeasures. Our shopping-cart attack is immune to defenses proposed for analogous, timing-based side-channel attacks. Our study of RSA private-key decryption re-enables the classic Bleichenbacher padding-oracle attack despite widely deployed countermeasures against remote adversaries.

In summary, we believe our work presents: (1) the first exploration of cache-based side-channel attacks specifically in PaaS environments, and (2) the first report of granular, cross-tenant, side-channel attacks successfully mounted in any existing commercial cloud, PaaS or otherwise, against state-of-the-art applications.

### Acknowledgments

This work was supported in part by NSF grants 1065134, 1253870, 1330308, and 1330599, as well as a Google Ph.D. Fellowship for Yinqian Zhang.

### References

[1] F. E. Allen. Control flow analysis. SIGPLAN Not., 5(7):1–19, July 1970.
[2] I. Alshanetsky. Top 10 ways to crash PHP. http://ilia.ws/archives/5_Top_10_ways_to_crash_PHP.html. Accessed: 2014-08-17.
[3] B. Argyros and A. Kiayias. I forgot your password: Randomness attacks against PHP applications. In 21st USENIX Security Symposium, 2012.
[4] A. Aviram, S. Hu, B. Ford, and R. Gummadi. Determinating timing channels in compute clouds. In 2010 ACM workshop on Cloud computing security workshop, pages 103–108, 2010.
[5] R. Bardou, R. Focardi, Y. Kawamoto, L. Simionato, G. Steel, and J.-K. Tsay. Efficient padding oracle attacks on cryptographic hardware. In Advances in Cryptology — CRYPTO 2012, pages 608–625. 2012.
[6] D. Bleichenbacher. Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS#1. In Advances in Cryptology — CRYPTO '98, pages 1–12, 1998.
[7] W. J. Bolosky and M. L. Scott. False sharing and its effect on shared memory performance. In 4th USENIX Symposium on Experiences with Distributed and Multiprocessor Systems, 1993.
[8] A. Bortz and D. Boneh. Exposing private information by timing web applications. In 16th International Conference on World Wide Web, pages 621–628, 2007.
[9] B. Coppens, I. Verbauwhede, K. De Bosschere, and B. De Sutter. Practical mitigations for timing-based side-channel attacks on modern x86 processors. In IEEE Symposium on Security and Privacy, pages 45–60, 2009.
[10] J. P. Crespo. Personal communication, June 2014.
[11] G. Doychev, D. Feld, B. Köpf, and L. Mauborgne. CacheAudit: A tool for the static analysis of cache side channels. In USENIX Security Symposium, 2013.
[12] S. Esser. Lesser known security problems in PHP applications. In Zend Conference, 2008.
[13] E. W. Felten and M. A. Schneider. Timing attacks on web privacy. In 7th ACM Conference on Computer and Communications Security, pages 25–32, 2000.
[14] D. Gullasch, E. Bangerter, and S. Krenn. Cache games – bringing access-based cache attacks on AES to practice. In 2011 IEEE Symposium on Security & Privacy, pages 490–505, 2011.
[15] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar. Wait a minute! A fast, cross-VM attack on AES. Cryptology ePrint Archive, 2014.
[16] T. Jager, S. Schinzel, and J. Somorovsky. Bleichenbacher’s attack strikes again: breaking PKCS#1 v1.5 in XML encryption. In Computer Security — ESORICS 2012, pages 752–769. 2012.
[17] S. Kamkar. phpwn: Attacking sessions and pseudo-random numbers in PHP. In Blackhat USA, 2010.
[18] T. Kim, M. Peinado, and G. Mainar-Ruiz. STEALTHMEM: system-level protection against cache-based side channel attacks in the cloud. In 21st USENIX Security Symposium, 2012.
[19] P. Li, D. Gao, and M. K. Reiter. Mitigating access-driven timing channels in clouds using StopWatch. In 43rd IEEE/IFIP International Conference on Dependable Systems and Networks, pages 1–12, June 2013.
[20] R. P. Mahowald, C. W. Olofson, M.-C. Ballou, M. Fleming, and A. Hilwa. Worldwide competitive public Platform as a Service 2013-2017 forecast (Doc 243315). IDC Inc., November 2013.
[21] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner. The program counter security model: Automatic detection and removal of control-flow side channel attacks. In Information Security and Cryptology, pages 156–168, 2005.
[22] Y. Nagami, D. Miyamoto, H. Hazeyama, and Y. Kadobayashi. An independent evaluation of web timing attack and its countermeasure. In 3rd International Conference on Availability, Reliability and Security, pages 1319–1324, 2008.
[23] Y. V. Natis. Gartner research highlights Platform as a Service (ID: G00259659). Gartner Inc., 3 February 2014.
[24] N. Nethercote and J. Seward. Valgrind: A framework for heavyweight dynamic binary instrumentation. SIGPLAN Not., 42(6):89–100, June 2007.
[27] OASIS. Profiles for the OASIS Security Assertion Markup Language (SAML) V2.0. http://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf.
[28] D. A. Osvik, A. Shamir, and E. Tromer. Cache attacks and countermeasures: the case of AES. In Topics in Cryptology – CT-RSA 2006, pages 1–20. Springer-Verlag, 2005.
[29] R. Owens and W. Wang. Non-interactive OS fingerprinting through memory de-duplication technique in virtual machines. In 30th IEEE International Conference on Performance, Computing and Communications, pages 1–8, November 2011.
[30] C. Percival. Cache missing for fun and profit. In BSDCon 2005, 2005.
[31] H. Raj, R. Nathuji, A. Singh, and P. England. Resource management for isolation enhanced cloud services. In 2009 ACM workshop on Cloud computing security, pages 77–84, 2009.
[32] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my cloud: Exploring information leakage in third-party compute clouds. In 16th ACM Conference on Computer and Communications Security, pages 199–212, 2009.
[33] K. Suzaki, K. Iijima, T. Yagi, and C. Artho. Memory deduplication as a threat to the guest OS. In 4th European Workshop on System Security, April 2011.
[34] E. Tromer, D. A. Osvik, and A. Shamir. Efficient cache attacks on AES, and countermeasures. Journal of Cryptology, 23(1):37–71, 2010.
[35] V. Varadarajan, T. Ristenpart, and M. Swift. Scheduler-based defenses against cross-VM side-channels. In 23st USENIX Security Symposium, 2014.
[36] B. C. Vattikonda, S. Das, and H. Shacham. Eliminating fine-grained timers in Xen. In 3rd ACM workshop on Cloud computing security workshop, pages 41–46, 2011.
[37] W3Techs. Usage of content management systems for websites. http://w3techs.com/technologies/overview/content_management/all.
[38] Y. Yarom and K. Falkner. Flush+Reload: a high resolution, low noise, L3 cache side-channel attack. http://eprint.iacr.org/2013/448, 2013.
[39] Y. Zhang, A. Juels, A. Oprea, and M.K. Reiter. HomeAlone: Co-residency detection in the cloud via side-channel analysis. In IEEE Symposium on Security and Privacy, pages 313–328, 2011.
[40] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-VM side channels and their use to extract private keys. In 2012 ACM Conference on Computer and Communications Security, pages 305–316, 2012.
[25] M. Neve and J.-P. Seifert. Advances on access-driven cache attacks. In 2013 ACM Conference on Computer and Communications Security, pages 827–838, 2013.
[26] OASIS. Bindings for the OASIS Security Assertion Markup Language (SAML) V2.0. http://docs.oasis-open.org/security/saml/v2.0/saml-bindings-2.0-os.pdf.