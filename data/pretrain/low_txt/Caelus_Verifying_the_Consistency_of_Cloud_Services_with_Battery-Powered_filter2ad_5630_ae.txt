### Device Wake-Up and Keep-Alive Messages
The device must wake up and send keep-alive messages every 5 to 10 minutes. Consequently, we generally expect that the time interval \( TR \) is set to align with these keep-alive periods.

### Security Analysis
Having presented the design of Caelus, we now describe how the individual guarantees provided by Caelus are upheld by its design elements. These guarantees hold even if the cloud service or clients are malicious. We further demonstrate that even if several malicious clients collude, they do not gain any additional capabilities beyond those of a single malicious client.

#### A. Analysis of Guarantees

**SRV1: Data Encryption**
- **Description:** All clients encrypt data before sending it to the cloud provider, and the encryption key is not known to the cloud service.
- **Guarantee:** A malicious cloud provider cannot read user data.

**SRV2: Data Integrity**
- **Description:** A cryptographic hash of the data sent in Puts is computed and included in the header, which is signed by the device making the update. The same header is returned by the cloud service to a client performing a Get on the same key. The client verifies the signature on the header and uses the hash to verify the integrity of the returned data.
- **Guarantee:** Since the cloud service cannot forge the signatures, the data stored on the cloud is protected from tampering by a malicious cloud provider.

**SRV3: Consistency Violation Detection**
- **Description:** Scheduled attestations produced by the Attestation Authority (AA) in combination with consistency model-specific verification checks ensure that consistency violations are detected within \( T_{Caelus} \). Scheduled attestations notify all clients of the history of an operation within \( T_{Caelus} \) after the operation occurs. Since all clients see the same history, this can be viewed as a "global history" of all operations. The verification checks guarantee two properties:
  1. Each client’s observed history of operations matches the attested global history.
  2. The global history is consistent with the promised consistency model.
- **Guarantee:** Verification checks ensure that all operations are made visible within the promised time bound and according to the ordering constraints specified by the promised consistency model.

**CLT1: Non-Repudiation**
- **Description:** All key-value updates must be signed by the client making them.
- **Guarantee:** A client cannot later deny that it made the update, ensuring non-repudiable data modifications.

**CLT2: False Accusations**
- **Description:** To falsely accuse the cloud service of a consistency violation, a client must show that one of the verification checks has failed, even when in reality it hasn't. This can only happen if the client alters the contents of the attested history or convinces the user that a verification check has failed.
- **Guarantee:** All attested history segments are signed twice, once by the cloud service and then by the attestor. A regular client would have to forge both signatures to tamper with the attested history, which is not possible according to our attack model. Therefore, no malicious client can tamper with the attested history to falsely accuse an honest cloud service.

**AV1: Availability**
- **Description:** Clients expect the AA to sign an attestation every \( T_A \). If this does not happen, clients will halt, affecting system availability. A malicious RA can refuse to select an AA and also refuse to sign attestations. A malicious cloud service can affect availability by refusing to respond to client requests.
- **Guarantee:** Under normal circumstances, where there are no failures and all components adhere to the protocol, an attestation is produced every \( T_A \). If all clients are asleep and a new client joins, it must wake up the RA. Normally, the new client would have to wait for up to \( T_R \) for the RA to wake up, thus affecting availability. However, because Caelus uses push notifications, this waiting period is shortened to the latency of a push notification, which is on the order of 1 second. Thus, under normal circumstances, Caelus does not affect availability.

#### B. Colluding Clients
Multiple colluding clients do not have any capabilities beyond a single malicious client. They can corrupt or leak data by virtue of their ability to access and modify the data. However, both guarantees against malicious clients, CLT1 and CLT2, still hold.

**CLT1: Non-Repudiation with Collusion**
- **Description:** Malicious clients could share their signing keys, allowing any malicious client to forge signatures that could have been made by another malicious client.
- **Guarantee:** While this changes the traceability of actions to a group of colluding malicious clients, the intent of Guarantee CLT1 remains intact—actions made by an adversary in control of several clients are still traceable back to that group of clients.

**CLT2: False Accusations with Collusion**
- **Description:** To falsely accuse the cloud service, clients must be able to forge cloud service signatures. Having more than one malicious client does not make it any more possible to forge signatures.
- **Guarantee:** Guarantee CLT2 holds against colluding clients.

In summary, colluding clients, regardless of whether they are regular clients or include the AA or RA, do not invalidate any guarantees except Guarantee AV1, which can already be invalidated by a single malicious client if that client happens to be an AA or RA.

### Implementation
This section describes our Caelus prototype, which implements the cloud server and history server components in the cloud service and clients for PCs and Android devices.

#### A. Cloud Service
- **Implementation:** The cloud server and history server components are implemented in 3K lines of Java, and communication between the server components and clients is implemented using Apache XML-RPC.
- **Modularity:** Our prototype is modular and can use different key-value store backends to implement different consistency models.
- **Strong Consistency:** For strong consistency, our prototype uses a single cloud server with a local key-value store implemented with the LevelDB library. All client operations are atomic, providing strong consistency.
- **Eventual Consistency:** For eventual consistency, our prototype uses Amazon’s cloud infrastructure. Multiple cloud servers run as EC2 instances and use Amazon’s S3 service as the key-value store backend. A single history server typically shares one of the EC2 nodes with a cloud server but could also run on a dedicated node.

#### B. Clients
- **Types:** We implement two types of clients, one for PCs and one for Android devices, both written in Java and consisting of about 7K lines of code.
- **Optimization:** To reduce the number of client-server round trips, the server piggybacks recent attestations on the responses to Puts and Gets.
- **Verification:** Each time a client performs a Put, it is enqueued on a deferred verification list. Occasionally, a Get can be verified at the time it occurs because it reads the latest attested value. Otherwise, it reads a value that has yet to be attested and must also be enqueued on the deferred verification list. Verification of deferred operations is performed asynchronously by a verification thread, which periodically wakes up every \( T_A \), processes any new log segments, and verifies operations on the deferred verification list. Operations that remain unverified for longer than \( T_{Caelus} \) are flagged as violations.
- **Synchronization:** Any delays between when the AA posts attestations and when clients process them must be accounted for in \( ǫ \). We synchronize both the period and phase of the verification thread with that of the AA.
- **Push Notifications:** We use Google Cloud Messaging (GCM) to implement push messages on Android clients. GCM generally takes about 1 second to deliver a message due to an additional network hop to Google's servers. This latency could be reduced by implementing a dedicated push service, but for our prototype, the 1-second latency is reasonable. GCM does not use a fixed period for keep-alive messages, but varies their timing based on network conditions. Caelus can be modified to allow for a variable \( T_R \) by having the phone embed the length of the current AA selection period in each selection message, but our prototype does not implement this. As a result, we currently do not synchronize \( T_R \) with the GCM heartbeat period.

### Evaluation
We evaluate four properties of our Caelus prototype:

1. **Effectiveness at Detecting Consistency Violations:**
   - **Method:** We use our eventual consistency prototype on S3 to evaluate Caelus' effectiveness at detecting consistency violations. Amazon does not publish a visibility time bound for S3, so we vary \( T_S \) and measure the effect on the number of consistency violations detected by Caelus.
   - **Setup:** Caelus is deployed on S3 in the US Standard Region, which automatically replicates data across Amazon data centers in the USA. Cloud servers are deployed on EC2 in the Oregon and Northern Virginia data centers. Four "writer" clients perform Puts of non-repeating 1MB values on a key, and a "reader" client performs Gets.

2. **Computational Costs on Clients:**
   - **Evaluation:** We measure the computational costs of Caelus on clients.

3. **Battery Costs on Smartphones:**
   - **Evaluation:** We evaluate the battery costs of Caelus on smartphones and the battery savings of attestor-partitioning.

4. **Network Bandwidth Overhead:**
   - **Evaluation:** We assess the network bandwidth overhead of sending and retrieving attestations in Caelus.