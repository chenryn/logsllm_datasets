### Performance and Efficiency

The verification process takes approximately 0.5 seconds when the helper device is a PC and 0.7 seconds when it is a smartphone. These estimates are based on a Java implementation of bilinear pairing, which is less efficient than a native ARM library. Using a native ARM library would significantly enhance the performance on smartphones. The token verification time is heavily influenced by our implementation of hashing to G2. If the values \( H_{\text{Attr}}(v_{\text{Attr}}) \) are pre-computed, the verification time remains nearly constant regardless of the credential size. This assumption is practical because the number of attributes and values in an application must be limited; otherwise, unique values could make the credential traceable. The most time-consuming operation is the issuance algorithm. Fortunately, this workload can be distributed, as it involves generating AAEQ signatures on the same message but with different secret keys.

### Data Size

In Table 4, we present the sizes for credential requests, show tokens, and credentials stored by the helper device. We use \([Z_p]\), \([G1]\), and \([G2]\) to denote the element sizes, and \( s \) to denote the number of attributes in a credential.

### Discussion and Further Extensions

#### Optional Revocation

Unlike some previous attribute-based credential (AC) models and constructions, our CHAC model does not initially consider revocation. However, we can extend our generic construction from Section 4 to support blacklisting of core devices, thereby revoking corresponding credentials.

Recall that the core device uses the SFPK.KeyGen algorithm to generate SFPK keys. For revocation, we can replace this with the trapdoor generation SFPK.TKGen algorithm, which outputs keys with the same distribution and an additional trapdoor \(\delta_{\text{SFPK}}\). This trapdoor can be used in the SFPK.ChkRep algorithm. The core device can share this trapdoor with the helper device without compromising unforgeability. The helper device can encrypt the trapdoor with respect to the authorities' public key and use standard zero-knowledge (ZK) proofs to verify that the ciphertext contains \(\delta_{\text{SFPK}}\) such that \( \text{SFPK.ChkRep}(\delta_{\text{SFPK}}, \text{pk}_{\text{SFPK}}) = 1 \). In our instantiation, this corresponds to checking pairing product equations, for which efficient non-interactive ZK proofs are known [47].

Once a device is blacklisted, the revocation authority can decrypt and publish the trapdoor, which verifiers can use to check if the current session corresponds to revoked credentials. This approach discloses all show tokens (past and future) created by the revoked device. A more general approach to prevent this is to publish a randomized SFPK public key \(\text{pk}_R^i\) of the \(i\)-th blacklisted device. The helper then creates a ZK proof that there exists a trapdoor \(\delta_{\text{SFPK}}\) for which \(\text{SFPK.ChkRep}(\delta_{\text{SFPK}}, \text{pk}'_{\text{SFPK}}) = 1\) and \(\text{SFPK.ChkRep}(\delta_{\text{SFPK}}, \text{pk}_R^i) = 0\) for all \(\text{pk}_R^i\) on the blacklist.

#### Pre-loading Credentials

In our model, we assume that credentials are used in systems where the helper device is part of the user's platform. However, this is not the case for applications like e-tickets, where the terminal communicating with the smart card (core device) is part of the service. A solution for this setting is to pre-randomize the SFPK public key and the AAEQ signatures by the helper device and store them on the core device. To show such a credential, the core device can sign the aid for the given session nonce and use the stored values to create the full asig. Due to the memory constraints of the core device, this only works when the helper is frequently available and the user can re-load "fresh" values.

Pre-randomized values can only be used by the core device due to the dependability property. These values can be stored in an online database, with each entry associated with a unique identifier generated by the helper device. The helper device creates these identifiers by hashing a secret key \( k_{\text{pre}} \) together with a counter.

#### Distributed/Parallel Issuing

An interesting property of our construction is that the issuing algorithm can be easily distributed between different servers representing the issuing authority. Each server receives a dedicated set of attributes and the corresponding AAEQ secret key. Once a request is received and verified, it is sent to the responsible servers, which compute the AAEQ signature and return the results to a server that combines them.

#### (Un)Trusted Setup

Our generic construction from Section 4.2 uses a trusted setup to generate a common reference string (CRS) \(\rho\). This is only required if the SFPK scheme needs a CRS, as is the case for our instantiation. Specifically, the CRS in Scheme 1 is composed of BG and two values \( Y_1 = g^y \) and \( Y_2 = g^{y^2} \). The group parameters can be computed using a deterministic procedure without secret coins, as is the case for BN curves [4]. However, \( y \) must remain unknown to prevent forgery. Knowing \( y \) does not compromise the class-hiding property, which ensures the unlinkability of credentials.

A simple corollary is that if the system consists of only one issuer, the CRS can be generated by that entity. However, this is not possible with multiple issuers, as knowledge of \( y \) would allow using credentials issued by different issuers. A workaround is to generate an additive share between all issuers. Instead of using values \( Y_{1,i} \) and \( Y_{2,i} \) generated by the \( i \)-th issuer, the CRS is constructed as \( Y_1 = \prod_{i=1}^n Y_{1,i} \) and \( Y_2 = \prod_{i=1}^n Y_{2,i} \), where each issuer contributes a share. This technique involves an additional step, such as a proof of knowledge of the shared discrete logarithm.

### Acknowledgements

We thank Fabian Eidens, Octavio Perez Kempner, and the anonymous reviewers for their helpful feedback. Lucjan Hanzlik was supported by the German Federal Ministry of Education and Research (BMBF) through funding for CISPA and the CISPA-Stanford Center for Cybersecurity (FKZ: 16KIS0762). Daniel Slamanig was supported by the European Commission through ECSEL Joint Undertaking (JU) under grant agreement n°826610 (Comp4Drones) and by the Austrian Science Fund (FWF) and netidee SCIENCE under grant agreement P31621-N38 (Profet).

### References

[1] Michael Backes, Lucjan Hanzlik, Kamil Kluczniak, and Jonas Schneider. 2018. Signatures with Flexible Public Key: Introducing Equivalence Classes for Public Keys. In ASIACRYPT 2018, Part II (LNCS, Vol. 11273). 405–434.

[2] Michael Backes, Lucjan Hanzlik, and Jonas Schneider-Bensch. 2019. Membership Privacy for Fully Dynamic Group Signatures. In ACM CCS 2019. 2181–2198.

[3] Foteini Baldimtsi and Anna Lysyanskaya. 2013. Anonymous credentials light. In ACM CCS 2013. 1087–1098.

[4] Paulo S. L. M. Barreto and Michael Naehrig. 2006. Pairing-Friendly Elliptic Curves of Prime Order. In SAC 2005 (LNCS, Vol. 3897). 319–331.

[5] Paulo S. L. M. Barreto and Geovandro C. C. F. Pereira. 2015. Barreto-Naehrig (BN) pairing-friendly elliptic curves. https://github.com/javabeanz/bnpairings.

[6] Lejla Batina, Jaap-Henk Hoepman, Bart Jacobs, Wojciech Mostowski, and Pim Vullers. 2010. Developing Efficient Blinded Attribute Certificates on Smart Cards via Pairings. In CARDIS 2010, Dieter Gollmann, Jean-Louis Lanet, and Julien Iguchi-Cartigny (Eds.). Springer.

[7] Mira Belenkiy, Jan Camenisch, Melissa Chase, Markulf Kohlweiss, Anna Lysyanskaya, and Hovav Shacham. 2009. Randomizable Proofs and Delegatable Anonymous Credentials. In CRYPTO 2009 (LNCS, Vol. 5677). 108–125.

[8] Mihir Bellare and Phillip Rogaway. 1993. Random Oracles are Practical: A Paradigm for Designing Efficient Protocols. In ACM CCS 93. 62–73.

[9] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. 2011. High-Speed High-Security Signatures. In CHES 2011 (LNCS, Vol. 6917). 124–142.

[10] Patrik Bichsel, Jan Camenisch, Thomas Groß, and Victor Shoup. 2009. Anonymous credentials on a standard java card. In ACM CCS 2009. 600–610.

[11] Ronny Bjones, Ioannis Krontiris, Pascal Paillier, and Kai Rannenberg. 2012. Integrating Anonymous Credentials with eIDs for Privacy-Respecting Online Authentication. In APF 2012. Springer.

[12] Marina Blanton. 2008. Online subscriptions with anonymous access. In ASIACCS 08. 217–227.

[13] Johannes Blömer and Jan Bobolz. 2018. Delegatable Attribute-Based Anonymous Credentials from Dynamically Malleable Signatures. In ACNS 18 (LNCS, Vol. 10892). 221–239.

[14] Johannes Blömer, Jan Bobolz, Denis Diemert, and Fabian Eidens. 2019. Updatable Anonymous Credentials and Applications to Incentive Systems. In ACM CCS 2019. 1671–1685.

[15] Jan Bobolz, Fabian Eidens, Stephan Krenn, Daniel Slamanig, and Christoph Striecks. 2020. Privacy-Preserving Incentive Systems with Highly Efficient Point-Collection. In ASIACCS 20. 319–333.

[16] Dan Boneh, Ben Lynn, and Hovav Shacham. 2001. Short Signatures from the Weil Pairing. In ASIACRYPT 2001 (LNCS, Vol. 2248). 514–532.

[17] Dan Boneh and Victor Shoup. 2020. A Graduate Course in Applied Cryptography (version 0.5). cryptobook.us.

[18] Stefan Brands. 2002. A technical overview of digital credentials. Available online, Feb 20 (2002), 145–8.

[19] Ernie Brickell and Jiangtao Li. 2012. Enhanced Privacy ID: A Direct Anonymous Attestation Scheme with Enhanced Revocation Capabilities. IEEE Trans. Dependable Secur. Comput. 9, 3 (2012), 345–360.

[20] Ernest F. Brickell, Jan Camenisch, and Liqun Chen. 2004. Direct Anonymous Attestation. In ACM CCS 2004. 132–145.

[21] Jan Camenisch. 2006. Protecting (Anonymous) Credentials with the Trusted Computing Group’s TPM V1.2. In (SEC 2006). Springer.

[22] Jan Camenisch, Liqun Chen, Manu Drijvers, Anja Lehmann, David Novick, and Rainer Urian. 2017. One TPM to Bind Them All: Fixing TPM 2.0 for Provably Secure Anonymous Attestation. In 2017 IEEE Symposium on Security and Privacy. 901–920.

[23] Jan Camenisch, Manu Drijvers, Petr Dzurenda, and Jan Hajny. 2019. Fast Keyed-Verification Anonymous Credentials on Standard Smart Cards. In SEC 2019, Gurpreet Dhillon, Fredrik Karlsson, Karin Hedström, and André Zúquete (Eds.). Springer.

[24] Jan Camenisch, Manu Drijvers, Alec Edgington, Anja Lehmann, and Rainer Urian. 2018. FIDO ECDAA Algorithm. https://fidoalliance.org/specs/fido-v2.0-id-20180227/fido-ecdaa-algorithm-v2.0-id-20180227.html.

[25] Jan Camenisch, Manu Drijvers, and Anja Lehmann. 2016. Anonymous Attestation Using the Strong Diffie Hellman Assumption Revisited. In TRUST 2016. Springer.

[26] Jan Camenisch, Manu Drijvers, and Anja Lehmann. 2016. Universally Composable Direct Anonymous Attestation. In PKC 2016, Part II (LNCS, Vol. 9615). 234–264.

[27] Jan Camenisch, Maria Dubovitskaya, Kristiyan Haralambiev, and Markulf Kohlweiss. 2015. Composable and Modular Anonymous Credentials: Definitions and Practical Constructions. In ASIACRYPT 2015, Part II (LNCS, Vol. 9453). 262–288.

[28] Jan Camenisch and Anna Lysyanskaya. 2001. An Efficient System for Non-transferable Anonymous Credentials with Optional Anonymity Revocation. In EUROCRYPT 2001 (LNCS, Vol. 2045). 93–118.

[29] Jan Camenisch and Anna Lysyanskaya. 2004. Signature Schemes and Anonymous Credentials from Bilinear Maps. In CRYPTO 2004 (LNCS, Vol. 3152). 56–72.

[30] Jan Camenisch and Els Van Herreweghen. 2002. Design and Implementation of The Idemix Anonymous Credential System. In ACM CCS 2002. 21–30.

[31] Melissa Chase, Sarah Meiklejohn, and Greg Zaverucha. 2014. Algebraic MACs and Keyed-Verification Anonymous Credentials. In ACM CCS 2014. 1205–1216.

[32] Melissa Chase, Trevor Perrin, and Greg Zaverucha. 2020. The Signal Private Group System and Anonymous Credentials Supporting Efficient Verifiable Encryption. In ACM CCS 20. 1445–1459.

[33] David Chaum. 1982. Blind Signatures for Untraceable Payments. In CRYPTO’82. 199–203.

[34] David Chaum and Eugène van Heyst. 1991. Group Signatures. In EUROCRYPT’91 (LNCS, Vol. 547). 257–265.

[35] Liqun Chen and Rainer Urian. 2015. DAA-A: Direct Anonymous Attestation with Attributes. In TRUST 2015.

[36] Scott E. Coull, Matthew Green, and Susan Hohenberger. 2009. Controlling Access to an Oblivious Database Using Stateful Anonymous Credentials. In PKC 2009 (LNCS, Vol. 5443). 501–520.

[37] Geoffroy Couteau and Michael Reichle. 2019. Non-interactive Keyed-Verification Anonymous Credentials. In PKC 2019, Part I (LNCS, Vol. 11442). 66–96.

[38] Elizabeth C. Crites and Anna Lysyanskaya. 2019. Delegatable Anonymous Credentials from Mercurial Signatures. In CT-RSA 2019 (LNCS, Vol. 11405). 535–555.

[39] Elizabeth C. Crites and Anna Lysyanskaya. 2020. Mercurial Signatures for Variable-Length Messages. Cryptology ePrint Archive, Report 2020/979. https://eprint.iacr.org/2020/979.

[40] Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth, Daniel Genkin, Nadia Heninger, Ahmad Moghimi, and Yuval Yarom. 2018. CacheQuote: Efficiently Recovering Long-term Secrets of SGX EPID via Cache Attacks. IACR TCHES 2018, 2 (2018), 171–191. https://tches.iacr.org/index.php/TCHES/article/view/879.

[41] Alex Davidson, Ian Goldberg, Nick Sullivan, George Tankersley, and Filippo Valsorda. 2018. Privacy Pass: Bypassing Internet Challenges Anonymously. PoPETs 2018, 3 (2018), 164–180.

[42] Dominic Deuber, Matteo Maffei, Giulio Malavolta, Max Rabkin, Dominique Schröder, and Mark Simkin. 2018. Functional Credentials. PoPETs 2018, 2 (April 2018), 64–84.

[43] Georg Fuchsbauer and Romain Gay. 2018. Weakly Secure Equivalence-Class Signatures from Standard Assumptions. In PKC 2018, Part II (LNCS, Vol. 10770). 153–183.

[44] Georg Fuchsbauer, Christian Hanser, and Daniel Slamanig. 2015. Practical Round-Optimal Blind Signatures in the Standard Model. In CRYPTO 2015, Part II (LNCS, Vol. 9216). 233–253.

[45] Georg Fuchsbauer, Christian Hanser, and Daniel Slamanig. 2019. Structure-Preserving Signatures on Equivalence Classes and Constant-Size Anonymous Credentials. Journal of Cryptology 32, 2 (April 2019), 498–546.

[46] Christina Garman, Matthew Green, and Ian Miers. 2014. Decentralized Anonymous Credentials. In NDSS 2014.

[47] Jens Groth and Amit Sahai. 2008. Efficient Non-interactive Proof Systems for Bilinear Groups. In EUROCRYPT 2008 (LNCS, Vol. 4965). 415–432.

[48] Christian Hanser and Daniel Slamanig. 2014. Structure-Preserving Signatures on Equivalence Classes and Their Application to Anonymous Credentials. In ASIACRYPT 2014, Part I (LNCS, Vol. 8873). 491–511.

[49] Chloé Hébant and David Pointcheval. 2020. Traceable Constant-Size Multi-Authority Credentials. Cryptology ePrint Archive, Report 2020/657. https://eprint.iacr.org/2020/657.

[50] Thomas S. Heydt-Benjamin, Hee-Jin Chae, Benessa Defend, and Kevin Fu. 2006. Privacy for Public Transportation. In PET 2006 (LNCS, Vol. 4258). 1–19.

[51] Thomas Icart. 2009. How to Hash into Elliptic Curves. In CRYPTO 2009 (LNCS, Vol. 5677). 303–316.

[52] Jonathan Katz and Nan Wang. 2003. Efficiency Improvements for Signature Schemes with Tight Security Reductions. In ACM CCS 2003. 155–164.

[53] Mojtaba Khalili, Daniel Slamanig, and Mohammad Dakhilalian. 2019. Structure-Preserving Signatures on Equivalence Classes from Standard Assumptions. In ASIACRYPT 2019, Part III (LNCS, Vol. 11923). 63–93.

[54] Armen Khatchatourov, Maryline Laurent, and Claire Levallois-Barth. 2015. Privacy in Digital Identity Systems: Models, Assessment, and User Adoption. In Electronic Government, Efthimios Tambouris, Marijn Janssen, Hans Jochen Scholl, Maria A. Wimmer, Konstantinos Tarabanis, Mila Gascó, Bram Klievink, Ida Lindgren, and Peter Parycek (Eds.). Springer International Publishing, Cham.