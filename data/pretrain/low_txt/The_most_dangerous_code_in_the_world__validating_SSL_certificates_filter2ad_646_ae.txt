### 代码优化

```python
import re

def validate_certificate(cert, hostname):
    common_name = self._get_common_name(cert)
    alt_names = self._get_subject_alt_names(cert)

    # 替换通配符 '*' 为字母数字和破折号，替换点 '.' 为字面值
    valid_patterns = [
        re.compile(pattern.replace(r".", r"\.").replace(r"*", r"[0-9A-Za-z-]+"))
        for pattern in set(common_name) | set(alt_names)
    ]

    return any(pattern.search(hostname) for pattern in valid_patterns)
```

### 修复说明

此 bug 已在 Libcloud 版本 0.11.1 中修复，我们在通知开发者后进行了更新。

### 10.3 Amazon Elastic Load Balancing API Tools

该库覆盖了 JDK 的默认 X509TrustManager 来禁用主机名验证。即使 X509TrustManager 没有被覆盖，该库使用 Codehaus XFire 进行 SSL 连接，而 XFire 不执行主机名验证（参见第 8.1 节）。

### 10.4 购物车

osCommerce、ZenCart、Ubercart 和 PrestaShop 是用 PHP 实现的开源购物车系统。它们使用 cURL 进行与支付网关的 SSL 连接。如果 cURL 不可用，它们通常会回退到不安全的 fsockopen。

这些购物车都捆绑了特定支付处理器的插件模块。几乎无一例外，这些模块关闭了证书验证。例如，在 ZenCart 中，易受攻击的模块包括 LinkPoint、Authorize.Net 和 PayPal Payments Pro，以及 PayPal IPN 功能（参见第 7.3 节）。LinkPoint 模块文件开头有一个有趣的注释：“### 你真的不需要编辑这个文件！###”

在 PrestaShop 中，易受攻击的模块包括 eBay、PayPal 和 Canada Post；在 Ubercart 中，易受攻击的模块包括 PayPal、Authorize.Net 和 CyberSource；在 osCommerce 中，易受攻击的模块包括 Sage Pay Direct、Authorize.Net、MoneyBookers 和各种 PayPal 服务。

使用这些购物车的商家与支付网关之间的 SSL 连接在中间人攻击中是不安全的。唯一的例外是 Google 为 PrestaShop 和 osCommerce 提供的模块。osCommerce 的 Google Checkout 模块来自 code.google.com，并未捆绑在 osCommerce 中。它将 `CURLOPT_SSL_VERIFYPEER` 设置为 `true` 并保留 `CURLOPT_SSL_VERIFYHOST` 的正确默认值 2。相比之下，官方的 PayPal 提供的 PayFlow 模块则禁用了证书验证。

### 10.5 AdMob

Google 的 AdMob 向移动网站所有者提供了示例代码，用于在其服务器上将其移动应用实例与其开发者账户关联（参见第 5 节）。该代码使用 cURL 建立与 AdMob 服务器的 SSL 连接，但关闭了证书验证。因此，中间人攻击者可以访问开发者的全部 Google 服务。

### 10.6 Android 应用

Groupon Redemptions 是一个面向商家的 Android 应用，它通过允许任何主机名的“允许所有”主机名验证器和绑定到空的信任管理器两次禁用了证书验证。类似地，Breezy 是一个用于安全文档打印的应用，它禁用了主机名验证并覆盖了默认的信任管理器。

ACRA 是一个用于将应用程序崩溃报告发布到 Google Doc 的 Android 库，它覆盖了默认的信任管理器。任何使用此库的应用程序在面对中间人攻击时都是不安全的。

### 10.7 AIM

Windows 上的 AIM 客户端版本 1.0.1.2 使用 Microsoft 的 CryptoAPI。运行时分析显示，它调用了 CryptoAPI 的证书验证函数 `CertVerifyCertificateChainPolicy`。为了禁用证书验证，它传递了一个设置了 `CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG` 标志的 `CERT_CHAIN_POLICY_PARA` 变量，指示 CryptoAPI 接受由不受信任的 CA 签署的证书。AIM 也不执行任何主机名验证。

### 10.8 FilesAnywhere

FilesAnywhere 是一款用于管理云存储的应用程序。它使用 CryptoAPI 进行 SSL 连接，并接受自签名和第三方证书。

FilesAnywhere 有一个有趣的特点。如果在尝试连接非 Google 服务器时遇到 Google 证书，它会显示警告消息“WebDav 服务器有了新地址，请在配置文件中指定 http://google.com。”如果遇到其他任何第三方证书，它会静默接受并将用户数据发送到可能是恶意的服务器。

### 11. 我们的建议

每当应用程序开发人员需要处理 SSL 时，常规建议是使用标准的 SSL 库。这些建议是正确的，但不够充分。本文展示了即使是高安全性软件的开发人员也经常错误地使用标准 SSL 库。以下建议基于我们对不同应用程序中 SSL 证书验证失败的分析。

#### 11.1 对于应用程序开发人员

- **应** 使用模糊测试（必要时使用黑盒测试）和对抗性测试来查看应用程序在遇到异常 SSL 证书时的行为。即使漏洞很微妙，其症状通常也很明显。
- **不应** 修改应用程序代码以禁用证书验证来进行自签名或不受信任证书的测试。我们的案例研究表明，开发人员经常会忘记在生产版本中恢复这些修改。相反，创建一个包含不受信任 CA 公钥的临时密钥库。在测试自签名或不受信任证书时，使用该密钥库作为可信密钥库。
- **不应** 依赖库的默认设置来安全地建立 SSL 连接。默认设置可能在不同库或同一库的不同版本之间发生变化。始终显式设置必要的选项以确保安全连接。

#### 11.2 对于 SSL 库开发人员

- **应** 使 SSL 库对其 API 的语义更加明确。许多情况下，很明显应用程序开发人员并不理解各种选项和参数的意义。例如，PHP 的 Amazon Flexible Payments Services 和 PayPal Payments Standard 库试图启用主机名验证，但意外地覆盖了正确的默认值并最终禁用了它（参见第 7.1 和 7.2 节）。这表明即使安全的默认值也可能不够。Lynx 尝试检查自签名证书，但误解了 GnuTLS 证书验证函数的返回值，导致检查从未执行（参见第 7.4 节）。形式化 SSL 库 API 的精确语义并严格验证应用程序和库之间的“契约”是一个未来研究的有趣话题，可能需要编程语言的支持。
- **不应** 将管理 SSL 连接的责任委托给应用程序。现有的 SSL 库向高层软件暴露了许多选项，这充满了危险。应用程序开发人员可能没有意识到他们必须显式选择某些选项才能启用证书验证。因此，库应该尽可能使用安全的默认值。此外，它们不应该像 JSSE 在算法字段为空或空字符串时那样静默跳过重要的功能如主机名验证。相反，它们应该抛出运行时异常或以其他方式通知应用程序。
- **应** 设计一个干净且一致的错误报告接口。像 OpenSSL 和 GnuTLS 这样的库通过函数的返回值报告一些错误，而同一个函数的其他错误则通过作为参数传递的标志报告。不一致的接口会使开发人员困惑，从而在他们的应用程序中遗漏一些错误检查。

这些建议提供了短期的解决方案。从根本上解决这个问题需要对 SSL 库的 API 进行彻底的重新设计。而不是要求应用程序开发人员管理诸如 `CURLOPT_SSL_VERIFYPEER` 或 `SSL_get_verify_result` 这样的难以理解的选项，它们应该提供高层次的抽象，以接近应用程序语义的术语明确表达网络连接的安全属性，例如“保密且经过身份验证的隧道”。库还应该明确任何应用程序控制选项的安全后果，例如，不是问“验证主机名？”，而是问“任何人都可以冒充服务器。可以吗？”

### 12. 相关工作

Kevin McArthur 独立于这项工作宣布了多个由于 PHP 软件中的 SSL 证书验证不当而导致的漏洞。受影响的程序包括 osCommerce、Ubercart、PrestaShop 和三个 PayPal SDK。

Moxie Marlinspike 展示了浏览器和 SSL 库中的证书验证代码中的多个漏洞，包括缺乏基本约束检查（例如，检查 CA 位）[11] 和错误解析“CommonName”字段中的 NULL 字符 [12]。相比之下，我们专注于使用（大部分）正确 SSL 库的非浏览器软件的错误使用。

Kaminsky 等人 [10] 表明，CA 软件和浏览器证书验证代码之间的解析差异可能导致 CA 发布可用于中间人攻击的证书。相比之下，我们调查的是非浏览器客户端中的证书验证漏洞，而不是 CA 软件。

Stevens 等人展示了攻击者如何利用 MD5 哈希碰撞让 CA 发布一种特殊的证书，这种证书对于普通主机有效，但其哈希与新的流氓中间 CA 证书的哈希发生冲突 [18]。相比之下，我们的攻击不涉及证书伪造。

最近，几个证书颁发机构如 Comodo [5] 和 DigiNotar [6] 被攻破，并被攻击者用来为流行网站签发假证书。相比之下，我们的攻击不涉及 CA 攻破。

为了缓解流氓证书的风险，Evans 等人提出了证书锁定，即在浏览器中预先建立知名网站与其证书之间的绑定 [8]。我们分析的软件都不支持证书锁定。

几项大规模研究分析了 HTTPS 部署 [7, 22]，并发现了许多 SSL 证书中的错误。最常见的错误之一是服务器的完全限定域名与证书标识符之间的不匹配。仅凭这种配置错误本身并不能实现中间人攻击。

Chen 等人展示了恶意代理如何利用浏览器漏洞进行 HTTPS 中间人攻击 [3]。相比之下，我们的攻击不依赖于浏览器漏洞。

侧信道攻击可以从加密流量中提取信息，即使 SSL 正确部署也是如此 [4, 19]。相比之下，我们发现的漏洞使中间人攻击者能够解密 SSL 流量，从而无需进行侧信道分析。

其他侧信道攻击包括从 OpenSSL 实现中提取私钥的定时攻击 [2]。

### 13. 结论

本文的主要教训是，在非浏览器软件中使用 SSL 是一项令人惊讶的挑战任务。我们证明了即使依赖于标准 SSL 库（如 JSSE、OpenSSL、GnuTLS 等）的应用程序也常常错误地执行 SSL 证书验证或根本不执行。这些漏洞在关键软件中普遍存在，例如用于从商家传输客户支付详情到支付网关的 Amazon FPS 和 PayPal 库；集成购物车；用于远程管理云存储和虚拟云基础设施的 Amazon EC2 和 Rackspace 客户端；Android 上的 Chase 移动银行；以及其他许多流行程序。它们的 SSL 连接在面对中间人攻击时完全不安全。

我们还提出了更安全地在非浏览器软件中使用 SSL 的建议。未来的研究方向包括：（1）开发更好的黑盒测试和代码分析工具，以发现 SSL 连接建立逻辑中的错误；（2）设计形式化验证技术和编程语言支持，以自动检查应用程序是否正确使用 SSL 库并且不会误解关键选项和参数的含义；（3）设计更好的 SSL 和其他安全网络协议的 API。

### 致谢

本研究部分得到了 NSF 授予 CNS-0331640、CNS-0746888 和 CNS-0905602 的资助，两项 Google 研究奖，Samsung 以及 MURI 项目在 AFOSR Grant No. FA9550-08-1-0352 下的支持。Boneh 也感谢 iSEC 合作伙伴对此工作的有益讨论。

我们感谢 Amazon、Apache、Chase、GitHub、Lynx、PayPal 和 Rackspace 开发人员在注意到这些问题后承认并承诺修复这些漏洞。我们感谢 Colm O hEigeartaigh 解释了 Apache CXF 中证书验证的预期行为。

### 参考文献

[1] https should check CN of x509 cert. https://issues.apache.org/jira/browse/HTTPCLIENT-613.

[2] D. Brumley and D. Boneh. Remote timing attacks are practical. In USENIX Security, 2003.

[3] S. Chen, Z. Mao, Y.-M. Wang, and M. Zhang. Pretty-Bad-Proxy: An overlooked adversary in browsers’ HTTPS deployments. In S&P, 2009.

[4] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel leaks in Web applications: A reality today, a challenge tomorrow. In S&P, 2010.

[5] Comodo report of incident. http://www.comodo.com/Comodo-Fraud-Incident-2011-03-23.html, 2011.

[6] Diginotar issues dodgy SSL certificates for Google services after break-in. http://www.theinquirer.net/inquirer/news/2105321/diginotar-issues-dodgy-ssl-certificates-google-services-break, 2011.

[7] P. Eckersley and J. Burns. An observatory for the SSLiverse. In DEFCON, 2010.

[8] C. Evans and C. Palmer. Certificate pinning extension for HSTS. http://www.ietf.org/mail-archive/web/websec/current/pdfnSTRd9kYcY.pdf, 2011.

[9] Fiddler - Web debugging proxy. http://fiddler2.com/fiddler2/.

[10] D. Kaminsky, M. Patterson, and L. Sassaman. PKI layer cake: new collision attacks against the global X.509 infrastructure. In FC, 2010.

[11] Moxie Marlinspike. IE SSL vulnerability. http://www.thoughtcrime.org/ie-ssl-chain.txt, 2002.

[12] Moxie Marlinspike. Null prefix attacks against SSL/TLS certificates. http://www.thoughtcrime.org/papers/null-prefix-attacks.pdf, 2009.

[13] Internet X.509 public key infrastructure certificate policy and certification practices framework. http://www.ietf.org/rfc/rfc2527.txt, 1999.

[14] HTTP over TLS. http://www.ietf.org/rfc/rfc2818.txt, 2000.

[15] Internet X.509 public key infrastructure certificate and certificate revocation list (CRL) profile. http://tools.ietf.org/html/rfc5280, 2008.

[16] The Secure Sockets Layer (SSL) protocol version 3.0. http://tools.ietf.org/html/rfc6101, 2011.

[17] Representation and verification of domain-based application service identity within Internet public key infrastructure using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). http://tools.ietf.org/html/rfc6125, 2011.

[18] M. Stevens, A. Sotirov, J. Appelbaum, A. Lenstra, D. Molnar, D. Osvik, and B. Weger. Short chosen-prefix collisions for MD5 and the creation of a rogue CA certificate. In CRYPTO, 2009.

[19] Q. Sun, D. Simon, Y.-M. Wang, W. Russell, V. Padmanabhan, and L. Qiu. Statistical identification of encrypted Web browsing traffic. In S&P, 2002.

[20] CVE-2009-4831. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-4831, 2009.

[21] J. Viega and M. Messier. Secure Programming Cookbook for C and C++. O’Reilly Media, 2007.

[22] N. Vratonjic, J. Freudiger, V. Bindschaedler, and J.-P. Hubaux. The inconvenient truth about Web certificates. In WEIS, 2011.

[23] R. Wang, S. Chen, X. Wang, and S. Qadeer. How to shop for free online – Security analysis of cashier-as-a-service based Web stores. In S&P, 2011.