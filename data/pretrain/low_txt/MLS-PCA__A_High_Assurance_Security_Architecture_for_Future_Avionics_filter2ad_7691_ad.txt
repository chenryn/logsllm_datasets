### Alloy Constraint Analyzer Findings and Resolution

The Alloy Constraint Analyzer identified a scenario where an operation that modifies DAC (Discretionary Access Control) permissions violated the DAC invariant, which states: "a communication path exists only if the DAC policy permits it." The issue arose due to a delay in synchronizing the DAC changes with the EPE (Endpoint Enforcer) state. This is a classic problem of determining when a revocation becomes effective.

Typically, this invariant check is used to determine if an operation is under-constrained. In this case, the invariant was over-constrained. The solution was to relax the DAC invariant and apply it only to new connections. The revised rule is: "A connection path may be created only if the DAC policy allows it."

### 7. Conclusion: Proof of Concept

As the saying goes, "the proof is in the pudding," and our pudding is the MLS-PCA (Multi-Level Security Polymorphic Computing Architecture) proof of concept demonstration. However, how do you demonstrate a network of thousands of processors nearly two decades before they exist? Our goal was to write code from the formal specifications for the NSE (Network Security Element), EPE, and a critical application of AAPs (Application Access Points). Simulation would not suffice, and using hundreds of PCA chips was years away, as they were still under development by DARPA. This was our initial dilemma, but we found a way using Grid Computing [28].

#### 7.1 Grid Computing: Simulating 1000s of CPUs

The DARPA contract for MLS-PCA development was limited to formal modeling. However, Northrop Grumman Corporation found the modeling results highly valuable and decided to sponsor a prototype using CY 2003 Independent R&D (IRAD).

Northrop Grumman's R&D private network consists of hundreds of user workstations, including Windows PCs, Sun Solaris machines, and Silicon Graphics workstations. By running 10 AAPs per workstation, we could achieve a 1,000-node distributed MLS-PCA implementation via a Grid Computing architecture. The network is available for two shifts daily, plus weekends. We wrote the NSE and EPE code in C++ based on the formal specifications. The code runs under Windows with an IP protocol stack, and we use IPSec, 256-bit key AES software encryption, and HMAC-SHA-256 authentication for the EPE. While we recognize the vulnerability of MLS-PCA to attacks on the Windows OS, the primary objective of this implementation is to validate the model, demonstrate its soundness, and collect basic performance data. In the future, we plan to replace Windows with a high-assurance TCB (Trusted Computing Base) to boot and run NSE, EPE, and AAP code. We have also selected a meaningful MLS-PCA demonstration application.

#### 7.2 Targeting Application

MLS-PCA computing requires a different paradigm for designing applications. Instead of constructing large, monolithic functional modules of hardware and software, our model demands that functions be composed of small code segments, or processes, each operating at a single security level within its own processor and communicating with related processes via Inter-Process Communication (IPC). The art of designing such distributed software is just beginning to take shape in various research efforts, such as DARPA’s “agent-based systems” [29]. Northrop Grumman has extensive R&D in multi-sensor target detection, and these algorithm-based applications have MLS properties and can benefit from the parallelism inherent in the distributed MLS-PCA model and Grid Computing.

A typical target radar or infrared image can be as large as 9,000 x 9,000 pixels, which is too large for processing on anything short of a high-performance server or specialized digital signal processor. Our Grid Computing demo divides the image into 100 smaller 1,000 x 1,000 pixel sub-images, allowing for cell overlap to avoid missing features that span cell boundaries. Each sub-image is processed by a Grid processor capable of applying a search algorithm to detect potential targets. We simulate data for different target types. When a potential target is detected and identified, the algorithm reports it to a central controller, which eliminates duplicate reports. The central controller then reports each potential target to one of four target controllers, each running at a different simulated security level: unclassified, confidential, secret, and top secret. The cell processors all run at a simulated unclassified security level. A cell processor will write up to the central controller's higher security level, and the central controller will write up to the appropriate target controllers. MLS-PCA is designed explicitly via simplex trusted paths to permit authorized Append connections. The target controllers display the reports from all cells and show the distribution of found targets on a composite system high display.

#### 7.3 Performance Goals

The objective of the demonstration is to show the feasibility of building MLS systems on the MLS-PCA architecture. It will provide a vehicle for gathering performance data on critical choke points in the architecture, initialization mechanisms, and design oversights. The demonstration will achieve:

- Simulated MLS operation in a distributed network
- Distributed application of a typical avionics function, i.e., targeting
- High value of formal specification
- Proof of concept for MLS-PCA
  - Operation of live NSE, EPE, and AAP code and IPC
  - Boot of MLS-PCA
  - Performance data on MLS-PCA operation
- Program interest from a real avionics application

There was insufficient testing to report findings by the publication date. However, the coding and checkout of the NSE and EPE went well and were completed in four months. The NSE is 3,371 Source Lines of Code (SLOC) compiling to 344K binary, and the EPE is 2,679 SLOC compiling to 580K binary, excluding libraries. The non-optimized code is small enough to be handled by any of the Grid PCs and even the limited PCA memory available with first-generation chips. The applications and AAPs are long-lead-time elements. A future companion paper will report the specific findings of the Proof of Concept Demonstration.

### 8. References

[1] "Joint Vision 2020", JCS, J5, June 2000. Available at http://www.dtic.mil/jointvision/jvpub2.htm.

[2] J. P. Anderson, "Computer Security Technology Planning Study", 1972, In ESD-TR-73-51.

[3] "Department of Defense Trusted Computer System Evaluation Criteria (TCSEC)", DOD 5200.28-STD, December 1985. Available at http://www.fas.org/irp/nsa/rainbow.htm.

[4] "Common Criteria for Information Technology Security Evaluation", ISO/IEC 15408, Version 2.1, CCIMB-99-031, August 1999. Available at http://www.radium.ncsc.mil/tpep/library/ccitse/ccitse.html.

[5] Rainbow Series of books on evaluating Trusted Computer Systems according to National Security Agency (NSA) expounding on the Orange Book (TCSEC). Available at http://www.fas.org/irp/nsa/rainbow.htm.

[6] "Polymorphic Computing Architecture Mission" Available at http://www.darpa.mil/ipto/research/pca/.

[7] "Computer Security Requirements – Guidance for Applying the DOD TCSEC in Specific Environments", June 1985, CSC-STD-003-85. Available at http://www.fas.org/irp/nsa/rainbow.htm.

[8] "Technical Rationale Behind CSC-STD-003-85: Computer Security Requirements", June 1985, CSC-STD-004-85. Available at http://www.fas.org/irp/nsa/rainbow.htm.

[9] "Information Assurance", October 2002, DOD Directive 8500.1. Available at http://www.dtic.mil/whs/directives.

[10] "Information Assurance (IA) Implementation", February 2003, DOD Instruction 8500.2. Available at http://www.dtic.mil/whs/directives.

[11] "National Industrial Security Program Operating Manual, NISPOM", DOD 5220.22-M, December 1993. Available at http://www.dss.mil/infoas/index.htm.

[12] "Protecting Sensitive Compartmented Information within Information Systems", Director of Central Intelligence Directive 6/3, June 1999. Available at http://www.fas.org/irp/offdocs/DCID_6-3_20Policy.htm.

[13] "DOD Information Technology Security Certification and Accreditation Process, DITSCAP", December 1997, DOD 5200.40. Available at http://www.dss.mil/infoas/index.htm.

[14] "National Information Assurance Partnership, NIAP", NIST, 1997. Available at http://niap.nist.gov/.

[15] "National Security Telecommunications and Information Systems Security Committee, NSTISSC, Policy #11". July 2002. Available at http://niap.nist.gov/cc-scheme/nstissp_11.pdf.

[16] "Partitioning Kernel Protection Profile, Preliminary Draft V0.3", NSA C12, October 2002.

[17] J. Rushby, "A Trusted Computing Base for Embedded Systems," Proceedings of the 7th Department of Defense/NBS Computer Security Conference, 1984, pp 294-311.

[18] "Definition" Available at http://www.webopedia.com/TERM/M/Moores_Law.html.

[19] C. Weissman, "BLACKER: Security for the DDN, Examples of A1 Security Engineering", Presented at 1988 IEEE Symposium on Security and Privacy, Proceedings Conference IEEE Symposium on Security and Privacy, Oakland CA, 1992, pp 286. Available at http://www.computer.org/proceedings/sp/2825/28250286abs.htm.

[20] D. E. Bell, and L. LaPadula, "Secure Computer Systems: Unified Exposition and Multics Interpretation", Technical Report ESD-TR-75-306, ESD/AFSC, Hanscom AFB, Bedford, MA, 1975. Available at http://csrc.nist.gov/publications/history/.

[21] M. Taylor, "The Raw Prototype Design Document V4.11", Department of Electrical Engineering, MIT, 2002. Available at: http://www.cag.lcs.mit.edu/raw/documents/RawSpec99.pdf.

[22] K. Mai, et al, "Smart Memories: A Modular Reconfigurable Architecture," Computer Systems Laboratory, Stanford University, 2000. Available at: http://mos.stanford.edu/papers/km_isca_00.pdf.

[23] "Trusted Computing Platform Alliance Main Specification V1.1b," February 2002. Available at: http://www.trustedcomputing.org/.

[24] B. Hashii, "Formal Specification Languages and Theorem Provers", Northrop Grumman Corporation, El Segundo, CA, December 2001.

[25] D. Jackson, and J. M. Wing, "Lightweight Formal Methods", IEEE Computer, April 1996, pp 21-22.

[26] B. Hashii, "Using Alloy to Formally Specify MLS-PCA Trusted Security Architecture", Northrop Grumman Corporation, El Segundo, CA, July 2003.

[27] D. Jackson, "Micromodels of Software: Modeling & Analysis with Alloy", MIT Lab for Computer Science, November 2001. Available at http://sdg.lcs.mit.edu/alloy/book.pdf.

[28] Grid Computing Center. Available at http://www.gridcomputing.com/.

[29] "Intelligent Software Agents Lab," Available at http://www.cs.cmu.edu/~softagents.

---

This optimized version aims to improve clarity, coherence, and professionalism while maintaining the original content and structure.