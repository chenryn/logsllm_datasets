### Title: A Security Model for Military Message Systems: Retrospective

### Authors:
- Carl E. Landwehr, Mitretek Systems, Inc.
- Constance L. Heitmeyer, Naval Research Laboratory
- John D. McLean, Naval Research Laboratory

---

## Retrospective

In the late 1970s and early 1980s, the military conducted an experiment, known as the Military Message Experiment (MME), to investigate replacing existing message systems at CINCPAC, which were based on the AUTODIN system and used a pneumatic tube system for local distribution of copies, with a new system based on the ARPANET and email. This new system provided a simulated multilevel secure (MLS) interface. Concurrently, research was underway to develop multilevel secure operating systems. The experiences from both the MME and prototype MLS systems led to further research at the Naval Research Laboratory (NRL) to specify and prototype a family of military message systems (MMS) based on software engineering principles and by specifying the desired security behavior at the application level rather than at the operating system level. The resulting security model was published as an NRL technical report and later in the ACM Transactions on Computer Systems in August 1984.

The approach to developing informal security models presented in this work remains highly relevant. Efforts to develop assurance arguments for today’s systems can often be related to the methods outlined in this paper [25]. This paper was the first in an archival journal to present a security model based on application requirements rather than operating system structure. It argues that this is the appropriate orientation for a security model that users can understand and provides a framework for developing and expressing security models informally using natural language, followed by formalization. The informal model is accessible to users, while the formal model provides the precision needed for designing a system and verifying whether an implementation enforces the model.

The example presented, developed in the context of military message systems, includes several concepts applicable to other applications. These include the concepts of roles—job-related sets of permissions—and multilevel objects—objects (termed containers) that have their own security levels and also enclose other objects that retain their own security levels. Each user had an allowed set of roles, and access controls on objects in the system could include roles as well as user IDs. A user could occupy one or more roles at a time, and some roles could be occupied only by a single user at a given time. These constraints were based on the observed needs of operational message systems to support one person acting for another during shift changes and for a single point of control (though not necessarily a single individual) for operations like message release.

The approach to multilevel objects leverages an analogy with the physical world of safes, file folders, and documents, providing a model that application users can understand and apply their intuition about familiar objects. Subsequent work has debated whether multilevel objects need to be reflected in the abstractions provided by operating systems, but their appeal to users is unquestionable. In fact, much of the work reported in this paper can fit naturally into the framework provided by object-oriented databases.

An informal model consists of four parts: definitions of terms used in the model, a brief prose description of system operation from the security viewpoint, a set of assumptions, and a set of assertions. Assumptions are statements that must be true for system security to be preserved but cannot be maintained by the computer system itself. For example, users entering message text must be relied upon to classify input properly. Assertions are statements that must be true for system security to be preserved and that the computer system can enforce. It is the assertions of the model that are restated formally. Unlike most other security models, security assertions in this model apply without exception to all system users and entities. The formal statement of the model's assertions is notable for being based on both information flow and access control and for being the first state-machine formalization to contain transition restrictions as well as state restrictions.

Prior to its publication, a draft version of the security model formed the basis for a study of database security problems conducted under the auspices of the National Academy of Sciences in the early 1980s to investigate issues in multilevel secure document handling systems. In this context, the message system example was considered as a restricted version of a database management system.

Many other technical reports and papers were produced by the SMMS research project, covering software design, implementation, and operation of prototype systems based on this model. Some of these are included in the bibliography at the end of this paper [27-38]. Although none of the prototypes transitioned to an operational system, the ideas in this paper influenced the design of some classified operational systems. The security modeling approach was subsequently applied to several operational systems as documented in [26].

The paper as presented below is substantially the same as published in the ACM Transactions on Computer Systems, except for the correction of a few minor errors in the original publication.

---

## Abstract

Military systems that process classified information must operate securely, adequately protecting information against unauthorized disclosure, modification, and withholding. A goal of current research in computer security is to facilitate the construction of multilevel secure systems, which protect information of different classifications from users with different clearances. Security models are used to define the concept of security embodied by a computer system. The Bell and LaPadula model, which has dominated recent efforts to build secure systems, has deficiencies. We are developing a new approach to defining security models based on the idea that a security model should be derived from a specific application. To evaluate our approach, we have formulated a security model for a family of military message systems. This paper introduces the message system application, describes the problems of using the Bell-LaPadula model in real applications, and presents our security model both informally and formally.

Significant aspects of the security model include its definition of multilevel objects and its inclusion of application-dependent security assertions. Prototypes based on this model are being developed.

**Categories and Subject Descriptors:**
- C.2.0 [Computer-Communication Networks]: General—Security and protection
- D.4.6 [Operating Systems]: Security and Protection—access controls; information flow controls; verification
- F.3.1 [Logics and Meaning of Programs]: Specifying and Verifying and Reasoning about Programs—assertions; invariants; specification techniques
- H.4.3 [Information Systems Applications]: Communications Applications—electronic mail

**General Terms:**
- Security, Verification

**Additional Key Words and Phrases:**
- Storage channels, message systems, confinement

---

## 1. Introduction

A system is secure if it adequately protects the information it processes against unauthorized disclosure, unauthorized modification, and unauthorized withholding (also called denial of service). We say "adequately" because no practical system can achieve these goals without qualification; security is inherently relative. A system is multilevel secure if it protects information of different classifications from users with different clearances, meaning some users are not cleared for all the information the system processes. Security models have been developed to describe the protection a computer actually provides and to define the security rules it is required to enforce [14]. In our view, a security model should enable users to understand how to operate the system effectively, implementers to understand what security controls to build, and certifiers to determine whether the system's security controls are consistent with relevant policies and directives and whether these controls are implemented correctly [13].

In recent years, the Bell and LaPadula model [4, 8] has dominated efforts to build secure systems. The publication of this model advanced the technology of computer security by providing a mathematical basis for examining the security provided by a given system. Moreover, the model was a major component of one of the first disciplined approaches to building secure systems. The model describes a secure computer system abstractly, without regard to the system's application. Its approach is to define a set of system constraints whose enforcement will prevent any application program executed on the system from compromising system security. The model includes subjects, which represent active entities in a system (such as active processes), and objects, which represent passive entities (such as files and inactive processes). Both subjects and objects have security levels, and the constraints on the system take the form of axioms that control the kinds of access subjects may have to objects.

One of the axioms, called the *-property ("star-property"), prohibits a subject from simultaneously having read access to one object at a given security level and write access to another object at a lower security level. Its purpose is to prevent subjects from moving data of a given security level to an object marked with a lower level. Originally, the model applied this security constraint to all subjects, as a subject might execute any arbitrary application program, and arbitrary programs executed without this constraint could indeed cause security violations.

A system that strictly enforces the axioms of the original Bell-LaPadula model is often impractical: in real systems, users may need to invoke operations that, although they do not violate our intuitive concept of security, would require subjects to violate the *-property. For example, a user may need to extract an UNCLASSIFIED paragraph from a CONFIDENTIAL document, which would violate the *-property.