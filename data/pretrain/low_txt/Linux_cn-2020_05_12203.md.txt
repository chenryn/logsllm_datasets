---
author: John Paul
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 4913
date: '2020-05-10 08:28:00'
editorchoice: false
excerpt: 一群专业的技术专家致力于改变现状，使互联网成为一个可以直接连接和分享信息的平台，而无需依赖中心服务器（即去中心化）。
fromurl: https://itsfoss.com/beaker-browser/
id: 12203
islctt: true
largepic: /data/attachment/album/202005/10/082745ztmi4kqh4iq449ll.jpg
permalink: /article-12203-1.html
pic: /data/attachment/album/202005/10/082745ztmi4kqh4iq449ll.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 一群专业的技术专家致力于改变现状，使互联网成为一个可以直接连接和分享信息的平台，而无需依赖中心服务器（即去中心化）。
tags:
- 浏览器
- P2P
- 对等
thumb: false
title: 使用 Beaker 浏览器探索对等 Web
titlepic: true
translator: lxbwolf
updated: '2020-05-10 08:28:00'
---

![](/data/attachment/album/202005/10/082745ztmi4kqh4iq449ll.jpg)

在过去的五十年里，互联网的基本架构几乎没有发生太大变化。全球网民通过各自的设备从遍布世界各地的服务器上检索数据。然而，一群专业的技术专家正努力改变这一现状，旨在创建一个更加直接、高效的信息交流平台，不再依赖于单一的中心服务器（即实现去中心化）。我们曾在 It’s FOSS 上讨论过许多这样的去中心化服务，例如 [LBRY](https://itsfoss.com/lbry/) 和 [Mastodon](https://itsfoss.com/mastodon-open-source-alternative-twitter/)。

今天，我们将介绍另一个类似的创新产品——[Beaker 浏览器](https://beakerbrowser.com/)，它专为浏览对等 Web 而设计。

![Beaker Browser](/data/attachment/album/202005/10/083036yeso1o0ok1o0n0o8.jpg)

### 什么是“对等 Web”？

根据 Beaker 浏览器开发者之一的说法，“对等 Web 是一项实验性技术……旨在增强我们对网络的控制力。”此外，他们指出对等 Web 的三大核心原则是：任何节点都可以成为服务器；多台计算机可以为同一个网站提供服务；不存在传统意义上的后端。

这些原则与 BitTorrent 十分类似，文件由多个对端进行播种，共同分担带宽负载，从而减轻单个用户需要提供的总带宽压力。

![Beaker Browser Settings](/data/attachment/album/202005/10/082813xskck3cc47b6zb2z.jpg)

对等 Web 的另一重要方面在于创作者对自己内容的掌控能力。当前大多数平台由大型组织运营，往往将用户的数据用于自身利益。Beaker 浏览器则将这种控制权重新交还给了内容创造者。

### 利用 Beaker 浏览去中心化的 Web

[Beaker 浏览器](https://beakerbrowser.com/) 创建于 2016 年，由蓝链实验室（Blue Link Labs）的三人团队开发。该浏览器使用 [Dat 协议](https://www.datprotocol.com/) 在不同计算机之间共享数据。采用 Dat 协议的网站以 `dat://` 开头，而非传统的 `http://`。

Dat 协议的优势包括：
- **快速** - 档案能够立即从多个源同步。
- **安全** - 所有更新均经过签名验证及完整性检查。
- **灵活** - 可在不改变档案 URL 的情况下迁移主机。
- **版本控制** - 每次修改都会记录在一个只能追加的版本日志中。
- **去中心化** - 任何设备都可作为档案托管的主机。

![Beaker Browser Seeding](/data/attachment/album/202005/10/082827y0qbju40lzp0j3to.jpg)

本质上，Beaker 浏览器基于 Chromium 构建，支持原生访问 `dat://` 地址，并且同样可以浏览常规的 `http://` 网站。当你访问某个 dat 站点时，只有请求的具体页面内容会被下载到你的计算机上。例如，在一个包含 Linux Torvalds 图片的 about 页面中，图片仅在你实际访问该页面时才会被下载。

此外，当你浏览 dat 网站时，你会短暂地重新上传或播种从该网站下载的所有文件。当然，你也可以选择主动为某个站点做种，以帮助其创作者。

![Beaker Browser Menu](/data/attachment/album/202005/10/082832j6dsizplps6ppwib.jpg)

鉴于 Beaker 浏览器的目标是构建一个更开放的网络环境，因此你可以轻松查看任何网站的源代码。与大多数浏览器仅允许查看当前页面的源码不同，Beaker 提供了一个类似 GitHub 的视图，让你能够浏览整个站点的结构。甚至还可以复制并托管自己的版本。

除了浏览基于 dat 的网站外，你还可以使用 Beaker 浏览器创建自己的站点。菜单中提供了创建新网站或空白项目的选项。如果你选择创建一个新网站，Beaker 会生成一个小型示例站点，你可以利用内置编辑器对其进行编辑。对于偏好 Markdown 格式的用户，则可以选择创建空白项目。此时，Beaker 将为你搭建好站点结构并分配一个 `dat://` 地址。只需添加一个 `index.md` 文件即可开始。这里有一个[简短教程](https://beakerbrowser.com/docs/guides/create-a-markdown-site)可供参考。同样的方法也适用于创建 web 应用程序。

![Beaker Browser Website Template](/data/attachment/album/202005/10/082833du6hzqquqoqu2xr6.jpg)

由于 Beaker 同时充当了 Web 服务器和站点播种者的角色，当关闭浏览器或关机时，你的站点将不可用。不过幸运的是，不必一直保持计算机开机状态。你可以使用名为 [Hashbase](https://hashbase.io/) 的播种服务，或者自行搭建一个 [homebase](https://github.com/beakerbrowser/homebase) 播种服务器来解决这个问题。

尽管 Beaker 浏览器兼容 Linux、Windows 和 macOS 平台，但在首次使用前建议查阅各平台相关的[设置指南](https://beakerbrowser.com/docs/guides/)。

### Beaker 浏览器：一个尚处于实验阶段但充满潜力的产品

初次接触 Beaker 浏览器时，我对它的前景感到非常兴奋。然而正如其名所示（烧杯），这款浏览器仍处于实验阶段。我尝试访问过的许多 dat 站点目前仍不可用，因为没有足够的用户为其做种。不过 Beaker 确实提供了一项功能，在站点恢复可用时向用户发送通知。

![Beaker Browser No Peer](/data/attachment/album/202005/10/082904jl72aa42av4jy2cg.jpg)

另外值得注意的是，Beaker 实际上是一个精简版的 Chromium，无法安装扩展程序或主题。默认情况下，它只提供白色主题和有限的功能集。我个人不会将其作为日常使用的首选浏览器，访问 dat 网站也不足以成为保留它的理由。

我曾寻找一款支持 `dat://` 协议的 Firefox 扩展，虽然找到了相关插件，但安装过程较为复杂。相比之下，安装 Beaker 显得更为简便。

就现阶段而言，Beaker 浏览器并不适合所有人。或许在未来，随着更多人开始使用 Beaker 或其他主流浏览器增加对 dat 协议的支持，情况将会有所改观。无论如何，这都是一个值得关注的发展方向。

在我使用 Beaker 的过程中，利用内置工具创建了一个[个人网站](https://41bfbd06731e8d9c5d5676e8145069c69b254e7a3b710ddda4f6e9804529690c/)。请放心，我已经为它做了充分的播种工作。

![Beaker Bowser Site Source](/data/attachment/album/202005/10/083011dzyaocy5qlqel34o.jpg)

你如何看待 Beaker 浏览器以及对等 Web 的概念？欢迎在评论区留下你的看法。

如果本文对你有所帮助，请考虑将其分享至社交媒体、Hacker News 或 [Reddit](https://reddit.com/r/linuxusersgroup)。

---
via: 
作者：[John Paul](https://itsfoss.com/author/john/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[lxbwolf](https://github.com/lxbwolf) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出