### Optimized Text

Given a set of inputs, the system queries an oracle to determine if the candidate is equivalent to the reference. If not, it uses a counter-example from the oracle to refine the candidate implementation. A key distinction is that this work assumes access to an equivalence-checking oracle, whereas our approach does not.

We note that there has been some recent work on "reverse engineering" digital circuit netlists [16], [24]. However, the context of reverse engineering in those works is different. The goal of such work is to abstract a flattened netlist of gates into a set of interconnected modules (such as adders, comparators, etc.), which is distinct from our objectives.

### VII. Conclusion

We have strongly refuted claims in recent work [20] regarding the effectiveness of a technique proposed for IC camouflaging. Specifically, that work suggests that by camouflaging only a small, judiciously chosen set of gates, an attacker would be forced to undertake "several thousands of years" of work. In contrast, we have constructed an attack that shows the attacker can succeed in just a few minutes with very modest computing resources. 

In constructing this attack, we have provided several additional insights into IC camouflaging as a security mechanism. We introduced the concept of a discriminating set of inputs, which effectively captures the difficulty for an attacker. Our empirical assessment, using the same realistic benchmark circuits as prior work, demonstrates that these discriminating sets are surprisingly small, explaining the effectiveness of our attack. Our approach is underpinned by a fresh, complexity-theoretic mindset, allowing us to intuit the computational complexity of the underlying problems an attacker must solve. We have shown how solvers for these problems can be constructed via reductions to SAT and the use of off-the-shelf SAT solvers. Additionally, we have provided insights into the (in)effectiveness of IC camouflaging as a security measure. Our work serves as a strong caution to IC designers.

### Future Work

As future work, we plan to pursue several research directions. As mentioned in Section VI, there are other IC obfuscation techniques proposed in the literature, such as key-based and programmable logic-based obfuscation. We believe our attack can be generalized to these settings, allowing us to investigate the security of these alternative techniques. We also aim to explore the problem of finding the minimum-sized discriminating input set, both from a complexity-theoretic and practical standpoint. Finally, we are interested in further exploring potential defense mechanisms to protect against our attack, as discussed in Section V.

### References

[1] I. T. AG, "Semiconductor & system solutions - Infineon Technologies," August 2014. [Online]. Available: http://www.infineon.com/

[2] S. Arora and B. Barak, Computational Complexity: A Modern Approach. Cambridge University Press, 2009. [Online]. Available: http://books.google.ca/books?id=nGvI7cOuOOQC

[3] J. P. Baukus, L. W. Chow, and W. M. Clark Jr, "Digital circuit with transistor geometry and channel stops providing camouflage against reverse engineering," Jul. 21 1998, US Patent 5,783,846.

[4] A. Baumgarten, A. Tyagi, and J. Zambreno, "Preventing IC piracy using reconfigurable logic barriers," IEEE Design and Test of Computers, vol. 27, no. 1, pp. 66–75, 2010.

[5] F. Brglez, "Neutral netlist of ten combinational benchmark circuits and a target translator in FORTRAN," in Special session on ATPG and fault simulation, Proc. IEEE International Symposium on Circuits and Systems, June 1985, 1985, pp. 663–698.

[6] F. Brglez, D. Bryan, and K. Kozminski, "Combinational profiles of sequential benchmark circuits," in Circuits and Systems, 1989., IEEE International Symposium on. IEEE, 1989, pp. 1929–1934.

[7] Chipworks, "Reverse Engineering Software," http://www.chipworks.com/en/technical-competitive-analysis/resources/reverse-engineering-software, last accessed May 2014.

[8] ——, "Inside the Apple Lightning Cable," http://www.chipworks.com/en/technical-competitive-analysis/resources/blog/inside-the-apple-lightning-cable/, Oct. 2012.

[9] L.-W. Chow, J. P. Baukus, and W. M. Clark Jr, "Integrated circuits protected against reverse engineering and method for fabricating the same using vias without metal terminations," Sep. 14 2004, US Patent 6,791,191.

[10] Degate, "Reverse engineering integrated circuits with Degate," http://www.degate.org/documentation/, last accessed May 2014.

[11] N. Eén and N. Sörensson, "An Extensible SAT-solver," in Theory and Applications of Satisfiability Testing, ser. Lecture Notes in Computer Science, E. Giunchiglia and A. Tacchella, Eds. Springer Berlin Heidelberg, 2004, vol. 2919, pp. 502–518. [Online]. Available: http://dx.doi.org/10.1007/978-3-540-24605-3_37

[12] M. R. Garey and D. S. Johnson, Computers and Intractability; A Guide to the Theory of NP-Completeness. New York, NY, USA: W. H. Freeman & Co., 1990.

[13] F. Imeson, A. Emtenan, S. Garg, and M. Tripunitara, "Securing Computer Hardware Using 3D Integrated Circuit (IC) Technology and Split Manufacturing for Obfuscation," in Presented as part of the 22nd USENIX Security Symposium. USENIX, 2013, pp. 495–510.

[14] S. Jha, S. Gulwani, S. A. Seshia, and A. Tiwari, "Oracle-guided component-based program synthesis," in Software Engineering, 2010 ACM/IEEE 32nd International Conference on, vol. 1. IEEE, 2010, pp. 215–224.

[15] W. T. Lee, "Engineering a device for electron-beam probing," Design & Test of Computers, IEEE, vol. 6, no. 3, pp. 36–42, 1989.

[16] W. Li, A. Gascon, P. Subramanyan, W. Y. Tan, A. Tiwari, S. Malik, N. Shankar, and S. A. Seshia, "WordRev: Finding word-level structures in a sea of bit-level gates," in Hardware-Oriented Security and Trust (HOST), 2013 IEEE International Symposium on. IEEE, 2013, pp. 67–74.

[17] B. Liu and B. Wang, "Embedded reconfigurable logic for ASIC design obfuscation against supply chain attacks," in Proceedings of the conference on Design, Automation & Test in Europe. European Design and Automation Association, 2014, p. 243.

[18] D. Mitchell, B. Selman, and H. Levesque, "Hard and easy distributions of SAT problems," in AAAI, vol. 92. Citeseer, 1992, pp. 459–465.

[19] J. Rajendran, Y. Pino, O. Sinanoglu, and R. Karri, "Security analysis of logic obfuscation," in Proceedings of the 49th Annual Design Automation Conference. ACM, 2012, pp. 83–89.

[20] J. Rajendran, M. Sam, O. Sinanoglu, and R. Karri, "Security Analysis of Integrated Circuit Camouflaging," in Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS '13. New York, NY, USA: ACM, 2013, pp. 709–720. [Online]. Available: http://doi.acm.org/10.1145/2508859.2516656

[21] J. Rajendran, O. Sinanoglu, and R. Karri, "Is split manufacturing secure?" in Design, Automation & Test in Europe Conference & Exhibition (DATE), 2013. IEEE, 2013, pp. 1259–1264.

[22] J. A. Roy, F. Koushanfar, and I. L. Markov, "EPIC: Ending piracy of integrated circuits," in Proceedings of the conference on Design, automation and test in Europe. ACM, 2008, pp. 1069–1074.

[23] SEMI, "Innovation is at Risk: Losses of up to $4 Billion Annually due to IP Infringement," http://www.semi.org/en/Issues/IntellectualProperty/ssLINK/P043785, last accessed May 2014.

[24] P. Subramanyan, N. Tsiskaridze, K. Pasricha, D. Reisman, A. Susnea, and S. Malik, "Reverse engineering digital circuits using functional analysis," in Proceedings of the Conference on Design, Automation and Test in Europe. EDA Consortium, 2013, pp. 1277–1280.

[25] SypherMedia, "Syphermedia library circuit camouflage technology," http://www.smi.tv/solutions.htm, last accessed May 2014.

[26] R. Torrance, "The state-of-the-art in Semiconductor Reverse Engineering at Chipworks," http://www.chesworkshop.org/ches2009/presentations/12_Invited_Talk_III/CHES2009_torrance.pdf, last accessed July 2014.

[27] R. Torrance and D. James, "The state-of-the-art in IC reverse engineering," in Cryptographic Hardware and Embedded Systems-CHES 2009. Springer, 2009, pp. 363–381.

[28] G. Tseitin, "On the Complexity of Derivation in Propositional Calculus," in Automation of Reasoning, ser. Symbolic Computation, J. Siekmann and G. Wrightson, Eds. Springer Berlin Heidelberg, 1983, pp. 466–483. [Online]. Available: http://dx.doi.org/10.1007/978-3-642-81955-1_28

### Appendix

As a formal language, NOT-DISC-SET-DEC can be written as follows: NOT-DISC-SET-DEC = {(C, IO) : C is a camouflaged circuit, and IO is not a discriminating set for C}. Let φ be an instance of SAT, i.e., φ is a Boolean formula to be checked for satisfiability. We can consider φ as a Boolean circuit with a single output node where every other node has a fan-out of 1. Add a camouflaged gate g that can implement one of {NAND, NOR, XNOR} functions and use the output of φ to drive both of g's inputs (the true function of g is irrelevant to the reduction). Call the new circuit C. We show that φ is satisfiable if and only if (C, {}) ∈ NOT-DISC-SET-DEC; i.e., if and only if the empty set is not a discriminating set for C.

Note that for the empty set, the set of candidate completions for C consists of all three possible completions (which we get by mapping g to one of its three possible functions).

Assume φ is satisfiable, i.e., φ ∈ SAT. By definition, a satisfying assignment for φ sets the output of the formula to 1. Assume such a pattern is applied to C. As the output of φ drives both of g's inputs, g will output 0 if its true identity is NAND and 1 if its true identity is XNOR. Since we have two distinct completions in the candidate set that produce different outputs for the same input pattern, the empty set cannot be a discriminating set for C, and hence (C, {}) ∈ NOT-DISC-SET-DEC.

Now assume (C, {}) ∈ NOT-DISC-SET-DEC. This means that there exists an input pattern for which two of the three possible completions produce different outputs. This pattern cannot set φ's output to 0, as all three possible completions output 1 when φ's output is 0. Thus, the input pattern must set φ's output to 1, which means φ is satisfiable.

COMPLETION-DEC can also be written as a formal language. COMPLETION-DEC = {(C, IO) : C is a camouflaged circuit, IO is a set of input-output pattern pairs for some circuit that has the same number of inputs and outputs as C, and there exists a completion X of C such that ∀(i, o) ∈ IO, CX(i) = o}. Let φ be an instance of SAT. We consider φ as a Boolean circuit. For each variable (input wire) in φ, we add a camouflaged gate that can implement one of {NAND, NOR} functions and use the output of the gate to drive the input wire (the true functions of these camouflaged gates are, again, irrelevant to the reduction). We also create a new input wire and drive the inputs of each of the added camouflaged gates using the wire and its negation. Call the new circuit C. Note that C has one input and one output. We show that φ is satisfiable if and only if (C, {(0, 1)}) ∈ COMPLETION-DEC, i.e., if and only if a completion exists for C that produces an output of 1 when 0 is applied at the input.

First, note that the camouflaged gates' outputs are completely determined by their true functions (a NAND gate will output 1 and a NOR gate will output 0 regardless of what input is applied to the circuit). Now assume (C, {(0, 1)}) ∈ COMPLETION-DEC. By definition, then, a completion exists that produces 1 when 0 is applied as input. In this completion, if we look at the outputs of the once-camouflaged gates, they give us an input pattern which, when applied to φ, causes it to output 1, i.e., a satisfying assignment for φ. Similarly, assume a satisfying assignment exists for φ. This assignment provides an input pattern that, when applied to the camouflaged gates, results in a completion of C that produces the desired output.