### Figure 1: The Shared Resource Matrix for ICCCM Cut and Paste
The architecture is based on independent replicas of the X server (one per active level) and a restrictive version of cut and paste that adheres to MLS (Multi-Level Security) restrictions.

### In Retrospect
The original paper was an unabashed attempt to secure funding for the development of the described tool. Note that the abstract is ambiguous about the state of the analyzer. However, it worked, which may be the real significance of the paper—a classic sales pitch. In retrospect, the work initiated by this paper had a substantial impact on several aspects of the MLS world. It was the first MLS tool to provide system designers with a high degree of flexibility in describing both systems and policies. Its reporting mechanisms allowed for both summary and detailed reports. The conservative approximation mechanisms introduced in the GIFT (Gypsy Information Flow Tool) enabled analysts to greatly reduce the number of detailed flows to be considered by assuming that information flowed universally from all inputs to all outputs of certain functions. If the system was secure under these assumptions, it was clearly secure under more detailed analysis. The nature of the information flow formulae produced led to minor improvements in the strategy of the Gypsy theorem prover, significantly reducing proof efforts.

Both the SRM (Shared Resource Matrix) tool and the GIFT were used on real MLS systems. Although MLS systems are out of fashion today, with the common wisdom being that the marketplace has passed them by, recent experiences with attempts to manage classified websites indicate that the need still exists. With a few exceptions, mostly dealing with small, highly sensitive information objects (such as long-lived encryption keys), small information leakages are not of much concern today. Most systems are so vulnerable that it is far easier to take ownership of the system via a simple exploit than to attempt to signal information through the protection state.

Nonetheless, much of the work that went into the GIFT and the GVE (Gypsy Verification Environment) remains relevant today. I suspect that covert channel mechanisms will again be considered important in the context of restricted execution environments for mobile agents. Proof-carrying code may require proofs that covert signaling mechanisms are not present, in addition to the higher-level proofs currently proposed. There has been some recent interest in a GVE-style verification system for Java, which is certainly feasible. Moore's law has already solved many of the performance problems for which the GVE of a decade ago was criticized. Dependency analysis is gaining increasing importance as a mechanism for addressing the buffer overflow problem. Another part of the Gypsy optimizer addressed this problem explicitly by generating formulae that, if proven, justified the removal of runtime array bounds checks. This is equivalent to static analysis of a program slice focused on the potentially offending operation, with the objective of showing that the potential overflow cannot occur.

More importantly, the effort that began with the 1985 abstract contributed substantially to our understanding of the subtleties of information flows and their role in developing secure systems. In addition to a number of CLI (Computational Logic, Inc.) reports and notes, the effort produced a Master's thesis and several conference and journal papers. The GIFT was by no means a solo effort. Major contributions were made by a number of people in Durham and Austin. Larry Akers, Bret Hartman, Craig Singer, and Tad Taylor were all major contributors to the effort, and without their work, it could not have come to fruition.

### References
1. R. L. Akers. "Information Flow into Structured Objects." Internal Note 20, Computational Logic Inc., 1717 West 6th Street, Austin, Texas, November 1987.
2. J. P. Anderson. "Computer Security Technology Planning Study, Volume I." Technical Report ESC–TR–73–51, Vol I, ESD/AFSC, Hanscom AFB, Bedford, MA 01731, October 1972. [NTIS AD-758-206] - Available online at http://seclab.cs.ucdavis.edu/projects/history/CD/ande72.pdf.
3. J. P. Anderson. "Computer Security Technology Planning Study, Volume II." Technical Report ESC–TR–73–51, Vol II, ESD/AFSC, Hanscom AFB, Bedford, MA 01731, October 1972. [NTIS AD-758-206] - Available online at http://seclab.cs.ucdavis.edu/projects/history/CD/ande72.pdf.
4. D. E. Bell and L. L. Padula. "Secure Computer System: Unified Exposition and Multics Interpretation." Technical Report ESD–TR–75–306, ESD/AFSC, Hanscom AFB, Bedford, MA 01731, 1975. [DTIC AD-A023588] - Available online at http://seclab.cs.ucdavis.edu/projects/history/CD/bell76.pdf.
5. R. Boebert. Private communication, November 1984.
6. D. Denning and P. Denning. "Certification of Programs for Secure Information Flow." CACM, 20(7):504–513, July 1977.
7. Department of Defense. "Trusted Computer System Evaluation Criteria." CSC-STD-001-83, Department of Defense Computer Security Center, August 1983.
8. J. Epstein, J. McHugh, H. Orman, et al. "A High Assurance Window System Prototype." Journal of Computer Security, 2:159–190, 1993.
9. R. Feiertag. "Technique for Proving Specifications Are Multi-Level Secure." Technical Report CSL-109, SRI International Computer Science Laboratory, January 1980.
10. R. Feiertag, K. Levitt, and L. Robinson. "Proving Multilevel Security of a System Design." In Proc. 6th Symp. on Operating System Principles, pages 57–65. ACM, November 1977.
11. D. Good, R. Cohen, C. Hoch, L. Hunter, and D. Hare. "Report on the Language Gypsy: Version 2.0." Technical Report ICSCA-10, University of Texas at Austin Institute for Computing Science and Computer Applications, September 1978.
12. J. T. Haigh, R. A. Kemmerer, J. McHugh, and W. D. Young. "An Experience Using Two Covert Channel Analysis Techniques on a Real System Design." In Proceedings of the 1986 IEEE Symposium on Security and Privacy, pages 14–24. IEEE, April 1986.
13. R. A. Kemmerer. "Shared Resource Matrix Methodology: A Practical Approach to Identifying Covert Channels." ACM Transactions on Computer Systems, 1(3):256–277, August 1983.
14. B. W. Lampson. "A Note on the Confinement Problem." CACM, 16(10):613–615, October 1973. Currently online at http://research.microsoft.com/lampson/11-Confinement/WebPage.html.
15. C. Landwehr. "Formal Models for Computer Security." ACM Computing Surveys, 13(3):247–248, September 1981.
16. S. B. Lipner. "A Comment on the Confinement Problem." In Proceedings of the Fifth Symposium on Operating System Principles, pages 192–196, 1975. Appeared as ACM Operating System Review 9(5).
17. A. Marmor-Squires, J. McHugh, M. Branstad, B. Danner, L. Nagy, P. Rougeau, and D. Sterne. "A Risk-Driven Process Model for the Development of Trusted Systems." In Proceedings of the 1989 Computer Security Applications Conference, Tucson, AZ, December 1989.
18. J. McHugh. "Towards the Generation of Efficient Code from Verified Programs." ICSC Report 40, Institute for Computing Science, University of Texas at Austin, March 1984.
19. J. McHugh. "A Formal Definition for Information Flow in the Gypsy Expression Language." In Proceedings of The Computer Security Foundations Workshop, pages 147–165, June 1988.
20. J. McHugh and R. L. Akers. "A Formal Justification for the Gypsy Information Flow Tool." Technical report, Computational Logic, Inc., Austin, Texas, 1987.
21. J. McHugh and R. L. Akers. "GVE Users Manual: The Gypsy Information Flow Tool, a Covert Channel Analysis Tool." Technical Report CLI-12, Computational Logic, Inc., November 1987. Draft.
22. J. McHugh and R. L. Akers. "Specification and Rationale for the Implementation of an Analyzer for Dependencies in Gypsy Specifications." Technical report, Computational Logic, Inc., Austin, Texas, 1987.
23. J. McHugh, R. L. Akers, and C. D. Singer. "GVE User’s Manual: Shared Resource Matrix Covert Channel Analysis Tool." Technical report, Computational Logic, Inc., Austin, Texas, 1987.
24. J. McHugh, R. L. Akers, and C. D. Singer. "Gypsy Information Flow Tool Software Requirements Specification." Technical report, Computational Logic, Inc., Austin, Texas, 1987.
25. J. McHugh and D. I. Good. "An Information Flow Tool for Gypsy: Extended Abstract." In Proceedings of the 1985 IEEE Symposium on Security and Privacy, pages 46–48, 1985.
26. R. Reitman and G. Andrews. "Certifying Information Flow Properties of Programs: An Axiomatic Approach Organization." In Conference Record of the Sixth Annual ACM Symposium on the Principles of Programming Languages, pages 283–290. ACM-SIGPLAN, January 1979.
27. J. M. Rushby. "Mathematical Foundations of the MLS Tool for Revised Special." Technical report, Computer Science Laboratory, SRI International, March 1984. Draft.
28. O. S. Saydjari, J. M. Beckman, and J. R. Leaman. "Lock Trek: Navigating Uncharted Space." In Proceedings of the 1989 IEEE Symposium on Security and Privacy, pages 167–175, May 1989.
29. C. D. Singer. "An Extension of the Gypsy Information Flow Semantics for Dynamic and Indexed Types." Master’s thesis, Duke University, Dept. of Computer Science, 1988.
30. M. Smith. "Model and Design Proof in Gypsy: An Example Using Bell and Lapadula." ICSC Internal Note 122, Institute for Computing Science, University of Texas at Austin, 1984.
31. M. Weiser. "Program Slicing." IEEE Transactions on Software Engineering, SE-10(7):352–357, July 1984.