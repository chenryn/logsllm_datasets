# Architecture and Applications for a Distributed Embedded Firewall

**Authors:**
- Charles Payne
- Tom Markham

**Affiliation:**
Secure Computing Corporation  
Email: cpayne, markham@securecomputing.com

## Abstract
The distributed firewall is an important new line of network defense, providing fine-grained access control to augment the protections afforded by traditional perimeter firewalls. To be effective, a distributed firewall must meet two critical requirements: it must adopt a protection model that acknowledges the potential untrustworthiness of entities behind the firewall, and it must be tamper-resistant. This paper presents a new distributed, embedded firewall (EFW) that satisfies both requirements. EFW filters Internet Protocol (IP) traffic to and from the host and is implemented on the host's network interface card (NIC), managed by a protected, central policy server. This paper describes the architecture of EFW, its associated assurance claims, and discusses unique applications for it.

## 1. Introduction
Traditional perimeter firewalls are a crucial component of network defense but should not be considered the sole line of defense. They provide coarse protection, leaving them vulnerable to malicious insiders who operate freely within the firewall’s security perimeter. Additionally, extending their protections to mobile users is costly due to the artificial nature of the firewall's security perimeter, which is determined by its location in the network topology. For effective network defense, we must augment perimeter firewalls with more fine-grained access controls.

Bellovin [1] argued that a distributed firewall provides the necessary fine-grained protection. In this solution, a firewall is placed at each host in the network, and all firewalls are managed as a single entity, combining centralized management with distributed enforcement. Distributed firewalls contain malicious insiders by drawing the security perimeter around each host. This approach is ideal for mobile users, telecommuters, and business-to-business extranets, as changes to network topology have minimal impact on policy management. Ioannidis, Keromytis, Bellovin, and Smith [3] described a prototype distributed firewall for OpenBSD hosts.

However, a distributed firewall falls short if it assumes that all local users are trustworthy. If these users are trusted to access the network freely, limited attacks such as network sniffing, host address spoofing, and denial of service remain possible. To effectively contain malicious insiders, distributed firewalls must adopt a stronger protection model that acknowledges the potential untrustworthiness of users on the host. This requirement becomes more significant when considering that many insider attacks are unintentional, such as those caused by worms like Code Red and NIMDA, which can turn loyal users into unwitting insiders [4].

A distributed firewall also fails if it executes on an untrusted operating system. Personal firewalls, which are software-based solutions, suffer from this issue. These solutions fail to meet the fundamental requirement of tamper-resistance, as they are relatively easy to disable via a network-based attack [7]. This leaves the host and, consequently, the network exposed.

This paper describes a new distributed embedded firewall called EFW, which embraces a stronger protection model and is tamper-resistant. EFW filters IP traffic to and from the host and is independent of the host’s operating system. It is implemented on the host’s NIC and managed by a central, protected policy server located elsewhere on the network. EFW is implemented on a commodity NIC and scales easily to thousands of hosts. The paper focuses on EFW’s architecture and how it can support interesting security applications.

### 1.1. Related Work
While EFW’s goals and objectives closely resemble those of Bellovin [1], the two efforts proceeded independently and resulted in different implementations. Bellovin noted that “for more stringent protections, the policy enforcement can be incorporated into a tamper-resistant network card” [1, Section 7.5], but he chose to implement his distributed firewall with kernel extensions, a user-level daemon, and a new device driver. This strategy enabled the firewall to handle application-level policies. EFW, on the other hand, focuses on IP packet filtering due to the limited processing power available on the NIC.

Nessett and Humenn [5] proposed a novel multilayer firewall that can be managed centrally, including devices such as perimeter firewalls, switches, and routers. Their work highlights the pitfalls of binding firewall policy management to network topology management. Bellovin [1] and Markham [4] advocate breaking this bond. Nessett and Humenn’s results underscore the importance of creating multiple layers, such as distributed and perimeter firewalls, in an overall network defense strategy.

## 2. Objectives for EFW

### 2.1. Security Objectives
Figure 1 illustrates an EFW NIC on a protected host, the EFW policy server (also protected by an EFW NIC), and the communication paths between them. We state the security objectives for EFW in the form recommended by [6]. Assertions that EFW must satisfy are expressed as claims, followed by zero or more assumptions upon which the claim relies. Validated assumptions are represented as claims elsewhere in this section and are so referenced. Unvalidated assumptions represent potential vulnerabilities that must be validated by other means, such as procedural controls or physical security.

**Figure 1: EFW NIC and Policy Server**

- **Protected Host**
- **EFW NIC**
- **EFW Policy Server**
- **EFW NIC**
- **Audit Events**
- **Policy Management Traffic**

**Claim 1:** EFW blocks unapproved IP traffic to and from the host, assuming:
- EFW is configured properly.
- EFW is non-bypassable [Claim 2].

The first assumption captures the importance of strong policy, while the second captures the importance of a strong mechanism. The first assumption is validated on a case-by-case basis, ensuring that the policy enforced by EFW is appropriate for the operational environment and its security threats. We will not consider this requirement further except to describe, in Section 4, the tools that EFW provides for policy management.

**Claim 2:** EFW is non-bypassable, assuming:
- The host can communicate only through EFW-enabled NICs.
- EFW is tamper-resistant to host-based attacks [Claim 3].
- Only the EFW policy server can disable an EFW NIC [Claim 5].
- Only the EFW policy server can download new policy [Claim 6].
- Attackers cannot masquerade as the EFW policy server [Claim 8].

**Claim 3:** EFW is tamper-resistant to host-based attacks, assuming:
- The EFW NIC hardware is protected from direct manipulation.
- Only the EFW policy server can disable an EFW NIC [Claim 5].
- Only the EFW policy server can download new policy [Claim 6].
- Attackers cannot masquerade as the EFW policy server [Claim 8].
- The command is accepted only from the EFW policy server [Claim 7].
- Only authorized users can access the EFW policy server.

**Claim 4:** EFW is tamper-resistant to network-based attacks, assuming:
- The command is accepted only from the EFW policy server [Claim 7].

**Claim 5:** Only the EFW policy server can disable an EFW NIC, assuming:
- EFW is tamper-resistant to network-based attacks.
- The operation is available only by a command to the EFW NIC API.

**Claim 6:** Only the EFW policy server can download new policy to an EFW NIC, assuming:
- The operation is available only by a command to the EFW NIC API.
- The command is accepted only from the EFW policy server [Claim 7].
- Only authorized users can access the EFW policy server.

**Claim 7:** The command is accepted only from the EFW policy server, assuming:
- Only the EFW policy server can disable an EFW NIC [Claim 5].
- Only the EFW policy server can download new policy [Claim 6].
- Attackers cannot masquerade as the EFW policy server [Claim 8].

**Claim 8:** Attackers cannot masquerade as the EFW policy server, assuming:
- Only authorized users can access the EFW policy server.

The first supporting assumption for Claims 5 and 6 is validated by the EFW implementation. The third supporting assumption can be validated by procedural controls and physical security. The remaining assumptions are validated by a combination of technology, procedural, and physical security controls, as described below.

The first assumption in Claim 3 can be validated by restricting the hardware interfaces. Newer generations of the EFW NIC will incorporate additional security features to further enhance tamper-resistance.