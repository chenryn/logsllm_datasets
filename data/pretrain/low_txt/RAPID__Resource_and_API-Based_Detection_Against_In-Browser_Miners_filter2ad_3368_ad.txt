The text provided is a technical discussion on the evaluation of different methods for detecting in-browser mining, with a focus on speed index comparisons and related work. Below is an optimized version of the text, aiming to improve clarity, coherence, and professionalism.

---

### Evaluation of Speed Index Comparisons

The differences observed in the speed index values are significant enough to ensure that all sites have higher indexes across all comparisons. For instance, Instagram’s speed index shows a lower value for 4-grams compared to 3-grams, even though it exhibits an increasing trend from the baseline, bag of words, 2-grams, and 3-grams. This behavior may be attributed to dynamic features of the sites, but it could also be due to the mean values of the speed index falling within the error margin (related to the standard deviation). Therefore, we can only conclude that the values are "close" to those shown.

To provide a more intuitive understanding of the results from the Alexa top 100 speed index, Table 4 presents the mean and standard deviation of the overhead for different instrumentation methods. 

### Related Work

#### HoneyMonkey and Capture-HPC
HoneyMonkey and Capture-HPC use real browsers to visit sites while performing data collection at lower layers. For example, HoneyMonkey uses several HTTP clients like Firefox or Internet Explorer to orchestrate and monitor the file system, registry, or processes at the kernel level. This allows for the detection of malicious behavior whenever unexpected changes occur [41]. Our approach is similar, using real browsers to visit sites and collect data at lower layers, with Docker serving as an analogy to the operating system.

#### IceShield
Heidrich et al. developed IceShield, an in-browser solution for detecting and mitigating malicious websites [19]. IceShield is implemented as a JavaScript extension for Internet Explorer or Firefox, which redefines browser APIs to monitor JavaScript code, extract features, and use Linear Discriminant Analysis (LDA) to detect malicious websites. While IceShield's primary contribution is providing a safe and lightweight method to rewrite browser APIs, its LDA evaluation is not as extensive as other literature. Our approach similarly redefines resource-related APIs and monitors them, but we do this by instrumenting the browser through the Chrome Debugging Protocol API in a research context, rather than using extensions.

#### JSAND
Cova et al. used HtmlUnit, a headless browser based on the Rhino JavaScript interpreter, to create JSAND [8]. JSAND collected features related to four phases of drive-by downloads: redirection and cloaking, de-obfuscation, environment preparation, and exploitation. JSAND was publicly available as Wepawet and validated around 140,000 pages by 2010. Song et al. introduced an approach to prevent drive-by downloads via inter-module communication monitoring [42], creating a browser module to monitor COM modules. They also implemented an ActiveX emulator to simulate vulnerabilities. Their approach is based on a Deterministic Finite Automaton (DFA) created from 37 known exploits, generating exploit alerts when the DFA reached a dangerous state.

#### NOZZLE and ZOZZLE
Egele et al. performed heapspray shellcode detection using a modified Firefox with a modified SpiderMonkey instance to monitor string concatenation and construction operations [12]. Ratanaworabhan et al. proposed NOZZLE [36], a mechanism against heapspray attacks using a Windows binary instrumentation framework to modify Firefox’s routines for heap object validation during garbage collection. Unlike Egele et al., who only checked strings, NOZZLE inspects all objects allocated in the heap. Curtsinger et al. created ZOZZLE [9] to achieve better performance than NOZZLE by using the Detours instrumentation library to deobfuscate JavaScript code and parse the Abstract Syntax Tree (AST).

#### Cujo and EarlyBird
Rieck et al. developed Cujo, a web proxy that performs static and dynamic analysis of JavaScript code to detect drive-by downloads [38]. Cujo uses a custom YACC grammar for lexical analysis and ADSandbox [10] to execute JavaScript code and extract abstract operations. EarlyBird [40] is an optimization of Cujo, using a modified linear SVM with the same features but giving higher weights to malicious events occurring early in an attack. The closest related work to our approach is Cujo and EarlyBird, as they both use q-grams and SVMs. However, Rieck et al. focus on generic features using both dynamic and static analysis, while we focus on specific resource-related API calls and do not require static analysis. Additionally, EarlyBird and Cujo are deployed on a proxy server, whereas we study a worst-case scenario where the API-based classifier is deployed directly in the browser, which is valuable given the increasing adoption of TLS.

### Conclusions and Future Work

To the best of our knowledge, this is the first work proposing and thoroughly evaluating several learning-based approaches to detect in-browser mining. We compare six approaches using two data sources: system resources consumed by the browser and APIs used by websites. To assess the detection performance, we trained and evaluated classifiers with 330,500 sites from the Alexa top ranking.

Our classifiers effectively bridge the gap between false negatives from blacklists [6] and false positives from CPU-based site classification [13]. The best classifier we found has a 97.84% recall, meaning it detects 97.84% of all mining sites in a new dataset, and achieves 99.7% precision, indicating that 99.7 out of 100 predicted mining sites are indeed abusive. All detection mechanisms are resilient to obfuscation techniques because they rely solely on dynamic information. However, API-based detection mechanisms can misclassify sites if their API usage patterns change, such as with different versions of Coinhive. In such cases, the classifier should be retrained with proper labels. Solutions like Revolver [23] can help prevent evasion by detecting sites that were previously classified as malicious and are no longer classified as such.

While every detection approach can be executed offline, we explored whether API-based approaches, such as bag of words, could be deployed directly in the browser. Evaluating the impact on page-loading time for the Alexa top 100 sites, we found that executing the bag of words or 2-grams classifier induces only 9.2% or 24.9% overhead on the speed index, respectively. However, implementing detection in browsers presented several technical challenges, particularly with Chromium's security model. Despite these hurdles, we implemented a proof of concept using a WebAssembly port of LibSVM [3] and remote instrumentation through the Chrome Debugging Protocol.

Future work will explore the minimum time required for accurate prediction and the feasibility of deploying the classifier as a Chrome extension. This research was supported by the EU under the H2020 AGILE project (grant agreement number H2020-688088).

### Acknowledgments

This research was supported by the EU under the H2020 AGILE (Adaptive Gateways for dIverse muLtiple Environments), grant agreement number H2020-688088.

### References

[1] Bitcoinplus. 2011. Bitcoinplus. https://web.archive.org/web/20170103133312/http://www.bitcoinplus.com/miner/embeddable. Accessed: 2018-04-06.
[2] Gavin C. Cawley and Nicola L.C. Talbot. 2010. On Over-fitting in Model Selection and Subsequent Selection Bias in Performance Evaluation. J. Mach. Learn. Res. 11 (Aug. 2010), 2079–2107. http://dl.acm.org/citation.cfm?id=1756006.1859921
[3] Chih-Chung Chang and Chih-Jen Lin. 2011. LIBSVM: A Library for Support Vector Machines. ACM Trans. Intell. Syst. Technol. 2, 3, Article 27 (May 2011), 27 pages. https://doi.org/10.1145/1961189.1961199
[4] Kevin Zhijie Chen, Guofei Gu, Jianwei Zhuge, Jose Nazario, and Xinhui Han. 2011. WebPatrol: Automated Collection and Replay of Web-based Malware Scenarios. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security (ASIACCS ’11). ACM, New York, NY, USA, 186–195. https://doi.org/10.1145/1966913.1966938
[5] Content Scripts-Google Chrome. 2018. Work in Isolated Worlds. https://developer.chrome.com/extensions/content_scripts#isolated_world. Accessed: 2018-06-02.
[6] Catalin Cimpanu. 2018. In-Browser Cryptojacking Is Getting Harder to Detect. https://www.bleepingcomputer.com/news/security/in-browser-cryptojacking-is-getting-harder-to-detect/. Accessed: 2018-06-02.
[7] Clicktale. 2013. ClickTale’s 2013 Web Analytics Benchmarks Report. https://research.clicktale.com/web_analytics_benchmarks.html. Accessed: 2018-04-06.
[8] Marco Cova, Christopher Kruegel, and Giovanni Vigna. 2010. Detection and Analysis of Drive-by-download Attacks and Malicious JavaScript Code. In Proceedings of the 19th International Conference on World Wide Web (WWW ’10). ACM, New York, NY, USA, 281–290. https://doi.org/10.1145/1772690.1772720
[9] Charlie Curtsinger, Benjamin Livshits, Benjamin Zorn, and Christian Seifert. 2011. ZOZZLE: Fast and Precise In-browser JavaScript Malware Detection. In Proceedings of the 20th USENIX Conference on Security (SEC’11). USENIX Association, Berkeley, CA, USA, 3–3. http://dl.acm.org/citation.cfm?id=2028067.2028070
[10] Andreas Dewald, Thorsten Holz, and Felix C. Freiling. 2010. ADSandbox: Sandboxing JavaScript to Fight Malicious Websites. In Proceedings of the 2010 ACM Symposium on Applied Computing (SAC ’10). ACM, New York, NY, USA, 1859–1864. https://doi.org/10.1145/1774088.1774482
[11] WebPagetest Documentation. 2017. WebPagetest Documentation: Speed Index. https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index. Accessed: 2018-06-10.
[12] Manuel Egele, Peter Wurzinger, Christopher Kruegel, and Engin Kirda. 2009. Defending Browsers against Drive-by Downloads: Mitigating Heap-Spraying Code Injection Attacks. In Detection of Intrusions and Malware, and Vulnerability Assessment, Ulrich Flegel and Danilo Bruschi (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 88–106.
[13] ellenpli@chromium.org. 2018. Please consider intervention for high cpu usage js. https://bugs.chromium.org/p/chromium/issues/detail?id=766068.
[14] Steven Englehardt and Arvind Narayanan. 2016. Online Tracking: A 1-million-site Measurement and Analysis. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS ’16). ACM, New York, NY, USA, 1388–1401. https://doi.org/10.1145/2976749.2978313
[15] Steven Englehardt and Arvind Narayanan. 2018. OpenWPM Firefox extension Instrumenting JavaScript Code. https://github.com/citp/OpenWPM/blob/f3fc7884fd93a31c689a2228c21865003749cf27/automation/Extension/firefox/data/content.js#L480. Accessed: 2018-01-15.
[16] Steven Englehardt, Dillon Reisman, Christian Eubank, Peter Zimmerman, Jonathan Mayer, Arvind Narayanan, and Edward W. Felten. 2015. Cookies That Give You Away: The Surveillance Implications of Web Tracking. In Proceedings of the 24th International Conference on World Wide Web (WWW ’15). International World Wide Web Conferences Steering Committee, Republic and Canton of Geneva, Switzerland, 289–299. https://doi.org/10.1145/2736277.2741679
[17] Eset. 2018. Wayback Machine: Eset Virus Radar. https://web.archive.org/web/20180126135759/www.virusradar.com/en/statistics. Accessed: 2018-06-02.
[18] Shayan Eskandari, Andreas Leoutsarakos, Troy Mursch, and Jeremy Clark. 2018. A first look at browser-based Cryptojacking. Technical Report. Bad Packets.
[19] Mario Heiderich, Tilman Frosch, and Thorsten Holz. 2011. IceShield: Detection and Mitigation of Malicious Websites with a Frozen DOM. In Recent Advances in Intrusion Detection, Robin Sommer, Davide Balzarotti, and Gregor Maier (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 281–300.
[20] Paul Irish. 2016. Speedline. https://github.com/paulirish/speedline. Accessed: 2018-06-10.
[21] Paul Irish. 2017. Debugging Protocol: Does ‘Page.addScriptToEvaluateOnLoad‘ execute before the "load" event? https://groups.google.com/a/chromium.org/forum/#!topic/headless-dev/cD0iF2lpHeA. Accessed: 2018-01-15.
[22] Rafael K. 2017. NoCoin: blacklist.txt. https://raw.githubusercontent.com/keraf/NoCoin/master/src/blacklist.txt. Accessed: 2017-10-15.
[23] Alexandros Kapravelos, Yan Shoshitaishvili, Santa Barbara, Marco Cova, Christopher Kruegel, and Giovanni Vigna. 2013. Revolver: An Automated Approach to the Detection of Evasive Web-based Malware. In Usenix security. USENIX, Washington, D.C., 637–652. https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/kapravelos
[24] Daniel Kostro. 2017. LIBSVM for the browser and nodejs. https://github.com/mljs/libsvm. Accessed: 2018-06-02.
[25] Chaoying Liu and Joseph C. Chen. 2018. Malvertising Campaign Abuses Google’s DoubleClick to Deliver Cryptocurrency Miners. https://blog.trendmicro.com/trendlabs-security-intelligence/malvertising-campaign-abuses-googles-doubleclick-to-deliver-cryptocurrency-miners/
[26] Mark Maunder. 2018. WordPress Plugin Banned for Crypto Mining. https://www.wordfence.com/blog/2017/11/wordpress-plugin-banned-crypto-mining/. Accessed: 2018-01-15.
[27] Jose Nazario. 2009. PhoneyC: A Virtual Client Honeypot. In Proceedings of the 2Nd USENIX Conference on Large-scale Exploits and Emergent Threats: Botnets, Spyware, Worms, and More (LEET’09). USENIX Association, Berkeley, CA, USA, 6–6. http://dl.acm.org/citation.cfm?id=1855676.1855682
[28] Shaun Nichols. 2018. Guys, you’re killing us! LA Times homicide site hacked to mine crypto-coins on netizens’ PCs. https://www.theregister.co.uk/2018/02/22/la_times_amazon_aws_s3/. Accessed: 2018-06-10.
[29] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. 2013. Cookieless Monster: Exploring the Ecosystem of Web-Based Device Fingerprinting. In 2013 IEEE Symposium on Security and Privacy. IEEE, Berkley, CA, USA, 541–555. https://doi.org/10.1109/SP.2013.43
[30] Scipy Lecture Notes. 2018. Coordinate Format (COO). http://www.scipy-lectures.org/advanced/scipy_sparse/coo_matrix.html. Accessed: 2018-06-02.
[31] Mark O’Neill, Scott Ruoti, Kent Seamons, and Daniel Zappala. 2016. TLS Proxies: Friend or Foe?. In Proceedings of the 2016 Internet Measurement Conference (IMC ’16). ACM, New York, NY, USA, 551–557. https://doi.org/10.1145/2987443.2987488
[32] Fabian Pedregosa, Gaël Varoquaux, Alexandre Gramfort, Vincent Michel,