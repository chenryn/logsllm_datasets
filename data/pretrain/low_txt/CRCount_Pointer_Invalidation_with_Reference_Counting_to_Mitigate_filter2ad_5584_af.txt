### Memory Leak and Its Impact

When a memory leak occurs during the execution of a program, it persists until the end of the program. For example, in Figure 7, a memory leak of 288 KB appears midway through the execution and remains until the program terminates. Fortunately, the amount of wasted memory due to these leaks is negligible compared to the total memory space used by the program, as observed in all the benchmarks we tested.

Although memory leaks are not the primary cause of memory overhead in our experiments, they can become a serious issue in long-running programs like server applications, where leaks can accumulate over time. A promising solution to this problem is to integrate a garbage collection mechanism into CRCount to reclaim leaked memory. When the amount of memory occupied by undeleted objects exceeds a certain threshold, the entire program memory can be scanned, and all objects referenced by pointers can be marked. Unmarked, undeleted objects are identified as memory leaks and can then be forcibly released. Since CRCount already uses a bitmap to track pointers, the garbage collection process can be more efficient and accurate than conservative garbage collectors.

We implemented a simple garbage collector to measure the performance overhead. The garbage collection starts from pointers in the stack and global variables. In our experiments, CRCount-det could detect all UAF attempts we tested, indicating that CRCount would properly delay the freeing of objects to prevent malicious exploitation of the tested vulnerabilities.

### Security Considerations

One concern regarding the security guarantees of CRCount is the effectiveness of delayed-memory-reuse-based mitigation against UAF exploits. To exploit an UAF vulnerability, an attacker must place a controlled object in the freed memory region pointed to by dangling pointers. However, in a process protected by CRCount, no new objects are allocated in the freed memory region until the reference count reaches zero. At this point, the objects can only be accessed through existing pointers, maintaining their original semantics. This means that attackers cannot implant controllable objects into the freed memory region, limiting their capabilities to actions originally allowed for the object unless another type of vulnerability is exploited. Additionally, CRCount nullifies any heap pointers inside the object when it is freed, further restricting attackers from reusing the heap pointer inside the object.

### Limitations

#### Custom Memory Allocator
While applying CRCount to benchmark programs, we encountered cases (e.g., gcc in SPEC CPU2006 and freqmine in PARSEC) where the program needed to be patched for our technique to work correctly. The problem primarily arose from the use of a custom memory allocator that internally allocates objects from a reserved chunk of memory without using expensive heap management functions. If different types of objects are allocated to the same memory region, pointers stored in the previous object can be overwritten by non-pointer values in the newly allocated object. Had CRCount been able to identify the custom deallocator paired with the custom allocator, it would have inserted a runtime library call to handle the pointers in the freed region. Since it did not, we manually identified these custom memory deallocators and explicitly inserted CRCount's runtime library calls to update the pointer bitmap and reference counts. Specifically, we added 2 lines to gcc and 1 line to freqmine to call `crc_free` upon custom memory deallocation.

#### Unaligned Pointer
Another issue we encountered was that some programs stored pointers in 4-byte aligned addresses, which is finer than the assumed 8-byte alignment in the pointer bitmap. For instance, PARSEC’s freqmine benchmark used a custom allocator that aligns objects at a 4-byte boundary. We addressed this by modifying the custom memory allocator to align objects at an 8-byte boundary. Additionally, the Apache web server used the `epoll_event` struct defined with `__attribute__((packed))`, which placed the pointer inside the struct at a 4-byte boundary. We wrapped the struct to ensure the pointer is located with an 8-byte alignment. Note that CRCount could ignore unaligned pointer stores by not increasing the reference count for the stored pointer. We chose to patch the code for more complete protection, modifying 12 lines in freqmine and 10 lines in Apache.

#### Vectorization Support
Our prototype CRCount implementation currently does not support vectorization in LLVM IR. DangSan also does not support vectorization—it simply ignores the stores of vector types. Even though vector operations rarely involve pointer values, ignoring vector types could adversely affect reference counter management. Therefore, we turned off vectorization in all experiments. Handling vector types correctly in our analysis and instrumentation is part of our future work.

#### Limitations of Pointer Footprinting
There are cases where our static analysis fails to determine whether a particular store instruction should be instrumented. We perform only intra-procedural backward data flow analysis. If a pointer is cast before being passed to a function, we cannot analyze how the pointer is cast, leading to potential incorrect decisions about instrumenting the store instruction. However, using LLVM link-time optimization (LTO), many functions are inlined, allowing us to gather more information from the backward data flow analysis. Another limitation is that we cannot track type-unsafe pointer propagation through memory. For example, a pointer could be cast to an integer, stored in an integer field of a struct, and passed around the program as an integer. Pointers stored as integers will not increase the reference counts of their corresponding objects. This is a common limitation faced by approaches based on pointer tracking. Additionally, we cannot instrument libraries distributed as binary files, which can cause errors in reference counter management if a pointer stored in the instrumented program is modified in such uninstrumented binary libraries.

### Conclusion

CRCount is a novel solution for addressing UAF errors in legacy C/C++ code. For efficiency, CRCount employs an implicit pointer invalidation scheme that avoids the runtime overhead of explicit invalidation by delaying the freeing of an object until its reference count naturally reduces to zero during program execution. The accuracy of reference counting significantly influences the effectiveness of CRCount. We developed the pointer footprinting technique to help CRCount precisely track the location of every heap pointer along the execution paths in legacy C/C++ code with abusive uses of type-unsafe operations. CRCount is effective and efficient in handling UAF errors in legacy C/C++, incurring 22% performance overhead and 18% memory overhead on SPEC CPU2006 while providing virtually the same security guarantee as other pointer invalidation solutions. CRCount is particularly effective for programs heavily using pointers, where UAF vulnerabilities are more prevalent.

### Acknowledgment

The authors would like to thank Lucas Davi for shepherding the paper. This work was partly supported by the Korea government (MSIT) under the ITRC (Information Technology Research Center) program (IITP-2018-2015-0-00403) and the National Research Foundation of Korea (NRF) grants (NRF-2018R1D1A1B07049870, NRF-2017R1A2A1A17069478). The ICT at Seoul National University provides research facilities for this study.

### References

[1] P. Akritidis, “Cling: A memory allocator to mitigate dangling pointers.” in USENIX Security Symposium, 2010, pp. 177–192.
[2] A. Alexandrescu, Modern C++ design: generic programming and design patterns applied. Addison-Wesley, 2001.
[3] E. D. Berger and B. G. Zorn, “Diehard: probabilistic memory safety for unsafe languages,” in ACM SIGPLAN Notices, vol. 41, no. 6. ACM, 2006, pp. 158–168.
[4] C. Bienia, S. Kumar, J. P. Singh, and K. Li, “The PARSEC benchmark suite: Characterization and architectural implications,” in Proceedings of the 17th International Conference on Parallel Architectures and Compilation Techniques. ACM, 2008, pp. 72–81.
[5] H. Boehm, A. Demers, and M. Weiser, “A garbage collector for C and C++,” 2002.
[6] J. Caballero, G. Grieco, M. Marron, and A. Nappa, “Undangle: early detection of dangling pointers in use-after-free and double-free vulnerabilities,” in Proceedings of the 2012 International Symposium on Software Testing and Analysis. ACM, 2012, pp. 133–143.
[7] T. H. Dang, P. Maniatis, and D. Wagner, “OSCAR: A practical page-permissions-based scheme for thwarting dangling pointers,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 815–832.
[8] M. Daniel, J. Honoroff, and C. Miller, “Engineering heap overflow exploits with JavaScript.” WOOT, vol. 8, pp. 1–6, 2008.
[9] D. Gay, R. Ennals, and E. Brewer, “Safe manual memory management,” in Proceedings of the 6th International Symposium on Memory Management. ACM, 2007, pp. 2–14.
[10] S. Ghemawat and P. Menage, “TCMalloc: Thread-caching malloc, 2007,” URL {http://goog-perftools.sourceforge.net/doc/tcmalloc.html}, 2005.
[11] I. Haller, E. Van Der Kouwe, C. Giuffrida, and H. Bos, “Metalloc: Efficient and comprehensive metadata management for software security hardening,” in Proceedings of the 9th European Workshop on System Security. ACM, 2016, p. 5.
[12] J. L. Henning, “SPEC CPU2006 benchmark descriptions,” ACM SIGARCH Computer Architecture News, vol. 34, no. 4, pp. 1–17, 2006.
[13] M. Hertz and E. D. Berger, “Quantifying the performance of garbage collection vs. explicit memory management,” in ACM SIGPLAN Notices, vol. 40, no. 10. ACM, 2005, pp. 313–326.
[14] M. Hirzel and A. Diwan, “On the type accuracy of garbage collection,” ACM SIGPLAN Notices, vol. 36, no. 1, pp. 1–11, 2001.
[15] K. Koning, X. Chen, H. Bos, C. Giuffrida, and E. Athanasopoulos, “No need to hide: Protecting safe regions on commodity hardware,” in Proceedings of the Twelfth European Conference on Computer Systems. ACM, 2017, pp. 437–452.
[16] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, “SOK: Automated software diversity,” in 2014 IEEE Symposium on Security and Privacy (SP). IEEE, 2014, pp. 276–291.
[17] B. Lee, C. Song, Y. Jang, T. Wang, T. Kim, L. Lu, and W. Lee, “Preventing use-after-free with dangling pointers nullification.” in NDSS, 2015.
[18] K. Lee, “Memory management,” in Pro Objective-C. Springer, 2013, pp. 53–74.
[19] A. Mazzinghi, R. Sohan, and R. N. Watson, “Pointer provenance in a capability architecture,” in 10th USENIX Workshop on the Theory and Practice of Provenance (TaPP 2018), 2018.
[20] S. Nagaraju, C. Craioveanu, E. Florio, and M. Miller, “Software vulnerability exploitation trends,” Microsoft Corporation, 2013.
[21] S. Nagarakatte, M. M. Martin, and S. Zdancewic, “Watchdog: Hardware for safe and secure manual memory management and full memory safety,” in ACM SIGARCH Computer Architecture News, vol. 40, no. 3. IEEE Computer Society, 2012, pp. 189–200.
[22] ——, “WatchdogLite: Hardware-accelerated compiler-based pointer checking,” in Proceedings of Annual IEEE/ACM International Symposium on Code Generation and Optimization. ACM, 2014, p. 175.
[23] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “SoftBound: Highly compatible and complete spatial memory safety for C,” ACM Sigplan Notices, vol. 44, no. 6, pp. 245–258, 2009.
[24] ——, “CETS: Compiler enforced temporal safety for C,” in ACM Sigplan Notices, vol. 45, no. 8. ACM, 2010, pp. 31–40.
[25] N. Nethercote and J. Seward, “How to shadow every byte of memory used by a program,” in Proceedings of the 3rd International Conference on Virtual Execution Environments. ACM, 2007, pp. 65–74.
[26] J. Newsome and D. X. Song, “Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software.” in NDSS, vol. 5. Citeseer, 2005, pp. 3–4.
[27] G. V. Nishanov and S. Schupp, “Garbage collection in generic libraries,” ACM SIGPLAN Notices, vol. 34, no. 3, pp. 86–96, 1999.
[28] G. Novark and E. D. Berger, “DieHarder: Securing the heap,” in Proceedings of the 17th ACM Conference on Computer and Communications Security. ACM, 2010, pp. 573–584.
[29] M. Olsson, “Smart pointers,” in C++ 17 Quick Syntax Reference. Springer, 2018, pp. 157–160.
[30] J. Rafkind, A. Wick, J. Regehr, and M. Flatt, “Precise garbage collection for C,” in Proceedings of the 2009 International Symposium on Memory Management. ACM, 2009, pp. 39–48.
[31] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “AddressSanitizer: A fast address sanity checker.” in USENIX Annual Technical Conference, 2012, pp. 309–318.
[32] S. Silvestro, H. Liu, C. Crosser, Z. Lin, and T. Liu, “FreeGuard: A faster secure heap allocator,” in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2017, pp. 2389–2403.
[33] M. S. Simpson and R. K. Barua, “MemSafe: Ensuring the spatial and temporal memory safety of C at runtime,” Software: Practice and Experience, vol. 43, no. 1, pp. 93–128, 2013.
[34] P. Sobalvarro, “A lifetime-based garbage collector for Lisp systems on general-purpose computers.” MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB, Tech. Rep., 1988.
[35] A. Sotirov, “Heap Feng Shui in JavaScript,” Black Hat Europe, 2007.
[36] E. van der Kouwe, V. Nigade, and C. Giuffrida, “DangSan: Scalable use-after-free detection,” in Proceedings of the Twelfth European Conference on Computer Systems. ACM, 2017, pp. 405–419.
[37] P. R. Wilson, “Uniprocessor garbage collection techniques,” in Memory Management. Springer, 1992, pp. 1–42.
[38] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu, “From collision to exploitation: Unleashing use-after-free vulnerabilities in Linux kernel,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 414–425.
[39] T. Yamauchi and Y. Ikegami, “HeapRevolver: Delaying and randomizing timing of release of freed memory area to prevent use-after-free attacks,” in International Conference on Network and System Security. Springer, 2016, pp. 219–234.
[40] Y. Younan, “FreeSentry: Protecting against use-after-free vulnerabilities due to dangling pointers.” in NDSS, 2015.