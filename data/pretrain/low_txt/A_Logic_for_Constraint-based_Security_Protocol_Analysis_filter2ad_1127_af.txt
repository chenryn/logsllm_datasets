### Instances of Prefix Interleavings and Termination Conditions

In the context of partial runs, where not every participant necessarily completes its execution, we encounter instances of prefix interleavings. For example, the empty trace (ε) is always output, regardless of the input scenario \( S_{c0} \) or \( IK \) in Procedure 13. Clearly, the empty trace does not represent an attack on the protocol in question. Therefore, we need to include a termination condition \( TC_\varphi(s) \), which is evaluated in every resulting state \( s \) of a run from Procedure 13 against a PS-LTL security property \( \varphi \).

When \( TC_\varphi(s) \) holds, it indicates that an attack has occurred, and we can stop the execution and report the attack trace. Otherwise, the execution should continue in search of another potential attack. Given a state \( \langle S_c, IK, CS, tr \rangle \), we define \( TC_\varphi(\langle S_c, IK, CS, tr \rangle) \) to hold when \( D(\pi, CS) \) holds, where \( \pi = T(\neg\varphi, tr, IK) \) and \( \neg\varphi \) is a well-behaved PS-LTL formula.

The termination condition essentially checks whether the current trace \( tr \) in the execution state can be instantiated to provide a solution to \( \neg\varphi \), thereby falsifying \( \varphi \). By Theorem 29, we know that \( D(T(\neg\varphi, tr, IK), CS) \) holds if and only if \( \langle tr, IK \rangle \not\models \varphi \). In such a case, the procedure terminates and outputs the trace \( tr \) that demonstrates the attack. If no attack is found, the procedure continues until an attack is detected or all possibilities are exhausted.

### Benchmarks

In Table 5, we present benchmarks for our implementation, comparing both the flawed and fixed versions of the Andrew RPC protocol when checking authentication (specifically, aliveness). We also compare these results with our old implementation without PS-LTL. As shown, our prototype is considerably slower. We plan to optimize this in future work.

| Protocol Version | Time (s) |
|-----------------|----------|
| Flawed          | 0.06     |
| Fixed           | 0.08     |
| Without PS-LTL  | 2.48     |
| With PS-LTL     | 11.91    |

### Related Work

Our logic, PS-LTL, is related to the trace logic proposed in [9]. PS-LTL provides more powerful temporal operators, such as the "yesterday" (Y) and "since" (S) operators, which allow for the expression of more complex security properties, such as perfect forward secrecy. PS-LTL is inspired by the NPATRL logic [30], but, as shown in subsequent work [26], NPATRL is less expressive than LTL. Additionally, the implementation of NPATRL in the NRL Protocol Analyzer [24] presents difficulties, such as the inability to mention multiple "learn" events in the same formula, a restriction we do not impose, which is essential for specifying properties like perfect forward secrecy.

Our treatment of pure-past LTL is adapted from Havelund and Rosu [19]. We provide a different semantics tailored for security and constraint solving, including a redefined "historically" (H) operator, which we believe better preserves the faithfulness to standard LTL.

Our decision procedure exploits the ability to solve negated constraints, an idea based on allowing the intruder to generate constants, as originally done in the work of Kähler and Küsters [21] for the analysis of contract-signing protocols. Finally, we use events "start," "run," and "end" to specify authentication properties as correspondence assertions, following the approach of Gordon and Jeffrey [18].

### Conclusions and Future Work

We propose PS-LTL, a language for specifying security properties based on linear temporal logic (LTL) with pure-past operators. This language is both simple to use and expressive, as evidenced by its ability to specify various security properties, including authentication [23, 12] (aliveness, weak agreement, and non-injective agreement), secrecy (standard secrecy [2] and perfect forward secrecy [16]), and data freshness [9]. We also study properties to prevent denial of service (DoS) attacks [25].

Having a dedicated language to specify properties allows the protocol designer to separate the protocol instances under study from the properties to be checked. This is useful during the verification phase, as it allows for changes in protocol instances (e.g., adding more sessions) while keeping the property unchanged.

We present a sound and complete decision procedure to check a fragment of PS-LTL against symbolic traces, integrating the PS-LTL interpreter into our protocol verification tool. This provides significant practical value to protocol designers, enabling effective protocol debugging during the engineering phase of security protocol design.

**Future Work:**
- Further study the specification of denial of service properties (see Section 3.2.3).
- Investigate whether a general strategy to solve negated constraints exists (Section 4.1 provides a strategy for the particular case of ground messages).
- Relate negated constraints to other approaches in the literature for solving "negative" predicates, e.g., nonunif [3].
- Implement formula checking more efficiently, maintaining an internal data structure that can be optimized as the trace expands.
- Enlarge the subclass Φ of PS-LTL from Section 4.2 to obtain a more expressive language, covering stronger authentication notions like those in [12].

### Acknowledgements

We are grateful to Pieter Hartel, Ralf Küsters, and the anonymous reviewers (both from this conference and from the FMSE2005 workshop) for their valuable comments.

### References

[1] D. Basin, S. Modersheim, and L. Viganò. Constraint differentiation: A new reduction technique for constraint-based analysis of security protocols. In Workshop on Security Protocol Verification. CONCUR 2003, September 2003.

[2] B. Blanchet. Automatic proof of strong secrecy for security protocols. Research Report MPI-I-2004-NWG1-001, Max-Planck-Institut für Informatik, Stuhlsatzenhausweg 85, 66123 Saarbrücken, Germany, July 2004.

[3] B. Blanchet, M. Abadi, and C. Fournet. Automated Verification of Selected Equivalences for Security Protocols. In 20th IEEE Symposium on Logic in Computer Science (LICS 2005), pages 331–340, Chicago, IL, June 2005. IEEE Computer Society.

[19] K. Havelund and G. Rosu. Testing linear temporal logic formulae on finite execution traces. Technical Report TR 01-08, RIACS, 2001.

[20] J. Heather, G. Lowe, and S. Schneider. How to prevent type flaw attacks on security protocols. In Proceedings, 13th Computer Security Foundations Workshop. IEEE Computer Society Press, July 2000.

[21] D. Kähler and R. Küsters. Constraint Solving for Contract-Signing Protocols. In Proceedings of the 16th International Conference on Concurrency Theory (CONCUR 2005), 2005. To appear.

[22] G. Lowe. Some new attacks upon security protocols. In PCSFW: Proceedings of The 9th Computer Security Foundations Workshop. IEEE Computer Society Press, 1996.

[23] G. Lowe. A hierarchy of authentication specifications. In Proceedings of 10th IEEE Computer Security Foundations Workshop, 1997, pages 31–44. IEEE Computer Society Press, 1997.

[24] C. Meadows. The NRL protocol analyzer: An overview. Journal of Logic Programming, 26(2):113–131, 1996.

[25] C. Meadows. A formal framework and evaluation method for network denial of service. In CSFW '99: Proceedings of the 1999 IEEE Computer Security Foundations Workshop, page 4, Washington, DC, USA, 1999. IEEE Computer Society.

[26] C. Meadows, P. F. Syverson, and I. Cervesato. Formal specification and analysis of the group domain of interpretation protocol using NPATRL and the NRL protocol analyzer. Journal of Computer Security, 12(6):893–931, 2004.

[27] J. Millen. Constraint solver webpage, at http://www.csl.sri.com/users/millen/capsl/constraints.html.

[28] J. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic protocol analysis. In 8th ACM Conference on Computer and Communication Security, pages 166–175. ACM SIGSAC, November 2001.

[29] M. Rusinowitch and M. Turuani. Protocol insecurity with a finite number of sessions is NP-complete. In S. Schneider, editor, Proc. 14th IEEE Computer Security Foundations Workshop, 2001.

[30] P. Syverson and C. Meadows. A formal language for cryptographic protocol requirements. Designs, Codes and Cryptography, 7:27 – 59, 1996.

[31] F. Thayer Fábrica, J. Herzog, and J. Guttman. Strand spaces: Proving security protocols correct. Journal of Computer Security, 7:191–230, 1999.