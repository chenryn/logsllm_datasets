### Impact of Client Cost on Puzzle Solving

The client's participation effectively increases the cost of solving the puzzle but does not affect an adversary, as the latter can bypass the CA-RSA step and focus solely on the puzzle. As illustrated in Figure 5, the cost of the CA-RSA step becomes negligible compared to the client puzzle cost as the puzzle size increases. Specifically, when the attack is not severe and the puzzle size is small, the additional cost to a legitimate client is minimal. However, as the intensity of the attack increases, leading to larger puzzle sizes, the extra cost of CA-RSA diminishes.

Both the client puzzle and our CA-RSA mechanisms address the problem of server overload in different but complementary ways:
- **Client Puzzles:** Slow down DoS attacks by requiring attackers to perform some work before the server commits resources.
- **CA-RSA:** Reduces server load by offloading some of the computation to clients, allowing the server to handle more SSL requests.

In summary, the combination of client puzzles and CA-RSA provides an effective countermeasure against server overload and DoS/DDoS attacks.

### Related Work

Techniques for speeding up SSL transactions typically aim to accelerate RSA decryptions and can be classified into two categories: dedicated cryptographic hardware accelerators and non-standard RSA decryption techniques.

#### 5.1 Hardware Accelerators

SSL hardware accelerators are specialized modular arithmetic processing units designed to speed up RSA computations. An example is the SonicWALL SSL-RX [23], which claims to achieve up to 4,400 RSA decryptions per second at a cost of around $14,000.

These accelerators vary widely in both speed and price and often provide less SSL throughput improvement than expected. In [21], Coarfa et al. analyze SSL performance and conclude that hardware accelerators are not as effective as initially thought. Depending on the workload, one might only achieve a factor of 2 speedup. Specifically, when session reuse is high, resulting in fewer full SSL handshakes, the gain in SSL throughput is modest, approximately a factor of 2. The authors suggest that, instead of purchasing an expensive cryptographic accelerator, it would be more beneficial to invest in a faster CPU to better handle encryption of application data during SSL sessions. This conclusion aligns with our work, which does not require specific hardware but would benefit from a more powerful CPU.

Berson et al. [26] propose offering cryptographic operations, such as modular exponentiations, as a network service. A so-called cryptoserver, equipped with multiple hardware accelerators, would share its services among many clients. Although trust is a major concern in this model, there are settings where the cryptoserver and its users are within the same security perimeter (e.g., web servers). An example is a cryptoserver supporting SSL for a group of secure web servers within the same organization. Mraz [22] suggests a similar idea, offloading certain portions of the SSL protocol—RSA processing and bulk encryption—to an array of special-purpose (SSL handshake-optimized) servers.

#### 5.2 RSA Speedup Techniques

Another approach to speeding up SSL handshakes involves techniques for accelerating RSA decryptions without using specialized hardware. We begin by describing the seminal work by Shacham and Boneh, which proposes three methods for faster RSA decryptions [20, 27]. From the encryptor's (i.e., an SSL client's) perspective, all three methods are backward compatible with standard RSA. The speedups discussed below are based on 1024-bit RSA and are relative to the cost of performing plain RSA decryptions.

1. **Multi-Factor RSA Moduli:**
   - **Setting:** Multi-prime and multi-power moduli (n = pqr or n = p²q).
   - **Decryption:** Uses CRT and Hensel lifting.
   - **Speedup:** Theoretical speedups of around 2.25 for n = pqr and 3.38 for n = p²q. Experiments show real speedups of around 1.73 and 2.3, respectively.

2. **Rebalanced RSA:**
   - **Method:** Shifts the workload to the encryptor, a variant of an earlier technique by Weiner [29].
   - **Details:** d is chosen to be close to n, making both d mod (p − 1) and d mod (q − 1) small integers. The public exponent e also becomes close to n, much larger than typical values (e.g., 3, 17, or 65537). Microsoft Internet Explorer (IE) cannot accept such large exponents, as it limits the public exponent to 32 bits.
   - **Speedup:** Theoretical speedup of 3.6, actual speedup of 3.2.

3. **Batch RSA:**
   - **Method:** Based on Fiat’s Batch RSA, which relies on simultaneous exponentiations [30].
   - **Speedup:** Factor of 2.5.
   - **Implementation:** Uses a batching parameter b, defining the number of ciphertexts needed for batch-decryption (typically set to 4 for optimal performance). Each SSL server needs b RSA public key certificates with identical modulus but different public and private keys. When the server receives b pending SSL handshake requests, each based on one of the certificates, it uses the batching technique to perform b decryptions in less time than if executed sequentially.

**Additional Technique:**
- **RSA Precomputations:**
  - **Method:** Lim and Lee [31] discuss using RSA precomputations to speed up modular exponentiation.
  - **Tradeoff:** Balances storage space (for precomputed values) and computation time, with more pre-computations resulting in more efficient exponentiations.
  - **Performance:** Outperforms other modular exponentiation algorithms like Square-and-Multiply and BGMW methods [8].

#### 5.3 Elliptic Curve Cryptography (ECC)

ECC has gained attention as an alternative to traditional public-key cryptosystems. ECC offers advantages, notably providing equivalent security with smaller key sizes and faster computation. However, the main hindrance to wider adoption is the existence of multiple patents.

Gupta et al. [32] analyze the performance gains of using ECC to speed up SSL. Their results show that the performance gain of ECC over RSA increases with larger key sizes. Compared to the common 1024-bit RSA setting, they measure a speedup factor of 2.4 for 160-bit ECC keys, which offer equivalent security. Since our scheme provides a performance gain of about 11 compared to regular RSA, it outperforms ECC by a ratio of 4. Therefore, ECC benefits, such as shorter keys, do not help solve the problem of server overload.

### Conclusion

We proposed a variation of Server-Aided RSA for re-balancing RSA-based client/server handshakes, specifically targeting SSL/TLS. Clients are required to perform "useful" work, freeing up the server's resources and allowing it to perform less work, thus improving throughput. Our approach is not an alternative but a supplement to client puzzles in defense against DoS and DDoS attacks. Experimental results demonstrate that our Client-Aided RSA solution achieves substantial performance improvements over the basic RSA (with CRT) decryption algorithm, with speedups ranging from 11 to 19, depending on the RSA key size. A secure web server achieving software-speedups of one order of magnitude becomes competitive with hardware-accelerated SSL servers.

### Acknowledgments

The authors would like to thank the ASIACCS anonymous referees for their reviews. We are also grateful to Doug Whiting and David Wagner for useful discussions, and Michael Sirivianos for his technical contributions.

### References

[1] T. Matsumoto, K. Kato, and H. Imai, “Speeding up Secret Computations with Insecure Auxiliary Devices,” Proceedings of Crypto ’88, pp. 497–506, 1988.
[2] Private communication, “Private communication with D. Wagner,” 2005.
[3] Network Working Group, “RFC 2246 - The TLS Protocol Version 1.0,” Internet RFC/STD/FYI/BCP Archives, 1999, http://www.faqs.org/rfcs/rfc2246.html.
[4] BEA WebLogic, “BEA WebLogic Server Frequently Asked Questions,” http://e-docs.bea.com/wls/docs60/faq/security.html.
[5] R. L. Rivest, A. Shamir, and L. M. Adleman, “A Method for Obtaining Digital Signatures and Public-Key Cryptosystems,” Communications of the ACM, vol. 21, pp. 120–126, 1978.
[6] D. Boneh and G. Durfee, “Cryptanalysis of RSA with Private Key d Less than n0.292,” IEEE Transactions on Information Theory, vol. 46, pp. 1339–1349, 2000.
[7] J. Quisquater and C. Couvreur, “Fast decipherment algorithm for RSA public-key cryptosystem,” Electronic Letters, vol. 18, pp. 1905–1907, 1982.
[8] A. J. Menezes, P. C. V. Oorschot, and S. A. Vanstone, “Handbook of Applied Cryptography,” The CRC Press series on discrete mathematics and its applications, 1997.
[9] B. Pfitzmann and M. Waidner, “Attacks on Protocols for Server-Aided RSA Computations,” Proceedings of Eurocrypt ’92, pp. 153–162, 1992.
[10] R. J. Anderson, “Attack on Server Assisted Authentication Protocols,” Electronic Letters, vol. 28, pp. 1473, 1992.
[11] T. Matsumoto, H. Imai, C. S. Laih, and S. M. Yen, “On verifiable implicit asking protocols for RSA computation,” Advances in Cryptology - Proceedings of Auscrypt ’92, vol. 718, pp. 296–307, 1992.
[12] C. H. Lim and P. J. Lee, “Security and performance of server-aided RSA computation protocols,” Advances in Cryptology - CRYPTO ’95, pp. 70–83, 1995.
[13] J. Burns and C. Mitchell, “Parameter Selection for Server-Aided RSA Computation Schemes,” IEEE Transactions on Computing, vol. 43, pp. 163–174, 1994.
[14] C. Laih and F. Tu, “Remarks on Parameter Selection for Server-Aided Secret RSA Computation Schemes,” International Workshops on Parallel Processing, pp. 167–173, 1999.
[15] P. Béguin and J.J. Quisquater, “Fast Server-Aided RSA Signatures Secure Against Active Attacks,” Advances in Cryptology - CRYPTO ’95, pp. 57–69, 1995.
[16] S. Hong, J. Shin, and H. Lee-Kwang, “A new approach to server-aided secret computation,”
[17] J. Merkle, “Multi-round passive attacks on server-aided RSA protocols,” Proceedings of the 7th ACM conference on Computer and Communications Security, pp. 102–107, 2000.
[18] P. Nguyen and I. Shparlinski, “On the insecurity of a server-aided RSA protocol,” Proceedings of Asiacrypt ’01, vol. 2248, pp. 21–35, 2001.
[19] A. K. Lenstra and E. R. Verheul, “Selecting cryptographic key sizes,” Journal of Cryptology: the journal of the International Association for Cryptologic Research, vol. 14, no. 4, pp. 255–293, 2001.
[20] H. Shacham and D. Boneh, “Improving SSL Handshake Performance via Batching,” Proceedings of RSA 2001, vol. 2020, pp. 28–43, 2001.
[21] C. Coarfa, P. Druschel, and D. S. Wallach, “Performance Analysis of TLS Web Servers,” 9th Network and Systems Security Symposium, pp. 553–558, 2002.
[22] R. Mraz, “Secure Blue: An Architecture for a High Volume SSL Internet Server,” 17th Annual Computer Security Applications Conference, 2001.
[23] SonicWALL, “SonicWALL SSL-RX,” http://www.sonicwall.com/products/sslrx.html.
[24] A. Juels and J. Brainard, “Client Puzzles: A Cryptographic Defense Against Connection Depletion,” 5th Network and Systems Security Symposium, pp. 151–165, 1999.
[25] D. Dean and A. Stubblefield, “Using Client Puzzles to Protect TLS,” Proceedings of the USENIX Security Symposium, 2001.
[26] T. Berson, D. Dean, M. Franklin, D. Smetters, and M. Spreitzer, “Cryptography as a Network Service,” 7th Network and Systems Security Symposium, 2001.
[27] D. Boneh and H. Shacham, “Fast Variants of RSA,” CryptoBytes (RSA Laboratories), vol. 5, pp. 1–9, 2002.
[28] H. Cohen, “A Course in Computational Algebraic Number Theory,” Graduate Texts in Mathematics, vol. 138, pp. 6, 1996.
[29] M. Weiner, “Cryptanalysis of Short RSA Secret Exponents,” IEEE Transactions on Information Theory, vol. 36(3), pp. 553–558, 1990.
[30] A. Fiat, “Batch RSA,” Proceedings of Crypto ’89, pp. 175–185, 1989.
[31] C. H. Lim and P. J. Lee, “More Flexible Exponentiation with Precomputation,” Advances in Cryptology - CRYPTO ’94, pp. 95–107, 1994.
[32] V. Gupta, D. Stebila, and S. Fung, “Speeding Up Secure Web Transactions Using Elliptic Curve Cryptography,” 11th Network and Systems Security Symposium, pp. 231–239, 2004.