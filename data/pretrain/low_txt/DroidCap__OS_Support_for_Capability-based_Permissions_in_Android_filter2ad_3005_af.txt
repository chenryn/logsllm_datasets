### Information Flow Control and Access Management

Controlling information flows after data has been released is a valuable complement to an access control system like Binder capabilities, which determine whether data should be released or accessed. This approach may be particularly interesting for (mobile) systems, as they are well-suited for capability-based access control. Capabilities can support defensive mobile app development more effectively than the current permission model.

To make capabilities and app compartmentalization more accessible to developers, future work should investigate how to provide better support (e.g., through tools and frameworks), especially considering the inherently modular design of mobile systems. Our current design balances pure object-capabilities with backward compatibility to Android’s permissions. Transitioning Android to a pure object-capability system might be worthwhile.

### Acknowledgements

We would like to thank our anonymous reviewers for their valuable comments and Lucas Davi for shepherding this paper. This work was partially supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy, and Accountability (CISPA) (VFIT/FKZ: 16KIS0345).

### References

- **Android Manifest File: Service**  
  [https://developer.android.com/guide/topics/manifest/service-element](https://developer.android.com/guide/topics/manifest/service-element) (Last visited: 05/03/2018)

- **AndroidManifest.xml**  
  [https://android.googlesource.com/platform/frameworks/base/+/android-8.1.0_r23/core/res/AndroidManifest.xml](https://android.googlesource.com/platform/frameworks/base/+/android-8.1.0_r23/core/res/AndroidManifest.xml) (Last visited: 05/03/2018)

- **Capsicum Userspace Library**  
  [https://github.com/google/capsicum-test/tree/dev/libcaprights](https://github.com/google/capsicum-test/tree/dev/libcaprights) (Last visited: 07/07/2018)

- **Security Behavior Changes**  
  [https://developer.android.com/about/versions/pie/android-9.0-changes-all](https://developer.android.com/about/versions/pie/android-9.0-changes-all) (Last visited: 06/08/2018)

- **Storage - Android Open Source Project**  
  [https://source.android.com/devices/storage/](https://source.android.com/devices/storage/) (Last visited: 06/08/2018)

- **platform.xml**  
  [https://android.googlesource.com/platform/frameworks/base/+/master/data/etc/platform.xml](https://android.googlesource.com/platform/frameworks/base/+/master/data/etc/platform.xml) (2017, Last visited: 05/03/2018)

### Enhancing Information Flow Control (IFC) Solutions

Future research should explore the extent to which Binder capabilities can further enhance IFC solutions. Additionally, supporting inter-component IFC within an app can motivate developers to consider least-privilege data dissemination between their app components, thereby encouraging app compartmentalization as facilitated by DROIDCAP.

### App Virtualization

App virtualization solutions, such as Boxify, place a reference monitor between a sandboxed app and the system. The primary goal is to provide app sandboxing without modifying the app or the system. Unlike DROIDCAP, which encourages app compartmentalization, Boxify constrains apps developed by potentially untrustworthy developers. While Boxify allows enforcement of powerful policies on the app's interactions with other apps, system services, or the file system, it comes with inherent performance issues. Object-capabilities could mitigate these issues by delegating access to the app’s private directory or system services directly, thus avoiding additional IPC round-trips.

### General Attacker Model

DROIDCAP primarily targets app developers who want to design their apps more defensively through compartmentalization or privilege separation of untrusted code. Like other compartmentalization solutions, DROIDCAP does not include malicious developers in its attacker model. While DROIDCAP cannot prevent malicious or colluding apps, it does prevent unauthorized delegation of capabilities between apps.

### Conclusions

We presented DROIDCAP, a retrofitting of Android’s Binder IPC mechanism to establish Binder capabilities that associate each IPC handle with the access rights to the referenced remote process. We integrated Binder capabilities into Android's app management, including requesting Binder handles to application framework services/apps and permission enforcement. Additionally, we complemented DROIDCAP with a prototypical integration of Capsicum, providing the foundation for file-system permissions as capabilities. Our approach, which involved integrating with Android’s zygote and SELinux, created a permission enforcement system that allows per-process permissions and easy delegation, thus enabling efficient app compartmentalization and least-privilege operation. Notably, our solution removes the UID-based ambient authority of Android’s stock design.

### Key References

- [1] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith, “SoK: Lessons Learned From Android Security Research For Appified Software Platforms,” in IEEE S&P, 2016.
- [2] M. Backes, S. Bugiel, E. Derr, P. McDaniel, D. Octeau, and S. Weisgerber, “On demystifying the android application framework: Re-visiting android permission specification analysis,” in USENIX Security, 2016.
- [3] M. Backes, S. Bugiel, C. Hammer, O. Schranz, and P. von Styp-Rekowsky, “Boxify: Full-fledged app sandboxing for stock android,” in USENIX Security, 2015.
- [4] M. Backes, S. Gerling, C. Hammer, M. Maffei, and P. von Styp-Rekowsky, “Appguard - enforcing user requirements on Android apps,” in TACAS’13, 2013.
- [5] A. Bianchi, Y. Fratantonio, C. Kruegel, and G. Vigna, “Njas: Sandboxing unmodified applications in non-rooted devices running stock android,” in ACM SPSM, 2015.
- [6] T. Book, A. Pridgen, and D. S. Wallach, “Longitudinal analysis of android ad library permissions,” in IEE MoST, 2013.
- [7] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry, “Towards taming privilege-escalation attacks on Android,” in NDSS, 2012.
- [8] S. Bugiel, L. Davi, A. Dmitrienko, S. Heuser, A.-R. Sadeghi, and B. Shastry, “Practical and lightweight domain isolation on Android,” in ACM SPSM, 2011.
- [9] S. Bugiel, S. Heuser, and A.-R. Sadeghi, “Flexible and fine-grained mandatory access control on Android for diverse security and privacy policies,” in USENIX Security, 2013.
- [10] E. Chin and D. Wagner, “Bifocals: Analyzing webview vulnerabilities in android applications,” in WISA, 2014.
- [11] M. Conti, V. T. N. Nguyen, and B. Crispo, “CRePE: Context-related policy enforcement for Android,” in ISC. Springer, 2010.
- [12] D. Davidson, Y. Chen, F. George, L. Lu, and S. Jha, “Secure integration of web content and applications on commodity mobile operating systems,” in ASIACCS, 2017.
- [13] J. B. Dennis and E. C. Van Horn, “Programming semantics for multiprogrammed computations,” Commun. ACM, vol. 9, no. 3, pp. 143–155, Mar. 1966.
- [14] D. Drysdale, “Capsicum object-capabilities on linux,” [https://github.com/google/capsicum-linux](https://github.com/google/capsicum-linux) (Last visited: 07/07/2018).
- [15] W. Enck, D. Octeau, P. McDaniel, and C. Swarat, “A study of android application security,” in USENIX Security, 2011.
- [16] W. Enck, M. Ongtang, and P. McDaniel, “Understanding android security,” IEEE SP, vol. 7, no. 1, pp. 50–57, 2009.
- [17] R. S. Fabry, “Capability-based addressing,” Commun. ACM, vol. 17, no. 7, pp. 403–412, Jul. 1974.
- [18] Google, “Fuchsia is not linux: A modular, capability-based operating system,” [https://fuchsia.googlesource.com/docs/+/master/the-book/](https://fuchsia.googlesource.com/docs/+/master/the-book/) (2018, Last visited: 04/23/2018).
- [19] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi, “Unsafe exposure analysis of mobile in-app advertisements,” in WiSec, 2012.
- [20] K. Gudka, R. N. Watson, J. Anderson, D. Chisnall, B. Davis, B. Laurie, I. Marinos, P. G. Neumann, and A. Richardson, “Clean application compartmentalization with soaap,” in ACM CCS, 2015.
- [21] H. Hao, V. Singh, and W. Du, “On the effectiveness of API-level access control using bytecode rewriting in android,” in ASIACCS, 2013.
- [22] M. E. Houdek, F. G. Soltis, and R. L. Hoffman, “IBM System/38 support for capability-based addressing,” in IEEE ISCA, 1981.
- [23] J. Huang, O. Schranz, S. Bugiel, and M. Backes, “The ART of App Compartmentalization: Compiler-based Library Privilege Separation on Stock Android,” in ACM CCS, 2017.
- [24] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and T. Millstein, “Dr. Android and Mr. Hide: Fine-grained security policies on unmodified Android,” in ACM SPSM, 2012.
- [25] L. Jia, J. Aljuraidan, E. Fragkaki, L. Bauer, M. Stroucken, K. Fukushima, S. Kiyomoto, and Y. Miyake, “Run-time enforcement of information-flow properties on android,” in ESORICS, 2013.
- [26] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri, “Code injection attacks on HTML5-based mobile apps: Characterization, detection and mitigation,” in ACM CCS, 2014.
- [27] K. C. Kahn, W. M. Corwin, T. D. Dennis, H. D’Hooge, D. E. Hubka, L. A. Hutchins, J. T. Montague, and F. J. Pollack, “imax: A multiprocessor operating system for an object-based computer,” in ACM SOSP, 1981.
- [28] P. A. Karger, “Improving security and performance for capability systems,” Ph.D. dissertation, University of Cambridge, Oct. 1988.
- [29] D. Kilpatrick, “Privman: A library for partitioning applications,” in USENIX Annual Technical Conference, FREENIX Track, 2003.
- [30] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood, “seL4: Formal verification of an OS kernel,” in ACM SOSP, 2009.
- [31] B. W. Lampson and H. E. Sturgis, “Reflections on an operating system design,” Commun. ACM, vol. 19, no. 5, pp. 251–265, May 1976.
- [32] T. A. Linden, “Operating system structures to support security and reliable software,” ACM Comput. Surv., vol. 8, no. 4, pp. 409–445, Dec. 1976.
- [33] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on WebView in the Android system,” in ACSAC, 2011.
- [34] C. Marforio, H. Ritzdorf, A. Francillon, and S. Capkun, “Analysis of the communication between colluding applications on modern smartphones,” in ACSAC, 2012.
- [35] V. S. Martin Georgiev, Suman Jana, “Breaking and fixing origin-based access control in hybrid web/mobile application frameworks,” in NDSS, 2014.
- [36] J. H. Morris, Jr., “Protection in programming languages,” Commun. ACM, vol. 16, no. 1, pp. 15–21, Jan. 1973.
- [37] S. J. Mullender, G. van Rossum, A. S. Tanenbaum, R. van Renesse, and H. van Staveren, “Amoeba: A distributed operating system for the 1990s,” Computer, vol. 23, no. 5, pp. 44–53, May 1990.
- [38] P. Mutchler, A. Doupé, J. Mitchell, C. Kruegel, and G. Vigna, “A Large-Scale Study of Mobile Web App Security,” in IEE MoST, 2015.
- [39] A. Nadkarni, B. Andow, W. Enck, and S. Jha, “Practical DIFC enforcement on android,” in USENIX Security, 2016.
- [40] A. Nadkarni and W. Enck, “Preventing accidental data disclosure in modern operating systems,” in ACM CCS, 2013.
- [41] M. Nauman, S. Khan, and X. Zhang, “Apex: Extending Android permission model and enforcement with user-defined runtime constraints,” in ASIACCS, 2010.
- [42] R. M. Needham and R. D. Walker, “The Cambridge CAP computer and its protection system,” in ACM SOSP, 1977.
- [43] P. G. Neumann, R. S. Boyer, R. J. Feiertag, K. N. Levitt, and L. Robinson, “A provably secure operating system: The system, its applications, and proofs,” Computer Science Laboratory Report CSL-116, Second Edition, SRI International, 1980.
- [44] M. Ongtang, K. R. B. Butler, and P. D. McDaniel, “Porscha: policy oriented secure content handling in android,” in ACSAC, 2010.
- [45] M. Ongtang, S. E. McLaughlin, W. Enck, and P. McDaniel, “Semantically rich application-centric security in Android,” in ACSAC, 2009.
- [46] P. Pearce, A. Porter Felt, G. Nunez, and D. Wagner, “AdDroid: Privilege separation for applications and advertisers in Android,” in ASIACCS, 2012.
- [47] N. Provos, “Improving host security with system call policies,” in USENIX Security, 2003.
- [48] N. Provos, M. Friedl, and P. Honeyman, “Preventing privilege escalation,” in USENIX Security, 2003.
- [49] D. Redell and R. Fabry, “Selective revocation of capabilities,” in Proc. International Workshop on Protection in Operating Systems, 1974.
- [50] F. Roesner and T. Kohno, “Securing embedded user interfaces: Android and beyond,” in USENIX Security, 2013.
- [51] J. Seo, D. Kim, D. Cho, I. Shin, and T. Kim, “FLEXDROID: enforcing in-app privilege separation in android,” in NDSS, 2016.
- [52] J. S. Shapiro, J. M. Smith, and D. J. Farber, “EROS: a fast capability system,” in ACM SOSP, 1999.
- [53] S. Shekhar, M. Dietz, and D. S. Wallach, “Adsplit: Separating smartphone advertising from applications,” in USENIX Security, 2012.
- [54] S. Smalley and R. Craig, “Security Enhanced (SE) Android: Bringing Flexible MAC to Android,” in NDSS, 2013.
- [55] S. Son, G. Daehyeok, K. Kaist, and V. Shmatikov, “What mobile ads know about mobile users,” in NDSS, 2015.
- [56] R. Stevens, C. Gibler, J. Crussell, J. Erickson, and H. Chen, “Investigating user privacy in android ad libraries,” in IEE MoST, 2012.
- [57] Trustworthy Systems Team (Data61), “seL4 reference manual v. 7.0.0,” [https://sel4.systems/Info/Docs/seL4-manual-7.0.0.pdf](https://sel4.systems/Info/Docs/seL4-manual-7.0.0.pdf) (Sep. 2017).
- [58] Y. Wang, S. Hariharan, C. Zhao, J. Liu, and W. Du, “Compac: Enforce component-level access control in Android,” in ACM CODASPY, 2014.
- [59] R. N. M. Watson, J. Anderson, B. Laurie, and K. Kennaway, “Capsicum: practical capabilities for unix,” in USENIX Security, 2010.
- [60] R. N. M. Watson, J. Woodruff, P. G. Neumann, S. W. Moore, J. Anderson, D. Chisnall, N. Dave, B. Davis, K. Gudka, B. Laurie, S. J. Murdoch, R. Norton, M. Roe, S. Son, and M. Vadera, “CHERI: A hybrid capability-system architecture for scalable software compartmentalization,” in IEEE S&P, 2015.
- [61] M. V. Wilkes, *The Cambridge CAP Computer and Its Operating System* (Operating and Programming Systems Series). Amsterdam, The Netherlands: North-Holland Publishing Co., 1979.
- [62] W. Wulf, E. Cohen, W. Corwin, A. Jones, R. Levin, C. Pierson, and F. Pollack, “Hydra: The kernel of a multiprocessor operating system,” Commun. ACM, vol. 17, no. 6, pp. 337–345, Jun. 1974.
- [63] R. Xu, H. Saïdi, and R. Anderson, “Aurasium: Practical policy enforcement for Android applications,” in USENIX Security, 2012.
- [64] Y. Xu and E. Witchel, “Maxoid: Transparently confining mobile applications with custom views of state,” in EuroSys, 2015.
- [65] X. Zhang, A. Ahlawat, and W. Du, “Aframe: Isolating advertisements from mobile applications in android,” in ACSAC, 2013.
- [66] Y. Zhou, X. Zhang, X. Jiang, and V. Freeh, “Taming information-stealing smartphone applications (on Android),” in TRUST, 2011.