### Detailed Investigation and Performance Improvement

Further detailed investigation is required to fully understand the potential for performance enhancement in vTPM (Virtual Trusted Platform Module) architectures. One promising approach is to run all vTPMs on a given hardware platform within a separate, dedicated virtual machine (VM), often referred to as a vTPM manager [4]. This dedicated VM can be securely migrated using standard VM migration techniques, making it straightforward to associate each vTPM with its corresponding VM. However, if all vTPMs are managed within a privileged VM, additional process migration techniques must be developed to facilitate vTPM migration. Future work should focus on designing and comparing these migration methods to the approach implemented in this study.

### Related Work

Previous research on VM-vTPM migration has proposed several protocols [4, 5, 7] and an implementation in the Xen hypervisor [9]. All of these protocols ensure the confidentiality of the VM-vTPM during migration. However, only [4] incorporates an integrity protection mechanism to verify that the migrated data has not been tampered with. For other protocols, integrity is implicitly handled by encryption, but any modifications to the encrypted VM image would likely result in resumption issues at the destination. There are no existing means for the migration process to diagnose the causes of failed resumptions, such as intentional corruption of the VM image during transfer or server execution problems. System integrity measurement before migration has been suggested in [5, 7], but the integrity of the migration initiator (source) and the authenticity of the initiator have not been addressed. We believe that these features are crucial for preventing Denial of Service (DoS) and collocation attacks.

### vTPM Architectures and Key Hierarchies

Several vTPM architecture proposals include key hierarchies [4–8]. For example, creating vEK (Virtual Endorsement Key) credentials using the underlying TPM EK (Endorsement Key) does not comply with EK usage restrictions [5]. Using the TPM AIK (Attestation Identity Key) to sign vEK or vAIK (Virtual Attestation Identity Key) credentials makes these keys non-migratable, necessitating fresh key generation at the destination. Additionally, obtaining vEK or vAIK credentials from a trusted third party (Privacy CA) increases external dependencies and is challenging to implement in practice. Furthermore, the Privacy CA must be informed of every migration, as the basis for issuing such credentials is the underlying platform.

In [6], it is unclear how vTPMs can be migrated if the TPM EK and AIK are shared among multiple vTPMs. In [8], the generation of vTPM keys and credentials is discussed, but only from the perspective of the types of TPM keys that could be used in a virtual TPM.

### VM Migration Techniques

Virtual machines (VMs) can be migrated using three primary methods: the stop-transfer-start paradigm, the suspend-transfer-resume paradigm, and live migration, listed in increasing order of efficiency [24]. The first two techniques either stop or suspend the VM before transferring it to the destination. Live migration is the most popular method because it minimizes VM downtime [24, 25]. A summary of live migration techniques can be found in [28]. VM migration may involve transferring only the VM RAM or both the VM RAM and the disk image [25].

### Concluding Remarks

In this work, we addressed the challenge of enabling secure VM-vTPM migration in private cloud virtualized environments. We analyzed the requirements for secure VM-vTPM migration in internal virtualized environments and proposed a vTPM key hierarchy that provides robust functionality for constructing secure VM-vTPM migration protocols. Our key hierarchy complies with TPM key usage recommendations, minimizes key regeneration after vTPM migration, and prevents vTPM transaction linking. Leveraging this hierarchy, we proposed and analyzed a secure VM-vTPM protocol, evaluating its performance through an implementation using the Xen hypervisor. This implementation demonstrates that our proposed secure VM-vTPM migration scheme can be directly integrated into open-source virtual systems. Preliminary results show that, compared to the cost of encrypting data, our migration scheme incurs negligible overhead in regenerating vTPM keys at the destination. The implementation is open-source and available online [10]. We also discussed how our scheme can be extended to support live migration of VM-vTPMs.

### Future Work

Future work will focus on extending the implementation to support different vTPM key hierarchies and analyzing the performance of VM-vTPM migration in realistic virtualized computing environments. We also plan to explore the possibility of securing live VM-vTPM migration.

### Acknowledgements

The authors thank Dr. Aurélien Francillon for his assistance during the implementation. We also acknowledge the anonymous reviewers for their valuable feedback and comments. This work was partially supported by the Swiss National Science Foundation under Grant 200021-127294.

### References

[1] TCG Architecture Overview, v1.4. http://www.trustedcomputinggroup.org.
[2] Amazon Elastic Compute Cloud. http://aws.amazon.com/ec2/.
[3] Tal Garfinkel and Mendel Rosenblum. When virtual is harder than real: security challenges in virtual machine based computing environments. In HOTOS’05: Proceedings of the 10th conference on Hot Topics in Operating Systems, pages 20–20, 2005.
[4] Stefan Berger, Ramón Cáceres, Kenneth A. Goldman, Ronald Perez, Reiner Sailer, and Leendert van Doorn. vTPM: Virtualizing the trusted platform module. In USENIX-SS’06: Proceedings of the 15th conference on USENIX Security Symposium, pages 305–320, 2006.
[5] Frederic Stumpf and Claudia Eckert. Enhancing Trusted Platform Modules with Hardware-Based Virtualization Techniques. In SECURWARE ’08: Proceedings of the 2008 Second International Conference on Emerging Security Information, Systems and Technologies, pages 1–9, 2008.
[6] Paul England and Jork Loeser. Para-Virtualized TPM Sharing. In Trust ’08: Proceedings of the 1st international conference on Trusted Computing and Trust in Information Technologies, pages 119–132, 2008.
[7] Ahmad-Reza Sadeghi, Christian Stüble, and Marcel Winandy. Property-Based TPM Virtualization. In ISC ’08: Proceedings of the 11th international conference on Information Security, pages 1–16, 2008.
[8] Vincent Scarlata, Carlos Rozas, Monty Wiseman, David Grawrock, and Claire Vishik. TPM Virtualization: Building a General Framework. In Trusted Computing, pages 43–56, 2007.
[9] Xen hypervisor. http://www.xen.org.
[10] Secure VM-vTPM protocol implementation. http://www.syssec.ethz.ch/software/vtpm-migration.zip.
[11] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds. In CCS ’09: Proceedings of the 16th ACM conference on Computer and communications security, pages 199–212, 2009.
[12] Reiner Sailer, Xiaolan Zhang, Trent Jaeger, and Leendert van Doorn. Design and implementation of a TCG-based integrity measurement architecture. In SSYM’04: Proceedings of the 13th conference on USENIX Security Symposium, pages 16–16, 2004.
[13] Zhi Wang and Xuxian Jiang. Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity. In Proceedings of the 2010 IEEE Symposium on Security and Privacy, pages 380–395, 2010.
[14] Intel trusted execution technology. http://www.intel.com/Assets/en_US/PDF/whitepaper/323586.pdf.
[15] Jonathan M. McCune, Bryan J. Parno, Adrian Perrig, Michael K. Reiter, and Hiroshi Isozaki. Flicker: an execution infrastructure for tcb minimization. SIGOPS Oper. Syst. Rev., 42:315–328, 2008.
[16] TPM Main Part 1 Design Principles. http://www.trustedcomputinggroup.org/resources.
[17] W. Diffie and M. Hellman. New directions in cryptography. Information Theory, IEEE Transactions on, 22:644 – 654, 1976.
[18] The transport layer security (TLS) protocol v 1.1. http://www.rfc-editor.org/rfc/pdfrfc/rfc4346.txt.pdf.
[19] Ahmed M. Azab, Peng Ning, Zhi Wang, Xuxian Jiang, Xiaolan Zhang, and Nathan C. Skalsky. Hypersentry: enabling stealthy in-context measurement of hypervisor integrity. In Proceedings of the 17th ACM conference on Computer and communications security, CCS ’10, pages 38–49, 2010.
[20] Jiang Wang, Angelos Stavrou, and Anup Ghosh. Hypercheck: a hardware-assisted integrity monitor. In Proceedings of the 13th international conference on Recent advances in intrusion detection, RAID’10, pages 158–177, 2010.
[21] Yacine Gasmi, Ahmad-Reza Sadeghi, Patrick Stewin, Martin Unger, and N. Asokan. Beyond secure channels. In STC ’07: Proceedings of the 2007 ACM workshop on Scalable trusted computing, pages 30–40, 2007.
[22] Radia Perlman. The ephemerizer: Making data disappear. Journal of Information System Security, 1:55 – 68, 2005.
[23] Radia Perlman. File system design with assured delete. In In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2007.
[24] Christopher Clark, Keir Fraser, Steven H, Jakob Gorm Hansen, Eric Jul, Christian Limpach, Ian Pratt, and Andrew Warfield. Live Migration of Virtual Machines. In Proceedings of the 2nd ACM/USENIX Symposium on Networked Systems Design and Implementation (NSDI), pages 273–286, 2005.
[25] Robert Bradford, Evangelos Kotsovinos, Anja Feldmann, and Harald Schiöberg. Live wide-area migration of virtual machines including local persistent state. In VEE ’07: Proceedings of the 3rd international conference on Virtual execution environments, pages 169–179, 2007.
[26] Mario Strasser and Heiko Stamer. A Software-Based Trusted Platform Module Emulator. In Trust ’08: Proceedings of the 1st international conference on Trusted Computing and Trust in Information Technologies, pages 33–47, 2008.
[27] Privacy certificate authority. http://www.privacyca.com.
[28] Michael R. Hines, Umesh Deshpande, and Kartik Gopalan. Post copy live migration of virtual machines citation. ACM SIGOPS Operating Systems Review, 43(3):14–26, 2009.
[29] Google Perftools. http://code.google.com/p/google-perftools/.

### Appendix

#### Previous Designs of vTPM Architectures

In [4], Berger et al. discuss the trade-offs between keeping the vTPM key hierarchy independent from the TPM key hierarchy (as in Figure 6(d)) and linking it to the TPM via the AIK (as in Figures 6(a) and 6(b)). The authors claim that the design in Figure 6(d) (i) minimizes the key and credential regeneration required after migration and (ii) complies with the procedure of obtaining AIKs from a Privacy CA. Sadeghi et al. [7] adopt a similar design. In [5], Stumpf et al. propose a vTPM key hierarchy that uses the TPM EK to sign the vEK (see Figure 6(c)), where the AIK is obtained from a Privacy CA, similar to the TPM.