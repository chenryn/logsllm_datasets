### Specific Types and SourceNode Property

For specific types, such as `TYPE_NOTIFICATION_STATE_CHANGED`, there is no `SourceNode` property. This lack of a `SourceNode` property means that assistive applications cannot identify the original senders of the notifications.

### Impact

All assistive apps that implement accessibility-based notification retrieval are exposed to the security risk of notification phishing. This attack method and the design shortcoming in custom `AccessibilityEvent` have been reported to the Android security team, and a tracking ID (AndroidID-79268769) has been assigned. The Android security team acknowledged our report and rewarded us with $200. They also mentioned that an internal Google engineer had independently reported the same issue. A Common Vulnerabilities and Exposures (CVE) ID, CVE-2018-9376, has been assigned to this vulnerability. Additionally, following our report, the vulnerable app Super Status Bar (com.firezenk.ssb) was removed from the Google Play Store.

### 7. Discussions and Limitations

In this section, we discuss some attack conditions and the limitations present in our experiment and analysis.

#### Attacks Without Accessibility Services

- **Installation Hijacking Attack**: If the accessibility service is not enabled, the user will be involved in the installation process. An experienced user may notice unusual permission requests (see Figure 7(b)) and reject the installation.
- **Notification Phishing Attack**: If the accessibility service is not enabled, the timing of displaying the phishing notification becomes a challenge.

**Figure 8: Notification Phishing Attack**
- (a) Original status bar
- (b) Phishing notification
- (c) Phishing Activity

#### Vulnerable Apps

Apps like Super Status Bar (com.firezenk.ssb), Status (com.james.status), and Material Notification Shade (com.treydev.msb) are examples of status bar apps that need to obtain system notifications and notify the user. After Android 4.3 (API level 18), third-party apps can obtain system notifications through the `NotificationListenerService` with the `BIND_NOTIFICATION_LISTENER_SERVICE` permission. However, for devices running older Android versions, the only method to obtain system notifications is via the accessibility service. Due to the fragmentation problem and backward compatibility considerations, this accessibility-based method remains popular. Our study confirms that 30.8% of the usage is for this purpose (see Section ยง4.3). Such implementation is not designed for disabled users and violates the mission of the accessibility APIs [DS#1].

### Logic Analysis

Here, we describe the execution logic of accessibility-based notification retrieval:
1. The status bar app filters received accessibility events for notifications.
2. If the `EventType` is `TYPE_NOTIFICATION_STATE_CHANGED`, it assumes a new notification has been dispatched [DS#2].
3. The app then extracts properties from the event and parses necessary information, such as the notification title, content, and parcelable data. However, this process is vulnerable. A zero-permission malicious app can construct a custom `AccessibilityEvent` with phishing information and deceive the event receiver.

### Attack

As preparation, our zero-permission malicious app is installed on the user's phone and runs in the background. For example, using Super Status Bar (Figure 8), the attack app sends a phishing notification disguised as a message from a bank app. It constructs a custom `AccessibilityEvent` with phishing information to trick the status bar app.

### APK Dataset

The dataset for the app scanning experiment contains 91,605 samples, and 337 assistive apps (containing 342 accessibility services) were identified. Due to anti-analysis protection and legacy code, only 334 service samples could be used for subsequent analysis. Our dataset can be expanded to include more apps for further analysis.

### Dishonest Descriptions

In Section ยง4.3, our analysis is based on the accessibility service descriptions provided by assistive apps. Although these apps are legitimate, their descriptions may not be entirely honest. They might conceal parts of their true intentions, which can affect the accuracy of our purpose analysis.

### Misuse Identification

It is challenging to determine whether certain usage behaviors constitute misuse, especially when executing auto-actions. For instance, Automate (com.llamalab.automate) helps users create automations using flowcharts. The supported actions include automatically sending SMS or emails, copying files to FTP or Google Drive, playing music, or taking photos. According to its website, this app is not designed for disabled users, but it is difficult to judge based on its usage descriptions or behaviors.

### 8. Recommendations for More Secure Accessibility APIs and Framework

In this paper, we systematically analyze the usage and security risks of the accessibility APIs. Given the design shortcomings discussed in Section ยง5, we propose possible improvements to mitigate these security risks.

#### High-Level Considerations

The accessibility APIs are designed for users with disabilities, so usability is essential. The trade-off between security and usability is an open question. The discovered shortcomings (DS#1, DS#2, and DS#3) are fundamental design issues in the event-driven accessibility framework. A new architecture may be needed to fully address these issues. Here, we discuss targeted improvements for each shortcoming.

- **DS#1**: Ideally, if an app is not designed for disabled users, it should not invoke the accessibility APIs. However, some popular apps, such as LastPass (com.lastpass.lpandroid) and Universal Copy (com.camel.corp.universalcopy), rely on the accessibility service. In November 2017, Google required assistive app developers to explain how their apps use the accessibility APIs to help disabled users, or their apps would be removed from the Play Store [32]. This plan faced public backlash, and Google eventually abandoned it. We recommend designing new APIs for misuse cases, reflecting the current Android APIs' inability to meet developers' needs. New APIs and permissions could encourage developers to avoid using the accessibility APIs. Google made a similar attempt with the `BIND_AUTOFILL_SERVICE` permission on Android 8.0, allowing password manager apps to achieve the auto-fill feature [41]. However, due to Android fragmentation, it may take time to fix all relevant issues, and new APIs will introduce compatibility problems.

- **DS#2**: Under the current architecture, it is nearly impossible to fix this design shortcoming. Since the accessibility event senders and receivers do not interact directly, it is difficult for an assistive app (receiver) to identify the event sender. We recommend improving the execution logic of assistive apps as a short-term mitigation. For example, in the case of installation hijacking, the store app should save downloaded APK files to its private data folder (internal storage) [19], reducing the chance of identifying the downloaded APK file. In the case of notification hijacking, the status bar app should not launch the (unreliable) `Intent` contained in the received `TYPE_NOTIFICATION_STATE_CHANGED` events.

- **DS#3**: The basic information of custom accessibility events, including `SourceNode`, `ClassName`, and `PackageName`, should not be filled by third-party apps. Only the operating system should fill this information to ensure the sender's information cannot be tampered with. Additionally, a new permission could be added to restrict sending custom accessibility events, as this functionality is intended for making custom views accessible.

### 9. Related Work

Assistive technologies come with security challenges. We review related work on the security issues of accessibility techniques.

- **Jang et al. [36]**: Presented the first security evaluation of accessibility support for four mainstream platforms (Microsoft Windows, Ubuntu Linux, iOS, and Android). Their study demonstrated that inadequate security checks on I/O paths make it possible to launch attacks from accessibility interfaces. This study focused on the accessibility module I/O and did not touch the underlying design of the Android accessibility framework.
- **Kraunelis et al. [37]**: First noticed the possibility of attacks leveraging the Android accessibility framework.
- **Fratantonio et al. [35]**: Designed the "cloak and dagger" attack, combining the capabilities of the `SYSTEM_ALERT_WINDOW` and `BIND_ACCESSIBILITY_SERVICE` permissions to achieve complete control of the UI feedback loop.
- **Aonzo et al. [28]**: Uncovered design issues in mobile password managers and mentioned the misuse of the accessibility service.
- **Naseri et al. [43]**: Investigated sensitive information leakage through the accessibility service, finding that 72% of top finance and 80% of top social media apps are vulnerable. Unlike our work, previous studies focused on exploring what kinds of attacks could be achieved through a malicious app with the `BIND_ACCESSIBILITY_SERVICE` permission. Our study evaluated the usage of the accessibility APIs and the design of their supporting architecture, demonstrating attacks that do not require any sensitive permissions.

### 10. Conclusion

In this paper, we systematically studied the usage of the accessibility APIs and the design of their supporting architecture. Through code analysis and a large-scale app scanning study, we identified several fundamental design shortcomings that bring serious security risks. As showcases, we presented two concrete attacks: installation hijacking and notification phishing. We also proposed improvement recommendations. We believe the security threats reported in this paper are not isolated incidents, and a new accessibility architecture may be needed to completely address these flaws.

### Acknowledgements

We are grateful to our shepherd Jason Polakis and the anonymous reviewers for their insightful comments. This work was partially supported by the National Natural Science Foundation of China (NSFC) under Grant No. 61902148, No. 61572415, Hong Kong S.A.R. Research Grants Council (RGC) General Research Fund No. 14217816, and Qilu Young Scholar Program of Shandong University.

### References

[1] 1Mobile. http://www.1mobile.com/.
[2] AccessibilityEvent. https://developer.android.com/reference/android/view/accessibility/AccessibilityEvent.html.
[3] AccessibilityEvent.java. https://android.googlesource.com/platform/frameworks/base/+/android-8.1.0_r27/core/java/android/view/accessibility/AccessibilityEvent.java.
[4] AccessibilityService. https://developer.android.com/reference/android/accessibilityservice/AccessibilityService.
[5] AccessibilityServiceInfo. https://developer.android.com/reference/android/accessibilityservice/AccessibilityServiceInfo.html.
[6] Amazon Appstore. https://www.amazon.com/androidapp.
[7] Android accessibility overview. https://support.google.com/accessibility/android/answer/6006564.
[8] APKPure. https://apkpure.com/.
[9] Apktool. https://ibotpeaches.github.io/Apktool/.
[10] Automate. https://llamalab.com/automate/.
[11] Building Accessibility Services. https://developer.android.com/guide/topics/ui/accessibility/services.html.
[12] Building Accessible Custom Views. https://developer.android.com/guide/topics/ui/accessibility/custom-view.