### Optimal Va and Raw Bit Errors

In this scenario, the optimal verification voltage \( V_a \) is located at the intersection of the two distributions, as it minimizes the raw bit errors.

**Figure 15. Threshold Voltage Distributions Before and After Read Disturb**
- **(a) No read disturb**
- **(b) After some read disturb**

Even with the optimal \( V_a \) applied after sufficient read disturbs, some cells in the erased state (ER) are misread as being in the P1 state (shown as blue cells), while some cells in the P1 state are misread as being in the erased state (shown as red cells). These misreads result in errors that consume part of the ECC (Error Correction Code) capability. As these errors accumulate within a page and exceed the total ECC correction capability, the ECC can no longer correct them, leading to an uncorrectable flash error. This type of error is critical because:
1. It determines the flash lifetime, which is the guaranteed time a flash device can be used without exceeding a fixed rate of uncorrectable errors.
2. It may result in the permanent loss of important user data.

### Raw Bit Errors and Read Disturb

Raw bit errors are a combination of read disturb errors and other error types, such as program errors and retention errors. If we could correct even a fraction of the read disturb errors with a mechanism other than ECC, those removed errors would no longer consume part of the limited ECC correction capability. Consequently, the total amount of raw bit errors the flash device can handle would increase, allowing previously uncorrectable flash errors to be corrected. Thus, we aim to develop a new recovery mechanism that can identify and correct such read disturb errors.

### Identifying and Correcting Susceptible Cells

To perform such a recovery, we need to:
1. Identify susceptible flash cells (i.e., cells with a threshold voltage close to a read reference voltage \( V_{ref} \)) whose states are most likely to have been incorrectly changed due to read disturb. This is done by characterizing the degree of the threshold voltage shift.
2. Probabilistically correct these cells based on the threshold voltage shift characterization.

We introduce our proposed mechanism, RDR (Read Disturb Recovery), which performs these two steps to successfully recover from read disturb errors.

#### 5.2. Identifying and Correcting Susceptible Cells

When the threshold voltage distributions of two different logical states overlap due to read disturb, RDR identifies susceptible cells and determines a threshold with which to probabilistically estimate the correct logical values of such cells.

Although read disturb affects all flash cells, each cell is affected to a different degree due to process variations. We verify this hypothesis experimentally for \( V_{ref} = V_a \):
1. Program known, pseudo-randomly generated data values to a flash block with 8,000 P/E cycles of wear.
2. Increase the read disturb count by repeatedly reading data from the block.
3. After the first round of 250K reads, identify susceptible cells (cells whose \( V_{th} \) is within the range \( V_a \pm \sigma/2 \), where \( \sigma \) is the standard deviation of the threshold voltage distribution).
4. Record the threshold voltages of all susceptible cells by sweeping the read reference voltage.
5. Add a second round of 100K reads and measure the threshold voltage of the susceptible cells again.
6. Compare the difference in threshold voltage (\( \Delta V_{th} \)) for these susceptible cells between the first and second rounds, and plot the distribution of this difference (Fig. 16).

**Figure 16. Probability Density Function of the Threshold Voltage Change (\( \Delta V_{th} \)) for Susceptible Cells with Threshold Voltages Near \( V_a \)**
- **Blue Line:** Cells originally in the ER state
- **Red Line:** Cells originally in the P1 state

**Identification:**
- By setting a delta threshold voltage (\( \Delta V_{ref} \)) at the intersection of the two probability density functions, we classify cells into two categories.
- Since read disturb tends to increase a cell’s threshold voltage, we classify cells with a higher threshold voltage change (\( \Delta V_{th} > \Delta V_{ref} \); regions III and IV in Fig. 16) as disturb-prone cells.
- Cells with a lower or negative threshold voltage change (\( \Delta V_{th} < \Delta V_{ref} \); regions I and II in Fig. 16) are classified as disturb-resistant cells.

**Correction:**
- Disturb-prone cells (regions III and IV under the blue line) are correctly recovered to the ER state.
- The remaining cells originally programmed in the ER state with \( \Delta V_{th} < \Delta V_{ref} \) (region II under the blue line) are incorrectly recovered to the P1 state.
- Similarly, cells originally programmed in the P1 state with \( \Delta V_{th} > \Delta V_{ref} \) (region IV under the red line) are identified as disturb-resistant and incorrectly recovered to the ER state.

RDR achieves a net reduction in errors because the number of correctly recovered cells is much greater than the number of incorrectly recovered cells. Incorrectly recovered cells can still be corrected later by ECC.

### 5.3. Mechanism

To recover from uncorrectable flash errors, we propose using RDR to identify and probabilistically correct cells whose states are most likely to be changed by read disturb, reducing the overall raw bit error rate to a level correctable by ECC. The mechanism consists of six steps:

1. **Backup Data:** When an uncorrectable error occurs in a block, back up the valid, readable data to another block.
2. **Scan Threshold Voltages:** Scan the threshold voltages of the cells in the page containing the data that ECC was unable to correct, and save the threshold voltages to another block.
3. **Induce Read Disturbs:** Induce additional read disturbs to this page by repeatedly reading from another page in the same block 100K times.
4. **Rescan Threshold Voltages:** Rescan and save the threshold voltages of the cells in the failed page again (same as Step 2) to another block.
5. **Select and Calculate:** Select cells with threshold voltages close to a read reference voltage (\( V_{ref} - \sigma/2 < V_{th} < V_{ref} + \sigma/2 \), and \( V_{ref} \) set to \( V_a \), \( V_b \), or \( V_c \)). Calculate the change in threshold voltage for these cells before (Step 2) and after 100K read disturbs (Step 4). Set \( \Delta V_{ref} \) equal to the mean of these differences.
6. **Predict and Recover:** Using the \( \Delta V_{ref} \) value from Step 5, predict a cell whose threshold voltage changes by more than \( \Delta V_{ref} \) as disturb-prone, and assume it was originally programmed into the lower of the two possible cell states. Predict a cell whose threshold voltage changes by less than \( \Delta V_{ref} \) as disturb-resistant, and assume it was originally in the higher voltage state. Attempt to recover the failed page using ECC.

### 5.4. Evaluation

We evaluate how the overall RBER (Raw Bit Error Rate) changes when RDR is used. **Figure 17** shows experimental results for error recovery in a flash block with 8,000 P/E cycles of wear. When RDR is applied, the reduction in overall RBER grows with the read disturb count, from a few percent for low read disturb counts up to 36% for 1 million read disturb operations. As data experiences more read disturb operations, the read disturb error count contributes significantly to the total error count, which our recovery mechanism targets and reduces. Therefore, RDR provides a large effective extension of the ECC correction capability.

**Figure 17. Raw Bit Error Rate vs. Number of Read Disturb Operations, with and without RDR, for a Flash Block with 8,000 P/E Cycles of Wear**

### 6. Conclusion

This paper provides the first detailed experimental characterization of read disturb errors for 2Y-nm MLC NAND flash memory chips. We find that bit errors due to read disturb are more likely to occur in cells with lower threshold voltages and greater wear. Reducing the pass-through voltage can effectively mitigate read disturb errors. Using these insights, we propose:
1. A mitigation mechanism called Vpass Tuning, which dynamically adjusts the pass-through voltage for each flash block online to minimize read disturb errors.
2. An error recovery mechanism called Read Disturb Recovery, which exploits the differences in susceptibility of different cells to read disturb to probabilistically correct read disturb errors.

We hope that our characterization and analysis of the read disturb phenomenon will enable the development of other error mitigation and tolerance mechanisms, which will become increasingly necessary as continued flash memory scaling leads to greater susceptibility to read disturb. We also hope that our results will motivate NAND flash manufacturers to add pass-through voltage controls to next-generation chips, allowing flash controller designers to exploit our findings and design controllers that tolerate read disturb more effectively.

### Acknowledgments

We thank the anonymous reviewers for their feedback. Erich F. Haratsch and Ken Mai contributed to this work. This work is partially supported by the Intel Science and Technology Center, the CMU Data Storage Systems Center, and NSF grants 0953246, 1065112, 1212962, and 1320531.

### References

[1] Y. Cai et al., “FPGA-Based Solid-State Drive Prototyping Platform,” in FCCM, 2011.
[2] Y. Cai et al., “Error Patterns in MLC NAND Flash Memory: Measurement, Characterization, and Analysis,” in DATE, 2012.
[3] Y. Cai et al., “Threshold Voltage Distribution in NAND Flash Memory: Characterization, Analysis, and Modeling,” in DATE, 2013.
[4] Y. Cai et al., “Data Retention in MLC NAND Flash Memory: Characterization, Optimization, and Recovery,” in HPCA, 2015.
[5] Y. Cai et al., “Program Interference in MLC NAND Flash Memory: Characterization, Modeling, and Mitigation,” in ICCD, 2013.
[6] Y. Cai et al., “Flash Correct and Refresh: Retention Aware Management for Increased Lifetime,” in ICCD, 2012.
[7] Y. Cai et al., “Error Analysis and Retention-Aware Error Management for NAND Flash Memory,” Intel Technology Journal (ITJ), 2013.
[8] Y. Cai et al., “Neighbor Cell Assisted Error Correction in MLC NAND Flash Memories,” in SIGMETRICS, 2014.
[9] J. Cha and S. Kang, “Data Randomization Scheme for Endurance Enhancement and Interference Mitigation of Multilevel Flash Memory Devices,” ETRI Journal, 2013.
[10] Charles Manning, “Yaffs NAND Flash Failure Mitigation,” 2012. http://www.yaffs.net/sites/yaffs.net/files/YaffsNandFailureMitigation.pdf
[11] J. Cooke, “The Inconvenient Truths of NAND Flash Memory,” Flash Memory Summit, 2007.
[12] R. H. Fowler and L. Nordheim, “Electron Emission in Intense Electric Fields,” in Proceedings of the Royal Society of London A: Mathematical, Physical and Engineering Sciences, 1928.
[13] H. H. Frost et al., “Efficient Reduction of Read Disturb Errors in NAND Flash Memory,” US Patent No. 7818525. 2010.
[14] L. M. Grupp et al., “Characterizing Flash Memory: Anomalies, Observations, and Applications,” in MICRO, 2009.
[15] K. Ha et al., “A Read-Disturb Management Technique for High-Density NAND Flash Memory,” in APSys, 2013.
[16] JEDEC Solid State Technology Assn., “Failure Mechanisms and Models for Semiconductor Devices,” Doc. No. JEP122G. 2011.
[17] J. Katcher, “Postmark: A New File System Benchmark,” Network Appliance, Tech. Rep. TR3022, 1997.
[18] C. Kim et al., “A 21 nm High Performance 64 Gb MLC NAND Flash Memory with 400 MB/s Asynchronous Toggle DDR Interface,” JSSC, 2012.
[19] Y. Kim et al., “Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors,” in ISCA, 2014.
[20] R. Koller and R. Rangaswami, “I/O Deduplication: Utilizing Content Similarity to Improve I/O Performance,” TOS, 2010.
[21] S. Lin and D. J. Costello, Error Control Coding. Prentice Hall, 2004.
[22] R.-S. Liu et al., “Duracache: A Durable SSD Cache Using MLC NAND Flash,” in DAC, 2013.
[23] R.-S. Liu et al., “Optimizing NAND Flash-Based SSDs via Retention Relaxation,” in FAST, 2012.
[24] N. Mielke et al., “Bit Error Rate in NAND Flash Memories,” in IRPS, 2008.
[25] V. Mohan et al., “reFresh SSDs: Enabling High Endurance, Low Cost Flash in Datacenters,” Univ. of Virginia, Tech. Rep. CS-2012-05, 2012.
[26] V. Mohan et al., “How I Learned to Stop Worrying and Love Flash Endurance,” in HotStorage, 2010.
[27] D. Narayanan et al., “Write off-Loading: Practical Power Management for Enterprise Storage,” TOS, 2008.
[28] Y. Pan et al., “Quasi-Nonvolatile SSD: Trading Flash Memory Non-volatility to Improve Storage System Performance for Enterprise Applications,” in HPCA, 2012.
[29] K.-T. Park et al., “A 7MB/s 64Gb 3-Bit/Cell DDR NAND Flash Memory in 20nm-Node Technology,” in ISSCC, 2011.
[30] R. Smith, “SSD Moving Rapidly to the Next Level,” Flash Memory Summit, 2014.
[31] Storage Network Industry Assn., “IOTTA Repository: Cello 1999.” http://iotta.snia.org/traces/21
[32] T. Sugahara and T. Furuichi, “Memory Controller for Suppressing Read Disturb When Data Is Repeatedly Read Out,” US Patent No. 8725952. 2014.
[33] K. Takeuchi et al., “A Negative Vth Cell Architecture for Highly Scalable, Excellently Noise-Immune, and Highly Reliable NAND Flash Memories,” IEEE Journal of Solid-State Circuits, 1999.
[34] Univ. of Massachusetts, “Storage: UMass Trace Repository.” http://tinyurl.com/k6golon

Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 09:16:06 UTC from IEEE Xplore. Restrictions apply.