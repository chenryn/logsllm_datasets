# Index Internals in PostgreSQL 9.5

## Presenter
Heikki Linnakangas / Pivotal

## Index Access Methods

PostgreSQL 9.5 supports several index access methods, including:
- B-tree
- GiST (Generalized Search Tree)
- GIN (Generalized Inverted Index)
- SP-GiST (Space-Partitioned GiST)
- BRIN (Block Range Index)
- (Hash)

### Heap Storage

Before diving into the index types, it's essential to understand the heap storage, which is the default storage method for tables in PostgreSQL.

- **Heap Structure**:
  - Stores all tuples in an unordered manner.
  - Divided into 8k blocks.
  - Each block contains multiple tuples.
  - TID (Tuple ID) uniquely identifies a tuple version within a block.

#### Example of Heap Storage
- **City Data**:
  - Copenhagen (Blk 0, Item 0)
  - Amsterdam (Blk 0, Item 1)
  - Berlin (Blk 0, Item 2)
  - Astana (Blk 0, Item 3)
  - Athens (Blk 1, Item 0)
  - Baku (Blk 1, Item 1)
  - Zagreb (Blk 1, Item 2)
  - Andorra la Vella (Blk 1, Item 3)
  - Bern (Blk 2, Item 0)
  - Helsinki (Blk 2, Item 1)
  - Brussels (Blk 2, Item 2)
  - Bucharest (Blk 2, Item 3)
  - Budapest (Blk 3, Item 0)
  - Chișinău (Blk 3, Item 1)
  - Ljubljana (Blk 3, Item 2)
  - Dublin (Blk 3, Item 3)
  - Kiev (Blk 4, Item 0)
  - Bratislava (Blk 4, Item 1)
  - Lisbon (Blk 4, Item 2)
  - Stockholm (Blk 4, Item 3)

### B-tree Index

- **Overview**:
  - Default index type.
  - Tuples are stored on pages, ordered by key.
  - Balanced tree structure with equal depth branches.
  - Supports efficient range queries and equality searches.

- **Example**:
  - **Single Page**:
    - Amsterdam (0, 12)
    - Ankara (4, 2)
    - Astana (1, 9)
    - Athens (4, 1)
    - Baku (3, 10)
    - Belgrade (2, 2)

  - **Leaf Level**:
    - Amsterdam (0, 12)
    - Ankara (4, 2)
    - Athens (4, 1)
    - Baku (3, 10)
    - Belgrade (2, 2)
    - Berlin (3, 9)
    - Bern (4, 3)
    - Bratislava (2, 3)
    - Brussels (0, 4)
    - Bucharest (0, 2)
    - Budapest (0, 3)
    - Copenhagen (1, 2)
    - Dublin (3, 2)
    - Helsinki (0, 1)
    - Kiev (1, 1)

  - **Two Levels**:
    - Root: Amsterdam, Ankara, Athens, Baku, Belgrade
    - Leaf: Berlin, Bern, Bratislava, Brussels, Bucharest, Budapest, Copenhagen, Dublin, Helsinki, Kiev

- **Details**:
  - Pages can be removed and recycled when empty.
  - Half-empty pages are not merged.
  - Free Space Map tracks unused pages.
  - Metapage at block 0 points to the root page and fast root.

### GIN Index

- **Overview**:
  - Optimized for storing a lot of duplicate keys.
  - Duplicates are ordered by heap TID.
  - Supports indexing multiple keys per indexed value.
  - Used for full-text search, arrays, and other multi-valued data.

- **Structure**:
  - **Entry Tree**: Contains keys and pointers to posting trees.
  - **Posting Tree**: Stores lists of heap TIDs.

- **Fast Updates**:
  - Insertions go to a list of "fast updated" tuples.
  - Moved to the index proper by VACUUM or if the list grows too large.
  - Can be disabled with `FASTUPDATE = off`.

### GiST Index

- **Overview**:
  - Generalized Search Tree.
  - No strict order within pages.
  - Key ranges can overlap.
  - Performance depends on user-defined Picksplit and Choose functions.

- **Example**:
  - **Single Page**:
    - [100, 150] (1, 10)
    - [1, 200] (0, 2)
    - [10, 60] (4, 2)
    - [30, 50] (4, 3)
    - [20, 70] (5, 1)
    - [110, 120] (2, 2)
    - [15, 30] (2, 1)
    - [105, 115] (3, 4)
    - [80, 90] (9, 2)
    - [25, 45] (8, 1)
    - [10, 20] (1, 7)

  - **Two Levels**:
    - Root: [1, 200], [80, 150], [10, 45]
    - Leaf: [100, 150], [110, 120], [105, 115], [80, 90], [25, 45], [15, 30], [10, 20]

- **Use Cases**:
  - GIS operations.
  - Finding points within a bounding box.
  - Nearest neighbor searches.
  - Full-text search.

### SP-GiST Index

- **Overview**:
  - Space-Partitioned GiST.
  - No overlap between nodes.
  - Variable depth.
  - Multiple nodes per physical page.

- **Example**:
  - **Trie Structure**:
    - MSTERDAM (4, 9)
    - A
    - NKARA (0, 2)
    - L GRADE (2, 3)
    - E
    - LIN (2, 1)
    - R
    - B N (0, 4)
    - CHAREST (1, 8)
    - U
    - DAPEST (3, 2)
    - H ELSINKI (0, 1)

- **Use Cases**:
  - Kd-tree for points.
  - Prefix tree for text.

### BRIN Index

- **Overview**:
  - Block Range Index.
  - Not a tree structure.
  - One entry per heap block or range of blocks.
  - Very compact.
  - Summary information for each block range.

- **Example**:
  - **Heap**:
    - Amsterdam, Andorra la Vella, Ankara, Astana, Athens, Baku, Belgrade, Berlin, Bern, Bratislava, Brussels, Bucharest, Budapest, Chișinău, Copenhagen, Dublin, Helsinki, Kiev, Lisbon, Ljubljana
  - **Index**:
    - 0: Amsterdam – Astana
    - 1: Athens – Berlin
    - 2: Bern – Bucharest
    - 3: Budapest – Dublin
    - 4: Helsinki – Ljubljana

- **Use Cases**:
  - Large tables with natural or accidental ordering.
  - Timestamp columns.
  - Store bounding boxes for points and shapes.
  - Bloom filters for efficient membership testing.

- **Caveats**:
  - Clustering is important; out-of-order tuples can degrade performance.
  - Always scans the whole index and heap page range.

### Summary

- **B-tree**:
  - Balanced tree structure.
  - Efficient for range and equality searches.
- **GIN**:
  - Optimized for duplicates.
  - Multiple keys per heap tuple.
- **GiST**:
  - Generalized search tree.
  - Loose ordering.
  - User-defined functions for performance.
- **SP-GiST**:
  - Space-partitioned GiST.
  - No overlap between nodes.
  - Variable depth.
- **BRIN**:
  - Block range index.
  - Compact and efficient for large, well-clustered data.
  - Degradation with out-of-order tuples.