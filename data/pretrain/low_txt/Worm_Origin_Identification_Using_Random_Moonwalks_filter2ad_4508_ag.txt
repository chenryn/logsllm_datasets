### Terms of Normal Host Out-Degree and Connection Locality

The out-degree of each normal host is defined as the size (denoted as \( k \)) of the contact set, which represents the set of destinations to which the host initiates flows under normal circumstances. Connection locality is modeled by assuming that each host selects destinations preferentially (within the contact set) according to either a uniform or power-law distribution.

Figure 18 illustrates the background traffic generated using different combinations of host out-degree and connection locality. All simulations were run with \( N \) nodes for 3000 seconds of simulated time. We introduced worm attacks lasting 500 seconds with a fixed propagation rate (\( \lambda \times \beta \)) that infect \( f \) fraction of hosts. Here, \( \lambda \) is the connection rate of an infected host (including normal connections), and \( \beta \) is the connection rate of a normal host. The resulting traces contained approximately 120 total flows, with 1222 causal flows. For each trace, we performed 121 random moonwalks and computed the detection accuracy of causal edges among the top 122 frequency flows returned.

Overall, the random moonwalks achieved high detection accuracy across all background traffic models. As expected, the power-law distribution of the host out-degree resulted in the best performance because the corresponding normal host contact graphs are sparse. The power-law distribution of connection locality had a similar impact, as each host tends to communicate more frequently with a few hosts within the contact set, leading to a relatively sparser host contact graph.

In contrast, uniform destination selection with a constant contact set size (i.e., \( k = c \) or \( k = N/10 \)) models random scanning background traffic and yields the worst performance.

### Deployment and Future Work

Similar to single-packet IP traceback [23], we envision an architecture where distributed collection points log flow records and corresponding timestamps, storing them in repositories for querying. In addition to source and destination IP addresses, each flow record contains an identifier to distinguish between two flows between the same source and destination at roughly the same time. For IPv4, this can be the 13-bit identifier field of the initial packet in the flow. Although not strictly necessary, this allows us to relax the degree of clock synchronization required among collection points and improve the accuracy of our search. At each individual collection point, we require that causally related flows be logged in their causal order and timestamped with a common clock.

A concern for traffic logging is whether the storage capacity required will be excessive. A back-of-the-envelope calculation in [21] suggests that the amount of flow-level storage required is feasible, even for a large Tier-1 ISP. Additionally, by the time a worm infection becomes pervasive, the most critical records for finding the attack origin have already been recorded.

Our approach is effective for attacks that propagate via "tree" structured communication patterns. Future work includes developing algorithms for post-mortem analysis of a broader class of attacks. Our current implementation assumes that the semantic direction of the flow is consistent with the network notion of flow directionality. Attacks may try to obfuscate the notion of causality among network flows. We are currently exploring ways to make the algorithm robust to such attacks. Our approach currently assumes the availability of complete data. It is likely that traffic auditing will be deployed incrementally across different networks. We are investigating the impact of missing data on performance and the potential for incremental deployment of the algorithm. Initial results in this direction have been promising.

### Conclusions

In this paper, we present the random moonwalk algorithm to identify the origin or entry point of epidemic spreading attacks by identifying the initial successful infection flows. Our approach explores the globally visible tree-like structure of worm propagation using flow-level records logged by the networks. By ignoring packet-level characteristics and attack signatures, our algorithm is potentially agnostic to attack-specific characteristics such as payload contents, port numbers used, or specific software vulnerabilities exploited. Our analysis, simulation-based experiments, and real trace studies demonstrate that the algorithm is effective in identifying causal relationships between initial infection events to reveal the worm origin with low false positive rates. We also demonstrated that the algorithm is robust to low-rate attacks trying to masquerade as normal traffic or smart scanning worms that may evade known scan-detection techniques.

### References

[1] P. Barford, J. Kline, D. Plonka, and A. Ron. A Signal Analysis of Network Traffic Anomalies. In Proc. of ACM SIGCOMM Internet Measurement Workshop, 2002.
[2] S. Bellovin, M. Leech, and T. Taylor. ICMP Traceback Messages. Internet draft, work in progress, 2001.
[3] CERT Advisory CA-2003-20: W32/Blaster worm. http://www.cert.org/advisories/CA-2003-20.html, 2003.
[4] A. Blum, D. Song, and S. Venkataraman. Detection of Interactive Stepping Stones: Algorithms and Confidence Bounds. In Proc. of The Seventh International Symposium on Recent Advances in Intrusion Detection (RAID), 2004.
[5] J. Browne. Probabilistic Design. http://www.ses.swin.edu.au/homes/browne/probabilisticdesign.
[6] H. Burch and B. Cheswick. Tracing Anonymous Packets to Their Approximate Source. In Proc. of USENIX LISA Systems Administration Conference, 2000.
[7] D. L. Donoho, A. G. Flesia, U. Shankar, V. Paxson, J. Coit, and S. Staniford-Chen. Multiscale Stepping-Stone Detection: Detecting Pairs of Jittered Interactive Streams by Exploiting Maximum Tolerable Delay. In Proc. of The 5th International Symposium on Recent Advances in Intrusion Detection (RAID), 2002.
[8] The Dragnet Project. http://www.cs.cmu.edu/~dragnet.
[9] P. Ferguson and D. Senie. RFC 2267 - Network Ingress Filtering: Defeating Denial of Service Attacks which employ IP Source Address Spoofing, 1998.
[10] A. Hussain, J. Heidemann, and C. Papadopoulos. A Framework for Classifying Denial of Service Attacks. In Proc. of ACM SIGCOMM, 2003.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 1081-6011/05 $ 20.00 IEEE
[11] J. Jung, V. Paxson, A. W. Berger, and H. Balakrishnan. Fast Portscan Detection Using Sequential Hypothesis Testing. In Proc. of IEEE Symposium on Security and Privacy, 2004.
[12] H. A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Signature Detection. In Proc. of 12th USENIX Security Symposium, 2004.
[13] C. Kreibich and J. Crowcroft. Honeycomb – Creating Intrusion Detection Signatures Using Honeypots. In Proc. of ACM HotNets-II, 2003.
[14] J. Kubica, A. Moore, D. Cohn, and J. Schneider. Finding Underlying Connections: A Fast Graph-Based Method for Link Analysis and Collaboration Queries. In Proc. of Twentieth International Conference on Machine Learning, 2003.
[15] J. Li, M. Sung, J. Xu, L. Li, and Q. Zhao. Large-scale IP Traceback in High-speed Internet: Practical Techniques and Theoretical Foundation. In Proc. of IEEE Symposium of Security and Privacy, 2004.
[16] D. Moore, G. M. Voelker, and S. Savage. Inferring Internet Denial-of-Service activity. In Proc. of 10th USENIX Security Symposium, 2001.
[17] V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. In Proc. of 7th USENIX Security Symposium, 1998.
[18] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Proc. of USENIX LISA Systems Administration Conference, 1999.
[19] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical Network Support for IP Traceback. In Proc. of ACM SIGCOMM, 2000.
[20] S. E. Schechter, J. Jung, and A. W. Berger. Fast Detection of Scanning Worm Infections. In Proc. of 7th International Symposium on Recent Advances in Intrusion Detection (RAID), 2004.
[21] V. Sekar, Y. Xie, D. Maltz, M. K. Reiter, and H. Zhang. Toward a Framework For Internet Forensic Analysis. In Proc. of ACM HotNets-III, 2004.
[22] A. Snoeren. Public review of ‘Toward a Framework for Internet Forensic Analysis’. In Proc. ACM HotNets-III, 2004.
[23] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E. Jones, F. Tchakountio, S. T. Kent, and W. T. Strayer. Hash-Based IP Traceback. In Proc. of ACM SIGCOMM, 2001.
[24] S. Staniford-Chen and L. T. Heberlein. Holding Intruders Accountable on the Internet. In Proc. of the IEEE Symposium on Security and Privacy, 1995.
[25] S. Staniford-Chen, V. Paxson, and N. Weaver. How to Own the Internet in Your Spare Time. In Proc. of 11th USENIX Security Symposium, 2002.
[26] X. Wang and D. Reeves. Robust Correlation of Encrypted Attack Traffic Through Stepping Stones by Manipulation of Inter-packet Delays. In Proc. of ACM Conference on Computer and Communications Security (CCS), 2003.
[27] R. J. Wonnacott and T. H. Wonnacott. Introductory Statistics. Fourth Edition.
[28] J. Wu, S. Vangala, L. Gao, and K. Kwiat. An Effective Architecture and Algorithm for Detecting Worms with Various Scan Techniques. In Proc. of Network and Distributed System Security Symposium (NDSS), 2004.
[29] Y. Zhang and V. Paxson. Detecting Stepping Stones. In Proc. of 9th USENIX Security Symposium, 2001.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 1081-6011/05 $ 20.00 IEEE

### Appendix: Probability Estimation in Section 6.2

An edge \( e = (u, v) \) can occur at different steps of a random moonwalk. We use \( P_e(t) \) to denote the probability of an edge at time \( t \) being traversed by the \( i \)-th step of a walk. Then we have \( P_e = \sum_{i=1}^{k} P_e(i) \).

We use \( O_u(t) \) to denote the number of concurrent outgoing flows from host \( u \) at time \( t \). With \( m \) edges in the host contact graph, we have:
\[ P_e(i, t) = \frac{1}{m} \cdot \frac{O_u(t)}{I_v(t)} \]

where \( I_v(t) \) is the number of incoming flows into host \( v \) at time \( t \). The above equation holds for any host contact graph without any assumptions. Under the uniform scanning assumption for both normal and attack traffic, a second-order approximation for \( \frac{O_u(t)}{I_v(t)} \) is:
\[ \frac{O_u(t)}{I_v(t)} \approx \frac{\lambda \cdot I_v(t)}{\mu \cdot N} \]

This approximation holds for large enough \( m \) and \( N \), since \( I_v(t) \) is binomially distributed.

Under the simplified assumptions discussed in Section 6.1, if \( e = (u, v) \) is a malicious-destination edge, we have \( O_u(t + \Delta t) = \lambda \), otherwise, \( O_u(t + \Delta t) = \mu \). Using the approximate form for \( I_v(t) \) above, for an edge at time \( t \) we have:
\[ P_e(i, t) = \frac{1}{m} \cdot \frac{\lambda \cdot I_v(t)}{\mu \cdot N} \]

By induction, we can easily show that for \( i \geq 2 \):
\[ P_e(i, t) = \left( \frac{\lambda}{\mu} \right)^{i-1} \cdot \frac{1}{m} \cdot \frac{I_v(t)}{N} \]

Taking the sum of all \( P_e(i, t) \) for \( i = 1, 2, \ldots, k \), we have:
\[ P_e(t) = \sum_{i=1}^{k} P_e(i, t) = \frac{1}{m} \cdot \frac{I_v(t)}{N} \cdot \sum_{i=1}^{k} \left( \frac{\lambda}{\mu} \right)^{i-1} \]

This provides a clear and concise way to estimate the probability of an edge being traversed in a random moonwalk.