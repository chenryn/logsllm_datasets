### AES Circuit and Performance Analysis

The AES circuit has a depth of 50, which means the online time cannot be less than 3750 ms in this setting. Our prototype is significantly more cost-effective compared to previous non-massively parallel implementations, and it has the potential to be even more cost-effective in a massively parallel setting, as all expensive steps can be executed in parallel. We emphasize that the offline/online setting is preferable to the batch setting because online executions can be run in isolation.

We tested our prototype on a weaker AWS instance, specifically c4.2xlarge, for AES computation. As expected, performance was generally worse than on a stronger instance, but for some parameters, the results were still quite close. This is primarily due to memory issues, which mainly affect the offline stage (our current implementation stores many garbled circuits in memory). The online times, however, were almost identical.

### Communication and Memory Usage

Communication in the offline stage primarily consists of the transmission of garbled circuits, while communication in the online stage is minimal. For example, with \( s = 40 \):
- For \( N = 32 \), about 260 MB are transmitted in the offline stage, and only about 312 KB per online execution.
- For \( N = 128 \), about 698 MB are transmitted in the offline stage, and only about 238 KB per online execution.
- For \( N = 1024 \), about 3850 MB are transmitted in the offline stage, and less than 170 KB per online execution.

For \( s = 80 \), these numbers are approximately double, as the number of circuits is also about double.

### Comparison with Related Work

We compare our results with those reported by previous works, leaving comprehensive benchmarking using similar hardware and network configurations to future work.

- **Cut-and-Choose Based 2PC**: The fastest published implementation of cut-and-choose based 2PC on standard machines (without massive parallelism) is from [2], which requires more than 6 seconds for a single secure computation of AES. [30] and [10] show how to reduce costs using massive parallelism, requiring only several tens of milliseconds per 2PC invocation. However, our protocol operates in the online/offline setting, while [2] and [10] work in the single-execution setting, and [30] works in the batch setting.
- **Other 2PC Protocols**: [26] and [7] present different 2PC protocols not based on the cut-and-choose technique. Both have an offline stage where parties work independently of their inputs, followed by a shorter online stage. These protocols require a number of interaction rounds dependent on the circuit depth. 
  - [26]: The overall online stage costs 4 seconds for a single AES computation, with the offline stage taking at least 1 second. For 135 computations, the total online time is 15 seconds, resulting in a low amortized time but high latency. The average total running time is at least 1.6 seconds.
  - [8]: Optimizations to [26] enable parallel AES executions, achieving an online time of 9962 ms for 680 AES operations, yielding a low average cost (about 14 ms per AES) but high latency.
  - [7]: The offline stage for AES computation takes about 156 seconds, and the online stage (with 50 rounds of communication) takes about 20 ms. Both [26] and [7] perform poorly in slower networks due to many communication rounds.

### Conclusion

Our protocol is better suited for settings where the function to be computed is known in advance. Additionally, [7] has two significant advantages: it can work with more than two parties and supports arithmetic circuits, which are more efficient for certain types of computations.

Since the first evaluation of cut-and-choose based 2PC in 2009, which required 1114 seconds for a single AES computation, numerous improvements have reduced the cost to 264 seconds [29], 6 seconds [2], and even 1.4 seconds [17] and 0.46 seconds [10] with massive parallelism. Our work continues this trend, showing further reductions using recent and new algorithmic improvements. When preprocessing 1024 executions, the average online time is less than 10 ms, and the amortized offline time is only 74 ms. These results are four orders of magnitude better than those from 2009.

We believe our results can be further improved with better multithreading and are currently working on modifying our prototype to use multiple cores and even machines in parallel. Future work will focus on optimizing and evaluating our protocol for GPUs.

### Acknowledgements

We thank Moriya Farbstein, Meital Levy, and Asaf Cohen for implementing the protocol and conducting extensive performance evaluations.

### References

[1] SCAPI, 2015. http://crypto.biu.ac.il/scapi and https://github.com/cryptobiu/scapi.
[2] A. Afshar, P. Mohassel, B. Pinkas, and B. Riva. Non-interactive secure computation based on cut-and-choose. In EUROCRYPT 2014, Springer (LNCS 8441), pages 387–404, 2014.
[3] G. Asharov, Y. Lindell, T. Schneier, and M. Zohner. More efficient oblivious transfer extensions with security for malicious adversaries. In EUROCRYPT 2015, Springer (LNCS 9056), pages 673–701, 2015.
[4] M. Bellare, V. T. Hoang, S. Keelveedhi, and P. Rogaway. Efficient garbling from a fixed-key blockcipher. In IEEE Symposium of Security and Privacy, 2013.
[5] M. Bellare, V. T. Hoang, and P. Rogaway. Adaptively secure garbling with applications to one-time programs and secure outsourcing. In ASIACRYPT 2012, Springer (LNCS 7658), pages 134–153, 2012.
[6] S. G. Choi, J. Katz, R. Kumaresan, and H.-S. Zhou. On the security of the “free-XOR” technique. In TCC, Springer (LNCS 7194), pages 39–53, 2012.
[7] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. Multiparty computation from somewhat homomorphic encryption. In CRYPTO 2012, Springer (LNCS 7417), pages 643–662, 2012.
[8] I. Damgård, R. Lauritsen, and T. Toft. An empirical study and some improvements of the minimac protocol for secure computation. In SCN 2014, Springer (LNCS 8642), pages 398–415, 2014.
[9] Y. Ejgenberg, M. Farbstein, M. Levy, and Y. Lindell. SCAPI: The secure computation application programming interface. Cryptology ePrint Archive, Report 2012/629, 2012. http://eprint.iacr.org/.
[10] T. K. Frederiksen, T. P. Jakobsen, and J. B. Nielsen. Faster maliciously secure two-party computation using the GPU. Cryptology ePrint Archive, Report 2014/270, 2014. http://eprint.iacr.org/.
[11] T. K. Frederiksen and J. B. Nielsen. Fast and maliciously secure two-party computation using the GPU. In ACNS 2013, Springer (LNCS 7954), pages 339–356, 2013.
[12] O. Goldreich and E. Kushilevitz. A perfect zero-knowledge proof system for a problem equivalent to the discrete logarithm. In Journal of Cryptology, 6(2):97–116, 1993.
[13] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In the 19th ACM STOC, pages 218–229, 1987.
[14] Y. Huang, J. Katz, and D. Evans. Efficient secure two-party computation using symmetric cut-and-choose. In CRYPTO 2013, Springer (LNCS 8043), pages 18–35, 2013.