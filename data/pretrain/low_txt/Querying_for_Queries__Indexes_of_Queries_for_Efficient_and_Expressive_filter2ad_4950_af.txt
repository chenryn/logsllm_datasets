### Optimized Text

Our implementations support Sparse Matrix-Vector (SpMV) multiplication in the binary fields \( \text{GF}(2^8) \) and \( \text{GF}(2^{16}) \), as well as in \( \mathbb{Z}_q \) for arbitrary multi-precision prime moduli \( q \). For fast binary field arithmetic, we utilize lookup tables and exclusive-OR operations. For prime-order field arithmetic, our GPU code employs a hand-optimized PTX implementation of "schoolbook" multiplication/addition combined with Barrett reduction [1], while our CPU implementation delegates arithmetic to NTL [26] and GMP [11]. Our implementations are licensed under version 2 of the GNU General Public License (GPLv2) and are currently being integrated into Percy++ [14], an open-source implementation of Goldberg’s IT-PIR protocol.

Numerous efficient CUDA-based SpMV multiplication implementations already exist, but most assume that the entries are floating-point numbers. Adapting these to perform integer arithmetic modulo a 32-bit word-size prime is relatively straightforward. However, for optimal PIR performance, we require support for SpMV multiplication over small binary fields and/or over prime-order fields with multiple-precision prime moduli. Benchmarks on Percy++, an open-source implementation of Goldberg’s PIR protocols, indicate that PIR over small binary fields is the fastest, followed by PIR over prime-order fields with moduli ≥ 128 bits long. For example, we observed a 3.5× speedup when switching from a 32-bit modulus to a 1024-bit modulus.

### Experiments

We conducted two sets of experiments. The first set involved microbenchmarks designed to measure the latency imposed by routing PIR queries through an index of queries before conducting a positional query against the actual database. The second set evaluated the feasibility of deploying our techniques on a real-world dataset, specifically, the IACR Cryptology ePrint Archive [19].

#### 7.1 SpMV Microbenchmarks

For the first set of experiments, we generated a large number of random u-batch indexes of queries for various choices of \( u \), index dimensions, and finite fields. We then measured the number of SpMV operations per second, either as a massively parallel computation on our Nvidia K20 GPU Accelerator or as a single-threaded computation on our Intel Core i5-2500 CPU. The results were as expected—our SpMV multiplications consistently ran extremely fast, even with large query index dimensions.

As anticipated, varying the height of the index (\( p \)) and the batching parameter (\( u \)) had minimal impact on throughput for our GPU implementation, whereas the throughput decreased linearly with \( pu \) for our CPU implementation. Figure 2 illustrates the measurements obtained from one representative set of parameters: a sequence of indexes of 4-batch queries with \( p = 2^{14} \) rows and mapping to databases \( D \) with between \( r = 2^{14} \) and \( r = 2^{20} \) blocks. In all cases, our GPU implementation processed well over a thousand requests per second, with memory bandwidth to and from the GPU being the bottleneck. Our CPU implementation processed between a few hundred (for \( r = 2^{20} \)) and a few thousand (for \( r = 2^{14} \)) requests per second in the binary fields and on the order of a few dozen requests per second in large prime-order fields. Increasing \( r \) resulted in a roughly linear decrease in throughput, with a slope inversely proportional to the cost of a single field operation.

For comparison, processing a single positional query using fast arithmetic in \( \text{GF}(2^8) \) took just over 1.4 seconds per GiB of database (using a single thread), with other fields taking notably longer. Thus, we conclude that, even in the worst cases, indexes of queries introduce no significant latency to PIR requests (and, when \( p \ll r \), they may significantly speed up subsequent PIR processing by producing positional queries with small support).

#### 7.2 IACR Cryptology ePrint Archive

For the second set of experiments, we created a dataset by scraping the IACR Cryptology ePrint Archive [19], an open-access repository providing rapid access to recent research in cryptology. We scraped metadata (paper ID, title, author list, submission date, keywords, and file size) for 10,181 papers (excluding 60 papers with inconsistently formatted metadata). We also scraped citation counts for each paper from Google Scholar [15].

Using this data, we constructed a "synthetic ePrint" database, where the \( i \)-th row holds a random bitstring whose length equals the file size of the \( i \)-th paper in the actual ePrint dataset (padded with zeros to the length of the largest paper). The largest paper was 19.3 MiB, but only 56 out of the 10,181 papers exceeded 4.69 MiB. We pruned these 56 papers, resulting in a dataset of 10,125 papers and a 46.35 GiB database (including zero-padding) of chronologically sorted "synthetic ePrint papers" that users can fetch using IT-PIR queries.

We constructed histograms to determine (i) the total number of papers associated with each keyword and (ii) the total number of papers by each author. We identified 1,005 unique keywords associated with five or more distinct papers each and 1,750 unique authors associated with four or more distinct papers each within the pruned dataset. We then created four different indexes of 4-batch queries over \( \text{GF}(2^8) \) to support requests for the "4 most highly cited" and the "4 most recently posted" ePrint papers for each keyword and author.

We performed two types of experiments for each of the four indexes of queries. Table 1 summarizes the results, including the time required to generate and the storage requirements for each index of queries. First, we measured the total number of requests per second that both our Nvidia Tesla K20 GPU Accelerator and our Intel Core i5-2550 CPU could process. Given their small dimensions and the choice of working over \( \text{GF}(2^8) \), we achieved over 49,000 queries per second on the GPU and over 20,000 queries per second on a single core of the CPU. Second, we measured the total time required to retrieve a random paper from the dataset using a positional query output by each of the four indexes of queries. Queries by keyword took around 19 seconds on average, whereas queries by author took around 33 seconds on average. By contrast, positional PIR queries over the entire database took nearly 70 seconds on average. These measurements suggest that indexes of queries can be a useful building block in constructing practical PIR-based systems for datasets on the order of tens of GiB.

### Conclusion and Future Work

We proposed indexes of queries, a novel mechanism for supporting efficient and expressive, single-round queries over multi-server PIR databases. Our approach decouples the way users construct their queries from the physical layout of the database, enabling users to retrieve information using contextual queries that specify which data they seek, rather than position-based queries. We demonstrated the feasibility of at least one promising application of our indexes-of-queries approach and proposed several other compelling possibilities, which present exciting opportunities for future work.

Another potential avenue for future work is to explore the index of queries approach as it applies to other vector-matrix PIR protocols, which may lead to additional useful instantiations (e.g., eliminating non-collusion assumptions and compressing queries by settling for computational privacy). It would also be interesting to explore how other families of batch codes might yield alternative constructions for batch indexes of queries and indexes of batch queries, offering different tradeoffs or compatibility with a wider range of PIR protocols.

### Acknowledgements

This material is based upon work supported in part by the National Science Foundation under Grant No. 1718475, by Lilly Endowment, Inc., through its support for the Indiana University Pervasive Technology Institute, and by the Indiana METACyt Initiative. The Indiana METACyt Initiative at IU is also supported in part by Lilly Endowment, Inc.

### References

[1] Paul Barrett. Implementing the Rivest Shamir and Adleman public key encryption algorithm on a standard digital signal processor. In Advances in Cryptology: Proceedings of CRYPTO 1986, volume 263 of LNCS, pages 311–323, Santa Barbara, CA, USA (August 1987).

[2] Simon Blackburn and Tuvi Etzion. PIR array codes with optimal PIR rate. arXiv:CoRR, abs/1607.00235 (July 2016).

[3] Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret sharing. In Advances in Cryptology: Proceedings of EUROCRYPT 2015 (Part II), volume 9057 of LNCS, pages 337–367, Sofia, Bulgaria (April 2015).

[4] Elette Boyle, Niv Gilboa, and Yuval Ishai. Breaking the circuit size barrier for secure computation under DDH. In Advances in Cryptology: Proceedings of CRYPTO 2016 (Part I), volume 9814 of LNCS, pages 509–539, Santa Barbara, CA, USA (August 2016).

[5] Elette Boyle, Niv Gilboa, and Yuval Ishai. Function secret sharing: Improvements and extensions. In Proceedings of CCS 2016, pages 1292–1303, Vienna, Austria (October 2016).

[6] Terence H. Chan, Siu-Wai Ho, and Hirosuke Yamamoto. Private information retrieval for coded storage. In Proceedings of ISIT 2015, pages 2842–2846, Hong Kong (June 2015).

[7] Benny Chor, Niv Gilboa, and Moni Naor. Private information retrieval by keywords. Technical Report CS 0917, Technion-Israel Institute of Technology, Haifa, Israel (February 1997).

[8] Henry Cohn and Nadia Heninger. Approximate common divisors via lattices. In Proceedings of ANTS X (2012), volume 1, number 1 of The Open Book Series, pages 271–293, San Diego, CA, USA (July 2012).

[9] Nvidia Corporation. Tesla® Keplertm GPU Accelerators. http://www.nvidia.com/content/tesla/pdf/Tesla-KSeries-Overview-LR.pdf. (Accessed: February 16, 2017).

[10] Casey Devet, Ian Goldberg, and Nadia Heninger. Optimally robust private information retrieval. In Proceedings of USENIX Security 2012, pages 269–283, Bellevue, WA, USA (August 2012).

[11] Torbjörn Granlund et al. GNU multiple precision arithmetic library; version 6.1.2 [computer software]. Available from: https://gmplib.org/ (December 2016).

[12] Arman Fazeli, Alexander Vardy, and Eitan Yaakobi. Codes for distributed PIR with low storage overhead. In Proceedings of ISIT 2015, pages 2852–2856 (June 2015).

[13] Ian Goldberg. Improving the robustness of private information retrieval. In Proceedings of IEEE S&P 2007, pages 131–148, Oakland, CA, USA (May 2007).

[14] Ian Goldberg, Casey Devet, Wouter Lueks, Ann Yang, Paul Hendry, and Ryan Henry. Percy++ / PIR in C++; version 1.0 [computer software]. Available from: git://git-crysp.uwaterloo.ca/percy (October 2014).

[15] Google Scholar. https://scholar.google.com/. (Accessed: February 16, 2017).

[16] Ryan Henry. Polynomial batch codes for efficient IT-PIR. In Proceedings on Privacy Enhancing Technologies (PoPETS), volume 2016(4), pages 202–218, Darmstadt, Germany (July 2016).

[17] Ryan Henry, Kevin Henry, and Ian Goldberg. Making a Nymbler Nymble using VERBS. In Proceedings of PETS 2010, volume 6205 of LNCS, pages 111–129, Berlin, Germany (July 2010).

[18] Ryan Henry, Yizhou Huang, and Ian Goldberg. One (block) size fits all: PIR and SPIR with variable-length records via multi-block queries. In Proceedings of NDSS 2013, San Diego, CA, USA (February 2013).

[19] IACR Cryptology ePrint Archive. https://eprint.iacr.org/. (Accessed: February 10, 2017).

[20] Arvind Narayanan and Vitaly Shmatikov. Myths and fallacies of “personally identifiable information”. Communications of the ACM (CACM), 53(6):24–26 (June 2010).

[21] Femi G. Olumofin and Ian Goldberg. Privacy-preserving queries over relational databases. In Proceedings of PETS 2010, volume 6205 of LNCS, pages 75–92, Berlin, Germany (July 2010).

[22] Joel Reardon, Jeffrey Pound, and Ian Goldberg. Relational-complete private information retrieval. Technical Report CACR 2007-34, University of Waterloo, Waterloo, ON, Canada (December 2007).

[23] Irving S. Reed and Gustav Solomon. Polynomial codes over certain finite fields. Journal of the Society for Industrial and Applied Mathematics (SIAM), 8(2):300–304 (June 1960).

[24] Len Sassaman, Bram Cohen, and Nick Mathewson. The Pynchon Gate: A secure method of pseudonymous mail retrieval. In Proceedings of WPES 2005, pages 1–9, Alexandria, VA, USA (November 2005).

[25] Adi Shamir. How to share a secret. Communications of the ACM (CACM), 22(11):612–613 (November 1979).

[26] Victor Shoup. NTL: A library for doing number theory; version 10.5.0 [computer software]. Available from: http://www.shoup.net/ntl (July 2017).

[27] Frank Wang, Catherine Yun, Shafi Goldwasser, Vinod Vaikuntanathan, and Matei Zaharia. Splinter: Practical private queries on public data. In Proceedings of NSDI 2017, pages 299–313, Boston, MA, USA (March 2017).