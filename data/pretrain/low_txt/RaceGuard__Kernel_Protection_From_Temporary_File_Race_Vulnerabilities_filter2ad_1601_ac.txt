### Experimental Error Analysis

The observed differences within the tests exceeded those between the tests, indicating that this can be regarded as experimental error. We attribute this to the fact that the cost of creating a non-existent file is largely influenced by the state of the file system on disk.

### Fork: RaceGuard Cache Overhead Measurement

To measure the overhead of copying the RaceGuard cache, we conducted a test that exhibited significant variances. To address this, we enhanced the measurement by running the test 100 times and taking the average. The variance was present in both the RaceGuard and non-RaceGuard tests, suggesting that it was not induced by RaceGuard.

### Stat’ing Non-Existent Files

There is substantial overhead only when stat'ing non-existent files, but this cost is overshadowed by the cost of creating files. In a real workload, this operation does not represent a large amount of time, as demonstrated in our macrobenchmarks in Section 6.2.

### 6.2 Macrobenchmarks

To stress-test RaceGuard at the macro level, we selected applications that incurred a substantial amount of run time, used many temporary files, and performed extensive forking.

#### Khernelstone Test

Our first test, the Khernelstone, measures the time to build the SRPM of the Linux kernel, which involves building the kernel from its 1800 C and assorted assembly source files multiple times. This test incorporates several thousand forks and temporary files. It was run on a single-processor 700 MHz Athlon machine with 128 MB of RAM.

We ran this test four times each with and without RaceGuard. The results showed very little variation. The averages of the four runs are shown in Table 2. In all cases (real time, user time, and system time), the overhead due to RaceGuard was always below 0.5%.

| **Without RaceGuard** | **With RaceGuard** | **%Overhead** |
|-----------------------|--------------------|---------------|
| **Real Time**         | 10,700             | 10,742        | 0.4%          |
| **User Time**         | 901                | 904           | 0.3%          |
| **System Time**       | 8,838              | 8,858         | 0.2%          |

#### Apache Web Server Test

Our second macrobenchmark involved the Apache web server [3] measured using the Webstone benchmark tool [16]. Webstone simulates various web server workloads, varying the number of concurrent clients and the size of requests. It measures factors such as connection latency, and server throughput in terms of connections per second and bytes per second. The web server machine used for this test was a dual-processor 700 MHz Pentium III with 256 KB of cache, 256 MB of RAM, and a 100 Mbit network to the client.

We ran the Webstone test through a range from 25 concurrent clients to 200 concurrent clients. While performance varied substantially across this range, the difference between the RaceGuard and non-RaceGuard cases was always within the noise. Each test case was run three times, and whenever one test run showed one of the cases to be ahead, another test case showed the opposite. In almost all cases, the RaceGuard average was within the non-RaceGuard average ± the non-RaceGuard standard deviation. There were only three instances where the RaceGuard average was outside the deviation, and in each of these, RaceGuard performed slightly better.

### Conclusions from Macrobenchmarks

From these tests, we draw two conclusions:
1. They are not particularly effective at highlighting the costs of RaceGuard.
2. More importantly, they show that the performance overhead of RaceGuard is imperceptible for common, heavy workloads.

### 7. Related Work

The study of temporary file race vulnerabilities has a long history. Abbott et al. [1] and Bisbey & Hollingsworth [5] described them as a subclass of timing or synchronization flaws. Despite extensive past research, practical solutions are still needed, as temporary file race vulnerabilities have been found in core Internet infrastructure tools like Apache in 2001 [13].

Bishop’s seminal paper [6] formally defined TOCTTOU (Time Of Check To Time Of Use) errors as sequential events where the second depends on the first, with a faulty assumption that the results of the first operation will persist to the second. Bishop proposed a partial solution in the form of a program scanning tool to detect potential TOCTTOU vulnerabilities in C code, but also showed that static detection of TOCTTOU flaws is undecidable.

Bishop discussed the possibility of a runtime TOCTTOU detector that modifies system call interfaces to track arguments and associations of file descriptors and names, similar to RaceGuard. However, Bishop did not elaborate on this proposal due to performance concerns. RaceGuard overcomes these performance difficulties by narrowing the scope and duration of the information to be tracked, demonstrating that near-precise file system race attacks can be detected at runtime with very low performance costs.

“Solar Designer” [10] takes a different approach by enhancing the Linux kernel to restrict processes from following links in directories with the +t (“sticky”) bit set unless the owner is trusted, and preventing processes from creating hard links to files they do not own. While effective in many cases, this approach gets mixed results, as some programs create temporary files in other file systems and some insist on linking to files they do not own.

### 8. Conclusions

Temporary file race vulnerabilities have been a pervasive security problem for over a decade. Safe methods for creating temporary files exist but are not portable, leading common programs to use vulnerable-but-portable methods like `mktemp`. RaceGuard protects vulnerable programs against this problem, even if they use unsafe means, and regardless of whether they use an unsafe library or a custom method. We have shown that RaceGuard is effective in stopping attacks and imposes minimal compatibility and performance overhead. RaceGuard is available as a GPL’d patch to the Linux kernel and is incorporated into WireX’s Immunix server products.

### References

[1] R.P. Abbott, J.S. Chin, J.E. Donnelley, W.L. Konigsford, S. Tokubo, and D.A. Webb. Security Analysis and Enhancements of Computer Operating Systems. NSBIR 76-1041, National Bureau of Standards, April 1976.

[2] Assorted. GNU Diffutils. http://www.gnu.org/software/diffutils/, June 2000.

[3] Brian Behlendorf, Roy T. Fielding, Rob Hartill, David Robinson, Cliff Skolnick, Randy Terbush, Robert S. Thau, and Andrew Wilson. Apache HTTP Project. http://www.apache.org.

[4] Brian Berliner, David D 'Zoo' Zuhn, Jeff Polk, and System. Concurrent Versions. http://www.cyclic.com/, 1999.

[5] R. Bisbey and D. Hollingsworth. Protection Analysis Project Final Report. Technical Report ISI/RR–78-13, USC/Information Sciences Institute, May 1978. DTICAD A 056816.

[6] M. Bishop and M. Digler. Checking for Race Conditions in File Accesses. Computing Systems, 9(2):131–152, Spring 1996. Also available at http://olympus.cs.ucdavis.edu/bishop/scriv/index.html.

[7] Crispin Cowan, Matt Barringer, Steve Beattie, Greg Kroah-Hartman, Mike Frantzen, and Jamie Lokier. FormatGuard: Automatic Protection From printf Format String Vulnerabilities. In USENIX Security Symposium, Washington, DC, August 2001.

[8] Crispin Cowan, Steve Beattie, Calton Pu, Perry Wagle, SubDomain: Parsimonious Server Security. In USENIX 14th Systems Administration Conference (LISA), New Orleans, LA, December 2000.

[9] Crispin Cowan, Perry Wagle, Calton Pu, Steve Beattie, and Jonathan Walpole. Buffer Overflows: Attacks and Defenses for the Vulnerability of the Decade. In DARPA Information Survivability Conference and Expo (DISCEX), January 2000. Also presented as an invited talk at SANS 2000, March 23-26, Orlando, FL, http://schafercorp-ballston.com/discex.

[10] “Solar Designer”. Root Programs and Links. http://www.openwall.com/linux/.

[11] Mendel Rosenblum et al. VMWare. http://www.vmware.com/, February 1998.

[12] Tomasz Kloczko. Shadow Utilities. http://freshmeat.net/projects/shadow/, October 2000.

[13] Greg Kroah-Hartman. Immunix OS Security update for lots of temp file problems. Bugtraq mailing list, http://www.securityfocus.com/archive/1/155417, January 10, 2001.

[14] MagniComp. RDist. http://www.magnicomp.com/rdist/, July 1999.

[15] RCS Maintainers. RCS: Revision Control System. http://www.cs.purdue.edu/homes/trinkle/RCS/, December 2000.

[16] Mindcraft. WebStone Standard Web Server Benchmark. http://www.mindcraft.com/webstone/.

[17] Jerome H. Saltzer and Michael D. Schroeder. The Protection of Information in Computer Systems. Proceedings of the IEEE, 63(9), November 1975.

[18] Securityfocus.com. Vulnerability Search. http://search.securityfocus.com/search.html, 1997-2001.

[19] Sam Varshavchik. Courier Mail Transfer Agent. http://www.courier-mta.org/, 1999.

[20] Reinhold P. Weicker. Dhrystone: A Synthetic Systems Benchmark. Communications of the ACM, 27(10):1013–1030, October 1984.