### Contents

**Chapter: Caching and Memory Management**

- **Virtual Block Caching** ................................................ 569
- **Stream-Based Caching** ............................................... 569
- **NTFS MFT Working Set Enhancements** .................... 571
- **Memory Partitions Support** ........................................ 571
- **Cache Virtual Memory Management** .......................... 572
- **Cache Size** ..................................................................... 574
- **Cache Virtual Size** ....................................................... 574
- **Cache Working Set Size** .............................................. 574
- **Cache Physical Size** .................................................... 574
- **Cache Data Structures** ............................................... 576
  - **Systemwide Cache Data Structures** ........................ 576

**File System Interfaces**

- **Copying to and from the Cache** ................................. 584
- **Caching with the Mapping and Pinning Interfaces** .... 584
- **Caching with the Direct Memory Access Interfaces** ... 584
- **Fast I/O** .......................................................................... 585
- **Read-Ahead and Write-Behind** ................................... 586
  - **Intelligent Read-Ahead** ........................................... 587
  - **Read-Ahead Enhancements** ................................... 588
  - **Write-Back Caching and Lazy Writing** ................... 589
- **Forcing the Cache to Write Through to Disk** ........... 595
- **Write Throttling** ........................................................... 596
- **System Threads** ........................................................... 597
- **Aggressive Write Behind and Low-Priority Lazy Writes** 598
- **Dynamic Memory** ....................................................... 599
- **Cache Manager Disk I/O Accounting** ........................ 600

**File Systems**

- **Overview** ....................................................................... 602
- **CDFS** ............................................................................ 602
- **UDF** ............................................................................... 603
- **FAT12, FAT16, and FAT32** ........................................... 603
- **exFAT** ............................................................................ 606
- **NTFS** ............................................................................. 606
- **ReFS** .............................................................................. 608
- **File System Driver Architecture** ................................. 608
  - **Local FSDs** ................................................................. 608
  - **Remote FSDs** ............................................................ 610
- **File System Operations** ............................................. 618

**Advanced Features of NTFS**

- **Multiple Data Streams** ............................................... 631
- **Unicode-Based Names** ............................................... 633
- **General Indexing Facility** .......................................... 633
- **Dynamic Bad-Cluster Remapping** ............................. 633
- **Hard Links** .................................................................... 634
- **Symbolic (Soft) Links and Junctions** ........................... 634
- **Change Logging** .......................................................... 637
- **Per-User Volume Quotas** ........................................... 638
- **Link Tracking** .............................................................. 639
- **Encryption** ................................................................... 640
- **POSIX-Style Delete Semantics** ................................. 641
- **Defragmentation** ......................................................... 643
- **Dynamic Partitioning** ................................................ 646
- **NTFS Support for Tiered Volumes** ............................ 647

**NTFS On-Disk Structure**

- **Volumes** ......................................................................... 655
- **Clusters** ......................................................................... 655
- **File Record Numbers** .................................................. 660
- **File Records** ................................................................. 661
- **File Names** ................................................................... 664
- **Tunneling** ..................................................................... 666
- **Resident and Nonresident Attributes** ........................ 667

**Compression and Sparse Data**

- **Compressing Sparse Data** .......................................... 671
- **Compressing Nonsparse Data** ................................... 673
- **Indexing** ....................................................................... 679
- **Object IDs** .................................................................... 681
- **Quota Tracking** ........................................................... 681
- **Consolidated Security** ............................................... 682
- **Reparse Points** ............................................................ 684
- **Storage Reserves and NTFS Reservations** ................ 685
- **Transaction Support** ................................................... 688
  - **Isolation** ..................................................................... 689
  - **Transactional APIs** ................................................... 690
  - **On-Disk Implementation** .......................................... 691
  - **Logging Implementation** ......................................... 693

**NTFS Recovery Support**

- **Design** .......................................................................... 694
- **Metadata Logging** ....................................................... 695
- **Log Record Types** ....................................................... 697
- **Recovery** ...................................................................... 699
  - **Analysis Pass** ............................................................ 700
  - **Redo Pass** ................................................................... 701
  - **Undo Pass** ................................................................... 701
- **NTFS Bad-Cluster Recovery** ...................................... 703
- **Self-Healing** ............................................................... 706
- **Online Check-Disk and Fast Repair** ........................... 707

**Direct Access (DAX) Disks**

- **DAX Driver Model** ...................................................... 721
- **DAX Volumes** ............................................................. 722
- **Cached and Noncached I/O in DAX Volumes** ........... 723
- **Mapping of Executable Images** ................................. 724
- **Block Volumes** ............................................................ 728
- **Flushing DAX Mode I/Os** .......................................... 731
- **Large and Huge Pages Support** ................................. 732
- **Virtual PM Disks and Storage Spaces Support** ......... 736

**Resilient File System (ReFS)**

- **Minstore Architecture** ................................................ 740
- **B+ Tree Physical Layout** ........................................... 742
- **Allocators** .................................................................... 743
- **Page Table** ................................................................... 745
- **Minstore I/O** ............................................................... 746
- **ReFS Architecture** ...................................................... 748
- **ReFS On-Disk Structure** ............................................ 751
- **Object IDs** .................................................................... 752
- **Security and Change Journal** ................................... 753
- **ReFS Advanced Features** .......................................... 754
  - **File’s Block Cloning (Snapshot Support) and Sparse VDL** 754
  - **ReFS Write-Through** ................................................ 757
  - **ReFS Recovery Support** .......................................... 759
  - **Leak Detection** ......................................................... 761
  - **Shingled Magnetic Recording (SMR) Volumes** ....... 762
  - **ReFS Support for Tiered Volumes and SMR** .......... 764
  - **Container Compaction** ........................................... 766
  - **Compression and Ghosting** ..................................... 769

**Storage Spaces**

- **Spaces Internal Architecture** ..................................... 771
- **Services Provided by Spaces** .................................... 772

**Conclusion** .................................................................... 776

**Chapter 12: Startup and Shutdown**

- **Boot Process** ................................................................ 777
  - **The UEFI Boot** ........................................................... 777
  - **The BIOS Boot Process** ............................................ 781
  - **Secure Boot** ............................................................... 781
  - **The Windows Boot Manager** ................................... 785
  - **The Boot Menu** ......................................................... 799
  - **Launching a Boot Application** ................................. 800
  - **Measured Boot** .......................................................... 801
  - **Trusted Execution** ..................................................... 805
  - **The Windows OS Loader** ........................................ 808
  - **Booting from iSCSI** .................................................. 811
  - **The Hypervisor Loader** ........................................... 811
  - **VSM Startup Policy** ................................................. 813
  - **The Secure Launch** .................................................. 816
  - **Initializing the Kernel and Executive Subsystems** ... 818
  - **Kernel Initialization Phase 1** ................................. 824
  - **Smss, Csrss, and Wininit** ....................................... 830
  - **ReadyBoot** .................................................................. 835
  - **Images that Start Automatically** .............................. 837
  - **Shutdown** ................................................................... 837
  - **Hibernation and Fast Startup** .................................. 840
  - **Windows Recovery Environment (WinRE)** ............. 845
  - **Safe Mode** .................................................................. 847
    - **Driver Loading in Safe Mode** .............................. 848
    - **Safe-Mode-Aware User Programs** ...................... 849
- **Conclusion** .................................................................... 850

**Contents of Windows Internals, Seventh Edition, Part 1** ........................ 851
**Index** ................................................................................ 861

### About the Authors

**ANDREA ALLIEVI**

Andrea Allievi is a system-level developer and security research engineer with over 15 years of experience. He graduated from the University of Milano-Bicocca in 2010 with a bachelor’s degree in computer science. For his thesis, he developed a Master Boot Record (MBR) Bootkit entirely in 64-bits, capable of defeating all the Windows 7 kernel protections (PatchGuard and Driver Signing enforcement). Andrea is also a reverse engineer specializing in operating systems internals, from kernel-level code to user-mode code. He has published multiple PatchGuard bypasses and many other research papers and articles. He is the author of multiple system tools and software used for removing malware and advanced persistent threats.

In his career, he has worked in various computer security companies, including Italian TgSoft, Saferbytes (now MalwareBytes), and Talos group of Cisco Systems Inc. He joined Microsoft in 2016 as a security research engineer in the Microsoft Threat Intelligence Center (MSTIC) group. Since January 2018, Andrea has been a senior core OS engineer in the Kernel Security Core team of Microsoft, where he mainly maintains and develops new features (like Retpoline or the Speculation Mitigations) for the NT and Secure Kernel.

Andrea continues to be active in the security research community, authoring technical articles on new kernel features of Windows in the Microsoft Windows Internals blog, and speaking at multiple technical conferences, such as Recon and Microsoft BlueHat. Follow Andrea on Twitter at @aall86.

**ALEX IONESCU**

Alex Ionescu is the vice president of endpoint engineering at CrowdStrike, Inc., where he started as its founding chief architect. Alex is a world-class security architect and consultant expert in low-level system software, kernel development, security training, and reverse engineering. Over more than two decades, his security research work has led to the repair of dozens of critical security vulnerabilities in the Windows kernel and its related components, as well as multiple behavioral bugs.

Previously, Alex was the lead kernel developer for ReactOS, an open-source Windows clone written from scratch, for which he wrote most of the Windows NT-based subsystems. During his studies in computer science, Alex worked at Apple on the iOS kernel, boot loader, and drivers on the original core platform team behind the iPhone, iPad, and AppleTV. Alex is also the founder of Winsider Seminars & Solutions, Inc., a company that specializes in low-level system software, reverse engineering, and security training for various institutions.

Alex continues to be active in the community and has spoken at more than two dozen events around the world. He offers Windows Internals training, support, and resources to organizations and individuals worldwide. Follow Alex on Twitter at @aionescu and his blogs at www.alex-ionescu.com and www.windows-internals.com/blog.

### Foreword

Having used and explored the internals of the wildly successful Windows 3.1 operating system, I immediately recognized the world-changing nature of Windows NT 3.1 when Microsoft released it in 1993. David Cutler, the architect and engineering leader for Windows NT, had created a version of Windows that was secure, reliable, and scalable, but with the same user interface and ability to run the same software as its older yet more immature sibling. Helen Custer’s book "Inside Windows NT" was a fantastic guide to its design and architecture, but I believed there was a need for and interest in a book that went deeper into its working details. 

I was inspired by the depth and detail of "VAX/VMS Internals and Data Structures," and I decided to write the Windows NT version of that book. To learn about Windows NT, I read documentation, reverse-engineered its code, and wrote systems monitoring tools like Regmon and Filemon, which helped me understand the design by coding them and using them to observe the under-the-hood views they gave me of Windows NT’s operation. As I learned, I shared my newfound knowledge in a monthly “NT Internals” column in Windows NT Magazine, the magazine for Windows NT administrators. Those columns would serve as the basis for the chapter-length versions that I’d publish in "Windows Internals," the book I’d contracted to write with IDG Press.

My book deadlines came and went because my book writing was further slowed by my full-time job and time I spent writing Sysinternals (then NTInternals) freeware and commercial software for Winternals Software, my startup. Then, in 1996, I had a shock when Dave Solomon published "Inside Windows NT, 2nd Edition." I found the book both impressive and depressing. A complete rewrite of Helen’s book, it went deeper and broader into the internals of Windows NT like I was planning on doing, and it incorporated novel labs that used built-in tools and diagnostic utilities from the Windows NT Resource Kit and Device Driver Development Kit (DDK) to demonstrate key concepts and behaviors. He’d raised the bar so high that I knew that writing a book that matched the quality and depth he’d achieved was even more monumental than what I had planned.

As the saying goes, if you can’t beat them, join them. I knew Dave from the Windows conference speaking circuit, so within a couple of weeks of the book’s publication, I sent him an email proposing that I join him to coauthor the next edition, which would document what was then called Windows NT 5 and would eventually be renamed as Windows 2000. My contribution would be new chapters based on my NT Internals column about topics Dave hadn’t included, and I’d also write about new labs that used my Sysinternals tools. To sweeten the deal, I suggested including the entire collection of Sysinternals tools on a CD that would accompany the book—a common way to distribute software with books and magazines.

Dave was game. First, though, he had to get approval from Microsoft. I had caused Microsoft some public relations complications with my public revelations that Windows NT Workstation and Windows NT Server were the same exact code with different behaviors based on a Registry setting. And while Dave had full Windows NT source access, I didn’t, and I wanted to keep it that way so as not to create intellectual property issues with the software I was writing for Sysinternals or Winternals, which relied on undocumented APIs. The timing was fortuitous because by the time Dave asked Microsoft, I’d been repairing my relationship with key Windows engineers, and Microsoft tacitly approved.

Writing "Inside Windows 2000" with Dave was incredibly fun. Improbably and completely coincidentally, he lived about 20 minutes from me (I lived in Danbury, Connecticut, and he lived in Sherman, Connecticut). We’d visit each other’s houses for marathon writing sessions where we’d explore the internals of Windows together, laugh at geeky jokes and puns, and pose technical questions that would pit him and me in friendly competition. (Don’t rub it in if you talk to him, but I always won.)

We continued to co-author subsequent editions, including "Windows XP" and "Windows Vista." Alex Ionescu, one of the best reverse engineers and operating systems experts in the world, joined us for the 6th Edition, adding both breadth and depth to the book, matching or exceeding our high standards for legibility and detail. The increasing scope of the book, combined with Windows itself growing with new capabilities and subsystems, resulted in the 6th Edition exceeding the single-spine publishing limit we’d run up against with the 5th Edition, so we split it into two volumes.