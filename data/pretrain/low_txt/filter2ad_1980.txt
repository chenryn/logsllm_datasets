# Medical Protocol Security: DICOM Vulnerability Mining Based on Fuzzing Technology

**Authors:**
- Zhiqiang Wang
- Quanqi Li
- Yazhe Wang
- Biao Liu
- Jianyi Zhang
- Qixu Liu

## Abstract
DICOM (Digital Imaging and Communications in Medicine) is an international standard for medical images and related information, widely used in fields such as radiology and cardiovascular imaging. However, due to inadequate security considerations in the implementation of DICOM libraries, they are susceptible to numerous security risks. This paper addresses the security issues in DICOM libraries by proposing a vulnerability mining framework based on Fuzzing technology. We have developed a prototype system, DICOM-Fuzzer, which includes modules for initialization, test case generation, automated testing, and exception monitoring. Our experiments using the open-source library DCMTK revealed a data overflow vulnerability that causes the PACS (Picture Archiving and Communication System) to crash when the content of the received file exceeds 7080 lines. This study highlights the need for further improvements in DICOM protocol security.

## CCS Concepts
- **Security and Privacy** → Security protocols

## Keywords
- DICOM
- Fuzzing
- PACS
- Medical Information Security

**Corresponding Authors:**
- Biao Liu (PI:EMAIL)
- Jianyi Zhang (PI:EMAIL)

## Introduction
The increasing intelligence, mobility, and networking of medical equipment and information systems have introduced significant security risks. The lack of security awareness among medical device manufacturers during the development process has exacerbated these risks. DICOM, the international standard for medical images and related information, is widely used in radiology and other medical imaging techniques. However, its initial design did not consider communication security, leading to numerous security threats and vulnerabilities. This paper aims to address these security challenges by proposing a Fuzzing-based vulnerability mining framework for DICOM.

## Main Contributions
1. **Framework Proposal:** We introduce a novel framework for DICOM vulnerability mining based on Fuzzing technology.
2. **Prototype System:** We implement a prototype system, DICOM-Fuzzer, capable of automated testing and real-time anomaly monitoring of PACS systems.
3. **Experimental Results:** We summarize the experimental findings, provide the scope of impact, offer defense suggestions, and discuss future research directions.

## Architecture and Design
### System Architecture
Our system architecture consists of six core modules:
1. **System Initialization Module:** Configures the required environment.
2. **Test Case Construction Module:** Constructs test case data using various strategies.
3. **DICOM Test Module:** Sends constructed DICOM files to the target system.
4. **Anomaly Monitoring Module:** Monitors the test process and analyzes feedback data.
5. **Exception Validation Module:** Re-validates detected anomalies.
6. **Log Output Module:** Records potential anomalies generated during testing.

### Test Case Construction Strategy
We employ three types of test case construction strategies:
1. **Automatic Random Construction:** Low cost and high automation.
2. **Mutation-Based Construction:** Analyzes and mutates existing structures.
3. **Manual Construction:** Highly targeted and reliable.

### DICOM Test
PACS (Picture Archiving and Communication Systems) is a critical component in medical imaging, responsible for storing and managing digital medical images. Our Fuzzing tests aim to identify security vulnerabilities in the DICOM protocol and related applications. We use Socket programming to send and receive data, ensuring the SCU (Service Class User) successfully sends DICOM files to the SCP (Service Class Provider).

### Anomaly Monitoring
We use two methods for anomaly monitoring:
1. **Wireshark Monitoring:** A widely-used network protocol analyzer for detailed packet analysis.
2. **Manual Monitoring:** High-precision and reliable for identifying and validating anomalies.

## Experiment
### DCMTK Library
DCMTK is a comprehensive set of libraries and applications implementing the DICOM standard. We selected DCMTK 3.5.4 for our vulnerability mining tests to validate the effectiveness of our Fuzzing-based approach.

### DCMTK Test
Our tests involve analyzing the DICOM protocol, constructing and sending test cases, and monitoring for anomalies. We use Socket programming to handle data transmission and reception. The SCU port is set to 104, and the IP address is 127.0.0.1.

## Results and Analysis
After extensive testing with various test cases, we identified a significant vulnerability. When the data in the constructed packet exceeds 8070 lines, the system crashes due to data overflow. This issue can lead to denial of service, process crashes, and downtime. Developers should check data length during software development to avoid such vulnerabilities and improve system robustness.

## Summary and Future Directions
Our results indicate that the DICOM protocol has substantial security vulnerabilities, particularly in terms of information confidentiality and integrity. The proposed Fuzzing-based vulnerability mining framework is a valuable tool for addressing these issues. In the face of growing cybersecurity threats, especially in the medical field, our findings can help developers enhance the security of DICOM-based systems. Future work should focus on discovering more vulnerabilities and leveraging artificial intelligence techniques to manage large datasets and complex scenarios.

## Acknowledgments
We thank the anonymous referees for their valuable comments and suggestions. This research was supported by the National Key Research and Development Plan (2018YFB1004101), Key Lab of Information Network Security, Ministry of Public Security (C19614), Special Fund on Education and Teaching Reform of Besti (jy201805), the Fundamental Research Funds for the Central Universities (328201804, 328201910), and the Key Laboratory of Network Assessment Technology of the Institute of Information Engineering, Chinese Academy of Sciences.

## References
[1] Duggal A. 2017. HL7 2.X Security. In The 8th Annual HITB Security Conference.
[2] Mike Aizatsky, Kostya Serebryany, Oliver Chang, Abhishek Arya, and Meredith Whittaker. 2016. Announcing oss-fuzz: Continuous fuzzing for open source software. Google Testing Blog (2016).
[3] Chen Chen, Baojiang Cui, Jinxin Ma, Runpu Wu, Jianchao Guo, and Wenqian Liu. 2018. A systematic review of fuzzing techniques. Computers & Security 75 (2018), 118–137.
[4] Akram Farhadi and Maryam Ahmadi. 2013. The Information Security Needs in Radiological Information Systems—an Insight on State Hospitals of Iran, 2012. Journal of Digital Imaging 26, 6 (2013), 1040–1044.
[5] Shuitao Gan, Chao Zhang, Xiaojun Qin, Xuwen Tu, Kang Li, Zhongyu Pei, and Zuoning Chen. 2018. Collafl: Path sensitive fuzzing. In 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 679–696.
[6] Eichelberg M Onken M. 2011. Digital Imaging and Communications in Medicine. Digital Imaging and Communications in Medicine (DICOM).
[7] Food US and Administration Drug. 2013. Content of premarket submissions for management of cybersecurity in medical devices: draft guidance for industry and food and drug administration staff. Retrieved May 1 (2013), 2014.