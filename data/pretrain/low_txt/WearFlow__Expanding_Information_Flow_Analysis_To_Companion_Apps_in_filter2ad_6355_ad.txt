### A More Robust Deobfuscation Technique

A more robust deobfuscation technique should leverage other invariant transformations, such as the hierarchical structure of classes and packages. Many methods in the Data Layer library are stubs, making features of the method body less effective for improving accuracy. Additionally, these features can be obfuscated (e.g., using reflection together with string encryption), leading to false negatives.

### Leveraging System Types

In our approach, we have successfully utilized system types to disambiguate methods with the same signature. We chose to use only system types because they are less susceptible to obfuscation, which has helped reduce the number of false positives. Depending on the threat model, one could opt for a coarser type of signatures when certain traits (e.g., reflection) appear in the app.

### Branching and False Negatives

Another potential source of false negative data flows stems from the backward analysis during context extraction. WearFlow stops backtracking upon encountering a channel definition, but this definition could be part of a conditional statement's branch. Depending on the variable's scope, the channel could be defined in another method or even another component. If the string analysis cannot determine the value of a key or path (e.g., due to multiple values from branching), we use a wildcard value, meaning we match any string. This approach may overestimate the potential flows between the entry and exit points.

### Dataset Limitations

Our dataset is limited to 3,111 APKs and 220 package names, considering different APK versions. While there are more than 220 apps available for Wear OS, identifying them is challenging. Google Play does not provide an exhaustive list of apps with Wear OS components, nor is it always mentioned in the app descriptions. This restriction limits our ability to query Wear OS apps in Google Play. Furthermore, datasets like Androzoo do not specify whether an app has wearable components. Consequently, we must download apps within the rate limit, resulting in a very limited set of relevant apps.

### Model Accuracy

The precision of the analysis also depends on the accuracy of the Data Layer model. The Data Layer model used by WearFlow replicates the one described in Google’s Wear OS documentation. If the Data Layer APIs transfer data through undocumented OS components or via the cloud (e.g., backups), WearFlow would not detect such flows. Additionally, our model is based on Wear OS versions 1 and 2, which are under active development. New APIs introduced in future versions will need to be modeled.

### Related Work

Mobile-Wear communication can be seen as a form of inter-app communication where one app runs on a wearable device. Several works have focused on app collusion detection [4, 5, 18, 23, 26, 34]. These studies model ICC methods to identify sensitive data flows between applications running on the same device. WearFlow complements these efforts by extending the analysis to the Mobile-Wear ecosystem, increasing the overall coverage to all current app interactions in the Android-Wear OS ecosystem. While tools like DialDroid [6] use entry and exit points to match ICC communication, they do not handle the aggregation of multiple data into a single API call, leading to inaccuracies.

ApkCombiner [20] combines two apps into one, allowing taint tracking on a single app. However, this approach does not allow us to reason about individual items aggregated into a single API call.

Recent research has expanded data tracking to platforms outside the Android ecosystem. Zou et al. [35] studied the interaction of mobile apps, IoT devices, and clouds in smart homes using traffic collection and static analysis. They discovered several new vulnerabilities and attacks. Berkay et al. proposed a taint tracking system for IoT devices [7]. WearFlow could have followed a similar approach by analyzing WiFi and Bluetooth communications, but this would require reverse-engineering the communication protocols. Our approach is simpler and does not require additional hardware.

### Conclusion

In this work, we presented WearFlow, a static analysis tool that systematically detects the exfiltration of sensitive data across the Mobile-Wear Android ecosystem. WearFlow enhances previous taint tracking efforts by expanding the scope from mobile apps to smartwatches. We addressed the challenge of enabling inter-device analysis by modeling Google Play Services, a proprietary library. Our framework can handle trivial and most non-trivial obfuscation techniques commonly used.

We created WearBench, the first benchmark for analyzing inter-device data leakage in Wear OS. Our evaluation shows the effectiveness of WearFlow compared to other approaches. We also analyzed apps in Google Play, uncovering privacy violations in popular apps, including one with over 10 million downloads. Future work will focus on extending our deobfuscation phase to cover additional forms of obfuscation and broadening our analysis to the entire Google Play app market.

### Acknowledgements

This research was partially sponsored by the Engineering and Physical Sciences Research Council (EPSRC) and the UK government as part of the Centre for Doctoral Training in Cyber Security at Royal Holloway, University of London (EP/P009301/1).

### References

[1] Kevin Allix, Tegawendé F. Bissyandé, Jacques Klein, and Yves Le Traon. Androzoo: Collecting millions of Android apps for the research community. In Proceedings of the 13th International Conference on Mining Software Repositories, MSR '16, page 468–471, New York, NY, USA, 2016. Association for Computing Machinery.

[2] Steven Arzt, Siegfried Rasthofer, and Eric Bodden. SuiSi: A tool for the fully automated classification and categorization of Android sources and sinks. University of Darmstadt, Tech. Rep. TUDCS-2013, 114:108, 2013.

[3] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In ACM SIGPLAN Notices, volume 49, pages 259–269. ACM, 2014.

[4] Hamid Bagheri, Alireza Sadeghi, Joshua Garcia, and Sam Malek. Covert: Compositional analysis of Android inter-app permission leakage. IEEE Transactions on Software Engineering, 41(9):866–886, 2015.

[5] Shweta Bhandari, Wafa Ben Jaballah, Vineeta Jain, Vijay Laxmi, Akka Zemmari, Manoj Singh Gaur, Mohamed Mosbah, and Mauro Conti. Android inter-app communication threats and detection techniques. Computers & Security, 70:392–421, 2017.

[6] Amiangshu Bosu, Fang Liu, Danfeng Daphne Yao, and Gang Wang. Collusive data leak and more: Large-scale threat analysis of inter-app communications. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security, pages 71–85. ACM, 2017.

[7] Z Berkay Celik, Leonardo Babun, Amit Kumar Sikder, Hidayet Aksu, Gang Tan, Patrick McDaniel, and A Selcuk Uluagac. Sensitive information tracking in commodity IoT. In 27th USENIX Security Symposium, pages 1687–1704, 2018.

[8] Jagmohan Chauhan, Suranga Seneviratne, Mohamed Ali Kaafar, Anirban Mahanti, and Aruna Seneviratne. Characterization of early smartwatch apps. In 2016 IEEE International Conference on Pervasive Computing and Communication Workshops (PerCom Workshops), pages 1–6. IEEE, 2016.

[9] Xingmin Cui, Jingxuan Wang, Lucas CK Hui, Zhongwei Xie, Tian Zeng, and Siu-Ming Yiu. WeChecker: Efficient and precise detection of privilege escalation vulnerabilities in Android apps. In Proceedings of the 8th ACM Conference on Security & Privacy in Wireless and Mobile Networks, pages 1–12, 2015.

[10] Quang Do, Ben Martini, and Kim-Kwang Raymond Choo. Is the data on your wearable device secure? An Android Wear smartwatch case study. Software: Practice and Experience, 47(3):391–403, 2017.

[11] Karim O Elish, Danfeng Yao, and Barbara G Ryder. On the need of precise inter-app ICC classification for detecting Android malware collusions. In Proceedings of IEEE Mobile Security Technologies (MoST), in conjunction with the IEEE Symposium on Security and Privacy, 2015.

[12] HP Fortify. Internet of Things security study: Smartwatches. Accessed March 2020, 2015. https://www.ftc.gov/system/files/documents/public_comments/2015/10/00050-98093.pdf.

[13] Julien Gamba, Mohammed Rashed, Abbas Razaghpanah, Juan Tapiador, and Narseo Vallina-Rodriguez. An analysis of pre-installed Android software. arXiv preprint arXiv:1905.02713, 2019.

[14] Gartner. Gartner says global end-user spending on wearable devices to total $52 billion in 2020. Accessed March 2020, 10 2019. https://perma.cc/MR8J-PUUK.

[15] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham, Nguyen Nguyen, and Martin C Rinard. Information flow analysis of Android applications in DroidSafe. In NDSS, volume 15, page 110, 2015.

[16] Rohit Goyal, Nicola Dragoni, and Angelo Spognardi. Mind the tracker you wear: A security analysis of wearable health trackers. In Proceedings of the 31st Annual ACM Symposium on Applied Computing, pages 131–136, 2016.

[17] Mahmoud Hammad, Joshua Garcia, and Sam Malek. A large-scale empirical study on the effects of code obfuscations on Android apps and anti-malware products. In Proceedings of the 40th International Conference on Software Engineering, pages 421–431, 2018.

[18] William Klieber, Lori Flynn, Amar Bhosale, Limin Jia, and Lujo Bauer. Android taint flow analysis for app sets. In Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis, pages 1–6, 2014.

[19] Ding Li, Yingjun Lyu, Mian Wan, and William GJ Halfond. String analysis for Java and Android applications. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering, pages 661–672. ACM, 2015.

[20] Li Li, Alexandre Bartel, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. ApkCombiner: Combining multiple Android apps to support inter-app analysis. In IFIP International Information Security and Privacy Conference, pages 513–527. Springer, 2015.

[21] Li Li, Alexandre Bartel, Tegawendé F Bissyandé, Jacques Klein, Yves Le Traon, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Damien Octeau, and Patrick McDaniel. ICCTA: Detecting inter-component privacy leaks in Android apps. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, volume 1, pages 280–291. IEEE, 2015.

[22] Li Li, Tegawendé F Bissyandé, Damien Octeau, and Jacques Klein. DroidRA: Taming reflection to support whole-program analysis of Android apps. In Proceedings of the 25th International Symposium on Software Testing and Analysis, pages 318–329, 2016.

[23] Fang Liu, Haipeng Cai, Gang Wang, Danfeng Yao, Karim O Elish, and Barbara G Ryder. MR-Droid: A scalable and prioritized analysis of inter-app communication risks. In 2017 IEEE Security and Privacy Workshops (SPW), pages 189–198. IEEE, 2017.

[24] Felix Pauck, Eric Bodden, and Heike Wehrheim. Do Android taint analysis tools keep their promises? In Proceedings of the 2018 26th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering, pages 331–341, 2018.

[25] Lina Qiu, Yingying Wang, and Julia Rubin. Analyzing the analyzers: FlowDroid/ICCTA, AMAndroid, and DroidSafe. In Proceedings of the 27th ACM SIGSOFT International Symposium on Software Testing and Analysis, pages 176–186, 2018.

[26] Tristan Ravitch, E Rogan Creswick, Aaron Tomb, Adam Foltzer, Trevor Elliott, and Ledah Casburn. Multi-app security analysis with Fuse: Statically detecting Android app collusion. In Proceedings of the 4th Program Protection and Reverse Engineering Workshop, pages 1–10, 2014.

[27] Roman Schlegel, Kehuan Zhang, Xiao-yong Zhou, Mehool Intwala, Apu Kapadia, and XiaoFeng Wang. Soundcomber: A stealthy and context-aware sound trojan for smartphones. In NDSS, volume 11, pages 17–33, 2011.

[28] Mingshen Sun, Tao Wei, and John CS Lui. TaintART: A practical multi-level information-flow tracking system for Android runtime. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 331–342, 2016.

[29] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren, Patrick Lam, and Vijay Sundaresan. Soot: A Java bytecode optimization framework. In CASCON First Decade High Impact Papers, pages 214–224. IBM Corp., 2010.

[30] He Wang, Ted Tsung-Te Lai, and Romit Roy Choudhury. Mole: Motion leaks through smartwatch sensors. In Proceedings of the 21st Annual International Conference on Mobile Computing and Networking, pages 155–166, 2015.

[31] Fengguo Wei, Xingwei Lin, Xinming Ou, Ting Chen, and Xiaosong Zhang. JN-SAF: Precise and efficient NDK/JNI-aware inter-language static analysis framework for security vetting of Android applications with native code. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 1137–1150, 2018.

[32] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 1329–1341. ACM, 2014.

[33] Lili Wei, Yepang Liu, and Shing-Chi Cheung. Taming Android fragmentation: Characterizing and detecting compatibility issues for Android apps. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering, pages 226–237, 2016.

[34] Mengwei Xu, Yun Ma, Xuanzhe Liu, Felix Xiaozhu Lin, and Yunxin Liu. AppHolmes: Detecting and characterizing app collusion among third-party Android markets. In Proceedings of the 26th International Conference on World Wide Web, pages 143–152, 2017.

[35] Wei Zhou, Yan Jia, Yao Yao, Lipeng Zhu, Le Guan, Yuhang Mao, Peng Liu, and Yuqing Zhang. Discovering and understanding the security hazards in the interactions between IoT devices, mobile apps, and clouds on smart home platforms. In 28th USENIX Security Symposium, pages 1133–1150, 2019.