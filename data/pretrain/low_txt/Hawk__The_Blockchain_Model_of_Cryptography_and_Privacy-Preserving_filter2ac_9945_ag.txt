### Performance and Optimization Analysis

#### Verification Time
The verification time is linearly dependent on the size of the public statement, which is significantly smaller than the overall computation size. This results in a relatively small verification time.

#### On-Chain Public Parameters
As detailed in Section IV-C, only the verification key part of the SNARK common reference string (CRS) needs to be stored on the blockchain. Our implementation suggests that the private cash protocol requires a 23KB verification key to be stored on-chain, which is globally shared with a single instance. Additionally, each Hawk contract will require 13-114 KB of verification key to be stored on-chain for 10 to 100 users. This per-contract verification key is circuit-dependent, meaning it varies based on the specific contract program. For more details on techniques for performing trusted setup, refer to Section IV-C.

#### Manager Computation
For running private auction or crowdfunding protocols with 100 participants, the manager's proof generation time is under 6.5 minutes on a single core and under 2.85 minutes on 4 cores. This translates to under $0.14 of EC2 time [2].

#### User Computation
Users' proof times for pour, freeze, and compute operations are under one minute and are independent of the number of parties. In the worst case, the peak memory usage for a user is less than 4 GB.

### Savings from Protocol Optimizations
Figure 8 illustrates the performance gains achieved by using a SNARK-friendly implementation for the user-side circuits (pour, freeze, and compute) compared to a naive implementation at the 80-bit security level. The naive implementation cost is calculated using conservative estimates for standard cryptographic primitives. The figure shows a gain of 2.0-2.6× over the naive implementation.

Furthermore, Figure 9 demonstrates the performance gains from our protocol optimizations described in Section V. The figure considers the sealed-bid auction finalize circuit with different numbers of bidders. The SNARK-friendly implementation, combined with our two optimizations, significantly reduces the SNARK circuit sizes, achieving a 10× gain relative to a straightforward implementation. The figure also highlights that the manager’s cost is proportional to the number of participants, whereas the user-side costs remain independent of the number of participants.

### Additional Theoretical Results
We present additional theoretical results to further illustrate the usefulness of our formal blockchain model. For detailed information, refer to the online version [37]. Here, we summarize the main findings:

#### Fair MPC with Public Deposits in the Generic Blockchain Model
Fairness in multi-party computation (MPC) is generally impossible in plain models when the majority can be corrupted, as first observed by Cleve [24] and later extended in subsequent works [8]. However, assuming a generic blockchain model where the blockchain is trusted for correctness and availability (but not for privacy), financial fairness can be achieved. This involves the blockchain financially penalizing aborting parties by confiscating their deposits. Table III compares the efficiency of financial fairness protocols in the generic blockchain model with earlier approaches.

#### Fair MPC with Private Deposits
We also explore how to perform financially fair MPC using private deposits, where the amount of deposits cannot be observed by the public. Formal definitions, constructions, and proofs are provided in the online version [37].

### Acknowledgments
We gratefully acknowledge Jonathan Katz, Rafael Pass, and abhi shelat for helpful technical discussions about zero-knowledge proof constructions. We also thank Ari Juels and Dawn Song for general discussions about cryptocurrency smart contracts. This research is partially supported by NSF grants CNS-1314857, CNS-1445887, CNS-1518765, CNS-1514261, CNS-1526950, a Sloan Fellowship, three Google Research Awards, Yahoo! Labs through the Faculty Research Engagement Program (FREP), and a NIST award.

### References
[1] http://koinify.com.
[2] Amazon EC2 Pricing. http://aws.amazon.com/ec2/pricing/.
[3] Augur. http://www.augur.net/.
[4] BitcoinJ. https://bitcoinj.github.io/.
[5] The Rise and Rise of Bitcoin. Documentary.
[6] Skuchain. http://www.skuchain.com/.
[7] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek. Secure Multiparty Computations on Bitcoin. In S&P, 2013.
[8] G. Asharov, A. Beimel, N. Makriyannis, and E. Omri. Complete Characterization of Fairness in Secure Two-Party Computation of Boolean Functions. In TCC, 2015.
[9] M. Bagnoli and B. L. Lipman. Provision of Public Goods: Fully Implementing the Core Through Private Contributions. The Review of Economic Studies, 1989.
[10] R. Beaulieu, D. Shors, J. Smith, S. Treatman-Clark, B. Weeks, and L. Wingers. The Simon and Speck Families of Lightweight Block Ciphers. http://ia.cr/2013/404.
[11] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and M. Virza. Zerocash: Decentralized Anonymous Payments from Bitcoin. In S&P, 2014.
[12] E. Ben-Sasson, A. Chiesa, D. Genkin, E. Tromer, and M. Virza. SNARKs for C: Verifying Program Executions Succinctly and in Zero Knowledge. In CRYPTO, 2013.
[13] E. Ben-Sasson, A. Chiesa, M. Green, E. Tromer, and M. Virza. Secure Sampling of Public Parameters for Succinct Zero Knowledge Proofs. In S&P, 2015.
[14] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Scalable Zero Knowledge via Cycles of Elliptic Curves. In CRYPTO, 2014.
[15] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct Non-Interactive Zero Knowledge for a Von Neumann Architecture. In Security, 2014.
[16] E. Ben-Sasson and M. Sudan. Short PCPs with Polylog Query Complexity. SIAM J. Comput., 2008.
[17] I. Bentov and R. Kumaresan. How to Use Bitcoin to Design Fair Protocols. In CCS, 2014.
[18] N. Bitansky, R. Canetti, A. Chiesa, and E. Tromer. Recursive Composition and Bootstrapping for SNARKs and Proof-Carrying Data. In STOC, 2013.
[19] D. Bogdanov, S. Laur, and J. Willemson. Sharemind: A Framework for Fast Privacy-Preserving Computations. In ESORICS, 2008.
[20] J. Bonneau, A. Miller, J. Clark, A. Narayanan, J. A. Kroll, and E. W. Felten. Research Perspectives and Challenges for Bitcoin and Cryptocurrencies. In S&P, 2015.
[21] R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In FOCS, 2001.
[22] R. Canetti. Universally Composable Signature, Certification, and Authentication. In CSF, 2004.
[23] R. Canetti, Y. Dodis, R. Pass, and S. Walfish. Universally Composable Security with Global Setup. In TCC, 2007.
[24] R. Cleve. Limits on the Security of Coin Flips When Half the Processors Are Faulty. In STOC, 1986.
[25] C. Costello, C. Fournet, J. Howell, M. Kohlweiss, B. Kreuter, M. Naehrig, B. Parno, and S. Zahur. Geppetto: Versatile Verifiable Computation. In S&P, 2015.
[26] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno. Pinocchio Coin: Building Zerocoin from a Succinct Pairing-Based Proof System. In PETShop, 2013.
[27] C. Decker and R. Wattenhofer. Bitcoin Transaction Malleability and MtGox. In ESORICS. Springer, 2014.
[28] A. K. R. Dermody and O. Slama. Counterparty Announcement. https://bitcointalk.org/index.php?topic=395761.0.
[29] I. Eyal and E. G. Sirer. Majority Is Not Enough: Bitcoin Mining Is Vulnerable. In FC, 2014.
[30] C. Fournet, M. Kohlweiss, G. Danezis, and Z. Luo. ZQL: A Compiler for Privacy-Preserving Data Processing. In USENIX Security, 2013.
[31] M. Fredrikson and B. Livshits. ZØ: An Optimizing Distributing Zero-Knowledge Compiler. In USENIX Security, 2014.
[32] J. A. Garay, A. Kiayias, and N. Leonardos. The Bitcoin Backbone Protocol: Analysis and Applications. In Eurocrypt, 2015.
[33] R. Gennaro, C. Gentry, B. Parno, and M. Raykova. Quadratic Span Programs and Succinct NIZKs Without PCPs. In Eurocrypt, 2013.
[34] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg. Eclipse Attacks on Bitcoin’s Peer-to-Peer Network. In USENIX Security, 2015.
[35] A. Juels, A. Kosba, and E. Shi. The Ring of Gyges: Using Smart Contracts for Crime. Manuscript, 2015.
[36] A. Kiayias, H.-S. Zhou, and V. Zikas. Fair and Robust Multi-Party Computation Using a Global Transaction Ledger. http://ia.cr/2015/574.
[37] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts. http://ia.cr/2015/675.
[38] A. Kosba, Z. Zhao, A. Miller, H. Chan, C. Papamanthou, R. Pass, abhi shelat, and E. Shi. How to Use SNARKs in Universally Composable Protocols. https://eprint.iacr.org/2015/1093, 2015.
[39] B. Kreuter, B. Mood, A. Shelat, and K. Butler. PCF: A Portable Circuit Format for Scalable Two-Party Secure Computation. In Security, 2013.
[40] R. Kumaresan and I. Bentov. How to Use Bitcoin to Incentivize Correct Computations. In CCS, 2014.
[41] C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi. ObliVM: A Programming Framework for Secure Computation. In S&P, 2015.
[42] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M. Voelker, and S. Savage. A Fistful of Bitcoins: Characterizing Payments Among Men with No Names. In IMC, 2013.
[43] I. Miers, C. Garman, M. Green, and A. D. Rubin. Zerocoin: Anonymous Distributed E-Cash from Bitcoin. In S&P, 2013.
[44] A. Miller, M. Hicks, J. Katz, and E. Shi. Authenticated Data Structures, Generically. In POPL, 2014.
[45] A. Miller and J. J. LaViola Jr. Anonymous Byzantine Consensus from Moderately-Hard Puzzles: A Model for Bitcoin, 2014.
[46] M. S. Miller, C. Morningstar, and B. Frantz. Capability-Based Financial Instruments. In FC, 2001.
[47] N. Mouha, B. Mennink, A. Van Herrewege, D. Watanabe, B. Preneel, and I. Verbauwhede. Chaskey: An Efficient MAC Algorithm for 32-Bit Microcontrollers. In Selected Areas in Cryptography–SAC 2014, pages 306–323. Springer, 2014.
[48] S. Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System. http://bitcoin.org/bitcoin.pdf, 2009.
[49] B. Parno, C. Gentry, J. Howell, and M. Raykova. Pinocchio: Nearly Practical Verifiable Computation. In S&P, 2013.
[50] R. Pass and abhi shelat. Micropayments for Peer-to-Peer Currencies. In CCS, 2015.
[51] A. Rastogi, M. A. Hammer, and M. Hicks. Wysteria: A Programming Language for Generic, Mixed-Mode Multiparty Computations. In S&P, 2014.
[52] D. Ron and A. Shamir. Quantitative Analysis of the Full Bitcoin Transaction Graph. In FC, 2013.
[53] N. Szabo. Formalizing and Securing Relationships on Public Networks. First Monday, 1997.
[54] N. van Saberhagen. Cryptonote v 2.0. https://goo.gl/kfojVZ, 2013.
[55] W. Vickrey. Counterspeculation, Auctions, and Competitive Sealed Tenders. Journal of Finance, 1961.
[56] R. S. Wahby, S. T. V. Setty, Z. Ren, A. J. Blumberg, and M. Walfish. Efficient RAM and Control Flow in Verifiable Outsourced Computation. In NDSS, 2015.
[57] G. Wood. Ethereum: A Secure Decentralized Transaction Ledger. http://gavwood.com/paper.pdf.
[58] L. Zheng, S. Chong, A. C. Myers, and S. Zdancewic. Using Replication and Partitioning to Build Secure Distributed Systems. In S&P, 2003.
[59] G. Zyskind, O. Nathan, and A. Pentland. Enigma: Decentralized Computation Platform with Guaranteed Privacy.