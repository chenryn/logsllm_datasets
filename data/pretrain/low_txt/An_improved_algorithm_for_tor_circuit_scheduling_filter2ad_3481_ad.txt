### Cell Count and Prioritization in Tor Circuits

For the cell counts to be low enough to compete with HTTP circuits, the largest value, 99, does not significantly outperform an unprioritized Tor. This is because, for our HTTP circuit, the behavior will accumulate a large cell count, thereby losing priority. Conversely, the values 10, 20, 33, and 66 appear to be suitable for our OR (Onion Router).

The results align with our hypothesis: the H value only needs to ensure that bulk transfer circuits have higher cell counts than HTTP circuits. A wide range of values can meet this requirement. A value around 20 or 30 is likely to satisfy most ORs in the Tor network. A global default value can be set in the directory authorities' consensus, eliminating the need for manual configuration by OR operators. Even if an OR operator misconfigures this value, such as setting it to 1.5, the performance will not be severely impacted, as demonstrated by our experiments.

However, as the Internet and the Tor network evolve, different protocols will begin to use Tor, and the traffic distribution will change. Therefore, the parameter should be regularly re-evaluated.

### Effects on Hidden Services

Tor’s Hidden Services mechanism allows users to provide TCP-based services, such as web servers, without revealing the server’s IP address. Instead of publishing its IP address, the hidden server publishes a server descriptor containing a signed list of introduction points to the directory authorities. The client downloads the descriptor, connects to one of the introduction points, selects an OR as the rendezvous point, builds a circuit to it, and informs the hidden server of the selected rendezvous point. The server then connects to the rendezvous point and begins communicating with the client.

Due to the different design goals, the underlying network traffic for hidden services is more complex than for regular public services. Accessing hidden services involves more than a dozen ORs and multiple rounds of negotiation, making it much slower than accessing public services through Tor.

The most time-consuming part of the process for a client to access a hidden service is circuit creation. According to statistics, the average time for hidden service circuit creation is 33.8 seconds, significantly higher than that of public services. After circuit creation, the communication between the client and the server becomes almost as fast as accessing public services through Tor, as we will demonstrate through our experiments.

Our EWMA (Exponentially Weighted Moving Average) algorithm is ideal for prioritizing the circuit creation phase of Hidden Services, as the command cells for circuit creation are small (512 bytes each) and are the first cells sent by a circuit. These cells should receive the highest priority, largely independent of the EWMA parameter value.

We tested the performance improvement of Hidden Services using a similar approach to our experiments in Section 3.3. We used H = 33 for our middle OR. The hidden server was a desktop machine at the University of Waterloo, configured to use planetgurgle as the middle OR for all its circuits.

We modified webfetch to support SOCKS4a to resolve URLs for hidden services and instrumented it to separately record the time for connection initialization and webpage fetching. For each client instance, we performed four fetches of the target webpage. The latter three fetches do not include circuit creation and should be much faster than the first one. We conducted 200 groups of tests (200 circuit creations). The connection initialization time for the latter three fetches was very short (averaging 2.0 seconds) compared to the first fetch. Since we are primarily concerned with circuit creation, we only show the connection initialization time for the first fetch and the download time for webpages. The CDF (Cumulative Distribution Function) is shown in Figure 14.

We observed improvements in the connection initialization time across all quantiles. The average time decreased from 19.3 seconds to 17.1 seconds (an 11.4% reduction). This time is mostly due to circuit creation. Note that only two hops out of seven were prioritized (planetgurgle). We expect further improvements if all ORs in the circuits are prioritized.

### Compatibility with Existing Tor

For any upgrade of a distributed system the size of Tor, compatibility is a fundamental issue. Requiring simultaneous upgrades for all Tor nodes would be a significant barrier. Fortunately, since our algorithm only changes the order in which cells are multiplexed from different circuits within the OR, it does not require changes in other ORs. Consequently, each OR can be upgraded individually, and each upgrade will bring some improvement, as seen in our experiments.

Our algorithm can also be conveniently turned on and off by setting the parameter in the Tor configuration file and switched at runtime by sending a SIGHUP signal to Tor to reload its configuration file.

### Effects on Security Properties of Tor

An important question is whether these performance improvements could enable new attacks. It is well-known that Tor is insecure against an adversary who can see both ends of a circuit. The most apparent attack vector is for an attacker who can see just one end of a circuit to try to determine whether the other end is an OR that has been upgraded to use this protocol by observing the circuit's performance.

Here, Tor’s large variance in performance is beneficial. Although our method provides a noticeable improvement, the improvement is still small compared to the very large variance. It would be as easy for an attacker to learn in the stock Tor whether the OR at the other end of the circuit had high or low bandwidth.

One might also consider an attack in the style of [5], where the attacker constructs their own circuits through various ORs to observe interference with a target circuit. This attack is already possible in stock Tor; the fixes made as a result of that paper (limiting circuits to eight hops) only prevent the bandwidth amplification portion of the attack.

### Related Work

Several works have examined Tor to improve its performance. We provide an overview of some of them and other work related to our improvements.

#### Tor over DTLS

One area of investigation is combating the improper application of TCP’s congestion control mechanisms, which degrade Tor’s performance. Between each pair of ORs, multiple circuits may share the same TCP connection, and their traffic is multiplexed within this connection using the same socket. When the number of unacknowledged packets in the socket buffer exceeds the socket’s congestion window, TCP’s congestion control mechanism takes effect, causing TCP to back off until more acknowledgments are received. This mechanism is desirable if there is only one circuit using the connection; however, if there are multiple circuits, one circuit sending too much data and triggering congestion control will prevent cells on other circuits from being transmitted.

Reardon and Goldberg [20] addressed this problem by using a TCP-over-DTLS tunnel. Instead of using a TLS/TCP connection between each pair of ORs, a DTLS/UDP connection is established to prevent the congestion control mechanism incurred by one circuit from preventing other circuits from sending data. On top of DTLS/UDP, a user-level TCP connection is established for each circuit to guarantee in-order delivery, congestion control, and flow control on a per-circuit basis.

Reardon and Goldberg’s work focused on a fair application of the congestion control mechanism: the fault of one circuit should not affect other circuits. In comparison, our approach aims to be fair in resource allocation among circuits: circuits that consume fewer resources recently should be prioritized over other circuits.

#### Opportunistic Bandwidth Measurement

Tor relies on ORs’ self-reported bandwidth values as weights to make router selection decisions. This is not necessarily accurate and may encourage malicious ORs to report higher bandwidth to attract traffic. Snader and Borisov [22] proposed an opportunistic bandwidth measurement algorithm to replace the self-reported bandwidth, which is more accurate and responds quickly to changing load conditions while preventing low-resource routing attacks. This way, Tor’s bandwidth resources are allocated more efficiently, and overall performance is improved.

Snader and Borisov also proposed a mechanism for users to tune Tor’s parameters to select between circuits for higher performance or higher anonymity, incurring very little cost to the other property. Their work is orthogonal to ours; using both simultaneously should yield additional benefits.

#### Internet QoS Schemes

Several QoS (Quality of Service) schemes exist for today’s Internet, including Integrated Services, RSVP, Differentiated Services, MPLS, and Constraint-Based Routing. There are also schemes for prioritizing bursty traffic in ATM networks. Our approach is similar to these efforts, as Tor is an overlay network and ORs act like Internet routers. We aim to improve the QoS of HTTP traffic by adjusting the scheduling policies within ORs.

Our EWMA algorithm is simple and effective in our situation. Nonetheless, incorporating ideas from other QoS techniques into Tor would be an interesting avenue for future work. One caveat is that in Tor, the contents of the packets are unavailable to the ORs, so QoS methods based on protocol analysis or deep packet inspection would be unsuitable for our use.

### Future Work

#### Prioritizing Connections within an OR

In the fine-grained analysis of a cell’s time spent within the OR, we observed that our modifications reduced the amount of time a cell spends waiting to be flushed from the circuit queues of interactive circuits to the connection output buffer. However, the cells still wait in the connection output buffer for a noticeable amount of time. If this time can be reduced, interactive circuits will benefit more in terms of latency reduction.

One possible approach is to reduce the size of the FIFO output buffer, so that circuits are selected by priority closer in time to when the cells flushed from them are sent over the network. This will reduce head-of-line blocking within the output buffer and get cells from high-priority circuits onto the network faster.

Another direction is to prioritize connections within an OR by assigning higher priority to idle connections. A challenge is ensuring fairness, as a busy connection may not be doing a bulk transfer; it may simply contain many circuits, all doing web browsing. Slowing down this connection is not the desired behavior. Thus, besides watching the connection’s activity, we might also need to watch the circuits within it.

#### Gaming the EWMA Algorithm

Since prioritization decisions are based on the behavior of each circuit, a user can modify their bulk transfer protocol to open many circuits and transfer parts of the file in a bursty manner. Each circuit will then have a lower EWMA value and be prioritized over HTTP and other interactive protocols.

Although our EWMA algorithm does not significantly degrade the performance of bulk transfers, there is no strong incentive for bulk transfer users to implement such a modification. However, such a modification can prioritize a specific protocol over any other protocol on Tor. We note that our algorithm does not introduce this attack, as a user can still utilize multiple TCP connections over multiple circuits on their protocol to make it more competitive, even with unprioritized Tor. Using multiple TCP connections on the regular (non-Tor) Internet will yield an unfair share of bandwidth. Investigations into countermeasures will be a good direction for future work.

### Summary

In this paper, we examined one source of Tor’s performance issues. One factor contributing to poor performance for interactive streams is the unfair scheduling algorithm among circuits: interactive circuits are greatly slowed down by co-existent non-interactive circuits on the same connection. We proposed an EWMA-based scheduling algorithm to prioritize interactive circuits and performed experiments on PlanetLab and the actual Tor network. The results show that under realistic network traffic, the interactive streams in prioritized Tor perform about 10% to 20% better in terms of latency. The algorithm is fully compatible with the current Tor network: ORs can be upgraded gradually, it can be easily turned on and off, and the benefits will be seen immediately. Additionally, the algorithm brings little overhead, even on CPU-limited ORs.

### Acknowledgements

We thank Ryan Henry, Femi Olumofin, Greg Zaverucha, Roger Dingledine, and the anonymous reviewers for their helpful suggestions on improving this paper. We gratefully thank The Tor Project for their financial support and for incorporating our results into the main Tor code. We also acknowledge MITACS and NSERC for their financial support.

### References

[1] Tor Network Status. http://torstatus.kgprog.com/, 2009. Accessed April 2010.
[2] Tony Aiuto. webfetch. http://tony.aiu.to/sa/webfetch/, 2004. Accessed April 2010.
[3] Roger Dingledine, Nick Mathewson, and Paul Syverson. Tor: The Second-Generation Onion Router. In Proceedings of the 13th USENIX Security Symposium, pages 303–320, 2004.
[4] Roger Dingledine and Steven Murdoch. Performance Improvements on Tor or, Why Tor is slow and what we’re going to do about it. http://www.torproject.org/press/presskit/2009-03-11-performance.pdf, 2009. Accessed April 2010.
[5] Nathan Evans, Roger Dingledine, and Christian Grothoff. A Practical Congestion Attack on Tor Using Long Paths. In Proceedings of the 18th USENIX Security Symposium, pages 33–50, August 2009.
[6] Brian N. Levine, Michael K. Reiter, Chenxi Wang, and Matthew K. Wright. Timing Attacks in Low-Latency Mix-Based Systems. In Ari Juels, editor, Proceedings of Financial Cryptography (FC ’04), pages 251–265. Springer-Verlag, LNCS 3110, February 2004.
[7] John D.C. Little and Stephen C. Graves. Little’s Law. http://web.mit.edu/sgraves/www/papers/Little’s%20Law-Published.pdf. Accessed April 2010.
[8] Karsten Loesing. Privacy-enhancing Technologies for Private Services. PhD thesis, University of Bamberg, 2008.
[9] Karsten Loesing. Measuring the Tor Network. http://metrics.torproject.org/papers/directory-requests-2009-06-25.pdf, 2009. Accessed April 2010.
[10] Karsten Loesing. Measuring the Tor Network from Public Directory Information. http://freehaven.net/~karsten/metrics/measuring-tor-public-dir-info-final.pdf, 2009. Accessed April 2010.
[11] Nick Mathewson. gitweb.torproject.org. http://gitweb.torproject.org/tor.git?a=commit;h=06e8370c33d6ccb73d55e9e8c3d2673c48d7b328, 2009. Accessed April 2010.
[12] Damon McCoy, Kevin Bauer, Dirk Grunwald, Tadayoshi Kohno, and Douglas Sicker. Shining Light in Dark Places. In Proceedings of the 8th Privacy Enhancing Technologies Symposium, pages 66–67, 2008.
[13] Steven J. Murdoch and Piotr Zieliński. Sampled Traffic Analysis by Internet-Exchange-Level Adversaries. In Proceedings of the 7th Privacy Enhancing Technologies, pages 167–183, Ottawa, Canada, 2007.
[14] Matt W. Mutka and Jose Roberto Fernandex. A Burst-Level Priority Scheme for Bursty Traffic in ATM Networks. In Proceedings of Sixth International Conference on Computer Communications and Networks, pages 11–16, 1997.
[15] NIST/SEMATECH. e-Handbook of Statistical Methods. http://www.itl.nist.gov/div898/handbook/index.htm, 2010.
[16] Reinaldo Penno, Satish Raghunath, Vijay K. Gurbani, Richard Woundy, and Joe Touch. LEDBAT Practices and Recommendations for Managing Multiple Concurrent TCP Connections. http://www.ietf.org/id/draft-ietf-ledbat-practices-recommendations-00.txt, February 2010. Accessed April 2010.
[17] Larry Peterson, Tom Anderson, David Culler, and Timothy Roscoe. A Blueprint for Introducing Disruptive Technology into the Internet. SIGCOMM Comput. Commun. Rev., 33(1):59–64, 2003.
[18] Joel Reardon. Improving Tor using a TCP-over-DTLS Tunnel. Master’s thesis, University of Waterloo, 2008.
[19] Joel Reardon. libspe. http://crysp.uwaterloo.ca/software/, 2009. Accessed April 2010.
[20] Joel Reardon and Ian Goldberg. Improving Tor using a TCP-over-DTLS Tunnel. In Proceedings of the 18th USENIX Security Symposium, pages 119–133, 2009.
[21] Andrei Serjantov and Peter Sewell. Passive Attack Analysis for Connection-Based Anonymity Systems. In Proceedings of ESORICS 2003, pages 116–131, October 2003.
[22] Robin Snader and Nikita Borisov. A Tune-up for Tor: Improving Security and Performance in the Tor Network. In Proceedings of 16th Annual Network and Distributed System Security Symposium, 2008.
[23] WebSiteOptimization.com. Average Web Page Size Triples Since 2003. http://www.websiteoptimization.com/speed/tweak/average-web-page/, 2008. Accessed April 2010.
[24] Weibin Zhao, David Olshefski, and Henning Schulzrinne. Internet Quality of Service: an Overview. www.cs.columbia.edu/techreports/cucs-003-00.pdf, 2000. Accessed April 2010.