### Distance and Proof Size

- **(a) Skip List Proof Size**
  - Distance (millions): 0, 1, 2, 3
  - Size (millions)

- **(b) RBB-Tree Proof Size**

**Figure 10: RBB-Tree Performance for Different Snapshot Sizes**
- The curves in the figure represent the number of keys per snapshot, ranging from 100 keys to one million keys.
- **(a) Insertion Time vs. Tree Size**: This graph shows how the insertion time increases with the tree size.
- **(b) Proof Extraction Time vs. Tree Size**: This graph illustrates how the proof extraction time increases with the tree size.
- A "knee" around 0.8 million elements is observed due to the overflow of the disk block cache.

**Table 1: RBB-Tree Size on Disk as a Function of Snapshot Size**
- **Keys per Snapshot**: 100, 1K, 10K, 100K, 1M
- **Tree Size (GB)**: 0.5, 7, 13, 18
- This table shows the disk size of an RBB-Tree with three million keys, varying by snapshot size.

### Performance Characteristics of RBB-Trees

- For small distances, different proofs are spread across many disk blocks, making proof extraction heavily I/O bound.
- For larger distances approaching the entire skip list size, random proofs share many disk blocks, reducing I/O overhead and lowering the average cost.

**Figure 10: Performance Metrics**
- **Insertion Time**: Figure 10(a) shows how insertion time grows with tree size.
- **Proof Extraction Time**: Figure 10(b) shows how proof extraction time grows with tree size.

### Impact of Smaller Snapshot Sizes

- Smaller snapshot sizes have two effects:
  - More disk blocks are used for the same number of elements because some keys are replicated across more snapshots.
  - More hashing is required since every new copy of a key node must have a new hash label calculated.
- These effects are evident in Table 1 and Figure 10(a).

### Proof Extraction Experiments

- Each experiment consisted of 1,000 random searches for every size increment.
- This operation, which involves a tree traversal from the root to a leaf, is not affected by snapshot size but only by tree size (specifically, tree height).

**Figure 11: Proof Sizes in Skip Lists and RBB-Trees**
- **(a) Proof Size vs. Distance in Skip Lists**: Shows proof sizes in KBytes over 1,000 uniform random trials in a skip list of 100 million elements.
- **(b) Proof Size vs. RBB-Tree Size**: Shows proof sizes in KBytes over 1,000 uniform random trials in an RBB-Tree of three million elements.
- The skip list curve starts as a regular logarithmic curve, except for large distances close to the size of the entire list. This exception is likely due to all randomly chosen proofs being worst-case proofs for large distances.
- The RBB-Tree graph shows a regular logarithmic curve.

### System Performance

- Microbenchmarks help understand the basic performance of Timeweave but do not fully capture its real-world usage.
- In practice, Timeweave machines rarely need to insert thousands of elements into a skip list back-to-back, and most proof extractions span short distances.

**Figure 12: Timeweave Performance for Different Loads**
- **(a) Time Taken by Timeweave Maintenance per Step**: Shows the time taken for maintenance per one-second-long time step.
- **(b) Data Sent per Time Step**: Shows the amount of data sent per time step from a single Timeweave machine.
- The maintenance processing grows linearly with the ratio of threads per time step, indicating that all-to-all entanglement can scale to large service sets by limiting the entanglement frequency.
- For reasonably large service sets (up to 1000 Timeweave machines for 10-minute entanglement), maintenance costs range between 2% and 8% of the processing resources of a PC-grade server.
- The data rate itself is not a concern, but the number of different destinations for secure transmissions could limit how all-to-all entanglement scales.

### Conclusion

- This work extends the traditional idea of timestamping into the concept of a secure timeline, a tamper-evident historic record of system states.
- Timeline entanglement is introduced as a technique for creating undeniable temporal orderings across mutually distrustful service domains.
- Timeweave, a prototype implementation, is designed and evaluated based on append-only authenticated skip lists and disk-based, persistent authenticated search trees.
- Measurements indicate that several hundred service domains can be efficiently entangled at a frequency of once every ten minutes using Timeweave.
- Future work includes addressing the limitation of hidden events in dishonest service domains and migrating away from the all-to-all entanglement model to more scalable overlay architectures.

### Acknowledgments

- We thank Dan Boneh, Hector Garcia-Molina, and Neil Daswani for their valuable comments and questions.
- This work is supported by the Stanford Networking Research Center, DARPA, and Sonera Corporation. Petros Maniatis is supported by a USENIX Scholar Fellowship.

### References

- [1] Anagnostopoulos, A., Goodrich, M. T., and Tamassia, R. Persistent Authenticated Dictionaries and Their Applications. In Proceedings of the Information Security Conference (ISC 2001) (Malaga, Spain, Oct. 2001), vol. 2200 of Lecture Notes in Computer Science, Springer, pp. 379-393.
- [2] Ansper, A., Buldas, A., Saarepera, M., and Willemson, J. Improving the Availability of Time-Stamping Services. In Proceedings of the 6th Australasian Conference on Information and Privacy (ACISP 2001) (Sydney, Australia, July 2001).
- [3] Bayer, R. Symmetric binary B-trees: Data structure and maintenance algorithms. Acta Informatica 1 (1972), 290-306.
- [4] Bayer, R., and McCreight, E. M. Organization and Maintenance of Large Ordered Indexes. Acta Informatica 1, 3 (1972), 173-189.
- [5] Benaloh, J., and de Mare, M. Efficient Broadcast Time-stamping. Tech. Rep. TR-MCS-91-1, Clarkson University, Department of Mathematics and Computer Science, Apr. 1991.
- [6] Buldas, A., Laud, P., and Lipmaa, H. Accountable Certificate Management using Undeniable Attestations. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS 2000) (Athens, Greece, Nov. 2000), pp. 9-17.
- [7] Buldas, A., Laud, P., and Lipmaa, H. Eliminating Counterevidence with Applications to Accountable Certificate Management. Journal of Computer Security (2002). To appear.
- [8] Buldas, A., Laud, P., Lipmaa, H., and Villemson, J. Time-stamping with Binary Linking Schemes. In Advances on Cryptology (CRYPTO 1998) (Santa Barbara, USA, Aug. 1998), H. Krawczyk, Ed., vol. 1462 of Lecture Notes in Computer Science, Springer, pp. 486-501.
- [9] Cormen, T. H., Leiserson, C. E., and Rivest, R. L. Introduction to Algorithms, first ed. McGraw-Hill, 1989.
- [10] Goodrich, M. T., Tamassia, R., and Schwerin, A. Implementation of an Authenticated Dictionary with Skip Lists and Commutative Hashing. In 2001 DARPA Information Survivability Conference and Exposition (DISCEX 2001) (Anaheim, CA, USA, June 2001).
- [11] Haber, S., and Stornetta, W. S. How to Time-stamp a Digital Document. Journal of Cryptology: the Journal of the International Association for Cryptologic Research 3, 2 (1991), 99-111.
- [12] Just, M. Some Timestamping Protocol Failures. In Proceedings of the Symposium on Network and Distributed Security (NDSS 98) (San Diego, CA, USA, Mar. 1998), Internet Society.
- [13] Kocher, P. On Certificate Revocation and Validation. In Financial Cryptography (FC 1998) (1998), vol. 1465 of Lecture Notes in Computer Science, Springer, pp. 172-177.
- [14] Lamport, L. Time, Clocks, and the Ordering of Events in a Distributed System. Communications of the ACM 21, 7 (July 1978), 558-565.
- [15] Lamport, L., Shostak, R., and Pease, M. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems 4, 3 (July 1982), 382-401.
- [16] Maniatis, P., and Baker, M. Enabling the Archival Storage of Signed Documents. In Proceedings of the USENIX Conference on File and Storage Technologies (FAST 2002) (Monterey, CA, USA, Jan. 2002), USENIX Association, pp. 31-45.
- [17] Merkle, R. C. Protocols for Public Key Cryptosystems. In Proceedings of the 1980 Symposium on Security and Privacy (Oakland, CA, U.S.A., Apr. 1980), IEEE Computer Society, pp. 122-133.
- [18] Naor, M., and Nissim, K. Certificate Revocation and Certificate Update. In Proceedings of the 7th USENIX Security Symposium (San Antonio, TX, USA, Jan. 1998), pp. 217-228.
- [19] National Institute of Standards and Technology (NIST). Federal Information Processing Standard Publication 180-1: Secure Hash Standard. Washington, D.C., USA, Apr. 1995.
- [20] Pugh, W. Skip Lists: a Probabilistic Alternative to Balanced Trees. Communications of the ACM 33, 6 (June 1990), 668-676.
- [21] Quisquater, J. J., Massias, H., Avilla, J. S., Preneel, B., and Van Rompay, B. TIMESEC: Specification and Implementation of a Timestamping System. Technical Report WP2, Universit√© Catholique de Louvain, 1999.
- [22] Ratnasamy, S., Francis, P., Handley, M., Karp, R., and Shenker, S. A Scalable Content-Addressable Network. In Proceedings of the ACM SIGCOMM Symposium on Communication, Architecture, and Protocols (San Diego, CA, U.S.A., Aug. 2001), ACM SIGCOMM, pp. 161-172.
- [23] Schneier, B., and Kelsey, J. Cryptographic Support for Secure Logs on Untrusted Machines. In Proceedings of the 7th USENIX Security Symposium (San Antonio, TX, USA, Jan. 1998), pp. 53-62.
- [24] Stoica, I., Morris, R., Karger, D., Kaashoek, M. F., and Balakrishnan, H. Chord: A scalable peer-to-peer lookup service for internet applications. In Proceedings of the ACM SIGCOMM Symposium on Communication, Architecture, and Protocols (San Diego, CA, U.S.A., Aug. 2001), ACM SIGCOMM, pp. 149-160.
- [25] Surety, Inc. Secure Time/Date Stamping in a Public Key Infrastructure. Available at http://www.surety.com/.