### Speculation and Its Risks

Speculative execution attacks, such as those demonstrated by Meltdown, rely on the assumption that certain hardware mitigations can prevent address-based page faults. However, our results for the i9-9900K processor reveal the risks associated with relying solely on "spot" mitigations in hardware. While Meltdown-style attacks have been mitigated in silicon, RIDL (Rogue In-Flight Data Load) attacks, which exploit other types of exceptions, continue to be effective. This highlights the latent danger introduced by micro-optimizations, as it demonstrates for the first time a cross-address space and cross-privilege attack that relies only on in-flight, CPU-internal data.

### New Mitigations

The response to speculative execution attacks has primarily involved deploying spot mitigations in software before hardware mitigations become available. For example, the Kernel Page Table Isolation (KPTI) was used to separate address spaces between user and kernel space, but this approach increased kernel complexity and incurred performance penalties under certain workloads.

#### Mitigating RIDL in Software

Since sensitive information can be leaked from sibling hardware threads, Simultaneous Multithreading (SMT) must be disabled to mitigate RIDL. However, even within a single thread, it is possible to leak information from different privilege levels, including internal CPU systems like the Memory Management Unit (MMU). To protect sensitive information in the kernel or a different address space, the kernel needs to flush the Line Fill Buffers (LFBs) before returning to userland, similar to the L1 cache flush in the Foreshadow mitigation. Similarly, the hypervisor needs to flush the LFBs before switching to VM execution. For hardware-based components such as SGX or the MMU, LFB flushing cannot be easily done in software.

Furthermore, while Intel could provide an L1 flush mechanism via a microcode update, it is unclear whether a similar mechanism for flushing the LFBs is feasible. Even if such a mechanism were possible, its cost would likely be more expensive than the L1 flush on every context switch. The entire L1 cache needs to be flushed first, and then the mechanism must wait until the LFBs are drained before safely resuming execution. We believe such a mechanism would be too costly to be practical.

### Moving Forward

In this paper, we focused on speculation done on LFB entries. However, we believe there are several other sources of in-flight data, especially given decades of performance optimizations in the CPU pipeline. Because these optimizations are deeply embedded in the CPU pipeline, spot mitigations will likely be expensive. Moving forward, we see two directions for mitigating RIDL:

1. **Microcode Updates**: As Intel released a microcode update that mitigated SSB (Speculative Store Bypass) by completely disabling speculative store forwarding, a similar mitigation should be possible for all potential sources of speculation when applying micro-optimizations. It will then be up to system software to decide which optimizations to turn off until hardware mitigations become available.
2. **Fundamental Mitigations**: Finding all instances of RIDL will likely take a long time due to the complexity of these micro-optimizations. Therefore, rather than spot mitigations, which are often ineffective against newly discovered attacks, we need to start developing and deploying more fundamental mitigations against the many possible classes of speculative execution attacks.

### Conclusion

We presented RIDL, a new class of speculative execution vulnerabilities capable of leaking arbitrary, address-agnostic in-flight data from normal execution, including sandboxed environments like JavaScript in the browser. We showed that RIDL can be used to perform attacks across various security boundaries, and we presented real-world process-, kernel-, VM-, and SGX-level exploits. Current state-of-the-art mitigations, including in-silicon mitigations in Intel's recent CPUs, are unable to stop RIDL, and new software mitigations are at best non-trivial. RIDL challenges the current approach of "spot" mitigations for individual speculative execution attacks. Moving forward, we believe that more fundamental "blanket" mitigations should be favored over per-variant mitigations, not just for RIDL, but for speculative execution attacks in general.

### Disclosure

The authors from VU Amsterdam (VUSec) submitted PoC exploits for the RIDL class of vulnerabilities to Intel on September 12, 2018. Intel acknowledged the vulnerability and rewarded RIDL through the Intel Bug Bounty (Side Channel) Program. Since then, Intel led the disclosure process, notifying all affected software vendors and other hardware vendors potentially susceptible to similar issues. VUSec submitted the end-to-end analysis presented in this paper, including all the exploits (except the one in Section VI-D), to the IEEE Symposium on Security & Privacy on November 1, 2018.

Giorgi Maisuradze independently discovered the same class of vulnerabilities in June 2018 during a side-channel project at Microsoft Research. The findings were reported to Intel via the Microsoft Security Response Center. Section VI-D is based entirely on his findings.

Volodymyr Pikhur independently discovered and reported a RIDL-class exploit (L1TF mitigation bypass over uncached memory) to Intel on August 25, 2018. Dan Horea Lutas' team at Bitdefender reported an issue related to the RIDL vulnerabilities to Intel on August 17, 2018.

Statements from CPU vendors about RIDL are available in Appendix A.

### Acknowledgements

We would like to thank our shepherd, Hovav Shacham, and the anonymous reviewers for their valuable feedback. This work was supported by the European Union’s Horizon 2020 research and innovation programme, the United States Office of Naval Research (ONR), Intel Corporation, and the Netherlands Organisation for Scientific Research. This paper reflects only the authors’ view, and the funding agencies are not responsible for any use that may be made of the information it contains.

### References

[1] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg, “Meltdown: Reading Kernel Memory from User Space,” in USENIX Security’18.

[2] P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, “Spectre Attacks: Exploiting Speculative Execution,” in S&P’19.

[3] J. V. Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx, “Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution,” in USENIX Security’18.

[4] E. M. Koruyeh, K. N. Khasawneh, C. Song, and N. Abu-Ghazaleh, “Spectre Returns! Speculation Attacks using the Return Stack Buffer,” in USENIX WOOT’18.

[5] V. Kiriansky and C. Waldspurger, “Speculative Buffer Overflows: Attacks and Defenses,” in arXiv’18.

[6] P. Turner, “Retpoline: a Software Construct for Preventing Branch Target Injection,” https://support.google.com/faqs/answer/7625886, Jan 2018.

[7] F. Pizlo, “What Spectre and Meltdown Mean for WebKit,” https://webkit.org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/, Jan 2018.

[8] “Linux: L1TF - L1 Terminal Fault,” https://www.kernel.org/doc/html/latest/admin-guide/l1tf.html#mitigation-control-kvm Retrieved 15.10.2018.

[9] “KPTI - Linux Documentation,” https://www.kernel.org/doc/Documentation/x86/pti.txt Retrieved 15.10.2018.

[10] S. van Schaik, C. Giuffrida, H. Bos, and K. Razavi, “Malicious Management Unit: Why Stopping Cache Attacks in Software is Harder Than You Think,” in USENIX Security’18.

[11] D. Gullasch, E. Bangerter, and S. Krenn, “Cache Games–Bringing Access-Based Cache Attacks on AES to Practice,” in S&P’11.

[12] Y. Yarom and K. Falkner, “FLUSH + RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack.” in USENIX Security’14.

[13] D. A. Osvik, A. Shamir, and E. Tromer, “Cache Attacks and Countermeasures: the Case of AES,” in Cryptographers Track at the RSA Conference. Springer, 2006, pp. 1–20.

[14] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A Shared Cache Attack that Works Across Cores and Defies VM Sandboxing–and its Application to AES,” in S&P’15.

[15] M. Kayaalp, D. Ponomarev, N. Abu-Ghazaleh, and A. Jaleel, “A High-Resolution Side-Channel Attack on Last-Level Cache,” in DAC’16.

[16] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-Level Cache Side-Channel Attacks are Practical,” in S&P’15.

[17] R. Tomasulo, “An Efficient Algorithm for Exploiting Multiple Arithmetic Units,” IBM Journal of Research and Development, 1967.

[18] M. E. Thomadakis, “The Architecture of the Nehalem Processor and Nehalem-EP SMP Platforms,” 2011.

[19] D. W. Clift, D. D. Boggs, and D. J. Sager, “Processor with Registers Storing Committed/Speculative Data and a RAT State History Recovery Mechanism with Retire Pointer,” Oct 2003, US Patent 6,633,970.

[20] D. D. Boggs, S. Weiss, and A. Kyker, “Branch Ordering Buffer,” Sep 2004, US Patent 6,799,268.

[21] J. M. Abramson, D. B. Papworth, H. H. Akkary, A. F. Glew, G. J. Hinton, K. G. Konigsfeld, and P. D. Madland, “Out-Of-Order Processor With a Memory Subsystem Which Handles Speculatively Dispatched Load Operations,” Oct 1995, US Patent 5,751,983.

[22] G. N. Hammond and C. C. Scafid, “Utilizing an Advanced Load Address Table for Memory Disambiguation in an Out of Order Processor,” Dec 2003, US Patent 7,441,107.

[23] H.-S. Kim, R. S. Chappell, C. Y. Soo, and S. T. Srinivasan, “Store Address Prediction for Memory Disambiguation in a Processing Device,” Sep 2013, US Patent 9,244,827.

[24] V. Mekkat, O. Margulis, J. M. Agron, E. Schuchman, S. Winkel, Y. Wu, and G. Dankel, “Method and Apparatus for Recovering From Bad Store-To-Load Forwarding in an Out-Of-Order Processor,” Dec 2015, US Patent 9,996,356.

[25] T. Kurts, Z. Wayner, and T. Bojan, “Apparatus and Method for Bus Signal Termination Compensation During Detected Quiet Cycle,” Dec 2002, US Patent 6,842,035.

[26] A. Koker, T. A. Piazza, and M. Sundaresan, “Scatter/Gather Capable System Coherent Cache,” May 2013, US Patent 9,471,492.

[27] A. Yoaz, M. Erez, R. Ronen, and S. Jourdan, “Speculation Techniques for Improving Load Related Instruction Scheduling,” in ISCA’99.

[28] H. Akkary, J. M. Abramson, A. F. Glew, G. J. Hinton, K. G. Konigsfeld, P. D. Madland, M. S. Joshi, and B. E. Lince, “Methods and Apparatus for Caching Data in a Non-Blocking Manner Using a Plurality of Fill Buffers,” Oct 1996, US Patent 5,671,444.

[29] H. Akkary, J. M. Abramson, A. F. Glew, G. J. Hinton, K. G. Konigsfeld, P. D. Madland, M. S. Joshi, and B. E. Lince, “Cache Memory System Having Data and Tag Arrays and Multi-Purpose Buffer Assembly With Multiple Line Buffers,” Jul 1996, US Patent 5,680,572.

[30] S. Palanca, V. Pentkovski, S. Tsai, and S. Maiyuran, “Method and Apparatus for Implementing Non-Temporal Stores,” Mar 1998, US Patent 6,205,520.

[31] S. Palanca, V. Pentkovski, and S. Tsai, “Method and Apparatus for Implementing Non-Temporal Loads,” Mar 1998, US Patent 6,223,258.

[32] J. M. Abramson, H. Akkary, A. F. Glew, G. J. Hinton, K. G. Koningsfeld, and P. D. Madland, “Method and Apparatus for Performing Load Operations in a Computer System,” Dec 1997, US Patent 5,694,574.

[33] M. Bodas, G. J. Hinton, and A. F. Glew, “Mechanism to Improved Execution of Misaligned Loads,” Dec 1998, US Patent 5,854,914.

[34] J. M. Abramson, H. Akkary, A. F. Glew, G. J. Hinton, K. G. Konigsfeld, and P. D. Madland, “Method and Apparatus for Blocking Execution of and Storing Load Operations during their Execution,” Mar 1999, US Patent 5,881,262.

[35] A. Glew, N. Sarangdhar, and M. Joshi, “Method and Apparatus for Combining Uncacheable Write Data Into Cache-Line-Sized Write Buffers,” Dec 1993, US Patent 5,561,780.

[36] M. S. Joshi, A. F. Glew, and N. V. Sarangdhar, “Write Combining Buffer for Sequentially Addressed Partial Line Operations Originating From a Single Instruction,” May 1995, US Patent 5,630,075.

[37] S. Palanca, V. Pentkovski, N. L. Cooray, S. Maiyuran, and A. Narang, “Method and System for Optimizing Write Combining Performance in a Shared Buffer Structure,” Mar 1998, US Patent 6,122,715.

[38] J. D. Dundas, “Repair of Mis-Predicted Load Values,” Mar 2002, US Patent 6,883,086.

[39] Y.-K. Chen, C. J. Hughes, and J. M. Tuck, III, “System and Method for Cache Coherency in a Cache With Different Cache Location Lengths,” Dec 2004, US Patent 7,454,576.

[40] D. Kanter, “Intel’s Haswell CPU Microarchitecture,” 2012.

[41] Intel, “Intel 64 and IA-32 Architectures Optimization Reference Manual,” Jun 2016.

[42] Intel, “Write Combining Memory Implementation Guidelines,” 1998.

[43] A. F. Glew and G. J. Hinton, “Method and Apparatus for Processing Memory-Type Information Within a Microprocessor,” Dec 1996, US Patent 5,751,996.

[44] Intel, “Speculative Store Bypass,” https://software.intel.com/security-software-guidance/software-guidance/speculative-store-bypass Retrieved 15.10.2018.

[45] S. Palanca, V. Pentkovski, S. Maiyuran, L. Hacking, R. A. Golliver, and S. S. Thakkar, “Synchronization of Weakly Ordered Write Combining Operations Using a Fencing Mechanism,” Mar 1998, US Patent 6,073,210.

[46] S. Palanca, S. A. Fischer, S. Maiyuran, and S. Qawami, “MFENCE and LFENCE Micro-Architectural Implementation Method and System,” Jul 2002, US Patent 6,651,151.

[47] L. E. Hacking and D. Marr, “Synchronization of Load Operations Using Load Fence Instruction in Pre-Serialization/Post-Serialization Mode,” Feb 2001, US Patent 6,862,679.

[48] L. E. Hacking and D. Marr, “Globally Observing Load Operations Prior to Fence Instruction and Post-Serialization Modes,” Jan 2004, US Patent 7,249,245.

[49] A. Kivity, Y. Kamay, D. Laor, U. Lublin, and A. Liguori, “KVM: the Linux Virtual Machine Monitor,” in Proceedings of the Linux Symposium, vol. 1. Ottawa, Ontario, Canada, 2007, pp. 225–230.

[50] D. Hepkin, “Hyper-V HyperClear Mitigation for L1 Terminal Fault,” https://blogs.technet.microsoft.com/virtualization/2018/08/14/hyper-v-hyperclear/, Aug 2018.

[51] V. van der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss, C. Maurice, G. Vigna, H. Bos, K. Razavi, and C. Giuffrida, “Drammer: Deterministic Rowhammer Attacks on Mobile Platforms,” in CCS’16.

[52] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and H. Bos, “Flip Feng Shui: Hammering a Needle in the Software Stack,” in SEC’16.

[53] D. Gruss, C. Maurice, and S. Mangard, “Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript,” in DIMVA’16.

[54] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida, “Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector,” in SP’16.

[55] M. Seaborn and T. Dullien, “Exploiting the DRAM Rowhammer Bug to Gain Kernel Privileges,” in BHUS’15.

[56] P. Frigo, C. Giuffrida, H. Bos, and K. Razavi, “Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU,” in S&P’18.

[57] L. Cojocar, K. Razavi, C. Giuffrida, and H. Bos, “Exploiting Correcting Codes: On the Effectiveness of ECC Memory Against Rowhammer Attacks,” in S&P’19.

[58] A. Tatar, R. K. Konoth, E. Athanasopoulos, C. Giuffrida, H. Bos, and K. Razavi, “Throwhammer: Rowhammer Attacks over the Network and Defenses,” in USENIX ATC’16.

[59] A. Tatar, C. Giuffrida, H. Bos, and K. Razavi, “Defeating Software Mitigations against Rowhammer: A Surgical Precision Hammer,” in RAID’18.

[60] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on the Line: Practical Cache Attacks on the MMU,” in NDSS’17.

[61] J. Van Bulck, F. Piessens, and R. Strackx, “SGX-Step: A Practical Attack Framework for Precise Enclave Execution Control,” in SysTEX’17.

[62] T. C. Projects, “Mitigating Side-Channel Attacks,” https://www.chromium.org/Home/chromium-security/ssca Retrieved 31.12.2018.

[63] M. Bynens, “Untrusted Code Mitigations,” https://v8.dev/docs/untrusted-code-mitigations, Jan 2018.

[64] L. Wagner, “Mitigations Landing for New Class of Timing Attack,” Jan 2018, https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/ Retrieved 31.12.2018.

[65] T. Ritter, “Firefox - Fuzzy Timers Changes,” Oct 2018, https://hg.mozilla.org/mozilla-central/rev/77626c8d6bee.

[66] D. Kohlbrenner and H. Shacham, “Trusted Browsers for Uncertain Times.” in USENIX Security’16.

[67] “Re-enable SharedArrayBuffer + Atomics,” https://bugs.chromium.org/p/chromium/issues/detail?id=821270.

[68] R. Mcilroy, J. Sevcik, T. Tebbi, B. L. Titzer, and T. Verwaest, “Spectre is Here to Stay: An Analysis of Side-Channels and Speculative Execution.”

[69] “Process Firefox,” https://mozilla.github.io/firefox-browser-architecture/text/0012-process-isolation-in-firefox.html.

[70] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai, “SGXPECTRE Attacks: Leaking Enclave Secrets via Speculative Execution.”

[71] G. Maisuradze and C. Rossow, “ret2spec: Speculative Execution using Return Stack Buffers,” 2018.

[72] J. Horn, “Speculative Store Bypass,” https://bugs.chromium.org/p/project-zero/issues/detail?id=1528, May 2018.

[73] Intel, “Rogue Data Cache Load,” CVE-2018-3639, INTEL-SA-00115, https://software.intel.com/security-software-guidance/software-guidance/rogue-data-cache-load Retrieved 15.10.2018.