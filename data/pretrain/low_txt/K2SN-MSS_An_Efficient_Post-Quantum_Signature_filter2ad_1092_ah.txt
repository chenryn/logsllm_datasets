### Algorithm 8: Vector Operations and Reductions

In Algorithm 8, the multiplications in step 3 are followed by a `LazyReduced16` operation, ensuring that the components of the vectors \( y'_{i, j} \) fall within the range \([-256, +255]\). For the computation of the vectors \( y_{i, j} \) in step 4, we do not perform reduction for vector addition and subtraction. The subtraction uses \( k \cdot p \) for \( k = 22 \) and \( k = 25 \), resulting in the components of the output vector being at most 14 bits long.

The multiplications \( t'_{i, j} = y_{i, j} \odot 257 A'_{i, j} \) in Algorithm 8 are implemented using the above vector multiplication followed by a `Reduced16` operation, which ensures that each component of the output vector is 9 bits long. This eliminates the need for further reduction in the additions \( x'_{S,i} = x'_{S,i} \oplus 257 t'_{i, j} \), resulting in vectors whose components are at most 13 bits long. Finally, a `Reduced16` operation is applied to the vector \( x'_{S,i} \) to produce the final result, where all components of \( x'_{S,i} \) are at most 9 bits.

These optimizations reduce the number of reduction operations. Figures 2, 3, 4, and 5 show that the total number of vector operations required for steps 3 and 4 of 16-way parallelization of NTT is significantly smaller than the number of operations required for 8-way parallelization, leading to a substantial speedup in the implementation of SWIFFT-16-avx2.

### Implementation of Cover-Free-Family (CFF)

KSN uses a 1-CFF, which is obtained by taking all subsets of size \( t/2 \) from a set of size \( t \). Each subset corresponds to a particular message. For efficient encoding of messages, we use the algorithm proposed in [8, 12, 40]. This allows us to use a \(\log_2 \binom{t}{t/2}\)-bit message space.

### Implementation of Pseudo-Random Function

We use ChaCha20 [6] as the pseudo-random function family \( F_n \). ChaCha20 is a state-of-the-art stream cipher used to generate the seed of each KSN-OTS from the secret key of K2SN-MSS and all the component secret keys of the OTS instances. We use the avx2-based implementation of ChaCha20 from supercop [2].

### Experiments

#### Platform
- **CPU**: Intel® Core™ i7-6700 4-core @ 3.40 GHz
- **OS**: 64-bit Ubuntu-18.04 LTS
- **Compiler**: GCC version 7.3.0
- **Code Availability**: [23]
- **Experimental Setup**: Turbo boost and hyper-threading were turned off. Cache warm-up was done with 25,000 iterations, and measurements were taken as the median over 100,000 iterations.

#### Performance Comparison of SWIFFT Implementations

We have implemented all parallelized versions of the SWIFFT function using 16-bit AVX2 intrinsic instructions. Each element of \( \mathbb{Z}_{257} \) is represented by 9 bits. The SWIFFT evaluations were computed over 1024-bit data blocks. The generalized SWIFFT function uses 9 × 1024-bit data blocks as input. The output in both cases is a 9 × 64 = 576-bit string. For binary versions of SWIFFT-8-avx2 and SWIFFT-16-avx2, we require approximately 8 KB and 2 MB memory for the precomputation tables, respectively. The Time Stamp Counter (TSC) was read from the CPU to RAX and RDX registers using the RDTSC instruction. All experimental results are listed in Table 7. The results show that SWIFFT-8-avx2 and SWIFFT-16-avx2 are approximately 8% and 25% faster than the previous implementation in [5, 28]. Based on these results, we use SWIFFT-16-avx2 for K2SN-MSS.

| Function Name | Intrinsic Flag | Binary Version | clk/byte | Total Clk | Generalized Version | clk/byte | Total clk |
|---------------|----------------|----------------|-----------|------------|---------------------|-----------|------------|
| SWIFFT-8-sse2 [31] | - | - | 9.93 | - | - | 8.98 | - |
| SWIFFT-8-avx2 [this paper] | mavx2 | mavx2 | 8.27 | 1150 | mavx2 | 8.17 | 11435 |
| SWIFFT-16-avx2 [this paper] | mavx2 | mavx2 | 6.77 | 866 | mavx2 | 6.77 | 9535 |

#### Performance Comparison of KSN-OTS and W-OTS+

KSN-OTS and W-OTS+ are the one-time signature (OTS) schemes used in K2SN-MSS and XMSS, respectively. We compare both schemes at \( n = 512 \). For W-OTS+, we used the code for XMSS [19], available at [1, 3]. The Time Stamp Counter reading did not work with the XMSS code, so we used the `clock()` function from the `time.h` header file. Our measurements are the average over 1,000,000 iterations. The results of the performance comparison are in Table 8, showing that the key generation of KSN-OTS is approximately 22 times faster than that of W-OTS+, while signing and verification are approximately 23 and 167 times faster, respectively. This performance is due to the simple signing operation (generation of component secret keys and component-wise vector addition) and the efficient implementation of дSWIFFT used in the verification operation of KSN-OTS.

| Scheme | Key Generation (µs) | Signing (µs) | Verification (µs) | Secret Key (Bytes) | Public Key (Bytes) | Signature Sizes (Bytes) |
|--------|---------------------|--------------|-------------------|--------------------|--------------------|-------------------------|
| KSN/SWIFFT-16-avx2 | 164 | 83 | 10 | 40 | 4608 | 1024 |
| W-OTS+/SHA512/w=16 | 3575 | 1872 | 1674 | 64 | 4352 | 4288 |

#### Performance Comparison between K2SN-MSS and XMSS

Timing measurements were conducted as described in Section 6.2. We compare our implemented software against the XMSS software results available at [15]. We used the SWIFFT-16-avx2 implementation of K2SN-MSS. The authentication path was computed using the TREEHASH algorithm of [10]. The results of the performance comparisons are in Table 1, showing that the key generation, signing, and verification of K2SN-MSS are 2.76, 2.89, and 2.65 times faster than the corresponding operations in XMSS [15], respectively.

### Remarks

1. The signature size of K2SN-MSS is comparable to the signature sizes of XMSSMT [20] and SPHINCS [7], but we cannot directly compare K2SN against XMSSMT and SPHINCS because the use of the Merkle tree differs. K2SN-MSS and XMSS (single tree version of XMSSMT) use only one layer of Merkle tree, while XMSSMT and SPHINCS use multiple layers.
2. To compare K2SN-MSS against XMSSMT and SPHINCS, we need optimized software for \( n = 512 \). However, no such implementation providing 512-bit classical (256-bit quantum) security is available in the literature.
3. Our comparison is against the multi-buffer entries of the third row of TABLE IV of [15] because:
   - It is the only reported result for SHA512, where SWIFFT output is 576 bits.
   - The experimental platform of [15] was Skylake: Intel® Core™ i7-6700 4-core @ 4.0 GHz, which is a faster machine than the one used in our experiments. Therefore, the comparisons in Table 1 are valid and fair.

### Concluding Remarks

Hash-based signatures are a strong alternative for post-quantum signatures. We extended KSN-OTS for signing multiple messages, secure under multi-function multi-target attacks, and provided an efficient implementation using parallelization at the instruction level with widely accessible Intel technology. Our implementation also improves the state-of-the-art implementation of SWIFFT and provides parallelization of NTT computation, both of independent interest. Although our results are for specific levels of parallelization, the implementation details provide a template for other parameters, for binary and non-binary input vectors, and with or without precomputation. Our implementation shows that K2SN-MSS is significantly faster than XMSS, recently proposed as a candidate for standardization.

In our implementation, we used SWIFFT for both KSN-OTS and the Merkle hash tree. Although SWIFFT is essential in KSN-OTS, the Merkle tree can use traditional hash functions like SHA512. Using SWIFFT for the construction of L trees and MSS has several advantages: it reduces code complexity, SWIFFT has provable (asymptotic) security, and it is highly parallelizable, benefiting from processor architectures with longer registers to achieve higher speed.

### References

[1] Hülsing. https://huelsing.wordpress.com/code/.
[2] Supercop: Version 2017.12.18. https://bench.cr.yp.to/supercop.html.
[3] xmss-reference. https://github.com/joostrijneveld/xmss-reference.
[4] The Internet Engineering Task Force. https://tools.ietf.org/html/rfc8391.
[5] Y. Arbitman, G. Dogon, V. Lyubashevsky, D. Micciancio, C. Peikert, and A. Rosen. 2008. SWIFFTX: A Proposal for the SHA-3 Standard. https://www.eecs.harvard.edu/~alon/PAPERS/lattices/swifftx.pdfl.
[6] D. J. Bernstein. 2008. ChaCha, a variant of Salsa20.
[7] D. J. Bernstein, D. Hopwood, A. Hülsmann, T. Lange, R. Niederhagen, L. Papachristodoulou, P. Schwabe, and Z. W. O’Hearn. 2015. SPHINCS: Practical Stateless Hash-Based Signatures. In Advances in Cryptology – EUROCRYPT (Lecture Notes in Computer Science), Vol. 9056. Springer, 368–397.
[8] K. Bicakci, G. Tsudik, and B. Tung. 2003. How to construct optimal one-time signatures. Journal of Computer Networks 43, 3 (2003), 339–349.
[9] J. Buchmann, E. Dahmen, and A. Hülsing. 2011. XMSS - A Practical Forward Secure Signature Scheme Based on Minimal Security Assumptions. In Post-Quantum Cryptography – PQCrypto (Lecture Notes in Computer Science), Vol. 7071. Springer, 117–129.
[10] J. Buchmann, E. Dahmen, and M. Schneider. 2008. Merkle Tree Traversal Revisited. In Post-Quantum Cryptography - PQCrypto (Lecture Notes in Computer Science), Vol. 5299. Springer, 63–78.
[11] N. Courtois, M. Finiasz, and N. Sendrier. 2001. How to Achieve a McEliece-based Digital Signature Scheme. In Advances in Cryptology – ASIACRYPT (Lecture Notes in Computer Science), Vol. 2248. Springer, 157–174.
[12] T. Cover. 1973. Enumerative Source Encoding. IEEE Transactions on Information Theory 19, 1 (1973), 73–77.
[13] E. Dahmen, K. Okeya, T. Takagi, and C. Vuillaume. 2008. Digital Signatures Out of Second-Preimage Resistant Hash Functions. In Post-Quantum Cryptography – PQCrypto (Lecture Notes in Computer Science), Vol. 5299. Springer, 109–123.
[14] A. Das and C. E. Veni Madhavan. 2009. Public-Key Cryptography: Theory and Practice. Pearson.
[15] A. K. D. S. de Oliveira, J. LÂťopez, and R. Cabral. 2017. High Performance of Hash-based Signature Schemes. International Journal of Advanced Computer Science and Applications 8, 3 (2017).
[16] W. Diffie and M. E. Hellman. 1976. New directions in cryptography. IEEE Transactions on Information Theory 22, 6 (1976), 644–654.
[17] L. Ducas, A. Durmus, T. Lepoint, and V. Lyubashevsky. 2013. Lattice Signatures and Bimodal Gaussians. In Advances in Cryptology – CRYPTO (Lecture Notes in Computer Science), Vol. 8042. Springer, 40–56.
[18] A. Fog. 2016. Software optimization resources. http://agner.org/optimize/.
[19] A. Hülsing, D. Butin, S.-L. Gazdag, and A. Mohaisen. 2017. XMSS: Extended Hash-Based Signatures. draft-irtf-cfrg-xmss-hash-based-signatures, work in progress.
[20] A. Hülsing, L. Rausch, and J. Buchmann. 2013. Optimal Parameters for XMSSMT. In Security Engineering and Intelligence Informatics: CD-ARES (Lecture Notes in Computer Science), Vol. 8128. Springer, 194–208.
[21] A. Hülsing, J. Rijneveld, and F. Song. 2016. Mitigating Multi-target Attacks in Hash-Based Signatures. In Public Key Cryptography – PKC (Lecture Notes in Computer Science), Vol. 9614. Springer, 387–416.
[22] Intel. [n. d.]. https://software.intel.com/sites/landingpage/IntrinsicsGuide/#.
[23] K2SN-MSS. [n. d.]. https://github.com/anon1985/K2SN-MSS.
[24] K. Kalach and R. Safavi-Naini. 2016. An Efficient Post-Quantum One-Time Signature Scheme. In Selected Areas in Cryptography – SAC (Lecture Notes in Computer Science), Vol. 9566. Springer, 331–351.
[25] L. Lamport. 1979. Constructing Digital Signatures from a One Way Function. technical report of SRI International.
[26] P. Longa and M. Naehrig. 2016. Speeding up the Number Theoretic Transform for Faster Ideal Lattice-Based Cryptography. In Cryptology and Network Security – CANS (Lecture Notes in Computer Science), Vol. 10052. Springer, 124–139.
[27] V. Lyubashevsky and D. Micciancio. 2006. Generalized Compact Knapsacks Are Collision Resistant. In International Colloquium on Automata, Languages, and Programming – ICALP (Lecture Notes in Computer Science), Vol. 4052. Springer, 144–155.
[28] V. Lyubashevsky, D. Micciancio, C. Peikert, and A. Rosen. 2008. SWIFFT: A Modest Proposal for FFT Hashing. In Fast Software Encryption – FSE (Lecture Notes in Computer Science), Vol. 5086. Springer, 54–72.
[29] R. C. Merkle. 1987. A Digital Signature Based on a Conventional Encryption Function. In Advances in Cryptology – CRYPTO (Lecture Notes in Computer Science), Vol. 293. Springer, 369–378.
[30] R. C. Merkle. 1989. A Certified Digital Signature. In Advances in Cryptology – CRYPTO (Lecture Notes in Computer Science), Vol. 435. Springer, 218–238.
[31] D. Micciancio. [n. d.]. https://github.com/micciancio/SWIFFT.
[32] D. Micciancio. 2007. Generalized Compact Knapsacks, Cyclic Lattices, and Efficient One-Way Functions. Computational Complexity 16, 4 (2007), 365–411.
[33] D. Moody. [n. d.]. Stateful hash-based signatures.
[34] NIST. Post-Quantum Cryptography - Call for Proposals. https://csrc.nist.gov/Projects/Post-Quantum-Cryptography/Post-Quantum-Cryptography-Standardization/Call-for-Proposals.
[35] C. Peikert and A. Rosen. 2006. Efficient Collision-Resistant Hashing from Worst-Case Assumptions on Cyclic Lattices. In Theory of Cryptography Conference – TCC (Lecture Notes in Computer Science), Vol. 3876. Springer, 145–166.
[36] J. Rompel. 1990. One-way functions are necessary and sufficient for secure signatures. In ACM symposium on Theory of computing – STOC. ACM, 387–394.
[37] P. W. Shor. 1994. Algorithms for quantum computation: discrete logarithms and factoring. In Proceedings 35th Annual Symposium on Foundations of Computer Science. 124–134.
[38] T. Simonite. [n. d.]. MIT Technology Review.
[39] W. Sun, H. Guo, H. He, and Z. Dai. 2007. Design and optimized implementation of the SHA-2(256, 384, 512) hash algorithms. In International Conference on ASIC. IEEE, 858–861.
[40] G. M. Zaverucha and D. R. Stinson. 2011. Short one-time signatures. Advances in Mathematics of Communications–AMC 5, 3 (2011), 473–488.