### 4.1 Protection Level

**Figure 2a** illustrates the lower 16 bits of the `protectionLevel` field, with the higher 16 bits currently unused. The lower 4 bits specify the protection level of a permission. The protection level is determined by performing a bitwise AND operation between the `protectionLevel` field and the `MASK_BASE` constant. Since a permission can have only one protection level, these values are sequential: 
- **Normal**: 0
- **Dangerous**: 1
- **Signature**: 2
- **Signature|System**: 3

Interestingly, although `signature|system` has a higher protection level value, `signature` permissions are considered more sensitive. If a permission's protection level is not specified in the manifest file, it defaults to the `signature` protection level.

**Protection Level Flags**:
- These flags can only be used with `signature` permissions. Using them with other protection levels will result in an error during manifest parsing.
- The `FLAG_PRIVILEGED` flag ensures that only apps signed with the same certificate or installed in a special location can obtain the permission. Until Android 4.4, all system image-installed applications were granted privileged permissions by default. To reduce the attack surface, system apps were later divided into ordinary and privileged ones. Ordinary system apps remain in the `/system/app` directory but no longer receive privileged permissions. To obtain privileged permissions, an app must be installed in the `/system/priv-app` folder. Alternatively, setting the protection level to `signature|system` (deprecated since Android 6.0) achieves the same effect.
- **Development Permissions** (marked with `FLAG_DEVELOPMENT`) were introduced in Android 4.1. These permissions protect functionality required for development tasks, such as reading system logs (`READ_LOGS`). Apps can request these permissions, but they are not automatically granted. Users can grant or revoke these permissions at runtime using the `pm grant` and `pm revoke` commands in the Android shell.
- **FLAG_APPOP** was introduced in Android 5.0 and explicitly used from Android 6.0. This flag allows third-party apps selective access to critical platform operations protected by `signature` permissions, with explicit user approval. By default, third-party apps do not have access to these resources. For each `appop` type permission, there is a separate configuration screen where users can grant or revoke access for system and third-party apps. For example, Figure 1b shows the screen for the `PACKAGE_USAGE_STATS` permission. The enforcement of these permissions is managed through the AppOps system.
- **FLAG_PRE23** indicates that the corresponding permission is automatically granted to apps targeting pre-Android 6.0 (API levels < 23). For instance, the `SYSTEM_ALERT_WINDOW` permission had a `dangerous` level before Android 6.0 and was granted automatically upon installation. In Android 6.0, its protection level changed to `signature`, causing issues for apps targeting earlier API versions. `FLAG_PRE23` resolves this by automatically granting the permission to apps targeting previous Android versions.
- **FLAG_INSTALLER** and **FLAG_VERIFIER** (introduced in Android 6.0) indicate that permissions are automatically granted to packages set as the required installer and verifier. The installer package must be installed on the system image, and the verifier package must be granted the `PACKAGE_VERIFICATION_AGENT` permission, which has a `signature|privileged` protection level.
- **FLAG_PREINSTALLED** (added in Android 6.0) indicates that the permission can be granted to any app installed in the system partition, not just those in the privileged folder.

### 4.2 Permission Flags

Permission flags were introduced in Android 4.2. Internally, these flags are represented as a 32-bit integer field, as shown in **Figure 2b**. They are controlled through the `android:permissionFlags` attribute of the `<permission>` tag. Only the `FLAG_COSTS_MONEY` and `FLAG_HIDDEN` flags can be set through this attribute; `FLAG_INSTALLED` is not accessible via a permission declaration.

- **FLAG_COSTS_MONEY** (introduced in Android 4.1) influences how a permission is presented to the user. Permissions with this flag are marked with a "coins" sign during app installation (in versions before Android 6.0). There are no restrictions on the use of this flag, so even custom permissions can use it.
- **FLAG_HIDDEN** (introduced in Android 6.0) hides a permission from the user's view. It is used for deprecated and removed platform permissions, but developers can also use it to conceal custom dangerous permissions.
- **FLAG_INSTALLED** (introduced in Android 6.0) is set by the operating system to indicate that the permission has been installed. This flag affects the presentation of permissions. For example, if a permission is not declared by an application but requested by another app, it will not be shown in the list of requested permissions.

### 5 Analysis of Permission Changes

To empirically investigate the evolution of the Android permission system across platform updates, we retrieved the source code of the Android platform for versions released from 2009 to 2015, resulting in API level changes. Table 1 provides an overview of the Android platform releases covered in our study.

Our analysis aimed to detect changes in the permission system. We focused on platform permissions and did not cover custom permissions defined by third-party applications. Platform permissions are categorized into four groups:
- **Sample**: Permissions declared by sample apps shipped with the platform source code (appeared from API 21).
- **Test**: Permissions declared in the manifest files of packages developed for testing purposes.
- **Package**: Permissions declared in various packages complementing the framework, excluding test and sample groups.
- **Core**: Permissions declared in the core Android manifest file located in the `frameworks/base/core/res` folder.

The categories reflect the basic purposes of permissions within AOSP. Core and package permissions are the true permissions used for access control, while sample and test permissions are auxiliary. Our study focuses on core and package permissions as they significantly influence the behavior of the operating system.

A study by Wei et al. in 2012 revealed a steady increase in the number of permissions with each Android release [49]. Our study, as of early 2016, confirms this finding, showing that the total number of permissions declared in the Android platform continues to grow, reaching 314 in API 23 compared to 165 in API 15 (the last version analyzed by Wei et al. [49]). Figures 3a and 3b illustrate the growth in the number of core and package permissions, respectively. The main contributor to this continuous increase is core permissions, while the number of package permissions fluctuates but still shows an overall upward trend. These plots also demonstrate changes in the number of permissions with different protection levels. Table 2 characterizes the changes between consecutive API levels, confirming that almost every Android API release (except API 6, 7, and 10) introduced new permissions, as new platform functionality often requires additional access control.