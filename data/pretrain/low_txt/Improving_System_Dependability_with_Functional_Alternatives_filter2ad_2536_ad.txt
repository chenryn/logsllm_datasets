### Higher Utility Values and Component Performance

Configurations with higher utility values and more working components perform significantly worse than those with lower utility values. Upon analyzing the data, we discovered that this discrepancy is due to an unforeseen interaction between the characteristics of up-peak traffic profiles and the alternative functionality mechanisms implemented in the system.

### Up-Peak Traffic Characteristics

Up-peak traffic is characterized by 90% of passengers arriving on the first floor to use the elevator. The default drive controller algorithm, which starts at the first floor, stops at every floor until it reaches the top, and then returns to the first floor, is better suited for this traffic pattern. This approach is efficient because most passengers arrive on the first floor and exit on other floors.

In contrast, the dispatcher’s normal algorithm, optimized for two-way traffic, performs reasonably well for up-peak traffic only if the first-floor hall call button is functional. If the first-floor hall call button is broken, the dispatcher will visit the first floor periodically but not as frequently as needed for optimal performance, given the high volume of passengers arriving there. All extreme outlying points in Figure 5 can be traced to configurations where the dispatcher was operational, but the first-floor hall call button was not.

### Down-Peak Traffic and First-Floor Buttons

Similar discrepancies were observed with down-peak passenger profiles, and these were traced to the first-floor car call button. Our utility model, which gave equal weights to the utility contributions from all hall call buttons, was relatively accurate for random two-way elevator traffic patterns but less accurate for up-peak and down-peak traffic. This inaccuracy is partly due to the critical role of the first-floor button requests in efficiently processing up-peak and down-peak traffic. When the first-floor hall call and car call buttons fail, the system's performance degrades severely, and our utility model does not account for this. These findings suggest that additional hardware redundancy should be added to the first-floor buttons, as they are crucial for system performance during up-peak and down-peak periods.

### Redundant First-Floor Buttons

Figure 6 shows the results of experiments with redundant first-floor buttons for up-peak traffic profiles. Once the first-floor buttons are removed from the possible failure configurations, our model more closely matches the performance of the elevator on up-peak and down-peak passenger profiles. Additionally, the performance of nearly all configurations significantly improves, with all average passenger delivery times for all configurations being less than 1,200 seconds, compared to some configurations in previous experiments having average passenger delivery times as high as 6,000 seconds.

### Conclusions

This paper introduces alternative functionality as a mechanism for improving system dependability without requiring dedicated backup redundancy. Alternative functionality leverages the fact that different system functions can still satisfy the same primary objectives, albeit at different service levels. We view functional alternatives as a generalization of redundancy mechanisms, focusing on exploiting existing functionality rather than adding dedicated backup redundancy. Our system model identifies subsystems that can represent functional alternatives and enables the analysis and evaluation of the architecture and implemented functional alternatives for dependability improvements.

Experiments on a simulated implementation of an elevator control system revealed that the original elevator design could only tolerate failures in the car position indicator and car lanterns without failing to deliver passengers. However, our elevator design with functional alternatives could withstand a loss of up to 75% of the system’s components and still provide service to all passengers, albeit at reduced performance. Every configuration tested on the improved elevator delivered all passengers in all tests, satisfying the elevator's primary objectives despite a loss of system functionality.

When comparing experimental results with our system utility model, we found that the first-floor hall call and car call buttons have a significant impact on system performance for up-peak and down-peak traffic profiles. This led to our decision to incorporate redundant components in only these buttons, resulting in a significant utility improvement for many component failure combinations. This indicates that our model and evaluation techniques are useful tools for ensuring that a system implementation provides the expected level of dependability from the architecture design.

We did not explicitly design failure recovery scenarios for every possible combination of component failures but instead built individual software components to take advantage of alternative functionality. The components were designed to ignore optional input variables when they were not available and follow a default behavior. This approach is fundamentally different from brute-force redundancy or explicitly designing fault tolerance for all possible failure combinations. Properties of the software architecture, such as component interfaces and the identification and partitioning of system functionality into logical subsystems, are key to effectively implementing functional alternatives. This case study demonstrates the potential of functional alternatives for improving dependability in distributed embedded system designs.

### Acknowledgments

This work was supported in part by the General Motors Collaborative Research Laboratory at Carnegie Mellon University, the High Dependability Computing Program from NASA Ames cooperative agreement NCC-2-1298, the Pennsylvania Infrastructure Technology Alliance, and Lucent Technologies.

### References

[1] Avizienis, A., “The N-version approach to fault-tolerant software,” IEEE Transactions on Software Engineering, SE-11(12), December 1985, pp. 1491-1501.
[2] Bodson, M., Lehoczky, J., et al., “Control reconfiguration in the presence of software failures,” Proceedings of the 32nd IEEE Conference on Decision and Control, San Antonio, TX, USA, December 1993, pp. 2284-2289.
[3] Keeney, R.L., Raiffa, H., Decisions with Multiple Objectives: Preference and Value Tradeoffs, John Wiley & Sons, New York, 1976.
[4] Keeney, R.L., Value-Focused Thinking: A Path to Creative Decisionmaking, Harvard University Press, Cambridge, MA, 1992.
[5] Knight, J.C., Sullivan, K.J., “On the Definition of Survivability,” University of Virginia, Department of Computer Science, Technical Report CS-TR-33-00, 2000.
[6] Knight, J.C., Strunk, E.A., Sullivan, K.J., “Towards a Rigorous Definition of Information System Survivability,” DISCEX 2003, Washington DC, April 2003.
[7] Meyer, J.F., “On Evaluating the Performability of Degradable Computing Systems,” The Eighth Annual International Conference on Fault-Tolerant Computing (FTCS-8), Toulouse, France, June 1978, pp. 44-49.
[8] Meyer, J.F., Sanders, W.H., “Specification and Construction of Performability Models,” Proceedings of the Second International Workshop on Performability Modeling of Computer and Communication Systems, Mont Saint-Michel, France, June 1993.
[9] Mittal, A., Manimaran, G., Murthy, C.S.R., “Integrated Dynamic Scheduling of Hard and QoS Degradable Real-Time Tasks in Multiprocessor Systems,” Proceedings of the Fifth International Conference on Real-Time Computing Systems and Applications, Hiroshima, Japan, October 1998, pp. 127-136.
[10] Nace, W., “Automatic Graceful Degradation for Distributed Embedded Systems,” Ph.D. dissertation, Dept. of Electrical And Computer Engineering, Carnegie Mellon University, May 2002.
[11] Patton, R. J., Chen, J., “Advances in Fault Diagnosis Using Analytical Redundancy,” IEE Colloquium on Plant Optimisation (Integrated Profit Operations Management and Control), London, UK, January 1993, pp. 6/1 - 6/12.
[12] Randell, B., “System Structure for Software Fault Tolerance,” IEEE Transactions on Software Engineering, vol. SE-1, No. 2, June 1975, pp. 220-232.
[13] Ramanathan, P., “Graceful Degradation in Real-Time Control Applications Using (m, k)-firm Guarantee,” 27th Annual international Conferences on Fault-Tolerant Computing, Seattle, WA, USA, June 1997, pp. 132-141.
[14] Rennels, D., “Fault-Tolerant Computing - Concepts and Examples”, IEEE Transactions on Computers C-33, No. 12, December 1984, pp. 1116-1129.
[15] Shelton, C., Koopman, P., Nace, W., “A Framework for Scalable Analysis and Design of System-wide Graceful Degradation in Distributed Embedded Systems,” Eighth IEEE International Workshop on Object-oriented Real-time Dependable Systems (WORDS 2003), Guadalajara, Mexico, January 2003.
[16] Shelton, C., “Scalable Graceful Degradation for Distributed Embedded Systems,” Ph.D. dissertation, Dept. of Electrical And Computer Engineering, Carnegie Mellon University, August 2003.
[17] Shelton, C., Koopman, P., “Using Architectural Properties to Model and Measure Graceful Degradation,” in ArchitecTing Dependable Systems, LNCS 2677, pp. 267-289, de Lemos, R. et al. (Eds.), Springer-Verlag, Berlin, 2003.
[18] Strakosch, G.R., ed., The Vertical Transportation Handbook, Third Edition, John Wiley & Sons, Inc., New York, 1998.
[19] Verissimo, P., Rodrigues, L., Distributed Systems for System Architects, Kluwer Academic Publishers, Boston, 2001.