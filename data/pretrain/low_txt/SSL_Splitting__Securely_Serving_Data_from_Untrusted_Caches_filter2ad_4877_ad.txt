### 6.4 Latency

When the proxy’s cache is cold, SSL splitting performs similar work to regular SSL; thus, we expect their latency characteristics to be similar. However, the presence of repeated requests in the trace complicates the analysis of latency factors, as cached files are faster to download than uncached files. To address this issue, we filtered out repetitions from the `www.lcs` trace chunk and used the resulting uncacheable trace to measure the start and end times of each request. To avoid congestion effects, we performed requests one at a time.

The resulting graph of latencies versus file size is shown in Figure 12. The graph shows three clear lines, one for each of HTTP, HTTPS, and cold SSL splitting. Cold SSL splitting is approximately 10% faster than HTTPS for small file sizes and about 10% slower for large file sizes. For the most part, the latencies are closely matched, with the majority of file downloads showing less than a 5% difference between the two methods.

### 7 Discussion

#### 7.1 The Implications of Key Exposure

The implementation of SSL splitting provides the option to accept clients using a cipher suite with encryption and to intentionally expose the encryption key to the proxy (see Section 3.4). Since the only indication of security in most web browsers is a simple on/off lock icon, there is a legitimate question of whether it is reasonable to mislead clients about the security of their communications with the server. We expect that most applications of SSL splitting will not involve any Web forms, as caching dynamic content would be pointless. However, a user browsing a URL beginning with `https:` might reasonably believe that their browsing pattern is secure against eavesdroppers. The only way to address this is to notify the user in the text of the Web page.

In any case, normal SSL does not guarantee that the server will keep its transmissions private. SSL splitting is merely equivalent to an SSL server that sends a carbon copy of all transmissions to a proxy.

#### 7.2 Alternative Proxy Design

In the current design of the SSL splitting protocol, the cache operates as a transparent forwarding proxy at the level of SSL records. An alternative approach would be to have the client connect directly to the server, with the server compressing its outgoing stream by converting outgoing IP packets containing SSL records into stub records sent to the cache. The cache would then reconstitute the IP packets and send them to the client, forging the server’s IP address and TCP header. This approach would reduce the number of round-trip packet flight times from four to three and would also allow the server to "stripe" a connection with a single client across multiple caches. Additionally, no DNS or HTTP redirection techniques would be necessary, as the client's transmissions would be directly to the server.

However, operating at the IP layer instead of the SSL record layer is fraught with peril. Operating system interfaces are nonstandard and unreliable, networks are likely to black-hole forged packets, and TCP may not behave properly. Such an approach also risks creating an "open relay" that could be used by malicious clients to hide the source of a denial-of-service attack.

### 8 Related Work

Caching and replication in the Web have been extensively studied. Like content-distribution networks [12] and peer-to-peer systems [17], the primary focus of Barnraising is cooperatively sharing the load of serving data. The main difference between Barnraising and previous work is the use of SSL splitting, which allows Barnraising to serve data securely through untrusted proxies to unmodified clients.

#### 8.1 Verifying Integrity

The standard approach to providing data integrity is to sign the cryptographic hash of the data with the server’s private key (or the data owner’s private key). When the client receives the data and its signature (perhaps through different channels), it verifies the integrity of the data by verifying the signature. This solution is typically bundled in the client of a specific application, which users must download to use the application. Examples include RPM [25] and FreeNet [2].

The system closest in spirit to Barnraising is read-only SFS [8]. SFSRO allows the secure distribution of software bundles through untrusted machines, providing a generic file system interface that allows unmodified applications to use SFSRO to distribute data securely. However, SFSRO requires that an SFS client runs on the client machine, which restricts its deployment to SFS users. Unlike SSL splitting, the SFSRO server needs to serve only the root block to clients, and the computational requirements on the server, untrusted machines, and client are low.

The Secure HTTP (S-HTTP) [20] protocol contains built-in support for caching proxies in the form of the "320 SHTTP Not Modified" response code. Like SSL splitting, S-HTTP provides an end-to-end freshness and integrity guarantee but also offers limited confidentiality from the proxy. S-HTTP’s computational requirements are similar to SSL, and like SFSRO, the deployment of this protocol is limited.

Untrusted surrogates [6] allow storage-limited clients to cache data on nearby surrogate machines. A server stores data on the surrogate on behalf of the client and sends the hash of the data to the client, allowing the client to verify the integrity of the data when retrieved from the surrogate.

#### 8.2 HTTPS Proxies

WASP is a proxy for HTTPS connections [14]. Like SSL splitting, it does not require client changes and defines a separate protocol between the proxy and the server. Unlike SSL splitting, WASP sends the SSL master secret to the proxy. Since SSL uses the master secret to compute the session keys for both encryption and authentication, this solution places more trust in the proxy than SSL splitting does. A malicious WASP proxy can alter the cached data without the client knowing.

Proxy certificates [23] provide restricted impersonation within an X.509 public-key infrastructure. A Web site can generate a proxy certificate and hand it to a proxy. The client can then verify the proxy certificate to determine if the proxy is trusted by the web site to serve the data. Proxy certificates require client changes to process the new X.509 certificate extension fields.

#### 8.3 Content Distribution Systems

Commercial content-distribution systems [12] own the machines they use for serving data and therefore trust them. When a client contacts a server via HTTPS through a content-distribution network, the client must trust the content-distribution network to authenticate the server. If SSL splitting were used, the client itself could authenticate the server, simplifying the operation of the content-distribution system.

Most content-distribution systems based on recently developed, scalable lookup primitives [21, 13, 3] protect the integrity of data by identifying the data by its cryptographic hash, but the clients must run specialized software to participate in those systems. Squirrel [9] does not require special client software but does not provide data integrity. These systems complement Barnraising by providing good techniques for organizing the proxies.

### 9 Summary

SSL splitting is a novel technique for safely distributing the network load on Web sites to untrusted proxies without requiring modifications to client machines. However, SSL splitting is effective only at reducing bandwidth consumption when the proxy has access to the plaintext of the connection, making it inappropriate for applications that require confidentiality with respect to the proxy. Additionally, SSL splitting incurs a CPU load on the central server due to public-key cryptography operations and does not address the issue of distributing this load.

The main benefits of SSL splitting are that it provides an end-to-end data-integrity guarantee to unmodified clients, reduces the bandwidth consumed by the server, and requires only a simple protocol between the server and the proxy. Experiments with a modified OpenSSL library that supports SSL splitting show significant bandwidth savings for files larger than 4,000 bytes: when the data of a file is cached on the proxy, the server need only transmit the SSL handshake messages, HTTP header, MAC stream, and payload IDs. Because of these advantages and the ease of deployment, we hope that SSL splitting will form a convenient transition path for content-distribution systems to provide end-to-end data integrity.

### 10 Acknowledgements

We thank Jacob Strauss, Richard Tibbetts, David Anderson, Russ Cox, Kevin Fu, Thomer Gil, the anonymous reviewers, the members of the MIT SIPB, and the members of the PDOS group at MIT. We also thank the denizens of TOE, Noah Meyerhans, and the `www.lcs.mit.edu` webmasters for making our measurements possible.

More information on SSL splitting and Barnraising can be found at http://pdos.lcs.mit.edu/barnraising/.

### References

[1] CAIN, B., BARBIR, A., NAIR, R., AND SPATSCHECK, O. Known CN request-routing mechanisms. draft-ietf-cdi-known-request-routing-02.txt, Network Working Group, November 2002.

[2] CLARKE, I., SANDBERG, O., WILEY, B., AND HONG, T. W. Freenet: A distributed anonymous information storage and retrieval system. In Proc. ICSI Workshop on Design Issues in Anonymity and Unobservability (Berkeley, California, June 2000). http://freenet.sourceforge.net.

[3] DABEK, F., KAASHOEK, M. F., KARGER, D., MORRIS, R., AND STOICA, I. Wide-area cooperative storage with CFS. In Proc. 18th ACM Symposium on Operating Systems Principles (SOSP '01) (Oct. 2001).

[4] DIERKS, T., AND RESCORLA, E. The TLS protocol version 1.1. draft-ietf-tls-rfc2246-bis-04.txt, Network Working Group, April 2003.

[5] FIPS 180-1. Secure Hash Standard. U.S. Department of Commerce/N.I.S.T., National Technical Information Service, Springfield, VA, April 1995.

[6] FLINN, J., SINNAMAHIDEE, S., AND SATYANARAYANAN, M. Data staging on untrusted surrogates. Tech. Rep. IRP-TR-02-2, Intel Research, May 2002.

[7] FREIER, A. O., KARLTON, P., AND KOCHER, P. C. The SSL protocol version 3.0. Internet draft (draft-freier-ssl-version3-02.txt), Network Working Group, November 1996. Work in progress.

[8] FU, K., KAASHOEK, M. F., AND MAZIÈRES, D. Fast and secure distributed read-only file system. ACM Transactions on Computer Systems 20, 1 (February 2002), 1–24.

[9] IYER, S., ROWSTRON, A., AND DRUSCHEL, P. Squirrel: A decentralized, peer-to-peer web cache. In 21st ACM Symposium on Principles of Distributed Computing (PODC 2002) (July 2002).

[10] JANNOTTI, J., GIFFORD, D. K., JOHNSON, K. L., KAASHOEK, M. F., AND O'TOOLE, JR., J. W. Overcast: Reliable multicasting with an overlay network. In Proc. of the 4th OSDI (Oct. 2002), pp. 197–212.

[11] KARGER, D., LEIGHTON, T., LEWIN, D., AND SHERMAN, A. Web caching with consistent hashing. In The eighth World Wide Web Conference (Toronto, Canada, May 1999).

[12] KRISHNAMURTHY, B., WILLS, C., AND ZHANG, Y. On the use and performance of content distribution networks. Tech. Rep. TD-52AMHL, AT&T Research Labs, Aug. 2001.

[13] KUBIATOWICZ, J., BINDEL, D., CHEN, Y., CZERWINSKI, S., EATON, P., GEELS, D., GUMMADI, R., RHEA, S., WEATHERSPOON, H., WEIMER, W., WELLS, C., AND ZHAO, B. OceanStore: An architecture for global-scale persistent storage. In Proceedings of the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2000) (Boston, MA, November 2000), pp. 190–201.

[14] MODADUGU, N., AND GOH, E.-J. The design and implementation of WASP: A wide-area secure proxy. http://crypto.stanford.edu/~eujin/papers/wasp.ps. Tech. rep., Stanford, Oct. 2002.

[15] MOORE, D. MyDNS. http://mydns.bboy.net/.

[16] MYSQL AB. MySQL database server. http://www.mysql.com/.

[17] ORAM, A., Ed. Peer-to-peer: Harnessing the power of disruptive technologies. O’Reilly, Mar. 2001.

[18] RESCORLA, E. HTTP over TLS. RFC 2818, Network Working Group, May 2000.

[19] RESCORLA, E. SSL and TLS. Addison-Wesley, 2001.

[20] RESCORLA, E., AND SCHIFFMAN, A. The Secure HyperText Transfer Protocol. RFC 2660, Network Working Group, 1999.

[21] ROWSTRON, A., AND DRUSCHEL, P. Storage management and caching in PAST, a large-scale, persistent peer-to-peer storage utility. In Proc. 18th ACM Symposium on Operating Systems Principles (SOSP '01) (Oct. 2001).

[22] SHACHAM, H., AND BONEH, D. Fast-track session establishment for TLS. In Proceedings of NDSS (Feb. 2002), M. Tripunitara, Ed., Internet Society, pp. 195–202. http://hovav.net/.

[23] TUCKE, S., ENGERT, D., FOSTER, I., WELCH, V., THOMPSON, M., PEARLMAN, L., AND KESSELMAN, C. Internet X.509 public key infrastructure proxy certificate profile. Internet draft (draft-ietf-pkix-proxy-03), Network Working Group, October 2002. Work in progress.

[24] WESSELS, D. Squid internet object cache. http://squid.nlanr.net/Squid/.

[25] WWW.RPM.ORG. RPM software packaging tool. http://www.rpm.org/.