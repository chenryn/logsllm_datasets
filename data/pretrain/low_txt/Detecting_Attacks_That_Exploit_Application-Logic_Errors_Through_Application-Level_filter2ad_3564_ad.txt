### Performance Impact Analysis

As illustrated in Figure 8, the connection rate for the instrumented version of Apache experienced a slight decline. The average reduction is approximately 2.7 connections per second, representing a decrease of about 0.4%. In the case of Snare, the average reduction is more significant, at 19.78 connections per second (approximately 3.44%).

Figure 9 indicates that there is no substantial increase in the average response time for the instrumented Apache, with an average impact of only 0.56%. However, Snare increases the response time by 4.3%.

Figure 10 shows that the average throughput for the instrumented version of Apache decreases by 0.4 Mbps (0.6%), while it decreases by 3.3 Mbps (3.58%) when using Snare.

### Summary of Overhead

In summary, the audit routines injected into Apache generate an overhead of less than 1% on average, which is significantly lower than the overhead introduced by Snare. The low overhead can be attributed to the fact that the audit routines run in the same address space as the Apache process, eliminating the need for context-switching and memory-copying. In contrast, Snare uses a daemon process to periodically read audit data from the kernel and write it to a log file, incurring two additional memory copies between kernel and user space, as well as two context switches.

### Limitations

The approach described in this paper has several limitations. First, some attacks, such as buffer overflow attacks, cannot be detected by this method. Buffer overflow attacks alter the program's control flow and execute code on the stack, bypassing the inserted auditing routines. However, tools like StackGuard [5] can prevent these attacks, and many existing Intrusion Detection Systems (IDSs) can successfully detect them, mitigating this limitation.

Second, the Dyninst API used in this approach has certain constraints. For instance, it does not allow further instrumentation once the monitoring daemon detaches from an application. This means that a new audit library can only take effect when the corresponding application is restarted. Future versions of Dyninst are expected to support multiple instrumentations for an application, addressing this limitation.

### Conclusions and Future Work

This paper presents a novel approach for detecting attacks that exploit application-logic errors. The approach leverages binary rewriting techniques to collect application-specific data, and a tool has been developed to use this data for intrusion detection. Performance evaluations demonstrate that effective intrusion detection can be achieved with minimal overhead.

The tool complements existing operating system and network auditing procedures, providing semantically-rich data streams for intrusion detection. Since our approach involves inserting code into applications, it affects specification-based IDSs [19] and systems that monitor the execution flow of applications [10, 37]. Future work will focus on addressing these issues.

A potential future direction is to automatically generate instrumentation routines directly from high-level descriptions of attack signatures. This would relieve auditors from manually identifying instrumentation points and writing the auditing code, and would enable application auditing only when necessary.

### Acknowledgments

This research was supported by the National Science Foundation under grants CCR-0209065 and CCR-0238492, and by the Army Research Office under agreement DAAD19-01-1-0484. The views and conclusions expressed herein are those of the authors and do not necessarily represent the official policies or endorsements of the National Science Foundation, the Army Research Office, or the U.S. Government.

### References

[1] M. Almgren and U. Lindqvist. Application-Integrated Data Collection for Security Monitoring. In Proceedings of Recent Advances in Intrusion Detection (RAID), LNCS, pages 22–36, Davis, CA, October 2001. Springer.

[2] M. Bishop. A Standard Audit Trail Format. In Proc. 18th NIST-NCSC National Information Systems Security Conference, pages 136–145, Baltimore, MD, 1995.

[3] B. Buck and J. K. Hollingsworth. An API for Runtime Code Patching. The International Journal of High Performance Computing Applications, 14(4):317–329, Winter 2000.

[4] A. Chander, J. C. Mitchell, and I. Shin. Mobile Code Security by Java Bytecode Instrumentation. In DARPA Information Survivability Conference and Exposition (DISCEX II), Anaheim, CA, June 2001.

[5] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In 7th USENIX Security, pages 63–78, San Antonio, TX, January 1998.

[6] T. W. Curry. Profiling and Tracing Dynamic Library Usage Via Interposition. In USENIX Summer 1994 Technical Conference, pages 267–278, Boston, MA, 1994.

[7] D. P. Ghormley and D. Petrou and S. H. Rodrigues and T. E. Anderson. SLIC: An Extensibility System for Commodity Operating Systems. In Proceedings of the USENIX 1998 Annual Technical Conference, New Orleans, LO, 1998.

[8] T. E. Daniels and E. H. Spafford. Identification of Host Audit Data to Detect Attacks on Low-level IP Vulnerabilities. Journal of Computer Security, 7(1):3–35, 1999.

[9] D. Engler, B. Chelf, A. Chou, and S. Hallem. Checking System Rules Using System-Specific, Programmer-Written Compiler Extensions. In Proceedings of the Fourth Symposium on Operating Systems Design and Implementation, San Diego, CA, October 2000.

[10] S. Forrest. A Sense of Self for UNIX Processes. In Proceedings of the IEEE Symposium on Security and Privacy, pages 120–128, Oakland, CA, May 1996.

[11] T. Fraser, L. Badger, and M. Feldman. Hardening COTS Software with Generic Software Wrappers. In IEEE Symposium on Security and Privacy, pages 2–16, Oakland, CA, 1999.

[12] R. Hastings and B. Joyce. Purify: Fast Detection of Memory Leaks and Access Errors. In Proc. of the Winter USENIX Technical Conference, San Francisco, CA, January 1992.

[13] G. Hunt and D. Brubacher. Detours: Binary Interception of Win32 Functions. In Proceedings of the 3rd USENIX Windows NT Symposium, pages 135–144, Seattle, WA, 1999.

[14] K. Ilgun. USTAT: A Real-time Intrusion Detection System for UNIX. In Proceedings of the IEEE Symposium on Research on Security and Privacy, Oakland, CA, May 1993.

[15] M. B. Jones. Interposition Agents: Transparently Interposing User Code at the System Interface. In Proceedings of the Symposium on Operating Systems Principles, pages 80–93, Asheville, NC, 1993.

[16] F. Kerschbaum, E. H. Spafford, and D. Zamboni. Using Internal Sensors and Embedded Detectors for Intrusion Detection. Journal of Computer Security, 10(1-2):23–70, 2002.

[17] G. H. Kim and E. H. Spafford. The Design and Implementation of Tripwire: A File System Integrity Checker. In Proceedings of the 2nd ACM Conference on Computer and Communications Security, pages 18–29, Fairfax, VA, 1994.

[18] C. Ko and T. Redmond. Noninterference and Intrusion Detection. In Proceedings of the IEEE Symposium on Security and Privacy, Berkeley, CA, 2002.

[19] C. Ko, M. Ruschitzka, and K. Levitt. Execution Monitoring of Security-Critical Programs in Distributed Systems: A Specification-based Approach. In Proceedings of the 1997 IEEE Symposium on Security and Privacy, pages 175–187, Oakland, CA, May 1997.

[20] B. A. Kuperman and E. Spafford. Generation of Application Level Audit Data via Library Interposition. Technical Report CERIAS TR-99-11, COAST Laboratory, Purdue University, October 1999.

[21] J. Larus and E. Schnarr. EEL: Machine-Independent Executable Editing. In Proceedings of the ACM SIGPLAN '95 Conference on Programming Language Design and Implementation, La Jolla, CA, June 1995.

[22] U. Lindqvist and P. Porras. Detecting Computer and Network Misuse with the Production-Based Expert System Toolset (P-BEST). In IEEE Symposium on Security and Privacy, pages 146–161, Oakland, California, May 1999.

[23] T. F. Lunt. Detecting Intruders in Computer Systems. In Proceedings of the Sixth Annual Symposium and Technical Displays on Physical and Electronic Security, 1993.

[24] B. P. Miller, M. Christodorescu, R. Iverson, T. Kosar, A. Mirgorodskii, and F. Popovici. Playing Inside the Black Box: Using Dynamic Instrumentation to Create Security Holes. In the Second Los Alamos Computer Science Institute Symposium, Santa Fe, NM, October 2001.

[25] R. Pandey and B. Hashii. Providing Fine-Grained Access Control for Java Programs via Binary Editing. In Proc. of the 13th Conference on Object-Oriented Programming (ECOOP'99), pages 449–473, Lisbon, Portugal, 1999.

[26] N. Provos. Improving Host Security with System Call Policies. In Proceedings of the 12th USENIX Security Symposium, Washington, DC, 2003.

[27] T. Ptacek and T. Newsham. Insertion, Evasion and Denial of Service: Eluding Network Intrusion Detection. Technical report, Secure Networks, January 1998.

[28] X. Qie, R. Pang, and L. Peterson. Defensive Programming: Using an Annotation Toolkit to Build DoS-Resistant Software. In Proceedings of the Fifth Symposium on Operating Systems Design and Implementation, Boston, MA, December 2002.

[29] M. J. Ranum and F. M. Avolio. A Toolkit and Methods for Internet Firewalls. In USENIX Conference, pages 37–44, Boston, MA, 1994.

[30] M. Roesch. Snort - Lightweight Intrusion Detection for Networks. In Proceedings of the USENIX LISA '99 Conference, Seattle, WA, November 1999.

[31] T. Romer, G. Voelker, D. Lee, A. Wolman, W. Wong, H. Levy, and B. Bershad. Instrumentation and Optimization of Win32/Intel Executables Using Etch. In USENIX Windows NT Workshop, Seattle, WA, 1997.

[32] SNARE - System iNtrusion Analysis and Reporting Environment. http://www.intersectalliance.com/projects/Snare.

[33] S. Soman, C. Krintz, and G. Vigna. Detecting Malicious Java Code Using Virtual Machine Auditing. In Proc. of the 12th USENIX Security Symposium, pages 153–168, Washington, DC, 2003.

[34] A. Srivastava and A. Eustace. ATOM - A System for Building Customized Program Analysis Tools. In Proceedings of the Symposium on Programming Language Design and Implementation, pages 196–205, Orlando, FL, 1994.

[35] D. Thain and M. Livny. Multiple Bypass: Interposition Agents for Distributed Computing. Journal of Cluster Computing, 4(1):39–47, March 2001.

[36] W. Venema. TCP Wrapper: Network Monitoring, Access Control, and Booby Traps. In USENIX Proceedings of the Third UNIX Security Symposium, Sept. 1992.

[37] D. Wagner and D. Dean. Intrusion Detection via Static Analysis. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 2001. IEEE Press.

[38] J. Zimmermann, L. Mé, and C. Bidan. Experimenting with a Policy-Based HIDS Based on an Information Flow Control Model. In Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC), Las Vegas, NV, 2003.