### 4.1 Multipath TCP Option Testing

We conducted tests using tracebox to determine whether the recently proposed Multipath TCP (MPTCP) option [6] could be safely used over the Internet. This is similar to the unknown option test performed by Honda et al. [4]. However, unlike Honda et al., tracebox allows for probing a large number of destinations. Surprisingly, our tests identified approximately ten MPTCP servers based on the TCP options they returned. One of these servers, www.baidu.com, is among the top 5 Alexa-ranked websites and all of these servers were located in China. A closer examination revealed that these servers (or their load balancers) simply echo any received unknown TCP option in the SYN+ACK, which is clearly an incorrect TCP implementation.

### 4.2 Proxy Detection

Tracebox can also be used to detect TCP proxies. To detect a proxy, tracebox must send TCP segments that are intercepted by the proxy and other packets that are forwarded beyond it. HTTP proxies are commonly used in cellular and enterprise networks [3], and some are configured to transparently proxy all TCP connections on port 80. To test the ability of tracebox to detect proxies, we used a script that sends a SYN probe to port 88 and then to port 21. If there is an HTTP proxy on the path, it should intercept the SYN probe on port 80 while ignoring the SYN on port 21. We then analyze the ICMP messages returned.

From our simple PlanetLab deployment, we observed two anomalies. First, we detected an HTTP proxy or, more likely, an Intrusion Detection System (IDS) within a National Research Network (SUNET). This proxy operated only for a few destinations, and the path for port 80 was shorter than for port 21. Second, and more concerning, tracebox identified several destinations behind a proxy whose configuration, inferred from the returned ICMP messages, resulted in a forwarding loop for non-HTTP probes. Specifically, the SYN probe on port 21, after reaching the supposed proxy, bounced between routers in a loop, as tracebox received alternating ICMP replies from different routers.

### 4.3 NAT Detection

NATs are among the most widely deployed middleboxes. Detecting them with tracebox would be useful for network operators. However, in addition to changing addresses and port numbers of the packets they forward, NATs often modify the returned ICMP message and the quoted packet. This means that when inspecting the received ICMP message, tracebox may not be able to detect the modification.

Despite this, tracebox can still detect many NATs. Most NATs implement Application-level Gateways (ALGs) [22] for protocols like FTP. These ALGs modify the payload of forwarded packets containing the PORT command on the FTP control connection. Tracebox can detect these ALGs by noting that they do not translate the quoted packet in the returned ICMP messages. The detection process is implemented as a simple script (shown in Figure 6) that interacts with tracebox. The script builds and sends a SYN for the FTP port number, waits for the SYN+ACK, and ensures that the SYN+ACK is not handled by the host's TCP stack by configuring the local firewall. It then sends a valid segment with the PORT command and the encoded IP address and port number as payload. Tracebox compares the transmitted packet with the quoted packet returned inside an ICMP message by an RFC1812-compliant router and stores the modifications applied to the packet. If a change occurs and a callback function has been passed as an argument, tracebox triggers the callback function. In Figure 6, the callback `cb` checks for payload modifications and prints a message if a NAT is detected.

```lua
-- NAT FTP detection
-- To run with: tracebox -s  
-- Build the initial SYN (dest is passed to tracebox)
syn = IP / tcp{dst=21}
-- Avoid the host’s stack to reply with a reset
fp = filter(syn)
synack = tracebox(syn)
if not synack then
    print("Server did not reply...")
    fp:close()
    return
end
-- Check if SYN+ACK flags are present
if synack:tcp():getflags() ~= 18 then
    print("Server does not seem to be an FTP server")
    fp:close()
    return
end
-- Build the PORT probe
ip_port = syn:source():gsub("%.", ",")
data = IP / tcp{src=syn:tcp():getsource(), dst=21,
                seq=syn:tcp():getseq()+1,
                ack=synack:tcp():getseq()+1, flags=16} /
       raw('PORT ' .. ip_port .. ',189,68\r\n')
-- Send probe and allow cb to be called for each reply
function cb(ttl, rip, pkt, reply, mods)
    if mods and mods:__tostring():find("Raw") then
        print("There is a NAT before " .. rip)
        return 1
    end
end
tracebox(data, {callback = "cb"})
fp:close()
```

### 5. Related Work

Since the late 1990s, Internet topology discovery has been extensively studied [23, 24]. Traceroute [7] has been widely used to reveal IP interfaces along the path between a source and a destination. Various traceroute extensions have been developed to mitigate its limitations, including changes to the types of probes sent [25, 26] and improvements to handle load balancing [27] and reverse path tracing [28]. Additionally, the probing speed and efficiency of traceroute have been investigated [29, 30, 31]. To our knowledge, none of the available traceroute extensions can reveal middlebox interference along real Internet paths as tracebox does.

Medina et al. [21] provided one of the first detailed analyses of the interactions between transport protocols and middleboxes. They used active probing with tbit to contact various web servers and detect whether Explicit Congestion Notification (ECN) [32], IP options, and TCP options could be safely used. The TCPExposure software developed by Honda et al. [4] is similar to tracebox, using specially crafted packets to test for middlebox interference.

Wang et al. [3] analyzed the impact of middleboxes in hundreds of cellular networks, revealing various types of packet modifications. These tools provide valuable results but are limited to specific paths, as both ends of the path must be under control. This is a limitation since some middleboxes are configured to process packets sent to specific destinations or ports. In contrast, tracebox does not require cooperation with the service and can detect middleboxes on any path, i.e., between a source and any destination. Our measurements reveal middleboxes close to both clients and servers.

Sherry et al. [1] relied on network configuration files to show the widespread deployment of middleboxes. However, their study does not reveal the impact of these middleboxes on actual packets.

### 6. Conclusion

Middleboxes are becoming increasingly popular in various types of networks (enterprise, cellular, etc.). While they are intended to be transparent to users, they frequently modify packets, sometimes rendering protocols useless. Due to the lack of efficient and easy-to-use debugging tools, managing middleboxes is challenging.

This paper introduces, discusses, and evaluates tracebox, a new extension to traceroute that reveals the presence of middleboxes along a path. Tracebox detects various types of packet modifications and can locate where these modifications occur. We deployed tracebox on the PlanetLab testbed and demonstrated its capabilities through several use cases. Tracebox is open-source and publicly available [12].

Tracebox opens new avenues for researchers to better understand the deployment of middleboxes in the global Internet. In the coming months, we plan to conduct large-scale measurement campaigns to analyze middlebox interferences in IPv4 and IPv6 networks. Tracebox could also be extended to fingerprint specific middleboxes.

### Acknowledgments

We thank the anonymous reviewers for their feedback. We also appreciate the assistance of Randy Bush, Matsuzaki Yoshinobu, Marc Neuckens, Pierre Reinbold, Bruno Delcourt, and Claire Delcourt in understanding the middleboxes in their networks.

This work is partially funded by the European Commission-funded mPlane (ICT-318627) and CHANGE (INFSO-ICT-257422) projects and the BESTCOM IAP.

### References

[1] J. Sherry, S. Hasan, C. Scott, A. Krishnamurthy, S. Ratnasamy, and V. Sekar, “Making middleboxes someone else’s problem: Network processing as a cloud service,” in Proc. ACM SIGCOMM, August 2012.

[2] B. Carpenter and S. Brim, “Middleboxes: Taxonomy and issues,” Internet Engineering Task Force, RFC 3234, February 2002.

[3] Z. Wang, Z. Qian, Q. Xu, Z. Mao, and M. Zhang, “An untold story of middleboxes in cellular networks,” in Proc. ACM SIGCOMM, August 2011.

[4] M. Honda, Y. Nishida, C. Raiciu, A. Greenhalgh, M. Handley, and H. Tokuda, “Is it still possible to extend TCP,” in Proc. ACM/USENIX Internet Measurement Conference (IMC), November 2011.

[5] R. Stewart, Q. Xie, K. Morneault, C. Sharp, H. Schwarzbauer, T. Taylor, I. Rytina, M. Kalla, L. Zhang, and V. Paxson, “Stream control transmission protocol,” Internet Engineering Task Force, RFC 2960, October 2000.

[6] A. Ford, C. Raiciu, M. Handley, and O. Bonaventure, “TCP extensions for multipath operation with multiple addresses,” Internet Engineering Task Force, RFC 6824, January 2013.

[7] V. Jacobson et al., “traceroute,” UNIX, man page, 1989, see source code: ftp://ftp.ee.lbl.gov/traceroute.tar.gz.

[8] J. Postel, “Internet control message protocol,” Internet Engineering Task Force, RFC 792, September 1981.

[21] A. Medina, M. Allman, and S. Floyd, “Measuring interactions between transport protocols and middleboxes,” in Proc. ACM SIGCOMM Internet Measurement Conference (IMC), October 2004.

[22] P. Srisuresh and M. Holdrege, “IP network address translator (NAT) terminology and considerations,” Internet Engineering Task Force, RFC 2663, August 1999.

[23] B. Donnet and T. Friedman, “Internet topology discovery: a survey,” IEEE Communications Surveys and Tutorials, vol. 9, no. 4, December 2007.

[24] H. Haddadi, G. Iannaccone, A. Moore, R. Mortier, and M. Rio, “Network topologies: Inference, modeling and generation,” IEEE Communications Surveys and Tutorials, vol. 10, no. 2, pp. 48–69, April 2008.

[9] F. Baker, “Requirements for IP version 4 routers,” Internet Engineering Task Force, RFC 1812, June 1995.

[10] R. Ierusalimschy, L. H. de Figueiredo, and W. Celes, “LUA, an extensible extension language,” Software: Practice & Experience, vol. 26, no. 6, pp. 635–652, June 1996.

[11] P. Biondi, “Scapy,” see http://www.secdev.org/projects/scapy/.

[12] G. Detal, “tracebox,” July 2013, see http://www.tracebox.org.

[13] E. Kohler, R. Morris, B. Chen, J. Jannotti, and F. Kaashoek, “The click modular router,” ACM Transactions on Computer Systems, vol. 18, no. 3, pp. 263–297, August 2000.

[14] B. Hesmans, “Mbclick,” July 2013, see https://bitbucket.org/bhesmans/mbclick.

[15] A. Heffernan, “Protection of BGP sessions via the TCP MD5 signature option,” Internet Engineering Task Force, RFC 2385, August 1998.

[16] V. Jacobson, R. Braden, and D. Borman, “TCP extensions for high performance,” Internet Engineering Task Force, RFC 1323, May 1992.

[17] Microsoft, “Patch available to improve TCP initial sequence number randomness,” Microsoft, Microsoft Security Bulletin MS99-066, October 1999, see http://technet.microsoft.com/en-us/security/bulletin/ms99-046.

[18] M. Mathis, J. Mahdavi, S. Floyd, and A. Romanow, “TCP selective acknowledgement options,” Internet Engineering Task Force, RFC 2018, October 1996.

[19] C. Paasch, “Presentation ietf 87,” July 2013, see http://tools.ietf.org/agenda/87/slides/slides-87-tcpm-11.pdf.

[20] J. Mogul and S. Deering, “Path MTU discovery,” Internet Engineering Task Force, RFC 1191, November 1990.

[25] M. Torren, “tcptraceroute - a traceroute implementation using TCP packets,” UNIX, man page, 2001, see source code: http://michael.toren.net/code/tcptraceroute/.

[26] M. Luckie, Y. Hyun, and B. Huffaker, “Traceroute probe method and forward IP path inference,” in ACM SIGCOMM Internet Measurement Conference (IMC), October 2008.

[27] B. Augustin, X. Cuvellier, B. Orgogozo, F. Viger, T. Friedman, M. Latapy, C. Magnien, and R. Teixeira, “Avoiding traceroute anomalies with Paris traceroute,” in Proc. ACM/USENIX Internet Measurement Conference (IMC), October 2006.

[28] E. Katz-Bassett, H. Madhyastha, V. Adhikari, C. Scott, J. Sherry, P. van Wesep, A. Krishnamurthy, and T. Anderson, “Reverse traceroute,” in Proc. USENIX Symposium on Networked Systems Design and Implementations (NSDI), June 2010.

[29] B. Donnet, P. Raoult, T. Friedman, and M. Crovella, “Efficient algorithms for large-scale topology discovery,” in Proc. ACM SIGMETRICS, June 2005.

[30] R. Beverly, A. Berger, and G. Xie, “Primitives for active Internet topology mapping: Toward high-frequency characterization,” in Proc. ACM/USENIX Internet Measurement Conference (IMC), November 2010.

[31] T. Bourgeau and T. Friedman, “Efficient IP-level network topology capture,” in Proc. Passive and Active Measurement Conference (PAM), March 2013.

[32] K. Ramakrishnan, S. Floyd, and D. Black, “The addition of explicit congestion notification (ECN) to IP,” Internet Engineering Task Force, RFC 3168, September 2001.