# PostgreSQL for Oracle DBAs

## Network Configuration
- **listener.ora (Network Restrictions)**
  - TCP port, Kerberos, and RDBMS configuration.
- **sqlnet.ora (Protocol Configuration)**
  - Kerberos and other protocol settings.
- **Dedicated Server Only**
  - Shared memory and semaphores are used for inter-process synchronization.
  - Dedicated server processes.
  - Connection pooling by other products per client.
  - Multi-threaded server options like PgBouncer and pgpool-II.
  - Always used on Windows.

## Architecture Notes
- **Oracle**
  - Relies on the OS file cache for managing database buffers.
  - Promotes its Automatic Storage Management (ASM) for direct control over file management.
- **PostgreSQL**
  - Believes in using the OS for file management and does not re-implement features already available in the OS.
  - Uses the file system to store data files (no RAW device support).
  - ASM is a kind of Logical Volume Manager (LVM) dedicated to Oracle.

## Security Observations
### Users and Roles
- **Oracle**
  - Users and roles are defined at the database level (not applicable for Pluggable Databases, PDBs).
  - Users and roles are different entities.
- **PostgreSQL**
  - Has only roles.
  - Some roles can be granted "with login" permission.
  - A schema is a grantable name-space object.
  - Ownership and usage on a schema can be granted to roles.
  - Objects owned by different roles (users) can reside within a single schema.
  - The public schema can (and should) be dropped.

### Schemas and Tables
- **Oracle**
  - A schema consists of a single user's objects (schema = user).
  - Schema is not an object, so it cannot be granted.
- **PostgreSQL**
  - A schema is a grantable name-space object.
  - Ownership and usage on a schema can be granted to roles.
  - Objects owned by different roles (users) can reside within a single schema.
  - The public schema can (and should) be dropped.

### Tablespaces
- **Oracle**
  - A tablespace always belongs to a database.
  - Quotas can be used to limit tablespace usage by users.
- **PostgreSQL**
  - A tablespace is defined at the cluster level.
  - "Create" on a tablespace can be granted to a role.
  - Tablespaces can be owned by a role.
  - There are no space usage quotas on tablespaces; check the file system free space.

### Database Ownership
- **Oracle**
  - A database contains users defined inside the database.
  - No concept of database ownership.
  - Grant scope is always within a database (except for global users in PDBs).
- **PostgreSQL**
  - A database can be owned by a specific role.
  - One role can have granted access on objects from multiple databases.
  - Role attributes can be set in the scope of a database, e.g., `ALTER ROLE XXX SET search_path = YYY,ZZZ IN MY_DATABASE`.

### Privileges
- **Oracle**
  - Distinguishes between system privileges (e.g., create table, select any) and object privileges (e.g., grant select on).
- **PostgreSQL**
  - Does not have a strong distinction between system and object privileges.
  - Login permission is a cluster-wide "system" privilege.
  - Most privileges are related to some objects, including the database itself.
  - Examples: `GRANT CONNECT ON DATABASE myDB`, `GRANT USAGE ON ...`, `GRANT CREATE ON ...`.

### Advanced Security
- **Oracle**
  - Transparent Data Encryption.
  - Kerberos (MS AD integration) available without Advanced Security as of 12.1 release.
  - Many other security features (e.g., Virtual Private Database, Row Level Security).
- **PostgreSQL**
  - Single Sign-On (SSO) available.
  - Row Security Policies available with 9.5 release.
  - Transparent Data Encryption (TDE) not available.
  - Encryption covered by the separate module `pgcrypto`.

### Remote Access Control
- **Oracle**
  - IP address level: `sqlnet.ora` (`tcp.validnode_checking = yes`, `tcp.invited_nodes`, `tcp.excluded_nodes`).
  - Username/password and create session evaluated next.
- **PostgreSQL**
  - `pg_hba.conf` file.
  - Evaluates username/role membership, database name, source IP address, and authentication method before password validation.

### Synonyms
- **Oracle**
  - Public synonyms can be defined to reference another user (schema) objects.
  - Can be made accessible to all users.
- **PostgreSQL**
  - Uses `search_path` session environment to define the scope of visible objects.
  - Can be defined at the cluster level.
  - Users can have different `search_path` values in particular databases.
  - Example: `ALTER ROLE { role_specification | ALL } [ IN DATABASE database_name ] SET configuration_parameter { TO | = } { value | DEFAULT }`.

### Security Features
- **ALL Macro in Grant Commands**
  - Expands to all existing objects satisfying grant scope criteria.
  - Example: `GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA my_schema TO â€¦`.
- **Alter Default Privileges**
  - Does not affect existing objects but applies to newly created ones.
  - Documentation: `ALTER DEFAULT PRIVILEGES`.
  - Example: `ALTER DEFAULT PRIVILEGES [ FOR { ROLE | USER } target_role [, ...] ] [ IN SCHEMA schema_name [, ...] ] abbreviated_grant_or_revoke`.

## Backup and Recovery
### Database Dump
- **Oracle**
  - `exp/imp`, `expdp/impdp`.
- **PostgreSQL**
  - `pg_dump / pg_restore`.
  - "Directory" format supports parallel dumps.
  - `pg_dumpall` (use for cluster globals only).
  - Load dump by calling `psql`.
  - Thanks to MVCC, there is no risk of ORA-1555 during the dump, ensuring a consistent backup even if the database is in use.

### Binary Backups
- **Offline Backups**
  - Works for both Oracle and PostgreSQL.
- **Online Backups**
  - **Oracle**
    - Manual: `ALTER DATABASE (TABLESPACE) BEGIN BACKUP`, copy corresponding datafiles, `ALTER DATABASE (TABLESPACE) END BACKUP`, store archived redo logs needed for recovery.
    - Or use Oracle RMAN utility.
  - **PostgreSQL**
    - Backup Control Functions: `pg_start_backup()`, `pg_stop_backup()`.
    - `pg_basebackup`: Handles calls to backup control functions and produces a copy of the PostgreSQL cluster or a tar archive with the backup. Features like tablespace mapping are available for more convenient and flexible backup procedures.

### Backup Tools
- **pgBarman**
  - Similar features to Oracle RMAN.
  - Recovery window / number of copies.
  - Stores archived WALs together with Barman backups.
  - Backup reports.
  - Does not use an "rman catalog"; backed-up files with some Barman metadata files are sufficient.
  - Single backup can be archived to tape (tape integration is not part of pgBarman).
- **pgBackRest**
  - More complex configuration than Barman.
  - Incremental backups implemented slightly better.

## High Availability and Disaster Recovery
- **OS Clusterware (RHEL Pacemaker, PowerHA, etc.)**
  - Simply works.
- **No Technology Like Oracle RAC for PostgreSQL**
  - Sharding (Postgres XL) is not about sharing data files between nodes.
  - Oracle 12.2 provides some support for sharding.

### Replication
- **Oracle DataGuard**
  - Log shipping (`log_archive_dest_n`) by archiver.
  - Redo transmit by LGWR (ASYNC, SYNC).
  - Delayed recovery: `DELAY=minutes` attribute of `LOG_ARCHIVE_DEST_n`.
  - Logical standby.
  - Active Data Guard.
  - GoldenGate.
- **PostgreSQL**
  - **Log-Shipping Standby Servers**: `archive_timeout`.
  - **Streaming Replication**: ASYNC (default), SYNC.
  - **Standby Server Settings**: `recovery_min_apply_delay` available from 9.4.
  - **Logical Standby**: Slony, Bucardo, logical decoding framework.
  - **Hot Standby**: Read-only accessible standby.
  - **BDR**: Provides asynchronous multi-master logical replication.

## Other Features
### Command Line Client
- **psql**
  - Comfortable interface, but be aware of default AUTOCOMMIT behavior.

### Data Checksums
- **Initdb Option: `--data-checksums`**
  - Page checksums are calculated for all objects in all databases in the cluster.
  - Use `pgbench` to verify performance impact.
  - Checksum is calculated on page read.
  - Backups operate at the file level, and checksums are not calculated during backup.

### SQL and Data Loading
- **Oracle**
  - Dual table: `SELECT function() FROM dual;`
  - SQL Loader, External tables, db links.
- **PostgreSQL**
  - `SELECT function(); SELECT 5/8;`
  - `COPY` command (client-side, server-side), `file_fdw` for CSV files, compatible with `COPY` command.
  - Foreign Data Wrappers for many kinds of data sources, including Oracle databases.

### Porting from Oracle PL/SQL
- **Similarities and Differences**
  - Oracle: `TRUNC(date_variable, format)`
  - PostgreSQL: `DATE_TRUNC('field', source)`
  - Pipelined functions are not implemented.
  - Group by can use column aliases in PostgreSQL.

### Partitioning
- **PostgreSQL**
  - Implemented on top of inheritance.
  - Declarative partitioning like in Oracle is not available.
  - Basic development for 9.6.
  - Constraints on child tables.
  - Trigger on master table.
  - No global indexes on partitioned tables.

### Finding Table File Name
- **Bonus Link: How to find out which PostgreSQL table a file on disk corresponds to.**

### Q & A
- /* End of slides */

---

This document has been optimized for clarity, coherence, and professionalism.