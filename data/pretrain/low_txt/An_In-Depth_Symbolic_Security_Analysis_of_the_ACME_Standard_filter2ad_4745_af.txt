### Comprehensive Model for ACME Protocol and Security Verification

Our model addresses the communication protocols between any number of clients and servers, as well as the issuance of certificates for an arbitrary list of domains. It also covers essential low-level protocol details, such as unbounded data structures and precise state management. This comprehensive model serves as a formal companion to the ACME RFC and can be a valuable guide for ACME implementers.

#### Approach and Framework

Our approach is built on the DY★ framework, which allows us to modularly specify and verify symbolic security properties for our ACME model using the F★ programming language and type system. We extended DY★ to support authenticated channels and key substitution attacks on signatures. These extensions are not only useful for our ACME model but also of independent interest for future cryptographic protocol verification projects using DY★.

#### Interoperability and Real-World Implementation

We propose a general approach to make models written in DY★ interoperable with real-world implementations, thereby increasing confidence that these models accurately reflect the protocol specification. Using this approach, we transformed our ACME model into an interoperable reference implementation. Our ACME client can run the protocol with several real-world ACME servers, including the Let’s Encrypt production server. This interoperability relies on an unverified wrapper that connects our verified model with system libraries for networking and cryptography. As future work, we plan to generalize and verify this wrapper and parts of the underlying libraries, enabling the conversion of DY★ models into high-assurance protocol implementations.

### Acknowledgments

This work was partially supported by the Deutsche Forschungsgemeinschaft (DFG) through Grant KU 1434/10-2, the European Research Council (ERC) through Grant CIRCUS-683032, and the Office of Naval Research (ONR) through Grant N000141812618.

### References

1. **Aas, J., Barnes, R., Case, B., Durumeric, Z., Eckersley, P., Flores-López, A., Halderman, J. A., Hoffman-Andrews, J., Kasten, J., Rescorla, E., Schoen, S. D., and Warren, B.** (2019). Let’s Encrypt: An Automated Certificate Authority to Encrypt the Entire Web. In *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019*. ACM, New York, NY, USA, 2473–2487. [DOI](https://doi.org/10.1145/3319535.3363192)
2. **Ayer, A.** (2015). ACME signature misuse vulnerability in draft-barnes-acme-04. [Link](https://mailarchive.ietf.org/arch/msg/acme/F71iz6qq1o_QPVhJCV4dqWf-4Yc/)
3. **Backes, M., Hritcu, C., and Maffei, M.** (2014). Union, intersection and refinement types and reasoning about type disjointness for secure protocol implementations. *J. Comput. Secur.* 22, 2 (2014), 301–353. [DOI](https://doi.org/10.3233/JCS-130493)
4. **Barbosa, M., Barthe, G., Bhargavan, K., Blanchet, B., Cremers, C., Liao, K., and Parno, B.** (2021). SoK: Computer-Aided Cryptography. In *2021 IEEE Symposium on Security and Privacy (SP)*. IEEE Computer Society, NY, USA, 123–141. [DOI](https://doi.org/10.1109/SP40001.2021.00008)
5. **Barnes, R., Hoffman-Andrews, J., McCarney, D., and Kasten, J.** (2019). Automatic Certificate Management Environment (ACME). *RFC 8555*. [DOI](https://doi.org/10.17487/RFC8555)
6. **Barthe, G., Fournet, C., Grégoire, B., Strub, P.-Y., Swamy, N., and Zanella Béguelin, S.** (2014). Probabilistic relational verification for cryptographic implementations. In *The 41st Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL ’14, San Diego, CA, USA, January 20-21, 2014*. ACM, New York, NY, USA, 193–206. [DOI](https://doi.org/10.1145/2535838.2535847)
7. **Basin, D. A., Cremers, C., Kim, T. H.-J., Perrig, A., Sasse, R., and Szalachowski, P.** (2018). Design, Analysis, and Implementation of ARPKI: An Attack-Resilient Public-Key Infrastructure. *IEEE Trans. Dependable Secur. Comput.* 15, 3 (2018), 393–408. [DOI](https://doi.org/10.1109/TDSC.2016.2601610)
8. **Bengtson, J., Bhargavan, K., Fournet, C., Gordon, A. D., and Maffeis, S.** (2011). Refinement types for secure implementations. *ACM Trans. Program. Lang. Syst.* 33, 2 (2011), 8:1–8:45. [DOI](https://doi.org/10.1145/1890028.1890031)
9. **Beurdouche, B., Bhargavan, K., Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Pironti, A., Strub, P.-Y., and Zinzindohoue, J. K.** (2015). A Messy State of the Union: Taming the Composite State Machines of TLS. In *2015 IEEE Symposium on Security and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015*. IEEE Computer Society, NY, USA, 535–552. [DOI](https://doi.org/10.1109/SP.2015.39)
10. **Bhargavan, K., Bichhawat, A., Do, Q. H., Hosseyni, P., Küsters, R., Schmitz, G., and Würtele, T.** (2021). DY★ ACME Code Repository. [GitHub](https://github.com/reprosec/acme-case-study)
11. **Bhargavan, K., Bichhawat, A., Do, Q. H., Hosseyni, P., Küsters, R., Schmitz, G., and Würtele, T.** (2021). DY★: A Modular Symbolic Verification Framework for Executable Cryptographic Protocol Code. In *2021 IEEE European Symposium on Security and Privacy (EuroS&P)*. IEEE Computer Society, NY, USA, 523–542.
12. **Bhargavan, K., Bichhawat, A., Do, Q. H., Hosseyni, P., Küsters, R., Schmitz, G., and Würtele, T.** (2021). DY★ Code Repository. [GitHub](https://github.com/reprosec/dolev-yao-star)
13. **Bhargavan, K., Bichhawat, A., Do, Q. H., Hosseyni, P., Küsters, R., Schmitz, G., and Würtele, T.** (2021). A Tutorial-Style Introduction to DY★. In *Protocols, Logic, and Strands: Essays Dedicated to Joshua Guttman on the Occasion of His 66.66 Birthday*. Springer. To appear.
14. **Bhargavan, K., Blanchet, B., and Kobeissi, N.** (2017). Verified Models and Reference Implementations for the TLS 1.3 Standard Candidate. In *2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017*. IEEE Computer Society, NY, USA, 483–502. [DOI](https://doi.org/10.1109/SP.2017.26)
15. **Bhargavan, K., Delignat-Lavaud, A., and Kobeissi, N.** (2017). Formal Modeling and Verification for Domain Validation and ACME. In *Financial Cryptography and Data Security (Lecture Notes in Computer Science, Vol. 10322)*. Springer, Berlin, 561–578. [DOI](https://doi.org/10.1007/978-3-319-70972-7_32)
16. **Bhargavan, K., Fournet, C., and Gordon, A. D.** (2010). Modular verification of security protocol code by typing. In *Proceedings of the 37th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2010, Madrid, Spain, January 17-23, 2010*. ACM, New York, NY, USA, 445–456. [DOI](https://doi.org/10.1145/1706299.1706350)
17. **Bhargavan, K., Fournet, C., Kohlweiss, M., Pironti, A., and Strub, P.-Y.** (2013). Implementing TLS with Verified Cryptographic Security. In *2013 IEEE Symposium on Security and Privacy, SP 2013, Berkeley, CA, USA, May 19-22, 2013*. IEEE Computer Society, NY, USA, 445–459. [DOI](https://doi.org/10.1109/SP.2013.37)
18. **Bhargavan, K., Fournet, C., Kohlweiss, M., Pironti, A., Strub, P.-Y., and Zanella Béguelin, S.** (2014). Proving the TLS Handshake Secure (As It Is). In *Advances in Cryptology - CRYPTO 2014 - 34th Annual Cryptology Conference, Santa Barbara, CA, USA, August 17-21, 2014, Proceedings, Part II (Lecture Notes in Computer Science, Vol. 8617)*. Springer, Berlin, 235–255. [DOI](https://doi.org/10.1007/978-3-662-44381-1_14)
19. **Blake-Wilson, S. and Menezes, A.** (1999). Unknown Key-Share Attacks on the Station-to-Station (STS) Protocol. In *Public Key Cryptography, Second International Workshop on Practice and Theory in Public Key Cryptography, PKC ’99, Kamakura, Japan, March 1-3, 1999, Proceedings (Lecture Notes in Computer Science, Vol. 1560)*. Springer, Berlin, 154–170. [DOI](https://doi.org/10.1007/3-540-49162-7_12)
20. **Blanchet, B.** (2016). Modeling and Verifying Security Protocols with the Applied Pi Calculus and ProVerif. *Found. Trends Priv. Secur.* 1, 1-2 (2016), 1–135. [DOI](https://doi.org/10.1561/3300000004)
21. **Buypass.** (2020). Buypass Go SSL - Technical information. [Link](https://www.buypass.com/ssl/resources/go-ssl-technical-specification)
22. **Cremers, C., Horvat, M., Hoyland, J., Scott, S., and van der Merwe, T.** (2017). A Comprehensive Symbolic Analysis of TLS 1.3. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017*. ACM, New York, NY, USA, 1773–1788. [DOI](https://doi.org/10.1145/3133956.3134063)
23. **McCarney, D.** (2017). Validating challenges from multiple network vantage points. [Link](https://community.letsencrypt.org/t/validating-challenges-from-multiple-network-vantage-points/40955)
24. **Delignat-Lavaud, A., Fournet, C., Kohlweiss, M., Protzenko, J., Rastogi, A., Swamy, N., Zanella-Beguelin, S., Bhargavan, K., Pan, J., and Zinzindohoue, J. K.** (2017). Implementing and Proving the TLS 1.3 Record Layer. In *2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017*. IEEE Computer Society, NY, USA, 463–482. [DOI](https://doi.org/10.1109/SP.2017.58)
25. **DigiCert.** (2020). DigiCert - Certification Management. [Link](https://www.digicert.com/certificate-management/)
26. **Dolev, D. and Yao, A. C.-C.** (1983). On the security of public key protocols. *IEEE Trans. Inf. Theory* 29, 2 (1983), 198–207. [DOI](https://doi.org/10.1109/TIT.1983.1056650)
27. **Dumas, J.-G., Lafourcade, P., Melemedjian, F., Orfila, J.-B., and Thoniel, P.** (2017). LocalPKI: An Interoperable and IoT Friendly PKI. In *E-Business and Telecommunications - 14th International Joint Conference, ICETE 2017, Madrid, Spain, July 24-26, 2017, Revised Selected Paper (Communications in Computer and Information Science, Vol. 990)*. Springer, Berlin, 224–252. [DOI](https://doi.org/10.1007/978-3-030-11039-0_11)
28. **Fett, D., Hosseyni, P., and Küsters, R.** (2019). An Extensive Formal Security Analysis of the OpenID Financial-Grade API. In *2019 IEEE Symposium on Security and Privacy, SP 2019, San Francisco, CA, USA, May 19-23, 2019*. IEEE Computer Society, NY, USA, 453–471. [DOI](https://doi.org/10.1109/SP.2019.00067)
29. **Fett, D., Küsters, R., and Schmitz, G.** (2014). An Expressive Model for the Web Infrastructure: Definition and Application to the BrowserID SSO System. In *2014 IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA, May 18-21, 2014*. IEEE Computer Society, NY, USA, 673–688. [DOI](https://doi.org/10.1109/SP.2014.49)
30. **Fett, D., Küsters, R., and Schmitz, G.** (2016). A Comprehensive Formal Security Analysis of OAuth 2.0. In *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016*. ACM, New York, NY, USA, 1204–1215. [DOI](https://doi.org/10.1145/2976749.2978385)
31. **Fett, D., Küsters, R., and Schmitz, G.** (2017). The Web SSO Standard OpenID Connect: In-depth Formal Security Analysis and Security Guidelines. In *30th IEEE Computer Security Foundations Symposium, CSF 2017, Santa Barbara, CA, USA, August 21-25, 2017*. IEEE Computer Society, NY, USA, 189–202. [DOI](https://doi.org/10.1109/CSF.2017.20)
32. **Fournet, C., Kohlweiss, M., and Strub, P.-Y.** (2011). Modular Code-Based Cryptographic Verification. In *Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS 2011, Chicago, Illinois, USA, October 17-21, 2011*. ACM, New York, NY, USA, 341–350. [DOI](https://doi.org/10.1145/2046707.2046746)
33. **GlobalSign.** (2021). GlobalSign - Auto Enrollment Gateway. [Link](https://www.globalsign.com/en/auto-enrollment-gateway)
34. **Hammann, S., Sasse, R., and Basin, D. A.** (2020). Privacy-Preserving OpenID Connect. In *ASIA CCS ’20: The 15th ACM Asia Conference on Computer and Communications Security, Taipei, Taiwan, October 5-9, 2020*. ACM, 277–289. [DOI](https://doi.org/10.1145/3320269.3384724)
35. **Hoffman-Andrews, J.** (2020). 2020.02.29 CAA Rechecking Bug. [Link](https://community.letsencrypt.org/t/2020-02-29-caa-rechecking-bug/114591)
36. **Jackson, D., Cremers, C., Cohn-Gordon, K., and Sasse, R.** (2019). Seems Legit: Automated Analysis of Subtle Attacks on Protocols that Use Signatures. In *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019*. ACM, New York, NY, USA, 2165–2180. [DOI](https://doi.org/10.1145/3319535.3339813)
37. **Jones, M., Bradley, J., and Sakimura, N.** (2015). JSON Web Signature (JWS). *RFC 7515*. [DOI](https://doi.org/10.17487/RFC7515)
38. **Leibowitz, H., Herzberg, A., and Syta, E.** (2019). Provable Secure PKI Schemes. *Cryptology ePrint Archive, Report 2019/807*. [Link](https://eprint.iacr.org/2019/807)
39. **Let’s Encrypt.** (2018). ACME v2 Production Environment & Wildcards. [Link](https://community.letsencrypt.org/t/acme-v2-production-environment-wildcards/55578)
40. **Let’s Encrypt.** (2020). Let’s Encrypt Has Issued a Billion Certificates. [Link](https://letsencrypt.org/2020/02/27/one-billion-certs.html)
41. **Let’s Encrypt.** (2021). ACME Client Implementations. [Link](https://letsencrypt.org/docs/client-options)
42. **Let’s Encrypt.** (2021). Boulder: An ACME-based certificate authority, written in Go. [GitHub](https://github.com/letsencrypt/boulder)
43. **Let’s Encrypt.** (2021). Let’s Encrypt certification authority. [Link](https://letsencrypt.org)
44. **Let’s Encrypt.** (2021). Pebble ACME Server. [GitHub](https://github.com/letsencrypt/pebble)
45. **Meier, S., Schmidt, B., Cremers, C., and Basin, D. A.** (2013). The TAMARIN Prover for the Symbolic Analysis of Security Protocols. In *Computer Aided Verification - 25th International Conference, CAV 2013, Saint Petersburg, Russia, July 13-19, 2013. Proceedings (Lecture Notes in Computer Science, Vol. 8044)*. Springer, Berlin, 696–701. [DOI](https://doi.org/10.1007/978-3-642-39799-8_48)
46. **Menezes, A. and Smart, N. P.** (2004). Security of Signature Schemes in a Multi-User Setting. *Des. Codes Cryptogr.* 33, 3 (2004), 261–274. [DOI](https://doi.org/10.1023/B:DESI.0000036250.18062.3f)
47. **Needham, R. M. and Schroeder, M. D.** (1978). Using Encryption for Authentication in Large Networks of Computers. *Commun. ACM* 21, 12 (1978), 993–999. [DOI](https://doi.org/10.1145/359657.359659)
48. **Pornin, T. and Stern, J. P.** (2005). Digital Signatures Do Not Guarantee Exclusive Ownership. In *Applied Cryptography and Network Security, Third International Conference, ACNS 2005, New York, NY, USA, June 7-10, 2005, Proceedings (Lecture Notes in Computer Science, Vol. 3531)*. Springer, Berlin, 138–150.
49. **REPROSEC.** (2021). REPROSEC Project. [Link](https://reprosec.org/)
50. **Shoemaker, R. B.** (2020). Automated Certificate Management Environment (ACME) TLS Application-Layer Protocol Negotiation (ALPN) Challenge Extension. *RFC 8737*. [DOI](https://doi.org/10.17487/RFC8737)
51. **Somorovsky, J., Heiderich, M., Jensen, M., Schwenk, J., Gruschka, N., and Lo Iacono, L.** (2018). All your clouds are belong to us: security analysis of cloud management interfaces. In *Proceedings of the 3rd ACM Cloud Computing Security Workshop, CCSW 2011, Chicago, IL, USA, October 21, 2011*. ACM, New York, NY, USA, 3–14. [DOI](https://doi.org/10.1145/2046660.2046664)
52. **Somorovsky, J., Mayer, A., Schwenk, J., Kampmann, M., and Jensen, M.** (2012). On Breaking SAML: Be Whoever You Want to Be. In *Proceedings of the 21th USENIX Security Symposium, Bellevue, WA, USA, August 8-10, 2012*. USENIX Association, Berkeley, CA, USA, 397–412.
53. **Swamy, N., Hritcu, C., Keller, C., Rastogi, A., Delignat-Lavaud, A., Forest, S., Bhargavan, K., Fournet, C., Strub, P.-Y., Kohlweiss, M., Zinzindohoue, J. K., and Zanella Béguelin, S.** (2016). Dependent types and multi-monadic effects in F★. In *Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2016, St. Petersburg, FL, USA, January 20 - 22, 2016*. ACM, New York, NY, USA, 256–270. [DOI](https://doi.org/10.1145/2837614.2837655)
54. **Vanhoef, M. and Piessens, F.** (2017). Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2. In *Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017*. ACM, New York, NY, USA, 1313–1328. [DOI](https://doi.org/10.1145/3133956.3134027)
55. **Woo, T. Y. C. and Lam, S. S.** (1992). Authentication for distributed systems. *Computer* 25, 1 (1992), 39–52.
56. **Yu, J., Cheval, V., and Ryan, M.** (2016). DTKI: A New Formalized PKI with Verifiable Trusted Parties. *Comput. J.* 59, 11 (2016), 1695–1713. [DOI](https://doi.org/10.1093/comjnl/bxw039)
57. **ZeroSSL.** (2021). ACME Automation. [Link](https://zerossl.com/features/acme/)

### Application-Specific Data Structures

As explained in Section 6.1, we did not just use "plain" symbolic bytes (as defined by DY★) to model ACME. Instead, we defined high-level data structures that closely resemble their respective definitions in the ACME specification [5]. While this approach offers significant benefits, it requires converting these data structures to DY★ bytes, as all interfaces to DY★ are independent of ACME and thus require symbolic bytes.

This conversion is more than a technicality; if it is incorrect, we may lose all guarantees provided by DY★. Specifically, we would be unable to prove that our modeled ACME client and server APIs do not violate our global trace invariants (see Section 7). Therefore, we must not only implement suitable conversion functions but also prove that they are inverses of each other.

Below, we provide an example of one of our data structures, the respective conversion functions, and the correctness proof.

#### Example: Inner JWS for Account Key Rollover

The following F★ definition introduces a record type that models the inner JWS of an account key rollover message (see Section 7.3.5 of the ACME specification [5]). This message is sent by a client who wants to update its account public key. As the name "inner" JWS suggests, an instance of this type is used as the payload of a regular ACME protocol message (i.e., a JWS signed with the current account key).

```fstar
type inner_jws = {
  alg: string;
  jwk: jwk;
  url: string;
  nonce: string;
  old_key: jwk
}
```

#### Conversion Functions

We define two conversion functions: `to_bytes` and `from_bytes`, which convert the `inner_jws` record to and from a sequence of DY★ bytes.

```fstar
val to_bytes: inner_jws -> byte list
let to_bytes (ij: inner_jws) =
  let alg_bytes = encode_string ij.alg
  let jwk_bytes = encode_jwk ij.jwk
  let url_bytes = encode_string ij.url
  let nonce_bytes = encode_string ij.nonce
  let old_key_bytes = encode_jwk ij.old_key
  alg_bytes @ jwk_bytes @ url_bytes @ nonce_bytes @ old_key_bytes

val from_bytes: byte list -> inner_jws
let from_bytes (bytes: byte list) =
  let (alg_bytes, rest) = split_at (length_of_string ij.alg) bytes
  let (jwk_bytes, rest) = split_at (length_of_jwk ij.jwk) rest
  let (url_bytes, rest) = split_at (length_of_string ij.url) rest
  let (nonce_bytes, old_key_bytes) = split_at (length_of_string ij.nonce) rest
  {
    alg = decode_string alg_bytes;
    jwk = decode_jwk jwk_bytes;
    url = decode_string url_bytes;
    nonce = decode_string nonce_bytes;
    old_key = decode_jwk old_key_bytes
  }
```

#### Correctness Proof

We need to prove that the `to_bytes` and `from_bytes` functions are inverses of each other. This ensures that the conversion process does not introduce errors.

```fstar
lemma to_from_bytes_inverses (ij: inner_jws):
  from_bytes (to_bytes ij) == ij
proof
  // Detailed proof steps here
```

By ensuring the correctness of these conversion functions, we maintain the integrity and security guarantees of our ACME model.