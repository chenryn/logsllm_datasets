### IBM MQ Monitoring and Performance Metrics

#### Message Processing Time (QTIME)
- **QQSTQTST – Short-term QTIME**
  - **Definition**: The interval, in microseconds, between messages being put on the queue and then being destructively read. This value is based on the last few messages processed.
  - **Shared Queues**: For shared queues, the values shown are for measurements collected on this queue manager only.
  - **Comparison**: This is the same as the first value in QTIME from a `DISPLAY QSTATUS` command.
  - **SMF Data Collection**: This value is checked and set at the time of the SMF data collection and provides the same result as a `DISPLAY QSTATUS` command would, if run at the time the SMF record was generated.

- **QQSTQTLT – Long-term QTIME**
  - **Definition**: The interval, in microseconds, between messages being put on the queue and then being destructively read. This value is based on a larger sample of recently processed messages.
  - **Shared Queues**: For shared queues, the values shown are for measurements collected on this queue manager only.
  - **Comparison**: This is the same as the second value in QTIME from a `DISPLAY QSTATUS` command.
  - **SMF Data Collection**: This value is checked and set at the time of the SMF data collection and provides the same result as a `DISPLAY QSTATUS` command would, if run at the time the SMF record was generated.

#### Last Put and Get Times
- **QQSTLPUT – Last Put Date/Time**
  - **Definition**: The time, in store clock format, at which the last message was put to the queue since the queue manager started.
  - **Shared Queues**: For shared queues, the value shown is for messages put by this queue manager only.
  - **Comparison**: This is the same as LPUTDATE and LPUTTIME from a `DISPLAY QSTATUS` command.
  - **SMF Data Collection**: This value is checked and set at the time of the SMF data collection and provides the same result as a `DISPLAY QSTATUS` command would, if run at the time the SMF record was generated.

- **QQSTLGET – Last Get Date/Time**
  - **Definition**: The time, in store clock format, at which the last message was retrieved from the queue since the queue manager started.
  - **Shared Queues**: For shared queues, the value shown is for messages retrieved by this queue manager only.
  - **Note**: A message being browsed does not count as a message being retrieved.
  - **Comparison**: This is the same as LGETDATE and LGETTIME from a `DISPLAY QSTATUS` command.
  - **SMF Data Collection**: This value is checked and set at the time of the SMF data collection and provides the same result as a `DISPLAY QSTATUS` command would, if run at the time the SMF record was generated.

#### Queue Depth
- **QQSTDPHI – Highest Depth**
  - **Definition**: The highest depth reached by the queue during the SMF interval.
  - **Shared Queues**: Queue managers only have partial information about the change in depth of the queue over time. The QQSTDPHI value is based on this partial information:
    - At the start of the interval, the value of QQSTDPHI is set to zero.
    - When an application puts a message to the queue, the queue manager checks the depth of the queue, including the message just being put. If this value is higher than the current value of QQSTDPHI, it is used as the new value.
    - When SMF data for the queue is collected, the queue manager will check if the current queue depth is higher than QQSTDPHI. If so, the current queue depth is used as the new value.
  - **Note**: This approach means that the value of QQSTDPHI does not take into account messages put by other queue managers in the queue sharing group, unless those messages contributed to the queue depth at the point where SMF data is collected.

- **QQSTDPLO – Lowest Depth**
  - **Definition**: The lowest depth reached by the queue during the SMF interval.
  - **Shared Queues**: Queue managers only have partial information about the change in depth of the queue over time. The QQSTDPLO value is based on this partial information:
    - At the start of the interval, the value of QQSTDPLO is set to a special value.
    - The first time during the interval the queue manager obtains the depth of the queue, QQSTDPLO is set to that value.
    - When an application puts a message to the queue, the queue manager checks the depth of the queue, including the message just being put. If this value is lower than the current value of QQSTDPLO, it is used as the new value.
    - When SMF data for the queue is collected, the queue manager will check if the current queue depth is lower than QQSTDPLO. If so, the current queue depth is used as the new value.
  - **Note**: This approach means that the value of QQSTDPLO does not take into account messages got by other queue managers in the queue sharing group, unless those messages contributed to the queue depth at the point where SMF data is collected.

#### Message Counts and Sizes
- **QQSTPUTS – MQPUT Count**
  - **Definition**: The number of messages put to the queue using MQPUT during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTPUT1 – MQPUT1 Count**
  - **Definition**: The number of messages put to the queue using MQPUT1 during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTNPPT – Non-persistent MQPUT Count**
  - **Definition**: The number of non-persistent messages put to the queue using MQPUT during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTPPT – Persistent MQPUT Count**
  - **Definition**: The number of persistent messages put to the queue using MQPUT during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTNPP1 – Non-persistent MQPUT1 Count**
  - **Definition**: The number of non-persistent messages put to the queue using MQPUT1 during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTPP1 – Persistent MQPUT1 Count**
  - **Definition**: The number of persistent messages put to the queue using MQPUT1 during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTPUTB – MQPUT Bytes**
  - **Definition**: The number of bytes of message data, including any message properties, put to the queue using MQPUT during the SMF interval. This does not include message headers in the calculation of the size.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTPT1B – MQPUT1 Bytes**
  - **Definition**: The number of bytes of message data, including any message properties, put to the queue using MQPUT1 during the SMF interval. This does not include message headers in the calculation of the size.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTNPPB – Non-persistent MQPUT Bytes**
  - **Definition**: The number of bytes of non-persistent message data, including any message properties, put to the queue using MQPUT during the SMF interval. This does not include message headers in the calculation of the size.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTPPB – Persistent MQPUT Bytes**
  - **Definition**: The number of bytes of persistent message data, including any message properties, put to the queue using MQPUT during the SMF interval. This does not include message headers in the calculation of the size.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTNP1B – Non-persistent MQPUT1 Bytes**
  - **Definition**: The number of bytes of non-persistent message data, including any message properties, put to the queue using MQPUT1 during the SMF interval. This does not include message headers in the calculation of the size.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTP1B – Persistent MQPUT1 Bytes**
  - **Definition**: The number of bytes of persistent message data, including any message properties, put to the queue using MQPUT1 during the SMF interval. This does not include message headers in the calculation of the size.
  - **Shared Queues**: For shared queues, the count only includes messages put through the queue manager that generated the SMF record.

- **QQSTFLPT – Failed MQPUT Count**
  - **Definition**: The number of MQPUT calls targeting the queue, which failed with a completion code of MQCC_FAILED, during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes failed puts attempted through the queue manager that generated the SMF record.

- **QQSTFLP1 – Failed MQPUT1 Count**
  - **Definition**: The number of MQPUT1 calls targeting the queue, which failed with a completion code of MQCC_FAILED, during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes failed puts attempted through the queue manager that generated the SMF record.

- **QQSTFPTC – Fast Puts to a Waiting Getter Count**
  - **Definition**: The number of MQPUT and MQPUT1 calls targeting the queue, that were fast put to a waiting getter during the SMF interval.
  - **Note**: Put to a waiting getter is a technique whereby a message might not actually be put onto a queue if there is an application already waiting to get the message. Certain conditions must be satisfied for this to occur, in particular the message must be non-persistent and the putting and getting application must be processing the message outside syncpoint control.
  - **If these conditions are met**, then the message is transferred from the putting application’s buffer into the getting application’s buffer without actually touching the IBM MQ queue. This removes a lot of processing involved in putting the message on the queue and therefore leads to increased throughput and lower CPU costs.

- **QQSTFPTB – Fast Puts to a Waiting Getter Bytes**
  - **Definition**: The number of message and properties bytes from MQPUT and MQPUT1 calls targeting the queue, that were fast put to a waiting getter during the SMF interval. This does not include message headers in the calculation of the size.

- **QQSTSTRM – Streamed Message Count**
  - **Definition**: The number of messages that were successfully streamed from the queue during the interval. This is always zero if STREAMQ is not set for the queue.

- **QQSTMSMI – Minimum Message Size Put**
  - **Definition**: The minimum message size, in bytes, put to the queue during the SMF interval. This includes message and properties bytes, and does not include message headers such as the MQMD.

- **QQSTMSMA – Maximum Message Size Put**
  - **Definition**: The maximum message size, in bytes, put to the queue during the SMF interval. This includes message and properties bytes, and does not include message headers such as the MQMD.

- **QQSTMSAV – Average Message Size Put**
  - **Definition**: The average message size, in bytes, put to the queue during the SMF interval. This includes message and properties bytes, and does not include message headers such as the MQMD.

- **QQSTGETS – Destructive MQGET Count**
  - **Definition**: The number of messages got from the queue using destructive MQGET during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages got through the queue manager that generated the SMF record.

- **QQSTNPDG – Non-persistent Destructive MQGET Count**
  - **Definition**: The number of non-persistent messages got from the queue using destructive MQGET during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages got through the queue manager that generated the SMF record.

- **QQSTPDG – Persistent Destructive MQGET Count**
  - **Definition**: The number of persistent messages got from the queue using destructive MQGET during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages got through the queue manager that generated the SMF record.

- **QQSTGETB – Destructive MQGET Byte Count**
  - **Definition**: The number of message and properties bytes got from the queue using destructive MQGET during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages got through the queue manager that generated the SMF record.

- **QQSTNPDB – Non-persistent Destructive MQGET Bytes**
  - **Definition**: The number of non-persistent message and properties bytes got from the queue using destructive MQGET during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages got through the queue manager that generated the SMF record.

- **QQSTPDB – Persistent Destructive MQGET Bytes**
  - **Definition**: The number of persistent message and properties bytes got from the queue using destructive MQGET during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages got through the queue manager that generated the SMF record.

- **QQSTBRWS – Non-destructive MQGET Count**
  - **Definition**: The number of messages browsed from the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages browsed through the queue manager that generated the SMF record.

- **QQSTNPBR – Non-persistent Non-destructive MQGET Count**
  - **Definition**: The number of non-persistent messages browsed from the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages browsed through the queue manager that generated the SMF record.

- **QQSTPBR – Persistent Non-destructive MQGET Count**
  - **Definition**: The number of persistent messages browsed from the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages browsed through the queue manager that generated the SMF record.

- **QQSTBRWB – Non-destructive MQGET Bytes**
  - **Definition**: The number of message and properties bytes browsed from the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages browsed through the queue manager that generated the SMF record.

- **QQSTNPBB – Non-persistent Non-destructive MQGET Bytes**
  - **Definition**: The number of non-persistent message and properties bytes browsed from the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages browsed through the queue manager that generated the SMF record.

- **QQSTPBB – Persistent Non-destructive MQGET Bytes**
  - **Definition**: The number of persistent message and properties bytes browsed from the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes messages browsed through the queue manager that generated the SMF record.

- **QQSTFLGT – Failed Destructive MQGET Count**
  - **Definition**: The number of destructive MQGET calls targeting the queue, that failed with a completion code of MQCC_FAILED, during the SMF interval.
  - **Note**: Also included in the count is MQCC_WARNING when accompanied by a return code of MQRC_TRUNCATED_MSG_FAILED. However, not included in this count is any MQGET with a wait that receives MQRC_NO_MSG_AVAILABLE.
  - **Shared Queues**: For shared queues, the count only includes failed MQGET attempts through the queue manager that generated the SMF record.

- **QQSTNMAG – Failed Destructive MQGET with MQRC_NO_MSG_AVAILABLE Count**
  - **Definition**: The number of destructive MQGET calls, without wait, targeting the queue, that failed with both a completion code of MQCC_FAILED and a return code of MQRC_NO_MSG_AVAILABLE, during the SMF interval.
  - **Note**: This value is a subset of QQSTFLGT.
  - **Shared Queues**: For shared queues, the count only includes failed MQGET, without wait, attempts through the queue manager that generated the SMF record.

- **QQSTTMFB – Failed Destructive MQGET with MQRC_TRUNCATED_MSG_FAILED Count**
  - **Definition**: The number of destructive MQGET calls targeting the queue, that failed with both a completion code of MQCC_WARNING and a return code of MQRC_TRUNCATED_MSG_FAILED, during the SMF interval.
  - **Note**: This value is a subset of QQSTFLGT.
  - **Shared Queues**: For shared queues, the count only includes failed MQGET attempts through the queue manager that generated the SMF record.

- **QQSTFLGW – No Message Available for Destructive MQGET with a Wait Count**
  - **Definition**: The number of times that there is no message available for destructive MQGET calls with a wait, targeting the queue, causing the MQGET to continue waiting, during the SMF interval.

- **QQSTRDGW – Re-driven Destructive MQGET with a Wait Count**
  - **Definition**: The number of times that destructive MQGET calls with a wait are re-driven to check if there is a message on the queue that matches their criteria, during the SMF interval.
  - **Note**: When a new message arrives on the queue, all eligible waiting MQGET calls are woken up to attempt to get the message. Each MQGET with a wait that is woken up to check for a valid message increments this count by one. If any of these MQGET with wait fails to get the message, QQSTFLGW is incremented by one and the MQGET goes back into a waiting state.

- **QQSTFLBW – No Message Available for Non-destructive MQGET with a Wait Count**
  - **Definition**: The number of times that there is no message available for non-destructive MQGET calls with a wait, targeting the queue, causing the MQGET to continue waiting, during the SMF interval.

- **QQSTRDBW – Re-driven Non-destructive MQGET with a Wait Count**
  - **Definition**: The number of times that non-destructive MQGET calls with a wait are re-driven to check if there is a message on the queue that matches their criteria, during the SMF interval.
  - **Note**: When a new message arrives on the queue, all eligible waiting MQGET calls are woken up to attempt to browse the message. Each MQGET with a wait that is woken up to check for a valid message increments this count by one. If any of these MQGET with wait fails to browse the message, QQSTFLBW is incremented by one and the MQGET goes back into a waiting state.

- **QQSTSAGT – Destructive MQGET with MQRC_SIGNAL_REQUEST_ACCEPTED Count**
  - **Definition**: The number of destructive MQGET calls targeting the queue, that complete with both a completion code of MQCC_WARNING and a return code of MQRC_SIGNAL_REQUEST_ACCEPTED, during the SMF interval.

- **QQSTSABR – Non-destructive MQGET with MQRC_SIGNAL_REQUEST_ACCEPTED Count**
  - **Definition**: The number of non-destructive MQGET calls targeting the queue, that complete with both a completion code of MQCC_WARNING and a return code of MQRC_SIGNAL_REQUEST_ACCEPTED, during the SMF interval.

- **QQSTIPHI – High Watermark for IPPROC**
  - **Definition**: The highest number of concurrent input handles open on the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the watermark only includes handles owned through the queue manager that generated the SMF record.

- **QQSTIPLO – Low Watermark for IPPROC**
  - **Definition**: The lowest number of concurrent input handles open on the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the watermark only includes handles owned through the queue manager that generated the SMF record.

- **QQSTOPHI – High Watermark for OPPROC**
  - **Definition**: The highest number of concurrent output handles open on the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the watermark only includes handles owned through the queue manager that generated the SMF record.

- **QQSTOPLO – Low Watermark for OPPROC**
  - **Definition**: The lowest number of concurrent output handles open on the queue during the SMF interval.
  - **Shared Queues**: For shared queues, the watermark only includes handles owned through the queue manager that generated the SMF record.

- **QQSTOPEN – Successful MQOPEN Count**
  - **Definition**: The number of times the queue was successfully opened during the SMF interval. This does not include opens performed as part of an MQPUT1 call.
  - **Shared Queues**: For shared queues, the count only includes when the queue is opened through the queue manager that generated the SMF record.

- **QQSTCLOS – MQCLOSE Count**
  - **Definition**: The number of times the queue was successfully closed using MQCLOSE, during the SMF interval.
  - **Shared Queues**: For shared queues, the count only includes when the queue is closed through the queue manager that generated the SMF record.

- **QQSTINQR – MQINQ Count**
  - **Definition**: The number of MQINQ calls that completed with a completion code of MQCC_OK or MQCC_WARNING, during the SMF interval.

- **QQSTSET – MQSET Count**
  - **Definition**: The number of MQSET calls that completed with a completion code of MQCC_OK during the SMF interval.

- **QQSTEXPR – Expired Messages Count**
  - **Definition**: The number of expired messages cleared from the queue during the SMF interval.
  - **Note**: This includes messages expired by an application issuing an MQGET, by the expired message scanning task, or by a REFRESH QMGR TYPE(EXPIRY) command.

- **QQSTRBPT – Rolled Back MQPUT Counts**
  - **Definition**: The number of messages that were put to the queue, that have been rolled back off the queue, during the SMF interval.

- **QQSTRBGT – Rolled Back MQGET Counts**
  - **Definition**: The number of messages destructively read from the queue, that have been rolled back onto the queue, during the SMF interval.

### Interpreting IBM MQ for z/OS Accounting Data

IBM MQ for z/OS accounting data is written as SMF type 116 records. Use this topic as a reference to the different types of accounting data records.

#### IBM MQ Accounting Information Subtypes
- **Subtype 0**: Message manager accounting records (how much processor time was spent processing IBM MQ API calls and the number of MQPUT and MQGET calls). This information is produced when a named task disconnects from IBM MQ, and so the information contained within the record might cover many hours.
- **Subtype 1**: Accounting data for each task, at thread and queue level.
- **Subtype 2**: Additional queue-level accounting data (if the task used more queues than could fit in the subtype 1 record).
- **Subtype 10**: Accounting data for channels.
  - **Note**: Accounting information for specific channels can be enabled or suppressed by the STATCHL channel attribute and the STATACLS queue manager attribute.

#### SMF Trace Classes
- **Subtype 0 records** are produced with accounting trace class 1.
- **Subtype 1 and 2 records** are produced with accounting trace class 3.
- **Subtype 10 records** are produced with accounting trace class 4.

### Layout of an SMF Type 116 Record

The standard layout for SMF records involves three parts:
- **SMF Header**: Provides format, identification, and time and date information about the record itself.
- **Self-defining Section**: Defines the location and size of the individual data records within the SMF record.
- **Data Records**: The actual data from IBM MQ that you want to analyze.

For more information about SMF record formats, see z/OS MVS System Management Facilities (SMF).

#### SMF Header
| Offset | Type | Length | Name | Description | Example |
|--------|------|--------|------|-------------|---------|
| 0      | Integer | 2 | SM116LEN | SMF record length | 01A4 |
| 2      | Reserved | 2 | - | - | - |
| 4      | Integer | 1 | SM116FLG | System indicator | 5E |
| 5      | Integer | 1 | SM116RTY | Record type (always 116 for IBM MQ accounting records) | 74 |
| 6      | Integer | 4 | SM116TME | Time when SMF moved record | 00356124 |
| 10     | Integer | 4 | SM116DTE | Date when SMF moved record | 0100223F |
| 14     | Character | 4 | SM116SID | z/OS subsystem ID | D4E5F4F1 (MV41) |
| 18     | Character | 4 | SM116SSI | IBM MQ subsystem ID | D4D8F0F7 (MQ07) |
| 22     | Integer | 2 | SM116STF | Record subtype | 0000 |
| 24     | Character | 3 | SM116REL | IBM MQ version | F6F0F0 (600) |

This structured and detailed approach ensures clarity, coherence, and professionalism in the documentation.