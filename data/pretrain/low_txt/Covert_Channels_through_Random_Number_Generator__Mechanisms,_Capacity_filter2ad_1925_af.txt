### Covert Communication Channels and Mitigation Strategies

Recent studies have explored the use of CPU thermal characteristics as a medium for covert data transmission [38, 2]. This example highlights the potential for unexpected covert channels and underscores the importance of identifying, investigating, and mitigating all such sources of covert communication. This paper contributes to this field by uncovering a new and powerful covert channel and proposing both software and hardware mitigation strategies.

### Concluding Remarks

In this paper, we introduced a novel covert communication channel that leverages the shared hardware random number generator (RNG) unit as the communication medium. The key concept is to control the pressure on the shared RNG hardware unit by either executing a sequence of `rdseed` instructions or by busy-waiting, thereby influencing the behavior of `rdseed` instructions executed by the receiver. We demonstrated that this channel operates reliably with a high transmission rate across cores and virtual machines, and can be implemented in user space without requiring any operating system assistance. Additionally, we showed that the RNG channel can be established without relying on any processor timekeeping infrastructure or hardware performance counters.

The characteristics of the RNG channel make it easy to establish and challenging to mitigate. In terms of protection, we proposed two software-based and two hardware-based approaches. The software approaches involve using support available on Intel virtualization platforms to handle `rdseed` instructions in specialized ways or by running an additional thread to create constant pressure on the hardware RNG unit. The hardware approaches are based on either equalizing the timing of `rdseed` instructions across threads or partitioning the RNG resources among cores to eliminate the dependency of instruction latencies issued by one thread on those of another.

For secure system design, it is crucial to develop architectures that do not allow for information leakage through side channels or covert channels. To this end, it is essential to discover new vulnerabilities in existing and emerging systems and propose defenses against them. This paper makes contributions in both areas.

### Acknowledgment

We would like to thank our shepherd, Edward Suh, for his valuable insights and suggestions for improving the paper, and the anonymous reviewers for their constructive comments. This research was supported by the National Science Foundation grant CNS-1422401.

### References

[1] AMD. AMD64 Architecture Programmer’s Manual Volume 2: System Programming, 2016.
[2] Bartolini, D. B., Miedl, P., and Thiele, L. On the capacity of thermal covert channels in multicores. In Proceedings of the Eleventh European Conference on Computer Systems (2016), ACM, p. 24.
[3] Bello, L. DSA-1571-1 OpenSSL Predictable Random Number Generator, 2008. Debian Security Advisory.
[4] Berger, S., Caceres, R., Pendarakis, D., Sailer, R., Valdez, E., Perez, R., Schildhauer, W., and Srinivasan, D. TVDc: Managing security in the trusted virtual datacenter. ACM SIGOPS Operating Systems Review 42, 1 (2008), 40–47.
[5] Bucci, M., Germani, L., Luzzi, R., Trifiletti, A., and Varanonuovo, M. A high-speed oscillator-based truly random number source for cryptographic applications on a smart card IC. IEEE Transactions on Computers 52, 4 (2003), 403–409.
[6] Burdonov, I., Kosachev, A., and Iakovenko, P. Virtualization-based separation of privilege: Working with sensitive data in untrusted environments. In Proceedings of the 1st EuroSys Workshop on Virtualization Technology for Dependable Systems (2009), ACM, pp. 1–6.
[7] Chen, J., and Venkataramani, G. CC-hunter: Uncovering covert timing channels on shared processor hardware. In International Symposium on Microarchitecture (2014), IEEE Computer Society, pp. 216–228.
[8] Demchik, V. Pseudo-random number generators for Monte Carlo simulations on ATI graphics processing units. Computer Physics Communications 182, 3 (2011), 692–705.
[9] Dorrendorf, L., Gutterman, Z., and Pinkas, B. Cryptanalysis of the random number generator of the Windows operating system. ACM Transactions on Information and System Security (TISSEC) 13, 1 (2009), 10.
[10] Evtyushkin, D., Elwell, J., Ozsoy, M., Ponomarev, D., Abu-Ghazaleh, N., and Riley, R. Iso-X: A flexible architecture for hardware-managed isolated execution. In Proceedings of the 47th International Symposium on Microarchitecture (MICRO) (2014), pp. 190–202.
[11] Evtyushkin, D., Elwell, J., Ozsoy, M., Ponomarev, D., Ghazaleh, N. A., and Riley, R. Flexible hardware-managed isolated execution: Architecture, software support, and applications. IEEE Transactions on Dependable and Secure Computing (TDSC) (2016).
[12] Evtyushkin, D., Ponomarev, D., and Abu-Ghazaleh, N. Covert channels through branch predictors: A feasibility study. In Proceedings of the Fourth Workshop on Hardware and Architectural Support for Security and Privacy (HASP) (2015), ACM, p. 5.
[13] Evtyushkin, D., Ponomarev, D., and Abu-Ghazaleh, N. Jump Over ASLR: Attacking branch predictors to bypass ASLR. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS) (2016), ACM.
[14] Evtyushkin, D., Ponomarev, D., and Abu-Ghazaleh, N. Understanding and mitigating covert channels through branch predictors. ACM Transactions on Architecture and Code Optimization (TACO) 13, 1 (2016), 10.
[15] Felt, A. P., Chin, E., Hanna, S., Song, D., and Wagner, D. Android permissions demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security (2011), ACM, pp. 627–638.
[16] Gruss, D., Maurice, C., Fogh, A., Lipp, M., and Mangard, S. Prefetch side-channel attacks: Bypassing SMAP and kernel ASLR. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS) (2016), ACM.
[17] Gruss, D., Maurice, C., and Wagner, K. Flush+Flush: A stealthier last-level cache attack. In Detection of Intrusions and Malware, and Vulnerability Assessment: 13th International Conference, DIMVA 2016, San Sebastian, Spain, July 7-8, 2016, Proceedings (2016), Springer.
[18] Guri, M., Monitz, M., Mirski, Y., and Elovici, Y. BitWhisper: Covert signaling channel between air-gapped computers using thermal manipulations. In IEEE 28th Computer Security Foundations Symposium (CSF) (2015), IEEE, pp. 276–289.
[19] Gutmann, P. Software generation of practically strong random numbers. In Usenix Security (1998).
[20] Hamming, R. W. Error detecting and error correcting codes. Bell System Technical Journal 29, 2 (1950), 147–160.
[21] Hu, W.-M. Reducing timing channels with fuzzy time. Journal of Computer Security 1, 3-4 (1992), 233–254.
[22] Hunger, C., Kazdagli, M., Rawat, A., Dimakis, A., Vishwanath, S., and Tiwari, M. Understanding contention-based channels and using them for defense. In High Performance Computer Architecture (HPCA), 2015 IEEE 21st International Symposium on (2015), IEEE, pp. 639–650.
[23] Intel. Digital Random Number Generator (DRNG) Software Implementation Guide.
[24] Intel. Intel 64 and IA-32 Software Developer’s Manual, Volume 3C: System Programming Guide, Part 3.
[25] Jang, Y., Lee, S., and Taesoo, K. Breaking Kernel Address Space Layout Randomization with Intel TSX. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS) (2016), ACM.
[26] Jun, B., and Kocher, P. The Intel random number generator. Cryptography Research Inc. White Paper (1999).
[27] Junkins, S. The Compute Architecture of Intel Processor Graphics Gen9.
[28] Kaplan, D., Kedmi, S., Hay, R., and Dayan, A. Attacking the Linux PRNG on Android: Weaknesses in seeding of entropic pools and low boot-time entropy. In 8th USENIX Workshop on Offensive Technologies (WOOT 14) (2014).
[29] Kayaalp, M., Abu-Ghazaleh, N., Ponomarev, D., and Jaleel, A. A high-resolution side-channel attack on last-level cache. In Proceedings of the 53rd Annual Design Automation Conference (2016), ACM, p. 72.
[30] Koetter, R., and Kschischang, F. R. Coding for errors and erasures in random network coding. IEEE Transactions on Information Theory 54, 8 (2008), 3579–3591.
[31] Latham, D. C. Department of Defense Trusted Computer System Evaluation Criteria. Department of Defense (1986).
[32] Lenstra, A., Hughes, J. P., Augier, M., Bos, J. W., Kleinjung, T., and Wachter, C. Ron was wrong, Whit is right. Tech. Rep., IACR, 2012.
[33] Li, C., Ding, C., and Shen, K. Quantifying the cost of context switch. In Proceedings of the 2007 Workshop on Experimental Computer Science (2007), ACM, p. 2.
[34] Li, K., Kavcic, A., Venkataramani, R., and Erden, M. F. Channels with both random errors and burst erasures: Capacities, LDPC code thresholds, and code performances. In Information Theory Proceedings (ISIT), 2010 IEEE International Symposium on (2010), IEEE, pp. 699–703.
[35] Liberty, J. S., Barrera, A., Boerstler, D. W., Chadwick, T. B., Cottier, S. R., Hofstee, H. P., Rosser, J. A., and Tsai, M. L. True hardware random number generation implemented in the 32-nm SOI POWER7+ processor. IBM Journal of Research and Development 57, 6 (2013), 4–1.
[36] Liu, F., Yarom, Y., Ge, Q., Heiser, G., and Lee, R. B. Last-level cache side-channel attacks are practical. In IEEE Symposium on Security and Privacy (2015), pp. 605–622.
[37] Martin, R., Demme, J., and Sethumadhavan, S. TimeWarp: Rethinking timekeeping and performance monitoring mechanisms to mitigate side-channel attacks. ACM SIGARCH Computer Architecture News 40, 3 (2012), 118–129.
[38] Masti, R. J., Rai, D., Ranganathan, A., Muller, C., Thiele, L., and Capkun, S. Thermal covert channels on multi-core platforms. In 24th USENIX Security Symposium (USENIX Security 15) (2015), pp. 865–880.
[39] Maurice, C., Neumann, C., Heen, O., and Francillon, A. C5: Cross-cores cache covert channel. In Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2015, pp. 46–64.
[40] McKeen, F., Alexandrovich, I., Berenzon, A., C. Rozas, Shafi, H., Shanbhogue, V., and Svagaonkar, U. Innovative instructions and software model for isolated execution. In Workshop on Hardware and Architectural Support for Security and Privacy, with ISCA’13 (2013).
[41] Moser, S. M. Error probability analysis of binary asymmetric channels. Dept. El. & Comp. Eng., Nat. Chiao Tung Univ (2009).
[42] Mundada, Y., Ramachandran, A., and Feamster, N. Silverline: Data and network isolation for cloud services. In HotCloud (2011).
[43] Naghibijouybari, H., and Abu-Ghazaleh, N. Covert channels on GPGPUs. Computer Architecture Letters (2016).
[44] Pessl, P., Gruss, D., Maurice, C., Schwarz, M., and Mangard, S. DRAMA: Exploiting DRAM addressing for cross-CPU attacks. In 25th USENIX Security Symposium (USENIX Security 16) (Austin, TX, 2016), USENIX Association, pp. 565–581.
[45] Sailer, R., Valdez, E., Jaeger, T., Perez, R., Van Doorn, L., Griffin, J. L., Berger, S., Sailer, R., Valdez, E., Jaeger, T., et al. sHype: Secure hypervisor approach to trusted virtualized systems. Techn. Rep. RC23511 (2005).
[46] Schneider, F. B. Least privilege and more. In Computer Systems. Springer, 2004, pp. 253–258.
[47] Sigoure, B. How long does it take to make a context switch, 2010.
[48] Son, S. H., Mukkamala, R., and David, R. Integrating security and real-time requirements using covert channel capacity. IEEE Transactions on Knowledge and Data Engineering 12, 6 (2000), 865–879.
[49] Stone, J. E., Gohara, D., and Shi, G. OpenCL: A parallel programming standard for heterogeneous computing systems. Computing in Science & Engineering 12, 1-3 (2010), 66–73.
[50] Sunar, B., Martin, W. J., and Stinson, D. R. A provably secure true random number generator with built-in tolerance to active attacks. IEEE Transactions on Computers 56, 1 (2007), 109–119.
[51] Vattikonda, B. C., Das, S., and Shacham, H. Eliminating fine-grained timers in Xen. In Proceedings of the 3rd ACM Workshop on Cloud Computing Security Workshop (2011), ACM, pp. 41–46.
[52] Wang, Y., Ferraiuolo, A., and Suh, G. E. Timing channel protection for a shared memory controller. In High Performance Computer Architecture (HPCA), 2014 IEEE 20th International Symposium on (2014), IEEE, pp. 225–236.
[53] Wang, Z., and Lee, R. Covert and side channels due to processor architecture. In Annual Computer Security Applications Conference (2006), IEEE.
[54] Wicker, S. B., and Bhargava, V. K. Reed-Solomon Codes and Their Applications. John Wiley & Sons, 1999.
[55] Wu, Z., Xu, Z., and Wang, H. Whispers in the hyper-space: High-speed covert channel attacks in the cloud. In Presented as part of the 21st USENIX Security Symposium (USENIX Security 12) (2012), pp. 159–173.
[56] Xu, Y., Bailey, M., Jahanian, F., Joshi, K., Hiltunen, M., and Schlichting, R. An exploration of L2 cache covert channels in virtualized environments. In Proceedings of the 3rd ACM Workshop on Cloud Computing Security Workshop (2011), ACM, pp. 29–40.
[57] Xu, Y., Cui, W., and Peinado, M. Controlled-channel attacks: Deterministic side channels for untrusted operating systems.
[58] Zhang, Y., Juels, A., Oprea, A., and Reiter, M. K. HomeAlone: Co-residency detection in the cloud via side-channel analysis. In Proc. 2011 IEEE Symposium on Security and Privacy (S&P) (2011), pp. 313–328.