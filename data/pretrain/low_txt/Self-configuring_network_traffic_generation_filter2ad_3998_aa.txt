# Self-Configuring Network Traffic Generation

**Authors:**
- Joel Sommers, University of Wisconsin–Madison, Email: [joel.sommers@wisc.edu](mailto:joel.sommers@wisc.edu)
- Paul Barford, University of Wisconsin–Madison, Email: [paul.barford@wisc.edu](mailto:paul.barford@wisc.edu)

## Abstract
The ability to generate repeatable and realistic network traffic is crucial in both simulation and testbed environments. Current traffic generation tools are limited to either simple packet streams for throughput testing or application-specific tools that recreate representative HTTP requests. In this paper, we introduce Harpoon, a new, application-independent tool for generating representative IP flow-level traffic. Harpoon generates TCP and UDP packet flows with the same byte, packet, temporal, and spatial characteristics as observed in live networks. Unlike other tools, Harpoon can self-configure by automatically extracting parameters from standard NetFlow logs or packet traces. We detail Harpoon’s architecture and implementation and validate its capabilities through controlled laboratory experiments using configurations derived from real-world data. We also demonstrate Harpoon’s effectiveness in a router benchmarking experiment, comparing it with common throughput test methods. Our results show that the load generated by Harpoon on router subsystems is significantly different, suggesting that such tests can provide valuable insights into router behavior under actual operating conditions.

**Categories and Subject Descriptors:**
- C.2.6 [Computer-Communication Networks]: Internetworking—Routers
- C.4 [Performance of Systems]: Measurement techniques, Modeling techniques, Performance attributes

**General Terms:**
- Measurement, Performance

**Keywords:**
- Traffic Generation, Network Flows

## 1. Introduction
The network research community needs tools to evaluate new algorithms, systems, and protocols under conditions similar to those experienced in live deployments, ensuring reproducible results. Tools for generating scalable, tunable, and representative network traffic are essential in laboratory, emulation, and simulation environments. Without such tools, new systems risk unpredictable behavior and poor performance when deployed in live networks.

Current best practices in traffic generation focus on either simple packet streams or recreating single application-specific behaviors. Packet streaming methods, like iperf, use constant intervals between packets and form the basis for standard router performance tests (e.g., RFC 2544 and RFC 2889). While useful, these methods lack the richness and diversity of real Internet traffic. Application-specific workload generators, such as those for web traffic, are more sophisticated but are limited to specific applications and can be cumbersome for router and switch testing.

To address these limitations, we present Harpoon, a new network traffic generator capable of recreating IP flow-level traffic representative of that observed at routers in the Internet. Harpoon abstracts flow-level traffic generation into a series of application-independent file transfers using TCP or UDP. The model includes temporal (diurnal effects) and spatial (IP address space coverage) components. Harpoon can be manually parameterized or self-parameterized using NetFlow or packet trace data, simplifying its use and distinguishing it from other tools.

We evaluated Harpoon in a controlled laboratory environment, demonstrating its ability to qualitatively recreate traffic using data from the University of Wisconsin-Madison and the University of Auckland. We also conducted a throughput evaluation of a Cisco 6509 switch/router, showing that while throughputs achieved with Harpoon are similar to those of standard methods, the loads on router subsystems are substantially different. This suggests that Harpoon can augment standard test suites to provide insights into system behavior under actual operating conditions.

The rest of the paper is organized as follows: Section 2 discusses related work, Section 3 describes the design requirements and architecture of Harpoon, Section 4 presents the implementation details, Section 5 provides the results of validation tests, Section 6 gives the results from the throughput evaluation, and Section 7 concludes and outlines future work.

## 2. Related Work
There is extensive literature on Internet traffic characterization and modeling. Successful models often focus on the self-similarity in traffic over large time scales, as seen in both local and wide area networks. Crovella and Bestavros extended this work by showing that self-similarity in web traffic arises from multiplexing ON/OFF sources with heavy-tailed file sizes.

Several flow-level network traffic models have been proposed, used to study fairness, response times, queue lengths, and loss probabilities. Our work differs by focusing on building a flow-level model based on empirical distributions measured at a router in a live network. Our model can be realized in a tool for generating representative packet traffic in live or emulated network environments or for creating traffic in simulation environments.

Similar approaches have been used in application-specific workload generators like SURGE, Web Polygraph, and GISMO. These tools are designed to generate scalable, representative web cache and streaming workloads. Harpoon, however, is application-independent, uses empirical distributions, generates both UDP and TCP traffic, and includes both spatial and temporal characteristics.

A closely related model was introduced by Feldmann et al., which generalizes the SURGE model for web traffic to generate background traffic in the ns-2 simulator. A similar model based on connection-rate superposition was developed by Cleveland et al. Our model is more general, with no web-specific parameters, the capability to transfer files via UDP, and the inclusion of temporal and spatial request characteristics. Uhlig's flow-level traffic model is also similar but uses fewer parameters and does not rely on an underlying transport protocol. Our work is distinct in that we create and evaluate a tool (Harpoon) that can be used for traffic generation on real systems and can be automatically parameterized from flow records, requiring no additional modeling steps.

In contrast, tools like tcpreplay and flowreplay replay traffic based on raw packet traces, attempting to mirror specific timings. Monkey-See Monkey-Do extracts features from raw packet traces to replay HTTP transactions. Harpoon differs by being designed to generate representative background traffic with scalability and flexibility, and by using source-level traffic descriptions that do not make assumptions about the transport layer.

## 3. Architecture
The design objectives of Harpoon are to scalably generate application-independent network traffic at the IP flow level and to be easily parameterized to create traffic statistically identical to that measured at a given vantage point in the Internet. Figure 1 depicts the high-level process flow of these objectives.

An IP flow, as defined in [24], is a unidirectional series of IP packets of a given protocol traveling between a source and destination IP/port pair within a certain period. We tie our definition to the tools we use to gather and analyze network flow data, such as flow-tools and FlowScan. Harpoon's model includes key aspects of live flows, such as diurnal volume characteristics and spatial (source and destination IP address frequency) characteristics. 

![Figure 1: High-Level Process Flow](figure1.png)

The self-configuration step extracts these parameters from flow records collected at a given vantage point in an operational network. These parameters are then used to generate traffic in a testbed that statistically matches the temporal and spatial characteristics of the live flows. Harpoon supports a variety of application-level traffic, including voice and SQL worms, though development of a model with a more diverse set of UDP traffic sources is left for future work.