# Weaponizing Hypervisors to Combat Car and Medical Device Attacks

**Presenters:**
- Ali Islam, CEO, Numen Inc.
- Dan Regalado, CTO, Numen Inc.

## Agenda
1. Basic Concepts
2. Q&A
3. Embedded Environment
4. Demonstration: Attacks and Use Cases
5. Hypervisors and Strong Trends
6. Confidentiality
7. Agent-less vs. Agent (AV)
8. Setting Up the Environment
9. Booting the Board with JTAG
10. U-Boot Configuration
11. Building the Rootfs
12. Development Environment
13. VMI and Semantic Gap
14. Single Stepping
15. Extended Page Tables
16. Multiple p2m Translations
17. Hooking and Syscall Monitoring on ARM
18. Attacks and Detection Scenarios
19. Policy Enforcement – Network Use Case
20. Remediation
21. Practical Recommendations for End-to-End Systems
22. Releasing the Tool to the Public
23. Takeaways
24. Special Thanks
25. Q&A

## Basic Concepts and Q&A
- **Sophisticated Invisibility (VMI):** A cat-and-mouse game that ensures the hypervisor remains invisible.
- **No Interference with Device Functionality:** The hypervisor does not disrupt the normal operation of the device.
- **Regulatory Compliance:** Helps in meeting regulations and certifications.

## Embedded Environment
### Setting Up the Environment
- **Hardware:** Zynq UltraScale+ MPSoC ZCU 102
  - DDR4 – 4 GB
  - Quad-core Cortex A-53
  - Dual-core Cortex R5F
- **Connections:**
  - SD Card
  - UART
  - JTAG
  - Ethernet

### Booting the Board with JTAG
- **Xilinx System Debugger CLI (xsdb):** Reads a TCL file.
- **PMUFW:** Sets up the clock and platform management.
- **FSBL:** First Stage Bootloader initializes U-Boot.
- **U-Boot:** Boots the Hypervisor, Kernel, and rootfs.
- **Bl31:** ARM Trusted Firmware.

### U-Boot Configuration
- **Device Tree Blob (DTB) Preparation:**
  ```shell
  ZynqMP> tftpb 0x1380000 xen.dtb
  ZynqMP> tftpb 0x80000 Image-2018.3
  ZynqMP> tftpb 0x1400000 xen.ub
  ZynqMP> bootm 0x1400000 - 0x1380000
  # mkimage -A arm64 -T kernel -a 0x1400000 -e 0x1400000 -C none -d xen-zcu102-zynqmp xen.ub
  ```

### Building the Rootfs
- **PetaLinux:** Xilinx-based, not universal.
- **Yocto:** Universal but builds a limited Busybox rootfs.
- **Debootstrap:** Debian-based FileSystem, recommended.

### Development Environment
- **Chroot into the Rootfs:** Use Schroot from a mounting point via QEMU.

## VMI and Semantic Gap
- **Understanding Meaning Using OS-Specific Knowledge:**
  - Linux-specific knowledge is crucial.
  - Example: `linux_name = 0x4f0; linux_tasks = 0x280;`
- **Kernel Symbol Value Example:**
  ```c
  status_t vmi_read_ksym(
      vmi_instance_t vmi,
      const char *sym,
      size_t count,
      void *buf,
      size_t *bytes_read
  );
  ```

## Single Stepping
- **Hardware Breakpoints**
- **Software Breakpoints:**
  - CPU-assisted
  - No CPU assistance

## Extended Page Tables
- **p2m Translation:**
  - Machine Physical Address
  - VM Virtual Address
  - VM Physical Address
  - EPTP (Extended Page Table Pointer)

## Hooking and Syscall Monitoring on ARM
- **Single Step:**
  - Ensure to single-step to execute original functionality.
- **Clean Up:**
  - Remove all hooks and exit VMI to avoid crashes or instability.
- **Add and Register Hook:**
  - Use `vmi_register_event()` and write to memory at the start of each API function.
- **Callback:**
  - Perform analysis when control reaches the registered callback.

## Attacks and Detection Scenarios
- **Memory Corruption Attack:**
  - Shell spawn at the end.
  - Easy sequence-based detection.
- **Shellcode Execution Delay:**
  - Traditional AV challenge.
- **Solution Approach:**
  - Create a "triggered memory view" hooking only suspicious syscalls.
  - Enable full hooking as soon as shellcode spawns.

## Malware Hypervisor-Aware
- **Malware Capabilities:**
  - Can read kernel memory and identify SMC hooks.
  - May stop running or wipe the system.
  - Can remove hooks, leading to detection bypass.

## Stealthiness Using Memory Views
- **Execute Only View**
- **Read/Write Only View**

## Policy Enforcement – Network Use Case
- **Traverse Task List:**
  - Check for socket handles in task structs.
- **Hook Network APIs:**
  - More active approach compared to passive monitoring.

## Remediation
- **Process Killing:**
  - Manipulate frequently called APIs.
  - Make string parameters NULL.
- **Other Mature Methods:**
  - Advanced techniques for remediation.

## Practical Recommendations for End-to-End Systems
- **Software Breakpoints**
- **Efficient Single Stepping Mechanism**
- **Event Mechanism**
- **Efficient Translations Caching**
- **Multiple Mappings Support for p2m**
- **Memory Page Permissions Management**

## Releasing the Tool to the Public
- **Tool for Syscall Monitoring:**
  - ARM & Intel support.
- **Files Needed:**
  - Booting: `zynqmp_fsbl.elf`, `u-boot.elf`, `bl31.elf`, `pmufw.elf`
  - Environment: `xen.dtb`, `Kernel-Image`, `Xen-Hypervisor` (version 11.0), `DomU-Configuration files`, `xen startup scripts`
  - Test: ARM64-based malware and exploit samples.
- **Dropbox Link:** [xxxxxxxxxxxxxxxxxxxx]

## Takeaways
- **Smart Hypervisors on ARM:** Not just for isolation.
- **ARM Syscall Hooking:** A great achievement, but detection strategies are key.
- **Memory View Switching:** A new way to detect maliciousness from VMI.

## Special Thanks
- **Stefano Stabellini:** For Xen troubleshooting.
- **Matt Leinhos:** For ARM/Intel VMI features.
- **Additional Team Members:** Your contributions were invaluable.

## Q&A
- **Ali_Islam_Khan**
- **danuxx**

For more information, please contact us at [contact details].