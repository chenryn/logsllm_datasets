### Optimized Text

To minimize the online execution time, as much of the work as possible should be moved to the preprocessing phase. The 5K>*OJAI subroutine can be implemented using sixteen 8-bit-to-8-bit garbled tables, similar to the score matrix used in the Smith-Waterman application. From the perspective of the circuit generator, this results in a garbled "gate" with \(2^8 \times 8 = 2048\) ciphertexts. The circuit evaluator needs to decrypt only 8 of these (i.e., one table entry) at a cost of 4 hash evaluations (since we use 80-bit wire labels and SHA-1, with a 160-bit output length, for the encryption). This design is distinguished by its very low online cost, making it well-suited for scenarios where the primary goal is to minimize the online execution time.

#### Minimizing Total Execution Time

Our second design aims to minimize the total execution time by implementing 5K>*OJAI with an efficient circuit derived from the work of Wolkerstorfer et al. [33]. The two logical components of 5K>*OJAI are computing an inverse over \(GF(2^8)\) and an affine transformation over \(GF(2)\).

The circuit we use to compute the inverse over \(GF(2^8)\) is shown in Figure 8. Essentially, \(GF(2^8)\) is viewed as an extension of \(GF(2^4)\), so that an element of \(GF(2^8)\) is mapped to a vector of length two over \(GF(2^4)\). A series of operations over \(GF(2^4)\) are applied to these values, which are then mapped back to an element in \(GF(2^8)\). In the circuit diagram, Map and Inverse Map circuits realize the bijection between \(GF(2^8)\) and \((GF(2^4))^2\); \(\oplus\) and \(\otimes\) represent addition and multiplication over \(GF(2^4)\), respectively. The affine transform over the finite field \(GF(2)\) and all of the component circuits except for the \(\otimes\) and \(GF(2^4)\)-Inverse circuits can be implemented using XOR gates alone. Since each \(\otimes\) circuit has 16 non-free gates and each \(GF(2^4)\)-Inverse has 10 non-free gates, the total number of non-free gates per \(GF(2^8)\)-Inverse circuit is \(16 \times 3 + 10 = 58\).

#### MixColumns

The core functionality of EN+KI is to compute \(s'c(x) = a(x) \otimes sc(x)\), where \(0 \leq c \leq 3\) specifies the column, \(a(x) = 03x^3 + 01x^2 + 01x + 02\), and \(\otimes\) denotes multiplication over the finite field \(GF(2^8)\). Let \(sc(x) = s_{3,c}x^3 + s_{2,c}x^2 + s_{1,c}x + s_{0,c}\) and \(s'c(x) = s'_{3,c}x^3 + s'_{2,c}x^2 + s'_{1,c}x + s'_{0,c}\). This is equivalent to:

\[
s'_{0,c} = (02 \cdot s_{0,c}) \oplus (03 \cdot s_{1,c}) \oplus s_{2,c} \oplus s_{3,c}
\]
\[
s'_{1,c} = s_{0,c} \oplus (02 \cdot s_{1,c}) \oplus (03 \cdot s_{2,c}) \oplus s_{3,c}
\]
\[
s'_{2,c} = s_{0,c} \oplus s_{1,c} \oplus (02 \cdot s_{2,c}) \oplus (03 \cdot s_{3,c})
\]
\[
s'_{3,c} = (03 \cdot s_{0,c}) \oplus s_{1,c} \oplus s_{2,c} \oplus (02 \cdot s_{3,c})
\]

It follows that:

\[
s'_{0,c} = (02 \cdot s_{0,c}) \oplus (02 \cdot s_{1,c}) \oplus s_{1,c} \oplus s_{2,c} \oplus s_{3,c}
\]
\[
s'_{1,c} = s_{0,c} \oplus (02 \cdot s_{1,c}) \oplus (02 \cdot s_{2,c}) \oplus s_{2,c} \oplus s_{3,c}
\]
\[
s'_{2,c} = s_{0,c} \oplus s_{1,c} \oplus (02 \cdot s_{2,c}) \oplus (02 \cdot s_{3,c}) \oplus s_{3,c}
\]
\[
s'_{3,c} = (02 \cdot s_{0,c}) \oplus s_{0,c} \oplus s_{1,c} \oplus s_{2,c} \oplus (02 \cdot s_{3,c})
\]

The operation \(02 \cdot b\) is defined as multiplying \(b\) by \(02\) modulo \(1b\) in \(GF(2^8)\). If \(b = b_7 \ldots b_1 b_0\), and \(z = z_7 \ldots z_1 z_0 = 02 \cdot b\), the output bits can be computed using only XOR gates:

\[
z_4 = b_3 \oplus b_7
\]
\[
z_0 = b_7
\]
\[
z_6 = b_5
\]
\[
z_2 = b_1
\]
\[
z_5 = b_4
\]
\[
z_7 = b_6
\]
\[
z_1 = b_0 \oplus z_7
\]
\[
z_3 = b_2 \oplus b_7
\]

For every column of 4-byte numbers, the equations above are implemented by the MixOneColumn circuit (Figure 9). Each invocation of EN+KI involves processing four columns, so we can build the MixColumns circuit by juxtaposing four MixOneColumn circuits. Thus, the MixColumns circuit can be implemented using only XOR gates.

### Results

Using the first (online-minimizing) SubBytes design, there are no non-free gates and 160 oblivious table lookups. The total time for the computation is 1.6 seconds without preprocessing. With preprocessing, the online time to evaluate the circuit is 0.008 seconds (since the evaluator can always identify the right entry in the table to decrypt), more than 50 times faster than the best previous results [11].

With our second design, the total number of non-free gates for the entire AES computation is \(58 \times 16 + 10 = 9280\). The overall time is 0.2 seconds (of which 0.08 seconds is spent on oblivious transfer) without preprocessing, more than 16 times faster than the best previous results [11]. The online time is 0.06 seconds with preprocessing enabled.

### Conclusion

Misconceptions about the performance and scalability of garbled circuits are pervasive. This perception has led to the development of several complex, special-purpose protocols for problems that are better addressed by garbled circuits. We demonstrate that a simple pipelining approach, along with techniques to minimize circuit size, is enough to make garbled circuits scale to many large problems, and practical enough to be competitive with special-purpose protocols.

We hope improvements in the efficiency of privacy-preserving computing will enable many sensitive applications to be deployed. Our approach is just a first step towards that goal, and more work needs to be done before secure computation can be used routinely in practice. Although our approach enables circuits to scale arbitrarily and makes evaluation substantially faster than previous work, it is still far slower than normal computation. Further performance improvements are needed before large problems can be computed securely in interactive systems.

Additionally, our work assumes the semi-honest threat model, which is only suitable for certain scenarios where only one party obtains the output or both parties can rely on verified implementations. Efficient protocols secure against a malicious adversary model appear to be much more challenging to design.

### Acknowledgments

The authors thank Ian Goldberg for his extensive and very helpful comments and suggestions on this paper. Peter Chapman, Jiamin Chen, Yikan Chen, Austin DeVinney, Brittany Harris, Sang Koo, abhi shelat, Chi-Hao Shen, Dawn Song, David Wagner, and Samee Zahur also provided valuable comments on this work. The authors thank Somesh Jha and Louis Kruger for providing their Smith-Waterman secure computation implementation and answering our questions about it.

This work was partly supported by grants from the National Science Foundation, DARPA, and a MURI award from the Air Force Office of Scientific Research. The contents of this paper do not necessarily reflect the position or the policy of the US Government, and no official endorsement should be inferred.

### References

[1] Y. Aumann and Y. Lindell. Security against Covert Adversaries: Efficient Protocols for Realistic Adversaries. In 4th Theory of Cryptography Conference, 2007.
[2] M. Bellare and P. Rogaway. Random Oracles Are Practical: A Paradigm for Designing Efficient Protocols. In ACM Conference on Computer and Communications Security (CCS), 1993.
[3] J. Daemen and V. Rijmen. The Design of Rijndael: AES — The Advanced Encryption Standard. Springer Verlag, 2002.
[4] Z. Erkin, M. Franz, J. Guajardo, S. Katzenbeisser, I. Lagendijk, and T. Toft. Privacy-preserving Face Recognition. In 9th International Symposium on Privacy Enhancing Technologies, 2009.
[5] S. Even, O. Goldreich, and A. Lempel. A Randomized Protocol for Signing Contracts. Communications of the ACM, 28(6), 1985.
[6] E. Gamma, R. Helm, R. E. Johnson, and J. Vlissides. Design Patterns — Elements of Reusable Object-Oriented Software. Addison-Wesley, March 1995.
[7] O. Goldreich. Foundations of Cryptography, Volume 2: Basic Applications. Cambridge University Press, Cambridge, UK, 2004.
[8] O. Goldreich, S. Micali, and A. Wigderson. How to Play Any Mental Game, or a Completeness Theorem for Protocols with Honest Majority. In 19th ACM Symposium on Theory of Computing (STOC), 1987.
[9] D. Harnik, Y. Ishai, E. Kushilevitz, and J. B. Nielsen. OT-combiners via Secure Computation. In 5th Theory of Cryptography Conference, 2008.
[10] C. Hazay and Y. Lindell. Efficient Secure Two-Party Computation: Techniques and Constructions. Springer, 2010.
[11] W. Henecka, S. K¨ogl, A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. TASTY: Tool for Automating Secure Two-party Computations. In ACM Conference on Computer and Communications Security (CCS), 2010.
[12] S. Henikoff and J. G. Henikoff. Amino Acid Substitution Matrices from Protein Blocks. In Proceedings of the National Academy of Sciences of the United States of America, 1992.
[13] Y. Huang, L. Malka, D. Evans, and J. Katz. Efficient Privacy-preserving Biometric Identification. In Network and Distributed System Security Symposium (NDSS), 2011.
[14] Y. Ishai, J. Kilian, K. Nissim, and E. Petrank. Extending Oblivious Transfers Efficiently. In Advances in Cryptology — Crypto, 2003.
[15] A. Jarrous and B. Pinkas. Secure Hamming Distance Based Computation and its Applications. In Applied Cryptography and Network Security (ACNS), 2009.
[16] S. Jha, L. Kruger, and V. Shmatikov. Towards Practical Privacy for Genomic Computation. In IEEE Symposium on Security & Privacy, 2008.
[17] V. Kolesnikov, A.-R. Sadeghi, and T. Schneider. Improved Garbled Circuit Building Blocks and Applications to Auctions and Computing Minima. In Cryptology and Network Security (CANS), 2009.
[18] V. Kolesnikov and T. Schneider. Improved Garbled Circuit: Free XOR Gates and Applications. In International Colloquium on Automata, Languages, and Programming (ICALP), 2008.
[19] Y. Lindell and B. Pinkas. An Efficient Protocol for Secure Two-party Computation in the Presence of Malicious Adversaries. In Advances in Cryptology — Eurocrypt, 2007.
[20] Y. Lindell and B. Pinkas. Secure Two-party Computation via Cut-and-Choose Oblivious Transfer. In 7th Theory of Cryptography Conference, 2011.
[21] Y. Lindell, B. Pinkas, and N. Smart. Implementing Two-party Computation Efficiently with Security against Malicious Adversaries. In International Conference on Security and Cryptography for Networks (SCN), 2008.
[22] D. Malkhi, N. Nisan, B. Pinkas, and Y. Sella. Fairplay — a Secure Two-party Computation System. In 13th USENIX Security Symposium, 2004.
[23] R. Mott. Smith-Waterman Algorithm. In Encyclopedia of Life Sciences. John Wiley & Sons, 2005.
[24] M. Naor and B. Pinkas. Computationally Secure Oblivious Transfer. Journal of Cryptology, 18(1), 2005.
[25] J. B. Nielsen and C. Orlandi. LEGO for Two-party Secure Computation. In 6th Theory of Cryptography Conference, 2009.
[26] M. Osadchy, B. Pinkas, A. Jarrous, and B. Moskovich. SCiFI: A System for Secure Face Identification. In IEEE Symposium on Security & Privacy, 2010.
[27] B. Pinkas, T. Schneider, N. Smart, and S. Williams. Secure Two-party Computation is Practical. In Advances in Cryptology — Asiacrypt, 2009.
[28] M. O. Rabin. How to Exchange Secrets with Oblivious Transfer. Technical Report 81, Harvard University, 1981.
[29] A.-R. Sadeghi, T. Schneider, and I. Wehrenberg. Efficient Privacy-preserving Face Recognition. In ICISC 09: 12th International Conference on Information Security and Cryptology, 2009.
[30] A. Shelat and C.-H. Shen. Two-output Secure Computation with Malicious Adversaries. In Advances in Cryptology — Eurocrypt, 2011.
[31] T. F. Smith and M. S. Waterman. Identification of Common Molecular Subsequences. Journal of Molecular Biology, 1981.
[32] D. Szajda, M. Pohl, J. Owen, and B. G. Lawson. Toward a Practical Data Privacy Scheme for a Distributed Implementation of the Smith-Waterman Genome Sequence Comparison Algorithm. In Network and Distributed System Security Symposium (NDSS), 2006.
[33] J. Wolkerstorfer, E. Oswald, and M. Lamberger. An ASIC Implementation of the AES S-boxes. In Cryptographers’ Track — RSA, 2002.
[34] A. C.-C. Yao. How to Generate and Exchange Secrets. In 27th Symposium on Foundations of Computer Science (FOCS), 1986.

### Core Classes

The core classes in our framework are shown in the UML diagram below.

- **CompositeCircuit**
  - `subCircuits: Circuit[]`
  - `build(): void`
  - `createSubCircuits(): void`
  - `connectWires(): void`
  - `defineOutputWires(): void`
  - `fixInternalWires(): void`

- **AND_2_1Circuit**
  - `inputWires: Wire[]`
  - `outputWires: Wire[]`
  - `build(): void`
  - `startExecuting(s: State): State`
  - `update(o: TransitiveObservable, arg: Object): void`

- **SimpleCircuit_2_1**
  - `gtt: BigInteger[][]`
  - `build(): void`
  - `execute(): void`

- **OR_2_1**
- **MUX_3_1**
- **GT_3_1**
- **XOR_2_1**

- **Wire**
  - `value: int`
  - `lbl: BigInteger`
  - `invd: boolean`
  - `connectTo(ws: Wire[], idx: int): void`
  - `fixWire(v: int): void`

- **TransitiveObserver<Circuit>** -> **TransitiveObserver<TransitiveObservable>**
  - `1..*` relationship

- **ADD1_L**
- **plus1_L**