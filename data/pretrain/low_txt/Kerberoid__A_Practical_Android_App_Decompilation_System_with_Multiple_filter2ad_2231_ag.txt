### Optimized Text

To effectively evaluate the performance of a reversed program, one must assume access to a set of inputs with known outputs. These can be used as a test suite. The primary challenge with this approach is the granularity of the oracle provided by the test cases. For meta decompilation to be effective, the granularity of the oracle needs to be at least as fine as that required for code transplantation. In our work, we use ECJ errors, which can be mapped to specific code fragments, allowing us to label each fragment as either correct or incorrect.

Another potential oracle is based on the bytecode distance between the decompiled-then-recompiled fragment and its original bytecode counterpart. This can serve as a heuristic to minimize the likelihood of semantic differences between the two fragments. In this study, we measure bytecode distance using JarDiff, although SootDiff [5] could also be employed, as it tolerates some control flow graph equivalent transformations.

The choice of decompiler order in the meta decompilation process may vary depending on the user's preferred metric. In our work, we rank decompilers based on the number of classes for which they produce semantically equivalent modulo input sources. If a user prioritizes minimizing the rate of deceptive decompilations, CFR could be placed first. For example, when inverting the order of Procyon and CFR for Arlecchino on the 157 classes presented in Section 4.5, only 38 decompiled classes are semantically equivalent modulo inputs, but this configuration results in only 4 deceptive decompilations.

### Highlights of Meta-Decompilation

To summarize, we have devised and implemented a novel approach called meta-decompilation, which merges results from different decompilers. This tool successfully handles 59 out of the 157 cases (37.6%) that were previously unhandled by any single decompiler. To our knowledge, meta-decompilation is a radically new idea that has not been explored before. Our experiments demonstrate the feasibility and effectiveness of this approach.

### Threats to Validity

#### Internal Validity
Internal threats are related to the metrics used to compare syntactic distortion and semantic equivalence modulo inputs between the original and decompiled source code. Additionally, the coverage and quality of the test suite of the projects under study influence our observations about the semantic equivalence of the decompiled bytecode. To mitigate this threat, we selected a set of mature open-source projects with well-maintained test suites and relied on state-of-the-art AST and bytecode differencing tools.

#### External Validity
External threats pertain to the generalizability of our results to other Java projects. To address this, we reused an existing dataset of Java programs that we believe is representative of the Java ecosystem. We also included a handmade project consisting of classes used in previous decompiler evaluations as a baseline for further comparisons.

#### Reliability Validity
Our results are reproducible, and the experimental pipeline presented in this study is publicly available online. We provide all necessary code to replicate our analysis, including AST metric calculations and statistical analysis via R notebooks. [14]

### Related Work

This paper builds on previous works in bytecode analysis, decompilation, and program transformations. Specifically, we focus on Java bytecode decompilers and present related work along these lines.

Kerbedroid [18] is the closest related work, focusing on decompilers for Android. It starts from the same observation: decompilers perform differently due to varying strategies for handling information lost during compilation. Kerbedroid is a meta-decompiler that combines results from multiple decompilers. Our current work shares this observation but contributes two key novel points: an in-depth assessment of eight decompilers with respect to three quality attributes, including equivalence modulo-input, and the use of partial results from eight decompilers instead of three, increasing the coverage of various corner cases in the bytecode.

The evaluation of decompilers is closely related to the assessment of compilers. Le et al. [25] introduced the concept of semantic equivalence modulo inputs to validate compilers by analyzing the interplay between dynamic execution on a subset of inputs and statically compiling a program to work on all types of inputs. Blackburn et al. [3] proposed benchmarking selection and evaluation methodologies and introduced the DaCapo benchmarks, a set of open-source, client-side Java benchmarks. Naeem et al. [30] proposed a set of software quality metrics aimed at measuring the effectiveness of decompilers and obfuscators.

In 2009, Hamilton et al. [15] showed that decompilation is possible for Java, though not perfect. In 2017, Kostelansky et al. [23] performed a similar study on updated decompilers. In 2018, Gusarovs [14] analyzed the performance of five Java decompilers using handcrafted test cases. These works collectively demonstrate that Java bytecode decompilation is far from perfect.

Decompilers and disassemblers are closely related, and each pair of binary format and target language poses specific challenges. Vinciguerra et al. [44] studied C++, Khadra et al. [22] focused on ThumbISA, and Grech et al. [13] examined Ethereum bytecode. With disassembly, types must be reconstructed [41], as well as assignment chains [43]. Some researchers, like us, focus on reassembling disassembled binary code [45, 8, 10].

A recent trend in decompilation is the use of neural networks [21, 26, 12]. For example, Katz et al. [21] presented a technique for decompiling binary code snippets using Recurrent Neural Networks, producing source code more similar to human-written code. Lacomis et al. [24] proposed a probabilistic technique for variable name recovery. Schulte et al. [36] used evolutionary search to improve and recombine a large population of candidate decompilations by applying source-to-source transformations gathered from a database of human-written sources. Miller and colleagues [29] modeled the uncertainty due to information loss during compilation using probabilities and proposed a novel disassembly technique that computes a probability for each address in the code space, indicating its likelihood of being a true positive instruction.

### Conclusion

In this work, we presented a fully automated pipeline to assess Java bytecode decompilers with respect to their capacity to produce compilable, equivalent modulo-input, and readable code. We evaluated eight decompilers using a set of 2041 classes from 14 open-source projects compiled with two different compilers. Our analysis shows that bytecode decompilation remains a non-trivial task that still requires human intervention. Even the highest-ranking decompiler in this study produces syntactically correct output for 84% of the classes and semantically equivalent modulo inputs output for 78%. We identified 157 classes for which no decompiler produces semantically equivalent sources, highlighting the challenges posed by generics, particularly those with wildcards and type bounds. The diversity of Java compilers and versions introduces many corner cases that require extensive testing and development effort from decompiler authors. Meanwhile, the diversity of decompiler implementations allows for merging their results to bypass the shortcomings of individual decompilers. We call this approach 'meta decompilation' and have implemented it in a tool called Arlecchino. Our experimental results show that Arlecchino can produce semantically equivalent modulo inputs sources for 37.6% of the classes for which no single decompiler could.

### Acknowledgments

This work was partially supported by the Wallenberg Autonomous Systems and Software Program (WASP) funded by the Knut and Alice Wallenberg Foundation and by the TrustFull project funded by the Swedish Foundation for Strategic Research.

### References

[1] Amin, N., Tate, R., 2016. Java and Scala’s Type Systems are Unsound: The Existential Crisis of Null Pointers, in: Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, Association for Computing Machinery, New York, NY, USA. p. 838–848. URL: https://doi.org/10.1145/2983990.2984004, doi:10.1145/2983990.2984004.

[2] Benfield, L., 2019. CFR. https://www.benf.org/other/cfr/. [Online; accessed 19-July-2019].

[3] Blackburn, S.M., Garner, R., Hoffmann, C., Khang, A.M., McKinley, K.S., Bentzur, R., Diwan, A., Feinberg, D., Frampton, D., Guyer, S.Z., Hirzel, M., Hosking, A., Jump, M., Lee, H., Moss, J.E.B., Phansalkar, A., Stefanovik, D., VanDrunen, T., von Dincklage, D., Wiedermann, B., 2006. The DaCapo Benchmarks: Java Benchmarking Development and Analysis, in: Proceedings of the 21st Annual ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications, Association for Computing Machinery, New York, NY, USA. p. 169–190. URL: https://doi.org/10.1145/1167473.1167488, doi:10.1145/1167473.1167488.

[4] Chen, Y., Jiang, Y., Ma, F., Liang, J., Wang, M., Zhou, C., Su, Z., EnFuzz: Ensemble Fuzzing with Seed Synchronization among Diverse Fuzzers, arXiv e-prints, arXiv:1807.00182.

[5] Dann, A., Hermann, B., Bodden, E., 2019. SootDiff: Bytecode Comparison Across Different Java Compilers, in: Proceedings of the 8th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis, Association for Computing Machinery, New York, NY, USA. p. 14–19. URL: https://doi.org/10.1145/3315568.3329966, doi:10.1145/3315568.3329966.

[6] Dupuy, E., 2019. Java Decompiler. https://java-decompiler.github.io/. [Online; accessed 19-July-2019].

[7] Žůřina, L., Kůoustek, J., Zemek, P., 2013. PsybOt Malware: A Step-By-Step Decompilation Case Study, in: 20th Working Conference on Reverse Engineering (WCRE), pp. 449–456. doi:10.1109/WCRE.2013.6671321.

[8] Emamdoost, N., Sharma, V., Byun, T., McCamant, S., 2019. Binary Mutation Analysis of Tests Using Reassembleable Disassembly. doi:10.14722/bar.2019.23058.

[9] Falleri, J.R., Morandat, F., Blanc, X., Martinez, M., Monperrus, M., 2014. Fine-Grained and Accurate Source Code Differencing, in: 29th International Conference on Automated Software Engineering (ASE), ACM, New York, NY, USA. pp. 313–324. URL: http://doi.acm.org/10.1145/2642937.2642982, doi:10.1145/2642937.2642982.

[10] Flores-Montoya, A., Schulte, E.M., 2019. Datalog Disassembly. CoRR abs/1906.03969. URL: http://arxiv.org/abs/1906.03969, arXiv:1906.03969.

[11] Foster, B., Somayaji, A., 2010. Object-Level Recombination of Commodity Applications, in: Proceedings of the 12th Annual Conference on Genetic and Evolutionary Computation, pp. 957–964.

[12] Fu, C., Chen, H., Liu, H., Chen, X., Tian, Y., Koushanfar, F., Zhao, J., 2019. Coda: An End-to-End Neural Program Decompiler, in: Advances in Neural Information Processing Systems, pp. 3703–3714.

[13] Grech, N., Brent, L., Scholz, B., Smaragdakis, Y., 2019. Gigahorse: Thorough, Declarative Decompilation of Smart Contracts, in: International Conference on Software Engineering, IEEE. pp. 1176–1186.

[14] Gusarovs, K., 2018. An Analysis on Java Programming Language Decompiler Capabilities. Applied Computer Systems 23, 109–117.

[15] Hamilton, J., Danicic, S., 2009. An Evaluation of Current Java Bytecode Decompilers, in: 9th IEEE International Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 129–136. doi:10.1109/SCAM.2009.24.

[16] Hoenicke, J., 2019. JODE. http://jode.sourceforge.net/. [Online; accessed 19-July-2019].

[17] Jaffe, A., Lacomis, J., Schwartz, E.J., Goues, C.L., Vasilescu, B., 2018. Meaningful Variable Names for Decompiled Code: A Machine Translation Approach, in: 26th Conference on Program Comprehension (ICPC), ACM, New York, NY, USA. pp. 20–30. URL: http://doi.acm.org/10.1145/3196321.3196330, doi:10.1145/3196321.3196330.

[18] Jang, H., Jin, B., Hyun, S., Kim, H., 2019. Kerberoid: A Practical Android App Decompilation System with Multiple Decompilers, in: Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, pp. 2557–2559.

[19] Jerome Miecznikowski, Nomair A. Naeem, L.J.H., 2019. Dava. http://www.sable.mcgill.ca/dava/. [Online; accessed 19-July-2019].

[20] JetBrains, Fernflower. 2019. https://github.com/JetBrains/intellij-community/tree/master/plugins/java-decompiler/engine. [Online; accessed 19-July-2019].

[21] Katz, D.S., Ruchti, J., Schulte, E., 2018. Using Recurrent Neural Networks for Decompilation, in: 25th International Conference on Software Analysis, Evolution and Reengineering (SANER), pp. 346–356. doi:10.1109/SANER.2018.8330222.

[22] Khadra, M.A.B., Stoffel, D., Kunz, W., 2016. Speculative Disassembly of Binary Code, in: International Conference on Compilers, Architectures, and Synthesis of Embedded Systems (CASES), pp. 1–10. doi:10.1145/2968455.2968505.

[23] Kostelanský, J., Dedera, L., 2017. An Evaluation of Output from Current Java Bytecode Decompilers: Is it Android Which is Responsible for Such Quality Boost?, in: Communication and Information Technologies (KIT), pp. 1–6. doi:10.23919/KIT.2017.8109451.

[24] Lacomis, J., Yin, P., Schwartz, E.J., Allamanis, M., Goues, C.L., Neubig, G., Vasilescu, B., 2019. Dire: A Neural Approach to Decompiled Identifier Naming. arXiv:1909.09029.

[25] Le, V., Afshari, M., Su, Z., 2014. Compiler Validation via Equivalence Modulo Inputs, in: 35th Conference on Programming Language Design and Implementation (PLDI), ACM, New York, NY, USA. pp. 216–226. URL: http://doi.acm.org/10.1145/2594291.2594334, doi:10.1145/2594291.2594334.

[26] Li, Z., Wu, Q., Qian, K., 2019. Adabot: Fault-Tolerant Java Decompiler. Technical Report 1908.06748. arXiv.

[27] Lindholm, T., Yellin, F., Bracha, G., Buckley, A., 2014. The Java Virtual Machine Specification. Pearson Education.

[28] Miecznikowski, J., Hendren, L., 2002. Decompiling Java Bytecode: Problems, Traps, and Pitfalls, in: Horspool, R.N. (Ed.), Compiler Construction, Springer Berlin Heidelberg, Berlin, Heidelberg. pp. 111–127.

[29] Miller, K., Kwon, Y., Sun, Y., Zhang, Z., Zhang, X., Lin, Z., 2019. Probabilistic Disassembly, in: 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE), IEEE. pp. 1187–1198.

[30] Naeem, N.A., Batchelder, M., Hendren, L., 2007. Metrics for Measuring the Effectiveness of Decompilers and Obfuscators, in: 15th IEEE International Conference on Program Comprehension (ICPC), pp. 253–258. doi:10.1109/ICPC.2007.27.

[31] Nolan, G., 2004. Decompiler Design. Apress, Berkeley, CA. pp. 121–157. URL: https://doi.org/10.1007/978-1-4302-0739-9_5, doi:10.1007/978-1-4302-0739-9_5.

[32] Pawlak, R., Monperrus, M., Petitprez, N., Noguera, C., Seinturier, L., 2015. Spoon: A Library for Implementing Analyses and Transformations of Java Source Code. Software: Practice and Experience 46, 1155–1179. URL: https://hal.archives-ouvertes.fr/hal-01078532/document, doi:10.1002/spe.2346.

[33] Persaud, B., Obada-Obieh, B., Mansourzadeh, N., Moni, A., Somayaji, A., 2016. Frankenssl: Recombining Cryptographic Libraries for Software Diversity, in: Proceedings of the 11th Annual Symposium On Information Assurance., pp. 19–25.

[34] Ragkhitwetsagul, C., Krinke, J., 2017. Using Compilation/Decompilation to Enhance Clone Detection, in: 11th International Workshop on Software Clones (IWSC), pp. 1–7. doi:10.1109/IWSC.2017.7880502.

[35] Robles, G., Gonzalez-Barahona, J.M., Herraiz, I., 2005. An Empirical Approach to Software Archaeology, in: 21st International Conference on Software Maintenance (ICSM), pp. 47–50.

[36] Schulte, E., Ruchti, J., Noonan, M., Ciarletta, D., Loginov, A., 2018. Evolving Exact Decompilation, in: Shoshitaishvili, Y., Wang, R.F. (Eds.), Workshop on Binary Analysis Research, San Diego, CA, USA. URL: http://www.cs.unm.edu/~eschulte/data/bed.pdf.

[37] Selberg, E., Etzioni, O., 1997. The Metacrawler Architecture for Resource Aggregation on the Web. IEEE Expert 12, 11–14. doi:10.1109/64.577468.

[38] skylot, 2019. JADX. https://github.com/skylot/jadx. [Online; accessed 19-July-2019].

[39] Storyyeller, 2019. Storyyeller/Krakatau. [Online; accessed 19-July-2019].

[40] Strobel, M., 2019. Procyon. https://bitbucket.org/mstrobel/procyon. [Online; accessed 19-July-2019].

[41] Troshina, K., Derevenets, Y., Chernov, A., 2010. Reconstruction of Composite Types for Decompilation, in: 10th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM), pp. 179–188. doi:10.1109/SCAM.2010.24.

[42] Vallée-Rai, R., Co, P., Gagnon, E., Hendren, L., Lam, P., Sundaresan, V., 1999. Soot - a Java Bytecode Optimization Framework, in: Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, IBM Press. p. 13.

[43] Van Emmerik, M.J., 2007. Static Single Assignment for Decompilation. University of Queensland.

[44] Vinciguerra, L., Wills, L., Kejriwal, N., Martino, P., Vinciguerra, R., 2003. An Experimentation Framework for Evaluating Disassembly and Decompilation Tools for C++ and Java, in: 10th Working Conference on Reverse Engineering (WCRE), IEEE Computer Society, Washington, DC, USA. pp. 14–. URL: http://dl.acm.org/citation.cfm?id=950792.951361.

[45] Wang, S., Wang, P., Wu, D., 2015. Reassembleable Disassembling, in: 24th USENIX Security Symposium (USENIX Security 15), USENIX Association, Washington, D.C.. pp. 627–642. URL: https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/wang-shuai.

[46] Yakdan, K., Dechand, S., Gerhards-Padilla, E., Smith, M., 2016. Helping Johnny to Analyze Malware: A Usability-Optimized Decompiler and Malware Analysis User Study, in: IEEE Symposium on Security and Privacy (SP), pp. 158–177. doi:10.1109/SP.2016.18.

[47] Yang, Y., Zhou, Y., Sun, H., Su, Z., Zuo, Z., Xu, L., Xu, B., 2019. Hunting for Bugs in Code Coverage Tools via Randomized Differential Testing, in: 41st International Conference on Software Engineering (ICSE), ACM.