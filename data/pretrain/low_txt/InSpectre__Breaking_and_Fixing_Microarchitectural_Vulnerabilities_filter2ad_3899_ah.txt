### Functional Pipeline Correctness

Several authors, such as [1, 8, 28, 38, 47], have investigated the orthogonal problem of functional correctness in the context of specific pipeline architectures. These architectures often include features like out-of-order (OoO) execution and speculation. Typically, they use a complex refinement argument based on Burch-Dill style flushing [8] to align OoO executions with their sequential counterparts. Our approach is similar, with serialization proofs for OoO and speculation outlined in Appendices 6.3 and A.3. Mechanizing these proofs and examining if a generic account of serialization, using InSpectre, can also aid in the functional verification of concrete pipelines, is of significant interest.

### Hardware Countermeasures

While CPU vendors and researchers propose various countermeasures, validating their effectiveness without a robust model is challenging. InSpectre can help in modeling and reasoning about the security guarantees of these countermeasures, as demonstrated in Section 7.1.1. 

**Theorem 7.3:** If a program \( P \) is MIL constant time, then \( P \) is conditionally noninterferent in the OoO model.

This theorem enables the enforcement of conditional noninterference for the OoO model by verifying MIL constant time in the sequential model. This strategy leverages the deterministic nature of the sequential model, making it easier to reuse existing tools for binary code analyses [6]. It is important to note that MIL constant time is microarchitecture-aware, meaning the same ISA program may or may not satisfy MIL constant time when translated to a given microarchitecture. For example, the MIL translation of a conditional move above is not MIL constant time due to the dependency between the sensitive value in \( t21 \) and the conditional store in \( t23 \). However, if a microarchitecture translates the same conditional move as follows, the translation is clearly MIL constant time:

```
t1: l d R z
t2: l d R r2
t3: l d R r1
t4: st R r2 ((¬t1 * t2) + (t1 * t3))
```

### Related Work

#### Speculative Semantics and Foundations

Recent works have addressed the formal foundations of specific forms of speculation to capture Spectre-like vulnerabilities. Cheang et al. [12], Guarnieri et al. [22], and Mcilroy et al. [40] propose semantics that support branch prediction, thereby modeling only Spectre v1. These models do not support speculation of target addresses, dependencies, or OoO execution. Disselkoen et al. [14] propose a pomset-based semantics that supports OoO execution and branch prediction but operates at a higher abstraction level, modeling memory references using logical program variables. Consequently, their model cannot support dynamic dependency resolution, dependency prediction, or speculation of target addresses.

Cauligi et al. [11] propose a model that captures existing variants of Spectre and independently discovered a vulnerability similar to our Spectre-STL-D. They demonstrated the feasibility of the attack on Intel Broadwell and Skylake processors. A key difference is that Cauligi et al. impose a sequential order on instruction retire and memory stores, simplifying the proof of memory consistency and verification. This approach can model the hardware configurations and fences designed by Intel [25] to stall (part of) an instruction stream in case of speculation.

Several works [29, 49, 55, 56, 60] propose security-aware hardware to prevent Spectre-like attacks. InSpectre can help formalize these hardware features and analyze their security.

### Concluding Remarks

This paper presents InSpectre, the first comprehensive model capable of capturing out-of-order execution along with different forms of speculation in high-performance pipelines. We used InSpectre to model existing vulnerabilities, discover three new potential vulnerabilities, and reason about the security of existing countermeasures proposed in the literature.

InSpectre pushes the boundaries of microarchitecture security by incorporating features like dynamic inter-instruction dependency, instruction non-atomicity, OoO memory commits, and partial misprediction of rollbacks. These features are essential for discovering vulnerabilities and reasoning about countermeasures like retpoline or memory fences for data dependency. For instance, InSpectre would not have captured our Spectre-OoO vulnerability if memory stores and instruction retire were performed in sequential order. Similarly, static computation of active stores would not have exposed Store-To-Load variants of Spectre. Advanced recovery methods used by modern processors, including concurrent and partial recovery in case of multiple mispredictions, are also better modeled by InSpectre.

A novel feature of our approach is decomposing instructions into smaller microinstruction-like units. This decomposition is crucial for accurately reflecting hardware behavior and providing the foundation for real pipeline information flow. Non-atomicity is needed to handle intra-instruction dependencies and interactions between I/D-caches.

InSpectre currently lacks explicit support for Meltdown-like vulnerabilities, multicore and hyperthreading, fences, TLBs, cache eviction policies, and mechanisms used to update branch predictor tables. However, many of these features can be captured within our model. For example, we provide an example of Intel’s `lfence` in the paper. While our focus is on core aspects of out-of-order and speculation, there is nothing inherent in the framework that prevents modeling these additional features. To argue the security of a concrete architecture, the model needs to be specialized by adding detail and eliminating nondeterminism.

### Tooling

Tooling is necessary to systematically explore the utility of the model for exploit search and countermeasure proof. The framework needs to be instantiated for different concrete pipeline architectures and experimentally validated. Tools like Spectector [22], Pitchfork [11], and oo7 [54] can be envisaged, but the large nondeterminism introduced by out-of-order and speculation will make such an approach inefficient. We are currently taking a different route by modeling concrete microarchitectures within a theorem prover. This allows verifying conditional noninterference if the microarchitecture is inherently secure. A failing security proof provides a basis for proving countermeasure soundness, as in Section 7.4, and identifying sufficient conditions that can be verified in the more tractable sequential model.

### References

[1] Mark D. Aagaard, Byron Cook, Nancy A. Day, and Robert B. Jones. 2001. A Framework for Microprocessor Correctness Statements. In Correct Hardware Design and Verification Methods. 433–448.

[2] Onur Acıic¸mez and C¸etin Kaya Koc¸. 2006. Trace-driven cache attacks on AES (short paper). In International Conference on Information and Communications Security. Springer, 112–121.

[3] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, and Michael Emmi. 2016. Verifying constant-time implementations. In 25th {USENIX} Security Symposium ({USENIX} Security 16). 53–70.

[4] ARM. 2018. SSBS, Speculative Store Bypass Safe. (2018). https://developer.arm.com/docs/ddi0595/d/aarch64-system-registers/ssbs. Accessed: 2020-01-16.

[5] ARM. 2019. Cache Speculation Side channels v2.4. (2019).

[6] Musard Balliu, Mads Dam, and Roberto Guanciale. 2014. Automating Information Flow Analysis of Low Level Code. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, Scottsdale, AZ, USA, November 3-7, 2014. 1080–1091.

[7] Daniel J. Bernstein. 2005. Cache-timing attacks on AES. http://cr.yp.to/antiforgery/cachetiming-20050414.pdf. (2005).

[8] Jerry R. Burch and David L. Dill. 1994. Automatic verification of pipelined microprocessor control. In Computer Aided Verification, David L. Dill (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 68–80.

[9] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg, Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A Systematic Evaluation of Transient Execution Attacks and Defenses. In 28th USENIX Security Symposium, USENIX Security 2019, Santa Clara, CA, USA, August 14-16, 2019. 249–266.

[10] Claudio Canella, Daniel Genkin, Lukas Giner, Daniel Gruss, Moritz Lipp, Marina Minkin, Daniel Moghimi, Frank Piessens, Michael Schwarz, Berk Sunar, Jo Van Bulck, and Yuval Yarom. 2019. Fallout: Leaking Data on Meltdown-resistant CPUs. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS). ACM.

[11] Sunjay Cauligi, Craig Disselkoen, Klaus v Gleissenthall, Deian Stefan, Tamara Rezk, and Gilles Barthe. 2019. Towards Constant-Time Foundations for the New Spectre Era. arXiv preprint arXiv:1910.01755 (October 2019).

[12] Kevin Cheang, Cameron Rasmussen, Sanjit Seshia, and Pramod Subramanyan. 2019. A Formal Approach to Secure Speculation. In CSF 2019.

[13] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten H Lai. 2018. Sgxpectre attacks: Stealing Intel secrets from SGX enclaves via speculative execution. arXiv preprint arXiv:1802.09085 (2018).

[14] Craig Disselkoen, Radha Jagadeesan, Alan Jeffrey, and James Riely. 2019. The Code That Never Ran: Modeling Attacks on Speculative Evaluation. In S&P 2019.

[15] Craig Disselkoen, David Kohlbrenner, Leo Porter, and Dean Tullsen. 2017. Prime+ Abort: A Timer-Free High-Precision L3 Cache Attack using Intel {TSX}. In 26th USENIX Security Symposium. 51–67.

[16] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, and Dmitry Ponomarev. et al. 2018. BranchScope: A new side-channel attack on directional branch predictor. In Proceedings of the Twenty-Third International Conference on Architectural Support for Programming Languages and Operating Systems. ACM.

[17] Kurt A. Feiste, John S. Muhich, Larry E. Thatcher, and Steven W. White. 2000. Forwarding store instruction result to load instruction with reduced stall or flushing by effective/real data address bytes matching. (February 2000). https://patents.google.com/patent/US6021485 US6021485A.

[18] Anders Fogh and Christopher Ertl. 2018. Wrangling with the Ghost: An Inside Story of Mitigating Speculative Execution Side Channel Vulnerabilities. (2018).

[19] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser. 2018. A survey of microarchitectural timing attacks and countermeasures on contemporary hardware. Journal of Cryptographic Engineering 8, 1 (2018), 1–27.

[20] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016. Flush+Flush: a fast and stealthy cache attack. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 279–299.

[21] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache template attacks: Automating attacks on inclusive last-level caches. In 24th USENIX Security Symposium. 897–912.

[22] Marco Guarnieri, Boris K¨opf, José F. Morales, Jan Reineke, and Andrés Sánchez. 2020. Spectector: Principled detection of speculative information flows. In Proceedings of the 41st IEEE Symposium on Security and Privacy. IEEE.

[23] Jann Horn. 2018. Speculative execution, variant 4: speculative store bypass. (2018).

[24] Jann Horn et al. 2018. Reading privileged memory with a side-channel. Project Zero 39 (2018).

[25] Intel. 2018. Speculative Execution Side Channel Mitigations, Revision 3.0. (2018).

[46] Andrew Pardoe. 2018. Spectre mitigations in MSVC. (2018).

[47] Jun Sawada and Warren A Hunt. 2002. Verification of FM9801: An out-of-order microprocessor model with speculative execution, exceptions, and program-modifying capability. Formal Methods in System Design 20, 2 (2002), 187–222.

[48] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-Boundary Data Sampling. In CCS.

[49] Mohammadkazem Taram, Ashish Venkat, and Dean Tullsen. 2019. Context-sensitive fencing: Securing speculative execution via microcode customization. In Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems. ACM, 395–410.

[50] Caroline Trippel, Daniel Lustig, and Margaret Martonosi. 2018. CheckMate: Automated Synthesis of Hardware Exploits and Security Litmus Tests. In 51st Annual IEEE/ACM International Symposium on Microarchitecture, MICRO 2018, Fukuoka, Japan, October 20-24, 2018. 947–960.

[26] Intel. 2018. Speculative Execution Side Channel Update. (2018).

[27] Intel. Timing Side Channels. https://software.intel.com/security-software-guidance/insights/guidelines-mitigating-timing-side-channels-against-cryptographic-implementations (2019).

[51] Paul Turner. 2018. Retpoline: a software construct for preventing branch-target-injection. (2018). https://support.google.com/faqs/answer/7625886

[41] Matt Miller. 2018. Mitigating speculative execution side channel vulnerabilities. (2018). https://msrc-blog.microsoft.com/2018/03/15/mitigating-speculative-execution-side-channel-hardware-vulnerabilities/

[28] Ranjit Jhala and Kenneth L McMillan. 2001. Microarchitecture verification by compositional model checking. In International Conference on Computer Aided Verification. Springer, 396–410.

[29] V. Kiriansky, I. Lebedev, S. Amarasinghe, S. Devadas, and J. Emer. 2018. DAWG: A Defense Against Cache Timing Attacks in Speculative Execution Processors. In 2018 51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO).

[30] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative buffer overflows: Attacks and defenses. arXiv preprint arXiv:1807.03757 (2018).

[31] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In 2019 IEEE Symposium on Security and Privacy, SP 2019, San Francisco, CA, USA, May 19-23, 2019. 1–19.

[32] Paul C Kocher. 1996. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. In Annual International Cryptology Conference. Springer, 104–113.

[33] Esmaeil Mohammadian Koruyeh, Khaled N. Khasawneh, Chengyu Song, and Nael Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks Using the Return Stack Buffer. In 12th USENIX Workshop on Offensive Technologies (WOOT 18). USENIX Association.

[34] Esmaeil Mohammadian Koruyeh, Khaled N Khasawneh, Chengyu Song, and Nael Abu-Ghazaleh. 2018. Spectre returns! speculation attacks using the return stack buffer. In 12th USENIX Workshop on Offensive Technologies (WOOT).

[35] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, et al. 2018. Meltdown: Reading kernel memory from user space. In 27th USENIX Security Symposium. 973–990.

[36] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B Lee. 2015. Last-level cache side-channel attacks are practical. In 2015 IEEE Symposium on Security and Privacy. IEEE, 605–622.

[37] Giorgi Maisuradze and Christian Rossow. 2018. ret2spec: Speculative execution using return stack buffers. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2109–2122.

[38] P. Manolios and S. K. Srinivasan. 2005. Refinement maps for efficient verification of processor models. In Design, Automation and Test in Europe. 1304–1309 Vol. 2.

[39] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss, Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the Other Side: SSH over Robust Cache Covert Channels in the Cloud.. In NDSS, Vol. 17. 8–11.

[40] Ross Mcilroy, Jaroslav Sevcik, Tobias Tebbi, Ben L Titzer, and Toon Verwaest. 2019. Spectre is here to stay: An analysis of side-channels and speculative execution. arXiv preprint arXiv:1902.05178 (2019).

[42] David Molnar, Matt Piotrowski, David Schultz, and David A. Wagner. 2005. The Program Counter Security Model: Automatic Detection and Removal of Control-Flow Side Channel Attacks. In Information Security and Cryptology - ICISC 2005, 8th International Conference, Seoul, Korea, December 1-2, 2005, Revised Selected Papers. 156–168.

[43] Michael Neve and Jean-Pierre Seifert. 2006. Advances on access-driven cache attacks on AES. In International Workshop on Selected Areas in Cryptography. Springer, 147–162.

[44] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache attacks and countermeasures: the case of AES. In Cryptographers’ track at the RSA conference.