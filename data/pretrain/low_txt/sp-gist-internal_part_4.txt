### Search Performance of Trie vs. B+-tree

For the exact match search (Figure 7), our experiments show that the trie outperforms the B+-tree by more than 150% in search time, especially as the data size increases. 

![Figure 7: Exact Match Search Performance](figure7.png)

### Regular Expression Match Search

In the case of regular expression match search (Figure 7), the trie achieves a search time improvement of more than two orders of magnitude. Our experiments only allow for the wildcard character `?`, which matches any single character. The performance of the B+-tree is highly sensitive to the position of the wildcard in the search string. For instance, if `?` appears in the 2nd or 3rd position, the B+-tree's performance degrades significantly. If `?` is the first character, the B+-tree index is not used, and a sequential scan is performed instead. This sensitivity arises because the B+-tree can only use the prefix of the search string before any wildcards. In contrast, the trie can utilize any non-wildcard characters in the search string to navigate the index tree, making it more robust for regular expression match queries.

For example, to search for the expression `?at?r`, the trie matches all entries in the root node with `?`, then filters the 2nd and 3rd levels based on the letters `a` and `t`, respectively. At the 4th level, the entries are matched with `?`, and the 5th level is filtered based on the letter `r`.

### Prefix Match Search

For prefix match search (Figure 6), the B+-tree outperforms the trie. This is because the B+-tree's leaf nodes store sorted keys, allowing it to efficiently answer prefix match queries. The trie, on the other hand, must traverse multiple paths in the index tree to find all matching keys.

![Figure 6: Prefix Match Search Performance](figure6.png)

### Search Time Standard Deviation

In Figure 8, we present the standard deviation of the trie's search time for exact match searches to study the effect of tree depth on search performance.

### Insertion Time and Index Size

The insertion time and index size for the B+-tree and trie are shown in Figures 9 and 10, respectively. These figures demonstrate that the B+-tree scales better in both aspects. The trie involves a higher number of nodes and node splits due to its smaller node size compared to the B+-tree. Figures 11 and 12 illustrate the maximum tree height in nodes and pages for the B+-tree and trie. Although the trie has a higher maximum node height, its maximum page height is similar to that of the B+-tree.

### Comparison of R-tree and kd-tree

For the comparison between the kd-tree and the R-tree, we conducted experiments on two-dimensional point datasets with x-axis and y-axis ranges from 0 to 100. The dataset sizes ranged from 250K to 4M points. Figure 13 shows the search performance under two operations: point match search and range search. The SP-GiST kd-tree outperforms the R-tree by more than 300% in point match search and by about 125% in range search. However, the R-tree has better insertion time (Figure 13) and a smaller index size (Figure 14) compared to the kd-tree. This is because the kd-tree is a binary search tree with a bucket size of 1, leading to frequent node splits and a larger number of nodes. To reduce the tree's page height, the storage clustering technique degrades index page utilization, resulting in an increased index size.

![Figure 13: Search Performance of R-tree vs. kd-tree](figure13.png)
![Figure 14: Index Size of R-tree vs. kd-tree](figure14.png)

### Nearest Neighbor (NN) Search Performance

We measured the NN search performance for various SP-GiST instantiations, including the kd-tree, point quadtree, and Patricia trie. The Euclidean distance was used for the kd-tree and point quadtree, while the Hamming distance was used for the trie. Figure 17 illustrates that NN search over the trie is much slower than over the kd-tree and point quadtree. This is because the trie performs comparisons character by character, leading to slower convergence to the next NN. In contrast, the kd-tree and quadtree use partition-based comparisons, and the Hamming distance updates the distance value by either 0 or 1 at each step, which is slower than the Euclidean distance.

![Figure 17: NN Search Performance](figure17.png)

### Suffix Tree Performance

Figure 16 shows the significant performance gain of using a suffix tree index for substring match searches, with a performance improvement of more than three orders of magnitude over sequential scan search. Other index types do not support substring match searches.

![Figure 16: Suffix Tree Search Performance](figure16.png)

### Conclusion and Future Research

We presented a comprehensive implementation and realization of SP-GiST-based indexes within PostgreSQL, including the trie, kd-tree, point quadtree, PMR quadtree, and suffix tree. Our experiments highlight the potential gains of SP-GiST indexes. For example, the trie outperforms the B+-tree by more than 150% in exact match searches and by more than two orders of magnitude in regular expression match searches. The kd-tree also outperforms the R-tree by more than 300% in point match searches. Advanced search operations such as NN search and substring match are realized within SP-GiST. While these indexes offer significant performance benefits and advanced functionalities, they also have weaknesses, such as higher insertion times and larger index sizes compared to B+-tree and R-tree indexes. Future research will address these issues.

### References

[1] IBM Corp.: IBM DB2 Universal Database Application Development Guide, v.6. 1999.
[2] W. G. Aref, D. Barbara, and P. Vallabhaneni. The handwritten trie: Indexing electronic ink. In SIGMOD, pages 151–162, 1995.
[3] W. G. Aref and I. F. Ilyas. An extensible index for spatial databases. In SSDBM, pages 49–58, 2001.
[4] R. Bayer. The universal B-tree for multidimensional indexing: General concepts. In WWCA, pages 198–209, 1997.
[5] R. Bayer and E. M. McCreight. Organization and maintenance of large ordered indices. Acta Inf., 1:173–189, 1972.
[6] N. Beckmann, H. Kriegel, R. Schneider, and B. Seeger. The R* -tree: An efficient robust access method for points and rectangles. In SIGMOD Record, 19(2), 1990.
[7] J. L. Bentley. Multidimensional binary search trees used for associative searching. Commun. ACM, 18(9):509–517, 1975.
[8] J. L. Bentley. Multidimensional binary search trees in database applications. IEEE TSE-5:333–340, 1979.
[9] W. A. Burkhard. Hashing and trie algorithms for partial match retrieval. ACM Transactions on Database Systems, 1(2):175–187, 1976.
[10] D. Comer. Ubiquitous B-tree. ACM Comput. Surv., 11(2):121–137, 1979.
[11] A. A. Diwan, S. Rane, S. Seshadri, and S. Sudarshan. Clustering techniques for minimizing external path length. In VLDB, pages 342–353, 1996.
[12] G. Evangelidis, D. B. Lomet, and B. Salzberg. The HBPi-tree: A multi-attribute index supporting concurrency, recovery, and node consolidation. VLDB Journal, 6(1):1–25, 1997.
[13] R. Fagin, J. Nievergelt, N. Pippenger, and H. R. Strong. Extendible hashing: A fast access method for dynamic files. ACM Trans. Database Syst., 4(3):315–344, 1979.
[14] R. A. Finkel and J. L. Bentley. Quadtrees: A data structure for retrieval on composite keys. Acta Inf., 4:1–9, 1974.
[15] E. Fredkin. Trie memory. Commun. ACM, 3(9):490–499, 1960.
[16] V. Gaede and O. Günther. Multidimensional access methods. ACM Comput. Surv., 30(2):170–231, 1998.
[17] I. Gargantini. An effective way to represent quadtrees. Commun. ACM, 25(12):905–910, 1982.
[18] T. M. Ghanem, R. Shah, M. F. Mokbel, W. G. Aref, and J. S. Vitter. Bulk operations for space-partitioning trees. In ICDE, pages 29–40, 2004.
[19] A. Guttman. R-trees: A dynamic index structure for spatial searching. In SIGMOD, pages 47–57, 1984.
[20] J. M. Hellerstein, J. F. Naughton, and A. Pfeffer. Generalized search trees for database systems. In VLDB, pages 562–573, 1995.
[21] J. M. Hellerstein and A. Pfeffer. The RD-tree: An index structure for sets. In Univ. of Wisconsin CS Technical Report 1252, 1994.
[22] G. R. Hjaltason and H. Samet. Ranking in spatial databases. In SDD, pages 83–95, 1995.
[23] E. G. Hoel and H. Samet. A qualitative comparison study of data structures for large line segment databases. In SIGMOD, pages 205–214, 1992.
[24] N. Katayama and S. Satoh. The SR-tree: An index structure for high-dimensional nearest neighbor queries. In SIGMOD, pages 369–380, 1997.
[25] G. Kedem. The quad-cif tree: A data structure for hierarchical online algorithms. In 19th Conference on Design Automation, pages 352–357, 1982.
[26] M. Kornacker. High-performance extensible indexing. In VLDB, pages 699–708, 1999.
[27] R. Kothuri, S. Ravada, and D. Abugov. Quadtree and R-tree indexes in Oracle Spatial: A comparison using GIS data. In SIGMOD, pages 546–557, 2002.
[28] R. K. Kothuri and S. Ravada. Efficient processing of large spatial queries using interior approximations. In SSTD, pages 404–424, 2001.
[29] R. C. Nelson and H. Samet. A population analysis for hierarchical data structures. In SIGMOD, pages 270–277, 1987.
[30] R. L. Rivest. Partial-match retrieval algorithms. In SIAM J. Comput., 5(1), pages 19–50, 1976.
[31] J. T. Robinson. The k-d-b-tree: A search structure for large multidimensional dynamic indexes. In SIGMOD, pages 10–18, 1981.
[32] H. Samet. The design and analysis of spatial data structures. Addison-Wesley, Reading, MA, 1990.
[33] T. K. Sellis, N. Roussopoulos, and C. Faloutsos. The R+-tree: A dynamic index for multi-dimensional objects. In VLDB, pages 507–518, 1987.
[34] T. K. Sellis, N. Roussopoulos, and C. Faloutsos. Multi-dimensional access methods: Trees have grown everywhere. In VLDB, pages 13–14, 1997.
[35] P. Seshadri. Predator: A resource for database research. In SIGMOD Record, 27(1), pages 16–20, 1998.
[36] J. Srinivasan, R. Murthy, S. Sundara, N. Agarwal, and S. DeFazio. Extensible indexing: A framework for integrating domain-specific indexing schemes into Oracle 8i. In ICDE, pages 91–100, 2000.
[37] M. Stonebraker. Inclusion of new types in relational database systems. In ICDE, pages 262–269, 1986.
[38] M. Stonebraker and G. Kemnitz. The Postgres next generation database management system. Commun. ACM, 34(10):78–92, 1991.
[39] Y. Theodoridis and T. Sellis. A model for the prediction of R-tree performance. In PODS, pages 161–171, 1996.
[40] F. Wang. Relational-linear quadtree approach for two-dimensional spatial representation and manipulation. TKDE, 3(1):118–122, 1991.

---

**Proceedings of the 22nd International Conference on Data Engineering (ICDE’06)**  
**8-7695-2570-9/06 $20.00 © 2006 IEEE**