### LPAR and VIOS in Power Hypervisor (PHYP) Environment

#### Overview
- **LPAR (Logical Partition) Hosting**
- **VIOS (Virtual I/O Server)**
- **Power Hypervisor (PHYP)**
- **Service Processor (SP)**
- **Dispatchable ACM (Access Control Module)**
- **PLIC (Platform Logical Interrupt Controller)**
- **Dedicated and Shared I/O Storage and Network**
- **Run-time Security Hooks**
- **Hardware Management Console (HMC)**

#### Access Control and Security
- **ACM (Access Control Module):** Policy Decision Point
- **Security Hook:** Policy Enforcement Point

#### Initial PHYP MAC Design
In the initial design, we decided that MAC (Mandatory Access Control) enforcement should reside on the PHYP platform. The straightforward approach was to enforce the policy at run-time when LPARs bind to resources or access them. Our initial implementation placed the ACM and security hooks directly into PLIC (Figure 4).

**Advantages:**
- Minimizes the code path between the time of access check and the time of resource access.
- Requires less code for correctness.
- Supports revocation and re-labeling through callbacks.

**Disadvantages:**
- Characterized by having security hooks distributed throughout many PLIC modules.
- More intrusive implementation.
- Sensitive to platform performance.

Due to these drawbacks, this approach was rejected.

#### Current Implementation
Our current implementation, discussed in Section 3.1, instruments Dispatchable PHYP with the ACM and security hooks. This centralizes policy processing and decisions into one module, incurs no runtime cost, and does not impact PLIC. This approach is driven by our observation that the runtime setup is confined through the configuration settings in PHYP. However, it does not support automatic revocation of resource access based on re-labeling.

#### Lessons Learned
- Non-security personnel have difficulties understanding a security policy when security labels are defined in terms of types and set operations.
- Using a color metaphor for a security label provided a good way to visualize the concept to non-security people.
- Using the same types in both STE and CHW policies further simplified the understanding of the MAC policy.

### Future Work
Future work includes extending MAC support to PHYP management applications and making VIOSs (hosting LPARs) MAC aware.

- **MAC Support for PHYP Management Applications:**
  - Adding MAC enablement features into PHYP management applications, including the HMC and Integrated Virtualization Manager (IVM).
  - Extending the HMC and IVM to create a MAC policy, assign labels to LPARs and resources, and load and update MAC policy into Dispatchable PHYP.
  - Supporting safe object reuse by requiring the backup and cleaning of (virtual) storage resources before they can be re-labeled and re-used for a different workload.
  - Removing a label from a resource can trigger a process that ensures the resource is backed-up and cleaned.

- **Administrative Duties:**
  - Separating administrative duties in the management applications to scale the authorization required to manage the MAC PHYP platform.
  - Dividing platform management between a security officer and non-security administrators.
  - The security officer would be responsible for setting the security policy and labeling LPARs and resources.
  - The non-security administrator would handle non-security management tasks on the platform.

- **MAC Awareness in VIOS:**
  - VIOSs that are multi-STE typed must be MAC aware to enforce the MAC policy on virtual resources exported to client LPARs.
  - Planning to include hooks into the VIOS to implement the access controls required to enforce the policy.

### Related Work
Hypervisors can be divided into two categories: isolation and sharing hypervisors.

- **Isolation Hypervisors:**
  - Do not allow the sharing of resources between LPARs.
  - Examples: NetTop, IBM PR/SM system.

- **Sharing Hypervisors:**
  - Our work falls into the sharing hypervisor category.
  - Closely related to Xen hypervisor’s sHype MAC implementation.
  - Xen’s and PHYP’s MAC realization provide the same type of policy enforcement but differ in implementation.
  - Xen’s MAC enforcement is performed partly in the interrupt-driven hypervisor layer during runtime.
  - PHYP’s MAC enforcement is performed during configuration time only.

- **Other Sharing Hypervisors:**
  - VAX VMM and KVM/370 were developed for high-assurance and required implementing a new hypervisor or modifying the existing one.
  - Provide multi-level security models.
  - Our sHype MAC retrofit for PHYP is non-intrusive and aims at the assurance that the base hypervisor is designed for (usually enterprise-level assurance).

- **Multics Enhancements:**
  - Related to our work by controlling users’ access to classified information at the OS layer using a restricted multi-level security mode.
  - We restrict VM access to resources at the hypervisor layer using a simple and platform-independent policy model.
  - Multics enhancements also describe administrative and physical safeguards applicable to PHYP management applications.

### Conclusion
In this paper, we show how the sHype mandatory access control architecture can be implemented for the commercial-grade PHYP hypervisor with minimal impact on the code base and performance. We consider the limitations and trade-offs of our approach with respect to meeting the three fundamental principles of the reference monitor. One key observation is that the reference monitor introduced in the early seventies remains relevant today for mediating access to resources. Another result of our work is that we can provide simple and robust protection statements to customers using simple security policies. This has the potential to simplify management and harden the security of the platforms.

### Acknowledgements
The authors would like to thank the IBM POWER Design and Development Team for providing access to PHYP information and platforms. Special thanks to Bill Armstrong, Pete Heyrman, Bryan Logan, Kyle Lucke, Amartey Pearson, David Larson, and David Engebretsen for their generous assistance. We also thank Paul Karger for his comments on previous MAC work on hypervisors.

### References
[1] J. P. Anderson. Computer Security Technology Planning Study. ESD-TR-73-51, Vols. I and II, Air Force Electronic Division Systems, Hanscom AFB, Bedford, MA, Oct. 1972.
[2] W. J. Armstrong, R. L. Arndt, D. C. Boutcher, R. G. Kovacs, D. Larson, K. A. Lucke, N. Nayar, and R. C. Swanberg. Advanced Virtualization Capabilities of POWER5 Systems. IBM Journal of Research and Development, Vol. 49, No. 4/5, July/Sept. 2005.
[3] B. Armstrong, S. Bade, D. Boutcher, C. DeRobertis, T. Mathews, and A. McLaughlin. LPAR Security on POWER5 Processor-based Systems, Sept. 2007. URL: http://www.ibm.com/systems/p/hardware/whitepapers/lpar_security.pdf.
[4] W. E. Boebert and R. Y. Kain. A Practical Alternative to Hierarchical Integrity Policies. 8th National Computer Security Conference, 1985.
[5] D. F. C. Brewer and M. J. Nash. The Chinese Wall Security Policy. In Proc. IEEE Symposium on Security and Privacy, pp. 206-214, May 1989.
[6] Certification Report for Processor Resource/System Manger (PR/SM) for the IBM eServer zSeries 900, BSI-DSZ-CC-0179-2003, Bundesamt fur Sicherheit in der Informationstechnik, Bonn, Germany, 7 Feb. 2003. URL: http://www.commoncriteriaportal.org/public/files/epfiles/0179a.pdf.
[7] Common Criteria Evaluation and Validation Scheme. URL: http://niap.bahialab.com/cc-scheme/in_evaluation.cfm.
[8] Department of Defense. Trusted Computer System Evaluation Criteria (Orange Book), DoD 5200.28-STD, 1985.
[9] B. D. Gold, R. R. Linde, and P. F. Cudney. KVM/370 in Retrospect. In Proc. IEEE Symposium on Security and Privacy, 1984.
[10] IBM Research. The Research Hypervisor – A Multi-Platform, Multi-Purpose Research Hypervisor. URL: http://www.research.ibm.com/hypervisor.
[11] Integrated Virtualization Manager on IBM System p5, Dec. 2006. URL: http://www.redbooks.ibm.com/redpapers/pdfs/redp4061.pdf.
[12] Kernel Based Virtual Machine. URL: http://kvm.qumranet.com/kvmwiki.
[13] T. Jaeger, R. Sailer, and Y. Sreenivasan. Managing the Risk of Covert Information Flows in Virtual Machine Systems. In ACM Symposium on Access Control Models and Technologies (SACMAT), France, June 2007.
[14] P. A. Karger. Multi-Level Security Requirements for Security Hypervisors. Annual Computer Applications Conference (ACSAC), Dec. 2005.
[15] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and C. E. Kahn. A Retrospective on the VAX VMM Security Kernel. In IEEE Transaction on Software Engineering, November 1991.
[16] Power.org Standard for Power Architecture Platform Requirements (Workstation, Server), Version 2.0, 28 August. URL: http://www.power.org/members/developers/specs/PAPR_Version_2.0_28August06.pdf. Power.org.
[17] N. L. Kelem and R. J. Feiertag. A Separation Model for Virtual Machine Monitors. In Proc. IEEE Symposium on Security and Privacy, 1991.
[18] J. M. McCune, T. Jaeger, S. Berger, R. Caceres, and R. Sailer. Shamon: A System for Distributed Mandatory Access Control. 22nd Annual Computer Security Applications Conference (ACSAC), Dec. 2006.
[19] R. Meushaw and D. Simard. NetTop-Commercial Technology in High Assurance Applications. National Security Agency Tech Trend Notes, Fall 2000.
[20] M. Nguyen and R. Barker. IBM pSeries Hardware Management Console Security White Paper. URL: http://www.ibm.com/servers/eserver/pseries/hardware/whitepapers/hmc_security.pdf.
[21] B. D. Payne, R. Sailer, R. Caceres, Ron Perez, and W. Lee. A Layered Approach to Simplified Access Control in Virtualized Systems. Operating Systems Review, Vol. 41, No. 3, July 2007.
[22] R. A. Meyer and L. H. Seawright. A Virtual Machine Time-Sharing System. IBM Systems Journal, Vol. 9, No. 3, Sept. 1970.
[23] J. Rushby. Proof of Separability-A verification technique for a class of security kernels. In Proc. 5th International Symposium on Programming, vol. 137 of Lecture Notes in Computer Science, pp 352-367, Springer-Verlag, 1982.
[24] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger, J. Griffin, and L. Van Doorn. Building a MAC-Based Security Architecture for the Xen Opensource Hypervisor. 21st Annual Computer Security Applications Conference (ACSAC), Dec. 2005.
[25] J. Whitmore, A. Bensoussan, P. Green, D. Hunt, A. Kobziar, and J. Stern. Design for MULTICS Security Enhancements, ESD-TR-74-176, Electronic Systems Division, Hanscom AFB, MA, Dec. 1973. URL: http://xenbits.xensource.com/xen-unstable.hg.
[26] XenSource. Xen Unstable. URL: http://xenbits.xensource.com/xen-unstable.hg.