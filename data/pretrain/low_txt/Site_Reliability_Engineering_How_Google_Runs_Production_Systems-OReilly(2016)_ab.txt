### How to Read This Book

This book is a collection of essays written by members and alumni of Google’s Site Reliability Engineering (SRE) organization. It resembles conference proceedings more than a traditional book authored by one or a few individuals. Each chapter is designed to be read as part of a coherent whole, but you can also gain valuable insights by focusing on the topics that interest you most. If there are additional articles that support or inform the text, we provide references for further reading.

You do not need to read the chapters in any specific order, though we recommend starting with Chapters 2 and 3. Chapter 2 provides an overview of Google’s production environment, while Chapter 3 outlines how SRE approaches risk, a key aspect of our profession. Reading the book cover-to-cover is also beneficial, as the chapters are organized thematically into three parts: Principles (Part II), Practices (Part III), and Management (Part IV). Each part includes a brief introduction highlighting the content and referencing other articles by Google SREs that delve into specific topics in more detail.

Additionally, the companion website, [insert URL], offers a variety of helpful resources. We hope you find this book as useful and interesting as we did in putting it together.

— The Editors

### Conventions Used in This Book

The following typographical conventions are used in this book:

- **Italic**: Indicates new terms, URLs, email addresses, filenames, and file extensions.
- **Constant Width**: Used for program listings and within paragraphs to refer to program elements such as variable or function names, databases, data types, environment variables, statements, and keywords.
- **Constant Width Bold**: Shows commands or other text that should be typed literally by the user.
- **Constant Width Italic**: Shows text that should be replaced with user-supplied values or by values determined by context.

**Tip or Suggestion**: This element signifies a tip or suggestion.
**General Note**: This element signifies a general note.
**Warning or Caution**: This element indicates a warning or caution.

### Using Code Examples

Supplemental material is available at [insert URL]. This book is intended to help you get your job done. Generally, if example code is provided, you may use it in your programs and documentation without needing to contact us for permission, unless you are reproducing a significant portion of the code. For example, writing a program that uses several chunks of code from this book does not require permission. However, selling or distributing a CD-ROM of examples from O’Reilly books does require permission. Citing this book and quoting example code in response to a question does not require permission. Incorporating a significant amount of example code from this book into your product’s documentation does require permission.

We appreciate, but do not require, attribution. An attribution usually includes the title, author, publisher, and ISBN. For example: “Site Reliability Engineering, edited by Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy (O’Reilly). Copyright 2016 Google, Inc., 978-1-491-92912-4.”

If you feel your use of code examples falls outside fair use or the permission given above, please contact us at [insert email address].

### Safari® Books Online

Safari® Books Online is an on-demand digital library that delivers both books and videos from the world’s leading technology and business experts. Technology professionals, software developers, web designers, and business and creative professionals use Safari Books Online as their primary resource for research, problem solving, learning, and certification training.

Safari Books Online offers a range of subscription options for enterprises, government, educational institutions, and individuals. Members have access to thousands of books, training videos, and prepublication manuscripts in one fully searchable database from publishers like O’Reilly Media, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, Course Technology, and many others. For more information about Safari Books Online, please visit [insert URL].

### How to Contact Us

Please direct comments and questions concerning this book to the publisher:

O’Reilly Media, Inc.  
1005 Gravenstein Highway North  
Sebastopol, CA 95472  
800-998-9938 (in the United States or Canada)  
707-829-0515 (international or local)  
707-829-0104 (fax)

We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at [insert URL].

To comment or ask technical questions about this book, send an email to [insert email address].

For more information about our books, courses, conferences, and news, see our website at [insert URL].

Find us on Facebook: [insert URL]  
Follow us on Twitter: [insert URL]  
Watch us on YouTube: [insert URL]

### Acknowledgments

This book would not have been possible without the tireless efforts of our authors and technical writers. We would also like to thank the following internal reviewers for providing especially valuable feedback: Alex Matey, Dermot Duffy, JC van Winkel, John T. Reese, Michael O’Reilly, Steve Carstensen, and Todd Underwood. Ben Lutch and Ben Treynor Sloss were this book’s sponsors within Google; their belief in this project and sharing what we’ve learned about running large-scale services was essential to making this book happen.

We’d like to send special thanks to Rik Farrow, the editor of ;login:, for partnering with us on a number of contributions for pre-publication via USENIX. While the authors are specifically acknowledged in each chapter, we’d like to take time to recognize those who contributed to each chapter by providing thoughtful input, discussion, and review.

[Insert list of contributors and reviewers]

We are also grateful to the following contributors, who either provided significant material, did an excellent job of reviewing, agreed to be interviewed, supplied significant expertise or resources, or had some otherwise excellent effect on this work: [Insert list of additional contributors and reviewers]

The editors would also like to personally thank the following people:

- **Betsy Beyer**: To Grandmother (my personal hero), for supplying endless amounts of phone pep talks and popcorn, and to Riba, for supplying me with the sweatpants necessary to fuel several late nights. These, of course, in addition to the cast of SRE all-stars who were indeed delightful collaborators.
- **Chris Jones**: To Michelle, for saving me from a life of crime on the high seas and for her uncanny ability to find manzanas in unexpected places, and to those who’ve taught me about engineering over the years.
- **Jennifer Petoff**: To my husband Scott for being incredibly supportive during the two-year process of writing this book and for keeping the editors supplied with plenty of sugar on our “Dessert Island.”
- **Niall Murphy**: To Léan, Oisín, and Fiachra, who were considerably more patient than I had any right to expect with a substantially rantier father and husband than usual, for years. To Dermot, for the transfer offer.

### Part I: Introduction

This section provides high-level guidance on what SRE is and why it is different from more conventional IT industry practices. Ben Treynor Sloss, the senior VP overseeing technical operations at Google—and the originator of the term “Site Reliability Engineering”—provides his view on what SRE means, how it works, and how it compares to other ways of doing things in the industry, in Chapter 1.

Chapter 2 provides a guide to the production environment at Google as a way to help acquaint you with the wealth of new terms and systems you are about to meet in the rest of the book.

### Chapter 1: Introduction
#### Written by Benjamin Treynor Sloss  
#### Edited by Betsy Beyer

> "Hope is not a strategy."
>
> — Traditional SRE saying

It is a universal truth that systems do not run themselves. So, how should a system—particularly a complex computing system that operates at a large scale—be managed?

#### The Sysadmin Approach to Service Management

Historically, companies have employed systems administrators (sysadmins) to manage complex computing systems. This approach involves assembling existing software components and deploying them to work together to produce a service. Sysadmins are then responsible for running the service and responding to events and updates as they occur. As the system grows in complexity and traffic volume, generating a corresponding increase in events and updates, the sysadmin team grows to handle the additional workload. Because the sysadmin role requires a different skill set than that of a product’s developers, developers and sysadmins are divided into discrete teams: “development” and “operations” or “ops.”

The sysadmin model of service management has several advantages. For companies deciding how to run and staff a service, this approach is relatively easy to implement: as a familiar industry paradigm, there are many examples to learn from and emulate. A relevant talent pool is already widely available, and an array of existing tools, software components (off the shelf or otherwise), and integration companies are available to help run those assembled systems, so a novice sysadmin team doesn’t have to reinvent the wheel and design a system from scratch.

However, the sysadmin approach and the accompanying development/ops split have several disadvantages and pitfalls. These fall broadly into two categories: direct costs and indirect costs.

- **Direct Costs**: Running a service with a team that relies on manual intervention for both change management and event handling becomes expensive as the service and/or traffic to the service grows, because the size of the team necessarily scales with the load generated by the system.
- **Indirect Costs**: These can be subtle but are often more expensive to the organization than the direct costs. These costs arise from the fact that the two teams are quite different in background, skill set, and incentives. They use different vocabulary to describe situations, carry different assumptions about both risk and possibilities for technical solutions, and have different assumptions about the target level of product stability. The split between the groups can easily become one of not just incentives, but also communication, goals, and eventually, trust and respect. This outcome is a pathology.

Traditional operations teams and their counterparts in product development thus often end up in conflict, most visibly over how quickly software can be released to production. At their core, the development teams want to launch new features and see them adopted by users. At their core, the ops teams want to ensure the service doesn’t break while they are holding the pager. Because most outages are caused by some kind of change—a new configuration, a new feature launch, or a new type of user traffic—the two teams’ goals are fundamentally in tension.

Both groups understand that it is unacceptable to state their interests in the baldest possible terms (“We want to launch anything, any time, without hindrance” versus “We won’t want to ever change anything in the system once it works”). And because their vocabulary and risk assumptions differ, both groups often resort to a familiar form of trench warfare to advance their interests. The ops team attempts to safeguard the running system against the risk of change by introducing launch and change gates. For example, launch reviews may contain an explicit check for every problem that has ever caused an outage in the past—that could be an arbitrarily long list, with not all elements providing equal value. The dev team quickly learns how to respond. They have fewer “launches” and more “flag flips,” “incremental updates,” or “cherry-picks.” They adopt tactics such as sharding the product so that fewer features are subject to the launch review.

#### Google’s Approach to Service Management: Site Reliability Engineering

[Continue with the rest of the chapter content]