### 5.2 DRM Applications with Consumable Rights

Consumable access is becoming increasingly important in various applications, particularly in Digital Rights Management (DRM). For instance, in a pay-per-use scenario, a user's credit is reduced after each access to an object, eventually leading to the loss of access rights after a certain number of accesses. In another example, if an object can only be accessed by a fixed number of subjects concurrently, one subject's access may revoke the access right of another. Most applications with consumable rights can be modeled using UCON with the mutability property [12, 11].

Consider a DRM application where a user can order a music CD, along with a license file that specifies the CD can only be copied a fixed number of times (e.g., 10). The license file can be embedded with the CD or distributed separately and must be available and respected by the CD copying software or device. A subject (user) has an attribute `credit` with a numerical value representing the user's balance. Each object (CD) has an attribute `copylicense` to specify how many copies a subject can make with this object. The policies are defined as follows:

#### Policy: Order
- **Condition**: `(s.credit ≥ o.price) ∧ (o.owner = null)`
- **Action**:
  - `permit(s, o, order)`
  - `updateAttribute : s.credit = s.credit − o.price`
  - `updateAttribute : o.owner = s`
  - `updateAttribute : o.copylicense = 10`

This policy allows a user to order an object if it has not been ordered before (the `owner` attribute is `null`) and if the user’s credit is greater than or equal to the object’s price. As a result of the order, the user’s credit is reduced, the object’s owner is updated to the user’s ID, and the object’s `copylicense` is set to 10.

#### Policy: Allow Copy
- **Condition**: `(o.owner = s) ∧ (o.copylicense > 0)`
- **Action**:
  - `permit(s, o, allowcopy)`
  - `updateAttribute : o.allowcopy = true`

This policy states that whenever the object’s `copylicense` is positive, the owner of the object is allowed to make a copy of the object.

#### Policy: Copy
- **Condition**: `(o1.allowcopy = true)`
- **Action**:
  - `permit(o1, o2, copy)`
  - `createObject o2`
  - `updateAttribute : o2.sn = o1.copylicense`
  - `updateAttribute : o1.copylicense = o1.copylicense − 1`
  - `updateAttribute : o1.allowcopy = false`

This policy allows the creation of a new object (CD) if the original object is allowed to be copied. The new object’s serial number (`sn`) is set to the original object’s `copylicense` value, and the original object’s `copylicense` is reduced by one. The newly created object does not have any license information, so it cannot be copied.

In a system with a fixed number of users and objects in the initial state, the value domain of `owner` is finite since no new users can be created. The set of all possible values for `credit` of a subject is finite because the value is set after pre-payment or registration. Note that changes to the `credit` value due to administrative actions, such as credit card payments, are not captured in the model. The value domains for `copylicense` and `allowcopy` are also finite. Therefore, all attribute value domains are finite sets. Furthermore, there is only one creating policy, in which both the child’s and the parent’s attributes are updated, and there is no cycle with any create-parent attribute tuples since the value of `copylicense` strictly decreases. According to Theorem 3, the safety of this UCONA model is decidable.

### 6. Related Work

Previous work in safety analysis has shown that, for some general access control models such as the access matrix model formalized by Harrison, Russo, and Ullman (HRU model) [5], safety is an undecidable problem. This means there is no algorithm to determine, given a general access control matrix system, whether it is possible to find a combination of commands to produce a state where a subject has a particular permission. HRU did provide decidability results for special cases with either mono-operational commands (only one primitive operation allowed in a command) or mono-conditional (only one presence check in the condition part of a command) monotonic (no “destroy subject” or “destroy object” or “remove right” operations) commands. These restricted models are very limited in expressive power. The take-grant model has a linear time algorithm to check the safety property but also has limited expressive power [2, 9].

Sandhu’s Schematic Protection Model (SPM) has sufficient expressive power to simulate many protection models while providing efficient safety analysis [13]. SPM introduces the notion of strong security types for subjects and objects: each subject and object is associated with a security type when created, and this type does not change after creation. Sandhu [14] introduces a typed access matrix model (TAM) model, which generalizes the HRU model by introducing strong-typed subjects and objects. The monotonic form of TAM with acyclic schemes is decidable, and the decision procedure is NP-hard. Extending TAM, Soshi [18] presents a dynamic-typed access matrix model (DTAM), which allows the type of an object to change dynamically within a fixed domain. The decidable model of DTAM allows non-monotonic operations.

Motwani et al. [10] present an accessibility decidable model in a capability-based system, which is a generalized take-grant model and a restricted form of the HRU model. The approach to the safety problem is based on its relationship to the membership problem in languages generated by certain classes of string grammars. Jaeger and Tidswell [6] provide a safety analysis approach that uses a basic set of constraints on a system. More recently, Koch et al. [7] report on results that use a graph transformation model to specify access control policies. The state is represented by a typed labeled graph, and state transitions are represented by graph transformations. Under some restrictions on the form of the rules (e.g., rules that add or delete elements), the model has a decidable accessibility problem, and the rules can model restrictive forms of DAC and a simplified decentralized RBAC. Very recently, Li and Tripunitara [8] use a trust management approach to study the safety problem in RBAC and derive the decidability of safety with a user-role administration scheme (URA97). The first safety decidable model obtained in this paper has the capability to simulate an RBAC system with URA97.

### 7. Conclusion and Future Work

In this paper, we investigate the safety property of UCON. First, the safety problem in general UCONA models is shown to be undecidable by simulating a Turing machine. Then, we prove that a UCONA model with finite attribute domains and without creating policies is decidable. By relaxing the creation restriction, we also prove that the safety problem is decidable for a UCONA model with an acyclic attribute creation graph and no cycles that include create-parent tuples in the attribute update graph. The decidable models are shown to be useful by simulating the RBAC96 model with the URA97 scheme and a DRM application with consumable rights. These two results lay the groundwork for considerable future work on these topics and hold out the promise for the discovery of practically useful and efficiently decidable cases of UCON.

In this paper, we focus only on the safety analysis with pre-authorization policies in UCON. For condition core models of UCON, as system state changes caused by environmental information are not captured in UCON core models, safety is a function of the system environment. For obligation core models, as specified in [19], an obligation of an access is an action that can be related to the subject requesting the access or to some other subjects, and therefore, a usage policy may include more than two parameters. Analysis of the safety problem with obligations is for future work.

### 8. References

[1] D. E. Bell and L. J. Lapadula, Secure Computer Systems: Mathematical Foundations and Model. Mitre Corp. Report No.M74-244, Bedford, Mass., 1975.

[2] M. Bishop, Theft of Information in the Take-Grant Protection Model, In Proc. of IEEE Computer Security Foundation Workshop, 1988.

[3] D. E. Denning, A lattice model of secure information flow, Communications of the ACM, vol. 19, no. 5, 1976.

[4] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. Richard Kuhn and R. Chandramouli, Proposed NIST Standard for Role-Based Access Control, ACM Transactions on Information and System Security, Volume 4, Number 3, August 2001.

[5] M. H. Harrison, W. L. Ruzzo, and J. D. Ullman, Protection in Operating Systems, Communication of ACM, Vol 19, No. 8, 1976.

[6] T. Jaeger and J. E. Tidswell, Practical Safety in Flexible Access Control Models, ACM Transactions on Information and Systems Security, Vol. 4, No. 2, May 2001.

[7] M. Koch, L. V. Mancini, and F. Parisi-Presicce, Decidability of Safety in Graph-Based Models for Access Control, In Proc. of the 7th European Symposium on Research in Computer Security, LNCS 2502, 2002.

[8] N. Li and M. V. Tripunitara. Security analysis in role-based access control. In Proceedings of the Ninth ACM Symposium on Access Control Models and Techniques, 2004.

[9] R. J. Lipton and L. Snyder, A Linear Time Algorithm for Deciding Subject Security, Journal of ACM, 24(3), 1977.

[10] R. Motwani, R. Panigrahy, V. Saraswat, and S. Venkatasubramanian, On the Decidability of Accessibility Problem (Extended Abstract), In Proc. of the 32nd Annual ACM Symposium on Theory of Computing, 2000.

[11] J. Park and R. Sandhu, The UCONABC Usage Control Model, ACM Transactions on Information and Systems Security, Feb., 2004.

[12] J. Park, X. Zhang, and R. Sandhu, Attribute Mutability in Usage Control, In Proc. of the Annual IFIP WG 11.3 Working Conference on Data and Applications Security, 2004.

[13] R. Sandhu, The Schematic Protection Model: Its Definition and Analysis for Acyclic Attenuating Schemes, Journal of ACM, 35(2), 1988.

[14] R. Sandhu, The Typed Access Matrix Model, In Proc. of the IEEE Symposium on Research in Security and Privacy, 1992.

[15] R. Sandhu, E. Coyne, H. Feinstein, and C. Youman, Role-Based Access Control Models, IEEE Computer, Volume 29, Number 2, February 1996.

[16] R. Sandhu, V. Bhamidipati, and Q. Munawer, The ARBAC97 Model for Role-Based Administration of Roles, ACM Transactions on Information and Systems Security, Volume 2, Number, February 1999.

[17] M. Sipser, Introduction to the Theory of Computation, PWS Publishing 1997.

[18] M. Soshi, Safety Analysis of the Dynamic-Typed Access Matrix Model, In Proc. of the 6th European Symposium on Research in Computer Security, LNCS 1895, 2000.

[19] X. Zhang, J. Park, F. Parisi-Presicce, and R. Sandhu, A Logical Specification for Usage Control, In Proc. of the 9th ACM Symposium on Access Control Models and Technologies, 2004.

### Appendix

#### Proof of Theorem 1

We show that a general Turing machine with one-directional single tape [17] can be simulated with a UCONA system, in which a particular permission leakage corresponds to the accept state of the Turing machine. A Turing machine \( M \) is a 7-tuple: \( \{Q, \Sigma, \Gamma, \delta, q_0, q_{\text{accept}}, q_{\text{reject}}\} \), where:
- \( Q \) is a finite set of states,
- \( \Sigma \) is a finite set, the input alphabet not containing the special blank symbol,
- \( \Gamma \) is a finite set, the tape alphabet, with blank \( \in \Gamma \) and \( \Sigma \subseteq \Gamma \),
- \( \delta : Q \times \Gamma \rightarrow Q \times \Gamma \times \{L, R\} \) is the transition function,
- \( q_0, q_{\text{accept}}, q_{\text{reject}} \in Q \) are the start state, accept state, and reject state, respectively, where \( q_{\text{accept}} \neq q_{\text{reject}} \).

Initially, \( M \) is in the state \( q_0 \). Each cell on the tape holds blank. The movement of \( M \) is determined by \( \delta \): if \( \delta(q, x) = (p, y, L) \), \( M \) is in the state \( q \) with the tape head scanning a cell holding \( x \), the head writes \( y \) on this cell, moves one cell to the left on the tape, and \( M \) enters the state \( p \). If the head is at the left end, there is no movement. Similarly for \( \delta(q, x) = (p, y, R) \), but the head moves one cell to the right.

We construct a UCONA system to simulate a Turing machine \( M \) introduced above, where the set of objects in a state of the UCONA system is used to simulate the cells in the tape of \( M \). The UCONA scheme is \( (AT T, R, P, C) \), where \( R = Q \cup \{\text{moveleft}, \text{moveright}, \text{create}\} \) and \( AT T = \{\text{state}, \text{cell}, \text{parent}, \text{end}\} \). For an object, the value of `state` is either `null` or the state of \( M \) if its head is positioned on this cell, the value of `cell` is the content in the cell that the head is scanning, the `parent` attribute stores an object identity, and `end` is a boolean value to show whether the head is on the rightmost cell of the part of the tape used so far. The set of predicates \( P \) and policies \( C \) are shown in the simulation process.

The initial state \( (O_0, \sigma_0) \) of the UCONA system includes a single object \( o_0 \) and its attribute assignments:
- \( o_0.\text{state} = q_0 \)
- \( o_0.\text{cell} = \text{blank} \)
- \( o_0.\text{parent} = \text{null} \)
- \( o_0.\text{end} = \text{true} \)

For the state transition \( \delta(q, x) = (p, y, L) \), the following policy is defined to simulate it:

**Policy: moveleft**
- **Condition**: \( (o_2.\text{parent} = o_1) \land (o_2.\text{state} = q) \land (o_2.\text{cell} = x) \)
- **Action**:
  - `permit(o_1, o_2, moveleft)`
  - `updateAttribute : o_2.state = null;`
  - `updateAttribute : o_2.cell = y;`
  - `updateAttribute : o_1.state = p;`

In this policy, the two objects are connected by the `parent` attribute. When the Turing machine is in \( q_0 \), since \( o_0 \)'s `parent` value is `null`, the left movement cannot happen. In a state when the Turing machine’s state is \( q \) and the cell contains \( x \), the left movement is simulated with a policy with parameters \( o_1 \) and \( o_2 \), where \( o_2 \)'s `parent` value is \( o_1 \), and the policy updates their attributes to simulate the movement.

If the head is not scanning the rightmost cell, the state transition \( \delta(q, x) = (p, y, R) \) can be simulated with the policy `moveright`, which is similar to the policy `moveleft`; otherwise, it is simulated with the policy `create`, in which a new object is created.

**Policy: moveright**
- **Condition**: \( (o_1.\text{end} = \text{false}) \land (o_2.\text{parent} = o_1) \land (o_1.\text{state} = q) \land (o_1.\text{cell} = x) \)
- **Action**:
  - `permit(o_1, o_2, moveright)`
  - `updateAttribute : o_1.state = null;`
  - `updateAttribute : o_1.cell = y;`
  - `updateAttribute : o_2.state = p;`

**Policy: create**
- **Condition**: \( (o_1.\text{end} = \text{true}) \land (o_1.\text{state} = q) \land (o_1.\text{cell} = x) \)
- **Action**:
  - `permit(o_1, o_2, create)`
  - `updateAttribute : o_1.state = null;`
  - `updateAttribute : o_1.cell = y;`
  - `updateAttribute : o_1.end = \text{false};`
  - `createSubject o_2;`
  - `updateAttribute : o_2.parent = o_1;`
  - `updateAttribute : o_2.state = p;`
  - `updateAttribute : o_2.end = \text{true};`
  - `updateAttribute : o_2.cell = \text{blank};`

In a particular state of the UCONA system, only one of the three rights (`moveleft`, `moveright`, and `create`) is authorized according to one of the above policies, since the `state` attribute is non-null only for one object. Each policy assigns a non-null value to an object’s `state` and sets another one to `null`. The `end` attribute is `true` only for one object. Therefore, this UCONA system with these policies can simulate the operations of \( M \).

We need another policy to authorize a particular permission depending on the `state` attribute of an object.

**Policy: q**
- **Condition**: \( (o_1.\text{state} = q_f) \)
- **Action**:
  - `permit(o_1, o_2, q_f)`

For a Turing machine, it is undecidable to check if the state \( q_f \) can be reached from the initial state. Therefore, with the scheme of UCONA, the granting of the permission \( q_f \) of a subject to an object is also undecidable. This completes our undecidability proof.