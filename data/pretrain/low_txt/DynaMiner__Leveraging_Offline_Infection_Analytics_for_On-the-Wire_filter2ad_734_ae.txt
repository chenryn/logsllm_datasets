### Comparison of Accuracy with Classifier Results

#### Overall Effectiveness
As shown in Table V, DYNAMINER outperforms current state-of-the-art malware detectors by a significant margin (11.5% to be precise). The unique approach we employed to address malware infection confirms the practical effectiveness of our payload-agnostic, graph-centric, and comprehensive analysis of infection dynamics. As a learning-based system, DYNAMINER does face challenges with false signals. In the following sections, we analyze the reasons behind the misclassifications observed in our tests.

#### Analysis of False Positives
False positives are benign Web Conversation Graphs (WCGs) that are flagged as infections by our Ensemble Random Forest (ERF) classifier. As indicated in Section II, legitimate download sources are excluded from our WCG construction. However, users often download benign content from unofficial sources. By cross-checking the hash values of downloaded payloads, we confirmed that 37 out of the 49 false positives in DYNAMINER involved downloads from unofficial sites delivering benign content. Since DYNAMINER performs payload-agnostic analysis based primarily on graph-centric properties, these WCGs were flagged as infections.

In the remaining 12 cases of false positives, we observed that the client downloaded large binaries (ranging from 246MB to 1.1GB) and a long list of videos from torrent sites. The combination of large download sizes and exceptionally long durations led to the benign WCGs being flagged as infectious.

#### Analysis of False Negatives
False negatives are infection WCGs that are flagged as benign by our ERF classifier. Through manual analysis of the 206 infection WCGs that DYNAMINER flagged as benign, we identified two major causes. First, we noticed the absence of redirections but the presence of compressed malicious payloads. Specifically, we confirmed 89 cases where there were no redirections but a compressed payload was downloaded. The second source of false negatives is the absence of post-download graph dynamics. This is not entirely surprising since about 8% of our ground truth dataset lacks post-download dynamics. Excluding infection WCGs without post-download dynamics could have avoided these misclassifications, but we decided to keep them in the training set due to the rich dynamics they provide in the pre-download and download stages.

### Case Study 1: Forensic Detection

#### Potentially Infectious Web Session
To evaluate DYNAMINER on a potentially infectious web session, we selected a free live streaming service known for a high likelihood of malware infections, according to a recent large-scale study [20] on free streaming sites. Our case study was conducted on a PCAP capture of a user who watched the final game of the EURO2016 Soccer Tournament on July 10, 2016, on a free live streaming site (http://atdhe.net). During the streaming session, the user had 18 distinct tabs open and occasionally clicked on links. The service was interrupted three times, and each time, a JavaScript pop-up asked the user to click on a download link claiming to fix an "out-of-date player." The user intentionally clicked on the links, which led to other sites serving executables. The session resulted in the download of 32 payloads, with the longest redirection chain being 4. The user's host communicated with 12 unique remote domain names during the session.

#### Detection and Comparison with VirusTotal
We deployed DYNAMINER on a host and replayed the traffic using a local web server. During the replay, DYNAMINER issued 5 infection alerts out of 3,011 HTTP transactions. The redirection threshold used for this evaluation was 3. Of the 5 alerts, 3 involved an Adobe Flash player executable download, while the remaining 2 were a JAR file and a PDF. We submitted all 32 downloaded files to VirusTotal, and at least 3 of the detectors in VirusTotal flagged 4 of the 5 payloads that DYNAMINER alerted as malicious. For the PDF payload, all 56 VirusTotal detectors initially flagged it as clean. After 11 days, we resubmitted the same PDF, and 3 detectors flagged it as malicious for the first time. This demonstrates that DYNAMINER can flag malware that takes VirusTotal detectors 11 days to detect. Prior work [12] has also confirmed similar experiences with VirusTotal detectors lagging an average of 9.25 days in flagging malware.

### Case Study 2: On-the-Wire Detection

#### Mini-Enterprise Setup
In this setup, DYNAMINER is deployed as a web proxy in a 3-host mini-enterprise network. The hosts include a MacOS host with Google Chrome, a Ubuntu host with Firefox, and a Windows host with Internet Explorer. DYNAMINER intercepts all HTTP transactions from the three hosts and performs live analysis. This setup was run for 48 hours while the users performed routine web browsing. The Windows host was equipped with a commercial off-the-shelf (COTS) antivirus (AV) engine, while the other two did not have one. The three hosts downloaded 62 files during the case study, with an average redirection length of 2 and a maximum redirection chain of 6.

#### Live Alerts
Table VI summarizes the live case study, detailing the various payload types downloaded on each host, the maximum and average redirection chain lengths, and the breakdown of alerts issued by DYNAMINER. DYNAMINER issued 8 alerts: 4 on the Windows host, 3 on the Linux host, and 1 on the MacOS host. Three of the 4 alerts on the Windows host were issued after downloading an Adobe Flash payload, and 1 after a JAR payload. The AV on the Windows host, which was enabled during the case study, did not issue any alerts for these payloads. On the Ubuntu host, all 3 alerts were related to JAR payload downloads, while the alert on the MacOS host was for a ".dmg" executable. We submitted all 62 files to VirusTotal, and it flagged all 8 files relevant to the DYNAMINER alerts as malicious. Additionally, VirusTotal flagged 2 PDF files downloaded on the Windows host as malicious, but DYNAMINER did not issue any alerts for these PDF files.

#### False Signal Investigation
As a payload-agnostic system, DYNAMINER may flag malicious payloads as benign if their maliciousness manifests in content or behavior. To understand why DYNAMINER did not issue alerts for the 2 PDF files, we conducted a tool-supported investigation. Using PDF Stream Dumper [2], we analyzed the PDF files and found embedded Flash files. We believe VirusTotal flagged these files based on the results of its signature- and/or content-based malware detectors (3/56 malicious detections were from AV engines for both PDF files).

### Discussion and Limitations

We demonstrated how DYNAMINER can leverage the rich dynamics of web conversations to learn distinguishing insights for payload-agnostic malware detection. DYNAMINER operates under the assumption that web conversations exhibit a certain degree of dynamism centered around downloads, redirections, and post-download dynamics. It is important to note that our system operates on unencrypted HTTP conversations. Below, we highlight potential evasion attempts that a determined adversary might employ to circumvent our ERF classifier.

#### Cloaked Download Dynamics
Although there is a trend toward in-memory infections by exploit kits (e.g., Angler) [22], file-based infections remain predominant and consistent over the past three years. All infection sessions we analyzed for training our classifier involved a download of an exploit payload. Even if a WCG misses download dynamics but has redirections and post-infection callbacks, it will still likely be classified as infectious due to the prediction score averaging by the ERF classifier, which reduces variance.

#### Cloaked Redirection Dynamics
Sometimes, infections may skip redirections to directly lead a victim to an exploit server. Although we have very few instances (11 in our dataset) of WCGs without redirects, attackers may use this tactic to complicate detection. In theory, an attacker could evade DYNAMINER by avoiding redirections and directly infecting the victim via drive-by or fileless infection. If fileless infection is chosen, DYNAMINER may not detect it, as the resulting WCG would lack the most revealing features.

#### Post-Download Tweaks
Contrary to the common case of post-download dynamics observed in our dataset, a malware author may cloak post-download activity by either doing nothing after a successful infection or delaying the call to the command-and-control (C&C) server. The former significantly limits the attack's effectiveness in exfiltrating valuable information from the victim, which is generally in favor of the defender. In the latter case, DYNAMINER may miss the post-download dynamics, as it is not trivial to learn the timing pattern of what occurs after infection.

### Related Work

We discuss related work focusing on graph-based malware detection and exploit kit analysis and detection.

#### Graph and Tree-Based Infection Abstraction
Kwon et al. [12] capture download activity on end hosts and explore the growth patterns of benign and malicious graphs to build a classifier. SpiderWeb [25] leverages browser redirections to detect malicious web pages. BotHunter [8] synthesizes evidence of malware infection by tracking dialogues between internal hosts and external entities. WebWitness [16] studies the origin of malware by tracing back the web paths followed by users who fall victim to malware downloads. Nelms et al. [17] present a systematic study on characterizing and detecting social engineering attacks that lure users into downloading malware. Nazca [9] identifies infectious downloads and installations in large-scale networks. BotGrep [15] localizes botnet members based on unique communication patterns. Mekky et al. [14] developed a decision tree classifier based on HTTP redirection trees. CAMP [21] is an in-browser system for content-agnostic malware protection based on binary reputation. Amico [28] detects malicious downloads based on the provenance of downloaded files in a Windows host. DYNAMINER differs from this body of work in its richer abstraction and comprehensive analytics of WCGs.

#### Exploit Kit Malware Analysis and Detection
Taylor et al. [26] detect exploit kit malware through tree similarity of HTTP flows. In a follow-up work [27], they leverage honeyclient-based detection of exploit kits on a network. Compared to [26, 27], DYNAMINER's methodology differs in its payload-agnostic graph abstraction of infection dynamics. WebWinnow [7] uses honey-clients to capture exploit kit behaviors for malicious URL detection. Kizzle [24] employs hierarchical clustering of unpacked malicious JavaScript code to generate exploit kit signatures. DYNAMINER complements these works by abstracting WCGs in a comprehensive manner.

### Conclusion

This paper presented DYNAMINER, a payload-agnostic system that performs web conversation graph analytics to uncover malware infection insights. By enriching the malware download phenomenon with pre-infection and post-infection dynamics, we demonstrate the effectiveness of graph features in distinguishing malware infections in an evasion-resilient fashion. We evaluated DYNAMINER on multiple test sets of infection-free and infection WCGs, achieving a true positive rate of 97.3% with a false positive rate of 1.5%. We also demonstrated the forensic and live detection capabilities of DYNAMINER with two case studies, showing its effectiveness in detecting unknown malware days before VirusTotal detectors.

### Acknowledgements

This material was supported in part by the National Science Foundation grant CNS-1514472 and by a Defense Advanced Research Projects Agency / Air Force Research Lab contract FA8650-15-C-7561. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF, DARPA, AFRL, or the U.S. government.

### References

[1] Ensemble random forest classifier. http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier/

[2] PDF Stream Dumper. https://github.com/dzzie/pdfstreamdumper/

[3] Threatglass. http://www.threatglass.com/pages/

[4] VirusTotal. https://www.virustotal.com/

[5] Marco Cova, Christopher Kruegel, and Giovanni Vigna. Detection and analysis of drive-by-download attacks and malicious JavaScript code. In WWW, 2010.

[6] Brad Duncan. How the EITest Campaign’s Path to Angler EK Evolved Over Time. http://researchcenter.paloaltonetworks.com/tag/angler-exploit-kit/, 03 2016.

[7] Birhanu Eshete and V. N. Venkatakrishnan. Webwinnow: Leveraging exploit kit workflows to detect malicious URLs. In ACM CODASPY, pages 305–312, 2014.

[8] Guofei Gu, Phillip Porras, Vinod Yegneswaran, Martin Fong, and Wenke Lee. BotHunter: Detecting Malware Infection Through IDS-driven Dialog Correlation. In USENIX SEC, 2007.

[9] Luca Invernizzi, Stanislav Miskovic, Ruben Torres, Christopher Kruegel, Sabyasachi Saha, Giovanni Vigna, Sung-Ju Lee, and Marco Mellia. Nazca: Detecting Malware Distribution in Large-Scale Networks. In ISOC NDSS, 2014.

[10] Jaymesned. List of ransomware extensions and known ransom files created by Crypto malware. https://www.reddit.com/r/sysadmin/comments/46361k/list_of_ransomware_extensions_and_known_ransom/, 03 2016.

[11] Alexandros Kapravelos, Yan Shoshitaishvili, Marco Cova, Christopher Kruegel, and Giovanni Vigna. Revolver: An automated approach to the detection of evasive web-based malware. In USENIX SEC, 2013.

[12] Bum Jun Kwon, Jayanta Mondal, Jiyong Jang, Leyla Bilge, and Tudor Dumitras. The Dropper Effect: Insights into Malware Distribution with Downloader Graph Analytics. In ACM CCS, 2015.

[13] Long Lu, Vinod Yegneswaran, Phillip Porras, and Wenke Lee. Blade: An attack-agnostic approach for preventing drive-by malware infections. In ACM CSS, 2010.

[14] Hesham Mekky, Ruben Torres, Zhi-Li Zhang, Sabyasachi Saha, and Antonio Nucci. Detecting malicious HTTP Redirections Using Trees of User Browsing Activity. In IEEE INFOCOM, 2014.

[15] Shishir Nagaraja, Prateek Mittal, Chi-Yao Hong, Matthew Caesar, and Nikita Borisov. BotGrep: Finding P2P Bots with Structured Graph Analysis. In USENIX SEC, 2010.

[16] Terry Nelms, Roberto Perdisci, Manos Antonakakis, and Mustaque Ahamad. WebWitness: Investigating, Categorizing, and Mitigating Malware Download Paths. In USENIX SEC, 2015.

[17] Terry Nelms, Roberto Perdisci, Manos Antonakakis, and Mustaque Ahamad. Towards Measuring and Mitigating Social Engineering Software Download Attacks. In USENIX SEC, 2016.

[18] Phillip M. Hallam-Baker and Dan Connolly. Session identification URI. https://www.w3.org/TR/WD-session-id/

[19] Niels Provos, Panayiotis Mavrommatis, Moheeb Abu Rajab, and Fabian Monrose. All your iframes point to us. In USENIX SEC, 2008.

[20] M. Zubair Rafique, Tom van Goethem, Wouter Joosen, Christophe Huygens, and Nick Nikiforakis. It’s free for a reason: Exploring the ecosystem of free live streaming services. In ISOC NDSS, 2016.

[21] Moheeb Abu Rajab, Lucas Ballard, Noe Lutz, Panayiotis Mavrommatis, and Niels Provos. CAMP: Content-Agnostic Malware Protection. In ISOC NDSS, 2013.

[22] Jerome Segura. Fileless infections from exploit kit: An overview. https://blog.malwarebytes.org/exploits-2/2014/09/fileless-infections-from-exploit-kit-an-overview/, 09 2014.

[23] Jerome Segura. Exploit Kits: A Fast Growing Threat. https://blog.malwarebytes.org/101/2015/01/exploit-kits-a-fast-growing-threat/, 01 2016.

[24] Ben Stock, Benjamin Livshits, and Benjamin Zorn. Kizzle: A Signature Compiler for Exploit Kits. Technical report, Microsoft Research, 02 2015.

[25] Gianluca Stringhini, Christopher Kruegel, and Giovanni Vigna. Shady paths: Leveraging Surfing Crowds to Detect Malicious Web Pages. In ACM CCS, 2013.

[26] Teryl Taylor, Xin Hu, Ting Wang, Jiyong Jang, Marc Ph Stoecklin, Fabian Monrose, and Reiner Sailer. Detecting Malicious Exploit Kits Using Tree-based Similarity Searches. In ACM CODASPY, 2016.

[27] Teryl Taylor, Kevin Z. Snow, Nathan Otterness, and Fabian Monrose. Cache, Trigger, Impersonate: Enabling Context-Sensitive Honeyclient Analysis On-the-Wire. In ISOC NDSS, 2016.

[28] Phani Vadrevu, Babak Rahbarinia, Roberto Perdisci, Kang Li, and Manos Antonakakis. Measuring and detecting malware downloads in live network traffic. In ESORICS, 2013.