### Inconsistencies in Query Pairs

MACE demonstrates high precision and a zero false positive rate when handling various types of query pairs, such as insert-insert, insert-update, and insert-delete. This is evident from the data presented in Table 3. The low false positive (FP) rate is attributed to the use of an authorization 4-tuple, which models the authorization state of sessions on the server. With the detailed reports generated by MACE, including the locations of queries and missing authorizations, developers can effectively address and fix vulnerabilities in their applications.

### Performance and Scalability

To evaluate MACE's performance and scalability, we tested it on a suite of web applications ranging in size from 1,000 to 90,000 lines of code. Columns 2-3 in Table 2 provide the size and number of PHP files in these applications, while Column 4 estimates the number of query (insert, update, delete) locations in the source code. 

Table 2 (Column 6) shows the total analysis time for each application, which ranges from 35 seconds to 35,093 seconds. Approximately 95% of this time is spent creating dependency graphs and enumerating execution paths. As the number of possible paths increases, so does the number of symbolic queries. However, the number of distinct symbolic queries remains relatively low, as shown in the last column of Table 5, which presents the number of unique symbolic queries and their associated authorization information 4-tuple.

Currently, MACE analyzes each file separately and builds aggregated contexts once all queries are gathered. Performance can be improved, particularly by summarizing recurring contexts for basic user-defined functions. Given that MACE is a static analysis tool, the analysis times are acceptable considering the benefits provided by the tool.

### Annotation Effort

To run MACE, we manually identify the 4-tuple variables for each application as hints for the tool. Developers typically use global and super-global variables (e.g., in `$_SESSION` or `$_COOKIE`) to represent user roles, user IDs, and permissions for logged-in users. These variables hold authentication and authorization-related values throughout the program. Table 6 in Appendix A lists the variables we identified as hints for our programs.

The manual annotations are developed by observing session management functions in login procedures. In our experience, developing these annotations is not difficult for users familiar with the application, and especially for the developers who coded it. To objectively measure the annotation effort, we conducted a user study. For this experiment, MACE was extended to automatically generate a list of global and superglobal variables used in if-statements, which is a superset of authorization variables. This list is then refined to exclude user input variables (such as `$_GET` and `$_POST` superglobals) and provided as a starting point to the user.

To measure the effort needed to identify the 4-tuple, we asked a graduate student with basic knowledge of web applications to develop these annotations. We provided the application sources and the globals list generated by MACE. The student was given two mid-tier applications from our benchmark suite: mybloggie and phpns. She was able to produce annotations that matched our own, taking approximately 50 minutes to generate and verify them. This experiment suggests that only modest efforts are required to provide these annotations. Our experience aligns with prior work in web access control that uses similar annotations [11, 29]. Given the number of unknown vulnerabilities identified by MACE, such annotation-assisted automated bug finding is an attractive alternative to weeks of human effort and manual code inspection.

### Previous Work

We summarize related work in three broad categories: research focused on preventing access control vulnerabilities, research aimed at detecting access control bugs in legacy web applications, and general program analysis techniques for finding vulnerabilities in software. We contrast how MACE differs from many of these approaches while using some common techniques.

#### Prevention of Authorization Vulnerabilities

- **Nemesis [11]**: Uses Dynamic Information Flow Tracking (DIFT) to establish a shadow authentication system that tracks user authentication state. Access control lists can be specified by programmers, helping the system enforce authorization properties at runtime.
- **CLAMP [21]**: Employs virtual web servers to prevent authorization vulnerabilities by migrating the user authentication module into a separate, trusted virtual machine (VM). All database access requests are mediated by a trusted VM that enforces defined access control rules.
- **Diesel [15]**: Provides a proxy-based framework to limit database accesses at runtime using the principle of least privilege through developer-defined policies.
- **Capsules [20]**: Develops a language-based technique using Object-Capability languages to isolate objects and separate web applications into components.

While these works focus on dynamic prevention of access control errors, MACE focuses on static detection of access control vulnerabilities.

#### Finding Authorization Bugs in Legacy Web Applications

- **Ganapathy et al. [17]**: Adds checks to enforce authorization rules in legacy software systems like X SERVER, using a reference monitor for enforcing defined authorization policies at runtime.
- **RoleCast [24]**: Uses common software engineering patterns to model authorization requirements and develops techniques to check if any sensitive operation is performed after authorization. Although this approach frees the need for developer annotations, the RoleCast patterns do not consistently apply across all web applications.
- **Sun et al. [26]**: Detects vertical escalation vulnerabilities using static analysis by building a sitemap of the web application and checking for forced browsing to privileged pages. Both RoleCast and Sun et al. use coarse-grained modeling of authorization requirements, limiting their ability to detect a broader class of vulnerabilities.

In contrast, MACE employs a precise and fine-grained authorization model supported by user annotations, enabling it to detect a larger class of vulnerabilities, including horizontal privilege escalation.

- **Doupe et al. [12]**: Analyzes Execution after Redirect (EAR) vulnerabilities in web applications using static control flow analysis. While MACE is not built to detect EARs, its analysis infrastructure could be extended to detect such vulnerabilities. Additionally, context inference for sinks in MACE could help distinguish benign EARs from vulnerable ones.

#### Vulnerability Analysis in Applications

- **Waler [14]**: Combines static and dynamic analysis techniques to extract program specifications in terms of likely invariants and uses model checking to verify them. MACE is similar in its objectives but focuses on logic errors and is not built to compute authorization contexts precisely.
- **Engler et al. [13]**: Extracts program specifications through behavioral patterns called beliefs, using static analysis techniques to infer and rank these patterns. These patterns can detect certain types of vulnerabilities caused by inconsistencies in the program.
- **Srivastava et al. [25]**: Detects security vulnerabilities by comparing different implementations of the same API and using security policies as input to their analysis.
- **AutoISES [27]**: Detects bugs in standard C libraries by mining for common security-related patterns and identifying deviations as vulnerabilities.
- **Blackbox approaches (NoTamper [7] and Pellegrino et al. [22])**: Have potential to reason about access control vulnerabilities but are limited in their ability to reason about authorization errors that manifest due to missing checks along specific paths in the source code.

### Conclusion

MACE is a program analysis tool for the automatic detection of authorization vulnerabilities in web applications. It is based on our study and characterization of different authorization attacks and underlying vulnerabilities. MACE identifies privilege escalation vulnerabilities by finding inconsistencies in authorization contexts at access request points without needing to know the correct access control policies. While the analysis is best-effort, the greatest value of MACE lies in identifying flaws in these applications using fundamental abstractions, even in the absence of policy specifications, and in finding important vulnerabilities that were previously undiscovered.

### Acknowledgment

The authors would like to thank the anonymous reviewers for their constructive comments. We also thank Kalpana Gondi, Abeer Alhuzali, and Ivan Brugere for their help with the annotation experiments.

This material is based upon work supported in part by the National Science Foundation under Grant Nos. 0845894, 1069311, and 1065537. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation or the U.S. government.

### References

[1] Citi breach: 360k card accounts affected. http://www.bankinfosecurity.com/citi-breach-360k-card-accounts-affected-a-3760.

[2] CWE-639. http://cwe.mitre.org/data/definitions/639.html.

[3] MITRE Top 25. http://cwe.mitre.org/top25/.

[4] OWASP: Testing for privilege escalation. https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OWASP-AZ-003).

[5] Virtual private database. http://www.oracle.com/technetwork/database/security/index-088277.html.

[6] Application vulnerability report. Tech. rep., http://www.cenzic.com/downloads/Cenzic_Vulnerability_Report_2014.pdf, 2014.

[7] BISHT, P., HINRICHS, T., SKRUPSKY, N., BOBROWICZ, R., AND VENKATAKRISHNAN, V. N. NoTamper: Automatic blackbox detection of parameter tampering opportunities in web applications. In Proceedings of the 17th ACM Conference on Computer and Communications Security (New York, NY, USA, 2010), CCS '10, ACM, pp. 607–618.

[8] BISHT, P., HINRICHS, T., SKRUPSKY, N., AND VENKATAKRISHNAN, V. N. WAPTEC: Whitebox analysis of web applications for parameter tampering exploit construction. In Proceedings of the 18th ACM Conference on Computer and Communications Security (New York, NY, USA, 2011), CCS '11, ACM, pp. 575–586.

[9] BISHT, P., SISTLA, A. P., AND VENKATAKRISHNAN, V. N. TAPS: Automatically preparing safe SQL queries. In Proceedings of the 17th ACM Conference on Computer and Communications Security (New York, NY, USA, 2010), CCS '10, ACM, pp. 645–647.

[10] COVA, M., BALZAROTTI, D., FELMETSGER, V., AND VIGNA, G. Swaddler: An approach for the anomaly-based detection of state violations in web applications. In Proceedings of the 10th International Conference on Recent Advances in Intrusion Detection (Berlin, Heidelberg, 2007), RAID'07, Springer-Verlag, pp. 63–86.

[11] DALTON, M., KOZYRAKIS, C., AND ZELDOVICH, N. Nemesis: Preventing authentication & access control vulnerabilities in web applications. In USENIX Security Symposium (2009), USENIX Association, pp. 267–282.

[12] DOUPÉ, A., BOE, B., KRUEGEL, C., AND VIGNA, G. Fear the EAR: Discovering and mitigating execution after redirect vulnerabilities. In Proceedings of the 18th ACM Conference on Computer and Communications Security (New York, NY, USA, 2011), CCS '11, ACM, pp. 251–262.

[13] ENGLER, D., CHEN, D. Y., HALLEM, S., CHOU, A., AND CHELF, B. Bugs as deviant behavior: A general approach to inferring errors in systems code. In Proceedings of the Eighteenth ACM Symposium on Operating Systems Principles (New York, NY, USA, 2001), SOSP '01, ACM, pp. 57–72.

[14] FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND VIGNA, G. Toward automated detection of logic vulnerabilities in web applications. In Proceedings of the 19th USENIX Conference on Security (Berkeley, CA, USA, 2010), USENIX Security'10, USENIX Association, pp. 10–10.

[15] FELT, A. P., FINIFTER, M., WEINBERGER, J., AND WAGNER, D. Diesel: Applying privilege separation to database access. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security (New York, NY, USA, 2011), ASIACCS '11, ACM, pp. 416–422.

[16] FERRAIOLO, D. F., SANDHU, R., GAVRILA, S., KUHN, D. R., AND CHANDRAMOULI, R. Proposed NIST standard for role-based access control. ACM Trans. Inf. Syst. Secur. 4, 3 (Aug. 2001), 224–274.

[17] GANAPATHY, V., KING, D., JAEGER, T., AND JHA, S. Mining security-sensitive operations in legacy code using concept analysis. In Proceedings of the 29th International Conference on Software Engineering (Washington, DC, USA, 2007), ICSE '07, IEEE Computer Society, pp. 458–467.

[18] HORWITZ, S., REPS, T., AND BINKLEY, D. Interprocedural slicing using dependence graphs. In Proceedings of the ACM SIGPLAN 1988 Conference on Programming Language Design and Implementation (New York, NY, USA, 1988), PLDI '88, ACM, pp. 35–46.

[19] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In IN 2006 IEEE SYMPOSIUM ON SECURITY AND PRIVACY (2006), pp. 258–263.

[20] KRISHNAMURTHY, A., METTLER, A., AND WAGNER, D. Fine-grained privilege separation for web applications. In Proceedings of the 19th international conference on World wide web (New York, NY, USA, 2010), WWW '10, ACM, pp. 551–560.

[28] XIE, Y., AND AIKEN, A. Static detection of security vulnerabilities in scripting languages. In Proceedings of the 15th Conference on USENIX Security Symposium - Volume 15 (Berkeley, CA, USA, 2006), USENIX-SS'06, USENIX Association.

[29] YIP, A., WANG, X., ZELDOVICH, N., AND KAASHOEK, M. F. Improving application security with data flow assertions. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles (New York, NY, USA, 2009), SOSP '09, ACM, pp. 291–304.

### Appendix

**Table 6: Provided Annotations to MACE**

| Application   | Input Variables                                                                                                           | Role Values          |
|---------------|---------------------------------------------------------------------------------------------------------------------------|----------------------|
| phpns         | `$globalvars['rank']`, `$_COOKIE['cookie_auth']`, `$_SESSION['auth']`, `$_SESSION['username']`, `$_SESSION['userID']`, `$_SESSION['permissions']`, `$_SESSION['path']` | (dynamic)            |
| DCPPortal     | `$_COOKIE["dcp5_member_id"]`, `$_COOKIE["dcp5_member_admin"]`, `$HTTP_COOKIE_VARS["dcp5_member_admin"]`                  | (dynamic)            |
| DNScript      | `$_SESSION['admin']`, `$_SESSION['member']`                                                                               | 1 (for admin), 0 (non-admin) |
| myBloggie     | `$_SESSION['username']`, `$userid['level']`, `$_SESSION['user_id']`                                                        | 1 (for admin), 2 (for normal) |
| miniBloggie   | `$_SESSION['user']`                                                                                                       | -                    |
| SCARF         | `$_SESSION['privlege']`, `$_SESSION['user_id']`                                                                           | 'admin', 'user'      |
| WeBid         | `$_SESSION['WEBID_LOGGED_IN']`, `$user_data['groups']`, `$_SESSION['WEBID_ADMIN_USER']`, `$_SESSION['WEBID_ADMIN_IN']`, `$group['can_sell']`, `$group['auto_join']` | admin role flag, user groups have dynamic values |

[21] PARNO, B., MCCUNE, J. M., WENDLANDT, D., ANDERSEN, D. G., AND PERRIG, A. CLAMP: Practical prevention of large-scale data leaks. In Proceedings of the 2009 30th IEEE Symposium on Security and Privacy (Washington, DC, USA, 2009), SP '09, IEEE Computer Society, pp. 154–169.

[22] PELLEGRINO, G., AND BALZAROTTI, D. Toward black-box detection of logic flaws in web applications. In NDSS 2014, Network and Distributed System Security Symposium, 23-26 February 2014, San Diego, USA (San Diego, UNITED STATES, 02 2014).

[23] Ruby on Rails website. http://rubyonrails.org/, 2011.

[24] SON, S., MCKINLEY, K. S., AND SHMATIKOV, V. Rolecast: Finding missing security checks when you do not know what checks are. In Proceedings of the 2011 ACM international conference on Object oriented programming systems languages and applications (New York, NY, USA, 2011), OOPSLA '11, ACM, pp. 1069–1084.

[25] SRIVASTAVA, V., BOND, M. D., MCKINLEY, K. S., AND SHMATIKOV, V. A Security Policy Oracle: Detecting Security Holes using Multiple API Implementations. In PLDI'11: Proceedings of the 2011 ACM SIGPLAN Conference on Programming Language Design and Implementation (San Jose, CA, USA, 2011).

[26] SUN, F., XU, L., AND SU, Z. Static detection of access control vulnerabilities in web applications. In Proceedings of the 20th USENIX conference on Security (Berkeley, CA, USA, 2011), SEC'11, USENIX Association, pp. 11–11.

[27] TAN, L., ZHANG, X., MA, X., XIONG, W., AND ZHOU, Y. Autoises: Automatically inferring security specifications and detecting violations. In Proceedings of the 17th Conference on Security Symposium (Berkeley, CA, USA, 2008), SS'08, USENIX Association, pp. 379–394.