# QQ Version Downloads

- **Version 8.10.0**
  - Downloads: 2.8 billion
  - Last Updated: 30/7/19
- **Version 7.0.6**
  - Downloads: 7.9 billion
  - Last Updated: 26/7/19
- **Version 8.1.0**
  - Downloads: 9 billion
  - Last Updated: 30/7/19

## Broadcast Actions Triggered by User Interactions

- `TAOBAO_DELAY_START_LOGIN`
- `com.tencent.mm.plugin.openapi.Intent.ACTION_REFRESH_WXAPP`
- `com.tencent.mobileqq.msf.startmsf`

# Sina Weibo

- **Version 9.8.0**
  - Downloads: 2.3 billion
  - Last Updated: 31/7/19

## Broadcast Actions

- `sina.weibo.action.UPDATED`
- `com.sina.weibo.guardunion.NEW_DATA`
- `com.sina.weibo.photo.action.UPDATE_VIDEO_CONFIG`

# iQiyi

- **Version 10.7.0**
  - Downloads: 2.5 billion
  - Last Updated: 23/7/19

## Broadcast Actions

- `com.iqiyi.hotchat.user.login`
- `org.qiyi.video.module.action.REGISTRY`
- `com.aiqiyi.shortvideo.database`

# Youku

- **Version 8.0.5**
  - Downloads: 1.9 billion
  - Last Updated: 23/7/19

## Broadcast Actions

- `com.youku.service.download.ACTION_DOWNLOAD_SERVICE_CONNECTED`
- `com.youku.action.GET_INIT_DATA_SUCCESS`
- `com.youku.phone.home.loadfinish`

# NetEase Music

- **Version 6.3.0**
  - Downloads: 200 million

# Ctrip

- **Version 8.8.0**
  - Downloads: 330 million
  - Last Updated: 29/7/19, 30/7/19

## Broadcast Actions

- `com.netease.cloudmusic.action.UPDATE_CRASH_HANDLER_USERID`
- `com.netease.music.action.STAR_MUSIC`
- `ctrip.location.coordinate.success`

---

### Performance Overhead and Permission Adaptation

The introduction of new permissions to the Android system may bring additional performance overhead. As with previous permission updates, app developers will need to adapt their applications to these changes.

### Restricting the Number of Native Processes

According to our vulnerability analysis, an app can spawn an unlimited number of native processes, potentially starving system services or slowing down the entire system, leading to a system freeze or forced reboot. A straightforward and effective approach is to control the maximum number of native processes an app can spawn. This prevents the attack app from continuously occupying shared system resources or exhausting device computing resources.

Android already imposes limits on certain actions, such as the maximum number of Toasts (50) and active locks (50) an app can create. Our study, which involved randomly selecting 50 apps from the top 500 in Google Play, found that most apps have fewer than 10 native processes. Setting a reasonable threshold, such as 50, would be conservative and effective based on our defense experiments.

### Implementation

Android uses `SetRLimits()`, based on Linux's `setrlimit()`, to impose limits on the number of processes an app can have. The limit varies across different versions and models. For example, the limits are 14,096 in Android 7.1, 22,097 in Android 8.1, and 21,552 in Android 9.0. These limits are much larger than the number required for an attack. By configuring the parameters of this function, we can provide a tighter and more reasonable limit.

Compared to permission-based solutions, restricting the number of processes brings minimal burden to the Android system and requires no specific adaptation from app developers or users. However, the exact limit number may require cautious confirmation.

### Related Work

#### Android DoS Attacks

Researchers have explored various vulnerabilities in the Android system to launch Denial of Service (DoS) attacks. Attack points can be categorized into two layers: the Android framework layer and the native layer. Examples include exploiting input validation, inconsistent security enforcement, and design flaws in system services. Other attacks involve forcing process aborts and triggering system reboots via IPC flooding, JNI Global Reference exhaustion, and Toasts flooding.

#### Analysis

The open-source nature of Android allows for static source code analysis, which has been used to detect component hijacking vulnerabilities, identify security and privacy issues, and reveal capability leaks. Tools like FlowDroid, Amandroid, and EPICC have been developed for static taint analysis, determining points-to information, and inter-component communication mapping.

### Conclusion

This work reveals a new vulnerability in Android versions 4.2 to 9.0 due to weak management of native processes. Exploiting this vulnerability, we designed an integrated analyzing and testing tool, NativeX, to identify risky Android commands, construct Proof of Concept (PoC) apps, and verify their effectiveness. We quantitatively measured the attack consequences, including device temperature surge, battery degeneration, and computing performance decrease. We also presented three representative attacks and discussed defense approaches.

### Acknowledgment

This work was supported by the National Natural Science Foundation of China (NSFC projects U1836113 and U1836117).

### References

[References listed as provided, with proper formatting and citations]

---

This revised version aims to provide a clear, coherent, and professional presentation of the information.