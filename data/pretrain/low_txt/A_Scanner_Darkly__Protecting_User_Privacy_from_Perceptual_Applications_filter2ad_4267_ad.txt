### References
- QR Decoder: <https://github.com/josephholsten/libdecodeqr>
- Background Subtraction Using OpenCV: <http://theembeddedsystems.blogspot.com/2011/05/background-subtraction-using-opencv.html>
- Face Detection Followed by Eye and Nose Detection: <http://opencvfacedetect.blogspot.com/2010/10/face-detectionfollowed-by-eyesnose.html>
- Cognotics Servo 2007 Series: <http://www.cognotics.com/opencv/servo_2007_series/index.html>
- Drawing Histograms in OpenCV: <http://www.aishack.in/2010/07/drawing-histograms-in-opencv/>
- OpenCV Histogram Documentation: <http://opencv.willowgarage.com/documentation/cpp/histograms.html>
- Squares Example (C): <https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/c/squares.c?rev=27>
- Morphology Example (C): <https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/c/morphology.c?rev=27>
- Demhist Example (C): <https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/c/demhist.c?rev=1429>
- OpenCV Tutorial 1: <http://dasl.mem.drexel.edu/~noahKuntz/openCVTut1.html>
- Adding Two Images in OpenCV: <http://silveiraneto.net/2009/12/08/opencv-adding-two-images/>
- OpenCV Tutorial 6: <http://dasl.mem.drexel.edu/~noahKuntz/openCVTut6.html>
- Fast Match Template: <http://opencv.willowgarage.com/wiki/FastMatchTemplate?action=AttachFile&do=view&target=FastMatchTemplate.tar.gz>
- Corner Detection in OpenCV: <http://www.aishack.in/2010/05/corner-detection-in-opencv/>
- Hand Detection Example: <http://code.google.com/p/wpi-rbe595-2011-machineshop/source/browse/trunk/handdetection.cpp>
- Laplace Edge Detector (C): <https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/c/laplace.c?rev=27>
- Fit Ellipse (C): <https://code.ros.org/trac/opencv/browser/trunk/opencv/samples/c/fitellipse.c?rev=1429>

### Table II: Benchmark OpenCV Applications

#### Performance
Performance is a critical factor for perceptual applications that process visual data. If the overhead of privacy protection significantly reduces frame rates, the applications become unusable. Figure 10 illustrates that the performance overhead of DARKLY is minimal and, in most cases, imperceptible to human users. The effect of a given privacy transform depends on the setting of the privacy dial, also known as the privacy level. For example, sketching, the transform used for the `cvFindContours` declassifier, applies varying amounts of blurring before finding contours. Figure 11 shows that the performance variation of the security camera application at different privacy levels is minimal (within 3%). Interestingly, performance does not change monotonically with the privacy level because the OpenCV function used by the sketching transform switches algorithms based on the parameters.

#### Tradeoffs Between Privacy and Utility
Table III indicates that for most applications, there is no change in functionality or loss of accuracy even at the maximum privacy setting.

| Application                    | LoC Modified | Information Accessed            | Change in Functionality |
|--------------------------------|--------------|---------------------------------|-------------------------|
| QR Decoder                     | 19           | Contours, thresholded image     | Works only at privacy level 0* |
| Face Recognizer                | 0            | No change                       | No change               |
| OCR                            | 0            | No change                       | No change               |
| Template Matcher               | 0            | No change                       | No change               |
| Security Cam                   | 0            | See Fig. 12                     | No change**             |
| Facial Features Detector       | 0            | See Fig. 12                     | No change**             |
| Square Detector                | 0            | No change                       | No change               |
| Ellipse Fitter                 | 0            | No change                       | No change               |
| Intensity/Contrast Changer     | 0            | No change                       | No change               |
| Ball Tracker                   | 0            | See Fig. 12                     | No change**             |
| PrivVideo                      | 0            | See Fig. 12                     | No change**             |
| Morphological Transformer     | 0            | No change                       | No change               |
| H-S Histogram Backprojector    | 0            | No change                       | No change               |
| Laplace Edge Detector          | 0            | No change                       | No change               |
| RGB Histogram Calculator       | 0            | No change                       | No change               |
| H-S Histogram Calculator       | 0            | No change                       | No change               |
| Hand Detector                  | 0            | No change                       | No change               |
| Corner Finder                  | 0            | No change                       | No change               |
| Image Adder                    | 0            | No change                       | No change               |
| Downsampler + Canny Edge Detector | 0         | No change                       | No change               |

* Even at level 0, privacy from the QR decoder is protected by the thresholding binary transform.
** Feature detection is performed on privacy-transformed faces (Section VII-B).

### Evaluation of DARKLY on OpenCV Applications

Figure 10: Frame rates with and without DARKLY.

The reason these applications do not access raw images and can operate solely on opaque references. One application, the QR decoder, works correctly at privacy level 0 but not at higher settings. Even at privacy level 0, significant protection is provided by the thresholding binary transform (see Fig. 7). For the remaining applications, the tradeoff between their accuracy and user-selected privacy level is shown in Fig. 12.

Figure 11: Frame rate of the security-camera application as a function of the privacy level. At levels above 4, OpenCV switches from directly calculating the convolution to a DFT-based algorithm optimized for larger kernels. Furthermore, as privacy level increases, smaller motions are not detected, and the application has to process fewer motions.

### Support for Other OpenCV Applications
We found 281 GitHub projects mentioning "vision," "applications," and "OpenCV." After filtering out empty projects and clones with the same name and codebase, the set was reduced to 77 projects. A simple search for "OpenCV" returns different parts of the OpenCV library itself and does not work for finding OpenCV applications.

Figure 12: Tradeoff between accuracy and user-selected privacy level for various applications.