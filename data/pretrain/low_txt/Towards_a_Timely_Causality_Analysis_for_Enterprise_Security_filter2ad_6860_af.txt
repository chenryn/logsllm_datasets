### Optimized Text

#### Low-Fanout Step in Web Server Compromise
A low-fanout step is essential when a web server is compromised. Our approach can efficiently identify attack-related edges among thousands of benign edges. Since the entire attack footprint is logically connected, uncovering any part can help analysts identify other parts. Even in the worst-case scenario, where fast-tracking an event with low fanout does not expose any attack traces, only a minor delay will be incurred in investigating other complex causalities. Conversely, processing benign dependencies with high fanout (up to tens of thousands) can be time-consuming, potentially preventing the detection of attack traces before the analysis deadline.

#### Evasion Using Low-Fanout Events
An attacker may attempt to evade detection by intentionally filling the priority queue with numerous benign low-fanout events to conceal subsequent attack steps. However, due to the low-fanout constraint, the attacker must create a sufficiently long chain of such events, which itself is a highly suspicious topological pattern. As a result, our technique significantly raises the bar for potential attacks.

#### Slow Attack
A slow attacker poses a general challenge for all causality tracking systems but may also risk being detected even before causing serious damage, as defenders can take advantage of the extended time window.

Our work provides a general framework that prioritizes abnormal activities for timely security causality analysis. This framework can incorporate multi-hop dependency-based attack patterns or user-defined priority scores tailored to specific environments and security requirements.

#### Distributed Causality Tracker
The construction of causality graphs can be parallelized using distributed computing. Each branch to be explored can be processed separately, with different priorities assigned to different branches, and corresponding computing resources allocated. Dependencies on each host can also be pre-computed in parallel, making cross-host tracking the concatenation of multiple generated graphs. However, the massive and pervasive dependencies among system events pose significant challenges to parallel processing, making distributed causality tracking an interesting research direction that requires substantial effort.

In this work, we do not enable distributed computation in our causality tracking. Instead, we retrieve audit logs from multiple hosts, store them in a centralized database, and perform causality analysis centrally. This approach generates a single holistic graph to demonstrate an attack sequence, even if the attack spans multiple hosts. Cross-host tracking is conducted on-demand: it starts building dependencies on a receiver machine only if a communication channel from a sender machine is discovered.

We emphasize that the primary focus of our work is enabling priority-based search in causality tracking, which is independent of the underlying computing paradigms of the tracking systems.

### Related Work

#### Causality Analysis
Numerous research efforts have been made to reconstruct OS-level system dependencies for security purposes. King and Chen [4] first proposed building a dependency graph based on OS-level system events to capture attack sequences and provenances. King et al. [5] further improved dependency analysis by enabling cross-host tracking and forwardly tracking attack consequences. Chow et al. [33] used taint analysis to understand the lifetime of sensitive data. Taser [10] performed taint tracking to find files affected by past attacks. Retro [11] recorded an action history graph to repair a desktop or server after an adversary compromises it. Jiang et al. [34] enabled provenance-aware tracing of worm break-ins and contaminations. Muniswamy-Reddy et al. [35] designed a provenance collection structure to integrate provenance across multiple levels of abstraction. Krishnan et al. [36] provided a forensic platform that transparently monitors and records data access events using hypervisor abstractions. Hi-Fi [37] presented a kernel-level provenance system that collects high-fidelity whole-system provenance. Ma et al. [8] proposed a Windows-based audit logging technique featuring accuracy and low cost.

Further studies have aimed to mitigate the dependency explosion problem by reducing data volume and performing fine-grained causality tracking. BEEP [6] identified event handling loops in long-running programs to enable selective logging for unit boundaries and dependencies. LogGC [7] proposed an audit logging system with garbage collection capability. ProTracer [9] presented a lightweight provenance tracing system that alternates between logging and taint tracking. Xu et al. [38] attempted to reduce the number of log entries while preserving high-fidelity causal dependencies.

Recent research [28], [39] has enabled enterprise-level causality analysis, such as data loss prevention, by modifying the underlying operating system. It introduces Linux Provenance Modules to produce fine-grained provenance information and mitigates dependency explosion using SELinux information flow analysis.

Compared to prior work, PRIOTRACKER takes the first step in prioritizing the investigation of abnormal dependencies during the construction of the causality graph. This allows subsequent causality tracking to reveal more unusual activities before a critical security analysis deadline. In contrast, previous work did not innovate new algorithms for attack graph construction but followed the original work [4], [5] to generate causality graphs by simply traversing all nodes (both normal and abnormal). PRIOTRACKER focuses on improving the underlying graph generation algorithm, making it orthogonal to prior research.

#### Priority-Based Security Analysis
Priority-based methods have been widely used in security analyses. Previous efforts have expedited static data-flow analysis [13], symbolic execution [14]–[16], fuzzing [17], and digital forensics [18], [19]. To prioritize certain tasks, these studies have measured the priority of low-level constructs, including functions, code paths, program inputs, or user-level entities such as textual documents and physical devices.

In contrast, we enable priority-based analysis in the specific domain of causality tracking. Therefore, we had to develop a unique technique to quantify priority in OS-level dependency tracking.

### Conclusion
In this paper, we propose PRIOTRACKER, a backward and forward causality tracker that automatically prioritizes the investigation of abnormal causal dependencies for enterprise security. Specifically, to assess the priority of a system event, we consider its rareness and topological features in the causality graph. We distinguish unusual operations from normal system events by quantifying the rareness of each event using a reference model that records common routine activities in corporate computer systems. We implemented PRIOTRACKER in 20K lines of Java code and a reference model builder in 10K lines of Java code. We evaluated our tool by deploying both systems in a real enterprise IT environment consisting of 150 machines. Experimental results show that PRIOTRACKER can capture attack traces missed by existing trackers and reduce analysis time by up to two orders of magnitude.

### Acknowledgment
We would like to thank anonymous reviewers and our shepherd, Prof. Adam Bates, for their feedback in finalizing this paper. Prateek Mittal and Yushan Liu were partially supported by the National Science Foundation Grants CNS-1553437, CIF-1617286, and CNS-1409415, and the Yan Huo *94 Graduate Fellowship. Any opinions, findings, and conclusions made in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References
[1] "Data breaches," http://www.idtheftcenter.org/Data-Breaches/data-breaches.html, 2016.
[2] C. Staff, "Target: 40 million credit cards compromised," http://money.cnn.com/2013/12/18/news/companies/target-credit-card/, 2013.
[3] R. Sidel, "Home depot’s 56 million card breach bigger than target’s," http://www.wsj.com/articles/home-depot-breach-bigger-than-targets-1411073571, 2014.
[4] S. T. King and P. M. Chen, "Backtracking Intrusions," in Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, ser. SOSP'03, 2003.
[5] S. King, Z. M. Mao, D. C. Lucchetti, and P. M. Chen, "Enriching Intrusion Alerts Through Multi-Host Causality," in Proceedings of the 2005 Network and Distributed Systems Security Symposium, ser. NDSS'05, 2005.
[6] K. H. Lee, X. Zhang, and D. Xu, "High Accuracy Attack Provenance via Binary-based Execution Partition," in Proceedings of the 2013 Network and Distributed Systems Security Symposium, ser. NDSS'13, 2013.
[7] ——, "Loggc: garbage collecting audit log," in Proceedings of the 2013 ACM SIGSAC conference on Computer and Communications Security, ser. CCS'13, 2013.
[8] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu, "Accurate, Low Cost and Instrumentation-Free Security Audit Logging for Windows," in Proceedings of the 31st Annual Computer Security Applications Conference, ser. ACSAC'15, 2015.
[9] S. Ma, X. Zhang, and D. Xu, "Protracer: Towards practical provenance tracing by alternating between logging and tainting." in Proceedings of the 2016 Network and Distributed Systems Security Symposium, ser. NDSS'16, 2016.
[10] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara, "The Taser Intrusion Recovery System," in Proceedings of the Twentieth ACM Symposium on Operating Systems Principles, ser. SOSP'05, 2005.
[11] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, "Intrusion recovery using selective re-execution," in Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI'10, 2010.
[12] "2015 cost of cyber crime study: United states," http://www.ponemon.org/blog/2015-cost-of-cyber-crime-united-states, 2015.
[13] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weisman, "Taj: Effective taint analysis of web applications," in Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI '09, 2009.
[14] V. Chipounov, V. Kuznetsov, and G. Candea, "S2e: A platform for in-vivo multi-path analysis of software systems," in Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS XVI, 2011.
[15] C. Cadar, D. Dunbar, and D. Engler, "Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs," in Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI'08, 2008.
[16] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, "Unleashing mayhem on binary code," in Proceedings of the 2012 IEEE Symposium on Security and Privacy, ser. SP '12, 2012.
[17] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna, "Driller: Augmenting fuzzing through selective symbolic execution," in 23nd Annual Network and Distributed System Security Symposium, NDSS 2016, San Diego, California, USA, February 21-24, 2016, 2016.
[18] R. Bert, F. Marturana, G. Me, and S. Tacconi, "Data mining based crime-dependent triage in digital forensics analysis," in Proceedings of 2012 International Conference on Affective Computing and Intelligent Interaction, 2012.
[19] N. L. Beebe and L. Liu, "Ranking algorithms for digital forensic string search hits," Digit. Investig., 2014.
[20] M. N. Hossain, S. M. Milajerdi, J. Wang, B. Eshete, R. Gjomemo, R. Sekar, S. Stoller, and V. Venkatakrishnan, "Sleuth: Real-time attack scenario reconstruction from COTS audit data," 2017.
[21] "The seven largest insider-caused data breaches of 2014," http://www.eweek.com/security/the-seven-largest-insider-caused-data-breaches-of-2014, 2014.
[22] "Indian call centers selling U.K.’s secrets," http://www.siliconindia.com/shownews/Indian-call-centers-selling-UKs-secrets-nid-28560-cid-2.html, 2005.
[23] "Understanding the insider threat," https://supportforums.cisco.com/blog/150466/understanding-insider-threat, 2016.
[24] "Incident response - time is of the essence," https://www.scmagazineuk.com/incident-response--time-is-of-the-essence/article/534765/, 2015.
[25] Z. Xu, Z. Wu, Z. Li, K. Jee, J. Rhee, X. Xiao, F. Xu, H. Wang, and G. Jiang, "High fidelity data reduction for big data security dependency analyses," in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS '16, 2016.
[26] "The Linux audit framework," https://www.suse.com/documentation/sled10/audit-sp1/data/book-sle-audit.html, 2016.
[27] "ETW events in the common language runtime," https://msdn.microsoft.com/en-us/library/ff357719(v=vs.110).aspx, 2016.
[28] A. M. Bates, D. Tian, K. R. Butler, and T. Moyer, "Trustworthy whole-system provenance for the Linux kernel." in USENIX Security Symposium, pp. 319–334.
[29] S. J. Russell and P. Norvig, Artificial Intelligence: A Modern Approach, 2003.
[30] "A persistent key-value store for fast storage environments," http://rocksdb.org/, 2016.
[31] T. Chen, L.-A. Tang, Y. Sun, Z. Chen, H. Chen, and G. Jiang, "Integrating Community and Role Detection in Information Networks," in Proceedings of 2016 SIAM International Conference on Data Mining (SDM'16), 2016.
[32] "Persistent netcat backdoor," https://www.offensive-security.com/metasploit-unleashed/persistent-netcat-backdoor/, 2017.
[33] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and M. Rosenblum, "Understanding data lifetime via whole system simulation," in Proceedings of the 13th Conference on USENIX Security Symposium - Volume 13, 2004.
[34] X. Jiang, A. Walters, F. Buchholz, D. Xu, Y.-M. Wang, and E. H. Spafford, "Provenance-Aware Tracing of Worm Break-in and Contaminations: A Process Coloring Approach," in Proceedings of IEEE ICDCS06, 2006.
[35] K.-K. Muniswamy-Reddy, U. Braun, D. A. Holland, P. Macko, D. Maclean, D. Margo, M. Seltzer, and R. Smogor, "Layering in provenance systems," in Proceedings of the 2009 Conference on USENIX Annual Technical Conference, ser. USENIX'09, 2009.
[36] S. Krishnan, K. Z. Snow, and F. Monrose, "Trail of bytes: Efficient support for forensic analysis," in Proceedings of the 17th ACM Conference on Computer and Communications Security, ser. CCS '10, 2010.
[37] D. J. Pohly, S. McLaughlin, P. McDaniel, and K. Butler, "Hi-Fi: Collecting high-fidelity whole-system provenance," in Proceedings of the 28th Annual Computer Security Applications Conference, ser. ACSAC '12, 2012.
[38] Z. Xu, Z. Wu, Z. Li, K. Jee, J. Rhee, X. Xiao, F. Xu, H. Wang, and G. Jiang, "High fidelity data reduction for big data security dependency analyses," in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS '16, 2016.
[39] A. Bates, D. J. Tian, G. Hernandez, T. Moyer, K. R. Butler, and T. Jaeger, "Taming the costs of trustworthy provenance through policy reduction," ACM Transactions on Internet Technology (TOIT), vol. 17, no. 4, p. 34, 2017.