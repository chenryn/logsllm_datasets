### 优化后的文本

对于每个可疑的函数指针，我们使用一个包含“FUNCPTR”（表示此元组与函数指针相关）、函数指针字段名称和数据结构名称的元组。为了区分不同已知驱动程序被挂钩的情况，我们将数据结构名称（如“nt! DRIVER_OBJECT”）替换为驱动程序名称（例如，“\Driver\disk”）。对于每个代码钩子，我们使用一个包含“CODEHOOK”、模块名称、函数名称、偏移量以及被修改的字节数的元组。对于隐藏的模块或进程，我们简单地使用“HIDDEN MODULE”或“HIDDEN PROCESS”元组。其他行为也类似处理。需要注意的是，我们特意避免包括任何容易被恶意软件修改的名称或值（例如，恶意驱动程序的名称或隐藏模块的名称）。每个样本足迹中的元组都经过排序，以便于比较两个样本的签名。如果两个样本具有相同的足迹，我们将它们分配到同一个簇中。这将89,474个样本映射到了414个簇中，簇的大小从1到30,411不等。共有272个簇至少包含两个样本。图10展示了簇大小的分布情况。

为了了解一个簇中的所有样本是否使用了单一的内核驱动程序，我们统计了每个簇中加载的不同大小驱动程序的数量（见图11）。共有209个簇至少有两个不同大小的驱动程序加载。这表明不同的恶意内核驱动程序可能表现出相同的MAS足迹。因此，我们可以潜在地利用MAS的足迹来自动检测新的恶意软件样本。我们将这一方法的研究留待未来工作。

### 第九节：崩溃转储研究

在本节中，我们报告了使用MAS在真实世界的崩溃转储中检测内核Rootkit的经验。由于从收集崩溃转储的终端用户机器上获取的信任代码白名单并不完整，我们无法完全自动化Rootkit检测过程。然而，我们可以利用内核恶意软件研究的结果，在手动检查之前识别出可疑的崩溃转储。

从表2可以看出，Rootkit最常见的三种行为是挂钩函数指针、隐藏模块和放置代码钩子。由于MAS报告的许多可疑函数指针指向不在白名单上的良性第三方驱动程序，仅凭存在可疑函数指针并不能有效识别可疑崩溃转储。对于同时挂钩函数指针并隐藏模块的Rootkit，被挂钩的函数指针通常不会指向已加载的模块，而是指向池块、隐藏模块或其他内存区域。我们利用这一观察结果忽略指向已加载模块的目标函数指针。我们意识到这可能导致我们错过非隐蔽的内核恶意软件，这些恶意软件只是安装了一个驱动程序。为了处理这种情况，我们需要扩大白名单或进行更多的手动分析。我们还忽略了那些目标看起来不是函数开头的函数指针，因为它们不能可靠地区分有缺陷的Rootkit和内存损坏。在我们的研究中，我们使用这些条件进行了初步过滤以识别可疑转储。这一初步过滤是自动完成的。

对于11个Windows Vista SP1崩溃转储，我们在初步过滤后发现其中7个是可疑的。我们的手动调查确认了5个转储包含Rootkit（例如，挂钩多个驱动程序的派遣例程，隐藏其自身驱动程序）。另外两个是良性的，因为代码钩子是由两个反病毒系统放置的。每个系统都挂钩了一个非常频繁调用的函数，分别是KiFastCallEntry和SwapContext。我们得出结论，如果代码钩子的目标位于模块中，并且互联网搜索结果显示该模块属于反病毒供应商，则该代码钩子是由反病毒软件放置的。

对于837个Windows 7崩溃转储，我们在初步过滤后发现了177个可疑转储。我们快速验证了85个包含隐藏模块的转储均被内核Rootkit感染。在剩下的92个崩溃转储中，82个转储仅包含代码钩子，而其余10个转储包含不指向已加载模块的可疑函数指针。我们手动分析了这10个转储，发现其中有5个包含Rootkit，另外5个则有损坏的全局函数表，使其通过了初步过滤。我们无法确定这些损坏是由Rootkit还是内核错误引起的。82个仅包含代码钩子的转储中有37种不同的钩子模式。对于每种钩子模式，我们选择了一个转储并手动检查了MAS的报告。令人惊讶的是，所有代码钩子似乎都是由反病毒软件放置的。

总之，通过上述过程，我们能够迅速识别出5个Windows Vista SP1崩溃转储和90个Windows 7崩溃转储包含内核Rootkit。本节描述的所有手动检查总共花费的时间不到一个小时。这表明MAS是一种有效的工具，可以在现实系统中识别Rootkit足迹。

### 第十节：相关工作

MAS并不是第一个试图在内存快照中识别内核Rootkit足迹的系统，但它是一个高精度、鲁棒性和性能的实际系统。

我们的工作受到了KOP [3] 的启发。虽然KOP是第一个以内存覆盖率非常高的方式对内核内存快照进行类型化动态数据的系统，但它的鲁棒性和性能不足。我们的评估显示，MAS在静态分析和内存遍历方面比KOP快一个数量级。更重要的是，在分析运行Windows Vista SP1的真实世界崩溃转储时，我们没有发现MAS输出中的任何错误。相比之下，KOP报告的多达40%的函数指针似乎是错误的。

内核完整性检查已经在大量工作中进行了研究。SBCFI [19] 和Gibraltar [2] 都利用类型定义和手动注释来遍历内存并检查函数指针。由于无法处理通用指针 [3]，这两种方法在数据覆盖率上都有所欠缺。最近的一个系统OSck [7] 通过检测内核数据的修改来发现内核Rootkit。OSck不是通过内存遍历来识别内核数据及其类型，而是利用Linux中使用的slab分配方案。它提供了按类型分配的功能，并直接识别内核数据类型。然而，slab分配器在Windows操作系统中不可用，这使得OSck在Windows上不太有用。这个问题无法通过池标签与数据类型的映射解决，因为这不是一对一的映射。更糟糕的是，一个池标签可能对应多种类型，而且几个数据结构可能存储在一个池块中。

MAS利用源代码和程序定义的类型来识别动态数据及其类型。其他一些系统试图在没有源代码和类型定义的情况下解决这个问题。Laika [4] 使用贝叶斯无监督学习来推断数据结构及其实例。REWARDs [11] 在运行时识别作为已知API参数传递的动态数据及其类型。TIE [10] 基于类型重构理论从二进制程序中逆向工程数据类型抽象，并不限于单次执行跟踪。这些逆向工程工具在分析小到中规模程序时更为有效，但在分析像Windows内核这样的大规模程序时效果较差。MAS和KOP都表明，源代码对于实现高数据覆盖率至关重要。

WhatsAt [20] 是一种用于动态堆类型推断的工具。它利用调试符号中嵌入的类型信息，并尝试通过检查类型约束为每个堆块分配兼容的程序定义类型。如果某个块无法类型化，WhatsAt将其视为堆损坏和类型安全违规的提示。WhatsAt与MAS的主要区别在于，WhatsAt无法扩展到像Windows内核这样的大型程序。

MAS利用一种新的需求驱动指针分析算法，为大规模C/C++程序中的通用指针提供精确且快速的类型候选识别。需求驱动分析的核心思想是将指针分析问题转化为上下文无关语言（CFL）可达性问题，这是先前工作 [21, 24, 23, 27] 中探索的概念。在 [21] 中，Reps首次引入了将程序分析问题转化为图可达性问题的概念。在 [24] 中，Sridharan等人将这一想法应用于Java的需求驱动点到分析。在 [23] 中，Sridharan和Bodik提出了Java的需求驱动上下文敏感分析的细化算法。在 [27] 中，Zheng和Rugina描述了一种针对C的需求驱动别名分析算法。我们采用了他们的算法并扩展了对字段敏感的支持。我们还以类似于 [23] 的方式实现了上下文敏感性。在 [3] 中，Carbone等人扩展了 [6] 中提出的算法，使其具有上下文和字段敏感性。MAS相比KOP的关键优势在于，MAS的静态分析可以并行运行。

MAS通过对内存快照的分析来研究内核Rootkit的行为。其他一些系统 [9, 22, 26] 也使用基于虚拟化的动态跟踪技术来达到相同目的。软定时器攻击 [25] 可以通过MAS检测到，因为恶意软件注入的回调函数指针始终存在于内存中，并且有可能被MAS检测到。

### 第十一节：限制

MAS面临的一个关键限制是，熟悉MAS设计的攻击者可以通过操纵内核内存来破坏MAS的内存遍历。MAS在添加新数据对象之前会检查几个约束（参见第4节）。如果攻击者能够在数据结构中找到一些指针或枚举字段，这些字段可以取任意值而不导致操作系统崩溃，那么他可能会通过更改这些字段来违反指针或枚举约束，从而误导MAS拒绝此类数据结构的实例。这一限制的影响尚不清楚，因为我们不知道是否存在这样的数据结构。即使存在这样的数据结构，也不清楚它们是否会影响安全敏感数据（如被挂钩的函数指针）的识别。

MAS的另一个限制源于Windows现有的实现。目前，攻击者可以在不导致Windows崩溃的情况下修改池块的标签，从而误导MAS。然而，如果池管理器在释放池块时检查池块的标签是否与作为函数参数传递的预期池标签匹配，这一限制就可以消除。

### 第十二节：结论

我们介绍了MAS，这是一种实用的内存分析系统，可以准确且快速地识别Rootkit的内存足迹。我们将MAS应用于分析从终端用户机器收集的848个崩溃转储和从主要反病毒供应商获得的154,768个潜在恶意软件样本。实验表明，MAS能够在典型的30至160秒内分析所有内存快照，并具有接近完美的准确性。借助MAS，我们能够迅速识别出95个包含Rootkit的崩溃转储。我们的内核恶意软件研究表明，Rootkit挂钩了31个不同数据结构中的191个不同函数指针。此外，它还表明许多恶意软件样本安装了不同的内核驱动程序，但具有相同的内存足迹，这暗示了未来可以利用内存足迹自动检测新的恶意软件样本的研究方向。

### 致谢

我们要感谢匿名评审员提供的宝贵反馈。我们非常感谢许多同事在整个MAS开发过程中提供的有价值的反馈、建议和帮助：Alex Moshchuk、Anil Francis Thomas、Barry Bond、Bryan Parno、Chris Hawblitzel、David Molnar、Dennis Batchelder、Eddy Hsia、Galen Hunt、Gloria Mainar-Ruiz、Helen Wang、Jay Stokes、Jeffrey Chung、Jen-Lung Chiu、Jim Jernigan、Pat Winkler、Randy Treit、Reuben Olinsky、Rich Draves、Ryan Kivett、Scott Lambert、Tim Shoultz、YongKang Zhu。

### 参考文献

[1] The Alureon rootkit. Alureon. http://en.wikipedia.org/wiki/

[2] BALIGA, A., GANAPATHY, V., AND IFTODE, L. Automatic inference and enforcement of kernel data structure invariants. In Proceedings of the 24th Annual Computer Security Applications Conference (2008).

[3] CARBONE, M., CUI, W., LU, L., LEE, W., PEINADO, M., AND JIANG, X. Mapping kernel objects to enable systematic integrity checking. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS) (November 2009).

[4] COZZIE, A., STRATTON, F., XUE, H., AND KING, S. T. Digging for data structures. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation (Berkeley, CA, USA, 2008), OSDI’08, USENIX Association, pp. 255–266.

[5] DINABURG, A., ROYAL, P., SHARIF, M., AND LEE, W. Ether: Malware analysis via hardware virtualization extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS 2008) (October 2008).

[6] HEINTZE, N., AND TARDIEU, O. Ultra-fast aliasing analysis using CLA - a million lines of C code in a second. In SIGPLAN Conference on Programming Language Design and Implementation (2001).

[7] HOFMANN, O. S., DUNN, A. M., KIM, S., ROY, I., AND WITCHEL, E. Ensuring operating system kernel integrity with OSck. In Proceedings of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2011), ASPLOS ’11, ACM, pp. 279–290.

[8] KOLBITSCH, C., KIRDA, E., AND KRUEGEL, C. The power of procrastination: Detection and mitigation of execution-stalling malicious code. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS 2011) (October 2011).

[9] LANZI, A., SHARIF, M., AND LEE, W. K-tracer: A system for extracting kernel malware behavior. In Proceedings of the 16th Annual Network and Distributed System Security Symposium (2009).

[10] LEE, J., AVGERINOS, T., AND BRUMLEY, D. TIE: Principled reverse engineering of types in binary programs. In Proceedings of the 18th Annual Network and Distributed System Security Symposium (Feb. 2011), pp. 251–268.

[11] LIN, Z., ZHANG, X., AND XU, D. Automatic reverse engineering of data structures from binary execution. In Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS’10) (San Diego, CA, February 2010).

[12] MICROSOFT. Debug interface access SDK. http://msdn.microsoft.com/en-us/library/x93ctkx8(VS.71).aspx.

[13] MICROSOFT. Debugging Tools for Windows. http://www.microsoft.com/whdc/devtools/debugging/default.mspx.

[14] MICROSOFT. PREfast. http://msdn.microsoft.com/en-us/library/ff550543(v=vs.85).aspx.

[15] MICROSOFT. Symbols and symbol files. http://msdn.microsoft.com/en-us/library/windows/hardware/ff558825(v=vs.85).aspx.

[16] MICROSOFT. Windows driver kit. http://msdn.microsoft.com/en-us/windows/hardware/gg487428.aspx.

[17] MICROSOFT. Windows HPC Server 2008 R2. http://www.microsoft.com/hpc.

[18] MICROSOFT. Windows kernel pool tags. http://msdn.microsoft.com/en-us/windows/hardware/gg463213.aspx.

[19] NICK L. PETRONI, J., AND HICKS, M. Automated detection of persistent kernel control-flow attacks. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS) (October 2007).

[20] POLISHCHUK, M., LIBLIT, B., AND SCHULZE, C. W. Dynamic heap type inference for program understanding and debugging. In Proceedings of the 34th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (New York, NY, USA, 2007), POPL ’07, ACM, pp. 39–46.

[21] REPS, T. Program analysis via graph reachability. In Proceedings of the 1997 International Logic Programming Symposium (October 1997).

[22] RILEY, R., JIANG, X., AND XU, D. Multi-aspect profiling of kernel rootkit behavior. In Proceedings of the 4th ACM SIGOPS/EuroSys Conference on Computer Systems (April 2009).

[23] SRIDHARAN, M., AND BODIK, R. Refinement-based context-sensitive points-to analysis for Java. In Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI) (June 2006).

[24] SRIDHARAN, M., GOPAN, D., SHAN, L., AND BODIK, R. Demand-driven points-to analysis for Java. In Proceedings of the 20th ACM SIGPLAN Conference on Object-Oriented Programming, Systems Languanges, and Applications (OOPSLA) (October 2005).

[25] WEI, J., PAYNE, B. D., GIFFIN, J., AND PU, C. Soft-timer driven transient kernel control flow attacks and defense. In Proceedings of the 24th Annual Computer Security Applications Conference (ACSAC 2008) (December 2008).

[26] YIN, H., SONG, D., MANUEL, E., KRUEGEL, C., AND KIRDA, E. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS’07) (October 2007).

[27] ZHENG, X., AND RUGINA, R. Demand-driven alias analysis for C. In Proceedings of the 35th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL) (January 2008).