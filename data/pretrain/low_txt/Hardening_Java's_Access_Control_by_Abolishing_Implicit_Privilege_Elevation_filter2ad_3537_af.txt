### Possible Design Improvements in Java's Access Control

In the specific case of Java, if our evaluation had been conducted earlier, there might have been an opportunity to design a more fine-grained policy system from the outset. This would have allowed all current use cases without resorting to implicit privilege elevation.

### Proper Documentation of Trade-offs Between Security and Performance

The design and implementation of software are shaped by both functional and non-functional requirements. Often, trade-offs are necessary due to conflicting requirements, and security-related functionality does not always take precedence. While functional requirements are typically well-documented, it is less common to thoroughly document how these trade-offs influenced the design and implementation of complex software.

In the case of shortcuts in Java’s access control mechanisms, we were required to conduct manual reviews, functional tests, and consultations with Oracle representatives to confirm that one reason for introducing these shortcuts was performance optimization. Consequently, performance-related trade-offs in long-lived systems should be meticulously documented, as performance constraints evolve over time, and many optimizations become obsolete eventually.

### Regular Revaluation of Performance Trade-offs

The essence of a trade-off is to balance a negative impact with a positive impact of similar or greater value. If the desired positive impact is improved performance and ease of use, and the negative impacts include an increased attack surface and decreased maintainability, then this trade-off changes as performance gains diminish with runtime optimizations. Therefore, regular revaluation of performance-related trade-offs should be an integral part of the maintenance process for any long-lived system.

### Related Work

#### Java Security Model
Aside from Li Gong’s extensive work on the Java security model [2, 15, 27], several researchers have analyzed, extended, or challenged the model. We present work focused on optimizing the access-control process and exploring alternatives to stack-based access control.

- **Fournet and Gordon** [28] provide a comprehensive theoretical model for stack-based access control, highlighting its limitations. However, their model does not account for shortcuts, which can invalidate the guarantees achieved.
  
- **Herzog et al.** [29] analyzed the performance of the `SecurityManager` in Java and provided guidance on efficient usage, but they did not address shortcuts.

#### Optimization of Java Stack Inspection
Several approaches aim to optimize Java stack inspection to reduce performance overheads:

- **Bartoletti et al.** [7] present two control-flow analyses that safely approximate the set of permissions granted or denied to methods, thereby speeding up runtime checks.
- **Koved et al.** [26] extended the precision and applicability of these analyses.
- **Chang** [30] built on their work to make the analyses more precise using backward static analysis.
- **Pistoia et al.** [8] analyze Java bytecode to identify unnecessary and redundant privileges, which is not only useful for optimization but also for detecting vulnerabilities.

#### Maintenance of Access Control in Java
Other work focuses on the maintenance of access control in Java:

- **Cifuentes et al.** [9] define caller sensitivity and propose methods to detect unguarded caller-sensitive method calls.
- **Toledo et al.** [31] observed that access-control checks are scattered throughout the JCL, making them non-modular and difficult to maintain. They propose solutions based on aspect-oriented programming to fully modularize access control in Java.

#### Alternatives to Stack-Based Access Control
There are also alternatives to stack-based access control:

- **Abadi et al.** [32] suggest basing access control on execution history rather than the current call stack. This approach captures the nesting of methods and any previously completed methods, which may affect the global state of the application.
- **Martinelli et al.** [33] integrated history-based access control into Java using IBM’s Jikes VM, although this approach incurs significant performance overhead.
- **Wallach et al.** [34] discuss an alternative called "security-passing style," where security contexts are represented as pushdown automata, and bytecode is rewritten to eliminate the need for JVM security functionality.

- **Pistoia et al.** [35] introduce information-based access control, which augments stack inspections with the tracking of information flow to sensitive operations. An extensive review of the relationship between access control and secure information flow is provided by Banerjee and Naumann [36].

### Conclusion

A key contribution of this paper is the thorough analysis of the security threat posed by current shortcuts in the Java Class Library (JCL), which omit stack-based access control in certain situations, leading to implicit privilege elevation. These shortcuts are responsible for the single largest group of known vulnerabilities in the Java runtime. We demonstrated that shortcuts directly enable attack vectors and complicate the security-preserving maintenance and evolution of the code base.

Through a tool-assisted adaptation, we created a new variant of the JCL that works almost without shortcuts, allowing privileges to be elevated only explicitly through the use of privileged wrappers. This adapted code enables maintainers, security experts, and tools to easily identify points of privilege escalation and mitigate some previous exploits.

One reason for the introduction of shortcuts was to lower the execution overhead of access control. Surprisingly, large-scale experiments with the DaCapo benchmark suite showed virtually no measurable runtime overhead from removing shortcuts. Microbenchmarks confirmed that the worst-case overheads were in the order of microseconds, attributed to early stack-walk terminations at `doPrivileged` calls.

Another reason for the presence of shortcuts is the convenience of implicit privilege assignment, which reduces the need for explicit privilege elevation. We assessed the usability implications of moving from implicit to purely explicit privilege elevation, and the trade-offs discussed will determine whether the proposed hardening is worthwhile at this point in time.

Adopting the proposed hardening involves a significant one-time cost, ideally requiring security-trained JCL developers to review every `doPrivileged` call introduced by our adaptation. We have reported our findings to the Oracle security team and are discussing these trade-offs with them. Future work will focus on developing tool support to prove privilege containment in recurring situations.

### References

[1] “About Java,” https://www.java.com/en/about/.

[2] L. Gong and G. Ellison, Inside Java(TM) 2 Platform Security: Architecture, API Design, and Implementation, 2nd ed. Pearson Education, 2003.

[3] “2013 Cisco Annual Security Report,” http://www.cisco.com/web/offer/gist_ty2_asset/Cisco_2013_ASR.pdf, 2013.

[4] “2014 Cisco Annual Security Report,” http://www.cisco.com/web/offers/lp/2014-annual-security-report/index.html, Jan. 2014.

[5] P. Holzinger, S. Triller, A. Bartel, and E. Bodden, “An in-depth study of more than ten years of Java exploitation,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 779–790.

[6] N. Hardy, “The confused deputy: (or why capabilities might have been invented),” ACM SIGOPS Operating Systems Review, vol. 22, no. 4, pp. 36–38, 1988.

[7] M. Bartoletti, P. Degano, and G. Ferrari, “Static analysis for stack inspection,” Electronic Notes in Theoretical Computer Science, vol. 54, no. 0, pp. 69 – 80, 2001, conCoord: International Workshop on Concurrency and Coordination (Workshop associated to the 13th Lipari School).

[Online]. Available: http://www.sciencedirect.com/science/article/pii/S1571066104002361

[8] M. Pistoia, R. Flynn, L. Koved, and V. Sreedhar, “Interprocedural analysis for privileged code placement and tainted variable detection,” in ECOOP 2005 - Object-Oriented Programming, ser. Lecture Notes in Computer Science, A. Black, Ed. Springer Berlin Heidelberg, 2005, vol. 3586, pp. 362–386.

[Online]. Available: http://dx.doi.org/10.1007/11531142_16

[9] C. Cifuentes, A. Gross, and N. Keynes, “Understanding caller-sensitive method vulnerabilities: A class of access control vulnerabilities in the Java platform,” in Proceedings of the 4th ACM SIGPLAN International Workshop on State Of the Art in Program Analysis, ser. SOAP 2015. New York, NY, USA: ACM, 2015, pp. 7–12.

[Online]. Available: http://doi.acm.org/10.1145/2771284.2771286

[10] S. M. Blackburn, R. Garner, C. Hoffmann, A. M. Khang, K. S. McKinley, R. Bentzur, A. Diwan, D. Feinberg, D. Frampton, S. Z. Guyer, M. Hirzel, A. Hosking, M. Jump, H. Lee, J. E. B. Moss, A. Phansalkar, D. Stefanović, T. VanDrunen, D. von Dincklage, and B. Wiedermann, “The DaCapo benchmarks: Java benchmarking development and analysis,” in Proceedings of the 21st Annual ACM SIGPLAN Conference on Object-oriented Programming Systems, Languages, and Applications, ser. OOPSLA ’06. New York, NY, USA: ACM, 2006, pp. 169–190.

[Online]. Available: http://doi.acm.org/10.1145/1167473.1167488

[11] “Secure coding guidelines for Java SE,” http://www.oracle.com/technetwork/java/seccodeguide-139067.html.

[12] “Security Explorations - SE-2012-01 Details,” http://www.security-explorations.com/en/SE-2012-01-details.html.

[13] K.-P. Yee, “User interaction design for secure systems,” Computer Science Division (EECS), University of California, Tech. Rep., 2002.

[14] S. Tüürpe, “Idea: Usable platforms for secure programming – mining Unix for insight and guidelines,” in Engineering Secure Software and Systems (Proc. ESSoS’16), ser. LNCS, vol. 9639, Apr. 2016, forthcoming.

[Online]. Available: http://testlab.sit.fraunhofer.de/downloads/Publications/tuerpe2016idea.pdf

[15] L. Gong, “Java security: A ten year retrospective,” in Computer Security Applications Conference, 2009. ACSAC ’09. Annual, Dec 2009, pp. 395–405.

[16] “National vulnerability database,” https://nvd.nist.gov/.

[17] P. Lam, E. Bodden, O. Lhoták, and L. Hendren, “The Soot framework for Java program analysis: a retrospective,” in Cetus Users and Compiler Infrastructure Workshop, 2011.

[Online]. Available: http://www.bodden.de/pubs/lblh11soot.pdf

[18] S. Chiba, “Javassist-a reflection-based programming wizard for Java,” in Proceedings of OOPSLA98 Workshop on Reflective Programming in C++ and Java, 1998, p. 174.

[19] J. R. Rose, “Bytecodes meet combinators: Invokedynamic on the JVM,” in Proceedings of the Third Workshop on Virtual Machines and Intermediate Languages, ser. VMIL ’09. New York, NY, USA: ACM, 2009, pp. 2:1–2:11.

[Online]. Available: http://doi.acm.org/10.1145/1711506.1711508

[20] “Security Explorations - Security vulnerability notice,” http://www.security-explorations.com/materials/SE-2012-01-IBM-2.pdf.

[21] “OpenJDK source releases - build b132,” http://download.java.net/openjdk/jdk8/.

[22] “The DaCapo benchmark suite - #80 Jython generates NPE with eager compilation,” https://sourceforge.net/p/dacapobench/bugs/80/.

[23] “JUnit Benchmarks,” http://labs.carrotsearch.com/junit-benchmarks.html.

[24] J. Y. Gil, K. Lenz, and Y. Shimron, “A microbenchmark case study and lessons learned,” in Proceedings of the compilation of the co-located workshops on DSM’11, TMC’11, AGERE! 2011, AOOPES’11, NEAT’11, & VMIL’11. ACM, 2011, pp. 297–308.

[25] D. Gu, C. Verbrugge, and E. M. Gagnon, “Relative factors in performance analysis of Java virtual machines,” in Proceedings of the 2nd international conference on Virtual execution environments. ACM, 2006, pp. 111–121.

[26] L. Koved, M. Pistoia, and A. Kershenbaum, “Access rights analysis for Java,” in Proceedings of the 17th ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications, ser. OOPSLA ’02. New York, NY, USA: ACM, 2002, pp. 359–372.

[Online]. Available: http://doi.acm.org/10.1145/582419.582452

[27] L. Gong, “Secure Java class loading,” Internet Computing, IEEE, vol. 2, no. 6, pp. 56–61, Nov 1998.

[28] C. Fournet and A. D. Gordon, “Stack inspection: Theory and variants,” ACM Trans. Program. Lang. Syst., vol. 25, no. 3, pp. 360–399, May 2003.

[Online]. Available: http://doi.acm.org/10.1145/641909.641912

[29] A. Herzog and N. Shahmehri, “Performance of the Java security manager,” Computers & Security, vol. 24, no. 3, pp. 192–207, 2005.

[Online]. Available: http://dx.doi.org/10.1016/j.cose.2004.08.006

[30] B.-M. Chang, “Static check analysis for Java stack inspection,” SIGPLAN Not., vol. 41, no. 3, pp. 40–48, Mar. 2006.

[Online]. Available: http://doi.acm.org/10.1145/1140543.1140550

[31] R. Toledo, A. Nunez, E. Tanter, and S. Katz, “Aspectizing Java access control,” Software Engineering, IEEE Transactions on, vol. 38, no. 1, pp. 101–117, Jan 2012.

[32] M. Abadi and C. Fournet, “Access control based on execution history,” in Proceedings of the Network and Distributed System Security Symposium, NDSS 2003, San Diego, California, USA. The Internet Society, 2003.

[Online]. Available: http://www.isoc.org/isoc/conferences/ndss/03/proceedings/papers/7.pdf

[33] F. Martinelli and P. Mori, “Enhancing Java security with history-based access control,” in Foundations of Security Analysis and Design IV, ser. Lecture Notes in Computer Science, A. Aldini and R. Gorrieri, Eds. Springer Berlin Heidelberg, 2007, vol. 4677, pp. 135–159.

[Online]. Available: http://dx.doi.org/10.1007/978-3-540-74810-6_5

[34] D. S. Wallach, A. W. Appel, and E. W. Felten, “SAFKASI: A security mechanism for language-based systems,” ACM Trans. Softw. Eng. Methodol., vol. 9, no. 4, pp. 341–378, Oct. 2000.

[Online]. Available: http://doi.acm.org/10.1145/363516.363520

[35] M. Pistoia, A. Banerjee, and D. Naumann, “Beyond stack inspection: A unified access-control and information-flow security model,” in Security and Privacy, 2007. SP ’07. IEEE Symposium on, May 2007, pp. 149–163.

[36] A. Banerjee and D. A. Naumann, “Stack-based access control and secure information flow,” J. Funct. Program., vol. 15, no. 2, pp. 131–177, 2005.

[Online]. Available: http://dx.doi.org/10.1017/S0956796804005453