# Table of Contents

## Introduction
- **Overview of This Book**
- **How This Book Is Organized**
- **Who Should Read This Book**
- **Tools You Will Need**
- **What's on the Website**

## Chapter 1: Mobile Application (In)security
- **The Evolution of Mobile Applications**
- **Mobile Application Security**
- **Summary**

## Chapter 2: Analyzing iOS Applications
- **Understanding the Security Model**
- **Understanding iOS Applications**
- **Jailbreaking Explained**
- **Understanding the Data Protection API**
- **Understanding the iOS Keychain**
- **Understanding Touch ID**
- **Reverse Engineering iOS Binaries**
- **Summary**

## Chapter 3: Attacking iOS Applications
- **Introduction to Transport Security**
- **Identifying Insecure Storage**
- **Patching iOS Applications with Hopper**
- **Attacking the iOS Runtime**
- **Understanding Interprocess Communication**
- **Attacking Using Injection**
- **Summary**

## Chapter 4: Identifying iOS Implementation Insecurities
- **Disclosing Personally Identifiable Information**
- **Identifying Data Leaks**
- **Memory Corruption in iOS Applications**
- **Summary**

## Chapter 5: Writing Secure iOS Applications
- **Protecting Data in Your Application**
- **Avoiding Injection Vulnerabilities**
- **Securing Your Application with Binary Protections**
- **Summary**

## Chapter 6: Analyzing Android Applications
- **Creating Your First Android Environment**
- **Understanding Android Applications**
- **Understanding the Security Model**
- **Reverse-Engineering Applications**
- **Summary**

## Chapter 7: Attacking Android Applications
- **Exposing Security Model Quirks**
- **Attacking Application Components**
- **Accessing Storage and Logging**
- **Misusing Insecure Communications**
- **Exploiting Other Vectors**
- **Additional Testing Techniques**
- **Summary**

## Chapter 8: Identifying and Exploiting Android Implementation Issues
- **Reviewing Pre-Installed Applications**
- **Exploiting Devices**
- **Infiltrating User Data**
- **Summary**

## Chapter 9: Writing Secure Android Applications
- **Principle of Least Exposure**
- **Essential Security Mechanisms**
- **Advanced Security Mechanisms**
- **Slowing Down a Reverse Engineer**
- **Summary**

## Chapter 10: Analyzing Windows Phone Applications
- **Understanding the Security Model**
- **Understanding Windows Phone 8.x Applications**
- **Building a Test Environment**
- **Analyzing Application Binaries**
- **Summary**

## Chapter 11: Attacking Windows Phone Applications
- **Analyzing for Data Entry Points**
- **Attacking Transport Security**
- **Attacking WebBrowser and WebView Controls**
- **Identifying Interprocess Communication Vulnerabilities**
- **Attacking XML Parsing**
- **Attacking Databases**
- **Attacking File Handling**
- **Patching .NET Assemblies**
- **Summary**

## Chapter 12: Identifying Windows Phone Implementation Issues
- **Identifying Insecure Application Settings Storage**
- **Identifying Data Leaks**
- **Identifying Insecure Data Storage**
- **Insecure Random Number Generation**
- **Insecure Cryptography and Password Use**
- **Identifying Native Code Vulnerabilities**
- **Summary**

## Chapter 13: Writing Secure Windows Phone Applications
- **General Security Design Considerations**
- **Storing and Encrypting Data Securely**
- **Secure Random Number Generation**
- **Securing Data in Memory and Wiping Memory**
- **Avoiding SQLite Injection**
- **Implementing Secure Communications**
- **Avoiding Cross-Site Scripting in WebViews and WebBrowser Components**
- **Secure XML Parsing**
- **Clearing Web Cache and Web Cookies**
- **Avoiding Native Code Bugs**
- **Using Exploit Mitigation Features**
- **Summary**

## Chapter 14: Analyzing BlackBerry Applications
- **Understanding BlackBerry Legacy**
- **Understanding BlackBerry 10**
- **Understanding the BlackBerry 10 Security Model**
- **BlackBerry 10 Jailbreaking**
- **Using Developer Mode**
- **The BlackBerry 10 Device Simulator**
- **Accessing App Data from a Device**
- **Accessing BAR Files**
- **Looking at Applications**
- **Summary**

## Chapter 15: Attacking BlackBerry Applications
- **Traversing Trust Boundaries**
- **Summary**

## Chapter 16: Identifying BlackBerry Application Issues
- **Limiting Excessive Permissions**
- **Resolving Data Storage Issues**
- **Checking Data Transmission**
- **Handling Personally Identifiable Information and Privacy**
- **Ensuring Secure Development**
- **Summary**

## Chapter 17: Writing Secure BlackBerry Applications
- **Securing BlackBerry OS 7.x and Earlier Legacy Java Applications**
- **Securing BlackBerry 10 Native Applications**
- **Securing BlackBerry 10 Cascades Applications**
- **Securing BlackBerry 10 HTML5 and JavaScript (WebWorks) Applications**
- **Securing Android Applications on BlackBerry 10**
- **Summary**

## Chapter 18: Cross-Platform Mobile Applications
- **Introduction to Cross-Platform Mobile Applications**
- **Bridging Native Functionality**
- **Exploring PhoneGap and Apache Cordova**
- **Summary**

## Additional Sections
- **Title Page**
- **Copyright**
- **Dedication**
- **About the Authors**
- **About the Technical Editor**
- **Credits**
- **Acknowledgments**
- **EULA**
- **List of Tables**
  - **Chapter 2**
    - **Table 2.1**
    - **Table 2.2**
    - **Table 2.3**
    - **Table 2.4**
    - **Table 2.5**
    - **Table 2.6**
    - **Table 2.7**
  - **Chapter 6**
    - **Table 6.1**
    - **Table 6.2**
    - **Table 6.3**
    - **Table 6.4**
    - **Table 6.5**
  - **Chapter 7**
    - **Table 7.1**
    - **Table 7.2**
  - **Chapter 9**
    - **Table 9.1**

- **List of Illustrations**
  - **Chapter 1**
    - **Figure 1.1: The incidence of some common mobile application vulnerabilities recently tested by the authors**
    - **Figure 1.2: OWASP Top 10 Mobile Risks**
  - **Chapter 2**
    - **Figure 2.1: The secure boot chain**
    - **Figure 2.2: The user sees this privacy prompt when an application tries to access the address book.**
    - **Figure 2.3: Users can access Privacy settings if they want to grant access to a resource.**
    - **Figure 2.4: The data protection key hierarchy**
    - **Figure 2.5: The Mach-O file format**
  - **Chapter 3**
    - **Figure 3.1: Configuring Burp Suite to listen on all interfaces**
    - **Figure 3.2: Configuring your device to use a proxy**
    - **Figure 3.3: Capturing cipher suites using Wireshark**
    - **Figure 3.4: Installing the Burp certificate on your device**
    - **Figure 3.5: Install profile view**
    - **Figure 3.6: Snoop-it filesystem monitoring**
    - **Figure 3.7: Jailbreak check in sample application**
    - **Figure 3.8: Hopper disassembler**
    - **Figure 3.9: Locating strings in Hopper**
    - **Figure 3.10: Finding references to strings in Hopper**
    - **Figure 3.11: Disassembly of the viewDidLoad delegate**
    - **Figure 3.12: Pseudo-code view in Hopper**
    - **Figure 3.13: Pseudo-code view of clickedButtonAtIndex in Hopper**
    - **Figure 3.14: Pseudo-code view of sub_b1fc function in Hopper**
    - **Figure 3.15: Modifying an instruction in Hopper**
    - **Figure 3.16: Running the example application after bypassing the jailbreak detection**
    - **Figure 3.17: A breakdown of an Objective-C interface**
    - **Figure 3.18: A breakdown of Swift class**
    - **Figure 3.19: Bypassing the Password Manager lock screen**
    - **Figure 3.20: Pivoting to internal networks in Kaseya BYOD**
    - **Figure 3.21: View of the Snoop-it application**
    - **Figure 3.22: The Snoop-it Objective-C classes view**
    - **Figure 3.23: Registering a URL scheme in Xcode**
    - **Figure 3.24: An app extension can indirectly communicate and share resources with the containing app.**
  - **Chapter 4**
    - **Figure 4.1: Accessing application snapshots with iExplorer**
    - **Figure 4.2: A snapshot can capture a registration page.**
  - **Chapter 6**
    - **Figure 6.1: From this Android SDK Manager interface you can install SDK platforms and tools.**
    - **Figure 6.2: You can customize your emulator configuration. Here is just one example.**
    - **Figure 6.3: The main activity of the drozer agent displaying the embedded server toggle.**
    - **Figure 6.4: The main activity of the clock application**
    - **Figure 6.5: A list of running services on a device and the applications they belong to**
    - **Figure 6.6: A simple manifest file showing the general structure**
    - **Figure 6.7: The runtime selection activity available on Android 4.4**
    - **Figure 6.8: The simplified structure of a zip file containing a single file entry.**
    - **Figure 6.9: The required permissions displayed when looking at the permission details on the Twitter application.**
    - **Figure 6.10: The prompt displayed by SuperSU to allow an application access to root context.**
    - **Figure 6.11: The options available on Cydia Impactor to make use of code-signing bugs to obtain system and root.**
    - **Figure 6.12: Graph view showing the disassembly of a DEX file in IDA.**
    - **Figure 6.13: Viewing decompiled application code in JD-GUI**
    - **Figure 6.14: Viewing decompiled application code in JEB**
    - **Figure 6.15: Viewing decompiled application code in Jadx-gui**
  - **Chapter 7**
    - **Figure 7.1: A high-level overview of various testing perspectives of an Android application**
    - **Figure 7.2: The vulnerable Sieve password manager application**
    - **Figure 7.3: Exported activity that leads to the disclosure of all accounts within Sieve**
    - **Figure 7.4: Device lock screen requiring a password and then this being removed after the exploit is run**
    - **Figure 7.5: An illustration of how a toast could be used to perform unintended actions on underlying activities**
    - **Figure 7.6: The recent applications being shown on a device**
    - **Figure 7.7: Fragment loaded inside the Settings activity that allows the PIN to be changed without providing the existing one**
    - **Figure 7.8: Sieve allows the Settings activity to be opened without logging in**
    - **Figure 7.9: Finding SQL injection using drozer’s WebContentResolver web interface**
    - **Figure 7.10: Call initiated from exploiting a broadcast receiver in com.android.phone**
    - **Figure 7.11: Activity started by entering *#*#4636#*#* in the dialer**
    - **Figure 7.12: SuperSU prompt requesting permission to run droidwall.sh as root**
    - **Figure 7.13: An error in Wireshark when you try to open the generated capture file**
    - **Figure 7.14: Loading libencrypt.so into IDA**
    - **Figure 7.15: The application backup activity**
    - **Figure 7.16: Root Checker displaying that the device is rooted**
    - **Figure 7.17: Root Checker now displaying that the device is not rooted**
    - **Figure 7.18: The main activity of Cydia Substrate running on an Android device**
    - **Figure 7.19: Burp is able to proxy Twitter API traffic after loading Android SSL TrustKiller**
    - **Figure 7.20: The configuration available in Introspy**
  - **Chapter 8**
    - **Figure 8.1: The prompt shown to the user when a device with USB debugging is connected to his computer**
    - **Figure 8.2: A screenshot of a Sony Xperia Z2 before and after having the password lock screen removed**
    - **Figure 8.3: Showing the Forgot pattern? button and the resulting screen by pressing it**
    - **Figure 8.4: The Android Device Manager Lock functionality and the resulting screen of the locked device**
    - **Figure 8.5: A Samsung Galaxy S3 device visiting the exploit page and receiving the exploit files**
    - **Figure 8.6: Setting up the drozer MitM helper extension for JavaScript injection**
    - **Figure 8.7: Burp extension showing that an injection has taken place**
    - **Figure 8.8: Setting up the drozer MitM helper extension to replace APKs and then invoke them**
    - **Figure 8.9: The prompt shown to the user after a valid response is obtained from the server**
    - **Figure 8.10: The configuration of the Custom URI Handler Injection section of the drozer Burp plug-in**
    - **Figure 8.11: The drozer exploit page attempting to perform social engineering to get the user to click the reload button**
    - **Figure 8.12: A screen recording of capturing the user's lock screen pattern**
  - **Chapter 10**
    - **Figure 10.1: Windows Phone 8.x chamber architecture**
    - **Figure 10.2: Stack frame with cookies**
    - **Figure 10.3: SEH chain**
    - **Figure 10.4: Unzipped non-Store XAP package**
    - **Figure 10.5: Splash screen for a Samsung Windows Phone 8 device**
    - **Figure 10.6: Creating a new WP8 project**
    - **Figure 10.7: Application Deployment tool**
    - **Figure 10.8: Developer Registration tool**
    - **Figure 10.9: Sideloading the Interop Unlock helper app**
    - **Figure 10.10: Setting the MaxUnsignedApp registry key**
    - **Figure 10.11: Setting the PortalUrlProd registry key**