### Tools and Vulnerability Detection

The intersection of the circles in the provided figure represents the vulnerabilities detected by multiple tools. However, different tools also identified a variety of unique vulnerabilities. This confirms the well-known notion that there is no single solution (or "silver bullet") to address all security issues [20]. Additionally, during the manual verification process, further vulnerabilities were discovered, represented by an empty circle in the figure. Since this manual verification was not conducted systematically, the data is not fully defined. Nevertheless, the presence of vulnerabilities undetected by any of the automated tools underscores the necessity of employing other types of vulnerability detection methods, such as security training, manual code reviews, and black-box testing [2].

### Root Cause of the Vulnerabilities

To better understand the root causes of the vulnerabilities present in the most recent version of the plugins, we conducted an extensive analysis to trace the path of malicious data from its entry point to the vulnerable variable. We observed that the sources of data can be classified into three categories based on the ease of exploitation (see Table II):

1. **Directly Manipulated by Attackers:**
   - Data sources include POST, GET, or COOKIES.
   - These vulnerabilities are easily discoverable and exploitable by both novice and experienced hackers.
   - They represent 36% of all detected vulnerabilities.
   - Example: `'Created '.$_POST[ 'img_path' ].'.';/>`

2. **Indirectly Manipulated by Attackers:**
   - Data sources include databases.
   - While these vulnerabilities may be more challenging to exploit, they can have a more severe impact due to their persistence and potential to affect many users simultaneously.
   - They represent 62% of the detected vulnerabilities.
   - Example: `$image = $wpdb->get_var($wpdb->prepare("SELECT %s FROM ...")); echo stripslashes($image);`

3. **Unlikely to be Easily Manipulated by Attackers:**
   - Data sources include operating system files, the core CMS framework, plugin functions, and arrays.
   - These vulnerabilities are less likely to be exploited due to the increased difficulty in taking control of the necessary resources.
   - They represent only 1.8% of the detected vulnerabilities.
   - Example: `$res = fgets($fp, 128); echo $res;`

PHP, being a weakly typed language, allows variables to store multiple data types. This flexibility, however, can lead to serious security issues if not properly managed. In our dataset, 39% of the vulnerable variables were intended to store numeric values but lacked checks to restrict the stored values. This aligns with other studies that found 45% of numeric variables in vulnerability fixes [2]. Numeric variables are often easier to exploit than text variables because they do not require bypassing quotes or double quotes.

### Inertia in Fixing Vulnerabilities

Fixing bugs, especially critical ones like security issues, is a crucial quality assurance activity in software maintenance. The vulnerabilities found in the 2012 version of the plugins were initially disclosed to developers in November 2013 [3]. Our analysis revealed that 42% of the vulnerabilities in the 2014 version were among those previously disclosed over a year ago. Of these, 24% were very easy to exploit through GET, POST, or COOKIE manipulation. This finding is concerning and should raise awareness among plugin developers, CMS maintainers, site administrators, and end-users.

### Responsiveness and Robustness of the Tools

All tests were conducted on an Intel Core i5 2.8 GHz with 8 GB of memory, running OS X Yosemite 10.10.1. The average CPU time for each tool to analyze all 35 plugins is shown in Table III. RIPS required approximately 0.8 seconds per KLOC for the 2012 version and 1.0 second for the 2014 version. phpSAFE took about 0.2 seconds per KLOC for the 2012 version and 1.0 second for the 2014 version, but it missed one file in the 2012 version and three files in the 2014 version. Pixy failed to complete the analysis on 32 files and raised one error message in the 2012 version and 37 in the 2014 version, likely due to its inability to recognize OOP code.

### Conclusion and Future Work

In this paper, we introduced phpSAFE, a source code vulnerability analyzer capable of detecting XSS and SQLi vulnerabilities in PHP plugins. We evaluated phpSAFE, RIPS, and Pixy using 35 WordPress plugins, and phpSAFE outperformed the other tools in terms of Precision, Recall, and F-score metrics. Using multiple tools increases the number of detected vulnerabilities, indicating room for improvement. We also observed a 50% increase in vulnerabilities over two years, with 40% of the vulnerabilities in the updated plugins already present in the older version, even after disclosure to developers.

Future work will focus on improving phpSAFE's performance, memory consumption, and vulnerability coverage, as well as analyzing other CMS applications like Drupal and Joomla. We also plan to study the evolution of plugin security and updates over time by enabling historical data in phpSAFE, which can help developers approve third-party plugins before integration.

### References

[1] Khan, Huda, Deven Shah, and Risk. “Webapps Security With RIPS.” International Conference on Electrical, Electronics Engineering, Bhopal, 9th December 2012. ISBN: 978-93-82208-47-1.

[2] Fonseca, J., and M. Vieira. “Mapping Software Faults with Web Security Vulnerabilities.” IEEE/IFIP Int. Conference on Dependable Systems and Networks, June 2008.

[3] Fonseca, J., M. Vieira, and H. Madeira. “The Web Attacker Perspective – A Field Study.” IEEE 21st International Symposium on Software Reliability Engineering, Nov. 2010.

[4] Automattic. http://automattic.com/, visited in March 2015.

[5] w3techs. http://w3techs.com/technologies/overview/content_management/all/, visited in November 2014.

[6] N. Nostro, A. Ceccarelli, A. Bondavalli, and F. Brancati. “Insider Threat Assessment: A Model-Based Methodology.” SIGOPS Oper. Syst. Rev., vol. 48, no. 2, pp. 3–12, Dec. 2014.

[7] S. Neuhaus and T. Zimmermann. “Security Trend Analysis with CVE Topic Models.” International Symposium on Software Reliability Engineering, pp. 111-120, 2010.

[8] J. Dahse and T. Holz. “Simulation of Built-in PHP Features for Precise Static Code Analysis.” Network and Distributed Systems Security Symposium (NDSS), San Diego, CA, USA, 2014.

[9] Y. Huang, F. Yu, C. Hang, C. Tsai, D. Lee, and S. Kuo. “Securing Web Application Code by Static Analysis and Runtime Protection.” Proc. 13th International Conference on World Wide Web, NY, USA, 2004.

[10] N. Jovanovic, C. Kruegel, and E. Kirda. “Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities.” IEEE Symposium on Security and Privacy, pp. 258-263, 2006.

[11] G. Wassermann and Z. Su. “Static Detection of Cross-Site Scripting Vulnerabilities.” 30th Int. Conference on Software Engineering, 2008.

[12] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, et al. “Saner: Composing Static and Dynamic Analysis to Validate Sanitization in Web Applications.” IEEE Symposium on Security and Privacy, SP 2008.

[13] B. Chess and J. West. “Secure Programming with Static Analysis.” Addison-Wesley Professional, 2007.

[14] V. B. Livshits and M. S. Lam. “Finding Security Vulnerabilities in Java Applications with Static Analysis.” Usenix Security, 2005.

[15] P. Vogt, et al. “Cross Site Scripting Prevention with Dynamic Data Tainting and Static Analysis.” NDSS, 2007.

[16] E. Bouwers. “Analyzing PHP: An Introduction to PHP-Sat.” Technical report, 2006.

[17] J. Fonseca, M. Vieira, and H. Madeira. “The Web Attacker Perspective – A Field Study.” IEEE 21st International Symposium on Software Reliability Engineering, Nov. 2010.

[18] J. Fonseca. “phpSAFE.” https://github.com/JoseCarlos-Fonseca/phpSAFE, November 2014.

[19] N. L. de Poel. “Automated Security Review of PHP Web Applications with Static Code Analysis.” Master's thesis, vol. 5, 2010.

[20] J. Fonseca and M. Vieira. “A Survey on Secure Software Development Lifecycles.” Khalid Buragga, Noor Zaman (Eds.), “Software Development Techniques for Constructive Information Systems Design,” ISBN: 9781466636798, IGI Global, 2013.