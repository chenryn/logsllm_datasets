### Challenges and Solutions in Using SWRL for Grading Plugins

SWRL (Semantic Web Rule Language) is not easily comprehensible to humans, which poses a significant challenge for the end users of grading plugins. These users would find it difficult to create or modify rules due to the complexity of the language. Additionally, SWRL has limited support, with only a few inference engines capable of interpreting it. 

Other languages, such as Buchingae (used in Bossom), are more user-friendly and fully implemented but lack long-term support. To address the complexity of SWRL, graphical editors like the one in Protégé can be used. These editors help integrate SWRL with existing ontologies and provide a logical representation that is then mapped into SWRL. However, users still need to understand how SWRL works. Another alternative is to use a simple mathematical language, similar to Microsoft Excel, which could be suitable for handling heavy mathematical data. However, creating an interpreter to convert between SWRL and a mathematical language would be challenging.

### The Grading Ontology

The Grading Ontology has been developed to represent the domain of course evaluations. It is designed to be simple and easily integrated into existing ontologies, such as our RUD (Research University Data). The ontology's primary class is "Evaluation," representing the domain of course evaluation. Each course has one unique evaluation, though evaluations can be adapted for other domains.

Evaluations consist of evaluation items, such as exams and projects. These items are subclassed, with "SimpleEvaluation" being the only subclass in the Grading Ontology. Other items, like "Project," can be imported from the university's existing ontology. For each combination of an item and a student, there is a grade that represents the student's performance in that evaluation item for the course.

#### Structure of the Grading Ontology

- **Grading Ontology**
  - **Course** (from_Course)
  - **Student** (from_Student)
  - **Evaluation** (grade_Evaluation)
    - **EvaluationName**: string
    - **evaluation_Items**
      - **Project** (Grade)
        - **GradeValue**: decimal
      - **SimpleEvaluation**
        - **EvaluationPercentage**: decimal
        - **ItemName**: string

### Simplifying Rule Editing

To simplify the rule editing process, we can focus on specific problem domains and develop a simple editor tailored to these cases. This approach combines the ideas of a graphical editor for rules and a mathematical language. The matching strategy involves generating rules based on a well-defined mapping between simple logical conditions and a rule. These logical conditions are based on triples: (Evaluation Item, Boolean Expression, Value). For example, the triple (Assignment1, >, 0) indicates that if the value of Assignment1 is greater than 0, the final grade will be calculated based on predefined weights for each item.

#### Example Rule

```rulebase CalculateGrade
{
  rule Case1 is
    Grading:from_Course(?Evaluation, RUD:SemWeb)
    and Grading:grade_Evaluation(?Grade, ?Evaluation)
    and Grading:from_Student(?Grade, ?Student)
    and Grading:grade_Value(Grading:Assignment1, ?Value)
    and [?Value > 0]
  then
    FinalGrade(?Student, RUD:SemWeb,
                Grading:grade_Value(Grading:Project) * 0.1 +
                Grading:grade_Value(Grading:Exam) * 0.9)

  rule Case2 is ...
}
```

This rule retrieves the evaluation structure from RUD:SemWeb, the grade corresponding to a student, and the value of Assignment1. If the value is greater than 0, the final grade is calculated as 10% of the project grade and 90% of the exam grade.

### Evaluation

To validate the Semantic Course Management System (S-CMS), we conducted a benchmark to assess its scalability and performance under system load. The application was installed at the Department of Mathematics and Engineering, University of Madeira, using two machines: a server managing SQL Server 2000 and a client running S-CMS. Both machines had Intel P4 3.0 GHz processors, 512 MB main memory, 40GB 7,800 RPM IDE disks, and Microsoft Windows XP Home, connected by a 100Mbit/s Ethernet LAN.

The server managed a university database of 123 Mbytes, containing 200 tables and 600 views, with descriptions of approximately 13,000 students. Loading the ontologies from the database took about 7 minutes and 32 seconds, creating approximately 13,000 instances. The results were encouraging, showing that the proposed solution could scale to meet desired throughput and latency requirements.

### Related Work

Many tools for course management have been introduced in universities, supporting both teachers and students. However, these tools are often static repositories of information and do not leverage semantic Web technologies for querying and inferencing. Examples include MIT OpenCourseWare, WebCT, AIMS, Moodle, and BSCW. Semantics and ontologies have been used for information integration, with projects like Carnot, InfoSleuth, OBSERVER, and COIN. These projects, however, do not target specific domains like university modeling and do not provide solutions for carrying out inference on created ontologies.

### Conclusion

The development of the semantic Web has the potential to revolutionize the World Wide Web. S-CMS, a real-world application based on semantic Web technologies, demonstrates the added value of these technologies. S-CMS can semantically integrate and extract heterogeneous data, answer complex queries, and perform reasoning using explicit semantic rules. The system has been successfully used to manage student enrollment in class projects at the University of Madeira, particularly in the "Semantic Web" course.

### Questions for Discussion

**Beginner:**
1. What typical data sources need to be integrated when developing a CMS?
2. What is a RUD?
3. What is a SUD?

**Intermediate:**
1. What types of information heterogeneity may arise when integrating data sources?
2. What difficulties have been found when creating and populating the ontology described in this chapter?

**Advanced:**
1. Make an ontology for representing people in your business or organization.
2. Build a Buchingae rule that states that only staff members working on internal and external projects are eligible for travel funding.
3. Write an RDQL that selects the staff members working in the research department.

### Suggested Additional Reading

- **Antoniou, G. and van Harmelen, F.** (2004). A semantic Web primer. Cambridge, MA: MIT Press.
- **Davies, J., Studer, R., and Warren, P.** (2006). Semantic Web Technologies: Trends and Research in Ontology-based Systems. John Wiley & Sons.
- **Berners-Lee, T., Fensel, D., Hendler, J., Lieberman, H., Wahlster, W.** (2005). Spinning the Semantic Web: Bringing the World Wide Web to Its Full Potential. The MIT Press.

### References

- AIMS (2006). AIMS: Adaptive Information System for Management of Learning Content.
- Bayardo, R. J., Bohrer, W., et al. (1997). InfoSleuth: Agent-Based Semantic Integration of Information in Open and Dynamic Environments.
- Berners-Lee, T., Hendler, J., et al. (2001). The Semantic Web. Scientific American.
- Bossom (2005). Bossom engine for the semantic Web.
- Bressan, S., Fynn, K., et al. (1997). The COntext INterchange Mediator Prototype.
- Cardoso, J. (2004). Issues of Dynamic Travel Packaging using Web Process Technology.
- Cardoso, J., Miller, J., et al. (2005). Academic and Industrial Research: Do their Approaches Differ in Adding Semantics to Web Services.
- Eclipse (2005). Eclipse open source community.
- FOP (2005). FOP (Formatting Objects Processor).
- Ian Horrocks, Patel-Schneider, P. F., et al. (2003). SWRL: A Semantic Web Rule Language Combining OWL and RuleML.
- Jasper, R. and Uschold, M. (1999). A framework for understanding and classifying ontology applications.
- Jena (2005). Jena - A Semantic Web Framework for Java.
- Karvounarakis, G., Alexaki, S., et al. (2002). RQL: a declarative query language for RDF.
- Kashyap, V. and Sheth, A. (1998). Semantic Heterogeneity in Global Information Systems: The Role of Metadata, Context and Ontologies.
- Klöckner, K. (2000). BSCW - Educational Servers and Services on the WWW.
- Knublauch, H., Fergerson, R. W., et al. (2004). The Protégé OWL Plugin: An Open Development Environment for Semantic Web Applications.
- Kumar, A. and Smith, B. (2004). On Controlled Vocabularies in Bioinformatics: A Case Study in Gene Ontology.
- Lassila, O. and McGuinness, D. (2001). The Role of Frame-Based Representation on the Semantic Web.
- Lawrence, R. and Barker, K. (2001). Integrating Data Sources Using a Standardized Global Dictionary.
- Mandal, C., Sinha, V. L., et al. (2004). Web-based Course management and Web Services.
- Meinel, C., Sack, H., et al. (2002). Course management in the twinkle of an eye - LCMS: a professional course management system.
- Mena, E., Kashyap, V., et al. (1996). OBSERVER: An Approach for Query Processing in Global Information Systems based on Interoperation across Pre-existing Ontologies.
- MOODLE (2006). Modular Object-Oriented Dynamic Learning Environment (moodle).
- OCW (2006). OpenCourseWare. MIT.
- Ouskel, A. M. and Sheth, A. (1999). Semantic Interoperability in Global Information Systems.
- OWL (2004). OWL Web Ontology Language Reference.
- OWL-S (2004). OWL-based Web Service Ontology.
- RDQL (2005). Jena RDQL.
- Roure, D., Jennings, N., et al. (2001). Research Agenda for the Future Semantic Grid: A Future e-Science Infrastructure.
- RSS (2005). RSS 2.0 Specification.
- Sheth, A. (1998). Changing Focus on Interoperability in Information Systems: From System, Syntax, Structure to Semantics.
- Sheth, A. P. (1999). Changing Focus on Interoperability in Information Systems: From System, Syntax, Structure to Semantics.
- Shum, S. B., Motta, E., et al. (2000). ScholOnto: an ontology-based digital library server for research documents and discourse.
- Swoogle (2005). Search and Metadata for the Semantic Web.
- WebCT (2006).
- Woelk, D., Cannata, P., et al. (1993). Using Carnot for enterprise information integration.