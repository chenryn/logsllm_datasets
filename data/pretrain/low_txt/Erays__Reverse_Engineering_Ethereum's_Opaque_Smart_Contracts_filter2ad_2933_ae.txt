### 8. Discussion

We have demonstrated the feasibility of reverse engineering opaque smart contracts on the Ethereum blockchain. Tools like Erays simplify the process of reconstructing high-level source code, even when no original source is available. We envision that such tools could be utilized by "white hat" security teams or regulatory bodies to conduct public audits of the Ethereum blockchain. However, reverse engineering remains a resource-intensive task, and these audits would be more straightforward if the high-level source code were readily available. We recommend that the Ethereum community adopt technical mechanisms and conventions to enhance the transparency of smart contract programs. Etherscan's verified source code repository is a positive step, but more efforts are needed to improve overall ecosystem transparency.

The prevalence of opaque contracts, despite the ease of publishing source code to Etherscan, can be attributed to several factors. In some cases, opacity may be a deliberate choice for achieving security through obscurity. Additionally, publishing Solidity source code is not yet a widely adopted practice, and infrastructure support is still limited. For instance, Etherscan is the only block explorer service we are aware of that provides a verified source code repository. Although Ethereum features a decentralized standard called "Swarm" for publishing a contract's Application Bytecode Interface (ABI), this standard does not include the full source code. Extending this standard to support high-level source code would be beneficial.

### 9. Conclusion

Many Ethereum smart contracts on the blockchain lack easily accessible source code, making them opaque. These contracts control approximately $3.1 billion USD in balance and have been transacted with over 12.7 million times. To investigate these contracts, we introduced Erays, a reverse engineering tool for the Ethereum Virtual Machine (EVM). Erays transforms EVM bytecode into higher-level representations suitable for manual analysis. We first demonstrated how Erays can quantify code complexity, identify code reuse, and reduce opacity in the smart contract ecosystem. We then applied Erays to four case studies: high-value multi-signature wallets, arbitrage bots, exchange accounts, and a popular smart contract game. Our findings suggest that some smart contract developers may rely on obscurity for the correct functionality of their contracts, believing it provides "security by obscurity." We hope that Erays will be a valuable tool for both the security and Ethereum communities in improving transparency in the Ethereum ecosystem.

### Acknowledgments

This work was supported in part by the National Science Foundation under contract CNS-151874, as well as through gifts from CME Group and Jump Trading. Additional support was provided by the U.S. Department of Homeland Security under contract HSHQDC-17-J-00170. The opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of their employers or sponsors.

### References

[1] Cryptokitties craze slows down transactions on Ethereum. http://www.bbc.com/news/technology-42237162.
[2] Etherdelta. https://etherdelta.com/.
[3] Etherscan. https://etherscan.io.
[4] Manticore. https://github.com/trailofbits/manticore.
[5] Mythril. https://github.com/ConsenSys/mythril.
[6] Remix. https://github.com/ethereum/remix.
[7] Solidity documentation. https://solidity.readthedocs.io/en/develop/.
[8] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools (2nd Edition). Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2006.
[9] F. E. Allen. Control flow analysis. In ACM Sigplan Notices, 1970.
[10] F. E. Allen and J. Cocke. A program data flow analysis procedure. Commun. ACM, 19(3):137–, Mar. 1976.
[11] N. Atzei, M. Bartoletti, and T. Cimoli. A survey of attacks on Ethereum smart contracts. In Proceedings of the 6th International Conference on Principles of Security and Trust - Volume 10204, pages 164–186, New York, NY, USA, 2017. Springer-Verlag New York, Inc.
[12] G. Balakrishnan and T. Reps. Divine: Discovering variables in executables. In Proceedings of the 8th International Conference on Verification, Model Checking, and Abstract Interpretation, VMCAI’07, pages 1–28, Berlin, Heidelberg, 2007. Springer-Verlag.
[13] M. Bartoletti and L. Pompianu. An empirical analysis of smart contracts: platforms, applications, and design patterns. In International Conference on Financial Cryptography and Data Security, pages 494–509. Springer, 2017.
[14] R. Browne. Accidental bug may have frozen $280 million worth of digital coin ether in a cryptocurrency wallet. https://www.cnbc.com/2017/11/08/accidental-bug-may-have-frozen-280-worth-of-ether-on-parity-wallet.html.
[15] M. Chandramohan, Y. Xue, Z. Xu, Y. Liu, C. Y. Cho, and H. B. K. Tan. Bingo: Cross-architecture cross-OS binary search. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE 2016, pages 678–689, New York, NY, USA, 2016. ACM.
[16] T. Chen, X. Li, X. Luo, and X. Zhang. Under-optimized smart contracts devour your money. In Software Analysis, Evolution and Reengineering (SANER), 2017 IEEE 24th International Conference on, pages 442–446. IEEE, 2017.
[17] C. Cifuentes and K. J. Gough. Decompilation of binary programs. Softw. Pract. Exper., 25(7):811–829, July 1995.
[18] U. F. T. Commission. Know the risks before investing in cryptocurrencies. https://www.ftc.gov/news-events/blogs/business-blog/2018/02/know-risks-investing-cryptocurrencies.
[19] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba, A. Miller, P. Saxena, E. Shi, E. G. Sirer, et al. On scaling decentralized blockchains. In International Conference on Financial Cryptography and Data Security, pages 106–125. Springer, 2016.
[20] C. Decker and R. Wattenhofer. Information propagation in the Bitcoin network. In Peer-to-Peer Computing (P2P), 2013 IEEE Thirteenth International Conference on, pages 1–10. IEEE, 2013.
[21] C. Decker and R. Wattenhofer. Bitcoin transaction malleability and MtGox. In European Symposium on Research in Computer Security, pages 313–326. Springer, 2014.
[22] M. Dong. Towards cracking CryptoKitties' genetic code. https://medium.com/@montedong/towards-cracking-crypto-kitties-genetic-code-629fcd37b09b.
[23] Etherscan. ShapeShift exchange account. https://etherscan.io/address/0x70faa28a6b8d6829a4b1e649d26ec9a2a39ba413.
[24] K. Finley. A $50 million hack just showed that the DAO was all too human. https://www.wired.com/2016/06/50-million-hack-just-showed-dao-human/, 2016.
[25] R. Fitzgerald, T. B. Knoblock, E. Ruf, B. Steensgaard, and D. Tarditi. Marmot: An optimizing compiler for Java. Softw. Pract. Exper., 30(3):199–232, Mar. 2000.
[26] Ethereum Foundation. ERC20 token standard. https://theethereum.wiki/w/index.php/ERC20_Token_Standard.
[27] A. Hegyi. CryptoKitties genescience algorithm. https://medium.com/@alexhegyi/cryptokitties-genescience-1f5b41963b0d.
[28] O. Kharif. CryptoKitties mania overwhelms Ethereum network’s processing. https://www.bloomberg.com/news/articles/2017-12-04/cryptokitties-quickly-becomes-most-widely-used-ethereum-app.
[29] J. Krupp and C. Rossow. Teether: Gnawing at Ethereum to automatically exploit smart contracts. In 27th USENIX Security Symposium (USENIX Security 18), Baltimore, MD, 2018. USENIX Association.
[30] J. Lee, T. Avgerinos, and D. Brumley. TIE: Principled reverse engineering of types in binary programs. In Proceedings of the Network and Distributed System Security Symposium, NDSS 2011, San Diego, California, USA, 6th February - 9th February 2011, 2011.
[31] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, and A. Hobor. Making smart contracts smarter. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, CCS ’16, pages 254–269, New York, NY, USA, 2016. ACM.
[32] R. Marvin. Blockchain in 2017: The year of smart contracts. https://www.pcmag.com/article/350088/blockchain-in-2017-the-year-of-smart-contracts.
[33] T. J. McCabe. A complexity measure. IEEE Transactions on Software Engineering.
[34] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M. Voelker, and S. Savage. A fistful of bitcoins: Characterizing payments among men with no names. In Proceedings of the 2013 conference on Internet measurement conference, pages 127–140. ACM, 2013.
[35] J. Miecznikowski and L. Hendren. Decompiling Java using staged encapsulation. In Proceedings of the Eighth Working Conference on Reverse Engineering (WCRE’01), WCRE ’01, pages 368–, Washington, DC, USA, 2001. IEEE Computer Society.
[36] A. Miller, J. Litton, A. Pachulski, N. Gupta, D. Levin, N. Spring, and B. Bhattacharjee. Discovering Bitcoin’s public topology and influential nodes. et al., 2015.
[37] T. Neudecker, P. Andelfinger, and H. Hartenstein. Timing analysis for inferring the topology of the Bitcoin peer-to-peer network. In Ubiquitous Intelligence & Computing, Advanced and Trusted Computing, Scalable Computing and Communications, Cloud and Big Data Computing, Internet of People, and Smart World Congress (UIC/ATC/ScalCom/CBDCom/IoP/SmartWorld), 2016 Intl IEEE Conferences, pages 358–367. IEEE, 2016.
[38] F. Nielson, H. R. Nielson, and C. Hankin. Principles of Program Analysis. Springer-Verlag, Berlin, Heidelberg, 1999.
[39] A. Sæbjørnsen, J. Willcock, T. Panas, D. Quinlan, and Z. Su. Detecting code clones in binary executables. In Proceedings of the Eighteenth International Symposium on Software Testing and Analysis, ISSTA ’09, pages 117–128, New York, NY, USA, 2009. ACM.
[40] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash system. https://bitcoin.org/bitcoin.pdf.
[41] E. J. Schwartz, J. Lee, M. Woo, and D. Brumley. Native x86 decompilation using semantics-preserving structural analysis and iterative control-flow structuring. In Proceedings of the 22nd USENIX Conference on Security, SEC’13, pages 353–368, Berkeley, CA, USA, 2013. USENIX Association.
[42] B. Schwarz and S. Debray. Disassembly of executable code revisited. In 9th IEEE Working Conference on Reverse Engineering.
[43] U.S. Securities and Exchange Commission. Investor bulletin: Initial coin offerings. https://www.sec.gov/oiea/investor-alerts-and-bulletins/ib_coinofferings.
[44] M. Sharir. Structural analysis: A new approach to flow analysis in optimizing compilers. Computer Languages, 5(3-4):141–153, 1980.
[45] Y. Shin and L. Williams. Is complexity really the enemy of software security? In 4th ACM workshop on Quality of protection.
[46] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, et al. (State of) the art of war: Offensive techniques in binary analysis. In Security and Privacy (SP), 2016 IEEE Symposium on, pages 138–157. IEEE, 2016.
[47] L. Torczon and K. Cooper. Engineering a Compiler. 2007.
[48] K. Turner. The CryptoKitties genome project. https://medium.com/@kaigani.
[49] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan. Soot - a Java bytecode optimization framework. In 1999 conference of the Centre for Advanced Studies on Collaborative research.
[50] G. Wood. Ethereum: A secure decentralized generalised transaction ledger.
[51] K. Yakdan, S. Eschweiler, E. Gerhards-Padilla, and M. Smith. No more gotos: Decompilation using pattern-independent control-flow structuring and semantic-preserving transformations. In 22nd Annual Network and Distributed System Security Symposium, NDSS 2015, San Diego, California, USA, February 8-11, 2015, 2015.
[52] W. Zhao. $30 million: Ether reported stolen due to Parity wallet breach. https://www.coindesk.com/30-million-ether-reported-stolen-parity-wallet-breach/.

### A. Internal Function Identification

In our heuristic, an internal function is assumed to have a single entry and a single exit. Consequently, there are four basic blocks involved in an internal call: `caller_begin`, `callee_entry`, `callee_exit`, and `caller_end`. The `caller_begin` issues the call by branching to `callee_entry`, and eventually, `callee_exit` returns to the caller by branching to `caller_end`.

We note that a `callee` may have multiple callers. As a result, for an internal function, there is one pair of `callee_entry` and `callee_exit`, but there may be multiple pairs of `caller_begin` and `caller_end`. Figure 5a illustrates an example `callee` with two callers.

We start by identifying `callee_exit`. We observe that `callee_exit` would normally end with an indirect branch, where the branch address is produced by `caller_begin`. Moreover, `callee_exit` should have more than one successor (the `caller_ends`).

We then correlate each `caller_end` with its `caller_begin`. As mentioned previously, the branch address produced by `caller_begin` guides the `callee` to `caller_end`. During the CFG recovery, we keep track of where each constant is generated, which enables the correlation. As we identify the `caller_begins`, the `callee_entry` is their common successor.

We then use `INTCALL` as an abstraction for the `callee`. The subgraph for the `callee` is first extracted using the CFG recovery algorithm. For each `caller_begin`, we insert an `INTCALL` and replace its branch from `callee_entry` to the corresponding `caller_end`. The `INTCALL`, when "executed," will transfer the control flow to the `callee`. For the `callee_exit`, we insert an `INTRET` to replace its indirect branch to `caller_ends`. The `INTRET`, when "executed," will transfer the control flow back to the caller. Figure 5b illustrates these transformations.

To make lifting possible, we also need to determine the number of items popped off and pushed onto the stack by `INTCALL`. In the EVM specification, these are referred to as the delta (δ) and alpha (α) of an operation. For an `INTCALL`, they can be interpreted as the number of arguments and return values.

We note that a sequence of bytecode instructions can be viewed as a single operation, thus the delta and alpha value of the sequence can be computed as shown in Code Block 7. The stack size is initialized to zero upon entering the sequence. When it becomes negative, the sequence is reading prepositioned values. Delta is therefore set to the negation of the minimal stack size. The end stack size indicates the number of values produced by the sequence, but we also need to account for the values popped off the stack. Therefore, alpha is the end stack size plus the delta value.

For an `INTCALL`, we select a path from `callee_entry` to `callee_exit` and compute its delta and alpha. We note that in most cases, the return address is the first argument (at the bottom of the initial stack) and will be popped off eventually, which allows us to fully exhaust the function arguments.

```python
delta, stack_size = 0, 0
for bytecode in sequence:
    stack_size -= bytecode.delta
    delta = min(delta, stack_size)
    stack_size += bytecode.alpha
delta = -delta
alpha = stack_size + delta
```

**Code Block 7: Computing the Delta and Alpha of a Sequence**

**Figure 5:**
(a) Before callee is extracted
(b) After callee is extracted

```plaintext
callee subgraph
caller_begin_0 -> callee_entry (call)
caller_begin_1 -> callee_entry (call)
callee_exit -> caller_end_0 (return)
callee_exit -> caller_end_1 (return)

caller_begin_0 -> caller_end_0
caller_begin_1 -> caller_end_1
```

---

This optimized version of the text is more coherent, professional, and easier to read. It maintains the original content while improving the structure and clarity.