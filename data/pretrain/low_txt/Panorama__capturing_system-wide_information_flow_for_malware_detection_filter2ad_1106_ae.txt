### Malware Detection and Analysis

#### Unauthorized Access to Sensitive Data
The unauthorized access to sensitive data is often sufficient to classify a sample as malware. However, some malware may evade detection by not exhibiting malicious behavior during testing. For instance, it might remain inactive until specific conditions are met. Examples include time bombs that activate on certain dates and keyloggers that only record keystrokes for particular applications or windows. Additionally, malware can detect if it is running in a virtual environment, such as QEMU, and remain dormant. Peter Ferrie discussed techniques to detect virtual machines and emulators, including QEMU [15]. Our current prototype does not detect this type of malware, but complementary work has been done to address this issue. Vasudevan et al. proposed stealthy techniques to make the analysis environment less detectable [37]. Moser et al. [24] and Brumley et al. [7, 6] also used QEMU to build malware analysis systems capable of uncovering hidden behaviors by exploring multiple execution paths. Incorporating these techniques into our system will be part of future work.

#### Subverting Panorama
Panorama, as an emulated environment, provides strong isolation, making it unlikely for malware to interfere with the host system. However, some studies have shown the possibility of subverting the entire emulated environment through buffer overflows and integer bugs [27]. This problem can be mitigated by fixing these vulnerabilities.

### Related Work

#### Signature-Based Malware Detection
Signature-based malware detection has been widely used to scan files and memory for known signatures. While semantic-aware signature checking [11] improves resilience to polymorphic and metamorphic variants, the inherent limitation of this approach is its inability to detect previously unseen malware. Rootkits that hide files on disk and even in memory, as demonstrated in Shadow Walker [9], further limit its effectiveness.

#### Behavior-Based Malware Detection
Behavior-based malware detection identifies malicious programs by observing their behaviors and system states. By recognizing deviations from "normal" system states and behaviors, this method can identify entire classes of malware, including previously unseen instances. Various detection points are examined, such as auto-start extensibility points in the registry (Strider GateKeeper [39]) and hooks used by rootkits (VICE [8] and System Virginity Verifier [33]). Behavior-based detection can be defeated by using stealthier methods or providing misleading information to detection tools. Additionally, current detection tools often reside alongside malicious programs, exposing them to complete subversion.

In contrast, our system overcomes these weaknesses:
1. It captures characteristic information access and processing behavior, making it difficult to evade.
2. It detects malware based on hardware-level knowledge, reducing the risk of being cheated.
3. It is implemented outside the victim system, providing strong protection against subversion.

#### Cross-View Based Rootkit Detection
Cross-view based rootkit detection techniques, such as Blacklight [4], Rootkit Revealer [32], and Strider Ghostbuster [2], identify hidden files, processes, and registry entries by comparing two views of the system: one derived from common APIs and the other from kernel or hardware states. Our approach has two advantages:
1. It requires significantly less time (a few minutes) compared to cross-view techniques (several hours).
2. It directly recognizes rootkits rather than just listing hidden entries.

#### Dynamic Taint Analysis
Dynamic taint analysis has been applied to solve and analyze security-related problems. Systems like those by Newsome and Song [26] detect exploits by tracking data from untrusted sources. Chow et al. [10] used whole-system dynamic taint analysis to analyze how sensitive data are handled in operating systems and large programs. Egele et al. [14] utilized whole-system dynamic taint analysis to examine BHO-based spyware behavior. Vogt et al. [38] extended the JavaScript engine with dynamic taint analysis to prevent cross-site scripting attacks. Our system is independently developed with OS-aware analysis for closed-source operating systems and provides a unified machinery for detecting various types of malware.

#### Information Flow Analysis
Our system analyzes taint graphs to identify suspicious information access and processing behavior. This is related to previous work that performs forensic analysis based on information flows. For example, some systems track information flow between operating system processes for intrusion analysis [23], intrusion recovery [17], and malware removal [21]. However, these systems typically monitor the system call interface, which is less comprehensive and precise than our technique. Our method provides higher accuracy and can handle kernel-mode attacks.

### Conclusion
Malware poses serious security and privacy threats, and existing detection and analysis techniques are often ineffective. In this paper, we propose whole-system fine-grained taint analysis to discern the information access and processing behavior of unknown code. This behavior captures the intrinsic characteristics of a wide range of malware, including keyloggers, password sniffers, packet sniffers, and stealth backdoors. We believe that our system, called Panorama, will offer indispensable assistance to malware analysts, enabling them to quickly comprehend the behavior and inner workings of malware.

### References
[1] AutoHotkey. http://www.autohotkey.com/.
[2] D. Beck, B. Vo, and C. Verbowski. Detecting stealth software with strider ghostbuster. In Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05), pages 368–377, June 2005.
[3] F. Bellard. Qemu, a fast and portable dynamic translator. In USENIX Annual Technical Conference, FREENIX Track, April 2005.
[4] Blacklight. http://www.europe.f-secure.com/exclude/blacklight/.
[5] Bochs: The open source IA-32 emulation project. http://bochs.sourceforge.net/.
[6] D. Brumley, C. Hartwig, M. G. Kang, Z. Liang, J. Newsome, D. Song, and H. Yin. BitScope: Automatically dissecting malicious binaries. Technical Report CMU-CS-07-133, School of Computer Science, Carnegie Mellon University, March 2007.
[7] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song, and H. Yin. Botnet Analysis, chapter Automatically Identifying Trigger-based Behavior in Malware. 2007.
[8] J. Butler and G. Hoglund. VICE–catch the hookers! In Black Hat USA, July 2004. http://www.blackhat.com/presentations/bh-usa-04/bh-us-04-butler/bh-us-04-butler.pdf.
[9] J. Butler and S. Sparks. Shadow walker: Raising the bar for windows rootkit detection. In Phrack 63, July 2005.
[10] J. Chow, B. Pfaﬀ, T. Garﬁnkel, K. Christopher, and M. Rosenblum. Understanding data lifetime via whole system simulation. In Proceedings of the 13th USENIX Security Symposium (Security’03), August 2004.
[11] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-aware malware detection. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (Oakland’05), May 2005.
[12] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and P. Barham. Vigilante: End-to-end containment of internet worms. In Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP’05), October 2005.
[13] J. R. Crandall and F. T. Chong. Minos: Control data attack prevention orthogonal to memory model. In Proceedings of the 37th International Symposium on Microarchitecture (MICRO’04), December 2004.
[14] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic Spyware Analysis. In Proceedings of the 2007 Usenix Annual Conference (Usenix’07), June 2007.
[15] P. Ferrie. Attacks on virtual machine emulators. Symantec Security Response, December 2006.
[16] GINA spy. http://www.codeproject.com/useritems/GINA_SPY.Asp.
[17] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara. The taser intrusion recovery system. In Proceedings of the 20th ACM Symposium on Operating Systems Principles(SOSP’05), October 2005.
[18] Google’s desktop search red ﬂag. http://www.internetnews.com/xSP/article.php/3584131.
[19] Google Desktop - Privacy Policy. http://desktop.google.com/en/privacypolicy.html.
[20] A. Ho, M. Fetterman, C. Clark, A. Watﬁeld, and S. Hand. Practical taint-based protection using demand emulation. In EuroSys 2006, April 2006.
[21] F. Hsu, H. Chen, T. Ristenpart, J. Li, and Z. Su. Back to the future: A framework for automatic malware removal and system repair. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC’06), December 2006.
[22] The IDA Pro Disassembler and Debugger. http://www.datarescue.com/idabase/.
[23] S. T. King and P. M. Chen. Backtracking intrusions. In Proceedings of the 19th ACM Symposium on Operating Systems Principles (SOSP’03), pages 223–236, October 2003.
[24] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy(Oakland’07), May 2007.
[25] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy. A crawler-based study of spyware in the web. In Proceeding of the 13th Network and Distributed System Security (NDSS’06), February 2006.
[26] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the 12th Annual Network and Distributed System Security Symposium (NDSS’05), February 2005.
[27] T. Ormandy. An Empirical Study into the Security Exposure to Host of Hostile Virtualized Environments. http://taviso.decsystem.org/virtsec.pdf.
[28] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for fingerprinting zero-day attacks. In EuroSys 2006, April 2006.
[29] Qemu. http://fabrice.bellard.free.fr/qemu/.
[30] F. Qin, S. Lu, and Y. Zhou. Safemem: Exploiting ECC-memory for detecting memory leaks and memory corruption during production runs. In Proceedings of the 11th International Symposium on High-Performance Computer Architecture (HPCA’05), February 2005.
[31] F. Qin, C. Wang, Z. Li, H. seop Kim, Y. Zhou, and Y. Wu. LIFT: A low-overhead practical information flow tracking system for detecting general security attacks. In Proceedings of the 39th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO’06), December 2006.
[32] Rootkit revealer. http://www.sysinternals.com/Files/RootkitRevealer.zip.
[33] J. Rutkowska. System virginity veriﬁer: Deﬁning the roadmap for malware detection on windows systems. In Hack In The Box Security Conference, September 2005. http://www.invisiblethings.org/papers/hitb05_virginity_verifier.ppt.
[34] Sony’s DRM Rootkit: The Real Story. http://www.schneier.com/blog/archives/2005/11/sonys_drm_rootk.html.
[35] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure program execution via dynamic information flow tracking. In Proceedings of the 11th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’04), October 2004.
[36] The Sleuth Kit (TSK). http://www.sleuthkit.org/sleuthkit/.
[37] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained Malware Analysis using Stealth Localized-Executions. In Proceedings of 2006 IEEE Symposium on Security and Privacy (Oakland’06)), may 2006.
[38] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Cross-Site Scripting Prevention with Dynamic Data Tainting and Static Analysis. In Proceeding of the Network and Distributed System Security Symposium (NDSS’07), February 2007.
[39] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson, M.-W. Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper: Monitoring Auto-Start Extensibility Points (ASEPs) for spyware management. In Proceedings of the Large Installation System Administration Conference (LISA’04), November 2004.