### Easily Extending to Support Additional Metrics

A3 can be easily extended to support additional metrics by constructing small adapters that interface with Information Providers. This adaptability allows A3 to support policies that reference a diverse set of routing criteria.

### Acknowledgments

The authors are grateful to the anonymous reviewers for their insightful feedback. This work is partially supported by NSF Grants CNS-0831376, CNS-0524047, and CNS-0627579; DARPA Grant ONR-N00014-09-1-0770; and OSD/AFOSR MURI Collaborative Policies and Assured Information Sharing. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### Appendix A: Link-based Tunable Performance/Anonymity Selection in A3LOG

The WEIGHTED link-based path selection algorithm operates in two phases:

1. **Candidate Path Generation**:
   - The initiator rapidly generates (but does not instantiate) candidate paths consisting of three relays chosen uniformly at random without replacement.
   - The initiator computes the end-to-end (e2e) cost of each generated candidate path.

2. **Path Selection**:
   - The initiator sorts the candidate paths by their cost estimates.
   - Using the family of functions introduced by Snader and Borisov [40] (see Eq. 1), the initiator instantiates the candidate path with index \(\lfloor n \cdot f_s(x) \rfloor\), where \(x\) is chosen uniformly at random from \([0, 1)\), and \(n\) is the number of nodes.
   - A larger value of \(s\) more heavily weighs path selection in favor of performance. The \(s\) parameter is denoted by the `S` attribute in the initial path request.

#### Representation in A3LOG

```a3log
w1 eCandidatePaths(Src, Dst, S, RAND(3, 100), PathCosts) :-
    ePathRequest(Src, Dest, S), node(IP, Coord),
    Src != IP, Dst != IP, PathCosts = {}.

w2 eCandidatePaths(Src, Dst, S, PathList, PathCosts) :-
    PathCosts),
    f_size(PathList) > 0, P=f_popfront(PathList),
    PathCost=f_coorddist(Src.Coord, P[0].Coord) +
             f_coorddist(P[0].Coord, P[1].Coord) +
             f_coorddist(P[1].Coord, P[2].Coord) +
             f_coorddist(P[2].Coord, Dst.Coord),
    PathCosts.append([P, PathCost]).

w3 ePathResult(Src, Dest, Path) :-
    eCandidatePaths(Src, Dst, S, PathList, PathCosts),
    f_size(PathList) = 0,
    SortedPathCosts=f_sortByField(PathCosts, "PathCost", "desc"),
    sbRand = (1 - 2^S * f_rand01()) / (1 - 2^S),
    Path = f_selectIndex(SortedPathCosts, sbRand).P.
```

- Rule `w1` first generates 100 random permutations of three elements each from the node table.
- Rule `w2` repeatedly converts these list elements into pairs with the path’s e2e cost, based on the embedded coordinates.
- Rule `w3` sorts this list and selects an index using the Snader-Borisov random variable described in Eq. 1, with a tunable performance parameter `S`. Note that in this case, we sort in reverse order since lower latency is preferred to higher latency. The above rule assumes a left-to-right execution ordering of predicates. This assumption can be avoided with a more verbose version of the program using additional rules.

### Appendix B: Tor and Crowds in A3LOG

#### Tor

Unlike Onion Routing, where the initiator recursively builds a single onion that is relayed along the entire path, Tor specifies an incremental telescoping path instantiation strategy. At a high level, a circuit initiator sends a `CREATE` message to the first Tor router in the desired circuit. The Tor router establishes local state and replies, resulting in a path of length one. If the initiator chooses to add another hop to the end of the path, they relay an `EXTEND` message to the current endpoint. The current endpoint translates the `EXTEND` into a `CREATE` message and sends it to the desired new endpoint. The new endpoint of the circuit replies with a confirmation message, which is forwarded back to the initiator. The initiator may continue to extend the path as desired.

Both `CREATE` and `EXTEND` messages can be encoded as A3LOG message tuples, containing half of a Diffie-Hellman handshake, encrypted with the public key of the desired new endpoint. The new endpoint completes the handshake with the initiator, resulting in symmetric keys shared with the initiator, similar to Onion Routing. The encryption/decryption modules can be implemented as a CView module with the corresponding cryptographic functions, as described in Section 6.2. Tor’s telescoping path establishment implies that \(n\) messages are exchanged in each direction to establish a circuit of length \(n\). The \(k\)-th message sent in the forward direction is essentially an onion with \(k\) layers. For sending messages between Tor routers, Tor specifies a link-layer protocol similar to that of Onion Routing.

#### Crowds

The process of path instantiation in Crowds commences when an initiator starts an anonymous relay on their machine called a jondo and contacts a server to obtain membership in a crowd—a collection of anonymous users. To build a path, the initiator forwards a request to a jondo chosen uniformly at random—possibly their own. Upon receiving a request to create a path, a jondo chooses to extend the path to another jondo (again chosen uniformly at random) with probability \(p_f\), or ceases path creation with probability \(1 - p_f\).

Typically, an initiator will use a single bidirectional path for all anonymous communication. However, to preserve anonymity properties, all initiators must create a new circuit—and cease using any previous ones—whenever a new jondo joins the crowd.

Below, we exhibit the forward half of the path instantiation scheme used in Crowds in the following rules:

```a3log
c0 circuitStatus(CID, "BUILDING"),
circuitForward(CID, ACI_out, Node_out),
extend(@Node_out, ACI_out, Me) :-
    establish_path(), ACI_out = f_gen_aci(),
    CID = f_gen_cid(), random_jondo(&Node_out).

c1 circuitReverse(CID, ACI_in, Node_in),
incoming(CID, X) :-
    extend(@Me, ACI_in, Node_in),
    X = f_rand01(), CID = f_gen_cid().

c2 circuitForward(CID, ACI_out, Node_out),
extend(@Node_out, ACI_out, me) :-
    incoming(CID, X), p_forward(P), X < P, another set of rules
    relays a confirmation back to the initiator informing them that the newly instantiated path is ready for use.
```

- Rule `c0` begins the process of building a new path of jondos in response to an `establish_path` event. Such an event is triggered when a node retrieves a new list of jondos, for example. `c0` generates a CID and ACI for the new circuit and selects a jondo uniformly at random (using the `random_jondo` CView) to receive the path extension request, `extend`.
- Rule `c1` generates a random number in the range \([0, 1]\), as well as a CID for the circuit. `c1` also derives a local `incoming` event, containing the local CID of the new circuit and the previously generated random number. The `incoming` event triggers rule `c2`.
- Rule `c2` continues the path extension process, and if the random number \(X\) is less than the forward probability \(P\), another set of rules relays a confirmation back to the initiator, informing them that the newly instantiated path is ready for use.

### References

[1] Tor Directory Protocol, Version 3. https://git.torproject.org/checkout/tor/master/doc/spec/dir-spec.txt.

[2] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. The Case for Resilient Overlay Networks. In HOTOS '01: Proceedings of the Eighth Workshop on Hot Topics in Operating Systems, page 152, 2001.

[3] K. Bauer, D. McCoy, D. Grunwald, T. Kohno, and D. Sicker. Low-Resource Routing Attacks Against Tor. In Proceedings of the 2007 ACM Workshop on Privacy in Electronic Society, pages 11–20, 2007.

[4] O. Berthold, H. Federrath, and M. Köhntopp. Project "Anonymity and Unobservability in the Internet". In CFP '00: Proceedings of the Tenth Conference on Computers, Freedom and Privacy, pages 57–65, 2000.

[5] M. Costa, M. Castro, R. Rowstron, and P. Key. PIC: Practical Internet Coordinates for Distance Estimation. In International Conference on Distributed Computing Systems, 2004.

[6] F. Dabek, R. Cox, F. Kaashoek, and R. Morris. Vivaldi: A Decentralized Network Coordinate System. SIGCOMM Comput. Commun. Rev., 34(4):15–26, 2004.

[7] F. Dabek, J. Li, E. Sit, F. Kaashoek, R. Morris, and C. Blake. Designing a DHT for Low Latency and High Throughput. In NSDI, 2004.

[8] R. Dingledine and N. Mathewson. Tor Path Specification, January 2008. http://www.torproject.org/svn/trunk/doc/spec/path-spec.txt.

[9] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The Second-Generation Onion Router. In Proc. of the 13th Usenix Security Symposium, pages 303–320, 2004.

[10] H. Federrath. JAP: Anonymity & Privacy. http://anon.inf.tu-dresden.de/.

[11] P. Francis, S. Jamin, C. Jin, Y. Jin, D. Raz, Y. Shavitt, and L. Zhang. IDMaps: A Global Internet Host Distance Estimation Service. IEEE/ACM Trans. Netw., 9(5):525–540, 2001.

[12] M. Freedman, K. Lakshminarayanan, and D. Mazières. OASIS: Anycast for Any Service. In Networked Systems Design and Implementation (NSDI), May 2006.

[13] M. J. Freedman and R. Morris. Tarzan: A Peer-to-Peer Anonymizing Network Layer. In CCS, Washington, D.C., November 2002.

[14] K. P. Gummadi, S. Saroiu, and S. D. Gribble. King: Estimating Latency between Arbitrary Internet End Hosts. In ACM SIGCOMM Workshop on Internet Measurement (IMW), 2002.

[15] M. A. Kaafar, L. Mathy, C. Barakat, K. Salamatian, T. Turletti, and W. Dabbous. Securing Internet Coordinate Embedding Systems. In ACM SIGCOMM, August 2007.

[16] M. A. Kaafar, L. Mathy, T. Turletti, and W. Dabbous. Real Attacks on Virtual Networks: Vivaldi Out of Tune. In SIGCOMM Workshop on Large-Scale Attack Defense (LSAD), pages 139–146, 2006.

[17] “King” Data Set. Available at http://pdos.csail.mit.edu/p2psim/kingdata/.

[18] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click Modular Router. ACM Transactions of Computer Systems, 18(3), 2000.

[19] B. T. Loo, T. Condie, J. M. Hellerstein, P. Maniatis, T. Roscoe, and I. Stoica. Implementing Declarative Overlays. In SOSP, 2005.

[20] B. T. Loo, J. M. Hellerstein, I. Stoica, and R. Ramakrishnan. Declarative Routing: Extensible Routing with Declarative Queries. In SIGCOMM, 2005.

[21] H. Madhyastha, E. Katz-Bassett, T. Anderson, A. Krishnamurthy, and A. Venkataramani. iPlane Nano: Path Prediction for Peer-to-Peer Applications. In Proc. of the USENIX Conference on Networked Systems Design and Implementation (NSDI), 2009.

[38] M. Sherr, B. T. Loo, and M. Blaze. Towards Application-Aware Anonymous Routing. In Second USENIX Workshop on Hot Topics in Security (HotSec), August 2007.

[39] C. Shields and B. N. Levine. A Protocol for Anonymous Communication over the Internet. In CCS '00: Proceedings of the 7th ACM Conference on Computer and Communications Security, pages 33–42, New York, NY, USA, 2000. ACM Press.

[40] R. Snader and N. Borisov. A Tune-up for Tor: Improving Security and Performance in the Tor Network. In 15th Annual Network and Distributed System Security Symposium (NDSS), February 2008.

[41] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan. Chord: A Scalable Peer-to-Peer Lookup Service for Internet Applications. In SIGCOMM, 2001.

[42] B. Wong, A. Slivkins, and E. G. Sirer. Meridian: a Lightweight Network Location Service without Virtual Coordinates. In SIGCOMM, 2005.

[43] D. J. Zage and C. Nita-Rotaru. On the Accuracy of Decentralized Virtual Coordinate Systems in Adversarial Networks. In CCS, 2007.

[44] L. Zhuang, F. Zhou, B. Y. Zhao, and A. Rowstron. Cashmere: Resilient Anonymous Routing. Proc. of NSDI, 2005.

[22] Y. Mao, B. T. Loo, Z. Ives, and J. M. Smith. MOSAIC: Unified Platform for Dynamic Overlay Selection and Composition. In 5th ACM International Conference on Emerging Networking Experiments and Technologies, 2008.

[23] A. Mislove, G. Oberoi, A. Post, C. Reis, P. Druschel, and D. S. Wallach. AP3: Cooperative, Decentralized Anonymous Communication. In 11th Workshop on ACM SIGOPS European Workshop: Beyond the PC, page 30, 2004.

[24] S. J. Murdoch and R. N. M. Watson. Metrics for Security and Performance in Low-Latency Anonymity Systems. In 8th Privacy Enhancing Technologies Symposium (PETS 2008), July 2008.

[25] T. S. E. Ng and H. Zhang. A Network Positioning System for the Internet. In Proceedings of the 2004 USENIX Annual Technical Conference, June 2004.

[26] L. Øverlier and P. Syverson. Locating Hidden Servers. In IEEE Symposium on Security and Privacy, 2006.

[27] K. Park and V. Pai. CoMon: A Monitoring Infrastructure for PlanetLab. http://comon.cs.princeton.edu.

[28] PlanetLab. http://www.planet-lab.org.

[29] R. Ramakrishnan and J. D. Ullman. A Survey of Research on Deductive Database Systems. Journal of Logic Programming, 23(2), 1993.

[30] M. Reed, P. Syverson, and D. Goldschlag. Anonymous Connections and Onion Routing. IEEE Journal on Selected Areas in Communications, 16(4), May 1998.

[31] M. K. Reiter and A. D. Rubin. Crowds: Anonymity for Web Transactions. In ACM Transactions on Information and System Security, 1998.

[32] M. Rennhard and B. Plattner. Introducing MorphMix: Peer-to-Peer Based Anonymous Internet Usage with Collision Detection. In WPES '02: Proceedings of the 2002 ACM Workshop on Privacy in the Electronic Society, pages 91–102, 2002.

[33] D. Saucez, B. Donnet, and O. Bonaventure. A Reputation-Based Approach for Securing Vivaldi Embedding System. In Dependable and Adaptable Networks and Services, 2007.

[34] Y. Shavitt and T. Tankel. Big-bang Simulation for Embedding Network Distances in Euclidean Space. In IEEE Infocom, April 2003.

[35] M. Sherr. Coordinate-Based Routing for High Performance Anonymity. PhD thesis, CIS Department, University of Pennsylvania, 2009.

[36] M. Sherr, M. Blaze, and B. T. Loo. Scalable Link-Based Relay Selection for Anonymous Routing. In 9th Privacy Enhancing Technologies Symposium (PETS 2009), August 2009.

[37] M. Sherr, M. Blaze, and B. T. Loo. Veracity: Practical Secure Network Coordinates via Vote-based Agreements. In USENIX Annual Technical Conference (USENIX '09), June 2009.