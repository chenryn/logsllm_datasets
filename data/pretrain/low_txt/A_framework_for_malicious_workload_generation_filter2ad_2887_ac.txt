### Impact on the PIX

The PIX, being responsible for Network Address Translation (NAT), must maintain state for each connection. Even with a single MACE host, all 64 MB of system memory is consumed after a short while due to this state requirement. While some memory remains available for buffering packets as they flow through the system, this pool is significantly reduced, thereby diminishing the PIX's ability to handle bursts of packets. This issue does not arise with spoofed SYN floods, as the source addresses do not conform to the NAT configuration and are dropped.

In our traces, we observed persistent dropping of legitimate packets during non-spoofed SYN floods and multimodal experiments, both in low and high background traffic regimes. The aggregate traffic rates through the PIX clearly demonstrate the well-known poor performance of TCP under high packet loss conditions. For example, in the low background SYN flood experiment using one MACE host, the inbound (external to internal) packet rate through the PIX for the spoofed SYN flood was nearly twice that of the non-spoofed SYN flood. In experiments with multiple MACE processes, the results were even more dramatic.

Maintaining state and managing system resources under a low-rate non-spoofed SYN flood is challenging even for specialized devices. The rate at which resources consumed by embryonic connections are reclaimed by the PIX suggests there is likely a "sweet spot" where SYNs can be sent at a low enough rate to cause problems for legitimate traffic but not at a high enough rate to be easily detected.

Worms like Welchia and Blaster typically generate short flows, so even with a low attack rate, the primary effect on the PIX is an increased rate of connection initiations. To the PIX (without special packet filters), these worms appear as benign traffic and are treated similarly to other legitimate packets. In our experiments, the PIX seemed sufficiently provisioned to handle the increased volume.

Interestingly, while all Rose and spoofed SYN flood packets are dropped by the PIX, these attacks have peculiar effects on CPU usage. Without detailed internal information, we surmise that the path for handling IP fragments is significantly faster than the process of matching a source address to the NAT configuration. However, as noted, there is a potential denial-of-service problem related to fragment processing.

**Summary:**
1. Non-spoofed low-rate SYN floods are effective resource exploits leading to significant service degradation.
2. Obfuscations via packet fragmentation are effective resource exploits against poorly configured systems.

### Effects on Bro and Snort

There is a stark contrast in the behavior of Bro and Snort. For instance, the Rose attack has little effect on Bro but a substantial impact on Snort. Both Bro and Snort receive raw packets from the network interface and must perform reassembly of fragments. Bro handles fragments more efficiently than Snort, despite maintaining more overall state.

For Bro, similar to the PIX, the non-spoofed SYN flood has the greatest impact on CPU load and packet loss. Bro maintains state for all attack-induced connections and periodically expires idle connection state. However, the rate of SYNs in our experiment was high enough to exhaust available memory. As the table of known connections grows, state lookups become more costly, resulting in increased packet drops, as shown in the center column graphs of Figure 5. The spoofed SYN flood has little impact on Bro because the PIX blocks the spoofed SYNs, allowing Bro to flush the embryonic connection state more efficiently.

Snort performs similarly under most attacks, except for the Welchia attack. The SYN floods, Rose, and multimodal attacks contain packet-level anomalies, whereas Welchia appears as legitimate background traffic to Snort. Efficiently processing ill-formed packets and pathological sequences is a critical and challenging requirement for NIDS.

Regarding packet loss, Bro and Snort again exhibit contrasting behavior. Except for the Welchia attack, Snort consistently drops about 20-30% of all packets once MACE traffic is introduced. Bro, despite maintaining significant connection-level state, drops a relatively small proportion of packets, except during the non-spoofed SYN flood attack. Significant packet dropping affects the ability of both NIDS to detect ongoing attacks and could be exploited by attackers to mask more insidious activities.

**Summary:**
1. Multiple attack vectors are effective resource exploits leading to packet loss, implying degraded detection rates.
2. The marginal impact of resource exploits does not appear to be greater for NIDS maintaining connection state.

### Conclusions and Future Work

The escalation of malicious activity on the Internet underscores the need for better tools to measure the resiliency of routers and middleboxes to malicious traffic. To address this, we propose MACE, a framework for generating malicious network traffic. The MACE architecture consists of three components: exploits, obfuscators, and propagation elements. These components define and create malicious traffic for laboratory testing of routers and network security infrastructure. Our experimental results on a popular firewall and two NIDS document the varying responses of these systems to malicious traffic, showing that even low rates of attack traffic can exploit the overheads of maintaining connection state or inefficient packet processing.

A tool like MACE can be used for testing and refining network systems, but it could also be misused to generate malicious traffic in the live Internet. Our plan is to provide the code only to legitimate researchers and maintain careful documentation of who has access to the code. Despite these precautions, there is still a risk of misuse. While MACE cannot self-propagate, it could be used to seed new worms.

We plan to expand the list of exploit and obfuscation components within MACE and improve its ability to produce higher volumes of exploit traffic. These enhancements will facilitate the laboratory emulation of large-scale failure scenarios using more elaborate physical and logical topologies and a greater diversity of network devices.

### Acknowledgements

We thank Somesh Jha, Jon Giffin, Shai Rubin, and the anonymous reviewers for their helpful comments. This work was supported by the National Science Foundation under Grant No. 0335234 and by support from Cisco Systems. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation or Cisco Systems.

### References

[1] Microsoft Security Bulletin MS03-007. http://www.microsoft.com/technet/security/bulletin/MS03-007.mspx, 2003.
[2] Microsoft Security Bulletin MS03-026. http://www.microsoft.com/technet/security/bulletin/MS03-026.mspx, 2003.
[3] Nessus. http://www.nessus.org, 2004.
[4] The Network Simulator â€“ ns-2. http://www.isi.edu/nsnam/ns, 2004.
[5] NISCC Vulnerability Advisory 236929. http://www.uniras.gov.uk/vuls/2004/236929/, 2004.
[6] THOR: A Tool to Test Intrusion Detection Systems by Variations of Attacks. http://thor.cryptojail.net/, 2004.
[7] M. Allman. On the Performance of Middleboxes. In Proceedings of ACM SIGCOMM Internet Measurement Conference, 2003.
[8] E. J. Aronne. The Nimda worm: An overview. http://www.sans.org/rr/papers/36/95.pdf, 2001.
[9] P. Barford and M. Crovella. Generating Representative Web Workloads for Network and Server Performance Evaluation. In Proceedings of ACM SIGMETRICS, 1998.
[10] J. Cowie, A. Ogielsky, B. Premore, and Y. Yuan. Global Routing Instabilities Triggered by CodeRed II and Nimda Worm Attacks. http://www.renesys.com/projects/bgp instability, 2001.
[11] S. Crosby and D. Wallach. Denial of Service via Algorithmic Complexity Attacks. In USENIX Security, 2003.
[12] Gandalf. IP Fragmentation -> The Rose Attack. http://www.securityfocus.com/archive/1/359144, 2004.
[13] W. Lee, J. B. Cabrera, A. Thomas, N. Baliwalli, S. Saluja, and Y. Zhang. Performance Adaptation in Real-Time Intrusion Detection Systems. In Proceedings of RAID, 2002.
[14] R. Lippmann, D. J. Fried, I. Graf, J. W. Haines, K. R. Kendall, D. McClung, D. Weber, S. E. Webster, D. Wyschogrod, R. K. Cunningham, and M. A. Zissman. Evaluating Intrusion Detection Systems: 1998 DARPA Off-line Intrusion Detection Evaluation. In Proceedings of IEEE Security Symposium, 1998.
[15] J. Mirkovic and P. Reiher. A Taxonomy of DDoS Attack and DDoS Defence Mechanisms. ACM SIGCOMM Computer Communication Review, 32(2), 2004.
[16] D. Mutz, G. Vigna, and R. Kemmerer. An Experience Developing an IDS Simulator for the Black-Box Testing of Network Intrusion Detection Systems. In Proceedings of ACSAC, 2003.
[17] J. Sommers and P. Barford. Self-Configuring Network Traffic Generation. In Proceedings of ACM SIGCOMM Internet Measurement Conference, 2004.
[18] N. Weaver, V. Paxson, S. Staniford, and R. Cunningham. A Taxonomy of Computer Worms. In Proceedings of CCS Worms, 2003.