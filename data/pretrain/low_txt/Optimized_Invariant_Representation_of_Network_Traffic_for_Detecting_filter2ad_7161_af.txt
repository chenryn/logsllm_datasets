### Improved Text

This representation will be more robust. 

Next, a two-class Support Vector Machine (SVM) classifier was evaluated on five different representations: baseline flow-based, per-feature histograms of values \( \phi(z_{X_k}) \) (bag mean), per-feature histograms of feature differences \( \phi(z_{S_k}) \) (bag variance), the combination of both (bag combined), and the combination of both with bin optimization (optimized bag combined). The training and testing datasets were composed of bags as described in Table 2.

The results on the testing data are depicted in Figure 10. It is important to note that the positive bags in the testing set are from different malware categories than those in the training set, which makes the classification problem significantly more challenging.

The purpose of this evaluation is to compare the flow-based representation, which is commonly used in previously published work, with the proposed invariant representation. The flow-based representation showed very unsatisfactory results, mainly because the classifier was based only on the values of flow-based features, which are not robust across different malware categories (as shown in Section 7). The classifier based on the combined bag representation performed significantly better. These results were further improved when the parameters of the invariant representation were learned automatically from the training data (optimized bag combined), as shown in Figure 10 with a logarithmic scale.

Figure 11 depicts the precision-recall curve for the SVM classifier trained on the proposed representation with different numbers of histogram bins for each feature. All classifiers were outperformed by the classifier where the parameters of the invariant representation were learned automatically from the data (optimized bag combined). This classifier achieved 90% precision (9 out of 10 alerts were malicious) and 67% recall on previously unseen malware families.

Overall, the results highlight the importance of combining both types of histograms introduced in Section 4, allowing the representation to be more descriptive and precise without sacrificing recall. Most importantly, when the parameters of the representation are trained to maximize the separability between malicious and legitimate samples, the resulting classifier performs an order of magnitude better than a classifier with manually predefined parameters.

### Conclusion

This paper proposes a robust representation suitable for classifying evolving malware behaviors. It groups sets of network flows into bags and represents them using a combination of invariant histograms of feature values and feature differences. The representation is designed to be invariant under shifting and scaling of feature values and under permutation and size changes of the bags. The proposed optimization method learns the parameters of the representation automatically from the training data, allowing classifiers to create robust models of malicious behaviors capable of detecting previously unseen malware variants and behavior changes.

The proposed representation was deployed on corporate networks and evaluated on real HTTP network traffic, including more than 43,000 malicious samples and over 15 million samples overall. The comparison with a baseline flow-based approach and a widely-used signature-based web security device showed several key advantages of the proposed representation. First, the invariant properties of the representation result in the detection of new types of malware. Specifically, the proposed classifier trained on the optimized representation achieved 90% precision (9 out of 10 alerts were malicious) and detected 67% of malware samples of previously unseen types and variants. Second, multiple malware behaviors can be represented in the same feature space, while current flow-based approaches necessitate training a separate detector for each malware family. This way, the proposed system considerably increases the capability of detecting new variants of threats.

### References

[1] Cisco NetFlow. http://www.cisco.com/warp/public/732/tech/netflow.
[2] Antonakakis, M., Perdisci, R., Nadji, Y., Vasiloglou, N., Abu-Nimeh, S., Lee, W., & Dagon, D. (2012). From throw-away traffic to bots: Detecting the rise of DGA-based malware. In Proceedings of the 21st USENIX Conference on Security Symposium (pp. 24-24).
[3] Bailey, M., Oberheide, J., Andersen, J., Mao, Z., Jahanian, F., & Nazario, J. (2007). Automated classification and analysis of internet malware. In Recent Advances in Intrusion Detection (pp. 178-197).
[4] Ben-David, S., Blitzer, J., Crammer, K., Pereira, F., et al. (2007). Analysis of representations for domain adaptation. Advances in Neural Information Processing Systems 19, 137.
[5] Bernaille, L., Teixeira, R., Akodkenou, I., Soule, A., & Salamatian, K. (2006). Traffic classification on the fly. ACM SIGCOMM '06, 36(2), 23-26.
[6] Bilge, L., Balzarotti, D., Robertson, W., Kirda, E., & Kruegel, C. (2012). Disclosure: Detecting botnet command and control servers through large-scale NetFlow analysis. In Proceedings of the 28th Annual Computer Security Applications Conference (pp. 129-138).
[7] Blitzer, J., McDonald, R., & Pereira, F. (2006). Domain adaptation with structural correspondence learning. In Proceedings of the 2006 Conference on Empirical Methods in Natural Language Processing (pp. 120-128).
[8] Chandola, V., Banerjee, A., & Kumar, V. (2009). Anomaly detection: A survey. ACM Computing Surveys, 41, 15:1-15:58.
[9] Choi, H., Zhu, B. B., & Lee, H. (2011). Detecting malicious web links and identifying their attack types. In Proceedings of the 2nd USENIX Conference on Web Application Development (pp. 11-11).
[10] Dai, W., Yang, Q., Xue, G.-R., & Yu, Y. (2007). Boosting for transfer learning. In Proceedings of the 24th International Conference on Machine Learning (pp. 193-200).
[11] Duan, L., Tsang, I. W., & Xu, D. (2012). Domain transfer multiple kernel learning. IEEE Transactions on Pattern Analysis and Machine Intelligence, 34(3), 465-479.
[12] Erman, J., Arlitt, M., & Mahanti, A. (2006). Traffic classification using clustering algorithms. In Proceedings of the 2006 SIGCOMM Workshop on Mining Network Data (pp. 281-286).
[13] Falliere, N. (2011). Sality: Story of a peer-to-peer viral network. Technical report, Symantec Corporation.
[14] Gretton, A., Smola, A., Huang, J., Schmittfull, M., Borgwardt, K., & Sch√∂lkopf, B. (2009). Covariate shift by kernel mean matching. Dataset Shift in Machine Learning, 3(4), 5.
[15] Griffin, K., Schneider, S., Hu, X., & Chiueh, T.-C. (2009). Automatic generation of string signatures for malware detection. In Proceedings of the 12th International Symposium on Recent Advances in Intrusion Detection (pp. 101-120).
[16] Gu, G., Perdisci, R., Zhang, J., Lee, W., et al. (2008). BotMiner: Clustering analysis of network traffic for protocol-and structure-independent botnet detection. In USENIX Security Symposium, 5, 139-154.
[17] Huang, H., Qian, L., & Wang, Y. (2012). A SVM-based technique to detect phishing URLs. Information Technology Journal, 11(7), 921-925.
[18] Invernizzi, L., Miskovic, S., Torres, R., Saha, S., Lee, S., Mellia, M., Kruegel, C., & Vigna, G. (2014). Nazca: Detecting malware distribution in large-scale networks. In Proceedings of the Network and Distributed System Security Symposium (NDSS).

### Examples of Bags

Table 4 provides example URLs of flows from several malicious bags and from two legitimate bags. The URLs within each malicious bag are similar to each other, while the URLs within legitimate bags differ. The small non-zero variability of flow-based feature values is captured by the proposed representation using histograms of features and feature self-similarity matrices. Such transformation of the feature values makes the representation robust to malware changes and unseen variants.