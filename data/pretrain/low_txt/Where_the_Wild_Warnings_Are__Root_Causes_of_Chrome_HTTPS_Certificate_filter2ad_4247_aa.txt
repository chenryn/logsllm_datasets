# Title: Where the Wild Warnings Are: Root Causes of Chrome HTTPS Certificate Errors

## Authors:
- Mustafa Emre Acer, Google Inc.
- Emily Stark, Google Inc.
- Adrienne Porter Felt, Google Inc.
- Sascha Fahl, Leibniz University Hannover
- Radhika Bhargava, Purdue University
- Bhanu Dev, International Institute of Information Technology Hyderabad
- Matt Braithwaite, Google Inc.
- Ryan Sleevi, Google Inc.
- Parisa Tabriz, Google Inc.

## Abstract
HTTPS error warnings are designed to alert users to potential network attacks. However, a wide range of non-malicious circumstances can trigger these warnings, leading to hundreds of millions of spurious alerts each month. These false alarms frustrate users, hinder the adoption of HTTPS, and erode trust in browser warnings. This study investigates the root causes of HTTPS error warnings in real-world scenarios, with the goal of resolving benign errors.

We analyzed over 300 million error reports encountered by Google Chrome users during normal browsing. After manually reviewing more than 2,000 error reports, we developed automated rules to classify the primary causes of HTTPS error warnings. Our system can automatically diagnose the root causes for two-thirds of the error reports. Surprisingly, we found that more than half of the errors are caused by client-side or network issues rather than server misconfigurations. Based on these findings, we implemented more actionable warnings and other browser changes to address client-side error causes. We also propose solutions for other classes of root causes.

## 1. Introduction
HTTPS certificate error warnings are intended to protect users by alerting them to potential network attacks. However, users encounter hundreds of millions of such warnings each month, even in the absence of actual attacks. For example, a user might see a warning when connecting their phone to an office network or when a server administrator forgets to update a certificate. Spurious HTTPS warnings are problematic because:

- **Poor User Experience:** They frighten users and prevent them from completing important tasks.
- **Hinders Adoption of HTTPS:** Developers become frustrated when they switch a website to HTTPS and receive complaints about errors from customers.
- **Erodes Trust in Warnings:** Over time, people pay less attention to warnings if they believe them to be false alarms, which is dangerous as they may ignore a genuine attack.

Despite these issues, removing HTTPS error warnings entirely is not a viable solution, as they are fundamental to web security. When an attacker intercepts a connection, the browser detects the invalid certificate chain and warns the user. If the user ignores the warning, the attacker can read and tamper with data on the website.

Browser vendors have attempted to improve HTTPS error warnings through changes to the user interface (UI) and storage policies. Although these improvements have increased warning adherence, the core problem of false alarms persists. Our goal is to balance both needs: remove spurious warnings without compromising legitimate ones.

To address this, we first need to understand the root causes of these warnings. We investigated the most common causes of certificate errors in a large-scale dataset of HTTPS error warnings encountered in the field. Chrome users volunteered to share HTTPS error reports, averaging one million reports per day over one year. We developed an analysis pipeline that automatically classifies errors by their root cause when possible. Two-thirds of the reports can be automatically classified, and we manually reviewed a sample of the remainder.

Our findings show that more than half of the certificate errors are due to non-attack network interception or client-side issues. Previous research focused primarily on server misconfigurations, but our study highlights the importance of client and network health. Specifically, insufficient intermediates and incorrect client clocks are the most significant individual error causes for Android and Windows clients. These error classes are good targets for mitigations to prevent unnecessary warnings. Additionally, government websites disproportionately contribute to server errors, with 65% of the most-visited websites with warnings being run by governments. The prevalence of errors on government websites is concerning because it trains users to ignore warnings on important sites like tax payment portals.

Many of these problems can be mitigated by building more actionable warnings in the browser or investing in other client-side engineering solutions. We propose several mitigations and have implemented four of them for Google Chrome, an open-source browser with over two billion active users. These four mitigations are expected to replace about 25% of error warnings.

### Contributions
Our primary contributions include:

- **Large-Scale Dataset Analysis:** We collected and analyzed a large, longitudinal dataset of certificate warnings encountered in the wild, performing an in-depth study of each class of error.
- **Identification of Client and Network Issues:** To our knowledge, we are the first to identify and quantify the significant role that client and network misconfigurations play in HTTPS error warnings.
- **Characterization of Misconfigured Sites:** Among misconfigured sites, we characterized the "worst offenders," which are dominated by government websites.
- **Technical Mitigations:** We are the first to deploy technical measures to reduce the frequency of spurious HTTPS error warnings. We also propose and discuss further mitigations for future work.

## 2. Background
HTTPS protects the integrity and confidentiality of web traffic, even in the presence of an active network attacker. Historical network attackers include governments, ISPs, roommates, criminals on public networks, and others.

When a browser sets up an HTTPS connection with a server, it must verify that it is communicating with the actual server and not a network attacker. This process involves three main steps:

1. **Certificate Acquisition:** The server administrator obtains a certificate signed by a Certificate Authority (CA).
2. **Certificate Presentation:** The server provides the signed certificate to the browser after setting up a TCP connection.
3. **Certificate Validation:** The browser attempts to build a chain of trust from the certificate to a root certificate on the client. The root trust store on the client contains a set of root certificates from trusted CAs. The browser also performs other checks, such as verifying the hostname and ensuring the certificate is not expired. Any failure means the browser is unsure of the server's identity.

If all checks pass, the HTTPS page loads. If a validation check fails, the browser displays an HTTPS error warning without loading any content.

TLS proxies complicate this process. Middleboxes (e.g., corporate network firewalls, school content filters) and software (e.g., anti-virus software, debugging tools) intercept HTTPS traffic for various legitimate purposes. This is achieved by installing a root certificate from the TLS proxy vendor into the client’s trust store. The proxy then issues new certificates for the client’s incoming web traffic, signed by the proxy’s root certificate. This practice is widespread but controversial because TLS proxies can introduce vulnerabilities.

## 3. Dataset
Millions of Google Chrome users volunteer to upload error reports when they encounter HTTPS or Safe Browsing warnings. Our study is based on a large-scale sample of these reports.

### 3.1 Our Volunteers
Users opt-in to share certificate error reports by checking a checkbox on the HTTPS warning page. Once checked, the setting is remembered in a preference associated with the user’s Chrome profile. Users can stop participating by unchecking the box or adjusting settings in Chrome. A similar checkbox on Safe Browsing warnings also allows users to toggle this setting.

The size of our dataset (one million reports per day) suggests it represents a large portion of browser users. For privacy reasons, we do not analyze or retain identifying information to characterize our volunteers.

### 3.2 Sample Dates and Size
We enabled the reporting service in Google Chrome 44, released in July 2015. Our primary focus is on data from April 2016 through March 2017, referred to as the Annual Reports sample, containing 361,198,513 reports.

All Google Chrome release channels (canary, dev, beta, and stable) upload reports. Most users are on the stable channel, which has wide deployment. To avoid overwhelming our report processing pipeline, stable Chrome sends a given certificate report to the server with only a 20% probability. Our analysis is restricted to reports from the stable channel, which we believe to be the most representative.

### 3.3 Report Contents
Each Chrome certificate error report includes:

- The hostname the user was trying to access
- The certificate chain received from the server
- The certificate chain built by the client
- The user’s local system time at the time of the error
- The certificate validation errors encountered
- Whether Chrome customized the warning page or showed a generic HTTPS warning
- Whether the user clicked through the warning to continue
- The browser’s User-Agent string
- Relevant Chrome field trials, which are features enabled on an experimental basis

Notably, each report contains two certificate chains: the one presented by the server and the one built by the client. They can differ for various reasons, such as the server presenting a chain to a root certificate that the client does not trust.

### 3.4 Privacy
Certificate error reports may contain private information. We take several steps to protect and respect our volunteers’ privacy:

- **No Identifiers:** Reports are not associated with any user or client identifiers.
- **Anonymous Data Retention:** We strip all potentially private data from the reports after two weeks. We remove all certificate chains that have not been seen publicly by Googlebot, retaining only a SHA256 hash of the chain. We retain publicly resolvable hostnames and generic identifiers like “localhost”; otherwise, we replace hostnames with coarse alternatives like “Intranet host” and “Intranet IP.” We tokenize User-Agent strings and retain only the major version number, locale, operating system, and platform.
- **Protection in Transit:** Reports are protected in transit on the network. Since these reports are sent to investigate conditions that prevent the user from sending HTTPS requests, the reports themselves cannot be reliably sent over HTTPS. Therefore, Chrome sends reports to an HTTP URL. The report payload is encrypted with a public key that ships with Chrome to prevent eavesdropping by a network attacker.

### 3.5 Limitations
Field data has inherent limitations, some of which we can mitigate. Despite these, the large scale of our dataset and its in situ collection method yield results with strong ecological and external validity.

- **Active Attacks:** An active network attacker could block reports from being uploaded. The absence of active attacks in our dataset does not mean they do not occur. We focus on unintentional misconfigurations rather than uncovering active attacks.
- **Upload Failures:** Various network conditions can prevent reports from being uploaded. If the upload fails, Chrome does not persist or retry reports.
- **Channel Identification:** We want to restrict our analysis to the stable channel, which has the most representative user population. We use a heuristic to identify reports from the stable channel, but a few non-stable reports might remain.
- **Chromium Forks:** Our dataset contains a small number of reports from other browsers based on the Chromium source code. By inspecting User-Agent strings from May 2017 reports, we believe that less than 2% of reports come from other Chromium browsers.