# 【技术分享】一年的Windows内核字体模糊测试

**译文声明**

本文为翻译文章，原文来源：googleprojectzero。具体内容表达及含义以原文为准。

**翻译:** [Ox9A82](http://bobao.360.cn/member/contribute?uid=2676915949)  
**稿费:** 200RMB（欢迎投稿！）  
**投稿方式:** 发送邮件至 linwei#360.cn 或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿

在过去的一年里，我们通过大规模的模糊测试发现了并报告了总计16个与处理TrueType和OpenType字体相关的Windows内核漏洞。在本篇文章中，我们将首先概述字体漏洞的背景，然后深入解析我们的模糊测试工作，包括整体结果和两个案例研究。在即将发布的第二篇文章中，我们将分享项目的具体技术细节，以及我们如何优化每个过程，并颠覆现有的Windows内核字体模糊测试技术。

## 背景

对于大多数读者来说，字体作为攻击面的重要性不言而喻。日常使用的许多文件格式在结构和语义上都非常复杂，这使得它们难以正确实现。此外，当前使用的大多数字体格式可以追溯到上世纪90年代早期，并且通常是用C或C++等本地语言编写的。字体文件可以通过多种远程渠道交付，如文档、网站和离线文件。更重要的是，负责解释TrueType和OpenType字体格式的两个强大的虚拟机已被证明可以创建可靠的利用链，因为它们能够对内存中的数据执行任意算术运算、位运算及其他操作。基于以上原因，字体一直是内存破坏类漏洞的重要来源。

字体处理漏洞已被广泛用于实际攻击，例如Duqu恶意软件中的Windows内核TTF字体0day漏洞（该类型漏洞已多次紧急修复）、comex通过FreeType漏洞实现的iOS越狱，以及在Pwn2Own 2015竞赛中的成功挑战（Joshua Drake – Java 7 SE – 2013, Keen Team – Windows内核 – 2015）。

过去十年间，微软单独为其字体引擎发布了数十个安全公告，其他厂商和项目在这方面也没有做得更好。目前，安全会议中充满了关于字体模糊测试和已发现漏洞细节的讨论。从用户安全的角度来看，这是一个非常不利的情况。如果一个广泛应用的软件如此脆弱，以至于大多数安全人员都能轻松找到并利用0day漏洞，那么显然存在问题。

## 解决字体程序的安全问题

我们意识到，这个问题需要在更广泛的层面上解决，而不是仅仅记录几个新的漏洞来获得虚假的安全感。目前使用的字体实现不会很快被淘汰，因为性能仍然是字体光栅化的一个重要因素，而且代码库经过多年发展已经达到了很高的成熟度。一种通用的方法是限制字体处理代码在其各自环境中的特权，例如强制FreeType库运行在沙盒中，或将字体引擎移出Windows内核（微软从Windows 10开始尝试这样做）。然而，这些方法大多超出了我们的能力范围。

那么，什么是在我们能力范围内的呢？我们可以增加漏洞挖掘的成本，并完全清除一些程序中的简单漏洞，从而提高相关代码中挖掘漏洞的门槛。自2012年初以来，我们一直使用内部模糊测试工具和可用资源对FreeType项目进行大规模模糊测试。截至今日，我们已经发现了超过50个错误报告，其中许多是可利用的内存破坏漏洞（见Project Zero bug列表）。一些手动代码审计也发现了问题。我们希望这些努力已经清除了大部分或全部通过简单模糊测试就能发现的低级漏洞。

尽管如此，FreeType仍然是一个相对容易的目标——它的开源性使其源代码易于审计，通过充分理解底层逻辑，我们可以采用静态分析算法，并将其编译成任何平台的二进制文件，且具有较低的运行时间开销（与DBI相比）。例如，我们广泛使用了AddressSanitizer、MemorySanitizer和SanitizerCoverage工具，大大提高了错误检测率，并提供了代码覆盖率信息，可用于覆盖驱动的模糊测试。

相比之下，对Windows内核及其字体实现的测试被认为比平均目标更难。源代码不可用，调试符号仅对部分引擎（位图和TTF处理在win32k.sys中，但OTF处理在ATMFD.DLL中）公开。这使得任何手工工作都变得更加困难，因为它必须涉及对间接操作字体数据的代码部分进行逆向工程。此外，代码与图形子系统的其余部分共享同一个模块，这使得所有类型的交互都至关重要。虽然有一些方法可以提高错误发现能力（例如特殊池），但也存在障碍，例如通用异常处理可能会掩盖某些错误。

2015年初，我们通过手工拆解ATMFD中的Type1/CFF虚拟机，这是最理想的审计目标。它完全独立，足够复杂但又大小适中，充满了遗留代码并且似乎在过去没有得到适当的审查。这次审计产生了向微软报告的8个Windows内核漏洞，其中一些极为关键。有关该研究和最有趣的BLEND漏洞的详细描述，请参阅博客文章《One font vulnerability to rule them all》。

CharString可以作为一个整体有效地进行审计，但同样的策略不能应用于整个win32k.sys和ATMFD.DLL中的字体相关代码库。庞大的代码量和不同的程序状态使得几乎不可能理解这些代码，更不用说保持整体思考和寻找所有潜在漏洞了。另一种选择当然是进行模糊测试——这种方法不能让我们对代码覆盖状态有十足的信心，但效率很高，只需要在初始设置时花费一点时间，并且模糊测试技术在过去已经被证明是高效的。事实上，根据公开记录，超过90%的字体漏洞都是通过模糊测试发现的。这带来的额外优点是，报告通过模糊测试获得的漏洞可以提高漏洞挖掘者的门槛，因为他们再使用类似简单技术将不再能找到任何漏洞。

考虑到这一点，我们在2015年5月开始了一个Windows内核字体模糊测试项目，试图采取以前在这个方面已知的技术来推进整个过程，并进行优化以实现最高效率。经过大约一年的时间，我们认为内核已经通过我们目前使用的模糊测试技术得到了清理，并相信我们获得的结果和使用的方法对大众来说可能是有趣的，这一系列文章将对此进行总结。

## 结果

以下是我们去年通过模糊测试发现的所有Windows内核漏洞列表：

| 错误条目 | 描述 |
| --- | --- |
| 链接 | 包括崩溃的简要说明，启用特殊池的Windows 7 x86中的崩溃日志样本，以及概念验证文件。 |

为了重现某些崩溃，可能还需要使用Microsoft提供的专用字体加载程序（将在下一篇文章中详细讨论）。

如表所示，崩溃通过三次迭代报告：第一次显然包含了大部分问题，因为模糊测试工具从一开始就遇到了许多不同的状态和代码路径。第二和第三次迭代运行时间更长，以防止漏洞被其他更频繁的崩溃所掩盖。每次运行（3-4个月）之间的时间段是Microsoft为报告的漏洞发布补丁的时间，并与Project Zero的90天披露日期（Microsoft在所有情况下都满足）相关联。一个案例更新了报告的时间，因为我们必须告诉Microsoft复现崩溃所需的系统设置。

漏洞存在于处理SFNT表的代码中，在处理TTF和OTF文件时产生了编程错误。绝大多数问题可以用于本地权限提升（例如沙箱逃逸），甚至可以进行远程代码执行（对于将用户控制的文件直接传递到GDI的应用程序而言），这与Microsoft对这些漏洞的危害性评估一致。虽然我们是在Windows 7上进行模糊测试，但报告的所有错误几乎仍然存在于较新版本的系统中。值得注意的是，虽然在Windows 10中通过在具有受限特权的用户模式进程中执行字体光栅化操作来减轻特权提升场景，但在该过程上下文中的RCE仍然是可行的选择（尽管这比直接危及r0的安全更好一些）。

## 撞洞

没有什么比看到你上报的漏洞与实际攻击中使用的exp（针对0day攻击）出现撞洞更能检验防御性漏洞挖掘的价值了。尽管这些漏洞及其使用在过去有很多记录，但新发现是否会与2015年仍在流传的漏洞相冲突的问题仍有待解决。