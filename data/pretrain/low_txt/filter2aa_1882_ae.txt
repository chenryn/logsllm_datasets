# Penetration Testing and Web Application Security

## Key Recovery from RAM
- **Recovery of Keys from RAM**: This involves extracting cryptographic keys from the system's memory, which can be a critical security risk if not properly managed.

## Insecure Access Points
- **Insecure Serial Console (No Authentication)**: A serial console that does not require authentication can be exploited to gain unauthorized access.
- **JTAG Access/Debugging**: JTAG (Joint Test Action Group) interfaces can be used for debugging but also pose a security risk if not secured.

## Common Cracking Tools
- **Hashcat**:
  - **Windows**
  - **Linux**
- **John The Ripper (John)**: A popular password-cracking tool.

## Web Application Security
### Common Protocols & Languages
- **HTTP**
- **HTTPS**
- **HTML**
- **JavaScript**
- **SQL Databases**
- **Frameworks**:
  - **Node.js**
  - **Angular**
  - **Django**
- **Python**
- **ASP/ASP.NET**
- **PHP**

### Common Web Application Vulnerabilities
- **Weak Security Configurations (Misconfigurations)**
- **Injection Attacks**
- **Broken Authentication**
- **Cross-Site Scripting (XSS)**
- **Cross-Site Request Forgery (CSRF)**
- **Clickjacking**
- **File Inclusion**
- **Weak Coding Practices**

### Common Misconfigurations
- **Rolling Your Own Encryption**: Custom encryption methods are often less secure than established standards.
- **Legacy Content**: Outdated or deprecated content can introduce vulnerabilities.
- **Debugging Modes Enabled**: Debugging modes should be disabled in production environments.
- **Unpatched Vulnerabilities/Using Software with Known Vulnerabilities**: Regular updates and patches are essential.
- **Client-Side Processing**: Relying too heavily on client-side processing can expose vulnerabilities.
- **Default Admin Accounts**: Default accounts should be changed or removed.
- **Insecure Cookies**: Ensure cookies are securely configured.
- **Directory Traversal**:
  - **Read or Execute**: Examples include `../../../etc/passwd` and `%2E%2E%2E%2F/Windows/System32/cmd.exe`.
  - **Double Encoding**: For example, `%25E%25E%25FWindows/System32/cmd.exe`.
  - **Null Byte Encoding**: For example, `index.php?file=../../etc/passwd%00`.

### Testing Tools
- **BURP**
- **OWASP ZAP**

## Lab Tasks
- **Test BURP**
- **Test OWASP ZAP**
- **Manual Identification of Path Traversal**

## Common Web Application Attacks
### Authentication & Authorization Attacks
- **Brute Force**
- **Credential Stuffing**
- **Weak Passwords**
- **Session Hijacking**
- **Man-in-the-Middle (MiTM)**
- **XSS Cookie Theft**
- **Bypass Authentication**
- **Redirection Attack**
- **ReturnURL Attack (ASP.NET)**
- **HTTP Parameter Pollution (HPP)**
- **Insecure Direct Object Reference (IDOR)**

### Injection Attacks
- **Command Injection**
- **SQL Injection (SQLi)**: Test using single quotes (`'`) in form POST/GET requests. Example: `’ or 1=1--;`
- **HTML Injection**: Inject HTML code into forums, etc., to create clickjacking or embedded forms.

### Cross-Site Scripting (XSS)
- **Stored (Persistent)**
- **Reflected (Reflects then Executes)**
- **Blind**
- **DOM-based**
- **Example**: `alert('This site is vulnerable to XSS!');`

### Cross-Site Request Forgery (CSRF)
- **Example**: A user visits a phishing site, clicks a link to a benign site, and an unwanted action occurs, such as adding extra items to a shopping cart.

### Clickjacking
- **Description**: Setting up an iframe on a malicious site to embed content that masquerades as a legitimate site. Can be used with phishing or social engineering.

### Other Vulnerabilities/Exploits
- **File Inclusions**:
  - **Local File Inclusion**
  - **Remote File Inclusion**
- **Logic Errors**
- **Timing Issues (Race Conditions)**
- **No Error Handling**
- **Insecure Functions**
- **Insecure APIs**
- **Insecure Credential Storage/Transmission**
- **Sensitive Information Disclosure**

## Lab Work
- **Learn to use SQLMAP**
- **Run SQLMAP through BURP to understand how it works**
- **Run a manual authentication bypass using SQL injection**
- **Test manual exploitation using union selects**
- **Test path traversal to read /etc/passwd**
- **Demonstrate a self-reflected XSS alert**
- **Demonstrate a stored XSS alert**
- **Demonstrate using a stored XSS with BEEF**

## Source Code Analysis and Compiled Applications
### Static Code Analysis
- **Source Code Review While Not Executing**:
  - **Manual Source Code Review**
  - **Tool-Based Review (SAST – Static Analysis Security Testing)**

### Dynamic Code Analysis
- **Dynamic (DAST)**
- **Fuzzing**: Fault injection by sending random data to the application to look for crashes or unexpected responses.

### Reverse Engineering
- **Debugging Tools**:
  - **Immunity**
  - **Ghidra**
  - **WinDbg**
  - **OllyDbg**
  - **GDB**
  - **IDA/IDA Pro**
- **Decompiling**:
  - **Reverse the compiled binary and convert it to source code**:
    - **Hex-Rays IDA**
    - **VB Decompiler**
    - **Delphi Decompiler**
    - **CFF Explorer**
    - **JetBrains DotPeek**
- **Disassembly**: Translating machine code into Assembly Code.

## Post-Exploitation
### Enumeration
- **Continued Reconnaissance After Gaining Access**

### Lateral Movement
- **Pivoting**:
  - **NetCAT**: Bind and Reverse Shells
  - **SSH**: SSHKeys, AuthorizedHosts
  - **VPN**
  - **Routing Tables**
  - **Metasploit Forwarder**

### Maintaining Persistence
- **Create a Backdoor Account**
- **Create a Service/Daemon**
- **Backdoors**
- **VPNs**
- **Scheduled Tasks/Cron Jobs**
- **Login Scripts, Login Tasks, Start-up Tasks, etc.**
- **Rootkits**:
  - **Firmware**
  - **Kernel**
  - **Filter Drivers**
- **Implants**

### Evading Security Solutions & Anti-Forensics
- **Buffer Overflows**
- **Memory Resident Malware**
- **Packing**
- **Virtual Machine Detection**
- **Clearing Logs**: Whole Log, Specific Log
- **Shredding Files**
- **File Metadata Tampering**
- **Log Tampering**

## Penetration Test Reporting
### Key Areas
- **Categorisation**
- **Prioritisation**
- **Recommendations**

### Report Format
- **Executive Summary**
- **Technical Findings**
- **Recommendations**

### Considerations
- **People**
- **Process**
- **Technology**
- **Customer Business Context**
- **Customer Industry**

### Prioritising Findings
- **Likelihood**
- **Impact**
- **CVSS Score, etc.**

### Authentication Recommendations
- **Do Not Hardcode Credentials in Apps**
- **Use Random SALT and HASH Passwords**
- **Use Strong Encryption, Avoid Weak Hashes**
- **Use Secure Transport (e.g., FTPS/SFTP)**
- **Avoid Protocols with Weak Ciphers**
- **Monitor Unencrypted Traffic**
- **Use Multi-factor Authentication**:
  - **Something You Know**
  - **Something You Have**
  - **Something You Are**
  - **Examples**: Smart Cards, Smartphone Apps, Key Fobs (Yubikey), OTP Keys (RSA)

### Input and Output Sanitisation
- **Escape Characters/Encoding to Stop HTML Rendering**:
  - **Example**: `htmlspecialchars()` function in PHP
  - **HTML Sanitizers**:
    - **Java HTML**
    - **.NET HTML Sanitizer**
    - **HTML Purifier**
    - **SanitizeHelper for Ruby on Rails**
  - **Convert HTML to Markdown**
  - **Prevent NULL Byte by Removing the Input Manually (for Older Browsers)**

### Parametrisation of Queries (Declared Statements)
- **More Effective at Preventing SQL Injection**
- **Parameters Sent to a Pre-Defined Template**

## Hardware and Software Hardening
### Considerations
- **Environment**
- **Hardware**
- **Software**

### Industry Standards
- **CIS Controls**
- **ISO**
- **NIST**
- **SANS**

### Hardening Measures
- **Check with the Vendor**
- **Look at EAL/Common Criteria (Real World)**
- **Ensure Firmware and Software Are Updated**
- **Physical and/or Network Segmentation**

## Mobile Device Management (MDM)
- **Centralised Device and App Management**
- **Similar Systems (MAM)**
- **Centrally Deploy Policies**

### MDM Features
- **PUSH OS, Apps, and Firmware Updates**
- **Enrol and Authenticate Devices**
- **Enforce Policies**
- **Locate Devices**
- **Deploy Based on User Profiles**
- **Remote Wipe/Remote Lock**
- **Send PUSH Notifications**
- **Remote Access**
- **Deploy Containers**
- **Encryption Control**

## Secure Software Development
- **Follow SDLC (Secure Software Development Lifecycle)**
- **Testing**:
  - **Penetration Testing**
  - **Static Code Analysis**
  - **Fuzzing**
  - **Vulnerability Management**
  - **Dependency Management**

### SDLC Characteristics
- **Clear and Simple**
- **Useful and Informative**
- **Easy to Incorporate**
- **Extensible**
- **Few Dependencies**
- **Concise**
- **Use Well-Known and Established Techniques**
- **Integrate with Testing Processes and Harnesses**
- **Align with Business and Design Requirements**

### Phases
- **Planning**
- **Analysis**
- **Design**
- **Implementation**
- **Testing**
- **Maintenance**

## Post-Report Delivery Actions
### Data Normalization
- **Format**
- **Structure**
- **Language**
- **Metrics and Measures**
- **Risk Ratings**: Impact x Likelihood

### Report Structure
- **Executive Summary**
- **Version Control**
- **Document Distribution**
- **Method**
- **Findings**
- **Conclusion**:
  - **Successes**
  - **Failures**
  - **Goal Assessment**
- **Supporting Evidence**

### Risk Appetite
- **How Hungry Is the Customer for Accepting Risk/Residual Risk?**
  - **Compare Risk of Findings vs. Risk Appetite/Tolerance Levels**
  - **How Much Loss Can Be Accepted?**
  - **What Are Acceptable Levels of Availability/Loss of Availability?**

### Report Storage
- **Encrypt at Rest**
- **Encrypt in Transit**
- **Access Control for Authorised Personnel Only**
- **Store for a Specific Limited Amount of Time**

### Report Handling
- **Destruction**
- **Disposition**: Formal process of transferring the report to the customer, who then becomes responsible for it.
- **Sign Off by the Authorised Recipient**

### Post-Engagement Clean-Up Tasks
- **Removal of Access/Credentials**
- **Removal of Tools**

### Acceptance
- **Attestation of Findings**
- **Lessons Learned**
- **Follow-Up Actions**

## Useful Exam Theory Links
- **Microsoft Threat Modelling**:
  - **Step 1. Identify Assets**
  - **Step 2. Create an Architecture Overview**
  - **Step 3. Decompose the Application**
  - **Step 4. Identify the Threats**
  - **Step 5. Document the Threats**
  - **Step 6. Rate the Threats**
  - **Link**: [Microsoft Threat Modelling](https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff648644(v=pandp.10)?redirectedfrom=MSDN)

- **IEEE 802.11 Wireless Standard**:
  - **Link**: [IEEE 802.11](https://en.wikipedia.org/wiki/IEEE_802.11)

### C2 Frameworks
- **Covenant**
- **C2**
- **Cobalt Strike (Commercial)**
- **Metasploit Pro**
- **Core Impact**
- **SharpC2**

### DNS Tunnelling
- **Tools**:
  - **dns2tcp**: [Kali Tools](https://tools.kali.org/maintaining-access/dns2tcp)
  - **iodine**: [Code Kryo](https://code.kryo.se/iodine/)
  - **dnscat2**: [GitHub](https://github.com/iagox86/dnscat2)

## External Resources
- **The Cyber Mentor Courses on Udemy**:
  - **Link**: [The Cyber Mentor](https://www.thecybermentor.com/)
  - **Twitter**: [@thecybermentor](https://twitter.com/thecybermentor)
- **HackTheBox**:
  - **Link**: [HackTheBox](https://www.hackthebox.eu/)
- **TryHackMe**:
  - **Link**: [TryHackMe](https://tryhackme.com/)
- **Pluralsight**:
  - **Link**: [Pluralsight](http://pluralsight.com)

## Proctored Online Exam Details
- **Link**: [Pearson VUE](https://home.pearsonvue.com/Documents/Technical-specifications/Online-Proctored/OP-Advanced.aspx)

## Online Practice Questions - Free
- **Link**: [CompTIA PenTest Practice Test](https://searchsecurity.techtarget.com/quiz/CompTIA-PenTest-practice-test-questions-to-assess-your-knowledge)

## Ordering Exam Vouchers
- **Voucher Resellers**:
  - **Link**: [GraceTech Solutions](http://www.gracetechsolutions.com/)

## Windows Vulnerabilities
- **Links**:
  - **Windows 10**: [CVE Details](https://www.cvedetails.com/product/32238/Microsoft-Windows-10.html?vendor_id=26)
  - **Windows XP**: [CVE Details](https://www.cvedetails.com/product/739/Microsoft-Windows-Xp.html?vendor_id=26)

## OS X
- **Link**: [CVE Details](https://www.cvedetails.com/product/156/Apple-Mac-Os-X.html?vendor_id=49)

## UAC Bypasses
- **Link**: [Medium Article](https://medium.com/@z3roTrust/bypassing-windows-user-account-control-back-for-more-dd5672c48600)

---

**Penetration Testing - Version 0.3**  
**Copyright © Xservus Limited**  
**Pages 54-67**