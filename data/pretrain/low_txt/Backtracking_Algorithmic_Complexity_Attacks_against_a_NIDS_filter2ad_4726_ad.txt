### Snort 2.4.3 Evasion Environment and Experiments

#### Network Setup
- **Snort Version:** 2.4.3
- **Processor:** 2 GHz P4
- **Network Hub:** Fast Ethernet Hub
- **Victim Machine:** HTTP Server, Sendmail Server
- **Traffic Generator:** Background Traffic Generator

#### Figure 9: Live Snort Evasion Environment
The environment consists of a network monitored by Snort, which includes web and mail servers.

#### Experimental Results
- **Test 1 (Control; no attack):** 300/300 exploits detected, no required rate.
- **Test 2 (two packets every 60 sec.):** 220/300 exploits detected, 0.4 kbps required rate.
- **Test 3 (two packets every 15 sec.):** 6/300 exploits detected, 1.6 kbps required rate.
- **Test 4 (one packet every 5 sec.):** 4/300 exploits detected, 2.4 kbps required rate.
- **Test 5 (one packet every 3 sec.):** 0/300 exploits detected, 4.0 kbps required rate.
- **Test 6 (twenty packets initially, one packet every 3 sec.):** 0/300 exploits detected, 0.8 kbps required rate.
- **Test 7 (memoization enabled, twenty packets initially, one packet every 3 sec.):** 300/300 exploits detected, no required rate.
- **Test 8 (memoization enabled, twenty packets initially, one packet every 3 sec.):** 300/300 exploits detected, no required rate.

#### Summary of Live Snort Experiments
- **Without Memoization:** 300 intrusions pass into the network undetected.
- **With Memoization:** All 300 intrusions are successfully detected.

### Discussion
Algorithmic complexity attacks often become evident once they are properly described, yet software remains vulnerable to such attacks. A key defense is to consider worst-case performance in critical algorithms and ensure it does not significantly differ from average-case performance. For example, the Bro NIDS has been shown to be susceptible to denial of service due to unconsidered worst-case time complexity in hash functions [9].

#### Potential Vulnerabilities in NIDS
- **Deterministic Finite Automata (DFA) Systems:** Can experience exponential memory requirements when combining DFAs for individual rules. Incremental state creation can reduce this, but adversaries may construct packets that trigger incremental state creation, leading to increased computation costs and potential memory exhaustion.
- **Nondeterministic Finite Automata (NFA) Systems:** Reduce memory requirements by allowing multiple states concurrently. Backtracking or maintaining multiple states can be exploited to cause excessive backtracking or state updates.
- **Predicate-Based Systems (e.g., Snort):** Can be slowed down if an attacker forces more predicates to be evaluated than in the average case. For example, payloads that trigger large numbers of rules can lead to excessive predicate evaluations.

Preliminary work combining these observations has resulted in packet processing times in Snort that are up to 1000 times slower than average. This highlights the significant security risks posed by unaddressed algorithmic complexity attacks.

### Conclusions and Future Work
Algorithmic complexity attacks are effective when they trigger worst-case behavior far exceeding average-case behavior. We have described a new backtracking attack that exploits rule matching algorithms in NIDS, achieving slowdowns of up to six orders of magnitude. In real-time NIDS, this can lead to evasion as the system cannot keep up with incoming traffic.

To counter this attack, we developed a semantics-preserving defense based on memoization, which brings Snort's performance on attack packets to within an order of magnitude of benign packets. Our solution continues the trend of providing algorithmic solutions to algorithmic complexity attacks.

Finding and eliminating all sources of algorithmic complexity attacks requires knowledge of both average- and worst-case processing costs. Formal models of computation can help identify and analyze algorithms and data structures susceptible to such attacks, serving as useful tools for developers of critical systems like NIDS. We are currently exploring these issues.

### References
[1] Cert advisory ca-2001-26 nimda worm, 2001. http://www.cert.org/advisories/CA-2001-26.html.
[2] A. V. Aho and M. J. Corasick. Efficient string matching: An aid to bibliographic search. In Communications of the ACM, June 1975.
[3] M. Attig and J. W. Lockwood. SIFT: Snort intrusion filter for TCP. In Hot Interconnects, Aug. 2005.
[4] J. B. Cabrera, J. Gosar, W. Lee, and R. K. Mehra. On the statistical distribution of processing times in network intrusion detection. In 43rd IEEE Conference on Decision and Control, Dec. 2004.
[5] C. R. Clark and D. E. Schimmel. Scalable pattern matching for high-speed networks. In IEEE Symposium on Field-Programmable Custom Computing Machines (FCCM), pages 249–257, Napa, California, Apr. 2004.
[6] The Snort network intrusion detection system on the Intel IXP2400 network processor. Consystant White Paper, 2003.
[7] T. H. Cormen, C. E. Leiserson, and R. L. Rivest. Introduction to Algorithms. MIT Press/McGraw-Hill, 1990.
[8] S. Crosby. Denial of service through regular expressions. In Usenix Security work in progress report, Aug. 2003.
[9] S. A. Crosby and D. S. Wallach. Denial of service via algorithmic complexity attacks. In Usenix Security, Aug. 2003.
[10] M. Handley, V. Paxson, and C. Kreibich. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Usenix Security, Aug. 2001.
[11] C. Kruegel, F. Valeur, G. Vigna, and R. Kemmerer. Stateful Intrusion Detection for High-Speed Networks. In Proceedings of the IEEE Symposium on Security and Privacy, pages 285–293, Oakland, CA, May 2002. IEEE Press.
[12] W. Lee, J. B. D. Cabrera, A. Thomas, N. Balwalli, S. Saluja, and Y. Zhang. Performance adaptation in real-time intrusion detection systems. In RAID, Zurich, Switzerland, Oct. 2002.
[13] V. Paxson. Bro: a system for detecting network intruders in real-time. In Computer Networks (Amsterdam, Netherlands: 1999), volume 31, pages 2435–2463, 1999.
[14] PCRE: The Perl compatible regular expression library. http://www.pcre.org.
[15] T. H. Ptacek and T. N. Newsham. Insertion, evasion and denial of service: Eluding network intrusion detection. In Secure Networks, Inc., Jan. 1998.
[16] T. Reps. “Maximal-munch” tokenization in linear time. ACM Transactions on Programming Languages and Systems, 20(2):259–273, 1998.
[17] M. Roesch. Snort - lightweight intrusion detection for networks. In Proceedings of the 13th Systems Administration Conference. USENIX, 1999.
[18] S. Rubin, S. Jha, and B. P. Miller. Automatic generation and analysis of NIDS attacks. In ACSAC '04, pages 28–38, Washington, DC, USA, Dec. 2004. IEEE Computer Society.
[19] U. Shankar and V. Paxson. Active mapping: resisting NIDS evasion without altering traffic. In IEEE Symposium on Security and Privacy, pages 44–61, May 2003.
[20] R. Sidhu and V. Prasanna. Fast regular expression matching using FPGAs, 2001.
[21] R. Smith, C. Estan, and S. Jha. Algorithmic complexity attacks against Snort. University of Wisconsin Technical Report 1561, Sept. 2006.
[22] R. Sommer and V. Paxson. Enhancing byte-level network intrusion detection signatures with context. In ACM CCS, Washington, DC, Oct. 2003.
[23] J. Sommers and P. Barford. Self-configuring network traffic generation. In Internet Measurement Conference, pages 68–81, 2004.
[24] I. Sourdis and D. Pnevmatikatos. Fast, large-scale string match for a 10Gbps FPGA-based network intrusion detection system. In International Conference on Field Programmable Logic and Applications, Sept. 2003.
[25] L. Tan and T. Sherwood. A high throughput string matching architecture for intrusion detection and prevention. In International Symposium on Computer Architecture ISCA, June 2005.
[26] T. Vermeiren, E. Borghs, and B. Haagdorens. Evaluation of software techniques for parallel packet processing on multi-core processors. In IEEE Consumer Communications and Networking Conference, Jan. 2004.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 12:31:51 UTC from IEEE Xplore. Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06) 0-7695-2716-7/06 $20.00 © 2006