Certainly! Here is the optimized version of your text, which aims to improve clarity, coherence, and professionalism:

---

**Case-Based Reasoning (CBR) and Workflow Management Systems (WfMS)**

Over time, a CBR system enhances its problem-solving capabilities by accumulating knowledge from past experiences. As the CBR system gathers more cases, the WfMS becomes more resilient, thereby preventing undesirable states. This resilience stems from a larger repository of knowledge that can be leveraged to handle future exceptions.

Human intervention is necessary when acceptable exception handlers cannot be automatically generated. Solutions provided by human experts are then integrated into the case repository. The impact of these exception-handler candidates on the workflow system and associated applications is subsequently evaluated. Consequently, handling an exception may necessitate modifications to the workflow system or the applications. The exception-resolution process involves populating the CBR templates with new data. According to Luo (2000), the exception-resolution procedure includes the following tasks:

1. **Determine the Coordination Mode**: The coordination mode for exception handling is determined based on the type of process interactions among business processes.
2. **Identify the Contacting Party and Interaction Point**: The contacting party, responsible for managing exceptions within their organization's processes, and the interaction point, where interactions occur, are identified.
3. **Find the Compensation Scheme**: If necessary, a compensation scheme is established. The nature of the processes influences the compensation schemes. In the absence of a predefined schema, human input is required to determine the appropriate compensation.
4. **Find the Rework Scheme**: If necessary, a rework scheme is developed to enable the processes to progress from the failure point.

The retrieval of similar previous cases is based on a similarity measure that considers both semantic and structural similarities and differences among the cases. This similarity measure is derived through the following:

- **Exception Similarity**: Based on the "is-a" relationship in the exception hierarchy of the METEOR model 3 (Kochut, 1999).
- **Workflow Similarity**: Structural similarities, such as AND and OR building-blocks.
- **Context Similarity**: Computed using the nearest neighborhood function of the quantified degrees of semantic similarities over workflow application data. A concept tree is built, and the distances between concepts are stored in the case repository.

We employ a pattern-guided case adaptation scheme, which consists of four steps:

1. **Classify the Exception Pattern**: Identify the exception pattern. If it is a new pattern, add it to the exception pattern repository.
2. **Search for the Handling Pattern**: Determine the handling pattern by searching the repository. At this stage, the exception handling coordination mode, contacting party, and interaction point are also determined.
3. **Select a Handler Pattern**: Choose a handler pattern based on the search results. The compensation and rework schemes are then determined.
4. **Initialize the Handler**: Populate the CBR handling template. A new case is created by adapting an existing one.

**Adaptation and Workflow Quality of Service (QoS)**

Workflow QoS represents the quantitative and qualitative characteristics of a workflow application necessary to meet initial requirements (Cardoso et al., 2004). It addresses non-functional aspects of workflows. Quantitative characteristics include measures like workflow execution time and cost, while qualitative characteristics encompass services such as security and fault tolerance.

In the METEOR framework, workflows follow a QoS model (Cardoso et al., 2004) with three dimensions: time, cost, and reliability. Workflow tasks and transitions are initialized with QoS estimates, which are derived from a combination of designer estimates and historical data. Once QoS estimates are established, the workflow QoS can be computed using either a mathematical (Cardoso et al., 2004) or a simulation approach (Cardoso & Sheth, 2003). The choice of method depends on the tradeoff between computation time and accuracy.

At runtime, the QoS of workflow instances is monitored to identify deviations from desired metrics. When QoS deviations are detected, adaptation mechanisms are employed to apply reparative actions to the faulty instances.

For example, if several workflow instances are running correctly but a task starts to exhibit poor time QoS metrics, the workflow QoS specifications for time are no longer met. The adaptation module identifies this issue and uses problem-solving techniques to derive a solution. In this scenario, the adaptive system might infer that the faulty task should be replaced by an equivalent task. This replacement can be achieved through dynamic changes to the workflow instances, either manually or automatically (Cardoso et al., 2001).

Automatically finding a suitable replacement task is challenging and may require human intervention. However, to minimize human involvement, sophisticated discovery mechanisms can be implemented. These mechanisms can search for and find a task without human intervention by describing tasks and their operational metrics semantically (Cardoso & Sheth, 2003). This description allows the discovery process to find tasks based on both functionality and QoS.

**Adaptation and Dynamic Changes**

The two adaptation methods described above rely on a dynamic change layer to adapt running instances. Traditional workflow systems support static business processes, but there is an increasing demand for systems with dynamic capabilities, particularly at the workflow instance level (Horn & Jablonski, 1998; Weske et al., 1996). As workflow processes are instantiated, changes in the environment or from previous activities may invalidate current instances, necessitating reparative actions (Berry & Myers, 1998). Long-running, heterogeneous, autonomous, and distributed applications may require dynamic reconfiguration due to machine failures, service movements, or changing user requirements (Shrivastava & Wheater, 1998).

We classify changes into two main categories: primitive and composite. Primitive changes can be further divided into immediate and incremental. Immediate changes can be applied in one step, while incremental changes require a multi-step process. For example, if a set of instances is waiting for the completion of a task, and the task specifications are dynamically changed, the waiting instances may enter an inconsistent state.

In our work, most primitive changes implemented are incremental (Table 1). Composite changes consist of a sequence of primitive changes that describe a complex process of definition change.

| **Dynamic Change** | **Change Type** | **Implemented** |
|--------------------|-----------------|-----------------|
| AND to OR Join     | Incremental     | Yes             |
| OR to AND Join     | Incremental     | Yes             |
| Split              | Incremental     | Yes             |
| Add AND Transition | Incremental     | Yes             |
| Add OR Transition  | Incremental     | Yes             |
| Delete Transition  | Incremental     | Yes             |
| Data Object Transfer Addition | Incremental | Yes |
| Data Object Transfer Deletion | Incremental | Yes |
| Parameter Mapping Change | Incremental | Yes |
| Parameter Type Change | Incremental | No  |
| Task Type Change   | Incremental     | No  |
| Task Invocation    | Composite       | No  |
| Insert Task        | Composite       | Yes |
| Delete Task        | Composite       | No  |

In the ORBWork system, we have implemented a layer that ensures consistent realization of dynamic changes (Chen, 2000). The module guarantees that all consistency constraints are maintained after the workflow instances have been modified (Reichert & Dadam, 1998). The dynamic change interface is built on top of the CORBA ORB infrastructure, using IIOP as the communication protocol. Additional functions have been added to the IDL interface of the CORBA object responsible for managing tasks.

**Related Work**

To support dynamic workflow adaptations, Greiner et al. (2004) developed a rule-based approach for detecting logical failure events. Their approach, implemented within the WfMS ADEPTflex and AdaptFlow, uses a rule-based method for detecting exceptions. In contrast, our system uses a CBR approach, which becomes more robust as it collects more cases, providing a larger set of knowledge to handle future exceptions. Additionally, our approach addresses not only logical failure events but also the problem of maintaining a specified level of QoS.

Adams et al. (2003) extended the applicability of Activity Theory to the implementation of more flexible WfMSs. Their research describes principles for developing adaptable, flexible, and evolvable WfMSs, but does not address QoS issues.

Siebert (1999) proposed an integrated approach for adaptive workflow support, extending the SWATS architecture to enable the execution of unstructured processes. While his work illustrates how an adaptive support layer can be integrated into existing WfMSs, it does not directly address exception handling or QoS monitoring and adaptation.

**Conclusions**

Modern systems in our highly technological society demand adaptable critical systems. Our work focuses on the adaptation of WfMSs. We have presented a comprehensive set of techniques to increase the adaptability of WfMSs. The first step is to develop a conceptual architecture that provides a fundamental framework for an adaptable WfMS. We have defined an adaptable architecture that divides WfMSs into four levels: instance, schema, workflow, and infrastructure. We discuss how the need for adaptation can be triggered, addressing both functional and operational perspectives. Two adaptive modules are described: one for handling exceptions and another for managing QoS. Finally, we explain the importance and development of a dynamic change layer to implement adaptation strategies.

Although the ideas were implemented in the METEOR system, the concepts are independent of the specific WfMS. Therefore, they can be applied to most WfMSs available today.

**Acknowledgements**

We acknowledge Krys Kochut’s work on the specifications of METEOR Model 3 and the implementation of the METEOR competency hierarchy for exception handling. This research was partially funded by the Naval Research Laboratory projects "Workflow Management for Advanced DoD Applications" and "Extending METEOR with Workflow Reuse, Adaptation, and Collaboration."

**References**

- Adams, M., Edmond, D., & Hofstede, A. t. (2003). The application of Activity Theory to dynamic workflow adaptation issues. Paper presented at the 7th Pacific Asia Conference on Information Systems (PACIS 2003), Adelaide, South Australia.
- Bass, L., Clements, P., & Kazman, R. (1998). Software Architecture in Practice: Addison Wesley.
- Berry, P. M., & Myers, K. L. (1998). Adaptive Process Management: An AI Perspective. Paper presented at the ACM Conference on Computer Supported Cooperative Work, Seattle, Washington.
- Cardoso, J., Luo, Z., Miller, J., Sheth, A., & Kochut, K. (2001, March 16-17). Survivability Architecture for Workflow Management Systems. Paper presented at the Proceedings of the 39th Annual ACM Southeast Conference, Athens, GA.
- Cardoso, J., Miller, J., Sheth, A., Arnold, J., & Kochut, K. (2004). Modeling Quality of Service for workflows and web service processes. Web Semantics: Science, Services and Agents on the World Wide Web Journal, 1(3), 281-308.
- Cardoso, J., & Sheth, A. (2003). Semantic e-Workflow Composition. Journal of Intelligent Information Systems (JIIS), 21(3), 191-225.
- Casati, F. (1998). A Discussion on the Approaches to Handling Exceptions in Workflows. Paper presented at the Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive Workflow Systems Workshop, Seattle, WA.
- Chen, Y. (2000). Design and Implementation of Dynamic Process Definition Modifications in OrbWork Enactment System. Unpublished M.Sc. Thesis, University of Georgia, Athens, GA.
- Greiner, U., Ramsch, J., Heller, B., Löffler, M., Müller, R., & Rahm, E. (2004). Adaptive Guideline-based Treatment Workflows with AdaptFlow. Paper presented at the Proc. of Symposium on Computerized Guidelines and Protocols (CGP 2004), Prague.
- Han, Y., Sheth, A. P., & Bussler, C. (1998, November 1998). A Taxonomy of Adaptive Workflow Management. Paper presented at the Workshop of the ACM 1998 Conference on Computer Supported Cooperative Work, Seattle, WA.
- Horn, S., & Jablonski, S. (1998, November 1998). An Approach to Dynamic Instance Adaption in Workflow Management Applications. Workshop on Adaptive Workflow Systems. Paper presented at the Conference on Computer Supported Cooperative Work (CSCW), Seattle, WA, USA.
- Kochut, K. J. (1999). METEOR Model version 3. Athens, GA: Large Scale Distributed Information Systems Lab, Department of Computer Science, University of Georgia.
- Kochut, K. J., Sheth, A. P., & Miller, J. A. (1999). ORBWork: A CORBA-Based Fully Distributed, Scalable and Dynamic Workflow Enactment Service for METEOR. Athens, GA: Large Scale Distributed Information Systems Lab, Department of Computer Science, University of Georgia.
- Luo, Z. (2000). Knowledge Sharing, Coordinated Exception Handling, and Intelligent Problem Solving to Support Cross-Organizational Business Processes. Unpublished Ph.D. Dissertation, University of Georgia, Athens, GA.
- Luo, Z., Sheth, A. P., Miller, J. A., & Kochut, K. J. (1998). Defeasible Workflow, its Computation, and Exception Handling. Paper presented at the Proceedings of 1998 Computer-Supported Cooperative Work (CSCW 1998), Towards Adaptive Workflow Systems Workshop, Seattle, WA.
- Reichert, M., & Dadam, P. (1998). ADEPTflex - Supporting Dynamic Changes of Workflows Without Losing Control. Journal of Intelligent Information Systems - Special Issue on Workflow Managament, 10(2), 93-129.
- Shrivastava, S. K., & Wheater, S. M. (1998). Architectural Support for Dynamic Reconfiguration of Distributed Workflow Applications. Paper presented at the IEEE Proceedings Software Engineering.
- Siebert, R. (1999). An Open Architecture for Adaptive Workflow Management Systems. Transactions of the SDPS: Journal of Integrated Design and Process Science, 3(3), 29-24.
- Weske, M., Vossen, G., & Medeiros, C. B. (1996). Scientific Workflow Management: WASA Architecture and Applications. Paper presented at the Fachbericht Angewandte Mathematik und Informatik 03/96-I, Universitat Munster.
- Worah, D., & Sheth, A. P. (1997). Transactions in Transactional Workflows. In S. Jajodia & L. Kerschberg (Eds.), Advanced Transaction Models and Architectures (pp. 3-34): Kluwer Kluwer Academic Publishers.

---

This version should be clearer, more coherent, and professionally formatted.