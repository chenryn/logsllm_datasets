### Introduction

It is important to note that merely changing the library does not guarantee that the application built on top of it will handle sensitive data securely. For instance, the Apache web server reuses worker processes across requests from different users. If an attacker exploits a worker process, they may be able to access sensitive data belonging to the next user whose request is processed by that same worker.

### Fine-Grained Partitioning

We have implemented fine-grained partitioning for both the client and server sides of OpenSSL. Our implementation supports RSA, ephemeral RSA, Diffie-Hellman, and ephemeral Diffie-Hellman key exchanges. The partitioning ensures that untrusted processes do not have access to sensitive data such as private keys and session keys.

### Performance Evaluation

#### Latency Comparison

Figure 9 compares the operation latencies for various applications, including OpenSSH, mailx, Dovecot, and sendmail, using both the baseline and hardened cryptographic protocol implementations. All connections are made over the loopback interface to a locally running server. For OpenSSH, we measure the latency of logging into an SSH server using public key authentication and running the `exit` command. For the mailx email client and Dovecot IMAP server, we measure the time required for the client to connect over SSL/TLS, check for new mail, and exit. For the sendmail client, we measure the time required to connect and send a one-line email to a sendmail server over SSL/TLS. The results show that the perceived latency does not increase significantly between the baseline and hardened implementations.

#### Throughput Analysis

In Figure 10, we evaluate the throughput achieved by an SSL/TLS-enabled sendmail server and HTTPS server, both based on the OpenSSL library. For the sendmail server, we submit emails over SSL/TLS from multiple clients and report the maximum load the server can sustain in requests (emails) per second. Introducing oracle and SKD defenses into the OpenSSL library has a negligible impact on the sendmail server’s throughput.

To determine the maximum load the Apache (httpd) web server can sustain, we increase the number of clients requesting a small static page over HTTPS until the number of requests served per second reaches a maximum. Clients make new SSL/TLS connections for each request. In addition to adding defenses against SKD and oracle attacks, we modified the baseline Apache implementation to isolate users who successively connect to the same worker. To distinguish the cost of inter-user isolation from that of defending against SKD and oracle attacks, we measure the throughput of several Apache implementations:

- **Baseline Apache**: Workers are reused across requests, so users are not mutually isolated.
- **Hardened Apache with Inter-User Isolation**: Implemented with one fork per request, without oracle or SKD attack defenses.
- **Hardened Apache with Inter-User Isolation and Defenses**: Implemented with three forks per request, with oracle and SKD attack defenses.

We also implemented versions of hardened Apache that use optimized checkpoint-restore primitives [1] instead of fork. We consider Apache’s performance in two extremes: when no SSL sessions are cached and when all sessions are cached. We configure HTTPS clients to use RSA key exchange because it is less computationally intensive for the server than ephemeral Diffie-Hellman key exchange.

### Results

In the workload where no SSL/TLS sessions are cached, the version of Apache providing both inter-user isolation and defenses from oracle and SKD attacks achieves more than half (55%) the throughput of the baseline Apache, which provides none of these security benefits. The overhead of these security mechanisms is partially masked by the computational costs of establishing new SSL/TLS sessions. The "fully" hardened version of Apache achieves over 70% the throughput of one that provides inter-user isolation with checkpoint-restore but omits oracle and SKD attack defenses, indicating that the overhead of these defenses is moderate.

In the workload where no SSL/TLS sessions are cached, there are no public-key cryptographic operations, so the overheads of inter-user isolation and oracle and SKD attack defenses are more exposed. Focusing on the implementations built on checkpoint-restore, Apache with inter-user isolation (but without oracle/SKD defenses) achieves 60% of the throughput of baseline Apache. Adding oracle and SKD defenses to the inter-user-isolated implementation further reduces throughput by 60%, resulting in a total throughput of about one quarter of the baseline Apache. This significant reduction represents atypically worst-case behavior, as it assumes all sessions are cached (which is never the case) and static content. On servers that distribute dynamically generated content, the overhead of protecting users’ sensitive data will be amortized over more application computation.

### Design Principles

The original applications based on the OpenSSL library used single-process, monolithic designs. Hardening against SKD and oracle attacks requires three processes per SSL/TLS session: a private key monitor, a session monitor, and an unprivileged compartment for the SKN stage. Similarly, the hardened OpenSSH server and client use four processes per SSH session, compared to the two employed by the baseline privilege-separated OpenSSH server. Apart from the process creation and page fault costs associated with fork and the memory copy costs associated with checkpoint-restore, anti-SKD and anti-oracle hardening incur overhead for additional context switches and the marshaling and unmarshaling of arguments and return values between compartments connected by pipes.

### Related Work

- **Privilege Separation**: Provos et al. describe privilege separation, which denies enhanced system privileges to unauthorized attackers who exploit an application [9]. They reduce privilege in the OpenSSH server by partitioning it into an untrusted process and a privileged monitor. Our work aims to prevent the disclosure of users' sensitive data in cryptographic protocol implementations, which includes preventing privilege escalation.
- **OKWS**: A toolkit for building secure Web services [5], OKWS employs similar privilege enforcement mechanisms as privilege-separated OpenSSH—processes, the nobody user ID, and the chroot system call—to isolate distrusted Web services from the system they are running on and each other.
- **HiStar and DStar**: HiStar enforces privileges on compartments with labels and DIFC [14], while DStar extends this approach to a distributed environment without fully trusted machines [15].
- **Wedge**: During prior work with colleagues on Wedge [2], a set of primitives and tools for fine-grained partitioning of applications on Linux, we discovered an instance of the SKD attack. While we presented an ad hoc defense for one narrow instance of the attack, this paper offers design principles that defeat the SKD and oracle attacks and are general enough to apply to many cryptographic protocols.

### Conclusion and Future Work

We have described two practical exploit-based attacks on cryptographic protocol implementations: the session key disclosure (SKD) attack and the oracle attack. These attacks can disclose users' sensitive data, even in state-of-the-art, reduced-privilege applications such as the OpenSSH server and HiStar-labeled SSL web server. Privilege separation and DIFC will not secure the user’s sensitive data against these attacks unless an application is specifically structured to thwart them.

The principles we have offered guide programmers in partitioning cryptographic protocol implementations to defend against SKD and oracle attacks. Following these principles reduces the trusted code base of an application by correctly treating session key material and oracle-prone functions as sensitive and limiting privilege accordingly.

To demonstrate the practicality of these principles, we newly partitioned an OpenSSH client and extended the partitioning of a privilege-separated OpenSSH server. Further experience with the OpenSSL library suggests that these principles may generalize to other cryptographic protocols. While the application of these principles requires careful programmer effort, our experience with OpenSSL shows that hardening a library once brings robustness against these attacks to several applications that reuse that library.

The latency cost of defending against SKD and oracle attacks is well within user tolerances for all applications we measured. However, defending against these attacks does exact a cost in throughput on a busy SSL-enabled Apache server, reducing the uncached SSL/TLS session handshake rate of a server that isolates users by just under 30%, and the cached rate by 60%. While this cost is significant, it depends heavily on the performance of underlying isolation primitives—a topic that merits further investigation.

Finally, while we have relied upon manual study of the SSH and SSL/TLS protocols and their implementations to discover the attacks we have presented, we intend to explore tools that use static and dynamic analysis to ease the discovery of such vulnerabilities in cryptographic protocol implementations.

### Acknowledgements

This research was supported in part by a Royal Society-Wolfson Research Merit Award and by gifts from Intel Corporation and Research in Motion Limited. We thank Andrea Bittau, our shepherd Mohammad Mannan, and the anonymous reviewers for comments that improved the paper. We further thank Andrea Bittau for sharing code for his checkpoint-restore server performance optimizations.

### References

[1] A. Bittau. Toward Least-Privilege Isolation for Software. PhD thesis, University College London, UK, 2009. http://eprints.ucl.ac.uk/18902/1/18902.pdf.

[2] A. Bittau, P. Marchenko, M. Handley, and B. Karp. Wedge: Splitting Applications into Reduced-Privilege Compartments. In NSDI, 2008.

[3] A. C. Bomberger, W. S. Frantz, A. C. Hardy, N. Hardy, C. R. Landau, and J. S. Shapiro. The KeyKOS Nanokernel Architecture. In Proceedings of the Workshop on Micro-kernels and Other Kernel Architectures, 1992.

[4] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC 2246, January 1999.

[5] M. Krohn. Building Secure High-Performance Web Services with OKWS. In USENIX, 2004.

[6] M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler, and R. Morris. Information Flow Control for Standard OS Abstractions. In SOSP, 2007.

[7] P. Loscocco and S. Smalley. Integrating Flexible Support for Security Policies into the Linux Operating System. In USENIX (Freenix Track), 2001.

[8] N. Provos. Improving Host Security with System Call Policies. In USENIX Security Symposium, pages 18–18, 2003.

[9] N. Provos, M. Friedl, and P. Honeyman. Preventing Privilege Escalation. In USENIX Security, 2003.

[10] J. Saltzer and M. Schroeder. The Protection of Information in Computer Systems. Proceedings of the IEEE, 63(9):1278–1308, 1975.

[11] J. S. Shapiro, J. M. Smith, and D. J. Farber. Eros: A Fast Capability System. In SOSP, 1999.

[12] S. Vandebogart, P. Efstathopoulos, E. Kohler, M. Krohn, C. Frey, D. Ziegler, F. Kaashoek, R. Morris, and D. Mazières. Labels and Event Processes in the Asbestos Operating System. ACM TOCS, 25(4):11, 2007.

[13] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Protocol Architecture. RFC 4251, January 2006.

[14] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making Information Flow Explicit in HiStar. In OSDI, 2006.

[15] N. Zeldovich, S. Boyd-Wickizer, and D. Mazières. Securing Distributed Systems with Information Flow Control. In NSDI, 2008.

### Notes

1. While we did not implement these two attacks, we present an analysis of the protocols and implementations demonstrating that they are possible.
2. Although space limits us to illustrating these attacks and defense principles in the context of SSH and SSL/TLS, we have found that they apply equally to IPSec, CRAM-MD5, and other secure protocols.
3. Alternatives to SELinux include limiting a process’s privileges with Systrace [8], ptrace, and chroot (though the latter requires making a client application setuid root).