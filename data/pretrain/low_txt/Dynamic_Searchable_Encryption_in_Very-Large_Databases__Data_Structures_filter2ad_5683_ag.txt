# Scalable Searchable Symmetric Encryption (SSE) with Optimized Disk-Resident Data Structures

## 1. Introduction
This document discusses the performance and scalability of two SSE constructions, Π2lev and Πpack, in handling large encrypted databases. The focus is on optimizing disk-resident data structures to achieve high query performance while maintaining strong security guarantees.

## 2. Pre-processing and Query Performance

### 2.1. Pre-processing
Figure 6 illustrates the pre-processing time for different database sizes. The measurements are shown for databases ranging from 1e+08 to 1e+12 (w, id) pairs.

### 2.2. Query Performance
Figure 7 shows the query performance for CW-* databases with varying result set sizes. The graph highlights that the Π2lev construction outperforms the Πpack construction by almost two orders of magnitude for queries returning 1% of the database. For example, experiments with the Πpack prototype returning 13% of the database were significantly slower and were excluded from the figure to enhance visibility.

### 2.3. Exponentiation and I/O Costs
Experiments with OXT demonstrate similar performance gains on conjunction queries. Despite the high exponentiation costs, optimizing disk-resident data structures is crucial due to the high I/O latency. Using highly optimized NIST P-224 exponentiation and multi-threading, we can achieve nearly 500,000 exponentiations per second on our test bed. However, the storage system provides only 500-1,500 random I/O requests per second with single request latencies around 10ms.

## 3. Constant Result Set Queries

Figure 8 compares the execution times of two queries returning a constant result set of 10 and 10,000 record IDs, respectively. The gap between the lines for the Πpack prototype is much larger than that for the Π2lev prototype. This difference is due to the disk access patterns: the Πpack prototype needs to access one or one thousand hash table buckets, resulting in 1,000 times more disk access requests for the second query. In contrast, the Π2lev prototype accesses one dictionary entry and one or eleven tuple blocks, resulting in only six times more disk access requests for the second query.

## 4. Space Efficiency

The Π2lev construction achieves high load factors: 58.5% for the bucket hash dictionary, 91.9% for the array, and 91.6% overall. The array A has a load factor less than 100% because some tuple blocks store pointers or are partially filled.

## 5. Comparison with Prior Implementations

Previous work [3] stores the encrypted index on external storage using a construction similar to SSE-2 in [7]. Other works assume the encrypted index is stored in main memory with uniform access cost/latency. These do not extend well to block device-resident data structures. Recent work by Kamara et al. [14] discusses an extension to a storage-resident B-tree but suffers from a large index and does not address I/O challenges. Our approach identifies parallel I/O access as a key requirement and achieves excellent CPU parallelism during search.

## 6. Conclusions

The tension between security and performance in SSE systems requires balancing randomized data ordering, locality of access, and parallel processing. Our two-level scheme achieves a desirable trade-off, demonstrating practicality for terabyte-scale datasets with strong security guarantees. Future work should explore more secure solutions, such as Oblivious RAM (ORAM), and address challenges in multi-client scenarios.

## 7. Acknowledgment

This work was supported by the Intelligence Advanced Research Projects Activity (IARPA) via Department of Interior National Business Center (DoI / NBC) contract number D11PC20201.

## 8. References
[1] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In V. Ashby, editor, ACM CCS 93, pages 62–73, Fairfax, Virginia, USA, Nov. 3–5, 1993. ACM Press.
[2] D. Boneh, G. Di Crescenzo, R. Ostrovsky, and G. Persiano. Public key encryption with keyword search. In C. Cachin and J. Camenisch, editors, EUROCRYPT 2004, volume 3027 of LNCS, pages 506–522, Interlaken, Switzerland, May 2–6, 2004. Springer, Berlin, Germany.
[3] D. Cash, S. Jarecki, C. S. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. Highly-scalable searchable symmetric encryption with support for boolean queries. In R. Canetti and J. A. Garay, editors, CRYPTO 2013, Part I, volume 8042 of LNCS, pages 353–373, Santa Barbara, CA, USA, Aug. 18–22, 2013. Springer, Berlin, Germany.
[4] Y.-C. Chang and M. Mitzenmacher. Privacy preserving keyword searches on remote encrypted data. In J. Ioannidis, A. Keromytis, and M. Yung, editors, ACNS 05, volume 3531 of LNCS, pages 442–455, New York, NY, USA, June 7–10, 2005. Springer, Berlin, Germany.
[5] M. Chase and S. Kamara. Structured encryption and controlled disclosure. In M. Abe, editor, ASIACRYPT 2010, volume 6477 of LNCS, pages 577–594, Singapore, Dec. 5–9, 2010. Springer, Berlin, Germany.
[6] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. Journal of the ACM, 45(6):965–981, 1998.
[7] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky. Searchable symmetric encryption: improved definitions and efficient constructions. In A. Juels, R. N. Wright, and S. Vimercati, editors, ACM CCS 06, pages 79–88, Alexandria, Virginia, USA, Oct. 30 – Nov. 3, 2006. ACM Press.
[8] M. Dietzfelbinger, M. Mitzenmacher, and M. Rink. Cuckoo hashing with pages. Technical Report abs/1104.5111, arXiv, 2011.
[9] E.-J. Goh. Secure indexes. Cryptology ePrint Archive, Report 2003/216, 2003. http://eprint.iacr.org/.
[10] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. Journal of the ACM, 43(3):431–473, 1996.
[11] M. T. Goodrich, M. Mitzenmacher, O. Ohrimenko, and R. Tamassia. Oblivious RAM simulation with efficient worst-case access overhead. In CCSW, pages 95–100, 2011.
[12] M. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: Ramification, attack and mitigation. In Proceedings of the Symposium on Network and Distributed Systems Security (NDSS 2012), San Diego, CA, Feb. 2012. Internet Society.
[13] S. Jarecki, C. Jutla, H. Krawczyk, M. C. Rosu, and M. Steiner. Outsourced symmetric private information retrieval. In ACM CCS 13, Berlin, Germany, Nov. 4–8, 2013. ACM Press.
[14] S. Kamara and C. Papamanthou. Parallel and dynamic searchable symmetric encryption. In A.-R. Sadeghi, editor, FC 2013, volume 7859 of LNCS, pages 258–274, Okinawa, Japan, Apr. 1–5, 2013. Springer, Berlin, Germany.
[15] S. Kamara, C. Papamanthou, and T. Roeder. Dynamic searchable symmetric encryption. In T. Yu, G. Danezis, and V. D. Gligor, editors, ACM CCS 12, pages 965–976, Raleigh, NC, USA, Oct. 16–18, 2012. ACM Press.
[16] J. Katz and Y. Lindell. Introduction to Modern Cryptography (Chapman & Hall/Crc Cryptography and Network Security Series). Chapman & Hall/CRC, 2007.
[17] K. Kurosawa and Y. Ohtaki. UC-secure searchable symmetric encryption. In A. D. Keromytis, editor, FC 2012, volume 7397 of LNCS, pages 285–298, Kralendijk, Bonaire, Feb. 27 – Mar. 2, 2012. Springer, Berlin, Germany.
[18] Lemur Project. ClueWeb09 dataset. http://lemurproject.org/clueweb09.php/.
[19] D. X. Song, D. Wagner, and A. Perrig. Practical techniques for searches on encrypted data. In 2000 IEEE Symposium on Security and Privacy, pages 44–55, Oakland, California, USA, May 2000. IEEE Computer Society Press.
[20] E. Stefanov, E. Shi, and D. X. Song. Towards practical oblivious RAM. In NDSS 2012, San Diego, California, USA, Feb. 5–8, 2012. The Internet Society.
[21] P. van Liesdonk, S. Sedhi, J. Doumen, P. H. Hartel, and W. Jonker. Computationally efficient searchable symmetric encryption. In Proc. Workshop on Secure Data Management (SDM), pages 87–100, 2010.