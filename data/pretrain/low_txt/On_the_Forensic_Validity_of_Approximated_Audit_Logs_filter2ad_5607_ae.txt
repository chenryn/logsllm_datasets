### Reconstruction of the Attack through Graph Interpretation

The attack can be fully reconstructed by interpreting the graph. The CPR filter, when applied to the LogApprox graph, does not significantly impact the investigation because the information flow is preserved. However, the complexity of the LogApprox graph is reduced due to the approximation of benignly-occurring graph components using regular expressions. It is important to note that some potentially attack-relevant forensic information is sacrificed in this process. Specifically, since libraries are loaded into memory before the attack occurs, their contents may have informed outbound data transfers to the remote attacker's IP. Despite this, we argue that lossless descriptions of these library files are not useful for forensic purposes, as their significance to the attack is not apparent from the system-layer audit log. These libraries are routinely loaded by webmin during normal operations and do not provide meaningful threat intelligence. Therefore, it is reasonable to prune and approximate these graph components.

### 7. Discussion

#### 7.1 Optimality of LogApprox

We do not claim that LogApprox is the ideal instantiation of attack-preserving forensics. In this work, we focus on file I/O, a major subsystem of system activity, because it often accounts for a significant portion of log volume and can be safely filtered without disrupting the causality of more complex attack behaviors such as lateral movement or data exfiltration. Approximating other system entities, such as remote IP addresses, is more risky, as even a common remote connection may describe an important attack behavior during lateral movement. Future work could explore extending the concept of attack-preserving forensics to other system entities.

#### 7.2 Limitations of the Attack Corpus

A notable limitation of our work, shared with prior research, is the limited corpus of attack behaviors we evaluate against. A standardized set of attack behaviors aligned with our metrics would enable us to capture more nuances in the performance-utility trade-offs of approximation techniques. However, maintaining such a corpus is challenging due to the constantly evolving adversary techniques and tactics [55]. To mitigate this, we use state-of-the-art attack engagements from the DARPA Transparent Computing program. Our datasets are sufficient to validate our hypothesis that approximation techniques must be evaluated for both storage performance and forensic utility.

#### 7.3 Security Analysis of LogApprox

We now consider the security implications of LogApprox’s regex-based File I/O compression procedure. An intrusion involves a set of interdependent events, including process, network, and file activities, all captured by the unmodified audit log. LogApprox does not affect process and network log events, ensuring that network-based activities (e.g., lateral movement) and the interdependencies of attacker-controlled processes are fully documented. For file activities, we can divide File I/O events of the attacker-controlled process into those that match benign patterns (regex matches) and those that are distinct (regex non-matches). We argue that it is safe to approximate matched File I/O events, as they cannot be used to detect an intrusion. If a process is linked to an intrusion by other means, the files it accesses are also implicated, and the incident response plan would include re-imaging the compromised process, erasing any malicious data hidden in 'benign' files. In contrast, File I/O events that do not match a regex are retained faithfully by LogApprox. These non-match events are crucial for threat detection and investigation, as the attacker will need to deviate from benign application behaviors to achieve their objectives, such as establishing persistence or escalating privileges. Avoiding the compression of uncommon File I/O events ensures that this information remains available to intrusion detection tools.

If an attacker is aware of LogApprox’s presence, they may attempt to minimize their use of uncommon File I/O behaviors. LogApprox retains a lossless version of the process tree, network links, and uncommon file behaviors. The worst-case scenario is that the attacker uses common benign file behaviors to spread through the system. Even in this case, LogApprox can produce an end-to-end attack graph, though it may include a limited number of false dependencies compared to an uncompressed log. Specifically, if an attack path flows through a LogApprox regex, processes interacting with other files matched by that regex may be incorrectly included in the graph. However, in practice, LogApprox primarily generates regexes that describe "dead-end" or "one-way" I/O behaviors, such as temporary files, configuration files, or read-only shared objects. These file I/O behaviors do not create process-to-process links, so they do not lead to false dependencies in the attack graph.

Finally, we consider whether an adversary can manipulate how LogApprox generates regexes. Creating an overly broad regex, such as "match *," to erase all file I/O from the log is not feasible due to LogApprox’s parameterizable name and path similarity thresholds. Path matching can deviate from concrete access patterns by at most one directory level, and files must be at least 70% similar to be matched. An attacker could repeatedly issue variations of the malicious access pattern to create a regex, but this is not covert and requires the attacker to repeatedly execute the very command they are trying to conceal. Administrators can fine-tune LogApprox’s parameters to improve security, albeit at the cost of reduced reduction capacity.

### 8. Related Work

This work is the first to formalize and quantify the forensic validity of audit logs subjected to approximation techniques. We discuss past approximation techniques in Section 2. Similar to LogApprox, Tang et al.’s NodeMerge [71] templatizes process behaviors for compression, but only operates on read-only file activity at the beginning of process execution. NodeMerge could likely create a template for the Figure 9 example but not for other process behaviors accommodated by LogApprox, such as temporary file I/O. We did not evaluate NodeMerge because it requires a deployment-specific training phase, making it difficult to generalize.

Beyond log reduction, log security is another critical consideration. Various cryptographic approaches ensure tamper-evident logging (e.g., [7, 16, 27, 33, 47, 67, 68, 78, 79]). Research has also explored software-based solutions to secure audit logs, demonstrating that reference monitor guarantees [3] are sufficient to assure log integrity [5, 53, 60, 62]. Recent works utilize cryptographic primitives for log integrity within trusted execution environments [37, 58] and kernel audit frameworks [59]. Like other work in this area, LogApprox depends on mechanisms that can assure and attest to the integrity of audit logs.

Significant attention has been given to extracting high-level semantic insights from low-level system logs and graphs. A central issue with system logs is dependency explosion, a semantic gap problem where long-lived processes (or data objects) appear to have many dependencies when viewed from the system layer. Execution partitioning techniques have been proposed to partition opaque dependencies into small autonomous units of work [30, 32, 40–42, 48–51]. These techniques create additional opportunities for log reduction [43], but they are not considered in our work because they are application-specific rather than system-wide. Nonetheless, we believe these techniques are interoperable with LogApprox, although they may not be as essential because LogApprox already removes a large percentage of false dependencies related to benign execution units. Prior work also considers related semantic gap problems, including reconciling system-level logs with application logs [32, 61] and identifying high-level semantic behaviors [34, 46, 73]. These techniques should be compatible with LogApprox, provided the analyst is interested in reconstructing attack-related sequences of events.

Increasingly, causal analysis techniques are being incorporated into intrusion detection tasks. Manzoor et al. [52], Han et al. [26], and Wang et al. [74] present anomaly detection algorithms based on provenance graph analysis. Hassan et al. address the false alert problem in commercial threat detection software using provenance-based alert triage [30]. Milajerdi et al. present a rule-based approach for detecting attacker tactics [54], similar to commercially-available Endpoint Detection & Response (EDR) software, but based on provenance graph structures instead of flat audit event sequences. Subsequently, Hassan et al. extended a commercial EDR tool with lightweight provenance-based alert correlation [29]. Their approach to making their technique practical for large enterprise environments is to aggressively filter provenance graphs, allowing only queries about inter-alert dependency to be answered by the approximated log. Unlike other approximation techniques discussed, Hassan et al.’s approach is not intended for generic threat investigation scenarios where many forms of causal query must be supported. While we primarily consider threat investigation, our forensic validity metrics can also be interpreted as indicators of how log approximation techniques may assist or impair intrusion detection tasks.

### 9. Conclusion

Measuring the security utility of log approximation techniques has been challenging. In this work, we codify a set of forensic validity properties to measure the utility of approximated logs. We present LogApprox, a new approach to log approximation that leverages repetition in file I/O behavior to learn regular expressions characterizing common access patterns, allowing aggressive reduction of benign log events. We conduct a principled evaluation of both the performance and utility of LogApprox, comparing it to a representative set of techniques from prior work. We hope this work provides expressive baselines for evaluating future log approximation systems.

### Acknowledgments

The authors would like to thank the anonymous referees for their valuable comments and helpful suggestions. This work is supported in part by NSF 17-50024. The views expressed are those of the authors only.

### References

[1] Raza Ahmad, Melanie Bru, and Ashish Gehani. 2018. Streaming Provenance Compression. In Provenance and Annotation of Data and Processes, Khalid Belhajjame, Ashish Gehani, and Pinar Alper (Eds.). Springer International Publishing, Cham, 236–240.
[2] AlDanial. 2019. cloc: Count Lines of Code.
[3] James P. Anderson. 1972. Computer Security Technology Planning Study. Technical Report ESD-TR-73-51. Air Force Electronic Systems Division.
[4] Adam Bates, Kevin R. B. Butler, and Thomas Moyer. 2015. Take Only What You Need: Leveraging Mandatory Access Control Policy to Reduce Provenance Storage Costs. In 7th Workshop on the Theory and Practice of Provenance (Edinburgh, Scotland) (TaPP’15).
[5] Adam Bates, Dave Tian, Kevin R.B. Butler, and Thomas Moyer. 2015. Trustworthy Whole-System Provenance for the Linux Kernel. In Proceedings of 24th USENIX Security Symposium (Washington, D.C.).
[6] Adam Bates, Dave Tian, Grant Hernandez, Thomas Moyer, Kevin R.B. Butler, and Trent Jaeger. 2017. Taming the Costs of Trustworthy Provenance through Policy Reduction. ACM Trans. on Internet Technology 17, 4 (sep 2017), 34:1–34:21.
[7] Mihir Bellare and Bennet Yee. 1997. Forward Integrity for Secure Audit Logs. Technical Report. Computer Science and Engineering Department, University of California at San Diego.
[8] Y. Ben, Y. Han, N. Cai, W. An, and Z. Xu. 2018. T-Tracker: Compressing System Audit Log by Taint Tracking. In 2018 IEEE 24th International Conference on Parallel and Distributed Systems (ICPADS). 1–9. https://doi.org/10.1109/PADSW.2018.8645035
[9] Tara Siegel Bernard, Tiffany Hsu, Nicole Perlroth, and Ron Lieber. 2019. Equifax Says Cyberattack May Have Affected 143 Million in the U.S. https://www.nytimes.com/2017/09/07/business/equifax-cyberattack.html. Last accessed October 16, 2020.
[10] Carbon Black. 2018. Global Incident Response Threat Report. https://www.carbonblack.com/global-incident-response-threat-report/november-2018/. Last accessed 04-20-2019.
[11] Microsoft: Windows Dev Center. 2018. About Event Tracing.
[12] Microsoft: Windows Dev Center. 2018. Event Logging.
[13] Ang Chen, W. Brad Moore, Hanjun Xiao, Andreas Haeberlen, Linh Thi Xuan Phan, Micah Sherr, and Wenchao Zhou. 2014. Detecting Covert Timing Channels with Time-Deterministic Replay. In 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 14). USENIX Association, Broomfield, CO, 541–554. https://www.usenix.org/conference/osdi14/technical-sessions/presentation/chen_ang
[14] Chen Chen, Harshal Tushar Lehri, Lay Kuan Loh, Anupam Alur, Limin Jia, Boon Thau Loo, and Wenchao Zhou. 2017. Distributed Provenance Compression. In Proceedings of the 2017 ACM International Conference on Management of Data (Chicago, Illinois, USA) (SIGMOD ’17). ACM, New York, NY, USA, 203–218. https://doi.org/10.1145/3035918.3035926