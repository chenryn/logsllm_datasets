# Reverse Engineering of 17 Cars in Under 10 Minutes
## Presenter: Brent Stone

### Disclaimer
The views expressed in this presentation are those of the author and do not reflect the official policy or position of the United States Air Force, the United States Army, the United States Department of Defense, or the United States Government. The material publicly released on [GitHub](https://github.com/brent-stone/CAN_Reverse_Engineering/), up to and including commit `ac0e55f` on March 26, 2019, is declared a work of the U.S. Government and is not subject to copyright protection in the United States.

**APPROVED FOR PUBLIC RELEASE; DISTRIBUTION UNLIMITED**
- Case Numbers: 88ABW-2019-0910, 88ABW-2019-0024

---

### Network Characteristics

#### Flexible and Undeterminable Networks
- **Features:**
  - Modify End Points
  - Modify Routing
  - No delivery guarantee
  - No timeliness guarantee
  - N end points

#### Determinable and Inflexible Networks
- **Features:**
  - Delivery Guarantee
  - Timeliness Guarantee
  - Fixed End Points
  - Fixed Routing

---

### Automated Reverse Engineering of General Use Networks

Many researchers have contributed to the field of automated reverse engineering of general use networks. Here are some key references:

1. P. Ducange, G. Mannara, F. Marcelloni, R. Pecori, and M. Vecchio, "A novel approach for internet traffic classification based on multi-objective evolutionary fuzzy classifiers," in *2017 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE)*, 2017, pp. 1-6.
2. J. Yuan, Z. Li, and R. Yuan, "Information entropy based clustering method for unsupervised internet traffic classification," in *IEEE International Conference on Communications (ICC)*, 2008, pp. 1588-1592.
3. C. Besiktas and H. A. Mantar, "Real-Time Traffic Classification Based on Cosine Similarity Using Sub-application Vectors," in *Proceedings of the Traffic Monitoring and Analysis 4th International Workshop*, 2012, vol. 7189, pp. 89-92.
4. A. Trifilo, S. Burschka, and E. Biersack, "Traffic to protocol reverse engineering," in *IEEE Symposium on Computational Intelligence for Security and Defense Applications (CISDA)*, 2009, pp. 1-8.
5. M. E. DeYoung, "Dynamic protocol reverse engineering: a grammatical inference approach," *Air Force Institute of Technology*, 2008.
6. W. Cui, M. Peinado, K. Chen, H. J. Wang, and L. Irun-Briz, "Tupni: Automatic Reverse Engineering of Input Formats," in *15th ACM Conference on Computer and Communications Security (CCS)*, 2008, pp. 391-402.
7. J. Newsome, D. Brumley, J. Franklin, and D. Song, "Replayer: automatic protocol replay by binary analysis," in *13th ACM conference on Computer and Communications Security (CCS)*, 2006, p. 311.
8. J. Caballero, P. Poosankam, C. Kreibich, and S. D., "Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering," in *16th ACM Conference on Computer and Communications Security (CCS)*, 2009, pp. 621-634.
9. J. Caballero, H. Yin, Z. Liang, and D. Song, "Polyglot: Automatic Extraction of Protocol Message Format using Dynamic Binary Analysis," in *14th ACM Conference on Computer and Communications Security (CCS)*, 2007, pp. 317-329.
10. W. Cui, V. Paxson, N. C. Weaver, and R. H. Katz, "Protocol-Independent Adaptive Replay of Application Dialog," in *Network and Distributed System Security Symposium (NDSS)*, 2006, pp. 279-293.

Additional References:
11. M. Wakchaure, S. Sarwade, I. Siddavatam, and P. Range, "Reconnaissance of Industrial Control System By Deep Packet Inspection," in *2nd IEEE International Conference on Engineering and Technology (ICETECH)*, 2016, no. 3, pp. 1093-1096.
12. J. Antunes, N. Neves, and P. Verissimo, "Reverse engineering of protocols from network traces," in *18th Working Conference on Reverse Engineering*, 2011, pp. 169-178.
13. M. A. Beddoe, "Network protocol analysis using bioinformatics algorithms," McAfee, Santa Clara, CA, USA, 2004.
14. Y. Wang, Z. Zhang, D. Yao, B. Qu, and L. Guo, "Inferring Protocol State Machine from Network Traces: A Probabilistic Approach," in *International Conference on Applied Cryptography and Network Security*, 2011, pp. 1-18.
15. P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, "Prospex: Protocol specification extraction," in *IEEE Symposium on Security and Privacy*, 2009, pp. 110-125.
16. J. Erman and M. Arlitt, "Traffic classification using clustering algorithms," in *2006 SIGCOMM Workshop on Mining Network Data*, 2006, pp. 281-286.
17. F. Alam, R. Mehmood, I. Katib, and A. Albeshri, "Analysis of Eight Data Mining Algorithms for Smarter Internet of Things (IoT)," in *International Workshop on Data Mining in IoT Systems (DaMIS 2016)*, 2016, vol. 98, no. 1, pp. 437-442.
18. Y. Wang et al., "A semantics aware approach to automated reverse engineering unknown protocols," in *20th IEEE International Conference on Network Protocols (ICNP)*, 2012, pp. 1-10.
19. J. Roning, "PROTOS Protocol Genome Project," Oulu University Secure Programming Group, 2010. [Online]. Available: [here](https://www.ee.oulu.fi/roles/ouspg/genome). [Accessed: 01-Jan-2017].
20. R. L. S. Puupera, "Domain Model Based Black Box Fuzzing Using Regular Languages," University of Oulu, 2010.
21. K. Choi, Y. Son, J. Noh, H. Shin, J. Choi, and Y. Kim, "Dissecting Customized Protocols: Automatic Analysis for Customized Protocols Based on IEEE 802.15.4," in *9th International Conference on Security of Information and Networks*, 2016, pp. 183-193.
22. Y. Wang, Y. Xiang, J. Zhang, and S. Yu, "A novel semi-supervised approach for network traffic clustering," in *5th International Conference on Network and System Security (NSS)*, 2011, pp. 169-175.
23. W. Cui, J. Kannan, and H. J. Wang, "Discoverer: Automatic Protocol Reverse Engineering from Network Traces," in *USENIX Security*, 2007, no. 2, pp. 199-212.
24. J. Zhang, C. Chen, Y. Xiang, and W. Zhou, "Semi-supervised and compound classification of network traffic," in *Proceedings 32nd IEEE International Conference on Distributed Computing Systems Workshops (ICDCSW)*, 2012, pp. 617-621.
25. T. Glennan, C. Leckie, and S. M. Erfani, "Improved Classification of Known and Unknown Network Traffic Flows Using Semi-supervised Machine Learning," in *21st Australasian Conference on Information Security and Privacy (ACISP)*, 2016, vol. 2, pp. 493-501.

---

### Applying to Control Networks

While there has been significant progress in reverse engineering general use networks, what about control networks like those in robots and cars?

#### CAN Bus Example
Here is an example of a CAN bus trace:
```plaintext
#Started canhandler on can0
#Setup complete: 48.7387
#Format: 
Time: ID DLC Data
48.740: 4a8 8 00 00 00 40 00 00 00 00
48.740: 020 7 00 00 07 01 00 00 2f
48.742: 0b4 8 00 00 00 00 ac 00 00 68
48.742: 025 8 00 11 00 00 78 78 78 a6
48.743: 024 8 02 00 02 08 62 04 81 1f
48.743: 235 6 00 00 00 00 00 3d
48.744: 499 8 00 00 35 00 00 00 00 00
48.745: 49a 8 00 85 20 03 46 80 28 a8
48.746: 49b 8 00 a0 1a 20 00 00 48 10
48.746: 262 5 20 00 00 00 89
48.747: 49d 8 61 60 03 d1 9d 19 c6 c5
48.747: 1c4 8 00 00 00 00 00 00 00 cd
48.749: 0aa 8 1a 6f 1a 6f 1a 6f 1a 6f
48.749: 0b6 4 00 00 00 ba
48.749: 224 8 00 00 00 00 00 00 00 08
48.751: 127 8 68 10 00 08 00 0c ed a9
48.751: 020 7 00 00 07 01 00 00 2f
48.751: 230 7 d4 43 00 00 00 00 50
48.752: 025 8 00 11 00 00 82 82 82 c4
...
```

#### Unsupervised Reverse Engineering Process
1. **Empirical Data Modeling to detect causality**
2. **Combine correlated and causal links to make a network map**
3. **Lexical Analysis**
4. **Protocol Specific Preprocessing**
5. **Semantic Analysis**
6. **Group Payloads by Logical Source**
7. **TANG Generation**
8. **Cluster Payload Bit Positions**
9. **Signal Correlation**
10. **Signal Subset Selection** (optional)
11. **Cluster Correlated Signals**
12. **Generate Logical Network Map**
13. **Detect Causality Between Signals**

#### Techniques Used
- **Agglomerative Hierarchical Clustering**
- **Pearsonâ€™s Correlation Coefficient**
- **Shannon Diversity Index (Entropy)**
- **Modified Hill Climbing Algorithm**
- **Exclusive Or (XOR)**

---

### Lexical and Semantic Analysis

#### Lexical Analysis
- **Tokenization**: Break down payloads into tokens.
- **Example**:
  ```plaintext
  Time (s)   Bit 0 ... Bit 63
  48.45      1          0
  48.95      1          0
  49.46      1          0
  49.96      0          0
  50.46      0          0
  50.96      1          0
  ...
  ```

#### Semantic Analysis
- **Payload Tokenization by Least Significant Bit**:
  ```plaintext
  0 = 00000000
  7 = 00000111
  8 = 00001000
  9 = 00001001
  10 = 00001010
  11 = 00001011
  ...
  ```

---

This structured and detailed approach ensures that the content is clear, coherent, and professional.