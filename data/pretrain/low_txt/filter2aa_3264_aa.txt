# Beyond Root: Custom Firmware for Embedded Mobile Chipsets

## Biography
**Christopher Wade**  
Security Consultant at Pen Test Partners  
[@Iskuri1](https://twitter.com/Iskuri1)  
[GitHub](https://github.com/Iskuri)  
[Pen Test Partners](https://www.pentestpartners.com)

## Project Origin
Modern smartphones contain a significant amount of closed firmware, which limits the capabilities of even rooted devices. By breaking firmware protections and reverse-engineering embedded chipsets, these devices can be repurposed as powerful attack tools.

### Wi-Fi Monitor Mode
Many smartphones support Wi-Fi Monitor Mode, which can be activated in Snapdragon chipsets using the following command:
```bash
echo 4 > /sys/module/wlan/parameters/con_mode
```
Broadcom chipsets can utilize custom firmware, a feature well-known and implemented in modern mobile testing tools.

### USB Device Emulation
The Linux Kernel supports emulating USB devices via GadgetFS, allowing for the emulation of any standard USB device. Although this feature is rarely used, it is highly effective.

### Debian Chroot
A full Debian Root Filesystem can be generated with `qemu-debootstrap`. A simple script can provide hardware access and direct SSH connectivity:
```bash
mount -o remount,rw /data
mount --bind /proc /data/debian_arm64/proc
mount --bind /sys /data/debian_arm64/sys
mount --bind /dev /data/debian_arm64/dev
mount devpts /data/debian_arm64/dev/pts -t devpts
chroot /data/debian_arm64/ /bin/bash --login -c /usr/sbin/sshd &
```

## NFC on Android
### Standard Functionality
NFC on Android is restricted to specific features:
- Generic Reader Modes
- Mobile Payments
- NDEF Communication
- Host-Card Emulation

### Unsupported Functionality
Desired features for an NFC attack tool include:
- Reader-Based Attacks
- Raw Tag Emulation
- Passive Sniffing

## Target Device
**Samsung S6 (SM-G920F)**
- An older smartphone, readily available
- Allows for OEM unlocking and deployment of custom ROMs
- Uses a proprietary Samsung Semiconductor NFC Controller in non-US versions

### NFC Controller – S3FWRN5
- Custom chip developed by Samsung Semiconductor
- Utilized in non-US Samsung S6 and Note 4 devices
- Supports secure firmware updates
- Uses ARM SC000 SecurCore architecture
- Communicates via I2C and GPIO on the phone

### Basic Communication – Hardware on Android
Smartphones are essentially embedded Linux devices. GPIO and I2C communication can be performed via files in `/dev/i2c-*` and `/dev/gpio*`. Samsung's Kernel abstracts these to a custom driver, accessed using the device file `/dev/sec-nfc`.

### NCI Communication
NFC chips communicate via a standard protocol, which abstracts and restricts NFC functionality. Packets consist of:
- **GID**: Byte containing the identifier of the functionality group (e.g., Core, RF, Vendor Specific)
- **OID**: Byte containing the identifier of the specific operation
- **Length**: Byte containing the length of parameters
- **Payload**: Data related to the operation

### NCI – Non-Standard Functionality
Vendor GID (0xf) allows for non-standard functionality. Vendor operations from 0x00-0xff can be enumerated by checking error responses. These vendor-defined operations are most likely to contain actionable weaknesses.

### S3FWRN5 – Firmware Updates
The S3FWRN5 chip supports firmware updates via I2C. Firmware updates are never implemented via NCI; instead, a custom bootloader is used. Firmware files are found in the vendor partition.

### Enabling Debug Mode
*.rc configurations can be modified in `/system/` to enable debug and forced firmware updates. Traces can be pulled from Logcat.

### Analysis of Firmware Update Protocol
Update traces can be pulled from Logcat. The update protocol utilizes a four-byte header followed by payload:
- **0x00**: Command type
- **0x01**: Command
- **0x02-0x03**: Payload size
- **0x04-0x100**: Payload data
- **0x80** is added to the first byte on alternating sends

### Firmware Update Files
Firmware and configuration files can be found in the Android filesystem. Depending on the device version, these may be in the main system image or a hidden vendor partition. They are usually available from publicly available Android images.

### S3FWRN5 Firmware File Analysis
The basic format includes metadata, signature, and full firmware. The payload provides size information about the internal memory of the device.

### Identifying Architecture
Simple mnemonics can be used to identify chip architectures. For example, Thumb’s “BX LR” operation translates to `0x70 0x47` in hex, and `pG` in ASCII. A high number of instances of this imply Thumb code in use, which was identified in the firmware.

### Implementing Firmware Updates
- Dump the Firmware Update protocol command sequence
- Send dumped IOCTL and commands in sequence
- Compare received values for each command
- Header files from Open Source Kernel drivers (e.g., `sec_nfc.h`) can aid this process

### Firmware Update Protocol and Sequence
The firmware update protocol uses numbered commands:
- **0**: Reset
- **1**: Boot Info
- **2**: Begin Update
- **4**: Update Sector
- **5**: Complete Update

A missing numbered command heavily implies additional hidden commands.

### Identifying Hidden Bootloader Commands
Commands only work at certain stages of the update process:
- Error 2: Command is not valid at that stage
- Error 9: Payload is too small

This can be brute-forced through the firmware update protocol.

### Hidden Bootloader Command 3
- Same functionality as command 4
- Writes 512-byte blocks instead of 4096
- No actionable weaknesses

### Hidden Bootloader Command 6
- Takes eight bytes of parameters, two 32-bit values
- Individual bits were set in parameters and responses were checked
- Testing showed this allowed for reading arbitrary memory – address and size
- This allows for dumping RAM, the firmware, and the secure bootloader

### Dumping the Bootloader
Memory can be stitched from hidden command 6, showing a standard Cortex-M firmware format starting at address `0x00000000` (vector table followed by code), with a size of 8KB. This allows for static analysis and emulation. The firmware contained no strings, increasing the time required for analysis.

### Analysing Bootloader Binary
- Loaded into IDA as ARM Little-endian
- Memory Layout:
  - **0x00000000**: Flash Memory
  - **0x20000000**: RAM
  - **0x40000000/0x50000000**: Hardware Peripherals
  - **0xE0000000**: System

### Bootloader Artefacts
- On start-up, the bootloader checks for a magic number at address `0x3000`: `0x5AF00FA5`
- This magic number is only written if the signature is valid during an upgrade
- Attempts to manually write the value were unsuccessful – the first block must start with `0xFFFFFFFF`

### RSA Public Key
- Found in memory: 0x80 high entropy bytes followed by `00 01 00 01` (65537 as exponent)

### Identifying Memory Corruption
- Fuzzing embedded firmware could irreparably damage the chip
- Only one phone was available for testing
- Debugging and analysis via I2C would be difficult
- Emulation of the bootloader was attempted

### Emulating Embedded Firmware with Unicorn Engine
- Library for emulating architectures and hooking all functionality
- Can define architecture, memory mapping, and hardware integration

### Emulating the Bootloader
- Bootloader loaded at address `0x00000000`
- Program Counter set to value in reset vector (`0x000002BD`)
- Memory mapped for flash, RAM, and hardware registers

### Execution and Emulation
- Commands are received in an infinite loop in the main thread, with no interrupts
- Execution caused device resets when accessing hardware registers during configuration
- The bootloader image was patched to bypass hardware initialization
- Static hardware register values were dumped from the chip and loaded into Unicorn

### Full I2C Communication Emulation
- The firmware continually read bytes from a single address: `0x40022038`
- This implied it was the I2C FIFO buffer
- Firmware update commands were sent via this register
- Responses to commands were sent to address `0x40022034`
- This constituted full emulation of the I2C communication

### Memory Corruption Opportunities
- Randomized fuzzing became viable
- Commands have 16-bit sizes, larger than the entire contents of RAM
- Some commands send additional data in chunks
- Size of hash and signature defined in the initialization command

### Bypassing Signature Checks
- Manipulation of the hash and signature sizes allowed for more data to be sent in chunks
- Analysis in Unicorn showed this caused out-of-bounds memory access
- Further analysis showed this overwrote the stack
- Overwriting the stack allowed for manipulation of the Program Counter
- SC000 chipsets cannot execute from RAM
- Stack was too small for complex ROP exploits
- Program Counter set to just after the signature check: `0x016d` (PC + 1 for Thumb code)

### Exploit on Physical Chip
- The exploit was performed on the physical chip
- This booted the main firmware without power cycling
- The firmware started and could run, bypassing signature checking
- This allows for the development of custom firmware

By leveraging these techniques, the project demonstrates the potential for extending the capabilities of embedded mobile chipsets beyond their intended use, opening up new avenues for security research and development.