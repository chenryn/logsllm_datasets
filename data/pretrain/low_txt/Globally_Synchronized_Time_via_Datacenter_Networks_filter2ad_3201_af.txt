# Table 2: Specifications of the PHY at Different Speeds

| Speed | Encoding |
|-------|----------|
| 1G    | 8b/10b   |
| 10G   | 64b/66b  |
| 40G   | 64b/66b  |
| 100G  | 64b/66b  |

## Observations and Omissions
- The initial results showed a one-microsecond delay, likely due to PTP's requirement for historical data to apply filtering and smoothing effectively. These results were omitted due to space constraints.
- PTP's performance is influenced by network conditions, configuration (e.g., transparent clocks), and implementation.

## Discussion

### Extending DTP to Other Link Speeds
In this paper, we have focused on implementing and deploying DTP over a datacenter using 10 GbE links. However, datacenters often have heterogeneous link capacities. For example, servers may connect to Top-of-Rack (ToR) switches via 1 Gbps links, while uplinks between switches and routers can be 40 or 100 Gbps. Despite these variations, DTP remains applicable because the fundamental principle holds: two physically connected devices in high-speed Ethernet (1G and beyond) are already synchronized to transmit and receive bitstreams. The challenge is to adapt DTP to support a large number of devices with different link capacities.

### Clock Frequency and Counter Adjustments
DTP can be extended to support 40 GbE and 100 GbE in a straightforward manner. The clock frequency required to operate at 40 or 100 Gbps is a multiple of that for 10 Gbps (Table 2). Switches supporting 10 Gbps and higher typically use a clock oscillator running at 156.25 MHz to support all ports [14]. Therefore, adjusting the clock counter increments based on the link speed is sufficient. Specifically, if a counter tick represents 0.32 nanoseconds, then DTP will work at 10, 40, and 100 GbE by adjusting the counter value to match the corresponding clock period (i.e., 20 × 0.32 = 6.4 ns, 5 × 0.32 = 1.6 ns, and 2 × 0.32 = 0.64 ns, respectively). For 1 GbE, the counter of a 1 GbE port should be incremented by 25 at every tick (see the last column of Table 2).

### Adaptation for 1 GbE
The PHY for 1 Gbps uses 8b/10b encoding instead of 64b/66b encoding. To adapt DTP for 1 GbE, we need to modify the protocol to send clock counter values with the different encoding.

## Related Work

### Clock Synchronization Protocols
Clock synchronization is crucial for system performance and has been extensively studied from various perspectives. We have discussed NTP [41], PTP [8], and GPS [37] in Section 2. Here, we briefly review other clock synchronization protocols.

#### Software Clocks
NTP does not provide precise synchronization in local area networks (LANs). Many studies have focused on improving NTP without additional hardware. One approach is TSCclock, later called RADclock [25, 46, 50], which uses TSC instructions to implement precise software clocks. It aims to replace ntpd and ptpd (daemons for NTP and PTP) and provide sub-microsecond precision without extra hardware. Other software clocks include Server Time Protocol (STP) [44], Coordinated Cluster Time (CCT) [28], AP2P [49], and skewless clock synchronization [40], which offer microsecond precision.

#### Hardware Implementations
Fiber Channel (FC) [6] and discussions by Kopetz and Ochsenreiter [33] demonstrate clock synchronization in hardware. FC embeds protocol messages into interpacket gaps, similar to DTP, but it is not decentralized and does not eliminate non-deterministic delays. Synchronous optical networks (SONET/SDH) standardize the transmission of multiple bitstreams over optical fibers, requiring precise frequency synchronization (syntonization). An atomic clock is used as a Primary Reference Clock (PRC), and other network elements synchronize to it. DTP, however, synchronizes clock counter values, not frequencies.

Synchronous Ethernet (SyncE) [12] was introduced to facilitate reliable data transfer between synchronous and asynchronous networks. Like SONET, it synchronizes the frequency of nodes, not clock values. PTP is often used with SyncE to provide tight clock synchronization. White Rabbit (WR) [43, 35, 39] achieves sub-nanosecond precision by combining SyncE and WR-enabled PTP. WR works on a tree topology with a limited number of levels and servers, currently supporting only 1 Gigabit Ethernet. DTP, on the other hand, does not depend on specific network topologies and can be extended to higher speeds.

BroadSync [19] and ChinaMobile [38] also combine SyncE and PTP for hundreds of nanoseconds precision. The Data Over Cable Service Interface Specification (DOCSIS) time protocol [20] extends DOCSIS to synchronize time by approximating internal delays and asymmetrical path delays. Combining DTP with SyncE could improve DTP's precision to sub-nanosecond levels by minimizing synchronization FIFO variance between DTP TX and RX paths.

## Conclusion
Synchronizing clocks with high precision and bounded error is challenging but essential for improving measurements and performance. In this paper, we presented DTP, which tightly synchronizes clocks with zero network overhead. DTP leverages the fact that physically connected devices are already synchronized for bitstream transmission. We demonstrated that DTP can achieve tens of nanoseconds precision, scale to an entire datacenter, and be accessed from software with better than 25 nanoseconds precision. The end-to-end precision is the sum of DTP's network precision (25.6 nanoseconds for directly connected nodes and 153.6 nanoseconds for a six-hop datacenter) and 50 nanoseconds precision from software.

## Acknowledgments
This work was partially funded and supported by a SLOAN Research Fellowship received by Hakim Weatherspoon, DARPA MRC, DARPA CSSG (D11AP00266), NSF CAREER (1053757), NSF TRUST (0424422), Cisco, and Intel. We thank our shepherd, Alex Snoeren, and the anonymous reviewers for their valuable comments.

## References
[1] Bluespec. www.bluespec.com.
[2] Broadcom. http://www.broadcom.com/products/Switching/Data-Center.
[3] DE5-Net FPGA development kit. http://de5-net.terasic.com.tw.
[4] Endace DAG network cards. http://www.endace.com/endace-dag-high-speed-packet-capture-cards.html.
[5] Exablaze. https://exablaze.com/.
[6] Fibre channel. http://fibrechannel.org.
[7] Highly accurate time synchronization with ConnectX-3 and Timekeeper. http://www.mellanox.com/pdf/whitepapers/WP_Highly_Accurate_Time_Synchronization.pdf.
[8] IEEE Standard 1588-2008. http://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=4579757.
[9] IEEE Standard 802.3-2008. http://standards.ieee.org/about/get/802/802.3.html.
[10] Intel 64 and IA-32 architectures software developer manuals. http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html.
[11] iperf. https://iperf.fr.
[12] ITU-T Rec. G.8262. http://www.itu.int/rec/T-REC-G.8262.
[13] Mellanox. www.mellanox.com.
[14] Open compute project. http://www.opencompute.org.
[15] Stratix V FPGA. http://www.altera.com/devices/fpga/stratix-fpgas/stratix-v/stxv-index.jsp.
[16] Timekeeper. http://www.fsmlabs.com/timekeeper.
[17] IEEE 1588 PTP and Analytics on the Cisco Nexus 3548 Switch. http://www.cisco.com/c/en/us/products/collateral/switches/nexus-3000-series-switches/white-paper-c11-731501.html, 2014.
[18] AL-FARES, M., LOUKISSAS, A., AND VAHDAT, A. A scalable, commodity data center network architecture. In Proceedings of the ACM SIGCOMM Conference on Data Communication (2008).
[19] BROADCOM. Ethernet time synchronization. http://www.broadcom.com/collateral/wp/StrataXGSIV-WP100-R.pdf.
[20] CHAPMAN, J. T., CHOPRA, R., AND MONTINI, L. The DOCSIS timing protocol (DTP) generating precision timing services from a DOCSIS system. In Proceedings of the Spring Technical Forum (2011).
[21] COCHRAN, R., MARINESCU, C., AND RIESCH, C. Synchronizing the Linux System Time to a PTP Hardware Clock. In Proceedings of the International IEEE Symposium on Precision Clock Synchronization for Measurement Control and Communication (2011).
[22] CORBETT, J. C., DEAN, J., EPSTEIN, M., FIKES, A., FROST, C., FURMAN, J. J., GHEMAWAT, S., GUBAREV, A., HEISER, C., HOCHSCHILD, P., HSIEH, W., KANTHAK, S., KOGAN, E., LI, H., LLOYD, A., MELNIK, S., MWAURA, D., NAGLE, D., QUINLAN, S., RAO, R., ROLIG, L., SAITO, Y., SZYMANIAK, M., TAYLOR, C., WANG, R., AND WOODFORD, D. Spanner: Google’s globally-distributed database. In Proceedings of the 10th USENIX conference on Operating Systems Design and Implementation (2012).
[23] COSTA, P., BALLANI, H., RAZAVI, K., AND KASH, I. R2C2: A network stack for rack-scale computers. In Proceedings of the ACM Conference on SIGCOMM (2015).
[24] CRISTIAN, F. Probabilistic clock synchronization. Distributed Computing 3 (September 1989), 146–158.
[25] DAVIS, M., VILLAIN, B., RIDOUX, J., ORGERIE, A.-C., AND VEITCH, D. An IEEE-1588 Compatible RADclock. In Proceedings of International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2012).
[26] EDWARDS, T. G., AND BELKIN, W. Using SDN to Facilitate Precisely Timed Actions on Real-time Data Streams. In Proceedings of the Third Workshop on Hot Topics in Software Defined Networking (2014).
[27] FREEDMAN, D. A., MARIAN, T., LEE, J. H., BIRMAN, K., WEATHERSPOON, H., AND XU, C. Exact temporal characterization of 10 Gbps optical wide-area network. In Proceedings of the 10th ACM SIGCOMM Conference on Internet measurement (2010).
[28] FROEHLICH, S., HACK, M., MENG, X., AND ZHANG, L. Achieving precise coordinated cluster time in a cluster environment. In Proceedings of International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2008).
[29] GUSELLA, R., AND ZATTI, S. The Accuracy of the Clock Synchronization Achieved by TEMPO in Berkeley UNIX 4.3BSD. IEEE Transactions on Software Engineering 15, 7 (July 1989), 847–853.
[30] JASPERNEITE, J., SHEHAB, K., AND WEBER, K. Enhancements to the time synchronization standard IEEE-1588 for a system of cascaded bridges. In Proceedings of the IEEE International Workshop in Factory Communication Systems (2004).
[31] KACHRIS, C., BERGMAN, K., AND TOMKOS, I. Optical Interconnects for Future Data Center Networks. Springer, 2013.
[32] KING, M., HICKS, J., AND ANKCORN, J. Software-driven hardware development. In Proceedings of the 2015 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays (2015).
[33] KOPETZ, H., AND OCHSENREITER, W. Clock synchronization in distributed real-time systems. IEEE Transactions on Computers C-36 (August 1987), 933–940.
[34] LAMPORT, L., AND MELLIAR-SMITH, P. M. Byzantine Clock Synchronization. In Proceedings of the Third Annual ACM Symposium on Principles of Distributed Computing (1984).
[35] LAPINSKI, M., WLOSTOWSKI, T., SERRANO, J., AND ALVAREZ, P. White Rabbit: a PTP Application for Robust Sub-nanosecond Synchronization. In Proceedings of the International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2012).
[36] LEE, K. S., WANG, H., AND WEATHERSPOON, H. SoNIC: Precise Realtime Software Access and Control of Wired Networks. In Proceedings of the 10th USENIX Symposium on Networked Systems Design and Implementation (2013).
[37] LEWANDOWSKI, W., AZOUBIB, J., AND KLEPCZYNSKI, W. J. GPS: primary tool for time transfer. Proceedings of the IEEE 87 (January 1999), 163–172.
[38] LI, H. IEEE 1588 time synchronization deployment for mobile backhaul in China Mobile, 2014. Keynote speech in the International IEEE Symposium on Precision Clock Synchronization for Measurement Control and Communication.
[39] LIPINSKI, M., WLOSTOWSKI, T., SERRANO, J., ALVAREZ, P., COBAS, J. D. G., RUBINI, A., AND MOREIRA, P. Performance results of the first White Rabbit installation for CNGS time transfer. In Proceedings of the International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2012).
[40] MALLADA, E., MENG, X., HACK, M., ZHANG, L., AND TANG, A. Skewless Network Clock Synchronization. In Proceedings of the 21st IEEE International Conference on Network Protocols (2013).
[41] MILLS, D. L. Internet time synchronization: the network time protocol. IEEE transactions on Communications 39 (October 1991), 1482–1493.
[42] MIZRAHI, T., AND MOSES, Y. Software Defined Networks: It’s about time. In Proceedings of the IEEE International Conference on Computer Communications (2016).
[43] MOREIRA, P., SERRANO, J., WLOSTOWSKI, T., LOSCHMIDT, P., AND GADERER, G. White Rabbit: Sub-Nanosecond Timing Distribution over Ethernet. In Proceedings of the International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2009).
[44] OGDEN, B., FADEL, J., AND WHITE, B. IBM system z9 109 technical introduction.
[45] OHLY, P., LOMBARD, D. N., AND STANTON, K. B. Hardware assisted precision time protocol. design and case study. In Proceedings of the 9th LCI International Conference on High-Performance Clustered Computing (2008).
[46] PÁSZTOR, A., AND VEITCH, D. PC Based Precision Timing Without GPS. In Proceedings of the ACM SIGMETRICS International Conference on Measurement and Modeling of Computer Systems (2002).
[47] PERRY, J., OUSTERHOUT, A., BALAKRISHNAN, H., SHAH, D., AND FUGAL, H. Fastpass: A centralized "zero-queue" datacenter network. In Proceedings of the ACM Conference on SIGCOMM (2014).
[48] SCHNEIDER, F. B. Understanding Protocols for Byzantine Clock Synchronization. Tech. Rep. TR87-859, Cornell University, August 1987.
[49] SOBEIH, A., HACK, M., LIU, Z., AND ZHANG, L. Almost Peer-to-Peer Clock Synchronization. In Proceedings of IEEE International Parallel and Distributed Processing Symposium (2007).
[50] VEITCH, D., BABU, S., AND PÀSZTOR, A. Robust Synchronization of Software Clocks Across the Internet. In Proceedings of the 4th ACM SIGCOMM Conference on Internet Measurement (2004).
[51] ZARICK, R., HAGEN, M., AND BARTOS, R. The impact of network latency on the synchronization of real-world IEEE 1588-2008 devices. In Proceedings of the International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2010).
[52] ZARICK, R., HAGEN, M., AND BARTOS, R. Transparent clocks vs. enterprise ethernet switches. In Proceedings of the International IEEE Symposium on Precision Clock Synchronization for Measurement, Control and Communication (2011).
[53] ZENG, H., ZHANG, S., YE, F., JEYAKUMAR, V., JU, M., LIU, J., MCKEOWN, N., AND VAHDAT, A. Libra: Divide and conquer to verify forwarding tables in huge networks. In Proceedings of the 11th USENIX Symposium on Networked Systems Design and Implementation (2014).