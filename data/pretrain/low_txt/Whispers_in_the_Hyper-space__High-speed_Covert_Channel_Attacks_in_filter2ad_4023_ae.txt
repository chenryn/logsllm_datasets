### 6.1 Threat Analysis

#### 6.1.1 Attack Scenario
Covert channel attacks differ from side-channel attacks, where the latter infers information by observing an unknowing sender. In contrast, covert channels facilitate data transfer between two collaborating parties. A successful covert channel attack requires an "insider" to act as a data source. The insider is typically placed within the victim system using engineering techniques [15, 27], gaining partial control over it. During the exfiltration phase, the insider attempts to traffic sensitive information back to the attackers. Given that insiders usually have limited control over the victim, their activities are subject to strict security surveillance, such as firewalls, network intrusion detection, and traffic logging. Consequently, covert channels become ideal for secret data transmissions under these circumstances.

#### 6.1.2 Achievable Bandwidth
Previous studies [18, 30] have concluded that covert channels in virtualized environments can only cause limited harm due to their low channel capacities. However, our experimental results with a high-speed and reliable covert channel challenge this view. Our covert channel achieves over 100 bits per second, making it suitable for large-scale data theft. For example, a 100-byte credit card entry can be stolen in less than 30 seconds, and a 1,000-byte private key file can be transmitted in under 3 minutes. Continuously, over 1 MB of data, equivalent to tens of thousands of credit card entries or hundreds of private key files, can be trafficked every 24 hours. This indicates that covert channels pose realistic and serious threats to information security in the cloud.

#### 6.1.3 Mitigation Difficulties
The threat posed by the memory bus covert channel can be assessed from four aspects: attack scenario, achievable bandwidth, mitigation difficulties, and cross-platform applicability. In addition to high channel capacity, the memory bus covert channel has two other properties that make it difficult to detect or prevent:
- **Stealthiness**: Since the processor cache is not used as a channel medium, the memory bus covert channel has a negligible impact on cache performance, making it transparent to cache-based detection methods like HomeAlone [31].
- **Future Proof**: Our in-house experiments show that even on platforms one generation ahead of Amazon EC2's systems, the memory bus covert channel continues to perform well.

#### 6.1.4 Cross-Platform Applicability
Due to hardware availability, we evaluated memory bus covert channels on Intel x86 platforms. We infer that similar covert channels can be established on AMD x86 platforms, given their compatible specifications for atomic instructions. However, atomic instruction exploits may not be applicable on platforms that use alternative semantics for operation atomicity, such as MIPS, which uses the load-linked/store-conditional paradigm and does not result in high memory bus contention.

### 6.2 Mitigation Techniques

#### 6.2.1 Tenant Mitigation
Mitigating covert channels at the tenant level offers the advantages of trust and deployment flexibility. Implementing mitigation techniques inside tenant-owned VMs ensures the tenant's confidence in covert channel security, regardless of whether the cloud provider addresses the issue. However, without lower-level (hypervisor and/or hardware) support, options are limited. Performance anomaly detection is the best approach. Although memory bus covert channels do not affect cache performance, they do cause memory performance degradation. A method similar to HomeAlone [31] can be used, where the defender continuously monitors memory access latencies and triggers alarms if significant anomalies are detected. However, this approach may suffer from high performance overhead and a high false positive rate due to the higher cost and non-determinism of memory accesses compared to cache probing.

#### 6.2.2 Cloud Provider Mitigation
Cloud providers have more resources and control over the hypervisor, hardware platform, entire network, and systems in a data center. They can tackle covert channels through preventative or detective countermeasures. Preventative approaches, such as the dedicated instances service provided by Amazon EC2 [1], eliminate the exploiting factors of covert channels. However, the significant extra service charge makes this option less attractive. A low-cost alternative could allow tenants to share system resources in a controlled and deterministic manner, making it difficult to attack arbitrary tenants. Additionally, cloud providers can implement low-overhead detection mechanisms by leveraging the hypervisor and platform hardware to monitor performance anomalies. When suspicious activities are detected, cloud providers can migrate suspicious VMs onto physically isolated servers, minimizing the negative effects of false positives.

#### 6.2.3 Device Manufacturer Mitigation
The defense approaches of tenants and cloud providers are secondary to mitigation by device manufacturers, as the root cause of covert channels lies in imperfect isolation of hardware resources. Countermeasures at the manufacturer level are mainly preventative and involve various forms of resource isolation improvements. For example, instead of handling exotic atomic memory operations in hardware, processors can be redesigned to trap these situations for the operating system or hypervisor to handle, without disrupting the entire system. A more general solution is to tag all resource requests from guest VMs, enabling the hardware to differentiate requests by their owner VMs and limit the scope of any performance impact. While these countermeasures incur high costs in hardware upgrades, they are transparent to cloud providers and tenants and can potentially yield the lowest performance penalty and overall cost compared to other mitigation approaches.

### 7 Conclusion and Future Work
Covert channel attacks in the cloud have been proposed and studied, but their threats are often downplayed due to the low achievable channel capacities reported by previous research. In this paper, we presented a novel construction of high-bandwidth and reliable cross-VM covert channels on the virtualized x86 platform. By studying existing cache channel techniques, we uncovered their limitations in a virtualized environment and addressed these obstacles by designing a pure timing-based data transmission scheme and discovering the bus locking mechanism as a powerful covert channel medium. Our experimental results show that covert channel attacks in a virtualized environment can achieve high bandwidth and reliable transmission, posing formidable threats to information security in the cloud. For future work, we plan to explore various mitigation techniques, particularly focusing on the promising field of countermeasures at the cloud provider side. Ensuring covert channel security gives cloud providers a clear edge over their competitors, providing strong incentives for investment in mitigation.

### References
[1] Amazon Web Services. Amazon EC2 dedicated instances. http://aws.amazon.com/dedicated-instances/.

[2] S. Bugiel, S. Nürnberger, T. Pöppelmann, A.-R. Sadeghi, and T. Schneider. AmazonIA: when elasticity snaps back. In Proceedings of the 18th ACM conference on Computer and communications security (CCS’11), pages 389–400, 2011.

[3] S. Cabuk, C. E. Brodley, and C. Shields. IP covert timing channels: design and detection. In Proceedings of the 11th ACM conference on Computer and communications security (CCS’04), pages 178–187, 2004.

[4] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: automatic adaptive detection and prevention of buffer-overﬂow attacks. In Proceedings of the 7th conference on USENIX Security Symposium, pages 63–78, 1998.

[5] Department of Defense. TCSEC: Trusted computer system evaluation criteria. Technical Report 5200.28-STD, U.S. Department of Defense, 1985.

[6] J. W. Gray III. On introducing noise into the bus-contention channel. In Proceedings of the 1993 IEEE Symposium on Security and Privacy (S&P’93), pages 90–98, 1993.

[7] J. W. Gray III. Countermeasures and tradeoffs for a class of covert timing channels. Technical report, Hong Kong University of Science and Technology, 1994.

[8] W. Hu. Reducing timing charmers with fuzzy time. In Proceedings of the 1991 IEEE Symposium on Security and Privacy (S&P’91), pages 8–20, 1991.

[9] W. Hu. Lattice scheduling and covert channels. In Proceedings of the IEEE Symposium on Security and Privacy (S&P’92), pages 52–61, 1992.

[10] Intel. The Intel 64 and IA-32 architectures software developer’s manual. http://www.intel.com/products/processor/manuals/.

[11] J. Kong, O. Aciicmez, J.-P. Seifert, and H. Zhou. Hardware-software integrated approaches to defend against software cache-based side channel attacks. In Proceedings of the IEEE 15th International Symposium on High Performance Computer Architecture (HPCA’09), pages 393–404, 2009.

[12] B. W. Lampson. A note on the confinement problem. Communications of the ACM, 16:613–615, 1973.

[13] F. G. G. Meade. A guide to understanding covert channel analysis of trusted systems. Manual NCSC-TG-030, U.S. National Computer Security Center, 1993.

[14] D. G. Murray, S. H, and M. A. Fetterman. Satori: Enlightened page sharing. In Proceedings of the USENIX Annual Technical Conference (ATC’09), pages 1–14, 2009.

[15] G. L. Orgill, G. W. Romney, M. G. Bailey, and P. M. Orgill. The urgency for effective user privacy-education to counter social engineering attacks on secure computer systems. In Proceedings of the 5th conference on Information technology education (CITC5’04), pages 177–181, 2004.

[16] C. Percival. Cache missing for fun and profit. In Proceedings of the BSDCan 2005, 2005.

[17] I. S. Reed and G. Solomon. Polynomial codes over certain finite fields. Journal of the Society for Industrial and Applied Mathematics, 8(2):300–304, 1960.

[18] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage. Hey, you, get off of my cloud: exploring information leakage in third-party compute clouds. In Proceedings of the 16th ACM conference on Computer and communications security (CCS’09), pages 199–212, 2009.

[19] C. H. Rowland. Covert channels in the TCP/IP protocol suite. First Monday, 2, 1997.

[20] G. Shah and M. Blaze. Covert channels through external interference. In Proceedings of the 3rd USENIX conference on Offensive technologies (WOOT’09), pages 1–7, 2009.

[21] G. Shah, A. Molina, and M. Blaze. Keyboards and covert channels. In Proceedings of the 15th conference on USENIX Security Symposium, pages 59–75, 2006.

[22] K. Suzaki, K. Iijima, T. Yagi, and C. Artho. Software side channel attack on memory deduplication. Poster, 2011.

[23] T. V. Vleck. Timing channels. Poster session, IEEE TCSP conference, 1990.

[24] Z. Wang and R. B. Lee. Covert and side channels due to processor architecture. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC’06), pages 473–482, 2006.

[25] Z. Wang and R. B. Lee. A novel cache architecture with enhanced performance and security. In Proceedings of the 41st annual IEEE/ACM International Symposium on Microarchitecture (MICRO’41), pages 83–93, 2008.

[26] J. Wei, X. Zhang, G. Ammons, V. Bala, and P. Ning. Managing security of virtual machine images in a cloud environment. In Proceedings of the 2009 ACM workshop on Cloud computing security (CCSW’09), pages 91–96, 2009.

[27] I. S. Winkler and B. Dealy. Information security technology?...don’t rely on it: a case study in social engineering. In Proceedings of the 5th conference on USENIX UNIX Security Symposium, pages 1–5, 1995.

[28] J. Winkler and J. Munn. Standards and architecture for token-ring local area networks. In Proceedings of 1986 ACM Fall joint computer conference (ACM’86), pages 479–488, 1986.

[29] XenSource. Xen credit scheduler. http://wiki.xensource.com/xenwiki/CreditScheduler.

[30] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and R. Schlichting. An exploration of L2 cache covert channels in virtualized environments. In Proceedings of the 3rd ACM workshop on Cloud computing security workshop (CCSW’11), pages 29–40, 2011.

[31] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter. Homealone: Co-residency detection in the cloud via side-channel analysis. In Proceedings of the 2011 IEEE Symposium on Security and Privacy (S&P’11), pages 313–328, 2011.