### Attack Scenarios and Mitigation Strategies

#### SIP Manipulation Attacks
- **Manipulate SIP Tag**: Modify the tag in an `SIP OK` response.
- **SIP INVITE to Fake ID**: Send an `SIP INVITE` message to a fake ID at a suspicious IP address.
- **Invalid SIP Messages**: Send an `SIP INVALID` message or an `SIP BYE` with an invalid SIP-ID.
- **RTP Packet Dropping**: Drop RTP packets (used only for confirmation).

#### Imitation Requirements
- **Soft, SideProtocols, Soft, Err, SideProtocols,Err, SideProtocols, Soft, Network**
- **Adversary**: LO/OB/OM (Local, On-Path, Off-Path)
- **Typical SIP Clients**: Examples include Ekiga.

#### CensorSpoofer Behavior
- **Client Closes Call**: The client terminates the call.
- **LO/OB/OM Responses**:
  - Respond with "100 Trying" and "180 Ringing", "483 Busy Here", "603 Decline", or "404 Not Found".
  - Respond with "400 BadRequest".
  - Respond with "481 Call Leg/Transaction Does Not Exist".
- **Call Termination**: Terminate the call after a time period, which may vary based on the client. More advanced clients may change codecs.

#### Genuine SIP Client Behavior
- **Status Messages**: A genuine SIP client returns status messages such as "100 Trying", "180 Ringing", "483 Busy Here", "603 Decline", or "404 Not Found".
- **CensorSpoofer Response**: CensorSpoofer does not return any response because it does not receive the censor's `INVITE`.

#### Invalid SIP Message
- **Send Invalid SIP Message**: In response to an undefined message, a genuine SIP client returns "400 BadRequest [Malformed Packet]". CensorSpoofer returns nothing.
- **Transparency**: This test is transparent to genuine callees.

#### Non-Existing Call
- **Send Message for Non-Existing Call**: If the censor sends a SIP message (e.g., `BYE`) for a random call ID, a genuine SIP client returns "481 Call Leg/Transaction Does Not Exist". CensorSpoofer returns nothing.
- **Transparency**: This test is also transparent to genuine callees.

#### Mitigation Techniques
- **IP Address Selection Algorithm**: CensorSpoofer can change its IP address selection algorithm and use similar probes to find addresses running genuine SIP clients, reducing the set of usable addresses for spoofing.
- **nmap-Based Selection**: The nmap-based selection algorithm finds only 12.1% of 10,000 random IP addresses suitable for spoofing.
- **Imitation of Proprietary Services**: CensorSpoofer may attempt to mimic more popular proprietary services like Skype, Oovoo, and Google Voice. However, this imitation is easily detectable due to the use of spoofed IP addresses.

#### Manipulating Upstream Packets
- **Requirements**: SideProtocols, Soft, Network
- **Adversary**: Active, LO/OB/OM
- **RTCP Functionality**: RTCP provides feedback on the quality of RTP sessions. However, tested VoIP clients (e.g., Ekiga, Blink, PhonerLite, Twinkle) do not react when RTP and RTCP packets are dropped at various rates. Dropping all RTP packets for 10 seconds to 2 minutes results in the client terminating the call.
- **Detection**: Dropping all RTP packets will cause a genuine RTP session to close, but a CensorSpoofer session will not react. This attack is used for confirmation, e.g., for calls that failed SIP probing tests.

### Related Work
- **Unobservability Definitions**: Pfitzmann and Hansen [45] proposed definitions for privacy-related concepts, including unobservability. Unobservability has been interpreted as anonymity or plausible deniability in various systems.
- **Infranet and Collage**: These systems use steganography to hide content within images or user-generated content sites.
- **Nonesuch**: Hides data in Usenet newsgroup messages and uses mixes to probabilistically detect and remove cover traffic.
- **Pluggable Tor Transports**: Technologies like Obfsproxy and Flashproxy aim to disguise Tor traffic, but they fail to achieve full unobservability.
- **Decoy Routing**: An alternative approach where a client hides requests inside traffic sent to non-blocked destinations. A friendly router intercepts and redirects the request.

### Lessons and Recommendations
- **Importance of Unobservability**: Unobservability is crucial for censorship-resistant communication systems.
- **Understanding Adversaries**: Real-world censors look for local deviations from genuine protocols rather than sophisticated statistical analysis.
- **Flaws in Imitation**: Imitating a protocol is fundamentally flawed due to the complexity of implementation-specific quirks and bugs.
- **Partial Imitation Risks**: Partial imitation can be worse than no imitation, as it makes the traffic more distinct and recognizable.
- **Alternative Approaches**: Running the actual protocol and hiding data higher in the stack, such as FreeWave and SWEET, may be more effective.

### Acknowledgments
- **Contributions**: Gratitude to Suman Jana and Zack Weinberg for their insights.
- **Funding**: Research supported by DARPA, SPAWAR Systems Center Pacific, NSF, and AFOSR.

### References
- [1] D. Adami, C. Callegari, S. Giordano, M. Pagano, and T. Pepe. "Skype-Hunter: A Real-Time System for the Detection and Classification of Skype Traffic." Int. J. Communication Systems, 25(3):386–403, 2012.
- [2] K. Allen. "A Software Developer’s Guide to HTTP." http://odetocode.com/articles/743.aspx.
- [3] J. Arkko, E. Carrara, F. Lindholm, M. Naslund, and K. Norrman. "MIKEY: Multimedia Internet KEYing." RFC 3830.
- [4] "Joining China, Iran, and Australia to Filter Internet." http://www.foxnews.com/scitech/2009/12/15/like-china-iran-australia-filter-internet.
- [5] S. Baset and H. Schulzrinne. "An Analysis of the Skype Peer-to-Peer Internet Telephony Protocol." In INFOCOM, 2006.
- [6] S. Baset and H. Schulzrinne. "Skype Relay Calls: Measurements and Experiments." In INFOCOM, 2008.
- [7] D. Bates, A. Barth, and C. Jackson. "Regular Expressions Considered Harmful in Client-side XSS Filters." In WWW, 2010.
- [8] O. Berthold, H. Federrath, and S. Kopsell. "Web MIXes: A System for Anonymous and Unobservable Internet Access." In Design Issues in Anonymity and Unobservability, 2000.
- [9] D. Bonfiglio and M. Mellia. "Tracking Down Skype Traffic." In INFOCOM, 2008.
- [10] D. Bonfiglio, M. Mellia, and M. Meo. "Revealing Skype Traffic: When Randomness Plays With You." In SIGCOMM, 2007.
- [11] R. Breen. "Circumventing Browser Connection Limits for Fun and Profit." http://www.ajaxperformance.com/2006/12/18/circumventing-browser-connection-limits-for-fun-and-profit/, 2006.
- [12] "Bridge Easily Detected by GFW." https://trac.torproject.org/projects/tor/ticket/4185, 2011.
- [13] "Tor BridgeDB." https://gitweb.torproject.org/bridgedb.git/tree.
- [14] S. Burnett, N. Feamster, and S. Vempala. "Chipping Away at Censorship Firewalls with User-Generated Content." In USENIX Security, 2010.
- [15] I. Cox, J. Kilian, F. T. Leighton, and T. Shamoon. "Secure Spread Spectrum Watermarking for Multimedia." IEEE Transactions on Image Processing, 6(12), 1997.
- [16] "Defeat Internet Censorship: Overview of Advanced Technologies and Products." http://www.internetfreedom.org/archive/Defeat Internet Censorship White Paper.pdf, 2007.
- [17] R. Dingledine and N. Mathewson. "Design of a Blocking-Resistant Anonymity System." https://svn.torproject.org/svn/