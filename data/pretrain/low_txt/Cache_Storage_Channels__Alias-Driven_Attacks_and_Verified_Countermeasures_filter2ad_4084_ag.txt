### Introduction

This document is authorized for licensed use limited to IEEE Xplore. It was downloaded on March 18, 2021, at 12:13:33 UTC from IEEE Xplore. Usage restrictions apply.

### Analysis of Cache-Based Attacks and Countermeasures

In the context of security verification, it is essential to address vulnerabilities that arise from timing attacks and power consumption attacks, which cannot be mitigated by solely focusing on variables within the Instruction Set Architecture (ISA) specification. To enhance existing verification efforts, methodologies must be developed to address these issues. For some existing countermeasures, this task can be reduced to checking relational observation equivalence. We have adapted an existing tool [6] to check conditions sufficient to prevent information leakage through new cache channels. Generally, additional checks in code verification need to be complemented by a correctness proof of the countermeasure on a suitable cache model. Specifically, it must be demonstrated that memory coherency is preserved by the countermeasure and that an attacker cannot observe sensitive information even if they can create non-cacheable aliases.

### Integrity Threats and Memory Ownership Transfer

The attack described in Section III-B raises particular concerns as it poses integrity threats that cannot be carried out using timing channels. Potential victims include systems where memory ownership is transferred from an untrusted agent to a trusted one, and the trusted agent checks the content of this memory before using it as a parameter in a critical function. If the cache is not clean after the transfer, the trusted agent may validate stale input while the critical function uses different data. This practice of transferring ownership between security domains is commonly used to reduce memory copies, such as in hypervisors that use direct paging, runtime monitors that inspect executable code to prevent malware execution, and reference monitors that inspect IP packets or validate device driver requests.

### Future Work and Challenges

Several issues remain for future work. We have not provided a mechanism to check the security of some countermeasures like Cache Normalisation, nor have we applied our methodology to a complete software system. Additionally, the channels we identified may not cover all existing storage side channels. Misconfiguration of architectural details such as branch prediction, TLBs, and shareability attributes can lead to behaviors inconsistent with the ISA specification. In virtualized environments, it is crucial to identify under which conditions trusted software preserves its security properties when an adversary can configure these resources.

### Flushing Caches and Hardware Mechanisms

When changing storage control bits in page table entries, programmers must flush the caches. This highlights the lack of mandated hardware mechanisms to handle unexpected cache hits. Recent works have successfully verified low-level execution platforms that provide trustworthy mechanisms to isolate commodity software, but caches are often excluded from the analysis. An exception is the work by Barthe et al. [8], which provides an abstract model of cache behavior sufficient to replicate various timing-based exploits and countermeasures, such as STEALTHMEM.

### Verification of seL4 and Other Systems

The verification of seL4 assumes that caches are correctly handled [29] and ignores timing channels. Cock et al. [13] examined the bandwidth of timing channels in seL4 and possible countermeasures. While storage-based channels have not been addressed, kernel integrity seems to be preserved in practice by passing system call arguments through registers only.

The VerisoftXT project targeted the verification of Microsoft Hyper-V and devised a semantic stack to underpin code verification with the VCC tool [14]. Guests are modeled as full x64 machines where caches cannot be made transparent if the same address is accessed in both cacheable and uncacheable modes, but no implications on security have been discussed. Since the hypervisor uses a shadow page algorithm, where guest translations are concatenated with a secure host translation, integrity properties do not seem to be jeopardized by any actions of the guest.

Similarly, the Nova [45], [46] and CertiKOS [21] microvisors do not consider caches in their formal analysis but use hardware supporting second-level address translation controlled by the host and unaffected by the guest. However, the CertiKOS system keeps partition management software in a separate partition that can be contacted by other guests via IPC to request access to resources, making this IPC interface a potential target for attacks using uncacheable aliases.

### Vulnerability to Cache Storage Channel Information Leakage

All the aforementioned systems appear vulnerable to cache storage channel information leakage if they allow guest systems to set up uncacheable memory mappings. Any proof of information flow properties must account for caches to be sound. In this paper, we demonstrate for the first time how to conduct a non-interference proof that also treats possible data cache storage channels.

### Concluding Remarks

We have presented novel cache-based attack vectors that use storage channels and demonstrated their usage to threaten the integrity and confidentiality of real software. To the best of our knowledge, this is the first time cache-based storage channels have been demonstrated on commodity hardware. These new attack vectors partially invalidate the results of formal verification performed at the ISA level. From a practical perspective, we focused our experiments on exploiting the L1 cache. For example, to extract the secret key of the AES service on Raspberry Pi 2, we had to flush and clean the L2 cache due to its shared nature with the GPU. Shared L2 caches also open the possibility of concurrent attacks, where the attacker can use a shader executed on the GPU. The same channels can be built in a multi-core setting using shared caches, allowing the replication of known timing attacks on shared caches.

### Acknowledgments

The authors would like to thank Didrik Lundberg for supporting the development of the Raspberry Pi 2 prototypes. This work was partially supported by the PROSPER framework grant from the Swedish Foundation for Strategic Research, the Swedish Governmental Agency for Innovation Systems under grant 2014-00702, and the CERCES project funded by the Swedish Civil Contingencies Agency.

### References

[1] ARM TrustZone. <http://www.arm.com/products/processors/technologies/trustzone.php>

[2] O. Acıicmez and C. K. Koc. Trace-driven cache attacks on AES (short paper). In Proceedings of the 8th International Conference on Information and Communications Security, ICICS’06, pages 112–121. Springer-Verlag, 2006.

[3] J. Agat. Transforming out timing leaks. In Proceedings of the 27th Symposium on Principles of Programming Languages, POPL ’00, pages 40–53. ACM, 2000.

[4] E. Alkassar, M. A. Hillebrand, D. Leinenbach, N. Schirmer, A. Starostin, and A. Tsyban. Balancing the load. J. Autom. Reasoning, 42(2-4):389–454, 2009.

[5] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and W. Shen. Hypervision Across Worlds: Real-time Kernel Protection from the ARM TrustZone Secure World. In Proceedings of the Conference on Computer and Communications Security, CCS’14, pages 90–102. ACM, 2014.

[6] M. Balliu, M. Dam, and R. Guanciale. Automating information flow analysis of low-level code. In Proceedings of the Conference on Computer and Communications Security, CCS’14, pages 1080–1091. ACM, 2014.

[7] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the art of virtualization. ACM Operating Systems Review, 37(5):164–177, 2003.

[8] G. Barthe, G. Betarte, J. D. Campo, J. M. Chimento, and C. Luna. Formally verified implementation of an idealized model of virtualization. In Proceedings of the 19th International Conference on Types for Proofs and Programs, TYPES’13, pages 45–63, 2014.

[9] G. Bertoni, V. Zaccaria, L. Breveglieri, M. Monchiero, and G. Palermo. AES power attack based on induced cache miss and countermeasure. In Proceedings of the International Conference on Information Technology: Coding and Computing, ITCC’05, pages 586–591. IEEE Computer Society, 2005.

[10] S. Bratus, N. D’Cunha, E. Sparks, and S. W. Smith. TOCTOU, traps, and trusted computing. In Proceedings of the 1st International Conference on Trusted Computing and Trust in Information Technologies: Trusted Computing - Challenges and Applications, Trust’08, pages 14–32. Springer-Verlag, 2008.

[11] B. Brumley. Cache storage attacks. In Topics in Cryptology CT-RSA, pages 22–34. 2015.

[12] H. Chfouka, H. Nemati, R. Guanciale, M. Dam, and P. Ekdahl. Trustworthy prevention of code injection in Linux on embedded devices. In Proceedings of the 20th European Symposium on Research in Computer Security, ESORICS’15, pages 90–107. Springer, 2015.

[13] D. Cock, Q. Ge, T. Murray, and G. Heiser. The Last Mile: An Empirical Study of Timing Channels on seL4. In Proceedings of the Conference on Computer and Communications Security, CCS’14, pages 570–581. ACM, 2014.

[14] E. Cohen, W. Paul, and S. Schmaltz. Theory of multi-core hypervisor verification. In 39th International Conference on Current Trends in Theory and Practice of Computer Science, SOFSEM’2013, pages 1–27. Springer, 2013.

[15] Cortex-A7 mpcore processors. <http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.subset.cortexa.cortexa7>

[16] Cortex-A8 processors. <http://infocenter.arm.com/help/topic/com.arm.doc.subset.cortexa.a8>

[17] J. Daemen and V. Rijmen. The design of Rijndael: AES-the advanced encryption standard. Springer Science & Business Media, 2013.

[18] M. Dam, R. Guanciale, N. Khakpour, H. Nemati, and O. Schwarz. Formal verification of information flow security for a simple ARM-based separation kernel. In Proceedings of the Conference on Computer and Communications Security, CCS’13, pages 223–234. ACM, 2013.

[19] L. Duflot, O. Levillain, B. Morin, and O. Grumelard. Getting into the SMRAM: SMM reloaded. CanSecWest, 2009.

[20] M. M. Godfrey and M. Zulkernine. Preventing cache-based side-channel attacks in a cloud environment. IEEE T. Cloud Computing, 2(4):395–408, 2014.

[21] L. Gu, A. Vaynberg, B. Ford, Z. Shao, and D. Costanzo. CertiKOS: a certified kernel for secure cloud computing. In Proceedings of the Second Asia-Pacific Workshop on Systems, APSys’11, page 3. ACM, 2011.

[22] D. Gullasch, E. Bangerter, and S. Krenn. Cache games – bringing access-based cache attacks on AES to practice. In Proceedings of the Symposium on Security and Privacy, SP’11, pages 490–505. IEEE Computer Society, 2011.

[23] C. Heitmeyer, M. Archer, E. Leonard, and J. McLean. Applying formal methods to a certifiably secure software system. IEEE Trans. Softw. Eng., 34(1):82–98, Jan. 2008.

[24] M. A. Hillebrand, T. I. der Rieden, and W. J. Paul. Dealing with I/O devices in the context of pervasive system verification. In Proceedings of the International Conference on Computer Design: VLSI in Computers and Processors, ICCD’05, pages 309–316. IEEE, 2005.

[25] M. S. Inci, B. Gülmezoglu, G. I. Apecechea, T. Eisenbarth, and B. Sunar. Seriously, get off my cloud! cross-VM RSA key recovery in a public cloud. IACR Cryptology ePrint Archive, 2015:898, 2015.

[26] Intel 64 and IA-32 Architectures Software Developer’s Manual. <http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf>

[27] J. Kelsey, B. Schneier, D. Wagner, and C. Hall. Side channel cryptanalysis of product ciphers. J. Comput. Secur., 8(2,3):141–158, Aug. 2000.

[28] T. Kim, M. Peinado, and G. Mainar-Ruiz. STEALTHMEM: System-level protection against cache-based side channel attacks in the cloud. In USENIX, pages 189–204, 2012.

[29] G. Klein, J. Andronick, K. Elphinstone, T. C. Murray, T. Sewell, R. Kolanski, and G. Heiser. Comprehensive formal verification of an OS microkernel. ACM Trans. Comput. Syst., 32(1):2, 2014.

[30] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4: Formal Verification of an OS Kernel. In Proceedings of the 22nd Symposium on Operating Systems Principles, SOSP’09, pages 207–220. ACM, 2009.

[31] P. C. Kocher. Timing attacks on implementations of Diffie-Hellman, RSA, DSS, and other systems. In Proceedings of the 16th Annual International Cryptology Conference on Advances in Cryptology, CRYPTO ’96, pages 104–113. Springer-Verlag, 1996.

[32] D. Leinenbach and T. Santen. Verifying the Microsoft Hyper-V hypervisor with VCC. In Proceedings of the 2nd World Congress on Formal Methods, FM ’09, pages 806–809. Springer-Verlag, 2009.

[33] H. Nemati, R. Guanciale, and M. Dam. Trustworthy virtualization of the ARMv7 memory subsystem. In Proceedings of the 41st International Conference on Current Trends in Theory and Practice of Computer Science, SOFSEM’15, pages 578–589. Springer, 2015.

[34] M. Neve and J.-P. Seifert. Advances on access-driven cache attacks on AES. In Proceedings of the 13th International Conference on Selected Areas in Cryptography, SAC’06, pages 147–162. Springer-Verlag, 2007.

[35] OpenSSL. <https://www.openssl.org>

[36] D. Page. Theoretical use of cache memory as a cryptanalytic side-channel. IACR Cryptology ePrint Archive, 2002:169, 2002.

[37] C. Percival. Cache missing for fun and profit. BSDCan, 2005.

[38] Power ISA version 2.07. <https://www.power.org/wp-content/uploads/2013/05/PowerISA_V2.07_PUBLIC.pdf>

[39] N. Qu, X. Gou, and X. Cheng. Using uncacheable memory to improve Unity Linux performance. In Proceedings of the 6th Annual Workshop on the Interaction between Operating Systems and Computer Architecture, pages 27–32, 2005.

[40] H. Raj, R. Nathuji, A. Singh, and P. England. Resource management for isolation enhanced cloud services. In Proceedings of the Workshop on Cloud Computing Security, CCSW ’09, pages 77–84. ACM, 2009.

[41] R. Richards. Modeling and security analysis of a commercial real-time operating system kernel. In D. S. Hardin, editor, Design and Verification of Microprocessor Systems for High-Assurance Applications, pages 301–322. Springer US, 2010.

[42] Raspberry Pi 2 Model B. <https://www.raspberrypi.org/products/raspberry-pi-2-model-b/>

[43] S. M. Silver. Implementation and analysis of software-based fault isolation. Technical Report PCS-TR96-287, Dartmouth College, 1996.

[44] D. Stefan, P. Buiras, E. Yang, A. Levy, D. Terei, A. Russo, and D. Mazires. Eliminating cache-based timing attacks with instruction-based scheduling. In Proceedings of the 18th European Symposium on Research in Computer Security, ESORICS’13, pages 718–735. Springer, 2013.

[45] U. Steinberg and B. Kauer. NOVA: A microhypervisor-based secure virtualization architecture. In Proceedings of the 5th European Conference on Computer Systems, EuroSys ’10, pages 209–222. ACM, 2010.

[46] H. Tews, M. Völ