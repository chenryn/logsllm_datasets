### Monday

**Figure 15: API Session Management Operations and Authentication Service Requests**
- The inner plot shows API session requests under a DDoS attack.
- **Time (days):** 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30
- **Session Length:** 0.01s, 0.1s, 1s, 10s, 60s, 1h, 8h, 1d, 1w, 1m
- **Active Sessions:** 10^0, 10^2, 10^4, 10^6
- **Storage Operations per Session:** 0.2, 0.4, 0.6, 0.8, 1.0

**Figure 16: Distribution of Session Lengths and Storage Operations per Session**
- **Active Sessions:**
  - 80% of active sessions exhibited at most 92 storage operations.
  - The remaining 20% accounted for 96.7% of all data management operations.
- **Session Length:**
  - All sessions
  - Active sessions

**Observations:**
- There is a significant variation in the activity levels of sessions. Some sessions are much more active than others.
- A provider can optimize session management by deciding whether a desktop client should work in a pull (cold sessions) or push (active sessions) fashion to limit the number of open TCP connections.

### 8. Related Work

**Performance Evaluation of Cloud Storage Services:**
- Several recent papers have focused on the performance evaluation of cloud storage services.
- **Hill et al. [25]:** Quantitative analysis of the Windows Azure Platform, including storage.
- **Palankar et al. [26]:** Extensive measurement of Amazon S3 to determine its suitability for scientific Grids.
- **Liu et al. [18]:** In-depth inspection of workload patterns in a university campus storage system, focusing on macroscopic storage workload metrics and request types.
- These studies do not provide insights into Personal Clouds.

**Research on Personal Cloud Storage Services:**
- Despite their commercial popularity, few research works have analyzed the performance of Personal Cloud storage services.
- **Categories:**
  - **Active Measurements:**
    - **Hu et al. [6]:** Compared Dropbox, Mozy, Carbonite, and CrashPlan, focusing on backup/restore times and privacy/security issues.
    - **Gracia-Tinedo et al. [7]:** Studied the REST interfaces of major Personal Cloud providers, analyzing QoS and potential exploitability.
    - **Drago et al. [3]:** Presented a benchmarking framework for Personal Cloud desktop clients, comparing different data reduction techniques.
  - **Passive Measurements:**
    - **Drago et al. [2]:** External measurement of Dropbox in university and residential networks, analyzing traffic and service architecture.
    - **Mager et al. [28]:** Uncovered the architecture and data management of Wuala, a peer-assisted Personal Cloud.
    - **Li et al. [5]:** Analyzed Personal Cloud users in university and corporate environments, studying file sync protocols and data reduction techniques.

**Key Differences with Prior Work:**
- Our study focuses on the metadata back-end servers of a Personal Cloud, providing unique insights from within a data center.
- This analysis will help researchers optimize aspects such as file synchronization and security.

### 9. Discussion and Conclusions

**Objectives:**
- Unveil the internal operation and infrastructure of a real-world Personal Cloud provider (UbuntuOne, U1).
- Reconfirm, expand, and contribute observations to generalize characteristics of these systems.
- Propose potential improvements for these systems.

**Findings:**
- U1 shares similarities with other large-scale Personal Clouds, such as decoupling data and metadata.
- Confirmed and expanded on previous observations regarding user behavior, deduplication, and user operation sequences.
- Modeled the burstiness of user operations, analyzed file behavior, provided evidence of DDoS attacks, and illustrated the performance of the U1 metadata back-end.

**Cost and Optimization:**
- Understanding user behavior is essential for adapting the system to actual demands and reducing costs.
- **Optimizing Storage:**
  - File updates were responsible for 18.5% of upload traffic, indicating a need for delta updates.
  - Simple optimizations like file-based deduplication could save 17% of storage costs.
- **User Activity:**
  - 1% of U1 users generated 65% of traffic, suggesting a Pareto Principle.
  - Limiting the activity of free accounts or using cost-effective techniques like distributed caching and data prefetching could reduce operational costs.
- **Security:**
  - Frequent DDoS attacks aimed at sharing illegal content highlight the need for secure storage protocols and automated countermeasures.

### Acknowledgment

This work was funded by the Spanish Ministry of Science and Innovation through projects DELFIN (TIN-2010-20140-C03-03) and "Servicios Cloud y Redes Comunitarias" (TIN-2013-47245-C2-2-R), as well as by the European Union through projects FP7 CloudSpaces (FP7-317555) and H2020 IOStack (H2020-644182). We also thank Jordi Pujol-Ahull√≥ for his feedback on the latest versions of this paper.

### 10. References

[References listed as in the original text]

### Appendix: Upload Management in U1

**File Upload Lifecycle:**
- U1 uses the multipart upload API offered by Amazon S3.
- **Upload State Machine:**
  - Upon receiving an upload request, U1 checks if the file content is already stored using a SHA-1 hash.
  - If deduplication is not applicable, a new upload begins, and an entry for the new file is created in the metadata store.
  - For multipart uploads, a new `uploadjob` data structure is created to track the process.
  - The API server requests a multipart ID from Amazon S3 and uploads file chunks, updating the `uploadjob` state.
  - Upon completion, the `uploadjob` is deleted from the metadata store, and Amazon S3 is notified.
  - A periodic garbage-collection process deletes `uploadjob` data structures older than one week.

**Table 4: Upload-Related RPC Operations Interacting with the Metadata Store**
- **Continues a multipart upload by adding a new chunk.**
- **Garbage-collects the server-side state for a multipart upload.**
- **Checks whether the server already has the content being uploaded.**
- **Gets the server-side state for a multipart upload.**
- **Makes a file entry in the metadata store.**
- **Sets up the server-side structure for multipart upload.**
- **Sets the requested Amazon S3 multipart upload ID to the uploadjob.**
- **Checks if the client has canceled the multipart upload.**

![Figure 17: Upload State Machine in U1](figure_17_upload_state_machine.png)

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the original text.