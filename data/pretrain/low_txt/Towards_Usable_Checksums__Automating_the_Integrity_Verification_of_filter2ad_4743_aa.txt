# Towards Usable Checksums: Automating the Integrity Verification of Web Downloads for the Masses

**Authors:**
- Mauro Cherubini, UNIL – HEC Lausanne, Switzerland (mauro.cherubini@unil.ch)
- Alexandre Meylan, UNIL – HEC Lausanne, Switzerland (alexandre.meylan@unil.ch)
- Bertil Chapuis, UNIL – HEC Lausanne, Switzerland (bertil.chapuis@unil.ch)
- Mathias Humbert, Swiss Data Science Center, ETH Zurich and EPFL, Switzerland (mathias.humbert@epfl.ch)
- Igor Bilogrevic, Google Inc., Switzerland (igor.bilogrevic@google.com)
- Kévin Huguenin, UNIL – HEC Lausanne, Switzerland (kevin.huguenin@unil.ch)

## Abstract
Internet users often download software from developers' websites, making them responsible for the integrity of the downloaded files. Developers can provide checksums to help users verify the integrity of these files. In this paper, we assess the prevalence of checksum verification among a representative sample of 2,000 US Internet users and develop user-friendly tools to automate the process. We propose an extension to the W3C sub-resource integrity (SRI) specification to protect download links and develop a Chrome browser extension that automatically computes and verifies checksums. Additionally, we create a WordPress CMS plugin for developers to easily attach checksums to their content. Our in situ experiments with 40 participants highlight the usability and effectiveness of our solution.

## CCS Concepts
- **Security and Privacy:** Web protocol security, Usability in security and privacy, Hash functions and message authentication codes

## Keywords
- Checksums
- Web downloads
- Security
- Usability

## 1 Introduction
The Internet is the primary source for obtaining software. While app stores like Apple’s Mac App Store and Microsoft’s Windows Store are popular, they have several drawbacks for developers, including long review times, technical restrictions, and high commissions. Consequently, many developers make their software available directly from their websites. This method, however, introduces risks, as third-party hosting platforms can be compromised, leading to the distribution of corrupted or malicious files.

To mitigate these risks, developers often provide checksums on their websites. However, the current practice of manual checksum verification is cumbersome and error-prone. This paper addresses these challenges by conducting a comprehensive study on the use of checksums and proposing automated solutions to improve their usability and effectiveness.

### Research Contributions
- **Comprehensive Study:** We conduct the first large-scale study on the use of checksums, including a survey of 2,000 Internet users, a website survey of 20 popular programs, and an in-person experiment with 40 participants.
- **W3C SRI Extension:** We propose an extension to the W3C SRI specification to standardize the use of checksums for web downloads.
- **Browser Extension:** We develop a Chrome browser extension that automatically verifies checksums and alerts users to potential mismatches.
- **WordPress Plugin:** We create a WordPress plugin that automates the generation and inclusion of checksums in download links.

### Findings
- **User Behavior:** Only 1.7% of survey respondents check the integrity of their downloads, and only 5.2% would use a checksum if provided.
- **Website Practices:** Many download pages use weak hash functions (MD5 and SHA1), and few provide clear instructions on how to verify file integrity.
- **Experiment Results:** Over one-third of participants failed to detect a partial pre-image attack, highlighting the need for automated verification.

## 2 Related Work
### 2.1 Download Behavior
Studies have shown that while users are generally aware of security threats, they often lack the knowledge and motivation to implement effective safeguards. Factors such as cognitive, social, and psychological components influence their behavior. However, specific studies on internet downloads are limited.

### 2.2 Effectiveness of Security Warnings
Research has demonstrated that security warnings can reduce risky behavior but are often ignored due to frequent exposure and habituation. Effective warnings should be clear, concise, and provide actionable information.

## 3 System and Threat Models
We consider a scenario where a website administrator includes a download link to a program hosted on a third-party server. The threat model involves the possibility of the file being corrupted, either by the server operator or hackers. To address this, the administrator provides a checksum on the website. The main challenge is ensuring that users verify the checksum correctly and efficiently.

## 4 Survey of Websites Using Checksums
We surveyed 20 popular software download pages to assess the current practices in checksum usage. Our findings indicate that many sites use weak hash functions and lack clear instructions for verifying file integrity.

## 5 Online User Survey
Our survey of 2,000 US Internet users revealed that while most users download software from potentially untrusted sources, very few verify the integrity of their downloads. This highlights the need for more user-friendly and automated solutions.

## 6 Proposed Solutions
### 6.1 W3C SRI Extension
We propose an extension to the W3C SRI specification to standardize the use of checksums for web downloads. This would enable developers to include checksums in a standardized format, reducing the burden on users.

### 6.2 Browser Extension
We developed a Chrome browser extension that automatically verifies the checksum of downloaded files and alerts users to any mismatches. This tool can also handle checksums displayed on the webpage, even if not using the SRI extension.

### 6.3 WordPress Plugin
We created a WordPress plugin that automates the generation and inclusion of checksums in download links. This plugin implements our proposed SRI extension, making it easier for developers to provide secure download links.

## 7 In Situ User Experiments
We conducted in-person experiments with 40 participants to evaluate the usability and effectiveness of our solutions. Using eye-tracking technology, we found that users often focus on the first digits of the checksum, which can lead to missed detections. Our solutions, particularly the browser extension, were well-received and showed promise in improving the integrity verification process.

## 8 Discussion and Limitations
Our findings highlight the significant gap in user awareness and the need for automated solutions. While our proposed tools show promise, further research is needed to refine and validate these solutions in real-world settings.

## 9 Conclusion and Future Work
In conclusion, our work provides a comprehensive analysis of the current state of checksum usage and proposes practical solutions to improve the integrity verification of web downloads. Future work will focus on further refining these tools and exploring additional methods to enhance the security and usability of web downloads.

---

This optimized version aims to make the text more coherent, professional, and easier to follow, while maintaining the key points and contributions of the original work.