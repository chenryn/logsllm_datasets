### (not-access-passwd log)
If the condition `(not-access-passwd log)` is satisfied, then the password access policy is met.

Using a similar method, we have demonstrated that the specification of the `lpd` program satisfies the password file access policy, assuming that the environment variable `printerspool` is not misconfigured. SHIM does not monitor changes to environment variables, so this assumption covers a property that SHIM cannot check.

### Composition of Specifications Satisfies the Policy
A further question is whether the composition of different specifications will satisfy the password file access policy. In this section, we consider the concurrent execution of different privileged programs. We use the FTP daemon and `lpd` as examples to show that the composition of their specifications satisfies the policy.

### Mechanism of SHIM to Filter Concurrent Execution Audit Log
As shown in Figure 3, in SHIM, the audit filter is used to separate the audit trail of individual programs from the system's audit data. We simulate the filter using a function `filter(prog, log)` in ACL2, where `prog` is the name of the program and `log` is the audit trail of the system. A key question is whether the filter will alter the security properties of the audit trail. If the filter maps the data trail of a few privileged programs to the audit trail of each program and all subsets of the data trail satisfy the password file access policy, does this mean the audit trail satisfies the policy?

#### Theorem: `passwd-specs`
We have proven that if the audit trail of `ftpd`, `filter('ftpd, log)`, passes the specification check for `ftpd` and the audit trail of `lpd`, `filter('lpd, log)`, passes the specification check for `lpd`, then the audit trails of `ftpd` and `lpd` satisfy the password file access policy.

```lisp
(defthm passwd-specs
  (implies
    (not (member '(/ etc passwd) created)) ; Password file was not created by the process
    (implies
      (and (logp log) (consp log) (consp sys) (sys-p sys) (procsafe log) ; Format checking
           (passwdsafe log) (homedirsafe sys) (validuser sys log) ; Assumptions for ftpd program
           (validenv sys 'printerspool) ; Assumptions for lpd program
           (spec ftpd sys (filter 'ftpd log) created) ; The specification of ftpd is not violated by any operations
           (spec lpd sys (filter 'lpd log) created)) ; The specification of lpd is not violated by any operations
      (not-access-passwd log)))) ; Then, the password access policy is satisfied
```

The assumptions in this verification are the union of assumptions from the two previous verifications. All theorems in this section have been automatically proven by the ACL2 theorem prover using rewriting and mathematical induction.

### Performance
We measured the performance of ACL2 in carrying out the proofs described above. We formalized the abstract system model, detection rules, and security policies with 174 functions and 13 data structures. We defined and proved 56 lemmas and theorems to complete the verification. It took three weeks to develop all the functions and complete the verification. On a 450MHz Pentium machine with 384 MB of memory, ACL2 spent 15.21 minutes to complete the verification. This suggests that using ACL2 to formalize and verify security properties of IDSs is a feasible approach.

### Discussion
The assumptions in the verification process may, in some cases, be guaranteed through other tools. In our exemplary verification, we introduced assumptions needed to satisfy the password file access policy. These assumptions relate to access permissions of target objects (e.g., the password file cannot be world-writable) and proper configurations (e.g., home directories of users cannot be `/etc/`). SHIM is not capable of monitoring these static properties of the system, but these assumptions can be checked by deploying other security tools such as Tripwire [11] [25].

In our verification, the soundness and completeness of detection rules of IDSs are not yet completely proven. If the soundness of the detection rules could be verified, the false positive rate of IDSs would theoretically be zero. In SHIM, the detection rules are specifications of the system. It is feasible, in principle, to prove the soundness of specifications by comparing them with the implementation of the system. Automatic generation and verification of specifications can be achieved by associating formal methods with code analysis.

As an extreme but practically useless example, it is easy to prove a specification rejecting all possible behaviors is sound. Considering the huge false negative rate, this specification is clearly not an acceptable solution even with a zero false positive rate. If the completeness of detection rules can be verified, the false negative rate of IDSs will be zero. Similarly, a specification accepting all behaviors can be proven complete.

The ACL2 theorem prover is used in our verification. It provides reliable verification by using well-accepted deduction rules, such as mathematical induction. By describing properties of attacks, we can prove that all attacks (including known and unknown attacks) with specific operations (e.g., invoking shell) can be detected by SHIM. This verifies an important and often-cited claim of specification-based intrusion detection: the detection of unknown attacks.

There are a few limitations to mechanical theorem provers. First, proof creation of almost any practical property correct in theorem provers is not totally automatic. Although theorem provers help find missing steps in proofs, it is still impossible for a theorem prover to create proofs without human interaction. Second, even if a proposition cannot be proven by a theorem prover, it does not indicate the proposition is wrong. It is also difficult to find a counter-example to show conditions under which a property is incorrect.

### Conclusions and Future Work
In this paper, we present a formal framework that can be used to evaluate detection rules of IDSs. ACL2 is used to formalize declarative components of the framework and to carry out the verifications. An abstract system model is built as the basis for verifications. Trusted file access policies are developed to define authorized access on security-critical objects of a system. We also report on our experience with a preliminary implementation of this framework in reasoning about security properties of SHIM, a specification-based IDS. We have formalized all detection rules of SHIM, specifications for privileged programs, and addressed two important issues about SHIM (and specification-based IDS, in general): what attacks can be detected by SHIM and whether abstract security policies can be satisfied by SHIM. An important feature of SHIM, its ability to detect unknown attacks, is actually verified by specifying properties of attacks.

Potential future work includes analyzing misuse detection systems (i.e., signature-based IDSs) and network IDSs; generating specifications using code analysis; verifying the soundness of specifications; and developing realistic security policies for network protocols.

### Acknowledgments
We thank Steven Cheung, Jeff Rowe, Poornima Balasubramanyam, Tye Stallard, and Marcus Tylutki for helpful discussions on security policy, verification, and intrusion detection. We are grateful to Patty Graves for her valuable help. This material is based upon work supported by the National Science Foundation under Grant No. 0341734. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References
1. R. S. Boyer and J S. Moore, A computational logic, Academic Press, New York, 1979.
2. CERT Coordination Center, Advisory CA-1999-03, http://www.cert.org/advisories/CA-99-03.html
3. C.C.W. Ko, “Execution Monitoring of Security-Critical Programs in a Distributed System: A Specification-Based Approach”, Ph.D. Thesis, August 1996
4. C. Ko, “Logic Induction of Valid Behavior Specifications for Intrusion Detection”, Proc. of IEEE Symposium on Security and Privacy 2000
5. C. Ko, J. Rowe, P. Brutch, K. Levitt, “System Health and Intrusion Monitoring Using a Hierarchy of Constraints”, Proceedings of the 4th International Symposium, RAID, 2001
6. Anup K. Ghosh and Aaron Schwartzbard, “A Study in Using Neural Networks for Anomaly and Misuse Detection”, Proc. of USENIX Security Symposium, 1999
7. C. Ko, G. Fink, and K. Levitt, “Automated Detection of Vulnerabilities in Privileged Programs by Execution Monitoring”, In Proceedings of the Tenth Computer Security Applications Conference, pages 134-144, Orlando, FL, Dec. 1994. IEEE Computer Society Press.
8. C. Ko, M. Ruschitzka, and K. Levitt, “Execution Monitoring of Security-Critical Programs in Distributed Systems: A Specification-Based Approach”, Proc. of the 1997 IEEE Symposium on Security and Privacy, Oakland, California, May 1997, pp. 134-144.
9. M. Kaufmann, P. Manolios, J S. Moore, “Computer-Aided Reasoning: An Approach”, Kluwer Academic Publishers, 2000
10. C. Ko, J. Rowe, P. Brutch, K. Levitt, “System Health and Intrusion Monitoring Using a Hierarchy of Constraints”, Proceedings of the 4th International Symposium, RAID, 2001
11. G. Kim, E. H. Spafford, “The Design of a System Integrity Monitor: Tripwire”, Technical Report CSD-TR-93-071, Purdue University, November 1993
12. Jia-Ling Lin, X.S. Wang, S. Jajodia, “Abstraction-Based Misuse Detection: High-Level Specifications and Adaptable Strategies”, Proc. of IEEE Computer Security Foundations Workshop, 2002.
13. Wenke Lee, S.J. Stolfo, K.W. Mok, “A Data Mining Framework for Building Intrusion Detection Models”, Proc. of IEEE Symposium on Security and Privacy, 1999
14. Matthew A. Bishop, Computer Security: Art and Science, Addison Wesley Longman, 2002
15. Matt Kaufmann, Panagiotis Manolios, and J Strother Moore, “Computer-Aided Reasoning: An Approach”, Kluwer Academic Publishers, June 2000
16. M. Roesch, “Snort: Lightweight Intrusion Detection for Networks”, Proc. of USENIX LISA ’99, Seattle, Washington, November 1999, pp. 229-238.
17. J.P. Pouzol, M. Ducasse, “Formal Specification of Intrusion Signatures and Detection Rules”, Proc. of IEEE Computer Security Foundations Workshop, 2002.
18. P.A. Porras and P.G. Neumann, “EMERALD: Event Monitoring Enabling Responses to Anomalous Live Disturbances”, Proc. of the 20th National Information Systems Security Conference, Baltimore, Maryland, October 1997, pp. 353-365.
19. Roger, M.; Goubault-Larrecq, J., “Log Auditing Through Model-Checking”, Pages 220-234, Proc. of 14th IEEE Computer Security Foundations Workshop, 2001.
20. R. Sekar, Yong Cai, Mark Segal, “A Specification-Based Approach for Building Survivable Systems”, Proc. 21st NIST-NCSC National Information Systems Security Conference 1998
21. Schultz, M.G.; Eskin, E.; Zadok, F.; Stolfo, S.J., “Data Mining Methods for Detection of New Malicious Executables”, Proc. of IEEE Symposium on Security and Privacy, 2001
22. P. Uppuluri, R. Sekar, “Experiences with Specification-Based Intrusion Detection”, Proc. of Recent Advances in Intrusion Detection, 2001
23. David Wagner, Drew Dean, “Intrusion Detection via Static Analysis”, IEEE Symposium on Security and Privacy 2001.
24. D. Zerkle, K. Levitt, “NetKuang—A Multi-Host Configuration Vulnerability Checker”, Proc. of Sixth USENIX Security Symposium, 1996
25. A. Mounji, B. Le Charlier, “Continuous Assessment of a Unix Configuration: Integrating Intrusion Detection and Configuration Analysis”, Proc. of the ISOC’97 Symposium on Network and Distributed System Security, 1997.