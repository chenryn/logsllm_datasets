# Dynamic Searchable Encryption via Blind Storage

**Authors:** Muhammad Naveed, Manoj Prabhakaran, Carl A. Gunter  
**Institution:** University of Illinois at Urbana-Champaign  
**Conference:** 2014 IEEE Symposium on Security and Privacy

## Abstract
Dynamic Searchable Symmetric Encryption (SSE) enables a client to store a dynamic collection of encrypted documents with a server, allowing for efficient keyword searches while revealing minimal information to the server. In this paper, we introduce a new dynamic SSE scheme that is simpler and more efficient than existing schemes, while also providing enhanced security against honest-but-curious servers.

We implemented a prototype of our scheme and demonstrated its efficiency on datasets from prior work. Our scheme is not only more efficient but also simpler, as it does not require the server to support any operations other than uploading and downloading data. Thus, the server in our scheme can be based solely on a cloud storage service, rather than a cloud computation service, as in previous work.

In developing our dynamic SSE scheme, we introduce a new primitive called **Blind Storage**. This allows a client to store files on a remote server in such a way that the server does not learn the number of files stored or their individual lengths. When a file is retrieved, the server learns about its existence (and can notice if the same file is downloaded subsequently), but the file’s name and contents remain hidden. This primitive has several applications beyond SSE and is of independent interest.

## I. Introduction
In recent years, Searchable Symmetric Encryption (SSE) has emerged as an important problem at the intersection of cryptography, cloud storage, and cloud computing. SSE allows a client to store a large collection of encrypted documents with a server and later perform keyword searches on these documents. The server should not learn any more information from this interaction beyond certain patterns, such as whether two searches involve the same keyword or if the same document appears in multiple search results, but not the actual keywords or document contents.

Recent work has focused on improving SSE with better security, more flexible functionality, and enhanced efficiency [23, 10, 18, 17, 6]. These techniques build on the early work of [10, 9]. In this paper, we present a radically different approach that achieves stronger security guarantees and flexibility, with significant performance improvements. Our construction has the following key features:

- **Dynamic SSE**: Supports adding and removing documents at any point during the system's lifetime.
- **Computation-Free Server**: The server only needs to support uploading and downloading blocks of data, making the system highly scalable. Any optimizations in these operations (e.g., using a content delivery network) will directly improve the system's performance.
- **Reduced Information Leakage**: The information revealed to the server is strictly less than in all prior Dynamic SSE schemes, except [24], which incurs a poly-logarithmic overhead.
- **Fully Adaptive Security**: Satisfies a fully adaptive security definition, allowing for adversarially influenced search queries based on the information revealed by prior searches.
- **Standard Model Security**: Security is proven in the standard model, relying only on the security of block ciphers and collision-resistant hash functions.
- **Optional Document-Set Privacy**: The number of documents and their lengths can be kept secret, revealing the existence of a document only when it is accessed by the client.

A simple prototype has been implemented to demonstrate the efficiency of the system.

### Blind Storage
An important contribution of this work is the identification of a more basic primitive called **Blind Storage**, on which our Dynamic SSE scheme is based. A Blind Storage scheme allows a client to store files on a remote server without the server learning the number of files or their individual lengths. When a file is retrieved, the server learns about its existence but not its name or contents. Our Blind Storage scheme supports adding, updating, and deleting files. Although not required for the Dynamic SSE construction, our Blind Storage scheme can hide the actual operation (reading, writing, deleting, or updating) from the server.

While not the primary focus of this work, a Blind Storage system has direct applications in itself, enabling a wide range of simple applications with modular privacy protections. It can be used with commodity storage systems like Dropbox, making it suitable for various use cases, from backing up a laptop to archiving patient records at a hospital. In our dynamic SSE scheme, document set privacy with relatively low overhead is made possible by storing all documents in the same Blind Storage system used to implement the SSE scheme.

## II. Related Work
The problem of searching on encrypted data has received increasing attention from the security and cryptography community, driven by the growing importance of cloud storage and cloud computation. One major hurdle in outsourcing data storage and management has been security and privacy concerns [15, 21, 3]. Theoretical cryptography offers Oblivious Random Access Memory (ORAM) [20, 13] as a highly secure solution, but it remains inefficient for many applications despite recent improvements [22, 26, 25].

Symmetric Searchable Encryption (SSE) aims to balance efficiency and security by letting the server learn only the pattern of data access, in return for a simpler and faster construction. Security is often provided against passively corrupt (honest-but-curious) servers. The scheme in [24] also provides forward privacy, preventing the leakage of whether a newly added document contains previously searched keywords.

The approach in [10] formed the basis for many subsequent works, using an index that maps each search keyword to the list of documents containing it. This list is kept as an encrypted linked list, with each node containing the key to decrypt the next node. The nodes are randomly sorted, and until the head of a linked list is decrypted, it is virtually invisible to the server. This construction provided non-adaptive security, and achieving adaptive security has been the subject of much research starting with [10].

Dynamic SSE schemes, which allow the client to update the document collection after starting to search, were presented in [11, 27, 18, 17, 5, 24]. Other variants of SSE, such as requiring security against actively corrupt servers, more expressive searches involving multiple keywords, or supporting multiple clients, are not considered in this work. However, the main tool we build, the Blind Storage system, is a general-purpose tool and is likely to be useful for these extensions.

## III. Technical Overview
### Architecture
Most previous SSE schemes rely on a dedicated server that performs both storage and computation, typically involving an unparallelizable sequence of decryptions. Deploying such a scheme using commodity services would require both cloud storage and cloud computation, limiting the choice of service providers and adding latency due to data transmission between storage and compute nodes.

In contrast, our system can be easily implemented using services like Dropbox, which provide only storage. This makes the deployment more flexible and cost-effective. Additionally, our scheme requires trust in storage alone, making it easier to achieve security against actively corrupt servers in ongoing work.

### Techniques
Our main construction is a versatile tool called **Blind Storage**, which is then used to build a full-fledged SSE scheme. A Blind Storage scheme lets the client keep all information about files secret from the server until they are accessed. In building the SSE scheme, the search index entries for all keywords are stored as individual files in the Blind Storage scheme, with care taken to facilitate updates.

Our Blind Storage scheme, called **SCATTERSTORE**, uses a simple yet powerful technique: each file is stored as a collection of blocks in pseudorandom locations. The server sees only a superset of the locations where the file’s blocks are kept, not the exact set. This ensures that, from the server's perspective, each file is associated with a set of locations independent of other files in the system. A rigorous probabilistic analysis shows that, for appropriate parameter choices, the probability of leaking information about unaccessed files can be made negligible (e.g., 2^-40 or 2^-80) with a modest blow-up in storage and communication costs (e.g., by a factor of 4) over unprotected storage.

The only cryptographic tools used in our scheme are block ciphers and collision-resistant hash functions, with security parameters chosen independently of other scheme parameters.

### Security Definition
An important feature of our scheme is that it satisfies a fully adaptive security definition, allowing for adversarially influenced search queries based on the information revealed by prior searches. Security is proven in the standard model, relying only on the security of block ciphers and collision-resistant hash functions.

## Conclusion
In this paper, we introduced a new dynamic SSE scheme that is simpler, more efficient, and more secure than existing schemes. Our scheme leverages a new primitive called Blind Storage, which has applications beyond SSE and is of independent interest. We implemented a prototype and demonstrated its efficiency on datasets from prior work. The simplicity and scalability of our scheme make it suitable for a wide range of applications, from personal backups to enterprise-level data management.