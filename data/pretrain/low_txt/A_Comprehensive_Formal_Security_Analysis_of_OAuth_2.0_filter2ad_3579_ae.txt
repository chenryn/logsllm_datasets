### Security and Integrity in OAuth Web Systems

#### Service Token Compromise
If, at any point during the execution of an OAuth web system (OWS) \( n \), an attacker can obtain a service token issued by an honest relying party (RP) using some identity provider (IdP) \( i \) for a user \( u \), then either the IdP \( i \), the browser of \( u \), or at least one of the trusted RPs of \( u \) must be compromised.

#### Session Integrity
**Intuition:**
Session integrity for authorization means:
1. An RP should only be authorized to access a user's resources if the user explicitly initiated an OAuth flow.
2. If a user initiates an OAuth flow with a specific identity via an honest IdP, the flow should not complete with a different identity within the same session. This principle also applies to authentication.

**Formal Definition:**
- **Authorization:**
  - **Condition (a):** In a run of OWS \( w \), if an OAuth login flow is completed with a user’s browser, then the user must have started the OAuth flow.
  - **Condition (b):** If the IdP used in the completed flow is honest, the flow must be completed for the same identity that the user initially used to start the OAuth flow. The OAuth flow is considered completed if the RP gains access to a protected resource of the user.

- **Authentication:**
  - **Condition (a):** In a run \( \rho \) of OWS \( w \), if a user logs in with an identity \( v \), then the user must have started an OAuth flow.
  - **Condition (b):** If the IdP used in the flow is honest, the user must log in under exactly the same identity that was used to start the OAuth flow.

**Adversary Model:**
For session integrity, we consider a web attacker as the adversary. A network attacker can force a user to log in under their own account by setting cookies from non-secure to secure origins, thereby bypassing CSRF defenses. This is a common issue in web application session management. Therefore, our analysis of session integrity is restricted to web attackers to avoid trivial breaches. More robust solutions, such as using JavaScript and HTML5 features like web messaging and web storage, are conceivable but less common and often do not conform to the OAuth standard.

#### Main Theorem
We prove the following theorem (see [17] for the proof):

**Theorem 1:**
- Let OWS \( n \) be an OAuth web system with a network attacker. Then, OWS \( n \) is secure with respect to authorization and authentication.
- Let OWS \( w \) be an OAuth web system with web attackers. Then, OWS \( w \) is secure with respect to session integrity for both authorization and authentication.

This implies that authentication and authorization properties are satisfied even when web attackers are considered.

### Discussion of Results
Our results show that the OAuth standard provides strong authentication, authorization, and session integrity properties when:
1. Fixed according to our proposal.
2. Adhering to the OAuth security recommendations and best practices, as explained in Section 5.1.

However, depending on individual implementation choices, the second condition may not always be met. For example, RPs might run untrusted JavaScript on their websites. Our security results provide precise implementation guidelines for OAuth and clearly demonstrate that if these guidelines are not followed, the security of OAuth cannot be guaranteed.

### Related Work
We focus on work closely related to OAuth 2.0 and formal security analysis of web standards and applications.

- **Bansal et al. [6]:** Analyze OAuth using the applied pi-calculus and the WebSpi library, identifying previously unknown attacks on OAuth implementations. Their model is less expressive and comprehensive compared to ours, and their positive results are based on more limited assumptions.
- **Wang et al. [37]:** Present a systematic approach to find implicit assumptions in SDKs used for authentication and authorization, including OAuth 2.0.
- **Pai et al. [29]:** Analyze OAuth security in a limited model without generic web features, using the Alloy finite-state model checker.
- **Chari et al. [9]:** Analyze the authorization code mode in the universally composable model, without considering web features.
- **Empirical Studies:** Sun and Beznosov [36], Li and Mitchell [25], Yang et al. [38], and Shernan et al. [34] conduct empirical studies on deployed OAuth implementations, identifying various security issues.

### Conclusion
In this paper, we conducted the first extensive formal analysis of OAuth 2.0 based on a comprehensive and expressive web model. Our analysis includes all modes and options of OAuth, taking into account malicious RPs and IdPs, as well as compromised browsers and users. We identified four attacks on OAuth and OpenID Connect, proposed fixes, and reported them to the working groups. With the fixes applied, we proved strong authorization, authentication, and session integrity properties for OAuth 2.0, assuming adherence to OAuth security recommendations and best practices.

### Future Work
Our formal analysis of OAuth provides a good starting point for the formal analysis of OpenID Connect, which will be the next step in our research.

### Acknowledgements
This work was partially supported by Deutsche Forschungs-gemeinschaft (DFG) through Grant KU 1434/10-1.

### References
[1] M. Abadi and C. Fournet. Mobile Values, New Names, and Secure Communication. In POPL 2001, pages 104–115. ACM Press, 2001.
[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song. Towards a Formal Foundation of Web Security. In CSF 2010, pages 290–304. IEEE Computer Society, 2010.
[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, G. Pellegrino, and A. Sorniotti. An authentication flaw in browser-based Single Sign-On protocols: Impact and remediations. Computers & Security, 33:41–58, 2013. Elsevier, 2013.
[4] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L. Tobarra. Formal Analysis of SAML 2.0 Web Browser Single Sign-on: Breaking the SAML-based Single Sign-on for Google Apps. In FMSE 2008, pages 1–10. ACM, 2008.
[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Keys to the Cloud: Formal Analysis and Concrete Attacks on Encrypted Web Storage. In POST 2013, volume 7796 of LNCS, pages 126–146. Springer, 2013.
[6] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Discovering Concrete Attacks on Website Authorization by Formal Analysis. Journal of Computer Security, 22(4):601–657, 2014. IOS Press, 2014.
[7] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In CCS 2008, pages 75–88. ACM, 2008.
[8] J. Bradley, T. Lodderstedt, and H. Zandbelt. Encoding claims in the OAuth 2 state parameter using a JWT – draft-bradley-oauth-jwt-encoded-state-05. IETF. Dec. 2015. https://tools.ietf.org/html/draft-bradley-oauth-jwt-encoded-state-05.
[9] S. Chari, C. S. Jutla, and A. Roy. Universally Composable Security Analysis of OAuth v2.0. IACR Cryptology ePrint Archive, 2011:526, 2011.
[10] E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague. OAuth Demystified for Mobile Application Developers. In CCS 2014, pages 892–903, 2014.
[11] Chromium Project. HSTS Preload Submission. https://hstspreload.appspot.com/.
[12] Cross-Origin Resource Sharing - W3C Recommendation 16 January 2014. http://www.w3.org/TR/2014/REC-cors-20140116/.
[13] J. Eisinger and E. Stark. Referrer Policy – Editor’s Draft, 28 March 2016. W3C. Mar. 2016. https://w3c.github.io/webappsec-referrer-policy/.
[14] D. Fett, R. Küsters, and G. Schmitz. An Expressive Model for the Web Infrastructure: Definition and Application to the BrowserID SSO System. In S&P 2014, pages 673–688. IEEE Computer Society, 2014.
[15] D. Fett, R. Küsters, and G. Schmitz. Analyzing the BrowserID SSO System with Primary Identity Providers Using an Expressive Model of the Web. In ESORICS 2015, volume 9326 of LNCS, pages 43–65. Springer, 2015.
[16] D. Fett, R. Küsters, and G. Schmitz. SPRESSO: A Secure, Privacy-Respecting Single Sign-On System for the Web. In CCS 2015, pages 1358–1369. ACM, 2015.
[17] D. Fett, R. Küsters, and G. Schmitz. A Comprehensive Formal Security Analysis of OAuth 2.0. Technical Report arXiv:1601.01229, arXiv, 2016. Available at http://arxiv.org/abs/1601.01229.
[18] R. Fielding (ed.) and J. Reschke (ed.). RFC7231 – Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. IETF. Jun. 2014. https://tools.ietf.org/html/rfc7231.
[19] J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, and L. Stewart. RFC2617 – HTTP Authentication: Basic and Digest Access Authentication. IETF. Jun. 1999. https://tools.ietf.org/html/rfc2617.
[20] D. Hardt (ed.). RFC6749 – The OAuth 2.0 Authorization Framework. IETF. Oct. 2012. https://tools.ietf.org/html/rfc6749.
[21] E. Homakov. How I hacked Github again, 7 February 2014. http://homakov.blogspot.de/2014/02/how-i-hacked-github-again.html.
[22] M. Jones, J. Bradley, and N. Sakimura. OAuth 2.0 Mix-Up Mitigation – draft-ietf-oauth-mix-up-mitigation-01. IETF. Jul. 2016. https://tools.ietf.org/html/draft-ietf-oauth-mix-up-mitigation-01.
[23] F. Kerschbaum. Simple Cross-Site Attack Prevention. In SecureComm 2007, pages 464–472. IEEE Computer Society, 2007.
[24] A. Kumar. Using automated model analysis for reasoning about security of web protocols. In ACSAC 2012. ACM, 2012.
[25] W. Li and C. J. Mitchell. Security issues in OAuth 2.0 SSO implementations. In ISC 2014, volume 8783 of LNCS, pages 529–541, 2014. Springer, 2014.
[26] T. Lodderstedt (ed.), M. McGloin, and P. Hunt. RFC6819 – OAuth 2.0 Threat Model and Security Considerations. IETF. Jan. 2013. https://tools.ietf.org/html/rfc6819.
[27] V. Mladenov, C. Mainka, J. Krautwald, F. Feldmann, and J. Schwenk. On the security of modern Single Sign-On Protocols: Second-Order Vulnerabilities in OpenID Connect. CoRR, abs/1508.04324v2, 2016.
[28] Open Web Application Security Project (OWASP). Session fixation. https://www.owasp.org/index.php/Session_Fixation.
[29] S. Pai, Y. Sharma, S. Kumar, R. M. Pai, and S. Singh. Formal Verification of OAuth 2.0 Using Alloy Framework. In CSNT 2011, pages 655–659. IEEE, 2011.
[30] J. Richer (ed.). RFC7662 – OAuth 2.0 Token Introspection. IETF. Oct. 2015. https://tools.ietf.org/html/rfc7662.
[31] N. Sakimura, J. Bradley, M. Jones, B. de Medeiros, and C. Mortimore. OpenID Connect Core 1.0 incorporating errata set 1. OpenID Foundation. Nov. 8, 2014. http://openid.net/specs/openid-connect-core-1_0.html.
[32] J. Selvi. Bypassing HTTP Strict Transport Security. In Blackhat (Europe) 2014, 2014.
[33] M. Shehab and F. Mohsen. Towards Enhancing the Security of OAuth Implementations in Smart Phones. In IEEE MS 2014. IEEE, 2014.
[34] E. Shernan, H. Carter, D. Tian, P. Traynor, and K. R. B. Butler. More Guidelines Than Rules: CSRF Vulnerabilities from Noncompliant OAuth 2.0 Implementations. In DIMVA 2015, volume 9148 of LNCS, pages 239–260. Springer, 2015.
[35] SimilarTech. Facebook Connect Market Share and Web Usage Statistics. Last visited Nov. 7, 2015. https://www.similartech.com/technologies/facebook-connect.
[36] S.-T. Sun and K. Beznosov. The Devil is in the (Implementation) Details: An Empirical Analysis of OAuth SSO Systems. In CCS 2012, pages 378–390. ACM, 2012.
[37] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich. Explicating SDKs: Uncovering Assumptions Underlying Secure Authentication and Authorization. In USENIX Security 2013, pages 399–314. USENIX Association, 2013.
[38] R. Yang, G. Li, W. C. Lau, K. Zhang, and P. Hu. Model-based Security Testing: An Empirical Study on OAuth 2.0 Implementations. In AsiaCCS 2016, pages 651–662. ACM, 2016.
[39] X. Zheng, J. Jiang, J. Liang, H. Duan, S. Chen, T. Wan, and N. Weaver. Cookies Lack Integrity: Real-World Implications. In USENIX Security 2015, pages 707–721. USENIX Association, 2015.