### 优化后的文本

#### 85.1 MKA会话老化
- **日志内容**：`00E00100000A0006 and CKN 80A0EA0CB03D aged out on interface GigabitEthernet1/0/1.`
- **日志说明**：当本端参与者和对端参与者相互学习到对方后，本端参与者为对端参与者启动一个保活定时器。如果在保活定时器超时的时间内没有收到对端参与者的MKA报文，则将对端参与者的信息从本端删除，并触发该日志。
- **处理建议**：检查本端参与者和对端参与者所在链路是否故障。如果链路故障，请恢复链路。

#### 85.2 主要行动者选举
- **日志内容**：`The actor with CKN [STRING] became principal actor on interface [STRING].`
- **参数解释**：
  - `$1`：CKN
  - `$2`：接口名
- **日志等级**：6
- **示例**：`MACSEC/6/MACSEC_MKA_PRINCIPAL_ACTOR: The actor with CKN 80A0EA0CB03D became principal actor on interface GigabitEthernet1/0/1.`
- **日志说明**：接口上可能存在多个行动者，具有最高优先级的Key Server的行动者被选举为主要行动者，并触发该日志。
- **处理建议**：无

#### 85.3 SAK刷新
- **日志内容**：`The SAK has been refreshed on interface [STRING].`
- **参数解释**：
  - `$1`：接口名
- **日志等级**：6
- **示例**：`MACSEC/6/MACSEC_MKA_SAK_REFRESH: The SAK has been refreshed on interface GigabitEthernet1/0/1.`
- **日志说明**：当接口上的参与者派生出或接收到新的SAK时，触发该日志。
- **处理建议**：无

#### 85.4 MKA会话重新认证
- **日志内容**：`The MKA session with CKN [STRING] was re-authenticated on interface [STRING].`
- **参数解释**：
  - `$1`：CKN
  - `$2`：接口名
- **日志等级**：6
- **示例**：`MACSEC/6/MACSEC_MKA_SESSION_REAUTH: The MKA session with CKN 80A0EA0CB03D was re-authenticated on interface GigabitEthernet1/0/1.`
- **日志说明**：当接口进行802.1X重认证时，触发该日志。重认证过程中，参与者接收到新的CAK，并使用它重建会话。
- **处理建议**：无

#### 85.5 MKA会话加密
- **日志内容**：`The MKA session with CKN [STRING] was secured on interface [STRING].`
- **参数解释**：
  - `$1`：CKN
  - `$2`：接口名
- **日志等级**：6
- **示例**：`MACSEC/6/MACSEC_MKA_SESSION_SECURED: The MKA session with CKN 80A020EA0CB03D was secured on interface GigabitEthernet1/0/1.`
- **日志说明**：接口上的MKA会话采用密文通信方式。触发该日志的原因可能包括：
  - MKA会话由明文通信切换为密文通信
  - Key Server和它对端的接口都支持MACsec功能，且两端至少有一个期望MACsec保护的情况下，两端协商出新的会话
- **处理建议**：无

#### 85.6 MKA会话开始
- **日志内容**：`The MKA session with CKN [STRING] started on interface [STRING].`
- **参数解释**：
  - `$1`：CKN
  - `$2`：接口名
- **日志等级**：6
- **示例**：`MACSEC/6/MACSEC_MKA_SESSION_START: The MKA session with CKN 80A020EA0CB03D started on interface GigabitEthernet1/0/1.`
- **日志说明**：MKA会话协商开始。触发该日志的原因可能包括：
  - 使能MKA功能后，有新的可用CAK
  - 用户重建MKA会话
  - 协商会话失败的接口收到新的MKA报文
- **处理建议**：无

#### 85.7 MKA会话停止
- **日志内容**：`The MKA session with CKN [STRING] stopped on interface [STRING].`
- **参数解释**：
  - `$1`：CKN
  - `$2`：接口名
- **日志等级**：5
- **示例**：`MACSEC/5/MACSEC_MKA_SESSION_STOP: The MKA session with CKN 80A020EA0CB03D stopped on interface GigabitEthernet1/0/1.`
- **日志说明**：MKA会话终止。触发该日志的原因可能包括：
  - 用户删除或重建了接口的MKA会话
  - MKA会话所在链路故障
- **处理建议**：使用`display mka session`命令查看会话是否存在。如果会话不存在且不是用户删除的，则需要检查会话所在链路是否故障。如果链路故障，请恢复链路。

#### 85.8 MKA会话未加密
- **日志内容**：`The MKA session with CKN [STRING] was not secured on interface [STRING].`
- **参数解释**：
  - `$1`：CKN
  - `$2`：接口名
- **日志等级**：5
- **示例**：`MACSEC/5/MACSEC_MKA_SESSION_UNSECURED: The MKA session with CKN 80A020EA0CB03D was not secured on interface GigabitEthernet1/0/1.`
- **日志说明**：接口上的MKA会话采用明文通信方式。触发该日志的原因可能包括：
  - MKA会话由密文通信切换为明文通信
  - Key Server和它对端的接口未能都支持MACsec功能，或两端均未期望MACsec保护的情况下，两端协商出新的会话
- **处理建议**：如果用户希望会话采用密文通信方式，请先确认Key Server和它对端的接口都支持MACsec功能，再确认两个接口中至少有一个期望MACsec保护。只有两个条件都成立，会话才能采用密文通信方式。

#### 86 MBFD
- **本节介绍**：MPLS BFD模块输出的日志信息。

##### 86.1 LSP Traceroute失败
- **日志内容**：`[STRING] is failed. ([STRING].)`
- **参数解释**：
  - `$1`：LSP信息
  - `$2`：LSP失败原因
- **日志等级**：5
- **示例**：
  - `MBFD/5/MBFD_TRACEROUTE_FAILURE: LSP (LDP IPv4: 22.22.2.2/32, nexthop: 20.20.20.2) is failed. (Replying router has no mapping for the FEC.)`
  - `MBFD/5/MBFD_TRACEROUTE_FAILURE: TE tunnel (RSVP IPv4: Tunnel1) is failed. (No label entry.)`
- **日志说明**：通过周期性Traceroute功能检测LSP或MPLS TE隧道时，如果收到带有不合法返回代码的应答，则打印本日志信息，说明LSP或者MPLS TE隧道出现了故障。
- **处理建议**：检查LSP或者MPLS TE隧道的配置情况。

#### 87 MBUF
- **本节介绍**：MBUF模块输出的日志信息。

##### 87.1 MBUF重复释放
- **日志内容**：
  - `MBUF address: [HEX] repeated release! Seq: [UINT32], CPU ID: [UINT32], [STRING]: [STRING]`
  - `Seq: [UINT32], CPU ID: [UINT32], [STRING]: [STRING]`
  - `Seq: [UINT32], CPU ID: [UINT32], [STRING]: [STRING]`
  - `Seq: [UINT32], CPU ID: [UINT32], [STRING]: [STRING]`
  - `Seq: [UINT32], CPU ID: [UINT32], [STRING]: [STRING]`
- **参数解释**：
  - `$1`：MBUF的地址
  - `$2`：栈序列号
  - `$3`：栈所在CPU的编号
  - `$4`：取值为Alloc trace时，表示申请栈；取值为Free trace时，表示释放栈
  - `$5`：栈信息
  - `$6`：栈序列号
  - `$7`：栈所在CPU的编号
  - `$8`：取值为Alloc trace时，表示申请栈；取值为Free trace时，表示释放栈
  - `$9`：栈信息
  - `$10`：栈序列号
  - `$11`：栈所在CPU的编号
  - `$12`：取值为Alloc trace时，表示申请栈；取值为Free trace时，表示释放栈
  - `$13`：栈信息
  - `$14`：栈序列号
  - `$15`：栈所在CPU的编号
  - `$16`：取值为Alloc trace时，表示申请栈；取值为Free trace时，表示释放栈
  - `$17`：栈信息
  - `$18`：栈序列号
  - `$19`：栈所在CPU的编号
  - `$20`：取值为Alloc trace时，表示申请栈；取值为Free trace时，表示释放栈
  - `$21`：栈信息
- **日志等级**：2
- **示例**：
  - `MBUF/2/DBL_FREE: MBUF address: 0x854f9380 repeated release! Seq: 411, CPU ID: 1, Alloc trace: bdae759c bd2becbc bd2ba850 bd2bb718 bd368d04 bd3695e4 bd369bf8 bd358dc8 bd3295b0 bd29e0f4`
  - `Seq: 412, CPU ID: 1, Free trace: bdae759c bd2becbc bd2bc020 bd369298 bd3695e4 bd369bf8 bd358dc8 bd3295b0 bd29e0f4 bd2a1e8c`
  - `Seq: 413, CPU ID: 1, Free trace: bdae759c bd2becbc bd2bc020 bd3692ac bd3695e4 bd369bf8 bd358dc8 bd3295b0 bd29e0f4 bd2a1e8c`
  - `Seq: 409, CPU ID: 1, Alloc trace: bdae759c bd2becbc bd2ba850 bd2bc26c bd2d3320 bd105fc4 bd007b44 bd006c88 bd102264 400646b8`
  - `Seq: 410, CPU ID: 1, Free trace: bdae759c bd2becbc bd2baefc bd2d3344 bd105fc4 bd007b44 bd006c88 bd102264 400646b8 400651b8`
- **日志说明**：MBUF被重复释放时输出该日志，本日志会记录最近使用该MBUF的5个栈信息。
- **处理建议**：根据日志中的栈信息找到重复释放MBUF的业务流程。

##### 87.2 MBUF数据块创建失败
- **日志内容**：`Failed to create an MBUF data block because of insufficient memory. Failure count: [UINT32].`
- **参数解释**：
  - `$1`：失败次数
- **日志等级**：2
- **示例**：`MBUF/2/MBUF_DATA_BLOCK_CREATE_FAIL: Failed to create an MBUF data block because of insufficient memory. Failure count: 128.`
- **日志说明**：当申请MBUF数据块失败时，输出该日志。为避免该日志输出过于频繁，本次申请MBUF数据块失败距上次申请MBUF数据块失败间隔大于等于一分钟时，才会输出该日志。
- **处理建议**：
  1. 在Probe视图下执行`display system internal kernel memory pool | include mbuf`命令查询已申请的MBUF数据块的数量。
  2. 在系统视图下执行`display memory`命令查询系统内存总量。
  3. 将“已申请的MBUF数据块的数量”和“系统内存总量”比较，判断是否已申请的MBUF数据块过多导致申请失败。
     - 如果不是，则通过其他内存管理命令查询出占用内存较多的模块。
     - 如果是，则继续通过Probe视图下的`display system internal mbuf socket statistics`命令查询Socket申请的MBUF数据块的数量，对比已申请的MBUF数据块的数量，判断是否某个进程缓存在Socket缓冲区中的MBUF数据块过多。
       - 如果是，则进一步分析进程不能及时释放Socket缓冲区中的MBUF数据块的原因。
       - 如果不是，则需要通过其他手段找出申请大量MBUF数据块的真正原因。

##### 87.3 内存越界
- **日志内容**：`MBUF address [HEX] MBUF block address [HEX] STEP ON MEMORY! Stack :[STRING]`
- **参数解释**：
  - `$1`：MBUF地址
  - `$2`：MBUF数据块的地址
  - `$3`：栈信息
- **日志等级**：2
- **示例**：`MBUF/2/STEPMEM: MBUF address 780bd380 MBUF block address 780bd388 STEP ON MEMORY! Stack :bdae759c bd2be938 bd2b7ce4 bd2bbf8c bac531ec bcfe4270 bd141b94 bdaecd50 bd2a0ca4 bd2a157c bd2a1c54 bd369048 bd3695e4 bd369bf8 bd358dc8 bd3295b0`
- **日志说明**：MBUF被写越界了。
- **处理建议**：根据日志中的栈信息找到内存写越界的流程。当MBUF被某个业务流程使用后放入MBUF队列中又被其他业务流程使用，或者其他特殊情况下，该日志中记录的栈可能不是真正导致内存写越界的栈，需要根据业务流程进一步定位。

#### 88 MDC
- **本节介绍**：MDC（Multitenant Device Context，多租户设备环境）模块输出的日志信息。

##### 88.1 MDC创建失败
- **日志内容**：`Failed to create MDC [UINT16] for insufficient resources.`
- **参数解释**：
  - `$1`：MDC的编号
- **日志等级**：5
- **示例**：`MDC/5/MDC_CREATE_ERR: -Slot=1; Failed to create MDC 2 for insufficient resources.`
- **日志说明**：备用主控板启动时会从主用主控板获取所有已创建的MDC的信息，并在备用主控板创建同样的MDC。如果备用主控板因为资源限制无法创建该MDC，则输出此日志信息。MDC进驻备用主控板失败，无法在该备用主控板上提供服务。
- **处理建议**：
  1. 使用`display mdc resource`命令查询新插入的备用主控板的CPU、内存空间和磁盘空间。
  2. 增加备用主控板的内存或减少磁盘使用，以保证新MDC可创建。
  3. 使用`undo mdc`命令删除该MDC，或者换一块资源足够的主控板作为备用主控板。

##### 88.2 MDC成功创建
- **日志内容**：`MDC [UINT16] was created.`
- **参数解释**：
  - `$1`：MDC的编号
- **日志等级**：5
- **示例**：`MDC/5/MDC_CREATE: MDC 2 was created.`
- **日志说明**：MDC成功创建。
- **处理建议**：无

##### 88.3 MDC成功删除
- **日志内容**：`MDC [UINT16] was deleted.`
- **参数解释**：
  - `$1`：MDC的编号
- **日志等级**：5
- **示例**：`MDC/5/MDC_DELETE: MDC 2 was deleted.`
- **日志说明**：MDC成功删除。
- **处理建议**：无

##### 88.4 内核事件超时
- **日志内容**：`[STRING] [UINT16] kernel event in sequence [STRING] function [STRING] failed to finish`
- **参数解释**：
  - `$1`：事件描述
  - `$2`：事件编号
  - `$3`：序列号
  - `$4`：函数名
- **日志等级**：5
- **示例**：`MDC/5/MDC_KERNEL_EVENT_TOOLONG: [STRING] [UINT16] kernel event in sequence [STRING] function [STRING] failed to finish`
- **日志说明**：内核事件在指定时间内未能完成。
- **处理建议**：无