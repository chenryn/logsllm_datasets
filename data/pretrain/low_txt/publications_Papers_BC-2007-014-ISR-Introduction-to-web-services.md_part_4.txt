### 3. Adding Web Services Annotations in Java

Web services can be implemented using either an interface or an abstract class. Tools such as Apache Axis6 and Radiant include annotations that inform the compiler that the program code is a web service. These tools can convert between different forms, so the choice of starting point is a matter of preference. In this chapter, we will guide you through developing web services by designing Java classes.

#### Available Annotations
- `javax.jws.WebService`
- `javax.jws.WebMethod`
- `javax.jws.WebParam`
- `javax.jws.WebResult`
- `javax.jws.HandlerChain`
- `javax.jws.soap.SOAPBinding`

To illustrate these concepts, we will use an example from the Semantic Web Services Challenge 2006. The scenario involves creating a process to generate a purchase order. The first step in this process is to confirm that a given business is a customer of the fictitious "Moon Company." Below are the steps to create this service:

1. **Design the Java Classes**: Start by creating a UML Class Diagram to define the system requirements.
2. **Annotate the Java Service**: Use the appropriate annotations to mark the service and its methods.

**Example: Annotated Java Service**

```java
import javax.jws.WebService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;

@WebService
public class SearchCustomer {

    @WebMethod
    public SearchCustomerResponse search(@WebParam(name = "request") SearchCustomerRequest request) {
        // Call to backend to verify Customer
        if (!verifyCustomer(request)) {
            return new SearchCustomerResponse("Error");
        }

        SearchCustomerResponse response = new SearchCustomerResponse();
        response.setCustomerID(CustomerInfo.getCustomerID(request));
        response.setRoleCode(CustomerInfo.getCustomerRole(request));

        return response;
    }

    private boolean verifyCustomer(SearchCustomerRequest request) {
        // Implementation for verifying customer
        return true;
    }
}
```

Refer to the following link for more information on annotations: [Java Mustang Annotations](https://mustang.dev.java.net/).

### 4. Generate WSDL

The annotations from the previous step instruct the Annotation Processing Tool or the Java compiler to generate a WSDL file at compile-time. This description serves two purposes:
1. **Advertisement**: When published on the web, the WSDL file acts as an advertisement. Information from the WSDL is published in UDDI registries, allowing queries to discover the required service.
2. **Invocation**: The WSDL provides all the necessary information to invoke the service remotely.

### 5. Implement Methods

At this stage, create an implementation class that extends the abstract class. Ensure that any created class has getters and setters for all member variables. These are used by the SOAP engine to serialize and deserialize data in SOAP messages into Java objects and back to SOAP.

### 6. Deploy the Service

Deploying a service requires a web application server and a SOAP engine, such as Tomcat and Axis2. For Axis2, deployment is as simple as placing the `.aar` files (which are `.jar` files with a different extension) into the `\WEB-INF\services` directory. Deployment instructions for Axis2 can be found at [Apache Axis2 Documentation](http://ws.apache.org/axis2/).

### 7. Test the Service

A simple Java program can be used to test the service. In some cases, a more complex client may be required. The fundamental components for writing a client include the End Point Reference (a URL to the service), setting the target, and configuring transport information. This information is encapsulated in a call object from the `org.apache.soap` package.

**Example: Partial Listing of Web Service Client**

```java
Call call = new Call();
call.setSOAPMappingRegistry(smr);
call.setTargetObjectURI("http://example.com/moon/services/CRMService");
call.setMethodName("search");
call.setEncodingStyleURI(Constants.NS_URI_SOAP_ENC);

Vector params = new Vector();
SearchCustomerType sct = new SearchCustomerType();
sct.setSearchString(name);
params.addElement(new Parameter("request", SearchCustomerType.class, sct, null));
call.setParams(params);

Response resp = call.invoke(url, "");
```

### 8. Publish the Service

Publishing a service involves using UDDI registries. The process varies depending on the chosen registry. For our example, we used the jUDDI registry on a Tomcat server. Publishing a service is similar to advertising a business. After deployment and testing, the service is open to the world and ready to accept requests. However, until it is published, it is unlikely that anyone will know about your service. Tools like Radiant and Lumina from the METEOR-S tool suite can simplify this process.

### Conclusion

Web services have evolved significantly, defining standards such as WSDL, SOAP, and UDDI to enable interoperability on the internet. Recent research focuses on security and transactional stability, leading to new specifications like WS-Security, WS-Policy, WS-Trust, and WS-Transaction.

### References

- Arjuna Technologies Limited (2005). Arjuna Transaction Service Suite. Retrieved October 18, 2006, from http://www.arjuna.com/products/arjunats/index.html
- Axis Development Team (2006). Webservices - Axis. Retrieved October 18, 2006, from http://ws.apache.org/axis/
- Bellwood, T. (2002). UDDI Version 2.04 API Specification. Retrieved February 20, 2007, from http://uddi.org/pubs/ProgrammersAPI-V2.04-Published-20020719.htm
- Birrell, A.D. & Nelson, B.J. (1984). Implementing Remote Procedure Calls. ACM Transactions on Computer Systems, 2(1), 39-54.
- Booth, D., et al. (2004). Web Services Architecture, W3C Working Group Note. Retrieved October 18, 2006, from http://www.w3.org/TR/ws-arch/
- Brewer, D., LSDIS Lab, University of Georgia (2005). Radiant. Retrieved October 18, 2006, from http://lsdis.cs.uga.edu/projects/meteor-s/downloads/index.php?page=1
- Brown, N., & Kindel. C. (1996). Distributed Component Object Model Protocol, DCOM/1.0. Redmond, WA: Microsoft Corporation.
- Cabrera, L. F., et al. (2005). Web Services Atomic Transaction (WS-Atomic Transaction). Retrieved February 20, 2007, from http://www128.ibm.com/developerworks/library/specification/ws-tx/#atom
- IBM, BEA Systems, Microsoft, SAP AG, Sonic Software, VeriSign (2006). Web Service Policy Attachment. Retrieved October 18, 2006, from http://www-128.ibm.com/developerworks/library/specification/ws-polatt/index.html
- Cardoso, J., Curbera, F., & Sheth, A. (2004, May 17-22). Tutorial: Service Oriented Architectures and Semantic Web Processes. In Proceedings of the Thirteenth International World Wide Web Conference (WWW2004), New York.
- Channabasavaiah, K., Holley, K., & Tuggle, E. (2003). Migrating to a Service-Oriented Architecture, Part 1. Retrieved October 18, 2006, from http://www128.ibm.com/developerworks/Web-services/library/ws-migratesoa/
- Christensen, E., Curbera, F., Meredith, G., & Weerawarana, S. (2001). W3C Web Services Description Language (WSDL). Retrieved October 18, 2006, from http://www.w3.org/TR/wsdl
- Curbera, F., Nagy, W., & Weerawarana, S. (2001). Web Services: Why and How. Paper presented at the Workshop on Object-Oriented Web Services - OOPSLA 2001, Tampa, Florida.
- Dwoning, T. (1998). Java RMI. Boston: IDG Books Worldwide.
- Mikalsen, T., Rouvellou, I., & Tai. S. (2003). Advanced Enterprise Middleware: Transaction Processing. Retrieved October 18, 2006, from http://www.research.ibm.com/AEM/txa.html
- Mikalsen, T., Tai, S., & Rouvellou, I. (2002). Transactional Attitudes. Reliable Composition of Autonomous Web Services. Paper presented at the International Conference on Dependable Systems and Networks.
- Object Management Group. (1995, July). CORBA: The Common Object Request: Architecture and Specification, Release 2.0. Retrieved February 20, 2007, from http://www.omg.org/cgi-bin/apps/doc?formal/99-10-07.pdf
- Orfali, R., & Herkey, D. (1998). Client/Server Programming with Java and CORBA (2nd ed.). Hoboken NJ: John Wiley & Sons.
- Semantic Web Services Challenge (2006). Main Page. Retrieved October 18, 2006, from http://www.sws-challenge.org/
- SOAP (2003). Simple Object Access Protocol 1.2. Retrieved October 18, 2006, from http://www.w3.org/TR/soap/
- Trainotti, M., et al. (2005). Supporting Composition and Execution of Web Services. Paper presented at the International Conference on Service Oriented Computing.
- UDDI (2002). Universal Description, Discovery, and Integration.
- Vasquez, I., Miller, J., Verma, A., & Sheth, A. (2005). OpenWS-Transaction: Enabling Reliable Web Service Transactions. Paper presented at the International Conference on Service Oriented Computing.
- Verma, K., Akkiraju, R., Goodwin, R. (2005). Semantic Matching of Web Service Policies. Paper presented at the Second International Workshop on Semantic and Dynamic Web Processes (SDWP 2005), Part of the 3rd International Conference on Web Services (ICWSâ€™05).
- Waldo, J. (1999, October). The Jini Architecture for Network-Centric Computing. Communications of the ACM, 42(10), 76-82.
- Weeratunge, D., Weerawarana, S., & Gunarathne, T. (2004). Kandula - Apache Kandula. Retrieved October 18, 2006, from http://ws.apache.org/kandula/
- XML (2005). Extensible Markup Language (XML) 1.0 (3rd ed.). W3C Recommendation 04 February 2004. Retrieved October 18, 2006, from http://www.w3.org/TR/REC-xml/

This optimized text provides a clear and professional guide to adding web services annotations in Java, generating WSDL, implementing methods, deploying, testing, and publishing the service. It also includes a comprehensive list of references for further reading.