### Access-Control Policy and Vulnerability Reporting

The access-control policy represented by the ACT should not have been applied to this context. We reported the new vulnerabilities discovered by FIXMEUP, which were assigned the following CVE candidate numbers: CVE-2012-2443, 2444, 2445, 2437, and 2438. We confirmed the effectiveness of our repairs by testing each program and verifying that it is no longer vulnerable. When an unauthorized user attempts to invoke the repaired applications through either an intended or unintended entry point and tries to execute a sensitive operation, every repaired application rejects the attempt and executes the code corresponding to the failed check from the original ACT.

### Related Work

Related work includes techniques for identifying access-control bugs, as this is a necessary first step in repairing them. Other areas of related work include general bug finding, program repair, and transformation tools.

```php
include "conf.php";
include_once "includes.php";
session_start();
```

**Figure 12: minibloggie: Attempted Repair**

Creating a template for each target is critical for successful repair. Figure 13 shows repairs to GRBoard in `remove_multi_file.php` and `swf_upload_ok.php`. These two files implement different access-control logic to protect role-specific sensitive operations. Note that the `$GR` variable in `swf_upload_ok.php` is not renamed, and the existing variable is used instead, i.e., `$GR = new COMMON()` at line 4. In contrast, in `remove_multi_file.php`, FIXMEUP defines a new variable `$GR_newone` to avoid unwanted dependencies when inserting the statement.

**Figure 11** also demonstrates how FIXMEUP leaves line 2 intact in `process.php` when applying the template based on `AddDn.php`. This reuse is crucial for correctness. If FIXMEUP had naively inserted this statement from the template rather than reusing the existing statement, the redundant, duplicated statement would have introduced an unwanted dependency due to the side effect on the `$SESSION` variable. Because of statement reuse, this dependency remains the same in the repaired code as in the original.

The last column demonstrates that the inserted statements in 37 repair instances introduce no unwanted dependencies that affect the rest of the program. **Figure 14** shows one instance where a repair had a side effect because of an unintended change.

```php
...
1 $gid = $_GET['gid'];
2 $form_pw_newone = $_POST['form_pw'];
// existing statements
// [FixMeUp repair]
...
if (!check_admin_login()) {
    if (strlen($gid_info['gallery_password']) > 0) {
        // [FixMeUp repair]
        ...
    }
}
...
if (!check_gallery_password($gid_info['gallery_password'], $form_pw_newone)) {
    include($TEMPLATE_DIR . 'face_begin.php.mphp');
    error("Password incorrect.");
}
// [FixMeUp repair]
...
if (!check_gallery_password($gid_info['gallery_password'], $form_pw)) {
    include($TEMPLATE_DIR . 'face_begin.php.mphp');
    error("Password incorrect.");
}
...
```

**Figure 14: YaPiG: Attempted Repair**

### Static Detection of Access-Control Bugs

Prior work simply reports that certain statements are reachable without an access-control check. Sun et al. require the programmer to specify the intended check for each application role and then automatically find execution paths with unchecked access to the role's privileged pages [36]. Chlipala finds security violations by statically determining whether the application’s behavior is consistent with a policy specified as a database query [5].

One consequence of access-control bugs in web applications is that attackers may perform unintended page navigation. Several approaches find these unintended navigation flows [2, 10]. They generally rely on heuristics and/or dynamic analysis to learn the intended flows and are thus incomplete. Furthermore, they cannot detect finer-grained access-control bugs. For example, a missing check on the same page as the protected operation will not manifest as an anomalous page navigation.

Without a programmer-provided specification, static analysis may infer the application’s access-control policies. Son and Shmatikov use consistency analysis to find variables in access-control logic [33]. Son et al. developed RoleCast, a tool that finds role-specific access-control checks without specification by exploiting software engineering conventions common in web applications [32].

None of these approaches automatically repair the bugs they find, whereas FIXMEUP:
1. Computes code templates that implement access-control logic.
2. Finds calling contexts that implement this logic incorrectly.
3. Transforms the code by inserting the template into one or more methods in the vulnerable contexts.
4. Validates that the transformed code implements the correct logic.

### Code Mining

A popular bug-finding approach is to mine the program for patterns and look for bugs as deviations or anomalies. This approach typically finds frequently occurring local, intraprocedural patterns [9]. Tan et al. showed how to find access-control bugs in SELinux using similar techniques but with interprocedural analysis [37]. When applied to web applications, heuristics based on finding deviations from common, program-wide patterns will likely generate an overwhelming number of false positives. As shown in [36] and [32], access-control logic in web applications is significantly more sophisticated than simple "this check must always precede that operation" patterns. They are role- and context-sensitive, with different policies enforced on different execution paths. Simple pattern matching won’t find violations of such policies.

### Verifying Access Control in Java Libraries

Access-control checks are standardized in Java libraries and are simply calls to the `SecurityManager` class. A rich body of work has developed techniques for verifying access control in Java class libraries [16, 29, 31, 35], but none of them attempt to repair access-control bugs.

### Dynamic Detection of Access-Control Bugs

In the security domain, dynamic analysis finds security violations by tracking program execution [4, 7, 12, 43]. For example, Hallé et al. dynamically ensure that page navigation within the application conforms to the state machine specified by the programmer [12]. GuardRails requires developers to provide explicit access-control specifications and enforces them dynamically within its framework for Ruby [3]. Alternatives to explicit specification include learning the state machine by observing benign runs and then relying on anomaly detection to find violations [6], or using static analysis of the server code to create a conservative model of legitimate request patterns and detecting deviations from these patterns at runtime [11]. Violations caused by missing access-control checks are an example of generic “execution omission” bugs. Zhang et al. presented a general dynamic approach to detecting such bugs [44].

In addition to the usual challenges of dynamic analysis, such as incomplete coverage, dynamic enforcement of access-control policies is limited in what it can do once it detects a violation. Typically, the runtime enforcement mechanism terminates the application since it does not know what the programmer intended for the application to do when an access-control check fails.

By contrast, our objective is to repair the original program. Specifically, for the program branch corresponding to a failed access-control check, we insert the exact code used by the programmer as part of the correct checks (it may generate an error message and return to the initial page, terminate the program, etc.). The repaired program thus behaves as intended, does not require a special runtime environment, and can be executed anywhere.

### Dynamic Repair of Software Bugs

Dynamic program repair fixes the symptom but not the cause of the error [4, 7, 12, 22, 30, 43]. For example, dynamic repair allocates a new object on a null-pointer exception, or ignores out-of-bounds references instead of terminating the program. The dynamic fixes, however, are not reflected in the source code and require a special runtime.

### Static Detection of Injection Vulnerabilities

Many techniques detect data-flow vulnerabilities, such as cross-site scripting and SQL injection [13, 15, 17, 39, 42]. These bugs are characterized by tainted inputs flowing into database queries and HTML content generation. Access-control bugs are control-flow vulnerabilities: they enable the attacker to execute a sensitive operation, which may or may not be accompanied by illegitimate data flows. For example, if a constant query deletes the database, there is no tainted data flow into the operation.

### Automatic Remediation of Software Bugs

Much prior work finds code clones within the same application to help programmers refactor, fix bugs, and add features consistently [8, 18, 20, 23, 38]. These tools suggest where a bug fix may be needed but do not transform the program. FIXMEUP solves the dual of this problem: it inserts similar code where it is missing.

Several tools learn from a developer-provided fix and help apply similar fixes elsewhere. They perform the same syntactic edit on two clones [21], or suggest changes for API migration [1], or do not perform the edit [23], or ask users where to apply the edit [19]. These approaches only apply local edits and none of them consider the interprocedural edits required to repair access-control logic. In the more limited domain of access-control bugs, we automate both finding the missing logic and applying the fix.

### Generating Program Fixes

A few approaches automatically generate a candidate patch and then check correctness with compilation and testing. For example, Perkins et al. generate patches to enforce invariants observed in correct executions but violated in erroneous ones [25]. They test several patched executions and select the most successful one. Weimer et al. [40, 41] generate candidate patches by randomly replicating, mutating, or deleting code from the program. Jin et al. automatically fix bugs by finding violations of pre-defined patterns encoded as finite-state machines, such as misplaced or missing lock and unlock pairs [14]. Their static analysis moves or inserts one or two lines of code to satisfy the correct pattern. All of these approaches focus on one- or two-line changes that satisfy some dynamic or static local predicate. By contrast, FIXMEUP extracts and inserts multi-line code sequences responsible for enforcing the application’s context-sensitive access-control policy.

### Conclusion

We presented FIXMEUP, the first static analysis and program transformation tool for finding and repairing access-control bugs in server-side web applications. FIXMEUP starts with an access-control policy that maps security-sensitive operations—such as database queries and privileged file operations—to access-control checks that protect them from unauthorized execution. FIXMEUP then automatically extracts the code responsible for access-control enforcement, uses it to create an access-control template, finds calling contexts where the check is missing or implemented incorrectly, repairs the vulnerability by applying the template, and validates the repair. The key to semantically correct repairs is the novel algorithm that finds and reuses existing statements that are part of the access-control logic. In particular, reuse of existing statements helps FIXMEUP avoid duplicating statements that have side effects on the rest of the program. FIXMEUP successfully repaired 30 access-control bugs in 10 real-world PHP applications, demonstrating its practical utility.

### Acknowledgments

This research was partially supported by the NSF grants CNS-0746888, SHF-0910818, CCF-1018271, and CNS-1223396, a Google research award, the MURI program under AFOSR Grant No. FA9550-08-1-0352, and the Defense Advanced Research Agency (DARPA) and SPAWAR Systems Center Pacific, Contract No. N66001-11-C-4018.

### References

[1] J. Andersen and J. Lawall. Generic patch inference. In ASE, pages 337–346, 2008.
[2] D. Balzarotti, M. Cova, V. Felmetsger, and G. Vigna. Multi-module vulnerability analysis of Web-based applications. In CCS, pages 25–35, 2007.
[3] J. Burket, P. Mutchler, M. Weaver, M. Zaveri, and D. Evans. GuardRails: A data-centric Web application security framework. In USENIX WebApps, 2011.
[4] W. Chang, B. Streiff, and C. Lin. Efficient and extensible security enforcement using dynamic data flow analysis. In CCS, pages 39–50, 2008.
[5] A. Chlipala. Static checking of dynamically-varying security policies in database-backed applications. In OSDI, pages 105–118, 2010.
[6] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna. Swaddler: An approach for the anomaly-based detection of state violations in Web applications. In RAID, pages 63–86, 2007.
[7] M. Dalton, C. Kozyrakis, and N. Zeldovich. Nemesis: Preventing authentication and access control vulnerabilities in Web applications. In USENIX Security, pages 267–282, 2009.
[8] E. Duala-Ekoko and M. Robillard. Tracking code clones in evolving software. In ICSE, pages 158–167, 2007.
[9] D. Engler, D. Chen, S. Hallem, A. Chou, and B. Chelf. Bugs as deviant behavior: A general approach to inferring errors in systems code. In SOSP, pages 57–72, 2001.
[10] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna. Toward automated detection of logic vulnerabilities in Web applications. In USENIX Security, pages 143–160, 2010.
[11] A. Guha, S. Krishnamurthi, and T. Jim. Using static analysis for Ajax intrusion detection. In WWW, pages 561–570, 2009.
[12] S. Hallé, T. Ettema, C. Bunch, and T. Bultan. Eliminating navigation errors in Web applications via model checking and runtime enforcement of navigation state machines. In ASE, pages 235–244, 2010.
[13] Y. Huang, F. Yu, C. Hang, C. Tsai, D. Lee, and S. Kuo. Securing Web application code by static analysis and runtime protection. In WWW, pages 40–52, 2004.
[14] G. Jin, L. Song, W. Zhang, S. Lu, and B. Liblit. Automated atomicity-violation fixing. In PLDI, pages 389–400, 2011.
[15] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static analysis tool for detecting Web application vulnerabilities. In S&P, pages 258–263, 2006.
[16] L. Koved, M. Pistoia, and A. Kershenbaum. Access rights analysis for Java. In OOPSLA, pages 359–372, 2002.
[17] B. Livshits, A. Nori, S. Rajamani, and A. Banerjee. Merlin: Specification inference for explicit information flow problems. In PLDI, pages 75–86, 2009.
[18] J. Mayrand, C. Leblanc, and E. Merlo. Experiment on the automatic detection of function clones in a software system using metrics. In ICSM, 1996.
[19] N. Meng, M. Kim, and K. McKinley. Systematic editing: Generating program transformations from an example. In PLDI, pages 329–342, 2011.
[20] R. Miller and B. Myers. Interactive simultaneous editing of multiple text regions. In USENIX ATC, pages 161–174, 2001.
[21] H. Nguyen, T. Nguyen, G. Wilson Jr., A. Nguyen, M. Kim, and T. Nguyen. A graph-based approach to API usage adaptation. In OOPSLA, pages 302–321, 2010.
[22] H. Nguyen and M. Rinard. Detecting and eliminating memory leaks using cyclic memory allocation. In ISMM, pages 15–29, 2007.
[23] T. Nguyen, H. Nguyen, N. Pham, J. Al-Kofahi, and T. Nguyen. Recurring bug fixes in object-oriented programs. In ICSE, pages 315–324, 2010.
[24] OWASP top 10 application security risks. https://www.owasp.org/index.php/Top_10_2010-Main, 2010.
[25] J. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan, W.-F. Wong, Y. Zibin, M. Ernst, and M. Rinard. Automatically patching errors in deployed software. In SOSP, pages 87–102, 2009.
[26] PHC: the open source PHP compiler. http://www.phpcompiler.org.
[27] PHP. http://www.php.net.
[28] PHP advent 2010: Usage statistics. http://phpadvent.org/2010/usage-statistics-by-ilia-alshanetsky.
[29] M. Pistoia, R. Flynn, L. Koved, and V. Sreedhar. Interprocedural analysis for privileged code placement and tainted variable detection. In ECOOP, pages 362–386, 2005.
[30] M. Rinard, C. Cadar, D. Dumitran, D. Roy, T. Leu, and W. Beebee. Enhancing server availability and security through failure-oblivious computing. In OSDI, pages 303–316, 2004.
[31] A. Sistla, V. Venkatakrishnan, M. Zhou, and H. Branske. CMV: Automatic verification of complete mediation for Java Virtual Machines. In ASIACCS, pages 100–111, 2008.
[32] S. Son, K. McKinley, and V. Shmatikov. RoleCast: Finding missing security checks when you do not know what checks are. In OOPSLA, pages 1069–1084, 2011.
[33] S. Son and V. Shmatikov. SAFERPHP: Finding semantic vulnerabilities in PHP applications. In PLAS, 2011.
[34] M. Sridharan, S. Fink, and R. Bodik. Thin slicing. In PLDI, pages 112–122, 2007.
[35] V. Srivastava, M. Bond, K. McKinley, and V. Shmatikov. A security policy oracle: Detecting security holes using multiple API implementations. In PLDI, pages 343–354, 2011.
[36] F. Sun, L. Xu, and Z. Su. Static detection of access control vulnerabilities in Web applications. In USENIX Security, 2011.
[37] L. Tan, X. Zhang, X. Ma, W. Xiong, and Y. Zhou. AutoISES: Automatically inferring security specifications and detecting violations. In USENIX Security, pages 379–394, 2008.
[38] M. Toomim, A. Begel, and S. Graham. Managing duplicated code with linked editing. In VLHCC, pages 173–180, 2004.
[39] G. Wasserman and Z. Su. Sound and precise analysis of Web applications for injection vulnerabilities. In PLDI, pages 32–41, 2007.
[40] W. Weimer, S. Forrest, C. Le Goues, and T. Nguyen. Automatic program repair with evolutionary computation. Commun. ACM, 53(5):109–116, 2010.
[41] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest. Automatically finding patches using genetic programming. In ICSE, pages 364–374, 2009.
[42] Y. Xie and A. Aiken. Static detection of security vulnerabilities in scripting languages. In USENIX Security, pages 179–192, 2006.
[43] A. Yip, X. Wang, N. Zeldovich, and F. Kaashoek. Improving application security with data flow assertions. In SOSP, pages 291–304, 2009.
[44] X. Zhang, S. Tallam, N. Gupta, and R. Gupta. Towards locating execution omission errors. In PLDI, pages 415–424, 2007.