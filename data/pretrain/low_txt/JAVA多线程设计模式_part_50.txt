### 优化后的文本

---

#### Page 494
**java.lang.Thread 类 (实现 Runnable 接口)**
- `public Thread(String name)`
- `public Thread(Runnable target)`
- `public Thread()`
- `public void run()`

**构造方法说明：**
- `Thread(String name)`：使用给定的名称创建一个新的线程。
- `Thread(Runnable target)`：使用给定的可运行目标创建一个新的线程。
- `Thread()`：创建一个新的线程。

**run 方法：**
- 在线程启动后，`run` 方法会被调用。

**异常处理：**
- 如果当前线程没有对象的锁（即没有监视器），则会抛出 `java.lang.IllegalMonitorStateException` 异常。
- 如果在等待过程中其他线程中断了当前线程，则会抛出 `java.lang.InterruptedException` 异常，并清除中断状态。
- 如果 `millis` 为负数或 `nanos` 不在 0 到 999999 之间，则会抛出 `java.lang.IllegalArgumentException` 异常。

**关于终止休息（Time-Out）：**
- 参照第4章。

---

#### Page 495
**主要线程 API**

- `public final void join() throws InterruptedException`
  - 当前线程等待此线程结束。如果其他线程中断了当前线程，则抛出 `InterruptedException`。

- `public boolean isInterrupted()`
  - 检查此线程是否被中断。调用此方法不会改变线程的中断状态。

- `public final boolean isAlive()`
  - 检查此线程是否处于活动状态。

- `public Thread(ThreadGroup group, Runnable target, String name)`
  - 使用指定的线程组、可运行目标和名称创建一个新的线程实例。

- `public final boolean isDaemon()`
  - 检查此线程是否是守护线程。

- `public static boolean interrupted()`
  - 检查当前线程是否被中断，并清除中断状态。

- `public void interrupt()`
  - 中断此线程。

- `public final int getPriority()`
  - 获取此线程的优先级。

- `public final String getName()`
  - 获取此线程的名称。

- `public static Thread currentThread()`
  - 返回当前正在执行的线程。

- `public static final int MAX_PRIORITY`
  - 线程可以获取的最高优先级。

- `public static final int NORM_PRIORITY`
  - 默认的线程优先级。

- `public static final int MIN_PRIORITY`
  - 线程可以获取的最低优先级。

- `public Thread(ThreadGroup group, String name)`
  - 使用指定的线程组和名称创建一个新的线程实例。

- `public Thread(ThreadGroup group, Runnable target, String name)`
  - 使用指定的线程组、可运行目标和名称创建一个新的线程实例。

---

#### Page 496
**其他线程 API**

- `public final void setName(String name)`
  - 设置此线程的名称。

- `public final void setDaemon(boolean on)`
  - 将此线程设置为守护线程。

- `public final void setPriority(int newPriority)`
  - 设置此线程的优先级。如果优先级不在 `MIN_PRIORITY` 和 `MAX_PRIORITY` 之间，则抛出 `IllegalArgumentException`。

- `public final void join(long millis, int nanos) throws InterruptedException`
  - 当前线程等待此线程结束，最多等待 `millis` 毫秒加上 `nanos` 纳秒。如果 `millis` 为负数或 `nanos` 不在 0 到 999999 之间，则抛出 `IllegalArgumentException`。

- `public final void join(long millis) throws InterruptedException`
  - 当前线程等待此线程结束，最多等待 `millis` 毫秒。如果 `millis` 为负数，则抛出 `IllegalArgumentException`。

- `public static void sleep(long millis) throws InterruptedException`
  - 使当前线程暂停执行 `millis` 毫秒。如果其他线程中断了当前线程，则抛出 `InterruptedException` 并清除中断状态。

- `public static void yield()`
  - 提示调度器让当前线程暂停，以便让其他线程有机会执行。

- `public String toString()`
  - 返回表示此线程的字符串，包括线程名称、优先级和线程组信息。

- `public final void suspend()`
  - 暂停此线程（不建议使用，可能导致安全性问题）。

- `public final void stop(Throwable obj)`
  - 停止此线程（不建议使用，可能导致安全性问题）。

- `public final void stop()`
  - 停止此线程（不建议使用，可能导致安全性问题）。

- `public void start()`
  - 启动此线程。新启动的线程将调用 `run` 方法。

---

#### Page 497
**其他线程 API 续**

- `public final void resume()`
  - 恢复已暂停的线程（不建议使用，可能导致安全性问题）。

- `public static void sleep(long millis, int nanos) throws InterruptedException`
  - 使当前线程暂停执行 `millis` 毫秒加上 `nanos` 纳秒。如果其他线程中断了当前线程，则抛出 `InterruptedException` 并清除中断状态。

- `public final void setPriority(int newPriority)`
  - 设置此线程的优先级。如果优先级不在 `MIN_PRIORITY` 和 `MAX_PRIORITY` 之间，则抛出 `IllegalArgumentException`。

- `public final void setName(String name)`
  - 设置此线程的名称。

- `public final void setDaemon(boolean on)`
  - 将此线程设置为守护线程。

- `public void run()`
  - 此方法通常由 `java.lang.Thread` 的子类重写。当线程启动时，将调用此方法。

- `public final void join(long millis, int nanos) throws InterruptedException`
  - 当前线程等待此线程结束，最多等待 `millis` 毫秒加上 `nanos` 纳秒。如果 `millis` 为负数或 `nanos` 不在 0 到 999999 之间，则抛出 `IllegalArgumentException`。

- `public final void join(long millis) throws InterruptedException`
  - 当前线程等待此线程结束，最多等待 `millis` 毫秒。如果 `millis` 为负数，则抛出 `IllegalArgumentException`。

- `public static void sleep(long millis) throws InterruptedException`
  - 使当前线程暂停执行 `millis` 毫秒。如果其他线程中断了当前线程，则抛出 `InterruptedException` 并清除中断状态。

- `public static void yield()`
  - 提示调度器让当前线程暂停，以便让其他线程有机会执行。

- `public String toString()`
  - 返回表示此线程的字符串，包括线程名称、优先级和线程组信息。

- `public final void suspend()`
  - 暂停此线程（不建议使用，可能导致安全性问题）。

- `public final void stop(Throwable obj)`
  - 停止此线程（不建议使用，可能导致安全性问题）。

- `public final void stop()`
  - 停止此线程（不建议使用，可能导致安全性问题）。

- `public void start()`
  - 启动此线程。新启动的线程将调用 `run` 方法。

---

#### Page 498
**Java.lang.ThreadLocal 类**

- `public void set(Object obj)`
  - 将指定的对象与此线程关联。

- `public Object get()`
  - 返回与此线程关联的对象。如果没有设置过，则返回 `null`。

---

#### Page 500
**参考文献**

- **《Java语言规格第2版》**
  - [JLS] "The Java Language Specification, Second Edition"
  - 村上雅节译 / 株式会社PiersonEducation / ISBN4-89471-306-3
  - 作者：Bill Joy, Guy Steele, James Gosling, Gilad Bracha
  - 链接：http://java.sun.com/docs/books/jls/

- **《Java多线程程序设计》**
  - [Lea] "Concurrent Programming in Java, Second Edition"
  - 松野良藏监译 / 株式会社翔泳社 / ISBN4-88135-918-5
  - 作者：Doug Lea
  - 链接：http://g.oswego.edu/dl/

- **《Java虚拟机规格第2版》**
  - [Venners] "Inside the Java 2 Virtual Machine, Second Edition"
  - 村上雅章译 / 株式会社Pierson Education / ISBN4-89471-356-X
  - 作者：Bill Venners
  - 链接：http://java.sun.com/docs/books/vmspec/

- **《设计模式--Java语言中的应用》**
  - [Gamma] "Design Patterns: Elements of Reusable Object-Oriented Software"
  - 作者：Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides
  - 繁体本：博硕文化出版
  - 简体中文本：中国铁道出版社
  - 链接：http://hillside.net/patterns/

- **《Java编程技巧》**
  - [Bloch] "Effective Java Programming Language Guide"
  - 作者：Joshua Bloch
  - 柴山芳树译 / 株式会社Pearson Education Japan / ISBN4-89471-436-1
  - 链接：http://www.asahi-net.or.jp/~dp8t-asm/java/articles/notes/01/

- **相关网页**
  - 设计模式 Wiki：http://c2.com/cgi/wiki?DesignPatterns
  - 对象管理组织：http://www.omg.org/
  - 设计模式邮件列表：http://www.hillside.net/patterns/
  - 本书相关网页：http://www.hyuki.com/dp/dp2.html
  - 关于线程需要注意的地方：http://java.sun.com/products/jdk/1.3/docs/guide/misc/threadPrimitiveDeprecation.html
  - JFC/Swing事件处理教程：http://java.sun.com/docs/books/tutorial/uiswing/overview/event.html
  - Swing工作线程：http://java.sun.com/products/jfc/tsc/articles/threads/threads2.html
  - 线程与Swing：http://java.sun.com/products/jfc/tsc/articles/threads/threadsl.html
  - IBM开发者网站：http://www-6.ibm.com/jp/developerworks/java/010302j_j-king.html
  - 解决Java线程问题的提案：http://java.sun.com/docs/books/tutorial/tiswing/overview/event.html

---

希望这些优化后的文本能帮助你更好地理解和使用Java线程相关的API和概念。如果有任何进一步的问题或需要更多的帮助，请随时告诉我！