### Impact of Carded Frames on Overall BER

One approach to improve the overall Bit Error Rate (BER) is to use a more optimistic decoder that can partially recover frame contents rather than discarding them entirely. This method would likely need to be combined with an error correction coding scheme within the frame. Coding schemes based on either the Hamming distance metric, which handles substitutions, or the Levenshtein distance metric [42], which addresses both substitutions and deletions, could be employed. Another strategy is to modify the framing scheme to reduce the likelihood of frame corruption. For example, using two frame delimiters at the start of each frame instead of one. This way, if only one delimiter is deleted or corrupted, the frame can still be decoded correctly.

### 6.3.6 Encoding Scheme

Our results for smaller window sizes indicate that in many environments where the Keyboard JitterBug might be deployed, a more efficient symbol encoding scheme could be used by packing more than one bit of information per transmitted symbol. To test this hypothesis, we implemented a 16-symbol (four bits/symbol) encoding scheme with an additional symbol acting as the frame delimiter. The results, summarized in Table 7, show that the frame size used was 16 bits (four symbols). The Average Correct Frame BER remains at acceptable levels for all tested nodes. These results demonstrate that it is possible to optimize framing and encoding schemes to increase channel bandwidth while maintaining acceptable channel performance.

### 6.4 Summary of Results

Our experimental results suggest that a conservative choice of a 20 ms window size is small enough to be undetectable by a normal user and provides good channel performance under various system loads, operating systems, and network conditions. Additionally, the bandwidth of the channel can be increased by adopting a more aggressive encoding scheme, as shown by our high bit rate encoding results. However, our primary goal was to design an encoding scheme that is robust and general enough to work in any unknown environment without affecting user perception. The binary encoding scheme with a 20 ms timing window serves this purpose well.

### 6.5 Detection

The detection of covert network timing channels is a complex research problem. In this paper, we do not focus on the detectability aspects of the channel but briefly analyze some issues. Previous studies have suggested that covert network timing channels can be detected by analyzing the inter-arrival times of network packets [11, 7]. These detection algorithms rely on the notion of regularity, a channel-specific property that distinguishes normal traffic from covert channel traffic. However, these techniques are not effective for detecting low-bandwidth timing channels like the Keyboard JitterBug, which has a different form of regularity.

It might be possible to detect Keyboard JitterBug activity by directly observing the inter-arrival times of network packets. These times tend to cluster around multiples of the window size or half the window size because the symbol encoding scheme uses an inter-arrival time of 0 (modulo w) for sending a '0' and w/2 (modulo w) for sending a '1'. We collected an SSH trace without the Keyboard JitterBug and modified it by adding simulated jitter to simulate the presence of the JitterBug. This gives us a worst-case analysis of the detectability of our channel.

Figure 6 shows the inter-arrival times for 550 packets in the original trace for a range between 0.2s and 0.3s. Figure 7 shows the same trace with simulated jitter added by the Keyboard JitterBug. Notice the banding around multiples of 10 ms, corresponding to a window size of 20 ms. A simple plot of the inter-arrival times reveals that a covert timing channel is being exploited.

To evade such a simple detection scheme, we describe an approach based on rotating the timing window used for symbol encoding. Note that we do not claim this technique makes our channel undetectable by any other means; it is simply a countermeasure against the most direct way of detecting our covert timing channel. The timing channel might still be susceptible to other forms of analysis.

The method works as follows: Let {bi} be the binary sequence to be transmitted using jitters, and {ti} be the sequence of times when keys are pressed. Assume there exists {si}, a pseudo-random sequence of integers ranging from 0 to w − 1, where w is the length of the timing window. The sequence {si} is known only to the sender and receiver and acts as a shared secret. Instead of encoding bits by adding delays so that the inter-arrival distances cluster around 0 and its antipode, the source adds jitter such that they cluster around the sequence {si} and its associated antipodal sequence.

More precisely, to transmit the bit bi, the JitterBug adds a delay such that:
\[
(\delta_i - s_i) \mod w = 
\begin{cases} 
0 & \text{if } b_i = 0 \\
\left\lfloor \frac{w}{2} \right\rfloor & \text{if } b_i = 1 
\end{cases}
\]
where \(\delta_i = t_i - t_{i-1}\) are the differences in times when adjacent keystrokes are sent to the keyboard controller by the Keyboard JitterBug.

Consider an example where Bob wants to send 3 bits of information {1, 0, 1} to Eve using the JitterBug. Assume the window size is 20 ms, and they agreed on the sequence {s0, s1, s2} = {3, 9, 5}. Figure 9 illustrates how the timing window is rotated at each step before deciding on the amount of jitter to add.

Figure 8 shows the inter-arrival times for the same SSH trace with packet timing adjusted for the JitterBug but using rotating windows during symbol encoding instead of the original static scheme. The sequence {si} is chosen to be a pseudo-random sequence of integers between 0 and 19. The inter-arrival times are no longer clustered, and there are no new noticeable patterns compared to the original SSH trace.

### 7 Conclusions and Future Work

Compromising an input channel is useful not only for learning secrets but also for leaking them over the network. We introduced loosely-coupled network timing channels and JitterBugs, through which covert network timing channels can be exploited to leak sensitive information in general-purpose computing systems. We described the Keyboard JitterBug, a keylogger that does not require physical retrieval to exfiltrate captured data. It can leak previously captured sensitive information such as user passphrases over interactive network applications by adding small, unnoticeable delays to user keypresses. It can also be used with non-interactive network applications like web browsers and instant messaging systems at low bandwidth.

Our experiments suggest that the distance over the network between the receiver and the JitterBug does not significantly impact performance. The timing window size w is the basic parameter of the symbol encoding scheme, chosen based on the expected network jitter and the maximum tolerable delay. A conservative choice of 20 ms is small enough to be unnoticeable to a human user and provides good channel performance across a wide range of network conditions and operating systems. This makes the Keyboard JitterBug very robust and less susceptible to major environmental changes.

We also described experimental results with simple framing schemes and more aggressive encoding mechanisms, showing that further optimization of symbol encoding and framing could enhance performance in certain environments. Finally, we demonstrated simple techniques for evading the most direct methods of detecting our attacks.

The most obvious extension to this work is the development of better framing and encoding schemes with higher bandwidth, making less conservative assumptions that take advantage of specific channel properties. In this paper, we deliberately avoided optimizing for any particular channel, operating system, or networked application, instead identifying parameters that provide satisfactory performance and remain highly robust under varied conditions.

All covert timing channels represent an arms race between those who exploit such channels and those who want to detect their use. This necessitates the use of countermeasures by covert channels to elude detection by network wardens. We suggested only very simple countermeasures in this paper. Our initial results with rotating encoding timing windows indicate that the use of cryptographic techniques to hide the use of encoded jitter channels may be a promising approach. We plan to explore this direction in the future.

### Acknowledgments

This research was supported in part by grants from NSF Cybertrust (CNS-05-24047) and NSF SGER (CNS-05-04159). Jutta Degener suggested the name "JitterBug." The idea of using a PIC chip to add jitters emerged from discussions with John Iannidis. We thank Madhukar Anand, Sandy Clark, Eric Cronin, Chris Marget, and Micah Sherr for many helpful discussions during the course of this research. We are grateful for the facilities of PlanetLab to perform our experiments. Finally, we thank the anonymous reviewers and David Wagner for many helpful suggestions and comments.

### References

[1] The stress project. http://weather.ou.edu/apw/projects/stress/.
[2] Trusted computer system evaluation. Tech. Rep. DOD 5200.28-STD, U.S. Department of Defense, 1985.
[3] United States v. Scarfo, Criminal No. 00-404 (D.N.J.), 2001.
[4] Acharya, A., and Salz, J. A Study of Internet Round-Trip Delay. Tech. Rep. CS-TR-3736, University of Maryland, 1996.
[5] Agat, J. Transforming out timing leaks. In POPL '00: Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (New York, NY, USA, 2000), ACM Press, pp. 40–53.
[6] Anantharam, V., and Verdu, S. Bits Through Queues. In IEEE Transactions On Information Theory (1996), vol. 42.
[7] Berk, V., Giani, A., and Cybenko, G. Detection of Covert Channel Encoding in Network Packet Delays. Tech. rep., Dartmouth College, 2005.
[8] Broido, A., Hyun, Y., and Claffy, K. Spectroscopy of traceroute delays. In Passive and active measurement workshop (2005).
[9] Broido, A., King, R., Nemeth, E., and Claffy, K. Radon spectroscopy of inter-packet delay. In IEEE high-speed networking workshop (2003).
[10] Brumley, D., and Boneh, D. Remote Timing Attacks are Practical. In Proceedings of the 12th USENIX Security Symposium (August 2003).
[11] Cabuk, S., Brodley, C. E., and Shields, C. IP covert timing channels: design and detection. In CCS '04: Proceedings of the 11th ACM conference on Computer and communications security (New York, NY, USA, 2004), ACM Press, pp. 178–187.
[12] Chun, B., Culler, D., Roscoe, T., Bavier, A., Peterson, L., Wawrzoniak, M., and Bowman, M. Planetlab: an overlay testbed for broad-coverage services. SIGCOMM Comput. Commun. Rev. 33, 3 (2003), 3–12.
[32] Miller, R. B. Response time in man-computer conversational transactions. In AFIPS Fall Joint Computer Conference (1968), vol. 33.
[33] Moskowitz, I. S., and Kang, M. H. Covert Channels – Here to Stay? In COMPASS (1994).
[34] Moskowitz, I. S., and Miller, A. R. The Influence of Delay Upon an Idealized Channel’s Bandwidth. In SP '92: Proceedings of the 1992 IEEE Symposium on Security and Privacy (Washington, DC, USA, 1992), IEEE Computer Society, p. 62.
[35] Moskowitz, I. S., and Miller, A. R. Simple timing channels. In IEEE Symposium on Security and Privacy (1994).
[36] Murdoch, S., and Danezis, G. Low-cost traffic analysis of Tor. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (2005).
[37] Nagle, J. RFC 896 - Congestion Control in IP/TCP Internetworks.
[38] Proctor, N. E., and Neumann, P. G. Architectural Implications of Covert Channels. In 15th National Computer Security Conference (1992).
[39] Ratzer, E. A., and MacKay, D. J. C. Codes for channels with insertions, deletions, and substitutions. In Proceedings of 2nd International Symposium on Turbo Codes and Related Topics, Brest, France, 2000 (2000), pp. 149–156.
[40] Shannon, C. E. A mathematical theory of communication. Bell System Technical Journal (1948), 379–423 and 623–656.
[41] Song, D. X., Wagner, D., and Tian, X. Timing analysis of keystrokes and timing attacks on SSH. In USENIX Security Symposium (2001).
[42] Tanaka, E., and Kasai, T. Synchronization and substitution error-correcting codes for the Levenshtein metric. In IEEE Transactions on Information Theory (March 1976), vol. 22, pp. 156–162.
[43] Venkatraman, B. R., and Newman-Wolfe, R. Capacity Estimation and Auditability of Network Covert Channels. In IEEE Symposium on Security and Privacy (1995).
[44] Wang, X., Chen, S., and Jajodia, S. Tracking anonymous peer-to-peer VoIP calls on the internet. In CCS '05: Proceedings of the 12th ACM conference on Computer and communications security (New York, NY, USA, 2005), ACM Press, pp. 81–91.
[45] Wang, X., and Reeves, D. Robust Correlation of Encrypted Attack Traffic Through Stepping Stones by Manipulation of Interpacket Delays. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS 2003) (2003).
[46] Wray, J. C. An Analysis of Covert Timing Channels. In Proceedings of the IEEE Symposium on Research in Security and Privacy, Oakland, California (1991).
[14] Davey, M. C., and MacKay, D. J. Reliable communication over channels with insertions, deletions, and substitutions. IEEE Transactions on Information Theory 47 (2001).
[15] Sellers, F. F. Bit loss and gain correction code. In IEEE Transactions on Information Theory (1962), vol. 8, pp. 35–38.
[16] Giles, J., and Hajek, B. An Information-Theoretic and Game-Theoretic Study of Timing Channels. In IEEE Transactions on Information Theory (2002), vol. 48.
[17] Helouet, L., Jard, C., and Zeitoun, M. Covert channels detection in protocols using scenarios. In Proceedings of SPV '2003, Workshop on Security Protocols Verification (2003). Satellite of CONCUR'03. Available at http://www.loria.fr/~rusi/spv.pdf.
[18] Hu, W.-M. Reducing Timing Channels with Fuzzy Time. In IEEE Symposium on Security and Privacy (1991).
[19] Jacobson, V., Braden, R., and Borman, D. RFC 1323 - TCP Extensions for High Performance.
[20] Kang, M. H., and Moskowitz, I. S. A Data Pump for Communication. Tech. rep., Naval Research Laboratory, 1995.
[21] Kang, M. H., Moskowitz, I. S., and Lee, D. C. A Network Version of the Pump. In IEEE Symposium on Security and Privacy (1995).
[22] Kang, M. H., Moskowitz, I. S., Montrose, B. E., and Parsonese, J. J. A Case Study Of Two NRL Pump Prototypes. In ACSAC '96: Proceedings of the 12th Annual Computer Security Applications Conference (Washington, DC, USA, 1996), IEEE Computer Society, p. 32.
[23] Kelsey, J., Schneier, B., Wagner, D., and Hall, C. Side Channel Cryptanalysis of Product Ciphers. In ESORICS '98 (1998).
[24] Kemmerer, R. A. A Practical Approach to Identifying Storage and Timing Channels: Twenty Years Later. In ACSAC '02: Proceedings of the 18th Annual Computer Security Applications Conference (Washington, DC, USA, 2002), IEEE Computer Society, p. 109.
[25] Kocher, P. C. Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems. In CRYPTO (1996), pp. 104–113.
[26] Kohno, T., Broido, A., and Claffy, K. Remote Physical Device Fingerprinting. In IEEE Symposium on Security and Privacy (2005).
[27] Lampson, B. W. A Note on the Confinement Problem. In Communications of the ACM (1973), vol. 16.
[28] Lee, P. Combined error-correcting/modulation recording codes. PhD thesis, University of California, San Diego, 1988.
[29] Levenshtein, V. I. Binary codes capable of correcting deletions, insertions, and reversals. In Soviet Physics Doklady (1966), vol. 10, pp. 707–710.
[30] Levine, B., Reiter, M., Wang, C., and Wright, M. Timing Attacks in Low-Latency Mix Systems. In Proceedings of Financial Cryptography: 8th International Conference (FC 2004): LNCS-3110 (2004).
[31] Millen, J. 20 years of covert channel modeling and analysis. In IEEE Symposium on Security and Privacy (1999).

---

This revised version aims to improve clarity, coherence, and professionalism. If you have any specific sections or further refinements in mind, please let me know!