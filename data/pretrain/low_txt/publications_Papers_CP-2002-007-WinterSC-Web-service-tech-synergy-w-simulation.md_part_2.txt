### 4. System Design
#### 3.2.1 Web Service Composition
In this section, we describe the system architecture for designing, simulating, and creating Web service processes (see Figure 1). Web service composition involves the creation of a Web process from individual Web services, which enhances the utility of these services. This composition can be either static or dynamic.

- **Static Composition**: The services are predetermined during the design phase.
- **Dynamic Composition**: The Web service to be used for an activity is decided at runtime, often by the process enactment engine. Dynamic composition involves searching registries at runtime to find suitable services.

Web service composition can be represented as a workflow graph with activities (services) and transition links (control and data). In composing Web services into processes, both data and control links are essential. Based on the results of simulation and test enactment, the process can be adapted to meet specific needs.

**Figure 1: System Architecture**

#### 4.1 WPDT - Web Process Designer Tool
As part of our work, we have developed the Web Process Designer Tool (WPDT) for composing Web services into Web processes (see Figure 2). WPDT is a process-design tool that allows for the static composition of Web services to build Web processes. It stores Web processes as WSFL specifications in a Db4XML repository, an XML database developed at the University of Georgia. Since Db4XML supports XQuery, users can efficiently query the design using the XQuery language.

**Figure 2: Web Process Design using WPDT**

#### 4.2 Web Process Enactment
Web process enactment is similar to workflow enactment, but the components of a Web process are Web services, which differ from workflow activities in their distribution, autonomy, and heterogeneity. We propose two approaches for enacting Web processes: a centralized approach and a distributed approach.

- **Centralized Approach**: Based on a client/server architecture, it uses a controller to manage the execution of the Web process. The controller invokes Web services, receives results, and then invokes the next appropriate service. This approach is straightforward and easy to implement.
- **Distributed Approach**: More complex, it does not use a central controller. Instead, Web services share the execution context, enabling distributed execution through peer-to-peer communication or agent-based solutions.

We have implemented the centralized technique in our system, using a Perl controller module to manage the entire Web process execution. The Perl enactment code is generated from the WSFL specification of the Web process. During test enactment, we instrument the controller module to measure the total time taken for each Web service invocation, allowing us to analyze individual Web service performance and the distribution of service times.

**Figure 3: Timing Results for the Book Purchasing Web Process**

### 5. Performance Evaluation
Performance evaluation of Web services helps implementers understand the behavior of activities in a composed process. The performance of a single Web service can significantly affect the entire Web process, so it is crucial to evaluate critical services before enactment. The total invocation time (T) for a Web service (s) is given by:

\[ T(s) = S(s) + M(s) + Q(s) \]

- **Service Time (S)**: The time the Web service takes to perform its task.
- **Message Delay Time (M)**: Determined by the message size and network load.
- **Queue Time (Q)**: The delay caused by the load on the system where the Web service is deployed.

Performance evaluation should be done in a controlled manner, which can be challenging due to the distribution and autonomy of Web services. Simulation is therefore very useful for predicting the performance of a Web process.

### 6. Simulation
Simulation helps determine how composed Web services will perform when deployed and can uncover structural errors in the design. WPDT is integrated with the JSIM simulation system, and a JSIM Model Generator generates simulation models from WSFL process models.

#### 6.1 JSIM Simulation
The latest version of JSIM, a Java-based simulation and animation environment, contains features that support the simulation of Web processes. JSIM simulation models are constructed using basic components such as source nodes, server nodes, facility nodes, sink nodes, transports, and SimObjects.

- **Conditional Routing**: Enhanced to allow out edge selection based on simulation entity attributes.
- **AND Splits**: Allow an entity to choose more than one out edge, with copies of the entity traversing the graph until they encounter an AND Join.

JSIM models take as input the distribution functions characterizing the Web services. These functions can be computed from performance evaluation tests or obtained from service providers.

### 7. Building Simulation Environments Out of Web Services
Many types of Web services can be useful in simulation. We discuss three types below:

#### 7.1.1 Whole Models as Web Services
Complete simulation models can be made available as Web services. Sites with expertise in specific types of simulations (e.g., highway traffic or weather) can provide their models as Web services, charging on a per-use basis or leasing out their services.

#### 7.1.2 Environmental Components as Web Services
Simulations may use several major components such as databases, spreadsheets, knowledge bases, visualization tools, OLAP tools, data mining tools, scenario managers, optimizers, and analyzers. Components with infrequent interaction are good candidates to be separated out as Web services. This approach ensures standardization, interoperability, maintainability, and flexibility.

- **Data/Information/Knowledge Sources and Sinks**: Databases, spreadsheets, and knowledge bases primarily serve as sources and sinks for data, information, and knowledge.

By leveraging Web services, simulation environments can be built with greater flexibility and scalability, ensuring that changes in one component do not require extensive modifications to the entire system.