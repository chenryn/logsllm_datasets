# Oracle to PostgreSQL Migration: Considerations, Hurdles, and Solutions

Presented by Gurjeet Singh  
May 19, 2011

**Disclaimer:**  
EnterpriseDB, Postgres Plus, and Dynatune are trademarks of EnterpriseDB Corporation. Other names may be trademarks of their respective owners. © 2011 EnterpriseDB Corporation. All rights reserved. Confidential.

---

## Agenda
1. Schema Migration
2. Data Type Migration
3. Data Migration
4. Business Logic Migration
5. Other Objects
6. Connectors / Drivers / Libraries
7. Application / SQL Migration
8. DBA Migration
9. Tools (Ora2pg)

---

## Schema Migration

### Schemas
- **Oracle**: Each user has a schema by default.
- **PostgreSQL**: Create a user and schema with the same name. The first component in `search_path` is `$user` by default.
- **Identifiers**: Oracle converts them to UPPER CASE unless quoted, while PostgreSQL converts them to lower case unless quoted. Consistency in quoting is key.

### Tables
- **CREATE TABLE**: Mostly compatible, except for:
  - **Global Temporary Table**: Use LOCAL TEMP tables.
  - **Partition Clauses**: Use Inheritance, Triggers, and CHECK Constraints.
  - **Storage Clause (INITTRANS, MAXEXTENTS)**: Remove these clauses.
  - **PCTFREE**: Use `fillfactor`.
  - **Virtual Columns**: Use views.

### Constraints
- **Primary Key, Foreign Key, Unique, CHECK, NOT NULL**: These work similarly in both databases.

### Indexes
- **Btree / Descending**: Supported.
- **Reverse Key / Bitmap / Join / Global**: Not implemented. For global indexes, use BEFORE INSERT/UPDATE triggers, but note that this can be expensive.

### Partitions
- **Hash, List, Range**: All work if you follow the guidelines mentioned above.

### Tablespaces
- **Oracle vs. PostgreSQL**: While not exactly the same, they serve a similar purpose.

---

## Data Type Migration

### String Types
- **VARCHAR, VARCHAR2, NVARCHAR, NVARCHAR2**: Convert to `VARCHAR` or `TEXT`.
- **CHAR, NCHAR**: Convert to `CHAR`.

### Large Object Types
- **CLOB, LONG**: Convert to `VARCHAR` or `TEXT`. Note: TOAST (Transparent Oversized Attribute Storage) is transparent to applications and has a size limit of 2^30-1 (1 GB).

### Numeric Types
- **NUMBER**: Convert to `BIGINT`, `INT`, `SMALLINT`, `REAL`, `DOUBLE PRECISION` for good performance, or `NUMERIC` for unlimited size but lower performance.
- **BINARY_INTEGER, BINARY_FLOAT, ...**: Convert to `INTEGER`, `FLOAT`, etc.
- **BLOB, RAW, LONG RAW**: Convert to `BYTEA`, which may require additional application changes.

### Date and Time Types
- **DATE, TIMESTAMP**: Use `DATE` or `TIMESTAMP`. Consider timezone effects with `TIMESTAMP WITH TIMEZONE`.
- **Date Arithmetic**: Oracle's `DATE + integer` can be handled by creating an overloaded `+` operator. ORAFCE provides functions like `last_day` and `add_months`. For `TIMESTAMP - TIMESTAMP`, Oracle returns a `NUMBER`, while PostgreSQL returns an `INTERVAL`.
- **NLS_DATE_FORMAT**: Controls output of `TO_CHAR` and `TO_DATE` functions. In PostgreSQL, this is controlled by locale settings. Note: `DateStyle` GUC variable.

---

## Data Migration

### Methods
- **GUI Tools**: Suitable if data type conversion was smooth and database size is not a restriction.
- **ETL Style**:
  - Export data in plain-text or CSV using a custom application.
  - Use scripting (e.g., Perl) for transformation.
  - Load data using `COPY FROM`.
  - Avoid Write-Ahead Logging (WAL) by creating/truncating the table in the same transaction.
  - **Upside**: Allows parallel loads.
  - **Downside**: Requires custom development.

### Sequences
- **Extract `sequence_name.nextval`**: Use `setval('sequence_name', value)` in PostgreSQL.
- **Speeding Up**:
  - Avoid transaction logging (WAL).
  - Defer index creation until after data load.
  - Consider deferring Primary Key and Unique constraints, which also requires deferring Foreign Key constraints.

---

## Business Logic Migration

### General
- **RETURN becomes RETURNS**: Use `CREATE OR REPLACE FUNCTION fn(a INOUT) RETURNS INT AS $$DECLARE BEGIN ... END;$$ LANGUAGE lang;`
- **EXECUTE IMMEDIATE becomes EXECUTE**: `SELECT` without `INTO` becomes `PERFORM`.
- **Autonomous Transactions**: Not available. Use `DBLink` contrib module for loopback connections.
- **COMMIT/ROLLBACK within Procedures**: Use EXCEPTION handling with SAVEPOINTs.
- **REVERSE LOOPs**: Switch the start/end conditions, e.g., `FOR i IN REVERSE 1..10 LOOP` becomes `FOR i IN REVERSE 10..1 LOOP`.

### Triggers
- **Split into Trigger Function and Trigger**: Allows reuse of trigger code.
- **:NEW, :OLD**: Become `NEW`, `OLD`.
- **UPDATING, INSERTING**: Use `TG_OP` and consider `TG_*` variables.
- **RETURN NEW**: Required in BEFORE triggers.

### Conditional Triggers
- **Execute a Trigger Only if a Condition Matches**: PostgreSQL supports this.

### Procedures
- **PostgreSQL Functions**: Use `RETURNS VOID` for procedures.
- **Calling Convention**: May need application changes, especially for connectors like JDBC.

### Functions
- **RETURN becomes RETURNS**: Provide parentheses even for empty parameter lists.
- **DEFAULT Values for Parameters**: Works the same in PostgreSQL.
- **Return Pseudo Type RECORD**: The caller needs to know the column names.
- **Return Set of Records**: Use `RETURNS SETOF type`.
- **Oracle Table Functions**: Similar functionality in PostgreSQL.

### Packages
- **Group of Variables, Functions, and Procedures**: Use schemas to group functions and temporary tables to replace variables.
- **No Substitute for Private Functions and Variables**: Package Body initialization code is not commonly used. Call an initializer function in every member function.

### Local Functions
- **Functions within Functions**: Not available in PostgreSQL. Use normal functions instead.

---

## Other Objects

### Synonyms
- **Not Available**: Use views for tables and wrappers for functions.

### Database Links
- **Not Available**: Use the `dblink` contrib module and views. No `@` notation; pass the whole query to a set-returning-function.

### CONNECT BY
- **Use WITH RECURSIVE**: SQL-compliant and very flexible.

### Materialized Views
- **Create Wrapper Views**: Refer to Jonathan Gardner's and Dan Chak's resources for more details.

### Partitioning
- **Roll Your Own**: Use Inheritance, Triggers, CHECK constraints, and `constraint_exclusion`.

### Sequences
- **Similar to Oracle**: `NOCACHE` becomes `CACHE 1` (or remove this clause). Adjust `MAXVALUE` or remove it. `.nextval` and `.currval` become `nextval('sequence_name')` and `currval('sequence_name')`. `ORDER/NOORDER` is not needed in PostgreSQL.

### NO{CACHE|MINVALUE|MAXVALUE|CYCLE}
- **Replace with NO {*]**: For example, `NOMINVALUE` becomes `NO MINVALUE`.

---

## Application Connectivity (Drivers)

### ODBC
- **Works**

### JDBC
- **Works**: Consider turning off the autocommit flag in the driver.

### .Net
- **Npgsql**

### OCI
- **Used by Pro*C programs and Oracle Forms**

---

## Application Migration (Queries)

[Continued in the next section]

---

© 2011 EnterpriseDB Corporation. All rights reserved. Confidential.