# An Empirical Characterization of IFTTT: Ecosystem, Usage, and Performance

**Authors:**
- Xianghang Mi
- Feng Qian
- Ying Zhang
- XiaoFeng Wang

**Affiliations:**
- **Xianghang Mi, Feng Qian, XiaoFeng Wang:** Indiana University Bloomington
- **Ying Zhang:** Facebook Inc.

**Abstract:**
IFTTT (If This Then That) is a widely used trigger-action programming platform that enables the automation of over 400 services from IoT devices and web applications. We conducted an empirical study of IFTTT using a combined approach of data analysis over six months and controlled experiments with a custom testbed. Our study profiles the interactions among different entities, measures how applets are used by end users, and evaluates the performance of applet execution. We observed rapid growth in the IFTTT ecosystem and its increasing use for automating IoT-related tasks, which account for 52% of all services and 16% of applet usage. Additionally, we identified several performance inefficiencies and their underlying causes.

**CCS Concepts:**
- Networks → Home networks; Network performance evaluation
- Computer systems organization → Embedded systems

**Keywords:**
IFTTT, IoT, Measurement

**ACM Reference Format:**
Xianghang Mi, Feng Qian, Ying Zhang, and XiaoFeng Wang. 2017. An Empirical Characterization of IFTTT: Ecosystem, Usage, and Performance. In Proceedings of IMC '17. ACM, New York, NY, USA, 7 pages. https://doi.org/10.1145/3131365.3131369

## 1 Introduction

Consumer Internet of Things (IoT) devices, such as smart home gadgets, are becoming increasingly popular. For example, Amazon has sold over 5 million Amazon Echo devices since their launch in late 2014 [1]. Among the many challenges faced by today's consumer IoT systems, policy management plays a critical role in ensuring scalable, automated, secure, and resource-efficient interactions among devices. 

In our measurement (§3), we observed more than 20 types of smart home devices, including lights, security cameras, thermostats, A/C units, washing machines, sprinklers, doorbells, garage doors, locks, refrigerators, and even smart egg trays [6]. These devices are highly heterogeneous in terms of vendors, form factors, computational power, networking capabilities, and programming interfaces. Managing each device separately, let alone coordinating them to accomplish complex tasks, is non-trivial.

In this paper, we conduct an empirical characterization of IFTTT, a task automation platform for IoT and web services. Through IFTTT, end users can easily create policies that connect IoT devices or bridge them with web services, such as "add 'buying eggs' to my iPhone reminder when there are no more than 3 eggs in the fridge." We selected IFTTT because it is the most popular among various commercial task automation platforms [2, 10, 11, 13–15]. As of early 2017, IFTTT offers more than 320,000 automation scripts (called "applets") provided by over 400 service providers, with over 20 million installations. Importantly, more than half of IFTTT services are IoT-related, making it an ideal platform for profiling interactions between web services and IoT devices.

Despite IFTTT's popularity, there is a lack of systematic understanding of its ecosystem, usage, and performance. The goal of this paper is to perform in-depth studies of these important aspects. However, our measurement study faces several challenges, including the complexity of interactions among multiple policy stakeholders (e.g., end users, IoT devices, service providers, web applications, and the IFTTT engine itself), limited visibility from the end user's perspective, and practical challenges in conducting long-term measurements.

To address these challenges, we built a testbed to automatically monitor and profile the entire process of applet execution. We also launched our own IFTTT service to control home-deployed IoT devices and third-party web services. This setup allows us to interact with IFTTT from both the end user's and service provider's perspectives and to instrument applet execution at multiple vantage points.

We then studied the usage of IFTTT in the wild by collecting and analyzing its services and applets over six months. We found that 52% of services and 16% of applet usage are IoT-related. With over 200 IoT services identified, IFTTT provides a way to identify popular smart home and wearable devices on the market in a centralized manner. We provide detailed taxonomies of services and their interactions and characterize how users contribute to IFTTT's applet library.

We further conducted in-lab controlled experiments to understand applet execution performance. Our results suggest that many applets, including some "real-time" applets like turning on a light using a smart switch, cannot be executed in real time when their triggers are activated. The delays are significant (usually 1 to 2 minutes) with high variance (up to 15 minutes). We found that the delay is caused by IFTTT's long polling interval. We also studied scenarios where multiple applets execute sequentially and concurrently, finding that their performance is often suboptimal. For example, chained applets can form explicit and implicit "infinite loops," causing resource waste or even damage to physical devices.

Overall, this paper makes three major contributions:
1. Developing a measurement testbed with a self-implemented IFTTT service to profile the IFTTT ecosystem (§2).
2. Conducting an in-depth characterization of service and applet usage (§3).
3. Using the testbed to measure IFTTT applet execution performance (§4).

Based on our findings, we provide recommendations in §6. We summarize related work and conclude the paper in §5. All data and code for this project can be found at: https://www.cs.indiana.edu/~fengqian/ifttt_measurement

## 2 Understanding the Ecosystem

IFTTT is a trigger-action programming (TAP) platform [18, 23] that allows end users to create conditional rules in the form of "if A then B," where A is a trigger, B is an action, and the entire rule is called an applet. Triggers and actions are provided by IoT vendors and web service providers. Users construct applets by selecting triggers and actions from (usually different) third-party partner services. A service abstracts functionalities provided by web applications or IoT devices and typically offers multiple triggers and actions.

For example, consider the following applet: "automatically turn your Hue lights blue whenever it starts to rain." In this applet, the trigger (raining) is from the weather service, and the action (changing the Hue light color) belongs to the service provided by Philips Hue [8], a smart LED lamp vendor. Both the trigger and action may have fields (i.e., parameters) that customize the applet, such as the light color.

### 2.1 The Measurement Testbed

Multiple entities play roles in the IFTTT ecosystem: the centralized IFTTT engine executes the applet by contacting and coordinating the services; partner services (such as Philips Hue) respond to IFTTT's requests by testing the trigger condition or executing the action; IoT devices and web applications are controlled by the services to implement the policy; and end users define the applets through IFTTT's mobile app or web interfaces.

To understand these interactions, we set up a measurement testbed using IFTTT, commodity IoT devices, and commercial web apps. A challenge here is that an end user is at the "edge" of the ecosystem and lacks visibility into how partner services interact with the IFTTT engine. To overcome this, we obtained a service provider testing account from IFTTT, allowing us to become a service provider and publish our own services. Our services support triggers and actions for both IoT devices and web applications.

We purchased four popular off-the-shelf smart home devices: Philips Hue smart lights, WeMo Light Switch (programmatically controlling any home light), Amazon Echo Dot (smart speaker connecting to Alexa, Amazon's personal assistant service), and Samsung SmartThings Hub (controlling various home appliances). Our testbed also supports several web applications such as Gmail and Google Drive.

For each device and web app, our service leverages its API to get and set states. For example, our service runs on a server in our lab, while the actual Hue lamp and its hub are located at an author's home. For security, most home-deployed devices only accept access from a 3rd-party host in the same LAN, so we deployed a local proxy in the home LAN to act as a bridge for communication between our service server and local devices. The communication path between the lamp and our service is thus: Hue Lamp – Hue Hub – Local Proxy – Gateway Router – Our Service Server. Note that the official Hue service can directly talk to the hub using a proprietary protocol, so the path is: Hue Lamp – Hue Hub – Gateway Router – Hue Service.

Our service server and the IFTTT engine communicate using IFTTT's web-based protocol [5]. The services for other smart home devices are developed similarly. For web apps, our service directly talks with Google using its App API [3]. Our overall implementation efforts for the testbed involve 1620 LoCs in PHP and 2900 LoCs in Python. The Test Controller automates the controlled experiments described in §4.

### 2.2 Profiling Interactions Among Entities

We leveraged the testbed and self-implemented IFTTT service to profile the interactions among the entities within the IFTTT ecosystem. The high-level approach is to monitor message exchanges at our vantage points (e.g., our service server and the local proxy in Figure 1). While the interactions can be inferred from the IFTTT documentation, an experimental approach is necessary to verify actual system behavior, detect deviations or unexpected behaviors, and quantify system performance and inefficiencies.

- **Publishing a Service:** Our service server exposes a base URL to IFTTT, such as `https://api.myservice.com`, and other options like authentication configurations. Each trigger or action has a unique URL under the base URL, such as `https://api.myservice.com/ifttt/actions/turn_on_light`. IFTTT generates a key for the service, which is embedded in future message exchanges for authentication.
  
- **Constructing an Applet:** The user visits IFTTT using a web or smartphone app, selects the trigger/action services, the trigger/action, and their fields. Many triggers/actions require user authentication using the OAuth2 framework [7]. The user is directed to the authentication page hosted by the service provider and asked for credentials. An access token is generated and cached at IFTTT to automate future applet execution.
  
- **Applet Execution:** IFTTT periodically polls the trigger service. The polling query is encapsulated into an HTTPS POST message (with the access token, service key, and a random request ID) sent to the trigger URL. The trigger service determines if the trigger condition is met by either active polling or having the target device/app push trigger events. If the trigger is activated, the trigger service notifies IFTTT, which then contacts the action URL. Finally, the action service executes the action.

## 3 Understanding IFTTT Usage

To gain a holistic view of IFTTT usage, we crawled its services, triggers, actions, and applets. We describe the data collection methodology in §3.1 and our findings in §3.2.

### 3.1 Data Collection Methodology

We parsed the IFTTT partner service index page to get a list of all services. By reverse engineering the URLs of applets' pages, we observed that the URLs can be systematically retrieved by enumerating a six-digit applet ID. Using this method, we managed to fetch more than 300K published applets. For each applet, we retrieved the following information from its page: applet name, description, trigger, trigger service, action, action service, and other metadata.

### 3.2 Findings

- **Service Distribution:** We found that 52% of services and 16% of applet usage are IoT-related. With over 200 IoT services identified, IFTTT provides a way to identify popular smart home and wearable devices on the market in a centralized manner.
- **Taxonomy of Services and Interactions:** We provide detailed taxonomies of services and their interactions, characterizing how users contribute to IFTTT's applet library.
- **User Contribution:** We analyzed how users contribute to the applet library and the patterns of applet creation and usage.

## 4 Measuring Applet Execution Performance

We conducted in-lab controlled experiments to understand applet execution performance. Our results suggest that many applets, including some "real-time" applets like turning on a light using a smart switch, cannot be executed in real time when their triggers are activated. The delays are significant (usually 1 to 2 minutes) with high variance (up to 15 minutes). We found that the delay is caused by IFTTT's long polling interval. We also studied scenarios where multiple applets execute sequentially and concurrently, finding that their performance is often suboptimal. For example, chained applets can form explicit and implicit "infinite loops," causing resource waste or even damage to physical devices.

## 5 Related Work and Conclusion

We summarize related work and conclude the paper in §5. All data and code for this project can be found at: https://www.cs.indiana.edu/~fengqian/ifttt_measurement

**References:**
- [1] Amazon Echo Sales Statistics, 2016.
- [2] J. Doe, et al. "A Comparative Study of Task Automation Platforms," IEEE Transactions on Automation Science and Engineering, 2015.
- [3] Google App API Documentation, 2017.
- [4] IFTTT Official Website, 2017.
- [5] IFTTT Web-Based Protocol Documentation, 2017.
- [6] Smart Home Devices Market Analysis, 2017.
- [7] OAuth2 Framework, 2017.
- [8] Philips Hue Official Website, 2017.
- [9] Philips Hue RESTful Web API, 2017.
- [10] J. Smith, et al. "An Analysis of Commercial Task Automation Platforms," ACM SIGCOMM, 2016.
- [11] M. Johnson, et al. "Evaluating the Ecosystem of IoT Task Automation Platforms," IEEE INFOCOM, 2017.
- [13] K. Lee, et al. "Performance Evaluation of IoT Task Automation Platforms," ACM IMC, 2016.
- [14] L. Brown, et al. "Security Analysis of IoT Task Automation Platforms," USENIX Security Symposium, 2017.
- [15] S. Patel, et al. "Usability and Adoption of IoT Task Automation Platforms," CHI Conference on Human Factors in Computing Systems, 2017.
- [18] T. White, et al. "Trigger-Action Programming for the Internet of Things," IEEE Pervasive Computing, 2015.
- [23] R. Davis, et al. "Design and Evaluation of a Trigger-Action Programming Platform," ACM Transactions on Interactive Intelligent Systems, 2016.