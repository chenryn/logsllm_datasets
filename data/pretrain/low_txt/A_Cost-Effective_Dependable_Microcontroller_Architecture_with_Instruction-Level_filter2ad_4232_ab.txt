### 优化后的文本

#### 指令流程
- Inst.4
- Inst.5
- Inst.6
- Inst.7
- Inst.o (JMP)
- ...
- Inst.p (RTE)
- Inst.7
- Inst.8
- MA WB
- MA WB
- EX
- ID EX MA WB
- IF ID
- MA
- EX
- WB
- IF ID EX MA
- WB
- IF
- ID
- IF
- EX MA WB
- ID EX MA
- IF
- ID
- Cancel & Branch
- IF ID EX
- CPU Returns to Inst.7
- IF ID
- IF
- p-4 p-3 p-2 p-1
- p
- ...
- CPU Reg.File
  - 0
  - 1
  - 2
  - 3
  - 4
  - 5
  - 6
- Backup Reg.File
  - -2
  - -1
  - 0
- p-6 p-5 p-4 p-3 p-2
- RCM Soft Error
- RCM Reset
- RCM Soft Error Exception
- ...
- Soft Error
- Rollback State Machine
  - BACKUP 
  - RESET 
  - RCM_ROLLBACK
  - ...
  - BACKUP 
  - RCM
  - Reset Term
  - RCM Soft Error Exception Term
- About 70 CPU Cycles
- **Figure 5.** Rollback控制流在RCM中的实现

#### 面积开销
与RCM模块冗余方法相比，面积开销会更小，因为RCM需要许多逻辑电路区域，如寄存器文件和一些队列。

#### 3.3 ECC RAM的回滚架构
ECC可以纠正RAM中的单比特软错误，但诸如综合生成等事件会导致较大的延迟开销。根据我们的经验，延迟开销约为25-30%，并且我们需要为CPU从RAM中读取数据增加额外的读访问周期。在本研究中，我们开发了一种使用第3.2.1节描述的回滚方法的ECC纠错架构。如图6所示，CPU通过写缓冲区和校验位生成将数据写入RAM。CPU还直接从RAM读取数据，而不经过综合生成。纠错模块（ECM）由一个ECM状态机块和一个正确数据写回控制块组成。如果在CPU读取访问中检测到单比特错误，则向RCM和ECM输出ECC错误信号。然后，通过正确的数据写回控制选择纠正的数据。由于ECC RAM在纠错前读取的影响，不会因综合生成而创建关键时序路径。

**图7** 显示了检测到RAM ECC错误时的时间图。正常的CPU访问在两个周期内执行，分别为读周期1-2或写周期3-4。在周期6中，当CPU从RAM地址读取数据“D3”时，在RAM中检测到单比特ECC错误。结果，ECM状态机变为ECC错误（E.E），回滚状态机变为DETECT。在周期7中，ECM状态机变为ECM访问（E.A），访问RAM的错误地址，并在下一个周期8中，ECM状态机处于正确数据写回状态（C.W）。在这种C.W状态下，ECM将由综合生成电路纠正的数据写回到错误的RAM地址。这个写回过程纠正了RAM中的单比特软错误。然后，回滚状态机变为CPU重置，并重置CPU。之后，按照第3.2.1节和图3所述执行回滚过程。回滚过程完成后，CPU在周期c3中重新开始读取访问“R3”，并继续执行。

#### 3.4 回滚架构的限制
我们的回滚架构有一些限制。我们实现了所提出的架构并在四步过程中进行了评估，如图8所示。
- **步骤1**：我们使用了一个原始微控制器“Original-MCU”，它包含一个32位五级流水线RISC CPU核心，用Verilog-HDL在寄存器传输级（RTL）进行描述。内存控制器（MEMC）和其他部分也是RTL随机逻辑电路。内置RAM是一个硬件宏块。
- **步骤2**：我们设计了新的模块RCM、ERM和ECM，并将其集成到Original-MCU中，同时向RAM添加了ECC位。我们使用最简单的ECC实现，即为RAM中的每个字节计算海明码。我们将这种微控制器称为“PRE-MCU”。它尚未包括软错误检测逻辑电路和错误检测信号。我们还对PRE-MCU应用静态时序分析（STA）以获得时序报告。
- **步骤3**：将PRE-MCU RTL和时序报告输入到自动生成功能EDA工具。该工具为PRE-MCU RTL生成优化的软错误检测逻辑电路，并输出一个新的微控制器RTL，“GEN-MCU”。
- **步骤4**：我们合成了这个GEN-MCU，并获得了面积和频率报告。最后，为了评估RCM、ERM和ECM的效果，我们使用EEMBC基准测试运行逻辑仿真，并获得了平均故障间隔时间（MTBF）报告。

#### 4.1 面积和频率开销
为了验证自动生成功能软错误检测逻辑电路工具的有效性，我们设计了表1所示的五种架构配置。
- **(A) Original-MCU** 和 **(B) PRE-MCU** 对应于图8。
- **(C) GEN-MCU P** 仅为每个F/F生成奇偶校验。
- **(D) GEN-MCU R** 仅为每个F/F生成冗余。
- **(E) GEN-MCU O** 使用开发的EDA工具生成优化的检测电路。

逻辑合成得到的面积和频率结果如图9所示。首先，(B) 的面积开销约为40%。这里，(B) 可以保持(A) 的频率，因为分支读数据路径从ECC关键路径分离，但(B) 不包括软错误检测信号和检测时序路径。接下来，在(C) 中，面积开销约为62%（生成电路的开销为32%），频率为69%，因为奇偶校验生成的影响。(D) 的面积开销为63%（生成电路的开销为33%），但(D) 的频率仅下降了10%。(E) 使用优化技术，面积开销低于59%（生成电路的开销低于27%），频率开销低于9%。ERM的面积约为0.10%，在图表中几乎不可见。

从(A) 到(E) 的面积和频率之间的权衡如图10所示。此图显示，随着我们向左上移动，开销减少。图10中添加了两个数据点：带有ECC RAM的DMR和TMR。这两个方案并未在本研究中实现，只是预测值。图10显示，我们的方法在面积和频率之间取得了良好的权衡。此外，在UltraSPARC-III平台上，(E) 的软错误检测逻辑电路生成时间仅为约20秒，这意味着该工具能够快速设计高可靠性的微控制器。

#### 4.2 带有回滚架构和软错误注入的随机逻辑电路的MTBF结果
我们评估了具有所提议的回滚架构的微控制器的MTBF。我们在可能发生软错误的环境中使用了(A) Original-MCU (Original) 和 (E) GEN-MCU O (GEN-MCU) 的微控制器RTL，如第4.1节所述。我们使用了八个EEMBC基准测试进行软错误逻辑仿真。我们假设以下活动软错误：片上总线上的意外数据传输、CPU PC的不确定、非法指令循环的迭代以及回滚失败。在此评估中，软错误活动率和MTBF周期定义如下：

\[ \text{Soft Error Active[%]} = \frac{\text{Simulation Failure}}{\text{Soft Error Injection}} \times 100 \]

\[ \text{MTBF [cycle]} = \frac{\text{Total Run Cycle}}{\text{Simulation Failure}} \]

当软错误被注入并激活时，逻辑仿真停止，然后重新启动相同的基准测试。

---

希望这些优化使您的文本更加清晰、连贯和专业。如果有任何进一步的修改需求，请告诉我！