### 小结

在今天的分享中，我们主要讨论了限流的目的、策略和算法。首先，我们明确了限流的主要目标是防止系统因过载而出现故障。随后，介绍了几种常用的限流策略，并深入探讨了几种关键的限流算法：计数器、队列、漏斗以及令牌桶。接着，我们还分析了如何根据响应时间来调整限流量度。最后，总结了设计一个有效的限流机制时需要考虑的关键点。下一篇文章将聚焦于降级设计的话题。希望这些内容能对你有所帮助。我们也非常欢迎你分享自己实施过的任何限流方法。

文末附上了《分布式系统设计模式》系列文章目录供参考，希望你能从中找到感兴趣的内容。
- **弹力设计篇**
  - [认识故障与弹性设计](https://time.geekbang.org/column/article/3912)
  - [隔离设计: Bulkheads](https://time.geekbang.org/column/article/3917)
  - [异步通信设计](https://time.geekbang.org/column/article/3926)
  - [幂等性设计](https://time.geekbang.org/column/article/4050)
  - [服务状态管理](https://time.geekbang.org/column/article/4086)
  - [补偿事务](https://time.geekbang.org/column/article/4087)
  - [重试机制](https://time.geekbang.org/column/article/4121)
  - [熔断器设计](https://time.geekbang.org/column/article/4241)
  - [限流设计](https://time.geekbang.org/column/article/4245)
  - [降级设计](https://time.geekbang.org/column/article/4252)
  - [弹性设计总结](https://time.geekbang.org/column/article/4253)

- **管理设计篇**
  - [分布式锁](https://time.geekbang.org/column/article/5175)
  - [配置中心](https://time.geekbang.org/column/article/5819)
  - [边车模式](https://time.geekbang.org/column/article/5909)
  - [服务网格](https://time.geekbang.org/column/article/5920)
  - [网关模式](https://time.geekbang.org/column/article/6086)
  - [部署升级策略](https://time.geekbang.org/column/article/6283)

- **性能设计篇**
  - [缓存技术](https://time.geekbang.org/column/article/6282)
  - [异步处理](https://time.geekbang.org/column/article/7036)
  - [数据库扩展方案](https://time.geekbang.org/column/article/7045)
  - [秒杀活动优化](https://time.geekbang.org/column/article/7047)
  - [边缘计算](https://time.geekbang.org/column/article/7086)

---

### 降级设计

降级设计（Degradation）的核心在于解决资源有限与访问量激增之间的矛盾。当面临这种挑战时，在确保整体系统稳定性的前提下，可能需要暂时牺牲某些非核心功能或降低服务质量。例如，在大型公共活动中，为了加快人群疏散速度，公共交通工具可能会免费提供服务，尽管这会导致一定的经济损失，但相较于潜在的安全风险和社会成本而言，这样的措施显得十分必要且明智。

类似地，在IT系统中实施降级策略时，通常会考虑以下几个方面：
- **一致性水平**：从强一致性转向最终一致性。
- **次要功能关闭**：暂停非关键服务以释放更多资源。
- **简化功能**：减少部分业务逻辑复杂度或者限制数据返回范围。

#### 降低一致性

大多数情况下，并非所有应用都必须保持严格的实时同步。通过放宽对一致性的要求，可以显著提升系统的吞吐能力和响应速度。具体实现方式包括但不限于：
- **流程异步化**：如电商订单处理过程中，可以将支付环节异步执行，采用货到付款的方式替代在线支付，从而缓解高峰期的压力。
- **数据一致性减弱**：利用缓存减轻后端存储压力，对于一些非敏感信息仅显示简化的状态而非精确数值。

在采取上述措施的同时，应向用户做出适当提示，说明当前正在进行的服务调整及其原因，以此维持良好的用户体验。