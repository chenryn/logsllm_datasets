### Browser Security Warnings

Browsers display warnings when an HTTPS connection fails for specific reasons. One study found that out of 57 users, 30 clicked through and logged into a simulated banking website despite it displaying a certificate warning page [90]. Another study examined users' understanding of three common warnings: expired certificates, certificate chains not terminating in a trusted anchor, and certificates not matching the visited site’s domain. Of 409 participants, only 36% understood the expired certificate warning, 28% understood the unknown CA warning, and 40% understood the mismatched domain warning [100]. Among those who did not understand the warnings, just over a third claimed they would ignore them. For those who did understand, 63% would ignore the expired certificate warning, 33% the unknown CA warning, and 17% the mismatched domain warning. The study authors reworded the warnings, which improved understandability, but users still exposed themselves to man-in-the-middle (MITM) attacks. A replication of this study found that users ignored warnings more frequently than they self-reported, with no significant difference between ignoring rewritten warnings and the browser's default warnings [95].

### Mixed Content Warnings

Another prevalent warning not considered in the above studies is mixed content, which occurs when dynamic content from multiple sources is embedded into a single website. When a site is accessed over HTTPS, browsers issue a mixed scripting warning if the site embeds any scripting resources (e.g., JavaScript, CSS, or SWF [55]) that are not accessed over HTTPS. This is critical because the script runs with the privileges of the HTTPS site. Some browsers, like Chrome, follow the lead of the Gazelle research browser [106] and actively block insecurely loaded scripts. Non-scripting resources (e.g., static images) or resources loaded into an iframe typically generate a less severe mixed content warning, such as an https:// cue but no lock or a lock with a caution sign. Clicking on the cue displays the warning. If an Extended Validation (EV) certified site embeds Domain Validated (DV) certified scripting, the EV cues are still displayed, which can be exploited (see Section IV-A above) [112], [96].

### Mobile Browsers

With the rise of smartphones and tablets, users also access HTTPS sites on mobile browsers. However, mobile browsers often conform less to HTTPS user interface guidelines than desktop browsers, offering limited support for displaying certificate/connection details, distinguishing EV certificates, or warning users about mixed content [19].

### HTTPS Form Submissions

A common practice is to include a login box on an HTTP page but arrange for the login information to be submitted over HTTPS. This avoids the overhead of obtaining the certificate and establishing a TLS connection for users who visit the page without logging in. Browsers generally warn users (at least the first time) when any information is not submitted over HTTPS. Since many submissions do not require security (e.g., comments, posts, feedback), it is reasonable for users to disable this warning. Beyond this, users receive no indication that sensitive information will be transmitted over HTTP or HTTPS, or to which hostname. Among the Alexa top sites with login pages, 19 of 125 offered a post-to-HTTPS login page, while 56 of 125 used only HTTP [97].

### Security Issues (Indication and Interpretation of Trust)

#### Stripping TLS

Given users' inattentiveness to HTTPS security indicators and warnings, a MITM adversary may thwart HTTPS in a technically detectable manner but one unlikely to be noticed. For users being redirected to an HTTPS site, the most effective attack is to simply relay pages back to the user over HTTP—an attack known as SSL stripping after the sslstrip tool [71], although it had been noted earlier [79]. On login pages served over HTTP, the result of this attack is indistinguishable without examining the page’s source code. On login pages typically served over HTTPS, the user must recognize the difference or generally refuse to log into pages served over HTTP (which precludes using post-to-HTTPS sites).

#### Spoofing Browser Chrome

An important aspect of security indicators is that they are placed in the browser chrome, ensuring that the displayed cue is under the browser’s control and not influenced by the content of the webpage (this has been called a ‘trusted path’ [109]). As websites have gained more power through client-side scripting and control over how a browser window is displayed, various ‘web spoofing’ attacks [44] enable the website to interfere with how a user perceives the browser’s security cues. For example, a well-positioned pop-up window without any chrome may overlap security cues on the underlying page [69] or simulate a browser window with complete browser chrome within the content of the page [14], [109], [57]. In one study, a site implementing the latter attack was classified as legitimate by 63% of users [57]. Today’s desktop browsers typically force pop-up windows into new tabs, maintaining a constant chrome. In many mobile browsers, websites can position the address bar so that it is hidden, enabling spoofing of security indicators [43]. A suggested solution, though not commercially adopted, is a dynamically changing browser chrome [109], [34].

Users may also falsely attribute an HTTPS connection to a lock displayed somewhere other than the chrome, e.g., on the page content [35] or in the site’s favicon [72]. Among the Alexa top sites with login pages, 29 of 125 displayed a lock in the site content (including 70% of banks) or favicon [97].

#### Conceding a Warning

A MITM adversary may choose to substitute a certificate with an untrusted chain, hoping that users will click through or otherwise ignore the warning. This was exemplified in the previously mentioned attack attributed to the Syrian Telecom Ministry.

### Security Enhancements to CA/B Model

Section IV reviewed the spectrum of issues with the CA/B trust model. Here we evaluate a collection of the most prominent proposals to enhance aspects of the trust model, deconstructing and evaluating their core ideas. Some of these ideas have been incorporated into one or two browser platforms; others can be achieved with browser extensions or plugins.

#### Comparative Evaluation of Primitives to Improve the CA/Browser Model

| Primitive | Protects Client Credential | Intermediate CAs Visible | Affirms POST-to-HTTPS | Trusted Entity | Responsive Revocation | Detects Local MITM | Traceability | Reduces Traceability | Updatable Pins | Detects MITM | Detects TLS Stripping | No New Deployable without DNSSEC | Status Signalled Completely | No Extra Communications | No Server-Side Changes | User Decisions | Auth’n Tokens | No False-Rejects | Internet Scalable | No New |
|-----------|---------------------------|--------------------------|-----------------------|----------------|-----------------------|--------------------|--------------|----------------------|----------------|---------------|----------------------|---------------------------------|-------------------------------|-------------------------|------------------------|------------------|----------------|----------------|-----------------|--------|
| A         | •                         | •                        | ◦                     | •              | •                     | •                  | •            | •                    | •              | •             | •                    | •                               | •                             | •                       | •                      | •                | •               | •               | •               | •      |
| B         | •                         | •                        | ◦                     | •              | •                     | •                  | •            | •                    | •              | •             | •                    | •                               | •                             | •                       | •                      | •                | •               | •               | •               | •      |
| C         | •                         | •                        | ◦                     | •              | •                     | •                  | •            | •                    | •              | •             | •                    | •                               | •                             | •                       | •                      | •                | •               | •               | •               | •      |

This table evaluates the potential offered by generic primitives and may differ from concrete instantiations of proposals.