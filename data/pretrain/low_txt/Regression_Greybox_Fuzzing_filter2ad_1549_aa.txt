# Regression Greybox Fuzzing

**Authors:**
- Xiaogang Zhu
- Marcel Böhme

**Affiliations:**
- Xiaogang Zhu: Swinburne University of Technology & CSIRO’s Data61, Australia
- Marcel Böhme: Monash University, Australia

## Abstract

The principle "What you change is what you fuzz" is supported by our empirical study of all fuzzer-generated bug reports in OSSFuzz. We found that four out of every five bugs (77% of 23,000 bugs) are introduced by recent code changes, classifying them as regressions. For a newly added project, an initial burst of new reports, averaging 2-3 bugs per day, is typically observed. After this initial phase and the elimination of most existing bugs, a steady rate of 3-4 bug reports per week persists. This consistent rate can only be explained by an increasing regression rate. Indeed, the probability that a reported bug is a regression (i.e., we could identify the bug-introducing commit) increases from 20% for the first bug to 92% after a few hundred bug reports.

In this paper, we introduce **Regression Greybox Fuzzing (RGF)**, a fuzzing approach that prioritizes code that has been recently or frequently modified. However, it is impractical to fuzz each code commit individually for any active software project. Instead, we propose to fuzz all commits simultaneously, with higher priority given to code present in more (recent) commits. We observe that most code remains unchanged and relatively old. Therefore, we identify methods to strengthen the signal from executed code-of-interest. Additionally, we extend the concept of power schedules to the bytes of a seed and introduce Ant Colony Optimization to allocate more energy to those bytes that promise to generate more interesting inputs.

Our large-scale fuzzing experiment validates our main hypothesis and demonstrates the efficiency of RGF. The experiments were conducted in a reproducible manner within Fuzzbench, an extensible fuzzer evaluation platform. Our experiments involved over 3 CPU-years of fuzzing campaigns and identified 20 bugs in 15 open-source C programs available on OSSFuzz.

## CCS Concepts

- **Security and Privacy**: Software security engineering.

## Keywords

- Greybox fuzzing
- Regression bugs
- Power schedule

## ACM Reference Format

Zhu, X., & Böhme, M. (2021). Regression Greybox Fuzzing. In Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security (CCS '21), November 15-19, 2021, Virtual Event, Republic of Korea. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3460120.3484596

## Copyright Notice

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS '21, November 15-19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-8454-4/21/11. . . $15.00
https://doi.org/10.1145/3460120.3484596