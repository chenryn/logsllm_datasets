以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

[10] Syslog NG. https://www.syslog-ng.com/.

[11] Mathieu Acher, Hugo Martin, Juliana Pereira, Arnaud Blouin, Jean-Marc Jézéquel, Djamel Khelladi, Luc Lesoil, and Olivier Barais. "Learning very large configuration spaces: What matters for Linux kernel sizes." Technical Report HAL-02314830, Inria Rennes - Bretagne Atlantique, 2019.

[12] Ioannis Agadakos, Di Jin, David Williams-King, Vasileios P. Kemerlis, and Georgios Portokalidis. "Nibbler: Debloating binary shared libraries." In Proceedings of the 35th Annual Computer Security Applications Conference (ACSAC), pages 70–83, 2019.

[13] Babak Amin Azad, Pierre Laperdrix, and Nick Nikiforakis. "Less is more: Quantifying the security benefits of debloating web applications." In Proceedings of the 28th USENIX Security Symposium, 2019.

[14] Lars Ole Andersen. "Program analysis and specialization for the C programming language." PhD thesis, University of Copenhagen, 1994.

[15] Apache. "Apache Httpd, 2019." https://httpd.apache.org/.

[16] Nicolai Davidsson, Andre Pawlowski, and Thorsten Holz. "Towards automated application-specific software stacks." In Proceedings of the 24th European Symposium on Research in Computer Security (ESORICS), 2019.

[17] Nicholas DeMarinis, Kent Williams-King, Di Jin, Rodrigo Fonseca, and Vasileios P. Kemerlis. "Sysfilter: Automated system call filtering for commodity software." In Proceedings of the International Conference on Research in Attacks, Intrusions, and Defenses (RAID), 2020.

[18] Henry Hanping Feng, Jonathon T. Giffin, Yong Huang, Somesh Jha, Wenke Lee, and Barton P. Miller. "Formalizing sensitivity in static analysis for intrusion detection." In Proceedings of the IEEE Symposium on Security & Privacy (S&P), pages 194–208, 2004.

[19] Stephanie Forrest, Steven A. Hofmeyr, Anil Somayaji, and Thomas A. Longstaff. "A sense of self for Unix processes." In Proceedings of the IEEE Symposium on Security & Privacy (S&P), pages 120–128, 1996.

[20] Tal Garfinkel, Ben Pfaff, and Mendel Rosenblum. "Ostia: A delegating architecture for secure system call interposition." In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2004.

[21] Masoud Ghaffarinia and Kevin W. Hamlen. "Binary control-flow trimming." In Proceedings of the 26th ACM Conference on Computer and Communications Security (CCS), 2019.

[22] Seyedhamed Ghavamnia, Tapti Palit, Azzedine Bennameur, and Michalis Polychronakis. "Confiner: Automated system call policy generation for container attack surface reduction." In Proceedings of the International Conference on Research in Attacks, Intrusions, and Defenses (RAID), 2020.

[23] Arie Gurfinkel and Jorge A. Navas. "A context-sensitive memory model for verification of C/C++ programs." In Proceedings of the International Static Analysis Symposium, pages 148–168. Springer, 2017.

[24] Andreas Gustafsson. "Egypt." https://www.gson.org/egypt/egypt.html.

[25] Ashish Gehani, Hashim Sharif, Muhammad Abubakar, and Fareed Zaffar. "Trimmer: Application specialization for code debloating." In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering (ASE), 2018.

[26] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. "Effective program debloating via reinforcement learning." In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS), 2018.

[27] Michael Hind. "Pointer analysis: Haven't we solved this problem yet?" In Proceedings of the ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE), pages 54–61, 2001.

[28] Gerard J. Holzmann. "Code inflation." IEEE Software, (2):10–13, 2015.

[29] Kapil Jain and R. Sekar. "User-level infrastructure for system call interposition: A platform for intrusion detection and confinement." In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2000.

[30] Yufei Jiang, Can Zhang, Dinghao Wu, and Peng Liu. "Feature-based software customization: Preliminary analysis, formalization, and methods." In Proceedings of the 17th IEEE International Symposium on High Assurance Systems Engineering (HASE), 2016.

[31] Vasileios P. Kemerlis. "Protecting Commodity Operating Systems through Strong Kernel Isolation." PhD thesis, Columbia University, 2015.

[32] Vasileios P. Kemerlis, Michalis Polychronakis, and Angelos D. Keromytis. "ret2dir: Rethinking kernel isolation." In Proceedings of the 23rd USENIX Security Symposium, pages 957–972, 2014.

[33] Vasileios P. Kemerlis, Georgios Portokalidis, and Angelos D. Keromytis. "kguard: Lightweight kernel protection against return-to-user attacks." In Proceedings of the 21st USENIX Security Symposium, 2012.

[34] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis. "Configuration-driven software debloating." In Proceedings of the 12th European Workshop on Systems Security, 2019.

[35] Christopher Kruegel, Engin Kirda, Darren Mutz, William Robertson, and Giovanni Vigna. "Automating mimicry attacks using static binary analysis." In Proceedings of the USENIX Security Symposium, 2005.

[36] Jakub Kuderski, Jorge A. Navas, and Arie Gurfinkel. "Unification-based pointer analysis without oversharing." In Proceedings of the Formal Methods in Computer Aided Design (FMCAD), pages 37–45. IEEE, 2019.

[37] Anil Kurmus, Reinhard Tartler, Daniela Dorneanu, Bernhard Heinloth, Valentin Rothberg, Andreas Ruprecht, Wolfgang Schroder-Preikschat, Daniel Lohmann, and Rudiger Kapitza. "Attack surface metrics and automated compile-time OS kernel tailoring." In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2013.

[38] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Shenefiel, Rui Ma, Yuewu Wang, and Qi Li. "SPEAKER: Split-phase execution of application containers." In Proceedings of the 12th Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), pages 230–251, 2017.

[39] Yiwen Li, Brendan Dolan-Gavitt, Sam Weber, and Justin Cappos. "Lock-in-pop: Securing privileged operating system kernels by keeping on the beaten path." In Proceedings of the USENIX Annual Technical Conference (ATC), 2017.

[40] Steven McCanne and Van Jacobson. "The BSD packet filter: A new architecture for user-level packet capture." In Proceedings of the USENIX Winter Conference, 1993.

[41] Shachee Mishra and Michalis Polychronakis. "Shredder: Breaking exploits through API specialization." In Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC), 2018.

[42] Shachee Mishra and Michalis Polychronakis. "Saffire: Context-sensitive function specialization against code reuse attacks." In Proceedings of the 5th IEEE European Symposium on Security and Privacy (EuroS&P), 2020.

[43] Collin Mulliner and Matthias Neugschwandtner. "Breaking payloads with runtime code stripping and image freezing." Black Hat USA, 2015.

[44] Chetan Parampalli, R. Sekar, and Rob Johnson. "A practical mimicry attack against powerful system-call monitors." In Proceedings of the ACM Symposium on Information, Computer and Communications Security (ASIACCS), pages 156–167, 2008.

[45] Fernando Magno Quintao Pereira and Daniel Berlin. "Wave propagation and deep propagation for pointer analysis." In Proceedings of the International Symposium on Code Generation and Optimization (CGO), pages 126–135, 2009.

[46] Marios Pomonis, Theofilos Petsios, Angelos D. Keromytis, Michalis Polychronakis, and Vasileios P. Kemerlis. "kRˆX: Comprehensive kernel protection against just-in-time code reuse." In Proceedings of the 12th European Conference on Computer Systems (EuroSys), pages 420–436, 2017.

[47] Chris Porter, Girish Mururu, Prithayan Barua, and Santosh Pande. "Blankit library debloating: Getting what you want instead of cutting what you don’t." In Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), pages 164–180, 2020.

[48] Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo Kim, and Wenke Lee. "RAZOR: A framework for post-deployment software debloating." In Proceedings of the 28th USENIX Security Symposium, 2019.

[49] Anh Quach, Rukayat Erinfolami, David Demicco, and Aravind Prakash. "A multi-OS cross-layer study of bloating in user programs, kernel and managed execution environments." In Proceedings of the Workshop on Forming an Ecosystem Around Software Transformation (FEAST), pages 65–70, 2017.

[50] Anh Quach and Aravind Prakash. "Bloat factors and binary specialization." In Proceedings of the 3rd ACM Workshop on Forming an Ecosystem Around Software Transformation (FEAST), pages 31–38, 2019.

[51] Anh Quach, Aravind Prakash, and Lok Yan. "Debloating software through piece-wise compilation and loading." In Proceedings of the 27th USENIX Security Symposium, pages 869–886, 2018.

[52] Mohan Rajagopalan, Matti Hiltunen, Trevor Jim, and Richard Schlichting. "Authenticated system calls." In Proceedings of the International Conference on Dependable Systems and Networks (DSN), pages 358–367, 2005.

[53] Linhai Song and Xinyu Xing. "Fine-grained library customization." In Proceedings of the 1st ECOOP International Workshop on Software Debloating and Delayering (SALAD), 2018.

[54] Bjarne Steensgaard. "Points-to analysis in almost linear time." In Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 32–41, 1996.

[55] Yulei Sui and Jingling Xue. "SVF: Interprocedural static value-flow analysis in LLVM." In Proceedings of the 25th International Conference on Compiler Construction, 2016.

[56] Yulei Sui, Ding Ye, and Jingling Xue. "Detecting memory leaks statically with full-sparse value-flow analysis." IEEE Transactions on Software Engineering, 40(2):107–122, 2014.

[57] Kanchi Gopinath, Suparna Bhattacharya, and Mangala Gowri Nanda. "Combining concern input with program analysis for bloat detection." In Proceedings of the ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA), 2013.

[58] David Wagner and Drew Dean. "Intrusion detection via static analysis." In Proceedings of the IEEE Symposium on Security & Privacy, pages 156–168, 2001.

[59] Zhiyuan Wan, David Lo, Xin Xia, Liang Cai, and Shanping Li. "Mining sandboxes for Linux containers." In Proceedings of the 10th IEEE International Conference on Software Testing, Verification and Validation (ICST), pages 92–102, 2017.

[60] Jinpeng Wei and Calton Pu. "TOCTTOU vulnerabilities in UNIX-style file systems: An anatomical study." In Proceedings of the USENIX Conference on File and Storage Technologies (FAST), 2005.

[61] Tatu Ylönen. "SSH Agent." https://www.ssh.com/ssh/agent.

[62] Dinghao Wu, Yufei Jiang, and Peng Liu. "Jred: Program customization and bloatware mitigation based on static analysis." In Proceedings of the 40th Annual Computer Software and Applications Conference (ACSAC), 2016.

[63] Tian Lan, Yurong Chen, and Guru Venkataramani. "Damgate: Dynamic adaptive multi-feature gating in program binaries." In Proceedings of the Workshop on Forming an Ecosystem Around Software Transformation (FEAST), 2017.

[64] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M. Azab, and Ruowen Wang. "PeX: A permission check analysis framework for Linux kernel." In Proceedings of the 28th USENIX Security Symposium, pages 1205–1220, 2019.

[65] Zhi Zhang, Yueqiang Cheng, Surya Nepal, Dongxi Liu, Qingni Shen, and Fethi Rabhi. "KASR: A reliable and practical approach to attack surface reduction of commodity OS kernels." In Proceedings of the International Conference on Research in Attacks, Intrusions, and Defenses (RAID), pages 691–710, 2018.

[66] Xiangyu Zhang, Zhongshu Gu, Brendan Saltaformaggio, and Dongyan Xu. "Face-change: Application-driven dynamic kernel view switching in a virtual machine." In Proceedings of the 44th IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2014.

**附录**

**指针分析的不精确性**

在第4.2节和第5.1节中，我们讨论了上下文敏感性和路径敏感性如何导致过度近似问题，并使Andersen分析的结果不精确。我们的经验表明，缺乏上下文敏感性和路径敏感性是这种不精确性的主要因素，但其他因素也会导致指针分析结果的过度近似。

**字段敏感性**

SVF库提供的指针分析是字段敏感的。字段敏感性允许对结构体中的每个字段进行唯一建模，这对分析的精度至关重要。例如，在Apache Httpd中，cleanup_t类型包含用于清理各种堆上分配内存的函数指针。为了区分该结构中的不同函数指针，我们必须将cleanup_t结构的各个字段建模为字段敏感。然而，在某些情况下，SVF为了简化实现和减少分析时间而放弃了字段敏感性。

**数组索引敏感性**

SVF对Andersen算法的实现不是数组索引敏感的。数组的各个元素没有被唯一建模。因此，如果多个结构体对象存储在一个数组中，这些结构体对象就会失去字段敏感性，因为数组元素本身没有被唯一建模。

例如，ap_listen_rec类型的对象存储在指针数组listen_buckets中。ap_listen_rec类型有一个accept_func字段，该字段存储在accept事件时调用的函数指针。由于这些对象存储在一个索引不敏感的数组中，它们失去了字段敏感性，SVF无法区分一个ap_listen_rec对象的accept_func字段与其他对象的accept_func字段。

**正权重循环**

由于上下文不敏感性，特别是对于内存分配包装器，约束图中可能存在循环。循环消除是一种流行的指针分析优化——其核心思想是约束图中的循环节点共享相同的解，因此可以合并成一个节点。然而，在字段敏感分析中，循环消除并不简单，因为约束节点之间的边是有权重的（边的权重是访问的字段索引）。

此外，SVF实现了Andersen算法的一种优化，称为波传播 [45]。这种优化要求约束图按拓扑排序，并且没有环。由于这一要求，在每次迭代结束时，SVF会将涉及循环的字段敏感结构体对象转换为字段不敏感。

---

希望这能帮助你更好地组织和呈现你的参考文献。