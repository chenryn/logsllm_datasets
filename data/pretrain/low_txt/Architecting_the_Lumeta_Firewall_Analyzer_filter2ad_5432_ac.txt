### Configuration Analysis and Demonstration

For demonstration purposes, we recreated the key elements of a risky configuration on a lab machine and ran the resulting files through the Lumeta Firewall Analyzer (LFA). The report excerpt shown here is from the lab machine. The full web-based sample report is available online from [Lum01].

#### Figure 1: Original Rule-Base in HTML

In Figure 1, we see a web page displaying a Check Point FW-1 rule-base, which serves as the LFA's starting point. The only processing done to create this page was to convert Check Point's configuration files into HTML, rendered in a format similar to that of FW-1’s management module, including user-defined colors for various objects. We used an improved version of the `fwrules50` program [XOS+00] for this conversion.

At first glance, the rule-base appears simple, protecting two machines (labeled "one" and "two"). Machine one seems to be a web server, and machine two appears to be a Usenet (nntp) news server. The policy is quite lenient on outbound services (rule 3 allows all types of TCP outbound traffic), but seems reasonable for inbound connections, allowing only HTTP, HTTPS, SSH, and NNTP.

#### Figure 2: Expanded Rule-Base in LFA Intermediate Language

In Figure 2, we see an HTML rendering of the same rule-base, now in the LFA’s intermediate language, as discussed in Section 2.3. This figure shows the results of the Check-Point-to-LFA front-end conversion utility, `ckp2lfa`, post-processed into an HTML-based report called the "Expanded Rules report" by the back-end utilities.

The rule-base now includes several additional rules derived from Check Point "properties," which are controlled through a separate tab in Check Point’s management module. These properties, selected by the administrator, create implicit rules that are inserted into the rule-base at specific positions. The `ckp2lfa` front-end converts these implicit rules into explicit equivalents and inserts them in their correct positions in the rule-base.

Figure 2 highlights the effects of properties governing DNS and ICMP traffic, and the property controlling remote management access to the firewall itself. After `ckp2lfa` converts the implicit rules into explicit ones, we can see that rules 1, 3, and 10 are wide open (allowing traffic from anywhere to anywhere). Unfortunately, these rules represent the effects of Check Point FW-1’s default settings. Based on client configuration files we have seen, leaving these properties at their default setting is a common mistake among FW-1 administrators.

Another piece of information that becomes clear after the `ckp2lfa` conversion is that the firewall is performing Network Address Translation (NAT) on the address of machine one. Rules 4–8 show that machine one has both a valid (routable) IP address and a private IP address, with the firewall translating between the two based on the direction of the packets.

#### Figure 3: Firewall Connectivity Diagram

The next step in the processing involves the `route2hos` front-end, which converts the firewall’s routing table into a Firmato MDL firewall connectivity file. Instead of showing the firewall connectivity file itself, Figure 3 provides a graphical representation of the firewall connectivity, derived from the MDL file using the graph visualization tool `dot` [GKNV93] [Dot01]. Figure 3 is entirely machine-generated, with no manual tweaking. It shows the IP addresses behind each of the firewall’s three internal interfaces. Interface `if_2` is connected to an RFC 1918 private IP address subnet, with a single routable IP address added (the valid IP address of machine one, which is NATed). The rest of the IP address space, including all of the Internet, is behind interface `if_0`.

#### Figure 4: Analysis by Service: Incoming Report

Once the Check Point configuration files have been converted to the LFA intermediate language, and the routing table has been converted into an MDL network firewall connectivity file, the LFA simulates the configured policy. This is done by the core query engine (Section 2.2). The output of the core engine is then rendered in HTML by the back-end utilities, which also create cross-links between various components of the report.

In Figure 4, we see a portion of the "Analysis by service: Incoming" HTML-based report, one of the four reports that LFA creates. The figure shows the results of the query "Outside ! Inside : netbios," meaning "Can NetBIOS traffic cross the firewall from the Outside to the Inside?"

Surprisingly, the report indicates that NetBIOS traffic is allowed from anywhere on the Outside to machine two. The figure displays the user-defined name ("two") alongside the result of a reverse DNS lookup on the IP address of that machine (recall Section 2.5). We can see that the culprit rule allowing NetBIOS traffic through is rule number 9. All underlined values in Figure 4 are hyperlinks. Clicking on the "9" link brings the user to the Expanded Rules report (Figure 2), with rule 9 highlighted. Looking back at Figure 2, we see that rule 9 indeed refers to machine two, but the service listed is called "nntp services," not NetBIOS.

#### Figure 5: Services Report

Clicking on the "nntp services" link from the Expanded Rules report (Figure 2) brings the user to the Services report, a relevant portion of which is shown in Figure 5. We can see that the definition of "nntp services" has two components: one with TCP on destination port 119 (the correct definition) and one with TCP on source port 119. The latter definition is very risky and is the cause for NetBIOS (and any other TCP service) being allowed through the firewall. This is because the choice of source port is completely under the control of the sender of the packet. An attacker could set the source port to 119 and the destination port to 139 (NetBIOS), and the firewall would let the packet through based on its source port, allowing it to access the NetBIOS port on the target machine. This is part of a hacking technique known as "firewalking," often done using source port 53 (DNS), which is frequently open [GS98].

### Remarks

- **Manual Inspection Vulnerability**: A manual inspection of the rule-base shown in Figure 1, even by an expert auditor, is very likely to miss the vulnerability demonstrated by the LFA. The service name listed in the rule (nntp services) makes sense. Even if the auditor checks the definition of the service, they would find that the port number (119) is correct but in the wrong column.
- **Firewall Probe Limitations**: Similarly, a firewall probe by an active vulnerability test tool would probably also miss the vulnerability. Unlike the LFA, such a tool cannot test every possible combination of IP addresses and port numbers and would have no special reason to test the particular combination of source port 119 and destination port 139.
- **Administrator Error**: We believe the mistake in the definition of "nntp services" is due to the firewall administrator not fully understanding the implications of stateful inspection. They may have been more familiar with configuring stateless packet filters, such as router access-control-lists. A stateful firewall (like Check Point FW-1) automatically allows returning packets of an open TCP session, while a stateless access-control-list requires a separate rule for the returning packets, filtered based on the source port. The erroneous component of the "nntp services" definition resembles a stateless rule allowing the returning packets through the firewall.

### Conclusions

The Lumeta Firewall Analyzer (LFA) is a novel, multi-vendor tool that simulates and analyzes the policy enforced by a firewall. The LFA takes the firewall’s configuration files and routing table, parses them, and simulates the firewall’s behavior against all possible packets. The result is an explicit, cross-linked, HTML-based report showing all types of traffic allowed in from the Internet and all types of traffic allowed out.

### Acknowledgments

This project is a team effort, and many people have contributed to the evolution of LFA, whether in ideas, algorithms, or code. I gratefully acknowledge the contributions of Yair Bartal, Sudip Bhattachariya, Steve Branigan, Hal Burch, Diane Burley-McGlue, Bill Cheswick, Terry Lieb, Tom Limoncelli, Ryan Martin, Alain Mayer, Kobi Nissim, Karl Siil, Bruce Wilner, and Elisha Ziskind.

### References

- [Bel99] S. M. Bellovin. Distributed firewalls. ;login:, pages 39–47, November 1999.
- [Bla00] BlackICE Defender. Network ICE, 2000. http://www.networkice.com/products/blackice_defender.html/
- [BMNW99] Y. Bartal, A. Mayer, K. Nissim, and A. Wool. Firmato: A novel firewall management toolkit. In Proc. 20th IEEE Symp. on Security and Privacy, pages 17–31, Oakland, CA, May 1999.
- [Che97] Check Point FireWall-1, version 3.0. White paper, June 1997. http://www.checkpoint.com/products/whitepapers/wp30.pdf
- [CSS00] Cisco secure scanner 2.0, 2000. http://www.cisco.com/warp/public/cc/pd/sqsw/nesn/index.shtml
- [Dot01] Graphviz - open source graph drawing software. 2001. http://www.research.att.com/sw/tools/graphviz/
- [GKNV93] E. R. Gansner, E. Koutsofios, S. C. North, and K.-P. Vo. A technique for drawing directed graphs. IEEE Transactions on Software Engineering, 19(3):214–230, 1993.
- [GS98] D. Goldsmith and M. Schiffman. Firewalking: A traceroute-like analysis of IP packet responses to determine gateway access control lists. White paper, Cambridge Technology Partners, 1998. http://www.packetfactory.net/firewalk/
- [IKBS00] S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M. Smith. Implementing a distributed firewall. In Proc. 7th ACM Conf. Computer and Communications Security (CCS), Athens, Greece, November 2000.
- [IOS00] Cisco IOS feature firewall set, 2000. http://www.cisco.com/univercd/cc/td/doc/pcat/iofwfts1.htm
- [ISS00] Internet security systems: Internet scanner, 2000. http://documents.iss.net/literature/InternetScanner/is_ps.pdf
- [LMF99] Lucent managed firewall, version 3.0, 1999. http://www.lucent.com/iss/html/technical.html
- [Lum01] Lumeta firewall analyzer, 2001. http://www.lumeta.com/solution_firewall.html
- [MWZ00] A. Mayer, A. Wool, and E. Ziskind. Fang: A firewall analysis engine. In Proc. IEEE Symp. on Security and Privacy, pages 177–187, Oakland, CA, May 2000.
- [PIX97] Cisco’s PIX firewall series and stateful firewall security. White paper, 1997. http://www.cisco.com/warp/public/cc/pd/fw/sqfw500/tech/nat_wp.pdf
- [RGR97] A. Rubin, D. Geer, and M. Ranum. Web Security Sourcebook. Wiley Computer Publishing, 1997.
- [Rus00] R. Russell. IPCHAINS-HOWTO, v1.0.8, July 2000. http://www.linuxdoc.org/HOWTO/IPCHAINS-HOWTO.html
- [XOS+00] W. Xu, S. O’Neal, J. Schoonover, S. Moser, F. Lamar, and G. Grasboeck. fwrules50, 2000. Available from http://www.phoneboy.com/fw1/
- [Zon00] ZoneAlarm 2.1.44. Zone Labs, 2000. http://www.zonelabs.com/

This revised text is more structured, coherent, and professional, with clear headings and references.