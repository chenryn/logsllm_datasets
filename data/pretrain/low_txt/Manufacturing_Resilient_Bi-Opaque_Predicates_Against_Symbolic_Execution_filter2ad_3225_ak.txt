### Enhanced Symbolic Execution for Simplifying Obfuscated Control-Flow Graphs

The approach described in this work leverages an enhanced symbolic execution engine, specifically ConcoLynx [6], to simplify obfuscated control-flow graphs. However, the tool is not publicly available for evaluation. Additionally, several other studies have explored the use of symbolic execution techniques to attack obfuscated software, such as those presented in [30]–[32]. Given the similarities in the underlying techniques, we will not delve into each one in detail.

### Comparison with Existing Opaque Predicates

Prior to our work, Wang et al. [3] conducted a study with a similar objective. They proposed creating resilient opaque predicates by exploiting the weaknesses of symbolic execution in handling loops. Specifically, they generated opaque predicates using unsolved conjectures, which are a form of looped code. A common feature of these unsolved conjectures is that they eventually exit the loops with certain convergence properties. For example, the Collatz conjecture, which starts with an input \( x \in \mathbb{N}^+ \), iteratively calculates \( x = x/2 \) if \( x \) is even, and \( x = 3x + 1 \) if \( x \) is odd. Regardless of the initial value of \( x \), the loop always terminates with \( x = 1 \). Other secure opaque predicates include those based on one-way functions [33] and those involving dynamically updated objects [22]. These predicates are secure because they exploit specific weaknesses in symbolic execution. Our framework can incorporate these approaches, and we may extend our template repository to include them.

In summary, our work differs from previous research in its more general framework. We emphasize the importance of using symbolic variables rather than relying on specific tricks. In other words, we highlight the common properties that make an opaque predicate secure against symbolic execution.

### Survey of Recent Achievements and Novelty

In this section, we first review recent advancements in software deobfuscation using symbolic execution techniques, underscoring the significance of our research problem. We then elaborate on the novelty of our work by comparing it with existing opaque predicates that may also be resilient to symbolic execution.

### Conclusion

This work addresses the security of opaque predicates in the context of symbolic execution-based attacks. We introduce the concept of symbolic opaque predicates and present a general framework for their composition. A key characteristic of symbolic opaque predicates is the bi-opaque property, which can cause either false negative or false positive issues for symbolic execution-based attackers. To demonstrate the practicality of our approach, we developed a prototype obfuscation tool based on Obfuscator-LLVM and conducted real-world experiments. Our evaluations show that symbolic opaque predicates exhibit strong resistance against prevalent symbolic execution engines. Some examples of opaque predicates are also stealthy and efficient. Therefore, symbolic opaque predicates offer a promising approach for enhancing the resistance of practical obfuscation tools against symbolic execution-based attacks.

### Acknowledgments

This work was substantially supported by the National Basic Research Program of China (973 Project No. 2014CB347701), the National Natural Science Foundation of China (Project Nos. 61672164 and 61332010), the Research Grants Council of the Hong Kong Special Administrative Region, China (No. CUHK 14234416 of the General Research Fund), and Microsoft Research Asia via the 2018 MSRA Collaborative Research Award. Yu Kang is the corresponding author.

### References

[1] C. Collberg, C. Thomborson, and D. Low, “A taxonomy of obfuscating transformations,” Department of Computer Science, The University of Auckland, New Zealand, Tech. Rep., 1997.
[2] P. Junod, J. Rinaldini, J. Wehrli, and J. Michielin, “Obfuscator-llvm: Software protection for the masses,” 2015.
[3] Z. Wang, J. Ming, C. Jia, and D. Gao, “Linear obfuscation to combat symbolic execution,” in ESORICS. Springer, 2011.
[4] S. Schrittwieser, S. Katzenbeisser, J. Kinder, G. Merzdovnik, and E. Weippl, “Protecting software through obfuscation: Can it keep pace with progress in code analysis?” ACM Computing Surveys (CSUR), 2016.
[5] J. Ming, D. Xu, L. Wang, and D. Wu, “Loop: Logic-oriented opaque predicate detection in obfuscated binary code,” in Proc. of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS), 2015.
[6] B. Yadegari and S. Debray, “Symbolic execution of obfuscated code,” in Proc. of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS), 2015.
[7] X. Hui, Z. Yangfan, K. Yu, and R. L. Michael, “Concolic execution on small-size binaries: Challenges and empirical study,” in Proc. of the 47th IEEE/IFIP International Conference on Dependable Systems & Networks (DSN), 2017.
[8] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “Bap: A binary analysis platform,” in Proc. of the International Conference on Computer Aided Verification. Springer, 2011.
[9] F. Saudel and J. Salwan, “Triton: A dynamic symbolic execution framework,” in SSTIC, 2015.
[10] Y. Shoshitaishvili and et al., “Sok: (State of) the art of war: Offensive techniques in binary analysis,” in Proc. of the IEEE Symposium on Security and Privacy (S&P), 2016.
[11] T. Ogiso, Y. Sakabe, M. Soshi, and A. Miyaji, “Software obfuscation on a theoretical basis and its implementation,” IEICE Trans. on Fundamentals of Electronics, Communications and Computer Sciences, 2003.
[12] G. Myles and C. Collberg, “Software watermarking via opaque predicates: Implementation, analysis, and attacks,” Electronic Commerce Research, vol. 6, no. 2, pp. 155–171, 2006.
[13] J.-M. Borello and L. M´e, “Code obfuscation techniques for metamorphic viruses,” Journal in Computer Virology, vol. 4, no. 3, pp. 211–220, 2008.
[14] “CVC4,” http://cvc4.cs.stanford.edu/web/, 2017.
[15] C. Barrett, A. Stump, and C. Tinelli, “The SMT-LIB Standard: Version 2.0,” in Proc. of the 8th International Workshop on Satisfiability Modulo Theories, 2010.
[16] V. Ganesh and D. L. Dill, “A decision procedure for bit-vectors and arrays,” in Proc. of the International Conference on Computer Aided Verification. Springer, 2007.
[17] L. De Moura and N. Bjørner, “Z3: An efficient SMT solver,” in Proc. of the International Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2008.
[18] C. A. R. Hoare, “An axiomatic basis for computer programming,” Communications of the ACM, 1969.
[19] W. Landi and B. G. Ryder, “Pointer-induced aliasing: A problem classification,” in Proc. of the 18th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, 1991.
[20] D. Goldberg, “What every computer scientist should know about floating-point arithmetic,” ACM Computing Surveys (CSUR), vol. 23, no. 1, pp. 5–48, 1991.
[21] B. Botella, A. Gotlieb, and C. Michel, “Symbolic execution of floating-point computations,” Software Testing, Verification and Reliability, vol. 16, no. 2, pp. 97–121, 2006.
[22] C. Collberg, C. Thomborson, and D. Low, “Manufacturing cheap, resilient, and stealthy opaque constructs,” in Proc. of the 25th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, 1998.
[23] C. Lattner and V. Adve, “LLVM: A compilation framework for lifelong program analysis & transformation,” in Proc. of the IEEE International Symposium on Code Generation and Optimization, 2004.
[24] C. Cadar, D. Dunbar, and D. R. Engler, “Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs,” in Proc. of the 8th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2008.
[25] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing mayhem on binary code,” in Proc. of the 2012 IEEE Symposium on Security and Privacy, 2012.
[26] P. Wang, S. Wang, J. Ming, Y. Jiang, and D. Wu, “Translingual obfuscation,” in Proc. of the IEEE European Symposium on Security and Privacy (Euro S&P), 2016.
[27] P. Khodamoradi, M. Fazlali, F. Mardukhi, and M. Nosrati, “Heuristic metamorphic malware detection based on statistics of assembly instructions using classification algorithms,” in Proc. of the 18th CSI International Symposium on Computer Architecture and Digital Systems (CADS). IEEE, 2015.
[28] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray, “A generic approach to automatic deobfuscation of executable code,” in Proc. of the 2015 IEEE Symposium on Security and Privacy (S&P), 2015.
[29] D. Xu, J. Ming, and D. Wu, “Cryptographic function detection in obfuscated binaries via bit-precise symbolic loop mapping,” in Proc. of the 38th IEEE Symposium on Security and Privacy (S&P), 2017.
[30] Y. Guillot and A. Gazet, “Automatic binary deobfuscation,” Journal in Computer Virology, vol. 6, no. 3, pp. 261–276, 2010.
[31] F. Biondi, S. Josse, A. Legay, and T. Sirvent, “Effectiveness of synthesis in concolic deobfuscation,” 2015.
[32] S. Banescu, M. Ochoa, and A. Pretschner, “A framework for measuring software obfuscation resilience against automated attacks,” in Proc. of the 1st IEEE/ACM International Workshop on Software Protection, 2015.
[33] M. I. Sharif, A. Lanzi, J. T. Giffin, and W. Lee, “Impeding malware analysis using conditional code obfuscation,” in Proc. of the 15th Annual Network and Distributed System Security Symposium (NDSS), 2008.