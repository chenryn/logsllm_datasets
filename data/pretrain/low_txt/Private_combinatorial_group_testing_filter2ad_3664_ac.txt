### Detecting Overflow and Protocol Modifications

To ensure the integrity of results, it is crucial to detect overflow when the number of infected samples exceeds a threshold \(d\). While one can estimate the number of infected samples, a more robust solution involves a detection mechanism that invalidates all results if the threshold is surpassed. Here, we outline how this can be achieved.

**Main Idea:**
Alice will transmit to Bob the total number of marked customers (without revealing which specific customers are infected). If this number exceeds the threshold \(d\), Bob aborts the protocol. This approach provides Bob with the exact number of infected customers, rather than an estimate, thus slightly increasing the information revealed to him.

**Protocol Modifications:**

1. **Step 5:**
   - Alice generates a value \(D_j = E_B \left( \prod_{i \in V_j} b_i \right) \cdot R_0^{b_j}\), where \(R_0\) is a random value.
   - She transmits these values to Bob in a randomly permuted order to obscure which value corresponds to each customer.

2. **Step 6:**
   - Bob decrypts the \(D_j\) values from Alice and counts the number of zeroes. If the count exceeds the threshold \(d\), he aborts the protocol.

### Efficient Handling for \(d = 1\)

For the special case where \(d = 1\), a particularly efficient deterministic Combinatorial Group Testing (CGT) solution exists. We describe this solution and how the protocol can be modified to implement it.

**Algorithm:**
- One test is performed on a mixture of all blood samples to determine if there is any contamination.
- The remaining \(\log n\) tests are used to identify the contaminated sample. Each test checks a subset of samples based on their binary representation.

**Example:**
- Consider 2000 samples, with only one contaminated (e.g., sample 676).
- The test of the mixture of all 2000 samples indicates contamination.
- The other 11 (\(\log n\)) tests reveal the contaminated sample by checking specific bit positions in the binary representation of the sample numbers.

**Protocol Modification:**
1. **Change the \(V_j\) sets:**
   - Adjust the sets to reflect the new test structure. For security, no special treatment is given to the first test.
2. **Modify Step 6:**
   - Change the formula for \(Z_j\) to:
     \[
     Z_j = \left( \prod_{i \in V_j} E_B(b_i) \cdot \prod_{i \notin V_j} E_B(1 - b_i) \right)^{R_j} \cdot E_B(r_j)
     \]
   - This formula ensures the correct result for both cases: no infected customers and a single infected customer.

### Experimental Performance Evaluation

This section evaluates the performance and scalability of the protocol described in Section 3. Our implementation was tested on modest hardware (a 2.67 GHz computer with 2GB of memory), typical for data computing centers A and B. Despite the limited resources, the protocol scales well to a large number of customers.

**Implementation Details:**
- Built using the Paillier homomorphic encryption scheme with a 1024-bit modulus and the GMP large number library, written in C.
- Includes optimizations for decryption operations as described in [13].

**Results:**
- Table 1 shows the number of tests \(m\) required for different values of \(n\) and \(d\).
- Figure 1 illustrates the pre-computation time and runtime for varying \(n\) and \(d\).
- Both pre-computation and running times grow linearly with the number of customers, with a marginal impact from increasing \(d\).

### Related Work

Several researchers have explored combinatorial group testing and its applications in cryptography and information encoding. Key works include surveys by Colbourn et al. [2] and Du and Hwang [4], and applications in key distribution by Stinson et al. [14]. Goodrich et al. [9] introduced the use of group testing for data integrity, establishing a connection between data forensics and non-adaptive CGT schemes.

**Non-Adaptive vs. Adaptive Schemes:**
- Non-adaptive schemes, such as those used here, are more applicable in contexts like DNA sequence analysis [11].
- Secure Multi-party Computation (SMC) techniques, while generally applicable, lead to inefficient solutions for the PCGT problem. Our use of homomorphic encryption properties is similar to privacy-preserving protocols for set operations [5, 10], scalar product [7], and stream searching [12].

### Conclusions

We presented secure and private protocols for combinatorial group testing, where Alice prepares test samples and Bob conducts the tests, ensuring that only the customer learns their infection status. These techniques may also be useful in DNA analysis, though further investigation is needed.

### References

[1] The GNU multiple precision (GMP) arithmetic library. http://gmplib.org.
[2] C. J. Colbourn, J. H. Dinitz, and D. R. Stinson. Applications of combinatorial designs to communications, cryptography, and networking. In Walker, editor, Surveys in Combinatorics, volume 187 of London Mathematical Society Lecture Note Series, pages 37–100. Cambridge University Press, 1993.
[3] R. Dorfman. The detection of defective members of large populations. Ann. Math. Statist., 14:436–440, 1943.
[4] D.-Z. Du and F. K. Hwang. Combinatorial Group Testing and Its Applications. World Scientific, 2nd edition, 2000.
[5] M. Freedman, K. Nissim, and B. Pinkas. Efficient private matching and set intersection. In Proceedings of Advances in Cryptology - EUROCRYPT ’04, volume 3027 of Lecture Notes in Computer Science, pages 1–19, 2004.
[6] M. R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness. W. H. Freeman, New York, NY, 1979.
[7] B. Goethals, S. Laur, H. Lipmaa, and T. Mielikainen. On private scalar product computation for privacy-preserving data mining. In The 7th Annual International Conference on Information Security and Cryptology (ICISC 2004), 2004.
[8] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game. In Proceedings of the nineteenth annual ACM conference on Theory of computing, pages 218–229. ACM Press, 1987.
[9] M. T. Goodrich, M. J. Atallah, and R. Tamassia. Indexing information for data forensics. In ACNS, pages 206–221, 2005.
[10] L. Kissner and D. Song. Privacy-preserving set operations. In Proceedings of Advances in Cryptology - CRYPTO ’05, volume 3621 of Lecture Notes in Computer Science, 2005. Full version appears at http://www.cs.cmu.edu/~leak/.
[11] H. Ngo and D.-Z. Du. A survey on combinatorial group testing algorithms with applications to DNA library screening. In Discrete Mathematical Problems with Medical Applications. DIMACS Series, 55, American Mathematical Society, 2000.
[12] R. Ostrovsky and W. Skeith. Private searching on streaming data. In CRYPTO, volume 3621 of Lecture Notes in Computer Science, pages 223–240, 2005.
[13] P. Paillier. Public key cryptosystem based on composite degree residue classes. In Advances in Cryptology – EUROCRYPT’99, volume 1592 of LNCS, pages 223–238, 1999.
[14] D. R. Stinson, T. van Trung, and R. Wei. Secure frameproof codes, key distribution patterns, group testing algorithms and related structures. Journal of Statistical Planning and Inference, 86:595–617, 2000.
[15] A. C. Yao. How to generate and exchange secrets. In Proceedings of the 27th Annual IEEE Symposium on Foundations of Computer Science, pages 162–167, 1986.