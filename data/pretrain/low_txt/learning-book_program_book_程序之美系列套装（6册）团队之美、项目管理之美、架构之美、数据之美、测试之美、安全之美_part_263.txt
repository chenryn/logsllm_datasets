### 预测输入项值

大量的HTML表单包含文本输入项。此外，一些包含选择菜单的表单也需要文本输入项值才能返回检索结果。我们注意到文本输入项通常有两种用途：

1. **通用输入项**：这类输入项可以接受任何合理的值。例如，在搜索书籍时，用户可以通过标题或作者进行查询。后台数据库会返回所有包含该词的文档。
2. **键入输入项**：这类输入项的值必须属于一个定义良好的有限集或数据类型（如邮政编码、日期或价格）。在固定格式的文本框中输入无效值会导致错误页面，因此识别正确的数据类型非常重要。

对于通用输入项，即使输入不精确的关键字仍可能返回一些结果，挑战在于识别一个有限的关键字集合，从中抽取多种不同的结果页面。而对于键入输入项，输入值必须符合特定的数据类型才能生成有效结果。

### 通用文本输入项

在描述如何为通用输入项识别候选关键字之前，我们需要考虑并排除一种可能的替代方案：即在各种领域中使用涉及的查询词列表作为文本输入项值，并将每个文本输入项值与最匹配的查询词列表进行匹配。然而，这种方法存在太多的概念和领域差异，且对于通用输入项，即使在同一领域的两个不同表单中，相同的关键字集合也不一定都能正常工作。最佳的关键字通常是特定于站点的。由于我们的目标是扩展到数百万个表单和多种语言，因此需要一种简单、高效且完全自动化的技术。

我们采用迭代式探测方法：
- 初始种子集合：从表单所在网页的内容中选择相关单词作为初始候选关键字。
- 迭代过程：通过构建查询模板并提交表单，下载相应的Web页面内容，从中抽取额外的关键字。然后用这些关键字更新候选值集合，重复此过程直到无法进一步抽取关键字或达到某个停止条件（如足够多的候选关键字）。
- 最终选择：根据这些候选关键字对底层数据库记录数量的影响来选择最终的输入值集合。

### 键入文本输入项

实践表明，某些类型的输入项在多个领域中频繁出现，如邮政编码和日期。为了利用这一观察，我们首先确保输入适当值以生成合理的结果页面。我们使用已知值构建富信息量测试，对于有限类型（如美国邮政编码），使用部分样本进行测试；对于连续类型（如日期），则使用均匀分布值进行测试。通过这种方式，我们可以确定哪些输入项适合进行富信息量测试，并选择合适的候选值。

### 结论

本文描述了一种探索Deep Web内容的方法，使得搜索引擎能够访问这些内容。该系统必须是完全自动化的，能够扩展到整个Web，并支持多种语言和领域。有趣的是，这些严格的要求促使我们探索出一个相对简单而优雅的解决方案，证明了简单性往往是解决复杂问题的关键。

未来的工作方向包括识别表单中的特定类型以扩展爬虫的覆盖度。例如，组合输入有效的值可以探寻更多页面。

### 参考文献

[1] Barbosa, L. and J. Freire. "Siphoning Hidden-Web Data through Keyword-Based Interfaces." SBBD 2004: 309-321.
[2] Bergman, M. K. "The Deep Web: Surfacing Hidden Value." Journal of Electronic Publishing, 2001.
[3] Callan, J. P. and M. E. Connell. "Query-based sampling of text databases." ACM Transactions on Information Systems, 19(2): 97-130, 2001.
[4] Doan, A., P. Domingos, and A. Y. Halevy. "Reconciling Schemas of Disparate Data Sources: A Machine-Learning Approach." SIGMOD Conference 2001: 509-520.
[5] "Forms in HTML documents." http://www.w3.org/TR/html401/interact/forms.html.
[6] He, B., M. Patel, Z. Zhang, and K. C.-C. Chang. "Accessing the Deep Web: A survey." Communications of the ACM, 50(5): 95-101, 2007.
[7] Ipeirotis, P. G. and L. Gravano. "Distributed Search over the Hidden Web: Hierarchical Database Sampling and Selection." VLDB 2002: 394-405.
[8] Madhavan, J., L. Afanasiev, L. Antova, and A. Y. Halevy. "Harnessing the Deep Web: Present and Future." CIDR 2009.
[9] Madhavan, J., D. KO'L. Kot, V. Ganapathy, A. Rasmussen, and A. Y. Halevy. "Google's Deep-Web Crawl." PVLDB 1(2): 1241-1252 (2008).
[10] Ntoulas, A., P. Zerfos, and J. Cho. "Downloading textual hidden web content through keyword queries." JCDL 2005: 100-109.
[11] Raghavan, S. and H. Garcia-Molina. "Crawling the Hidden Web." VLDB 2001: 129-138.
[12] Salton, G. and M. J. McGill. Introduction to Modern Information Retrieval. New York: McGraw-Hill, 1983.
[13] SpiderMonkey (JavaScript-C) Engine, http://www.mozilla.org/js/spidermonkey/.
[14] V8 JavaScript Engine, http://code.google.com/p/v8/.

### 第10章 构建Radiohead的“House of Cards”

Aaron Koblin 和 Valdean Klump

这是一个关于获格莱美奖提名的乐队Radiohead的音乐视频“House of Cards”是如何完全基于数据创建的故事。在阅读本章之前，建议先观看该视频。权威资料可在GCode项目页面（http://code.google.com/radiohead）上找到。该网站还提供了用于构建视频的数据样本、一个允许通过3D模式查看数据的Flash应用、一些可视化工具以及一个制作过程的代码视频。

#### 一切是如何开始的

2007年9月，我收到了James Frost的一封电子邮件，询问我是否对基于数据创作一个音乐视频感兴趣。James是一位才华横溢的视觉导演，曾为Coldplay、Norah Jones、Pearl Jam等多位艺术家制作过作品。他看过我的“飞行模式”项目（图10-1），该项目使用空中交通的GPS数据对商业飞行模式和密度进行了可视化，希望与我见面讨论制作一个可视化音乐视频。

两个月后，James、他的制片人Justin Glorieux和我在洛杉矶的一家咖啡馆会面，讨论了一些想法。我向他们展示了我过去的一些项目和技术。我们讨论了使用Processing编程语言的可能性，这是一种广泛应用于数据可视化的语言。最终，我们通过这种方式为Interpol乐队制作了“Rest My Chemistry”视频，该视频于2008年3月发布。如果你从未使用过Processing语言，我强烈建议你访问其官方网站（http://processing.org）并了解相关代码。在我看来，Processing是艺术家、设计师或任何对动态数据可视化感兴趣的人的最佳编程语言。

我们还讨论了对激光传感器收集的数据进行可视化。我在加州大学洛杉矶分校（UCLA）的嵌入式网络传感（CNS）中心的一个项目中首次接触了这种技术。CENS使用激光来检测光线如何穿透森林覆盖层，我被渲染后的图像所蕴含的内在美深深震撼。James看完一些例子后，同意了我的建议，并对使用激光制作影片的想法印象深刻。他问道：“你的意思是不用摄像机拍摄视频？不用视频就可以拍摄视频？”他很快意识到这是一件前所未有的事情。不久之后，他开始着手制作Radiohead的音乐视频。

希望你能了解这部影片的制作过程，并从中获得灵感。在这一章中，我将首先讨论我们使用的捕捉数据的工具。接着，我将介绍数据本身及视频拍摄，以及后期数据处理。最后，我们一起探讨我在GCode网站上提供的数据可视化代码，并讨论你可以如何发挥它。