### Introduction

**Javier Vazquez Vidal and Henrik Ferdinand Nölscher**

#### Who We Are
- **Javier Vazquez Vidal**
  - **Role**: Hardware Security Specialist
  - **Employer**: Code White (as a Product Security Engineer)
  - **Location**: Cadiz, Spain
  - **Interests**: Reversing interesting products, enjoying BBQs, and honest conversations.

- **Henrik Ferdinand Nölscher**
  - **Role**: Information Security Specialist
  - **Employer**: Code-White in Ulm
  - **Interests**: Pwning stuff, lasers, BBQs, and big busses.

### Current State of Car Hacking

- **Focus on CAN Bus**
  - Replay attacks and packet injection.
  - Some researchers have found remote exploits to take control of certain vehicles.
  - Tools are available to understand the UDS protocol.
  - Chiptuning is essentially hacking.
  - ECUs can be cloned, and internal data can be manipulated.
  - OEM-specific diagnostics are more interesting than standard ones.

### Beyond UDS: Exploring TP2.0

- **UDS is not the only protocol.**
- **TP2.0 (Tunneling Protocol)**: The CAN version of KWP2000.
- **Services Offered by TP2.0 and UDS**
  - **SecurityAccess (0x27)**: Allows access to restricted services.
  - **ReadMemoryByAddress (0x23)**: Reads specific memory addresses.
  - **Read/WriteDataByID (0x22/0x2E)**: Reads/writes specific parameters.
  - **RequestUpload (0x35)**: Retrieves firmware from the ECU.
  - **RoutineControl (0x31)**: Starts routines with different effects.

### Introducing the CANBadger

#### Hardware Overview
- **Processor**: mBed LPC1768 or LPCXPresso LPC1769
- **Memory**: 128KB XRAM
- **Interfaces**: 2x DB9 CAN interfaces, 2x Debug headers, SD card
- **Power Control**: Software-controlled ECU power
- **Connectivity**: UART, 4 GPIOs, Ethernet
- **Modes**: Standalone, USB (CDC Device), Network
- **Power Sources**: PSU, external battery, OBD2
- **LED**: Blinky dual-color LED
- **Cost**: Complete board assembly under $25

#### Firmware Features
- **Protocol Support**: UDS, TP2.0, and RAW CAN
- **Interactive Diagnostics Sessions**: Real-time interaction
- **MITM Capabilities**: Rules stored in SD, hijack SecurityAccess, emulate SIDs/PIDs
- **Data Management**: Dump data transfers to SD, log UDS and TP2.0 traffic, detect CAN speed
- **Ethernet for GUI Use**

#### Protocol Analysis
- **SID Support**: Many SIDs included, easy to add new SIDs
- **Logging and Parsing**: Detailed verbosity, logs stored in SD
- **Compatibility**: Works with UDS and TP2.0

#### Interactive Session
- **No Scripting Required**: Perform actions on the go
- **Built-in Scanners**: For SID parameters

#### MITM Capabilities
- **Real-Time Handling**: Rules set for specific IDs
- **Byte Manipulation**: Swap, add, subtract, multiply, divide, increase/decrease percent
- **Conditions**: Whole payload matches, specific bytes match, specific bytes greater/smaller than X value

### CANBadger Server

- **Remote Control**: Multiple CANBadgers via simple UDP protocol
- **Cross-Platform**: Python, Qt for GUI, hackable protocol abstractions
- **Status Display**: Organized tabs, easily modify/add parameters, exchange data between tabs

### SecurityAccess Hijack

- **Why?**
  - OEM tools and third-party tools authenticate to ECUs for restricted features.
  - Fixed functions limit control over the process.
  - Because you can!

- **How?**
  - Wait for a SecurityAccess request in transparent bridge mode.
  - Switch to the desired Diagnostics Session.
  - Forward SecurityAccess authentication.
  - If successful, cut off the external tool and take control of the session.

### Additional Capabilities

- **Firmware Updates**: Dump TP and UDS transfers.
- **OBD2 Data Spoofing**: Through MITM and emulation.
- **GPIO Pins**: For bootloading (e.g., Tricore).
- **GPS Signal Manipulation**: Via UART pins.

### Insurance and Tracking Dongles

- **Implicit Trust**: These devices trust the car but cannot verify the source of OBD2 data.
- **Dependence on GPS**: Outputs data via UART.
- **Spoofing**: Manipulate driving habits and location data.
- **Profit**: By combining both spoofing methods.

### Emulator Functionality

- **Data Collection**: Requests specified PIDs every 10 ms, dumps replies to SD.
- **Emulation Files**: Choose from stored IDs, SIDs, and PIDs.
- **Data Mapping**: Stored in XRAM with lookup tables.
- **Real-Time Emulation**: Passes appropriate data based on timestamps, optimized for changes within the timeframe.

### Join Us for More

- **Workshop**: You CAN haz car secretz workshop, ready to answer questions and provide more info.
- **Build Your Own CANBadger**: Visit us to assemble your own.
- **Code and Schematics**: GPL, uploaded to GitHub shortly after DC.

### Acknowledgments

- **Thanks to all attendees!**
- **Code White**: For their support and trust in the project.
- **Family and Friends**: For supporting us even when we run out of coffee.

**Contact Information:**
- **Javier Vazquez Vidal**: @fjvva, [Email]
- **Henrik Ferdinand Nölscher**: @s1ckcc, [Email]