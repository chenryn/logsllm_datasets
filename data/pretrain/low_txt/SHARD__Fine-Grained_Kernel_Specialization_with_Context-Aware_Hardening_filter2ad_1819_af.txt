### Control-Flow Integrity (CFI) in Privileged Software

Previous research has applied CFI to protect privileged software, including kernels and hypervisors. For instance, HyperSafe [56] uses CFI to secure hypervisors. To enforce CFI, they introduced a lightweight Restricted Pointer Indexing (RPI) approach. SHARD, on the other hand, proposes a modified RPI implementation that is compatible with function addresses.

KGuard [34] protects the kernel from return-to-user attacks by ensuring that indirect control-flow transfers within the kernel cannot target user space addresses. KCoFI [26] enforces CFI on the system's kernel using the Secure Virtual Architecture (SVA) [27]. However, their implementation incurs a high overhead, sometimes exceeding 100%. Similarly, Ge et al. [29] apply fine-grained CFI to kernel software using RPI, but this instrumentation also causes a high overhead, up to 50%. In contrast, SHARD’s implementation of CFI, which includes a modified RPI, allows near-native non-hardened execution and enforces strict debloating, thereby removing many vulnerabilities and preventing a wide range of attacks with minimal overhead.

### Specialized Kernel Hardening

To our knowledge, Split-Kernel [39] is the only previous effort in specialized kernel hardening. Both Split-Kernel and SHARD implement selective hardening of kernel execution by providing different kernel views to applications based on their trust level. However, a key difference is that Split-Kernel fully hardens the kernel view (using coarse-CFI) for untrusted applications, resulting in a high overhead (an average of 40% on a web server). In contrast, SHARD minimizes this overhead by hardening only potentially reachable code paths while allowing reachable code to execute unrestricted.

### Conclusion

This paper introduces SHARD, a run-time fine-grained kernel specialization system that combines debloating with context-aware hardening to prevent kernel attacks. SHARD achieves a significantly higher reduction in attack surface compared to other methods. As shown in Figure 14, the performance overhead of Redis when the system is profiled with complete (SHARD) and partial sets of redis-benchmark (SHARD-Profpart) is minimal.

While an attacker could potentially make a malicious update to a function pointer and trick trusted applications into using it, such attacks are expected to be highly difficult due to the sandboxing of untrusted applications and the rigorous control of their interactions. Additionally, the attacker would need to understand the system call semantics of a trusted application and be able to exploit a specific scenario. Further investigation of these potential attacks is left for future work.

Moreover, other techniques can be integrated with SHARD to provide alternative or complementary context-aware hardening. For example, stack exhaustion and stack clearance checks can be applied to prevent attacks through the kernel’s stack. These techniques, unlike CFI, are not subject to the limitations of selective hardening [39].

### Related Work

#### Dynamic Kernel Debloating

SHARD is closely related to previous work in application-driven, run-time kernel (debloating-based) specialization [30, 36, 62]. However, SHARD significantly reduces the attack surface by specializing at both the application and system call levels and strictly enforcing debloating.

#### Static Kernel Debloating

Static, configuration-based specialization [37, 38, 53] is another approach for kernel minimization. These techniques statically determine the kernel view, providing good performance but with lower security guarantees, such as a larger attack surface and/or non-strict enforcement.

#### Application Specialization

Specializing applications has been extensively explored, including for debloating purposes. Trimmer [50] uses static analysis to identify reachable application code with respect to a particular user. Unlike prior work, SHARD implements strict enforcement and incurs a low overhead: 3-10% on Redis, 10-36% on NGINX, and 0-2.7% on the SPEC CPU benchmarks.

### Acknowledgements

We thank our shepherd, Vasileios Kemerlis, and the anonymous reviewers for their valuable comments and suggestions. We also thank Mathias Payer for earlier discussions on software debloating and hardening. This work was supported in part by ONR under Grant N00014-17-1-2513. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the ONR.

### References

[1] Apache HTTP Server Benchmarking Tool. https://httpd.apache.org/docs/2.4/programs/ab.html/

[2] Amd64 Architecture Programmer’s Manual Volume 3: General-Purpose and System Instructions. https://www.amd.com/system/files/TechDocs/24594.pdf

[3] CVE-2017-10661 Detail. https://nvd.nist.gov/vuln/detail/CVE-2017-10661

[4] CVE-2017-11176 Detail. https://nvd.nist.gov/vuln/detail/CVE-2017-11176

[5] CVE-2017-17052 Detail. https://nvd.nist.gov/vuln/detail/CVE-2017-17052

[6] CVE-2018-10880 Detail. https://nvd.nist.gov/vuln/detail/CVE-2018-10880

[7] CVE-2017-5123. https://security.archlinux.org/CVE-2017-5123

[8] CVE-2017-7308 Detail. https://nvd.nist.gov/vuln/detail/CVE-2017-7308

[9] CVE-2018-17182 Detail. https://nvd.nist.gov/vuln/detail/CVE-2018-17182

[10] CVE-2018-7480 Detail. https://nvd.nist.gov/vuln/detail/CVE-2018-7480

[11] CVE-2019-20054 Detail. https://nvd.nist.gov/vuln/detail/CVE-2019-20054

[12] JonathanSalwan/ROPgadget. https://github.com/JonathanSalwan/ROPgadget

[13] L1 Terminal Fault / CVE-2018-3615, CVE-2018-3620, CVE-2018-3646. https://software.intel.com/security-software-guidance/software-guidance/l1-terminal-fault-intel-sa-00161

[14] The Linux Kernel Enters 2020 at 27.8 Million Lines in Git but with Less Developers for 2019. https://www.phoronix.com/scan.php?page=news_item&px=Linux-Git-Stats-EOY2019#:~:text=The%20Linux%20Kernel%20Enters%202020,Less%20Developers%20For%202019%20%2D%20Phoronix&text=As%20of%20this%20morning%20in,in%20at%2027.8%20million%20lines!

[15] Linux Kernel Grows Past 15 Million Lines of Code. https://www.tomshardware.com/news/Linux-Linus-Torvalds-kernel-too-complex-code,14495.html

[16] Nginx | High Performance Load Balancer, Web Server, and Reverse Proxy. https://www.nginx.com/

[17] Redis. https://redis.io

[18] Vulnerability Details: CVE-2016-0728. https://www.cvedetails.com/cve/CVE-2016-0728/

[19] wrk - A HTTP Benchmarking Tool. https://github.com/wg/wrk

[20] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-Flow Integrity Principles, Implementations, and Applications. ACM Transactions on Information and System Security (TISSEC), 2009.

[21] B. A. Azad, P. Laperdrix, and N. Nikiforakis. Less is More: Quantifying the Security Benefits of Debloating Web Applications. In Proceedings of the 28th USENIX Security Symposium (Security), 2019.

[22] J.-J. Bai, J. Lawall, Q.-L. Chen, and S.-M. Hu. Effective Static Analysis of Concurrency Use-After-Free Bugs in Linux Device Drivers. In Proceedings of USENIX Annual Technical Conference (ATC), 2019.

[23] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, pages 30–40, 2011.

[24] N. Burow, X. Zhang, and M. Payer. Shining Light on Shadow Stacks. arXiv preprint arXiv:1811.03165, 2018.

[25] N. Burow, X. Zhang, and M. Payer. SOK: Shining Light on Shadow Stacks. In 2019 IEEE Symposium on Security and Privacy (SP), pages 985–999, 2019.

[26] J. Criswell, N. Dautenhahn, and V. Adve. KCoFI: Complete Control-Flow Integrity for Commodity Operating System Kernels. In Proceedings of IEEE Symposium on Security and Privacy (S&P), 2014.

[27] J. Criswell, A. Lenharth, D. Dhurjati, and V. Adve. Secure Virtual Architecture: A Safe Execution Environment for Commodity Operating Systems. In Proceedings of the 21st ACM Symposium on Operating Systems Principles (SOSP), 2007.

[28] T. H. Dang, P. Maniatis, and D. Wagner. The Performance Cost of Shadow Stacks and Stack Canaries. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security, pages 555–566, 2015.

[29] X. Ge, N. Talele, M. Payer, and T. Jaeger. Fine-Grained Control-Flow Integrity for Kernel Software. In Proceedings of the IEEE European Symposium on Security and Privacy (EuroS&P), 2016.

[30] Z. Gu, B. Saltaformaggio, X. Zhang, and D. Xu. FACECHANGE: Application-Driven Dynamic Kernel View Switching in a Virtual Machine. In Proceedings of the 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, (DSN), 2014.

[31] K. Heo, W. Lee, P. Pashakhanloo, and M. Naik. Effective Program Debloating via Reinforcement Learning. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2018.

[32] Intel Corporation. Intel® 64 and IA-32 Architectures Optimization Reference Manual. December 2016.

[33] K. K. Ispoglou, B. AlBassam, T. Jaeger, and M. Payer. Block Oriented Programming: Automating Data-Only Attacks. In Proceedings of the 2018 ACM Conference on Computer and Communications Security (CCS), 2018.

[34] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis. KGuard: Lightweight Kernel Protection Against Return-to-User Attacks. In Proceedings of the 21st USENIX Security Symposium (Security), 2012.

[35] A. Konovalov. Google Project Zero Blog. https://googleprojectzero.blogspot.com/

[36] H. Kuo, A. Gunasekaran, Y. Jang, S. Mohan, R. B. Bobba, D. Lie, and J. Walker. Multik: A Framework for Orchestrating Multiple Specialized Kernels. CoRR, abs/1903.06889, 2019.

[37] H.-C. Kuo, J. Chen, S. Mohan, and T. Xu. Set the Configuration for the Heart of the OS: On the Practicality of Operating System Kernel Debloating. Proceedings of the ACM on Measurement and Analysis of Computing Systems, 2020.

[38] A. Kurmus, R. Tartler, D. Dorneanu, B. Heinloth, V. Rothberg, A. Ruprecht, W. Schröder-Preikschat, D. Lohmann, and R. Kapitza. Attack Surface Metrics and Automated Compile-Time OS Kernel Tailoring. In Proceedings of the 20th Annual Network and Distributed System Security Symposium (NDSS), 2013.

[39] A. Kurmus and R. Zippel. A Tale of Two Kernels: Towards Ending Kernel Hardening Wars with Split Kernel. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2014.

[40] P. Larson. Testing Linux® with the Linux Test Project. In Ottawa Linux Symposium, page 265, 2002.

[41] C. Lattner and V. Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In International Symposium on Code Generation and Optimization, 2004. CGO 2004., pages 75–86. IEEE, 2004.

[42] K. Lu, A. Pakki, and Q. Wu. Detecting Missing-Check Bugs via Semantic-and Context-Aware Criticalness and Constraints Inferences. In Proceedings of the 28th USENIX Security Symposium (Security), 2019.

[43] A. Lyashko. Hijack Linux System Calls: Part III. System Call Table. Blog] System Programming, Available at:.

[44] A. Machiry, C. Spensky, J. Corina, N. Stephens, C. Kruegel, and G. Vigna. DRCHECKER: A Soundy Analysis for Linux Kernel Drivers. In Proceedings of the 26th USENIX Security Symposium (Security), 2017.

[45] D. Merkel. Docker: Lightweight Linux Containers for Consistent Development and Deployment. Linux Journal, 2014.

[46] C. Qian, H. Hu, M. Alharthi, P. H. Chung, T. Kim, and W. Lee. RAZOR: A Framework for Post-Deployment Software Debloating. In 28th USENIX Security Symposium (USENIX Security 19), pages 1733–1750, Santa Clara, CA, Aug. 2019. USENIX Association.

[47] A. Quach, A. Prakash, and L. Yan. Debloating Software Through Piece-Wise Compilation and Loading. In 27th USENIX Security Symposium (USENIX Security 18), pages 869–886, 2018.

[48] D. Rosenberg. Anatomy of a Remote Kernel Exploit, 2011.

[49] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-Libc Without Function Calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 552–561, 2007.

[50] H. Sharif, M. Abubakar, A. Gehani, and F. Zaffar. Trimmer: Application Specialization for Code Debloating. In Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering, pages 329–339, 2018.

[51] L. Szekeres, M. Payer, L. T. Wei, and R. Sekar. Eternal War in Memory. In Proceedings of the IEEE Symposium on Security & Privacy (S&P), 2014.

[52] R. Ta-Min, L. Litty, and D. Lie. Splitting Interfaces: Making Trust Between Applications and Operating Systems Configurable. In Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI), 2006.

[53] R. Tartler, A. Kurmus, B. Heinloth, V. Rothberg, A. Ruprecht, D. Dorneanu, R. Kapitza, W. Schröder-Preikschat, and D. Lohmann. Automatic OS Kernel TCB Reduction by Leveraging Compile-Time Configurability. In Proceedings of the 8th Workshop on Hot Topics in System Dependability, (HotDep), 2012.

[54] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In 23rd USENIX Security Symposium (USENIX Security 14), pages 941–955, 2014.

[55] W. Wang, K. Lu, and P.-C. Yew. Check It Again: Detecting Lacking-Recheck Bugs in OS Kernels. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2018.

[56] Z. Wang and X. Jiang. HyperSafe: A Lightweight Approach to Provide Lifetime Hypervisor Control-Flow Integrity. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2010.

[57] Z. Wang, C. Wu, M. Xie, Y. Zhang, K. Lu, X. Zhang, Y. Lai, Y. Kang, and M. Yang. SEIMI: Efficient and Secure SMAP-Enabled Intra-Process Memory Isolation. In 2020 IEEE Symposium on Security and Privacy (SP), pages 592–607, 2020.

[58] W. Wu, Y. Chen, X. Xing, and W. Zou. KEPLER: Facilitating Control-Flow Hijacking Primitive Evaluation for Linux Kernel Vulnerabilities. In Proceedings of the 28th USENIX Security Symposium (Security), 2019.

[59] W. Wu, Y. Chen, J. Xu, X. Xing, X. Gong, and W. Zou. FUZE: Towards Facilitating Exploit Generation for Kernel Use-After-Free Vulnerabilities. In 27th USENIX Security Symposium (USENIX Security 18), pages 781–797, 2018.

[60] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In Proceedings of the 30th IEEE Symposium on Security and Privacy (S&P), 2009.

[61] T. Zhang, W. Shen, D. Lee, C. Jung, A. M. Azab, and R. Wang. Pex: A Permission Check Analysis Framework for Linux Kernel. In Proceedings of the 28th USENIX Security Symposium (Security), 2019.

[62] Z. Zhang, Y. Cheng, S. Nepal, D. Liu, Q. Shen, and F. A. Rabhi. KASR: A Reliable and Practical Approach to Attack Surface Reduction of Commodity OS Kernels. In Proceedings of the 21st International Symposium on Research in Attacks, Intrusions, and Defenses (RAID), 2018.

[63] Z. Zhou, M. K. Reiter, and Y. Zhang. A Software Approach to Defeating Side Channels in Last-Level Caches. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS), 2016.

[64] P. Zieris and J. Horsch. A Leak-Resilient Dual Stack Scheme for Backward-Edge Control-Flow Integrity. In Proceedings of the 2018 on Asia Conference on Computer and Communications Security, pages 369–380, 2018.