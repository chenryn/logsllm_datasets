### Reaping and Breaking Keys at Scale: When Cryptography Meets Big Data

**Authors:**
- Nils Amiet
- Yolan Romailler

**Conference:**
- DEF CON 26, August 2018

**Disclaimer:**
- These slides are not up to date. For the latest version, visit:
  - [Research Page](https://research.kudelskisecurity.com/)

**Live Testing:**
- To test your keys against our dataset, visit:
  - [Key Lookup](keylookup.kudelskisecurity.com)
- If the key is known, results are immediate. Otherwise, check back later.
- We will demonstrate this during our presentation.

---

### The Problem

Asymmetric cryptography relies on two types of keys:
- **Public Key:** Used by anyone to encrypt or verify data.
- **Private Key:** Kept secret and used for decryption and signing.

There are numerous public keys in use, including:
- TLS/SSL
- SSH
- PGP, and others.

The question arises: Can public keys leak information about the private keys?

---

### Cryptographic Recap

#### RSA (Rivest–Shamir–Adleman)
- **Key Generation:**
  - Choose two large prime numbers \( p \) and \( q \).
  - Public key: \( (n, e) \) where \( n = p \times q \) and \( e \) is coprime with \( \lambda(n) \).
  - Private key: \( (n, d) \) where \( d \equiv e^{-1} \pmod{\lambda(n)} \).
- **Encryption:**
  - \( c \equiv m^e \pmod{n} \)
- **Decryption:**
  - \( m \equiv c^d \pmod{n} \)
- **Security:**
  - Relies on the difficulty of integer factorization.

#### Elliptic Curve Cryptography (ECC)
- **Security:**
  - Based on the difficulty of the elliptic curve discrete logarithm problem.
- **Key Generation:**
  - Private key: An integer \( d \).
  - Public key: A point \( Q = (x, y) = dG \) on a known elliptic curve.
- **Security:**
  - Hard to find \( d \) given points \( G \) and \( Q \).

---

### Passive Attacks on Public Keys

- **Coppersmith’s Attack (ROCA)**
- **RSA Modulus Factorization (Batch GCD)**
- **Invalid Parameters:**
  - DSA generator
  - Key sizes
  - Invalid curve attacks

**Batch GCD:**
- Used in 2010, 2012, and 2016 to break weak keys.
- Applied to datasets of up to 260 million keys.
- Targets include IMAP(S), POP3(S), SMTP(S), SSH, and PGP keys.

**Data Sources:**
- **PGP Keys:**
  - 9.5M from SKS key servers
  - 220k from Keybase.io
  - 6k from GitHub
- **SSH Keys:**
  - 71M from CRoCS dataset
  - 17M from SSH scans
  - 4.5M from GitHub
  - 1.2M from GitLab
- **X.509 Certificates:**
  - >200M from HTTPS scans
  - 1-2M each from SMTP(S), POP3(S), and IMAP(S) scans

---

### Our Public Key Stash: Big Brother Style

- **Attacks like RSA Batch GCD** work best with larger datasets.
- **Collection:**
  - Over 343,492,000 unique keys collected over one year.

**Key Types:**
- **RSA:** 324,476,553
- **ECC:** 13,975,895
- **DSA:** 2,568,969
- **ElGamal:** 2,468,739
- **GOST R 34.10-2001:** 1,759

**Vulnerabilities:**
- **ROCA Vulnerable RSA Keys:**
  - 4,000 RSA keys
  - 33% of size 2048 (weak), 64% of size 4096 (should be fine)
  - Mostly PGP keys (97%)
  - Found on Keybase.io, GitHub, and GitLab.
- **Batch GCD Factored RSA Keys:**
  - >200k RSA keys
  - 207k X.509 certificates (MitM attacks)
  - >1200 SSH keys (MitM attacks)
  - 6 PGP keys (decryption, impersonation, etc.)

---

### Results: RSA Keys

- Many routers are affected, particularly those from D-Link.

### Results: ECC Keys

- **Adoption Rate:**
  - X.509 and PGP are steadily adopting ECC.
- **Common Curves for SSH:**
  - secp256r1: 97.68%
  - secp521r1: 1.87%
  - Curve25519: 0.37%
  - secp384r1: 0.07%

### Growth of ECC Keys

- Adoption rates vary by source.

### Scan Failure

- Some keys are used as both PGP keys, SSH keys, and X.509 certs.
- **PGP Subkey/Master Key Ratio:**
  - 50.5% master keys
  - 49.5% subkeys
  - Most people have only one subkey.
- **Multi-Factor RSA Keys:**
  - At least 361 keys had more than two factors.
- **DSA:**
  - Deprecated by OpenSSL in 2015.
  - Only 3,106 X.509 certs seen in the last year.
  - <0.55% of SSH keys are DSA-based.

---

### Conclusion

- **Mind Your Keys!**
- **Silent Attacks:**
  - Anyone can perform similar attacks, and they may already be doing so.
- **Open Source Code:**
  - [GitHub Repository](https://github.com/kudelskisecurity)
  - [Scannerl](https://github.com/kudelskisecurity/scannerl)
- **Further Analysis:**
  - [Research Blog](https://research.kudelskisecurity.com)