# SafeCard: A Gigabit Intrusion Prevention System on the Network Card

## 5.2 Macro Benchmark
Our final experiment evaluates the pipeline in hardware. We do not include results for the Front-Ends (FEs) on the XScale again, as their throughput is not measurable in bitrate and we have already computed an upper bound. For this test, we connected our board to a mirrored image of communication between three computers. By using mirroring, we were able to test peak throughput without interfering with the active TCP control flow. The traffic was generated using `ab`, a benchmarking tool for Apache. When run against two servers simultaneously, our maximally obtainable rate was 940 Mbits. The results are shown in Figure 5 (right).

From the figure, we can see that with 6 micro-engines, we can process all traffic. To free up the 6th micro-engine, we had to temporarily remove the transmission unit. The presented numbers are worst-case estimations based on crude dropped traffic statistics. Actual performance could be up to 20% higher.

## 6. Discussion

### Limitations
The presented solution is an amalgamation of various solutions. While powerful as a whole, there are improvements that could be made to its components. For example, while Ruler accepts most Snort rules through our `snort2ruler` compiler, there is a subset of expressions that we cannot handle yet. In Prospector, we do not currently block format string attacks, although this is possible in principle. We are currently implementing this feature and expect it to be available soon. Additionally, the flow-based IDS (stage 5) is currently rather naive and should be improved.

Finally, while we have implemented a powerful set of network-based intrusion prevention methods, we have not exhausted all options. For instance, as we operate close to the end-hosts with application-awareness, we are still considering filters such as those generated by Vigilante [13]. We opted for protocol-aware filtering because Vigilante does not handle polymorphism well.

### Hardware Acceleration
An obvious way to increase network throughput is to switch to expensive specialized hardware. Although implemented on an embedded device, SafeCard is not intended to explore that option. The IXP2400 is five years old and no longer supported by Intel. It was expensive, but mostly due to its low volume sales. The trend toward multi-core CPUs at the network edge could bring a cheaper equivalent if memory latency-hiding is also provided.

To illustrate our point more clearly, we compare performance to that of the IXDP2850, a dual-processor variant with 32 micro-engines in total, running at 1.4 GHz. Cycle-for-cycle, this device can process more than nine times as much traffic. As the bottleneck in our pipeline is computationally bound and inherently scalable, this will directly translate into better SafeCard performance. We decided not to show those results, however, because installing IXDP2850s at the network edge is not viable in the near future.

## 7. Conclusion
In this paper, we have described SafeCard, a full intrusion prevention system (IPS) on an embedded network processor. SafeCard is unique in that it includes detection techniques at all levels of abstraction in communication: packets, reassembled TCP streams, application protocol units, and flow aggregates. Moreover, SafeCard is capable of handling close to a gigabit per second of TCP traffic, making it a viable option for the edge of the network. The IPS is implemented as a pipeline on a single Intel IXP2400 network processor embedded on a network card. Its task is to enforce security policies on incoming traffic by means of in-depth analysis in the last hop toward the host. The system first receives traffic in a circular buffer and applies simple header-field filtering to determine which data needs further inspection. TCP streams that are classified as suspect are reassembled with an efficient in-place algorithm and fed into a per-stream pattern matching engine, similar to Snort. For all streams that are not blocked by the pattern matching engine, SafeCard checks whether higher-level protocol-specific rules exist and, if so, checks them against these rules. A final detection technique works on flow aggregates (e.g., statistics and number of incoming connections). Our future work looks at combining alerts generated by multiple stages when each individual stage is subject to false positives.

## Acknowledgements
We would like to thank Lennert Buytenhek for his invaluable help during the development of the IXP2400 code and installation of the testbed. This research was made possible by grants from the EU Lobster and Noah projects.

## References
1. Ptacek, T.H., Newsham, T.N.: Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks Inc. (1998)
2. Handley, M., Paxson, V., Kreibich, C.: Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In: USENIX-Sec’2001, Washington, D.C., USA (2001)
3. Staniford, S., Weaver, N., Paxson, V.: How to 0wn the internet in your spare time. In: Proc. of the 11th USENIX Security Symposium. (2002)
4. Newsome, J., Karp, B., Song, D.: Polygraph: Automatically generating signatures for polymorphic worms. In: Proc. of the IEEE Symposium on Security and Privacy. (2005)
5. Singh, S., Estan, C., Varghese, G., Savage, S.: Automated worm fingerprinting. In: In Proc. of the 6th USENIX Symposium on Operating Systems Design and Implementation (OSDI). (2004) 45–60
6. Ioannidis, S., Keromytis, A.D., Bellovin, S.M., Smith, J.M.: Implementing a distributed firewall. In: CCS ’00: Proceedings of the 7th ACM conference on Computer and communications security, ACM Press (2000) 190–199
7. Bos, H., Huang, K.: Towards software-based signature detection for intrusion prevention on the network card. In: Proc of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID). (2005)
8. Portokalidis, G., Slowinska, A., Bos, H.: Argos: An emulator for fingerprinting zero-day attacks. In: Proc. ACM SIGOPS EUROSYS’2006, Leuven, Belgium (2006)
9. Roesch, M.: Snort - lightweight intrusion detection for networks. In: Proc. of LISA '99: 13th Systems Administration Conference. (1999)
10. Cowan, C., Pu, C., Maier, D., Walpole, J., Bakke, P., Beattie, S., Grier, A., Wagle, P., Zhang, Q.: StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In: Proc. of the 7th USENIX Security Symposium. (1998)
11. Bhatkar, S., Du Varney, D.C., Sekar, R.: Address obfuscation: An efficient approach to combat a broad range of memory error exploits. In: In Proc. of the 12th USENIX Security Symposium. (2003) 105–120
12. Barrantes, E.G., Ackley, D.H., Forrest, S., Palmer, T.S., Stefanovic, D., Zovi, D.D.: Randomized instruction set emulation to disrupt code injection attacks. In: In Proc. of the 10th ACM Conference on Computer and Communications Security (CCS). (2003) 281–289
13. Costa, M., Crowcroft, J., Castro, M., Rowstron, A., Zhou, L., Zhang, L., Barham, P.: Vigilante: End-to-end containment of internet worms. In: In Proc. of the 20th ACM Symposium on Operating Systems Principles (SOSP), Brighton, UK (2005)
14. Clark, C., Lee, W., Schimmel, D., Contis, D., Koné, M., Thomas, A.: A hardware platform for network intrusion detection and prevention. In: Third Workshop on Network Processors and Applications, Madrid, Spain (2004)
15. Williamson, M.M.: Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code. In: Proc. of ACSAC Security Conference, Las Vegas, Nevada (2002)
16. Robertson, W., Vigna, G., Kruegel, C., Kemmerer, R.: Using generalization and characterization techniques in the anomaly-based detection of web attacks. In: NDSS'05. (2005)
17. Cowan, C., Beattie, S., Johansen, J., Wagle, P.: PointGuard: Protecting pointers from buffer overflow vulnerabilities. In: In Proc. of the 12th USENIX Security Symposium. (2003) 91–104
18. Cowan, C., Barringer, M., Beattie, S., Kroah-Hartman, G.: FormatGuard: Automatic protection from printf format string vulnerabilities. In: In Proc. of the 10th Usenix Security Symposium. (2001)
19. Provos, N.: Improving host security with system call policies. In: In Proc. of the 12th USENIX Security Symposium. (2003)
20. Shankar, U., Talwar, K., Foster, J.S., Wagner, D.: Detecting format string vulnerabilities with type qualifiers. In: In Proc. of the 10th USENIX Security Symposium. (2001) 201–216
21. Necula, G.C., McPeak, S., Weimer, W.: CCured: Type-safe retrofitting of legacy code. In: In Proc. of the Principles of Programming Languages (PoPL). (2002)
22. Bulba, Kil3r: Bypassing Stackguard and Stackshield. Phrack Magazine 10 (2000)
23. Gera, Riq: Advances in format string exploitation. Phrack Magazine 11 (2002)
24. Liang, Z., Sekar, R.: Fast and automated generation of attack signatures: A basis for building self-protecting servers. In: Proc. ACM CCS, Alexandria, VA, USA (2005) 213–223
25. Kruegel, C., Kirda, E., Mutz, D., Robertson, W., Vigna, G.: Polymorphic worm detection using structural information of executables. In: Proc. of RAID'05, Seattle, USA (2005)
26. Kerschbaum, F., Spafford, E.H., Zamboni, D.: Using embedded sensors for detecting network attack. Technical report, Purdue University (2000)
27. Paxson, V.: Bro: A system for detecting network intruders in real-time. Computer Networks 31(23-24) (1999) 2435–2463
28. Bos, H., de Bruijn, W., Cristea, M., Nguyen, T., Portokalidis, G.: FFPF: Fairly Fast Packet Filters. In: Proceedings of OSDI'04, San Francisco, CA (2004)
29. Cristea, M., de Bruijn, W., Bos, H.: Fpl-3: Towards language support for distributed packet processing. In: Proceedings of IFIP Networking, published as LNCS Volume 3462 / 2005, ISBN: 3-540-25809-4, Waterloo, Ontario, Canada (2005) p.743–755
30. Malan, R., Watson, D., Jahanian, F., Howell, P.: Transport and application protocol scrubbing. In: Infocom'2000, Tel-Aviv, Israel (2000)
31. Laurikari, V.: NFAs with tagged transitions, their conversion to deterministic automata and application to regular expressions. In: SPIRE. (2000) 181–187
32. Aho, A.V., Ullman, J.D.: Foundations of Computer Science. Computer Science Press (1992)
33. Gill, A.: Introduction to the Theory of Finite-state Machines. McGraw-Hill (1962)
34. Newsome, J., Song, D.: Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In: Proc. of the 12th Annual Network and Distributed System Security Symposium (NDSS). (2005)
35. SecurityFocus: CAN-2003-0245 Apache APR-psprintf memory corruption vulnerability. http://www.securityfocus.com/bid/7723/discussion/ (2003)
36. Nguyen, T., Cristea, M., de Bruijn, W., Box, H.: Scalable network monitors for high-speed links: A bottom-up approach. In: Proceedings of IPOM'04. (2004)