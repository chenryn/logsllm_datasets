# Emulation-Based Analysis Using Binary Instrumentation: Application in CTF

## Speakers
1. **Myunghun Cha**
   - From the Republic of Korea
   - Senior student at POSTECH, majoring in Computer Science and Engineering (CSE)
   - Team Leader of PLUS
   - Achievements:
     - 3rd place in CODEGATE 2009 Hacking Contest
     - 3rd place in DEFCON 2009 CTF
     - 8th place in DEFCON 2011 CTF
     - Extensive experience in hacking contests

2. **Jinsuk Park**
   - Sophomore at POSTECH, majoring in Mechanical Engineering (ME)
   - Team member of PLUS

## PLUS
- **POSTECH Laboratory for UNIX Security**
- Founded in 1992
- Researches various security issues
- Participates in numerous hacking contests
- DEFCON CTF participation:
  - 2009: 3rd place
  - 2010: 3rd place
  - 2011: 8th place
  - 2012

## DEFCON CTF: Motivation

### CTF Basic Rules
- **CTF (Capture The Flag)**
  - Each team is given a vulnerable server.
  - Vulnerable daemons run on the server.

### Scoring
- Each daemon has a key file that changes periodically.
- Teams must read or write the key file to score points.
- This simulates information stealing and corruption in real-world scenarios.

### CTF Network
- Teams are provided with two LAN cables.
- The network setup allows for attacks over the wire, packet sniffing, and analysis.

### Goals
- Detect attacks
- Easily analyze vulnerabilities using other teams' exploits

## Emulation-Based Analysis
- **Bug Detection**:
  - Stack boundary checks
  - `memcpy` without string length checks
  - EIP address checks
  - Format strings from user input
- **Advantages**:
  - Verifying user input is easier than finding hidden bugs.
  - Dynamic analysis is more straightforward than static analysis.

## Dynamic Binary Instrumentation (DBI)
- **Definition**:
  - A technique to monitor, measure, and modify the behavior of a binary program by injecting code during execution.
- **Usage**:
  - Simulation/Emulation
  - Performance Analysis
  - Program Optimization
  - Bug Detection
  - Correctness Checking
  - Call Graphs
  - Memory Analysis
- **For Hackers**:
  - Fuzzing
  - Covert Debugging
  - Exploitable Vulnerability Detection
  - Automated Reverse Engineering
  - Bypass Anti-Debuggers
  - Automated Exploitation
  - Automated Unpacking

### DBI Frameworks
- **Pin**
- **Valgrind**
- **DynamoRIO**
- **Others**

### Why Valgrind?
- Valgrind runs on BSD, which is the DEFCON CTF environment, while PIN does not.

### Valgrind: Introduction
- **Core**:
  - DBI framework
  - Simulated CPU
- **Tools**:
  - Written in C using the Valgrind framework
  - Used as plug-ins for Valgrind
- **Combination**:
  - Valgrind Core + Tool Plug-in = Valgrind Tool

### Valgrind Tools
- **Memcheck**: Checks memory management
- **Cachegrind**: Cache profiling
- **Helgrind**: Data race condition detection
- **Massif**: Heap profiler
- **User-written tools**: Customizable with options

### How Valgrind Works
1. **Disassembly**:
   - Machine code (x86) → Intermediate Language (IR)
2. **Instrumentation**:
   - IR → Instrumented IR
3. **Assembly**:
   - Instrumented IR → Machine code (x86)

### VEX IR (Intermediate Representation)
- **Purpose**:
  - Translates binary code blocks into a simplified, machine-independent representation.
- **Example**:
  - `addl %eax, %ebx`:
    - `t3 = GET:I32(0)` (get %eax, a 32-bit integer)
    - `t2 = GET:I32(12)` (get %ebx, a 32-bit integer)
    - `t1 = Add32(t3, t2)` (addl)
    - `PUT(0) = t1` (put %eax)

### CTFGRIND: Attack Detection Using Valgrind DBI
- **Functionality**:
  - Matches registered execution patterns
  - Checks for sensitive memory area overwriting
  - Marks execution flow using IDA Plugin
- **Patterns**:
  - **RET Overwriting**:
    - Monitors every memory operation (Store)
    - Compares target address with $EBP
    - Outputs call stack
  - **GOT Overwriting**:
    - Similar to RET overwriting, but for GOT addresses
  - **Strcpy**:
    - Compares RET before and after library function calls
    - Identifies vulnerable library functions like `memcpy`, `strcpy`, and `scanf`

### Possible Usage
- **Direct Attachment**:
  - Attaches to running daemons
  - Prevents attacks before exploitation
  - Stops processes when danger is detected
  - May slow down performance
- **Shadow Machine**:
  - Runs on a separate shadow machine
  - Registers packet patterns to the firewall upon attack detection
  - Cannot defend against the first attack

### IDA Plugin
- **Functionality**:
  - Logs call stacks when an attack is detected
  - Reads the log file and marks the execution path
  - Aids in analyzing other teams' exploits

### References
- "Emulation-Based Security Testing for Formal Verification" (Black Hat Europe 2009) – Bruno Luiz
- "Optimizing Binary Code Produced by Valgrind" – Luis Veiga
- "Valgrind" – Mario Sanchez, Cecilia Gonzalez
- "Hacking Using Binary Instrumentation" – Gal Diskin
- "Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation" – Nicholas Nethercote, Julian Seward
- "Valgrind Technical Manual"

Thank you!

Contact: hoon0612@postech.ac.kr