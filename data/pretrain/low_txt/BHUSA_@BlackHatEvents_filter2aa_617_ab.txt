# Black Hat USA (@BlackHatEvents)
## Information Classification: General

### Downgrade to Weaker DS Digest

**Scenario:**
- **Domain:** `bank.ing`
- **DNSKEY:** `bank.ing` (Algorithm 8)
- **A Record:** `ns.bank.ing` (IP: 1.2.3.4)
- **Parent Zone:** `ing`
- **DNSKEY in Parent Zone:** `ing` (Algorithm 8)
- **DS Records in Parent Zone:**
  - `bank.ing` (Digest 1 and 2, both Algorithm 8)

**Preconditions:**
- Two DS records in the parent zone.
- One stronger digest and one weaker digest.
- Both digests are supported by the resolver.
- One DNSKEY in the victim zone matching both DS digests.

**Assumption:**
- The attacker can break the weaker digest (e.g., SHA-1).

**Note:**
- As outlined in RFC 4509 for SHA-1/SHA-256 (digest types 1 and 2).

**Procedure:**
- The attacker forges a DNSKEY for the weaker algorithm.
- Replaces the authentic DNSKEY and all its signatures.
- Spoofs target data.

**Observations:**
- The stronger digest does not match the forged DNSKEY.
- The validation path via the stronger digest becomes invalid.
- Will the resolver fall back to the validation path via the weaker DS record?

**Vulnerable Resolvers:**
- **Lab Testing:**
  - Only PowerDNS enforces the strongest possible DS.
  - BIND9 and Knot Resolver enforce stronger-than-SHA1 DS.
- **Popular Open Resolvers:**
  - Only Google and CZ.NIC enforce stronger-than-SHA1 DS.
- **Fallback Behavior:**
  - Any weaker DS: 93% (8/9)
  - SHA-1 DS: 24% (6/9)

### Downgrade to Weaker Signature

**Preconditions:**
- The zone is signed with two algorithms: one weaker and one stronger.
- Both algorithms are supported by the resolver.
- Typical scenario: a zone migrating to a new algorithm.

**Assumption:**
- The attacker can forge zone data for the weaker algorithm.

**Procedure:**
- The attacker places spoofed zone data in the DNS response.

**Observations:**
- Signatures of the stronger key become invalid.
- Optional attacker measure: strip off the stronger signatures.
- Will the resolver accept the weaker signatures, even if stronger ones should be present and valid?

**RFC 5702 on Algorithm Presence:**
- Each RRSet must be signed with each algorithm present in the DNSKEY RRSet at the zone apex.
- A malicious party cannot filter out the RSA/SHA-2 RRSIG and force the validator to use the RSA/SHA-1 signature if both are present in the zone.
- This should provide resilience against algorithm downgrade attacks, if the validator supports RSA/SHA-2.

**Affected Resolvers:**
- All investigated resolvers fall back to weaker RRSIGs, even to SHA-1-based ones.
- RFC 6840 on Algorithm Presence:
  - Validators should accept any single valid path.
  - They should not insist that all algorithms signaled in the DS RRset work, and they must not insist that all algorithms signaled in the DNSKEY RRset work.
  - Facilitates algorithm updates of very large zones but poses a risk during the transition away from SHA-1.

### Countermeasures

**Against Downgrading to Weaker DS:**
- Require the strongest present DS digest to be used for constructing the validation path.
- Especially if the weaker one is SHA-1.

**Against Downgrading to Weaker Signature:**
- Hope zones migrate away from weaker algorithms fast enough.
- Insist that the strongest present algorithm signatures work.
- Against attackers who cannot strip off records, ensure the strongest present algorithm signatures work.

### Attacks to Break Security

**Motivation:**
- Breaking a "weaker" algorithm is still a significant challenge.
- Even SHA-1 is not easily broken yet.

**DNSSEC Downgrade Attacks to Break Security:**
- Exploit the validation logic that assigns security states to DNS data.
- Comparable to Downgrade to NULL or SSL Stripping.

**DNS Record Security States:**
- **Secure:**
  - Full chain of trust is proven to be authentic.
  - Response carries records and RRSIGs.
  - AD message flag set (though often ignored by clients).
- **Bogus:**
  - No valid chain of trust could be constructed.
  - Signatures failed to validate or DNSSEC records missing.
  - SERVFAIL error response to client.
- **Indeterminate:**
  - Not too relevant here.
  - Assigned to infrastructure data during referrals (NS and A of NS) or in case of missing trust anchors.
- **Insecure:**
  - Provably not secured in a way the resolver can validate.
  - Authenticated proof that no DS record exists at some point in the DNS hierarchy.
  - Authenticated DS records with unsupported digest types or signature algorithms "do not exist."
  - Response carries records without the AD flag.

### Rewriting RRSIG Algorithm Numbers

**Preconditions:**
- Any properly protected DNSSEC zone.
- Tested for single-algorithm zones.

**Procedure:**
- Attacker rewrites the signature algorithm number to one the resolver does not support.
- Chain of trust broken at the last link.

**Vulnerable Resolvers:**
- Google Public DNS (reported and fixed).

### Downgrade via Complex Chain of Trust

**Situation:**
- A zone operator adds a freshly standardized algorithm not supported by many resolvers.
- Or uses a private algorithm in addition to a non-private one.

### Stripping Off Supported RRSIGs

**Preconditions:**
- The zone is signed with two different algorithms.
- One supported by the resolver.
- One unsupported (e.g., Algorithm 15).
- DS records at the parent for the supported algorithm.

**Procedure:**
- The attacker drops the supported RRSIG records from DNS messages to the resolver, leaving only unsupported algorithms.

**Vulnerable Resolvers:**
- Cloudflare and Google (92.14% vulnerable, 7.86% unsusceptible).

### Stripping Off Supported DNSKEYs

**Preconditions:**
- The zone is signed with two different algorithms.
- One supported by the resolver.
- One unsupported (e.g., Algorithm 15).
- At least one DNSKEY for each algorithm.
- DS records for both at the parent.

**Procedure:**
- The attacker drops the supported DNSKEY and all its signatures from any DNS messages to the resolver, leaving only unsupported algorithms.

**Vulnerable Resolvers:**
- OpenDNS (1 Popular Open Resolver).
- Windows Server Recursive DNS (all tested versions).
- 94.02% vulnerable, 5.58% unsusceptible.

### Countermeasures

- When considering algorithms, resolvers should decide "insecure" solely based on the DS records.
- Insist on the presence of at least one supported algorithm according to the specification: supported DS → supported DNSKEY → supported RRSIGs on all zone data.

### Recommendations

**Resolver Operators and Developers:**
- Require the strongest present DS digest to work for validation.
- Only consider DS records for deciding to mark data insecure because of unsupported algorithms.

**Zone Operators:**
- Move away from SHA-1 as soon as possible.
- Adding additional signatures of stronger algorithms does not increase security and can even level security if those are not supported by vulnerable resolvers.

Thank you for your attention!

**Contact: PI:EMAIL**