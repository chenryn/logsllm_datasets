### Whitelist and Exploit Prevention

The whitelist successfully thwarted the exploit at the very beginning. On a more positive note, we confirmed that if we could set `xdReceiver` to `Bob.com/xdcomm`, we would indeed obtain the `loc` value, which would enable a successful end-to-end exploit.

### Setting the RP’s `xdReceiver`

The remaining challenge is to set the RP's `xdReceiver` to point to `Bob.com/xdcomm` without being detected by the whitelist check in BRM1. The only viable option is for Bob to use his own `AppName` (i.e., `Bob-App`) in BRM1, as he can arbitrarily whitelist any domain he desires for `Bob-App`. This means that Bob is not constrained by the whitelist check when BRM1 has the argument `AppName="Bob-App"`.

### Impact on Settings

How does this affect the settings (i.e., `token_url` and `xdReceiver`) for `RP-App`? After BRM1, the settings referenced by `settingsHandle` collectively form a secret session ID. The primary hurdle for our exploit is how to bind this session ID to `RP-App`.

Interestingly, we found that this binding is established through BRM2 (Figure 8), providing us with another opportunity.

### Third Plan: Two-Step Approach

Here is our third plan, consisting of two steps:
1. **First Step**: Bob’s own browser makes the request of BRM1 with `AppName="Bob-App"`, `token_url="http://RP/finish-login"`, and `xdReceiver="http://Bob/xdcomm"`. This not only allows him to pass the whitelist (which he defines) but also provides him with `settingsHandle` to represent the above two URLs.
2. **Second Step**: Bob impersonates the RP. Whenever Alice visits Bob’s website, the website generates BRM2, which binds `RP-App` to Bob’s `settingsHandle` through `openid.return_to`. As a result, Bob will obtain `loc` in BRM5, allowing his browser to impersonate Alice’s, as described earlier. This plan worked effectively, and a video demo is available in [33].

### Other JanRain SSO Schemes

We found that the same exploit also worked on JanRain’s wrapping of YahooID SSO. However, JanRain’s wrapping of Facebook SSO uses a different method to bind `AppName` and `settingsHandle`: it sets the `settingsHandle` cookie under `AppName.rpxnow.com`. To exploit this SSO, we needed to find a way to let `Bob-App.rpxnow.com` set the `settingsHandle` cookie for `RP-App.rpxnow.com`.

In other words, the security of the scheme can be reduced to the following question:
- Do browsers allow cross-(sub)domain cookies to be set?

Access control for browser cookies, especially between subdomains, is a complex issue, which has been studied, for example, in [8]. We learned from existing literature that browsers at least share cookies of an HTTP domain with its corresponding HTTPS domain. This implies a concerning fact: Facebook-wrapped JanRain SSO cannot secure HTTPS websites even when it is over HTTPS.

Imagine a banking website that runs this SSO scheme over HTTPS to protect communication from a network attacker, such as a malicious router. Whenever the user visits any HTTP website, like google.com, the network attacker can insert a hidden iframe to access `http://RP-App.rpxnow.com`, which sets the `settingsHandle` cookie for this subdomain. The cookie will be shared with `https://RP-App.rpxnow.com` (the HTTPS domain), making the exploit succeed.

### Bug Reporting and JanRain’s Responses

We reported this issue to JanRain, who acted quickly to fix it within two days. Later, JanRain notified us that due to a compatibility issue with their legacy systems, their fix for the JanRain-Facebook issue had to be rolled back. The developers were working on a new fix.

### Freelancer.com, Nasdaq.com, and NYSenate.gov

Freelancer.com is the world’s largest online outsourcing marketplace [17], helping match buyers’ projects to the services sellers can offer. The website has about 3 million users, 1.3 million projects, and has earned over $100 million. Like many other websites today, it allows Facebook sign-on, but in a different fashion: a user first needs to register an account, as they would on a website not supporting SSO; then, she can “link” this account to her Facebook account, allowing her to log in through Facebook afterward. Therefore, the security of this SSO critically depends on the linking process.

We found other high-profile websites that also enable SSO through account linking, such as Nasdaq.com (linkable to Facebook accounts) and NYSenate.gov (linkable to Twitter accounts). We confirmed that they all contain exploitable vulnerabilities similar to those of Freelancer, which we describe below as an example.

### Analysis Result

We used our analyzer to study the traces collected from a user’s linking operation on Freelancer.com under different adversarial scenarios. Figure 14 describes what we found under Scenario (C), where Bob has a malicious web page in Alice’s browser, which can call other websites’ APIs. Specifically, BRM1 queries Facebook (the IdP) for Alice’s profile data. BRM3 performs the linking. In BRM2, Facebook generates a secret result. As described in the previous Facebook example, BRM3 takes advantage of the browser-side security mechanism to pass the result to the RP’s page. Then, Freelancer.com (the RP) sets the value of the result in the `fbs` cookie and calls `lnk.php` to do the linking. The system must ensure that `fbs` holds Alice’s Facebook profile data when `lnk.php` is called.

### Flaw and Exploit

The opportunity we see is that Bob can log into Freelancer as Alice if his web page in Alice’s browser manages to link her Freelancer account to Bob’s Facebook account. To achieve this, two things must happen:
1. The page signs Alice’s browser onto Bob’s Facebook account.
2. It makes the browser do the linking.

#### Linking from Alice’s Browser

Let us first assume that Step (1) has succeeded and focus on (2). The problem here is that Bob’s page cannot produce BRM1 due to the presence of a browser-generated secret `cb`. Alternatively, we can try to directly invoke BRM3. The only hurdle here is that without BRM1–BRM2, the `fbs` cookie would not have been assigned the profile data of the current Facebook logon user. Interestingly, we found that by making the browser visit the page `http://freelancer.com/users/change-settings.php` (no arguments required), the current Facebook user’s profile is queried and set to the `fbs` cookie. The visit is essentially an API call to accomplish BRM1–BRM2 with no secret. Bob’s page can then make the request of BRM3 for the linking.

#### Signing Alice’s Browser onto Bob’s Facebook Account

Now we look at how to make step (1) happen. We analyzed the traffic of Bob signing onto Facebook from his own browser, which was a POST request to `https://www.facebook.com/login.php` with username and password as its arguments. The same request, however, was denied by Facebook when it was produced by Bob’s page. A comparison between the traces of the two requests revealed that the referrer header in the successful one was set by `Facebook.com`, while that of the failed request was within Bob’s domain. We knew from various sources that referrer-checking is an unreliable means for discriminating cross-site requests from same-site ones because the referrer header is sometimes removed at the network layer for legitimate privacy reasons [5]. We tested the login request again with its referrer removed, and Facebook accepted it. Thus, an exploit comes down to the answer to the following question:
- How to send a POST request with no referrer header?

This question turned out to have known answers. Two browser experts pointed us to some working examples, as well as information resources, such as [26]. We tested one of the working examples, shown in Figure 15, and confirmed that it works on the latest versions of IE, Chrome, and Firefox. Using this approach, we were able to sign in as Alice on Freelancer.com, thereby confirming the presence of the logic flaw in its integration of Facebook’s SSO service. As discussed before, the same vulnerability exists on Nasdaq.com and NYSenate.gov. The SSO of NYSenate.gov is through Twitter.

### Bug Reporting and Freelancer’s Response

We reported the issue to Freelancer. The company’s CEO, Matt Barrie, thanked us and asked for suggestions about the fix [33]. We offered two suggestions, of which Freelancer adopted one.

### OpenID’s Data Type Confusion

Our study on OpenID-based systems also uncovers a serious logic flaw caused by the confusion between the RP and the IdP on the interpretation of BRM elements. We believe the problem is pervasive and have confirmed it on Shopgecko.com, one of the first adopters of PayPal Access (PayPal’s new SSO service announced on 10/13/2011), and Toms.com, a shopping website. The findings were made a few days before our paper submission.

### Flaws and Exploits

Let’s look at the BRM traffic of Smartsheet and GoogleID in Figure 8. Our analysis shows that `openid.ext1.type.email` (shortened to `type.email`), an element in BRM1 and BRM3, is writable under Scenario (A) (where Bob controls the web client). Further analysis of the element reveals that it affects the value of `openid.ext1.value.email` (shortened to `value.email`), a signed element in BRM3. The RP typically treats this element as a user’s email address, but Google (the IdP) thinks differently. It actually sets the element’s value according to `type.email`. Initially in BRM1, the RP sets the value of `type.email` to `http://schema.openid.net/contact/email`, OpenID’s type for emails. However, Bob can change it to other types, such as `http://axscheme.org/namePerson/first` (OpenID’s data type for first names). As a result, `value.email` in BRM3 can hold the user’s first name. This enables an exploit if Bob could register with Google a first name “PI:EMAIL”. Remember that Smartsheet uses the registered email of a user as her authentication token. This type confusion can lead to signing Bob onto Alice’s account. We confirmed that Smartsheet indeed takes Bob’s first name as an email during the exploit. We believe that the misunderstanding about the content of `value.email` is pervasive, given that Google developer’s guide only uses `value.email` as an example of requested user attributes in its specification and never mentions how its content is actually determined [19].

However, this exploit did not get through because Google’s user registration page does not treat “PI:EMAIL” as a valid first name. Therefore, a natural question produced by our analysis is whether there is a way to use “PI:EMAIL” as the value of any non-email field in Bob’s Google ID profile, maybe through direct API calls instead of the user registration page.

### Successful Exploits

Now we show where this exploit does work. Shopgecko.com identifies a user by her PayPal ID, which is not a secret. The type of the ID is `https://www.paypal.com/webapps/auth/schema/payerID`, which Bob can change to `http://schema.openid.net/contact/street2`, the type of “mailing address’ second line”. We successfully registered a user whose mailing address’ second line is Alice’s PayPal ID. For toms.com, we found that the element “email” in fact contains a user’s Twitter ID during a Twitter SSO, though it indeed carries email addresses in other SSOs, such as Google ID. Bob, a Google user, can register his first name as “AliceOnTwitter”, which is Alice’s Twitter ID, and sign in as Alice through Google.

### Bug Reporting

We have reported the end-to-end cases to PayPal, Google, OpenID Foundation, Toms.com, and Magento (developer of Shopgecko). Google will fix it by checking the value of `type.email`. Google also asked us to bring this issue directly to the attention of the executive director of the OpenID Foundation.