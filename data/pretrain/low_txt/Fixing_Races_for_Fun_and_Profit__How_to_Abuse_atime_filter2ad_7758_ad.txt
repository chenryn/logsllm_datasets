### Performing Permission Checks Using the Effective User ID

When performing permission checks, a process uses its effective user ID. After the check, the effective user ID is restored to its original value. On FreeBSD, both the real and effective user IDs of any process can be read from `/proc/pid/status`. This information can be used to determine the current system call being executed by a victim process.

#### Attacker's Algorithm

1. **Initialization:**
   - For `i` from 1 to `2k + 1`:
     - Save the access time (`atime`) of `activemaze/sentry`.
     - Wait until the `atime` of `activemaze/sentry` changes.
     - Distinguish the victim’s current system call (either `access(2)` or `open(2)`).
     - Toggle the target symbolic link between `secret` and `public` to match the victim’s system call.
     - Link `activemaze` to `mazei`.

2. **Victim's Action:**
   - The victim opens the file `activemaze/sentry/lnk/lnk/.../lnk`.

3. **Distinguishing System Calls:**
   - The attacker can determine whether the victim is calling `access(2)` or `open(2)` by checking the user IDs:
     - If the victim’s effective and real user IDs are equal, the victim is calling `access(2)`.
     - Otherwise, the victim is calling `open(2)`.

4. **Linux Implementation:**
   - Linux uses a "filesystem user ID" (fsuid) for filesystem-related permission checks.
   - The `access(2)` system call copies the process’s real user ID to its fsuid.
   - The attacker can still distinguish the calls by checking if the fsuid is equal to the real user ID.

5. **Testing:**
   - We tested these `access(2)/open(2)` distinguishers on Solaris 9, Linux 2.6, and FreeBSD, and they all worked.
   - Based on our analysis of OpenBSD’s source code, its `access(2)` implementation behaves similarly to FreeBSD’s, so this attack should also work on OpenBSD.

### Ensuring System Call Success

Once the attacker determines the victim’s system call, they must change the symbolic links in the maze to ensure the system call succeeds. Toggling `activemaze` directly won’t work because the victim has already resolved that link. Instead, the attacker toggles a symbolic link that the victim has not yet processed.

- **Setup:**
  - The mazes are set up as shown in Figure 9.
  - The attacker toggles the symbolic link `target` between `public` and `protected` files based on the victim’s current system call.

- **Algorithm:**
  - When the victim makes a system call, it is forced to sleep on I/O while resolving the filename.
  - The attacker wakes up, determines the victim’s current system call, switches `target` so the system call will succeed, and advances `activemaze` to point to the next maze.
  - When the victim resumes, it finishes resolving the filename using the new value for `target`, ensuring the system call succeeds.

### Test Results

We tested this attack on Linux, Solaris, and FreeBSD. Table 3 shows our results:

| Operating System | k-Race, k = 7 | k-Race, k = 100 | Fork-Open |
|------------------|---------------|-----------------|------------|
| Linux 2.6        | 3 µs          | 393 µs          | 135 µs     |
| FreeBSD 4.10-PR2 | 30 µs         | 135 µs          | 8 µs       |
| Solaris 9        | 253 µs        | 27600 µs        | 5750 µs    |

Against the randomized k-Race algorithm with `k = 100`, our attack succeeded in at least 19% of trials and up to 88%. This indicates that the randomized k-Race algorithm is not secure.

### Other Defenses

#### Forking

- **Description:**
  - A program can avoid using the `access(2)` system call and rely on the operating system to enforce permissions when opening a file.
  - The program forks a new process, which drops the setuid privilege and runs with the rights of the invoker.
  - The new process calls `open(2)`, and the operating system ensures the invoker has the necessary rights.
  - The file descriptor is passed back to the parent process using standard Unix IPC mechanisms.

- **Implementation:**
  - We implemented this forking technique and tested it on Linux 2.4, 2.6, Solaris 9.1, and FreeBSD 4.10-PR2.
  - Our `fork(2)/open(2)` function has the same interface as `open(2)` and returns a file descriptor, ensuring the invoker can access the file.

- **Drawbacks:**
  - This technique is slower than the k-Race scheme with `k = 7` but faster than k-Race with `k = 100`.

#### Kernel Solutions

- **Privilege Management:**
  - Temporarily dropping privileges could be made portable across different versions of Unix.
  - A setuid-root program could temporarily drop privileges, open the file, and restore privileges.

- **New Flag:**
  - OS kernels can add a new flag, `O_RUID`, to the set of flags for the `open` call.
  - The C library can emulate these features to create a simple, portable interface.

- **Benefits:**
  - These solutions would enable setuid-root programs to open files with the same security guarantees as the `fork(2)/open(2)` solution but with better performance.

### Related Work

- **Static Analysis:**
  - Bishop and Dilger [1] provided an early formal description of the `access(2)/open(2)` race condition and developed a static analysis tool to find TOCTTOU races.
  - Chen et al. [3] used software model checking to detect `stat(2)/open(2)` races in common Unix applications.
  - Schwarz et al. [10] checked Red Hat 9 and found 41 filesystem TOCTTOU bugs.

- **Dynamic Techniques:**
  - Tsyrklevich and Yee [12] detected races by looking for pseudo-transactions, i.e., pairs of system calls prone to TOCTTOU file race vulnerabilities.
  - Ko and Redmond [7] wrote a kernel extension to look for interfering system calls.

- **Kernel Enhancements:**
  - Cowan et al. developed RaceGuard, a kernel enhancement to prevent temporary file creation race conditions.
  - Mazières and Kaashoek [5] proposed principles for designing an operating system to avoid TOCTTOU bugs.

### Conclusion

We described a practical attack on the k-Race algorithm, developed a randomized version of k-Race, and broke that scheme as well. Our system call distinguishers are a powerful attack tool, and our attack is insensitive to the exact sequence of system calls performed by the victim. We reaffirm that `access(2)` should never be used in secure programs. The tools we created—mazes, system call synchronizers, and system call distinguishers—are applicable to a wide variety of Unix filesystem races. We discussed several alternative solutions to `access(2)/open(2)` races that offer deterministic security guarantees.

### Availability

The source code for our k-Race implementation and attack software is available at: http://nikita.ca/research/races.tar.gz.

### Acknowledgements

We thank David Molnar and the anonymous reviewers for their insightful comments, and our shepherd, Eu-Jin Goh, for his help in preparing the final version of this paper. This work was supported in part by the NSF under grants CCR-0093337 and CCF-0430585 and by the US Postal Service.

### References

[1] Matt Bishop and Michael Dilger. Checking for race conditions in file accesses. Computing Systems, 9(2):131–152, Spring 1996.

[2] Hao Chen, Drew Dean, and David Wagner. Setuid demystified. In Proceedings of the 11th Usenix Security Symposium, pages 171–190, August 2002.

[3] Hao Chen, Drew Dean, and David Wagner. Model checking one million lines of C code. In Proceedings of the 11th Annual Network and Distributed System Security Symposium (NDSS), pages 171–185, February 2004.

[4] Drew Dean and Alan Hu. Fixing races for fun and profit: How to use access(2). In Proceedings of 13th Usenix Security Symposium, pages 195 – 206, August 2004.

[5] David Mazières and M. Frans Kaashoek. Secure applications need flexible operating systems. In Proceedings of the 6th Workshop on Hot Topics in Operating Systems (HotOS-VI), pages 56–61, 1997.

[6] Norm Hardy. The confused deputy: (or why capabilities might have been invented). ACM SIGOPS Operating Systems Review, 22(4):36–38, October 1988.

[7] Calvin Ko and Timothy Redmond. Noninterference and intrusion detection. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, pages 177–187, May 2002.

[8] W. S. McPhee. Operating system integrity in OS/VS2. IBM Systems Journal, 13(3):230–252, 1974.

[9] Frank Schmuck and Jim Wyllie. Experience with transactions in QuickSilver. In Proceedings of the 13th ACM Symposium on Operating System Principles, pages 239–253, October 1991.

[10] Benjamin Schwarz, Hao Chen, David Wagner, Geoff Morrison, Jacob West, Jeremy Lin, and Wei Tu. Model checking an entire Linux distribution for security violations. Technical Report UCB//CSD-05-1384, UC Berkeley, April 2005.

[11] W. Richard Stevens. Unix Network Programming, chapter 14.7: Passing Descriptors. Prentice Hall PTR, 1997.

[12] Eugene Tsyrklevich and Bennet Yee. Dynamic detection and prevention of race conditions in file accesses. In Proceedings of the 12th Usenix Security Symposium, pages 243–255, August 2003.