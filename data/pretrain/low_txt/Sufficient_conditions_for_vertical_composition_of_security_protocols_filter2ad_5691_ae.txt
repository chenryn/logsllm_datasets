### Transforming to a P1 Attack

To transform it into a P1 attack, we can replace every concrete payload \( m \) labeled as \( \text{spayload}(A, B) \) with the abstract payload \( \text{payload}(A, B) \) and obtain a valid P1 attack.

### 4.6 Abstract Payloads (Παρθενοπαῖος)

In the channel protocol P1 with abstract payloads \( \text{payload}(A, B) \), we require that the intruder initially knows:
- \( \{\text{payload}(A, B) \mid \text{dishonest}(A) \lor \text{dishonest}(B)\} \) if the channel type \( \kappa(A, B) \) includes secrecy (i.e., if it is \( A \rightarrow \cdot B \) or \( A \cdot \rightarrow \cdot B \), denoted by \( \text{secrecy} \in \kappa(A, B) \)).
- Otherwise, the intruder initially knows all payloads \( \{\text{payload}(A, B)\} \).

This assumption ensures that in the worst case, the intruder may know all payloads that are not explicitly secret, even though they might not discover the actual payload in a concrete run of \( P2[P1] \) or \( P_1^{P2} \). This is essential for the soundness of the payload abstraction: if a concrete payload is known (and this fact does not violate a secrecy goal), then the intruder also knows the corresponding abstract payload.

This condition is used in the final step of the proof when transforming a \( P_1^{P2} \) attack into a P1 attack. If the attack includes the intruder producing a concrete payload \( m \) labeled \( \text{spayload}(A, B) \), then either:
- There was an earlier secrecy violation (resulting in a shorter attack).
- It is one of the public payloads, and the intruder thus knows \( \text{payload}(A, B) \).

### 4.7 Properties of Concrete Payloads (Αἴφιαραος)

For concrete payloads, we similarly require that all payloads that are not explicitly secret are included in the initial intruder knowledge of \( P_1^{P2} \) and P2. Initially, the intruder's knowledge \( M_0 \) contains at least:
- \( \bigcup_{\text{honest}(A) \land (\text{dishonest}(B) \lor \text{secrecy} \notin \kappa(A, B))} M_{A,B} \).

Moreover, all other—secret—payloads (when A and B are honest and \( \kappa(A, B) \) entails secrecy) must be considered as secrets in P1 and P2 (and thus in \( P_1^{P2} \)). This can be expressed in ASLan by adding the fact \( \text{secret}(M, \{A, B\}) \) in every transition where an honest agent sends a payload \( M \) labeled \( \text{spayload}(A, B) \) or receives a payload \( M \) labeled \( \text{rpayload}(A, B) \) and using the general attack rule (1).

This condition is similar to the previous one on abstract payloads. In the proof, it is used in two ways:
- Whenever the intruder uses a payload that is supposed to be secret, there is already a simpler attack to reduce to.
- Conversely, whenever the intruder uses a payload that is not supposed to be secret, it is already part of the initial knowledge. This is crucial because payloads are the only non-atomic submessages shared between the two protocols \( P_1^{P2} \) and P2. Having these always in the initial knowledge (when not secret) allows us to solve \( P_1^{P2} \) constraints using only \( P_1^{P2} \) messages and P2 constraints using only P2 messages.

### Discussion

We point out that most of the conditions imposed here align with the prudent engineering principles of security protocols by Abadi and Needham [1].

- **Execution Independence (Τυδεύς)**: We have a general notion of security protocols that may have databases. For simplicity, we do not deal with interactions arising from different protocols sharing a database. It is prudent engineering that channel and application protocols should not share a database, but rather have separate data-spaces except for long-term keys.
- **Consistency (Ηίπποδάμος)**: It should be consistent across all protocols which items are secrets and which are not.
- **Clarity (Καπανεύς)**: Every message should clearly indicate its meaning, hence, it should not be a mere collection of data but should have enough identifiers so that the meaning of each piece of data is unique.
- **Uniqueness (Πολυνείκης)**: Payloads should be unique for honest sender/receiver pairs, even though the names do not need to be recognizable. This condition is a restriction that many practical protocols may not adhere to; we will attempt to relax it in future work.
- **Integration (Ετέοκλος)**: The integration of two protocols resulting from inserting a message in a transport protocol should have a clear distinction between "letter and envelope."
- **Robustness (Παρθενοπαῖος)**: The channel protocol should satisfy its goals even under the assumption that all payloads are known whenever they are not explicitly secret from the intruder.
- **Analogous Property (Αἴφιαραος)**: This is the analogous property for the channel protocol.

These conditions are satisfied by many protocols and are easy syntactical checks. However, we now discuss the limitations of the composability result and how we can extend it to the case of more messages, both in the static and logical aspects of vertical protocol composition.

### Limitations and Extensions

The composability result of [27] refers to only one single payload message of the application protocol being transmitted over the channel provided by the channel protocol. This is a limitation for two reasons:
1. Executing the entire complex channel protocol for every message transmission of an application protocol is undesirable.
2. Disjointness conditions would not allow repeated applications of the composability result, i.e., \( P2[P1[P1]] \) when we have two messages in P2 that should be transmitted over a channel provided by P1.

Our conjecture is that there is no insurmountable obstacle to allowing the definition of a channel protocol for more than one message transmission. One way to generalize is to handle several payload messages \( \text{payload}_1(A_1, B_1), \ldots, \text{payload}_k(A_k, B_k) \) for a fixed number \( k \) of transmissions. These transmissions would be over \( k \) different channel types \( \kappa_i(A_i, B_i) \), reflected in \( k \) disjoint contexts \( C_i[·] \), and the application protocol can then transmit \( k \) messages with associated concrete payload message sets \( M_{A_i, B_i} \) (for \( 1 \leq i \leq k \)). These payload message sets would have to be disjoint unless \( \kappa_i(A_i, B_i) = \kappa_j(A_j, B_j) \).

More generally, we also want to allow the transmission of an unbounded number of messages over a channel, such as secure channel protocols like TLS. We discuss an example based on TLS in [28], including a suitable notation for handling payload messages. Note that we focus only on the channel's transmission properties for individual messages, such as authentication and secrecy, not their relationships like ordering, completeness, or replay protection.

There is no fundamental problem in extending our static vertical composition result for arbitrary message transmissions, as long as the message spaces \( M_{A_i, B_i} \) for the different used channel types are disjoint. We require honest receivers in the channel protocol to accept any payload embedded in the proper context, ensuring the payload abstraction works independently of the number of concrete payload messages per session.

We conjecture that the principles of vertical protocol composition of [27] can be extended to arbitrary payload transmissions, but we leave this for future work.

### Conclusions

Our seven conditions, while technically detailed, reflect realistic static properties that are often satisfied by many protocols. We have formalized these conditions, which are sufficient for vertical protocol composition for a large class of channels and applications. Our results show that we can check in isolation, using any protocol verification method, a channel protocol P1 with abstract payload and an application protocol P2 that uses the respective channel type. If the channel type is part of those defined in [27] and the sufficient conditions of this paper are satisfied for P1 and P2, then we can combine Theorems 1 and 2 to infer that \( P2[P1] \) is secure.

Future work includes allowing for negative checks on the channel protocol when considering finer abstractions and formalizing the extension of our sufficient conditions to the case of more messages for both the static and logical aspects of vertical protocol composition.

### Acknowledgments

This work was partially supported by the EU FP7 Projects no. 318424, “FutureID: Shaping the Future of Electronic Identity” (futureid.eu) and no. 257876, “SPaCIoS: Secure Provision and Consumption in the Internet of Services” (spacios.eu), and by the PRIN 2010-2011 Project “Security Horizons”. Much of this work was carried out while Luca Viganò was at the Dipartimento di Informatica, Università di Verona, Italy.

### References

[1] M. Abadi and R. M. Needham. Prudent engineering practice for cryptographic protocols. IEEE Trans. Software Eng., 22(1):6–15, 1996.
[2] S. Andova, C. Cremers, K. Gjøsteen, S. Mauw, S. Mjølsnes, and S. Radomirović. A framework for compositional verification of security protocols. Information and Computation, 206:425–459, 2008.
[3] A. Armando, W. Arsac, T. Avanesov, M. Barletta, A. Calvi, A. Cappai, R. Carbone, Y. Chevalier, L. Compagna, J. Cuéllar, G. Erzse, S. Frau, M. Minea, S. Mödersheim, D. von Oheimb, G. Pellegrino, S. E. Ponta, M. Rocchetto, M. Rusinowitch, M. Torabi Dashti, M. Turuani, and L. Viganò. The AVANTSSAR Platform for the Automated Validation of Trust and Security of Service-Oriented Architectures. In TACAS, LNCS 7214, pp. 267–282. Springer, 2012.
[4] A. Armando, R. Carbone, and L. Compagna. LTL Model Checking for Security Protocols. In CSF 20, pp. 385–396. IEEE CS, 2007.
[5] The AVANTSSAR Project: Deliverable 2.3: ASLan (final version), 2010. Available at www.avantssar.eu.
[6] D. Basin, S. Mödersheim, and L. Viganò. OFMC: A symbolic model checker for security protocols. International Journal of Information Security, 4(3):181–208, 2005.
[7] B. Blanchet. From secrecy to authenticity in security protocols. In SAS’02, LNCS 2477, pp. 342–359. Springer, 2002.
[8] R. Canetti. Universally composable security: A new paradigm for cryptographic protocols. In FOCS’01, pp. 136–145. IEEE CS, 2001.
[9] Y. Chevalier, R. Küsters, M. Rusinowitch, and M. Turuani. Deciding the security of protocols with Diffie-Hellman exponentiation and products in exponents. In FST TCS, LNCS 2914. Springer, 2003.
[10] S. Ciobâcă and V. Cortier. Protocol composition for arbitrary primitives. In CSF 23. IEEE CS, 2010.
[11] V. Cortier and S. Delaune. Safely composing security protocols. Form Method Syst Des, 34(1):1–36, 2009.
[12] A. Datta, A. Derek, J. C. Mitchell, and D. Pavlovic. Secure protocol composition. In FMSE’03, pp. 11–23. ACM, 2003.
[13] S. Delaune, S. Kremer, and M. D. Ryan. Composition of password-based protocols. In CSF 21, pp. 239–251. IEEE CS, 2008.
[14] T. Gibson-Robinson and G. Lowe. Analysing applications layered on unilaterally authenticating protocols. In FAST, LNCS 7140, pp. 164–181. Springer, 2011.
[15] T. Groß and S. Mödersheim. Vertical protocol composition. In CSF 24, pp. 235–250. IEEE CS, 2011.
[16] J. D. Guttman. Authentication tests and disjoint encryption: a design method for security protocols. Journal of Computer Security, 3–4(12):409–433, 2004.
[17] J. D. Guttman. Cryptographic protocol composition via the authentication tests. In FOSSACS, LNCS 5504, pp. 303–317. Springer, 2009.
[18] J. D. Guttman and F. J. Thayer. Protocol independence through disjoint encryption. In CSFW 2000, pp. 24–34, 2000.
[19] G. O. Hutchinson. Aeschylus. Seven against Thebes. Clarendon Press, Oxford, 1985.
[20] A. Kamil and G. Lowe. Understanding abstractions of secure channels. In FAST, LNCS 6561, pp. 50–64, Springer, 2011.
[21] R. Küsters and M. Tuengerthal. Composition Theorems Without Pre-Established Session Identifiers. In CCS 18, pp. 41–50. ACM, 2011.
[22] U. M. Maurer. Constructive cryptography – A new paradigm for security definitions and proofs. In TOSCA 2011, LNCS 6993, pp. 33–56. Springer, 2011.
[23] U. M. Maurer and R. Renner. Abstract Cryptography. In ICS, pp. 1–21. Tsinghua U.P., 2011.
[24] U. M. Maurer and P. E. Schmid. A calculus for security bootstrapping in distributed systems. J. Comp. Sec., 4(1):55–80, 1996.
[25] J. K. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic protocol analysis. In CCS, pp. 166–175. ACM, 2001.
[26] S. Mödersheim. Algebraic Properties in Alice and Bob Notation. In Ares’09, 2009.
[27] S. Mödersheim and L. Viganò. Secure pseudonymous channels. In ESORICS 14, LNCS 5789, pp. 337–354. Springer, 2009.
[28] S. Mödersheim and L. Viganò. Sufficient Conditions for Vertical Protocol Composition (Extended Version). TR-2014-07, DTU Compute, Denmark, 2014. Available at imm.dtu.dk/~samo.
[29] M. Rusinowitch and M. Turuani. Protocol insecurity with a finite number of sessions, composed keys is NP-complete. Theor. Comput. Sci., 299:451–475, 2003.