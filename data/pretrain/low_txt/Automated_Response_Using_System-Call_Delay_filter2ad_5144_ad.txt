### Research on High-Performance Operating Systems

Research on high-performance operating systems often emphasizes the development of extensible [5, 31] and minimal [23] kernels. These systems require novel security mechanisms to manage the increased power given to application programs compared to traditional, monolithic kernels. In contrast, our work on biologically-inspired OS extensions assumes a conventional kernel, aiming to enhance the stability and security of the system.

### Adaptive, Online Control for System Performance

Adaptive, online control has been widely studied as a method to improve system performance. This research is motivated by various factors, including non-stationary workloads [7], extensible operating systems [32], parallelism [25], and online database transaction processing [39]. Researchers have primarily focused on using adaptive methods to enhance system performance rather than robustness. In real-time systems, adaptive control has been used to meet timing and robustness constraints [6].

### pH as a Fault-Tolerant System

pH can be viewed as a type of fault-tolerant system [8, 33, 19], but with a focus on security violations rather than hardware or software failures.

### Discussion

A key point of this paper is the feasibility of using system-call delays to stop intrusions in real-time without prior knowledge of attack forms (unlike signature-based scanners). The three example exploits demonstrate that pH can effectively counter different types of attacks. However, pH's effectiveness depends on its ability to obtain stable normal profiles for the binaries on a system. Currently, pH can automatically generate these profiles for relatively simple and regularly called programs, but there is a risk that it could be trained to accept intrusions as normal behavior. Further research is needed to develop more effective training heuristics that minimize the time required to obtain a normal profile while reducing the likelihood of tolerizing abnormal behavior. Incorporating such heuristics into a pH control daemon should minimize the need for user or administrator intervention.

It may be necessary to implement a default timeout mechanism in pH, where any process delayed beyond a certain point is automatically terminated. Additionally, pH’s repertoire could be expanded to include actions like system call parameter modifications. While these additional response mechanisms may require computationally expensive analysis algorithms, the delay imposed on abnormally behaving processes provides the time needed for more sophisticated analysis. Our philosophy is to wait until such a need arises before implementing additional mechanisms.

### Acknowledgments

The authors gratefully acknowledge the support of the National Science Foundation (grant IRI-9711199), the Office of Naval Research (grant N00014-99-1-0417), and the Intel Corporation.

### Practicality of System-Call Monitoring

Another major point of the paper is to demonstrate the practicality of system-call monitoring, even when every executing process on the system is monitored simultaneously. pH routinely monitors every system call executed by every process with minimal overhead, making it efficient enough for a wide variety of users.

### Security Considerations

The current version of pH is not entirely secure. It restricts the use of the `sys pH` system call to users with the `kill` capability (typically only root), but there are no checks to ensure that a profile has not been tampered with on disk or restrictions on user access to profiles. Profiles are currently owned by root but readable by anyone, which could allow an attacker to design a less-detectable attack based on the system call usage on the target machine. pH could also be used to generate a denial-of-service attack by triggering abnormal (but otherwise benign) behavior in a target program. Implementing mechanisms to prevent users, including root, from directly modifying stored profiles would be useful, but such "hardening" should wait until pH's basic functionality has undergone further testing.

### Future Directions

In the past, we have emphasized that system call profiling is suitable for monitoring privileged programs. However, the current version of pH monitors and responds to anomalies in all programs. In the future, we may restrict monitoring to privileged programs, but with the increasing use of active content on the Internet, it may also be desirable to monitor word processors and web browsers. Some large programs, like Netscape, use user-space threads, causing system calls to be interleaved in apparently random patterns due to variations in thread scheduling. This can make system call profiles unstable. We believe this will be less of a problem in the future as programs switch to using kernel threads. Because the Linux kernel uses the same data structure to represent threads and processes, pH can monitor kernel threads individually, avoiding interleaving effects.

### Contributions

Steven Hofmeyr wrote the original program for analyzing system call traces, Julie Rehmeyr rewrote the code to run in the kernel, and Geoff Hunsicker developed the original login trojan, which we ported for these experiments. Margo Seltzer suggested some of the benchmarks used in the paper. Erin O’Neill pointed out that the immune system is better thought of as a system for maintaining homeostasis than as a defense mechanism. We are grateful to the above people and all the members of the Adaptive Computation group at UNM, especially David Ackley, for their many helpful suggestions and interesting conversations about this work.

### Availability

The current version of pH can be obtained via the following web page: http://www.cs.unm.edu/∼soma/pH/. The distribution contains a kernel patch and a few support programs, all licensed under the terms of the GNU General Public License (GPL).

### References

[1] Debra Anderson, Thane Frivold, and Alfonso Valdes. Next-generation intrusion detection expert system (NIDES): A summary. Technical Report SRI–CSL–95–07, Computer Science Laboratory, SRI International, May 1995.
[2] Ivan Arce. BUGTRAQ Mailing list SSH-1.2.27 & RSAREF2 exploit. (bug-PI:EMAIL), December 14, 1999.
[3] Axent Technologies, Inc. Netprowler. http://www.axent.com, 2000.
[4] M. J. Bach. The Design of the UNIX Operating System. Prentice-Hall, Englewood Cliffs, NJ, 1986.
[5] Brian Bershad, Stefan Savage, Przemyslaw Pardyak, Emin Gun Sirer, David Becker, Marc Fiuczynski, Craig Chambers, and Susan Eggers. Extensibility, safety and performance in the spin operating system. In Proceedings of the 15th ACM Symposium on Operating System Principles (SOSP-15), pages 267–284, Copper Mountain, CO, 1995.
[6] Thomas E. Bihari and Karsten Schwan. Dynamic adaptation of real-time software. ACM Transactions on Computer Systems, 9(2):143–174, May 1991.
[7] P.R. Blevins and C.V. Ramamoorthy. Aspects of a dynamically adaptive operating system. IEEE Transactions on Computers, 25(7):713–725, July 1976.
[8] Anita Borg, Wolfgang Blau, Wolfgang Graetsch, Ferdinand Herrmann, and Wolfgang Oberle. Fault tolerance under Unix. ACM Transactions on Computer Systems, 7(1):1–24, February 1989.
[9] Rodney A. Brooks. A robust layered control system for a mobile robot. A.I. Memo 864, Massachusetts Institute of Technology, September 1985.
[10] Rodney A. Brooks and Anita M. Flynn. Fast, cheap, and out of control: a robot invasion of the solar system. Journal of The British Interplanetary Society, 42:478–485, 1989.
[11] A. Brown and M. Seltzer. Operating system benchmarking in the wake of lmbench: A case study of the performance of NetBSD on the Intel x86 architecture. In Proceedings of the 1997 ACM SIGMETRICS Conference on Measurement and Modeling of Computer Systems, Seattle, WA, June 1997.
[12] Cisco Systems, Inc. Cisco secure intrusion detection system. http://www.cisco.com/warp/public/cc/cisco/mkt/security/nranger/tech/ntran tc.htm, 1999.
[13] Sendmail Consortium. sendmail.org. http://www.sendmail.org/, 2000.
[14] Transmeta Corporation. Crusoe processor: Longrun technology. http://www.transmeta.com/crusoe/lowpower/longrun.html, January 2000.
[15] Michael D. Ernst, Adam Czeisler, William G. Griswold, and David Notkin. Quickly detecting relevant program invariants. In Proceedings of the 22nd International Conference on Software Engineering (ICSE 2000), Limerick, Ireland, June 7–9, 2000.
[16] S. Forrest, S. Hofmeyr, A. Somayaji, and T. Longstaff. A sense of self for Unix processes. In Proceedings of the 1996 IEEE Symposium on Computer Security and Privacy. IEEE Press, 1996.
[17] L. T. Heberlein, G. V. Dias, K. N. Levitt, B. Mukherjee, J. Wood, and D. Wolber. A network security monitor. In Proceedings of the IEEE Symposium on Security and Privacy. IEEE Press, 1990.
[18] G.J. Henry. The fair share scheduler. Bell Systems Technical Journal, 63(8):1845–1857, October 1984.
[19] M. A. Hiltunen and R. D. Schlichting. Adaptive distributed and fault-tolerant systems. Computer Systems Science and Engineering, 11(5):275–285, September 1996.
[20] S. Hofmeyr, A. Somayaji, and S. Forrest. Intrusion detection using sequences of system calls. Journal of Computer Security, 6:151–180, 1998.
[21] Steven A. Hofmeyr. An Immunological Model of Distributed Detection and its Application to Computer Security. PhD thesis, University of New Mexico, 1999.
[22] Internet Security Systems, Inc. RealSecure 3.0. http://www.iss.net, 1999.
[23] M. Frans Kaashoek, Dawson R. Engler, Gregory R. Ganger, Héctor M. Briceño, Russell Hunt, David Mazières, Thomas Pinckney, Robert Grimm, John Jannotti, and Kenneth Mackenzie. Application performance and flexibility on exokernel systems. In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP ’97), pages 52–65, Saint-Malo, France, October 1997.
[24] J. Kay and P. Lauder. A fair share scheduler. Communications of the ACM, 31(1):44–55, January 1988.
[25] D.M. Ogle, K. Schwan, and R. Snodgrass. Application-dependent dynamic monitoring of distributed and parallel systems. IEEE Transactions on Parallel and Distributed Systems, 4(7):762–778, July 1993.
[26] Erin O’Neill. Personal Communication, October 1998.
[27] P. Porras and P. G. Neumann. EMERALD: Event monitoring enabling responses to anomalous live disturbances. In Proceedings National Information Systems Security Conference, 1997.
[28] Wojciech Purczynski. Sendmail & procmail root exploits on Linux kernel up to local 2.2.16pre5. (bug-PI:EMAIL), June 9, 2000. Message-BUGTRAQ Mailing list.
[29] SSH Communications Security. SSH secure shell. http://www.ssh.com/products/ssh/, 2000.
[30] R. Sekar, T. Bowen, and M. Segal. On preventing intrusions by process behavior monitoring. In Proceedings of the Workshop on Intrusion Detection and Network Monitoring. The USENIX Association, April 1999.
[31] Margo Seltzer, Yasuhiro Endo, Christopher Small, and Keith Smith. Dealing with disaster: Surviving misbehaved kernel extensions. In Proceedings of the 1996 Symposium on Operating System Design and Implementation (OSDI II), 1999.
[32] Margo Seltzer and Christopher Small. Self-monitoring and self-adapting systems. In Proceedings of the 1997 Workshop on Hot Topics on Operating Systems, Chatham, MA, May 1997. http://www.eecs.harvard.edu/∼vino/vino/papers/monitor.html.
[33] E. Shokri, H. Hecht, P. Crane, J. Dussault, and K.H. Kim. An approach for adaptive fault-tolerance in object-oriented open distributed systems. International Journal of Software Engineering and Knowledge Engineering, 8(3):333–346, September 1998.
[34] A. Somayaji, S. Hofmeyr, and S. Forrest. Principles of a computer immune system. In New Security Paradigms Workshop, New York, 1998. Association for Computing Machinery.
[35] SPI. Debian. http://www.debian.org/, 2000.
[36] Andrew S. Tanenbaum. Computer Networks, chapter 3, pages 145–146. Prentice Hall PTR, Englewood Cliffs, NJ, 2nd edition, 1989.
[37] timecop. Root kit SSH 5.0. http://www.ne.jp/asahi/linux/timecop/, January 2000.
[38] C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions using system calls: Alternative data models. In Proceedings of the 1999 IEEE Symposium on Security and Privacy, pages 133–145, Los Alamitos, CA, 1999. IEEE Computer Society.
[39] G. Weikum, C. Hasse, A. Monkeberg, and P. Zabback. The COMFORT automatic tuning project. Information Systems, 19(5):381–432, July 1994.