### Each Candlestick Shows 5 Measurements of Throughput

Each candlestick represents five throughput measurements (requests per second) for a given percentage of tainted packets. The number of tainted bytes does not decrease linearly with the taint percentage. Additionally, even small taint percentages are representative of real-world scenarios. For example, in security applications, attacks are often anomalies, and the percentage of suspicious packets is typically well below 1%. Overall, DECAF++ achieves an average (geometric) 60% throughput improvement compared to DECAF. When there are no tainted bytes, our system is still approximately 18% slower than QEMU due to network callbacks.

### 6.4 Elastic Instrumentation Overhead

In this section, we evaluate DECAF++ to address the third research question and to understand whether it can mitigate the shortcomings of previous works, such as the high overhead in the check mode of LIFT [25] or the high transition overhead in [13].

#### Check Mode Overhead

Elastic taint analysis imposes an overhead even when there are no tainted bytes. In the case of LIFT [25], this overhead includes taint tag checks on registers at the beginning of every basic block and further memory tag checks before memory instructions. For DECAF++, our evaluation using SPEC CPU2006 and nbench, as shown in Figures 10 and 11, illustrates the performance impact.

#### Transition Overhead

We also measured the time it takes to change the mode and execute the same instruction that was executing before the transition. This measurement was performed during the execution of nbench, with every input byte being tainted. We repeated the measurement ten times. The average transition time is 0.031% of the overall benchmark execution time, with a relative standard deviation of 0.007%.

### 7 Conclusion

In this work, we introduced elastic tainting for whole-system dynamic taint analysis. Elastic tainting is based on elastic taint propagation and elastic taint status checking, which reduce unnecessary taint analysis computations when the system is in a safe state. We successfully designed and implemented this idea on top of DECAF in a prototype called DECAF++ via pure software optimization. We demonstrated that elastic tainting helps DECAF++ achieve significantly better performance even when all inputs are tainted. Furthermore, we showed how elastic taint propagation and elastic taint checking optimizations individually and collectively contribute to performance improvements for different applications.

Our elastic tainting addresses the shortcomings of previous works, which either have high overhead when there are no tainted bytes or high transition costs when there are some. As a result, DECAF++ has an elastic property for both information flow within a process and information flow of a network input throughout the system. We believe that whole-system dynamic taint analysis applications, such as intrusion detection systems and honeypots, can greatly benefit from this elastic property. These systems are constantly online, and taint analysis affects the entire system continuously. By filtering benign traffic, these systems can focus on taint analysis of a small portion of the traffic that is likely to be malicious.

### Acknowledgment

We thank the anonymous reviewers for their insightful comments on our work. This work is partly supported by the Office of Naval Research under Award No. N00014-17-1-2893. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Apache HTTP Server Benchmarking Tool. https://httpd.apache.org/docs/2.4/programs/ab.html.

[2] Fabrice Bellard. QEMU, a fast and portable dynamic translator. In Proceedings of the USENIX Annual Technical Conference (ATC '05), pages 41–41, 2005.

[3] Edson Borin, Cheng Wang, Youfeng Wu, and Guido Araujo. Software-based transparent and comprehensive control-flow error detection. In Proceedings of the International Symposium on Code Generation and Optimization (CGO '06), pages 333–345. IEEE Computer Society, March 2006.

[4] Erik Bosman, Asia Slowinska, and Herbert Bos. Minemu: The world’s fastest taint tracker. In Proceedings of the 14th International Symposium On Recent Advances in Intrusion Detection (RAID'11), pages 1–20, Berlin, Heidelberg, September 2011. Springer.

[5] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS'07), October 2007.

[6] Jim Chow, Ben Pfaff, Tal Garfinkel, Kevin Christopher, and Mendel Rosenblum. Understanding data lifetime via whole system simulation. In Proceedings of the 13th USENIX Security Symposium (Security '04), pages 321–336, August 2004.

[7] James Clause, Wanchun Li, and Alessandro Orso. Dytan: A generic dynamic taint analysis framework. In Proceedings of the 2007 International Symposium on Software Testing and Analysis (ISSTA '07), pages 196–206, New York, NY, USA, July 2007. ACM.

[8] Ali Davanian. Effective granularity in internet badhood detection: Detection rate, precision, and implementation performance. Master’s thesis, University of Twente, August 2017.

[9] Peter J. Denning. The locality principle. In Communication Networks And Computer Systems: A Tribute to Professor Erol Gelenbe, pages 43–67. World Scientific, 2006.

[10] Brendan Dolan-Gavitt, Josh Hodosh, Patrick Hulin, Tim Leek, and Ryan Whelan. Repeatable reverse engineering with PANDA. In Proceedings of the 5th Program Protection and Reverse Engineering Workshop (PPREW-5), page 4. ACM, December 2015.

[11] Cornelia Cecilia Eglantine. Nbench. 2012.

[12] Andrew Henderson, Aravind Prakash, Lok Kwong Yan, Xunchao Hu, Xujiewen Wang, Rundong Zhou, and Heng Yin. Make it work, make it right, make it fast: Building a platform-neutral whole-system dynamic binary analysis platform. In Proceedings of the 2014 International Symposium on Software Testing and Analysis (ISSTA'14), pages 248–258. ACM, July 2014.

[13] Alex Ho, Michael Fetterman, Christopher Clark, Andrew Warfield, and Steven Hand. Practical taint-based protection using demand emulation. In Proceedings of the 1st ACM SIGOPS/EuroSys European Conference on Computer Systems 2006 (EuroSys '06), pages 29–41, New York, NY, USA, 2006. ACM.

[14] Kangkook Jee, Vasileios P. Kemerlis, Angelos D. Keromytis, and Georgios Portokalidis. ShadowReplica: Efficient parallelization of dynamic data flow tracking. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (CCS '13), pages 235–246. ACM, 2013.

[15] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini, Taesoo Kim, Alessandro Orso, and Wenke Lee. RAIN: Refinable attack investigation with on-demand inter-process information flow tracking. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS '17), pages 377–390, New York, NY, USA, October 2017. ACM.

[16] Vasileios P. Kemerlis, Georgios Portokalidis, Kangkook Jee, and Angelos D. Keromytis. libDFT: Practical dynamic data flow tracking for commodity systems. In Proceedings of the 8th ACM SIGPLAN/SIGOPS conference on Virtual Execution Environments (VEE '12), volume 47, pages 121–132. ACM, 2012.

[17] David Korczynski and Heng Yin. Capturing malware propagations with code injections and code-reuse attacks. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS'17), pages 1691–1708, New York, NY, USA, October 2017. ACM.

[18] Yonghwi Kwon, Dohyeong Kim, William Nick Sumner, Kyungtae Kim, Brendan Saltaformaggio, Xiangyu Zhang, and Dongyan Xu. LDX: Causality inference by lightweight dual execution. In Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS '16), pages 503–515. ACM, March 2016.

[19] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI'05), pages 190–200. ACM, June 2005.

[20] Darek Mihocka and Stanislav Shwartsman. Virtualization without direct execution or jitting: Designing a portable virtual machine infrastructure. In 1st Workshop on Architectural and Microarchitectural Support for Binary Translation in ISCA'08, Beijing, page 32, 2008.

[21] Jiang Ming, Dinghao Wu, Jun Wang, Gaoyao Xiao, and Peng Liu. StraightTaint: Decoupled offline symbolic taint analysis. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE'16), pages 308–319. IEEE, August 2016.

[22] Jiang Ming, Dinghao Wu, Gaoyao Xiao, Jun Wang, and Peng Liu. TaintPipe: Pipelined symbolic taint analysis. In Proceedings of the 24th USENIX Security Symposium (Security '15), pages 65–80, August 2015.

[23] Nicholas Nethercote and Julian Seward. Valgrind: A framework for heavyweight dynamic binary instrumentation. In Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '07), volume 42, pages 89–100. ACM, June 2007.

[24] James Newsome and Dawn Xiaodong Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the 12th Annual Network and Distributed System Security Symposium (NDSS'05), volume 5, pages 3–4, 2005.

[25] Feng Qin, Cheng Wang, Zhenmin Li, Ho-seop Kim, Yuanyuan Zhou, and Youfeng Wu. LIFT: A low-overhead practical information flow tracking system for detecting security attacks. In Proceedings of the 39th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO'06), pages 135–148. IEEE, 2006.

[26] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUzzer: Application-aware evolutionary fuzzing. In Network and Distributed System Security Symposium (NDSS'17), February 2017.

[27] LK Yan, A. Henderson, X. Hu, H. Yin, and S. McCamant. On soundness and precision of dynamic taint analysis. Dep. Elect. Eng. Comput. Sci., Syracuse Univ., Tech. Rep. SYR-EECS-2014–04, 2014.

[28] Heng Yin, Zhenkai Liang, and Dawn Song. HookFinder: Identifying and understanding malware hooking behaviors. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS'08), February 2008.

[29] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS '07), pages 116–127. ACM, 2007.

### A. QEMU

DECAF is built on top of QEMU [2]. Therefore, to understand DECAF and DECAF++, knowledge of QEMU is required. QEMU provides binary instrumentation functionality in an architecture-agnostic way via emulation. It emulates the execution of a target binary, such as a virtual machine image, meaning that the CPU, memory, and other hardware are emulated for the target binary. The CPU is represented using a vcpu data structure that contains all the CPU registers. Providing a Memory Management Unit (MMU) is more complex, but the idea is to emulate memory for the target through a software approach known as software MMU (softMMU). We elaborate on softMMU at the end of this section.

#### Binary Translation

QEMU first needs to translate the target binary to understand how to emulate it. QEMU loads a guest executable and translates the binary one block at a time. The binary is translated into an Intermediate Representation (IR) named Tiny Code Generator (tcg). The result of this translation is stored in a data structure called a Translation Block (TB).

#### Code Generation

After the translation, QEMU generates executable code from the translation block. This generated code is written to a data structure called a code cache, which is essentially an executable page that allows dynamic execution of code. After code generation, QEMU executes the code and updates the emulated CPU and memory.

#### Cache Table

QEMU stores the results of code translation and generation in a cache to speed up the emulation. Before future execution of the same program counter, the cache table is consulted, and the request is resolved using the cache.

#### Block Chaining

In addition to the above, QEMU employs another optimization to speed up the emulation. The unit of translation and execution for QEMU is basic blocks. After translating consecutive code blocks, QEMU chains them together to form a trace. This process, known as block chaining, is implemented by placing a direct jump from the current block to the next one. A trace can be executed without interruption for translation.

#### Software TLB

QEMU implements a software Translation Look-aside Buffer (TLB). A hardware TLB maps virtual pages within a process to their corresponding physical pages in memory. In the QEMU software TLB, the mapping is between the Guest Virtual Address (GVA) and the Host Virtual Address (HVA). Through address translation and the software TLB, QEMU ensures that every guest virtual address (regardless of the process) is addressable in the host QEMU process space.

Figure 12 depicts what happens at runtime in QEMU's memory load and store operations. QEMU needs to ensure that the software TLB contains a valid entry for the following page that will be accessed. To this end, it checks whether the page index portion of the address is valid in the software TLB. If yes, and the page is not registered as a memory-mapped I/O, it can be safely accessed without a page fault. This is the fastest case, and it is expected that, based on the locality principle [9], a majority of memory operations go through this path. If the page is not present, or if the page is registered as memory-mapped I/O, then the memory operation is much slower.

### B. DECAF Garbage Collection

A memory address may become tainted and then be overwritten through a non-tainted data propagation. In such a case, the shadow memory can be de-allocated. DECAF does not reclaim it immediately for performance reasons. Immediate reclaiming requires DECAF to explore all the leaves (memory addresses) of a parent node (a physical page) for every memory operation, which is very costly.

DECAF relies on a garbage collector to reclaim unused shadow memory. DECAF handles the unused memory by calling the garbage collector at regular intervals. The garbage collector is called in the QEMU main loop, which runs in a separate thread. Experimentally, the garbage collector is set to walk the shadow memory pages every 4096 times the main loop runs.

The garbage collector walks through the shadow memory and checks every parent and all its leaves. It returns unused leaves to a memory pool, which will use the leaf for another taint status storage. Finally, the garbage collector will return a parent to the memory pool if none of its children is in use.

### Figure 12: QEMU Software Memory Management

Figure 12 shows the QEMU software memory management through `op_qemu_ld` and `op_qemu_st` operations. The generated code blocks may be invalidated to stop further fast execution using the cache table. There are different reasons for this. Two main reasons for invalidating a code cache are (a) the code cache is full, and (b) the code has been modified, and the previously generated code is no longer valid for re-execution.

### Software MMU

QEMU's software memory management unit (softMMU) translates Guest Virtual Addresses (GVA) to Host Virtual Addresses (HVA). This process occurs at runtime and within guest memory operations. QEMU generates load and store IR operations for machine-level memory operations. The QEMU tcg IR store operation, `op_qemu_st`, stores the content of a register to a given virtual guest address. The QEMU tcg load operation, `op_qemu_ld`, loads the content of a memory address to a given register.

### Start TLB-Check

The process begins with a TLB check. If the TLB entry is valid and the page is not registered as a memory-mapped I/O, the translation is completed quickly. If the TLB entry is not valid, a TLB miss handler is invoked to fill the TLB with the page. If the page is registered as a memory-mapped I/O, the appropriate handler is invoked for the operation.

### Summary

- **Fast Path**: Valid TLB entry, not memory-mapped I/O.
- **Slow Path**: TLB miss, or memory-mapped I/O.

This completes the detailed explanation of QEMU's memory management and DECAF's garbage collection mechanisms.