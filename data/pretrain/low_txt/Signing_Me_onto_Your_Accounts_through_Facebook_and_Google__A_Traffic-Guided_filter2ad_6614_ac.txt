### 优化后的文本

虚线箭头表示pChain链接的相反方向，用于展示传播路径。BRM2包含了一个新创建的签名元素，因此其源（src）标记为“!IdP”，这也导致BRM1中的目标（dst）元素带有“!”标记。由于Cookie是在SSO开始前设置的，因此被忽略。

**BRM1:**
- 源（src）: RP
- 目标（dst）: https://!IdP/handler.php
- 参数: notifyURL[URL]
- Cookie: sessionID[BLOB]

**BRM2:**
- 源（src）: !IdP
- 目标（dst）: https://RP/auth.php
- 参数:
  - username[WORD][UU] & sig[BLOB][SU][NC][SIG]

通过在各个元素上标注语义意义，我们的分析器进一步评估了对手Bob是否能够读取或写入三个SSO三角形中的元素（如图4所示：Bob-IdP-RP、Alice-IdP-Bob 和 (Alice+Bob)-IdP-RP）。可读性和可写性分别用↑和↓表示。表3详细说明了我们用来标注对手访问权限的规则。

**表3：对手访问权限标注规则**

**情景A：Bob作为浏览器**
- 所有元素均可读。
- 未受签名保护的元素可写。
- 对于受签名保护的新创建（NC）元素，不可写；否则，继承其祖先的可写性标签（使用pChain）。
- BRM中的参数或Cookie元素均可读。

**情景B：Bob作为RP向IdP请求Alice的凭证以获取目标RP的访问权**
- 将所有出现的“RP”替换为“Bob”。
- 对于发送给Bob的任何BRM（或目标元素可写），所有元素均可写。
- Bob生成的任何BRM中，目标元素或任何参数或Set-cookie元素均可写，除非受IdP签名保护。
- 对于受签名保护的新创建（NC）元素，不可写；否则，继承其祖先的可写性标签（使用pChain）。

**情景C：Bob在Alice的浏览器中插入一个页面**
- 无元素可读。
- Cookie和set-cookie元素不可写。
- 由于BRM可以由Bob生成，目标元素或任何参数元素均可写，除非受签名保护。
- 对于受签名保护的新创建（NC）元素，不可写；否则，继承其祖先的可写性标签（使用pChain）。

**输出可视化**
分析完输入轨迹后，BRM分析器以动态HTML形式生成输出，使人类分析师可以通过浏览器方便地检索自动分析的结果。图7显示了一个输出轨迹的截图。当鼠标悬停在某个元素上时，该元素及其pChain上的所有其他元素都会高亮显示，这有助于分析师检查该元素值的传播情况。鼠标悬停事件还会弹出提示框，显示该元素的值。

**图7：输出轨迹的可视化**

### 4. 主要网站上的SSO方案研究
类似于调试器提取关于调用栈、内存和寄存器的真实信息，第3节中描述的BRM分析器提取了研究SSO方案所需的真实信息，例如Bob可以读取或写入的内容，特别是某些关键元素（如标记为SEC或SIG的元素）。借助此工具，我们现在可以对领先的商业Web SSO系统进行实地研究。研究涵盖了流行的Web SSO服务（如Facebook、Google、JanRain和PayPal），以及知名网站/服务的SSO系统（如FarmVille、Freelancer、Nasdaq和Sears）。结果显示，这些著名的Web SSO系统存在严重的逻辑缺陷，使得未经授权的第三方完全可以登录客户的账户。这些缺陷种类繁多，分布在RP和IdP的代码中，并且出现在登录和账户关联阶段。我们在本节余下的部分详细阐述了这些漏洞。

#### 4.1. Google ID（及OpenID）
OpenID是一种流行的单点登录开放标准。据报道，截至2009年12月，已有超过十亿个启用OpenID的用户账户和九百万个使用OpenID的网站 [22]。Google ID基于OpenID，依赖它的网站数量非常庞大。

**分析结果**
我们对Google ID的分析始于原始流量。不出所料，人工解析和分析原始流量将非常耗时。使用BRM分析器，我们可以自动获取三个对抗场景（如图5所示）的语义信息。情景(A)的跟踪如图8所示，其中RP是Smartsheet.com，IdP是Google.com。情景(A)中所有BRM中的元素均可读，因此可读性标签(↑)被忽略。图中仅显示可写性标签(↓)。请注意，OpenID的一个特定设计是许多枚举值以URL格式表达。这一细节对我们下面的描述并不重要，因此我们将它们标记为[WORD]以避免潜在的混淆。

**BRM1:**
- 源（src）: RP
- 目标（dst）: http://IdP/accounts/o8/ud ↓
- 参数:
  - openid.ns[WORD]↓
  - openid.claimed_id[UU] ↓
  - openid.identity[UU] ↓
  - openid.return_to[URL]{RP/b/openid} ↓
  - openid.realm[URL]{RP/b/openid} ↓
  - openid.assoc_handle[BLOB] ↓
  - openid.openid.ns.ext1[WORD] ↓
  - openid.ext1.type.email[WORD] ↓
  - openid.ext1.type.firstname[WORD] ↓
  - openid.ext1.type.lastname[WORD] ↓
  - openid.ext1.required[LIST] ↓
    - (email, firstname, lastname)

**BRM2:**
- 源（src）: IdP↓
- 目标（dst）: http://!IdP/openid2/auth
- 参数:
  - st[MU][SEC] ↓

**BRM3:**
- 源（src）: !IdP
- 目标（dst）: https://RP/b/openid↓
- 参数:
  - openid.ns[WORD] ↓
  - openid.mode[WORD]
  - openid.response_nonce[SEC]
  - openid.return_to[URL] ↓
  - openid.assoc_handle[BLOB] ↓
  - openid.identity[UU]
  - openid.claimed_id[UU]
  - openid.sig[SIG]
  - openid.signed[LIST] ↓
  - openid.opEndpoint[URL]{IdP/accounts/o8/ud}↓
  - openid.ext1.type.firstname[WORD] ↓
  - openid.ext1.value.firstname[UU]
  - openid.ext1.type.email[WORD] ↓
  - openid.ext1.value.email[UU]
  - openid.ext1.type.lastname[WORD] ↓
  - openid.ext1.value.lastname[UU]

**图8：情景(A)下Google ID + Smartsheet的跟踪**

我们发现BRM3是证明浏览器代表的用户身份的消息。此消息携带一个签名元素openid.sig，表明SSO基于签名令牌。进一步分析揭示了签名覆盖的元素，如图8所示。其中，openid.signed是一个列表，指示已签名元素的名称。有趣的是，一些签名元素被我们的分析器标记为对手可写。仔细查看这些元素，发现它们的值实际上是从BRM1传播过来的，没有受到任何签名保护。特别地，openid.signed包含了来自BRM1的openid.ext1.required列表，该列表描述了RP要求IdP签名的元素，如email、firstname和lastname，如图8中鼠标光标弹出窗口所示。然而，由于openid.signed (BRM3) 可以通过openid.ext1.required (BRM1) 被对手控制，因此无法保证RP要求IdP签名的所有元素都会在BRM3中被IdP签名（即受openid.sig保护）。

**缺陷与利用**
对于一个网站来说，使用用户的电子邮件地址（如PI:EMAIL）作为用户名是很常见的，这可能是为什么RP要求电子邮件被签名的原因。上述分析表明，情景(A)中的攻击者可能会导致IdP从其签名的元素列表中排除电子邮件元素，从而通过BRM3发送回RP。因此，关于实际系统的问题是：

RP是否会检查BRM3中的电子邮件元素是否受IdP签名保护，即使这种保护已在BRM1中明确要求？

事实证明，这个问题确实指出了Google ID SSO中的一个严重逻辑缺陷。具体来说，我们在Smartsheet上测试了这个漏洞：当我们（即Bob的浏览器）中继BRM1时，更改了openid.ext1.required（如图8所示）为(firstname, lastname)。结果，IdP发送的BRM3不包含电子邮件元素（即openid.ext1.value.email）。当这条消息被浏览器中继时，我们附加了PI:EMAIL作为电子邮件元素。我们发现Smartsheet接受了我们作为Alice并授予了我们对其帐户的完全控制权。

**更广泛的影响**
我们进一步发现，问题远远超出了Smartsheet。Google确认这个问题也存在于开源项目OpenID4Java（一个Google认证测试过的SDK）和Kay Framework中。在OpenID4Java中，RP验证BRM3的功能是verify()。源代码显示，它只检查签名是否覆盖了openid.signed列表中的所有元素，因此“验证”的BRM3不能确保RP要求IdP签名的元素的真实性。除了Smartsheet外，我们还检查了其他热门网站Yahoo! Mail、zoho.com、manymoon.com和diigo.com。它们都容易受到这种攻击。

**Google和OpenID基金会的回应**
我们将这一发现报告给了Google、Yahoo和OpenID基金会，并帮助Google修复了这个问题。Google和OpenID基金会发布了关于此问题的安全公告，并在公告中承认了我们。我们提供了这些公告的链接[33]。几篇新闻文章报道了这些公告，包括eWeek、The Register、ZDNet、Information Week等[33]。我们收到了Google的金钱奖励，Google还将我们的名字添加到了其官方致谢页面[18]。

#### 4.2. Facebook
Facebook上的认证通常通过Facebook Connect进行，这是Facebook平台的一部分。我们研究了这种SSO方案。

**分析结果**
我们对通过Facebook Connect收集的SSO跟踪进行了自动分析。结果（不涉及对手）如图9所示。这里，IdP是Facebook，RP是NYTimes.com。可以看到，BRM3携带一个秘密令牌result，浏览器使用它来向RP证明用户的身份。这个秘密令牌来自BRM2，作为API调用http://!IdP/xd_proxy.php1的参数。这个秘密令牌使RP能够从Facebook获取Alice的信息，并授予她的浏览器访问其帐户的权限。同样有趣的是BRM1，在其中RP通过app_id声明其身份（例如NYTimes），并提供其他参数。请注意，虽然图中的cb元素也被标记为SEC，但它是由浏览器生成的（标记为BG，见表2），因此不是RP和IdP之间的共享秘密。

**BRM1:**
- 源（src）: RP
- 目标（dst）: http://!IdP/permissions.req
- 参数:
  - app_id[BLOB]
  - cb[SEC][BG]
  - next[URL]{
      - http://!IdP/connect/xd_proxy.php?
      - origin[BLOB]&transport[WORD]
  }
  - …（其他13个元素）

**BRM2:**
- 源（src）: !IdP
- 目标（dst）: http://!IdP/xd_proxy.php
- 参数:
  - origin[BLOB]
  - transport[WORD]
  - result[SEC]
  - …（其他4个元素）

**BRM3:**
- 源（src）: !IdP
- 目标（dst）: http://RP/login.php
- 参数:
  - origin[BLOB]
  - transport[WORD]
  - result[SEC]
  - …（其他3个元素）

**图9：良性Facebook + NYTimes跟踪**

我们的分析器进一步评估了图9中的跟踪在不同对抗情景下的表现。图10显示了我们在情景(B)下的发现，其中对手Bob在Alice访问他的网站时冒充RP。根据表3，所有出现的“RP”都被替换为“Bob”。这里立即出现的一个潜在漏洞是，BRM1中的所有元素，包括app_id，都是可写的，因此Bob可以声明他是NYTimes，使用公开的NYTimes的app_id。结果，Facebook为Alice访问NYTimes而生成的秘密令牌result现在会发送给Bob。

**BRM1:**
- 源（src）: Bob
- 目标（dst）: http://!IdP/permissions.req
- 参数:
  - app_id[BLOB] ↓
  - cb[SEC][BG]
  - next[URL]{
      - http://!IdP/connect/xd_proxy.php↓?
      - origin[BLOB] ↓
      - transport[WORD] ↓