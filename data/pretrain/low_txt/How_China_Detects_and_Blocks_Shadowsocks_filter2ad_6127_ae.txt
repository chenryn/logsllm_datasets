### 8 相关工作

关于Shadowsocks的流量分析已有大量研究 [4, 12, 28, 57–59]。一些研究假设了一个比我们在实践中观察到的更强大的对手。例如，Zeng等人假设对手在构建检测模型时考虑了主机的DNS行为 [57]。许多概念验证工具被开发出来以检测Shadowsocks流量。Zhixin Wang提出了一种基于前几个数据包高熵的攻击方法 [23]。Madeye使用数据包长度分布来识别Shadowsocks和ShadowsocksR流量 [31]。此外，Wang等人 [51, §5] 表明基于熵的流量分析可以准确识别诸如obfs3、obfs4和FTE等规避协议。

许多研究和报告实证表明，GFW部署了主动探测技术来发现规避审查的工具。已知的目标协议包括Tor [13, 52, 56]、obfs2 [55]、VPN Gate [34]和其他VPN服务 [24]。Winter等人 [56] 在2012年就研究了GFW如何通过主动探测发现Tor中继节点。Dunna等人 [13] 在2018年重新审视了针对Tor的主动探测。Ensafi等人 [14] 对GFW针对不同协议的探测进行了指纹识别，并推断出探测机器的基础架构。V2Ray的开发者报告称，自2017年以来，V2Ray服务器就经历了重放攻击 [39]。据我们所知，最早记录的针对Shadowsocks的主动探测是在2019年6月 [5]。

许多理论上的主动探测攻击和防御策略已被提出 [2, 8, 10, 15, 33, 35–37]。最值得注意的是，Frolov等人 [19] 使用TCP标志和时间信息来识别各种代理服务器，当服务器关闭连接时。Frolov和Wustrow [20] 展示了一种对抗主动探测的有前途的方法，即将代理隐藏在流行应用程序后面。这一概念被称为应用前置（application fronting），已在许多流行的规避工具中采用 [27, 43, 49, 50]。

### 9 未来工作

在这项工作中，我们专注于GFW对Shadowsocks的具体主动探测。然而，我们的观察结果提供了几条证据，表明GFW可能还针对其他未知的规避协议进行主动探测。首先，如第4.1节所述，我们能够使用随机数据触发主动探测。由于其他规避协议（如VMess）也完全加密其流量，因此它们也可能被检测到。其次，如第4.2节所述，我们发现了新的探测类型，这些探测类型未被我们的Shadowsocks和OutlineVPN服务器接收。如果这些探测不是针对Shadowsocks的，那它们是针对什么的？第三，在2020年6月，发现VMess容易受到主动探测 [2, 33, 35]。我们希望测试GFW是否实际利用了这一漏洞。

### 10 伦理

审查测量研究存在一定的风险，从敏感请求被记录到法律后果不等。我们在进行测量实验时采取了措施以最小化风险。首先，这项工作不涉及人类受试者。所有网络流量都是由我们控制的程序自动生成的。其次，尽管让审查者观察到敏感查询的风险可能较低，但我们尽量限制了这些敏感查询的数量。具体来说，在我们的一个实验中，我们仅在中国的一个主机上运行了Shadowsocks服务器。在这个实验中，我们最初让该服务器代理Alexa排名前100万网站中的子集浏览流量。运行45小时后，我们决定从浏览列表中移除被审查的网站，以防止中国境内的主机连接到防火墙外的敏感网站。第三，我们通过为规避服务器使用专用IP地址来最小化潜在的封锁影响。我们从允许Shadowsocks和OutlineVPN的VPS提供商处租用了非审查网络主机，事实上该提供商甚至提供OutlineVPN的自动安装服务。

### 11 结论

在这项研究中，我们揭示并系统地研究了GFW针对Shadowsocks的最新武器。我们发现，GFW通过每个连接的第一个数据包的大小和熵来检测潜在的Shadowsocks流量；然后在不同阶段向可疑服务器发送主动探测。这些主动探测包括基于重放的探测和具有不同长度的随机探测。它们本质上是针对不同Shadowsocks实现中的漏洞的不同类型的攻击。我们对探测器进行了指纹识别，并发现与之前关于主动探测的研究相比存在差异。网络级侧信道显示，数千个IP地址发送的探测很可能由一组集中控制的结构控制。

最后，基于我们的理解，我们提出了一种临时解决方法，以缓解GFW的流量分析攻击。我们进一步讨论了对抗主动探测的基本策略，并与开发者密切合作，使Shadowsocks及相关工具更加抗封锁。

### 负责任的披露

我们与Shadowsocks-libev和OutlineVPN的开发者分享了我们的发现和建议。OutlineVPN在2020年2月发布了v1.1.0版本，提供了防御客户端数据重放的选项 [26]。OutlineVPN在2020年9月进一步提供了对服务器数据重放的防御。2020年7月，OutlineVPN的开发者将头部和初始数据合并到一个数据包中，使每个连接的第一个数据包的大小变得可变 [18]。OutlineVPN的开发者在2020年9月初报告说，自从做出这些更改以来，他们的服务器没有再被封锁，尽管仍然受到了密集的探测。我们还公开分享了初步发现 [3]，这可能促成了Shadowsocks-rust v1.8.5中的重放防御功能 [60]。

### 致谢

作者感谢Shadowsocks-libev开发者；Jigsaw的Vinicius Fortuna及其他OutlineVPN开发者；科罗拉多大学的Eric Wustrow及其他研究人员。他们还要感谢Dave Levin担任本文的指导者。这项工作得到了NSF CAREER拨款CNS-1553301的部分支持。

### 可用性

为了保持可重复性和促进未来的工作，我们尽可能在不损害匿名性的前提下发布了我们的数据和源代码：https://gfw.report/publications/imc20/en。

### 参考文献

[1] 匿名. 2014. 朝向全面的大防火墙DNS审查画面. 在自由和开放互联网通信会议. USENIX. https://www.usenix.org/system/files/conference/foci14/foci14-anonymous.pdf
[2] 匿名. 2020. 关于最近发现的V2Ray弱点的总结. 2020年9月检索自 https://gfw.report/blog/v2ray_weaknesses/en/
[3] 匿名, 匿名, 匿名, David Fifield, 和 Amir Houmansadr. 2019. 中国如何检测和封锁Shadowsocks. 2020年9月检索自 https://gfw.report/blog/gfw_shadowsocks
[4] Matthieu Baerts 和 Quentin De Coninck. 2015. 使用真实智能手机应用程序的多路径TCP. 硕士论文. 天主教鲁汶大学. https://dial.uclouvain.be/memoire/ucl/object/thesis:366
[5] bluesky. 2019. 6.4期间翻墙观察. 2020年2月检索自 https://pincong.rocks/article/2019
[6] Kevin Bock, iyouport, 匿名, Louis-Henri Merino, David Fifield, Amir Houmansadr, 和 Dave Levin. 2020. 暴露并绕过中国对ESNI的审查. 2020年9月检索自 https://github.com/net4people/bbs/issues/43#issuecomment-673322409
[7] David Borman, Bob Braden, Van Jacobson, 和 Richard Scheffenegger. 2014. 高性能TCP扩展. RFC 7323. RFC编辑. https://tools.ietf.org/html/rfc7323
[8] BreakWa11. 2015. Shadowsocks协议的弱点分析和改进. 2019年8月检索自 https://web.archive.org/web/20160829052958/https://github.com/breakwa11/shadowsocks-rss/issues/38
[9] Zimo Chai, Amirhossein Ghafari, 和 Amir Houmansadr. 2019. 加密SNI (ESNI) 对绕过审查的重要性. 在自由和开放互联网通信会议. USENIX. https://www.usenix.org/system/files/foci19-paper_chai_update.pdf
[10] Jiaxing Cheng, Ying Li, Cheng Huang, Ailing Yu, 和 Tao Zhang. 2020. ACER: 基于主动探测技术的Shadowsocks服务器检测. 计算机病毒学和黑客技术杂志 16, 3 (2020), 217–227. https://link.springer.com/article/10.1007/s11416-020-00353-z
[11] Richard Clayton, Steven J. Murdoch, 和 Robert N. M. Watson. 2006. 忽略中国的防火墙. 在隐私增强技术会议. Springer, 20–35. https://www.cl.cam.ac.uk/~rnc1/ignoring.pdf
[12] Ziye Deng, Zihan Liu, Zhouguo Chen, 和 Yubin Guo. 2017. 基于随机森林的Shadowsocks流量检测. 在智能人机系统和控制论会议. IEEE. https://www.directory-root.com/wp-content/uploads/2018/02/Shadowsocks-Sniffing.pdf
[13] Arun Dunna, Ciarán O’Brien, 和 Phillipa Gill. 2018. 分析中国对未发布Tor桥梁的封锁. 在自由和开放互联网通信会议. USENIX. https://www.usenix.org/system/files/conference/foci18/foci18-paper-dunna.pdf
[14] Roya Ensafi, David Fifield, Philipp Winter, Nick Feamster, Nicholas Weaver, 和 Vern Paxson. 2015. 检查大防火墙如何发现隐藏的规避服务器. 在互联网测量会议. ACM. http://conferences2.sigcomm.org/imc/2015/papers/p445.pdf
[15] David Fifield. 2017. Shadowsocks主动探测攻击及防御. 2020年2月检索自 https://groups.google.com/d/msg/traffic-obf/CWO0peBJLGc/Py-clLSTBwAJ
[16] David Fifield. 2019. Shadowsocks流密码的解密漏洞. 2020年6月检索自 https://github.com/net4people/bbs/issues/24
[17] David Fifield. 2019. 自9月中旬以来中国对Shadowsocks的密集封锁. 2020年2月检索自 https://github.com/net4people/bbs/issues/16
[18] Vinicius Fortuna. 2020. 自初步报告以来的Outline变更. https://github.com/net4people/bbs/issues/22#issuecomment-670781627
[19] Sergey Frolov, Jack Wampler, 和 Eric Wustrow. 2020. 检测探针抵抗代理. 在网络和分布式系统安全会议. The Internet Society. https://www.ndss-symposium.org/wp-content/uploads/2020/02/23087.pdf
[20] Sergey Frolov 和 Eric Wustrow. 2020. HTTPT: 一种探针抵抗代理. 在自由和开放互联网通信会议. USENIX. https://www.usenix.org/system/files/foci20-paper-frolov.pdf
[21] ghost (匿名用户). 2017. 在第十九届人民代表大会期间，GFW是如何封锁规避工具的? 2020年2月检索自 https://github.com/net4people/bbs/issues/1
[22] go Shadowsocks2 开发者. [无日期]. go-Shadowsocks2. https://github.com/shadowsocks/go-shadowsocks2
[23] isofew. 2017. sssniff. https://github.com/isofew/sssniff
[42] Will Scott. 2017. 关于中国干扰Shadowsocks的报告. 2019年2月检索自 https://groups.google.com/d/msg/traffic-obf/dqw6CQLR944/1Icd4691AQAJ
[43] Sergey Frolov 和其他人. [无日期]. forwardproxy. https://github.com/caddyserver/forwardproxy
[44] Shadowsocks 开发者. [无日期]. Shadowsocks. https://github.com/shadowsocks/shadowsocks/tree/master
[45] Shadowsocks 开发者. [无日期]. Shadowsocks-libev. https://github.com/shadowsocks/shadowsocks-libev
[46] Shadowsocks 开发者. 2019. Shadowsocks白皮书. 2020年2月检索自 https://github.com/shadowsocks/shadowsocks-org/blob/master/whitepaper/whitepaper.md
[47] shadowsocksr-csharp 开发者. [无日期]. shadowsocksr-csharp. https://github.com/shadowsocksrr/shadowsocksr-csharp
[48] tatianab, alalamav, 等人. 2019. 通过超时实现探针抵抗. 2020年9月检索自 https://github.com/Jigsaw-Code/outline-ss-server/commit/c70d512e78525eba36bb1e6ad7a0868593166cf9
[49] trojan 开发者. [无日期]. trojan. https://github.com/trojan-gfw/trojan
[50] V2Ray 开发者. [无日期]. V2Ray. https://github.com/v2fly/v2ray-core
[51] Liang Wang, Kevin P. Dyer, Aditya Akella, Thomas Ristenpart, 和 Thomas Shrimpton. 2015. 看透网络协议混淆. 在计算机和通信安全会议. ACM. http://pages.cs.wisc.edu/~liangw/pub/ccsfp653-wangA.pdf
[52] Tim Wilde. 2012. GFW主动探测obfs2桥接. 2020年2月检索自 https://blog.torproject.org/blog/knock-knock-knockin-bridges-doors
[53] Brandon Wiley. 2017. Re: 关于中国干扰Shadowsocks的报告. 2019年7月检索自 https://groups.google.com/d/msg/traffic-obf/dqw6CQLR944/V5_61SVTBAAJ
[54] Philipp Winter. 2010. brdgrd. https://github.com/NullHypothesis/brdgrd
[55] Philipp Winter. 2013. GFW主动探测obfs2桥接. 2020年2月检索自 https://bugs.torproject.org/8591
[56] Philipp Winter 和 Stefan Lindskog. 2012. 中国防火墙如何封锁Tor. 在自由和开放互联网通信会议. USENIX. https://www.usenix.org/system/files/conference/foci12/foci12-final2.pdf
[57] Xuemei Zeng, Xingshu Chen, Guolin Shao, Tao He, Zhenhui Han, Yi Wen, 和 Qixu Wang. 2019. 基于流上下文和主机行为的Shadowsocks流量识别. IEEE Access 7 (2019), 41017–41032. https://doi.org/10.1109/ACCESS.2019.2907149
[58] Yankang Zhao, Xiaobo Ma, Jianfeng Li, Shui Yu, 和 Wei Li. 2018. 重新审视现实场景下的网站指纹攻击: 以Shadowsocks为例. 在国际网络安全会议. Springer, 319–336.
[59] Zhongliu Zhuo, Yang Zhang, Zhi li Zhang, Xiaosong Zhang, 和 Jingzhong Zhang. 2018. 基于隐马尔可夫模型的匿名网络网站指纹攻击. IEEE Transactions on Information Forensics and Security 13, 5 (2018年5月), 1081–1095. https://doi.org/10.1109/TIFS.2017.2762825
[60] zonyitoo. [无日期]. Shadowsocks-rust v1.8.5. https://github.com/shadowsocks/shadowsocks-rust/releases/tag/v1.8.5
[24] Andrew Jacobs. 2015. 中国进一步收紧对互联网的控制. 纽约时报 (2015年1月). 2020年2月检索自 https://www.nytimes.com/2015/01/30/world/asia/china-clamps-down-still-harder-on-internet-access.html
[25] Jigsaw. [无日期]. Outline. https://getoutline.org/
[26] Jigsaw. [无日期]. Outline v1.1.0. https://github.com/Jigsaw-Code/outline-ss-server/releases/tag/v1.1.0
[27] klzgrad. [无日期]. NaïveProxy. https://github.com/klzgrad/naiveproxy
[28] Xiaolei Liu, Zhongliu Zhuo, Xiaojiang Du, Xiaosong Zhang, Qingxin Zhu, 和 Mohsen Guizani. 2019. 对基于隐马尔可夫模型的网站指纹检测模型的对抗攻击. 认知系统研究 54 (2019), 83–89. https://doi.org/10.1016/j.cogsys.2018.12.005
[29] Zhen Lu, Zhenhua Li, Jian Yang, Tianyin Xu, Ennan Zhai, Yao Liu, 和 Christo Wilson. 2017. 在极端互联网审查下访问Google Scholar: 合法途径. 在中间件会议. ACM. https://censorbib.nymity.ch/pdf/Lu2017a.pdf
[30] madeye. 2016. Shadowsocks-libev v2.5.4和v2.5.5之间的变化. https://github.com/shadowsocks/shadowsocks-libev/compare/v2.5.4...v2.5.5
[31] madeye. 2017. sssniff. https://github.com/madeye/sssniff
[32] madeye. 2019. 简化服务器自动封锁机制. 2020年9月检索自 https://github.com/shadowsocks/shadowsocks-libev/commit/a99c39c7dd314939082348d96d06727570b514a8
[33] nametoolong. 2020. 主动探测的一些额外方法. 2020年9月检索自 https://github.com/v2ray/v2ray-core/issues/2539
[34] Daiyuu Nobori 和 Yasushi Shinjo. 2014. VPN Gate: 一种志愿者组织的公共VPN中继系统，具有抵御政府审查防火墙的能力. 在网络系统设计与实施会议. USENIX. https://www.usenix.org/system/files/conference/nsdi14/nsdi14-paper-nobori.pdf
[35] p4gefau1t, studentmain, 等人. 2020. VMess协议设计和实现缺陷可导致服务器遭到主动探测特征识别(附PoC). 2020年9月检索自 https://github.com/v2ray/v2ray-core/issues/2523
[36] Zhiniang Peng. 2020. Shadowsocks流密码的重定向攻击. 2020年6月检索自 https://github.com/edwardz246003/shadowsocks
[37] printempw. 2017. 为何Shadowsocks要弃用一次性验证(OTA). 2020年2月检索自 https://web.archive.org/web/20191002190325/https://printempw.github.io/why-do-shadowsocks-deprecate-ota/
[39] projectv2ray. 2017. V2Ray监测到的重放攻击.
[38] Program Think. 2017. 2017年10月翻墙快报（兼谈用I2P突破封锁）. 2019年2月检索自 https://program-think.blogspot.com/2017/10/gfw-news.html
2020年2月检索自 https://github.com/shadowsocks/shadowsocks-org/issues/44#issuecomment-282525358 (原文来自 https://twitter.com/projectv2ray/status/833959357423448064).
[40] riobard, madeye, Mygod, 等人. 2017. 防御重放攻击. 2020年2月检索自 https://github.com/shadowsocks/shadowsocks-org/issues/44
[41] Shadowsocks rust 开发者. [无日期]. Shadowsocks-rust. https://github.com/shadowsocks/shadowsocks-rust