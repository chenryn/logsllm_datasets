### Table 3: Comparison to Prior Work in the Labeled Mode for Label Byte-Length \( \ell = 288 \)
- **Sender**: 16 threads
- **Receiver**: 1 thread

| Metric | Ours | Reference [13] |
|--------|------|----------------|
| Sender Offline (s) | 857 | - |
| Sender Online (s) | 4.92 | 120 |
| Client Encrypt (s) | 0.77 | 17.6 |
| Communication (MB) | 0.05 | 11.6 |

### Table 4: Computation and Communication Cost of Our SEAL Implementation in the Labeled Setting
- **Label Byte-Size**: \( \ell \)
- **Number of Threads**: \( T \)
- **Times Averaged Over**: 10 runs

| \( \ell \) | Set Sizes | \( T \) | Sender Offline (s) | Sender Online (s) | Client Encrypt (s) | Communication (S → R, MB) | Communication (R → S, MB) |
|-----------|-----------|--------|--------------------|-------------------|--------------------|----------------------------|----------------------------|
| 32        | \( |X| = 2^{22} \) | 24     | 857                | 4.92               | 0.77               | 3.9                        | 4.1                        |
| 16        | \( |Y| = 4096 \)    | 1      | 199                | 20.1               | 7.65               | 1.7                        | 1.6                        |
| 1         |           | 4      | 48.3               | 6.8               | 2.20               | 4.3                        | 5.2                        |
| 1         |           | 8      | 19.5               | 4.0               | 1.19               | 2.4                        | 4.0                        |
| 1         |           | 24     | 472                | 3.8               | 0.65               | 3.2                        | 5.2                        |

### Table 5: Evaluation Key Size of Our HElib Implementation and Prior Work [13] in the Offline Stage
- **Security Level**: At least 128 bits, except for parameters with ‘*’ where it is at least 106 bits

| \( |Y| \)   | 1245* | 1024 [13] | 558 | 512 [13] | 341 | 256 [13] | 128 [13] |
|----------|--------|-----------|-----|----------|-----|----------|----------|
| \( |X| = 2^{20} \) | 7.50 | 2.11 | 6.87 | 0.43 | 11.1 | 0.21 | 8.31 | 0.03 |
| \( |X| = 2^{22} \) | 6.88 | - | 6.18 | - | 9.90 | - | 7.44 | - |
| \( |X| = 2^{26} \) | 8.12 | - | 8.13 | - | 12.2 | - | 9.17 | - |

### Table 6: Communication Cost of Our HElib Implementation and Prior Work [13] in the Online Stage
- **Security Level**: At least 128 bits, except for parameters with ‘*’ where it is at least 106 bits

| \( |Y| \)   | 1245* | 1024 [13] | 558 | 512 [13] | 341 | 256 [13] | 128 [13] |
|----------|--------|-----------|-----|----------|-----|----------|----------|
| \( |X| = 2^{20} \) | 2.28 | 9.02 | 1.27 | 10.64 | 1.32 | 13.58 | 0.76 | 18.32 |
| \( |X| = 2^{22} \) | 2.28 | - | 1.27 | - | 1.32 | - | 0.76 | - |
| \( |X| = 2^{26} \) | 2.28 | - | 1.36 | - | 1.32 | - | 0.76 | - |

### Discussion
As shown in Table 6, the communication cost of our implementation grows very slowly with the sender’s set size. For example, it remains constant for \( |Y| \in \{2^{10}, 341, 1245\} \) from \( |X| = 2^{22} \) to \( |X| = 2^{26} \). Furthermore, a 64-fold increase in the sender’s set results in only a 6-20% larger communication size for all tested parameters. This is a much smaller growth compared to [13], where a 16-fold increase in \( |X| \) leads to a 40-291% rise in communication. Additional results with corresponding encryption parameters and running times can be found in Appendix D.

### Conclusions
We have demonstrated several improvements to the protocol of [13], significantly reducing the communication and online computation costs. Our improvements enable powerful communication-computation trade-offs that can make the protocol practical and scalable in various scenarios. We also showed that homomorphic encryption can be used to enable Private Set Intersection (PSI) in unbalanced settings with sublogarithmic communication cost in the larger set, although this protocol is not yet practical for use today. Future advancements in hardware acceleration for homomorphic encryption may change this situation.

### Acknowledgments
We would like to thank Craig Costello and Patrick Longa (Microsoft Research) for their significant help and advice regarding the hash-to-curve algorithm for the FourQ curve and support with the FourQlib library, as well as Hao Chen (Facebook) for helpful discussions in the preliminary phases of this work.

This work is supported by CyberSecurity Research Flanders with reference number VR20192203. Additionally, the first author is supported by the Defense Advanced Research Projects Agency (DARPA) and Space and Naval Warfare Systems Center, Pacific (SSC Pacific) under contract number FA8750-19-C-0502. The third author is supported by ERC Advanced Grant ERC-2015-AdG-IMPaCT and by the Flemish Government through FWO SBO project SNIPPET S007619N. The fifth author is supported by a Junior Postdoctoral Fellowship from the Research Foundation – Flanders (FWO).

Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of CyberSecurity Research Flanders, DARPA, the US Government, the ERC, or the FWO. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright annotation therein.

Finally, we would like to thank the anonymous reviewers for their helpful comments.

### References
[1] Martin R. Albrecht, Rachel Player, and Sam Scott. 2015. On the concrete hardness of Learning with Errors. J. Mathematical Cryptology 9, 3 (2015), 169–203. http://www.degruyter.com/view/j/jmc.2015.9.issue-3/jmc-2015-0016/jmc-2015-0016.xml

[2] Junade Ali. 2018. Validating Leaked Passwords with k-Anonymity. https://blog.cloudflare.com/validating-leaked-passwords-with-k-anonymity/. Accessed: 2021-04-26.

[3] Sebastian Angel, Hao Chen, Kim Laine, and Srinath Setty. 2018. PIR with compressed queries and amortized query processing. In 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 962–979.

[4] Giuseppe Ateniese, Emiliano De Cristofaro, and Gene Tsudik. 2011. (If) Size Matters: Size-Hiding Private Set Intersection. In PKC 2011 (LNCS, Vol. 6571), Dario Catalano, Nelly Fazio, Rosario Gennaro, and Antonio Nicolosi (Eds.). Springer, Heidelberg, 156–173. https://doi.org/10.1007/978-3-642-19379-8_10

[5] Daniel J. Bernstein, Mike Hamburg, Anna Krasnova, and Tanja Lange. 2013. Elligator: Elliptic-curve points indistinguishable from uniform random strings. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. 967–980.

[6] Zvika Brakerski. 2012. Fully Homomorphic Encryption without Modulus Switching from Classical GapSVP. In CRYPTO (Lecture Notes in Computer Science, Vol. 7417), Reihaneh Safavi-Naini and Ran Canetti (Eds.). Springer, 868–886.

[7] Zvika Brakerski, Craig Gentry, and Vinod Vaikuntanathan. 2012. (Leveled) fully homomorphic encryption without bootstrapping. In Proceedings of the 3rd Innovations in Theoretical Computer Science Conference. ACM, 309–325.

[8] Zvika Brakerski and Vinod Vaikuntanathan. 2011. Fully homomorphic encryption from ring-LWE and security for key dependent messages. In Advances in Cryptology–CRYPTO 2011. Springer, 505–524.

[9] Zvika Brakerski and Vinod Vaikuntanathan. 2014. Efficient fully homomorphic encryption from (standard) LWE. SIAM J. Comput. 43, 2 (2014), 831–871.

[10] Michael F. Challis. 1993. Two new techniques for computing extremal h-bases. Ak. Comput. J. 36, 2 (1993), 117–126.

[11] Michael F. Challis and John P. Robinson. 2010. Some extremal postage stamp bases. Journal of Integer Sequences 13, 2 (2010), 3.

[12] Melissa Chase and Peihan Miao. 2020. Private Set Intersection in the Internet Setting from Lightweight Oblivious PRF. In CRYPTO 2020, Part III (LNCS), Hovav Shacham and Alexandra Boldyreva (Eds.). Springer, Heidelberg, 34–63.

[13] Hao Chen, Zhicong Huang, Kim Laine, and Peter Rindal. 2018. Labeled PSI from Fully Homomorphic Encryption with Malicious Security. In ACM CCS 2018, David Lie, Mohammad Mannan, Michael Backes, and XiaoFeng Wang (Eds.). ACM Press, 1223–1237. https://doi.org/10.1145/3243734.3243836

[14] Hao Chen, Kim Laine, and Peter Rindal. 2017. Fast Private Set Intersection from Homomorphic Encryption. In ACM CCS 2017, Bhavani M. Thuraisingham, David Evans, Tal Malkin, and Dongyan Xu (Eds.). ACM Press, 1243–1255. https://doi.org/10.1145/3133956.3134061

[15] Ilaria Chillotti, Nicolas Gama, Mariya Georgieva, and Malika Izabachene. 2016. Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds. In International Conference on the Theory and Application of Cryptology and Information Security. Springer, 3–33.

[16] Benny Chor, Niv Gilboa, and Moni Naor. 1997. Private information retrieval by keywords. Citeseer.

[17] Craig Costello and Patrick Longa. 2015. FourQ: four-dimensional decompositions on a Q-curve over the Mersenne prime. Cryptology ePrint Archive, Report 2015/565. https://eprint.iacr.org/2015/565.

[18] Whitfield Diffie and Martin E. Hellman. 1976. New Directions in Cryptography. IEEE Transactions on Information Theory 22, 6 (1976), 644–654.

[19] Changyu Dong, Liqun Chen, and Zikai Wen. 2013. When private set intersection meets big data: an efficient and scalable protocol. In ACM CCS 2013, Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung (Eds.). ACM Press, 789–800. https://doi.org/10.1145/2508859.2516701

[20] Léo Ducas and Daniele Micciancio. 2015. FHEW: Bootstrapping Homomorphic Encryption in Less Than a Second. In EUROCRYPT 2015, Part I (LNCS, Vol. 9056), Elisabeth Oswald and Marc Fischlin (Eds.). Springer, Heidelberg, 617–640.

[21] Bin Fan, Dave G. Andersen, Michael Kaminsky, and Michael D. Mitzenmacher. 2014. Cuckoo Filter: Practically Better Than Bloom. In Proceedings of the 10th ACM International on Conference on Emerging Networking Experiments and Technologies (Sydney, Australia) (CoNEXT ’14). Association for Computing Machinery, New York, NY, USA, 75–88. https://doi.org/10.1145/2674005.2674994

[22] Junfeng Fan and Frederik Vercauteren. 2012. Somewhat Practical Fully Homomorphic Encryption. Cryptology ePrint Archive, Report 2012/144. http://eprint.iacr.org/.

[23] Michael J. Freedman, Yuval Ishai, Benny Pinkas, and Omer Reingold. 2005. Keyword Search and Oblivious Pseudorandom Functions. In TCC 2005 (LNCS, Vol. 3378), Joe Kilian (Ed.). Springer, Heidelberg, 303–324.

[24] Michael J. Freedman, Kobbi Nissim, and Benny Pinkas. 2004. Efficient Private Matching and Set Intersection. In EUROCRYPT 2004 (LNCS, Vol. 3027), Christian Cachin and Jan Camenisch (Eds.). Springer, Heidelberg, 1–19. https://doi.org/10.1007/978-3-540-24676-3_1

[25] Craig Gentry. 2009. Fully homomorphic encryption using ideal lattices. In STOC, 169–178.

[26] Craig Gentry, Shai Halevi, and Nigel P. Smart. 2012. Homomorphic evaluation of the AES circuit. In Advances in Cryptology–CRYPTO 2012. Springer, 850–867.

[27] Craig Gentry, Amit Sahai, and Brent Waters. 2013. Homomorphic Encryption from Learning with Errors: Conceptually-Simpler, Asymptotically-Faster, Attribute-Based. In CRYPTO (1) (Lecture Notes in Computer Science, Vol. 8042), Ran Canetti and Juan A. Garay (Eds.). Springer, 75–92. https://doi.org/10.1007/978-3-642-40041-4

[28] Christoph Hagen, Christian Weinert, Christoph Sendner, Alexandra Dmitrienko, and Thomas Schneider. 2021. All the Numbers are US: Large-scale Abuse of Contact Discovery in Mobile Messengers. In 28th Annual Network and Distributed System Security Symposium, NDSS. The Internet Society.

[29] Shai Halevi and Victor Shoup. 2020. Design and implementation of HElib: a homomorphic encryption library. Cryptology ePrint Archive, Report 2020/1481. https://eprint.iacr.org/2020/1481.

[30] Carmit Hazay and Yehuda Lindell. 2008. Efficient Protocols for Set Intersection and Pattern Matching with Security Against Malicious and Covert Adversaries. In Theory of Cryptography, Ran Canetti (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 155–175.