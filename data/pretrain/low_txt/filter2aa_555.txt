# SecureAuth Labs: Driver Vulnerabilities and Privilege Escalation

## Presenters
- Jesse Michael
- Mickey Shkatov
- @JesseMichael
- @HackingThings

## Agenda
1. Introduction
2. Background
3. Prior Work
4. How It's Made
5. Known Threats
6. Attack Scenarios
7. Automating Detection
8. Disclosures
9. Conclusions
10. Q&A

## Presenter
- Diego Juarez

## References
- [Asus Drivers Elevation of Privilege Vulnerabilities](https://www.secureauth.com/labs/advisories/asus-drivers-elevation-privilege-vulnerabilities)
- [Gigabyte Drivers Elevation of Privilege Vulnerabilities](https://www.secureauth.com/labs/advisories/gigabyte-drivers-elevation-privilege-vulnerabilities)
- [ASRock Drivers Elevation of Privilege Vulnerabilities](https://www.secureauth.com/labs/advisories/asrock-drivers-elevation-privilege-vulnerabilities)

## Contributors
- @ReWolf
  - [GitHub Repository](https://github.com/rwfpl/rewolf-msi-exploit) (Blog post link in Readme)
- @NOPAndRoll (Ryan Warns) / Timothy Harrison
  - [Infiltrate 2019 Slidepack](https://downloads.immunityinc.com/infiltrate2019-slidepacks/ryan-warns-timothy-harrison-device-driver-debauchery-msr-madness/MSR_Madness_v2.9_INFILTRATE.pptx)
- @SpecialHoang
  - [Weaponizing Vulnerable Driver for Privilege Escalation: Gigabyte Edition](https://medium.com/@fsx30/weaponizing-vulnerable-driver-for-privilege-escalation-gigabyte-edition-e73ee523598b)

## Prior Work
- **RWEverything**
  - Utility to access almost all hardware interfaces via software.
  - User-space app + signed `RwDrv.sys` driver.
  - Allows arbitrary access to privileged resources not intended to be available to user-space.
  - CHIPSEC helper to use `RwDrv.sys` when available.

- **LoJax**
  - First UEFI malware found in the wild.
  - Implant tool includes `RwDrv.sys` driver from RWEverything.
  - Loads driver to gain direct access to SPI controller in PCH.
  - Uses direct SPI controller access to rewrite UEFI firmware.

- **Slingshot**
  - APT campaign brought along its own malicious driver.
  - Active from 2012 through at least 2018.
  - Exploited other drivers with read/write MSR to bypass Driver Signing Enforcement to install a kernel rootkit.

## Background
### Application
- Windows OS
- Driver
- Device

### Request Process
- `DeviceIoControl(dev, ioctl, inbuf, insize, ...)`
- IOCTL handler in driver called with IRP struct containing arguments passed from userspace.

### Windows Drivers
- **Signed**
- **WHQL Signed**
- **EV Signing Cert** (Required for Win10 signing process)
- Briefly explain the process of signing code.

## How It's Made
- **RWEverything**
  - Utility to access almost all hardware interfaces via software.
  - User-space app + signed `RwDrv.sys` driver.
  - Allows arbitrary access to privileged resources not intended to be available to user-space.
  - CHIPSEC helper to use `RwDrv.sys` when available.

- **LoJax**
  - First UEFI malware found in the wild.
  - Implant tool includes `RwDrv.sys` driver from RWEverything.
  - Loads driver to gain direct access to SPI controller in PCH.
  - Uses direct SPI controller access to rewrite UEFI firmware.

- **Slingshot**
  - APT campaign brought along its own malicious driver.
  - Active from 2012 through at least 2018.
  - Exploited other drivers with read/write MSR to bypass Driver Signing Enforcement to install a kernel rootkit.

- **Game Cheats and Anti-Cheats (CapCom and others)**
- **MSI, ASUS, GIGABYTE, ASROCK**

## Known Threats
- **RWEverything**
  - Utility to access almost all hardware interfaces via software.
  - User-space app + signed `RwDrv.sys` driver.
  - Allows arbitrary access to privileged resources not intended to be available to user-space.
  - CHIPSEC helper to use `RwDrv.sys` when available.

- **LoJax**
  - First UEFI malware found in the wild.
  - Implant tool includes `RwDrv.sys` driver from RWEverything.
  - Loads driver to gain direct access to SPI controller in PCH.
  - Uses direct SPI controller access to rewrite UEFI firmware.

- **Slingshot**
  - APT campaign brought along its own malicious driver.
  - Active from 2012 through at least 2018.
  - Exploited other drivers with read/write MSR to bypass Driver Signing Enforcement to install a kernel rootkit.

## Attack Scenarios
1. **Privilege escalation from Userspace to Kernelspace**
2. **Bypass/disable Windows security mechanisms**
3. **Direct hardware access**
   - Can potentially rewrite firmware.

### Motivations
1. **Driver is already on system and loaded**
   - Access to driver is controlled by policy configured by the driver itself.
   - Many drivers allow access by non-admin users.
2. **Driver is already on system and not loaded**
   - Need admin privileges to load the driver.
   - Can also wait until an admin process loads the driver to avoid needing admin privileges.
3. **Malware brings driver along with it**
   - Need admin privileges to load the driver.
   - Can bring an older version of the driver.
   - Lojax did this for an in-the-wild campaign.

## Automating Detection
- **Problems**
  - Current code only supports WDM drivers.
  - Have some ideas on how to support WDF drivers.
  - Angr uses VEX intermediate representation lifting.
  - VEX is part of Valgrind.
  - Has apparently never been used to analyze privileged code.
  - Decode error on `rdmsr/wrmsr`, `read/write CR`, `read/write DR` opcodes.
  - Some drivers cause it to blow up and use 64GB of RAM.

## Disclosures
- **Microsoft Response**
  - Microsoft has a strong commitment to security and a demonstrated track record of investigating and proactively updating impacted devices as soon as possible.
  - For the best protection, we recommend using Windows 10 and the Microsoft Edge browser.
  - To exploit vulnerable drivers, an attacker would need to have already compromised the computer.
  - Microsoft recommends that customers use Windows Defender Application Control to block known vulnerable software and drivers.
  - Customers can further protect themselves by turning on memory integrity for capable devices in Windows Security.

- **Vendor Responses**
  - **Intel**
    - Date: July 9, 2019
    - [Advisory](https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00268.html)
  - **Huawei**
    - Date: July 10, 2019
    - [Advisory](https://www.huawei.com/fr/psirt/security-advisories/huawei-sa-20190710-01-pcmanager-en)
  - **Phoenix**
    - TBD
    - TBD
  - **REDACTED**
    - Date: Aug 13, 2019
    - TBD
  - **REDACTED**
    - TBD
    - TBD
    - No response

## Conclusions
- GitHub release of all of our code.
- [GitHub Repository](https://github.com/eclypsium/Screwed-Drivers)

## Code Release
- All the primitives in one driver:
  - Physical and virtual memory read/write
  - Read/Write MSR
  - Read/Write CR
  - Legacy Read/Write PCI via IN/OUT
  - IN/OUT

## Questions?
- Open the floor for any questions or discussions.