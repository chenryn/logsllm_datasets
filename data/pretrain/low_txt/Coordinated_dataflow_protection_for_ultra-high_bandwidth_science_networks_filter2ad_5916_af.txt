### Tag Bit Count and Policy Representation

We compare our approach with traditional tagging mechanisms, such as bit segmentation and Alpaca [20]. Traditional methods allocate a bit for each network attribute. For instance, in the SDMZ Campus Net1, the policy attributes include:
- 6 projects (3 bits)
- 3000 users (12 bits)
- 890 hosts (10 bits)
- 24 applications (5 bits)
- 4 security states (2 bits)
- 28 services (5 bits)
- 19 experiments (5 bits)

Using a naive attribute-based tagging approach, the total number of bits required is 42. However, since we plan to use IPv6 flow-label bits (20 bits) and need to account for other dynamic parameters, these traditional approaches are not directly applicable.

### Tag Optimization

Alpaca effectively reduces the number of required tags by prefixing or masking bits, making the tag count dependent on the number of attributes rather than the number of policies [20]. In contrast, our approach relies on the composed policy graph (i.e., the number of policies), thus requiring fewer bits. Figure 10a shows that for SDMZ Campus Net1 and SDMZ Campus Net2 (PS-1), our approach requires approximately 4–5 times fewer bits than bit segmentation and 3–4 times fewer than Alpaca and FlowTags. Specifically, our approach requires around 7-11 bits, while the other approaches need approximately 24-42 bits. 

For synthetic policy set PS-2, built from the attributes of PS-1, the tag bits required increase linearly with the number of attributes used in the policy specification. Our approach, however, only requires about 15 bits. Similarly, FlowTags require approximately 2.2–3 times more tags compared to our approach. As more dynamic policy attributes are added, the number of tag bits required by Alpaca and FlowTags will gradually increase. Our approach allows for the reuse of tag bits in both temporal and dynamic security policies and across different sites (see §5.2).

### Rule Optimization

Figure 10b compares the efficiency of our tag-based rule optimization with Alpaca [20] and bit segmentation (BS) using policy sets PS-1 and PS-2. Compared to high-level policies specified for device groups, the number of enforced rules is significantly larger. For example, the policy set PS-1 from two SDMZ campus networks, with approximately 150 and 400 policies, required about 5.3K and 7.9K rules, respectively. The 20k synthetic policies required approximately 130k rules.

We evaluate the number of rules required after translating the policies into enforceable rules for each approach. Alpaca, FlowTags, and bit segmentation achieve rule set reductions through tag-bit masking or wild-card matching, resulting in an improvement of approximately 40–47% over the original rule set (for both PS-1 and PS-2). Our policy specification mechanism, which captures attributes along multiple dimensions per policy tag, results in higher rule-space optimization. Compared to Alpaca, FlowTags, and BS, our approach achieved a 46–55% rule-space improvement for SDMZ Campus Net1 and 40–52% for SDMZ Campus Net2. For the 20k policy set (PS-2), our approach achieved a 49% rule-size improvement over Alpaca.

### Tag-Space Allocation

We examined the inter-site tag space allocation mechanism using DS-1. Using the DS-1 graph, we randomly selected one node and all adjacent nodes in a breadth-first search until a total of 100 nodes were reached. We then assigned an average of up to five projects per site, executed our edge-graph-coloring algorithm, and plotted the latency incurred with tag-space allocation for these 100 sites. This procedure was repeated 10 times, with a different first site chosen each time. We also varied the number of average projects per site and increased the number of sites from 200 to 1000, adding random edges between nodes to control the average number of projects per site (5, 10, 15, and 20) in each experimental iteration.

Figure 11a illustrates the average tag-space allocation latency with increasing numbers of sites (n). Each time, the number of adjacent sites for each site is maintained proportional to n. For 1000 sites, with an average of 5, 10, 15, and 20 projects per site, the tag-space allocation required approximately 1.9, 8.2, 41.9, and 76.8 seconds, respectively. The dominant computation cost was attributed to optimal color selection for each project within a site (steps 11–13 of Algorithm 2). 

Next, we maintained the number of adjacent sites at five and conducted the same experiments (Figure 11b). For 1000 sites with an average of 20 projects per site, the total tag space allocation mechanism took less than approximately 14 seconds to complete the edge-color assignment. We assert that this cost is reasonable given the infrequency of the procedure and the slack tag space assigned to each project (see §5.2).

### Flow-Processing Performance

Figure 12 captures the percentage drop in throughput for various security-based microservices implemented for SDMZ-specific security use cases. We compare the performance of our security modules with the maximum possible throughput achieved by simply routing IPv6 elephant flows generated at line rate (40 Gbps) across two different SDMZ sites. Evaluations were carried out with SDMZ sites configured with policy set PS-1 and security modules deployed at the edge of each site. We evaluated the following filtering schemes:
- Tag-based filtering
- Host-based data exfiltration protection
- Rate limiting
- Connection tracking (both IP and tag-based)
- Spoof protection

Simple tag-based filtering outperforms traditional stateless IPv6 ACL-based filtering (e.g., source and destination IPs, port, protocol, traffic class) with an 8–12% difference in throughput: a difference of approximately 4.2 million packets per second (mpps) at 128-byte packet size and 0.04 mpps at 9000-byte packet size. Tag-based filtering achieved 92% of the actual line rate with 128-byte packets and approximately 99% throughput for 9000-byte packets. The overhead of performing data-exfiltration protection from host DTNs using the SciMon module is minimal, as it does not require complete on-data-path analysis, resulting in performance comparable to tag-based filtering.

As shown in Figure 15 (Appendix A.2), the spoof protection module built in OVS involves two tag-based lookups: 1) tagID to...