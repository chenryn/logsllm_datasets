## Page 111
### 检查清单
**DockerUI**
在继续讨论之前，让我们回顾一下部署管道的基本实现进度（见图7-3）。除非另有说明，DockerUI将运行在我们创建的所有虚拟机上。

- (7) 集成容器
- (6) 在生产服务器上部署容器
- (5) 将容器推送到镜像库
- (4) 构建容器
- (3) 编译并打包代码
- (2) 运行部署前测试
- (1) 检出代码

**Dashboard**
- 镜像已创建：已完成
- 容器已创建：已完成
- 正在运行的容器：待完成

**图7-2 Docker UI Dashboard界面**

- 镜像已创建：已完成
- 容器已创建：已完成
- 正在运行的容器：待完成
- 状态：待完成

### 7.1 在生产服务器上部署容器
通过远端的Docker API进行生产环境的部署。目前，检查清单中只有三个待完成的任务，但应用尚未集成。

**中间阶段**
- 检出代码：待完成
- 构建容器：待完成
- 在生产服务器上的操作：待完成

我们将使用新的虚拟机来试验服务发现工具，并继续讨论服务发现和反向代理的概念。

**图7-3 基于Docker的部署管道的中间阶段**

---
## Page 112
### 节省资源
为了节省资源，我们将终止当前运行的虚拟机，并在第8章中创建新的虚拟机。

**零停机部署**
无法运行集成测试。这使得零停机部署变得更加困难。稍后我们将讨论蓝-绿部署（blue-green deployment）过程，以解决此类问题。不论新旧版本切换的时间多短，停机时间都会妨碍我们转向持续部署。

**生产服务器上的操作**
- 旧版本需要停止
- 新版本需要启动
- 如果部署第二个发行版，则会有一段时间内旧版本与新版本都无法使用

---
## Page 113
### 发现服务
**挑战**
使用预定义端口会导致端口冲突，尤其是在大量服务的情况下。因此，在部署服务时不应指定端口，而应让Docker随机分配。唯一的问题是需要发现端口号并让其对其他人可用。

**图8-1 单节点中服务部署为Docker容器**

**分布式服务的关键**
- 服务发现
- 分布式服务

**引用**
> "做事情花不了多少力气，真正花力气的是决定做什么。" —— 阿尔伯特·哈伯德（Elbert Hubbard）

---
## Page 114
### 第8章 发现服务
**复杂性**
当开始使用分布式系统并在多台服务器上部署服务时，情况变得更加复杂。为了定位服务，至少需要以下两个过程：

1. **服务注册**：保存服务运行的主机和端口。
2. **服务发现**：允许其他人发现在注册过程中保存的信息。

**图8-2 多节点与服务部署为Docker容器**
**图8-3 服务注册与服务发现**

---
## Page 115
### 服务注册
**服务注册表**
- 目标：保存服务信息，要求快速、持久、容错。
- 微服务动态变化，需要不断更新服务注册表。

**主动注册**
尽管主动注册很常见，但它既不是最合适的，也不是最高效的。随着服务数量的增加，修改所有服务变得非常麻烦。

**图8-4 主动注册**

---
## Page 116
### 服务发现
**注册服务**
- 注册服务应该能检测到不再存在的微服务并从注册表中删除其数据。
- 通知其他过程执行补救操作，如重新部署不存在的微服务、发送邮件通知等。

**图8-5 注册服务**

**主动发现**
- 客户端或服务需要访问服务时，查询注册表获取服务信息。
- 使用代理服务可以避免客户端直接查询注册表。

---
## Page 117
### 服务发现工具
**需求提升**
容器技术提升了对服务发现工具的需求。这些工具的主要目的是帮助服务互相发现和交流。

**代理服务**
- 通过一个或多个固定的地址访问每个服务。
- 代理服务已经存在很长时间，并多次证明了其价值。

**主动发现**
- 客户端或服务需要查询注册表以获取服务信息。
- 适用于内部服务间的通信，但在客户端和服务间通信时可能会超出控制范围。

**图8-6 服务发现流程**

---
## Page 118
### 反向代理
**流程参与者**
- 消费者
- 代理
- 提供者

**工作流程**
- 消费者向固定的代理地址请求信息。
- 代理查询注册表并重定向请求到提供者。
- 代理服务分离消费者与注册表的具体实现。

**图8-7 服务发现和反向代理**

**总结**
- 服务注册表的变化会更新代理配置。
- 服务可以用API发现所需的服务信息。