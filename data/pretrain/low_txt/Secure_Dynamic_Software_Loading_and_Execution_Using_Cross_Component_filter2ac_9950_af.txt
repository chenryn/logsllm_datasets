### Identification and Elimination of Unsafe Dynamic Component Loadings

Veeralakshmi and Sindhuja designed a system that identifies and eliminates unsafe dynamic component loadings [48]. Building on the work of Kwon and Su [2], the authors developed a system to remove potentially unsafe component loadings in a system.

### Application Whitelisting

Application whitelisting is a defensive technique that allows only approved applications to run on a system. This feature, known as AppLocker, is built into Microsoft Windows [49]. While it enhances security for specific use cases, such as static-role terminals for SCADA controllers, HMIs, or corporate systems, it can be overly restrictive for general-purpose platforms. Additionally, it does not prevent malicious component loading attacks and requires user or administrator configuration. In contrast, the proposed mechanism permits any application to execute if it is signed by a vendor on the operating system’s trusted vendor list. This approach eliminates the need for user intervention, as the trusted vendor list is maintained by software vendors. Application whitelisting and cross-verification are complementary mechanisms that can be used together to maximize protection against unsafe execution and component loading. Whitelisting can enhance our mechanism by blocking standalone malware.

### Code Signing Recommendations

Code signing has been recommended in multiple studies. Gong suggested its use in Java [24], while Rubin and Daniel extended this recommendation to mobile and portable code [27]. McGraw and Morrisett listed code signing as a major defensive technique applicable to any computing platform [23].

### Origin Check of Digital Signatures

Android uses digital signatures to check the code authors of package files and manage inter-application trust [18]. However, the purpose and mechanism differ from our proposed cross-verification. Android uses digital signatures to verify the author of a JAR file at installation time, ensuring updates come from the same author and managing permissions. Self-signed signatures are allowed and widely used, meaning the signer can be anyone, not just a certified vendor. This is different from our cross-verification, which performs run-time code validity checks and ensures two-way verification.

### Detection of Unsafe Component Loading

Detection of unsafe component loading has been well-studied [50], [2], [3], [51]. Kwon and Su proposed a method to detect possible unsafe loadings [2], [3]. Their tool profiles applications’ dynamic loading behavior and checks for potential vulnerabilities, such as DLL hijacking. These detection techniques are more beneficial for developers during the development phase rather than for users at runtime.

### Concluding Remarks

Code signing is a crucial security mechanism on modern client computing platforms, with many software vendors already adopting it. However, it has proven insufficient against various attacks, as adversaries have started using legitimate signatures for malware. In this paper, we propose a new security mechanism for secure execution and dynamic component loading, based on code signing and the same-origin policy. Our mechanism effectively prevents a wide range of attacks, including DLL hijacking, DLL side-loading, binary hijacking, typical DLL injection, and drive-by download attacks, even when malicious binaries have valid digital signatures. It also blocks the loading of infected or newly installed malicious components and protects proprietary software components from unauthorized use.

We investigated application execution and dynamic component loading cases, demonstrating the effectiveness of our mechanism. A prototype was implemented to confirm its practical validity. Although our focus was on Microsoft Windows, the underlying principle is general and can be applied to other client platforms, including Linux, Mac OS X, and Android. Given the widespread use of component-based software engineering, the benefits on these platforms will be significant. We are particularly interested in applying our technique to mobile platforms due to the increasing number of mobile malware [52] and the need for robust defenses against this emerging threat.

### References

[1] B. Blunden, The Rootkit Arsenal: Escape and Evasion in the Dark Corners of the System. Jones & Bartlett Publishers, Mar. 2012.
[2] T. Kwon and Z. Su, “Automatic detection of unsafe component loadings,” in ISSTA ’10: Proceedings of the 19th International Symposium on Software Testing and Analysis, (Trento, Italy), pp. 107–118, July 2010.
[3] T. Kwon and Z. Su, “Static Detection of Unsafe Component Loadings,” in Compiler Construction, (Tallinn, Estonia), pp. 122–143, 2012.
[4] Microsoft SWI, “MS14-019 – Fixing a binary hijacking via .cmd or .bat file.” http://blogs.technet.com/b/srd/archive/2014/04/08/ms14-019-fixing-a-binary-hijacking-via-cmd-or-bat-file.aspx, Apr. 2014.
[5] A. Stewart, “DLL Side-loading: A Thorn in the Side of the Anti-Virus Industry,” tech. rep., FireEye, Mar. 2014.
[6] B. Min and V. Varadharajan, “Feature-Distributed Malware Attack: Risk and Defence,” in 19th European Symposium on Research in Computer Security (ESORICS), (Wroclaw, Poland), pp. 457–474, 2014.
[7] Anity Labs, “Analysis Report on Flame Worm Samples,” tech. rep., Anity Labs, July 2012.
[8] E. Chien, L. O. Murchu, and N. Falliere, “W32.Duqu The precursor to the next Stuxnet,” tech. rep., Symantec, Nov. 2011.
[9] N. Falliere, L. O. Murchu, and E. Chien, “W32.Stuxnet dossier,” tech. rep., Symantec, 2011.
[10] Kaspersky Lab, “Gauss: Abnormal Distribution,” tech. rep., Kaspersky Lab, Aug. 2012.
[11] Kaspersky Lab, “Unveiling ”Careto” - The Masked APT,” tech. rep., Kaspersky Lab, Feb. 2014.
[12] M. Fossi, G. Egan, E. Johnson, T. Mack, T. Adams, J. Blackbird, B. Graveland, and D. McKinney, “Symantec Report on Attack Kits and Malicious Websites,” tech. rep., Symantec, 2011.
[13] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, and A. Pitsillidis, “Manufacturing compromise: the emergence of exploit-as-a-service,” in CCS’12, (Raleigh, North Carolina, USA), pp. 821–832, 2012.
[14] L. Lu, V. Yegneswaran, P. Porras, and W. Lee, “Blade: an attack-agnostic approach for preventing drive-by malware infections,” in CCS’10, (Chicago, Illinois, USA), pp. 440–450, 2010.
[15] Apple, “iOS Security,” tech. rep., Apple, Feb. 2014.
[16] Microsoft, “Code signing best practices,” tech. rep., Microsoft, July 2007.
[17] Microsoft, “Windows Authenticode Portable Executable Signature Format,” tech. rep., Microsoft, July 2008.
[18] Android Official Web Page, “Signing Your Applications.” http://developer.android.com/tools/publishing/app-signing.html.
[19] P. Roberts, “Accountability -Not Code Quality- Makes iOS Safer Than Android.” https://threatpost.com/accountability-not-code-quality-makes-ios-safer-android-042012/76463, Apr. 2012.
[20] C. Miller, “Don’t Hassle The Hoff: Breaking iOS Code Signing,” in SyScan, (Taipei, Taiwan), Oct. 2011.
[21] H. Shinotsuka, “How Attackers Steal Private Keys from Digital Certificates.” http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates, Jan. 2014.
[22] McAfee Labs, “McAfee Labs threats report 4th quarter 2013,” tech. rep., McAfee Labs, Apr. 2014.
[23] G. McGraw and G. Morrisett, “Attacking Malicious Code: A Report to the Infosec Research Council,” IEEE Software, vol. 17, no. 5, pp. 33–41, 2000.
[24] L. Gong, “Secure Java class loading,” IEEE Internet Computing, vol. 2, no. 6, pp. 56–61, 1998.
[25] B. Hashi, M. Lal, R. Pandey, and S. Samorodin, “Securing systems against external programs,” IEEE Internet Computing, vol. 2, no. 6, pp. 35–45, 1998.
[26] B. Morton, “Code Signing,” tech. rep., CASC, Oct. 2013.
[27] A. D. Rubin and D. E. Geer, “Mobile code security,” IEEE Internet Computing, vol. 2, no. 6, pp. 30–34, 1998.
[28] W3C, “Same Origin Policy.” http://www.w3.org/Security/wiki/Same_Origin_Policy.
[29] B. Min, V. Varadharajan, U. K. Tupakula, and M. Hitchens, “Antivirus security: naked during updates,” Software: Practice and Experience, vol. 44, pp. 1201–1222, Oct. 2014.
[30] A. Rastogi, A. Chaudhuri, and R. Johnson, “Types and Access Controls for Cross-Domain Security in Flash,” in Asian Symposium on Programming Languages and Systems 2012, (Kyoto, Japan), pp. 82–97, 2012.
[32] B. Arkin, “Inappropriate Use of Adobe Code Signing Certificate.” https://blogs.adobe.com/security/2012/09/inappropriate-use-of-adobe-code-signing-certificate.html, Sept. 2012.
[33] J. Cannell, “Tools of the Trade: Exploit Kits.” http://blog.malwarebytes.org/intelligence/2013/02/tools-of-the-trade-exploit-kits/, Feb. 2013.
[34] contagio, “An Overview of Exploit Packs (Update 19.1) April 2013.” http://contagiodump.blogspot.com, Apr. 2013.
[35] J. Jones, “The State of Web Exploit Kits,” in Black Hat USA, (Las Vegas, Nevada, USA), 2012.
[36] Microsoft, “New Low-Level Binaries.” http://msdn.microsoft.com/en-us/library/windows/desktop/dd371752(v=vs.85).aspx.
[37] D. Artz and Y. Gil, “A survey of trust in computer science and the Semantic Web,” Web Semantics: Science, Services and Agents on the World Wide Web, vol. 5, pp. 58–71, June 2007.
[38] S. Balfe, A. D. Lakhani, and K. G. Paterson, “Trusted computing: providing security for peer-to-peer networks,” in 5th IEEE International Conference on Peer-to-Peer Computing, (Konstanz, Germany), pp. 117–124, 2005.
[39] E. Damiani, D. C. di Vimercati, S. Paraboschi, P. Samarati, and F. Violante, “A reputation-based approach for choosing reliable resources in peer-to-peer networks,” in CCS’12: the 9th ACM conference on Computer and communications security, (Washington, DC, USA), pp. 207–216, Nov. 2002.
[40] A. Jøsang, R. Ismail, and C. Boyd, “A survey of trust and reputation systems for online service provision,” Decision Support Systems, vol. 43, pp. 618–644, Mar. 2007.
[41] A. A. Selcuk, E. Uzun, and M. R. Pariente, “A reputation-based trust management system for P2P networks,” in IEEE International Symposium on Cluster Computing and the Grid, (Chicago, Illinois, USA), pp. 251–258, 2004.
[42] S. Song, K. Hwang, R. Zhou, and Y.-K. Kwok, “Trusted P2P transactions with fuzzy reputation aggregation,” IEEE Internet Computing, vol. 9, no. 6, pp. 24–34, 2005.
[43] S. Chari, S. Halevi, and W. Venema, “Where Do You Want to Go Today? Escalating Privileges by Pathname Manipulation,” in Network & Distributed System Security Symposium (NDSS), (San Diego, CA, USA), 2010.
[44] M. Payer, T. Hartmann, and T. R. Gross, “Safe Loading - A Foundation for Secure Execution of Untrusted Programs,” in IEEE Symposium on Security and Privacy (S&P) 2012, (San Francisco, CA, USA), Apr. 2012.
[45] I. Goldberg, D. Wagner, and R. Thomas, “A secure environment for untrusted helper applications: Confining the wily hacker,” in USENIX Security Symposium 1996, (San Jose, CA, USA), 1996.
[46] C. Grier, S. Tang, and S. T. King, “Secure Web Browsing with the OP Web Browser,” in IEEE Symposium on Security and Privacy, (Oakland, CA, USA), pp. 402–416, 2008.
[47] H. J. Wang, C. Grier, A. Moshchuk, and S. T. King, “The Multi-Principal OS Construction of the Gazelle Web Browser.,” in USENIX Security Symposium 2009, (Montreal, Canada), 2009.
[48] S. Veeralakshmi and M. Sindhuja, “A Secure Environment for Unsafe Component Loading,” International Journal of Engineering and Computer Science, vol. 2, pp. 1111–1116, Apr. 2013.
[49] S. Dery, “Using Whitelisting to Combat Malware Attacks at Fannie Mae,” IEEE Security & Privacy, vol. 11, no. 4, pp. 90–92, 2013.
[50] N. Geethanjali, S. Priyadarshini, and S. Karthik, “Detection Of Unsafe Component Loadings Using Dynamic Analysis Technique,” International Journal of Advanced Research in Computer Engineering & Technology, vol. 2, pp. 3247–3251, Dec. 2013.
[51] T. Ramesh, K. Prabhakar, and G. Ramesh, “Dynamic Component Safety Analysis: A Regression Based Code Coverage Approach,” International Journal of Electronics Communication and Computer Engineering, vol. 4, no. 6, pp. 88–92, 2013.
[52] Y. Zhou and X. Jiang, “Dissecting android malware: Characterization and evolution,” in IEEE S&P, (San Francisco, CA, USA), 2012.