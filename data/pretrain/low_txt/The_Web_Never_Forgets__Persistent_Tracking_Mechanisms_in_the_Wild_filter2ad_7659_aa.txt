# The Web Never Forgets: Persistent Tracking Mechanisms in the Wild

**Authors:**
- Gunes Acar, KU Leuven, ESAT/COSIC and iMinds, Leuven, Belgium
- Christian Eubank, Princeton University
- Steven Englehardt, Princeton University
- Marc Juárez, KU Leuven, ESAT/COSIC and iMinds, Leuven, Belgium
- Arvind Narayanan, Princeton University
- Claudia Díaz, KU Leuven, ESAT/COSIC and iMinds, Leuven, Belgium

**Contact Information:**
- KU Leuven: {name.surname}@esat.kuleuven.be
- Princeton University: {cge,ste,arvindn}@cs.princeton.edu

## Abstract
This paper presents the first large-scale studies of three advanced web tracking mechanisms: canvas fingerprinting, evercookies, and cookie syncing. Canvas fingerprinting, a recently developed form of browser fingerprinting, has not been previously reported in the wild; our results show that over 5% of the top 100,000 websites employ it. We also present the first automated study of evercookies and respawning, including the discovery of a new evercookie vector, IndexedDB. Additionally, we introduce novel techniques for detecting and analyzing ID flows in cookie syncing, and we quantify the amplification of privacy-intrusive tracking practices due to this mechanism.

Our evaluation of defensive techniques used by privacy-aware users reveals subtle pitfalls, such as failing to clear state across multiple browsers, which can shatter privacy defenses. This suggests that even sophisticated users face significant challenges in evading these tracking techniques.

**Categories and Subject Descriptors:**
- K.6.m [Management of Computing and Information Systems]: Miscellaneous
- H.3.5 [Information Storage and Retrieval]: Online Information Services — Web-based services
- K.4.4 [Computers and Society]: Electronic Commerce — Security

**Keywords:**
Web security, privacy, tracking, canvas fingerprinting, browser fingerprinting, cookie syncing, evercookie, JavaScript, Flash

**Permissions:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

CCS'14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660347.

## 1. Introduction
In 1999, a New York Times article described cookies as comprehensive privacy invaders, labeling them as "surveillance files" implanted by marketers. A decade later, Edward Felten wrote, "If You’re Going to Track Me, Please Use Cookies" [18], highlighting the stealth and sophistication of modern tracking techniques. Online tracking is often described as an "arms race" [47], and in this work, we study the latest advances in that race.

The tracking mechanisms we examine are advanced in their ability to evade control, detection, and blocking. Canvas fingerprinting uses the browser's Canvas API to draw invisible images and extract a persistent, long-term fingerprint without the user's knowledge. There is no known way to automatically block canvas fingerprinting without false positives, and even partial fixes require browser source-code patches [40]. Evercookies actively circumvent users' attempts to start with a fresh profile by abusing different browser storage mechanisms to restore removed cookies. Cookie syncing, a workaround to the Same-Origin Policy, allows different trackers to share user identifiers, enabling back-end server-to-server data merges hidden from public view.

Our goal is to improve transparency in web tracking, particularly for advanced techniques. We hope our methods and results will lead to better defenses, increased accountability for companies deploying exotic tracking techniques, and an informed public and regulatory debate on increasingly persistent tracking methods.

During our measurements, we aimed to automate all possible data collection and analysis steps, improving the scalability of our crawlers and allowing us to analyze 100,000 sites for fingerprinting experiments. This significantly enhances the scale and sophistication of prior work on respawning, evercookies, and cookie syncing.

### 1.1 Contributions
- **First study of real-world canvas fingerprinting practices:** We present the results of previously unreported canvas fingerprinting scripts found on the top 100,000 Alexa sites. Our findings show that canvas fingerprinting is the most common fingerprinting method studied, with a prevalence of over 5%. Analysis of real-world scripts revealed techniques beyond those suggested by the academic community (Section 3).
- **Automated analysis of evercookies and respawning:** We describe an automated detection method for evercookies and cookie respawning. Applying this method, we detected respawning by Flash cookies on 10 of the 200 most popular sites and found 33 different Flash cookies used to respawn over 175 HTTP cookies on 107 of the top 10,000 sites. We also uncover a new evercookie vector, IndexedDB, which had not been found in the wild before (Section 4).
- **Cookie syncing privacy analysis:** We find instances of synced respawned IDs in the wild, where an ID respawned by one domain is passed to another. Respawning enables trackers to link a user’s browsing logs before and after cookie clearing. In our measurements, approximately 1.4% of a user’s browser history can be linked this way. However, this figure jumps to at least 11% when these respawned cookies are subsequently synced. Cookie syncing also allows trackers to merge records on individual users, although this merging cannot be observed via the browser. Our measurements in Section 5 show that in the model of back-end merging we study, the number of trackers that can obtain a sizable fraction (40%) of a user’s browsing history increases from 0.3% to 22.1%.
- **Novel techniques:** In performing the above experiments, we developed and utilized novel analysis and data collection techniques that can be used in similar web privacy studies.
  - Using the `strace` debugging tool for low-level monitoring of the browser and the Flash plugin player (Section 4.2).
  - A set of criteria for distinguishing and extracting pseudonymous identifiers from traditional storage vectors, such as cookies, as well as other vectors like Flash storage. By extracting known IDs, we can track them as they spread to multiple domains through cookie syncing.
- **Making the code and data public:** We intend to publicly release all the code we developed for our experiments and all collected data, including (i) our crawling infrastructure, (ii) modules for analyzing browser profile data, and (iii) crawl databases collected in the course of this study.

### 1.2 Implications
Our results indicate that the three advanced tracking mechanisms we studied are present in the wild and some are quite prevalent. As elaborated in Section 6.1, these mechanisms are hard to block, especially without loss of content or functionality, and once some tracking has occurred, it is difficult to start from a truly clean profile. A frequent argument in online privacy debates is that individuals should "take control" of their own privacy online. Our results suggest that even sophisticated users may not be able to do so without significant trade-offs.

We show that cookie syncing can greatly amplify privacy breaches through server-to-server communication. While web privacy measurement has helped illuminate many privacy breaches online, server-to-server communication is not directly observable. This argues for greater oversight over online tracking.

Our results apply to desktop browsing. Studying similar tracking mechanisms on mobile platforms requires distinct methodologies and infrastructure and is left to future work.

## 2. Background and Related Work
The tracking mechanisms studied in this paper differ from conventional methods in their potential to circumvent users’ tracking preferences, being hard to discover and resilient to removal. We selected three of the most prominent persistent tracking techniques—canvas fingerprinting, evercookies, and cookie syncing—based on the lack of adequate or comprehensive empirical measurements of these mechanisms in the wild. Below, we provide a brief overview of these techniques.

### Canvas Fingerprinting
Canvas fingerprinting is a type of browser or device fingerprinting technique first presented by Mowery and Shacham in 2012 [32]. The authors found that by using the Canvas API of modern browsers, an adversary can exploit subtle differences in the rendering of the same text or WebGL scenes to extract a consistent fingerprint. This can be done in a fraction of a second without the user's awareness.

The same text can be rendered differently on different computers depending on the operating system, font library, graphics card, graphics driver, and the browser. These differences can be due to variations in font rasterization, system fonts, API implementations, or even the physical display [32]. To maximize the diversity of outcomes, the adversary may draw as many different letters as possible to the canvas. Mowery and Shacham, for instance, used the pangram "How quickly daft jumping zebras vex" in their experiments.

The entropy available in canvas fingerprints has never been measured in a large-scale published study like Panopticlick [16]. Mowery and Shacham collected canvas fingerprints from 294 Mechanical Turk users and computed 5.73 bits of entropy for their dataset. Since this experiment was significantly limited for measuring the canvas fingerprinting entropy, they estimated at least 10 bits, meaning one in a thousand users share the same fingerprint [32].

Figure 1 shows the basic flow of operations to fingerprint canvas. When a user visits a page, the fingerprinting script draws text with the font and size of its choice and adds background colors (1). Next, the script calls the Canvas API’s `toDataURL` method to get the canvas pixel data in dataURL format (2), which is a Base64 encoded representation of the binary pixel data. Finally, the script takes the hash of the text-encoded pixel data (3), which serves as the fingerprint and may be combined with other high-entropy browser properties such as the list of plugins, the list of fonts, or the user agent string [16].

### Evercookies and Respawning
A 2009 study by Soltani et al. showed the abuse of Flash cookies for regenerating previously removed HTTP cookies, a technique referred to as "respawning" [43]. They found that 54 of the 100 most popular sites (rated by Quantcast) stored Flash cookies, of which 41 had matching content with regular cookies. Soltani et al. then analyzed respawning and found that several sites, including aol.com, about.com, and hulu.com, regenerated previously removed HTTP cookies using Flash cookies. A follow-up study in 2011 found that sites use ETags and HTML5 localStorage API to respawn cookies [7].

In 2010, Samy Kamkar demonstrated the "Evercookie," a resilient tracking mechanism that utilizes multiple storage vectors, including Flash cookies, localStorage, sessionStorage, and ETags [21]. Kamkar employed a variety of novel techniques, such as printing ID strings into a canvas image, which is then force-cached and read from the cached image on subsequent visits. Instead of just respawning HTTP cookies by Flash cookies, his script would check the cleared vectors in the background and respawn from any storage vector that still contained the ID.

### Cookie Syncing
Cookie synchronization, or cookie syncing, is the practice of tracker domains passing pseudonymous IDs associated with a given user, typically stored in cookies, among each other. Domain A, for instance, could pass an ID to domain B by making a request to a URL hosted by domain B, which contains the ID as a parameter string. According to Google’s developer guide to cookie syncing (which they call cookie matching), cookie syncing provides a means for domains to share cookie values, given the restriction that sites can't read each other's cookies, to better facilitate targeting and real-time bidding [4].

In general, we consider the domains involved in cookie syncing to be third parties—that is, they appear on the first-party sites that a user explicitly chooses to visit. Although some sites, such as facebook.com, appear both in a first and third-party context, this distinction is usually quite clear. The authors of [38] consider cookie synchronization both as a means of detecting business relationships between different third-parties and as a means of determining to what degree user data may flow between parties, primarily through real-time bidding. In the present work, we study the implications of the fact that trackers that share an ID through syncing are in a position to merge their database entries corresponding to a particular user, thereby reconstructing a larger fraction of the user’s browsing patterns.

### 2.1 Related Work
While HTTP cookies continue to be the most common method of third-party online tracking [41], a variety of more intrusive tracking mechanisms have been demonstrated, refined, and deployed over the last few years. In response, various defenses have been developed, and a number of studies have presented measurements of the state of tracking. While advertising companies have claimed that tracking is essential for the web economy to function [42], a line of research papers has proposed and prototyped solutions to carry out behavioral advertising without tracking.

**Fingerprinting, Novel Mechanisms:**
Researchers have presented novel browser fingerprinting mechanisms based on performance metrics [31], the JavaScript engine [33], the rendering engine [50], clock skew [23], WebGL, and canvas fingerprinting [32]. Most of these studies followed the path opened by the influential Panopticlick study [16], which demonstrated the potential of browser fingerprinting for online tracking.

**Measurement Studies:**
Web privacy measurement is a burgeoning field. An influential early work is [25], and prominent recent work includes [29, 41]. Mayer and Mitchell made a comprehensive survey of tracking in combination with the policy that surrounds it and developed a tool for similar web privacy measurement studies [29]. Roesner et al. analyzed different tracking methods and suggested a taxonomy for third-party tracking [41].

Other papers have looked at various aspects of web privacy, including PII leakage [26], mobile web tracking [17], JavaScript inclusions [35], targeted advertisements [27], and the effectiveness of blocking tools [28].

Two studies measured the prevalence of different fingerprinting mechanisms and evaluated existing countermeasures [37, 6]. Nikiforakis et al. [37] and Eckersley [6] studied three previous fingerprinting techniques and evaluated their effectiveness.

**Figures:**
- **Figure 1:** Basic flow of operations for canvas fingerprinting.
- **Figure 2:** Respawning HTTP cookies by Flash evercookies: (a) the webpage stores an HTTP and a Flash cookie (LSO), (b) the user removes the HTTP cookie, (c) the webpage respawns the HTTP cookie by copying the value from the Flash cookie.