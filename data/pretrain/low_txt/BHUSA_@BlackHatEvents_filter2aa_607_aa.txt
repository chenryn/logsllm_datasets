#BHUSA @BlackHatEvents
**DirectX: The New Hyper-V Attack Surface**

**Presenters:**
- **Zhenhao Hong (@rthhh17)**
  - Security Specialist at Ant Group Light-Year Security Lab
  - MSRC Most Valuable Security Researcher (2019-2020)
  - Black Hat USA 2021 Speaker

- **Ziming Zhang (@ezrak1e)**
  - Security Researcher at Ant Group Light-Year Security Lab
  - Winner of the Tianfu Cup Windows Project (2021)
  - Microsoft Most Valuable Security Researcher (Q2/Q4 2021)

**Information Classification: General**

**Agenda:**
1. Hyper-V DirectX Component Architecture
2. Configuration
3. Attack Surface
4. Vulnerability Details
5. The Necessity of Fuzzing
6. Conclusion and Black Hat Sound Bytes

## Introduction
- In 2020, Hyper-V introduced a new feature for GPU Paravirtualization.
- This technology is integrated into the WDDM (Windows Display Driver Model), and all WDDMv2.5 or later drivers natively support GPU virtualization.
- New features introduce new attack surfaces.

## WDDM Architecture
- [WDDM Architecture Diagram](https://docs.microsoft.com/en-us/windows-hardware/drivers/display/images/dx10arch.png)

## Hyper-V DirectX Component Architecture
- **Hypervisor (Ring -1)**
- **User Mode**
- **Kernel Mode**
- **Linux VM**
- **Windows Host**
- **VMBUS (hv_vmbus.ko)**
- **DirectX LKM (dxgkrnl.ko)**
- **Application**
- **/dev/dxg**
- **vmcall**
- **Runtime Component**
- **UserMode Driver**
- **VMBUS Component**
- **DirectX Graphics Kernel Subsystem (dxgkrnl.sys)**
- **DirectX Graphics MMS (dxgmms1.sys & dxgmms2.sys)**
- **GPU Driver**

### Data Flow in WDDM
- **Hypervisor (Ring -1)**
- **User Mode**
- **Kernel Mode**
- **Linux VM**
- **Windows Host**
- **VMBUS (hv_vmbus.ko)**
- **DirectX LKM (dxgkrnl.ko)**
- **Application**
- **/dev/dxg**
- **vmcall**
- **Runtime Component**
- **UserMode Driver**
- **VMBUS Component**
- **DirectX Graphics Kernel Subsystem (dxgkrnl.sys)**
- **DirectX Graphics MMS (dxgmms1.sys & dxgmms2.sys)**
- **GPU Driver**

### Hyper-V DirectX Component Data Flow
- **Hypervisor (Ring -1)**
- **User Mode**
- **Kernel Mode**
- **Linux VM**
- **Windows Host**
- **VMBUS (hv_vmbus.ko)**
- **DirectX LKM (dxgkrnl.ko)**
- **Application**
- **/dev/dxg**
- **vmcall**
- **Runtime Component**
- **UserMode Driver**
- **VMBUS Component**
- **DirectX Graphics Kernel Subsystem (dxgkrnl.sys)**
- **DirectX Graphics MMS (dxgmms1.sys & dxgmms2.sys)**
- **GPU Driver**

## Configuration
- **Add a Virtual GPU to the Virtual Machine (Ubuntu)**

### In Virtual Machine (Linux VM)
- **GPU Paravirtualization per Virtual GPU DXGK Channel**
- **GPU Paravirtualization Global DXGK Channel**

### DirectX Virtual Device â€” Linux (VM) Driver Support
- **Supported in WSL2-Linux-Kernel Source Code Tree**
  - [GitHub Repository](https://github.com/microsoft/WSL2-Linux-Kernel/tree/linux-msft-wsl-5.10.y/drivers/hv/dxgkrnl)
  - Easy to compile and customize
- **Linux Driver (dxgkrnl.ko) Exposes "/dev/dxg" Device to User Mode Linux**
  - Exposes a set of IOCTLs

### DirectX Component Initialization in Linux VM
- **dxgvmbuschannel_init**
- **dxgglobal_init_global_channel**
- **dxgadapter_set_vmbus**
- **GPU Paravirtualization Global DXGK Channel Initialization**
- **GPU Paravirtualization per Virtual GPU DXGK Channel Initialization**

### Data Send & Receive in Linux VM
- **Send**
  - **dxgvmb_send_sync_msg**
  - **dxgvmb_send_async_msg**
- **Receive**
  - **dxgvmbuschannel_receive**
  - **Sends dxgkrnl Commands to Host**
    - Example: `DXGK_VMBCOMMAND_xxxxx`
  - **Receives Messages and Commands from Host**

### Command Message Format
- **Header + Message Buffer**
  - **Offset 0x00: Command ID (0x08 bytes)**
  - **Offset 0x08: Process (0x04 bytes)**
  - **Offset 0x0C: Channel Type (0x04 bytes)**
    - `DXGKVMB_VGPU_TO_HOST` (per virtual GPU DXGK channel)
    - `DXGKVMB_VM_TO_HOST` (global DXGK channel)
  - **Offset 0x10: Command Type (0x04 bytes)**
    - `DXGK_VMBCOMMAND_xxxxxx`
  - **Offset 0x14: Reserved (0x04 bytes)**
  - **Offset 0x18: Buffer (variable size)**
    - Command message buffer

### Data Receiving in Host
- **VMBus (Root Partition)**
  - **DXG_HOST_GLOBAL_VMBUS::VmBusChannelProcessPacket**
  - **DXG_HOST_VIRTUALGPU_VMBUS::VmBusChannelProcessPacket**
  - **VmBusProcessPacket**
  - **DXG_HOST_GLOBAL_VMBUS::VmBusCommandTableVmToHost**
  - **DXG_HOST_VIRTUALGPU_VMBUS::VmBusCommandTableVgpuToHost**

### Retrieve Data from Guest
- **Function: dxgkrnl! CastToVmBusCommand**
- **Example: DXG_HOST_VIRTUALGPU_VMBUS::VmBusChannelProcessPacket**

### Send Data to Guest
- **dxgkrnl!VmBusCompletePacket(a1, databuffer, buflength)**
  - **v6 is a NTSTATUS Value (4 bytes)**

## Attack Surface
- **Components: dxgkrnl.sys, dxgmms1.sys, dxgmms2.sys**
- **66 DXG_HOST_VIRTUALGPU_VMBUS Commands**
- **21 DXG_HOST_GLOBAL_VMBUS Commands**

## Case Studies: CVE-2022-21918
- **NULL Pointer Reference: DXGK_VMBCOMMAND_SIGNALSYNCOBJECT**
- **Root Cause: dxgmms2!VidSchiSignalSyncObjectsFromCpu a5 (5th parameter) references a NULL Pointer.**

### Detailed Analysis
- **DXG_HOST_VIRTUALGPU_VMBUS::VmBusSignalSyncObject**
  - **Condition: If v22 < v17_Length_MonitoredFenceValueArray**
    - **Then v24_pfence_values = 0**

## Conclusion and Black Hat Sound Bytes
- **Summary of Findings**
- **Future Work and Recommendations**

#BHUSA @BlackHatEvents
**Information Classification: General**