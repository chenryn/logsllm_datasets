### One Plugin for Centralized Bot Tracking

#### 4. Zeus

**a) Sinkhole Announcement:**
In the case of Zeus, we can announce a sinkhole by sending requests to the bots. When a Zeus bot receives a request, it adds the source to its peer list if it has fewer than 50 peers. Since non-routable peers (Vn) cannot receive incoming requests, this method only allows us to announce our sinkholes to routable peers (Vr). However, our prototype has shown that non-routable peers learn about our sinkholes through peer list exchanges with Vr. This phenomenon is referred to as sinkhole propagation.

**b) Node Isolation:**
When a Zeus bot receives a request from a peer whose unique ID is already in the peer list, it updates the respective entry. This allows us to overwrite peer list entries by sending requests with spoofed source IDs to the bots (each Zeus message carries a source ID in its header). In our prototyped attack, we continuously crawl the botnet to find edges between bots and then redirect as many of these edges as possible to our sinkholes using the strategy described above. Our sinkhole then poisons non-routable peers by responding to their periodic peer list requests with manipulated peer list replies. Each request allows us to update up to ten entries in the remote peer’s peer list (see Table V). Note that we must rate-limit this process because recent versions of Zeus feature an automated IP-based blacklist that blocks IP addresses with high request rates.

**c) Fallback Prevention:**
Zeus bots periodically verify that their neighboring peers are alive and responsive. Therefore, our sinkhole must implement the full P2P protocol to remain in the bots’ peer lists. Additionally, Zeus uses a backup strategy that complicates long-term sinkholing. If a bot cannot update itself or its configuration file for seven days, it attempts to obtain a fresh peer list by first contacting a set of hardcoded IP addresses to re-establish contact with the P2P network. If this fails, the bot attempts to download a new peer list by triggering a Domain Generation Algorithm (DGA) and randomly contacting one of 1,000 weekly generated domains. Because both binaries and configuration files are signed, they cannot be forged. As long as these secondary channels remain intact, sinkholing operations against Zeus are only temporarily successful.

We conclude that sinkholing attacks against Zeus or Sality are challenging. Zeus requires a coordinated effort among multiple domain registries and an attack on the P2P layer. Sality makes it hard to isolate peers, as peers with a high reputation cannot be eliminated from the peer lists of non-routable bots. For ZeroAccess, it is feasible to execute a long-term sinkholing attack against all routable peers. Since routable bots propagate sinkhole entries to non-routable peers, we expect an attack to be successful over time. Kelihos is relatively easy to sinkhole but requires intensive tracking by researchers due to its frequent encryption and protocol changes.

### C. Partitioning Resilience

Partitioning and sinkholing are closely related attacks, both aimed at destroying existing links in a botnet. Depending on the goals of a botnet takedown operation, partitioning may have advantages over sinkholing. For example, injected sinkholes are generally easily identified, standing out against other bots due to their popularity. Thus, botnet operators may start counter-attacks against these sinkholes to regain control over their infrastructure. Partitioning attacks do not expose such attack surfaces and are immune to this type of counter-attack.

However, once a botnet has been partitioned, it is nearly impossible to regain control over it and perform additional mitigation attempts—this is, after all, the exact goal of a partitioning attack. There is usually no way to reverse the effects. In contrast, sinkholing maintains control over the botnet and allows for adapted attack strategies at a later point, should that become necessary. More importantly, it generates accurate logs of infected machines and can record the exact time when an infected system was last active. These logs can be used to coordinate cleanups to ultimately eliminate infections.

We believe that sinkholing is generally the preferred attack, and partitioning attacks should be seen as a last resort. For this reason, we did not perform and evaluate large-scale partitioning attacks against the live botnets we studied. Instead, we restricted our tests to the smallest possible sub-graph, consisting of only a single peer. We were able to prove that in all cases, isolation of nodes is possible. Non-routable peers (v ∈ Vn) can remain isolated forever, as there is no way for them to recover unless some backup mechanism re-establishes contact with the botnet. We found that routable peers recover quickly in the botnets we studied, as they are still known to other peers even if their out-degree (deg+(v)) is zero. Depending on the P2P protocol, these peers may contact the attacked peer and propagate new peer list entries to it. A partitioning attack may not be successful unless it affects the whole P2P network by aggressively eliminating edges until all nodes are isolated.

### VII. Discussion and Future Work

Attacking P2P botnets raises some controversy. In this section, we discuss the most pressing controversial issues and directions for future work.

First, attacks like sinkholing involve unsolicited communication with infected hosts, which could be considered unethical by some. Proponents of such attacks might argue that sinkholing does not cause additional harm, as infected hosts already communicate with other bots.

Another ethical concern is the level of detail our work should reveal to the public about botnet resilience. The concern is that botmasters could use our insights to harden their botnet designs. Therefore, we describe our results such that they cannot be directly applied by botmasters to harden their botnets. On a reassuring note, several detailed strategies for resilient P2P botnet designs have been publicly proposed, but we do not know of any real botnets that make use of these ideas [22, 31, 32, 10]. We believe that the potential of our work to assist security experts justifies its publication. We hope that our insights will help avoid damage to innocent third parties caused by the common takedown problems pointed out by Dittrich et al. [6].

While our evaluation shows that some P2P botnets exhibit a high level of resilience, we also find that all real-world P2P botnets are susceptible to at least one of the mitigation strategies we model. Regardless, implementing mitigation strategies against new P2P botnets remains non-trivial due to the need to understand the peculiarities of each botnet’s Command and Control (C&C) protocol. Additionally, attacking networks containing millions of peers requires significant resources that may need to remain available over the long term. We believe that a discussion is required concerning alternative mitigation strategies against P2P botnets. Moreover, we think there is a pressing need for debate to establish clear boundaries on how far authorities are allowed to go when disabling P2P botnets.

We currently see several alternative mitigation possibilities that we believe are deserving of further analysis:

1. **Remote Disinfection:** It is sometimes possible to disinfect bots remotely by exploiting vulnerabilities in bot software. This strategy is currently considered unethical because it could cause collateral damage to the hosts being disinfected if executed without great care. Nevertheless, it may need to be considered if future P2P botnets become immune to more conventional countermeasures.

2. **Impersonating the Botmaster:** Another vector for mitigating P2P botnets is to impersonate the botmaster by forging commands for the bots. Section VI-A has shown that this approach is often prohibited by the use of signed commands. However, it may sometimes be possible for law enforcement to capture infrastructure used by the botmaster to create commands, in which case infected hosts could be commanded to clean up.

3. **Attacking Monetization Models:** Some botnets could be mitigated by attacking their monetization models. For example, Zeus gathers banking credentials, and its botmaster relies on the accuracy of the stolen data. Inserting large amounts of invalid banking data could render the botnet unprofitable for the botmaster. For spamming botnets, node enumeration could be used to create spam blacklists, reducing the botnets’ revenue.

### VIII. Related Work

In this work, we have discussed the resilience of several current and past P2P botnets. For a full discussion of each of the botnets, we refer the interested reader to malware analysis reports [14, 2, 15, 30, 7, 3, 21]. We have used results from these works to aid our manual code analyses, although in most cases, the P2P resilience was yet undocumented.

As noted earlier, a few examples of enumeration and takedown operations against past P2P botnets exist. For instance, Holz et al. performed an early crawl of the Storm botnet and also discussed some general resilience aspects of structured P2P botnets [9]. The sinkholing results of Stock et al. against Waledac represent the first successful attack against an unstructured P2P botnet [23]. Sinclair et al. have described the vulnerabilities of Waledac in detail [21]. The attacks against previous variants of Kelihos are also examples of recent sinkholing successes against unstructured P2P botnets [27]. Although several works on the resilience of individual botnets exist, our work is the first to systematically compare the resilience of all live P2P botnets.

The problem of crawling P2P botnets was first addressed by Kanich et al., based on lessons learned while crawling the Storm botnet [13]. An alternative concept to enumerate infected hosts (including NATed hosts) in structured P2P botnets was proposed by Kang et al. [11]. Their method involves the introduction of many fake nodes (sensors) into the target structured botnet. These sensors find infected hosts by monitoring search requests from bots looking for commands. We extended this approach and applied it to several unstructured P2P botnets, providing us with much more accurate enumeration results than traditional crawling.

In several previous works, graph models have been used to describe network structures. Holme et al. used graph models to study the response of complex networks to several attacks [8]. The first application of random graphs, small world structures, and scale-free networks in the context of botnets was given by Dagon et al. [4]. Davis et al. used graph simulations to analyze the impact of bot disinfections on the communication effectiveness of P2P botnets [5]. Recently, Yen and Reiter discussed the role of assortative mixing in P2P botnets and its consequences for network resilience and recovery [33]. However, to the best of our knowledge, our work is the first to introduce formal definitions for the systematization of attacks against P2P botnets.

To explore the threats we may expect from future P2P botnets, several researchers have designed their own theoretical highly resilient P2P botnets [22, 31, 32, 10]. We are not aware of existing P2P botnets based on these proposals.

### IX. Conclusion

We have presented a model that formalizes reconnaissance and disruption attacks to support mitigation efforts against P2P botnets. We have used this model to analyze several live real-world P2P botnets in two ways.

First, we have estimated and compared the population sizes of current P2P botnets using crawlers and sensor nodes. We have shown that sensor nodes reveal large numbers of bots that cannot be found using crawlers. We conclude that combining crawlers and sensor nodes can provide much more accurate population estimates than crawling alone.

Second, we have evaluated the disruption resilience of all four current P2P botnet families through a combination of static analysis and attack prototyping. Our evaluation has shown weaknesses that could be used to disrupt the Kelihos and ZeroAccess botnets. However, we have also shown that the Zeus and Sality botnets are highly resilient to sinkholing attacks, the currently most used class of disruptive attacks against P2P botnets. We believe our findings demonstrate that research on alternative P2P botnet mitigation methods is urgently needed.

### X. Acknowledgements

We sincerely thank The Shadowserver Foundation and SURFnet for their friendly support. We also thank Dave Dittrich for his insights on Nugache, James Wyke and Kevin McNamee for the exchange on ZeroAccess, and Tomasz Bukowski for the collaboration on Zeus. This work was supported by the Federal Ministry of Education and Research of Germany (Grant 16BY1110, MoBE), the European Research Council Starting Grant “Rosetta,” and the EU FP7-ICT-257007 SysSec project.

### References

[1] M. Antonakakis, R. Perdisci, Y. Nadji, N. Vasiloglou, S. Abu-Nimeh, W. Lee, and D. Dagon. From Throw-Away Traffic to Bots: Detecting the Rise of DGA-Based Malware. In Proceedings of the 21st USENIX Security Symposium, 2012.
[2] T. Bukowski. ZeuS v3 P2P Network Monitoring, 2012. Technical Report by CERT.pl.
[3] P.-M. Bureau. Same Botnet, Same Guys, New Code: Win32/Kelihos. In VirusBulletin, 2011.
[4] D. Dagon, G. Gu, C. P. Lee, and W. Lee. A Taxonomy of Botnet Structures. In Proceedings of the 23rd Annual Computer Security Applications Conference, 2007.
[5] C. R. Davis, S. Neville, J. M. Fernandez, J.-M. Robert, and J. McHugh. Structured Peer-to-Peer Overlay Networks: Ideal Botnet Command and Control Infrastructures? In Proceedings of the 13th European Symposium on Research in Computer Security, 2008.
[6] D. Dittrich. So You Want to Take Over a Botnet. In Proceedings of the 5th USENIX conference on Large-Scale Exploits and Emergent Threats, 2012.
[7] N. Falliere. Sality: Story of a Peer-to-Peer Viral Network, 2011.
[10] R. Hund, M. Hamann, and T. Holz. Towards Next-Generation Botnets. In Proceedings of the 2008 European Conference on Computer Network Defense, 2008.
[11] B. Kang, E. Chan-Tin, C. P. Lee, J. Tyra, H. J. Kang, C. Nunnery, Z. Wadler, G. Sinclair, N. Hopper, D. Dagon, and Y. Kim. Towards Complete Node Enumeration in a Peer-to-Peer Botnet. In Proceedings of the 4th International Symposium on Information, Computer, and Communications Security, 2009.
[12] J. Kang and J.-Y. Zhang. Application Entropy Theory to Detect New Peer-to-Peer Botnets with Multi-chart CUSUM. In Proceedings of the 2nd International Symposium on Electronic Commerce and Security. IEEE Computer Society, 2009.
[13] C. Kanich, K. Levchenko, B. Enright, G. M. Voelker, and S. Savage. The Heisenbot Uncertainty Problem: Challenges in Separating Bots from Chaff. In Proceedings of the 1st USENIX Workshop on Large-Scale Exploits and Emergent Threats, 2008.
[14] A. Lelli. Zeusbot/Spyeye P2P Updated, Fortifying the Botnet, 2012. Technical Report by Symantec Labs: http://www.symantec.com/connect/node/2135671.
[15] K. McNamee. Malware Analysis Report: ZeroAccess/Sirefef, 2012. Technical Report by Kindsight Security Labs.
[16] J. Nazario and T. Holz. As the Net Churns: Fast-Flux Botnet Observations Tracking Fast-Flux Domains. In Proceedings of the 3rd International Conference on Malicious and Unwanted Software, 2008.
[17] P. Porras, H. Saidi, and V. Yegneswaran. Conficker C Analysis, 2009. SRI International Technical Report.
[18] D. Plohmann and E. Gerhards-Padilla. Case Study of the Miner Botnet. In Proceedings of the 4th International Conference on Cyber Conflict, 2012.
[19] C. Rossow, C. J. Dietrich, H. Bos, L. Cavallaro, M. van Steen, F. C. Freiling, and N. Pohlmann. Sandnet: Network Traffic Analysis of Malicious Software. In ACM EuroSys BADGERS, 2011.
[20] V. R. Sergey Golovanov. TDSS, 2010. Technical Report: http://www.securelist.com/en/analysis/204792131/.
[21] G. Sinclair, C. Nunnery, and B. Kang. The Waledac Protocol: The How and Why, 2009. Technical Report by Infrastructure Systems Research Lab/University of North Carolina.
[22] G. Starnberger, C. Kruegel, and E. Kirda. Overbot: A Botnet Protocol Based on Kademlia. In Proceedings of the 4th International Conference on Security and Privacy in Communication Networks, 2008.
[23] B. Stock, M. Engelberth, F. C. Freiling, and T. Holz. Walowdac – Analysis of a Peer-to-Peer Botnet. In Proceedings of the European Conference on Computer Network Defense, 2009.
[24] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna. Your Botnet is My Botnet: Analysis of a Botnet Takeover. In Proceedings of the 16th ACM Conference on Computer and Communications Security, 2009.
[25] S. Stover, D. Dittrich, J. Hernandez, and S. Dietrich. Analysis of the Storm and Nugache Trojans: P2P is here. In USENIX; login, vol. 32, no. 6, 2007.
[26] G. Urdaneta, G. Pierre, and M. van Steen. A Survey of DHT Security Techniques. ACM Computing Surveys, vol. 43, 2011.
[27] T. Werner. Botnet Shutdown Success Story: How Kaspersky Lab Disabled the Hlux/Kelihos Botnet, 2011. Technical Report: http://www.securelist.com/en/blog/208193137/.
[28] T. Werner. The Miner Botnet: Bitcoin Mining Goes Peer-To-Peer, 2011. Blog article by Kaspersky Lab: http://www.securelist.com/en/blog/208193084/.
[29] T. Werner. Kelihos.C: Same Code, New Botnet, 2012. Blog article by CrowdStrike: http://blog.crowdstrike.com/2012/03/kelihosc-same-code-new-botnet.html.
[30] J. Wyke. ZeroAccess, 2012. Technical Report by SophosLabs.
[31] G. Yan, S. Chen, and S. Eidenbenz. RatBot: Anti-enumeration Peer-to-Peer Botnets. In Lecture Notes in Computer Science, vol. 7001, 2011.
Technical Report by Symantec Labs.
[32] G. Yan, D. T. Ha, and S. Eidenbenz. AntBot: Anti-Pollution Peer-to-Peer Botnets. In Journal of Computer Networks, vol. 55, 2011.
[8] P. Holme, B. J. Kim, C. N. Yoon, and S. K. Han. Attack Vulnerability of Complex Networks. Physical Review E, vol. 65, 2002.
[9] T. Holz, M. Steiner, F. Dahl, E. Biersack, and F. Freiling. Measurements and Mitigation of Peer-to-Peer-based Botnets: A Case Study on Storm Worm. In Proceedings of the 1st USENIX Workshop on Large-Scale Exploits and Emergent Threats, 2008.
[33] T.-F. Yen and M. K. Reiter. Revisiting Botnet Models and Their Implications for Takedown Strategies. In Proceedings of the 1st Conference on Principles of Security and Trust, 2012.