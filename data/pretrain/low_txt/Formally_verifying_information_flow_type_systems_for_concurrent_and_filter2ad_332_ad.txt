### Lemma R3-is-csbis: csbis R3

We now define the relation \( S_4 \):

```latex
\text{constdefs } S_4 :: (control \times control) \text{ set}
S_4 \equiv \{(U, V). (cship U \land cship V) \lor U S_3 V\}
```

The non-interference result relies on the following two lemmas. The first lemma establishes that the corresponding relation \( R_4 \) between configurations of controlled thread systems is a quasi-strong bisimulation.

**Lemma R4-is-cqsbis: cqsbis R4**

The proof is straightforward using the previous two results. The second lemma connects typable programs and the relation \( S_4 \).

**Lemma S4-refl: ctypable U \implies U S_4 U**

We are now ready to prove the main result.

**Theorem ScheduledThreadSystems-Non-interference:**
\[ \text{ctypable } U \implies \text{csecure } U \]

By instantiating with \( S_4 \), the only tricky step that remains is the implication \( \text{cqsbis } R \implies \text{cbis } R \). This is not true in general. However, it holds for any relation \( R \) satisfying the following condition:

\[ \forall P Q \mu \nu. \text{ship } P \rightarrow \text{ship } Q \rightarrow \mu ' \nu \rightarrow ((P, \mu), (Q, \nu)) \in R \]

which is easily proven for \( R_4 \).

## 5. Conclusion

We have presented what we believe to be the first machine-checked proof of non-interference for a concurrent language inspired by [4], featuring primitives for scheduling. By using a proof assistant, we were able to eliminate several minor flaws from [4] and extend the scope of the results by lifting convenient but inessential restrictions on the syntax of programs. Our work demonstrates the advantages of using proof assistants in the design or verification of advanced type systems for programming languages.

### Future Work

Our work can be pursued in several directions:

1. **Language Expressiveness:**
   - We aim to generalize our results by extending the scope of the language or considering variations of it.
   - We would like to investigate when one can allow `when` and `control` expressions arbitrarily in programs, or equivalently, collapse processes, threads, and controlled thread systems into a single inductive definition.
   - We also plan to extend the programming language with procedures, as done in [29], and with an exception handling mechanism, as done in [20].
   - Additionally, we would like to consider reactive programming, as studied by Matos, Boudol, and Castellani [15]. The reactive language they study includes features such as broadcast signals, suspension, preemption, and instants. It remains reasonably close to the language presented here, and it should be possible to adapt our formal proofs.
   - More generally, it could be of interest to apply our formalization to calculi of mobile processes, such as the π-calculus, for which Isabelle formalizations exist (see e.g., [21]). One could use these existing formalizations as a basis to formally machine-check the correctness of information flow type systems for the π-calculus, such as those discussed in the introduction.

2. **Security Policy:**
   - Bisimulation-based definitions of security, such as the one adopted in this paper, are often too restrictive in practice. Finding more liberal yet meaningful definitions of security in a concurrent context is a challenging avenue of research. It would be interesting to use our formalization as a basis for exploring more relaxed type systems that enforce weaker notions of security.
   - Another important research challenge is the design of security definitions and type systems that allow a controlled form of information release. Our objective here is to machine-check recent results in this area, such as results about downgrading and intransitive non-interference [14], delimited information release [24], and robust declassification [16, 31, 33].

3. **Type-Preserving Compilation:**
   - We are currently working on machine-checked proofs of non-interference for the low-level language of [3]. It would be interesting to use the formalization of this paper to give a machine-checked proof of correctness for the type-preserving compiler described in that paper. We believe that existing experience with formalizing type-preserving compilers (see e.g., [13]) will prove useful here. (In the formalization work for [3], we are using the proof assistant Coq [5], but most of the proofs of this paper have also been developed in that system.)

### Acknowledgments

Thanks to the anonymous referees for their comments on the paper, and to G. Boudol, I. Castellani, and A. Matos for discussions around [4] and [15]. This work was partially funded by the IST Project Profundis and by the ACI Sécurité SPOPS.

## 6. References

[1] A. Banerjee and D. Naumann. Stack-based access control for secure information flow, 2003. Submitted for journal publication.

[2] A. Banerjee and D. A. Naumann. Secure Information Flow and Pointer Confinement in a Java-like Language. In Proceedings of CSFW'02. IEEE Computer Society Press, 2002.

[3] G. Barthe, A. Basu, and T. Rezk. Security types preserving compilation. In B. Steffen and G. Levi, editors, Proceedings of VMCAI'04, volume 2934 of Lecture Notes in Computer Science, pages 2–15. Springer-Verlag, 2004.

[4] G. Boudol and I. Castellani. Noninterference for concurrent programs and thread systems. Theoretical Computer Science, 281(1):109–130, 2002. Preliminary version available as INRIA Research report 4254.

[5] Coq Development Team. The Coq Proof Assistant User's Guide. Version 7.4, February 2003.

[6] S. Crafa, M. Bugliesi, and G. Castagna. Information flow security for boxed ambients. In V. Sassone, editor, Proceedings of F-WAN, volume 66(3) of Electronic Notes in Theoretical Computer Science. Elsevier Publishing, 2002.

[7] R. Focardi and R. Gorrieri. Classification of security properties: (part i: Information flow). In R. Focardi and R. Gorrieri, editors, Foundations of Security Analysis and Design, volume 2171 of Lecture Notes in Computer Science, pages 331–396. Springer-Verlag, 2001.

[8] J. Goguen and J. Meseguer. Security policies and security models. In Proceedings of SOSP'82, pages 11–22. IEEE Computer Society Press, 1982.

[9] M. Hennessy and J. Riely. Information flow vs. resource access in the information asynchronous pi-calculus. In U. Montanari, J. D. P. Rolim, and E. Welzl, editors, Proceedings of ICALP'00, volume 1853 of Lecture Notes in Computer Science, pages 415–427. Springer, 2000.

[10] T.A. Henzinger, C.M. Kirsch, and S. Matic. Schedule-carrying code. In R. Alur and I. Lee, editors, Proceedings of EMSOFT'03, volume 2855 of Lecture Notes in Computer Science, pages 241 – 256, 2003.

[11] K. Honda and N. Yoshida. A Uniform Type Structure for Secure Information Flow. In Proceedings of POPL'02, pages 81–92. ACM Press, 2002.

[12] G. Klein and T. Nipkow. Verified bytecode verifiers. Theoretical Computer Science, 298(3):583–626, April 2002.

[13] G. Klein and M. Strecker. Verified Bytecode Verification and Type-Certifying Compilation. Journal of Logic and Algebraic Programming, 58:27–60, 2004.

[14] H. Mantel and D. Sands. Controlled Declassification based on Intransitive Noninterference. In Proceedings of APLAS'04, Lecture Notes in Computer Science. Springer-Verlag, 2004. To appear.

[15] A. Almeida Matos, G. Boudol, and I. Castellani. Typing noninterference for reactive programs. In A. Sabelfeld, editor, Proceedings of FCS'04, 2004.

[16] A.C. Myers, A. Sabelfeld, and S. Zdancewic. Enforcing robust declassification. In Proceedings of CSFW'04, pages 172–186. IEEE Press, 2004.

[17] D. Naumann. Machine-checked correctness of a secure information flow analyzer (preliminary report). Technical Report CS-2004-10, Stevens Institute of Technology, March 2003.

[18] T. Nipkow, L. C. Paulson, and M. Wenzel. Isabelle/HOL: A Proof Assistant for Higher-Order Logic, volume 2283 of Lecture Notes in Computer Science. Springer-Verlag, 2002.

[19] D. von Oheimb. Analyzing Java in Isabelle/HOL: Formalization, Type Safety and Hoare Logic. PhD thesis, Technische Universität München, 2001. http://www4.in.tum.de/~oheimb/diss/.

[20] F. Pottier and V. Simonet. Information flow inference for ML. In Proceedings of POPL'02, pages 319–330. ACM Press, 2002.

[21] C. Röckl and D. Hirschkoff. A fully adequate shallow embedding of the π-calculus in Isabelle/HOL with mechanized syntax analysis. Journal of Functional Programming, 2003.

[22] J. Rushby. Noninterference, transitivity, and channel-control security policies. Technical Report SRI-CSL-92-02, Computer Science Laboratory, SRI International, dec 1992.

[23] A. Sabelfeld and A. Myers. Language-Based Information-Flow Security. IEEE Journal on Selected Areas in Communications, 21:5–19, January 2003.

[24] A. Sabelfeld and A. Myers. A model for delimited information release. In Proceedings of ISSS'03, Lecture Notes in Computer Science. Springer-Verlag, 2004.

[25] A. Sabelfeld and D. Sands. A per model of secure information flow in sequential programs. Higher-Order and Symbolic Computation, 14(1):59–91, 2001.

[26] G. Smith. A New Type System for Secure Information Flow. In Proceedings of CSFW'01, pages 115–125, 2001.

[27] G. Smith and D. Volpano. Secure information flow in a multi-threaded imperative language. In Proceedings of POPL'98, pages 355–364. ACM Press, 1998.

[28] M. Strecker. Formal analysis of an information flow type system for MicroJava (extended version). Technical report, Technische Universität München, July 2003.

[29] D. Volpano and G. Smith. A Type-Based Approach to Program Security. In M. Bidoit and M. Dauchet, editors, Proceedings of TAPSOFT'97, volume 1214 of Lecture Notes in Computer Science, pages 607–621. Springer-Verlag, 1997.

[30] D. Volpano and G. Smith. Probabilistic noninterference in a concurrent language. Journal of Computer Security, 7:231–253, November 1999.

[31] S. Zdancewic and A.C. Myers. Robust declassification. In Proceedings of CSFW'01, pages 15–23. IEEE Press, 2001.

[32] S. Zdancewic and A.C. Myers. Observational determinism for concurrent program security. In Proceedings of CSFW'03. IEEE Press, 2003.

[33] S. Zwandewic. A type system for robust declassification. In S. Brookes and P. Panangaden, editors, Proceedings of MFPS'03, volume 83 of Electronic Notes in Theoretical Computer Science. Elsevier Publishing, 2003.