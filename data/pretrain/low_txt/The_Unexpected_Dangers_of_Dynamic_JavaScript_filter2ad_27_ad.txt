### Protection Scheme and Same-Origin Policy

Access to the response of an XMLHttpRequest is governed by the Same-Origin Policy. Therefore, third-party sites cannot request the file within the user's authentication context. As a result, attackers cannot access the data contained within this file. By using Cross-Origin Resource Sharing (CORS) [28], web developers can selectively grant access to the file to any third-party service that requires it.

When an attacker includes and executes a static JavaScript file on their page, the corresponding code runs in the origin of the attacker’s website. If this script requests a data file from the legitimate website, the origins do not match, and the Same-Origin Policy protects the file’s content from being accessed. However, if the legitimate site requests the data file, the origins match, and access is granted. Since the data file does not contain valid JavaScript code, it cannot be included and executed by the attacker via the HTML script tag. To completely mitigate this risk, web developers can add unparseable cruft to the beginning of the file, causing a compile-time failure, or include valid JavaScript that stops execution during runtime, such as an uncatchable exception (see Figure 2) [31].

### Related Work

The concept most closely related to the attacks discussed in Section 4.5 is JSON Hijacking, an exploitation technique initially presented by Grossman in 2006 [9]. In his attack, he used a cross-domain script include pointing to a JSON-array resource, which was originally intended for an XMLHttpRequest. By redefining JavaScript’s object constructor, he obtained the content of the user’s GMail address book. Grossman reported the issue to Google, where the term Cross-Site Script Inclusion (XSSI) was coined by Christoph Kern. Kern later mentioned the term publicly in his 2007 book [18]. Several other authors later adopted this term to refer to slight variations of the attack [27, 31].

Around the same time, Chess et al. [3] generalized Grossman’s technique and coined the term JavaScript Hijacking. Unlike the vulnerabilities in this paper, these attacks do not target dynamic JavaScript resources but use script tags in combination with a non-standard JavaScript quirk (since removed from major browsers) to leak data encoded in the JSON-array format.

In 2013, Grossman [11] discussed using resources accessible only to logged-in users to determine the logon status of a user. He also proposed click-jacking attacks to force the user to like the attacker’s Facebook or Google+ page, thereby deducing the user’s identity. Evans [8] demonstrated a login oracle on myspace.com by including a Cascading Style Sheet file that changed properties based on the user’s login status. In 2015, Takeshi Terada presented another variation called Identifier-based XSSI [27]. Terada used script tags to reference CSV files from third-party domains, which, under certain circumstances, could create global variables named after the values in the CSV file. By enumerating these variables, Terada leaked the file’s contents.

Other related work has focused on CSS-based history leakage [13, 10, 14]. Retrieving a user’s history allows an attacker to deduce whether the victim has an account on a given site, enabling targeted phishing attacks. Wondracek et al. [30] proposed a scheme in 2010 to de-anonymize users based on their group membership in OSNs. They used stolen history to determine the group sites the user had visited, comparing these to a list of group members to identify the user. Jia et al. [16] recently discussed using timing side-channels on the browser cache to ascertain a user’s geolocation.

In 2012, Nikiforakis et al. [24] conducted a large-scale analysis of remote JavaScript, focusing on security issues from including third-party code. For W2SP 2011, two groups [20, 15] analyzed cross-domain policies for Flash, specifically determining which domains allow access from any domain. Since Flash attaches cookies for the target domain to these requests, they discussed scenarios where a malicious Flash applet could retrieve proprietary information.

Paul Stone demonstrated another method of stealing sensitive information across origin boundaries by leveraging a timing side channel to leak a framed document pixel by pixel [26].

### Outlook

This paper aimed to conduct an initial study into the usage and potential pitfalls of dynamic scripts in real-world applications. Our dataset of 150 highly ranked domains provides insights into the problems caused by such scripts. A large-scale study could provide additional key insights into the severity of the issue. Automating the analysis, from account registration to meaningful interaction with the application, is a challenging task we leave for future work. Enhancements must be made to handle the increased amount of data, such as advanced comparisons based on syntactical and semantical differences in JavaScript code.

Recently, the W3C proposed Content Security Policy (CSP), a declarative policy that informs the client from where the application expects to load resources [25]. In its default setting, CSP forbids inline scripts, compelling programmers to use external scripts. During our study, we noticed that many inline scripts are dynamically generated and incorporate sensitive user data. If these scripts are naively transformed into dynamic, external script resources, the attack surface may grow. Doupé et al. [4] developed a tool called deDacota to automatically rewrite applications to adhere to CSP paradigms. However, if not protected properly, these external scripts may be included by third-party applications and leak secret data. Therefore, it is imperative to ensure secure, yet flexible client-side access to sensitive data and closely monitor the changing application landscape due to CSP adoption. As discussed by Weissbacher et al., CSP is not yet widely deployed and lags behind other security measures [29].

In this paper, we focused on dynamic JavaScript pulled into the browser via script tags. An alternative is to transport the code via XMLHttpRequest bodies, subsequently passed to the eval() API. Future work will investigate such XMLHttpRequest endpoints for their susceptibility to related attacks. Additionally, internal application information, such as the login state of a user, may also be leaked via images or style sheets, manifesting through side effects on the DOM level. A systematic further analysis on other classes of server-side content generation that might enable related attacks would be a coherent extension of our work.

### Summary & Conclusion

In this paper, we conducted a study into the prevalence of Cross-Site Script Inclusion (XSSI) vulnerabilities. When a script is generated on the fly and incorporates user-specific data, an attacker can include the script to observe its execution behavior and potentially extract user-specific data. We developed a browser extension to detect such scripts and conducted an empirical study of 150 domains in the Alexa Top 500, aiming to gain insights into the prevalence and purpose of these scripts and related security issues.

Our analysis showed that 49 out of 150 domains utilize server-side JavaScript generation, and on 40 domains, we were able to leak user-specific data, leading to attacks such as deanonymization and full account hijacking. Even high-profile sites are vulnerable to these attacks. After demonstrating the severe impact of these flaws, we proposed a secure alternative using the Same-Origin Policy and Cross-Origin Resource Sharing to address the identified security issues.

### Acknowledgements

We thank the anonymous reviewers for their valuable feedback and Joseph Bonneau for his support in preparing this paper for publication. This work was partially supported by the EU Project STREWS (FP7-318097).

### References

[1] BARTH, A., JACKSON, C., AND MITCHELL, J. C. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM conference on Computer and communications security (2008), ACM, pp. 75–88.
[2] CERT. Advisory ca-2000-02 malicious html tags embedded in client web requests, February 2000.
[3] CHESS, B., O’NEIL, Y. T., AND WEST, J. JavaScript Hijacking. [whitepaper], Fortify Software, http://www.fortifysoftware.com/servlet/downloads/public/JavaScript_Hijacking.pdf, March 2007.
[4] DOUPÉ, A., CUI, W., JAKUBOWSKI, M. H., PEINADO, M., KRUEGEL, C., AND VIGNA, G. dedacota: toward preventing server-side xss via automatic code and data separation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security (2013), ACM, pp. 1205–1216.
[5] DOWNS, J. S., HOLBROOK, M. B., AND CRANOR, L. F. Decision strategies and susceptibility to phishing. In Proceedings of the second symposium on Usable privacy and security (2006), ACM, pp. 79–90.
[6] ECMASCRIPT, E., ASSOCIATION, E. C. M., ET AL. EcmaScript language specification, 2011.
[7] ELECTRONIC FRONTIER FOUNDATION. Panopticlick – how unique – and trackable – is your browser? online, https://panopticlick.eff.org/about.php, last accessed 2014/05/10.
[8] EVANS, C. Cross-domain leaks of site logins. online, http://bit.ly/1lz1HPl, last accessed 2014/05/10.
[9] GROSSMAN, J. Advanced Web Attack Techniques using GMail. [online], http://jeremiahgrossman.blogspot.de/2006/01/advanced-web-attack-techniques-using.html, January 2006.
[10] GROSSMAN, J. I know where you’ve been. [online], http://jeremiahgrossman.blogspot.com/2006/08/i-know-where-youve-been.html, August 2006.
[11] GROSSMAN, J. The web won’t be safe or secure until we break it. Communications of the ACM 56, 1 (January 2013), 68–72.
[12] HANSEN, R., AND GROSSMAN, J. Clickjacking. Sec Theory, Internet Security (2008).
[13] JACKSON, C., BORTZ, A., BONEH, D., AND MITCHELL, J. C. Protecting Browser State from Web Privacy Attacks. In Proceedings of the 15th ACM World Wide Web Conference (WWW 2006) (2006).
[14] JAKOBSSON, M., AND STAMM, S. Invasive Browser Sniffing and Countermeasures. In Proceedings of The 15th annual World Wide Web Conference (WWW2006) (2006).
[15] JANG, D., VENKATARAMAN, A., SAWKA, G. M., AND SHACHAM, H. Analyzing the cross-domain policies of flash applications. In Proceedings of the 5th Workshop on Web (2011), vol. 2.
[16] JIA, Y., DONGY, X., LIANG, Z., AND SAXENA, P. I know where you’ve been: Geo-inference attacks via the browser cache. IEEE Security&Privacy 2014, http://www.ieee-security.org/TC/SP2014/posters/JIAYA.pdf, last accessed 2014/05/17.
[17] JOHNS, M., AND WINTER, J. Requestrodeo: Client side protection against session riding. Proceedings of the OWASP Europe 2006 Conference (2006).
[18] KERN, C., KESAVAN, A., AND DASWANI, N. Foundations of security: what every programmer needs to know. Apress, 2007.
[19] KOTOWICZ, K. Stripping the referrer for fun and profit. online, http://blog.kotowicz.net/2011/10/stripping-referrer-for-fun-and-profit.html, last accessed 2014/05/10.
[20] LEKIES, S., JOHNS, M., AND TIGHZERT, W. The state of the cross-domain nation. In Proceedings of the 5th Workshop on Web (2011), vol. 2.
[21] MOZILLA. Inheritance and the prototype chain. online, https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain, last accessed 2014/05/10.
[22] MOZILLA. MutationObserver. online, https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver, last accessed 2014/05/10.
[23] MOZILLA DEVELOPER NETWORK, AND RUDERMAN, J. Same-origin policy. online, https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy.
[24] NIKIFORAKIS, N., INVERNIZZI, L., KAPRAVELOS, A., ACKER, S. V., JOOSEN, W., KRUEGEL, C., PIESSENS, F., AND VIGNA, G. You Are What You Include: Large-scale Evaluation of Remote JavaScript Inclusions. In 19th ACM Conference on Computer and Communications Security (CCS 2012) (2012).
[25] STERNE, B., AND BARTH, A. Content security policy 1.0. online, http://www.w3.org/TR/2012/CR-CSP-20121115/, last accessed 2014/05/10.
[26] STONE, P. Pixel perfect timing attacks with html5.
[27] TERADA, T. Identifier-based XSSI attacks, 2015.
[28] VAN KESTEREN, A., ET AL. Cross-origin resource sharing. W3C Working Draft WD-cors-20100727 (2010).
[29] WEISSBACHER, M., LAUINGER, T., AND ROBERTSON, W. Why is CSP failing? trends and challenges in CSP adoption. In Research in Attacks, Intrusions and Defenses. Springer, 2014, pp. 212–233.
[30] WONDRACEK, G., HOLZ, T., KIRDA, E., AND KRUEGEL, C. A practical attack to de-anonymize social network users. In Security and Privacy (SP), 2010 IEEE Symposium on (2010), IEEE, pp. 223–238.
[31] ZALEWSKI, M. The Tangled Web: A Guide to Securing Modern Web Applications. No Starch Press, 2012.