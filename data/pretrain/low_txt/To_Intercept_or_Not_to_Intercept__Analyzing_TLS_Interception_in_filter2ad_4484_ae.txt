### Trusted Store and TLS Interception Vulnerabilities

**Network Appliances and External Certificates:**
UserGate, WebTitan Gateway, Microsoft TMG, and Untangle accept external certificates signed with their own root key. If an attacker gains access to the signing keys of these appliances, they can launch man-in-the-middle (MITM) attacks to impersonate any web server. UserGate and WebTitan Gateway provide 'read' privileges to non-root users for the private signing key, while Untangle and Microsoft TMG require root/admin privileges, making it harder for attackers to access the keys.

**Vulnerabilities in Certificate Handling:**
- **WebTitan Gateway:** An attacker can exploit the CRIME vulnerability [34] to recover authentication cookies from clients.
- **Microsoft TMG:** An attacker can exploit the BEAST vulnerability [33] to recover authentication cookies from clients.
- **RC4 Usage:** Both WebTitan Gateway and Microsoft TMG use RC4 [48], which is vulnerable to known attacks, allowing attackers to recover cookies from clients.

**Vendor Responses:**
We contacted six affected companies and received responses from three:
- **Untangle:** Responded with an automatic reply.
- **Entensys (UserGate):** Confirmed that they have passed the matter to their research team.
- **Netgate (pfSense):** Stated that they philosophically oppose TLS interception but include it as a commonly requested feature. They also noted that TLS interception is done using the external package 'Squid', which they do not fully control.

### Conclusion

**Framework for Analyzing TLS Interception:**
We present a framework for analyzing the TLS interception behaviors of network appliances to uncover potential vulnerabilities. We tested six network appliances and found that all their TLS proxies are vulnerable to varying degrees. Each proxy lacks at least one of the best practices in terms of protocol and parameters mapping, patching against known attacks, certificate validation, CA trusted store maintenance, and private key protection.

**Key Findings:**
- **Server Impersonation:** Clients behind four appliances are vulnerable to full server impersonation under an active MITM attack, with one enabling TLS interception by default.
- **Cookie Recovery:** Attackers can recover authentication cookies from two security appliances.
- **Misleading Browsers:** Client browsers often display higher security levels than the actual proxy-to-server TLS connection, similar to client-end TLS proxies [32].

**Recommendations:**
While TLS proxies are primarily used in enterprise environments to decrypt traffic for malware and network attack detection, they introduce new intrusion opportunities and vulnerabilities. TLS proxies should maintain at least the same level of security as modern browsers and be securely configured like any up-to-date HTTPS server. Administrators should use our framework to evaluate their network appliances before enabling TLS interception, considering the potential vulnerabilities against the perceived benefits.

### Acknowledgements

We thank the ASIA CCS 2018 anonymous reviewers for their helpful comments and suggestions to improve the paper’s presentation. We also thank Xavier de Carné de Carnavalet for his assistance during the development of our framework. This research is supported by NSERC.

### References

[1] BEAST attack 1/n-1 split patch. Available at https://goo.gl/8MYeqz.
[2] Cisco WSA AsyncOS documentation. Available at https://goo.gl/hkHRbK.
[3] Diginotar CA breach. Available at https://goo.gl/p9ainQ, Sep 2011.
[4] Distrusting new CNNIC certificates. Available at https://goo.gl/yPidqC, Apr 2015.
[5] Distrusting new WoSign and StartCom certificates. Available at https://goo.gl/q1MVw4, Aug 2017.
[6] Effects of HTTPS and SSL inspection on the client. Available at https://goo.gl/zGmf5b, Oct 2016.
[7] Extended validation OID. Available at https://goo.gl/AmmnXE, Oct 2013.
[8] GRC certificate validation revoked test. Available at https://goo.gl/A83vCC.
[9] Heartleech - GitHub. Available at https://goo.gl/JeKcpt.
[10] Howsmyssl - GitHub. Available at https://goo.gl/48gyGd.
[11] Lenovo’s superfish security. Available at https://goo.gl/w2R2y5, Feb 2015.
[12] Microsoft TMG 2010 updates. Available at https://goo.gl/WcykM6.
[13] Microsoft TMG supported OS version. Available at https://goo.gl/SU9LQ8.
[14] Microsoft trusted root certificate program. Available at https://goo.gl/5BT7d8.
[15] Mimikatz - GitHub. Available at https://goo.gl/dUWCmH.
[16] Revoking ANSSI CA. Available at https://goo.gl/rCjwtY, Dec 2013.
[17] The risks of SSL inspection. Available at https://goo.gl/S3mL5v, Mar 2015.
[18] SSL client test. Available at https://goo.gl/3RdQ1J.
[19] The TÜRKTRUST SSL certificate fiasco. Available at https://goo.gl/8gxCdc, Jan 2013.
[20] UFS - Linux Kernel archives. Available at https://goo.gl/yZ3Fty.
[21] Untangle SSL inspector documentation. Available at https://goo.gl/NZghGy.
[22] US-CERT alert on HTTPS interception. Available at https://goo.gl/9oqZ4w.
[23] Volatility. Available at https://goo.gl/LSnbwF.
[24] Windows cryptography API (CNG). Available at https://goo.gl/UrARyq.
[25] ZMap - GitHub. Available at https://goo.gl/1g2UtU.
[26] D. Adrian, K. Bhargavan, Z. Durumeric, P. Gaudry, M. Green, J. A. Halderman, N. Heninger, D. Springall, E. Thomé, L. Valenta, et al. Imperfect forward secrecy: How Diffie-Hellman fails in practice. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 5–17, Denver, CO, USA, 2015.
[27] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet, M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue. A messy state of the union: Taming the composite state machines of TLS. In 2015 IEEE Symposium on Security and Privacy, pages 535–552, Fairmont, CA, USA, 2015.
[28] K. Bhargavan and G. Leurent. On the practical (in-)security of 64-bit block ciphers: Collision attacks on HTTP over TLS and OpenVPN. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 456–467, Vienna, Austria, 2016.
[29] E. Biham, O. Dunkelman, N. Keller, and A. Shamir. New attacks on IDEA with at least 6 rounds. Journal of Cryptology, 28(2):209–239, 2015.
[30] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov. Using Frankencerts for automated adversarial testing of certificate validation in SSL/TLS implementations. In 2014 IEEE Symposium on Security and Privacy, pages 114–129, Fairmont, CA, USA, 2014.
[31] S. Y. Chau, O. Chowdhury, E. Hoque, H. Ge, A. Kate, C. Nita-Rotaru, and N. Li. SymCerts: Practical symbolic execution for exposing noncompliance in x.509 certificate validation implementations. In 2017 IEEE Symposium on Security and Privacy, pages 61–68, Fairmont, CA, USA, 2017.
[32] X. de Carné de Carnavalet and M. Mannan. Killed by proxy: Analyzing client-end TLS interception software. In Network and Distributed System Security Symposium, San Diego, CA, USA, 2016.
[33] T. Duong and J. Rizzo. Here come the ⊕ ninjas. Technical Report. Available at https://goo.gl/DujxQg, May 2011.
[34] T. Duong and J. Rizzo. The CRIME attack. Presentation at Ekoparty Security Conference, 2012.
[35] Z. Durumeric, Z. Ma, D. Springall, R. Barnes, N. Sullivan, E. Bursztein, M. Bailey, J. A. Halderman, and V. Paxson. The security impact of HTTPS interception. In Network and Distributed Systems Symposium, San Diego, CA, USA, 2017.
[36] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith. Why Eve and Mallory love Android: An analysis of Android SSL (in)security. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 50–61, Raleigh, NC, USA, 2012.
[37] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The most dangerous code in the world: Validating SSL certificates in non-browser software. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 38–49, Raleigh, NC, USA, 2012.
[38] B. He, V. Rastogi, Y. Cao, Y. Chen, V. Venkatakrishnan, R. Yang, and Z. Zhang. Vetting SSL usage in applications with SSLint. In 2015 IEEE Symposium on Security and Privacy, pages 519–534, Fairmont, CA, USA, 2015.
[39] R. Housley, W. Ford, W. Polk, and D. Solo. RFC 5280: Internet x.509 public key infrastructure certificate and CRL profile, May 2008.
[40] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson. Analyzing forged SSL certificates in the wild. In 2014 IEEE Symposium on Security and Privacy, pages 83–97, Fairmont, CA, USA, 2014.
[41] J. Jarmoc. SSL/TLS interception proxies and transitive trust. Black Hat Europe, Mar 2012.
[42] M. O’Neill, S. Ruoti, K. Seamons, and D. Zappala. TLS proxies: Friend or foe? In Proceedings of the 2016 ACM on Internet Measurement Conference, pages 551–557, Santa Monica, CA, USA, 2016.
[43] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov. RFC 5746: Transport layer security (TLS) renegotiation indication extension, Feb 2010.
[44] S. Ruoti, M. O’Neill, D. Zappala, and K. E. Seamons. User attitudes toward the inspection of encrypted traffic. In Proceedings of the Eleventh Symposium On Usable Privacy and Security, pages 131–146, Denver, CO, USA, 2016.
[45] S. Sivakorn, G. Argyros, K. Pei, A. D. Keromytis, and S. Jana. HVLearn: Automated black-box analysis of hostname verification in SSL/TLS implementations. In 2017 IEEE Symposium on Security and Privacy, pages 521–538, Fairmont, CA, USA, 2017.
[46] L. Valenta, S. Cohney, A. Liao, J. Fried, S. Bodduluri, and N. Heninger. Factoring as a service. In International Conference on Financial Cryptography and Data Security, pages 321–338, Christ Church, Barbados, 2016.
[47] P. Van De Zande. The day DES died. SANS Institute, Jul 2001.
[48] M. Vanhoef and F. Piessens. All your biases belong to us: Breaking RC4 in WPA-TKIP and TLS. In USENIX Security Symposium, pages 97–112, Washington D.C., USA, 2015.
[49] X. Wang and H. Yu. How to break MD5 and other hash functions. In 37th Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 19–35, Sofia, Bulgaria, 2005.

### Crafting Invalid Certificate Chains

**Methodology for Creating Certificate Validation Tests:**

- **Self-Signed:** Generate a standalone certificate using OpenSSL with regular parameters.
- **Signature Mismatch:** Generate a regular CA certificate and use it to sign a regular leaf certificate. Modify the signature of the leaf public key certificate by flipping one of the last bits. Test if the proxy validates the signature.
- **Fake GeoTrust Global CA:** Craft an issuing root certificate with the same parameters as the GeoTrust Global CA. Remove the authority key identifier parameter from the leaf certificate. Test if the proxy validates the chain of trust properly.
- **Wrong Common Name (CN):** Generate a regular root CA certificate and use it to sign a regular leaf certificate with a different CN. Test if the proxy validates the domain.
- **Unknown Issuer:** Use a normal issuing certificate and its normal leaf certificate without importing the issuing certificate to the trust store. Check if the proxy is vulnerable to MITM attacks.
- **Non-CA Intermediate:** Generate three certificates (root CA, intermediate, and leaf). Craft the intermediate certificate to have the basic constraint extension set to false. Test if the proxy ensures that CA certificates have the ability to issue other certificates.
- **X509v1 Intermediate:** Generate three certificates (root CA, intermediate, and leaf) with the intermediate certificate being X509v1. Test if the proxy accepts such certificates.
- **Revoked:** Use Gibson Research Corporation’s special site that hosts a website using a revoked certificate [8]. Test if the proxy accepts revoked certificates.
- **Expired and Not Yet Valid Certificates:** Generate tests for expired and not yet valid certificates. Test if the proxy accepts such certificates.
- **Invalid pathLenConstraint:** Generate a root CA certificate with a pathLenConstraint of 1 and issue an intermediate certificate with a pathLenConstraint of 0. Test if the proxy checks the pathLenConstraint parameter.
- **Bad Name Constraint Intermediate:** Craft a regular CA certificate and use it to sign an intermediate certificate with a different domain. Test if the proxy validates the name constraint.
- **Malformed X509v3 Extension Value:** Generate a regular root CA certificate and use it to issue a leaf certificate with a dummy random string as a value for its keyUsage parameter. Test if the proxy handles malformed extensions.
- **Unknown Critical X509v3 Extension:** Generate a root CA certificate and use it to issue a leaf certificate with a non-typical X509v3 extension set to critical. Test if the proxy handles unknown critical extensions.
- **Wrong keyUsage and extKeyUsage:** Craft a regular root certificate and sign a leaf certificate with incorrect keyUsage and extKeyUsage values. Test if the proxy drops connections with invalid usages.
- **Short Key Length Root and Leaf Certificates:** Generate RSA-512 and RSA-1024 root CA certificates and test if the proxy accepts insecure key sizes. Generate regular root certificates and craft leaf certificates with short keys. Test if the proxy accepts such insecure key sizes.
- **Bad Signature Hashing Algorithms:** Modify the signature algorithms in the OpenSSL configuration file to use MD4, MD5, and SHA1. Test if the proxy accepts weak and deprecated signature algorithms.

### Private Key Extraction for Cisco IronPort WSA

**Challenges and Methods:**

- **Command Line Interface:** Attempted to bypass the custom command line interface to reach the operating system's native command line, but failed due to no escape point.
- **Mounting Partitions:** Discovered the virtual disk drive is divided into 9 partitions with FreeBSD as the main OS. Attempted to mount all partitions using various UFS types but failed.
- **Content Exploration:** Used the `strings` command to extract printable characters from binary files. Searched for private key delimiters and compared the modulus of each key to the appliance’s public key certificate. No positive matches were found.
- **Memory Analysis:** Dumped the volatile memory of a VM and used Volatility, a memory forensics tool, but failed to determine the profile. Used Heartleech to successfully extract the corresponding private key from the memory dump.