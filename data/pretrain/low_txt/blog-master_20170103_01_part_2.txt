### 代码片段优化

以下是对提供的代码片段的优化，使其更加清晰、连贯和专业：

#### `adt/oracle_compat.c` 代码优化
```c
// 动态分配内存以存储文本数据
ret = (text *) palloc(VARHDRSZ + bytelen);

// 分配内存以存储字符串字符指针数组
stringchars = (const char **) palloc(stringlen * sizeof(char *));

// 分配内存以存储字符串多字节长度数组
stringmblen = (int *) palloc(stringlen * sizeof(int));

// 分配内存以存储集合字符指针数组
setchars = (const char **) palloc(setlen * sizeof(char *));

// 分配内存以存储集合多字节长度数组
setmblen = (int *) palloc(setlen * sizeof(int));

// 动态分配内存以存储二进制数据
ret = (bytea *) palloc(VARHDRSZ + m);

// 根据最坏情况下的长度分配内存
result = (text *) palloc(worst_len + VARHDRSZ);

// 根据实际字节数分配内存
result = (text *) palloc(VARHDRSZ + bytes);

// 分配固定大小的内存
result = (text *) palloc(VARHDRSZ + 1);

// 根据实际长度分配内存
result = (text *) palloc(tlen);
```

#### `adt/tsvector.c` 代码优化
```c
// 重新分配内存以存储词项位置
repalloc(res->pos, newlen * sizeof(WordEntryPos));

// 分配内存以存储词项数组
arr = (WordEntryIN *) palloc(sizeof(WordEntryIN) * arrlen);

// 分配并初始化缓冲区
cur = tmpbuf = (char *) palloc(buflen);

// 重新分配内存以存储词项数组
repalloc((void *) arr, sizeof(WordEntryIN) * arrlen);

// 重新分配内存以存储临时缓冲区
tmpbuf = (char *) repalloc((void *) tmpbuf, buflen);

// 分配并初始化TSVector结构体
in = (TSVector) palloc0(totallen);

// 分配输出缓冲区
curout = outbuf = (char *) palloc(lenbuf);

// 分配并初始化TSVector结构体
vec = (TSVector) palloc0(len);

// 重新分配内存以扩展TSVector结构体
vec = (TSVector) repalloc(vec, len);

// 确保内存对齐
* Pad to 2-byte alignment if necessary. Though we used palloc0
* for the initial allocation, subsequent repalloc'd memory areas
```

#### `arrayfuncs.c` 代码优化
```c
// 分配内存以存储数据指针数组
dataPtr = (Datum *) palloc(nitems * sizeof(Datum));

// 分配内存以存储空值标志数组
nullsPtr = (bool *) palloc(nitems * sizeof(bool));

// 分配并初始化数组类型
retval = (ArrayType *) palloc0(nbytes);
```

#### `varlena.c` 代码优化
```c
// 分配内存以存储VarStringSortSupport结构体
sss = palloc(sizeof(VarStringSortSupport));

// 分配内存以存储缓冲区
sss->buf1 = palloc(TEXTBUFLEN);
sss->buf2 = palloc(TEXTBUFLEN);

// 根据实际长度分配缓冲区
sss->buf1 = palloc(sss->buflen1);
sss->buf2 = palloc(sss->buflen2);

// 分配内存以存储二进制数据
result = (bytea *) palloc(len);

// 分配内存以存储与输入相同大小的二进制数据
res = (bytea *) palloc(VARSIZE(v));
```

### 文件列表优化
以下是文件列表的优化，使其更加简洁和易读：

```plaintext
-rw-r--r-- 1 digoal users 137344 Oct 25 04:08 acl.c
-rw-r--r-- 1 digoal users   9269 Oct 25 04:08 amutils.c
-rw-r--r-- 1 digoal users  13270 Oct 25 04:08 array_expanded.c
-rw-r--r-- 1 digoal users 173266 Oct 25 04:08 arrayfuncs.c
-rw-r--r-- 1 digoal users  33193 Oct 25 04:08 array_selfuncs.c
-rw-r--r-- 1 digoal users  26170 Oct 25 04:08 array_typanalyze.c
-rw-r--r-- 1 digoal users  25379 Oct 25 04:08 array_userfuncs.c
-rw-r--r-- 1 digoal users   5742 Oct 25 04:08 arrayutils.c
-rw-r--r-- 1 digoal users   4732 Oct 25 04:08 ascii.c
-rw-r--r-- 1 digoal users   8139 Oct 25 04:08 bool.c
-rw-r--r-- 1 digoal users  23931 Oct 25 04:08 cash.c
-rw-r--r-- 1 digoal users   4442 Oct 25 04:08 char.c
-rw-r--r-- 1 digoal users  64563 Oct 25 04:08 date.c
-rw-r--r-- 1 digoal users 126062 Oct 25 04:08 datetime.c
-rw-r--r-- 1 digoal users  10976 Oct 25 04:08 datum.c
-rw-r--r-- 1 digoal users  23215 Oct 25 04:08 dbsize.c
-rw-r--r-- 1 digoal users  10602 Oct 25 04:08 domains.c
-rw-r--r-- 1 digoal users  10868 Oct 25 04:08 encode.c
-rw-r--r-- 1 digoal users  12361 Oct 25 04:08 enum.c
-rw-r--r-- 1 digoal users   3930 Oct 25 04:08 expandeddatum.c
-rw-r--r-- 1 digoal users  82658 Oct 25 04:08 float.c
-rw-r--r-- 1 digoal users 136395 Oct 25 04:08 formatting.c
-rw-r--r-- 1 digoal users  11978 Oct 25 04:08 format_type.c
-rw-r--r-- 1 digoal users  11402 Oct 25 04:08 genfile.c
-rw-r--r-- 1 digoal users 124438 Oct 25 04:08 geo_ops.c
-rw-r--r-- 1 digoal users   2316 Oct 25 04:08 geo_selfuncs.c
-rw-r--r-- 1 digoal users  18718 Oct 25 04:08 geo_spgist.c
-rw-r--r-- 1 digoal users   6491 Oct 25 04:08 inet_cidr_ntop.c
-rw-r--r-- 1 digoal users  12305 Oct 25 04:08 inet_net_pton.c
-rw-r--r-- 1 digoal users  32342 Oct 25 04:08 int8.c
-rw-r--r-- 1 digoal users  30325 Oct 25 04:08 int.c
-rw-r--r-- 1 digoal users  47499 Oct 25 04:08 jsonb.c
-rw-r--r-- 1 digoal users  15766 Oct 25 04:08 jsonb_gin.c
-rw-r--r-- 1 digoal users   6007 Oct 25 04:08 jsonb_op.c
-rw-r--r-- 1 digoal users  50741 Oct 25 04:08 jsonb_util.c
-rw-r--r-- 1 digoal users  64390 Oct 25 04:08 json.c
-rw-r--r-- 1 digoal users 102478 Oct 25 04:08 jsonfuncs.c
-rw-r--r-- 1 digoal users  12710 Oct 25 04:08 levenshtein.c
-rw-r--r-- 1 digoal users  10743 Oct 25 04:08 like.c
-rw-r--r-- 1 digoal users   9815 Oct 25 04:08 like_match.c
-rw-r--r-- 1 digoal users  24444 Oct 25 04:08 lockfuncs.c
-rw-r--r-- 1 digoal users   6792 Oct 25 04:08 mac.c
-rw-r--r-- 1 digoal users  22403 Oct 25 04:08 misc.c
-rw-r--r-- 1 digoal users  37550 Oct 25 04:08 nabstime.c
-rw-r--r-- 1 digoal users   6947 Oct 25 04:08 name.c
-rw-r--r-- 1 digoal users  31667 Oct 25 04:08 network.c
-rw-r--r-- 1 digoal users  22779 Oct 25 04:08 network_gist.c
-rw-r--r-- 1 digoal users  32861 Oct 25 04:08 network_selfuncs.c
-rw-r--r-- 1 digoal users 213004 Oct 25 04:08 numeric.c
-rw-r--r-- 1 digoal users   9498 Oct 25 04:08 numutils.c
-rw-r--r-- 1 digoal users   9911 Oct 25 04:08 oid.c
-rw-r--r-- 1 digoal users  22636 Oct 25 04:08 oracle_compat.c
-rw-r--r-- 1 digoal users  38316 Oct 25 04:08 orderedsetaggs.c
-rw-r--r-- 1 digoal users  41158 Oct 25 04:08 pg_locale.c
-rw-r--r-- 1 digoal users   4446 Oct 25 04:08 pg_lsn.c
-rw-r--r-- 1 digoal users  47784 Oct 25 04:08 pgstatfuncs.c
-rw-r--r-- 1 digoal users   4902 Oct 25 04:08 pg_upgrade_support.c
-rw-r--r-- 1 digoal users  14691 Oct 25 04:08 pseudotypes.c
-rw-r--r-- 1 digoal users   2697 Oct 25 04:08 quote.c
-rw-r--r-- 1 digoal users  61530 Oct 25 04:08 rangetypes.c
-rw-r--r-- 1 digoal users  43048 Oct 25 04:08 rangetypes_gist.c
-rw-r--r-- 1 digoal users  33892 Oct 25 04:08 rangetypes_selfuncs.c
-rw-r--r-- 1 digoal users  29503 Oct 25 04:08 rangetypes_spgist.c
-rw-r--r-- 1 digoal users  10402 Oct 25 04:08 rangetypes_typanalyze.c
-rw-r--r-- 1 digoal users  34862 Oct 25 04:08 regexp.c
-rw-r--r-- 1 digoal users  48615 Oct 25 04:08 regproc.c
-rw-r--r-- 1 digoal users 105191 Oct 25 04:08 ri_triggers.c
-rw-r--r-- 1 digoal users  48261 Oct 25 04:08 rowtypes.c
-rw-r--r-- 1 digoal users 287720 Oct 25 04:08 ruleutils.c
-rw-r--r-- 1 digoal users 225938 Oct 25 04:08 selfuncs.c
-rw-r--r-- 1 digoal users   9692 Oct 25 04:08 tid.c
-rw-r--r-- 1 digoal users 141798 Oct 25 04:08 timestamp.c
-rw-r--r-- 1 digoal users   3152 Oct 25 04:08 trigfuncs.c
-rw-r--r-- 1 digoal users  10077 Oct 25 04:08 tsginidx.c
-rw-r--r-- 1 digoal users  18599 Oct 25 04:08 tsgistidx.c
-rw-r--r-- 1 digoal users  25739 Oct 25 04:08 tsquery.c
-rw-r--r-- 1 digoal users  14812 Oct 25 04:08 tsquery_cleanup.c
-rw-r--r-- 1 digoal users   6232 Oct 25 04:08 tsquery_gist.c
-rw-r--r-- 1 digoal users   7431 Oct 25 04:08 tsquery_op.c
-rw-r--r-- 1 digoal users   8804 Oct 25 04:08 tsquery_rewrite.c
-rw-r--r-- 1 digoal users   8621 Oct 25 04:08 tsquery_util.c
-rw-r--r-- 1 digoal users  21322 Oct 25 04:08 tsrank.c
-rw-r--r-- 1 digoal users  12304 Oct 25 04:08 tsvector.c
-rw-r--r-- 1 digoal users  53573 Oct 25 04:08 tsvector_op.c
-rw-r--r-- 1 digoal users   9259 Oct 25 04:08 tsvector_parser.c
-rw-r--r-- 1 digoal users  13295 Oct 25 04:08 txid.c
-rw-r--r-- 1 digoal users   9732 Oct 25 04:08 uuid.c
-rw-r--r-- 1 digoal users  42245 Oct 25 04:08 varbit.c
-rw-r--r-- 1 digoal users  24654 Oct 25 04:08 varchar.c
-rw-r--r-- 1 digoal users 136176 Oct 25 04:08 varlena.c
-rw-r--r-- 1 digoal users    491 Oct 25 04:08 version.c
-rw-r--r-- 1 digoal users  10358 Oct 25 04:08 windowfuncs.c
-rw-r--r-- 1 digoal users   4645 Oct 25 04:08 xid.c
-rw-r--r-- 1 digoal users 104105 Oct 25 04:08 xml.c
```

### cgroup 示例优化

为了方便在一台物理机中启动多个实例，并隔离资源，使用 cgroup 是一个很不错的方法。

#### 挂载 cgroup 并设置限制
```bash
# 挂载 cgroup 文件系统
mount -t cgroup -o cpu,memory cpu_and_mem /cgroup/memory

# 进入 cgroup/memory 目录
cd /cgroup/memory

# 创建一个新的 cgroup
mkdir test

# 进入新创建的 cgroup
cd test

# 设置内存限制为 100MB
echo 102400000 > memory.limit_in_bytes
echo 102400000 > memory.memsw.limit_in_bytes
```

#### 将进程加入 cgroup
将 PostgreSQL 后端进程的 PID 写入 `tasks` 文件即可。

```sql
postgres=# select pg_backend_pid();
 pg_backend_pid   
----------------  
          85938  
(1 row)
```

```bash
# 将后端进程 PID 加入 cgroup
echo 85938 > tasks
```

#### 查看当前状态
```bash
# 查看当前 cgroup 的内存状态
cat memory.stat
cache 204800
rss 0
mapped_file 0
pgpgin 974906
pgpgout 974856
swap 0
inactive_anon 155648
active_anon 0
inactive_file 49152
active_file 0
unevictable 0
hierarchical_memory_limit 102400000
hierarchical_memsw_limit 102400000
total_cache 204800
total_rss 0
total_mapped_file 0
total_pgpgin 974906
total_pgpgout 974856
total_swap 0
total_inactive_anon 155648
total_active_anon 0
total_inactive_file 49152
total_active_file 0
total_unevictable 0
```

### 模拟数据库进程被 OOM

由于限制了 100MB 的内存，因此当数据库后端进程申请超过 100MB 的内存时，将会触发 OOM（Out of Memory）。根据前面提到的内容，排序、聚合、使用较大的列、使用很长的 SQL（SQL 本身的内容长度），或者传入很大的变长类型值时，都可能使得单个连接消耗大量内存。