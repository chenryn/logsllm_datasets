# Hourglass Schemes: Performance and Economic Analysis

## Introduction
The hourglass transformation, along with its inverse, is primarily of theoretical interest due to the computational cost involved. This document discusses a scenario where a cloud provider (server) operates on Amazon but is not Amazon itself, thus subject to Amazon's pricing. The tenant, acting as the client in our experiments, also runs within Amazon EC2.

## Implementation Details
We implement the butterfly construction using AES encryption with 128-bit file blocks. For files larger than 8MB, we parallelize the implementation. For the permutation construction, we use 4KB file block sizes and 64-bit symbol sizes, which are efficient given the machine word size. Each block contains \( m = 512 \) symbols. We permute the file using the simple construction described in Section 4.2. The hourglass file \( H \) consists of 512 segments, with segment \( i \) containing symbol \( i \) from every file block, dispersing file symbols widely across \( H \).

## Experimental Setup
Experiments were conducted on Amazon EC2 using a quadruple-extra-large high-memory instance and EBS storage. We also ran tests on a local machine with an i7 980X processor (6 cores, 4 GHz). All results are averaged over 5 runs.

### Hourglass Function Performance
We measured the in-memory computation time for both the butterfly and permutation constructions for different file sizes. The butterfly function is at least 4 times faster on the local machine due to hardware support for AES. The multi-threaded implementation of the butterfly construction is 5 times faster for large file sizes on both local and Amazon machines. The permutation scheme, which permutes machine-size words in main memory, is about twice as fast on the local machine compared to Amazon.

Compared to the multi-threaded butterfly implementation, the permutation hourglass function is 8 times faster on Amazon and 4 times faster locally, as it does not use cryptographic operations. Importantly, the permutation-based hourglass function can be computed in a streaming fashion, with negligible overhead. The only additional time required is for decryption/encryption once the file is uploaded.

### Economic Analysis
Table 1 presents the total time and cost for transforming file \( F \) to format \( H \) for a file-encryption application. Using a cost basis of 68 cents per hour (as charged by EC2 for our instance type), we argue that storing the plaintext alongside the transformed file is not economically viable. For the butterfly transformation, the cost of computing the plaintext is about 10 times lower than the cost of storing the plaintext monthly. For the permutation scheme, this cost is about 270 times lower, making it more economical for frequent plaintext accesses.

### Challenge-Response Protocol
Table 2 shows the challenge-response protocol times for both honest and adversarial servers. An adversarial server needs to retrieve 1024 symbols distributed across the input file for 2 random challenges. The response time for an honest server is significantly lower, especially for larger files. Sequential throughput of EBS volumes is around 95MB/s, meaning it is faster for an adversarial server to read the full file sequentially after a certain number of challenges.

### Impact of Parallelism
An adversary could try to reduce response time by distributing the file across multiple EBS volumes. However, this strategy has limited utility against the butterfly hourglass function, which requires access to most of the file. Preliminary experiments suggest that the network interface supports a maximum bandwidth of about 1Gbit/s (≈ 125 MB/s), limiting the effectiveness of this approach. For the permutation hourglass function, distribution across EBS volumes can improve seek-time latency, but achieving comparable response times to an honest service would require distributing the file across many independent storage systems.

## Related Work
Hourglass schemes intersect with several research areas, including economic incentives, remote posture verification, puzzles, memory-bound functions, and storage-enforcing schemes. These schemes leverage server resource bounds to ensure security and provide a valuable way to monitor file-handling practices in cloud services.

## Conclusion
Hourglass schemes enable clients to verify remotely that a server stores files in a specific format, leveraging server resource bounds for security. Our experiments demonstrate the feasibility of these schemes in Amazon's cloud service. As cloud computing proliferates, hourglass schemes and related techniques will be crucial for maintaining security assurances in outsourced environments.

## Acknowledgements
We thank all anonymous reviewers for their detailed comments and suggestions. Emil Stefanov was supported by a National Science Foundation Graduate Research Fellowship, a DoD National Defense Science and Engineering Graduate Fellowship, and a grant from the Amazon Web Services in Education program.

## References
[1] American Express may have failed to encrypt data. Available at http://www.scmagazine.com/american-express-may-have-failed-to-encrypt-data/article/170997/.

[2] Sony PlayStation data breach, 2011. Available at http://en.wikipedia.org/wiki/PlayStation_Network_outage.

[3] M. Abadi, M. Burrows, M. Manasse, and T. Wobber. Moderately hard, memory-bound functions. ACM Trans. Internet Technol., 5:299–327, May 2005.

[4] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, and D. Song. Provable data possession at untrusted stores. In ACM CCS, pages 598–609, 2007.

[5] G. Ateniese, S. Kamara, and J. Katz. Proofs of storage from homomorphic identification protocols. In ASIACRYPT ’09, pages 319–333, Berlin, Heidelberg, 2009.

[6] Y. Dodis, S. Vadhan, and D. Wichs. Proofs of retrievability via hardness amplification. In TCC, pages 109–127, 2009.

[7] C. Dwork, J. Lotspiech, and M. Naor. Digital signets: self-enforcing protection of digital information. In STOC, pages 489–498. ACM, 1996.

[8] C. Dwork and M. Naor. Pricing via processing or combatting junk mail. In CRYPTO, pages 139–147, 1993.

[9] C. Dwork, M. Naor, and H. Wee. Pebbling and proofs of work. In CRYPTO, pages 37–54, 2005.

[10] S. Dziembowski, T. Kazana, and D. Wichs. One-time computable self-erasing functions. In TCC, pages 125–143, 2011.

[11] E. Giberti. Honesty box: EBS performance revisited. Blog posting, available at http://tinyurl.com/3nqxngv, 2010.

[12] S. Goldberg, S. Halevi, A. D. Jaggard, V. Ramachandran, and R. N. Wright. Rationality and traffic attraction: incentives for honest path announcements in BGP. In SIGCOMM, pages 267–278, 2008.

[13] P. Golle, S. Jarecki, and I. Mironov. Cryptographic primitives enforcing communication and storage complexity. In FC ’02, pages 120–135, 2003.

[14] V. Gratzer and D. Naccache. Alien vs. quine. IEEE Security and Privacy, 5(2):26–31, 2007.

[15] J. Halpern and V. Teague. Rational secret sharing and multiparty computation: extended abstract. In STOC, pages 623–632, 2004.

[16] M. Jakobsson and K. Johansson. Retroactive detection of malware with applications to mobile platforms. In HotSec, pages 1–13, 2010.

[17] M. Jakobsson and A. Juels. Proofs of work and bread pudding protocols. In Communications and Multimedia Security, pages 258–272, 1999.

[18] A. Juels and J. Brainard. Client puzzles: A cryptographic countermeasure against connection depletion attacks. In NDSS, pages 151–165, 1999.

[19] A. Juels and B. S. K. Jr. PORs: proofs of retrievability for large files. In ACM CCS, pages 584–597, 2007.

[20] M. Labs and M. F. P. Services. Protecting your critical assets: Lessons learned from “Operation Aurora”, 2010. Whitepaper available at http://www.mcafee.com/us/resources/white-papers/wp-protecting-critical-assets.pdf.

[21] M. H. Manshaei, Q. Zhu, T. Alpcan, and J.-p. Hubaux. Game theory meets network security and privacy. Main, V(April):1–44, 2010.

[22] N. Nisan, T. Roughgarden, E. Tardos, and V. V. Vazirani. Algorithmic Game Theory. Cambridge University Press, New York, NY, USA, 2007.