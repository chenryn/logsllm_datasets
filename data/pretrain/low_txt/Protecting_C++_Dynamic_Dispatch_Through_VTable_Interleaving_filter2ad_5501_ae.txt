### Guided Optimizations and Overhead Analysis

Guided optimizations aim to minimize overhead, which we have successfully achieved. VTV (Virtual Table Verification) has lower precision [13] and higher overhead—4.1% on the C++ benchmarks of SPEC2006, compared to our 0.9% overhead. Additionally, unlike other techniques, our runtime checks do not depend on the size of the class hierarchy.

### VTable Protection for COTS Binaries

Another branch of work focuses on VTable protection for COTS (Commercial Off-The-Shelf) binaries, an approach that does not require source code. For instance, vfGuard [30] reconstructs a coarse class hierarchy from stripped binaries by leveraging C++ ABI-derived invariants. This method incurs a higher overhead (18% on Firefox modules) due to dynamic instrumentation. The class hierarchy reconstruction in vfGuard is orthogonal and complementary to our work.

VTint [42] identifies writable vtables and relocates them to read-only memory, separate from other data. At each virtual method call site, VTint checks if the target vtable is read-only by attempting to write to it, thus forcing an exception. These exceptions involve a context switch to the kernel, leading to significantly higher overhead compared to our technique. The reported overhead for VTint is 2% on average, but this is measured over a significantly smaller number of instrumented call sites. For example, for xalancbmk, the authors report only 1.12% overhead, but they find only 29 vtables and instrument 4248 call sites, whereas we find 958 vtables and instrument 11253 call sites. In our experience, we have not encountered any vtables laid out in writable memory by LLVM.

### LLVM Virtual Call CFI Scheme

LLVM 3.7 [22] implements a virtual call CFI (Control-Flow Integrity) scheme using bitsets, which we refer to as the LLVM-VCFI technique in our experimental evaluation. As shown in Section X, their technique has the same precision as ours but with higher runtime overhead (1.97% vs. 1.17%) and higher memory overhead (3.6% vs. 1.7%).

Redactor++ [8] provides a probabilistic defense against vtable confusion attacks with similar overhead to us—1.1% over Chrome and SPEC2006. Unlike Redactor++, our guarantees are deterministic rather than probabilistic.

### General CFI Techniques

General CFI techniques protect all computed control transfers, including normal function pointer calls and returns. Due to this broader scope, a direct comparison of runtime overhead between our technique and general CFI methods is challenging. Generally, we achieve lower runtime overhead than all surveyed work here. It's important to note that while we protect a smaller set of computed transfers, we provide stronger guarantees for that set.

CFI was first introduced by Abadi et al. [3]. Their approach enforces fine-grained CFGs (Control-Flow Graphs) derived from static analysis by grouping sets of targets into equivalence classes and marking each with a secret cookie. Indirect control-flow instructions are instrumented to check the cookie at runtime. This enforcement scheme is less precise than ours, as any two overlapping sets of targets must be merged. In our setting, a similar technique would not be able to distinguish different subtrees of a primitive hierarchy.

MCFI [28] extends Abadi’s work by adding a level of indirection via runtime maps from branches and branch targets to their corresponding equivalence class. MCFI also utilizes a thread-safe dynamic update mechanism that allows control-flow graphs to be merged at runtime, thus supporting separate compilation and dynamic linking. WIT [4] similarly uses equivalence classes (colors) to protect indirect control flow and extends this technique to protect writes as well.

### Other Mitigation Techniques

Modern operating systems employ DEP (Data Execution Prevention) [31] and ASLR (Address Space Layout Randomization) [29] to prevent code injection attacks and increase the cost of jump-to-libc attacks. PointGuard [7] and [36] propose pointer encryption to prevent attackers from accurately redirecting control flow. In their work, code pointers are encrypted (e.g., XOR-ed) using a secret key and decrypted prior to use. An attacker would need the secret key to accurately redirect control flow. Various techniques have been proposed and deployed for protecting the stack, including stack canaries [6], SafeStack [20], shadow stacks [3], and SafeSEH [25]. These techniques provide additional safety complementary to our work, but recent work [5] shows that they may not be as secure as previously thought.

Kuznetsov et al. [17] present CPI (Code Pointer Integrity), a technique that protects all data influencing control flow. CPI provides stronger guarantees and protects more computed transfers but at a higher runtime cost (8.4% overall, 23% on the C++ benchmarks in SPEC2006). A relaxation of CPI, Code-Pointer Separation (CPS), provides less precise protection for virtual dispatch but still covers more computed transfers (e.g., returns). CPS does not protect the integrity of pointers to code pointers, including vptrs, and thus would allow vtable confusion attacks. CPS incurs an average overhead of 1.9% (4.2% on the C++ benchmarks in SPEC2006).

### Limitations and Future Work

Our current approach protects only C++ dynamic dispatch. We believe it might be possible to adapt our technique to check the type safety of generic function pointers. The idea would be to use a trampoline-based technique such as CCFIR, while also laying out the trampolines in memory using a "mock" class hierarchy based on function signatures. The feasibility of this approach requires further investigation, as function signatures might be too loose a safety criterion.

Another barrier to adoption is the lack of support for dynamic linking and loading. While dynamic linking could be supported through extending the runtime linker, dynamic loading is more challenging. Merging the CFI policies of the modules concurrently with their code running is a difficult problem [28]. In our setting, this is further complicated by the ordering and interleaving we impose on pieces of data and the immediate values in the code section that depend on it.

An interesting direction for future work would be to adapt our technique to check C++ downcasts for safety at runtime. Exploiting bugs in programs can lead to incorrect C++ downcasts, which in turn can lead to type confusion and heap corruption. Recent work [18] has shown that C++ casts can be checked for safety with an overhead of about 7.6% on Chrome (64.6% on Firefox). Since our approach is precisely meant for checking that a vptr points to the vtable of a given class or any of its subclasses, we believe our approach could be a good fit for checking dynamic casts as well. One caveat is that our approach would only work for classes with virtual methods (polymorphic classes), but this could be resolved using a hybrid approach: using our approach for classes with virtual methods and the approach from [18] on all other classes.

Another direction for future work is protecting pointers to member functions and checking the validity of the indices stored inside them. As mentioned in Section X-E, our approach does not currently handle such pointers to member functions. LLVM-VCFI [22] also does not handle such pointers, but SafeDispatch [16] does, by adding an additional range check. OVT can trivially use the same check as SafeDispatch since entries for a single (primitive) vtable are still continuous. In the case of IVT, this is more complicated as entries of one vtable are interleaved with entries of related subclasses and superclasses. One possible approach is to keep old vtables and refer to them from IVT for dereferencing pointers to member functions, at the cost of additional code bloat. Another possibility is to check member pointers directly on the interleaved layout, but this would require carefully crafted range and stride checks.

### Conclusion

We have presented an approach for protecting the control-flow integrity of C++ virtual method calls. Our approach is based on a novel layout for vtables. Although our layout is very different from a traditional one, it is backward-compatible with the traditional way of doing dynamic dispatch. Most importantly, our layout allows us to check the safety of vtables using efficient range checks. We have implemented our approach in the LLVM compiler and have experimentally evaluated its runtime and memory overhead, showing that it has lower overhead than state-of-the-art techniques that provide the same guarantee.

Although this paper focuses on protecting dynamic dispatch, our approach could be a stepping stone to more complex forms of runtime enforcement. For example, as we have already alluded to, our approach could be adapted to check the safety of C++ downcasts or the type safety of arbitrary function pointers.

### Acknowledgments

We would like to thank the reviewers for their insightful feedback and Dongseok Jang for his guidance and advice. This work was supported by NSF grant CNS-1228967 and a generous gift from Google.

### References

[1] “CWE-122.” Available from MITRE, CWE-ID CWE-122. [Online]. Available: https://cwe.mitre.org/data/definitions/122.html

[2] “CVE-2012-0167.” Available from MITRE, CVE-ID CVE-2014-0160., 2011. [Online]. Available: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0167

[31] V. A. S. Andersen, “Data execution prevention: Changes to functionality in Microsoft Windows XP Service Pack 2, part 3: Memory protection technologies,” http://technet.microsoft.com/en-us/library/bb457155.aspx, 2004.

[32] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A. Sadeghi, and T. Holz, “Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications,” in S&P, 2015, pp. 745–762.

[33] C. Small, “Misfit: A tool for constructing safe extensible C++ systems,” in USENIX Conference on Object-Oriented Technologies (COOTS), S. Vinoski, Ed., 1997, pp. 175–184.

[34] Symantec, “Microsoft Internet Explorer virtual function table remote code execution vulnerability,” http://www.symantec.com/security_response/vulnerability.jsp?bid=54951, 2012.

[35] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity in GCC & LLVM,” in NDSS, 2014.

[36] N. Tuck, B. Calder, and G. Varghese, “Hardware and binary modification support for code pointer protection from buffer overflow,” in 37th Annual International Symposium on Microarchitecture (MICRO-37, 2004, pp. 209–220.

[37] VUPEN, “Exploitation of Mozilla Firefox use-after-free vulnerability,” http://www.vupen.com/blog/20120625.Advanced_Exploitation_of-Mozilla_Firefox_UaF_CVE-2012-0469.php, 2012.

[38] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, “Efficient software-based fault isolation,” in SOSP, 1993, pp. 203–216.

[39] Z. Wang and X. Jiang, “Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity,” in S&P, 2010.

[40] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar, “Native Client: A sandbox for portable, untrusted x86 native code,” in S&P, 2009, pp. 79–93.

[41] B. Zeng, G. Tan, and G. Morrisett, “Combining control-flow integrity and static analysis for efficient and validated data sandboxing,” in CCS, 2011, pp. 29–40.

[42] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “VTint: Protecting virtual function tables’ integrity,” in NDSS, 2015.

[43] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables,” in S&P, 2013, pp. 559–573.

[44] M. Zhang and R. Sekar, “Control flow integrity for COTS binaries,” in USENIX Security, 2013, pp. 337–352.

[3] M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti, “Control-flow integrity,” in CCS, 2005.

[4] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro, “Preventing memory error exploits with WIT,” in S&P, 2008, pp. 263–277.

[5] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, M. Qunaibit, and A.-R. Sadeghi, “Losing control: On the effectiveness of control-flow integrity under stack attacks,” in CCS, 2015.

[6] C. Cowan, “StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks,” in USENIX Security, A. D. Rubin, Ed., 1998.

[7] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuardTM: Protecting pointers from buffer overflow vulnerabilities,” in USENIX Security, 2003.

[8] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi, A.-R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz, “It's a trap: Table randomization and protection against function-reuse attacks,” in CCS, 2015.

[9] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nürnberger, and A. Sadeghi, “MoCFI: A framework to mitigate control-flow attacks on smartphones,” in NDSS, 2012.

[10] C. Evans, “Exploiting 64-bit Linux like a boss.” http://scarybeastsecurity.blogspot.com/search?q=Exploiting+64-bit+Linux, 2013.

[11] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of control: Overcoming control-flow integrity,” in S&P, 2014.

[12] Google, “Heap-use-after-free in WebCore (exploitable),” https://code.google.com/p/chromium/issues/detail?id=162835, 2012.

[13] M. Haller, E. Göktas, E. Athanasopoulos, G. Portokalidis, and H. Bos, “Shrinkwrap: Vtable protection without loose ends,” in ACSAC, 2015, pp. 341–350.

[14] InfoSecurity, “Pwn2own at CanSecWest 2013,” https://labs.mwrinfosecurity.com/blog/2013/03/06/pwn2own-at-cansecwest-2013, 2013.

[15] Intel, “Introduction to Intel Memory Protection Extensions,” https://software.intel.com/en-us/articles/introduction-to-intel-memory-protection-extensions, 2013.

[16] D. Jang, Z. Tatlock, and S. Lerner, “SafeDispatch: Securing C++ virtual calls from memory corruption attacks,” in NDSS, 2014.

[17] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song, “Code-pointer integrity,” in OSDI, J. Flinn and H. Levy, Eds., 2014, pp. 147–163.

[18] B. Lee, C. Song, T. Kim, and W. Lee, “Type casting verification: Stopping an emerging attack vector,” in USENIX Security, 2015.

[19] LLVM Team, “The LLVM Compiler Infrastructure Project,” http://llvm.org/.

[20] ——, “http://clang.llvm.org/docs/safestack.html,” http://clang.llvm.org/docs/SafeStack.html, 2014.

[21] ——, “LLVM Link Time Optimization: Design and Implementation,” http://llvm.org/docs/LinkTimeOptimization.html, 2014.

[22] ——, “Control Flow Integrity Design Documentation,” http://clang.llvm.org/docs/ControlFlowIntegrityDesign.html, 2015.

[23] S. McCamant and G. Morrisett, “Evaluating SFI for a CISC architecture,” in USENIX, 2006.

[24] Microsoft, “Vulnerability in Internet Explorer could allow remote code execution,” http://technet.microsoft.com/en-us/security/advisory/961051, 2008.

[25] Microsoft Visual Studio, “Image has safe exception handlers,” http://msdn.microsoft.com/en-us/library/9a89h429(v=vs.80).aspx, 2005.

[26] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz, “Opaque control-flow integrity,” in NDSS, 2015.

[27] H. D. Moore, “Microsoft Internet Explorer Data Binding Memory Corruption,” http://packetstormsecurity.com/files/86162/Microsoft-Internet-Explorer-Data-Binding-Memory-Corruption.html, 2010.

[28] B. Niu and G. Tan, “Modular Control-Flow Integrity,” in PLDI, 2014.

[29] PaX Team, “PaX Address Space Layout Randomization (ASLR),” http://pax.grsecurity.net/docs/aslr.txt, 2003.

[30] A. Prakash, X. Hu, and H. Yin, “vfGuard: Strict protection for virtual function calls in COTS C++ binaries,” in NDSS, 2015.