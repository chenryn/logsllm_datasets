### Aggregation Problem and Solution with COAL Solver

The COAL solver [25] is employed to address the aggregation problem, enabling the extraction of Intent values used in inter-component communication (ICC) APIs. However, our experiments reveal that IC3 fails to generate results for approximately 38% of the applications we analyzed.

### Statistical Analysis of Android Applications

One factor contributing to the rapid growth of Android applications is the relatively lenient auditing process adopted by the Google Play Store. Consequently, the security and rigor of developers' practices significantly impact the overall security of the Android ecosystem. Several studies have utilized statistical analysis to examine developer behaviors. For instance:

- **Felt et al. [14]** developed an automated testing tool named Stowaway, which they applied to 940 applications. Their study found that one-third of these applications requested more permissions than necessary, indicating a lack of adherence to the principle of least privilege.
- **Enck et al. [13]** conducted a static analysis on 1,100 popular free applications, identifying common security issues, such as insecure use of Android APIs.
- **Egele et al. [12]** examined the secure usage of cryptographic APIs in 11,748 applications, revealing that 88% of them made at least one mistake.
- **Viennot et al. [39]** performed a large-scale measurement study on 1,100,000 applications from the Google Play Store, providing insights into application content, evolution, and library usage.
- **Lindorfer et al. [30]** analyzed 1,000,000 applications to identify trends in malware behavior.
- **Afonso et al. [3]** studied the native code usage in 1.2 million Android applications and proposed an automatic sandboxing policy for protecting native code.
- **McDonnell et al. [32]** investigated the rate at which developers update their API references, finding that about 28% of API references were outdated, with a median lag time of 16 months.

In this paper, we conduct a study with a different goal: to determine the adoption trend of the one-size-fits-all implicit service prohibition solution among application developers. Our findings indicate that even though implicit service invocations have been forbidden for over two years, 64 applications remain vulnerable to service hijacking or Denial of Service (DoS) attacks.

### Conclusions

Due to service hijacking attacks, implicit service invocations have been prohibited since Android 5.0. In this paper, we re-examine service invocations and evaluate the impacts and effectiveness of disabling implicit invocations by throwing an exception. Our experiments show that, 30 months after the ban, 36 popular applications still contain code vulnerable to service hijacking attacks. Furthermore, we find that this one-size-fits-all solution not only remains susceptible to service hijacking but also introduces a new DoS attack vector, affecting 28 applications. Finally, we propose a new ranking algorithm for selecting services invoked through implicit intents to mitigate the remaining service hijacking attacks.

### Acknowledgments

We are grateful for the insightful comments and constructive feedback from the anonymous reviewers. We would like to thank Xianchen Meng for his contributions in the early stages of this project. This work was partially supported by the U.S. Office of Naval Research under Grants N00014-16-1-3214 and N00014-16-1-3216, the National Key Research and Development Program of China under Grant 2016YFB0800102, the Natural Science Foundation of China under Grants 61572278 and 61472165, the Guangzhou Key Laboratory of Data Security and Privacy Preserving, and the Guangdong Provincial Key Laboratory of Data Security and Privacy Preserving. The corresponding authors are Yuewu Wang and Qi Li.

### References

[1] 2014. PlayDrone Android Apps. https://archive.org/details/android-apps. (2014).
[2] 2017. Apktool: A tool for reverse engineering Android apk files. https://ibotpeaches.github.io/Apktool/. (2017).
[3] Vitor Afonso, Antonio Bianchi, Yanick Fratantonio, Adam Doupé, Mario Polino, Paulo de Geus, Christopher Kruegel, and Giovanni Vigna. 2016. Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS).
[4] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. ACM SIGPLAN Notices 49, 6 (2014), 259–269.
[5] Vitalii Avdiienko, Konstantin Kuznetsov, Alessandra Gorla, Andreas Zeller, Steven Arzt, Siegfried Rasthofer, and Eric Bodden. 2015. Mining apps for abnormal usage of sensitive data. In Proceedings of the 37th International Conference on Software Engineering-Volume 1. IEEE Press, 426–436.
[6] Paulo Barros, René Just, Suzanne Millstein, Paul Vines, Werner Dietl, Michael D. Ernst, et al. 2015. Static Analysis of Implicit Control Flow: Resolving Java Reflection and Android Intents (T). In Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on. IEEE, 669–679.
[7] Sven Bugiel, Stephen Heuser, and Ahmad-Reza Sadeghi. 2013. Flexible and fine-grained mandatory access control on Android for diverse security and privacy policies. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). 131–146.
[8] Stefano Calzavara, Ilya Grishchenko, and Matteo Maffei. 2016. Horndroid: Practical and sound static analysis of Android applications by SMT solving. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE, 47–62.
[9] Qi Alfred Chen, Zhiyun Qian, and Zhuoqing Morley Mao. 2014. Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks. In USENIX Security, Vol. 14. 1037–1052.
[10] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and David Wagner. 2011. Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services. ACM, 239–252.
[11] Jeffrey Dean, David Grove, and Craig Chambers. 1995. Optimization of object-oriented programs using static class hierarchy analysis. In European Conference on Object-Oriented Programming. Springer, 77–101.
[12] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013. An empirical study of cryptographic misuse in Android applications. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 73–84.
[13] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011. A Study of Android Application Security. In USENIX security symposium, Vol. 2. 2.
[14] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner. 2011. Android permissions demystified. In Proceedings of the 18th ACM conference on Computer and communications security. ACM, 627–638.
[15] Yanick Fratantonio, Antonio Bianchi, William Robertson, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. 2016. Triggerscope: Towards detecting logic bombs in Android applications. In Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 377–396.
[16] Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2013. Highly precise taint analysis for Android applications. EC SPRIDE, TU Darmstadt, Tech. Rep (2013).
[17] Google. 2017. Android Fundamentals. https://developer.android.com/guide/components/fundamentals.html. (2017).
[18] Google. 2017. Google Play. https://play.google.com/store/apps?hl=en. (2017).
[19] Google. 2017. Intents and Intent Filters. https://developer.android.com/guide/components/intents-filters.html. (2017).
[20] Google. 2017. Service Component. https://developer.android.com/guide/topics/manifest/service-element.html. (2017).
[21] Google. 2017. Shared Preferences: Saving Key-Value Sets. (2017).
[22] Google. 2017. Uses SDK Element in Android Application Manifest File. https://developer.android.com/guide/topics/manifest/uses-sdk-element.html. (2017).
[23] Michael I. Gordon, Deokhwan Kim, Jeff H. Perkins, Limei Gilham, Nguyen Nguyen, and Martin C. Rinard. 2015. Information Flow Analysis of Android Applications in DroidSafe. In NDSS. Citeseer.
[24] Johannes Hoffmann, Martin Ussath, Thorsten Holz, and Michael Spreitzenbarth. 2013. Slicing droids: program slicing for smali code. In Proceedings of the 28th Annual ACM Symposium on Applied Computing. ACM, 1844–1851.
[25] PSU SIIS Lab. 2014. COAL solver. http://siis.cse.psu.edu/coal/. (2014).
[26] Ondřej Lhoták and Laurie Hendren. 2003. Scaling Java points-to analysis using Spark. In International Conference on Compiler Construction. Springer, 153–169.
[27] Ding Li, Yingjun Lyu, Mian Wan, and William G.J. Halfond. 2015. String analysis for Java and Android applications. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. ACM, 661–672.
[28] Li Li, Alexandre Bartel, Tegawendé F. Bissyandé, Jacques Klein, Yves Le Traon, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Damien Octeau, and Patrick McDaniel. 2015. ICCTA: Detecting inter-component privacy leaks in Android apps. In Proceedings of the 37th International Conference on Software Engineering-Volume 1. IEEE Press, 280–291.
[29] Li Li, Tegawendé F. Bissyandé, Damien Octeau, and Jacques Klein. 2016. DroidRA: Taming reflection to support whole-program analysis of Android apps. In Proceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 318–329.
[30] Martina Lindorfer, Matthias Neugschwandtner, Lukas Weichselbaum, Yanick Fratantonio, Victor Van Der Veen, and Christian Platzer. 2014. Andrubis–1,000,000 apps later: A view on current Android malware behaviors. In 2014 Third International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS). IEEE, 3–17.
[31] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. Chex: statically verifying Android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 229–240.
[32] Tyler McDonnell, Baishakhi Ray, and Miryung Kim. 2013. An empirical study of API stability and adoption in the Android ecosystem. In Software Maintenance (ICSM), 2013 29th IEEE International Conference on. IEEE, 70–79.
[33] Damien Octeau, Daniel Luchaup, Matthew Dering, Somesh Jha, and Patrick McDaniel. 2015. Composite constant propagation: Application to Android inter-component communication analysis. In Proceedings of the 37th International Conference on Software Engineering-Volume 1. IEEE Press, 77–88.
[34] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden, Jacques Klein, and Yves Le Traon. 2013. Effective inter-component communication mapping in Android: An essential step towards holistic security analysis. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). 543–558.
[35] Sebastian Poeplau, Yanick Fratantonio, Antonio Bianchi, Christopher Kruegel, and Giovanni Vigna. 2014. Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications. In NDSS, Vol. 14. 23–26.
[36] Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, and Eric Bodden. 2016. Harvesting runtime values in Android applications that feature anti-analysis techniques. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS).
[37] Thomas Reps, Susan Horwitz, and Mooly Sagiv. 1995. Precise interprocedural data-flow analysis via graph reachability. In Proceedings of the 22nd ACM SIGPLAN-SIGACT symposium on Principles of programming languages. ACM, 49–61.
[38] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In NDSS, Vol. 310. 20–38.
[39] Nicolas Viennot, Edward Garcia, and Jason Nieh. 2014. A measurement study of Google Play. In ACM SIGMETRICS Performance Evaluation Review, Vol. 42. ACM, 221–233.
[40] Ruowen Wang, William Enck, Douglas Reeves, Xinwen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, and Ahmed M. Azab. 2015. EASEAndroid: Automatic policy analysis and refinement for security enhanced Android via large-scale semi-supervised learning. In 24th USENIX Security Symposium (USENIX Security 15). 351–366.
[41] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. 2014. Amandroid: A precise and general inter-component data flow analysis framework for security verification of Android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1329–1341.
[42] Michelle Y. Wong and David Lie. 2016. Intellidroid: A targeted input generator for the dynamic analysis of Android malware. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS).
[43] Meng Xu, Chengyu Song, Yang Ji, Ming-Wei Shih, Kangjie Lu, Cong Zheng, Ruian Duan, Yeongjin Jang, Byoungyoung Lee, Chenxiong Qian, et al. 2016. Toward Engineering a Secure Android Ecosystem: A Survey of Existing Techniques. ACM Computing Surveys (CSUR) 49, 2 (2016), 38.
[44] Mu Zhang and Heng Yin. 2014. AppSealer: Automatic Generation of Vulnerability-Specific Patches for Preventing Component Hijacking Attacks in Android Applications. In NDSS.