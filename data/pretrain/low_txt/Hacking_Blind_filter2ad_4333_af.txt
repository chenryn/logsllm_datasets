### Overflow Vulnerability and Fuzz Testing

The overflow occurred because the packet specified a length, but a larger value was actually sent. It is feasible to design a fuzz tester with protocol-specific knowledge that attempts to cause overflows by providing incorrect lengths [17]. Interestingly, a similar chunked encoding vulnerability that appeared in nginx has also been observed in Apache in the past [18]. Developers could create fuzz testers for specific protocol conditions known to be challenging to implement correctly or that have been exploited previously.

### BROP Prevention

#### A. Rerandomization

The most fundamental defense against BROP attacks is to frequently rerandomize canaries and ASLR. While these mechanisms are effective, server developers often undermine them by not rerandomizing when worker processes crash. The simplest method is to fork and exec the process on a crash or spawn, which rerandomizes both the canary and ASLR. It is crucial that any child processes forked are independently randomized to prevent information learned from one child from being used against another.

Research has been conducted on rerandomizing binaries at runtime. For example, Giuffrida et al. developed a technique using a modified compiler to migrate the running state between two instances with different ASLR randomizations [19]. We also prototyped a re-randomization technique that moves a binary’s text segment to a new location using `mmap`/`munmap` and uses a page fault handler to determine whether pointers should be rewritten as they are faulted on.

A simpler improvement we developed is to rerandomize the canary on a per-user or per-request basis. Servers should write a new canary before entering a per-request function and restore the old canary upon returning through that function to ensure normal execution. While this protects against the bugs in nginx and our proprietary server, the specific attack against yaSSL can bypass the canary entirely.

#### B. Sleep on Crash

Systems like NetBSD's segvguard [20] and grsec's deter_bruteforce for Linux [21] propose delaying a fork after a segmentation fault. This technique can slow down attacks, allowing administrators to notice and address the problem. However, it can also make bugs more susceptible to denial of service (DoS) attacks. Grsec proposes a 30-second delay, which is sufficient for most setups, but overnight attacks on small sites might go unnoticed. Our optimized BROP attack for nginx can complete in approximately 1,000 requests, making the attack time roughly 8 hours.

While DoS attacks are serious, leaking private data can be even worse. In some situations, servers should not respawn, but users and developers often find this an unacceptable solution. Modern Linux desktops use systemd to monitor services and automatically restart them on failures. Developers should be cautious about which remote services they want to restart automatically to reduce the attack surface.

#### C. ROP Protections

Another class of defense mechanisms includes protections against ROP attacks. Control Flow Integrity (CFI) [22] prevents return-oriented programming by enforcing the control flow graph. Pappas et al. developed a technique to enforce control flow inside the system call handler by comparing the stack against the last branch record (LBR) facility available in Intel processors [23], which can verify that the stack has not been tampered with. The main limitation is the depth of the stack that can be checked, which can be as small as four entries depending on the processor model.

Other solutions propose adding randomness to binaries [24], which are effective against ROP but not in a BROP setting. Techniques to randomize gadget locations on a per-instance run offer no defense against BROP unless the binary is fully restarted (fork and exec) [25], [26]. There are also techniques to remove or reduce the number of available gadgets [27], which can protect effectively against ROP attacks in general.

#### D. Compiler Techniques

Many modern compilers support inserting runtime bounds checks on buffers, preventing a class of bugs. Unlike canaries that detect corruption after the fact, LLVM's AddressSanitizer and SafeCode framework enforce bounds checks and other protections [28], [29]. Intel compilers also provide support for runtime bounds checking. The main drawback of these solutions is a potential 2x performance slowdown, limiting their use mostly to testing. Intel has announced instruction extensions to reduce the cost of bounds checking, which may make these solutions more practical [30].

### Related Work

Previous work exists on scanning for single ROP gadgets. Goodspeed's half-blind attack against microcontrollers [31] relies on knowledge of common bootloader code and scanning for a single gadget in an unknown portion of memory to construct an attack for firmware extraction. The BROP attack is more generic, as it is fully blind and presents techniques to find and chain multiple, different gadgets.

There has been research on attacking instruction set randomization [32] using similar techniques to the BROP attack. Signaling for correct/incorrect guesses was based on whether an application crashes or not, with the goal of leaking an encryption key. The method assumes that a code injection exploit can be carried out, i.e., no ASLR and no NX were in place.

Stack reading to determine canaries is a well-known technique [33]. Researchers and attackers have shown how to brute-force 32-bit ASLR [9], but this approach was not feasible on 64-bit machines due to the need to brute-force the entire word at once. We generalize the stack reading technique to read off the saved return address and frame pointer to break 64-bit ASLR.

Exploits today are often multistage and require leaking information. Kingcope's 32-bit nginx exploit, for example, brute-forces the location of `write` in the PLT to leak the binary and find gadgets [14], [34]. This technique falls short on 64-bit because multiple items need to be brute-forced at once, making a BROP-like attack necessary. Even Kingcope admits difficulty in generalizing his approach to 64-bit platforms.

Client-side exploit writers have had more success with 64-bit and ASLR, possibly due to contests that highly reward participants and force them to publish their work [35]. The pwn2own exploit uses a JavaScript vulnerability to leak a pointer and then uses the same vulnerability to leak the entire contents of the `chrome.dll` library to build a ROP chain, showing how exploits are moving toward being binary-independent for robustness.

### Conclusion

We demonstrate that, under the right conditions, it is possible to write exploits without any knowledge of the target binary or source code. This works for stack vulnerabilities where the server process restarts after a crash. Our attack defeats ASLR, NX, and stack canaries on modern 64-bit Linux servers. We present two new techniques: generalized stack reading, which defeats full ASLR on 64-bit systems, and the BROP attack, which can remotely find ROP gadgets. Our fully automated tool, Braille, can take under 4,000 requests to spawn a shell, tested against real versions of yaSSL+MySQL and nginx with known vulnerabilities, and a toy proprietary service running an unknown binary.

We show that design patterns like forking servers with multiple worker processes can conflict with ASLR, and that ASLR is only effective when applied to all code segments in the binary (including PIE). Security through obscurity, where the binary is unknown or randomized, can only slow but not prevent buffer overflow attacks. To defend against our attack, we suggest that systems should rerandomize ASLR and canaries after any crash, and that no library or executable should be exempt from ASLR.

Braille is available at: http://www.scs.stanford.edu/brop/.

### Acknowledgments

We thank our anonymous reviewers and Elad Efrat for their feedback. We also thank Mark Handley and Brad Karp who helped shape early versions of this work. Eric Smith suggested using out-of-order TCP segments instead of IP fragmentation. This work was funded by DARPA CRASH and a gift from Google.

### References

[1] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented programming: Systems, languages, and applications,” ACM Trans. Inf. Syst. Secur., vol. 15, no. 1, pp. 2:1–2:34, Mar. 2012. [Online]. Available: http://doi.acm.org/10.1145/2133375.2133377

[2] mitre. Cve-2013-2028. [Online]. Available: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2028

[3] ——. Cve-2008-0226. [Online]. Available: http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-0226

[4] A. One, “Smashing The Stack For Fun And Profit,” Phrack, vol. 7, no. 49, Nov. 1996. [Online]. Available: http://phrack.com/issues.html?issue=49&id=14#article

[5] M. Kaempf. Vudo malloc tricks by maxx. [Online]. Available: http://www.phrack.org/issues.html?issue=57&id=8&mode=txt

[6] S. Designer. Getting around non-executable stack (and fix). [Online]. Available: http://seclists.org/bugtraq/1997/Aug/63

[7] P. Team. Pax address space layout randomization (aslr). [Online]. Available: http://pax.grsecurity.net/docs/aslr.txt

[8] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Address obfuscation: an efficient approach to combat a board range of memory error exploits,” in Proceedings of the 12th conference on USENIX Security Symposium - Volume 12, ser. SSYM’03. Berkeley, CA, USA: USENIX Association, 2003, pp. 8–8. [Online]. Available: http://dl.acm.org/citation.cfm?id=1251353.1251361

[9] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh, “On the effectiveness of address-space randomization,” in Proceedings of the 11th ACM conference on Computer and communications security, ser. CCS ’04. New York, NY, USA: ACM, 2004, pp. 298–307. [Online]. Available: http://doi.acm.org/10.1145/1030083.1030124

[10] gera and riq. Advances in format string exploitation. [Online]. Available: http://www.phrack.org/archives/59/p59 0x07 Advances%20in%20format%20string%20exploitation by riq%20&%20gera.txt

[11] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang, “Stackguard: automatic adaptive detection and prevention of buffer-overﬂow attacks,” in Proceedings of the 7th conference on USENIX Security Symposium - Volume 7, ser. SSYM’98. Berkeley, CA, USA: USENIX Association, 1998, pp. 5–5. [Online]. Available: http://dl.acm.org/citation.cfm?id=1267549.1267554

[12] H. Etoh, “GCC extension for protecting applications from stack-smashing attacks (ProPolice),” 2003, http://www.trl.ibm.com/projects/security/ssp/. [Online]. Available: http://www.trl.ibm.com/projects/security/ssp/

[13] Bulba and Kil3r, “Bypassing stackguard and stackshield,” Phrack Magazine, May 2000. [Online]. Available: http://phrack.org/issues.html?issue=56&id=5#article

[14] Kingcope. About a generic way to exploit linux targets. [Online]. Available: http://www.exploit-db.com/wp-content/themes/exploit/docs/27074.pdf

[15] G. F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi, “Surgically returning to randomized lib(c),” in Proceedings of the 2009 Annual Computer Security Applications Conference, ser. ACSAC ’09. Washington, DC, USA: IEEE Computer Society, 2009, pp. 60–69. [Online]. Available: http://dx.doi.org/10.1109/ACSAC.2009.16

[19] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, “Enhanced operating system security through efficient and fine-grained address space randomization,” in Proceedings of the 21st USENIX conference on Security symposium, Berkeley, CA, USA: USENIX Association, 2012, pp. 40–40. [Online]. Available: http://dl.acm.org/citation.cfm?id=2362793.2362833

[20] E. Efrat. Segvguard. [Online]. Available: http://www.netbsd.org/~elad/recent/man/security.8.html

[21] grsecurity. Deter exploit bruteforcing. [Online]. Available: http://en.wikibooks.org/wiki/Grsecurity/Appendix/Grsecurity_and_PaX_Configuration_Options#Deter_exploit_bruteforcing

[22] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity,” in Proceedings of the 12th ACM Conference on Computer and Communications Security, ser. CCS ’05. New York, NY, USA: ACM, 2005, pp. 340–353. [Online]. Available: http://doi.acm.org/10.1145/1102120.1102165

[23] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Transparent ROP exploit mitigation using indirect branch tracing,” in Proceedings of the 22nd USENIX conference on Security, ser. SEC’13. Berkeley, CA, USA: USENIX Association, 2013, pp. 447–462. [Online]. Available: http://dl.acm.org/citation.cfm?id=2534766.2534805

[24] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security, ser. CCS ’12. New York, NY, USA: ACM, 2012, pp. 157–168. [Online]. Available: http://doi.acm.org/10.1145/2382196.2382216

[25] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “ILR: Where’d my gadgets go?” in Proceedings of the 2012 IEEE Symposium on Security and Privacy, ser. SP ’12. Washington, DC, USA: IEEE Computer Society, 2012, pp. 571–585. [Online]. Available: http://dx.doi.org/10.1109/SP.2012.39

[26] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the gadgets: Hindering return-oriented programming using in-place code randomization,” in Proceedings of the 2012 IEEE Symposium on Security and Privacy, ser. SP ’12. Washington, DC, USA: IEEE Computer Society, 2012, pp. 601–615. [Online]. Available: http://dx.doi.org/10.1109/SP.2012.41

[27] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda, “G-free: defeating return-oriented programming through gadget-less binaries,” in Proceedings of the 26th Annual Computer Security Applications Conference. ACM, 2010, pp. 49–58.

[28] T. C. Team. AddressSanitizer - clang 3.4 documentation. [Online]. Available: http://clang.llvm.org/docs/AddressSanitizer.html

[29] D. Dhurjati, S. Kowshik, and V. Adve, “SAFECode: Enforcing alias analysis for weakly typed languages,” in Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI ’06. New York, NY, USA: ACM, 2006, pp. 144–157. [Online]. Available: http://doi.acm.org/10.1145/1133981.1133999

[30] Intel. Introduction to Intel Memory Protection Extensions. [Online]. Available: http://software.intel.com/en-us/articles/introduction-to-intel-memory-protection-extensions

[31] T. Goodspeed and A. Francillon, “Half-Blind Attacks: Mask ROM Bootloaders are Dangerous,” in WOOT, 2009.

[32] A. N. Sovarel, D. Evans, and N. Paul, “Where’s the feeb?: The effectiveness of instruction set randomization,” in Usenix Security, 2005.

[33] A. Zabrocki. Scraps of notes on remote stack overflow exploitation. [Online]. Available: http://www.phrack.org/issues.html?issue=67&id=13#article

[34] Kingcope. nginx 1.3.9/1.4.0 x86 brute force remote exploit. [Online]. Available: http://www.exploit-db.com/exploits/26737/

[35] M. Labes. MWR Labs pwn2own 2013 write-up - WebKit exploit. [Online]. Available: https://labs.mwrinfosecurity.com/blog/2013/04/19/mwr-labs-pwn2own-2013-write-up---webkit-exploit/

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the technical details and references.