### 9.4 Jürgen Pabel's Software-Based Solution

Jürgen Pabel proposed a software-based solution to the cold-boot attack on his website, which has been dormant since early 2009 [28]. His approach involves memory-mapping the L1 cache of the CPU and using this space to store the AES key schedule. However, this method would prevent the CPU cache from performing its normal function, leading to a cache miss for every memory access. Disabling the CPU cache in this manner could result in a significant performance degradation, estimated to be around 200x [1], affecting all software, not just those accessing files on the encrypted disk. Our solution, which avoids these negative performance impacts, is therefore more practical.

### 9.5 Linux-Crypto Mailing List Brainstorming

Shortly after Halderman et al. published their attack, a mailing list discussion on Linux-Crypto explored possible mitigation strategies [39]. The idea of keeping key information in CPU registers was mentioned, but the suggestions were too vague to provide a clear implementation path and were not pursued further.

### 9.6 Leakage-Resistant Algorithms

Much research has focused on designing ciphers that are resilient to side-channel attacks, particularly those that mitigate the impact of partial key leakage. However, we do not believe that protecting against partial key leakage is sufficient to defend against the cold boot attack. According to Halderman et al., it is possible to perform the cold-boot attack in such a way that over 99.9% of memory remains uncorrupted for an entire minute after power is cut. Any countermeasure must account for the potential to fully leak any encryption keys stored in RAM.

### 9.7 TCG Platform Reset Attack Mitigation Specification

The Trusted Computing Group (TCG) has published a standard [21] aimed at mitigating the vulnerability of compliant systems to the cold-boot attack. This specification requires that a compliant BIOS zero out all RAM before giving control to the operating system. While this prevents the attack from being performed using only the victim’s computer, an attacker can still perform the attack by moving the RAM to a machine under their control and booting with a non-compliant BIOS. Therefore, the TCG specification is not a sufficient countermeasure.

### 9.8 Forenscope: A Framework for Live Forensics

The RAM of a computer may contain sensitive material beyond just encryption keys. The Forenscope rootkit [10] exploits the cold-boot attack to gain access to active network sessions, allowing an attacker to masquerade as the victim to any website, SSH server, or other remote system. Loop-Amnesia will protect against a Forenscope-using attacker gaining access to the encrypted disk, as it uses the same strategy as Halderman et al. to attempt key recovery. However, SSH and SSL session keys will likely remain in RAM, enabling an attacker with Forenscope to keep the victim’s network connections alive, sniff the session keys, and impersonate the victim. See §10 for a discussion on how Loop-Amnesia may be extended to assist in preventing Forenscope attacks.

### 10 Future Work

A promising area for future research is the applicability of our approach to algorithms outside the AES cipher family. Some algorithms, such as Blowfish [33], use key-dependent S-boxes; proving whether these S-boxes can be safely stored in RAM would require careful analysis. We believe our approach should work well for algorithms without key-dependent S-boxes and with computationally inexpensive key schedules, but its effectiveness for other ciphers remains to be analyzed.

Additionally, the ability of Loop-Amnesia to neutralize Forenscope’s other attack capabilities merits examination. For instance, an operating system attempting to harden itself against Forenscope could use Loop-Amnesia to encrypt various pieces of data inside the kernel TCP stack. As the master key will have been erased by the reboot preceding Forenscope’s installation, Forenscope will have no way of recovering the network connections. By the time the attacker has downloaded and analyzed the SSH/SSL session keys from RAM, any active TCP sessions will likely have expired.

Finally, our work highlights a limitation in current system programming languages: the inability to insist that particular values never be spilled to RAM. While our needs are uncommon, we speculate that programming language designers may one day wish to allow users more control over the register allocation process for performance reasons. We encourage the designers of such languages or language extensions to include functionality allowing the user to express the needs we faced when implementing Loop-Amnesia. User control over the register allocation process may provide useful benefits for both security and performance.

### 11 Conclusion

In this paper, we present the first practical solution to the cold-boot attack applicable to general-purpose hardware. For a performance cost that is likely to be moderate under most workloads, our solution provides protection for general-purpose hardware against a significant practical attack affecting all previous state-of-the-art disk encryption systems. We present a design strategy applicable to all operating system-based disk encryption systems and a usable open-source implementation that validates our design. After the publication of this paper, we intend to work with the Linux kernel community to integrate our approach, and possibly code, into the standard Linux kernel distribution.

We thank Andrew Lenharth of the University of Texas at Austin for his invaluable inspiration and advice in the early stages of this work. We also thank Jari Ruusu for providing loop-AES to the free and open-source software community, which significantly aided us in evaluating the concepts behind Loop-Amnesia.

### References

[1] Cachegrind: a cache-miss profiler. http://wwwcdf.pd.infn.it/valgrind/cg_main.html.

[2] Truecrypt: Free open-source on-the-fly encryption. http://www.truecrypt.org/.

[3] Hard drive secrets sold cheaply. http://news.bbc.co.uk/2/hi/technology/3788395.stm, June 2004.

[4] drop caches. http://www.linuxinsight.com/proc_sys_vm_drop_caches.html, May 2006.

[5] Privacy at risk after burglary at doctor’s office. http://www.cbc.ca/health/story/2011/01/21/nb-privacy-warning.html, January 2011.

[6] Adi Akavia, Shaﬁ Goldwasser, and Vinod Vaikuntanathan. Simultaneous hardcore bits and cryptography against memory attacks. In Theory of Cryptography Conference, pages 474–495, 2009.

[7] Mike Anderson. Using a JTAG in linux driver debugging. In CE Embedded Linux Conference, 2008. http://elinux.org/images/4/4e/CELF_JTAG_Anderson.ppt.

[8] Alex Biryukov and Dmitry Khovratovich. Related-key cryptanalysis of the full AES-192 and AES-256. Cryptology ePrint Archive, Report 2009/317, 2009. http://eprint.iacr.org/.

[9] Bob Brown. How to roll out full disk encryption on your PCs and laptops. http://www.networkworld.com/news/2010/081610-encryption.html, August 2010.

[10] E. Chan, S. Venkataraman, F. David, A. Chaugule, and R. Campbell. Forenscope: A framework for live forensics. In Annual Computer Security Applications Conference, November 2010.

[11] Intel Corporation. IA-32 architectural MSRs. Intel 64 and IA-32 Architectures Software Developer’s Manual, 3B:681–722, January 2011. http://www.intel.com/Assets/PDF/manual/253669.pdf.

[12] Microsoft Corporation. Bitlocker drive encryption technical overview. Microsoft Technet, 2010. http://technet.microsoft.com/en-us/library/cc732774(WS.10).aspx.

[13] John Criswell, Andrew Lenharth, Dinakar Dhurjati, and Vikram Adve. Secure virtual architecture: a safe execution environment for commodity operating systems. In Proceedings of Twenty-First ACM SIGOPS Symposium on Operating Systems Principles, SOSP ’07, pages 351–366, New York, NY, USA, 2007. ACM.

[14] John Curran. Encrypted laptop amendment poses dilemma. USA Today, February 7, 2008. http://www.usatoday.com/tech/news/techpolicy/2008-02-07-encrypted-laptop-child-porn_N.htm.

[15] Joan Daemen and Vincent Rijmen. The Design of Rijndael. Springer-Verlag New York, Inc., Secaucus, NJ, USA, 2002.

[16] Advanced Micro Devices. MSRs of the AMD64 Architecture. AMD64 Architecture Programmer’s Manual, 2:469–472, June 2010. http://support.amd.com/us/Processor_TechDocs/24593.pdf.

[17] Stefan Dziembowski and Krzysztof Pietrzak. Leakage-resilient cryptography. In FOCS, pages 293–302, 2008.

[18] Jake Edge. Holes in the Linux random number generator? Linux Weekly News, 2006. http://lwn.net/Articles/184925/.

[19] David W. Foley. http://doj.nh.gov/consumer/pdf/wackenhut.pdf, December 2010.

[20] Henri Gilbert and Thomas Peyrin. Super-Sbox cryptanalysis: Improved attacks for AES-like permutations. Cryptology ePrint Archive, Report 2009/531, 2009. http://eprint.iacr.org/.

[21] Trusted Computing Group. TCG platform reset attack mitigation specification. http://www.trustedcomputinggroup.org/resources/pc-client-work-group/platform-reset-attack-mitigation-specification-version-10/, 2008.

[22] Zvi Gutterman, Tzachy Reinman, and Benny Pinkas. Analysis of the Linux random number generator. In IEEE Symposium on Security and Privacy, 2006.

[23] J. Alex Halderman, Seth D. Schoen, Nadia Heninger, William Clarkson, William Paul, Joseph A. Calandrino, Ariel J. Feldman, Jacob Appelbaum, and Edward W. Felten. Lest we remember: Cold boot attacks on encryption keys. In Paul C. van Oorschot, editor, USENIX Security Symposium, pages 45–60. USENIX Association, 2008.

[24] Zack Albus Markus Koesler, Franz Graf. Programming a flash-based MSP430 using a JTAG interface. http://www.softbaugh.com/downloads/slaa149.pdf, December 2002.

[25] Patrick McGregor, Tim Hollebeek, Alex Volynkin, and Matthew White. Braving the cold: New methods for preventing cold boot attacks on encryption keys, 2008.

[26] Tilo Müller, Andreas Dewald, and Felix C. Freiling. Aesse: a cold-boot resistant implementation of AES. In Proceedings of the Third European Workshop on System Security, EUROSEC ’10, pages 42–47, New York, NY, USA, 2010. ACM.

[27] Moni Naor and Gil Segev. Public-key cryptosystems resilient to key leakage. In Proceedings of the 29th Annual International Cryptology Conference on Advances in Cryptology, pages 18–35, Berlin, Heidelberg, 2009. Springer-Verlag.

[28] Jürgen Pabel. http://frozencache.blogspot.com, 2009.

[29] OpenSolaris Project. ZFS on-disk encryption support. http://hub.opensolaris.org/bin/view/Project+zfs-crypto/WebHome.

[30] Jari Ruusu. http://loop-aes.sourceforge.net/.

[31] Jari Ruusu. http://mail.nl.linux.org/linux-crypto/2008-06/msg00002.html, June 2008.

[32] Christophe Sauot. dm-crypt: A device-mapper crypto target. http://www.saout.de/misc/dm-crypt/.

[33] Bruce Schneier. Description of a new variable-length key, 64-bit block cipher (Blowfish). In Fast Software Encryption, Cambridge Security Workshop, pages 191–204, London, UK, 1994. Springer-Verlag.

[34] Freescale Semiconductor. Performance monitor counter registers. MPC750 RISC Processor Family User’s Manual, pages 378–382, December 2001. http://www.freescale.com/files/32bit/doc/ref_manual/MPC750UM.pdf.

[35] Arvind Seshadri, Mark Luk, Ning Qu, and Adrian Perrig. SecVisor: a tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. SIGOPS Oper. Syst. Rev., 41:335–350, October 2007.

[36] François-Xavier Standaert, Olivier Pereira, Yu Yu, Jean-Jacques Quisquater, Moti Yung, and Elisabeth Oswald. Leakage resilient cryptography in practice. In David Basin, Ueli Maurer, Ahmad-Reza Sadeghi, and David Naccache, editors, Towards Hardware-Intrinsic Security, Information Security and Cryptography, pages 99–134. Springer Berlin Heidelberg, 2010.

[37] Allan Tomlinson. Introduction to the TPM. http://courses.cs.vt.edu/cs5204/fall10-kafura-BB/Papers/TPM/Intro-TPM-2.pdf.

[38] Zhi Wang and Xuxian Jiang. Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity. In IEEE Symposium on Security and Privacy, pages 380–395, 2010.

[39] Richard Zidlicky. http://www.spinics.net/lists/crypto/msg04668.html, 2008.