# ThruGlassXfer: Remote Access, the APT
**Author: Ian Latter**
**Date: August 2015**
**Graphics Credit: WallpapersWide.com**

## Key Messages for This Session
- **Current Security Architecture Flaws**: The current security architecture is flawed. All necessary information has been published.
- **From First Principles to Full Code Release**: This presentation covers everything from first principles to demonstrations and a full code release (Proof of Concept) with a test framework.
- **Significant Impact**: The impact of these flaws is likely to be significant.
- **No Constraints on Data Theft**: There are no constraints to data theft for remote workers or off-shore partners.
- **No Easy Answers**: There are no easy solutions, but the paper offers some suggestions.

## About the Author
### Professional Background
- **Career**: 
  - Blue Team: Create and fix
  - Governance (Technical, Security): Experience with multiple iconic international enterprise organizations
  - Architect/Designer: Enterprise perimeters, Data Center consolidation
  - SysAdmin, Tech Support
  - Red Team: Break and destroy
  - Ethical Hacker/Penetration Tester: Successfully compromised Asia Pacific in a single business day

### Personal Projects
- **Threat Intelligence**: 
  - Developed a "Practical Threat Intelligence" course and a "Threat Analytics" cloud service
- **OSSTMM**: 
  - Created an "Active Filter Detection" tool
- **Linux Distributions**: 
  - Developed "CHAOS" – a supercomputer for your wallet
  - Created "Saturn" – scalable distributed storage
- **Other Interests**: 
  - Barbie car?

## Acknowledgments
- **2013**: 
  - D3adOne (Extracting data with USB HID)
- **2012**: 
  - Ben Toews and Scott Behrens (DLP Circumvention, a Demonstration of Futility)
  - VszA (Leaking data using DIY USB HID device)
- **2011**: 
  - Stephen Nicholas (QuickeR: Using video QR codes to transfer data)
- **Others**: 
  - Dfries, Hak5, IronGeek, Mike Szczys, Netragrad, Thomas Cannon, and any others not yet found.

## Problem Space
### Framing the Problem

## First Principles
- **Assertion**: Any user-controlled bit can be a communication channel.
- **Validation**: 
  - Screens transmit large volumes of user-controlled bits (imagine the screen as a cut fiber optic bundle).
  - Can the screen be transformed into an uncontrolled binary transfer interface?

## Technology Solution
### Engineering a Proof of Concept

## Screen Data Extraction
- **Terminal Printing (1984)**: 
  - Virtual screen as a multi-use data device (DEC VT220 Programmer Reference Manual)
  - Similar for [XYZ]modem protocols
- **VHS Tape Backup (1992-1996)**: 
  - Video record/play of compressed binary data
  - Grey-scaled picture of two rows of eight blocks, comprised of more nested blocks (ArVid ISA board with AV-in/out (composite))

### Real Screen Data Extraction
- **Timex DataLink Watch (1994)**: 
  - Address book data transmitted from the screen to a wrist watch
- **Eeprom Programmed with Light**: 
  - Windows 95 and 98, required CRT
- **Open Source (dfries)**: 
  - Done with USB TTL LED
  - Transfer rate: 20 seconds to transfer 70 phone numbers

### Timex/Microsoft Advert
- **The First Computer Watch Revolution (1994)**

## Machine Recognition
- **Quick Response Codes (1994)**: 
  - 1960s: Denso Wave responded to cashiers' need for machine-readable Kanji encoded data with 2D barcodes.
  - 1990s: Denso Wave improved performance through an exhaustive study of printed business materials. QR Code features:
    - Highly distinguished
    - Highly machine-recognizable
    - 360-degree scanning

### Performance & Error Correction
- **QR Codes (2000-2006)**: 
  - Adopted by the auto industry
  - Formalized as ISO/IEC 18004:2000
  - Features:
    - Rapid scanning capability
    - Automatic re-orientation of the image
    - Inherent error correction
    - Native binary support
  - Revised as ISO/IEC 18004:2006 for model 2
  - Supports deformed/distorted codes
  - Capacity up to about 3KB

## Optical Packet Network (L3)
- **Zen Moment**: 
  - Consider the QR Code as an optical packet captured within the ether of the display device.
  - Datagram network protocol, OSI Layer 3
  - Beyond the packet boundary, create a flow:
    - Transmitter replaces one code for another
    - Receiver uses video instead of a photo
    - Receiver doesn't exit, just keeps going

### Layer 4 Problems
- **All New Problems**:
  - Unidirectional interface: No synchronization, no signaling, no flow control
  - Requires over-sampling (2-3x), which creates duplicates
  - Requires de-duplication
  - Duplicates may be intentional (repeating sequences in the application layer)
  - Need for a transport protocol!

### Creating Transport Data Flow
- **QR Code v1 = 14 octets at 15% ECC**:
  - Take the 1st octet and create a "control byte"
  - Create two frames, "Control" and "Data"
  - **Data Frame**:
    - **Control Byte**:
      - Bit 0: Always 0 (Data Frame)
      - Bits 1-4: Counter (cycles from 0-15)
      - Bits 5-7: Reserved (unused)
    - **Payload**: Source bytes mod capacity bytes

### Creating Transport Control Flow
- **Control Frame**:
  - **Control Byte**:
    - Bit 0: Always 1 (Control Frame)
    - Bits 1-3: Control Type
    - Bits 4-7: Control Sub-Type
  - **Payload**: Control data as needed (file name, file size, CRC, etc.)

### Creating Transport Control Messages
| Control Type | Control Sub-Type | Label | Function |
|--------------|------------------|-------|----------|
| 001 (1)      | 0001 (1)         | START/FILENAME | Name of source data |
| 0010 (2)     | START/FILESIZE   | Length of source data (octets) |
| 0011 (3)     | START/QR_VER     | QR code version |
| 0100 (4)     | START/QR_FPS     | QR code frames per second |
| 0101 (5)     | START/QR_BYTES   | QR code octets per frame |
| 010 (2)      | 0001 (1)         | STOP/PAUSE | Transmission paused |
| 0010 (2)     | STOP/COMPLETE    | Transmission completed |
| 0011 (3)     | STOP/CANCEL      | Transmission cancelled |
| 011 (3)      | 0001 (1)         | STATUS/SINCE | Status since last status |

### TGXf Transport Protocol
- **One-way data transfer between two or more peers**:
  - **Features (at Layer 4-7)**:
    - Supports high latency
    - Supports interrupted transfers
    - Includes error detection
  - **Requires (of Layer 3)**:
    - Either 1, 2, 5, 8, or 10 Frames Per Second (FPS)
    - QR Code version 1, 2, 8, or 15
    - Binary encoding, Type M (15%) error correction

### TGXf Layer 3 Configurations
| Version | Mode | ECC | Frame Capacity | Reliable Capacity |
|---------|------|-----|----------------|-------------------|
| 1       | Binary | M (15%) | 14 bytes per frame | 10 bytes per frame |
| 2       | Binary | M (15%) | 26 bytes per frame | 22 bytes per frame |
| 8       | Binary | M (15%) | 152 bytes per frame | 148 bytes per frame |
| 15      | Binary | M (15%) | 412 bytes per frame | 408 bytes per frame |

- **Supported QR code versions**:
  - No real impact on Layer 4 (MTU)
  - ECC is dynamic and can exceed the binary payload capacity, resulting in a frame of a different version (automatically increases resolution)

### TGXf Hello World – 1/1:1
- **Control Frame**:
  - **Control Byte**:
    - Bit 0: Control (1)
    - Bits 1-3: START (1)
    - Bits 4-7: FILENAME (1)
  - **Payload**: "helloworl"
  - **Encode as QR code version 8 datagram**

### TGXf Hello World – 1/1:2
- **Control Frame**:
  - **Control Byte**:
    - Bit 0: Control (1)
    - Bits 1-3: START (1)
    - Bits 4-7: FILESIZE (2)
  - **Payload**: 13 octets
  - **Encode as QR code version 8 datagram**

### TGXf Hello World – 1/1:5
- **Control Frame**:
  - **Control Byte**:
    - Bit 0: Control (1)
    - Bits 1-3: START (1)
    - Bits 4-7: QRCODE_BYTES (5)
  - **Payload**: 148 octets
  - **Encode as QR code version 8 datagram**