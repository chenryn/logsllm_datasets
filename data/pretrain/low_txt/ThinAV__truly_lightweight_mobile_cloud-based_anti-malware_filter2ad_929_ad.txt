### Figure 7: Time Required to Generate a Complete System Fingerprint

**Figure 7(a) and (b)** illustrates the time required to generate a complete system fingerprint as a function of:
- The number of packages installed on the device (a)
- The total size of those packages (b)

Both figures show the average time when all package hashes are stored (cached) and when none of the package hashes are stored (uncached). **Figure (a)** also includes the number of bytes sent and received when communicating the fingerprint to the ThinAV server.

For example, with 110 apps, the fingerprint is generated in 1.09 seconds when cached.

### Data Usage Analysis

Data usage grows linearly with the number of packages on the device. The data consumption ranges from 3.64 KB for 110 apps down to 261 bytes for 5 apps. Most of this transmission is the uploaded fingerprint, as the response from ThinAV only downloads 70 bytes if the fingerprint contains no hashes corresponding to malicious apps.

### Scheduled Killswitch Service

The current implementation of the ThinAV client runs the killswitch service every 15 minutes. **Table 8** shows the data consumption over different time periods for 5 and 110 apps installed on the device.

| Interval       | Data Consumption (5 Apps) | Data Consumption (110 Apps) |
|----------------|---------------------------|-----------------------------|
| 1 Day          | 24.47 KB                  | 349.41 KB                   |
| 1 Week         | 171.28 KB                 | 2.39 MB                     |
| 1 Month        | 5.19 MB                   | 74.04 MB                    |

### Fingerprinting Operation Times

**Table 9** summarizes the time required to complete the fingerprinting operation for different numbers of applications, network performance, and caching scenarios.

| Scenario                           | Time (seconds) |
|------------------------------------|----------------|
| 110 apps / ideal 3G / no hashes     | 26.206         |
| 110 apps / typical 3G / no hashes   | 26.430         |
| 110 apps / ideal WiFi / no hashes   | 26.204         |
| 110 apps / typical WiFi / no hashes | 26.223         |
| 110 apps / ideal 3G / all hashes    | 3.424          |
| 110 apps / typical 3G / all hashes  | 3.478          |
| 110 apps / ideal WiFi / all hashes  | 3.423          |
| 110 apps / typical WiFi / all hashes| 3.428          |
| 26 apps / ideal 3G / no hashes      | 1.034          |
| 26 apps / typical 3G / no hashes    | 1.258          |
| 26 apps / ideal WiFi / no hashes    | 1.032          |
| 26 apps / typical WiFi / no hashes  | 1.051          |
| 26 apps / ideal 3G / all hashes     | 0.285          |
| 26 apps / typical 3G / all hashes   | 0.339          |
| 26 apps / ideal WiFi / all hashes   | 0.285          |
| 26 apps / typical WiFi / all hashes | 0.290          |

### Upload Sizes for Manual Scanning

**Table 10** summarizes the total upload sizes used for calculations of manual scanning performance.

| Total Data Uploaded (MB) | Small Apps | Medium Apps | Large Apps |
|--------------------------|------------|-------------|------------|
| 10 Apps                  | 7.643      | 17.775      | 35.570     |
| 25 Apps                  | 19.108     | 44.438      | 88.925     |
| 50 Apps                  | 38.216     | 88.875      | 177.850    |

### Upload Times

**Table 11** shows the upload times for different network configurations.

| Network Configuration | Small Apps | Medium Apps | Large Apps |
|-----------------------|------------|-------------|------------|
| Ideal 3G              | 4.367      | 10.157      | 20.326     |
| Typical 3G            | 485.360    | 1128.781    | 2258.833   |
| Ideal WiFi             | 0.102      | 0.237       | 0.474      |
| Typical WiFi           | 41.111     | 95.609      | 191.326    |

### Scan Times

**Table 12** provides scan times for different numbers of apps with small, medium, and large sizes using conventional scanning engines (Kaspersky and VirusChief) and the Android-specific scanner, ComDroid.

| Scenario                           | Scan Time (Seconds) |
|------------------------------------|---------------------|
| Small Apps / Kaspersky             | 161.021             |
| Medium Apps / VirusChief           | 634.032             |
| Large Apps / VirusChief            | 1104.893            |
| Small Apps / ComDroid              | 107.224             |
| Medium Apps / ComDroid             | 120.919             |
| Large Apps / ComDroid              | 144.972             |

### Discussion

During long-term use of ThinAV, fingerprinting installed apps is the primary frequent operation. In the best case, the killswitch requires about 1 second of computation followed by less than 4 KB of data transmission for 110 installed apps, which is unnoticeable to users, especially on physical Android devices.

In terms of data consumption, 74 MB per month for 110 apps is significant, particularly for users with pay-as-you-go data plans. However, data consumption can be reduced by decreasing the frequency of the killswitch or by compressing the data for fingerprint submission and response retrieval.

### Limitations

Despite being in an early prototype form, ThinAV could be deployed as a free and lightweight anti-malware system. Some limitations include:
- **OS Modification**: The Package Installer is part of the core Android OS, so ThinAV cannot be installed as an application. The underlying OS must be replaced with a ThinAV-enabled version.
- **Test Environment**: All tests were performed on the Android emulator, which may not fully represent real-world performance. Future work will evaluate battery consumption.
- **Third-Party Scanning Services**: ThinAV relies on third-party scanning services, which may change terms of service or cease to exist. The modular design of ThinAV should help in replacing scanning modules without updating clients.

### Conclusions

Addressing malware on Android is challenging due to its multi-market app environment and the ability to side-load apps. ThinAV combines a lightweight footprint with the ability to leverage multiple existing anti-malware services, ensuring no personal or IP address data is leaked. Our experiments show that ThinAV is practical, especially if integrated into the Android app ecosystem and pre-loaded with scan results for popular apps.

### Acknowledgment

This work was supported in part by the Natural Sciences and Engineering Council of Canada via ISSNet, the Internetworked Systems Security Network.

### References

[1] D. Barrera, W. Enck, and P. C. van Oorschot. Meteor: Seeding a Security-Enhancing Infrastructure for Multi-market Application Ecosystems. In IEEE Mobile Security Technologies, 2012.
[2] J. Cheng, S. H. Wong, H. Yang, and S. Lu. Smartsiren: virus detection and alert for smartphones. In 5th International Conference on Mobile Systems, Applications and Services, pages 258–271, 2007.
[3] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In 9th International Conference on Mobile Systems, Applications, and Services, pages 239–252, 2011.
[4] M. Chiriac. Tales from cloud nine. In 19th Virus Bulletin International Conference, pages 83–88, 2009.
[5] B.-G. Chun and P. Maniatis. Augmented smartphone applications through clone cloud execution. In 12th Workshop on Hot Topics in Operating Systems, 2009.
[6] E. Cuervo, A. Balasubramanian, D.-k. Cho, A. Wolman, S. Saroiu, R. Chandra, and P. Bahl. MAUI: making smartphones last longer with code offload. In 8th International Conference on Mobile Systems, Applications, and Services, pages 49–62, 2010.
[7] B. Dixon and S. Mishra. On rootkit and malware detection in smartphones. In 2010 International Conference on Dependable Systems and Networks Workshops (DSN-W), pages 162–163, 2010.
[8] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In 16th ACM Conference on Computer and Communications Security, pages 235–245, 2009.
[9] A. P. Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner. A survey of mobile malware in the wild. In 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices, pages 3–14, 2011.
[10] R. Gass and C. Diot. An experimental performance comparison of 3G and Wi-Fi. In Passive and Active Measurement, volume 6032 of LNCS, pages 71–80, 2010.
[11] IEEE Computer Society. Wireless LAN medium access control (MAC) and physical layer specifications enhancements for higher throughput, Oct. 2009. IEEE Std 802.11n-2009.
[12] M. Jakobsson and K.-A. Johansson. Retroactive detection of malware with applications to mobile platforms. In USENIX HotSec, 2010.
[13] M. Jakobsson and A. Juels. Server-side detection of malware infection. In 2009 New Security Paradigms Workshop, pages 11–22, 2009.
[14] C. Jarabek. Towards cloud-based anti-malware protection for desktop and mobile platforms. Master’s thesis, University of Calgary, 2012.
[15] L. Liu, G. Yan, X. Zhang, and S. Chen. VirusMeter: Preventing your cellphone from spies. In Recent Advances in Intrusion Detection, volume 5758 of LNCS, pages 244–264, 2009.
[16] H. Lockheimer. Android and security. http://googlemobile.blogspot.com/2012/02/android-and-security.html, Feb. 2012.
[17] L. Martignoni, R. Paleari, and D. Bruschi. A framework for behavior-based malware analysis in the cloud. In Information Systems Security, volume 5905 of LNCS, pages 178–192, 2009.
[18] C. Nachenberg, Z. Ramzan, and V. Seshadri. Reputation: A new chapter in malware protection. In 19th Virus Bulletin International Conference, pages 185–191, 2009.
[19] J. Oberheide, E. Cooke, and F. Jahanian. Rethinking antivirus: executable analysis in the network cloud. In USENIX HotSec, 2007.
[20] J. Oberheide, E. Cooke, and F. Jahanian. CloudAV: N-version antivirus in the network cloud. In 17th USENIX Security Symposium, pages 91–106, 2008.
[21] J. Oberheide, K. Veeraraghavan, E. Cooke, J. Flinn, and F. Jahanian. Virtualized in-cloud security services for mobile devices. In 1st Workshop on Virtualization in Mobile Computing, pages 31–35, 2008.
[22] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos. Paranoid Android: versatile protection for smartphones. In 26th Annual Computer Security Applications Conference, pages 347–356, 2010.
[23] D. Rowinski. More than 50% of Android devices still running Froyo. ReadWrite Mobile, 6 September 2011. http://www.readwriteweb.com/mobile/2011/09/more-than-50-of-android-device.php.