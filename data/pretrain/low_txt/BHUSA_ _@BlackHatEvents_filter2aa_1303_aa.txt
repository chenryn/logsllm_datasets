# BHUSA @BlackHatEvents
## Google Reimagined a Phone. It’s Our Job to Red Team & Secure it

**Presenters:**
- Xuan Xing
- Eugene Rodionov
- Christopher Cole
- Farzan Karimi

# BHUSA @BlackHatEvents
**Information Classification: General**

## Agenda
1. **Who We Are**
2. **What’s Our Scope**
3. **How We Help Secure Android & Pixel**
4. **Pixel 6 Attack Surface**
5. **Proof of Concept Deep Dives**
   - Titan M2
   - Android Bootloader
6. **Concluding Thoughts**

**Note:** All issues discussed in this presentation have been fixed.

# BHUSA @BlackHatEvents
**Information Classification: General**

## Who We Are
### Mission
We are the eyes of Android Security, dedicated to enhancing the security of Pixel and Android by:
- Attacking key components and features to identify critical vulnerabilities before adversaries.
- Conducting offensive security reviews to verify (and break) security assumptions.
- Scaling through tool development, such as continuous fuzzing.
- Developing Proof of Concepts (PoCs) to demonstrate real-world impact.
- Assessing the efficacy of security mitigations.

**Android Red Team:**
- We hack ourselves to make it harder for others!

# BHUSA @BlackHatEvents
**Information Classification: General**

## What’s Our Scope?
Our scope includes:
- Robust Development Practices
- Compiler Mitigations
- New Platform Mitigations
- Vulnerability Reward Programs
- Hardware Architecture Reviews
- Threat Modeling
- Red Team
- External Security Reviews
- Community Involvement (You!)

# BHUSA @BlackHatEvents
**Information Classification: General**

## How Do We Secure Android & Pixel?
### Security Approaches
- **Fuzzing:**
  - Host-based Fuzzing
  - On-device Fuzzing
- **Static Analysis**
- **Dynamic Analysis (Services)**
- **Variant Analysis**
- **Formal Verification**
- **Manual Code Review**
- **Web/Mobile Network Security**
- **TitanM Security**

### Red Team Attack Approaches
- Comprehensive security assessments and penetration testing.

# BHUSA @BlackHatEvents
**Information Classification: General**

## Pixel Hardware Journey
### Evolution of Pixel Security
- **Pixel 1:** Reference device
- **Pixel 2:** Custom Camera chip
- **Pixel 3:** Custom Titan Security Chip
- **Pixel 4:** Custom Dedicated Hardware
- **Pixel 5:** Continued improvements
- **Pixel 6:** Security re-imagined with Google Tensor & Titan M2
  - **External Certification:** Common Criteria (CC) MDF

# BHUSA @BlackHatEvents
**Information Classification: General**

## Mobile Phone Vulnerability Trends
Vulnerabilities are increasingly targeting lower levels of the stack:
- **User Space**
- **Kernel**
- **Hardware (e.g., Modem, Baseband)**

*Pyramid represents vulnerability trend direction, not attack surface size.*

# BHUSA @BlackHatEvents
**Information Classification: General**

## Vulnerability Payouts
- **Android FCP Zero Click:** Up to $2.5 million

# BHUSA @BlackHatEvents
**Information Classification: General**

## Pixel Attack Surface
### Google Tensor SoC
- **Modem**
- **Titan M2**
- **Application Processor (AP)**
- **Google Tensor Security Core (TSC)**
- **Secure Kernel (TSC)**
- **Baseband Firmware**
- **Normal World (EL0, EL1)**
- **Secure World (S-EL0, S-EL1, S-EL3)**

### Updated and New Features in Pixel 6
- **Attack Surface Tested and Mitigated:**
  - **Android Bootloader (EL1)**
  - **Android GKI (EL1)**
  - **Android Apps & Services (EL0)**
  - **Trusty TAs (S-EL0)**
  - **Trusty Kernel (S-EL1)**
  - **LDFW (S-EL1)**
  - **EL3 Monitor (S-EL3)**
  - **Titan M2 Firmware**
  - **Baseband Firmware**

# BHUSA @BlackHatEvents
**Information Classification: General**

## Red Teaming Pixel 6
### Titan M2 Code Execution
#### Overview
- **Discrete Security Component:** Highest level of security assurances on the device, including resistance to physical attacks.
- **Critical Security Services:**
  - Hardware-based key storage
  - Android Verified Boot
  - Attestation services
- **Custom RISC-V Architecture**
- **Redesigned Operating System**

#### Results
- **Identified Issues:**
  - 21 security issues: 1 Critical, 14 Highs, 1 Moderate, 5 NSIs
  - **Reference:** "A Titan M Odyssey" by Maxime Rossi Bellom, Damiano Melotti, and Philippe Teuwen (2021)

### Titan M2 Attack Surface
- **Directly Exposed to the Attacker**
- **Not Directly Exposed to the Attacker**

### What Makes Titan M2 More Secure?
- **R^X Policy:** Code section is Read-Only; data and stack are Not Executable.
- **Isolation:** Each task is isolated from others.
- **ACL Implementation:** Syscall usage restricted on a task-based level.
- **Isolated Filesystem:** Each task has an isolated file system on the secure flash.

# BHUSA @BlackHatEvents
**Information Classification: General**

## Fuzzing Approaches
### Keymaster, Weaver, Runtime Service, AVB, User Mode, Machine Mode
- **Host-based Fuzzing:**
  - **Pros:**
    - Utilizes existing fuzzing tools for x86 architecture (ASan, libFuzzer, gdb).
    - Good fuzzing performance.
  - **Cons:**
    - False-positives.
    - Missing coverage.
- **Emulator-based Fuzzing:**
  - **Pros:**
    - Comprehensive coverage of the target.
    - Support for all peripherals.
    - No false-positives.
  - **Cons:**
    - Missing fuzzing code instrumentation (ASan, fuzzing code coverage).
    - Slow fuzzing performance.

### Fuzzing Outcomes
- **Performance & Coverage:**
  - **Emulator-based Fuzzer:** 5 test cases per second.
  - **Host-based Fuzzers:** ~200 times faster than emulator-based approach.
  - **Disjoint Set of Issues:** Host-based and emulator-based fuzzers discovered different issues.
- **Fuzzers Developed:**
  - libprotobuf-mutator host-based fuzzer.
  - ASN-parsing host-based fuzzer.
  - libprotobuf-mutator emulator-based fuzzer.
- **Challenges:**
  - Stateful code in tasks like Keymaster and Identity.
  - Difficult to reach certain states.
  - Hard to reproduce issues in persistent mode.
  - Obstacles for fuzzing Keymaster due to crypto code.

# BHUSA @BlackHatEvents
**Information Classification: General**

## OOB Write in Identity Task: Write-What-Where Primitive
### Global Variables of Identity Task
- `readerPublicKey`
- `readerPublicKeySize`
- `cbor.size`
- `cbor.bufferSize`

### Exploitation
- **Use the vulnerability to load `cbor.buffer` and `cbor.bufferSize` with attacker-controlled values.**
- **Invoke `eicCborAppendString` to write at `cbor.buffer` a number of `cbor.bufferSize` attacker-controlled bytes.**
- **Enables code execution in the Identity task only.**
  - **Task Isolation:** Cannot access other tasks’ memory.

### Achieving Code Execution in Identity Task
1. **Set Identity state #1**
2. **Set Identity state #2**
3. **ICinitializeRequest**
4. **Set Identity state #3**

**Identity Task:**
- Advance to the state for step #2.

This detailed and structured approach ensures that the presentation is clear, coherent, and professional.