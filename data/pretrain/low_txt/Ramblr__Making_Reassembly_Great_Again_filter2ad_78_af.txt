# Table V: Reassembling Binaries with Different Optimization Levels

Table V summarizes the successes and failures of reassembling binaries across six different optimization levels. The datasets used were the Coreutils binaries, compiled in 32-bit (due to limitations of the original Uroboros prototype), and the CGC binaries, which are all 32-bit. The column "Safety Opt-outs" represents the number of binaries for which the tool detected that functionality would be broken and opted out. "Generation Failures" refers to instances where the tool itself crashed during binary generation, and "Test Failures" indicates the number of reassembled binaries that failed functionality testing.

| Binary         | Opt. Level | Size       | Code Size  | Time   | Time (Fast) |
|----------------|------------|------------|------------|--------|-------------|
| CROMU 00043    | Os         | 93 KB      | 7.6 KB     | 35s    | 4s          |
| NRFIN 00004    | Os         | 344 KB     | 223 KB     | 37s    | 20s         |
| EAGLE 00005    | Os         | 5,408 KB   | 9.4 KB     | 75s    | 20s         |
| NRFIN 00007    | O3         | 233 KB     | 10 KB      | 73s    | 35s         |
| KPRCA 00007    | Os         | 91 KB      | 7.5 KB     | 93s    | 70s         |
| NRFIN 00026    | O0         | 10,768 KB  | 10,600 KB  | 525s   | 410s        |

# Table VI: Comparison of Analysis Runtimes

Table VI compares the analysis runtimes of Ramblr and Ramblr Fast on some binaries in the CGC dataset. Ramblr Fast trades functionality guarantees for improved speed in the reassembling process. For most binaries, this trade-off is irrelevant. The median runtime of Ramblr Fast in the CGC dataset is 2.8 seconds, compared to 3.0 seconds for Ramblr. However, Ramblr Fast scales better for large binaries.

| Binary         | Opt. Level | Size       | Code Size  | Time   | Time (Fast) |
|----------------|------------|------------|------------|--------|-------------|
| CROMU 00043    | Os         | 93 KB      | 7.6 KB     | 35s    | 4s          |
| NRFIN 00004    | Os         | 344 KB     | 223 KB     | 37s    | 20s         |
| EAGLE 00005    | Os         | 5,408 KB   | 9.4 KB     | 75s    | 20s         |
| NRFIN 00007    | O3         | 233 KB     | 10 KB      | 73s    | 35s         |
| KPRCA 00007    | Os         | 91 KB      | 7.5 KB     | 93s    | 70s         |
| NRFIN 00026    | O0         | 10,768 KB  | 10,600 KB  | 525s   | 410s        |

## Ramblr Runtime

Ramblr Fast prioritizes speed over functionality guarantees. For most binaries, this trade-off is insignificant. The median runtime of Ramblr Fast in the CGC dataset is 2.8 seconds, compared to 3.0 seconds for Ramblr. However, Ramblr Fast performs significantly better for large binaries. In Table VI, we compare the relative runtime of Ramblr versus Ramblr Fast for the largest CGC binaries in our dataset. Our fast workarounds significantly decrease runtime in all cases. It is important to note that runtime is not solely dependent on binary size but also on the amount of code that must be analyzed during the data classification and symbolization steps of the systematic Ramblr approach.

## Execution Overhead and Binary Size

We evaluated the binaries produced by Ramblr and found no execution overhead. For most purposes, the reassembled binaries are perfect replacements for the originals. Similarly, Uroboros introduced a small increase in size for their Coreutils dataset. Since unimportant sections (like `.comment`) are removed by Ramblr during reassembly, our binaries are usually smaller than the originals. Compensating for this removal, the resulting size is practically identical.

## Discussion

While our approach improves the feasibility of real-world binary reassembly, it is far from solving the general issue. To focus the community's attention on potential future work in this field, we detail what we believe are the biggest limitations of our technique.

### Infeasibility of Static Content Classification
We acknowledge, as Horspool et al. maintained, that static content classification is infeasible. Our reassembling approach is an empirical solution that works on many binaries whose integer distributions roughly follow the pattern presented in Section VII. An easy way to counteract reassembly is to base the binary at a different address during linking, causing immediate values in the memory region to collide with normal immediate values. In such cases, our approach will likely fail and produce broken binaries.

### CFG Recovery Performance
The performance of control flow graph (CFG) recovery may vary depending on the features of the binaries. Our CFG recovery technique works well on tested Linux binaries compiled with GCC or Clang, which do not generate inline data. Some compilers, like MSVC, place inline data into executable regions of binaries, notably jump tables. While we believe our CFG recovery and disassembly technique will work on such binaries with the help of content classification, more work is needed in that direction.

## Conclusion

We presented Ramblr, a tool for the disassembly, modification, and reassembly of binaries. Our approach extends previous methods, making it possible to apply static binary modifications to real-world binaries, even when compiler optimizations are used. Ramblr uses a novel combination of static analyses to characterize data contained in a binary, allowing for improved symbolization. The reassembly process introduces no execution overhead in the resulting binary. The ability to modify binaries without affecting their performance opens up a range of applications, from efficient instrumentation to binary hardening.

## Acknowledgements

We thank all contributors to the DARPA Cyber Grand Challenge organization for providing an excellent testing dataset for Ramblr, the contributors of angr, and all our fellow Shellphish CGC team members. This material is based on research sponsored by the Office of Naval Research under grant number N00014-15-1-2948 and by DARPA under agreement number N66001-13-2-4039. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. This work is also sponsored by a gift from Google’s Anti-Abuse group.

The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

## References

[1] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos, “An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries,” in 25th USENIX Security Symposium (USENIX Security ’16). Austin, TX: USENIX Association, 2016, pp. 583–600.
[2] G. Balakrishnan and T. Reps, “Analyzing Memory Accesses in x86 Executables,” in International Conference on Compiler Construction, 2004, pp. 5–23.
[3] A. R. Bernat and B. P. Miller, “Anywhere, Any-Time Binary Instrumentation,” in Proceedings of the 10th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools (PASTE ’11), 2011, pp. 9–16.
[4] D. L. Bruening, “Efficient, Transparent, and Comprehensive Runtime Code Manipulation,” Ph.D. dissertation, Massachusetts Institute of Technology, 2004.
[5] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A Binary Analysis Platform,” in International Conference on Computer Aided Verification, vol. 6806 LNCS. Springer, 2011, pp. 463–469.
[6] Cryptic Apps, “Hopper,” https://www.hopperapp.com/.
[7] B. De Sutter, B. De Bus, K. De Bosschere, P. Keyngnaert, and B. Demoen, “On the Static Analysis of Indirect Control Flow Transfers in Binaries,” in Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Application, 2000, pp. 1013–1019.
[8] M. Egele, M. Woo, and D. Brumley, “Blanket Execution: Dynamic Similarity Testing for Program Binaries and Components,” in 23rd USENIX Security Symposium (USENIX Security ’14). San Diego, CA: USENIX Association, 2014, pp. 303–317.
[9] GCC, “GCC 5 Release Notes,” https://gcc.gnu.org/gcc-5/changes.html.
[10] L. C. Harris and B. P. Miller, “Practical Analysis of Stripped Binary Code,” ACM SIGARCH Computer Architecture News, vol. 33, no. 5, pp. 63–68, 2005.
[11] R. N. Horspool and N. Marovac, “An Approach to the Problem of Detranslation of Computer Programs,” Computer Journal, vol. 23, no. 3, pp. 223–229, 1980.
[12] J. Kinder, “Static Analysis of x86 Executables,” Ph.D. dissertation, 2010.
[13] N. Nethercote and J. Seward, “Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation,” in Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’07), 2007, p. 89.
[14] P. O’Sullivan, K. Anand, A. Kotha, M. Smithson, R. Barua, and A. D. Keromytis, “Retrofitting Security in COTS Software with Binary Rewriting,” IFIP Advances in Information and Communication Technology, vol. 354, pp. 154–172, 2011.
[15] R. Paleari, L. Martignoni, G. Fresi Roglia, and D. Bruschi, “N-Version Disassembly: Differential Testing of x86 Disassemblers,” in Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA ’10), 2010, p. 265.
[16] pancake, “radare,” http://www.radare.org/r/.
[17] N. A. Quynh. (2016) The Ultimate Disassembly Framework Capstone. [Online]. Available: http://capstone-engine.org
[18] T. Reps and G. Balakrishnan, “Improved Memory-Access Analysis for x86 Executables,” International Conference on Compiler Construction, vol. 4959 LNCS, no. i, pp. 16–35, 2008.
[19] s3team. (2015) s3team/uroboros: Infrastructure for Reassembleable Disassembling and Transformation (v 0.1). [Online]. Available: https://github.com/s3team/uroboros
[20] Shellphish, “DARPA CGC,” http://shellphish.net/cgc/.
[21] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna, “(State of) The Art of War: Offensive Techniques in Binary Analysis,” in Proceedings of the IEEE Security and Privacy, 2016, pp. 138–157.
[22] M. Smithson, K. Elwazeer, K. Anand, A. Kotha, and R. Barua, “Static Binary Rewriting without Supplemental Information: Overcoming the Tradeoff between Coverage and Correctness,” in Proceedings - 20th Working Conference on Reverse Engineering (WCRE 2013), R. Lämmel, R. Oliveto, and R. Robbes, Eds. Koblenz, Germany: IEEE, 2013, pp. 52–61.
[23] Vector 35, “binary.ninja : a reversing engineering platform,” https://binary.ninja/.
[24] M. Wang, H. Yin, A. V. Bhaskar, P. Su, and D. Feng, “Binary Code Continent: Finer-Grained Control Flow Integrity for Stripped Binaries,” in Proceedings of 2015 Annual Computer Security Applications Conference (ACSAC ’15), 2015, pp. 331–340.
[25] S. Wang, P. Wang, and D. Wu, “Reassembleable Disassembling,” in 24th USENIX Security Symposium (USENIX Security ’15). USENIX Association, 2015, pp. 627–642.
[26] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Securing Untrusted Code via Compiler-Agnostic Binary Rewriting,” in Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC ’12), 2012, p. 299.
[27] R. Wartell, V. Mohan, K. W. Hamlen, Z. Lin, and W. C. Rd, “Binary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary Code,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS ’12), 2012, pp. 157–168.
[28] J. Zeng, Y. Fu, K. a. Miller, Z. Lin, X. Zhang, and D. Xu, “Obfuscation Resilient Binary Code Reuse through Trace-oriented Programming,” in Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (CCS ’13), 2013, pp. 487–498.
[29] M. Zhang and R. Sekar, “Control Flow Integrity for COTS Binaries,” in Proceedings of the 22nd USENIX Conference on Security (USENIX Security ’13), 2013, pp. 337–352.