### 7.2 Possible Evasion Attacks

**Anti-Debugging:**
Anti-debugging is a common technique used by malware to evade detection [23, 57, 69]. The primary methods include "logic bombs" and "time bombs," which activate the obfuscated scripts only under specific conditions. More advanced methods may use machine-specific values or online values that can only be acquired at specific times as decryption keys, ensuring that the scripts are only recoverable on particular machines or at specific moments. These techniques are effective against both dynamic and static offline analysis approaches. For the primary methods, static approaches, including our method, can achieve better results than dynamic ones by traversing all possible branches. However, for the more advanced methods, the only way to capture script behavior is during the actual attack, making our approach ineffective in these cases. Advanced anti-debugging methods significantly increase the cost of the attack, making them more likely to be used against high-value targets. For such high-value targets, it is essential to apply stricter execution strategies and conduct early script reviews.

**Logical Obfuscation:**
In this paper, we primarily focus on string-based obfuscation (as listed in §2), which treats scripts or script fragments as strings and obfuscates them. Logical obfuscation, on the other hand, targets the disruption of control and data flows. The recovery of logical obfuscation is orthogonal to string-based obfuscation [61] and is not covered in this paper. Recovering control and data flows through static analysis alone is challenging [25, 67]. However, since PowerShell functions and commands contain sufficient semantic information for detection or analysis, logical obfuscation alone is unlikely to evade our detection system.

### 8. Related Work

**8.1 Script-Based Malware Detection**

As shown in Table 9, malware detection methods for scripting languages can be categorized into three main types:

- **Dynamic Detection:**
  Cova et al. present JSAND [25], a system where suspicious scripts are further analyzed using an emulator to collect runtime characteristics. Rieck et al. [51] describe Cujo, which combines static and dynamic features in a classifier based on support vector machines and extracts Q-grams of tokens as signatures. The common disadvantage of dynamic methods is their additional runtime overhead, making them inefficient.

- **Static Detection:**
  Canali et al. [20] introduce Prophiler, which uses multi-layer features to quickly filter non-malicious web pages. Curtsinger et al. propose ZOZZLE [26], a mostly static approach that leverages abstract syntax trees (AST) for fast signature matching. Similar approaches are also employed in PowerShell detection. [32] uses deep learning at the character level for malicious classification, while [53] extracts features from ASTs. These studies are not resistant to obfuscation, leading to lower accuracy. Our automatic deobfuscation approach can potentially enhance the accuracy of these techniques by exposing the actual logic of the code.

- **Obfuscation Detection:**
  To counteract the effects of obfuscation, researchers have proposed detecting obfuscation instead of directly detecting malicious scripts. [14, 35, 38] extract features at different levels for obfuscation detection in JavaScript. The closest work is by Bohannon [17], who extracted 4098 features for PowerShell obfuscation detection. However, these approaches assume that all obfuscated scripts are malicious, leading to a high number of false positives. Additionally, these methods focus on detecting obfuscation in entire scripts, which can be bypassed by partial obfuscation.

**8.2 Deobfuscation Approaches**

- **Deobfuscation for Binaries:**
  Obfuscation techniques, particularly run-time packers, have been widely used by malware authors to evade static detection. The security community has proposed various solutions to detect and classify packing techniques. Signature-based approaches [46, 58] search for unique patterns of known packers in executable files but fail to detect new packers. To address unknown packers, researchers [34, 47, 49, 62, 63] employ multiple features for obfuscation detection. We use a similar method to locate obfuscation at the AST subtree level, providing a fine-grained and flexible system.

  Automatic unpacking relies on the observation that hidden code is naturally revealed and executed in most packed malware. Different approaches determine the right moment to dump the hidden code [61]. These dynamic approaches [27, 37, 44, 52] monitor binary execution but suffer from high overhead and low program coverage. Some static and hybrid approaches have also been proposed. Coogan et al. [23] suggest locating transition points with control flow and alias analysis and extracting unpacking logic with backward slicing. Caballero et al. [19] propose a hybrid approach to extract self-contained transformation functions. Due to the different language characteristics, we employ divergent heuristics and statistical methods, such as subtree-based obfuscation detection and unique feature selection (§4.3).

  Other approaches [24, 56, 67] focus on simplifying logical structures like data and control flows. However, logical obfuscation is rare in PowerShell because it is not effective for evading detection.

- **Deobfuscation for Scripts:**
  Recently, several deobfuscation approaches for script-based languages have been proposed. Liu et al. [41] present PSDEM, a mostly manual approach for PowerShell deobfuscation, analyzing common obfuscation techniques and writing detection and deobfuscation tools. Our approach is more accurate and automated, as shown in §6.2.1. Abdelkhalek [13] proposes JSDES, a hybrid approach that identifies suspected functions involved in obfuscation and then deobfuscates them. However, obfuscation does not always involve functions and cannot cover obfuscation using basic operations. Lu et al. [42] present a semantics-based approach that uses dynamic analysis and program slicing to simplify obfuscation. The common problem with dynamic approaches is low code coverage. Our approach is generally faster, as it only needs to execute the deobfuscation part of the script, which is primarily string operations.

### 9. Conclusion

In this paper, we design the first effective and lightweight deobfuscation approach for PowerShell scripts. To address the key challenge of precisely identifying recoverable script pieces, we develop a novel subtree-based deobfuscation method that performs obfuscation detection and emulation-based recovery at the subtree level. Building on this new deobfuscation method, we further design the first semantic-aware PowerShell attack detection system with 31 newly-identified OOA rules. Based on a collection of 6,483 PowerShell script samples, our deobfuscation method is shown to be both efficient and effective. With our deobfuscation applied, the attack detection rates for Windows Defender and VirusTotal increase substantially from 0.3% and 2.65% to 75.0% and 90.0%, respectively. Our semantic-aware attack detection system outperforms both Windows Defender and VirusTotal, achieving a 92.3% true positive rate and a 0% false-positive rate on average.

### Acknowledgments

We would like to thank the anonymous reviewers for their valuable feedback on our work. This research is supported by the Key Research and Development Program of Zhejiang Province (2018C01088).

### References

[1] 2018. Empire is a PowerShell and Python post-exploitation agent.: EmpireProject/Empire. https://github.com/EmpireProject/Empire, original-date: 2015-08-05T18:25:57Z.
[2] 2018. Free Automated Malware Analysis Service - powered by Falcon Sandbox - Viewing online file analysis results for '50e8e369b6be8077fd8b53c6dbfe3814.doc'. Retrieved March 13, 2019 from https://www.hybrid-analysis.com/sample/4b4b8b13c264c8f7d7034060e0e4818a573bebc576a94d7b13b4c1741591687f?environmentId=100
[3] 2018. Technique: PowerShell - MITRE ATT&CK. Retrieved May 10, 2019 from https://attack.mitre.org/techniques/T1086/
[4] 2018. TIOBE Index | TIOBE - The Software Quality Company. Retrieved May 10, 2019 from https://www.tiobe.com/tiobe-index/
[5] 2019. GitHub. Retrieved September 20, 2019 from https://github.com/li-zhenyuan/PowerShellDeobfuscation
[6] 2019. A collection of malware samples and relevant dissection information. Retrieved August 10, 2019 from https://github.com/InQuest/malware-samples/tree/master/2019-03-PowerShell-Obfuscation-Encryption-Steganography
[7] 2019. GitHub. Retrieved May 10, 2019 from https://github.com/search?q=powershell
[8] 2019. Malware Sandbox & Automated Analysis - Falcon Sandbox | CrowdStrike. Retrieved May 10, 2019 from https://www.crowdstrike.com/endpoint-security-products/falcon-sandbox-malware-analysis/
[9] 2019. PowerSploit: A PowerShell Post-Exploitation Framework - PowerShellMafia/PowerSploit. https://github.com/PowerShellMafia/PowerSploit, original-date: 2012-05-26T16:08:48Z.
[10] 2019. Submit a file for malware analysis - Microsoft Security Intelligence. Retrieved May 10, 2019 from https://www.microsoft.com/en-us/wdsi/filesubmission
[11] 2019. VirusTotal. Retrieved May 10, 2019 from https://www.virustotal.com/#/
[12] 2019. Web Scraper. Retrieved May 10, 2019 from https://www.webscraper.io/
[13] Moataz AbdelKhalek and Ahmed Shosha. 2017. JSDES: An Automated De-Obfuscation System for Malicious JavaScript. In Proceedings of the 12th International Conference on Availability, Reliability and Security - ARES '17. ACM Press, Reggio Calabria, Italy, 1–13. https://doi.org/10.1145/3098954.3107009
[14] Simon Aebersold, Krzysztof Kryszczuk, Sergio Paganoni, Bernhard Tellenbach, and Timothy Trowbridge. 2016. Detecting obfuscated JavaScripts using machine learning. In ICIMP 2016 the Eleventh International Conference on Internet Monitoring and Protection, Valencia, May 22-26, 2016, Vol. 1. Curran Associates, 11–17.
[15] Daniel Bohannon. 2017. AbstractSyntaxTree-Based PowerShell Obfuscation - cobbr.io. Retrieved April 2, 2019 from https://cobbr.io/AbstractSyntaxTree-Based-PowerShell-Obfuscation.html
[16] Daniel Bohannon. 2017. ObfuscatedEmpire - Use an obfuscated, in-memory PowerShell C2 channel to evade AV signatures - cobbr.io. Retrieved May 10, 2019 from https://cobbr.io/ObfuscatedEmpire.html
[17] Daniel Bohannon. 2019. PowerShell Obfuscation Detection Framework. Contribute to danielbohannon/Revoke-Obfuscation development by creating an account on GitHub. https://github.com/danielbohannon/Revoke-Obfuscation, original-date: 2017-07-11T01:20:48Z.
[18] Christian Borgelt. 2005. An Implementation of the FP-growth Algorithm. In Proceedings of the 1st international workshop on open source data mining: frequent pattern mining implementations. ACM, 1–5.
[19] Juan Caballero, Noah M Johnson, Stephen McCamant, and Dawn Song. 2009. Binary code extraction and interface identification for security applications. Technical Report. CALIFORNIA UNIV BERKELEY DEPT OF ELECTRICAL ENGINEERING AND COMPUTER SCIENCE.
[20] Davide Canali, Marco Cova, Giovanni Vigna, and Christopher Kruegel. 2011. Prophiler: a fast filter for the large-scale detection of malicious web pages. In Proceedings of the 20th international conference on World wide web. ACM, 197–206.
[21] Wueest Candid. 2016. The Increased Use of PowerShell in Attacks. Retrieved May 10, 2019 from https://www.symantec.com/content/dam/symantec/docs/security-