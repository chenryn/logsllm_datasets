### Neighborhood of the Node and LQSR Link Information

LQSR (Link Quality Source Routing) piggybacks Link Info messages on all Route Requests whenever possible. The link metric support also influences Route Maintenance. When Route Maintenance detects that a link is not functional (due to a missing Acknowledgment), it penalizes the link’s metric and sends a Route Error. This Route Error carries the updated link metric back to the packet's source.

### Implementation Details

Our LQSR implementation includes the standard DSR (Dynamic Source Routing) conceptual data structures, such as:
- **Send Buffer**: For buffering packets during Route Discovery.
- **Maintenance Buffer**: For buffering packets during Route Maintenance.
- **Route Request Table**: To suppress duplicate Route Requests.

In our environment, some optimizations in Route Discovery are not necessary. In practice, Route Discovery is rarely required in our testbed, so we have not optimized it. Specifically:
- LQSR nodes do not reply to Route Requests from their link cache; only the target node sends a Route Reply.
- Nodes do not send Route Requests with a hop limit to restrict propagation; instead, Route Requests flood the ad hoc network.
- Nodes cache information from overheard Route Requests.

### Route Maintenance and Acknowledgments

Due to the lack of promiscuous mode and transmission success indication in Windows 802.11 drivers, our Route Maintenance uses explicit acknowledgments. Each source-routed packet carries an Ack Request option, and a node expects an Ack from the next hop within 500ms. Ack options are delayed briefly (up to 80ms) to be piggybacked on other packets flowing in the reverse direction. Later Acks replace earlier Acks waiting for transmission, minimizing overhead.

### Additional Optimizations

The LQSR implementation omits some optimizations:
- **Automatic Route Shortening** is not implemented due to the lack of promiscuous mode.
- **Increased Spreading of Route Error Messages** is not implemented, as LQSR does not reply to Route Requests from possibly stale cached data.
- When a broken link is detected, LQSR does not remove other packets from the transmit queue, as Windows drivers do not provide access to the transmit queue. However, LQSR nodes learn from forwarded Route Error messages.

### Packet Salvaging

LQSR supports a form of DSR’s “Packet Salvaging” or retransmission. Salvaging allows a node to try a different route if the next hop is not reachable. The acknowledgment mechanism is designed primarily to detect link failures, so not every packet can be salvaged. If a link has been confirmed to be functional within the last 250ms, we request an Ack but do not buffer the packet for salvaging. This design allows for salvaging initial packets in new connections and infrequent connection-less communications, while relying on transport-layer retransmission for active connections.

### Future Enhancements

We have not yet implemented the DSR “Flow State” optimization, which uses soft-state to replace a full source route with a small flow identifier. We intend to implement this in the future. Our Link Cache implementation does not use the Link-MaxLife algorithm, as it caused excessive churn in the link cache. Instead, we use an infinite metric value to denote broken links and garbage-collect dead links after a day.

### Testbed Description

Our experimental data comes from a 23-node wireless testbed located on one floor of a typical office building. The nodes are placed in offices, conference rooms, and labs, with floor-to-ceiling walls and solid wood doors. The node density is high to enable various multi-hop path choices. The nodes are primarily laptop PCs with Intel Pentium II processors, running Microsoft Windows XP. Each node has an 802.11a PCCARD radio, configured in ad hoc mode on channel 36 (5.18 GHz).

### Results

#### LQSR Overhead

LQSR incurs overhead in the form of routing updates, additional packet headers, and cryptographic operations. We conducted experiments to measure this overhead using four laptops equipped with Proxim ORiNOCO cards. The results show that LQSR's overhead is most significant on 1-hop paths, reducing throughput by over 38% compared to static IP routing. Disabling cryptography reduces this overhead to 13%, indicating that the CPU is the bottleneck. The overhead decreases with path length due to channel contention becoming the dominant factor.

#### Link Variability

We characterized the variability of link quality in our testbed by collecting bandwidth samples every 2 seconds on each link. The results show that certain links have stable bandwidths, while others are more variable. We also observed that forward and reverse link bandwidths can differ significantly, with 47 node pairs showing differences of more than 25%.

#### Impact on Long-Lived TCP Flows

We evaluated the impact of routing metrics on long-lived TCP connections. Our experiments involved 506 TCP transfers between unique sender-destination pairs, each lasting 3 minutes. The median throughput using the HOP metric was 1100 Kbps, while the ETX metric improved this to 1357 Kbps, representing a 23.1% improvement. This contrasts with previous DSR experiments, which saw little improvement with ETX, likely due to differences in testbed conditions and traffic types.

### Conclusion

Our LQSR implementation provides a robust and efficient solution for ad hoc networks, with optimizations tailored to our specific environment. The results highlight the importance of link quality metrics and the need for further enhancements to improve performance.