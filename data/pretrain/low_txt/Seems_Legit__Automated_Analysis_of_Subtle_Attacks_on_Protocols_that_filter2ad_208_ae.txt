### 5 Further Case Studies

In this section, we demonstrate the effectiveness of our approach by applying it to more complex case studies. We have automatically identified three attacks on different real-world protocols, two of which are novel and previously unreported. All three protocols had been previously analyzed using traditional models of digital signatures and were reported to be secure:

1. A known attack on an earlier version of the Let’s Encrypt certificate issuance protocol, arising from a key substitution property.
2. A previously unreported attack on a WS-Security Handshake, also due to a key substitution property. This attack was missed despite being analyzed using ProVerif in two separate papers.
3. A previously unreported attack on DRKey, a key exchange protocol, stemming from a weak signature property. This attack was not detected in a previous formal analysis and allows us to violate the security claims of OPT, an origin and path tracing protocol that uses DRKey.

#### 5.1 Let’s Encrypt

Let’s Encrypt (LE) is the world's most popular Certificate Authority (CA). It uses the ACME protocol for automated certificate issuance, renewal, and revocation, as standardized by the Internet Engineering Task Force (IETF) [11]. The ACME protocol allows a website owner to prove domain ownership and request a certificate from a CA via a choice of signature-based challenge-response mechanisms. If the protocol succeeds, LE issues a certificate to the owner.

ACME went through several drafts before and after its release. Draft Barnes 01 [3] was the first version to include DNS challenges, completed by placing a nonce in a DNS record. The DNS challenge mechanism was updated in Draft Barnes 03 [4] to use a signature over the nonce with the account holder’s public key. Draft Barnes 04 [5], a minor refinement of 03, was adopted by the ACME working group as IETF Draft 00 [7]. Six weeks before LE was loaded into major browsers' certificate stores, a signature key substitution attack was discovered and reported [6] to the IETF ACME mailing list. (IETF ACME Draft 00 is also known as Barnes Draft 04.) This attack allowed an active attacker to pass the ACME challenge and receive a valid TLS certificate for any website using LE DNS Challenges, enabling them to intercept and modify the website’s TLS traffic. In response, the DNS Challenge was updated to use a hash of the account public key and the nonce (known as a key thumbprint) in IETF Draft 02 [8]. This mechanism remains in use today [11].

The attack stems from Draft 00’s use of a DNS-based signature challenge, as shown in Figure 7a: the website owner requests a random nonce from LE, signs the nonce with a key to be used in the new certificate, and places the signature in a DNS record for the domain. LE then extracts and verifies the signature from the website’s DNS records, concluding that the owner controls both the claimed private key and the DNS records for that website. Based on this, it issues a certificate for the corresponding public key.

In the attack, depicted in Figure 7b, suppose Alex has completed a LE ACME challenge as normal and placed the signature in their DNS records. The adversary can initiate a new instance of the challenge-response protocol with the CA, claiming ownership of Alex’s website and receiving a token to sign and display in Alex’s DNS records. The adversary then performs a key substitution (no-DEO) attack on Alex’s signature and the new token value (and updates their account key accordingly). Afterward, they trigger the second phase of the protocol by sending the Ready message. LE retrieves Alex’s signature and verifies it against the adversary’s malicious public key. This succeeds, and LE will issue the adversary a certificate for Alex’s website and the adversary’s public key.

**Figure 7: ACME Draft 00 Let’s Encrypt DNS Challenge Response Protocol.**
- **(a) Normal Operation of the ACME Draft 00 Protocol**
- **(b) Attack on the ACME Draft 00 Protocol**

**5.1.1 Analysis of ACME**

We developed a Tamarin model of the vulnerable draft of the ACME certificate issuance protocol. Using our model from §4, we automatically found the reported attack. We confirmed that using the traditional symbolic model of signatures, Tamarin successfully verifies ACME but misses this attack without our improvements. We also provided a Tamarin model corresponding to IETF ACME Draft 02 [8], the patched version of ACME. Although the IETF could have chosen to use a signature scheme that provides DEO, they opted for a safer approach by replacing the signed value with a hash of the account public key and the token. Using our SVS model, Tamarin verifies that the attack is no longer possible. These results are summarized in Table 4.

This example illustrates the complementary uses of SVS and our attack-finding models, such as ‘no-DEO’. While SVS reports an attack, the attack trace does not exactly match the one reported on the mailing list [6]; instead, the trace allows an adversary to pass the verification directly, as this possibility is not excluded by the EUF-CMA definition. By using our ‘no-DEO’ equation from §3, Tamarin recovers the exact attack trace from the initial report, demonstrating the utility of our two-pronged approach.

Previously, Bhargavan et al. [34] presented a symbolic model of Draft Barnes 01 [3] (referred to as ACME Draft 1) and IETF Draft 00 [7] (referred to as ACME Draft 4) using ProVerif. Due to the traditional symbolic signature model, their analysis missed this attack. In fact, their analysis concluded that the (vulnerable) Draft IETF 00 satisfied stronger security properties than the earlier (secure) Draft Barnes 01, which contradicts our findings.

#### 5.2 WS-Security

In 2004, the OASIS Consortium published the Web Services Security Standard [1], defining a suite of protocols for securing XML web requests and responses without requiring TLS (which was not yet widely deployed). This standard enjoyed considerable popularity until it was overtaken by SAML and later TLS-based solutions. However, it is still in use and supported by many enterprise frameworks, such as gSOAP [15], Apache CXF [13], IBM Websphere [19], and Microsoft’s WCF [18].

In addition to implementation flaws primarily due to the complexities of XML parsing and canonicalization [20], the standard's complexity and popularity made it of significant interest to the automated verification community [24, 33, 35–37], leading to the creation of verified cross-compilers that could accept a protocol specification from the standard and produce both an automated proof of security using ProVerif and an executable implementation in F# [37].

The 1.0 standard published in 2004 was superseded by the 1.1 standard released in 2006 [1]. One of the motivations for the updated standard was the introduction of Signature Confirmation, a mechanism for correlating requests and responses to prevent adversarial manipulation [33]. The principal idea of Signature Confirmation is that after receiving a signed request, the responder’s signature should also cover the signature from the request.

Although the standard only defined methods for specifying particular message formats and how to parse them, it also provided several example handshakes and scenarios. One such scenario, WSS1.1-MA-X509-SE [21], is depicted in Figure 8a. It supports a request-response framework where each party holds an X.509 certificate and corresponding private key, providing mutual authentication and securely binding requests and responses using signature confirmation. This scenario is the default setting in IBM’s Websphere Platform [19] and is documented as the default in the Spring Framework [12], Windows Communication Foundation [9], Oracle’s Fusion Middleware [2], and Apache CXF [10].

In 2006, a team at Microsoft Research verified the design of this protocol and the benefits of signature confirmation using ProVerif [35]. They proved the secrecy of requests and responses and the ‘request correlation’ property, ensuring that every accepted response matched the intended request. This analysis was followed up in [37], where it was dubbed ‘WS Request-Response’, and the authors presented a tool for extracting ProVerif models of the protocol from F# implementations.

Using our new model for signature verification, we revisit this protocol in Tamarin. We automatically discover several attacks, the most severe of which uses the no-CEO property to ‘steal’ a client’s request, as depicted in Figure 8b. This attack not only violates the request correlation property that signature confirmation was introduced to ensure but also allows the attacker to learn the contents of the response to the honest request, violating the secrecy requirement.

This would be particularly damaging if the request contained login credentials and the response a cookie or other secret authentication response. The previous analyses in ProVerif could not have discovered this attack because they used the traditional symbolic model of signatures, which does not consider these types of attacks.

We emphasize that while we demonstrate our attack on this particular protocol, it is the very mechanism of signature confirmation that is flawed. Signing a signature does not necessarily create a unique binding to the contents or public key of the signed signature. Instead, it is better practice to directly sign the original message and original public key. Using our SVS model, we verify that this proposal fixes the security issues in the original protocol.

**Figure 8: The WSS1.1-MA-X509-SE protocol from [21] and the attack we automatically discovered.**
- **(a) Normal Protocol Flow.** T is a timestamp used to prevent replay attacks, RQ is the request payload, and RE is the response payload.
- **(b) This attack violates request correlation and response secrecy.** The Attacker passes off the Initiator’s request as their own by replacing the certificate, can then learn the response, and can even pass it back to the Initiator. Note that the responder does check the match of signature σ1 and certificate certa, but is fooled due to no-CEO.

#### 5.3 DRKey and OPT

The “Dynamically Recreatable Key” Protocol (DRKey) was first published in 2014 [64] and supported by a mechanized proof performed using Coq [74]. It is a lightweight key exchange protocol for routers on a packet-switched network to agree on symmetric keys, used as part of a secure routing architecture.

At a high level, DRKey participants generate directional symmetric secret keys, one for use with each other participant. They send both a public-key encryption and signature of the key to the recipient, thereby securely transporting and authenticating the keys to other participants. These keys are then used as part of a higher-level protocol called “Origin and Path Trace” (OPT) [64]. OPT aims to prevent malicious routers from altering the paths of packets through a wider network, using the keys generated by DRKey to authenticate each link in turn. One of OPT’s security goals is that malicious routers should only be able to affect routes to their immediate neighbors:

“When there are multiple adjacent malicious nodes on the intended path, a wormhole is present: an honest node down the path can only conclude that the packet has entered the hole via the first malicious node and exited from the last malicious node.”

Zhang et al. [74, Section 6.2] present a formal analysis and claim that this non-collusion property holds. We automatically find a previously unreported attack on this property with Tamarin. We also show that using the traditional model of digital signatures leads to a successful Tamarin verification that misses our attack.

We describe the attack using an example topology, where S and D are an honest source and destination, H1 and H2 are honest routers, and M1, M2, and M3 are malicious routers. S wishes to send a packet to D along the intended upper path shown in black. H2 is an honest router, not on the intended path; the malicious routers collude to route the packet through H2 on the lower path (in red) while S and D believe that it took its intended route via M2. This violates the security requirement, which requires that the packets travel the edge H1 → M2, whereas due to our attack, they will instead transit H1 → H2.

**Table 4: Summary of Attacks Found Using New Signature Models**

| Protocol | Previous Traditional Verification | Ref | Year | Methodology | Attacks Found in This Work | Properties Violated |
|----------|----------------------------------|-----|------|-------------|-----------------------------|---------------------|
| Let’s Encrypt | Tamarin, ProVerif | [34] | 2019 | Symbolic Model | Key Substitution (no-DEO) | Domain Validation |
| WS-Security | ProVerif | [35, 37] | 2006, 2017 | Symbolic Model | No-CEO | Request Correlation, Secrecy |
| DRKey and OPT | Coq | [74] | 2014 | Mechanized Proof | Non-Collusion Property | Path Integrity |

This table summarizes the protocols, their previous verifications, references, years, methodologies, and the new attacks and violated properties found using our enhanced signature models.