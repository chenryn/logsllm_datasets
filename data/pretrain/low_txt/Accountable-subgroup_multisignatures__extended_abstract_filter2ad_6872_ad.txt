### Secure ASM Scheme

**Assumption:** The proof of the theorem can be found in the full version of this paper. Below, we outline the two main components of the proof.

1. **Forking Lemma Technique:**
   - We employ the "forking lemma" technique, as introduced by [11] and [32], to violate the Discrete Logarithm Problem (DLP) assumption.
   - Unlike traditional forking-lemma-based proofs, our approach requires using the technique twice. This is because adversarial players can participate in the forgery output by the adversary.
   - During the key generation phase, we use the forking lemma to obtain the secret keys of the adversarial players. When the adversary outputs a forged signature on \((M, S)\), we use the forking lemma again to compute the discrete logarithm \(\alpha\) of \(\Pi_{i \in S} I_i\).
   - The secret keys of the adversarial players in \(S\) are then subtracted from \(\alpha\) to derive the desired discrete logarithm.

2. **Rewinding Technique:**
   - We utilize rewinding, which is not commonly used in similar random oracle proofs, for the following reasons:
     - In ASM schemes, like in single-signer signatures, the adversary is entitled to a chosen message attack, allowing it to request and receive the signature of any message \(M\).
     - However, this capability is more powerful and dangerous in ASM schemes compared to single-signer signatures.
   - In the single-signer Schnorr scheme (or any other Fiat-Shamir-like scheme in the random oracle model), during a signature query, the adversary provides the signer with only a message \(M\). The signer then selects its own commitment \(X\) and produces the signature of \(M\) via the challenge \(e = H(X, M)\).
   - In our DLP-based ASM scheme, if the adversary \(F\) wants a good player \(i\) in \(S\) to sign a message \(M\) as a member of \(S\), \(F\) first receives \(i\)'s individual commitment \(X_i\). Then, \(F\) can provide player \(i\) with a (fake) joint commitment \(\tilde{X}\) of its choice. Player \(i\) will then produce its individual signature \(y_i\) of \((M, S)\) relative to \(\tilde{X}\).
   - In previous proofs for single-signer random-oracle signatures, answering signature queries was straightforward because the simulator could imitate the oracle to produce commitments and challenges simultaneously. In our security proof, the simulator needs to rewind the adversary, even though it controls the random oracle. This is necessary because the simulator must commit to \(X_i\) before knowing the actual challenge \(e\), which may depend on a previously asked \(\tilde{X}\).

**Note:** Our definition does not require adversarial players to participate in the key generation protocol or to have any secret keys. However, our construction ensures that they will both participate and know their secret keys; otherwise, their public keys will not be included in the Merkle tree, and the forgery will not be deemed valid.

### Acknowledgements

- The work of the second author was partially conducted during his visit to the MIT Laboratory for Computer Science.
- The work of the third author was performed at the MIT Laboratory for Computer Science and was supported by the National Science Foundation graduate research fellowship and a grant from the NTT corporation.

### References

[1] Proceedings of the Twentieth Annual ACM Symposium on Theory of Computing, Chicago, Illinois, 2–4 May 1988.

[2] E. Bach. How to generate factored random numbers. SIAM Journal on Computing, 17(2):179–193, Apr. 1988.

[3] M. Bellare and P. Rogaway. Random oracles are practical: A paradigm for designing efficient protocols. In Proceedings of the 1st ACM Conference on Computer and Communication Security, pages 62–73, November 1993. Revised version available at http://www-cse.ucsd.edu/users/mihir/papers/crypto-papers.html.

[4] M. Ben-Or, S. Goldwasser, and A. Wigderson. Completeness theorems for non-cryptographic fault-tolerant distributed computation (extended abstract). In ACM [1], pages 1–10.

[5] G. Brassard, editor. Advances in Cryptology—CRYPTO '89, volume 435 of Lecture Notes in Computer Science. Springer-Verlag, 1990, 20–24 Aug. 1989.

[6] J. Camenisch and M. Stadler. Efficient group signature schemes for large groups (extended abstract). In B. S. Kaliski Jr., editor, Advances in Cryptology—CRYPTO '97, volume 1294 of Lecture Notes in Computer Science, pages 410–424. Springer-Verlag, 17–21 Aug. 1997.

[7] D. Chaum, C. Crépeau, and I. Damgård. Multiparty unconditionally secure protocols (extended abstract). In ACM [1], pages 11–19.

[8] D. Chaum and E. van Heyst. Group signatures. In Davies [9], pages 257–265.

[9] D. W. Davies, editor. Advances in Cryptology—EUROCRYPT '91, volume 547 of Lecture Notes in Computer Science. Springer-Verlag, 8–11 Apr. 1991.

[10] Y. Desmedt and Y. Frankel. Threshold cryptosystems. In Brassard [5], pages 307–315.

[11] U. Feige, A. Fiat, and A. Shamir. Zero-knowledge proofs of identity. Journal of Cryptology, 1(2):77–94, 1988.

[12] A. Fiat and A. Shamir. How to prove yourself: Practical solutions to identification and signature problems. In A. M. Odlyzko, editor, Advances in Cryptology—CRYPTO '86, volume 263 of Lecture Notes in Computer Science, pages 186–194. Springer-Verlag, 1987, 11–15 Aug. 1986.

[13] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Robust and efficient sharing of RSA functions. In Koblitz [20], pages 157–172.

[14] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Robust threshold DSS signatures. In [23], pp. 354–371.

[15] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin. Secure distributed key generation for discrete-log based cryptosystems. In J. Stern, editor, Advances in Cryptology—EUROCRYPT '99, volume 1592 of Lecture Notes in Computer Science, pages 295–310. Springer-Verlag, 2–6 May 1999.

[16] O. Goldreich, S. Micali, and A. Wigderson. How to play any mental game or a completeness theorem for protocols with honest majority. In Proceedings of the Nineteenth Annual ACM Symposium on Theory of Computing, pages 218–229, New York City, 25–27 May 1987.

[17] L. Harn. Group-oriented (t, n) threshold digital signature scheme and digital multisignature. IEE Proc.-Comput. Digit. Tech., 141(5), Sept. 1994.

[18] P. Horster, M. Michels, and H. Petersen. Meta-multisignatures schemes based on the discrete logarithm problem. In Information Security: The Next Decade. Proceedings of the IFIP TC11 Eleventh International Conference on Information Security, IFIP/Sec '95, pages 128–141. Chapman & Hall, 1995.

[19] K. Itakura and K. Nakamura. A public-key cryptosystem suitable for digital multisignatures. NEC Research & Development, (71):1–8, Oct. 1983.

[20] N. Koblitz, editor. Advances in Cryptology—CRYPTO '96, volume 1109 of Lecture Notes in Computer Science. Springer-Verlag, 18–22 Aug. 1996.

[21] S. K. Langford. Weaknesses in some threshold cryptosystems. In Koblitz [20], pages 74–82.

[22] C.-M. Li, T. Hwang, and N.-Y. Lee. Threshold-multisignature schemes where suspected forgery implies traceability of adversarial shareholders. In A. De Santis, editor, Advances in Cryptology—EUROCRYPT '94, volume 950 of Lecture Notes in Computer Science, pages 194–204. Springer-Verlag, 1995, 9–12 May 1994.

[23] U. Maurer, editor. Advances in Cryptology—EUROCRYPT '96, volume 1070 of Lecture Notes in Computer Science. Springer-Verlag, 12–16 May 1996.

[24] R. C. Merkle. A certified digital signature. In Brassard [5], pages 218–238.

[25] S. Micali. CS proofs. SIAM Journal on Computing, 30(4):1253–1298, 2000.

[26] M. Michels and P. Horster. On the risk of disruption in several multiparty signature schemes. In K. Kim and T. Matsumoto, editors, Advances in Cryptology—ASIACRYPT '96, volume 1163 of Lecture Notes in Computer Science, pages 334–345, Kyongju, Korea, 3–7 Nov. 1996. Springer-Verlag.

[27] K. Ohta and T. Okamoto. A digital multisignature scheme based on the Fiat-Shamir scheme. In H. I. H, R. Rivest, and T. Matsumoto, editors, Advances in Cryptology — ASIACRYPT '91, pages 139–148. Springer-Verlag, 1993, 11–14 Nov. 1991.

[28] K. Ohta and T. Okamoto. On concrete security treatment of signatures derived from identification. In H. Krawczyk, editor, Advances in Cryptology—CRYPTO '98, volume 1462 of Lecture Notes in Computer Science, pages 354–369. Springer-Verlag, 23–27 Aug. 1998.

[29] K. Ohta and T. Okamoto. Multi-signature schemes secure against active insider attacks. IEICE Transactions on Fundamentals of Electronics Communications and Computer Sciences, E82-A(1):21–31, Jan. 1999.

[30] T. Okamoto. A digital multisignature schema using bijective public-key cryptosystems. ACM Transactions on Computer Systems, 6(4):432–441, Nov. 1988.

[31] T. P. Pedersen. A threshold cryptosystem without a trusted party (extended abstract). In Davies [9], pages 522–526.

[32] D. Pointcheval and J. Stern. Security proofs for signature schemes. In Maurer [23], pages 387–398.

[33] C.-P. Schnorr. Efficient signature generation by smart cards. Journal of Cryptology, 4(3):161–174, 1991.

### Appendix

#### A. Simplifying the Adversary

The adversary \(F\) described in Section 2 is extremely powerful, capable of corrupting and attacking arbitrary parties at adaptively determined times. While this notion of security is compelling, it is also difficult to work with when analyzing a concrete implementation of ASM schemes. Therefore, we define a weaker adversary \(F'\) that operates in a simpler and more analyzable manner. We will prove that an ASM scheme is secure against \(F\) if and only if it is secure against \(F'\). In the sequel, we will analyze the security of schemes in terms of \(F'\) rather than \(F\).

Unlike \(F\), the weak adversary \(F'\) does not have the ability to corrupt players. Instead, it picks one player \(P_i\) to attack at the outset (before key generation). The other players cease to exist, and \(F'\) must provide all inputs and network traffic for \(P_i\). It can also see all outputs and network traffic coming out of \(P_i\).

After \(P_i\) generates its keys, \(F'\) is allowed to carry out an adaptive chosen-message-and-subgroup attack on \(P_i\), similar to \(F\). The goal of \(F'\) is similar to that of \(F\).

**Definition 2.** An ASM scheme is called weakly secure if, for all constants \(c > 0\) and all sufficiently large security parameters \(k\), no polynomial-time (in \(k\)) weak adversary has a better than \(k^{-c}\) chance of outputting a triple \((\sigma, M, S)\) such that:
- \(\sigma\) is a valid signature on the message \(M\) by the subgroup \(S\) of players,
- \(P_i \in S\),
- \(P_i\) has not been asked by \(F'\) to execute the signing protocol on \(M\) and \(S\).

Because the other players do not exist, they are, in some sense, "fictitious."

Note that the weak adversary can also be seen as the strong adversary that is not allowed to adaptively corrupt players but must pick the \(L - 1\) players it will corrupt at the outset. This observation leads to the following theorem, whose proof will appear in the full version of this work.

**Theorem 2.** Assume that there exists a polynomial \(Q\) such that for any security parameter \(k\), the size \(L\) of \(G\) is bounded by \(L < Q(k)\). Then an ASM signature scheme is weakly secure if and only if it is (strongly) secure.

#### B. Merkle Trees

(The following description is taken almost verbatim from [25].) A binary tree is a tree in which every node has at most two children, hereafter called the 0-child and the 1-child. A collision-free hash function is, informally speaking, a polynomial-time computable function \(H\) mapping binary strings of arbitrary length into reasonably short ones, so that it is computationally infeasible to find any collision (for \(H\)), that is, any two different strings \(x\) and \(y\) for which \(H(x) = H(y)\).

A Merkle tree [24] is a binary tree whose nodes store values, some of which are computed by means of a collision-free hash function \(H\) in a special manner. A leaf node can store any value, but each internal node should store a value that is the one-way hash of the concatenation of the values in its children. If the collision-free hash function produces \(k\)-bit outputs, each internal node of a Merkle tree, including the root, stores a \(k\)-bit value. Except for the root value, each value stored in a node of a Merkle tree is said to be a 0-value, if it is stored in a node that is the 0-child of its parent, a 1-value otherwise.

The crucial property of a Merkle tree is that, unless one succeeds in finding a collision for \(H\), it is computationally hard to change any value in the tree (and, in particular, a value stored in a leaf node) without also changing the root value. This property allows a party \(A\) to "commit" to \(L\) values, \(v_1, \ldots, v_L\) (for simplicity, assume that \(L\) is a power of 2 and let \(d = \log L\)), by means of a single \(k\)-bit value. That is, \(A\) stores value \(v_i\) in the \(i\)-th leaf of a full binary tree of depth \(d\), and uses a collision-free hash function \(H\) to build a Merkle tree, thereby obtaining a \(k\)-bit value, \(V\), stored in the root. This root value \(V\) "implicitly defines" what the \(L\) original values were. Assume that, at some point in time, \(A\) gives \(V\), but not the original values, to another party \(B\). Then, whenever, at a later point in time, \(A\) wants to "prove" to \(B\) what the value of, say, \(v_i\) was, \(A\) may just reveal all \(L\) original values to \(B\), so that \(B\) can recompute the Merkle tree and verify that the newly computed root value indeed equals \(V\). More interestingly, \(A\) may "prove" what \(v_i\) was by revealing just \(d + 1\) (that is, just \(1 + \log L\)) values: \(v_i\) together with its authenticating path, that is, the values stored in the siblings of the nodes along the path from leaf \(i\) (included) to the root (excluded), \(w_1, \ldots, w_d\). Party \(B\) verifies the received alleged leaf-value \(v_i\) and the received alleged authenticating path \(w_1, \ldots, w_d\) as follows. She sets \(u_1 = v_i\) and, letting \(i_1, \ldots, i_d\) be the binary expansion of \(i\), computes the values \(u_2, \ldots, u_d\) as follows: if \(i_j = 0\), she sets \(u_{j+1} = H(w_j u_j)\); else, she sets \(u_{j+1} = H(u_j w_j)\). Finally, \(B\) checks whether the computed \(k\)-bit value \(u_d\) equals \(V\).

**Note:** If an internal node has a 0-child storing the value \(U\) and a 1-child storing a value \(V\), then it stores the value \(H(U || V)\).