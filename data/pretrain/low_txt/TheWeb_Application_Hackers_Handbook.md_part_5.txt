### Common Barriers to Automation and How to Overcome Them

Many applications employ defensive session-handling mechanisms that can hinder automation, such as session termination, the use of ephemeral anti-CSRF tokens, and multistage processes for updating application state. To address these challenges, new tools have been developed that enable the continued use of automated testing techniques. Additionally, a new section examines CAPTCHA controls and common vulnerabilities that can be exploited to bypass them.

### Chapter Updates

- **Chapter 15: Exploiting Information Disclosure**  
  This chapter includes new sections on XSS in error messages and exploiting decryption oracles.

- **Chapter 16: Attacking Native Compiled Applications**  
  No updates have been made to this chapter.

- **Chapter 17: Attacking Application Architecture**  
  A new section has been added on vulnerabilities in cloud-based architectures, along with updated examples of exploiting architectural weaknesses.

- **Chapter 18: Attacking the Application Server**  
  Several new examples of interesting vulnerabilities in application servers and platforms are provided, including Jetty, the JMX management console, ASP.NET, Apple iDisk server, Ruby WEBrick web server, and Java web server. A new section also covers practical approaches to bypassing web application firewalls.

- **Chapter 19: Finding Vulnerabilities in Source Code**  
  No updates have been made to this chapter.

- **Chapter 20: A Web Application Hacker’s Toolkit**  
  This chapter has been updated with details on the latest features of proxy-based tool suites. New sections cover how to proxy traffic from non-proxy-aware clients and how to resolve SSL errors in browsers and other clients caused by intercepting proxies. It also includes a detailed description of the typical workflow when using a proxy-based tool suite and a new discussion on current web vulnerability scanners and optimal usage strategies.

- **Chapter 21: A Web Application Hacker’s Methodology**  
  The methodology steps described throughout the book have been updated in this chapter.

### Tools You Will Need

This book is focused on hands-on techniques for attacking web applications. After reading it, you will understand the specifics of each task, the technical aspects involved, and why they help in detecting and exploiting vulnerabilities. The book does not advocate simply downloading a tool, pointing it at a target application, and accepting the tool's output as the final word on the application's security.

However, several tools will be useful, and sometimes essential, when performing the tasks and techniques described. All of these tools are available online, and we recommend downloading and experimenting with each one as you read about it.

### What’s on the Website

The companion website for this book, accessible at [http://mdsec.net/wahh](http://mdsec.net/wahh) or [www.wiley.com/go/webhacker2e], offers several resources to aid in mastering the techniques and applying them to real-world applications. These resources include:

- Source code for some of the scripts presented in the book
- A list of current links to all the tools and other resources discussed
- A handy checklist of tasks involved in attacking a typical application
- Answers to the questions posed at the end of each chapter
- Hundreds of interactive vulnerability labs used in examples throughout the book, available on a subscription basis to help you develop and refine your skills

### Bring It On

Web application security remains a dynamic and engaging field. We enjoyed writing this book as much as we do hacking into web applications daily. We hope you will find pleasure in learning about the different techniques and how to defend against them.

Before proceeding, it is important to note that in most countries, attacking computer systems without the owner’s permission is illegal. Many of the techniques described in this book are illegal if carried out without consent.

The authors are professional penetration testers who regularly attack web applications on behalf of clients to improve their security. In recent years, many security professionals and others have faced legal consequences and ended their careers by experimenting on or actively attacking computer systems without permission. We strongly urge you to use the information in this book only for lawful purposes.

### Web Application (In)security

Web application security is a critical and timely topic. The stakes are high for businesses, users, and criminals. Reputation is key, and few people want to do business with an insecure website. Therefore, obtaining reliable information about the state of web application security is not a trivial task.

This chapter provides a brief overview of how web applications have evolved and the benefits they offer. We present metrics on vulnerabilities in current web applications, drawn from our direct experience, showing that most applications are far from secure. We describe the core security problem facing web applications—users can supply arbitrary input—and the factors contributing to their weak security posture. Finally, we discuss the latest trends in web application security and how they may evolve in the near future.

#### The Evolution of Web Applications

In the early days of the Internet, the World Wide Web consisted primarily of static websites. These were information repositories with little interactivity. Today, the web is almost unrecognizable, with most sites being highly functional applications that support two-way communication between the server and browser. They handle registration, login, financial transactions, search, and user-generated content. The content is dynamically generated and often tailored to individual users, making security a major concern.

#### Common Web Application Functions

Web applications now perform a wide range of functions, including:

- Shopping (e.g., Amazon)
- Social networking (e.g., Facebook)
- Banking (e.g., Citibank)
- Web search (e.g., Google)
- Auctions (e.g., eBay)
- Gambling (e.g., Betfair)
- Web logs (e.g., Blogger)
- Web mail (e.g., Gmail)
- Interactive information (e.g., Wikipedia)

These applications increasingly overlap with mobile applications, which use HTTP-based APIs to communicate with servers. In addition to the public Internet, web applications are widely used within organizations to support key business functions, such as HR, administrative interfaces, collaboration software, and business applications.

#### Benefits of Web Applications

Several technical and commercial factors have driven the rise of web applications:

- **HTTP**: Lightweight and connectionless, providing resilience and avoiding the need for persistent network connections.
- **Browsers**: Every web user already has a browser installed, enabling dynamic deployment of user interfaces.
- **Browser Capabilities**: Modern browsers support rich and familiar user interfaces, client-side scripting, and browser extensions.
- **Development Ease**: Web development technologies and languages are relatively simple, with a wide range of platforms and tools available.

#### Web Application Security

Web applications bring new security vulnerabilities. The most serious attacks expose sensitive data or gain unrestricted access to back-end systems. High-profile compromises continue to occur, and application-level denial-of-service attacks can disrupt specific users or services.

Despite widespread use of SSL and PCI compliance, many web applications remain insecure. Our testing has shown that a significant percentage of applications are affected by common vulnerabilities, such as broken authentication, broken access controls, SQL injection, and cross-site scripting (XSS).

- **Broken Authentication (62%)**: Defects in the login mechanism that allow password guessing, brute-force attacks, or login bypass.
- **Broken Access Controls (71%)**: Failures to protect data and functionality, allowing unauthorized access to sensitive data or privileged actions.
- **SQL Injection (32%)**: Input manipulation that interferes with database interactions, potentially leading to data theft or command execution.
- **Cross-Site Scripting (94%)**: Vulnerabilities that allow attackers to inject malicious scripts into web pages viewed by other users.