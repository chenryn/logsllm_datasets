### Optimization of GenProg and Other Program Repair Methods

To enhance the effectiveness of GenProg, researchers have proposed various methods. For instance, one approach utilizes approximate semantic equivalence relations to identify semantically equivalent patches, thereby reducing the number of candidate patches [52]. Long et al. introduced the SPR method, which generates patches using parametric patch modes with the aid of abstract values, effectively minimizing the number of candidate patches [52]. They further developed the Prophet method to optimize the ranking of candidate patches, ensuring that the correct patch is verified first [53].

Debroy and Wong proposed a program repair method based on mutation testing, generating patches using mutation operators [28]. Qi et al. adopted a random search algorithm in the candidate patch search process to improve the efficiency of the patch search strategy [63]. Kim et al. suggested mining open-source projects along with the PAR method to summarize code modification templates [41]. Tan et al. recommended using anti-patterns to prohibit certain conversion operations, thus restricting the search space of candidate patches [70].

### Semantics-based Program Rectification

Nguyen et al. introduced SemFix, which leverages the Tarantula defect localization method to infer and fix defective statements [61, 37]. Mechtaev et al. proposed DirectFix, which enhances the readability and comprehensibility of generated patches by utilizing program synthesis techniques [56, 35]. To address larger-scale defective programs, they also developed Angelix, which uses lightweight constraints for code synthesis [57].

### Domain-specific Program Rectification

Several studies have applied automatic program repair methods to specific domains. For example, CFix and HFix propose repair strategies for data races and order violations in concurrent programs [36, 50]. ConcBugAssist and DFixer focus on repairing deadlock problems in concurrent programs [40, 23]. Cornu et al. introduced NPEfix to address null pointer exceptions in Java [25], while Gao et al. proposed LeakFix to detect and repair memory leaks in C programs [32].

However, these methods are not directly applicable to fixing Rust buffer overflow vulnerabilities due to Rust's unique safe and unsafe sub-languages and its distinct security features.

### Rupair: Towards Automatic Buffer Overflow Detection and Rectification for Rust

In this research, we present Rupair, the first automated program rectification system designed to identify and fix buffer overflow bugs in Rust programs. The key innovation of Rupair is a data-flow-based analysis algorithm that operates across both the safe and unsafe sub-languages of Rust. We conducted several experiments applying Rupair to micro benchmarks of real CVEs and vulnerabilities, as well as to real-world Rust projects. The results demonstrated that Rupair is effective in identifying and rectifying real buffer overflow bugs, including previously unknown ones. Additionally, Rupair is efficient, with minimal cost overhead.

### Acknowledgments

We thank the anonymous reviewers for their valuable feedback. This work is supported by a graduate education innovation program of USTC under grant No. 2020YCJC41 and No. 2021YCJC34.

### References

[1] 2014. integer-overflow. https://rust-lang.github.io/rfcs/0560-integer-overflow.rust-moving. https://users.rust-lang.org/t/rust-mutability-moving-ETH Zurich.
[2] 2018. html.
[3] 2020. nomicon-casts. https://doc.rust-lang.org/nomicon/casts.html.
[4] 2020. Parity. https://github.com/paritytech/parity-ethereum.
[5] 2020. The Rust CVEs. https://github.com/system-pclub/rust-study.
[6] 2020. rust-lifetime. https://doc.rust-lang.org/nomicon/lifetimes.html.
[7] 2020. rust-ownership. https://doc.rust-lang.org/nomicon/ownership.html.
[8] 2020. rust-survey-2020. https://blog.rustlang.org/2020/12/16/rust-survey-2020.
[9] 2020. TTstack. https://github.com/rustcc/TTstac.
[10] 2020. unsafe-rust. https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html.
[11] 2021. The AddressSanitizer. https://clang.llvm.org/docs/AddressSanitizer.html.
[12] 2021. Libra. https://www.diem.com/en-us/.
[13] 2021. Rust Specification. https://doc.rust-lang.org/.
[14] 2021. The Servo Browser Engine. https://servo.org/.
[15] 2021. TiKV. https://github.com/tikv/tikv.
[16] Hiralal Agrawal and Joseph R Horgan. 1990. Dynamic program slicing. ACM SIGPlan Notices 25, 6 (1990), 246–256.
[17] Alfred V. Aho, Ravi Sethi, and Jeffrey D. Ullman. 1986. Compilers: Principles, Techniques, and Tools. Addison-Wesley. https://www.worldcat.org/oclc/12285707
[18] Vytautas Astrauskas, Peter Müller, Federico Poli, and Alexander J Summers. 2019. Leveraging Rust types for modular specification and verification. Proceedings of the ACM on Programming Languages 3, OOPSLA (2019), 1–30.
[19] Johannes Bader, Andrew Scott, Michael Pradel, and Satish Chandra. 2019. Getafix: learning to fix bugs automatically. Proc. ACM Program. Lang. 3, OOPSLA (2019), 159:1–159:27. https://doi.org/10.1145/3360585
[20] Clark Barrett and Cesare Tinelli. 2018. Satisfiability modulo theories. In Handbook of Model Checking. Springer, 305–343.
[21] Clark W. Barrett, Christopher L. Conway, Morgan Deters, Liana Hadarean, Dejan Jovanovic, Tim King, Andrew Reynolds, and Cesare Tinelli. 2011. CVC4. In Computer Aided Verification - 23rd International Conference, CAV 2011, Snowbird, UT, USA, July 14-20, 2011. Proceedings (Lecture Notes in Computer Science, Vol. 6806), Ganesh Gopalakrishnan and Shaz Qadeer (Eds.). Springer, 171–177. https://doi.org/10.1007/978-3-642-22110-1_14
[22] David W Binkley and Keith Brian Gallagher. 1996. Program slicing. Advances in computers 43 (1996), 1–50.
[23] Yan Cai and Lingwei Cao. 2016. Fixing deadlocks via lock pre-acquisitions. In Proceedings of the 38th international conference on software engineering. 1109–1120.
[24] Cristiano Calcagno, Dino Distefano, Jérémy Dubreil, Dominik Gabi, Pieter Hooimeijer, Martino Luca, Peter W. O’Hearn, Irene Papakonstantinou, Jim Purbrick, and Dulma Rodriguez. 2015. Moving Fast with Software Verification. In NASA Formal Methods - 7th International Symposium, NFM 2015, Pasadena, CA, USA, April 27-29, 2015, Proceedings (Lecture Notes in Computer Science, Vol. 9058), Klaus Havelund, Gerard J. Holzmann, and Rajeev Joshi (Eds.). Springer, 3–11. https://doi.org/10.1007/978-3-319-17524-9_1
[25] Benoit Cornu, Thomas Durieux, Lionel Seinturier, and Martin Monperrus. 2015. Npefix: Automatic runtime repair of null pointer exceptions in java. arXiv preprint arXiv:1512.07423 (2015).
[26] Hoang-Hai Dang, Jacques-Henri Jourdan, Jan-Oliver Kaiser, and Derek Dreyer. 2019. RustBelt meets relaxed memory. Proceedings of the ACM on Programming Languages 4, POPL (2019), 1–29.
[27] Leonardo De Moura and Nikolaj Bjørner. 2008. Z3: An efficient SMT solver. In International conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 337–340.
[28] Vidroha Debroy and W Eric Wong. 2010. Using mutation to automatically suggest fixes for faulty programs. In 2010 Third International Conference on Software Testing, Verification and Validation. IEEE, 65–74.
[29] Yu Ding, Ran Duan, Long Li, Yueqiang Cheng, Yulong Zhang, Tanghui Chen, Tao Wei, and Huibo Wang. 2017. Poster: Rust SGX SDK: Towards memory safety in Intel SGX enclave. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. 2491–2493.
[30] Matthias Erdin, Vytautas Astrauskas, and Federico Poli. 2019. Verification of Rust Generics, Typestates, and Traits. Ph.D. Dissertation. Master’s thesis, ETH Zürich.
[31] Ana Nora Evans, Bradford Campbell, and Mary Lou Soffa. 2020. Is rust used safely by software developers?. In ICSE ’20: 42nd International Conference on Software Engineering, Seoul, South Korea, 27 June - 19 July, 2020, Gregg Rothermel and Doo-Hwan Bae (Eds.). ACM, 246–257. https://doi.org/10.1145/3377811.3380413
[32] Qing Gao, Yingfei Xiong, Yaqing Mi, Lu Zhang, Weikun Yang, Zhaoping Zhou, Bing Xie, and Hong Mei. 2015. Safe memory-leak fixing for c programs. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol. 1. IEEE, 459–470.
[33] David Gens, Simon Schmitt, Lucas Davi, and Ahmad-Reza Sadeghi. 2018. K-Miner: Uncovering Memory Corruption in Linux. In 25th Annual Network and Distributed System Security Symposium, NDSS 2018, San Diego, California, USA, February 18-21, 2018. The Internet Society. http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_05A-1_Gens_paper.pdf
[34] Florian Hahn. 2016. Rust2Viper: Building a static verifier for Rust. Master’s thesis.
[35] Susmit Jha, Sumit Gulwani, Sanjit A Seshia, and Ashish Tiwari. 2010. Oracle-guided component-based program synthesis. In 2010 ACM/IEEE 32nd International Conference on Software Engineering, Vol. 1. IEEE, 215–224.
[36] Guoliang Jin, Wei Zhang, and Dongdong Deng. 2012. Automated concurrency-bug fixing. In 10th {USENIX} Symposium on Operating Systems Design and Implementation ({OSDI} 12). 221–236.
[37] James A Jones and Mary Jean Harrold. 2005. Empirical evaluation of the tarantula automatic fault-localization technique. In Proceedings of the 20th IEEE/ACM international Conference on Automated software engineering. 273–282.
[38] Ralf Jung, Jacques-Henri Jourdan, Robbert Krebbers, and Derek Dreyer. 2018. RustBelt: securing the foundations of the rust programming language. Proc. ACM Program. Lang. 2, POPL (2018), 66:1–66:34. https://doi.org/10.1145/3158154
[39] Ralf Jung, Jacques-Henri Jourdan, Robbert Krebbers, and Derek Dreyer. 2017. RustBelt: Securing the foundations of the Rust programming language. Proceedings of the ACM on Programming Languages 2, POPL (2017), 1–34.
[40] Sepideh Khoshnood, Markus Kusano, and Chao Wang. 2015. ConcBugAssist: constraint solving for diagnosis and repair of concurrency bugs. In Proceedings of the 2015 international symposium on software testing and analysis. 165–176.
[41] Dongsun Kim, Jaechang Nam, Jaewoo Song, and Sunghun Kim. 2013. Automatic patch generation learned from human-written patches. In 2013 35th International Conference on Software Engineering (ICSE). IEEE, 802–811.
[42] Shuvendu K Lahiri and Sanjit A Seshia. 2004. The UCLID decision procedure. In International Conference on Computer Aided Verification. Springer, 475–478.
[43] AMIN AIT LAMQADEM. 2019. A Formalization of the Static Semantics of Rust.
[44] Stefan Lankes, Jens Breitbart, and Simon Pickartz. 2019. Exploring rust for unikernel development. In Proceedings of the 10th Workshop on Programming Languages and Operating Systems. 8–15.
[45] Chris Lattner and Vikram Adve. 2004. LLVM: A compilation framework for lifelong program analysis & transformation. In International Symposium on Code Generation and Optimization, 2004. CGO 2004. IEEE, 75–86.
[46] Amit Levy, Michael P Andersen, Bradford Campbell, David Culler, Prabal Dutta, Branden Ghena, Philip Levis, and Pat Pannuto. 2015. Ownership is theft: Experiences building an embedded OS in Rust. In Proceedings of the 8th Workshop on Programming Languages and Operating Systems. 21–26.
[47] Amit Levy, Bradford Campbell, Branden Ghena, Pat Pannuto, Prabal Dutta, and Philip Levis. 2017. The case for writing a kernel in rust. In Proceedings of the 8th Asia-Pacific Workshop on Systems. 1–7.
[48] Alex Light. 2015. Reenix: Implementing a unix-like operating system in rust. Undergraduate Honors Theses, Brown University (2015).
[49] Per Lindgren, Nils Fitinghoff, and Jorge Aparicio. 2019. Cargo-call-stack Static Call-stack Analysis for Rust. In 2019 IEEE 17th International Conference on Industrial Informatics (INDIN), Vol. 1. IEEE, 1169–1176.
[50] Haopeng Liu, Yuxi Chen, and Shan Lu. 2016. Understanding and generating high quality patches for concurrency bugs. In Proceedings of the 2016 24th ACM SIGSOFT international symposium on foundations of software engineering. 715–726.
[51] Peiming Liu, Gang Zhao, and Jeff Huang. 2020. Securing unsafe rust programs with XRust. In ICSE ’20: 42nd International Conference on Software Engineering, Seoul, South Korea, 27 June - 19 July, 2020, Gregg Rothermel and Doo-Hwan Bae (Eds.). ACM, 234–245. https://doi.org/10.1145/3377811.3380325
[52] Fan Long and Martin Rinard. 2015. Staged program repair with condition synthesis. In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering. 166–178.
[53] Fan Long and Martin Rinard. 2016. Automatic patch generation by learning correct code. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. 298–312.
[54] Gongming Luo, Vishnu Reddy, Marcelo Almeida, Yingying Zhu, Ke Du, and Cyrus Omar. 2020. RustViz: Interactively Visualizing Ownership and Borrowing. CoRR abs/2011.09012 (2020). arXiv:2011.09012 https://arxiv.org/abs/2011.09012
[55] Yusuke Matsushita, Takeshi Tsukada, and Naoki Kobayashi. 2020. RustHorn: CHC-based verification for Rust programs. In European Symposium on Programming. Springer, Cham, 484–514.
[56] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2015. Directfix: Looking for simple program repairs. In 2015 IEEE/ACM 37th IEEE International Conference on Software Engineering, Vol. 1. IEEE, 448–458.
[57] Sergey Mechtaev, Jooyong Yi, and Abhik Roychoudhury. 2016. Angelix: Scalable multiline program patch synthesis via symbolic analysis. In Proceedings of the 38th international conference on software engineering. 691–701.
[58] Samantha Miller, Kaiyuan Zhang, Mengqi Chen, Ryan Jennings, Ang Chen, Danyang Zhuo, and Thomas Anderson. 2021. High Velocity Kernel File Systems with Bento. In 19th {USENIX} Conference on File and Storage Technologies ({FAST} 21). 65–79.
[59] Peter Müller, Malte Schwerhoff, and Alexander J Summers. 2016. Viper: A verification infrastructure for permission-based reasoning. In International conference on verification, model checking, and abstract interpretation. Springer, 41–62.
[60] George C Necula. 2000. Translation validation for an optimizing compiler. In Proceedings of the ACM SIGPLAN 2000 conference on Programming language design and implementation. 83–94.
[61] Hoang Duong Thien Nguyen, Dawei Qi, Abhik Roychoudhury, and Satish Chandra. 2013. Semfix: Program repair via semantic analysis. In 2013 35th International Conference on Software Engineering (ICSE). IEEE, 772–781.
[62] Pengxiang Ning and Boqin Qin. 2020. Stuck-me-not: A deadlock detector on blockchain software in Rust. In The 11th International Conference on Emerging Ubiquitous Systems and Pervasive Networks (EUSPN 2020) / The 10th International Conference on Current and Future Trends of Information and Communication Technologies in Healthcare (ICTH-2020) / Affiliated Workshops, Madeira, Portugal, November 2-5, 2020 (Procedia Computer Science, Vol. 177), Elhadi M. Shakshuki and Ansar-Ul-Haque Yasar (Eds.). Elsevier, 599–604. https://doi.org/10.1016/j.procs.2020.10.085
[63] Yuhua Qi, Xiaoguang Mao, Yan Lei, Ziying Dai, and Chengsong Wang. 2014. The strength of random search on automated program repair. In Proceedings of the 36th International Conference on Software Engineering. 254–265.
[64] Boqin Qin, Yilun Chen, Zeming Yu, Linhai Song, and Yiying Zhang. 2020. Understanding memory and thread safety practices and issues in real-world Rust programs. In Proceedings of the 41st ACM SIGPLAN International Conference on Programming Language Design and Implementation, PLDI 2020, London, UK, June 15-20, 2020, Alastair F. Donaldson and Emina Torlak (Eds.). ACM, 763–779. https://doi.org/10.1145/3385412.3386036
[65] Vishnu Reddy, Marcelo Almeida, Yingying Zhu, Ke Du, Cyrus Omar, et al. 2020. RustViz: Interactively Visualizing Ownership and Borrowing. arXiv preprint arXiv:2011.09012 (2020).
[66] Eric Reed. 2015. Patina: A formalization of the Rust programming language. University of Washington, Department of Computer Science and Engineering, Tech. Rep. UW-CSE-15-03-02 (2015), 264.
[67] Martin C. Rinard, Cristian Cadar, Daniel Dumitran, Daniel M. Roy, Tudor Leu, and William S. Beebee. 2004. Enhancing Server Availability and Security Through Failure-Oblivious Computing. In 6th Symposium on Operating System Design and Implementation (OSDI 2004), San Francisco, California, USA, December 6-8, 2004, Eric A. Brewer and Peter Chen (Eds.). USENIX Association, 303–316. http://www.usenix.org/events/osdi04/tech/rinard.html
[68] Mincheol Sung, Pierre Olivier, Stefan Lankes, and Binoy Ravindran. 2020. Intra-unikernel isolation with intel memory protection keys. In Proceedings of the 16th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments. 143–156.
[69] Michael Sutton, Adam Greene, and Pedram Amini. 2007. Fuzzing: brute force vulnerability discovery. Pearson Education.
[70] Shin Hwei Tan, Hiroaki Yoshida, Mukul R Prasad, and Abhik Roychoudhury. 2016. Anti-patterns in search-based program repair. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering. 727–738.
[71] John Toman, Stuart Pernsteiner, and Emina Torlak. 2015. Crust: a bounded verifier for rust (N). In 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 75–80.
[72] Feng Wang, Fu Song, Min Zhang, Xiaoran Zhu, and Jun Zhang. 2018. KRust: A Formal Executable Semantics of Rust. In 2018 International Symposium on Theoretical Aspects of Software Engineering, TASE 2018, Guangzhou, China, August 29-31, 2018, Jun Pang, Chenyi Zhang, Jifeng He, and Jian Weng (Eds.). IEEE Computer Society, 44–51. https://doi.org/10.1109/TASE.2018.00014
[73] Westley Weimer, Zachary P Fry, and Stephanie Forrest. 2013. Leveraging program equivalence for adaptive program repair: Models and first results. In 2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 356–366.
[74] Westley Weimer, ThanhVu Nguyen, Claire Le Goues, and Stephanie Forrest. 2009. Automatically finding patches using genetic programming. In 2009 IEEE 31st International Conference on Software Engineering. IEEE, 364–374.
[75] Mark Weiser. 1984. Program slicing. IEEE Transactions on software engineering 4 (1984), 352–357.
[76] Hui Xu, Zhuangbin Chen, Mingshen Sun, and Yangfan Zhou. 2020. Memory-Safety Challenge Considered Solved? An Empirical Study with All Rust CVEs. CoRR abs/2003.03296 (2020). arXiv:2003.03296 https://arxiv.org/abs/2003.03296
[77] Zeming Yu, Linhai Song, and Yiying Zhang. 2019. Fearless Concurrency? Understanding Concurrent Programming Safety in Real-World Rust Software. CoRR abs/1902.01906 (2019). arXiv:1902.01906 http://arxiv.org/abs/1902.01906
[78] Chao Zhang, Tielei Wang, Tao Wei, Yu Chen, and Wei Zou. 2010. IntPatch: Automatically fix integer-overflow-to-buffer-overflow vulnerability at compile-time. In European Symposium on Research in Computer Security. Springer, 71–86.
[79] Wei Zhang, Junghee Lim, Ramya Olichandran, Joel Scherpelz, Guoliang Jin, Shan Lu, and Thomas Reps. 2011. ConSeq: detecting concurrency bugs through sequential errors. ACM SIGARCH Computer Architecture News 39, 1 (2011), 251–264.
[80] Wei Zhang, Chong Sun, and Shan Lu. 2010. ConMem: detecting severe concurrency bugs through an effect-oriented approach. ACM Sigplan Notices 45, 3 (2010), 179–192.
[81] Yuyao Zhang, Siqi Ma, Juanru Li, Kailai Li, Surya Nepal, and Dawu Gu. 2020. Smartshield: Automatic smart contract protection made easy. In 2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER). IEEE, 23–34.
[82] Ziyi Zhang, Boqin Qin, Yilun Chen, Linhai Song, and Yiying Zhang. 2020. VRLifeTime - An IDE Tool to Avoid Concurrency and Memory Bugs in Rust. In CCS ’20: 2020 ACM SIGSAC Conference on Computer and Communications Security, Virtual Event, USA, November 9-13, 2020, Jay Ligatti, Xinming Ou, Jonathan Katz, and Giovanni Vigna (Eds.). ACM, 2085–2087. https://doi.org/10.1145/3372297.3420024
[83] Ziyi Zhang, Boqin Qin, Yilun Chen, Linhai Song, and Yiying Zhang. 2020. VRLifeTime–An IDE Tool to Avoid Concurrency and Memory Bugs in Rust. In Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security. 2085–2087.