**00:06:01 - Jennifer Petoff**：
在谷歌，我们如何看待失败？设定 100% 的在线时间是一个不切实际的目标。如果你认为这是可以实现的，那无异于自欺欺人。因此，失败是不可避免的，只是时间和方式的问题。在谷歌，我们庆祝失败，因为它为我们提供了宝贵的学习机会。我们会对每次失败进行深入分析，并将这些经验教训广泛地分享给团队，以确保所有人都能从中受益。

**00:06:23 - Jennifer Petoff**：
虽然错误无法避免，但我们应尽力避免重复同样的错误。犯错是人之常情，但反复犯错是可以避免的。

**00:06:34 - Saron Yitbarek**：
Jennifer 对失败的看法非常有趣。她提到，当事情出错时，这实际上意味着你已经到达了一个可以挖掘价值的地方。

**00:06:50 - Jennifer Petoff**：
面对突发状况时，我们会立即采取行动处理问题。但更重要的是，在事后要详细记录整个过程，以便其他人能够从中学习。每一次事件都会带来一定的代价。如果不能通过事后分析真正吸取教训，那么解决问题所付出的努力就白费了。在谷歌，我们倡导一种无责文化。指责他人不会带来任何好处，只会导致人们隐瞒错误。而事实上，错误总是会发生。

**00:07:27 - Saron Yitbarek**：
重要的是要记住 Jennifer 提到的一点：没有错误的工作是一种幻想。总会有出错的地方。归根结底，这是一种思想上的转变。我们可以放弃那种认为存在一个单一、确定的最终目标的想法，即一切最终都会按照我们想象的方式发展。这种转变是非常强大且积极的。

谷歌拥抱失败的做法确实有意义且实用。但这是否仅停留在口头层面呢？是否有具体的例子说明这种做法是如何使事情变得更好的，还是说这只是让我们在第 200 次编译时感觉更好？

**00:08:26**：
事实证明，有人可以回答这个问题。

**00:08:29 - Jessica Rudder**：
我叫 Jessica Rudder，是一名 GitHub 的软件工程师。

**00:08:33 - Saron Yitbarek**：
Jessica 在 GitHub 经历过失败。她的经历表明，失败有时反而会引领我们走向巨大的成功。比如下面这个故事：

**00:08:50 - Jessica Rudder**：
上世纪 90 年代，一家游戏开发公司正在开发一款全新的赛车游戏。他们决定将其改为街头赛车模式。在这个模式中，玩家不仅要与其他车手竞争，还要躲避追捕他们的警车（非玩家角色）。然而，当他们将代码整合在一起并开始测试时，发现算法出现了严重偏差：警车并不是追赶玩家，而是直接从侧街冲出来撞击玩家的车辆。

**00:09:37**：
面对这一混乱局面，开发团队并没有惊慌失措，而是决定继续前进，看看玩家们对此有何反应。结果发现，测试人员在游戏中逃避警察抓捕的过程中获得了更多的乐趣。于是，开发团队改变了游戏的设计理念。

**00:10:17 - Saron Yitbarek**：
你能猜出这是哪款游戏吗？

**00:10:21 - Jessica Rudder**：
正是《侠盗猎车手》。这款游戏之所以成为有史以来最畅销的游戏之一，完全是因为当时的一个失误。如果开发团队没有开放的思想，并决定从这个错误中学习，我们就只能玩一些普通的街头赛车游戏了。

**00:10:41 - Saron Yitbarek**：
这真是令人惊讶！但关键在于，《侠盗猎车手》团队在遭遇失败时保持了宽容和好奇心。

**00:10:52 - Jessica Rudder**：
如果没有这种开放的态度，我们就不会有《侠盗猎车手》，而只有一款平庸的街头赛车游戏。

**00:11:07 - Saron Yitbarek**：
让我们再讨论一个类似的故事，关于《寂静岭》的制作过程。这是一款大型 3A 游戏，但在开发过程中遇到了严重的弹出问题。局部景观的处理速度不够快，导致墙壁或道路突然出现。这是一个破坏性的问题，而且已经到了开发后期。他们是怎么解决的？是彻底放弃还是将错就错？

**00:11:42 - Jessica Rudder**：
他们选择了一种创新的方法：让整个世界笼罩在浓厚诡异的雾气中。因为雾气对处理器来说很容易渲染，而且不会有任何延迟。此外，雾气还限制了玩家的视野，使得远处的建筑物不会突然出现。这样一来，当它们进入视野时，看起来就像是从雾中浮现出来一样。

**00:12:15 - Saron Yitbarek**：
雾气成为了《寂静岭》系列的一个标志性特征，它不仅掩盖了技术问题，还增强了游戏的恐怖氛围。即使后来处理器的速度足够快，不再需要遮掩弹出问题，他们仍然保留了雾气。

**00:12:33 - Jessica Rudder**：
你无法想象没有雾气的《寂静岭》。而这一切最初只是为了掩盖一个错误。

**00:12:40 - Saron Yitbarek**：
我喜欢这个故事！他们拥抱失败而不是逃避失败，从而挽救了一个重大的项目。这条关于不怕失败的原则也适用于个人的小事，而不仅仅是全公司的决策。从容面对失败是我们一点一点地变得更好的方法。

**00:13:01 - Jessica Rudder**：
很多时候，人们会过度思考，认为失败意味着自己不擅长某样东西。但实际上，只有具体定位到问题所在，才能找到解决方案。例如，如果你知道“我不懂如何在 JavaScript 中实现这个循环”，你可以通过搜索找到答案。尽管仍需努力，但这样遇到的困难会少得多。

**00:13:36 - Saron Yitbarek**：
无论你是新开发人员还是大型工作室的负责人，我们的错误将我们推向更大的领域。那些实验、那些失败、那些英勇的尝试，构成了旅程的重要部分。在我所熟悉的开源社区中，这一点尤为明显。接下来，我们将探讨开源中的失败是如何带来美好结果的。

**00:14:14**：
前面的例子展示了失败如何带来意想不到的惊喜。在最好的情况下，开源开发文化正好符合这一点。它让失败变得正常。为了更好地理解这种愿意失败的想法是如何被引入开源开发的，我和 Red Hat 的首席敏捷架构师 Jen Krieger 进行了交流。我们讨论了开源社区对失败的态度以及这些态度如何塑造无限可能。

**00:14:47 - Saron Yitbarek**：
我想谈谈这个口号：“快速失败，打破现状”。这几乎是我们社区的一个巨大召集口号。你怎么看？

**00:15:04 - Jen Krieger**：
我对这个话题有很多想法。

**00:15:06 - Saron Yitbarek**：
我也觉得你会有。

**00:15:06 - Jen Krieger**：
“快速失败”、“在失败中前进”等概念本质上是一样的。在我刚开始工作的时候，我在一家不容许失败的公司工作。一旦出错，你就得准备辞职。没有任何空间允许犯错。这种环境让人感到困扰。于是，一场文化运动随之兴起，催生了“敏捷”和“DevOps”这样的术语。在我看来，这些术语代表着团队通过一系列小规模实验来不断修正方向的过程。

**00:16:02 - Jen Krieger**：
这是一种积极的选择。你可能会做出大胆的决定并取得成功，或者做出错误的决定并从中吸取教训。

**00:16:18 - Saron Yitbarek**：
确实如此。所以，当你把“快速失败，打破现状”视为这场运动的一部分时，感觉在如何失败、如何以正确的方式失败上还是有一些方法和最佳实践的。那么，有哪些最佳实践和原则可以帮助我们以正确的方式失败？

**00:16:44 - Jen Krieger**：
我总是告诉工程师们，要尽早并尽可能多地破坏构建。如果他们在破坏构建后意识到问题，还有机会及时修复。这一切都围绕着“反馈循环”的概念，确保你在工作中获得尽可能短的反馈周期。

**00:17:08 - Jen Krieger**：
在开源开发中，当我提交一个补丁时，可能会收到各种反馈。例如，有人可能会指出九个拒绝接受补丁的原因，或者告诉我补丁很棒，可以继续。又或者，机器人会告诉我补丁未通过构建。这些不同类型的反馈都有助于改进和完善代码。