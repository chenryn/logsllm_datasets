### Code-Signing Key Theft and Malware Investigation

The code-signing keys were stolen because the machines storing them were accessible to all developers. Most publishers requested that we send the malware samples signed with their certificates for further investigation. Two publishers claimed that the detection was a false positive by antivirus (AV) software. We manually investigated these claims to determine if the files signed with each certificate were indeed false positives. Major security platforms, including Microsoft, Internet Explorer, Chrome, Gmail, and Dropbox, detected these files as malware and prevented them from being shared or downloaded from the internet. One of the files was clearly labeled as a trojan, specifically called Vilsel. Based on this evidence, we concluded that the signed samples, which the two publishers claimed were false positives, are in fact obvious malware.

### 5. Discussion

#### Improvements for Code Signing PKI

The primary difference between TLS and code signing certificates is that it is more difficult for the owners of code signing certificates to detect where and how they are being abused. In contrast, TLS certificate owners can easily identify misuse because the certificates are tightly bound to specific domain names. If code signing certificate owners were informed about what program code is signed with their certificate, they could quickly identify any abuse. To achieve this, we suggest that signing tools (e.g., `signtool.exe` in Windows) log all signing activities and inform the original owners of:
1. What and when program code is signed.
2. Who is attempting to sign (e.g., IP address).

With access to this logging information, certificate owners can periodically check the logs to detect any misuse. This model is effective for compromised certificates but may not be sufficient for cases of identity theft or shell companies. For these scenarios, we propose introducing transparency in code signing. This would involve logging the hash value of the program code and the certificate at the time of signing. Third parties could then audit these logs to identify any code signing abuse.

#### Other Threats

In addition to the three threats described in Section 2.3, a Certificate Authority (CA) may be compromised or act maliciously. This is a severe threat, as it would allow adversaries to issue fake code signing certificates for signing malware. For example, they could issue certificates setting the publisher name (common name) to reputable software companies like Microsoft or Google. In the past, hackers have compromised two CAs (DigiNotar and Comodo) and issued fake TLS certificates. However, we did not observe this threat in our dataset.

Recently, Google and CWI Amsterdam developed code that can generate two different files with the same SHA-1 hash value [12]. While we have not observed any malware samples exploiting this SHA-1 collision attack, it represents an important threat. The Flame malware, for instance, conducted an attack against MD5 shortly after it became practical to find MD5 collisions.

### 6. Related Work

We discuss related work in three key areas: measuring the ecosystems of HTTPS and TLS certificates; measuring code signing abuse, specifically Authenticode and Android; and attempts at improving PKIs.

#### Measurements of the TLS Certificate Ecosystem

The TLS certificates and HTTPS ecosystems have been extensively studied due to the introduction of network scanners such as ZMap. ZMap can scan the entire IPv4 address space in less than one hour [8], allowing researchers to obtain large datasets of TLS certificates. Durumeric et al. uncovered bad practices in the HTTPS ecosystem using data produced by ZMap [7]. Two studies examined the impact of the Heartbleed bug, a serious security vulnerability in the OpenSSL cryptography library [6, 40].

#### Code Signing Abuse

For Authenticode code signing abuse, Sophos, a computer security company, examined signed Windows PE files collected from 2008 to 2010 [37]. They found that the number of signed malicious PEs, including trojans, adware, and spyware, increased over time. Kotzias et al. and Alrawi et al. evaluated 356,000 and three million Windows PE samples, respectively [2, 19]. They found that signed malware was not prevalent, with only a small number of signed malware samples, while most signed samples were Potentially Unwanted Programs (PUPs). Unlike Authenticode, Android applications are signed with self-signed certificates, leading to no effective revocation system. Many Android developers use the same key for multiple applications, which can lead to security threats such as signature-based permissions [9].

#### PKI Improvements

Efforts to prevent certificate abuse have primarily focused on the Web PKI. These proposals can be classified into three groups: client-based, CA-based, and domain-based. Client-based approaches, such as Perspective [36] and Convergence [1], require clients to ask a third party (notary authority, independent from CAs) to verify the legitimacy of a service's certificate. Certificate Transparency (CT) [22] is a domain-based approach where all TLS certificates are logged in a signed, chronologically ordered Merkle Hash Tree, making the logs publicly accessible for monitoring and auditing. For Android applications, Fahl et al. proposed Application Transparency (AT) [9], which aims to prevent targeted and stealthy threats. However, these improvements cannot be directly applied to code signing certificates, as they were designed for TLS certificates or Android applications.

There have been fewer efforts to improve the code-signing PKI. Papp et al. presented ROSCO, a repository system where publishers upload software code, and end-users can check if the certificates are compromised [29]. However, this repository is maintained by a single group, limiting its auditability, and publishers must voluntarily upload their code, which means not all code is covered. Another proposal, CT for Binary Codes [38], is based on CT and supports logging program code for public auditing. However, it lacks a clear protocol for publishers to log their code.

### 7. Conclusions

We introduce a threat model that highlights three types of weaknesses in the code signing PKI: inadequate client-side protections, publisher-side key mismanagement, and CA-side verification failures. We propose an algorithm for analyzing abuse in the code signing ecosystem and identifying the exploited weaknesses. Using this algorithm, we conducted a systematic measurement of the three weakness types.

We identified 325 signed malware samples in our dataset. Of these, 189 (58.2%) samples were properly signed, while 136 carried malformed digital signatures that did not match the binary’s digest. Such malformed signatures can help malware bypass AV detection. The 189 correctly signed samples relied on 111 unique certificates, of which only 27 were revoked. Malware signed with one of the remaining 84 certificates would still be trusted today, provided it carries a trusted timestamp. A large fraction (88.8%) of malware families relied on a single certificate, suggesting that the abusive certificates are mostly controlled by the malware authors rather than by third parties.

Of the 111 certificates used to sign malware, 75 were abused due to publisher-side mismanagement (72 were compromised, and 3 were used on infected developer machines). The compromised certificates included the one used by Stuxnet. Additionally, 27 certificates were issued to malware authors due to CAs' verification failures (22 through identity theft and 5 using shell company information). For further investigation, we sent emails to the certificate publishers informing them of the abuse. We received replies from eight publishers, who confirmed that the certificates were issued to them, and five were unaware of the abuse.

### Acknowledgments

We thank Dave Levin, Michelle Mazurek, Dylan O’Reagan, and the anonymous reviewers for their feedback. We also thank VirusTotal for access to their service and Symantec for making data available through the WINE platform. This research was partially supported by the National Science Foundation (award CNS-1564143) and the Department of Defense.

### References

[1] 2017. Convergence. https://github.com/moxie0/Convergence. (2017).
[2] Omar Alrawi and Aziz Mohaisen. 2016. Chains of Distrust: Towards Understanding Certificates Used for Signing Malicious Applications. In Proceedings of the 25th International Conference Companion on World Wide Web (WWW ’16 Companion). International World Wide Web Conferences Steering Committee, Republic and Canton of Geneva, Switzerland, 451–456. https://doi.org/10.1145/2872518.2888610
[3] Frank Cangialosi, Taejoong Chung, David Choffnes, Dave Levin, Bruce M. Maggs, Alan Mislove, and Christo Wilson. 2016. Measurement and Analysis of Private Key Sharing in the HTTPS Ecosystem. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS ’16). ACM, New York, NY, USA, 628–640. https://doi.org/10.1145/2976749.2978301
[4] Tudor Dumitras, and Darren Shou. 2011. Toward a Standard Benchmark for Computer Security Research: The Worldwide Intelligence Network Environment (WINE). In EuroSys BADGERS Workshop. Salzburg, Austria.
[5] Zakir Durumeric, David Adrian, Ariana Mirian, Michael Bailey, and J. Alex Halderman. 2015. A Search Engine Backed by Internet-Wide Scanning. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security (CCS '15). ACM, New York, NY, USA, 542–553. https://doi.org/10.1145/2810103.2813703
[6] Zakir Durumeric, James Kasten, David Adrian, J. Alex Halderman, Michael Bailey, Frank Li, Nicolas Weaver, Johanna Amann, Jethro Beekman, Mathias Payer, and Vern Paxson. 2014. The Matter of Heartbleed. In Proceedings of the 2014 Conference on Internet Measurement Conference (IMC '14). ACM, New York, NY, USA, 475–488. https://doi.org/10.1145/2663716.2663755
[7] Zakir Durumeric, James Kasten, Michael Bailey, and J. Alex Halderman. 2013. Analysis of the HTTPS Certificate Ecosystem. In Proceedings of the 2013 Conference on Internet Measurement Conference (IMC '13). ACM, New York, NY, USA, 291–304. https://doi.org/10.1145/2504730.2504755
[8] Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. 2013. ZMap: Fast Internet-wide Scanning and Its Security Applications. In Proceedings of the 22Nd USENIX Conference on Security (SEC'13). USENIX Association, Berkeley, CA, USA, 605–620. http://dl.acm.org/citation.cfm?id=2534766.2534818
[9] Sascha Fahl, Sergej Dechand, Henning Perl, Felix Fischer, Jaromir Smrcek, and Matthew Smith. 2014. Hey, NSA: Stay Away from My Market! Future Proofing App Markets Against Powerful Attackers. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14). ACM, New York, NY, USA, 1143–1155. https://doi.org/10.1145/2660267.2660311
[10] Nicholas Falliere, Liam O’Murchu, and Eric Chien. 2011. W32.Stuxnet Dossier. Symantec Whitepaper. (February 2011). http://www.symantec.com/content/en/us/enterprise/media/security_response/whitepapers/w32_stuxnet_dossier.pdf
[11] DAN GOODIN. 2015. Stuxnet spawn infected Kaspersky using stolen Foxconn digital certificates. (Jun 2015). https://arstechnica.com/security/2015/06/stuxnet-spawn-infected-kaspersky-using-stolen-foxconn-digital-certificates/ (February 2017). https:
[12] Google. 2017. Announcing the first SHA1 collision. //security.googleblog.com/2017/02/announcing-first-sha1-collision.html
[13] P. Hoffman and J. Schlyter. 2012. The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA. RFC 6698. RFC Editor. http://www.rfc-editor.org/rfc/rfc6698.txt http://www.rfc-editor.org/rfc/rfc6698.txt.
[14] Ralph Holz, Lothar Braun, Nils Kammenhuber, and Georg Carle. 2011. The SSL landscape: a thorough analysis of the x. 509 PKI using active and passive measurements. In Proceedings of the 2011 ACM SIGCOMM conference on Internet measurement conference. ACM, 427–444. http://dl.acm.org/citation.cfm?id=2068856
[15] Lin Shung Huang, Alex Rice, Erling Ellingsen, and Collin Jackson. 2014. Analyzing forged SSL certificates in the wild. In Security and Privacy (SP), 2014 IEEE Symposium on. IEEE, 83–97. http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6956558
[16] Burt Kaliski. 1998. PKCS #7: Cryptographic Message Syntax Version 1.5. RFC 2315. RFC Editor. http://www.rfc-editor.org/rfc/rfc2315.txt http://www.rfc-editor.org/rfc/rfc2315.txt.
[17] David. G. Kleinbaum and Mitchell Klein. 2011. Survival Analysis: A Self-Learning Text (3 ed.). Springer.
[18] Platon Kotzias, Leyla Bilge, and Juan Caballero. 2016. Measuring PUP prevalence and PUP distribution through Pay-Per-Install services. In Proceedings of the USENIX Security Symposium.
[19] Platon Kotzias, Srdjan Matic, Richard Rivera, and Juan Caballero. 2015. Certified PUP: Abuse in Authenticode Code Signing. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security (CCS '15). ACM, New York, NY, USA, 465–478. https://doi.org/10.1145/2810103.2813665
[20] Michael Kranch and Joseph Bonneau. 2015. Upgrading HTTPS in mid-air: An Empirical Study of Strict Transport Security and Key Pinning. In Network and Distributed System Security (NDSS) Symposium. Internet Society. https://doi.org/10.14722/ndss.2015.23162
[21] Bum Jun Kwon, Virinchi Srinivas, Amol Deshpande, and Tudor Dumitraş. 2017. Catching Worms, Trojan Horses and PUPs: Unsupervised Detection of Silent Delivery Campaigns. In Proc. NDSS.
[22] B. Laurie, A. Langley, and E. Kasper. 2013. Certificate Transparency. RFC 6962. RFC Editor.
[32] Marcos Sebastián, Richard Rivera, Platon Kotzias, and Juan Caballero. 2016. Av-class: A tool for massive malware labeling. In International Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 230–253.
[23] Eric Lawrence. 2011. Everything you need to know about Authenticode Code Signing. (Mar 2011). https://blogs.msdn.microsoft.com/ieinternals/2011/03/22/everything-you-need-to-know-about-authenticode-code-signing/
[24] Yabing Liu, Will Tome, Liang Zhang, David Choffnes, Dave Levin, Bruce Maggs, Alan Mislove, Aaron Schulman, and Christo Wilson. 2015. An End-to-End Measurement of Certificate Revocation in the Web’s PKI. ACM Press, 183–196. https://doi.org/10.1145/2815675.2815685
[25] Microsoft. 2001. Erroneous VeriSign-Issued Digital Certificates Pose Spoofing Hazard. (2001). https://technet.microsoft.com/en-us/library/security/ms01-017.aspx
[26] Microsoft. 2008. Windows Authenticode Portable Executable Signature Format. http://download.microsoft.com/download/9/c/5/9c5b2167-8017-4bae-9fde-d599bac8184a/Authenticode_PE.docx (Mar 2008).
[27] Microsoft. 2011. Virus: Win32/Induc.A. https://www.microsoft.com/security/portal/threat/encyclopedia/entry.aspx?name=Virus%3AWin32%2FInduc.A (April 2011).
[28] Evangelos E. Papalexakis, Tudor Dumitras, Duen Horng (Polo) Chau, B. Aditya Prakash, and Christos Faloutsos. 2013. Spatio-temporal Mining of Software Adoption & Penetration. In IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining (ASONAM). Niagara Falls, CA.
[29] Dorottya Papp, Balázs Kócsó, Tamás Holczer, Levente Buttyán, and Boldizsár Bencsáth. 2015. ROSCO: Repository Of Signed Code. In Virus Bulletin Conference, Prague, Czech Republic.
[30] Bryan Parno, Jonathan M. McCune, and Adrian Perrig. 2010. Bootstrapping Trust in Commodity Computers. In IEEE Symposium on Security and Privacy. 414–429.
[31] Kaspersky Lab’s Global Research and Analysis Team. 2015. The Duqu 2.0 Persistence Module. (Jun 2015). https://securelist.com/blog/research/70641/the-duqu-2-0-persistence-module/
[33] Swiat. 2012. Flame malware collision attack explained. (Jun 2012). https://blogs.technet.microsoft.com/srd/2012/06/06/flame-malware-collision-attack-explained/
[34] Kurt Thomas, Juan A. Elices Crespo, Ryan Rasti, Jean Michel Picod, Cait Phillips, Marc-André Decoste, Chris Sharp, Fabio Tirelo, Ali Tofigh, Marc-Antoine Courteau, Lucas Ballard, Robert Shield, Nav Jagpal, Moheeb Abu Rajab, Panayiotis Mavrommatis, Niels Provos, Elie Bursztein, and Damon McCoy. 2016. Investigating Commercial Pay-Per-Install and the Distribution of Unwanted Software. In 25th USENIX Security Symposium, USENIX Security 16, Austin, TX, USA, August 10-12, 2016. 721–739. https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/thomas
[35] VirusTotal. 2017. www.virustotal.com. (2017).
[36] Dan Wendlandt, David G. Andersen, and Adrian Perrig. 2008. Perspectives: Improving SSH-style Host Authentication with Multi-path Probing. In USENIX 2008 Annual Technical Conference (ATC'08). USENIX Association, Berkeley, CA, USA, 321–334. http://dl.acm.org/citation.cfm?id=1404014.1404041
[37] Mike Wood. 2010. Want My Autograph? The Use and Abuse of Digital Signatures by Malware. Virus Bulletin Conference September 2010. 1–8. http://www.sophos.com/medialibrary/PDFs/technicalpapers/digital
[38] Liang Xia, Dacheng Zhang, Daniel Gillmor, and Behcet Sarikaya. 2017. CT for Binary Codes. Internet-Draft draft-zhang-trans-ct-binary-codes-04. IETF Secretariat. http://www.ietf.org/internet-drafts/draft-zhang-trans-ct-binary-codes-04.txt http://www.ietf.org/internet-drafts/draft-zhang-trans-ct-binary-codes-04.txt.
[39] Scott Yilek, Eric Rescorla, Hovav Shacham, Brandon Enright, and Stefan Savage. 2009. When Private Keys Are Public: Results from the 2008 Debian OpenSSL Vulnerability. In Proceedings of the 9th ACM SIGCOMM Conference on Internet Measurement (IMC '09). ACM, New York, NY, USA, 15–27. https://doi.org/10.1145/1644893.1644896
[40] Liang Zhang, David Choffnes, Dave Levin, Tudor Dumitras, Alan Mislove, Aaron Schulman, and Christo Wilson. 2014. Analysis of SSL Certificate Reissues and Revocations in the Wake of Heartbleed. In Proceedings of the 2014 Conference on Internet Measurement Conference (IMC '14). ACM, New York, NY, USA, 489–502. https://doi.org/10.1145/2663716.2663758