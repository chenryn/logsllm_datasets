# Advances in Linux Process Forensics with ECFS

## Quick History
- The goal was to design a process snapshot format native to VMA Vudu.
- For more information, visit: [http://www.bitlackeys.org/#vmavudu](http://www.bitlackeys.org/#vmavudu)
- ECFS has proven useful for other projects as well.

## Problem Space
A process address space is complex, consisting of multiple components:
- **ELF Binary Format**: Includes structural nuances.
- **Dynamic Linking**: Involves linking libraries at runtime.
- **Architecture-Specific Data and Structures**: Dependent on the hardware architecture.
- **Kernel-Specific Data and Code**: Such as VDSO (Virtual Dynamic Shared Object) and VSYSCALL.
- **Multiple Threads**: Processes can have multiple threads of execution.

## Threat Landscape
Hackers often infect processes in stealthy and flexible ways:
- **Viruses**
- **Rootkits**
- **Backdoors**
- **Exploitation**

## Tools for Process Forensics
- **Volatility**
- **Rekall**
- **Second Look**
- **ptrace System Call**
- **GDB**
- **Core Dumps**

### Volatility in Kernel Land
- Uses full system memory dumps.
- Utilizes DWARF symbols to gain high-resolution insight into the Linux kernel.
- Can detect virtually any kernel malware.
- Tools like `System.map` and `libdwarf` are helpful for creating kernel profiles.

### Volatility in Process Memory
- **detect_plt**: A plugin by Georg Wicherski for detecting PLT/GOT hooks.
- Process snapshots are raw and provide lower resolution insight compared to the kernel.
- Plugin development is a significant task.
- No profile can exist for each process.

## Full Memory Dump vs. Process Memory Dump
- **Full Memory Dump (Macrocosm)**: Captures the entire system memory.
- **Process Memory Dump (Microcosm)**: Focuses on individual processes.
- **ECFS** focuses on the Microcosm.

## Extended Core File Snapshot (ECFS)
- **Custom Core File Format**: Designed for forensic analysis.
- **Backwards Compatible**: With traditional Linux core files.
- **High-Definition Resolution**: Provides detailed process snapshots.

## Overview of Attack Surface
- **ET_DYN Injection**: Involves `.so` files.
- **ET_REL Injection**: Involves `.o` files.
- **ET_EXEC Injection**: Involves executable files.
  - **LD_PRELOAD**
  - **__libc_dlopen_mode**
  - **sys_ptrace**
  - **VDSO Manipulation**
  - **Shellcode-Based Loading**
- **Symbol and Code Hijacking**
  - **PLT/GOT Poisoning**
  - **Trampolines (Inline Hooks)**
  - **.ctors/.dtors Patching**
  - **Text Segment Modifications and Other Anomalies**

## Process Memory Layout
### Definition of Process Memory Forensics & Analysis
- **Understanding the Process Layout and Structure**
- **Learning the Program's Runtime Characteristics**
- **Identifying Anomalous Code or Data**
- **Identifying Process Infection**
  - **Backdoors**
  - **Rootkits**
  - **Keyloggers**
  - **Viruses**
  - **Protected Binaries**

## Traditional Core Files
- **Snapshot of a Process**: Contains segments (text, data, stack, heap), memory mappings, file mappings, and shared libraries.
- **ELF File Header and Program Headers**: Describe the memory layout.
- **PT_NOTE Segment**: Contains register state, shared library paths, auxiliary vector, and signal information.
- **Dumped by the Kernel**: When a process receives a SIGSEGV.
- **Useful for Debugging**: But limited in forensics due to dependency on the original executable and low-resolution insight.

## Recap on Forensics Goals
- **Detect Shared Library Injection**
- **Detect Function Hijacking (Trampolines)**
- **Detect PLT/GOT Hooks**
- **Detect ELF Object Injection**
- **Function Pointer Redirection**
- **Shellcode Injection**
- **Strange Segment Permissions**
- **Etc.**

## ECFS Technology
- **Transforms a Process Image into an ELF File Format**
- **Makes Process Analysis Easier**
- **Analogous to High-Resolution Photography of a Process**

### ECFS Use Cases
- **Live Malware Analysis**
- **Process Forensics**
- **Breaking Protected Binaries**
- **Pausing and Restarting Processes (Process Necromancy)**

### ECFS Features
- **Hooks into the Linux Kernel's Core Handler**
- **Backwards Compatible with Core Files**
- **Full Symbol Table Reconstruction**
- **Section Header Table Reconstruction**
- **Built-in Heuristics**
- **Custom Sections Containing**
  - File descriptor data
  - Socket data
  - IPC data
  - Signal data
  - Auxiliary vector
  - Compressed `/proc/` directory
- **Re-execution (Pausing and Running Processes Later)**
- **Libecfs (API) for Parsing ECFS Files**

### Core Handler (core_pattern)
- **Configuration**: `/proc/sys/kernel/core_pattern`
- **Piping Core Files**: Into the ECFS handler to construct an ECFS file.
- **Snapshots Without Killing the Process**: Possible without using the core handler.
  ```bash
  echo '|/opt/ecfs/bin/ecfs_handler -t -e %e -p %p -o /opt/ecfs/cores/%e.%p' > /proc/sys/kernel/core_pattern
  ```

### Symbol Table Reconstruction
- **.symtab**: Uses the PT_GNU_EH_FRAME segment for function location and size.
- **.dynsym**: Resolves addresses of shared library functions at runtime.
- **Paramount for Auto Control Flow**: Even with encrypted binaries, ECFS reconstructs the symbol table accurately.

### ECFS Section Headers
- **Reconstructs Original Section Headers**: Such as `.text`, `.data`, `.plt`, `.got.plt`, etc.
- **Adds New Section Headers**: Specific to process analysis.

### ECFS Custom Sections
- **.heap**: Process heap
- **.stack**: Process stack
- **.vdso**: Virtual dynamic shared object
- **.vsyscall**: Vsyscall page
- **._TEXT**: Text segment (different from `.text`)
- **._DATA**: Data segment (different from `.data`)
- **.procfs.tgz**: Compressed `/proc/pid`
- **.prstatus**: Process status info, registers, etc.
- **.fdinfo**: File descriptors, sockets, pipes
- **.siginfo**: Signal and fault info
- **.auxvector**: Auxiliary vector from stack
- **.exepath**: Path of the original executable
- **.personality**: ECFS personality info
- **.arglist**: `char **argv` of the program
- **.fpregset**: Floating point registers

### ECFS Custom Section Types
- **SHT_SHLIB**: Marks shared library segment mapping.
- **SHT_INJECTED**: Marks injected ELF objects (ET_DYN, ET_REL, etc.).
- **SHT_PRELOADED**: Marks shared libraries that were LD_PRELOAD'd.

### Injection Detection Heuristics
- **Detects Injected ELF Objects**: Including shared libraries not loaded by the dynamic linker.
- **Differentiates Between dlopen and __libc_dlopen_mode**.

### Libecfs (API)
- **ECFS Parsing Library**: Simplifies tool development.
- **Program Analysis on Protected Binaries**: Detects advanced process infections and isolates parasite code.
- **Distinct Access to Program Structures and Data Types**.

### readecfs Utility
- **Similar to readelf**: Uses libecfs to parse ECFS files.
- **Extracts Parasites, Code, and Sections**: From ECFS files.
- **Early Development Stage**.

### ECFS Re-execution
- **Snapshots Can Be Taken and Re-executed Later**: Useful for live process migration and sandbox analysis.
- **Beta Stages**: More information at [https://github.com/elfmaster/ecfs_exec](https://github.com/elfmaster/ecfs_exec).

## Demos
### Demo 1: Detecting Anti-Forensics Process Cloaking Technique
- **Take Snapshot**: Of a process infected with Saruman PIE executable injection.
- **Detect Infection**: Using `readelf`.
- **Extract Parasite Code**: Using `readecfs`.
- **More Information**: [http://www.bitlackeys.org/#saruman](http://www.bitlackeys.org/#saruman)

### Demo 2: Detect Userland Rootkit
- **Take Snapshot**: Of a process infected with Azazel userland rootkit.
- **Extract Parasite Code**: Using `readecfs`.
- **Show PLT/GOT Hooks**: Using `detect_plt_hooks`.

### Demo 3: Libecfs for Tool Development
- **detect_plt_hooks.c**: Less than 60 lines of code.
- **Detects ELF Object Injection, Shared Library Injection, and PLT/GOT Hooks**.

### Demo 4: ECFS Snapshot Execution
- **Take Snapshot**: Of a simple process reading from `/etc/passwd` and printing results.
- **Restore Snapshot**: Demonstrates how it restores file streams and continues reading from the file.

## Questions?
- **ECFS**: [https://github.com/elfmaster/ecfs](https://github.com/elfmaster/ecfs)
- **ECFS Snapshot Execution**: [https://github.com/elfmaster/ecfs_exec](https://github.com/elfmaster/ecfs_exec)
- **Saruman Anti-Forensics execve**: [https://github.com/elfmaster/saruman](https://github.com/elfmaster/saruman)