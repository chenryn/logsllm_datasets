### 261.69 Tx Sector
270.20  
Pitch  
RSSI  
RSSI  
SQI  
Azimuth  
RSSI  
Azimuth  
1  
2  
3  
4  
5  
6  
7  
Last feature  
Throughput  
MCS  
MCS  

### 3.4 Applications
To further understand the predictability of throughput using real-world applications, which may not always be sending backlogged traffic, we collected throughput traces for two applications: Virtual Reality (VR) and video streaming. Both applications stream video frames encoded with H.224 compression over TCP. For both applications, the phone moved along all three dimensions at various speeds, as described in Section 3.3.

For the VR application, we pre-encoded a 60 FPS Viking Village scene at 8K resolution and developed a client app that requests frames from a local server. Assuming the VR application needs to make quality adaptation decisions on a per-frame basis, it would require a throughput prediction every 16 ms at a frame rate of 60 FPS. We chose 8K VR because 4K VR does not demand throughput greater than 300 Mbps, which can be supported even by legacy WiFi [24,30]. 

For the video streaming application, we used a 4K, 50 FPS video from the Derf’s collection under Xiph [2], encoded at a bitrate of 1.3 Gbps. The same app was used to request video chunks of 2 seconds from the local server, emulating Adaptive Bitrate (ABR) video streaming applications, which generally download chunks of 2 seconds and would need throughput predictions at that timescale.

### 3.5 Prediction Time (NN Inference Delay)
We developed an Android application that uses the jpmml-evaluator [10] and TensorFlow [14] modules to make predictions for BP8 and RNN models, respectively. The application was run on the phone's GPU to measure the inference delay and memory consumption for each model. Each model was run 100 times, and the averaged results are shown in Table 5. We observed that BP8 runs in less than 0.5 ms, making it suitable for both VR and streaming applications. In contrast, the RNN models run in 2-4 ms and are more suitable for streaming applications. The memory consumption is negligible for all three models.

**Table 5. Inference time and memory consumption of the 3 NN models**

| Model | Inference delay (ms) | Memory consumption (MB) |
|-------|---------------------|-------------------------|
| BP8   | 0.41                | 3.71                    |
| RNN8  | 1.94                | 0.20                    |
| RNN20 | 4.02                | 0.29                    |

### 4 Related Work
**Throughput Prediction Over the Internet:**
Traditional ABR algorithms have been classified into two categories: rate-based [21,25,31] and buffer-based [19,39]. Recently, control-theoretic, data-driven approaches using Model Predictive Control (MPC), such as [15,41,47], have become state-of-the-art for ABR, combining throughput prediction and playback buffer occupancy. More recent studies [29,46] have shown that DNN-based algorithms outperform previous approaches. Our work differs in two key ways: first, we focus on 60 GHz throughput prediction, making predictions at the Gbps scale compared to the Mbps scale in those works. Second, while those works make predictions at timescales of a few seconds, we also look at timescales as low as a few milliseconds for low-latency applications like VR.

**Throughput Prediction Over Wireless Networks:**
Past works have focused on throughput prediction for sub-6 GHz mobile networks at much coarser timescales [17,27]. Lumos5G [32] explores using ML to predict mmWave 5G throughput. However, cellular networks have different characteristics from WLANs, and the ML models developed in [32] use different input features and target much longer timescales. Recent works on mobile 360° video streaming [18,34] consider timescales of a few seconds, similar to their Internet counterparts. Firefly [26] is a recently proposed approach for mobile VR that performs adaptation at the frame level (a few milliseconds). However, Firefly modifies the AP firmware to obtain accurate available bandwidth statistics. In contrast, we consider client-side adaptation, and our prediction models use features readily available in the user space.

**High-Bandwidth, Latency-Sensitive Applications Over 60 GHz:**
The work in [44] showed that performance drops drastically when the AP falls outside the client’s field of view (FoV). Based on this, the authors proposed a binary predictor to predict whether the AP will fall inside the client’s FoV in the next 500 ms. Our work shows that throughput variations are non-negligible at fine timescales, even for static clients. The work in [48] argues that typical VR/Miracast motion is highly unpredictable and can lead to large and sudden drops in signal quality. The work in [16] used the average throughput of the previous 40 ms window to predict the next 30 ms window and showed that it leads to prediction errors of up to 500 Mbps even in static conditions. Based on this result, the authors concluded that throughput cannot be predicted in 60 GHz WLANs. In contrast, our study shows that it is feasible to use 60 GHz throughput prediction for quality adaptation, especially for video streaming applications (the target application of [16]).

**Viewport Prediction:**
Several recent works have looked at viewport prediction for 360° video streaming, e.g., [18,34,37]. These works are orthogonal to ours, as our feature selection study shows that the user’s angular position with respect to the AP has little to no correlation with the resulting throughput when the AP falls within the client’s FoV.

### 5 Conclusion and Future Directions
We presented the first measurement study of throughput predictability on 802.11ad-enabled mobile devices. Our study shows that throughput can be predicted well in real-time using carefully designed small neural network models, with several implications for predictor design. First, our feature selection study shows that using scaled throughput history (keeping the ratio of the history window and the prediction window constant) helps prediction accuracy at the 10 ms timescale but hurts at the 2000 ms timescale. This suggests that a new design that limits the length of history as the model input can potentially achieve good accuracy for all timescales. Second, our feature selection study further shows that, for different timescales, using different sets of features gives the best prediction accuracy. This suggests that a single neural network for use in different applications can potentially improve its prediction accuracy by adapting the set of features according to application latency requirements. Further, in this work, we performed all our experiments in a single environment. An interesting avenue for future work is to study the impact of different environments on throughput predictability.

**Acknowledgements:**
We thank our shepherd, Prof. Özgü Alay, and the anonymous reviewers for their valuable comments. This work was supported in part by the NSF grant CNS-1553447.

**References:**
[1] GHz Throughput Prediction Dataset. https://github.com/NUWiNS/pam2021-60ghz-throughput-prediction-data  
[2] Xiph.org Video Test Media [derf’s collection]. https://media.xiph.org/video/derf/  
[3] Adobe HTTP Dynamic Streaming. https://www.adobe.com/products/hds-dynamic-streaming.html  
[4] Android Sensors Overview. https://developer.android.com/guide/topics/sensors/sensors-overview  
[5] ASUS Republic of Gamers (ROG) Phone. https://www.asus.com/us/Phone/ROG-Phone/  
[6] ASUS Republic of Gamers (ROG) Phone II. https://www.asus.com/us/Phone/ROG-Phone-II/  
[7] Cinetics Lynx 3 Axis Slider. https://cinetics.com/lynx-3-axis-slider/  
[8] Dragonframe Stop Motion Software. https://www.dragonframe.com  
[9] Google Cardboard. https://arvr.google.com/cardboard/  
[10] JPMML-Evaluator - Java Evaluator API for Predictive Model Markup Language (PMML). https://github.com/jpmml/jpmml-evaluator  
[11] Microsoft Smooth Streaming. https://www.microsoft.com/silverlight/smooth-streaming/  
[12] Netgear Nighthawk R X10. https://www.netgear.com/landings/ad7200  
[13] nuttcp - Network Performance Measurement Tool. https://www.nuttcp.net  
[14] TensorFlow for Android. https://www.tensorflow.org/lite/guide/android  
[15] Akhtar, Z., et al.: Oboe: auto-tuning video ABR algorithms to network conditions. In: Proceedings of ACM SIGCOMM (2018)  
[16] Baig, G., et al.: Jigsaw: robust live 4K video streaming. In: Proceedings of ACM MobiCom (2019)  
[17] Bui, N., Michelinakis, F., Widmer, J.: A model for throughput prediction for mobile users. In: Proceedings of IEEE EWC (2014)  
[18] He, J., Qureshi, M., Qiu, L., Li, J., Li, F., Han, L.: Rubiks: practical 360-degree streaming for smartphones. In: Proceedings of ACM MobiSys (2018)  
[19] Huang, T.Y., Johari, R., McKeown, N., Trunnell, M., Watson, M.: A buffer-based approach to rate adaptation: evidence from a large video streaming service. In: Proceedings of ACM SIGCOMM (2014)  
[20] IEEE 802.11 Working Group: IEEE 802.11ad, Amendment 3: Enhancements for Very High Throughput in the 60 GHz Band (2012)  
[21] Jiang, J., Sekar, V., Zhang, H.: Improving fairness, efficiency, and stability in HTTP-based adaptive video streaming with FESTIVE. In: Proceedings of ACM CoNEXT (2012)  
[22] Kajita, S., Yamaguchi, H., Higashino, T., Urayama, H., Yamada, M., Takai, M.: Throughput and delay estimator for 2.4GHz WiFi APs: a machine learning-based approach. In: Proceedings of IFIP WMNC (2015)  
[23] Khan, M.O., Qiu, L.: Accurate WiFi packet delivery rate estimation and applications. In: Proceedings of IEEE INFOCOM (2016)  
[24] Lai, Z., Hu, Y.C., Cui, Y., Sun, L., Dai, N.: Furion: engineering high-quality immersive virtual reality on today’s mobile devices. In: Proceedings of ACM MobiCom (2017)  
[25] Li, Z., et al.: Probe and adapt: rate adaptation for HTTP video streaming at scale. IEEE J. Sel. Areas Commun. 32(4), 719–733 (2014)  
[26] Liu, X., Vlachou, C., Qian, F., Wang, C., Kim, K.H.: Firefly: untethered multi-user VR for commodity mobile devices. In: Proceedings of USENIX ATC (2020)  
[27] Liu, Y., Lee, J.Y.B.: An empirical study of throughput prediction in mobile data networks. In: Proceedings of IEEE GLOBECOM (2015)  
[28] Mangiante, S., Klas, G., Navon, A., GuanHua, Z., Ran, J., Silva, M.D.: VR is on videos in mobile networks. In: Proceedings of VR/AR 360° Network (2017)  
[29] Mao, H., Netravali, R., Alizadeh, M.: Neural adaptive video streaming with Pensieve. In: Proceedings of ACM SIGCOMM (2017)  
[30] Meng, J., Paul, S., Hu, Y.C.: Coterie: exploiting frame similarity to enable high-quality multiplayer VR on commodity mobile devices. In: Proceedings of ACM ASPLOS (2020)  
[31] Mok, R.K.P., Luo, X., Chan, E.W.W., Chang, R.K.C.: QDASH: a QoE-aware DASH system. In: Proceedings of ACM MMSys (2012)  
[32] Narayanan, A., et al.: Lumos5G: mapping and predicting commercial mmWave 5G throughput (2020)  
[33] Pantos, R.: Apple HTTP Live Streaming 2nd Edition. Internet-Draft draft-pantos-hls-rfc8216bis-07, Internet Engineering Task Force (2020). https://datatracker.ietf.org/doc/html/draft-pantos-hls-rfc8216bis-07  
[34] Qian, F., Han, B., Xiao, Q., Gopalakrishnan, V.: Flare: practical viewport-adaptive 360-degree video streaming for mobile devices. In: Proceedings of ACM MobiCom (2018)  
[35] Saha, S.K., et al.: Fast and infuriating: performance and pitfalls of 60 GHz WLANs based on consumer-grade hardware. In: Proceedings of IEEE SECON (2018)  
[36] Saha, S.K., Aggarwal, S., Pathak, R., Koutsonikolas, D., Widmer, J.: MuSher: an agile multipath-TCP scheduler for dual-band 802.11ad/ac wireless LANs. In: Proceedings of ACM MobiCom (2019)  
[37] Shi, S., Gupta, V., Jana, R.: Freedom: fast recovery enhanced VR delivery over mobile networks. In: Proceedings of ACM MobiSys (2019)  
[38] Song, L., Striegel, A.: Leveraging frame aggregation for estimating WiFi available bandwidth. In: Proceedings of IEEE SECON (2017)  
[39] Spiteri, K., Urgaonkar, R., Sitaraman, R.K.: BOLA: near-optimal bitrate adaptation for online videos. In: Proceedings of IEEE INFOCOM (2016)  
[40] Stockhammer, T.: Dynamic adaptive streaming over HTTP: standards and design principles. In: Proceedings of ACM MMSys (2011)  
[41] Sun, Y., et al.: CS2P: improving video bitrate selection and adaptation with data-driven throughput prediction. In: Proceedings of ACM SIGCOMM (2016)  
[42] Sur, S., Pefkianakis, I., Zhang, X., Kim, K.H.: WiFi-assisted 60 GHz wireless networks. In: Proceedings of ACM MobiCom (2017)  
[43] Sur, S., Venkateswaran, V., Zhang, X., Ramanathan, P.: 60 GHz indoor networking through flexible beams: a link-level profiling. In: Proceedings of ACM SIGMETRICS (2015)  
[44] Wei, T., Zhang, X.: Pose information assisted 60 GHz networks: towards seamless coverage and mobility support. In: Proceedings of ACM MobiCom (2017)  
[45] Xu, T., Han, B., Qian, F.: Analyzing viewport prediction under different VR interactions. In: Proceedings of ACM CoNEXT (2019)  
[46] Yan, F.Y., et al.: Learning in situ: a randomized experiment in video streaming. In: Proceedings of USENIX NSDI (2020)  
[47] Yin, X., Jindal, A., Sekara, V., Sinopoli, B.: A control-theoretic approach for dynamic adaptive video streaming over HTTP. In: Proceedings of ACM SIGCOMM (2015)  
[48] Zhou, A., Wu, L., Xu, S., Ma, H., Wei, T., Zhang, X.: Following the shadow: agile 3-D beam-steering for 60 GHz wireless networks. In: Proceedings of IEEE INFOCOM (2018)