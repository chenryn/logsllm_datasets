# PLC Program Analysis and Formal Verification Steps

## Time Requirements for All Case Studies on Raspberry Pi

The time requirements for all case studies on the Raspberry Pi are illustrated in Figure 7. The reported numbers, which show only 4K states for a full 14-horizon analysis, demonstrate the effectiveness of symbolic execution in reducing the state space size.

## Execution Graph for Assembly Way Case Study

Figure 6 presents a sample generated execution graph for the Assembly Way case study with a model checking bound of 4. The safety requirement includes two atomic propositions, \(a\) and \(b\). Each state is assigned a pair of concrete atomic propositions, and state transitions are labeled with path predicates as Boolean expressions in infix order. For readability, symbolic variables and their values are not included in each state. The atomic propositions are both true regardless of the input values in states \(S0\), \(S1\), \(S2\), and \(S3\). However, starting from state \(S3\), the atomic propositions begin to vary. Out of \(S3\)'s four possible children, three have been created, while the path condition for \(\{a: 0, b: 0\}\) was not satisfiable.

## Symbolic Model Checking Engine

TSV runs the symbolic model checking engine on the refined and atomic proposition-level abstract temporal execution graph. Figure 5(d) shows the run times to translate the abstract TEG into the model checker’s syntax, which is not a significant source of overhead. Figure 5(e) displays the time requirements for the symbolic model verification, which take no more than 10 seconds on a desktop and 90 seconds on a Raspberry Pi. In summary, the total average overheads of less than three minutes for checking with a bound of 10 are reasonable for an analysis that is executed only once when new code is uploaded. In the case of malicious code uploading, this bound does not affect productivity, as safety checks are performed independently of plant execution under the previous, legitimate code.

## Analysis Step Contributions

We conducted the same experiments for all our case studies. Figure 7 illustrates the contribution of each analysis step to the verification for each case study on the Raspberry Pi with a bound of 6. The requirements for each step vary due to different factors. The most expensive test case for symbolic execution was the Assembly Way, which explored the most feasible paths. The single most expensive operation was the construction of the TEG for the train interlocking, caused by checking the feasibility of very large path predicates in the symbolic scan cycle. Despite the variance between use cases, the net overhead is within reasonable bounds for all case studies.

## State Space Cardinality

Figure 8 shows the state space cardinality for the generated temporal execution graphs for the case studies. Notably, there is no direct correlation between the state space size and the overall analysis time requirement. For example, the Train case study results in the smallest state space but requires the largest amount of time to complete the overall analysis.

## Scalability

To ensure that TSV can be used for real-world PLC code verifications, it must handle safety properties of realistic sizes, i.e., the number of atomic propositions, efficiently. We investigated typical and frequently-used linear temporal logic-based software specification formulas [10], where the largest predicate includes 5 atomic propositions. Figure 9 shows the results of our experiments with TSV, which can handle requirement predicates with 9 atomic propositions within approximately 2 minutes on average. It is noteworthy that handling additional safety properties only requires rerunning the atomic proposition value concretization on the temporal execution graph. Consequently, the time required to process every new security predicate is often negligible because the execution graph generation is the dominant factor in TSV’s overall performance overhead (see Section VI-D).

## Related Work

### Safety Verification Approaches

We review several previous approaches to safety verification of PLC software. These approaches represent the most applicable in terms of ability to run directly on PLC code without requiring engineers to author an additional high-level system model. As shown in Table I, our approach can check more features than any previous approach to PLC analysis. Existing tools for binary analysis of general-purpose programs are omitted as they do not handle PLC architectural traits like multi-indexed memories.

### Comparison with Related Approaches

- **SAT-based Model Checking**: Park et al. [22] and Groote et al. [14] handle only Boolean logic and timers, respectively. SABOT [18] models timer termination as a nondeterministic Boolean value.
- **Theorem Proving**: Homer [15] and Biha [21] handle numerical instructions but lack rules for overflow checks or mixed bit vector and integer arithmetic.
- **Model Checking**: Canet et al. [6] use the same modeling as TSV for conditional branches but do not implement numerical instructions, leading to state space explosion. TSV's use of symbolic execution eliminates this problem.

### Security Mechanisms for Control Systems

There have been efforts to build novel security mechanisms for control systems. Mohan et al. [19] introduced a monitor that dynamically checks the safety of plant behavior. Goble [13] introduced mathematical analysis techniques to evaluate safety and reliability. However, these solutions focus mainly on accidental failures and do not investigate intentionally malicious actions.

### Binary Analysis Tools

Compared with existing binary analysis tools, TSV is more suitable for verifying temporal properties. Platforms such as BitBlaze [30] are aimed at comparing binary programs, identifying malicious behavior, and exploit generation. TSV is the only solution enabling binary-level analysis by combining symbolic execution and model checking.

### PLC Vendors' Security Measures

PLC vendors include some rudimentary security measures, such as password authorization, typically with a single privilege level. Password authentication can be disabled in all four systems. Certain Siemens systems use client-side authentication, allowing attackers to bypass authentication by implementing their own client for uploading malicious code.

## Conclusions

In this paper, we presented TSV, a trusted verification platform for programmable logic controllers, which allows last-step security verification of control commands before they affect the physical system. TSV achieves reasonable efficiency via a new hybrid symbolic execution-enabled model checking algorithm. We implemented a real-world prototype of the TSV framework on an independent Raspberry Pi chip with minimal attack surface. Our evaluation results show that TSV can be deployed as a bump-in-the-wire portable device for efficient and practical verification of control programs before they are uploaded to programmable logic controllers.

## Acknowledgements

This material is based upon work supported by the Office of Naval Research under Award Number N00014-12-1-0462, and Advanced Research Projects Agency-Energy under Award Number 20130028603. The authors would like to thank Tim Yardley for his constructive comments and technical help with the project.

## References

[1] Shodan. http://www.shodanhq.net, 2013.
[2] Andreas Bauer, Martin Leucker, and Christian Schallhart. Runtime Verification for LTL and TLTL. ACM Transactions on Software Engineering and Methodology, 20(4):14:1–14:64, 2011.
[3] Mordechai Ben-Ari. Mathematical logic for computer science. Springer, 2012.
[4] Dillon Beresford. Exploiting Siemens Simatic S7 PLCs. In Black Hat USA, 2011.
[5] Rakesh B. Bobba, Katherine M. Rogers, Qiyan Wang, Himanshu Khurana, Klara Nahrstedt, and Thomas J. Overbye. Detecting false data injection attacks on DC state estimation. In Proceedings of the First Workshop on Secure Control Systems (SCS), 2010.
[6] G. Canet, S. Couffin, J.-J. Lesage, A. Petit, and P. Schnoebelen. Towards the Automatic Verification of PLC Programs Written in Instruction List. In IEEE International Conference on Systems, Man, and Cybernetics, volume 4, pages 2449–2454, 2000.
[7] Steve Cheung, Bruno Dutertre, Martin Fong, Ulf Lindqvist, Keith Skinner, and Alfonso Valdes. Using Model-based Intrusion Detection for SCADA Networks. In Proceedings of the SCADA Security Scientific Symposium, 2007.
[8] E. Clarke, O. Grumberg, and K. Hamaguchi. Another Look at LTL Model Checking. In Formal Methods in System Design, pages 415–427. Springer-Verlag, 1994.
[9] Leonardo De Moura and Nikolaj Bjørner. Z3: An Efficient SMT Solver. In Tools and Algorithms for the Construction and Analysis of Systems, pages 337–340. Springer, 2008.
[10] Matthew B. Dwyer, George S. Avrunin, and James C. Corbett. Patterns in Property Specifications for Finite-State Verification. In Proceedings of the 21st international conference on Software engineering (ICSE), pages 411–420. ACM, 1999.
[11] Nicolas Falliere, Liam O. Murchu, and Eric Chien. W32.Stuxnet Dossier. Technical report, Symantic Security Response, October 2010.
[12] Orlando Ferrante, Luca Benvenuti, Leonardo Mangeruca, Christos Sofronis, and Alberto Ferrari. Parallel NuSMV: a NuSMV Extension for the Verification of Complex Embedded Systems. In Computer Safety, Reliability, and Security, pages 409–416. Springer, 2012.
[13] William M Goble. Control Systems Safety Evaluation and Reliability. International Society of Automation, 2010.
[14] J.F. Groote, S.F.M. van Vlijmen, and J.W.C. Koorn. The Safety Guaranteeing System at Station Hoorn-Kersenboogerd. In Tenth Annual Conference on Systems Integrity, Software Safety and Process Security, pages 57–68, June 1995.
[15] Ralf Huuck. Semantics and Analysis of Instruction List Programs. Electronic Notes in Theoretical Computer Science, 115:3–18, 2005.
[16] John Leyden. Polish Teen Derails Tram after Hacking Train Network. http://www.theregister.co.uk/2008/01/11/tram hack/, 2008.
[17] Patrick McDaniel and Stephen McLaughlin. Security and Privacy Challenges in the Smart Grid. IEEE Security and Privacy, 7:75–77, 2009.
[18] Stephen McLaughlin and Patrick McDaniel. SABOT: Specification-based Payload Generation for Programmable Logic Controllers.