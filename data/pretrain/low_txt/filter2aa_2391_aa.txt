**PRESENTED BY:**
© Mandiant, A FireEye Company. All rights reserved.

**Investigating PowerShell Attacks**
Defcon 2014 (Pre-Conference Draft)
Authors: Ryan Kazanciyan, Matt Hastings
© Mandiant, A FireEye Company. All rights reserved.

**Background Case Study**
- **Victim**: A Fortune 100 organization
- **Compromised for**: Over 3 years
- **Attack Vector**:
  - Authenticated access to the corporate VPN
  - Command-and-control via scheduled tasks
  - Local execution of PowerShell scripts
  - PowerShell Remoting
  - Network protocols used: WinRM, SMB, NetBIOS
  - Active Directory was also compromised
© Mandiant, A FireEye Company. All rights reserved.

**Why PowerShell?**
- Execute commands
- Reflectively load or inject code
- Download files from the internet
- Enumerate files
- Interact with the registry
- Manage services
- Examine processes
- Retrieve event logs
- Access .NET framework
- Interface with Win32 API
© Mandiant, A FireEye Company. All rights reserved.

**PowerShell Attack Tools**
- **PowerSploit**: Reconnaissance, code execution, DLL injection, credential harvesting, reverse engineering
- **Nishang**: Comprehensive toolkit for various attack scenarios
- **Posh-SecMod**: Security modules for PowerShell
- **Veil-PowerView**: Post-exploitation and reconnaissance
- **Metasploit**: Integration with Metasploit for advanced attacks
- **More tools are continuously being developed**
© Mandiant, A FireEye Company. All rights reserved.

**PowerShell Malware in the Wild**
- Details and examples of real-world PowerShell malware
© Mandiant, A FireEye Company. All rights reserved.

**Investigation Methodology**
- **Sources of Evidence**:
  - Local PowerShell script (e.g., `evil.ps1`)
  - Persistent PowerShell backdoor (e.g., `backdoor.ps1`)
  - Registry
  - File System
  - Event Logs
  - Memory
  - Network Traffic
- **Remote Execution Methods**:
  - WinRM
  - PowerShell Remoting
© Mandiant, A FireEye Company. All rights reserved.

**Attacker Assumptions**
- The attacker has administrative privileges (local or domain) on the target system.
- The attacker has network access to the necessary ports on the target system.
- The attacker can use other remote command execution methods to:
  - Enable execution of unsigned PowerShell scripts
  - Enable PowerShell remoting
© Mandiant, A FireEye Company. All rights reserved.

**Version Reference**
- **PowerShell Versions**:
  - 2.0: Default
  - 3.0: Default (R2), requires WMF 3.0 Update
  - 4.0: Default (SP1), requires WMF 4.0 Update
- **Memory Analysis**:
  - Scenario: Attacker interacts with the target host through PowerShell remoting.
  - What is left in memory on the accessed system?
  - How can it be found?
  - How long does it persist?
© Mandiant, A FireEye Company. All rights reserved.

**WinRM Process Hierarchy**
- **Client**:
  - `Invoke-Command {c:\evil.exe}`
  - `wsmprovhost.exe`
  - `svchost.exe (DcomLaunch)`
  - `evil.exe`
- **Remote Host**:
  - `wsmprovhost.exe`
  - `Get-ChildItem C:\`
  - `svchost.exe (WinRM)`
  - `Invoke-Command {Get-ChildItem C:\}`
  - `Kernel`
  - `Invoke-Mimikatz.ps1`
© Mandiant, A FireEye Company. All rights reserved.

**Remnants in Memory**
- **Process Hierarchy**:
  - `wsmprovhost.exe`
  - `svchost.exe (DcomLaunch)`
  - `evil.exe`
  - `wsmprovhost.exe`
  - `Get-ChildItem C:\`
  - `svchost.exe (WinRM)`
- **Persistence**:
  - Terminate at the end of the session
  - Remnants of command-and-control persist in memory
- **Command History**:
  - Command history in memory
© Mandiant, A FireEye Company. All rights reserved.

**Example: In-Memory Remnants**
- **SOAP in WinRM service memory**:
  - After an interactive PsSession with the command: `echo teststring_pssession > c:\testoutput_possession.txt`
- **WinRM service memory**:
  - `Invoke-Mimikatz.ps1` executed remotely on the target host
© Mandiant, A FireEye Company. All rights reserved.

**What to Look For?**
- **XML / SOAP strings**:
  - `/wsman.xsd`
  - Known attacker filenames
  - Context around hits
- **Challenges**:
  - This process can be time-consuming and complex

**How Long Will Evidence Remain?**
- **wsmprovhost.exe**:
  - Best source of intact evidence
  - Only lasts until the PowerShell session exits
- **svchost.exe for WinRM**:
  - Fragments of evidence
  - Retention depends on the number of remoting sessions
  - May last until reboot
- **Kernel pool**:
  - Fragments of evidence
  - Brief lifespan, depends on system utilization
- **Pagefile**:
  - Fragments of evidence
  - Brief lifespan, depends on system utilization
  - May last beyond reboot
© Mandiant, A FireEye Company. All rights reserved.

**Memory Analysis Summary**
- **Timing is crucial**
- **Challenges**:
  - Recovering evidence can be difficult
  - Many variables affect the persistence of evidence
  - System uptime
  - Memory utilization
  - Volume of WinRM activity
© Mandiant, A FireEye Company. All rights reserved.

**Event Logs**
- **Scenario**: Attacker interacts with the target host through local PowerShell execution or PowerShell remoting.
- **Questions**:
  - Which event logs capture this activity?
  - Level of logging detail?
  - Differences between PowerShell 2.0 and 3.0?
© Mandiant, A FireEye Company. All rights reserved.

**PowerShell Event Logs**
- **Application Logs**:
  - `Windows PowerShell.evtx`
  - `Microsoft-Windows-PowerShell/Operational.evtx`
  - `Microsoft-Windows-WinRM/Operational.evtx`
- **Analytic Logs**:
  - `Microsoft-Windows-PowerShell/Analytic.etl`
  - `Microsoft-Windows-WinRM/Analytic.etl`
© Mandiant, A FireEye Company. All rights reserved.

**PowerShell 2.0 Event Logging**
- **What you get**:
  - Start and stop times of activity
  - Loaded providers
  - User account context
- **What you don’t get**:
  - Detailed history of executed commands
  - Console input/output
  - Analytic logs help somewhat but are disabled by default
  - High volume of events
  - Encoding and fragmentation issues
© Mandiant, A FireEye Company. All rights reserved.

**Local PowerShell Execution**
- **Event ID 400**: Engine state is changed from None to Available.
- **Event ID 403**: Engine state is changed from Available to Stopped.
- **Start and stop times of the PowerShell session**

**PowerShell 3.0 or Greater**
- **Event ID 40961**: PowerShell console is starting up.
- **Event ID 4100**: Error message indicating that a script cannot be loaded because running scripts is disabled.
- **Start time of the PowerShell session**
- **Error provides the path to the PowerShell script**

**PowerShell Analytic**
- **Event ID 7937**: Command `test.ps1` is started.
© Mandiant, A FireEye Company. All rights reserved.