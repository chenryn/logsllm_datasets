### Performance Evaluation of Dyno-S, Dyno, and BFT-SMaRt

#### Latency
We evaluate the latency of membership requests for Dyno and Dyno-S. We set \( f = 1 \) and have one client continuously submit regular requests. A replica submits a membership request (join or leave) after 5000, 10000, and 50000 requests are submitted, denoted as \( b \) in the figures. The latency for agreement is shown in Fig. 9d.

- **Dyno**: The average latency for Dyno ranges from 50ms to 100ms, similar to that of regular requests.
- **Dyno-S**: Due to the view change protocol executed upon every membership change, the latency for Dyno-S is significantly higher. The latency breakdown for Dyno-S is detailed in Fig. 9a, highlighting that the view change is the primary bottleneck. The latency increases with more processed requests before the view change.

**State Transfer Latency**:
Each new replica performs a state transfer upon joining the system. We assess the state transfer latency for each experiment, with results for Dyno shown in Fig. 9b. The latency is broken down into network communication and the processing of historic client requests. As \( b \) increases, the latency becomes significantly higher due to the need to synchronize a large number of requests. In contrast, the latency for agreement is almost negligible.

**Checkpoint Frequency Impact**:
For the experiment with \( b = 10000 \), we vary the checkpoint frequency and assess the join request latency. As shown in Fig. 9c, checkpoint frequencies do not significantly impact the latency. This is expected because each replica synchronizes all historic transactions, making the network bandwidth consumption dominated by the state transfer.

#### Throughput and Scalability
We evaluate the throughput of Dyno for \( f = 1 \), \( f = 2 \), and \( f = 5 \). As shown in Fig. 9e, when \( f = 1 \), the peak throughput of Dyno is 76 ktx/s, which is among the highest for partially synchronous BFT protocols. As \( f \) increases, the performance degrades, a common observation for most BFT protocols. The peak throughput of Dyno and BFT-SMaRt is reported in Fig. 9f, with Dyno achieving higher peak throughput, partly due to the efficiency of its underlying implementation.

#### Performance under Membership Requests
We assess the performance for membership requests for Dyno with \( f = 1 \) and 400 clients submitting regular requests concurrently. We evaluate three scenarios: 1) join requests, 2) leave requests, and 3) both join and leave requests.

**Performance under Join Requests**:
- **Single Join Request**: One replica submits a join request, and we assess the throughput of both a g-correct replica (correct since time 0) and the new replica. As shown in Fig. 9g, the system does not suffer any performance degradation upon a join request.
- **Multiple Join Requests**: Starting with 4 replicas (\( f = 1 \)), we issue membership requests and add replicas one after another until the system has 8 replicas. The throughput for a g-correct replica and each new replica is shown in Fig. 9h. The system experiences performance degradation upon receiving each join request but resumes normal operation after a period. For instance, when the first replica joins, the throughput drops from an average of 50 ktx/s to around 30 ktx/s, a 40% degradation. After the state transfer completes, the throughput returns to 50-60 ktx/s. With each additional replica, the overall system throughput gradually degrades, as expected with more replicas. When the system has 8 replicas, the overall throughput decreases from 50-60 ktx/s to 40-50 ktx/s.

**Comparison with BFT-SMaRt**:
We match most system configuration parameters and evaluate BFT-SMaRt in the same setting. The results are shown in Fig. 9i. Unlike Dyno, in BFT-SMaRt, the throughput of new replicas is consistently lower than that of existing ones. Additionally, the overall throughput degradation as replicas join is consistently lower for Dyno compared to BFT-SMaRt.

**Performance under Leave Requests**:
Starting with 10 replicas (\( f = 3 \)), we let 6 replicas leave one after another. The system throughput is shown in Fig. 9j. The throughput is more stable, primarily because a replica can directly leave the system upon the delivery of the remove request. The performance for BFT-SMaRt is similar, as shown in Fig. 9k, but the overall throughput is about 30%-40% lower than that of Dyno.

**Performance under Multiple Join and Leave Requests**:
We also assess the performance under both join and leave requests, triggering 3-5 random join or leave requests under 30-second intervals. Starting with 4 replicas, we evaluate the performance for both Dyno and BFT-SMaRt. The performance of a g-correct replica is presented in Fig. 9l, showing similar results to those under only join or leave requests. BFT-SMaRt may experience very low (close to 0) throughput during some requests, while Dyno's performance is generally more stable.

**Frequent Membership Requests**:
We evaluate Dyno under frequent membership requests, starting with 10 replicas and letting replicas frequently join and leave under random intervals. As shown in Fig. 9o, with frequent membership requests, the system throughput becomes more turbulent due to frequent state transfers for newly joined replicas.

### Conclusion
We study dynamic BFT protocols where replicas can join and leave the system. We formally define security definitions for dynamic BFT and present different meaningful variants. We introduce Dyno, a highly efficient dynamic BFT protocol. Our deployment with up to 30 servers demonstrates that Dyno efficiently handles membership requests with low cost.

### Acknowledgment
We thank Xiaoyun Wang, Xiao Sui, Baohan Huang, and the anonymous reviewers for their help and comments on the paper. Sisi is also with Shandong Institute of Blockchain. Sisi was supported in part by the Tsinghua Independent Research Program, Shandong Key Research and Development Program under grant No. 2020ZLYS09, and the National Key Research and Development Program of China under grant No. 2018YFA0704701. Haibin was supported in part by the Teli Young Scholar program.

### References
[References are listed as provided in the original text.]

### Normal-Case Operation Oracle of Dyno
We describe the normal-case operation of Dyno and how the `init()` and `deliver()` events are triggered. We use Bracha’s broadcast paradigm and PBFT notations to present the protocol. The pseudocode is illustrated in Fig. 10.

**Initialization**:
- **Variables**: `v, c, M, TM` (view, configuration, membership, temporary membership)
- **Events**:
  - Upon receiving a valid `m = ⟨PRE-PREPARE, v', c', s, batch⟩`:
    - If `⟨ADD, j, m⟩ ∈ batch`, update `TM ← TM ∪ {pj}`
  - Upon receiving 2fc + 1 matching `⟨PREPARE, v, c, s, δ⟩`:
    - If non-primary, trigger `init(batch)`
    - Broadcast `⟨PREPARE, v, c, s, h(batch)⟩` to `TM`
    - Set `prepared(δ, v, c, s) ← true`
    - Broadcast `⟨COMMIT, v, c, s, δ⟩` to `TM`
  - Upon receiving fc + 1 matching `⟨COMMIT, v, c, s, δ⟩`:
    - Broadcast `⟨COMMIT, v, c, s, δ⟩` to `TM`
  - Upon receiving 2fc + 1 matching `⟨COMMIT, v, c, s, δ⟩`:
    - Trigger `deliver(batch)`

**Oracle Functions**:
- `func init(batch)`: Deliver `batch` where `h(batch) = δ`. If leader, broadcast `⟨PRE-PREPARE, v, c, s, batch⟩` to `TM`.
- `func deliver(batch)`: Handle the `deliver()` event.

### Configuration Discovery Options
We present two alternatives for configuration discovery: lazy discovery and configuration master.

**Lazy Discovery**:
- Delays the discovery of the configuration after the delivery of the request.
- A new replica or client directly obtains the universe, i.e., Π, and verifies the configuration history accordingly.

**Configuration Master**:
- A standalone service that all replicas/clients can query to obtain the latest configuration.
- Replicas and clients know the identities of all replicas in the configuration master.
- The master passively learns the latest configuration. If the configuration changes, replicas send a set of 2fc + 1 `⟨COMMIT⟩` messages together with the corresponding `⟨PRE-PREPARE⟩` message to the configuration master.
- The 2fc + 1 `⟨COMMIT⟩` messages serve as a proof of delivery, and the `⟨PRE-PREPARE⟩` messages verify the membership request(s).

**Initialization**:
- **Variables**: `c, Mc, chist` (configuration, membership, and configuration history)
- **Functions**:
  - `func ObtainConf()`: Send `⟨QUERY, i⟩` to CMaster. Upon receiving `⟨CONF, c', M'c, chist'⟩`, if `chist'` is valid and `c' > c`, update `chist ← chist'`, `c ← c'`, and `Mc ← M'c`.
  - `func as a configuration master`:
    - Upon receiving `⟨QUERY, j⟩`, send `⟨CONF, c, Mc, chist⟩` to `pj`.
    - Upon receiving 2fc + 1 `⟨COMMIT, v, c, s, h(batch)⟩` messages, update `chist ← chist ∪ M`, and update `c` and `Mc`.

The configuration master does not need to be replicated using SMR, as the entire configuration history is totally ordered and can be self-validated.