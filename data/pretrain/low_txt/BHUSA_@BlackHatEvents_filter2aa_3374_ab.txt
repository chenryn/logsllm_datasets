# BlackHat USA Presentation: Exploit Detection and Mitigation

## Agenda
- Motivation
- Learn from History (and Now)
- One Road Leads to Rome
- Results
  - The Story of CVE-2021-1732
  - The Story of CVE-2021-33739
  - The Story of a “Patched” 1day
- Takeaways
- Suggestions
- Insights
- Acknowledgements
- Q&A

## Information Classification: General

### Techniques and APIs
- **GetBitmapBits / SetBitmapBits**
- **GetPaletteEntries / SetPaletteEntries**
- **CreatePipe / NtFsControlFile**
- **Previous Mode + NtReadVirtualMemory / WriteVirtualMemory**

**Note:** Not all techniques are suitable for YARA rules.

### Building the Right Rule
1. **Write Rules According to Signatures of Each Stage of Exploitation**
2. **Write Rules for the Latest Exploit Techniques**
3. **Write Rules for the Most Likely Vulnerabilities**

#### Latest Exploit Techniques
- **Arbitrary Address Read with the Help of Pipe Attribute**
  - July 2020, "Scoop the Windows 10 pool!" by Paul Fariello and Corentin Bayet of Synacktiv
- **Arbitrary Address Read and Write via Windows Notification Facility (WNF)**
  - June 2021, "PuzzleMaker attacks with Chrome zero-day exploit chain" by Kaspersky
  - July 2021, "CVE-2021-31956 Exploiting the Windows Kernel (NTFS with WNF)" by Alex Plaskett
  - July 2021, "Windows Pool OverFlow Exploit" by YanZiShuang (@YanZiShuang)

**These two exploit techniques are universal. We wrote rules for them and caught some high-value samples.**

### Writing Rules for the Most Likely Vulnerability
- **Desktop Windows Manager (DWM) Vulnerability**
  - April 13, 2021: Kaspersky disclosed CVE-2021-28310, an in-the-wild 0-day in the Windows DWM component.
  - May 03, 2021: ZDI published another blog, disclosing CVE-2021-26900, also a vulnerability in the Windows DWM component.
  - May 22, 2021: We caught a new in-the-wild DWM 0-day, CVE-2021-33739.

### Building a Workable System
- **Notification Mechanisms:**
  - **VirusTotal:** PI:EMAIL
  - **Own Products:** Email (Slack is also a good choice)
- **Reproduce and Classify Exploits:**
  - Prepare three types of reproduce environments: Nday, 1day, 0day
  - VMs of Windows 7, Windows 10, Windows 11, covering both x86 and x64
- **Skills for Debugging Windows LPE Exploits:**
  - Driver Verifier
  - Windows Remote Debugging (when debugging dwm.exe)

### Testing and Improving the System
- **Eliminate False Positives and False Negatives:**
  1. Use historical in-the-wild samples to test the rules.
  2. Use public PoCs/exploits to test the rules.
  3. Write PoCs/exploits and test the rules (when public PoCs/exploits are unavailable).
  4. Apply the rules to a large number of samples for stress testing.
  5. Continuously convert the latest exploit techniques into rules and test them.

### Case Studies
#### The Story of CVE-2021-1732
- **Data Source:** The in-the-wild sample was from our private dataset.
- **Why It Caught Our Attention:** It used HMValidateHandle to leak kernel addresses.
- **Usage Scenario:** The sample was used as a standalone component and needed a process ID as a parameter.
- **Highlights:**
  - Targeted the latest version of Windows (Windows 10 1909 x64).
  - Compiled in May 2020.
  - Used GetMenuBarInfo to build an arbitrary address read primitive.
  - Performed system version checks and detected specific antivirus software.
  - Targeted Windows 10 1709 x64 to Windows 10 1909 x64.
- **More Details:** Refer to our blog.

#### The Story of CVE-2021-33739
- **Data Source:** The in-the-wild sample was from VirusTotal (compiled from GitHub).
- **Why It Caught Our Attention:** It hit a rule we wrote for the most likely vulnerability (Desktop Window Manager).
- **Side Note:** The author accidentally introduced this new bug while writing an exploit for CVE-2021-26868.
- **Exploit Status Published by MSRC:**
  - The first vulnerability was fixed in the May 2021 patch, but the second vulnerability was still a zero-day.
  - The second vulnerability was not strictly a zero-day in the wild, but it was discovered during in-the-wild hunting.

**Root Cause of CVE-2021-33739:**
- **Unbalanced Reference Count on CInteractionTrackerBindingManager Object in dwmcore.dll:**
  - Normally, the object calls `ProcessSetTrackerBindingMode` twice to add reference count by 2.
  - In the vulnerability scenario, it calls `ProcessSetTrackerBindingMode` only once, leading to a Use-After-Free (UAF) in the second `RemoveTrackerBindings` call.

#### The Story of a “Patched” 1day
- **Data Source:** The in-the-wild sample was from VirusTotal.
- **Why It Caught Our Attention:** It hit a rule we wrote for the latest exploit techniques (Pipe Attribute).
- **Usage Scenario:** The sample was used as a standalone component and adapted to various Windows OS versions.
- **Basic Information:**
  - A type confusion vulnerability in clfs.sys.
  - Caught in October 2021, "patched" in September 2021.
  - May be one of CVE-2021-36963, CVE-2021-36955, CVE-2021-38633, or none of them.
- **Root Cause:**
  - clfs.sys lacks checks on Client Context Offset, allowing an attacker to provide an invalid offset.
- **Exploit Details:**
  - Leveraged the vulnerability to make the first Client Context Offset point to the second Container Context Offset, then used a 1-bit flip to change the second Container Context Offset.
  - Arbitrary address write primitive in `CClfsBaseFilePersisted::RemoveContainer`.
  - Arbitrary address read primitive using the "Pipe Attribute" technique described in "Scoop the Windows 10 pool!" (SSTIC2020).

**September 2021 Patch:**
- The patch only checked the value of Client Context Offset to ensure it couldn't be less than 0x1368.
- **Has It Been Fixed Thoroughly?**
  - Constructing a Client Context Offset greater than 0x1368 and pointing directly to the `CClfsContainer` object causes a BSOD.
  - A variant of this "patched" 1day was reported to MSRC in December 2021 and fixed in April 2022 as CVE-2022-24481.

### Suggestions
1. Choose the most suitable method within your capability.
2. Carefully study historical cases.
3. Keep an eye out for new variants of new in-the-wild vulnerabilities.

### Insights
1. More vulnerabilities in clfs may appear in the future.
2. The "Pipe Attribute" method will be used again in the future.
3. Future popular techniques:
   - Arbitrary address read/write with the help of WNF, POC2021
   - Arbitrary address read/write with the help of ALPC, Blackhat Asia 2022
   - Arbitrary address read/write with the help of I/O Ring, TyphoonCon 2022

### Acknowledgements
- Thanks to the team at DBAPPSecurity WeBin Lab.
- Thanks to @megabeets_ and @EyalItkin for their inspiring blogs.
- Thanks to Xiaoyi Tu and Dong Wu of DBAPPSecurity Lieying Lab.
- Thanks to @YanZiShuang and @oct0xor for sharing debugging tips.

### Thank You!
Questions?