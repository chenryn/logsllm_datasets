# Max Delay (Milliseconds) and Chaff Rate

| Chaff Rate | 0% | 10% | 25% | 50% |
|------------|----|-----|-----|-----|
| 800        | t  | e   | a   | R   |
| 1000       | n  | o   | i   | t   |

Detection Rate:
- 1.0
- 0.9
- 0.8
- 0.7
- 0.6
- 0.5
- 0.4
- 0.3
- 0.2
- 0.1
- 0.0

## Effect of Time-Slot Length, Binary Sketch Length, and Correlated Flow Duration

### Figure 6
**Effect of Time-Slot Length:**
- For 60-second long correlated flows and 512-bit binary sketches.
- Setting the time-slot length to 500 milliseconds (Figure 5) performs better than both 300 and 1000 milliseconds.

### Figure 7
**Effect of Sketch Length:**
- For 60-second long correlated flows and 500-millisecond time-slots.
- The detection rate increases with the increased sketch length.

### Figure 8
**Effect of Correlated Flow Duration:**
- For 500-millisecond time-slots and 512-bit binary sketches.
- Increasing flow duration increases the detection rate.

## Attack Scenario and Detection Scheme

An attacker sends attack packets to the monitored intermediate node over multiple ingress flows and merges them into one egress flow. To detect such cases, a stepping-stone detection scheme should compare superpositions of several ingress flows with superpositions of several egress flows for possible correlations. Unfortunately, such a search is very costly since every possible combination of the flows must be tested. However, due to the linear transformation employed by the proposed scheme, the integer-array sketch of the superposition of a set of flows is equal to the summation of the sketches of those flows. This linearity property enables quick and efficient computation of the binary sketch of any given combination of flows. Hence, one can potentially combine this linearity property with an appropriate optimization technique, such as dynamic programming or gradient search, to efficiently search for a small set of ingress and egress flows that are collectively correlated. We leave the exploration of this issue as future work.

## Related Work

### Stepping-Stone Detection
- **Staniford-Chen and Heberlein (1995):** Proposed the first technique for stepping stone detection based on payload thumbprints.
- **Zhang and Paxson (2000):** Developed a flow correlation algorithm based on occurrence times of packet bursts and silence moments.
- **Yoda and Etoh (2000):** Proposed a timing-based algorithm where correlation was defined over sequence number vs. time curves.
- **He and Tong (2006):** Formulated the stepping stone detection problem as nonparametric hypothesis testing.
- **Wang et al. (2002):** Used inter-packet delay information to compute the correlation between two flows.

These techniques are robust against packet delays and jitter to some extent. However, when attackers insert chaff packets into flows, the correlation mechanisms used by these schemes start to break down. Donoho et al. (2002) argued that attackers have maximum tolerable delay constraints and that the correlation between stepping-stone flows can be detected regardless of chaff packets if flows last long enough. Blum et al. (2004) presented confidence bounds on the stepping stone detection problem under a maximum tolerable delay constraint. Their algorithm is based on the difference in the number of packets between two flows at a given time. Zhang et al. (2006) proposed a packet-timing comparison algorithm focusing on random delays and chaff. Strayer et al. (2003) proposed a State-Space algorithm similar to identifying wireless receiver/transmitter pairs. Wu et al. (2007) improved the chaff resistance properties of Blum et al.'s (2004) method. Coskun and Memon (2007) proposed a technique to efficiently identify relay nodes in real time. Wang et al. (2003), Pyun et al. (2007), and Houmansadr et al. (2009) proposed active stepping-stone detection schemes based on watermarking.

### Data Stream Sketching
Data sketching techniques can be viewed as linear projections of an input stream on appropriate basis functions. They are widely used to answer efficient queries on streaming data, such as range-sum, heavy hitters, quantiles, and inner products.

### Robust Multimedia Hashing
The proposed technique resembles robust hashing schemes, which represent an input signal by a short array (robust hash) resistant to small perturbations. In multimedia signal processing, robust hash functions are often used to identify and authenticate multimedia contents (audio, video, and images) in the presence of perceptually preserving modifications such as compression and minor filtering.

## Conclusion

In this paper, we presented a novel stepping-stone detection scheme based on an online algorithm that continuously maintains sketches of network flows' packet-timing information from a stream of captured packets at the border of a network. These sketches are then used to efficiently identify correlated flows, as correlated flows have similar sketches. The proposed scheme computes flow sketches very efficiently by a streaming algorithm, which performs a few arithmetic operations for each packet. The sketches of a pair of correlated flows remain similar even if the flows encounter various timing perturbations, thereby allowing the proposed scheme to detect correlated flows even under delays, jitter, chaff, etc., to some extent. Finally, using the fact that correlated flows have similar sketches, the proposed scheme identifies correlated ingress/egress flow pairs among \( n \) ingress and \( m \) egress flows in \( O(n + \sqrt{nm}) \) time, compared to known techniques requiring \( O(nm) \).

Our experiments verify that the proposed scheme is resistant to chaff and packet delays to some extent. However, there is still room for improvement. We observed that using longer time-slots to be more resistant to packet delays causes uncorrelated flows to exhibit some similarities, negatively affecting detection performance. Shorter time-slots have limited resistance to packet delays. To combine the advantages of both sides and potentially improve resistance to packet delays, we plan to use randomly varying time-slot lengths. Additionally, using a different threshold for each pair of flows, considering features such as flow durations and the number of packets, will potentially improve detection performance. We leave the exploration of these improvements as future work.

## References

[1] G. Cormode and S. Muthukrishnan, “An improved data stream summary: The count-min sketch and its applications,” J. Algorithms, vol. 55, pp. 29–38, 2004.
[2] M. Charikar, K. Chen, and M. Farach-Colton, “Finding frequent items in data streams,” in ICALP ’02: Proceedings of the 29th International Colloquium on Automata, Languages and Programming. London, UK: Springer-Verlag, 2002, pp. 693–703.
[3] A. C. Gilbert, Y. Kotidis, S. Muthukrishnan, and M. J. Strauss, “How to summarize the universe: Dynamic maintenance of quantiles,” in In VLDB, 2002, pp. 454–465.
[4] D. Schnackenberg, H. Holliday, R. Smith, K. Djahandari, and D. Sterne, “Cooperative intrusion traceback and response architecture (CITRA),” in Proceedings of the DARPA Information Survivability Conference and Exposition, 2001.
[5] D. Schnackenberg, K. Djahandari, and D. Steme, “Infrastructure for intrusion detection and response,” in Proceedings of the DARPA Information Survivability Conference and Exposition, 2000.
[6] Y. Zhang and V. Paxson, “Detecting stepping stones,” in Proceedings of the 9th USENIX Security Symposium, August 2000, pp. 171–184.
[7] A. Blum, D. Song, and S. Venkataraman, “Detection of interactive stepping stones: Algorithms and confidence bounds,” in Conference of Recent Advance in Intrusion Detection (RAID), Sophia Antipolis, French Riviera, France, September 2004.
[8] K. Yoda and H. Etoh, “Finding a connection chain for tracing intruders,” in F. Guppens, Y. Deswarte, D. Gollamann, and M. Waidner, editors, 6th European Symposium on Research in Computer Security - ESORICS 2000 LNCS -1985, Toulouse, France, October 2000, pp. 3949.
[9] L. Zhang, A. Persaud, A. Johnson, and Y. Guan, “Stepping stone attack attribution in non-cooperative IP networks,” in Proceedings of the 25th IEEE International Performance Computing and Communications Conference (IPCCC 2006), April 2006.
[10] H.-C. Wu and S.-H. S. Huang, “Detecting stepping-stone with chaff perturbations,” in AINAW ’07: Proceedings of the 21st International Conference on Advanced Information Networking and Applications Workshops, 2007, pp. 85–90.
[11] D. Donoho, A. G. Flesia, U. Shankar, V. Paxson, J. Coit, and S. Staniford, “Multiscale stepping-stone detection: Detecting pairs of jittered interactive streams by exploiting maximum tolerable delay,” in Fifth International Symposium on Recent Advances in Intrusion Detection, Lecture Notes in Computer Science 2516, New York, Springer, 2002.
[12] J. Haitsma and T. Kalker, “A highly robust audio fingerprinting system with an efficient search strategy,” Journal of New Music Research, vol. 32, no. 2, pp. 211–221, 2003.
[13] X. Fu, B. Graham, R. Bettati, and W. Zhao, “On effectiveness of link padding for statistical traffic analysis attacks,” in ICDCS ’03: Proceedings of the 23rd International Conference on Distributed Computing Systems, 2003, p. 340.
[14] P. Venkitasubramaniam and L. Tong, “Anonymous networking with minimum latency in multihop networks,” in SP ’08: Proceedings of the 2008 IEEE Symposium on Security and Privacy (SP 2008), 2008, pp. 18–32.
[15] W. Wang, M. Motani, and V. Srinivasan, “Dependent link padding algorithms for low latency anonymity systems,” in CCS ’08: Proceedings of the 15th ACM conference on Computer and communications security, 2008, pp. 323–332.
[16] X. Wang and D. S. Reeves, “Robust correlation of encrypted attack traffic through stepping stones by manipulation of interpacket delays,” in CCS ’03: Proceedings of the 10th ACM conference on Computer and communications security, 2003, pp. 20–29.
[17] Y. J. Pyun, Y. H. Park, X. Wang, D. Reeves, and P. Ning, “Tracing traffic through intermediate hosts that repacketize flows,” in INFOCOM 2007. 26th IEEE International Conference on Computer Communications. IEEE, 2007, pp. 634–642.
[18] A. Houmansadr, N. Kiyavash, and N. Borisov, “Rainbow: A robust and invisible non-blind watermark for network flows,” in NDSS’09: 16th Annual Network and Distributed System Security Symposium, 2009.
[19] S. Staniford-Chen and L. Heberlein, “Holding intruders accountable on the internet,” in Proc. IEEE Symposium on Security and Privacy, Oakland, CA, May 1995, p. 3949.