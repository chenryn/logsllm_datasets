# Discovering Flash Player Zero-Day Attacks in the Wild Using Big Data

**Speaker: Peter Pi (@heisecode)**

## Agenda
- **Introduction**
  - Who am I?
  - Background
- **Discovering Flash 0-day attacks from large sample sets**
- **Vector Length Misuse**

## About Me
- Security researcher
- APT (Advanced Persistent Threat) product developer
- Interested in discovering vulnerabilities and writing exploits
- Recently focused on Flash and Android
- Hobbies: War3 & Ping Pong

### Notable Discoveries
- **CVE-2015-0313**: Flash 0-day attack
- **CVE-2015-5122 & CVE-2015-5123**: Discovered from a hacked team
- Found several newly patched Flash attacks

### Blog
- [Peter Pi's Blog](http://blog.trendmicro.com/trendlabs-security-intelligence/author/peterpi/)
- Will publish some Android bugs I found

## Flash Year
- **Browsers' UAF (Use After Free) Misuse and Java Pop-up Window Vulnerabilities**: 
  - Flash Player became the weakest link among popular targets in PCs.
- **Zero-Day Attacks in 2015**:
  - Most zero-day attacks targeted Flash Player:
    - CVE-2015-0310, CVE-2015-0311, CVE-2015-0313, CVE-2015-3043, CVE-2015-3113, CVE-2015-5119, CVE-2015-5122
- **Newly Patched N-day Attacks in Exploit Kits**:
  - Almost all were based on Flash Player vulnerabilities:
    - CVE-2014-8439, CVE-2014-9163, CVE-2014-9162, CVE-2015-0336, CVE-2015-0359, CVE-2015-3090, etc.

## Motivation
- In late 2014, I aimed to disclose Flash 0-day attacks to predict future trends.
- Disclosing newly patched n-day attacks also provides value to users.

## Background
- **Data Source**:
  - Tens of millions of suspicious SWF files in our Hadoop server, with thousands added daily.
  - This is a valuable resource for finding 0-day attacks.
  - The term "big data" in the title is a bit of a trick; it's not related to data mining or machine learning.

## Challenges
- **Handling Large Sample Sets**:
  - Need an automated process with a very low false alert rate and fast processing speed.
  - Final manual checks should only handle a few Flash samples.

## Tool Requirements
- **FlashExploitDetector (FED)**:
  - An IE BHO (Browser Helper Object) written in C++.
  - Dynamically hooks Flash OCX when Flash Player is loaded into an IE tab.
  - Hooks IE events to get the current URL name.
  - Logs detection events, saving the time and SWF/URL name.
  - Enters an infinite loop upon detection, waiting for the automation process to kill IE and continue with the next SWF file.

## Automation Process
- **Python Script**:
  - Registers FED BHO using `regsvr32.exe`.
  - Loads a HTML containing a SWF in IE.
  - FED hooks Flash Player OCX to detect exploits.
  - Kills IE processes to load the next SWF file in a new IE instance.
  - Parses log files to get the detected SWF files.

## Key Points
- **Achieving Low False Alert Rate**:
  - **Vulnerability Triggers**: One vulnerability, one rule. Not useful here.
  - **Vector Heap Spray**: Good, but still has high false alerts for old samples. Some 0-days may not need heap spray (e.g., CVE-2015-5119).
  - **ROP and Shellcode Execution**: Similar to EMET, but hard to automate and doesn't record file names. Implementing a logger is a significant effort.

- **Flash Exploits in 2014 and 2015**:
  - All used corrupt vectors to achieve arbitrary read and write memory.
  - By achieving arbitrary read and write, exploits can bypass DEP, ASLR, CFG, and even EMET.
  - Corrupt vectors require huge lengths for reading and writing large memory addresses.