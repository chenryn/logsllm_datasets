### 0
24
25
14
8
48
72
16
87
107
0
64
22
12
12
92
199
41
124
46
0
(READ_LOGS) associated with the AID_LOG DAC group, vendors include several signed apps on their devices, and some signed apps have had reported vulnerabilities, such as the adb app [33]. The `resetreason` has access to several integrity-critical resources, and we have confirmed that it can be redirected to write files in the encrypted filesystem directory. Previous research has demonstrated the importance of attacks on the encrypted filesystem from the system’s radio service [44]. We responsibly reported this vulnerability, which has been confirmed by Samsung and assigned CVE-2020-13833.

### Xiaomi and Huawei Thememanager
We discovered multiple unreported vulnerabilities in Xiaomi and Huawei devices. Here, we describe one example. These devices include a variety of value-added services, including the Thememanager, which allows users to customize the user interface of their devices. However, Xiaomi's access control policies are configured such that untrusted apps can write to the file `/data/data/com.android.thememanager/cache`, which is used by the Thememanager for storing content that it may use in configuring the display. We verified on Xiaomi 8.0 that arbitrary modifications to this file can crash the privileged Thememanager process and, in some cases, impact the GUI without crashing. A finely crafted modification could potentially exploit the Thememanager service. We found four other similar vulnerabilities in the Xiaomi 8.0 release for writable cache files. We responsibly reported these vulnerabilities to Xiaomi, who indicated that they were fixed in the Xiaomi 9.0 release.

We also found that Huawei, in both the 8.0 and 9.0 releases, has a similar vulnerability for theme cache files. However, exploitation requires adversaries to compromise an application with `media_rw` permission (T2 in the Google Privilege Levels). We responsibly reported these vulnerabilities to Huawei, who stated that they are not concerned about so-called privileged apps being exploited. We note that a similar scenario led to the issuing of a CVE by Samsung. Furthermore, we point out that privileged applications have been found to be flawed in several instances, as discussed in Section 2.3.

### Performance
We measured the performance of PolyScope for eight Android releases. The overhead was measured on a PC running an AMD Ryzen 7 3700X (8 core, 16 thread) with 16GB of RAM and an RTX 2080 Super GPU using Ubuntu 18.04. PolyScope IVs are found in two steps: TE IV computation and TE IV validation. We find that the performance of TE IV computation has a linear relationship to the SEAndroid policy size. The TE IV validation stage’s performance is proportional to the number of IVs found in TE IV computation, but this impact can be reduced because validation can be parallelized.

Figure 4 shows the performance overhead of these two stages for the eight releases. We evaluate the performance of the TE IV validation for one to eight threads. With a multi-core CPU, parallelization does produce significant performance improvement. We also note that computing all the authorized data flows for these releases is quite expensive. On the other hand, with a proper threat model to prune cases, PolyScope can identify integrity violations in a reasonable amount of time.

### Discussion
In this section, we review limitations in the PolyScope approach and examine the implications of a recently proposed Android defense called scoped storage.

#### Limitations
We identify three limitations of PolyScope:
1. **Rooted Phone Requirement**: PolyScope relies on a rooted phone to collect filesystem data.
2. **MAC-to-DAC Mapping**: We cannot always determine the mapping between MAC labels and their corresponding DAC UIDs.
3. **Vulnerability Confirmation**: PolyScope cannot confirm vulnerabilities from attack operations automatically.

Without rooting the phone, we cannot gather DAC information from privileged directories such as `/system`. Recently, Hernandez et al. [22] proposed BigMAC, which includes a technique to extract accurate DAC configuration data from these privileged directories (~95%). We will explore integrating BigMAC into our data collection in future releases. Together with the data collected from an unrooted phone, we should be able to recover a nearly complete snapshot of the filesystem. We will explore methods to achieve complete recovery in future work.

Another limitation of PolyScope is that finding the MAC-to-DAC mapping of subjects requires running a process for each MAC label to collect its DAC UIDs/groups. Currently, if either the adversary or victim for a computed TE IV is not mapped to a complete subject, we skip the IV validation stage for that TE IV. About 25% of the TE IVs do not go through validation. Runtime support could collect such mappings to seed validation.

Finally, PolyScope lacks a systematic way to test the victims for vulnerabilities to the attack operations found. The problem is that we need to know when a victim uses a file, binding, or IPC that is associated with an attack operation. Sting [52] provides passive runtime monitoring of processes for use of bindings associated with attack operations (e.g., file squatting and link traversal). However, Sting only used the available DAC policies to determine whether an attack operation would be possible and did not test for other attack operations. PolyScope’s more accurate computation of attack operations should improve the effectiveness of such an approach. To test for luring traversals, one must develop methods to detect at-risk IPCs rather than file accesses. The Jigsaw system [49] provides a method for identifying system calls that may receive input that could enable luring traversals, but it does not identify the scope of targets to which luring may occur. PolyScope identifies a full scope of luring targets using victim permission expansion, so we will explore the use of PolyScope to generate test cases for the system calls identified by Jigsaw.

#### Scoped Storage
Android scoped storage [19] was recently introduced to control application access to another’s files in the external storage folders (e.g., Download) that are shared among applications. For these shared folders, scoped storage limits app accesses only to the files they create, except for apps with the `READ_EXTERNAL_STORAGE` Android permission. Even in this case, apps cannot modify files they did not create. For private folders, scoped storage prevents an app from reading another app’s files. These restrictions prevent the use of victim permission expansion (see Section 5.3) to create pathname-IVs and prevent exploitation of many attack operations on other file-IVs.

These defenses are enforced by the filesystem in userspace (FUSE), which has been reintroduced in Android 11. When a file operation is issued to external storage, the permission checking is done at the FUSE-daemon, which leverages the MediaProvider’s database to keep track of file ownership. Scoped storage was deployed as an option in Android 10 (e.g., apps may opt-out), but now is mandatory in Android 11.

Scoped storage impacts PolyScope by preventing many of the IVs found in external storage folders from being used in attack operations. In Android 11, MAC and DAC permissions have been weakened to grant apps access to files in shared external storage folders, so PolyScope identifies these as IVs. Table 5 shows that Android 11 has many IVs between privilege levels T1 and T3. These weakened policies also create risks among apps at the same privilege level, but we do not consider that threat in this paper. However, scoped storage prevents attack operations from being exercised on many of these IVs in external storage, excepting only read-IVs in shared directories. We estimate that the number of PolyScope IVs with Operations in Table 2 is reduced from 1,764 by about half for Android 11 due to scoped storage. While this indicates a large number of false positives, only 30 objects are misclassified. Since Table 2 counts the subject-object pairs, the weakened MAC and DAC policies that grant several subjects access to these objects exacerbate the impact.

At present, scoped storage is only applied in external storage folders, so scoped storage would not block attack operations on the vulnerable IVs identified in Section 7.6.

Extending PolyScope to reason about scoped storage is future work. We have two obvious choices for including scoped storage:
1. **Policy Analysis**: PolyScope could be extended to analyze policies enforced by the FUSE-daemon for scoped storage analogously to MAC and DAC policies.
2. **Enforcement Semantics**: PolyScope could be extended to reason about the scoped storage enforcement semantics at large, e.g., by preventing any attack operation in external storage folders. This approach would be simpler in concept, but one would need to ensure that PolyScope always had the correct semantics for scoped storage as the system evolves. Since some external storage folders used for gaming are not processed by the FUSE-daemon (i.e., are outside scoped storage), tracking folders accurately could be non-trivial. We will explore implementing the first option.

### Related Work
Researchers have long known about the three types of integrity violations listed in Section 4, but have found it difficult to prevent programs from falling victim to such threats. A variety of mechanisms have been proposed to prevent attacks during name resolution, including defenses for binding and pathname vulnerabilities. These defenses have often been focused on TOCTTOU attacks [31, 5]. Some defenses are implemented in the program or as library extensions [12, 35, 13, 46], and some as kernel extensions [28, 36, 9, 34, 47, 48]. The methods overlap, where some enforce invariants on file access [12, 28, 48, 35, 36, 47], some enforce namespace invariants [9, 34], and some aim for “safe” access methods [13, 46].

In general, all program defenses have been limited because they lack insight into the changing system, and all system defenses are limited because they lack side-information about the intent of the program [8].

The main defense for preventing filesystem vulnerabilities is access control. If the access control policies prevent an adversary from accessing the filesystem resources that enable attack operations, then the system is free of associated vulnerabilities. However, the discretionary access control (DAC) policies commonly used do not enable prediction of whether a subject may obtain an unauthorized permission [21], so techniques to restrict DAC [26, 38, 45] and apply mandatory access control (MAC) enforcement [3, 4] were explored, culminating in MAC enforcement systems, such as Linux Security Modules [55] employed by SELinux [39] and AppArmor [32]. Researchers then proposed MAC enforcement for Android systems [56, 7], so a version of SELinux [39] targeting Android was developed, called SEAndroid [42]. However, the attack operations we find in this paper abuse available MAC permissions. While techniques have been developed to limit the permissions available to individual system calls [41, 51], such techniques need policy analysis to determine the policies to enforce.

Researchers have proposed using access control policy analysis to identify misconfigurations that may lead to vulnerabilities [24, 40], but traditionally, access control policy analysis methods only reason about one policy, such as a mandatory access control (MAC) policy [40, 25, 11, 50] or an Android permission policy [14, 53, 54]. However, based on the research challenges above, we must consider the combination of the access control policies employed on the system to compute attack operations accurately. Chen et al. [10] were the first work that we are aware of to combine MAC and DAC policies in access control policy analysis. Hernandez et al. [22] further extended their analysis to include MAC, DAC, and Linux capabilities. However, both of these techniques compute data flows, which are much more numerous than integrity violations. Chen et al. look for data flows that may lead to sensitive data leakage directly rather than attack operations that may enable such leakage as PolyScope does.

### Conclusions
Android uses a combination of filesystem access control mechanisms to assure its platform integrity. This paper has proposed PolyScope, a policy analysis tool that reasons over Android’s mandatory (SEAndroid) and discretionary (Unix permissions) access control policies, in addition to the other mechanisms (e.g., Android permissions) that influence file access control. PolyScope is novel in its ability to reason about permission expansion, which lies at the intersection of mandatory and discretionary policy. We applied PolyScope to three different Google Android releases and five different OEM Android releases, characterizing the potential for file-based attacks such as file squatting, link traversal, and luring traversal. In doing so, we identified two new vulnerabilities in OEM Android releases and opportunities to direct further automated testing. Our results suggest that the access control policy changes introduced by OEMs do not sufficiently address integrity violations for their feature additions.

### Acknowledgments
Thanks to our shepherd, Sven Bugiel, and the anonymous reviewers. This research was sponsored by the U.S. Army Combat Capabilities Development Command Army Research Laboratory and was accomplished under Cooperative Agreement Number W911NF-13-2-0045 (ARL Cyber Security CRA) and National Science Foundation grants CNS-1816282. The views and conclusions contained in this document are those of the authors and should not be interpreted as representing the official policies, either expressed or implied, of the Combat Capabilities Development Command Army Research Laboratory of the U.S. government. The U.S. government is authorized to reproduce and distribute reprints for government purposes notwithstanding any copyright notation hereon.

### References
[1] Yousra Aafer, Nan Zhang, Zhongwen Zhang, Xiao Zhang, Kai Chen, XiaoFeng Wang, Xiaoyong Zhou, Wenliang Du, and Michael Grace. Hare Hunting in the Wild Android: A Study on the Threat of Hanging Attribute References. In Proceedings of the 22nd ACM Conference on Computer and Communications Security, pages 1248–1259, 2015.
[2] J. P. Anderson. Computer Security Technology Planning Study, Volume II. Technical report ESD-TR-73-51, AFSC, October 1972.
[3] D. E. Bell and L. J. LaPadula. Secure Computer System: Unified Exposition and Multics Interpretation. Technical report ESD-TR-75-306, Deputy for Command and Management Systems, HQ Electronic Systems Division (AFSC), March 1976.
[4] K. J. Biba. Integrity Considerations for Secure Computer Systems. Technical report MTR-3153, MITRE, April 1977.
[5] M. Bishop and M. Digler. Checking for race conditions in file accesses. Computer Systems, 9(2), Spring 1996.