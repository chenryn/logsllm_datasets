### Worm Propagation and Attack Mechanisms

Once a password was compromised for any account, the Worm would attempt to break into remote machines where that user had accounts. It would scan the user's mail and remote login control files to identify the names of remote hosts with accounts used by the target user. The Worm then attempted two types of attacks:

1. **Remote Shell via `rexec`**:
   - The Worm first tried to create a remote shell using the `rexec` service, which required a username/password combination.
   - It used the various account names found in local files and the user’s local password.
   - This attack exploited the common practice of users reusing the same password across multiple machines.
   - The Worm would first perform an `rexec` to the current host (using the local username and password) and then attempt a remote shell invocation on the remote host using the username from the file.
   - This attack succeeded if the remote machine allowed the user to log in without a password, indicating a trust relationship.

2. **Continuation of the Attack**:
   - If the remote shell was successfully created, the Worm would continue its propagation as described above.
   - No further use was made of the user's password beyond these initial steps.

### Self-Check and Termination Mechanism

Throughout its execution, the Worm checked for other instances running on the same machine. To do this, it attempted to connect to another Worm on a local, predetermined TCP socket (port 23357, loopback address 127.0.0.1). If the connection succeeded, one Worm (chosen randomly) would set an internal variable `pleasequit` to 1, causing it to exit after reaching partway through the third stage of password cracking. This delay contributed to multiple Worms running on many systems, as termination was deferred until significant effort had been made to crack local passwords. Additionally, race conditions in the code could cause Worms on heavily loaded machines to fail to connect, allowing some instances to run indefinitely despite the presence of others.

### Immortal Worms

One out of every seven Worms became "immortal" and did not check for other local Worms. This was based on a generated random number that set an internal flag preventing the Worm from ever looking for another instance on the host. This mechanism may have been designed to defeat attempts to place a fake Worm process on the TCP port to kill existing Worms. Regardless of the intent, this feature was likely the primary cause of machines being overloaded with multiple copies of the Worm.

### UDP Packet Transmission

The Worm attempted to send a UDP packet to the host `ernie.berkeley.edu` approximately once every 15 infections, based on a random number comparison. However, the code for this action was incorrect, and no information was ever sent. The intended message was an uninitialized byte. It is possible that the author intended to run a monitoring program on `ernie` (after breaking into an account), but no evidence of such a program was found. The connection may have been a feint to cast suspicion on personnel at Berkeley.

### Process Duplication and Scheduling

The Worm regularly duplicated itself and killed its parent. This had two effects:
1. The Worm appeared to change its process identifier, preventing any single process from accumulating excessive CPU time.
2. Processes that had been running for a long time had their priority downgraded by the scheduler. By forking, the new process regained normal scheduling priority. However, this mechanism did not always work correctly, as some instances of the Worm were observed with over 600 seconds of accumulated CPU time.

### Host List Management

If the Worm was present on a machine for more than 12 hours, it would flush its host list of all entries flagged as immune or already infected. This implies that a single Worm might reinfect the same machines every 12 hours.

### Chronology of Events

The following is an abbreviated chronology of events related to the release of the Internet Worm. Most of this information was gathered from personal mail, submissions to mailing lists, and Usenet postings. Some items are also taken from [19] and [16]. Note that due to clock drift and machine crashes, some times may not be completely accurate. All times are given in Eastern Standard Time.

#### November 2, 1988
- **17:00**: Worm executed on a machine at Cornell University.
- **18:00**: Machine `prep.ai.mit.edu` at MIT infected. This may have been the initial execution. Prep was a public-access machine used for storing and distributing GNU project software, configured with security holes allowing anonymous remote users to introduce files.
- **18:30**: Infected machine at the University of Pittsburgh infects a machine at the RAND Corporation.
- **21:00**: Worm discovered on machines at Stanford.
- **21:30**: First machine at the University of Minnesota invaded.
- **22:04**: Gateway machine at the University of California, Berkeley, invaded. Mike Karels and Phil Lapsley noticed an unusual load on the machine.
- **22:34**: Gateway machine at Princeton University infected.
- **22:40**: Machines at the University of North Carolina are infected and attempt to invade other machines. Attempts on machines at MCNC start at 22:40.
- **22:48**: Machines at SRI infected via `sendmail`.
- **22:52**: Worm attempts to invade `andrew.cmu.edu` at Carnegie-Mellon University.
- **22:54**: Gateway hosts at the University of Maryland come under attack via the `fingerd` daemon. Evidence later shows other local hosts were already infected.
- **22:59**: Machines at the University of Pennsylvania attacked, but none are susceptible. Logs show 210 attempts over the next 12 hours.
- **23:00**: AI Lab machines at MIT infected.
- **23:28**: `mimsy.umd.edu` at the University of Maryland infected via `sendmail`.
- **23:40**: Researchers at Berkeley discover `sendmail` and `rsh` as means of attack and begin to shut off other network services as a precaution.
- **23:45**: Machines at Dartmouth and the Army Ballistics Research Lab (BRL) attacked and infected.
- **23:49**: Gateway machine at the University of Utah infected. The load average soars to 100 (normal average below 10) due to repeated infections.

#### November 3, 1988
- **00:07**: University of Arizona machine `arizona.edu` infected.
- **00:21**: Princeton University main machine (a VAX 8650) infected. Load average reaches 68, and the machine crashes.
- **00:33**: Machine `dewey.udel.edu` at the University of Delaware infected, but not by `sendmail`.
- **01:05**: Worm invades machines at Lawrence Livermore Labs (LLNL).
- **01:30**: Machines at UCLA infected.
- **02:00**: Worm detected on machines at Harvard University.
- **02:38**: Peter Yee at Berkeley posts a message to the TCP-IP mailing list: "We are under attack." Affected sites include U.C. Berkeley, U.C. San Diego, LLL, Stanford, and NASA Ames.
- **03:15**: Machines at the University of Chicago infected. One machine in the Physics department logs over 225 infection attempts via `fingerd` from machines at Cornell during midnight to 07:30.
- **03:34**: Warning about the Worm posted anonymously to the TCP-IP mailing list: "There may be a virus loose on the internet. What follows are three brief statements of how to stop the Worm," followed by "Hope this helps, but more, I hope it is a hoax." The poster is later revealed to be Andy Sudduth of Harvard, who was phoned by the Worm’s author, Robert T. Morris. Due to network and machine loads, the warning is not propagated for over 24 hours.
- **04:00**: Colorado State University attacked. Machines at Purdue University infected.
- **05:54**: Keith Bostic mails out a warning about the Worm, plus a patch to `sendmail`. His posting goes to the TCP-IP list, the Usenix 4bsd-ucb-fixes newsgroup, and selected site administrators.
- **06:45**: Clifford Stoll calls the National Computer Security Center and informs them of the Worm.
- **07:00**: Machines at Georgia Institute of Technology infected. Gateway machine (a Vax 780) load average climbs past 30.
- **07:30**: Infection discovered on machines at Purdue University. Machines are so overloaded that reading mail or news, including mail from Keith Bostic about the Worm, is impossible.
- **08:07**: Edward Wang at Berkeley unravels the `fingerd` attack, but his mail to the systems group is not read for over 12 hours.
- **08:18**: Keith’s mail is read and forwarded to the Usenet `news.announce.important` newsgroup, the `nntp-managers` mailing list, and over 30 other site admins. This group exchanges mail all day about the Worm’s progress and behavior, eventually becoming the `phage` mailing list with over 300 recipients.
- **09:00**: Machines on Nysernet found to be infected.
- **10:36**: First description of how the Worm works mailed to the mailing list and the Risks Digest. The `fingerd` attack is not yet known.
- **11:30**: The Defense Communications Agency inhibits the mailbridges between ARPAnet and Milnet.
- **12:00**: Over 120 machines at SRI in the Science & Technology center are shut down. Between 1/3 and 1/2 are found to be infected.
- **14:50**: Personnel at Purdue discover machines with patched versions of `sendmail` reinfected. A warning is mailed and posted that the `sendmail` patch alone is not sufficient protection.
- **16:00**: System admins of Purdue systems meet to discuss local strategy. Captured versions of the Worm suggest creating a directory named `sh` in the `/usr/tmp` directory to prevent infection.
- **18:00**: Mike Spitzer and Mike Rowan of Purdue discover how the `finger` bug works, but a mailer error prevents their explanation from leaving Purdue machines.
- **19:00**: Bill Sommerfeld of MIT recreates the `fingerd` attack and phones Berkeley with this information. Nothing is mailed or posted about this avenue of attack.
- **19:19**: Keith Bostic posts and mails new patches for `sendmail` and `fingerd`, but they are corrupted in transit. Many sites do not receive them until the next day.
- **19:37**: Tim Becker of the University of Rochester mails out a description of the `fingerd` attack, which reaches the `phage` mailing list.
- **21:00**: Original mail about the Worm, sent at 08:18, finally reaches the University of Maryland.
- **21:30**: Group at Berkeley begins decompiling the Worm into C code.

#### November 4, 1988
- **00:50**: Bill Sommerfeld mails out a description of the `fingerd` attack and makes the first comments about the coding style of the Worm’s author.
- **05:00**: MIT group finishes code decompilation.
- **09:00**: Berkeley group finishes code decompilation.
- **11:00**: Milnet-ARPAnet mailbridges restored.
- **14:20**: Keith Bostic reposts the fix to `fingerd`.
- **15:36**: Ted Ts’o of MIT posts a clarification of how the Worm operates.
- **17:20**: Keith Bostic posts the final set of patches for `sendmail` and `fingerd`, including humorous fixes to bugs in the decompiled Worm source code.
- **21:30**: John Markhoff of the New York Times tells me in a phone conversation that he has identified the author of the Worm and confirmed it with at least two independent sources. The next morning’s paper will identify the author as Robert T. Morris, son of the National Computer Security Center’s chief scientist, Robert Morris.

#### November 5, 1988
- **01:47**: Mailing to the `phage` mailing list by Erik Fair of Apple claims he heard that Robert Morse (sic) was the author of the Worm and that its release was an accident. This news was relayed through various mail messages and appears to have originated with John Markhoff.
- **16:32**: Andy Sudduth acknowledges authorship of the anonymous warning to the TCP-IP mailing list.

By Tuesday, November 8, most machines had reconnected to the Internet, and traffic patterns had returned to near-normal. That morning, about 50 people from around the country met with officials of the National Computer Security Center at a hastily convened post-mortem on the Worm. Network traffic analyzers continued to record infection attempts from (apparently) Worm programs still running on Internet machines. The last such instance occurred in early December.

### Aftermath

#### Author, Intent, and Punishment

Two of the first questions asked even before the Worm was stopped were "Who?" and "Why?". Who had written the Worm, and why had they released it on the Internet? These questions were answered when the New York Times identified Robert T. Morris as the culprit. The report from the Provost’s office at Cornell [8] also named Robert T. Morris and presented convincing reasons for that conclusion.

Morris was charged with a Federal felony under 18 U.S.C. 1030 and underwent trial in the district court in Syracuse, NY. He did not deny writing and releasing the Worm but pled not guilty to the felony. His defense included arguments that he did not intend to cause damage and that the damage did not meet the required threshold.