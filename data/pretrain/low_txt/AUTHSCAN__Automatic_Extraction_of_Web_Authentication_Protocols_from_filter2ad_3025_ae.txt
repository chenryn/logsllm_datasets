### 6.1 Protocol Analysis and Vulnerabilities

#### 6.1.1 OAuth 2.0 Implementations
We tested two widely used implementations of the OAuth 2.0 protocol, as published by Facebook. The experiments were conducted using client-side JavaScript code and HTTP messages. AUTHSCAN successfully inferred the general protocol specification.

#### 6.1.2 Windows Live ID
Windows Live Messenger Connect is another Single Sign-On (SSO) protocol derived from the general OAuth 2.0 specification. We tested its implementation using Sina Weibo, a China-based website similar to Twitter with over 300 million users. AUTHSCAN successfully extracted the protocol from this implementation. For brevity, we omit the protocol diagram, which is similar to Facebook Connect.

#### 6.1.3 Standalone Web Sites
We also tested two standalone websites where users share deeply personal information. Both sites have user bases ranging from hundreds of thousands to millions and utilize custom authorization mechanisms. AUTHSCAN uncovered the custom authentication protocols for both sites.

### 6.2 Protocol Analysis and Vulnerabilities

We tested AUTHSCAN on eight implementations, as shown in Table 2. We successfully identified seven security vulnerabilities, all of which we responsibly disclosed to the developers of the websites. For detailed information on how AUTHSCAN extracts protocol specifications, please refer to Appendix B.1. In this section, we briefly present the found vulnerabilities in the protocol implementations.

#### 6.2.1 Setup
In our experiments, the input and configuration for AUTHSCAN include:

- **Test Harness**: The security analyst must provide two pre-registered user accounts (e.g., email and password for BrowserID). For the Iyer-Matrimony case, five accounts are needed.
- **Protocol Principals & Public Keys**: For SSO implementations (including BrowserID, Facebook Connect, and Windows Live ID), the analyst needs to indicate the domains of the Identity Provider (IDP) and Service Provider (SP). For standalone websites, the analyst must specify the domains of the tested sites. If HTTPS is used, the public keys of the participants must be provided.
- **Oracle**: The analyst must provide an indication to represent successful authentication. In our experiments, we used unique strings on the response web page, such as "welcome user," to identify if authentication was successful.
- **Cryptographic Functions**: We manually annotated cryptographic functions in the Crypto library of Node.js and Mozilla jwcrypto for AUTHSCAN to identify them. AUTHSCAN automatically infers cryptographic operations using its default method in other cases.

For all cases, AUTHSCAN checks the authentication of the protocol and the secrecy of the terms used for authentication, such as the assertion in BrowserID. These properties are checked against both network and web attackers.

#### 6.2.2 Replay Attack in BrowserID
In two tested implementations of BrowserID, which use persona.org as the IDP, AUTHSCAN identified and generated a confirmed replay attack in the network attacker model. The flaw is that the assertion is sent through an insecure channel (HTTP) and does not contain any session-specific nonce. We recorded a video demonstrating the attack and proposed adding a nonce in the signature to solve this problem. We notified Mozilla about our finding, and they acknowledged the security flaw.

#### 6.2.3 CSRF Attack in BrowserID
AUTHSCAN identified and confirmed a replay attack in the web attacker model for two BrowserID implementations, excluding the one from developer.mozilla.org. We responsibly notified the vendors of these vulnerable implementations. After manual analysis, we found that the vulnerable implementations do not send anti-CSRF tokens (csrfmiddlewaretoken and next) in step 7, allowing a CSRF attack. AUTHSCAN reported that a malicious website can send an HTTP POST request to the vulnerable SPs without checking the Referrer fields. We crafted a script to exploit this vulnerability, which is listed in Appendix D.

#### 6.2.4 Secret Token Leak in Facebook Connect
AUTHSCAN found one confirmed flaw in the implementation of Facebook Connect and another in the usage of Facebook Connect by one of the two SPs we tested. Both attacks leak secret tokens in the network attacker model. Initially, automatic fuzzing was difficult due to Facebook blocking login failures after ten attempts. We manually skipped fuzzing the initial login request to the IDP but tested the remaining protocol with the SPs.

In the Facebook Connect implementation, most communications are through HTTPS. However, AUTHSCAN reported that the message at step 4 of Figure 6-(b) is readable to network attackers because it is transmitted through a non-HTTPS channel, allowing the attacker to obtain credentials c_user and xs. This makes the protocol subject to a replay attack. We discovered that a similar attack against the previous version of Facebook Connect was reported by Miculan et al. [33]. Facebook fixed this flaw in early May 2012 before we could notify them. In the latest implementation, the communication in this step is protected with HTTPS. We provide the HTTP/HTTPS messages captured during the execution of the old version for further analysis, available for download from [1].

#### 6.2.5 Non-secret Token in Using Windows Live ID
We tested AUTHSCAN on the authentication mechanism of Sina Weibo, a website with 300 million users. It uses Windows Live ID to authenticate users. AUTHSCAN initially reported a security warning about a long-lived token (non-nonce value) used for authentication. Upon manual investigation, we found that the long-lived token (named msn cid) is publicly known and can be obtained from various sources, such as the MSN user profile page. When we added this token to the attacker's knowledge set and re-ran the experiment, AUTHSCAN generated an attack trace. This flaw occurs after a user completes authentication with Windows Live ID, demonstrating AUTHSCAN's utility in finding simple but severe logic flaws beyond the initial SSO authentication token exchange. We reported this security flaw to Sina Weibo, and their security department confirmed the exploit.

#### 6.2.6 Guessable Token in Standalone Sites
AUTHSCAN detected one severe vulnerability in each of the two standalone websites: IyerMatrimony and MeetingMillionaires. Both sites have a significant number of registered users, 220,000 and 1,275,000, respectively. The vulnerability allows attackers to log into others' accounts and gain full privileges.

- **IyerMatrimony**: After eliminating redundant HTTP parameters, AUTHSCAN generated a packet that can be used for successful authentication. Through differential fuzzing, AUTHSCAN found that sds and sdss remain constant across different accounts, while sde remains the same for multiple sessions of an individual account. Among the test accounts, AUTHSCAN found that the 14-character prefix of sde is constant, and only the 2-character postfix increments by one for consecutive account IDs. AUTHSCAN confirmed this flaw by predicting the value of sde and successfully logging into the account.
- **MeetingMillionaires**: AUTHSCAN generated a security warning about a short-length token used for authentication. We manually confirmed this warning and notified the developers. In this site, a user can access their account information (including a password stored in plain text) by visiting a specific URL. AUTHSCAN found that l, m, and c are constant among different users' sessions, while r is associated with the user account. s is the only credential, but due to its short length (4 characters), AUTHSCAN raised a warning of a guessable token. Upon manual investigation, we found that s is an alphanumeric string. We believe that automating attack generation for such tokens may be possible in the future. AUTHSCAN can send about 500 requests to the server within one minute, making it feasible to guess the right s in approximately 56 hours with an enhanced implementation.

### 6.3 Efficiency & Running Time

The total analysis time for most cases is less than 2 minutes and can be as low as 5 seconds.