### Behavioral Classifiers and Evasion Techniques

Behavioral classifiers are vulnerable to various evasion techniques. For instance, an attacker might serve a mix of benign and malicious files from their URLs to confuse the system. However, we believe this will not significantly impact Mastino. 

1. **Aggregate Reputation**: Our system computes behavior-based features by considering the aggregate reputation of all files served from the attacker's URLs. This allows us to distinguish between benign and malicious cases effectively.
2. **Machine-Level Analysis**: Even if the attacker mixes some good files in their URLs, they cannot alter the badness reputation and labels of machines that contact these URLs. We assign badness reputations to machines based on both their network-level history and system-level activities.
3. **Intrinsic Features**: While this type of evasion might negatively impact behavior-based features, intrinsic features of files and URLs can still guide Mastino towards correct decisions, as demonstrated in Section 5.4.

### Utilization of Legitimate Domains

Attackers may also try to evade detection by using legitimate and popular domains, such as cloud storage services, to host their malware. Since these domains are also used for storing legitimate software, some noise might be introduced when computing behavior-based features. To mitigate this, we attempt to filter out such domains from our whitelist (see Section 4.1). Despite the difficulty in filtering all such domains, Mastino still achieves high accuracy with very low false positive rates. Intrinsic features play a significant role in these situations as well.

### Detection of New and Unseen Files/URLs

Another challenge is detecting files and URLs for which no prior information is available in our download graph, i.e., the test samples of Fu and Uu (see Section 5.2.1). Mastino performs remarkably well on these test datasets by leveraging all three layers of the download graph and intrinsic features. Multiple case studies in Section 5.8 highlight how Mastino enables detection in these difficult scenarios.

### Labeling and Reputations

We need to compute badness reputations and assign labels for nodes in all three layers of the tripartite download graph, including machines. In reality, a machine's true label might change during the training window T. Therefore, our labels for machines might not be completely accurate throughout the entire window due to their dynamic nature. For example, a machine labeled as vulnerable might have been disinfected by an antivirus agent after downloading malware, but its label will remain vulnerable in the graph for the duration of T. We believe keeping the machine's label as vulnerable is useful, as it had a tendency to download malware and visit malicious URLs, and could likely do so again. Section 5.4 shows that machines' reputations are helpful in improving our accuracy.

### Related Work

Traditional approaches in malware detection involve analyzing binaries through static code inspection or runtime behavior evaluation [4, 5, 15, 20, 23, 25]. These methods, however, are slow and cannot keep up with the thousands of new and unknown files observed daily.

A significant body of research focuses on DNS-based reputation systems [1–3, 6], which primarily detect IP addresses and domain names associated with malicious activities, such as hosting C&C servers or "drop zones." Mastino, in contrast, not only detects malicious URLs but also provides real-time protection against malware files and labels download events using a novel tripartite graph mining model.

Graph mining, a general technique for reasoning on data modeled as a graph, has been successfully applied in various domains of system security. Polonium [8] uses graphical models to detect malware files. While their approach is similar to ours, there are key differences:
- **Algorithm and Performance**: Polonium employs a costly loopy belief propagation algorithm and adopts an offline approach, running the algorithm on the entire graph, which is time-consuming and expensive. Mastino, on the other hand, performs real-time detection and proactively quarantines or removes malware files to prevent execution on the client machine.
- **Layer Consideration**: Polonium does not consider the URL layer and only classifies files. Mastino extends the analysis to the URL from which the file was downloaded, concurrently classifying files and URLs.
- **Transparency**: Polonium does not detail how machine reputations are computed. Mastino, however, clearly describes the intrinsic machine features that improve results, such as download history and the downloading process.

Manadhata et al. [16] introduce a system that detects malicious domains by constructing a host-domain graph and running belief propagation. Other works [21, 24] model relationships between files using graphs to detect malware. Recently, Kwon et al. [13] proposed a system to detect malware by following download chains initiated by malware droppers. Mastino differs from these systems by providing simultaneous detection of malicious files, URLs, and download events.

Rahbarinia et al. [18] build bipartite graphs from passive DNS traffic collected from large ISP networks to represent the "who is querying what" relationship. Their graph-based behavioral classifier suggests domains used in C&C operations. Unlike this work, Mastino is not limited to detecting C&C servers and can handle various types of malicious URLs.

Nazca [12] focuses on detecting malware downloads by identifying the network infrastructure (domains, IPs, URLs) supporting malware installation campaigns. Nazca is designed for deployment at the edge of ISP networks and only inspects network traffic without analyzing file properties or the reputation of the downloading client. Mastino, in contrast, combines information from URLs, files, and client machines to accurately detect new malware downloads in real time.

AMICO [22] and Google’s CAMP [19] distinguish between benign and malicious files by analyzing the download behavior of client machines. However, AMICO reconstructs downloads from HTTP network traffic, which is expensive and limited to non-encrypted traffic and standard protocols. CAMP only detects files downloaded via the browser, making it ineffective against malware updates, second-stage malware, or files downloaded by generic clients. Mastino overcomes these limitations by protecting users' machines regardless of their networking configuration and by leveraging system-level information about the downloading process.

### Conclusion

In this paper, we presented Mastino, a novel system capable of efficiently detecting malware download events in real time by passively monitoring user download events. We developed a proof-of-concept prototype and evaluated it using real-world data. Our evaluation results show that Mastino can detect malware files and malicious URLs with high accuracy while incurring less than 0.5% false positives. We discussed the system's efficiency, noting that it takes only a fraction of a second to provide accurate classifications. Detailed analysis and case studies further illustrate Mastino's real-world operation.

### Acknowledgments

This material is based in part upon work supported by the National Science Foundation, under grant No. CNS-1149051. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. This work is also partially supported by a grant from the Auburn University at Montgomery Research Grant-in-Aid Program. Additional acknowledgments go to Trend Micro’s Forward-Looking Threat Research (FTR), SPN, and Machine Learning teams who supported the research in different forms.

### References

[1] M. Antonakakis, R. Perdisci, D. Dagon, W. Lee, and N. Feamster. Building a dynamic reputation system for DNS. In USENIX security symposium, pages 273–290, 2010.

[2] M. Antonakakis, R. Perdisci, W. Lee, N. Vasiloglou II, and D. Dagon. Detecting malware domains at the upper DNS hierarchy. In USENIX Security Symposium, page 16, 2011.

[3] M. Antonakakis, R. Perdisci, Y. Nadji, N. Vasiloglou II, S. Abu-Nimeh, W. Lee, and D. Dagon. From throw-away traffic to bots: Detecting the rise of DGA-based malware. In USENIX Security Symposium, pages 491–506, 2012.

[4] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A tool for analyzing malware. na, 2006.

[5] J. Bergeron, M. Debbabi, J. Desharnais, M. M. Erhioui, Y. Lavoie, N. Tawbi, et al. Static detection of malicious code in executable programs. Int. J. of Req. Eng, 2001(184-189):79, 2001.

[6] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi. Exposure: Finding malicious domains using passive DNS analysis. In NDSS, 2011.

[7] L. Breiman. Random forests. Machine learning, 45(1):5–32, 2001.

[8] D. H. Chau, C. Nachenberg, J. Wilhelm, A. Wright, and C. Faloutsos. Polonium: Tera-scale graph mining for malware detection. In ACM SIGKDD Conference on Knowledge Discovery and Data Mining, 2010.

[9] M. Felegyhazi, C. Kreibich, and V. Paxson. On the potential of proactive domain blacklisting. In Proceedings of the 3rd USENIX conference on Large-scale exploits and emergent threats: botnets, spyware, worms, and more, pages 6–6. USENIX Association, 2010.

[10] Google. Google Safe Browsing. https://www.google.com/transparencyreport/safebrowsing/.

[11] F. Guo, P. Ferrie, and T.-C. Chiueh. A study of the packer problem and its solutions. In Recent Advances in Intrusion Detection, pages 98–115. Springer, 2008.

[12] L. Invernizzi, S. Miskovic, R. Torres, S. Saha, S. Lee, M. Mellia, C. Kruegel, and G. Vigna. Nazca: Detecting malware distribution in large-scale networks. In Proceedings of the Network and Distributed System Security Symposium (NDSS), 2014.

[13] B. J. Kwon, J. Mondal, J. Jang, L. Bilge, and T. Dumitras. The dropper effect: Insights into malware distribution with downloader graph analytics. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, pages 1118–1129. ACM, 2015.

[14] K. Lab. Torrentlocker ransomware. http://www.kaspersky.com/internet-security-center/threats/torrentlocker-malware, 2015.

[15] W.-J. Li, K. Wang, S. J. Stolfo, and B. Herzog. Fileprints: Identifying file types by n-gram analysis. In Information Assurance Workshop, 2005. IAW’05. Proceedings from the Sixth Annual IEEE SMC, pages 64–71. IEEE, 2005.

[16] P. Manadhata, S. Yadav, P. Rao, and W. Horne. Detecting malicious domains via graph inference. In Proceedings of the 2014 Workshop on Artificial Intelligent and Security Workshop, pages 59–60. ACM, 2014.

[17] J. Oberheide, E. Cooke, and F. Jahanian. CloudAV: N-version antivirus in the network cloud.

[18] B. Rahbarinia, P. Roberto, and M. Antonakakis. Segugio: Efficient Behavior-Based Tracking of Malware-Control Domains in Large ISP Networks. DSN ’15 (45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks), (3), 2015.

[19] M. A. Rajab, L. Ballard, N. Lutz, P. Mavrommatis, and N. Provos. CAMP: Content-agnostic malware protection. In NDSS, 2013.

[20] N. Solutions. Norman sandbox whitepaper, 2003.

[21] A. Tamersoy, K. Roundy, and D. H. Chau. Guilt by association: Large scale malware detection by mining file-relation graphs. In Proceedings of the 20th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 1524–1533. ACM, 2014.

[22] P. Vadrevu, B. Rahbarinia, R. Perdisci, K. Li, and M. Antonakakis. Measuring and detecting malware downloads in live network traffic. In Computer Security–ESORICS 2013, pages 556–573. Springer, 2013.

[23] C. Willems, T. Holz, and F. Freiling. Toward automated dynamic malware analysis using CWSandbox. IEEE Security & Privacy, (2):32–39, 2007.

[24] Y. Ye, T. Li, S. Zhu, W. Zhuang, E. Tas, U. Gupta, and M. Abdulhayoglu. Combining file content and file relations for cloud-based malware detection. In Proceedings of the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, KDD ’11, pages 222–230, New York, NY, USA, 2011. ACM.

[25] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM conference on Computer and communications security, pages 116–127. ACM, 2007.