### Experimental Setup and Performance Analysis

The first row, denoted as (cid:3)(cid:2) (cid:4), represents the performance of the base case using an unmodified name server (from the used version of BIND) installed on one of the Zurich machines. In addition to this base case, three different groups of machines are considered:
- The (cid:5)(cid:2) (cid:4) row corresponds to four identical machines on a local-area network (LAN) in Zurich.
- The next two rows, each with a group of four replicas, correspond to a setup with two machines in Zurich, one in New York, and another in San Jose.
- The rows with seven servers include all the servers.

#### Read Operations
The "Read" column shows the time taken for a read request to be returned to the client. This involves sending the request over atomic broadcast, except for the base case (cid:3)(cid:2) (cid:4) with the unmodified named. Results for read operations are only shown for cases where no server is corrupted, as a simulated corrupted server would not affect the result. For the (cid:5)(cid:2) (cid:4) LAN setup, the time reflects the duration of the atomic broadcast protocol itself, given that link latencies are negligible. In other cases, the read time is primarily attributed to the network link latencies connecting the servers.

#### Write Operations
The other columns show the time taken for write requests, specifically for adding and deleting records from the database. Measurements are provided for each of the three threshold signature protocols discussed in Section 3:
- The unoptimized protocol (BASIC)
- The optimistic protocol OPT-PROOF with correctness proofs
- The optimistic protocol OPT-TE with trial and error

In nsupdate, each add or delete request to an authoritative server is preceded by a read request. Thus, the data includes the time taken for the read operation in addition to the subsequent add or delete operation. The results indicate that an add request takes almost twice as much time to process as a delete request in all cases. This is because the time is dominated by the computation of the threshold signatures, and named sequentially computes four new SIG records with signatures for an add request and two for a delete request.

### Discussion

The results show that read operations take anywhere from around 50 milliseconds on the LAN to several hundred milliseconds when remote machines on the Internet are involved. Write operations take from one to more than 20 seconds, depending on the topology, the scheme used, and the attacker's behavior.

#### Threshold Signature Protocols
Comparing the threshold signature protocols (BASIC, OPT-PROOF, and OPT-TE), we observe that the BASIC variant performs poorly even when there are no corrupted servers. The BASIC signature protocol spends most of its time on threshold signature generation and verification. The (cid:4)(cid:1) (cid:3) setup with all machines on the LAN is slower than the (cid:4)(cid:1) (cid:3) setup with machines distributed over the Internet, which can be attributed to the compute-bound nature of the algorithm and the unequal processing power of the involved machines; the four machines on the LAN are very slow compared to those in Austin and San Jose.

We observe that the optimized signature protocols (OPT-PROOF and OPT-TE) decrease the time taken by write requests by a factor of four to six, to around 3 seconds for an add and 1–2 seconds for a delete operation over the Internet (in the (cid:4)(cid:1) (cid:3) and (cid:5)(cid:1) (cid:3) cases). An interesting feature is that the performance of the OPT-PROOF protocol deteriorates much faster with an increasing number of corrupted servers than that of the OPT-TE protocol. For example, in the (cid:5)(cid:1) (cid:6) case, OPT-PROOF takes almost as long as BASIC, but OPT-TE is still a factor of 4–5 faster.

#### Time Breakdown
Table 3 provides a breakdown of the time taken to compute one threshold signature in the (cid:4)(cid:1) (cid:3) LAN setup using the BASIC protocol. More than 96% of the time is spent on share generation and share verification, with most of it attributed to generating and verifying the correctness proofs. Assembling and verifying the signature is negligible in comparison.

### Conclusions

Our replicated name service provides fault tolerance and security guarantees to secure DNS against an attacker that compromises a fraction of name servers in a zone, while supporting dynamic updates. Since the approach requires (cid:3) (cid:7) servers for tolerating the corruption of  servers, small organizations running only two or three replicas today would need to deploy additional servers to benefit from our replication technique.

The results show that such a system can be used in practice, particularly for highly critical parts of the DNS, like root servers or other servers near the root, where our service can provide increased security. Although dynamic updates have high latency in our current implementation, they are not frequent operations compared to reads and occur less often as one gets closer to the root of the name space.

### References
[1] S. Ahmed, A Scalable Byzantine Fault Tolerant Secure Domain Name System. Master’s thesis, MIT, Jan. 2001.
[2] R. Arends, R. Austein, M. Larson, D. Massey, and S. Rose, “DNS security introduction and requirements,” draft-ietf-dnsext-dnssec-intro-09.txt, Feb. 2004.
[3] D. Atkins and R. Austein, “Threat analysis of the domain name system,” draft-ietf-dnsext-dns-threats-03.txt, June 2003.
[4] C. Cachin, K. Kursawe, F. Petzold, and V. Shoup, “Secure and efficient asynchronous broadcast protocols (extended abstract),” in Advances in Cryptology: CRYPTO 2001, (J. Kilian, ed.), pp. 524–541, Springer, 2001.
[5] C. Cachin, K. Kursawe, and V. Shoup, “Random oracles in Constantinople: Practical asynchronous Byzantine agreement using cryptography,” in Proc. 19th ACM Symposium on Principles of Distributed Computing (PODC), pp. 123–132, 2000.
[6] C. Cachin and J. A. Poritz, “Secure intrusion-tolerant replication on the Internet,” in Proc. Intl. Conference on Dependable Systems and Networks (DSN-2002), pp. 167–176, June 2002.
[7] M. Castro and B. Liskov, “Practical Byzantine fault tolerance and proactive recovery,” ACM Trans. Computer Systems, vol. 20, pp. 398–461, Nov. 2002.
[8] Y. Desmedt, “Threshold cryptography,” European Transactions on Telecommunications, vol. 5, no. 4, pp. 449–457, 1994.
[9] D. E. Eastlake, “Domain name system security extensions,” RFC 2535, March 1999.
[10] R. Elz and R. Bush, “Clarifications to the DNS specification,” RFC 2181, July 1997.
[11] V. Hadzilacos and S. Toueg, “Fault-tolerant broadcasts and related problems,” in Distributed Systems, (S. J. Mullender, ed.), New York: ACM Press & Addison-Wesley, 1993. Expanded version appears as Technical Report TR94-1425, Department of Computer Science, Cornell University, Ithaca NY, 1994.
[12] K. Kursawe and V. Shoup, “Optimistic asynchronous atomic broadcast,” Cryptology ePrint Archive, Report 2001/022, March 2001. http://eprint.iacr.org/.
[13] P. Mockapetris, “Domain names - concepts and facilities,” RFC 1034, Nov. 1987.
[14] M. K. Reiter and K. P. Birman, “How to securely replicate services,” ACM Transactions on Programming Languages and Systems, vol. 16, pp. 986–1009, May 1994.
[15] F. B. Schneider, “Implementing fault-tolerant services using the state machine approach: A tutorial,” ACM Computing Surveys, vol. 22, pp. 299–319, Dec. 1990.
[16] V. Shoup, “Practical threshold signatures,” in Advances in Cryptology: EUROCRYPT 2000, (B. Preneel, ed.), pp. 207–220, Springer, 2000.
[17] P. Vixie, S. Thomson, Y. Rekhter, and J. Bound, “Dynamic updates in the domain name system,” RFC 2136, March 1999.
[18] X. Wang, Y. Huang, Y. Desmedt, and D. Rine, “Enabling secure on-line DNS dynamic update,” in Proc. 16th Annual Computer Security Applications Conference (ACSAC’00), 2000.
[19] T. Wu, M. Malkin, and D. Boneh, “Building intrusion-tolerant applications,” in Proc. 8th USENIX Security Symposium, pp. 79–91, 1999.
[20] L. Zhou, F. B. Schneider, and R. van Renesse, “COCA: A secure distributed online certification authority,” ACM Trans. Computer Systems, vol. 20, no. 4, pp. 329–368, 2002.