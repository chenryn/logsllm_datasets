### References

1. **Annual Technical Conference (ATC), 2002, pp. 275–288.**

2. **S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, "CETS: Compiler-enforced temporal safety for C," in Proceedings of the International Symposium on Memory Management (ISMM), 2010, pp. 31–40.**

3. **S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, "SoftBound: Highly compatible and complete spatial memory safety for C," in Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2009, pp. 245–258.**

4. **P. Akritidis, M. Costa, M. Castro, and S. Hand, "Baggy Bounds Checking: An efficient and backwards-compatible defense against out-of-bounds errors," in Proceedings of the 18th USENIX Security Symposium, 2009, pp. 51–66.**

5. **M. Castro, M. Costa, and T. Harris, "Securing software by enforcing data-flow integrity," in Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI), 2006, pp. 147–160.**

6. **S. Nagarakatte, M. M. K. Martin, and S. Zdancewic, "Everything you want to know about pointer-based checking," in Proceedings of the 1st Summit on Advances in Programming Languages (SNAPL), 2015, pp. 190–208.**

7. **P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom, "Spectre attacks: Exploiting speculative execution," in Proceedings of the 40th IEEE Symposium on Security and Privacy (S&P), May 2019.**

8. **A. Mambretti, A. Sandulescu, A. Sorniotti, W. Robertson, E. Kirda, and A. Kurmus, "Bypassing memory safety mechanisms through speculative control flow hijacks," in Proceedings of the 6th IEEE European Symposium on Security & Privacy (EuroS&P), 2021.**

9. **N. Provos, M. Friedl, and P. Honeyman, "Preventing privilege escalation," in Proceedings of the 12th USENIX Security Symposium, 2003.**

10. **D. Brumley and D. Song, "Privtrans: Automatically partitioning programs for privilege separation," in Proceedings of the 13th USENIX Security Symposium, 2004.**

11. **S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’Keeffe, M. Stillwell et al., "SCONE: Secure Linux containers with Intel SGX," in Proceedings of the 12th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2016, pp. 689–703.**

12. **C.-C. Tsai, K. S. Arora, N. Bandi, B. Jain, W. Jannen, J. John, H. A. Kalodner, V. Kulkarni, D. Oliveira, and D. E. Porter, "Cooperation and security isolation of library OSes for multi-process applications," in Proceedings of the Ninth European Conference on Computer Systems, 2014, pp. 1–14.**

13. **R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, "Efficient software-based fault isolation," in Proceedings of the 14th ACM Symposium on Operating Systems Principles (SOSP), 1993, pp. 203–216.**

14. **U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula, "XFI: Software guards for system address spaces," in Proceedings of the 7th Symposium on Operating Systems Design and Implementation (OSDI), 2006.**

15. **B. Zeng, G. Tan, and G. Morrisett, "Combining control-flow integrity and static analysis for efficient and validated data sandboxing," in Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS), 2011.**

16. **K. Koning, X. Chen, H. Bos, C. Giuffrida, and E. Athanasopoulos, "No need to hide: Protecting safe regions on commodity hardware," in Proceedings of the 12th European Conference on Computer Systems (EuroSys), 2017, pp. 437–452.**

17. **Y. Liu, T. Zhou, K. Chen, H. Chen, and Y. Xia, "Thwarting memory disclosure with efficient hypervisor-enforced intra-domain isolation," in Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS), 2015, pp. 1607–1619.**

18. **J. Yang and K. G. Shin, "Using hypervisor to provide data secrecy for user applications on a per-page basis," in ACM International Conference on Virtual Execution Environments (VEE), 2008, pp. 71–80.**

19. **S. Proskurin, M. Momeu, S. Ghavamnia, V. P. Kemerlis, and M. Polychronakis, "xMP: Selective memory protection for kernel and user space," in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2020, pp. 584–598.**

20. **S. A. Carr and M. Payer, "DataShield: Configurable data confidentiality and integrity," in Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security, 2017, pp. 193–204.**

21. **J. Lind, C. Priebe, D. Muthukumaran, D. O’Keeffe, P.-L. Aublin, F. Kelbert, T. Reiher, D. Goltzsche, D. Eyers, R. Kapitza et al., "Glamdring: Automatic application partitioning for Intel SGX," in Proceedings of the USENIX Annual Technical Conference (ATC), 2017, pp. 285–298.**

22. **T. Palit, F. Monrose, and M. Polychronakis, "Mitigating data leakage by protecting memory-resident sensitive data," in Proceedings of the 35th Annual Computer Security Applications Conference. ACM, 2019, pp. 598–611.**

23. **Intel, "Intel software guard extensions," https://software.intel.com/content/www/us/en/develop/topics/software-guard-extensions.html, 2020.**

24. **L. O. Andersen, "Program analysis and specialization for the C programming language," Ph.D. dissertation, University of Copenhagen, 1994.**

25. **Y. Sui and J. Xue, "SVF: Interprocedural static value-flow analysis in LLVM," in Proceedings of the 25th International Conference on Compiler Construction. ACM, 2016, pp. 265–266.**

26. **B. Steensgaard, "Points-to analysis in almost linear time," in Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, 1996, pp. 32–41.**

27. **M. Hind and A. Pioli, "Which pointer analysis should I use?" in Proceedings of the 2000 ACM SIGSOFT International Symposium on Software Testing and Analysis, 2000, pp. 113–123.**

28. **M. Hind, "Pointer analysis: Haven't we solved this problem yet?" in Proceedings of the 2001 ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, 2001, pp. 54–61.**

29. **"Proof of concept – Spectre variant 1," https://github.com/crozone/spectrev1-poc, 2020.**

30. **"Proof of concept – Spectre variant 2," https://github.com/Anton-Cao/spectrev2-poc, 2020.**

31. **A. Vahldiek-Oberwagner, E. Elnikety, N. O. Duarte, M. Sammler, P. Druschel, and D. Garg, "ERIM: Secure, efficient in-process isolation with protection keys (MPK)," in Proceedings of the 28th USENIX Security Symposium, 2019, pp. 1221–1238.**

32. **M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg, "Meltdown: Reading kernel memory from user space," in Proceedings of the 27th USENIX Security Symposium, 2018.**

33. **L. Shang, X. Xie, and J. Xue, "On-demand dynamic summary-based points-to analysis," in Proceedings of the Tenth International Symposium on Code Generation and Optimization, 2012, pp. 264–274.**

34. **R. P. Wilson and M. S. Lam, "Efficient context-sensitive pointer analysis for C programs," ACM Sigplan Notices, vol. 30, no. 6, pp. 1–12, 1995.**

35. **"Streaming SIMD extensions," https://software.intel.com/sites/landingpage/IntrinsicsGuide/, 2020.**

36. **"The LLVM compiler infrastructure," https://llvm.org/, 2020.**

37. **"GNU binutils," https://sourceware.org/binutils/, 2020.**

38. **"DataFlowSanitizer," https://clang.llvm.org/docs/DataFlowSanitizer.html, 2020.**

39. **"Pin 3.2 user guide," https://software.intel.com/sites/landingpage/pintool/docs/81205/Pin/html/, 2020.**

40. **"Apache HTTP server benchmarking tool," https://httpd.apache.org/docs/2.4/programs/ab.html, 2020.**

41. **"Mutilate – a memcached load generator," https://github.com/leverich/mutilate, 2020.**

42. **"Heartbleed proof-of-concept," https://github.com/mpgn/heartbleed-PoC, 2020.**

43. **Y. Li, T. Tan, A. Møller, and Y. Smaragdakis, "A principled approach to selective context sensitivity for pointer analysis," ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 42, no. 2, pp. 1–40, 2020.**

44. **G. Kastrinis and Y. Smaragdakis, "Hybrid context-sensitivity for points-to analysis," ACM SIGPLAN Notices, vol. 48, no. 6, pp. 423–434, 2013.**

45. **M. Sridharan and R. Bodík, "Refinement-based context-sensitive points-to analysis for Java," ACM SIGPLAN Notices, vol. 41, no. 6, pp. 387–400, 2006.**

46. **J. Kuderski, N. Lê, A. Gurfinkel, and J. Navas, "TeaDsa: Type-aware DSA-style pointer analysis for low-level code," FMCAD, 2018.**

47. **S. Banerjee, D. Devecsery, P. M. Chen, and S. Narayanasamy, "Iodine: Fast dynamic taint tracking using rollback-free optimistic hybrid analysis," in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2019, pp. 490–504.**

48. **A. Henderson, L. K. Yan, X. Hu, A. Prakash, H. Yin, and S. McCamant, "DECAF: A platform-neutral whole-system dynamic binary analysis platform," IEEE Transactions on Software Engineering, vol. 43, no. 2, pp. 164–184, 2016.**

49. **A. Davanian, Z. Qi, Y. Qu, and H. Yin, "DECAF++: Elastic whole-system dynamic taint analysis," in 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2019), 2019, pp. 31–45.**

50. **D. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall, "TaintEraser: Protecting sensitive data leaks using application-level taint tracking," ACM SIGOPS Operating Systems Review, vol. 45, no. 1, pp. 142–154, 2011.**

51. **J. Galea and D. Kroening, "The taint rabbit: Optimizing generic taint analysis with dynamic fast path generation," in Proceedings of the 15th ACM Asia Conference on Computer and Communications Security, 2020, pp. 622–636.**

52. **S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, "Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps," ACM Sigplan Notices, vol. 49, no. 6, pp. 259–269, 2014.**

53. **Intel, "Vector register sampling / CVE-2020-0548, CVE-2020-8696 / Intel-SA-00329," https://software.intel.com/security-software-guidance/advisory-guidance/vector-register-sampling, 2021.**

54. **Intel, "Microcode update guidance," https://www.intel.com/content/dam/www/public/us/en/security-advisory/documents/sa00329-microcode-update-guidance.pdf, 2021.**

55. **H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and Z. Liang, "Data-oriented programming: On the expressiveness of non-control data attacks," in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2016, pp. 969–986.**

56. **K. K. Ispoglou, B. AlBassam, T. Jaeger, and M. Payer, "Block oriented programming: Automating data-only attacks," in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2018, pp. 1868–1882.**

57. **G. C. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer, "CCured: Type-safe retrofitting of legacy software," ACM Trans. Program. Lang. Syst., vol. 27, no. 3, pp. 477–526, May 2005.**

58. **K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, "AddressSanitizer: A fast address sanity checker," in Proceedings of the USENIX Annual Technical Conference, 2012, pp. 309–318.**

59. **A. Brahmakshatriya, P. Kedia, D. P. McKee, D. Garg, A. Lal, A. Rastogi, H. Nemati, A. Panda, and P. Bhatu, "ConfLLVM: A compiler for enforcing data confidentiality in low-level code," in Proceedings of the Fourteenth EuroSys Conference 2019, 2019, pp. 1–15.**

60. **"SPEC CPU," https://www.spec.org/benchmarks.html#cpu, 2020.**

61. **C. Song, H. Moon, M. Alam, I. Yun, B. Lee, T. Kim, W. Lee, and Y. Paek, "HDFI: Hardware-assisted data-flow isolation," in 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 2016, pp. 1–17.**

62. **C. Song, B. Lee, K. Lu, W. Harris, T. Kim, and W. Lee, "Enforcing kernel security invariants with data flow integrity." in NDSS, 2016.**

63. **M. H. Yun and L. Zhong, "Ginseng: Keeping secrets in registers when you distrust the operating system," in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2019.**

64. **L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi, "PT-Rand: Practical mitigation of data-only attacks against page tables," in Proceedings of the Network and Distributed System Security Symposium (NDSS), 2017.**

65. **C.-C. Tsai, D. E. Porter, and M. Vij, "Graphene-SGX: A practical library OS for unmodified applications on SGX," in 2017 USENIX Annual Technical Conference (USENIX ATC 17), 2017, pp. 645–658.**

66. **S. Shinde, D. Le Tien, S. Tople, and P. Saxena, "Panoply: Low-TCB Linux applications with SGX enclaves." in NDSS, 2017.**

67. **C. Priebe, K. Vaswani, and M. Costa, "EnclaveDB: A secure database using SGX," in 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 2018, pp. 264–278.**

68. **T. Reps, S. Horwitz, and M. Sagiv, "Precise interprocedural dataflow analysis via graph reachability," in Proceedings of the 22nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. ACM, 1995, pp. 49–61.**

69. **M. Weiser, "Program slicing," in Proceedings of the 5th International Conference on Software Engineering. ACM, 1981, pp. 439–449.**

70. **S. Park, S. Lee, W. Xu, H. Moon, and T. Kim, "libmpk: Software abstraction for Intel memory protection keys (Intel MPK)," in 2019 USENIX Annual Technical Conference (USENIX ATC 19), 2019, pp. 241–254.**

71. **J. Corbet, "Memory protection keys," https://lwn.net/Articles/643797/, 2015.**

72. **D. Schrammel, S. Weiser, S. Steinegger, M. Schwarzl, M. Schwarz, S. Mangard, and D. Gruss, "Donky: Domain keys–efficient in-process isolation for RISC-V and x86," in 29th USENIX Security Symposium (USENIX Security 20), 2020, pp. 1677–1694.**

73. **"RISC-V: The free and open RISC instruction set architecture," https://riscv.org/, 2020.**

74. **Xen, "The Xen hypervisor," https://xenproject.org/developers/teams/xen-hypervisor/, 2020.**

75. **I. Shin and J. Seo, "FlexDroid: Enforcing in-app privilege separation in Android," in Network and Distributed System Security Symposium (NDSS). Internet Society, 2016.**

76. **C. Reis, A. Moshchuk, and N. Oskov, "Site isolation: process separation for web sites within the browser," in 28th USENIX Security Symposium (USENIX Security 19), 2019, pp. 1661–1678.**

77. **S. Narayan, C. Disselkoen, T. Garfinkel, N. Froyd, E. Rahm, S. Lerner, H. Shacham, and D. Stefan, "Retrofitting fine-grain isolation in the Firefox renderer," in 29th USENIX Security Symposium (USENIX Security 20), 2020, pp. 699–716.**

78. **Nathan Froyd, "Securing Firefox with WebAssembly," https://hacks.mozilla.org/2020/02/securing-firefox-with-webassembly/, 2021.**

79. **Y. Wu, J. Sun, Y. Liu, and J. S. Dong, "Automatically partitioning software into least privilege components using dynamic data dependency analysis," in 2013 28th IEEE/ACM International Conference on Automated Software Engineering (ASE). IEEE, 2013, pp. 323–333.**

80. **A. A. Clements, N. S. Almakhdhub, S. Bagchi, and M. Payer, "ACES: Automatic compartments for embedded systems," in 27th USENIX Security Symposium (USENIX Security 18), 2018, pp. 65–82.**

81. **S. Liu, G. Tan, and T. Jaeger, "PtrSplit: Supporting general pointers in automatic program partitioning," in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, 2017, pp. 2359–2371.**

82. **S. Liu, D. Zeng, Y. Huang, F. Capobianco, S. McCamant, T. Jaeger, and G. Tan, "Program-mandering: Quantitative privilege separation," in Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, 2019, pp. 1023–1040.**

83. **J. Huang, O. Schranz, S. Bugiel, and M. Backes, "The art of app compartmentalization: Compiler-based library privilege separation on stock Android," in Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, 2017, pp. 1037–1049.**

84. **S. Bhatkar and R. Sekar, "Data space randomization," in Proceedings of the 5th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), 2008, pp. 1–22.**

85. **P. Rajasekaran, S. Crane, D. Gens, Y. Na, S. Volckaert, and M. Franz, "CoDaRR: Continuous data space randomization against data-only attacks," in Proceedings of the 15th ACM Asia Conference on Computer and Communications Security, 2020, pp. 494–505.**

86. **B. Belleville, H. Moon, J. Shin, D. Hwang, J. M. Nash, S. Jung, Y. Na, S. Volckaert, P. Larsen, Y. Paek et al., "Hardware-assisted randomization of data," in International Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 2018, pp. 337–358.**

87. **"Retpoline: A branch target injection mitigation," https://software.intel.com/security-software-guidance/deep-dives/deep-dive-retpoline-branch-target-injection-mitigation, 2021.**

88. **M. Schwarz, M. Lipp, C. Canella, R. Schilling, F. Kargl, and D. Gruss, "ConTExT: A generic approach for mitigating Spectre," in Proceedings of the 27th Annual Network and Distributed System Security Symposium (NDSS'20). Internet Society, Reston, VA, 2020.**

89. **O. Oleksenko, B. Trach, M. Silberstein, and C. Fetzer, "SpecFuzz: Bringing Spectre-type vulnerabilities to the surface," in Proceedings of the 29th USENIX Security Symposium, 2020.**

90. **E. M. Koruyeh, S. H. A. Shirazi, K. N. Khasawneh, C. Song, and N. Abu-Ghazaleh, "SPECCFI: Mitigating Spectre attacks using CFI informed speculation," in Proceedings of the 41st IEEE Symposium on Security and Privacy (S&P). IEEE, 2020.**

91. **M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, "Control-flow integrity," in Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS). ACM, 2005, pp. 340–353.**

92. **M. Vassena, C. Disselkoen, K. v. Gleissenthall, S. Cauligi, R. G. Kıcı, R. Jhala, D. Tullsen, and D. Stefan, "Automatically eliminating speculative leaks from cryptographic code with Blade," Proceedings of the ACM on Programming Languages, vol. 5, no. POPL, pp. 1–30, 2021.**

93. **S. Narayan, C. Disselkoen, D. Moghimi, S. Cauligi, E. Johnson, Z. Gang, A. Vahldiek-Oberwagner, R. Sahita, H. Shacham, D. Tullsen, and D. Stefan, "Swivel: Hardening WebAssembly against Spectre," in Proceedings of USENIX Security Symposium, 2021.**

94. **"WebAssembly (WASM)," https://webassembly.org/, 2020.**

### Appendix

**A. Imprecision Introduced by Steensgaard’s Algorithm**

To compare the precision of Steensgaard’s pointer analysis algorithm with that of Andersen’s algorithm, we consider the function `ngx_rbtree_rotate` from the Nginx codebase. This function accepts an argument `root`, which is of type `ngx_rbtree_node**`. Two different call sites invoke this function, and we analyze the points-to sets generated by both algorithms to highlight the differences in their precision.