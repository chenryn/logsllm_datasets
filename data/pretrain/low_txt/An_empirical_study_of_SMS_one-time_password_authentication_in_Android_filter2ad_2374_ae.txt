### Enhanced Security of One-Time Password (OTP) Authentication Protocols

Several studies have focused on enhancing the security of OTP authentication protocols, including transmission and password generation. For instance, TrustOTP [44] establishes a TrustZone to safeguard against attacks such as Denial-of-Service (DoS). It isolates OTP code and data from the mobile operating system, ensuring that even if the OS is compromised, the generated OTPs and seeds remain secure.

In contrast, Hamdare et al. [23] and Eldefrawy et al. [16] concentrated on securing the authentication during OTP transmission and generation, respectively. Hamdare et al. proposed a scheme to protect OTP mechanisms used in e-commerce transactions from Man-In-The-Middle (MITM) attacks. Instead of transmitting a simple OTP, they combined the OTP with a secure key and created a new transaction password by encrypting the combination using RSA. Eldefrawy et al. focused on securing OTP generation by generating multiple OTPs for both service providers and consumers. Their scheme's low computational cost makes it suitable for mobile devices.

Previous work has primarily aimed to enhance the security of OTP authentication protocols. However, our research focuses on analyzing the correctness of OTP implementations and proposes an approach to check server responses rather than directly performing code analysis. Mulliner et al. [37] conducted a similar study, introducing several attacks and weaknesses of SMS OTPs, such as SIM swap attacks and wireless interception. While they provided general defense techniques, detailed information on exploiting vulnerabilities and protecting SMS OTP authentication was not given. Dmitrienko et al. [12] investigated the implementation of two-factor authentication by well-known Internet service providers (e.g., Google, Dropbox, Twitter, and Facebook). They applied cross-platform infection to control both PC and mobile devices involved in the authentication protocol and identified weaknesses in the SMS-based transaction authentication schemes of four large banks and Google. Their approach determines whether an authentication implementation is secure but does not provide detailed information on the causes. AUTH-EYE, however, identifies the causes of implementation flaws.

### Dynamic Vulnerability Analysis of Mobile Apps

Various approaches have been proposed for dynamic analysis of mobile apps. Zuo et al. [53] developed a method to detect vulnerabilities arising from SSL error handling in mobile platforms. They statically identified customized error handling processes rewritten by developers and executed events to trigger errors, checking if they were processed correctly. This approach requires access to the source code. In contrast, AUTH-EYE assumes the server source code is unavailable and uses only decompiled Android app code.

Dâ€™Orazio et al. [13] relied on an adversary model specifying secure and insecure states to detect vulnerabilities that can expose users' sensitive data in mobile devices. The drawback of their approach is that complete code coverage cannot be ensured through app execution. AUTH-EYE achieves full code coverage by examining all login activities in apps, thus triggering all authentication-relevant functionalities. IntentDroid [24] also relies on an attack scenario to identify Inter-Application Communication (IAC) vulnerabilities by executing attacks on eight specified vulnerabilities. It analyzes activity components of apps based on effect path coverage with low overhead. Although IntentDroid uses a small set of tests to achieve high coverage, path analysis mechanisms cannot be accurately applied to decompiled app code.

AUTH-EYE is similar to SmartGen [52], which performs in-context analysis to expose harmful URLs through symbolic execution in mobile apps. Since server URLs are invisible, SmartGen triggers the appropriate execution through APIs in app code. The main difference between SmartGen and AUTH-EYE is that AUTH-EYE does not rely on dependency patterns to identify target functions. It uses only limited code information (i.e., class names and function names) that are easily and completely extracted. SmartGen targets the detection of hidden malicious URLs, while AUTH-EYE identifies violations of OTP rules in OTP authentication protocol implementations.

### Conclusion

In this paper, we defined six OTP rules based on relevant RFCs and proposed a novel automated system, AUTH-EYE, to check for violations of these rules. We used AUTH-EYE to perform an empirical study on a large number of Android applications. Our approach treats each server as a black box and infers the correctness of its OTP implementation code by analyzing server responses generated after a sequence of login requests. We assessed 3,303 Android apps and identified 544 apps implementing OTP authentication. Only eight of these 544 apps correctly implemented the OTP authentication protocols (i.e., satisfied all six OTP rules). Further analysis revealed that the validation systems of apps in security-critical domains, such as Finance, Shopping, and Social, are not as secure as one might expect. The example cases discussed in Section 5.4 show that poor implementations make users' accounts vulnerable to attacks and may even expose private data directly.

As future work, we plan to extend AUTH-EYE to examine additional OTP rules and perform a more extensive survey of real-world app OTP security. A new dynamic analysis tool, CuriousDroid [10], is introduced. It is a context-based technique and can achieve higher accuracy than Monkey. We will refer to this technique to improve AUTH-EYE. Interested readers can access our GitHub page [8] to obtain the source code of AUTH-EYE and help improve the analysis.

### Acknowledgement

This work was mainly supported by the CSIRO Research Office. It was also partially supported by the General Program of the National Natural Science Foundation of China (Grant No. 61872237), the Key Program of the National Natural Science Foundation of China (Grant No. U1636217), and the Major Project of the Ministry of Industry and Information Technology of China ([2018] No. 36).

### References

[References listed as in the original text]

---

**Note:** The references section has been left unchanged, as it appears to be a comprehensive list of sources. If you need any specific reference to be formatted or cited differently, please let me know.