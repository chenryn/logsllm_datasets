### Next Two Columns: Time Spent on Transforming Alloy Models and SAT Solving

The next two columns in the table represent the time spent on transforming Alloy models into 3-SAT clauses and the time required for SAT solving to find the solution space for each bundle. The timing results demonstrate that, on average, SEPAR can analyze bundles of apps containing hundreds of components within a few minutes on an ordinary laptop. This confirms the feasibility of the proposed technology, which is based on a lightweight formal analyzer.

### Results for RQ4: Policy Enforcement Performance

The final evaluation criterion is the performance benchmark of SEPAR’s policy enforcement. To measure the runtime overhead required for APE (Automated Policy Enforcement), we tested a set of benchmark applications. These applications repeatedly perform several ICC (Inter-Component Communication) operations, such as the `startService` method. To handle uncontrollable factors, we repeated the experiments 33 times, which is the minimum number of repetitions needed to accurately measure the average execution time overhead at a 95% confidence level.

Overall, the execution time overhead incurred by APE for policy enforcement is 11.80% ± 1.76%, making the effect on user experience negligible. It is important to note that, using runtime process instrumentation (cf. Section VI), our infrastructure only introduces overhead with the ICC calls and does not affect non-ICC calls. Therefore, in practice, the overhead introduced by our approach is significantly less than 11.80%.

### Related Work

Mobile security issues have received significant attention recently. In this section, we provide a discussion of related efforts in the context of our research.

#### Android Security Analysis

A substantial body of work [16], [22], [24], [27], [33], [35], [46], [59] focuses on performing security analysis in the context of Android. For instance, Chin et al. [24] studied the security challenges of Android communication and developed ComDroid to detect vulnerabilities through static analysis of each app. Octeau et al. [46] developed Epicc for analyzing Intent properties—except data schemes—through inter-procedural data flow analysis. FlowDroid [13] introduces a precise approach for static taint flow analysis in the context of each application component. CHEX [42] also uses a static method to detect component hijacking vulnerabilities within an app. These research efforts, like many others, primarily focus on Intent and component analysis of individual applications. In contrast, SEPAR's analysis goes beyond single application analysis, enabling the synthesis of policies targeting the overall security posture of a system, thus greatly increasing the scope of vulnerability analysis.

#### ICC Analysis

Another line of research focuses on ICC analysis [17], [40], [41], [57], [59]. DidFail [40] introduces an approach for tracking data flows between Android components, leveraging Epicc for Intent analysis. However, it shares Epicc’s limitation of not covering data schemes, which negatively affects the precision of inter-component path matching. Additionally, it does not generate or enforce system-specific policies, as SEPAR does. IccTA [41] leverages intent resolution analysis to identify inter-component privacy leaks. Its approach for inter-component taint analysis is based on a pre-processing step connecting Android components through code instrumentation, which improves accuracy but may cause scalability issues. Amandroid [57] also tackles Android ICC-based privacy leaks but does not support one of the four types of Android components, i.e., Content Provider, nor complicated ICC methods like `startActivityForResult`. COVERT [17] presents an approach for compositional analysis of Android inter-app vulnerabilities. While this work addresses permission leakage between Android apps, it does not address the automated synthesis and dynamic enforcement of system-specific policies, which is the focus of SEPAR.

#### Policy Enforcement

Another relevant area of research has focused on policy enforcement [15], [23], [37], [39], [48], [50], [56], [58]. Kirin [28] extends the application installer component of Android’s middleware to check the permissions requested by applications against a set of security rules. These predefined rules aim to prevent unsafe combinations of permissions that may lead to insecure data flows. Our work differs in that it generates system-specific, fine-grain policies for a given system rather than relying on general-purpose policies defined based only on coarse-grain permissions. Moreover, SEPAR is more precise as it dynamically analyzes policy violations against flows that actually occur at runtime.

Some other techniques enforce policies at runtime. Kynoid [50] performs a dynamic taint analysis over a modified version of the Dalvik VM. This approach, similar to many previously proposed solutions [26]–[29], requires changes to the Android system. ASM [37] presents an extensible security modules framework that enables apps to define hooks to enforce app-specific security requirements. While this work focuses on the design and implementation of a programmable interface for defining new reference monitors, it does not consider the automation of synthesizing ICC policies. The two approaches are complementary, as SEPAR’s APE module can be realized as ASM hooks.

More recently, DeepDroid [56] presents a policy enforcement scheme based on dynamic memory instrumentation of system processes. However, it depends on undocumented internal architecture of the Android framework and its system resources, which may change in future versions without notice.

Overall, all the enforcement techniques we studied rely on policies developed by users, whereas SEPAR uses formal techniques to synthesize such policies through compositional analysis of Android apps. Our work can complement prior enforcement techniques by providing highly-precise synthesized policies, relieving users of the responsibility of manual policy development.

#### Synthesis

Finally, constraint solving for synthesis and analysis has increasingly been used in various domains [12], [18], [19], [36]. These research efforts share the common insight of using state-of-the-art constraint solving for synthesis. Unlike these techniques, SEPAR tackles the automated detection and mitigation of inter-app security vulnerabilities in Android by synthesizing Android-specific security policies. This relieves the tedium and errors associated with their manual development. To the best of our knowledge, SEPAR is the first formally-precise technique for automated synthesis and dynamic enforcement of Android security policies.

### Concluding Remarks

This paper presents a novel approach for automatic synthesis and enforcement of security policies, allowing end-users to safeguard the apps installed on their devices from inter-app vulnerabilities. The approach, implemented in a tool called SEPAR, combines static program analysis with lightweight formal methods to automatically infer security-relevant properties from a bundle of apps. It then uses a constraint solver to synthesize possible security exploits, from which fine-grain security policies are derived and automatically enforced to protect a given device. The results from experiments with thousands of real-world apps corroborate SEPAR’s ability to find previously unknown vulnerable apps and prevent their exploitation.

The majority of Android devices run KitKat or older versions [1], which provide a static permission model. However, a recently released version of Android (Marshmallow) provides a Permission Manager that allows users to revoke granted permissions after installation. We believe a solution like SEPAR becomes even more relevant in this new version of Android, where policies need to be fine-tuned to the user-specific, continuously-evolving configuration of apps. SEPAR has more potential in such a dynamic setting, as it can be applied to continuously verify the security properties of an evolving system as the status of app permissions changes. SEPAR’s incremental analysis for policy synthesis can be performed on permission-modified apps at runtime. In cases where vulnerabilities are detected and new policies are synthesized, mitigation strategies can be carried out through the policy enforcer deployed on mobile devices, restricting communications between certain apps to secure the system.

Our approach has a few limitations. The current implementation of SEPAR mainly monitors API calls at the bytecode level, potentially missing methods executed in native libraries accessed via Java Native Interface (JNI) or from external sources that are dynamically loaded. It has been shown that only about 4.52% of the apps on the market contain native code [60]. Supporting these additional sources of vulnerability entails extending our static program analysis and instrumentation approach to support native libraries. Reasoning about dynamically loaded code is not possible through static analysis, and thus, an additional avenue of future work is leveraging dynamic analysis techniques, such as TaintDroid [27] and EvoDroid [43], to extract additional behaviors that might be latent in apps.

### Acknowledgment

This work was supported in part by awards CCF-1252644 from the National Science Foundation, D11AP00282 from the Defense Advanced Research Projects Agency, W911NF-09-1-0273 from the Army Research Office, HSHQDC-14-C-B0040 from the Department of Homeland Security, and FA95501610030 from the Air Force Office of Scientific Research.

### References

[References listed here as provided in the original text.]

---

This revised version aims to enhance clarity, coherence, and professionalism while maintaining the technical depth and accuracy of the original text.