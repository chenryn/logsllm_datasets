# Network Nightmare: Ruling the Nightlife Between Shutdown and Boot with PXE Exploits

## Presenter Information
- **Name:** Matt Weeks
- **Alias:** Scriptjunkie (IRC)
- **Twitter:** [scriptjunkie](http://www.scriptjunkie.us/) (rarely used)
- **Website:** [http://www.scriptjunkie.us/](http://www.scriptjunkie.us/)
- **Contact:** scriptjunkie {shift+2} scriptjunkie.us

## Overview
This presentation explores the potential for compromising systems on a Local Area Network (LAN) using Preboot Execution Environment (PXE) exploits. We will discuss the challenges of traditional exploitation, the benefits and downsides of offline attacks, and how PXE can be leveraged for more efficient and stealthy penetration.

### Traditional Exploitation
- **Objective:** Compromise another system on the LAN.
- **Approach:** Writing a 0-day exploit for running network services.
- **Challenges:**
  - Time-consuming: Fuzzing, static analysis, vulnerability identification, and bypassing protections.
  - Post-exploitation: Privilege escalation.

### Easier Approach: Offline Attacks
- **Types:**
  - Evil Maid Attack
  - Rubber Hose Cryptanalysis
- **Downsides:**
  - Physical access required.
  - Lack of stealth.
  - High risk of legal consequences.
  - Pentesters often face these risks in practice.

## Introduction to PXE
- **Definition:** PXE is a firmware standard introduced by Intel that allows a computer to boot from a network interface card (NIC).
- **Features:**
  - BIOS-level access.
  - Bypasses application defenses, host firewalls, OS protections, and antivirus.
  - Independent of the operating system.
  - Works over the network.
  - Provides full system control.

### How PXE Works
1. **Step 1:** The target computer shuts down.
2. **Step 2:** On boot, the system initiates a PXE request.

### PXE Proliferation
- **Observations:**
  - Most modern BIOS systems are PXE-capable.
  - No specific statistics on usage rates.
  - Commonly used for:
    - Image deployment.
    - System restoration.
    - OS upgrades.

### PXE Difficulties
- **DHCP Extension:**
  - Must be on the same LAN as the target.
  - Must beat the real DHCP server.
- **TFTP Server:**
  - Required for serving the PXE boot files.
- **Code Execution:**
  - Code runs on bare metal, requiring careful handling.

### Current PXE "Attacks"
- **Manual Creation:**
  - Setting up a PXE server.
  - Configuring DHCP.
  - Deploying images or running pxelinux.
- **Limitations:**
  - Not designed for malicious use.
  - Manual reconfiguration is time-consuming.
  - Imaging can overwrite existing data.
  - Remote deployment is challenging.
  - Unreliable or lacks targets.
  - Limited support for custom payloads.

### Online Control
- **Linux Live CDs:**
  - DSL, Tiny Core, Knoppix.
  - Strategy: Remaster live CD, boot via PXE, and have scripts auto-run to connect back.
- **Advantages:**
  - No reliance on the target OS.
  - Flexibility.
  - No need to code the entire attack beforehand.
- **Problems:**
  - Network card compatibility.
  - Time constraints (e.g., user presence).

### Offline Code Injection
- **Linux:**
  - Shellcode on boot.
  - Editing files for Remote Code Execution (RCE).
  - User addition.
- **Windows:**
  - Bootkits.
  - Binary planting.
  - Binary swapping.
  - Binary embedding/modification.
  - DLL preloading.
  - Registry edits.

### Bootkits
- **Examples:**
  - Sinowal, Stoned, Whistler, TDL/Alureon.
- **Advantages:**
  - Skill points.
  - Stealth.
  - Full privileges.
- **Disadvantages:**
  - OS-specific.
  - Vulnerable to OS patches.
  - Overkill for PXE attacks.

### Binary Planting
- **Startup Folders:**
  - C:\Documents and Settings\All Users\Start Menu\Programs\Startup
  - C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup
- **WBEM .mof Method:**
  - Used by Stuxnet.
  - Not compatible with Vista+.

### Binary Swapping
- **Example:**
  - Swap services/svchost/wininit with replacements.
- **Advantages:**
  - Guaranteed code execution.
  - Privileged.
  - Portable.
- **Disadvantages:**
  - Early-start processes cause bluescreens.
  - Process must exit to replace the swapped exe.
  - Later-start processes can be disabled.

### Binary Embedding/Modification
- **Inject additional code into existing .exe files.**
- **Problems:**
  - Architecture differences.
  - Slack space issues.
  - Cleanup challenges.

### DLL Preloading
- **Swap or add DLLs higher in the search path.**
- **Problems:**
  - Architecture and import issues.
  - Still an option.

### Registry Edits
- **Run Keys:**
  - HK(LM|CU)\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
- **Service Addition:**
  - HKLM\SYSTEM\CurrentControlSet\Services
- **Known DLLs:**
  - Add string to registry.
- **Problems:**
  - Hive expansion warnings.
  - Risk of corrupting the HKLM registry.

### Binary Swapping + Regedit
- **Swap a non-essential service binary.**
- **Use DWORD registry edit to enable the service.**
- **Advantages:**
  - Reliable.
  - No bluescreens.
  - Cross-architecture.
  - No registry corruption warnings.

### Pivoting
- **Run in memory via Meterpreter.**
- **Network delay and extension.**
- **Compiled program.**

### Meterpreter Review
- **TLV Request.**
- **Embedded DLL.**
- **Reflective Loader.**
- **Method Calls.**

### Attack Recap
1. Dynamic payload generation.
2. DHCP forwarder.
3. TFTP serve.
4. PXELinux kernel, initrd load.
5. Binary swap.
6. Registry edit.
7. Reboot to OS.
8. Swapped EXE spawns payload and performs cleanup.

### Defense
- **How to Fail at Defense:**
  - IP reservations.
  - NAC.
  - PXE Force Mode.
  - BIOS passwords.
- **VLAN Isolation:**
  - Each system on a separate VLAN.
  - Localize broadcast domains.
  - Forward DHCP traffic.
  - Configure via enterprise switch/routers.
- **Firewalls:**
  - Allow only authorized DHCP traffic.
  - Watch for ARP poisoning.
- **Detection of Rogue DHCP Servers:**
  - Periodic scans.
  - Check for duplicate replies.
  - Monitor for unregistered clients.

### Questions
Feel free to ask any questions or share your thoughts on the topic.