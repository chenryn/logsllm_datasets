# Asynchronous Distributed Key Generation (ADKG) Protocol Evaluation and Optimization

## Introduction
This document presents the evaluation, optimization, and related work of an asynchronous distributed key generation (ADKG) protocol. The protocol is designed for discrete logarithm-based threshold cryptosystems and is optimized for efficiency in both bandwidth usage and runtime.

## Figures and Tables

### Figure 4: Bandwidth Usage
- **Y-axis**: Bandwidth usage (in MB)
- **X-axis**: Number of nodes (16, 32, 64, 128)
- **Curves**:
  - `t + 1, curve25519`
  - `t + 1, bls12-381`
  - `2t + 1, curve25519`
  - `2t + 1, bls12-381`
  - `drand, bn256`

### Figure 5: Average Runtime
- **Y-axis**: Average runtime (in seconds)
- **X-axis**: Number of nodes (16, 32, 64, 128)
- **Curves**:
  - `t + 1, curve25519`
  - `t + 1, bls12-381`
  - `2t + 1, curve25519`
  - `2t + 1, bls12-381`

## Optimization and Implementation Details

### Elliptic Curve Operations
- **bls12-381**: Supports pairing, suitable for pairing-based threshold cryptosystems.
- **curve25519**: More efficient for applications not requiring pairing.
  - Group element size: 32 bytes (curve25519), 48 and 96 bytes (bls12-381).
  - Group exponentiation: bls12-381 is 6× slower than curve25519.

### ADKG Protocol Optimizations
1. **Data Dissemination Step**:
   - Omit the error correction and two rounds of communication unless triggered by some nodes.
   - Reduces bandwidth usage by approximately 50% in the common case.
2. **ABA Instances**:
   - Most ABA instances terminate without a coin in the common case.
   - Avoid explicit computation of threshold keys for these instances.
   - Reduces runtime by about 65% for ADKG with \( \ell = t + 1 \).

## Evaluation Setup

- **Nodes**: Varying number (16, 32, 64, 128).
- **Reconstruction Thresholds**: \( t + 1 \) and \( 2t + 1 \).
- **Infrastructure**: Amazon Web Services (AWS) t3a.medium VMs, one node per VM.
  - **VM Specifications**: 2 vCPUs, 4GB RAM, Ubuntu 20.04.
  - **Regions**: Canada, Ireland, N. California, N. Virginia, Oregon, Ohio, Singapore, Tokyo.
- **Network Topology**: Complete graph (all nodes are pairwise connected).

### Baselines
- **Drand**: Synchronous DKG implementation, default reconstruction threshold \( n/2 + 1 \).
  - Drand could only run with up to 64 nodes; 128 nodes caused frequent aborts.

## Evaluation Results

### Runtime
- **Measurement**: Time from start of ADKG to when a node outputs the shared public key and secret share.
- **Results**:
  - For \( \ell = t + 1 \):
    - 64 nodes: ~10 seconds (19% of Drand).
  - For \( \ell = 2t + 1 \):
    - 64 nodes: ~160 seconds (3× of Drand).

### Bandwidth Usage
- **Measurement**: Amount of data sent by a node during the entire ADKG protocol.
- **Results**:
  - 64 nodes:
    - \( \ell = t + 1 \): 2.96 MB (1/30th of Drand).
    - \( \ell = 2t + 1 \): 19.2 MB (1/5th of Drand).

### Table III: Computation Cost of ACSS Phase
- **Elliptic Curves**: curve25519, bls12-381.
- **Number of Nodes**: 16, 32, 64, 128.
- **Time Taken (in seconds)**:
  - \( \ell = t + 1 \):
    - curve25519: 0.01, 0.02, 0.07, 0.19.
    - bls12-381: 0.07, 0.21, 0.71, 2.52.
  - \( \ell = 2t + 1 \):
    - curve25519: 8.50, 32.53, 127.54, 504.47.
    - bls12-381: 8.96, 34.43, 134.66, 531.22.

## Related Work

### Synchronous DKG
- **Pedersen [50]**: First DKG protocol using verifiable secret sharing.
- **Gennaro et al. [31]**: Improved security but higher cost.
- **Neji et al. [47]**: Mitigated bias attack.
- **Canetti et al. [13]**: Extended Gennaro et al. for adaptive adversaries.
- **Fouque and Stern [26]**: Used PVSS for non-interactive protocol.
- **Gurkan et al. [37]**: Linear size public-verification transcript.
- **Groth [35]**: Non-interactive DKG with field element secret key.

### Asynchronous DKG
- **Kate et al. [40]**: Extended Pedersen's DKG to partially synchronous networks.
- **Tomescu et al. [56]**: Lowered computational cost.
- **Kokoris et al. [43]**: First asynchronous DKG.
- **Abraham et al. [4]**: Communication cost \( O(κn^3 \log n) \).
- **Gao et al. [28]** and **Das et al. [19]**: Lowered communication cost to \( O(κn^3) \).

## Conclusion

- **Protocol**: Simple and concretely efficient ADKG for discrete logarithm-based threshold cryptosystems.
- **Communication Cost**: \( O(κn^3) \).
- **Termination**: Expected \( O(\log n) \) rounds.
- **Primitives**: ACSS, RBC, threshold common coin, ABA.
- **Implementation and Evaluation**: Up to 128 geographically distributed nodes, demonstrating practicality.

## Acknowledgments

- **Contributors**: Amit Agarwal, Adithya Bhat, Kobi Gurkan, Dakshita Khurana, Nibesh Shrestha, Gilad Stern, Sylvain Bellemare, Nicolas Gailly.

## References

- [1] "Drand - a distributed randomness beacon daemon," 2020, https://github.com/drand/drand.
- [2] "curve25519-dalek: A pure-rust implementation of group operations on ristretto and curve25519," 2021, https://github.com/dalek-cryptography/curve25519-dalek.
- [3] "hbacss," 2021, https://github.com/tyurek/hbACSS.
- [4] I. Abraham, P. Jovanovic, M. Maller, S. Meiklejohn, G. Stern, and A. Tomescu, "Reaching consensus for asynchronous distributed key generation," in Proceedings of the 2021 ACM Symposium on Principles of Distributed Computing, 2021, pp. 363–373.
- [5] I. Abraham, D. Malkhi, and A. Spiegelman, "Asymptotically optimal validated asynchronous byzantine agreement," in Proceedings of the 2019 ACM Symposium on Principles of Distributed Computing, 2019, pp. 337–346.
- [6] N. Alhaddad, M. Varia, and H. Zhang, "High-threshold avss with optimal communication complexity," in International Conference on Financial Cryptography and Data Security. Springer, 2021, pp. 479–498.
- [7] M. Ben-Or and R. El-Yaniv, "Resilient-optimal interactive consistency in constant time," Distributed Computing, vol. 16, no. 4, pp. 249–262, 2003.
- [8] M. Ben-Or, B. Kelmer, and T. Rabin, "Asynchronous secure computations with optimal resilience," in Proceedings of the thirteenth annual ACM symposium on Principles of distributed computing, 1994, pp. 183–192.
- [9] A. Boldyreva, "Threshold signatures, multisignatures and blind signatures based on the gap-diffie-hellman-group signature scheme," in International Workshop on Public Key Cryptography. Springer, 2003, pp. 31–46.
- [13] R. Canetti, R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, "Adaptive security for threshold cryptosystems," in Annual International Cryptology Conference. Springer, 1999, pp. 98–116.
- [14] J. Canny and S. Sorkin, "Practical large-scale distributed key generation," in International Conference on the Theory and Applications of Cryptographic Techniques. Springer, 2004, pp. 138–152.
- [15] I. Cascudo and B. David, "Scrape: Scalable randomness attested by public entities," in International Conference on Applied Cryptography and Network Security. Springer, 2017, pp. 537–556.
- [16] D. Chaum and T. P. Pedersen, "Wallet databases with observers," in Annual International Cryptology Conference. Springer, 1992, pp. 89–105.
- [17] T. Crain, "Two more algorithms for randomized signature-free asynchronous binary byzantine consensus with t < n/3 and o(n^2) messages and o(1) round expected termination," arXiv preprint arXiv:2002.08765, 2020.
- [18] G. Danezis, L. Kokoris-Kogias, A. Sonnino, and A. Spiegelman, "Narwhal and tusk: a dag-based mempool and efficient bft consensus," in Proceedings of the Seventeenth European Conference on Computer Systems, 2022, pp. 34–50.
- [19] S. Das, Z. Xiang, and L. Ren, "Asynchronous data dissemination and its applications," in Proceedings of the 2021 ACM SIGSAC Conference on Computer and Communications Security, 2021.
- [20] C. Data61, "Python paillier library," https://github.com/data61/python-paillier, 2013.
- [21] Y. G. Desmedt, "Threshold cryptography," European Transactions on Telecommunications, vol. 6, no. 2, pp. 157–163, 1995.