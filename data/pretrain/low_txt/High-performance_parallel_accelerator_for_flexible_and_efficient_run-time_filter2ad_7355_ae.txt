### Performance Comparison of Harmoni and FlexCore

Reports indicate that monitors on the FPGA fabric can only operate at a few hundred MHz. Figure 7 illustrates the normalized performance of Harmoni on a main processing core with a high clock frequency (1 GHz) and compares it with the FlexCore approach, which uses an on-chip FPGA fabric. The FPGA fabric in FlexCore can only run at approximately one-fourth of the main core's clock frequency. Since Harmoni can match the main processing core's clock frequency, its performance impact is minimal. Conversely, the low clock frequency of the FPGA introduces significant overheads for techniques requiring frequent tag operations.

For most benchmarks in our evaluation, Harmoni exhibited much lower performance overheads compared to FlexCore with a slow on-chip FPGA. Additionally, we found that Harmoni can keep pace even with a main processing core running at twice its maximum frequency (2.5 GHz) with only small overheads. Not all instructions on the main core trigger tag operations, so running the tag pipeline at a slower clock frequency does not directly translate to performance overheads for most monitoring techniques. The higher frequencies achievable by Harmoni allow it to be used with high-performance processing cores running at gigahertz and beyond.

### Related Work

In this section, we briefly discuss how the Harmoni architecture relates to and differs from previous work in runtime monitoring. At a high level, Harmoni represents a unique design point in the context of the inherent trade-off between programmability and efficiency. It is more general and programmable than dedicated hardware solutions for a single runtime monitoring technique while providing higher performance and power efficiency compared to fully programmable approaches.

#### A. Hardware-Based Runtime Monitoring

Runtime monitoring and tagging as methods to ensure various program properties have been extensively studied. This work builds on previously proposed monitoring techniques and borrows ideas such as tagging, decoupled monitoring architecture, and software-controlled tables from existing hardware implementations. However, Harmoni aims to enable a broad range of monitoring techniques on a single platform rather than focusing on a specific monitor.

Feustel [22] argued that a complete tagged architecture can make software and systems more cost-effective for practical computations and can naturally and transparently address type and program safety issues. This earlier work introduced the concept of tagging but only in the context of a fixed hardware extension.

Recently, dynamic information flow tracking (DIFT) has been widely studied for building more secure systems. DIFT [1] used a single-bit hardware tagging mechanism to track the flow of untrusted information and prevent program hijacking attempts. Using simple hardware support and tag memory management optimizations, DIFT achieved information flow tracking with negligible performance overheads. Similarly, Minos [23] tags individual words of memory data and implements Biba’s low-water-mark integrity policy [24] to prevent attacks that corrupt control data and hijack program control flow.

Raksha [3] expanded upon DIFT by using multi-bit tags to support programmable and concurrent information flow security policies, along with low-overhead security handlers for better error management. FlexiTaint [28] proposed a fully flexible DIFT implementation where a software-controlled table can propagate and check taint information. While FlexiTaint supports value tags with completely flexible propagation and check policies, it is designed only for dynamic information flow tracking. Harmoni borrows the idea of software-controlled tables but supports a wider range of monitoring techniques, including value, location, and object tags, which can be combined.

Tiwari et al. [26] extended DIFT to the hardware gate level, designing a provably-sound information flow tracking system capable of tracking all explicit and implicit information flows within a computer system. Harmoni, however, targets program-level behaviors and does not handle gate-level information flows.

Early DIFT implementations added tagging capabilities directly into the processing core pipeline, but invasive hardware modifications presented a major obstacle due to high design and verification costs. The DIFT co-processor [25] reduced these costs by performing DIFT in a small, decoupled co-processor, achieving the same degree of security with lower performance overheads and fewer invasive changes. Harmoni uses a similar decoupled co-processor architecture but supports a wide range of monitoring schemes in addition to DIFT.

Other runtime monitoring schemes have been proposed to enable capabilities such as fine-grained memory protection [4], array bound checking [5, 6], software debugging support [7], managed language support like garbage collection [8], and hardware error detection [9]. Harmoni aims to support many of these with a single hardware platform.

#### B. Programmable Monitoring Platforms

Recent efforts have focused on building programmable runtime monitoring architectures that can enable more than one monitoring scheme. Compared to these proposals, Harmoni is either more flexible or provides higher performance.

MemTracker [13] is a runtime monitoring approach for memory bug detection, using a hardware state machine to update and check memory tags. In contrast, Harmoni is not limited to memory bugs and can perform more sophisticated monitoring functions by tracking tags for a larger portion of the program state. MemTracker only supports memory location tags with very simple update and check rules.

LBA [27] proposes using a large number of processing cores for runtime monitoring, augmenting each processor with hardware support for logging a main program trace and delivering it to another (otherwise idle) core for inspection. While LBA is more general, Harmoni is far more efficient and has better throughput because it performs monitoring entirely in hardware, avoiding the area and power overheads of running general-purpose instructions on a separate core.

FlexCore [12] combines a general-purpose processing core with a decoupled, bit-level reconfigurable fabric. The fabric can be reconfigured to perform a range of runtime monitoring functions, but its low throughput can cause high performance overheads on high-performance cores. This work addresses this challenge by narrowing the scope of runtime monitoring functions and optimizing the architecture for tagging techniques.

### Conclusion

This paper presents the Harmoni architecture, a high-performance and reconfigurable co-processor for implementing program monitoring techniques based on tagging in hardware. We demonstrated how various runtime monitoring techniques can be mapped to the Harmoni hardware to check for memory bugs, security violations, and manage system resources. Harmoni achieves a new design point on the spectrum between performance and flexibility for runtime monitoring approaches. By matching the common characteristics of tagging-based monitoring, Harmoni achieves high performance without restricting the capabilities of the monitoring approaches. We evaluated the overheads of the Harmoni co-processor using RTL models and simulations, demonstrating moderate silicon area usage and low overheads on program performance for a range of monitoring approaches.

### Acknowledgments

This work was partially supported by the National Science Foundation grants CNS-0746913 and CNS-0708788, the Air Force grant FA8750-11-2-0025, the Office of Naval Research grant N00014-11-1-0110, the Army Research Office grant W911NF-11-1-0082, and an equipment donation from Intel.

### References

[1] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program execution via dynamic information flow tracking,” in Proceedings of the 11th International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS-XI. New York, NY, USA: ACM, 2004, pp. 85–96.

[2] J. Newsome and D. Song, “Dynamic taint analysis: Automatic detection, analysis, and signature generation of exploit attacks on commodity software,” in Proceedings of the 2005 Network and Distributed Systems Symposium, February 2005.

[3] M. Dalton, H. Kannan, and C. Kozyrakis, “Raksha: a flexible information flow architecture for software security,” in Proceedings of the 34th Annual International Symposium on Computer Architecture, ser. ISCA ’07. New York, NY, USA: ACM, 2007, pp. 482–493.

[4] E. Witchel, J. Cates, and K. Asanović, “Mondrian memory protection,” in Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS-X. New York, NY, USA: ACM, 2002, pp. 304–316.

[5] J. Devietti, C. Blundell, M. M. K. Martin, and S. Zdancewic, “Hardbound: architectural support for spatial safety of the C programming language,” in ASPLOS XIII: Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems, 2008, pp. 103–114.

[6] J. Clause, I. Doudalis, A. Orso, and M. Prvulovic, “Effective memory protection using dynamic tainting,” in Proceedings of the Twenty-Second IEEE/ACM International Conference on Automated Software Engineering, ser. ASE ’07. New York, NY, USA: ACM, 2007, pp. 284–292.

[7] P. Zhou, F. Qin, W. Liu, Y. Zhou, and J. Torrellas, “iwatcher: Efficient architectural support for software debugging,” in Proceedings of the 31st Annual International Symposium on Computer Architecture, ser. ISCA ’04. Washington, DC, USA: IEEE Computer Society, 2004, pp. 224–.

[8] J. A. Joao, O. Mutlu, and Y. N. Patt, “Flexible reference-counting-based hardware acceleration for garbage collection,” in Proceedings of the 36th Annual International Symposium on Computer Architecture, ser. ISCA ’09. New York, NY, USA: ACM, 2009, pp. 418–428.

[9] A. Meixner, M. Bauer, and D. Sorin, “Argus: Low-cost, comprehensive error detection in simple cores,” in Microarchitecture, 2007. MICRO 2007. 40th Annual IEEE/ACM International Symposium on, December 2007, pp. 210–222.

[10] F. Qin, C. Wang, Z. Li, H. Seop Kim, Y. Zhou, and Y. Wu, “LIFT: A low-overhead practical information flow tracking system for detecting security attacks,” in Proceedings of the 39th International Symposium on Microarchitecture, 2006.

[11] S. Chen, M. Kozuch, T. Strigkos, B. Falsafi, P. Gibbons, T. Mowry, V. Ramachandran, O. Ruwase, M. Ryan, and E. Vlachos, “Flexible hardware acceleration for instruction-grain program monitoring,” in Proceedings of the 35th International Symposium on Computer Architecture, June 2008.

[12] D. Y. Deng, D. Lo, G. Malysa, S. Schneider, and G. E. Suh, “Flexible and efficient instruction-grained runtime monitoring using on-chip reconfigurable fabric,” in Proceedings of the 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture, ser. MICRO ’43. Washington, DC, USA: IEEE Computer Society, 2010, pp. 137–148.

[13] G. Venkataramani, B. Roemer, Y. Solihin, and M. Prvulovic, “Memtracker: Efficient and programmable support for memory access monitoring and debugging,” in Proceedings of the 2007 IEEE 13th International Symposium on High Performance Computer Architecture. Washington, DC, USA: IEEE Computer Society, 2007, pp. 273–284.

[14] D. Deng and G. Suh, “Precise exception support for decoupled runtime monitoring architectures,” in Computer Design (ICCD), 2011 IEEE 29th International Conference on, October 2011, pp. 437–438.

[15] N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis, “Hardware enforcement of application security policies using tagged memory,” in Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’08. Berkeley, CA, USA: USENIX Association, 2008, pp. 225–240.

[16] M. Tiwari, B. Agrawal, S. Mysore, J. Valamehr, and T. Sherwood, “A small cache of large ranges: Hardware methods for efficiently searching, storing, and updating big dataflow tags,” in Proceedings of the 41st Annual IEEE/ACM International Symposium on Microarchitecture, ser. MICRO 41. Washington, DC, USA: IEEE Computer Society, 2008, pp. 94–105.

[17] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “Softbound: Highly compatible and complete spatial memory safety for C,” in Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI ’09. New York, NY, USA: ACM, 2009, pp. 245–258.

[18] J. Gaisler, E. Catovic, M. Isomaki, K. Glembo, and S. Habinc, “GRLIB IP Core User’s Manual,” 2008.

[19] SPARC International, “The SPARC Architecture Manual Version 8,” 1992.

[20] Intel Corporation, “Intel Atom Processor Z510,” 2008.

[21] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, and R. B. Brown, “MiBench: A Free, Commercially Representative Embedded Benchmark Suite,” Annual IEEE International Workshop on Workload Characterization, 2001.

[22] E. A. Feustel, “On the advantages of tagged architecture,” IEEE Transactions on Computers, vol. C-22, no. 7, pp. 644–656, July 1973.

[23] J. R. Crandall and F. T. Chong, “Minos: Control data attack prevention orthogonal to memory model,” in Proceedings of the 37th Annual IEEE/ACM International Symposium on Microarchitecture, ser. MICRO 37. Washington, DC, USA: IEEE Computer Society, 2004, pp. 221–232.

[24] K. Biba, M. C. B. MA., Integrity Considerations for Secure Computer Systems, Defense Technical Information Center, 1977.

[25] H. Kannan, M. Dalton, and C. Kozyrakis, “Decoupling dynamic information flow tracking with a dedicated coprocessor,” in Dependable Systems Networks, 2009. DSN ’09. IEEE/IFIP International Conference on, 29 June 2009–2 July 2009, pp. 105–114.

[26] M. Tiwari, H. M. Wassel, B. Mazloom, S. Mysore, F. T. Chong, and T. Sherwood, “Complete information flow tracking from the gates up,” in Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems, ser. ASPLOS ’09. New York, NY, USA: ACM, 2009, pp. 109–120.

[27] S. Chen, B. Falsafi, P. B. Gibbons, M. Kozuch, T. C. Mowry, R. Teodorescu, A. Ailamaki, L. Fix, G. R. Ganger, B. Lin, and S. W. Schlosser, “Log-based architectures for general-purpose monitoring of deployed code,” in Proceedings of the 1st Workshop on Architectural and System Support for Improving Software Dependability, ser. ASID ’06. New York, NY, USA: ACM, 2006, pp. 63–65.

[28] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic, “FlexiTaint: A programmable accelerator for dynamic taint propagation,” in High Performance Computer Architecture, 2008. HPCA 2008. IEEE 14th International Symposium on, February 2008, pp. 173–184.

[29] S. Hauck, T. W. Fry, M. M. Hosler, and J. P. Kao, “The Chimaera Reconfigurable Functional Unit,” IEEE Transactions on Very Large Scale Integration Systems, 2004.

[30] R. Razdan and M. D. Smith, “A High-Performance Microarchitecture with Hardware-Programmable Functional Units,” in Proceedings of the 27th Annual ACM/IEEE International Symposium on Microarchitecture, 1994.

[31] H.-S. Kim, A. K. Somani, and A. Tyagi, “A reconfigurable multi-function computing cache architecture,” in Proceedings of the 8th ACM/SIGDA International Symposium on Field Programmable Gate Arrays, 2000.

[32] J. R. Hauser and J. Wawrzynek, “Garp: A MIPS Processor with a Reconfigurable Coprocessor,” in Proceedings of the 5th Annual IEEE Symposium on FPGAs for Custom Computing Machines, 1997.

[33] R. D. Wittig and P. Chow, “OneChip: An FPGA Processor with Reconfigurable Logic,” in Proceedings of the IEEE Symposium on FPGAs for Custom Computing Machines, 1995.