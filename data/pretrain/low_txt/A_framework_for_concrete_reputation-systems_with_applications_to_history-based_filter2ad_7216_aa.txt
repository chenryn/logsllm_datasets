# A Framework for Concrete Reputation Systems with Applications to History-Based Access Control

**Authors:**
- Karl Krukow, BRICS, University of Aarhus, Denmark
- Mogens Nielsen, BRICS, University of Aarhus, Denmark
- Vladimiro Sassone, Department of Informatics, University of Sussex, UK

## Abstract
In reputation-based trust-management systems, agents maintain information about the past behavior of other agents. This information is used to guide future trust-based decisions regarding interactions. However, while trust management is a crucial component in security decision-making, many existing reputation-based systems lack formal security guarantees.

In this extended abstract, we present a mathematical framework for a class of simple reputation-based systems. In these systems, interaction decisions are based on policies that specify exact requirements on agents' past histories. We introduce a basic declarative language, grounded in pure-past linear temporal logic, for writing such policies. While the basic language is sufficiently expressive (e.g., it can encode Chinese Wall policies), we also demonstrate how to extend it with quantification and parameterized events, enabling the encoding of more complex policies, such as "one-out-of-k." The problem of checking a history against a policy is efficient for the basic language and tractable for the quantified language, provided the policies do not involve too many variables.

**Extended Abstract:** The full paper is available as a BRICS technical report, RS-05-23 [17], online at http://www.brics.dk/RS/05/23.

**Acknowledgments:**
- Nielsen and Krukow are supported by SECURE: Secure Environments for Collaboration among Ubiquitous Roaming Entities, EU FET-GC IST-2001-32486.
- Krukow is supported by DISCO: Semantic Foundations of Distributed Computing, EU IHP, Marie Curie, HPMT-CT-2001-00290.
- BRICS: Basic Research in Computer Science (www.brics.dk), funded by the Danish National Research Foundation.
- Sassone is supported by MyThS: Models and Types for Security in Mobile Distributed Systems, EU FET-GC IST-2001-32617.

**Permission to Use:**
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee, provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers, or to redistribute to lists, requires prior specific permission and/or a fee.

**CCS’05, November 7-11, 2005, Alexandria, Virginia, USA.**
Copyright 2005 ACM 1-59593-226-7/05/0011 ...$5.00.

**Categories and Subject Descriptors:**
- K.6.5 [Management of Computing and Information]: Security and Protection
- D.4.6 [Operating Systems]: Security and Protection - Access controls

**General Terms:**
- Algorithms, Security, Languages

**Keywords:**
- Reputation, trust management, history-based access control, temporal logic, model checking

## 1. Introduction
In global-scale distributed systems, traditional authorization mechanisms often become either overly restrictive or very complex [2]. This is partly due to the large number of principals involved and the open nature of these systems. Dynamic and reputation-based trust-management systems address these issues by taking a less static approach to authorization and decision-making. In such systems, principals keep track of the history of interactions with other principals, using this recorded behavioral information to guide future decisions [15, 24, 27]. This dynamic approach is being explored as a means to overcome the security challenges of global-scale systems. However, unlike traditional (cryptographic) security research, there are no widely accepted security models within the area of dynamic trust and reputation, and few systems provide provable security guarantees [6, 18, 20].

Many reputation systems have been proposed, but most abstract the recorded behavioral information. For example, in the EigenTrust system [16], behavioral information is obtained by counting satisfactory and unsatisfactory interactions, reducing this to a numerical value in the interval [0, 1]. Similarly, the Beta reputation system [14] provides a numerical value in [-1, 1] with a statistical interpretation. These abstractions, while useful, result in a loss of information. For instance, in EigenTrust, a value of 0 can represent both "no previous interaction" and "many unsatisfactory previous interactions" [16]. Consequently, one cannot verify exact properties of past behavior using only the reputation information.

In this paper, we define a reputation system broadly as any system where principals record and use information about past behavior to assess the risk of future interactions. We present a formal framework for a class of simple reputation systems where behavioral information is represented concretely. This concrete representation allows for the verification of precise properties of past behavior. In our framework, such requirements are specified in a declarative policy language, and decisions regarding future interactions are based on the verification of a behavioral history against a policy. This enables us to define reputation systems that provide provable security guarantees, such as: "If principal p gains access to resource r at time t, then the past behavior of p up until time t satisfies requirement r."

### 1.1 Contributions and Outline
- **Formal Model of Behavioral Information:** We present a formal model of the behavioral information that principals obtain in our class of reputation systems. This model is based on event structures, which are sequences of sets of events, and departs from previous work by performing minimal information abstraction (Section 2).
- **Declarative Language for Interaction Policies:** We describe a formal declarative language for interaction policies, based on a pure-past variant of Linear Temporal Logic (LTL). We provide the syntax and semantics of the language, along with examples and encodings of existing approaches to history-based access control, such as the Chinese Wall security policy [3] and a restricted version of 'one-out-of-k' access control [9] (Section 3).
- **Dynamic Model-Checking Algorithms:** We address the problem of efficiently re-evaluating policies when interaction histories change. We present algorithms adapted from Havelund and Roşu [13], which use dynamic programming for runtime verification. These algorithms allow for the efficient summarization of old interactions relative to the policy, without the need to store the complete history (Section 3).
- **Extensions to the Policy Language:** We extend the basic policy language to encompass more realistic and practical policies, including quantitative policies, policy referencing, and quantified policies. We illustrate the extension to quantified policies and discuss results regarding policy-checking algorithms and complexity (Section 5).

### 2. Observations as Events
Agents in a distributed system obtain information by observing events, typically generated by the reception or sending of messages. These message exchanges follow protocols known to both parties before interaction begins. Behavioral observations include information about the contents of messages, deviations from protocols, and failures to receive messages within a certain timeframe.

Our goal in this section is to give a precise meaning to the notion of behavioral observations. In large-scale distributed environments, an agent may be involved in multiple concurrent protocol instances, each generating logically connected events. We use the event-structure framework of Nielsen and Krukow [21] to model behavioral information. This framework provides a generic model for observations independent of any specific programming language.

In our framework, the information an agent has about the behavior of another agent \( p \) is represented as a sequence of sets of events, \( x_1, x_2, \ldots, x_n \), where each set \( x_i \) represents information about the \( i \)-th initiated protocol instance. This generalizes the approach used in frameworks for history-based access control, which typically use sequences of single events. Our approach allows for the modeling of information about protocol runs, providing a more detailed and flexible representation.