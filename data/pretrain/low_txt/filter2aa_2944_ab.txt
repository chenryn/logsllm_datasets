# Table of Contents

## Chapter 7: Scoped Tokens and OAuth2
### 7.1 Scoped Tokens
- **Adding Scoped Tokens to Natter** (p. 218)
- **The Difference Between Scopes and Permissions** (p. 223)

### 7.2 Introducing OAuth2
- **Types of Clients** (p. 226)
- **Authorization Grants** (p. 227)
- **Discovering OAuth2 Endpoints** (p. 229)

### 7.3 The Authorization Code Grant
- **Redirect URIs for Different Types of Clients** (p. 230)
- **Hardening Code Exchange with PKCE** (p. 236)
- **Refresh Tokens** (p. 237)

### 7.4 Validating an Access Token
- **Token Introspection** (p. 239)
- **Securing the HTTPS Client Configuration** (p. 245)
- **Token Revocation** (p. 248)
- **JWT Access Tokens** (p. 249)
- **Encrypted JWT Access Tokens** (p. 256)
- **Letting the AS Decrypt the Tokens** (p. 258)

### 7.5 Single Sign-On (p. 258)

### 7.6 OpenID Connect
- **ID Tokens** (p. 260)
- **Hardening OIDC** (p. 263)
- **Passing an ID Token to an API** (p. 264)

## Chapter 8: Identity-Based Access Control
### 8.1 Users and Groups
- **LDAP Groups** (p. 271)

### 8.2 Role-Based Access Control
- **Mapping Roles to Permissions** (p. 276)
- **Static Roles** (p. 277)
- **Determining User Roles** (p. 279)
- **Dynamic Roles** (p. 280)

### 8.3 Attribute-Based Access Control
- **Combining Decisions** (p. 284)
- **Implementing ABAC Decisions** (p. 285)
- **Policy Agents and API Gateways** (p. 289)
- **Distributed Policy Enforcement and XACML** (p. 290)
- **Best Practices for ABAC** (p. 291)

## Chapter 9: Capability-Based Security and Macaroons
### 9.1 Capability-Based Security (p. 295)
### 9.2 Capabilities and REST
- **Capabilities as URIs** (p. 299)
- **Using Capability URIs in the Natter API** (p. 303)
- **HATEOAS** (p. 308)
- **Capability URIs for Browser-Based Clients** (p. 311)
- **Combining Capabilities with Identity** (p. 314)
- **Hardening Capability URIs** (p. 315)

### 9.3 Macaroons: Tokens with Caveats
- **Contextual Caveats** (p. 321)
- **A Macaroon Token Store** (p. 322)
- **First-Party Caveats** (p. 325)
- **Third-Party Caveats** (p. 328)

## Part 4: Microservice APIs in Kubernetes
### Chapter 10: Microservice APIs in Kubernetes
#### 10.1 Microservice APIs on Kubernetes (p. 336)
#### 10.2 Deploying Natter on Kubernetes
- **Building H2 Database as a Docker Container** (p. 341)
- **Deploying the Database to Kubernetes** (p. 345)
- **Building the Natter API as a Docker Container** (p. 349)
- **The Link-Preview Microservice** (p. 353)
- **Deploying the New Microservice** (p. 355)
- **Calling the Link-Preview Microservice** (p. 357)
- **Preventing SSRF Attacks** (p. 361)
- **DNS Rebinding Attacks** (p. 366)

#### 10.3 Securing Microservice Communications
- **Securing Communications with TLS** (p. 368)
- **Using a Service Mesh for TLS** (p. 370)
- **Locking Down Network Connections** (p. 375)

#### 10.4 Securing Incoming Requests (p. 377)

### Chapter 11: Securing Service-to-Service APIs
#### 11.1 API Keys and JWT Bearer Authentication (p. 384)
#### 11.2 The OAuth2 Client Credentials Grant (p. 385)
- **Service Accounts** (p. 387)

#### 11.3 The JWT Bearer Grant for OAuth2
- **Client Authentication** (p. 391)
- **Generating the JWT** (p. 393)
- **Service Account Authentication** (p. 395)

#### 11.4 Mutual TLS Authentication
- **How TLS Certificate Authentication Works** (p. 397)
- **Client Certificate Authentication** (p. 399)
- **Verifying Client Identity** (p. 402)
- **Using a Service Mesh** (p. 406)
- **Mutual TLS with OAuth2** (p. 409)
- **Certificate-Bound Access Tokens** (p. 410)

#### 11.5 Managing Service Credentials
- **Kubernetes Secrets** (p. 415)
- **Key and Secret Management Services** (p. 420)
- **Avoiding Long-Lived Secrets on Disk** (p. 423)
- **Key Derivation** (p. 425)

#### 11.6 Service API Calls in Response to User Requests
- **The Phantom Token Pattern** (p. 429)
- **OAuth2 Token Exchange** (p. 431)

## Part 5: APIs for the Internet of Things
### Chapter 12: Securing IoT Communications
#### 12.1 Transport Layer Security
- **Datagram TLS** (p. 441)
- **Cipher Suites for Constrained Devices** (p. 452)

#### 12.2 Pre-Shared Keys
- **Implementing a PSK Server** (p. 460)
- **The PSK Client** (p. 462)
- **Supporting Raw PSK Cipher Suites** (p. 463)
- **PSK with Forward Secrecy** (p. 465)

#### 12.3 End-to-End Security
- **COSE** (p. 468)
- **Alternatives to COSE** (p. 472)
- **Misuse-Resistant Authenticated Encryption** (p. 475)

#### 12.4 Key Distribution and Management
- **One-Off Key Provisioning** (p. 480)
- **Key Distribution Servers** (p. 481)
- **Ratcheting for Forward Secrecy** (p. 482)
- **Post-Compromise Security** (p. 484)

### Chapter 13: Securing IoT APIs
#### 13.1 Authenticating Devices
- **Identifying Devices** (p. 489)
- **Device Certificates** (p. 492)
- **Authenticating at the Transport Layer** (p. 492)

#### 13.2 End-to-End Authentication
- **OSCORE** (p. 499)
- **Avoiding Replay in REST APIs** (p. 506)

#### 13.3 OAuth2 for Constrained Environments
- **The Device Authorization Grant** (p. 512)
- **ACE-OAuth** (p. 517)

#### 13.4 Offline Access Control
- **Offline User Authentication** (p. 518)
- **Offline Authorization** (p. 520)

## Appendices
### Appendix A: Setting Up Java and Maven (p. 523)
### Appendix B: Setting Up Kubernetes (p. 532)

## Index (p. 535)

---

# Preface

I have been a professional software developer, off and on, for about 20 years now, and I’ve worked with a wide variety of APIs over those years. My early days were spent hacking together adventure games in BASIC and a little Z80 machine code, with no concern that anyone else would ever use my code, let alone need to interface with it. It wasn’t until I joined IBM in 1999 as a pre-university employee (affectionately known as “pooeys”) that I first encountered code written to be used by others. I remember a summer spent valiantly trying to integrate a C++ networking library into a testing framework with only a terse email from the author to guide me. In those days, I was more concerned with deciphering inscrutable compiler error messages than thinking about security.

Over time, the notion of API has evolved to encompass remotely accessed interfaces where security is no longer so easily dismissed. Running scared from C++, I found myself in a world of Enterprise Java Beans, with their own flavor of remote API calls and enormous weight of interfaces and boilerplate code. I could never quite remember what it was I was building in those days, but whatever it was must have been tremendously important to need all that code. Later, we added a lot of XML in the form of SOAP and XML-RPC, which didn’t help. I remember the arrival of RESTful APIs and then JSON as a breath of fresh air: at last, the API was simple enough that you could stop and think about what you were exposing to the world. It was around this time that I became seriously interested in security.

In 2013, I joined ForgeRock, then a startup recently risen from the ashes of Sun Microsystems. They were busy writing modern REST APIs for their identity and access management products, and I dived right in. Along the way, I got a crash course in modern token-based authentication and authorization techniques that have transformed API security in recent years and form a large part of this book. When I was approached by Manning about writing a book, I knew immediately that API security would be the subject.

The outline of the book has changed many times during the course of writing it, but I’ve stayed firm to the principle that details matter in security. You can’t achieve security purely at an architectural level, by adding boxes labeled “authentication” or “access control.” You must understand exactly what you are protecting and the guarantees those boxes can and can’t provide. On the other hand, security is not the place to reinvent everything from scratch. In this book, I hope that I’ve successfully trodden a middle ground: explaining why things are the way they are while also providing lots of pointers to modern, off-the-shelf solutions to common security problems.

A second guiding principle has been to emphasize that security techniques are rarely one-size-fits-all. What works for a web application may be completely inappropriate for use in a microservices architecture. Drawing on my direct experience, I’ve included chapters on securing APIs for web and mobile clients, for microservices in Kubernetes environments, and APIs for the Internet of Things. Each environment brings its own challenges and solutions.

---

# Acknowledgments

I knew writing a book would be a lot of hard work, but I didn’t know that starting it would coincide with some of the hardest moments of my life personally, and that I would be ending it in the midst of a global pandemic. I couldn’t have gotten through it all without the unending support and love of my wife, Johanna. I’d also like to thank our daughter, Eliza (the littlest art director), and all our friends and family.

Next, I’d like to thank everyone at Manning who helped turn this book into a reality. I’d particularly like to thank my development editor, Toni Arritola, who patiently guided my teaching style, corrected my errors, and reminded me who I am writing for. I’d also like to thank my technical editor, Josh White, for keeping me honest with a lot of great feedback. A big thank you to everybody else at Manning who has helped me along the way: Deirdre Hiam, my project editor; Katie Petito, my copyeditor; Keri Hales, my proofreader; and Ivan Martinovic, my review editor. It’s been a pleasure working with you all.

I’d like to thank my colleagues at ForgeRock for their support and encouragement. I’d particularly like to thank Jamie Nelson and Jonathan Scudder for encouraging me to work on the book, and to everyone who reviewed early drafts, in particular Simon Moffatt, Andy Forrest, Craig McDonnell, David Luna, Jaco Jooste, and Robert Wapshott.

Finally, I’d like to thank Jean-Philippe Aumasson, Flavien Binet, and Anthony Vennard at Teserakt for their expert review of Chapters 12 and 13, and the anonymous reviewers of the book who provided many detailed comments.

To all the reviewers, Aditya Kaushik, Alexander Danilov, Andres Sacco, Arnaldo Gabriel, Ayala Meyer, Bobby Lin, Daniel Varga, David Pardo, Gilberto Taccari, Harinath Kuntamukkala, John Guthrie, Jorge Ezequiel Bo, Marc Roulleau, Michael Stringham, Ruben Vandeginste, Ryan Pulling, Sanjeev Kumar Jaiswal (Jassi), Satej Sahu, Steve, and many others, thank you for your invaluable feedback and contributions.