### AddressSanitizer and Other Defenses

AddressSanitizer [36] employs a quarantine pool with a FIFO (First-In, First-Out) reuse order, among other techniques. PageHeap [2] places freed pages in a quarantine, removing read/write page permissions. This approach can detect attempted reuse only if the page has not yet been reallocated, potentially missing some attacks. Both of these defenses can be defeated by exhausting the heap.

Microsoft’s MemoryProtection consists of Delayed Free (similar to a quarantine) and Isolated Heap (which separates normal objects from “critical” objects) [8]. Both of these defenses can be bypassed [22].

Cling [11] reuses memory only among heap objects of the same type, ensuring type-safe heap memory reuse but not full temporal memory safety.

### Limiting the Damage from Exploits

Rather than enforcing complete memory safety, which may be too expensive, some approaches focus on containing the damage from exploits. Often, the goal of exploiting a use-after-free vulnerability is to hijack control flow, such as by modifying function pointers. Control-Flow Integrity (CFI) [10] is one defense, but recent work on “control-flow bending” [16] has shown that even ideal CFI policies may be vulnerable for some programs.

Code Pointer Integrity (CPI) applies memory safety (spatial and temporal) specifically to code pointers [26], while Code Pointer Separation (CPS) is a weaker but more practical defense. Both CPI and CPS require compiler support. However, CFI, CPS, and CPI do not protect against non-control data attacks, such as reading a session key or changing an 'isAdmin' variable [17]. Recent research has shown that "data-oriented programming" can be Turing-complete [24].

### Limitations and Future Work

Oscar is currently a proof-of-concept for measuring overhead on benchmarks and is not ready for production, primarily due to the following limitations:

1. **Page-Table Memory Reclamation**: Reclaiming page-table memory requires engineering, such as using `pte_free()`. The Linux source suggests implementing garbage collection for free page table pages, possibly using a reference count in the `struct page` [15]. While not all page-tables can be reclaimed, the generational hypothesis (most objects are short-lived) suggests that many page-tables can be reclaimed. The memory overhead comparison in Section 4.3 already accounts for the size of paging structures, and Oscar still shows lower overall overhead despite not cleaning up paging structures.

2. **Memory Overlap with User Requests**: We have not encountered issues with users' `mmap` requests overlapping Oscar's region of shadow addresses, but it would be safer to enforce this deterministically by intercepting `mmap` calls.

**Thread-Specific High-Water Marks**: Currently, all threads share the same high-water mark for placing new shadows, protected by a global mutex. A better approach would be to dynamically partition the address space between threads/arenas. For example, when a new allocator arena is created, it could split half the address space from the arena with the largest share. Each arena could then have its own high-water mark, allowing independent allocations and potentially reducing overhead in memcached benchmarks, though not in SPEC CPU benchmarks (which are single-threaded).

**Applicability to Other Allocators**: Our techniques can be applied to other popular memory allocators (e.g., tcmalloc) or custom allocators. The overheads reported for SPEC CPU are based on instrumenting standard `malloc`/`free`, providing protection similar to prior work. Wrapping CMA's provides more comprehensive protection but with higher overheads for some benchmarks, as discussed in Section 5.2.

**Selective Shadow Refresh**: If we modify the internal `malloc`, Oscar can selectively refresh (or batch-create) shadows. For example, small objects reused in a first-in-first-out order are likely to use speculatively created shadows. Other bins, such as last-in-first-out or best-fit, make future use less predictable. This optimization could benefit xalancbmk and dealII, where the ordinary refresh shadow approach was a net loss.

**Multiple Objects per Shadow**: We could experiment with placing multiple objects per shadow, reducing the number of shadows and lowering runtime and memory overhead. To further reduce memory overhead, we could place the canonical address field at the start of each page rather than each object, allowing all objects on the page to share the canonical address field. This could significantly reduce memory overhead for programs with many small allocations (e.g., soplex).

### Conclusion

Efficient, backward-compatible temporal memory safety for C programs remains a challenging, unsolved problem. By viewing existing schemes as lock-and-key, we demonstrated that page-permissions-based protection schemes are the most elegant and theoretically promising. Building on Dhurjati and Adve’s core idea of one shadow per object, we addressed the accumulation of `vm_area_structs` for freed objects and incompatibility with programs that fork(). Our system, Oscar, introduces new optimizations without requiring source code, providing low overheads for many benchmarks and simpler deployment. Oscar brings page-permissions-based protection schemes to the forefront of practical solutions for temporal memory safety.

### Acknowledgements

This work was supported by the AFOSR under MURI award FA9550-12-1-0040, Intel through the ISTC for Secure Computing, and the Hewlett Foundation through the Center for Long-Term Cybersecurity. We thank Nicholas Carlini, David Fifield, Úlfar Erlingsson, and the anonymous reviewers for their helpful comments and suggestions.

### References

[1] AddressSanitizerLeakSanitizer. https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer.

[2] How to use Pageheap.exe in Windows XP, Windows 2000, and Windows Server 2003. https://support.microsoft.com/en-us/kb/286470.

[3] Memcheck: a memory error detector. http://valgrind.org/docs/manual/mc-manual.html.

[4] Ownership and moves. https://rustbyexample.com/scope/move.html.

[5] Readme 1st CPU2006. https://www.spec.org/cpu2006/Docs/readme1st.html#Q21.

[6] Threads and fork(): think twice before mixing them. https://www.linuxprogrammingblog.com/threads-and-fork-think-twice-before-using-them, June 2009.

[7] Advancing Moore’s Law in 2014! http://www.intel.com/content/dam/www/public/us/en/documents/presentation/advancing-moores-law-in-2014-presentation.pdf, August 2014.

[8] Efficacy of MemoryProtection against use-after-free vulnerabilities. http://community.hpe.com/t5/Security-Research/Efficacy-of-MemoryProtection-against-use-after-free/ba-p/6556134#.VsFYB8v8vCK, July 2014.

[9] Electric Fence. http://elinux.org/index.php?title=Electric_Fence&oldid=369914, January 2015.

[10] ABADI, M., BUDIU, M., ERLINGSSON, Ú., AND LIGATTI, J. Control-flow integrity principles, implementations, and applications. TISSEC (2009).

[11] AKRITIDIS, P. Cling: A Memory Allocator to Mitigate Dangling Pointers. In USENIX Security (2010), pp. 177–192.

[12] ATIKOGLU, B., XU, Y., FRACHTENBERG, E., JIANG, S., AND PALECZNY, M. Workload analysis of a large-scale key-value store. In ACM SIGMETRICS Performance Evaluation Review (2012), vol. 40, ACM, pp. 53–64.

[13] BERGER, E. D., AND ZORN, B. G. DieHard: probabilistic memory safety for unsafe languages. ACM SIGPLAN Notices 41, 6 (2006), 158–168.

[14] BERGER, E. D., ZORN, B. G., AND MCKINLEY, K. S. Reconsidering custom memory allocation. ACM SIGPLAN Notices 48, 4S (2013), 46–57.

[15] CABALLERO, J., GRIECO, G., MARRON, M., AND NAPPA, A. Undangle: early detection of dangling pointers in use-after-free and double-free vulnerabilities. In International Symposium on Software Testing and Analysis (2012), ACM, pp. 133–143.

[16] CARLINI, N., BARRESI, A., PAYER, M., WAGNER, D., AND GROSS, T. R. Control-flow bending: On the effectiveness of control-flow integrity. In USENIX Security (2015), pp. 161–176.

[17] CHEN, S., XU, J., SEZER, E. C., GAURIAR, P., AND IYER, R. K. Non-Control-Data Attacks Are Realistic Threats. In USENIX Security (2005), vol. 5.

[36] SEREBRYANY, K., BRUENING, D., POTAPENKO, A., AND VYUKOV, D. AddressSanitizer: A fast address sanity checker. In USENIX ATC (2012), pp. 309–318.

[37] SHUTEMOV, K. A. [RFC, PATCHv1 00/28] 5-level paging. http://lkml.iu.edu/hypermail/linux/kernel/1612.1/00383.html, Dec 2016.

[38] SIMPSON, M. S., AND BARUA, R. K. MemSafe: ensuring the spatial and temporal memory safety of C at runtime. Software: Practice and Experience 43, 1 (2013), 93–128.

[39] SZEKERES, L., PAYER, M., WEI, T., AND SONG, D. SoK: Eternal war in memory. In IEEE S&P (2013), IEEE, pp. 48–62.

[40] TICE, C., ROEDER, T., COLLINGBOURNE, P., CHECKOWAY, S., ERLINGSSON, Ú., LOZANO, L., AND PIKE, G. Enforcing forward-edge control-flow integrity in gcc & llvm. In USENIX Security (2014).

[41] VAN DER KOUWE, E., NIGADE, V., AND GIUFFRIDA, C. DangSan: Scalable Use-after-free Detection. In EuroSys (2017), pp. 405–419.

[42] YOUNAN, Y. FreeSentry: protecting against use-after-free vulnerabilities due to dangling pointers. In NDSS (2015).

[18] CHEN, X., SLOWINSKA, A., AND BOS, H. Who allocated my memory? Detecting custom memory allocators in C binaries. In WCRE (2013), pp. 22–31.

[19] CHEN, X., SLOWINSKA, A., AND BOS, H. On the detection of custom memory allocators in C binaries. Empirical Software Engineering (2015), 1–25.

[20] CORPORATION, I. 5-Level Paging and 5-Level EPT. https://software.intel.com/sites/default/files/managed/2b/80/5-level_paging_white_paper.pdf, May 2017.

[21] COWAN, C., BEATTIE, S., JOHANSEN, J., AND WAGLE, P. PointGuard: protecting pointers from buffer overflow vulnerabilities. In USENIX Security (2003), vol. 12, pp. 91–104.

[22] DEMOTT, J. UaF: Mitigation and Bypass. https://bromiumlabs.files.wordpress.com/2015/01/demott_uaf_migitation_and_bypass2.pdf, January 2015.

[23] DHURJATI, D., AND ADVE, V. Efficiently detecting all dangling pointer uses in production servers. In Dependable Systems and Networks (2006), IEEE, pp. 269–280.

[24] HU, H., SHINDE, S., ADRIAN, S., CHUA, Z. L., SAXENA, P., AND LIANG, Z. Data-Oriented Programming: On the Expressive of Non-Control Data Attacks. In IEEE S&P (2016).

[25] JIM, T., MORRISETT, J. G., GROSSMAN, D., HICKS, M. W., CHENEY, J., AND WANG, Y. Cyclone: A Safe Dialect of C. In USENIX ATC (2002), pp. 275–288.

[26] KUZNETSOV, V., SZEKERES, L., PAYER, M., CANDEA, G., SEKAR, R., AND SONG, D. Code-pointer integrity. In OSDI (2014), pp. 147–163.

[27] LEE, B., SONG, C., JANG, Y., WANG, T., KIM, T., LU, L., AND LEE, W. Preventing Use-after-free with Dangling Pointers Nullification. In NDSS (2015).

[28] LVIN, V. B., NOVARK, G., BERGER, E. D., AND ZORN, B. G. Archipelago: trading address space for reliability and security. ACM SIGOPS Operating Systems Review 42, 2 (2008), 115–124.

[29] NAGARAKATTE, S. personal communication, June 2017.

[30] NAGARAKATTE, S., MARTIN, M. M., AND ZDANCEWIC, S. Watchdog: Hardware for safe and secure manual memory management and full memory safety. ACM SIGARCH Computer Architecture News 40, 3 (2012), 189–200.

[31] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M., AND ZDANCEWIC, S. CETS: compiler enforced temporal safety for C. ACM Sigplan Notices 45, 8 (2010), 31–40.

[32] NAGARAKATTE, S. G. Practical low-overhead enforcement of memory safety for C programs. University of Pennsylvania, 2012. Doctoral dissertation.

[33] NECULA, G. C., MCPEAK, S., AND WEIMER, W. CCured: Type-safe retrofitting of legacy code. ACM SIGPLAN Notices 37, 1 (2002), 128–139.

[34] ROGERS, A., CARLISLE, M. C., REPPY, J. H., AND HENDREN, L. J. Supporting dynamic data structures on distributed-memory machines. TOPLAS 17, 2 (1995), 233–263.

[35] SAHITA, R. L., SHANBHOGUE, V., NEIGER, G., EDWARDS, J., OUZIEL, I., HUNTLEY, B. E., SHWARTSMAN, S., DURHAM, D. M., ANDERSON, A. V., LEMAY, M., ET AL. Method and apparatus for fine grain memory protection, Dec. 31 2015. US Patent 20,150,378,633.