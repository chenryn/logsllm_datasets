### 5.4 Impact on Alert Correlation

Alert correlation is currently a major focus in the research community as a means to address the diagnostic accuracy issues observed in many commercial intrusion-detection systems (IDS). We are also part of this trend, working towards alert correlation to reduce the number of alerts that operators and analysts must process. By incorporating feature extraction into our model, we can push some correlation functionalities down to the probes, thereby reducing alert traffic and ensuring that the manager is dedicated to correlating alerts from different probes.

We believe that the extractor layer in the probe is a relatively simple engine, designed to extract features from individual events. We do not envision a feature extraction mechanism that would search for a feature across multiple events. In such cases, the feature should be split into two sub-features, each covering one event. The aggregation of these sub-features is then implemented by the analyzer. As a result, the analyzer can provide diagnostics based on both single and multiple events.

Several research projects have proposed mechanisms to use existing IDS alerts and correlate them to improve diagnostic quality and reduce false positives. An example of this is the Tivoli RiskManager product [5]. From the perspective of feature extraction, a more effective solution is to enhance the probes themselves for the following reasons:

- **Data Richness**: Probes have access to more internal data than what is included in the alerts they generate. This additional data is particularly useful for diagnosing multiple features from the same data source, such as a single HTTP request or a single network packet.
- **Minimized Information Exchange**: Reducing the exchange of information between different components of an IDS minimizes the bandwidth required for remote management, especially over smaller network links.
- **Prioritized Communication**: Communications with management consoles can be prioritized more effectively, sending only the most critical alerts immediately and batching less urgent alerts related to reporting and trending activities.

With more intelligent probes, the focus on correlation can shift to the most interesting aspects of combining alerts from multiple probes, while ensuring that each probe provides reliable diagnostics.

### 6 Conclusion

In this paper, we have presented the design of a test bed for the comparative evaluation of intrusion-detection systems. This test bed has been used to compare four commercial IDSs with each other and with the open-source lightweight Snort. Our results indicate that there is room for improvement in the tested probes, particularly in the relevance of the alerts they send, which should include more pertinent information from the monitored data stream.

For future work, the test bed is being developed to introduce additional applications and services, and to vary the traffic profile to make the task of the tested IDSs more challenging. Additionally, we are developing a prototype probe to validate the extractor concept and verify that it indeed improves the diagnostic. This prototype will serve as an additional benchmark alongside Snort in the test bed.

### References

1. Browne, H. K., Arbaugh, W. A., Hugh, J. M., and Fithen, W. L. A trend analysis of exploitations. In Proceedings of the 2001 IEEE Symposium on Security and Privacy (Oakland, CA, May 2001).
2. Cert Coordination Center. Multiple intrusion detection systems may be circumvented via %u encoding. CERT-CC Vulnerability Note VU#548515, July 2001.
3. Curry, D., and Debar, H. Intrusion detection message exchange format data model and extensible markup language (XML) document type definition. Internet Draft (work in progress), December 2001.
4. Debar, H., Dacier, M., and Wespi, A. Reference Audit Information Generation for Intrusion Detection Systems. In Proceedings of IFIPSEC’98 (Vienna, Austria and Budapest, Hungary, August 31–September 4 1998), pp. 405–417.
5. Debar, H., and Wespi, A. Aggregation and correlation of intrusion-detection alerts. In Proceedings of RAID 2001 (Davis, CA, USA, October 2001), pp. 85–103.
6. Handley, M., Kreibich, C., and Paxson, V. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Proceedings of the 10th USENIX Security Symposium (Washington, DC, August 13–17 2001).
7. Lippman, R., Haines, J. W., Fried, D. J., Korba, J., and Das, K. Analysis and results of the 1999 DARPA off-line intrusion detection evaluation. In Proceedings of RAID 2000 (October 2000), pp. 162–182.
8. McHugh, J. The 1998 Lincoln Laboratory IDS evaluation, a critique. In Proceedings of RAID 2000 (Toulouse, France, October 2000), pp. 145–161.
9. Mueller, P., and Shipley, G. To catch a thief. Network Computing (August 2001). http://www.nwc.com/1217/1217f1.html.
10. Ptacek, T. H., and Newsham, T. N. Insertion, evasion, and denial of service: Eluding network intrusion detection. Tech. rep., Secure Networks, January 1998.
11. Puketza, N. J., Chung, M., Olsson, R. A., and Mukherjee, B. A software platform for testing intrusion detection systems. IEEE Software 14, 5 (September–October 1997), 43–51.
12. Puketza, N. J., Zhang, K., Chung, M., Mukherjee, B., and Olsson, R. A. A methodology for testing intrusion detection systems. IEEE Trans. Softw. Eng. 22, 10 (October 1996), 719–729.
13. Rain Forest Puppy. A look at whisker’s anti-IDS tactics. http://www.wiretrip.net/rfp/pages/whitepapers/whiskerids.html, 1999.
14. Roesch, M. Snort - lightweight intrusion detection for networks. In Proceedings of LISA’99 (Seattle, Washington, USA, November 7-12 1999).
15. Wood, M., and Erlinger, M. Intrusion detection message exchange requirements. Internet draft (work in progress), June 2002.

---

### A Stochastic Model for Intrusions

**Robert P. Goldman**

Smart Information Flow Technologies (SIFT), LLC  
2119 Oliver Avenue South  
Minneapolis, MN 55405-2440 USA  
Email: PI:EMAIL

#### Abstract

We describe a computer network attack model with two novel features: it uses a highly flexible action representation, the situation calculus, and goal-directed procedure invocation to simulate intelligent, reactive attackers. Using the situation calculus, our simulator can project the results of actions with complex preconditions and context-dependent effects. We have extended the Golog situation calculus programming with goal-directed procedure invocation. With goal-directed invocation, one can express attacker plans like "first attain root privilege on a host trusted by the target, and then exploit the trust relationship to escalate privilege on the target." Our simulated attackers choose among methods that can achieve goals and react appropriately to failures, by persisting, choosing alternate means of goal achievement, and/or abandoning goals. We have designed a stochastic attack simulator and built enough of its components to simulate goal-directed attacks on a network.

#### 1 Introduction

To develop the techniques of cyber defense scientifically, we must be able to explore them without having to bring online special network configurations and conduct potentially harmful actions on those networks. While simulation is not a substitute for actual experimentation, it allows us to test cyber defense components in a controlled environment. Our stochastic model design comprises multiple, modular components that allow security researchers and wargamers to repeatedly exercise their sensors and defenses against goal-directed attackers. The core of our stochastic model is built upon an expressive representation of actions, the situation calculus, allowing us to accurately model complex cyber processes. We have augmented the situation calculus and its process-modeling extension, Golog, with facilities for goal-directed procedure invocation. These permit convenient specification of cyber attackers' plans in terms of the goals they aim to achieve, providing modularity in modeling and enabling us to experiment with a wide variety of attack techniques.

#### 2 Architecture

We have designed the architecture for a full network warfare model (see Figure 1). We have not implemented the entire architecture; our current proof-of-concept implementation focuses on simulating the actions of a single attacker, as this provides the greatest theoretical and modeling challenges. The current prototype demonstrates how a single attacker, with a library of plans and their component exploits, can attack a network.

- **Attacker Population Model**: To determine how a cyber defense will react in real-world scenarios, we need to consider a wide variety of possible attackers. We propose a simple stochastic generator that can randomly create a set of attackers for a scenario. Attackers are drawn from a set of types, each with associated distributions for objectives and knowledge.
- **Attacker Simulation Engine**: Most of the work to date on the stochastic model has centered around this component and the attacker action model. We have developed an extension to the Golog logical representation of procedures, adding goal-directed invocation facilities. The attacker simulation engine is closely integrated with the plan library and attacker actions.
- **Attacker Plan Library**: The attacker plan library consists of sub-goaling data structures that capture abstract strategies for achieving attack goals. For example, to gain access to a host, one can first gain access to a trusted host and then exploit the trust relationship. These plans are modeled separately from individual actions and background network traffic to facilitate plan recognition and maintainability.
- **Attacker Actions (Event Model)**: Attacker actions are modeled using the situation calculus, including both exploits and conventional actions used in attacks. These actions provide the bridge between the attacker's plans and the world model.
- **Network Simulation**: Currently, we have a static model describing the network configuration. Eventually, we aim to develop a timed discrete-event model of a computer network that can be affected by attacker actions and provide time signals for other components.
- **Sensor Models**: The sensor model component includes models of intrusion detectors and other components that provide information to defenders. This will allow us to experiment with IDS report aggregation without fielding large suites of IDSes.

#### 3 Framework for the Single-Attacker Simulation

The framework for the single-attacker simulation is designed to demonstrate the capabilities of the stochastic model. We have developed a proof-of-concept implementation that shows how a single attacker, with a library of plans and exploits, can attack a network. This framework provides a foundation for further development and experimentation with more complex scenarios and multiple attackers.