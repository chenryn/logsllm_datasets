### Theoretical and Practical Aspects of Oblivious Data Access

#### Security Properties
It is computationally infeasible to find two distinct sets that have the same checksum. This property ensures that the hash function provides an efficient and reliable method for authenticating the set of items in a level.

**Theorem 4:** If the discrete logarithm problem in \( \mathbb{Z}^*_p \) is hard, it is computationally infeasible to find two distinct sets \( A \neq B \) such that \( H(A) = H(B) \).

**Theorem 5:** A client interface that correctly implements the integrity constructs will detect all incorrect server responses before they reveal any part of the access pattern or return an incorrect answer to the user.

#### Performance Evaluation
We implemented a prototype of the mechanisms discussed above, providing unique insights into the boundary between theoretical complexity and practical runtimes. We faced numerous challenges in handling terabyte (TB)-level, multi-disk data, including:

- Efficient TB-sized hash tables
- Multi-threading
- Fast packet queuing and data request handling
- Tweaking TCP/IP sockets for efficient, delay-free operation
- Microsecond-level performance optimization

**Implementation Details:**
- **Platform:** Java, compiled using Sun JDK 1.6.0_05
- **Testing Environment:**
  - **Storage Devices:**
    - Seagate Barracuda 7200.11 SATA 3Gb/s 1TB, 7200 RPM, 105 MB/s sustained data rate, 4.16ms average seek latency, 32 MB cache
    - Western Digital Caviar SE16 3 Gb/s, 320GB, 7200 RPM, 122 MB/s sustained data rate, 4.2ms average latency, 16MB cache
  - **Computational Resources:**
    - Intel Pentium 4 CPU at 3.00GHz with 2MB L2 cache
    - 2GB RAM
    - Linux Redhat Fedora Core 8, kernel 2.6.23.1 with Ext4 file system support
  - **Network:** General-purpose 100Mbps CDMA Ethernet network

**Database Growth and Query Response Times:**
- **Figure 3:** Shows query response times over a database growing from 10 to 650 MBytes. Most queries require a few hundred milliseconds. Points above the average represent reshuffles of large levels, which take more time but occur less frequently. After the fourth reshuffle, the level is empty.
- **Figure 4:** Explores the impact of network latency on response time, showing a strong dependence on round-trip time (RTT).
- **Figure 5:** Examines the impact of database size on response time in a controlled, low-latency network setting. The behavior validates the \( O(\log n \log \log n) \) complexity, appearing almost logarithmic for the considered database sizes.

**Improvements:**
- **Cryptographic Primitives:** The Java implementation of cryptographic primitives is slower than what can be achieved on the hardware used, particularly during the reshuffle process.
- **Synchronous Queries:** Our implementation runs queries synchronously, leading to multiple network round-trip delays per query. Higher throughput can be achieved by running multiple queries simultaneously, which is not yet supported but feasible for non-reshuffling queries.
- **Parallel Disk Access:** Disk seek times can be mitigated in a parallel implementation, as the seek penalty can be paid simultaneously across different disks.

#### Conclusions
This paper introduces the first practical oblivious data access protocol with correctness. Key insights include new constructions and sophisticated reshuffling protocols, achieving practical computational complexity \( O(\log n \log \log n) \) and storage overheads \( O(n) \). Our implementation allows a throughput of several queries per second on 1TB+ databases, ensuring full computational privacy and correctness, significantly faster than existing approaches.

#### Acknowledgements
We thank our anonymous reviewers for their valuable insights. This work was partially supported by the NSF through awards CT CNS-0627554, CT CNS-0716608, and CRI CNS-0708025. Additional support was provided by Motorola Labs, IBM Research, the IBM Software Cryptography Group, CEWIT, and the Stony Brook Office of the Vice President for Research.

#### References
[1] GMail. Online at http://gmail.google.com/.
[2] Xdrive. Online at http://www.xdrive.com/.
[3] IBM 4764 PCI-X Cryptographic Coprocessor (PCIXCC). Online at http://www-03.ibm.com/security/cryptocards/pcixcc/overview.shtml, 2006.
[4] D. Asonov. Querying Databases Privately: A New Approach to Private Information Retrieval. Springer Verlag, 2004.
[5] M. Bellare and D. Micciancio. A new paradigm for collision-free hashing: Incrementality at reduced cost. In Proceedings of EuroCrypt, 1997.
[6] Steven M. Bellovin and William R. Cheswick. Privacy-enhanced searches using encrypted bloom filters. Technical report, Columbia University, 2004.
[7] B. H. Bloom. Space/time trade-offs in hash coding with allowable errors. Commun. ACM, 13(7):422–426, 1970.
[8] B. Chor, O. Goldreich, E. Kushilevitz, and M. Sudan. Private information retrieval. In IEEE Symposium on Foundations of Computer Science, pages 41–50, 1995.
[9] CNN. Feds seek Google records in porn probe. Online at http://www.cnn.com, January 2006.
[10] Gartner, Inc. Server Storage and RAID Worldwide. Technical report, Gartner Group/Dataquest, 1999. www.gartner.com.
[11] W. Gasarch. A WebPage on Private Information Retrieval. Online at http://www.cs.umd.edu/~gasarch/pir/pir.html.
[12] W. Gasarch. A survey on private information retrieval, 2004.
[13] O. Goldreich. Foundations of Cryptography. Cambridge University Press, 2001.
[14] Oded Goldreich and Rafail Ostrovsky. Software protection and simulation on oblivious ram. Journal of the ACM, 45:431–473, May 1996.
[15] A. Iliev and S.W. Smith. Private information storage with logarithmic-space secure hardware. In Proceedings of i-NetSec 04: 3rd Working Conference on Privacy and Anonymity in Networked and Distributed Systems, pages 201–216, 2004.
[16] Rajeev Motwani and Prabhakar Raghavan. Randomized Algorithms. Cambridge University Press, 1995.
[17] Radu Sion and Bogdan Carbunar. On the Practicality of Private Information Retrieval. In Proceedings of the Network and Distributed Systems Security Symposium, 2007. Stony Brook Network Security and Applied Cryptography Lab Tech Report 2006-06.
[18] Shuhong Wang, Xuhua Ding, Robert H. Deng, and Feng Bao. Private information retrieval using trusted hardware. In Proceedings of the European Symposium on Research in Computer Security ESORICS, pages 49–64, 2006.
[19] Peter Williams and Radu Sion. Usable Private Information Retrieval. In Proceedings of the 2008 Network and Distributed System Security (NDSS) Symposium, 2008.