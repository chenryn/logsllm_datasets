### Storage Comparison and Trade-offs
Compared to MITRACONJ, our proposed scheme offers significantly more storage capacity. This increased storage requirement is a reasonable trade-off for the substantial improvements in search performance. Additionally, the storage overheads for IEX-ZMF and IEX-2LEV are 10x and 100x larger, respectively, than those for ODXT.

### Leakage Analysis
In this section, we experimentally analyze the leakage profile of ODXT. The experiments were conducted using the same 60.92GB-sized real-world dataset from Wikimedia downloads [17], which was also used for the performance evaluation in Section IV. This dataset contains 16 million documents and 43 million keywords.

#### Leakage Evaluation of Updates
We first present the leakage evaluation of the update protocol in ODXT. We assess the probability that an adversary can correctly guess either the operation \( \text{op} \), the document identifier \( \text{id} \), or the keyword \( w \) underlying a given update operation. As previously mentioned in footnote 3, our leakage enumeration assumes that update operations involving the same file identifier are never repeated. Specifically, when an existing file is updated, it is deleted and re-inserted (in modified form) under a new file identifier. This assumption is common in several existing forward and backward private SSE schemes for single keyword search, including the constructions by Bost et al. [6] and Chamani et al. [10], as well as the original MITRA scheme.

**Figure 15: Leakage Analysis of ODXT: Updates in the "Known Update" Setting**

Our experimental evaluation of the leakages from updates is based on this assumption. In the "known update" model, we assume that at any given time, a computationally bounded adversary has seen \( N = |Upd(DB)| \) update tokens, each corresponding to a unique \( (\text{op}, \text{id}) \) pair. The adversary attempts to guess the operation \( \text{op} \), the document identifier \( \text{id} \), and the keyword \( w \) underlying the next update operation. However, the adversary cannot choose the update operations for which the tokens are generated. The adversary's knowledge grows cumulatively; for each new update operation, the adversary learns the underlying \( (\text{op}, (\text{id}, w)) \) tuple if they fail to predict it correctly.

Figure 15 illustrates the success probability of the adversary as the number of observed tokens increases from 1 to \( 10^8 \). The results show that the adversary can do no better than a random guess. The guessing probability for the operation remains close to 0.5 throughout, indicating an equal probability of addition and deletion. The guessing probabilities for file identifiers and keywords decrease as the total number of files and keywords in the database grows with each update operation.

**Figure 16: Leakage Analysis of ODXT: Updates in the "Chosen Update" Setting**

In the "chosen update" model, we assume that at any given time, a computationally bounded adversary has seen \( N = |Upd(DB)| \) update tokens, each corresponding to a unique but adversarially chosen \( (\text{op}, \text{id}) \) pair. The adversary tries to guess the operation \( \text{op} \), the document identifier \( \text{id} \), and the keyword \( w \) underlying a fresh, randomly chosen update operation.

Figure 16 illustrates the success probability of the adversary as the number of chosen updates increases from 1 to \( 10^8 \). The results show that even in this stronger setting, the adversary can do no better than a random guess. The guessing probability for the operation remains close to 0.5, while the guessing probabilities for file identifiers and keywords decrease as the total number of files and keywords in the database grows with each update operation.

Our experiments thus confirm that updates in ODXT computationally hide the underlying operation \( \text{op} \), the file identifier \( \text{id} \), and the keyword \( w \) from the honest-but-curious adversarial server.

#### Leakage Evaluation of Conjunctive Searches
We now evaluate the leakage from the conjunctive search protocol in ODXT. We assess the probability that the adversary can correctly guess the keywords \( w_1 \) and \( w_2 \) underlying a two-conjunction query \( q = (w_1 \land w_2) \) using two well-known and extensively studied cryptanalysis methodologies in the SSE literature: the leakage-abuse attack of Cash et al. [7] and the file-injection attack of Zhang et al. [38]. These attacks operate in two models: the known file model (where the adversary knows the contents of a certain fraction of the files in the database) and the chosen/injected file model (where a certain fraction of the files in the database are adversarially generated).

Naturally, when the adversary knows (or has injected) all the documents in the database, query recovery is trivial. However, this is a very strong attack model and is practically infeasible. In a real-life application, we want the adversary to have a very small probability of query recovery when they know only a small fraction of the files in the database or have managed to inject a small fraction of files into the database. This would indicate that the adversary has access to no additional leakage (about either the keywords underlying the query or the files in the database) from the search protocol beyond the benign leakage profile formally enumerated in Appendix III-E.

**Figure 17: Leakage Analysis of ODXT: Two-Keyword Conjunctive Searches in the "Known Files" Setting**
**Figure 18: Leakage Analysis of ODXT: Two-Keyword Conjunctive Searches in the "Chosen Files" Setting**

Figure 17 illustrates the success probability of the adversary for both kinds of attacks in the "known file" attack setting. The results show that even when the fraction of known files in the database is as high as 50%, the success probability of the adversary in recovering the keywords underlying a conjunction \( (w_1 \land w_2) \) is less than 5%.

Similarly, Figure 18 illustrates the success probability of the adversary for both kinds of attacks in the "chosen/injected file" attack setting. The results show that even when the fraction of injected files in the database is as high as 60% (which is quite unlikely in any real-world database), the success probability of the adversary in recovering the keywords underlying a conjunction \( (w_1 \land w_2) \) is less than 5%.

Our experiments thus confirm our claims in Section III-E that the leakages incurred by the conjunctive search protocol in ODXT are benign and are resistant to even the most powerful leakage-based cryptanalysis techniques in the SSE literature over real-world databases.

### Conclusion and Open Problems
In this work, we propose the first dynamic SSE scheme supporting conjunctive keyword search that achieves both forward and backward privacy. Prior to this work, the study of forward and backward private SSE was restricted almost exclusively to single keyword search. In the setting of conjunctive keyword search, most prior SSE constructions with sub-linear search complexity only supported static databases.

Our main construction, called Oblivious Cross-Tags (ODXT), supports both updates and conjunctive keyword searches in tandem over very large, arbitrarily-structured databases, including both attribute-value and free-text databases. All operations in ODXT involve only a single round of communication between the client and the server, making it suitable for deployment in various settings such as single-client and multi-client SSE. Updates in ODXT are leakage-free, while searches incur only moderate access pattern leakages to the server that conform to existing notions of forward and backward privacy.

Our work gives rise to several interesting open problems. One goal is to design dynamic conjunctive SSE schemes with even smaller leakage profiles. For example, it would be attractive to construct a scheme that only reveals the update history pertaining to the final query outcome and hides all information related to the least frequent keyword. Extending ODXT beyond conjunctions to support general Boolean queries is another promising direction for future work. Finally, achieving forward and backward private SSE schemes with (quasi-)optimal conjunctive keyword search complexity (along the lines of ORION and HORUS in [10]) remains an open question.

### Acknowledgment
The second author would like to thank the grant "Design and Implementation of Efficient and Secure Searchable Encryption" sponsored by MHRD-STARS (Scheme for Transformational and Advanced Research in Sciences), India, for partially supporting this work.

### References
[1] W. Aiello, Y. Ishai, and O. Reingold, “Priced oblivious transfer: How to sell digital goods,” in EUROCRYPT 2001, 2001, pp. 119–135.
[2] D. J. Bernstein, “Curve25519: New Diffie-Hellman speed records,” in PKC 2006, 2006, pp. 207–228.
[3] L. Blackstone, S. Kamara, and T. Moataz, “Revisiting leakage abuse attacks,” in NDSS 2020, 2020.
[4] B. H. Bloom, “Space/time trade-offs in hash coding with allowable errors,” Commun. ACM, vol. 13, no. 7, pp. 422–426, 1970.
[5] R. Bost, “(cid:80)oϕoς: Forward secure searchable encryption,” in ACM CCS 2016, 2016, pp. 1143–1154.
[6] R. Bost, B. Minaud, and O. Ohrimenko, “Forward and backward private searchable encryption from constrained cryptographic primitives,” in ACM CCS 2017, 2017, pp. 1465–1482.
[7] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart, “Leakage-abuse attacks against searchable encryption,” in ACM CCS 2015, 2015, pp. 668–679.
[8] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, “Dynamic searchable encryption in very-large databases: Data structures and implementation,” in NDSS 2014, 2014.
[9] D. Cash, S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, “Highly-scalable searchable symmetric encryption with support for Boolean queries,” in CRYPTO 2013, 2013, pp. 353–373.
[10] J. G. Chamani, D. Papadopoulos, C. Papamanthou, and R. Jalili, “New constructions for forward and backward private symmetric searchable encryption,” in ACM CCS 2018, 2018, pp. 1038–1055.
[11] Y. Chang and M. Mitzenmacher, “Privacy preserving keyword searches on remote encrypted data,” in ACNS 2005, 2005, pp. 442–455.
[12] M. Chase and S. Kamara, “Structured encryption and controlled disclosure,” in ASIACRYPT 2010, 2010, pp. 577–594.
[13] C. Chu, W. T. Zhu, J. Han, J. K. Liu, J. Xu, and J. Zhou, “Security concerns in popular cloud storage services,” IEEE Pervasive Computing, vol. 12, no. 4, pp. 50–57, 2013.
[14] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky, “Searchable symmetric encryption: Improved definitions and efficient constructions,” in ACM CCS 2006, 2006, pp. 79–88.
[15] M. Etemad, A. K¨upc¸ ¨u, C. Papamanthou, and D. Evans, “Efficient dynamic searchable encryption with forward privacy,” PoPETs, vol. 2018, no. 1, pp. 5–20, 2018.
[16] S. Faber, S. Jarecki, H. Krawczyk, Q. Nguyen, M. Rosu, and M. Steiner, “Rich queries on encrypted data: Beyond exact matches,” in ESORICS 2015, 2015, pp. 123–145.
[17] W. Foundation, “Wikimedia downloads,” https://dumps.wikimedia.org, 2017.
[18] S. Garg, P. Mohassel, and C. Papamanthou, “TWORAM: Efficient oblivious RAM in two rounds with applications to searchable encryption,” in CRYPTO 2016, 2016, pp. 563–592.
[19] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in ACM STOC’09, 2009, pp. 169–178.
[20] E. Goh, “Secure indexes,” IACR Cryptology ePrint Archive, vol. 2003, p. 216, 2003.
[21] O. Goldreich and R. Ostrovsky, “Software protection and simulation on oblivious RAMs,” J. ACM, vol. 43, no. 3, pp. 431–473, 1996.
[22] M. S. Islam, M. Kuzu, and M. Kantarcioglu, “Access pattern disclosure on searchable encryption: Ramification, attack and mitigation,” in NDSS 2012, 2012.
[23] S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, “Outsourced symmetric private information retrieval,” in ACM CCS 2013, 2013, pp. 875–888.
[24] S. Kamara and T. Moataz, “Boolean searchable symmetric encryption with worst-case sub-linear complexity,” in EUROCRYPT 2017, 2017, pp. 94–124.
[25] ——, “Computationally volume-hiding structured encryption,” in EUROCRYPT 2019, 2019, pp. 183–213.
[26] S. Kamara and C. Papamanthou, “Parallel and dynamic searchable symmetric encryption,” in FC 2013, 2013, pp. 258–274.
[27] S. Kamara, C. Papamanthou, and T. Roeder, “Dynamic searchable symmetric encryption,” in ACM CCS 2012, 2012, pp. 965–976.
[28] K. S. Kim, M. Kim, D. Lee, J. H. Park, and W. Kim, “Forward secure dynamic searchable symmetric encryption with efficient updates,” in ACM CCS 2017, 2017, pp. 1449–1463.
[29] S. Lai, S. Patranabis, A. Sakzad, J. K. Liu, D. Mukhopadhyay, R. Steinfeld, S. Sun, D. Liu, and C. Zuo, “Result pattern hiding searchable encryption for conjunctive queries,” in ACM CCS 2018, 2018, pp. 745–762.
[30] M. Naor and B. Pinkas, “Efficient oblivious transfer protocols,” in SODA 2001, 2001, pp. 448–457.
[31] S. Patranabis and D. Mukhopadhyay, “Forward and backward private conjunctive searchable symmetric encryption,” IACR Cryptol. ePrint Arch., vol. 2020, p. 1342, 2020.
[32] R. A. Popa, C. M. S. Redfield, N. Zeldovich, and H. Balakrishnan, “CryptDB: Protecting confidentiality with encrypted query processing,” in ACM SOSP 2011, 2011, pp. 85–100.
[33] D. X. Song, D. A. Wagner, and A. Perrig, “Practical techniques for searches on encrypted data,” in IEEE S&P 2000, 2000, pp. 44–55.
[34] X. Song, C. Dong, D. Yuan, Q. Xu, and M. Zhao, “Forward private searchable symmetric encryption with optimized I/O efficiency,” IACR Cryptology ePrint Archive, vol. 2018, p. 497, 2018.
[35] E. Stefanov, C. Papamanthou, and E. Shi, “Practical dynamic searchable encryption with small leakage,” in NDSS 2014, 2014.
[36] S. Sun, J. K. Liu, A. Sakzad, R. Steinfeld, and T. H. Yuen, “An efficient non-interactive multi-client searchable encryption with support for Boolean queries,” in ESORICS 2016, 2016, pp. 154–172.
[37] S. Sun, X. Yuan, J. K. Liu, R. Steinfeld, A. Sakzad, V. Vo, and S. Nepal, “Practical backward-secure searchable encryption from symmetric puncturable encryption,” in ACM CCS 2018, 2018, pp. 763–780.
[38] Y. Zhang, J. Katz, and C. Papamanthou, “All your queries are belong to us: The power of file-injection attacks on searchable encryption,” in USENIX Security Symposium 2016, 2016, pp. 707–720.