### Request for CHALLENGE and Domain Handling

When a request is made to the `CHALLENGE` domain, it is initially redirected to a specific domain `r`. This redirection occurs only for the first request to `CHALLENGE`. Subsequent requests to this domain are not altered and would fail, as the `CHALLENGE` domain is not listed in the honest DNS server.

We denote web systems with the above characteristics as \( SWS_{\text{priv}}(r) \), where `r` is the domain of the relying party provided to the challenge browser in this system.

### Privacy Definition for SPRESSO

We can now define the privacy properties of SPRESSO. It is important to note that the specific attacker process in \( SWS_{\text{priv}}(r) \) (as defined in Section 4) is not significant.

**Definition 2:** We say that SPRESSO is IdP-private if for every web system \( SWS_{\text{priv}}(r_1) \) and \( SWS_{\text{priv}}(r_2) \) with domains \( r_1 \) and \( r_2 \) of relying parties, the systems \( SWS_{\text{priv}}(r_1) \) and \( SWS_{\text{priv}}(r_2) \) are indistinguishable. That is, \( SWS_{\text{priv}}(r_1) \approx SWS_{\text{priv}}(r_2) \).

### Triggering the CHALLENGE Request

There are multiple scenarios where the honest browser in \( SWS_{\text{priv}}(r) \) might be triggered to send an HTTP(S) request to `CHALLENGE`. For example, this could be triggered by:
- The user entering a URL in the browser's location bar.
- A location header (potentially determined by the adversary).
- An (attacker) script instructing the browser to follow a link or create an iframe.

### Indistinguishability Requirement

The definition requires that at any stage of a run, regardless of how and by whom the `CHALLENGE` request was triggered, no malicious Identity Provider (IdP) should be able to determine whether `CHALLENGE` was replaced by \( r_1 \) or \( r_2 \). This means the IdP should not be able to tell whether the request resulted in a login attempt for \( r_1 \) or \( r_2 \). Note that the `CHALLENGE` request is replaced by the honest browser only once. This is the only point in the run where the adversary does not know whether the request is for \( r_1 \) or \( r_2 \). Other requests in the run, even to both \( r_1 \) and \( r_2 \), can be determined by the adversary. However, the adversary should not be able to infer what happened during the `CHALLENGE` request. This definition captures the strong intuition that a malicious IdP should not be able to distinguish between a user logging in at \( r_1 \) or \( r_2 \).

### Analyzing Privacy of SPRESSO

**Theorem 1:** SPRESSO is IdP-private.

The full proof is provided in our technical report [12]. In the proof, we define an equivalence relation between configurations of \( SWS_{\text{priv}}(r_1) \) and \( SWS_{\text{priv}}(r_2) \), including equivalences between states and events (in the pool of waiting events). For each type of atomic DY process in the web system, we define how their states are related. For example, the state of the FWD server must be identical in both configurations. Similarly, the attacker’s state is the same up to subterms the attacker cannot decrypt.

For waiting events, we distinguish between messages resulting from a `CHALLENGE` request and other messages. While the challenged messages may differ in certain ways, other messages may only differ in parts that the attacker cannot decrypt.

Given these equivalences, we show by induction and exhaustive case distinction that, starting from equivalent configurations, every schedule leads to equivalent configurations. (Note that in \( SWS_{\text{priv}}(r) \), a schedule induces a single run because there are no non-deterministic actions that are not determined by a schedule: honest servers and scripts perform only deterministic actions.)

For example, if FWD is a receiver of a message, given its identical state in both configurations (as per the equivalence definition) and the equivalence on the input event, we can immediately show that the equivalence holds on the output message and state. For other atomic DY processes, such as browsers and RPs, this is more challenging. For browsers, we need to consider the different scripts that can potentially run, the origins under which these scripts run, and the actions they can perform.

By showing that the attacker’s views are indistinguishable in equivalent configurations of \( SWS_{\text{priv}}(r_1) \) and \( SWS_{\text{priv}}(r_2) \), we conclude that SPRESSO is IdP-private.

### Authentication of SPRESSO

We show that SPRESSO satisfies two fundamental authentication properties.

**Formal Model for Authentication:**
For the authentication analysis, we consider web systems as defined in Section 5, which now include one network attacker, a finite set of browsers, a finite set of relying parties, a finite set of identity providers, and a finite set of forwarders. Browsers, forwarders, and relying parties can become corrupted by the network attacker. The network attacker also acts as a (dishonest) DNS server to all other parties. We denote a web system in this class by \( SWS_{\text{auth}} \).

**Defining Authentication:**
We state two fundamental authentication properties every Single Sign-On (SSO) system should satisfy. These properties are adapted from [10].

- **Property A:** The attacker should not be able to use a service of an honest relying party (RP) as an honest user. In other words, the attacker should not be able to obtain a service token issued by an honest RP for an ID of an honest user, even if the browser was closed and later used by a malicious user (i.e., after a `CLOSECORRUPT` event, see Section 3.3).
- **Property B:** The attacker should not be able to authenticate an honest browser to an honest RP with an ID that is not owned by the browser (identity injection). For both properties, we require that the forwarder used by the honest RP is also honest.

We call a web system \( SWS_{\text{auth}} \) secure with respect to authentication if the above conditions are satisfied in all runs of the system. The formal definitions of (A) and (B) are provided in our technical report [12].

**Theorem 2:** Let \( SWS_{\text{auth}} \) be an SPRESSO web system as defined above. Then \( SWS_{\text{auth}} \) is secure with respect to authentication.

In other words, the authentication properties (A) and (B) are fulfilled for every SPRESSO web system.

**Proof:**
We first show some general properties of \( SWS_{\text{auth}} \). Specifically, we demonstrate that encrypted communication over HTTPS between an honest relying party and an honest IdP cannot be altered by the (network) attacker. Based on this, any honest relying party always retrieves the correct public signature verification key from honest IdPs. We then show that for a service token to be issued by an honest RP, a request of a specific form must be received by the RP.

Using these properties and the general web system properties shown in the full version of [11], we prove properties (A) and (B) separately. In both cases, we assume that the respective property is not satisfied and lead this to a contradiction. The full proof is provided in our technical report [12].

### Further Related Work

As mentioned in the introduction, many SSO systems have been developed. However, unlike SPRESSO, none of them are privacy-respecting.

Besides the design and implementation of SPRESSO, the formal analysis of this system based on an expressive web model is an important part of our work. The formal treatment of the security of web applications is a relatively new discipline. Of the few works in this area, even fewer are based on a general model that incorporates essential mechanisms of the web. Early works in formal web security analysis (e.g., [3, 8, 15, 16, 24]) are based on very limited models developed specifically for the application under scrutiny. The first work to consider a general model of the web, written in the finite-state model checker Alloy, is the work by Akhawe et al. [2]. Inspired by this work, Bansal et al. [5, 6] built a more expressive model, called WebSpi, in ProVerif [7], a tool for symbolic cryptographic protocol analysis. These models have successfully been applied to web standards and applications. Recently, Kumar [17] presented a high-level Alloy model and applied it to SAML single sign-on. The web model presented in [10], which we further extend and refine here, is the most comprehensive web model to date (see also the discussion in [10]). In fact, this is the only model in which we can analyze SPRESSO. For example, other models do not incorporate a precise handling of windows, documents, or iframes; cross-document messaging (postMessages) are not included at all.

### Conclusion

In this paper, we proposed the first privacy-respecting (web-based) SSO system, where the IdP cannot track at which RP a user logs in. Our system, SPRESSO, is open and decentralized. Users can log in at any RP with any email address with SPRESSO support, allowing for seamless and convenient integration into the usual login process. Being solely based on standard HTML5 and web features, SPRESSO can be used across browsers, platforms, and devices.

We formally prove that SPRESSO indeed enjoys strong authentication and privacy properties. This is important, as numerous attacks on other SSO systems have been discovered, demonstrating that designing a secure SSO system is non-trivial and security flaws can easily go undetected when no rigorous analysis is carried out.

As mentioned in Section 8, there have been only very few analysis efforts based on expressive models of the web infrastructure on web applications in general and SSO systems in particular in the literature so far. Therefore, the analysis carried out in this paper is also of independent interest.

Our work is the first to analyze privacy properties based on an expressive web model, in fact, the most expressive model to date. The general indistinguishability/privacy definition we propose, which is not tailored to any specific web application, will be useful beyond the analysis performed in this paper.

### References

[1] M. Abadi and C. Fournet. Mobile Values, New Names, and Secure Communication. In POPL 2001, pages 104–115. ACM Press, 2001.

[2] D. Akhawe, A. Barth, P. E. Lam, J. Mitchell, and D. Song. Towards a Formal Foundation of Web Security. In CSF 2010, pages 290–304. IEEE Computer Society, 2010.

[3] A. Armando, R. Carbone, L. Compagna, J. Cuéllar, and M. L. Tobarra. Formal Analysis of SAML 2.0 Web Browser Single Sign-on: Breaking the SAML-based Single Sign-on for Google Apps. In FMSE 2008, pages 1–10. ACM, 2008.

[4] G. Bai, J. Lei, G. Meng, S. S. Venkatraman, P. Saxena, J. Sun, Y. Liu, and J. S. Dong. AUTHSCAN: Automatic Extraction of Web Authentication Protocols from Implementations. In NDSS’13. The Internet Society, 2013.

[5] C. Bansal, K. Bhargavan, A. Delignat-Lavaud, and S. Maffeis. Keys to the Cloud: Formal Analysis and Concrete Attacks on Encrypted Web Storage. In POST 2013, volume 7796 of LNCS, pages 126–146. Springer, 2013.

[6] C. Bansal, K. Bhargavan, and S. Maffeis. Discovering Concrete Attacks on Website Authorization by Formal Analysis. In CSF 2012, pages 247–262. IEEE Computer Society, 2012.

[7] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In CSFW-14, pages 82–96. IEEE Computer Society, 2001.

[8] S. Chari, C. S. Jutla, and A. Roy. Universally Composable Security Analysis of OAuth v2.0. IACR Cryptology ePrint Archive, 2011:526, 2011.

[9] V. Cheval, H. Comon-Lundh, and S. Delaune. Trace Equivalence Decision: Negative Tests and Non-Determinism. In CCS 2011, pages 321–330. ACM, 2011.

[10] D. Fett, R. Küsters, and G. Schmitz. An Expressive Model for the Web Infrastructure: Definition and Application to the BrowserID SSO System. In S&P 2014, pages 673–688. IEEE Computer Society, 2014.

[11] D. Fett, R. Küsters, and G. Schmitz. Analyzing the BrowserID SSO System with Primary Identity Providers Using an Expressive Model of the Web. In ESORICS 2015, LNCS. Springer, 2015. To appear. Full version available at http://arxiv.org/abs/1411.7210.

[12] D. Fett, R. Küsters, and G. Schmitz. SPRESSO: A Secure, Privacy-Respecting Single Sign-On System for the Web. Technical Report arXiv:1508.01719, arXiv, 2015. Available at http://arxiv.org/abs/1508.01719.

[13] B. Fitzpatrick, D. Recordon, et al. OpenID Authentication 2.0. Dec. 5, 2007. http://openid.net/specs/openid-authentication-2_0.html.

[14] D. Hardt. RFC6749 - The OAuth 2.0 Authorization Framework. Oct. 2012. http://tools.ietf.org/html/rfc6749.

[15] D. Jackson. Alloy: A New Technology for Software Modelling. In TACAS 2002, volume 2280 of LNCS, page 20. Springer, 2002.

[16] F. Kerschbaum. Simple Cross-Site Attack Prevention. In SecureComm 2007, pages 464–472. IEEE Computer Society, 2007.

[17] A. Kumar. A Lightweight Formal Approach for Analyzing Security of Web Protocols. In RAID 2014, volume 8688 of LNCS, pages 192–211. Springer, 2014.

[18] Mozilla Identity Team. Persona. https://login.persona.org.

[19] T. Nitot. Persona: More Privacy, Better Security While Making Developers and Users Happy! Beyond the Code Blog. Apr. 9, 2013. https://blog.mozilla.org/beyond-the-code/2013/04/09/persona-beta2/.

[20] J. Somorovsky, A. Mayer, J. Schwenk, M. Kampmann, and M. Jensen. On Breaking SAML: Be Whoever You Want to Be. In USENIX 2012, pages 397–412. USENIX Association, 2012.

[21] P. Sovis, F. Kohlar, and J. Schwenk. Security Analysis of OpenID. In Sicherheit, volume 170 of LNI, pages 329–340. GI, 2010.

[22] SPRESSO Demo Site and Source Code, 2015. https://spresso.me.

[23] S.-T. Sun and K. Beznosov. The Devil is in the (Implementation) Details: An Empirical Analysis of OAuth SSO Systems. In CCS’12, pages 378–390. ACM, 2012.

[24] S.-T. Sun, K. Hawkey, and K. Beznosov. Systematically Breaking and Fixing OpenID Security: Formal Analysis, Semi-Automated Empirical Evaluation, and Practical Countermeasures. Computers & Security, 31(4):465–483, 2012.

[25] R. Wang, S. Chen, and X. Wang. Signing Me onto Your Accounts through Facebook and Google: A Traffic-Guided Security Study of Commercially Deployed Single-Sign-On Web Services. In S&P 2012, pages 365–379. IEEE Computer Society, 2012.

[26] R. Wang, Y. Zhou, S. Chen, S. Qadeer, D. Evans, and Y. Gurevich. Explicating SDKs: Uncovering Assumptions Underlying Secure Authentication and Authorization. In USENIX 2013, pages 399–314. USENIX Association, 2013.

[27] Y. Zhou and D. Evans. SSOScan: Automated Testing of Web Applications for Single Sign-On Vulnerabilities. In USENIX 2014, pages 495–510. USENIX Association, 2014.