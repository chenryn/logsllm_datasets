### Leaks and Harehunter Vulnerability Detection
Harehunter [10] is a tool designed to detect hanging attribute references (Hares) vulnerabilities. A Hares vulnerability arises when an inter-component communication (ICC) call references a non-existent attribute, such as a package, activity, or service, due to customizations in the Android system. A malicious application can claim to be the definition party for these attributes, thereby hijacking the ICC call. To mitigate this, Harehunter compares all the attributes defined by system applications with their corresponding references to identify potential null-reference flaws.

However, as more customized components are embedded to support data cloning, security analysis of data export/import cannot be achieved through code analysis alone. In contrast, our approach combines code reverse engineering and data analysis. Specifically, we build upon the work of Shu et al. [30] by discovering that temporarily stored data can also be a source of sensitive information retrieval.

### Device-to-Device (D2D) Communication Analysis
The data cloning process is closely related to D2D communication. Wang et al. [33] conducted a survey on the potential security threats of D2D communications. Similarly, Liu et al. [23] provided an in-depth empirical security analysis of mobile D2D networks between two Android devices. They highlighted a specific case of smart config Wi-Fi provisioning, which was found to be highly insecure, leading to Wi-Fi password leakage [21]. Our analysis further examines the security issues associated with Wi-Fi hotspots, Wi-Fi Direct, and Bluetooth in customized data cloning services.

Several approaches have been proposed to secure D2D network communications. Shen et al. [29] discussed various attacks against Wi-Fi D2D communications, including man-in-the-middle and denial-of-service attacks. They proposed two protocols, the authentication-string-based key agreement protocol and the SAS-based key agreement protocol, to secure communication between Android mobile phones. Additionally, Raju et al. [27] introduced a security protocol to protect individual confidentiality. To address vulnerabilities in existing public Wi-Fi hotspots, such as weak encryption and lack of confidentiality, they designed a solution to eliminate the dependency on pre-shared information. Unlike previous work, our focus is on practical implementation aspects to assess whether the Wi-Fi hotspot is securely set up (e.g., SSID/password) and whether the integrity and confidentiality of the transferred data are ensured.

### Conclusion
In this paper, we have investigated the security of popular Wi-Fi hotspot-based data cloning services provided by Android phone manufacturers. We developed an analysis system to help analysts understand the implementation details of closed-source data cloning services and proposed three security analysis approaches to detect security flaws in these services. We evaluated our system and approaches by assessing eight data cloning services from mainstream Android phone manufacturers. The results show that these data cloning services are vulnerable to four specific attacks, potentially affecting millions of released Android phones. We reported the discovered security issues to the respective manufacturers and assisted some in fixing the flaws. We also emphasize that developers should be aware of these risks when designing similar services.

### Acknowledgments
We would like to thank the anonymous reviewers for their valuable feedback and our shepherd, Manuel Egele, for his assistance in improving this paper. This work was partially supported by the National Natural Science Foundation of China (Grant Nos. 62002222 and U1636217) and the Major Project of the Ministry of Industry and Information Technology of China (Grant No. 2018-36). Special thanks to Ant Financial Services Group for their support through the SJTU-AntFinancial Security Research Centre.

### References
[1] 2012. Android. http://www.android.com/.

[2] 2019. tcpdump. http://www.tcpdump.org/.

[3] 2020. ADB (Android Debug Bridge) - Android Developers. https://developer.android.google.cn/studio/command-line/adb.

[4] 2020. Drozer. https://github.com/FSecureLABS/drozer.

[5] Accessed 2020. Apache MINA. http://mina.apache.org/.

[6] Accessed 2020. binwalk. https://github.com/ReFirmLabs/binwalk.

[7] Accessed 2020. JEB. https://www.pnfsoftware.com/.

[8] Accessed 2020. Netty Project. https://netty.io/.

[9] Accessed 2020. Wireshark. https://www.wireshark.org/.

[10] Yousra Aafer, Nan Zhang, Zhongwen Zhang, Xiao Zhang, Kai Chen, XiaoFeng Wang, Xiao-yong Zhou, Wenliang Du, and Michael Grace. 2015. Hare Hunting in the Wild Android: A Study on the Threat of Hanging Attribute References. In Proc. 22nd ACM Conference on Computer and Communications Security (CCS). ACM, Denver, CO, USA.

[11] Yousra Aafer, Xiao Zhang, and Wenliang Du. 2016. Harvesting Inconsistent Security Configurations in Custom Android ROMs via Differential Analysis. In Proc. 25th USENIX Security Symposium (Usenix Security). USENIX Association, Austin, TX, USA.

[12] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick D. McDaniel. 2014. FlowDroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. In Proc. 35th Conference on Programming Language Design and Implementation (PLDI). ACM, Edinburgh, United Kingdom.

[13] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013. An Empirical Study of Cryptographic Misuse in Android Applications. In Proc. 20th ACM Conference on Computer and Communications Security (CCS).

[14] Manuel Egele, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. 2011. PiOS: Detecting Privacy Leaks in iOS Applications. In Proc. 18th Annual Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, California, USA.

[15] William Enck, Peter Gilbert, Seungyeop Han, Vasant Tendulkar, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung, Patrick D. McDaniel, and Anmol N. Sheth. 2014. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. ACM Trans. Comput. Syst. 32, 2 (2014), 5:1–5:29.

[16] Adrienne Porter Felt, Helen J. Wang, Alexander Moshchuk, Steve Hanna, and Erika Chin. 2011. Permission Re-Delegation: Attacks and Defenses. In Proc. 20th USENIX Security Symposium (Usenix Security). USENIX, San Francisco, CA, USA.

[17] Roberto Gallo, Patricia Hongo, Ricardo Dahab, Luiz C. Navarro, Henrique Kawakami, Kaio Galvão, Glauber Junqueira, and Luander Ribeiro. 2015. Security and System Architecture: Comparison of Android Customizations. In Proc. 8th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec). ACM, New York, NY, USA.

[18] J. Gamba, M. Rashed, A. Razaghpanah, J. Tapiador, and N. Vallina-Rodriguez. 2020. An Analysis of Pre-installed Android Software. In Proc. 41st IEEE Symposium on Security and Privacy (SP). IEEE Computer Society, Los Alamitos, CA, USA.

[19] Michael C. Grace, Yajin Zhou, Zhi Wang, and Xuxian Jiang. 2012. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proc. 19th Annual Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, California, USA.

[20] Stefan Krüger, Johannes Späth, Karim Ali, Eric Bodden, and Mira Mezini. 2019. Crysl: An Extensible Approach to Validating the Correct Usage of Cryptographic APIs. IEEE Transactions on Software Engineering (2019).

[21] Changyu Li, Quanpu Cai, Juanru Li, Hui Liu, Yuanyuan Zhang, Dawu Gu, and Yu Yu. 2018. Passwords in the Air: Harvesting Wi-Fi Credentials from SmartCfg Provisioning. In Proc. 11th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec). ACM, Stockholm, Sweden.

[22] L. Li, A. Bartel, T. F. Bissyandé, J. Klein, Y. Le Traon, S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel. 2015. IccTA: Detecting Inter-Component Privacy Leaks in Android Apps. In Proc. 37th International Conference on Software Engineering (ICSE). IEEE Computer Society, Florence, Italy.

[23] Kecheng Liu, Wenlong Shen, Yu Cheng, Lin X Cai, Qing Li, Sheng Zhou, and Zhisheng Niu. 2018. Security Analysis of Mobile Device-to-Device Network Applications. IEEE Internet of Things Journal 6, 2 (2018), 2922–2932.

[24] René Mayrhofer, Jeffrey Vander Stoep, Chad Brubaker, and Nick Kralevich. 2019. The Android Platform Security Model. CoRR abs/1904.05572 (2019).

[25] Duc Cuong Nguyen, Dominik Wermke, Yasemin Acar, Michael Backes, Charles Weir, and Sascha Fahl. 2017. A Stitch in Time: Supporting Android Developers in Writing Secure Code. In Proc. 24th ACM Conference on Computer and Communications Security (CCS). Dallas, USA, 1065–1077.

[26] Sazzadur Rahaman, Ya Xiao, Sharmin Afrose, Fahad Shaon, Ke Tian, Miles Frantz, Murat Kantarcioglu, and Danfeng (Daphne) Yao. 2019. CryptoGuard: High Precision Detection of Cryptographic Vulnerabilities in Massive-sized Java Projects. In Proc. 26th ACM Conference on Computer and Communications Security (CCS). ACM, London, UK.

[27] Laiju K Raju and Reena Nair. 2015. Secure Hotspot: A Novel Approach to Secure Public Wi-Fi Hotspots. In Proc. 3rd International Conference on Control, Communication and Computing India (ICCC). IEEE, Trivandrum India.

[28] Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, and Zhiyun Qian. 2016. Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework. In Proc. 23rd Annual Network and Distributed System Security Symposium (NDSS). Internet Society, San Diego, California, USA.

[29] Wenlong Shen, Bo Yin, Xianghui Cao, Lin X Cai, and Yu Cheng. 2016. Secure Device-to-Device Communications over WiFi Direct. IEEE Network 30, 5 (2016), 4–9.

[30] Junliang Shu, Juanru Li, Yuanyuan Zhang, and Dawu Gu. 2018. Burn After Reading: Expunging Execution Footprints of Android Apps. In Proc. 12th International Conference on Network and System Security (NSS). Springer, Hong Kong, China.

[31] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. 2018. Charm: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems. In Proc. 27th USENIX Security Symposium (Usenix Security). USENIX, Baltimore, MD, USA.

[32] Narseo Vallina-Rodriguez, Johanna Amann, Christian Kreibich, Nicholas Weaver, and Vern Paxson. 2014. A Tangled Mass: The Android Root Certificate Stores. In Proc. 10th International Conference on emerging Networking EXperiments and Technologies (CoNEXT). ACM, Sydney, Australia.

[33] Mingjun Wang and Zheng Yan. 2017. A Survey on Security in D2D Communications. Mobile Networks and Applications 22, 2 (2017), 195–208.

[34] Lei Wu, Michael Grace, Yajin Zhou, Chiachih Wu, and Xuxian Jiang. 2013. The Impact of Vendor Customizations on Android Security. In Proc. 20th ACM Conference on Computer and Communications Security (CCS). ACM, Berlin, Germany.

[35] Shengqian Yang, Dacong Yan, Haowei Wu, Yan Wang, and Atanas Rountev. 2015. Static Control-Flow Analysis of User-Driven Callbacks in Android Applications. In Proc. 37th International Conference on Software Engineering (ICSE). IEEE Computer Society, Florence, Italy.

[36] Ka-Ping Yee. 2004. Aligning Security and Usability. IEEE Security & Privacy 2, 5 (2004), 48–55.

[37] Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng Hong, Yuan Zhang, and Min Yang. 2018. Invetter: Locating Insecure Input Validations in Android Services. In Proc. 25th ACM Conference on Computer and Communications Security (CCS). ACM, Toronto, ON, Canada.

[38] Qingchuan Zhao, Chaoshun Zuo, Brendan Dolan-Gavitt, Giancarlo Pellegrino, and Zhiqiang Lin. 2020. Automatic Uncovering of Hidden Behaviors From Input Validation in Mobile Apps. In Proc. 41st IEEE Symposium on Security and Privacy (SP). IEEE Computer Society, Los Alamitos, CA, USA.

[39] Xiaoyong Zhou, Yeonjoon Lee, Nan Zhang, Muhammad Naveed, and XiaoFeng Wang. 2014. The Peril of Fragmentation: Security Hazards in Android Device Driver Customizations. In Proc. 35th IEEE Symposium on Security and Privacy (SP). IEEE, Berkeley, CA, USA.