# 一、前言
设计模式是针对常见问题的解决方案模板，学习并理解现有的设计模式有助于实现经验的复用。掌握设计模式相关的术语可以提高团队间的沟通效率，使成员能够使用更简洁的语言讨论复杂概念，而无需深入探讨底层细节。

# 二、创建型模式
本节将介绍几种用于对象创建过程的设计模式：
- [单例模式](notes/设计模式%20%20-%20单例.md)
- [简单工厂模式](notes/设计模式%20-%20简单工厂.md)
- [工厂方法模式](notes/设计模式%20-%20工厂方法.md)
- [抽象工厂模式](notes/设计模式%20-%20抽象工厂.md)
- [建造者模式](notes/设计模式%20-%20生成器.md) 
- [原型模式](notes/设计模式%20-%20原型模式.md)

# 三、行为型模式
接下来是一些定义了类或对象之间交互方式的行为模式列表：
- [责任链模式](notes/设计模式%20-%20责任链.md)
- [命令模式](notes/设计模式%20-%20命令.md)
- [解释器模式](notes/设计模式%20-%20解释器.md)
- [迭代器模式](notes/设计模式%20-%20迭代器.md)
- [中介者模式](notes/设计模式%20-%20中介者.md)
- [备忘录模式](notes/设计模式%20-%20备忘录.md)
- [观察者模式](notes/设计模式%20-%20观察者.md)
- [状态模式](notes/设计模式%20-%20状态.md)
- [策略模式](notes/设计模式%20-%20策略.md)
- [模板方法模式](notes/设计模式%20-%20模板方法.md)
- [访问者模式](notes/设计模式%20-%20访问者.md)
- [空对象模式](notes/设计模式%20-%20空对象.md)

# 四、结构型模式
最后是关于如何组合类与对象以形成更大结构的一些示例：
- [适配器模式](notes/设计模式%20-%20适配器.md)
- [桥接模式](notes/设计模式%20-%20桥接.md)
- [组合模式](notes/设计模式%20-%20组合.md)
- [装饰模式](notes/设计模式%20-%20装饰.md)
- [外观模式](notes/设计模式%20-%20外观.md)
- [享元模式](notes/设计模式%20-%20享元.md)
- [代理模式](notes/设计模式%20-%20代理.md)

# 参考资料
为了进一步研究和了解设计模式的概念及其应用，请参考以下书籍及在线资源：
- 弗里曼. 《Head First 设计模式》[M]. 中国电力出版社, 2007.
- Gamma E. 《设计模式: 可复用面向对象软件的基础》[M]. 机械工业出版社, 2007.
- Bloch J. 《Effective Java》[M]. Addison-Wesley Professional, 2017.
- [OODesign - Design Patterns](http://www.oodesign.com/)
- [Java Design Patterns](http://java-design-patterns.com/)
- [Design Patterns in JDK](http://www.programering.com/a/MTNxAzMwATY.html)