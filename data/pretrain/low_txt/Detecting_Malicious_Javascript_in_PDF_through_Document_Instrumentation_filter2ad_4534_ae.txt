### Memory Overhead of Static Analysis & Instrumentation

| Operation | 2 KB | 9 KB | 24 KB | 325 KB | 7.0 MB | 19.7 MB |
|-----------|------|------|-------|--------|--------|---------|
| Parse & Decompress | 0.0005 | 0.0008 | 0.0007 | 0.0569 | 0.8954 | 3.2219 |
| Feature Extraction | 0.0255 | 0.0867 | 0.0726 | 0.0210 | 0.4023 | 2.0015 |
| Instrumentation | 0.0183 | 0.0138 | 0.0247 | 0.0236 | 0.0773 | 0.2761 |
| **Total** | **0.0444** | **0.1014** | **0.0981** | **0.1016** | **1.3750** | **5.4995** |

**Table XI: Memory Overhead of Static Analysis & Instrumentation**

- **Number of Python Objects**: 74095, 74085, 74112, 74616, 366845, 1081771
- **Memory Consumption (MB)**: 5.26, 5.26, 5.28, 5.63, 42.86, 130.6

### Analysis

For smaller documents, the majority of the execution time is spent on feature extraction and instrumentation. However, as the document size increases, the dominant overhead comes from parsing and decompression, accounting for over 95% of the total execution time. The overhead for instrumentation depends on the number of scripts; hence, it took more time to instrument the 2 KB file than the 9 KB file in Table X. The overhead increase is approximately linear because during feature extraction, we tag PDF objects containing JavaScript code, and our instrumentation component only needs to locate and instrument them.

In summary, the evaluation results indicate that the static analysis and instrumentation components incur minor overhead and can be used for end-host protection.

### Memory Overhead Profiling

The memory usage during the static process is presented in Table XI. Although the memory overhead is somewhat high, it is acceptable since the front-end component works offline and modern systems have sufficient RAM to accommodate this demand. For most documents, the memory overhead of our system is comparable to PDF readers like Adobe Acrobat. In future work, we will optimize our program to use memory more efficiently.

### Runtime Detector

The runtime detector, which includes a small SOAP server, requires about 19 MB of memory. Despite maintaining the state (i.e., all features) for each unknown open document, the memory usage increases only slightly as the number of monitored documents increases. Thus, the overhead of our runtime detector is also minimal.

We further evaluated the efficiency of our context monitoring code by manually crafting a set of documents containing various copies of JavaScript. The JavaScript was sourced from a randomly selected malicious sample. We created 20 documents, each containing 1 to 20 separate scripts. For each document, we measured the total execution time of JavaScript before and after instrumentation. When one script is instrumented, the additional execution time incurred by our context monitoring code is about 0.093 seconds. Since most malicious documents contain only one script, this overhead represents the common case.

Although both benign and malicious documents can contain many scripts, these scripts are usually invoked sequentially via `/Names` and `/Next`. Therefore, only one piece of context monitoring code is inserted. The overhead grows linearly with the number of instrumented scripts, but even with 20 scripts, the overall overhead remains below 2 seconds. Benign documents may contain many singly invoked scripts, but these scripts are generally associated with actions that are not triggered simultaneously. Thus, the performance degradation is still minor. In summary, our context monitoring code is efficient enough for online protection.

### Limitations and Future Work

While the majority of existing malicious PDFs use JavaScript to launch attacks, attackers can also use other options like ActionScript. Our approach cannot detect malicious PDFs that do not use JavaScript as the attack vector.

We have not yet evaluated the effectiveness of our method for in-browser PDF viewers. The challenges include the fact that in-browser PDF viewers often start rendering before a document is fully downloaded, complicating static analysis and instrumentation. Additionally, the runtime behavior of a browser is more complex than that of a PDF reader. In future work, we will create new runtime features for browsers and develop methods to detect malicious PDFs in in-browser PDF viewers.

Finally, we have not handled embedded PDF documents. In future work, we will extract static features from both embedded and host PDFs. It would also be valuable to instrument embedded documents and correlate the runtime behaviors from both embedded and host documents to effectively defeat mimicry attacks proposed in [8].

### Conclusion

In this paper, we developed an effective and efficient hybrid approach leveraging five novel static features and context-aware behavior monitoring for detecting and confining malicious JavaScript in PDFs. The static features are designed to detect obfuscation techniques commonly used by malicious PDFs but rarely by benign ones. Based on the observation that indispensable operations for malicious JavaScript to compromise target systems rarely occur in JS-context, we presented a static document instrumentation method to facilitate context-aware monitoring of potential infection attempts. The intrusive nature of the instrumentation method provides immunity to JavaScript code and PDF syntax obfuscations. To validate our approach, we conducted a security analysis and experimental evaluation using over twenty thousand benign and malicious samples, demonstrating high detection accuracy with minor overhead.

### Acknowledgment

We would like to thank the anonymous reviewers for their insightful and valuable comments. This work was partially supported by ONR grant N00014-13-1-0088 and AFRL Contract FA8650-10-C-7024.

### References

[1] “The rise in the exploitation of old pdf vulnerabilities,” http://blogs.technet.com/b/mmpc/archive/2013/04/29/the-rise-in-the-exploitation-of-old-pdf-vulnerabilities.aspx.
[2] “http://www.cvedetails.com/product/497/adobe-acrobat-reader.html?vendor_id=53,” accessed in June 2013.
[3] K. Selvaraj and N. F. Gutierrez, “The rise of pdf malware,” Symantec, Tech. Rep., 2010.
[4] C. Smutz and A. Stavrou, “Malicious pdf detection using metadata and structural features,” in Proceedings of Annual Computer Security Applications Conference (ACSAC), 2012.
[5] N. Srndic and P. Laskov, “Detection of malicious pdf files based on hierarchical document structure,” in NDSS, 2013.
[6] D. Maiorca, G. Giacinto, and I. Corona, “A pattern recognition system for malicious pdf files detection,” in Proceedings of International conference on Machine Learning and Data Mining in Pattern Recognition (MLDM), 2012.
[7] P. Laskov and N. Srndic, “Static detection of malicious javascript-bearing pdf documents,” in Proceedings of Annual Computer Security Applications Conference (ACSAC), 2011.
[8] D. Maiorca, I. Corona, and G. Giacinto, “Looking at the bag is not enough to find the bomb: an evasion of structural methods for malicious pdf files detection,” in Proceedings of ACM SIGSAC symposium on Information, computer and communications security (AsiaCCS), 2013.
[9] Z. Tzermias, G. Sykiotakis, M. Polychronakis, and E. P. Markatos, “Combining static and dynamic analysis for the detection of malicious documents,” in Proceedings of European Workshop on System Security (EUROSEC), 2011.
[10] Z. Liu, “Breeding sandworms: How to fuzz your way out of adobe reader x’s sandbox,” in Blackhat, 2012.
[11] P. Vreugdenhil, “Adobe sandbox when the broker is broken,” in Cansecwest, 2013.
[12] “Protected mode,” http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/protectedmode.html, 2013.
[13] C. Willems, T. Holz, and F. Freiling, “Toward automated dynamic malware analysis using cwsandbox,” IEEE Security and Privacy, 2007.
[14] M. Cova, C. Kruegel, and G. Vigna, “Detection and analysis of drive-by-download attacks and malicious javascript code,” in Proceedings of International conference on World wide web (WWW), 2010.
[15] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert, “Zozzle: fast and precise in-browser javascript malware detection,” in Proceedings of USENIX Security Symposium, 2011.
[16] W.-J. Li, S. Stolfo, A. Stavrou, E. Androulaki, and A. D. Keromytis, “A study of malcode-bearing documents,” in Proceedings of International conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), 2007.
[17] M. Z. Shafiq, S. A. Khayam, and M. Farooq, “Embedded malware detection using markov n-grams,” in Proceedings of International conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), 2008.
[18] “Wepawet,” http://wepawet.cs.ucsb.edu/.
[19] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos, “An empirical study of real-world polymorphic code injection attacks,” in LEET, 2009.
[20] JavaScript for Acrobat API Reference, 2007.
[21] W. Xu, F. Zhang, and S. Zhu, “Jstill: mostly static detection of obfuscated malicious javascript code,” in Proceedings of ACM conference on Data and application security and privacy (CODASPY), 2013.
[22] C. Yue and H. Wang, “Characterizing insecure javascript practices on the web,” in Proceedings of the 18th International Conference on World Wide Web (WWW’09), 2009.
[23] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos, “Comprehensive shellcode detection using runtime heuristics,” in Proceedings of Annual Computer Security Applications Conference (ACSAC), 2010.
[24] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda, “Defending browsers against drive-by downloads: Mitigating heap-spraying code injection attacks,” in Proceedings of International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), 2009.
[25] “libemu,” http://libemu.carnivore.it/.
[26] J. Mason, S. Small, F. Monrose, and G. MacManus, “English shellcode,” in Proceedings of ACM conference on Computer and communications security (CCS), 2009.
[27] K. Z. Snow and F. Monrose, “Automatic hooking for forensic analysis of document-based code injection attacks: Techniques and empirical analyses,” in Proceedings of the European Workshop on System Security (EuroSec), 2012.
[28] “Free pdf password remover,” http://www.4dots-software.com/pdf-utilities/free-pdf-password-remover/.
[29] PDF Reference (sixth edition), 2006.
[30] S. Jana and V. Shmatikov, “Abusing file processing in malware detectors for fun and profit,” in IEEE Symposium on Security and Privacy (SP), 2012.
[31] S. Forrest, S. Hofmeyr, A. Somayaji, and T. Longstaff, “A sense of self for unix processes,” in Proceedings of IEEE Symposium on Security and Privacy, 1996.
[32] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda, X. Zhou, and X. Wang, “Effective and efficient malware detection at the end host,” in Proceedings of USENIX Security Symposium, 2009.
[33] A. Sotirov, “Heap feng shui in javascript,” in Blackhat Europe, 2007.
[34] PROCESS MEMORY COUNTERS EX structure, http://msdn.microsoft.com/en-us/library/ms684874%28v=vs.85%29.aspx, accessed in June 2013.
[35] A. Schneider, “Whos looking for eggs in your pdf?” http://labs.m86security.com/2010/11/whos-looking-for-eggs-in-your-pdf/, 2010.
[36] skape, Safely Searching Process Virtual Address Space, 2004.
[37] “Working with the appinit dlls registry value,” http://support.microsoft.com/kb/197571.
[38] “Loaddllviaappinit,” http://blog.didierstevens.com/2009/12/23/loaddllviaappinit/.
[39] “Sandboxie,” http://www.sandboxie.com/.
[40] S. Davidoff, “Cleartext passwords in linux memory,” 2008.
[41] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten, “Lest we remember: cold boot attacks on encryption keys,” in Proceedings of Usenix Security, 2008.
[42] “Contagiodump collection,” http://contagiodump.blogspot.com/, accessed in June 2013.
[43] “Add javascript to existing pdf files (python),” http://blog.rsmoorthy.net/2012/01/add-javascript-to-existing-pdf-files.html, accessed in June 2013.
[44] “CVE-2009-1492,” http://www.cvedetails.com/cve/CVE-2009-1492/, accessed in August 2013.
[45] “The number of the beast,” http://vinsula.com/cve-2013-0640-adobe-pdf-zero-day-malware/, 2013.
[46] “Making malicious pdf undetectable,” http://www.signal11.eu/en/research/articles/malicious-pdf.html, 2009.
[47] “Another nasty trick in malicious pdf,” https://blog.avast.com/2011/04/22/another-nasty-trick-in-malicious-pdf/, 2011.