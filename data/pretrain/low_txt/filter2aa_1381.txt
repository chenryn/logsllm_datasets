# ACL Steganography: Hiding Data with Permissions

**By Michael Perklin**

**Michael Perklin**  
- B.A., M.S.I.A., CISSP, EnCE, ACE  
- Security Professional  
- Corporate Investigator (Cyber-Crime)  
- Digital Forensic Examiner  
- Computer Expert and Legal Support Hybrid

## Overview
- **Introduction to Steganography**
- **Historical and Modern Examples**
- **ACL Steganography: A New Scheme**
- **Demonstration**
- **Technical Details**
- **Limitations**
- **Forensic Analysis**
- **Conclusion and Q&A**

## What is Steganography?
- **Etymology**: The term "steganography" comes from the Greek words *steganos* (στεγανός), meaning "covered or protected," and *graphei* (γραφή), meaning "writing."
- **Definition**: Steganography is the practice of hiding information within other information. It has been used since ancient times to conceal messages in plain sight.
- **First Coined**: The term was first coined in 1499, but there are many earlier examples.

### Classical Examples
- **Tattoo Example**:
  - Encoder tattoos a message on a slave's scalp.
  - Decoder shaves the messenger’s hair to reveal the message.
  - **Problem**: The message must be delayed to allow time for hair regrowth.
- **Morse Code Example**:
  - Morse code is stitched into a sweater or jacket worn by a messenger.
  - The messenger hand-delivers one message while actually delivering two.
- **Invisible Ink Example**:
  - Secrets are written with lemon juice and allowed to dry.
  - Decoding is done with heat (candle, match, hair dryer, iron).

### Digital Steganographic Methods
- **Photo Steganography**:
  - Files can be encoded as color information embedded in a photo.
  - Each pixel is assigned an RGB color code, and the last bit is overwritten with encoded data.
  - **Example**: #DFFF00 (chartreuse) and #DFFF01 (one of the yellows).
  - 8 adjacent pixels with slightly adjusted colors can encode 1 byte of information.
- **Audio Steganography**:
  - Similar principle to photo steganography, but with audio.
  - Humans can't easily tell the difference between 400Hz and 401Hz, especially if the note isn't sustained.
  - Each frame of audio can be altered with 1 bit of encoded information.
- **x86 Op Codes**:
  - Information can be encoded in x86 op codes.
  - NOP (No Operation), ADD, SUB, and other operations can be used.
  - PE files (standard .exe programs) have many areas that can hold arbitrary data.
- **Chaffing and Winnowing**:
  - Conceived by Ron Rivest in 1998.
  - Sender issues 'real' and 'chaff' messages.
  - Real chunks pass a parity check and have valid Message Authentication Codes (MACs).
  - Receiver discards invalid MACs and reassembles the valid ones.

## ACL Steganography
- **Definition**: A method to encode files as Access Control Entries (ACEs) within Access Control Lists (ACLs) of files stored on an NTFS volume.
- **Components**:
  - **Medium**: All files on an NTFS volume.
  - **Key**: Security Identifiers (SIDs) in ACEs.
  - **Differentiator**: ACEs with an unlikely combination of permissions.

### Background: NTFS Security
- **NTFS Permissions**:
  - Entries correspond to system users.
  - 22 unique permissions available, stored in 14 bits of a 32-bit field.
  - More granular than "Read, Write, Execute."
- **Security Identifiers (SIDs)**:
  - Maximum size: 68 bytes.
  - First byte: Revision (always 1).
  - Second byte: Count of SubAuthorities (maximum 15 per SID).
  - 6 bytes: Identifier Authority (always 000004).
  - 60 bytes: Store the content of SubAuthorities and the Relative ID.

### Demonstration
- **Setup**:
  - A folder full of files.
  - A filelist.txt containing these files.
  - A .tc volume with hidden data.
- **Encoding**:
  - The file is split into 60-byte chunks.
  - Each chunk becomes a SID.
  - ACEs are created with "Allow" permissions for each SID.
  - ACEs are added to the ACLs of multiple files.
- **ACLEncoding Details**:
  - Two bits are set for all ACLEncoded entries: Synchronize + ReadPermissions.
  - The 9 least significant bits are used as a counter from 0-512.
  - FileList.txt serves as a symmetric key, identifying which files have ACLEncoded entries and their order.

### Limitations
- **ACL Size**:
  - An ACL can be no bigger than 64kB per file.
  - Maximum ACE size is 76 bytes (68 for SID + 8 byte header).
  - Theoretical maximum: 862 ACEs per file.
  - Imposed limit: 512 entries per file to leave room for legitimate permissions.
- **File Size**:
  - Largest possible file: NumFilesInList * 512 * 60 bytes, or about 30KB per file.
  - Larger files require a longer file list.
- **$SECURE File**:
  - Hidden file on every NTFS volume.
  - Stores all ACLs for all files.
  - Does not remove old/unused SIDs, leading to persistent ACLEncoded chunks.

### Forensic Analysis
- **Test Setup**:
  - 2GB USB Key, formatted as NTFS.
  - Tools: AccessData FTK 4.0.2.33, Guidance EnCase Forensic 6.19.6.
- **Results**:
  - FTK4: No way to show Access Control Lists of files.
  - EnCase 6: Manual process to detect ACLEncoded entries.
  - Detection can be automated with EnScripts and custom tools.

### Conclusion and Q&A
- **Questions and Answers**:
  - If you have questions, see me in the Speaker Q&A room.
- **Acknowledgments**:
  - Thanks to Josh, Nick, Joel, Reesh, Kyle for testing.
  - Thanks to my family, friends, colleagues, and employer for their support.
  - Special thanks to Eugene Filipowitz for the inspiration.

### Resources
- **Source Code**: [ACLEncode.zip](http://www.perklin.ca/~defcon21/ACLEncode.zip)
- **Latest Slides**: [aclsteganography.pdf](http://www.perklin.ca/~defcon21/aclsteganography.pdf)
- **References**:
  - [MSDN: NTFS Permissions](http://msdn.microsoft.com/en-us/library/gg465313.aspx)
  - [Stack Overflow: Maximum Length of a SID in SDDL Format](http://stackoverflow.com/questions/1140528/what-is-the-maximum-length-of-a-sid-in-sddl-format)
  - [Technet: NTFS Permissions](http://technet.microsoft.com/en-us/library/cc962011.aspx)
  - [MSDN: FileSystemRights](http://msdn.microsoft.com/en-us/library/system.security.accesscontrol.filesystemrights.aspx)
  - [NTFS.com: NTFS Permissions and Security Descriptors](http://www.ntfs.com/ntfs-permissions-access-entries.htm)
  - [Microsoft Support: Understanding NTFS Permissions](http://support.microsoft.com/kb/279682)

Thank you for your attention!