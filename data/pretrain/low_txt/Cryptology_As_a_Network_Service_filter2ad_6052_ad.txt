### 5.2. TLS Performance
Microbenchmarks help us characterize the detailed performance of the cryptoserver, but they leave many questions unanswered regarding its real-world performance. To better understand how the cryptoserver might accelerate a secure web server, we benchmarked it using a client that supports the TLS protocol. We developed a small, multithreaded server using OpenSSL to respond to HTTP HEAD requests with a fixed string. The benchmark client, written by Dan Boneh, Michael Malkin, and Tom Wu, generates HTTP HEAD requests over a TLS connection.

#### Benchmark Configuration
- **AXL200 only (insecure)**
- **AXL200 (secure)**
- **nFast 300 only (insecure)**
- **nFast 300 (secure)**
- **nFast 300 (insecure, CRT)**
- **nFast 300 (secure, CRT)**
- **Both (insecure)**
- **Both (secure)**
- **Both (insecure, multi)**
- **Both (secure, multi)**
- **Both (insecure, CRT)**
- **Both (insecure, CRT, multi)**
- **Both (secure, CRT, multi)**

| Threads | Throughput (connections/s) |
|---------|---------------------------|
| 26      | 265.73                    |
| 26      | 265.58                    |
| 26      | 93.20                     |
| 26      | 93.21                     |
| 26      | 299.41                    |
| 26      | 299.34                    |
| 26      | 354.01                    |
| 26      | 354.17                    |
| 26      | 355.50                    |
| 26      | 355.55                    |
| 70      | 560.60                    |
| 70      | 563.94                    |
| 30      | 562.25                    |

While these benchmark programs are somewhat artificial, they are small enough for us to easily understand their behavior. The client opens a TLS connection (without resuming a prior connection) and sends a 19-byte HTTP HEAD request. The server responds with a 107-byte answer and closes the connection. This scenario represents a near-worst case for TLS, as very little data is exchanged per RSA operation. However, this is precisely what we aim to characterize.

#### Experimental Setup
The experimental setup was the same as before, but for simplicity, we only measured the AXL200 board. The results are shown in Table 4.

| Cryptoserver Configuration | Throughput (connections/s) |
|----------------------------|---------------------------|
| Local AXL200               | 187.38                    |
| Remote AXL200 (secure)     | 244.68                    |
| Remote AXL200 (insecure)   | 261.64                    |

In all cases, the TLS benchmark server ran with 30 threads, and the TLS benchmark client ran with 40 threads, allowing up to 40 concurrent RSA operations on the TLS server. With the TLS server running locally, the server's CPU became saturated. By using a remote cryptoserver, throughput increased, taking advantage of the available parallelism. An insecure connection to the cryptoserver enabled the client to use approximately 98% of an AXL200’s maximum throughput; with a secure connection, the client exceeded 92% of an AXL200’s maximum throughput.

### 6. Related Work
Network-attached cryptographic acceleration has been used in special cases so far. Rainbow Technologies has sold products in their CryptoSwift EN line for several years, but their network connectivity is not secured, making them suitable only for trustworthy networks. In contrast, our approach can be deployed on any network with adequate availability—1000 1024-bit RSA operations per second require approximately 4 Mbit/s of bandwidth, which is manageable with common 100 Mbit/s Ethernet infrastructure.

Note that in our approach, the client must trust the cryptoserver with knowledge of their private key. This differs from the more challenging and generally unsolved problems of "server-aided cryptography," "remotely-keyed encryption" [2, 3, 22], or "computing with encrypted data" [14]. We prioritize practicality and seek performance levels as close to available hardware as possible. If truly practical server-aided cryptographic techniques become available, our system is well-positioned to accommodate them.

### 7. Future Work
Viewing cryptography as a network service changes our perspective on the costs of cryptographic operations. Cryptography is no longer computationally prohibitive; it is just an RPC away. We are building applications that leverage abundant public key operations, including secure communication services for dynamic coalitions, private database retrieval, and others. We also plan to develop cryptoserver clients implementing standard cryptographic APIs such as PKCS #11, Microsoft’s CryptoAPI, and the Java Cryptography Environment. This will allow legacy applications to seamlessly take advantage of the cryptoserver. We may also explore other implementation platforms and middleware, increasing the flexibility and usability of the server.

A remaining challenge is to evaluate how well our software architecture scales. While the software was designed with scalability in mind (e.g., using a fixed thread pool, accommodating inter- and intra-request parallelism, multiple request and reply handler threads to spread the symmetric cryptographic load), the proof will be in running thousands of modular exponentiations per second on a suitable machine. This challenge will increase as the speed of accelerators increases and their latency for single operations decreases.

In our implementation, each request includes the client’s private key. Alternatively, if the cryptoserver already knows the client’s private key, the request may include an authentication token that verifies the source and freshness of the request. While this would require a more trustworthy cryptoserver, it would reduce the required network bandwidth by nearly half. Several cryptographic accelerator products on the market maintain secure local storage of one or more private keys and control access to them. It would be straightforward to provide shared network access to such an accelerator as described above.

The cryptoserver offers interesting options for those concerned about the integrity of their cryptographic operations. As our server supports a heterogeneous collection of hardware accelerators running concurrently, it would be a simple modification to use one accelerator to check the results delivered by another. Using different accelerators ensures that a single accelerator cannot produce a doctored result along with a doctored "inverse." The tradeoff between security and throughput can be managed by checking a user-selectable fraction of results. By selecting hardware accelerators designed and manufactured in different countries, no single government would be in a position to compromise an RSA operation. Such a system would be highly resistant to many attacks, including fault injection [4].

Clients can also achieve a similar level of security, as discussed in Section 3: it is easy for the client code to issue RPCs to multiple servers. For example, one might use servers operated by different organizations or physically located in multiple countries to cross-verify results. This ability to use multiple cryptoservers also makes it easy for clients to protect themselves against malicious servers through the use of threshold cryptographic techniques, as discussed in Section 2.

### 8. Conclusion
We have demonstrated that public key cryptography can be provided as a service over untrusted networks. This architecture has many advantages: it offloads work from clients, allows greater utilization of cryptographic accelerators by sharing them among many clients, and has acceptably small performance overhead. Additionally, it enables new security applications that were previously considered too costly. Our implementation consists of customized software on top of generally available hardware. Benchmark data indicate that our approach is fast and effective. Hardware trends and other factors suggest that our approach will become increasingly attractive over time.

### Acknowledgments
We thank Teresa Lunt for useful discussions about this work. We thank Larry Hines at Atalla for providing additional information about the AXL200. We thank Jessica Nelson at nCipher for technical assistance with the nFast 300. We also thank the anonymous referees for their helpful comments on an earlier version of this paper.

### References
[1] C. Adams. RFC 2025: The simple public-key GSS-API mechanism (SPKM), Oct. 1996.
[2] M. Blaze. High-bandwidth encryption with low-bandwidth smartcards. In Proceedings of the Fast Software Encryption Workshop, number 1039 in Lecture Notes in Computer Science, pages 33–40. Springer-Verlag, 1996.
[3] M. Blaze, J. Feigenbaum, and M. Naor. A formal treatment of remotely keyed encryption. In K. Nyberg, editor, Proceedings of EUROCRYPT’98, number 1403 in Lecture Notes in Computer Science, pages 251–265. Springer-Verlag, 1998.
[4] D. Boneh, R. DeMillo, and R. Lipton. On the importance of checking cryptographic protocols for faults. In Proceedings of Eurocrypt ’97, volume 1233 of Lecture Notes in Computer Science, pages 37–51. Springer-Verlag, 1997.
[5] C. Boyd. Digital multisignatures. In H. Beker and F. Piper, editors, Cryptography and Coding, Institute of Mathematics and Its Applications (IMA), pages 241–246. Clarendon Press, 1989.
[6] V. Boyko, M. Peinado, and R. Venkatesan. Speeding up discrete log and factoring based schemes via precomputation. In K. Nyberg, editor, Advances in Cryptology – EUROCRYPT ’98, number 1403 in LNCS, pages 221–235, Espoo, Finland, 1998. Springer-Verlag.
[7] C. Cachin, S. Micali, and M. Stadler. Computationally private information retrieval with polylogarithmic communication. In Proceedings of EUROCRYPT ’99, pages 402–414, 1999.
[8] D. Chaum. Blind signatures for untraceable payments. In R. L. Rivest, A. Sherman, and D. Chaum, editors, Proc. CRYPTO 82, pages 199–203, New York, 1983. Plenum Press.
[9] D. Chaum and E. van Heyst. Group signatures. In D. W. Davies, editor, Advances in Cryptology—EUROCRYPT 91, volume 547 of Lecture Notes in Computer Science, pages 257–265. Springer-Verlag, 8–11 Apr. 1991.
[10] B. Chor, E. Kushilevitz, O. Goldreich, and M. Sudan. Private information retrieval. Journal of the Association for Computing Machinery, 45(6):965–981, Nov. 1998.
[11] R. Cramer, I. Damgård, and B. Schoenmakers. Proofs of partial knowledge and simplified design of witness hiding protocols. In Y. G. Desmedt, editor, Proc. CRYPTO 95, pages 174–187. Springer, 1994. Lecture Notes in Computer Science No. 839.
[12] Y. Desmedt and Y. Frankel. Threshold cryptosystems. In G. Brassard, editor, Proc. CRYPTO 89, pages 307–315. Springer-Verlag, 1990. Lecture Notes in Computer Science No. 435.
[13] M. Eisler, A. Chiu, and L. Ling. RFC 2203: RPC-SEC GSS protocol specification, Sept. 1997.
[14] J. Feigenbaum. Encrypting problem instances: Or...can you take advantage of someone without having to trust him? In H. C. Williams, editor, Proc. CRYPTO 85, pages 477–488. Springer, 1986. Lecture Notes in Computer Science No. 218.
[15] Y. Gertner, Y. Ishai, E. Kushilevitz, and T. Malkin. Protecting data privacy in private information retrieval schemes. In Proceedings of the 30th Annual ACM Symposium on Theory of Computing (STOC-98), pages 151–160, New York, May 23–26 1998. ACM Press.
[16] B. Huberman, T. Hogg, and M. Franklin. Enhancing privacy and trust in electronic communities. In Proceedings of the ACM Conference on Electronic Commerce, 1999.
[17] M. Jakobsson, K. Sako, and R. Impagliazzo. Designated verifier proofs and their applications. In U. Maurer, editor, Advances in Cryptology—EUROCRYPT 96, volume 1070 of Lecture Notes in Computer Science, pages 143–154. Springer-Verlag, 12–16 May 1996.
[18] P. Kakkar, C. A. Gunter, and M. Abadi. Reasoning about security for active networks. In Proceedings of the 13th IEEE Computer Security Foundations Workshop, pages 118–129, Cambridge, UK, July 2000.
[19] B. A. LaMacchia and A. M. Odlyzko. Computation of discrete logarithms in prime fields. Designs, Codes, and Cryptography, 1:47–62, 1991.
[20] A. K. Lenstra and E. R. Verheul. Selecting cryptographic key sizes. In Proceedings of the Public Key Cryptography Conference 2000, Jan. 2000. Available from http://www.cryptosavvy.com.
[21] J. Linn. RFC 2743: Generic security service application program interface, version 2, update 1, Jan. 2000.
[22] S. Lucks. Accelerated remotely keyed encryption. In L. Knudsen, editor, Proceedings of the Fast Software Encryption Workshop, number 1636 in Lecture Notes in Computer Science, pages 112–123. Springer-Verlag, 1999.
[23] A. J. Menezes, P. C. Van Oorschot, and S. A. Vanstone. Handbook of applied cryptography. The CRC Press series on discrete mathematics and its applications. CRC Press, 2000 N.W. Corporate Blvd., Boca Raton, FL 33431-9868, USA, 1997.
[24] F. Monrose, P. Wyckoff, and A. Rubin. Distributed execution with remote audit. In Proceedings of the Network and Distributed Systems Security Symposium. Internet Society, 1999.
[25] N. Nisan, S. London, O. Regev, and N. Camiel. Globally distributed computation over the internet — the popcorn project. In Proceedings of the International Conference on Distributed Computing Systems, pages 592–601, 1998.