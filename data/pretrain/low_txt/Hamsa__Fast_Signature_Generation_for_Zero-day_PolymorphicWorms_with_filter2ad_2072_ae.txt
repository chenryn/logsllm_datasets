### Table 5: Speed and Memory Consumption under Different Settings

| Samples in MMAP (MB) | Pool Size (MB) | Pool (Samples) | Speed MMAP (secs) | Speed Pre-Load (secs) |
|-----------------------|----------------|-----------------|--------------------|-----------------------|
| 64.8                  | 101            | 100             | 11.9               | 32.7                  |
| 129.0                 | 326            | 100             | 14.3               | 39.4                  |
| 75.4                  | 101            | 200             | 14.9               | 38.1                  |
| 152.1                 | 326            | 200             | 1.7                | 4.9                   |
| 112.1                 | 101            | 500             | 2.4                | 7.2                   |
| 166.6                 | 326            | 500             | 6.0                | 8.6                   |

### 7.8 Attack Resilience

In this section, we introduce a new attack method, which is an enhanced version of the coincidental-pattern attack described in Polygraph. We term this the "token-fit attack." This attack involves a hacker obtaining normal traffic with a similar token distribution as the normal noise in the suspicious pool. The hacker can then extract tokens from this normal traffic and intentionally encode them into a worm. By including different sets of tokens in different worm samples, the hacker does not increase the similarity between worm samples in terms of shared tokens but can increase the similarity of worm samples to the normal traffic noise in the suspicious pool. This degrades the quality of the generated signature.

To evaluate the resilience of Hamsa and Polygraph against this attack, we modified the ATPhttpd exploit to inject 40 different tokens into the variant part of each worm sample. These tokens were extracted from the normal traffic noise in the same suspicious pool. We tested both systems using a suspicious pool of 50 samples with a noise ratio of 550%. Over two trials, we found that Hamsa consistently produced correct signatures, as shown in Table 2. However, Polygraph failed to detect any of the polymorphic worms (100% false negative), although it did not produce any false positives.

### 8. Related Work

Early efforts in automated worm signature generation include Honeycomb [12], Autograph [10], and EarlyBird [24]. These systems use different methods to classify worm flows and normal traffic, but all assume that a worm will have a long invariant substring. This assumption does not hold for polymorphic worms, which do not share a sufficiently long common substring.

#### Comparison of Recent Polymorphic Worm Detection Techniques

| System        | Network/Host Based | Content/Behavior Based | Noise Tolerance | On-line Detection Speed | General Purpose/Application Specific | Provable Attack Resilience | Information Exploited |
|---------------|--------------------|------------------------|-----------------|-------------------------|--------------------------------------|----------------------------|-----------------------|
| Hamsa         | Network            | Content-based          | Yes             | Fast                    | General purpose                      | Yes                        | Content-based         |
| Polygraph [16]| Network            | Content-based          | Yes (slow)      | Fast                    | General purpose                      | No                         | Content-based         |
| Similarity of CFG [13] | Network    | Behavior-based         | Yes             | Slow                    | Host                                 | No                         | Behavior-based        |
| PADS [26]     | Network            | Content-based          | No              | Fast                    | General purpose                      | No                         | Content-based         |
| Nemean [31]   | Host               | Content-based          | No              | Fast                    | Application-specific                 | No                         | Content-based         |
| COVERS [14]   | Host               | Behavior-based         | Yes             | Fast                    | Application-specific                 | No                         | Behavior-based        |
| Malware Detection [4] | Host       | Behavior-based         | Yes             | Slow                    | General purpose                      | No                         | Behavior-based        |

Recent research on polymorphic worm signature generation and related studies [4, 13, 14, 16, 26, 31] has led to several approaches. In Table 6, we compare Hamsa with these techniques based on the following metrics:
1. **Network vs. Host Based**: Network-based systems use only network traffic and can be deployed on routers/gateways.
2. **Content vs. Behavior Based**: Content-based detection relies on the content of the traffic, while behavior-based detection focuses on the behavior of the traffic.
3. **Noise Tolerance**: The ability to handle noisy data.
4. **On-line Detection Speed**: The speed at which the generated signature can be compared with network traffic.
5. **General Purpose vs. Application Specific**: Some schemes require detailed protocol/application specification knowledge.
6. **Provable Attack Resilience**: The system's ability to withstand specific attacks.
7. **Information Exploited**: The type of information used for detection.

**Polygraph [16]**: This system considers three methods of generating signatures: (1) set of tokens, (2) sequences of tokens, and (3) weighted set of tokens. As shown in Section 7, Hamsa significantly outperforms Polygraph in terms of speed and attack resilience.

**Position-Aware Distribution Signatures (PADS) [26]**: PADS combines signature-based and statistical anomaly-based approaches to detect variants of the MSBlaster worm. However, its accuracy suffers in the presence of noise.

**Nemean [31]**: This system uses protocol semantics to cluster worm traffic and reconstruct connection and session-level signatures. It requires detailed protocol specifications for each application and may fail to produce effective signatures in noisy environments.

**Control Flow Graph (CFG) Similarity [13]**: This approach generates fingerprints based on the structural similarity of CFGs. However, it can be evaded by using SED, and matching fingerprints is computationally expensive.

**TaintCheck [17] and DACODA [5]**: These systems dynamically trace and correlate network input to control flow changes to find malicious inputs. While useful for understanding worms and vulnerabilities, they cannot automatically generate signatures and are highly application-specific.

**COVERS [14]**: This system, based on address-space randomization, can detect and correlate network input to generate signatures. However, the signatures generated, though effective for server protection, cannot be used by NIDSes or firewalls due to potential evasion. COVERS is also application-specific.

**Malware Detection [4]**: This approach models malicious program behavior and detects code pieces similar to an abstract model. However, it is computationally expensive.

### 9. Conclusion

In this paper, we present Hamsa, a network-based signature generation system for zero-day polymorphic worms. Hamsa generates multisets of tokens as signatures and achieves significant improvements in speed, accuracy, and attack resilience over Polygraph. We prove that the multiset signature generation problem is NP-Hard in the presence of noise and design model-based signature generation algorithms with analytical attack resilience guarantees. The signatures generated by Hamsa can be easily deployed in IDSes such as Snort [22] or Bro [19].

### 10. Acknowledgement

We would like to thank Dawn Song and James Newsome for providing the Polygraph source code and for their insightful discussions. We also thank the anonymous reviewers and our shepherd, Sal Stolfo, for their constructive comments and suggestions. Support for this work was provided by a DOE Early CAREER award.

### References

[1] M. I. Abouelhoda, S. Kurtz, et al. Replacing suffix trees with enhanced suffix arrays. Journal of Discrete Algorithms, 2004.
[2] A. V. Aho and M. J. Corasick. Efficient string matching: An aid to bibliographic search. Communications of the ACM, 1975.
[3] S. Bhatkar, D. DuVarney, and R. Sekar. Address obfuscation: An efficient approach to combat a broad range of memory error exploits. In Proc. of USENIX Security, 2003.
[4] M. Christodorescu, S. Jha, et al. Semantics-aware malware detection. In IEEE Symposium on Security and Privacy, 2005.
[5] J. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In Proc. of ACM CCS, 2005.
[6] Critical Solutions Ltd. Critical TAPs: Ethernet splitters designed for IDS. http://www.criticaltap.com.
[7] T. Detristan, T. Ulenspiegel, et al. Polymorphic shellcode engine using spectrum analysis. http://www.phrack.org/show.php?p=61&a=9.
[8] M. Farach and M. Thorup. String matching in Lempel-Ziv compressed strings. Symposium on the Theory of Computing (STOC), 1995.
[9] G. Gu, P. Fogla, et al. Measuring intrusion detection capability: An information-theoretic approach. In Proc of ACM Symposium on InformAction, Computer and Communications Security (ASIACCS), 2006.
[10] H. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detection. In USENIX Security Symposium, 2004.
[11] C. Kreibich. libstree â€” generic suffix tree library. http://www.cl.cam.ac.uk/~cpk25/libstree/.
[12] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion detection signatures using honeypots. In Proc. of the Workshop on Hot Topics in Networks (HotNets), 2003.
[13] C. Kruegel, E. Kirda, et al. Polymorphic worm detection using structural information of executables. In Proc. of Recent Advances in Intrusion Detection (RAID), 2005.
[14] Z. Liang and R. Sekar. Fast and automated generation of attack signatures: A basis for building self-protecting servers. In Proc. of ACM CCS, 2005.
[15] G. Manzini and P. Ferragina. Engineering a lightweight suffix array construction algorithm. Algorithmica, 40(1), 2004.
[16] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In IEEE Security and Privacy Symposium, 2005.
[17] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proc. of NDSS, 2005.
[18] Packeteer. Solutions for Malicious Applications. http://www.packeteer.com/prod-sol/solutions/dos.cfm.
[19] V. Paxson. Bro: A system for detecting network intruders in real-time. Computer Networks, 31, 1999.
[20] R. Perdisci, D. Dagon, W. Lee, et al. Misleading worm signature generators using deliberate noise injection. In IEEE Security and Privacy Symposium, 2006.
[21] Piotr Bania. TAPiON. http://pb.specialised.info/all/tapion/.
[22] M. Roesch. Snort: The lightweight network intrusion detection system, 2001. http://www.snort.org/.
[23] K.-B. Schurmann and J. Stoye. An incomplex algorithm for fast suffix array construction. In Proceedings of ALENEX/ANALCO, 2005.
[24] S. Singh, C. Estan, et al. Automated worm fingerprinting. In Proc. of OSDI, 2004.
[25] S. Staniford, V. Paxson, and N. Weaver. How to own the Internet in your spare time. In Proceedings of the 11th USENIX Security Symposium, 2002.
[26] Y. Tang and S. Chen. Defending against internet worms: A signature-based approach. In Proc. of Infocom, 2003.
[27] N. Tuck, T. Sherwood, B. Calder, and G. Varghese. Deterministic memory-efficient string matching algorithms for intrusion detection. In Proc of IEEE Infocom, 2004.
[28] R. Vargiya and P. Chan. Boundary detection in tokenizing network application payload for anomaly detection. In ICDM Workshop on Data Mining for Computer Security (DMSEC), 2003.
[29] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based worm detection and signature generation. In Proc. of Recent Advances in Intrusion Detection (RAID), 2005.
[30] K. Wang and S. J. Stolfo. Anomalous payload-based network intrusion detection. In Proc. of Recent Advances in Intrusion Detection (RAID), 2004.
[31] V. Yegneswaran, J. Griffin, P. Barford, and S. Jha. An architecture for generating semantic-aware signatures. In USENIX Security Symposium, 2005.

Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&Pâ€™06) 
1081-6011/06 $20.00 Â© 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:47:34 UTC from IEEE Xplore. Restrictions apply.