### Search Time

In Table VIII, we present the search time performance of Janus++ and Aura. The results indicate that Aura significantly outperforms Janus++ during the search phase. This is primarily due to the fact that Aura requires only one GGM tree evaluation for decryption, whereas Janus++ needs to evaluate \( d \) GGM trees. Additionally, Aura is implemented using C++ and OpenSSL, while Janus++ uses Python and PyCrypto, which further contributes to the performance disparity.

The search time in Aura consists of both client and server costs. Figures 5a and 5b illustrate these costs for a search query with 1,000,000 matched indices under different values of \( d \). The client cost is influenced by \( d \); a larger \( d \) results in a larger GGM tree, thus requiring more time to generate the revoked key. The client cost is also affected by \( h \); a larger \( h \) reduces the size of the Bloom Filter (BF) and GGM tree, thereby decreasing the cost of generating the revoked key. On the server side, the search time is dominated by recovering the indices that have not been deleted. This process is correlated with \( h \), as it involves evaluating \( h \) hash functions of the BF to determine whether each retrieved entry has been deleted. Specifically, Aura takes 0.004 ms and 0.006 ms to recover an index for \( h = 5 \) and \( h = 13 \), respectively.

### Search Communication Cost

Table V presents the communication cost for Janus++ and Aura. The search cost in Aura is related to the size of the revoked key, which is linear in the number of GGM nodes forming the minimum cover of the unrevoked leaf nodes (with respect to the BF entries with value '0'). The results are derived from random deletions of '10', '100', '1,000', and '10,000' entries. In the worst case, half of the BF entries will be revoked, and \( b/2 \) GGM nodes will be sent to the server. As shown, Janus++ outperforms Aura because it only sends a token to the server during the search phase.

### Deletion Communication Cost

Compared to Janus++, Aura significantly reduces the communication cost introduced by deletions, as shown in Table VI. We present the cost of the revocation key, which consists of a set of GGM tree nodes, for both schemes, as it dominates the communication cost during deletion. In Janus++, a part of the revoked key (a set of GGM tree nodes) is sent to the server whenever a deletion occurs, and the communication cost increases linearly with the number of deletions. In contrast, Aura does not communicate with the server during deletions; it simply inserts the deleted index into a local Bloom Filter.

### Storage Cost

The storage cost per index in Aura is linear in \( h \). However, this is not a bottleneck within the framework of backward-private SSE [9], [52]. Similar to existing non-interactive backward-private SSE schemes like Janus and Janus++, only newly inserted indices are encrypted using dedicated schemes. After a search, the results for a keyword can be cached at the server, and all ciphertext copies can be physically deleted. This approach does not compromise the security of SSE because the cached results are already known from the access pattern of previous searches.

### Conclusions

We introduce a new cryptographic primitive called Symmetric Revocable Encryption and propose a generic construction from the Bloom Filter and multi-puncturable pseudorandom function. We then present the first non-interactive Type-II backward-private SSE scheme (without hardware assumptions) based on this primitive. Our implementation and evaluation demonstrate its practicality and scalability. Designing efficient Type-I backward-private SSE within a single roundtrip remains challenging, and it is interesting to explore the application of our revocation encryption technique in multi-client settings. Additionally, most existing backward and forward-private SSE schemes support only restricted types of queries, so constructing practical SSE schemes with strong security and rich queries is still an open problem.

### Acknowledgment

We would like to thank the anonymous reviewers for their constructive comments. This work is supported in part by the Natural Science Foundation of China (No. 61802255), the Australian Research Council (ARC) Discovery Projects (No. DP180102199, DP200103308), and the Key (Keygrant) Project of Chinese Ministry of Education (No. 2020KJ010201).

### References

[1] G. Amjad, S. Kamara, and T. Moataz, “Breach-resistant structured encryption,” Proceedings on Privacy Enhancing Technologies, vol. 2019, no. 1, pp. 245–265, 2019.
[2] ——, “Forward and backward private searchable encryption with SGX,” in Proceedings of the 12th European Workshop on Systems Security, EuroSec@EuroSys 2019, Dresden, Germany, March 25, 2019, 2019, pp. 4:1–4:6.
[3] L. Blackstone, S. Kamara, and T. Moataz, “Revisiting leakage abuse attacks,” in NDSS. The Internet Society, 2020.
[4] B. H. Bloom, “Space/time trade-offs in hash coding with allowable errors,” Commun. ACM, vol. 13, no. 7, pp. 422–426, 1970.
[5] R. Bost, “(cid:80)oϕoς: Forward secure searchable encryption,” in ACM CCS 2016, Vienna, Austria, October 24-28, 2016, pp. 1143–1154.
[6] R. Bost and P. Fouque, “Thwarting leakage abuse attacks against searchable encryption - A formal approach and applications to database padding,” IACR Cryptology ePrint Archive, p. 1060.
[7] R. Bost, B. Minaud, and O. Ohrimenko, “Forward and backward private searchable encryption from constrained cryptographic primitives,” in ACM CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pp. 1465–1482.
[8] F. Brasser, U. M¨uller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi, “Software grand exposure:{SGX} cache attacks are practical,” in 11th {USENIX} Workshop on Offensive Technologies ({WOOT} 17), 2017.
[9] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart, “Leakage-abuse attacks against searchable encryption,” in ACM CCS 2015, Denver, CO, USA, October 12-16, 2015, 2015, pp. 668–679. [Online]. Available: http://doi.acm.org/10.1145/2810103.2813700
[10] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, “Dynamic searchable encryption in very-large databases: Data structures and implementation,” in NDSS 2014, San Diego, California, USA, February 23-26, 2014, 2014.
[11] D. Cash, S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, “Highly-scalable searchable symmetric encryption with support for boolean queries,” in CRYPTO 2013, Santa Barbara, CA, USA, August 18-22, 2013, 2013, pp. 353–373.
[12] D. Cash and S. Tessaro, “The locality of searchable symmetric encryption,” in EUROCRYPT 2014, Copenhagen, Denmark, May 11-15, 2014, 2014, pp. 351–368.
[13] J. G. Chamani, D. Papadopoulos, C. Papamanthou, and R. Jalili, “New constructions for forward and backward private symmetric searchable encryption,” in ACM CCS 2018, Toronto, ON, Canada, October 15-19, 2018, pp. 1038–1055.
[14] Y. Chang and M. Mitzenmacher, “Privacy preserving keyword searches on remote encrypted data,” in ACNS 2005, New York, NY, USA, June 7-10, 2005, 2005, pp. 442–455.
[15] M. Chase and S. Kamara, “Structured encryption and controlled disclosure,” in ASIACRYPT 2010, Singapore, December 5-9, 2010, 2010, pp. 577–594.
[16] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai, “Sgx-pectre attacks: Stealing intel secrets from sgx enclaves via speculative execution,” arXiv preprint arXiv:1802.09085, 2018.
[17] D. Clayton, C. Patton, and T. Shrimpton, “Probabilistic data structures in adversarial environments,” in ACM CCS 2019, London, UK, November 11-15, 2019, 2019, pp. 1317–1334.
[18] V. Costan and S. Devadas, “Intel sgx explained.” IACR Cryptology ePrint Archive, vol. 2016, no. 086, pp. 1–118, 2016.
[19] R. Curtmola, J. A. Garay, S. Kamara, and R. Ostrovsky, “Searchable symmetric encryption: improved definitions and efficient constructions,” in ACM CCS 2006, Alexandria, VA, USA, October 30 - November 3, 2006, pp. 79–88.
[20] I. Demertzis, J. G. Chamani, D. Papadopoulos, and C. Papamanthou, “Dynamic searchable encryption with small client storage,” in NDSS, 2020.
[21] I. Demertzis, D. Papadopoulos, and C. Papamanthou, “Searchable encryption with optimal locality: Achieving sublogarithmic read efficiency,” in CRYPTO 2018, Santa Barbara, CA, USA, August 19-23, 2018, 2018, pp. 371–406.
[22] D. Derler, T. Jager, D. Slamanig, and C. Striecks, “Bloom filter encryption and applications to efficient forward-secret 0-rtt key exchange,” in EUROCRYPT 2018, Tel Aviv, Israel, April 29 - May 3, 2018, 2018, pp. 425–455.
[23] M. Etemad, A. K¨upc¸ ¨u, C. Papamanthou, and D. Evans, “Efficient dynamic searchable encryption with forward privacy,” Proceedings on Privacy Enhancing Technologies, vol. 2018, no. 1, pp. 5–20, 2018.
[24] S. Faber, S. Jarecki, H. Krawczyk, Q. Nguyen, M. Rosu, and M. Steiner, “Rich queries on encrypted data: Beyond exact matches,” in ESORICS 2015, Vienna, Austria, September 21-25, 2015, 2015, pp. 123–145.
[25] S. Feghhi and D. J. Leith, “A web traffic analysis attack using only timing information,” IEEE Trans. Information Forensics and Security, no. 8, pp. 1747–1759.
[26] C. Gentry, “Fully homomorphic encryption using ideal lattices,” in ACM STOC 2009, Bethesda, MD, USA, May 31 - June 2, 2009, 2009, pp. 169–178.
[27] O. Goldreich, S. Goldwasser, and S. Micali, “How to construct random functions (extended abstract),” in 25th Annual Symposium on Foundations of Computer Science, West Palm Beach, Florida, USA, 24-26 October 1984, 1984, pp. 464–479. [Online]. Available: https://doi.org/10.1109/SFCS.1984.715949
[28] O. Goldreich and R. Ostrovsky, “Software protection and simulation on oblivious rams,” J. ACM, vol. 43, no. 3, pp. 431–473, 1996.
[29] Google, “Google Cloud Inter-Region Latency and Throughput,” https://datastudio.google.com/u/0/reporting/fc733b10-9744-4a72-a502-92290f608571/page/70YCB [online], 2020.
[30] M. D. Green and I. Miers, “Forward secure asynchronous messaging from puncturable encryption,” in 2015 IEEE Symposium on Security and Privacy, SP 2015, San Jose, CA, USA, May 17-21, 2015, 2015, pp. 305–320. [Online]. Available: https://doi.org/10.1109/SP.2015.26
[31] P. Grubbs, M. Lacharit´e, B. Minaud, and K. G. Paterson, “Pump up the volume: Practical database reconstruction from volume leakage on range queries,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS 2018, Toronto, ON, Canada, October 15-19, 2018, D. Lie, M. Mannan, M. Backes, and X. Wang, Eds. ACM, 2018, pp. 315–331.
[32] ——, “Learning to reconstruct: Statistical learning theory and encrypted database attacks,” in 2019 IEEE Symposium on Security and Privacy, SP 2019, San Francisco, CA, USA, May 19-23, 2019. IEEE, 2019, pp. 1067–1083.
[33] F. Hahn and F. Kerschbaum, “Searchable encryption with secure and efficient updates,” in ACM CCS 2014, Scottsdale, AZ, USA, November 3-7, 2014, pp. 310–320.
[34] S. Hohenberger, V. Koppula, and B. Waters, “Adaptively secure puncturable pseudorandom functions in the standard model,” in ASIACRYPT 2015, Auckland, New Zealand, November 29 - December 3, 2015, 2015, pp. 79–102.
[35] S. Jarecki, C. S. Jutla, H. Krawczyk, M. Rosu, and M. Steiner, “Outsourced symmetric private information retrieval,” in ACM CCS 2013, Berlin, Germany, November 4-8, 2013, 2013, pp. 875–888.
[36] S. Kamara and T. Moataz, “Boolean searchable symmetric encryption with worst-case sub-linear complexity,” in EUROCRYPT 2017, Paris, France, April 30 - May 4, 2017, 2017, pp. 94–124.
[37] ——, “SQL on structurally-encrypted databases,” in ASIACRYPT 2018, Brisbane, QLD, Australia, December 2-6, 2018, 2018, pp. 149–180.
[38] ——, “Computationally volume-hiding structured encryption,” in EUROCRYPT 2019, Darmstadt, Germany, May 19-23, 2019, 2019, pp. 183–213.
[39] S. Kamara, T. Moataz, and O. Ohrimenko, “Structured encryption and leakage suppression,” in CRYPTO 2018, Santa Barbara, CA, USA, August 19-23, 2018, 2018, pp. 339–370.
[40] S. Kamara and C. Papamanthou, “Parallel and dynamic searchable symmetric encryption,” in Financial Cryptography and Data Security FC 2013, Okinawa, Japan, April 1-5, 2013, Revised Selected Papers, 2013, pp. 258–274.
[41] S. Kamara, C. Papamanthou, and T. Roeder, “Dynamic searchable symmetric encryption,” in ACM CCS 2012, Raleigh, NC, USA, October 16-18, 2012, pp. 965–976.
[42] J. Katz, A. Sahai, and B. Waters, “Predicate encryption supporting disjunctions, polynomial equations, and inner products,” in EUROCRYPT 2008, Istanbul, Turkey, April 13-17, 2008, 2008, pp. 146–162.
[43] ——, “Predicate encryption supporting disjunctions, polynomial equations, and inner products,” J. Cryptology, vol. 26, no. 2, pp. 191–224, 2013.
[44] K. S. Kim, M. Kim, D. Lee, J. H. Park, and W. Kim, “Forward secure dynamic searchable symmetric encryption with efficient updates,” in ACM CCS 2017, Dallas, TX, USA, October 30 - November 03, 2017, pp. 1449–1463.
[45] A. B. Lewko, A. Sahai, and B. Waters, “Revocation systems with very small private keys,” in IEEE S&P 2010, 16-19 May 2010, Berkeley/Oakland, California, USA, 2010, pp. 273–285.
[46] I. Miers and P. Mohassel, “IO-DSSE: scaling dynamic searchable encryption to millions of indexes by improving locality,” in NDSS 2017, San Diego, California, USA, February 26 - March 1, 2017, 2017.
[47] M. Slee, A. Agarwal, and M. Kwiatkowski, “Thrift: Scalable Cross-Language Services Implementation,” Facebook White Paper, vol. 5, no. 8, 2007.
[48] D. X. Song, D. A. Wagner, and A. Perrig, “Practical techniques for searches on encrypted data,” in 2000 IEEE Symposium on Security and Privacy, Berkeley, California, USA, May 14-17, 2000, pp. 44–55.
[49] E. Stefanov, C. Papamanthou, and E. Shi, “Practical dynamic searchable encryption with small leakage,” in NDSS 2014, San Diego, California, USA, February 23-26, 2014, 2014.
[50] S. Sun, X. Yuan, J. K. Liu, R. Steinfeld, A. Sakzad, V. Vo, and S. Nepal, “Practical backward-secure searchable encryption from symmetric puncturable encryption,” in ACM CCS 2018, Toronto, ON, Canada, October 15-19, 2018, pp. 763–780.
[51] M. Theobald, J. Siddharth, and A. Paepcke, “Spotsigs: robust and efficient signature-based intrusion detection,” in USENIX Security Symposium, 2004.