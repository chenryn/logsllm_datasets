### Variations in Floating-Point Operations and Their Timing Implications

#### 1. Introduction
This section discusses the timing variations observed in floating-point operations on different CPU architectures, specifically focusing on the `libdrag` library. The results are compared with those presented in [15], which tested on an Intel i7-2600.

#### 2. Timing Variations in Floating-Point Operations
We did not observe any measurable timing variations in addition, multiplication, or subtraction operations for single or double precision floating-point numbers. However, we noted significant timing differences for division and square root operations based on the argument values. The cross-table results for double precision division are shown in Figure 14, and a summary of the observed timing variations is provided in Figure 12.

For division, the numerator does not impact the running time. The denominator, however, shows variation if the significand or exponent is all zero bits. When either part is zero, the computation runs consistently faster in both single and double precision, with differences ranging from 2% to 5%. This contrasts with the 2500% differences observed in Section 3.

Square root operations exhibit similar behavior, where a zero significand or exponent results in faster computations. This aligns with the behavior seen in many scalar operations (Figure 9).

An interesting observation is that subnormal values cause a speedup under `libdrag`, unlike the slowdown observed in scalar operations. We speculate that this is due to fast paths in the microcode handling for vector operations. Performance counters confirmed that all vector operations containing a subnormal value execute microcode rather than hardwired logic on the FPU hardware. Intel has not provided details on the cause of these timing effects.

#### 3. Results on AMD Phenom II X2 550
Figure 13 summarizes our results on the AMD Phenom II X2 550. Similar to the Intel i5-4460, we observed timing variations, but they were confined to addition and subtraction with subnormal values. By examining the cycle times for each operation, we found that the total cycle time for an escorted add or subtract is approximately equal to the sum of the cycle counts for a subnormal, subnormal operation, and the test case. This suggests that the AMD Phenom II X2 550 performs each operation sequentially using the same hardware or microcode as scalar operations.

#### 4. End-to-End Tests with Toy Programs
To conduct end-to-end tests, we wrote toy programs that perform specified floating-point operations multiple times and compiled them under Escort and GCC. We used the Linux `time` utility to measure the runtimes of the entire program. The test setup ensured that each run performed the same value parsing and setup steps, with only the values entering the computation differing between runs. Each target computation was run 160,000,000 times per execution, and each test was repeated 10 times. The results showed the same effects as in our microbenchmarks, with cells colorized if they differ by 2% (Figure 15).

#### 5. libdrag Modified Firefox
We modified a build of Firefox 25 in consultation with Rane et al. [15] to match their version. Since multiply no longer shows any timing variation in `libdrag`, we observed a potential ≤ 2% difference only in division, which occurs once per pixel. Additionally, since the denominator is controlled by the attacker and the secret value is the numerator, we could not update the pixel stealing attack for the modified Firefox 25. The modifications were limited to hand-made changes to the `feConvolveMatrix` implementation. We did not test other SVG filters for vulnerability under the Escort/libdrag modifications.

Given the observed timing variations in the AMD Phenom II X2 550, we believe that multiple SVG filters would be timing side-channel vulnerable under Escort on that CPU.

#### 6. Summary of Findings
Our benchmarks consistently demonstrated small but detectable timing differences for `libdrag`'s vector operations based on operand values. For Intel CPUs, `div` and `mul` exhibit timing differences under Escort. For AMD CPUs, we observed variation only for `add/sub`. These differences are no more than 5%, compared to the 500% or more differences observed in scalar operations. We have informed Rane, Lin, and Tiwari of these findings.

The 'escort' mechanism can only serve as an effective defense if vector operations are computed in parallel. In all tested CPUs, the most likely explanation for the observed timing differences is that vector operations are executed serially when in microcode. Thus, without substantial architectural changes, we do not believe that the 'escort' vector mechanism can close all floating-point data timing channels.

#### 7. GPU Floating-Point Performance
In this section, we discuss the results of GPU floating-point benchmarks and the use of GPU acceleration in SVG filters for Google Chrome.

##### 7.1 Browser GPU Support
All major browsers use GPU hardware acceleration to improve performance. However, only Safari and Chrome support a subset of CSS and SVG filters on the GPU. Firefox intends to port filters to the GPU but currently lacks support.

##### 7.2 Performance
We performed CUDA benchmarks on an Nvidia GeForce GT 430 to determine the impact of subnormal values on computation time. The results for division are shown in Figure 16. All other results (add, sub, mul) were constant time regardless of the inputs.

Subnormals induce significant slowdowns on division operations for single precision floats. Unfortunately, no SVG filters implemented in Chrome on the GPU perform tight division loops, making it extremely difficult to extract timing differences from occasional divisions.

If a filter were found to perform tight division loops or a GPU with timing variation on non-division operations were found, the same attacks as in previous sections could be ported to the GPU-accelerated filters.

We believe that even without a specific attack, the demonstration of timing variation based on operand values in GPUs should invalidate "move to the GPU" as a defensive strategy.

#### 8. Related Work
Felten and Schneider were the first to mount timing side-channel attacks against browsers, observing that cached resources load faster than those requested from a server, allowing malicious JavaScript to learn visited pages [6]. Jia et al. [10] showed that cache timing can reveal a user's location. Bortz, Boneh, and Nandy [3] introduced cross-site timing attacks, which Evans [5] and Gelernter and Herzberg [7] later refined. Van Goethem, Joosen, and Nikiforakis [17] observed that HTML5 features allow attackers to time individual stages in the browser's response-processing pipeline.

Yossi Oren [14] showed that microarchitectural timing channels can be mounted from JavaScript, and Gras et al. [8] extended these techniques to learn virtual memory mappings. Kohlbrenner and Shacham [12] proposed a browser architecture that degrades the clocks available to JavaScript.

Browsers allow web pages to apply SVG filters to elements, including cross-origin iframes. If filter processing time varies with pixel values, those values will leak. Stone [16] and Kotcher et al. [13] demonstrated pixel-stealing attacks, and Andrysco et al. [2] showed that such attacks are feasible even with constant instruction traces. Rane, Lin, and Tiwari [15] proposed transformations to eliminate data-dependent timing in floating-point instructions.

#### 9. Conclusions and Future Work
We have extensively benchmarked floating-point performance on various CPUs under scalar operations, FTZ/DAZ FPU flags, -ffast-math compiler options, and Rane, Lin, and Tiwari’s Escort. We identified operand-dependent timing differences on all tested platforms and configurations, many of which were overlooked in previous work.

For Escort, our data suggests that processors execute SIMD operations on subnormal values sequentially, not in parallel. A redesign of the vector processing unit would be required to make Escort effective at closing all floating-point timing channels.

We revisited browser implementations of SVG filters and found exploitable timing variations in the latest versions of Chrome, Firefox, and Safari. Modern GPUs also exhibit slowdowns in processing subnormal values, extending the problem beyond x86 processors.

We recommend comprehensive measurement on many different processor families, particularly ARM. For specific processors, we can identify specific flags, operations, and operand sizes that run in constant time. An architecture-aware library could ensure no timing-variable floating-point operations occur while preserving as much of the IEEE-754 standard as possible.

For software developers, floating-point operations as implemented by CPUs today are too unpredictable for timing-sensitive contexts. Defensive measures that remove SSE floating-point operations or fixed-point implementations are recommended. For browser vendors, we recommend disallowing cross-origin SVG filters and patching individual timing side channels. For processor vendors, documenting timing variations in instructions commonly used in crypto software is essential.

#### 10. Acknowledgements
We thank Eric Rescorla and Jet Villegas for sharing insights about Firefox internals, and Philip Rogers, Joel Weinberger, and Stephen White for insights about Chrome internals. We also thank Ashay Rane for his assistance with the Escort compiler and `libdrag` library. This work was supported by the National Science Foundation and a gift from Mozilla.

#### 11. References
[1] J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, and M. Emmi, “Verifying constant-time implementations,” in Proceedings of USENIX Security 2016, T. Holz and S. Savage, Eds. USENIX, Aug. 2016, pp. 53–70.

[2] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and H. Shacham, “On subnormal floating point and abnormal timing,” in Proceedings of IEEE Security and Privacy (“Oakland”) 2015, L. Bauer and V. Shmatikov, Eds. IEEE Computer Society, May 2015.

[3] A. Bortz, D. Boneh, and P. Nandy, “Exposing private information by timing Web applications,” in Proceedings of WWW 2007, P. Patel-Schneider and P. Shenoy, Eds. ACM Press, May 2007, pp. 621–28.

[4] L. De Moura and N. Bjørner, “Z3: An efficient SMT solver,” in International conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2008, pp. 337–340.

[5] C. Evans, “Cross-domain search timing,” Online: https://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html, Dec. 2009.

[6] E. W. Felten and M. A. Schneider, “Timing attacks on Web privacy,” in Proceedings of CCS 2000, S. Jajodia, Ed. ACM Press, Nov. 2000, pp. 25–32.

[7] N. Gelernter and A. Herzberg, “Cross-site search attacks,” in Proceedings of CCS 2015, C. Kruegel and N. Li, Eds. ACM Press, Oct. 2015, pp. 1394–1405.

[8] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida, “ASLR on the line: Practical cache attacks on the MMU,” in Proceedings of NDSS 2017, A. Juels, Ed. Internet Society, Feb. 2017.

[9] W.-M. Hu, “Reducing timing channels with fuzzy time,” J. Computer Security, vol. 1, no. 3-4, pp. 233–54, 1992.

[10] Y. Jia, X. Dong, Z. Liang, and P. Saxena, “I know where you’ve been: Geo-inference attacks via the browser cache,” in Proceedings of W2SP 2014, L. Koved and M. Fredrikson, Eds. IEEE Computer Society, May 2014.

[11] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and C. E. Kahn, “A retrospective on the VAX VMM security kernel,” IEEE Trans. Software Engineering, vol. 17, no. 11, pp. 1147–65, Nov. 1991.

[12] D. Kohlbrenner and H. Shacham, “Trusted browsers for uncertain times,” in Proceedings of USENIX Security 2016, T. Holz and S. Savage, Eds. USENIX, Aug. 2016, pp. 463–80.

[13] R. Kotcher, Y. Pei, P. Jumde, and C. Jackson, “Cross-origin pixel stealing: Timing attacks using CSS filters,” in Proceedings of CCS 2013, V. Gligor and M. Yung, Eds. ACM Press, Nov. 2013, pp. 1055–62.

[14] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis, “The spy in the sandbox: Practical cache attacks in JavaScript and their implications,” in Proceedings of CCS 2015, C. Kruegel and N. Li, Eds. ACM Press, Oct. 2015, pp. 1406–18.

[15] A. Rane, C. Lin, and M. Tiwari, “Secure, precise, and fast floating-point operations on x86 processors,” in Proceedings of USENIX Security 2016, T. Holz and S. Savage, Eds. USENIX, Aug. 2016, pp. 71–86.

[16] P. Stone, “Pixel perfect attacks with HTML5,” Presented at Black Hat 2013, Jul. 2013, online: https://www.contextis.com/documents/2/Browser_Timing_Attacks.pdf.

[17] T. Van Goethem, W. Joosen, and N. Nikiforakis, “The clock is still ticking: Timing attacks in the modern web,” in Proceedings of CCS 2015, C. Kruegel and N. Li, Eds. ACM Press, Aug. 2015, pp. 1382–93.

[18] M. Zalewski, “Rapid history extraction through non-destructive cache timing,” Online: http://lcamtuf.coredump.cx/cachetime/, Dec. 2011.

**Notes:**
1. https://skia.org/

---

This revised text provides a clear, coherent, and professional presentation of the research findings, making it easier for readers to follow and understand the key points.