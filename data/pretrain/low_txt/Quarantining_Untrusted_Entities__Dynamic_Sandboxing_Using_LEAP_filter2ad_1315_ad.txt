### Executive Summary
While SELinux also allows for explicit domain changes, Compartmented Mode Workstations (CMW) permit labels to "float up" to higher levels rather than deny access. This approach limits the extent of this floating by specifying a maximum level. LOMAC (Low Water-Mark Mandatory Access Control) prevents core filesystem components from being "infected" by untrusted sources by reducing a process's permissions after it reads an untrusted source.

A project with similar goals to KernelSec was DTAC, which introduced additional constraints to the system to provide more dynamic Type Enforcement (TE). DTAC was the first OS-based authorization model capable of representing dynamic separation of duties.

### Conclusion
Sandboxes have traditionally been used to restrict the privileges of executables, thereby implementing the principle of least privilege and reducing the risks posed by applications. Sandboxes provide a one-way protection mechanism: processes inside a sandbox have limited visibility outside, but the sandbox and its contents are visible to external processes. This allows a user to incorporate outside entities into their activities, but it also means that a file downloaded from an untrusted source can be copied by an external process, thus bypassing sandbox protections. Such files pose a risk to applications that later read them. Conversely, data produced internally by trusted mechanisms should have greater permissions than those from untrusted sources. Traditional sandboxes, however, do not distinguish between these two types of data.

We introduce dynamic sandboxes, provide a sample specification in LEAP, and describe their implementation in KernelSec, a kernel-level authorization model for the Linux Kernel. Using KernelSec, we track (via labels) files from untrusted sources and automatically enter a dynamic sandbox when an interpreter reads an untrusted entity.

The mechanisms used in KernelSec to implement dynamic sandboxes are general-purpose and policy-neutral, making them useful for other purposes beyond constructing sandboxes. This generality is crucial for finding a compact set of building blocks to protect systems. Creating effective mechanisms to ensure that programs execute with minimal permissions is not inherently difficult. However, providing such mechanisms with sufficiently low complexity that they are both used and used correctly is a significant challenge. We believe that dynamic protections, which adapt to user actions, and suitable high-level specifications are key to reducing the complexity of using these protections, thus ushering in a new generation of authorization models that strongly protect the system and its users.

### Acknowledgements
Xpdf, Thunderbird, and Bash were ported by Saurabh Abichandani and Shuxia Feng. We would like to thank Saurabh Abichandani, Shuxia Feng, and Jorge Hernandez-Herrero for their helpful comments. We also extend our gratitude to the anonymous reviewers for their valuable feedback.

### References
1. A. Acharya and M. Raje. MAPbox: Using parameterized behavior classes to confine untrusted applications. In Proceedings of the 9th USENIX Security Symposium, Denver, Colorado, Aug. 2000. USENIX.
2. J. L. Berger, J. Picciotto, J. P. L. Woodward, and P. T. Cummings. Compartmented mode workstation: Prototype highlights. IEEE Transactions on Software Engineering, 16(6):608–618, 1990. Special Section on Security and Privacy.
3. A. Berman, V. Bourassa, and E. Selberg. TRON: Process-specific file protection for the UNIX operating system. In Proceedings of the USENIX 1995 Technical Conference, pages 165–175, New Orleans, LA, USA, Jan. 16–20 1995.
4. K. Biba. Integrity considerations for secure computer systems. Technical Report TR-3153, MITRE Corp, Bedford, MA, 1977.
5. W. E. Boebert and R. Kain. A practical alternative to hierarchical integrity policies. In 8th National Computer Security Conference, pages 18–27, 1985.
6. D. Brumley and D. X. Song. Privtrans: Automatically partitioning programs for privilege separation. In USENIX Security Symposium, pages 57–72, 2004.
7. L. Badger, D. F. Sterne, D. L. Sherman, K. M. Walker, and S. A. Haghihat. Practical domain and type enforcement for UNIX. In Proc. IEEE Symp. Security and Privacy, pages 66–77, Oakland, CA, 1995.
8. D. Balfanz and D. R. Simon. WindowBox: A simple security model for the connected desktop. In Proceedings of the 4th USENIX Windows Systems Symposium (WSS-00), pages 37–48, Berkeley, CA, Aug. 3–4 2000. The USENIX Association.
9. D. E. Bell and L. J. LaPadula. Secure computer systems: Mathematical foundations and model. Technical Report M74-244, Mitre Corporation, Bedford MA, 1973.
10. H. Chen, D. Wagner, and D. Dean. Setuid demystified. In Proc. of the USENIX Security Symposium. USENIX, 2002.
11. C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle, and V. Gligor. Subdomain: Parsimonious security server. In 14th Systems Administration Conference (LISA 2000), pages 355–367, New Orleans, LA, 2000.
12. R. S. Cox, S. D. Gribble, H. M. Levy, and J. G. Hansen. A safety-oriented platform for web applications. In IEEE Symposium on Security and Privacy, pages 350–364. IEEE Computer Society, 2006.
13. J. Dike. User-mode Linux. In USENIX, editor, Proceedings of the 5th Annual Linux Showcase and Conference. USENIX, Nov.5–10 2001.
14. B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, I. Pratt, A. Warfield, P. Barham, and R. Neugebauer. Xen and the art of virtualization. In In Proceedings of the ACM Symposium on Operating Systems Principles, October 2003., 2003.
15. P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazi`eres, F. Kaashoek, and R. Morris. Labels and event processes in the asbestos operating system. SIGOPS Oper. Syst. Rev., 39(5):17–30, 2005.
16. T. Fraser. LOMAC–low water-mark mandatory access control for Linux. In Proc. of the USENIX Security Symposium, Washington D.C., 1999.
17. V. Ganapathy, T. Jaeger, and S. Jha. Retrofitting legacy code for authorization policy enforcement. Technical Report 1544, University of Wisconsin–Madison, Computer Science Department, nov 2005. Describes semi-automatic techniques for retrofitting an X-server with a mechanism.
18. T. Garfinkel. Traps and pitfalls: Practical problems in system call interposition based security tools. In Proc. Network and Distributed Systems Security Symposium, February 2003.
19. T. Garfinkel, B. Pfaff, and M. Rosenblum. Ostia: A delegating architecture for secure system call interposition. In Proc. Network and Distributed Systems Security Symposium, February 2004.
20. I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure environment for untrusted helper applications (confining the wily hacker). In Proc. of the USENIX Security Symposium, San Jose, Ca., 1996.
21. S. Ioannidis, S. M. Bellovin, and J. Smith. Sub-operating systems: A new approach to application security. http://www.research.att.com/ smb/papers/subos.ps, Nov. 2001. Draft, sandbox.
22. K. Jain and R. Sekar. User-level infrastructure for system call interposition: A platform for intrusion detection and confinement. In NDSS, 2000.
23. K. Kahley, M. Radhakrishnan, and J. A. Solworth. Factoring high-level information flow specifications into low-level access controls. In IEEE Workshop of Information Assurance, Apr. 2006.
24. P.-H. Kamp and R. N. M. Watson. Jails: Confining the omnipotent root. In SANE 2000. NLUUG, 2000.
25. G. S. Kc and A. D. Keromytis. e-nexsh: Achieving an effectively non-executable stack and heap via system-call policing. In ACSAC '05: Proceedings of the 21st Annual Computer Security Applications Conference, pages 286–302, Washington, DC, USA, 2005. IEEE Computer Society.
26. T. Khatiwala, R. Swaminathan, and V. N. Venkatakrishnan. Data sandboxing: A technique for enforcing confidentiality policies. In ACSAC '06: Proceedings of the 22nd Annual Computer Security Applications Conference, pages 223–234, Washington, DC, USA, 2006. IEEE Computer Society.
27. A. Kurchuk and A. D. Keromytis. Recursive sandboxes: Extending systrace to empower applications. In SEC, pages 473–488, 2004.
28. W. Li, L. chung Lam, and T. cker Chiueh. How to automatically and accurately sandbox Microsoft IIS. In ACSAC '06: Proceedings of the 22nd Annual Computer Security Applications Conference, pages 213–222, Washington, DC, USA, 2006. IEEE Computer Society.
29. Z. Liang, V. N. Venkatakrishnan, and R. Sekar. Isolated program execution: An application transparent approach for executing untrusted programs. In ACSAC, pages 182–191, 2003.
30. A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. Software Engineering and Methodology, 9(4):410–442, 2000.
31. D. S. Peterson, M. Bishop, and R. Pandey. A flexible containment mechanism for executing untrusted code. In USENIX, editor, Proc. of the USENIX Security Symposium, pages 207–225, Berkeley, CA, USA, 2002. USENIX.
32. N. Provos. Improving host security with system call policies. In Proceedings of the 12th USENIX Security Symposium, pages 257–272. USENIX, Aug. 2003.
33. N. Provos, M. Friedl, and P. Honeyman. Preventing privilege escalation. In Proceedings of the 12th USENIX Security Symposium, pages 231–242. USENIX, Aug. 2003.
34. M. Radhakrishnan and J. A. Solworth. Application security support in the operating system kernel. In ACM Symposium on InformAtion, Computer and Communications Security (AsiaCCS'06), pages 201–211, Taipei, Taiwan, Mar. 2006.
35. D. Safford, M. Zohar, and R. Sailer. EVM, SLIM, IMA. http://lwn.net/Articles/160126/, nov 2005.
36. R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger, J. L. Griffin, and L. van Doorn. Building a MAC-based security architecture for the Xen open-source hypervisor. In ACSAC, pages 276–285. IEEE Computer Society, 2005.
37. R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E. Youman. Role-based access control models. IEEE Computer, 29(2):38–47, 1996.
38. J. S. Shapiro and S. Weber. Verifying the EROS confinement mechanism. In Proc. IEEE Symp. Security and Privacy, pages 166–176, 2000.
39. S. Smalley, C. Vance, and W. Salamon. Implementing SELinux as a Linux security module. Report #01-043, NAI Labs, Dec. 2001. Revised April 2002.
40. J. A. Solworth. Approvability. In ACM Symposium on InformAtion, Computer and Communications Security (AsiaCCS'06), pages 231–242, Taipei, Taiwan, Mar. 2006.
41. J. A. Solworth and R. H. Sloan. Decidable administrative controls based on security properties, 2004. Available at http://www.rites.uic.edu/ solworth/kernelSec.html.
42. J. A. Solworth and R. H. Sloan. A layered design of discretionary access controls with decidable properties. In Proc. IEEE Symp. Security and Privacy, pages 56–67, 2004.
43. J. A. Solworth and R. H. Sloan. Security property-based administrative controls. In Proc. European Symp. Research in Computer Security (ESORICS), volume 3139 of Lecture Notes in Computer Science, pages 244–259. Springer, 2004.
44. J. Tidswell and T. Jaeger. An access control model for simplifying constraint expression. In Proc. ACM Conference on Computer and Communications Security (CCS), pages 154–163, 2000.
45. J. F. Tidswell and T. Jaeger. Integrated constraints and inheritance in DTAC. In Proc. of the ACM Workshop on Role-Based Access Controls (RBAC), pages 93–102, 2000.
46. C. Waldspurger. Memory resource management in VMware ESX server. In Fifth Symposium on Operating Systems Design and Implementation, Dec. 2002.
47. R. Watson. TrustedBSD: Adding trusted operating system features to FreeBSD. In USENIX Technical Conference, Boston, MA, 2001.
48. C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux Security Modules: General security support for the Linux Kernel. In Proc. of the USENIX Security Symposium, San Francisco, Ca., 2002.