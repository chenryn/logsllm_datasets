### 图3：MySQL测试-插入基准

图3展示了MySQL的测试-插入基准，包括表创建、数据插入和选择操作。该图根据基准测试工具报告的数据绘制了总执行时间。

### 解释与背景

在解释性语言如Perl以及后来的SQL [9] 中，同时Barrantes等人 [4] 提出了一种针对二进制文件的随机化技术（RISE），该技术基于Valgrind x86模拟器。RISE对共享库的支持有限，通过为每个进程创建随机化的库副本实现。因此，这些库实际上并未被共享，并且每次加载时都会消耗额外的内存。此外，Valgrind至少带来400%的性能开销 [18]，这使其使用变得不切实际。

最接近我们工作的研究是Hu等人的工作 [24]。他们也采用了一个基于动态二进制翻译框架STRATA的虚拟执行环境。他们的实现使用了带有128位密钥的AES加密，要求代码段按128位块对齐。与我们的实现不同，他们不支持自修改代码，并且生成的随机化二进制文件比原始文件大得多（例如，Apache的随机化版本比原版大77%）。据我们所知，以前关于ISR的工作并未解决信号跳板和VDSO带来的影响，也没有探讨保护执行环境免受托管进程攻击的成本（STRATA仅保护其部分数据）。

地址混淆是另一种基于随机化执行环境（即代码和数据的位置）以增强软件抵御攻击的方法 [7, 33]。可以在运行时通过随机化进程布局（ASLR）来实现，包括栈、堆、动态链接库、静态数据和进程基址。此外，还可以在编译时随机化程序例程和变量的位置。Shacham等人 [38] 表明，ASLR在32位系统上可能效果不佳，因为它们不允许足够的熵。相反，Bhatkar等人 [8] 认为可以通过引入足够的熵使ASLR有效。然而，攻击者已经成功地通过预测进程布局、利用应用程序暴露布局信息 [19] 或使用诸如堆喷射 [16] 等技术来攻破启用了ASLR的系统。

现代处理器中的硬件扩展，如NoExecute (NX) 位 [22, 33]，可以完全阻止代码注入攻击而不会影响性能。这是通过禁止从标记有NX位的内存页中执行代码来实现的。不幸的是，其有效性依赖于软件的正确使用。例如，许多应用程序（如浏览器）并未在所有数据段上设置它，这可能是由于向后兼容性约束（例如，使用信号跳板的系统）或不良开发实践所致。

PointGuard [14] 使用加密来保护指针免受缓冲区溢出攻击。它在内存中加密指针，并仅在加载到寄存器时解密。它作为一个编译器扩展实现，因此需要源代码进行重新编译。虽然它可以防止缓冲区溢出攻击，但可以通过格式字符串攻击（通常涉及代码注入）来绕过。其他作为编译器扩展实现的解决方案包括Stackguard [15] 和ProPolice [21]。它们通过在栈中引入特殊秘密值来识别和防止栈溢出攻击，但可以被规避 [10]。写完整性测试 [2] 使用静态分析和“守护”值来防止内存损坏错误，但静态分析本身无法正确分类所有程序写入。CCured [30] 是一个源代码转换系统，可为C程序添加类型安全性，但它带来了显著的性能开销，并且无法静态处理某些数据类型。总体而言，需要重新编译软件的解决方案不太实用，因为源代码或其部分（如第三方库）并不总是可用。

动态二进制插桩被许多其他解决方案用于未修改的二进制文件，以防御远程攻击。例如，许多项目 [31, 17, 13, 23] 使用动态污点分析 (DTA)，能够检测控制劫持和代码注入攻击，但会导致较大的性能开销（例如，通常超过20倍）。由于其巨大的开销，动态解决方案主要用于攻击和恶意软件的分析 [6] 以及蜜罐 [37]。

### 结论

我们描述了一种基于Intel动态插桩工具PIN的快速且实用的ISR实现。我们的实现适用于普通系统，不需要重新编译或重新链接目标应用程序。二进制文件在执行时被随机化，而共享库可以预先编码并在使用ISR执行的进程中共享。此外，我们引入了一个简单的管理方案来跟踪随机化的共享库及其关联密钥。

我们的解决方案具有相对较小的开销，使其成为增强安全敏感应用程序的有效对策。将其应用于Apache Web服务器时，对于静态HTML负载几乎没有影响，而MySQL的性能大约降低了75%。此外，我们表明开销主要归因于PIN，并且当应用于长时间运行的I/O驱动应用程序（如网络服务）时可以轻松缓解。

### 致谢

本研究得到了美国空军研究实验室（AFRL）通过合同FA8650-10-C-7024以及国家科学基金会（NSF）通过资助CNS-09-14845的支持。本文表达的观点、发现、结论和建议仅代表作者个人观点，并不一定反映美国政府、空军或NSF的意见。

### 参考文献

[1] Adobe. Security advisory for flash player, adobe reader and acrobat. http://www.adobe.com/support/security/advisories/apsa10-01.html, June 2010.

[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing memory error exploits with WIT. In Proceedings of the 2008 IEEE Symposium on Security and Privacy, pages 263–277, May 2008.

[3] Aleph One. Smashing the stack for fun and profit. Phrack, 7(49), 1996.

[4] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer, D. Stefanovic, and D. D. Zovi. Randomized instruction set emulation to disrupt binary code injection attacks. In Proceedings of the ACM Conference on Computer and Communications Security, pages 281–289, October 2003.

[5] E. G. Barrantes, D. H. Ackley, S. Forrest, and D. Stefanović. Randomized instruction set emulation. ACM Trans. Inf. Syst. Secur., 8(1):3–40, 2005.

[6] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A tool for analyzing malware. In Proceedings of the 15th European Institute for Computer Antivirus Research (EICAR) Annual Conference, April 2006.

[7] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address obfuscation: an efficient approach to combat a broad range of memory error exploits. In Proceedings of the 12th USENIX Security Symposium, pages 105–120, August 2003.

[8] S. Bhatkar, R. Sekar, and D. C. DuVarney. Efficient techniques for comprehensive protection from memory error exploits. In Proceedings of the 14th USENIX Security Symposium, pages 255–270, August 2005.

[9] S. W. Boyd, G. S. Kc, M. E. Locasto, A. D. Keromytis, and V. Prevelakis. On the general applicability of instruction-set randomization. IEEE Transactions on Dependable and Secure Computing, 99, 2008.

[10] Bulba and Kil3r. Bypassing StackGuard and StackShield. Phrack, 5(56), May 2000.

[11] CERT Advisory CA-2001-19: “Code Red” worm exploiting buffer overflow in IIS indexing service DLL. http://www.cert.org/advisories/CA-2001-19.html, July 2001.

[12] Cert Advisory CA-2003-04: MS-SQL Server Worm. http://www.cert.org/advisories/CA-2003-04.html, January 2003.

[13] M. Costa, J. Crowcroft, M. Castro, and A. Rowstron. Vigilante: End-to-end containment of internet worms. In Proceedings of the ACM Symposium on Systems and Operating Systems Principles (SOSP), October 2005.

[14] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuard: Protecting pointers from buffer overflow vulnerabilities. In Proceedings of the 12th USENIX Security Symposium, pages 91–104, August 2003.

[15] C. Cowan, C. Pu, D. Maier, H. Hinton, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proceedings of the 7th USENIX Security Symposium, January 1998.

[16] DarkReading. Heap spraying: Attackers’ latest weapon of choice. http://www.darkreading.com/security/vulnerabilities/showArticle.jhtml?articleID=221901428, November 2009.

[17] D. E. Denning. A lattice model of secure information flow. Commun. ACM, 19(5):236–243, 1976.

[18] Valgrind Developers. Valgrind user manual – callgrind. http://valgrind.org/docs/manual/cl-manual.html.

[19] T. Durden. Bypassing PaX ASLR protection. Phrack, 0x0b(0x3b), July 2002.

[20] CWE. CWE-416: use after free. http://cwe.mitre.org/data/definitions/416.html, April 2010.

[21] J. Etoh. GCC extension for protecting applications from stack-smashing attacks. http://www.trl.ibm.com/projects/security/ssp/, June 2000.

[22] Hardware. CPU-based security: The NX bit. http://hardware.earthweb.com/chips/article.php/3358421, May 2004.

[23] A. Ho, M. Fetterman, C. Clark, A. Warfield, and S. Hand. Practical taint-based protection using demand emulation. In Proceedings of the 1st ACM EuroSys Conference, pages 29–41, April 2006.

[24] W. Hu, J. Hiser, D. Williams, A. Filipi, J. W. Davidson, D. Evans, J. C. Knight, A. Nguyen-Tuong, and J. Rowanhill. Secure and practical defense against code-injection attacks using software dynamic translation. In Proceedings of the 2nd International Conference on Virtual Execution Environments (VEE), pages 2–12, June 2006.

[25] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering code-injection attacks with instruction-set randomization. In Proceedings of the 10th ACM Conference on Computer and Communications Security (CCS), October 2003.

[26] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In Proceedings of Programming Language Design and Implementation (PLDI), pages 190–200, June 2005.

[27] M. Conover and w00w00 Security Team. w00w00 on heap overflows. http://www.w00w00.org/files/articles/heaptut.txt.

[28] Microsoft. Microsoft portable executable and common object file format specification. http://www.microsoft.com/whdc/system/platform/firmware/PECOFF.mspx.

[29] D. Moore, C. Shanning, and K. Claffy. Code-Red: a case study on the spread and victims of an Internet worm. In Proceedings of the 2nd Internet Measurement Workshop (IMW), pages 273–284, November 2002.

[30] G. C. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer. CCured: type-safe retrofitting of legacy software. ACM Trans. Program. Lang. Syst., 27(3):477–526, 2005.

[31] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the 12th Annual Symposium on Network and Distributed System Security (NDSS), February 2005.

[32] M. Owens. Embedding an SQL database with SQLite. Linux Journal, 2003(110):2, June 2003.

[33] PaX Home Page. http://pax.grsecurity.net/.

[34] PCWorld. Dangling pointers could be dangerous. http://www.pcworld.com/article/134982/dangling_pointers_could_be_dangerous.html, July 2007.

[35] J. Pincus and B. Baker. Beyond stack smashing: Recent advances in exploiting buffer overflows. IEEE Security & Privacy Magazine, 2(4):20–27, July/August 2004.

[36] P. Porras, H. Saidi, and V. Yegneswaran. Conficker C analysis. Technical report, SRI International, 2009.

[37] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for fingerprinting zero-day attacks. In Proceedings of the 1st ACM EuroSys Conference, April 2006.

[38] H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, and D. Boneh. On the effectiveness of address-space randomization. In Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS), pages 298–307, October 2004.

[39] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting format string vulnerabilities with type qualifiers. In Proceedings of the 10th USENIX Security Symposium, pages 201–216, August 2001.

[40] A. N. Sovarel, D. Evans, and N. Paul. Where’s the FEEB? the effectiveness of instruction set randomization. In Proceedings of the 14th USENIX Security Symposium, pages 145–160, August 2005.

[41] E. H. Spafford. The Internet worm program: An analysis. Technical Report CSD-TR-823, Purdue University, 1988.

[42] Symantec. Analysis of a zero-day exploit for Adobe Flash and Reader. http://www.symantec.com/connect/blogs/analysis-zero-day-exploit-adobe-flash-and-reader, June 2010.

[43] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), pages 3–17, February 2000.

[44] C. C. Zou, W. Gong, and D. Towsley. Code Red worm propagation modeling and analysis. In Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS), pages 138–147, November 2002.