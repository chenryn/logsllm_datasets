### Optimized Text

#### Transformations and Proof Rules

1. **Transformation:**
   - **{ρ}[rmUsr(xsi) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeS(x)` with `scopeS(x) ∧ ¬ψ(x)` and every instance of `playsRole(x, y)` with `playsRole(x, y) ∧ ¬ψ(x)`.

2. **Transformation:**
   - **{ρ}[addRole(xri) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeR(x)` with `scopeR(x) ∨ ψ(x)`.

3. **Transformation:**
   - **{ρ}[rmRole(xr) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeR(x)` with `scopeR(x) ∧ ¬ψ(x)` and every instance of `playsRole(x, y)` with `playsRole(x, y) ∧ ¬ψ(y)`.

4. **Transformation:**
   - **{ρ}[addObj(xoi) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeO(x)` with `scopeO(x) ∨ ψ(x)`.

5. **Transformation:**
   - **{ρ}[rmObj(xoi) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeO(x)`, `(x, y) ∈ subPerm(z)`, and `(x, y) ∈ rolePerm(z)` with `scopeO(x) ∧ ¬ψ(x)`, `(x, y) ∈ subPerm(z) ∧ ¬ψ(x)`, and `(x, y) ∈ rolePerm(z) ∧ ¬ψ(x)`, respectively.

6. **Transformation:**
   - **{ρ}[addAct(xai) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeA(x)` with `scopeA(x) ∨ ψ(x)`.

7. **Transformation:**
   - **{ρ}[rmAct(xai) ← ψ]{φ}**:
     Here, ρ is obtained from φ by replacing every instance of `scopeA(x)`, `(x, y) ∈ subPerm(z)`, and `(x, y) ∈ rolePerm(z)` with `scopeA(x) ∧ ¬ψ(x)`, `(x, y) ∈ subPerm(z) ∧ ¬ψ(y)`, and `(x, y) ∈ rolePerm(z) ∧ ¬ψ(y)`, respectively.

#### Proof Rules

1. **Sequential Composition:**
   \[
   \frac{\{ψ\}p1\{ρ\}, \{ρ\}p2\{φ\}}{\{ψ\}(p1; p2)\{φ\}}
   \]
   \[
   \frac{σ → ψ, \{ψ\}p\{φ\}, φ → ρ}{\{σ\}p\{ρ\}}
   \]

2. **Non-deterministic Choice:**
   \[
   \frac{\{ψ\}p1\{φ\}}{\{ψ\}(p1 \sqcup p2)\{φ\}}, \quad \frac{\{ψ\}p2\{φ\}}{\{ψ\}(p1 \sqcup p2)\{φ\}}
   \]

3. **Conjunction:**
   \[
   \frac{\{ψ\}p1\{φ\}, \{ψ\}p2\{φ\}}{\{ψ\}(p1 \land p2)\{φ\}}
   \]

4. **Disjunction:**
   \[
   \frac{\{ψ\}p1\{φ\}}{\{ψ\}(p1 \lor p2)\{φ\}}
   \]

5. **Precondition Strengthening:**
   \[
   \frac{\{ψ\}p\{φ\}}{\{ψ\}(θ :: p)\{φ\}}
   \]

6. **Postcondition Weakening:**
   \[
   \frac{\{ψ\}p\{φ\}}{\{ψ\}(p :: θ)\{φ\}}
   \]

7. **Induction:**
   \[
   \frac{\{ψ\}p\{φ\}, \text{If } \{ψ\}p^n\{φ\} \text{ then } \{ψ\}p^{n+1}\{φ\}}{\{ψ\}p^*\{φ\}}
   \]

### Lemma 1 (HPC is Sound)
The axiom schema and proof rules given for HPL are sound.
- **Proof:** See the Appendix.

### Comparison with Imperative Programs
To understand the proposed axiom schema for HPL, compare it with the corresponding axiom schema used for the assignment statement `(x := t)` in verifying imperative programs. Specifically, `{φ(t/x)}(x := t){φ}`. Notice that `φ(t/x)` evaluates the postcondition φ in the pre-state with the only change being the variable `x` taking the value `t`. In comparison, executing `{ρ}[assignP(xsi, xoj, xak) ← ψ(xsi, xoj, xak)]{φ}` changes all those permission sets of subject `si` that satisfy `ψ(si, xoj, xak)` by adding all permissions that satisfy `ψ`. The only effect this change could have on evaluating `φ` in the pre-state is if a truth value had to be evaluated for an instance of the formula `(y, z) ∈ subPerm(x)`. Therefore, if every such formula is augmented with `scopeO(y) ∧ scopeA(z) ∧ ψ(x, y, z)`, then it should evaluate to the same truth value if `φ` was to be evaluated in the post-state. This preserves the intent and spirit of the axiom schema from imperative program verification literature but adapts it to the context of our application where assignments are sets of individuals satisfying a formula.

### Application Example
Consider the process of deducing necessary consistency of `assignP(xsi, xoj, xak) ← (cid:29)) (cid:16) p` for any policy `p`. According to Axiom Schema 1, `assignP(xsi, xoj, +xak) ← (cid:29)) (cid:16) p` is consistent for any application-dependent definition of consistency provided it does not involve the `conUsr, conPerm` predicates. Hence, according to the third rule, `assignP(xsi, xoj, xak) ← (cid:29)) (cid:16) p` is necessarily consistent.

### Conclusions
In this paper, we extended the access policy composition algebra of [21, 22] to the predicate case. We introduced a many-sorted first-order logic as the base language and some atomic policies. These atomic policies model assignments and removal of permissions from subjects and roles, assignments of roles to subjects, and addition/removal of subjects, objects, actions, and roles. These represent common operations involved in providing access control.

These atomic policies, together with previously introduced external and internal operators in [22], form our policy algebra. External operators represent automata-theoretic operators on policies, such as `∪, ∩, −, ;, and (cid:22)`. Internal operators are used to merge access permissions either subject-wise or role-wise. As for expressibility, we have shown that our algebra is capable of defining many known meta-policies used in access control and RBAC.

We have also shown that many notions of consistency and completeness used in access control policies are definable as many-sorted first-order sentences. In this respect, we have shown that it is not necessary to use the full expressive power of second-order logic to reason about or specify RBAC policies. The advantage here is that it is now possible to specify and verify the same properties with far less complicated logical machinery.

Given that many notions of consistency and completeness used in access control policies are definable as many-sorted first-order sentences, we have developed a Hoare Logic and a corresponding Hoare calculus for our policy algebra. The current version is limited to properties necessary for all possible end states due to the application of a policy. Ongoing work addresses extending this logic for other operators, relative completeness of the Hoare Policy Logic, and extending our formalism to a more general reasoning system along the lines of dynamic logic [11].

### References
[1] G.-J. Ahn and R. Sandhu. Role-based authorization constraints specification. ACM Transactions on Information and Systems Security, 3(4), November 2000.
[2] B. Alpern and F. B. Schneider. Defining liveness. Information Processing Letters, 21(4):181–185, October 1985.
[3] B. Alpern and F. B. Schneider. Recognizing safety and liveness. Distributed Computing, 2:117–126, 1987.
[4] Y. Bai and V. Varadarajan. A logic for state transformations in authorization policies. In Proc. 10th IEEE Computer Security Foundations Workshop, pages 173–182, 1997.
[5] J. Barwise and S. Fefferman. Model Theoretic Logics. Springer-Verlag, 1985.
[6] P. Bonatti, S. De Capitani di Vimercati, and P. Samarati. A modular approach to composing access control policies. In Proc. 7th ACM Conf. on Communications and Security, pages 164–173, August 2000.
[7] S. A. Cook. Soundness and completeness of an axiom system for program verification. SIAM Journal on Computing, pages 79–90, 1978.
[8] J. Dobson and J. McDermid. A framework for expressing models of security policy. In Proceedings of IEEE Symposium on Security and Privacy, pages 229–239, May 1989.
[9] H. B. Enderton. Mathematical Introduction to Logic. Harcourt Academic Press, 2001.
[10] D. Gries. The Science of Programming. Springer-Verlag, 1981.
[11] D. Harel, D. Kozen, and J. Tiuryn. Dynamic Logic. MIT Press, 2000.
[12] S. Jajodia, E. Bertino, and P. Samarati. A flexible authorization mechanism for relational data management. ACM Transactions on Information Systems, 17(9):01–140, 1999.
[13] S. Jajodia, P. Samarati, M. L. Sapino, and V. S. Subrahmanian. Flexible support for multiple access control policies. ACM Transactions on Database Systems, 26(2):214–260, June 2001.
[14] J. Loeckx, K. Sieber, and R. Stansifer. The Foundations of Program Verification. John Wiley and Sons, 1987.
[15] J. McLean. A general theory of composition for trace sets closed under selective interleaving functions. In Proc. IEEE Symp. on Security and Privacy, pages 79–93, Oakland, CA, May 1994.
[16] J. McLean. A general theory of composition for a class of "possibilistic" properties. IEEE Transactions on Software Engineering, 22(1):53–67, January 1996.
[17] J. McLean. Algebra of security. In Proc. IEEE Symp. on Security and Privacy, pages 2–7, Oakland, CA, May 1998.
[18] R. Sandhu and P. Samarati. Access control: Principles and practices. IEEE Communications, 29(2):38–47, 1996.
[19] R. S. Sandhu, V. Bhamidipati, and Q. Munawer. The ARBAC97 model for role-based administration of roles. ACM Transactions on Information and System Security, 1(2):106–135, February 1999.
[20] F. B. Schneider. Enforceable security policies. Technical Report TR 98-1664, Department of Computer Science, Cornell University, 1998.
[21] D. Wijesekera and S. Jajodia. Policy algebras for access control - the propositional case. In Proceedings of the Eighth ACM Conference on Computer and Communications Security, November 2001.
[22] D. Wijesekera and S. Jajodia. Propositional policy algebras for access control. ACM Transactions on Information and System Security, 2001.