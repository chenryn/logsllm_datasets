We generated 109 guesses, successfully matching several passwords that would require up to 1014 iterations using FLA (and other methods) to produce an equivalent result.

(a) Probability according to the training set
(b) Probability according to the attack set
(c) Guess number according to the training set

**Figure 7.** Cumulative statistics for a guessing attack on phpbb. The figures show the number of passwords guessed within the first 109 guesses for both static and dynamic approaches.

*Authorized licensed use limited to: Tsinghua University. Downloaded on February 25, 2022, at 12:27:44 UTC from IEEE Xplore. Restrictions apply.*

---

### Example of Peculiar Passwords Guessed via DPG for Four Password Leaks

The required numbers of guesses (i.e., G) are reported for both FLA and our DPG. These passwords were obtained by ordering all the guessed passwords of the DPG attacks in Table V in decreasing order based on the guess-number assigned by FLA. The table reports the first 15 entries for each leak.

| **LinkedIn** | **Youku** | **Zomato** | **phpbb** |
|--------------|-----------|------------|-----------|
| **Guess**    | **FLA G** | **DPG G**  | **Guess** | **FLA G** | **DPG G**  | **Guess** | **FLA G** | **DPG G**  | **Guess** | **FLA G** | **DPG G**  |
| o2linkedln   | 8.2 · 1015 | 3.4 · 109  | guoxuange2 | 2.5 · 1015 | 3.2 · 109  | z0mato2016 | 1.9 · 1014 | 4.5 · 108  | phpbb3.14 | 2.1 · 1014 | 2.4 · 108  |
| w2linkedln   | 6.3 · 1015 | 3.1 · 109  | xuhaidong7 | 1.7 · 1015 | 3.9 · 109  | z0mato2015 | 1.5 · 1014 | 7.7 · 108  | phpbb0472 | 2.1 · 1013 | 6.5 · 108  |
| ydlinkedln   | 3.6 · 1015 | 3.6 · 109  | caoxia521. | 1.3 · 1015 | 3.5 · 109  | zomato9a00 | 1.2 · 1014 | 7.8 · 108  | phpbb4s2  | 2.0 · 1013 | 4.8 · 108  |
| linked6in6   | 3.6 · 1015 | 4.3 · 109  | woailc521. | 9.6 · 1014 | 3.7 · 109  | 2defd0     | 7.3 · 1013 | 5.1 · 108  | phpbb7825 | 1.3 · 1013 | 4.2 · 108  |
| j*linkedln   | 3.0 · 1015 | 4.3 · 109  | woyijiu521 | 7.3 · 1014 | 3.5 · 109  | zomat 997  | 4.0 · 1013 | 1.0 · 109  | phpbbid12 | 1.0 · 1013 | 1.2 · 108  |
| linked!in.   | 2.8 · 1015 | 4.8 · 109  | woaicyhx0  | 6.5 · 1014 | 3.3 · 109  | 3aee0f     | 3.8 · 1013 | 8.1 · 108  | phpbb8424 | 9.9 · 1012 | 1.1 · 108  |
| wslinked1n   | 2.6 · 1015 | 4.4 · 109  | xuhaidong1 | 6.4 · 1014 | 3.9 · 109  | zomato 496 | 3.5 · 1013 | 8.0 · 108  | phpbb3546 | 8.0 · 1012 | 1.3 · 108  |
| linkedgcin   | 2.5 · 1015 | 2.1 · 109  | woaiﬁy520  | 6.4 · 1014 | 3.8 · 109  | zomato 443 | 3.4 · 1013 | 1.1 · 109  | phpbb4291 | 7.2 · 1012 | 1.0 · 108  |
| linked6in2   | 1.4 · 1015 | 5.6 · 109  | yishwng521 | 5.3 · 1014 | 3.7 · 109  | zomato.921 | 3.2 · 1013 | 1.1 · 109  | phpbb8686 | 5.5 · 1012 | 1.4 · 108  |
| lslinkedln   | 1.4 · 1015 | 4.5 · 109  | woshiqujie | 5.1 · 1014 | 3.0 · 109  | zomato 591 | 3.1 · 1013 | 1.1 · 109  | phpbb9801 | 5.4 · 1012 | 2.0 · 108  |
| wtlinkedln   | 1.3 · 1015 | 4.5 · 109  | yixuan520. | 5.0 · 1014 | 3.8 · 109  | zomato 543 | 3.1 · 1013 | 1.0 · 109  | phpbb1902 | 4.5 · 1012 | 2.3 · 108  |
| 9auiirji     | 1.2 · 1015 | 5.5 · 109  | slllong520 | 5.0 · 1014 | 3.2 · 109  | 0def0a     | 3.0 · 1013 | 4.5 · 108  | phpbb5682 | 4.5 · 1012 | 1.7 · 108  |
| g2linkedln   | 1.2 · 1015 | 3.4 · 109  | woaifuyao  | 4.9 · 1014 | 1.4 · 109  | zomato 441 | 2.9 · 1013 | 1.1 · 109  | sksdbles  | 3.8 · 1012 | 1.2 · 108  |
| cslinkedln   | 1.1 · 1015 | 4.4 · 109  | woshiqutao | 4.7 · 1014 | 2.4 · 109  | zomato 948 | 2.9 · 1013 | 1.1 · 109  | phpbb1298 | 3.8 · 1012 | 1.8 · 108  |
| ymlinkedln   | 1.0 · 1015 | 5.2 · 109  | liu19981.6 | 4.6 · 1014 | 1.3 · 109  | zomato 376 | 2.8 · 1013 | 1.2 · 109  | phpbb2625 | 3.2 · 1012 | 1.1 · 108  |

We replicated the same analysis on different password leaks, observing the same general behavior. We reported high-guess-number passwords for those other sets as additional examples in Table V. The listed guesses in the table provide a clear intuition about the nature of such peculiar passwords, which are induced by unique biases in the attacked distribution. Notably, passwords based on the names of web services dominate the table, as they are univocally bound to the specific password distribution. More heterogeneous guesses can be observed in the row dedicated to the Youku leak, where DPG captured passwords composed of peculiar dictionary entries not well represented in the training set (i.e., RockYou).

Additionally, the guess-numbers reported in Table V indicate that these are passwords considered secure by state-of-the-art tools but can be easily guessed through DPG. Our experiments show that DPG allows us to guess passwords that are unique to the attacked password set. Such passwords, given their arbitrary distance from the general password distribution, can only be soundly guessed by leveraging additional sources of information over the attacked password space. DPG distills this necessary knowledge directly through an unsupervised interaction with the attacked set, allowing the guessing attack to automatically focus on unique modalities of the target password distribution that would otherwise be under-represented or ignored.

### Related Work

Systematic studies on password guessing date back to 1979 [44], and password guessing attacks have likely existed since the inception of passwords [19]. Given the vast number of works in this active area of research, we limit our discussion to the most relevant contributions and solutions closely related to our proposals.

Dictionary-based attacks and their extensions were among the first elegant guessing techniques, as opposed to brute-forcing. Among dictionary attacks, the extension with mangling rules [44] demonstrated its effectiveness in the trawling attack scenario [2]. Despite its simplicity, this approach persists today in the form of highly tuned off-the-shelf software like John The Ripper (JTR) [7] and HashCat [3]. Due to their efficiency and easy customization, these tools are the primary weapons of professional security practitioners [53].

Subsequently, probabilistic approaches found their application in the password guessing domain. Narayanan et al. [45] applied a Markovian filter to drastically reduce the search space of a guessing attack. Dürmuth et al. [27] extended this approach by introducing an improved version of the guesses enumeration algorithm in OMEN. Weir et al. [56] introduced Probabilistic Context-Free Grammars (PCFGs) in the password guessing domain, proposing a technique capable of inferring grammars from a set of observed passwords and using them to generate new password guesses.

Ciaramella et al. [22] introduced neural networks for password guessing in their seminal work. In the same line of development, Melicher et al. [42] proposed FLA (Fast, Lean, and Accurate), which uses recurrent neural networks [32, 50] to estimate the password distribution. This model follows the same estimation procedure as Markov models but relaxes the underlying n-Markovian assumption. FLA can generate new guesses by performing an enumeration of the password space via a tree traversal algorithm.

Similarly to our conditional generation framework, different works have focused on creating specific classes of password variations for a given starting password [46, 23, 55], primarily to model credential tweaking attacks. Credential tweaking is a targeted attack where the adversary knows the targeted user’s credentials for one or more services and attempts to compromise accounts of the same user on other services. Unlike credential stuffing, here the user’s passwords are supposed to be "tweaked" versions of the known ones. In this direction, Pal et al. [46] proposed novel attack/defense techniques for credential tweaking. Both the attack and defense techniques are built on the concept of password similarity. They modeled a specific form of semantic similarity using a supervised dataset of user-password pairs, assuming the distributional hypothesis for passwords to be true. Their technique is based on constructing an embedding space to estimate the similarity between chosen passwords, which is then used to build a "personalized password strength meter" to spot the use of a tweaked password at creation time. In contrast to our password representation, their embedding space does not allow for sampling operations and password generation.

### Conclusion and Future Works

We presented a complete paradigm shift in the task of password guessing, orthogonal to current research directions. We demonstrated that locality principles imposed by the latent representation of deep generative models open new practical and theoretical possibilities in the field. Based on these properties, we propose two new password guessing frameworks: CPG and DPG. The CPG framework enables the conditional generation of arbitrarily biased passwords, and we empirically demonstrated its inherent advantages over well-established state-of-the-art approaches. The DPG framework shows that knowledge from freshly guessed passwords can be successfully generalized and used to mimic the target password distribution. More importantly, this guessing technique allows the generation of passwords that are peculiar to the attacked password distribution and would require an impractical effort to be guessed by other guessers.

### Availability

The code, pre-trained models, and other materials related to our work are publicly available at [5].

### References

[1] “Chinese Video Service Giant Youku Hacked; 100M Accounts Sold on Dark Web”. https://tinyurl.com/yb78uxnh.
[2] “Cracking Passwords 101”. https://tinyurl.com/y268xahe.
[3] “hashcat”. https://tinyurl.com/y636jsz9.
[4] “Hotmail Password Leak”. https://tinyurl.com/yyr2je4m.
[5] “Improving Password Guessing via Representation Learning”. https://github.com/pasquini-dario/PLR.
[6] “InsidePro-PasswordsPro Rules”. https://tinyurl.com/vd9jzaz.
[7] “John the Ripper”. https://tinyurl.com/j91l.
[8] “Leak Youku”. https://tinyurl.com/y9f2xez6.
[9] “LinkedIn Password Leak”. https://tinyurl.com/yxf7f5gv.
[10] “MySpace Password Leak”. https://tinyurl.com/y433aaah.
[11] “phpbb Password Leak”. https://tinyurl.com/yxonf7um.
[12] “RockYou Password Leak”. https://tinyurl.com/af858jc.
[13] “The Carnegie Mellon University Password Research Group’s Password Guessability Service”. https://tinyurl.com/y9362h6z.
[14] “Zomato hacked: Security breach results in 17 million user data stolen”. https://tinyurl.com/y8xec7sr.
[15] “Zomato Password Leak”. https://tinyurl.com/ya3sthdp.
[16] Kamran Ali, Alex X Liu, Wei Wang, and Muhammad Shahzad. Keystroke Recognition Using WiFi Signals. In ACM MobiCom, pages 90–102, 2015.
[17] Davide Balzarotti, Marco Cova, and Giovanni Vigna. Clearshot: Eavesdropping on Keyboard Input from Video. In IEEE S&P, pages 170–183, 2008.
[18] Yoshua Bengio, Aaron Courville, and Pascal Vincent. Representation Learning: A Review and New Perspectives. IEEE Transactions on Pattern Analysis and Machine Intelligence, 35(8):1798–1828, 2013.
[19] Hossein Bidgoli. Handbook of Information Security, Information Warfare, Social, Legal, and International Issues and Security Foundations, volume 2. John Wiley & Sons, 2006.
[20] Samuel R. Bowman, Luke Vilnis, Oriol Vinyals, Andrew Dai, Rafal Jozefowicz, and Samy Bengio. Generating sentences from a continuous space. In Proceedings of The 20th SIGNLL Conference on Computational Natural Language Learning, pages 10–21, Berlin, Germany, August 2016. Association for Computational Linguistics.
[21] Andrew Brock, Jeff Donahue, and Karen Simonyan. Large Scale GAN Training for High Fidelity Natural Image Synthesis. arXiv preprint arXiv:1809.11096, 2018.
[22] Angelo Ciaramella, Paolo D’Arco, Alfredo De Santis, Clemente Galdi, and Roberto Tagliaferri. Neural Network Techniques for Proactive Password Checking. IEEE Transactions on Dependable and Secure Computing, 3(4):327–339, 2006.
[23] Anupam Das, Joseph Bonneau, Matthew Caesar, Nikita Borisov, and XiaoFeng Wang. The Tangled Web of Password Reuse. In NDSS Symposium, pages 1–15, 2014.
[24] Peter J Diggle and Richard J Gratton. Monte Carlo Methods of Inference for Implicit Statistical Models. Journal of the Royal Statistical Society: Series B (Methodological), 46(2):193–212, 1984.
[25] Jeff Donahue, Philipp Krähenbühl, and Trevor Darrell. Adversarial Feature Learning. arXiv preprint arXiv:1605.09782, 2016.
[26] Vincent Dumoulin, Ishmael Belghazi, Ben Poole, Olivier Mastropietro, Alex Lamb, Martin Arjovsky, and Aaron Courville. Adversarially Learned Inference. arXiv preprint arXiv:1606.00704, 2016.
[27] Markus Dürmuth, Fabian Angelstorf, Claude Castelluccia, Daniele Perito, and Abdelberi Chaabane. OMEN: Faster Password Guessing using an Ordered Markov Enumerator. In ESSoS, pages 119–132, 2015.
[28] Maximilian Golla and Markus Dürmuth. On the Accuracy of Password Strength Meters. In ACM CCS, pages 1567–1582, 2018.
[29] Ian Goodfellow. NIPS 2016 Tutorial: Generative Adversarial Networks.