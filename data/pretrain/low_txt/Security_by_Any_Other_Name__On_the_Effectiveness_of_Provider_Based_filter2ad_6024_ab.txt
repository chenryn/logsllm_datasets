### Verification and Security of DKIM Signatures

A DKIM (DomainKeys Identified Mail) signature must be verified using a public key published in the TXT record of `selector._domainkey.example.net`, where `selector` is a token provided with the signature. An attacker who can forge the TXT record retrieved by the verifying server could generate a valid signature for another domain. The integrity of DNS responses can be secured using DNSSEC (Domain Name System Security Extensions). If the sending provider uses DNSSEC, the receiving provider can securely obtain the DKIM signing key or receive signed confirmation that a record does not exist. The combination of DKIM and DNSSEC can thus defend against the forgery of signed messages.

If an attacker omits the DKIM signature, the receiver must determine whether the message is a forgery or whether the legitimate sender for the domain does not use DKIM. Two mechanisms exist to address this: Author Domain Signing Practices (ADSP) and Domain-based Message Authentication, Reporting, and Conformance (DMARC). Both allow a provider to publish its message signing policy and requested treatment.

Message authenticity can also be ensured using TLS (Transport Layer Security) client authentication, although we are not aware of any providers relying on this mechanism in submission, delivery, or provider-to-provider transport.

### Integrity Protection

In the absence of any protection, an active attacker can modify a mail message at any point along its path. DKIM signatures can protect messages from tampering in transit. However, this requires DNSSEC if an attacker can tamper with the receiving provider’s DNS traffic.

### Enforcement and Spam Prevention

Both SPF (Sender Policy Framework) and DKIM were developed primarily to combat spam. By impersonating a user at a large provider, a spammer could improve their delivery rate; DKIM and SPF prevent such forgery. In this role, both SPF and DKIM are regarded as signals to a spam filter that the incoming message is legitimate. All other things being equal, a message with a DKIM signature should be less likely to be identified as spam than one without.

However, limited adoption of DKIM makes it inadvisable for receivers to place too much weight on the results of DKIM signature verification. ADSP and DMARC provide a means for a provider to advertise its mail authentication policy. However, until they are widely adopted, a receiver will have no way of positively determining that a message from a provider should be signed. An alternative to ADSP and DMARC is for providers to bilaterally disseminate their signing policies to each other. With explicit agreement, DKIM signing policies can be enforced more aggressively. For example, GMail will not accept email from eBay or PayPal if it is not signed.

### Implications

We have argued that TLS with server certificate checking and DKIM with DNSSEC can secure email against even an active network attacker. Table 1 summarizes the minimum requirements for each security property and class of attacker. Specifically, TLS must be used with server certificate verification, and DKIM must be used with DNSSEC to protect against an active adversary. In the absence of bilateral inter-provider agreements, sending providers should publish a signing policy, and receiving providers should not accept unsigned or incorrectly signed mail from providers advertising a policy of signing all outgoing mail.

So far, we have considered the ideal case, where security guarantees can be made in the presence of a network adversary if TLS, DKIM, and DNSSEC are used correctly with an aggressive enforcement policy. In the remainder of this paper, we examine what actually happens. The following section describes our measurement methodology, and the subsequent section details our results, including the deployment of the above protocols, whether providers use them correctly, and whether they enforce their correct use.

### Methodology

In this section, we describe our measurement methodology. The subjects of our study are email providers and major services that generate email (e.g., e-commerce and online social networks). For each subject, we determined how each of the security protocols in question was used.

Our measurement methods can be divided into two categories: those that could be fully automated and scaled easily, and those that required some manual interaction. For the latter, we used a set of 302,938 major email providers and email generators, while for the former, we used a much larger set of a million popular providers occurring in the Adobe leak and the Alexa top million websites (as potential email generators).

To determine whether email sent between these services is protected from a network attacker, we experimentally determined if each hop along the message path is properly secured. For hops that are externally accessible, namely MUA to MSA, MTA to MTA, and MDA to MUA, denoted (a), (c), and (e) in Figure 1, we interacted with the endpoints directly to determine their TLS behavior. For hops internal to a provider, we relied on information reported in the Received mail headers. Our data consists of two measurement experiments about a year apart (March 2014 and February 2015), giving us a view into the changes in TLS use.

### Subject Selection

For our conclusions to be useful, the set of message paths we analyze should be broadly representative of the message paths seen in the global email system. The ideal case would be a set of paths formed by uniformly sampling message paths on the Internet. Unfortunately, this is impossible in practice. To approximate the ideal sample, we compiled a list of popular email providers and email-generating services. We then used fragments of message paths originating or terminating at these services to piece together a complete picture of possible message paths between them. For verification, a subset of these paths were materialized explicitly, as described in Section 5.3.

#### Path Uniqueness

The path taken by a message between a given sender and recipient is not unique due to load balancing and email infrastructure evolution. However, at a given time, we found message paths to be stable with respect to TLS use characteristics. Characteristics of TLS use along the path did not change during the measurement period. We note where this was not the case in our analysis.

#### Provider List

We created the set of popular email providers based on the top 1 million email address domains occurring in the leaked Adobe user data set of September 2013. A number of large providers may service more than one domain name; for example, `hotmail.com` and `outlook.com` are domains used by Microsoft’s Outlook.com. We grouped such domains into a single service based on the incoming MTAs for the domain. Specifically, for each domain, we retrieved its DNS MX records. Not all domains had MX records, and some had more than one. (If there was no MX record, we took the domain name itself as the incoming MTA address, per RFC 5321.) We then resolved all host names to arrive at a set of IP addresses of incoming MTAs servicing a domain. Any domains with at least one common IP address were grouped into a single service. We call the resulting list the provider list.

Some of the experiments required manual interaction with a service. For these, we took 22 of the top providers from the Adobe provider list with which we were able to create an account. In particular, experiments where we acted as the receiving provider required us to send a message from a provider to ourselves, a process that required non-trivial manual effort. We call this the Select provider list. Table 2 shows these 22 providers in order of their popularity in the leaked Adobe user list. As described above, some of the providers service multiple domains; such providers are identified with their primary domain, and their indicated popularity includes the contribution of all the domains they service. For example, `hotmail.com` includes `live.com` and `outlook.com`, and `yahoo.com` includes many regional Yahoo! domains serviced by the main Yahoo! mail servers. We note that `yahoo.co.jp` and `yahoo.co.in` are not served by the same MTAs as `yahoo.com`.

#### Generator List

Much of the email we receive in our inboxes is generated automatically, including e-commerce order confirmations, updates from online social networks, and so on. We created a list of such email generators by attempting to create an account with each service in the Alexa Top 100 list. We succeeded in doing so for 61 of these services. We also created a short list of organizations or services not on the Alexa 100 that we believed might warrant additional email confidentiality and from which we were able to generate an email message. We call these services the Generator list, shown in Table 4.

### Incoming MTA Behavior

For TLS to be used on a SMTP hop along the message path, both the client and server must support TLS. We interacted with the incoming MTAs of providers on the provider list to determine whether they supported TLS and with what options. Incoming MTAs were identified by retrieving the MX records for each provider’s domains. If a domain did not have any MX records, which happened with 0.43% of domains, we used the domain name itself as the incoming MTA, as specified in RFC 5321. For each incoming MTA thus identified, the interaction ran as follows:

1. **Connect**: We resolved the SMTP server host name to an IPv4 address and opened a connection on port 25. The initial connection step failed for 7.89% of servers.
2. **EHLO**: We issued the EHLO command with the fully qualified domain name (FQDN) of our server per RFC 5321. If the server did not acknowledge the EHLO, we fell back to the HELO command and noted that the server did not support ESMTP. 0.85% of the incoming MTAs we contacted did not support ESMTP, accounting for 0.59% of all domains on the provider list.
3. **ESMTP Options**: Upon successful execution of the EHLO command, servers responded with a list of supported ESMTP options. For incoming MTAs, 44.98% of servers in this step supported the STARTTLS option, indicating that they could use TLS for the session.