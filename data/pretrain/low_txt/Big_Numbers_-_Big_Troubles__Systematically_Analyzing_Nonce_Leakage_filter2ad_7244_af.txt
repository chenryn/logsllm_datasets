### Nonce Vulnerability (V1) and Its Impact

Nonce vulnerability (V1) affects the same elliptic curves listed in Table 3. This vulnerability leaks whether the inverse nonce is one limb smaller than the modulus. Since the leakage of the inverse nonce is as dangerous as the leakage of the nonce itself, an attacker can exploit this to mount a key recovery attack similar to (V1). In response to our disclosure, LibreSSL fixed this issue in commits 1f6b35b and 159fbd1.

### Evaluation

#### Analysis Methodology

Investigating the leakage reports from DATA presents a chicken-and-egg problem. The results from the first phase of DATA cover all discovered differences (i.e., potential leaks), but these are cumbersome to analyze. Developing precise leakage models to filter these results requires an understanding of the nature of the leakage, which in turn demands some manual analysis of the phase one results. As described in Section 6, we concurrently followed both approaches. By manually analyzing the phase one results, we gained insights into the libraries. Although this method helped us find vulnerabilities related to k-padding and (V8), it is a tedious task. Therefore, we developed the `num_bits` leakage model to automatically detect k-padding leaks by capturing the bit length of \(k\), \(k + q\), and \(k + 2q\). We used this knowledge to search for other Bignumber-related leaks and included inverse nonces (\(k_{inv}\)) in our models. Our leakage models confirmed initial results and helped us discover more Bignumber-related vulnerabilities such as (V1), (V9), and (V10). Additionally, since `num_bits` correlates with the bit length rather than the word length of the nonce, we also found leakage on a byte granularity (V6) and window granularity (V7).

The choice of library configurations and algorithm parameters is crucial. For example, (V2) does not appear for DSA-160 on a 64-bit system, while 32-bit systems leak for all parameter sets. The choice of the modulus \(q\) is also essential in causing the leakage to show up. To confirm (V2) for ECDSA, we analyzed all ECDSA moduli offline and found that only Brainpool curves are vulnerable. Similarly, discovering and analyzing the leakage of small nonces (V1) required careful investigation of (V10). Both issues depend on ECDSA curve parameters that are slightly above a word boundary, leading us to specifically test the sect131r1 curve, which shows small nonces every fourth signature. Thus, we were able to find numerous instances of (V1) in the code with the help of our tool and generalize these results to other curves. For secp521r1, the (V1) vulnerability only appears every 512th signature on average, which cannot be easily discovered by DATA within a reasonable time.

#### Leakage Models

We evaluated the leakage models on OpenSSL 1.1.1, BoringSSL (chromium-stable commit 2e0d354), and LibreSSL 3.0.0. We used GCC 6.3.0, tested DATA phase one with 16 traces, and phase three with 200 traces. Table 6 summarizes our results. We benchmarked different configurations to trigger all major vulnerabilities and counted all potential leaks (differences, or Diffs) found by the original DATA phase one. For each implemented leakage model, we printed the maximum correlation, which reveals the strongest leak found by a leakage model. To capture how often leakage models match, the last three columns represent the overall reduction of phase one when filtered by the models. Specifically, we discarded leaks with less correlation than the thresholds of 1%, 50%, and 100%. For example, the 100% threshold only preserves leaks that fully match the model.

- **LibreSSL sect131r1**: Leaks small nonces via the `num_bits` model on \(k\) in several places with 100% correlation. Additionally, LibreSSL uses leaky Euclidean inversion for ECDSA, resulting in 100% leakage for `num_bits(k_{inv})`. Since LibreSSL does not work with so-called heap tracking of DATA phase one, it has over 1000 differences, most of which are filtered by our leakage models. Thus, the overall reduction is over 90%.

- **OpenSSL DSA-256**: The leaky k-padding addition (Listing 2, line 14) is captured by the `num_bits` models on \(k + q\) and \(k + 2q\), showing 100% correlation. The corresponding leaky resize operation influences the heap layout and causes several subsequent Bignumber operations to leak via data accesses. Due to the high number of these actual data leaks, which are all instantiations of (V2), the reduction is around 25%.

- **OpenSSL secp521r1**: To trigger (V6), we compiled OpenSSL to use the optimized secp521r1 implementation. Indeed, `num_bits(k)` shows 100% correlation during conversion of the nonce buffer and during scalar multiplication, as this implementation is also vulnerable to (V7). We also triggered (V7) for BoringSSL, showing 100% correlation. Other leakage models remain insignificant, and the overall reduction is above 96%.

- **Hamming Weight Model (hw)**: The Hamming weight model did not show high correlation. DSA uses fixed window multiplication rather than square-and-multiply, for which hw is designed. ECDSA uses a blinded double-and-add by default, for which hw applies. However, the actual computation does not leak. To test the correctness of hw, we artificially introduced a conditional code execution during double-and-add, leaking the current nonce bit. Indeed, hw shows 100% on the padded nonce \(k + q\).

### Discussion

Proper tool support significantly improves side-channel analysis and facilitates the discovery of unknown weaknesses. However, tools do not fully discharge an analyst from thorough investigations. Knowledge of the nature of expected leakage is required to leverage tool support and interpret the results. Yet, we believe this is a valuable path to follow.

The process of vulnerability patching has been tedious in the past, as evidenced by numerous issues involving the `BN_FLG_CONSTTIME` flag [23, 24, 55]. Patching (V2) introduced new leakage in OpenSSL (V4) and LibreSSL (another instance of (V2) for ECDSA). We believe this is due to a lack of practical tools for developers to test their patches thoroughly. Fortunately, our tool uncovered both issues with little effort. Regression testing with respect to already discovered leakage is promising in this regard [25].

While most OpenSSL vulnerabilities were patched or are in the patching process, the issues (V1) and (V5) related to minimal Bignumbers (top) remain unpatched. The OpenSSL team decided to target a fix in version 3.0, as it requires a major redesign of their Bignumber primitives. According to [19], reworking Bignumber arithmetic in BoringSSL prior to this work took between one and two months. While BoringSSL immediately fixed (V7), LibreSSL only fixed (V10) and (V2) partially. We were also in contact with the vendors of libgcrypt, fixing (V2), and the ring library, fixing (V7) in their code, without further in-depth analysis.

Due to a change in their security policy in May 2019, OpenSSL no longer considers Flush+Reload attacks in their threat model, as they are mounted on the same physical system [41]. We see this downgrading as questionable, as it not only tempers efforts to analyze OpenSSL’s side-channel security but also undermines software relying on the previous threat model. For example, Intel SGX SSL [18] faces adversarial code on the same physical system by design. Additionally, vendors notified of (V2) by the CVE system were not notified of the equally dangerous (V1) due to this policy update [20].

In the long term, more compiler support with respect to side-channels is needed [49]. As of today, compilers might optimize constant-time code in a way that reintroduces side-channel leakage. Thus, a notion of side-channel invariants like constant-time guarantees is needed at the language level.

### Conclusion

In this work, we demonstrated that nonce leakage is far from being abandoned and requires attention from both academia and practitioners. For our systematic study, we extended the DATA framework to detect nonce leakage and developed an easy-to-use GUI. We found that having an intuitive GUI representation of the discovered leakage is imperative for productive analysis of complex reports. For example, it helped us easily determine whether a leaky function deeply nested in the call stack is given public or secret input. The visualization of leakage model results further helped to identify hotspots, especially if the number of potential leaks is large.

For OpenSSL and LibreSSL, we found numerous side-channel vulnerabilities leaking secret (EC)DSA nonce bits that allow full key recovery in many cases. These vulnerabilities mostly result from weaknesses in the underlying Bignumber implementation. We open-source our tools to help developers embrace and include them in their development and patching process.

### Acknowledgments

We thank our reviewers and our shepherd, Deian Stefan, for their helpful feedback. This work has been supported by the Austrian Research Promotion Agency (FFG) via the K-project DeSSnet, which is funded in the context of COMET – Competence Centers for Excellent Technologies by BMVIT, BMWFW, Styria, and Carinthia, via the competence center Know-Center (grant number 844595), which is funded in the context of COMET – Competence Centers for Excellent Technologies by BMVIT, BMWFW, and Styria, and via the project ESPRESSO, which is funded by the province of Styria and the Business Promotion Agencies of Styria and Carinthia.

### References

[1] Alejandro Cabrera Aldaya, Cesar Pereida García, Luis Manuel Alvarez Tapia, and Billy Bob Brumley. Cache-Timing Attacks on RSA Key Generation. IACR Trans. Cryptogr. Hardw. Embed. Syst., 2019:213–242, 2019.

[2] Thomas Allan, Billy Bob Brumley, Katrina E. Falkner, Joop van de Pol, and Yuval Yarom. Amplifying Side Channels Through Performance Degradation. Annual Computer Security Applications Conference – ACSAC’16, pages 422–435. ACM, 2016.

[3] Diego F. Aranha, Pierre-Alain Fouque, Benoît Gérard, Jean-Gabriel Kammerer, Mehdi Tibouchi, and Jean-Christophe Zapalowicz. GLV/GLS Decomposition, Power Analysis, and Attacks on ECDSA Signatures with Single-Bit Nonce Bias. Advances in Cryptology – ASIACRYPT’14, volume 8873 of LNCS, pages 262–281. Springer, 2014.

[4] László Babai. On Lovász’ Lattice Reduction and the Nearest Lattice Point Problem. Combinatorica, 6(1):1–13, 1986.

[5] Mihir Bellare, Shaﬁ Goldwasser, and Daniele Micciancio. "Pseudo-Random" Number Generation Within Cryptographic Algorithms: The DDS Case. Advances in Cryptology – CRYPTO’97, volume 1294 of LNCS, pages 277–291. Springer, 1997.

[6] Naomi Benger, Joop van de Pol, Nigel P. Smart, and Yuval Yarom. "Ooh Aah... Just a Little Bit": A Small Amount of Side Channel Can Go a Long Way. Cryptographic Hardware and Embedded Systems – CHES’14, volume 8731 of LNCS, pages 75–92. Springer, 2014.

[7] David Benjamin. BIGNUM Code is Not Constant-Time Due to bn_correct_top, 2018. OpenSSL Issue #6640, https://github.com/openssl/openssl/issues/6640.

[8] Daniel J. Bernstein, Joachim Breitner, Daniel Genkin, Leon Groot Bruinderink, Nadia Heninger, Tanja Lange, Christine van Vredendaal, and Yuval Yarom. Sliding Right into Disaster: Left-to-Right Sliding Windows Leak. Cryptographic Hardware and Embedded Systems – CHES’17, volume 10529 of LNCS, pages 555–576. Springer, 2017.

[9] Daniel Bleichenbacher. On the Generation of One-Time Keys in DL Signature Schemes. Presentation at IEEE P1363 Working Group Meeting, page 81, 2000.

[10] Dan Boneh and Ramarathnam Venkatesan. Hardness of Computing the Most Significant Bits of Secret Keys in Diffie-Hellman and Related Schemes. Advances in Cryptology – CRYPTO’96, volume 1109 of LNCS, pages 129–142. Springer, 1996.

[11] Dan Boneh and Ramarathnam Venkatesan. Rounding in Lattices and its Cryptographic Applications. Symposium on Discrete Algorithms – SODA’97, pages 675–681. ACM/SIAM, 1997.

[12] Jurjen N. Bos and Matthijs J. Coster. Addition Chain Heuristics. Advances in Cryptology – CRYPTO’89, volume 435 of LNCS, pages 400–407. Springer, 1989.

[13] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. Software Grand Exposure: SGX Cache Attacks Are Practical. Workshop on Offensive Technologies – WOOT’17. USENIX Association, 2017.

[14] Joachim Breitner and Nadia Heninger. Biased Nonce Sense: Lattice Attacks Against Weak ECDSA Signatures in Cryptocurrencies. Financial Cryptography – FC’19, 2019.

[15] Billy Bob Brumley and Risto M. Hakala. Cache-Timing Template Attacks. Advances in Cryptology – ASIACRYPT’09, volume 5912 of LNCS, pages 667–684. Springer, 2009.

[16] Billy Bob Brumley and Nicola Tuveri. Remote Timing Attacks Are Still Practical. European Symposium on Research in Computer Security – ESORICS’11, volume 6879 of LNCS, pages 355–371. Springer, 2011.

[17] Jo Van Bulck, Frank Piessens, and Raoul Strackx. SGX-Step: A Practical Attack Framework for Precise Enclave Execution Control. System Software for Trusted Execution – SysTEX, pages 4:1–4:6. ACM, 2017.

[18] Intel Corporation. Using the Intel Software Guard Extensions (Intel SGX) SSL Library. https://software.intel.com/en-us/sgx/resource-library, 2017.

[19] Paul Dale. Close Side Channels in DSA and ECDSA, 2019. OpenSSL Pull Request #8906, https://github.com/openssl/openssl/pull/8906.

[20] Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth, Daniel Genkin, Nadia Heninger, Ahmad Moghimi, and Yuval Yarom. CacheQuote: Efficiently Recovering Long-term Secrets of SGX EPID via Cache Attacks. IACR Trans. Cryptogr. Hardw. Embed. Syst., 2018:171–191, 2018.

[21] Shuqin Fan, Wenbo Wang, and Qingfeng Cheng. Attacking OpenSSL Implementation of ECDSA with a Few Signatures. Conference on Computer and Communications Security – CCS’16, pages 1505–1515. ACM, 2016.