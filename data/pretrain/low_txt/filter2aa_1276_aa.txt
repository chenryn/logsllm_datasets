### Bio

**About Me**

- **Affiliation:** VN Security (since 2009)
- **Weekend Activities:**
  - CTF Player
  - Weekend Gamer
- **Projects:**
  - Running [zxandora.com](http://zxandora.com) project.
  - Developing a brand new online sandbox (coming soon).

**Notable Achievements:**
- 2008: Hack In The Box CTF Winner
- 2010: Hack In The Box Speaker, Malaysia
- 2012: Codegate Speaker, Korea
- 2015: 
  - VXRL Speaker, Hong Kong
  - HITCON CTF, Prequal Top 10
- 2016: 
  - Codegate CTF, Prequal Top 5
  - Qcon Speaker, Beijing
- Contributions:
  - OSX Local Privilege Escalation
  - Code commit for Metasploit 3
  - GDB Bug Hunting
  - Metasploit Module
  - Linux Randomization Bypass
  - [GitHub: xwings/tuya](http://www.github.com/xwings/tuya)
  - Weibo: @kaijern
  - [vnsecurity.net](http://vnsecurity.net)

**Introduction**

- **Active CTF Player (CLGT)**
- **Frequent Conference Speaker:**
  - Blackhat USA
  - Tetcon
  - Hack In The Box
  - Xcon
- **Tools Developed:**
  - PEDA
  - Unicorn, Capstone, Keystone
  - Xandora
  - OllyDbg, Catcha!
  - ROPEME
- **Security Researcher:**
  - Active speaker at conferences
  - Research topics include Emulators, Virtualization, Binary Analysis, and Tools for Malware Analysis.

**Nationalities:**
- Vietnamese
- Malaysian
- Singaporean

**Talks and Workshops:**
- "When gdb meets peda"
- "Why KCON"
- "Fake Websites: What Are These Things?"
- "What Is a Disassembler?"
- "From binary to assembly code"
- "Disassembly Framework: Core part of all binary analysis, reverse engineering, debuggers, and exploit development"
- "Disassembler Engine: A lower layer in the stack of architecture"
- "Examples: 01D8 = ADD EAX,EBX (x86), 1169 = STR R1,[R2] (ARMâ€™s Thumb)"
- "What Is an Emulator?"
- "Software-only CPU Emulator: Focus on CPU operations, safe emulation environment, used in Antivirus"
- "What Is an Assembler?"
- "From assembly to machine code, supporting high-level concepts like macros and functions"

**Current Projects and Showcases:**
- **Tools and Frameworks:**
  - CEnigma, Unicorn, CEbot, Camal, Radare2, Pyew, WinAppDbg, PowerSploit, MachOview, RopShell, ROPgadget, Frida, The-Backdoor-Factory, Cuckoo, Cerbero Profiler, CryptoShark, Ropper, Snowman, X86dbg, Concolica, Memtools Vita, BARF, rp++, Binwalk, MPRESS dumper, Xipiter Toolkit, Sonare, PyDA, Qira, Rekall, Inficere, Pwntools, Bokken, Webkitties, Malware_config_parsers, Nightmare, Catfish, JSoS-Module-Dump, Vitasploit, PowerShellArsenal, PyReil, ARMSCGen, Shwass, Nrop, Illdb-capstone-arm, Capstone-js, ELF Unstrip Tool, Binjitsu, Rop-tool, JitAsm, OllyCapstone, PackerId, Volatility Plugins, Pwndbg, Lisa.py, and many more.
- **Showcase Examples:**
  - UniDOS: Microsoft DOS emulator.
  - Radare2: Unix-like reverse engineering framework and command-line tools.
  - Usercorn: User-space system emulator.
  - Unicorn-decoder: Shellcode decoder for self-modifying code.
  - Univm: Plugin for x64dbg for x86 emulation.
  - PyAna: Analyzing Windows shellcode.
  - GEF: GDB Enhanced Features.
  - Pwndbg: Python plugin for GDB to assist exploit development.
  - Eli.Decode: Decode obfuscated shellcodes.
  - IdaEmu: IDA Pro Plugin for code emulation.
  - Roper: Build ROP-chain attacks using genetic algorithms.
  - Sk3wlDbg: IDA Pro plugin for machine code emulation.
  - Angr: Framework for static & dynamic concolic (symbolic) analysis.
  - Cemu: Cheap EMUlator based on Keystone and Unicorn engines.
  - ROPMEMU: Analyze ROP-based exploitation.
  - BroIDS_Unicorn: Plugin to detect shellcode on Bro IDS with Unicorn.
  - UniAna: Analysis PE file or Shellcode (Only Windows x86).
  - ARMSCGen: ARM Shellcode Generator.
  - TinyAntivirus: Open-source antivirus engine for detecting & disinfecting polymorphic viruses.
  - Patchkit: Powerful binary patching toolkit.
  - Keypatch: IDA Pro plugin for code assembling & binary patching.
  - Pwnypack: Certified Edible Dinosaurs official CTF toolkit.
  - Keystone.JS: Emscripten-port of Keystone for JavaScript.
  - Usercorn: Versatile kernel+system+userspace emulator.
  - x64dbg: Open-source x64/x32 debugger for Windows.
  - Liberation: Next-generation code injection library for iOS.
  - Strongdb: GDB plugin for Android debugging.
  - AssemblyBot: Telegram bot for assembling and disassembling on-the-go.
  - demovfuscator: Deobfuscator for movfuscated binaries.
  - Dash: Web-based tool for working with assembly language.
  - Asm_Ops: Assembler for IDA Pro (IDA Plugin).
  - Binch: Lightweight ELF binary patch tool.
  - Metame: Metamorphic code engine for arbitrary executables.
  - Pymetamorph: Metamorphic engine in Python for Windows executables.

**Fundamental Frameworks for Reversing:**
- **Capstone:**
  - Components for a complete RE framework
  - Interchange between assembler and disassembler
  - Full CPU emulator for handling obfuscated code
- **Keystone:**
  - Multiple architectures: x86, ARM, ARM64, Mips, PPC, and more
  - Multiple platforms: Windows, Linux, OSX, and more
  - Multiple bindings: Python, Ruby, Java, C#, and more
  - Clean, simple, intuitive, and architecture-neutral API
  - Provides detailed breakdown of instructions
  - Friendly license: BSD
- **Unicorn:**
  - Full CPU emulator
  - Actively maintained and updated
  - Multiple architectures and platforms supported
  - Easy to set up and open-source

**Challenges and Solutions:**
- **Current Disassembler Issues:**
  - No comprehensive solution until 2013 (First release of Capstone Engine)
  - Lack of maintenance and industry support
- **Requirements:**
  - Multiple architectures: x86, ARM, ARM64, Mips, PPC, and more
  - Multiple platforms: Windows, Linux, OSX, and more
  - Multiple bindings: Python, Ruby, Java, C#, and more
  - Clean, simple, intuitive, and architecture-neutral API
  - Detailed instruction breakdown
  - Friendly license: Not GPL
- **Progress:**
  - Multiple architectures: x86, ARM
  - Actively maintained and updated
  - Multiple platforms: Windows, Linux
  - Supports Python and Ruby bindings
  - Friendly license: BSD
  - Easy to set up
  - Backed by major players: AMD, Apple, Google, Intel, IBM, ARM, Imgtec, Nvidia, Qualcomm, Samsung, etc.
  - Large community support

**Future Directions:**
- **LLVM Fork:**
  - Multiple architectures ready
  - In-disassembler (MC module)
  - Actively maintained by the original vendor from the architecture building company
  - Very actively maintained and updated by a large community
- **Challenges:**
  - Cannot reuse MC as-is without significant effort
  - LLVM code is in C++, but we want C code
  - Code mixed with lots of LLVM layers, making it difficult to extract

**Contact Information:**
- Nguyen Anh Quynh
- [Capstone Engine](http://www.capstone-engine.org)
- [GitHub: xwings](http://www.github.com/xwings)