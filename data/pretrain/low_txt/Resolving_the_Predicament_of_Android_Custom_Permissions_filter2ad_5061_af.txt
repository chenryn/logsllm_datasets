### APPENDIX

In our formal model, we update the representation of permissions to reflect our design decisions. First, we add a boolean field to the `Permission` Alloy signature to indicate whether a permission is custom or system-defined. Additionally, we introduce a `source id` field, which will be used during permission enforcement to uniquely identify permissions. For simplicity, we use the app signature rather than its hash in our formal model. The updated permission abstraction can be seen in Listing 8.

For app and component guards, Cusper performs name translation at runtime during enforcement. Listing 9 illustrates the component invocation operation, with the predicate in line 8 demonstrating how permission enforcement is handled according to Cusper. When a component is invoked, we retrieve the name of the corresponding app or component permission and perform a lookup to find the corresponding Cusper name (see line 11). Furthermore, we update the enforcement process so that when the system checks whether a calling app has the required permission to invoke a component, it uses both the permission name and the source ID (see line 14).

The `FLAG_PERMISSION_REVOKE_ON_UPGRADE` is set as shown in line 25 of Listing 10, which details how the `grantInstall` case is handled.

### B. Other Discovered Attacks

In addition to the attacks discussed in Section IV, we discovered another attack on Android custom permissions that exploits the lack of naming conventions for permissions to target benign apps [14].

As described in Section II, custom permissions can also be created dynamically via the Android APIs. In this attack, the adversary spoofs the dynamic custom permissions of the victim. This attack is currently reproducible only on older versions (Android <6) due to some issues in newer versions. Since our focus was on modeling the new versions of Android and we did not find strong evidence for the use of dynamic permissions by third-party developers, we did not address this attack in our work. However, it is worth presenting here as it highlights the extent of custom permission vulnerabilities and provides further evidence that Android custom permissions are problematic in their current state.

#### Steps to Produce the Attack

To carry out the dynamic custom permission attack, the adversary builds an app that statically declares a custom permission that the victim app plans to create dynamically via the `addPermission()` API method. This requires the static declaration of a permission tree with a specific domain name by the victim. The attack can only succeed if the attack app is installed before the victim app has a chance to dynamically create the permission. After this, the attack app can gain unfettered access to signature-protected components of the victim app, while the victim will no longer be able to dynamically create its own custom permission since it is already defined in the system.

#### Internals of the Attack

Android does not seem to perform any checks on the availability of permission names for statically defined custom permissions against the permission tree names on the device. An app can still statically declare a custom permission with the domain name of a permission tree declared by another app, even though the operation would fail if the app tried to declare this permission dynamically (i.e., it would throw a `SecurityException` stating the tree belongs to another app). The same name translation approach we presented in Cusper can be used for the names of permission trees to resolve this problem.

This attack works only on older Android versions (<6.0) because newer versions require `MANAGE_USERS` or `CREATE_USERS` permissions for the `addPermission()` API to function properly, although this behavior is not documented in the Android developer guides. We believe this might be an unintended behavior introduced by system developers while implementing the multi-user framework in Android. If this implementation changes, the dynamic custom permission spoofing vulnerability could re-emerge on Android 6.0 and onward.

### REFERENCES

[1] “Alloy: A language and tool for relational models.” http://alloy.mit.edu.
[2] “Android: Requesting permissions,” https://tinyurl.com/y8gp4dn6.
[3] “Android dashboard,” https://tinyurl.com/qfquw3s.
[4] “Android permissions.” https://tinyurl.com/y863owbb.
[5] “Android plugin application,” https://tinyurl.com/ycfd9pot.
[6] “Android users have an average of 95 apps installed on their phones, according to Yahoo Aviate data,” https://tinyurl.com/ybc7dqbn.
[7] “APKTool decompiler,” http://ibotpeaches.github.io/Apktool/.
[8] “Creating apps with plugin architecture,” https://tinyurl.com/ydfdk9z7.
[9] “Custom permission vulnerabilities.” https://tinyurl.com/y7yoae52.
[10] “Dex2jar.” https://github.com/pxb1988/dex2jar.
[11] “Google Cloud Messaging,” https://tinyurl.com/ybocrrqw.
[12] “JD-GUI.” http://jd.benow.ca/.
[13] “Privilege escalation by exploiting FCFS property of custom permissions,” https://issuetracker.google.com/issues/37131935.
[14] “Privilege escalation by exploiting permission trees and dynamic custom permissions,” https://issuetracker.google.com/issues/37324008.
[15] “Privilege escalation through custom permission update,” https://issuetracker.google.com/issues/37130844.
[16] “Program correctness, the specification,” https://tinyurl.com/y8r8cze8.
[17] “Resolving the predicament of Android custom permissions,” https://sites.google.com/view/cusper-custom-permissions/home.
[18] “Upload applications to Appaloosa,” https://tinyurl.com/y94pb3cv.
[19] “Yoga Guru,” https://tinyurl.com/yb3dqopp.
[20] H. Bagheri, E. Kang, S. Malek, and D. Jackson, “Detection of design flaws in the Android permission protocol through bounded verification,” in International Symposium on Formal Methods, 2015.
[21] G. Betarte, J. Campo, C. Luna, and A. Romano, “Verifying Android’s permission model,” in Theoretical Aspects of Computing, 2015.
[22] D. Bogdanas, N. Nelson, and D. Dig, “Analysis and transformations in support of Android privacy,” Tech. Rep., 2016.
[23] E. Chin, A. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-application communication in Android,” in MobiSys, 2011.
[24] Z. Fang, W. Han, D. Li, Z. Guo, D. Guo, X. Wang, Z. Qian, and H. Chen, “ReVDroid: code analysis of the side effects after dynamic permission revocation of Android apps,” in Asia CCS, 2016.
[25] A. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android permissions demystified,” in CCS, 2011.
[26] A. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin, “Permission re-delegation: and defenses.” in USENIX Security, 2011.
[27] K. Leino, “Dafny: An automatic program verifier for functional correctness,” in Logic for Programming AI and Reasoning, 2010.
[28] J. Sellwood and J. Crampton, “Sleeping Android: The danger of dormant permissions,” in SPSM, 2013.
[29] W. Shin, S. Kiyomoto, K. Fukushima, and T. Tanaka, “A formal model to analyze the permission authorization and enforcement in the Android framework,” in SocialCom, 2010.
[30] W. Shin, S. Kwak, S. Kiyomoto, K. Fukushima, and T. Tanaka, “A small but non-negligible flaw in the Android permission scheme,” in POLICY, 2010.
[31] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos, “Permission evolution in the Android ecosystem,” in ACSAC, 2012.
[32] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang, “Upgrading your Android, elevating my malware: Privilege escalation through mobile OS updating,” in IEEE Security and Privacy, 2014.
[33] Y. Zhauniarovich and O. Gadyatskaya, “Small changes, big changes: an updated view on the Android permission system,” in RAID, 2016.