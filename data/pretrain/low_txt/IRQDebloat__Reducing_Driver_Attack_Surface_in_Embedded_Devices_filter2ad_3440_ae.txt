### RiscOS

- **IRQ Handlers**: Some handlers, such as chained and default handlers, do not appear in our ground truth and would typically be considered false positives. However, we believe they can justifiably be considered real handlers.
  - **Chained Handlers**: These are virtual handlers that dispatch to more specific handlers. We do not consider them false positives because a user may want to use these handlers to disable multiple peripherals simultaneously. In some cases, there may be only a single sub-handler registered under a chained handler. In such instances, IRQDebloat will only find the top-level handler in the chain, but this is still considered a true positive since disabling the top-level handler will still disable the desired peripheral.
  - **Default Handlers**: These are statically registered by the OS as a fallback when no other handler is suitable. They do not appear in our ground truth but are found by our divergence analysis. Invalid IRQ numbers will diverge from valid IRQs, and we do not include these as false positives.

### False Positives and Negatives
- **False Negatives**:
  - **Sabre LITE Linux**: Two false negatives were missed during the fuzzing stage and do not appear in any trace.
- **False Positives**:
  - **Sabre LITE VxWorks**: Caused by internal callback functions inside specific IRQ handlers, specifically at `__udivmodsi4`, an LLVM compiler intrinsic for integer divide and modulus operations.
  - **Romulus Linux**: Two callback functions registered under its UART interrupt handler (serial8250 interrupt), which could invoke either `aspeed vuart handle irq` or `serial8250 default handle irq`.
  - **Steam Link Linux**: Caused by Linux softirq tasklets, which are callbacks scheduled by drivers and run at the end of IRQ handling in `irq_exit`.

While false positives are not ideal, they are not particularly harmful in our setting. A false positive means the user has one more handler to check, which simply involves booting the device and verifying if the unwanted peripheral has been disabled.

### IRQ Monitoring and Removal
To evaluate IRQ monitoring and removal on a real device, we used the results of our analysis to instrument three operating systems (Linux, FreeBSD, and RiscOS) running on a Raspberry Pi. We selectively disabled all discovered IRQ handlers on each operating system, as shown in Table V.

- **RiscOS**:
  - For the USB and Video IRQ handlers (indicated with a † in the table), we found that the handlers could not be disabled during boot. We used our instrumentation engine to add code that waits until the system has booted (using a simple counter) and then disables the handler at runtime.
  - "N/A" entries indicate that the OS does not register a handler for that device.
  - "A" entries indicate that the device cannot function properly with that IRQ disabled.

### Impact of Disabling IRQ Handlers
- **UART Disabled**: Loss of all input/output through the serial port, while other parts (HDMI, USB, etc.) remain unaffected.
- **USB Disabled**: Interaction through the serial port remains possible, but control from USB-connected devices (keyboard, mouse, etc.) and the Ethernet connection (internally connected to the USB bus on the Raspberry Pi) are lost.
- **Video Controller Interrupt (DMA) and Performance Monitoring Unit (PMU)**: No noticeable effect from disabling these.
- **Timer and Inter-Processor Interrupt (IPI)**: Essential for device functionality and cannot be disabled.

### Case Study: Bluetooth on the Steam Link
We used the Valve Steam Link to illustrate a real-world case of how IRQDebloat could reduce attack surface. The Steam Link is based on the Marvell Armada 1500-mini (MV88DE3108) SoC and streams games from a desktop PC to an external display via HDMI. It runs Linux and supports connectivity via WiFi, Bluetooth, and Ethernet.

- **Scenario**: A user who does not have any Bluetooth devices and wishes to disable this functionality to avoid Bluetooth exploits such as BleedingTooth.
- **Vulnerability**: The Steam Link in its default configuration is vulnerable to one of the BleedingTooth vulnerabilities, BadChoice (CVE-2020-12352).
- **Root Access**: Root access allowed us to create a snapshot using a custom kernel module and LiME, and to patch the kernel in memory to disable handlers.

### Analysis and Results
- **Total Handlers Found**: 21
- **Disabling Process**: We disabled them one by one and checked whether Bluetooth was still working on the device.
- **Shared SDIO Handler**: Both WiFi and Bluetooth functionality are handled by the Marvell 88W8897 peripheral, which uses a shared interrupt on the SDIO bus.
- **Outcome**: Disabling the shared SDIO handler disabled both WiFi and Bluetooth. The Steam Link can still access the internet over Ethernet, making it still usable. The exploit failed, and all Bluetooth connections to the device failed.

### Quantifying Attack Surface Reduction
To rigorously assess the potential attack surface reduction from disabling handlers on the Steam Link, we collected a list of all CVEs in the past five years (2016–2021) for which the Linux Kernel CVEs project could identify a patch, excluding patches larger than 1MB.

- **Annotated IRQs**: According to whether they are exposed to external input.
- **Source Paths**: Manually identified which kernel source paths were potentially reachable from the interrupt handler.
- **Matching CVEs**: Matched these source paths against our CVE patches to determine which CVEs could have been blocked by disabling the handler.
- **Results**: Many vulnerabilities in the WiFi and Bluetooth drivers (13 CVEs) and USB devices (31 vulnerabilities) would be prevented by disabling the handler.

### Limitations and Future Work
- **Non-IRQ Inputs**: Some systems poll for input from a peripheral in a loop, which we hope to explore and automate in future work.
- **Shared and Threaded Handlers**: Some OS mechanisms for handling IRQs, such as threaded handlers, are not yet supported. We plan to extend our fuzzing and divergence analysis to address this.
- **Manual Effort**: Requires manual effort to acquire a snapshot, flash a modified firmware image, and validate that the right peripheral has been disabled.
- **Rehosting**: Our techniques could be useful for other embedded reverse engineering efforts, such as rehosting, by automating the process of enumerating and identifying interrupt handlers.

### Related Work
- **Embedded and IoT Security**: Academic research has focused on securing these systems, including dynamic program analysis, static analysis, and debloating.
- **Debloating**: Techniques to eliminate unwanted features in software to reduce attack surface, applied to various types of software.
- **Closest Work**: LIGHTBLUE, which debloats Bluetooth protocol stacks in embedded devices.

### Conclusion
In this paper, we presented IRQDebloat, an automated technique for reducing the exposed attack surface of embedded devices by rewriting firmware to disable unwanted hardware functionality. We believe our techniques can give end users more control over their embedded hardware and may also be useful for automated reverse engineering of embedded systems for security.

### Acknowledgments
We thank our anonymous reviewers for their feedback, and acknowledge the contributions of NYU students and the support from the Office of Naval Research and the National Science Foundation.

### Availability
The code and data used in this paper are available at: [Insert URL here]