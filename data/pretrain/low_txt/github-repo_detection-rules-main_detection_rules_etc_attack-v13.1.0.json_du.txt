Certainly! Below is the optimized and refined version of the provided text, aiming for clarity, coherence, and professionalism.

---

### Develop Capabilities (T1587)
**Created:** 2020-10-01T01:30:00.877Z  
**Modified:** 2021-10-17T16:07:08.768Z  
**Kill Chain Phase:** Resource Development

**Description:**
Adversaries may develop their own capabilities in-house rather than purchasing, freely downloading, or stealing them. This process involves identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. These capabilities support various phases of the adversary lifecycle.

As with legitimate development efforts, different skill sets may be required. The necessary skills can be found in-house or outsourced to contractors. Using a contractor can be considered an extension of the adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains some degree of exclusivity over the capability.

**Detection:**
- Analyze malware for features associated with the adversary or their developers, such as compiler used, debugging artifacts, or code similarities.
- Use malware repositories to identify additional samples and development patterns over time.
- Track certificates in use on sites across the Internet. Pivot on known pieces of certificate information to uncover other adversary infrastructure.

Much of this activity occurs outside the target organization's visibility, making detection difficult. Detection efforts should focus on related stages of the adversary lifecycle, such as Defense Evasion or Command and Control.

**References:**
- [Mandiant APT1](https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf)
- [Kaspersky Sofacy](https://securelist.com/sofacy-apt-hits-high-profile-targets-with-updated-toolset/72924/)
- [Bitdefender StrongPity June 2020](https://www.bitdefender.com/files/News/CaseStudies/study/353/Bitdefender-Whitepaper-StrongPity-APT.pdf)
- [Talos Promethium June 2020](https://blog.talosintelligence.com/2020/06/promethium-extends-with-strongpity3.html)
- [Splunk Kovar Certificates 2017](https://www.splunk.com/en_us/blog/security/tall-tales-of-hunting-with-tls-ssl-certificates.html)

---

### Dynamic Data Exchange (T1173)
**Created:** 2018-01-16T16:13:52.465Z  
**Modified:** 2022-02-09T20:22:43.284Z  
**Kill Chain Phase:** Execution

**Description:**
Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links, hot data links, and requests for command execution.

Object Linking and Embedding (OLE), which allows linking data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE may still be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys.

Adversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands, either directly or through embedded files, and used to deliver execution via phishing campaigns or hosted web content, avoiding the use of Visual Basic for Applications (VBA) macros. DDE can also be leveraged by adversaries operating on a compromised machine who do not have direct access to command line execution.

**Detection:**
- Scan OLE and Office Open XML files for 'DDEAUTO', 'DDE', and other strings indicative of DDE execution.
- Monitor for Microsoft Office applications loading DLLs and other modules not typically associated with the application.
- Monitor for spawning of unusual processes (such as cmd.exe) from Microsoft Office applications.

**References:**
- [BleepingComputer DDE Disabled in Word Dec 2017](https://www.bleepingcomputer.com/news/microsoft/microsoft-disables-dde-feature-in-word-to-prevent-further-malware-attacks/)
- [Microsoft ADV170021 Dec 2017](https://portal.msrc.microsoft.com/security-guidance/advisory/ADV170021)
- [Microsoft DDE Advisory Nov 2017](https://technet.microsoft.com/library/security/4053440)
- [SensePost PS DDE May 2016](https://sensepost.com/blog/2016/powershell-c-sharp-and-dde-the-power-within/)
- [Kettle CSV DDE Aug 2014](https://www.contextis.com/blog/comma-separated-vulnerabilities)
- [Enigma Reviving DDE Jan 2018](https://posts.specterops.io/reviving-dde-using-onenote-and-excel-for-code-execution-d7226864caee)
- [SensePost MacroLess DDE Oct 2017](https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/)
- [NVisio Labs DDE Detection Oct 2017](https://blog.nviso.be/2017/10/11/detecting-dde-in-ms-office-documents/)

---

### NTDS (T1003.003)
**Created:** 2020-02-11T18:42:35.572Z  
**Modified:** 2022-03-08T21:00:52.774Z  
**Kill Chain Phase:** Credential Access

**Description:**
Adversaries may attempt to access or create a copy of the Active Directory domain database (NTDS.dit) to steal credential information and obtain other details about domain members such as devices, users, and access rights. By default, the NTDS file is located in %SystemRoot%\\NTDS\\Ntds.dit of a domain controller.

In addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.

The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes:
- Volume Shadow Copy
- secretsdump.py
- ntdsutil.exe
- Invoke-NinjaCopy

**Detection:**
- Monitor processes and command-line arguments for program execution that may be indicative of credential dumping, especially attempts to access or copy the NTDS.dit.

**References:**
- [Wikipedia Active Directory](https://en.wikipedia.org/wiki/Active_Directory)
- [Metcalf 2015](http://adsecurity.org/?p=1275)

---

### SNMP (MIB Dump) (T1602.001)
**Created:** 2020-10-19T23:51:05.953Z  
**Modified:** 2020-10-22T01:54:22.812Z  
**Kill Chain Phase:** Collection

**Description:**
Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).

The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can provide administrators with system information, hardware descriptions, physical location, and software packages. The MIB may also contain device operational information, including running configuration, routing table, and interface details.

Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices to build network maps and facilitate future targeted exploitation.

**Detection:**
- Identify network traffic sent or received by untrusted hosts or networks that expose MIB content or use unauthorized protocols.

**References:**
- [SANS Information Security Reading Room Securing SNMP](https://www.sans.org/reading-room/whitepapers/networkdevs/securing-snmp-net-snmp-snmpv3-1051)
- [US-CERT-TA18-106A](https://www.us-cert.gov/ncas/alerts/TA18-106A)
- [Cisco Blog Legacy Device Attacks](https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954)
- [Cisco Advisory SNMP v3 Authentication Vulnerabilities](https://tools.cisco.com/security/center/content/CiscoAppliedMitigationBulletin/cisco-amb-20080610-SNMPv3)

---

### Steganography (T1001.002)
**Created:** 2020-03-15T00:37:58.963Z  
**Modified:** 2020-03-15T00:37:58.963Z  
**Kill Chain Phase:** Command and Control

**Description:**
Adversaries may use steganographic techniques to hide command and control traffic to make detection more difficult. Steganographic techniques can be used to hide data in digital messages transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.

**Detection:**
- Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).
- Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.
- Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.

**References:**
- [University of Birmingham C2](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

---

### Malicious Link (T1204.001)
**Created:** 2020-03-11T14:43:31.706Z  
**Modified:** 2020-03-11T14:43:31.706Z  
**Kill Chain Phase:** Execution

**Description:**
An adversary may rely on a user clicking a malicious link to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from Spearphishing Link (T1566.002). Clicking on a link may also lead to other execution techniques such as Exploitation for Client Execution (T1203) or downloading files that require execution via Malicious File (T1204.002).

**Detection:**
- Inspect network traffic for indications that a user visited a malicious site, such as links included in phishing campaigns directed at your organization.
- Anti-virus can potentially detect malicious documents and files that are downloaded from a link and executed on the user's computer.

**Permissions Required:**
- User

**Platforms:**
- Linux
- macOS
- Windows

---

### Application Access Token (T1550.001)
**Created:** 2020-01-30T17:37:22.261Z  
**Modified:** 2023-05-04T18:04:17.588Z  
**Kill Chain Phases:** Defense Evasion, Lateral Movement

**Description:**
Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users or services and used in lieu of login credentials.

Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used to access resources in cloud, container-based applications, and software-as-a-service (SaaS).

OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.

For example, with a cloud-based email service, once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a "refresh" token enabling background access is awarded. With an OAuth access token, an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.

Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. In AWS and GCP environments, adversaries can trigger a request for a short-lived access token with the privileges of another user account. The adversary can then use this token to request data or perform actions the original account could not. If permissions for this feature are misconfigured, an adversary may be able to gain initial access to a Cloud Account or escalate their privileges.

Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. For example, in AWS environments, an adversary who compromises a user’s AWS API credentials may be able to use the `sts:GetFederationToken` API call to create a federated user session, which will have the same permissions as the original user but may persist even if the original user credentials are deactivated. Additionally, access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.

**Detection:**
- Monitor access token activity for abnormal use and permissions granted to unusual or suspicious applications and APIs.
- Review logs for calls to the AWS Security Token Service (STS) and usage of GCP service accounts to identify anomalous actions.

**Contributors:**
- Shailesh Tiwary (Indian Army)
- Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC)
- Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services)
- Mark Wee
- Jen Burns, HubSpot
- Ian Davila, Tidal Cyber
- Dylan Silva, AWS Security

**References:**
- [Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019](https://auth0.com/blog/why-should-use-accesstokens-to-secure-an-api/)
- [AWS Logging IAM Calls](https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html)
- [AWS Temporary Security Credentials](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_request.html)
- [Microsoft Identity Platform Access 2019](https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens)
- [Google Cloud Service Account Credentials](https://cloud.google.com/iam/docs/creating-short-lived-service-account-credentials)
- [GCP Monitoring Service Account Usage](https://cloud.google.com/iam/docs/service-account-monitoring)
- [okta](https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen)
- [Rhino Security Labs Enumerating AWS Roles](https://rhinosecuritylabs.com/aws/assume-worst-aws-assume-role-enumeration)
- [Staaldraad Phishing with OAuth 2017](https://staaldraad.github.io/2017/08/02/o356-phishing-with-oauth/)

---

### LSASS Driver (T1547.008)
**Created:** 2020-01-24T18:38:55.801Z  
**Modified:** 2022-04-20T16:34:43.405Z  
**Kill Chain Phases:** Persistence, Privilege Escalation

**Description:**
Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.

Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers, an adversary can use LSA operations to continuously execute malicious payloads.

**Detection:**
- With LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers.
- Monitor DLL load operations in lsass.exe.
- Utilize the Sysinternals Autoruns/Autorunsc utility to examine loaded drivers associated with the LSA.

**Contributors:**
- Vincent Le Toux

**References:**
- [Microsoft LSA Protection Mar 2014](https://technet.microsoft.com/library/dn408187.aspx)
- [Microsoft DLL Security](https://msdn.microsoft.com/library/windows/desktop/ff919712.aspx)
- [Microsoft Security Subsystem](https://technet.microsoft.com/library/cc961760.aspx)
- [TechNet Autoruns](https://technet.microsoft.com/en-us/sysinternals/bb963902)

---

### Service Execution (T1569.002)
**Created:** 2020-03-10T18:33:36.159Z  
**Modified:** 2021-08-30T17:42:40.945Z  
**Kill Chain Phase:** Execution

**Description:**
Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (services.exe) is an interface to manage and manipulate services. It is accessible to users via GUI components and system utilities such as sc.exe and Net.

PsExec can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API. Tools such as PsExec and sc.exe can accept remote servers as arguments and may be used to conduct remote execution.

Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with Windows Service (T1543.003) during service persistence or privilege escalation.

**Detection:**
- Changes to service Registry entries and command line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious.
- If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.

**Permissions Required:**
- Administrator
- SYSTEM

**Platforms:**
- Windows

**Remote Support:**
- True

**References:**
- [Microsoft Service Control Manager](https://docs.microsoft.com/windows/win32/services/service-control-manager)
- [Russinovich Sysinternals](https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx)

---

### Cloud Accounts (T1078.004)
**Created:** 2020-03-13T20:36:57.378Z  
**Modified:** 2023-03-21T13:17:14.441Z  
**Kill Chain Phases:** Defense Evasion, Persistence, Privilege Escalation, Initial Access

**Description:**
Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management systems, such as Windows Active Directory.

Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a Trusted Relationship (T1199). Similar to Domain Accounts (T1078.002), compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.

Once a cloud account is compromised, an adversary may perform Account Manipulation (T1098) to maintain persistence and potentially escalate their privileges. For example, by adding Additional Cloud Roles (T1098.003).

**Detection:**
- Monitor the activity of cloud accounts to detect abnormal or malicious behavior, such as accessing information outside of the normal function of the account or account usage at atypical hours.

**Contributors:**
- Jon Sternstein, Stern Security

**References:**
- [AWS Identity Federation](https://aws.amazon.com/identity/federation/)
- [Google Federating GC](https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction)
- [Microsoft Deploying AD Federation](https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs)

---

### Environmental Keying (T1480.001)
**Created:** 2020-06-23T22:28:28.041Z  
**Modified:** 2022-05-04T14:52:51.290Z  
**Kill Chain Phase:** Defense Evasion

**Description:**
Adversaries may environmentally key payloads or other features of malware to evade defenses and constrain execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary-supplied, environment-specific conditions that are expected to be present on the target. Environmental keying is an implementation of Execution Guardrails (T1480) that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.

Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses. By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult. These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).

Similar to Obfuscated Files or Information (T1027), adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution. By utilizing target-specific values to decrypt the payload, the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult. This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.

Like other Execution Guardrails (T1480), environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical Virtualization/Sandbox Evasion (T1497). While use of Virtualization/Sandbox Evasion (T1497) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.

**Detection:**
- Detecting the use of environmental keying may be difficult depending on the implementation. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery (TA0007), especially in a short period of time, may aid in detection.

**Contributors:**
- Nick Carr, Mandiant

**References:**
- [Proofpoint Router Malvertising](https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices)
- [Kaspersky Gauss Whitepaper](https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134940/kaspersky-lab-gauss.pdf)
- [Ebowla: Genetic Malware](https://github.com/Genetic-Malware/Ebowla/blob/master/Eko_2016_Morrow_Pitts_Master.pdf)
- [EK Clueless Agents](https://www.schneier.com/academic/paperfiles/paper-clueless-agents.pdf)
- [EK Impeding Malware Analysis](https://pdfs.semanticscholar.org/2721/3d206bc3c1e8c229fb4820b6af09e7f975da.pdf)
- [Demiguise Guardrail Router Logo](https://github.com/nccgroup/demiguise/blob/master/examples/virginkey.js)
- [Environmental Keyed HTA](https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2017/august/smuggling-hta-files-in-internet-exploreredge/)

---

### Fallback Channels (T1008)
**Created:** 2017-05-31T21:30:21.689Z  
**Modified:** 2020-07-14T19:49:47.340Z  
**Kill Chain Phase:** Command and Control

**Description:**
Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.

**Detection:**
- Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server).
- Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.
- Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.

**References:**
- [University of Birmingham C2](https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf)

---

### NTFS File Attributes (T1564.004)
**Created:** 2020-03-13T20:33:00.009Z  
**Modified:** 2020-03-29T22:46:56.308Z  
**Kill Chain Phase:** Defense Evasion

**Description:**
Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data (known as Alternate Data Streams (ADSs) when more than one Data attribute is present), that can be used to store arbitrary data (and even complete files).

Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.

**Detection:**
- Forensic techniques exist to identify information stored in NTFS EA. Monitor calls to the ZwSetEaFile and ZwQueryEaFile Windows API functions as well as binaries used to interact with EA.
- There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: file.ext:ads[.ext]) is commonly associated with ADSs.
- The Streams tool of Sysinternals can be used to uncover files with ADSs. The dir /r command can also be used to display ADSs. Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a -stream parameter to interact with ADSs.

**Contributors:**
- Oddvar Moe, @oddvarmoe
- Red Canary

**References:**
- [SpectorOps Host-Based Jul 2017](https://posts.specterops.io/host-based-threat-modeling-indicator-design-a9dbbb53d5ea)
- [Microsoft NTFS File Attributes Aug 2010](https://blogs.technet.microsoft.com/askcore/2010/08/25/ntfs-file-attributes/)
- [MalwareBytes ADS July 2015](https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/)
- [Microsoft ADS Mar 2014](https://blogs.technet.microsoft.com/askcore/2013/03/24/alternate-data-streams-in-ntfs/)
- [Journey into IR ZeroAccess NTFS EA](http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html)
- [Oddvar Moe ADS1 Jan 2018](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)
- [Oddvar Moe ADS2 Apr 2018](https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/)
- [Symantec ADS May 2009](https://www.symantec.com/connect/articles/what-you-need-know-about-alternate-data-streams-windows-your-data-secure-can-you-restore)

---

### Kerberoasting (T1558.003)
**Created:** 2020-02-11T18:43:38.588Z  
**Modified:** 2023-03-30T21:01:46.538Z  
**Kill Chain Phase:** Credential Access

**Description:**
Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to Brute Force (T1110).

Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service).

Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC). Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline Brute Force attacks that may expose plaintext credentials.

This same behavior could be executed using service tickets captured from network traffic.

Cracked hashes may enable Persistence (TA0003), Privilege Escalation (TA0004), and Lateral Movement (TA0008) via access to Valid Accounts (T1078).

**Detection:**
- Enable Audit Kerberos Service Ticket Operations to log Kerberos TGS service ticket requests. Particularly investigate irregular patterns of activity (ex: accounts making numerous requests, Event ID 4769, within a small time frame, especially if they also request RC4 encryption [Type 0x17]).

**Contributors:**
- Praetorian

**References:**
- [Empire InvokeKerberoast Oct 2016](https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1)
- [AdSecurity Cracking Kerberos Dec 2015](https://adsecurity.org/?p=2293)
- [Microsoft Detecting Kerberoasting Feb 2018](https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/)
- [Microsoft SPN](https://msdn.microsoft.com/library/ms677949.aspx)
- [Microsoft SetSPN](https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx)
- [SANS Attacking Kerberos Nov 2014](https://redsiege.com/kerberoast-slides)
- [Harmj0y Kerberoast Nov 2016](https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)

---

### NTFS File Attributes (T1096)
**Created:** 2017-05-31T21:31:11.147Z  
**Modified:** 2020-03-13T21:04:13.284Z  
**Kill Chain Phase:** Defense Evasion

**Description:**
Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. Within MFT entries are file attributes, such as Extended Attributes (EA) and Data (known as Alternate Data Streams (ADSs) when more than one Data attribute is present), that can be used to store arbitrary data (and even complete files).

Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus.

**Detection:**
- Forensic techniques exist to identify information stored in NTFS EA. Monitor calls to the ZwSetEaFile and ZwQueryEaFile Windows API functions as well as binaries used to interact with EA.
- There are many ways to create and interact with ADSs using Windows utilities. Monitor for operations (execution, copies, etc.) with file names that contain colons. This syntax (ex: file.ext:ads[.ext]) is commonly associated with ADSs.
- The Streams tool of Sysinternals can be used to uncover files with ADSs. The dir /r command can also be used to display ADSs. Many PowerShell commands (such as Get-Item, Set-Item, Remove-Item, and Get-ChildItem) can also accept a -stream parameter to interact with ADSs.

**Contributors:**
- Red Canary
- Oddvar Moe, @oddvarmoe

**References:**
- [SpectorOps Host-Based Jul 2017](https://posts.specterops.io/host-based-threat-modeling-indicator-design-a9dbbb53d5ea)
- [Microsoft NTFS File Attributes Aug 2010](https://blogs.technet.microsoft.com/askcore/2010/08/25/ntfs-file-attributes/)
- [MalwareBytes ADS July 2015](https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/)
- [Microsoft ADS Mar 2014](https://blogs.technet.microsoft.com/askcore/2013/03/24/alternate-data-streams-in-ntfs/)
- [Journey into IR ZeroAccess NTFS EA](http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html)
- [Oddvar Moe ADS1 Jan 2018](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)
- [Oddvar Moe ADS2 Apr 2018](https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/)
- [Symantec ADS May 2009](https://www.symantec.com/connect/articles/what-you-need-know-about-alternate-data-streams-windows-your-data-secure-can-you-restore)

---