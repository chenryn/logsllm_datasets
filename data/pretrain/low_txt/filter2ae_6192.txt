# CVE-2018-4087 PoC: 利用bluetoothd绕过沙盒

##### 译文声明
本文为翻译文章，原文作者为Rani Idan。具体内容和含义请以原文为准。
译文仅供参考，不得用于非法用途。

在我之前发表的题为“New Crucial Vulnerabilities in Apple’s bluetoothd daemon”的博客文章中，我公布了PoC（概念验证）漏洞。发布PoC的目的是为了帮助IT管理员和渗透测试人员进行评估，但不能用于非法目的。此外，此PoC及相关材料仅在向Apple披露并得到修复后才会公开。

作为Zimperium zLabs平台研究团队的一员，我的工作是分析iOS中的mach消息IPC机制，最终目标是从默认的应用程序沙箱中逃脱。为此，我需要从沙箱内部映射mach端口以便访问它们。我使用了Jonathan Levin（[@Morpheus__](https://github.com/Morpheus__ "@Morpheus__")）在其* OS Internals Volume III一书中的sbtool工具来完成这一任务。

本文旨在揭示该漏洞的完整PoC。Apple已在最新版本的操作系统中修复了这些漏洞：iOS 11.2.5、watchOS 4.2.2 和 tvOS 11.2.5。Apple为每个漏洞分配了两个CVE编号：
1. CVE-2018-4087: Rani Idan (@raniXCH) of Zimperium zLabs Team
2. CVE-2018-4095: Rani Idan (@raniXCH) of Zimperium zLabs Team

Apple发布的修复版本包括：
- tvOS 11.2.5
- iOS 11.2.5
- watchOS 4.2.2

## bluetoothd

不同的沙盒进程可以通过IPC与守护进程（如mediaserverd、bluetoothd等）通信。在本例中，我们将重点关注与bluetoothd的消息通信。bluetoothd启动“com.apple.server.bluetooth”端口，并在此端口上接收队列中的mach消息。Mach消息是* OS中的一种IPC形式，尽管苹果并未对其进行改进或记录。

函数`apple_bluetoothd_mig_server`将接收发送给`com.apple.server.bluetooth`的每个mach消息，并通过mach消息ID处理它。为简化流程，一个沙盒进程可以请求启动服务端口，并使用`bootstrap_check_in`注册其端口。之后，该进程可以使用从launchd检索到的mach端口与服务通信。

查看`apple_bluetoothd_mig_server`函数，可以看到处理mach消息的函数会从发送给bluetoothd的消息的`msgh_id`中减去0xFA300的值，然后获取匹配的回调函数并调用它。此外，该函数检查消息ID是否小于等于0x83，这意味着我们有0x84个可用的回调位置。

由于该二进制文件没有符号信息，我开发了一个小工具来解析这个结构体，从而可以从不同库图像中获得更多详细信息。这样就可以创建一个完整的可用回调列表。

在我们的示例中，我们将关注`mach__BTLocalDeviceAddCallbacks`回调函数，它是消息标识符为3的消息处理器。`mach__BTLocalDeviceAddCallbacks_3`函数检查mach消息的大小是否为0x48，并且不是复杂的mach消息。之后，它尝试使用`session_token`将回调地址添加到相应的会话。

当合法客户端使用bluetoothd创建会话时，它会生成一个会话令牌供bluetoothd识别。需要注意的是，Apple使用`session_token`作为客户端和bluetoothd之间的端口名称。这导致了一个严重的问题，因为mach端口具有特定的结构，使其非常容易被暴力破解。`session_token`属于`mach_port_t`类型。

在我的PoC中，我从launchd获取了连接到bluetoothd的端口，直接与bluetoothd通信。通过使用该端口，我强制执行了`session_token`（mach端口结构），并最终通过劫持bluetoothd及其客户端之间的会话，在bluetoothd客户端上注册新的回调。

### 攻击过程
1. bluetoothd的客户端连接到它并获得用于mach通信的会话令牌，以便将其自身识别为bluetoothd。
2. 恶意应用程序（沙盒应用程序）可以强制使用会话令牌，因为会话令牌由通信的mach端口组成，并且由`mach_port_t`结构构成。
3. 在成功强制执行令牌后，恶意应用程序可以在客户端进程上注册新的回调地址，以便在将消息发送到客户端时调用。

重要的是，这意味着从沙盒环境运行的恶意应用程序可以在具有不同沙盒环境的bluetoothd客户端上添加回调地址。我所劫持的所有bluetoothd客户端列表如下：
- SpringBoard
- mDNSResponder
- aggregated
- wifid
- Preferences
- CommCenter
- iaptransportd
- findmydeviced
- routined
- UserEventAgent
- carkitd
- mediaserverd
- bluetoothd
- coreduetd

## 如何利用此漏洞？

该漏洞可以用来泄漏每个客户端的mach端口，并在每个客户端上进行多种攻击。泄漏客户端的端口可以通过适当的跳转小工具并将端口发送回沙盒应用程序来实现。

## Apple的修复

我向Apple报告了这个问题，他们确实进行了修复，但我认为解决方案可以设计得更好。修复方案仍然无法确保会话不会被劫持。Apple将会话令牌从实际的端口改为随机令牌。

## 披露时间线
- 2017年10月11日 – 发现第一个漏洞
- 2017年11月14日 – 向Apple报告漏洞
- 2017年12月5日 – Apple确认漏洞
- 2018年1月25日 – Apple发布补丁

## 致谢
感谢Apple的专业回复，以及Nikias Bassen（[@pimskeks](https://github.com/pimskeks "@pimskeks")）和其他Zimperium团队成员的支持。