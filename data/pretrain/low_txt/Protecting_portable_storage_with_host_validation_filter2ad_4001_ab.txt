### Figure 2: Overview of the Kells Architecture

Integral to the design, any host integrity measurement solution (e.g., Pioneer [10]) can be used. Kells significantly diverges from previous attempts to secure both fixed and mobile storage. By using the mobile storage device as an autonomous trusted computing base (TCB), we extend the concept of self-protecting storage [2, 6] to include a system that actively verifies the integrity of the devices it interacts with. This approach enables the safe use of now-ubiquitous portable storage. Our key contributions are:

- **Portable Storage Device Validation**: We identify system designs and protocols that support the validation of an untrusted host's initial and ongoing integrity state by a portable storage device. To our knowledge, this is the first implementation of such a system in a dedicated portable storage device.
- **Performance Evaluation**: We describe and benchmark our proof-of-concept Kells system, which is built on a DevKit 8000 board running embedded Linux and connected to a modified Linux host. Our empirical evaluation shows minimal overheads associated with host validation, with a worst-case throughput overhead of 1.22% for read operations and 2.78% for write operations.

In our full technical report [1], we also analyze the security properties of Kells using the LS2 logic [3] and prove that the storage device can only be accessed by hosts whose integrity state is valid (within a security parameter ∆t).

The remainder of this abstract describes the operation, architecture, implementation, and evaluation of Kells.

### 2. Design and Implementation

The Kells architecture is illustrated in Figure 2. To integrate Kells, we modify three major components: the interface between the host and the device, the storage device itself, and the host’s operating system.

#### 2.3 Modifications to Host

A host must recognize the Kells device as trusted and handle interactions differently from standard USB mass storage transactions. We made minor changes to the USB driver, defining a flag in the USB device repository to recognize the Kells device. Additionally, we designed an attestation daemon that runs in the host’s user space. This daemon retrieves boot-time attestations using the Linux Integrity Measurement Architecture (IMA) [8] and serves as an interface to any runtime monitoring systems on the host.

### 3. Attesting Host Integrity

For a host connecting to the Kells device to be considered trustworthy, it must be installed and maintained in a way that protects its integrity. This can be achieved by provisioning a secure kernel and supporting operating system, from which measurements of system integrity can be made and transferred to Kells. The host system maintainer must re-measure the system when it is installed or when measurable components are updated. Solutions for ensuring a trusted base installation include the use of a root of trust installer (ROTI) [12], which establishes a system whose integrity can be traced back to the installation media.

Our full technical report details the attestation protocol. Briefly, we measure the hardware and software using IMA, based on the Kells device being placed in measurement mode. Subsequent attestations use this measurement list for validating the system state, which can also be remotely disseminated. A portion of non-volatile memory within Kells records this information, including a unique identity for the host, the list of measurements associated with the host (for attestation verification), and policy-specific information, such as whether the host should allow administrative access.

We provide a framework for supporting runtime integrity monitoring without imposing constraints on the specific system used. The runtime monitor can provide information to the storage device about the system state, with responses representing good and bad system states listed as part of the host policy. For example, if the host system uses the Patagonix system for detecting covertly-executing rootkits [4], it could provide a response to the disk indicating whether the system has any hidden binaries currently executing. Solutions that use the TPM may also be appropriate for runtime monitoring. Our design considers attestations from a runtime monitor to be delivered in a consistent, periodic manner, akin to a security heartbeat. The period of the heartbeat is fixed by the device and transmitted to the host during the device enumeration process.

### 4. Evaluation

We conducted a series of experiments to characterize the performance of Kells in realistic environments. All experiments were performed on a Dell Latitude E6400 laptop running Ubuntu 8.04 with the Linux 2.6.28.15 kernel. The laptop TPM performs a single quote in 880 milliseconds. The Kells device was implemented using a DevKit 8000 development board, which is largely a clone of the popular BeagleBoard.

Our experiments aimed to determine the overhead of read operations. Each test involved reading a single 517 MB file, the size of a large video, from the Kells device. We varied the security parameter ∆t (the periodicity of the host integrity re-validation) over subsequent experiments and created a baseline by performing the read test with an unmodified DevKit 8000 USB device and Linux kernel. All statistics are calculated from an average of five runs of each test.

Read operation performance was largely unaffected by the validation process, as the host preemptively creates validation quotes and delivers them to the device just before a new one is needed. Thus, the validation process is mostly hidden by normal read operations. However, performance degrades slightly as the validation process occurs more frequently. At a 1-second reattestation interval, throughput is reduced by only 1.2%, and as little as 0.2% at a 10-second interval. This overhead is primarily due to the overheads associated with receiving and validating the integrity proofs (up to 100KB).

Write operations were performed over a 200 MB file. These are substantially slower on flash devices due to the underlying memory materials and structure. Again, the write operations were largely unaffected by the presence of host validation, leading to a little less than 3% overhead at a 1-second reattestation interval and just under 1% at a 10-second interval.

### 5. References

[1] K. Butler, S. McLaughlin, and P. McDaniel. Kells: A Protection Framework for Portable Data. Technical Report NAS-TR-0134-2010, Network and Security Research Center, Pennsylvania State University, June 2010.

[2] K. R. B. Butler, S. McLaughlin, and P. D. McDaniel. Rootkit-Resistant Disks. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS’08), Alexandria, VA, USA, Oct. 2008.

[3] A. Datta, J. Franklin, D. Garg, and D. Kaynar. A Logic of Secure Systems and its Application to Trusted Computing. In Proceedings of the 30th IEEE Symposium on Security and Privacy, Oakland, CA, USA, May 2009.

[4] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Hypervisor Support for Identifying Covertly Executing Binaries. In Proceedings of the 17th USENIX Security Symposium, pages 243–258, San Jose, CA, USA, Aug. 2008.

[5] Microsoft. BitLocker and BitLocker to Go. http://technet.microsoft.com/en-us/windows/dd408739.aspx, Jan. 2009.

[6] A. G. Pennington, J. D. Strunk, J. L. Griffin, et al. Storage-based Intrusion Detection: Watching storage activity for suspicious behavior. In Proceedings of the 12th USENIX Security Symposium, Washington, DC, USA, Aug. 2003.

[7] P. Porras, H. Saidi, and V. Yegneswaran. An Analysis of Conficker’s Logic and Rendezvous Points. Technical report, SRI Computer Science Laboratory, Mar. 2009.

[8] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and Implementation of a TCG-based Integrity Measurement Architecture. In Proceedings of the 13th USENIX Security Symposium, San Diego, CA, USA, Aug. 2004.

[9] Seagate Technology LLC. Self-Encrypting Hard Disk Drives in the Data Center. Technology Paper TP583.1-0711US, Nov. 2007.

[10] A. Seshadri, M. Luk, E. Shi, et al. Pioneer: verifying code integrity and enforcing untampered code execution on legacy systems. In Proceedings of ACM SOSP, Brighton, UK, 2005.

[11] N. Shachtman. Under Worm Assault, Military Bans Disks, USB Drives. Wired, Nov. 2008.

[12] L. St. Clair, J. Schiffman, T. Jaeger, and P. McDaniel. Establishing and Sustaining System Integrity via Root of Trust Installation. In ACSAC, Miami, FL, USA, Dec. 2007.

[13] TCG. TPM Main: Part 1 - Design Principles. Specification Version 1.2, Level 2 Revision 103. TCG, July 2007.

[14] TCG. TCG Storage Security Subsystem Class: Opal. Specification Version 1.0, Revision 1.0. Trusted Computing Group, Jan. 2009.