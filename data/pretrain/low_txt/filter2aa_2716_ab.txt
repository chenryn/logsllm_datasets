# Biting the Hand That Feeds You

## 2007

### 14. Uploading and Managing Attachments in Gmail
Once you have selected the file you wish to attach, it will appear listed as an attachment for your email. The local file path and filename will be displayed in **bold** text just below the subject line. After a few seconds, depending on the file size and your internet bandwidth, the file will be fully uploaded to the Gmail server. Gmail indicates that the file has been successfully uploaded by changing the **bold** file path and filename to a filename followed by the *content-type* in italics. At this point, the file is stored on Gmail’s web server.

### 15. Bypassing Miscellaneous Protection Measures
Gmail’s creators are well aware of the risks associated with allowing users to send executable content through their service. When a user tries to attach an executable file, they receive a warning message. However, at this stage, the file has already been uploaded to the Gmail server. To proceed, right-click the attachment hyperlink and note the exact HTTP GET request for the executable file.

### 16. Sending Malicious Content to the Victim
With the exact POST request needed to authenticate to a "throw away" Gmail account and the HTTP GET request to retrieve the file from the Gmail server, you can set up an attack. For example, a phishing attack could be executed by sending a link to the victim. If the user clicks the link, they will see a file download security warning. A close inspection of the "From" field will show that the file is being served from `mail.google.com`. A simplified HTML example of this attack is provided in the Appendix.

### 17. Chapter 4 – Flash-Based Attack
#### 1. Overview
Another way to exploit domain name-based security protections is through Cross Domain Policy files used by Adobe/Macromedia Flash. According to “Macromedia Flash Player 8 Security” (Page 37) by Adrian Ludwig, these policy files allow administrators to grant read access to specific portions of a website. By default, the policy file is located in the root directory of the target server. However, if the policy file cannot be placed in the root directory or needs to be served from an XMLSocket server, the `loadPolicyFile()` method can be used. This method was introduced in Flash Player 7 (7.0.19.0) to specify a non-default location for the policy file.

Flash player assumes that if a Cross Domain policy file (`crossdomain.xml`) exists on the target server, cross-domain requests via the Flash player will be permitted. Unfortunately, Adobe/Macromedia did not anticipate that popular web servers would allow users to upload their own Cross Domain policy files, and this issue is further complicated by the fact that the policy file can now be loaded from non-default locations.

#### 2. Forcing Ownership of the `crossdomain.xml` File
Using techniques similar to those described above, an attacker can easily force ownership of the `crossdomain.xml` file. The attacker uploads the `crossdomain.xml` file to the affected web server, forces the victim to authenticate to the web server (CSRF) using a "throw away" account, and then feeds the appropriate location of the `crossdomain.xml` file to the Flash player. Once the Flash player finds the `crossdomain.xml` file on the vulnerable server, it is allowed to make cross-domain requests to that server. The steps to execute this attack are as follows:

1. The attacker logs into the web mail server with the throwaway account (e.g., Gmail).
2. The attacker notes the exact HTTP POST request needed to authenticate to the web mail server.
3. The attacker uploads the `crossdomain.xml` file to the affected web server.
4. The attacker notes the exact HTTP GET request needed to download the file.
5. The attacker creates a page that performs a CSRF to the web mail server, passing the credentials for the throwaway account to Gmail, forcing the user's browser to authenticate to the server.
6. Once the CSRF is complete and the attacker has forced an authenticated session with Gmail, the attacker loads the Flash object, using the `loadPolicyFile()` function to retrieve the attacker-uploaded cross-domain policy file.
7. The Flash object uses the browser session cookies to complete the request for the `crossdomain.xml` file, giving the Flash object permission to access the `mail.google.com` domain.

### 18. Chapter 5 – Conclusion
While the examples in this paper focus on web mail applications, many other web applications share similar vulnerabilities. Developers must exercise extreme caution when handling files from "anonymous" users, including images, avatars, spreadsheets, and text files. Despite advances in browser and web application security, fundamental concepts of web application authentication and file attachment remain unchanged. The attack methods demonstrated in this paper are simple, and so are the countermeasures. Developers should implement CSRF protections for login functionality and file download functionality. Additionally, developers must be cautious when taking ownership of external entities' content/files. When possible, such content should not be served from domain names that users consider trustworthy. Applications serving user-controllable content and providing critical user functionality should not share domain names. Lastly, developers must be vigilant when designing applications that trust domain names or content from external domains. Trust on the web is delicate, and attacks like those presented here undermine it at both the user and application levels. Simple fixes can help restore some of this trust, but constant diligence is required.

### References
- **Flash Player 8 Security Whitepaper** – Adrian Ludwig
  - [Link](http://www.macromedia.com/devnet/flashplayer/articles/flash_player_8_security.pdf)
- **Kicking Down the Cross Domain Door** – Billy Rios & Raghav Dube
  - [Link](http://media.blackhat.com/presentations/bh-europe-07/Dube-Rios/Whitepaper/bh-eu-07-rios-WP.pdf)

### Appendices
- **Appendix A – Biting Yahoo HTML – FireFox**
- **Appendix B – Biting Gmail HTML – FireFox**

---

This revised version aims to provide a more coherent and professional structure, ensuring clarity and readability.