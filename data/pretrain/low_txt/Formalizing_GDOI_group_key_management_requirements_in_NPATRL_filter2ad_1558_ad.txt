# Key Inference and Access Control in Group Key Management

## 1. Introduction to Key Inference
In the context of group key management, we define two types of key inference: backward inference (BI) and forward inference (FI). These cases describe how an intruder might learn a key based on the timing of key expiration and creation.

### 1.1 Backward Inference (BI)
Backward inference occurs when an intruder learns a key \( K_G \) after another key \( K'_G \) has expired. This can be formally defined as:
\[ \text{BI}(K'_G, G) \]
\[ \star \text{learn}(P, (), (K_G, G), ) \]
\[ \land \star \text{gcks createkey}(GCKS, (), (G, K_G), ) \]
\[ \land \star \text{gcks createkey}(GCKS, (), (G, K'_G), ) \]

**Note:** When a new key is sent, the old key expires. We assume that any non-initial key is sent in a push-key message immediately upon creation. Thus, BI for \( K'_G \) describes an intruder learning a key \( K_G \) that became current after \( K'_G \) was current.

### 1.2 Forward Inference (FI)
Forward inference occurs when an intruder learns a key \( K_G \) before another key \( K''_G \) is generated. This can be formally defined as:
\[ \text{FI}(K_G, G) \]
\[ \star \text{learn}(P, (), (K''_G, G), ) \]
\[ \land \star \text{gcks sendpushkey}(GCKS, (), (G, K_G, K'_G), ) \]
\[ \land \star \text{gcks sendpushkey}(GCKS, (), (G, K''_G, K'''_G), ) \]

**Note:** FI describes an intruder learning a key \( K''_G \) that expired before a later key \( K_G \) was generated.

## 2. Application of Inference in Access Control
Backward and forward inferences are used to specify access control policies. Specifically:

- **Backward Inference (BI):** Used to specify forward access control without backward access control. If an intruder learns a key \( K_G \), then BI(\( K_G, G \)) will be listed among the possible paths, but not FI(\( K_G, G \)). This means the intruder may have learned \( K_G \) due to a previously expired key \( K'_G \), but not a key \( K^*_G \) generated after \( K_G \) expired.
- **Forward Inference (FI):** Used to specify backward access control without forward access control. If an intruder learns a key \( K_G \), then FI(\( K_G, G \)) will be listed among the possible paths, but not BI(\( K_G, G \)). This means the intruder may have learned \( K_G \) due to a key \( K''_G \) generated after \( K_G \) expired, but not a key \( K'_G \) that expired before \( K_G \).

## 3. Rationale for Changing Focus from Member to Intruder
The original definition of forward and backward access control focused on the knowledge of any group member. However, we now focus on the intruder's knowledge. This change is justified by two steps:
1. **Dishonest Members:** Dishonest members can do everything honest members can do and more. Any condition on a dishonest member's learning a key should also apply to an honest member.
2. **Information Sharing:** All dishonest members share information with the intruder. Therefore, any condition on the intruder's learning a key implies the same condition for a dishonest member.

## 4. Sample Requirements
### 4.1 Weak Secrecy
The weakest form of secrecy requires that the protocol protects against key compromise under the most benign assumptions:
- No pairwise or key encryption keys have been lost.
- No dishonest members have joined the group.

This can be described as:
\[ \text{learn}(P, (), (K_G, G), ) \rightarrow \text{BC1}(K'_G, G) \lor \text{BC2b}(K'_G, G) \lor \text{BC3a}(K'_G, G) \]

### 4.2 Strong Secrecy
Strong secrecy ensures that the intruder learns a key \( K_G \) only if:
- \( K_G \) is lost.
- A dishonest member received \( K_G \).
- A pairwise key used to distribute \( K_G \) was stolen.

With perfect forward secrecy:
\[ \text{learn}(P, (), (K_G, G), ) \rightarrow \text{BC1}(K_G, G) \lor \text{BC2a}(K_G, G) \lor \text{BC2b}(K_G, G) \lor \text{BC3b}(K_G, G) \]

### 4.3 Forward Access Control
Forward access control (without backward access control) combines strong secrecy with the added condition of backward inference:
\[ \text{learn}(P, (), (K_G, G), ) \rightarrow \text{BC1}(K_G, G) \lor \text{BC2a}(K_G, G) \lor \text{BC2b}(K_G, G) \lor \text{BC3a}(K_G, G) \lor \text{BI}(K_G, G) \]

### 4.4 Backward Access Control
Backward access control (without forward access control) combines strong secrecy with the added condition of forward inference:
\[ \text{learn}(P, (), (K_G, G), ) \rightarrow \text{BC1}(K_G, G) \lor \text{BC2a}(K_G, G) \lor \text{BC2b}(K_G, G) \lor \text{BC3b}(K_G, G) \lor \text{FI}(K_G, G) \]

## 5. Conclusions
We have presented formal security requirements for the group key management protocol GDOI. These requirements help in understanding and specifying the nature of key inference and access control in cryptographic protocols. The NRL Protocol Analyzer is being used to verify these requirements, which may lead to further improvements in the protocol.

## 6. References
[1] M. Baugher, T. Hardjono, H. Harney, and B. Weis. Group domain of interpretation for ISAKMP. Available at http://search.ietf.org/internet-drafts/draft-irtf-smug-gdoi-01.txt, January 2001.
[2] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas. Multicast security: A taxonomy and some efficient constructions. In Proc. of INFOCOM’99, vol. 2, pages 708–716, March 1999.
[3] Brian F. Chellas. Modal Logic: An Introduction. Cambridge University Press, 1980.
[4] Danny Dolev and Andrew C. Yao. On the security of public-key protocols. IEEE Transactions on Information Theory, 2(29):198–208, March 1983.
[5] Naganand Doraswamy and Dan Harkins. IPSEC: The New Security Standard for the Internet, Intranets, and Virtual Private Networks. Prentice Hall, 1999.
[6] Robert Goldblatt. Logics of Time and Computation, 2nd edition, volume 7 of CSLI Lecture Notes. CSLI Publications, Stanford, 1992.
[7] D. Harkins and D. Carrel. The Internet Key Exchange (IKE). RFC 2409, IETF, November 1998. Available at ftp://ftp.isi.edu/in-notes/rfc2409.txt.
[8] G.E. Hughes and M.J. Creswell. A New Introduction to Modal Logic. Routledge, 1996.
[9] C. Meadows and P. Syverson. A formal specification of requirements for payment transactions in the SET protocol. In R. Hirschfeld, editor, Financial Cryptography, FC’98, pages 122–140. Springer-Verlag, LNCS 1465, 1998.
[10] Catherine Meadows. A model of computation for the NRL Protocol Analyzer. In Proceedings of the 7th Computer Security Foundations Workshop, pages 84–89. IEEE CS Press, June 1994.
[11] Catherine Meadows. The NRL Protocol Analyzer: An overview. Journal of Logic Programming, 26(2):113–131, February 1996.
[12] Catherine Meadows. A cost-based framework for analysis of denial of service in networks. Journal of Computer Security, 9(1–2):143–164, 2001.
[13] M. Steiner, G. Tsudik, and M. Waidner. Key agreement in dynamic peer groups. IEEE Transactions on Parallel and Distributed Systems, 11(8), August 2000.
[14] P. Syverson and C. Meadows. A logical language for specifying cryptographic protocol requirements. In Proceedings of the IEEE Computer Society Symposium on Research in Security and Privacy, pages 165–177. IEEE CS Press, May 1993.
[15] P. Syverson and C. Meadows. Formal requirements for key distribution protocols. In A. De Santis, editor, Advances in Cryptology — EUROCRYPT ’94, pages 32–331. Springer-Verlag, LNCS 950, 1994.
[16] P. Syverson and C. Meadows. A formal language for cryptographic protocol requirements. Designs, Codes, and Cryptography, 7(1 and 2):27–59, January 1996.

## Appendix A: Removing Recursion
In this appendix, we show how to use the NPATRL logic to remove recursion from the requirements for forward and backward access control. This is desirable to avoid infinite regression in model checkers and theorem provers.

### A.1 Backward Access Control
**Lemma 1.** The backward access control condition \( \text{BAC}(K_G, G) \) is equivalent to the conditions \( \text{NRFAC}(K_G, G) \).

### A.2 Forward Access Control
**Lemma 2.** The forward access control condition \( \text{FAC}(K_G, G) \) is equivalent to the conditions \( \text{NRBAC}(K_G, G) \).

**Proofs:** The proofs follow similar induction arguments, with the base case and induction step adapted for the specific type of access control.