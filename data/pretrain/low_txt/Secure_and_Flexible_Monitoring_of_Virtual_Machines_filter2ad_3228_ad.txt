### Results and Methodology

The results were compared using a sample size of 50 for each mode, which was sufficient to minimize the standard deviation. The measurements were conducted using the `time` command in Linux, which provides millisecond precision. A detailed description of the modes is provided in the caption of Figure 7.

**Figure 7: Performance Comparison**
- **X-axis:** Time in milliseconds
- **Y-axis:** Number of files created
- **Modes:**
  - Mode 1
  - Mode 2
  - Mode 3

### Data Structure and Code Execution

The structure contains a circular doubly linked list that points to the rest of the modules. The code proceeds by loading the memory page addressed by the next pointer, traversing down the list. For each structure, the module name is accessed by creating a pointer to its offset, and then it is printed to the standard output. Since the linked list is circular, the code terminates when it encounters a pointer back to the head of the list.

**Program 5.1: Source Code for Listing All Running LKMs in the domU Kernel**
```c
xa_init(dom, &xai);
memory = xa_access_kernel_symbol(&xai, "modules", &offset);
memcpy(&next_module, memory + offset, 4);
list_head = next_module;
munmap(memory, XA_PAGE_SIZE);

while (1) {
    memory = xa_access_virtual_address(&xai, next_module, &offset);
    memcpy(&next_module, memory + offset, 4);
    if (list_head == next_module) {
        break;
    }
    name = (char *)(memory + offset + 8);
    printf("%s\n", name);
    munmap(memory, XA_PAGE_SIZE);
}

xa_destroy(&xai);
if (memory) munmap(memory, XA_PAGE_SIZE);
```

### OS-Specific Knowledge

This example requires OS-specific knowledge, which can be categorized into two main areas:
1. **Understanding the Linked List Structure:** Knowledge that the `modules` symbol points to the beginning of a linked list, which provides the necessary information.
2. **Offsets within the Module Struct:** Understanding the offsets needed to access information such as the next pointer and the module name.

This type of information is common for introspection applications and can be found in the Linux source code and in Bovet and Cesati’s kernel book [5].

### Additional Examples

The above example is straightforward and demonstrates XenAccess's introspection capabilities. Other monitors are similarly simple. For instance, we developed an application to monitor changes in the system call table (110 SLOC) and another to monitor the integrity of an installed LKM (172 SLOC). These types of monitoring have clear security applications, such as intrusion detection and integrity checking, and have been well-documented in the literature. XenAccess facilitates these applications by providing memory access at the appropriate levels of abstraction. Compared to other virtualization monitoring architectures, such as the work by Asrigo et al. [2], XenAccess allows for rapid monitor development because monitors are small user-space applications rather than kernel hooks. Based on our experience, we believe that our architecture satisfies property (4).

### Virtual Disk Monitoring

In this example, three file/directory creation/deletion commands are executed inside domU, followed by the `sync` command to flush the changes to disk. In the management VM, a monitoring program runs, which catches changes to the `/root` directory in domU for 30 seconds using XenAccess disk monitoring capabilities. This is achieved by initializing the engine and setting a watchpoint in `/root` using the `xadisk_set_watch()` function.

**Program 5.2: Disk Monitoring Application**
```c
xadisk_t *x;
xadisk_obj_t *obj;

x = xadisk_init(1, FILE_IMAGE);
obj = xadisk_set_watch(x, argv[1]);
xadisk_activate(x, "/dev/xen/tapfifo0\0");
dup2(1, x->fifo_fd);
sleep(30);
xadisk_unset_watch(x, obj);
xadisk_destroy(x);
```

**Sample Execution:**
- **domU:**
  ```sh
  mkdir foo
  touch dummy
  rm bar
  sync
  ```
- **dom0:**
  ```sh
  ./monitor /root
  MKDIR: /root/foo
  MKFILE: /root/dummy
  RMFILE: /root/bar
  ```

### Security Applications

From a security perspective, one application of this engine is a disk-based intrusion detection system [22, 12], which aims to detect suspicious file/directory creation/deletion commonly performed by rootkits. Watchpoints would typically be set in privileged system directories such as `/bin` and `/usr/bin`. An IDS deployed in this manner does not require additional hardware in the hard drive, as traditional disk-based IDSes do to achieve isolation. In our case, the isolation is provided by the VMM.

### Challenges and Future Work

One challenge in this type of monitoring is that changes made to the filesystem are not immediately committed to the disk in modern operating systems. This can have serious implications for real-time disk-based IDSes, as it opens a window for evasion attacks. One potential solution is to use disk monitoring together with memory introspection, where disk flushes could be enforced by manipulating the flushing timers in the guest OS memory through introspection. This approach is currently being investigated, along with other methods to integrate memory introspection and disk monitoring.

### Discussion and Future Work

XenAccess satisfies the six requirements for a robust monitoring solution:
1. **VMM Platform:** Uses an unmodified version of Xen.
2. **No Special Code Required:** No special code needs to be inserted into the target OS, allowing XenAccess to work with both open and closed source OSes.
3. **Performance:** Our performance testing shows minimal overhead, making XenAccess effective for various monitoring applications.
4. **Ease of Development:** Developing monitors with XenAccess is straightforward, with a minimal learning curve.
5. **Extensibility:** The XenAccess architecture is easily extensible to collect any type of data from the target OS.
6. **Isolation:** Leveraging the protections provided by the VMM, XenAccess is sufficiently isolated from the target OS and any possibility of tampering by malicious software.

Future research will focus on:
- **Dynamic Adaptation:** Finding techniques to enable dynamic adaptation to OS upgrades, hotfixes, or patches.
- **Scalability and Functionality:** Improving scalability and functionality, particularly in HVM support, which will require changes to tap into the QEMU device driver mechanism used by Xen.

### Conclusion

This paper describes XenAccess, a monitoring library for Xen virtual machines. XenAccess provides virtual memory introspection and virtual disk monitoring capabilities by leveraging Xen's existing infrastructure. Our evaluation shows that XenAccess imposes minimal performance overhead and can gather useful information for memory introspection and disk monitoring. 

### Acknowledgments

This work was supported in part by the National Science Foundation under Grant No. CNS-0627430. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[1] A. C. Arpaci-Dusseau and R. H. Arpaci-Dusseau. Information and control in gray-box systems. In Proceedings of the 18th Symposium on Operating System Principles, 2001.

[2] K. Asrigo, L. Litty, and D. Lie. Using VMM-based sensors to monitor honeypots. In Proceedings of the 2nd ACM/USENIX International Conference on Virtual Execution Environments, 2006.

[3] P. Barford and V. Yegneswaran. An inside look at botnets. In Advances in Information Security. Springer, 2006.

[4] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the art of virtualization. In Proceedings of the 19th ACM Symposium on Operating Systems Principles, 2003.

[5] D. P. Bovet and M. Cesati. Understanding the Linux Kernel. O’Reilly & Associates, Inc., 3rd edition, 2005.

[6] J. Dike. User Mode Linux. Prentice Hall, 1st edition, April 2006.

[7] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M. Chen. Revirt: Enabling intrusion analysis through virtual-machine logging and replay. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation, December 2002.

[8] P. Elango, S. Krishnakumaran, and R. H. Arpaci-Dusseau. Design choices for utilizing the disk idleness in a virtual machine environment. In Workshop on the Interaction between Operating Systems and Computer Architecture, June 2006.

[9] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), October 2003.

[10] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. In Proceedings of the 2003 Network and Distributed System Symposium, 2003.

[11] R. Goldberg. Survey of virtual machine research. IEEE Computer Magazine, 7:34 – 45, June 1974.

[12] J. L. Griffin, A. Pennington, J. S. Bucy, D. Choundappan, N. Muralidharan, and G. R. Ganger. On the feasibility of intrusion detection inside workstation disks. Technical Report CMU-PDL-03-106, Carnegie Mellon University, 2003.

[13] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Antfarm: Tracking processes in a virtual machine environment. In Proc. of the USENIX Annual Technical Conference, June 2006.

[14] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Geiger: Monitoring the buffer cache in a virtual machine environment. In Architectural Support for Programming Languages and Operating Systems (ASPLOS XII), San Jose, CA, October 2006.

[15] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting past and present intrusions through vulnerability-specific predicates. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), pages 1–15, Oct 2005.

[16] P. A. Karger, M. E. Zurko, D. W. Bonin, A. H. Mason, and C. E. Kahn. A retrospective on the VAX VMM security kernel. IEEE Transactions on Software Engineering, 17(11), November 1991.

[17] N. L. Kelem and R. J. Feiertag. A separation model for virtual machine monitors. In Proceedings of the 1991 IEEE Symposium on Research in Security and Privacy, pages 78 – 86, 1991.

[18] K. Kourai and S. Chiba. Hyperspector: Virtual distributed monitoring environments for secure intrusion detection. In Proceedings of the 1st ACM/USENIX International Conference on Virtual Execution Environments, 2005.

[19] R. Love. Linux Kernel Development. Novell Press, 2nd edition, 2005.

[20] S. E. Madnick and J. J. Donovan. Application and analysis of the virtual machine approach to information system security and isolation. In Proceedings of the Workshop on Virtual Computer Systems, pages 210 – 224, March 1973.

[21] R. Meushaw and D. Simard. Nettop: A network on your desktop. Tech Trend Notes (NSA), 9(4):3 – 11, Fall 2000.

[22] A. G. Pennington, J. D. Strunk, J. L. Griffin, C. A. N. Soules, G. R. Goodson, and G. R. Ganger. Storage-based intrusion detection: Watching storage activity for suspicious behavior. In Proceedings of the 12th USENIX Security Symposium, 2003.

[23] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - a coprocessor-based kernel runtime integrity monitor. In Proceedings of the 13th USENIX Security Symposium, August 2004.

[24] Qumranet, Inc. KVM: Kernel-based virtualization driver.

[25] J. S. Robin and C. E. Irvine. Analysis of the Intel Pentium’s ability to support a secure virtual machine monitor. In Proceedings of the 9th USENIX Security Symposium, 2000.

[26] M. E. Russinovich and D. A. Solomon. Microsoft Windows Internals. Microsoft Press, 4th edition, 2004.

[27] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger, J. Griffin, and L. van Doorn. Building a MAC-based security architecture for the Xen open-source hypervisor. In Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC), December 2005.

[28] J. H. Saltzer and M. D. Schroeder. The protection of information in computer systems. Communications of the ACM, 17(7), July 1974.

[29] M. Sivathanu, V. Prabhakaran, F. I. Popovici, T. E. Denehy, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Semantically-smart disk systems. In Proceedings of FAST: 2nd USENIX Conference on File and Storage Technologies, 2003.

[30] J. D. Strunk, G. R. Goodson, M. L. Scheinholtz, C. A. N. Soules, and G. R. Ganger. Self-securing storage: Protecting data in compromised systems. In Proceedings of the 4th Symposium on Operating Systems Design and Implementation, 2000.

[31] C. A. Waldspurger. Memory resource management in VMware ESX Server. In Proceedings of the 5th Symposium on Operating Systems Design and Implementation (OSDI ’02), volume 36, pages 181 – 194, 2002.

[32] A. Warfield. Virtually persistent data. In Xen Developer’s Summit (Fall 2006), 2006.