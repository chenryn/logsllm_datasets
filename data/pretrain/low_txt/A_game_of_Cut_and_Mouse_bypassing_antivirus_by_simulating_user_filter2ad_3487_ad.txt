### Processes and Anti-Malware Defense Strategies

Anti-malware applications enhance their defense strategies by relying on whether an application is whitelisted, meaning it is trusted. Only trusted applications, for instance, can access protected files. However, our findings reveal a discrepancy: medium-integrity level applications, such as Notepad, are considered trusted and thus allowed to access protected files. Yet, an application with a medium integrity level running with standard user rights does not necessarily behave in a benign manner. As demonstrated with Notepad, medium but untrusted applications, such as malware, can exploit this trust by using the application as a puppet, thereby bypassing anti-malware defenses.

### Proposed Defense Strategy

We propose a more robust defense strategy by combining integrity levels and the trust labels used by anti-malware. This can be encapsulated in the following principle:

**Security Principle 1:** Messages between applications should be allowed only when the sender has at least the same integrity level as the receiver and is at least as trusted as the receiver.

This principle draws inspiration from the Bell and La Padula Model, which governs information flow between different security clearance levels. However, our principle focuses on "security" rather than confidentiality. To formalize Principle 1, components should be classified by "security levels," which consist of two elements: User Interface Privilege Isolation (UIPI) "integrity levels" (I = [admin, user, sandbox], ordered) and the anti-virus software’s "trust levels" (T = [digitally signed/whitelisted, not digitally signed/not whitelisted], also ordered). Principle 1 suggests that an application with a security level (I, T) should not accept messages from applications with a security level (I', T') if (I' < I) or if (I' ≥ I) but (T' < T).

### Conclusion and Implications

Applying Principle 1 would have prevented attacks like those leveraging SendInput to affect whitelisted applications, such as Notepad. However, it is essential to evaluate whether this approach might break existing automation software solutions. A comprehensive assessment would require widespread testing of automation applications. Additionally, this principle encourages antivirus vendors to take measures not only to protect the system but also to safeguard their antivirus programs against other supposedly trusted applications, in addition to conventional malware attacks. A practical solution is to configure the antivirus kernel module to require administrative rights for access. Monitoring the SendInput API and blocking all simulated keyboard and mouse events dispatched to the antivirus program could also be beneficial, although distinguishing between human-generated and programmatically generated low-level events remains a challenge.

### Related Work

#### Attacks Involving Simulated Inputs

Simulating input events, such as mouse clicks or keystrokes, is a common technique used in various malicious activities. This section reviews some of the most powerful attack techniques that utilize input simulation.

**Ghost Clicks:**
- **Springall et al. (2014)**: Developed a proof-of-concept malware to manipulate votes in the Estonian Internet Voting system. The malware simulates keyboard inputs to activate voters' electronic identifiers and submit votes in hidden sessions.
- **Maruyama et al. (2019)**: Demonstrated a method to generate tap events on smartphone touchscreens using electromagnetic waves, forcing the device to pair with a malicious Bluetooth device and altering user selections.

**Click Fraud:**
- **Sharif et al. (2008)**: Explored how pay-per-click advertising systems are vulnerable to fraudulent clicks, allowing malicious advertisers to increase their payments.

**Synthetic Clicks:**
- **Wardle (2015)**: Exploited a bug in macOS to send programmatically-created mouse click events to security prompts, leading to vertical privilege escalation and potential data theft. Our attacks, Cut-and-Mouse and Ghost Control, target Windows OS without relying on OS bugs and can instruct privileged applications to perform various malicious operations.

**Reprogramming USB Firmware:**
- **Nohl et al. (2014)**: Demonstrated the BadUSB technique, where a USB device's firmware is reprogrammed to simulate keystrokes, potentially downloading and executing malware.

**Shatter Attack:**
- **Paget (2002)**: Described a weakness in the Windows OS that allows a process to inject arbitrary code into another process. The "shatter attack" involves copying code to the clipboard, pasting it into the target process, and then executing it. Unlike our attacks, the shatter attack requires the presence of malicious code during injection.

#### Previous Research on Antivirus Security

Antivirus software has been a significant target for security researchers due to its critical role. Many studies have focused on evasion techniques, such as obfuscation, to bypass detection. Implementation-related vulnerabilities in antivirus software have also been extensively studied, with several bugs discovered. Al-Saleh and Crandall (2011) developed a technique to determine if an antivirus is up-to-date using side-channel analysis, allowing attackers to learn about the signatures in the virus database.

### Conclusions

Antivirus programs have become a de facto standard in computer security, especially with the integration of ransomware detection modules. Despite the attention to security, we found that interactions between OS defenses and antivirus defenses can be exploited. Specifically, we demonstrated that a malicious program can (i) disable real-time scanning protection and (ii) bypass anti-ransomware solutions by misusing whitelisted applications. We provided two proof-of-concept programs, Ghost Control and Cut-and-Mouse, to illustrate these vulnerabilities. Fixing these issues requires a better understanding of the underlying causes, which we addressed in Principle 1.

### Acknowledgments

This work was partially funded by the European Union’s Horizon 2020 research and innovation programme under grant agreement No 779391 (FutureTPM) and by the Luxembourg National Research Fund (FNR) under the project PoC18/13234766-NoCry PoC.

### References

[1] Mohsen Ahmadvand, Alexander Pretschner, and Florian Kelbert. 2019. A taxonomy of software integrity protection techniques. In Advances in Computers. Vol. 112. Elsevier, Cambridge, MA, USA, 413–486.

[2] Mohammed I. Al-Saleh and Jedidiah R. Crandall. 2011. Application-level Reconnaissance: Timing Channel Attacks Against Antivirus Software. In Proceedings of the 4th USENIX Conference on Large-scale Exploits and Emergent Threats (LEET’11). USENIX Association, Berkeley, CA, USA, 9.

[3] Chris Paget (alias Foon). 2002. Exploiting design flaws in the Win32 API for privilege escalation. Retrieved May 15, 2019 from https://web.archive.org/web/20060904080018/http://security.tombom.co.uk/shatter.html

[4] Hyrum S. Anderson, Anant Kharkar, Bobby Filar, David Evans, and Phil Roth. 2018. Learning to Evade Static PE Machine Learning Malware Models via Reinforcement Learning. arXiv:cs.CR/1801.08917

[5] AV-TEST. 2019. The best antivirus software for Windows Home User. Retrieved June 10, 2019 from https://www.av-test.org/en/antivirus/home-windows/

[6] D. E. Bell and L. J. La Padula. 1976. Secure computer system: Unified exposition and Multics interpretation. Technical Report ESD-TR-75-306. Mitre Corporation.

[7] Battista Biggio and Fabio Roli. 2018. Wild Patterns: Ten Years After the Rise of Adversarial Machine Learning. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS ’18). ACM, New York, NY, USA, 2154–2156. https://doi.org/10.1145/3243734.3264418

[8] Iker Burguera, Urko Zurutuza, and Simin Nadjm-Tehrani. 2011. Crowdroid: Behavior-based Malware Detection System for Android. In Proceedings of the 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM ’11). ACM, New York, NY, USA, 15–26. https://doi.org/10.1145/2046614.2046619

[9] Mihai Christodorescu and Somesh Jha. 2004. Testing malware detectors. ACM SIGSOFT Software Engineering Notes 29, 4 (2004), 34–44.

[10] Ian Goodfellow, Patrick McDaniel, and Nicolas Papernot. 2018. Making Machine Learning Robust Against Adversarial Inputs. Commun. ACM 61, 7 (June 2018), 56–66. https://doi.org/10.1145/3134599

[11] Andy Greenberg. 2019. Another Mac Bug Lets Hackers Invisibly Click Security Prompts. Retrieved June 10, 2019 from https://www.wired.com/story/apple-macos-bug-synthetic-clicks/

[12] IT Services of Mitchell Hamline School of Law. 2017. Technology Notice – Disable Antivirus before using Examplify. Retrieved May 31, 2019 from https://mitchellhamline.edu/technology/2017/12/03/technology-notice-disable-antivirus-before-using-examplify/

[13] S. Josefsson. 2006. The Base16, Base32, and Base64 Data Encodings. RFC 4648. RFC Editor. http://www.rfc-editor.org/rfc/rfc4648.txt

[14] Dhilung Kirat and Giovanni Vigna. 2015. MalGene: Automatic Extraction of Malware Analysis Evasion Signature. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security (CCS ’15). ACM, New York, NY, USA, 769–780.

[15] Joxean Koret. 2014. Breaking Antivirus Software. Retrieved June 10, 2019 from http://joxeankoret.com/download/breaking_av_software_44con.pdf