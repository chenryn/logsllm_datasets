### Avoiding Pipeline Stalls and Reducing HDFI Overhead

To prevent pipeline stalls, it is essential to ensure that the TVB (Tag Verification Buffer) is ready before proceeding. If the TVB misses, the pipeline can stall, leading to increased overhead in the HDFI (Hardware-Enforced Data Flow Integrity) mechanism. By ensuring the TVB is ready, we can avoid such stalls and further reduce the overhead associated with HDFI.

### Improving Cache Design

In our prototype implementation, we did not extend our modifications to the L2 cache. As mentioned in §VI-A, the current design of the TVB is not ideal and may introduce significant performance overhead for unoptimized programs (§VII-D). For future work, we plan to extend our modifications to the L2 cache, incorporating a more efficient TVB implementation to mitigate these issues.

### Dynamic Code Generation

Dynamic code generation is a widely used technique in browsers and OS kernels to enhance performance. However, this technique requires memory to be both writable and executable, making it vulnerable to code injection attacks [67]. Unlike static code, it is challenging to detect malicious modifications in dynamically generated code. In future work, we aim to implement tag checking for instruction fetching. This would involve providing a configuration flag that, when enabled, only allows tagged memory to be fetched as code, thereby enhancing security.

### Conclusion

In this paper, we introduced HDFI, a fine-grained data isolation mechanism. HDFI leverages new machine instructions and hardware features to enforce isolation at the machine word granularity by virtually extending each memory unit with an additional data-flow-defined tag. To implement HDFI, we extended the RISC-V instruction set architecture and instantiated it on the Xilinx Zynq ZC706 evaluation board. Our evaluation, using benchmarks such as SPEC CINT 2000, showed that the performance overhead due to our hardware modifications is low (< 2%). We also implemented several security mechanisms, including stack protection, standard library enhancement, virtual function table protection, code pointer protection, kernel data protection, and information leak prevention, all of which demonstrated that HDFI is easy to use, imposes minimal performance overhead, and significantly improves security.

### Acknowledgment

We thank Manuel Costa and the anonymous reviewers for their valuable feedback, as well as our operations staff for their proofreading efforts. This research was supported by the NSF awards CNS-1017265, CNS-0831300, CNS-1149051, and DGE-1500084, by the ONR under grants N000140911042 and N000141512162, by the DHS under contract N66001-12-C-0133, by the United States Air Force under contract FA8650-10-C-7025, by the DARPA Transparent Computing program under contract DARPA-15-15-TC-FP-006, and by the ETRI MSIP/IITP[B0101-15-0644]. The opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF, ONR, DHS, United States Air Force, or DARPA.

### References

[1] "CVE-2013-6282," CVE-2013-6282.
[https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6282]

[2] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro, “Preventing memory error exploits with WIT,” in IEEE Symposium on Security and Privacy (Oakland), 2008.

[3] ARM, “CoreLinkTM TrustZone Address Space Controller TZC-380,”
[http://infocenter.arm.com/help/topic/com.arm.doc.ddi0431c/DDI0431C_tzasc_tzc380_r0p1_trm.pdf, 2010.]

[4] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and W. Shen, “Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world,” in ACM Conference on Computer and Communications Security (CCS), 2014.

[5] D. E. Bell and L. J. LaPadula, “Secure computer systems: Mathematical foundations,” DTIC Document, Tech. Rep., 1973.

[6] K. J. Biba, “Integrity considerations for secure computer systems,” DTIC Document, Tech. Rep., 1977.

[7] D. Bounov, R. Kici, and S. Lerner, “Protecting C++ dynamic dispatch through vtable interleaving,” in Annual Network and Distributed System Security Symposium (NDSS), 2016.

[8] W. S. A. Bradbury and R. Mullins, “Towards general-purpose tagged memory,”
[http://riscv.org/workshop-jun2015/riscv-tagged-mem-workshop-june2015.pdf, 2015.]

[9] K. Bulba, “Bypassing StackGuard and StackShield,” Phrack Magazine, vol. 10, no. 56, 2000.

[10] M. Castro, M. Costa, and T. Harris, “Securing software by enforcing data-flow integrity,” in Symposium on Operating Systems Design and Implementation (OSDI), 2006.

[11] M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Donnelly, P. Barham, and R. Black, “Fast byte-granularity software fault isolation,” in ACM Symposium on Operating Systems Principles (SOSP), 2009.

[12] C. Celio, D. A. Patterson, and K. Asanović, “The Berkeley Out-of-Order Machine (BOOM): An industry-competitive, synthesizable, parameterized RISC-V processor,”
[http://www.eecs.berkeley.edu/Pubs/TechRpts/2015/EECS-2015-167.html, UCB, Tech. Rep. UCB/EECS-2015-167, 2015.]

[13] S. Chen, M. Kozuch, T. Strigkos, B. Falsafi, P. B. Gibbons, T. C. Mowry, V. Ramachandran, O. Ruwase, M. Ryan, and E. Vlachos, “Flexible hardware acceleration for instruction-grain program monitoring,” in Annual International Symposium on Computer Architecture (ISCA), 2008.

[14] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer, “Non-control-data attacks are realistic threats,” in Usenix Security Symposium (Security), 2005.

[15] Codenomicon and N. Mehta, “The Heartbleed Bug,”
[http://heartbleed.com/, 2014.]

[16] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, M. Negro, M. Qunaibit, and A. R. Sadeghi, “Losing control: On the effectiveness of control-flow integrity under stack attacks,” in ACM Conference on Computer and Communications Security (CCS), 2015.

[17] C. Cowan, S. Beattie, J. Johansen, and P. Wagle, “PointGuard TM: Protecting pointers from buffer overflow vulnerabilities,” in Usenix Security Symposium (Security), 2003.

[18] J. R. Crandall and F. T. Chong, “Minos: Control data attack prevention orthogonal to memory model,” in International Symposium on Microarchitecture (MICRO), 2004.

[19] J. Criswell, N. Dautenhahn, and V. Adve, “KCoFI: Complete control-flow integrity for commodity operating system kernels,” in IEEE Symposium on Security and Privacy (Oakland), 2014.

[20] M. Dalton, H. Kannan, and C. Kozyrakis, “Raksha: A flexible information flow architecture for software security,” in Annual International Symposium on Computer Architecture (ISCA), 2007.

[21] T. H. Dang, P. Maniatis, and D. Wagner, “The performance cost of shadow stacks and stack canaries,” in ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2015.

[22] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and V. Adve, “Nested kernel: An operating system architecture for intra-kernel privilege separation,” in International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2015.

[23] L. Davi, M. Hanreich, D. Paul, A.-R. Sadeghi, P. Koeberl, D. Sullivan, O. Arias, and Y. Jin, “HAFIX: Hardware-assisted flow integrity extension,” in Annual Design Automation Conference, 2015.

[24] L. Davi, P. Koeberl, and A. R. Sadeghi, “Hardware-assisted fine-grained control-flow integrity: Towards efficient protection of embedded systems against software exploitation,” in Annual Design Automation Conference, 2014.

[25] D. Y. Deng and G. E. Suh, “High-performance parallel accelerator for flexible and efficient run-time monitoring,” in International Conference on Dependable Systems and Networks (DSN), 2012.

[26] S. Designer, “Getting around non-executable stack (and fix),”
[http://seclists.org/bugtraq/1997/Aug/63, 1997.]

[27] J. Devietti, C. Blundell, M. M. K. Martin, and S. Zdancewic, “HardBound: Architectural support for spatial safety of the C programming language,” in International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2008.

[28] U. Dhawan, N. Vasilakis, R. Rubin, S. Chiricescu, J. M. Smith, T. F. Knight Jr, B. C. Pierce, and A. DeHon, “Pump: A programmable unit for metadata processing,” in Workshop on Hardware and Architectural Support for Security and Privacy (HASP), 2014.

[29] U. Drepper, “Pointer encryption,”
[http://udrepper.livejournal.com/13393.html, 2007.]

[30] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula, “XFI: Software guards for system address spaces,” in Symposium on Operating Systems Design and Implementation (OSDI), 2006.

[31] C. Evans and T. Ormandy, “The poisoned NUL byte, 2014 edition,” 2014.

[32] I. Evans, S. Fingeret, J. González, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi, “Missing the point(er): On the effectiveness of code pointer integrity,” in IEEE Symposium on Security and Privacy (Oakland), 2015.

[33] J. N. Ferguson, “Understanding the heap by breaking it,” 2007, black Hat USA.

[34] J. Graham-Cumming, “Searching for the prime suspect: How heartbleed leaked private keys,”
[https://blog.cloudflare.com/searching-for-the-prime-suspect-how-heartbleed-leaked-private-keys/, 2014.]

[35] H. Hu, Z. L. Chua, S. Adrian, P. Saxena, and Z. Liang, “Automatic generation of data-oriented exploits,” in Usenix Security Symposium (Security), 2015.

[36] Intel Corporate, “Intel architecture instruction set extensions programming reference,”
[https://software.intel.com/en-us/intel-architecture-instruction-set-extensions-programming-reference, 2013.]

[37] A. Jaleel, “Memory characterization of workloads using instrumentation-driven simulation,”
[http://www.glue.umd.edu/~ajaleel/workload/, 2008.]

[38] D. Jang, Z. Tatlock, and S. Lerner, “SAFEDISPATCH: Securing C++ virtual calls from memory corruption attacks,” in Annual Network and Distributed System Security Symposium (NDSS), 2014.

[39] M. Kaempf, “Smashing the heap for fun and profit,” Phrack Magazine, vol. 11, no. 57, 2001.

[40] H. Kannan, M. Dalton, and C. Kozyrakis, “Decoupling dynamic information flow tracking with a dedicated coprocessor,” in International Conference on Dependable Systems and Networks (DSN), 2009.

[41] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and D. Ponomarev, “Branch regulation: Low-overhead protection from code reuse attacks,” in Annual International Symposium on Computer Architecture (ISCA), 2012.

[42] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu, “Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors,” in Annual International Symposium on Computer Architecture (ISCA), 2014.

[43] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song, “Code-pointer Integrity,” in Symposium on Operating Systems Design and Implementation (OSDI), 2014.

[44] ——, “Code pointer integrity (early technology preview),”
[https://dslabpc10.epfl.ch/ssl_read/levee/levee-early-preview-0.2.tgz, 2014.]

[45] D. Lea and W. Gloger, “A memory allocator,” 1996.

[46] R. B. Lee, D. K. Karig, J. P. McGregor, and Z. Shi, “Enlisting hardware architecture to thwart malicious code injection,” in Security in Pervasive Computing. Springer, 2004, pp. 237–252.

[47] H. Mao, “make sure memory passes l2 through acquires no-alloc,”
[https://github.com/ucb-bar/uncore/commit/e53b5072caf12a2c18245cecd709204a4231d2d9, 2015.]

[48] J. D. McCalpin, “Memory bandwidth and machine balance in current high performance computers,” IEEE Computer Society Technical Committee on Computer Architecture (TCCA) Newsletter, pp. 19–25, Dec. 1995.

[49] L. McVoy and C. Staelin, “Lmbench: Portable tools for performance analysis,” in ATC Annual Technical Conference (ATC), 1996.

[50] H. Moon, H. Lee, J. Lee, K. Kim, Y. Paek, and B. B. Kang, “Vigilare: Toward snoop-based kernel integrity monitor,” in ACM Conference on Computer and Communications Security (CCS), 2012.

[51] S. Nagarakatte, M. M. K. Martin, and S. Zdancewic, “Watchdog: Hardware for safe and secure manual memory management and full memory safety,” in Annual International Symposium on Computer Architecture (ISCA), 2012.

[52] S. Nagarakatte, M. M. Martin, and S. Zdancewic, “WatchdogLite: Hardware-accelerated compiler-based pointer checking,” in International Symposium on Code Generation and Optimization (CGO), 2014.

[53] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic, “SoftBound: highly compatible and complete spatial memory safety for C,” in ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2009.

[54] ——, “CETS: Compiler enforced temporal safety for C,” in International Symposium on Memory Management, 2010.

[55] G. C. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer, “CCured: type-safe retrofitting of legacy software,” ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 27, no. 3, pp. 477–526, 2005.

[56] J. Newsome and D. Song, “Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software,” in Annual Network and Distributed System Security Symposium (NDSS), 2005.

[57] Oracle, “Introduction to SPARC M7 and application data integrity (ADI),”
[https://swisdev.oracle.com/_files/What-Is-ADI.html, 2015.]

[58] A. Ou, A. Waterman, Q. Nguyen, darius bluespec, and P. Dabbelt, “RISC-V Linux Port,”
[https://github.com/riscv/riscv-linux, 2015.]

[59] H. Ozdoganoglu, T. Vijaykumar, C. E. Brodley, B. Kuperman, and A. Jalote, “SmashGuard: A hardware solution to prevent security attacks on the function return address,” Computers, IEEE Transactions on, 2006.

[60] G. F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi, “Surgically returning to randomized lib(c),” in Annual Computer Security Applications Conference (ACSAC), 2009.

[61] C. Schmidt, “Low Level Virtual Machine (LLVM),”
[https://github.com/riscv/riscv-llvm, 2014.]

[62] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz, “Counterfeit Object-oriented Programming: On the difficulty of preventing code reuse attacks in C++ applications,” in IEEE Symposium on Security and Privacy (Oakland), 2015.

[63] D. Sehr, R. Muth, C. Biffle, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen, “Adapting software fault isolation to contemporary CPU architectures,” in Usenix Security Symposium (Security), 2010.

[64] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes,” in ACM Symposium on Operating Systems Principles (SOSP), 2007.

[65] H. Shacham, “The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86),” in ACM Conference on Computer and Communications Security (CCS), 2007.

[66] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee, “Enforcing kernel security invariants with data flow integrity (to appear),” in Annual Network and Distributed System Security Symposium (NDSS), 2016.

[67] C. Song, C. Zhang, T. Wang, W. Lee, and D. Melski, “Exploiting and protecting dynamic code generation,” in Annual Network and Distributed System Security Symposium (NDSS), 2015.

[68] Standard Performance Evaluation Corporation, “SPEC CPU2000 benchmark descriptions - CINT 2000,”
[https://www.spec.org/cpu2000/CINT2000/, 2003.]

[69] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas, “Secure program execution via dynamic information flow tracking,” in International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2004.

[70] L. Szekeres, M. Payer, T. Wei, and D. Song, “Sok: Eternal war in memory,” in IEEE Symposium on Security and Privacy (Oakland), 2013.

[71] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity in GCC & LLVM,” in Usenix Security Symposium (Security), 2014.

[72] UC Berkeley Architecture Research, “The RISC-V instruction set architecture,”
[http://riscv.org/, 2015.]

[73] ——, “Rocket chip generator,”
[https://github.com/ucb-bar/rocket-chip, 2015.]

[74] ——, “Rocket microarchitectural implementation of RISC-V ISA,”
[https://github.com/ucb-bar/rocket, 2015.]

[75] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic, “FlexiTaint: A programmable accelerator for dynamic taint propagation,” in International Symposium on High Performance Computer Architecture (HPCA), 2008.

[76] A. Waterman, Y. Lee, D. A. Patterson, and K. Asanović, “The RISC-V instruction set manual, volume I: User-level ISA, version 2.0,”
[http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-54.html, UCB, Tech. Rep. UCB/EECS-2014-54, 2014.]

[77] R. N. M. Watson, J. Woodruff, P. G. Neumann, S. W. Moore, J. Anderson, D. Chisnall, N. Dave, B. Davis, K. Gudka, B. Laurie, S. J. Murdoch, R. Norton, M. Roe, S. Son, and M. Vadera, “CHERI: A hybrid capability-system architecture for scalable software compartmentalization,” in IEEE Symposium on Security and Privacy (Oakland), 2015.

[78] J. Wilander, N. Nikiforakis, Y. Younan, M. Kamkar, and W. Joosen, “RIPE: Runtime intrusion prevention evaluator,” in Annual Computer Security Applications Conference (ACSAC), 2011.

[79] E. Witchel, J. Cates, and K. Asanović, “Mondrian memory protection,” in International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2002.

[80] Xilinx, “ZC706 evaluation board for the Zynq-7000 XC7Z045 all programmable SoC user guide,”
[http://www.xilinx.com/support/documentation/boards_and_kits/zc706/ug954-zc706-eval-board-xc7z045-ap-soc.pdf, 2015.]

[81] J. Xu, Z. Kalbarczyk, S. Patel, and R. K. Iyer, “Architecture support for defending against buffer overflow attacks,” in Workshop on Evaluating and Architecting Systems for Dependability, 2002.

[82] Z. Yang and M. Yang, “LeakMiner: Detect information leakage on Android with static taint analysis,” in International Workshop on Computer Science and Engineering (WCSE), 2012.

[83] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar, “Native Client: A sandbox for portable, untrusted x86 native code,” in IEEE Symposium on Security and Privacy (Oakland), 2009.

[84] N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis, “Hardware enforcement of application security policies using tagged memory,” in Symposium on Operating Systems Design and Implementation (OSDI), 2008.

[85] C. Zhang, S. A. Carr, T. Li, Y. Ding, C. Song, M. Payer, and D. Song, “VTrust: Regaining trust on virtual calls,” in Annual Network and Distributed System Security Symposium (NDSS), 2016.

[86] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “VTint: Protecting virtual function tables’ integrity,” in Annual Network and Distributed System Security Symposium (NDSS), 2015.

[87] Y. Zhou, X. Wang, Y. Chen, and Z. Wang, “ARMlock: Hardware-based fault isolation for ARM,” in ACM Conference on Computer and Communications Security (CCS), 2014.