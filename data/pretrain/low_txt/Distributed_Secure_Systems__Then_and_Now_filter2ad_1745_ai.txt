### Clear and Coherent Text

The plaintext that passes through its input to output channels resembles packet headers and has limited bandwidth. There are no other channels connecting the red side to the black side. With this architecture, the black side (which contains the protocol stack, network drivers, and other complex software) can be entirely untrusted, as can the red side.

To maximize the benefits of this approach, we should assume that the resources required for subjects and their communication channels are inexpensive. We should create subjects and channels freely whenever this can minimize the complexity of trusted subjects. Complexity here refers to the difficulty of the associated assurance task, which generally depends on both the function provided by the subject and the property to be trusted. Papers on MILS often illustrate more elaborate encryption devices with 12 subjects (e.g., Figure 12 in [1]), and MILS architectures for platforms like the F-22 have hundreds or thousands of subjects.

We can design under the assumption that subjects and communication channels are cheap because the lower level of the MILS architecture makes them so—through the provision of efficient and secure resource sharing. The MILS architecture comprises several interoperable components, each of which "partitions" individual physical or logical resources into many separated instances that communicate only through controlled channels. These components are specialized to the kind of resource they manage: a separation kernel handles partitioned communication systems and networks, while virtualized NICs provide securely multiplexed communications with various levels of functionality (roughly, CORBA, TCP/IP, and bare metal). A partitioned file system provides storage functions similar to those proposed for the DSS filestore, and a console subsystem securely partitions display areas.

Whereas DSS was conceived as a single system, MILS is conceived as an architecture and a collection of components that integrators can use to build many systems. Part of the aim of MILS is to foster an infrastructure of commercial off-the-shelf (COTS) security components. To this end, Common Criteria Protection Profiles are being developed for separation kernels (SKPP), partitioned communication systems (PCSPP), network subsystems (MNSPP), and other MILS elements. The idea is that vendors will develop a COTS marketplace for MILS-compliant components. The SKPP has been approved [21], and one commercial separation kernel has been evaluated against it (to approximately EAL7), with others planned.

No complete system has been fielded yet, so what are the reasons for believing MILS will be more successful? First, the basic technology has evolved and improved greatly over the years. Separation kernels are similar to the partitioning real-time kernels used routinely in modern avionics (some vendors base their separation kernel on their avionics offering) and to hypervisors such as Xen (one project aims to develop a separation kernel by slicing Xen to a minimal subset). Improved hardware support, such as the Intel VT architecture, and improved understanding of kernel APIs (such as paravirtualization), all simplify the task of developing a separation kernel and improve its performance. It is entirely feasible to contemplate 100,000 partition switches per second at a performance cost in single percentage digits. (On the other hand, modern cache architectures make it difficult and costly to reduce covert channel bandwidth as they introduce wide variation into execution time.) Similarly, avionics buses such as AFDX and TTA demonstrate the feasibility of partitioned communications, while integrated modular avionics (IMA) architectures used successfully in modern commercial airplanes such as the Boeing 777 and 787 and Airbus A380 have much in common with MILS.

Second, the use of distributed computation in DSS was advanced for its time, and there was little intellectual or infrastructural support for developing distributed systems. The prevalent thinking was of networks, rather than systems (hence [15]). Now, we have middleware and rich infrastructure for developing distributed applications.

Finally, there is improved understanding of system development and system integration processes and their management. The devolved, component-based approach used in IMA and MILS seems more robust than the central planning used for DSS TDP.

Looking forward, twenty-five years is often cited as the time lag from research to deployment. The 25th anniversary of the publication of the DSS paper is approaching (the extended abstract [19] must have been submitted to the conference around December 1982, and the technical report [18] would have been completed about the same time), so we are hopeful that the successful realization of these ideas is imminent.

As described above, our hope currently rests on the MILS architecture (and a similar program called HAP, which is developing a specific platform rather than a set of components). However, a successful system based around MILS would initially establish only the pragmatic viability of the DSS approach; the bigger challenge is to develop a certifiably secure system this way.

As noted, DSS was conceived as a system, and its components were designed for their specific role within the system; MILS, in contrast, is conceived as a set of components that can be integrated with bespoke and glue components to realize many systems. Roughly, DSS was top-down, while MILS is bottom-up. What is the assurance argument for certifiable security of a system assembled this way? That is the role of the MILS architecture, and it must be additively composable (circles and arrows). The Integration Protection Profile (MIPP) being developed by Rushby and Rance DeLong specifies that the upper level must be compositional, and the lower (resource sharing) level must be composable.

Intuitively, compositionality means that there must be a way to calculate the collective security properties of the upper-level components given the security properties of the components. Composable means that the security properties of a collection of upper-level components are unchanged when these run in the environment provided by a lower-level component (even if faulty or malicious upper-level components are also present). Additive means that a collection of composable lower-level components is itself composable.

We believe these ideas can be developed to provide a formal foundation for compositional certification in security and other critical fields, including safety [16]. Compositional assurance and certification seem a worthwhile research challenge for the next twenty-five years and a logical continuation of the design vision that inspired DSS.

### References

[1]. J. Alves-Foss, P.W. Oman, C. Taylor, and W.S. Harrison, “The MILS Architecture for High-Assurance Embedded Systems,” International Journal of Embedded Systems, vol. 2, no. 3/4, pp. 239-247, 2006.

[2]. J. Alves-Foss, C. Taylor, and P. Oman, “A Multi-Layered Approach to Security in High Assurance Systems,” in the 37th Annual Hawaii International Proceedings of Conference on System Sciences, Waikoloa, HI, IEEE Computer Society, 2004.

[3]. T. Anderson and P.A. Lee, Fault Tolerance: Principles and Practice, Prentice Hall, 1981.

[4]. D.H. Barnes, “The Provision of Security for User Data on Packet Switched Networks,” in Proc. 1983 Symp. on Security and Privacy, pp. 121-126, Oakland, CA, IEEE Computer Society Press, 1983.

[5]. D.H. Barnes and R. MacDonald, “A Practical Distributed Secure System,” J. Institution of Electronic and Radio Engineers, vol. 56, no. 5, pp. 192-196, 1986.

[6]. A.S. Bates, “Distributed Secure Systems,” in Proc. DECUS 91, University of Warwick, UK, 1991.

[7]. D.R. Brownbridge, L.F. Marshall, and B. Randell, “The Newcastle Connection, or - UNIXes of the World Unite!,” Software Practice and Experience, vol. 12, no. 12, pp. 1147-1162, 1982.

[8]. J.E. Dobson and B. Randell, “Building Reliable Secure Systems out of Unreliable Insecure Components,” in Proc. Conf. on Security and Privacy, Oakland, IEEE Computer Society Press, 1986.

[9]. DoD, Department of Defense Trusted Computer System Evaluation Criteria, DOD 5200.28.STD (supersedes CSC-STD-001-83), Department of Defense, Washington, DC, USA, 1985.

[10]. W. Martin, P. White, F.S. Taylor, and A. Goldberg, “Formal Construction of the Mathematically Analyzed Separation Kernel,” in Proc. 15th IEEE international conference on Automated software engineering, pp. 133-142, Washington, DC, USA, IEEE Computer Society, 2000.

[11]. P. Naur and B. Randell, (Ed.), Software Engineering: Report of a conference sponsored by the NATO Science Committee, Garmisch, Germany, 7th to 11th October 1968, Brussels, Scientific Affairs Division, NATO, 1969, 231 p.

[12]. B. Randell, “Recursively Structured Distributed Computer Systems,” in Proc. 3rd Symp. on Reliability on Distributed Software and Database Systems, pp. 3-11, Clearwater Beach, Florida, IEEE Computer Society Press, 1983.

[13]. J.M. Rushby, “The Design and Verification of Secure Systems,” in Proc. Symp. on Operating System Principles (SOSP-8), pp. 12-21, ACM, 1981. [ACM Operating Systems Review, Vol. 15, No. 5]

[14]. J.M. Rushby, “Proof of Separability - A Verification Technique for a Class of Security Kernels,” in Proc. 5th International Symposium on Programming, pp. 352-367, Turin, Italy, Springer Verlag LNCS Vol. 137, 1982.

[15]. J.M. Rushby, “Networks are Systems,” in Proc. Department of Defense Computer Security Center Invitational Workshop on Network Security, pp. 7.24-7.37, New Orleans, LA, Department of Defense Computer Security Center, 1985. [Reprinted Abrams & Podell, pp. 300-316]

[16]. J.M. Rushby, “Just-in-Time Certification,” in Proc. 12th IEEE International Conference on the Engineering of Complex Computer Systems (ICECCS), pp. 15-24, Auckland, New Zealand, IEEE CS, 2007.

[17]. J.M. Rushby and B. Randell, “A Distributed Secure System,” IEEE Computer, vol. 16, no. 7, pp. 55-67, 1983.

[18]. J.M. Rushby and B. Randell, A Distributed Secure System, TR 182, Computing Laboratory, University of Newcastle upon Tyne, 1983.

[19]. J.M. Rushby and B. Randell, “A Distributed Secure System (Extended Abstract),” in Proc. 1983 Symp. on Security and Privacy, pp. 127-135, Oakland, CA, IEEE, 1983.

[20]. R. Schell, “Information Security: Science, Pseudoscience, and Flying Pigs,” in Proc. 17th Computer Security Applications Conference (ACSAC), pp. 205-216, New Orleans, LA, Dec 2001.

[21]. Validated Protection Profile - U.S. Government Protection Profile for Separation Kernels in Environments Requiring High Robustness (Version 1.03), NSA, National Information Assurance Partnership, Information Assurance Directorate, 29 June 2007.

[22]. W.M. Vanfleet, J.A. Luke, R.W. Beckwith, C. Taylor, B. Calloni, and G. Uchenick, “MILS: Architecture for High-Assurance Embedded Computing,” Crosstalk: The Journal of Defense Software Engineering, Aug 2005.

[23]. J. Wood and N. O'Connor, Distributed Secure System Phase 2 Insertion Trials Final Report, Report W041037, Defence Research Agency, 1944.

### Acknowledgements

The preparation of this reprise of our 1983 paper has provided us with a welcome opportunity to renew contact with Derek Barnes and Andy Bates, who have been very helpful to us regarding the aftermath of our work on DSS.

John Rushby’s research was partially supported by AFRL through a subcontract to Raytheon, and by NSF grant CNS-0720908. His work on MILS has been performed in collaboration with Rance DeLong.