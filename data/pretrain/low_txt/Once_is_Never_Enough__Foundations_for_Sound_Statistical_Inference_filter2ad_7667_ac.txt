### Shadow: A User-Space, Single-Process Application

Shadow is a user-space, single-process application that can be easily run on laptops, desktops, and servers with minimal configuration. The resource requirements depend on the size of the experiment model. As a simulator, Shadow has complete control over simulated time, allowing experiments to run faster or slower than real time. This is influenced by:
1. The simulation load relative to the processing resources available on the host machine.
2. The inherent parallelizability of the experiment model.

This control over time decouples the fidelity of the experiment from the processing time required to execute it, enabling Shadow to scale independently of the host machine's processing capabilities. Typically, Shadow is limited by the RAM requirements of its loaded plugins.

### Features of Shadow

Shadow includes several features that make it a powerful tool for Tor experimentation:
- **Dynamic Loading of Independent Namespaces for Plugins**: This allows for flexible and modular plugin management [70].
- **Support for Multi-Threaded Plugins**: Utilizing a non-preemptive concurrent thread scheduling library (GNU Portable Threads) [52].
- **Function Interposition**: This feature allows for the interception and modification of function calls.
- **Event Scheduler Based on Work Stealing**: This enhances the efficiency of event handling [9].

These features collectively make Shadow the most popular and standard tool for conducting Tor performance research [63].

### Improvements to Shadow

After analyzing the results from early experiments, we made several improvements to Shadow, which significantly enhance the accuracy of our Tor network models. These improvements include:
- **Run-time Optimizations**
- **Fixes for Deterministic Execution**
- **Faster Tor Network Bootstrapping**
- **More Realistic TCP Connection Limits**
- **Several Network Stack Improvements**

These enhancements have been incorporated into Shadow v1.13.2. For more details, see the extended version of this paper [40, Appendix C].

### Evaluation

We have made two types of foundational contributions:
1. **Representative Tor Networks**: We produce more representative networks by considering the state of the network over time rather than modeling a single snapshot. This accounts for relay churn, demonstrating how the true Tor network changes over time. Figure 1 shows the rate of relay churn over all 744 consensus files (one per hour) in Tor during January 2019. After two weeks, fewer than 75% of the relays that were part of the network on 2019-01-01 remained, while more than 3,000 new relays joined. After three weeks, more new relays had joined the network than had remained since 2019-01-01.

2. **Scalable Simulations**: Our new models and Shadow enhancements enable researchers to run larger networks faster than previously possible. We demonstrate these improvements through:
   - **Resource Comparison**: Table 2 compares the resources required for the 31% experiments described above. We reduced the time required to execute the bootstrapping process by 2 days, 18 hours, or 80%, and the total time required to run the bootstrapping process plus 25 simulated minutes of steady state by 33 days, 12 hours, or 94%. The ratio of real time units required to execute each simulated time unit during steady state was reduced by 96%.
   - **Larger Models**: We ran three Tor models at scale s = 1.0, i.e., at 100% of the size of the true Tor network. Each of our 100% Tor networks consumed at most 3.9 TiB of RAM, completed bootstrapping in 2 days, 21 hours, and ran the entire simulation (bootstrapping plus 25 simulated minutes of steady state) in 8 days, 6 hours. Figure 3 shows that our 100% networks achieve similar performance compared to the metrics published by Tor [68].

### Statistical Significance of Results

Our modeling methodology produces sampled Tor networks at various scales. The ith resulting Tor network is associated with a probability distribution (cid:98)Pi(X) specific to the ith network. To estimate (cid:98)Pi(X), we run mi > 0 simulations in the ith Tor network. During the jth simulation in the ith network, we sample νi j values of X from (cid:98)Pi(X). These samples form the empirical distribution (cid:101)Ei j(X).

First, we estimate each (cid:98)F−1
Xi (y) as (cid:98)µi(y) = 1/n ∑n
j=1 (cid:101)F−1
Xi j (y). We refer to (cid:98)µi as an estimator of (cid:98)F−1
Xi. Similarly, we estimate F−1
X (y) as µ(y) = 1/n ∑n
i=1 (cid:98)F−1
Xi (y). We refer to µ as an estimator of F−1
X. These estimations allow us to better understand the performance characteristics of the true Tor network.

For more details on the statistical inference, see §5 of the extended version of this paper.