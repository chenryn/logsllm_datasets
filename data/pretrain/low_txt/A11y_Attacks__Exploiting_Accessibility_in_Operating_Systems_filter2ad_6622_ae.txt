### Vulnerability Analysis and Exploitation of Accessibility Features in Modern Operating Systems

#### Introduction
Accessibility features, mandated by the 1973 Rehabilitation Act, have been continuously integrated into operating systems (OSs) to assist users with disabilities. As these features have evolved, they have become sophisticated enough to form a complete I/O subsystem. However, this complexity has introduced security vulnerabilities. This paper analyzes the security of accessibility features on four popular platforms, identifying twelve practical attacks enabled via these features. The root cause of these vulnerabilities is the design and implementation trade-offs between compatibility, usability, and security.

#### Attacks on Windows
- **Speech Recognition Attack on Windows Vista**: An attack was discovered that could control a Windows Vista machine by playing sound to Speech Recognition [28]. However, since the attack could not bypass User Account Control (UAC) and required Speech Recognition to be already enabled, it was considered a minor bug. In contrast, our attack (attack #1) does not require Speech Recognition to be enabled beforehand and can bypass UAC on Windows 7 through 8.1 due to policy changes in UAC [26].
- **UAC Bypass via Explorer.exe**: Just before the release of Windows 7, a UAC bypass attack [10] exploited the special capability of `Explorer.exe` to write to system directories. A malware process would attach to `Explorer.exe`, inject code, and exploit its ability to write to system directories. Our attack #2 follows a similar strategy but uses the accessibility library to click the "OK" button instead of using low-level functions like `WriteProcessMemory()`.

#### Attacks on iOS
- **Siri Exploit on iOS 7**: Recently, it was reported [11] that Siri in iOS 7 could be exploited to bypass the lock screen and perform actions such as sending emails, SMS, posting on social media, and making phone calls. We refer to this as attack #5.
- **Private API Exploitation**: Although the accessibility library is a private API not accessible to regular app developers, the threat is real. An attack [33] demonstrated the possibility of circumventing the Apple App Store review process by publishing an app that invoked private API calls.

#### Attacks on Android
- **Permissions and Data Leakage**: In Android, there have been numerous attacks on permissions [7, 9, 13, 16, 34] and private information [18, 36], leading to data leakage through the IPC channel. While many mechanisms [6, 12, 16, 20] have been proposed to address these issues, they focus on the official IPC channel and do not prevent attacks through accessibility libraries. Our attacks can steal the capabilities and private information of other apps.

#### Conclusion
The continuous addition of accessibility features to OSs, while beneficial, has introduced significant security risks. Our analysis reveals that the root cause of these vulnerabilities lies in the design and implementation trade-offs between compatibility, usability, and security. We propose several recommendations to either make the implementation of necessary security checks easier or to mitigate the impact of incomplete checks.

#### Acknowledgments
We thank the anonymous reviewers, our shepherd Trent Jaeger, and our operations staff for their help and feedback. This work was supported in part by the National Science Foundation, the Office of Naval Research, the Department of Homeland Security, and the United States Air Force.

#### References
[1] Android Developers. Security tips. http://developer.android.com/training/articles/security-tips.html.
[2] Apple, Inc. Accessibility. http://www.apple.com/accessibility/resources/.
[3] Apple, Inc. The iOS environment. https://developer.apple.com/library/ios/documentation/iphone/conceptual/iphoneosprogrammingguide/TheiOSEnvironment/TheiOSEnvironment.html.
[4] O. Begemann. Remote View Controllers in iOS 6. http://oleb.net/blog/2012/10/remote-view-controllers-in-ios-6/.
[5] K. J. Biba. Integrity considerations for secure computer systems. Technical report, DTIC Document, 1977.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards taming privilege-escalation attacks on Android. In 19th Annual Network & Distributed System Security Symposium (NDSS), volume 17, pages 18–25, 2012.
[7] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services, pages 239–252. ACM, 2011.
[8] K. Cook. [patch] security: Yama lsm. http://lwn.net/Articles/393012/.
[9] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Information Security, pages 346–360. Springer, 2011.
[10] L. Davidson. Windows 7 UAC whitelist: Proof-of-concept source code. http://www.pretentiousname.com/misc/W7E_Source/win7_uac_poc_details.html.
[11] J. Edwards. There’s a huge password security quirk in iOS 7 that lets Siri control your iPhone. http://www.businessinsider.com/password-security-flaw-in-ios-7-lets-siri-control-your-iphone-2013-9.
[12] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. Sheth. Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones. In OSDI, volume 10, pages 1–6, 2010.
[13] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-delegation: Attacks and defenses. In USENIX Security Symposium, 2011.
[14] Go Launcher Dev Team. Go launcher ex notification. https://play.google.com/store/apps/details?id=com.gau.golauncherex.notification.
[15] Google Inc. Section 508 Compliance (VPAT). https://www.google.com/sites/accessibility.html.
[16] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, 2012.
[17] J. Han, E. Owusu, L. Nguyen, A. Perrig, and J. Zhang. Accomplice: Location inference using accelerometers on smartphones. In Communication Systems and Networks (COMSNETS), 2012 Fourth International Conference on, pages 1–9, Jan 2012.
[18] S. Jana and V. Shmatikov. Memento: Learning secrets from process footprints. In IEEE Symposium on Security and Privacy (Oakland ’12), 2012.
[19] B. Lau, Y. Jang, C. Song, T. Wang, P. H. Chung, and P. Royal. Mactans: Injecting malware into iOS devices via malicious chargers. In Proceedings of Black Hat USA, 2013.
[20] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: statically vetting Android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 229–240. ACM, 2012.
[21] C. McLawhorn. Recent development: Leveling the accessibility playing field: Section 508 of the rehabilitation act. NORTH CAROLINA JOURNAL OF LAW & TECHNOLOGY, 3(1):63–100, 2001.
[22] Microsoft. Windows integrity mechanism design. http://msdn.microsoft.com/en-us/library/bb625963.aspx.
[23] Microsoft. Windows Vista integrity mechanism technical reference. http://msdn.microsoft.com/en-us/library/bb625964.aspx.
[24] Microsoft Corporation. Microsoft and section 508. http://www.microsoft.com/enable/microsoft/section508.aspx.
[25] Microsoft Corporation. User account control. http://windows.microsoft.com/en-us/windows7/products/features/user-account-control.
[26] S. Motiee, K. Hawkey, and K. Beznosov. Do Windows users follow the principle of least privilege?: investigating user account control practices. In Proceedings of the Sixth Symposium on Usable Privacy and Security, SOUPS ’10, New York, NY, USA, 2010. ACM.
[27] Motorola Inc. Moto X Features: Touchless Control. http://www.motorola.com/us/Moto-X-Features-Touchless-Control/motox-features-2-touchless.html.
[28] G. Ou. Vista Speech Command exposes remote exploit. http://www.zdnet.com/blog/ou/vista-speech-command-exposes-remote-exploit/416.
[29] PoPs. Pops ringtones & notifications. https://play.google.com/store/apps/details?id=com.pops.app.
[30] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and C. Cowan. User-Driven Access Control: Rethinking Permission Granting in Modern Operating Systems. In Proceedings of the IEEE Symposium on Security and Privacy, 2012.
[31] R. Schlegel, K. Zhang, X. yong Zhou, M. Intwala, A. Kapadia, and X. Wang. Soundcomber: A stealthy and context-aware sound trojan for smartphones. In NDSS, 2011.
[32] The United States Government. Section 508 Of The Rehabilitation Act. http://www.section508.gov/Section-508-Of-The-Rehabilitation-Act.
[33] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on iOS: When benign apps become evil. In The 22nd USENIX Security Symposium (SECURITY), 2013.
[34] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor customizations on Android security. In ACM conference on Computer and communications security (CCS ’13), 2013.
[35] N. Xu, F. Zhang, Y. Luo, W. Jia, D. Xuan, and J. Teng. Stealthy video capturer: A new video-based spyware in 3G smartphones. In Proceedings of the Second ACM Conference on Wireless Network Security, WiSec ’09, New York, NY, USA, 2009. ACM.
[36] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution in Android applications. In Proceedings of the 20th Annual Symposium on Network and Distributed System Security, 2013.

#### Appendix
**Example 1: Handling Real Input vs. Accessibility Input in Android**
```java
// On real touch event
public boolean onTouchEvent(MotionEvent event) {
    switch (event.getAction()) {
        case MotionEvent.ACTION_UP:
            // ...
            // performClick() is called to handle real click event
            performClick();
            // ...
    }
}

// On a11y request for click
boolean performAccessibilityActionInternal(int action, Bundle arguments) {
    // ...
    switch (action) {
        case AccessibilityNodeInfo.ACTION_CLICK:
            if (isClickable()) {
                // the same performClick() is invoked to handle a11y request
                performClick();
                return true;
            }
            break;
    }
    // ...
}
```

**Example 2: Security Check for Password Box in GTK**
```c
static void gtk_entry_copy_clipboard(GtkEntry *entry) {
    GtkEntryPrivate *priv = entry->priv;
    // ...
    // ### security check for password box ###
    if (!priv->visible) {
        // do not copy text to clipboard
        gtk_widget_error_bell(GTK_WIDGET(entry));
        return;
    }
    // ...
}
```

**Example 3: Accessibility Request for Copying Text in ATK**
```c
void atk_editable_text_copy_text(Editable e, int start, int end) {
    AtkEditableText *text;
    // ...
    *(iface->copy_text)(text, start_pos, );
    // calls gtk_entry_accessible_copy_text()
}

static void gtk_entry_accessible_copy_text(AtkEditableText *t, int start, int end) {
    GtkEditable *e;
    // ...
    gchar *str = gtk_editable_get_chars(e, start, end);
    // ...
}

gchar* gtk_editable_get_chars(GtkEditable *e, int start, int end) {
    return (editable)->get_chars(e, start, end);
    // calls gtk_entry_get_chars()
}

gchar* gtk_entry_get_chars(GtkEntry *e, int start, int end) {
    gchar *text;
    text = gtk_entry_buffer_get_text(get_buffer(entry));
    // ### no security checks at all on getting text ###
    return g_strndup(text + start_index, end_index - start_index);
    // return text without checking priv->visible
}
```

This example shows how an accessibility request for copying text in ATK calls a function in GTK that supports accessibility. The module then calls a function that directly interacts with the UI widget. However, the module `GtkEntryAccessible` calls a different function `gtk_editable_get_chars()`, which misses the required security checks for the password box.