### Source Code and Access Control

The source code of web applications can be analyzed to detect any unchecked accesses to specific pages. Resin [74] is a runtime system that enforces data-flow assertions to prevent the exploitation of web application security vulnerabilities. Nemesis [14] is another runtime system designed to prevent authentication and access control bypass attacks. Space [38] is a tool that identifies access control bugs in web applications based on a catalog of patterns. Our work complements these efforts by focusing on access control misconfigurations, which can introduce security holes even if the software is correctly coded.

### Intrusion Detection

A related research area in security-related log analysis is intrusion detection [18]. An Intrusion Detection System (IDS) monitors system or network events, detects malicious activities, and reports them to system administrators. IDS methods can be categorized into signature-based and anomaly-based approaches. Signature-based IDS detects known attacks by recognizing specific patterns, such as a particular sequence of network traffic. Anomaly-based IDS, on the other hand, detects unknown attacks using heuristics or rules [32]. P-DIFF, our tool, aims to detect changes in access control policies that may lead to potential attacks, rather than detecting the attacks themselves. This capability helps in backtracking configuration changes that permitted detected intrusions.

### Decision Tree Algorithms

Handling time-changing data, known as concept drift adaptation, has been a significant challenge in machine learning [21]. Concept drift refers to changes in the underlying data model over time, such as an access control policy changing from ALLOW to DENY. Previous works have proposed building concept drift decision trees by learning multiple trees, each with data from a specific time window [26, 44, 58]. However, this approach is challenging for access-control policy changes due to the difficulty in selecting the appropriate time window length, as policy changes can occur at random times. To address this, we propose a new Time-Changing Decision Tree (TCDT) learning algorithm. TCDT treats the entire dataset as a consecutive time series, encoding all policies and their changes in a single decision tree. Although TCDT is designed for access-control policy changes, it can be applied to other binary classification problems with concept drift.

### Conclusion

This paper introduces P-DIFF, a practical tool for continuously monitoring access logs to help system administrators detect unintended access control policy changes and identify historical policy changes for known security incidents. We propose a novel TCDT structure and learning algorithm to automatically infer access policies and changes from access logs. We evaluated P-DIFF using access logs from five real-world systems, and the results show that P-DIFF is effective in both detecting access control policy changes and conducting forensic investigations of security incidents. Additionally, while our TCDT learning algorithm is used here for inferring access control policies, it can be generally adopted to address challenges in inferring other policies with result changes.

### Acknowledgments

We are grateful to the anonymous reviewers for their insightful comments and feedback. We also thank Geoffrey M. Voelker, Guo (Vector) Li, Shelby Thomas, Wang-Cheng Kang, Jianmo Ni, and many others in the Opera group, the Systems and Networking group at UC San Diego, and Whova Inc. for useful discussions and proofreading. We extend our thanks to Scott Stoller and Thang Bui at Stony Brook University for their helpful feedback. This work is supported in part by NSF grants (CNS-1814388, CNS-1526966) and the Qualcomm Chair Endowment.

### References

[1] Rakesh Agrawal, Tomasz Imieliński, and Arun Swami. 1993. Mining Association Rules Between Sets of Items in Large Databases. In Proceedings of the 1993 ACM SIGMOD International Conference on Management of Data (SIGMOD’93).

[2] Alexa Internet, Inc. 2019. Alexa Traffic Ranks. https://www.alexa.com/siteinfo/wikipedia.org.

[3] Hussein Almuallim, Yasuhiro Akiba, and Shigeo Kaneda. 1995. On Handling Tree-Structured Attributes in Decision Tree Learning. In Proceedings of the 12th International Conference on Machine Learning (ICML’95).

[4] Amos Jeffries. 2015. Squid Proxy Access Log Format. https://wiki.squid-cache.org/Features/LogFormat.

[5] Mona Attariyan, Michael Chow, and Jason Flinn. 2012. X-ray: Automating Root-Cause Diagnosis of Performance Anomalies in Production Software. In Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation (OSDI’12).

[6] Mona Attariyan and Jason Flinn. 2010. Automating Configuration Troubleshooting with Dynamic Information Flow Analysis. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation (OSDI’10).

[7] Lujo Bauer, Lorrie Faith Cranor, Robert W. Reeder, Michael K. Reiter, and Kami Vaniea. 2009. Real Life Challenges in Access-Control Management. In Proceedings of the 2009 CHI Conference on Human Factors in Computing Systems.

[8] Lujo Bauer, Scott Garriss, and Michael K. Reiter. 2008. Detecting and Resolving Policy Misconfigurations in Access-Control Systems. In Proceedings of the 13th ACM Symposium on Access Control Models and Technologies (SACMAT’08).

[9] Lujo Bauer, Scott Garriss, and Michael K. Reiter. 2011. Detecting and Resolving Policy Misconfigurations in Access-Control Systems. ACM Transactions on Information and System Security (TISSEC) 14, 1 (2011), 2.

[10] Leo Breiman, Jerome H. Friedman, Richard A. Olshen, and Charles J. Stone. 1983. Classification and Regression Trees. Wadsworth Publishing.

[11] Anton Chuvakin and Gunnar Peterson. 2010. How to Do Application Logging Right. IEEE Security & Privacy 8, 4 (July 2010), 82–85.

[12] Cloudera, Inc. 2019. Hadoop Audit Event. https://docs.cloudera.com/documentation/enterprise/5-4-x/topics/cn_iu_audits.html.

[13] Carlos Cotrini, Thilo Weghorn, and David Basin. 2018. Mining ABAC Rules from Sparse Logs. In Proceedings of the 3rd European Symposium on Security and Privacy (EuroS&P’18).

[14] Michael Dalton, Christos Kozyrakis, and Nickolai Zeldovich. 2009. Nemesis: Preventing Authentication & Access Control Vulnerabilities in Web Applications. In Proceedings of the 18th USENIX Security Symposium (USENIX Security’09).

[15] Tathagata Das, Ranjita Bhagwan, and Prasad Naldurg. 2010. Baaz: A System for Detecting Access Control Misconfigurations. In Proceedings of the 19th USENIX Security Symposium (USENIX Security’10).

[16] Jessica Davis. Apr. 2018. 63,500 Patient Records Breached by New York Provider’s Misconfigured Database. https://tinyurl.com/y88vh8u5.

[17] Jessica Davis. Mar. 2018. Long Island Provider Exposes Data of 42,000 Patients in Misconfigured Database. https://tinyurl.com/y7t5p99n.

[18] Dorothy E. Denning. 1987. An Intrusion-Detection Model. IEEE Transactions on Software Engineering 2 (1987), 222–232.

[19] BOB DIACHENKO. 2019. Credit Reports Online. Document Management Company Leaks Data Online. https://securitydiscovery.com/.

[20] Kathi Fisler, Shriram Krishnamurthi, Leo A. Meyerovich, and Michael Carl Tschantz. 2005. Verification and Change-Impact Analysis of Access-Control Policies. In Proceedings of the 27th International Conference on Software Engineering (ICSE’05).

[21] João Gama, Indrė Žliobaitė, Albert Bifet, Mykola Pechenizkiy, and Abdelhamid Bouchachia. 2014. A Survey on Concept Drift Adaptation. ACM Computing Surveys (CSUR) 46, 4 (2014), 44.

[22] François Gauthier, Dominic Letarte, Thierry Lavoie, and Ettore Merlo. 2011. Extraction and Comprehension of Moodle’s Access Control Model: A Case Study. In Proceedings of the 9th Annual International Conference on Privacy, Security and Trust.

[23] Simon Haykin. 1994. Neural Networks: A Comprehensive Foundation. Prentice Hall PTR.

[24] Hewlett Packard Enterprise. 2015. 2015 HP Cyber Risk Report. http://www8.hp.com/h20195/v2/GetPDF.aspx/4AA5-0858ENN.pdf.

[25] David W. Hosmer Jr., Stanley Lemeshow, and Rodney X. Sturdivant. 2013. Applied Logistic Regression. Vol. 398. John Wiley & Sons.

[26] Geoff Hulten, Laurie Spencer, and Pedro Domingos. 2001. Mining Time-Changing Data Streams. In Proceedings of the 7th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD’01).

[27] Junbeom Hur and Dong Kun Noh. 2011. Attribute-Based Access Control with Efficient Revocation in Data Outsourcing Systems. IEEE Transactions on Parallel and Distributed Systems 22, 7 (2011), 1214–1221.

[28] Kromtech Security Center. 2017. Auto Tracking Company Leaks Hundreds of Thousands of Records Online. https://tinyurl.com/y8uvdy9j.

[29] Kromtech Security Center. 2018. FedEx Customer Records Exposed. https://mackeepersecurity.com/post/fedex-customer-records-exposed.

[30] Butler W. Lampson. 1974. Protection. ACM SIGOPS Operating Systems Review 8, 1 (1974), 18–24.

[31] Butler W. Lampson. 2004. Computer Security in the Real World. IEEE Computer 37, 6 (June 2004), 37–46.

[32] Hung-Jen Liao, Chun-Hung Richard Lin, Ying-Chih Lin, and Kuang-Yuan Tung. 2013. Intrusion Detection System: A Comprehensive Review. Journal of Network and Computer Applications 36, 1 (2013), 16–24.

[33] Luke Irwin. 2019. How Long Does It Take to Detect a Cyber Attack? https://www.itgovernanceusa.com/blog/how-long-does-it-take-to-detect-a-cyber-attack/.

[34] Evan Martin and Tao Xie. 2007. Automated Test Generation for Access Control Policies via Change-Impact Analysis. In Proceedings of the 3rd International Workshop on Software Engineering for Secure Systems.

[35] MediaWiki. 2019. MediaWiki is a collaboration and documentation platform brought to you by a vibrant community. https://www.mediawiki.org/wiki/MediaWiki.

[36] MediaWiki. Apr. 2018. Enwiki Dump Progress on 20180420. https://dumps.wikimedia.org/enwiki/20180420/.

[37] Tejeddine Mouelhi, Franck Fleurey, Benoit Baudry, and Yves Le Traon. 2008. A Model-Based Framework for Security Policy Specification, Deployment, and Testing. In Proceedings of the 7th International Conference on Model Driven Engineering Languages and Systems (MoDELs/UML08).

[38] Joseph P. Near and Daniel Jackson. 2016. Finding Security Bugs in Web Applications Using a Catalog of Access Control Patterns. In Proceedings of the 38th International Conference on Software Engineering (ICSE’16).

[39] Lily Hay Newman. 2017. The Scarily Common Screw-Up That Exposed 198 Million Voter Records. https://www.wired.com/story/voter-records-exposed-database/.

[40] NumPy Developers. 2018. NumPy. https://www.numpy.org.

[41] Oracle. 2019. MySQL Audit Log File Formats. https://dev.mysql.com/doc/refman/8.0/en/audit-log-file-formats.html.

[42] Dan O’Sullivan. 2017. Cloud Leak: How a Verizon Partner Exposed Millions of Customer Accounts. https://www.upguard.com/breaches/verizon-cloud-leak.

[43] Pandas. 2018. pandas: Python Data Analysis Library. https://pandas.pydata.org/.

[44] Lena Pietruczuk, Piotr Duda, and Maciej Jaworski. 2013. Adaptation of Decision Trees for Handling Concept Drift. In International Conference on Artificial Intelligence and Soft Computing. Springer, 459–473.

[45] pure-ftpd. 2017. pure-ftpd - Linux Man Page. https://linux.die.net/man/8/pure-ftpd.

[46] Lili Qiu, Yin Zhang, Feng Wang, Mi Kyung, and Han Ratul Mahajan. 1985. Trusted Computer System Evaluation Criteria. In National Computer Security Center. CiteSeer.

[47] J. Ross Quinlan. 1986. Induction of Decision Trees. Machine Learning 1, 1 (1986), 81–106.

[48] J. Ross Quinlan. 1993. C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, Inc.

[49] Ariel Rabkin and Randy Katz. 2011. Precomputing Possible Configuration Error Diagnosis. In Proceedings of the 26th IEEE/ACM International Conference on Automated Software Engineering (ASE’11).

[50] Charles M. Rader. 1972. Discrete Convolutions via Mersenne Transforms. IEEE Trans. Comput. 100, 12 (1972), 1269–1273.

[51] Ravi S. Sandhu, Edward J. Coyne, Hal L. Feinstein, and Charles E. Youman. 1996. Role-Based Access Control Models. IEEE Computer 29, 2 (1996), 38–47.

[52] Bruce Schneier. 2009. Real-World Access Control. https://www.schneier.com/blog/archives/2009/09/real-world_acce.html.

[53] SELinux. 2014. SELinux Auditing Events. https://selinuxproject.org/page/NB_AL.

[54] Riaz Ahmed Shaikh, Kamel Adi, and Luigi Logrippo. 2017. A Data Classification Method for Inconsistency and Incompleteness Detection in Access Control Policy Sets. International Journal of Information Security 16, 1 (2017), 91–113.

[55] Sara Sinclair and Sean W. Smith. 2010. What’s Wrong with Access Control in the Real World? IEEE Security & Privacy 8, 4 (July 2010), 74–77.

[56] Sara Sinclair, Sean W. Smith, Stephanie Trudeau, M. Eric Johnson, and Anthony Portera. 2007. Information Risk in Financial Institutions: Field Study and Research Roadmap. In Proceedings for the 3rd International Workshop on Enterprise Applications and Services in the Finance Industry (FinanceCom’07). Montreal, Canada.

[57] Spark. 2018. Spark MLlib. https://spark.apache.org/docs/latest/ml-guide.html.

[58] Kenneth O. Stanley. 2003. Learning Concept Drift with a Committee of Decision Trees. Technical Report UT-AI-TR-03-302. Department of Computer Sciences, The University of Texas at Austin.

[59] Fangqi Sun, Liang Xu, and Zhendong Su. 2011. Static Detection of Access Control Vulnerabilities in Web Applications. In Proceedings of the 20th USENIX Security Symposium (USENIX Security’11).

[60] The Apache Software Foundation. 2019. Apache2 Access Log Format. https://httpd.apache.org/docs/current/logs.html.

[61] The Open Web Application Security Project. 2017. Jan. 2018. OWASP Top 10 - 2017: The Ten Most Critical Web Application Security Risks. https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf.

[62] Guido Urdaneta, Guillaume Pierre, and Maarten van Steen. 2009. Wikipedia Workload Analysis for Decentralized Hosting. Elsevier Computer Networks 53, 11 (July 2009), 1830–1845. http://www.globule.org/publi/WWADH_comnet2009.html.

[63] Helen J. Wang, John C. Platt, Yu Chen, Ruyun Zhang, and Yi-Min Wang. 2004. Automatic Misconfiguration Troubleshooting with PeerPressure. In Proceedings of the 6th USENIX Conference on Operating Systems Design and Implementation (OSDI’04).

[64] Rui Wang, XiaoFeng Wang, Kehuan Zhang, and Zhuowei Li. 2008. Towards Automatic Reverse Engineering of Software Security Configurations. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS’08).

[65] Yi-Min Wang, Chad Verbowski, John Dunagan, Yu Chen, Helen J. Wang, Chun Yuan, and Zheng Zhang. 2003. STRIDER: A Black-box, State-based Approach to Change and Configuration Management and Support. In Proceedings of the 17th Large Installation Systems Administration Conference (LISA’03).

[66] Wikipedia. 2018. One-hot. https://en.wikipedia.org/wiki/One-hot.

[67] Tianyin Xu, Xinxin Jin, Peng Huang, Yuanyuan Zhou, Shan Lu, Long Jin, and Shankar Pasupathy. 2016. Early Detection of Configuration Errors to Reduce Failure Damage. In Proceedings of the 12th USENIX Conference on Operating Systems Design and Implementation (OSDI’16).

[68] Tianyin Xu, Han Min Naing, Le Lu, and Yuanyuan Zhou. 2017. How Do System Administrators Resolve Access-Denied Issues in the Real World? In Proceedings of the 35th Annual CHI Conference on Human Factors in Computing Systems (CHI’17).

[69] Tianyin Xu, Vineet Pandey, and Scott Klemmer. 2016. An HCI View of Configuration Problems. arXiv:1601.01747 (Jan. 2016).

[70] Tianyin Xu, Jiaqi Zhang, Peng Huang, Jing Zheng, Tianwei Sheng, Ding Yuan, Yuanyuan Zhou, and Shankar Pasupathy. 2013. Do Not Blame Users for Misconfigurations. In Proceedings of the 24th Symposium on Operating System Principles (SOSP’13).

[71] Tianyin Xu and Yuanyuan Zhou. 2015. Systems Approaches to Tackling Configuration Errors: A Survey. ACM Computing Surveys (CSUR) 47, 4 (July 2015).

[72] Yuu Yamada, Einoshin Suzuki, Hideto Yokoi, and Katsuhiko Takabayashi. 2003. Decision-Tree Induction from Time-Series Data Based on a Standard-Example Split Test. In Proceedings of the 20th International Conference on Machine Learning (ICML’03).

[73] Zuoning Yin, Xiao Ma, Jing Zheng, Yuanyuan Zhou, Lakshmi N. Bairavasundaram, and Shankar Pasupathy. 2011. An Empirical Study on Configuration Errors in Commercial and Open Source Systems. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles (SOSP’11).

[74] Alexander Yip, Xi Wang, Nickolai Zeldovich, and M. Frans Kaashoek. 2009. Improving Application Security with Data Flow Assertions. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles (SOSP’09).

[75] Chun Yuan, Ni Lao, Ji-Rong Wen, Jiwei Li, Zheng Zhang, Yi-Min Wang, and Wei-Ying Ma. 2006. Automated Known Problem Diagnosis with Event Traces. In Proceedings of the 1st EuroSys Conference (EuroSys’06).

[76] ZDNet. 2019. Database Leaks Data on Most of Ecuador’s Citizens, Including 6.7 Million Children. https://www.zdnet.com/article/database-leaks-data-on-most-of-ecuadors-citizens-including-6-7-million-children/.

[77] Jun Zhang and Vasant Honavar. 2003. Learning Decision Tree Classifiers from Attribute Value Taxonomies and Partially Specified Data. In Proceedings of the 20th International Conference on Machine Learning (ICML’03).

[78] Jiaqi Zhang, Lakshmi Renganarayana, Xiaolan Zhang, Niyu Ge, Vasanth Bala, Tianyin Xu, and Yuanyuan Zhou. 2014. EnCore: Exploiting System Environment and Correlation Information for Misconfiguration Detection. In Proceedings of the 19th International Conference on Architecture Support for Programming Languages and Operating Systems (ASPLOS’14).

[79] Sai Zhang and Michael D. Ernst. 2013. Automated Diagnosis of Software Configuration Errors. In Proceedings of the 35th International Conference on Software Engineering (ICSE’13).