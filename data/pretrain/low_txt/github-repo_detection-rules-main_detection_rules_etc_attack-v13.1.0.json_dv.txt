### DCSync

**Description:**

Adversaries may exploit a Windows Domain Controller's application programming interface (API) to simulate the replication process from a remote domain controller, using a technique known as DCSync. This allows them to access credentials and other sensitive information.

Members of the Administrators, Domain Admins, and Enterprise Admin groups, or computer accounts on the domain controller, can use DCSync to extract password data from Active Directory. This data may include current and historical hashes of critical accounts such as KRBTGT and Administrators. These hashes can then be used to create a [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks or to change account passwords, as described in [Account Manipulation](https://attack.mitre.org/techniques/T1098).

The DCSync functionality is included in the "lsadump" module of [Mimikatz](https://attack.mitre.org/software/S0002). The Lsadump module also includes NetSync, which performs DCSync over a legacy replication protocol.

**References:**
- Microsoft. (2017, December 1). MS-DRSR Directory Replication Service (DRS) Remote Protocol. Retrieved December 4, 2017.
- Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December 4, 2017.
- SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.
- Wine API. (n.d.). samlib.dll. Retrieved December 4, 2017.
- Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved August 7, 2017.
- Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved August 7, 2017.
- Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.
- Deply, B., Le Toux, V. (2016, June 5). module ~ lsadump. Retrieved August 7, 2017.
- Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol. Retrieved December 6, 2017.
- Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.
- Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved December 4, 2017.
- Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved December 4, 2017.

**Detection:**

Monitor domain controller logs for replication requests and other unscheduled activity that may be associated with DCSync. Also, monitor for network protocols and other replication requests from IPs not associated with known domain controllers. Note that domain controllers may not log replication requests originating from the default domain controller account.

**Data Sources:**
- Network Traffic: Network Traffic Flow
- Network Traffic: Network Traffic Content
- Active Directory: Active Directory Object Access

**Permissions Required:**
- Administrator

**Platforms:**
- Windows

---

### System Time Discovery

**Description:**

Adversaries may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network.

System time information can be gathered in several ways, such as using `net time \\\\hostname` on Windows to get the system time on a remote system. The victim's time zone can also be inferred from the current system time or gathered using `w32tm /tz`.

On network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show clock detail` can be used to see the current time configuration.

This information can be useful for performing other techniques, such as executing a file with a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), or to discover locality information based on time zone to assist in victim targeting (i.e., [System Location Discovery](https://attack.mitre.org/techniques/T1614)). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time.

**References:**
- Cisco. (2023, March 6). show clock detail - Cisco IOS Security Command Reference: Commands S to Z. Retrieved July 13, 2022.
- Malicious History. (2020, September 17). Time Bombs: Malware With Delayed Execution. Retrieved April 22, 2021.
- Mathers, B. (2016, September 30). Windows Time Service Tools and Settings. Retrieved November 25, 2016.
- Microsoft. (n.d.). System Time. Retrieved November 25, 2016.
- Rivner, U., Schwartz, E. (2012). They’re Inside… Now What?. Retrieved November 25, 2016.

**Detection:**

Command-line interface monitoring can detect instances of `net.exe` or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.

For network infrastructure devices, collect AAA logging to monitor `show` commands being run by non-standard users from non-standard locations.

**Data Sources:**
- Process: Process Creation
- Command: Command Execution
- Process: OS API Execution

**Platforms:**
- Windows
- Network

---

### At

**Description:**

Adversaries may abuse the `at` utility to schedule tasks for initial or recurring execution of malicious code. The `at` utility exists as an executable within Windows, Linux, and macOS for scheduling tasks at a specified time and date. Although deprecated in favor of [Scheduled Task](https://attack.mitre.org/techniques/T1053/005)'s `schtasks` in Windows environments, using `at` requires that the Task Scheduler service be running, and the user must be logged on as a member of the local Administrators group.

On Linux and macOS, `at` may be invoked by the superuser as well as any users added to the `at.allow` file. If the `at.allow` file does not exist, the `at.deny` file is checked. Every username not listed in `at.deny` is allowed to invoke `at`. If the `at.deny` file exists and is empty, global use of `at` is permitted. If neither file exists, only the superuser is allowed to use `at`.

Adversaries may use `at` to execute programs at system startup or on a scheduled basis for [Persistence](https://attack.mitre.org/tactics/TA0003). `at` can also be abused to conduct remote [Execution](https://attack.mitre.org/tactics/TA0002) as part of [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and/or to run a process under the context of a specified account (such as SYSTEM).

In Linux environments, adversaries may also abuse `at` to break out of restricted environments by using a task to spawn an interactive system shell or to run system commands. Similarly, `at` may also be used for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004) if the binary is allowed to run as superuser via `sudo`.

**References:**
- Craig Rowland. (2019, July 25). Getting an Attacker IP Address from a Malicious Linux At Job. Retrieved October 15, 2021.
- Emilio Pinna, Andrea Cardaci. (n.d.). gtfobins at. Retrieved September 28, 2021.
- IEEE/The Open Group. (2017). at(1p) — Linux manual page. Retrieved February 25, 2022.
- Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.
- Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.
- Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.
- Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.
- Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.

**Detection:**

Monitor process execution from the `svchost.exe` in Windows 10 and the Windows Task Scheduler `taskeng.exe` for older versions of Windows. If scheduled tasks are not used for persistence, the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in `%systemroot%\System32\Tasks` for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc.

Configure event logging for scheduled task creation and changes by enabling the "Microsoft-Windows-TaskScheduler/Operational" setting within the event logging service. Several events will then be logged on scheduled task activity, including:

- Event ID 106 on Windows 7, Server 2008 R2 - Scheduled task registered
- Event ID 140 on Windows 7, Server 2008 R2 / 4702 on Windows 10, Server 2016 - Scheduled task updated
- Event ID 141 on Windows 7, Server 2008 R2 / 4699 on Windows 10, Server 2016 - Scheduled task deleted
- Event ID 4698 on Windows 10, Server 2016 - Scheduled task created
- Event ID 4700 on Windows 10, Server 2016 - Scheduled task enabled
- Event ID 4701 on Windows 10, Server 2016 - Scheduled task disabled

Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks.

Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001), so additional logging may need to be configured to gather the appropriate data.

In Linux and macOS environments, monitor scheduled task creation using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Look for changes to tasks that do not correlate with known software, patch cycles, etc.

Review all jobs using the `atq` command and ensure IP addresses stored in the `SSH_CONNECTION` and `SSH_CLIENT` variables, machines that created the jobs, are trusted hosts. All `at` jobs are stored in `/var/spool/cron/atjobs/`.

Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for [Command and Control](https://attack.mitre.org/tactics/TA0011), learning details about the environment through [Discovery](https://attack.mitre.org/tactics/TA0007), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008).

**Data Sources:**
- Scheduled Job: Scheduled Job Creation
- Process: Process Creation
- File: File Modification
- Command: Command Execution

**Permissions Required:**
- Administrator
- User

**Platforms:**
- Windows
- Linux
- macOS

---

### Service Execution

**Description:**

Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with [New Service](https://attack.mitre.org/techniques/T1050) and [Modify Existing Service](https://attack.mitre.org/techniques/T1031) during service persistence or privilege escalation.

**Detection:**

Changes to service Registry entries and command-line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool [PsExec](https://attack.mitre.org/software/S0029).

**Data Sources:**
- Process: Process Creation
- Command: Command Execution
- Process: OS API Execution

**Permissions Required:**
- Administrator
- SYSTEM

**Platforms:**
- Windows

---

### Dynamic-link Library Injection

**Description:**

Adversaries may inject dynamic-link libraries (DLLs) into processes to evade process-based defenses and potentially elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.

DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as `VirtualAllocEx` and `WriteProcessMemory`, then invoked with `CreateRemoteThread` (which calls the `LoadLibrary` API responsible for loading the DLL).

Variations of this method, such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (mapping DLL when writing into process), overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually performing the function of `LoadLibrary`).

Another variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process, then manually overwriting the module's `AddressOfEntryPoint` before starting a new thread in the target process. This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.

Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.

**References:**
- Aliz Hammond. (2019, August 15). Hiding Malicious Code with "Module Stomping": Part 1. Retrieved July 14, 2022.
- Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.
- Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.
- Red Teaming Experiments. (n.d.). Module Stomping for Shellcode Injection. Retrieved July 14, 2022.

**Detection:**

Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as `CreateRemoteThread` and those that can be used to modify memory within another process, such as `VirtualAllocEx/WriteProcessMemory`, may be used for this technique.

Monitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process.

Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

**Data Sources:**
- Process: Process Modification
- Process: Process Access
- Process: OS API Execution
- Process: Process Metadata
- Module: Module Load

**Defense Bypassed:**
- Application control
- Anti-virus

**Permissions Required:**
- User

**Platforms:**
- Windows

---

### PowerShell

**Description:**

PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the `Start-Process` cmdlet, which can be used to run an executable, and the `Invoke-Command` cmdlet, which runs a command locally or on a remote computer.

PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk. Administrator permissions are required to use PowerShell to connect to remote systems.

A number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363), PowerSploit, and PSAttack.

PowerShell commands/scripts can also be executed without directly invoking the `powershell.exe` binary through interfaces to PowerShell's underlying `System.Management.Automation` assembly exposed through the .NET framework and Windows Common Language Interface (CLI).

**References:**
- Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.
- PowerSploit. (n.d.). Retrieved December 4, 2014.
- Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.
- Warner, J. (2015, January 6). Inexorable PowerShell — A Red Teamer’s Tale of Overcoming Simple AppLocker Policies. Retrieved December 8, 2018.
- Christensen, L. (2015, December 28). The Evolution of Offensive PowerShell Invocation. Retrieved December 8, 2018.
- Babinec, K. (2014, April 28). Executing PowerShell scripts from C#. Retrieved April 22, 2019.
- Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.
- Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.

**Detection:**

If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.

Monitor for loading and/or execution of artifacts associated with PowerShell-specific assemblies, such as `System.Management.Automation.dll` (especially to unusual process names/locations).

It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.

**Data Sources:**
- Process: Process Creation
- Command: Command Execution
- Process: OS API Execution

**Permissions Required:**
- User
- Administrator

**Platforms:**
- Windows

---

### Exploits

**Description:**

Adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.

In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals. In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).

An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.

Adversaries may use exploits during various phases of the adversary lifecycle (i.e., [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).

**References:**
- Offensive Security. (n.d.). Exploit Database. Retrieved October 15, 2020.
- Temperton, J. (2015, August 10). Hacking Team zero-day used in new Darkhotel attacks. Retrieved March 9, 2017.
- Nicole Perlroth and David E. Sanger. (2013, July 12). Nations Buying as Hackers Sell Flaws in Computer Code. Retrieved March 9, 2017.
- Bill Marczak and John Scott-Railton. (2016, August 24). The Million Dollar Dissident: NSO Group’s iPhone Zero-Days used against a UAE Human Rights Defender. Retrieved December 12, 2016.
- Zetter, K. (2019, October 3). Researchers Say They Uncovered Uzbekistan Hacking Operations Due to Spectacularly Bad OPSEC. Retrieved October 15, 2020.

**Detection:**

Much of this activity will take place outside the visibility of the target organization, making detection of this behavior difficult. Detection efforts may be focused on behaviors relating to the use of exploits (i.e., [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203), [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211), [Exploitation for Credential Access](https://attack.mitre.org/techniques/T1212), [Exploitation of Remote Services](https://attack.mitre.org/techniques/T1210), and [Application or System Exploitation](https://attack.mitre.org/techniques/T1499/004)).

**Platforms:**
- PRE

---

### Modify Authentication Process

**Description:**

Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on macOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078).

Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, and remote desktop.

**References:**
- Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.
- Chris Ross. (2018, October 17). Persistent Credential Theft with Authorization Plugins. Retrieved April 22, 2021.
- Dell SecureWorks. (2015, January 12). Skeleton Key Malware Analysis. Retrieved April 8, 2019.
- Metcalf, S. (2015, November 22). Dump Clear-Text Passwords for All Admins in the Domain Using Mimikatz DCSync. Retrieved November 15, 2021.
- Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.

**Detection:**

Monitor for new, unfamiliar DLL files written to a domain controller and/or local computer. Monitor for changes to Registry entries for password filters (e.g., `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa\Notification Packages`) and correlate then investigate the DLL files these files reference.

Password filters will also show up as an autorun and loaded DLL in `lsass.exe`.

Monitor for calls to `OpenProcess` that can be used to manipulate `lsass.exe` running on a domain controller as well as for malicious modifications to functions exported from authentication-related system DLLs (such as `cryptdll.dll` and `samsrv.dll`).

Monitor PAM configuration and module paths (e.g., `/etc/pam.d/`) for changes. Use system-integrity tools such as AIDE and monitoring tools such as `auditd` to monitor PAM files.

Monitor for suspicious additions to the `/Library/Security/SecurityAgentPlugins` directory.

Configure robust, consistent account activity audit policies across the enterprise and with externally accessible services. Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).

Monitor property changes in Group Policy that manage authentication mechanisms (i.e., [Group Policy Modification](https://attack.mitre.org/techniques/T1484/001)). The `Store passwords using reversible encryption` configuration should be set to `Disabled`. Additionally, monitor and/or block suspicious command/script execution of `-AllowReversiblePasswordEncryption $true`, `Set-ADUser`, and `Set-ADAccountControl`. Finally, monitor Fine-Grained Password Policies and regularly audit user accounts and group settings.

**Data Sources:**
- Module: Module Load
- Windows Registry: Windows Registry Key Modification
- Application Log: Application Log Content
- File: File Modification
- Active Directory: Active Directory Object Modification
- User Account: User Account Authentication
- File: File Creation
- User Account: User Account Modification
- Windows Registry: Windows Registry Key Creation
- Logon Session: Logon Session Creation
- Process: Process Access
- Process: OS API Execution

**Platforms:**
- Windows
- Linux
- macOS
- Network
- Azure AD
- Google Workspace
- IaaS
- Office 365
- SaaS

---

### Credential API Hooking

**Description:**

Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials. Unlike [Keylogging](https://attack.mitre.org/techniques/T1056/001), this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:

- **Hooks procedures**, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.
- **Import address table (IAT) hooking**, which uses modifications to a process’s IAT, where pointers to imported API functions are stored.
- **Inline hooking**, which overwrites the first bytes in an API function to redirect code flow.

**References:**
- Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.
- Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.
- Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.
- Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.
- Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.
- Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.
- Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.
- Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.
- Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.
- Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.
- Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.
- GMER. (n.d.). GMER. Retrieved December 12, 2017.
- Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.
- Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.

**Detection:**

Monitor for calls to the `SetWindowsHookEx` and `SetWinEventHook` functions, which install a hook procedure. Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools or by programmatically examining internal kernel structures.

Rootkits detectors can also be used to monitor for various types of hooking activity.

Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes to compare the in-memory IAT to the real addresses of the referenced functions.

**Data Sources:**
- Process: OS API Execution
- Process: Process Metadata

**Permissions Required:**
- Administrator
- SYSTEM

**Platforms:**
- Windows

---

### Firmware Corruption

**Description:**

Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards.

In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in [Data Destruction](https://attack.mitre.org/techniques/T1485).

**References:**
- CISA. (2022, April 28). Alert (AA22-057A) Update: Destructive Malware Targeting Organizations in Ukraine. Retrieved July 29, 2022.
- U.S. Department of Homeland Security. (2016, August 30). The Increasing Threat to Network Infrastructure Devices and Recommended Mitigations. Retrieved July 29, 2022.
- Upham, K. (2014, March). Going Deep into the BIOS with MITRE Firmware Security Research. Retrieved January 5, 2016.
- Yamamura, M. (2002, April 25). W95.CIH. Retrieved April 12, 2019.

**Detection:**

System firmware manipulation may be detected. Log attempts to read/write to BIOS and compare against known patching behavior.

**Data Sources:**
- Firmware: Firmware Modification

**Impact Type:**
- Availability

**Platforms:**
- Linux
- macOS
- Windows
- Network

---

### Inhibit System Recovery

**Description:**

Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486). Furthermore, adversaries may disable recovery notifications, then corrupt backups.

A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:

- `vssadmin.exe` can be used to delete all volume shadow copies on a system: `vssadmin.exe delete shadows /all /quiet`
- [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies: `wmic shadowcopy delete`
- `wbadmin.exe` can be used to delete the Windows Backup Catalog: `wbadmin.exe delete catalog -quiet`
- `bcdedit.exe` can be used to disable automatic Windows recovery features by modifying boot configuration data: `bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no`
- `REAgentC.exe` can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system

On network devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561) to delete backup firmware images and reformat the file system, then [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the device. Together, this activity may leave network devices completely inoperable and inhibit recovery operations.

Adversaries may also delete “online” backups that are connected to their network—whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.

**References:**
- Brian Prince. (2014, June 20). Code Hosting Service Shuts Down After Cyber Attack. Retrieved March 21, 2023.
- Berry, A., Homan, J., and Eitzman, R. (2017, May 23). WannaCry Malware Profile. Retrieved March 15, 2019.
- Mercer, W. and Rascagneres, P. (2018, February 12). Olympic Destroyer Takes Aim At Winter Olympics. Retrieved March 14, 2019.
- Spencer Gietzen. (n.d.). AWS Simple Storage Service S3 Ransomware Part 2: Prevention and Defense. Retrieved March 21