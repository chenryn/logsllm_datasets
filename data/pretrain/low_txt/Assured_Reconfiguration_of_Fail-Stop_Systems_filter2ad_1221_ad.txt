### Set of All System Reconfigurations

Formally, a System Fault Tolerant Action (SFTA) is an action \( R \) that satisfies the conditions outlined in Table 2. We have directly proven these properties from our abstract formal specification using the PVS system. The specification consists of a set of types that enforce all desired system properties by imposing type restrictions on any instantiation. In this context, an instantiation of the PVS architecture would be a PVS specification itself. The powerful type mechanisms of PVS are utilized to automatically generate all proof obligations required to verify that a system instance complies with the desired properties. In this work, we have proven all the desired properties of our abstract specification in PVS, and the PVS proof checker has mechanically verified that the proofs are sound (thus, we do not include the proofs here).

### Example Instantiation

To assess the feasibility of the approach described in this paper and to demonstrate the underlying concepts, we have implemented an example reconfigurable system. This system is a hypothetical avionics system, representative, in part, of what might be found on a modern Unmanned Aerial Vehicle (UAV) or general-aviation aircraft. The example includes two functional applications: an autopilot and a flight control system (FCS). Only minimal versions of application functionality have been implemented since the system is not intended for operational use. However, each application has a complete reconfiguration interface, including the capability to provide multiple functionalities. An electrical power generation system is modeled as an environmental factor that may necessitate reconfiguration.

#### Autopilot Specifications
In its primary specification, the autopilot provides four services to aid the pilot: altitude hold, heading hold, climb to altitude, and turn to heading. It also implements a secondary specification where it provides only altitude hold, which requires substantially fewer processing and memory resources.

#### Flight Control System (FCS) Specifications
The FCS provides a single service in its primary specification: it accepts input from the pilot or autopilot and generates commands for the control surface actuators. This primary specification could include stability augmentation facilities designed to reduce pilot workload, although we merely simulate this. The FCS also implements a secondary specification where it provides direct control only, i.e., it applies commands directly to the control surfaces without any augmentation of its input. As with the autopilot, when operating under this secondary specification, the FCS requires fewer processing and memory resources.

#### Electrical Power Generation System
The electrical system consists of two alternators and a battery, and its interface exports the state it is in. One alternator provides primary vehicle power; the second is a spare but normally charges the battery, which serves as an emergency power source. Loss of one alternator reduces available power below the threshold needed for full operation. Loss of both alternators leaves the battery as the only power source. The electrical system operates independently of the reconfigurable system; it merely provides the system details of its state. For illustration, the anticipated component failures for which reconfiguration takes place are all based on the electrical system.

### System Configurations

Our system can operate in three configurations:

1. **Full Service**: Full power is available, and all platform computing equipment can be used. The autopilot and FCS provide full service, and each operates on a separate computer.
2. **Reduced Service**: Power is available from only one alternator or the battery, and some of the platform computing equipment must be shut down. The applications must share a single computer that does not have the capacity to support full service from the applications. Therefore, the autopilot provides altitude hold service only, and the FCS provides direct control.
3. **Minimal Service**: In this configuration, power is available from the battery only, and the remaining platform computing equipment must switch to low-power operating mode. The applications must share a single computer that is operating in low-power mode, so the autopilot is turned off, and the FCS provides direct control.

### Formal Verification

The reconfiguration interfaces for the two applications, the three acceptable configurations, and the transitions between configurations are specified in PVS. We type-checked our instantiation against the abstract specification described in Section 6 and discharged the generated proof obligations.

We have constructed a Java implementation of the example, but we have not verified it against its specification since the focus of this work is at the specification level. The implementation runs on a set of personal computers running Red Hat Linux. Real-time operation is modeled using a virtual clock synchronized to the clocks provided by Linux. A time-triggered, real-time bus and stable storage are simulated. This example has been operated in a simulated environment that includes aircraft state sensors and a simple model of aircraft dynamics. Its potential reconfigurations have been triggered by simulated failures of the electrical system.

### Example System Fault Tolerant Action

In our example, each SFTA is implemented as described in Section 6.2. For illustration, we require certain hypothetical constraints on system transitions that manage aircraft dynamics properly. In any transition, the aircraft’s condition in the target configuration must be known so that processing in the target configuration begins correctly. In this example, we require that the control surfaces be centered, i.e., not exerting turning forces on the aircraft, and the autopilot be disengaged when a new configuration is entered. These are the preconditions for the FCS and autopilot. The postcondition that each application must establish prior to reconfiguration is merely to cease operation.

The specific applications used in this illustration have no dependencies during their halt stages because neither requires any support to establish its postcondition. There is only one dependency during initialization: the autopilot cannot resume service in the Reduced Service configuration until the FCS has completed its reconfiguration—the autopilot cannot effect control without the other application.

Suppose the system is operating in the Full Service configuration and an alternator fails. The electrical system will switch to use the other alternator, and its interface will inform the SCRAM of the failure. The autopilot and flight control applications are unable to complete their SFTAs within the allotted time because there is not enough power to run them both at full service; however, their postconditions are simply to cease operation, and so this does not pose a problem. Based on the static reconfiguration table, the SCRAM commands a change to the Reduced Service configuration. The system reconfiguration is implemented using the sequence shown in Table 1 to complete its SFTA.

### Properties of the Example Instantiation

As discussed above, the formal properties from Section 6.4 are enforced in specification instantiations through the type system. PVS does this by generating type-correctness conditions (TCCs), a kind of proof obligation. The example proof obligation in Figure 2, abbreviated and otherwise edited for clarity, requires that: (1) the example’s specification levels are of the type expected as the SCRAM input parameters; and (2) the `covering_txns` predicate (which ensures a transition exists for any possible failure-environment pair) must hold for the parameters. We have proven all of the TCCs generated for the example.

### Conclusion

Safety-critical systems often use hardware replication to tolerate faults that occur during operation, and Schlichting and Schneider have presented a theory of doing this based on the rigorous semantics of fail-stop processors. Reconfiguring the system in response to faults, however, can help designers achieve their dependability goals without necessitating additional hardware, thus saving weight, power, and space. In this paper, we have drawn on previous work in reconfiguration of single applications and the semantics presented by Schlichting and Schneider to create an architecture and verification framework to use reconfiguration in dependable systems. We address the requirements of systems of interacting applications, combining the distributed system aspect of fail-stop with the structured, proof-based assurance of our previous work to address timing as well as temporal characteristics of systems. This enables assurance not only of liveness but also of real-time characteristics of system recovery. To assess the feasibility of our theory in practice, we have presented an example based on a prototypical control system, interpreted our theory in terms of its specific requirements, and shown how the theoretical properties hold over an instantiation through type mechanisms.

### Acknowledgments

We thank Xiang Yin and Dean Bushey for their assistance with our example. This work was sponsored, in part, by NASA under grant number NAG1-02103.

### References

[1] ARINC Inc. “Avionics Application Software Standard Interface.” ARINC Spec. 653, Baltimore, MD, 1997.

[2] Garlan, D., S. Cheng, and B. Schmerl. “Increasing System Dependability through Architecture-based Self-repair.” Architecting Dependable Systems, R. de Lemos, C. Gacek, A. Romanovsky (Eds), Springer-Verlag, 2003.

[3] Jahanian, F., and A.K. Mok. “Safety Analysis of Timing Properties in Real-Time Systems.” IEEE Trans. on Software Engineering, 12(9):890-904.

[4] Knight, J. C., E. A. Strunk, and K. J. Sullivan. “Towards a Rigorous Definition of Information System Survivability.” Proc. 3rd DARPA Information Survivability Conf. and Exposition, Washington, D.C., April 2003.

[5] Kopetz, H., and G. Bauer, “The Time-Triggered Architecture.” Proc. IEEE, 91(1):112-126, Jan. 2003.

[6] Porcarelli, S., M. Castaldi, F. Di Giandomenico, A. Bondavalli, and P. Inverardi. “A framework for reconfiguration-based fault-tolerance in distributed systems.” Architecting Dependable Systems II, R. De Lemos, C. Gacek, and A. Romanovsky (Eds), Springer-Verlag, 2004.

[7] Sha, L. “Using Simplicity to Control Complexity.” IEEE Software 18(4):20-28.

[8] Schlichting, R. D., and F. B. Schneider. “Fail-stop processors: An approach to designing fault-tolerant computing systems.” ACM Trans. Computing Systems 1(3):222-238.

[9] Shelton, C., and P. Koopman. “Improving System Dependability with Functional Alternatives.” Proc. 2004 Int’l Conf. Dependable Systems and Networks, Florence, Italy, June 2004.

[10] Strunk, E. A., and J. C. Knight. “Assured Reconfiguration of Embedded Real-Time Software.” Proc. Int’l Conf. Dependable Systems and Networks, Florence, Italy, June 2004.

[11] Strunk, E. A., J. C. Knight, and M. A. Aiello. “Distributed Reconfigurable Avionics Architectures.” Proc. 23rd Digital Avionics Systems Conference, Salt Lake City, UT, Oct. 2004.

[12] Yeh, Y. C. “Triple-Triple Redundant 777 Primary Flight Computer.” Proc. 1996 IEEE Aerospace Applications Conference, vol. 1, New York, N.Y., February 1996.