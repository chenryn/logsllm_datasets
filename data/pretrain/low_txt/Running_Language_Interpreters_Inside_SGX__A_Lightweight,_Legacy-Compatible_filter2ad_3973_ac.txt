### 参考文献

1. A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an untrusted cloud with Haven,” *ACM Transactions on Computer Systems (TOCS)*, vol. 33, 2015.

2. S. Checkoway and H. Shacham, “Iago Attacks: Why the System Call API is a Bad Untrusted RPC Interface,” pp. 253–264.

3. G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai, “Sgxpectre attacks: Leaking enclave secrets via speculative execution,” in *EuroS&P’19*, 2019.

4. M. Hähnel, W. Cui, and M. Peinado, “High-resolution side channels for untrusted operating systems,” in *S&P’15*, 2015.

5. Y. Fu, E. Bauman, R. Quinonez, and Z. Lin, “Sgx-lapd: Thwarting controlled side channel attacks via enclave verifiable page faults,” in *RAID’17*, 2017.

6. D. Goltzsche, C. Wulf, D. Muthukumaran, K. Rieck, P. Pietzuch, and R. Kapitza, “TrustJS: Trusted client-side execution of JavaScript,” in *EuroSec*, 2017.

7. J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten, “Lest we remember: cold-boot attacks on encryption keys,” *Communications of the ACM*, vol. 52, 2009.

8. T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed sandbox for untrusted computation on secret data,” *TOCS’18*, vol. 35, no. 4, p. 13, 2018.

9. Intel, “Intel Software Guard Extensions Programming Reference (rev1),” Sep. 2013.

10. J. Lee, J. Jang, Y. Jang, N. Kwak, Y. Choi, C. Choi, T. Kim, M. Peinado, and B. B. Kang, “Hacking in darkness: Return-oriented programming against secure enclaves,” in *USENIX Security 17*, 2017.

11. S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring fine-grained control flow inside SGX enclaves with branch shadowing,” in *USENIX Security 17*, 2017.

12. J. Lind, C. Priebe, D. Muthukumaran, D. O’Keeffe, P.-L. Aublin, F. Kelbert, T. Reiher, D. Goltzsche, D. Eyers, R. Kapitza et al., “Glamdring: Automatic application partitioning for Intel SGX,” in *USENIX ATC 17*, Santa Clara, CA, 2017.

13. F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi, V. Shanbhogue, and U. R. Savagankar, “Innovative instructions and software model for isolated execution,” in *HASP’13*, Tel-Aviv, Israel, 2013.

14. J. K. Ousterhout, “Scripting: Higher level programming for the 21st century,” *IEEE Computer*, vol. 31, 1998.

15. S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing page faults from telling your secrets,” in *Asia CCS’16*. ACM, 2016, pp. 317–328.

16. M.-W. Shih, S. Lee, T. Kim, and M. Peinado, “T-SGX: Eradicating controlled-channel attacks against enclave programs,” in *NDSS’17*, San Diego, CA, 2017.

17. S. Shinde, D. Le Tien, S. Tople, and P. Saxena, “Panoply: Low-TCB Linux applications with SGX enclaves,” National University of Singapore, Tech. Rep, 2016.

18. C. Tsai and D. Porter, “Graphene-SGX,” https://github.com/oscarlab/graphene.

19. W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A. Gunter, “Leaky cauldron on the dark land: Understanding memory side-channel hazards in SGX,” in *ACM CCS*. ACM, 2017, pp. 2421–2434.

20. Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks: Deterministic side channels for untrusted operating systems,” in *S&P’15*, 2015.

### 额外性能结果

当脚本语言解释器在安全的飞地（enclave）中执行时，脚本执行会带来额外的开销，包括运行飞地边界操作和内存访问操作。飞地边界操作是用于可信飞地代码与不可信代码之间的通信，例如数据传输和控制传输操作。这些操作对于系统调用是必要的。同样，由于SGX使用内存加密来保护数据，读写内存访问操作也会产生额外的开销。因此，我们设计了相应的微基准测试来仔细检查这些操作的开销。

具体来说，我们在Lua中设计了两个微基准测试来评估ScriptShield的性能。第一个微基准测试评估系统调用开销，这是ScriptShield设计中的一个重要部分；另一个基准测试通过内存复制操作来测量内存访问开销。选择Lua作为语言在这里并不重要，因为很少有脚本代码在执行；开销主要来自系统调用或内存访问。然而，需要注意的是，这些基准测试仍然在解释器中进行，无论是原生环境还是ScriptShield环境中。

**系统调用开销**

系统调用在几乎所有应用程序中都使用，但在SGX飞地中不允许。ScriptShield的一个关键组件是在musl-libc之上的shim层，它将所有系统调用从飞地重定向到ocalls，在飞地外部执行实际的系统调用。由于系统调用shim是我们框架的重要部分，我们希望量化系统调用开销。显然，我们无法测试所有实现的系统调用，因为设计相应的测试用例具有挑战性。因此，我们将重点放在最具代表性的系统调用上。

有趣的是，我们注意到readv和writev是许多日常应用程序中最常用的系统调用。因此，我们设计了两个基准测试，分别写入文件和从文件读取，最终调用readv和writev系统调用。我们使用不同的输入数据大小进行性能测试。

图5显示了在ScriptShield中运行readv和writev系统调用1000次的执行时间对比，以原生执行为基准。结果显示，ScriptShield在readv上几乎没有明显的开销，而在writev上有合理的开销。

**内存访问开销**

SGX使用内存加密引擎（MEE）对飞地内存进行加密。任何在飞地内的访问都会获取明文，而任何在飞地外的访问只能获取密文。这自然带来了成本。特别是，当飞地从飞地内存读取数据或将数据写入飞地内存时，请求或更新的页会被访问或写入页面缓存。对于缓存未命中或需要将页写入内存的情况，MEE必须加密和解密缓存行，因为EPC页保护机制。当飞地代码的内存需求超过EPC大小时，开销将会非常大。

为了测量飞地内的内存访问开销，我们利用系统调用测试并设计了另一个微基准测试，依次和随机地读写飞地内存，因为顺序和随机内存访问有不同的缓存未命中频率。更具体地说，该基准测试测量顺序和随机读/写操作的时间，并以没有飞地的部署为基准。所有操作都访问一个256K的内存区域。图6显示了在ScriptShield中运行内存访问基准测试的百分比开销，以原生执行为基准。我们可以看到，ScriptShield对内存读写性能的影响不大。

### 安全应用

一旦我们能够在SGX飞地中运行遗留脚本代码，我们现在就能够保护这些代码的秘密性和完整性，而无需修改任何脚本代码。为了展示如何使用ScriptShield来保护（遗留）脚本语言，接下来我们介绍一些安全应用。

**保护HTTP服务器**

在云环境中运行应用程序时，客户希望能够保护其代码和数据的机密性和完整性。ScriptShield能够轻松地将解释器放置在飞地中，非常适合保护嵌入脚本引擎的应用程序。这种类型应用的一个突出例子是HTTP服务器，其中许多支持多种脚本语言进行服务器端脚本编写。脚本比编译代码更灵活、动态且易于使用，因此许多网站在其Web服务器中使用脚本语言。

Lua被广泛用于几个流行的网站的服务器端脚本编写，例如淘宝网，并且作为MediaWiki的模板语言。因此，我们决定演示保护在HTTP服务器上运行的Lua脚本。Xavante是一个完全用Lua编写的HTTP服务器，还提供对Lua脚本的支持。因此，我们选择了Xavante来演示ScriptShield。由于Xavante是用Lua编写的，我们不仅可以保护服务器端脚本，还可以将整个Web服务器放入飞地中，确保其完整性和所运行脚本的机密性和完整性。

Xavante具有基于URI映射处理程序的模块化架构。它提供了文件处理程序、重定向处理程序和WSAPI处理程序。要使用Xavante，我们只需配置它（无需修改任何代码），然后在我们移植的Lua解释器中执行即可。我们还使用了一组基准测试来评估运行Xavante时的开销。

具体来说，我们有三个基准测试：(1) 运行loop.lp，这是一个在Xavante服务器上运行的Lua脚本，执行一个简单的循环并在网页上显示结果；(2) 访问Xavante托管的默认index.html；(3) 访问Xavante托管的10MB文件。我们使用Apache HTTP服务器基准测试工具ab来运行这些测试。此外，我们通过运行不同数量的并发连接到服务器的ab来测量ScriptShield的吞吐量开销。图7显示了这三个基准测试的结果。从图7可以看出，loop.lp的平均开销约为2毫秒，示例html文件的平均开销约为0.5毫秒，10MB文本文件的平均开销约为0.4毫秒。这三个基准测试的开销主要是由于基准测试的运行时间较短。因此，任何固定开销（例如进入和退出飞地）可能会在运行ScriptShield时主导基准测试的运行时间。这导致了较高的开销百分比，尽管实际执行时间在原生环境和ScriptShield中都非常小。Xavante扩展性良好（开销不会随着并发连接数的增加而增加），同时整个HTTP服务器保持在安全飞地中。

**保护计算机游戏**

计算机游戏经常可以被逆向工程。游戏发布者和作弊者之间常常存在保护某些游戏逻辑机密性的竞争。此外，当今许多计算机游戏引擎使用如Lua和Squirrel等脚本语言来编写游戏逻辑。由于我们已经能够在ScriptShield中运行Lua解释器，我们可以提供保护游戏逻辑免受逆向工程的能力。

LÖVE是一个用于制作2D游戏的引擎，使用Lua编写，并已用于商业项目。我们成功地在ScriptShield中运行了LÖVE，因此我们能够运行用Lua编写的游戏。由于不同游戏需要不同版本的LÖVE，我们仅运行Mr. Rescue作为概念验证，以展示ScriptShield如何保护游戏逻辑免受恶意攻击。Mr. Rescue完全是用Lua编写的。由于计算机游戏的高度互动性，我们没有尝试测量其性能开销，但我们观察到使用ScriptShield与不使用时用户体验没有差异。

由于我们的框架专门设计用于运行脚本，纯脚本语言编写的应用程序最容易在我们的框架中运行。对于部分使用脚本语言编写的应用程序，则需要额外的努力，因为需要处理脚本与本地应用程序组件之间的交互。

---

通过这种方式，文本更加清晰、连贯和专业，便于读者理解和引用。