### Replacing Flow Elements with Switch Elements

To reduce control-flow complexity, replace the flow element with a switch element that has two outgoing transitions. Each of these transitions should then lead to a flow element with two outgoing transitions. This change would decrease the control-flow complexity from 24 (i.e., 4!) to 4 (i.e., 2 * 2!). The feasibility of this reengineering effort depends on the specific business process under analysis.

### Related Work

While extensive research on software program complexity exists in the field of software engineering, there is a relative paucity of literature on complexity analysis for web processes and workflows. In software engineering, various metrics have been developed, including lines-of-code (Park 1992), Halstead’s measure (Halstead 1977), McCabe’s measure (McCabe 1977), the COCOMO model (Boehm 1981), and the Function-Point method (Garmus and Herron 2000). These metrics provide meaningful and timely management information by measuring the development, operation, and maintenance of software. Zuse (Zuse 1997) identified hundreds of different software metrics proposed for software measurement.

The most significant research on complexity analysis for web processes and workflows includes works by Reijers and Vanderfeesten (2004) and Cardoso (2005). Cardoso (2005) introduced a control-flow metric to analyze the complexity of tri-logic workflows (Cardoso and Cravo 2006). This metric counts the number of new states generated by the introduction of control-flow patterns such as XOR-splits, OR-splits, and AND-splits. Another study by Cardoso (2005) emphasized the importance of analyzing the complexity of processes that model teamwork, communication, and collaboration. Workflow management systems, which support the creation of teamwork and enable collaboration, can become highly complex, making complexity analysis crucial. Cardoso (2005) also evaluated the control-flow complexity measure in terms of Weyuker’s properties, which are essential for any good complexity measure. Additionally, Cardoso (2005) argued that a control-flow metric alone is insufficient and proposed the need to investigate data-flow complexity. Reijers and Vanderfeesten (2004) proposed cohesion and coupling metrics for workflow process design, which can be reformulated to provide a specific complexity perspective.

### Future Work

To empirically validate the complexity metrics described, experimental studies are necessary. An empirical study compares theoretical beliefs with observed data, playing a fundamental role in our work. Zelkowitz and Wallace (1998) highlighted the importance of using experimental models for validating metrics. The validation process involves data collection, experimentation, and data analysis. In our case, an experiment would involve roles such as business process managers, business analysts, and process implementers. The collected data can be statistically analyzed to determine the correlation between the proposed complexity metrics and the ratings provided by the subjects.

Another critical issue is determining the meaning of a given complexity metric and the precise number to use as a complexity limit in process development. For example, using McCabe’s complexity metrics, a complexity of 10 indicates a simple program, while a complexity greater than 50 denotes an untestable program with very high risk. We expect that similar limits for control-flow complexity will be established through empirical and practical results from research and real-world implementations.

To develop a generic metric for process modeling languages, it is necessary to analyze the control-flow complexity (CFC) of additional languages. Once a reasonable set of business process languages has been analyzed, general/generic metrics can be devised and applied. Languages that still need to be studied include WSFL (Leymann 2001), BPML (BPML 2004), YAWL (Aalst and Hofstede 2003), and BPMN (BPMN 2005).

### Conclusions

The complexity of BPEL processes is closely related to factors such as flexibility, understandability, usability, testability, reliability, and maintainability. Developing measures to analyze process complexity is essential for reengineering processes to reduce their complexity. Processes with lower complexity tend to be more flexible, as they can be more easily modified for different applications or environments.

Our work presents an approach to conducting BPEL process complexity analysis using measurement strategies. We have discussed the development of a control-flow complexity metric, which is a design-time measurement. This metric can be used to evaluate the difficulty of producing a BPEL process design before implementation. Incorporating control-flow complexity analysis into the process development cycle significantly influences the design phase, leading to more optimized processes. Complexity analysis can also aid in deciding whether to maintain or redesign a process. As known from software engineering, it is cost-effective to address defects early in the design lifecycle. Our work introduces the initial steps towards carrying out process complexity analysis.

### References

- Aalst, W. M. P. v. d. (1998). "The Application of Petri Nets to Workflow Management." The Journal of Circuits, Systems and Computers 8(1): 21-66.
- Aalst, W. M. P. v. d., A. P. Barros, et al. (2000). Advanced Workflow Patterns. Seventh IFCIS International Conference on Cooperative Information Systems.
- Aalst, W. M. P. v. d. and A. H. M. t. Hofstede (2003). YAWL: Yet Another Workflow Language (Revised Version). Brisbane, Queensland University of Technology2003.
- Aalst, W. M. P. v. d., A. H. M. t. Hofstede, et al. (2003). "Workflow Patterns." Distributed and Parallel Databases 14(3): 5-51.
- Anyanwu, K., A. Sheth, et al. (2003). "Healthcare Enterprise Process Development and Integration." Journal of Research and Practice in Information Technology, Special Issue in Health Knowledge Management 35(2): 83-98.
- Boehm, B. (1981). Software Engineering Economics, Prentice Hall.
- BPML (2004). Business Process Modeling Language. 2004.
- BPMN (2005). Business Process Modeling Notation - http://www.bpmn.org/.
- CAPA (1997). Course Approval Process Automation (CAPA). Athens, GA., LSDIS Lab, Department of Computer Science, University of Georgia.
- Cardoso, J. (2005). About the Complexity of Teamwork and Collaboration Processes. IEEE International Symposium on Applications and the Internet (SAINT 2005), Workshop - Teamware: supporting scalable virtual teams in multi-organizational settings, Trento, Italy, IEEE Computer Society.
- Cardoso, J. (2005). About the Data-Flow Complexity of Web Processes. 6th International Workshop on Business Process Modeling, Development, and Support: Business Processes and Support Systems: Design for Flexibility, Porto, Portugal.
- Cardoso, J. (2005). Control-flow Complexity Measurement of Processes and Weyuker's Properties. 6th International Conference on Enformatika, 26-28, October 2005, Budapest, Hungary, International Academy of Sciences.
- Cardoso, J. (2005). Evaluating Workflows and Web Process Complexity. Workflow Handbook 2005. L. Fischer. Lighthouse Point, FL, USA, Future Strategies Inc.: 284-290.
- Cardoso, J. and C. Cravo (2006). Verifying the logical termination of workflows (accepted for publication). 5th Annual Hawaii International Conference on Statistics, Mathematics and Related Fields, Honolulu, Hawaii, USA.
- Cardoso, J., J. Miller, et al. (2004). "Modeling Quality of Service for workflows and web service processes." Web Semantics: Science, Services and Agents on the World Wide Web Journal 1(3): 281-308.
- Cardoso, J. and A. P. Sheth (2005). Introduction to Semantic Web Services and Web Process Composition. Semantic Web Process: powering next generation of processes with Semantics and Web services. J. Cardoso and A. P. Sheth. Heidelberg, Germany, Springer-Verlag. 3387: 1-13.
- Chinnici, R., M. Gudgin, et al. (2003). Web Services Description Language (WSDL) Version 1.2, W3C Working Draft 24, http://www.w3.org/TR/2003/WD-wsdl12-20030124/.
- Christensen, E., F. Curbera, et al. (2001). W3C Web Services Description Language (WSDL), http://www.w3.org/TR/wsdl.
- Curbera, F., W. Nagy, et al. (2001). Web Services: Why and How. Workshop on Object-Oriented Web Services - OOPSLA 2001, Tampa, Florida, USA.
- Curtis, B. (1979). In search of software complexity. Workshop on Qualitative Software Models for Reliability, Complexity and Cost, IEEE Computer Society Press.
- Du, W., J. Davis, et al. (1999). Enterprise workflow resource management. International Workshop on Research Issues in Data Engineering, Sydney, Australia.
- Ferrara, L., F. Hayden, et al., Eds. (2003). The Networked Supply Chain: Applying Breakthrough BPM Technology to Meet Relentless Customer Demands, J. Ross Publishing.
- Garmus, D. and D. Herron (2000). Function Point Analysis: Measurement Practices for Successful Software Projects, Addison Wesley.
- Halstead, M. H. (1977). Elements of Software Science, Operating, and Programming Systems Series. New York, NY, Elsevier.
- IEEE (1992). IEEE 610, Standard Glossary of Software Engineering Terminology. New York, Institute of Electrical and Electronic Engineers.
- Jones, T. C. (1986). Programming Productivity. New York, McGraw-Hill.
- Lanning, D. L. and T. M. Khoshgoftaar (1994). "Modeling the Relationship Between Source Code Complexity and Maintenance Difficulty." Computer 27(9): 35-41.
- Leymann, F. (2001). Web Services Flow Language (WSFL 1.0), IBM Corporation.
- Li, L. and A. Offutt (1996). Algorithmic analysis of the impact of changes to object-oriented software. Int'l Conf. Software Maintenance-ICSM (1996), Los Alamitos, USA, IEEE Computer Society Press.
- McCabe, T. (1976). "A Complexity Measure." IEEE Transactions of Software Engineering SE-2(4): 308-320.
- McCabe, T. J. (1977). "A Complexity Measure." Transactions on Software Engineering 13(10): 308-320.
- McCabe, T. J. and C. W. Butler (1989). Design Complexity Measurement and Testing. Communications of the ACM. 32: 1415-1425.
- McCabe, T. J. and A. H. Watson (1994). "Software Complexity." Crosstalk, Journal of Defense Software Engineering 7(12): 5-9.
- METEOR (2006). METEOR (Managing End-To-End OpeRations) Project Home Page, LSDIS Lab.
- Park, R. E. (1992). Software size measurement: A framework for counting source statements. Pittsburgh, PA, Software Engineering Institute, Carnegie Mellon University.
- Reijers, H. A. and I. T. P. Vanderfeesten (2004). Cohesion and Coupling Metrics for Workflow Process Design. BPM 2004 (LNCS 3080). J. Desel, B. Pernici and M. Weske. Berlin, Heidelberg, Springer-Verlag. LNCS 3080: 290-305.
- Russell, N., W. M. P. v. d. Aalst, et al. (2005). Workflow Resource Patterns: Identification, Representation and Tool Support. 17th International Conference on Advanced Information Systems Engineering (CAiSE 2005), Porto, Portugal, Springer 2005.
- Russell, N., A. H. M. t. Hofstede, et al. (2005). Workflow Data Patterns: Identification, Representation and Tool Support. 24th International Conference on Conceptual Modeling, Klagenfurt, Austria, Springer.
- Sheth, A. P., W. v. d. Aalst, et al. (1999). "Processes Driving the Networked Economy." IEEE Concurrency 7(3): 18-31.
- Thatte, S. (2001). XLANG: Web Services for Business Process Design, Microsoft, Inc.
- WS-BEPL (2005). Business Process Execution Language for Web Services, http://www-128.ibm.com/developerworks/library/specification/ws-bpel/.
- XMLSchema (2005). XML Schema, http://www.w3.org/XML/Schema.
- Zelkowitz, M. V. and D. R. Wallace (1998). "Experimental Models for Validating Technology." IEEE Computer 31(5): 23-31.
- zur Mühlen, M. (1999). Resource Modeling in Workflow Applications. Workflow Management Conference, Muenster, Germany.
- Zuse, H. (1997). A Framework of Software Measurement. Berlin, Walter de Gruyter Inc.