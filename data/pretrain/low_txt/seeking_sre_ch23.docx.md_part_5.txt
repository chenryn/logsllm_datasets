### 明确契约的重要性
在组织中，将可靠性视为技术功能的首要任务至关重要。这一原则不仅适用于特定领域，而且贯穿于所有业务活动中，从而确保其他团队无需额外付出努力。

## 反模式14：依赖地狱
> *依赖项控制即失败域控制。*

**依赖地狱**指的是一个难以区分系统间依赖关系、循环依赖或新依赖通知的环境。在成熟组织的软件开发生命周期（SDLC）中，旧项目和工具可能被停用，而新平台和组件启用，这可能导致相互依赖性超出人们的理解范围。预测变更影响变得困难，因此需要自动检测新增依赖，并更新灾害计划和路线图。混沌工程可以揭示这些问题，但提前跟踪和规划更为理想。显式跟踪依赖关系有助于服务所有者在迁移、弃用和移除过程中节省时间和精力。

## 反模式15：笨拙的治理
> *你不能像操控超级巨轮一样操纵蚊子舰队。*

**笨拙的治理**描述了大型组织因传统IT治理结构而不愿意采用精益和敏捷原则的情况。这种治理方式使得持续开发、改进和发布变得困难。预算应流向整个组织而非特定项目，领导者应对结果负责，而不是具体任务。激励高效交付并信任他们在预算和流程上的决策。使用战略对齐技术如Hoshin Kanri、Catchball和OKR来传递整体目标。建立文化一致性对于构建有效的可靠性工程文化和团队至关重要。

## 反模式16：考虑不周的SLO
> *SLO既不是主要技术度量，也不是静态度量。*

**考虑不周的SLO**指那些无法与业务结果、优先级和承诺双向关联的服务级别目标（SLO）。SLO应基于业务需求设定，而非可提供水平。制定SLO的过程应在系统设计时开始，基于系统的业务案例和可交付成果，并通过产品管理、客户支持等渠道进行修正。选择SLI应基于工程技术讨论，确定哪些事项重要以及如何验证其运维。设置SLO需合理分析客户需求。如果SLO不更新，将失去意义，导致用户流失和服务质量下降。整个业务需与SLO保持一致，资本和运维预算也应反映这些指标的优先级。SLI和SLO是组织成功的推理和沟通工具。

## 反模式17：让人恼火的API接口
> *单纯的服务器端SLO只能保证客户端的故障。*

**让人恼火的API接口**指SRE未能与关键外部各方协作和集成，导致客户不满。DevOps哲学强调，运维孤岛会导致SLO无法达成。不同组织间的沟通迟滞和“都是别人的问题”的心态会影响组织间的合作效果。因此，必须与外部各方协作，共同衡量、分担责任，并尝试补救风险。