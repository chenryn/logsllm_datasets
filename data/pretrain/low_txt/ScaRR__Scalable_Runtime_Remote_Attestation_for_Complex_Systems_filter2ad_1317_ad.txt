### Introduction to Runtime Attestation Based on Policies

This paper proposes a runtime attestation (RA) method based on policies, such as the number of instructions executed between two consecutive returns. Previous works have suggested acquiring runtime measurements of software properties but lack a fine-grained control-flow analysis.

### Modern Fine-Grained Control-Flow RA: C-FLAT

C-FLAT, proposed by Abera et al. [8], is a modern fine-grained control-flow RA scheme. It measures valid execution paths in embedded systems and generates a hash whose length depends on the number of control-flow events encountered at runtime. This hash is then compared with a list of offline measurements. The key differences between ScaRR and C-FLAT are:
1. **Control-Flow Representation**: C-FLAT's representation grows with software complexity, whereas ScaRR manages complex control-flow paths using partial reports.
2. **Modern Architecture Features**: ScaRR is designed to leverage features of modern computer architectures, such as multi-threading and larger buffers.

### LO-FAT: Hardware Implementation of C-FLAT

Dessouky et al. propose LO-FAT [22], a hardware implementation of C-FLAT aimed at improving runtime performance for embedded systems. However, LO-FAT inherits all of C-FLAT's design limitations in terms of control-flow representation.

### ATRIUM: Strengthening RA Against Physical Attacks

Zeitouni et al. designed ATRIUM [50], which enhances runtime RA schemes against physical attacks for embedded devices. Although ATRIUM addresses different use cases, it can be combined with ScaRR to provide a more robust solution.

### LiteHax: Handling Data-Only Attacks

Dessouky et al. also propose LiteHax [21], which focuses on data-only attacks. Similar to ScaRR, LiteHax sends detailed control-flow event information to a Verifier. However, LiteHax targets data-oriented attacks rather than control-flow, and uses symbolic execution for validation, which slows down the verification phase.

### DIAT: Scalable RA for Collaborative Autonomous Systems

Abera et al. discuss DIAT [9], a scalable RA for collaborative autonomous systems. DIAT models runtime control-flow as a multi-set, allowing it to represent complex control-flow graphs with a relatively short hash. However, this approach loses information about the execution order of branches, making it vulnerable to attacks like COOP [36]. In contrast, ScaRR combines strong static analysis with shadow execution at the Verifier side, providing a sound approach by design.

### Semantic RA and Control-Flow Integrity

Haldar et al. [26] propose a semantic RA that leverages a virtual machine to validate semantic properties, such as subclass inheritance. However, their focus is on run-time languages, while ScaRR operates at the binary level. Recent works on control-flow integrity [23, 27, 33] share some similarities with RA, involving a target process and a monitor process. ScaRR, however, considers a fully compromised user-space, where an attacker can tamper with the target software code or the monitor process itself.

### Conclusion

In this work, we introduce ScaRR, the first schema enabling runtime RA for complex systems to detect control-flow attacks generated in user-space. ScaRR relies on a novel control-flow model that allows:
1. **Applicability to Any Software**: Regardless of its complexity.
2. **Intermediate Verification**: Of the monitored program.
3. **Fine-Grained Reporting**: Of incoming attacks.

We developed and evaluated ScaRR using the SPEC CPU 2017 suite, demonstrating superior performance in terms of attestation and verification speed, while maintaining limited network traffic.

### Future Work

Future research will focus on:
- Extracting more precise control-flow graphs (CFGs).
- Addressing compromised operating systems.
- Developing new verification methods for partial reports.

### Acknowledgments

This work was partly supported by the SUTD start-up research grant SRG-ISTD-2017-124 and the European Commission under the Horizon 2020 Programme (H2020), as part of the LOCARD project (Grant Agreement no. 832735).

### References

[1] Bzip2, 2002. Last access March 2019.
[2] Amazon Web Services (AWS), 2006. Last access March 2019.
[3] Microsoft Azure, 2010. Last access March 2019.
[4] Blake2, 2013. Last access March 2019.
[5] McSema, 2014. Last access Feb 2019.
[6] Zstandard, 2016. Last access March 2019.
[7] Zlib, 2017. Last access March 2019.
[8] Tigist Abera, N Asokan, Lucas Davi, Jan-Erik Ekberg, Thomas Nyman, Andrew Paverd, Ahmad-Reza Sadeghi, and Gene Tsudik. C-FLAT: Control-Flow Attestation for Embedded Systems Software. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 743–754. ACM, 2016.
[9] Tigist Abera, Raad Bahmani, Ferdinand Brasser, Ahmad Ibrahim, Ahmad-Reza Sadeghi, and Matthias Schunter. DIAT: Data Integrity Attestation for Resilient Collaboration of Autonomous Systems.
[10] Ittai Anati, Shay Gueron, Simon Johnson, and Vincent Scarlata. Innovative Technology for CPU-Based Attestation and Sealing. In Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy, volume 13. ACM New York, NY, USA, 2013.
[11] Jean-Philippe Aumasson, Willi Meier, Raphael C.-W. Phan, and Luca Henzen. BLAKE2, pages 165–183. Springer Berlin Heidelberg, Berlin, Heidelberg, 2014.
[12] Haihe Ba, Huaizhe Zhou, Shuai Bai, Jiangchun Ren, Zhiying Wang, and Linlin Ci. jmonatt: Integrity Monitoring and Attestation of JVM-Based Applications in Cloud Computing. In Information Science and Control Engineering (ICISCE), 2017 4th International Conference on, pages 419–423. IEEE, 2017.
[13] Katelin A Bailey and Sean W Smith. Trusted Virtual Containers on Demand. In Proceedings of the Fifth ACM Workshop on Scalable Trusted Computing, pages 63–72. ACM, 2010.
[14] Arash Baratloo, Navjot Singh, Timothy K Tsai, et al. Transparent Run-Time Defense Against Stack-Smashing Attacks. In USENIX Annual Technical Conference, General Track, pages 251–262, 2000.
[15] Mihir Bellare, Joe Kilian, and Phillip Rogaway. The Security of the Cipher Block Chaining Message Authentication Code. Journal of Computer and System Sciences, 61(3):362–399, 2000.
[16] Tyler Bletsch, Xuxian Jiang, Vince W Freeh, and Zhenkai Liang. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, pages 30–40. ACM, 2011.
[17] Nicholas Carlini and David Wagner. ROP is Still Dangerous: Breaking Modern Defenses. In USENIX Security Symposium, pages 385–399, 2014.
[18] Victor Costan and Srinivas Devadas. Intel SGX Explained. IACR Cryptology ePrint Archive, 2016:86, 2016.
[19] Dino Dai Zovi. Practical Return-Oriented Programming. In SOURCE Boston, 2010.
[20] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. Dynamic Integrity Measurement and Attestation: Towards Defense Against Return-Oriented Programming Attacks. In Proceedings of the 2009 ACM Workshop on Scalable Trusted Computing, pages 49–54. ACM, 2009.
[21] Ghada Dessouky, Tigist Abera, Ahmad Ibrahim, and Ahmad-Reza Sadeghi. LiteHAX: Lightweight Hardware-Assisted Attestation of Program Execution. In Proceedings of the International Conference on Computer-Aided Design, ICCAD '18, pages 106:1–106:8, New York, NY, USA, 2018. ACM.
[22] Ghada Dessouky, Shaza Zeitouni, Thomas Nyman, Andrew Paverd, Lucas Davi, Patrick Koeberl, N Asokan, and Ahmad-Reza Sadeghi. LO-FAT: Low-Overhead Control Flow Attestation in Hardware. In Design Automation Conference (DAC), 2017 54th ACM/EDAC/IEEE, pages 1–6. IEEE, 2017.
[23] Ren Ding, Chenxiong Qian, Chengyu Song, William Harris, Taesoo Kim, and Wenke Lee. Efficient Protection of Path-Sensitive Control Security. In Proceedings of the 26th USENIX Conference on Security Symposium, SEC'17, pages 131–148, Berkeley, CA, USA, 2017. USENIX Association.
[24] Graeme Gange, Jorge A Navas, Peter Schachte, Harald Søndergaard, and Peter J Stuckey. An Abstract Domain of Uninterpreted Functions. In International Conference on Verification, Model Checking, and Abstract Interpretation, pages 85–103. Springer, 2016.
[25] Xinyang Ge, Weidong Cui, and Trent Jaeger. Griffin: Guarding Control Flows Using Intel Processor Trace. In Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS '17, pages 585–598, New York, NY, USA, 2017. ACM.
[26] Vivek Haldar, Deepak Chandra, and Michael Franz. Semantic Remote Attestation: A Virtual Machine Directed Approach to Trusted Computing. In USENIX Virtual Machine Research and Technology Symposium, volume 2004, 2004.
[27] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William R. Harris, Taesoo Kim, and Wenke Lee. Enforcing Unique Code Target Property for Control-Flow Integrity. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS '18, pages 1470–1486, New York, NY, USA, 2018. ACM.
[28] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang. Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks. In Security and Privacy (SP), 2016 IEEE Symposium on, pages 969–986. IEEE, 2016.
[29] Chongkyung Kil, Jinsuk Jun, Christopher Bookholt, Jun Xu, and Peng Ning. Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software. In Computer Security Applications Conference, 2006. ACSAC'06. 22nd Annual, pages 339–348. IEEE, 2006.
[30] Chongkyung Kil, Emre C Sezer, Ahmed M Azab, Peng Ning, and Xiaolan Zhang. Remote Attestation to Dynamic System Properties: Towards Providing Complete System Integrity Evidence. In Dependable Systems & Networks, 2009. DSN'09. IEEE/IFIP International Conference on, pages 115–124. IEEE, 2009.
[31] Chris Lattner and Vikram Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In Proceedings of the International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization, page 75. IEEE Computer Society, 2004.
[32] E Jebamalar Leavline and DAAG Singh. Hardware Implementation of LZMA Data Compression Algorithm. International Journal of Applied Information Systems (IJAIS), 5(4):51–56, 2013.
[33] Daiping Liu, Mingwei Zhang, and Haining Wang. A Robust and Efficient Defense Against Use-After-Free Exploits via Concurrent Pointer Sweeping. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS '18, pages 1635–1648, New York, NY, USA, 2018. ACM.
[34] Gian Filippo Pinzari. Introduction to NX Technology, 2003.
[35] E. M. Rudd, A. Rozsa, M. Günther, and T. E. Boult. A Survey of Stealth Malware Attacks, Mitigation Measures, and Steps Toward Autonomous Open World Solutions. IEEE Communications Surveys Tutorials, 19(2):1145–1172, Secondquarter 2017.
[36] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 745–762. IEEE, 2015.
[37] Hovav Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 552–561. ACM, 2007.
[38] Nathan P Smith. Stack Smashing Vulnerabilities in the Unix Operating System, 1997.
[39] William Stallings. The Advanced Encryption Standard. Cryptologia, 26(3):165–188, July 2002.
[40] Paulus Stravers and Jan-Willem van de Waerdt. Translation Lookaside Buffer, December 10, 2013. US Patent 8,607,026.
[41] Toshio Suganuma, Takeshi Ogasawara, Mikio Takeuchi, Toshiaki Yasue, Motohiro Kawahito, Kazuaki Ishizaki, Hideaki Komatsu, and Toshio Nakatani. Overview of the IBM Java Just-In-Time Compiler. IBM Systems Journal, 39(1):175–193, 2000.
[42] Allan Tomlinson. Introduction to the TPM. In Smart Cards, Tokens, Security and Applications, pages 173–191. Springer, 2017.
[43] Victor Van der Veen, Lorenzo Cavallaro, Herbert Bos, et al. Memory Errors: The Past, the Present, and the Future. In International Workshop on Recent Advances in Intrusion Detection, pages 86–106. Springer, 2012.
[44] Sebastian Vogl, Jonas Pfoh, Thomas Kittel, and Claudia Eckert. Persistent Data-Only Malware: Function Hooks Without Code. In NDSS, 2014.
[45] Liangming Wang and Fagui Liu. A Trusted Measurement Model Based on Dynamic Policy and Privacy Protection in IaaS Security Domain. EURASIP Journal on Information Security, 2018(1):1, 2018.
[46] Robert NM Watson, Jonathan Woodruff, Michael Roe, Simon W Moore, and Peter G Neumann. Capability Hardware Enhanced RISC Instructions (CHERI): Notes on the Meltdown and Spectre Attacks. Technical Report, University of Cambridge, Computer Laboratory, 2018.
[47] Johannes Winter. Trusted Computing Building Blocks for Embedded Linux-Based ARM TrustZone Platforms. In Proceedings of the 3rd ACM Workshop on Scalable Trusted Computing, pages 21–30. ACM, 2008.
[48] Fan Yao, Jie Chen, and Guru Venkataramani. JOP-ALARM: Detecting Jump-Oriented Programming-Based Anomalies in Applications. In Computer Design (ICCD), 2013 IEEE 31st International Conference on, pages 467–470. IEEE, 2013.
[49] Pinghai Yuan, Qingkai Zeng, and Xuhua Ding. Hardware-Assisted Fine-Grained Code-Reuse Attack Detection. In International Workshop on Recent Advances in Intrusion Detection, pages 66–85. Springer, 2015.
[50] Shaza Zeitouni, Ghada Dessouky, Orlando Arias, Dean Sullivan, Ahmad Ibrahim, Yier Jin, and Ahmad-Reza Sadeghi. Atrium: Runtime Attestation Resilient Under Memory Attacks. In Proceedings of the 36th International Conference on Computer-Aided Design, pages 384–391. IEEE Press, 2017.