### 6. Related Work

Our work intersects with several active research areas, including the derivation of application specifications, the use of specifications for bug detection, and the vulnerability analysis of web applications. Due to space constraints, we will highlight the most relevant research in this section.

#### 6.1 Combining Dynamic Invariants with Static Analysis

Our approach is similar to methods that integrate dynamically-generated invariants with static analysis. For instance, Nimmer and Ernst [27] explored the integration of dynamic detection of program invariants and their static verification using Daikon and the ESC/Java static checker on simple standalone applications. The verified invariants are considered real, while unverified invariants are flagged as warnings. This research primarily aims to demonstrate the feasibility of the approach rather than to identify bugs. Another example is the DSD-Crasher tool by Csallner and Smaragdakis [8], which uses Daikon-generated invariants to reduce false positives in a static bug-finding tool for Java applications. The CnC tool, also based on ESC/Java, uses these invariants as assumptions about method arguments and return values to narrow the search domain for the static analyzer. In contrast, Waler does not assume the correctness of Daikon-generated invariants; instead, it treats them as clues for vulnerability analysis. By introducing two additional techniques to differentiate between real and spurious invariants, Waler avoids many false positives inherent in dynamic analysis.

#### 6.2 Inferring Application-Specific Properties

Our work is also related to research that infers application-specific properties from code to guide bug detection. One of the earliest such techniques was proposed by Engler et al. [10]. Their goal, like ours, is to identify violations of likely invariants in applications. However, their approach relies entirely on static analysis, using templates to extract "beliefs" from the code and then identifying patterns that contradict these beliefs. While some of these templates may be applicable to web applications, they are primarily designed to detect kernel and memory-unsafe programming language issues. We believe that incorporating dynamic traces enhances the robustness of our system.

Recent work has also used statistical analysis and program code to learn application properties for bug detection. Kremenek et al. [21] proposed a statistical approach based on factor graphs to infer which functions manage resources. The AutoISES tool [34] applies statically-inferred specifications to detect vulnerabilities in access control mechanisms. These approaches, like Engler's, use statistical analysis to find violations of properties that must hold at all program points, without considering variable values.

#### 6.3 Learning Invariants for Security

Learning invariants through dynamic analysis has been applied to security, particularly for training Intrusion Detection Systems (IDS). Baliga et al. [4] used Daikon to extract invariants from periodic memory snapshots of a non-compromised system, which were then used to detect kernel rootkits. Bond et al. [6] applied a similar approach to Java code by instrumenting the Java Virtual Machine (JVM) to record calling contexts and call histories for security-sensitive functions. Anomalous contexts or histories indicate potential logic errors. Both these techniques share an initial dynamic learning phase with Waler, but they differ in how the information is used. Unlike these approaches, Waler does not assume the generated invariants are real and uses them as hints for further analysis. Additionally, Waler focuses on identifying logic errors via static analysis, whereas the other methods aim to detect attacks on live systems, often with significant performance overhead.

#### 6.4 Protection Against Malicious Clients

Another research direction involves protecting web service components from malicious or compromised clients. Guha et al. [15] used static analysis on JavaScript client code to extract expected behavior, and a proxy filters out non-conforming clients.

#### 6.5 Web Application Vulnerability Analysis

Our work is related to a large body of research on web application vulnerability analysis, such as [16, 5, 7, 17, 18, 22, 26, 30, 33, 36, 23, 29]. Most of these studies focus on input validation attacks, which do not require application-specific rules. Tools like Swaddler [7] and MiMoSA [5], developed by our group, look for workflow violation attacks in PHP-based web applications using various techniques, including Daikon-generated invariants. However, Waler is more general and can identify any policy violation, whether reflected in checks within the application or violating consistency constraints.

The QED tool [23] uses concrete model checking to identify taint-based vulnerabilities in servlet-based applications. Both Waler and QED use heuristics to limit the application's state space during model checking, but QED's heuristics are more specific to taint propagation and require an additional analysis step.

### 7. Conclusions

In this paper, we presented a novel approach to identifying a class of application logic vulnerabilities in web applications. Our approach combines dynamic analysis and symbolic model checking to find invariants that are part of the intended program specification but are not enforced on all paths in the code.

We implemented this approach in a tool called Waler, which analyzes servlet-based web applications. Waler has identified several previously unknown application logic vulnerabilities in real-world applications and senior undergraduate projects. To our knowledge, Waler is the first tool capable of automatically detecting complex web application logic flaws without substantial human effort or ad hoc heuristics.

Future work will focus on extending the class of application logic vulnerabilities Waler can identify and adapting it to handle frameworks like Struts and Faces. This will require creating symbolic versions of the libraries in these frameworks, allowing us to apply Waler to a broader range of web applications.

### 8. Acknowledgments

We would like to thank David Evans, Vinod Ganapathy, Somesh Jha, and several anonymous reviewers for their valuable feedback on a previous version of this paper.

### References

[1] AMMONS, G., BOD´IK, R., AND LARUS, J. Mining specifications. In Proceedings of the 29th ACM SIGPLAN-SIGACT symposium on Principles of programming languages (2002), ACM, pp. 4–16.
[2] ANAND, S., PASAREANU, C., AND VISSER, W. JPF-SE: A Symbolic Execution Extension to Java PathFinder. In Proceedings of the International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS) (2007), Springer.
[3] ANLEY, C. Advanced SQL Injection in SQL Server Applications. Tech. rep., Next Generation Security Software, Ltd, 2002.
[4] BALIGA, A., GANAPATHY, V., AND IFTODE, L. Automatic Inference and Enforcement of Kernel Data Structure Invariants. In Computer Security Applications Conference, 2008. ACSAC 2008. Annual (2008), pp. 77–86.
[5] BALZAROTTI, D., COVA, M., FELMETSGER, V., AND VIGNA, G. Multi-module Vulnerability Analysis of Web-based Applications. In Proceedings of the ACM conference on Computer and Communications Security (CCS) (2007), pp. 25–35.
[6] BOND, M., SRIVASTAVA, V., MCKINLEY, K., AND SHMATIKOV, V. Efficient, Context-Sensitive Detection of Semantic Attacks. Tech. Rep. TR-09-14, UT Austin Computer Sciences, 2009.
[7] COVA, M., BALZAROTTI, D., FELMETSGER, V., AND VIGNA, G. Swaddler: An Approach for the Anomaly-based Detection of State Violations in Web Applications. In Proceedings of the International Symposium on Recent Advances in Intrusion Detection (RAID) (2007), pp. 63–86.
[8] CSALLNER, C., SMARAGDAKIS, Y., AND XIE, T. Article 8 (37 pages)-DSD-Crasher: A Hybrid Analysis Tool for Bug Finding. In ACM Transactions on Software Engineering and Methodology (TOSEM) (April 2008).
[9] The Daikon invariant detector. http://groups.csail.mit.edu/pag/daikon/.
[10] ENGLER, D., CHEN, D., HALLEM, S., CHOU, A., AND CHELF, B. Bugs as deviant behavior: a general approach to inferring errors in systems code. ACM SIGOPS Operating Systems Review 35, 5 (2001), 57–72.
[11] ERNST, M., PERKINS, J., GUO, P., MCCAMANT, S., PACHECO, C., TSCHANTZ, M., AND XIAO, C. The Daikon System for Dynamic Detection of Likely Invariants. Science of Computer Programming 69, 1–3 (Dec. 2007), 35–45.
[12] FOSSI, M. Symantec Global Internet Security Threat Report. Tech. rep., Symantec, April 2009. Volume XIV.
[13] FOUNDATION, T. A. S. Apache Tomcat. http://tomcat.apache.org/.
[14] GROSSMAN, J. Seven Business Logic Flaws That Put Your Website at Risk. http://www.whitehatsec.com/home/assets/WP bizlogic092407.pdf, September 2007.
[15] GUHA, A., KRISHNAMURTHI, S., AND JIM, T. Using static analysis for Ajax intrusion detection. In Proceedings of the 18th international conference on World wide web (2009), ACM New York, NY, USA, pp. 561–570.
[16] HALFOND, W., AND ORSO, A. AMNESIA: Analysis and Monitoring for NEutralizing SQL-Injection Attacks. In Proceedings of the International Conference on Automated Software Engineering (ASE) (November 2005), pp. 174–183.
[17] HUANG, Y.-W., YU, F., HANG, C., TSAI, C.-H., LEE, D., AND KUO, S.-Y. Securing Web Application Code by Static Analysis and Runtime Protection. In Proceedings of the International World Wide Web Conference (WWW) (May 2004), pp. 40–52.
[18] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities. In Proceedings of the IEEE Symposium on Security and Privacy (May 2006).
[19] Java Pathfinder. http://javapathfinder.sourceforge.net/.
[20] KLEIN, A. Cross Site Scripting Explained. Tech. rep., Sanctum Inc., June 2002.
[21] KREMENEK, T., TWOHEY, P., BACK, G., NG, A., AND ENGLER, D. From Uncertainty to Belief: Inferring the Specification Within. In Proceedings of the Symposium on Operating Systems Design and Implementation (OSDI) (November 2006), pp. 161–176.
[22] LIVSHITS, V., AND LAM, M. Finding Security Vulnerabilities in Java Applications with Static Analysis. In Proceedings of the USENIX Security Symposium (August 2005), pp. 271–286.
[23] MARTIN, M., AND LAM, M. Automatic Generation of XSS and SQL Injection Attacks with Goal-Directed Model Checking. In Proceedings of the USENIX Security Symposium (July 2008), pp. 31–43.
[24] MICROSYSTEMS, S. Java Servlet Specification Version 2.4. http://java.sun.com/products/servlet/reference/api/index.html, 2003.
[25] MIDDLEWARE, O. W. O. S. ASM. http://asm.objectweb.org/.
[26] NGUYEN-TUONG, A., GUARNIERI, S., GREENE, D., AND EVANS, D. Automatically Hardening Web Applications Using Precise Tainting. In Proceedings of the International Information Security Conference (SEC) (May 2005), pp. 372–382.
[27] NIMMER, J., AND ERNST, M. Static verification of dynamically detected program invariants: Integrating Daikon and ESC/Java. In Proceedings of RV’01, First Workshop on Runtime Verification (2001).
[28] OPEN SOURCE SOFTWARE. SourceForge. http://sourceforge.net.
[29] PALEARI, R., MARRONE, D., BRUSCHI, D., AND MONGA, M. On race vulnerabilities in web applications. In Proceedings of the Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA) (July 2008).
[30] PIETRASZEK, T., AND BERGHE, C. V. Defending against Injection Attacks through Context-Sensitive String Evaluation. In Proceedings of the International Symposium on Recent Advances in Intrusion Detections (RAID) (2005), pp. 372–382.
[31] SELENIUM DEVELOPMENT TEAM. Selenium: Web Application Testing System. http://seleniumhq.org.
[32] SPETT, K. Blind SQL Injection. Tech. rep., SPI Dynamics, 2003.
[33] SU, Z., AND WASSERMANN, G. The Essence of Command Injection Attacks in Web Applications. In Proceedings of the Annual Symposium on Principles of Programming Languages (POPL) (2006), pp. 372–382.
[34] TAN, L., ZHANG, X., MA, X., XIONG, W., AND ZHOU, Y. AutoISES: Automatically Inferring Security Specifications and Detecting Violations. In Proceedings of the USENIX Security Symposium (July 2008), pp. 379–394.