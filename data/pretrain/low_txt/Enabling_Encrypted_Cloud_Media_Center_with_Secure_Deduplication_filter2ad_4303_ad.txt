### Video Layer Structure
Each video consists of three layers.

### Figure 6: Time Costs of Different Computation Tasks
This figure illustrates the time costs associated with various computation tasks for initially uploading SVC videos. All videos in this comparison have the same number of layers (three) but vary in size.

### Figure 8: Running Time Comparisons
This figure compares the running times between our system and the Enc + No-Dedup setting, using SVC videos of different sizes but with the same number of duplicate layers (three).

### Network Delays
When a video is uploaded (with a total of three layers), the network delays in the RSA-OPRF protocol are not considered. It is observed that the time spent on `vEnc` and `rGen` increases linearly with the number of layers, as these operations must be performed for each layer. In contrast, `tGen` remains constant because it is only related to the base layer.

### Computation Costs
Figure 6 shows the computation costs for SVC videos with different sizes but with the same number of layers. As the video sizes increase, the layer sizes also increase, leading to longer computation times for each task. Despite this, our system is highly practical; for example, the overall computation cost for a 471MB SVC video is less than 3 seconds.

### Time Savings
We measure the time savings for the user by comparing our secure deduplication system with an Enc+No-Dedup policy that always sends encrypted duplicate SVC video layers to the cloud. Two network settings are considered: a fast network (20Mbps) and an extremely fast network (100Mbps) [1].

#### Figure 7: Running Time Comparison
This figure compares the running times between our deduplication design and the Enc+No-Dedup policy for different numbers of duplicate layers in a 95MB SVC video. The running time in the compared policy includes the layer encryption time and the network transfer time of the layer ciphertexts, while our system includes all the operations specified above for a user to gain ownership of duplicate layers from the cloud. For both network settings, our design consistently consumes much less time than the compared policy. This is due to client-side deduplication, which prevents duplicate layers from being transferred over the network. Additionally, although mechanisms such as the PoW protocol are involved in our system, the time savings provided by deduplication remain unaffected.

#### Figure 8: Further Running Time Comparison
This figure further compares the running times between our deduplication design and the policy for SVC videos of different sizes (ranging from 95MB to 471MB) with the same number of duplicate layers. For a 95MB SVC video in a 20Mbps network setting, the compared policy takes 40.4484 seconds, while our system takes only 0.9681 seconds. In a 100Mbps network setting, the compared policy takes 8.3025 seconds, while our system takes only 0.9676 seconds. On average, our system provides about 97% time savings in the 20Mbps network setting and about 88% in the 100Mbps network setting.

### Related Work

#### 8.1 Secure Deduplication
Convergent encryption (CE) was first proposed by Douceur et al. [10] for secure deduplication, ensuring data confidentiality while enabling deduplication. It encrypts/decrypts a file with a convergent key derived from the hash value of the file content, making deduplication feasible. Bellare et al. [3] formalized CE under the name of message-locked encryption (MLE) and explored its application in secure, space-efficient cloud storage, supporting both client-side and server-side deduplication. Li et al. [14] presented a key management scheme based on secret sharing to protect convergent keys in secure deduplication, distributing secret shares of keys across multiple independent servers. However, CE is inherently vulnerable to offline brute-force attacks on predictable files [2]. The security of CE holds only for unpredictable files.

To securely use server-side deduplication and resist offline brute-force attacks on predictable files, Bellare et al. [2] used a key server (KS) to provide message-based keys without disclosing any information on the users' data. They also adopted rate-limiting strategies on the KS to mitigate online brute-force attacks. Puzio et al. [17] employed a server to perform additional encryption over the convergent-encrypted data collected from all users, preventing offline brute-force attacks if the server's secret key is unknown. However, their design is only suitable for server-side deduplication and incurs heavy communication overhead.

Apart from inherent vulnerabilities, CE is insecure in the bounded leakage setting, where the data hash (i.e., the convergent key) may be disclosed [25]. Xu et al. [25] proposed a client-side deduplication scheme for encrypted files in the bounded leakage setting, but it does not consider defending against offline brute-force attacks on predictable data. Our system enhances security with the help of an agency.

#### 8.2 Security Protection for SVC Videos
Wei et al. [22] presented a scalable and format-compliant encryption scheme to protect SVC bitstreams when disseminated through an open network. The scheme constructs new NALUs to replace the original ones, preserving SVC scalability and achieving format compliance. Deng et al. [9] proposed an efficient block-based encryption scheme for SVC bitstream encryption, leaving the base layer in cleartext while encrypting enhancement layers using secure pseudorandom permutations on macroblocks and subblocks. Wu et al. [23] studied attribute-based access control on SVC videos in cloud-based content sharing networks, presenting a multiple-message ciphertext policy attribute-based encryption (MCP-ABE) scheme. Our work investigates secure deduplication over encrypted SVC videos.

### Conclusions
In this paper, we designed and implemented an encrypted cloud media center that hosts encrypted SVC videos and supports secure deduplication. We formulated a secure deduplication framework with strong protection for videos, protecting confidentiality in the bounded leakage setting and defending against offline brute-force attacks on predictable data. Leveraging the layered nature of SVC, we proposed layer-level deduplication over encrypted SVC videos. We analyzed the security guarantees of our system against both malicious outside adversaries and honest-but-curious inside adversaries. Our implementation adopts an encryption strategy compatible with the structure and format of SVC, optimizing the storage and dissemination efficiency of encrypted SVC videos. Extensive experiments on the Amazon cloud platform demonstrated the practicality of our system. Future work will investigate support for multiple scalabilities (e.g., time and resolution) in our layer-level deduplication construction and extend our design for more general cases.

### Acknowledgments
This work was supported in part by the Research Grants Council of Hong Kong (Project No. CityU 138513), NSFC under grants 61472316 and 61172090, Ph.D. Programs Foundation of Ministry of Education of China under grant 201202-01110013, and Shaanxi Science and Technology Innovation Project under grant 2013SZS16-Z01/P01/K01. The authors would like to thank Prof. Robert H. Deng and Dr. Zhuo Wei for sharing their code in [23] on SVC-related software during the early stage of this work.

### References
[1] Akamai. The Akamai State of the Internet Report. http://www.akamai.com/stateoftheinternet/.
[2] M. Bellare, S. Keelveedhi, and T. Ristenpart. Dupless: Server-aided encryption for deduplicated storage. In Proc. of USENIX Security, 2013.
[3] M. Bellare, S. Keelveedhi, and T. Ristenpart. Message-locked encryption and secure deduplication. In Proc. of EUROCRYPT, 2013.
[4] M. Bellare, C. Namprempre, D. Pointcheval, and M. Semanko. The one-more-rsa-inversion problems and the security of chaum’s blind signature scheme. Journal of Cryptology, 16(3):185–215, 2003.
[5] J. Bethencourt, A. Sahai, and B. Waters. Ciphertext-policy attribute-based encryption. In Proc. of IEEE SP, 2007.
[6] M. Blestel and M. Raulet. Open SVC decoder: a flexible SVC library. In Proc. of ACM MM, 2010.
[7] J. Camenisch, G. Neven, and A. Shelat. Simulatable adaptive oblivious transfer. In Proc. of EUROCRYPT, 2007.
[8] Cisco Visual Networking Index. Global mobile data traffic forecast update: 2012-2017.
[9] R. H. Deng, X. Ding, Y. Wu, and Z. Wei. Efficient block-based transparent encryption for H.264/SVC bitstreams. Multimedia Systems, 20(2):165–178, 2014.
[10] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer. Reclaiming space from duplicate files in a serverless distributed file system. In Proc. of IEEE ICDCS, 2002.
[11] S. Jarecki and X. Liu. Efficient oblivious pseudorandom function with applications to adaptive OT and secure computation of set intersection. In Theory of Cryptography, Lecture Notes in Computer Science, pages 577–594. Springer, 2009.
[12] A. Kathpal, M. Kulkarni, and A. Bakre. Analyzing compute vs. storage tradeoff for video-aware storage efficiency. In Proc. of USENIX HotStorage, 2012.
[13] S. Lederer, C. Müller, and C. Timmerer. Dynamic adaptive streaming over HTTP dataset. In Proc. of ACM MMSys, 2012.
[14] J. Li, X. Chen, M. Li, J. Li, P. P. Lee, and W. Lou. Secure deduplication with efficient and reliable convergent key management. IEEE Trans. on Parallel and Distributed Systems, 25(6):1615–1625, 2014.
[15] North Carolina Daily. Snapchat nude photos, videos reportedly leaked online. http://www.northcarolinadaily.com/index.php/sid/226634683, 2014.
[16] S. Oh, A. Hoogs, A. Perera, N. Cuntoor, C.-C. Chen, J. T. Lee, S. Mukherjee, J. Aggarwal, H. Lee, L. Davis, et al. A large-scale benchmark dataset for event recognition in surveillance video. In Proc. of IEEE CVPR, 2011.
[17] P. Puzio, R. Molva, M. Önen, and S. Loureiro. Cloudedup: secure deduplication with encrypted data for cloud storage. In Proc. of IEEE CloudCom, 2013.
[18] Y. Sanchez, T. Schierl, C. Hellge, T. Wiegand, D. Hong, D. D. Vleeschauwer, W. V. Leekwijck, and Y. L. Louédéc. Efficient HTTP-based streaming using scalable video coding. Signal Processing: Image Communication, 27(4):329–342, 2012.
[19] H. Schwarz, D. Marpe, and T. Wiegand. Overview of the scalable video coding extension of the H.264/AVC standard. IEEE Trans. on Circuits and System for Video Technology, 17(9):1103–1120, 2007.
[20] T. Stutz and A. Uhl. A survey of H.264 AVC/SVC encryption. IEEE Trans. on Circuits and Systems for Video Technology, 22(3):325–339, 2012.
[21] Z. Wei, Y. Wu, R. H. Deng, and X. Ding. A hybrid adaptive oblivious transfer. In Proc. of EUROCRYPT, 2007.
[22] Z. Wei, Y. Wu, X. Ding, and R. H. Deng. A scalable and format-compliant encryption scheme for H.264/SVC bitstreams. Signal Processing: Image Communication, 27(9):1011–1024, 2012.
[23] Y. Wu, Z. Wei, and R. H. Deng. Attribute-based access to scalable media in cloud-assisted content sharing networks. IEEE Trans. on Multimedia, 15(4):778–788, 2013.
[24] S. Xiang. Scalable streaming. https://sites.google.com/site/svchttpstreaming/storagesaving.
[25] J. Xu, E. Chang, and J. Zhou. Weak leakage-resilient client-side deduplication of encrypted data in cloud storage. In Proc. of ACM AISACCS, 2013.
[26] W. Zhu, C. Luo, J. Wang, and S. Li. Multimedia compute vs. storage tradeoff for video-aware storage efficiency. In Proc. of USENIX HotStorage, 2012.

### Appendix
#### A. The RSA-OPRF Protocol
Table 1: The RSA-OPRF protocol. \((N, e)\) and \((N, d)\) are the agency’s public key and secret key, respectively, as in the RSA system. \(M\) denotes the message to be signed. \(H_1: \{0, 1\}^* \rightarrow \mathbb{Z}_N^*\) and \(H_2: \mathbb{Z}_N^* \rightarrow \{0, 1\}^\lambda\) are two hash functions.

**Agency**
1. \(x \leftarrow \gamma \cdot h^e \mod N\)

**User**
1. \(\gamma \leftarrow \mathbb{Z}_N^*\)
2. \(h \leftarrow H_1(M)\)
3. \(x \leftarrow \gamma \cdot h^e \mod N\)
4. \(y \leftarrow x^d \mod N\)
5. \(z \leftarrow y \cdot \gamma^{-1} \mod N\)
6. If \(z^e \mod N \neq h\), return \(\bot\); Else return \(H_2(z)\)