以下是优化后的文本，使其更加清晰、连贯和专业：

### 参考文献

1. Y. Kang, B. Ray, and S. Jana. "Apex: Automated Inference of Error Specifications for C APIs." In *Proc. IEEE/ACM ASE*, 2016.
2. G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks. "Evaluating Fuzz Testing." In *Proc. ACM CCS*, 2018.
3. A. Lenharth, V. Adve, and S. T. King. "Recovery Domains: An Organizing Principle for Recoverable Operating Systems." In *Proc. ACM ASPLOS*, 2009.
4. J. Lettner, D. Song, T. Park, P. Larsen, S. Volckaert, and M. Franz. "PartiSan: Fast and Flexible Sanitization via Run-time Partitioning." In *International Symposium on Research in Attacks, Intrusions, and Defenses*, 2018.
5. H. Liu, Y. Wang, L. Jiang, and S. Hu. "PF-Miner: A New Paired Functions Mining Method for Android Kernel in Error Paths." In *IEEE COMPSAC*, 2014.
6. F. Long, S. Sidiroglou-Douskos, and M. Rinard. "Automatic Runtime Error Repair and Containment via Recovery Shepherding." In *Proc. ACM PLDI*, 2014.
7. J. Newsome, D. Brumley, and D. Song. "Vulnerability-Specific Execution Filtering for Exploit Prevention on Commodity Software." In *Proc. Internet Society NDSS*, 2006.
8. H. D. T. Nguyen, D. Qi, A. Roychoudhury, and S. Chandra. "SemFix: Program Repair via Semantic Analysis." In *Proc. IEEE ICSE*, 2013.
9. S. Pailoor, A. Aday, and S. Jana. "MoonShine: Optimizing OS Fuzzer Seed Selection with Trace Distillation." In *Proc. USENIX Security Symposium*, 2018.
10. J. Pan, G. Yan, and X. Fan. "DigTool: A Virtualization-Based Framework for Detecting Kernel Vulnerabilities." In *Proc. USENIX Security Symposium*, 2017.
11. J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan, W. Wong, Y. Zibin, M. D. Ernst, and M. Rinard. "Automatically Patching Errors in Deployed Software." In *Proc. ACM SOSP*, 2009.
12. C. Rubio-González, H. S. Gunawi, B. Liblit, R. H. Arpaci-Dusseau, and A. C. Arpaci-Dusseau. "Error Propagation Analysis for File Systems." In *Proc. ACM PLDI*, 2009.
13. S. Saha, J. Lozi, G. Thomas, J. L. Lawall, and G. Muller. "Hector: Detecting Resource-Release Omission Faults in Error-Handling Code for Systems Software." In *Proc. IEEE/IFIP DSN*, 2013.
14. S. Schumilo, C. Aschermann, R. Gawlik, S. Schinzel, and T. Holz. "kAFL: Hardware-Assisted Feedback Fuzzing for OS Kernels." In *Proc. USENIX Security Symposium*, 2017.
15. S. M. Seyed Talebi, H. Tavakoli, H. Zhang, Z. Zhang, A. Amiri Sani, and Z. Qian. "Charm: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems." In *Proc. USENIX Security Symposium*, 2018.
16. H. Shi, R. Wang, Y. Fu, M. Wang, X. Shi, X. Jiao, H. Song, Y. Jiang, and J. Sun. "Industry Practice of Coverage-Guided Enterprise Linux Kernel Fuzzing." In *Proc. ACM European Software Engineering Conference and Symposium on the Foundations of Software Engineering (ESEC/FSE)*, 2019.
17. S. Sidiroglou, O. Laadan, C. Perez, N. Viennot, J. Nieh, and A. D. Keromytis. "ASSURE: Automatic Software Self-Healing Using Rescue Points." In *Proc. ACM ASPLOS*, 2009.
18. K. Lu, A. Pakki, and Q. Wu. "Automatically Identifying Security Checks for Detecting Kernel Semantic Bugs." In *Proc. European Symposium on Research in Computer Security*, 2019.
19. D. Song, J. Lettner, P. Rajasekaran, Y. Na, S. Volckaert, P. Larsen, and M. Franz. "SoK: Sanitizing for Security." In *Proc. IEEE Symposium on Security and Privacy (S&P)*, 2019.
20. A. Sotirov. "Hotpatching and the Rise of Third-Party Patches." In *Black Hat Technical Security Conference*, 2006.
21. Y. Tian and B. Ray. "Automatically Diagnosing and Repairing Error Handling Bugs in C." In *Proc. ACM ESEC/FSE*, 2017.
22. J. Tucek, J. Newsome, S. Lu, C. Huang, S. Xanthos, D. Brumley, Y. Zhou, and D. Song. "Sweeper: A Lightweight End-to-End System for Defending Against Fast Worms." In *Proc. ACM EuroSys*, 2007.
23. J. Vander Stoep. "Android: Protecting the Kernel." In *Linux Security Summit (LSS)*, 2016.
24. Y. Wei, Y. Pei, C. A. Furia, L. S. Silva, S. Buchholz, B. Meyer, and A. Zeller. "Automated Fixing of Programs with Contracts." In *Proc. ACM ISSTA*, 2010.
25. W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest. "Automatically Finding Patches Using Genetic Programming." In *Proc. IEEE ICSE*, 2009.
26. Z. Xu, Y. Zhang, L. Zheng, L. Xia, C. Bao, Z. Wang, and Y. Liu. "Automatic Hot Patch Generation for Android Kernels." In *Proc. USENIX Security Symposium*, 2020.
27. X. Zhang, Y. Zhang, J. Li, Y. Hu, H. Li, and D. Gu. "Embroidery: Patching Vulnerable Binary Code of Fragmentized Android Devices." In *IEEE ICSME*, 2017.

### 附录

#### CVE-2019-2293
该漏洞被评定为中等安全严重性，是由于Qualcomm相机IFE模块中的潜在空指针解引用引起的。在调用`cam_ife_mgr_acquire_hw_for_ctx()`之前，缺乏对`isp_resource`长度变量的适当检查，可能会导致空指针解引用。此漏洞的调用栈中有7个函数。Hecaton在这7个函数中生成了10条撤销语句。Hecaton成功检测到多种类型的状态修改语句及其相应的撤销语句，包括直接函数调用、函数指针和全局变量赋值。然而，我们的手动调查显示，有一个bowknot未能正确撤销其函数的副作用。在`cam_context_handle_acquire_dev()`函数中，调用了`ioctl_ops.acquire_dev()`，它修改了相机设备驱动的状态，但没有与之配对的撤销函数`ioctl_ops.release_dev()`。Hecaton错过了这个语句，因为原始的错误处理代码不完整，没有调用`ioctl_ops.release_dev()`。在手动修正了不完整的bowknot后，当我们在缓解后的内核上运行该漏洞的PoC时，调用栈中的所有bowknot都成功执行并撤销了PoC的副作用。相机设备在成功撤销后仍然可以正常工作。

#### CVE-2019-1999
在`binder_alloc_free_page()`函数中，由于锁定不当，存在一个可能的双重释放漏洞。该漏洞被评为高安全严重性，因为它可能导致内核中的本地权限提升，而无需额外的执行权限。在调用栈中的2个函数中，有2条状态修改语句，Hecaton自动检测并生成了bowknot。我们的手动调查显示，生成的bowknot是完整的。此外，Hecaton生成的bowknot在恢复后保留了binder的功能。因此，在恢复后，系统功能正常，并成功通过我们执行的一个binder测试程序。我们的测试程序由两个进程组成：一个binder服务器和一个binder客户端。它检查这两个进程之间的通信是否成功。

#### CVE-2019-10529
这是一个使用后释放（use-after-free）漏洞，可以通过竞态条件触发，尝试使用`set_page_dirty()`函数将入口页标记为脏页时触发。内核中的使用后释放漏洞可能导致系统崩溃、系统进入意外状态或用于提权攻击。Hecaton自动生成的bowknot可以缓解此漏洞并保留GPU驱动的功能。为了测试GPU驱动的功能，我们使用了“GPU Mark BenchMark”应用程序，该应用程序在渲染压力下测试GPU。我们发现，在Hecaton缓解此漏洞前后，结果没有差异。我们的手动调查还显示，bowknot在此情况下的撤销操作是正确的。

#### CVE-2019-2000
这是Pixel3手机binder模块中的一个漏洞。此漏洞的调用栈中有4个函数。Hecaton在这4个函数中找到了6条状态修改语句，并为其生成了撤销代码。我们的实验表明，在触发此漏洞并执行bowknot后，binder模块仍然可以正常工作。我们的手动调查显示，没有其他语句导致系统状态发生变化，从而泄露给非局部变量。

#### CVE-2019-2284
这是Pixel3手机相机驱动中的一个漏洞。此漏洞的调用栈中有4个函数。Hecaton在这4个函数中找到了10条状态修改语句，并为其生成了撤销代码。然而，我们的实验表明，在触发此漏洞并执行bowknot后，相机设备失去了功能。我们的调查显示，Hecaton为此漏洞的4个函数生成的4个bowknot中有2个是不完整的。在`cam_sensor_core_power_up()`函数中，有一个循环会打开一组电压调节器。虽然该函数在其错误处理路径中还有一个关闭相同电压调节器数组的循环，但Hecaton目前不支持多语句撤销，仅向用户发出警告。我们的调查显示，Hecaton为`cam_sensor_driver_cmd()`生成的bowknot也不完整。在这种情况下，Hecaton由于错误处理代码不完整而未能生成完整的bowknot。请注意，在我们手动添加缺失的撤销语句后，系统和相机设备在触发漏洞并执行bowknot后仍然可以正常工作。

#### Syzbot Bug a11372b6c9b5fd4abe1c266903bcb27e80e8f2bc
这是x86 Linux-Next内核TTY驱动中的一个漏洞。此漏洞的调用栈中有5个函数。Hecaton定位了2个状态修改函数并为其生成了适当的撤销代码。它在`con_font_get()`函数中将`kmalloc()`与`kfree()`配对，并将`console_lock()`与`console_unlock()`配对。在触发此漏洞并执行bowknot后，系统和TTY模块仍然可以正常工作。我们的手动调查显示，在`fbcon_get_font()`函数中，对名为`font`的数据结构进行了更改，这不是`fbcon_get_font()`的局部变量，而是作为输入变量提供的。由于没有撤销代码来还原`font`数据结构的更改，乍一看似乎bowknot没有完全撤销驱动的状态。然而，我们的进一步分析表明，`font`数据结构不是驱动的全局变量，而是在`con_font_get()`函数中定义的局部变量，后者是`fbcon_get_font()`的父函数。因此，在bowknot执行之前，对`font`数据结构的更改不会泄露到内核的其他部分。因此，我们的手动调查显示，Hecaton生成的bowknot正确地撤销了部分执行的系统调用的效果，这与功能测试的结果一致。

#### Syzbot Bug 9ad0eb3691bac24fd21ae3d8add8c08014a69f57
这是上游x86 Linux内核文件系统中的一个漏洞。此漏洞的调用栈中有10个函数。Hecaton找到一条状态修改语句并将其与其撤销语句配对。这一对是`blk_start_plug()`和`blk_finish_plug()`，在该函数的执行路径中出现了两次。在触发漏洞并执行bowknot后，文件系统的功能测试（包括文件系统的内核自测）成功通过。在调用栈中的两个函数中，我们观察到一些改变这些函数的非局部变量的语句。然而，类似于前一种情况，我们的详细分析表明，这些非局部变量不是系统或文件系统的全局状态的一部分；它们是在调用栈中的父函数中定义的局部变量。在bowknot中没有撤销代码的情况下，系统状态没有变化。因此，我们的手动调查与功能测试的结果一致。

#### Syzbot Bug d708485af9edc3af35f3b4d554e827c6c8bf6b0f
这是x86 Linux-Next内核HCI蓝牙驱动中的一个漏洞。此漏洞的调用栈中有三个函数。Hecaton成功地将这四个函数中的4条状态修改语句与其撤销代码配对。我们使用一个使用该驱动的用户空间程序和Linux内核的网络堆栈自测来测试HCI蓝牙驱动的功能。在触发漏洞并执行bowknot后，HCI蓝牙驱动和网络堆栈仍然可以正常工作。我们的手动调查显示，除了Hecaton找到的4条状态修改语句外，还有另外三个可能改变系统状态的函数调用。一个是`hci_req_cmd_complete()`，它操纵驱动数据结构`hdev`。然而，我们的进一步分析表明，这个函数在这个漏洞的执行路径中没有被执行。因此，这不是一个问题。另外两个可能改变系统状态的函数调用是`hci_send_to_sock()`和`hci_send_to_monitor()`。通过HCI套接字发送数据会改变系统状态且不可逆。然而，我们的深入分析表明，在触发此漏洞的情况下，这两个函数在一开始就返回，没有达到改变系统状态的程度。因此，功能测试的成功也表明了系统状态的正确撤销。

#### Syzbot Bug f0ec9a394925aafbdf13d0a7e6af4cff860f0ed6
这是上游x86 Linux内核网络驱动中的一个漏洞，位于HCI蓝牙驱动中。此漏洞的调用栈中有11个函数。尽管Hecaton为此漏洞调用栈中的11个函数中的10个生成了完整的bowknot，但剩余的不完整bowknot导致了恢复失败。此漏洞调用栈中的最后一个函数`__list_add()`旨在将一个新节点插入内核中的双向链表的指定位置。它修改了要插入新节点的两个节点。漏洞发生在处理第一个节点之后但在处理第二个节点之前。此时，双向链表已损坏，且没有代码来撤销这种损坏。我们无法在每个漏洞允许的两小时手动工作窗口内解决这个问题。

#### Syzbot Bug 0d93140da5a82305a66a136af99b088b75177b99
这是上游x86 Linux内核网络驱动中的一个漏洞，位于HCI物理层驱动中。此漏洞的调用栈中有11个函数。Hecaton在这11个函数的bowknot中将5条状态修改语句与其撤销代码配对。然而，在触发漏洞并执行bowknot后，网络自测结果发生了变化。因此，自动生成的bowknot的功能测试失败。我们的调查显示，有一对状态修改和撤销函数被Hecaton遗漏了，原因是其数据库不完整。当我们手动将`hci_conn_drop()`添加到`hci_phy_link_complete_evt()`函数的bowknot中以逆转`hci_conn_hold()`的效果时，bowknot变得完整，功能测试成功通过。