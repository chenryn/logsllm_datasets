### Overview of Proofs of Retrievability (POR) and Related Work

#### Early Developments in POR
Initial proposals for Proofs of Retrievability (POR) did not offer extractability guarantees. This was later extended by [9] to handle dynamic writes/updates from clients. Cash et al. [17] proposed a dynamic POR scheme using oblivious RAM protocols. Shi et al. [35] further improved the performance of [17] by leveraging a Merkle hash tree. Other contributions, such as [29] and [34], introduced the concept of delegable verifiability, enabling users to delegate POR verification while preventing further re-delegation.

#### Performance Analysis
Figures 4 and 5 illustrate the latency incurred in POR with respect to throughput and file size, respectively. The overhead of the store procedure, which involves verifying the first tags uploaded for a given file, is slightly lower on the provider compared to the tenants. This is due to the homomorphic properties of the underlying signature scheme, which allows for batch verification of all tags (cf. Section 3.2). As a result, the overhead on the provider is approximately 4% lower than that on the tenants.

In the update procedure, if multiple tenants share the same file/tags, the provider does not need to partially create the tags. Instead, the provider only needs to verify Equation 9, which incurs negligible overhead. This process is almost 40 times faster than the tag construction by tenants, as shown in Figure 3(c).

#### Outsourced Proofs of Retrievability
Armknecht et al. [7] introduced outsourced proofs of retrievability, an extension of the POR model, where users can task an external auditor to perform and verify POR on their behalf with the cloud provider.

### Secure Data Deduplication in Multi-tenant Settings

Harnik et al. [24] highlighted threats posed by client-side data deduplication, where an adversary can infer if a file is stored in a particular cloud by guessing the hashes of predictable messages. Proofs of Ownership (PoW) schemes [18], [23] can counter this leakage by enabling clients to prove they possess the entire file. PoW schemes are inspired by POR and Data Possession (PDP) schemes [8], [32], but without a pre-processing step at setup time.

Halevi et al. [23] proposed a PoW construct based on Merkle trees, which incurs low overhead on the server. Xu et al. [36] built upon [23] to support client-side deduplication in a bounded leakage setting. Di Pietro and Sorniotti [18] proposed a PoW scheme that reduces communication complexity at the expense of additional server computational overhead. Blasco et al. [12] further reduced server-side overhead using Bloom filters.

Douceur et al. [20] introduced convergent encryption, a deterministic encryption method where a message is encrypted using a key derived from the plaintext itself. Convergent encryption is not semantically secure [11] and only offers confidentiality for unpredictable content. To address this, several proposals [6], [10] introduced oblivious server-aided encryption for data deduplication, where the encryption key is obliviously computed based on the file hash and the private key of the assisting server.

Zheng and Xu [37] proposed Proof of Storage with Deduplication (POSD), combining PDP/POR and PoW schemes. They claimed that publicly-verifiable POR/PDP can be used to verify the integrity of deduplicated files. However, such schemes do not resist collusion between malicious tenants and the cloud provider. SPORT is the first secure POR instantiation addressing multi-tenancy and data deduplication.

### Conclusion

We introduced the notion of multi-tenant proofs of retrievability (MTPOR) and proposed an efficient instantiation called SPORT. Our prototype implementation and evaluation in a realistic cloud setting show that SPORT incurs minimal storage overhead on the cloud provider without degrading performance. SPORT is provably secure in the random oracle model under the computational Diffie-Hellman problem, assuming static corruptions. Analyzing the security of SPORT under adaptive corruption remains an open question.

SPORT provides significant incentives for end-users to obtain guarantees about the retrievability of their files in the cloud and for cloud providers to offer differentiated services while maintaining storage efficiency. 

### Acknowledgements

This work was partly supported by the TREDISEC project (G.A. no 644412), funded by the European Union (EU) under the Information and Communication Technologies (ICT) theme of the Horizon 2020 (H2020) research and innovation programme.

### References
[1] PBC Library. http://crypto.stanford.edu/pbc/, 2007.
[2] JPBC: Java Pairing-Based Cryptography Library. http://gas.dia.unisa.it/projects/jpbc/#.U3HBFfna5cY, 2013.
[3] Backblaze Open Sources Reed-Solomon Erasure Coding Source Code. https://www.backblaze.com/blog/reed-solomon/, 2015.
[4] Google loses data after lightning strikes. http://money.cnn.com/2015/08/19/technology/google-data-loss-lightning/, 2015.
[5] F. Armknecht, J. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter. Outsourced proofs of retrievability. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, Scottsdale, AZ, USA, November 3-7, 2014, pages 831–843, 2014.
[6] F. Armknecht, J. Bohli, G. O. Karame, and F. Youssef. Transparent data deduplication in the cloud. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, Denver, CO, USA, October 12-6, 2015, pages 886–900, 2015.
[7] F. Armknecht, J.-M. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter. Outsourced proofs of retrievability. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, CCS ’14, pages 831–843, New York, NY, USA, 2014. ACM.
[8] G. Ateniese, R. C. Burns, R. Curtmola, J. Herring, L. Kissner, Z. N. J. Peterson, and D. X. Song. Provable data possession at untrusted stores. In ACM Conference on Computer and Communications Security, pages 598–609, 2007.
[9] G. Ateniese, R. D. Pietro, L. V. Mancini, and G. Tsudik. Scalable and efficient provable data possession. IACR Cryptology ePrint Archive, 2008:114, 2008.
[10] M. Bellare, S. Keelveedhi, and T. Ristenpart. DupLESS: Server-aided encryption for deduplicated storage. In Proceedings of the 22Nd USENIX Conference on Security, SEC’13, pages 179–194, Berkeley, CA, USA, 2013. USENIX Association.
[11] M. Bellare, S. Keelveedhi, and T. Ristenpart. Message-locked encryption and secure deduplication. In Johansson and Nguyen [25], pages 296–312.
[12] J. Blasco, R. Di Pietro, A. Orfila, and A. Sorniotti. A tunable proof of ownership scheme for deduplication using bloom filters. In Communications and Network Security (CNS), 2014 IEEE Conference on, pages 481–489, Oct 2014.
[13] D. Boneh, B. Lynn, and H. Shacham. Short signatures from the Weil pairing. J. Cryptology, 17(4):297–319, 2004.
[14] K. D. Bowers, A. Juels, and A. Oprea. HAIL: a high-availability and integrity layer for cloud storage. In ACM Conference on Computer and Communications Security, pages 187–198, 2009.
[15] K. D. Bowers, A. Juels, and A. Oprea. Proofs of retrievability: theory and implementation. In CCSW, pages 43–54, 2009.
[16] K. D. Bowers, M. van Dijk, A. Juels, A. Oprea, and R. L. Rivest. How to tell if your cloud files are vulnerable to drive crashes. In ACM Conference on Computer and Communications Security, pages 501–514, 2011.
[17] D. Cash, A. Küpçü, and D. Wichs. Dynamic Proofs of Retrievability via Oblivious RAM. In Johansson and Nguyen [25], pages 279–295.
[18] R. Di Pietro and A. Sorniotti. Boosting efficiency and security in proof of ownership for deduplication. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’12, pages 81–82, New York, NY, USA, 2012. ACM.
[19] D. Dobre, G. Karame, W. Li, M. Majuntke, N. Suri, and M. Vukolic. Powerstore: Proofs of writing for efficient and robust storage. In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security, CCS ’13, pages 285–298, New York, NY, USA, 2013. ACM.
[20] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer. Reclaiming space from duplicate files in a serverless distributed file system. In ICDCS, pages 617–624, 2002.
[21] E. Ghosh, O. Ohrimenko, D. Papadopoulos, R. Tamassia, and N. Triandopoulos. Zero-knowledge accumulators and set operations. Cryptology ePrint Archive, Report 2015/404, 2015. http://eprint.iacr.org/2015/404.
[22] T. T. W. Group. The notorious nine: Cloud computing top threats in 2013. Report, Cloud Security Alliance, February 2013.
[23] S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg. Proofs of ownership in remote storage systems. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS '11, pages 491–500, New York, NY, USA, 2011. ACM.
[24] D. Harnik, B. Pinkas, and A. Shulman-Peleg. Side channels in cloud services: Deduplication in cloud storage. IEEE Security & Privacy, 8(6):40–47, 2010.
[25] T. Johansson and P. Q. Nguyen, editors. Advances in Cryptology - EUROCRYPT 2013, 32nd Annual International Conference on the Theory and Applications of Cryptographic Techniques, Athens, Greece, May 26-30, 2013. Proceedings, volume 7881 of Lecture Notes in Computer Science. Springer, 2013.
[26] A. Juels and B. S. K. Jr. PORs: Proofs Of Retrievability for Large Files. In ACM Conference on Computer and Communications Security, pages 584–597, 2007.
[27] D. T. Meyer and W. J. Bolosky. A study of practical deduplication. In Proceedings of the 9th USENIX Conference on File and Storage Technologies, FAST'11, pages 1–1, Berkeley, CA, USA, 2011. USENIX Association.
[28] D. T. Meyer and W. J. Bolosky. A study of practical deduplication. Trans. Storage, 7(4):14:1–14:20, Feb. 2012.
[29] Y. Ren, J. Xu, J. Wang, and J.-U. Kim. Designated-verifier provable data possession in public cloud storage. International Journal of Security and Its Applications, 7(6):11–20, 2013.
[30] L. Reyzin and S. Yakoubov. Efficient asynchronous accumulators for distributed PKI. Cryptology ePrint Archive, Report 2015/718, 2015. http://eprint.iacr.org/2015/718.
[31] T. Ristenpart and S. Yilek. The power of proofs-of-possession: Securing multiparty signatures against rogue-key attacks. In Advances in Cryptology - EUROCRYPT 2007, 26th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Barcelona, Spain, May 20-24, 2007, Proceedings, volume 4515 of Lecture Notes in Computer Science, pages 228–245. Springer, 2007.
[32] H. Shacham and B. Waters. Compact Proofs of Retrievability. In ASIACRYPT, pages 90–107, 2008.
[33] H. Shacham and B. Waters. Compact Proofs of Retrievability. Cryptology ePrint Archive, Report 2008/073, 2008. http://eprint.iacr.org/.
[34] S.-T. Shen and W.-G. Tzeng. Delegable provable data possession for remote data in the clouds. In S. Qing, W. Susilo, G. Wang, and D. Liu, editors, ICICS, volume 7043 of Lecture Notes in Computer Science, pages 93–111. Springer, 2011.
[35] E. Shi, E. Stefanov, and C. Papamanthou. Practical dynamic proofs of retrievability. In A.-R. Sadeghi, V. D. Gligor, and M. Yung, editors, ACM Conference on Computer and Communications Security, pages 325–336. ACM, 2013.
[36] J. Xu, E.-C. Chang, and J. Zhou. Weak leakage-resilient client-side deduplication of encrypted data in cloud storage. In Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security, ASIA CCS '13, pages 195–206, New York, NY, USA, 2013. ACM.
[37] Q. Zheng and S. Xu. Secure and efficient proof of storage with deduplication. In Proceedings of the Second ACM Conference on Data and Application Security and Privacy, CODASPY '12, pages 1–12, New York, NY, USA, 2012. ACM.

### Appendix A: Public SW POR

To enable any entity to verify a POR without possessing secrets, Shacham and Waters [32] proposed two publicly verifiable POR schemes based on BLS signatures [13] and RSA, respectively.

#### Public BLS SW Scheme
- **Setup Phase**: Choose a group \( G \) with support \( \mathbb{Z}_p \) and a computable bilinear map \( e: G \times G \rightarrow G_T \). The user chooses a private key \( x \in \mathbb{Z}_p \), the corresponding public key \( v = g^x \in G \), and another generator \( u \in G \).
- **Storage Phase**: Compute a signature on each block \( i \) as \( \sigma_i = (H(i) \prod_{j=1}^{s} u^{m_{ij}})^x \).
- **Verification**: The challenge query \( Q \) is generated and sent to the prover who computes:
  \[
  \sigma = \prod_{(i, \nu_i) \in Q} \sigma_{\nu_i}^{H(i)}
  \]
  \[
  \mu_j = \sum_{(i, \nu_i) \in Q} \nu_i m_{ij}
  \]
  These values are sent to the verifier who checks:
  \[
  e(\sigma, g) \stackrel{?}{=} e\left(\prod_{j=1}^{s} u^{\mu_j}, v\right)
  \]

#### Public RSA SW Scheme
- **Setup Phase**: Similar to the BLS scheme, but the block authenticator is computed as \( \sigma_i = (H(i) u^{m_i})^d \mod N \), where \( d \) is the private key of the user.
- **Verification**: Given the public RSA key \( e \), the verification unfolds as:
  \[
  \sigma^e \stackrel{?}{=} \prod_{(i, \nu_i) \in Q} H(i)^{\nu_i} u^{\mu} \mod N
  \]

This completes the overview and detailed explanation of the POR and related schemes.