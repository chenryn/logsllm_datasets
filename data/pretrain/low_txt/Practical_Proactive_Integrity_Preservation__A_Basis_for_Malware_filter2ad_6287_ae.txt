### 6.4. 性能开销

我们通过微基准测试和宏基准测试来评估PPI的性能。在微基准测试中，我们使用了LMbench版本3 [23] 来检查常见系统调用的性能下降情况。结果如图4所示。我们观察到，除了open（以及其他类似系统调用如stat）外，PPI对大多数系统调用没有引入明显的开销。

对于宏基准测试，我们测量了在PPI运行时三个典型应用程序的性能。如图5所示，PPI中的应用程序运行时开销约为5%或更少。

### 6.5. 局限性

我们的方法不能支持任意不可信软件。某些软件因其本质可能需要无法安全授予不可信应用程序的资源访问权限。我们的结果显示，对于从不可信来源下载的程序类型，我们的方法是适用的。

我们的工作不专注于机密性和可用性，但在两个方面仍对其有所贡献。首先，机密性和可用性的解决方案必须建立在完整性解决方案的基础上。其次，我们的技术可以阻止利用完整性违规来攻击机密性的恶意软件；例如，通过防止rootkit安装自身，我们也防止其随后收集并发送机密账户信息。但是，对于不违反完整性而直接针对机密性的恶意软件，我们并未提供保护。

### 7. 相关工作

#### 基于信息流的系统

Biba模型 [7] 有一个严格的“不下读、不上写”策略。低水位标记模型 [7] 放宽了这一严格策略，允许主体在读取低完整性输入时被降级。LOMAC [12] 是Linux上的一个低水位标记模型原型实现，部分解决了“自我撤销”问题：一组共享相同IPC的进程在其中一个进程被降级后，可以通过整个组降级继续通信，但文件的问题仍然存在。SLIM（简单Linux完整性模型）[28] 是IBM研究可信客户端项目的一部分，也基于LOMAC模型。它还结合了Caernarvon模型 [17]，支持验证可信程序并通过分离读取和执行权限限制对这些程序的信任。本文中开发的功能在这方面更为通用，允许区分数据输入和控制输入等。

IX [22] 是Unix的一个实验性多级安全变体。它使用动态标签跟踪进程和文件的信息流，以提供隐私和完整性。相比之下，我们的技术通过提供多种其他策略选择，扩展了LOMAC模型，我们已经证明这对提高可用性是有帮助的。这些工作与我们的另一个重要区别是我们将策略与标签解耦，并提供了自动化的策略开发技术。

Windows Vista仅强制执行信息流策略中的“不上写”部分，“不下读”未被强制执行，因为它会导致可用性问题。不幸的是，恶意软件编写者可以调整他们的恶意软件来绕过这种保护，正如引言中所讨论的那样。

相比之下，“回到未来”系统 [14] 仅强制执行“不下读”策略。其主要优点是可以识别任何试图注入受信任应用程序输入的恶意软件，并能够回滚恶意软件的影响。缺点是，任何尝试“使用”不可信（但非恶意）应用程序的输出都需要用户干预。用户很难判断这些输入是否“安全”，并对提示做出正确响应。其次，恶意软件可以自由覆盖关键文件，当数据被后续访问时需要“恢复”——这可能是一个耗时的操作。

安全执行环境 [3, 30, 37] 和虚拟机 [32, 9, 4] 依赖隔离来限制不可信进程。虽然隔离是一种有效的保护技术，但维护多个隔离的工作环境对用户来说并不方便。特别是，需要由不可信代码访问的对象（如文件）每次都要复制进出隔离环境。

Li等人 [20] 也关注如何使强制访问控制变得可用，重点在于策略开发技术。然而，他们的重点是暴露在网络攻击下的服务器，而不是工作站上的不可信软件威胁。威胁的性质（远程攻击与自适应恶意软件）不同，导致他们关注的技术与我们的技术有很大不同。例如，他们不保护用户文件，而我们认为破坏用户文件在我们的上下文中是一种非常强大的攻击向量。此外，他们没有考虑软件安装的安全问题，也没有提供可以利用资源访问日志生成策略的分析技术。尽管如此，也有一些相似之处：我们能够使用他们关于限制某些网络通道信任的概念。此外，我们在文件上下文中对此概念进行了细化。

以上所有工作都基于集中式策略，这比去中心化信息流控制（DIFC）策略灵活性差。DIFC策略允许应用程序控制其数据的使用方式。在这方面，JFlow [24] 是一种语言级别的方法。Asbestos [10] 和Hi-Star [38] 是新的操作系统项目，它们的设计中集成了信息流机制。Flume [19] 专注于在现有操作系统上实现过程级DIFC扩展。与其他基于信息流的安全技术一样，这些项目也侧重于机制，而我们的重点是生成构建工作系统的策略。

#### SELinux、沙箱及相关技术

已开发出多种沙箱技术 [13, 2, 26]。模型携带代码 [29] 专注于策略开发问题，并为代码生产者和消费者提供了一个合作开发满足其安全目标的策略框架。然而，开发能够稳健防御自适应恶意软件的沙箱策略是一项挑战，因为间接攻击很容易实施，如引言所述。

SELinux [21] 使用域和类型强制（DTE）策略来限制程序。他们的主要关注点是服务器，并开发了非常详细的策略，旨在为这些应用程序提供最小特权。Systrace项目 [26] 也为许多应用程序开发了基于系统调用的沙箱策略，并在FreeBSD中广泛使用。这两种方法在设计上都无法确保系统完整性。SELinux和Systrace可以在应用程序试运行期间记录访问，并以此为基础生成该应用程序的策略。他们的策略生成技术对可信代码（如服务器）很有用，但对不可信应用程序则很危险。

我们的重点是生成确保完整性的策略，而其他研究人员则致力于确定给定策略是否保证系统完整性 [16]。

### 8. 结论

本文介绍了适用于现代操作系统发行版的主动完整性保护技术。通过强制执行信息流策略，我们的方法提供了对恶意软件损害系统完整性的正面保障。基于此类强制访问控制策略开发实用系统的主要问题之一是策略开发的复杂性。我们开发了多种技术，可以从软件包管理器中的数据和记录正常系统使用情况的日志中自动生成低级信息流策略。实验结果表明，该技术高效，可以防范大多数恶意软件，并且不会过度影响系统可用性。

### 参考文献

[1] Linux rootkits. http://www.eviltime.com.
[2] A. Acharya and M. Raje. Mapbox: Using parameterized behavior classes to confine applications. In USENIX Security Symposium, 2000.
[3] Alcatraz. http://www.seclab.cs.sunysb.edu/alcatraz.
[4] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. Xen and the art of virtualization. In Proceedings of the nineteenth ACM symposium on Operating systems principles, volume 37, 5 of Operating Systems Review, pages 164-177, New York, Oct. 19-22 2003. ACM Press.
[5] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address obfuscation: an efficient approach to combat a broad range of memory error exploits. In Proceedings of the 12th Usenix Security Symposium, Washington, D.C., August 2003.
[6] K. J. Biba. Integrity considerations for secure computer systems. Technical Report MTR-3153, Mitre Corporation, June 1975.
[7] K. J. Biba. Integrity considerations for secure computer systems. In Technical Report ESD-TR-76-372, USAF Electronic Systems Division, Hanscom Air Force Base, Bedford, Massachusetts, 1977.
[8] M. Bishop and M. Dilger. Checking for race conditions in file accesses. Computing Systems, 9(2), 1996.
[9] J. Dike. A User-Mode port of the linux kernel. In Proceedings of the 4th Annual Showcase and Conference (LINUX-00), pages 63-72, Berkeley, CA, Oct. 10-14 2000. The USENIX Association.
[10] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazires, F. Kaashoek, and R. Morris. Labels and event processes in the asbestos operating system. In 20th Symposium on Operating Systems Principles (SOSP 2005), 2005.
[11] The fedora.us buildsystem. http://enrico-scholz.de/fedora.us-build/html/.
[12] T. Fraser. Lomac: Low water-mark integrity protection for COTS environments. In IEEE Symposium on Security and Privacy, 2000.
[13] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A secure environment for untrusted helper applications: confining the wily hacker. In USENIX Security Symposium, 1996.
[14] F. Hsu, T. Ristenpart, and H. Chen. Back to the future: A framework for automatic malware removal and system repair. In Annual Computer Security Applications Conference (ACSAC), December 2006.
[15] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protecting browser state from web privacy attacks. In WWW '06: Proceedings of the 15th international conference on World Wide Web, pages 737-744, New York, NY, USA, 2006. ACM.
[16] T. Jaeger, R. Sailer, and X. Zhang. Analyzing integrity protection in the selinux example policy. In Proceedings of the 12th USENIX Security Symposium, 2003.
[17] P. Karger, V. Austel, and D. Toll. Using a mandatory secrecy and integrity policy on smart cards and mobile devices. In EUROSMART Security Conference, pages 134-148, Marseilles, France, 2000.
[18] P. Karger, V. Austel, and D. Toll. Using gconf as an example of how to create an userspace object manager. page SELinux Symposium, 2007.
[19] M. Krohn, A. Yip, M. Brodsky, N. Cliﬀer, M. F. Kaashoek, E. Kohler, and R. Morris. Information flow control for standard OS abstractions. In SOSP '07: Proceedings of twenty-first ACM SIGOPS symposium on Operating systems principles, pages 321-334, New York, NY, USA, 2007. ACM.
[20] N. Li, Z. Mao, and H. Chen. Usable mandatory integrity protection for operating systems. In IEEE Symposium on Security and Privacy, 2007. To appear.
[21] P. A. Loscocco and S. D. Smalley. Meeting critical security objectives with security-enhanced linux. In Proceedings of the 2001 Ottawa Linux Symposium, 2001.
[22] M. D. McIlroy and J. A. Reeds. Multilevel security in the UNIX tradition. Software - Practice and Experience, 22(8):673-694, 1992.
[23] L. McVoy and C. Staelin. Lmbench. http://www.bitmover.com/lmbench/.
[24] A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. ACM Transactions on Software Engineering and Methodology, 9(4):410-442, 2000.
[25] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of 12th Annual Network and Distributed System Security Symposium (NDSS), 2005.
[26] N. Provos. Improving host security with system call policies. In Proceedings of the 11th USENIX Security Symposium, pages 257-272, 2003.
[27] F. Qin, C. Wang, Z. Li, H. seop Kim, Y. Zhou, and Y. Wu. LIFT: A low-overhead practical information flow tracking system for detecting general security attacks. In IEEE/ACM International Symposium on Microarchitecture, December 2006.
[28] D. Saﬀord and M. Zohar. A trusted linux client (tlc), 2005.
[29] R. Sekar, V. Venkatakrishnan, S. Basu, S. Bhatkar, and D. C. DuVarney. Model-carrying code: A practical approach for safe execution of untrusted applications. In ACM Symposium on Operating System Principles, Bolton Landing, New York, October 2003.
[30] W. Sun, Z. Liang, R. Sekar, and V. Venkatakrishnan. One-way Isolation: An Effective Approach for Realizing Safe Execution Environments. Proceedings of the Network and Distributed System Security Symposium, 2005.
[31] E. F. Walsh. Integrating xfree86 with security-enhanced linux. In X Developers Conference, Cambridge, MA, 2004.
[32] B. Walters. VMware virtual platform. j-LINUX-J, 63, July 1999.
[33] D. P. Wiggins. Security extension specification, version 7.0. Technical report, X Consortium, Inc., 1996.
[34] C. Wright, C. Cowan, J. Morris, S. Smalley, G. Kroah-Hartman, s modules, and G. support. Linux security modules: General security support for the linux kernel, 2002.
[35] J. Xu, Z. Kalbarczyk, and R. K. Iyer. Transparent runtime randomization for security. In Symposium on Reliable and Distributed Systems (SRDS), Florence, Italy, October 2003.
[36] W. Xu, S. Bhatkar, and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In USENIX Security Symposium, August 2006.
[37] Y. Yu, F. Guo, S. Nanda, L. chung Lam, and T. cker Chiueh. A feather-weight virtual machine for windows applications. In Proceedings of the 2nd ACM/USENIX Conference on Virtual Execution Environments (VEE’06), June 2006.
[38] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazires. Making information flow explicit in histar. In Seventh Symposium on Operating Systems Design and Implementation (OSDI06), 2006.

授权许可使用限制于清华大学。下载时间为2021年3月19日UTC时间03:10:00，来自IEEE Xplore。使用受限。