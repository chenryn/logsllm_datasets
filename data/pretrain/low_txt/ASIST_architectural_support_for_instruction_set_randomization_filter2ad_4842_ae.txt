### Performance Evaluation of SQLite3 with ASIST

To evaluate the performance of SQLite3, we utilized the C/C++ SQLite interface to develop a simple benchmark. This benchmark reads a large tab-separated file and updates a table's entries with the corresponding values. Figure 9 illustrates the slowdown when inserting data into the database as a function of the number of insertions. ASIST imposes less than a 1% slowdown on the database's operation for both static and dynamic approaches, even with small datasets that do not provide ASIST with enough time to amortize the encryption overhead.

### Related Work

#### Instruction Set Randomization (ISR)
ISR was initially introduced as a generic defense against code injections by Kc et al. [31] and Barrantes et al. [9, 10]. To demonstrate the feasibility of ISR, they proposed implementations using Bochs [33] and Valgrind [36], respectively. Hu et al. [29] implemented ISR with Strata SDT tool [42], using AES for stronger encryption. Boyd et al. [13] proposed selective ISR to reduce runtime overhead. Portokalidis and Keromytis [41] implemented ISR using Pin [34], achieving moderate overhead and supporting shared libraries. In Section 2.3, we provided a detailed comparison of existing software-based ISR implementations with ASIST. ASIST addresses most of the limitations of these approaches due to its efficient hardware support.

#### Defenses Against Code Injection Attacks
Modern hardware platforms support non-executable data protection, such as the No eXecute (NX) bit [38]. The NX bit prevents stack or heap data from being executed, thus protecting against code injection attacks without performance degradation. However, its effectiveness depends on proper use by software. For instance, an application may not set the NX bit on all data segments due to backward compatibility, self-modifying code, or poor programming practices. We believe ASIST can complement the NX bit, providing an additional layer of security. For example, many ROP exploits use the code of `mprotect()` to make executable pages with injected code, bypassing NX bit protection. These exploits cannot execute any injected code in a system using ASIST, as the code will not be correctly encrypted. Thus, ASIST with Address Space Layout Randomization (ASLR) provides a stronger defense.

A recent attack demonstrated by Snow et al. [47] can bypass NX bit and ASLR protection using ROP. It first exploits a memory disclosure to map the process’s memory layout and then uses a disassembler to dynamically discover gadgets for the ROP attack. ASIST with ASLR, however, prevents this attack: even if memory with executable code leaks to the attacker, the instructions will be encrypted with a randomly-generated key, making it impossible for the attacker to disassemble the code and find useful gadgets. ASIST ensures that the key does not reside in the process’s memory, and stronger encryption algorithms like AES can be integrated into our design to prevent key inference.

SecVisor [43] protects the kernel from code injection attacks using a hypervisor to prevent unauthorized code execution. While SecVisor focuses on kernel code integrity, ASIST prevents the execution of unauthorized code at both user- and kernel-levels.

#### Defenses Against Buffer Overflow Attacks
StackGuard [21] uses canaries to protect the stack, while PointGuard [20] encrypts all pointers in memory and decrypts them before loading into a register. Both techniques require program recompilation. In contrast, BinArmor [46] protects existing binaries from buffer overflows without access to source code by discovering data structures and rewriting the binary.

#### Other Randomization-Based Defenses
Address Space Layout Randomization (ASLR) [39] randomizes the memory layout of a process at runtime or compile time to protect against code-reuse attacks. Giuffrida et al. [27] propose address space randomization to protect the operating system kernel. Bhatkar et al. [11] present randomization techniques for the addresses of the stack, heap, dynamic libraries, routines, and static data in an executable. Wartell et al. [52] randomize instruction addresses at each execution to address code-reuse attacks. Jiang et al. [30] prevent code injections by randomizing system call numbers.

#### Hardware Support for Security
Numerous research efforts aim to provide hardware support for security without sacrificing performance. Dalton et al. [22, 23] propose a hardware-based architecture for dynamic information flow tracking, extending a SPARC V8 processor with four tag bits per register and memory word, along with tag propagation and runtime checks to defend against buffer overflows and high-level attacks. Greathouse et al. [28] present a design for accelerating dynamic analysis techniques with hardware support for unlimited watchpoints. Frantzen and Shuey [25] implement a hardware-assisted technique for the SPARC architecture to protect the return address. Tuck et al. [50] propose hardware encryption to protect function pointers from buffer overflow attacks, improving performance over computationally expensive software-based pointer encryption used by PointGuard [20].

Our approach is similar to these works, proposing hardware support for an existing technique that prevents the execution of unauthorized code in the system.

### Conclusions

We have presented the design, implementation, and evaluation of ASIST, a hardware-assisted architecture for ISR support. ASIST offers:
- Improved performance with no runtime overhead,
- Enhanced security by protecting the operating system and resisting key guessing attempts,
- Transparent operation with shared libraries support and no need for program modifications.

Our experimental evaluation shows that ASIST does not impose significant overhead (less than 1.5%) while preventing code injection attacks that exploit user-level and kernel-level vulnerabilities. We also proposed a new approach for dynamic code encryption at the page fault handler when code is first loaded into process memory. This approach transparently encrypts unmodified binaries that may use shared libraries with a new key at each execution, offering protection against incremental key guessing attacks. Our results indicate that dynamic code encryption is efficient, adding no overhead due to the low text page fault rate. Our work demonstrates that ASIST can address most of the limitations of existing software-based ISR implementations while adding less than 0.7% additional hardware to a SPARC processor. We believe ASIST can be easily ported to other architectures to strengthen existing defenses against code injection attacks.

### Acknowledgments

We thank the anonymous reviewers for their valuable feedback. We also thank the Computer Architecture and VLSI Systems Lab of FORTH-ICS for providing access to FPGAs and design tools. The project was co-financed by the European Regional Development Fund (ERDF) and national funds under the Operational Programme "Competitiveness & Entrepreneurship" (OPCE II), Measure "COOPERATION" (Action I). This work was also supported in part by the European Union’s Prevention of and Fight against Crime Programme "Illegal Use of Internet" - ISEC 2010 Action Grants, grant ref. HOME/2010/ISEC/AG/INT-002, and by the FP7 projects NECOMA and SysSec, funded by the European Commission under Grant Agreements No. 608533 and No. 257007.

### References

[1] The SPARC Architecture Manual, Version 8. www.sparc.com/standards/V8.pdf.
[2] USA National Vulnerability Database. http://web.nvd.nist.gov/view/vuln/statistics.
[3] Linux Kernel Remote Buffer Overflow Vulnerabilities. http://secwatch.org/advisories/1013445/, 2006.
[4] OpenBSD IPv6 mbuf Remote Kernel Buffer Overflow. http://www.securityfocus.com/archive/1/462728/30/0/threaded, 2007.
[5] Microsoft Security Bulletin MS08-067 – Critical. http://www.microsoft.com/technet/security/Bulletin/MS08-067.msp...
[6] Microsoft Windows TCP/IP IGMP MLD Remote Buffer Overflow Vulnerability. http://www.securityfocus.com/bid/27100, 2008.
[7] Microsoft security advisory (975191): Vulnerabilities in the FTP service in Internet Information Services. http://www.microsoft.com/technet/security/advisory/975191.mspx, 2009.
[8] Microsoft security advisory (975497): Vulnerabilities in SMB could allow remote code execution. http://www.microsoft.com/technet/security/advisory/975497.mspx, 2009.
[9] E. G. Barrantes, D. H. Ackley, S. Forrest, and D. Stefanović. Randomized Instruction Set Emulation. ACM Transactions on Information and System Security, 8(1), 2005.
[10] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D. Zovi. Randomized Instruction Set Emulation to Disrupt Binary Code Injection Attacks. In ACM Conference on Computer and Communications Security (CCS), 2003.
[11] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits. In USENIX Security Symposium, 2003.
[12] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2011.
[13] S. W. Boyd, G. S. Kc, M. E. Locasto, A. D. Keromytis, and V. Prevelakis. On the General Applicability of Instruction-Set Randomization. IEEE Transactions on Dependable Secure Computing, 7(3), 2010.
[14] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC. In ACM Conference on Computer and Communications Security (CCS), 2008.
[15] P. P. Bungale and C.-K. Luk. PinOS: A Programmable Framework for Whole-System Dynamic Instrumentation. In ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments (VEE), 2007.
[28] J. L. Greathouse, H. Xin, Y. Luo, and T. Austin. A Case for Unlimited Watchpoints. In ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2012.
[29] W. Hu, J. Hiser, D. Williams, A. Filipi, J. W. Davidson, D. Evans, J. C. Knight, A. Nguyen-Tuong, and J. Rowanhill. Secure and Practical Defense Against Code-Injection Attacks Using Software Dynamic Translation. In ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments (VEE), 2006.
[30] X. Jiang, H. J. Wang, D. Xu, and Y.-M. Wang. RandSys: Thwarting Code Injection Attacks with System Service Interface Randomization. In IEEE International Symposium on Reliable Distributed Systems (SRDS), 2007.
[31] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering Code-Injection Attacks With Instruction-Set Randomization. In ACM Conference on Computer and Communications Security (CCS), 2003.
[32] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis. kGuard: Lightweight Kernel Protection Against Return-to-User Attacks. In USENIX Security Symposium, 2012.
[33] K. P. Lawton. Bochs: A Portable PC Emulator for Unix/X. Linux Journal, 1996.
[34] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2005.
[35] Nergal. The Advanced return-into-lib(c) Exploits: PaX Case Study. Phrack, 11(58), 2001.
[36] N. Nethercote and J. Seward. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2007.
[37] J. Oberheide, M. Bailey, and F. Jahanian. PolyPack: An Automated Online Packing Service for Optimal Antivirus Evasion. In USENIX Workshop on Offensive Technologies (WOOT), 2009.
[38] L. D. Paulson. New Chips Stop Buffer Overflow Attacks. IEEE Computer, 37(10), 2004.
[39] PaX Team. Homepage of PaX. http://pax.grsecurity.net/.
[40] P. Porras, H. Saidi, and V. Yegneswaran. Conficker C Analysis. SRI International, 2009.
[41] G. Portokalidis and A. D. Keromytis. Fast and Practical Instruction-Set Randomization for Commodity Systems. In Annual Computer Security Applications Conference (ACSAC), 2010.
[42] K. Scott, N. Kumar, S. Velusamy, B. Childers, J. W. Davidson, and M. L. Soffa. Retargetable and Reconfigurable Software Dynamic Translation. In International Symposium on Code Generation and Optimization: Feedback-Directed and Runtime Optimization (CGO), 2003.
[43] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In ACM Symposium on Operating Systems Principles (SOSP), 2007.
[44] S. Sethumadhavan, S. J. Stolfo, A. Keromytis, J. Yang, and D. August. Linux Kernel Vulnerabilities: State-of-the-Art Defenses and Open Problems. In Asia-Pacific Workshop on Systems (APSys), 2011.
[45] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-into-libc Without Function Calls (on the x86). In ACM Conference on Computer and Communications Security (CCS), 2007.
[46] A. Slowinska, T. Stancescu, and H. Bos. Body Armor for Binaries: Preventing Buffer Overflows Without Recompilation. In USENIX Annual Technical Conference (ATC), 2012.
[47] K. Z. Snow, L. Davi, A. Dmitrienko, C. Liebchen, F. Monrose, and A.-R. Sadeghi. Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In IEEE Symposium on Security and Privacy, 2013.
[48] A. N. Sovarel, D. Evans, and N. Paul. Where’s the FEEB? The Effectiveness of Instruction Set Randomization. In USENIX Security Symposium, 2005.
[49] Standard Performance Evaluation Corporation (SPEC). SPEC CINT2006 Benchmarks. http://www.spec.org/cpu2006/CINT2006.
[50] N. Tuck, B. Calder, and G. Varghese. Hardware and Binary Modification Support for Code Pointer Protection From Buffer Overflow. In IEEE/ACM International Symposium on Microarchitecture (MICRO), 2004.
[51] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek. Improving Integer Security for Systems with KINT. In USENIX Symposium on Operating System Design and Implementation (OSDI), 2012.
[52] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary Code. In ACM Conference on Computer and Communications Security (CCS), 2012.
[53] Y. Weiss and E. G. Barrantes. Known/Chosen Key Attacks against Software Instruction Set Randomization. In Annual Computer Security Applications Conference (ACSAC), 2006.
[54] Xilinx. Xilinx University Program XUPV5-LX110T Development System. http://www.xilinx.com/support/documentation/boards_and_kits/ug347.pdf, 2011.