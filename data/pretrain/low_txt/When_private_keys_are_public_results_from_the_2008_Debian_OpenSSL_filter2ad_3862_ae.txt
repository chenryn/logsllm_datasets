### Phase Followed by Levelling Off

Following the initial phase, the replacement of certificates occurred at a slower rate, with substantial fixes extending well beyond five months after the vulnerability announcement. In some cases, certificate authorities continued to issue certificates for weak keys long after the vulnerability was announced.

### Research Contributions and Dataset

In the course of this research, we have developed extensive tooling and a new SSL survey dataset that allows us to re-examine existing work on SSL server demographics. Our dataset is available to other researchers interested in studying real-world SSL deployments.

### Acknowledgements

We are grateful to Dan Boneh for discussions on how to attack DHE and to Nagendra Modadugu for advice on methodology. Josh Benaloh and David Pickett provided key details of the behavior of Internet Explorer. Florian Weimer and Dirk-Willem van Gulik helped identify the variations possible in key generation. Patrick Nehls and the UC San Diego security office provided the original list of hosts without which this study would not have been possible. Thanks to Terry Therneau for assistance with the Cox proportional hazards analysis and for providing the survival package. This document was prepared using Sweave [10]. We would especially like to thank Jeff Barto and Rick Andrews for their assistance with obtaining data on VeriSign’s certificates and notification policy. We also benefited from discussions with Jennifer Granick, Joe Hall, Candice Hoke, Jim Hughes, Cullen Jennings, Moni Naor, and Melanie Schoenberg. Finally, we are grateful for the comments and suggestions of the anonymous IMC reviewers.

### Funding and Support

This material is based upon work supported in part by the National Science Foundation under Grants No. 0831532 and 0831536 and supported in part by a MURI grant administered by the Air Force Office of Scientific Research. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation or the Air Force Office of Scientific Research.

### References

[1] P. Abeni, L. Bello, and M. Bertacchini. Exploiting DSA-1571: How to break PFS in SSL with EDH, July 2008. http://www.lucianobello.com.ar/exploiting_DSA-1571/index.html.
[2] A. Becherer, A. Stamos, and N. Wilcox. Cloud computing security: Raining on the trendy new parade. Presented at BlackHat USA 2009, July 2009. Online: http://www.isecpartners.com/files/Cloud.BlackHat2009-iSEC.pdf.
[3] I. Goldberg and D. Wagner. Randomness and the Netscape browser. Dr. Dobb’s Journal, pages 66–70, Jan. 1996.
[4] S. Kent and K. Seo. Security Architecture for the Internet Protocol. RFC 4301, Internet Engineering Task Force, Dec. 2005.
[5] D. G. Kleinbaum. Survival Analysis: A Self-Learning Text. Springer, 1996.
[6] B. Laurie. Debian and OpenSSL: The aftermath, May 2008. http://www.links.org/?p=328.
[7] B. Laurie. Vendors are bad for security, May 2008. http://www.links.org/?p=327.
[8] B. Laurie and R. Clayton. OpenID/Debian PRNG/DNS cache poisoning advisory, Aug. 2008. www.links.org/files/openid-advisory.txt.
[9] H. Lee, T. Malkin, and E. Nahum. Cryptographic strength of SSL/TLS servers: Current and recent practices. In C. Dovrolis and M. Roughan, editors, Proceedings of IMC 2007, pages 83–92. ACM Press, Oct. 2007.
[10] F. Leisch. Sweave: Dynamic generation of statistical reports using literate data analysis. In W. H¨ardle and B. R¨onz, editors, Compstat 2002 — Proceedings in Computational Statistics, pages 575–80. Physica Verlag, Heidelberg, 2002.
[11] M. Mueller. Debian OpenSSL predictable PRNG bruteforce SSH exploit, May 2008. http://milw0rm.com/exploits/5622.
[12] E. Murray. SSL server security survey, July 2000. Archived copy online: http://web.archive.org/web/20031005013455/http://www.lne.com/ericm/papers/ssl_servers.html.
[13] Netcraft. Netcraft SSL survey. news.netcraft.com/SSL-Survey/, Jan. 2008.
[14] R Development Core Team. R: A Language and Environment for Statistical Computing. R Foundation for Statistical Computing, Vienna, Austria, 2008.
[15] T. Ramos. The Laws of Vulnerabilities. RSA Conference, 2006. http://www.qualys.com/docs/Laws-Presentation.pdf.
[16] E. Rescorla. Security holes... who cares? In V. Paxson, editor, Proc. 12th USENIX Security Symp., pages 75–90. USENIX, Aug. 2003.
[17] S original by Terry Therneau, ported by Thomas Lumley. survival: Survival Analysis, including Penalised Likelihood. R package version 2.34.
[18] The Debian Project. openssl – predictable random number generator. DSA-1571-1, May 2008. http://www.debian.org/security/2008/dsa-1571.
[19] W. N. Venables and B. D. Ripley. Modern Applied Statistics with S. Springer, New York, fourth edition, 2002.
[20] T. Ylonen and C. Lonvick. The Secure Shell (SSH) Protocol Architecture. RFC 4251, Internet Engineering Task Force, Jan. 2006.

### Appendix

#### A. Attacking Apache with DHE

In this appendix, we demonstrate how an attacker who observes every connection to an Apache SSL server can track the entropy pools of the parent process and its children. This allows the attacker to decrypt all traffic in DHE sessions the server negotiates. (Ordinary RSA sessions remain secure.) Only the entropy used in handling connections needs to be weak for this attack to succeed; the server’s long-lived key can be strong.

Compared to simple process-per-child servers, Apache introduces several complicating factors:
1. **Multiple Connections per Worker**: A single worker process will handle multiple connections in sequence. Each connection will call `RAND_bytes` one or more times, mixing the entropy pool. Even with the Debian bug, the random values obtained by the process for the first connection it handles will be different from those obtained for the second and subsequent connections.
2. **Initialization in Parent Process**: Initialization, including the generation of cryptographic parameters, is carried out in a parent process that forks off child processes to handle connections. The entropy pool of a child process has both parent and child PIDs mixed in, so an attacker may have to precompute each of \(2^{15} \times 2^{15}\) values—though for lightly loaded servers, the child PIDs are likely to be near the parent PIDs.
3. **Thundering Herd Architecture**: Because Apache employs a "thundering herd" architecture, an attacker will not know a priori which child process will handle a particular connection.

Attacks against Apache servers are still possible but require the attacker to observe and record all traffic to the server from the moment it starts accepting connections. Prior to the attack, the attacker precomputes the entropy pool for each possible first parent, second parent, and child PID, along with the `ServerRandom` that would be sent by the first connection. We discuss the computation and storage requirements in Appendix A.3 below.

#### A.1 Building ServerRandom Tables

First, we created lookup tables to allow us to determine, given a session ID or `ServerRandom` value, the PIDs of the Apache parents and worker child. We constructed a simulator for Mod SSL that takes as input three PIDs (pid1, pid2, and pid3), and executes the exact same calls to the OpenSSL PRNG that Apache makes when initializing the server with parent PIDs pid1 and pid2 and worker PID pid3. Once the simulated worker process requests 28 bytes for the `ServerRandom` (after requesting 32 bytes for the session ID), we record this value and the three PIDs in our table.

A second table is required to handle the case where the first connection to a new child is a session resume, since in this case the `ServerRandom` is the first value drawn from the PRNG, not the second after the session ID. It is possible to combine both tables by recording both the session ID and `ServerRandom` in a single table; in a session resume, the first 28 bytes of the `ServerRandom` will be a prefix of what would otherwise be the session ID.

#### A.2 Compromising DHE Sessions

To track each child’s entropy pool as it evolves over multiple connections, we modify the simulator we used to generate the `ServerRandom` table so that it simulates connections of specified types in the sequence after generating the initial `ServerRandom`. Because the number of `RAND_bytes` calls for blinding operations depends on the server’s public key, this simulator must be tailored to the specific server we are attacking.

We use this simulator as follows. We use `ssldump` to obtain a parsed version of all the connections to the server. We extract the connection type and other values relevant to our analysis from the dump using a Perl script. As we step through the history of connections to the server, we keep track of the worker processes we have identified as being active and the sequence of connection types each has encountered thus far.

For each new connection that we examine, we first check if it is handled by a worker process that we already know about. To do this, we use our simulator to increment the state of each known worker process and then check if the `ServerRandom` emitted matches the `ServerRandom` of the new connection we are examining. If there is a match, we have determined that the connection is handled by an existing worker process that we are already tracking.

If not, the connection must have been handled by a new worker process; we can use our table of `ServerRandom` values to find the new process’ PID and start tracking its state. As we sequentially examine sessions in the `ssldump`, we can completely determine the PRNG state of every worker process at each point, so for the DHE sessions, we can determine the ephemeral Diffie-Hellman private key, compromising those sessions.

#### A.3 Resources Required for the Attack

Our attack platform was a machine with a single 3.2 GHz Intel Pentium 4 with 1 GB RAM. We performed a proof-of-concept attack under controlled conditions, building a subtable of the full lookup table discussed above, with the first parent PID in the range [5000, 5835]; the second server PID either the next or next-but-one; and worker PIDs up to one hundred after the second server PID. On our lightly-loaded test machine, rebooted before each trial, this small table always sufficed.

The table, containing approximately 160,000 entries, is 10 MB. We estimate that the full table of \(2^{35}\) entries would take less than 4 TB. Generating our small lookup table by naively simulating each PID triple took 15 hours. Using this approach to generate the full table would take several million hours of computer time. However, checkpointing the computation after the parent initialization has completed can cut this time down by several orders of magnitude. At \(2^{20}\) cost, this gives a lookup table of entropy pool states for each pair (pid1, pid2) of parent PIDs. One then uses the appropriate checkpoint entry to derive the entropy pool of each child PID pid3. This gives all (pid1, pid2, pid3) entries in the table without needlessly repeating the most costly part of the computation. Our experiments show that the two parent initializations, which require RSA keypair generation and make hundreds of PRNG calls, take 135 ms on average for each parent, whereas the final worker process stage is much faster—about 0.04 ms. This suggests a total cost for computing the table by this method of \(2^{20} \times 2 \times 135 \text{ ms} + 2^{35} \times 0.04 \text{ ms} \approx 460 \text{ hr}\), though the actual cost may be somewhat higher due to IO overhead.

The checkpointed workload, like the naive one, is highly parallelizable. The basic subtask is to compute the table entries for a particular parent PID pair (pid1, pid2) and all possible child PIDs. This subtask takes less than 1.6 s and is totally independent of any other subtask. It would take a cluster of 20 machines just a day to compute the entire table.

15. http://www.rtfm.com/ssldump/
16. This is any of \(2^{15}\) values for the initial server PID and child PID, and a smaller \(2^5\) range for the second server PID.