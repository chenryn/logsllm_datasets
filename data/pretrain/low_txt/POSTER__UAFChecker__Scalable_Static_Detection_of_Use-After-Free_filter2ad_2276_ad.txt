### High Performance Overhead and Inability to Analyze Large-Scale Programs

Clause et al. [14] present a dynamic technique for detecting invalid memory access. Their method taints both the objects and their corresponding pointers using the same taint mark. These taint marks are propagated and checked every time a pointer is referenced. If the taint marks of the object and the pointer differ, an illegal access is reported. This approach can be applied to binary code but requires hardware support for efficient taint analysis.

Although dynamic analyses achieve high detection accuracy with few false alarms, they require the insertion of dynamic runtime checks, leading to significant runtime and memory overhead. Additionally, generating inputs that can execute vulnerable paths is challenging, resulting in low code coverage in dynamic analyses.

### Static Analyses for Use-After-Free Vulnerability Detection

Static analyses do not suffer from the limitations of dynamic analyses. However, there are few studies on static analyses for use-after-free (UAF) vulnerability detection. UAFChecker [1] uses classic static analysis techniques, including taint analysis and symbolic execution, to detect UAF vulnerabilities in C/C++ code. The paper does not discuss the performance overhead of symbolic execution and taint analysis, and this method is not suitable for binary code. Tac [31] is a machine learning-guided static UAF vulnerability detection framework. It learns the correlations between program features and UAF-related aliases using a support vector machine and leverages this knowledge to improve the precision of alias analysis. However, the approach is not yet sound and requires a large number of marked training samples. A significant limitation of these methods is that they can only analyze open-source programs, while the source code for many applications is unavailable.

The closest approach to ours is GUEB [16], which uses static analysis to detect UAF vulnerabilities in binary code. GUEB employs a dedicated value set analysis to track heap operations and address transfers, and then uses these results to statically identify UAF vulnerabilities and extract the subgraph for each vulnerability. The main difference between GUEB and our solution is that GUEB uses a naive in-lining technique for inter-procedural analysis, which leads to high overhead when analyzing large programs. UAFDetector, on the other hand, uses function summaries instead of in-lining to improve the efficiency and scalability of vulnerability detection.

### Mitigation of Use-After-Free Vulnerabilities

Instead of detecting UAF vulnerabilities, some studies focus on preventing their exploitation. Cling [32], Diehard [33], and Dieharder [34] are safe memory allocators designed to make the exploitation of UAF vulnerabilities more difficult. These allocators restrict memory reuse by using more address space or randomizing memory allocation. While these solutions effectively prevent the exploitation of UAF vulnerabilities with acceptable overhead, attackers can bypass them using "heap spraying" or "heap fengshui"-like attacks.

DangNULL [4], FreeSentry [35], and DangSan [36] prevent the exploitation of UAF vulnerabilities by using pointer invalidation. These solutions insert runtime checks during compilation to track per-object pointers and invalidate them once the object is freed. When a dangling pointer is referenced, the program crashes, preventing the attacker from exploiting the vulnerability. Despite optimizations, this approach still has high performance and memory overhead and is not widely applied in practice.

Overwriting virtual table pointers is a common technique for exploiting UAF vulnerabilities. VTGuard [37], SafeDispatch [38], and VTV [39] protect against this technique. These mitigations have low performance overhead as they focus only on protecting virtual tables. However, they are ineffective if attackers target other pointers.

Many UAF vulnerabilities result from incorrect memory management in C/C++. Some efforts have been made to develop safe languages that avoid known memory corruption vulnerabilities by modifying language constructs. These languages use garbage collection instead of explicit memory freeing to reduce the risk of dangling pointers. Several safe languages [40], [41] aim to be as close to C/C++ as possible. Although they strive for compatibility with C/C++ programs, translating existing projects into these languages still requires significant effort.

### Conclusion

UAF vulnerabilities caused by dangling pointers pose a serious threat to computer systems. While several mitigations have been proposed, few are practical for large-scale programs. In this paper, we propose a scalable static approach that combines control flow graph (CFG) construction, alias analysis, function summaries, and pointer tracking to detect UAF vulnerabilities in binary code. Our approach uses function summaries for inter-procedural analysis, avoiding the repeated analysis problem in existing approaches. We implemented a prototype called UAFDetector and evaluated it using standard benchmarks (JTS) and real-world programs.

Experimental results show that UAFDetector effectively finds UAF vulnerabilities, achieving a low false negative rate (2.39%) and zero false positives in JTS. Despite some false positives and negatives, UAFDetector identifies most known vulnerabilities and one unknown vulnerability in real-world programs. Compared to GUEB, our approach reduces redundant overhead, with the number of functions analyzed being approximately 70.8% less in UAFDetector. Thus, our approach has lower overhead and better scalability for detecting UAF vulnerabilities in large-scale programs.

### References

[1] J. Ye, C. Zhang, and X. Han, “Poster: Uafchecker: Scalable static detection of use-after-free vulnerabilities,” in Proc. ACM SIGSAC Conf. Comput. Commun. Secur., Nov. 2014, pp. 1529–1531.
[2] National Vulnerability Database. Accessed: Apr. 10, 2019. [Online]. Available: https://nvd.nist.gov/
[3] M. Conti, S. Crane, and L. Davi, “Losing control: On the effectiveness of control-flow integrity under stack attacks,” in Proc. 22nd ACM SIGSAC Conf. Comput. Commun. Secur., Oct. 2015, pp. 952–963.
[4] B. Lee, C. Song, Y. Jang, T. Wang, T. Kim, L. Lu, and W. Lee, “Preventing Use-after-free with dangling pointers nullification,” in Proc. Netw. Distrib. Syst. Secur. Symp., San Diego, CA, USA, Feb. 2015, PP. 1–15.
[5] F. J. Serna. (2012). The Info Leak Era on Software Exploitation. Black Hat, NY, USA. Accessed: Apr. 10, 2019. [Online]. Available: https://docs.huihoo.com/blackhat/usa-2012/BH_US_12_Serna_Leak_Era_Slides.pdf
[6] W. Xu, J. Li, and J. Shu, “From collision to exploitation: Unleashing use-after-free vulnerabilities in Linux kernel,” in Proc. 22nd ACM SIGSAC Conf. Comput. Commun. Secur., Oct. 2015, pp. 425–441.
[7] J. Caballero, G. Grieco, M. Marron, and A. Nappa, “Undangle: Early detection of dangling pointers in use-after-free and double-free vulnerabilities,” in Proc. Int. Symp. Softw. Test. Anal. (ISSTA), 2012, pp. 133–143.
[8] N. Elhage. (2011). Virtunoid: A KVM Guest→Host Privilege Escalation Exploit. Black Hat, NY, USA. Accessed: Apr. 10, 2019. [Online]. Available: http://media.blackhat.com/bh-us-11/Elhage/BH_US_11_Elhage_Virtunoid_WP.pdf
[9] X. Fan, Y. Sui, X. Liao, and J. Xue, “Boosting the precision of virtual call integrity protection with partial pointer analysis for C++,” in Proc. 26th ACM SIGSOFT Int. Symp. Softw. Test. Anal. (ISSTA), 2017, pp. 329–340.
[10] K. Zetter. (2010). Hack of Google, Adobe Conducted Through Zero-Day IE Flaw. Accessed: Apr. 10, 2019. [Online]. Available: https://www.wired.com/2010/01/hack-of-adob/
[11] R. Hastings and B. Joyce, “Purify: Fast detection of memory leaks and access errors,” in Proc. Winter Usenix Conf., Jan. 1992, pp. 125–136.
[12] N. Nethercote and J. Seward, “Valgrind: A framework for heavyweight dynamic binary instrumentation,” ACM SIGPLAN Notices, vol. 42, no. 6, pp. 89–100, 2007.
[13] K. Serebryany, D. Bruening, and A. Potapenko, “AddressSanitizer: A fast address sanity checker,” in Proc. USENIX Annu. Tech. Conf., Jun. 2012, pp. 309–318.
[14] J. Clause, I. Doudalis, A. Orso, and M. Prvulovic, “Effective memory protection using dynamic tainting,” in Proc. 22nd IEEE/ACM Int. Conf. Automated Softw. Eng. (ASE), Nov. 2007, pp. 284–292.
[15] F. Kirchner, N. Kosmatov, V. Prevosto, J. Signoles, and B. Yakobowski, “Frama-C: A software analysis perspective,” Formal Aspects Comput., vol. 27, no. 3, pp. 573–609, May 2015.
[16] J. Feist, L. Mounier, and M.-L. Potet, “Statically detecting use after free on binary code,” J. Comput. Virol. Hacking Techn., vol. 10, no. 3, pp. 211–217, Aug. 2014.
[17] T. Boland and P. E. Black, “Juliet 1.1 C/C++ and Java test suite,” Computer, vol. 45, no. 10, pp. 88–90, 2012.
[18] Interactive DisAssembler. Accessed: Apr. 10, 2019. [Online]. Available: https://www.hex-rays.com/
[19] BinNavi. Accessed: Apr. 10, 2019. [Online]. Available: https://github.com/google/binnavi
[20] K. Zhu, Y. Lu, and H. Hang, “Construction approach for control flow graph from binaries using hybrid analysis,” J. ZheJiang Univ. (Eng. Sci.), vol. 53, no. 5, pp. 829–836, 2019.
[21] B. M. Padmanabhuni and H. B. K. Tan, “Auditing buffer overflow vulnerabilities using hybrid static–dynamic analysis,” IET Softw., vol. 10, no. 2, pp. 54–61, 2016.
[22] L. Xu, F. Sun, and Z. Su, “Constructing precise control flow graphs from binaries,” Univ. California, Davis, CA, USA, Tech. Rep., 2009. [Online]. Available: https://pdfs.semanticscollar.org/8a80/f0d173ec7420478e4b96a8264e21e0dafac0.pdf
[23] A. V. Aho, M. S. Lam, and R. Sethi, “Machine-independent optimizations,” in Compilers: Principles, Techniques, and Tools, 2nd ed. Boston, MA, USA: Addison-Wesley, 2006, pp. 601–607.
[24] J. Feist, “Finding the needle in the heap: Combining binary analysis techniques to trigger use-after-free,” Ph.D. dissertation, Dept. Cryptogr. Secur., Univ. Grenoble Alpes., Grenoble, France, 2017.
[25] S. Alrabaee, L. Wang, and M. Debbabi, “BinGold: Towards robust binary analysis by extracting the semantics of binary code as semantic flow graphs (SFGs),” Digit. Invest., vol. 18, pp. S11–S22, Aug. 2016.
[26] S. Alrabaee, P. Shirani, L. Wang, and M. Debbabi, “SIGMA: A semantic integrated graph matching approach for identifying reused functions in binary code,” Digit. Invest., vol. 12, pp. S61–S71, Mar. 2015.
[27] W. Wang, Y. Li, X. Wang, J. Liu, and X. Zhang, “Detecting Android malicious apps and categorizing benign apps with ensemble of classifiers,” Future Gener. Comput. Syst., vol. 78, pp. 987–994, Jan. 2018.
[28] S. Alrabaee, P. Shirani, and L. Wang, “FOSSIL: A resilient and efficient system for identifying FOSS functions in Malware binaries,” ACM Trans. Privacy Secur., vol. 21, no. 2, pp. 1–34, 2018.
[29] W. Wang, M. Zhao, Z. Gao, G. Xu, H. Xian, Y. Li, and X. Zhang, “Constructing features for detecting Android malicious applications: Issues, taxonomy and directions,” IEEE Access, vol. 7, pp. 67602–67631, 2019.
[30] S. Nagarakatte, M. M. K. Martin, and J. Zhao, “CETS: Compiler enforced temporal safety for C,” ACM SIGPLAN Notices, vol. 45, no. 8, pp. 31–40, 2010.
[31] H. Yan, Y. Sui, S. Chen, and J. Xue, “Machine-Learning-Guided typestate analysis for static Use-After-Free detection,” in Proc. 33rd Annu. Comput. Secur. Appl. Conf., Dec. 2017, pp. 42–54.
[32] P. Akritidis, “Cling: A memory allocator to mitigate dangling pointers,” in Proc. USENIX Secur. Symp., Aug. 2010, pp. 177–192.
[33] E. D. Berger and B. G. Zorn, “DieHard: Probabilistic memory safety for unsafe languages,” ACM SIGPLAN Notices, vol. 41, no. 6, pp. 158–168, Jun. 2006.
[34] G. Novark and E. D. Berger, “DieHarder: Securing the heap,” in Proc. 17th ACM Conf. Comput. Commun. Secur. (CCS), 2010, pp. 177–192.
[35] Y. Younan, “FreeSentry: Protecting against Use-After-Free vulnerabilities due to dangling pointers,” in Proc. Netw. Distrib. Syst. Secur. Symp., San Diego, CA, USA, Feb. 2015, pp. 1–15.
[36] E. van der Kouwe, V. Nigade, and C. Giuffrida, “DangSan: Scalable Use-after-free detection,” in Proc. 12th Eur. Conf. Comput. Syst. - EuroSys, 2017, pp. 405–419.
[37] K. Johnson and M. Miller. (2012). Exploit Mitigation Improvements in Windows. Black Hat USA. Accessed: Apr. 10, 2019. [Online]. Available: https://media.blackhat.com/bh-us-12/Briefings/M_Miller/BH_US_12_Miller_Exploit_Mitigation_Slides.pdf
[38] D. Jang, Z. Tatlock, and S. Lerner, “SAFEDISPATCH: Securing C++ virtual calls from memory corruption attacks,” in Proc. Netw. Distrib. Syst. Secur. Symp., San Diego, CA, USA, Feb. 2014, pp. 1–15.
[39] C. Tice, T. Roeder, and P. Collingbourne, “Enforcing forward-edge control-flow integrity in GCC & LLVM,” in Proc. 23rd USENIX Secur. Symp. USENIX Secur., Aug. 2014, pp. 941–955.
[40] D. Grossman, M. Hicks, and T. Jim, “Cyclone: A type-safe dialect of C,” C/C++ Users J., vol. 23, no. 1, pp. 112–139, 2005.
[41] G. C. Necula, S. McPeak, and W. Weimer, “CCured: Type-safe retrofitting of legacy code,” ACM SIGPLAN Notices, vol. 37, no. 1, pp. 128–139, Jan. 2002.

### Authors

**KAILONG ZHU** was born in China in 1991. He received his B.Sc. and M.Sc. degrees in cyberspace security from the National University of Defense Technology, Hefei, China, in 2014 and 2017, respectively. He is currently pursuing his Ph.D. degree at the same university. His research interests include information security and program verification.

**YULIANG LU** was born in China in 1964. He received his B.Sc. (Hons.) and M.Sc. degrees in computer application from Southeast University, China, in 1985 and 1988, respectively. He is currently a Professor at the National University of Defense Technology, Hefei, China. His research interests include computer application and information security.

**HUI HUANG** was born in China in 1987. He received his M.Sc. and Ph.D. degrees in information security from the National University of Defense Technology, Hefei, China, in 2012 and 2015, respectively. His research interests include information security and program verification.