### References

1. **Project Zero Issue 1528** (2018). [project-zero/issues/detail?id=1528](https://bugs.chromium.org/p/project-zero/issues/detail?id=1528).

2. **HTML Living Standard: Opaque Origin** (January 2019). [html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque](https://html.spec.whatwg.org/multipage/origin.html#concept-origin-opaque).

3. **L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and C. Jackson**. Clickjacking: Attacks and Defenses. In *USENIX Security* (2012).

4. **S. Ioannidis and S. M. Bellovin**. Building a Secure Web Browser. In *Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference* (2001).

5. **S. Ioannidis, S. M. Bellovin, and J. M. Smith**. Sub-operating Systems: A New Approach to Application Security. In *Proceedings of the 10th SIGOPS European Workshop* (2002).

6. **Y. Jia, Z. L. Chua, H. Hu, S. Chen, P. Saxena, and Z. Liang**. "The Web/Local" Boundary Is Fuzzy: A Security Study of Chrome’s Process-based Sandboxing. In *CCS* (2016).

7. **P. Kocher, J. Horn, A. Fogh, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom**. Spectre Attacks: Exploiting Speculative Execution. In *IEEE Symposium on Security and Privacy* (2019).

8. **M. Lipp, D. Gruss, M. Schwarz, D. Bidner, C. Maurice, and S. Mangard**. Practical Keystroke Timing Attacks in Sandboxed JavaScript. In *ESORICS* (2017).

9. **M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg**. Meltdown: Reading Kernel Memory from User Space. In *USENIX Security* (2018).

10. **R. McIlroy, J. Sevcík, T. Tebbi, B. L. Titzer, and T. Verwaest**. Spectre is Here to Stay: An Analysis of Side-Channels and Speculative Execution. *CoRR*, abs/1902.05178 (2019).

11. **Memory Protection Keys for Userspace** (January 2019). [kernel.org/doc/Documentation/x86/protection-keys.txt](https://www.kernel.org/doc/Documentation/x86/protection-keys.txt).

12. **Microsoft Edge Team**. Mitigating Speculative Execution Side-Channel Attacks in Microsoft Edge and Internet Explorer. [blogs.windows.com/msedgedev/2018/01/03/speculative-execution-mitigations-microsoft-edge-internet-explorer/](https://blogs.windows.com/msedgedev/2018/01/03/speculative-execution-mitigations-microsoft-edge-internet-explorer/) (January 2018).

13. **M. Minkin, D. Moghimi, M. Lipp, M. Schwarz, J. V. Bulck, D. Genkin, D. Gruss, B. Sunar, F. Piessens, and Y. Yarom**. Fallout: Reading Kernel Writes From User Space. [mdsattacks.com](https://mdsattacks.com) (2019).

14. **M. Moroz and S. Glazunov**. Analysis of UXSS Exploits and Mitigations in Chromium. *Technical Report*, Google (2019). [ai.google/research/pubs/pub48028](https://ai.google/research/pubs/pub48028).

15. **A. Moshchuk, H. J. Wang, and Y. Liu**. Content-based Isolation: Rethinking Isolation Policy Design on Client Systems. In *CCS* (2013).

16. **N. Nguyen**. The Best Firefox Ever. [blog.mozilla.org/blog/2017/06/13/faster-better-firefox/](https://blog.mozilla.org/blog/2017/06/13/faster-better-firefox/) (2017).

17. **R. Niwa**. Restricting Cross-Origin WindowProxy Access (Cross-Origin-Opener-Policy). [github.com/whatwg/html/issues/3740](https://github.com/whatwg/html/issues/3740) (June 2018).

18. **N. Oskov**. Site Isolation Benchmark Script. [github.com/naskooskov/site-isolation-benchmark](https://github.com/naskooskov/site-isolation-benchmark) (May 2019).

19. **OWASP**. XSS (Cross-Site Scripting) Prevention Cheat Sheet. [github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md) (February 2019).

20. **C. Palmer**. Isolating Application-Defined Principals. [noncombatant.org/application-principals/](https://noncombatant.org/application-principals/) (July 2018).

21. **F. Pizlo**. What Spectre and Meltdown Mean For WebKit. [webkit.org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/](https://webkit.org/blog/8048/what-spectre-and-meltdown-mean-for-webkit/) (January 2018).

22. **C. Reis**. Post-Spectre Threat Model Re-Think. [chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md](https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md) (May 2018).

23. **C. Reis**. Improving Extension Security with Out-of-Process iframes. [blog.chromium.org/2017/05/improving-extension-security-with-out.html](https://blog.chromium.org/2017/05/improving-extension-security-with-out.html) (May 2017).

24. **C. Reis, A. Barth, and C. Pizano**. Browser Security: Lessons from Google Chrome. *Commun. ACM*, 52(8):45–49 (August 2009).

25. **C. Reis and S. D. Gribble**. Isolating Web Programs in Modern Browser Architectures. In *EuroSys* (2009).

26. **R. Rogowski, M. Morton, F. Li, F. Monrose, K. Z. Snow, and M. Polychronakis**. Revisiting Browser Security in the Modern Era: New Data-Only Attacks and Defenses. In *IEEE European Symposium on Security and Privacy* (2017).

27. **J. Ruderman**. The Same Origin Policy. [developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) (2019).

28. **J. Schuh**. The Final Countdown for NPAPI. [blog.chromium.org/2014/11/the-final-countdown-for-npapi.html](https://blog.chromium.org/2014/11/the-final-countdown-for-npapi.html) (2014).

29. **M. Schwarz, M. Lipp, and D. Gruss**. JavaScript Zero: Real JavaScript and Zero Side-Channel Attacks. In *NDSS* (2018).

30. **M. Schwarz, M. Lipp, D. Moghimi, J. Van Bulck, J. Stecklina, T. Prescher, and D. Gruss**. ZombieLoad: Cross-Privilege-Boundary Data Sampling. [zombieloadattack.com](https://zombieloadattack.com) (2019).

31. **M. Schwarz, C. Maurice, D. Gruss, and S. Mangard**. Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural Attacks in JavaScript. In *Financial Cryptography and Data Security* (January 2017).

32. **SharedArrayBuffer**. [developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) (2019).

33. **Site Isolate PDFium**. [crbug.com/809614](https://crbug.com/809614) (January 2019).

34. **P. Snyder, C. Taylor, and C. Kanich**. Most Websites Don’t Need to Vibrate: A Cost-Benefit Approach to Improving Browser Security. In *CCS* (2017).

35. **S. Tang, S. T. King, and C. Grier**. Secure Web Browsing with the OP Web Browser. In *IEEE Symposium on Security and Privacy* (2008).

36. **S. Tang, H. Mai, and S. T. King**. Trust and Protection in the Illinois Browser Operating System. In *OSDI* (2010).

37. **D. Topic**. Moving to a Plugin-Free Web. [blogs.oracle.com/java-platform-group/moving-to-a-plugin-free-web](https://blogs.oracle.com/java-platform-group/moving-to-a-plugin-free-web) (January 2016).

38. **Untrusted Code Mitigations**. [v8.dev/docs/untrusted-code-mitigations](https://v8.dev/docs/untrusted-code-mitigations) (January 2018).

39. **S. van Schaik, A. Milburn, S. Österlund, P. Frigo, G. Maisuradze, K. Razavi, H. Bos, and C. Giuffrida**. RIDL: Rogue In-Flight Data Load. In *IEEE Symposium on Security and Privacy* (2019).

40. **L. Wagner**. Mitigations Landing for New Class of Timing Attack. [blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/](https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/) (January 2018).

41. **H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter**. The Multi-Principal OS Construction of the Gazelle Web Browser. In *USENIX Security* (2009).

42. **Web Page Replay**. [github.com/catapult-project/catapult/blob/master/web_page_replay_go/README.md](https://github.com/catapult-project/catapult/blob/master/web_page_replay_go/README.md) (September 2017).

43. **WebKit2**. [trac.webkit.org/wiki/WebKit2](https://trac.webkit.org/wiki/WebKit2) (July 2011).

44. **M. West**. Fetch Metadata Request Headers. [mikewest.github.io/sec-metadata](https://mikewest.github.io/sec-metadata) (2018).

45. **M. West**. Proposal: Control over `document.domain`. [github.com/w3c/webappsec-feature-policy/issues/241](https://github.com/w3c/webappsec-feature-policy/issues/241) (November 2018).

46. **M. West**. Incrementally Better Cookies. [mikewest.github.io/cookie-incrementalism/draft-west-cookie-incrementalism.html](https://mikewest.github.io/cookie-incrementalism/draft-west-cookie-incrementalism.html) (May 2019).

47. **Window.sessionStorage**. [developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage) (2019).

48. **Y. Yarom and K. Falkner**. FLUSH+RELOAD: A High-Resolution, Low Noise, L3 Cache Side-Channel Attack. In *USENIX Security* (2014).

49. **A. Zeigler**. IE8 and Loosely-Coupled IE (LCIE). [blogs.msdn.microsoft.com/ie/2008/03/11/ie8-and-loosely-coupled-ie-lcie/](https://blogs.msdn.microsoft.com/ie/2008/03/11/ie8-and-loosely-coupled-ie-lcie/) (2008).

### Appendix A: Determining Site Principals

This appendix provides additional details on how we define principals used in Site Isolation. Figure 5 compares principal definitions in monolithic browsers, multi-process browsers that isolate coarser-grained groups of principals, Site Isolation, and Origin Isolation. Origin Isolation, where principals are defined as origins, offers stronger security guarantees at the cost of breaking `document.domain` compatibility and performance challenges due to a larger number of principals.

As noted in Section 3.1, computing the site URL for most HTTP(S) URLs is straightforward, but some web platform features require special treatment. For example, frames may be navigated to `about:blank`, a special URL which must inherit the security origin, and hence the site, from the frame initiating the navigation. The web also supports nested URLs such as `blob:` URLs. These URLs embed an origin; e.g., `blob:http://example.com/UUID` addresses an in-memory blob of data controlled by the `http://example.com` origin. In these cases, we extract the inner origin from the URL and then convert it to a site.

A document may also embed a frame and specify its HTML content inline rather than from the network, either using the `srcdoc` attribute (e.g., `<iframe srcdoc="content">`) or a `data:` URL (e.g., `data:text/html,content`). `Srcdoc` frames inherit their creator’s origin and must stay in the principal of their embedding document. In contrast, `data:` URLs load in an opaque origin [29], which cannot be accessed from any other origin. Browsers may choose to load each `data:` URL in its own separate principal and process, but our current implementation uses the creator’s principal (which typically controls the content) to reduce the number of processes required. Similarly, our current implementation keeps same-site iframes with the `sandbox` attribute, which typically load in an opaque origin, in the principal of their URL’s site.

In practice, sites often use sandboxed iframes for untrustworthy content that they wish to isolate from the rest of the site; we discuss opportunities for finer-grained isolation within a site in Section 6.3.

#### Non-web Principals

Many browsers can load documents that do not originate from the web, including content from local files, extensions, browser UI pages, and error pages. These forms of content utilize the web platform for rendering, so the browser must define principals for them. Each local URL (e.g., `file:///homes/foo/a.html`) is typically treated as its own origin by the browser, so each path could use a separate principal and process. Our current implementation treats all local files as part of the same file principal to reduce the process count, since they ultimately belong to a local user. We may revise this to isolate each file in the future, since this group of local files may contain less trustworthy pages saved from the web.

We assign content from extensions to a separate shared principal, and we isolate all browser UI pages, such as settings or download manager, from one another. These pages require vastly different permissions and privileges, and a compromise of one page (e.g., a buggy extension) should not be able to take advantage of permissions granted to a more powerful page (e.g., a download management page that can download and open files). We do allow extensions to share processes with each other to reduce the process count; thus, Figure 5 (c) shows extensions in a shared principal. However, extensions never share processes with other types of pages.

### Appendix B: Features Updated to Support Out-of-Process iframes

This appendix lists a subset of Chrome features that needed to be updated to support out-of-process iframes, beyond those discussed in Section 3.4.

- Accessibility (e.g., screen readers).
- Developer tools.
- Drag and drop.
- Extensions (e.g., injecting scripts into frames of a page).
- Find-in-page.
- Focus (e.g., tracking focused page and frame, focus traversal when pressing Tab).
- Form autofill.
- Fullscreen.
- IME (Input Method Editor).
- Input gestures.
- JavaScript dialogs.
- Mixed content handling.
- Multiple monitor and device scale factor support.
- Password manager.
- Pointer Lock API.
- Printing.
- Task manager.
- Resource optimizations (e.g., deprioritizing offscreen content).
- Malware and phishing detection.
- Save page to disk.
- Screen Orientation API.
- Scroll bubbling.
- Session restore.
- Spellcheck.
- Tooltips.
- Unresponsive renderer detector and dialog.
- User gesture tracking.
- View source.
- Visibility APIs.
- Webdriver automation.
- Zoom.

### Appendix C: Compromised Renderer Enforcements

This appendix lists the current places that privileged browser components in Chrome (version 76) limit the behavior of a renderer process based on its associated site, to mitigate compromised renderers.

- Cookie reads and writes (document.cookie, HttpOnly cookies).
- Cross-Origin Read Blocking implementation [20].
- Cross-Origin-Resource-Policy blocking [21].
- Frame embedding (X-Frame-Options).
- JavaScript code cache.
- Messaging (postMessage, BroadcastChannel).
- Password manager, Credential Management API.
- Storage (localStorage, sessionStorage, indexedDB, blob storage, Cache API, WebSQL).
- Preventing web page access to `file://` URLs.
- Web permissions (e.g., geolocation, camera).

We expect the following enforcements to be possible as well, with additional implementation effort:

- Address bar origin.
- Custom HTTP headers requiring CORS.
- Feature Policy.
- Iframe sandbox behaviors.
- Origin Header and CORS implementation.
- SameSite cookies.
- Sec-Fetch-Site [71].
- User gestures.

### Figure 5: Evolution of Security Principals in Browser Architectures

Compared to prior browser architectures, Site Isolation defines finer-grained principals that correspond to sites. Origin Isolation (d) further refines sites to origins and is the most desirable principal model in the long term, but backward compatibility and performance challenges currently limit its practicality.

* In pre-Site-Isolation browsers (b), extensions were isolated in higher-privileged processes, but with a caveat: extensions could embed web URL iframes which would stay in the extension’s process. With Site Isolation (c), process sharing across the web/extension boundary is no longer possible, though extensions may still share a process with one another.