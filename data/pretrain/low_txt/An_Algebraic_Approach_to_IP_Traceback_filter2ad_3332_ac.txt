# 6.1. Packets Needed

The receiver observes the values of evaluated degree 5 polynomials, such as \( z_3x^5 + y_1 \). Our objective is to recover the IP addresses of the routers. For example, the polynomial evaluations might include \( y_3x^2 \), \( z_1x^3 \), \( z_2x^4 \), and \( y_2x \).

### IP Header Structure
- **IP Version** (4-bit)
- **Header Length** (4-bit)
- **Type of Service (TOS)** (8-bit)
- **Total Length** (16-bit)
- **Fragment ID** (16-bit)
- **Flags** (3-bit)
- **Fragment Offset** (13-bit)
- **Time to Live (TTL)** (8-bit)
- **Protocol** (8-bit)
- **Header Checksum** (16-bit)
- **Source IP Address** (32-bit)
- **Destination IP Address** (32-bit)
- **Accumulator** (11-bit)
- **Random Data** (3-bit)
- **Flag** (1-bit)

We choose to use 15 bits from the IP header (Z and Y in our example) for this data. Using the method from [13], we need to analyze N packets at a time. Therefore, N must be greater than 5 to recover edges at a distance d away from us. Specifically, we need \( N > \frac{1 - 2^{-5}}{d} - 1 \) to expect to get edges at distance d with over 98% probability by analyzing 20,000 packets.

In our simulations, we were able to recover paths of length 25 over 98% of the time by analyzing 20,000 packets, which aligns with our analytical results. In recent denial of service attacks, Yahoo reported receiving over 1 gigabyte of data per second. Even if every packet was of the largest possible size, Yahoo would have received more than enough packets in under 2 seconds. While most sites do not have the bandwidth of Yahoo, we believe that most sites could recover interesting paths in far less than a minute. Additionally, our scheme can leverage any new algorithms for decoding Reed-Solomon codes to improve these results without requiring router modifications. If multiple paths are present in the data, the Guruswami-Sudan algorithm might not find all paths from a single sample of 20,000 packets. Repeating the reconstruction on different samples might be necessary. Finding all paths from a single sample would require an increase in the sample size that is quadratic in the number of paths.

# 6.2. Router Performance

At the baseline, this scheme is already efficient for routers, requiring only normal ALU operations, comparisons, and a random number generator. We can further improve this situation using some precomputation.

We only need to evaluate our degree 5 polynomial at 6 points to recover it. We treat the random value 6 as 0 and 7 as 1, which should not cause any trouble as long as all routers agree on the change. The coupon collector's problem tells us that we would expect to get all 6 values in fewer packets than required by our multiple path reconstructor. Even the smallest routers should be able to precompute and store the 6 possible values that would need to be inserted when they are in marking mode (these values require only 12 bytes of storage). If we are storing these values, we should also include an extra multiplication by the random value because that is the first thing the next router would compute. At the victim, we would, of course, have to divide by the random value for all packets that still have their signal bit set. This reduces the work needed at the second router to, at most, 2 random number generations, 2 comparisons, 2 shifts, 5 additions, and a reduction modulo 2039. This could easily be accomplished using combinational logic in an ASIC or custom chip. For larger routers, it would make sense to precompute a lookup table with all possible second hop values.

We implemented this scheme under FreeBSD 4.0 on a Pentium II running at 333 MHz. Using RC4 [20] as the random number generator, the scheme executed in less than 50 clocks per packet. When routing packets across a 100 Mbit/sec Ethernet, there was no measurable difference in throughput between the modified and unmodified kernels (more than 95 Mbit/sec worth of packets were routed in both cases).

# 6.3. Reconstruction Performance

The reconstruction algorithm due to Guruswami and Sudan [13] can be implemented in several ways. The most straightforward implementation would take time proportional to \( n \) to recover all edges for which we received at least \( \frac{1 - 2^{-5}}{5n} \) out of \( n \) packets. However, this drops to \( O(n^3) \) by requiring only slightly more packets: \( 5n(1 + \epsilon) \). A recent algorithmic breakthrough by Olshevsky and Shokrollahi would reduce our reconstruction time even further, to \( O(n^{2.5}) \). This new algorithm is highly parallelizable (up to \( O(n) \) processors), suggesting that distributing the reconstruction task might speed things up even more.

# 6.4. Resistance to Attack

While resistance to attack is the most important metric in evaluating a traceback scheme, it is also the most difficult to analyze. Our scheme seems to be resistant to the same attacks as the scheme proposed by Savage et al., and even with current algorithms for filtering mixed data, it can handle multiple attackers more robustly. One major difference is our decision not to include an explicit hop count, which allows Savage's scheme to deny an attacker the ability to insert packets closer than his distance to the victim. This only prevents the insertion of edges closer than the closest attacker. An attack on this would be to have multiple attackers at different distances and use the close attackers to "hide" the routes of packets from those attackers farther away. Our scheme also suffers from this problem but not as severely due to the built-in noise filtering of the Guruswami-Sudan multiple path reconstruction algorithm. By comparing the frequency at which an edge is marked to the expected marking probability of the edge, we can detect false edges closer than the attacker, provided the nearest attacker is at least a few hops away. This technique has worked well in our simulations.

Our schemes could also use HMAC techniques discussed by Song and Perrig to ensure that edges are not faked, but this would require additional space in the packets to store the hash or lose our incremental deployment properties [21]. If we decide to make one of these tradeoffs, our scheme should be comparably secure against multiple attackers.

# 7. Future Work

One important open problem is to find better variations of our Random Full Path tracing schemes. Perhaps an approach based on algebraic geometric codes [13] would be successful. We have been unable to find a variation that immediately improves on combinatorial approaches in all situations, but it seems intuitively plausible that one should exist. More generally, it would be interesting to explore resource and security tradeoffs for more of the many parameterizations of our methods.

# 8. Conclusions

We have presented a new algebraic approach for providing traceback information in IP packets. Our approach is based on mathematical techniques first developed for problems related to error-correcting codes and machine learning. Our best scheme has improved robustness over previous combinatorial approaches, both for noise elimination and multiple-path reconstruction. Another key advantage of our schemes is that they will automatically benefit from any improvement in the underlying mathematical techniques, for which progress has been steady in recent years.

# Acknowledgments

We would like to thank David Goldberg and Dan Boneh for helpful discussions. We would also like to thank Dawn Song, Adrian Perrig, and the anonymous referees for helpful comments on an earlier version of this paper.

# References

[1] P. Almquist. Type of service in the internet protocol suite. RFC 1349, July 1992.
[2] J. A. Anderson and J. M. Bell. Number Theory with Applications. Prentice Hall, 1996.
[3] S. Ar, R. J. Lipton, R. Rubinfeld, and M. Sudan. Reconstructing algebraic functions from mixed data. In 33rd Annual Symposium on Foundations of Computer Science, pages 503–512, Pittsburgh, Pennsylvania, 24–27 Oct. 1992. IEEE.
[4] S. M. Bellovin. Personal Communications, May 2000.
[5] S. M. Bellovin. ICMP traceback messages. http://search.ietf.org/internet-drafts/draft-bellovin-itrace-00.txt, Mar. 2000.
[6] E. Berlekamp and L. Welch. Error correction of algebraic block codes. United States Patent 4,490,811, Dec. 1986.
[7] E. R. Berlekamp. Algebraic Coding Theory. Aegean Park Press, 1984.
[8] CERT coordination center denial of service attacks. http://www.cert.org/tech_tips/denial_of_service.html, Feb. 1999.
[9] S. Deering and R. Hinden. Internet protocol, version 6 (IPv6) specification. RFC 2474, Dec. 1995.
[10] D. Dittrich. The “stacheldraht” distributed denial of service attack tool. http://staff.washington.edu/dittrich/misc/stacheldraht.analysis.txt, Dec. 1999.
[11] D. Dittrich. The ”Tribe Flood Network” distributed denial of service attack tool. http://staff.washington.edu/dittrich/misc/tfn.analysis, Oct. 1999.
[12] P. Ferguson and D. Senie. Network ingress filtering: Defeating denial of service attacks which employ IP source address spoofing. RFC 2267, Jan. 1998.
[13] V. Guruswami and M. Sudan. Improved decoding of Reed-Solomon and algebraic-geometric codes. IEEE Transactions on Information Theory, 45:1757–1767, 1999.
[14] D. E. Knuth. The Art of Computer Programming, Vol. 2: Seminumerical Algorithms. Addison-Wesley, 1998.
[15] K. Nichols, S. Blake, F. Baker, and D. Black. Definition of the Differentiated Services field (DS field) in the IPv4 and IPv6 headers. RFC 2474, Dec. 1998.
[16] V. Olshevsky and M. A. Shokrollahi. A displacement approach to efficient decoding of algebraic-geometric codes. In 31st Annual ACM Symposium on Theory of Computation, pages 235–244, Atlanta, Georgia, May 1999. ACM.
[17] W. H. Press, B. P. Flannery, S. A. Teukolsky, and W. T. Vetterling. Numerical Recipes in FORTRAN: The Art of Scientific Computing. Cambridge University Press, 1992.
[18] K. Ramakrishnan and S. Floyd. A proposal to add Explicit Congestion Notification (ECN) to IP. RFC 2481, Jan. 1999.
[19] S. Savage, D. Wetherall, A. Karlin, and T. Anderson. Practical network support for IP traceback. In 2000 ACM SIGCOMM Conference, Aug. 2000.
[20] B. Schneier. Applied Cryptography, Second Edition. John Wiley and Sons, 1996.
[21] D. Song and A. Perrig. Advanced and authenticated marking schemes for IP traceback. Technical Report UCB/CSD-00-1107, University of California, Berkeley, June 2000.
[22] I. Stoica and H. Zhang. Providing guaranteed services without per flow management. In ACM SIGCOMM ’99, pages 81–94, Cambridge, MA, 1999.
[23] M. Sudan. Algorithmic issues in coding theory. In 17th Conference on Foundations of Software Technology and Theoretical Computer Science, Kharagpur, India, 1997.
[24] M. Sudan. Decoding of Reed Solomon codes beyond the error-correction bound. Journal of Complexity, 13(1):180–193, Mar. 1997.