# Port Numbers and Services

Below is a list of common port numbers and their associated services, organized for clarity and ease of reference:

- **80**: HTTP
- **902**: VMware Server
- **3784-3785**: Ventrilo
- **9119**: MXit
- **88**: Kerberos
- **989-990**: FTP over SSL
- **4333**: mSQL
- **9800**: WebDAV
- **102**: MS Exchange
- **993**: IMAP4 over SSL
- **4444**: Blaster
- **9898**: Dabber
- **110**: POP3
- **995**: POP3 over SSL
- **4664**: Google Desktop
- **9988**: Rbot/Spybot
- **113**: Ident
- **1025**: Microsoft RPC
- **4672**: eMule
- **9999**: Urchin
- **119**: NNTP (Usenet)
- **1026-1029**: Windows Messenger
- **4899**: Radmin
- **10000**: Webmin
- **123**: NTP
- **1080**: SOCKS Proxy
- **5000**: UPnP
- **10000**: BackupExec
- **135**: Microsoft RPC
- **1080**: MyDoom
- **5001**: Slingbox
- **11371**: OpenPGP
- **137-139**: NetBIOS
- **1194**: OpenVPN
- **5004-5005**: RTP
- **12035-12036**: NetIQ
- **143**: IMAP4
- **1214**: Kazaa
- **5050**: Yahoo! Messenger
- **12345**: NetBus
- **161-162**: SNMP
- **1241**: Nessus
- **5190**: AIM/ICQ
- **13720-13721**: NetBackup
- **177**: XDMCP
- **1337**: WASTE
- **5222-5223**: XMPP/Jabber
- **14567**: Battlefield
- **179**: BGP
- **1433-1434**: Microsoft SQL
- **5432**: PostgreSQL
- **15118**: Dipnet/Oddbob
- **201**: AppleTalk
- **1589**: Cisco VQP
- **5500**: VNC Server
- **19226**: AdminSecure
- **264**: BGMP
- **1701**: L2TP
- **5554**: Sasser
- **19638**: Ensim
- **318**: TSP
- **1723**: MS PPTP
- **5631-5632**: pcAnywhere
- **20000**: Usermin
- **381-383**: HP Openview
- **1725**: Steam
- **5800**: VNC over HTTP
- **24800**: Synergy
- **389**: LDAP
- **1741**: CiscoWorks 2000
- **5900+**: VNC Server
- **25999**: Xfire
- **411-412**: Direct Connect
- **1755**: MS Media Server
- **6000-6001**: X11
- **27015**: Half-Life
- **443**: HTTP over SSL
- **1812-1813**: RADIUS
- **6112**: Battle.net
- **27374**: Sub7
- **445**: Microsoft DS
- **1863**: MSN
- **6129**: DameWare
- **31337**: Back Orifice
- **464**: Kerberos
- **1985**: Cisco HSRP
- **6257**: WinMX
- **33434+**: traceroute
- **465**: SMTP over SSL
- **2000**: Cisco SCCP
- **6346-6347**: Gnutella Legend
- **389**: LDAP
- **2002**: Cisco ACS
- **6500**: GameSpy Arcade Chat
- **497**: Retrospect
- **2049**: NFS
- **6566**: SANE Encrypted
- **500**: ISAKMP
- **2082-2083**: cPanel
- **6588**: AnalogX Gaming
- **512**: rexec
- **2100**: Oracle XDB
- **6665-6669**: IRC
- **513**: rlogin
- **2222**: DirectAdmin
- **6679/6697**: IRC over SSL
- **514**: syslog
- **2302**: Halo
- **6699**: Napster
- **515**: LPD/LPR
- **2483-2484**: Oracle DB
- **6881-6999**: BitTorrent
- **520**: RIP
- **2500**: Unknown
- **7000-7001**: RealServer
- **521**: RIPng (IPv6)
- **2501**: Unknown
- **7002-7003**: RealServer
- **540**: UUCP
- **2502**: Unknown
- **7004-7005**: RealServer

## IANA Port Assignments
Published at: [http://www.iana.org/assignments/port-numbers](http://www.iana.org/assignments/port-numbers)

By Jeremy Stretch v1.1

---

# Advanced Search Operators

### Site-Specific Search
- **Operator**: `site:`
- **Example**: `conference site:www.sans.org`
- **Description**: Searches for "conference" within the `www.sans.org` domain.

### Number Range Search
- **Operators**: `[#]â€¦[#]` or `numrange:`
- **Example**: `plasma television $1000...1500`
- **Description**: Searches for plasma televisions priced between $1000 and $1500.

### Date Range Search
- **Operator**: `date:`
- **Example**: `hockey date:3`
- **Description**: Searches for hockey references within the past 3 months.

### SafeSearch
- **Operator**: `safesearch:`
- **Example**: `safesearch: sex education`
- **Description**: Searches for sex education material without returning adult content.

### Link Search
- **Operator**: `link:`
- **Example**: `link:www.sans.org`
- **Description**: Finds pages that link to the `www.sans.org` website.

### Information About a Page
- **Operator**: `info:`
- **Example**: `info:www.sans.org`
- **Description**: Finds information about the `www.sans.org` website.

### Related Pages
- **Operator**: `related:`
- **Example**: `related:www.stanford.edu`
- **Description**: Finds websites related to the Stanford website.

### Title Search
- **Operator**: `intitle:`
- **Example**: `intitle:conference`
- **Description**: Finds pages with "conference" in the page title.

### URL Search
- **Operator**: `inurl:`
- **Example**: `inurl:conference`
- **Description**: Finds pages with "conference" in the URL.

### File Type Search
- **Operator**: `filetype:`
- **Example**: `filetype:ppt`
- **Description**: Finds files with the `.ppt` file extension (Microsoft PowerPoint files).

### Google Cache
- **Operator**: `cache:`
- **Example**: `cache:www.sans.org`
- **Description**: Shows the cached version of the `www.sans.org` page.

### Calculator
- **Operators**:
  - Addition: `+`
  - Subtraction: `-`
  - Multiplication: `*`
  - Division: `/`
  - Percentage: `% of`
  - Power: `^`

- **Examples**:
  - `45 + 39`
  - `45 - 39`
  - `45 * 39`
  - `45 / 39`
  - `45% of 39`
  - `2^5`

### Newsgroup Search
- **Operator**: `author:`
- **Example**: `author:Rick`
- **Description**: Finds all newsgroup postings with "Rick" in the author name or email address.

- **Operator**: `insubject:`
- **Example**: `insubject:Mac OS X`
- **Description**: Finds all newsgroup postings with "Mac OS X" in the subject.

### Stock Information
- **Operator**: `stock:`
- **Example**: `stock:AAPL`
- **Description**: Gets the stock information for Apple Inc.

### Definition
- **Operator**: `define:`
- **Example**: `define:sarcastic`
- **Description**: Gets the definition of the word "sarcastic."

---

# Scapy Basic Commands

### List Protocols and Functions
- **Command**: `ls()`
- **Description**: Lists all available protocols and protocol options.
- **Command**: `lsc()`
- **Description**: Lists all available Scapy command functions.

### Configuration
- **Command**: `conf`
- **Description**: Shows and sets Scapy configuration parameters.

### Constructing Packets
- **IP Address**:
  - **Explicit IP Address**: `IP(dst="192.0.2.1")`
  - **DNS Name**: `IP(dst="example.com")`
  - **IP Network**: `IP(dst="192.0.2.0/24")`
  - **Random IP Address**: `IP(dst=RandIP())`
  - **Random MAC Address**: `Ether(dst=RandMAC())`

- **Combining Layers**:
  - **Layer 3**: `ip = IP(src="10.0.0.1")`
  - **Layer 2**: `l2 = Ether() / ip`
  - **Layer 3 and Layer 4**: `l3 = IP() / TCP()`

- **Setting Fields**:
  - **TTL Range**: `IP(ttl=(1, 30))`
  - **Random ID**: `IP(id=RandInt())`

### Sending Packets
- **Layer 3**:
  - **Single Packet**: `send(IP(dst="192.0.2.1") / UDP(dport=53))`
- **Layer 2**:
  - **Single Packet**: `sendp(Ether() / IP(dst="192.0.2.1") / UDP(dport=53))`
  - **Fast Packet Transmission**: `sendpfast(pkt, pps=N, mbps=N, loop=0, iface=N)`

### Receiving Packets
- **Capture Packets**:
  - **Count**: `sniff(count=100, iface="eth0")`
  - **Loop**: `srloop(IP(dst="packetlife.net") / ICMP(), count=3)`

### Fuzzing
- **Randomize Fields**:
  - **ICMP Fuzzing**: `fuzz(ICMP()).show()`

---

# tcpdump Command Line Options

- **-A**: Print frame payload in ASCII
- **-c**: Exit after capturing count packets
- **-D**: List available interfaces
- **-e**: Print link-level headers
- **-F**: Use file as the filter expression
- **-G**: Rotate the dump file every n seconds
- **-i**: Specifies the capture interface
- **-K**: Don't verify TCP checksums
- **-L**: List data link types for the interface
- **-n**: Don't convert addresses to names
- **-p**: Don't capture in promiscuous mode
- **-q**: Quick output
- **-r**: Read packets from file
- **-s**: Capture up to len bytes per packet
- **-t**: Don't print timestamps
- **-v[v[v]]**: Print more verbose output
- **-w**: Write captured packets to file
- **-x**: Print frame payload in hex
- **-X**: Print frame payload in hex and ASCII
- **-y**: Specify the data link type
- **-Z**: Drop privileges from root to user

### Capture Filter Primitives
- **Host Match**: `[src|dst] host <hostname>`
- **Ethernet Host Match**: `ether [src|dst] host <hostname>`
- **Gateway Match**: `gateway host <hostname>`
- **Network Match**: `[src|dst] net <network>/<mask>`
- **Port Match**: `[tcp|udp] [src|dst] port <port>`
- **Port Range Match**: `[tcp|udp] [src|dst] portrange <start>-<end>`
- **Length Match**: `less <length>` or `greater <length>`
- **Protocol Match**: `(ether|ip|ip6) proto <protocol>`
- **Broadcast Match**: `(ether|ip) broadcast`
- **Multicast Match**: `(ether|ip|ip6) multicast`
- **802.11 Frame Type Match**: `type (mgt|ctl|data) [subtype <subtype>]`
- **VLAN Match**: `vlan <vlan_id>`
- **MPLS Match**: `mpls <label>`

### Protocol Modifiers
- **ARP, IPv6, SLIP, TCP, UDP, ICMP, etc.**
- **Negation**: `!` or `not`
- **Conjunction**: `&&` or `and`
- **Disjunction**: `||` or `or`

### Example Filters
- **UDP Not Bound for Port 53**: `udp dst port not 53`
- **Traffic Between Two Hosts**: `host 10.0.0.1 && host 10.0.0.2`
- **Packets to Either TCP Port 80 or 8080**: `tcp dst port 80 or 8080`

---

# Network Address Translation (NAT)

### Example Topology
- **Inside Local**: An actual address assigned to an inside host.
- **Inside Global**: An inside address seen from the outside.
- **Outside Global**: An actual address assigned to an outside host.
- **Outside Local**: An outside address seen from the inside.

### NAT Boundary Configuration
- **Inside Interface**:
  - **Interface**: `FastEthernet0`
  - **IP Address**: `10.0.0.1/16`
  - **NAT Configuration**: `ip nat inside`

- **Outside Interface**:
  - **Interface**: `FastEthernet1`
  - **IP Address**: `174.143.212.1/22`
  - **NAT Configuration**: `ip nat outside`

### Perspective
- **Local and Global Addresses**:
  - **Inside Local**: `10.0.0.1`
  - **Inside Global**: `174.143.212.1`
  - **Outside Local**: `174.143.212.1`
  - **Outside Global**: `10.0.0.1`

---

By Jeremy Stretch v2.0