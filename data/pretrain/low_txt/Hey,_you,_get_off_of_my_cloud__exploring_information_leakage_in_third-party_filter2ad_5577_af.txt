### Funding and Acknowledgments
This work was partially supported by a MURI grant administered by the Air Force Office of Scientific Research (AFOSR) under grant number 0088. The views and conclusions presented in this document are those of the authors and do not necessarily represent the official policies or endorsements, either expressed or implied, of AFRL, NSF, the U.S. Government, or any of its agencies.

### References
1. O. Acıiçmez, Ç. Kaya Koç, and J.P. Seifert. "On the Power of Simple Branch Prediction Analysis." IACR Cryptology ePrint Archive, Report 2006/351, 2006.
2. O. Acıiçmez, Ç. Kaya Koç, and J.P. Seifert. "Predicting Secret Keys via Branch Prediction." RSA Conference Cryptographers Track – CT-RSA '07, LNCS vol. 4377, pp. 225–242, Springer, 2007.
3. O. Acıiçmez. "Yet Another Microarchitectural Attack: Exploiting I-cache." IACR Cryptology ePrint Archive, Report 2007/164, 2007.
4. O. Acıiçmez and J.P. Seifert. "Cheap Hardware Parallelism Implies Cheap Security." Workshop on Fault Diagnosis and Tolerance in Cryptography – FDTC '07, pp. 80–91, IEEE, 2007.
5. Amazon Elastic Compute Cloud (EC2). Available at: <http://aws.amazon.com/ec2/>
6. Amazon Web Services. "Auto-scaling Amazon EC2 with Amazon SQS." Available at: <http://developer.amazonwebservices.com/connect/entry.jspa?externalID=1464>
7. Amazon Web Services. "Creating HIPAA-Compliant Medical Data Applications with Amazon Web Services." White paper, April 2009. Available at: <http://awsmedia.s3.amazonaws.com/AWS_HIPAA_Whitepaper_Final.pdf>
8. Amazon Web Services. "Customer Agreement." Available at: <http://aws.amazon.com/agreement/>
9. P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, R. Neugebauer, I. Pratt, and A. Warfield. "Xen and the Art of Virtualization." SOSP '03: Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, 2003.
10. D. Bernstein. "Cache-Timing Attacks on AES." Preprint available at: <http://cr.yp.to/papers.html#cachetiming>, 2005.
11. DentiSoft. Available at: <http://www.dentisoft.com/index.asp>
12. D. Grunwald and S. Ghiasi. "Microarchitectural Denial of Service: Insuring Microarchitectural Fairness." International Symposium on Microarchitecture – MICRO '02, pp. 409–418, IEEE, 2002.
13. D. Hyuk Woo and H.H. Lee. "Analyzing Performance Vulnerability Due to Resource Denial of Service Attack on Chip Multiprocessors." Workshop on Chip Multiprocessor Memory Systems and Interconnects, 2007.
14. W-H. Hu. "Reducing Timing Channels with Fuzzy Time." IEEE Symposium on Security and Privacy, pp. 8–20, 1991.
15. W-H. Hu. "Lattice Scheduling and Covert Channels." IEEE Symposium on Security and Privacy, 1992.
16. P. Karger and J. Wray. "Storage Channels in Disk Arm Optimization." IEEE Symposium on Security and Privacy, pp. 52–56, IEEE, 1991.
17. O. Kerr. "Cybercrime's Scope: Interpreting 'Access' and 'Authorization' in Computer Misuse Statutes." NYU Law Review, Vol. 78, No. 5, pp. 1596–1668, November 2003.
18. M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M.F. Kaashoek, E. Kohler, and R. Morris. "Information Flow Control for Standard OS Abstractions." ACM Symposium on Operating Systems Principles (SOSP), 2007.
19. M. Krohn and E. Tromer. "Non-Interference for a Practical DIFC-Based Operating System." IEEE Symposium on Security and Privacy, 2009.
20. Microsoft Azure Services Platform. Available at: <http://www.microsoft.com/azure/default.mspx>
21. T. Moscibroda and O. Mutlu. "Memory Performance Attacks: Denial of Memory Service in Multi-Core Systems." USENIX Security Symposium, pp. 257–274, 2007.
22. D.A. Osvik, A. Shamir, and E. Tromer. "Cache Attacks and Countermeasures: The Case of AES." RSA Conference Cryptographers Track (CT-RSA) 2006, 2006.
23. D. Page. "Theoretical Use of Cache Memory as a Cryptanalytic Side-Channel." Technical report CSTR-02-003, Department of Computer Science, University of Bristol, 2002. Available at: <http://www.cs.bris.ac.uk/Publications/pub_info.jsp?id=1000625>
24. D. Page. "Defending Against Cache-Based Side-Channel Attacks." Information Security Technical Report, vol. 8, issue 8, 2003.
25. D. Page. "Partitioned Cache Architecture as a Side-Channel Defence Mechanism." IACR Cryptology ePrint Archive, Report 2005/280, 2005.
26. C. Percival. "Cache Missing for Fun and Profit." BSDCan 2005, Ottawa, 2005.
27. Rackspace Mosso. Available at: <http://www.mosso.com/>
28. RightScale. Available at: <http://rightscale.com/>
29. rPath. Available at: <http://www.rpath.com>
30. scalr. Available at: <http://code.google.com/p/scalr/>
31. D. Song, D. Wagner, and X. Tian. "Timing Analysis of Keystrokes and SSH Timing Attacks." 10th USENIX Security Symposium, 2001.
32. E. Tromer, D.A. Osvik, and A. Shamir. "Efficient Cache Attacks on AES, and Countermeasures." Journal of Cryptology, available online, July 2009.
33. Xen 3.0 Interface Manual. Available at: <http://wiki.xensource.com/xenwiki/XenDocs>
34. N.B. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. "Making Information Flow Explicit in HiStar." Symposium on Operating Systems Design and Implementation (OSDI), 2006.

### Appendix

#### A. Legal, Ethical, and Contractual Obligations
Network probing is central to our study. While remote probing of Internet servers and devices is a common technique in both practice and research, it can be controversial. We aim to outline the key legal, ethical, and contractual considerations relevant to our work.

**Legal Obligations:**
In the United States, the primary statute governing interactions with computer systems is the Computer Fraud and Abuse Act (CFAA), which requires that access to computer systems must be authorized. The terms "authorization" and "access" are broadly defined and can be ambiguous. For more detailed information, see Kerr [17]. We are unaware of any case law specifically addressing network probing, but the Moulton v VC3 (2000) decision provides some guidance. This case established that port scanning, by itself, does not create a damages claim unless direct harm is shown.

**Ethical Considerations:**
We are sensitive to the ethical implications of perceived threats, especially when no greater good is achieved. Therefore, we restrict our network probes to publicly accessible services—TCP ports 80 (HTTP) and 443 (HTTPS). We assume that providing a publicly accessible service implies authorization for such access. Our probes only establish the presence of these services and, in some cases, download the public home page. We do not search for, discover, or expose vulnerabilities and respect any in-place access control mechanisms.

**Contractual Obligations:**
Our internal probes originate from within the Amazon EC2 service, subjecting them to Amazon’s terms of service [8]. Specifically, subsection 5.5.5 of the AWS Web Services Agreement states, "You may make network connections from Amazon EC2 hosted servers to other hosts only with the permission and authorization of the destination hosts and networks." While the term "authorization" remains somewhat ambiguous, the examples provided in the agreement clarify that unauthorized vulnerability scans and disruptive web crawling are prohibited. We interpret this to mean that connecting to web servers from within EC2 is implicitly authorized as long as it does not impair their function or attempt to discover vulnerabilities. We made no attempt to disrupt, impair, or acquire private information from any EC2 customer or client.

#### B. Instance Density and Placement
To understand the density and placement of instances within the EC2 address space, we conducted a TCP connect scan for ports 80 and 443, translating the results into a list of internal IP addresses using DNS lookups from within the cloud. This scan was separate from the one discussed in Section 5 but performed in the same manner.

We repeated the following process ten times:
1. Launched twenty "victim" instances.
2. These instances determined a lower-bound on the number of co-resident instances by checking the list of public servers.
3. Left the victim instances running while launching twenty additional probe instances.
4. Each probe checked if it was co-resident with one of the victims.

Figure 8 displays the results. The average (over 10 iterations) mean number of co-resident servers for the victims where a probe was co-resident was 1.2. The average mean number of co-resident servers for the victims where no probe was co-resident was 1.7. This suggests a slight bias towards assigning new instances to lightly loaded machines. We expect that with better measurement techniques, this bias would be even more evident, but we avoided methods that could violate Amazon’s Acceptable Use Policy (AUP).

| Iteration | Found (Count) | Found (Mean) | Missed (Count) | Missed (Mean) |
|----------|---------------|--------------|----------------|---------------|
| 1        | 18            | 1.22         | 2              | 1.75          |
| 2        | 16            | 1            | 4              | 1.33          |
| 3        | 17            | 1.18         | 3              | 1.75          |
| 4        | 8             | 1.13         | 12             | 1.5           |
| 5        | 18            | 1.44         | 2              | 1.63          |
| 6        | 12            | 1.33         | 8              | 1.66          |
| 7        | 17            | 1.29         | 3              | 1.66          |
| 8        | 11            | 0.91         | 9              | 1.75          |
| 9        | 16            | 1.31         | 4              | 2.25          |
| 10       | 16            | 1.18         | 4              | 1.75          |

**Figure 8:** Instance density averages for runs of 20 victim instances and then 20 probe instances, over 10 iterations. The 'count' columns specify the number of victims found (co-resident with) a probe or missed by the probes. The 'mean' columns report the average number of other instances running on the victim instances' physical machines (before the probes were launched).