### 2.3 Security Goals

A trivial solution that provides all of the above functionality would make all AR content public by default. However, interactions between multiple users may not always be positive. For example, a malicious or careless user might attempt to:

1. **Share unwanted or undesirable AR content with another user.** In Multi-Team Whiteboards, a user might plaster a wall with offensive messages. In Community Art, a user might violate another user’s personal space by attaching virtual objects as a practical joke. Such behavior has already been observed in shared VR settings [1, 66].

2. **Access private AR content belonging to another user.** For instance, in Multi-Team Whiteboards, a user might try to read another user’s private whiteboard.

3. **Perform unwanted manipulations on AR content created by or belonging to another user.** In Community Art or Multi-Team Whiteboards, a user might delete or vandalize another user’s virtual creations. This type of behavior has already been reported, such as vandalism of AR art in Snapchat [38].

To address these multi-user threats, we have developed the following security and privacy goals for an AR sharing module:

#### Control of Outbound Content
Sharing of AR content involves two parties: the originator of the content and the recipient. We decompose our security goals along this dimension, starting with control of outbound content, i.e., managing the permissions of other users to access shared content. The three canonical access control rights are "read," "write," and "execute." Extending "read" and "write" to the AR domain (and deferring "execute" to Section 7):

- **Support granting/revoking per-user permissions.** The multi-user AR platform should support setting edit and view permissions for different users. For example, a user of Paintball may wish to share a game session only among a specified friend group and retain full control of game administration even among the set of players.
  
- **Support granting/revoking per-object permissions.** A user of Community Art may wish to leave one piece of art publicly visible while working privately on another. Thus, regulating permissions at the granularity of the app is insufficient; object-level permissions must also be supported.

The consequence of these goals is that users in the same physical space may not share the same view of the virtual space. This contrasts with current technologies, where the physical presence of a device (e.g., a smartphone or a television) enables the user to signal to others that they are busy and establish a dedicated spatial region. The physicality of the device serves as a scaffold around which interpersonal norms have developed. For example, a person might avoid standing in front of a television when someone is watching it.

AR content lacks this physicality. In Multi-Team Whiteboards, a user looking at or interacting with a private whiteboard will appear to a nearby user as staring into or manipulating empty space. There is no mechanism for the user to exercise agency over their working space, and no way for other users to determine the distance or position of the content. This can lead to one user inadvertently standing in front of content that another user is interacting with. Prior work has shown that people can be uncomfortable with the presence of AR users due to not knowing what the AR user is doing [14, 35], and private content exacerbates this issue even between users of the same AR platform. The Meta developer guidelines [40] recommend building public-by-default content in accordance with human intuition about a shared physical world. Novice users in the same physical space may expect to see the same virtual content [35]. While social behaviors may adapt over time, we aim to address this physical-world disconnect in the near term for multiple AR users of compatible platforms. Specifically, we wish to achieve the above content privacy goals while partially supporting a shared-world physical intuition:

- **Support physically intuitive access control.** An app may wish to signal to a nearby user that another user is drawing on a whiteboard without revealing the content being drawn.

#### Control of Inbound Content
Next, we consider security properties from the perspective of the recipients of shared content. Since shared content can have serious implications for the receiver, such as spam that obscures important real-world information [34], we derive the following goals:

- **Support user control of incoming virtual content.** For example, users of Community Art may wish to filter content to only that which is age-appropriate or does not contain foul language.

- **Support user control of owned physical space.** In Community Art, a user may not want arbitrary other users to attach content to their heads without consent. A homeowner may wish to prevent house guests from placing virtual content inside private rooms, and the keepers of a public monument may not want the monument to be vandalized with virtual graffiti. Users may want control over their physical space even when they cannot see the object in question. For instance, an app may wish to prevent a virtual “kick me” sign from being attached to a user’s back. We focus on enforcing owned physical space but note that determining who controls a particular physical space is out of scope for our design (see Section 4.4 for further discussion).

### 2.4 Supporting Flexibility

In defining the above functionality and security goals, we observe that not all multi-user AR apps will have the same needs. For example, AR content that is shared with all users by default is suitable for some apps (e.g., Community Art) but not others (e.g., Multi-Team Whiteboards). Similarly, not all security and privacy goals are relevant in all cases. For instance, enforcing personal space for shared AR content may conflict with the functionality needs of Paintball, which requires that virtual paint stick to players upon a hit. Even in an app that is otherwise simple from a sharing control perspective, user needs may warrant added sharing control complexity. For example, an AR assistive technology object that transcribes spoken words for deaf users may be exempt from the app’s general rules for the enforcement of owned physical space so that it always remains visible to the deaf user who needs it.

Because the right sharing control model is app-specific, AR app developers will need the ability to implement multi-user features with their chosen model. To that end, we identify the need for a flexible AR sharing control module that can be leveraged by app developers. We envision this module as either an app-level library or an OS interface (i.e., set of APIs) that provides sharing control features. The advantage of an app-level library is that it does not require explicit changes to the platform. An app developer could create an app that runs on different AR platforms and, by including the platform-appropriate version of a library, support interactions among users with different types of AR devices. For example, although we prototype our design as an app-level library for HoloLens, in principle, it could be adapted for compatibility with Meta or Magic Leap apps.

### 3. Threat Model and Non-Goals

We aim to design a flexible module that helps app developers create multi-user AR apps that incorporate shared AR content while mitigating the risk of undesirable interactions between multiple users. We focus on the case of a developer building a single app and mediating the interactions of its multiple users, deferring cross-app communication to future work. We now present the threat model under which we develop our design in Section 4, as well as specify non-goals of this work.

#### Threat Model
Our primary focus in this work is on untrustworthy users. We aim to help app developers create multi-user AR apps that are resilient to security and privacy threats between multiple users of the same app. In this context, we assume that two or more users are using the same AR app, written by the same developer and incorporating our sharing module. We assume that users trust both the developers of the apps they install and their AR operating system, but may not trust each other. This trust dynamic is akin to traditional desktop environments, where two users of a Unix operating system might both trust the underlying system and installed apps but might not trust each other. A key difference is that in our model, we only consider sharing of content between users of the same app.

Under this threat model, we do not consider malicious apps that omit or misuse our sharing module. We explicitly trust app developers to incorporate our module (e.g., as an app-level library) into their apps. A malicious app developer might choose to simply not use our sharing module, implementing their own adversarially-motivated sharing functionality, or use our module but violate security or privacy properties through out-of-band means. Though a user may install malicious apps alongside legitimate ones that use our module, these malicious apps cannot interfere via our module: we consider (and our module supports) AR content sharing only among multiple users of the same app, rather than across apps. This is consistent with the capabilities of current AR technologies, which are either single-app or do not allow multiple concurrently running apps to communicate [33]. We also assume that all users are running legitimate, uncompromised versions of the app; strategies for verifying [36, 75] or enforcing [73, 74] this assumption are significant research challenges of their own.

Finally, we assume that communication between devices is secured with today’s best practices, e.g., end-to-end encrypted. Thus, we rule content eavesdropping and content modification attacks as out of scope. Current network best practices still suffer from denial-of-service attacks and traffic analysis attacks, but we do not aim to protect against such attacks in this work, focusing instead on the app-level security and privacy issues.

#### Non-Goals
We consider the following design questions to be non-goals of our present effort:

- **Non-goal: UI/UX design.** Although we propose underlying mechanisms for the sharing control needs of app logic, and although those mechanisms in some instances have implications for what developers are empowered to surface at the UI level, we do not aim to define exactly how those mechanisms should manifest to users in the specific interaction modality or look-and-feel of an app. Thus, we leave the design of specific interfaces — including how much of our module’s control should be surfaced directly to users versus shouldered by the app — to future efforts by researchers and app developers. Our work is similar in spirit to work on user interface toolkits (e.g., [25, 27]) in that our goal is to enable app developers to easily create and innovate on a range of user interfaces and experiences, rather than to design and iterate on these interfaces directly.

- **Non-goal: Network architecture design.** It remains an open question whether multi-user AR will ultimately be enabled by client-server, peer-to-peer, or other network architectures; we thus design our platform to be agnostic to network architecture. Additionally, we do not consider how two AR devices initially bootstrap communication; prior, complementary work considers how to securely pair two HoloLens devices [60].

- **Non-goal: App-specific choices about sharing control properties.** We do not aim to recommend to apps which sharing control properties and functionalities might make sense in the context of the app, instead enabling app developers to choose the appropriate subset of properties for their specific use cases.

- **Non-goal: Accurate spatial localization of AR users and content.** We do not aim to design a system by which the location of an AR user can be accurately and securely determined. Prior work has studied how to localize devices accurately [23, 31], how to verify location claims [10, 69], and how to verify co-location claims [21, 55]. We note that even without further sharing controls, future location-based AR apps will benefit from secure location and co-location verification methods. Thus, we consider this topic to be orthogonal and of independent interest.

### 4. Design

We now present the design of a module that AR developers can use to support secure and private sharing of AR content among multiple users. Compatible with our threat model of untrusted users but trusted developers, we envision this module as an app-level library or an OS interface.

#### 4.1 Module Design Overview

To illustrate the relationships between the OS, the sharing control module, the app, and multiple users, we begin by walking through a simple case of Alice creating two objects and sharing one with Bob (Figure 2).

1. **Precondition:** Alice and Bob are both running an app that incorporates the sharing module and, as such, already have an open communications channel between their devices.

2. **Object creation:** Alice creates two AR objects, a small blue box and a large green box. Her app calls the sharing module’s `InstantiateShared()` API for both objects, allowing the module to track permissions at the granularity of those objects (in this case, beginning with view and edit permissions for only Alice).

3. **Outbound sharing (app-level):** Through some user interface provided by the app, Alice chooses to share the green box with Bob.

4. **Outbound sharing (module-level):** On Alice’s device, the app calls the sharing module’s `SetPermission()` API. As a result, the module updates its internal permission map, adding Bob to the list of users with view permissions for the green box.

5. **Communication:** The sharing module sends a message (via the device’s OS and networking stack) containing object content and metadata to Bob’s device, whose OS and networking stack dispatch it to the sharing module in Bob’s instance of the app.

6. **Inbound sharing (module-level):** The sharing module surfaces a `SetPermission` event to Bob’s app.

7. **Inbound sharing (app-level):** On Bob’s device, the app shows some user interface to allow Bob to accept or deny the shared object. (Other apps may skip this step and show the object to Bob automatically, and/or respect Bob’s previously-set preferences for shared objects from Alice.) Bob chooses to accept the shared object from Alice; the app updates his view of the world to include the green box.

8. **State update and communication:** The app calls the sharing module’s `AcceptObject()` API, which in turn transmits that message back to Alice’s device.

Following this transaction, Bob can now see a shared copy of Alice’s green box and, depending on the sharing settings, can manipulate that box in ways that are also visible to Alice.

This sharing flow might seem simple: the sharing control module provides APIs that help an app keep track of which users can access which AR objects — i.e., view and edit permissions — and syncs this information across the devices of all users of the app. However, as discussed in Section 2, sharing in the AR context requires thoughtful consideration, particularly in the face of users’ expectations of and interactions within the physical world.

#### Key Design Challenges

While striving to achieve the functionality and security goals identified in Section 2, our design space exploration surfaced several key questions that do not arise for sharing and access control in traditional systems (e.g., file systems). These challenges are deeply connected with AR’s integration with the physical world, and although they do not on the surface appear to be security-centered questions, they affect the security and privacy mechanisms we design, and so we must address them:

- **Integration of shared AR objects with the physical world (Section 4.2):** How is a shared object integrated into the physical world, and how do we ensure that it aligns with users' expectations and interactions?