### References

1. **Cloud Market Will More Than Triple by 2014, Reaching $100 Billion**  
   Source: [http://www.msptoday.com/topics/msp-today/articles/364312-cloud-market-will-more-than-triple-2014-reaching.htm](http://www.msptoday.com/topics/msp-today/articles/364312-cloud-market-will-more-than-triple-2014-reaching.htm) (2013).

2. **JPBC: Java Pairing-Based Cryptography Library**  
   Source: [http://gas.dia.unisa.it/projects/jpbc/#.U3HBFfna5cY](http://gas.dia.unisa.it/projects/jpbc/#.U3HBFfna5cY) (2013).

3. **Bitcoin as a Public Source of Randomness**  
   Source: [https://docs.google.com/presentation/d/1VWHm4Moza2znhXSOJ8FacfNK2B_vxnfbdZgC5EpeXFE/view?pli=1#slide=id.g3934beb89_034](https://docs.google.com/presentation/d/1VWHm4Moza2znhXSOJ8FacfNK2B_vxnfbdZgC5EpeXFE/view?pli=1#slide=id.g3934beb89_034) (2014).

4. **These Are the Cheapest Cloud Storage Providers Right Now**  
   Source: [http://qz.com/256824/these-are-the-cheapest-cloud-storage-providers-right-now/](http://qz.com/256824/these-are-the-cheapest-cloud-storage-providers-right-now/) (2014).

5. **F. Armknecht, J. Bohli, G. O. Karame, Z. Liu, and C. A. Reuter.**  
   "Outsourced Proofs of Retrievability."  
   In *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*, Scottsdale, AZ, USA, November 3-7, 2014, pages 831–843.

6. **G. Ateniese, R. C. Burns, R. Curtmola, J. Herring, L. Kissner, Z. N. J. Peterson, and D. X. Song.**  
   "Provable Data Possession at Untrusted Stores."  
   In *ACM Conference on Computer and Communications Security*, pages 598–609, 2007.

7. **N. Baric and B. Pfitzmann.**  
   "Collision-Free Accumulators and Fail-Stop Signature Schemes Without Trees."  
   In *EUROCRYPT '97*, volume 1233 of *Lecture Notes in Computer Science*, pages 480–494. Springer, 1997.

8. **M. Bellare and S. Keelveedhi.**  
   "Interactive Message-Locked Encryption and Secure Deduplication."  
   In *Public-Key Cryptography - PKC 2015 - 18th IACR International Conference on Practice and Theory in Public-Key Cryptography*, Gaithersburg, MD, USA, March 30 - April 1, 2015, Proceedings, volume 9020 of *Lecture Notes in Computer Science*, pages 516–538. Springer, 2015.

9. **M. Bellare, S. Keelveedhi, and T. Ristenpart.**  
   "DupLESS: Server-Aided Encryption for Deduplicated Storage."  
   In *Proceedings of the 22nd USENIX Conference on Security*, SEC’13, pages 179–194, Berkeley, CA, USA, 2013. USENIX Association.

10. **M. Bellare, S. Keelveedhi, and T. Ristenpart.**  
    "Message-Locked Encryption and Secure Deduplication."  
    In *Advances in Cryptology - EUROCRYPT 2013, 32nd Annual International Conference on the Theory and Applications of Cryptographic Techniques*, Athens, Greece, May 26-30, 2013, Proceedings, volume 7881 of *Lecture Notes in Computer Science*, pages 296–312. Springer, 2013.

11. **J. Blasco, R. Di Pietro, A. Orfila, and A. Sorniotti.**  
    "A Tunable Proof of Ownership Scheme for Deduplication Using Bloom Filters."  
    In *IEEE Conference on Communications and Network Security (CNS)*, pages 481–489, October 2014.

12. **A. Boldyreva.**  
    "Efficient Threshold Signature, Multisignature, and Blind Signature Schemes Based on the Gap-Diffie-Hellman-Group Signature Scheme."  
    2002.

13. **D. Boneh, B. Lynn, and H. Shacham.**  
    "Short Signatures from the Weil Pairing."  
    *Journal of Cryptology*, 17(4):297–319, 2004.

14. **Brent Boyer.**  
    "Robust Java Benchmarking."  
    Source: [http://www.ibm.com/developerworks/library/j-benchmark2/j-benchmark2-pdf.pdf](http://www.ibm.com/developerworks/library/j-benchmark2/j-benchmark2-pdf.pdf).

15. **A. Buldas, P. Laud, and H. Lipmaa.**  
    "Eliminating Counterevidence with Applications to Accountable Certificate Management."  
    *Journal of Computer Security*, 10(3):273–296, 2002.

16. **J. Camenisch and A. Lysyanskaya.**  
    "Dynamic Accumulators and Application to Efficient Revocation of Anonymous Credentials."  
    In *Advances in Cryptology - CRYPTO 2002*, pages 61–76. Springer, 2002.

17. **I. Damgård and N. Triandopoulos.**  
    "Supporting Non-Membership Proofs with Bilinear-Map Accumulators."  
    *IACR Cryptology ePrint Archive*, 2008:538, 2008.

18. **R. Di Pietro and A. Sorniotti.**  
    "Boosting Efficiency and Security in Proof of Ownership for Deduplication."  
    In *Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security (ASIACCS '12)*, pages 81–82, New York, NY, USA, 2012. ACM.

19. **D. Dobre, G. Karame, W. Li, M. Majuntke, N. Suri, and M. Vukolic.**  
    "PowerStore: Proofs of Writing for Efficient and Robust Storage."  
    In *Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (CCS '13)*, pages 285–298, New York, NY, USA, 2013. ACM.

20. **J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer.**  
    "Reclaiming Space from Duplicate Files in a Serverless Distributed File System."  
    In *ICDCS*, pages 617–624, 2002.

21. **A. Fiat and A. Shamir.**  
    "How to Prove Yourself: Practical Solutions to Identification and Signature Problems."  
    In *Proceedings on Advances in Cryptology—CRYPTO '86*, pages 186–194, London, UK, 1987. Springer-Verlag.

22. **S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg.**  
    "Proofs of Ownership in Remote Storage Systems."  
    In *Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS '11)*, pages 491–500, New York, NY, USA, 2011. ACM.

23. **D. Harnik, B. Pinkas, and A. Shulman-Peleg.**  
    "Side Channels in Cloud Services: Deduplication in Cloud Storage."  
    *IEEE Security & Privacy*, 8(6):40–47, 2010.

24. **G. O. Karame, E. Androulaki, and S. Capkun.**  
    "Double-Spending Fast Payments in Bitcoin."  
    In *Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS '12)*, pages 906–917, New York, NY, USA, 2012. ACM.

25. **A. Kate, G. M. Zaverucha, and I. Goldberg.**  
    "Constant-Size Commitments to Polynomials and Their Applications."  
    In *Advances in Cryptology-ASIACRYPT 2010*, pages 177–194. Springer, 2010.

26. **S. Keelveedhi, M. Bellare, and T. Ristenpart.**  
    "DupLESS: Server-Aided Encryption for Deduplicated Storage."  
    In *Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13)*, pages 179–194, Washington, D.C., 2013. USENIX.

27. **J. Li, N. Li, and R. Xue.**  
    "Universal Accumulators with Efficient Non-Membership Proofs."  
    In *Applied Cryptography and Network Security, 5th International Conference (ACNS 2007)*, Zhuhai, China, June 5-8, 2007, Proceedings, pages 253–269, 2007.

28. **H. Lipmaa.**  
    "Secure Accumulators from Euclidean Rings without Trusted Setup."  
    In *Applied Cryptography and Network Security - 10th International Conference (ACNS 2012)*, Singapore, June 26-29, 2012, Proceedings, pages 224–240, 2012.

29. **S. Liu, X. Huang, H. Fu, and G. Yang.**  
    "Understanding Data Characteristics and Access Patterns in a Cloud Storage System."  
    In *13th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing (CCGrid 2013)*, Delft, Netherlands, May 13-16, 2013, pages 327–334, 2013.

30. **D. T. Meyer and W. J. Bolosky.**  
    "A Study of Practical Deduplication."  
    In *Proceedings of the 9th USENIX Conference on File and Storage Technologies (FAST '11)*, pages 1–1, Berkeley, CA, USA, 2011. USENIX Association.

31. **D. T. Meyer and W. J. Bolosky.**  
    "A Study of Practical Deduplication."  
    *Transactions on Storage*, 7(4):14:1–14:20, February 2012.

32. **S. Micali, M. Rabin, and J. Kilian.**  
    "Zero-Knowledge Sets."  
    In *Foundations of Computer Science, 2003. Proceedings. 44th Annual IEEE Symposium on*, pages 80–91. IEEE, 2003.

33. **NetEm.**  
    "NetEm, Website."  
    Available online at [http://www.linuxfoundation.org/collaborate/workgroups/networking/netem](http://www.linuxfoundation.org/collaborate/workgroups/networking/netem), 2009. The Linux Foundation.

34. **L. Nguyen.**  
    "Accumulators from Bilinear Pairings and Applications."  
    In *Topics in Cryptology - CT-RSA 2005, The Cryptographers’ Track at the RSA Conference 2005*, San Francisco, CA, USA, February 14-18, 2005, Proceedings, pages 275–292, 2005.

35. **H. Shacham and B. Waters.**  
    "Compact Proofs of Retrievability."  
    In *ASIACRYPT*, pages 90–107, 2008.

36. **C. Soriente, G. O. Karame, H. Ritzdorf, S. Marinovic, and S. Capkun.**  
    "Commune: Shared Ownership in an Agnostic Cloud."  
    In *Proceedings of the 20th ACM Symposium on Access Control Models and Technologies*, Vienna, Austria, June 1-3, 2015, pages 39–50, 2015.

37. **J. Stanek, A. Sorniotti, E. Androulaki, and L. Kencl.**  
    "A Secure Data Deduplication Scheme for Cloud Storage."  
    In *Financial Cryptography and Data Security - 18th International Conference (FC 2014)*, Christ Church, Barbados, March 3-7, 2014, Revised Selected Papers, pages 99–118, 2014.

38. **M. van Dijk, A. Juels, A. Oprea, R. L. Rivest, E. Stefanov, and N. Triandopoulos.**  
    "Hourglass Schemes: How to Prove that Cloud Files are Encrypted."  
    In *Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS '12)*, pages 265–280, New York, NY, USA, 2012. ACM.

39. **J. Xu, E.-C. Chang, and J. Zhou.**  
    "Weak Leakage-Resilient Client-Side Deduplication of Encrypted Data in Cloud Storage."  
    In *Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security (ASIA CCS '13)*, pages 195–206, New York, NY, USA, 2013. ACM.

### Appendix

#### A. Security Analysis of CARDIAC

In this section, we analyze the security of CARDIAC. Given a set \( X \), the accumulated digest for the set is \( \delta \leftarrow \text{Acc}(X) \). Recall that \( \delta = H(a_{\ell,0}, \ell) \) (with \( H \) being a cryptographically secure hash function) acts as a commitment to the root \( a_{\ell,0} \) and the height \( \ell \) of a Merkle tree. For our analysis, we distinguish between two security goals:
1. Proving membership using `ProveM` and `VerifyM`.
2. Proving an upper bound on \( |X| \) using `ProveC` and `VerifyC`.

Since the security of Merkle trees is well understood with respect to the first goal [20], we focus on analyzing the second goal.

The value \( \ell \) is verified indirectly using the length of the sibling path, and assuming the hash function is secure, CARDIAC ensures that the Merkle tree can encode at most \( 2^\ell \) elements. `ProveC` outputs the sibling path of the last set element \( a_{0,|X|-1} \). The verification algorithm `VerifyC` requires checking the values of all open nodes in the sibling path. Open nodes are those that depend only on the zero leaves and thus represent publicly known values. This verification step constitutes membership proofs for every single zero leaf \( a_{0,j} \) for \( j = |X|, \ldots, 2^\ell - 1 \). Consequently, this ensures that at least \( 2^\ell - |X| \) leaves of the tree are zero. Therefore, at most \( |X| \) leaves can be non-zero, providing an upper bound on \( |X| \). The proof assumes that further leaves located to the left of the last non-zero element are not set to zero. This assumption is safe because the prover has no incentive to place more zero-leaves, as it would mean fewer users are registered than claimed, leading to underpayment.

#### B. PoW Based on [24]

In Figure 6, we detail the Proof of Ownership (PoW) protocol due to Halevi et al. [27]. The protocol consists of three phases:
1. **Reduction Phase**: The file \( f \) is reduced into a buffer with a maximum size of 64 MB.
2. **Mixing Phase**: The contents of the buffer are pseudo-randomly mixed.
3. **Tree Construction**: A Merkle tree is computed using the blocks of the buffer as the leaves.

The first two phases can be seen as applying a linear code to the file, outputting a buffer \( \text{Buf}(f) \). To verify a PoW, the verifier asks for the sibling paths of a random number of leaves from \( \text{Buf}(f) \) and checks that the authentication path matches the root of the Merkle tree.

The buffer is an encoding of the file with a random linear code. The code is generated using SHA-256 to generate an array of pointers `ptr`. Due to the collision resistance of the hash function, any modification of the file will lead to a different code. Assuming the code has a minimum distance of \( L/3 \), where \( L \) is the number of blocks in the buffer, any two valid buffers will differ in at least \( L/3 \) positions. Thus, the prover will succeed with a probability of \( (2/3)^t \) in answering \( t \) challenges without knowing the correct buffer. For example, when \( t = 20 \) challenges are made, the probability of success is at most \( 2^{-12} \). Without knowing the file in its entirety, two different random codes are derived in the first two steps due to the collision-resistance of the deployed hash function. It is highly unlikely that any block in the buffer can be predicted. For more details on the security of this construct, see [27].

**Input**: A file \( f \) of length \( M \) bits, broken into \( m = \lceil M / 512 \rceil \) blocks of 512 bits each.

**Initialize Positions**:
- Compute bit-length \( \ell = \min\{20, \lceil \log_2 m \rceil\} \), being close to \( M \), but at most 64 MB, i.e., \( 2^{20} \) blocks with 512 bits.
- Initialize the buffer `Buf` with \( 2^\ell \) blocks of 512 bits.
- Initialize a table `ptr` of \( m \) rows and 4 columns of \( \ell \) bits, which holds pointers into the buffer `Buf`. A temporary value `IV` will be initialized with `SHA-256`'s IV.

**Reduction Phase**:
For each \( i \in [m] \):
- Update `IV := SHA-256(IV; File[i])`, where `File[i]` denotes the \( i \)-th block of the file.
- Initialize `ptr[i] = trunc4ℓ(IV)` with `IV` truncated to \( 4\ell \) bits.

**Mixing Phase**:
Repeat 5 times:
1. Update `IV := SHA-256(IV; File[i])`.
2. For \( j = 0 : 3 \):
   - Block = Cyclic Shift of `File[i]` by \( j \times 128 \) bits
   - XOR Block into location `ptr[i][j]` in `Buf`

**Tree Construction**:
- The final buffer content is denoted by `Buf(f)`.
- Construct a Merkle tree using the blocks of `Buf(f)` as the leaves.

**Figure 6: Detailed PoW Protocol of [27]**