### Snort Signature Analysis and Evasion Attacks

**Snort Signature 1002:**
```plaintext
alert tcp $EXTERNAL_NET any -> $HTTP_SERVERS $HTTP_PORTS
(msg:"WEB-IIS cmd.exe access";
flow:to_server,established;
uricontent:"cmd.exe"; nocase;
classtype:web-application-attack; sid:1002; rev:7;)
```
Figure 7. Snort signature 1002 from Snort 2.4.5.

**Summary of Identified Signatures:**
We have identified four signatures, S1002, S1537, S1455, and S882, with the following relationships:
- S1537 ⊂ S1455 ⊂ S882
- S1002 ∩ S1537

If a traffic trace satisfies both S1002 and S1537, Snort 2.4.5 (using its default configuration) will generate three out of the four possible messages, leading to a potential evasion attack.

**Experiment and Observations:**
We conducted an experiment using a traffic trace that meets the constraints of both S1002 and S1537. The trace included a proper TCP handshake on port 80, followed by a packet in the same session containing the string:
```plaintext
/scripts/..%c0%af../winnt/system32/cmd.exe?/c+dir+c:\+type+%22/calendar_admin.pl%22
```

Snort generated IDS events for S1537, S1455, and S882, but not for S1002. This is because, in the default configuration, IDS events are ordered in the event queue based on the length of the string in their content plugins. Since S1002 has the shortest string, its corresponding IDS event is not logged.

**Nature of the Attack:**
This is a real attack, not a synthetic one. The selected string exploits vulnerability BID 1806 against Microsoft IIS Server versions 4.0 and 5.0 on Windows 2000. The vulnerability allows an attacker to execute commands on the target system. In this case, the string enables the attacker to use the `cmd` command to execute `dir` on the C: drive and `type` to display the contents of `calendar_admin.pl`, which serves as a decoy to hide the `dir` command.

We tested this attack against a vulnerable Windows 2000 system, and it was successful. Snort did not log the IDS event for S1002, which was the intent of the attack.

**Discussion:**
Whether or not Snort developers intended to have overlapping signatures, it is crucial to quantify and understand the implications of such overlaps in large signature databases. Overlapping signatures can lead to evasion attacks and reduce the accuracy of the IDS.

**Impact of Signature Overlaps:**
- **Equalities:** These have limited impact on IDS accuracy but can cause confusion for network administrators.
- **Inclusions:** These have a more significant impact, especially when the inclusion chain contains orthogonal signatures.

Overlapping signatures make it easier for attackers to exploit the log limit. For Snort 2.4.5, an attacker only needs to identify one orthogonal signature with the first signature of an inclusion chain to prevent the logging of targeted IDS events.

**Future Work:**
Further work is needed to analyze and address signature overlaps systematically. This could involve revisiting the signature database to reduce the number of inclusions, equalities, and intersections.

### Related Work

The network security community recognizes four complementary techniques for evaluating IDS technologies:
- Network traffic from emulated or real networks
- Traffic captured from Honeypots
- Vulnerability Exploitation Programs (VEPs)
- IDS Stimulators

While these techniques can identify detection problems, they are not suitable for analyzing signature overlaps. A dedicated approach, such as the one we propose, is necessary for systematic analysis.

Our automaton and set theory approach, supported by a tool infrastructure, differs from previous verification techniques by allowing the analysis of all signatures for overlapping problems. This approach was first presented in our IDS-SSA method [17] and later in [18], though the latter focused on managing the signature database rather than security implications.

### Conclusion

In this paper, we presented a systematic approach to quantify the signature overlapping problem in IDSs. We defined the problem as the equality, inclusion, or intersection of sets of packets that trigger different signatures. Our approach transforms IDS signatures into sets and finite state automata, enabling the use of set theory and automaton theory operators to identify overlaps.

We analyzed several Snort signature databases and showed that even with an increase in the number of signatures, there is a small reduction in overlapping signatures. High log limit values can lead to more effective squealing attacks and performance issues. We demonstrated that overlapping signatures can prevent Snort from detecting attacks and provided evidence of a real, successful attack that was not detected by the IDS.

Future work will focus on the computationally intensive task of analyzing signature intersections and finding ways to discriminate between intentional and unintentional overlaps. We also plan to apply our approach to other IDSs, such as Bro, and compare the space covered by signatures identifying the same attacks.

### References

[1] G. Vigna and R. A. Kemmerer, “NetSTAT: A Network-Based Intrusion Detection Approach,” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 1998, pp. 25–34.

[2] F. Massicotte, F. Gagnon, Y. Labiche, M. Couture, and L. Briand, “Automatic Evaluation of Intrusion Detection Systems,” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2006, pp. 361–370.

[3] F. Massicotte and Y. Labiche, “Specification-Based Testing of Intrusion Detection Engines using Logical Expression Testing Criteria,” in Proceedings of the International Conference on Quality Software (QSIC), 2010.

[4] J. Beale, A. Baker, and J. Esler, Snort IDS and IPS toolkit, B. Caswell, Ed. Syngress Publishing, 2007.

[5] S. Patton, W. Yurcik, and D. Doss, “An Achilles’ Heel in Signature-Based IDS: Squealing False Positives in Snort,” in Proceedings of Recent Advances in Intrusion Detection (RAID), 2001.

[6] D. Mutz, G. Vigna, and R. A. Kemmerer, “An Experience Developing an IDS Stimulator for the Black-Box Testing of Network Intrusion Detection Systems,” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2003, pp. 374–383.

[7] J. E. Hopcroft, R. Motwani, and J. D. Ullman, Introduction to Automata Theory, Languages, and Computation (3rd Edition). Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc., 2006.

[8] V. Paxson, “Bro: A System for Detecting Network Intruders in Real-Time,” Computer Networks, vol. 31, no. 23–24, pp. 2435–2463, 1999.

[9] J. Aussibal, P. Borgnat, Y. Labit, G. Dewaele, N. Larrieu, L. Gallon, P. Owezarski, P. Abry, and K. Boudaoud, “Base de traces d’anomalies l´egitimes et ill´egitimes,” in Proceedings of the Conference on Security in Network Architectures and Information Systems (SAR-SSI), 2007.

[10] R. Lippmann, D. Fried, I. Graf, J. Haines, K. Kendall, D. McClung, D. Weber, S. Webster, D. Wyschogrod, R. Cunningham, and M. Zissman, “Evaluating Intrusion Detection Systems: The 1998 DARPA Off-line Intrusion Detection Evaluation,” in Proceedings of the DARPA Information Survivability Conference and Exposition (DISCEX), 2000.

[11] R. Lippmann, J. W. Haines, D. J. Fried, J. Korba, and K. Das, “The 1999 DARPA Off-line Intrusion Detection Evaluation,” Computer Networks, vol. 34, no. 4, pp. 579–595, 2000.

[12] D. Moore, C. Shannon, D. J. Brown, G. M. Voelker, and S. Savage, “Inferring Internet Denial-of-Service Activity,” ACM Transactions on Computer Systems, vol. 24, no. 2, pp. 115–139, 2006.

[13] J. Zhou, A. J. Carlson, and M. Bishop, “Verify Results of Network Intrusion Alerts Using Lightweight Protocol Analysis.” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2005, pp. 117–126.

[14] H. Debar and B. Morin, “Evaluation of the Diagnostic Capabilities of Commercial Intrusion Detection Systems,” in Proceedings of the Recent Advances in Intrusion Detection (RAID), 2002.

[15] L. M. Rossey, R. K. Cunningham, D. J. Fried, J. C. Rabek, R. P. Lippmann, J. W. Haines, and M. A. Zissman, “LARIAT: Lincoln Adaptable Real-time Information Assurance Testbed,” IEEE Aerospace Conference Proceedings, 2002.

[16] G. Vigna, W. Robertson, and D. Balzarotti, “Testing Network-Based Intrusion Detection Signatures using Mutant Exploits,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2004, pp. 21–30.

[17] F. Massicotte, “Packet Space Analysis of Intrusion Detection Signatures,” in Proceedings of the Recent Advances in Intrusion Detection Poster Session (RAID), 2009.

[18] N. Stakhanova and A. A. Ghorbani, “Managing intrusion detection rule sets,” in Proceedings of the Third European Workshop on System Security, ser. EUROSEC ’10. New York, NY, USA: ACM, 2010, pp. 29–35. [Online]. Available: http://doi.acm.org/10.1145/1752046.1752051