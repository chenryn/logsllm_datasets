### Forwarding Remaining Updates and Submitting the Update-Forward Transaction

The system forwards all remaining updates (from the previously isolated user) to the real database and submits an Update-Forward transaction to the Mediator. A key challenge for the Merger is enabling multiple users to be simultaneously isolated while managing the impact of one merging on other isolated histories. To address this, the Merger implements the following strategies:

1. **Trustworthy Transactions Handling:**
   - For simplicity, the Merger does not back out trustworthy transactions during a merge. Although this approach may increase back-out costs, it eliminates the need to check the impact of back-out trustworthy transactions on each still-isolated history. This avoids the additional cost of backing out affected isolated transactions.

2. **Merged History Maintenance:**
   - After a merge, if there are still isolated users, the merged history is maintained. This allows for subsequent merges to be based on the updated merged history. The merged history can be represented as a dependency graph [2].

3. **Discarding Merged History:**
   - If no users remain isolated after a merge, the maintained merged history is discarded. When a new user is isolated, the part of the trustworthy history that will participate in further merges is respecified. This respecification only includes trustworthy transactions that commit after the user's isolation, significantly reducing the processing load on the Merger for future merges.

### On-the-Fly Isolation Controller

Merging can take some time, and disallowing all user transactions during this period can cause significant denial-of-service issues. However, allowing unrestricted execution of user transactions during merging can compromise the correctness of the process. To ensure the correctness of merging, the On-the-Fly Isolation Controller (OIC) operates as follows:

- **Innocent User Notification:**
  - When the Intrusion Detector determines that an isolated user is innocent, it sends an INNOCENT message to the SRR, which then forwards it to the OIC.
  - Upon receiving an INNOCENT message, the OIC locks every suspicious table created for the user and the corresponding tables.

### Performance Considerations

DAIS (Data Attack Isolation System) is designed to minimize delays for trustworthy transactions. While the Mediator introduces some delay for every transaction, this is unavoidable due to the need for mediation or proxying for damage assessment and repair. DAIS can be optimized in the following ways to improve performance:

1. **Accurate Read Set Extraction:**
   - Although extracting reads from transaction profiles is efficient, it can sometimes result in approximate read sets, leading to the mistaken back-out of innocent transactions. To reduce such errors, the Mediator can inform the Read Extractor about the results of specific SQL statements, providing more accurate read sets.

2. **Optimizing SQL Statement Execution:**
   - For SQL statements that access records in the real database, Algorithm 1 can introduce significant extra costs. To mitigate this, the algorithm can be optimized: for a suspicious SQL statement, check if the intersection of its intended reads on the real and suspicious tables is empty. If so, the statement can be executed directly on the real table without compromising correctness.

### Conclusion

This paper presents DAIS, a practical real-time data attack isolation system for intrusion-tolerant commercial database applications. By transparently isolating suspicious transactions, DAIS allows for the surveillance of suspicious activities without risking further harm to the system or causing denial-of-service to benign transactions. Built on Oracle Server 8.1.6, DAIS uses triggers and transaction profiles to track data items read and written by transactions, isolating attacks through the rewriting and redirection of user SQL statements. Compared to fishbowling, DAIS consumes fewer resources and is the first tool to offer real-time, cost-effective data attack isolation for commercial database applications.

### Future Work

Future work for DAIS includes:
- **Enhanced Interaction with SSO:**
  - Adding a module to provide more interaction between the SSO and DAIS, such as displaying isolated users and their transaction executions.
- **Security Enhancements:**
  - Addressing the security of DAIS, as successful attacks can lead to the isolation of benign users, the evasion of malicious users, and incorrect merging, jeopardizing database consistency.

### References

[1] M. R. Adam. Security-Control Methods for Statistical Database: A Comparative Study. ACM Computing Surveys, 21(4), 1989.
[2] P. Ammann, S. Jajodia, and P. Liu. Recovery from Malicious Transactions. IEEE Transactions on Knowledge and Data Engineering, 2001. To appear.
[3] V. Atluri, S. Jajodia, and B. George. Multilevel Secure Transaction Processing. Kluwer Academic Publishers, 1999.
[4] D. Barbara, R. Goel, and S. Jajodia. Using Checksums to Detect Data Corruption. In Proceedings of the 2000 International Conference on Extending Data Base Technology, Mar 2000.
[5] P. A. Bernstein, V. Hadzilacos, and N. Goodman. Concurrency Control and Recovery in Database Systems. Addison-Wesley, Reading, MA, 1987.
[6] S. B. Davidson. Optimism and Consistency in Partitioned Distributed Database Systems. ACM Transactions on Database Systems, 9(3):456–581, September 1984.
[7] D.E. Denning. An Intrusion-Detection Model. IEEE Trans. on Software Engineering, SE-13:222–232, February 1987.
[8] T.D. Garvey and T.F. Lunt. Model-Based Intrusion Detection. In Proceedings of the 14th National Computer Security Conference, Baltimore, MD, October 1991.
[9] P. P. Griffiths and B. W. Wade. An Authorization Mechanism for a Relational Database System. ACM Transactions on Database Systems, 1(3):242–255, September 1976.
[10] P. Helman and G. Liepins. Statistical Foundations of Audit Trail Analysis for the Detection of Computer Misuse. IEEE Transactions on Software Engineering, 19(9):886–901, 1993.
[11] K. Ilgun. Ustat: A Real-Time Intrusion Detection System for Unix. In Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 1993.
[12] K. Ilgun, R.A. Kemmerer, and P.A. Porras. State Transition Analysis: A Rule-Based Intrusion Detection Approach. IEEE Transactions on Software Engineering, 21(3):181–199, 1995.
[13] R. Jagannathan and T. Lunt. System Design Document: Next Generation Intrusion Detection Expert System (NIDES). Technical report, SRI International, Menlo Park, California, 1993.
[14] S. Jajodia, P. Samarati, V. S. Subrahmanian, and E. Bertino. A Unified Framework for Enforcing Multiple Access Control Policies. In Proceedings of ACM SIGMOD International Conference on Management of Data, pages 474–485, May 1997.
[15] H. S. Javitz and A. Valdes. The SRI IDES Statistical Anomaly Detector. In Proceedings IEEE Computer Society Symposium on Security and Privacy, Oakland, CA, May 1991.
[16] H. S. Javitz and A. Valdes. The NIDES Statistical Component Description and Justification. Technical Report A010, SRI International, March 1994.
[17] T. Lane and C.E. Brodley. Temporal Sequence Learning and Data Reduction for Anomaly Detection. In Proc. 5th ACM Conference on Computer and Communications Security, San Francisco, CA, Nov 1998.
[18] Wenke Lee, Sal Stolfo, and Kui Mok. A Data Mining Framework for Building Intrusion Detection Models. In Proc. 1999 IEEE Symposium on Security and Privacy, Oakland, CA, May 1999.
[19] P. Liu, S. Jajodia, and C.D. McCollum. Intrusion Confinement by Isolation in Information Systems. Journal of Computer Security, 8(4):243–279, 2000.
[20] P. Luenam and P. Liu. ODAM: An On-the-Fly Damage Assessment and Repair System for Commercial Database Applications. In Proc. 15th IFIP WFG11.3 Working Conference on Database and Application Security, Ontario, Canada, July 2001.
[21] T. Lunt, A. Tamaru, F. Gilham, R. Jagannathan, C. Jalali, H. S. Javitz, A. Valdes, P. G. Neumann, and T. D. Garvey. A Real Time Intrusion Detection Expert System (IDES). Technical report, SRI International, Menlo Park, California, 1992.
[22] Teresa Lunt and Catherine McCollum. Intrusion Detection and Response Research at DARPA. Technical report, The MITRE Corporation, McLean, VA, 1998.
[23] T.F. Lunt. A Survey of Intrusion Detection Techniques. Computers & Security, 12(4):405–418, June 1993.
[24] J. McDermott and D. Goldschlag. Storage Jamming. In D.L. Spooner, S.A. Demurjian, and J.E. Dobson, editors, Database Security IX: Status and Prospects, pages 365–381. Chapman & Hall, London, 1996.
[25] J. McDermott and D. Goldschlag. Towards a Model of Storage Jamming. In Proceedings of the IEEE Computer Security Foundations Workshop, pages 176–185, Kenmare, Ireland, June 1996.
[26] B. Mukherjee, L. T. Heberlein, and K.N. Levitt. Network Intrusion Detection. IEEE Network, pages 26–41, June 1994.
[27] P.A. Porras and R.A. Kemmerer. Penetration State Transition Analysis: A Rule-Based Intrusion Detection Approach. In Proceedings of the 8th Annual Computer Security Applications Conference, San Antonio, Texas, December 1992.
[28] F. Rabitti, E. Bertino, W. Kim, and D. Woelk. A Model of Authorization for Next-Generation Database Systems. ACM Transactions on Database Systems, 16(1):88–131, 1994.
[29] P. Liu S. Ingsriswang. AID: An Application Aware Transaction-Level Database Intrusion Detection System. Technical report, Department of Information Systems, UMBC, Baltimore, MD, 2001.
[30] D. Samfat and R. Molva. IDAMN: An Intrusion Detection Architecture for Mobile Networks. IEEE Journal of Selected Areas in Communications, 15(7):1373–1380, 1997.
[31] R. Sandhu and F. Chen. The Multilevel Relational (MLR) Data Model. ACM Transactions on Information and Systems Security, 1(1), 1998.
[32] S.-P. Shieh and V.D. Gligor. On a Pattern-Oriented Model for Intrusion Detection. IEEE Transactions on Knowledge and Data Engineering, 9(4):661–667, 1997.
[33] M. Winslett, K. Smith, and X. Qian. Formal Query Languages for Secure Relational Databases. ACM Transactions on Database Systems, 19(4):626–662, 1994.