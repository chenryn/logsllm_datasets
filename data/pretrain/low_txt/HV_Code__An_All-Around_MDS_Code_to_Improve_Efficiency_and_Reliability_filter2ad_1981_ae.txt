### Data Recovery and I/O Efficiency in HV Code

#### A. Degraded Read Operations
When data elements are present on the surviving disks, then \( L' = L \). If the requested \( L \) elements include lost elements, the recovery process is triggered by fetching the associated elements, resulting in \( L' \geq L \). The time required for a degraded read pattern is measured from the issuance of the read request until the \( L' \) elements are transferred from the disk array to main memory. The I/O efficiency per degraded read pattern is evaluated by the ratio \( \frac{L'}{L} \).

We evaluate these metrics under data corruption on every disk and calculate the expected results, as shown in Figure 7.

- **Time for Degraded Read Patterns**: As depicted in Figure 7(a), X-Code requires the maximum time, highlighting the advantage of horizontal parity in handling degraded read operations. The figure also shows that the time increases with the number of elements to be read. HV Code outperforms X-Code and performs similarly to RDP Code, HDP Code, and H-Code.
  
- **I/O Efficiency**: HV Code offers competitive performance by significantly reducing the number of read elements. For \( L = 10 \), HV Code reduces degraded read I/O requests by approximately 10.0%, 28.3%, 6.6%, and 7.3% compared to RDP Code, X-Code, HDP Code, and H-Code, respectively.

#### B. Single Disk Failure Recovery
In this test, we compare the I/O requirements for reconstructing a failed element. An example of single disk repair in HV Code is shown in Figure 8 when \( p = 7 \), where at least 18 elements must be retrieved to recover the lost elements, requiring an average of 3 elements per lost element.

**Evaluation Method**: For each case of data corruption, we corrupt the elements on a specific disk, evaluate the minimal average number of elements retrieved from the surviving disks to recover a lost element, and calculate the expected result. We consider files encoded by RDP Code, X-Code, HDP Code, H-Code, and HV Code for different values of \( p \), as shown in Figure 9(a).

- **Comparison**: HV Code requires the fewest elements to repair an invalid element among the five candidates. The I/O reduction ranges from 2.7% (compared to HDP Code) to 13.8% (compared to H-Code) when \( p = 23 \). This saving expands to 5.4% (compared to HDP Code) to 39.8% (compared to H-Code) when \( p = 7 \). This superiority is attributed to the shorter parity chain in HV Code, which has \( p - 2 \) elements, compared to \( p - 1 \) in H-Code and RDP Code.

#### C. Double Disk Failures
Double disk failures require fetching all elements from the surviving disks, and the recovery time can be simulated by the latency of the longest recovery chain.

**Evaluation Method**: Suppose the average time to recover an element (either data or parity) is \( R_e \) and the longest length among all recovery chains is \( L_c \). The time needed to complete the recovery is \( L_c \cdot R_e \). Since \( L_c \) may vary depending on the failed disks, we consider all possible double disk failures, test each recovery time, and calculate the expected result.

- **Comparison Results**: As shown in Figure 9(b), there is a significant difference among the codes. When \( p = 7 \), both X-Code and HV Code reduce the reconstruction time by nearly 47.4%, 47.4%, and 43.2% compared to RDP Code, HDP Code, and H-Code, respectively. This saving increases to 59.7%, 50.0%, and 47.4% when \( p = 23 \). This improvement is due to the placement of parity elements in X-Code and HV Code, which distribute two parity elements over each disk, allowing four recovery chains to be executed in parallel. RDP Code, which gathers parity elements on specific disks, is the most time-consuming for reconstructing two corrupted disks.

#### D. Comparison Between HV Code and Other Codes
Table III summarizes a detailed comparison between HV Code and other popular MDS array codes in RAID-6. HV Code achieves low cost for partial stripe writes, optimal update complexity, high parallelism for double disk recovery, and a shorter recovery chain.

### Conclusion
In this paper, we propose HV Code, deployable over \( p - 1 \) disks (where \( p \) is a prime number). By evenly placing parities and utilizing horizontal and vertical parity, HV Code significantly reduces I/O requests for partial stripe writes and improves recovery efficiency for single and double disk failures. Performance evaluations demonstrate the efficiency of HV Code.

### Acknowledgment
We thank Arun Somani and the anonymous reviewers for their constructive comments and suggestions. This work is supported by the National Natural Science Foundation of China, the National High Technology Research and Development Program of China, Tsinghua-Tencent Joint Laboratory for Internet Innovation Technology, and Tsinghua University Initiative Scientific Research Program.

### References
[1] E. Pinheiro, W. Weber, and L. Barroso. Failure trends in a large disk drive population. In Proc. of the USENIX FAST’07, 2007.
[2] B. Schroeder and G. Gibson. Disk failures in the real world: What does an MTTF of 1,000,000 hours mean to you? In Proc. of the USENIX FAST’07, 2007.
[3] C. Wu, X. He, G. Wu, S. Wan, X. Liu, Q. Cao, and C. Xie. HDP Code: A Horizontal-Diagonal Parity Code to Optimize I/O Load Balancing in RAID-6. In Proc. of DSN’11, 2011.
[4] P. Corbett, B. English, A. Goel, T. Grcanac, S. Kleiman, J. Leong, and S. Sankar. Row-Diagonal Parity for double disk failure correction. In Proc. of the USENIX FAST’04, 2004.
[5] M. Blaum, J. Brady, J. Bruck, and J. Menon. EVENODD: An efficient scheme for tolerating double disk failures in RAID architectures. IEEE Transactions on Computers, 1995.
[6] S. Ghemawat, H. Gobioff, and S. Leung. The Google File System. In Proc. of ACM SOSP, 2003.
[7] L. Xu and J. Bruck. X-Code: MDS array codes with optimal encoding. IEEE Transactions on Information Theory, 1999.
[8] C. Jin, H. Jiang, D. Feng, and L. Tian. P-Code: A new RAID-6 code with optimal properties. In Proc. of the ICS’09, 2009.
[9] J. Plank. The RAID-6 liberation codes. In Proc. of the USENIX FAST’08, 2008.
[10] C. Wu, S. Wan, X. He, Q. Cao, and C. Xie. H-Code: A Hybrid MDS Array Code to Optimize Partial Stripe Writes in RAID-6. In Proc. of IPDPS’11, 2011.
[11] M. Holland and G. Gibson. Parity declustering for continuous operation in redundant disk arrays. In Proc. of the ASPLOS’92, 1992.
[12] L. Xu, V. Bohossian, J. Bruck, and D. Wagner. Low-density MDS codes and factors of complete graphs. IEEE Transactions on Information Theory, 1999.
[13] J. Plank. A new minimum density RAID-6 code with a word size of eight. In Proc. of the IEEE NCA’08, 2008.
[14] C. Huang, M. Chen, and J. Li. Pyramid Codes: Flexible schemes to trade space for access efficiency in reliable data storage systems. In Proc. of the IEEE NCA’07, 2007.
[15] K. Greenan, X. Li, and J. Wylie. Flat XOR-based erasure codes in storage systems: Constructions, efficient recovery, and tradeoffs. In Proc. of the IEEE MSST’10, 2010.
[16] S. Wan, Q. Cao, C. Xie, B. Eckart, and X. He. Code-M: A Non-MDS erasure code scheme to support fast recovery from up to two-disk failures in storage systems. In Proc. of the IEEE/IFIP DSN’10, 2010.
[17] J. Hafner. HoVer erasure codes for disk arrays. In Proc. of the IEEE/IFIP DSN’06, 2006.
[18] J. Hafner. WEAVER codes: Highly fault-tolerant erasure codes for storage systems. In Proc. of the USENIX FAST’05, 2005.
[19] I. Reed and G. Solomon. Polynomial codes over certain finite fields. Journal of the Society for Industrial and Applied Mathematics, 1960.
[20] J. Blomer, M. Kalfane, R. Karp, M. Karpinski, M. Luby, and D. Zucker-man. An XOR-based Erasure-Resilient coding scheme. Technical Report TR-95-048, International Computer Science Institute, 1995.
[21] S. Xu, R. Li, P. Lee, Y. Zhu, L. Xiang, Y. Xu. J. Lui. Single Disk Failure Recovery for X-code-based Parallel Storage Systems. IEEE Transaction on Computer, 2013.
[22] L. Xiang, Y. Xu, J. C. S. Lui, and Q. Chang. Optimal recovery of single disk failure in RDP code storage systems. In Proc. of ACM SIGMETRICS’10, 2010.
[23] C. Huang, H. Simitci, Y. Xu, A. Ogus, B. Calder, P. Gopalan, J. Li, and S. Yekhanin. Erasure Coding in Windows Azure Storage. In Proc. of USENIX ATC’12, 2012.
[24] M. Sathiamoorthy, M. Asteris, D.S. Papailiopoulos, A.G. Dimakis, R. Vadali, S. Chen, and D. Borthakur. XORing Elephants: Novel Erasure Codes for Big Data. In Proc. of the VLDB Endowment, 2013.
[25] RANDOM.ORG. Random Integer Generator. http://www.random.org/integers/, 2010.
[26] Microsoft’s Azure: Cloud Platform. www.windowsazure.com/
[27] O. Khan, R. Burns, J. Plank, and W. Pierce. Rethinking erasure codes for cloud file systems: minimizing I/O for recovery and degraded reads. In Proc. of USENIX FAST’12, 2012.
[28] J. Schindler, S. Schlosser, M. Shao, A. Ailamaki, and G. Ganger. Atropos: A Disk Array Volume Manager for Orchestrated Use of Disks. In Proc. of USENIX FAST’04, 2004.
[29] J. Plank, S. Simmerman, and C. Schuman. Jerasure: A library in C/C++ facilitating erasure coding for storage applications—Version 1.2. Technical Report CS-08-627, University of Tennessee, 2008.