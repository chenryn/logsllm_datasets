### 6.1. Complex Spares and FDEP Gate Extension

#### Figure 10: Complex Spares and FDEP Gate Extension
- **Behavior of the Spare AND Gate:**
  - If the spare fails, D remains dormant, similar to the behavior of the ‘spare’ AND gate in Figure 10(a).
  - If the spare is activated, the activation signal is only passed to the primary C, and D remains dormant. This differs from a standard AND gate, where both B and E would be activated.
  - Should C fail while the spare is active, D is then activated.

#### Figure 11: The Spare Gate I/O-IMC Model
- **Signals:**
  - `aS,A` and `aS,C` are signals output by A and C, respectively, indicating that the spare S has been taken.
  - The spare gate I/O-IMC model is generalized to handle multiple spare gates sharing multiple spares, representing the most general case.

### 6.2. FDEP Gate Extension

- **Triggering Failure:**
  - In this framework, the FDEP gate can trigger the failure of any gate (representing a sub-system) and not just BE.
  - This extension does not add extra cost, and the I/O-IMC used remains the same as shown in Figure 5.
  - Figure 10(c) shows a configuration where T triggers the failure of the sub-tree A. Note that sub-system A does not need to be an independent module.
  - The trigger T only affects the failure of gate A and none of its elements below it, such as the basic event C.

- **Sub-System Independence:**
  - A sub-system is usually named after its top-node and is considered independent if:
    1. All elements in the tree have inputs from only elements within the same tree.
    2. All outputs, except for the top-node, are within the tree and hidden from the rest of the system.

- **Activation Signal:**
  - For clarity, the activation signal is drawn as a dashed line.
  - The solution of all spare gates sharing a spare communicating with each other is not very scalable. A better solution involves using a ‘spare granting’ auxiliary.

### 7. DFT Elements Extension

#### 7.1. Inhibition and Mutual Exclusivity

- **Inhibition:**
  - Event A inhibits the failure of B if B's failure is prevented when A fails before B.
  - This can be modeled by adding an inhibition auxiliary (IA). Figure 12 shows the configuration and the corresponding I/O-IMC model of the IA of B.
  - `fB*` corresponds to the failure signal of B without A’s inhibition.
  - Any element that has B as input must now interface with B’s IA rather than directly with B.

- **Mutual Exclusivity:**
  - If B also inhibits the failure of A, an IA for A is added, making the failures of A and B mutually exclusive.
  - This is useful for modeling components with different failure modes, such as a switch that can either fail to close or fail to open, but not both.

#### 7.2. Repair

- **Adding Repair:**
  - Adding repair functionality is more complex as every DFT element can now fail or be repaired.
  - The elementary I/O-IMC models for each DFT element must be modified locally.
  - Figures 13 and 14 show the I/O-IMC models for a repairable cold BE and a repairable AND gate, respectively.

- **Repairable Cold BE:**
  - `µ` denotes the BE repair rate, and `r!` is a signal output by the BE notifying that it has been repaired.
  - The fired state is no longer absorbing.
  - An alternative model involves the BE interacting with a repair station (RS), where the repair process is part of the RS I/O-IMC model.

- **Repairable AND Gate:**
  - The AND gate has its own repair output signal (`r!`) and considers both failure (`fA?`, `fB?`) and repair (`rA?`, `rB?`) signals from its inputs A and B.
  - Compared to the unrepairable AND gate, the repairable AND gate has three extra states.

- **Simple Repairable System:**
  - A simple repairable system composed of an AND gate with two BEs (A and B) results in a CTMC after automatic composition and aggregation, as shown in Figure 15(b).

### 8. Conclusion and Future Work

- **Summary:**
  - This paper illustrates the use of the I/O-IMC framework for DFT analysis, showing increased modularity at both the analysis and model-building levels.
  - New DFT elements were defined, and examples of such extensions were provided.

- **Future Research:**
  - Achieve more drastic state-space reduction using suitable aggregation techniques.
  - Generalize the concept of activation to any type of mode switch.
  - Investigate the use of phase-type distributions to approximate BE failure probability distributions.

### References

- [1] S. Amari, G. Dill, and E. Howald. A new approach to solve dynamic fault trees. In Annual Reliability and Maintainability Symposium, pages 374–379, January 2003.
- [2] C. Baier, H. Hermanns, J.-P. Katoen, and B. R. Haverkort. Efficient computation of time-bounded reachability probabilities in uniform continuous-time Markov decision processes. Theor. Comput. Sci., 345(1):2–26, 2005.
- [3] H. Boudali. A Bayesian network reliability modeling and analysis framework. Phd dissertation, University of Virginia, Charlottesville, VA, May 2005.
- [4] H. Boudali, P. Crouzen, and M. I. A. Stoelinga. A compositional semantics for Dynamic Fault Trees in terms of Interactive Markov Chains. Technical report, University of Twente, Enschede, the Netherlands, to appear.
- [5] H. Boudali and J. B. Dugan. A new Bayesian network approach to solve dynamic fault trees. In Reliability and Maintainability Symposium, Jan 2005.
- [6] M. Bouissou and J.-L. Bon. A new formalism that combines advantages of fault-trees and Markov models: Boolean logic driven Markov processes. Reliability Engineering and System Safety, 82(2):149–163, 2003.
- [7] M. A. Boyd. Dynamic fault tree models: techniques for analyses of advanced fault tolerant computer systems. Phd dissertation, Dept. of Computer Science, Duke University, 1991.
- [8] D. Coppit, K. J. Sullivan, and J. B. Dugan. Formal semantics of models for computational engineering: A case study on dynamic fault trees. In Proceedings of the International Symposium on Software Reliability Engineering, pages 270–282. IEEE, Oct 2000.
- [9] P. Crouzen. Compositional analysis of dynamic fault trees. MSc thesis, University of Twente, Enschede, the Netherlands, 2006.
- [10] J. B. Dugan, S. J. Bavuso, and M. A. Boyd. Dynamic fault-tree models for fault-tolerant computer systems. IEEE Transactions on Reliability, 41(3):363–377, September 1992.
- [11] J. B. Dugan, B. Venkataraman, and R. Gulati. DIFTree: a software package for the analysis of dynamic fault tree models. In Reliability and Maintainability Symposium, pages 64–70, Jan 1997.
- [12] H. Hermanns. Interactive Markov Chains, volume 2428 of Lecture Notes in Computer Science. Springer-Verlag, 2002.
- [13] H. Hermanns, U. Herzog, U. Klehmet, V. Mertsiotakis, and M. Siegle. Compositional performance modelling with the TIPPtool. Lecture Notes in Computer Science, 1469:51–62, 1998.
- [14] H. Hermanns and J.-P. Katoen. Automated compositional Markov chain generation for a plain-old telephone system. Science of Computer Programming, 36(1):97–127, 2000.
- [15] R. A. Howard. Dynamic probability systems. Volume 1: Markov models. Decision and Control. John Wiley & Sons, Inc., 1971.
- [16] N. A. Lynch and M. R. Tuttle. An introduction to input/output automata. CWI Quarterly, 2(3):219–246, 1988.
- [17] R. Milner. Communication and Concurrency. Prentice Hall Inc., 1989.
- [18] W. J. Stewart. Introduction to the Numerical Solution of Markov Chains. Princeton University Press, 1994.
- [19] K. K. Vemuri, J. B. Dugan, and K. J. Sullivan. Automatic synthesis of fault trees for computer-based systems. IEEE Transactions on Reliability, 48(4):394–402, December 1999.
- [20] W. E. Veseley, F. F. Goldberg, N. H. Roberts, and D. F. Haasl. Fault Tree Handbook, NUREG-0492. United States Nuclear Regulatory Commission, NASA, 1981.