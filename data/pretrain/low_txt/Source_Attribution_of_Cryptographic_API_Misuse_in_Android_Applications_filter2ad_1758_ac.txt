### 优化后的文本

#### 表格数据
以下是工具在40个APK文件上的错误报告结果：

| 工具 | 错误总数 (N) | 实际错误 (E) | 参数传递错误 (AP) |
|------|--------------|--------------|------------------|
| Sym-HMM | 146 | 38 | 36 |
| Sym-NGM | 143 | 36 | 36 |
| CogniCryptSAST | 138 | 32 | 32 |

#### 文本内容
我们对40个APK文件进行了所有工具的测试，结果如表VI所示。其中，N表示任何工具报告的错误数量，E表示通过手动检查确认的实际错误数量，AP表示由参数传递引起的错误。

总共，Sym-HMM、Sym-NGM和CogniCryptSAST分别报告了146、143和138个错误。对于这些报告的错误，我们进行了手动检查以确认实际错误的数量。

### 相关工作
在Java方面，Nadi等人 [26] 对开发人员使用Java加密API时遇到的障碍进行了实证研究。Krüger等人 [27] 提供了一个名为CogniCrypt的工具包，以支持Java开发人员使用加密API。Paletov等人 [28] 提出了一种从代码变更中推断Java程序加密API规则的方法。Duncan等人 [29] 提出了一种自动检查JavaScript代码安全属性的方法。Wickert等人 [30] 借助CogniCryptSAST [6] 构建了一个包含真实世界Java项目中的参数化加密误用的数据集。

除了Android平台或特定于Java的应用程序之外，还有其他一些针对不同平台或语言的方法。Li等人 [31] 开发了一个名为iCryptoTracer的工具，用于检测iOS应用程序中的加密误用，使用的规则类似于CryptoLint [3]。Gorski等人 [32] 提出了一种帮助Python开发人员避免加密API误用的方法。Mindermann等人 [33] 对Rust加密API的使用情况进行了探索性研究。

### 结论
本文提出了一种基于概率模型的方法来分析Android应用程序中的加密API使用情况。为了构建模型，我们创建了一个包含带有参数的加密API序列的数据集。我们还进行了一些有趣的实验来评估我们的模型，结果显示，我们的模型能够捕捉到API的使用情况，检测并定位误用，并且性能优于一些现有的基于概率模型的方法。

未来的工作中，我们将增强抽象以检测更多的误用，并考虑更多领域特定的API库。我们还将考虑从现有代码中挖掘加密API推荐和使用规则。

### 致谢
本研究得到了国家自然科学基金（编号：61972260, 61772347, 61836005）、广东省基础与应用基础研究基金（编号：2019A1515011577）以及广东省科技厅（编号：2018B010107004）的部分资助。

### 参考文献
[1] IDC, "Smartphone Market Share," <https://www.idc.com/promo/smartphone-market-share/os>.

[2] I. Muslukhov, Y. Boshmaf, C. Kuo, J. Lester, and K. Beznosov, “Know Your Enemy: The Risk of Unauthorized Access in Smartphones by Insiders,” in MobileHCI, 2013, pp. 271–280.

[3] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An Empirical Study of Cryptographic Misuse in Android Applications,” in CCS, 2013, p. 73–84.

[4] J. Gao, P. Kong, L. Li, T. F. Bissyandé, and J. Klein, “Negative Results on Mining Crypto-API Usage Rules in Android Apps,” in MSR, 2019, pp. 388–398.

[5] S. Shuai, D. Guowei, G. Tao, Y. Tianchang, and S. Chenjie, “Modelling Analysis and Auto-Detection of Cryptographic Misuse in Android Applications,” in DASC, 2014, pp. 75–80.

[6] S. Krüger, J. Späth, K. Ali, E. Bodden, and M. Mezini, “CrySL: An Extensible Approach to Validating the Correct Usage of Cryptographic APIs,” in ECOOP, 2018, pp. 10:1–10:27.

[7] D. Chen, Y. Zhang, R. Wang, W. Wei, H. Zhou, X. Li, and B. Qu, “Mining API Protocols Based on a Balanced Probabilistic Model,” in FSKD, 2015, pp. 2276–2282.

[8] T. T. Nguyen, H. V. Pham, P. M. Vu, and T. T. Nguyen, “Recommending API Usages for Mobile Apps with Hidden Markov Model,” in ASE, Nov 2015, pp. 795–800.

[9] T. T. Nguyen, H. V. Pham, P. M. Vu, and T. T. Nguyen, “Learning API Usages from Bytecode: A Statistical Approach,” in ICSE, 2016, pp. 416–427.

[10] B. Rashidi, C. Fung, and E. Bertino, “Android Resource Usage Risk Assessment Using Hidden Markov Model and Online Learning,” Comput. Secur., vol. 65, no. C, pp. 90–107, 2017.

[11] J. Wang, Y. Dang, H. Zhang, K. Chen, T. Xie, and D. Zhang, “Mining Succinct and High-Coverage API Usage Patterns from Source Code,” in MSR, 2013, pp. 319–328.

[12] V. Raychev, M. Vechev, and E. Yahav, “Code Completion with Statistical Language Models,” in PLDI, 2014, p. 419–428.

[13] S. Wang, D. Chollak, D. Movshovitz-Attias, and L. Tan, “Bugram: Bug Detection with N-gram Language Models,” in ASE, 2016, pp. 708–719.

[14] X. Gu, H. Zhang, D. Zhang, and S. Kim, “Deep API Learning,” in FSE, 2016, p. 631–642.

[15] M. Asaduzzaman, C. K. Roy, S. Monir, and K. A. Schneider, “Exploring API Method Parameter Recommendations,” in ICSME, 2015, pp. 271–280.

[16] A. Rice, E. Aftandilian, C. Jaspan, E. Johnston, M. Pradel, and Y. Arroyo-Paredes, “Detecting Argument Selection Defects,” OOPSLA, pp. 104:1–104:22, 2017.

[17] R. Wiśniewski and C. Tumbleson, Apktool: A Tool for Reverse Engineering Android APK Files, <https://ibotpeaches.github.io/Apktool/>.

[18] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. L. Traon, D. Octeau, and P. D. McDaniel, “FlowDroid: Precise Context, Flow, Field, Object-Sensitive and Lifecycle-Aware Taint Analysis for Android Apps,” in PLDI, 2014, pp. 259–269.

[19] Z. Xu, K. Ren, S. Qin, and F. Craciun, “CDGDroid: Android Malware Detection Based on Deep Learning Using CFG and DFG,” in ICFEM, 2018, pp. 177–193.

[20] Dalvik Bytecode, <https://source.android.com/devices/tech/dalvik/dalvik-bytecode>.

[21] L. R. Rabiner and B.-H. Juang, “An Introduction to Hidden Markov Models,” IEEE ASSP Magazine, vol. 3, no. 1, pp. 4–16, 1986.

[22] P. F. Brown, P. V. deSouza, R. L. Mercer, V. J. D. Pietra, and J. C. Lai, “Class-Based N-Gram Models of Natural Language,” Comput. Linguist., vol. 18, no. 4, p. 467–479, 1992.

[23] K. Allix, T. F. Bissyandé, J. Klein, and Y. Le Traon, “Androzoo: Collecting Millions of Android Apps for the Research Community,” in MSR, 2016, pp. 468–471.

[24] A. Chatzikonstantinou, C. Ntantogian, G. Karopoulos, and C. Xenakis, “Evaluation of Cryptography Usage in Android Applications,” in BICT, 2016, pp. 83–90.

[25] I. Muslukhov, Y. Boshmaf, and K. Beznosov, “Source Attribution of Cryptographic API Misuse in Android Applications,” in ASIA CCS, 2018, p. 133–146.

[26] S. Nadi, S. Krüger, M. Mezini, and E. Bodden, “Jumping Through Hoops: Why Do Java Developers Struggle with Cryptography APIs?” in ICSE, 2016, pp. 935–946.

[27] S. Krüger, S. Nadi, M. Reif, K. Ali, M. Mezini, E. Bodden, F. Göpfert, F. Günther, C. Weinert, D. Demmler, and et al., “CogniCrypt: Supporting Developers in Using Cryptography,” in ASE, 2017, p. 931–936.

[28] R. Paletov, P. Tsankov, V. Raychev, and M. Vechev, “Inferring Crypto API Rules from Code Changes,” in PLDI, 2018, p. 450–464.

[29] D. Mitchell, L. T. van Binsbergen, B. Loring, and J. Kinder, “Checking Cryptographic API Usage with Composable Annotations (Short Paper),” in PEPM, 2017, p. 53–59.

[30] A.-K. Wickert, M. Reif, M. Eichberg, A. Dodhy, and M. Mezini, “A Dataset of Parametric Cryptographic Misuses,” in MSR, 2019, pp. 96–100.

[31] Y. Li, Y. Zhang, J. Li, and D. Gu, “iCryptoTracer: Dynamic Analysis on Misuse of Cryptography Functions in iOS Applications,” in NSS, 2014, pp. 349–362.

[32] P. L. Gorski, L. L. Iacono, D. Wermke, C. Stransky, S. Möller, Y. Acar, and S. Fahl, “Developers Deserve Security Warnings, Too: On the Effect of Integrated Security Advice on Cryptographic API Misuse,” in SOUPS, 2018, pp. 265–281.

[33] K. Mindermann, P. Keck, and S. Wagner, “How Usable Are Rust Cryptography APIs,” in QRS, 2018, p. 143–154.