### Privileges and API Warnings

To enhance security, the privileges of an operation should be clearly defined. Additionally, existing APIs could be modified to at least issue warnings to developers. For instance, accessing the `data` property of a `postMessage` without first checking the `origin` property could trigger a JavaScript console warning, indicating a potentially missing origin check. Future generations of APIs could extend this behavior to throw security exceptions if crucial security checks are omitted.

### Ensuring Better Developer Training

The results of our study indicate that, although security measures exist to prevent or mitigate attacks, developers often remain unaware of underlying security issues. Examples include the omission of origin checks in `postMessage`, the ineffective use of HTTP-only cookies, and the inclusion of user-controllable data in script code generation, which can lead to Client-Side Cross-Site Scripting (XSS). Particularly, Client-Side XSS remains a persistent vulnerability, even with mitigating technologies like Content Security Policy (CSP). Therefore, we argue that research should continue to explore how developers can be better educated on security issues and how development tools can be designed to empower users to build secure applications.

### Related Work

Our work intersects with several areas of web security. Below, we discuss relevant research.

#### Large-Scale Analysis of Web Security and Privacy

Several studies have conducted large-scale analyses of different aspects of web security. Yue and Wang [40] analyzed the inclusion of external scripts and investigated dangerous API calls. In 2010, Zhou and Evans [42] found that only 50% of the sites they examined used HTTP-only cookies. In 2011, two studies analyzed the use of cross-domain policies for Flash and other cross-domain communication channels [16, 10], aligning with our findings for that period. In the same year, Richards et al. [27] provided the first large-scale analysis of the (mis)use of `eval`, showing that while it can be replaced in certain cases, its complete removal is impractical. In 2012, Nikiforakis et al. [24] examined JavaScript inclusions over time for the Alexa top 10,000, noting an increasing trend in external inclusions, which we also observed. In the privacy domain, Lerner et al. [19] analyzed the evolution of trackers over time using data from archive.org.

#### Vulnerability Detection in the Wild

In addition to the aforementioned studies, several works have focused on specific types of vulnerabilities in the wild. In 2013, Son and Shmatikov [31] analyzed insecure usage of `postMessage` receivers, identifying several exploitable issues. In the same year, we presented an automated system to measure the prevalence of Client-Side XSS [17]. More recently, Lauinger et al. [14] performed an in-depth analysis of vulnerable library usage, presenting results comparable to our historical view.

#### Content Security Policy

Content Security Policy (CSP) has gained significant attention in recent years. Doupé et al. [4] showed in 2013 that automatically separating code and data is feasible for ASP.NET applications. Weissbacher et al. [38] conducted a long-term study indicating that CSP was not widely deployed, and discussed the challenges in setting up CSP for legacy applications. In 2016, Pan et al. [26] demonstrated that automatically generating CSP policies for the Alexa top 50 is feasible. Weichselbaum et al. [37] investigated the efficacy of deployed CSP policies, finding that around 95% of the examined policies were susceptible to bypassing. The authors proposed an extension to CSP to facilitate easier deployment.

#### HTTPS

The research community has also focused on HTTPS. Clark and van Oorschot [3] systematically explored issues related to HTTPS infrastructure and attack vectors. Liang et al. [20] examined the relationship between HTTPS usage and the embedding of CDNs into web pages. Most recently, Sivakorn et al. [30] highlighted the privacy risks of exposing non-authenticating cookies over HTTP, leading to end-user privacy intrusions.

### Conclusion

In this paper, we conducted a comprehensive study on the security history of the web's client side using preserved client-side web code from the Internet Archive. Our study revealed three overarching developments:

1. **Platform Complexity**: The complexity of the client-side web continues to increase, as indicated by rising code size, the number of available APIs, and the amount of third-party code in websites.
2. **Security Level**: The overall security level of websites has not improved significantly. Injection vulnerabilities, such as Client-Side XSS, persist. While some vulnerabilities decrease due to deprecated technology, new ones emerge with the adoption of new technologies, such as insecure handling of `postMessages`.
3. **Adoption of Security Mechanisms**: There is steady adoption of easy-to-deploy security mechanisms, such as the HTTPOnly flag and X-Frame-Option header. However, more complex mechanisms like CSP and sandboxed iframes are less widely adopted. Early adopters of dedicated security technologies are generally less likely to exhibit vulnerabilities, but this advantage diminishes over time.

Overall, these results paint a sobering picture. Despite continuous attention from the research, security, and standardization communities, the positive effects on web security are modest. Client-Side XSS remains prevalent, and problematic practices, such as cross-origin script inclusion and the use of outdated JavaScript libraries, are still widespread. It appears that growing security awareness merely balances out the increasing insecurity caused by rising platform complexity.

Thus, this paper provides strong evidence that the process of making the web a secure platform is still in its infancy and requires further dedicated attention to be realized.

### Acknowledgements

We would like to thank the anonymous reviewers for their valuable feedback and our shepherd Nick Nikiforakis for his support in addressing the reviewer’s comments. This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA) (FKZ: 16KIS0345).

### References

[1] Devdatta Akhawe, Frederik Braun, François Marier, and Joel Weinberger. Subresource integrity. https://www.w3.org/TR/SRI/, Jun 2016.
[2] Daniel Bates, Adam Barth, and Collin Jackson. Regular expressions considered harmful in client-side XSS filters. In WWW, 2010.
[3] Jeremy Clark and Paul C van Oorschot. SoK: SSL and HTTPS: Revisiting past challenges and evaluating certificate trust model enhancements. In IEEE Security and Privacy, 2013.
[4] Adam Doupé, Weidong Cui, Mariusz H Christopher Jakubowski, Marcus Peinado, Christopher Kruegel, and Giovanni Vigna. deDacota: Toward preventing server-side XSS via automatic code and data separation. In CCS, 2013.
[5] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. Hypertext Transfer Protocol – HTTP/1.1. RFC 2616 (Draft Standard), June 1999.
[6] Jeremiah Grossman. Clickjacking: Web pages can see and hear you. http://blog.jeremiahgrossman.com/2008/10/clickjacking-web-pages-can-see-and-hear.html.
[7] Ian Hickson. HTML5 Web Messaging. https://www.w3.org/TR/webmessaging/, May 2015.
[8] J. Hodges, C. Jackson, and A. Barth. HTTP Strict Transport Security (HSTS). RFC 6797 (Proposed Standard), November 2012.
[9] Lin-Shung Huang, Alexander Moshchuk, Helen J Wang, Stuart Schecter, and Collin Jackson. Clickjacking: Attacks and defenses. In USENIX, 2012.
[10] Dongseok Jang, Aishwarya Venkataraman, G Michael Sawka, and Hovav Shacham. Analyzing the crossdomain policies of Flash applications. In W2SP, 2011.
[11] jQuery Bug Tracker. SELECTOR INTERPRETED AS HTML. http://goo.gl/JNggpp, 2012.
[12] Amit Klein. DOM based cross site scripting or XSS of the third kind. Web Application Security Consortium, Articles, 2005.
[13] Michael Kranch and Joseph Bonneau. Upgrading HTTPS in mid-air. In NDSS, 2015.
[14] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson, and Engin Kirda. Thou shalt not depend on me: Analyzing the use of outdated JavaScript libraries on the web. In NDSS, 2017.
[15] Eric Lawrence. IE8 security update VI: Beta 2 update. https://blogs.msdn.microsoft.com/ie/2008/09/02/ie8-security-part-vi-beta-2-update/, September 2008.
[16] Sebastian Lekies, Martin Johns, and Walter Tighzert. The state of the cross-domain nation. In W2SP, 2011.
[17] Sebastian Lekies, Ben Stock, and Martin Johns. 25 million flows later: large-scale detection of DOM-based XSS. In CCS, 2013.
[18] Sebastian Lekies, Ben Stock, Martin Wentzel, and Martin Johns. The unexpected dangers of dynamic JavaScript. In USENIX Security, pages 723–735, 2015.
[19] Adam Lerner, Anna Kornfeld Simpson, Tadayoshi Kohno, and Franziska Roesner. Internet Jones and the raiders of the lost trackers: An archaeological study of web tracking from 1996 to 2016. In USENIX Security, 2016.
[20] Jinjin Liang, Jian Jiang, Haixin Duan, Kang Li, Tao Wan, and Jianping Wu. When HTTPS meets CDN: A case of authentication in delegated service. In IEEE Security and Privacy, 2014.
[21] Bill Marczak, Nicholas Weaver, Jakub Dalek, Roya Ensafi, David Fifield, Sarah McKune, Arn Rey, John Scott-Railton, Ronald Deibert, and Vern Paxson. China’s great cannon. Citizen Lab, 2015.
[22] Thomas J McCabe. A complexity measure. IEEE Transactions on Software Engineering, 1976.
[23] Mozilla Firefox Team. X-frame-options. https://developer.mozilla.org/en/docs/Web/HTTP/Headers/X-Frame-Options.
[24] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. You are what you include: large-scale evaluation of remote JavaScript inclusions. In CCS, 2012.
[25] Erlend Oftedal. Retire.js - identify JavaScript libraries with known vulnerabilities in your application. http://goo.gl/r4BQoG, 2013.
[26] Xiang Pan, Yinzhi Cao, Shuangping Liu, Yu Zhou, Yan Chen, and Tingzhe Zhou. CSPAutoGen: Black-box enforcement of content security policy upon real-world websites. In CCS, 2016.
[27] Gregor Richards, Christian Hammer, Brian Burg, and Jan Vitek. The eval that men do - A large-scale study of the use of eval in JavaScript applications. In ECOOP, 2011.
[28] D. Ross and T. Gondrom. HTTP Header Field X-Frame-Options. RFC 7034, October 2013.
[29] David Ross. Happy 10th birthday cross-site scripting! http://blogs.msdn.com/b/dross/archive/2009/12/15/happy-10th-birthday-cross-site-scripting.aspx, 2009.
[30] Suphannee Sivakorn, Iasonas Polakis, and Angelos D Keromytis. The cracked cookie jar: HTTP cookie hijacking and the exposure of private information. In IEEE Security and Privacy, 2016.
[31] Sooel Son and Vitaly Shmatikov. The postman always rings twice: Attacking and defending postmessage in HTML5 websites. In NDSS, 2013.
[32] Michele Spagnuolo. Abusing JSONP with rosetta flash. https://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/, August 2014.
[33] Ben Stock and Martin Johns. Protecting users against XSS-based password manager abuse. In AsiaCCS, 2014.
[34] Ben Stock, Stephan Pfistner, Bernd Kaiser, Sebastian Lekies, and Martin Johns. From facepalm to brain bender: Exploring client-side cross-site scripting. In CCS, 2015.
[35] Apurva Udaykumar. Setting a crossdomain.xml file for HTTP streaming. http://www.adobe.com/devnet/adobe-media-server/articles/cross-domain-xml-for-streaming.html.
[36] Marie Vasek and Tyler Moore. Identifying risk factors for webserver compromise. In Financial Crypto, 2014.
[37] Lukas Weichselbaum, Michele Spagnuolo, Sebastian Lekies, and Artur Janc. CSP is dead, long live CSP! On the insecurity of whitelists and the future of Content Security Policy. In CCS, 2016.
[38] Michael Weissbacher, Tobias Lauinger, and William Robertson. Why is CSP failing? Trends and challenges in CSP adoption. In RAID, 2014.
[39] Mike West, Adam Barth, and Dan Veditz. Content security policy level 2, W3C candidate recommondation. https://www.w3.org/TR/2015/CR-CSP2-20150219/, February 2015.
[40] Chuan Yue and Haining Wang. Characterizing insecure JavaScript practices on the web. In WWW, 2009.
[41] Michal Zalewski. The tangled Web: A guide to securing modern web applications. No Starch Press, 2012.
[42] Yuchen Zhou and David Evans. Why aren’t HTTP-only cookies more widely deployed. W2SP, 2010.