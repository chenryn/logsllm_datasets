### Optimized Text

#### Training and Performance
To balance the sequences, an additional 28 minutes are required to train the LSTM model. The total training process for each attack takes less than one hour. It is important to note that training ATLAS is a one-time effort, and new attacks can be incrementally added to the LSTM model without re-training the previously learned attacks. Our experiments were conducted on a laptop PC, indicating that the training time could be significantly reduced with more powerful machines in a production environment, such as multi-core and large-memory servers.

Although ATLAS takes time to build the causal graph for initiating the attack investigation, it only requires approximately four seconds to extract the sequences. Additionally, it takes, on average, one second to recover the attack story (using 1-day audit logs) by processing the complete list of unknown entities in the causal graph.

#### Attack Scenario
The attack begins with the execution of a malicious document on the victim machine (Steps ❶–❸). Subsequently, injected shellcode forks other processes and grants additional capabilities to the attacker, including information gathering and downloading files to the victim system (Steps ❹ and ❺). The attacker also executes a backdoor to leak a secret file to a Command and Control (C&C) server (Steps ❻ and ❼). Furthermore, the attacker identifies that the compromised host acts as the company portal's web server. For lateral movement, the attacker uploads the backdoor code to this web server and adds a piece of code to the main webpage (portal.com/index.html, orange node in the causal graph) to prompt users to update their machines (Step ❽). After users download and install the backdoor (Step ❾), more secret files are leaked to the C&C server (Steps ❿ and later).

#### Causal Graph Analysis
Figure 9-B illustrates the causal graph constructed for this attack. Although we simplified the causal graph for ease of presentation, it still includes many non-attack entities (white nodes in the graph), which can be challenging for analysts to manually analyze during an attack investigation. The investigation starts from a malicious hostname, evil.com (the blue node). ATLAS first identifies a set of attack entities (red nodes) and a set of non-attack entities (white nodes) through the learning model. Second, ATLAS reports the identified events in temporal order as a sequence, which helps investigators reason about the attack story. For this attack, ATLAS reported only six false positives in terms of entities and recovered the attack story similar to Figure 9-A.

#### Case Study
We illustrate how ATLAS can be deployed and benefit cyber analysts for attack investigation through a case study (i.e., the attack M-5 used in our evaluation). We use numbers in Figure 9-A to highlight the key steps of this attack. Here, a user downloads a malicious document that compromises the system.

#### Limitations and Discussion
The preceding analysis shows that ATLAS can precisely recover the key attack steps from the attack symptoms, aiding security investigators in obtaining the attack story. Although our work focused on Windows platform logs, ATLAS can be easily extended to other platforms such as Linux and FreeBSD. This is because our approach starts its analysis from any log entities and builds a customized, platform-independent causal graph. We plan to extend our framework to diverse types of audit logs in the future.

We note that a list of manually designated attack entities is required for ATLAS training. However, labeling such data is a one-time effort for investigating future attacks. Another limitation of ATLAS is that it cannot detect attacks that use a similar sequence of normal events to hide their behavior, such as mimicry attacks [4, 5, 49]. Following the behaviors of normal events significantly limits the capability of any attack investigation techniques [31, 36]. Additionally, ATLAS requires the analyst to start an investigation with a true attack-symptom entity. Using a false positive entity as an attack-symptom will only discover non-attack sequences since their subset entities include a non-attack entity. Lastly, the correctness of the sequence-based model highly depends on the quality of the collected training log entries. Hence, more representative temporal relations among attacks will enable ATLAS to learn more precise models. This can be alleviated by introducing more types of attacks to the training set.

#### Related Work
ATLAS is primarily related to three sub-topics that support provenance tracking with audit logs: causality analysis over the provenance graph, anomaly-based analysis, and the application of machine learning (ML) techniques for attack investigation.

**Causality Analysis:** Much prior work has been done on causality analysis over audit logs for attack investigation, including optimizing the provenance graph and reporting a concise attack story [20, 21, 27]. These approaches require system modifications via source-code instrumentation, static binary-level instrumentation, or dynamic program instrumentation at runtime. Unfortunately, source-code level instrumentation is not applicable for proprietary software due to software licenses, while static and dynamic instrumentation incur additional overhead on the user-system. Recent works proposed instrumentation-free approaches [10, 13, 16, 31, 51] that do not require any changes to the user-system for provenance tracking. However, most of these approaches are heuristic- or rule-based, requiring significant effort to develop and maintain the rules or heuristics. HOLMES [31] and RapSheet [10] rely on a knowledge base of adversarial Tactics, Techniques, and Procedures (TTPs) [32]. In contrast, ATLAS only requires attack training data to learn the co-occurrence of attack steps through temporal-ordered sequences.

**Anomaly-based Analysis:** Anomaly-based approaches [11, 12, 25, 50] learn the normal system behavior to identify anomalous behavior. While they can effectively detect unknown attacks, they are prone to false positives due to user behavior change over time and lack of sufficient training data. For instance, Unicorn [9] learns a model from normal provenance graphs to detect anomalies. PrioTracker [25] ranks node importance with statistical information to more accurately report real attack events. NoDoze [11] reduces false alarms by computing and propagating anomaly scores within a dependency graph. Winnower [12] provides threat alerts for cluster auditing by noticing the difference between multiple instances of clusters. ProvDetector [50] identifies stealthy malware through learning the sequences of normal execution paths of applications from a provenance graph. Deeplog [8] models existing audit logs as natural language sequences and detects abnormal events. Log2vec [24] proposes a clustering framework to identify unseen abnormal sequences from system logs. Unlike anomaly-based approaches that only learn user behaviors, ATLAS learns both attack and non-attack (user) sequences and exploits their temporal and causal relations to reduce false positives and false negatives.

**Learning-based Analysis:** Learning-based attack investigation approaches [36, 42, 43] use machine learning techniques to model attack events in the logs. HERCULE [36] uses a community detection algorithm to correlate attack events. Similar to ATLAS, recent works [42, 43] employ word embeddings to transform textual information (i.e., sequences) into vectors to facilitate the learning process. However, these approaches are limited to identifying and reporting individual attack events in logs. In contrast, ATLAS aims to locate attack entities and construct an attack story by associating each entity with its events.

#### Conclusion
We have presented ATLAS, a framework to identify and reconstruct end-to-end cyber attack stories from unmodified system and software audit logs. ATLAS employs a novel combination of causality analysis, natural language processing, and machine learning techniques to model and recognize high-level patterns of different attacks through a sequence-based analysis. Evaluation results over 10 real-world APT attack scenarios showed that ATLAS successfully recovered key attack steps, constituting the attack story with both high precision and efficiency.

#### Acknowledgments
We thank our shepherd, Adam Bates, and the anonymous reviewers for their valuable comments and suggestions. This work was supported in part by ONR through a subcontract from the Intelligent Automation, Inc., an LDRD Grant from Sandia National Labs, and a gift from Cisco. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of our sponsors.

#### References
[1] Martín Abadi, Paul Barham, Jianmin Chen, Zhifeng Chen, Andy Davis, Jeffrey Dean, Matthieu Devin, Sanjay Ghemawat, Geoffrey Irving, Michael Isard, et al. Tensorflow: a system for large-scale machine learning. In USENIX Symposium on Operating Systems Design and Implementation, 2016.
[2] Adam Bates, Dave Jing Tian, Kevin RB Butler, and Thomas Moyer. Trustworthy whole-system provenance for the Linux kernel. In USENIX Security Symposium, 2015.
[3] Karin Beijering, Charlotte Gooskens, and Wilbert Heeringa. Predicting intelligibility and perceived linguistic distance by means of the Levenshtein algorithm. Linguistics in the Netherlands, 15:13–24, 2008.
[4] Z Berkay Celik, Patrick McDaniel, Rauf Izmailov, Nicolas Papernot, Ryan Sheatsley, Raquel Alvarez, and Ananthram Swami. Detection under privileged information. In Proceedings of the 2018 on Asia Conference on Computer and Communications Security, pages 199–206, 2018.
[5] Z Berkay Celik, Robert J Walls, Patrick McDaniel, and Ananthram Swami. Malware traffic detection using tamper-resistant features. In IEEE Military Communications Conference, 2015.
[6] François Chollet et al. Keras. https://github.com/fchollet/keras, 2015. Accessed: 2020-06-06.
[7] Microsoft Corporation. Support for UNC naming and MUP. https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/support-for-unc-naming-and-mup, 2017. Accessed: 2020-06-06.
[8] Min Du, Feifei Li, Guineng Zheng, and Vivek Srikumar. Deeplog: Anomaly detection and diagnosis from system logs through deep learning. In ACM SIGSAC Conference on Computer and Communications Security, 2017.
[9] Xueyuan Han, Thomas Pasquier, Adam Bates, James Mickens, and Margo Seltzer. Unicorn: Runtime provenance-based detector for advanced persistent threats. arXiv preprint arXiv:2001.01525, 2020.
[10] Wajih Ul Hassan, Adam Bates, and Daniel Marino. Tactical provenance analysis for endpoint detection and response systems. In Proceedings of the IEEE Symposium on Security and Privacy, 2020.
[11] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen, Kangkook Jee, Zhichun Li, and Adam Bates. NoDoze: Combatting threat alert fatigue with automated provenance triage. In Network and Distributed Systems Security Symposium, 2019.
[12] Wajih Ul Hassan, Mark Lemay, Nuraini Aguse, Adam Bates, and Thomas Moyer. Towards scalable cluster auditing through grammatical inference over provenance graphs. In Network and Distributed Systems Security Symposium, 2018.
[13] Wajih Ul Hassan, Mohammad A Noureddine, Pubali Datta, and Adam Bates. Omega-log: High-fidelity attack investigation via transparent multi-layer log analysis. In Network and Distributed Systems Security Symposium, 2020.
[15] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural computation, 9(8):1735–1780, 1997.
[16] Md Nahid Hossain, Sanaz Sheikhi, and R Sekar. Combating dependence explosion in forensic analysis using alternative tag propagation semantics. In IEEE S&P, 2020.
[17] FireEye Threat Intelligence. Second Adobe Flash zero-day CVE-2015-5122 from HackingTeam exploited in strategic web compromise targeting Japanese victims. https://www.fireeye.com/blog/threat-research/2015/07/second_adobe_flashz0.html, 2015. Accessed: 2020-06-06.
[18] Genwei Jonathan Jiang, Rahul Mohandas, Leath-CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler. https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html, 2017. Accessed: 2020-06-06.
[19] Samuel T King, Zhuoqing Morley Mao, Dominic G Lucchetti, and Peter M Chen. Enriching intrusion alerts through multi-host causality. In Network and Distributed Systems Security Symposium, 2005.
[20] Yonghwi Kwon, Fei Wang, Weihang Wang, Kyu Hyung Lee, Wen-Chuan Lee, Shiqing Ma, Xiangyu Zhang, Dongyan Xu, Somesh Jha, Gabriela Ciocarlie, et al. MCI: Modeling-based causality inference in audit logging for attack investigation. In Network and Distributed Systems Security Symposium, 2018.
[21] Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. High accuracy attack provenance via binary-based execution partition. In Network and Distributed Systems Security Symposium, 2013.
[22] Brooks Li and Joseph C. Chen. Exploit kits in 2015: Flash bugs, compromised sites, malvertising dominate. https://blog.trendmicro.com/trendlabs-security-intelligence/exploit-kits-2015-flash-bugs-compromised-sites-malvertising-dominate/, 2016. Accessed: 2020-06-06.
[23] Andy Liaw, Matthew Wiener, et al. Classification and regression by random forest. R news, 2(3):18–22, 2002.
[24] Fucheng Liu, Yu Wen, Dongxue Zhang, Xihe Jiang, Xinyu Xing, and Dan Meng. Log2vec: A heterogeneous graph embedding based approach for detecting cyber threats within enterprise. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, 2019.
[25] Yushan Liu, Mu Zhang, Ding Li, Kangkook Jee, Zhichun Li, Zhenyu Wu, Junghwan Rhee, and Prateek Mittal. Towards a timely causality analysis for enterprise security. In Network and Distributed Systems Security Symposium, 2018.
[26] Shiqing Ma, Juan Zhai, Fei Wang, Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. MPI: Multiple perspective attack investigation with semantics-aware execution partitioning. In USENIX Security Symposium, 2017.
[14] Sepp Hochreiter. The vanishing gradient problem during learning recurrent neural nets and problem solutions. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 6(02):107–116, 1998.
[27] Shiqing Ma, Xiangyu Zhang, and Dongyan Xu. ProTracer: Towards practical provenance tracing by alternating between logging and tainting. In Network and Distributed Systems Security Symposium, 2016.
[28] Trend Micro. Rig exploit kit now using CVE-2018-8174 to deliver Monero miner. https://blog.trendmicro.com/trendlabs-security-intelligence/rig-exploit-kit-now-using-cve-2018-8174-to-deliver-monero-miner/, 2018. Accessed: 2020-06-06.
[29] Tomas Mikolov, Kai Chen, Greg Corrado, and Jeffrey Dean. Efficient estimation of word representations in vector space. arXiv preprint arXiv:1301.3781, 2013.
[30] Tomáš Mikolov, Wen-tau Yih, and Geoffrey Zweig. Linguistic regularities in continuous space word representations. In Proceedings of the 2013 conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 746–751, 2013.
[31] Sadegh M Milajerdi, Rigel Gjomemo, Birhanu Eshete, R Sekar, and VN Venkatakrishnan. Holmes: Real-time APT detection through correlation of suspicious information flows. In IEEE Symposium on Security and Privacy, 2019.
[42] Yun Shen, Enrico Mariconti, Pierre Antoine Vervier, and Gianluca Stringhini. Tiresias: Predicting security events through deep learning. In ACM SIGSAC Conference on Computer and Communications Security, 2018.
[43] Yun Shen and Gianluca Stringhini. Attack2vec: Leveraging temporal word embeddings to understand the evolution of cyberattacks. In USENIX Security Symposium, 2019.
[44] Riyanat Shittu, Alex Healing, Robert Ghanea-Hercock, Robin Bloomfield, and Muttukrishnan Rajarajan. Intrusion alert prioritization and attack detection using post-correlation analysis. Computers & Security, 50:1–15, 2015.
[45] Ilya Sutskever, Oriol Vinyals, and Quoc V Le. Sequence to sequence learning with neural networks. In Advances in Neural Information Processing Systems, pages 3104–3112, 2014.
[46] Johan AK Suykens and Joos Vandewalle. Least squares support vector machine classifiers. Neural Processing Letters, 9(3):293–300, 1999.
[32] MITRE. MITRE ATT&CK. https://attack.mitre.org/, 2020.
[47] Jacob Torrey. DARPA Transparent Computing. https://www.darpa.mil/program/transparent-computing, 2014. Accessed: 2020-06-06.
[33] Nagios. Network, server, and log monitoring software. https://www.nagios.com, 2019. Accessed: 2020-06-06.
[48] W3C. PROV-DM Data Model. https://www.w3.org/TR/2013/PROV-DM/, 2013.
[34] Pierluigi Paganini. Phishing campaigns target US government agencies exploiting Hacking Team flaw CVE-2015-5119. https://securityaffairs.co/wordpress/38707/cyber-crime/phishing-cve-2015-5119.html, 2015. Accessed: 2020-06-06.
[35] Thomas Pasquier, Xueyuan Han, Mark Goldstein, Thomas Moyer, David Eyers, Margo Seltzer, and Jean Bacon. Practical whole-system provenance capture. In ACM Symposium on Cloud Computing, 2017.
[36] Kexin Pei, Zhongshu Gu, Brendan Saltaformaggio, Shiqing Ma, Fei Wang, Zhiwei Zhang, Luo Si, Xiangyu Zhang, and Dongyan Xu. HERCULE: Attack story reconstruction via community discovery on correlated log graph. In The 32nd Annual Conference on Computer Security Applications, 2016.