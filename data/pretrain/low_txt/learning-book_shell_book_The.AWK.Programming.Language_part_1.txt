# The AWK Programming Language

## PolyAWK Software
### The Toolbox Language for MS-DOS
#### Authors: ALFRED V. AHO, BRIAN W. KERNIGHAN, PETER J. WEINBERGER
##### AT&T Bell Laboratories, Murray Hill, New Jersey
###### Published by: ADDISON-WESLEY PUBLISHING COMPANY
- Don Mills, Ontario
- Wokingham, England
- Amsterdam
- Bonn
- Reading, Massachusetts
- Menlo Park, California
- New York
- Sydney
- Singapore
- Tokyo
- Madrid
- Bogot√°
- Santiago
- San Juan

---

## Book Details
- **Series:** Addison-Wesley Series in Computer Science
- **Consulting Editor:** Michael A. Harrison
- **Library of Congress Cataloging-in-Publication Data:**
  - **Author:** Aho, Alfred V.
  - **Title:** The AWK programming language
  - **Subjects:** AWK (Computer program language)
  - **ISBN:** 0-201-07981-X
  - **Classification:** QA76.73.A95A35 1988
  - **LC Control Number:** 87-17566
- **Typesetting:** Times Roman and Courier, using an Autologic APS-5 phototypesetter and a DEC VAX 8550 running the 9th Edition of the UNIX operating system
- **Copyright:** 1988 by Bell Telephone Laboratories, Incorporated
- **Printed in:** United States of America
- **Published Simultaneously in:** Canada
- **UNIX is a registered trademark of AT&T.**

---

## Preface

Computer users often need to perform simple, mechanical data manipulation tasks such as changing data formats, validating data, searching for specific items, summing numbers, and generating reports. These tasks should be automated, but writing a special-purpose program in a standard language like C or Pascal can be cumbersome.

**AWK** is a programming language designed to handle these tasks with very short programs, often just one or two lines long. An AWK program consists of patterns and actions that specify what to look for in the input data and what to do when it is found. AWK searches through files for lines that match the specified patterns and executes the corresponding actions. The language supports string and number operations, field processing, and array handling. Unlike C, there are no type declarations, and strings and numbers are handled seamlessly.

AWK automatically splits each input line into fields, making it easy to write concise and effective programs. This brevity and convenience make AWK ideal for quick, one-off data manipulations. Additionally, AWK's expressive power and ease of use make it valuable for prototyping larger programs. You can start with a few lines, refine the program, and experiment with different designs quickly. Once the design is finalized, it is straightforward to translate the AWK program into another language.

---

## Organization of the Book

This book aims to teach you how to use AWK effectively. 

- **Chapter 1** is a tutorial on the basics needed to get started. Even after reading a few pages, you should be able to write useful programs. The examples in this chapter are short and simple, suitable for interactive use.
  
- **Chapter 2** covers the entire language systematically. While it is comprehensive, it may be a bit dry. The rest of the book contains a variety of examples to demonstrate the breadth of AWK's applications and how to use its features effectively. Some programs are in regular use, while others are included for their educational value or simply because they are fun.

- **Chapter 3** focuses on data retrieval, transformation, reduction, and validation, which are the primary tasks for which AWK was designed. It also discusses handling multi-line data, such as address lists.

- **Chapter 4** explores the use of AWK for managing small, personal databases and generating reports from them. It includes the construction of a simple relational database system.

- **Chapter 5** covers text processing, including generating and manipulating text. One example is an indexing program used for this book.

- **Chapter 6** highlights AWK's suitability for writing small translators, such as assemblers, graphics languages, and calculators.

- **Chapter 7** focuses on expressing algorithms in AWK. Because of its simplicity and lack of type declarations, AWK is ideal for experimenting with algorithms, testing, and performance evaluation. The chapter includes several sorting algorithms and a version of the Unix `make` program.

- **Chapter 8** discusses the historical context of AWK and provides suggestions for when AWK might be too slow or too limiting.

- **Appendix A** is a summary of the language, and **Appendix B** contains answers to selected exercises.

We recommend starting with Chapter 1 and trying some small examples. Then, skim through Chapter 2, focusing on the summaries and tables. After that, read the subsequent chapters based on your interest. The chapters are nearly independent, so the order is flexible.

---

## The Examples

The examples in this book serve multiple purposes:

- **Show How to Use AWK Well:** We include a wide variety of useful constructions, emphasizing features like associative arrays and regular expressions.

- **Demonstrate AWK's Versatility:** AWK has been used in diverse applications, from database management to circuit design, numerical analysis, graphics, compilers, and system administration. We hope these examples will inspire new possibilities for you.

- **Illustrate Common Computing Operations:** The book contains a relational database system, an assembler, a file-update program, and many other examples. Each program is concise and conveys the essence of the operation.

- **Show Different Approaches to Problem Solving:** We illustrate rapid prototyping, modular programming, and writing programs that generate other programs. These ideas, while presented in the context of AWK, are broadly applicable and should be part of every programmer's toolkit.

All examples have been tested directly from the text, which is in machine-readable form. We have aimed for error-free programs, but we have not added unnecessary features or made them completely robust against all possible invalid inputs, preferring to focus on the essentials.

---

## Evolution of the AWK Language

AWK was originally designed and implemented by the authors in 1977, partly as an experiment to generalize the Unix tools `grep` and `sed` to handle both text and numbers. It was based on our interests in regular expressions and programmable editors. Although intended for short programs, its combination of features attracted users who wrote larger programs, leading to the addition of new features in a 1985 version.

Major enhancements include user-defined functions, dynamic regular expressions, additional built-in functions and variables, new operators and statements, and improved error messages. The examples in Chapter 1 use only the original version's features, while later chapters take advantage of the new features.

This version of AWK is part of Unix System V Release 3.1. Source code is available through AT&T's Unix System Toolchest software distribution system. For more information, contact AT&T Unix Europe in London or AT&T Unix Pacific in Tokyo.

While AWK was developed under Unix, it is useful in any environment, including MS-DOS. Further information is available from Addison-Wesley.

AWK is not perfect; it has irregularities, omissions, and some performance issues. However, it is a rich and versatile language, useful in many cases. We hope you find it as valuable as we do.

---

## Acknowledgments

We are grateful to friends who provided comments and suggestions on drafts of this book. Special thanks to Jon Bentley, whose extensive experience with AWK and careful reading greatly improved the book. Doug McIlroy also deserves recognition for his invaluable feedback. Other contributors include Susan Aho, Jaap Akkerhuis, Lorinda Cherry, Chris Fraser, Eric Grosse, Riccardo Gusela, Bob Herbst, Mark Kernighan, John Linderman, Bob Martin, Howard Moscovitz, Gerard Schmitt, Don Swartwout, Howard Trickey, Peter van Eijk, Chris Van Wyk, and Mihalis Yannakakis. We thank them all.

- Alfred V. Aho
- Peter J. Weinberger
- Brian W. Kernighan

---

## Contents

### Preface

### Chapter 1: An AWK Tutorial
- **1.1 Getting Started**
  - The Structure of an AWK Program
  - Running an AWK Program
  - Errors
- **1.2 Simple Output**
  - Printing Every Line
  - Printing Certain Fields
  - NF, the Number of Fields
  - Computing and Printing
  - Printing Line Numbers
  - Putting Text in the Output
- **1.3 Fancier Output**
  - Lining Up Fields
  - Sorting the Output
- **1.4 Selection**
  - Selection by Comparison
  - Selection by Computation
  - Selection by Text Content
  - Combinations of Patterns
  - Data Validation
  - BEGIN and END
- **1.5 Computing with AWK**
  - Computing Sums and Averages
  - Counting
  - Handling Text
  - String Concatenation
  - Printing the Last Input Line
  - Built-in Functions
  - Counting Lines, Words, and Characters
- **1.6 Control-Flow Statements**
  - If-Else Statement
  - While Statement
  - For Statement
- **1.7 Arrays**
- **1.8 A Handful of Useful "One-liners"**
- **1.9 What Next?**

### Chapter 2: The AWK Language
- **2.1 Patterns**
  - BEGIN and END
  - Expressions as Patterns
  - String-Matching Patterns
  - Regular Expressions
  - Compound Patterns
  - Range Patterns
  - Summary of Patterns
- **2.2 Actions**
  - Expressions
  - Control-Flow Statements
  - Empty Statement
  - Arrays
- **2.3 User-Defined Functions**
- **2.4 Output**
  - The print Statement
  - Output Separators
  - The printf Statement
  - Output into Files
  - Output into Pipes
  - Closing Files and Pipes
- **2.5 Input**
  - Input Separators
  - Multiline Records
  - The getline Function
  - Command-Line Variable Assignments
  - Command-Line Arguments
- **2.6 Interaction with Other Programs**
  - The system Function
- **2.7 Summary**

### Chapter 3: Data Processing
- **3.1 Data Transformation and Reduction**
  - Summing Columns
  - Computing Percentages and Quantiles
  - Numbers with Commas
  - Fixed-Field Input
  - Program Cross-Reference Checking
  - Formatted Output
- **3.2 Data Validation**
  - Balanced Delimiters
  - Password-File Checking
  - Generating Data-Validation Programs
  - Which Version of AWK?
- **3.3 Bundle and Unbundle**
- **3.4 Multiline Records**
  - Records Separated by Blank Lines
  - Processing Multiline Records
  - Records with Headers and Trailers
  - Name-Value Data
- **3.5 Summary**

### Chapter 4: Reports and Databases
- **4.1 Generating Reports**
  - A Simple Report
  - A More Complex Report
- **4.2 Packaged Queries and Reports**
  - Form Letters
- **4.3 A Relational Database System**
  - The relfile
  - Natural Joins
  - q, an awk-like query language
  - qawk, a q-to-awk translator
- **4.4 Summary**

### Chapter 5: Processing Words
- **5.1 Random Text Generation**
  - Random Choices
  - Clich√© Generation
  - Random Sentences
- **5.2 Interactive Text-Manipulation**
  - Skills Testing: Arithmetic
  - Skills Testing: Quiz

---