### 5.4 Policy Specification

In our specific use case, we prevent WhatsApp from accessing all contact phone numbers that belong to the corporate domain. The domain name is stored in the `kABPersonOrganizationProperty` field of the `ABRecordRef` class. When WhatsApp retrieves the contacts, we validate each record to check if the `kABPersonOrganizationProperty` is set to "corporate." If it is, we replace the entire record with `NULL`. The specific implementation of this policy is detailed in Appendix A.

### 7. Related Work

The work related to XiOS can be broadly classified into two categories: protection schemes for iOS and runtime protection mechanisms aimed at hiding function pointers and instrumenting function calls.

#### iOS Security

Several proposals aim to enhance the security of iOS-based systems. PiOS, a static privacy analysis tool, performs offline path validation on an application's control-flow graph [16]. While PiOS revealed that many apps leak device IDs to developers, it cannot detect Jekyll-like attacks [35], where malicious behavior is only triggered at runtime. On the other hand, MoCFI [15] and PSiOS [37] could potentially prevent such attacks by enforcing control-flow integrity (CFI) and fine-grained sandboxing policies. However, both solutions require jailbreaking and suffer from performance issues, limiting their practical deployment. In contrast, XiOS avoids jailbreaking and incurs only modest performance overhead.

#### Runtime Protection Mechanisms

For Android-based systems, several Inline Reference Monitors (IRM) have been proposed. These typically insert a policy hook or check before a critical function is called at the Dalvik Bytecode level [7, 22]. Aurasium [39] is most closely related to our approach, as it deploys a similar redirection technique by overwriting entries in the global offset table (GOT) with the start address of policy check functions. However, Aurasium does not provide a mechanism to hide the actual runtime addresses in a shadow table, making it vulnerable to memory disclosure attacks. Additionally, Aurasium can be bypassed through native code that directly invokes system calls [13].

Xu et al. proposed randomizing the GOT section at load-time but allowing its address to be discovered through the procedure linkage table (PLT) section [38]. Roglia et al. improved this by randomizing the GOT and rewriting the PLT region [29]. These mechanisms can be adapted to iOS, but they require higher privileges and integration into the operating system, unlike our solution.

Another approach involves adding a wrapper to verify parameters passed to a function [9, 8]. The Linux `LD_PRELOAD` linker facility is commonly used to force applications to use a wrapper function instead of the actual external function. However, this method is impractical for every external function due to space and complexity constraints, allowing adversaries to exploit uninstrumented functions.

In the domain of runtime attack mitigation, Address Space Layout Randomization (ASLR) is used to protect against memory disclosure attacks. ASLR randomizes the start address of code and data segments. Recent schemes have been proposed to enforce fine-grained code randomization [10, 18, 21, 26, 23, 36, 12, 11]. However, sophisticated memory disclosure attacks [31] can bypass ASLR-based schemes. To mitigate the attacks discussed in Sections 2.2 and 3, one would need operating system support and a jailbreak, as ASLR must be applied to the dynamic loader and public/private frameworks.

### 8. Summary and Future Work

Recent attacks have demonstrated that the current design of iOS is vulnerable to various attacks that undermine the iOS sandboxing model, leading to the invocation of private APIs (e.g., sending text messages in the background). While previous attacks relied on specific assumptions like the availability of a public framework, we showed that the default iOS application structure itself can be exploited to invoke dangerous private APIs.

Existing solutions suffer from performance overhead or require a jailbreak. We introduce XiOS, a new hardening service that implants an inline reference monitor into an iOS application without requiring a jailbreak or source code. This reference monitor efficiently prevents an application from inferring addresses of private APIs and enforces (optional) developer-defined policies on public APIs. We demonstrate the benefits of this by enabling a contacts filtering mechanism for WhatsApp.

In the future, we plan to extend XiOS with a web frontend where end-users can upload custom policies that are automatically translated into C code and deployed at runtime. Additionally, we aim to validate entire call chains rather than just enforcing access control on a per-function level.

### 9. References

[1] Gensystek benchmark. http://www.ooparts-universe.com/apps/app_gensystek.html.
[2] Lazy binding. http://developer.blackberry.com/native/documentation/core/com.qnx.doc.neutrino.prog/topic/devel_lazy_binding.html.
[3] WhatsApp. http://www.whatsapp.com/.
[4] Apple Inc. App review. https://developer.apple.com/appstore/guidelines.html.
[5] Apple Inc. iOS developer enterprise program. https://developer.apple.com/programs/ios/enterprise/.
[6] Apple Inc. iOS frameworks. https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/iPhoneOSFrameworks/iPhoneOSFrameworks.html.
[7] M. Backes, S. Gerling, C. Hammer, M. Maffei, and P. von Styp-Rekowsky. AppGuard: Enforcing user requirements on Android apps. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS’13.
[8] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time defense against stack smashing attacks. In USENIX Annual Technical Conference, ATC ’00.
[9] A. Barenghi, G. Pelosi, and F. Pozzi. Drop-in control flow hijacking prevention through dynamic library interception. In Tenth International Conference on Information Technology: New Generations (ITNG’13).
[10] E. G. Barrantes, D. H. Ackley, T. S. Palmer, D. Stefanovic, and D. D. Zovi. Randomized instruction set emulation to disrupt binary code injection attacks. In ACM Conference on Computer and Communications Security, CCS ’03.
[11] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address obfuscation: An efficient approach to combat a broad range of memory error exploits. In USENIX Security, SSYM’03.
[12] S. Bhatkar, R. Sekar, and D. C. DuVarney. Efficient techniques for comprehensive protection from memory error exploits. In USENIX Security, SSYM’05.
[13] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and fine-grained mandatory access control on Android for diverse security and privacy policies. In USENIX Security, Security ’13.
[14] Clutch. Clutch. https://github.com/KJCracks/Clutch.
[30] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In ACM Conference on Computer and Communications Security, CCS ’07.
[15] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, [31] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, R. Hund, S. Nürnberger, and A.-R. Sadeghi. MoCFI: A framework to mitigate control-flow attacks on smartphones. In Network and Distributed System Security, NDSS ’12.
C. Liebchen, and A.-R. Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In IEEE Security and Privacy, SP ’13.
[16] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting privacy leaks in iOS applications. In Network and Distributed System Security, NDSS ’11.
[17] A. P. Felt, M. Finifter, E. Chin, S. Hanna, and D. Wagner. A survey of mobile malware in the wild. In ACM Workshop on Security and Privacy in Smartphones and Mobile Devices, SPSM ’11.
[18] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced operating system security through efficient and fine-grained address space randomization. In USENIX Security ’12.
[19] J. Han, S. M. Kywe, Q. Yan, F. Bao, R. Deng, D. Gao, Y. Li, and J. Zhou. Launching generic attacks on iOS with approved third-party applications. In Applied Cryptography and Network Security, ACNS ’13.
[20] N. Hardy. The confused deputy: (or why capabilities might have been invented). SIGOPS’98 Oper. Syst. Rev.
[21] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. Davidson. ILR: Where’d my gadgets go? In IEEE Security and Privacy, SP’12.
[22] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and T. Millstein. Dr. Android and Mr. Hide: Fine-grained permissions in Android applications. In Workshop on Security and Privacy in Smartphones and Mobile Devices, SPSM ’12.
[32] Symantec Corporation. 2013 Internet Security Threat Report, volume 18. http://www.symantec.com/security_response/publications/threatreport.jsp.
[33] T. Backdoor in top iPhone games stole user data, suit claims. http://www.theregister.co.uk/2009/11/06/iphone_games_storm8_lawsuit/, 2014.
[34] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient software-based fault isolation. In ACM Symposium on Operating Systems Principles, SOSP ’93.
[35] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on iOS: when benign apps become evil. In USENIX Security, SSYM’13.
[36] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In ACM Conference on Computer and Communications Security, CCS ’12.
[37] T. Werthmann, R. Hund, L. Davi, A.-R. Sadeghi, and T. Holz. PSiOS: bring your own privacy & security to iOS devices. In ACM SIGSAC Symposium on Information, Computer and Communications Security, ASIACCS ’13.
[38] J. Xu, Z. Kalbarczyk, and R. Iyer. Transparent runtime randomization for security. In International Symposium on Reliable Distributed Systems, 2003.
[23] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In Annual Computer Security Applications Conference, ACSAC ’06.
[24] H. Lu. ELF: From the programmer’s perspective. http://linux4u.jinr.ru/usoft/WWW/www_debian.org/Documentation/elf/node7.html.
[25] Microsoft. Data Execution Prevention (DEP). http://support.microsoft.com/kb/875352/EN-US/, 2006.
[26] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In IEEE Security and Privacy, SP ’12.
[27] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP exploit mitigation using indirect branch tracing. In USENIX Conference on Security, Security ’13.
[28] PGbiz. Count of active applications in the App Store. http://www.pocketgamer.biz/metrics/app-store/app-count/, 2014.
[29] G. F. Roglia, L. Martignoni, R. Paleari, and D. Bruschi. Surgically returning to randomized lib(c). In Annual Computer Security Applications Conference, ACSAC ’09.
[40] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, N. Fullagar, and G. Inc. Native Client: A sandbox for portable, untrusted x86 native code. In IEEE Security and Privacy, Oakland ’09.

### Appendix A: WhatsApp Policy Definition

```c
unsigned long post_external_call(const char *function_name, const unsigned long returned_value) {
    if (xios_strcmp(function_name, "addressGetID") == 0) {
        char *companyName = ABRecordCopyValue(person, kABPersonOrganizationProperty);
        if (xios_strcmp("corporate", companyName) == 0) {
            return 0;
        }
    }
    return returned_value;
}
```

This code snippet defines a policy for WhatsApp that checks if the `kABPersonOrganizationProperty` is set to "corporate" and, if so, returns `0` to nullify the contact record.