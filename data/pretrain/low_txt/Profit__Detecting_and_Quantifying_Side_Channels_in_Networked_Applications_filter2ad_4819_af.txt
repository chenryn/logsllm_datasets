### Dimensional Features and Information Leakage

We compute the leakage for multiple features, but we analyze them individually. As exemplified by the TOURPLANNER vulnerability (detailed in Section VI-A), when several features are combined in a specific manner, they can leak more information than each feature alone or even all of them combined trivially. Quantifying the joint leakage of combined features is straightforward if one assumes that all features are independent. However, in this context, such independence is almost never the case. Quantifying the joint leakage, i.e., the correlation with the secret, of multiple partially correlated features is a complex task, which is beyond the scope of this article and will be addressed in future work. Nevertheless, in many cases, Proﬁt will still report partial leakage for one or more of the combinable features, which can at least guide the user in the right direction (see Section VI-C).

### Local Area Network Environment

The network environment and hardware setup used in this work adhere to the DARPA STAC reference platform specification. As illustrated in Figure 6, the configuration uses separate machines for the client, server, and eavesdropper, connected via a standard Ethernet local area network (LAN). This setup provides favorable conditions, such as low network latency, minimal round-trip time variance, and low rates of phenomena like packet loss or reordering compared to the public Internet. Despite these controlled conditions, our experimental results show that network noise is still a significant factor and must be statistically modeled and accounted for. The relatively well-controlled LAN environment serves as an excellent testbed for new ideas, which can later be adapted to less protected settings like the public Internet.

### Related Work

One relevant paper uses sequence alignment algorithms on the contents of unencrypted packets to infer the contents of similar segments [23]. This technique applies to the plain-text contents of the packets. In contrast, our work applies sequence alignment algorithms to the visible attributes of encrypted packets to automatically detect phases in network interactions, without assuming that the payloads are unencrypted.

Chapman et al. [9] present methods for detecting potential side channels in client-server application traffic. Their approach involves crawling the web application to build a model of the system side channel and using the Fisher criterion to quantify leakage. Chen et al. [12] focus on differentiating leakage measurements by analyzing state diagrams for web applications. Mather et al. [35] use packet-level analysis of network traffic to estimate information leakage for network applications. Other works present specialized techniques for discovering specific types of vulnerabilities, such as identifying the source identity of an HTTP stream [7], [34] or automatically determining network-traffic-based fingerprints for websites [26].

Conti et al. [17] use a similar set of side-channel packet metadata to infer properties about encrypted network streams. They analyze the shape of sequences of packet sizes and use machine learning and classification techniques leveraging dynamic time warping (DTW) [4]. However, their approach is specifically tailored to guessing which action (from a fixed set of smartphone applications) was executed by a user. Our approach is more general, aiming to support explorative side-channel analysis of arbitrary applications that communicate over a network stream. We experimented with DTW in early prototypes of Proﬁt’s alignment but found it unsuitable for our needs due to the presence of arbitrarily long unalignable sections between alignable patterns. This led us to experiment with multiple sequence alignment [38] instead.

The BLAZER tool [1] also addresses applications in the DARPA STAC benchmark. It focuses on showing safety properties of non-vulnerable programs but can indicate possible side-channel vulnerabilities by detecting observationally imbalanced program branches using a white-box static program analysis approach. Another recent tool, SCANNER, has shown success in statically detecting side-channel vulnerabilities in web applications resulting from secret-dependent resource usage differences [11]. The SIDEBUSTER tool focuses on side-channel detection and quantification during the software development phase using taint analysis [48]. These three tools assume access to the source code of the application, whereas Proﬁt uses a fully black-box approach. Several works analyze mobile applications for side-channels in networks of mobile devices [17], [18], [47].

Another line of work relies on formal methods and software verification techniques, such as symbolic execution along with model-counting constraint solvers, to statically quantify the amount of information an attacker can gain about a secret in a system [28], [40]–[42]. These works analyze various attacker models, from active attackers who adaptively query the system to incrementally infer secret information to passive attackers who observe systems they cannot query. They use methods from quantitative information flow [5], [15], [45] to automatically derive bounds on side-channel information leakage. These are white-box analysis techniques that rely on the ability to symbolically execute a given application.

### Conclusions and Future Work

Proﬁt combines network trace alignment, phase detection, feature selection, feature probability distribution estimation, and entropy computation to quantify the amount of information leakage due to network traffic. Our experimental evaluation on DARPA STAC applications demonstrates that Proﬁt can identify the features that leak information for vulnerable application variants and correctly order the amount of leakage in different variants of the same application. In the future, we plan to extend Proﬁt with:
1. Fuzzing techniques for input generation.
2. More flexible ways to estimate the probability distributions of features, such as kernel density estimation.
3. Feature reduction techniques to reduce the feature space.
4. Relational analysis to quantify joint information leakage from correlated features.

### Acknowledgements

We would like to thank the anonymous reviewers for their valuable feedback and the MAFFT authors for their assistance. This material is based on research sponsored by DARPA under agreement number FA8750-15-2-0087. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

### References

[1] T. Antonopoulos, P. Gazzillo, M. Hicks, E. Koskinen, T. Terauchi, and S. Wei, “Decomposition instead of self-composition for proving the absence of timing channels,” in Proceedings of the 38th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI 2017, 2017, pp. 362–375.

[2] G. J. Barton and M. J. Sternberg, “A strategy for the rapid multiple alignment of protein sequences. Confidence levels from tertiary structure comparisons,” J. Mol. Biol., vol. 198, no. 2, pp. 327–337, Nov 1987.

[3] M. P. Berger and P. J. Munson, “A novel randomized iterative strategy for aligning multiple protein sequences,” Comput. Appl. Biosci., vol. 7, no. 4, pp. 479–484, Oct 1991.

[4] D. J. Berndt and J. Clifford, “Using dynamic time warping to find patterns in time series.” in KDD workshop, vol. 10, no. 16, WA, 1994, pp. 359–370.

[5] F. Biondi, A. Legay, B. F. Nielsen, P. Malacaria, and A. Wasowski, “Information leakage of non-terminating processes,” in 34th International Conference on Foundation of Software Technology and Theoretical Computer Science, FSTTCS 2014, 2014, pp. 517–529.

[6] P. Biondi. Scapy: Packet crafting for Python. https://scapy.net/.

[7] G. D. Bissias, M. Liberatore, D. Jensen, and B. N. Levine, Privacy Vulnerabilities in Encrypted HTTP Streams. Springer Berlin Heidelberg, 2006, pp. 1–11.

[8] F. Bunea, R. B. Tsybakov, and M. H. Wegkamp, “Sparse density estimation with l1 penalties,” in In Proceedings of 20th Annual Conference on Learning Theory (COLT 2007) (2007. Springer-Verlag, 2007, pp. 530–543.

[9] P. Chapman and D. Evans, “Automated black-box detection of side-channel vulnerabilities in web applications,” in Proceedings of the 18th ACM Conference on Computer and Communications Security, ser. CCS '11. New York, NY, USA: ACM, 2011, pp. 263–274.

[10] K. Chatzikokolakis, T. Chothia, and A. Guha, “Statistical measurement of information leakage,” in International Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2010, pp. 390–404.

[11] J. Chen, O. Olivo, I. Dillig, and C. Lin, “Static detection of asymptotic resource side-channel vulnerabilities in web applications,” in Proceedings of the 32Nd IEEE/ACM International Conference on Automated Software Engineering, ser. ASE 2017. Piscataway, NJ, USA: IEEE Press, 2017, pp. 229–239.

[12] S. Chen, K. Zhang, R. Wang, and X. Wang, “Side-channel leaks in web applications: A reality today, a challenge tomorrow,” 2010 IEEE Symposium on Security and Privacy (SP), vol. 00, pp. 191–206, 2010.

[13] T. Chothia and A. Guha, “A statistical test for information leaks using continuous mutual information,” in 2011 24th Computer Security Foundations Symposium. IEEE, 2011, pp. 177–190.

[14] T. Chothia, Y. Kawamoto, and C. Novakovic, “A tool for estimating information leakage,” in International Conference on Computer Aided Verification. Springer, 2013, pp. 690–695.

[15] D. Clark, S. Hunt, and P. Malacaria, “Quantitative analysis of the leakage of confidential data,” Electr. Notes Theor. Comput. Sci., vol. 59, no. 3, pp. 238–251, 2001. [Online]. Available: https://doi.org/10.1016/S1571-0661(04)00290-7

[16] G. Combs et al., “Wireshark-network protocol analyzer,” Version 0.99, vol. 5, 2008.

[17] M. Conti, L. V. Mancini, R. Spolaor, and N. V. Verde, “Analyzing android encrypted network traffic to identify user actions,” IEEE Transactions on Information Forensics and Security, vol. 11, no. 1, pp. 114–125, Jan 2016.

[18] M. Conti, Q. Li, A. Maragno, and R. Spolaor, “The dark side(-channel) of mobile devices: A survey on network traffic analysis,” CoRR, vol. abs/1708.03766, 2017. [Online]. Available: http://arxiv.org/abs/1708.03766

[19] T. M. Cover and J. A. Thomas, Elements of Information Theory (Wiley Series in Telecommunications and Signal Processing). Wiley-Interscience, 2006.

[20] DARPA. (2015) The Space-Time Analysis for Cybersecurity (STAC) Program. [Online]. Available: http://www.darpa.mil/program/space-time-analysis-for-cybersecurity

[21] DARPA. (2017) Public release items for the DARPA Space-Time Analysis for Cybersecurity (STAC) program. [Online]. Available: https://github.com/Apogee-Research/STAC

[22] I. Elias, “Settling the intractability of multiple alignment,” J. Comput. Biol., vol. 13, no. 7, pp. 1323–1339, Sep 2006.

[23] O. Esoul and N. Walkinshaw, “Using segment-based alignment to extract packet structures from network traces,” in 2017 IEEE International Conference on Software Quality, Reliability and Security (QRS), July 2017, pp. 398–409.

[24] A. P. Felt, R. Barnes, A. King, C. Palmer, C. Bentzel, and P. Tabriz, “Measuring HTTPS adoption on the web,” in 26th USENIX Security Symposium (USENIX Security 17). Vancouver, BC: USENIX Association, 2017, pp. 1323–1338. [Online]. Available: https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/felt

[25] D. F. Feng and R. F. Doolittle, “Progressive sequence alignment as a prerequisite to correct phylogenetic trees,” J. Mol. Evol., vol. 25, no. 4, pp. 351–360, 1987.

[26] A. Hintz, Fingerprinting Websites Using Traffic Analysis. Springer Berlin Heidelberg, 2003, pp. 171–178.

[27] X. Hong, S. Chen, A. Qatawneh, K. Daqrouq, M. Sheikh, and A. Morfeq, “Sparse probability density function estimation using the minimum integrated square error,” Neurocomputing, vol. 115, pp. 122 – 129, 2013.

[28] X. Huang and P. Malacaria, “Sideauto: quantitative information flow for side-channel leakage in web applications,” in Proceedings of the 12th annual ACM Workshop on Privacy in the Electronic Society, WPES 2013, Berlin, Germany, November 4, 2013, 2013, pp. 285–290. [Online]. Available: http://doi.acm.org/10.1145/2517840.2517869

[29] J. D. Hunter, “Matplotlib: A 2D graphics environment,” Computing In Science & Engineering, vol. 9, no. 3, pp. 90–95, 2007.

[30] P. Jacob and P. E. Oliveira, “Relative smoothing of discrete distributions with sparse observations,” Journal of Statistical Computation and Simulation, vol. 81, no. 1, pp. 109–121, 2011.

[31] E. Jones, T. Oliphant, P. Peterson et al., “SciPy: Open source scientific tools for Python,” 2001–. [Online]. Available: http://www.scipy.org/

[32] K. Katoh, K. Misawa, K. Kuma, and T. Miyata, “MAFFT: a novel method for rapid multiple sequence alignment based on fast Fourier transform,” Nucleic Acids Research, vol. 30, no. 14, pp. 3059–3066, 2002. [Online]. Available: http://dx.doi.org/10.1093/nar/gkf436

[33] M. A. Larkin, G. Blackshields, N. P. Brown, R. Chenna, P. A. McGettigan, H. McWilliam, F. Valentin, I. M. Wallace, A. Wilm, R. Lopez, J. D. Thompson, T. J. Gibson, and D. G. Higgins, “Clustal W and Clustal X version 2.0,” Bioinformatics, vol. 23, no. 21, pp. 2947–2948, Nov 2007.

[34] M. Liberatore and B. N. Levine, “Inferring the source of encrypted HTTP connections,” in Proceedings of the 13th ACM Conference on Computer and Communications Security, ser. CCS '06. New York, NY, USA: ACM, 2006, pp. 255–263. [Online]. Available: http://doi.acm.org/10.1145/1180405.1180437

[35] L. Mather and E. Oswald, “Quantifying side-channel information leakage from web applications,” IACR Cryptology ePrint Archive, vol. 2012, p. 269, 2012. [Online]. Available: http://eprint.iacr.org/2012/269

[36] S. B. Needleman and C. D. Wunsch, “A general method applicable to the search for similarities in the amino acid sequence of two proteins,” J. Mol. Biol., vol. 48, no. 3, pp. 443–453, Mar 1970.

[37] C. Notredame, D. G. Higgins, and J. Heringa, “T-Coffee: A novel method for fast and accurate multiple sequence alignment,” J. Mol. Biol., vol. 302, no. 1, pp. 205–217, Sep 2000.

[38] C. Notredame, “Progress in multiple sequence alignment: a survey,” Pharmacogenomics, vol. 3, no. 1, pp. 131–144, 2002.

[39] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay, “Scikit-learn: Machine learning in Python,” Journal of Machine Learning Research, vol. 12, pp. 2825–2830, 2011.

[40] Q. Phan, L. Bang, C. S. Pasareanu, P. Malacaria, and T. Bultan, “Synthesis of adaptive side-channel attacks,” in 30th IEEE Computer Security Foundations Symposium, CSF 2017, Santa Barbara, CA, USA, August 21-25, 2017, 2017, pp. 328–342. [Online]. Available: https://doi.org/10.1109/CSF.2017.8

[41] Q. Phan, P. Malacaria, C. S. Pasareanu, and M. d’Amorim, “Quantifying information leaks using reliability analysis,” in 2014 International Symposium on Model Checking of Software, SPIN 2014, Proceedings, San Jose, CA, USA, July 21-23, 2014, 2014, pp. 105–108. [Online]. Available: http://doi.acm.org/10.1145/2632362.2632367

[42] Q.-S. Phan, P. Malacaria, O. Tkachuk, and C. S. Păsăreanu, “Symbolic quantitative information flow,” SIGSOFT Softw. Eng. Notes, vol. 37, no. 6, pp. 1–5, Nov. 2012. [Online]. Available: http://doi.acm.org/10.1145/2382756.2382791

[43] C. Shannon, “A mathematical theory of communication,” Bell System Technical Journal, vol. 27, pp. 379–423, 623–656, July, October 1948.

[44] M. Shiga, V. Tangkaratt, and M. Sugiyama, “Direct conditional probability density estimation with sparse feature selection,” Machine Learning, vol. 100, no. 2, pp. 161–182, Sep 2015.

[45] G. Smith, “On the foundations of quantitative information flow,” in Proceedings of the 12th International Conference on Foundations of Software Science and Computational Structures (FOSSACS), 2009, pp. 288–302.

[46] D. X. Song, D. A. Wagner, and X. Tian, “Timing analysis of keystrokes and timing attacks on SSH,” in 10th USENIX Security Symposium, August 13-17, 2001, Washington, D.C., USA, D. S. Wallach, Ed. USENIX, 2001. [Online]. Available: http://www.usenix.org/publications/library/proceedings/sec01/song.html

[47] V. F. Taylor, R. Spolaor, M. Conti, and I. Martinovic, “Robust smartphone app identification via encrypted network traffic analysis,” IEEE Transactions on Information Forensics and Security, vol. 13, no. 1, pp. 63–78, Jan 2018.

[48] K. Zhang, Z. Li, R. Wang, X. Wang, and S. Chen, “Sidebuster: Automated detection and quantification of side-channel leaks in web application development,” in Proceedings of the 17th ACM Conference on Computer and Communications Security, ser. CCS '10. New York, NY, USA: ACM, 2010, pp. 595–606. [Online]. Available: http://doi.acm.org/10.1145/1866307.1866374