# A Usability Study and Critique of Two Password Managers

## Authors
- Sonia Chiasson, School of Computer Science, Carleton University, Ottawa, Canada
- P.C. van Oorschot, School of Computer Science, Carleton University, Ottawa, Canada
- Robert Biddle, Human Oriented Technology Lab, Carleton University, Ottawa, Canada

## Abstract
This paper presents a usability study of two recent password manager proposals: PwdHash (Ross et al., 2005) and Password Multiplier (Halderman et al., 2005). Both studies considered usability issues in greater detail than typical, with PwdHash briefly reporting on a small usability study. Both also provided downloadable implementations. Our study, involving 26 users, found that both proposals suffer from significant usability problems, some of which directly lead to security vulnerabilities. The most significant issues arose from users having inaccurate or incomplete mental models of the software. For example, users reported tasks as easy even when unsuccessful, and believed their passwords were being strengthened when they had failed to engage the appropriate protection mechanisms. Our findings also suggested that ordinary users would be reluctant to use these managers, citing discomfort with "relinquishing control" of their passwords, a lack of perceived need for the managers, and doubts about the security benefits.

## 1. Introduction
Recent password managers, designed to protect web accounts, generate strong passwords from weaker, user-chosen ones, and facilitate safer re-use of passwords across accounts using various forms of salts. Despite the increasing prevalence of passwords, they pose additional challenges for users who accumulate multiple password-protected accounts. This increases security risks, particularly through password reuse and phishing attacks. Security is often seen as an obstacle by users, who may bypass it if it impedes their goals. Thus, usability is crucial for security, especially in password systems.

Our objective was to evaluate the usability progress in security since "Why Johnny Can’t Encrypt" (Whitten & Tygar, 1999). We focused on PwdHash and Password Multiplier, both published in 2005, with a significant focus on usability and available implementations. Although still in beta, these tools aim to help novice users protect their passwords. Our independent study aimed to assess the effectiveness of these systems from a usability standpoint and identify any security issues arising from usability problems.

We found discrepancies between the usability claims in the published papers and our study results. We uncovered numerous usability problems, some leading to security exposures. Many of these issues are not unique to security and are addressed in the Human-Computer Interaction (HCI) and usability literature. This suggests a gap between the HCI and security communities, leading to the rediscovery of well-known principles. Research should focus on usability issues unique to security interfaces.

The authors of both password managers advocate for minimal changes in user experience. Our study reveals that this approach can lead to usability problems and "dangerous errors." We conclude that this idea requires closer scrutiny and validation.

**Contributions:**
- We add to the growing set of published usability studies in the security literature.
- We conduct an independent usability test of two proposed password mechanisms: PwdHash and Password Multiplier.
- Our results contradict the findings reported for PwdHash and suggest that both earlier papers overclaim the actual usability of their mechanisms and result in serious security implications.
- Our work reiterates the necessity of actual user studies before concluding that new security mechanisms are usable.
- It raises the question of whether usability tests should be a requirement for new authentication proposals claiming usability.

**Organization:**
- Section 2 reviews the two password managers.
- Section 3 provides context on usability testing and details our study methodology.
- Section 4 presents the data collected from participant interactions.
- Section 5 provides our interpretation and analysis.
- Section 6 offers further discussion and recommendations.
- Section 7 discusses related work.
- Section 8 concludes the paper.

## 2. Password Managers
Passwords are the most common form of authentication, but they are far from the most secure. As people use more computer systems, cognitive demands increase, leading to poorer password choices. Encouraging stronger passwords or passphrases does not help users remember them, nor does it mitigate the problem of matching multiple passwords and accounts.

### 2.1 PwdHash
PwdHash [Ross et al., 2005] is a browser plug-in that generates strong passwords using a cryptographic hash based on the user’s entered password and the site domain. Users activate the plug-in by adding the `@@` prefix to their passwords or by pressing F2. Once protected, users no longer know their effective passwords and must always use PwdHash to log in. The authors provide a web site for generating protected passwords remotely (Figure 1).

Users must initially log on to each web account they want to protect and change their password, entering `@@` in front of their new password. To change a protected password, users use the web site's Change Password interface with `@@` as a prefix. PwdHash also prevents certain JavaScript attacks and protects against phishing by using a hash salt based on the domain name.

An implementation is publicly available. A reported user study of five users found little difficulty using the plug-in, with usability problems observed only with the remote interface. The approach is positioned as unique because it implements password hashing within the browser without additional pop-ups or visible interfaces, aiming to improve usability for novice users.

### 2.2 Password Multiplier
Password Multiplier (P-Multiplier) [Halderman et al., 2005] is a Firefox plug-in that generates strong passwords for web accounts. It uses a master username and password, so users need to remember only one password for all accounts. A protected password is generated based on the master username, master password, and the target site domain. Users activate the plug-in by double-clicking on the password field or pressing Alt+P (Figure 2).

To switch to a protected password, users use the Change Password interface and double-click on the new password field to generate the new password. To update a password, users modify the "site name" argument in the P-Multiplier dialog box. P-Multiplier uses a two-stage process to protect against dictionary attacks, introducing a 100-second delay during initial installation.

For use on remote computers, users must download and install the plug-in and enter the correct master password and username. No alternative is provided for users unable to install software. No usability testing was reported in the publication or on the P-Multiplier web site.

## 3. Study Methodology
To investigate the usability of these password managers, we conducted a study with participants who would be typical users of these systems. We first provide some background on usability studies, then describe our study methodology in detail.

### 3.1 Usability Testing
Usability studies generally fall into two categories: usability inspection methods and user studies. Usability inspection methods, such as cognitive walkthroughs and heuristic evaluations, involve evaluators inspecting and evaluating usability-related aspects of a system without end users. These methods are useful for finding obvious usability problems but are no substitute for user studies with real users. Typically, usability inspection methods guide the design process, and user studies confirm design decisions and uncover overlooked problems.

User studies range from controlled experimental studies to field studies where the system is deployed for real usage. Most user studies are conducted in a lab with predetermined tasks, allowing for ad hoc observations and the discovery of unexpected problems. Usability tests aim to determine whether a system is suitable for its intended audience and purpose, uncovering difficulties encountered by users as they perform tasks. The environment should mimic reality, and training should not be provided if the system is expected to be used without in-person training.

Close observation is crucial, as most usability problems are revealed through user actions. Observers should follow a script to ensure consistency and emphasize that the system, not the user, is being tested. The "think-aloud" method, where users provide a running commentary, and pre/post questionnaires or interviews are useful for gathering opinions, attitudes, and feedback. However, reported views should be a secondary source of information, as they often do not reflect performance and may fail to reveal crucial usability problems.