# BPF Performance Tools: Linux System and Application Observability

## Professional Computing Series
### Foreword by Alexei Starovoitov, Creator of the New BPF

---

## BPF Performance Tools

### The Pearson Addison-Wesley Professional Computing Series
**Consulting Editor: Brian W. Kernighan**

- **Design Patterns**
- **The Go Programming Language**
- **The Practice of Programming**
- **Programming the UNIX Environment**

For a complete list of available publications, visit [informit.com/series/professionalcomputing](http://informit.com/series/professionalcomputing).

The Pearson Addison-Wesley Professional Computing Series was created in 1990 to provide serious programmers and networking professionals with well-written and practical reference books. Pearson Addison-Wesley is renowned for publishing accurate and authoritative books on current and cutting-edge technology. The titles in this series will help you understand the state of the art in programming languages, operating systems, and networks.

**Connect with Us!**
- [informit.com/socialconnect](http://informit.com/socialconnect)
- [Pearson](http://pearson.com)
- [Addison-Wesley](http://addison-wesley.com)

---

## BPF Performance Tools
### Linux System and Application Observability
**Author: Brendan Gregg**
**Publisher: Addison-Wesley**

---

## BPF Performance Tools
**Editor-in-Chief: Mark L. Taub**
**Series Editor: Brian Kernighan**
**Executive Editor: Greg Doench**
**Managing Editor: Sandra Schroeder**
**Senior Project Editor: Lori Lyons**
**Production Manager: CodeMantra (Aswini Kumar)**
**Indexer: Ken Johnson**
**Proofreader: Abigail Manheim**
**Cover Designer: Chuti Prasertsith**
**Compositor: CodeMantra**

**Library of Congress Control Number: 2019951981**
**Copyright Â© 2020 Pearson Education, Inc.**
**ISBN-13: 978-0-13-655482-0**
**ISBN-10: 0-13-655482-2**
**Scout Automated Print Code**

**Trademark Notice:**
Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed with initial capital letters or in all capitals. Linux* is the registered trademark of Linus Torvalds in the U.S. and other countries.

**Disclaimer:**
The author and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in connection with or arising out of the use of the information or programs contained herein.

**Bulk Purchases and Special Sales:**
For information about buying this title in bulk quantities or for special sales opportunities, contact the corporate sales department at [PI:EMAIL] or (800) 382-3419.

**Government Sales Inquiries:**
Please contact [governmentsales@pearsoned.com](mailto:governmentsales@pearsoned.com).

**International Sales:**
For questions about sales outside the U.S., please contact [intlcs@pearson.com](mailto:intlcs@pearson.com).

**Web:**
[informit.com/aw](http://informit.com/aw)

**Permissions:**
For information regarding permissions, request forms, and the appropriate contacts within the Pearson Education Global Rights & Permissions Department, please visit [www.pearson.com/permissions](http://www.pearson.com/permissions).

---

## Contents at a Glance
- **Preface**: xxvi
- **Part I: Technologies**
  - **1. Introduction**: 1
  - **2. Technology Background**: 15
  - **3. Performance Analysis**: 67
  - **4. BCC**: 85
  - **5. bpftrace**: 129
- **Part II: Using BPF Tools**
  - **6. CPUs**: 181
  - **7. Memory**: 243
  - **8. File Systems**: 277
  - **9. Disk I/O**: 341
  - **10. Networking**: 409
  - **11. Security**: 489
  - **12. Languages**: 517
  - **13. Applications**: 589
  - **14. Kernel**: 635
  - **15. Containers**: 671
  - **16. Hypervisors**: 689
- **Part III: Additional Topics**
  - **17. Other BPF Performance Tools**: 709
  - **18. Tips, Tricks, and Common Problems**: 727
- **Part IV: Appendixes**
  - **A. bpftrace One-Liners**: 741
  - **B. bpftrace Cheat Sheet**: 745
  - **C. BCC Tool Development**: 747
  - **D. C BPF**: 763
  - **E. BPF Instructions**: 783
  - **Glossary**: 789
  - **Bibliography**: 795
  - **Index**: 805

---

## Contents
### Part I: Technologies
- **1. Introduction**
  - **1.1 What Are BPF and eBPF?**
  - **1.2 What Are Tracing, Snooping, Sampling, Profiling, and Observability?**
  - **1.3 What Are BCC, bpftrace, and IO Visor?**
  - **1.4 A First Look at BCC: Quick Wins**
  - **1.5 BPF Tracing Visibility**
  - **1.6 Dynamic Instrumentation: kprobes and uprobes**
  - **1.7 Static Instrumentation: Tracepoints and USDT**
  - **1.8 A First Look at bpftrace: Tracing open()**
  - **1.9 Back to BCC: Tracing open()**
  - **1.10 Summary**
- **2. Technology Background**
  - **2.1 BPF Illustrated**
  - **2.2 BPF**
  - **2.3 Extended BPF (eBPF)**
    - **2.3.1 Why Performance Tools Need BPF**
    - **2.3.2 BPF Versus Kernel Modules**
    - **2.3.3 Writing BPF Programs**
    - **2.3.4 Viewing BPF Instructions: bpftool**
    - **2.3.5 Viewing BPF Instructions: bpftrace**
    - **2.3.6 BPF API**
    - **2.3.7 BPF Concurrency Controls**
    - **2.3.8 BPF sysfs Interface**
    - **2.3.9 BPF Type Format (BTF)**
    - **2.3.10 BPF CO-RE**
    - **2.3.11 BPF Limitations**
    - **2.3.12 BPF Additional Reading**
  - **2.4 Stack Trace Walking**
    - **2.4.1 Frame Pointer-Based Stacks**
    - **2.4.2 debuginfo**
    - **2.4.3 Last Branch Record (LBR)**
    - **2.4.4 ORC**
    - **2.4.5 Symbols**
    - **2.4.6 More Reading**
  - **2.5 Flame Graphs**
    - **2.5.1 Stack Trace**
    - **2.5.2 Profiling Stack Traces**
    - **2.5.3 Flame Graph**
    - **2.5.4 Flame Graph Features**
    - **2.5.5 Variations**
  - **2.6 Event Sources**
  - **2.7 kprobes**
    - **2.7.1 How kprobes Work**
    - **2.7.2 kprobes Interfaces**
    - **2.7.3 BPF and kprobes**
    - **2.7.4 kprobes Additional Reading**
  - **2.8 uprobes**
    - **2.8.1 How uprobes Work**
    - **2.8.2 Uprobes Interfaces**
    - **2.8.3 BPF and uprobes**
    - **2.8.4 uprobes Overhead and Future Work**
    - **2.8.5 uprobes Additional Reading**
  - **2.9 Tracepoints**
    - **2.9.1 Adding Tracepoint Instrumentation**
    - **2.9.2 How Tracepoints Work**
    - **2.9.3 Tracepoint Interfaces**
    - **2.9.4 Tracepoints and BPF**
    - **2.9.5 BPF Raw Tracepoints**
    - **2.9.6 Additional Reading**
  - **2.10 USDT**
    - **2.10.1 Adding USDT Instrumentation**
    - **2.10.2 How USDT Works**
    - **2.10.3 BPF and USDT**
    - **2.10.4 USDT Additional Reading**
  - **2.11 Dynamic USDT**
  - **2.12 PMCs**
    - **2.12.1 PMC Modes**
    - **2.12.2 PEBS**
    - **2.12.3 Cloud Computing**
  - **2.13 perf_events**
  - **2.14 Summary**
- **3. Performance Analysis**
  - **3.1 Overview**
    - **3.1.1 Goals**
    - **3.1.2 Activities**
    - **3.1.3 Multiple Performance Issues**
  - **3.2 Performance Methodologies**
    - **3.2.1 Workload Characterization**
    - **3.2.2 Drill-Down Analysis**
    - **3.2.3 USE Method**
    - **3.2.4 Checklists**
  - **3.3 Linux 60-Second Analysis**
    - **3.3.1 uptime**
    - **3.3.2 dmesg | tail**
    - **3.3.3 vmstat 1**
    - **3.3.4 mpstat -P ALL 1**
    - **3.3.5 pidstat 1**
    - **3.3.6 iostat xz 1**
    - **3.3.7 free -m**
    - **3.3.8 sar -n DEV 1**
    - **3.3.9 sar -n TCPETCP 1**
    - **3.3.10 top**
  - **3.4 BCC Tool Checklist**
    - **3.4.1 execsnoop**
    - **3.4.2 opensnoop**
    - **3.4.3 ext4slower**
    - **3.4.4 biolatency**
    - **3.4.5 biosnoop**
    - **3.4.6 cachestat**
    - **3.4.7 tcpconnect**
    - **3.4.8 tcpaccept**
    - **3.4.9 tcpretrans**
    - **3.4.10 runqlat**
    - **3.4.11 profile**
  - **3.5 Summary**
- **4. BCC**
  - **4.1 BCC Components**
  - **4.2 BCC Features**
    - **4.2.1 Kernel-Level Features**
    - **4.2.2 BCC User-Level Features**
  - **4.3 BCC Installation**
    - **4.3.1 Kernel Requirements**
    - **4.3.2 Ubuntu**
    - **4.3.3 RHEL**
    - **4.3.4 Other Distributions**
  - **4.4 BCC Tools**
    - **4.4.1 Highlighted Tools**
    - **4.4.2 Tool Characteristics**
    - **4.4.3 Single-Purpose Tools**
    - **4.4.4 Multi-Purpose Tools**
  - **4.5 funccount**
    - **4.5.1 funccount Examples**
    - **4.5.2 funccount Syntax**
    - **4.5.3 funccount One-Liners**
    - **4.5.4 funccount Usage**
  - **4.6 stackcount**
    - **4.6.1 stackcount Example**
    - **4.6.2 stackcount Flame Graphs**
    - **4.6.3 stackcount Broken Stack Traces**
    - **4.6.4 stackcount Syntax**
    - **4.6.5 stackcount One-Liners**
    - **4.6.6 stackcount Usage**
  - **4.7 trace**
    - **4.7.1 trace Example**
    - **4.7.2 trace Syntax**
    - **4.7.3 trace One-Liners**
    - **4.7.4 trace Structs**
    - **4.7.5 trace Debugging File Descriptor Leaks**
    - **4.7.6 trace Usage**
  - **4.8 argdist**
    - **4.8.1 argdist Syntax**
    - **4.8.2 argdist One-Liners**
    - **4.8.3 argdist Usage**
  - **4.9 Tool Documentation**
    - **4.9.1 Man Page: opensnoop**
    - **4.9.2 Examples File: opensnoop**
  - **4.10 Developing BCC Tools**
  - **4.11 BCC Internals**
  - **4.12 BCC Debugging**
    - **4.12.1 printf0 Debugging**
    - **4.12.2 BCC Debug Output**
    - **4.12.3 BCC Debug Flag**
    - **4.12.4 bpflist**
    - **4.12.5 bpftool**
    - **4.12.6 dmesg**
    - **4.12.7 Resetting Events**
  - **4.13 Summary**
- **5. bpftrace**
  - **5.1 bpftrace Components**
  - **5.2 bpftrace Features**
    - **5.2.1 bpftrace Event Sources**
    - **5.2.2 bpftrace Actions**
    - **5.2.3 bpftrace General Features**
    - **5.2.4 bpftrace Compared to Other Observability Tools**
  - **5.3 bpftrace Installation**
    - **5.3.1 Kernel Requirements**
    - **5.3.2 Ubuntu**
    - **5.3.3 Fedora**
    - **5.3.4 Post-Build Steps**
    - **5.3.5 Other Distributions**
  - **5.4 bpftrace Tools**
    - **5.4.1 Highlighted Tools**
    - **5.4.2 Tool Characteristics**
    - **5.4.3 Tool Execution**
  - **5.5 bpftrace One-Liners**
  - **5.6 bpftrace Documentation**
  - **5.7 bpftrace Programming**
    - **5.7.1 Usage**
    - **5.7.2 Program Structure**
    - **5.7.3 Comments**
    - **5.7.4 Probe Format**
    - **5.7.5 Probe Wildcards**
    - **5.7.6 Filters**
    - **5.7.7 Actions**
    - **5.7.8 Hello, World!**
    - **5.7.9 Functions**
    - **5.7.10 Variables**
    - **5.7.11 Map Functions**
    - **5.7.12 Timing vfs_read0**
  - **5.8 bpftrace Usage**
  - **5.9 bpftrace Probe Types**
    - **5.9.1 tracepoint**
    - **5.9.2 usdt**
    - **5.9.3 kprobe and kretprobe**
    - **5.9.4 uprobe and uretprobe**
    - **5.9.5 software and hardware**
    - **5.9.6 profile and interval**
  - **5.10 bpftrace Flow Control**
    - **5.10.1 Filter**
    - **5.10.2 Ternary Operators**
    - **5.10.3 if Statements**
    - **5.10.4 Unrolled Loops**
  - **5.11 bpftrace Operators**
  - **5.12 bpftrace Variables**
    - **5.12.1 Built-in Variables**
    - **5.12.2 Built-ins: pid, comm, and uid**
    - **5.12.3 Built-ins: kstack and ustack**
    - **5.12.4 Built-ins: Positional Parameters**
    - **5.12.5 Scratch**
    - **5.12.6 Maps**

---

This revised and organized version should make the content more clear, coherent, and professional.