### Introduction to BareCloud and Related Systems

BareCloud [26] is a robust malware detection system designed to execute malware on a bare-metal system. It compares both disk-level and network-level activities of the malware with other emulation and virtualization-based analysis systems, enabling the detection of evasive malware. Disk-level activity is determined by comparing the affected disk status with its initial state, while network-level activity is captured directly from the wire. These methods focus on extracting malicious behavior on bare-metal systems without installing any in-guest software components. In contrast, Bolt emphasizes quick restoration after each malware infection.

### Analytic Code Placement in Guest Systems

Placing analytic code within the guest system can significantly simplify the process of malicious behavior extraction. TaintDroid [12] is a system-wide information flow tracking tool that provides variable, message, method, and file-level taint propagation by modifying the original Android framework. TaintART [44] extends this concept to the most recent Android Java virtual machine, ART. VetDroid [55] reconstructs the malicious behavior of malware based on permission usage, making it suitable for taint analysis. DroidTrace [56] uses `ptrace` to monitor dynamic loading code at both the Java and native code levels. Although these tools aim to analyze targets on real-world devices to improve transparency, modifications to the Android framework leave memory footprints or code signatures. Additionally, `ptrace`-based approaches can be detected by checking the `/proc/self/status` profile. These systems are also vulnerable to privileged malware.

### Bare-Metal Debugging Tools

Zhang et al. [53] propose MalT, a bare-metal debugging tool for malware analysis. The core idea is to use System Management Mode (SMM), a special CPU mode in x86 architecture, to enhance debugging transparency. Ninja [31], a follow-up system to MalT, provides a transparent malware analysis framework on ARM platforms. Willems et al. [49] used branch tracing to record all branches taken during program execution. However, as noted in their paper, the data obtained through branch tracing is coarse and still susceptible to CPU register attacks against branch tracing settings.

### Malware Analysis via Sandboxing

DroidScope [52] reconstructs the semantic information of both the Android OS and the Dalvik virtual machine using QEMU. CopperDroid [45] is a VMI-based analysis tool that automatically reconstructs the behavior of Android malware, including inter-process communication (IPC) and remote procedure call interactions. DroidScribe [9] uses CopperDroid to collect behavior profiles of Android malware and automatically classify them into different families. Since emulators leave footprints, these systems are not transparent.

Ether [11] is a malware analysis framework based on hardware virtualization extensions (e.g., Intel VT). It runs outside the guest operating systems by leveraging underlying hardware features. BitBlaze [39] and Anubis [3] are QEMU-based malware analysis systems that focus on understanding malware behaviors rather than achieving better transparency. V2E [51] combines hardware virtualization and software emulation. HyperDbg [14] uses hardware virtualization to install a virtual machine monitor and run analysis code in VMX root mode. SPIDER [10] uses Extended Page Tables to implement invisible breakpoints and hardware virtualization to hide side effects. However, Ether, BitBlaze, Anubis, V2E, HyperDbg, and SPIDER all rely on easily detectable emulation or virtualization technology [7, 35–37] and assume that virtualization or emulation is transparent from the guest-OS perspective.

### Anti-Anti-Analysis Techniques

More subtle anti-anti-analysis techniques for emulated environments have also been developed. These techniques benefit from the scalability of emulation-based analysis and the high coverage of bare-metal analysis. For example, Droid-AntiRM [47] can detect condition statements that trigger malicious behaviors and rewrite them on the fly to force a malicious path. However, this approach may initiate a new round of arms race between malware writers and detectors. A definitive solution could be bare-metal analysis that leaves no artifacts.

### TrustZone-Based Isolation Systems

TrustZone provides an isolated execution domain separate from the commodity OS. Based on this, several works have been proposed to meet various security requirements. TrustDump [43] builds an isolated environment to reliably dump physical memory contents to a peripheral if the guest OS is compromised or crashes. BoltOS enhances TrustDump by also supporting memory restoration. Trusted Language Runtime (TLR) [38] and TrustShadow [16] shield unmodified applications from a hostile OS. TZ-RKP [4] and Sprobes [15] monitor critical operations of an OS by routing privileged operations to the secure world for inspection. CaSE [54] extends TrustZone to execute self-contained applications inside the cache to defeat DRAM attacks.

### Data Protection in Flash Memory

Several existing works have explored data protection techniques in flash memory. DEFY [33] and DEFTL [21] investigate techniques to hide sensitive data in flash media. Secure deletion ensures that sensitive data can be completely removed from storage media. NFPS [20] and TedFlash [6] explore novel techniques to irrecoverably remove sensitive information stored in flash.

### Conclusion

Dynamic analysis on bare-metal is a promising technique for revealing the malicious behaviors of evasive malware. This work focuses on a less studied but important topic in bare-metal dynamic analysis: quickly restoring the guest system to a clean state without exposing any instrumentation indicators. The proposed solution, Bolt, leverages two widely used hardware features in mobile platforms to develop a reboot-less restoration solution without modifying the guest system. With this spotless "sandbox," state-of-the-art malware cannot identify that it is being analyzed. This is particularly valuable for building a scalable bare-metal analysis platform with high throughput, especially considering the ever-growing number of mobile malware and the rapid evolution of evasion techniques. Experimental results from our prototype implementation show that Bolt can restore a full system state in 2.80 seconds, outperforming all existing solutions.

### Acknowledgments

The authors would like to thank the anonymous referees for their valuable comments and helpful suggestions. This work is supported by the Army Research Office under Grant No.: W911NF-13-1-0421 (MURI), and the National Science Foundation under Grant No.: CNS-1422594, CNS-1505664, SBE-1422215, CNS-1422206, DGE-1565570, CNS-1718459, OAC-1738929. Jingqiang Lin and Luning Xia were partially supported by the National Natural Science Foundation of China under Grant No.: 61772518, 61602476.

### References

[1] Adamwallred. 2014. nvmtrace - A proof-of-concept automated baremetal malware analysis framework. (2014). https://github.com/adamwallred/nvmtrace.
[2] Tiago Alves and Don Felton. 2004. TrustZone: Integrated Hardware and Software Security. White Paper (2004).
[3] Anubis. 2009. Analyzing Unknown Binaries. http://anubis.iseclab.org. (2009).
[4] Ahmed M Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar, Guruprasad Ganesh, Jia Ma, and Wenbo Shen. 2014. Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world. In ACM CCS’14, 2014. 90–102.
[5] Rodrigo Rubira Branco, Gabriel Negreira Barbosa, and Pedro Drimel Neto. 2012. Scientific but Not Academical Overview of Malware Anti-Debugging, Anti-Disassembly and Anti-VM Technologies. In Black Hat.
[6] Bo Chen, Shijie Jia, Luning Xia, and Peng Liu. 2016. Sanitizing data is not enough!: towards sanitizing structural artifacts in flash media. In Proceedings of the 32nd Annual Conference on Computer Security Applications. ACM, 496–507.
[7] Xu Chen, John Andersen, Z. Morley Mao, Michael Bailey, and Jose Nazario. 2008. Towards an Understanding of Anti-Virtualization and Anti-Debugging Behavior in Modern Malware. In Proceedings of the 38th Annual IEEE International Conference on Dependable Systems and Networks (DSN ’08).
[8] Google Code. 2011. OpenNFM. https://code.google.com/p/opennfm/. (2011).
[9] Santanu Kumar Dash, Guillermo Suarez-Tangil, Salahuddin Khan, Kimberly Tam, Mansour Ahmadi, Johannes Kinder, and Lorenzo Cavallaro. 2016. DroidScribe: Classifying Android malware based on runtime behavior. Mobile Security Technologies (MoST’16) (2016).
[10] Zhui Deng, Xiangyu Zhang, and Dongyan Xu. 2013. SPIDER: Stealthy Binary Program Instrumentation and Debugging Via Hardware Virtualization. In Proceedings of the Annual Computer Security Applications Conference (ACSAC’13).
[11] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee. 2008. Ether: Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS ’08).
[12] Enck, William and Gilbert, Peter and Cox, Landon P and Jung, Jaeyeon and McDaniel, Patrick and Sheth, Anmol N. 2010. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation.
[13] Nicolas Falliere. 2010. Windows Anti-Debug Reference. http://www.symantec.com/connect/articles/windows-anti-debug-reference. (2010).
[14] Aristide Fattori, Roberto Paleari, Lorenzo Martignoni, and Mattia Monga. 2010. Dynamic and Transparent Analysis of Commodity Production Systems. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE’10).
[15] Xinyang Ge, Hayawardh Vijayakumar, and Trent Jaeger. 2014. Sprobes: Enforcing kernel code integrity on the TrustZone architecture. arXiv preprint arXiv:1410.7747.
[16] Le Guan, Peng Liu, Xinyu Xing, Xinyang Ge, Shengzhi Zhang, Meng Yu, and Trent Jaeger. 2017. TrustShadow: Secure Execution of Unmodified Applications with ARM TrustZone. In Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys ’17).
[17] Claudio Guarnieri, Alessandro Tanasi, Jurriaan Bremer, and Mark Schloesser. 2012. The Cuckoo sandbox. (2012). https://www.cuckoosandbox.org/.
[18] Google Inc. 2017. Trusty TEE. (2017). https://source.android.com/security/trusty/.
[19] INCITS. 2015. SCSI Command Operation Codes. (2015). http://www.t10.org/lists/op-num.htm.
[20] Shijie Jia, Luning Xia, Bo Chen, and Peng Liu. 2016. NFPS: Adding undetectable secure deletion to flash translation layer. In Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security. ACM, 305–315.
[21] Shijie Jia, Luning Xia, Bo Chen, and Peng Liu. 2017. DEFTL: Implementing Plausibly Deniable Encryption in Flash Translation Layer. In Proceedings of the 24th ACM conference on Computer and communications security. ACM.
[22] Xuxian Jiang, Xinyuan Wang, and Dongyan Xu. 2007. Stealthy Malware Detection Through VMM-based “Out-of-the-box” Semantic View Reconstruction. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS ’07). ACM, New York, NY, USA, 128–138.
[23] Yiming Jing, Ziming Zhao, Gail-Joon Ahn, and Hongxin Hu. 2014. Morpheus: Automatically Generating Heuristics to Detect Android Emulators. In Proceedings of the 30th Annual Computer Security Applications Conference. 216–225.
[24] Dhilung Kirat and Giovanni Vigna. 2015. MalGene: Automatic Extraction of Malware Analysis Evasion Signature. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security (CCS ’15). 769–780.
[25] Dhilung Kirat, Giovanni Vigna, and Christopher Kruegel. 2011. BareBox: Efficient Malware Analysis on Bare-metal. In Proceedings of the 27th Annual Computer Security Applications Conference (ACSAC ’11). 403–412.
[26] Dhilung Kirat, Giovanni Vigna, and Christopher Kruegel. 2014. BareCloud: Bare-metal Analysis-based Evasive Malware Detection. In 23rd USENIX Security Symposium (USENIX Security 14). USENIX Association, San Diego, CA, 287–301.
[27] Aravind Machiry, Eric Gustafson, Chad Spensky, Christopher Salls, Nick Stephens, Ruoyu Wang, Antonio Bianchi, Yung Ryn Choe, Christopher Kruegel, and Giovanni Vigna. 2017. BOOMERANG: Exploiting the Semantic Gap in Trusted Execution Environments. In Proceedings of the Network and Distributed System Security Symposium.
[28] Mantech. 2017. LPC-H3131. http://www.mantech.co.za/. (2017).
[29] Najmeh Miramirkhani, Mahathi Priya Appini, Nick Nikiforakis, and Michalis Polychronakis. 2017. Spotless Sandboxes: Evading Malware Analysis Systems Using Wear-and-Tear Artifacts. In 2017 IEEE Symposium on Security and Privacy.
[30] Simone Mutti, Yanick Fratantonio, Antonio Bianchi, Luca Invernizzi, Jacopo Corbetta, Dhilung Kirat, Christopher Kruegel, and Giovanni Vigna. 2015. BareDroid: Large-Scale Analysis of Android Apps on Real Devices. In Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC 2015). 71–80.
[31] Zhenyu Ning and Fengwei Zhang. 2017. Ninja: Towards Transparent Tracing and Debugging on ARM. In 26th USENIX Security Symposium (USENIX Security 17). USENIX Association, Vancouver, BC. https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/ning
[32] Jon Oberheide and Charlie Miller. 2012. Dissecting the Android Bouncer. SummerCon2012, New York (2012).
[33] Timothy M Peters, Mark A Gondree, and Zachary NJ Peterson. 2015. DEFY: A deniable, encrypted file system for log-structured storage. (2015).
[34] J. S. Plank, M. Beck, G. Kingsley, and K. Li. 1995. Libckpt: Transparent Checkpointing under Unix. In Usenix Winter Technical Conference. 213–223.
[35] D. Quist and V. Val Smith. 2006. Detecting the Presence of Virtual Machines Using the Local Data Table. http://www.offensivecomputing.net. (2006).
[36] Thomas Raffetseder, Christopher Kruegel, and Engin Kirda. 2007. Detecting System Emulators. In Information Security. Springer Berlin Heidelberg.
[37] Joanna Rutkowska. 2004. Red Pill... or how to detect VMM using (almost) one CPU instruction. http://www.ouah.org/Red_Pill.html. (2004).
[38] Nuno Santos, Himanshu Raj, Stefan Saroiu, and Alec Wolman. 2014. Using ARM TrustZone to Build a Trusted Language Runtime for Mobile Applications. In ASPLOS’14, 2014. 67–80.
[39] Dawn Song, David Brumley, Heng Yin, Juan Caballero, Ivan Jager, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Prateek Saxena. 2008. BitBlaze: A New Approach to Computer Security via Binary Analysis. In Proceedings of the 4th International Conference on Information Systems Security.
[40] Chad Spensky, Hongyi Hu, and Kevin Leach. 2016. LO-PHI: Low-Observable Physical Host Instrumentation for Malware Analysis. In 23nd Annual Network and Distributed System Security Symposium, NDSS 2016, San Diego, California, USA, February 21-24, 2016.
[41] Michael Spreitzenbarth, Felix Freiling, Florian Echtler, Thomas Schreck, and Johannes Hoffmann. 2013. Mobile-sandbox: Having a Deeper Look into Android Applications. In Proceedings of the 28th Annual ACM Symposium on Applied Computing (SAC ’13). ACM, New York, NY, USA, 1808–1815.
[42] Raja Subramani, Haritima Swapnil, Niharika Thakur, Bharath Radhakrishnan, and Krishnamurthy Puttaiah. 2013. Garbage Collection Algorithms for NAND Flash Memory Devices–An Overview. In Modelling Symposium (EMS), 2013 European. IEEE, 81–86.
[43] He Sun, Kun Sun, Yuewu Wang, Jiwu Jing, and Sushil Jajodia. 2014. TrustDump: Reliable Memory Acquisition on Smartphones. In in Proceedings of 19th European Symposium on Research in Computer Security. 202–218.
[44] Mingshen Sun, Tao Wei, and John Lui. 2016. TaintART: a practical multi-level information-flow tracking system for Android RunTime. In Proceedings of the 23rd ACM SIGSAC Conference on Computer and Communications Security (CCS’16).
[45] Kimberly Tam, Salahuddin J Khan, Aristide Fattori, and Lorenzo Cavallaro. 2015. CopperDroid: Automatic reconstruction of Android malware behaviors. In Proceedings of 22nd Network and Distributed System Security Symposium (NDSS’15).
[46] Vinschen, Corinna and Johnston, Jeff. 1999. Red Hat newlib C Library. (1999). https://sourceware.org/newlib/.
[47] Xiaolei Wang, Sencun Zhu, and Yuexiang Yang. 2017. Droid-AntiRM: Taming Control Flow Anti-analysis to Support Automated Dynamic Analysis of Android Malware. In Proceedings of the 33rd Annual Conference on Computer Security Applications (ACSAC ’17).
[48] Lukas Weichselbaum, Matthias Neugschwandtner, Martina Lindorfer, Yanick Fratantonio, Victor van der Veen, and Christian Platzer. 2014. Andrubis: Android malware under the magnifying glass. Vienna University of Technology, Tech. Rep. TR-ISECLAB-0414-001 (2014).
[49] Carsten Willems, Ralf Hund, Andreas Fobian, Dennis Felsch, Thorsten Holz, and Amit Vasudevan. 2012. Down to the Bare Metal: Using Processor Features for Binary Analysis. In Proceedings of the Annual Computer Security Applications Conference (ACSAC’12).
[50] Lei Xue, Yajin Zhou, Ting Chen, Xiapu Luo, and Guofei Gu. 2017. Malton: Towards On-Device Non-Invasive Mobile Malware Analysis for ART. In 26th USENIX Security Symposium (USENIX Security 17). USENIX Association, Vancouver, BC.
[51] Lok-Kwong Yan, Manjukumar Jayachandra, Mu Zhang, and Heng Yin. 2012. V2E: Combining Hardware Virtualization and Software Emulation for Transparent and Extensible Malware Analysis. In Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments (VEE’12). 12.
[52] Yan, Lok Kwong and Yin, Heng. 2012. Droidscope: Seamlessly reconstructing the OS and Dalvik semantic views for dynamic Android malware analysis. In Proceedings of the 21st USENIX Security Symposium (USENIX Security’12).
[53] Fengwei Zhang, Kevin Leach, Angelos Stavrou, Haining Wang, and Kun Sun. 2015. Using Hardware Features for Increased Debugging Transparency. In Proceedings of the 36th IEEE Symposium on Security and Privacy (S&P’15).
[54] Ning Zhang, Kun Sun, Wenjing Lou, and Tom Hou. 2016. CaSE: Cache-Assisted Secure Execution on ARM Processors. In The 37th IEEE Symposium on Security and Privacy (S&P). SAN JOSE, CA.
[55] Yuan Zhang, Min Yang, Bingquan Xu, Zhemin Yang, Guofei Gu, Peng Ning, X Sean Wang, and Binyu Zang. 2013. Vetting undesirable behaviors in Android apps with permission use analysis. In Proceedings of the 20th ACM SIGSAC Conference on Computer and Communications Security (CCS’13).
[56] Zheng, Min and Sun, Mingshen and Lui, John CS. 2014. DroidTrace: A ptrace based Android dynamic analysis system with forward execution capability. In 2014 International Wireless Communications and Mobile Computing Conference.