### 6.1 Microbenchmarks

In our initial experiment, we measured the runtime of a trivial `printf` call with and without FormatGuard. The results showed that the `printf` call took 0.027 seconds without FormatGuard and 0.037 seconds with it. The loop overhead was 0.009 seconds. Therefore, FormatGuard imposed a marginal overhead of 37% on the trivial `printf` call.

We then repeated the experiment, but this time, we replaced the `printf` call with one that formats all letters from 'a' to 'z', rather than just three letters. The results were as follows: the `printf` call with FormatGuard took 134.7 seconds, while without FormatGuard, it took 99 seconds. The loop overhead of 0.032 seconds became negligible in this case. Consequently, FormatGuard imposed a marginal slowdown of 36% on the more complex `printf` call. We conclude that FormatGuard imposes a fairly consistent marginal overhead of approximately 37% on most `printf` calls.

### 6.2 Macrobenchmarks

Most programs do not spend a significant amount of time running the `printf` function, as it is primarily used for I/O operations, and even I/O-intensive programs tend to format their own data rather than using `printf`. The `printf` function is mostly utilized for formatting error-handling code. Therefore, finding programs that would show measurable degradation under FormatGuard was challenging. We identified such a program in `man2html` [25], which extensively uses `printf` to output HTML-formatted man pages.

Our test involved batch translating 79 man pages through `man2html`, which amounted to 596 KB of input. The test was run multiple times in single-user mode on a system with 256 MB of RAM, ensuring minimal I/O overhead. The results showed that the batch process took 0.685 seconds without FormatGuard and 0.698 seconds with it. Thus, in an arguably near worst-case application scenario, FormatGuard imposed a 1.3% runtime overhead. In most cases, the overhead is considerably lower and often negligible.

### 7 Related Work

Work related to FormatGuard can be divided into two categories: analysis of format string vulnerabilities (described in Section 2) and methods to protect programs against such vulnerabilities (described here).

Fundamentally, format bugs exist due to the tension between strong type checking and convenient polymorphism. C and Pascal made opposite choices in this regard: Pascal opted for strict type checking, making it impossible for functions to be spoofed by such attacks, but also making it difficult to write a generic I/O function like `printf` in Pascal [11]. Conversely, C chose a completely type-unsafe varargs mechanism, which makes it impossible to statically type check a polymorphic function call.

More recent programming languages, such as ML, have addressed this tension through type inference, but these techniques are challenging to apply to C programs [15, 27]. Wagner et al. [21] proposed a compromise solution by adding a "taint" type qualifier to the C language. This allows programmers to designate data as "tainted" (provided by an adversary), and the compiler tracks the usage of this data throughout the program. If tainted data is used as a format string in `printf`-like functions, the compiler flags an error. The main advantage of this approach is that it detects potential vulnerabilities at compile time, rather than when an attacker tries to exploit them. However, the main limitation is that it is not transparent; functions that collect user input must be manually annotated as "tainted."

Since properly type-checking C programs is problematic, more pragmatic approaches have emerged to specifically address format bugs. Alan DeKok developed PScan [9] to scan C source code for potential format bugs by looking for simple/common cases where the last parameter of a `printf`-like function is also the format string, and the format string is not static. GCC itself has an undocumented feature where the `-Wformat=2` option causes the compiler to complain about non-static format strings. This is over-general, as it also complains about legitimate code, such as internationalization support, which uses functions to generate format strings. Joseph Myers implemented an enhancement to `-Wformat` that unconditionally complains about the `printf(foo)` case. This functionality is similar to PScan, with the advantage of being built into the compiler, but the disadvantage of only being available in a pre-release version of GCC.

Both PScan and the `-Wformat` enhancement provide static warnings, allowing developers to identify and fix problems at compile time. However, these static analysis methods are heuristics and can produce both false negatives (missing vulnerabilities) and false positives (mis-identifying non-vulnerabilities). Additionally, they impose an extra burden on developers, who may choose to omit them if they prove troublesome.

In contrast, runtime techniques present a lower burden on developers and uniformly improve the security assurance of applications. For example, libformat [18] is a library that aborts programs if they call `printf`-like functions with a writable format string containing a `%n` directive. This technique is often effective but can produce false positives because both writable format strings and `%n` directives are legal.

libsafe [libsafe] is another library-based approach to defending against buffer overflow attacks. In version 2.0, libsafe added protection against format bugs by inspecting the call stack for plausible arguments and rejecting `%n` directives that attempt to write to the function's return address on the stack. This approach, like libformat, protects binary programs and guards against format bugs in `vsprintf` (see Section 4.1). However, libsafe cannot protect code compiled with the "no_frame_pointer" optimization and only defends against format string attacks aimed at the activation record.

FormatGuard aims to achieve the benefits of both static and runtime techniques. By using a source-code re-compilation technique, FormatGuard achieves high precision, resulting in few false negatives and no false positives, presenting a very low burden on developers. Even if the original developer did not address format vulnerabilities, an end-user of an open-source product can re-compile the product with FormatGuard and gain protection from format bugs that the developer failed to discover.

### 8 Conclusions

Format bugs are a dangerous and pervasive security problem that emerged suddenly in June 2000 and continue to be a major cause of software vulnerabilities. FormatGuard effectively protects vulnerable programs against this problem. We have shown that FormatGuard stops format bug attacks, imposes minimal compatibility issues, and has a practical performance penalty of less than 2%. FormatGuard is incorporated into WireX’s Immunix Linux distribution and server products and is available as a GPL’d patch to glibc at http://immunix.org.

### References

[1] American National Standards Institute, Inc. Programming Language – C, ANSI Standard X3.159. American National Standards Institute, Inc., 1989.

[2] “bind”. xlock (exec) Input Validation Error. http://www.securityfocus.com/vdb/bottom.html?vid=1585, August 15 2000.

[3] Kalou/Pascal Bouchareine. String Format Vulnerability. http://plan9.hert.org/papers/format.html, July 18 2000.

[4] Pascal Bouchareine. User Supplied Format String Bug. http://julianor.tripod.com/usfs.html, July 2000.

[5] Crispin Cowan. Format Bugs in Windows Code. http://www.securityfocus.com/archive/82/81455, September 10 2000.

[6] Crispin Cowan, Steve Beattie, Ryan Finnin Day, Calton Pu, Perry Wagle, and Erik Walthinsen. Protecting Systems from Stack Smashing Attacks with StackGuard. In Linux Expo, Raleigh, NC, May 1999.

[19] “ron1n”. statdx2 - linux rpc.statd revisited. Bugtraq mailing list, http://marc.theaimsgroup.com/?l=bugtraq&m=97123424719960&w=2, October 11 2000.

[20] Pekka Savola. Very probable remote root vulnerability in cfengine. Bugtraq mailing list, http://marc.theaimsgroup.com/?l=bugtraq&m=97050677208267&w=2, October 2 2000.

[21] Umesh Shankar, Kunal Talwar, Jeff Foster, and David Wagner. Automated Detection of Format-String Vulnerabilities. In USENIX Security Symposium, Washington, DC, August 2001.

[22] “tf8”. Wu-Ftpd Remote Format String Stack Overwrite Vulnerability. http://www.securityfocus.com/bid/1387, June 22 2000.

[23] Tymm Twillman. Exploit for proftpd 1.2.0pre6. Bugtraq mailing list, http://www.securityfocus.com/templates/archive.pike?list=1&mid=28143, September 1999.

[24] “venomous”. LPRng remote root exploit. Bugtraq mailing list, http://marc.theaimsgroup.com/?l=bugtraq&m=97683900820267&w=2, December 14 2000.

[25] Richard Verhoeven. man2html. http://wsinwp01.win.tue.nl:1234/, February 10 2000.

[26] “Zinx Verituse”. BitchX - more on format bugs? Bugtraq mailing list, http://www.securityfocus.com/archive/1/68256, July 3 2000.

[27] David Wagner, Jeffrey S. Foster, Eric A. Brewer, and Alexander Aiken. A First Step Towards Automated Detection of Buffer Overrun Vulnerabilities. In NDSS (Network and Distributed System Security), San Diego, CA, February 2000.

[7] Crispin Cowan, Heather Hinton, Calton Pu, and Jonathan Walpole. The Cracker Patch Choice: An Analysis of Post Hoc Security Techniques. In Proceedings of the 19th National Information Systems Security Conference (NISSC 2000), Baltimore, MD, October 2000.

[8] Crispin Cowan, Calton Pu, Dave Maier, Heather Hinton, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, and Qian Zhang. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In 7th USENIX Security Conference, pages 63–77, San Antonio, TX, January 1998.

[9] Alan DeKok. PScan: A limited problem scanner for C source files. Bugtraq mailing list, http://www.securityfocus.com/archive/1/68688, http://www.striker.ottawa.on.ca/aland/pscan/, July 7 2000.

[10] Mike Frantzen. Poor Man’s Solution to Format Bugs. Vuln-dev mailing list, http://www.securityfocus.com/archive/1/72118, July 25 2000.

[11] Brian Kernighan. Why Pascal is not my Favorite Programming Language. Report 100, AT&T Bell Labs, Murray Hill, NJ, July 1981. Submitted for publication.

[12] Brian W. Kernighan and Dennis M. Ritchie. The C Programming Language. Prentice Hall, Englewood Cliffs, NJ, second edition, 1988.

[13] Jamie Lokier. Varargs macros subtly broken. GCC mailing list, http://gcc.gnu.org/ml/gcc/2000-09/msg00604.html, September 25 2000.

[14] Tim Newsham. Format String Attacks. Bugtraq mailing list, http://www.securityfocus.com/archive/1/81565, September 9 2000.

[15] Robert O’Callahan and Daniel Jackson. Lackwit: A Program Understanding Tool Based on Type Inference. In Proceedings of the International Conference on Software Engineering (ICSE’97), Boston, MA, May 1997.

[16] P.J. Plauger. Standard C Library. Prentice Hall, Englewood Cliffs, NJ, 1991.

[17] “Weld Pond”. @stake Advisory: PHP3/PHP4 Logging Format String Vulnerability (A 101200-1). Bugtraq mailing list, http://www.securityfocus.com/archive/1/139259, October 12 2000.

[18] Tim J. Robbins. libformat. http://the.wiretapped.net/security/host-security/libformat/, November 2001.