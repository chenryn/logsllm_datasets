### BasicBlocker: A Novel Approach to Secure and Efficient Control-Flow Management

BasicBlocker introduces a path of conservative security assumptions that comprehensively address a wide range of current and emerging attacks. It challenges the widely accepted notion that control flow speculation is indispensable for performance.

#### Key Concepts

**Control-Flow Information Transport:**
We propose a novel method to transport control-flow information from software to hardware, enabling the practical implementation of strictly non-control-flow-speculative processors. This approach simplifies security analysis, ensures secure backward compatibility, and makes the resulting code independent of the underlying microarchitecture.

**Performance Evaluation:**
Our performance evaluation demonstrates that BasicBlocker maintains current performance levels for code with large basic blocks, a characteristic common in highly optimized code (e.g., function inlining, loop unrolling). For branch-heavy code, control-flow speculation is faster, but at the cost of security. Unlike other approaches, BasicBlocker allows the complete removal of control-flow speculation, including speculative fetching, thereby addressing speculation-based attacks at their root cause.

#### Implementation

**BBRISC-V ISA:**
To showcase our concept, we specify the BBRISC-V Instruction Set Architecture (ISA), including a concrete implementation based on VexRiscv and Gem5. We also develop an optimizing compiler that leverages the LLVM Compiler Framework. BasicBlocker is a generic solution applicable to other ISAs as well. Our prototype implementations demonstrate its applicability across various processor types and suggest code-optimization strategies to further enhance performance.

**Further Optimizations:**
By considering the algorithmic level, additional optimizations can be achieved (see Appendix B). We anticipate that future work, such as integrating hardware loop counters (see Appendix A) and addressing fault-based transient-execution attacks, will further improve the performance and security of BasicBlocker.

#### Acknowledgments

The authors would like to thank Bastian Kuttig for his support on the Gem5 evaluation. This work was funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) under Germany’s Excellence Strategy - EXC 2092 CASA - 390781972; by the DFG under the Priority Program SPP 2253 Nano Security (Project RAINCOAT - Number: 440059533); by the Cisco University Research Program; and by the U.S. National Science Foundation under grant 1913167. The opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation or other funding agencies. Date of this document: 04 May 2021.

#### References

[1] ARM. 2020. Arm® Architecture Reference Manual, Armv8, for Armv8-A architecture profile. Technical Report. ARM.
[2] Abadi, M., Budiu, M., Erlingsson, Ú., and Ligatti, J. 2009. Control-flow integrity principles, implementations, and applications. ACM Transactions on Information and System Security (TISSEC) 13, 1 (2009), 1–40.
[3] Aciiçmez, O., Brumley, B. B., and Grabher, P. 2010. New Results on Instruction Cache Attacks. In Cryptographic Hardware and Embedded Systems, CHES 2010, 12th International Workshop, Santa Barbara, CA, USA, August 17-20, 2010. Proceedings (Lecture Notes in Computer Science), Vol. 6225. Springer, Santa Barbara, CA, 110–124. https://doi.org/10.1007/978-3-642-15031-9_8
[4] Asanović, K. and Patterson, D. A. 2014. Instruction Sets Should Be Free: The Case For RISC-V. https://people.eecs.berkeley.edu/~krste/papers/EECS-2014-146.pdf.
[5] Barber, K., Bacha, A., Zhou, L., Zhang, Y., and Teodorescu, R. 2019. Specshield: Shielding speculative data from microarchitectural covert channels. In 2019 28th International Conference on Parallel Architectures and Compilation Techniques (PACT). IEEE, 151–164.
[6] Behnia, M., Sahu, P., Paccagnella, R., Yu, J., Zhao, Z. N., Zou, X., Unterluggauer, T., Torrellas, J., Rozas, C. V., Morrison, A., McKeen, F., Liu, F., Gabor, R., Fletcher, C. W., Basak, A., and Alameldeen, A. R. 2020. Speculative Interference Attacks: Breaking Invisible Speculation Schemes. CoRR abs/2007.11818 (2020). arXiv:2007.11818 https://arxiv.org/abs/2007.11818
[7] Bernstein, D. J. 2019. djbsort. https://sorting.cr.yp.to/
[8] Binkert, N., Beckmann, B., Black, G., Reinhardt, S. K., Saidi, A., Basu, A., Hestness, J., Hower, D. R., Krishna, T., Sardashti, S., et al. 2011. The gem5 simulator. ACM SIGARCH computer architecture news 39, 2 (2011), 1–7.
[9] Braun, B. A., Jana, S., and Boneh, D. 2015. Robust and efficient elimination of cache and timing side channels. arXiv preprint arXiv:1506.00189 (2015).
[10] Calder, B. and Grunwald, D. 1994. Fast and Accurate Instruction Fetch and Branch Prediction. In Proceedings of the 21st Annual International Symposium on Computer Architecture. Chicago, IL, USA, April 1994, David A. Patterson (Ed.). IEEE Computer Society, 2–11. https://doi.org/10.1109/ISCA.1994.288166
[11] Canella, C., Genkin, D., Giner, L., Gruss, D., Lipp, M., Minkin, M., Moghimi, D., Piessens, F., Schwarz, M., Sunar, B., et al. 2019. Fallout: Leaking data on meltdown-resistant CPUs. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. 769–784.
[12] Canella, C., Dinakarrao, S. M. P., Gruss, D., and Khasawneh, K. N. 2020. Evolution of defenses against transient-execution attacks. In Proceedings of the 2020 on Great Lakes Symposium on VLSI. 169–174.
[13] Canella, C., Van Bulck, J., Schwarz, M., Lipp, M., von Berg, B., Ortner, P., Piessens, F., Evtyushkin, D., and Gruss, D. 2019. A Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX Security Symposium. extended classification tree at https://transient.fail/.
[14] Chen, G., Chen, S., Xiao, Y., Zhang, Y., Lin, Z., and Lai, T. H. 2019. SgxPectre: Stealing intel secrets from SGX enclaves via speculative execution. In 2019 IEEE European Symposium on Security and Privacy (EuroS&P). IEEE, 142–157.
[15] Choi, Y., Knies, A., Gerke, L., and Ngai, T.-F. 2001. The impact of if-conversion and branch prediction on program execution on the Intel Itanium processor. In Proceedings. 34th ACM/IEEE International Symposium on Microarchitecture. MICRO-34. Citeseer, 182–182.
[16] Clark, D. W. and Levy, H. M. 1982. Measurement and analysis of instruction use in the VAX-11/780. 9–17 pages. https://dl.acm.org/doi/pdf/10.1145/1067649.801709.
[17] Davi, L., Hanreich, M., Paul, D., Sadeghi, A.-R., Koeberl, P., Sullivan, D., Arias, O., and Jin, Y. 2015. HAFIX: Hardware-assisted flow integrity extension. In 2015 52nd ACM/EDAC/IEEE Design Automation Conference (DAC). IEEE, 1–6.
[18] DeRosa, J. A. and Levy, H. M. 1987. An Evaluation of Branch Architectures. In Proceedings of the 14th Annual International Symposium on Computer Architecture. Pittsburgh, PA, USA, June 1987, Daniel C. St. Clair (Ed.). 10–16. https://doi.org/10.1145/30350.30352
[19] DiPasquale, S., Elmeleegy, K., Ganier, C. J., and Swanson, E. 2003. Hardware Loop Buffering. (2003).
[20] Elkhouly, R., El-Mahdy, A., and Elmasry, A. 2015. Pattern-Driven Branchless Code Generation. JEC-ECC (2015).
[21] Elmasry, A. and Katajainen, J. 2013. Branchless search programs. In International Symposium on Experimental Algorithms. Springer, 127–138.
[22] Fisher, J. A. 1983. Very long instruction word architectures and the ELI-512. In Proceedings of the 10th annual international symposium on Computer architecture. 140–150.
[23] Fog, A. 2020. The microarchitecture of Intel, AMD and VIA CPUs: An optimization guide for assembly programmers and compiler makers. https://www.agner.org/optimize/.
[24] Free and Open Source Silicon Foundation. 2020. Embench IOT. https://www.embench.org/. (May 2020). Accessed: 2020-05-29.
[25] Gal-On, S. and Levy, M. 2012. Exploring coremark a benchmark maximizing simplicity and efficacy. The Embedded Microprocessor Benchmark Consortium (2012).
[26] Gueron, S. 2010. Intel Advanced Encryption Standard (AES) New Instructions Set. https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf.
[27] Gwennap, L. 2010. Sandy Bridge spans generations. http://people.eecs.berkeley.edu/~kubitron/cs252/handouts/papers/Microprocessor-Report-Sandy-Bridge-Spans-Generations-243901.pdf.
[28] Horn, J. 2018. speculative execution, variant 4: speculative store bypass. https://bugs.chromium.org/p/project-zero/issues/detail?id=1528/.
[29] Johnston, J. and Fitzsimmons, T. 2021. The newlib homepage. URL http://sourceware.org/newlib (2021).
[30] Juan, T., Sanjeevan, S., and Navarro, J. J. 1998. Dynamic History-length Fitting: A Third Level of Adaptivity for Branch Prediction. In Proceedings of the 25th Annual International Symposium on Computer Architecture, ISCA 1998, Barcelona, Spain, June 27 - July 1, 1998, Mateo Valero, Gurindar S. Sohi, and Doug DeGroot (Eds.). IEEE Computer Society, 155–166. https://doi.org/10.1109/ISCA.1998.694771
[31] Khasawneh, K. N., Koruyeh, E. M., Song, C., Evtyushkin, D., Ponomarev, D., and Abu-Ghazaleh, N. B. 2018. SafeSpec: Banishing the Spectre of a Meltdown with Leakage-Free Speculation. CoRR abs/1806.05179 (2018).
[32] Kiriansky, V., Lebedev, I., Amarasinghe, S., Devadas, S., and Emer, J. 2018. DAWG: A defense against cache timing attacks in speculative execution processors. In 2018 51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). IEEE, 974–987.
[33] Kiriansky, V. and Waldspurger, C. 2018. Speculative buffer overflows: Attacks and defenses. arXiv preprint arXiv:1807.03757 (2018).
[34] Kocher, P., Horn, J., Fogh, A., Genkin, D., Gruss, D., Haas, W., Hamburg, M., Lipp, M., Mangard, S., Prescher, T., et al. 2019. Spectre attacks: Exploiting speculative execution. In 2019 IEEE Symposium on Security and Privacy (SP). IEEE, 1–19.
[35] Koruyeh, E. M., Khasawneh, K. N., Song, C., and Abu-Ghazaleh, N. 2018. Spectre returns! speculation attacks using the return stack buffer. In 12th USENIX Workshop on Offensive Technologies (WOOT 18).
[36] Lattner, C. and Adve, V. 2004. LLVM: A compilation framework for lifelong program analysis & transformation. In International Symposium on Code Generation and Optimization, 2004. CGO 2004. IEEE, 75–86.
[37] Lee, E. A., Reineke, J., and Zimmer, M. 2017. Abstract PRET Machines. In 2017 IEEE Real-Time Systems Symposium, RTSS 2017, Paris, France, December 5-8, 2017. 1–11. https://doi.org/10.1109/RTSS.2017.00041
[38] Li, P., Zhao, L., Hou, R., Zhang, L., and Meng, D. 2019. Conditional speculation: An effective approach to safeguard out-of-order execution against spectre attacks. In 2019 IEEE International Symposium on High Performance Computer Architecture (HPCA). IEEE, 264–276.
[39] Lipp, M., Schwarz, M., Gruss, D., Prescher, T., Haas, W., Fogh, A., Horn, J., Mangard, S., Kocher, P., Genkin, D., et al. 2018. Meltdown: Reading kernel memory from user space. In 27th USENIX Security Symposium (USENIX Security 18). 973–990.
[40] Maisuradze, G. and Rossow, C. 2018. ret2spec: Speculative execution using return stack buffers. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 2109–2122.
[41] Nemati, H., Guanciale, R., Buiras, P., and Lindner, A. 2020. Speculative Leakage in ARM Cortex-A53. arXiv preprint arXiv:2007.06865 (2020).
[42] Papon, C. 2020. VexRiscv. https://github.com/SpinalHDL/VexRiscv. (May 2020). Accessed: 2020-05-28.
[43] Raghavan, P., Lambrechts, A., Jayapala, M., Catthoor, F., and Verkest, D. 2008. Distributed loop controller for multithreading in unithreaded ILP architectures. IEEE Trans. Comput. 58, 3 (2008), 311–321.
[44] Sakalis, C., Kaxiras, S., Ros, A., Jimborean, A., and Själander, M. 2019. Efficient invisible speculative execution through selective delay and value prediction. In 2019 ACM/IEEE 46th Annual International Symposium on Computer Architecture (ISCA). IEEE, 723–735.
[45] Schwarz, M., Lipp, M., Canella, C., Schilling, R., Kargl, F., and Gruss, D. 2020. Context: A generic approach for mitigating spectre. In Proc. Network and Distributed System Security Symposium. https://doi.org/10.14722/ndss, Vol. 10.
[46] Schwarz, M., Lipp, M., Moghimi, D., Van Bulck, J., Stecklina, J., Prescher, T., and Gruss, D. 2019. ZombieLoad: Cross-privilege-boundary data sampling. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. 753–768.
[47] Szefer, J. 2019. Survey of microarchitectural side and covert channels, attacks, and defenses. Journal of Hardware and Systems Security 3, 3 (2019), 219–234.
[48] Tanenbaum, A. S. 2016. Structured computer organization. Pearson Education.
[49] Turner, P. 2018. Retpoline: A software construct for preventing branch-target-injection. URL https://support.google.com/faqs/answer/7625886 (2018).
[50] Van Bulck, J., Minkin, M., Weisse, O., Genkin, D., Kasikci, B., Piessens, F., Silberstein, M., Wenisch, T. F., Yarom, Y., and Strackx, R. 2018. Foreshadow: Extracting the keys to the Intel SGX kingdom with transient out-of-order execution. In 27th USENIX Security Symposium (USENIX Security 18). 991–1008.
[51] Van Schaik, S., Milburn, A., Österlund, S., Frigo, P., Maisuradze, G., Razavi, K., Bos, H., and Giuffrida, C. 2019. Addendum to RIDL: Rogue in-flight data load. https://mdsattacks.com/.
[52] Van Schaik, S., Milburn, A., Österlund, S., Frigo, P., Maisuradze, G., Razavi, K., Bos, H., and Giuffrida, C. 2019. RIDL: Rogue in-flight data load. In 2019 IEEE Symposium on Security and Privacy (SP). IEEE, 88–105.
[53] Varadarajan, V., Ristenpart, T., and Swift, M. 2014. Scheduler-based defenses against cross-VM side-channels. In 23rd USENIX Security Symposium (USENIX Security 14). 687–702.
[54] Weisse, O., Neal, I., Loughlin, K., Wenisch, T. F., and Kasikci, B. 2019. NDA: Preventing speculative execution attacks at their source. In Proceedings of the 52nd Annual IEEE/ACM International Symposium on Microarchitecture. 572–586.
[55] Weisse, O., Van Bulck, J., Minkin, M., Genkin, D., Kasikci, B., Piessens, F., Silberstein, M., Strackx, R., Wenisch, T. F., and Yarom, Y. 2018. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution. Technical report (2018). See also USENIX Security paper Foreshadow.
[56] Wistoff, N., Schneider, M., Gürkaynak, F. K., Benini, L., and Heiser, G. 2020. Prevention of Microarchitectural Covert Channels on an Open-Source 64-bit RISC-V Core. arXiv preprint arXiv:2005.02193 (2020).
[57] Yan, M., Choi, J., Skarlatos, D., Morrison, A., Fletcher, C., and Torrellas, J. 2018. Invisispec: Making speculative execution invisible in the cache hierarchy. In 2018 51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO). IEEE, 428–441.
[58] Yu, J., Hsiung, L., Hajj, M. E., and Fletcher, C. W. 2019. Data Oblivious ISA Extensions for Side Channel-Resistant and High Performance Computing. In NDSS.
[59] Yu, J., Yan, M., Khyzha, A., Morrison, A., Torrellas, J., and Fletcher, C. W. 2019. Speculative Taint Tracking (STT): A Comprehensive Protection for Speculatively Accessed Data. In Proceedings of the 52nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO '52). Association for Computing Machinery, New York, NY, USA, 954–968. https://doi.org/10.1145/3352460.3358274
[60] Zagieboylo, D., Suh, G. E., and Myers, A. C. 2019. Using information flow to design an ISA that controls timing channels. In 2019 IEEE 32nd Computer Security Foundations Symposium (CSF). IEEE, 272–27215.
[61] Zhang, Y. and Reiter, M. K. 2013. Düppel: Retrofitting commodity operating systems to mitigate cache side channels in the cloud. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. 827–838.
[62] Zhao, L., Li, P., Hou, R., Li, J., Huang, M. C., Zhang, L., Qian, X., and Meng, D. 2020. A Lightweight Isolation Mechanism for Secure Branch Predictors. arXiv preprint arXiv:2005.08183 (2020).

### Hardware Loop Counters

Loops are often the execution hotspots in programs and significantly contribute to diverging control flow. Therefore, the concept of hardware-supported loops can be highly beneficial, as discussed in the literature [19, 43] and implemented in various architectures.

**Implementation:**
Hardware loop counters are typically realized using a dedicated hardware counter. This counter is set by a specific instruction with a value representing the maximum trip count for the loop. The trip count must be computable at compile time or available in a register at runtime before entering the loop. Information about which instructions are included in the loop is specified via labels or additional specific instructions. The hardware loop counter decrements the start value after each iteration and induces a branch back to the start of the loop as long as the counter is not zero. This can be done implicitly at the end of the loop or explicitly with an instruction.

**Performance Benefits:**
Using hardware loops improves performance by reducing instruction size and employing dedicated loop control logic, which does not have to be calculated by the Arithmetic Logic Unit (ALU). For BasicBlocker, hardware loops are particularly valuable when applied to loops that do not terminate early, as the control flow for all iterations is known when entering the loop.

**Integration:**
We seamlessly support hardware loop counters in our design by introducing a new instruction and adding two arguments to the `bb` instruction. The `lcnt` instruction sets the number of loop iterations, enhancing the efficiency and security of our proposed architecture.