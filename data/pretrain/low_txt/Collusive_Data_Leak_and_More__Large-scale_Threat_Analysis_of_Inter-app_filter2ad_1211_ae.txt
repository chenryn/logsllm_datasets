### SharedPreferences Modes and Sensitivity

There are three modes for `SharedPreferences` in Android: private (accessible only by the owner app), world-readable (others can read), and world-writable (others can read and write). In virtually all taint analyses, `SharedPreferences` is labeled as sensitive. Even when configured as private, other components within the same app can access it, leading to potential data leaks.

### Advantages of DIALDroid

DIALDroid's database backend allows security analysts to easily adjust and customize sensitivity definitions, refining query results. In Section 4.2, we demonstrate recomputed results with a smaller sink set consisting of `java.net.URL`, `android.telephony.SmsManager`, and `org.apache.http.HttpResponse`.

### App Chain Length and Data Leaks

Three or more apps can form a chain through inter-component communication (ICC) links to leak data. For example, if apps A, B, and C create an ICC chain, app A transfers sensitive information to app B via an ICC exit leak, and app B then leaks that information to app C. This chain is a special case of two-app-based ICC collusion, where the receiver app leaks data extracted from an intent by initiating another ICC (i.e., ICC entry leak with ICC initiation methods as sink). DIALDroid identifies such A→B links as inter-app collusion.

Among the three benchmarks evaluated in Section 4, DIALDroid identified the following scenarios in the ICC-Bench, where three components work together to leak sensitive information:

1. `implicit5.M ainActivity → implicit5.F ooActivity → implicit5.HookActivity`
2. `implicit6.M ainActivity → implicit5.F ooActivity → implicit5.HookActivity`

Although no chains of more than two components were found among the 110K real-world apps, DIALDroid is capable of identifying such chains.

### Risk Prioritization

Security analysts need tools to prioritize the investigation of reported threats. Given the quadratic growth of possible inter-app ICCs with the number of apps, prioritization is crucial. Relaxing the definitions of sensitive sources and sinks (i.e., using smaller sets) reduces the number of alerts generated. Additionally, quantitative metrics can be developed to prioritize risks based on the type of inter-app sensitive ICC flows, using machine learning methods. PRIMO [26] can also be used to triage the ICC links detected by DIALDroid.

### User Applications

While DIALDroid is primarily for marketplace owners, Android users can also benefit from this tool. For example, enterprise users can check for possible inter-app collusions before allowing certain apps to be installed on their employees' devices. Furthermore, a large-scale, regularly updated public database like ours can be queried by users to find possible inter-app communications to or from a particular app.

### Limitations

Existing static analysis approaches are ineffective against unintended ICCs caused by mismatched data, as described in Section 4.7. Inferring the intended data type sent or received by an app based on the code preceding or following an ICC is challenging and remains an open problem.

Like most static analysis approaches, DIALDroid has some inherent limitations. For example, it can resolve reflective calls only if their arguments are string constants. As mentioned in Section 3.3, DIALDroid may fail to compute some ICC links due to strict intent matching rules that ignore overapproximated regular expressions.

As noted in Section B.1, DIALDroid loses field sensitivity when intent objects carrying sensitive information pass through ICC channels, potentially leading to false positive collusion identification. DIALDroid uses a regular expression string search within the ICC entry leak path for source data keys. In the `startActivity6` test case, this search may return false positives if the path contains any string that includes the key as a substring. Manual inspection of 30 taint paths from real-world collusion pairs did not reveal any such occurrences.

To enable large-scale analysis, we limited the analysis time per app. Although DIALDroid failed to analyze only 5.7% of the applications within the allocated time (20 minutes), some of these applications could still cause collusions.

### Related Work

#### Collusion and Privilege Escalation

Davi et al. first described the possibility of privilege escalation attacks in Android [10], and Marforio et al. provided a comprehensive description of possible collusion channels, including inter-app ICC [24]. Later, ComDroid offered the first comprehensive analysis of inter-app ICC-based threats, including broadcast theft and activity hijacking [9]. Since ComDroid analyzed individual apps, its results may over-approximate the number of sensitive inter-app ICC flows, regardless of how the data is consumed by the receiver app. In comparison, our pairwise analysis performs end-to-end data-flow analysis, which is more fine-grained. Requiring the receiver app to have ICC entry leaks (as defined in Section 2) reduces false positives, allowing security analysts to better prioritize their investigations.

Elish et al. pointed out that collusion detection solutions may suffer from high false positives without in-depth pairwise data-flow analysis [13]. Researchers have identified a third type of inter-app ICC attack, called private activity invocation, due to the misconfiguration of intent scopes [33]. A recent study also reported the presence of collusive attacks to promote app rankings in the Chinese Apple marketplace [8].

#### Single-App Security

For static analysis of single apps, general-purpose solutions such as DroidSafe [15] and Amandroid [35] can identify sensitive data flows. Other techniques have been proposed for specific detection purposes. For example, CHEX [23] focuses on detecting data flows that enable component hijacking within a single app. AppIntent uses symbolic execution to determine whether a data transmission is intended by the user through analyzing its compatibility with required GUI-operation sequences [39]. AAPL [22] utilizes peer voting for privacy leakage detection along with data-flow analysis. Wolfe et al. use supervised learning to classify malware families [36].

Several researchers have also used dynamic program analysis for screening single apps. TaintDroid [14] dynamically tracks information flows and detects privacy leaks through Android system instrumentation. INTENTDROID [16] uses debug breakpoints to dynamically detect the unsafe handling of incoming messages to identify possible component hijacking. IntentFuzzer uses a fuzzing framework to identify exposed and vulnerable interfaces [38]. IntelliDroid aims to generate inputs for dynamic analysis [37].

#### App-Pair Security

Most dynamic analysis solutions modify the Android system to enforce security policies to prevent inter-app threats. XmanDroid was the first to demonstrate runtime collusion detection by enforcing policies on the combined permission set of app-pairs [5]. FlaskDroid enforces mandatory access control policies to prevent privilege escalation and collusion attacks [7]. IntentScope enforces security policies during dynamic intent forwarding [17].

However, these dynamic analysis-based solutions are designed to analyze a small set of apps (e.g., those installed on the same phone) and do not scale to hundreds of thousands of apps. In contrast, our solution is designed for security analysts who maintain large-scale app marketplaces or even medium-scale proprietary marketplaces owned by organizations for their employees, e.g., only approved apps from the internal app marketplace are allowed to be installed.

Among the static analysis-based solutions, IccTA+ApkCombiner combines two apps into a single app (e.g., using ApkCombiner [20]) and then applies existing single-app static analysis (e.g., IccTA [21]) to identify inter-app threats. However, this approach performs a large number of redundant program analyses, significantly slowing down the computation. Our evaluation shows that the combination mechanism of ApkCombiner is fragile and fails on the majority of app-pairs. DidFail [19] and COVERT [4] perform data-flow analysis only once per app. COVERT uses formal methods (model checking) to detect suspicious inter-app ICC flows [4], but its formal model generation process is fragile and has low scalability. DidFail uses an approach similar to ours, but its intent resolution and intent-matching process performs poorly. Moreover, DidFail does not enforce security policies to reduce the search space and is not scalable. Finally, DidFail does not dynamically adjust the precision of static taint analysis, often failing to complete the analysis of apps even after a long time. In comparison, we implement a pragmatic adaptive mechanism that dynamically determines the accuracy-performance tradeoff during static taint analysis. FUSE is aimed at single-app analysis but can be extended to build a multi-app information-flow graph [32]. FUSE’s intra-procedural string analysis is limited and error-prone. Existing inter-app analysis tools have been evaluated on tens or hundreds of apps, and none have been evaluated on 110K apps like DIALDroid.

PRIMO estimates the likelihoods of inter-app ICC connections using a probabilistic technique and provides ICC-link probabilities computed based on empirical evidence [26]. Although PRIMO is not designed to be a complete ICC security detection tool, it provides useful complementary information to security analysts to focus on the risky ICCs that are most likely to occur in practice.

### Others

Researchers have proposed automatic patch generation for mitigating hijacking [41]. Similarly, applying third-party security patches for privilege escalation and capability leaks was proposed by Mulliner et al. [25]. Kantola et al. developed a heuristic policy to guide developers in writing safer apps [18]. Zhang et al. proposed monitoring network activities to identify stealth malwares [40].

### Conclusions and Future Work

We reported our findings from a large-scale inter-app ICC analysis for detecting collusions and privilege escalations. Accuracy and scalability are our key features, achieved through a new general-purpose Android intent resolution tool, database query systems, and pragmatic program-analysis execution management. Besides superior accuracy and runtime compared to state-of-the-art solutions, our analysis produces real-world collusive data leak and privilege escalation pairs and a myriad of interesting statistics on ICC security. We have open-sourced our entire tool-suite on GitHub [19] and made our database available [20] for other researchers.

### Acknowledgments

This research is supported by the DARPA APAC award FA8750-15-2-0076. The authors would like to thank Barbara Ryder, Xinming (Simon) Ou, Timothy Fraser, Michael Gordon, Matthew Might, and Michael Ernst for their helpful suggestions and feedback.

### References

[1] Y. Aafer, W. Du, and H. Yin. Droidapiminer: Mining API-level features for robust malware detection in Android. In Proc. of the Security and Privacy in Communication Networks, pages 86–103. 2013.
[2] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, and K. Rieck. DREBIN: Effective and explainable detection of Android malware in your pocket. In Proc. of the Network and Distributed System Security Symposium (NDSS), 2014.
[3] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. In Proc. of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’14, pages 259–269, 2014.
[4] H. Bagheri, A. Sadeghi, J. Garcia, and S. Malek. COVERT: Compositional analysis of Android inter-app permission leakage. IEEE Transactions in Software Engineering, 41(9):866–886, 2015.
[5] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-R. Sadeghi. XManDroid: A new Android evolution to mitigate privilege escalation attacks. Technische Universität Darmstadt, Technical Report TR-2011-04, 2011.
[6] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards taming privilege-escalation attacks on Android. In Proc. of the Network and Distributed System Security Symposium (NDSS), 2012.
[7] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and fine-grained mandatory access control on Android for diverse security and privacy policies. In Proc. of the 22nd USENIX Security Symposium, pages 131–146, 2013.
[8] H. Chen, D. He, S. Zhu, and J. Yang. Toward Detecting Collusive Ranking Manipulation Attackers in Mobile App Markets. In Proc. of the ACM Asia Conference on Computer and Communications Security (ASIACCS’ 17), 2017.
[9] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In Proc. of the 9th International Conference on Mobile systems, Applications, and Services, pages 239–252, 2011.
[10] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Proc. of the International Conference on Information Security, pages 346–360, 2011.
[11] E. Duan. DressCode and its potential impact for enterprise, September 2016. http://blog.trendmicro.com/trendlabs-security-intelligence/dresscode-potential-impact-enterprises/.
[12] K. O. Elish, X. Shu, D. D. Yao, B. G. Ryder, and X. Jiang. Profiling user-trigger dependence for Android malware detection. Computers & Security, 49:255–273, 2015.
[13] K. O. Elish, D. Yao, and B. G. Ryder. On the need of precise inter-app ICC classification for detecting Android malware collusions. In Proc. of the IEEE Mobile Security Technologies (MoST), 2015.
[14] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: An information-flow tracking system for realtime privacy monitoring on smartphones. ACM Transactions on Computer Systems (TOCS), 32(2):5, 2014.
[15] M. I. Gordon, D. Kim, J. H. Perkins, L. Gilham, N. Nguyen, and M. C. Rinard. Information flow analysis of Android applications in DroidSafe. In Proc. of the Network and Distributed System Security Symposium, 2015.
[16] R. Hay, O. Tripp, and M. Pistoia. Dynamic detection of inter-application communication vulnerabilities in Android. In Proc. of the ACM International Symposium on Software Testing and Analysis, pages 118–128, 2015.
[17] Y. Jing, G.-J. Ahn, A. Doupé, and J. H. Yi. Checking intent-based communication in Android with intent space analysis. In Proc. of the ACM Asia Conference on Computer and Communications Security, pages 735–746, 2016.
[18] D. Kantola, E. Chin, W. He, and D. Wagner. Reducing attack surfaces for intra-application communication in Android. In Proc. of the second ACM workshop on Security and privacy in smartphones and mobile devices, pages 69–80, 2012.
[19] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android taint flow analysis for app sets. In Proc. of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis, pages 1–6. ACM, 2014.
[20] L. Li, A. Bartel, T. F. Bissyandé, J. Klein, and Y. Le Traon. Apkcombiner: Combining multiple Android apps to support inter-app analysis. In IFIP International Information Security Conference, pages 513–527. 2015.
[21] L. Li, A. Bartel, T. F. D. A. Bissyande, J. Klein, Y. Le Traon, S. Arzt, S. Rasthofer, E. Bodden, D. Octeau, and P. McDaniel. IccTA: Detecting inter-component privacy leaks in Android apps. In Proc. of the IEEE/ACM 37th IEEE International Conference on Software Engineering, pages 280–291, 2015.
[22] K. Lu, Z. Li, V. P. Kemerlis, Z. Wu, L. Lu, C. Zheng, Z. Qian, W. Lee, and G. Jiang. Checking more and alerting less: Detecting privacy leakages via enhanced data-flow analysis and peer voting. In Proc. of the Network and Distributed System Security Symposium (NDSS), 2015.
[23] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: Statically vetting Android apps for component hijacking vulnerabilities. In Proc. of the 2012 ACM conference on Computer and communications security, pages 229–240, 2012.
[24] C. Marforio, H. Ritzdorf, A. Francillon, and S. Capkun. Analysis of the communication between colluding applications on modern smartphones. In Proc. of the Annual Computer Security Applications Conference, pages 51–60, 2012.
[25] C. Mulliner, J. Oberheide, W. Robertson, and E. Kirda. PatchDroid: Scalable third-party security patches for Android devices. In ACM Annual Computer Security Applications Conference, pages 259–268, 2013.
[26] D. Octeau, S. Jha, M. Dering, P. McDaniel, A. Bartel, L. Li, J. Klein, and Y. Le Traon. Combining static analysis with probabilistic models to enable market-scale Android inter-component analysis. In Proc. of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pages 469–484, 2016.
[27] D. Octeau, S. Jha, and P. McDaniel. Retargeting Android applications to Java bytecode. In Proc. of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering, pages 6:1–6:11, 2012.
[28] D. Octeau, D. Luchaup, M. Dering, S. Jha, and P. McDaniel. Composite Constant Propagation: Application to Android Inter-Component Communication Analysis. In Proc. of the International Conference on Software Engineering (ICSE), pages 77–88, 2015.
[29] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and Y. Le Traon. Effective inter-component communication mapping in Android: An essential step towards holistic security analysis. In Proc. of the 22nd USENIX security symposium, pages 543–558, 2013.
[30] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju, C. Nita-Rotaru, and I. Molloy. Using probabilistic generative models for ranking risks of Android apps. In Proc. of the ACM conference on Computer and communications security, pages 241–252, 2012.
[31] S. Rasthofer, S. Arzt, and E. Bodden. A machine-learning approach for classifying and categorizing Android sources and sinks. In Proc. of the Network and Distributed System Security Symposium (NDSS), 2014.
[32] T. Ravitch, E. R. Creswick, A. Tomb, A. Foltzer, T. Elliott, and L. Casburn. Multi-App security analysis with FUSE: Statically detecting Android app collusion. In Proc. of the ACM Program Protection and Reverse Engineering Workshop, 2014.
[33] D. Sbîrlea, M. G. Burke, S. Guarnieri, M. Pistoia, and V. Sarkar. Automatic detection of inter-application permission leaks in Android applications. IBM Journal of Research and Development, 57(6):10–1, 2013.
[34] R. Vallée-Rai, E. Gagnon, L. Hendren, P. Lam, P. Pominville, and V. Sundaresan. Optimizing Java bytecode using the soot framework: Is it feasible? In Proc. of the International conference on compiler construction, pages 18–34, 2000.
[35] F. Wei, S. Roy, X. Ou, et al. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps. In Proc. of the ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 1329–1341, 2014.
[36] B. Wolfe, K. Elish, and D. D. Yao. Comprehensive behavior profiling for proactive Android malware detection. In Proc. of the International Conference on Information Security, pages 328–344. Springer, 2014.
[37] M. Y. Wong and D. Lie. IntelliDroid: A targeted input generator for the dynamic analysis of Android malware. In Proc. of the Network and Distributed System Security Symposium (NDSS), 2016.
[38] K. Yang, J. Zhuge, Y. Wang, L. Zhou, and H. Duan. IntentFuzzer: Detecting capability leaks of Android applications. In ACM Symposium on Information, Computer and Communications Security, pages 531–536, 2014.
[39] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang. AppIntent: Analyzing sensitive data transmission in Android for privacy leakage detection. In Proc. of the ACM SIGSAC conference on Computer and communications security, pages 1043–1054, 2013.
[40] H. Zhang, D. Yao, N. Ramakrishnan, and Z. Zhang. Causality reasoning about network events for detecting stealthy malware activities. Computers & Security, 58:180–198, 2016.
[41] M. Zhang and H. Yin. AppSealer: Automatic generation of vulnerability-specific patches for preventing component hijacking attacks in Android applications. In Proc. of the