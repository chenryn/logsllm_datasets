### Randomization in the Rewriting Process

Randomization [18] can be extended into the rewriting process. Since no additional code is introduced, this in-place code randomization has a limited impact on code locality and, as past research has shown, incurs negligible runtime overhead.

### New Hardware Features to Reduce Overhead

In this work, we implement Heisenbyte using standard virtualization features found in most processors. The goal is to provide a baseline proof-of-concept implementation of our design. As discussed in § 5.2, the major source of overhead comes from inducing VM exits to implement destructive code reads. This overhead can be significantly reduced with the combined use of two new virtualization features in the recent Haswell processor [14]. 

The Haswell processor allows selected #EPT violations to be converted to a new type of exception that does not require VM exits to the hypervisor. This new exception, known as the #VE Virtualization Exception, reduces the latency of VM exits. During the active monitoring mode, a data read into protected executable memory pages will trigger an exception, and control will be handed over to the guest OS #VE Interrupt Service Handler (ISR). To handle the configuration of EPT entries, the second feature, named EPT Pointer switching, allows the guest OS to efficiently select within a pre-configured set of EPT pointers having the required EPT permissions.

### Code Read Logs for Binary Rewriting

As an optimization to aid offline static analysis, Heisenbyte can be augmented to record all read operations into executable memory into a log buffer. This log can then guide the static analysis in determining if a set of bytes within an executable section is intended as data at runtime. The binaries can be analyzed and rewritten repeatedly using this information to achieve high code coverage over time. This further reduces the system's overhead, as the data reads that previously triggered VM exits will no longer occur.

### Graceful Remediation

In addition to detecting attacks, Heisenbyte can offer the capability to gracefully terminate, rather than crash, the process targeted by the attack. It also provides alerting information regarding the attack to the user. Instead of using randomized junk bytes for destructive code reads, Heisenbyte can use specific bytes designed to induce selected software interrupts or traps when executed. The host component of Heisenbyte can be configured to mediate these interrupts. When malicious code attempts to execute code modified by earlier reads, pertinent information about the attempted code execution, such as the faulting instruction and the original and modified contents of the executable memory page, can be logged. This may assist in identifying the associated vulnerability and provide useful forensic information for vendors to patch the program.

### Related Work

Our work is enabled by two key techniques: maintaining separate code and data views in a von Neumann memory architecture, and applying destructive read operations on executable memory. We have described the most closely related research works in § 2.2. Here, we detail other works using these techniques.

#### Maintaining Separate Code/Data Views

Many researchers have explored the value of maintaining separate views for code and data. Early works were mostly offensive in nature. Van Oorschot et al. leveraged the desynchronization of the TLB to bypass self-hashing software checks [26]. Shadow Walker, a rootkit, relied on the split-TLB architecture of processors to hide its malicious code from being detected by antivirus scans [23]. Torrey explored the use of EPT to differentiate code from data at runtime to perform attestation on dynamically changing applications [25]. Spider used EPT permissions to maintain different views for code and data to implement evasion-resistant breakpoints that are "invisible" to the guest [7]. Our work shares similar EPT-based techniques with some of these works, albeit towards vastly different objectives.

#### Destructive Reads

Examples of destructive read operations in practice are sparse. Destructive-read embedded DRAM [8] is a special-purpose DRAM that allows destructive reads to conserve power consumption. At the software level, destructive read operations are sometimes performed by the BIOS during the memory check in its Power-On Self Test (POST) to ensure sensitive memory contents cannot be leaked [12]. Our software-emulated destructive read primitive on executable memory represents the first work to apply this technique to make system states non-deterministic and harder for adversaries to exploit.

### Conclusions

We present the novel use of destructive code reads to restrict adversaries' ability to leverage executable memory exposed through memory disclosure bugs. We realize this technique in Heisenbyte using existing hardware virtualization support to identify read operations on executable memory. To date, Heisenbyte is the first system that guarantees disclosed executable memory cannot be executed as intended, while still tolerating some degree of data not removed from the code pages. Our experiments demonstrate that Heisenbyte prevents the use of disclosed executable memory in real and synthetic attacks, offering transparent protection for legacy closed-source binaries with modest overall runtime overheads averaging 18.3%. Among defenses that break determinism in systems, Heisenbyte represents a resolute and effective step towards stopping advanced exploits.

### Acknowledgments

We thank the anonymous reviewers for their feedback on this work. This work is supported by grants FA 865011C7190, FA 87501020253, CCF/SaTC 1054844, and a fellowship from the Alfred P. Sloan Foundation. Opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the US Government or commercial entities.

### References

[1] M. Athanasakis, E. Athanasopoulos, M. Polychronakis, G. Portokalidis, and S. Ioannidis. The devil is in the constants: Bypassing defenses in browser JIT engines. In Proceedings of the 22nd Network and Distributed System Security Symposium (NDSS 2015), 2015.

[2] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny. You can run but you can’t read: Preventing disclosure exploits in executable code. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, CCS ’14, pages 1342–1353, New York, NY, USA, 2014. ACM.

[3] M. Backes and S. Nürnberger. Oxymoron: Making fine-grained memory randomization practical by allowing code sharing. Proc. 23rd Usenix Security Sym, pages 433–447, 2014.

[4] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. Jump-oriented programming: A new class of code-reuse attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, pages 30–40. ACM, 2011.

[5] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical code randomization resilient to memory disclosure. In 36th IEEE Symposium on Security and Privacy (Oakland), May 2015.

[6] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code randomization resilient to (just-in-time) return-oriented programming. 2015.

[7] Z. Deng, X. Zhang, and D. Xu. Spider: Stealthy binary program instrumentation and debugging via hardware virtualization. In Proceedings of the 29th Annual Computer Security Applications Conference, ACSAC ’13, pages 289–298, New York, NY, USA, 2013. ACM.

[8] H. Dybdahl, P. G. Kjeldsberg, M. Grannæs, and L. Natvig. Destructive-read in embedded DRAM, impact on power consumption. J. Embedded Comput., 2(2):249–260, Apr. 2006.

[9] I. Evans, S. Fingeret, J. González, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the point(er): On the effectiveness of code pointer integrity. In 36th IEEE Symposium on Security and Privacy (Oakland), May 2015.

[10] J. Gionta, W. Enck, and P. Ning. HIDEM: Protecting the contents of userspace memory in the face of disclosure vulnerabilities. In Proceedings of the 5th ACM Conference on Data and Application Security and Privacy, CODASPY ’15, pages 325–336, New York, NY, USA, 2015. ACM.

[11] Fyyre. Disable PatchGuard - the easy/lazy way. http://fyyre.ivory-tower.de/projects/bootloader.txt, 2011.

[12] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest we remember: Cold-boot attacks on encryption keys. Communications of the ACM, 52(5):91–98, 2009.

[13] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz. Librando: Transparent code randomization for just-in-time compilers. In Proceedings of the 2013 ACM SIGSAC conference on Computer & Communications Security, pages 993–1004. ACM, 2013.

[14] Intel. Intel 64 and IA-32 Architectures Software Developer’s Manual - Volume 3C, 2014.

[15] C. Kil, J. Jim, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In Android - Exploit Writeup, 2013.

[16] Microsoft. Asynchronous procedure calls. https://msdn.microsoft.com/en-us/library/windows/desktop/ms681951(v=vs.85).aspx.

[17] Microsoft. Windows Resource Protection. https://msdn.microsoft.com/en-us/library/windows/desktop/cc185681(v=vs.85).aspx.

[18] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the gadgets: Hindering return-oriented programming using in-place code randomization. In Security and Privacy (SP), 2012 IEEE Symposium on, pages 601–615. IEEE, 2012.

[19] P. Pie. Mobile Pwn2Own Autumn 2013 - Chrome on Android - Exploit Writeup, 2013.

[20] J. Seibert, H. Okkhravi, and E. Söderström. Information leaks without memory disclosures: Remote side channel attacks on diversified code. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, pages 54–65. ACM, 2014.

[21] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM conference on Computer and communications security, pages 552–561. ACM, 2007.

[22] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In Security and Privacy (SP), 2013 IEEE Symposium on, pages 574–588. IEEE, 2013.

[23] S. Sparks and J. Butler. Raising the bar for Windows rootkit detection. http://phrack.org/issues/63/8.html, 2005.

[24] D. L. C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell, and M. Horowitz. Architectural support for copy and tamper resistant software. In Proceedings of the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS IX, pages 168–177, New York, NY, USA, 2000. ACM.

[25] J. Torrey. More Shadow Walker: TLB-splitting on modern x86. Blackhat USA, 2014.

[26] P. Van Oorschot, A. Somayaji, and G. Wurster. Hardware-assisted circumvention of self-hashing software tamper resistance. Dependable and Secure Computing, IEEE Transactions on, 2(2):82–92, April 2005.

[27] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code. In Proceedings of the 2012 ACM conference on Computer and communications security, pages 157–168. ACM, 2012.

[28] R. Wartell, Y. Zhou, K. W. Hamlen, M. Kantarcioglu, and B. Thuraisingham. Differentiating code from data in x86 binaries. In Machine Learning and Knowledge Discovery in Databases, pages 522–536. Springer, 2011.

[29] C. Song, C. Zhang, T. Wang, W. Lee, and D. Melski. Exploiting and protecting dynamic code generation. In Proceedings of the 2015 Network and Distributed System Security (NDSS) Symposium, 2015.