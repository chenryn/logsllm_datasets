# 日期
2017-05-19

# 参考文献
[19] Fiat, 2015. Fiat-Crypto. https://github.com/mit-plv/fiat-crypto. (访问于2015年)。

[20] Michael R. Garey 和 David S. Johnson, 1979. 《计算机与难解性: NP-完全性理论导论》。W. H. Freeman and Company 出版社。

[21] Gert-Martin Greuel 和 Gerhard Pfister, 2008. 《交换代数入门（第二版）》。Springer 出版社。

[22] John Harrison, 2007. 使用 Gröbner 基本原理自动化初等数论证明。在 CADE (LNCS) 中，Frank Pfenning 编辑，第4603卷。Springer 出版社, 页码 51–66。

[23] C. A. R. Hoare, 1969. 计算机编程的公理基础。CACM 12, 10 (1969), 页码 576–580。

[24] Nick Howgrave-Graham, Phong Q. Nguyen, David Pointcheval, John Proos, Joseph H. Silverman, Ari Singer, 和 William Whyte, 2003. 解密失败对 NTRU 加密安全的影响。在 CRYPTO (LNCS) 中，Dan Boneh 编辑，第2729卷。Springer 出版社, 页码 226–246。

[25] Peter L. Montgomery, 1987. 加速 Pollard 和椭圆曲线分解方法。Math. Comp. 48, 177 (1987), 页码 243–264。

[26] Magnus O. Myreen 和 Gregorio Curello, 2013. 验证过的 Bignum 实现：x86-64 机器代码中的珍珠证明。在 Certified Programs and Proofs (LNCS) 中，第8307卷。Springer 出版社, 页码 66–81。https://doi.org/10.1007/978-3-319-03545-1_5

[27] Magnus O. Myreen 和 Michael J. C. Gordon, 2007. 现实建模机器代码的 Hoare 逻辑。在 TACAS (LNCS) 中，Orna Grumberg 和 Michael Huth 编辑，第4424卷。Springer 出版社, 页码 568–582。

[28] Loïc Pottier, 2008. 将 Gröbner 基程序连接到 Coq 进行代数、几何和算术证明。在知识交流：自动定理证明器和证明助手，G. Sutcliffe, P. Rudnicki, R. Schmidt, B. Konev, 和 S. Schulz 编辑。页码 418。

[29] Loïc Pottier, 2010. 将 Gröbner 基程序连接到 Coq 进行代数、几何和算术证明。技术报告 abs/1007.3615。CoRR。

[30] Aaron Tomb, 2016. 自动验证现实世界中的密码实现。IEEE Security & Privacy 14, 6 (2016), 页码 26–33。https://doi.org/10.1109/MSP.2016.125

[31] Wikipedia, 2017. Curve25519。https://en.wikipedia.org/wiki/Curve25519。（访问于2017年）。

## 附录 A
### A.1 GF(2^255 - 19) 上的乘法

以下 bvCryptoLine 代码实现了 AMD64 架构上的 GF(2^255 - 19) 乘法：

```asm
1 : mulrax ← x3;
2 : mulrax ← mulrax × bv64 (19);
3 : mulx319 ← mulrax;
4 : mulrdx mulrax ← mulrax × y2;
5 : r0 ← mulrax;
6 : mulr01 ← mulrdx;
7 : mulrax ← x4;
8 : mulrax ← mulrax × bv64 (19);
9 : mulx419 ← mulrax;
10 : mulrdx mulrax ← mulrax × y1;
11 : carry r0 ← r0 + mulrax;
12 : mulr01 ← mulr01 + mulrdx + carry;
13 : mulrax ← x0;
14 : mulrdx mulrax ← mulrax × y0;
15 : r0 ← r0 + mulrax;
16 : mulr01 ← mulr01 + mulrdx + carry;
17 : mulrax ← x0;
18 : mulrdx mulrax ← mulrax × y1;
19 : r1 ← mulrax;
20 : mulr11 ← mulrdx;
21 : mulrax ← x0;
22 : mulrdx mulrax ← mulrax × y2;
23 : r2 ← mulrax;
24 : mulr21 ← mulrdx;
25 : mulrax ← x0;
26 : mulrdx mulrax ← mulrax × y3;
27 : r3 ← mulrax;
28 : mulr31 ← mulrdx;
29 : mulrax ← x0;
30 : mulrdx mulrax ← mulrax × y4;
31 : r4 ← mulrax;
32 : mulr41 ← mulrdx;
33 : mulrax ← x1;
34 : mulrdx mulrax ← mulrax × y0;
35 : r1 ← r1 + mulrax;
36 : mulr11 ← mulr11 + mulrdx + carry;
37 : mulrax ← x1;
38 : mulrdx mulrax ← mulrax × y1;
39 : r2 ← r2 + mulrax;
40 : mulr21 ← mulr21 + mulrdx + carry;
41 : mulrax ← x1;
42 : mulrdx mulrax ← mulrax × y2;
43 : r3 ← r3 + mulrax;
44 : mulr31 ← mulr31 + mulrdx + carry;
45 : mulrax ← x1;
46 : mulrdx mulrax ← mulrax × y3;
47 : r4 ← r4 + mulrax;
48 : mulr41 ← mulr41 + mulrdx + carry;
49 : mulrax ← x1;
50 : mulrax ← mulrax × bv64 (19);
51 : mulrdx mulrax ← mulrax × y4;
52 : r0 ← r0 + mulrax;
...
```

（后续代码省略）

令 bMul 表示上述程序。定义 qa ≜ ⊤, qr ≜ 0 ≤ x0, x1, x2, x3, x4, y0, y1, y2, y3, y4 ≤ bv64 (2^52), q′a ≜ radix51V (x4, x3, x2, x1, x0) × radix51V (y4, y3, y2, y1, y0) ≡ radix51V (z4, z3, z2, z1, z0) mod bv64 (2^255 − 19), 和 q′r ≜ 0 ≤ z0, z1, z2, z3, z4 ≤ bv64 (2^52)。其规范为：

\[
\text{Precondition: } qa \land qr
\]
\[
\text{Postcondition: } q'a \land q'r
\]

\[
\text{bMul}
\]

（后续代码省略）

---

以上是优化后的文本，使其更加清晰、连贯和专业。希望对你有帮助！