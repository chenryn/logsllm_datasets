### The Internet of Things (IoT) and Security

The proliferation of the Internet of Things (IoT) means that a growing number of devices now have internet connectivity and can be controlled via mobile phones. Examples include home and office security systems, cars, classroom audio-visual equipment, and home appliances such as thermostats, refrigerators, and televisions. It is crucial to ensure that the web API endpoints of these devices are properly secured against hijacking vulnerabilities.

### A. Defense Guidelines

We attribute some of the observed security issues to the evolving application architecture in the modern era, where web APIs serve as generic services that can scale to support multiple client platforms, including web and mobile applications. Additionally, due to the enhanced capabilities of mobile devices, web service providers sometimes defer validation logic to the clients, which can lead to subtle inconsistencies and vulnerabilities. Based on our findings, we recommend the following guidelines:

- **Never Trust the Client**: Do not defer input validation to the client side. The server must be at least as strict as the client for input validation.
- **Server-Side Validation**: The server must be prepared to handle and reject input regardless of the client. No assumptions should be made about the client.
- **Authentication and Authorization**: Implement authentication and authorization logic carefully on the server side.
- **Consistency Testing**: Thoroughly test client-side validation for consistency with server-side validation logic. Tools like WARDroid can help identify potential inconsistencies.
- **Data Sanitization**: Both clients and servers must sanitize inbound and outbound data, especially when it can be used interchangeably between mobile and web clients.

While we have focused on the problems arising from inconsistent input validation logic, addressing this issue will require a concerted effort and a paradigm shift.

### B. Limitations

#### Obfuscated Code
Obfuscation is common in real-world applications, with a recent study showing that 15% of apps are obfuscated [25]. Many tools, such as Proguard [26], rename identifiers to make reverse engineering more difficult. WARDroid does not handle obfuscated code, but this is included in future work.

#### Native and JNI Code
WARDroid does not handle native code and Java Native Interface (JNI) code. These are considered out of scope for our current work.

#### State Changes
Another limitation is that WARDroid cannot reason about state changes and values originating from previous requests to the API. For example, an app may request a token value from a remote server that is included in a subsequent request. Previous works, such as [21] and [18], propose methodologies to address this. WARDroid can be retrofitted with this feature to improve its accuracy.

#### WebViews
WARDroid's analysis focuses on native mobile code and does not consider web API accesses facilitated through WebView-loaded JavaScript code in hybrid mobile apps. We use a subset of the apps from our recent work, which found that over 90% of apps included at least one WebView [19]. In that work, we provide an approach for uncovering JavaScript Bridge functionality and semantics in hybrid mobile apps.

#### Authentication
WARDroid cannot evaluate requests that require user authentication unless we hard-code test credentials into the request template, such as valid OAuth tokens. An inherent challenge with most static analysis-based systems, including WARDroid, is the inability to automatically synthesize valid authentication sessions. Some level of human intervention is necessary to overcome this limitation.

### C. Convergence of Web and Mobile

In today’s internet-connected mobile society, the web and mobile platforms share common ground in providing security and privacy. This work is inspired by previous research on the web platform, such as NoTamper [3] and Waptec [7], which pursue similar goals in the context of browser-based web applications. Our work directly addresses an important issue emerging from the integration of web and mobile platforms.

The combination of mobile and web into new complex systems, such as web service APIs, web-based operating system environments, and hybrid applications, presents a new frontier in security and privacy research.

### IX. Related Work

Our work builds on several previous studies in the area of program analysis on the Android framework, particularly using Flowdroid [15] and Soot [11]. Prior applications of these tools on Android include detection of privacy leakage, malware, and other vulnerabilities. In this work, we use program analysis techniques to analyze a mobile application’s validation logic as a model of its backend server validation logic.

#### Web Application Analysis
Our work is inspired by research into parameter tampering vulnerabilities on web applications. Waptec [7] and NoTamper [3] are two prominent works that automatically identify parameter tampering vulnerabilities and generate exploits. Similarly, WARDroid uses concepts inspired by these works to analyze the inconsistencies between mobile apps and their backend web API servers.

#### SIFON [27]
SIFON analyzes web APIs to determine the extent of oversharing of user information, where the server sends information to the app that is never used. Other related works look at the issues arising from the use of WebView components to combine web and mobile platforms into a seamless experience. Luo et al. [28] found several security issues due to this practice. NoFrak [29] analyzed a similar issue and proposed an approach to augment security models for finer-grained access control between mobile and web interactions.

#### Static Analysis
This work utilizes various static analysis techniques and tools. Static analysis is often scalable and can achieve higher code coverage than dynamic analysis. Previous works commonly reconstruct the inter-procedural control flow graph by modeling the Android app’s lifecycle. We leverage FlowDroid [15] to reconstruct and extend the ICGF as an augmented program dependence graph, but our goal is slightly different: detecting data flow from source to sink. Similar works, such as Extractocol [18] and Smartgen [30], follow a similar approach and use Flowdroid as the basis for static analysis of apps to uncover the behavior of communications with web servers. WARDroid similarly analyzes network behavior but focuses on validation inconsistency with the server.

#### Protocol Reverse Engineering
Our work shares similarities with protocol reverse engineering [31], [32]. However, rather than exhaustive protocol reconstruction, our goal is more aligned with [33], focusing on uncovering particular server-side vulnerabilities.

#### Input Generation
Several previous works implement input data generation or fuzzing on Android applications. IntelliDroid [34] is a hybrid dynamic-static analysis framework that analyzes event chains and can precisely identify the order of inputs to trigger a specific code path. We used several concepts from IntelliDroid, especially symbolic execution and constraint solving using Z3 libraries. We opted not to directly use IntelliDroid because it is more suited to malware detection and requires Android framework instrumentation and execution in an emulator.

#### Symbolic Execution
Symbolic execution has been widely used in many security applications on mobile applications. TriggerScope [35] uses symbolic execution and other program analysis techniques to precisely identify logic bomb triggers in Android apps. IntelliDroid is similar to our work and extracts path constraints to generate app inputs that can trigger specific execution paths. We leverage many of their techniques and motivations in implementing symbolic execution to extract path constraints.

#### App Network Traffic
Several previous works also analyze app network traffic, but not necessarily through app analysis. Instead, this area of research primarily focuses on the network layer to fingerprint apps through raw packet-level network traffic inspection. FLOWR [36] tries to distinguish mobile app traffic by extracting key-value pairs from HTTP sessions at the network level. NetworkProfiler [37] uses UI-based fuzzing on Android apps to build a comprehensive network trace for a given app.

### X. Conclusion

Modern mobile applications rely on web services to enable their functionality through HTTP-based communication. Unfortunately, the disparate nature of the mobile and web platforms causes input validation inconsistencies that can lead to serious security issues. We presented WARDroid, a framework that utilizes static program analysis and symbolic execution to model input validation logic between mobile apps and their remote web API servers. WARDroid extracts and validates web API logic implementation in mobile apps and uncovers inconsistencies between the app and server logic. The uncovered inconsistencies expose serious vulnerabilities in web API servers that affect a diverse set of mobile apps. Our analysis of 10,000 apps uncovered a significant portion of apps with web API hijacking opportunities that can violate user privacy and security for millions of mobile app users. The inconsistency problem is not limited to Android apps but affects any client that utilizes deployed web API services, including iOS apps, Windows apps, and web applications. This work highlights the existence and pervasiveness of this important ongoing research problem and aims to motivate further research in this area.

### Acknowledgment

This material is based upon work supported in part by the National Science Foundation (NSF) under Grant no. 1314823 and 1700544. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF.

### References

[1] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee, “Hypertext transfer protocol–http/1.1,” Tech. Rep., 1999.

[2] “OWASP Mobile Threats,” https://www.owasp.org/index.php/Projects/OWASP_Mobile_Security_Project_-_Top_Ten_Mobile_Risks.

[3] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and V. Venkatakrishnan, “Notamper: automatic blackbox detection of parameter tampering opportunities in web applications,” in Proceedings of the 17th ACM conference on Computer and communications security. ACM, 2010, pp. 607–618.

[4] S. Stamm, B. Sterne, and G. Markham, “Reining in the web with content security policy,” in Proceedings of the 19th international conference on World wide web. ACM, 2010, pp. 921–930.

[5] K. Singh, A. Moshchuk, H. J. Wang, and W. Lee, “On the incoherencies in web browser access control policies,” in 2010 IEEE Symposium on Security and Privacy. IEEE, 2010, pp. 463–478.

[6] A. Mendoza, K. Singh, and G. Gu, “What is wrecking your data plan? a measurement study of mobile web overhead,” in Computer Communications (INFOCOM), 2015 IEEE Conference on. IEEE, 2015, pp. 2740–2748.

[7] P. Bisht, T. Hinrichs, N. Skrupsky, and V. Venkatakrishnan, “Waptec: whitebox analysis of web applications for parameter tampering exploit construction,” in Proceedings of the 18th ACM conference on Computer and communications security. ACM, 2011, pp. 575–586.

[8] A. Sudhodanan, A. Armando, R. Carbone, L. Compagna et al., “Attack patterns for black-box security testing of multi-party web applications.” in NDSS, 2016.

[9] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request forgery,” in Proceedings of the 15th ACM conference on Computer and communications security. ACM, 2008, pp. 75–88.

[10] R. Vallee-Rai and L. J. Hendren, “Jimple: Simplifying java bytecode for analyses and transformations,” 1998.

[11] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan, “Soot-a java bytecode optimization framework,” in Proceedings of the 1999 conference of the Centre for Advanced Studies on Collaborative research. IBM Press, 1999, p. 13.

[12] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “Taintdroid: an information-flow tracking system for realtime privacy monitoring on smartphones,” ACM Transactions on Computer Systems (TOCS), vol. 32, no. 2, p. 5, 2014.

[13] L. De Moura and N. Bjørner, “Z3: An efficient smt solver,” Tools and Algorithms for the Construction and Analysis of Systems, pp. 337–340, 2008.

[14] S. Arzt, S. Rasthofer, and E. Bodden, “Susi: A tool for the fully automated classification and categorization of android sources and sinks,” University of Darmstadt, Tech. Rep. TUDCS-2013-0114, 2013.

[15] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps,” Acm Sigplan Notices, vol. 49, no. 6, pp. 259–269, 2014.

[16] J. C. King, “Symbolic execution and program testing,” Communications of the ACM, vol. 19, no. 7, pp. 385–394, 1976.

[17] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: A z3-based string solver for web application analysis,” in Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, 2013, pp. 114–124.

[18] H. Choi, J. Kim, H. Hong, Y. Kim, J. Lee, and D. Han, “Extractocol: Automatic extraction of application-level protocol behaviors for android applications,” ACM SIGCOMM Computer Communication Review, vol. 45, no. 4, pp. 593–594, 2015.

[19] G. Yang, A. Mendoza, J. Zhang, and G. Gu, “Precisely and scalably vetting javascript bridge in android hybrid apps,” in Proceedings of The 20th International Symposium on Research on Attacks, Intrusions and Defenses (RAID’17), September 2017.

[20] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen, “Edgeminer: Automatically detecting implicit control flow transitions through the android framework.” in NDSS, 2015.

[21] S. Rasthofer, S. Arzt, M. Miltenberger, and E. Bodden, “Harvesting runtime values in android applications that feature anti-analysis techniques,” 2016.

[22] R. Wang, S. Chen, X. Wang, and S. Qadeer, “How to shop for free online–security analysis of cashier-as-a-service based web stores,” in Security and Privacy (SP), 2011 IEEE Symposium on. IEEE, 2011, pp. 465–480.

[23] K. Allix, T. F. Bissyandé, J. Klein, and Y. Le Traon, “Androzoo: Collecting millions of android apps for the research community,” in Mining Software Repositories (MSR), 2016 IEEE/ACM 13th Working Conference on. IEEE, 2016, pp. 468–471.

[24] “Appbrain android statistics,” https://www.appbrain.com//.

[25] N. Viennot, E. Garcia, and J. Nieh, “A measurement study of google play,” in ACM SIGMETRICS Performance Evaluation Review, vol. 42, no. 1. ACM, 2014, pp. 221–233.

[26] E. Lafortune et al., “Proguard,” http://proguard.sourceforge.net, 2004.

[27] W. Koch, A. Chaabane, M. Egele, W. Robertson, and E. Kirda, “Semi-automated discovery of server-based information oversharing vulnerabilities in android applications,” in Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis. ACM, 2017, pp. 147–157.

[28] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin, “Attacks on webview in the android system,” in Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 2011, pp. 343–352.

[29] S. Pooryousef and M. Amini, “Fine-grained access control for hybrid mobile applications in android using restricted paths,” in Information Security and Cryptology (ISCISC), 2016 13th International Iranian Society of Cryptology Conference on. IEEE, 2016, pp. 85–90.

[30] C. Zuo and Z. Lin, “Smartgen: Exposing server urls of mobile apps with selective symbolic execution,” in Proceedings of the 26th International Conference on World Wide Web. International World Wide Web Conferences Steering Committee, 2017, pp. 867–876.

[31] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering,” in Proceedings of the 16th ACM conference on Computer and communications security. ACM, 2009, pp. 621–634.

[32] P. M. Comparetti, G. Wondracek, C. Kruegel, and E. Kirda, “Prospex: Protocol specification extraction,” in Security and Privacy, 2009 30th IEEE Symposium on. IEEE, 2009, pp. 110–125.

[33] G. Pellegrino and D. Balzarotti, “Toward black-box detection of logic flaws in web applications.” in NDSS, 2014.

[34] M. Y. Wong and D. Lie, “Intellidroid: A targeted input generator for the dynamic analysis of android malware,” in Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS), 2016.

[35] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna, “Triggerscope: Towards detecting logic bombs in android applications,” in Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 2016, pp. 377–396.

[36] Q. Xu, T. Andrews, Y. Liao, S. Miskovic, Z. M. Mao, M. Baldi, and A. Nucci, “Flowr: a self-learning system for classifying mobile application traffic,” ACM SIGMETRICS Performance Evaluation Review, vol. 42, no. 1, pp. 569–570, 2014.

[37] S. Dai, A. Tongaonkar, X. Wang, A. Nucci, and D. Song, “Networkprofiler: Towards automatic fingerprinting of android apps,” in INFOCOM, 2013 Proceedings IEEE. IEEE, 2013, pp. 809–817.