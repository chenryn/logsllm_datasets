### 2.0 Lack of Channel Binding Support

Version 2.0 intentionally omits support for channel binding, such as binding the token to a specific client address. While there are methods to mitigate the risks associated with unsafe delegation of access tokens to client-side scripts, it may take time for these issues to be fully resolved. We hope that this paper will draw more attention to the security of cloud-application add-ons, as further research is clearly necessary. Other attack vectors may exist that allow attackers to exploit non-malicious add-ons, and analyzing threats from malicious add-ons could also be an interesting area for future work.

### 8. Related Work

In this section, we review related literature on Cross-Site Scripting (XSS) attacks and the security analysis of add-on ecosystems outside the domain of web applications.

#### XSS Vulnerabilities

XSS has been one of the most common and harmful vulnerabilities in web applications. Despite the availability of detection and defense mechanisms and changes in web application architecture, XSS remains a prevalent problem [13, 53]. Security research literature on XSS includes comprehensive overviews [25], detection mechanisms [28, 30, 58], and preventive and defensive solutions [10, 31, 44, 55–57].

The extensive literature on XSS defenses includes both client and server-side solutions. Many of these can help defend against the attacks discussed in this paper.

- **Client-Side Solutions:** These involve sanitizing user input before it is sent to the server. Distinguishing between trusted and untrusted content and filtering out malicious scripts are challenging tasks. Web page sanitation is sometimes outsourced to browsers [55] or to web firewalls running on the client PC [28, 31]. Although XSS attacks occur on the client side, solutions often involve server-side mechanisms. For example, Gundy et al. [56] propose a solution where a potentially vulnerable website delivers an XHTML document with randomized namespace prefixes and a policy to the client, which only accepts documents that comply with the policy.

- **Server-Side Solutions:** Taint checking is a popular server-side protection mechanism where input from untrusted sources is flagged as potentially malicious and subjected to further scrutiny, such as sanitization [57, 58]. Server-side solutions include passive monitoring of HTTP traffic [30] or dynamically comparing HTTP responses with predefined responses [10].

#### Add-Ons Outside Web Applications

While add-ons are available for almost any type of software, browser add-ons have received the most critical security scrutiny. For example, Google Chrome's add-on ecosystem has undergone security evaluations of the add-ons themselves [29], their architecture [11], and protection mechanisms [27]. Similar vetting has been conducted for Firefox add-ons [7–9]. As more applications move to the cloud, we believe that cloud-application add-ons should receive the same level of attention from the security research community as browser add-ons.

Text editors also have add-on ecosystems (e.g., Sublime plugins) that have recently been criticized for security vulnerabilities. Dor Azouri analyzed several text editors and found that a malicious add-on can achieve privilege escalation on the victim’s computer [6]. The attack vector involves crafting a malicious add-on and tricking the victim into installing and using it within the text editor. In contrast, our attack vector involves injecting a malicious script into a document or other item to be shared with the victim.

### 9. Conclusion

Add-ons in cloud applications are a relatively new phenomenon whose vulnerabilities have not been widely studied. In this work, we analyzed the security of these add-ons and found that flaws in add-ons can introduce new security threats to their host applications. Specifically, add-ons do not always handle untrusted input carefully, making them vulnerable to XSS attacks. An attacker can inject malicious scripts into shared documents or emails, which are then processed by the vulnerable add-on. Our study demonstrated that such vulnerable add-ons exist in the wild and that exploiting them is not difficult. Furthermore, it seems that cloud-application vendors could do more to limit what an attacker can do once their XSS code is running in the add-on.

### References

[1] G Suite marketplace. https://gsuite.google.com/marketplace.
[2] Google Docs. https://www.google.com/docs/about/.
[3] Microsoft AppSource. https://appsource.microsoft.com/en-us/marketplace/apps.
[4] Shopify app store. https://apps.shopify.com/.
[5] AngularJS. AngularJS strict contextual escaping. https://docs.angularjs.org/api/ng/service/$sce.
[6] Dor Azouri. Abusing text editors via third-party plugins. SafeBreach Labs research, 2018. [Accessed: 2019-08-20].
[7] Sruthi Bandhakavi, Samuel T King, Parthasarathy Madhusudan, and Marianne Winslett. VEX: Vetting browser extensions for security vulnerabilities. In USENIX Security Symposium, 2010.
[8] Adam Barth, Adrienne Porter Felt, Prateek Saxena, and Aaron Boodman. Protecting browsers from extension vulnerabilities. 2010.
[9] Anton Barua, Mohammad Zulkernine, and Komminist Weldemariam. Protecting web browser extensions from JavaScript injection attacks. In 2013 18th International Conference on Engineering of Complex Computer Systems. IEEE, 2013.
[10] Prithvi Bisht and VN Venkatakrishnan. XSS-GUARD: precise dynamic prevention of cross-site scripting attacks. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2008.
[11] Nicholas Carlini, Adrienne Porter Felt, and David Wagner. An evaluation of the Google Chrome extension security architecture. In 21st USENIX Security Symposium, 2012.
[12] CERT. Advisory CA-2000-02 malicious HTML tags embedded in client web requests. 2000.
[13] XiaoLong Chen, Mohan Li, Yu Jiang, and Yanbin Sun. A comparison of machine learning algorithms for detecting XSS attacks. In International Conference on Artificial Intelligence and Security, pages 214–224. Springer, 2019.
[14] New Visions Cloudlab. "Form Ranger" add-on. https://gsuite.google.com/marketplace/app/form_ranger/387838027286.
[15] Forsberg+two. "Order Printer Pro" add-on. https://apps.shopify.com/order-printer-pro.
[16] Google. Go Templates. https://golang.org/pkg/html/template/.
[17] Google. Google APIs explorer. https://developers.google.com/apis-explore.
[18] Google. Google cloud platform projects. https://developers.google.com/apps-script/guides/cloud-platform-projects#standard_cloud_platform_projects.
[19] Google. Quickstart: Add-on for Google Docs. https://developers.google.com/gsuite/add-ons/editors/docs/quickstart/translate.
[20] Google. What is Google Picker? https://developers.google.com/picker/.
[21] Google. Dialogs and sidebars in G Suite documents. https://developers.google.com/apps-script/guides/dialogs#file-open_dialogs, 2019.
[22] Google. Google API services: User data policy. https://developers.google.com/terms/api-services-user-data-policy, 2019.
[23] Google. OAuth client verification. https://developers.google.com/apps-script/guides/client-verification, 2019.
[25] Shashank Gupta and Brij Bhooshan Gupta. Cross-site scripting (XSS) attacks and defense mechanisms: classification and state-of-the-art. International Journal of System Assurance Engineering and Management, 2017.
[26] Dick Hardt. The OAuth 2.0 authorization framework. RFC 6749, 2012.
[27] Stefan Heule, Devon Rifkin, Alejandro Russo, and Deian Stefan. The most dangerous code in the browser. In 15th Workshop on Hot Topics in Operating Systems, 2015.
[28] Omar Ismail, Masashi Etoh, Youki Kadobayashi, and Suguru Yamaguchi. A proposal and implementation of automatic detection/collection system for cross-site scripting vulnerability. In 18th International Conference on Advanced Information Networking and Applications. IEEE, 2004.
[29] Nav Jagpal, Eric Dingle, Jean-Philippe Gravel, Panayiotis Mavrommatis, Niels Provos, Moheeb Abu Rajab, and Kurt Thomas. Trends and lessons from three years fighting malicious extensions. In 24th USENIX Security Symposium, 2015.
[30] Martin Johns, Björn Engelmann, and Joachim Posegga. XSSDS: Server-side detection of cross-site scripting attacks. In 2008 Annual Computer Security Applications Conference (ACSAC). IEEE, 2008.
[31] Engin Kirda, Christopher Kruegel, Giovanni Vigna, and Nenad Jovanovic. Noxes: a client-side solution for mitigating cross-site scripting attacks. In Proceedings of the 2006 ACM symposium on Applied computing. ACM, 2006.
[32] Amit Klein. DOM based cross site scripting or XSS of the third kind. Web Application Security Consortium, 2005.
[33] Sebastian Lekies, Ben Stock, and Martin Johns. 25 million flows later: Large-scale detection of DOM-based XSS. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 2013.
[34] Jesse McCabe. "Doc Variables" add-on. https://gsuite.google.com/marketplace/app/doc_variables/232821636920.
[35] William Melicher, Anupam Das, Mahmood Sharif, Lujo Bauer, and Limin Jia. Riding out DOMsday: Towards detecting and preventing DOM cross-site scripting. In NDSS, 2018.
[36] Microsoft. Microsoft identity platform (v2.0) overview. https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-overview.
[37] Microsoft. Office Online permissions. https://docs.microsoft.com/en-us/office/dev/add-ins/reference/manifest/permissions.
[38] Microsoft. "Translator for Outlook" add-on. https://appsource.microsoft.com/en-us/product/office/WA104380627.
[39] Microsoft. Use the Outlook REST APIs from an Outlook add-in. https://docs.microsoft.com/en-us/outlook/add-ins/use-rest-api.
[24] Jeremiah Grossman, Seth Fogie, Robert Hansen, Anton Rager, and Petko D Petkov. XSS attacks: cross site scripting exploits and defense. Syngress, 2007.
[40] Microsoft. Privacy and security for Office Add-ins. https://docs.microsoft.com/en-us/office/dev/add-ins/concepts/privacy-and-security, 2019.
[41] MITRE. Common vulnerabilities and exposures - the standard for information security vulnerability names. https://cve.mitre.org/.
[52] Sid Stamm, Brandon Sterne, and Gervase Markham. Reining in the web with content security policy. In Proceedings of the 19th international conference on World wide web. ACM, 2010.
[42] Mozilla. The inline frame element. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe.
[43] Mozilla. window.postmessage() method. https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage.
[44] Yacin Nadji, Prateek Saxena, and Dawn Song. Document structure integrity: A robust basis for cross-site scripting defense. In NDSS, volume 20, 2009.
[45] OWASP. Cross-site scripting (XSS). https://www.owasp.org/index.php/Cross-site_Scripting_(XSS), 2018.
[46] OWASP. Types of Cross-Site Scripting. https://www.owasp.org/index.php/Types_of_Cross-Site_Scripting#Types_of_Cross-Site_Scripting), 2018.
[47] OWASP. Cross-site scripting prevention. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html, 2019.
[48] OWASP. XSS filter evasion cheat sheet. https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet, 2019.
[49] Prateek Saxena, Steve Hanna, Pongsin Poosankam, and Dawn Song. FLAX: Systematic discovery of client-side validation vulnerabilities in rich web applications. In NDSS, 2010.
[50] Shopify. App Bridge library. https://help.shopify.com/en/api/embedded-apps/app-bridge.
[51] Shopify. Staff account permissions. https://help.shopify.com/en/manual/your-account/staff-accounts/staff-permissions.
[53] Marius Steffens, Christian Rossow, Martin Johns, and Ben Stock. Don’t trust the locals: Investigating the prevalence of persistent client-side cross-site scripting in the wild. In NDSS, 2019.
[54] Ben Stock, Stephan Pfistner, Bernd Kaiser, Sebastian Lekies, and Martin Johns. From facepalm to brain bender: Exploring client-side cross-site scripting. In Proceedings of the 22nd ACM SIGSAC conference on computer and communications security. ACM, 2015.
[55] Mike Ter Louw and VN Venkatakrishnan. Blueprint: Robust prevention of cross-site scripting attacks for existing browsers. In 30th IEEE symposium on security and privacy. IEEE, 2009.
[56] Matthew Van Gundy and Hao Chen. Noncespaces: Using randomization to enforce information flow tracking and thwart cross-site scripting attacks. In NDSS, 2009.
[57] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. Cross site scripting prevention with dynamic data tainting and static analysis. In NDSS, 2007.
[58] Gary Wassermann and Zhendong Su. Static detection of cross-site scripting vulnerabilities. In 2008 ACM/IEEE 30th International Conference on Software Engineering. IEEE, 2008.
[59] Mike West. Content security policy: Embedded enforcement. https://w3c.github.io/webappsec-cspee/#dom-htmliframeelement-csp, 2018.
[60] Michal Zalewski. The Tangled Web: A Guide to Securing Modern Web Applications. No Starch Press, 2012.