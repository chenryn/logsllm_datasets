### False Positives and Vulnerable EARs

False positives (false EARs) were identified in our analysis, as shown in Table 2. The white-box tool generated 45 false EARs, resulting in a false positive rate of 5.3%. These false positives can be categorized into two main types:

1. **Impossible Paths**: Approximately half of the false positives occurred due to impossible paths from the redirect methods to some code. For example, a redirect method was called at the end of a branch that checked if the request was an HTTP GET, while the code executed after the redirect was in a branch that checked if the request was an HTTP POST. Since these two conditions are mutually exclusive, such a path is impossible.

2. **Local Variable Confusion**: The other half of the false positives were caused by local variables with the same name as a redirect method. The parsing library, RIL, mistakenly identified the local variable access as a method call to a redirect method. We are currently working on fixing this issue in RIL, which should reduce the false positive rate by nearly half.

### Vulnerable EAR Detection

While the false EAR rate was only 5.5%, the detection heuristic for vulnerable EARs had a higher false detection rate of 40.1%. The primary cause of false vulnerable EARs (72.9% of instances) was the absence of a feasible path from the redirect to the method that changes the state of the database. For instance, the redirect method was called in a branch that was taken only when a certain object was `nil`. Later, the database method was called on this object. When the redirect occurs, the object is `nil`, and thus, the database will not be affected. However, our heuristics cannot detect that the database function will always be called with a `nil` object, leading to a reported vulnerability.

Another common false vulnerable EAR scenario involved the redirect method being called before code execution, but it was clear that the developer intended for the code to be executed, fully aware of the redirect semantics.

### Manual Inspection

To ensure the false EAR rate did not differ significantly among benign EARs, we manually inspected 200 randomly selected EARs reported as benign. We found 13 false EARs, resulting in a false positive rate of 6.5%. This brings the total false positive rate among the manually inspected instances to 5.5%. No vulnerable EARs were detected among the benign EARs, indicating no false negative vulnerable EARs in our experiments.

### Performance Evaluation

To evaluate the performance of our tool, we measured the running time against 18,127 Ruby on Rails applications. Our experiments were conducted on an Intel Core i7 with 12 gigabytes of RAM. The algorithm scales linearly with the size of the Control Flow Graph (CFG) and is highly efficient; no project took longer than 2.5 seconds, even with the largest CFG size of 40,217 statements.

### Prevention

The adage "an ounce of prevention is worth a pound of cure" holds true in software. Boehm demonstrated that the later bugs are caught in an application's lifecycle, the more expensive they are to fix [8]. Therefore, preventing certain types of bugs from being introduced is beneficial both economically and from a security perspective. We recommend that web frameworks make Execution After Redirect (EAR) vulnerabilities impossible by halting execution upon every invocation of the redirect method, a behavior we call "halt-on-redirect."

As discussed in Section 2.4, some frameworks have already adopted this approach or have made EARs highly unlikely through their response generation methods. For existing frameworks, implementing halt-on-redirect may break backward compatibility. In such cases, we suggest an application-wide setting to enable halt-on-redirect, along with an argument to the redirect function to halt execution. We recommend making halt-on-redirect the default behavior, balancing security and backward compatibility.

We are in discussions with the Rails development team to implement our proposed change. The challenge in Rails is the lack of `goto` statements and its single-threaded context, limiting the use of obvious implementation methods like jumping to the end of the `redirect_to` method or stopping the current thread. Our proposed solution is to throw a new type of exception, `RedirectOccurredException`, at the end of the `redirect_to` body. This exception is caught in the core framework where the controller is called. While this will prevent most EARs, code in `ensure` blocks (Ruby's equivalent of `finally` blocks) will still execute. We believe this is semantically correct and clear to the programmer.

### Related Work

Previous work has identified specific instances of Execution After Redirect vulnerabilities. Hofstetter highlighted the need to exit after a redirect in CakePHP [22], leading to a bug report and documentation update [9, 10]. Felmetsger et al. developed Waler, a white-box static analysis tool for J2EE servlets, which detected EARs in the Global Internship Management System (GIMS) [17].

Wang et al. manually discovered logic flaws in Cashier-as-a-Service (CaaS) APIs and their interactions with web applications [35]. Our work focuses on a specific type of logic flaw across many applications.

Our white-box EAR detection tool uses the Ruby Intermediate Language (RIL) developed by Furr et al. [18]. RIL was used by An et al. to introduce static typing to Ruby on Rails [23]. DRails, a system based on RIL, statically discovers type errors in Rails applications. Chaudhuri and Foster built Rubyx, a symbolic analysis engine on top of DRails, to analyze security properties of Rails applications [13].

Other related tools include Huang et al.'s taint propagation tool for PHP [24], Livshits and Lam's points-to analysis for Java web applications [28], and Jovanovic et al.'s Pixy for detecting XSS attacks in PHP [26, 25]. Balzarotti et al. developed MiMoSa for inter-module data flow analysis in PHP [4].

These tools differ from ours as they focus on unsanitized input vulnerabilities, while our tool detects unexpected execution. Our analysis was performed on a large corpus of real-world applications, revealing a significant number of true vulnerable EARs.

### Conclusions

We have described a new type of vulnerability, Execution After Redirect (EAR), and developed a novel static analysis tool to effectively find EARs. Differentiating between benign and vulnerable EARs is challenging due to the violation of specific web application logic. Future work will focus on better understanding the application's logic to improve differentiation.

### Acknowledgments

This work was partially supported by the ONR under grant N000140911042, the National Science Foundation (NSF) under grants CNS-0820907, CNS-0905537, and CNS-0716095, and Secure Business Austria.

### References

[1] ASP.NET MVC. http://www.asp.net/mvc.
[2] Balduzzi, M., Egele, M., Kirda, E., Balzarotti, D., and Kruegel, C. A Solution for the Automated Detection of Clickjacking Attacks. In Proceedings of the ACM Symposium on Information, Computer and Communications Security (AsiaCCS) (Beijing, China, April 2010).
[3] Balduzzi, M., Gimenez, C., Balzarotti, D., and Kirda, E. Automated discovery of parameter pollution vulnerabilities in web applications. In Proceedings of the 18th Network and Distributed System Security Symposium (2011).
[4] Balzarotti, D., Cova, M., Felmetsger, V. V., and Vigna, G. Multi-module vulnerability analysis of web-based applications. In Proceedings of the 14th ACM conference on Computer and communications security (New York, NY, USA, 2007), CCS ’07, ACM, pp. 25–35.
[5] Barth, A., Jackson, C., and Mitchell, J. C. Robust defenses for cross-site request forgery. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS 2008) (2008).
[6] Boe, B. UCSB’s International Capture The Flag Competition 2010 Challenge 6: Fear The EAR. http://cs.ucsb.edu/~bboe/r/ictf10, December 2010.
[7] Boe, B. Using StackOverflow’s API to Find the Top Web Frameworks. http://cs.ucsb.edu/~bboe/r/top-web-frameworks, February 2011.
[8] Boehm, B. W. Software Engineering Economics, 1st ed. Prentice Hall PTR, Upper Saddle River, NJ, USA, 1981.
[9] Include exit with a redirect call. http://replay.web.archive.org/20061011152124/https://trac.cakephp.org/ticket/1076, August 2006.
[10] Docs should mention redirect does not “exit” a script. http://replay.web.archive.org/20061011180440/https://trac.cakephp.org/ticket/1358, August 2006.
[11] Cake Software Foundation, Inc. The CakePHP 1.3 Book. http://book.cakephp.org/view/982/redirect, 2011.
[12] Carettoni, L., and Di Paola, S. HTTP Parameter Pollution. OWASP AppSec Europe 2009, May 2009.
[13] Chaudhuri, A., and Foster, J. Symbolic security analysis of ruby-on-rails web applications. In Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS’10) (2010), ACM, pp. 585–594.
[14] Childers, N., Boe, B., Cavallaro, L., Cavedon, L., Cova, M., Egele, M., and Vigna, G. Organizing large scale hacking competitions. In Proceedings of the 7th international conference on Detection of intrusions and malware, and vulnerability assessment (Berlin, Heidelberg, 2010), DIMVA’10, Springer-Verlag, pp. 132–152.
[15] Django Software Foundation. Django shortcut functions. http://docs.djangoproject.com/en/dev/topics/http/shortcuts/#django.shortcuts.redirect, 2011.
[16] EllisLab, Inc. CodeIgniter User Guide Version 2.0.2. http://codeigniter.com/user_guide/helpers/url_helper.html, 2011.
[17] Felmetsger, V., Cavedon, L., Kruegel, C., and Vigna, G. Toward Automated Detection of Logic Vulnerabilities in Web Applications. In Proceedings of the USENIX Security Symposium (Washington, DC, August 2010).
[18] Furr, M., hoon (David) An, J., Foster, J. S., and Hicks, M. The Ruby intermediate language. In Proceedings of the ACM SIGPLAN Dynamic Languages Symposium (DLS) (Oct. 2009).
[19] GitHub. http://github.com.
[20] Indictment in U.S. v. Albert Gonzalez. http://www.justice.gov/usao/ma/news/IDTheft/Gonzalez, %20Albert%20-%20Indictment%20080508.pdf, August 2008.
[21] Hansen, R. Clickjacking. http://ha.ckers.org/blog/20080915/clickjacking/, September 2008.
[22] Hofstetter, D. Don’t forget to exit after a redirect. http://cakebaker.wordpress.com/2006/08/28/dont-forget-to-exit-after-a-redirect/, August 2006.
[23] hoon An, J., Chaudhuri, A., and Foster, J. Static typing for ruby on rails. In Proceedings of the 24th IEEE/ACM Conference on Automated Software Engineering (ASE’09) (2009), IEEE, pp. 590–594.
[24] Huang, Y.-W., Yu, F., Hang, C., Tsai, C.-H., Lee, D.-T., and Kuo, S.-Y. Securing web application code by static analysis and runtime protection. In Proceedings of the 13th international conference on World Wide Web (New York, NY, USA, 2004), WWW ’04, ACM, pp. 40–52.
[25] Jovanovic, N., Kruegel, C., and Kirda, E. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In IN 2006 IEEE SYMPOSIUM ON SECURITY AND PRIVACY (2006), pp. 258–263.
[26] Jovanovic, N., Kruegel, C., and Kirda, E. Precise alias analysis for static detection of web application vulnerabilities. In Proceedings of the 2006 workshop on Programming languages and analysis for security (New York, NY, USA, 2006), PLAS ’06, ACM, pp. 27–36.
[27] Klein, A. Divide and conquer: HTTP response splitting, Web cache poisoning attacks, and related topics. http://www.packetstormsecurity.org/papers/general/whitepaper/httpresponse.pdf, 2004.
[28] Livshits, V. B., and Lam, M. S. Finding security vulnerabilities in java applications with static analysis. In Proceedings of the 14th conference on USENIX Security Symposium - Volume 14 (Berkeley, CA, USA, 2005), USENIX Association, pp. 18–18.
[29] Open Web Application Security Project (OWASP). OWASP Top Ten Project. http://www.owasp.org/index.php/Top_10, 2010.
[30] Ortiz, C. Outcome of sentencing in U.S. v. Albert Gonzalez. http://www.justice.gov/usao/ma/news/IDTheft/09-CR-10382/GONZALEZ%20website%20info%205-11-10.pdf, March 2010.
[31] R. Fielding, J. Gettys, J. M. H. F. L. M. P. L. T. B.-L. RFC 2616: Hypertext Transfer Protocol – HTTP/1.1 Status Code Definitions. http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html, June 1999.
[32] R. Fielding, J. Gettys, J. M. H. F. L. M. P. L. T. B.-L. RFC 2616: Hypertext Transfer Protocol – HTTP/1.1 Header Field Definitions. http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30, June 1999.
[33] Reenskaug, T. Models - views - controllers. Tech. rep., Xerox Parc, 1979.
[34] SpringSource. Controllers - Redirects. http://www.grails.org/Controllers+-+Redirects, 2010.
[35] Wang, R., Chen, S., Wang, X., and Qadeer, S. How to shop for free online - security analysis of cashier-as-a-service based web stores. In Proceedings of the 32nd IEEE Symposium on Security and Privacy (Oakland, CA, May 2011), IEEE.
[36] Zend Technologies Ltd. Zend Framework: Documentation: Action Helpers - Zend Framework Manual. http://framework.zend.com/manual/en/zend.controller.actionhelpers.html#zend.controller.actionhelpers.redirector, 2011.