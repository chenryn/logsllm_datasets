### Baseline and Stateful Syscall Coverage Analysis

#### Table 6: Syscall Coverage
The table below presents the syscall coverage for different settings. The "Application" column shows the number of unique syscalls in the vanilla sequence. The p-values are calculated by comparing with the Stateful (w/o valid) setting. We tabulate the range, averages, confidence intervals, and variance.

| Metric          | Baseline | Stateful (w/o valid) | Stateful |
|-----------------|----------|---------------------|----------|
| Min             | 790      | 772                 | 1527     |
| Max             | 2447     | 2400                | 1482     |
| Median          | 540      | 500                 | 822      |
| 5th Percentile  | 899      | 170                 | 189      |
| 95th Percentile | 225      | 210                 | 543      |
| Mean            | 843.40   | 1525.93             | 2468.70  |
| 95% CI Lower    | 786      | 1515                | 2436     |
| 95% CI Upper    | 797      | 1536                | 2464     |
| Variance        | 13490.17 | 361.13              | 4813.61  |
| p-value         | 1.42E-11 | N/A                 | 1.42E-11 |

### B. Effects of Valid Values

#### VII. Limitations

In this section, we compare the Stateful strategy with and without valid values from the Value Extractor. Our experiments show that including values in the value set leads to greater syscall coverage and more core dumps, though not to the extent that using the Stateful target-selection method does. For example, in OpenSSH, a `poll` syscall will only be reached if the preceding `read` syscall returns `EAGAIN` or `EWOULDBLOCK`. The inclusion of `EAGAIN` in the valid set of `read`'s return values helps trigger this syscall.

In summary, our evaluation shows that both Value Extraction and Stateful target-selection contribute to increased syscall coverage and more core dumps. While they require more time due to the larger number of targets, they can better utilize additional computational resources, increasing syscall coverage by 2.1× and the number of core dumps found by 2.4× on average.

As a fuzzing tool, Emilia has some limitations:
1. **Fuzzing Scope**: Emilia only fuzzes the syscall return values but not the inputs to the application, which limits the code it can cover. Combining Emilia with a standard input fuzzer could achieve both code and syscall coverage.
2. **Source Code Requirement**: Emilia requires source code to generate valid value sets, and the number of unique crashes found does not increase significantly by adding valid values (Table 5). This is because not all values in the valid set are useful for finding new syscall invocations due to the coarse-grained static value extractor.
3. **Value Association**: Emilia currently does not associate values from the Value Extractor with specific invocations, but only with the syscall type (i.e., syscall number). When a value cannot be associated with a specific syscall type, Emilia adds the value to the valid set of all syscalls.
4. **Stack Hash Usage**: Emilia uses only the stack hash to identify syscall invocations, not the arguments. As a result, if return value handling differs based on different syscall arguments, Emilia may miss some Iago vulnerabilities.

### VIII. Related Work

A review of previous OFLs is provided in Section V. Here, we focus on prior work in detecting and analyzing systems for Iago vulnerabilities.

- **Memory Access Vulnerabilities** [13]: Hong Hu et al. studied memory access vulnerabilities leading to arbitrary code execution despite privilege separation mechanisms. They used binary-level symbolic execution and dynamic taint analysis to detect invalid memory access introduced by data received through untrusted interfaces. However, their work was limited to simple programs or function levels due to path explosion.
- **TEE Shielding Runtime** [41]: Jo Van Bulck et al. analyzed responsibilities and attack vectors of a TEE shielding runtime, generalizing Iago attacks from OS syscall interfaces to OCALLS. They detected Iago vulnerabilities in Graphene-SGX and SGX-LKL, similar to those found in Google Asylo. Their work is more like a guideline, with all analysis done manually.
- **COIN Attacks** [20]: These describe Iago attacks as a subset of input manipulation against the SGX enclave’s untrusted interfaces. They use symbolic execution and several policies to identify vulnerabilities caused by OCALL return values. Their work aims to detect errors in existing SGX projects, which are aware of the malicious OS. In contrast, we focus on legacy applications and provide guidelines for porting them.
- **Fuzzing for Iago Attacks**: We are the first to use fuzzing to detect Iago attacks, which can be applied to large applications.

### IX. Conclusion

Using Emilia, we were able to ascertain a base rate of Iago vulnerabilities over a set of 17 diverse legacy applications and libraries. We found and detected 51 Iago vulnerabilities, noting that they are widespread, with nearly every application or library having at least one vulnerability. Categorizing the vulnerabilities into Static, Local, Stateful, Unauthenticated Channel, and External classes, we find that 82.4% are Static and Local vulnerabilities, which can be easily mitigated by an OFL using simple, stateless checks. Our analysis of current, state-of-the-art OFLs and SGX applications shows that the majority do not completely mitigate all Static and Local vulnerabilities in legacy applications, suggesting that OFLs may benefit from research into how to systematically check for and detect attacks against these vulnerabilities. Finally, our results show that using Stateful target-selection and Value Extraction, Emilia achieves significantly better syscall coverage than a baseline fuzzer that does not use these features.

### Acknowledgments

We thank the anonymous reviewers for their insightful suggestions and comments. We also thank Sibin Mohan, Raskesh Bobba, Somesh Jha, Tom Reps, Austin Kuo, Wei Huang, Shengjie Xu, and He Shuang for their suggestions and feedback, which helped improve our research. This research was supported by ONR Award N00014-17-1-2889 and NSERC Discovery Grant RGPIN-2018-05931.

### References

[1] ARM Security technology: Building a secure system using TrustZone technology (white paper), ARM Ltd, 2009.
[2] S. Arnautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe, J. Lind, D. Muthukumaran, D. O’keeffe, M. L. Stillwell et al., “SCONE: Secure Linux containers with Intel SGX,” in 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI’16), Savannah, GA, USA, 2016, pp. 689–703.
[3] A. Baumann, M. Peinado, and G. Hunt, “Shielding applications from an untrusted cloud with Haven,” ACM Transactions on Computer Systems (TOCS), vol. 33, no. 3, pp. 1–26, 2015.
[4] S. Checkoway and H. Shacham, “Iago attacks: Why the system call API is a bad untrusted RPC interface,” SIGPLAN Not., vol. 48, no. 4, pp. 253–264, Mar. 2013.
[5] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: A virtualization-based approach to retrofitting protection in commodity operating systems,” SIGPLAN Not., vol. 43, no. 3, pp. 2–13, Mar. 2008.
[6] Y. Cheng, X. Ding, and R. Deng, “AppShield: Protecting applications against untrusted operating system,” Singapore Management University Technical Report, SMU-SIS-13, vol. 101, 2013.
[7] J. Criswell, N. Dautenhahn, and V. Adve, “Virtual Ghost: Protecting applications from hostile operating systems,” in Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’14), Salt Lake City, UT, USA, 2014, pp. 81–96.
[8] J. de Ruiter and E. Poll, “Protocol state fuzzing of TLS implementations,” in 24th USENIX Security Symposium (USENIX Security’15), Washington, D.C., USA, 2015, pp. 193–206.
[9] Asylo, Google, available at https://asylo.dev [Accessed December 30, 2020].
[10] J. Greene, Intel Trusted Execution Technology, white paper, Intel Corporation, 2012.
[11] L. Guan, P. Liu, X. Xing, X. Ge, S. Zhang, M. Yu, and T. Jaeger, “TrustShadow: Secure execution of unmodified applications with ARM TrustZone,” in 15th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys’17), Niagara Falls, NY, USA, 2017, pp. 488–501.
[12] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel, “InkTag: Secure applications on an untrusted operating system,” SIGPLAN Not., vol. 48, no. 4, pp. 265–278, Mar. 2013.
[13] H. Hu, Z. L. Chua, Z. Liang, and P. Saxena, “Identifying arbitrary memory access vulnerabilities in privilege-separated software,” in 20th European Symposium on Research in Computer Security (ESORICS’15), ser. Lecture Notes in Computer Science, G. Pernul, P. Y. A. Ryan, and E. R. Weippl, Eds., vol. 9327, Vienna, Austria, 2015, pp. 312–331.
[14] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A distributed sandbox for untrusted computation on secret data,” ACM Transactions on Computer Systems (TOCS), vol. 35, no. 4, pp. 1–32, 2018.
[15] Intel Software Guard Extensions SDK for Linux OS: Developer Reference, Intel, 2016.
[16] Processor Tracing, Intel Corporation, available at https://software.intel.com/content/www/us/en/develop/blogs/processor-tracing.html [Accessed December 30, 2020].
[17] Intel SGX SSL, Intel Corporation, 2019, available at https://github.com/intel/intel-sgx-ssl [Accessed December 30, 2020].
[18] P. Jain, S. J. Desai, M. Shih, T. Kim, S. M. Kim, J. Lee, C. Choi, Y. Shin, B. B. Kang, and D. Han, “OpenSGX: An open platform for SGX research,” in 23rd Annual Network and Distributed System Security Symposium (NDSS’16), San Diego, CA, USA, 2016.
[19] D. Jones, Trinity: Linux system call fuzzer, available at https://github.com/kernelslacker/trinity [Accessed December 30, 2020].
[20] M. R. Khandaker, Y. Cheng, Z. Wang, and T. Wei, “COIN attacks: On insecurity of enclave untrusted interfaces in SGX,” in 25th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’20), Lausanne, Switzerland, 2020, p. 971–985.
[21] S. Kim, J. Han, J. Ha, T. Kim, and D. Han, “SGX-Tor: A secure and practical Tor anonymity network with SGX enclaves,” IEEE/ACM Transactions on Networking, vol. 26, no. 5, pp. 2174–2187, 2018.
[22] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks, “Evaluating fuzz testing,” in ACM SIGSAC Conference on Computer and Communications Security (CCS’18), Toronto, Canada, 2018, p. 2123–2138.
[23] J. Kneschke, Lighttpd, 2003, available at https://www.lighttpd.net/ [Accessed December 30, 2020].
[24] R. Kunkel, D. L. Quoc, F. Gregor, S. Arnautov, P. Bhatotia, and C. Fetzer, “TensorSCONE: A secure TensorFlow framework using Intel SGX,” CoRR, vol. abs/1902.04413, 2019.
[25] Y. Kwon, A. M. Dunn, M. Z. Lee, O. S. Hofmann, Y. Xu, and E. Witchel, “Sego: Pervasive trusted metadata for efficiently verified untrusted system services,” ACM SIGARCH Computer Architecture News, vol. 44, no. 2, pp. 277–290, 2016.
[26] Large-Scale Data & Systems (LSDS) Group, TaLoS: Efficient TLS Termination Inside SGX Enclaves for Existing Applications, 2019, available at https://github.com/lsds/TaLoS [Accessed December 30, 2020].
[27] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry, “Minibox: A two-way sandbox for x86 native code,” in USENIX Annual Technical Conference (USENIX ATC’14), Philadelphia, PA, USA, 2014, pp. 409–420.
[28] J. Lind, C. Priebe, D. Muthukumaran, D. O’Keeffe, P.-L. Aublin, F. Kelbert, T. Reiher, D. Goltzsche, D. Eyers, R. Kapitza et al., “Glamdring: Automatic application partitioning for Intel SGX,” in USENIX Annual Technical Conference (USENIX ATC’17), Santa Clara, CA, USA, 2017, pp. 285–298.
[29] Y. Liu, T. Zhou, K. Chen, H. Chen, and Y. Xia, “Thwarting memory disclosure with efficient hypervisor-enforced intra-domain isolation,” in 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS’15), Denver, CO, USA, 2015, pp. 1607–1619.
[30] V. J. M. Manès, H. Han, C. Han, S. K. Cha, M. Egele, E. J. Schwartz, and M. Woo, “The art, science, and engineering of fuzzing: A survey,” IEEE Transactions on Software Engineering, pp. 1–1, 2019.
[31] Y. Mazhkenov, SGX-SQLite, 2019, available at https://github.com/yerzhan7/SGX SQLite [Accessed December 30, 2020].
[32] D. R. K. Ports and T. Garfinkel, “Towards application security on untrusted operating systems,” in 3rd USENIX Workshop on Hot Topics in Security (HotSec’08), San Jose, CA, USA, 2008.
[33] C. Priebe, D. Muthukumaran, J. Lind, H. Zhu, S. Cui, V. A. Sartakov, and P. R. Pietzuch, “SGX-LKL: Securing the host OS interface for trusted execution,” CoRR, vol. abs/1908.11143, 2019.
[34] B. Shastry, M. Leutner, T. Fiebig, K. Thimmaraju, F. Yamaguchi, K. Rieck, S. Schmid, J.-P. Seifert, and A. Feldmann, “Static program analysis as a fuzzing aid,” in Research in Attacks, Intrusions, and Defenses, M. Dacier, M. Bailey, M. Polychronakis, and M. Antonakakis, Eds. Springer International Publishing, 2017, pp. 26–47.
[35] S. Shinde, D. L. Tien, S. Tople, and P. Saxena, “Panoply: Low-TCB Linux applications with SGX enclaves,” in 24th Annual Network and Distributed System Security Symposium (NDSS’17), San Diego, CA, USA, 2017.
[36] strace: Linux syscall tracer, strace, available at https://strace.io/ [Accessed December 30, 2020].
[37] L. Szekeres, M. Payer, T. Wei, and D. Song, “SoK: Eternal war in memory,” in IEEE Symposium on Security and Privacy (S&P’13), San Francisco, CA, USA, 2013, pp. 48–62.
[38] R. Ta-Min, L. Litty, and D. Lie, “Splitting interfaces: Making trust between applications and operating systems configurable,” in 7th Symposium on Operating Systems Design and Implementation (OSDI’06), Seattle, WA, USA, 2006, pp. 279–292.
[39] B. Trach, A. Krohmer, F. Gregor, S. Arnautov, P. Bhatotia, and C. Fetzer, “ShieldBox: Secure middleboxes using shielded execution,” in Proceedings of the Symposium on SDN Research (SOSR’18), Los Angeles, CA, USA, 2018, pp. 1–14.
[40] C.-C. Tsai, D. E. Porter, and M. Vij, “Graphene-SGX: A practical library OS for unmodified applications on SGX,” in USENIX Annual Technical Conference (USENIX ATC’17), Santa Clara, CA, USA, 2017, pp. 645–658.
[41] J. Van Bulck, D. Oswald, E. Marin, A. Aldoseri, F. D. Garcia, and F. Piessens, “A tale of two worlds: Assessing the vulnerability of enclave shielding runtimes,” in ACM Conference on Computer and Communications Security (CCS’19), London, UK, 2019, pp. 1741–1758.
[42] V. Velciu, F. Stancu, and M. Chiroiu, “HiddenApp-securing Linux applications using ARM TrustZone,” in International Conference on Security for Information Technology and Communications (SECITC’18), Bucharest, Romania, 2018, pp. 41–52.
[43] H. Wang, E. Bauman, V. Karande, Z. Lin, Y. Cheng, and Y. Zhang, “Running language interpreters inside SGX: A lightweight, legacy-compatible script code hardening approach,” in ACM Asia Conference on Computer and Communications Security (ASIACCS’19), Auckland, New Zealand, 2019, pp. 114–121.