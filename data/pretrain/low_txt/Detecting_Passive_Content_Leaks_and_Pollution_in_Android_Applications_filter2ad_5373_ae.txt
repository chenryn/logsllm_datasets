### Determining App Vulnerabilities

The results of the start functions help in identifying whether an app is vulnerable. The invocation return can vary based on the internal logic of the app, such as the presence of a user account in MiTalk Messenger, which may be overlooked by our prototype. To address this, we need to manually confirm these conditions and infer potential side effects. Fortunately, our system automatically generates intermediate results, including inter-method function call graphs and intra-method control-flow graphs, which significantly speed up our manual analysis. However, there is still a need to explore innovative ways to overcome these limitations and achieve better automation.

### Related Work

#### Smartphone Privacy
Smartphone privacy has recently attracted significant attention. Earlier research identified concerning privacy leaks in mobile apps available on both Android [22] and iOS [21] platforms. Several systems have been proposed to mitigate this problem by revising or extending the framework for better privacy protection. Examples include Apex [34], MockDroid [13], TISSA [46], AppFence [30], Dr. Android [31], and Aurasium [40]. These systems extend the Android framework or repackage the app to provide finer-grained privacy control over an app's access to potentially sensitive information at runtime.

Recent research has shown that in-app advertisement libraries [26] can also actively leak private information. To mitigate this, AdDroid [35] separates the advertisement functionality from host apps by introducing a new set of advertising APIs and permissions. AdSplit [38] moves the advertisement code into another process. Additionally, mobile malware can aggressively collect personal information and upload it to remote servers [44]. Our work differs from earlier efforts by focusing on identifying and quantifying vulnerabilities that allow for passive (rather than active) information leaks.

#### Confused Deputy Problem and Permission Leaks
Another line of research aims to address the classic confused deputy problem or permission leaks [29] on Android. Examples include ComDroid [17] and Woodpecker [27], which use static analysis to identify such problems in third-party or preloaded apps. QUIRE [20] and Felt et al. [25] propose solutions to mitigate these issues by checking IPC call chains to ensure unauthorized apps cannot invoke privileged operations. Bugiel et al. [15] propose a runtime monitor to regulate communications between apps. Our work is similar in exposing possible vulnerabilities in unprotected Android components but focuses on passively leaking or manipulating internal data managed by apps, rather than invoking privileged operations without permission.

A more recent system, CHEX [33], uses a static method to detect component hijacking vulnerabilities that can be exploited to gain unauthorized access to protected or private resources. Although CHEX can determine potential leak paths from start to terminal functions, it cannot generate inputs automatically or dynamically confirm potentially vulnerable apps. Our detailed breakdown of leaked and polluted content reflects the severity of the problem and the practicality of our system.

#### Overall Security of Mobile Apps
Researchers also aim to measure or study the overall security of existing apps in marketplaces. For example, Enck et al. [23] studied 1,100 top free apps to understand their security and privacy characteristics. Felt et al. surveyed 46 malware samples from three different mobile platforms to analyze their incentives and discuss possible defenses. Stowaway [24] was proposed to understand over-privileged apps, which request additional permissions beyond their normal functionalities. DroidMOSS [43] and PiggyApp [42] aim to detect repackaged apps in existing mobile app marketplaces. DroidRanger [45] and RiskRanker [28] are designed to detect malicious apps in existing Android markets. MalGenome [44] reports a large collection of Android malware and presents various characteristics, which will be helpful in developing effective anti-malware solutions. Peng et al. [36] use probabilistic generative models to rank the risks of Android apps. Our work primarily focuses on one built-in Android component, the content provider, and studies the prevalence of vulnerable apps in current Android markets.

#### Applying Desktop Security Technologies to Smartphones
In parallel, researchers are applying security technologies used on desktops to smartphones to achieve better isolation or defense against mobile malware. For example, L4Android [32] and Cells [11] use a virtualization-based approach to isolate different virtual phones, allowing multiple virtual smartphones to run on a single physical phone with necessary isolation. MoCFI [18] is a framework to enforce control-flow integrity in iOS apps at runtime without requiring access to the app’s source code. Similar to systems used for malware analysis on desktops, DroidScope [41] is a system that can be used to analyze Android malware.

To assess the prevalence of vulnerabilities reported in this paper, our system shares a similar spirit with earlier systems designed to detect vulnerabilities in desktop software. For example, BitBlaze [39] is a binary analysis framework upon which practical tools can be developed to discover buffer-overflow bugs [37] or detect zero-day exploits [14]. KLEE [16] is a symbolic execution tool that can automatically generate test cases with high coverage, which can be used to detect potential bugs in programs. AEG [12] is designed to automatically generate exploits for control-flow hijacking attacks. Our system is designed to achieve similar goals for automatically discovering and generating inputs (or exploits) to trigger these vulnerabilities. However, our key contributions lie in identifying these two vulnerabilities and measuring their prevalence in existing apps. Moreover, certain differences in the running environments and targeted applications between these systems and ours lead to unique considerations in our system design and implementation (Section 3).

From another perspective, Java PathFinder [5] is a model checking tool proposed to test Java programs with a custom Java virtual machine. Our system is developed to analyze Dalvik bytecode, which is substantially different from Java bytecode. Nevertheless, these proposed techniques are applicable to enhance our tool for better automation and coverage.

### Conclusion

In this paper, we present two types of vulnerabilities rooted in the unprotected content providers of vulnerable apps. The first, passive content leak, allows private information managed by a vulnerable app to be passively leaked to any other app without any dangerous permission. The second, content pollution, allows for unauthorized changes to the internal data managed by vulnerable apps. To assess the extent of these vulnerabilities, we analyzed 62,519 apps collected in February 2012 from various Android markets. Our results show that among these apps, 1,279 (2.0%) and 871 (1.4%) are susceptible to these two vulnerabilities, respectively. Additionally, 435 (0.7%) and 398 (0.6%) of the vulnerable apps were downloaded from Google Play. The information being passively leaked ranges from personal contacts, login credentials, call logs, SMS messages, browser histories, etc. Unauthorized manipulation of vulnerable apps' data can be leveraged to block certain phone calls and SMS messages from specific numbers chosen by attackers or download unwanted apps for installation. The presence of a large number of vulnerable apps and the variety of private data for leaks and pollution reflect the severity of these two vulnerabilities.

### Acknowledgements

We would like to thank our shepherd, David Wagner, and the anonymous reviewers for their comments, which greatly helped improve the presentation of this paper. We also want to thank Michael Grace, Wu Zhou, Minh Q. Tran, Lei Wu, and Kunal Patel for the helpful discussions. This work was supported in part by the US National Science Foundation (NSF) under Grants 0855297, 0855036, 0910767, and 0952640. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF.

### References

[1] Android 4.2 APIs. http://developer.android.com/about/versions/android-4.2.html.
[2] App Store (iOS). http://en.wikipedia.org/wiki/App_Store_(iOS).
[3] Gartner Says Worldwide Smartphone Sales Soared in Fourth Quarter of 2011 With 47 Percent Growth. http://www.gartner.com/it/page.jsp?id=1924314.
[4] Google Play. http://en.wikipedia.org/wiki/Google_Play.
[5] Java PathFinder. http://babelfish.arc.nasa.gov/trac/jpf.
[6] Number of Web users in China Hits 513 Million. http://latimesblogs.latimes.com/technology/2012/01/chinese-web-users-grow-to-513-million.html.
[7] Sina Weibo. http://en.wikipedia.org/wiki/Sina_Weibo.
[8] The Risk You Carry in Your Pocket. https://media.blackhat.com/bh-ad-10/Nils/Black-Hat-AD-2010-android-sandcastle-slides.pdf.
[9] Your Apps Are Watching You. http://online.wsj.com/article/SB10001424052748704694004576020083703574602.html.
[10] ZeuS-in-the-Mobile - Facts and Theories. http://www.securelist.com/en/analysis/204792194/ZeuS_in_the_Mobile_Facts_and_Theories.
[11] J. Andrus, C. Dall, A. Van’t Hof, O. Laadan, and J. Nieh. Cells: A Virtual Mobile Smartphone Architecture. In Proceedings of the 23rd ACM Symposium on Operating Systems Principles, SOSP, 2011.
[12] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley. AEG: Automatic Exploit Generation. In Proceedings of the 18th Annual Symposium on Network and Distributed System Security, NDSS, 2011.
[13] A. R. Beresford, A. Rice, N. Skehin, and R. Sohan. MockDroid: Trading Privacy for Application Functionality on Smartphones. In Proceedings of the 12th International Workshop on Mobile Computing System and Applications, HotMobile, 2011.
[14] D. Brumley, J. Newsome, and D. Song. Sting: an end-to-end self-healing system for defending against internet worms. In Book chapter in "Malware Detection and Defense", Editors Christodorescu, Jha, Maughn, Song, 2007.
[15] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, A.-R. Sadeghi, and B. Shastry. Towards Taming Privilege-Escalation Attacks on Android. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS, 2012.
[16] C. Cadar, D. Dunbar, and D. Engler. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation, OSDI, 2008.
[17] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing Inter-Application Communication in Android. In Proceedings of the 9th Annual International Conference on Mobile Systems, Applications, and Services, MobiSys, 2011.
[18] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nurnberger, and A.-R. Sadeghi. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS, 2012.
[19] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege escalation attacks on Android. In Proceedings of the 13th international conference on Information security, ISC, 2010.
[20] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. QUIRE: Lightweight Provenance for Smart Phone Operating Systems. In Proceedings of the 20th USENIX Security Symposium, USENIX Security, 2011.
[21] M. Egele, C. Kruegel, E. Kirda, and G. Vigna. PiOS: Detecting Privacy Leaks in iOS Applications. In Proceedings of the 18th Annual Symposium on Network and Distributed System Security, NDSS, 2011.
[22] W. Enck, P. Gilbert, B.-g. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation, USENIX OSDI, 2010.
[23] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of Android Application Security. In Proceedings of the 20th USENIX Security Symposium, USENIX Security, 2011.
[24] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android Permissions Demystified. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS, 2011.
[25] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission Re-Delegation: Attacks and Defenses. In Proceedings of the 20th USENIX Security Symposium, USENIX Security, 2011.
[26] M. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe Exposure Analysis of Mobile In-App Advertisements. In Proceedings of the 5th ACM Conference on Security and Privacy in Wireless and Mobile Networks, WiSec, 2012.
[27] M. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS, 2012.
[28] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker: Scalable and Accurate Zero-day Android Malware Detection. In Proceedings of the 10th International Conference on Mobile Systems, Applications and Services, MobiSys, 2012.
[29] N. Hardy. The Confused Deputy: (or why capabilities might have been invented). ACM SIGOPS Operating Systems Review, 22, October 1998.
[30] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These Aren’t the Droids You’re Looking For: Retrofitting Android to Protect Data from Imperious Applications. In Proceedings of the 18th ACM Conference on Computer and Communications Security, CCS, 2011.
[31] J. Jeon, K. K. Micinski, J. A. Vaughan, A. Fogel, N. Reddy, J. S. Foster, and T. Millstein. Dr. Android and Mr. Hide: Fine-Grained Permissions in Android Applications. In ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices, CCS-SPSM, 2012.
[32] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter. L4Android: A Generic Operating System Framework for Secure Smartphones. In Proceedings of the 1st Workshop on Security and Privacy in Smartphones and Mobile Devices, CCS-SPSM, 2011.
[33] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically Vetting Android Apps for Component Hijacking Vulnerabilities. In Proceedings of the 19th ACM Conference on Computer and Communications Security, CCS, 2012.
[34] M. Nauman, S. Khan, and X. Zhang. Apex: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2010.
[35] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. AdDroid: Privilege Separation for Applications and Advertisers in Android. In Proceedings of the 7th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2012.
[36] H. Peng, C. Gates, B. Sarma, N. Li, Y. Qi, R. Potharaju, C. Nita-Rotaru, and I. Molloy. Using Probabilistic Generative Models for Ranking Risks of Android Apps. In Proceedings of the 19th ACM Conference on Computer and Communications Security, CCS, 2012.
[37] P. Saxena, P. Poosankam, S. McCamant, and D. Song. Loop-Extended Symbolic Execution on Binary Programs. In Proceedings of the ACM/SIGSOFT International Symposium on Software Testing and Analysis, ISSTA, 2009.
[38] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit: Separating Smartphone Advertising from Applications. In Proceedings of the 21st USENIX Security Symposium, USENIX Security, 2012.
[39] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena. BitBlaze: A New Approach to Computer Security via Binary Analysis. In Proceedings of the 4th International Conference on Information Systems Security, ICISS, 2008.
[40] R. Xu, H. Saidi, and R. Anderson. Aurasium: Practical Policy Enforcement for Android Applications. In Proceedings of the 21st USENIX Security Symposium, USENIX Security, 2012.
[41] L. K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In Proceedings of the 21st USENIX Security Symposium, USENIX Security, 2012.
[42] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast, Scalable Detection of ‘Piggybacked’ Mobile Applications. In Proceedings of the 3rd ACM Conference on Data and Application Security and Privacy, CODASPY, 2013.
[43] W. Zhou, Y. Zhou, X. Jiang, and P. Ning. DroidMOSS: Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces. In Proceedings of the 2nd ACM Conference on Data and Application Security and Privacy, CODASPY, 2012.
[44] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization and Evolution. In Proceedings of the 33rd IEEE Symposium on Security and Privacy, IEEE S&P, 2012.
[45] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In Proceedings of the 19th Annual Symposium on Network and Distributed System Security, NDSS, 2012.
[46] Y. Zhou, X. Zhang, X. Jiang, and V. W. Freeh. Taming Information-Stealing Smartphone Applications (on Android). In Proceedings of the 4th International Conference on Trust and Trustworthy Computing, TRUST, 2011.