# Taking Windows 10 Kernel Exploitation to the Next Level: Leveraging Write-What-Where Vulnerabilities in Creators Update

## Speaker Information
- **Name:** Morten Schenk
- **Role:** Security Advisor, Improsec ApS
- **Twitter:** @blomster81
- **Blog:** [Improsec Blog](https://improsec.com/blog/)
- **GitHub:** [MortenSchenk](https://github.com/MortenSchenk)

## Overview
- **Focus:** Windows 10 Kernel Exploitation on Creators Update from Low Integrity
- **Content:** Hex, C code, and memes
- **Highlights:** 0-day vulnerabilities

## Agenda
1. Brief Look at Kernel Exploitation History
2. New Windows 10 Mitigations
3. Arbitrary Kernel Read/Write Primitive
4. KASLR Information Leak
5. De-randomizing Page Table Entries
6. Dynamic Function Location
7. Executable Kernel Memory Allocation

## Exploitation Concept
- **Vulnerability Class:** Write-What-Where
  - **Best Case:** Writing a controlled value at a controlled address
  - **Common Case:** Writing an uncontrolled value at a controlled address
- **Objective:** Obtain kernel-mode code execution
- **Requirements:** Knowledge of where (and possibly what) to write
- **Applicability:** Techniques can be used for other vulnerability classes

### Kernel Exploitation History

#### Windows 7
- **Executable NonPagedPool:** Default setting
- **Kernel Information Leaks:** Available via `NtQuerySystemInformation`
- **Exploit Method:** Overwrite `HalDispatchTable` function table with `NonPagedPool` address
- **Result:** Execute user-mode memory from kernel-mode

#### Windows 8.1 and Windows 10 (before Anniversary Edition)
- **Kernel Information Leaks:** APIs blocked from Low Integrity
- **New Standard:** NonPagedPoolNx
- **Introduction:** Supervisor Mode Execution Prevention (SMEP)
- **Requirement:** Kernel-mode read/write primitive
- **Primitives:** GDI bitmap and tagWND

### GDI Bitmap Primitive
- **Information Leak:** Via `GdiSharedHandleTable`
- **Overwrite Size:** Using Write-What-Where
- **Primitive Creation:** Consecutive bitmaps
- **Functions:**
  - `SetBitmapBits`: Overwrites data pointer of the following bitmap
  - `GetBitmapBits`: Reads arbitrary kernel memory
  - `SetBitmapBits`: Writes arbitrary kernel memory

### tagWND Primitive
- **Information Leak:**
  - `ulClientDelta` from `Win32ClientInfo`
  - `UserHandleTable` from `User32!gSharedInfo`
- **Overwrite `cbWndExtra`:** Using Write-What-Where
- **Primitive Creation:** Consecutive windows
- **Functions:**
  - `SetWindowLongPtr`: Overwrites adjacent `tagWND.StrName` pointer through `ExtraBytes`
  - `InternalGetWindowText`: Reads arbitrary kernel memory
  - `NtUserDefSetText`: Writes arbitrary kernel memory

### SMEP and NX Bypass
- **Method:** Overwrite Page Table Entry using write primitive

### KASLR Bypass
- **Static HAL Heap:** Often at `0xFFFFFFFFFD00000`
- **Pointer Location:** `ntoskrnl.exe` at offset `0x448`
- **Leak Address:** Using `SIDT` instruction
- **Read Primitive:** Leak pointer to get base address

### Mitigations Introduced in Windows 10 1607
- **Randomized Page Table Entries**
- **Removed Kernel Addresses:** From `GdiSharedHandleTable`
- **Broken Primitives:**
  - **Bitmap Primitive:** Address leak mitigated
  - **tagWND Primitive:** Pointer verification enforced

### Locating Bitmap Object
- **Storage:** Large Paged Pool
- **Randomization:** On reboot
- **Leak Requirement:** Kernel information leak
- **Stabilization:**
  - Create large bitmap objects
  - Delete second large bitmap object
  - Allocate ~10,000 new bitmap objects of `0x1000` bytes each
- **Result:** Point to start of bitmap object

### tagWND Read/Write Outside Desktop Heap
- **Verification:** Performed by `DesktopVerifyHeapPointer`
- **Control:** Desktop heap address and size
- **Manipulation:**
  - Replace `tagDESKTOP` pointer
  - Control desktop heap during verification

### Mitigations Introduced in Windows 10 1703
- **Removed Kernel Addresses:**
  - `UserHandleTable`
  - `ulClientDelta` from `Win32ClientInfo`
- **User-Mode ExtraBytes:** Modified by `SetWindowLongPtr`

### tagWND Primitive Revival
- **Replacement:** `ulClientDelta` in `Win32ClientInfo` with user-mode pointer
- **Inspection:** Reveals user-mode mapped Desktop Heap
- **Manual Search:** Locate `tagWND` object
- **ExtraBytes:**
  - Defined by `cbWndExtra` when Windows Class is registered
  - Use `SetClassLongPtr` to update `tagWND.strName`
- **Result:** Kernel-mode read/write primitive is back

### Kernel ASLR
- **Randomization:** Almost all kernel memory
- **Static Memory:**
  - Shared System Page (`KUSER_SHARED_DATA`) at `0xFFFFF78000000000`
  - Not executable, no interesting pointers
- **HAL Heap Randomization:**
  - `SIDT` mitigated
  - Need new `ntoskrnl.exe` information leak

### KASLR Bypass Idea
- **Primitive-Related Bypass:**
  - Need a bypass for each primitive
  - Must leak `ntoskrnl.exe` pointer

### Bitmap KASLR Bypass 0-Day
- **Surface Structure:** From REACTOS
- **PDEVOBJ Structure:** From REACTOS
- **Free and Spray:**
  - Free a bitmap at offset `0x3000` from the first bitmap
  - Spray `CompatibleBitmaps` to reallocate
- **Read Pointer:**
  - `cdd!DrvSyncronizeSurface` pointer
  - Find `ntoskrnl.exe` pointer

### tagWND KASLR Bypass 0-Day
- **Structure:** From REACTOS
- **Pointer Location:** `KTHREAD` at offset `0x2A8`

### Bonus KASLR Bypass 0-Days
- **Primitive-Independent Leak:**
  - `ntoskrnl.exe` leak
  - Kernel pool leak for bitmap primitive
  - Works on Windows 10 1703

### Page Table Entry Overwrite
- **Static Base Address:** `0xFFFFF68000000000`
- **Calculation:** Easy to calculate PTE address

### De-randomizing Page Table Entries
- **Kernel Lookup:** Frequent PTE lookups
- **API Usage:** `MiGetPteAddress` in `ntoskrnl.exe`
- **Hash Value:** Collision-free hash of function start
- **Leak PTE Base Address:**
  - Use read primitive to locate `MiGetPteAddress`
  - Copy shellcode to `KUSER_SHARED_DATA + 0x800`
  - Flip NX bit of the page
  - Overwrite `HalDispatchTable` and call `NtQueryIntervalProfile`

### Recap of Steps
1. Use vulnerability to create read/write primitive
2. Leak `ntoskrnl.exe` base address using either `tagWND` or `Bitmap`
3. Locate `MiGetPteAddress`
4. Calculate PTE for any page
5. Copy shellcode to page
6. Overwrite PTE of shellcode page and gain RWX kernel memory
7. Overwrite `HalDispatchTable` and execute shellcode

### Dynamic Kernel Memory
- **Allocation:** `ExAllocatePoolWithTag` for kernel pool memory
- **Return:** Pool memory address
- **Controlled Arguments:**
  - Use `NtGdiDdDDICreateAllocation`
  - Trampoline through `win32k*.sys`
- **Function Table:** `Win32kbase!gDxgkInterface` into `dxgkrnl.sys`
- **Dynamic Location:**
  - `PsLoadedModuleList` for `Win32kfull.sys`
  - `KeCapturePersistentThreadState` for base address
  - `DrvOcclusionStateChangeNotify` for `gDxgkInterface`
- **Overwrite:**
  - `gDxgkInterface` with `nt!ExAllocatePoolWithTag`
  - Copy shellcode to allocated page
  - Execute by overwriting `gDxgkInterface` again

### Summary
- **Leverage:** Kernel read/write primitives with Write-What-Where vulnerabilities
- **Bypass:** Page Table randomization with `ntoskrnl.exe` information leak
- **Leaks:**
  - Device Independent Bitmap for `ntoskrnl.exe`
  - `tagWND` for `ntoskrnl.exe`
- **Memory Allocation:** RWX pool memory with `ExAllocatePoolWithTag`
- **Code Repository:** [GitHub](https://github.com/MortenSchenk/BHUSA2017)

### Credits
- Alex Ionescu
- Diego Juarez
- Yin Liang & Zhou Li
- Nicolas Economou
- David Weston & Matt Miller
- Matt Oh & Elia Florio

### Questions
?