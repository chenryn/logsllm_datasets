### 1. Introduction to Runtime Benefits and Limitations

The primary runtime benefit provided by the current system is the detection of unauthorized modifications that exploit well-documented transitions or interfaces, where a measurement has been explicitly inserted before the malicious software was loaded. However, attackers often do not limit themselves to these known interfaces [33].

### 2. Semantic Remote Attestation

Haldar et al. have proposed a system called "semantic remote attestation" [14] to extend the types of information that a verifying party can learn about the attesting system. Their approach involves using a language-based trusted virtual machine (VM) that allows the measurement agent to perform detailed analysis of the application, rather than relying on simple binary checksums. The core principle is that language-based analysis can provide much more semantic information about the properties of an application. However, their approach does not extend to the semantic properties of the kernel. Since their VM runs on top of a standard kernel, traditional attestation is still required to bootstrap the system.

### 3. Verifiable Code Execution

Verifiable code execution is a stronger property than traditional attestation, as it allows a verifier to guarantee that a specific piece of code actually runs on a target platform [33]. This contrasts with traditional attestation, which only guarantees the loading of a particular piece of software. Once the software is loaded, it could theoretically be compromised by an advanced adversary. With verifiable code execution, such a modification should not be possible without detection by the verifier. Both hardware-based [5, 35] and, more recently, software-based [33] systems have been proposed.

Verifiable code execution is a promising direction for ensuring that the correct code is run on a potentially untrusted platform. As demonstrated by Seshadri et al. [33], such a system could serve as the foundation for a kernel integrity monitor. Therefore, we view verifiable code execution as a potential extension for our architecture.

### 4. Specification-Based Detection

Specification-based intrusion detection is a technique where the system policy is based on a specification that describes the correct operation of the monitored entity [20]. This approach differs from signature-based methods, which look for known threats, and statistical methods, which model normalcy in an operational system. Typically, specification-based intrusion detection has been used to describe program behavior [20, 21, 32] rather than correct state. More recently, specifications have also been applied to network-based intrusion detection [36].

### 5. Data Structure Detection and Repair

We have previously described Demsky and Rinard's [7] work on data structure error detection and repair. Their work adds a layer of abstraction over historical systems like 5ESS [16] and MVS [25], where inconsistency detection and repair procedures were manually coded. We have adapted the basic techniques of Demsky and Rinard's specification system, with necessary adjustments for operating system semantic integrity. The environments are sufficiently different to require significant modifications, which were discussed in Section 3.3.

In related work, Nentwich and others [27] developed xlinkit, a tool that detects inconsistencies between distributed versions of collaboratively-developed XML documents. It uses consistency constraints written manually in a specification language based on first-order logic and XPath [6] expressions. For example, a constraint might be "every item in this container should have a unique name value." In later work [28], they described a tool that analyzes these constraints and generates a set of repair actions, such as deleting or renaming items with non-unique names. Human intervention is required to prune repair actions and select the most appropriate one at repair time.

### 6. Semantic Integrity in Databases

There is a long history of concern for the correct and consistent representation of data within databases. Hammer and McLeod addressed this issue in the mid-1970s, focusing on data stored in relational databases [15]. Ensuring transactional consistency in database modifications is analogous to process accounting in the operating system. Both assume that data will be modified only by authorized parties through predefined interfaces. While the environments are very different, Hammer and McLeod's work provides valuable insight into constraint verification. Their system includes constraints over database relations, with an assertion (a predicate), a validity requirement (analogous to a guard in Demsky and Rinard’s model language), and a violation action, similar to our response mechanism but limited to updating the database. They argue that assertions should be well-defined, not general-purpose predicates.

### 7. Future Work

Each part of the architecture described above offers avenues for significant impact and advancement. The three most promising areas are the extension to other monitors, the advancement in system responses, and the analysis and automation of specifications.

#### 7.1 Extension to Other Monitors

We have designed the semantic integrity architecture to be easily extended to other monitor platforms. Two of the most promising platforms include virtual machine monitors [13, 12] and software-based monitors achieved via verifiable code execution [33]. These systems offer unique extensions, such as the inclusion of register state into specifications and added assurance without extra hardware. We intend to extend our work to at least one such software-based monitor.

#### 7.2 Additional Response Vectors

Another area of work is the development of additional response vectors. An independent monitor with access to system memory and a system for easily interpreting that memory can provide significant leverage for advanced response. One of the most significant potentials is the advancement of automated runtime memory forensics.

#### 7.3 Automation of Specifications

Finally, as with all security systems, having a good policy is crucial for success. Our current architecture requires experts with advanced knowledge of kernel internals to write and verify specifications. Developing tools to automate this process, including kernel static analysis tools, could significantly improve it. We intend to investigate techniques for automatically analyzing kernel properties, both statically and at runtime.

### 8. Conclusion

We have introduced a novel and general architecture for defining and monitoring semantic integrity constraints, which is essential for defeating the latest generation of kernel-tampering rootkit technology. For our initial prototype implementation, we adapted Demsky and Rinard’s specification languages, originally designed for internal monitors of application data structures [7], to the task of implementing external monitors for operating system kernel data structures. This adaptation required adding features to their specification languages to address issues not present in the original problem domain, such as managing memory transfer overhead and providing flexible responses to detected compromises.

Our general architecture is applicable to a variety of low-level monitoring technologies, including external hardware monitors [29], software-based monitors [33], and virtual machine introspection [13]. We believe our approach is the first to comprehensively address the issue of monitoring the integrity of dynamic kernel data and will complement existing binary integrity systems.

### Acknowledgments

We would like to thank Trent Jaeger for his time and feedback during the final preparation of this work. We also thank the anonymous reviewers for their helpful comments. This work was supported by the National Science Foundation (NSF) under CAREER award 0133092.

### References

[1] The Unified Modeling Language (UML). http://www.uml.org, 2005.
[2] Trusted Computing Group (TCG). http://www.trustedcomputinggroup.org, 2005.
[3] W. E. Boebert and R. Y. Kain. A Practical Alternative to Hierarchical Integrity Policies. In Proceedings of the 8th National Computer Security Conference, pages 18–27, Gaithersburg, Maryland, September 1985.
[4] T. Bray, J. Paoli, C. M. Sperberg-McQueen, and E. Maler. Extensible Markup Language. Recommendation REC-xml-20001006, World Wide Web Consortium, October 2000.
[5] B. Chen and R. Morris. Certifying Program Execution with Secure Processors. In 9th Workshop on Hot Topics in Operating Systems (HotOS), Lihue, Hawaii, May 2003.
[6] J. Clark and S. Derose. XML Path Language (XPath) Version 1.0. Recommendation REC-xpath-19991116, World Wide Web Consortium, November 1999.
[7] B. Demsky and M. Rinard. Automatic Detection and Repair of Errors in Data Structures. In Proceedings of the 18th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), Anaheim, CA, October 2003.
[8] B. Demsky and M. Rinard. Static Specification Analysis for Termination of Specification-Based Data Structure Repair. In Proceedings of the 14th International Symposium on Software Reliability Engineering, November 2003.
[9] B. Demsky and M. Rinard. Data Structure Repair Using Goal-Directed Reasoning. In Proceedings of the 27th International Conference on Software Engineering (ICSE), St. Louis, MO, May 2005.
[10] R. Droms. Dynamic host configuration protocol. Technical Report RFC 2131, Bucknell University, March 1997.
[11] D. Ferraiolo and R. Kuhn. Role-Based Access Controls. In Proceedings of the 15th National Computer Security Conference, pages 554–563, Baltimore, Maryland, October 1992.
[12] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A Virtual-Machine Based Platform for Trusted Computing. In 19th ACM Symposium on Operating Systems Principles (SOSP), Sagamore, NY, October 2003.
[13] T. Garfinkel and M. Rosenblum. A Virtual Machine Introspection Based Architecture for Intrusion Detection. In The 10th Annual Symposium on Network and Distributed System Security (NDSS), San Diego, CA, February 2003.
[14] V. Haldar, D. Chandra, and M. Franz. Semantic Remote Attestation – A Virtual Machine Directed Approach to Trusted Computing. In Proceedings of the 3rd USENIX Virtual Machine Research & Technology Symposium, May 2004.
[15] M. Hammer and D. McLeod. A Framework For Database Semantic Integrity. In Proceedings of the 2nd International Conference on Software Engineering (ICSE), San Francisco, CA, October 1976.
[16] G. Haugk, F. Lax, R. Royer, and J. Williams. The 5ESS(TM) Switching System: Maintenance Capabilities. AT&T Technical Journal, 64(6):1385–1416, July-August 1985.
[17] D. Hollingworth and T. Redmond. Enhancing Operating System Resistance to Information Warfare. In MILCOM 2000. 21st Century Military Communications Conference Proceedings, volume 2, pages 1037–1041, Los Angeles, CA, USA, October 2000.
[18] R. Kennell and L. H. Jamieson. Establishing the Genuineness of Remote Computer Systems. In Proceedings of the 12th USENIX Security Symposium, pages 295–310, Washington, D.C., August 2003.
[19] G. H. Kim and E. H. Spafford. The Design and Implementation of Tripwire: A File System Integrity Checker. In Proceedings of the 2nd ACM Conference on Computer and Communications Security, pages 18–29, Fairfax, Virginia, November 1994.
[20] C. Ko, G. Fink, and K. Levitt. Automated Detection of Vulnerabilities in Privileged Programs by Execution Monitoring. In Proceedings of the 10th Annual Computer Security Applications Conference (ACSAC), Orlando, FL, 1994.
[21] C. Ko, M. Ruschitzka, and K. Levitt. Execution Monitoring of Security-Critical Programs in Distributed Systems: A Specification-Based Approach. In 1997 IEEE Symposium on Security and Privacy, Oakland, CA, May 1997.
[22] P. A. Loscocco and S. D. Smalley. Integrating Flexible Support for Security Policies into the Linux Operating System. In Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference, Boston, Massachusetts, June 2001.
[23] R. Love. Linux Kernel Development. Novell Press, second edition, 2005.
[24] P. Mockapetris. Domain Names—Concepts and Facilities. Technical Report RFC 1034, ISI, November 1987.
[25] S. Mourad and D. Andrews. On the Reliability of the IBM MVS/XA Operating System. IEEE Transactions on Software Engineering, 13(10):1135–1139, 1987.
[26] National Computer Security Center. Department of Defense Trusted Computer System Evaluation Criteria, December 1985.
[27] C. Nentwich, L. Capra, W. Emmerich, and A. Finkelstein. Xlinkit: A Consistency Checking and Smart Link Generation Service. ACM Transactions on Internet Technology, 2(2):151–185, May 2002.
[28] C. Nentwich, W. Emmerich, and A. Finkelstein. Consistency Management with Repair Actions. In Proceedings of the 25th International Conference on Software Engineering, May 2003.
[29] N. L. Petroni, T. Fraser, J. Molina, and W. A. Arbaugh. Copilot – A Coprocessor-Based Kernel Runtime Integrity Monitor. In 13th USENIX Security Symposium, San Diego, CA, August 2004.
[30] R. Sailer, T. Jaeger, X. Zhang, and L. van Doorn. Attestation-Based Policy Enforcement for Remote Access. In 11th ACM Conference on Computer and Communications Security (CCS), Washington, DC, November 2004.
[31] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and Implementation of a TCG-Based Integrity Measurement Architecture. In 13th USENIX Security Symposium, San Diego, CA, August 2004.
[32] R. Sekar and P. Uppuluri. Synthesizing Fast Intrusion Prevention/Detection Systems from High-Level Specifications. In 8th USENIX Security Symposium, pages 63–78, Washington, D.C., August 1999.
[33] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and P. Khosla. Pioneer: Verifying Code Integrity and Enforcing Untampered Code Execution on Legacy Systems. In Proceedings of the 20th ACM Symposium on Operating Systems Principles (SOSP), Brighton, United Kingdom, October 2005.
[34] A. Seshadri, A. Perrig, L. van Doorn, and P. Khosla. SWATT: SoftWare-Based ATTestation for Embedded Devices. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2004.
[35] E. Shi, A. Perrig, and L. V. Doorn. BIND: A Fine-Grained Attestation Service for Secure Distributed Systems. In Proceedings of the 2005 IEEE Symposium on Security and Privacy, Oakland, CA, May 2005.
[36] C. Tseng, P. Balasubramanyam, C. Ko, R. Limprasittiporn, J. Rowe, and K. Levitt. A Specification-Based Intrusion Detection System for AODV. In 2003 ACM Workshop on Security of Ad Hoc and Sensor Networks (SASN '03), Fairfax, VA, October 2003.
[37] X. Zhang, L. van Doorn, T. Jaeger, R. Perez, and R. Sailer. Secure Coprocessor-Based Intrusion Detection. In Proceedings of the Tenth ACM SIGOPS European Workshop, Saint-Emilion, France, September 2002.