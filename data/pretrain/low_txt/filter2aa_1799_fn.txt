### Experiment: Loader Parameter Block

During the boot process, the kernel maintains a pointer to the Loader Parameter block in the `eerl` variable. This parameter block is discarded after the initial boot phase, making it necessary to attach a kernel debugger before booting and break at the initial kernel debugger breakpoint to inspect its contents. If you are able to do this, you can use the `dt` command to dump the block, as shown below:

```plaintext
kd> dt poi(nt!KeLoaderBlock) nt!LOADER_PARAMETER_BLOCK
+0x000 OsMajorVersion   : 0xa
+0x004 OsMinorVersion   : 0
+0x008 Size             : 0x160
+0x00c OsLoaderSecurityVersion : 1
+0x010 LoadOrderListHead : _LIST_ENTRY [ 0xfffff800`2278a230 - 0xfffff800`2288c150 ]
+0x020 MemoryDescriptorListHead : _LIST_ENTRY [ 0xfffff800`22949000 - 0xfffff800`22949de8 ]
+0x030 BootDriverListHead : _LIST_ENTRY [ 0xfffff800`22840f50 - 0xfffff800`2283f3e0 ]
+0x040 EarlyLaunchListHead : _LIST_ENTRY [ 0xfffff800`228427f0 - 0xfffff800`228427f0 ]
+0x050 CoreDriverListHead : _LIST_ENTRY [ 0xfffff800`228429a0 - 0xfffff800`228405a0 ]
+0x060 CoreExtensionsDriverListHead : _LIST_ENTRY [ 0xfffff800`2283ff20 - 0xfffff800`22843090 ]
+0x070 TpmCoreDriverListHead : _LIST_ENTRY [ 0xfffff800`22831ad0 - 0xfffff800`22831ad0 ]
+0x080 KernelStack      : 0xfffff800`25f5e000
+0x088 Prcb             : 0xfffff800`22acf180
+0x090 Process          : 0xfffff800`23c819c0
+0x098 Thread           : 0xfffff800`23c843c0
+0x0a0 KernelStackSize  : 0x6000
+0x0a4 RegistryLength   : 0xb80000
+0x0a8 RegistryBase     : 0xfffff800`22b49000 Void
+0x0b0 ConfigurationRoot : 0xfffff800`22783090 _CONFIGURATION_COMPONENT_DATA
+0x0b8 ArcBootDeviceName : 0xfffff800`22785290  "multi(0)disk(0)rdisk(0)partition(4)"
+0x0c0 ArcHalDeviceName : 0xfffff800`22785190  "multi(0)disk(0)rdisk(0)partition(2)"
+0x0c8 NtBootPathName   : 0xfffff800`22785250  "\WINDOWS\"
+0x0d0 NtHalPathName    : 0xfffff800`22782bd0  "\"
+0x0d8 LoadOptions      : 0xfffff800`22772c80  "KERNEL=NTKRNLMP.EXE  NOEXECUTE=OPTIN HYPERVISORLAUNCHTYPE=AUTO DEBUG ENCRYPTION_KEY=**** DEBUGPORT=NET HOST_IP=192.168.18.48  HOST_PORT=50000  NOVGA"
+0x0e0 NlsData          : 0xfffff800`2277a450 _NLS_DATA_BLOCK
+0x0e8 ArcDiskInformation : 0xfffff800`22785e30 _ARC_DISK_INFORMATION
+0x0f0 Extension        : 0xfffff800`2275cf90 _LOADER_PARAMETER_EXTENSION
+0x0f8 u                : 
+0x108 FirmwareInformation : _FIRMWARE_INFORMATION_LOADER_BLOCK
+0x148 OsBootstatPathName : (null)
+0x150 ArcOSDataDeviceName : (null)
+0x158 ArcWindowsSysPartName : (null)
```

Additionally, you can use the `!loadermemorylist` command on the `MemoryDescriptorListHead` field to dump the physical memory ranges:

```plaintext
kd> !loadermemorylist 0xfffff800`22949000
Base        Length      Type
0000000001  0000000005  (26) HALCachedMemory ( 20 Kb )
0000000006  000000009a  ( 5) FirmwareTemporary ( 616 Kb )
...
0000001304  0000000001  ( 7) OsloaderHeap ( 4 Kb )
0000001305  0000000081  ( 5) FirmwareTemporary ( 516 Kb )
0000001386  000000001c  (20) MemoryData ( 112 Kb )
...
0000001800  0000000b80  (19) RegistryData ( 11 Mb 512 Kb )
0000002380  00000009fe  ( 9) SystemCode ( 9 Mb 1016 Kb )
0000002d7e  0000000282  ( 2) Free ( 2 Mb 520 Kb )
0000003000  0000000391  ( 9) SystemCode ( 3 Mb 580 Kb )
0000003391  0000000068  (11) BootDriver ( 416 Kb )
00000033f9  0000000257  ( 2) Free ( 2 Mb 348 Kb )
0000003650  00000008d2  ( 5) FirmwareTemporary ( 8 Mb 840 Kb )
000007ffc9  0000000026  (31) FirmwareData ( 152 Kb )
000007ffef  0000000004  (32) FirmwareReserved ( 16 Kb )
000007fff3  000000000c  ( 6) FirmwarePermanent ( 48 Kb )
000007ffff  0000000001  ( 5) FirmwareTemporary ( 4 Kb )

NumberOfDescriptors: 90

Summary
Memory Type
Pages
Free
000007a89c   (    501916)   ( 1 Gb 936 Mb 624 Kb )
LoadedProgram
0000000370   (       880)   ( 3 Mb 448 Kb )
FirmwareTemporary
0000001fd4   (      8148)   ( 31 Mb 848 Kb )
FirmwarePermanent
000000030e   (       782)   ( 3 Mb 56 Kb )
OsloaderHeap
0000000275   (       629)   ( 2 Mb 468 Kb )
SystemCode
0000001019   (      4121)   ( 16 Mb 100 Kb )
BootDriver
000000115a   (      4442)   ( 17 Mb 360 Kb )
RegistryData
0000000b88   (      2952)   ( 11 Mb 544 Kb )
MemoryData
0000000098   (       152)   ( 608 Kb )
NlsData
0000000023   (        35)   ( 140 Kb )
HALCachedMemory
0000000005   (         5)   ( 20 Kb )
FirmwareCode
0000000008   (         8)   ( 32 Kb )
FirmwareData
0000000075   (       117)   ( 468 Kb )
FirmwareReserved
0000000044   (        68)   ( 272 Kb )

Total
000007FFDF   (    524255) = ( ~2047 Mb )
```

The Loader Parameter extension provides useful information about the system hardware, CPU features, and boot type:

```plaintext
kd> dt poi(nt!KeLoaderBlock) nt!LOADER_PARAMETER_BLOCK Extension
+0x0f0 Extension : 0xfffff800`2275cf90 _LOADER_PARAMETER_EXTENSION

kd> dt 0xfffff800`2275cf90 _LOADER_PARAMETER_EXTENSION
nt!_LOADER_PARAMETER_EXTENSION
+0x000 Size             : 0xc48
+0x004 Profile          : _PROFILE_PARAMETER_BLOCK
+0x018 EmInfFileImage   : 0xfffff800`25f2d000 Void
...
+0x068 AcpiTable        : (null)
+0x070 AcpiTableSize    : 0
+0x074 LastBootSucceeded : 0y1
+0x074 LastBootShutdown : 0y1
+0x074 IoPortAccessSupported : 0y1
+0x074 BootDebuggerActive : 0y0
+0x074 StrongCodeGuarantees : 0y0
+0x074 HardStrongCodeGuarantees : 0y0
+0x074 SidSharingDisabled : 0y0
+0x074 TpmInitialized   : 0y0
+0x074 VsmConfigured    : 0y0
+0x074 IumEnabled       : 0y0
+0x074 IsSmbboot        : 0y0
+0x074 BootLogEnabled   : 0y0
+0x074 FeatureSettings  : 0y0000000 (0)
+0x074 FeatureSimulations : 0y000000 (0)
+0x074 MicrocodeSelfHosting : 0y0
...
+0x900 BootFlags        : 0
+0x900 DbgMenuOsSelection : 0y0
+0x900 DbgHiberBoot     : 0y1
+0x900 DbgSoftRestart   : 0y0
+0x908 InternalBootFlags : 2
+0x908 DbgUtcBootTime   : 0y0
+0x908 DbgRtcBootTime   : 0y1
+0x908 DbgNoLegacyServices : 0y0
```

### Ntoskrnl Initialization Phases

Ntoskrnl begins with Phase 0, the first of its two-phase initialization process (Phase 1 being the second). Most executive subsystems have an initialization function that takes a parameter identifying which phase is executing.

**Phase 0:**
- **Interrupts Disabled:** During this phase, interrupts are disabled.
- **Purpose:** The goal is to build the basic structures required to allow the services needed in Phase 1 to be invoked.
- **Initialization Functions:**
  - **yserup:** Called in each system processor context, it initializes the processor boot structures and sets up the Global Descriptor Table (GDT) and Interrupt Descriptor Table (IDT).
  - **Boot Processor Tasks:**
    - Initializes the Control Flow Guard (CFG) check functions.
    - Cooperates with the memory manager to initialize KASLR, assigning random Virtual Address (VA) ranges for various virtual memory regions (e.g., PFN database and system PTE regions).
    - Initializes the kernel debugger, XSAVE processor area, and, where needed, KVA Shadow.
  - **nleernel:**
    - Performs system-wide kernel initialization if running on the boot CPU, such as initializing internal lists and other data structures shared by all CPUs.
    - Builds and compacts the System Service Descriptor Table (SSDT) and calculates random values for the internal `lys` and `eer` values used for kernel pointer encoding.
    - Checks if virtualization has been started; if so, maps the `ypercall` page and starts the processorâ€™s enlightenments.
    - Initializes and enables Control Enforcement Technology (CET) on compatible processors, implementing a hardware shadow stack to detect and prevent Return-Oriented Programming (ROP) attacks. CET protects both user-mode applications and kernel-mode drivers (when VSM is available).
    - Initializes the Idle process and thread and calls `pnleeue`.

**Phase 1:**
- **nleernel and pnleeue:** These functions are typically executed on each system processor to complete the initialization process.

This structured approach ensures that the system is properly set up before enabling more complex and critical services.