# Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)  
0-7695-2716-7/06 $20.00 © 2006

## Memory Bus and AES Pipeline
- **PAD 2**
- **PAD 1**
- **C(1)**: a, c
- **C(2)**: a, c
- **Ha,c**: CBC MAC
- **CBC MAC**
- **CBC MAC**
- **L(1)**: a, c
- **L(2)**: a, c
- **Integrity Result**
- **Overhead**: 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120
- **Cycles**

### Figure 6: Timeline Example of a Cache Line Read from Memory
This figure illustrates the timeline for reading a cache line from memory using the parameters from Table 1.

### Figure 7b: Impact of Merkle Tree Cache Sizes
We compare the performance impact of four different Merkle tree cache sizes: no cache, 256-entry cache, 512-entry cache, and 1024-entry cache. The introduction of even a small cache significantly improves performance. However, increasing the cache size beyond 256 entries has a marginal effect because the number of memory pages used by the applications far exceeds the cache capacity. Ideally, the cache should be large enough to store all page information and Merkle tree nodes.

### Memory Usage and Performance Penalties
The storage of the Message Authentication Code (MAC) increases the memory usage of the secure program by 50% with our parameters. To reduce this footprint, the MAC can be computed over multiple lines, but this increases the time required for MAC verification and memory bus utilization. Figure 7c shows the performance penalties for computing the MAC over one, two, and four cache lines without speculative execution (CRYPTOPAGE architecture with a 512-entry Merkle tree cache). The mean performance penalty is 4.4% for two cache lines and 11.7% for four cache lines. If instructions are executed before verification, the performance penalty is minimal (less than 1%, as shown in Figure 7d).

### Simulation and Performance Analysis
We used SimpleScalar to obtain comparable performance results with other architectures that use similar micro-architecture simulators. However, SimpleScalar only simulates the process execution and does not account for the operating system or other processes. For example, in a multitasking environment, frequent kernel calls due to clock interrupts can increase the cache miss rate of the running process.

### Current Work
We are currently estimating the hardware cost (number of logic gates) of our modifications.

## Related Work
In this article, we propose a mechanism to implement an online memory checker using the HIDE infrastructure. Gassend et al. [7] used a Merkle tree over the entire memory space to implement an online memory checker, leveraging the processor's cache hierarchy to improve integrity checking speed. Despite this, they reported a 20% performance penalty. Our approach combines a simple MAC mechanism and a Merkle tree over page information to build a memory checker that is secure against replay attacks with better performance.

Gassend et al. [7] also built an offline memory checker using incremental hash functions. Clarke et al. [4] proposed another offline memory checker with constant bandwidth overhead by combining hash trees and incremental hash functions. Offline checkers verify a set of transactions, while online checkers verify memory integrity during each transaction. Offline checkers are faster but require calling the verification function before each security-critical instruction, which can lead to information leaks if combined with memory encryption.

Memory encryption in secure architectures has been studied in XOM [16, 17, 18], AEGIS [26, 27], and CRYPTOPAGE [15, 6, 5]. For instance, Shi et al. [25] used counter mode to encrypt cache lines but needed to store the counter in memory, delaying pad computation until the counter was fetched. They proposed a prediction unit and a special cache to mitigate this delay. In our approach, the counter is deduced from data in the page information structure, which is always available before memory access, except in the case of a TLB miss. This allows pad computation during memory access latency without relying on a counter cache or prediction unit.

Address bus information leakage has been addressed in several works. One approach is to encrypt the address bus, equivalent to performing an initial permutation of the memory space, as seen in DS5000 processors. However, this does not prevent attackers from observing memory usage patterns. Goldreich et al. [8] proposed methods to prevent such leaks but at a high performance cost. Zhuang et al. [30] created HIDE, which prevents address bus leaks with a low performance penalty (1.3% slowdown).

Yan et al. [29] developed a method to combine memory encryption and integrity protection with a 5% IPC overhead using Galois/Counter Mode (GCM). Their encryption process is similar to ours, but they still need a counter cache, whereas we always have the correct counter ready before memory access. GCM is faster than our CBC-MAC because most computations can overlap with memory latency. However, they use a Merkle tree over the entire memory and do not provide information leakage protection.

The Trusted Computing Group [28] and Microsoft's Next Generation Secure Computing Base (NGSCB) [22, 21] aim to secure general-purpose computers. Their objectives, such as strong isolation between processes and remote attestations, differ from ours. We focus on protecting the integrity and confidentiality of code and data, even against hardware attacks, which cannot be achieved solely with a Trusted Platform Module (TPM) and a secure operating system.

## Conclusions and Future Work
We described a new, simple solution for implementing memory encryption and protection in processors based on the HIDE architecture and recursive hash functions. This solution prevents information leakage on the data and address buses and resists active external attacks, even with a malicious operating system or logic analyzer.

Our approach adds a Merkle hash tree at the coarse-grain level (operating system page descriptor TLB) to protect against replay attacks with minimal performance penalty. We also proposed a small verification cache to further improve performance. A few novel secure instructions delegate security management to the operating system and simplify the hardware security mechanism.

Once security is established at the TLB level, secret keys are encrypted and added to the TLB to implement memory encryption and address shuffling within each memory page using counter mode encryption and anti-replay protection via CBC-MAC.

The performance penalty of our mechanisms, compared to a non-secured architecture, is approximately 3% on average on some SPEC2000int benchmarks, which is significantly lower than previous works. This is achieved because each memory line is read and written only once between each chunk permutation.

We are extending our proposal to multicore and multiprocessor systems and applying our architecture to secure distributed high-performance computing.

## Acknowledgment
This work is supported in part by a PhD grant from the Délégation Générale pour l’Armement (DGA, a division of the French Ministry of Defense), and funded by the French National Research Agency (ANR) under contract ANR-05-SSIA-005-03 SAFESCALE. We thank Jacques Stern for his valuable comments, and Sylvain Guilley and Renaud Pacalet for their insightful discussions in the GET-TCP project.

## References
[1] T. Austin, E. Larson, and D. Ernst. SIMPLESCALAR: An infrastructure for computer system modeling. *Computer*, 35(2):59–67, Feb. 2002.
[2] M. Bellare, A. Desai, E. Jokipii, and P. Rogaway. A concrete security treatment of symmetric encryption. In *Proceedings of the 38th Annual Symposium on Foundations of Computer Science (FOCS’97)*, pages 394–403. IEEE Computer Society, Oct. 1997.
[3] M. Bellare and C. Namprempre. Authenticated encryption: Relations among notions and analysis of the generic composition paradigm. In *Advances in Cryptology - Asiacrypt 2000 Proceedings*, volume 1976 of *Lecture Notes in Computer Science*. Springer-Verlag, 2000.
[4] D. Clarke, G. E. Suh, B. Gassend, A. Sudan, M. van Dijk, and S. Devadas. Towards constant bandwidth overhead integrity checking of untrusted data. In *Proceedings of the 2005 IEEE Symposium on Security and Privacy*, pages 139–153. IEEE Computer Society, May 2005.
[5] G. Duc. CRYPTOPAGE — an architecture to run secure processes. Diplôme d’Études Approfondies, École Nationale Supérieure des Télécommunications de Bretagne, DEA de l’Université de Rennes 1, June 2004. http://enstb.org/~gduc/dea/rapport/rapport.pdf.
[6] G. Duc, R. Keryell, and C. Lauradoux. CRYPTOPAGE : Support matériel pour cryptoprocessus. *Technique et Science Informatiques*, 24:667–701, 2005.
[7] B. Gassend, G. E. Suh, D. Clarke, M. van Dijk, and S. Devadas. Caches and hash trees for efficient memory integrity verification. In *Proceedings of the 9th International Symposium on High-Performance Computer Architecture (HPCA’03)*, pages 295–306, Feb. 2003.
[8] O. Goldreich and R. Ostrovsky. Software protection and simulation on oblivious RAMs. *Journal of the ACM*, 43(3):431–473, 1996.
[9] J. L. Henning. SPEC CPU2000: measuring CPU performance in the new millennium. *IEEE Computer*, 33(7):28–35, July 2000.
[10] A. Huang. Keeping secrets in hardware: the Microsoft XBox (TM) case study. Technical Report AI Memo 2002-008, MIT, May 2002.
[11] ISO/IEC 9797. Data cryptographic techniques — data integrity mechanism using a cryptographic check function employing a block cipher algorithm, 1989.
[12] R. Keryell. CRYPTOPAGE-1 : vers la fin du piratage informatique ? In *Symposium d’Architecture (SYMPA’6)*, pages 35–44, Besançon, June 2000.
[13] P. C. Kocher. Timing attacks on implementations of DIFFIE-HELLMAN, RSA, DSS, and other systems. In *Proceedings of the 16th Annual International Cryptology Conference on Advances in Cryptology (CRYPTO’96)*, number 1109, pages 104–113. Springer-Verlag, Aug. 1996.
[14] P. C. Kocher, J. Jaffe, and B. Jun. Differential power analysis. In *Proceedings of the 19th Annual International Cryptology Conference on Advances in Cryptology (CRYPTO’99)*, number 1666, pages 388–397. Springer-Verlag, Aug. 1999.
[15] C. Lauradoux and R. Keryell. CRYPTOPAGE-2 : un processeur sécurisé contre le rejeu. In *Symposium en Architecture et Adéquation Algorithme Architecture (SYMPAAA’2003)*, pages 314–321, La Colle sur Loup, France, Oct. 2003.
[16] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell, and M. Horowitz. Architectural support for copy and tamper resistant software. In *Proceedings of the Ninth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS IX)*, pages 168–177, Oct. 2000.
[17] D. Lie, C. A. Trekkath, and M. Horowitz. Implementing an untrusted operating system on trusted hardware. In *Proceedings of the 9th ACM Symposium on Operating Systems Principles (SOSP’03)*, pages 178–192, Oct. 2003.
[18] D. J. Lie. Architectural support for copy and tamper-resistant software. PhD thesis, Stanford University, 2004.
[19] D. A. McGrew and J. Viega. The Galois/Counter Mode of operation. Submission to NIST Modes of Operation Process, May 2005. http://csrc.nist.gov/CryptoToolkit/modes/proposedmodes.
[20] R. C. Merkle. A certified digital signature. In *Proceedings on Advanced in Cryptology (CRYPTO’89)*, volume 435, pages 218–238. Springer-Verlag New York, Inc., 1989.
[21] Microsoft Corporation. NGSCB: Trusted Computing Base. 2003. http://www.microsoft.com/resources/ngscb/documents/ngscb_tcb.doc.
[22] Microsoft Corporation. Security Model for the Secure Next-Generation Computing Base, 2003. http://www.microsoft.com/resources/ngscb/documents/NGSCB_Security_Model.doc.
[23] NIST. Computer data authentication, May 1985. Federal Information Processing Standards Publication 113.
[24] NIST. Recommendation for block cipher modes of operation, Dec. 2001. Special Publication 800-38A.
[25] W. Shi, H.-H. S. Lee, M. Ghosh, C. Lu, and A. Boldyreva. High efficiency counter mode security architecture via prediction and precomputation. In *Proceedings of the 32nd Annual International Symposium on Computer Architecture (ISCA’05)*, pages 14–24. IEEE Computer Society, June 2005.
[26] G. E. Suh, D. Clarke, B. Gassend, M. van Dijk, and S. Devadas. AEGIS: Architecture for tamper-evident and tamper-resistant processing. In *Proceedings of the 17th International Conference on Supercomputing (ICS’03)*, pages 160–171, June 2003.
[27] G. E. Suh, C. W. O’Donnell, I. Sachdev, and S. Devadas. Design and implementation of the AEGIS single-chip secure processor using physical random functions. In *Proceedings of the 32nd Annual International Symposium on Computer Architecture (ISCA’05)*, pages 25–36. IEEE Computer Society, June 2005.
[28] Trusted Computing Group, Mar. 2005. http://www.trustedcomputinggroup.org.
[29] C. Yan, D. Englender, M. Prvulovic, B. Rogers, and Y. Solihin. Improving cost, performance, and security of memory encryption and authentication. In *Proceedings of the 33rd International Symposium on Computer Architecture (ISCA’06)*, pages 179–190. IEEE Computer Society, June 2006.
[30] X. Zhuang, T. Zhang, and S. Pande. HIDE: an infrastructure for efficiently protecting information leakage on the address bus. In *Proceedings of the 11th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS-XI)*, pages 72–84. ACM Press, Oct. 2004.

---

This revised version aims to make the text more coherent, clear, and professional, while maintaining the technical details and references.