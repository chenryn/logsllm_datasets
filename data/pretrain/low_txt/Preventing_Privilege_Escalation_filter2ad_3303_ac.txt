# Miscellaneous Components and Their Code Distribution

| Component                | Lines of Code Percentage |
|--------------------------|--------------------------|
| Privilege Separation Interface | 67.70%                  |
| OpenSSL                   | 39.88%                   |
| Diffie-Hellman            | 1.03%                    |
| Symmetric Ciphers         | 4.21%                    |
| Zlib                      | 30.58%                   |
| Privileged Monitor        | 4.06%                    |
| OpenSSH                   | 12.08%                   |
| Authentication            | 1.42%                    |
| SKey                      | 10.66%                   |
| BigNum/Hash               | 15.75%                   |
| Public Key                | 32.30%                   |
| Miscellaneous             | 13.10%                   |
| Monitor                   | 3.09%                    |
| Total                     | 100.00%                  |

Table 1: Distribution of source code lines across various components in the OpenSSH project, indicating the percentage of lines that are executed with and without privileges.

## Security Implications and Mitigations

- **File System Access:** A slave process cannot signal another slave. If an adversary attempts to use system calls that modify the file system (e.g., creating named pipes for interprocess communication or device nodes), the non-root user's file system root is set to an empty, read-only directory, preventing escape.
  
- **Network Connections:** Using privilege separation, we cannot prevent an adversary from initiating local network connections and potentially abusing trust relations based on IP addresses. However, we can restrict the child’s access to the system using external policy enforcement mechanisms like SysTrace [21].

- **Information Gathering:** The adversary may try to gather system information (e.g., system time or PIDs of running processes) to compromise other services. Depending on the operating system, some information is only exported via the file system and is inaccessible to the adversary. A sandbox can further restrict access to system information.

- **Kernel-Level Exploits:** A bug in OpenBSD’s `select` system call allowed an adversary to execute arbitrary code at the kernel level [5, 20]. This highlights the importance of carefully auditing the interface between the privileged monitor and the slave. In the current implementation, the monitor imposes strict checks on all requests, and any invalid request causes the monitor to terminate.

- **Resource Starvation:** An adversary might attempt to starve system resources by forking new processes or performing time-intensive computations. To mitigate this, we can place process limits on the slave, such as limiting the number of file descriptors and processes it can open. The monitor can also watch resource utilization (e.g., CPU time) and terminate the slave if a threshold is exceeded.

## Impact of Privilege Separation on Previous Vulnerabilities

- **CRC32 Compensation Attack Detector Vulnerability:** This vulnerability in the SSH-1 daemon allows an adversary to gain superuser privileges remotely without authentication [31]. With privilege separation, the function processing network packets runs without privileges, making it impossible for an adversary to directly compromise the system.

- **Off-by-One Error in Channel Code:** This error in OpenSSH’s channel code allows an adversary to gain superuser privileges after authentication [19]. With privilege separation, the process has only the privileges of the authenticated user, preventing the adversary from obtaining system privileges.

- **zlib Compression Library Vulnerability:** A security issue in the zlib compression library could allow a remote adversary to gain superuser privileges without authentication [3]. Since this is a third-party library, no audit of OpenSSH’s source code would have found it. Privilege separation prevents a system compromise in this case.

- **Kerberos Ticket Passing and Challenge-Response Authentication Bugs:** These vulnerabilities allowed an authenticated user to gain superuser rights and a remote adversary to obtain superuser privileges without authentication [4]. Privilege separation mitigates both issues and is mentioned in the CERT advisory as a solution.

These examples demonstrate that privilege separation can contain unknown security problems.

## Performance Analysis

To analyze the performance of privilege-separated OpenSSH, we measured the execution time for several operations in both monolithic OpenSSH and the privilege-separated version. The tests were conducted on a 1.13 GHz Pentium III laptop with all data in the memory cache.

| Test                        | Normal OpenSSH (s)     | Privilege-Separated OpenSSH (s) |
|-----------------------------|------------------------|----------------------------------|
| Login - Compressed          | 0.775 ± 0.0071         | 0.777 ± 0.0067                   |
| Login - Uncompressed        | 0.767 ± 0.0106         | 0.774 ± 0.0097                   |
| Data Transfer - Compressed  | 4.229 ± 0.0373         | 4.243 ± 0.0411                   |
| Data Transfer - Uncompressed| 1.989 ± 0.0223         | 1.994 ± 0.0143                   |

Table 2: Performance comparison between normal OpenSSH and privilege-separated OpenSSH. The results show that privilege separation does not impose a significant performance penalty.

## Related Work

- **Source Code Inspection and Auditing:** Static analysis methods can automatically detect security weaknesses in a program’s source code, such as buffer overruns and format string vulnerabilities [13, 27, 24].

- **Principle of Least Privilege:** This principle guides developers to design applications with minimal necessary privileges [22]. Operating system-level security mechanisms can reduce the privileges of applications but are unaware of an application’s internal state [1, 29, 18, 21]. Privilege separation addresses this by exposing only an unprivileged child to the adversary.

- **Other Applications:** Several applications, including Sendmail [2], Postfix [26], vsftpd [9], and popa3d [6], use privilege separation. OpenSSH’s implementation is more extensive and generic, demonstrating how to change the effective UID and retain privileges securely throughout the session.

- **Microkernel Design:** Privilege separation decomposes an application into subsystems with well-defined functionality, similar to a microkernel where subsystems follow principles of independence and integrity [14].

## Conclusion

Privilege separation is a concept that allows parts of an application to run without any privileges, thereby containing programming errors that could lead to privilege escalation. As a proof of concept, we implemented privilege separation in OpenSSH and demonstrated that past vulnerabilities leading to system compromise would have been contained. Additionally, there is no significant performance penalty when running OpenSSH with privilege separation enabled.

## Acknowledgments

We thank Solar Designer, Dug Song, David Wagner, and the anonymous reviewers for their helpful comments and suggestions.

## References

[1] Lee Badger, Daniel F. Sterne, David L. Sherman, Kenneth M. Walker, and Sheila A. Haghighat. A Domain and Type Enforcement UNIX Prototype. In Proceedings of the 5th USENIX Security Symposium, pages 127–140, June 1995.

[2] Mark E. Carson. Sendmail without the Superuser. In Proceedings of the 4th USENIX Security Symposium, October 1993.

[3] CERT/CC. CERT Advisory CA-2002-07 Double Free Bug in zlib Compression Library. http://www.cert.org/advisories/CA-2002-07.html, March 2002.

[4] CERT/CC. CERT Advisory CA-2002-18 OpenSSH Vulnerabilities in Challenge Response Handling. http://www.cert.org/advisories/CA-2002-18.html, June 2002.

[21] Niels Provos. Improving Host Security with System Call Policies. In Proceedings of the 12th USENIX Security Symposium, August 2003.

[22] Jerome H. Saltzer. Protection and the Control of Information in Multics. Communications of the ACM, 17(7):388–402, July 1974.

[23] Jerome H. Saltzer and Michael D. Schroeder. The Protection of Information in Computer Systems. In Proceedings of the IEEE 69, number 9, pages 1278–1308, September 1975.

[24] Umesh Shankar, Kunal Talwar, Jeffrey S. Foster, and David Wagner. Detecting Format String Vulnerabilities with Type Qualifiers. In Proceedings of the 10th USENIX Security Symposium, August 2001.

[25] W. Richard Stevens. Advanced Programming in the UNIX Environment. Addison-Wesley, 1992.

[26] Wietse Venema. Postfix Overview. http://www.postfix.org/motivation.html.

[27] David Wagner, Jeffrey S. Foster, Eric A. Brewer, and Alexander Aiken. A First Step Towards Automated Detection of Buffer Overrun Vulnerabilities. In Proceedings of the ISOC Symposium on Network and Distributed System Security, pages 3–17, February 2000.

[28] David A. Wagner. Janus: an Approach for Confinement of Untrusted Applications. Technical Report CSD-99-1056, University of California, Berkeley, 12, 1999.

[29] Kenneth M. Walker, Daniel F. Sterne, M. Lee Badger, Michael J. Petkac, David L. Shermann, and Karen A. Oostendorp. Confining Root Programs with Domain and Type Enforcement (DTE). In Proceedings of the 6th Usenix Security Symposium, July 1996.

[30] Dan S. Wallach, Dirk Balfanz, Drew Dean, and Edward W. Felten. Extensible Security Architectures for Java. 16th Symposium on Operating System Principles, pages 116–128, 1997.

[31] Michal Zalewski. Remote Vulnerability in SSH Daemon CRC32 Compensation Attack Detector. http://razor.bindview.com/publish/advisories/adv_ssh1crc.html, February 2001.

[5] Silvio Cesare. FreeBSD Security Advisory FreeBSD-SA-02:38.signed-error. http://archives.neohapsis.com/archives/freebsd/2002-08/0094.html, August 2002.

[6] Solar Designer. Design Goals for popa3d. http://www.openwall.com/popa3d/DESIGN.

[7] P. Deutsch. DEFLATE Compressed Data Format Specification version 1.3. RFC 1951, 1996.

[8] P. Deutsch and J-L. Gailly. ZLIB Compressed Data Format Specification version 3.3. RFC 1950, 1996.

[9] Chris Evans. Comments on the Overall Architecture of Vsftpd, from a Security Standpoint. http://vsftpd.beasts.org/, February 2001.

[10] Markus Friedl, Niels Provos, and William A. Simpson. Diffie-Hellman Group Exchange for the SSH Transport Layer Protocol. Internet Draft, January 2002. Work in progress.

[11] Li Gong, Marianne Mueller, Hemma Prafullchandra, and Roland Schemers. Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java Development Kit 1.2. USENIX Symposium on Internet Technologies and Systems, pages 103–112, 1997.

[12] Douglas Kilpatrick. Privman: A Library for Partitioning Applications. In Proceedings of the USENIX 2003 Annual Technical Conference, FREENIX track, June 2003.

[13] David Larochelle and David Evans. Statically Detecting Likely Buffer Overflow Vulnerabilities. In Proceedings of the 10th USENIX Security Symposium, August 2001.

[14] Jochen Liedtke. On μ-Kernel Construction. In Proceedings of the Symposium on Operating Systems Principles, pages 237–250, 1995.

[15] Theodore A. Linden. Operating System Structures to Support Security and Reliable Software. ACM Computing Surveys, 8(4):409–445, 1976.

[16] Sun Microsystems. XDR: External Data Representation. RFC 1014, June 1987.

[17] Todd C. Miller and Theo de Raadt. strlcpy and strlcat – Consistent, Safe, String Copy and Concatenation. In Proceedings of the 1999 USENIX Technical Conference, FREENIX track, June 1999.

[18] David S. Peterson, Matt Bishop, and Raju Pandey. A Flexible Containment Mechanism for Executing Untrusted Code. In Proceedings of the 11th USENIX Security Symposium, pages 207–225, August 2002.

[19] Joost Pol. OpenSSH Channel Code Off-By-One Vulnerability. http://online.securityfocus.com/bid/4241, March 2002.

[20] Niels Provos. OpenBSD Security Advisory: Select Boundary Condition. http://monkey.org/openbsd/archive/misc/0208/msg00482.html, August 2002.