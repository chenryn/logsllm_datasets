### Approach and Performance Trade-offs

The first approach, while potentially effective, sacrifices performance and efficiency by leaving resources idle. A more refined second approach involves the implementation of smarter scheduling. Based on the contention results from Section 4, the hypervisor can monitor VMs and attempt to schedule workloads that do not conflict. This strategy, often employed in multicore and multithreaded environments [6, 10, 29], uses statistical data and processor performance counters to identify workloads with conflicting resource usage. The scheduler then attempts to run these workloads at different times or on separate cores or packages to minimize contention, particularly for shared resources like the Last Level Cache (LLC).

### Experimental Results

Figure 11 illustrates the average runtimes of LLCProbe, bzip2, mcf, and sphinx benchmarks across nine machines. The baseline scenario has no traffic to the victim, while No-RFA and 512 RFA scenarios have a foreground request rate of 2000 requests per second (rps).

### Preventing Resource-Freeing Attacks (RFAs)

A final approach would be to prevent RFAs by detecting and blocking them. However, this is likely to be very challenging in most settings. RFAs do not necessarily exploit system vulnerabilities; instead, they can leverage legitimate functionalities, such as CGI scripts on a web server. These attacks are stealthy, requiring only a few requests per second to drive the victim to a resource bottleneck. Detecting and blocking RFA requests without preventing legitimate access to the resource would be difficult for both the provider and the victim.

### Related Work

Our research builds on previous studies that have examined performance interference in virtual machines, hardware and software techniques for improving performance isolation, side-channel attacks, and scheduler vulnerabilities.

#### Performance Interference

Several works have documented severe performance interference in cloud computing platforms [15, 22, 26, 34]. Our study focuses on worst-case interference in a controlled setting, measuring the impact of different workload pairs rather than two instances of the same workload. We also explore the effect of multicore scheduling by pinning VMs to specific cores.

#### Performance Isolation

Contention for cache and processor resources is a major cause of performance loss. Many projects have developed resource-aware CPU schedulers to avoid contention [6, 18, 38]. In cases of cache and network contention, these schedulers may place workloads on different packages to reduce interference. Similar work has been done at the cluster level to place jobs [30, 27, 16]. These systems aim to place non-interfering workloads together or even leave a processor idle if interference is significant, thereby reducing the need for and effectiveness of RFAs.

Beyond scheduling, software mechanisms can ensure performance isolation for various hardware resources, including cache [24], disk [11], memory bandwidth [32], and network [28]. These techniques reduce performance interference from contention and, if used non-work-conservatively, can eliminate the need for RFAs.

Additionally, low-level hardware changes have been proposed to better share memory bandwidth and processor caches [20, 23]. These mechanisms, similar to software isolation techniques, reduce contention and thus the need for RFAs.

#### Gaming Schedulers and Allocators

RFAs work by forcing the scheduler to context switch at much coarser granularities than normal. Similar techniques have been used to game schedulers in Linux [31] and Xen [37] to extend the timeslice of a thread. RFAs differ in that they convert an interactive workload into a CPU-bound workload, affecting the priority with which a process is scheduled.

#### Side-Channel Attacks

RFAs exploit the lack of isolation to boost performance. Several projects have demonstrated side-channel attacks through the shared LLC, which can extract information about co-resident virtual machines [25, 36, 35].

### Conclusions

Performance isolation remains a challenging goal in cloud computing environments. Despite extensive research on reducing contention, current cloud providers do not provide strong isolation due to cost and efficiency concerns. We have outlined a new threat: resource-freeing attacks (RFAs). These attacks are motivated by the fact that contention can lead to significant efficiency loss, directly increasing customer costs.

Our experiments on a local Xen testbed and Amazon EC2 show that, for certain benchmarks, a greedy customer can use RFAs to significantly reduce contention for a resource by manipulating a co-resident victim's workload. Observed gains of up to 13% on live EC2 instances suggest that RFAs can offer improvements for real applications as well.

This is problematic for both the direct victims of RFAs (who incur increased costs due to spurious requests) and the cloud provider, which loses overall efficiency due to the load caused by malicious gaming of resource allocations. We leave the detailed exploration of improved resource allocation mechanisms that de-incentivize or completely prevent RFAs as an open question.

### Acknowledgments

We thank Ari Juels for the initial observations that motivated this work and Kevin Bowers and Ari Juels for many helpful discussions about resource-freeing attacks. This work was supported in part by NSF grant 1065134 and a gift from EMC. Swift has a significant financial interest in Microsoft.

### References

[1] Specjbb2005. http://www.spec.org/jbb2005/.

[2] Graph 500. Graph 500 benchmark 1. http://www.graph500.org/.

[3] Amazon Ltd. Amazon Elastic Compute Cloud (EC2). http://aws.amazon.com/ec2/.

[4] Paul Barham, Boris Dragovic, Keir Fraser, Steven Hand, Tim Harris, Alex Ho, Rolf Neugebauer, Ian Pratt, and Andrew Warfield. Xen and the Art of Virtualization. In SOSP, 2003.

[5] Sean K. Barker and Prashant Shenoy. Empirical Evaluation of Latency-Sensitive Application Performance in the Cloud. In MMSys, 2010.

[6] M. Bhadauria and S. A. McKee. An Approach to Resource-Aware Co-scheduling for CMPs. In ICS, 2010.

[7] L. Cherkasova, D. Gupta, and A. Vahdat. Comparison of the Three CPU Schedulers in Xen. SIGMETRICS Performance Evaluation Review, 25(2), September 2007.

[8] Scott A. Crosby and Dan S. Wallach. Denial of Service via Algorithmic Complexity Attacks. In Usenix Security, 2003.

[9] Jake Edge. Denial of Service via Hash Collisions. http://lwn.net/Articles/474912/, January 2012.

[10] Alexandra Fedorova, Margo Seltzer, and Michael D. Smith. Improving Performance Isolation on Chip Multiprocessors via an Operating System Scheduler. In PACT, 2007.

[11] Ajay Gulati, Arif Merchant, and Peter J. Varma. Mclock: Handling Throughput Variability for Hypervisor I/O Scheduling. In OSDI, 2010.

[12] Diwaker Gupta, Ludmila Cherkasova, Rob Gardner, and Amin Vahdat. Enforcing Performance Isolation Across Virtual Machines in Xen. In Middleware, 2006.

[26] J. Schad, J. Dittrich, and J. Quiane-Ruiz. Runtime Measurements in the Cloud: Observing, Analyzing, and Reducing Variance. In PVLDB, 2010.

[27] B. Sharma, R. Prabhakar, S. Lim, M. T. Kandemir, and C. R. Das. MrOrchestrator: A Fine-Grained Resource Orchestration Framework for Hadoop MapReduce. Technical Report CSE-12-001, Pennsylvania State University, January 2012.

[28] Alan Shieh, Srikanth Kandula, Albert Greenberg, and Changhoon Kim. Seawall: Performance Isolation for Cloud Datacenter Networks. In HotCloud, 2010.

[29] Allan Snavely, Dean M. Tullsen, and Geoff Voelker. Symbiotic Job Scheduling with Priorities for a Simultaneous Multithreading Processor. In SIGMETRICS, 2002.

[30] S. Srikantaiah, A. Kansal, and F. Zhao. Energy Aware Consolidation for Cloud Computing. In Proc. HotPower Workshop Power Aware Comput. Syst, 2008.

[31] D. Tsafrir, Y. Etsion, and D. G. Feitelson. Secretly Monopolizing the CPU Without Superuser Privileges. In Usenix Security, 2007.

[32] Ben Verghese, Anoop Gupta, and Mendel Rosenblum. Performance Isolation: Sharing and Isolation in Shared-Memory Multiprocessors. In ASPLOS, pages 181–192, 1998.

[33] C. A. Waldspurger. Memory Resource Management in VMware ESX Server. In OSDI, 2002.

[34] Guohui Wang and T. S. Eugene Ng. The Impact of Virtualization on Network Performance of Amazon EC2 Data Center. In IEEE INFOCOM, 2010.

[35] Yunjing Xu, Michael Bailey, Farnam Jahanian, Kaustubh Joshi, Matti Hiltunen, and Richard Schlichting. An Exploration of L2 Cache Covert Channels in Virtualized Environments. In CCSW, pages 29–40, 2011.

[36] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter. HomeAlone: Co-Residency Detection in the Cloud via Side-Channel Analysis. In Security and Privacy IEEE Symposium, 2011.

[37] F. Zhou, M. Goel, P. Desnoyers, and R. Sundaram. Scheduler Vulnerabilities and Attacks in Cloud Computing. arXiv:1103.0759v1 [cs.DC], March 2011.

[38] Sergey Zhuravlev, Sergey Blagodurov, and Alexandra Fedorova. Addressing Shared Resource Contention in Multicore Processors via Scheduling. In ASPLOS, 2010.