### Design Process and Evaluation

A straightforward design process is illustrated in Figure 4. This process incorporates all the techniques discussed earlier, culminating in a check for all nonzero reactions as described by Equation (35). The design process was tested and verified using MATLAB code. Example fast algorithms were evaluated with this code. For the N=64 case, a decimation-in-time FFT from [Section V, 14] was selected.

All parity weight choices for vector \( b \) reported in earlier papers [2-8] were examined. As expected, all these choices provided successful detection for single computational errors. The real weight vectors used in [6,7] resulted in minimum and maximum gains from stages' inputs to the parity value of 0.015625 and 32.50, respectively. The choice employed in [8] produced gains of 0.866614 and 52.99299.

For comparison with the DCT transform, a set of typical error patterns is presented in Figure 5a. The complete impact of errors is available in the array \( V \), as defined in Equation (34). A few selected cases are extracted for this figure, with the stage and line of the input error injection point indicated on each trace. The output error patterns are complex numbers, products of Nth roots of unity, and their magnitudes, as plotted in the four panels of Figure 5a, will be 1. The locations of the errors are the key indicators in this figure. However, useful parity weights that detect single error patterns must also be sensitive to the phases of the patterns, which are not visible in the magnitude plots.

### Fast Discrete Cosine Transform (DCT) Algorithms

Numerous 2-D fast discrete cosine transform algorithms have been presented in the literature, with a sampling including [18-23]. Their matrix factorization depends on the 2-D input array expressed as a vector. A particularly efficient algorithm by Feig and Winograd [21] was implemented for N = 64 (8x8, 2-D input data), employing n=5 stages. Interestingly, none of the previously successful parity weight vectors \( b \) for FFT situations provided complete single-error coverage.

The typical error patterns caused by single error inputs to four different stages are displayed in Figure 5b. The error patterns in this case have real values with varying magnitudes. The variability of the error pattern values, compared to those of the FFT, is striking. It is clear why the parity weighting values based on FFT protection requirements should not be applicable. It was determined that complex roots of unity were needed to ensure complete single error coverage. The weights are defined by the generic equation:

\[ b = \left( e^{-j \frac{2\pi k}{N}} \right); \quad k = 0, 1, \ldots, (N - 1) \]

**Equation (36): Parity weight vector for 2-D DCT algorithm**

The minimum and maximum error gains from any stage to the parity output are 0.000269966 and 28.0408, respectively.

### Conclusions

Error detection methods sensitive to single temporary failures in fast unitary transforms were studied using computer algebra programs. Most fast transforms are already available in these computer packages. Such programs, operating on a workstation, can quickly provide code weighting alternatives using simple heuristics. Several design requirements can be balanced, allowing multiple criteria to be assessed simultaneously. The computer explores the design space under the guidance of a fault tolerance designer. The impact of single errors on the transformâ€™s outputs is immediately visible, and error dynamic ranges can be measured. Syndrome detection thresholds can be evaluated quickly from these measurements.

### References

1. D. F. Elliot and K. R. Rao, *Fast Transforms Algorithms, Analyses, Applications*. New York: Academic Press, 1982.
2. J. Y. Jou and J. A. Abraham, "Fault-Tolerant FFT Networks," *IEEE Transactions on Computers*, vol. 37, pp. 548-561, May 1988.
3. D. L. Tao, C. R. P. Hartmann, and Y. S. Chen, "A Novel Concurrent Error Detection Scheme for FFT Networks," *Digest of Papers, The 20th International Symposium on Fault-Tolerant Computing (FTCS-20)*, Newcastle Upon Tyne, UK, pp. 114-121, June 1990.
4. D. L. Tao, C. R. P. Hartmann, and Y. S. Chen, "A Novel Concurrent Error Detection Scheme for FFT Networks," *IEEE Transactions on Parallel and Distributed Systems*, vol. 4, pp. 198-221, February 1993.
5. F. Lombardi and J. C. Muzio, "Concurrent Error Detection and Fault Location in an FFT Architecture," *IEEE Journal of Solid-state Circuits*, vol. 27, pp. 728-736, May 1992.
6. C. G. Oh and H. Y. Youn, "On Concurrent Error Detection, Location and Correction of FFT Networks," *Digest of Papers, The Twenty-Third International Symposium on Fault-Tolerant Computing (FTCS-23)*, Toulouse, France, pp. 596-605, 1993.
7. C. G. Oh, H. Y. Youn, and V. K. Raj, "An Efficient Algorithm-Based Concurrent Error Detection for FFT Networks," *IEEE Transactions on Computers*, vol. 44, pp. 1157-1162, September 1995.
8. S. J. Wang and N. K. Jha, "Algorithm-Based Fault Tolerance for FFT Networks," *IEEE Transactions on Computers*, vol. 43, pp. 849-854, July 1994.
9. J. L. Goldberg, *Matrix Theory with Applications*. New York: McGraw-Hill, 1991.
10. C. Van Loan, *Computational Frameworks for the Fast Fourier Transform*. Philadelphia, Pennsylvania: Society for Applied Mathematics, 1992.
11. R. Tolimieri, M. An, and C. Lu, *Algorithms for Discrete Fourier Transform and Convolution*. New York: Springer-Verlag, 1989.
12. M. C. Pease, "An Adaptation of the Fast Fourier Transform for Parallel Processing," *Journal of the Association for Computing Machinery*, vol. 15, pp. 252-264, April 1968.
13. M. Drubin, "Kronecker Product Factorization of the FFT Matrix," *IEEE Transactions on Computers*, vol. C-20, pp. 590-593, May 1971.
14. H. Sloate, "Matrix Representations for Sorting and the Fast Fourier Transform," *IEEE Transactions on Circuits and Systems*, vol. CAS-21, pp. 109-116, January 1974.
15. G. R. Redinbo, "Generalized Algorithm-Based Fault Tolerance: Error Correction via Kalman Estimation," *IEEE Transactions on Computers*, vol. 47, pp. 639-655, June 1998.
16. B. W. Johnson, *Design and Analysis of Fault-Tolerant Digital Systems*. Reading, Massachusetts: Addison-Wesley Publishing Company, 1989.
17. I. N. Herstein, *Topics in Algebra*. New York: Blaisdell Publishing Company, 1964.
18. K. A. Kamangar and K. R. Rao, "Fast Algorithms for the 2-D Discrete Cosine Transform," *IEEE Transactions on Computers*, vol. C-31, pp. 899-906, September 1982.
19. S. C. Chan and K. L. Ho, "A New Two-Dimensional Fast Cosine Transform Algorithm," *IEEE Transactions on Signal Processing*, vol. 39, pp. 481-485, February 1991.
20. N. I. Cho and S. U. Lee, "Fast Algorithm and Implementation of 2-D Discrete Cosine Transform," *IEEE Transactions on Circuits and Systems*, vol. 38, pp. 297-305, March 1991.
21. E. Feig and S. Winograd, "Fast Algorithms for the Discrete Cosine Transform," *IEEE Transactions on Signal Processing*, vol. 40, pp. 2174-2193, September 1992.
22. J. Kwak and J. You, "One- and Two-Dimensional Constant Geometry Fast Cosine Transform Algorithms and Architectures," *IEEE Transactions on Signal Processing*, vol. 47, pp. 2023-2097, July 1999.
23. S. D. Kim, S. K. Jang, M. J. Kim, and J. B. Ra, "Efficient Block-Based Coding of Noise Images by Combining Pre-Filtering and DCT," *Proceedings of the 1999 IEEE International Symposium on Circuits and Systems VLSI*, pp. 37-40, Orlando, FL., May 1999.
24. N. K. Bose, *Digital Filters Theory and Application*. New York: North Holland, 1985.

### Figures

- **Figure 1**: Fast Transform via Matrix Factorization
- **Figure 2**: Protection of Fast Unitary Transform Implementations
- **Figure 3**: Modeling Fault Produced Errors
- **Figure 4**: Code Design Methodology
- **Figure 5**: Output Error Patterns for FFT and Fast DCT Algorithms

This revised text aims to be more coherent, clear, and professional, with improved formatting and structure.