# Table of Contents

## Chapter 5: Bypassing Client-Side Controls
- **Transmitting Data Via the Client**
  - Hidden Form Fields
  - HTTP Cookies
  - URL Parameters
  - The Referer Header
  - Opaque Data
  - The ASP.NET ViewState
- **Capturing User Data: HTML Forms**
  - Length Limits
  - Script-Based Validation
  - Disabled Elements
- **Capturing User Data: Browser Extensions**
  - Common Browser Extension Technologies
  - Approaches to Browser Extensions
  - Intercepting Traffic from Browser Extensions
  - Decompiling Browser Extensions
  - Attaching a Debugger
  - Native Client Components
- **Handling Client-Side Data Securely**
  - Transmitting Data Via the Client
  - Validating Client-Generated Data
  - Logging and Alerting
- **Summary**
- **Questions**

## Chapter 6: Attacking Authentication
- **Authentication Technologies**
- **Design Flaws in Authentication Mechanisms**
  - Bad Passwords
  - Brute-Forcible Login
  - Verbose Failure Messages
  - Vulnerable Transmission of Credentials
  - Password Change Functionality
  - Forgotten Password Functionality
  - “Remember Me” Functionality
  - User Impersonation Functionality
  - Incomplete Validation of Credentials
  - Nonunique Usernames
  - Predictable Usernames
  - Predictable Initial Passwords
  - Insecure Distribution of Credentials
- **Implementation Flaws in Authentication**
  - Fail-Open Login Mechanisms
  - Defects in Multistage Login Mechanisms
  - Insecure Storage of Credentials
- **Securing Authentication**
  - Use Strong Credentials
  - Handle Credentials Secretively
  - Validate Credentials Properly
  - Prevent Information Leakage
  - Prevent Brute-Force Attacks
  - Prevent Misuse of the Password Change Function
  - Prevent Misuse of the Account Recovery Function
  - Log, Monitor, and Notify
- **Summary**
- **Questions**

## Chapter 7: Attacking Session Management
- **The Need for State**
- **Alternatives to Sessions**
- **Weaknesses in Token Generation**
  - Meaningful Tokens
  - Predictable Tokens
  - Encrypted Tokens
- **Weaknesses in Session Token Handling**
  - Disclosure of Tokens on the Network
  - Disclosure of Tokens in Logs
  - Vulnerable Mapping of Tokens to Sessions
  - Vulnerable Session Termination
  - Client Exposure to Token Hijacking
  - Liberal Cookie Scope
- **Securing Session Management**
  - Generate Strong Tokens
  - Protect Tokens Throughout Their Life Cycle
  - Log, Monitor, and Alert
- **Summary**
- **Questions**

## Chapter 8: Attacking Access Controls
- **Common Vulnerabilities**
  - Completely Unprotected Functionality
  - Identifier-Based Functions
  - Multistage Functions
  - Static Files
  - Platform Misconfiguration
  - Insecure Access Control Methods
- **Attacking Access Controls**
  - Testing with Different User Accounts
  - Testing Multistage Processes
  - Testing with Limited Access
  - Testing Direct Access to Methods
  - Testing Controls Over Static Resources
  - Testing Restrictions on HTTP Methods
- **Securing Access Controls**
  - A Multilayered Privilege Model
- **Summary**
- **Questions**

## Chapter 9: Attacking Data Stores
- **Injecting into Interpreted Contexts**
  - Bypassing a Login
  - Injecting into SQL
    - Exploiting a Basic Vulnerability
    - Injecting into Different Statement Types
    - Finding SQL Injection Bugs
    - Fingerprinting the Database
    - The UNION Operator
    - Extracting Useful Data
      - Extracting Data with UNION
      - Bypassing Filters
      - Second-Order SQL Injection
      - Advanced Exploitation
      - Beyond SQL Injection: Escalating the Database Attack
      - Using SQL Exploitation Tools
      - SQL Syntax and Error Reference
      - Preventing SQL Injection
  - Injecting into NoSQL
    - Injecting into MongoDB
  - Injecting into XPath
    - Subverting Application Logic
      - Informed XPath Injection
      - Blind XPath Injection
      - Finding XPath Injection Flaws
      - Preventing XPath Injection
  - Injecting into LDAP
    - Exploiting LDAP Injection
    - Finding LDAP Injection Flaws
    - Preventing LDAP Injection
- **Summary**
- **Questions**

## Chapter 10: Attacking Back-End Components
- **Injecting OS Commands**
  - Example 1: Injecting Via Perl
  - Example 2: Injecting Via ASP
  - Injecting Through Dynamic Execution
  - Finding OS Command Injection Flaws
  - Finding Dynamic Execution Vulnerabilities
  - Preventing OS Command Injection
  - Preventing Script Injection Vulnerabilities
- **Manipulating File Paths**
  - Path Traversal Vulnerabilities
  - File Inclusion Vulnerabilities
- **Injecting into XML Interpreters**
  - Injecting XML External Entities
  - Injecting into SOAP Services
  - Finding and Exploiting SOAP Injection
  - Preventing SOAP Injection
- **Injecting into Back-end HTTP Requests**
  - Server-side HTTP Redirection
  - HTTP Parameter Injection
- **Injecting into Mail Services**
  - E-mail Header Manipulation
  - SMTP Command Injection
  - Finding SMTP Injection Flaws
  - Preventing SMTP Injection
- **Summary**
- **Questions**

## Chapter 11: Attacking Application Logic
- **The Nature of Logic Flaws**
  - Real-World Logic Flaws
    - Example 1: Asking the Oracle
    - Example 2: Fooling a Password Change Function
    - Example 3: Proceeding to Checkout
    - Example 4: Rolling Your Own Insurance
    - Example 5: Breaking the Bank
    - Example 6: Beating a Business Limit
    - Example 7: Cheating on Bulk Discounts
    - Example 8: Escaping from Escaping
    - Example 9: Invalidating Input Validation
    - Example 10: Abusing a Search Function
    - Example 11: Snarfing Debug Messages
    - Example 12: Racing Against the Login
- **Avoiding Logic Flaws**
- **Summary**
- **Questions**

## Chapter 12: Attacking Users: Cross-Site Scripting (XSS)
- **Varieties of XSS**
  - Reflected XSS Vulnerabilities
  - Stored XSS Vulnerabilities
  - DOM-Based XSS Vulnerabilities
- **XSS Attacks in Action**
  - Real-World XSS Attacks
  - Payloads for XSS Attacks
  - Delivery Mechanisms for XSS Attacks
- **Finding and Exploiting XSS Vulnerabilities**
  - Finding and Exploiting Reflected XSS Vulnerabilities
  - Finding and Exploiting Stored XSS Vulnerabilities
  - Finding and Exploiting DOM-Based XSS Vulnerabilities
- **Preventing XSS Attacks**
  - Preventing Reflected and Stored XSS
  - Preventing DOM-Based XSS
- **Summary**
- **Questions**

## Chapter 13: Attacking Users: Other Techniques
- **Inducing User Actions**
  - Request Forgery
  - UI Redress
- **Capturing Data Cross-Domain**
  - Capturing Data by Injecting HTML
  - Capturing Data by Injecting CSS
  - JavaScript Hijacking
  - The Same-Origin Policy Revisited
    - The Same-Origin Policy and Browser Extensions
    - The Same-Origin Policy and HTML5
    - Crossing Domains with Proxy Service Applications
- **Other Client-Side Injection Attacks**
  - HTTP Header Injection
  - Cookie Injection
  - Open Redirection Vulnerabilities
  - Client-Side SQL Injection
  - Client-Side HTTP Parameter Pollution
- **Local Privacy Attacks**
  - Persistent Cookies
  - Cached Web Content
  - Browsing History
  - Autocomplete
  - Flash Local Shared Objects
  - Silverlight Isolated Storage
  - Internet Explorer userData
  - HTML5 Local Storage Mechanisms
  - Preventing Local Privacy Attacks
- **Attacking ActiveX Controls**
  - Finding ActiveX Vulnerabilities
  - Preventing ActiveX Vulnerabilities
- **Attacking the Browser**
  - Logging Keystrokes
  - Stealing Browser History and Search Queries
  - Enumerating Currently Used Applications
  - Port Scanning
  - Attacking Other Network Hosts
    - Exploiting Non-HTTP Services
    - Exploiting Browser Bugs
    - DNS Rebinding
    - Browser Exploitation Frameworks
    - Man-in-the-Middle Attacks
- **Summary**
- **Questions**

## Chapter 14: Automating Customized Attacks
- **Uses for Customized Automation**
- **Enumerating Valid Identifiers**
  - The Basic Approach
  - Detecting Hits
  - Scripting the Attack
  - JAttack
- **Harvesting Useful Data**
- **Fuzzing for Common Vulnerabilities**
- **Putting It All Together: Burp Intruder**
- **Barriers to Automation**
  - Session-Handling Mechanisms
  - CAPTCHA Controls
- **Summary**
- **Questions**

## Chapter 15: Exploiting Information Disclosure
- **Exploiting Error Messages**
  - Script Error Messages
  - Stack Traces
  - Informative Debug Messages
  - Server and Database Messages
- **Using Public Information**
  - Engineering Informative Error Messages
  - Gathering Published Information
  - Using Inference
- **Preventing Information Leakage**
  - Use Generic Error Messages
  - Protect Sensitive Information
  - Minimize Client-Side Information Leakage
- **Summary**
- **Questions**

## Chapter 16: Attacking Native Compiled Applications
- **Buffer Overflow Vulnerabilities**
  - Stack Overflows
  - Heap Overflows
  - “Off-by-One” Vulnerabilities
  - Detecting Buffer Overflow Vulnerabilities
- **Summary**
- **Questions**