# MAppGraph: Mobile-App Classification on Encrypted Network Traffic using Deep Graph Convolutional Neural Networks

## 5.3.4 Impact of Slice Duration on Cross-Correlation in Graph Construction

In this experiment, we evaluate the impact of the slice duration used to determine the communication correlation among destination services connected by a mobile app. The shorter the slice duration, the fewer the edges in the graphs. Conversely, longer slice durations result in more fully connected graphs. In both scenarios, the communication correlation can affect MAppGraph's ability to learn the communication behavior of mobile apps. Table 5 presents the performance of different techniques with varying slice durations. 

### Table 5: Impact of Slice Duration on Performance of Classification Models

| tslice (minutes) | Technique | Precision | Recall | F1-Score | Accuracy |
|------------------|-----------|-----------|--------|----------|----------|
| 1                | Enhanced  | 0.7773    | 0.9342 | 0.8414   | 0.9353   |
| 1                | FlowPrint | 0.8759    | 0.9364 | 0.8759   | 0.9364   |
| 1                | MAppGraph | 0.7325    | 0.9327 | 0.8112   | 0.9335   |
| 5                | Enhanced  | 0.8341    | 0.9346 | 0.8341   | 0.9346   |
| 5                | FlowPrint | 0.8759    | 0.9364 | 0.8759   | 0.9364   |
| 5                | MAppGraph | 0.7176    | 0.9328 | 0.8065   | 0.9337   |
| 10               | Enhanced  | 0.8275    | 0.9347 | 0.8275   | 0.9347   |
| 10               | FlowPrint | 0.8759    | 0.9364 | 0.8759   | 0.9364   |
| 10               | MAppGraph | 0.7325    | 0.9327 | 0.8112   | 0.9335   |

The slice duration is used to compute the weight of graph edges and does not affect the performance of MLP, which only uses traffic features of the nodes (i.e., the destination services that mobile apps connect to). Therefore, MLP is not included in this experiment.

Interestingly, the results show that performance generally increases with an increase in slice duration. While FlowPrint shows a significant performance gap (up to 13%) between tslice = 1 second and tslice = 10 seconds, MAppGraph exhibits a much smaller difference (less than 1%). This suggests that MAppGraph is less sensitive to the choice of slice duration, reducing the effort required to determine the optimal duration for best performance.

## 5.3.5 Performance with and without Using IP Addresses in Feature Vectors

As previously discussed, IP addresses of destination services may change due to load balancing. In this experiment, we train MAppGraph without using the IP addresses of destination services in the feature vectors. Figure 9 compares the performance of MAppGraph with and without IP addresses in feature vectors. The results show a slight decrease in performance when IP addresses are not used. However, this performance is still acceptable as the model does not need retraining when deployed in different network domains of the destination services. Notably, MAppGraph's performance without IP addresses remains significantly better than that of FlowPrint, demonstrating the effectiveness of the proposed technique.

### Figure 9: Performance of MAppGraph with and without Using IP Addresses in Feature Vectors

| Metric         | With IP Addresses | Without IP Addresses |
|----------------|-------------------|----------------------|
| Precision      | 0.9075            | 0.8341               |
| Recall         | 0.9346            | 0.8894               |
| F1-Score       | 0.8296            | 0.8671               |
| Accuracy       | 0.9174            | 0.8175               |

## 5.3.6 Classification of Mobile Apps with Similar Functionalities

In this experiment, we evaluate MAppGraph's performance when classifying apps with similar functionalities. We created two datasets, each containing 17 apps. The first dataset includes 17 audio and music player apps (e.g., Spotify and SoundCloud), which should have similar traffic features such as packet size and flow size. The second dataset includes apps with different functionalities. We trained two DGCNN models and tested them on the two datasets, denoted as SIM-APP and DIFF-APP, respectively. Figure 10 presents the performance of these two models.

### Figure 10: Classification of Apps with Similar and Different Functionalities

| Metric         | SIM-APP | DIFF-APP |
|----------------|---------|----------|
| Precision      | 0.905   | 0.91     |
| Recall         | 0.91    | 0.92     |
| F1-Score       | 0.915   | 0.93     |
| Accuracy       | 0.92    | 0.94     |

As expected, SIM-APP has lower performance compared to DIFF-APP. The model trained on the dataset with different functionalities (DIFF-APP) achieves 0.9750 for all performance metrics. However, the performance degradation when similar apps are present in the dataset is not significant (i.e., 4%). This demonstrates that considering cross-correlation among the services used by the apps and combining it with traffic features (i.e., information extracted from packet headers) as attributes of graph nodes allows accurate differentiation of mobile apps even if they have similar functionalities.

## 5.3.7 Performance with Different Number of Apps

We evaluate the performance of MAppGraph with different numbers of apps. We randomly selected a number of apps from the original dataset to train and test the model. Figure 11 shows the results, indicating that the performance of the techniques degrades as the number of apps increases. This is expected because a higher number of apps increases the likelihood of similar behavior. The results also show that the performance of MLP, AppScanner, and FlowPrint degrades quickly, resulting in a large margin between the smallest and highest number of apps. In contrast, the performance of the DGCNN model decreases slightly and still achieves high performance even with the highest number of apps in the dataset, demonstrating the effectiveness of MAppGraph.

### Figure 11: Performance of Techniques w.r.t. Number of Apps

| Number of Apps | Metric  | MLP | DGCNN | FlowPrint | AppScanner |
|----------------|---------|-----|-------|-----------|------------|
| 10             | Precision | 0.91 | 0.95  | 0.88      | 0.90       |
| 10             | Recall    | 0.92 | 0.96  | 0.89      | 0.91       |
| 10             | F1-Score  | 0.93 | 0.97  | 0.90      | 0.92       |
| 10             | Accuracy  | 0.94 | 0.98  | 0.91      | 0.93       |
| 100            | Precision | 0.80 | 0.90  | 0.75      | 0.80       |
| 100            | Recall    | 0.82 | 0.92  | 0.76      | 0.81       |
| 100            | F1-Score  | 0.84 | 0.94  | 0.77      | 0.82       |
| 100            | Accuracy  | 0.86 | 0.96  | 0.78      | 0.83       |

## 5.3.8 Discussion on Detection of Unseen/Unidentified Apps

While the proposed technique primarily focuses on mobile app classification, it can also be adapted for detecting unseen or unidentified apps. The output of the softmax layer (i.e., the output layer of the DGCNN architecture) for class decision is a probability, and the class with the highest probability is selected. This probability is considered the confidence of the model in deciding whether the traffic sample belongs to the selected app. By comparing this confidence with a predefined threshold (e.g., 0.5), we can confirm whether the app is unseen or unidentified. A more advanced approach using unsupervised learning, such as graph clustering, could also be employed. Such an approach does not require a large labeled dataset, thus reducing the effort required for data labeling. This is an area for future work.

## 6 Conclusion

In this paper, we presented MAppGraph, a novel technique for mobile app classification that can handle encrypted traffic, dynamic communication behavior, and the implementation nature of mobile apps. We developed a method to process mobile traffic and construct communication behavior graphs that consider the cross-correlation among the services connected by the apps and traffic features, which are useful for differentiating mobile apps. We developed a DGCNN model capable of learning the diverse communication behavior of mobile apps from a large number of graphs. We collected traffic for 101 Android apps, each with more than 30 hours of traffic for the experiments. Extensive experiments with various scenarios compared the performance of MAppGraph with a traditional deep learning model (MLP) and two state-of-the-art techniques (AppScanner and FlowPrint). The experimental results show that MAppGraph outperforms the baseline techniques with a performance improvement of up to 20% in terms of Precision, Recall, F1-Score, and Accuracy. With high performance and fast execution, MAppGraph enables better mobile security by using it in anomaly detection, automated vulnerability patching of mobile apps, and network management tasks such as dynamic resource allocation and traffic engineering.

## Acknowledgments

This work was partially supported by the Tan Tao University Foundation for Science and Technology Development under Grant No. TTU.RS.19.102.023.

## References

[1] Khaled Al-Naami et al. 2016. Adaptive Encrypted Traffic Fingerprinting with Bi-Directional Dependence. In Proc. 32nd Annual Conference on Computer Security Applications (ACSAC '16). Los Angeles, CA, USA, 177–188.
[2] Blake Anderson et al. 2018. Deciphering malware’s use of TLS (without decryption). J Comput Virol Hack Tech 14 (Aug. 2018).
[3] Blake Anderson and David McGrew. 2016. Identifying Encrypted Malware Traffic with Contextual Flow Data. In 2016 ACM Workshop on Artificial Intelligence and Security. Vienna, Austria, 35–46.
[4] Noah J. Apthorpe, Dillon Reisman, Srikanth Sundaresan, Arvind Narayanan, and Nick Feamster. 2017. Spying on the Smart Home: Privacy Attacks and Defenses on Encrypted IoT Traffic. CoRR abs/1708.05044 (2017).
[5] Bram Bonne. 2021. An Update on Android TLS Adoption. https://android-developers.googleblog.com/2019/12/an-update-on-android-tls-adoption.html. Online; accessed 30 April 2021.
[6] Joan Bruna, Wojciech Zaremba, Arthur Szlam, and Yann Lecun. 2014. Spectral networks and locally connected networks on graphs. In International Conference on Learning Representations (ICLR2014). Banff, Canada.
[7] Francisco M. Castro, Manuel J. Marín-Jiménez, Nicolás Guil, Cordelia Schmid, and Karteek Alahari. 2018. End-to-End Incremental Learning. In 15th European Conference on Computer Vision (ECCV 2018). Munich, Germany, 241–257.
[8] Fenxiao Chen, Yun-Cheng Wang, Bin Wang, and C.-C. Jay Kuo. 2020. Graph representation learning: a survey. APSIPA Transactions on Signal and Information Processing 9 (2020), e15. https://doi.org/10.1017/ATSIP.2020.13
[9] Yi Chen, Wei You, Yeonjoon Lee, Kai Chen, XiaoFeng Wang, and Wei Zou. 2017. Mass Discovery of Android Traffic Imprints through Instantiated Partial Execution. In Proc. 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS '17). Dallas, Texas, USA, 815–828.
[10] Z. Chen, K. He, J. Li, and Y. Geng. 2017. Seq2Img: A sequence-to-image based approach towards IP traffic classification using convolutional neural networks. In 2017 IEEE International Conference on Big Data. Boston, MA, USA, 1271–1276.
[11] Zhengyang Chen, Bowen Yu, Yu Zhang, Jianzhong Zhang, and Jingdong Xu. 2016. Automatic Mobile Application Traffic Identification by Convolutional Neural Networks. In 2016 IEEE Trustcom/BigDataSE/ISPA. Tianjin, China, 301–307.
[12] Yeongrak Choi, Jae Yoon Chung, Byungchul Park, and James Won-Ki Hong. 2012. Automated Classifier Generation for Application-level Mobile Traffic Identification. In 2012 IEEE Network Operations and Management Symposium. Maui, HI, USA, 1075–1081.
[13] Shuaifu Dai, Alok Tongaonkar, Xiaoyin Wang, Antonio Nucci, and Dawn Song. 2013. NetworkProfiler: Towards automatic fingerprinting of Android apps. In 2013 Proceedings IEEE INFOCOM. Turin, Italy, 809–817.
[14] Manh Tuan Do, Noseong Park, and Kijung Shin. 2020. Two-stage Training of Graph Neural Networks for Graph Classification. arXiv e-prints (Nov. 2020).
[15] David Duvenaud, Dougal Maclaurin, Jorge Aguilera-Iparraguirre, Rafael Gomez-Bombarelli, Timothy Hirzel, Alan Aspuru-Guzik, and Ryan P. Adams. 2015. Convolutional Networks on Graphs for Learning Molecular Fingerprints. In Twenty-ninth Conference on Neural Information Processing Systems. Montreal, Canada.
[16] A. S. Iliyasu and H. Deng. 2020. Semi-Supervised Encrypted Traffic Classification With Deep Convolutional Generative Adversarial Networks. IEEE Access 8 (2020).
[17] Paul Jaccard. 1912. The Distribution of the Flora in the Alpine Zone. New Phytologist 11, 2 (Feb. 1912).
[18] Peter Jonsson, Stephen Carson, Jasmeet Singh Sethi, Mats Arvedson, Ritva Svenningsson, Per Lindberg, Kati Öhman, and Patrik Hedlund. 2017. Ericsson Mobility Report. Technical Report. Ericsson.
[19] Diederik P. Kingma and Jimmy Ba. 2015. Adam: A Method for Stochastic Optimization. In 3rd International Conference on Learning Representations (ICLR 2015). San Diego, CA, USA.
[20] Baris Kurt, Engin Zeydan, Utku Yabas, Ilyas Alper Karatepe, Gunes Karabulut Kurt, and Ali Taylan Cemgil. 2016. A Network Monitoring System for High Speed Network Traffic. In 2016 13th Annual IEEE International Conference on Sensing, Communication, and Networking (SECON). London, UK.
[21] Junhyun Lee, Inyeop Lee, and Jaewoo Kang. 2019. Self-Attention Graph Pooling. In Proc. International Conference on Machine Learning. Long Beach, USA.
[22] Jingyi Liao, Sin G. Teo, Partha Pratim Kundu, and Tram Truong-Huu. 2021. ENAD: An Ensemble Framework for Unsupervised Network Anomaly Detection. In Proc. IEEE CSR 2021. Virtual Conference.
[23] Martina Lindorfer, Matthias Neugschwandtner, Lukas Weichselbaum, Yanick Fratantonio, Victor van der Veen, and Christian Platzer. 2014. ANDRUBIS – 1,000,000 Apps Later: A View on Current Android Malware Behaviors. In 2014 Third International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS). Wroclaw, Poland, 3–17.
[24] M. Lopez-Martin, B. Carro, A. Sanchez-Esguevillas, and J. Lloret. 2017. Network Traffic Classifier With Convolutional and Recurrent Neural Networks for Internet of Things. IEEE Access 5 (2017), 18042–18050.
[25] Mohammad Lotfollahi, Mahdi Jafari Siavoshani, Ramin Shirali Hossein Zade, and Mohammdsadegh Saberian. 2020. Deep packet: a novel approach for encrypted traffic classification using deep learning. Soft Computing 24 (Feb. 2020).
[26] Yair Meidan, Michael Bohadana, Asaf Shabtai, Juan David Guarnizo, Martín Ochoa, Nils Ole Tippenhauer, and Yuval Elovici. 2017. ProfilIoT: A Machine Learning Approach for IoT Device Identification Based on Network Traffic Analysis. In Proc. Symposium on Applied Computing (SAC '17). Marrakech, Morocco.
[27] Markus Miettinen, Samuel Marchal, Ibbad Hafeez, N. Asokan, Ahmad-Reza Sadeghi, and Sasu Tarkoma. 2017. IoT SENTINEL: Automated Device-Type Identification for Security Enforcement in IoT. In 2017 IEEE 37th International Conference on Distributed Computing Systems (ICDCS). Atlanta, GA, USA.
[28] Akash Raj Narayanadoss, Tram Truong-Huu, Purnima Murali Mohan, and Mohan Gurusamy. 2019. Crossfire Attack Detection Using Deep Learning in Software Defined ITS Networks. In 2019 IEEE 89th Vehicular Technology Conference (VTC2019-Spring). Kuala Lumpur, Malaysia.
[29] T. T. T. Nguyen and G. Armitage. 2008. A survey of techniques for internet traffic classification using machine learning. IEEE Communications Surveys & Tutorials 10, 4 (2008), 56–76.
[30] Sinno Jialin Pan and Qiang Yang. 2010. A Survey on Transfer Learning. IEEE Transactions on Knowledge and Data Engineering 22, 10 (2010), 1345–1359.
[31] Emanuele Petagna, Giuseppe Laurenza, Claudio Ciccotelli, and Leonardo Querzoni. 2019. Peel the Onion: Recognition of Android Apps Behind the Tor Network. In Proc. International Conference on Information Security Practice and Experience. Kuala Lumpur, Malaysia, 95–112.
[32] Lawrence R. Rabiner and Bernard Gold. 1975. Theory and Application of Digital Signal Processing. Prentice Hall, Hoboken, New Jersey, United States.
[33] Jingjing Ren et al. 2019. An International View of Privacy Risks for Mobile Apps. https://recon.meddle.mobi/papers/cross-market.pdf
[34] Jingjing Ren, Martina Lindorfer, Daniel Dubois, Ashwin Rao, David Choffnes, and Narseo Vallina-Rodriguez. 2018. Bug fixes, improvements,... and privacy leaks–a longitudinal study of pii leaks across android app versions. In Proc. of the Network and Distributed System Security Symposium (NDSS). San Diego, USA.
[35] S. Rezaei and X. Liu. 2019. Deep Learning for Encrypted Traffic Classification: An Overview. IEEE Communications Magazine 57, 5 (2019), 76–81.
[36] Shahbaz Rezaei and Xin Liu. 2019. How to Achieve High Classification Accuracy with Just a Few Labels: A Semisupervised Approach Using Sampled Packets. In Proc. 19th Industrial Conference on Data Mining. New York, USA, 28–42.
[37] Michael Schlichtkrull, Thomas N. Kipf, Peter Bloem, Rianne van den Berg, Ivan Titov, and Max Welling. 2018. Modeling Relational Data with Graph Convolutional Networks. In European Semantic Web Conference. Heraklion, Crete, Greece.
[38] Yaman Sharaf-Dabbagh and Walid Saad. 2016. On the Authentication of Devices in the Internet of Things. In 2016 IEEE 17th International Symposium on A World of Wireless, Mobile and Multimedia Networks (WoWMoM). Coimbra, Portugal.
[39] Hongtao Shi, Hongping Li, Dan Zhang, Chaqiu Cheng, and Xuanxuan Cao. 2018. An efficient feature generation approach based on deep learning and feature selection techniques for traffic classification. Computer Networks 132 (2018).
[40] V. F. Taylor, R. Spolaor, M. Conti, and I. Martinovic. 2016. AppScanner: Automatic Fingerprinting of Smartphone Apps from Encrypted Network Traffic. In IEEE EuroS&P 2016. Saarbruecken, Germany.
[41] Vincent F. Taylor, Riccardo Spolaor, Mauro Conti, and Ivan Martinovic. 2018. Robust Smartphone App Identification via Encrypted Network Traffic Analysis. IEEE Transactions on Information Forensics and Security 13, 1 (2018), 63–78.
[42] Vijayanand Thangavelu, Dinil Mon Divakaran, Rishi Sairam, Suman Sankar Bhunia, and Mohan Gurusamy. 2019. DEFT: A Distributed IoT Fingerprinting Technique. IEEE Internet of Things Journal 6, 1 (2019), 940–952.
[43] Tram Truong-Huu, Nidhya Dheenadhayalan, Partha Pratim Kundu, Vasudha Ramnath, Jingyi Liao, Sin G. Teo, and Sai Praveen Kadiyala. 2020. An Empirical