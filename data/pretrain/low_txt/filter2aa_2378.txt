# Hooked Browser: Meshed-Networks with WebRTC and BeEF

## The Sad Tale of Vegetarian Browsers
**Trigger Warning:** This presentation includes JavaScript.

### Presenter
- **Christian Frichot**
  - Twitter: @xntrik
  - Co-Author of *The Browser Hacker’s Handbook*
  - Developer at @beefproject

---

## Overview
- **JS, Client-Side Testing & BeEF**
  - Mooo

- **Problems with Browser Communication Channels**
  - How WebRTC Can Help
  - What is WebRTC?

- **Integration of WebRTC into BeEF**
  - Plus Demo!

- **Client-Side Security Testing**
  - Browser's Explosive Growth
  - Attack Surface Growth
  - Demise of Thick-Based Browser Tech
  - `$ killall ﬂash`
    - Who hasn’t done this yet??
  - `$ brew install web2.0`

- **What is Browser Hacking?**
  - Initiating Control
  - Retaining Control
  - Bypassing SOP (Same-Origin Policy)
  - Attacking Users
  - Attacking Extensions
  - Attacking Browsers
  - Attacking Plugins
  - Attacking Networks

- **BeEF Commands**
  - `$ ./beef`
  - `$ cat beef | grep ‘comm’`
    - XMLHttpRequest
    - WebSockets
    - DNS
  - `$ vim core/main/client/net.js`
  - `$ vim core/main/client/websocket.js`
  - `$ vim core/main/client/net/dns.js`

- **Solutions**
  - `$ cat solutions.txt`
  - Or…
  - U mad?

- **WebRTC Overview**
  - WebRTC is a free, open project that enables web browsers with Real-Time Communications (RTC) capabilities via simple JavaScript APIs.
  - `$ wget http://www.webrtc.org/`
  - `$ wget http://io13webrtc.appspot.com/`
  - `$ ./webrtc_functions.sh`
    - MediaStream
    - RTCPeerConnection
    - RTCDataChannel
  - `$ cat mediastream.js`
  - `$ cat rtcpeerconnection.js`
  - `$ cat rtcdatachannel.js`
  - `$ cat cat.gif`
  - `$ cat modules/host/get_internal_ip_webrtc/command.js`

- **Signalling and Media/Data Flow**
  - Signalling
  - STUN (Session Traversal Utilities for NAT)
    - `$ wget https://tools.ietf.org/html/rfc5389`
  - TURN (Traversal Using Relays around NAT)
    - `$ wget https://tools.ietf.org/html/rfc5766`
  - ICE (Interactive Connectivity Establishment)
    - `$ wget https://tools.ietf.org/html/rfc5245`
  - Got ICE?

- **Step-by-Step Process**
  - Step 1: Hook Browsers
    - `hook.js`
  - Step 2: Initialize BeEF WebRTC
    - You are the caller
    - You are the receiver
    - BeEF poll
  - Step 3: Caller sets up RTCPeerConnection
    - Signalling
  - Step 4: Receiver receives offer and begins its RTCPeerConnection
    - BeEF poll
  - Step 5: Receiver sends RTC answer and its ICE candidates
    - Signalling
  - Step 6: Caller receives RTC answer from its peer
    - BeEF poll
  - Step 7: Browsers establish peer connectivity via shared ICE candidates
    - RTCPeerConnection
  - Step 8: Woot!
    - `iceConnectionState = connected`
    - Send 'okay'
    - RTCDataChannel

- **Still Hooked?**
  - `hook.js`
  - `!gostealth`
  - `$ curl /api/webrtc/cmdexec`
    - Command module
  - `$ ./run_demo.sh`
    - WORK IN PROGRESS

- **Issues and Challenges**
  - Issues with Firefox and Chrome
  - Reliability with using UDP RTCDataChannels?
  - IE doesn’t support WebRTC
    - `$ curl http://iswebrtcreadyyet.com/`
  - But I am stuck?
    - RTCDataChannel
    - ???

- **To-Do List**
  - Handle remote peers better (Integrate TURN into BeEF server?)
  - Handle peer termination better
  - Round-robin peers (?)
  - Further investigation into WebRTC enterprise network exfiltration

- **Acknowledgments**
  - Wade, @antisnatchor, and everyone who helps/ed with BeEF & *The Browser Hacker’s Handbook*!
  - Asterisk Crew (@asteriskinfosec)
  - All you funny bastards on Twitter
  - Ten & Stel

- **Questions?**
  - Qs?

---

Thank you for your attention!