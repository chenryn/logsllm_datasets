# Title: Securing SSL Certificate Verification through Dynamic Linking

## Authors
- Adam Bates, CISE Dept., University of Florida, Gainesville, FL, adammbates@ufl.edu
- Joe Pletcher, CIS Dept., University of Oregon, Eugene, OR, pletcher@uoregon.edu
- Tyler Nichols, CIS Dept., University of Oregon, Eugene, OR, tynichols@uoregon.edu
- Braden Hollembaek, iSEC Partners, Seattle, WA, bhollembaek@isecpartners.com
- Dave Tian, CISE Dept., University of Florida, Gainesville, FL, tian@cise.ufl.edu
- Kevin R. B. Butler, CISE Dept., University of Florida, Gainesville, FL, butler@ufl.edu
- Abdulrahman Alkhelaifi, CISE Dept., University of Florida, Gainesville, FL, aalkhelaifi@ufl.edu

## Abstract
Recent discoveries of widespread vulnerabilities in the SSL/TLS protocol stack, particularly concerning server certificate verification, have cast doubt on the security of Internet communications. While new SSL trust enhancements address many of these vulnerabilities, they are slow to be deployed and do not secure existing software. In this work, we introduce CertShim, a lightweight retrofit for SSL implementations that protects against SSL vulnerabilities, including those surveyed by Georgiev et al. [19], in a transparent manner. We demonstrate CertShim's extensibility by integrating it with Convergence, DANE, and Client-Based Key Pinning. CertShim imposes only 20 ms overhead for an SSL verification call and can hook the SSL dependencies of 94% of Ubuntu’s most popular packages without requiring changes to existing applications. This work significantly enhances system-wide security for SSL communications in non-browser software while reducing the barriers to evaluating and adopting alternative proposals to the certificate authority system.

## Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General — Security and protection

## Keywords
SSL, TLS, HTTPS, public-key certificates

## Introduction
Internet applications have long relied on SSL/TLS libraries for secure end-to-end channels, but recent studies highlight systemic lapses in security procedures, rendering our communications insecure. The core issue lies in the inability of clients to accurately authenticate servers when presented with their public-key certificates. These problems span from improper certificate handling in libraries [7, 29] to confusion and abuse of SSL APIs [19, 43], and even intentional design flaws in applications to simplify use [17]. Additionally, high-profile compromises of prominent Certificate Authorities (CAs) [12, 18, 32] have further eroded the SSL trust model. These lapses enable Man-in-the-Middle (MitM) attacks, where an attacker intercepts and reads supposedly secure SSL traffic.

While forward-thinking solutions have been proposed [10], immediate countermeasures for legacy software are lacking. Studies show that up to 76% of SSL vulnerabilities in Android apps persist for over a year, even after developers are notified [43, 17]. In such cases, alternate means of securing communications are necessary.

In this paper, we present CertShim, a lightweight retrofit for popular SSL implementations (OpenSSL, GnuTLS, and partial support for JSSE). CertShim acts as a shim into the validation procedure in dynamically linked applications, providing application- and domain-specific handlers to enforce correct certificate validation. We demonstrate its practicality by incorporating various verification techniques, including traditional CA validation, Convergence [30], DANE [23], and client-side key pinning [14, 31, 37, 42]. CertShim reduces the barrier to adopting these systems by making them immediate candidates for system-wide deployment.

## Background
The SSL/TLS protocols are primarily responsible for securing web traffic. Introduced by Netscape in 1995, SSL provides confidentiality, integrity, and identity to network communications [22]. While SSL's solutions for confidentiality and integrity have stood the test of time, reliably establishing destination identity remains challenging. Without identity assurances, users are vulnerable to impersonation or MitM attacks. The current solution, the CA public key infrastructure, requires domains to register with CAs for signed X.509 certificates. Clients then authenticate servers using the issuing CA's public key, which is often pre-installed in their operating system or web browser.

### Development Vulnerabilities
Correct implementation of SSL, especially certificate verification, is difficult. Numerous MitM vulnerabilities have been discovered in certificate chain validation routines [28, 29]. Georgiev et al. [19] found pervasive misunderstandings of certificate verification in SSL APIs in non-browser software and identified broken SSL libraries. Fahl et al. [17] found that some apps intentionally bypassed proper validation for easier development or to support self-signed certificates. Many SSL codebases are unlikely to be patched, with up to 76% of vulnerabilities in Android apps persisting for over a year [43, 17]. Brubaker et al. [7] uncovered inconsistencies in major SSL libraries, leading to exploitable vulnerabilities.

### Trust Vulnerabilities
Beyond implementation issues, the CA trust model has fundamental limitations. CAs are not required to perform due diligence before issuing certificates, and recent high-profile compromises (e.g., Comodo [32], Diginotar [18], TURKTRUST [12]) raise questions about their security. Some CAs offer wiretap services, further undermining trust [21, 39, 41, 42]. The lack of scoping in the CA model means that any CA can verify any certificate, putting conscientious businesses at risk.

### CA Alternatives
Clark and van Oorschot [10] surveyed proposed CA enhancements and alternatives, categorizing them based on their underlying principles. Some of these, such as multipath probing [3, 30, 47], client-based key pinning [14, 31, 37, 42], and certificate revocation lists [13, 26, 33, 38], require no server-side changes and can be immediately deployed. DANE, a DNS-based key pinning system, embeds X.509 certificates in DNSSEC records [23, 27]. However, these trust enhancements have not been widely adopted, partly due to the need to modify non-browser software.

Key pinning, Convergence, and DANE each have inherent limitations. For example, client-based key pinning cannot distinguish between malicious and benign certificate changes [2, 4]. Convergence can detect global versus local changes but may miss MitM attacks near the server. DANE, while definitive, is incrementally deployed and adds complexity to the CA trust model. By querying multiple validation systems, CertShim mitigates these limitations.

## Design
### Threat Model & Assumptions
Our system is designed to protect against adversaries in the network attempting MitM attacks on SSL communications. These attacks could originate from rogue wireless access points or other points on the network path between the client and server.

---

This revised version aims to provide a clear, coherent, and professional presentation of the research, with improved structure and readability.