# Impact of ECC Table Port Configuration on Performance and AVF

## 6.3. Sensitivity Analysis
To gain insight into the operation of Shield, we examined the impact of the number of read and write ports in the ECC table. Figures 13 and 14 show the IPC (Instructions Per Cycle) and the integer register file AVF, respectively, for configurations with \(x\) read ports and \(y\) write ports (denoted as \(xR, yW\)). For each application, the results are normalized to the (6R, 4W) configuration.

### Figure 13: Impact of the Number of ECC Table Ports on IPC
- **(6R, 4W) to (3R, 3W):** The IPC remains constant. This is because Shield performs ECC generation and checks off the critical path, queues requests when necessary, and leverages the slack given by the ROB.
- **(2R, 3W):** The average IPC decreases by 6.9% for SPECint and by 4.2% for SPECfp.
- **(1R, 3W):** There is a 50% performance penalty because the ECC table becomes a major bottleneck.

### Figure 14: Impact of the Number of ECC Table Ports on Integer Register File AVF
- **(3R, 3W):** The AVF changes negligibly compared to (6R, 4W).
- **(2R, 3W) and (1R, 3W):** The AVF increases noticeably.

Overall, the (3R, 3W) design represents a good tradeoff between performance, AVF, and power.

## 6.4. Register Lifespan Prediction
We also examined the accuracy of the register lifespan predictor used in Shield (OptEffective). Figure 15 shows the fraction of integer register versions that OptEffective predicts as Ultrashort, Short, or Long. On average, it predicts over 60% as Ultrashort and only 10% as Long.

### Figure 16: Cumulative Distribution of Useful Lifespan for Different Register Types
- **Ultrashort Registers:** 95% have less than 10 cycles of useful lifespan.
- **Long Registers:** Most have over 30 cycles of useful lifespan.

Figure 17 compares the AVF using OptEffective and an oracle algorithm (Oracle) for register lifespan prediction. It also includes the AVF with Ponomarev et al.’s predictor (Section 3.2.1). The figure shows that, on average, OptEffective is very close to Oracle. The remaining AVF is largely due to the fact that, for some parts of the applications, there are more registers in the Useful state than entries in the ECC table.

## 7. Related Work
### Fully Protected Register Files
Traditional fault-tolerant designs protect the entire register file with parity or ECC. For example:
- **IBM S/390 G5 [18]:** Uses duplicated, lockstepped pipelines to ensure only correct data updates the ECC-protected structure.
- **ERC32 [3]:** A SPARC processor with parity-protected registers and buses, which imposes extra overhead.
- **Intel Montecito [9]:** Utilizes parity to protect the whole register file and requires software intervention for fault recovery.

Our ParShield design uses parity to detect all single-bit errors and selectively protects the most vulnerable registers, reducing the DUE AVF while consuming modest power and area.

### Partially Protected Register Files
- **Memik et al. [10]:** Proposed duplicating actively-used physical registers in unused locations, enhancing reliability with minimal performance degradation but only detecting errors.
- **Yan et al. [22]:** Used the compiler to assign the most vulnerable variables to ECC-protected registers.

ParShield offers a hardware-only solution without the need for recompilation.

### Register Lifetime Analysis
- **Lozano and Gao [7]:** Exploited short-lived variables to reduce register pressure.
- **Sangireddy and Somani [15]:** Reduced access time to the register file by exploiting useless periods in the register lifetime.
- **Ponomarev et al. [12]:** Used a small dedicated register file to cache short-lived operands, reducing energy consumption in the ROB and architectural register file.

ParShield distinguishes between ultrashort-, short-, and long-lived operands and exploits these differences to enhance register file reliability.

## 8. Conclusions
Register files are vulnerable to soft errors due to their size and frequent use. A cost-effective protection mechanism should have no performance impact, maintain a low AVF, consume modest power, and use little area.

In this paper, we proposed the ParShield design, which selectively protects a subset of registers by generating, storing, and checking ECCs for the most vulnerable registers. ParShield reduces the AVF of the integer register file by 73% to 0.040 and the AVF of the floating-point register file by 85% to 0.010. ParShield also uses parity for all registers and reuses ECC circuitry, resulting in no SDC AVF, a low DUE AVF, and reduced power consumption (81% and 78% for SPECint and SPECfp, respectively). ParShield has no performance impact and minimal area requirements.

## References
[1] A. Biswas et al., "Computing architectural vulnerability factors for address-based structures," in International Symposium on Computer Architecture, June 2005.
[2] E. Czeck and D. Siewiorek, "Effects of transient gate-level faults on program behavior," in International Symposium on Fault-Tolerant Computing, June 1990.
[3] J. Gaisler, "Evaluation of a 32-bit microprocessor with built-in concurrent error-detection," in International Symposium on Fault-Tolerant Computing, 1997.
[4] G. Hinton et al., "The microarchitecture of the Pentium 4 processor," Intel Technology Journal, 2001.
[5] Hspice User’s Manual. Applications and examples, 1996.
[6] S. Kim and A. K. Somani, "Area efficient architectures for information integrity in cache memories," in International Symposium on Computer Architecture, 1999.
[7] L. A. Lozano and G. R. Gao, "Exploiting short-lived variables in superscalar processors," in International Symposium on Microarchitecture, 1995.
[8] W. MacKee et al., "Cosmic ray neutron induced upsets as a major contributor to the soft error rate of current and future generation DRAMs," 1996 IEEE Annual International Reliability Physics, 1996.
[9] C. McNairy and R. Bhatia, "Montecito: A dual-core, dual-thread Itanium processor," IEEE Micro, 2005.
[10] G. Memik et al., "Increasing register file immunity to transient errors," in Design, Automation and Test in Europe, 2005.
[11] S. Mukherjee et al., "A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor," in International Symposium on Microarchitecture, 2003.
[12] D. Ponomarev et al., "Isolating short-lived operands for energy reduction," IEEE Trans. Comput., 2004.
[13] J. Ray et al., "Dual use of superscalar datapath for transient-fault detection and recovery," in International Symposium on Microarchitecture, 2001.
[14] J. Renau et al., "SESC simulator," January 2005, http://sesc.sourceforge.net.
[15] R. Sangireddy and A. K. Somani, "Exploiting quiescent states in register lifetime," in ICCD, 2004.
[16] P. Shivakumar et al., "Modeling the effect of technology trends on the soft error rate of combinational logic," in International Conference on Dependable Systems and Networks, 2002.
[17] K. Skadron et al., "Temperature-aware microarchitecture," in International Symposium on Computer Architecture, 2003.
[18] T. Slegel et al., "IBM’s S/390 G5 microprocessor design," IEEE Micro, 19, 1999.
[19] D. Tarjan et al., "CACTI 4.0," Tech Report HPL-2006-86, 2006.
[20] N. J. Wang et al., "Characterizing the effects of transient faults on a high-performance processor pipeline," in International Conference on Dependable Systems and Networks, 2004.
[21] C. Weaver et al., "Techniques to reduce the soft error rate of a high-performance microprocessor," in International Symposium on Computer Architecture, 2004.
[22] J. Yan and W. Zhang, "Compiler-guided register reliability improvement against soft errors," in International Conference on Embedded Software, 2005.
[23] J. F. Ziegler et al., "IBM experiments in soft fails in computer electronics (1978-1994)," IBM J. Res. Dev., 1996.