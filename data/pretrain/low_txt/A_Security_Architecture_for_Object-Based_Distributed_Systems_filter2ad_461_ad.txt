# Control Subobject
9. Marshall result  
5. Unmarshall request  

# Replication Subobject
10. Send result over network channel  
3. Handle request  

# Communication Subobject
8. Return result to the caller  
6. Execute request  

# Semantics Subobject
7. Application-specific security processing  

# Security Subobject
Secure Channels Table  
| Channel ID | User Permissions |
|------------|------------------|
| 00100101   | 0                |
| 01110111   | 1                |
| 11010011   | 2                |
| 00000110   | 3                |

4. Authorize request  
2. Decrypt and authenticate request  

# User Proxy
11. Network data transfer  
1. User proxy sends request over the network  

## Figure 6: DSO Replica Handling a User Request
At the other end, the process is as shown in Figure 6. Once a replica has established a secure channel with a user proxy, it will store the bitmap from the user certificate in the table of secure channels in the security subobject. For any method invocation request coming in through that channel, the replication subobject asks the security subobject to check the user’s permissions. Once the request is approved, the replication subobject passes the marshaled request to the control subobject, which unmarshals it and passes it to the semantics subobject. After the method is executed, the return value is passed back to the caller over the same secure channel.

### Initial Data
- **User (U)**
  - \( C_u \): User's certificate
  - \( Y_u \): User's public key
  - \( x_u \): User's private key

- **Replica (R)**
  - \( C_R \): Replica's certificate
  - \( Y_R \): Replica's public key
  - \( x_R \): Replica's private key

### Protocol
- **User (U)**
- **Replica (R)**
- \( C_u, C_R \)
- Nonce 1
- \( x_u \rightarrow x_Y \)

## Figure 7: Protocol for Establishing a Shared Key Between a User and a Replica

---

# Related Work
In the past decade, distributed systems security has received considerable attention. Our design stands out by explicitly addressing security challenges arising from dynamically replicating objects across a potentially large set of servers with varying degrees of trustworthiness. Most existing security architectures consider at most the replication of objects within the same administrative domain or mutually trusted domains. A distinctive feature of our architecture is that object replicas can be placed on both trusted and less trusted hosts, with replica functionality restricted based on the level of trust in the host running the replica server.

One of the most comprehensive security models is the one designed for CORBA [3]. The CORBA model includes provisions for user authentication, authorization, access control, network traffic security, auditing, non-repudiation, and security administration. Security is implemented through application-specific policy objects, invoked during remote request dispatching and reception. While the CORBA security design is highly flexible, it is server-centric and may be less scalable over wide-area networks. Additionally, the CORBA model does not address mobile code and has limited support for inter-domain security.

The Java [12] security design is similar to ours in that it explicitly considers protecting hosts against malicious mobile code. The platform security part of our design can be implemented using Java 2.0's security features. However, Globe handles several security issues outside the Java model, such as user authentication and support for object replication.

Other projects related to our security design include Globus [10] and Legion [29]. Globus is a distributed system designed for computational grids, providing extensive support for inter-domain user authentication and remote-process creation. However, it is less concerned with trust models for hosts, giving users little control over where their code runs. Globe's reverse access control mechanisms offer more flexibility. The Globus security architecture aims to provide a thin layer of homogeneity to tie together disparate and often incompatible local security mechanisms, which can be restrictive.

Legion is another effort in scientific computation. Both Globe and Legion are object-based and use self-certified object identifiers. However, Legion does not handle dynamic object replication and focuses on high-level security design, emphasizing flexibility and extensibility but less on architecture and protocols.

OASIS [14] is a distributed security architecture centered on role-based access control. Principals can acquire new roles based on their existing roles and credentials. OASIS also includes a Role Definition Language for representing security policies. However, OASIS does not explicitly deal with replicated applications and lacks support for reverse access control.

In recent years, there has been an explosion of peer-to-peer (P2P) applications, both academic (e.g., SETI@home [4], Publius [28]) and freeware tools for media exchange (e.g., Napster and Gnutella). These applications rely on storage and computation on unsecured platforms and manage to achieve reasonably accurate results. Efforts are being made to improve the security of these systems. For example, OceanStore [16] allows clients to integrity-check content, while other systems focus on anonymity [22] or content traceability [7]. Another attempt to provide security and privacy for P2P architectures is described in [8]. However, many of these systems emphasize immutable files, which can limit their applicability. Research on secure P2P systems is still in its early stages.

# Conclusion
In this paper, we have presented the security architecture for Globe, a distributed system based on replicated shared objects. Our design allows defining per-object security policies, fine-grained (per-method) access control, and does not rely on any centralized authority, ensuring scalability. We focus on general security services and allow application-specific features to be built on top of these services. Our architecture uses well-proven security techniques to address a range of issues, some common to distributed systems and others specific to Globe. The ability to dynamically replicate Globe objects and run them simultaneously on multiple hosts introduces new security challenges, such as reverse access control for object replicas and protection against malicious hosts. These issues have not been extensively addressed in previous work and form the major contribution of this research.

For future work, we plan to integrate our security design into the Globe Object Server prototype. We will use Java 2.0's facilities for implementing platform security features and explore alternative sandboxing tools like Janus. Additionally, we plan to integrate a reputation/rating mechanism as a service offered by the Globe middleware and investigate its effectiveness in filtering out malicious Globe Object Servers.

---

# References
[1] Secure Hash Standard. FIPS 180-1, Secure Hash Standard, NIST, US Dept. of Commerce, Washington D.C., April 1995.
[2] The Common Object Request Broker: Architecture and Specification, revision 2.6. www.omg.org, Oct 2000. OMG Document formal/01-12-01.
[3] CORBA Security Service Specification, Version 1.7. www.omg.org, March 2001. Document Formal/01-03-08.
[4] D. Anderson. Peer-to-Peer: Harnessing the Power of Disruptive Technologies, chapter 5. O’Reilly & Associates, Sebastopol, CA 95472, July 2001.
[5] A. Baggio, G. Ballintijn, M. van Steen, and A. Tanenbaum. Efficient Tracking of Mobile Objects in Globe. The Computer Journal, 44(5):340–353, 2001.
[6] A. Bakker, M. van Steen, and A. Tanenbaum. From Remote Objects to Physically Distributed Objects. In Proc. 7th IEEE Workshop on Future Trends of Distributed Computing Systems, pages 47–52, December 1999.
[7] A. Bakker, M. van Steen, and A. Tanenbaum. A Law-Abiding Peer-to-Peer Network for Free-Software Distribution. In Proc. IEEE Int’l Symp. on Network Computing and Applications, Cambridge, MA, February 2002.
[8] F. Cornelli, E. Damiani, S. D. C. di Vimercati, S. Paraboschi, and P. Samarati. Choosing Reputable Servents in a P2P Network. In Proc. of the Eleventh Int’l WWW Conference, Honolulu, HI, May 2002.
[9] G. Eddon and H. Eddon. Inside Distributed COM. Microsoft Press, Redmond, WA, 1998.
[10] I. Foster, C. Kesselman, G. Tsudik, and S. Tuecke. A Security Architecture for Computational Grids. In Proc. ACM Conference on Computer and Communications Security, pages 83–92, San Francisco, CA, 1998.
[11] I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer. A Secure Environment for Untrusted Helper Applications. In Proc. 6th Usenix Security Symposium, San Jose, CA, 1996.
[12] L. Gong. Inside Java 2 Platform Security. Addison-Wesley, Palo Alto, CA 94303, 1999.
[13] A. Grimsaw and W. Wulf. Legion - A View from 50000 Feet. In Proc. 5th IEEE Symp. on High Performance Distr. Computing, Aug 1996.
[14] J. H. Hine, W. Yao, J. Bacon, and K. Moody. An architecture for distributed OASIS services. In Proc. Middleware 2000, pages 104–120, Hudson River Valley, NY, April 2000.
[15] R. Kruger and J. Eloff. A Common Criteria Framework for the Evaluation of Information Technology Security Evaluation. In IFIP TC11 13th International Conference on Information Security, (SEC’97), pages 197–209, 1997.
[16] J. Kubiatowicz, D. Bindel, Y. Chen, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao. OceanStore: An Architecture for Global-scale Persistent Storage. In Proc. 9th ACM ASPLOS, pages 190–201, Cambridge, MA, November 2000. ACM.
[17] J. Leiwo, C. Hanle, P. Homburg, C. Gamage, and A. Tanenbaum. A Security Design for a Wide-Area Distributed System. In Proc. Second International Conference Information Security and Cryptology (ICISC’99), volume 1787 of LNCS, pages 236–256. Springer, 1999.
[18] D. Mazieres, M. Kaminsky, M. F. Kaashoek, and E. Witchel. Separating Key Management from File System Security. In Proc. 17th Symp. on Operating Systems Principles, pages 124–139, Kiawah Island, SC, 1999.
[19] G. Pierre and M. van Steen. A Trust Model for Cooperative Content Distribution Networks. Technical report, Vrije University, Amsterdam, 2001.
[20] G. Pierre, M. van Steen, and A. Tanenbaum. Dynamically Selecting Optimal Distribution Strategies for Web Documents. IEEE Transactions on Computers, 51(6):637–651, 2002.
[21] B. Popescu and A. Tanenbaum. A Certificate Revocation Scheme for a Large-Scale Highly Replicated Distributed System. Technical report, Vrije University, Amsterdam, 2002. In preparation.
[22] M. K. Reiter and A. D. Rubin. Anonymous Web transactions with Crowds. Communications of the ACM, 42(2):32–48, 1999.
[23] R. L. Rivest and B. Lampson. SDSI – A Simple Distributed Security Infrastructure. Presented at CRYPTO’96 Rumpsession, 1996.
[24] D. Schmidt and C. Vinoski. Object Adapters: Concepts and Terminology. C++ Report, 9(11), November 1997.
[25] M. van Steen, F. Hauck, P. Homburg, and A. Tanenbaum. Locating Objects in Wide-Area Systems. IEEE Commun. Mag., pages 104–109, January 1998.
[26] M. van Steen, P. Homburg, and A. Tanenbaum. Globe: A Wide-Area Distributed System. IEEE Concurrency, pages 70–78, January-March 1999.
[27] M. van Steen, A. Tanenbaum, I. Kuz, and H. Sips. A Scalable Middleware Solution for Advanced Wide-Area Web Services. Distributed Systems Engineering, 6(1):34–42, March 1999.
[28] M. Waldman, A. D. Rubin, and L. F. Cranor. Publius: A Robust, Tamper-Evident, Censorship-Resistant, Web Publishing System. In Proc. 9th Usenix Security Symposium, pages 59–72, Denver, CO, August 2000.
[29] W. A. Wulf, C. Wang, and D. Kienzle. A New Model of Security for Distributed Systems. Technical Report CS-95-34, 10, 1995.
[30] R. Zuccherato. ISO/IEC 9798-3 authentication SASL mechanism. RFC3163, August 2001.

Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC'02)  
1063-9527/02 $17.00 © 2002 IEEE