### Optimized Text

We denote the real system as \( S = E \mid [P]_\tau \) and the ideal system as \( S_{\text{ideal}} = E \mid \text{Sim} \mid F_{\text{ke}} \).

The simulator \(\text{Sim}\) is constructed as follows: \(\text{Sim}\) simulates the system \([P]_\tau\). Messages obtained from \(F_{\text{ke}}\) (to initiate the key exchange for a party) are forwarded to the I/O interface of \([P]_\tau\), and all inputs from \(E\) are forwarded to the network interface of \([P]_\tau\). Network outputs of \([P]_\tau\) are forwarded to \(E\), and I/O outputs of \([P]_\tau\) that are session key (SK) output messages (see Section 5.1) are forwarded as session finish messages to \(F_{\text{ke}}\). If any key or party in \([P]_\tau\) gets corrupted, then \(\text{Sim}\) corrupts \(F_{\text{ke}}\). Note that \(F_{\text{ke}}\) is corruptible as long as no SK-output message has been sent.

To prove \(S \equiv S_{\text{ideal}}\), we first prove a so-called mapping lemma, which relates concrete traces to symbolic traces, similar to mapping lemmas in other works on computational soundness. The specific complication we need to address in our mapping lemma, unlike others, is the issue of dishonestly generated keys. For this, we use the fact that \(P\) preserves key secrecy. (The property \(P \sim_l \text{rand}(P)\) is only used later to prove \(S \equiv S_{\text{ideal}}\).)

### Mapping Lemmas

Roughly speaking, the mapping lemmas we aim to prove state that, with overwhelming probability, a concrete trace \(t\) of \(S\) and \(S_{\text{ideal}}\) corresponds to a symbolic trace \(\text{symb}(t)\) of \(P\) and \(\text{rand}(P)\), respectively. A concrete trace of a system is defined by the runs in the IITM model.

To state the mapping lemmas more precisely, we introduce the following terminology:
- A concrete trace is **uncorrupted** if no key in \(F_{\text{enc}}\) and no machine \(M_i\) is corrupted.
- A concrete trace is **non-colliding** if it is uncorrupted and no collisions occur between nonces (including the session key output by \(F_{\text{ke}}\) in the case of \(S_{\text{ideal}}\)), global constants, and ciphertexts produced with unknown/uncorrupted keys (i.e., encryptions of the leakage of a message).

It is easy to prove that the probability of a trace being both colliding and uncorrupted is negligible.

Given a prefix \(t\) of a non-colliding concrete trace of \(S\) or \(S_{\text{ideal}}\) (we consider both cases simultaneously), we recursively define a mapping \(\psi_t\) from bit strings to ground terms. For this purpose, we fix an injective mapping \(\text{Garbage} : \{0, 1\}^* \rightarrow \mathbb{N}\) of bit strings to names such that the names are distinct from all names in \(P/\text{rand}(P)\). The mapping \(\psi_t\) will be used to define the symbolic trace \(\text{symb}(t)\) corresponding to \(t\).

1. \(\psi_t(m) := \langle \psi_t(m_1), \psi_t(m_2) \rangle\) if \(m\) is a pair of the form \(\langle m_1, m_2 \rangle\) for some bit strings \(m_1, m_2\).
2. \(\psi_t(m) := \text{sk}(n)\) if \(m = (\text{Key}, k)\) where \(k \in \{0, 1\}^*\) is a short-term key in \(F_{\text{enc}}\) and corresponds to the name \(n \in \mathbb{N}_{\text{st}}\). If \(k\) is not a short-term key in \(F_{\text{enc}}\), then \(n := \text{Garbage}(m)\).
3. \(\psi_t(m) := n\) if \(m\) is the random bit string chosen by some \(M_i\) for the nonce \(n \in \mathbb{N}_{\text{nonce}}\) in \(t\) or if \(m = \tau(n)\) for a global constant \(n\). In the case of \(S_{\text{ideal}}\), \(n\) is the name \(n^*\) added by \(\text{rand}(P)\) if \(m\) is the session key chosen by \(F_{\text{ke}}\).
4. \(\psi_t(m) := \{\psi_t(m')\}_r^{\text{sk}(n)}\) if the plaintext/ciphertext pair \((m', m)\) is recorded in \(F_{\text{enc}}\) for a (short-term or long-term) key and if the name corresponding to this key is \(n\). The name \(r\) is the symbolic randomness of the symbolic ciphertext which was evaluated to \(m\) in \(t\).
5. \(\psi_t(m) := \text{Garbage}(m)\) if none of the above cases are true.

One verifies that \(\psi_t\) is well-defined and injective, using our tagging convention and the fact that \(t\) is non-colliding. We note that \(\psi_t\) maps ciphertexts not honestly generated, i.e., not contained in \(F_{\text{enc}}\), to garbage. For this to make sense, we use in the proof of the mapping lemmas that \(P\) preserves key secrecy.

Now, we use \(\psi_t\) to associate every prefix \(t\) of a non-colliding concrete trace with a symbolic trace \(\text{symb}(t)\). We note that \(\text{symb}(t)\) is only defined if every input provided by the adversary can be derived symbolically.

A prefix \(t\) of a concrete trace of \(S\) or \(S_{\text{ideal}}\) is **Dolev-Yao (DY)** if \(t\) is non-colliding and \(\text{symb}(t)\) is a symbolic trace (in the sense of Definition 1) of \(P\) or \(\text{rand}(P)\), respectively; in particular, \(\text{symb}(t)\) must be defined.

### Mapping Lemma for \(S\) and \(S_{\text{ideal}}\)

**Lemma 1.** The probability that a concrete trace \(t\) of \(S\) is corrupted or \(t\) is DY is overwhelming (as a function of the security parameter). The same is true for \(S_{\text{ideal}}\).

**Proof Sketch of Theorem 3.** We can now prove that \(S \equiv S_{\text{ideal}}\) by defining a correspondence relation between (almost) all concrete traces of \(S\) to the concrete traces of \(S_{\text{ideal}}\), where the final output of \(E\) is the same in corresponding traces.

- If a concrete trace \(t\) of \(S\) is corrupted, \(\text{Sim}\) can corrupt \(F_{\text{ke}}\) and mimic the concrete trace of \(S\) exactly.
- If no session key is output in \(t\), the case is trivial.
- Otherwise, we use Lemma 1 and the assumption \(P \sim_l \text{rand}(P)\).

### Related Work

The general approach of this paper follows the one by Canetti and Herzog [14]. However, they consider only the simpler case of public-key encryption. Their symbolic criterion is based on patterns [2], which is closely related to static equivalence but more ad hoc.

Comon-Lundh and Cortier [15] show that observational equivalence implies computational indistinguishability for a class of protocols similar to the one considered here, but with more restricted if-then-else statements. The main drawback of their result is the unrealistic assumption that the adversary cannot fabricate keys, except for honestly running the key generation algorithm. This assumption is not made in our work, which is one reason why their result does not imply our computational soundness result. Additionally, Comon-Lundh and Cortier consider a game-based setting, while we use simulation-based security and make intensive use of composability.

In [4], Backes and Pfitzmann proposed a Dolev-Yao style abstraction of symmetric encryption within their cryptographic library [5]. In the full version of the work by Comon-Lundh and Cortier [16], the authors pointed out that they do not know how the problem with dishonestly generated keys that they encountered is solved in the cryptographic library by Backes and Pfitzmann. It turns out that dishonestly generated keys also have to be forbidden for the cryptographic library, especially when symmetric encryption is considered. Moreover, the realization of this library requires an authenticated encryption scheme augmented with extra randomness and identifiers for symmetric keys.

Mazaré and Warinschi [29] presented a mapping lemma for protocols that use symmetric encryption in a setting with adaptive, rather than only static, corruption. However, the protocol class is very restricted: symmetric keys may not be encrypted, and hence, may not "travel," and nested encryption is disallowed.

In [20], a formal logic that enjoys a computational, game-based semantics is used to reason about protocols that use symmetric encryption. In [28, 10], automated methods for reasoning about cryptographic protocols are proposed that are based on transformation of programs and games, and hence, are close to cryptographic reasoning. However, these works do not provide computationally sound symbolic criteria for reasoning about protocols.

As mentioned in the introduction, computational soundness results for passive or adaptive adversaries have been obtained, for example, in [2, 22].

### References

[1] M. Abadi and C. Fournet. Mobile Values, New Names, and Secure Communication. In POPL’01. ACM, 2001.

[2] M. Abadi and P. Rogaway. Reconciling two views of cryptography (the computational soundness of formal encryption). In IFIPTCS’00, volume 1872 of LNCS, pages 3–22. Springer, 2000.

[3] A. Armando, D.A. Basin, Y. Boichut, Y. Chevalier, L. Compagna, J. Cuéllar, P.H. Drielsma, P.-C. Héam, O. Kouchnarenko, J. Mantovani, S. Mödersheim, D. von Oheimb, M. Rusinowitch, J. Santiago, M. Turuani, L. Viganò, and L. Vigneron. The AVISPA Tool for the Automated Validation of Internet Security Protocols and Applications. In CAV’05, volume 3576 of LNCS, pages 281–285. Springer, 2005.

[4] M. Backes and B. Pfitzmann. Symmetric Encryption in a Simulatable Dolev-Yao Style Cryptographic Library. In CSFW’04. IEEE Computer Society, 2004.

[5] M. Backes, B. Pfitzmann, and M. Waidner. A composable cryptographic library with nested operations. In CCS’03, pages 220–230. ACM, 2003.

[6] M. Baudet. Deciding security of protocols against off-line guessing attacks. In CCS’05. ACM, 2005.

[7] G. Bella, F. Massacci, and L.C. Paulson. An overview of the verification of SET. International Journal of Information Security, 4:17–28, 2005.

[8] K. Bhargavan, C. Fournet, A. D. Gordon, and S. Tse. Verified Interoperable Implementations of Security Protocols. In CSFW’06. IEEE Comp. Soc., 2006.

[9] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In CSFW’01, pages 82–96. IEEE Computer Society, 2001.

[10] B. Blanchet. A Computationally Sound Mechanized Prover for Security Protocols. In S&P’06, pages 140–154. IEEE Computer Society, 2006.

[11] B. Blanchet, M. Abadi, and C. Fournet. Automated Verification of Selected Equivalences for Security Protocols. In LICS’05. IEEE Computer Society, 2005.

[12] R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In FOCS’01, pages 136–145. IEEE Computer Society, 2001.

[13] R. Canetti. Universally Composable Security: A New Paradigm for Cryptographic Protocols. Technical Report 2000/067, Cryptology ePrint Archive, December 2005. http://eprint.iacr.org/2000/067/.

[15] H. Comon-Lundh and V. Cortier. Computational soundness of observational equivalence. In CCS’08, pages 109–118. ACM, 2008.

[16] H. Comon-Lundh and V. Cortier. Computational soundness of observational equivalence. INRIA Research Report RR-6508, INRIA, 2008. http://www.loria.fr/~cortier/Papiers/CCS08-report.pdf

[17] V. Cortier, S. Kremer, R. Küsters, and B. Warinschi. Computationally Sound Symbolic Secrecy in the Presence of Hash Functions. In FSTTCS’06, volume 4337 of LNCS, pages 176–187. Springer, 2006.

[18] V. Cortier and B. Warinschi. Computationally Sound, Automated Proofs for Security Protocols. In ESOP’05, volume 3444 of LNCS. Springer, 2005.

[19] V. Cortier and E. Zalinescu. Deciding Key Cycles for Security Protocols. In LPAR’06, volume 4246 of LNCS, pages 317–331. Springer, 2006.

[20] A. Datta, A. Derek, J. C. Mitchell, and B. Warinschi. Computationally Sound Compositional Logic for Key Exchange Protocols. In CSFW’06, pages 321–334. IEEE Computer Society, 2006.

[21] D. Dolev and A.C. Yao. On the Security of Public-Key Protocols. IEEE Transactions on Information Theory, 29(2):198–208, 1983.

[22] S. Kremer and L. Mazaré. Adaptive Soundness of Static Equivalence. In ESORICS’07, volume 4734 of LNCS, pages 610–625. Springer, 2007.

[23] R. Küsters. Simulation-Based Security with Inexhaustible Interactive Turing Machines. In CSFW’06, pages 309–320. IEEE Comp. Soc., 2006.

[24] R. Küsters and T. Truderung. Using ProVerif to Analyze Protocols with Diffie-Hellman Exponentiation. In CSF’09, pages 157–171. IEEE Computer Society, 2009.

[25] R. Küsters and M. Tuengerthal. Joint State Theorems for Public-Key Encryption and Digital Signature Functionalities with Local Computation. In CSF’08, pages 270–284. IEEE Computer Society, 2008.

[26] R. Küsters and M. Tuengerthal. Universally Composable Symmetric Encryption. In CSF’09, pages 293–307. IEEE Computer Society, 2009.

[27] R. Küsters and M. Tuengerthal. Computational Soundness for Key Exchange Protocols with Symmetric Encryption. Technical Report 2009/392, Cryptology ePrint Archive, 2009. http://eprint.iacr.org/2009/392/.

[28] P. Laud. Symmetric Encryption in Automatic Analyses for Confidentiality against Active Adversaries. In S&P’04, pages 71–85. IEEE Computer Society, 2004.

[29] L. Mazaré and B. Warinschi. Separating Trace Mapping and Reactive Simulatability Soundness: The Case of Adaptive Corruption. In ARSPA-WITS, 2009.

[30] C. Meadows, P. F. Syverson, and I. Cervesato. Formal specification and analysis of the Group Domain Of Interpretation Protocol using NPATRL and the NRL Protocol Analyzer. Journal of Computer Security, 12(6):893–931, 2004.

[14] R. Canetti and J. Herzog. Universally Composable Public-Key Encryption in the Presence of Active Adversaries. In TCC’04, volume 2951 of LNCS. Springer, 2004.

[31] D. Micciancio and B. Warinschi. Soundness of Formal Symbolic Analysis of Mutual Authentication and Key-Exchange Protocols. In TCC’06, volume 3876 of LNCS, pages 380–403. Springer, 2006.