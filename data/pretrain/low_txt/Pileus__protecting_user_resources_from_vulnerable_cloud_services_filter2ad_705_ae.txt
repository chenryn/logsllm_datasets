### 6.1 Pileus Confinement Mechanisms

Pileus employs two primary categories of confinement for cloud services. The first category restricts cloud services to a specific vendor label, ensuring that operations are confined within the boundaries of a single user. The second category involves operations that operate over multiple users' data simultaneously (e.g., deleting all VMs on a node). In this case, Pileus uses a group label, which aggregates the authorities of all users involved in the operation.

### 6.2 Endorsers and Declassifiers

A cloud operation engages DIFC-aware cloud services only if it causes data to flow across user boundaries (i.e., resource sharing). Our study found that only two types of resources—volumes and images—might be shared across users. Although 13 cloud operations involve volume or image sharing, the types of declassification and endorsement are limited.

- **User → Public Declassification**: This allows a user to safely release a private resource to the public. For images, the declassifier is motivated by the problem studied in Amazonia [8], where a careless user may publish images containing sensitive data such as API keys. We implemented the countermeasures suggested in Amazonia, which parse the image and scan for any sensitive data. The image declassifier ensures that without proper declassification, user images will not be released to the public, either intentionally or by mistake.
  
- **Volumes**: Declassification to the public means removing any data residue. To implement a volume declassifier, we factored out the function in OpenStack's volume service that zeros out all data on a volume. Unlike OpenStack, where vulnerabilities [12, 13] can cause this function to be omitted, Pileus ensures that the volume declassifier must run to return an unused volume.

- **Public → User Endorsement**: This allows a user to safely use a public resource. For images, the problem is motivated by vulnerabilities such as [41]. We provided two reference implementations: one endorses the image by performing a checksum against a whitelist, and another scans the image for malware.

- **User → User Data Flow**: This allows a user to selectively share a resource with another user (e.g., Alice shares her volume with Bob). In this case, the owner of the resource needs to declassify the data, and the receiver needs to endorse the data. The declassifier for the owner is different from declassifying to the public because the resource may contain private data that the owner wants only the receiver (e.g., Bob, not the public) to access. The declassifier runs with the owner's ownership, creating a new intermediate secrecy tag, say `n`, to label the resource and transfer the ownership of `n` to the receiver. Using the ownership of `n`, the receiver, and only the receiver, will be able to access the data. The receiver may endorse the resource using the same endorsers as if the resource is from the public.

### 6.3 Performance Evaluation

#### 6.3.1 Testbed Configuration

Our testbed consists of six cloud nodes:
- Three running `nova-compute`
- One running Glance services
- One running Cinder services
- One running the rest

All cloud nodes are identical blades with a 2.4GHz Intel E5-2609 CPU and 64GB memory, installed with Ubuntu 14.04.

#### 6.3.2 Pileus Kernel

Table 4 shows micro-benchmark results for some system calls. The process under test has secrecy and integrity labels with both 20 tags. For most system calls, Pileus kernel adds a latency factor of 1.1-5 compared to native Linux. Since Pileus runs the DIFC mechanism in the kernel, its performance is better than Flume [21] and slightly better than FlowK [48], another contemporary kernel DIFC module.

#### 6.3.3 Pileus Daemon

We evaluated the throughput of the Pileus daemon by stressing it with a large volume of events. In original OpenStack, the throughput for cloud services is 1,200 req/sec, whereas in Pileus, it is 950 req/sec (a 20.8% slowdown). This is because cloud services spawn green threads, but Pileus spawns processes to isolate them using user labels. To improve performance, a possible solution is to build new OS abstractions that are as lightweight as threads but have the same level of isolation as processes, such as the event process abstraction proposed in Asbestos [15]. However, this may require intrusive kernel modifications.

#### 6.3.4 Ownership Registry (OR)

We evaluated the scalability of the OR by stressing it with high-frequency spawn requests. Results show that the OR can handle up to ~3000 req/sec. Most of the overhead comes from:
1. The spawn scheduling algorithm
2. The OR signing the authority token during spawn

One way to optimize this is to separate the spawn scheduling algorithm into a separate service. This service does not need to be trusted, but the OR must be able to check the output to ensure that the global cloud policy is met (e.g., CoI is not violated).

#### 6.3.5 Overall Latency

Table 5 shows the latency perceived by cloud users. While Pileus adds latency in its network protocol (due to the added round of communication with the OR during spawn), the latency is amortized by the time spent on actually processing the events. As a result, we observed less than 3% additional latency when performing various cloud operations in Pileus.

### 7. Related Work

There has been significant work on improving data security in the cloud, including data encryption [31], data sealing [34], protection against compromised hypervisors and privileged domains [53, 9, 6, 46], and leakage detection [30]. These works aim to protect data from parties in the cloud that should not have access. Pileus addresses a different concern: if a cloud service has legitimate access to data, how to prevent them from being leveraged as confused deputies due to cloud service vulnerabilities.

Another line of research focuses on the security of cloud infrastructure. The CV framework [35] allows cloud users to reason about the integrity of cloud nodes. CloudArmor [44] protects cloud operations performed on benign cloud nodes from compromised ones by enforcing a cloud operation model. These works are complementary to Pileus. SOS [45] addresses the concern of compromised compute services but requires other cloud services to be trustworthy. In contrast, Pileus can systematically run and confine any type of cloud service. Pileus is motivated by SCOS [43], which advocates the development of a secure cloud operating system to confine vulnerable cloud services.

Pileus takes advantage of well-established mechanisms in decentralized information flow control (DIFC) systems. Specifically, Pileus adopts its label and ownership from Flume [21] and its event handler abstraction from Asbestos [15]. The DIFC model was proposed by Myers and Liskov [24], then incorporated into programming languages such as Jif [25] and systems such as Asbestos [15], HiStar [51], Flume [21], Laminar [33], and Aeolus [11]. These systems often assume a fully trusted reference monitor (or several mutually trusted reference monitors) that can track information flows on the system. Pileus, on the other hand, assumes cloud nodes are mutually distrustful.

Similar to DStar [52], Fabric [23], and Mobile-fabric [4], Pileus assumes that a reference monitor on a single node may be compromised, and therefore, cloud nodes are mutually distrustful. However, Pileus differs from these systems in its ability to control authority distribution. In Pileus, the ownership registry (OR) ensures that authority propagation across cloud nodes will not violate the cloud policy and enables timely authority revocation from nodes. Additionally, Pileus developed a systematic approach for cloud users to delegate their authorities to event handlers they trust, without the fear that such trust might be misused to run other code.

Researchers have shown that DIFC is a useful model in protecting distributed web applications deployed on PaaS clouds [29, 5]. These systems focus on protecting cloud-hosted applications and rely on a trustworthy cloud platform, including underlying cloud services and nodes. Pileus can be used to secure this foundation. The ownership authorization in Pileus is motivated by capability-based systems [37, 47, 16]. A security issue with traditional capability systems is that they cannot enforce the ⋆-property [49]. To address this concern, multiple designs [20, 18, 16] were proposed that combined capability with authority checks to limit who may exercise the capability. Pileus adopts a similar design idea that uses ownership authorization to securely delegate ownerships to particular event handlers that cloud users trust.

Cloud vendors have started developing some countermeasures to address the security issues reported in this paper. For example, an OpenStack blueprint [28] proposes to encrypt messages between cloud services, preventing a malicious cloud node from sniffing the channel. Another example is OpenStack's support for scoped tokens [2], which can reduce token privileges to a single project. However, much of these efforts are still ongoing, and they cannot address the vulnerabilities in cloud services.

### 8. Conclusion

Pileus is a model and system for securing cloud platforms by enforcing decentralized information flow control (DIFC) over cloud services. On Pileus, cloud services are ephemeral and are confined to users' security labels, enabling least privilege. Pileus tracks and protects users' data as it flows through the cloud platform, thereby mitigating both cloud service vulnerabilities and compromised cloud nodes. We ported OpenStack, a widely used cloud platform, to Pileus and showed that Pileus can greatly improve the security of OpenStack with less than 3% overhead on user operation latency.

### 9. Acknowledgments

The authors thank Danfeng Zhang, Susanta Nanda, and the anonymous reviewers for their comments on drafts of this paper. This work was supported by NSF under grant No. CNS-1117692.

### 10. References

[1] CVE-2012-3360. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-3360.
[2] Openstack keystone token. http://docs.openstack.org/admin-guide/keystone_tokens.html.
[3] Amazon EC2. http://aws.amazon.com/ec2.
[4] O. Arden, M. D. George, J. Liu, K. Vikram, A. Askarov, and A. C. Myers. Sharing mobile code securely with information flow control. In Proc. 2012 IEEE Security and Privacy, 2012.
[5] J. Bacon, D. Eyers, T. Pasquier, J. Singh, I. Papagiannis, and P. Pietzuch. Information Flow Control for Secure Cloud Computing. IEEE Transactions on Network and System Management, SI Cloud Service Management, 11(1):76–89, 2014.
[6] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted cloud with haven. In Proc. 11th USENIX OSDI, 2014.
[7] W. E. Boebert and R. Y. Kain. A practical alternative to hierarchical integrity policies. In Proceedings of the 8th National Computer Security Conference, 1985.
[8] S. Bugiel, S. Nürnberger, T. Pöppelmann, A. Sadeghi, and T. Schneider. AmazonIA: When elasticity snaps back. In Proc. ACM CCS’11.
[9] S. Butt, H. A. Lagar-Cavilla, A. Srivastava, and V. Ganapathy. Self-service cloud computing. In Proc. ACM CCS’12.
[10] CVE-2012-0030. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0030.
[11] W. Cheng, D. R. K. Ports, D. A. Schultz, V. Popic, A. Blankstein, J. A. Cowling, D. Curtis, L. Shrira, and B. Liskov. Abstractions for usable information flow control in aeolus. In USENIX ATC’12.
[12] CVE-2012-5625. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5625.
[13] CVE-2013-4183. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4184.
[14] D. E. Denning. A lattice model of secure information flow. Communications of the ACM, 19(5):236–243, 1976.
[15] P. Efstathopoulos, M. Krohn, S. VanDeBogart, C. Frey, D. Ziegler, E. Kohler, D. Mazières, F. Kaashoek, and R. Morris. Labels and event processes in the asbestos operating system. In Proc. ACM SOSP’05.
[16] L. Gong. A secure identity-based capability system. In Proc. IEEE Security and Privacy, 1989.
[17] N. Hardy. The confused deputy. Operating Systems Review, 22(4):36–38, Oct. 1988.
[18] P. A. Karger. Limiting the damage potential of discretionary trojan horses. In Proc. IEEE Security and Privacy, 1987.
[19] P. A. Karger and A. J. Herbert. An augmented capability architecture to support lattice security and traceability of access. In Proceedings of the 1984 IEEE Symposium on Security and Privacy, pages 2–12, 1984.
[20] P. A. Karger and A. J. Herbert. An augmented capability architecture to support lattice security and traceability of access. In Proc. IEEE Security and Privacy, 1984.
[21] M. N. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler, and R. Morris. Information flow control for standard OS abstractions. In Proc. ACM SOSP’07.
[22] libselinux. http://www.rpmfind.net//linux/RPM/fedora/devel/rawhide/armhfp/l/libselinux-2.4-5.fc24.armv7hl.html.
[23] J. Liu, M. D. George, K. Vikram, X. Qi, L. Waye, and A. C. Myers. Fabric: A platform for secure distributed computation and storage. In Proc. ACM SOSP’09.
[24] A. C. Myers and B. Liskov. A decentralized model for information flow control. In Proc. 16th ACM SOSP, 1997.
[25] A. C. Myers and B. Liskov. Protecting privacy using the decentralized label model. ACM TOCS, 9(4):410–442, Oct. 2000.
[26] Security-enhanced linux. http://www.nsa.gov/selinux.
[27] OpenStack Open Source Cloud Computing Software. http://www.openstack.org//, 2008.
[28] OpenStack Message Security. https://wiki.openstack.org/wiki/MessageSecurity/.
[29] T. Pasquier, J. Singh, D. Eyers, and J. Bacon. CamFlow: Managed Data-Sharing for Cloud Services. IEEE Transactions on Cloud Computing, 2015.
[30] C. Priebe, D. Muthukumaran, D. O’ Keeffe, D. Eyers, B. Shand, R. Kapitza, and P. Pietzuch. Cloudsafetynet: Detecting data leakage between cloud tenants. In Proc. ACM CCSW’14.
[31] K. P. N. Puttaswamy, C. Kruegel, and B. Y. Zhao. Silverline: Toward data confidentiality in storage-intensive cloud applications. In Proc. 2nd ACM SOCC, 2011.
[32] Rackspace Cloud Servers. http://www.rackspace.com/cloud/.
[33] I. Roy, D. E. Porter, M. D. Bond, K. S. McKinley, and E. Witchel. Laminar: Practical fine-grained decentralized information flow control. In Proc. ACM PLDI, 2009.
[34] N. Santos, R. Rodrigues, K. P. Gummadi, and S. Saroiu. Policy-sealed data: A new abstraction for building trusted cloud services. In Proc. 21st USENIX Security, 2012.
[35] J. Schiffman, Y. Sun, H. Vijayakumar, and T. Jaeger. Cloud verifier: Verifiable auditing service for IaaS clouds. In Proc. IEEE SERVICE’13.
[36] The SEPostgreSQL Project. https://wiki.postgresql.org/wiki/Main_Page.
[37] J. S. Shapiro, J. M. Smith, and D. J. Farber. Eros: A fast capability system. In Proc. ACM SOSP’99.
[38] J. S. Shapiro and S. Weber. Verifying the EROS confinement mechanism. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 166–176, 2000.
[39] CVE-2012-4573. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-4573.
[40] CVE-2012-5482. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5482.
[41] CVE-2013-4354. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4354.
[42] CVE-2015-3221. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3221.
[43] Y. Sun, G. Petracca, and T. Jaeger. Inevitable failure: The flawed trust assumption in the cloud. In Proc. ACM CCSW’14.
[44] Y. Sun, G. Petracca, T. Jaeger, H. Vijayakumar, and J. Schiffman. Cloudarmor: Protecting cloud commands from compromised cloud services. In Proc. IEEE CLOUD’15.
[45] W.-K. Sze, A. Srivastava, and R. Sekar. Hardening OpenStack Cloud Platforms against Compute Node Compromises. Technical report, ASIACCS 2016, May 2016.
[46] R. Ta-Min, L. Litty, and D. Lie. Splitting interfaces: Making trust between applications and operating systems configurable. In Proc. USENIX OSDI’07.
[47] A. S. Tanenbaum, S. J. Mullender, and R. van Renesse. Using sparse capabilities in a distributed operating system. In Proc. ICDCS’86.
[48] D. M. E. Thomas F. J.-M. Pasquier, Jean Bacon. Flowk: Information flow control for the cloud. In Proc. IEEE CloudCom’14.
[49] W.E.Boebert. On the inability of an unmodified capability machine to enforce the *-property. In Proc. 7th DoD/NBS Computer Security Conference, 1984.
[50] C. Wright, C. Cowan, J. Morris, S. Smalley, and G. Kroah-Hartman. Linux security module framework. In Ottawa Linux Symposium, volume 8032, page 6, 2002.
[51] N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making information flow explicit in HiStar. In Proc. USENIX OSDI’06.
[52] N. Zeldovich, S. Boyd-Wickizer, and D. Mazières. Securing distributed systems with information flow control. In Proc. USENIX NSDI’08.
[53] F. Zhang, J. Chen, H. Chen, and B. Zang. Cloudvisor: Retrofitting protection of virtual machines in multi-tenant cloud with nested virtualization. In Proc. ACM SOSP’11.