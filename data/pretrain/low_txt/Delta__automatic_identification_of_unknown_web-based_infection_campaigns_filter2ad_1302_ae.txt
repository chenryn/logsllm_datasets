### 1. Introduction

System developers are continuously working to detect and prevent evasion techniques. Previous research on evasions has motivated the development of more advanced and diverse detection systems [34]. As a response, more sophisticated obfuscation [35], encryption, polymorphic and metamorphic code [36], and virtualized environments have become increasingly common, challenging these detection systems. With the evolution of these approaches, it is expected that malware and infection vectors will continue to evolve, successfully circumventing available detection systems.

### 2. JavaScript Mutation Events

JavaScript events that modify the Document Object Model (DOM) tree are known as mutation events. These events can change attributes of a node, such as the `src` attribute of a script tag, or insert or remove elements from the DOM tree.

### 3. Detection of Malicious Code

Numerous papers have been published on detecting malicious activity in websites. Most of these focus on dynamic analysis of JavaScript in instrumented environments or rendering websites in high-interaction client honeypots. Our system provides additional information: the infection campaign and the responsible node in the DOM tree.

- **Eshete et al. [40]** discuss the effectiveness and efficiency of various malicious website detection techniques, including blacklists, static heuristics, and dynamic analysis. They highlight the need for episodic re-training or online learning capabilities to keep up with the evolving nature of web-based malware and to prevent evasion.
  
- **Cova et al. [12]** introduce JSAND, a system for detecting and analyzing drive-by download attacks and malicious JavaScript. JSAND uses a comprehensive dynamic analysis approach, extracting features such as redirection, cloaking, deobfuscation, and heap exploitation. Compared to other systems like Capture-HPC, PhoneyC, and ClamAV, JSAND shows significantly lower false positive (0%) and false negative rates (0.2%), while taking an average of 16.05 seconds to analyze a website.

- **Canali et al. [13]** extend JSAND by implementing a faster pre-filtering step to reduce the time spent on analyzing benign samples. The filter uses a C4.5 (J48) decision tree and a diverse set of features, including HTML content, JavaScript code, host information, and URL patterns. This method processes up to 10 times more samples in the same time, albeit with more false positives and negatives.

- **Provos et al. [11, 14]** introduce a system to detect URLs of malicious websites. Their approach focuses on detecting exploit pages and is complementary to our system's capabilities. The system uses a proprietary machine learning algorithm to classify URLs based on features like "out of place" inline frames, obfuscated JavaScript, and links to known malware distribution sites.

### 4. Web Dynamics in Security

- **Maggi et al. [10]** present a web application intrusion detection system that learns about changes made to the web application. The system addresses the problem of web application concept drift by learning how the application is accessed by legitimate users and employing an unsupervised classification algorithm. However, their technique is orthogonal to our approach, focusing on protecting the integrity of the web application rather than finding new infection campaigns or protecting visitors.

- **Davanzi et al. [42]** study a similar approach for detecting the impact of web dynamics. Their system detects whether changes to a website are defacements or legitimate content changes. While their approach is useful for detecting visible changes, it does not work with malicious modifications, which are typically hidden from the end-user.

### 5. Conclusion

In this paper, we introduced the ∆-system, a lightweight system to identify changes associated with both malicious and benign behavior in websites. The system leverages clustering of modification-motivated features extracted from two versions of a website. We introduced a fuzzy tree difference algorithm to accurately extract important modifications, discarding minor changes. The ∆-system not only detects if a change is associated with malicious behavior but also supports the detection of previously unknown infection campaigns. It can generate identifying signatures of observed infection campaigns, which can be used for content-based detection or as test cases for online analyzer systems. Ultimately, the system helps in identifying the reason behind specific infections and facilitates the removal of malicious code and the mitigation of future infections.

### 6. Acknowledgment

We would like to express our gratitude to Matt Bishop and the reviewers for their valuable feedback and suggestions. This work was supported by the Office of Naval Research (ONR), the Army Research Office (ARO), the National Science Foundation (NSF), and Secure Business Austria.

### 7. References

[1] SOPHOS Security Team, “SOPHOS Security Threat Report 2013,” SOPHOS, Tech. Rep., 2013. [Online]. Available: http://goo.gl/YuW65

[2] P. Baccas, “Malware injected into legitimate JavaScript code on legitimate websites,” Article, 2013. [Online]. Available: http://goo.gl/rDFZ4

[3] D. Goodin, “Twitter detects and shuts down password data hack in progress,” February 2013. [Online]. Available: http://goo.gl/YwfMd

[4] Facebook Security Team, “Protecting People On Facebook,” Article, February 2013. [Online]. Available: http://goo.gl/OUPtk

[5] J. Finke and J. Menn, “Exclusive: Apple, Macs hit by hackers who targeted Facebook,” Reuters, February 2013. [Online]. Available: http://goo.gl/fzhIo

[6] D. Fetterly, M. Manasse, M. Najork, and J. Wiener, “A large-scale study of the evolution of web pages,” in Proceedings of the 12th International Conference on World Wide Web, ser. WWW ’03. ACM, 2003, pp. 669–678.

[7] B. A. Huberman and L. A. Adamic, “Evolutionary Dynamics of the world wide web,” Condensed Matter, January 1999.

[8] F. Douglis, A. Feldmann, B. Krishnamurthy, and J. Mogul, “Rate of Change and other Metrics: a Live Study of the World Wide Web.” in Proceedings of the USENIX Symposium on Internet Technologies and Systems, vol. 119. USENIX Association, 1997.

[9] R. Baeza-Yates, C. Castillo, and F. Saint-Jean, “Web Dynamics, Structure, and Page Quality,” in Web Dynamics. Springer-Verlag, 2004, pp. 93–109.

[10] F. Maggi, W. Robertson, C. Kruegel, and G. Vigna, “Protecting a Moving Target: Addressing Web Application Concept Drift,” in Proceedings of the 12th International Symposium on Recent Advances in Intrusion Detection, ser. RAID ’09. Springer-Verlag, 2009, pp. 21–40.

[11] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu, “The ghost in the browser analysis of web-based malware,” in First Workshop on Hot Topics in Understanding Botnets, ser. HOTBOTS ’07. USENIX Association, 2007, pp. 4–4.

[12] M. Cova, C. Kruegel, and G. Vigna, “Detection and analysis of drive-by-download attacks and malicious JavaScript code,” in Proceedings of the 19th International Conference on World Wide Web, ser. WWW’10. ACM, 2010, pp. 281–290.

[13] D. Canali, M. Cova, G. Vigna, and C. Kruegel, “Prophiler: a fast filter for the large-scale detection of malicious web pages,” in Proceedings of the 20th International Conference on World Wide Web (WWW ’11), ser. WWW ’11. ACM, 2011, pp. 197–206.

[14] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose, “All your iFRAMEs point to Us,” in Proceedings of the 17th USENIX Security Symposium, ser. SEC’08. USENIX Association, 2008, pp. 1–15.

[15] P.-M. Bureau, “Linux/Cdorked.A: New Apache backdoor being used in the wild to serve Blackhole,” April 2013. [Online]. Available: http://goo.gl/g2Vfl

[16] D. Cid, “Apache Binary Backdoors on Cpanel-based servers,” April 2013. [Online]. Available: http://goo.gl/BXq8Q

[17] S. S. Chawathe and H. Garcia-Molina, [37] J. Choi, G. Kim, T. Kim, and S. Kim, “Meaningful Change Detection in Structured Data,” in Proceedings of the ACM SIGMOD International Conference on Management of Data, ser. MOD’97. ACM, 1997.

[18] Y. Wang, D. J. DeWitt, and J.-Y. Cai, “X-Diff: An effective change detection algorithm for XML documents,” in Proceedings of the 19th International Conference on Data Engineering, ser. ICDE ’03. IEEE, 2003, pp. 519–530.

[19] H. W. Kuhn, “The Hungarian method for the assignment problem,” Naval Research Logistics Quarterly, vol. 2, no. 1-2, pp. 83–97, 1955.

[20] J. Kornblum, “Identifying almost identical files using context triggered piecewise hashing,” Digital Investigation, vol. 3, no. 0, pp. 91 – 97, 2006, the Proceedings of the 6th Annual Digital Forensic Research Workshop (DFRWS ’06).

[21] M. A. Jaro, “Advances in Record-Linkage Methodology as Applied to Matching the 1985 Census of Tampa, Florida,” Journal of the American Statistical Association, vol. 84, no. 406, pp. 414–420, 1989.

[22] A. N. Kolmogorov, “Three approaches to the quantitative definition of information,” International Journal of Computer Mathematics, vol. 2, no. 1-4, pp. 157–168, 1968.

[23] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, “An Efficient Filtering Method for Detecting Malicious Web Pages,” in Proceedings of the 13th International Workshop on Information Security Applications, 2012.

[38] Y.-T. Hou, Y. Chang, T. Chen, C.-S. Laih, and C.-M. Chen, “Malicious web content detection by machine learning,” Expert Systems with Applications, vol. 37, no. 1, pp. 55 – 60, 2010.

[39] J. Ma, L. K. Saul, S. Savage, and G. M. Voelker, “Beyond blacklists: learning to detect malicious web sites from suspicious URLs,” in Proceedings of the 15th ACM SIGKDD Conference on Knowledge Discovery and Data Mining, ser. KDD ’09. ACM, 2009, pp. 1245–1254.

[40] B. Eshete, A. Villafiorita, and K. Weldemariam, “Malicious website detection: Effectiveness and efficiency issues,” in First SysSec Workshop, ser. SysSec. IEEE, 2011, pp. 123 –126.

[41] A. Moshchuk, T. Bragin, S. D. Gribble, and H. M. Levy, “A Crawler-based Study of Spyware in the Web,” in Network and Distributed System Security Symposium, ser. NDSS ’06, 2006.

[42] G. Davanzo, E. Medvet, and A. Bartoli, “Anomaly detection techniques for a web defacement monitoring service,” Expert Systems with Applications, vol. 38, no. 10, pp. 12 521–12 530, Sep. 2011.