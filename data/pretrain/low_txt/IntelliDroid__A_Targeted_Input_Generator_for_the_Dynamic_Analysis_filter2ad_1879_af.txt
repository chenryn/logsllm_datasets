### Computing Inputs for Complex Functions in Path Constraints

To compute inputs that are processed by complex functions (e.g., encryption or hashing) within a path constraint, constraint solvers often struggle. This is because these solvers typically cannot determine the inputs required to produce an output that satisfies the path constraint. In some cases, a system that uses dynamic feedback, as described in the context of reflection, might enable IntelliDroid to generate such inputs. We are currently exploring this approach.

Similar to obfuscation through reflection, malware developers may hide malicious behavior in packed applications or native code, which IntelliDroid does not support. However, IntelliDroid can direct execution to locations in the code where these are used (e.g., DexClassLoader, JNI invocations). Nonetheless, any constraints that arise after these invocations will not be extracted by the static component. While not ideal, the ability to direct execution to these critical parts of the application remains valuable and can assist an attached dynamic tool in analyzing these sections more effectively.

### Knowledgeable Attacker

Given the above limitations, a knowledgeable attacker has two primary strategies to defeat IntelliDroid:

1. **Exploiting Call Graph Extraction Difficulties:**
   The attacker can place malicious code in a section that appears disconnected from the rest of the call graph (i.e., dead code). Since IntelliDroid cannot determine a path to this code, it cannot generate inputs. Mitigations include more precise modeling of Android call edges and conservative over-approximation of call edges. The former requires significant engineering effort, while the latter may result in IntelliDroid injecting inputs for paths that are not actually executable.

2. **Using Complex Functions:**
   The attacker can process inputs with complex functions like encryption and cryptographic hashing, which current and likely future constraint solvers cannot handle. In such cases, IntelliDroid will experience numerous constraint solver timeouts, which, although not necessarily indicative of malicious behavior, are infrequent enough to warrant further attention and possibly manual analysis.

### Related Work

Static analysis of Android applications has been widely used to detect malicious behavior or vulnerabilities [22], [25], [23], [29], [4], [16], [30]. IntelliDroid's static analysis is comparable to previous work, though it sometimes sacrifices precision for better scalability and analysis speed.

IntelliDroid is designed to complement dynamic analysis tools, allowing them to quickly identify and analyze paths likely to contain malicious behavior. It can be used with various dynamic analysis tools, such as TaintDroid [19], CopperDroid [39], DroidScope [44], VetDroid [47], or RiskRanker [27]. Similarly, IntelliDroid can aid reverse-engineering or manual analysis using sandboxing tools like DroidBox [18].

While IntelliDroid's extraction of path constraints is a form of symbolic execution, it is performed on a static abstraction of the program rather than a concrete execution trace. This generally provides faster performance compared to concolic test generation systems like Dart [26], EXE [15], and KLEE [14], which use concrete symbolic execution. Additionally, IntelliDroid focuses on generating inputs to trigger specific paths rather than obtaining code coverage, making its goals fundamentally different from these systems and more recent Android-focused concolic testing work, such as DynoDroid [31] and the ACTEve algorithm [2].

The work in [32] targets malicious code by exploring paths that branch on interesting input, although the input dependency tracking and constraint extraction are performed dynamically. Purely static constraint extraction and solving have been used in tools like Saturn for verification [43], and hybrid static/dynamic symbolic execution is used in MergePoint [7]. IntelliDroid is also similar to AEG [6], APEG [11], and DyTa [24], which generate malicious inputs to exercise vulnerabilities in program binaries. However, these systems do not target Android applications and thus do not handle consistent input injection or event-chains.

The work most closely related to IntelliDroid includes hybrid static/dynamic analyses such as AppAudit [42], ContentScope [28], AppIntent [45], SmartDroid [48], Smv-Hunter [37], and Brahmastra [9]. The main difference between IntelliDroid and these systems is the level of fidelity of the injected inputs. IntelliDroid can inject inputs into an actual Android system, enabling integration with full system dynamic analysis tools like TaintDroid [19]. To achieve this, it must detect event-chains and perform device-framework input injection.

In contrast, systems like AppAudit and ContentScope rely mainly on static analysis to find vulnerabilities and use dynamic analysis only to confirm the feasibility of the paths. Moreover, ContentScope focuses solely on content providers. IntelliDroid, however, aims to detect malware and must support and analyze a wider range of behavior. AppIntent also uses static analysis to identify relevant sections of code to execute but requires exhaustive dynamic symbolic execution to fully explore all behaviors, similar to concolic testing. Additionally, AppIntent, SmartDroid, Brahmastra, and Smv-Hunter only handle UI events.

### Conclusion

IntelliDroid is a targeted input generator that specifically exercises code paths in an application relevant to a dynamic analysis tool. This paper contributes several novel ideas, such as the use of targeted APIs as an abstraction for dynamic analysis techniques, event-chain detection and input generation, and device-framework injection. Using our prototype, we find that the static analysis component can identify and generate inputs to trigger the targeted behavior in less than 138.4 seconds on average. The generated inputs are able to trigger 70 out of 75 malicious behaviors in a set of malware, while saving the dynamic analysis from having to execute 95% of the application code. When integrated with TaintDroid [19] and compared against FlowDroid [4], we find that IntelliDroid-targeted TaintDroid offers better precision. A comparison with Monkey shows that IntelliDroid's targeted execution triggers malicious paths more precisely than a standard off-the-shelf input fuzzer.

### Acknowledgment

We would like to thank Zhen Huang, Mariana D’Angelo, Dhaval Miyani, Wei Huang, Beom Heyn Kim, Sukwon Oh, and Afshar Ganjali for their suggestions and feedback. We also thank the anonymous reviewers for their constructive comments. The research in this paper was supported by an NSERC CGS-M scholarship, a Bell Graduate scholarship, an NSERC Discovery grant, an ORF-RE grant, and a Tier 2 Canada Research Chair.

### References

[1] 3GPP, “Technical realization of Short Message Service (SMS),” 3rd Generation Partnership Project (3GPP), TS 23.040, Sep. 2014.
[2] S. Anand, M. Naik, M. J. Harrold, and H. Yang, “Automated concolic testing of smartphone apps,” in Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering. ACM, 2012, p. 59.
[3] “Apkparser,” September 2014. http://code.google.com/p/xml-apk-parser/, accessed: September 2014.
[4] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel, “FlowDroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps,” in Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM, 2014, p. 29.
[5] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “PScout: Analyzing the Android permission specification,” in Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS), Oct. 2012.
[6] T. Avgerinos, S. K. Cha, B. L. T. Hao, and D. Brumley, “AEG: Automatic exploit generation.” in Proceedings of the 18th Symposium on Network and Distributed System Security (NDSS), 2011, pp. 59–66.
[7] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley, “Enhancing symbolic execution with veritesting,” in Proceedings of the 36th International Conference on Software Engineering. ACM, 2014, pp. 1083–1094.
[8] D. Barrera, J. Clark, D. McCarney, and P. C. Van Oorschot, “Understanding and improving app installation security mechanisms through empirical analysis of android,” in Proceedings of the second ACM workshop on Security and privacy in smartphones and mobile devices. ACM, 2012, pp. 81–92.
[9] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath, R. Wang, and D. Wetherall, “Brahmastra: Driving apps to test the security of third-party components,” in Proceedings of the 23rd USENIX conference on Security Symposium. USENIX Association, 2014, pp. 1021–1036.
[10] T. Bläsing, L. Batyuk, A.-D. Schmidt, S. A. Camtepe, and S. Albayrak, “An android application sandbox system for suspicious software detection,” in Malicious and unwanted software (MALWARE), 2010 5th international conference on. IEEE, 2010, pp. 55–62.
[11] D. Brumley, P. Poosankam, D. Song, and J. Zheng, “Automatic patch-based exploit generation is possible: Techniques and implications,” in Proceedings of the 2008 IEEE Symposium on Security and Privacy, 2008, pp. 143–157.
[12] I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani, “Crowdroid: Behavior-based malware detection system for android,” in Proceedings of the 1st ACM workshop on Security and privacy in smartphones and mobile devices. ACM, 2011, pp. 15–26.
[13] J. Caballero, P. Poosankam, S. McCamant, D. Song et al., “Input generation via decomposition and re-stitching: Finding bugs in malware,” in Proceedings of the 17th ACM conference on Computer and communications security. ACM, 2010, pp. 413–425.
[14] C. Cadar, D. Dunbar, and D. R. Engler, “KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs.” in Proceedings of the 8th Symposium on Operating Systems Design and Implementation (OSDI), 2008, pp. 209–224.
[15] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler, “EXE: automatically generating inputs of death,” ACM Transactions on Information and System Security (TISSEC), vol. 12, no. 2, p. 10, 2008.
[16] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner, “Analyzing inter-application communication in Android,” in Proceedings of the 9th international conference on Mobile systems, applications, and services. ACM, 2011, pp. 239–252.
[17] L. De Moura and N. Bjørner, “Z3: An efficient SMT solver,” in Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2008, pp. 337–340.
[18] A. Desnos and P. Lantz, “DroidBox: An android application sandbox for dynamic analysis,” 2014, https://code.google.com/p/droidbox/, Last Accessed Oct, 2014.
[19] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth, “TaintDroid: an information-flow tracking system for realtime privacy monitoring on smartphones,” in Proceedings of the 9th Symposium on Operating Systems Design and Implementation (OSDI), Oct. 2010, pp. 1–6.
[20] Ericsson Mobility, “Interim update: mobility report,” Feb. 2015. http://www.ericsson.com/res/docs/2015/ericsson-mobility-report-feb-2015-interim.pdf.
[21] M. D. Ernst, “Static and dynamic analysis: Synergy and duality,” in WODA 2003: ICSE Workshop on Dynamic Analysis, 2003, pp. 24–27.
[22] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner, “Android permissions demystified,” in Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS), Oct. 2011, pp. 627–638.
[23] A. P. Fuchs, A. Chaudhuri, and J. S. Foster, “Scandroid: Automated security certification of android applications,” Manuscript, Univ. of Maryland, http://www.cs.umd.edu/~avik/projects/scandroidascaa, 2009.
[24] X. Ge, K. Taneja, T. Xie, and N. Tillmann, “Dyta: dynamic symbolic execution guided with static verification results,” in Proceedings of the 33rd International Conference on Software Engineering (ICSE), 2011, pp. 992–994.
[25] C. Gibler, J. Crussell, J. Erickson, and H. Chen, AndroidLeaks: automatically detecting potential privacy leaks in Android applications on a large scale. Springer, 2012.
[26] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed automated random testing,” in Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, ser. PLDI ’05. New York, NY, USA: ACM, 2005, pp. 213–223.
[27] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang, “RiskRanker: scalable and accurate zero-day android malware detection,” in Proceedings of the 10th international conference on Mobile systems, applications, and services. ACM, 2012, pp. 281–294.
[28] Y. Z. X. Jiang, “Detecting passive content leaks and pollution in android applications,” in Proceedings of the 20th Network and Distributed System Security Symposium (NDSS), 2013.
[29] J. Kim, Y. Yoon, K. Yi, J. Shin, and S. Center, “Scandal: Static analyzer for detecting privacy leaks in android applications,” MoST, 2012.
[30] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “Chex: statically vetting android apps for component hijacking vulnerabilities,” in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 229–240.
[31] A. Machiry, R. Tahiliani, and M. Naik, “Dynodroid: An input generation system for android apps,” in Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, 2013, pp. 224–234.
[32] A. Moser, C. Kruegel, and E. Kirda, “Exploring multiple execution paths for malware analysis,” in Security and Privacy, 2007. SP’07. IEEE Symposium on. IEEE, 2007, pp. 231–245.
[33] D. Octeau, S. Jha, and P. McDaniel, “Retargeting android applications to java bytecode,” in Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering. ACM, 2012, p. 6.
[34] M. Parkour, “Contagio mobile,” 2015, http://contagiominidump.blogspot.ca/, Last Accessed Aug, 2015.
[35] “Robotium,” 2014, https://code.google.com/p/robotium/.
[36] A. Shabtai, U. Kanonov, Y. Elovici, C. Glezer, and Y. Weiss, “Andromaly: a behavioral malware detection framework for android devices,” Journal of Intelligent Information Systems, vol. 38, no. 1, pp. 161–190, 2012.
[37] D. Sounthiraraj, J. Sahs, G. Greenwood, Z. Lin, and L. Khan, “Smv-hunter: Large scale, automated detection of SSL/TLS man-in-the-middle vulnerabilities in android apps,” in Proceedings of the 19th Network and Distributed System Security Symposium, 2014.
[38] V. Svajcer, “Sophos report,” http://www.sophos.com/en-us/medialibrary/PDFs/other/security-mobile-threat-2014-sophos-mobile-security-threat-report.pdf.
[39] K. Tam, S. J. Khan, A. Fattori, and L. Cavallaro, “Copperdroid: Automatic reconstruction of android malware behaviors,” in Proc. of the Symposium on Network and Distributed System Security (NDSS), 2015.
[40] “Testing fundamentals,” 2014, http://developer.android.com/tools/testing/testing-android.html, Last Accessed Oct, 2014.
[41] “Watson libraries for analysis,” http://wala.sourceforge.net, accessed: September 2014.
[42] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu, “Effective real-time android application auditing,” in Proceedings of the 2015 IEEE Symposium on Security and Privacy, ser. SP ’15. IEEE Computer Society, 2015.
[43] Y. Xie and A. Aiken, “Saturn: A scalable framework for error detection using boolean satisfiability,” ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 29, no. 3, p. 16, 2007.
[44] L.-K. Yan and H. Yin, “DroidScope: Seamlessly reconstructing the OS and Dalvik semantic views for dynamic android malware analysis.” in Proceedings of the 21st USENIX Security Symposium, 2012, pp. 569–584.
[45] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang, “AppIntent: Analyzing sensitive data transmission in android for privacy leakage detection,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), 2013, pp. 1043–1054.
[46] H. Ye, S. Cheng, L. Zhang, and F. Jiang, “Droidfuzzer: Fuzzing the android apps with intent-filter tag,” in Proceedings of International Conference on Advances in Mobile Computing & Multimedia. ACM, 2013, p. 68.
[47] Y. Zhang, M. Yang, B. Xu, Z. Yang, G. Gu, P. Ning, X. S. Wang, and B. Zang, “Vetting undesirable behaviors in android apps with permission use analysis,” in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 2013, pp. 611–622.
[48] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou, “SmartDroid: An automatic system for revealing UI-based trigger conditions in android applications,” in Proceedings of the second ACM workshop on Security and privacy in smartphones and mobile devices. ACM, 2012, pp. 93–104.
[49] Y. Zhou and X. Jiang, “Dissecting Android malware: Characterization and evolution,” in Proceedings of the 2012 IEEE Symposium on Security and Privacy. IEEE, 2012, pp. 95–109.
[50] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang, “Hey, you, get off of my market: Detecting malicious apps in official and alternative android markets.” in NDSS, 2012.