### Optimized Text

#### Expected Occurrences of Hardware Fatal Errors
We anticipate that these issues will only arise during hardware fatal errors. By assuming the use of a single CPU core per virtual machine (VM) in our prototype, we mitigate the risk of an attacker using a second core to send a non-maskable interrupt (NMI) to the core running trampoline code, thereby disrupting the execution flow. This assumption also prevents other race conditions associated with multi-core architectures.

#### Anti-Circumvention Techniques
We acknowledge that some of the anti-circumvention techniques mentioned are highly specific to the type of hooking implemented. For instance, the kernel code and data structures that link system call events to the System Service Dispatch Table (SSDT) hooks are relatively few and easy to protect, allowing us to create a secure chain. However, in a more general scenario where hooks can be placed in arbitrary code or data structures, creating an equivalent protection chain is more complex. An attacker could, for example, patch kernel code preceding the execution of a code hook to bypass it. Solutions such as SecVisor [32] could be integrated into our architecture to ensure kernel code integrity and prevent such circumventions.

Data hooks in arbitrary kernel data structures present a more significant challenge due to the volatile nature of data. Existing approaches, such as passive monitoring of kernel control data structures [25], mediation of changes to kernel data structures [38], and semantic integrity checking [24], can be employed to increase the difficulty for an attacker. Although these techniques help mitigate generic circumvention problems, their pervasive nature would add a significant performance impact to the overall architecture. Thus, a balance between security and performance must be struck, allowing each application to make an appropriate tradeoff based on its needs.

### Related Work

#### Partitioning and Isolation
The isolation properties provided by virtualization and their applications to security were first studied and formalized by Madnick and Donovan [19], Rushby [28], and Kelem [16]. Garfinkel et al. [8] demonstrated how these properties can enable OSes with different security requirements to coexist in a single environment using a special-purpose hypervisor. Ta-Min et al. [36] furthered this by partitioning OS system calls into untrusted and trusted domains, routing them according to a policy. Our work builds on a similar concept but partitions a single application between domains and protects the components in the untrusted domain. Attention has also been given to isolation enforcement through inter-VM communication control, as seen in Sailer et al. [31] and the ongoing XSM project [5].

#### Passive Monitoring
The exposure of traditional security monitors to attackers has motivated the creation of isolated environments for safe monitoring. Petroni et al. proposed CoPilot, a co-processor-based kernel integrity monitor that runs on a PCI card [23] and monitors kernel memory using DMA. This was later enhanced to include higher-level semantic consistency checks [24]. Others have used virtualization to achieve similar goals without special hardware. Garfinkel et al. introduced virtual machine introspection (VMI) [9], which was further developed for attack replaying [15], passive control-flow integrity checking [25], and intrusion detection [18]. Payne et al. established security requirements for secure VM monitoring and detailed the mechanics of introspection [22]. Despite its widespread adoption, VMI is limited to passive system checks, making event-based monitoring challenging. Our architecture uses memory introspection to complement our protected hooking infrastructure.

#### Memory Protection
Introspection's passive nature means it can only detect, not prevent, integrity violations. Microsoft’s PatchGuard [20] attempts to protect key kernel data structures from modifications but is ineffective because it operates in the same domain as the attacker. Seshadri et al. proposed a thin hypervisor leveraging virtualized memory to protect kernel code and certain control flow transitions [32]. Xu et al. use a similar technique to implement an intra-kernel access control framework [38]. In Lares, we use hypervisor-based memory protection but with different goals: protecting specific guest OS kernel components necessary for active monitoring. We provide fine-grained memory protection for the guest OS without requiring special hardware, unlike approaches such as Mondrix [37].

#### Secure Code Execution
While memory protection focuses on preventing integrity violations, code attestation ensures correct code execution. Pioneer [33] implements verifiable code execution by constructing a self-checking piece of code executed atomically within an untrusted kernel. Our approach performs a similar task with trampoline code by disabling interrupts system-wide while processing and sending hook notifications. Our task is simpler than Pioneer's, as our memory protections prevent intruders from modifying the code before execution. Hardware support for trusted code execution, such as Intel Trusted Execution Technology (TxT) [11] and AMD Secure Virtual Machine (SVM) extensions [2], provides stronger assurance and reduces system complexity.

#### Active Monitoring
Active monitoring plays a crucial role in systems security due to its event-driven nature and potential for real-time attack prevention. Systems like anti-virus tools [35] and host-based intrusion detection systems [7] commonly hook OS code/data and user applications to monitor for suspicious behavior. Techniques such as system call interposition [26] and control flow integrity [1] are used by these tools. However, their fundamental limitation is exposure to attackers, making them prone to tampering. More recently, active monitors have leveraged the isolation provided by virtualization. Examples include VMScope [12], which provides system call tracing, and systems that log all I/O activity of a VM for backtracking and replay [6]. Payne et al. intercept low-level guest disk activity at domain 0 to detect suspicious file system modifications [22]. Malware analysis tools [21, 39, 40] use instruction-level active monitoring in full-emulators like QEMU [4]. Taint-based malware analysis systems, such as Panorama [40], require monitoring individual instructions to trace memory reads and writes. These techniques, however, are limited to low-level event monitoring, making them unsuitable for tools requiring higher abstraction levels. Xenprobes [27] addresses this by providing a framework for placing hooks in arbitrary locations inside a VM, but they do not focus on protecting their hooks.

This analysis shows that existing active monitoring solutions do not provide both a protected and flexible hooking infrastructure with acceptable performance. As event-driven security tools migrate to virtualized environments [34], the need for such solutions will grow.

### Conclusions
Active monitoring is essential for state-of-the-art host-based security applications like intrusion detection and anti-virus tools. Recent research has focused on moving security applications into isolated VMs, but the resulting architectures do not support active monitoring. Lares addresses this by enabling security tools to perform active monitoring while benefiting from the increased security of an isolated VM. Our security analysis shows that Lares is suitable for deployment in production systems, and our performance evaluation indicates a minimal impact on system performance. The Lares architecture is generally applicable to any application requiring secure active monitoring.

### Acknowledgments
This material is based upon work supported in part by the National Science Foundation under Grant No. CNS-0627430. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References
[1] M. Abadi, M. Budiu, and ´U. E. J. Ligatti. Control-Flow Integrity. In Proceedings of the ACM Conference on Computer and Communications Security, 2005.
[2] Advanced Micro Devices. Amd64 architecture programmer’s manual volume 2: System programming, 2007.
[3] W. A. Arbaugh, D. J. Farber, and J. M. Smith. A secure and reliable bootstrap architecture. In Proceedings of the IEEE Symposium on Computer Security and Privacy, 1997.
[4] F. Bellard. QEMU, a Fast and Portable Dynamic Translator. In Proceedings of the 2005 USENIX Annual Technical Conference, 2005.
[5] G. Coker. Xen security modules (XSM). Presented at the 2007 Xen Summit.
[6] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M. Chen. Revirt: Enabling intrusion analysis through virtual-machine logging and replay. In Proceedings of the Symposium on Operating Systems Design and Implementation, 2002.
[7] S. Forrest, A. S. Perelson, L. Allen, and R. Cherukuri. Self-nonself discrimination in a computer. In Proceedings of the IEEE Symposium on Research in Security and Privacy, Los Alamitos, CA, USA, 1994.
[8] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A virtual machine-based platform for trusted computing. In Proceedings of ACM Symposium on Operating Systems Principles, 2003.
[9] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. In Proceedings of the Network and Distributed Systems Security Symposium, 2003.
[10] G. Hoglund. Rootkits: Subverting the Windows Kernel. Addison Wesley, 2005.
[11] Intel Corporation. Intel trusted execution technology, 2007.
[12] X. Jiang and X. Wang. "Out-of-the-Box" monitoring of VM-based high-interaction honeypots. In Proceedings of the International Symposium on Recent Advances in Intrusion Detection, 2007.
[13] X. Jiang, D. Xu, and X. Wang. Stealthy malware detection through VMM-based "Out-of-the-Box" semantic view reconstruction. In Proceedings of the ACM Conference on Computer and Communications Security, 2007.
[14] S. T. Jones, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau. Antfarm: Tracking processes in a virtual machine environment. In Proceedings of the USENIX Annual Technical Conference, June 2006.
[15] A. Joshi, S. T. King, G. W. Dunlap, and P. M. Chen. Detecting past and present intrusions through vulnerability-specific predicates. In Proceedings of ACM Symposium on Operating Systems Principles (SOSP), 2005.
[16] N. L. Kelem and R. J. Feiertag. A separation model for virtual machine monitors. In Proceedings of the IEEE Symposium on Research in Security and Privacy, 1991.
[17] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J. Wang, and J. R. Lorch. SubVirt: Implementing malware with virtual machines. In IEEE Symposium on Security and Privacy, 2006.
[18] K. Kourai and S. Chiba. Hyperspector: Virtual distributed monitoring environments for secure intrusion detection. In Proceedings of the ACM/USENIX International Conference on Virtual Execution Environments, 2005.
[19] S. E. Madnick and J. J. Donovan. Application and analysis of the virtual machine approach to information system security and isolation. In Proceedings of the Workshop on Virtual Computer Systems, 1973.
[20] Microsoft Corporation. Kernel patch protection: Frequently asked questions. http://www.microsoft.com/whdc/driver/kernel/64bitpatch FAQ.mspx.
[21] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the IEEE Symposium of Security and Privacy, 2007.
[22] B. D. Payne, M. Carbone, and W. Lee. Secure and flexible monitoring of virtual machines. In Proceedings of the Annual Computer Security Applications Conference, 2007.
[23] N. L. Petroni, Jr., T. Fraser, J. Molina, and W. A. Arbaugh. Copilot - a coprocessor-based kernel runtime integrity monitor. In Proceedings of the 13th USENIX Security Symposium, August 2004.
[24] N. L. Petroni, Jr., T. Fraser, A. Walters, and W. A. Arbaugh. An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In Proceedings of the USENIX Security Symposium, 2006.
[25] N. L. Petroni, Jr. and M. Hicks. Automated detection of persistent kernel control-flow attacks. In Proceedings of the ACM Conference on Computer and Communications Security, 2007.
[26] N. Provos. Improving host security with system call policies. In Proceedings of the 12th USENIX Security Symposium, 2003.
[27] N. A. Quynh and K. Suzaki. Xenprobe: A lightweight user-space probing framework for xen virtual machine. In Proceedings of the USENIX Annual Technical Conference, 2007.
[28] J. M. Rushby. Proof of separability: A verification technique for a class of security kernels. Lecture Notes in Computer Science, 137:352 – 357, April 1982.
[29] J. Rutkowska. Rootkit hunting vs. compromise detection. In Proceedings of Black Hat Federal, 2006.
[30] J. Rutkowska. Subverting vista kernel for fun and profit. In Proceedings of Black Hat USA, 2006.
[31] R. Sailer, T. Jaeger, E. Valdez, R. Caceres, R. Perez, S. Berger, J. Griffin, and L. van Doorn. Building a MAC-based security architecture for the xen open-source hypervisor. In Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC), December 2005.
[32] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. In Proceedings of the ACM Symposium on Operating System Principles, 2007.
[33] A. Seshadri, M. Luk, E. Shi, A. Perrig, L. van Doorn, and P. Khosla. Pioneer: Verifying integrity and guaranteeing execution of code on legacy platforms. In Proceedings of ACM Symposium on Operating Systems Principles, 2005.
[34] Symantec Corporation. Symantec Virtual Security Solution and PCs with Intel vPro Technology, 2007.
[35] P. Szor. The Art of Computer Virus Research and Defense. Symantec Press, 2005.
[36] R. Ta-Min, L. Litty, and D. Lie. Splitting Interfaces: Making Trust Between Applications and Operating Systems Configurable. In Proceedings of the Symposium on Operating Systems Design and Implementation, 2006.
[37] E. Witchel, J. Rhee, and K. Asanovic. Mondrix: Memory Isolation for Linux using Mondriaan Memory Protection. In Proceedings of the ACM Symposium on Operating Systems Principles, 2005.
[38] M. Xu, X. Jiang, R. Sandhu, and X. Zhang. Towards a VMM-based usage control framework for OS kernel integrity protection. In Proceedings of the Symposium on Access Control Models and Technologies, 2007.
[39] H. Yin, Z. Liang, and D. Song. HookFinder: Identifying and understanding malware hooking behaviors. In Proceedings of the Network and Distributed Systems Security Symposium (NDSS), February 2008.
[40] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Capturing system-wide information flow for malware detection and analysis. In Proceedings of the ACM Conference of Computer and Communication Security, 2007.