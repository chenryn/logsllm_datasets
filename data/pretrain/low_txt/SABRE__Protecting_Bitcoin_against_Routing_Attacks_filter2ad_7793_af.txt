### Symposium on IEEE, 2017

#### References

1. A. Biryukov, D. Khovratovich, and I. Pustogarov, "Deanonymisation in the Bitcoin P2P Network," in *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14)*, pp. 15–29, 2014. [Online]. Available: <http://doi.acm.org/10.1145/2660267.2660379>

2. P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford, C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese et al., "P4: Programming Protocol-Independent Packet Processors," *ACM SIGCOMM Computer Communication Review*, vol. 44, no. 3, pp. 87–95, 2014.

3. R. Bush and R. Austein, "The Resource Public Key Infrastructure (RPKI) to Router Protocol," RFC 6810, Jan. 2013. [Online]. Available: <https://rfc-editor.org/rfc/rfc6810.txt>

4. M. Castro, P. Druschel, A.-M. Kermarrec, A. Nandi, A. Rowstron, and A. Singh, "Splitstream: High-Bandwidth Multicast in Cooperative Environments," in *ACM SIGOPS Operating Systems Review*, vol. 37, no. 5, pp. 298–313, 2003.

5. L. Chang, J. X. Yu, L. Qin, X. Lin, C. Liu, and W. Liang, "Efficiently Computing k-Edge Connected Components via Graph Decomposition," in *Proceedings of the 2013 ACM SIGMOD International Conference on Management of Data (SIGMOD '13)*, pp. 205–216, 2013. [Online]. Available: <http://doi.acm.org/10.1145/2463676.2465323>

6. C. Decker and R. Wattenhofer, "Information Propagation in the Bitcoin Network," in *Peer-to-Peer Computing (P2P), 2013 IEEE Thirteenth International Conference on*, pp. 1–10, 2013.

7. H. Eriksson, "Mbone: The Multicast Backbone," *Communications of the ACM*, vol. 37, no. 8, pp. 54–60, 1994.

8. I. Eyal, A. E. Gencer, E. G. Sirer, and R. Van Renesse, "Bitcoin-NG: A Scalable Blockchain Protocol," in *NSDI*, pp. 45–59, 2016.

9. U. Feige, "A Threshold of ln n for Approximating Set Cover," *J. ACM*, vol. 45, no. 4, pp. 634–652, Jul. 1998. [Online]. Available: <http://doi.acm.org/10.1145/285055.285059>

10. L. Gao and J. Rexford, "Stable Internet Routing Without Global Coordination," *IEEE/ACM Transactions on Networking (TON)*, vol. 9, no. 6, pp. 681–692, 2001.

11. Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, "Algorand: Scaling Byzantine Agreements for Cryptocurrencies," in *Proceedings of the 26th Symposium on Operating Systems Principles*. ACM, 2017, pp. 51–68.

12. S. Goldberg, "Why Is It Taking So Long to Secure Internet Routing?" *Commun. ACM*, vol. 57, pp. 56–63, 2014.

13. S. Goldberg, M. Schapira, P. Hummon, and J. Rexford, "How Secure Are Secure Interdomain Routing Protocols," in *ACM SIGCOMM Computer Communication Review*, vol. 40, no. 4, pp. 87–98, 2010.

14. A. Gupta, R. MacDavid, R. Birkner, M. Canini, N. Feamster, J. Rexford, and L. Vanbever, "An Industrial-Scale Software Defined Internet Exchange Point," in *Proceedings of the 13th USENIX Symposium on Networked Systems Design and Implementation (NSDI'16)*. USENIX, 2016.

15. A. Gupta, L. Vanbever, M. Shahbaz, S. Donovan, R. Clark, N. Feamster, J. Rexford, and S. Shenker, "SDX: A Software Defined Internet Exchange," in *Proceedings of the 2014 ACM SIGCOMM Conference (SIGCOMM'14)*. ACM, 2014.

16. X. Jin, X. Li, H. Zhang, N. Foster, J. Lee, R. Soulé, C. Kim, and I. Stoica, "NetChain: Scale-Free Sub-RTT Coordination," in *15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 18)*, pp. 35–49, 2018. [Online]. Available: <https://www.usenix.org/conference/nsdi18/presentation/jin>

17. X. Jin, X. Li, H. Zhang, R. Soulé, J. Lee, N. Foster, C. Kim, and I. Stoica, "NetCache: Balancing Key-Value Stores with Fast In-Network Caching," in *Proceedings of the 26th Symposium on Operating Systems Principles*. ACM, 2017, pp. 121–136.

18. J. Karlin, S. Forrest, and J. Rexford, "Pretty Good BGP: Improving BGP by Cautiously Adopting Routes," in *Proceedings of the 2006 IEEE International Conference on Network Protocols (ICNP '06)*, pp. 290–299, 2006. [Online]. Available: <http://dx.doi.org/10.1109/ICNP.2006.320179>

19. A. Kiayias, A. Russell, B. David, and R. Oliynykov, "Ouroboros: A Provably Secure Proof-of-Stake Blockchain Protocol," in *Annual International Cryptology Conference*. Springer, 2017, pp. 357–388.

20. E. K. Kogias, P. Jovanovic, N. Gailly, I. Khoffi, L. Gasser, and B. Ford, "Enhancing Bitcoin Security and Performance with Strong Consistency via Collective Signing," in *25th USENIX Security Symposium (USENIX Security 16)*, pp. 279–296, 2016.

21. E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, and B. Ford, "OmniLedger: A Secure, Scale-Out, Decentralized Ledger." *IACR Cryptology ePrint Archive*, vol. 2017, p. 406, 2017.

22. B. Lantz, B. Heller, and N. McKeown, "A Network in a Laptop: Rapid Prototyping for Software-Defined Networks," in *Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks*. ACM, 2010, p. 19.

23. M. Lepinski and S. Kent, "An Infrastructure to Support Secure Internet Routing," RFC 6480, Feb. 2012. [Online]. Available: <https://rfc-editor.org/rfc/rfc6480.txt>

24. M. Lepinski and K. Sriram, "BGPsec Protocol Specification," RFC 8205, Sep. 2017. [Online]. Available: <https://rfc-editor.org/rfc/rfc8205.txt>

25. A. Miller, J. Litton, A. Pachulski, N. Gupta, D. Levin, N. Spring, and B. Bhattacharjee, "Discovering Bitcoin's Public Topology and Influential Nodes," 2015.

26. S. Nakamoto, "Bitcoin: A Peer-to-Peer Electronic Cash System," 2008.

27. T. Neudecker, P. Andelfinger, and H. Hartenstein, "Timing Analysis for Inferring the Topology of the Bitcoin Peer-to-Peer Network," in *Ubiquitous Intelligence & Computing, Advanced and Trusted Computing, Scalable Computing and Communications, Cloud and Big Data Computing, Internet of People, and Smart World Congress, 2016 Intl IEEE Conferences*, pp. 358–367, 2016.

28. R. Nithyanand, R. Singh, S. Cho, and P. Gill, "Holding All the ASes: Identifying and Circumventing the Pitfalls of AS-Aware Tor Client Design," arXiv preprint arXiv:1605.03596, 2016.

29. A. Pilosov and T. Kapela, "Stealing The Internet. An Internet-Scale Man In The Middle Attack." DEFCON 16.

30. Y. Rekhter, T. Li, and S. Hares, "A Border Gateway Protocol 4 (BGP-4)," RFC 4271 (Draft Standard), Jan. 2006. [Online]. Available: <http://www.ietf.org/rfc/rfc4271.txt>

31. V. Sivaraman, S. Narayana, O. Rottenstreich, S. Muthukrishnan, and J. Rexford, "Heavy-Hitter Detection Entirely in the Data Plane," in *Proceedings of the Symposium on SDN Research*. ACM, 2017, pp. 164–176.

32. O. Starov, R. Nithyanand, A. Zair, P. Gill, and M. Schapira, "Measuring and Mitigating AS-Level Adversaries Against Tor," arXiv preprint arXiv:1505.05173, 2016.

33. Y. Sun, A. Edmundson, N. Feamster, M. Chiang, and P. Mittal, "Counter-Raptor: Safeguarding Tor Against Active Routing Attacks," in *Security and Privacy (SP), 2017 IEEE Symposium on*, pp. 977–992, 2017.

34. Y. Sun, A. Edmundson, L. Vanbever, O. Li, J. Rexford, M. Chiang, and P. Mittal, "Raptor: Routing Attacks on Privacy in Tor," in *USENIX Security Symposium*, pp. 271–286, 2015.

### Appendix A: Algorithms

Below we include the pseudocode of the two main algorithms described in the paper in Sections IV-B and IV-C, respectively.

**Algorithm 1: Find a Set of ASes to Locate Relays**

```plaintext
function LOCATERELAYS(R, R_scens, N, k)
    // Finds N k-connected relay ASes
    // R_scens: Scenarios that each candidate relay AS in R protects against
    R' <- {}
    R'_scens <- {}
    while R'.length < N do
        Rs <- {r : r ∈ R \ R' s.t. G[R' ∪ r] is k-connected}
        R'.add(FINDNEXT(Rs, R_scens, R'_scens))
    end while
    return R'
end function

function FINDNEXT(Rs, R_scens, R'_scens)
    // ASes to host relay nodes
    // Scenarios relays in R' protect against
    // Candidate
    // Finds best relay to add to R'
    best_r <- None; best_scens <- {};
    for r in Rs do
        tmp_scens <- R'_scens ∪ R_scens[r]
        if best_scens.effect < tmp_scens.effect then
            best_scens <- tmp_scens
            best_r <- r
        end if
    end for
    R'_scens.add(R_scens[best_r])
    return best_r
end function
```

**Algorithm 2: Compare Two Paths Based on Preference**

```plaintext
function MOREPREFERRED(pathA, pathB)
    // Returns 0 if pathA is more preferred and 1 otherwise
    while pathA and pathB and hopA.pick == hopB.pick do
        hopA <- pathA.pop()
        hopB <- pathB.pop()
    end while
    if hopA.type != hopB.type then
        switch (hopA.type, hopB.type) do
            case (customer, peer):
                return 0
            case (customer, provider):
                return 0
            case (peer, provider):
                return 0
            case (peer, customer):
                return 1
            case (provider, customer):
                return 0
            case (provider, peer):
                return 1
        end switch
    else
        if len(pathA) == len(pathB) then
            return 1
        return argmin(len(pathA), len(pathB))
    end if
end function
```

### Figures

**Figure 13:** When tie breaks in favor of the legitimate destinations: a SABRE of only 6 relays that are fully connected prevents all attackers from isolating more than 16%.

**Figure 14:** When tie breaks in favor of the legitimate destinations: a SABRE of 10 5-connected relays protects 95% of the clients from 99.5% of the AS-level adversaries.

**Figure 15:** When tie breaks in favor of the legitimate destinations: the largest possible partition by any attacker is 14% for a SABRE of 6 relays that is 5-connected.

**Figure 16:** When tie breaks in favor of the legitimate destinations: a SABRE of 20 relays that are 1-connected can secure 100% of the clients against more than 98% of attackers.

### Results with Ties Against the Attacker

Although SABRE significantly improves the security of Bitcoin against routing attacks, the exact partition sizes and number of vulnerable clients depend on the tie-breaking decisions, namely which path is chosen in cases where the competing routes are equivalent economically and length-wise. In Section VII, we assumed that the tie always breaks for the attacker. In the following, we include the same analysis, now assuming that the tie-breaking favors the legitimate destination.