### Overlap in Controller Functions

Different controllers often share overlapping functionalities. As a result, users do not need to replace the entire list of sensitive methods when scaling to a new controller.

### VIII. Related Work

#### Security Vulnerabilities in SDN

Recently, researchers have identified numerous security issues in Software-Defined Networking (SDN). These vulnerabilities can be broadly categorized into two types: attacks originating from the data plane and those from the control plane.

1. **Data Plane Attacks:**
   - Research by [34], [39], [20], [19], [35], and [42] has shown that controlling a data plane device, such as switches or hosts, can introduce serious security and reliability issues to SDN networks.
   - For instance, ConGuard [42] demonstrated that a malicious network device or host can exploit race conditions in the control plane, leading to various attack effects.
   - Our work differs by discovering a new type of control plane vulnerability that can be remotely exploited through the creation of malicious data dependencies.

2. **Control Plane Attacks:**
   - Studies by [16] and [37] highlight that a malicious but underprivileged control plane application (app) can pose significant risks to the control plane, even if security policies are enforced.
   - ProvSDN [37] discovered and mitigated the Cross-App Poisoning (CAP) attack, which bypasses SDN role-based access control and compromises control plane integrity with malicious SDN applications.
   - Unlike these attacks, which require a malicious app to be installed in the control plane, the D2C2 attack can be launched remotely from the data plane. It creates new data dependencies in an unexpected manner, establishing new attack paths to sensitive methods deep within the control plane.

#### Security Enhancements in SDN

To mitigate potential vulnerabilities and attacks in SDN, researchers have developed several security applications and enhancements. For example:

- **SE-FloodLight [29]:** This system detects and reconciles conflicting flow rules from different control applications using a security enforcement kernel. However, it is unable to mitigate D2C2 attacks due to its inability to detect the creation of malicious data dependencies.
- **INDAGO [24]:** A static analysis framework that identifies malicious SDN applications by extracting and classifying semantic features.
- **SHIELD [23]:** Another static analysis tool that categorizes malicious behaviors in SDN applications.
- Since D2C2 attacks do not require any malicious applications to be installed, these enhancements are not suitable for detecting D2C2 attacks.

#### SDN Testing and Auditing

Researchers have also developed tools to help detect potential SDN bugs and vulnerabilities. Popular approaches include:

- **Fuzzing Techniques:** Tools like BEADS [21] use protocol fuzzing to identify potential risks in the protocol handling logic within the control channel. However, these black-box approaches cannot perform fine-grained data flow analysis to detect the critical creations of potentially malicious data dependencies required for D2C2 attacks.
- **Data/Control Flow Analysis:** Many studies, including [40], [24], [37], and [23], leverage static program analysis techniques (e.g., taint analysis) to pinpoint vulnerable data flows or control flows. For example, CAP attacks [37] use data flow analysis to study data sharing relationships between different control plane applications.
- **SVHunter:** While SVHunter uses a similar methodology to previous work, its goal is to identify existing data dependencies that are vulnerable to the unique data poisoning strategy of the D2C2 attack.

### IX. Conclusion

In this work, we approach the vulnerability analysis problem of SDN networks from a new perspective. We present a novel attack that leverages legitimate protocol interactions to abuse sensitive methods in multiple SDN control plane components. The significance of this work is highlighted by two key indicators:

1. **New Discovery:** A new type of attack is discovered, allowing attackers to achieve greater control plane reachability, thus expanding the SDN attack surface. This led to the discovery of 18 zero-day SDN vulnerabilities, all of which can be exploited remotely to introduce serious attack effects to the control plane.
2. **SVHunter Tool:** We developed SVHunter, a unique tool that effectively identifies newly discovered D2C2 vulnerabilities and constructs corresponding exploit chains. The tool combines data flow backtracking, an event reasoning language to formally specify the preconditions and postconditions of data dependency chaining events, and automated causality reasoning.

### Acknowledgement

We would like to thank our paper shepherd, David Choffnes, and the anonymous reviewers for their insightful feedback, which helped shape the final version of this paper. This work was supported in part by ARO W911NF-13-1-0421 (MURI), W911NF-15-1-0576, ONR N00014-16-1-2265, N00014-16-1-2912, N00014-17-1-2894, NSF CNS-1814679, CNS-1652790, 1617985, 1642129, 1700544, and 1740791.

Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16, 2020, at 09:22:58 UTC from IEEE Xplore. Restrictions apply.

### References

[1] ANTLR tool, http://www.antlr.org.
[2] CVE-2016-2074: Open vSwitch Buffer Overflow, https://nvd.nist.gov/vuln/detail/CVE-2016-2074.
[3] CVE-2017-3881: Cisco Catalyst Remote Code Execution, https://nvd.nist.gov/vuln/detail/CVE-2017-3881.
[4] HPE VAN SDN Controller, https://h17007.www1.hpe.com/ie/en/networking/solutions/technology/sdn.
[5] Huawei Agile Controller, https://e.huawei.com/us/products/enterprise-networking/sdn-controller.
[6] Mininet: Rapid prototyping for software-defined networks, http://yuba.stanford.edu/foswiki/bin/view/OpenFlow/.
[7] Onos controller platform, https://onosproject.org/.
[8] OpenDaylight Support, https://wiki.opendaylight.org/view/OpenDaylight_OpenFlow_Plugin:TLS_Support.
[9] OpenFlow and REST API Security Configuration, https://floodlight.atlassian.net/wiki/spaces/floodlightcontroller/pages/5636115/OpenFlow+and+REST+API+Security+Configuration.
[10] XML External Entity attack (XXE), https://en.wikipedia.org/wiki/XML_external_entity_attack.
[11] A. Alhuzali, R. Gjomemo, B. Eshete, and V. Venkatakrishnan, “{NAVEX}: Precise and scalable exploit generation for dynamic web applications,” in 27th {USENIX} Security Symposium ({USENIX} Security 18), 2018, pp. 377–392.
[12] W. Braun and M. Menth, “Software-defined networking using openflow: Protocols, applications and architectural design choices,” Future Internet, vol. 6, no. 2, pp. 302–336, 2014.
[13] J. Cao, Q. Li, R. Xie, K. Sun, G. Gu, M. Xu, and Y. Yang, “The crosspath attack: Disrupting the sdn control channel via shared links,” in Proceedings of The 28th USENIX Security Symposium (Security’19), August 2019.
[14] B. Chandrasekaran and T. Benson, “Tolerating sdn application failures with legosdn,” in Proceedings of the 13th ACM workshop on hot topics in networks. ACM, 2014, p. 22.
[15] L. De Moura and N. Bjørner, “Z3: An efficient smt solver,” in International conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2008, pp. 337–340.
[16] V. H. Dixit, A. Doupé, Y. Shoshitaishvili, Z. Zhao, and G.-J. Ahn, “Aim-sdn: Attacking information mismanagement in sdn-datastores,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 664–676.
[17] N. Feamster, J. Rexford, and E. Zegura, “The road to sdn: an intellectual history of programmable networks,” ACM SIGCOMM Computer Communication Review, vol. 44, no. 2, pp. 87–98, 2014.
[18] E. Haleplidis, K. Pentikousis, S. Denazis, J. H. Salim, D. Meyer, and O. Koufopavlou, “Software-defined networking (sdn): Layers and architecture terminology,” Tech. Rep., 2015.
[19] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning network visibility in software-defined networks: New attacks and countermeasures,” in Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS), February 2015.
[20] S. Jero, W. Koch, R. Skowyra, H. Okhravi, C. Nita-Rotaru, and D. Bigelow, “Identifier binding attacks and defenses in software-defined networks,” in Proceeding of the 24th USENIX Security Symposium (USENIX Security), August 2017.
[21] S. Jero, X. Bu, C. Nita-Rotaru, H. Okhravi, R. Skowyra, and S. Fahmy, “Beads: Automated attack discovery in openflow-based sdn systems,” in International Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 2017, pp. 311–333.
[22] P. Lam, E. Bodden, O. Lhotak, and L. Hendren, “The soot framework for java program analysis: a retrospective,” in CETUS 2011.
[23] C. Lee and S. Shin, “Shield: An automated framework for static analysis of sdn applications,” in Proceedings of the 2016 ACM International Workshop on Security in Software Defined Networks & Network Function Virtualization. ACM, 2016, pp. 29–34.
[24] C. Lee, C. Yoon, S. Shin, and S. K. Cha, “Indago: A new framework for detecting malicious sdn applications,” in 2018 IEEE 26th International Conference on Network Protocols (ICNP). IEEE, 2018, pp. 220–230.
[25] S. Lee, C. Yoon, C. Lee, S. Shin, V. Yegneswaran, and P. Porras, “Delta: A security assessment framework for software-defined networks,” in Proceedings of The 2017 Network and Distributed System Security Symposium (NDSS), February 2017.
[26] S. Liu, M. K. Reiter, and V. Sekar, “Flow reconnaissance via timing attacks on sdn switches,” in 2017 IEEE 37th International Conference on Distributed Computing Systems (ICDCS). IEEE, 2017, pp. 196–206.
[27] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner, “Openflow: enabling innovation in campus networks,” ACM SIGCOMM Computer Communication Review, vol. 38, no. 2, pp. 69–74, 2008.
[28] J. Newsome and D. X. Song, “Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software.” in NDSS, vol. 5. Citeseer, 2005, pp. 3–4.
[29] P. Porras, S. Cheung, M. Fong, K. Skinner, and V. Yegneswaran, “Securing the Software-Defined Network Control Layer,” in NDSS’15, 2015.
[30] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang, Z. Liu, A. El-Hassany, S. Whitlock et al., “Troubleshooting blackbox sdn control software with minimal causal sequences,” ACM SIGCOMM Computer Communication Review, vol. 44, no. 4, pp. 395–406, 2015.
[31] K. Sen and G. Agha, “Cute and jcute: Concolic unit testing and explicit path model-checking tools,” in International Conference on Computer Aided Verification. Springer, 2006, pp. 419–423.
[32] S. Sezer, S. Scott-Hayward, P. K. Chouhan, B. Fraser, D. Lake, J. Finnegan, N. Viljoen, M. Miller, and N. Rao, “Are we ready for sdn? Implementation challenges for software-defined networks,” IEEE Communications Magazine, vol. 51, no. 7, pp. 36–43, 2013.
[33] U. Shankar, K. Talwar, J. S. Foster, and D. A. Wagner, “Detecting format string vulnerabilities with type qualifiers.” in USENIX Security Symposium, 2001, pp. 201–220.
[34] S. Shin, V. Yegneswaran, P. Porras, and G. Gu, “Avant-guard: Scalable and vigilant switch flow management in software-defined networks,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), November 2013.
[35] R. Skowyra, L. Xu, G. Gu, V. Dedhia, T. Hobson, H. Okhravi, and J. Landry, “Effective topology tampering attacks and defenses in software-defined networks,” in 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). IEEE, 2018, pp. 374–385.
[36] K. Thimmaraju, B. Shastry, T. Fiebig, F. Hetzelt, J.-P. Seifert, A. Feldmann, and S. Schmid, “Taking control of sdn-based cloud systems via the data plane,” in Proceedings of the Symposium on SDN Research. ACM, 2018, p. 1.
[37] B. E. Ujcich, S. Jero, A. Edmundson, Q. Wang, R. Skowyra, J. Landry, A. Bates, W. H. Sanders, C. Nita-Rotaru, and H. Okhravi, “Cross-app poisoning in software-defined networking,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 648–663.
[38] W. Visser, C. S. Psreanu, and S. Khurshid, “Test input generation with java pathfinder,” ACM SIGSOFT Software Engineering Notes, vol. 29, no. 4, pp. 97–107, 2004.
[39] H. Wang, L. Xu, and G. Gu, “Floodguard: A dos attack prevention extension in software-defined networks,” in Proceedings of the 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), June 2015.
[40] H. Wang, G. Yang, P. Chinprutthiwong, L. Xu, Y. Zhang, and G. Gu, “Towards fine-grained network security forensics and diagnosis in the sdn era,” in Proc. of the 25th ACM Conference on Computer and Communications Security (CCS’18), October 2018.
[41] T. Wang, T. Wei, G. Gu, and W. Zou, “Taintscope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection,” in Security and privacy (SP), 2010 IEEE symposium on. IEEE, 2010, pp. 497–512.
[42] L. Xu, J. Huang, S. Hong, J. Zhang, and G. Gu, “Attacking the brain: Races in the sdn control plane,” in Proceedings of The 26th USENIX Security Symposium (Usenix Security), August 2017.
[43] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: A z3-based string solver for web application analysis,” in Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering. ACM, 2013, pp. 114–124.

Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16, 2020, at 09:22:58 UTC from IEEE Xplore. Restrictions apply.