### Shuffling Functionality and Security Guarantees

In the semi-honest setting, honest clients are guaranteed that their values will be shuffled with at least \((1 - \gamma - \delta)n\) other values from honest clients. In the malicious setting, a similar guarantee is provided, but with \(\alpha n\) values, as detailed in Section 4.

**Figure 2:**
- **a)** Secure values of \(k\) for various settings (Semi-honest).
- **b)** Secure values of \(k\) for various settings as \(\gamma\) increases (Semi-honest).
- **c)** Required number of neighbors for different settings, and the value of \(\alpha\) guaranteed in each case (Malicious).
- **d)** Values of \(\alpha\) as the number of neighbors increases, for \(n = 105\) (Malicious).

### Baseline Solution for Small \(m\)

A simple baseline solution involves each client locally building a histogram of their input, which would be a one-hot vector, and then using a vector summation protocol to aggregate these histograms. The server only learns the aggregate histogram. This approach is practical for small \(m\) but becomes impractical for large \(m\), such as \(m = 2^{32}\). Additionally, this method is inefficient when the result histogram is expected to be sparse.

### Leveraging Invertible Bloom Lookup Tables (IBLTs)

To address the issues in the baseline protocol, particularly for settings where the message domain size \(m\) is much larger than the number of clients \(n\), we use a probabilistic data structure called an Invertible Bloom Lookup Table (IBLT) [21]. An IBLT is a linear sketch of a key-value store, allowing the addition of two IBLTs to produce a new IBLT that encodes the union of the original key-value stores. IBLTs support the following operations:
- **Insert(p, x):** Insert the key-value pair \((p, x)\).
- **ListEntries():** List every key-value pair in the data structure.

The ListEntries operation may fail, but parameters can be chosen to make this failure probability very small.

### Implementation of the Shuffle Primitive Using IBLTs

1. **Local IBLT Creation:** Each client creates an empty local IBLT of length \(\ell\) with the same parameters.
2. **Pseudonym Assignment:** Each client \(i\) chooses a pseudonym \(\pi_i\) uniformly at random from a sufficiently large set \(P\) to avoid collisions (e.g., 64-bit strings).
3. **Insertion:** Clients insert the pair \((\pi_i, x_i)\) into their IBLT.
4. **Vector Summation:** A vector summation protocol is used to combine the IBLTs.
5. **Message Recovery:** The server recovers the messages using the ListEntries functionality of the IBLT.

Detailed implementations of the local vector preparation algorithm run by each client and the message recovery algorithm run by the server are provided in Appendix D of the full version [5]. The exact parameters indicate that for \(n > 100\), the bit length of the vectors used for the IBLTs can be less than \(2n \lceil \log_2(|P|) + \log_2(m) + \log_2(n) \rceil\). For example, if \(n = 10,000\) and the clients' inputs are 32 bits long, the construction requires \(2 \cdot 10,000 \cdot (64 + 32 + 14) = 2,200,000\) bits, i.e., 269 kB. This protocol can easily be adapted to scenarios where clients have different numbers of messages to send, covering both multi-message shuffle models and cases where most users do not have any messages to send.

### Conclusion

We presented new constructions for secure aggregation that achieve better asymptotic computation and communication costs compared to previous solutions. Our semi-honest construction supports billions of clients, and our semi-malicious construction supports tens of thousands of clients for the same per-client cost. We also introduced a construction for secure shuffling using secure vector aggregation, which is the first cryptographically secure instantiation of the shuffle model of differential privacy. This construction requires each client to have an input vector of size linear in the total number of submitted messages.

Future work includes a system implementation of our protocols and exploring how to achieve secure shuffling with sublinear complexity in the single-server setting.

### Acknowledgments

JB was supported by the UK Government’s Defence & Security Programme in support of the Alan Turing Institute. We thank Aurélien Bellet, Matt Kusner, Kobbi Nissim, and Brooks Paige for useful discussions in the early stages of this work. We also thank Cindy Lin, Sarvar Patel, Aaron Segal, and Karn Seth for their feedback and insightful discussions about the semi-malicious variant of the problem.

### References

[1] David W. Archer, Dan Bogdanov, Yehuda Lindell, Liina Kamm, Kurt Nielsen, Jakob Illeborg Pagter, Nigel P. Smart, and Rebecca N. Wright. 2018. From Keys to Databases - Real-World Applications of Secure Multi-Party Computation. Comput. J. 61, 12 (2018), 1749–1771.

[2] Borja Balle, James Bell, Adrià Gascón, and Kobbi Nissim. 2019. Improved Summation from Shuffling. arXiv: 1909.11225 (2019).

[3] Borja Balle, James Bell, Adrià Gascón, and Kobbi Nissim. 2019. The Privacy Blanket of the Shuffle Model. In Advances in Cryptology - CRYPTO 2019 - 39th Annual International Cryptology Conference, Santa Barbara, CA, USA, August 18-22, 2019, Proceedings, Part II (Lecture Notes in Computer Science, Vol. 11693), Alexandra Boldyreva and Daniele Micciancio (Eds.). Springer, 638–667. https://doi.org/10.1007/978-3-030-26951-7_22

[4] Borja Balle, James Bell, Adria Gascon, and Kobbi Nissim. 2020. Private Summation in the Multi-Message Shuffle Model. arXiv:2002.00817 [cs.CR]

[5] James Bell, Keith Bonawitz, Adrià Gascón, Tancrède Lepoint, and Mariana Raykova. 2020. Secure Single-Server Aggregation with (Poly)Logarithmic Overhead. IACR Cryptol. ePrint Arch. 2020 (2020), 704.

[6] Andrea Bittau, Úlfar Erlingsson, Petros Maniatis, Ilya Mironov, Ananth Raghunathan, David Lie, Mitch Rudominer, Ushasree Kode, Julien Tinnes, and Bernhard Seefeld. 2017. Prochlo: Strong Privacy for Analytics in the Crowd. In Proceedings of the 26th Symposium on Operating Systems Principles (Shanghai, China) (SOSP '17). ACM, New York, NY, USA, 441–459. https://doi.org/10.1145/3132747.3132769

[7] Keith Bonawitz, Hubert Eichner, Wolfgang Grieskamp, Dzmitry Huba, Alex Ingerman, Vladimir Ivanov, Chloé M Kiddon, Jakub Konečný, Stefano Mazzocchi, Brendan McMahan, Timon Van Overveldt, David Petrou, Daniel Ramage, and Jason Roselander. 2019. Towards Federated Learning at Scale: System Design. In SysML 2019. https://arxiv.org/abs/1902.01046

[8] Keith Bonawitz, Vladimir Ivanov, Ben Kreuter, Antonio Marcedone, H. Brendan McMahan, Sarvar Patel, Daniel Ramage, Aaron Segal, and Karn Seth. 2017. Practical Secure Aggregation for Privacy-Preserving Machine Learning. In ACM Conference on Computer and Communications Security. ACM, 1175–1191.

[9] Elette Boyle, Kai-Min Chung, and Rafael Pass. 2015. Large-Scale Secure Computation: Multi-party Computation for (Parallel) RAM Programs. In Advances in Cryptology – CRYPTO 2015, Rosario Gennaro and Matthew Robshaw (Eds.).

[10] Elette Boyle, Ran Cohen, Deepesh Data, and Pavel Hubáček. 2018. Must the Communication Graph of MPC Protocols be an Expander?. In Advances in Cryptology – CRYPTO 2018, Hovav Shacham and Alexandra Boldyreva (Eds.).

[11] Albert Cheu, Adam D. Smith, Jonathan Ullman, David Zeber, and Maxim Zhilyaev. 2019. Distributed Differential Privacy via Mixnets. In EUROCRYPT. 375–403.

[12] Henry Corrigan-Gibbs and Dan Boneh. 2017. Prio: Private, Robust, and Scalable Computation of Aggregate Statistics. In 14th USENIX Symposium on Networked Systems Design and Implementation (NSDI 17).

[13] Cynthia Dwork, Frank McSherry, Kobbi Nissim, and Adam Smith. 2006. Calibrating Noise to Sensitivity in Private Data Analysis. In Proceedings of the Third Conference on Theory of Cryptography.

[14] Tariq Elahi, George Danezis, and Ian Goldberg. 2014. PrivEx: Private Collection of Traffic Statistics for Anonymous Communication Networks. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (Scottsdale, Arizona, USA) (CCS '14). Association for Computing Machinery, New York, NY, USA, 1068–1079. https://doi.org/10.1145/2660267.2660280

[15] Úlfar Erlingsson, Vitaly Feldman, Ilya Mironov, Ananth Raghunathan, Shuang Song, Kunal Talwar, and Abhradeep Thakurta. 2020. Encode, Shuffle, Analyze Privacy Revisited: Formalizations and Empirical Evaluation. arXiv preprint arXiv:2001.03618 (2020).

[16] Úlfar Erlingsson, Vitaly Feldman, Ilya Mironov, Ananth Raghunathan, Kunal Talwar, and Abhradeep Thakurta. 2019. Amplification by Shuffling: From Local to Central Differential Privacy via Anonymity. In Proceedings of the Thirtieth Annual ACM-SIAM Symposium on Discrete Algorithms (SODA '19).

[17] Taher El Gamal. 1985. A public key cryptosystem and a signature scheme based on discrete logarithms. IEEE Trans. Information Theory 31, 4 (1985), 469–472.

[18] Craig Gentry. 2009. Fully homomorphic encryption using ideal lattices. In In Proc. STOC. 169–178.

[19] Badih Ghazi, Rasmus Pagh, and Ameya Velingker. 2019. Scalable and Differentially Private Distributed Aggregation in the Shuffled Model. arXiv preprint arXiv:1906.08320 (2019).

[20] Oded Goldreich. 2004. The Foundations of Cryptography - Volume 2: Basic Applications. Cambridge University Press.

[21] Michael T. Goodrich and Michael Mitzenmacher. 2011. Invertible bloom lookup tables. In 49th Annual Allerton Conference on Communication, Control, and Computing, Allerton 2011, Allerton Park & Retreat Center, Monticello, IL, USA, 28-30 September, 2011. IEEE, 792–799. https://doi.org/10.1109/Allerton.2011.6120248

[22] Shai Halevi, Yehuda Lindell, and Benny Pinkas. 2011. Secure Computation on the Web: Computing without Simultaneous Interaction. In Proceedings of the 31st Annual Conference on Advances in Cryptology.

[23] Mihaela Ion, Ben Kreuter, Ahmet Erhan Nergiz, Sarvar Patel, Mariana Raykova, Shobhit Saxena, Karn Seth, David Shanahan, and Moti Yung. 2020. On Deploying Secure Computing Commercially: Private Intersection-Sum Protocols and their Business Applications. In 5th IEEE European Symposium on Security and Privacy.

[24] Internet Research Task Force (IRTF). 2018. ChaCha20 and Poly1305 for IETF Protocols. https://datatracker.ietf.org/doc/rfc8439/; accessed 2020-05-12.

[25] Peter Kairouz, H Brendan McMahan, Brendan Avent, Aurélien Bellet, Mehdi Bennis, Arjun Nitin Bhagoji, Keith Bonawitz, Zachary Charles, Graham Cormode, Rachel Cummings, et al. 2019. Advances and open problems in federated learning. arXiv preprint arXiv:1912.04977 (2019).

[26] Iraklis Leontiadis, Kaoutar Elkhiyaoui, and Refik Molva. 2014. Private and Dynamic Time-Series Data Aggregation with Trust Relaxation. In Cryptology and Network Security, Dimitris Gritzalis, Aggelos Kiayias, and Ioannis Askoxylakis (Eds.).

[27] KU Leuven. 2019. SCALE-MAMBA Software. https://homes.esat.kuleuven.be/~nsmart/SCALE/. (2019).

[28] Yehuda Lindell. 2017. How to Simulate It - A Tutorial on the Simulation Proof Technique. In Tutorials on the Foundations of Cryptography. Springer International Publishing, 277–346.

[29] Yehuda Lindell and Ariel Nof. 2018. Fast Secure Multiparty ECDSA with Practical Distributed Key Generation and Applications to Cryptocurrency Custody. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, CCS 2018, Toronto, ON, Canada, October 15-19, 2018. 1837–1854.

[30] Adriana López-Alt, Eran Tromer, and Vinod Vaikuntanathan. 2012. On-the-Fly Multiparty Computation on the Cloud via Multikey Fully Homomorphic Encryption. In Proceedings of the Forty-Fourth Annual ACM Symposium on Theory of Computing (New York, New York, USA) (STOC '12). Association for Computing Machinery, New York, NY, USA, 1219–1234. https://doi.org/10.1145/2213977.2214086

[31] H Brendan McMahan, Daniel Ramage, Kunal Talwar, and Li Zhang. 2018. Learning Differentially Private Recurrent Language Models. In International Conference on Learning Representations (ICLR).

[32] Pascal Paillier. 1999. Public-Key Cryptosystems Based on Composite Degree Residuosity Classes. In EUROCRYPT (Lecture Notes in Computer Science, Vol. 1592). Springer, 223–238.

[33] Leonid Reyzin, Adam Smith, and Sophia Yakoubov. 2018. Turning HATE Into LOVE: Homomorphic Ad Hoc Threshold Encryption for Scalable MPC. Cryptology ePrint Archive, Report 2018/997. https://eprint.iacr.org/2018/997.

[34] Jinhyun So, Basak Guler, and Amir Salman Avestimehr. 2020. Turbo-Aggregate: Breaking the Quadratic Aggregation Barrier in Secure Federated Learning. IACR Cryptol. ePrint Arch. 2020 (2020), 167.

[35] Pauli Virtanen, Ralf Gommers, Travis E. Oliphant, Matt Haberland, Tyler Reddy, David Cournapeau, Evgeni Burovski, Pearu Peterson, Warren Weckesser, Jonathan Bright, Stéfan J. van der Walt, Matthew Brett, Joshua Wilson, K. Jarrod Millman, Nikolay Mayorov, Andrew R. J. Nelson, Eric Jones, Robert Kern, Eric Larson, CJ Carey, İlhan Polat, Yu Feng, Eric W. Moore, Jake VanderPlas, Denis Laxalde, Josef Perktold, Robert Cimrman, Ian Henriksen, E. A. Quintero, Charles R Harris, Anne M. Archibald, Antônio H. Ribeiro, Fabian Pedregosa, Paul van Mulbregt, and SciPy 1.0 Contributors. 2020. SciPy 1.0: Fundamental Algorithms for Scientific Computing in Python. Nature Methods 17 (2020), 261–272. https://doi.org/10.1038/s41592-019-0686-2

### Appendix A: Summary of Parameters

| Parameter | Description |
|-----------|-------------|
| \( n \)    | Number of clients. |
| \( k \)    | Number of neighbors of each client \( k < n \). |
| \( t \)    | Secret Sharing reconstruction threshold \( t \leq k \). |
| \( \sigma \) | Information-theoretic security parameter (bounding the probability of bad events). |
| \( \eta \) | Correctness parameter (bounding the failure probability). |
| \( \lambda \) | Cryptographic security parameter (for cryptographic primitives). |
| \( \delta \) | Maximum fraction of dropout clients. |
| \( \gamma \) | Maximum fraction of corrupted clients. |
| \( X \)    | Domain of the summation protocol. |
| \( \ell \) | Size of the clients’ vector input. |

### Cost Analysis

| \( n \)   | \( \ell \) | Client Cost | Server Cost per client | Sharing | PRG Evaluation | Reconstruction |
|----------|------------|-------------|------------------------|---------|----------------|---------------|
| 10^3     | 10^4       | 0.0002      | 1.8e-06                | 0%      | 0.0019         | 0.0002        |
| 10^4     | 10^5       | 0.0003      | 2.24e-06               | 0.0020  | 0.0020         | 0.0003        |
| 10^5     | 10^5       | 0.0003      | 2.44e-06               | 0.0031  | 0.1711         | 0.2058        |
| 10^5     | 10^5       | 0.1711      | 0.0031                 | 10%     | 0.2058         | 0.3453        |