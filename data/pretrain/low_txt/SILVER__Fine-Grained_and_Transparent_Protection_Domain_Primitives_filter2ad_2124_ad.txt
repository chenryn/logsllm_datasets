# Performance and Optimization

Given that SILVER is designed to protect only crucial data rather than the entire program, we anticipate that it will exhibit better run-time performance. We also believe that our prototype can be significantly enhanced by optimizing Xen’s VMEXIT and page fault exception handling. By creating a specialized path for SILVER’s protection domain switch, we can avoid the unnecessary overhead of full VM switches.

## Micro-Benchmarks Results

The following table presents the micro-benchmark results for dynamic data management APIs in SILVER, averaged over 1000 runs. The allocation size for each data object is 192 bytes.

| Function                 | SLUB Fast Path (µs) | SLUB Slow Path (µs) | SILVER (µs) |
|--------------------------|---------------------|---------------------|-------------|
| `kmalloc`                | 1.4                 | 7.7                 | 14.4        |
| `kfree`                  | 0.7                 | 6.2                 | 56.7        |
| `kmalloc` (pd average)   | -                   | -                   | 64.1        |

## Limitations and Future Work

Our current prototype has several limitations. For a few functions, we encountered difficulties in directly applying service-based communication, as these functions transfer complex data structures across function calls instead of single data objects. Handling these functions may require us to manually write data marshalling routines. Fortunately, most of these functions are provided by the OS kernel, which typically configures as the parent domain of the caller principal and can operate on these data structures without data marshalling.

Compared to language-based and other static isolation approaches, SILVER’s run-time mechanism offers more accurate resource tracking. However, our approach lacks verification and automatic error detection, requiring programmers to be cautious when using object transfer and endorsement primitives. For example, they must ensure not to create dangling pointers, as these operations release the original object similarly to the `kfree` function. We plan to incorporate kernel reference counting to help manage references to protection domain data objects. Additionally, adapting kernel programs to use SILVER requires a good understanding of the security properties of their data and functions, which can be complex for large programs. Therefore, we aim to explore automated methods to transform existing programs to use SILVER based on a given security specification.

## Application Benchmark Performance

The following figure shows the application benchmark performance, normalized to native Linux/Xen.

![Application Benchmark Performance](fig3.png)

## Related Work

Protection domains are widely used to address various security issues, such as securing program extensions, privilege separation, implementing secure browsers, safely executing native code in browsers, and deploying mobile applications. In this section, we review previous research efforts related to protection domains and OS kernel security, categorized by their approach.

### Software Fault Isolation
Software fault isolation (SFI) rewrites binary code to restrict control and data access. XFI [12] uses SFI to enforce control flow integrity (CFI) and data integrity, allowing safe execution of extension modules in the host program's address space. While these approaches are efficient and effective for securing program extensions, they struggle with inferring and verifying system-wide resource and multi-principal access control rules statically.

### Compiler Rewriting
LXFI [19] addresses data and API integrity in SFI systems using compiler rewriting. Compared to LXFI, SILVER’s run-time approach is more resilient to attacks that fully compromise an untrusted module and execute arbitrary code. SILVER’s security enforcement is also more tamper-proof, as isolation and access control are managed by the hypervisor.

### Access Control Mechanisms
Run-time protection approaches often use access control mechanisms to constrain untrusted programs. These mechanisms mediate security-sensitive abstractions at different levels, from segmentation and paging protection to system call interposition. Traditional mandatory access control systems like SELinux [3] are inflexible and difficult to configure for fine-grained policies. Capability-based systems [23, 29] and DIFC systems [17, 33] delegate security decisions to application developers, easing the burden on administrators and allowing applications to control their data and communication security. Flume [17] provides DIFC-based protection domains in Linux, while SILVER enforces protection for kernel programs at the data object level.

### Kernel Reliability
Many research efforts focus on improving the reliability of operating system kernels. Micro-kernel OSes [8, 16, 18] move device drivers to user space, but retrofitting these approaches in commodity OSes is challenging. Mondrix [30] compartmentalizes Linux but requires specific hardware. Nooks [25] isolates faulty device drivers within the Linux kernel but does not address architectural state manipulation or provide flexible security properties for individual data.

### Virtualization-Based Protection
SILVER leverages a VMM to mediate cross-protection-domain activities. VMMs are also used in other protection systems to enhance the security of applications and the OS kernel. Overshadow [9] and TrustVisor [20] protect application integrity and secrecy even if the OS kernel is compromised. SIM [24] uses hardware virtualization for running an isolated and trusted monitor inside an untrusted guest. Secvisor [22] and NICKLE [21] ensure that unauthorized code is not executed in the OS kernel. Hooksafe [28] protects kernel control data from rootkits. SILVER aims to provide comprehensive protection for code, data, and control flows.

## Conclusions

In this paper, we have described the design, implementation, and evaluation of SILVER, a framework for achieving transparent protection primitives that provide fine-grained access control and secure interactions between the OS kernel and untrusted extensions. We believe SILVER is an effective approach to controlled privilege separation, helping developers protect their programs and mitigate damage to the OS kernel caused by vulnerabilities in untrusted extensions.

## Acknowledgements

We would like to thank our paper shepherd Andrea Lanzi, the anonymous reviewers, and Trent Jaeger for their helpful comments on earlier versions of this paper. This work was supported by ARO W911NF-09-1-0525 (MURI), NSF CNS-0905131, AFOSR W911NF1210055, and ARO MURI project "Adversarial and Uncertain Reasoning for Adaptive Cyber Defense: Building the Scientific Foundation."

## References

1. Android: Security and Permissions. http://developer.android.com/guide/topics/security/security.html.
2. Linux kernel can slub overflow. http://jon.oberheide.org/blog/2010/09/10/linux-kernel-can-slub-overflow/.
3. NSA. Security enhanced linux. http://www.nsa.gov/selinux/.
4. The SLUB allocator. http://lwn.net/Articles/229984/.
5. M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In CCS '05, 2005.
6. K. J. Biba. Integrity Considerations for Secure Computer Systems. Technical Report MTR-3153, The Mitre Corporation, 1977.
7. M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Donnelly, P. Barham, and R. Black. Fast Byte-granularity Software Fault Isolation. In SOSP '09, 2009.
8. J. S. Chase, H. M. Levy, M. J. Feeley, and E. D. Lazowska. Sharing and Protection in a Single-Address-Space Operating System. ACM Trans. Comput. Syst., 12:271–307, 1994.
9. X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Overshadow: a Virtualization-based Approach to Retrofitting Protection in Commodity Operating Systems. In ASPLOS '08, 2008.
10. T.-c. Chiueh, G. Venkitachalam, and P. Pradhan. Integrating Segmentation and Paging Protection for Safe, Efficient and Transparent Software Extensions. In SOSP '99, 1999.
11. J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch. Leveraging Legacy Code to Deploy Desktop Applications on the Web. In OSDI'08, 2008.
12. U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula. XFI: Software Guards for System Address Spaces. In OSDI '06, 2006.
13. M. Fähndrich, M. Aiken, C. Hawblitzel, O. Hodson, G. Hunt, J. R. Larus, and S. Levi. Language Support for Fast and Reliable Message-based Communication in Singularity OS. In EuroSys '06, 2006.
14. B. Ford and R. Cox. Vx32: Lightweight User-level Sandboxing on the x86. In USENIX ATC, 2008.
15. T. Garfinkel, B. Pfaff, and M. Rosenblum. Ostia: A Delegating Architecture for Secure System Call Interposition. In NDSS'04, 2004.
16. G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4: Formal Verification of an OS Kernel. In SOSP '09.
17. M. Krohn, A. Yip, M. Brodsky, N. Cliffer, M. F. Kaashoek, E. Kohler, and R. Morris. Information Flow Control for Standard OS Abstractions. In SOSP '07, 2007.
18. J. Liedtke. On Micro-kernel Construction. In SOSP '95, 1995.
19. Y. Mao, H. Chen, D. Zhou, X. Wang, N. Zeldovich, and M. F. Kaashoek. Software fault isolation with API integrity and multi-principal modules. In SOSP '11, 2011.
20. J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. TrustVisor: Efficient TCB Reduction and Attestation. In Proceedings of the 2010 IEEE Symposium on Security and Privacy.
21. R. Riley, X. Jiang, and D. Xu. Guest-Transparent Prevention of Kernel Rootkits with VMM-Based Memory Shadowing. In RAID '08.
22. A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In SOSP '07, 2007.
23. J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS: a Fast Capability System. In SOSP '99, 1999.
24. M. I. Sharif, W. Lee, W. Cui, and A. Lanzi. Secure in-vm monitoring using hardware virtualization. In CCS '09, pages 477–487, New York, NY, USA, 2009. ACM.
25. M. M. Swift, B. N. Bershad, and H. M. Levy. Improving the Reliability of Commodity Operating Systems. In SOSP '03.
26. R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient Software-based Fault Isolation. In SOSP '93, 1993.
27. H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The Multi-principal OS Construction of the Gazelle Web Browser. In USENIX Security '09, 2009.
28. Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering Kernel Rootkits with Lightweight Hook Protection. In CCS '09.
29. R. N. M. Watson, J. Anderson, B. Laurie, and K. Kennaway. Capsicum: Practical Capabilities for UNIX. In USENIX Security'10, 2010.
30. E. Witchel, J. Rhee, and K. Asanović. Mondrix: Memory Isolation for Linux using Mondriaan Memory Protection. In SOSP '05, 2005.
31. X. Xiong, D. Tian, and P. Liu. Practical Protection of Kernel Integrity for Commodity OS from Untrusted Extensions. In NDSS'11, 2011.
32. B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. IEEE Symposium on Security and Privacy, 2009.
33. N. Zeldovich, S. Boyd-Wickizer, E. Kohler, and D. Mazières. Making Information Flow Explicit in HiStar. In OSDI '06, 2006.