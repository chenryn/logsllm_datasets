### 1.2 DMR Mode Performance Overhead

The performance overhead for the DMR mode is illustrated in Figure 13. The benchmarks show varying levels of overhead, with some benchmarks, such as `srad`, `lbm`, and `sgemm`, experiencing significant improvements. For instance, `sgemm` experiences a 12% performance improvement due to a threefold reduction in memory contention stalls.

### 14: Opportunistic DMR Breakdown

To quantify the effectiveness of inherent redundancy and idle SIMT lanes in achieving opportunistic DMR, we classified the warps into three categories: Inherent Redundancy Warps (IR warps), Idle Lanes Warps (IL warps), and IR + IL warps. IR warps leverage inherent redundancy, IL warps use idle SIMT lanes and thread replication, and IR + IL warps exploit both. The results, shown in Figure 14, indicate that more than 50% of the opportunistically DMR-ed warps are IR warps for most benchmarks, with an average of 78%. Exceptions include `MUM` and `NN`, which have limited inherent redundancy but can utilize idle SIMT lanes. For example, 96% of the warp instructions in the `NN` benchmark have only one active thread.

### B. TMR Mode Evaluation

In TMR mode, the Warped-RE framework can tolerate one non-transient error in every cluster of three SIMT lanes. If a single SIMT lane continuously produces incorrect results within a cluster, the framework ensures functional correctness. However, if a second SIMT lane within the same cluster becomes faulty, the framework can no longer guarantee correctness. Figure 15 shows the execution time in TMR mode relative to the baseline architecture without error detection and correction. The weighted average performance overhead for all benchmarks is 29%, significantly lower than the expected 200% overhead of triple redundant execution.

### 16: Opportunistic TMR Breakdown

We also measured the effectiveness of inherent redundancy and idle SIMT lanes in achieving opportunistic TMR. The results, presented in Figure 16, are similar to those in DMR mode. Across all benchmarks, 77% of the opportunistically TMR-ed warps are IR warps, 7% are IL warps, and 16% are IR + IL warps. This indicates that inherent redundancy is the primary contributor to opportunistic TMR execution.

### C. Design Space Exploration

When a non-transient error is detected in a SIMT lane, the Warped-RE framework switches to TMR mode and does not revert to DMR mode. While this approach may seem conservative, our exploration of different design alternatives shows that it provides the best trade-off between design complexity and performance overhead. One alternative, allowing different clusters to operate concurrently in different modes, was found to complicate control logic and offer only slight performance improvements. Another design, which splits warps into sub-warps, has a 10% higher performance overhead than our proposed procedure.

### D. Area and Power Evaluation

To evaluate the area and power overheads of the Warped-RE framework, we implemented the additional logic in RTL using Synopsis Design Compiler and synthesized it using the NCSU PDK 45nm library. The additional three pipeline stages, including wiring, consume approximately 0.5mm², representing a 1.5% area overhead. Traditional DMR and TMR executions require 100% and 200% power overheads, respectively. By exploiting inherent redundancy, the Warped-RE framework reduces these overheads to 58% and 60%, respectively. The total dynamic power consumed by the additional stages is 632mW, representing about 10.6% of the GPU's baseline power consumption.

### VIII. Related Work

Improving the reliability of processors has been widely studied, with techniques like DMR and TMR being applied to CPUs and embedded systems. For example, [15] and [16] proposed running two copies of the same thread to ensure correctness, while [17] suggested using a sampling DMR approach to detect permanent errors. At the hardware level, [4] leveraged underutilization in threads to enable intra-warp DMR, and [6] proposed the Warped-Shield framework to tolerate hard faults in GPUs. Software-based approaches, such as [5] and [18], have also been proposed to improve GPU reliability. However, these techniques do not exploit inherent redundancy and often have higher power and performance overheads. Our Warped-RE framework, on the other hand, detects and corrects transient and non-transient errors at a lower cost.

### IX. Conclusion

In this paper, we propose the Warped-RE framework, a unified approach for providing low-cost error detection and correction for SIMT lanes in GPUs. The framework leverages inherent redundancy and underutilization in SIMT lanes to achieve opportunistic redundant execution. It operates in DMR mode by default and switches to TMR mode when an error is detected. After correcting the error, it returns to DMR mode if the error is transient, or continues in TMR mode if the error is non-transient. When opportunistic redundant execution is insufficient, the framework uses warp deformation to cover all executed instructions. The Warped-RE framework incurs an average performance overhead of 8.4% and 29% during DMR and TMR modes, respectively.

### Acknowledgements

This work was supported by the following grants: DARPA-PERFECT-HR0011-12-2-0020 and NSF-CAREER-0954211, NSF-0834798.

### References

[1] S. Nassif, K. Bernstein, D. Frank, A. Gattiker, W. Haensch, B. Ji, E. Nowak, D. Pearson, and N. Rohrer, “High performance CMOS variability in the 65nm regime and beyond,” in IEEE International Electron Devices Meeting, Dec 2007, pp. 569–571.
[2] R. Huang, “NBTI and dynamic variability in highly-scaled planar and gate-all-around MOSFETs,” in IEEE International Integrated Reliability Workshop Final Report, Oct 2012, pp. 53–53.
[3] W. McMahon, A. Haggag, and K. Hess, “Reliability scaling issues for nanoscale devices,” Nanotechnology, IEEE Transactions on, vol. 2, no. 1, pp. 33–38, Mar 2003.
[4] H. Jeon and M. Annavaram, “Warped-DMR: Light-weight error detection for GPGPU,” in 45th Annual IEEE/ACM International Symposium on Microarchitecture, Dec 2012, pp. 37–47.
[5] M. Dimitrov, M. Mantor, and H. Zhou, “Understanding software approaches for GPGPU reliability,” in Proceedings of 2nd Workshop on General Purpose Processing on Graphics Processing Units, 2009, pp. 94–104.
[6] W. Dweik, M. Abdel-Majeed, and M. Annavaram, “Warped-Shield: Tolerating hard faults in GPGPUs,” in 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), June 2014, pp. 431–442.
[7] J. Leng, T. Hetherington, A. ElTantawy, S. Gilani, N. S. Kim, T. M. Aamodt, and V. J. Reddi, “GPUWattch: Enabling energy optimizations in GPGPUs,” in Proceedings of the 40th Annual International Symposium on Computer Architecture, 2013, pp. 487–498.
[8] “NVIDIA’s next generation CUDA compute architecture: Fermi,” NVIDIA, Tech. Rep., 2009.
[9] A. Bakhoda, G. Yuan, W. Fung, H. Wong, and T. Aamodt, “Analyzing CUDA workloads using a detailed GPU simulator,” in IEEE International Symposium on Performance Analysis of Systems and Software, April 2009, pp. 163–174.
[10] “Parboil benchmark suite,” http://impact.crhc.illinois.edu/parboil.php.
[11] S. Che, M. Boyer, J. Meng, D. Tarjan, J. Sheaffer, S.-H. Lee, and K. Skadron, “Rodinia: A benchmark suite for heterogeneous computing,” in IEEE International Symposium on Workload Characterization, Oct 2009, pp. 44–54.
[12] “The FreePDK design kit,” http://www.eda.ncsu.edu/wiki/FreePDK.
[13] J. Hopkins, A.L., I. Smith, T.B., and J. Lala, “FTMP; a highly reliable fault-tolerant multiprocessor for aircraft,” Proceedings of the IEEE, vol. 66, no. 10, pp. 1221–1239, Oct 1978.
[14] P. Meaney, S. Swaney, P. Sanda, and L. Spainhower, “IBM z990 soft error detection and recovery,” Device and Materials Reliability, IEEE Transactions on, vol. 5, no. 3, pp. 419–427, Sept 2005.
[15] S. K. Reinhardt and S. S. Mukherjee, “Transient fault detection via simultaneous multithreading,” in Proceedings of the 27th Annual International Symposium on Computer Architecture, 2000, pp. 25–36.
[16] M. Gomaa, C. Scarbrough, T. Vijaykumar, and I. Pomeranz, “Transient-fault recovery for chip multiprocessors,” in 30th Annual International Symposium on Computer Architecture, June 2003, pp. 98–109.
[17] S. Nomura, M. D. Sinclair, C.-H. Ho, V. Govindaraju, M. de Kruijf, and K. Sankaralingam, “Sampling + DMR: Practical and low-overhead permanent fault detection,” SIGARCH Comput. Archit. News, vol. 39, no. 3, pp. 201–212, Jun. 2011.
[18] J. Wei and K. Pattabiraman, “BlockWatch: Leveraging similarity in parallel programs for error detection,” in Dependable Systems and Networks (DSN), 2012 42nd Annual IEEE/IFIP International Conference on, June 2012, pp. 1–12.
[19] K. S. Yim, C. Pham, M. Saleheen, Z. Kalbarczyk, and R. Iyer, “Hauberk: Lightweight silent data corruption error detector for GPGPU,” in Parallel Distributed Processing Symposium (IPDPS), 2011 IEEE International, May 2011, pp. 287–300.