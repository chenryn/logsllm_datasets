# Preface

If you have worked in software engineering, particularly in server-side and backend systems, you are likely familiar with a plethora of buzzwords related to data storage and processing. NoSQL, Big Data, Web-scale, Sharding, Eventual Consistency, ACID, CAP Theorem, Cloud Services, MapReduce, and Real-time are just a few examples. Over the past decade, we have witnessed significant advancements in databases, distributed systems, and the ways we build applications on top of them. Several driving forces have contributed to these developments:

- **Internet Giants**: Companies like Google, Yahoo!, Amazon, Facebook, LinkedIn, Microsoft, and Twitter handle massive volumes of data and traffic, necessitating the creation of new tools to manage such scale.
- **Business Agility**: Businesses need to be agile, test hypotheses cost-effectively, and respond quickly to market insights by maintaining short development cycles and flexible data models.
- **Open Source**: Free and open-source software has gained significant traction and is often preferred over commercial or bespoke in-house solutions.
- **Parallelism**: CPU clock speeds have plateaued, but multi-core processors and faster networks are now standard, making parallelism increasingly important.
- **Infrastructure as a Service (IaaS)**: With IaaS, even small teams can build distributed systems across multiple machines and geographic regions.
- **High Availability**: Users expect services to be highly available, with minimal downtime due to outages or maintenance.

*Data-intensive applications* leverage these technological advancements to push the boundaries of what is possible. We define an application as *data-intensive* if the primary challenge lies in the quantity, complexity, or rate of change of the data, as opposed to *compute-intensive* applications, where CPU cycles are the bottleneck.

The tools and technologies that support data-intensive applications have been rapidly evolving. While NoSQL databases have garnered much attention, message queues, caches, search indexes, and frameworks for batch and stream processing are also crucial. Many applications use a combination of these technologies.

The buzzwords in this space reflect enthusiasm for the new possibilities, which is positive. However, as software engineers and architects, we must have a technically accurate and precise understanding of these technologies and their trade-offs to build robust applications. This requires looking beyond the buzzwords.

Fortunately, behind the rapid changes in technology, there are enduring principles that remain constant, regardless of the specific tool version. Understanding these principles allows us to see how each tool fits into the broader landscape, how to use it effectively, and how to avoid common pitfalls. This book aims to provide that understanding.

## Who Should Read This Book?

This book is for software engineers, software architects, and technical managers who develop applications with server or backend components for storing or processing data, especially those using the internet (e.g., web applications, mobile apps, or internet-connected sensors).

It is particularly relevant for those who make architectural decisions, such as choosing tools for specific problems and determining the best way to apply them. Even if you do not have control over your tools, this book will help you better understand their strengths and weaknesses.

You should have some experience building web-based applications or network services and be familiar with relational databases and SQL. Knowledge of non-relational databases and other data-related tools is beneficial but not required. A general understanding of common network protocols like TCP and HTTP is helpful. Your choice of programming language or framework does not matter for this book.

If any of the following apply to you, you will find this book valuable:
- You want to learn how to make data systems scalable, for example, to support web or mobile apps with millions of users.
- You need to ensure high availability and operational robustness.
- You are looking for ways to maintain systems over the long term, even as they grow and requirements and technologies change.
- You are curious about how major websites and online services work and want to explore the design thinking behind various databases and data processing systems.

Sometimes, people argue, "You’re not Google or Amazon. Stop worrying about scale and just use a relational database." While there is truth in this—building for unnecessary scale is wasteful and may lead to inflexible designs—it is also important to choose the right tool for the job. Different technologies have their own strengths and weaknesses, and relational databases, while important, are not the only solution for data management.

## Scope of This Book

This book does not provide detailed instructions on installing or using specific software packages or APIs, as there is already ample documentation available. Instead, we focus on the fundamental principles and trade-offs that underpin data systems and explore the different design decisions made by various products.

In the ebook editions, we include links to the full text of online resources. All links were verified at the time of publication, but they may break due to the nature of the web. If you encounter a broken link or are reading a print copy, you can look up references using a search engine. For academic papers, you can search for the title in Google Scholar to find open-access PDF files. Alternatively, you can find all references at [*https://github.com/ept/ddia-references*](https://github.com/ept/ddia-references), where we maintain up-to-date links.

We primarily examine the *architecture* of data systems and their integration into data-intensive applications. This book does not cover deployment, operations, security, management, and other areas in depth, as these are complex and important topics that deserve their own books.

Many of the technologies discussed in this book fall under the "Big Data" buzzword. However, the term "Big Data" is overused and underdefined, making it less useful in serious engineering discussions. This book uses more precise terms, such as single-node versus distributed systems, or online/interactive versus offline/batch processing systems.

This book has a bias toward free and open-source software (FOSS) because reading, modifying, and executing source code is a great way to understand how something works in detail. Open platforms also reduce the risk of vendor lock-in. However, we also discuss proprietary software (closed-source software, software as a service, or in-house software described in literature but not released publicly) where appropriate.

## Outline of This Book

This book is divided into three parts:

1. **Part I**: We discuss the fundamental ideas that underpin the design of data-intensive applications. In [Chapter 1](ch1.md), we explore reliability, scalability, and maintainability, and how to achieve them. [Chapter 2](ch2.md) compares different data models and query languages, and their suitability for various situations. [Chapter 3](ch3.md) delves into storage engines and how databases arrange data on disk for efficient retrieval. [Chapter 4](ch4.md) covers data encoding formats and schema evolution.

2. **Part II**: We move from data stored on one machine to data distributed across multiple machines. This is often necessary for scalability but introduces unique challenges. We discuss replication ([Chapter 5](ch5.md)), partitioning/sharding ([Chapter 6](ch6.md)), and transactions ([Chapter 7](ch7.md)). We then delve into the problems of distributed systems ([Chapter 8](ch8.md)) and achieving consistency and consensus in distributed systems ([Chapter 9](ch9.md)).

3. **Part III**: We explore systems that derive datasets from other datasets. Derived data often occurs in heterogeneous systems where no single database can do everything well, and applications need to integrate several different databases, caches, and indexes. [Chapter 10](ch10.md) starts with a batch processing approach to derived data, and [Chapter 11](ch11.md) builds on this with stream processing. Finally, [Chapter 12](ch12.md) synthesizes the concepts and discusses approaches for building reliable, scalable, and maintainable applications in the future.

## References and Further Reading

Much of what we discuss in this book has been covered elsewhere—in conference presentations, research papers, blog posts, code, bug trackers, mailing lists, and engineering folklore. This book summarizes the most important ideas from many sources and includes pointers to the original literature throughout the text. The references at the end of each chapter are a great resource for further exploration, and most are freely available online.

## O'Reilly Safari

[Safari](http://oreilly.com/safari) (formerly Safari Books Online) is a membership-based training and reference platform for enterprise, government, educators, and individuals. Members have access to thousands of books, training videos, Learning Paths, interactive tutorials, and curated playlists from over 250 publishers, including O’Reilly Media, Harvard Business Review, Prentice Hall Professional, Addison-Wesley Professional, Microsoft Press, Sams, Que, Peachpit Press, Adobe, Focal Press, Cisco Press, John Wiley & Sons, Syngress, Morgan Kaufmann, IBM Redbooks, Packt, Adobe Press, FT Press, Apress, Manning, New Riders, McGraw-Hill, Jones & Bartlett, and Course Technology, among others.

For more information, please visit http://oreilly.com/safari.

## How to Contact Us

Please address comments and questions concerning this book to the publisher:

O’Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
800-998-9938 (in the United States or Canada)
707-829-0515 (international or local)
707-829-0104 (fax)

We have a web page for this book, where we list errata, examples, and any additional information. You can access this page at *http://bit.ly/designing-data-intensive-apps*.

To comment or ask technical questions about this book, send email to *bookques@oreilly.com*.

For more information about our books, courses, conferences, and news, see our website at *http://www.oreilly.com*.

- Find us on Facebook: [http://facebook.com/oreilly](http://facebook.com/oreilly)
- Follow us on Twitter: [http://twitter.com/oreillymedia](http://twitter.com/oreillymedia)
- Watch us on YouTube: [http://www.youtube.com/oreillymedia](http://www.youtube.com/oreillymedia)

## Acknowledgments

This book is a synthesis and systematization of a large number of other people’s ideas and knowledge, combining experience from both academic research and industrial practice. In computing, we tend to be attracted to new and shiny things, but there is much to learn from past experiences. This book has over 800 references to articles, blog posts, talks, documentation, and more, which have been invaluable learning resources for me. I am grateful to the authors of this material for sharing their knowledge.

I have also learned a lot from personal conversations with many people who have taken the time to discuss ideas or explain things to me. I would like to thank Joe Adler, Ross Anderson, Peter Bailis, Márton Balassi, Alastair Beresford, Mark Callaghan, Mat Clayton, Patrick Collison, Sean Cribbs, Shirshanka Das, Niklas Ekström, Stephan Ewen, Alan Fekete, Gyula Fóra, Camille Fournier, Andres Freund, John Garbutt, Seth Gilbert, Tom Haggett, Pat Helland, Joe Hellerstein, Jakob Homan, Heidi Howard, John Hugg, Julian Hyde, Conrad Irwin, Evan Jones, Flavio Junqueira, Jessica Kerr, Kyle Kingsbury, Jay Kreps, Carl Lerche, Nicolas Liochon, Steve Loughran, Lee Mallabone, Nathan Marz, Caitie McCaffrey, Josie McLellan, Christopher Meiklejohn, Ian Meyers, Neha Narkhede, Neha Narula, Cathy O’Neil, Onora O’Neill, Ludovic Orban, Zoran Perkov, Julia Powles, Chris Riccomini, Henry Robinson, David Rosenthal, Jennifer Rullmann, Matthew Sackman, Martin Scholl, Amit Sela, Gwen Shapira, Greg Spurrier, Sam Stokes, Ben Stopford, Tom Stuart, Diana Vasile, Rahul Vohra, Pete Warden, and Brett Wooldridge.

Several people have been invaluable to the writing of this book by reviewing drafts and providing feedback. I am particularly indebted to Raul Agepati, Tyler Akidau, Mattias Andersson, Sasha Baranov, Veena Basavaraj, David Beyer, Jim Brikman, Paul Carey, Raul Castro Fernandez, Joseph Chow, Derek Elkins, Sam Elliott, Alexander Gallego, Mark Grover, Stu Halloway, Heidi Howard, Nicola Kleppmann, Stefan Kruppa, Bjorn Madsen, Sander Mak, Stefan Podkowinski, Phil Potter, Hamid Ramazani, Sam Stokes, and Ben Summers. I take full responsibility for any remaining errors or unpalatable opinions in this book.

I am grateful to my editors, Marie Beaugureau, Mike Loukides, Ann Spencer, and the entire team at O’Reilly for their patience with my slow writing and unusual requests. I also thank Rachel Head for helping me find the right words. I am thankful to Alastair Beresford, Susan Goodhue, Neha Narkhede, and Kevin Scott for giving me the time and freedom to write despite other work commitments.

Special thanks go to Shabbir Diwan and Edie Freedman for illustrating the maps that accompany the chapters. Their dedication to creating beautiful and compelling maps is greatly appreciated.

Finally, my love goes to my family and friends, without whom I would not have been able to complete this four-year writing process. You are the best.