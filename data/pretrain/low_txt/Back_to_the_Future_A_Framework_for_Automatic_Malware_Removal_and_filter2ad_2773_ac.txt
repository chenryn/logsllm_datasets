# Back to the Future: A Framework for Malware Removal and System Recovery

## Abstract
This paper introduces "Back to the Future," a novel framework designed to automatically remove malware and repair its damage to the system. The framework ensures system integrity while allowing untrusted programs to run, and it uses monitoring, logging, and recovery mechanisms to achieve these goals. We implemented this framework on Windows and tested it with real spyware, adware, Trojan horses, and email worms. Our tool detected all modifications made by malware, outperforming commercial tools which overlooked up to 97% of the changes.

## 1. Introduction
Malware, including spyware, adware, Trojan horses, and email worms, poses a significant threat to computer systems. Traditional antivirus and anti-spyware tools often fail to detect and remove all malicious modifications. To address this, we developed "Back to the Future," a framework that monitors untrusted programs, logs their operations, and uses the logs to remove malware and restore infected data.

## 2. Framework Overview
The "Back to the Future" framework consists of three main components:
1. **Monitoring**: Tracks untrusted programs and their interactions with the system.
2. **Logging**: Records all operations performed by untrusted programs.
3. **Recovery**: Uses the logs to remove malware and restore the system to a safe state.

### 2.1. Comparison with Commercial Tools
Table 1 compares the detection capabilities of our tool and commercial tools in terms of files and registry keys modified by malware.

| Category | Our Tool | Commercial Tool |
|----------|----------|-----------------|
| File     | 83%      | 61%             |
| Registry Key | 79%   | 0%              |
| False Negative | 2%    | 2%              |

**Table 1. Comparison of our tool and commercial tools’ ability to detect files and registry keys modified by malware.**

### 2.2. Performance Overhead
Table 2 shows the CPU time and disk space overhead of our tool while running benign and malware programs.

| Program            | eZula Installer | Kazaa Installer | Happy99.Worm | Unzip (5MB file) |
|--------------------|-----------------|-----------------|--------------|------------------|
| Not Monitored      | 3.953s          | 48.965s         | 4.858s       | 0.535s           |
| Monitored as Trusted | 4.516s        | 59.824s         | 4.963s       | 0.666s           |
| Monitored as Untrusted | 6.338s      | 101.466s        | 4.937s       | 1.013s           |
| Log Size (KB)      | 4959            | 12552           | 6            | 336              |

**Table 2. CPU time and disk space overhead of our tool while running benign and malware programs.**

## 3. Security Considerations
### 3.1. Security of the Dichotomy of Trustworthiness
We assume that once a process is considered trusted, it remains trusted until explicitly reclassified. This assumption ignores the possibility that a trusted but vulnerable process may become untrusted if malicious code is injected into it.

### 3.2. Security of the Implementation
- **Read and Write Operations**: Our prototype considers read and write operations on the Windows registry and file system. It also treats some IPC mechanisms, such as named pipes, as combined read and write operations.
- **Security of the Monitoring Mechanism**: Our monitor is installed as a kernel driver, intercepting and controlling all API calls made by untrusted programs. This prevents tampering or circumvention by user-level processes.
- **Security of the Logging Mechanism**: The logging mechanism hooks into all API calls that access the file system, protecting the logs from untrusted processes.
- **Security of the Recovery Mechanism**: Before recovery, the untrusted process and any spawned processes are aborted, ensuring they cannot interfere with the recovery mechanism.

## 4. Related Work
- **SEE [20, 12]**: Proposed using one-way isolation to create a safe execution environment. Unlike SEE, our framework allows untrusted programs to write to the file system immediately but may prohibit some from running to completion.
- **Taser [7]**: Logs all process, file, and network operations for intrusion recovery. Our approach acts immediately when an untrusted process taints a trusted one, whereas Taser relies on IDS signals.
- **Virtual Machines**: King et al. [11] added support for virtual machines in the Linux kernel. However, virtual machines have limitations in resource access and require significant system resources.
- **Recovery-Oriented Computing (ROC) [16, 4]**: Focuses on recovering from system component failure and operator errors. Our framework has a smaller overhead and avoids expensive snapshots required in ROC.
- **Logging for Replay and Recovery**: ReVirt [6] and RFS [22] use logging for different purposes, such as intrusion detection and repairing network file servers.

## 5. Conclusion
"Back to the Future" is a novel framework for automatically removing malware and repairing its damage to the system. It preserves system integrity while allowing untrusted programs to run, and it uses monitoring, logging, and recovery mechanisms to achieve these goals. Our implementation on Windows demonstrates that our tool can detect all modifications made by malware, outperforming commercial tools.

## Acknowledgments
We thank Hong Li at Intel IT Research for helpful discussions.

## References
[1] Norton AntiVirus. http://www.symantec.com/avcenter.
[2] Spybot. http://www.safer-networking.org/en.
[3] M. Bishop. Computer Security: Art and Science. Addison-Wesley, 2003.
[4] A. B. Brown and D. A. Patterson. Undo for operators: Building an undoable e-mail store. In Proceedings of the 2003 Annual USENIX Technical Conference, 2003.
[5] J. Chow, B. Pfaﬁ, T. Gar(cid:2)nkel, K. Christopher, and M. Rosenblum. Understanding data lifetime via whole system simulation. In Proceedings of the USENIX Security Symposium, Aug. 2004.
[6] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M. Chen. Revirt: Enabling intrusion analysis through virtual-machine logging and replay. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation (OSDI), 2002.
[7] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara. The taser intrusion recovery system. In SOSP ’05: Proceedings of the twentieth ACM symposium on Operating systems principles, pages 163-176, New York, NY, USA, 2005. ACM Press.
[8] E. L. Howes. Anti-spyware testing. http://www.spywarewarrior.com/, 2004.
[9] S. King and P. Chen. Backtracking intrusions. In Proceedings of the 2003 Symposium on Operating Systems Principles (SOSP), 2003.
[10] S. King, G. Dunlap, and P. Chen. Debugging operating systems with time-traveling virtual machines. In Proceedings of the 2005 Annual USENIX Technical Conference, 2005.
[11] S. T. King, G. W. Dunlap, and P. M. Chen. Operating system support for virtual machines. In Proceedings of the 2003 Annual USENIX Technical Conference, June 2003.
[12] Z. Liang, V. Venkatakrishnan, and R. Sekar. Isolated program execution: An application transparent approach for executing untrusted programs. In Annual Computer Security Applications Conference, 2003.
[13] Mark Russinovich and Bryce Cogswell. Description of regmon tool. http://www.sysinternals.com/ntw2k/source/regmon.shtml.
[14] G. Nebbett. Windows NT/2000 Native API Reference. Que, 2000.
[15] One in Three Computers Has Malicious Code. http://www.marketingvox.com/archives/2004/10/06/one_in_three_computers_has_malicious_code, 2004.
[16] D. A. Patterson, A. Brown, P. Broadwell, G. Candea, M. Chen, J. Cutler, P. Enriquez, A. Fox, E. Kiciman, M. Merzbacher, D. Oppenheimer, N. Sastry, W. Tetzlaﬁ, J. Traupman, and N. Treuhaft. Recovery-oriented computing (roc): Motivation, definition, techniques, and case studies. Technical Report UCB//CSD-02-1175, UC Berkeley Computer Science, 2002.
[17] M. Rosenblum and J. K. Ousterhout. The design and implementation of a log-structured file system. ACM Transactions on Computer Systems, 10(1):26-52, 1992.
[18] J. Saltzer and M. Schroeder. The protection of information in computer systems. Communications of the ACM, 17(7), 1974.
[19] S. Saroiu, S. D. Gribble, and H. M. Levy. Measurement and analysis of spyware in a university environment. In Proceedings of the First Symposium on Networked Systems Design and Implementation - NDSI’04, Mar. 2004.
[20] W. Sun, Z. Liang, V. Venkatakrishnan, and R. Sekar. One-way isolation: An effective approach for realizing safe execution environments. In Proceedings of Network and Distributed Systems Symposium (NDSS), 2005.
[21] Sven B. Shcreiber. Undocumented Windows 2000 Secrets: A Programmer’s Cookbook, volume 1. Addison-Wesley, Upper Saddle River, NJ, 1st edition, 2001.
[22] N. Zhu and T.-C. Chiueh. Design, implementation, and evaluation of repairable file service. In Proceedings of the 2003 International Conference on Dependable Systems and Networks (DSN ’03), 2003.