### Evaluation Results

#### Baseline and Enhanced Classifier Performance
- **Baseline (w/o APIGraph):**
  - 0.840, 0.726, 0.718, 0.718, 0.605, 0.635, 0.811, 0.765, 0.627, 0.734
- **Enhanced (w/ APIGraph):**
  - 0.833, 0.791, 0.890, 0.875, 0.908, 0.969, 0.877, 0.680, 0.637, 0.789, 0.814, 0.704, 0.861, 0.748

- **Drebin:**
  - **w/ APIGraph:** 0.878, 0.859, 0.886, 0.869, 0.844, 0.865, 0.867
  - **w/o APIGraph:** 0.779, 0.734, 0.759, 0.666, 0.767, 0.794, 0.750
  - **Improvement:** 15.6%

- **Drebin-DL:**
  - **w/ APIGraph:** 0.875, 0.819, 0.866, 0.816, 0.878, 0.829, 0.706, 0.916, 0.797, 0.793, 0.874, 0.828, 0.799, 0.868
  - **w/o APIGraph:** 0.779, 0.734, 0.759, 0.666, 0.767, 0.794, 0.750
  - **Improvement:** 8.7%

- **Average Improvement:** 19.2% to 19.6%

### Family Information for Android Malware

**Step 1: Labeling via Euphony [20]**
- **Process:** We use the malware labeling tool Euphony to label the family information of all 109,770 collected malware samples. Euphony links different family label aliases from various AV engines on VirusTotal. For example, it can link "boxersms" from one AV with its alias "boxer" from another.
- **Output:** A list of (ùëô, ùë†) pairs, where ùëô is a family label and ùë† is the number of AVs that support this label.

**Step 2: Selection of Malware with Reliable Labels**
- **Criteria:** We select a subset of malware with reliable labels recognized by at least 50% of the AVs, and the second most popular label is recognized by at most 10% of the AVs.
- **Result:** This process yields 101,360 malware samples labeled with family information, covering 1,120 families.

**Step 3: Selection of Top 30 Malware Families**
- **Criteria:** We choose the top 30 families with the most labeled samples to ensure each family has enough samples for evaluation.
- **Result:** 75,625 (74.61%) apps are included in this experiment, with each family having more than 500 apps (except the last one). The top 30 families and their sample counts are listed in Table 10 of Appendix A.

### Evaluation Methodology

1. **Sorting and Grouping:**
   - Sort all malware samples in one family by their appearance time.
   - Divide them into 10 groups, each containing 10% of the samples. The appearance time of all samples in one group is strictly ahead of the next.

2. **Static Analysis:**
   - Use apktool [2] to disassemble malware code and obtain API features.

3. **Feature Stability Calculation:**
   - Calculate the feature stability score of every two adjacent groups using Jaccard similarity:
     \[
     J(A, B) = \frac{|A \cap B|}{|A \cup B|}
     \]
     where \(A\) and \(B\) are the sets of used features for two adjacent groups.

### Results

- **Figure 7:** Shows the distribution of feature stability scores for each malware family, comparing APIs and API clusters as features. The feature stability score for API clusters is very close to 1 and much higher than for individual APIs, indicating that APIGraph effectively captures malware evolution.

- **Figure 8:** Breakdown of feature stability scores for four specific malware families. The feature stability score with API clusters remains almost flat over time, while the score with independent APIs is low and decreases over time.

### Summary
- **APIGraph:** Successfully captures semantic similarities among evolved malware samples in a family.

### RQ4: API Closeness Analysis

- **Objective:** Measure the closeness of APIs in the same cluster to demonstrate the effectiveness of APIGraph.
- **Method:** Use t-SNE [31] to project all API embeddings into a two-dimensional space and visualize them.
- **Observations:**
  - PII-related APIs (e.g., `getDeviceId()`, `getSubscriberId()`) are close to each other.
  - Network-related APIs (e.g., from `java.net`, `javax.net`, `android.net.Network`) are also close.
  - APIs in the `java.lang` package are separated into security-sensitive and Java built-in data structure groups.
- **Conclusion:** Semantically-close APIs are grouped in the same or close clusters in the embedding space by APIGraph.

### Discussion

- **API Semantics from Non-official Documents:** API semantics can be extracted from various sources, but official Android API documents are the primary source due to their reliability and comprehensive information.
- **Relation/Entity Types:** Four entity and ten relation types are defined, which can be extended in the future.
- **Non-API-based Malware Classifiers:** While some classifiers do not directly use APIs, APIGraph can still enhance them by transforming opcodes to incorporate API cluster information.
- **Malware Obfuscation:** Techniques like Java reflection, packing, and dynamic code loading are orthogonal to APIGraph, and existing works should be referred to for solutions.

### Related Work

- **Android Malware Classifiers:** Many classifiers use APIs as features, but they often treat each API separately. APIGraph enhances these classifiers by capturing semantic relations among APIs.
- **Concept Drift and Model Aging:** Concept drift is a common issue in machine learning, leading to model aging. APIGraph helps slow down this aging by capturing malware evolution.
- **Semantics from API Documentation:** Knowledge graphs and NLP techniques have been used to extract API caveats, but APIGraph focuses on semantic similarity to capture preserved semantics during malware evolution.

### Conclusion

- **APIGraph:** Captures semantic similarity among APIs and enhances state-of-the-art classifiers to classify evolved malware samples. It builds an API relation graph, converts APIs to embeddings, and groups them into clusters. These clusters replace individual APIs as features, significantly reducing the number of samples needed for labeling.

### Acknowledgements

- **Thanks to:** Anonymous reviewers for their helpful comments.
- **Funding:** Supported by the National Natural Science Foundation of China, Natural Science Foundation of Shanghai, and National Program on Key Basic Research. Authors from Johns Hopkins University were supported by the National Science Foundation (NSF).

### References

- [1] Yousra Aafer, Wenliang Du, and Heng Yin. 2013. DroidAPIMiner: Mining API-level Features for Robust Malware Detection in Android. In Proceedings of the International Conference on Security and Privacy in Communication Systems (SecureComm). Springer, 86‚Äì103.
- [2] Apktool. 2019. A Tool for Reverse Engineering Android APK Files. https://ibotpeaches.github.io/Apktool/.
- [3] Daniel Arp, Michael Spreitzenbarth, Malte Hubner, Hugo Gascon, Konrad Rieck, and CERT Siemens. 2014. DREBIN: Effective and Explainable Detection of Android Malware in Your Pocket.. In Proceedings of the Network and Distributed System Security Symposium (NDSS). 23‚Äì26.
- [4] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. 2012. PScout: Analyzing the Android Permission Specification. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS). ACM, 217‚Äì228.
- [5] Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien Octeau, and Sebastian Weisgerber. 2016. On Demystifying the Android Application Framework: Re-visiting Android Permission Specification Analysis. In Proceedings