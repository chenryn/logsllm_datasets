# Controlling the Source: Abusing Source Code Management Systems

**Presenter:** Brett Hawkins (@h4wkst3r)  
**Role:** Adversary Simulation, IBM X-Force Red

## Agenda
1. Introduction
2. Source Code Management Systems
   - GitHub Enterprise
   - GitLab Enterprise
   - Bitbucket
3. SCMKit
4. Demos
5. Defensive Considerations
6. Conclusion

---

## Introduction

### Who am I?
- **Current Role:** Adversary Simulation, IBM X-Force Red
- **Previous Roles:** Mandiant, J.P. Morgan Chase, J.M. Smucker Company
- **Conference Speaker:** DerbyCon, Wild West Hackinâ€™ Fest, BSides, Hackers Teaching Hackers
- **Open-Source Tool Author:** SharPersist, DueDLLigence, InvisibilityCloak, SCMKit

### How did this research come about?
- **Real-world experience:** Attacking source code management systems
- **Recent Security Breaches:**
  - **Software Supply Chain Attacks:** SolarWinds, Kaseya, Codecov
  - **Source Code Theft:** LAPSUS$
    - Microsoft - Azure DevOps
    - T-Mobile - Bitbucket
    - Samsung - GitHub Enterprise
    - Globant - GitHub Enterprise

### Research Goals
- **Raise awareness:** Securing Source Code Management (SCM) systems
- **Inspire future research:** Defending SCM systems

### Attendee Takeaways
- **Learn about:** Different attack scenarios against SCM systems
- **Understand how to:** Defend and abuse SCM systems in both privileged and non-privileged contexts

### My Perspective
- **Current Role:** Red Team Operator
- **Previous Role:** Blue Teamer
- **Not a:** DevOps Engineer, Software Developer, System Administrator

---

## Source Code Management Systems

### What is a Source Code Management System?
- **Function:** Manages source code repositories
- **Collaboration:** Allows multiple developers to work on code simultaneously
- **Integrations:** Supports integrations into other systems within the DevOps pipeline

### Popular Systems
- GitHub Enterprise
- GitLab Enterprise
- Bitbucket

### DevOps Pipeline
- **SCM Systems:** Used during the "Build" phase
- **Image Reference:** [DevOps Pipeline](https://medium.com/aws-cyber-range/secdevops-101-strengthen-the-basics-20f57197aa1c)

### Software Supply Chain Attacks
- **Attack Method:** Injecting malicious code into the development process
- **Research Focus:** Scenarios B and C
- **Image Reference:** [Supply Chain Attacks](https://opensource.googleblog.com/2021/10/protect-your-open-source-project-from-supply-chain-attacks.html)

### Lateral Movement to Other DevOps Systems
- **SCM Systems:** Initial access point
- **Pivots:** CI/CD Platform, Distribution Platform
- **Image Reference:** [Lateral Movement](https://opensource.googleblog.com/2021/10/protect-your-open-source-project-from-supply-chain-attacks.html)

---

## GitHub Enterprise

### Access Model
- **Enterprise Roles:** Owners, Members
- **Organization Roles:** Organization Owners, Organization Members, Security Managers, GitHub App Managers, Outside Collaborators
- **Repository Roles:** Read, Triage, Write, Maintain, Admin
- **Access Token Scopes:** Repository, Organization, SSH Keys, Gists, Users, GPG Keys, Site Admin

### API Capabilities
- **REST API:** Interacts with repositories, SSH keys, users, admin functionality, and more

### Attack Scenarios
- **Reconnaissance:**
  - Sub-Scenarios: Repository, File, Code
  - Admin Required: No
- **Repository Takeover:**
  - Sub-Scenario: N/A
  - Admin Required: Yes
- **User Impersonation:**
  - Sub-Scenarios: Impersonate User Login, Impersonation Token
  - Admin Required: Yes
- **Promoting User to Site Admin:**
  - Sub-Scenario: N/A
  - Admin Required: Yes
- **Maintain Persistent Access:**
  - Sub-Scenarios: Personal Access Token, Impersonation Token, SSH Key
  - Admin Required: No
- **Management Console Access:**
  - Sub-Scenario: N/A
  - Admin Required: Yes

### Reconnaissance
- **Interaction:** Web interface or REST API
- **Logging:**
  - **HAProxy Log:** /var/log/haproxy.log
  - **Search Criteria:** ('/search' OR '/api/v3/search') AND 'http'

### Repository Takeover
- **Admin Action:** Unlock any repository for modify access
- **Logging:**
  - **Audit Log:** /var/log/github-audit.log
  - **Search Criteria:** action:repo.staff_unlock

### User Impersonation
- **Sub-Scenarios:** Impersonate User Login, Impersonation Token
- **Logging:**
  - **Audit Log:** /var/log/github-audit.log
  - **Search Criteria:** action:staff.fake_login, action:oauth_access.create, action:oauth_authorization.create

### Promoting User to Site Admin
- **Admin Action:** Add any user to site admin
- **Logging:**
  - **Audit Log:** /var/log/github-audit.log
  - **Search Criteria:** action:user.promote, action:business.add_admin

### Maintain Persistent Access
- **Sub-Scenarios:** Personal Access Token, Impersonation Token, SSH Key
- **Logging:**
  - **Audit Log:** /var/log/github-audit.log
  - **Search Criteria:** action:oauth_access.create, action:oauth_authorization.create, action:public_key.create, action:public_key.verify

### Management Console Access
- **Single Shared Password:** Configure enterprise instance
- **Example:** Adding SSH key
- **Logging:**
  - **Management Log:** /var/log/enterprise-manage/unicorn.log

---

## GitLab Enterprise

### Access Model
- **User Project Permissions:** Guest, Reporter, Developer, Maintainer, Owner
- **Access Token Scopes:** api, read_user, read_api, read_repository, write_repository, read_registry, write_registry, sudo

### API Capabilities
- **REST API:** Interacts with repositories, SSH keys, users, admin functionality, and more

### Attack Scenarios
- **Reconnaissance:**
  - Sub-Scenarios: Repository, File, Code
  - Admin Required: No
- **User Impersonation:**
  - Sub-Scenarios: Impersonate User Login, Impersonation Token
  - Admin Required: Yes
- **Promoting User to Admin Role:**
  - Sub-Scenario: N/A
  - Admin Required: Yes
- **Maintain Persistent Access:**
  - Sub-Scenarios: Personal Access Token, Impersonation Token, SSH Key
  - Admin Required: No
- **Modifying CI/CD Pipeline:**
  - Sub-Scenario: N/A
  - Admin Required: Yes (Project Level)
- **SSH Access:**
  - Sub-Scenario: N/A
  - Admin Required: Yes

### Reconnaissance
- **Interaction:** Web interface or REST API
- **Logging:**
  - **Production Log:** /var/log/gitlab/gitlab-rails/production.log, /var/log/gitlab/gitlab-rails/production_json.log
  - **API Log:** /var/log/gitlab/gitlab-rails/api_json.log
  - **Access Log:** /var/log/gitlab/nginx/gitlab_access.log
  - **Search Criteria:** 'get' AND '/search?search', 'get' AND '/search', 'get' AND ('/search'| OR 'repository/tree'), 'search'

### User Impersonation
- **Sub-Scenarios:** Impersonate User Login, Impersonation Token
- **Logging:**
  - **Production Log:** /var/log/gitlab/gitlab-rails/production_json.log, /var/log/gitlab/gitlab-rails/production.log
  - **API Log:** /var/log/gitlab/gitlab-rails/api_json.log
  - **Search Criteria:** 'has started impersonating', 'impersonate', 'post' AND 'impersonation_tokens', 'impersonation_tokens'

### Promoting User to Admin Role
- **Admin Action:** Add any user to admin
- **Logging:**
  - **Production Log:** /var/log/gitlab/gitlab-rails/production_json.log, /var/log/gitlab/gitlab-rails/production.log
  - **API Log:** /var/log/gitlab/gitlab-rails/api_json.log
  - **Search Criteria:** 'patch' AND 'admin/users', 'put' AND '"key":"admin","value":"true"'

### Maintain Persistent Access
- **Sub-Scenarios:** Personal Access Token, Impersonation Token, SSH Key
- **Logging:**
  - **Production Log:** /var/log/gitlab/gitlab-rails/production_json.log, /var/log/gitlab/gitlab-rails/production.log
  - **API Log:** /var/log/gitlab/gitlab-rails/api_json.log
  - **Search Criteria:** 'post' AND 'personal_access_tokens', 'post' AND 'profile/keys', 'post' AND 'user/keys'

### Modifying CI/CD Pipeline
- **Action:** Modify .gitlab-ci.yml file in repo
- **Effect:** Triggers pipeline to run for that project
- **Logging:**
  - **Production Log:** /var/log/gitlab/gitlab-rails/production_json.log
  - **Search Criteria:** 'post' AND '/api/graphql' AND '.gitlab-ci.yml' AND 'update'

### SSH Access
- **GitLab Config File:** /etc/gitlab/gitlab.rb
- **GitLab Secrets File:** /etc/gitlab/gitlab-secrets.json
- **Postgresql Database:**

---

## Bitbucket

### Access Model
- **Permission Levels:** Global, Project, Repository, Branch
- **Global Permissions:** Bitbucket User, Project Creator, Admin, System Admin
- **Project Permissions:** Project Admin, Write, Read
- **Repo Permissions:** Admin, Write, Read
- **Branch Permissions:** Prevent all changes, Prevent deletion, Prevent rewriting history, Prevent changes without a pull request
- **Access Token Scopes:** Repository read, Repository write, Repository admin, Project read, Project write, Project admin

### API Capabilities
- **REST API:** Interacts with repositories, SSH keys, users, admin functionality, and more

### Attack Scenarios
- **Reconnaissance:**
  - Sub-Scenarios: Repository, File, Code
  - Admin Required: No
- **Promoting User to Admin Role:**
  - Sub-Scenario: N/A
  - Admin Required: Yes
- **Maintain Persistent Access:**
  - Sub-Scenarios: Personal Access Token, SSH Key
  - Admin Required: No
- **Modifying CI/CD Pipeline:**
  - Sub-Scenario: N/A
  - Admin Required: No

### Reconnaissance
- **Interaction:** Web interface or REST API
- **Logging:**
  - **Production Log:** /var/log/bitbucket/bitbucket-rails/production.log
  - **API Log:** /var/log/bitbucket/bitbucket-rails/api_json.log
  - **Access Log:** /var/log/bitbucket/nginx/bitbucket_access.log
  - **Search Criteria:** 'get' AND '/search?search', 'get' AND '/search', 'get' AND ('/search'| OR 'repository/tree'), 'search'

### Promoting User to Admin Role
- **Admin Action:** Add any user to admin
- **Logging:**
  - **Production Log:** /var/log/bitbucket/bitbucket-rails/production_json.log, /var/log/bitbucket/bitbucket-rails/production.log
  - **API Log:** /var/log/bitbucket/bitbucket-rails/api_json.log
  - **Search Criteria:** 'patch' AND 'admin/users', 'put' AND '"key":"admin","value":"true"'

### Maintain Persistent Access
- **Sub-Scenarios:** Personal Access Token, SSH Key
- **Logging:**
  - **Production Log:** /var/log/bitbucket/bitbucket-rails/production_json.log, /var/log/bitbucket/bitbucket-rails/production.log
  - **API Log:** /var/log/bitbucket/bitbucket-rails/api_json.log
  - **Search Criteria:** 'post' AND 'personal_access_tokens', 'post' AND 'profile/keys', 'post' AND 'user/keys'

### Modifying CI/CD Pipeline
- **Action:** Modify .bitbucket-pipelines.yml file in repo
- **Effect:** Triggers pipeline to run for that project
- **Logging:**
  - **Production Log:** /var/log/bitbucket/bitbucket-rails/production_json.log
  - **Search Criteria:** 'post' AND '/api/graphql' AND '.bitbucket-pipelines.yml' AND 'update'

---

## Conclusion

- **Summary:** Importance of securing SCM systems
- **Future Research:** Defending against attacks on SCM systems
- **Contact Information:** Brett Hawkins (@h4wkst3r)

---

**IBM Security / Â© 2022 IBM Corporation**