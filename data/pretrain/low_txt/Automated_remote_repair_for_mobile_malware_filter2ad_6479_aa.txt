# Automated Remote Repair for Mobile Malware

**Authors:**
- Yacin Nadji
- Jonathon T. Giffin
- Patrick Traynor

**Affiliation:**
School of Computer Science, Georgia Institute of Technology
{yacin.nadji, giffin, traynor}@cc.gatech.edu

## Abstract
Mobile application markets currently serve as the primary defense against malicious applications. While marketplace revocations have successfully removed overtly malicious applications, the anticipated surge in mobile malware necessitates faster response mechanisms. This paper introduces an infrastructure that automatically identifies and responds to malicious mobile applications based on their network behavior. We design and implement a prototype, Airmid, which uses cooperation between in-network sensors and smart devices to identify the source of malicious traffic. We then develop sample malicious mobile applications that exceed the capabilities of recently discovered malware, demonstrate their ability to evade current detection techniques, and use Airmid to show a range of automated recovery responses, from on-device firewalls to application removal.

## 1. Introduction
Malware infections on mobile phones have increased significantly in recent years. Almost immediately after the introduction of advanced functionalities, researchers predicted that these devices would become targets for malicious software [14, 24]. Despite the growing sophistication of mobile operating systems and the discovery of more malicious applications, large-scale infections have been avoided. This relative safety is largely due to the revocation capabilities of mobile application markets, which can remove malicious programs from both the marketplace and installed platforms upon detection or notification.

Manually-triggered revocations have been effective because the number of malicious applications has been small. However, as the rate of new mobile malware discoveries approaches that of traditional malware, estimated at over 70,000 new samples per day [38], such mechanisms will struggle to respond rapidly. Specifically, cellular providers cannot rely solely on the rapid identification and removal of malware by mobile market operators.

In this paper, we propose, design, and implement Airmid, a system for the automated detection and response to malicious software infections on handheld mobile devices. Our architecture leverages cooperation between network monitors and on-device software components. The main detection component is placed within the network, so no malware-specific knowledge needs to be stored on every mobile device. When the network sensor detects malicious traffic (using traditional security tools like DNS blacklists, domain firewall policies, and IDS), it notifies affected devices via an authenticated channel. A protected software agent on each device then identifies the executing processes responsible for the malicious traffic and initiates a recovery action, such as filtering traffic, sandboxing or deleting apps, or restoring the device to factory defaults. This system allows for machine-speed detection and response without human intervention and without burdening small handheld systems with the computational, storage, and power demands typical of traditional anti-virus systems.

As with desktop malware, we expect malicious apps to increase in sophistication as defensive utilities become widespread. However, current malicious applications remain relatively simple. To facilitate testing with complex malicious apps, we developed laboratory samples of mobile malware exhibiting characteristics common to mature desktop-class malware. These samples include data exfiltration, premium number dialing, and botnet activity, along with evasive functionalities such as detecting emulated environments, creating hidden background processes, and log scrubbing. These samples demonstrate that mobile device software architectures permit the creation of advanced malware that cannot be easily identified prior to distribution, underscoring the need for rapid recovery after infection. For safety, our malware lacks propagation ability and was tested only on a closed network.

In summary, our contributions are:
- Identification of current remediation shortcomings.
- Design and implementation of advanced prototype malware.
- Cooperatively neutralizing malware on infected mobile phones.

## 2. Related Work
Mobile malware is becoming increasingly prevalent. While malicious software for these platforms is not new [18â€“21], the migration towards a few dominant mobile operating systems and the increasing power of these devices heighten the probability of large-scale infections. Traynor et al. [41] observed that even small numbers of compromised and coordinated phones could cause widespread outages. Other authors have built advanced proof-of-concept mobile malware capable of deciphering DTMF tones [37] and collecting video [43]. Mobile malware in the wild has already been found to exfiltrate sensitive data [39], generate calls and text messages to premium numbers [26], and exhibit traditional botnet behaviors [36].

The industrial and research communities have responded with various solutions. Numerous anti-virus products have been ported to popular mobile platforms [2, 9, 17, 27]. Others have proposed new platform-based detection systems based on triggers such as service thresholds [8], low-level API calls [7], and anomalous power usage profiles [28, 30]. These device-only approaches fail for several reasons, including excessive power requirements for traditional anti-virus scanning and false positives caused by untrained benign behavior. Tools like TaintDroid [16] and PiOS [15] can identify information flows in applications but require significant manual assistance and do not automatically identify "malicious" behavior; they identify specific information flows (e.g., IMEIs and IMSIs). Neither approach is currently scalable for analyzing all available mobile applications.

Traffic attribution and provenance are generally difficult problems. IP addresses are well-known weak indicators of the origin of malicious traffic on the Internet. Regular backscatter traffic measurements indicate widespread address spoofing [32]. Balasubramaniyan et al. attempt to solve a similar problem in the larger telephony space [5]. Because cellular networks maintain a cryptographic relationship with each user device, attributing a specific packet to an individual device is possible. However, additional steps are needed to identify the specific process responsible for the traffic.

In the context of virtualized desktop systems, Srivastava et al. [40] developed a virtual machine introspection technique that attributes network traffic to an executing process for implementing firewall rules. Our work uses an in-kernel approach to identify a similar correlation between network behaviors and process execution for malware infection remediation.

## 3. Mobile Malware
Malware has begun to move from desktop computing into mobile environments. This section briefly considers mobile malware already deployed and extensively presents highly capable laboratory samples that we created to demonstrate both the evasive technologies available to malware authors on Android platforms and the utility of our proposed remote repair design.

### 3.1 In the Wild
By the first quarter of 2011, over 1000 mobile malware instances had been discovered, primarily targeting the Symbian OS for feature phones [31]. Android is the second most common target and the most common smartphone OS victim. Google, the producer of Android and operator of the official app marketplace, has exercised its revocation ability at least three times since 2010 [3, 11, 12]. The malicious behaviors of Android malware include:
- Privilege escalation to root (DroidDream).
- Bots (Drad.A).
- Data exfiltration (DroidKungFu, SteamyScr.A).
- Backdoor triggered via SMS (Bgyoulu.A).

Similarly, jailbroken devices running Apple iOS experienced a botnet in 2009 [36]. These attacks send and receive traffic across data or voice channels that can be identified by a network intrusion detection system as malicious.

Detection of mobile malware prior to deployment is as challenging as detection on desktop systems. Centralized app marketplaces provide an opportunity for centralized analysis before listing an app. Unfortunately, marketplaces have at least two deficiencies that enable the proliferation of malicious apps. First, malware authors can write their apps with logic to evade detection or analysis, as we show below with laboratory malware samples. Second, the Android platform allows users to install apps from third-party marketplaces that may make no efforts to verify the safety of the software they distribute. As a result, we naturally expect malware to successfully reach client devices.

### 3.2 Enhanced Prototype Malware
As seen in desktop security, the success of traditional malware detection diminishes as malware incorporates strategies designed to evade detection or analysis. While evasions strengthen the need for post-infection remediation, existing mobile malware samples have not yet added such complexity. To better illustrate the effectiveness and flexibility of Airmid, we created laboratory malware instances suggestive of future malicious developments in the mobile environment. Each instance combines malicious functionality now occurring in real mobile malware with evasive functionality common to desktop malware, and embeds the malicious logic into a benign app. Inserting malware into a benign app and rehosting the app on a third-party marketplace has become a common malware distribution strategy. For safety, we created our laboratory malware samples without distribution or propagation functionality.

We created three laboratory mobile malware samples: a Twitter client that leaks private data ("Loudmouth"), a Facebook client sync app that dials premium numbers ("2Faced"), and a mobile bot ("Thor"). Each piece of malware is actually a maliciously modified open-source Android application. Our malware requires no additional permissions from the unmodified applications, which are listed in Table 1. All samples include evasive techniques and exceed the capabilities of mobile malware currently in the wild.

#### 3.2.1 Loudmouth
Our first malware instance, Loudmouth, combines:
- **Malicious mobile functionality:** Data exfiltration.
- **Evasive functionality:** Malware analysis environment detection.
- **Benign host app:** Twitter client.

The principal malicious functionality of Loudmouth is data exfiltration, a powerful attack in a mobile context. As users embrace the functionality of smartphones, they place significant personal data on their devices. Even basic feature phones store contact lists, messages, and call databases. GPS-enabled devices can leak location information, turning a mobile device into a tracking system. Such data is useful for criminal activities.

Loudmouth appears to the user as a benign Twitter client. We augmented the Nanotweeter [34] codebase with just 143 lines of new, malicious code. The app provides the expected functionality but also leaks private information to a server owned by the attacker (in this case, us) during use. It steals Twitter account credentials, the phonebook database, and the most recently available GPS location. When active, Loudmouth creates malicious network traffic that contains private data and is transmitted to the malware author's server.

Desktop-class malware is commonly analyzed by executing the malware within a virtualized or emulated environment. Malware authors have hence begun to include checks for analysis environments, and the malware alters its behavior so that it does not exhibit malicious functionality during analysis [13, 22]. Mobile malware does not yet contain such sophistication; however, should application marketplaces begin to verify apps via runtime analysis, then mobile malware authors may begin to include checks for analysis environments. We implemented multiple checks in Loudmouth.

To thwart dynamic analysis, Loudmouth contains several checks to determine its environment and hides all malicious behavior when run on an emulator or a developer phone. The Android platform provides straightforward methods of detection. Loudmouth first queries the "brand," "device," and "model" Java environment variables and compares their values against a whitelist of known consumer phones. The malware then checks for the Radio Interface Layer (RIL) library, the Google Maps application, and any DRM system components. These three components are either supplied by hardware device manufacturers or are proprietary and are not distributed with the emulator or developer phones. These restrictions are actively enforced even for third-party distributions of the operating system [42]. Loudmouth can thus determine whether the phone is emulated or a physical device, as well as specific details of the phone. To the best of our knowledge, we are the first to investigate and implement these techniques in mobile phones.

#### 3.2.2 2Faced
Our second malware instance, 2Faced, combines:
- **Malicious mobile functionality:** Premium number dialer.
- **Evasive functionalities:** Log sanitization and a hidden native process.
- **Benign host app:** Facebook sync.

Premium number dialer applications are examples of historic malware that once targeted dial-up Internet users. These attacks resulted in revenue for the owners of the premium numbers, as users had little chance of refuting their expensive phone bills [10]. These attacks have recently seen a resurgence on mobile devices [26].

2Faced is a new generation of the premium number dialer.