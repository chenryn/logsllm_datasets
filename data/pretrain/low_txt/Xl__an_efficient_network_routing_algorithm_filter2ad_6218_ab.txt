### Routing Process State for Adjacent Nodes

**Figure 1: The routing process state for a pair of adjacent nodes.**

- **Routing Process Components:**
  - **Forwarding Table (fu and fv):** Each node maintains a forwarding table, which is private.
  - **Internal View (Tu and Tv):** Each node maintains an internal view, which is also private.
  - **External View (Tuv and Tvu):** For each neighbor, a node maintains an external view. The external view Tuv can be atomically updated by node u and atomically read by node v. Similarly, the external view Tvu can be atomically updated by node v and atomically read by node u.

### Update Algorithm

**Figure 2: The update algorithm computes the new forwarding table, internal view, and external views.**

- **Inputs to the Algorithm:**
  - Current incident edge weights.
  - Neighbors' external views.
  - Previous internal view and external views.
  - Current time τ.

### 4.1 Initial View

- **Initial Internal and External Views:**
  - The initial internal view Tu and external views Tuv are defined as:
    \[
    T3(x, y) = \infty @ 0
    \]
  - To satisfy the view invariant (Equation V1), we define \( e0(x, y) \) to be ∞ for all edges (x, y) in the graph.

- **View Invariant:**
  - A view is a function mapping each edge to an edge datum, which is a pair of values p and t, written p @ t, meaning that the edge had weight p at time t.
  - The view invariant ensures that the edge in question should have really had cost p at time t.
  - Formally, the view invariant is:
    \[
    T3(x, y) = p @ t \Rightarrow et(x, y) = p
    \]

- **Most Recent Operator:**
  - An edge datum p @ t is more recent than datum p' @ t' if t > t'.
  - The "most recent" operator "rec" applied to a set of edge data S returns the most recent datum in S.

- **Path and Distance Definitions:**
  - Let \( \pi3(z, w) \) be a minimum-cost path from z to w in T3.
  - Define \( d3(w) = \|\pi3(u, w)\|3 \).

### 4.2 Update Algorithm

**The update algorithm has three phases:**

- **Phase I: Internal and Preliminary External Views**
  - **Time at the start of the iteration (τ):** Input.
  - **Maximum allowed relative error (εu(w)):** Algorithm parameter.
  - **Previous internal and external views (T′u, T′uv):** Input.
  - **Current external view (Tvu):** Input.
  - **New internal and external views (Tu, Tuv):** Output.
  - **Preliminary external view (T*uv):** Computed in Phase I.
  - **Forwarding table (fu):** Output.

- **Steps:**
  - **Preliminary External View:**
    \[
    T^*_{uv}(x, y) = \text{rec} \left( T'_{uv}(x, y), T_{vu}(x, y) \right)
    \]
  - **Internal View:**
    \[
    T_u(u, v) = 
    \begin{cases} 
    e_\tau(u, v) @ \tau & \text{if } e_\tau(u, v) \neq e'_{u}(u, v) \\
    T'_u(u, v) & \text{otherwise}
    \end{cases}
    \]
  - **Other Edges:**
    \[
    T_u(x, y) = \text{rec} \left( T^*_{uv}(x, y) \right)
    \]

- **Lemma 1:**
  - The internal view and preliminary external view are well-defined and satisfy the view invariant.

- **Phase II: Shortest-Path Tree and Forwarding Table**
  - Compute the shortest-path tree using the internal view Tu.
  - Set the forwarding table according to the computed shortest-path tree.

- **Phase III: Final External Views**
  - Ensure the external views satisfy the soundness and completeness constraints.
  - **Algorithm 1:**
    - Greedily update hot edges until Constraint C1 is satisfied.

- **Lemma 2:**
  - After executing Algorithm 1, the external view Tuv satisfies the View Invariant V1 and Constraints S1, S2, and C1.

### 4.3 Analysis

- **Soundness and Completeness:**
  - Constraints S1 and S2 produce a sound forwarding network configuration.
  - Constraint C1 produces a complete configuration with bounded stretch.

- **Coherence:**
  - An edge (or set of edges) is coherent at a point in time if its associated external views are the same at that point in time.

- **Lemmas:**
  - **Lemma 3:** If φt(u, w) is a non-empty path that is both quiet during time interval [t − Δ, t] and coherent at time t, then φt(u, w) is a finite path from u to w and \( \|\phi_t(u, w)\|_t \leq d^t_u(w) \).
  - **Lemma 4:** If β is a path from u to w that is quiet during [t − Δ, t] and coherent at time t, then:
    \[
    d^t_u(w) \leq (1 + \varepsilon)(\|\beta\|_t)
    \]
    where \( \varepsilon = \max_{x \in \beta} \varepsilon_x(w) \).

This structured and detailed explanation provides a clear and professional overview of the routing process and the update algorithm.