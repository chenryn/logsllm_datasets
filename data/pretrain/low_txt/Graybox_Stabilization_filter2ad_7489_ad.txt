### Optimized Text

**Component Reuse and Specification Growth:**
Specifications typically grow at a slower rate compared to implementations. This characteristic offers the potential for component reuse. Component technologies usually separate the notion of specification (often referred to as an interface or type) from that of implementation. Since reuse is more common at the specification level than at the implementation level, it can be argued that graybox stabilization is more reusable than stabilization specific to an implementation.

**Lamport-ME Algorithm:**
```plaintext
LamportME
t.j   A  {Request CS }  -+ 
REQj  := 1c.j;  h.j:=true; 
Insert(request-queue.j, REQ,); 
(Vk : k # j  : send-request(j , REQ, , k ) ) 

-1e.j  A  { receive-request for “REQk” } --+  .-- true; 
j.REQk  := REQk; Receiued(j.REQk) .- 
Insert(request-queue.j, j.REQk); 
send-reply(j , 1c.j , k ); 
Receiued(j.REQk) :=false 

-1e.j  A  { receive-reply for “1c.k” } -+ 
j.REQk  := 1c.k; 
if  ( REQj < j.REQk ) then grant.j.k := true 
(Vk : k # j  : 9rant.j.k) 

h..j  A 
A  REQ, = Head(request-queue.j) -+ 
e . j  := true 

e . j   A  (Release CS } + 
REQ,  := 1c.j;  t.j:=true; 
(Vk : k # j  : grant.j.k :=false); 
(Vk : k # j  : j.REQk  := CO); 
Dequeue( request-queue.j ); 
(Vk : k  # j :  send-release(j , RE&,  , k )) 

-7e.j  A  { receive-release for “REQk” } --+ 
j.REQk  := REQk;  9rant.j.k :=true; 
Dequeue( request-queue.j  ) 

true --+ 
(Vk : k # j  : 9rant.j.k := 
request4ueue.j  := 
j.REQk)  A 
(REQ, 
Sort({REQ,, (Vk : IC  # j  : j . R E Q k ) } )  
j.REQk  # 00);
```

**Graybox Stabilization:**
The graybox approach has received limited attention in previous work on dependability. Notable works include [4,6,19], which reason at a graybox level; [17], which addresses specification-oriented integration of system modules for designing dependable systems; and [15], which discusses the role of automated formal methods for specifications involving dependability.

Although our discussion of the graybox approach is primarily focused on the property of stabilization, the approach is applicable to the design of other dependability properties, such as masking fault-tolerance and fail-safe fault-tolerance. A system is masking fault-tolerant if its computations in the presence of faults still implement the specification. A system is fail-safe fault-tolerant if its computations in the presence of faults implement the "safety" part (but not necessarily the "liveness" part) of its specification.

Our observation that graybox stabilization is not readily achieved for all specifications also applies to graybox masking and graybox fail-safe. Additionally, local everywhere specifications are amenable to graybox stabilization, which is also true for graybox masking and graybox fail-safe.

**Further Research Directions:**
Local everywhere(-eventually) specifications are a sufficient condition for graybox design of dependability properties. However, experience [16,20] confirms that there are practical systems where local everywhere(-eventually) specifications are not necessary. Therefore, identifying other relevant classes of specifications that are amenable to graybox design of other dependability properties is an interesting direction for further research. Another direction we are pursuing is the automatic synthesis of graybox dependability.

**Acknowledgments:**
We thank Ted Herman and an anonymous referee for their insightful comments, which helped to improve the paper.

**References:**
[1] Y. Afek and S. Dolev. Local stabilizer. PODC97 Proceedings of the Sixteenth Annual ACM Symposium on Principles of Distributed Computing, page 287, 1997.
[2] A. Arora, M. Demirbas, and S. S. Kulkarni. Gray-box stabilization. Technical Report OSU-CISRC-101-TROl, The Ohio State University, Department of Computer and Information Science, 2001, ftp://ftp.cis.ohio-state.edu/pub/tech-report/.
[3] A. Arora, M. G. Gouda, and G. Varghese. Constraint satisfaction as a basis for designing nonmasking fault-tolerance. Journal of High Speed Networks, 5(3):293-306, 1996.
[4] A. Arora, S. S. Kulkarni, and M. Demirbas. Resettable vector clocks. Proceedings of the 19th ACM Symposium on Principles of Distributed Computing (PODC), pages 269-278, August 2000.
[5] K. M. Chandy and J. Misra. Parallel Program Design. Addison-Wesley Publishing Company, 1988.
[6] M. Demirbas. Resettable vector clocks: A case study in designing graybox fault-tolerance. Master’s thesis, Technical report OSU-CISRC-4/00-TR11, Ohio State University, February 2000.
[7] E. W. Dijkstra and C. S. Scholten. Predicate Calculus and Program Semantics. Springer-Verlag, 1990.
[8] S. Dolev. Self-Stabilization. MIT Press, 2000.
[9] M. Flatebo, A. K. Datta, and S. Ghosh. Readings in Distributed Computer System, chapter 2: Self-stabilization in distributed systems. IEEE Computer Society Press, 1994.
[10] M. G. Gouda. The triumph and tribulation of system stabilization. Invited Lecture, Proceedings of 9th International Workshop on Distributed Algorithms, Springer-Verlag, 972: 1-18, November 1995.
[11] T. Herman. Self-stabilization bibliography: Access guide. Chicago Journal of Theoretical Computer Science, Working Paper WP-I. initiated November 1996.
[12] S. Katz and K. Perry. Self-stabilizing extensions for message passing systems. Distributed Computing, 7: 17-26, 1993.
[13] L. Lamport. Time, clocks, and the ordering of events in a distributed system. Communications of the ACM, 21(7):558-565, July 1978.
[14] G. Ricart and A. Agrawala. An optimal algorithm for mutual exclusion in computer networks. Communications of the ACM, 24(1):9-17, 1991.
[15] J. Rushby. Calculating with requirements. Invited paper presented at 3rd IEEE International Symposium on Requirements Engineering, pages 144-146, January 1997.
[16] A. Singhai, S.-B. Lim, and S.R. Radia. The SunSCALR framework for internet servers. Proceedings of the 28th IEEE Symposium on Fault Tolerant Computing Systems (FTCS-28), pages 108-117, 1998.
[17] N. Suri, S. Ghosh, and T. Marlowe. A framework for dependability driven SW integration. IEEE DCS, pages 405-416, 1998.
[18] G. Varghese. Self-stabilization by local checking and correction. PhD thesis, MIT/LCS/TR-583, 1993.
[19] K. P. Vo, Y. M. Wang, P. E. Chung, and Y. Huang. Xept: A software instrumentation method for exception handling. Proc. Int. Symp. on Software Reliability Engineering (ISSRE), November 1997.
[20] Y.-M. Wang, W. Russell, A. Arora, J. Xu, and R. Jagannathan. Towards dependable home networking: An experience report. International Conference on Dependable Systems and Networks, 2000.

**Appendix AI: Proofs**

**Lemma 4:**
Given that \( A = (\bigcap i :: A_i) \) and \( C = (\bigcap i :: C_i) \),
\[
(\forall i :: [C_i \subseteq A_i]) \implies [C \subseteq A]
\]
**Proof:**
\[
(\forall i :: [C_i \subseteq A_i]) \implies (\bigcap i :: C_i) \subseteq (\bigcap i :: A_i) \implies [C \subseteq A]
\]
\(\blacksquare\)

**Lemma 5:**
Given that \( W = (\bigcap i :: W_i) \), \( W' = (\bigcap i :: W'_i) \), \( A = (\bigcap i :: A_i) \), and \( C = (\bigcap i :: C_i) \),
\[
((\forall i :: [C_i \subseteq A_i]) \land (\forall i :: [W'_i \subseteq W_i])) \implies [(C \cup W') \subseteq (A \cup W)]
\]
**Proof:**
\[
((\forall i :: [C_i \subseteq A_i]) \land (\forall i :: [W'_i \subseteq W_i])) \implies ([C \subseteq A] \land [W' \subseteq W]) \implies [(C \cup W') \subseteq (A \cup W)]
\]
\(\blacksquare\)

**Theorem 8 (TME-Spec):**
Every system that implements \( Lspec \) also implements \( TMESpec \).
\[
(\forall M :: [M \models Lspec] \implies [M \models TMESpec])
\]
**Proof:**
In order to prove Theorem 8, we identify an invariant, \( I \), for \( Lspec \):
\[
I = (\forall j, k : j \neq k : j.REQk = REQk \lor j.REQk \neq REQk)
\]
We prove Theorem 8 based on this invariant. For reasons of space, we relegate the proof to [2].
\(\blacksquare\)

**Lemma 9 (Interference freedom):**
\( Lspec \cup W \) implements \( Lspec \).
\[
[(Lspec \cup W) \models Lspec_{init}] \implies \text{true}
\]
**Proof:**
\[
\implies \{ (h.j \implies REQj = REQ:) \text{ in } W, PV, Request Spec \} \implies \{ \text{Proposition 0} \} \implies [W \models Request Spec_{init}]
\]
\[
[(Lspec \cup W) \models (Lspec \cup RequestSpec)_{init}] \implies [(Lspec \cup W) \models Lspec_{init}]
\]
\[
\implies \{ Request Spec \subseteq Lspec \} \implies \text{true}
\]
\(\blacksquare\)

**Lemma 10:**
\( Lspec \cup W \) is stabilizing to \( Lspec \).
**Proof:**
\[
\implies \{ Request Spec, W, Reply Spec, Release Spec, Timestamp Spec, channels flushed, Communication Spec, stable(1) \text{ in } (Lspec \cup W) \} \implies \text{true}
\]
\[
[(Lspec \cup W) \models I] \land [(Lspec \cup W) \models Lspec_{init}] \implies \text{true}
\]
\[
\implies \{ \text{From proof of Theorem 8, } W \text{ does not depend on history information, definition of stabilization} \} \implies (Lspec \cup W) \text{ is stabilizing to } Lspec
\]
\(\blacksquare\)

**Theorem 12:**
RA-ME everywhere-eventually implements \( Lspec \).
\[
[ RA-ME \models C' Lspec ]
\]
**Proof:**
- **Structural Spec:** At any time, state.j denotes exactly one of h.j, e.j, or t.j.
- **Flow Spec:** h.j, e.j, t.j are modified only by Request CS, Grant CS, or Release CS.
- **CS Spec:** Client assumption.
- **Timestamp Spec:** RA-ME uses logical clocks.
- **Communication Spec:** RA-ME assumes FIFO channels.
- **Request Spec:** follows from Request CS action and that REQj is not changed until t.j holds.
- **Reply Spec:** receive-request for “REQk” and Release CS action and correction of deferredset.j by the last action.
- **CS Entry Spec:** Grant CS action.
- **CS Release Spec:** Release CS action.
\(\blacksquare\)

**Theorem 13:**
Lamport-ME everywhere-eventually implements \( Lspec \).
\[
[ Lamport-ME \models C' Lspec ]
\]
**Proof:**
The proof is the same as that in Theorem 12, except that for the proof of CS Entry Spec, we use the correction of request-queue.j and grant.j.k by the last action of Lamport-ME.
\(\blacksquare\)

**Appendix A2: Symbols and Operators**

- **Abstract system, specification**: Used as
- **Concrete system**: Used as
- **Wrapper**: Used as
- **Box operator (cf. §2.1)**: \(\Box\)
- **Unless (cf. §3.1)**: \(\unless\)
- **Stable(p) = p unless false**: \(\stable(p)\)
- **Leads to (cf. §3.1)**: \(\leadsto\)
- **Leads to always (cf. §3.1)**: \(\leadsto^*\)
- **Propositional connectives (in decreasing precedence)**:
  - Negation: \(\neg\)
  - Conjunction, Disjunction: \(\land, \lor\)
  - Implication, Follows from: \(\implies, \impliedby\)
  - Equivalence, Inequivalence: \(\equiv, \not\equiv\)
- **First order quantifiers**:
  - Universal (for all): \(\forall\)
  - Existential (there exists): \(\exists\)

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 03:58:03 UTC from IEEE Xplore. Restrictions apply.**