### HSTS and Certificate Requirements

HSTS (HTTP Strict Transport Security) does not impose additional restrictions on the set of acceptable certificates beyond what the user agent (e.g., a web browser) would normally enforce. In other words, HSTS simply requires that any valid TLS connection uses a trusted certificate. It is not designed to defend against insecure HTTPS connections due to rogue certificates (as discussed in Section II-C), but rather to ensure that HTTPS is used at all.

### HSTS Headers

The primary method for a server to enable HSTS is by setting the `Strict-Transport-Security` HTTP header. Compliant user agents will apply an HSTS policy to a domain after observing this header over an HTTPS connection with no errors. Setting the header over plain HTTP has no effect, although some sites do so (see Section IV-E).

In addition to the optional `includeSubDomains` directive, an HSTS header must include a `max-age` directive, which specifies how long (in seconds) the user agent should cache the HSTS policy. This value represents a commitment by the site to support HTTPS for at least that duration into the future. The commitment can be "broken" by serving an HSTS header with `max-age=0`, but this directive must be served over HTTPS.

For regularly visited HSTS domains (at least once per `max-age` period), the policy will be continually updated, preventing HTTP traffic indefinitely. This can be described as a continuity policy. A known limitation of HSTS is that it cannot protect initial connections or connections after extended inactivity or if the browser's HSTS state is flushed. HSTS policies may also be restricted by browser privacy concerns; for example, policies learned during "private browsing" sessions should be discarded because they contain a record of visited domains.

HSTS is also vulnerable to an attacker who can manipulate the browser's notion of time, causing it to think a policy has expired, for example, by manipulating the NTP protocol [22].

### HSTS Preloads

To address the vulnerability of HTTPS stripping before the user agent has visited a domain and observed an HSTS header, Chrome and Firefox both ship with a hard-coded list of domains that receive a preloaded HSTS policy. This approach reduces security for preloaded domains to maintaining an authentic, up-to-date browser installation.

Preloaded domains automatically receive an HSTS policy from the browser and may optionally specify `includeSubDomains`. There is no per-domain `max-age` specification; however, in Chrome's implementation, the entire preload list has an expiration date if the browser is not regularly updated.

### HTTPS Everywhere

The EFF’s HTTPS Everywhere browser extension (available for Chrome and Firefox) provides similar protection for a much larger list (currently over 5,000 domains). It has been available since 2011. The HTTPS Everywhere extension relies on a large group of volunteers to curate a preload list in a distributed manner. Because it is an optional (though popular) browser extension, HTTPS Everywhere is willing to tolerate occasional over-blocking errors in return for increased coverage compared to the more conservative preload lists. Since HTTPS Everywhere is crowd-sourced, errors are due to the developers and not site operators themselves. Therefore, we do not study it in this work.

### Key Pinning

While HSTS is useful for forcing traffic to use HTTPS, it has no effect against an attacker who can fraudulently obtain a signed certificate for a victim's domain (often called a rogue certificate) and use this certificate in a man-in-the-middle attack. Because every trusted root in the browser can sign for any domain, an attacker will succeed if they obtain a rogue certificate signed by any trusted root (of which there are hundreds [23]–[25]). This vulnerability has long been known, and security researchers have obtained several rogue certificates by exploiting social engineering and other flaws in the certificate authority's process for validating domain ownership [3].

In 2010, it was reported publicly for the first time that commercial software was available for sale to government agencies to utilize rogue certificates to intercept traffic en masse [6]. This raised concerns about governments using compelled certificates obtained by legal procedures or extralegal pressure to perform network eavesdropping attacks. Additionally, high-profile CA compromises have been detected since 2011 [26], including security breaches at Comodo and DigiNotar (which has since been removed as a trusted CA from all browsers) and improperly issued subordinate root certificates from TrustWave and TÜrkTrust. These issues collectively demonstrate that simply requiring HTTPS via HSTS is not sufficient given the risk of rogue certificates.

### Pinning Security Model

Key pinning specifies a limited set of public keys that a domain can use in establishing a TLS connection. Specifically, a key pinning policy will specify a list of hashes (typically SHA-1 or SHA-256) covering the complete Subject Public Key Info field of an X.509 certificate. To satisfy a pinning policy, a TLS connection must use a certificate chain where at least one key appearing in the chain matches at least one entry in the pin set. This enables site operators to pin their server's end-entity public key, the key of the server's preferred root CA, or the key of any intermediate CA. Pinning makes obtaining rogue certificates much more difficult, as the rogue certificate must also match the pinning policy, which should greatly reduce the number of CAs that can issue a usable rogue certificate.

The browsers' default policy can be viewed as "pinning" all domains with the set of all trusted root certificate authorities' keys. Explicit pinning policies further reduce this set for specific domains. Like HSTS, pinning policies apply at the domain level, but an optional `includeSubDomains` directive extends this protection to all subdomains.

The risk of misconfigured pinning policies is far greater than accidentally setting HSTS. HSTS can be undone as long as the site operator can present any acceptable certificate, whereas if a site declares a pinning policy and then cannot obtain a usable certificate chain satisfying the pins (for example, if it loses the associated private key to a pinned end-entity key), the domain will effectively be "bricked" until the policy expires. For this reason, pinning policies often require a site to specify at least two pins to mitigate this risk.

### Pinning Preloads

Chrome has deployed preloaded pinning policies since 2011, although only a handful of non-Google domains currently participate. Firefox shipped preloaded pinning in 2014 with policies for a subset of Chrome's pinned domains plus several Mozilla domains. Like with preloaded HSTS, preloaded pinning policies have no individual expiration date, but the entire set expires if the browser is not frequently updated. No other browsers have publicly announced plans to implement preloaded pinning.

### Pinning Headers (HPKP)

A draft RFC specifies HTTP Public Key Pinning (HPKP) by which sites may declare pinning policies via the `Public-Key-Pins` HTTP header [7]. The syntax is very similar to HSTS, with an optional `includeSubDomains` directive and a mandatory `max-age` directive. Pinning policies will only be accepted when declared via a valid TLS connection that satisfies the declared policy.

Unlike HSTS, the HPKP standard adds an additional `Public-Key-Pins-Report-Only` header. When this policy is declared, instead of failing if pins aren't satisfied, the user agent will send a report to a designated address. This is designed as a step towards adoption for domains unsure if they will cause clients to lose access. Additionally, the standard recommends that user agents limit policies to 60 days of duration from the time they are declared, even if a longer `max-age` is specified, as a hedge against attackers attempting to brick a domain by declaring a pinning policy that the genuine owner can't satisfy.

Currently, no browsers support HPKP, and the standard remains a draft. Chrome and Firefox have both announced plans to support the standard when it is finalized.

### Measurement Setup

To study how HSTS and pinning are deployed in practice, we used an automated web measurement platform. Our goal was to simulate real browsing as accurately as possible while collecting as much data as possible. We used a version of the Firefox browser modified only for automation and data capture. Our approach combined static analysis of downloaded page content with dynamic analysis of all connections made by the browser on behalf of rendered page content.

#### OpenWPM

We utilized OpenWPM as the backbone for our testing. OpenWPM is an open-source web-crawling and measurement utility designed to provide a high level of reproducibility [8]. OpenWPM is built on top of the well-known Selenium Automated Browser [27], which abstracts away details such as error handling and recovery.

#### Static Resources

Selenium provides an interface for inspecting the parsed DOM after pages have completed loading. We used this interface to extract all tags of interest to check for potential mixed content errors that were not triggered by our browsing.

#### Dynamic Resources

Neither Selenium nor OpenWPM contains an API to instrument the browser as it executes scripts and loads resources on behalf of the page. We utilized the Firefox add-on system to build a custom Firefox extension to instrument and record all resource calls as the page was loaded. Our extension implements the `nsIContentPolicy` interface in the Firefox extension API, which is called prior to any resource being loaded. This interface allows extensions to enforce arbitrary content-loading restrictions. In our case, we allowed all resource loads but recorded the target URL, the page origin URL, and the context in which the request was made, for example, if it was the result of an image being loaded or an XMLHttpRequest (Ajax).

### Sites Tested

We conducted three main crawls in our study:

1. **Depth-One Crawl**: We performed a depth-one crawl of every domain listed in Chrome and Firefox's preloaded HSTS/pinning lists. We tried fetching both the exact domain and the standard `www` subdomain. Some domains were not accessible, as discussed in Section IV. We did not attempt to find alternate pages for domains without an accessible home page. Manual inspection suggested that all domains that failed to resolve were either content-delivery networks without a home page by design or domains that have ceased operation.

2. **Expanded Crawl of Pinned Sites**: We expanded the crawl for sites with a preloaded pinning policy. For Twitter, Dropbox, Facebook, and Google domains, we performed this crawl while "logged in," using valid session cookies for a real account. The other pinned domains did not implement a login system.

3. **Header-Only Crawl**: We performed an HTTP and HTTPS header-only crawl of the exact domain and `www` subdomain of all sites in the Alexa top million [9] list to test for the presence of HSTS or HPKP. We used ZMap [28], a tool designed for efficient probing of a large number of hosts. For the domains attempting to set HSTS or HPKP headers, we also ran our full OpenWPM crawl to extract cookies and test for various additional issues.

### Current Deployment

In this section, we provide an overview of the current deployment of HSTS and pinning using crawling and inspection of the preload lists used by Chrome and Firefox. Our statistics are based on observations from November 2014.

#### Preload Implementations

Chrome's preload list is stored in a single JSON file containing both pinning and HSTS policies. There is also a supporting file specifying named keys referenced in pinning policies. Some keys are specified as complete certificates (although only the keys are relevant for pinning), and others are specified as SHA-1 hashes of keys.

Until 2014, the criteria for inclusion in Chrome's list were not formally documented, and inclusion required email communication with an individual engineer responsible for maintaining the list [29], [30]. In mid-2014, Google rolled out an automated web form for requesting inclusion into Chrome's preload list. In addition to submitting this form, domains must redirect from HTTP to HTTPS and set an HSTS header with `includeSubDomains`, a `max-age` value of at least 10,886,400 (one year), and a special `preload` directive.

This automated process has led to a significant increase in the number of preloaded entries, as seen in Figure 1. However, the new requirements have not been retroactively enforced on old entries, and new sites can be added at the discretion of Google without meeting these requirements (e.g., Facebook and Yahoo! were recently added but do not set `includeSubDomains`). Additionally, while requests for inclusion can now be submitted automatically, they are still manually reviewed and take months to be included in a shipping version of the browser. There is still no automated method for submitting preloaded pinsets.

During our crawl, we observed 456 entries on the preload list that present the `preload` token, accounting for 1.0% of the list. Since this token was only recently introduced, this number indicates both the effect of Google's automated entry and the growth of the HSTS list. We also observed 127 additional sites setting the `preload` token in our top million crawl that are not yet in the preloaded list. Several of these sites (32.3%) are presenting invalid headers and were most likely rejected by Google for inclusion in the list; however, the remaining sites do set valid HSTS headers and must be awaiting manual confirmation.

Mozilla's implementation uses two separate files for preloaded HSTS and pinning policies. The preloaded HSTS file is compiled as C code. Currently, the list is a strict subset of Chrome's list, based on those domains in Chrome's list that also set an HSTS header with a `max-age` of at least 18 weeks [31]. The `includeSubDomains` parameter must be set.