### 5.2 Symbolic Equivalence

The only rule that can be applied results in the following pairs:
- \( \Gamma_1 \vdash C_1 \)
- \( \Gamma_2 \vdash C_2 \)

These pairs are obtained from \( \Gamma_1 \) (resp. \( \Gamma_2 \)) by adding the non-deducibility constraints:
- \( \Gamma_1' \vdash C_1' \)
- \( \Gamma_2' \vdash C_2' \)

where \( \Gamma_1' \) and \( \Gamma_2' \) include the non-deducibility constraints:
- \( \Gamma_1' = \Gamma_1, \neg \text{ded}(M_1, N_1) \)
- \( \Gamma_2' = \Gamma_2, \neg \text{ded}(M_2, N_2) \)

Note that no transformation rule is applicable to these pairs. It is straightforward to see that symbolic equivalence holds for the first pair. Additionally, symbolic equivalence also holds for the second pair, considering the non-deducibility constraints. However, we do not want to solve these non-deducibility constraints. Instead, we apply DEST internally, resulting in one leaf of the form:
\[ \left( \Gamma_1', C_1' \right) \]
\[ \left( \Gamma_2', C_2' \right) \]

On the leaves, we check that for each column in one matrix, there exists a corresponding column in the other matrix where the constraint systems have the same status (i.e., either both are deducible or both are not). In this case, the test will fail on our unique leaf, allowing us to conclude that the two original sets \( \Gamma_1 \vdash C_1 \) and \( \Gamma_2 \vdash C_2 \) are not in symbolic equivalence.

### 5.3 Strategy

Blindly applying transformation rules does not always terminate (see [11] for an example). To avoid non-terminating behaviors, we fix one of the constraint systems, reduce it until reaching a "pre-solved form" (distinct variables in the right-hand sides of the deducibility constraints), and then move to the next system. Solving the second system preserves the property of the first. This allows us to reach constraint systems in "pre-solved" form.

However, this is not sufficient: due to disequations, deciding the equivalence of such sets (or matrices) of constraint systems can be challenging (see Example 8). Therefore, we further apply some transformation rules to simplify the disequalities. For this second phase, we use the rules CONS, AXIOM, and EQ-RIGHT-RIGHT. The application of CONS is restricted to specific situations as described in Example 12.

Consider a constraint system in "pre-solved" form:
\[ \Gamma \vdash C \]
For simplicity, we do not describe \( \Gamma \) and \( C \) in detail. We assume the frame contains the terms \( M \) and \( N \). First, we apply AXIOM on \( \Gamma \vdash C \) (with \( M \)). On one branch, we obtain \( \Gamma \vdash C' \). Applying CONS twice, we get \( \Gamma \vdash C'' \). Finally, applying AXIOM on \( \Gamma \vdash C'' \) (with \( N \)), we return to the original set of disequations.

Our strategy is:
\[ \text{CONS} \circ \text{EQ-RIGHT-RIGHT} \circ \text{AXIOM} \]
where the exclamation mark means "as long as possible." This avoids the non-terminating behavior described in Example 12. We claim that irreducible constraints contain only disequations \( M \neq N \) where \( M \) does not contain names or universally quantified variables, and the transformations are terminating.

The termination argument is as follows: EQ-RIGHT-RIGHT externalizes disjunctions, splitting disjunctive constraints into different matrices. CONS decreases the heights of names and universally quantified variables. Although AXIOM may increase these measures, the replacement substitutes a variable with support \( M \) with terms that only contain variables whose support is strictly smaller than \( M \). These rules maintain the deducibility constraints in pre-solved form.

### 5.4 Correctness

The transformation rules yield a finite tree labeled with pairs of matrices of constraint systems. As briefly explained in Example 11, our test on the leaves checks that for each column in one matrix, there exists a corresponding column in the other matrix where each constraint system has the same status. We say that \( \Gamma_1 \vdash C_1 \equiv \Gamma_2 \vdash C_2 \) when this syntactic test holds on the leaf. Otherwise, we say \( \Gamma_1 \vdash C_1 \not\equiv \Gamma_2 \vdash C_2 \).

**Proposition 2.** Let \( (\Gamma_1, \Gamma_2) \) be a pair of sets of constraint systems obtained by applying our transformation rules on sets of initial constraint systems, and consider a binary tree obtained by following the strategy described in Section 5.3.

- **Soundness:** If all leaves of a tree are labeled with \( (\Gamma_1, \Gamma_2) \) such that \( \Gamma_1 \vdash C_1 \equiv \Gamma_2 \vdash C_2 \), then \( \Gamma_1 \equiv \Gamma_2 \).
- **Completeness:** If \( \Gamma_1 \equiv \Gamma_2 \), then all leaves of a tree are labeled with \( (\Gamma_1, \Gamma_2) \) such that \( \Gamma_1 \vdash C_1 \equiv \Gamma_2 \vdash C_2 \).

The proof involves analyzing the structure of the leaves and showing that our notion of equivalence is preserved through the application of our transformation rules. For any transformation rule, if the two pairs of sets of constraint systems labeling the sons of a node are respectively in symbolic equivalence, then the same property holds for the father.

### 6. Conclusion

An OCaml implementation of an early version of the procedure described in this paper has been completed. This procedure extends [13] to sets of constraints, including disequalities. Checking symbolic equivalence between sets of constraint systems is quite efficient. However, the interleaving step, required for moving from symbolic equivalence to trace equivalence, is performed naively and is computationally expensive. We tested this implementation on the private authentication protocol and the two versions of the e-passport protocol. Our implementation concludes within a few minutes for the private authentication protocol and the flawed version of the e-passport protocol (considering 2 sessions only). For the fixed version of the e-passport, it took around 2 days.

To achieve an efficient procedure, it is necessary to optimize the search space and reduce the number of interleavings. This problem is not specific to trace equivalence and has been studied in the context of trace properties (e.g., [22]). Discarding some "symbolic" interleavings is challenging for equivalence-based properties. Finally, we aim to extend the method to other cryptographic primitives, such as blind signatures and zero-knowledge proofs.

### 7. References

[1] M. Abadi and V. Cortier. Deciding knowledge in security protocols under equational theories. Theoretical Computer Science, 387(1-2):2–32, 2006.
[2] M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In Proc. 28th Symposium on Principles of Programming Languages (POPL’01), pages 104–115. ACM Press, 2001.
[3] M. Abadi and C. Fournet. Private authentication. Theoretical Computer Science, 322(3):427–476, 2004.
[4] M. Abadi and A. Gordon. A calculus for cryptographic protocols: The spi calculus. In Proc. 4th Conference on Computer and Communications Security (CCS’97), pages 36–47. ACM Press, 1997.
[5] M. Arapinis, T. Chothia, E. Ritter, and M. Ryan. Analysing unlinkability and anonymity using the applied pi calculus. In Proc. of 23rd IEEE Computer Security Foundations Symposium (CSF’10), pages 107–121. IEEE Computer Society Press, 2010.
[6] A. Armando et al. The AVISPA Tool for the automated validation of internet security protocols and applications. In Proc. 17th Int. Conference on Computer Aided Verification (CAV’05), volume 3576 of LNCS, pages 281–285. Springer, 2005.
[7] M. Baudet. Deciding security of protocols against off-line guessing attacks. In Proc. 12th Conference on Computer and Communications Security (CCS’05), pages 16–25. ACM Press, 2005.
[8] M. Baudet. Sécurité des protocoles cryptographiques : aspects logiques et calculatoires. Phd thesis, École Normale Supérieure de Cachan, France, 2007.
[9] B. Blanchet. An Efficient Cryptographic Protocol Verifier Based on Prolog Rules. In Proc. 14th Computer Security Foundations Workshop (CSFW’01), pages 82–96. IEEE Comp. Soc. Press, 2001.
[10] B. Blanchet, M. Abadi, and C. Fournet. Automated verification of selected equivalences for security protocols. Journal of Logic and Algebraic Programming, 75(1):3–51, 2008.
[11] V. Cheval, H. Comon-Lundh, and S. Delaune. Automating security analysis: symbolic equivalence of constraint systems. In Proc. 5th International Joint Conference on Automated Reasoning (IJCAR’10), volume 6173 of LNAI, pages 412–426. Springer-Verlag, 2010.
[12] Y. Chevalier and M. Rusinowitch. Decidability of symbolic equivalence of derivations. Journal of Automated Reasoning, 2011. To appear.
[13] H. Comon-Lundh and S. Delaune. The finite variant property: How to get rid of some algebraic properties. In Proc. 16th International Conference on Rewriting Techniques and Applications (RTA’05), LNCS, pages 294–307. Springer, 2005.
[14] V. Cortier and S. Delaune. A method for proving observational equivalence. In Proc. 22nd Computer Security Foundations Symposium (CSF’09), pages 266–276. IEEE Comp. Soc. Press, 2009.
[15] S. Delaune, S. Kremer, and M. D. Ryan. Symbolic bisimulation for the applied pi-calculus. In Proc. 27th Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS’07), pages 133–145, 2007.
[16] S. Delaune, S. Kremer, and M. D. Ryan. Verifying privacy-type properties of electronic voting protocols. Journal of Computer Security, 17(4):435–487, July 2009.
[17] D. Dolev and A. C. Yao. On the security of public key protocols. In Proc. 22nd Symposium on Foundations of Computer Science (FCS’81), pages 350–357. IEEE Computer Society Press, 1981.
[18] L. Durante, R. Sisto, and A. Valenzano. Automatic testing equivalence verification of spi calculus specifications. ACM Transactions on Software Engineering and Methodology, 12(2):222–284, 2003.
[19] N. Durgin, P. Lincoln, J. Mitchell, and A. Scedrov. Undecidability of bounded security protocols. In Workshop on Formal Methods and Security Protocols, 1999.
[20] H. Hüttel. Deciding framed bisimulation. In Proc. 4th Int. Workshop on Verification of Infinite State Systems (INFINITY’02), pages 1–20, 2002.
[21] J. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic protocol analysis. In Proc. 8th ACM Conference on Computer and Communications Security (CCS’01). ACM Press, 2001.
[22] S. Mödersheim, L. Viganò, and D. A. Basin. Constraint differentiation: Search-space reduction for the constraint-based analysis of security protocols. Journal of Computer Security, 18(4):575–618, 2010.
[23] R. Ramanujam and S. Suresh. Tagging makes secrecy decidable for unbounded nonces as well. In Proc. 23rd Conference on Foundations of Software Technology and Theoretical Computer Science (FSTTCS’03), 2003.
[24] M. Rusinowitch and M. Turuani. Protocol insecurity with finite number of sessions is NP-complete. In Proc. 14th Computer Security Foundations Workshop (CSFW’01), pages 174–190. IEEE Comp. Soc. Press, 2001.
[25] A. Tiu and J. E. Dawson. Automating open bisimulation checking for the spi calculus. In Proc. 23rd IEEE Computer Security Foundations Symposium (CSF’10), pages 307–321. IEEE Computer Society Press, 2010.