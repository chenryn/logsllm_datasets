# Securing MMOs: A Security Professional’s Perspective

## Who Is This Guy?
- **Security Industry Professional** with extensive experience in:
  - Developing subversive software
  - Creating static analysis tools for C and Java
- **Former Senior Software Engineer at BioWare Mythic**
- **Pwned other games**
- **Organized Defcon CTF & Quals for 4 years as part of Kenshoto**

## What This Talk Includes
- Insights on transitioning from security to the gaming industry
- Real-world examples of current security issues in MMOs
- Case studies of hacks and tools in the wild
- Strategies for improving security in the gaming industry
- Reasons why significant improvements may not be imminent

## What This Talk Doesn’t Include
- Zero-day exploits
- Release dates for upcoming games (e.g., Star Wars: The Old Republic)
- Crappy clip-art
- Shout-outs

## Making the Jump
- **Expectations**:
  - Transitioning from a world where crashes and vulnerabilities are critical to one where they are more commonplace.
  - Moving from environments with strict performance requirements to those with high user expectations and frequent updates.
  - Adapting from small, efficient codebases to large, complex ones.

- **High Performance**:
  - Handling up to 4000 simultaneous clients per "shard"
  - Maintaining latency under 100ms
  - Processing dozens of commands per user per second
  - Achieving a target server frame rate of 4Hz

- **Low Speed**:
  - Slower-paced development
  - Greater emphasis on formal education and training

## Challenges of Security in an MMO
- **The Rest of the World**:
  - Many servers have well-defined, community-reviewed specifications.
  - Some are restricted to trusted users or open-source, benefiting from peer review.

- **Games**:
  - Specifications evolve dynamically with feature changes.
  - Connections are often freely available.
  - Code is closely guarded, complicating security efforts.

- **Sophisticated Hacks**:
  - More advanced games attract more sophisticated hacking attempts.
  - Client-side security is inherently challenging but can be managed with effort.
  - It's an ongoing arms race between developers and hackers.

## Motivations of Cheats, Crashes & Exploits
- **Financial Gain**:
  - Real Money Trading (RMT)
  - In-game currency manipulation

- **Griefing**:
  - Harassing other players

- **Competitive Edge**:
  - Gaining an unfair advantage in the game

- **Recreational Challenge**:
  - Extending the game's lifetime by offering new challenges for recreational hackers

## Security in the Gaming Industry
- **Industry Awareness**:
  - Security is still a relatively new concept in the gaming industry.
  - While many have heard of terms like "buffer overflow," few know how to prevent them in practice.

- **Professionalism**:
  - Developers need to understand that knowledge of vulnerabilities does not equate to the ability to spot and fix them in their own code.
  - Acknowledging that writing secure code is a skill that needs continuous improvement.

## Hack Types and Techniques
- **Blind Scripting (a.k.a. Macro'ing)**:
  - Easy to detect when the bot fails.

- **Screen Scraping & Scripting (AutoIt)**:
  - Harder to detect but less reliable, especially with complex screens.

- **Memory Analysis & Modification**:
  - Sophisticated but easier to detect.

- **Logic Flaws**:
  - Item duplication
  - Race and state conditions

- **Classic Exploitation**:
  - Buffer overflows
  - Numeric overflows

- **Packet Injection / Sniffing**:
  - Useful for spotting events, but can be mitigated with encryption.

- **Account Theft**:
  - Phishing
  - Keyloggers

## Bioware’s MMO Portfolio
- **Ultima Online**: 12 years old
- **Dark Age of Camelot**: 9 years old
- **Warhammer Online**: 3 years old
- **Star Wars: The Old Republic**: Released after Duke Nukem Forever

## How Bad Is It?
- **Herald Web Site Hack**:
  - Used to host viruses
  - Defense-in-depth saved the day; forum boxes had no access to the back network.

- **Legitimate Command from the Client**:
  - Poor parameter validation led to server crashes.
  - Fortunately, it was a GM-only command.

- **Remote, Pre-Auth Vulnerabilities**:
  - `memcpy(dest, message->data, message->len);` with a fixed-size buffer.

- **Trial Accounts**:
  - Majority of trial accounts belonged to spammers and gold sellers.
  - 10% of trial accounts created in a 3-month period were attributed to a single IP in China.
  - These accounts were used for advertising gold-selling services.

- **Account Emptied by Gold Sellers**:
  - Accounts logged into once, months before being compromised by Chinese IPs.
  - Assets were liquidated and transferred in large amounts.
  - No brute force attempts, suggesting keylogging.

- **EVE Online Senior Producer “Oveur”**:
  - Does not trust the client.
  - CCP hired security professionals to address this issue.

## In the Wild
- **AutoEVE**:
  - Direct Python injection using CCP’s APIs.
  - Allows the application to be minimized.
  - CCP is hiring security professionals to catch such tools.

- **UO Made Easy**:
  - Simple UO scripting tool.
  - Uses `GetProcAddress` to mask imports of `Read/WriteProcessMemory`.
  - XORs the string name of imports but stores results in globals, making hooking and observation simple.

- **"Undetectable" Tool**:
  - Claimed to be undetectable but registered as a debugger.
  - Engineers monitored its development and banned users, while the developer continued unscathed.

## Mitigation
- **Detection**:
  - Memory checksums
  - Timing
  - Anti-debugging measures
  - Cheat detection should notify developers rather than stopping the cheat.

- **Agility and Rapid Response**:
  - Effective PR management
  - Quick patch turn-around

- **Rootkit Development**:
  - Warden, a highly effective tool for catching known cheats.

- **Gameplay Workarounds**:
  - Implementing radar for players.

- **Psychological Warfare**:
  - Targeting users of cheats/exploits rather than the developers.

## Ways to Improve
- **Automated Analysis**:
  - Tools like PREfast and other power-assist tools.

- **Basic Fuzzing and Internal Red-Teaming**:
  - Regular testing and internal security audits.

- **Education and Methods**:
  - Training in secure coding practices.
  - Developing comprehensive threat models.

- **Balancing Code Quality and Release Time**:
  - Recognizing that large-scale hacks can harm the game and alienate the community.

## Why It Won’t Get Better
- **Cost-Benefit Analysis**:
  - Reacting to exploits is often cheaper than proactive measures.
  - Customer service representatives restoring lost items/gold are less expensive than engineers sifting through code.
  - Measuring the true cost in reputation and lost players is difficult.

- **Public Perception**:
  - Banning cheaters can be good press.
  - Even if there are no cheaters, claiming so may not be believed.