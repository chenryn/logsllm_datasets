### Experiments
Program annotations can thwart several methods used to hide malware. Information Flow Control (IFC) hinders data exfiltration. Even with access to our source code, documentation, and an understanding of our system's limitations, the Red Teams found it challenging to conceal data-flow-based malware in applications annotated with flow sources and sinks.

### Generality of Our Analysis
Our information-flow-based approach demonstrated surprising versatility. Our toolset was capable of revealing both the malicious data flow of the payload and the injected triggers. For instance, we detected malware in applications that generated incorrect results based on specific times of day or random values. More importantly, we were able to easily extend our system as we discovered new properties we wanted IFC to handle—this was done during our own usage and between batches of malware analysis in the experiments.

### Threats to Validity
While our experiments showed promise, several threats to validity should be noted:

#### Characteristics of Malware
The malware we analyzed was created by five different teams, each consisting of multiple full-time engineers. These teams had previously surveyed real malware and created samples representative of both commercial malware and advanced persistent threats. However, we cannot guarantee that this malware is fully representative of all types of malware in the wild, either in terms of variety or quality. It is also possible that our tools became tuned to the specific type of malware created by these five Red Teams.

#### Skill of the Analysts
The effectiveness of a tool can vary depending on the user. It is possible that our team was particularly skilled or fortunate in effectively classifying all the apps they analyzed, or another team might have performed better. An analyst needs time to become proficient in IFC; we found that a few weeks are sufficient for an undergraduate working part-time, as confirmed by our experiments (Sect. 3.12). Training only needs to occur once, and our team’s unfamiliarity with the apps was a more significant impediment.

#### Collaborative App Verification Model
Our model assumes that application vendors are willing to annotate their source code. We believe this is true for high-assurance app stores, but our approach may not be applicable to ordinary app stores.

### Future Work
We plan to enhance flow policies in three ways while maintaining their simplicity and high-level nature:
1. **Refine Permissions**: Split permissions like `WRITE_CONTACTS` so that separate policies can be specified for email addresses, phone numbers, and notes fields.
2. **Indicate Entire Flow Paths**: The flow policy will not just specify endpoints but entire paths. For example, personal information can be sent to the Internet only if it has first passed through an encryption module.
3. **Conditional Information Flows**: The flow policy will specify conditional flows, such as allowing information flow from the microphone to the network only when the user presses the "transmit" button.

We also plan to implement a variant of record types, allowing different parts of a data structure or file to be given different information-flow types. This has already been successfully implemented for Android's intents, improving IFC's analysis of inter-process communication.

### Related Work

#### Information Flow
Information flow tracking has been studied for various languages and paradigms [14, 37, 25, 19]. These approaches are largely complementary to our work, as they are theoretical or do not use type systems to achieve static guarantees of information flow properties. Besides static verification, several approaches for enforcing information flow properties have been proposed, such as refactoring [41], dynamic analysis [28], or encoding as safety properties [44, 33].

Milanova and Huang [30] recently presented a system that combines information flow with reference immutability to improve precision, though it has not been applied in a security context. Engelhardt et al. [11] discuss handling intransitive information-flow policies, while IFC requires making transitive flows explicit. Sun et al. [43] discuss modular inference for information flow, and IFC provides flow-sensitive type refinement within method bodies.

In the domain of information flow tracking for Java programs, the closest related work is Jif (Java information flow) [32, 31, 39]. Jif uses an incompatible extension of the Java programming language and its own compiler to express and check information flow properties. In contrast, IFC uses standard Java annotations and the standard Java compiler, achieving its effects with a simpler, easier-to-use type system. While Jif focuses on the expressiveness and flexibility of the type system and trust model, IFC aims at practicality and scalability for large real-world Android applications. Jif has not been evaluated in an adversarial challenge exercise comparable to our experiments using IFC.

WebSSARI (Web application Security by Static Analysis and Runtime Inspection) [21] is another related approach but targets a different domain. WebSSARI focuses on web applications written in PHP and aims to prevent vulnerabilities such as Cross-Site Scripting or SQL Injection. In this context, static analysis is applied to reveal existing weaknesses and to insert runtime checks. In contrast, IFC statically verifies information flow properties for Android applications.

#### Android Studies
Many recent studies have focused on understanding the weaknesses of the Android platform and characterizing Android malware in the wild. This section discusses IFC in the context of those prior studies, as it also targets the Android platform.

Recent studies (e.g., [1, 12, 45]) have investigated the Android permission system and revealed that many Android applications are overprivileged, meaning they are granted more permissions than they use. These studies also provided a mapping of API calls to required permissions. IFC utilizes these existing mappings and enhances the Android permission system by adding finer-grained sources and sinks for sensitive APIs.

Chin et al. [5] described a weakness caused by the Android Intent mechanism: implicitly sent intents can be intercepted by malicious applications. IFC analyzes communication through intents to mitigate such attacks.

#### Malware Detection and Prevention
Ongtang et al. [35] suggest an application-centric security model to strengthen Android's security. The Google Play Store runs Bouncer to detect and reject malicious applications. Unfortunately, Bouncer can be circumvented [36, 23], which motivates our work.

Tools for detecting or preventing malicious behavior on smartphones employ static analysis for detection or dynamic analysis for both detection and prevention. Woodpecker [17] uses static analysis to detect capability leaks, and ComDroid [5] to locate Intent-related vulnerabilities. Several systems have been proposed to detect the leakage of personal data (e.g., [16, 27]). PiOS [9] is a system for detecting privacy leaks in iOS applications, which constructs a control flow graph from compiled code and performs data flow analysis. Unlike these existing approaches, IFC uses a finer-grained model for sources and sinks, operates on the source code, and is not limited to explicit information flow. RiskRanker [18] and DroidRanger [53] combine multiple analyses to detect likely malware.

Dynamic enforcement tools have been proposed in the literature that monitor the execution of an application at runtime and intervene if necessary to ensure safe behavior. TaintDroid [10] and DroidScope [49] use taint-tracking to monitor the flow of sensitive data, whereas AppFence [20] automatically replaces sensitive data with innocuous data. Both techniques require modification to the Android runtime framework, making the approach non-portable. As an alternative, Aurasium [48] uses inlined dynamic enforcement, which rewrites the target application to embed runtime checks. Although inlined dynamic enforcement improves portability, the performance and code size overhead may affect its suitability for resource-constrained mobile platforms.

### Conclusion
We have described IFC, a flow-sensitive, context-sensitive type system that enables collaborative verification of information flow properties in Android applications. Its design focuses on usability and practicality, and it supports a rich programming model.

We evaluated IFC by analyzing 72 new applications (57 of them malicious), which were written by five different corporate Red Teams who were not under our control. IFC detected 96% of the information-flow-related malware (we explain how to increase this number to 100%), and 82% of all malware. Other experiments show that IFC is easy to use for both programmers and auditors.

Our system is freely available, including source code, library API annotations, user manual, and example annotated applications.

### Acknowledgments
We thank Yoshi Kohno, David Wetherall, Dylan McNamee, David Naumann, John Singleton, David Brumley, Zach Tatlock, and Marcelo d’Amorim for helpful discussions.

This material is based on research sponsored by DARPA under agreement number FA8750-12-2-0107. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon.

### References
[1] AU, K. W. Y., ZHOU, Y. F., HUANG, Z., AND LIE, D. PScout: Analyzing the Android permission specification. In CCS (Oct. 2012), pp. 217–228.
[2] BANERJEE, A., NAUMANN, D. A., AND ROSENBERG, S. Expressive declassification policies and modular static enforcement. In IEEE Symposium on Security and Privacy (2008), pp. 339–353.
[3] BONNINGTON, C. First instance of iOS app store malware detected, removed, 2012. http://www.wired.com/gadgetlab/2012/07/first-ios-malware-found/.
[4] BROOKS, JR., F. P. The Mythical Man-Month: Essays on Software Engineering. Addison-Wesley, Boston, MA, USA, 1975.
[5] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D. Analyzing inter-application communication in Android. In MobiSys (June 2011), pp. 239–252.
[6] CHONG, S., VIKRAM, K., AND MYERS, A. C. SIF: Enforcing confidentiality and integrity in web applications. In USENIX Security (Aug. 2007).
[7] DENNING, D. E. A lattice model of secure information flow. CACM 19, 5 (May 1976), 236–243.
[8] DIETL, W., DIETZEL, S., ERNST, M. D., MU ¸SLU, K., AND SCHILLER, T. Building and using pluggable type-checkers. In ICSE (May 2011), pp. 681–690.
[9] EGELE, M., KRUEGEL, C., KIRDAZ, E., AND VIGNA, G. PiOS: Detecting privacy leaks in iOS applications. In NDSS (Feb. 2011).
[10] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. N. TaintDroid: an information-flow tracking system for realtime privacy monitoring on smartphones. In OSDI (Oct. 2010).
[11] ENGELHARDT, K., VAN DER MEYDEN, R., AND ZHANG, C. Intransitive noninterference in nondeterministic systems. In ACM Conference on Computer and Communications Security (2012), pp. 869–880.
[12] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER, D. Android permissions demystified. In CCS (Oct. 2011), pp. 627–638.
[13] FELT, A. P., FINIFTER, M., CHIN, E., HANNA, S., AND WAGNER, D. A survey of mobile malware in the wild. In SPSM (Oct. 2011), pp. 3–14.
[14] FERRARI, E., SAMARATI, P., BERTINO, E., AND JAJODIA, S. Providing flexibility in information flow control for object-oriented systems. In IEEE Security and Privacy (May 1997), pp. 130–140.
[15] FORESMAN, C. Proof-of-concept app exploiting iOS security flaw gets researcher in trouble with Apple, 2012. http://arstechnica.com/apple/2011/11/safari-charlie-discovers-security-flaw-in-ios-gets-booted-from-dev-program/.
[16] GIBLER, C., CRUSSELL, J., ERICKSON, J., AND CHEN, H. AndroidLeaks: Automatically detecting potential privacy leaks in Android applications on a large scale. In TRUST (June 2012), pp. 291–307.
[17] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic detection of capability leaks in stock Android smartphones. In NDSS (Feb. 2012).
[18] GRACE, M., ZHOU, Y., ZHANG, Q., ZOU, S., AND JIANG, X. RiskRanker: Scalable and accurate zero-day Android malware detection. In MobiSys (June 2012), pp. 281–294.
[19] HAMMER, C., KRINKE, J., AND SNELTING, G. Information flow control for java based on path conditions in dependence graphs. In ISSSE (Mar. 2006), pp. 87–96.
[20] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND WETHERALL, D. These aren’t the droids you’re looking for: Retrofitting Android to protect data from imperious applications. In CCS (Oct. 2011), pp. 639–652.
[21] HUANG, Y.-W., YU, F., HANG, C., TSAI, C.-H., LEE, D.-T., AND KUO, S.-Y. Securing web application code by static analysis and runtime protection. In WWW (May 2004), pp. 40–52.
[22] JONES, C. The Economics of Software Quality. Addison-Wesley, 2011.
[23] KASSNER, M. Google Play: Android’s Bouncer can be pwned. http://www.techrepublic.com/blog/it-security/-google-play-androids-bouncer-can-be-pwned/, 2012.
[24] KITCHING, C., AND MCVOY, L. BK2CVS problem. http://lkml.indiana.edu/hypermail/linux/kernel/0311.0/0635.html, 2003.
[25] LI, P., AND ZDANCEWIC, S. Encoding information flow in Haskell. In CSFW (July 2006), pp. 16–27.
[26] LIU, L., ZHANG, X., YAN, G., AND CHEN, S. Chrome extensions: Threat analysis and countermeasures. In NDSS (Feb. 2012).
[27] MANN, C., AND STAROSTIN, A. A framework for static detection of privacy leaks in Android applications. In SAC (Mar. 2012), pp. 1457–1462.
[28] MASRI, W., PODGURSKI, A., AND LEON, D. Detecting and debugging insecure information flows. In ISSRE (Nov. 2004), pp. 198–209.
[29] MCCONNELL, S. Software Estimation: Demystifying the Black Art. Microsoft Press, 2006.
[30] MILANOVA, A., AND HUANG, W. Composing polymorphic information flow systems with reference immutability. In FTfJP (July 2013), pp. 5:1–5:7.
[31] MYERS, A. C. JFlow: Practical mostly-static information flow control. In POPL (Jan. 1999), pp. 228–241.
[32] MYERS, A. C., ZHENG, L., ZDANCEWIC, S., CHONG, S., AND NYSTROM, N. Jif: Java + information flow. http://www.cs.cornell.edu/jif.
[33] NAUMANN, D. A. From coupling relations to mated invariants for checking information flow. In European Symposium on Research in Computer Security (ESORICS) (2006), vol. 4189 of LNCS, pp. 279–296.
[34] OCTEAU, D., MCDANIEL, P., JHA, S., BARTEL, A., BODDEN, E., KLEIN, J., AND LE TRAON, Y. Effective inter-component communication mapping in Android with Epicc: An essential step towards holistic security analysis. In USENIX Security (Aug. 2013), pp. 543–558.
[35] ONGTANG, M., MCLAUGHLIN, S., ENCK, W., AND MCDANIEL, P. Semantically rich application-centric security in Android. In ACSAC (Dec. 2009), pp. 340–349.
[36] PEROCO, N. J., AND SCHULTE, S. Adventures in BouncerLand. In Black Hat USA (July 2012).
[37] POTTIER, F., AND SIMONET, V. Information flow inference for ML. In POPL (Jan. 2002), pp. 319–330.
[38] RASHID, F. Android malware makes up this week’s dangerous