### Section IV-B

In Section IV-B, we discuss a potential issue where two functions with different names but identical code logic within the same project could introduce noise. Although this scenario is rare based on our observations, it is worth noting. Given the low probability of such data noise and the inherent robustness of Tree-LSTM to noisy data, we believe that our method is minimally affected.

Regarding computational overhead, ASTERIA is based on the Tree-LSTM network, which can be time-consuming for training, especially when dealing with large Abstract Syntax Trees (ASTs). Additionally, the offline encoding process is computationally intensive because LSTM cannot fully leverage GPU parallelism. As part of our future research, we plan to explore more efficient Natural Language Processing (NLP) techniques for AST encoding.

### Vulnerability Search and Analysis

We conducted a vulnerability search in our firmware dataset and analyzed the results. Our analysis revealed that all functions with a score of 1 were confirmed as vulnerable cases. Functions with high scores exhibited similar code patterns to the known vulnerable function. We hope this work will inspire further research into the connection between natural language and assembly or intermediate language for binary security analysis. It is important to note that vulnerability verification is a critical follow-up step after the initial search. In our study, we manually confirmed whether the functions were vulnerable but did not conduct exploitability analysis.

### VIII. Conclusion

In this paper, we introduced ASTERIA, a deep learning-based AST encoding scheme designed to measure the semantic equivalence of functions across different platforms. We utilized ASTs as the feature representation of functions and employed the Tree-LSTM network to encode these ASTs into semantic vectors. We then integrated two identical Tree-LSTM networks using the Siamese Network architecture to calculate the similarity between two AST encodings. A prototype of ASTERIA was implemented, and for model training, we created a large-scale cross-platform dataset containing 49,725 binary files by cross-compiling 260 open-source software projects. 

We compared ASTERIA against state-of-the-art methods, Gemini and Diaphora, and comprehensive evaluation results showed that ASTERIA outperformed both in terms of accuracy and efficiency. We also conducted a vulnerability search in an IoT firmware dataset and identified 75 vulnerable functions.

### IX. Acknowledgements

This work was partially supported by the Guangdong Province Key Area R&D Program of China (Grant No. 2019B010137004), the Key Program of the National Natural Science Foundation of China (Grant No. U1766215), the National Natural Science Foundation of China (Grant No. U1636120), and the Industrial Internet Innovation and Development Project (Grant No. TC190H3WU).

### References

[1] Buildroot making embedded Linux easy. https://buildroot.org. [Online; accessed 26-February-2020].

[2] CVE - Common Vulnerabilities and Exposures. https://cve.mitre.org/. [Accessed on 03/23/2021].

[3] Diaphora. https://github.com/joxeankoret/diaphora. [Accessed January 4, 2020].

[4] D-Link All Products. https://support.dlink.com/AllPro.aspx. [Online; Accessed May 19, 2020].

[5] Netgear Download. http://support.netgear.cn/download.asp. [Online; Accessed May 19, 2020].

[6] Schneider Support. https://www.schneider-electric.cn/zh/download. [Online; Accessed May 19, 2020].

[7] IDA Pro. https://www.hex-rays.com/products/ida/index.shtml. [Online; accessed 3-April-2020].

[8] Binwalk. https://www.refirmlabs.com/binwalk/, 2020. [Online; accessed 5-April-2020].

[9] CVE-2011-0762. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0762, 2020. [Online; accessed 5-April-2020].

[10] CVE-2013-1944. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1944, 2020. [Online; accessed 5-April-2020].

[11] CVE-2014-0195. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0195, 2020. [Online; accessed 5-April-2020].

[12] CVE-2014-4877. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-4877, 2020. [Online; accessed 5-April-2020].

[13] CVE-2016-2105. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2105, 2020. [Online; accessed 5-April-2020].

[14] CVE-2016-6303. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6303, 2020. [Online; accessed 5-April-2020].

[15] CVE-2016-8618. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8618, 2020. [Online; accessed 5-April-2020].

[16] OpenSSL. https://www.openssl.org/source/old/1.1.0/, 2020. [Online; accessed 5-April-2020].

[17] PyTorch. https://pytorch.org/, 2020. [Online; accessed 5-April-2020].

[18] Andrew Ayers, Richard Schooler, and Robert Gottlieb. Aggressive inlining. ACM SIGPLAN Notices, 32(5):134–145, 1997.

[19] Hamid Abdul Basit and Stan Jarzabek. Detecting higher-level similarity patterns in programs. SIGSOFT Softw. Eng. Notes, 30(5):156–165, September 2005.

[20] Ira D. Baxter, Andrew Yahin, Leonardo Moura, Marcelo Sant’Anna, and Lorraine Bier. Clone detection using abstract syntax trees. In Proceedings. International Conference on Software Maintenance (Cat. No. 98CB36272), pages 368–377. IEEE, 1998.

[21] Jose E. Cabrero and Ian M. Holland. System and method for providing shared global offset table for common shared library in a computer system, July 10, 2001. US Patent 6,260,075.

[22] Mahinthan Chandramohan, Yinxing Xue, Zhengzi Xu, Yang Liu, Chia Yuan Cho, and Hee Beng Kuan Tan. Bingo: Cross-architecture cross-OS binary search. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 678–689. ACM, 2016.

[23] Daming D. Chen, Maverick Woo, David Brumley, and Manuel Egele. Towards automated dynamic analysis for Linux-based embedded firmware. 2016.

[24] Sumit Chopra, Raia Hadsell, and Yann LeCun. Learning a similarity metric discriminatively, with application to face verification. In 2005 IEEE Computer Society Conference on Computer Vision and Pattern Recognition (CVPR'05), volume 1, pages 539–546. IEEE, 2005.

[25] Cristina Cifuentes and K. John Gough. Decompilation of binary programs. Software: Practice and Experience, 25(7):811–829, 1995.

[26] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide Balzarotti. A large-scale analysis of the security of embedded firmwares. In 23rd USENIX Security Symposium (USENIX Security 14), pages 95–110, 2014.

[27] Ang Cui, Michael Costello, and Salvatore Stolfo. When firmware modifications attack: A case study of embedded exploitation. 2013.

[28] Yaniv David, Nimrod Partush, and Eran Yahav. Firmup: Precise static detection of common vulnerabilities in firmware. ACM SIGPLAN Notices, 53(2):392–404, 2018.

[29] Yaniv David and Eran Yahav. Tracelet-based code search in executables. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '14, pages 349–360, New York, NY, USA, 2014. ACM.

[30] Scott Deerwester, Susan T. Dumais, George W. Furnas, Thomas K. Landauer, and Richard Harshman. Indexing by latent semantic analysis. Journal of the American Society for Information Science, 41(6):391–407, 1990.

[31] Najim Dehak, Reda Dehak, James R. Glass, Douglas A. Reynolds, Patrick Kenny, et al. Cosine similarity scoring without score normalization techniques. In Odyssey, page 15, 2010.

[32] Vijay D’Silva, Mathias Payer, and Dawn Song. The correctness-security gap in compiler optimization. In 2015 IEEE Security and Privacy Workshops, pages 73–87. IEEE, 2015.

[33] Thomas Dullien and Rolf Rolles. Graph-based comparison of executable objects (English version). SSTIC, 5(1):3, 2005.

[34] Manuel Egele, Maverick Woo, Peter Chapman, and David Brumley. Blanket execution: Dynamic similarity testing for program binaries and components. In 23rd USENIX Security Symposium (USENIX Security 14), pages 303–317, San Diego, CA, 2014. USENIX Association.

[35] Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla. discovre: Efficient cross-architecture identification of bugs in binary code. In NDSS, 2016.

[36] Qian Feng, Minghua Wang, Mu Zhang, Rundong Zhou, Andrew Henderson, and Heng Yin. Extracting conditional formulas for cross-platform bug search. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security, pages 346–359, 2017.

[37] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng Yin. Scalable graph-based bug search for firmware images. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 480–491. ACM, 2016.

[38] Debin Gao, Michael K. Reiter, and Dawn Song. Binhunt: Automatically finding semantic differences in binary programs. In International Conference on Information and Communications Security, pages 238–255. Springer, 2008.

[39] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry, Yanick Fratantonio, Davide Balzarotti, Aurelien Francillon, Yung Ryn Choe, Christopher Kruegel, et al. Toward the analysis of embedded firmware through automated re-hosting. Pages 135–150, 2019.

[40] John L. Hennessy and David A. Patterson. Computer Architecture: A Quantitative Approach. Elsevier, 2011.

[41] G. Hernandez, F. Fowze, D. J. Tang, T. Yavuz, P. Traynor, and K. R. B. Butler. Toward automated firmware analysis in the IoT era. IEEE Security & Privacy, 17(5):38–46, 2019.

[42] Sepp Hochreiter and Jürgen Schmidhuber. Long short-term memory. Neural Computation, 9(8):1735–1780.

[43] Roger A. Horn. The Hadamard product. In Proc. Symp. Appl. Math, volume 40, pages 87–169, 1990.

[44] Xin Hu, Tzi-cker Chiueh, and Kang G. Shin. Large-scale malware indexing using function-call graphs. In Proceedings of the 16th ACM conference on Computer and communications security, pages 611–620, 2009.

[45] Xin Hu, Kang G. Shin, Sandeep Bhatkar, and Kent Griffin. MutantX-S: Scalable malware clustering based on static features. Presented as part of the 2013 USENIX Annual Technical Conference (USENIX ATC 13), pages 187–198, 2013.

[46] Joel Jones. Abstract syntax tree implementation idioms. In Proceedings of the 10th conference on pattern languages of programs (PLOP2003), page 26, 2003.

[47] Wei Ming Khoo, Alan Mycroft, and Ross Anderson. Rendezvous: A search engine for binary code. In Proceedings of the 10th Working Conference on Mining Software Repositories, pages 329–338. IEEE Press, 2013.

[48] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu. Semantics-based obfuscation-resilient binary code similarity comparison with applications to software plagiarism detection. In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, pages 389–400, 2014.

[49] Jiang Ming, Meng Pan, and Debin Gao. iBinHunt: Binary hunting with inter-procedural control flow. In International Conference on Information Security and Cryptology, pages 92–109. Springer, 2012.

[50] Jannik Pewny, Behrad Garmany, Robert Gawlik, Christian Rossow, and Thorsten Holz. Cross-architecture bug search in binary executables. In 2015 IEEE Symposium on Security and Privacy, pages 709–724. IEEE, 2015.

[51] Edward Raff, Jon Barker, Jared Sylvester, Robert Brandon, Bryan Catanzaro, and Charles K. Nicholas. Malware detection by eating a whole EXE. In Workshops at the Thirty-Second AAAI Conference on Artificial Intelligence, 2018.

[52] Frank Ruskey and T.C. Hu. Generating binary trees lexicographically. SIAM Journal on Computing, 6(4):745–758, 1977.

[53] Andreas Sæbjørnsen, Jeremiah Willcock, Thomas Panas, Daniel Quinlan, and Zhendong Su. Detecting code clones in binary executables. In Proceedings of the Eighteenth International Symposium on Software Testing and Analysis, ISSTA '09, pages 117–128, New York, NY, USA, 2009. ACM.

[54] Andrew Schulman. Finding binary clones with opstrings function digests: Part III. Dr. Dobb's Journal, 30(9):64, 2005.

[55] Yusuke Shido, Yasuaki Kobayashi, Akihiro Yamamoto, Atsushi Miyamoto, and Tadayuki Matsumura. Automatic source code summarization with extended tree-LSTM. In 2019 International Joint Conference on Neural Networks (IJCNN), pages 1–8. IEEE, 2019.

[56] Kai Sheng Tai, Richard Socher, and Christopher D. Manning. Improved semantic representations from tree-structured long short-term memory networks. arXiv preprint arXiv:1503.00075, 2015.

[57] Zheng Wang, Ken Pierce, and Scott McFarling. BMAT—a binary matching tool for stale profile propagation. The Journal of Instruction-Level Parallelism, 2:1–20, 2000.

[58] J. Wurm, K. Hoang, O. Arias, A. Sadeghi, and Y. Jin. Security analysis on consumer and industrial IoT devices. In 2016 21st Asia and South Pacific Design Automation Conference (ASP-DAC), pages 519–524, 2016.

[59] Xiaojun Xu, Chang Liu, Qian Feng, Heng Yin, Le Song, and Dawn Song. Neural network-based graph embedding for cross-platform binary code similarity detection. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, pages 363–376. ACM, 2017.

[60] Yinxing Xue, Zhengzi Xu, Mahinthan Chandramohan, and Yang Liu. Accurate and scalable cross-architecture cross-OS binary code search with emulation. IEEE Transactions on Software Engineering, 45(11):1125–1149, 2018.

[61] Fabian Yamaguchi, Felix Lindner, and Konrad Rieck. Vulnerability extrapolation: Assisted discovery of vulnerabilities using machine learning. In Proceedings of the 5th USENIX conference on Offensive technologies, pages 13–13, 2011.

[62] Fabian Yamaguchi, Markus Lottmann, and Konrad Rieck. Generalized vulnerability extrapolation using abstract syntax trees. In Proceedings of the 28th Annual Computer Security Applications Conference, pages 359–368, 2012.

[63] Wenpeng Yin, Katharina Kann, Mo Yu, and Hinrich Schütze. Comparative study of CNN and RNN for natural language processing. arXiv preprint arXiv:1702.01923, 2017.

[64] William J. Youden. Index for rating diagnostic tests. Cancer, 3(1):32–35, 1950.

[65] Jonas Zaddach, Luca Bruno, Aurélien Francillon, Davide Balzarotti, et al. Avatar: A framework to support dynamic security analysis of embedded systems' firmwares. In NDSS, pages 1–16, 2014.

[66] Peng Zhao and José Nelson Amaral. To inline or not to inline? Enhanced inlining decisions. In International Workshop on Languages and Compilers for Parallel Computing, pages 405–419. Springer, 2003.

[67] Mark H. Zweig and Gregory Campbell. Receiver-operating characteristic (ROC) plots: a fundamental evaluation tool in clinical medicine. Clinical Chemistry, 39(4):561–577, 1993.