### Optimized Text

#### 1. Introduction
Intrusion Detection Systems (IDS) and Intrusion Prevention Systems (IPS) are essential for protecting critical networks across the Internet. These systems often rely on a database of known malicious signatures, which is rapidly growing in both size and complexity. This growth places additional performance requirements on the rule-matching engine, which must check each signature against incoming packets. Existing approaches to signature evaluation use statically defined optimizations that do not adapt to the specific network or signature characteristics. We argue that IDS and IPS systems should be workload-aware, adapting to the set of input signatures and network traffic characteristics for higher performance.

To demonstrate this idea, we have developed an adaptive algorithm that profiles attack signatures and network traffic to generate a high-performance, memory-efficient packet inspection strategy. Our implementation, built over Snort, consists of two components: a profiler that analyzes input rules and observed network traffic to produce a packet inspection strategy, and an evaluation engine that preprocesses rules according to the strategy and evaluates incoming packets to determine the applicable signatures.

#### 2. Performance Evaluation
We conducted extensive evaluations of our workload-aware Snort implementation using publicly available datasets and live traffic from a border router at a large university network. The results show that our workload-aware implementation outperforms Snort by up to 1.6x in the number of packets processed per second for all Snort rules and by 2.7x for web-based rules, with a reduction in memory requirements. Comparisons with Bro show that our workload-aware implementation outperforms Bro by more than six times in most cases.

#### 3. Background and Related Work
New critical software vulnerabilities are a common occurrence. Symantec documented 1,896 new software vulnerabilities from July 1, 2005, to December 31, 2005, over 40% more than in 2004 [1]. Of these, 97% were considered moderately or highly severe, and 79% were considered easy to exploit. To address this rapid increase in vulnerabilities, organizations around the world are turning to IDSs and IPSs to detect and prevent attacks against networked devices.

The core component of popular IDSs, like Snort [2], is a deep packet inspection engine that checks incoming packets against a database of known signatures (also called rules). The performance of this signature-matching system is critical to the scalability of IDS and IPS systems, including packet per second rate. The dominant factor in determining the performance of this signature matching engine, whether implemented in software or hardware, is the number and complexity of the signatures that must be tested against incoming packets. However, both the number and complexity of rules appear to be increasing. For example, the recent Windows Meta-File (WMF) exploit [3] required inspecting and decoding more than 300 bytes into the HTTP payload, which could quickly overwhelm the CPU of the IDS or IPS, causing massive packet drops [4].

#### 4. Secondary Path Processing
We have described the Secondary Path, an alternate packet-capture channel for supplementing the analysis performed by a network intrusion detection system. The Secondary Path supports analyzers oriented towards analyzing individual, isolated packets, rather than stateful, connection-oriented analysis. The power of the Secondary Path depends critically on the richness of packet capture that we can use it to express. To this end, we presented enhancements to the standard BPF packet-capture framework [16] to support random sampling and retention of state between packets, similar in spirit to xPF [12].

Our implementation within the Bro intrusion detection system exhibits good performance, with a rule-of-thumb being that the Secondary Path does not significantly impair Bro’s overall performance provided that we keep the volume of traffic captured with it below 1% of the total traffic stream.

#### 5. Backdoor Detection
Another example of analysis enabled by the Secondary Path is our implementation of previous work on using packet filters to efficiently detect backdoors [26]. That work defines a backdoor as an application not running on its standard, well-known port, and proposes two different mechanisms to detect these. The first mechanism looks for indications of interactive traffic by analyzing the timing characteristics of small (less than 20 bytes of payload) packets. The second mechanism extracts signatures of particular protocols (SSH, FTP, Gnutella, etc.) and looks for instances of these on ports other than the protocol’s usual one.

We implemented both approaches in Bro using our Secondary Path mechanism, which is quite simple and provides an operational capability of considerable value for integrating into Bro’s mainstream analysis.

#### 6. Conclusions
We have described the Secondary Path, an alternate packet-capture channel for supplementing the analysis performed by a network intrusion detection system. The Secondary Path supports analyzers oriented towards analyzing individual, isolated packets, rather than stateful, connection-oriented analysis. The power of the Secondary Path depends critically on the richness of packet capture that we can use it to express. To this end, we presented enhancements to the standard BPF packet-capture framework [16] to support random sampling and retention of state between packets, similar in spirit to xPF [12].

Our implementation within the Bro intrusion detection system exhibits good performance, with a rule-of-thumb being that the Secondary Path does not significantly impair Bro’s overall performance provided that we keep the volume of traffic captured with it below 1% of the total traffic stream. We illustrated the additional power that Secondary Path processing provides with three examples: disambiguating the size of large TCP connections, finding dominant traffic elements (“heavy hitters”), and integrating into Bro previous work on detecting backdoors [26]. While none of these by itself constitutes a “killer application,” the variety of types of analysis they aid in addressing bodes well for the additional flexibility that we gain using Secondary Path processing.

#### 7. Acknowledgments
This work was made possible by the U.S. National Science Foundation grant STI-0334088, for which we are grateful.

#### 8. References
[1] B. H. Bloom. Space/time trade-offs in hash coding with allowable errors. Communications of the ACM, 13(7):422–426, 1970.
[2] J.L. Carter and M.N Wegman. Universal classes of hash functions. In Journal of Computer and Systems Sciences, volume 18, Apr 1979.
[3] S. Crosby and D. Wallach. Denial of service via algorithmic complexity attacks. In Proceedings of the 12th USENIX Security Symposium, pages 29–44, Aug 2003.
[4] H. Dreger, A. Feldmann, M. Mai, V. Paxson, and R. Sommer. Dynamic application-layer protocol analysis for network intrusion detection. Technical report, in submission, 2006.
[5] H. Dreger, A. Feldmann, V. Paxson, and R. Sommer. Operational experiences with high-volume network intrusion detection. In Proceedings of CCS, 2004.
[6] N. Duffield, C. Lund, and M. Thorup. Properties and prediction of flow statistics from sampled packet streams. In Proceedings of the 2nd ACM SIGCOMM Workshop on Internet Measurement, pages 159–171. ACM Press, 2002.
[7] N. Duffield, C. Lund, and M. Thorup. Estimating flow distributions from sampled flow statistics. In Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, pages 325–336. ACM Press, 2003.
[8] C. Estan, S. Savage, and G. Varghese. Automatically inferring patterns of resource consumption in network traffic. In Proceedings of the 2003 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, pages 137–148. ACM Press, 2003.
[9] C. Estan and G. Varghese. New directions in traffic measurement and accounting. In Proceedings of the 2002 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, pages 323–336. ACM Press, 2002.
[10] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter, P. Leach, and T. Berners-Lee. RFC 2616: Hypertext transfer protocol – HTTP/1.1, June 1999. Status: INFORMATIONAL.
[11] J.M. Gonzalez. Efficient Filtering Support for High-Speed Network Intrusion Detection. PhD thesis, University of California, Berkeley, 2005.
[12] S. Ioannidis, K. Anagnostakis, J. Ioannidis, and A. Keromytis. xpf: packet filtering for low-cost network monitoring. In Proceedings of the IEEE Workshop on High-Performance Switching and Routing (HPSR), pages 121–126, 2002.
[13] T. Karagiannis, A. Broido, M. Faloutsos, and K.C. Claffy. Transport layer identification of P2P traffic. In IMC ’04: Proceedings of the 4th ACM SIGCOMM conference on Internet measurement, pages 121–134, 2004.
[14] C. Kreibich, A. Warfield, J. Crowcroft, S. Hand, and I. Pratt. Using packet symmetry to curtail malicious traffic. In Proceedings of the Fourth Workshop on Hot Topics in Networks (HotNets-IV) (to appear). ACM SIGCOMM, 2005.
[15] W. Lee, J.B.D. Cabrera, A. Thomas, N. Balwalli, S. Saluja, and Y. Zhang. Performance adaptation in real-time intrusion detection systems. In RAID, pages 252–273, 2002.
[16] S. McCanne and V. Jacobson. The BSD packet filter: A new architecture for user-level packet capture. In USENIX Winter, pages 259–270, 1993.
[17] S. K. Park and K. W. Miller. Random number generators: good ones are hard to find. Communications of the ACM, 31(10):1192–1201, 1988.
[18] V. Paxson. Bro: A system for detecting network intruders in real-time. Proceedings of the 7th USENIX Security Symposium, 1998.
[19] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks, Inc., Calgary, Alberta, Canada, 1998.
[20] R. Rivest. RFC 1321: The MD5 message-digest algorithm, April 1992. Status: INFORMATIONAL.
[21] M. Roesch. Snort: Lightweight intrusion detection for networks. In Proceedings of the 13th USENIX Conference on System Administration, pages 229–238. USENIX Association, 1999.
[22] B. Schneier. Applied Cryptography: Protocols, Algorithms, and Source Code in C. John Wiley & Sons, Inc., New York, NY, USA, 1995.
[23] C. Shannon, D. Moore, and K. C. Claffy. Beyond folklore: Observations on fragmented traffic. IEEE/ACM Transactions on Networking, 10(6):709–720, 2002.
[24] J. van der Merwe, R. Caceres, Y. Chu, and C. Sreenan. mmdump: a tool for monitoring internet multimedia traffic. In SIGCOMM Computer Communications Review, volume 30, pages 48–59, 2000.
[25] M. Yuhara, B. N. Bershad, C. Maeda, and J. E. B. Moss. Efficient packet demultiplexing for multiple endpoints and large messages. In USENIX Winter, pages 153–165, 1994.
[26] Y. Zhang and V. Paxson. Detecting backdoors. In Proceedings of the 9th USENIX Security Symposium, pages 157–170, August 2000.