### 4.3.3 Standard Usage

For our standard usage workload, we used the Boundless version of Pine intensively for one hour to read, reply to, forward, and manage e-mail folders. To test Pine’s ability to handle errors, we periodically sent ourselves an email that triggered the memory error discussed in Section 4.3.1. During this period, the Boundless version executed successfully through all errors, performing all requests flawlessly. We configured this version to generate a memory error log file, which recorded 129 out-of-bounds accesses. Of these, 91 modified the accessed memory location, while 38 did not. All 38 non-modifying accesses targeted locations previously stored in the hash table.

### 4.4 Mutt

Mutt is a customizable, text-based mail user agent widely used in the Unix system administration community [6]. It is descended from ELM [2] and supports features such as email threading and correct NFS mail spool locking. We used Mutt version 1.4, which, as described in [5] and discussed in Section 2, is vulnerable to an attack that exploits a memory error in the conversion from UTF-8 to UTF-7 string formats. We developed an attack that exploited this vulnerability, allowing a remote IMAP server to crash Mutt or potentially inject and execute arbitrary code.

#### 4.4.1 Security and Resilience

We configured our security and resilience workload to exploit the described vulnerability. The Standard version of Mutt exits with a segmentation fault before the user interface appears, and the Check version exits with a memory error. The Boundless version, however, generates an error message indicating that the mail folder does not exist, then continues to execute, allowing the user to process mail from other folders.

#### 4.4.2 Performance

Figure 4 presents the request processing times for the Standard and Boundless versions of Mutt, given in milliseconds. The Read request reads a selected empty message, and the Move request moves an empty message from one folder to another. Each request was performed at least twenty times, and the means and standard deviations of the request processing times are reported.

| Request | Standard (ms) | Boundless (ms) | Slowdown |
|---------|---------------|----------------|----------|
| Read    | 0.655 ± 4.3%  | 2.71 ± 2.3%    | 4.1      |
| Move    | 6.94 ± 6.2%   | 9.91 ± 5.9%    | 1.4      |

Because Mutt is an interactive program, its performance is acceptable as long as it feels responsive to users. These results indicate that the application of boundless computing to Mutt should not degrade its interactive feel. Our subjective experience confirms this: all pause times were imperceptible for both the Standard and Boundless versions.

#### 4.4.3 Standard Usage

For our standard usage workload, we used the Boundless version of Mutt intensively for half an hour to process email messages. We triggered the security vulnerability twice during this time. Mutt successfully executed through the resulting memory errors, correctly executing all of our requests. We could read, forward, and compose mail without issues even after encountering the memory error. The memory error log showed 38 out-of-bounds accesses, all of which were writes.

### 4.5 Midnight Commander

Midnight Commander is an open-source file management tool that allows users to browse files and archives, copy files between folders, and delete files [4]. It is vulnerable to a memory-error attack associated with accessing an uninitialized buffer when processing symbolic links in tgz archives [3]. We used Midnight Commander version 4.5.55 for our experiments.

#### 4.5.1 Security and Resilience

Our security and resilience workload includes a tgz archive designed to exploit this vulnerability. The Standard version terminates with a segmentation violation when the user attempts to open the problematic tgz archive, and the Check version terminates with an error message. The Boundless version, however, executes through the memory errors, correctly displaying the names of the two symbolic links in the archive and continuing to execute additional user commands. Users can continue to use Midnight Commander to browse, copy, or delete other files even after processing the problematic tgz archive.

#### 4.5.2 Performance

Figure 5 presents the request processing times for the Standard and Boundless versions of Midnight Commander, given in milliseconds. The Copy request copies a 31 MB directory structure, the Move request moves a directory of the same size, the MkDir request creates a new directory, and the Delete request deletes a 3.2 MB file. Each request was performed at least twenty times, and the means and standard deviations of the request processing times are reported.

| Request | Standard (ms) | Boundless (ms) | Slowdown |
|---------|---------------|----------------|----------|
| Copy    | 377 ± 0.71%   | 556 ± 1.54%    | 1.5      |
| Move    | 0.424 ± 1.69% | 0.30 ± 2.45%   | 1.4      |
| MkDir   | 1.40 ± 7.78%  | 0.69 ± 7.05%   | 2.0      |
| Delete  | 2.54 ± 11.26% | 2.94 ± 14.6%   | 1.2      |

These numbers indicate that the Boundless version is not dramatically slower than the Standard version. Because Midnight Commander is an interactive program, its performance is acceptable as long as it feels responsive to users. Our subjective experience confirms this: all pause times were imperceptible for both the Standard and Boundless versions.

#### 4.5.3 Standard Usage

For our standard usage workload, we used the Boundless version of Midnight Commander intensively for one hour. During this session, we copied, moved, browsed, and searched files, and created and deleted directories. We periodically triggered the memory error by entering the problematic tgz file. The Boundless version executed successfully through all memory errors, performing flawlessly for all requests. The error log showed 16,788 out-of-bounds accesses, of which 5,462 were reads to uninitialized locations. Midnight Commander is the only benchmark that contains reads to locations not previously written by a corresponding out-of-bounds write.

### 4.6 Apache

Apache HTTP server is the most widely used web server, with 64% of Internet websites using it [7]. The Apache 2.0.47 mod_alias implementation contains a vulnerability that, under certain circumstances, allows a remote attacker to trigger a memory error [1].

#### 4.6.1 Security and Resilience

Our security and resilience workload includes a request that exploits this vulnerability. The Apache server maintains a pool of child processes, each handling a connection. With Standard compilation, the child process terminates with a segmentation violation when presented with the attack. The Apache parent process then creates a new child process. The Check version processes legitimate requests without memory errors until it encounters the attack, at which point the child process terminates, and the parent creates a new child. The Boundless version, however, executes successfully through the attack, correctly processing subsequent requests.

#### 4.6.2 Performance

Figure 6 presents the request processing times for the Standard and Boundless versions of Apache, given in milliseconds. The Small request serves a 5 KB page, and the Large request serves an 830 KB file. Both requests were local, and each was performed at least twenty times. The means and standard deviations of the request processing times are reported.

| Request | Standard (ms) | Boundless (ms) | Slowdown |
|---------|---------------|----------------|----------|
| Small   | 44.4 ± 1.3%   | 46.8 ± 1.1%    | 1.05     |
| Large   | 48.7 ± 1.8%   | 50.2 ± 3.9%    | 1.03     |

These numbers indicate that the use of boundless memory blocks entails a negligible slowdown for both small and large requests.

#### 4.6.3 Standard Usage

For our standard usage workload, we used the Boundless version of Apache to serve the web site of our research project (www.flexc.csail.mit.edu). For one hour, we requested files from this web site, periodically presenting the server with requests that triggered the vulnerability. The Boundless version executed successfully through all attacks, continuing to service legitimate requests. During this session, we logged 347 out-of-bounds accesses, all of which retrieved values previously stored in the hash table.

In addition, we used the Boundless version for one week to serve all requests directed to our research project's web site. The site was in steady use, with approximately 400 daily requests from outside our institution and tens of thousands of local requests. We periodically presented the server with requests that triggered the vulnerability. The Boundless version executed successfully through all attacks, continuing to service legitimate requests. We observed no anomalous behavior and received no complaints from users.

### 4.7 Discussion

Our results show that boundless memory blocks enable programs to execute through memory-error-based attacks, successfully processing subsequent requests. Even under intensive workloads, the Boundless versions provided completely acceptable results. We chose the programs based on several factors: source code availability, popularity, known memory errors documented on vulnerability-tracking sites like Security Focus [11] and SecuriTeam [10], and our ability to reproduce the documented errors. In all tested programs, Boundless computing eliminated the negative consequences of errors, making the programs invulnerable to known security attacks and able to continue processing their normal workload. These results provide encouraging evidence that boundless memory blocks can significantly reduce out-of-bounds accesses as a source of security vulnerabilities and fatal programming errors.

One interesting finding is that although our programs generated out-of-bounds read accesses, only one program read uninitialized values not previously written by a corresponding out-of-bounds write. This suggests that developers are more likely to miscalculate a correct size for an accessed memory block or fail to include a required bounds check than to produce a program that incorrectly reads an uninitialized out-of-bounds memory location.