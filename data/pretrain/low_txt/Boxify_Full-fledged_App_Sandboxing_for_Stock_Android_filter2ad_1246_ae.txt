### USENIX Association
#### 24th USENIX Security Symposium

**Filesystem Access and Kernel API Vulnerabilities**

While processes in the system are highly restricted in their filesystem access (limited to world-readable/writable files), a malicious process can exploit the entire kernel API as an attack vector, potentially escalating its privileges through root or kernel exploits. In this context, Boxify does not offer enhanced security compared to existing approaches that assume the stock Android kernel is hardened against such exploits.

To address this issue, additional security layers could be implemented at the kernel level to further restrict untrusted processes. This is a common practice in other operating systems, such as modern Linux distributions, where Chromium, a primary user of isolated processes on Android, utilizes the seccomp-bpf facility to selectively disable syscalls for renderer processes. We anticipate that this facility will become available in future Android versions with newer kernels. Similarly, common program tracing facilities could be employed to more securely and efficiently interpose syscalls [31, 47, 52].

**Violation of the Least-Privilege Principle**

The Broker must hold the union set of all permissions required by the apps hosted by Boxify to successfully proxy calls to the Android API. Since it is challenging to predict a reasonable set of permissions beforehand, the Broker typically holds all available permissions. This contradicts the principle of least privilege and makes the Broker an attractive target for the encapsulated app to increase its permission set. An elegant solution would be a Broker that drops all unnecessary permissions, similar to the privilege separation pattern [48, 57] used by established Linux services like ssh, which drop privileges of sub-processes by setting their UIDs, capabilities, or transitioning them to seccomp mode. Unfortunately, Android does not yet provide a way to selectively drop permissions at runtime.

**Red Pill Scenario**

Although Boxify is designed to be invisible to the sandboxed app, it cannot prevent the untrusted app from gathering information about its execution environment, which may allow the app to deduce that it is sandboxed (e.g., by checking its runtime UID or permissions). A malicious app can use this knowledge to alter its behavior when sandboxed, hiding its true intentions or refusing to run in a sandboxed environment. Preventing this information leak is an ongoing challenge, and a determined attacker will likely find ways to bypass these measures. However, while this might lead to refused functionality, it cannot be used to escalate the app’s privileges.

### Conclusion

We have presented the first application virtualization solution for the stock Android OS. By leveraging isolated processes to restrict the privileges of untrusted apps and introducing a novel app virtualization environment, we combine the strong security guarantees of OS security extensions with the deployability of application-layer solutions. Our implementation, called Boxify, demonstrates the capability to enforce established security policies without incurring significant runtime performance overhead.

**Availability and Future Work**

We will make the Boxify source code freely available. Beyond the immediate privacy benefits for end-users (see §5.4), Boxify offers all the security advantages of traditional sandboxing techniques and is thus of independent interest for future Android security research. As future work, we are currently investigating different application domains of Boxify, such as application-layer-only taint-tracking for sandboxed apps [24], programmable security APIs in the spirit of ASM [37]/ASF [14] to facilitate the extensibility of Boxify, and Boxify-based malware analysis tools.

### References

[1] Android Developer Dashboard. https://developer.android.com/about/dashboards/. Last visited: 06/20/15.
[2] Android Developer’s Guide. http://developer.android.com/guide/index.html. Last visited: 02/19/15.
[3] Chromium: Linux Sandboxing. https://code.google.com/p/chromium/wiki/LinuxSandboxing. Last visited: 02/10/15.
[4] Cyanogenmod. http://www.cyanogenmod.org.
[5] Java SE Documentation: Security Specification. http://docs.oracle.com/javase/7/docs/technotes/guides/security/spec/security-specTOC.fm.html. Last visited: 02/10/15.
[6] OmniROM. http://omnirom.org. Last visited: 02/19/15.
[7] Redirecting Functions in Shared ELF Libraries. http://www.codeproject.com/Articles/70302/Redirecting-functions-in-shared-ELF-libraries.
[8] The Chromium Projects: OSX Sandboxing Design. http://dev.chromium.org/developers/design-documents/sandbox/osx-sandboxing-design. Last visited: 02/10/15.
[9] The Chromium Projects: Sandbox (Windows). http://www.chromium.org/developers/design-documents/sandbox. Last visited: 02/10/15.
[10] Wine: Run Windows Applications on Linux, BSD, Solaris, and Mac OS X. https://www.winehq.org. Last visited: 02/13/15.
[11] Zero-Permission Android Applications. https://www.leviathansecurity.com/blog/zero-permission-android-applications/. Last visited: 02/11/15.
[12] Zero-Permission Android Applications (Part 2). http://www.leviathansecurity.com/blog/zero-permission-android-applications-part-2/. Last visited: 02/11/15.
[13] Andrus, J., Dall, C., Hof, A. V., Laadan, O., and Nieh, J. Cells: A Virtual Mobile Smartphone Architecture. In Proc. 23rd ACM Symposium on Operating Systems Principles (SOSP’11) (2011), ACM.
[14] Backes, M., Bugiel, S., Gerling, S., and von Styp-Rekowsky, P. Android Security Framework: Extensible Multi-Layered Access Control on Android. In Proc. 30th Annual Computer Security Applications Conference (ACSAC’14) (2014), ACM.
[15] Backes, M., Gerling, S., Hammer, C., Maffei, M., and von Styp-Rekowsky, P. AppGuard - Enforcing User Requirements on Android Apps. In Proc. 19th International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS’13) (2013), Springer.
[16] Bugiel, S., Davi, L., Dmitrienko, A., Fischer, T., Sadeghi, A.-R., and Shastry, B. Towards Taming Privilege-Escalation Attacks on Android. In Proc. 19th Annual Network and Distributed System Security Symposium (NDSS’12) (2012), The Internet Society.
[17] Bugiel, S., Davi, L., Dmitrienko, A., Heuser, S., Sadeghi, A.-R., and Shastry, B. Practical and Lightweight Domain Isolation on Android. In Proc. 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM’11) (2011), ACM.
[18] Cai, L., and Chen, H. Touchlogger: Inferring Keystrokes on Touch Screen from Smartphone Motion. In Proc. 6th USENIX Conference on Hot Topics in Security (HotSec’11) (2011), USENIX Association.
[19] Chen, Q. A., Qian, Z., and Mao, Z. M. Peeking into Your App Without Actually Seeing It: UI State Inference and Novel Android Attacks. In Proc. 23rd USENIX Security Symposium (SEC’14) (2014), USENIX Association.
[20] Citrix. XenApp. http://www.citrix.com/products/xenapp/how-it-works/application-virtualization.html. Last visited: 02/13/15.
[21] Conti, M., Nguyen, V. T. N., and Crispo, B. CRePE: Context-Related Policy Enforcement for Android. In Proc. 13th International Conference on Information Security (ISC’10) (2010).
[22] Davis, B., and Chen, H. Retroskeleton: Retrofitting Android Apps. In Proc. 11th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys’13) (2013), ACM.
[23] Davis, B., Sanders, B., Khodaverdian, A., and Chen, H. I-ARM-Droid: A Rewriting Framework for In-App Reference Monitors for Android Applications. In Proc. Mobile Security Technologies 2012 (MoST’12) (2012), IEEE Computer Society.
[24] Enck, W., Gilbert, P., Chun, B.-G., Cox, L. P., Jung, J., McDaniel, P., and Sheth, A. N. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. In Proc. 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2010) (2010), pp. 393–407.
[25] Enck, W., Octeau, D., McDaniel, P., and Chaudhuri, S. A Study of Android Application Security. In Proc. 20th USENIX Security Symposium (SEC’11) (2011), USENIX Association.
[26] Enck, W., Ongtang, M., and McDaniel, P. On Lightweight Mobile Phone Application Certification. In Proc. 16th ACM Conference on Computer and Communication Security (CCS’09) (2009), ACM.
[27] Enck, W., Ongtang, M., and McDaniel, P. Understanding Android Security. IEEE Security and Privacy 7, 1 (2009), 50–57.
[28] Erlingsson, Ú. The Inlined Reference Monitor Approach to Security Policy Enforcement. PhD thesis, Cornell University, January 2004.
[29] Fahl, S., Harbach, M., Muders, T., Smith, M., Baumgärtner, L., and Freisleben, B. Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security. In Proc. 19th ACM Conference on Computer and Communication Security (CCS’12) (2012), ACM.
[30] Felt, A. P., Wang, H. J., Moshchuk, A., Hanna, S., and Chin, E. Permission Re-Delegation: Attacks and Defenses. In Proc. 20th USENIX Security Symposium (SEC’11) (2011), USENIX Association.
[31] Goldberg, I., Wagner, D., Thomas, R., and Brewer, E. A. A Secure Environment for Untrusted Helper Applications Confining the Wily Hacker. In Proc. 6th Conference on USENIX Security Symposium, Focusing on Applications of Cryptography (SSYM’96) (1996), USENIX Association.
[32] Grace, M., Zhou, W., Jiang, X., and Sadeghi, A.-R. Unsafe Exposure Analysis of Mobile In-App Advertisements. In Proc. 5th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WISEC’12) (2012), ACM.
[33] Grace, M. C., Zhou, Y., Wang, Z., and Jiang, X. Systematic Detection of Capability Leaks in Stock Android Smartphones. In Proc. 19th Annual Network and Distributed System Security Symposium (NDSS’12) (2012), The Internet Society.
[34] Guo, P. J., and Engler, D. CDE: Using System Call Interposition to Automatically Create Portable Software Packages. In Proc. 2011 USENIX Conference on USENIX Annual Technical Conference (USENIXATC’11) (2011), USENIX Association.
[35] Hackborn, D. Introducing Isolated Processes in JellyBean. Android Developer Group: https://groups.google.com/forum/?fromgroups=#!topic/android-developers/pk45eUFmKcM, 2012. Last visited: 02/19/15.
[36] Hao, H., Singh, V., and Du, W. On the Effectiveness of API-Level Access Control Using Bytecode Rewriting in Android. In Proc. 8th ACM Symposium on Information, Computer and Communication Security (ASIACCS’13) (2013), ACM.
[37] Heuser, S., Nadkarni, A., Enck, W., and Sadeghi, A.-R. ASM: A Programmable Interface for Extending Android Security. In Proc. 23rd USENIX Security Symposium (SEC’14) (2014), USENIX Association.
[38] Jeon, J., Micinski, K. K., Vaughan, J. A., Fogel, A., Reddy, N., Foster, J. S., and Millstein, T. Dr. Android and Mr. Hide: Fine-Grained Permissions in Android Applications. In Proc. 2nd ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM’12) (2012), ACM.
[39] Kaspersky Lab, and INTERPOL. Mobile Cyber-Threats. http://securelist.com/analysis/publications/66978/mobile-cyber-threats-a-joint-study-by-kaspersky-lab-and-interpol/, 2014. Last visited: 02/19/15.
[40] Lange, M., Liebergeld, S., Lackorzynski, A., Warg, A., and Peter, M. L4Android: A Generic Operating System Framework for Secure Smartphones. In Proc. 1st ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM’11) (2011), ACM.
[41] Microsoft. Application Virtualization (App-V). http://www.microsoft.com/en-us/windows/enterprise/products-and-technologies/mdop/app-v.aspx. Last visited: 02/13/15.
[42] Moulu, A. Android OEM’s Applications (In)Security and Backdoors Without Permission. http://www.quarkslab.com/dl/Android-OEM-applications-insecurity-and-backdoors-without-permission.pdf. Last visited: 02/19/15.
[43] Mulliner, C., Oberheide, J., Robertson, W., and Kirda, E. PatchDroid: Scalable Third-Party Security Patches for Android Devices. In Proc. 29th Annual Computer Security Applications Conference (ACSAC’13) (2013), ACM.
[44] Nauman, M., Khan, S., and Zhang, X. Apex: Extending Android Permission Model and Enforcement with User-Defined Runtime Constraints. In Proc. 5th ACM Symposium on Information, Computer and Communication Security (ASIACCS’10) (2010), ACM.
[45] Ongtang, M., McLaughlin, S. E., Enck, W., and McDaniel, P. Semantically Rich Application-Centric Security in Android. In Proc. 25th Annual Computer Security Applications Conference (ACSAC’09) (2009), ACM.
[46] Open Signal. Android Fragmentation Visualized (July 2013). http://opensignal.com/reports/fragmentation-2013/. Last visited: 02/06/2015.
[47] Provos, N. Improving Host Security with System Call Policies. In Proc. 12th Conference on USENIX Security Symposium - Volume 12 (SSYM’03) (2003), USENIX Association.
[48] Provos, N., Friedl, M., and Honeyman, P. Preventing Privilege Escalation. In Proc. 12th Conference on USENIX Security Symposium - Volume 12 (SSYM’03) (2003), USENIX Association.
[49] Rasthofer, S., Arzt, S., Lovat, E., and Bodden, E. DroidForce: Enforcing Complex, Data-Centric, System-Wide Policies in Android. In Proc. 9th International Conference on Availability, Reliability and Security (ARES’14) (2014), IEEE Computer Society.
[50] Rastogi, V., Chen, Y., and Jiang, X. DroidChameleon: Evaluating Android Anti-Malware Against Transformation Attacks. In Proc. 8th ACM Symposium on Information, Computer and Communication Security (ASIACCS’13) (2013), ACM.
[51] Russello, G., Conti, M., Crispo, B., and Fernandes, E. MOSES: Supporting Operation Modes on Smartphones. In Proc. 17th ACM Symposium on Access Control Models and Technologies (SACMAT’12) (2012), ACM.
[52] Russello, G., Jimenez, A. B., Naderi, H., and van der Mark, W. FireDroid: Hardening Security in Almost-Stock Android. In Proc. 29th Annual Computer Security Applications Conference (ACSAC’13) (2013), ACM.
[53] Samsung Electronics. White Paper: An Overview of Samsung KNOX. http://www.samsung.com/se/business-images/resource/2013/samsung-knox-an-overview/%7B3%7D/Samsung_KNOX_whitepaper-0-0-0.pdf, 2013. Last visited: 02/19/15.
[54] Smalley, S., and Craig, R. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In Proc. 20th Annual Network and Distributed System Security Symposium (NDSS’13) (2013), The Internet Society.
[55] von Styp-Rekowsky, P., Gerling, S., Backes, M., and Hammer, C. IDEA: Callee-Site Rewriting of Sealed System Libraries. In Proc. 5th International Symposium on Engineering Secure Software and Systems (ESSoS’13) (2013), Springer.
[56] Wang, X., Sun, K., and Jing, Y. W. J. DeepDroid: Dynamically Enforcing Enterprise Policy on Android Devices. In Proc. 22nd Annual Network and Distributed System Security Symposium (NDSS’15) (2015), The Internet Society.
[57] Watson, R. N. M., Anderson, J., Laurie, B., and Kennaway, K. Capsicum: Practical Capabilities for Unix. In Proc. 19th USENIX Security Symposium (SEC’10) (2010), USENIX Association.
[58] Wu, C., Zhou, Y., Patel, K., Liang, Z., and Jiang, X. Airbag: Boosting Smartphone Resistance to Malware Infection. In Proc. 21st Annual Network and Distributed System Security Symposium (NDSS’14) (2014), The Internet Society.
[59] Xu, R., Saïdi, H., and Anderson, R. Aurasium – Practical Policy Enforcement for Android Applications. In Proc. 21st USENIX Security Symposium (SEC’12) (2012), USENIX Association.
[60] Xu, Z., Bai, K., and Zhu, S. TapLogger: Inferring User Inputs on Smartphone Touchscreens Using On-Board Motion Sensors. In Proc. 5th ACM Conference on Security and Privacy in Wireless and Mobile Networks (WISEC’12) (2012), ACM.
[61] Yee, B., Sehr, D., Dardyk, G., Chen, J. B., Muth, R., Ormandy, T., Okasaka, S., Narula, N., and Fullagar, N. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In Proc. 30th IEEE Symposium on Security and Privacy (Oakland’09) (2009), IEEE Computer Society.
[62] Zhou, Y., and Jiang, X. Dissecting Android Malware: Characterization and Evolution. In Proc. 33rd IEEE Symposium on Security and Privacy (Oakland’12) (2012), IEEE Computer Society.
[63] Zhou, Y., Wang, Z., Zhou, W., and Jiang, X. Hey, You, Get Off of My Market: Detecting Malicious Apps in Official and Alternative Android Markets. In Proc. 19th Annual Network and Distributed System Security Symposium (NDSS’12) (2012), The Internet Society.
[64] Zhou, Y., Zhang, X., Jiang, X., and Freeh, V. Taming Information-Stealing Smartphone Applications (on Android). In Proc. 4th International Conference on Trust and Trustworthy Computing (TRUST’11) (2011), Springer.

---

This optimized version aims to improve the clarity, coherence, and professionalism of the original text.