### VI. IMPLICATIONS

The CriticalFault framework enables us to intelligently focus our analysis on faults that are more likely to be harmful, thereby avoiding potentially biased fault injection results. This can help in the design of future fault-tolerant systems. Specifically, the following observations can be made:

1. **Vulnerability Analysis and Derated Faults:**
   - Vulnerability analysis can identify derated faults, which are not faulty data or control cases but have a relatively short abort latency (as shown in Figures 7 and 10). This indicates that fault address values do not change computation values. Data-only SDCs (Silent Data Corruptions) in FFT and LU benchmarks have low SOC (Safe Operating Condition) rates (2% or lower) because these benchmarks are data-centric. Most divergence distances in FFT and LU are less than 100 instructions, which is surprising since both benchmarks are compute kernels.

2. **Faulty Address Cases:**
   - The behavior of faulty address cases across all benchmarks is very similar, and they are very likely to trigger aborts due to accessing invalid memory regions. Faults in higher bits are more likely to cause program corruptions.

3. **Injection Results and Fault Propagation:**
   - Injection results for faulty data cases resemble those of random fault injection. This is because faulty data cases propagate to other data computations, memory addresses, and/or control flow. We discuss this in Section VI.
   - A significant portion of the remaining faults (59%) in guided fault injection (GFI) campaigns are likely caused by instruction-level or application-level masking. These phenomena, while observed in previous studies [10], [3], are still not well understood. With CriticalFault, more complex error derating behaviors can be identified, leading to cross-layer reliability solutions.

4. **Y-Branch Effect:**
   - The Y-branch effect, where all control branches are derated, has a significant impact on mcf in our experiments. Being able to identify these branches can lead to more sophisticated analyzers with greater accuracy, reducing unnecessary overheads by safely ignoring these branches. Fault-tolerant solutions such as dual-modular checking and selective redundancy can benefit from this.

5. **Register Faults:**
   - Injections into registers used as memory addresses often lead to aborts. While this is not unexpected, it shows that these registers are highly intrusive and can potentially result in severe outcomes (e.g., aborts). CriticalFault provides an effective way to study how the portion of faulty address cases can be reduced using protection schemes, thus reducing computational requirements.

6. **Correlation and Approximation:**
   - Although fewer than 80% of the injections belong to the faulty data category, the results bear much resemblance. Faulty data injections can propagate and mutate into different categories: faulty control, faulty memory address, and data corruptions. This approximation can be used to reduce the computational effect of future fault injection experiments without much loss in fidelity.

### VII. CONCLUSIONS

Technology scaling is expected to worsen the soft error rate (SER) of future microprocessors, even affecting mainstream markets. This trend drives recent research efforts towards low-cost yet effective hardware-software cross-layer reliability methods. To evaluate the effectiveness of these methods, many researchers resort to statistical fault injection (SFI). However, the high error derating rate in SFI makes it difficult to rigorously test and validate newly proposed features. Thus, there is a need for a more rigorous evaluation framework.

In this paper, we observe that vulnerability analysis can identify derated faults, which are not faulty data or control cases but have a relatively short abort latency. We also found that the error derating rate can be high, and not all SDC results behave as expected. These findings suggest that CriticalFault can lead to a more rigorous evaluation of cross-layer reliability schemes, potentially improving the design of future fault-tolerant systems.

### REFERENCES

[1] S. Sahoo et al., "Using Likely Program Invariants to Detect Hardware Errors," in Proceedings of International Conference on Dependable Systems and Networks, 2008.

[2] P. Ramachandran et al., "Statistical Fault Injection," in Proceedings of International Conference on Dependable Systems and Networks, 2008.

[3] G. P. Saggese et al., "An Experimental Study of Soft Errors in Microprocessors," IEEE Micro, vol. 25, no. 6, 2005.

[4] M. Dimitrov and H. Zhou, "Unified Architectural Support for Soft-Error or Software Bug Detection," in Proceedings of International Conference on Parallel Architectures and Compilation Techniques, 2007.

[5] S. Feng, S. Gupta, A. Ansari, and S. A. Mahlke, "Shoestring: Probabilistic Soft Error Reliability on the Cheap," in ASPLOS, 2010, pp. 385-396.

[6] M. Li et al., "Understanding the Propagation of Hard Errors to Software and Implications for Resilient Systems Design," in Proceedings of International Symposium on High Performance Computer Architecture, 2007.

[7] P. Racunas et al., "Perturbation-based Fault Screening," in ASPLOS, 2008.

[8] N. Wang and S. Patel, "ReStore: Symptom-Based Soft Error Detection in Microprocessors," IEEE Transactions on Dependable and Secure Computing, vol. 3, no. 3, July-Sept 2006.

[9] J. Cook and C. Zilles, "A Characterization of Instruction-Level Error and Its Implications for Error Detection," in Dependable Systems and Networks With FTCS and DCC, 2008, DSN 2008, pp. 482-491.

[10] S. S. Mukherjee et al., "A Systematic Methodology to Compute the Architectural Vulnerability Factors for a High-Performance Microprocessor," in MICRO, 2003.

[11] Y. Sridharan and D. Kaeli, "Eliminating Microarchitectural Dependency from Architectural Vulnerability," in High Performance Computer Architecture, 2009, HPCA 2009, pp. 117-128.

[12] C. T. Weaver, J. Emer, S. S. Mukherjee, and S. K. Reinhardt, "Reducing the Soft-Error Rate of a High-Performance Microprocessor," IEEE Micro, vol. 24, no. 6, 2004.

[13] N. J. Wang, M. Fertig, and S. J. Patel, "Y-Branches: When You Come to a Fork in the Road, Take It," in IEEE PACT, 2003, pp. 56-67.

[14] H. Cha, E. Rudnick, and S. K. Reinhardt, "A Gate-Level Simulation Environment for Alpha-Particle-Induced Transient Faults," IEEE Transactions on Computers, vol. 45, no. 11, pp. 1248-1256, Nov. 1996.

[15] N. A. Kanawati, J. Patel, R. Iyer, and G. Choi, "Dependability Evaluation Using Hybrid Fault/Error Injection," in Proc. Int'l Symp. Compo Performance and Dependability, 1995.

[16] H.-S. Kim, A. K. Somani, and A. Tyagi, "A Reconfigurable Multi-Function Cache Architecture," in International Symposium on Field Programmable Gate Arrays, 2000.

[17] K. Reick, P. Sanda, S. Swaney, J. Kellington, M. Mack, M. Floyd, and D. Henderson, "Fault-Tolerant Design of the IBM Power6 Microprocessor," Micro, IEEE, vol. 28, no. 2, pp. 30-38, 2008.

[18] T. K. Tsai and R. K. Iyer, "Measuring Fault Tolerance with the FLAPE Tool," in Proceedings of the 8th International Conference on Modelling Techniques and Tools for Computer Performance Evaluation, 1995, pp. 26-40.

[19] N. Wang et al., "Characterizing the Effects of Transient Faults on a High-Performance Pipeline," in Proceedings of International Conference on Dependable Systems and Networks, 2004.

[20] N. J. Wang, A. Mahesri, and S. J. Patel, "Examining ACE Analysis Estimates of Reliability Using Fault Injection," in Proceedings of the 34th Annual International Symposium on Computer Architecture, 2007, pp. 460-469.

[21] A. Biswas, P. Racunas, S. Mukherjee, and S. K. Reinhardt, "Computing Accurate AVFs Using ACE Analysis Models: A Rebuttal," Computer Architecture Letters, vol. 7, no. 1, pp. 21-24, 2008.

[22] S. K. S. Hari, S. Y. Adve, H. Naeimi, and P. Ramachandran, "Relyzer: Exploiting Resiliency to Transient Faults through Application-Level Fault Equivalence," in ASPLOS, 2012, pp. 123-134.

[23] N. Neelakantam et al., "FeS2: A Full-System Execution-Driven Simulator for x86," Website, 2009, http://fes2.cs.uiuc.edu/.

[24] W. River, "Simics Full System Simulator," Website, 2011, http://www.simics.net.

[25] M. T. Yourst, "PTLSim: x86-64 Cycle-Accurate Processor Simulation Design Infrastructure," Website, 2009, http://www.ptlsim.org/.

[26] P. Ramachandran, "Detecting and Recovering from In-core Hardware Faults through Software Treatment," Ph.D. dissertation, University of Illinois, 2011.

[27] S. Borkar, "Designing Reliable Systems from Unreliable Components: The Challenges of Transistor Variability and Degradation," IEEE Micro, vol. 25, no. 6, pp. 10-16, 2005.

[28] X. Li and D. Yeung, "Application-Level Correctness and Its Impact on Fault Tolerance," in Proceedings of the 2007 IEEE 13th International Symposium on High Performance Computer Architecture, 2007, pp. 181-192.

[29] P. Montesinos, W. Liu, and J. Torrellas, "Using Register Lifetime to Protect Register Files Against Soft Errors," in Proceedings of the 37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, 2007, pp. 286-296.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 18, 2021, at 14:50:05 UTC from IEEE Xplore. Restrictions apply.