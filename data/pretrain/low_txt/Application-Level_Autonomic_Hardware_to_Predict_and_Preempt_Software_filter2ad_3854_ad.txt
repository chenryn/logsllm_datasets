### Verification and System Integration

**Verification with Frama-C**

The obligations checked in the default behavior section ensure that the set of behaviors are both disjoint and complete. Consequently, Frama-C provides confidence that our TECEP (Temporal Event-Condition-Action Protection) system correctly selects the production controller output under normal operating conditions and switches to the backup controller in the event of malicious production controller behaviors or anomalous plant sensor data.

**Deductive Verification Results**

Figure 7 illustrates the deductive verification results obtained using the Jessie plugin for Frama-C.

### Module Integration

The system was implemented using the Vivado Design Suite 2013.2 on a 64-bit Linux workstation with a 2.6.32-28-generic kernel, running on a 4-core, 2.8 GHz Intel Core i7 processor with 24 GB of RAM. The Vivado Design Suite project was used to create the junction box using HDL files and export it as an IP block. This IP block, along with the hardware monitor and interface adapter IP blocks generated by Vivado HLS, were imported into the IP catalog of a new Vivado Design Suite project.

A block diagram was created, featuring the Zynq processing system and a performance-optimized MicroBlaze soft processor with 16 KB of local memory. Three interface adapters (for the production controller’s input and output, and the emulated plant’s I/O) were added as AXI peripherals to the ARM. Two additional interface adapters (for the prediction unit’s output and handshaking signals) were added as AXI peripherals to the MicroBlaze. The hardware monitor was instantiated and connected to the junction box and the interface adapters. After implementation, a bitstream was exported to the Xilinx SDK, where all software was compiled and downloaded to the ARM and MicroBlaze processors.

### System Behavior

In this example, latent malicious behavior was inserted into the production controller. The system began with a unit step response, followed by the activation of the latent malware at \( t = 350 \) ms. The malware attempted to drive the plant’s output to its maximum (clipped) value. Without countermeasures, the plant’s output exceeded the safe limit of 3.2, as shown in Figure 8.

With the hardware monitor in place, the plant's output approached the acceptable limit at \( t = 480 \) ms before being corrected by the backup controller. When the prediction unit was active, the hardware monitor proactively invoked the backup controller at \( t = 280 \) ms, preventing the physical plant from reaching an unsafe state. The backup controller remained active until the system was reset. Figure 9 shows the plant’s output with and without prediction.

Figure 10 illustrates the plant’s output with prediction and automatic resumption of the production controller. The prediction unit forecasted the future consequences of the malware, and the hardware monitor preemptively switched to the backup controller at \( t = 280 \) ms. The hardware monitor’s probation counter expired, and the production controller was reinstated at \( t = 650 \) ms, as the physical plant, plant model, and predicted plant state were found to be within specifications 200 ms before this time. General mechanisms are being developed to manage transitions between controllers to avoid excessive overshoot caused by stale state information.

### Time and Resource Utilization

Despite the implementation of software functions in hardware, performance is not a primary objective in this work, as the system needs to operate only once per millisecond. The ARM processor operates at 667 MHz, while the MicroBlaze processor and the remaining hardware operate at 140 MHz. Both processors utilize full optimization and hardware floating-point instructions. One iteration of the prediction unit requires 1.43 microseconds to complete. Given the minimal runtimes of the production controller and hardware monitor, and all communication overheads, it is possible to predict over 500 cycles into the future during each 1 ms system cycle. The prediction window is currently limited by the MicroBlaze’s computational throughput. If a larger prediction window is required, more intensive optimization of the MicroBlaze or a faster platform speed grade may be necessary.

Table II summarizes the resource usage of the components and the overall system. The prediction unit’s MicroBlaze processor has a significant resource usage due to its configuration with a five-stage pipeline, hardware support for floating-point addition and multiplication, and an AXI timer peripheral for measuring code latency.

### Conclusions and Current Work

Existing approaches to control system security often add generic hardware or software layers to isolate and secure applications. In contrast, we use rigorous verification of application-specific hardware to counter software reconfiguration attacks on critical processes. This is achieved through the non-standard use of existing languages, tools, platforms, process specifications, and models. C is used for all application-specific software- and hardware-implemented functions in the system-on-chip platform, conforming with the C code automatically synthesized from model-based design tools or manually generated by control system designers. This enables the novel use of C code static analysis tools for functions implemented in hardware.

Frama-C, with its ACSL (ANSI/ISO C Specification Language), is well-suited for our needs due to its first-order logic expressive power for annotating partial functional specifications, support for floating-point arithmetic, and the use of multiple provers to check the validity of assertions. Although high-level synthesis (HLS) from C is a commercial technology, our additional use of formal specifications expressed in ACSL addresses the equally important matter of high-level verification of hardware functionality, further unifying hardware and software development. We use a three-level abstraction hierarchy: from ACSL (for specifying security-related system properties) to C (for capturing the system implementation without any hardware-level complications) to configurable logic (where hardware utilization can be controlled and reported by the Xilinx synthesis and implementation tools). The lack of aggressive timing goals promotes hardware generation without manual intervention.

We are currently applying TECEP to an electromechanical physical plant where non-ideal effects such as noise, disturbances, and actuator limitations are present. The Quanser ROTPEN-SE apparatus allows us to test our approach on increasingly complex systems, from simple rotary motion control to inherently stable gantry crane systems, and finally to inherently unstable inverted pendulum systems. Because the ZedBoard is not yet supported by Quanser, we created a custom SPI interface to the physical system and custom Simulink blocks to facilitate the automated implementation of our controllers. A Kalman filter will serve as a natural way to accurately estimate the controlled system’s state for short time horizons. We are also investigating TECEP’s ability to scale up to cyber-physical systems and its applicability to non-control domains.

### Acknowledgment

This work is supported by the National Science Foundation under Grant Number CNS-1222656. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. We are grateful for ZedBoard and tool donations from Xilinx, Inc.

### References

[1] M. Zeller, “Myth or reality – does the Aurora vulnerability pose a risk to my generator?” in *Protective Relay Engineers, 2011 64th Annual Conference for*. IEEE, 2011, pp. 130–136.
[2] N. Perlroth and D. E. Sanger, “Nations buying as hackers sell flaws in computer code,” *New York Times*, Jul 13, 2013.
[3] D. E. Sanger, “N.S.A. nominee promotes cyberwar units,” *New York Times*, March 11, 2014.
[4] W. Saﬁre, “The Farewell Dossier,” *New York Times*, Feb 2, 2004.
[5] J. Weiss, *Protecting industrial control systems from electronic threats*. Momentum Press, 2010.
[6] N. Falliere, L. O’Murchu, and E. Chien, “W32.stuxnet dossier,” Symantec Corporation, 2011.
[7] C. Schuett, J. Butts, and S. Dunlap, “An evaluation of modification attacks on programmable logic controllers,” *International Journal of Critical Infrastructure Protection*, vol. 7, no. 1, pp. 61 – 68, 2014.
[8] L. W. Lerner, M. M. Farag, and C. D. Patterson, “Runtime prediction and preemption of configuration attacks on embedded process controllers,” in *International Conference on Security of Internet of Things (SecurIT 2012)*, Kerala, India, Aug 2012.
[9] L. W. Lerner, Z. R. Franklin, W. T. Baumann, and C. D. Patterson, “Using high-level synthesis and formal analysis to predict and preempt attacks on industrial control systems,” in *ACM/SIGDA International Symposium on Field-Programmable Gate Arrays*, Monterey, CA, Feb 2014, pp. 209–212.
[10] A. A. C´ardenas, S. Amin, and S. Sastry, “Research challenges for the security of control systems,” in *Proceedings of the 3rd Conference on Hot Topics in Security*. Berkeley, CA, USA: USENIX Association, 2008, pp. 6:1–6:6. [Online]. Available: http://dl.acm.org/citation.cfm?id=1496671.1496677
[11] R. C. Dorf and R. H. Bishop, *Modern Control Systems*, 9th ed. Upper Saddle River, NJ, USA: Prentice-Hall, Inc., 2000.
[12] MathWorks, “Embedded Coder,” http://www.mathworks.com/products/embedded-coder/.
[13] K. J. Higgens, “Spaf on security,” Oct 2013, http://www.darkreading.com/vulnerability/spaf-on-security/240162511.
[14] ARM Ltd., “ARM security technology: Building a secure system using TrustZone technology,” 2009, http://www.arm.com/products/processors/technologies/trustzone/index.php.
[15] D. Rosenberg, 2013, “Unlocking the Motorola bootloader,” http://blog.azimuthsecurity.com/2013/04/Apr/unlocking-motorola-bootloader.html.
[16] A. C´ardenas, S. Amin, and S. Sastry, “Secure control: Towards survivable cyber-physical systems,” in *Distributed Computing Systems Workshops, 2008. ICDCS ’08. 28th International Conference on*, Jun 2008, pp. 495–500.
[17] A. A. C´ardenas, S. Amin, Z.-S. Lin, Y.-L. Huang, C.-Y. Huang, and S. Sastry, “Attacks against process control systems: risk assessment, detection, and response,” in *Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security*, ser. ASIACCS’11, 2011, pp. 355–366. [Online]. Available: http://doi.acm.org/10.1145/1966913.1966959
[18] A. Bessani, P. Sousa, M. Correia, N. Neves, and P. Verissimo, “The Crutial way of critical infrastructure protection,” *Security Privacy, IEEE*, vol. 6, no. 6, pp. 44–51, Nov 2008.
[19] J. Kirsch, S. Goose, Y. Amir, D. Wei, and P. Skare, “Survivable SCADA via intrusion-tolerant replication,” *Smart Grid, IEEE Transactions on*, vol. 5, no. 1, pp. 60–70, Jan 2014.
[20] L. Sha, “Using simplicity to control complexity,” *Software, IEEE*, vol. 18, no. 4, pp. 20–28, Jul–Aug 2001.
[21] C. Dai, S. Yang, and L. Tan, “An approach for controller fault detection,” in *Fifth World Conference on Intelligent Control and Automation (WCICA)*, vol. 2, Jun 2004, pp. 1637–1641.
[22] ARM Ltd., “Cortex-M1 FPGA processor,” 2013.
[23] P. Cuoq, B. Yakobowski, and V. Prevosto, *Frama-C’s value analysis plug-in: Fluorine-20130501*, CEA LIST, Software Reliability Laboratory, Saclay, F-91191, 2013, http://frama-c.com.
[24] P. Baudin, P. Cuoq, J.-C. Filliˆatre, C. Marché, B. Monate, Y. Moy, and V. Prevosto, *ACSL: ANSI/ISO C Specification Language: Version 1.4 Boron-20100401*, CEA LIST, France Télécom, INRIA Saclay, LRI – Univ Paris-Sud, 2010, http://frama-c.com.
[25] C. Marché and Y. Moy, *The Jessie plugin for Deductive Verification in Frama-C*, INRIA Saclay - Télé-de-France and LRI, CNRS UMR 8623, 2013, http://proval.lri.fr/.
[26] D. Bagni and D. Mackay, “PID System Controller Design with Vivado HLS Generator,” *XAPP1163 (v1.0)*. [Online]. Available: http://www.xilinx.com/support/documentation/application notes/xapp1163.pdf
[27] Quanser Inc., “The rotary control lab,” 2012, http://www.quanser.com/flippers/Rotary/2012/.