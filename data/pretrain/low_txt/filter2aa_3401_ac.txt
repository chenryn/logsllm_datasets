### 1.1.1.3.2 Base 64
**Page 40**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020  
[MDN Web Docs: Window.btoa](https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa)

#### Base 64 Encoding Scheme in JavaScript
Many browsers support Base64 encoding and decoding natively through the `btoa` and `atob` functions:
```javascript
window.btoa('encode this string'); // Encode
window.atob('ZW5jb2RlIHRoaXMgc3RyaW5n'); // Decode
```

**Page 41**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020  
[MDN Web Docs: Window.btoa](https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa)

#### Handling Unicode Strings with Base64
When working with Unicode strings, it is essential to encode them before using the Base64 functions. For example, in JavaScript, you can do this as follows:

**Page 42**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Importance of Escapes and Encodings
Escaping and encoding are necessary to avoid exceptions with characters out of range. Learn more [here](https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa).

#### Unicode (ISO/IEC 10646 Universal Character Set)
Unicode is a character encoding standard designed to enable people around the world to use computers in any language. It supports all the world's writing systems.

Due to the large number of characters, glyphs, and numbers in Unicode, incorrect usage can expose web applications to security vulnerabilities. One such vulnerability is the ability to bypass filters.

### 1.1.1.4 Unicode Encoding
**Page 43**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

We will not cover the specifics of Unicode, but for a better understanding of character sets and related topics, refer to [Joel on Software: The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)](http://www.joelonsoftware.com/articles/Unicode.html).

**Page 44**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

There are three primary ways to map Unicode code points:
- **UTF-8**
- **UTF-16**
- **UTF-32**

UTF stands for Unicode Transformation Format, and the trailing number indicates the number of bits used to represent code points.

**Page 45**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

Each UTF has a different representation, and it is crucial to understand how to handle these in your tests. The following table shows a sample message encoded in the three different UTF formats.

**Page 46**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

It is also useful to know how Unicode characters are handled in different implementations such as URLs, HTML, and JavaScript. Examples of these can be seen below.

**Page 47**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

Another interesting aspect is the interpretation that humans and different implementations give to some characters. This can lead to visual spoofing attacks.

**Page 48**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

[Homoglyphs and Visual Spoofing](http://en.wikipedia.org/wiki/Homoglyph)

In typography, a homoglyph is one or more characters or glyphs with shapes that either appear identical or cannot be differentiated by quick visual inspection. 

- **HOMOGRAPH**: A word that looks the same as another word.
- **HOMOGLYPH**: A look-alike character used to create homographs.

**Page 49**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Example: Visual Spoofing
One possible attack using Unicode is called **Visual Spoofing**. For instance, the characters 'o' and 'Œø' have different code points but may be visually indistinguishable to a human.

- **U+006F**: LATIN SMALL LETTER O
- **U+03BF**: GREEK SMALL LETTER OMICRON

The Unicode Consortium (TR39) provides a utility to identify confusable characters. Learn more [here](http://unicode.org/reports/tr39/) and [here](http://unicode.org/cldr/utility/confusables.jsp).

**Page 50**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Example: google.com
- **U+006F**: LATIN SMALL LETTER O
- **U+03BF**: GREEK SMALL LETTER OMICRON
- **U+043E**: CYRILLIC SMALL LETTER O
- **U+03F2**: GREEK LUNATE SIGMA SYMBOL
- **gŒøŒøgl–µ.œ≤om** vs. **google.com**
- **U+0435**: CYRILLIC SMALL LETTER IE
- **U+0065**: LATIN SMALL LETTER E
- **U+0063**: LATIN SMALL LETTER C

**Page 51**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

To generate homographs, rather than searching for look-alike characters in Unicode, there is an application by Adrian ‚ÄúIrongeek‚Äù Crenshaw: [Homoglyph Attack Generator](http://www.irongeek.com/homoglyph-attack-generator.php).

This tool is part of a paper explaining the abuse of Unicode characters to obfuscate phishing attacks through the use of Homoglyphs and Punycode. Learn more [here](http://www.irongeek.com/i.php?page=security/out-of-character-use-of-punycode-and-homoglyph-attacks-to-obfuscate-urls-for-phishing).

**Page 52**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Computer Interpretations
Another interesting aspect is the transformation of strings and characters during normal software processes, such as upper and lower casing transformations.

**Page 53**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Example: Censured Feedback
In a feedback page, the application layer performs a censorship check before storing data in a database. An input filter blocks the term "EVIL" and then transforms the string to lowercase before storing it in the database.

- **Input**: Evƒ∞l intent, as usual!
- **Filter Check**: Evƒ∞l != evil
- **Casing Operation**: evil intent, as usual!
- **Result**: CENSURED BYPASSED

**Page 54**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

This happens because the casing operation is performed after the security check. This can also work with other characters, such as:
- **≈ø** (U+017F) to uppercase is **S** (U+0053)

Such vulnerable implementations can allow attackers to bypass filters, including anti-cross-site scripting and SQL injection filters.

**Page 55**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

For more details, see:
- [Creative usernames and Spotify account hijacking](http://labs.spotify.com/2013/06/18/creative-usernames/)

**Page 56**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Other Transformations
Other transformations include normalization, canonicalization, and best fit mapping. These are well summarized in Chris Weber's [Unicode Security Guide](http://websec.github.io/unicode-security-guide/).

**Page 57**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Mixed Examples
- **Normalization**: ‚ìì‚ì°‚ìû‚ìü ‚ì£‚ìê‚ìë‚ìõ‚ìî becomes **drop table**
- **Canonicalization**: URL becomes **URL**

A common scenario is URL redirection, where the forwarding URL is URL-encoded:
- **Original**: http://mywebsite/login.php?redirectURL=FORW-URL?is_ok=yes
- **Encoded**: http://mywebsite/login.php?redirectURL=FORW-URL%3Fis_ok%3Dyes

**Page 58**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

#### Multiple (De|En) Codings
Even if a parameter is not a URL, encoding is still required:
- **Original**: http://mywebsite/login.php?param=I‚ô•üçª
- **Encoded**: http://mywebsite/login.php?param=I%E2%99%A5%F0%9F%8D%BB

Multiple encodings can occur if the parameter is already encoded:
- **Original**: http://mywebsite/login.php?param=Rk9SVy1VUkw/Y2F0PWNsb3ducw==
- **Encoded**: http://mywebsite/login.php?param=Rk9SVy1VUkw%2FY2F0PWNsb3ducw%3D%3D

**Page 59**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

Sometimes, a simple parameter can be a structured parameter, such as a cookie value:
- **Cookie Value**: SESSION = dXNlcm5hbWU6Y2xvd247cGFzc3dvcmQ6dGhlQ2xvd24h
- **Decoded**: SESSION = username:clown;password:theClown!

**Page 60**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

Understanding different data encoding types is crucial for detecting and exploiting various scenarios. To respect application requirements and properly test a web application, it is essential to detect and consider multiple encoding and decoding operations.

**Page 61**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

You‚Äôve been studying quite intently. We recommend taking a quick break and coming back refreshed. ^_^

**Page 62**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

### 1.2 Filtering Basics
**Page 63**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

A common best practice to protect web applications against malicious attacks is the use of specific input filtering and output encoding controls. These controls can range from naive blacklists to experienced and highly restrictive whitelists.

**Page 64**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

[OWASP Enterprise Security API (ESAPI)](https://www.owasp.org/index.php/Category:OWASP_Enterprise_Security_API)

Controls can be implemented at different layers in a web application, such as libraries and APIs. They can be developed by internal specialists or external organizations like OWASP. Security controls are also built into most common browsers.

**Page 65**
WAPTXv2: Section 1, Module 1 - Caendra Inc. ¬© 2020

Sometimes, due to complications and standards, implementing internal solutions can be problematic. In such cases, adopting external solutions is key.