### Protocols for Protection Against Subtle Attacks

There are additional security considerations that must not be overlooked. Firstly, the security properties of a program depend on the correctness of the Jif compiler and our policy compiler. Secondly, these properties may also rely on supporting infrastructures, such as the correctness of encryption libraries, the strength of cryptographic algorithms, the protection of keystores, the correctness of public-key cryptographic libraries, and the security enforced by the local file system. Moreover, for the system to be secure, the enforced policy must be consistent across all clients. We defer the discussion of integrity to future work.

One advantage of Jif is that it forces programmers to think in terms of information flows and to consider security concerns from the outset. There is a strong consensus in the software engineering community that performing such security analyses at design time is essential for the security of the resulting system [6].

### Decoupling Policy from Programs

We observed that the policy tool effectively decouples policy from the programs they govern. This allowed us to easily modify policies to accommodate different security models. By instrumenting the code with different options for each filter during development, we could implement distinct security models without altering the code. Furthermore, by consolidating the policy into a single file, it was easier to conduct a security analysis and gauge the possible information flows for a given principal, as opposed to leaving declassify statements scattered throughout the code.

### Challenges in Programming with Jif

The difficulties in programming with Jif are not unique to Jif but are common to any security-typed compiler. Jif is the most advanced security-typed compiler available, and the Jif team should be commended for their substantial efforts. However, Jif is not yet ready for industrial development. Implementing the JPmail client required hundreds of man-hours (not including the time necessary to learn Jif) to generate around 6,000 lines of code. Despite this significant effort, our mail client is neither flashy nor full-featured. It uses text-based I/O and handles only a minimal subset of the MIME standard, just enough to enable communication between various principals. This contrasts with the more modest efforts needed to retrofit composable security properties onto the full-featured, GUI-based email client, Pooka, using the Polymer security policy system [2].

### Areas for Improvement

#### Debugging
A serious issue we faced was the difficulty of debugging Jif applications. No advanced debugging tools exist for Jif, leaving us with only rudimentary print statements. Additionally, because Jif is designed to hide information, we had to overcome its tendency to hide information to reveal it for debugging purposes.

#### Implicit Flows
Another source of repeated concern in Jif programs involves implicit flows. Jif tracks not only explicit flows of information as data passes from one variable to another but also implicit flows, where data is leaked through the control path. For example, making a low-confidentiality assignment in the body of a conditional with a highly confidential guard releases a small amount of information about the guard through the assignment. To prevent this, Jif raises the security level of everything in the body of the conditional to the level of the guard. This applies to loops and exceptions as well. With nested conditionals, loops, and exceptions, it can become quite difficult to determine the security level of the program counter (pc) at a given point in the code. Even when knowing the pc-label, it can be challenging to determine how it was assigned.

#### Reader Lists
An unexplored area of Jif that holds great promise in expressing flexible policy is the use of Jif reader lists. The decentralized label model (DLM) provides labels such as {alice:bob}, meaning that Bob cannot copy the value but can only view it on a channel trusted by both Alice and Bob. Using this policy, an email could be sent to Bob, which he could not save on his hard drive or forward to another user but could only view on a terminal certified by both him and Alice. This would be a very useful policy, allowing Alice to retain control over her data even on another user’s machine.

#### Distributed Policy
One of the key benefits of security-typed languages is that non-interfering components are composable. Thus, secure programs can be built in a modular way, and when composed, they can still make end-to-end security guarantees. However, to have security-typed distributed applications, all necessary support structures, including sockets, network stacks, file systems, and operating systems, would need to be built in security-typed languages. Since this vision will not be realized in the near future, Jif at least allows incremental deployment of applications with interfaces to existing support services. In the meantime, conventional security enforcement mechanisms such as certificates, encryption, key stores, and SSL must be used. One shortcoming of Jif is that it does not provide a secure integration of these conventional security enforcement mechanisms.

#### Incremental Development
Future applications will require many more support libraries to be integrated with Jif. Currently, Jif has a small library of security-typed versions of Java’s Container classes. Most other support must still be developed. In our case study, we provided a subset of the javax.mail library. Hopefully, other projects will continue to fill these gaps, making Jif more accessible to application developers.

### Related Work

The concept of information-flow control is well established. After the first formulation by Bell and La Padula [3] and the subsequent definition of noninterference [11], Smith, Volpano, and Irvine recast the question of information flow into a static type judgment for a simple imperative language [28]. The notion of information flow has been extended to languages with multiple threads of execution [27, 14], functional languages and their extensions [19, 29], and distributed systems [14]. For a comprehensive survey of the field, see the survey by Sabelfeld and Myers [21].

Two robust security-typed languages have been implemented that statically enforce noninterference: Flow Caml [24] and JFlow [16], with its successor Jif [18]. Jif is actively in development, with the latest release in June 2006 (v. 3.0) introducing integrity labels [5].

### Conclusions

This paper describes the first real-world application built in a type-secure language: the JPmail email client. Our work has exposed the advantages and limitations of the state of the art. On the positive side, Jif provides extensive and usable interfaces for developing information flow-governed applications. These features provide a basis from which concrete security guarantees can be built.

Our work in JPmail also uncovered two central deficiencies. First, working with Jif is currently exceedingly difficult due to a lack of developer tools and the difficulty in determining the source and meaning of errors. We introduce an IDE and policy design patterns to help address these developer tool limitations. Second, there is little or no infrastructure to formulate policy, communicate that policy beyond a single application, or map the guarantees onto surrounding security infrastructure. Here, our policy compiler and policy store address each of these areas.

Despite the considerable challenges we encountered in this project, we are encouraged by the experience. The tools and practice of using Jif, and in a larger sense, security-typed languages, must mature before their promise is fully realized. We see this work as another step in that maturation process.

### Acknowledgements

We thank Steve Chong for his endless patience and prompt responses to our questions about Jif. We also thank the reviewers for their helpful comments. This research was supported in part by NSF grant CCF-0524132, “Flexible, Decentralized Information-Flow Control for Dynamic Environments,” and in part by Motorola through the Software Engineering Research Consortium (SERC).

### References

[1] A. Askarov and A. Sabelfeld. Secure implementation of cryptographic protocols: A case study of mutual distrust. In Proceedings of the 10th European Symposium on Research in Computer Security (ESORICS ’05), LNCS, Milan, Italy, September 2005. Springer-Verlag.
[2] L. Bauer, J. Ligatti, and D. Walker. Composing security policies with polymer. In PLDI ’05: Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation, pages 305–314, New York, NY, USA, 2005. ACM Press.
[3] D. E. Bell and L. J. LaPadula. Secure computer systems: Mathematical foundations. Technical Report MTR-2547, Vol. 1, MITRE Corp., Bedford, MA, 1973.
[4] J. Callas, L. Donnerhacke, H. Finney, and R. Thayer. OpenPGP message format. IETF RFC 2440, November 1998.
[5] S. Chong and A. C. Myers. Decentralized robustness. In Proceedings of the 19th IEEE Computer Security Foundations Workshop (CSFW), Venice, Italy, July 2006. to appear.
[6] P. T. Devanbu and S. Stubblebine. Software engineering for security: a roadmap. In ICSE ’00: Proceedings of the Conference on The Future of Software Engineering, pages 227–239, New York, NY, USA, 2000. ACM Press.
[7] Federal Trade Commission. Eli Lilly settles FTC charges concerning security breach. FTC Press Release, January 18 2002. http://www.ftc.gov/opa/2002/01/elililly.htm.
[8] Federal Trade Commission. Cardsystems Solutions settles FTC charges. FTC Press Release, February 23 2006. http://www.ftc.gov/opa/2006/02/cardsystems_r.htm.
[9] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and R. Chandramouli. Proposed NIST standard for role-based access control. ACM Trans. Inf. Syst. Secur. (TISSEC), 4(3):224–274, 2001.
[10] S. L. Garfinkel, E. Nordlander, R. C. Miller, D. Margrave, and J. I. Schiller. How to make secure email easier to use. In Proceedings of the Conference on Human Factors in Computing Systems (CHI), Portland, Oregon, April 2005. SIGCHI.
[11] J. A. Goguen and J. Meseguer. Security policies and security models. In IEEE Symposium on Security and Privacy, pages 11–20, April 1982.
[12] B. Hicks, D. King, P. McDaniel, and M. Hicks. Trusted declassification: High-level policy for a security-typed language. In Proceedings of the 1st ACM SIGPLAN Workshop on Programming Languages and Analysis for Security (PLAS ’06), Ottawa, Canada, June 10 2006. ACM Press.
[13] B. Hicks, S. Rueda, T. Jaeger, and P. McDaniel. Breaking down the walls of mutual distrust: Security-typed email using labeled IPsec. Technical Report NAS-TR-0049-2006, Network and Security Research Center, Department of Computer Science and Engineering, Pennsylvania State University, University Park, PA, USA, Sept. 2006.
[14] H. Mantel and A. Sabelfeld. A unifying approach to the security of distributed and multi-threaded programs. J. Computer Security, 11(4):615–676, 2003.
[15] A. C. Myers. JFlow: Practical mostly-static information flow control. In POPL, pages 228–241, January 1999.