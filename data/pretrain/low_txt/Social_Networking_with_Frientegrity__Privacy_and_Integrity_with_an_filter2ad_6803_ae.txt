### Decentralization and Trusted Third-Party Infrastructure

We have argued that decentralization alone is insufficient to address the challenges of data storage. Users face a difficult choice: either sacrifice availability, reliability, scalability, and convenience by storing their data on personal devices, or entrust their data to third-party providers, which may be no more trustworthy than a centralized service.

### Cryptographic Approaches

Many systems aim to protect social network users' privacy through cryptographic methods. For example, Persona [5], flyByNight [37], NOYB [25], and Contrail [53] store users' data with untrusted providers but encrypt the content. Other systems, such as Hummingbird [9], Lockr [56], and those from Backes et al. [3], Domingo-Ferrer et al. [18], and Carminati et al. [8], attempt to hide a user's social relationships from the provider or other users. However, these systems do not provide defenses against traffic analysis, except through decentralization. Unlike Frientegrity, many of these systems (e.g., [5, 9, 37]) require linear work in the number of a user's friends to "un-friend" someone. The scheme by Sun et al. [54] is an exception but does not support Friends of Friends (FoFs). EASiER [28] aims to achieve efficient revocation via broadcast encryption techniques and a reencrypting proxy, but its performance in the DECENT [29] distributed social network is poor for unclear reasons. These systems primarily focus on protecting users' privacy while neglecting the integrity of their data. They either assume third parties are "honest-but-curious" (e.g., [9, 37]) or use signatures on individual messages, but none address the issue of provider equivocation.

### Defending Against Equivocation

Several systems have addressed the threat of server equivocation in network file systems [33, 34], key-value stores [7, 38, 50], and group collaboration [21] by enforcing fork* consistency and related properties. However, these systems require clients to perform work that is linear in either the number of users or the number of updates, making them impractical for large social networks where users are typically interested only in the latest updates. FETHR [45] is a Twitter-like service that defends against server equivocation by linking a user's posts with a hash chain and optionally entangling multiple users' histories. However, it lacks access control and a formal consistency model, providing no correctness guarantees unless a client verifies a user's entire history back to the beginning.

### Access Control List (ACL) Operations

To evaluate the cost of ACL operations, we measured Frientegrity's performance as two users, Alice and Bob, made changes to their ACLs. While Alice added and removed users from her ACL, Bob updated the key he shares with FoFs. We performed this experiment for different ACL sizes and plotted the results in Figure 9. As expected, updating the key shared with FoFs was the most costly operation because it requires verifying two ACLs instead of one. Adding a new user to an ACL took longer than removing one due to the need for public key encryption. Although modifying an ACL involves a logarithmic number of symmetric key operations, the cost was dominated by the constant number of public key operations required to verify and update the ACL history.

### Related Work

#### Decentralized Approaches

To address security concerns in social networking, numerous works have proposed decentralized designs. In Diaspora [17], users can choose to store their data with different providers called "pods." In other systems like Safebook [14], eXO [36], PeerSoN [6], porkut [44], and Confidant [35], users store their data on their own machines or on the machines of trusted friends, federated via a distributed hash table. PrPl [48] and similar systems also propose decentralized architectures for social networking.

### Conclusion and Future Work

In designing Frientegrity, we aimed to provide a general framework for social networking applications built around an untrusted service provider. The system had to preserve data confidentiality and integrity while remaining efficient, scalable, and usable. We introduced a novel method for detecting server equivocation, more efficient mechanisms for ensuring fork* consistency based on history trees, and a mechanism for efficient access control by combining persistent authenticated dictionaries and key graphs. We evaluated a Frientegrity prototype on synthetic workloads inspired by real social networks, demonstrating that even with tens of thousands of object histories and hundreds of ACL entries, Frientegrity provides satisfactory response times for interactive use while maintaining strong security and integrity guarantees.

Like other social networking systems that store users' encrypted data with untrusted providers [5, 25, 37, 53], Frientegrity faces the challenge of how to pay for such third-party infrastructure. It has been suggested that providers would not accept a business model that prevents them from mining plaintext data for marketing purposes. This remains an area for future research, although some work on privacy-preserving advertising systems [26, 57] has been done.

### Acknowledgments

We thank Andrew Appel, Matvey Arye, Wyatt Lloyd, and our anonymous reviewers for their insights and helpful comments. This research was supported by funding from NSF CAREER Award #0953197, an ONR Young Investigator Award, and a gift from Google.

### References

[1] T. E. Anderson, M. D. Dahlin, J. M. Neefe, D. A. Patterson, D. S. Roselli, and R. Y. Wang. Serverless network file systems. ACM TOCS, 14(1), 1996.
[2] C. R. Aragon and R. G. Seidel. Randomized search trees. In Proc. FOCS, Oct. 1989.
[3] M. Backes, M. Maffei, and K. Pecina. A security API for distributed social networks. In Proc. NDSS, Feb. 2011.
[4] L. Backstrom, C. Dwork, and J. Kleinberg. Wherefore Art Thou R3579X? Anonymized social networks, hidden patterns, and structural steganography. In Proc. WWW, May 2007.
[5] R. Baden, A. Bender, N. Spring, B. Bhattacharjee, and D. Starin. Persona: an online social network with user-defined privacy. In Proc. SIGCOMM, Aug. 2009.
[6] S. Buchegger, D. Schiöberg, L. hung Vu, and A. Datta. PeerSoN: P2P social networking early experiences and insights. In Proc. SNS, Mar. 2009.
[7] C. Cachin, I. Keidar, and A. Shraer. Fail-aware untrusted storage. In Proc. DSN, June 2009.
[8] B. Carminati and E. Ferrari. Privacy-aware collaborative access control in web-based social networks. In Proc. DBSec, July 2008.
[9] E. D. Cristofaro, C. Soriente, G. Tsudik, and A. Williams. Hummingbird: Privacy at the time of twitter. Cryptology ePrint Archive, Report 2011/640, 2011. http://eprint.iacr.org/.
[10] S. A. Crosby and D. S. Wallach. High throughput asynchronous algorithms for message authentication. Technical Report CS TR10-15, Rice University, Dec. 2010.
[11] S. A. Crosby and D. S. Wallach. Efficient data structures for tamper-evident logging. In Proc. USENIX Security, Aug. 2009.
[12] S. A. Crosby and D. S. Wallach. Super-efficient aggregating history-independent persistent authenticated dictionaries. In Proc. ESORICS, Sept. 2009.
[13] S. A. Crosby and D. S. Wallach. Reference implementation of history trees and spliced signatures. https://github.com/scrosby/fastsig, Dec. 2010.
[14] L. A. Cutillo, R. Molva, T. Strufe, and T. Darmstadt. Safebook: A privacy-preserving online social network leveraging on real-life trust. IEEE Communications Magazine, 47(12):94–101, Dec. 2009.
[15] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lakshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vogels. Dynamo: Amazon’s highly available key-value store. In Proc. SOSP, Oct. 2007.
[16] S. Deo. protobuf-socket-rpc: Java and python rpc implementation using TCP/IP sockets (version 2.0). http://code.google.com/p/protobuf-socket-rpc/, May 2011.
[17] Diaspora. Diaspora project. http://diasporaproject.org/. Retrieved April 23, 2012.
[18] J. Domingo-Ferrer, A. Viejo, F. Sebé, and U. González-Nicolás. Privacy homomorphisms for social networks with private relationships. Computer Networks, 52:3007–3016, Oct. 2008.
[19] Facebook, Inc. Anatomy of facebook. http://www.facebook.com/notes/facebook-data-team/anatomy-of-facebook/10150388519243859, Nov. 2011.
[20] Facebook, Inc. Fact sheet. http://newsroom.fb.com/content/default.aspx?NewsAreaId=22. Retrieved April 23, 2012.
[21] A. J. Feldman, W. P. Zeller, M. J. Freedman, and E. W. Felten. Sporc: Group collaboration using untrusted cloud resources. In Proc. OSDI, Oct. 2010.
[22] Flickr. Flickr phantom photos. http://flickr.com/help/forum/33657/, Feb. 2007.
[23] S. Ghemawat, H. Gobioff, and S.-T. Leung. The Google file system. In Proc. SOSP, Oct. 2003.
[24] Google, Inc. Transparency report. https://www.google.com/transparencyreport/governmentrequests/userdata/. Retrieved April 23, 2012.
[25] S. Guha, K. Tang, and P. Francis. NOYB: Privacy in online social networks. In Proc. WOSN, Aug. 2008.
[26] S. Guha, B. Cheng, and P. Francis. Privad: Practical privacy in online advertising. In Proc. NSDI, Mar. 2011.
[27] M. P. Herlihy and J. M. Wing. Linearizability: A correctness condition for concurrent objects. ACM TOPLAS, 12(3), 1990.
[28] S. Jahid, P. Mittal, and N. Borisov. EASiER: Encryption-based access control in social networks with efficient revocation. In Proc. ASIACCS, Mar. 2011.
[29] S. Jahid, S. Nilizadeh, P. Mittal, N. Borisov, and A. Kapadia. DECENT: A decentralized architecture for enforcing privacy in online social networks. In Proc. SESOC, Mar. 2012.
[30] D. Karger, E. Lehman, T. Leighton, M. Levine, D. Lewin, and R. Panigrahy. Consistent hashing and random trees: Distributed caching protocols for relieving hot spots on the World Wide Web. In Proc. STOC, May 1997.
[44] R. Narendula, T. G. Papaioannou, and K. Aberer. Privacy-aware and highly-available OSN profiles. In Proc. WET-ICE, June 2010.
[45] D. R. Sandler and D. S. Wallach. Birds of a FETHR: Open, decentralized micropublishing. In Proc. IPTPS, Apr. 2009.
[46] R. Sanghvi. Facebook blog: New tools to control your experience. https://blog.facebook.com/blog.php?post=196629387130, Dec. 2009.
[47] E. Schonfeld. Watch out who you reply to on google buzz, you might be exposing their email address. TechCrunch, Feb. 2010.
[48] S.-W. Seong, J. Seo, M. Nasielski, D. Sengupta, S. Hangal, S. K. Teh, R. Chu, B. Dodson, and M. S. Lam. PrPl: A decentralized social networking infrastructure. In Proc. MCS, June 2010.
[49] A. Shakimov, H. Lim, R. Caceres, L. P. Cox, K. Li, D. Liu, and A. Varshavsky. Vis-à-Vis: Privacy-preserving online social networking via virtual individual servers. In Proc. COMSNETS, Jan. 2011.
[50] A. Shraer, C. Cachin, A. Cidon, I. Keidar, Y. Michalevsky, and D. Shaket. Venus: Verification for untrusted cloud storage. In Proc. CCSW, Oct. 2010.
[31] L. Lamport. The part-time parliament. ACM TOCS, 16(2):133–169, 1998.
[32] J. Leskovec and E. Horvitz. Planetary-scale views on a large instant-messaging network. In Proc. WWW, Apr. 2008.
[33] J. Li and D. Mazières. Beyond one-third faulty replicas in Byzantine fault tolerant systems. In Proc. NSDI, Apr. 2007.
[34] J. Li, M. N. Krohn, D. Mazières, and D. Shasha. Secure untrusted data repository (SUNDR). In Proc. OSDI, Dec. 2004.
[35] D. Liu, A. Shakimov, R. Cáceres, A. Varshavsky, and L. P. Cox. Confidant: Protecting OSN data without locking it up. In Proc. Middleware, Dec. 2011.
[36] A. Loupasakis, N. Ntarmos, and P. Triantafillou. eXO: Decentralized autonomous scalable social networking. In Proc. CIDR, Jan. 2011.
[37] M. M. Lucas and N. Borisov. flyByNight: mitigating the privacy risks of social networking. In Proc. WPES, Oct. 2008.
[38] P. Mahajan, S. Setty, S. Lee, A. Clement, L. Alvisi, M. Dahlin, and M. Walfish. Depot: Cloud storage with minimal trust. In Proc. OSDI, Oct. 2010.
[39] D. Mazières and D. Shasha. Building secure file systems out of Byzantine storage. In Proc. PODC, July 2002.
[40] J. P. Mello. Facebook scrambles to fix security hole exposing private pictures. PC World, Dec. 2011.
[41] R. C. Merkle. A digital signature based on a conventional encryption function. CRYPTO, pages 369–378, 1987.
[42] Mozilla Project. Network security services for Java (JSS). https://developer.mozilla.org/En/JSS. Retrieved April 23, 2012.
[43] A. Narayanan and V. Shmatikov. De-anonymizing social networks. In Proc. IEEE S & P, May 2009.
[52] M. Stonebraker. The case for shared nothing. IEEE Database Engineering Bulletin, 9(1):4–9, 1986.
[53] P. Stuedi, I. Mohomed, M. Balakrishnan, Z. M. Mao, V. Ramasubramanian, D. Terry, and T. Wobber. Contrail: Enabling decentralized social networks on smartphones. In Proc. Middleware, Dec. 2011.
[54] J. Sun, X. Zhu, and Y. Fang. A privacy-preserving scheme for online social networks with efficient revocation. In Proc. INFOCOM, Mar. 2010.
[55] D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J. Spreitzer, and C. H. Hauser. Managing update conflicts in Bayou, a weakly connected replicated storage system. In Proc. SOSP, Dec. 1995.
[56] A. Tootoonchian, S. Saroiu, Y. Ganjali, and A. Wolman. Lockr: Better privacy for social networks. In Proc. CoNEXT, Dec. 2009.
[57] V. Toubiana, A. Narayanan, D. Boneh, H. Nissenbaum, and S. Barocas. Adnostic: Privacy preserving targeted advertising. In Proc. NDSS, Feb. 2010.
[58] D. Wheeler. SLOCCount. http://www.dwheeler.com/sloccount/. Retrieved April 23, 2012.
[59] C. K. Wong, M. Gouda, and S. S. Lam. Secure group communications using key graphs. IEEE/ACM TON, 8(1):16–30, 1998.
[60] M. Zuckerberg. Facebook S-1: Letter from Mark Zuckerberg. http://sec.gov/Archives/edgar/data/1326801/000119312512034517/d287954ds1.htm#toc287954_10, Feb. 2012.