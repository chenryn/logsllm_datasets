# Title: Trust Management Services in Relational Databases

## Authors:
- Sabrina De Capitani di Vimercati, DTI - University of Milan, 26013 Crema, Italy
- Sushil Jajodia, George Mason University, Fairfax, VA 22030-4444, USA
- Stefano Paraboschi, DIGI - University of Bergamo, 24044 Dalmine, Italy
- Pierangela Samarati, DTI - University of Milan, 26013 Crema, Italy

## Abstract
Trust management is a promising approach for supporting access control in open environments. While several approaches have been proposed and significant progress has been made, a major obstacle remains: the lack of adequate support in Database Management Systems (DBMSs). This paper presents a design for implementing trust management within current relational DBMSs. We propose a trust model with SQL syntax and address the main issues in its implementation, particularly focusing on the efficient verification of delegation paths for certificates. This effort enables the realization of advanced trust management services within existing relational DBMSs.

## Categories and Subject Descriptors
H.2.4 [Database Management]: Systems—Relational databases; H.2.7 [Database Management]: Database Administration—Security, integrity, and protection

## General Terms
Security

## Keywords
Trust, relational DBMS, credentials, access control

## Introduction
Governments, large companies, and many other organizations need to provide access to information contained in their information systems to a multitude of users, both internal and external. These users typically access data from clients connected to a network. The size and dynamics of the user community in this scenario present challenges that traditional authorization and access control solutions cannot easily address. Managing individual accounts for each user on each system is impractical due to the complexity involved in account creation, privilege assignment, and secure credential management. Single-Sign-On (SSO) technology partially addresses the issue but is insufficient as it only handles authentication within a single organization.

Trust management systems offer a more flexible solution by allowing possibly unknown parties to establish trust based on certified information presented at the time of interaction. Servers can then regulate access based on attributes (identities or more general properties) that clients present. This forms the basis for defining flexible authorizations using certified attributes.

While several approaches to trust management have been proposed, a significant obstacle remains: the lack of adequate support in DBMSs. Current DBMSs, such as Oracle Server and Microsoft SQL Server 2005, offer some support for certificates, but this is limited to user authentication. No support is provided for using certified attributes to specify flexible authorizations. PostgreSQL also lacks integration between its robust authentication service and DBMS authorizations.

Integrating trust management services within the DBMS would significantly enhance the impact and applicability of this access control paradigm. DBMSs are central to managing most of the information accessed via web browsers or web service invocations. Without built-in trust management, the DBMS must rely on the overlying application layer, which contradicts the DBMS's evolution towards richer data access and management functions. Including trust management in the DBMS would give database administrators (DBAs) full control over access control policies, ensuring that all data accesses meet protection requirements, regardless of the application environment. This design adheres to the principle of keeping the access control mechanism close to the resource.

The need for integrating trust management with DBMSs is further highlighted by the shortcomings of ad-hoc mechanisms implemented using procedural SQL extensions. Our solution designs a novel, integrated service within the database architecture, offering better performance, usability, and robustness. Specifically, our solution aims to:

- Seamlessly integrate with the DBMS.
- Maintain the abstractness and declarativeness of the DBMS.
- Be expressive to specify flexible protection requirements.
- Ensure scalability for large, distributed open systems.

The paper makes two key contributions: proposing a trust management model for DBMSs and illustrating the techniques for efficiently enforcing this model within a modern relational engine.

## Organization
- Section 2 introduces the base elements of the trust management model and defines the framework.
- Section 3 proposes SQL statements for representing the trust model.
- Section 4 presents an algorithm for retrieving a valid delegation chain.
- Section 5 discusses integration with current relational database engines.
- Section 6 details the implementation in PostgreSQL.
- Section 7 reviews related work.
- Section 8 provides concluding remarks.

## Base Elements of the Model
### Base Concepts
To define and manage trust within the DBMS, we identify the following concepts:

- **Identity**: Corresponds to a public key. The trust management service assumes that a client presenting an identity owns it if they can demonstrate knowledge of the corresponding private key.
- **Authority**: Represents an identity responsible for producing and signing certificates. A party accepts certificates signed by trusted identities or chains leading to them.
- **Certificate**: Involves an issuer and a subject, with a cryptographic signature ensuring its integrity. Certificates include the issuer's and subject's public keys, a validity period, and a signature. We distinguish between attribute certificates and delegation certificates.
  - **Attribute Certificate**: Binds attribute information to the certificate subject, containing pairs of attribute names and values.
  - **Delegation Certificate**: Binds the trustworthiness of authorities, asserting that one authority trusts another for issuing certain attribute certificates.
- **Policy**: Defines rules regulating access to resources based on the client's identities and the information provided by attribute and delegation certificates.

### Framework Assumptions
Our goal is to enable the DBMS to understand and reason about trust and regulate access to its data accordingly. We assume the presence and correct behavior of traditional solutions for creating, exchanging, and verifying certificates, as well as for delegating authority. Issues like certificate revocation, network retrieval of certificates, credential negotiation, and robust cryptography are managed by underlying implementations. Reusing existing implementations is significant given the large number, variety, and distribution of players, and the need for standardization.

Our proposal allows the realization of a richer trust management model without updating the underlying infrastructure, which is particularly significant given the limitations of the X.509 format. Integrating a richer model can significantly increase the flexibility in using X.509 certificates.

## SQL Model for Trust Management
Our solution builds on an analysis of previous proposals, which, while expressive, are not directly applicable to the DBMS scenario. We propose a trust model with SQL syntax, addressing the main issues in its implementation, particularly the efficient verification of delegation paths for certificates.