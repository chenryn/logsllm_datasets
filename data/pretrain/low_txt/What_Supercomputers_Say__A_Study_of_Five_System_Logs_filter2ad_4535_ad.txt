### 优化后的文本

**图6. 过滤后的到达时间对数分布表明BG/L上的警报具有相关性（a），而Spirit上的警报则主要表现为独立类别（b）。这揭示了当前过滤算法的两个弱点：(1) 消息标签必须代表独立的警报集，以避免时间相关性；(2) 单一的过滤阈值并不适用于所有类型的消息。**

尽管选择和发布最佳模型及参数的需求强烈，但最重要的观察结果是，这种数据建模方法是误导性的。在更好地理解故障机制及其相互依赖关系之前，统计模型对其分布的预测价值有限。模型的有效性取决于其应用的上下文环境；没有一种模型适用于所有情况。此外，本研究中的故障具有广泛不同的特征，而以往的预测方法主要集中在单一特征上，以检测所有类型的故障（例如严重性级别或消息突发）。未来的研究应考虑基于多个特征的预测器集合，并根据各自的行为来预测故障类别。

当前的过滤算法，包括我们自己的算法，存在两个显著的弱点。首先，它们需要一个机制来确定不同时间来自不同来源的两个警报是否在某种意义上是“相同的”。目前还没有任何方法能够自信地断定两个被标记为不同的消息实际上是否相关。第二个主要弱点是，必须提前选定一个过滤阈值，并将其应用于所有类型的警报。实际上，每个警报类别可能需要不同的阈值，这些阈值可能会随时间变化。图6(a)中可见的双峰分布被认为是这些不足的结果之一。其中一个模式（第一个峰值）归因于未过滤的冗余。图3展示了标签间的相关性示例。在Spirit上，经过过滤后，上述问题并不明显，因此出现了图6(b)中的单峰分布。

### 建议

为了准确地检测、归因、量化和预测超级计算机中的故障，我们必须了解系统及其生成的日志的行为。本文介绍了迄今为止最广泛的系统日志研究（来自五台生产超级计算机的近十亿条消息）。我们分析了BG/L、Thunderbird、RedStorm、Spirit和Liberty超级计算机的日志（第3节），并识别出77个类别中的178,081,459条警报消息（表4）。最后，我们描述了人们希望如何使用超级计算机日志、他们面临的障碍以及我们的建议来克服这些挑战。

- **检测故障**：我们希望能够快速识别故障。大多数故障在日志中通过某种签名（某些消息的存在或缺失）得以体现，而其他一些故障则没有留下任何迹象。我们认为这类无声故障较为罕见。准确的检测和消除歧义需要外部信息，如操作上下文（图1）。我们建议记录操作状态之间的转换（第3.2.1节）。
- **归因根本原因**：我们希望有效地响应故障，这就需要知道哪些部分发生了故障以及为什么发生故障。日志机制本身可能会失败，导致消息损坏或丢失。冗余和不对称的警报报告需要过滤（第3.3节）。我们建议未来的工作研究那些能够意识到消息间相关性和不同故障类别的特性的过滤器，而不是一刀切的阈值（第4节）。
- **量化RAS**：我们希望能够建模并改进RAS指标。尽管从系统日志中计算MTTF等值非常诱人，但这往往是不准确且误导性的。日志的内容高度依赖于特定的系统和日志配置；用日志来比较机器是荒谬的。即使在同一系统上，日志也会随着时间发生变化，使其作为进度度量变得不可靠。我们建议基于直接感兴趣的量（如由于故障导致的有用工作损失量）来计算RAS指标。
- **预测故障**：我们希望能够预测故障，以最小化其影响。故障与消息签名之间的映射是多对多的关系。预测工作必须考虑到系统行为的重大变化（第3.2.1节）。正如过滤器应针对特定类别的故障进行调整一样，预测器也应专门针对具有相似预测行为的故障集（第4节）。

系统日志是一种丰富且普遍存在的资源，值得充分利用。然而，它们也带来了许多分析挑战，不应轻视。遵循本文中的建议将使我们更接近最终目标：为生产用户提供可靠的计算。

---

**致谢**

感谢以下人员为我们提供的时间、专业知识和数据：Sue Kelly、Bob Ballance、Ruth Klundt、Dick Dimock、Michael Davis、Jason Repik、Victor Kuhns、Matt Bohnsack、Jerry Smith 和 Josh England（桑迪亚国家实验室）；Kim Cupps、Adam Bertsch 和 Mike Miller（利弗莫尔国家实验室）；以及 IBM 的 Ramendra Sahoo。我们还要感谢论文指导者 Ravishankar Iyer 的指导。

**参考文献**

[1] Cray Red Storm 架构文档。http://www.cray.com/products/xt3/index.html, 2006.
[2] Top 500 超级计算站点。http://www.top500.org/, June 2006.
[3] N.R. Adiga and The BlueGene/L Team. An overview of the bluegene/l supercomputer. In Proceedings of ACM Supercomputing, 2002.
[4] M.F. Buckley and D.P. Siewiorek. A comparative analysis of event tupling schemes. In FTCS-26, Intl. Symp. on Fault Tolerant Computing, pages 294–303, June 1996.
[5] D.G. Feitelson and D. Tsafrir. Workloads sanitation for performance evaluation. In IEEE Intl. Symp. Performance Anal. Syst. & Software (ISPASS), pages 221–230, Mar 2006.
[6] U. Flegel. Pseudonymizing UNIX log files. In Proceedings of the Infrastructure Security Conference (InfraSec), 2002.
[7] J.L. Hellerstein, S. Ma, and C. Perng. Discovering actionable patterns in event data. IBM Systems Journal, 41(3), 2002.
[8] I. Lee and R.K. Iyer. Faults, symptoms, and software fault tolerance in the Tandem Guardian 90 operating system. In Fault-Tolerant Computing. FTCS-23. Digest of Papers., The Twenty-Third International Symposium on, pages 20–29, 1993.
[9] Y. Liang, Y. Zhang, M. Jette, A. Sivasubramaniam, and R.K. Sahoo. BlueGene/L failure analysis and prediction models. In Proceedings of the Intl. Conf. on Dependable Systems and Networks (DSN), pages 425–434, 2006.
[10] Y. Liang, Y. Zhang, A. Sivasubramaniam, R.K. Sahoo, J. Moreira, and M. Gupta. Filtering failure logs for a BlueGene/L prototype. In Proceedings of the Intl. Conf. on Dependable Systems and Networks (DSN), pages 476–485, June 2005.
[11] T.T.Y. Lin and D.P. Siewiorek. Error log analysis: statistical modeling and heuristic trend analysis. Reliability, IEEE Transactions on, 39(4):419–432, 1990.
[12] S. Ma and J. Hellerstein. Mining partially periodic event patterns with unknown periods. In Proceedings of the International Conference on Data Engineering (ICDE), pages 409–416, 2001.
[13] F.A. Nassar and D.M. Andrews. A methodology for analysis of failure prediction data. In Real-Time Systems Symposium, pages 160–166, December 1985.
[14] A. Oliner, L. Rudolph, and R. Sahoo. Cooperative checkpointing theory. In Proceedings of the 20th Intl. Parallel and Distributed Processing Symposium (IPDPS), 2006.
[15] A. Oliner, L. Rudolph, and R.K. Sahoo. Cooperative checkpointing: A robust approach to large-scale systems reliability. In Proceedings of the 20th Intl. Conf. on Supercomputing (ICS), Cairns, Australia, June 2005.
[16] A.J. Oliner, L. Rudolph, R.K. Sahoo, J.E. Moreira, and M. Gupta. Probabilistic QoS guarantees for supercomputing systems. In Proceedings of the Intl. Conf. on Dependable Systems and Networks (DSN), pages 634–643, 2005.
[17] A.J. Oliner, R.K. Sahoo, J.E. Moreira, M. Gupta, and A. Sivasubramaniam. Fault-aware job scheduling for BlueGene/L systems. In Proceedings of the 18th Intl. Parallel and Distributed Processing Symposium (IPDPS), pages 64+, 2004.
[18] J. Prewett. Analyzing cluster log files using LogSurfer. In Proceedings of the 4th Annual Conference on Linux Clusters, 2003.
[19] R.K. Sahoo, A.J. Oliner, I. Rish, M. Gupta, J.E. Moreira, S. Ma, R. Vilalta, and A. Sivasubramaniam. Critical event prediction for proactive management in large-scale computer clusters. In Proceedings of the 9th ACM SIGKDD, International Conference on Knowledge Discovery and Data Mining, pages 426–435. ACM Press, 2003.
[20] R.K. Sahoo, A. Sivasubramaniam, M.S. Squillante, and Y. Zhang. Failure data analysis of a large-scale heterogeneous server environment. In Proceedings of the Intl. Conf. on Dependable Systems and Networks (DSN), pages 772–781, June 2004.
[21] B. Schroeder and G. Gibson. A large-scale study of failures in high-performance computing systems. In Proceedings of the Intl. Conf. on Dependable Systems and Networks (DSN), Philadelphia, PA, June 2006.
[22] B. Schroeder and G. Gibson. Disk failures in the real world: What does an MTTFO of 1,000,000 hours mean to you? In 5th USENIX Conference on File and Storage Technologies (FAST 2007), 2007.
[23] J. Stearley. Towards informatic analysis of syslogs. In IEEE International Conference on Cluster Computing, pages 309–318, 2004.
[24] J. Stearley. Defining and measuring supercomputer Reliability, Availability, and Serviceability (RAS). In Proceedings of the Linux Clusters Institute Conference, 2005. See http://www.cs.sandia.gov/~jrstear/ras.
[25] D. Tang and R.K. Iyer. Analysis and modeling of correlated failures in multicomputer systems. Computers, IEEE Transactions on, 41(5):567–577, 1992.
[26] M.M. Tsao. Trend Analysis and Fault Prediction. PhD dissertation, Carnegie-Mellon University, May 1983.
[27] R. Vaarandi. A breadth-first algorithm for mining frequent patterns from event logs. In Proceedings of the 2004 IFIP International Conference on Intelligence in Communication Systems, volume 3283, pages 293–308, 2004.
[28] K. Yamanishi and Y. Maruyama. Dynamic syslog mining for network failure monitoring. In Proceedings of the 11th ACM SIGKDD, International Conference on Knowledge Discovery and Data Mining, pages 499–508, New York, NY, USA, 2005. ACM Press.

---

37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)
0-7695-2855-4/07 $20.00 © 2007
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 12:48:03 UTC from IEEE Xplore. Restrictions apply.