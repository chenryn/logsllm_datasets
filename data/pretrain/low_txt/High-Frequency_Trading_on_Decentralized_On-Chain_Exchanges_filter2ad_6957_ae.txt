### Front-Running and Back-Running in Decentralized Exchanges

Front-running and back-running are common issues in decentralized exchanges (DEXs), particularly in Automated Market Makers (AMMs). Addressing front-running is non-trivial because the smaller the slippage allowed by a trader, the higher the likelihood of trade failure. Cryptographic defenses, while effective, can negatively impact the usability of AMM DEXs due to multiple rounds of interactions or reliance on trusted off-chain components (see Appendix C).

Our research demonstrates that even with multiple competing adversaries, sandwich attacks can remain profitable. This highlights a dilemma for DEXs: if the default slippage is set too low, the DEX may not be scalable, supporting only a few trades per block; if the default slippage is too high, adversaries can profit. We hope this work draws attention to this unresolved issue and inspires future research on open, secure, and decentralized finance.

### Acknowledgments

We are grateful to the anonymous reviewers and Nicolas Christin for their thorough reviews and valuable suggestions, which significantly improved the paper.

### Figure 12: Simulated Gas Price of the "Winning" Transaction

This figure shows the simulated gas price of the "winning" transaction when 2, 5, or 10 adversaries are performing a reactive counter-bidding attack. Each experiment was run 100,000 times, and we visualize the 95% confidence interval.

### Related Work

#### Front-Running in Cryptographic Protocols

The cryptographic literature captures front-running by allowing a "rushing adversary" to interact with a protocol [11]. In the context of high-frequency trading (HFT) [7, 47], various trading strategies and their economic impacts, such as arbitrage and news reaction strategies, have been explored. Many traditional market strategies are also applicable to AMMs and other decentralized exchanges [21, 8].

Daian et al. [21] introduced the concept of gas price auctions (PGA) among trading bots and the concept of miner extractable value (MEV). Previous studies [10] suggest that HFT performance is strongly associated with latency and execution speed. Multiple forms of malpractice have been discovered on financial exchanges, including traditional market manipulation techniques like cornering, front-running, and pump-and-dump schemes [34]. Newer techniques, such as spoofing, pinging, and mass misinformation, have also been studied [41].

### References

[1] Balancer Exchange. https://balancer.finance/whitepaper/.

[2] Ethereum Improvement Proposal 1014: Skinny Create2, 2018. Accessed May 26, 2020, https://eips.ethereum.org/EIPS/eip-1014.

[3] Blockchain Transparency Report, 2019.

[4] Implementing Ethereum Trading Front-Runs on the Bancor Exchange in Python, 2019.

[5] Kyber: An On-Chain Liquidity Protocol. Technical report, Kyber Network, April 2019.

[6] NASDAQ Glossary, 2019.

[7] James J. Angel and Douglas McCabe. Fairness in Financial Markets: The Case of High-Frequency Trading. Journal of Business Ethics, 112(4):585–595, 2013.

[8] Guillermo Angeris, Hsien-Tang Kao, Rei Chiang, Charlie Noyes, and Tarun Chitra. An Analysis of Uniswap Markets. arXiv preprint arXiv:1911.03380, 2019.

[9] Jakob Arnoldi. Computer Algorithms, Market Manipulation, and the Institutionalization of High-Frequency Trading. Theory, Culture & Society, 33(1):29–52, 2016.

[10] Matthew Baron, Jonathan Brogaard, Björn Hagströmer, and Andrei Kirilenko. Risk and Return in High-Frequency Trading. Journal of Financial and Quantitative Analysis, 54(3):993–1024, 2019.

[11] Donald Beaver and Stuart Haber. Cryptographic Protocols Provably Secure Against Dynamic Adversaries. In Workshop on the Theory and Application of Cryptographic Techniques, pages 307–323. Springer, 1992.

[12] Iddo Bentov, Yan Ji, Fan Zhang, Lorenz Breidenbach, Philip Daian, and Ari Juels. Tesseract: Real-Time Cryptocurrency Exchange Using Trusted Hardware. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, pages 1521–1538, 2019.

[13] Bitinfocharts. Ethereum Block Time.

[14] Joseph Bonneau, Edward W. Felten, Steven Goldfeder, Joshua A. Kroll, and Arvind Narayanan. Why Buy When You Can Rent? Bribery Attacks on Bitcoin Consensus, 2016.

[15] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A. Kroll, and Edward W. Felten. SoK: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 104–121. IEEE, 2015.

[16] Sean Bowe, Alessandro Chiesa, Matthew Green, Ian Miers, Pratyush Mishra, and Howard Wu. Zexe: Enabling Decentralized Private Computation. Cryptology ePrint Archive, Report 2018/962, 2018. https://eprint.iacr.org/2018/962.

[17] Lorenz Breidenbach, Phil Daian, Florian Tramèr, and Ari Juels. Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts. In 27th USENIX Security Symposium (USENIX Security 18), pages 1335–1352, 2018.

[18] Benedikt Bünz, Shashank Agrawal, Mahdi Zamani, and Dan Boneh. Zether: Towards Privacy in a Smart Contract World. IACR Cryptol. ePrint Arch., 2019:191, 2019.

[19] Raymond Cheng, Fan Zhang, Jernej Kos, Warren He, Nicholas Hynes, Noah Johnson, Ari Juels, Andrew Miller, and Dawn Song. Ekiden: A Platform for Confidentiality-Preserving, Trustworthy, and Performant Smart Contracts. In 2019 IEEE European Symposium on Security and Privacy (EuroS&P), pages 185–200. IEEE, 2019.

[20] Securities Commission and Exchange. SEC Enforcement Action Against EtherDelta. Technical report.

[21] Philip Daian, Steven Goldfeder, Tyler Kell, Yunqi Li, Xueyuan Zhao, Iddo Bentov, Lorenz Breidenbach, and Ari Juels. Flash Boys 2.0: Frontrunning, Transaction Reordering, and Consensus Instability in Decentralized Exchanges. arXiv preprint arXiv:1904.05234, 2019.

[22] Christian Decker and Roger Wattenhofer. Information Propagation in the Bitcoin Network. In Conference on Peer-to-Peer Computing, pages 1–10, 2013.

[23] DutchX, July 2019. Accessed November 12, 2019, https://github.com/gnosis/dx-docs.

[24] Öguzhan Ersoy, Zhijie Ren, Zekeriya Erkin, and Reginald L. Legendijk. Transaction Propagation on Permissionless Blockchains: Incentive and Routing Mechanisms. In 2018 Crypto Valley Conference on Blockchain Technology (CVCBT), pages 20–30. IEEE, 2018.

[25] Shayan Eskandari, Seyedehmahsa Moosavi, and Jeremy Clark. SoK: Transparent Dishonesty: Front-Running Attacks on Blockchain. In Andrea Bracciali, Jeremy Clark, Federico Pintore, Peter B. Rønne, and Massimiliano Sala, editors, Financial Cryptography and Data Security, pages 170–189, Cham, 2020. Springer International Publishing.

[26] Prastudy Fauzi, Sarah Meiklejohn, Rebekah Mercer, and Claudio Orlandi. Quisquis: A New Design for Anonymous Cryptocurrencies. 11921:649–678, 2019.

[27] Juan Garay, Aggelos Kiayias, and Nikos Leonardos. The Bitcoin Backbone Protocol: Analysis and Applications. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 281–310. Springer, 2015.

[28] Adem Efe Gencer, Soumya Basu, Ittay Eyal, Robbert Van Renesse, and Emin Gün Sirer. Decentralization in Bitcoin and Ethereum Networks. arXiv preprint arXiv:1801.03998, 2018.

[29] Arthur Gervais, Ghassan O. Karame, Karl Wüst, Vasileios Glykantzis, Hubert Ritzdorf, and Srdjan Capkun. On the Security and Performance of Proof of Work Blockchains. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 3–16. ACM, 2016.

[30] Arthur Gervais, Hubert Ritzdorf, Ghassan O. Karame, and Srdjan Capkun. Tampering with the Delivery of Blocks and Transactions in Bitcoin. In Conference on Computer and Communications Security, pages 692–705. ACM, 2015.

[31] Ethan Heilman, Alison Kendler, Aviv Zohar, and Sharon Goldberg. Eclipse Attacks on Bitcoin’s Peer-to-Peer Network. In 24th USENIX Security Symposium (USENIX Security 15), pages 129–144, 2015.

[32] Sebastian Henningsen, Daniel Teunis, Martin Florian, and Björn Scheuermann. Eclipsing Ethereum Peers with False Friends. In 2019 IEEE European Symposium on Security and Privacy Workshops (EuroS&PW), pages 300–309. IEEE, 2019.

[33] Eyal Hertzog, Guy Benartzi, and Galia Benartzi. Bancor Protocol, 2017.

[34] Robert A. Jarrow. Market Manipulation, Bubbles, Corners, and Short Squeezes. Journal of Financial and Quantitative Analysis, 27(3):311–336, 1992.

[35] Ghassan O. Karame, Elli Androulaki, and Srdjan Capkun. Double-Spending Fast Payments in Bitcoin. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, pages 906–917. ACM, 2012.

[36] Mahimna Kelkar, Fan Zhang, Steven Goldfeder, and Ari Juels. Order-Fairness for Byzantine Consensus. Cryptology ePrint Archive, Report 2020/269, 2020. https://eprint.iacr.org/2020/269.

[37] Seoung Kyun Kim, Zane Ma, Siddharth Murali, Joshua Mason, Andrew Miller, and Michael Bailey. Measuring Ethereum Network Peers. In Proceedings of the Internet Measurement Conference 2018, pages 91–104. ACM, 2018.

[38] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. Hawk: The Blockchain Model of Cryptography and Privacy-Preserving Smart Contracts. In IEEE Symposium on Security and Privacy, pages 839–858, 2016.

[39] Aurora Labs. IDEX: A Real-Time and High-Throughput Ethereum Smart Contract Exchange. Technical report, January 2019.

[40] Kevin Liao and Jonathan Katz. Incentivizing Blockchain Forks via Whale Transactions. In International Conference on Financial Cryptography and Data Security, pages 264–279. Springer, 2017.

[41] Tom C.W. Lin. The New Market Manipulation. Emory LJ, 66:1253, 2016.

[42] Xuan Luo, Wei Cai, Zehua Wang, Xiuhua Li, and C.M. Victor Leung. A Payment Channel Based Hybrid Decentralized Ethereum Token Exchange. In 2019 IEEE International Conference on Blockchain and Cryptocurrency (ICBC), pages 48–49. IEEE, 2019.

[43] MakerDAO. Intro to the OasisDex Protocol, September 2019. Accessed November 12, 2019, https://github.com/makerdao/developerguides/blob/master/Oasis/intro-to-oasis/intro-to-oasis-maker-otc.md.

[44] Yuval Marcus, Ethan Heilman, and Sharon Goldberg. Low-Resource Eclipse Attacks on Ethereum’s Peer-to-Peer Network. IACR Cryptology ePrint Archive, 2018(236), 2018.

[45] Vasilios Mavroudis and Hayden Melton. Libra: Fair Order-Matching for Electronic Financial Exchanges. arXiv preprint arXiv:1910.00321, 2019.

[46] Patrick McCorry, Alexander Hicks, and Sarah Meiklejohn. Smart Contracts for Bribing Miners. In International Conference on Financial Cryptography and Data Security, pages 3–18. Springer, 2018.

[47] Albert J. Menkveld. The Economics of High-Frequency Trading: Taking Stock. Annual Review of Financial Economics, 8:1–24, 2016.

[48] Satoshi Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System, 2008.

[49] Kaihua Qin, Liyi Zhou, Benjamin Livshits, and Arthur Gervais. Attacking the DeFi Ecosystem with Flash Loans for Fun and Profit. arXiv preprint arXiv:2003.03810, 2020.

[50] Eli Ben Sasson, Alessandro Chiesa, Christina Garman, Matthew Green, Ian Miers, Eran Tromer, and Madars Virza. Zerocash: Decentralized Anonymous Payments from Bitcoin. In Security and Privacy (SP), 2014 IEEE Symposium on, pages 459–474. IEEE, 2014.

[51] Slippage. Slippage - Investopedia, 2019.

[52] Uniswap.io, 2018. Accessed November 12, 2019, https://docs.uniswap.io/.

[53] Gavin Wood. Ethereum: A Secure Decentralised Generalised Transaction Ledger. Ethereum Project Yellow Paper, 2014.

[54] Jiahua Xu and Benjamin Livshits. The Anatomy of a Cryptocurrency Pump-and-Dump Scheme. In 28th USENIX Security Symposium (USENIX Security 19), pages 1609–1625, 2019.

### Appendix A: Sandwich Attack Details

In the following, we assume that a victim \( V \) sends a transaction \( TV \) to trade \( \delta_V^x \) of \( X \) for \( \delta_V^y \) of \( Y \). The underlying AMM market starts with the initial state \( s_0 = (x_0, y_0) \). Equation 6 shows the transition in the AMM state after applying \( TV \) without unexpected slippage.

\[
s_0 \xrightarrow{\text{TransactXForY}(\delta_V^x)} (x^*, y^*),
\]
where
\[
x^* = x_0 + \delta_V^x,
\]
\[
y^* = y_0 - \left( \delta_V^y + c_y(s_0, \delta_V^x) \right).
\]

#### A. Liquidity Taker Attacks Taker

We assume that the adversary \( A \) has an initial state \( (\delta_{A1}^x, 0) \) and attacks by emitting transactions \( TA1 \) and \( TA2 \).

- **TA1**: A front-running transaction, exchanges \( \delta_{A1}^y \) of \( Y \) and is planned to execute before \( TV \) (e.g., by paying a higher transaction fee than \( TV \)). This results in the state changes shown in Equations 8 and 9.
\[
s_0 \xrightarrow{\text{TransactXForY}(\delta_{A1}^x)} s_1 = (x_1, y_1),
\]
where
\[
x_1 = x_0 + \delta_{A1}^x,
\]
\[
y_1 = y_0 - \left( \delta_{A1}^y + c_y(s_0, \delta_{A1}^x) \right).
\]

- **TV**: A victim transaction modifies the state as per Equations 10 and 11.
\[
s_1 \xrightarrow{\text{TransactXForY}(\delta_V^x)} s_2 = (x_2, y_2),
\]
where
\[
x_2 = x_1 + \delta_V^x,
\]
\[
y_2 = y_1 - \left( \delta_V^y + c_y(s_1, \delta_V^x) \right).
\]

- **TA2**: A back-running transaction exchanges \( \delta_{A2}^y \) of \( Y \) for \( \delta_{A2}^x \) of \( X \) and is planned to execute after \( TV \) (e.g., by paying a lower transaction fee than \( TV \)). \( TA2 \) effectively closes the adversary's position that was opened by \( TA1 \) (cf. Equations 12 and 13).
\[
s_2 \xrightarrow{\text{TransactXForY}(\delta_{A2}^y)} s_3 = (x_3, y_3),
\]
where
\[
x_3 = x_2 - \delta_{A2}^x,
\]
\[
y_3 = y_2 + \delta_{A2}^y.
\]

The corresponding profit is determined by comparing the input from \( TA1 \) and the output from \( TA2 \) of asset \( X \) (cf. Equation 14).
\[
\text{profit} = \delta_{A2}^x - \delta_{A1}^x.
\]

After the attack, the state of the adversary becomes \( (\delta_{A2}^x, 0) \). Provided the profit exceeds the costs (e.g., transaction fees and equipment costs), a rational adversary would undertake the attack.

#### B. Liquidity Provider Attacks Taker

Let \( (x_N, y_N) \) denote the state of an AMM exchange at block \( N \in \mathbb{Z} \), where \( x_N \) and \( y_N \) are the amounts of assets \( X \) and \( Y \) in the liquidity pool (cf. Definition 1). The liquidity provider owns a share \( L \in [0, 1] \) of the liquidity if it deposits \( \delta_{x,N} = \frac{x_N}{1-L} \) of asset \( X \) and \( \delta_{y,N} = \frac{y_N}{1-L} \) of asset \( Y \) into the liquidity pool. We use \( Z_N(x, y) \) to denote the USD value of assets at block \( N \), where \( x \) is the amount of asset \( X \) and \( y \) is the amount of asset \( Y \). Given two blockchain blocks \( m \) and \( n \), where the respective AMM states differ, the deposit of \( z_m = Z_m(x_m, y_m) \) at block \( m \), or \( z_n = Z_n(x_n, y_n) \) at block \( n \), both result in a share of \( L \) liquidity in the respective market \( X/Y \). For the following section, we set \( z_m > z_n \).

1. **Attack Profitability**: We proceed by defining profitability for an adversary. Let \( L_x, L_y \in [0, 1) \) denote the shares of the liquidity provider. The adversary's profit is determined by the difference in the USD value of the deposited assets at different blocks.