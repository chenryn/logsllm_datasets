### Permission Changes and Observations in the Android System

#### CHANGE NETWORK STATE Permission
In our study, we discovered a specific permission, `CHANGE_NETWORK_STATE`, which was previously categorized as an appop (application operation) permission in Android 6.0. However, with the release of Android 6.0.1 (still within API level 23), its protection level was relaxed to "normal."

#### Development Permissions
Development permissions, marked with the `FLAG_DEVELOPMENT` flag, are typically at the signature protection level but can be granted to third-party applications using the `pm grant` shell command. In Android 6.0, the code for granting and revoking development permissions was merged with the code handling runtime permissions. However, these groups differ in several ways:
- Development permissions are granted simultaneously to all system users, whereas runtime permissions are only granted to the current user.
- Development permissions are not displayed in the user interface, unlike runtime permissions.

#### Pre-23 Permissions
Permissions marked with the `FLAG_PRE23` flag are automatically granted to legacy applications (those targeting an API level below 23) that request them.

#### Installer and Verifier Permissions
Signature permissions, such as those required for installers and verifiers, are automatically granted to apps marked as required installers or verifiers.

#### Deprecated `signature|system` Protection Level
Although the `signature|system` protection level is now deprecated, many permissions still use this value. Notably, nine new permissions with this level appeared in API 23. This inconsistency may be due to a lack of communication among developer groups responsible for different modules. We have submitted patches to AOSP to address these issues. As of now, two patches have been merged into the master branch, three have been verified, and five are under code review.

#### Reduction in Dangerous Permissions
In Android 6.0, the number of dangerous permissions was significantly reduced. Twenty-two dangerous permissions had their protection level lowered to "normal." This means that users no longer have control over these permissions, as they are automatically granted upon installation and cannot be checked or revoked at runtime. For example, the `INTERNET` permission, which controls app access to the Internet and has been widely used by malware, is now automatically granted.

From a security perspective, this change is controversial because many previously sensitive permissions are now granted automatically. The demotion of 22 permissions, including NFC, BLUETOOTH, WRITE_PROFILE, and MANAGE_ACCOUNTS, highlights the instability in the Android security architecture.

### Interesting Findings

#### Protection Level Flags
Developers cannot use protection level flags in their third-party apps. An application containing permission declarations with protection level flags will fail validation checks during compilation. Developers can only select one of the four main protection levels: normal, dangerous, signature, and signature|system. However, similar checks are not performed during app installation, and it is possible to add a protection level flag through app repackaging tools like Apktool. IDEs should conform to the new permission specifications, removing the `signature|system` flag and allowing developers to assign protection level flags to custom permissions.

In Android 6.0, the `FLAG_PREINSTALLED` flag was added, relaxing the strict division between privileged and other signature permissions. This allows all system apps to receive permissions with this flag set.

#### Additional Flags
There are no restrictions on assigning additional flags to custom permissions. For instance, a developer can declare a permission with the `FLAG_COSTS_MONEY` flag, which on older systems would display a special coins icon. Similarly, the `FLAG_HIDDEN` flag can be used to conceal a permission from the list of dangerous permissions. While the malicious use of these flags is uncertain, they violate the principle of least privilege.

Moreover, two out of three flags can be set by a developer, while the `FLAG_INSTALLED` flag can only be set by the operating system. This behavior is considered a security anti-pattern, as it combines publicly accessible data with private information.

#### Hard-Coded Screens for Granting Permissions
Every permission group defined in the core `AndroidManifest.xml` file has its own screen for granting and revoking permissions. However, permission groups defined in system or third-party packages do not have dedicated screens. Instead, they are collected on the "Additional permissions" screen without separation between groups and single permissions. These groups and single permissions will only be displayed if the corresponding package targets API 23.

#### Permission Groups
There are no restrictions on adding custom permissions to system permission groups. If a custom permission has the dangerous protection level, it is granted along with all permissions from the same group when requested at runtime. If the custom permission is not dangerous, the remaining permissions from the group are not automatically granted. Therefore, there is no reason to group non-dangerous permissions. We analyzed system non-dangerous permissions and found six package permissions and two core permissions assigned to groups. For example, the `USE_FINGERPRINT` permission, which has a normal protection level, is assigned to the `SENSORS` group, while the `ACCESS_IMS_CALL_SERVICE` permission, which has a `signature|system` level, is assigned to the `PHONE` group. These assignments seem unnecessary and should be fixed in future releases.

#### Permission Declaration Duplicates
During our analysis, we found duplicated permission declarations within AOSP. The most frequent duplicates are the `INSTALL_SHORTCUT` and `UNINSTALL_SHORTCUT` permissions, declared in both the core and package manifest files. Before API 19, these permissions were not declared at the core level, but a bug led to their addition. Interestingly, these permissions have different protection levels in the core and package manifest files: normal in the former and dangerous in the latter. Additionally, in API 17, the declarations of `SET_SCREEN_COMPATIBILITY` and `CHANGE_CONFIGURATION` were duplicated even within the core file. This highlights the need for refactoring or using static analyzers to prevent inconsistencies.

### Related Work
Previous studies have investigated various aspects of the Android permission system, emphasizing its importance in the Android security model. Many studies have focused on improving the permission system design and proposing more secure or usable solutions. Some researchers have argued for finer granularity in permissions. In the absence of reliable documentation from Google, researchers have provided means to link permissions to precise platform APIs (permission maps). 

Wei et al. [49] studied the evolution of the permission system, showing that it has become more complex over time, with an increase in the number of overprivileged apps and dangerous permissions. Au et al. [23] conducted a longitudinal study of Android permissions, focusing on sensitive API and permission changes from Android 2.2 to 4.0. Our study builds on these works by surveying more recent platform versions and providing an updated view of the permission system, including runtime permissions.

### Conclusion
In this paper, we conducted a comprehensive study of the Android permission system, driven by the need to understand new runtime permissions. We discovered significant changes in the permission system since its initial description. To help security researchers and Android developers, we presented an updated view of the permission system, detailing its new design and major changes over the last six years. Our findings highlight the dynamic complexity of the Android permission system and emphasize the need for ongoing attention and improvement.

### References
1. Android Open Source Project. <http://source.android.com/>. Accessed 31 Mar 2016
2. Commit 2af5708: Add per UID control to app ops. <https://android.googlesource.com/platform/frameworks/base/+/2af5708>
3. Commit 2ca2c87: More adjustments to permissions. <https://android.googlesource.com/platform/frameworks/base/+/2ca2c87>
4. Commit 33f5ddd: Add permissions associated with app ops. <https://android.googlesource.com/platform/frameworks/base/+/33f5ddd>
5. Commit 3e7d977: Grant installer and verifier install permissions robustly. <https://android.googlesource.com/platform/frameworks/base/+/3e7d977>
6. Commit 4516798: Moving launcher permission to framework. <https://android.googlesource.com/platform/frameworks/base/+/4516798>
7. Commit 6d2c0e5: Remove not needed contacts related permissions. <https://android.googlesource.com/platform/frameworks/base/+/6d2c0e5>
8. Commit a90c8de: Add new “preinstalled” permission flag. <https://android.googlesource.com/platform/frameworks/base/+/a90c8de>
9. Commit ccbf84f: Some system apps are more system than others. <https://android.googlesource.com/platform/frameworks/base/+/ccbf84f>
10. Commit cfbfafe: Additional permissions aren’t properly disabled after toggling them off. <https://android.googlesource.com/platform/frameworks/base/+/cfbfafe>
11. Commit de15eda: Scope WRITE_SETTINGS and SYSTEM_ALERT_WINDOW to an explicit toggle to enable in Settings. <https://android.googlesource.com/platform/frameworks/base/+/de15eda>
12. Commit e639da7: New development permissions. <https://android.googlesource.com/platform/frameworks/base/+/e639da7>
13. Dashboards. <http://goo.gl/mFciT7>. Accessed 31 Mar 2016
14. Google says Android has 1.4 billion active users. <http://goo.gl/aUuUNw>. Accessed 31 Mar 2016
15. Microsoft Excel. <https://play.google.com/store/apps/details?id=com.microsoft.office.excel>. Accessed 31 Mar 2016
16. Microsoft PowerPoint. <https://play.google.com/store/apps/details?id=com.microsoft.office.powerpoint>. Accessed 31 Mar 2016
17. Not just for phones and tablets: what other devices run Android? <http://goo.gl/kQ4Pi8>. Accessed 31 Mar 2016
18. Play store permissions change opens door to rogue apps. <http://goo.gl/nJCwoY>. Accessed 31 Mar 2016
19. Requesting permissions at run time. <http://developer.android.com/training/permissions/requesting.html>
20. Smartphone OS market share, 2015 Q2. <http://goo.gl/WQwfZO>. Accessed 31 Mar 2016
21. Arp, D., Speitzenbarth, M., Hubner, M., Gascon, H., Rieck, K.: DREBIN: effective and explainable detection of Android malware in your pocket. In: Proceedings of NDSS (2014)
22. Au, K., Zhou, Y.F., Huang, Z., Gill, P., Lie, D.: Short paper: a look at smartphone permission models. In: Proceedings of SPSM (2011)
23. Au, K.W.Y., Zhou, Y.F., Huang, Z., Lie, D.: PScout: analyzing the Android permission specification. In: Proceedings of CCS (2012)
24. Backes, M., Bugiel, S., Derr, E., Weisgerber, S., McDaniel, P., Octeau, D.: On demystifying the Android application framework: re-visiting Android permission specification analysis. In: Poster Session of IEEE EuroS&P (2016)
25. Barrera, D., Kayacik, H.G., van Oorschot, P.C., Somayaji, A.: A methodology for empirical analysis of permission-based security models and its application to Android. In: Proceedings of CCS (2010)
26. Bartel, A., Klein, J., Le Traon, Y., Monperrus, M.: Automatically securing permission-based software by reducing the attack surface: an application to Android. In: Proceedings of ASE (2012)
27. Bugiel, S., Davi, L., Dmitrienko, A., Fischer, T., Reza-Sadeghi, A., Shastry, B.: Towards taming privilege-escalation attacks on Android. In: Proceedings of NDSS (2012)
28. Chen, K.Z., Johnson, N., D’Silva, V., Dai, S., MacNamara, K., Magrino, T., Wu, E., Rinard, M., Song, D.: Contextual policy enforcement in Android applications with permission event graphs. In: Proceedings of NDSS (2013)
29. Conti, M., Crispo, B., Fernandes, E., Zhauniarovich, Y.: CRêPE: a system for enforcing fine-grained context-related policies on Android. IEEE Trans. Inf. Forensics Secur. 7(5), 1426–1438 (2012)
30. Elenkov, N.: Android Security Internals: An In-Depth Guide to Android’s Security Architecture, 1st edn. No Starch Press, San Francisco (2014)
31. Enck, W., Ongtang, M., McDaniel, P.: Understanding Android security. IEEE Secur. Priv. Mag. 7(1), 50–57 (2009)
32. Enck, W., Ongtang, M., McDaniel, P.: On lightweight mobile phone application certification. In: Proceedings of CCS (2009)
33. Fang, Z., Han, W., Li, D., Guo, Z., Guo, D., Wang, X.S., Qian, Z., Chen, H.: revDroid: code analysis of the side effects after dynamic permission revocation of Android apps. In: Proceedings of ASIACCS (2016)
34. Fang, Z., Han, W., Li, Y.: Permission based Android security: issues and countermeasures. Comput. Secur. 43, 205–218 (2014)
35. Felt, A.P., Chin, E., Hanna, S., Song, D., Wagner, D.: Android permissions demystified. In: Proceedings of CCS (2011)
36. Felt, A.P., Ha, E., Egelman, S., Haney, A., Chin, E., Wagner, D.: Android permissions: user attention, comprehension, and behavior. In: Proceedings of SOUPS (2012)
37. Fragkaki, E., Bauer, L., Jia, L., Swasey, D.: Modeling and enhancing Android’s permission system. In: Proceedings of ESORICS (2013)
38. Fratantonio, Y., Bianchi, A., Robertson, W., Egele, M., Kruegel, C., Kirda, E., Vigna, G.: On the security and engineering implications of finer-grained access controls for Android developers and users. In: Almgren, M., Gulisano, V., Maggi, F. (eds.) DIMVA 2015. LNCS, vol. 9148, pp. 282–303. Springer, Heidelberg (2015)
39. Gadyatskaya, O., Massacci, F., Zhauniarovich, Y.: Security in the Firefox OS and Tizen mobile platforms. IEEE Comput. 47(6), 57–63 (2014)
40. Gibler, C., Crussell, J., Erickson, J., Chen, H.: AndroidLeaks: automatically detecting potential privacy leaks in Android applications on a large scale. In: Katzenbeisser, S., Weippl, E., Camp, L.J., Volkamer, M., Reiter, M., Zhang, X. (eds.) Trust 2012. LNCS, vol. 7344, pp. 291–307. Springer, Heidelberg (2012)
41. Jeon, J., Micinski, K.K., Vaughan, J.A., Fogel, A., Reddy, N., Foster, J.S., Millstein, T.: Dr. Android and Mr. Hide: fine-grained permissions in Android applications. In: Proceedings of SPSM (2012)
42. Murphy, M.: Libraries and dangerous permissions. <https://goo.gl/NJAjMx>. Accessed 25 June 2016
43. Murphy, M.: Runtime permissions, files, and ACTION_SEND. <https://goo.gl/slhHoI>. Accessed 25 June 2016
44. Murphy, M.: You cannot hold non-existent permissions. <https://goo.gl/nyDjUj>. Accessed 25 June 2016
45. Nauman, M., Khan, S., Zhang, X.: Apex: extending Android permission model and enforcement with user-defined runtime constraints. In: Proceedings of ASIACCS (2010)
46. Pandita, R., Xiao, X., Wang, W., Enck, W., Xie, T.: WHYPER: towards automating risk assessment of mobile applications. In: Proceedings of USENIX Security (2013)
47. Singh, K.: Practical context-aware permission control for hybrid mobile applications. In: Stolfo, S.J., Stavrou, A., Wright, C.V. (eds.) RAID 2013. LNCS, vol. 8145, pp. 307–327. Springer, Heidelberg (2013)
48. Vidas, T., Christin, N., Cranor, L.F.: Curbing Android permission creep. In: Proceedings of W2SP (2011)
49. Wei, X., Gomez, L., Neamtiu, I., Faloutsos, M.: Permission evolution in the Android ecosystem. In: Proceedings of ACSAC (2012)
50. Wijesekera, P., Baokar, A., Hosseini, A., Egelman, S., Wagner, D., Beznosov, K.: Android permissions remystified: a field study on contextual integrity. In: Proceedings of USENIX Security (2015)
51. Xing, L., Pan, X., Wang, R., Yuan, K., Wang, X.: Upgrading your Android, elevating my malware: privilege escalation through mobile OS updating. In: Proceedings of S&P (2014)
52. Zhang, Y., Yang, M., Xu, B., Yang, Z., Gu, G., Ning, P., Wang, X.S., Zang, B.: Vetting undesirable behaviors in Android apps with permission use analysis. In: Proceedings of CCS (2013)
53. Zhauniarovich, Y., Ahmad, M., Gadyatskaya, O., Crispo, B., Massacci, F.: StaDynA: addressing the problem of dynamic code updates in the security analysis of Android applications. In: Proceedings of CODASPY (2015)
54. Zhauniarovich, Y., Russello, G., Conti, M., Crispo, B., Fernandes, E.: MOSES: supporting and enforcing security profiles on smartphones. IEEE Trans. Dependable Secure Comput. 11(3), 211–223 (2014)
55. Zhou, Y., Jiang, X.: Dissecting Android malware: characterization and evolution. In: Proceedings of S&P (2012)