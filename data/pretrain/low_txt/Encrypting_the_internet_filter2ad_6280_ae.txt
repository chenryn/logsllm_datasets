### OpenSSL 1.0 Performance and Optimization

#### Introduction
This document discusses the performance improvements achieved by our optimized code, particularly in RSA 1024 private decryption operations, using both Karatsuba and schoolbook multiplication techniques. The optimizations include an efficient Montgomery reduction method that significantly reduces the number of 'mov' instructions between registers and memory.

#### Performance Metrics
- **Our Code (Karatsuba)**
  - 1463 RSA 1024 private decrypt operations per second per 3 GHz processor core.
- **Our Code (Schoolbook)**
  - 2143 RSA 1024 private decrypt operations per second per 3 GHz processor core.
- **OpenSSL 1.0**
  - 1893 RSA 1024 private decrypt operations per second per 3 GHz processor core.

#### Montgomery Reduction
Our implementation of Montgomery reduction uses optimized assembly code, which reduces the number of 'mov' operations between registers and memory. This results in a single-step Montgomery reduction, as opposed to the word-by-word reduction used in OpenSSL. Our approach reduces Montgomery reduction to approximately 1.5 big number multiplications, with the multiplications performed using our optimized schoolbook code.

#### Performance on Different Processors
- **Pentium R4 Architecture**
  - Original: 881 RSA 1024 private decrypt operations per second per 3 GHz core.
  - Optimized: 981 RSA 1024 private decrypt operations per second per core.
  - Multiplication between 512-bit integers: 806 clock cycles.
  - Note: The Pentium R4 architecture is slower due to 64-bit mode emulation.

### TLS Session Level Performance

#### Measurement Methods
We use two methods to measure the TLS session level performance:
1. **Oprofile [9] and Microbenchmark Tool**
   - We use Oprofile and a microbenchmark tool to obtain a cost breakdown of a typical TLS banking session with a file size of 140KB.
   - The microbenchmark tool uses an optimal table lookup AES implementation.

#### Cost Breakdown
- **RSA 1024 Asymmetric Key Operation**: 2.17 million clocks.
- **AES-128 CBC Operation for 140KB Data File**: 2.30 million clocks.
- **HMAC-SHA1 Operation and Other Overheads**: 1.18 + 0.73 million clocks.

By optimizing both symmetric and asymmetric key operations, we impact nearly 90% (5.65 out of 6.38 million clocks) of the crypto overhead for the overall TLS session cost.

#### Performance Improvements
- **Optimizing RSA and Using AES Instructions**
  - Improvement: 1.67x over non-optimized TLS implementation.
  - AES-128 remains in CBC mode.

- **Replacing Cipher Suite with AES-128 GCM**
  - Improvement: 2.43x over the original setup.
  - AES-128 GCM provides the best performance results.

### Benchmarking with OpenSSL `s_time` Command

- **Cipher Suite: RSA-1024, AES-128 GCM**
  - Connections per second: 1200
- **Cipher Suite: RSA-1024, AES-128 CBC, HMAC-SHA1 (Optimized)**
  - Connections per second: 770
- **Cipher Suite: RSA-1024, AES-128 CBC, HMAC-SHA1 (Non-Optimized)**
  - Connections per second: 200

The performance gain from our optimizations is 6x, allowing many more connections to be supported on a given server.

### Encrypting the Internet

#### Processor Cores for High-Speed Links
- **1 Gbps Link**
  - State-of-the-Art: 0.22 Gbps, 5 cores
  - Our Technologies: 0.86 Gbps, 2 cores
  - AES-128 GCM: 1.34 Gbps, 1 core

- **10 Gbps Link**
  - State-of-the-Art: 0.22 Gbps, 46 cores
  - Our Technologies: 0.86 Gbps, 12 cores
  - AES-128 GCM: 1.34 Gbps, 8 cores

Using general-purpose hardware with our instruction extensions, it is possible to achieve equivalent functionality to a dedicated appliance, supporting 9,600 transactions per second at 10 Gbps while leaving four cores for application processing.

### Cost Efficiency
- **Dedicated Appliances**: $18,850 to $36,990
- **General Purpose Blade Server**: $3,999
- **Normalized Cost**
  - Hypothetical Appliance: $4 per SSL transaction
  - General Purpose Blade Server: 28 cents per SSL transaction

### Conclusions
In this paper, we argue for the need to encrypt and authenticate Internet transactions. We analyzed the performance of cryptographic algorithms and proposed techniques to speed them up significantly. Our solution primarily involves adding small hardware extensions to general-purpose architectures. We demonstrated the efficiency of using general-purpose hardware for SSL/TLS traffic processing at 10 Gbps line rates.

### Future Work
- **Public Key Schemes**: Further innovations for 128-bit security.
- **NIST Hash Competition**: Accelerating the winning SHA-3 algorithm.
- **Public Trials**: Validating our results through public trials.

### References
[1] “Advanced Encryption Standard”. Website. http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf.
[2] “Cisco WebVPN Services Module - Cryptographic Accelerator”. Website, hardware.com. http://us.hardware.com/store/cisco/WS-SVC-WEBVPN-K9=/campaign/1-85819001.
[3] “Crypto++”. Crypto++ Website. http://www.cryptopp.com.
[4] “Data-stealing Malware on the Rise, Solutions to Keep Businesses and Consumers Safe”. Website. http://us.trendmicro.com/imperia/md/content/us/pdf/threats/securitylibrary/data_stealing_malware_focus_report_-_june_2009.pdf.
[5] The Galois/Counter Mode of Operation (GCM). Website, NIST. http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-spec.pdf.
[6] “Intel AVX, Intel Software Network”. Intel Website. http://software.intel.com/en-us/avx/.
[7] “Internet Passes 600,000 SSL Sites”. Website, SSL Shopper. http://www.sslshopper.com/article-internet-passes-600000-ssl-sites.html/.
[8] “OpenSSL Library”. OpenSSL Website. http://www.openssl.org.
[9] “OProfile”. OProfile Website. http://oprofile.sourceforge.net/news/.
[10] “PowerEdge Rack Servers”. Website, dell.com. http://www.dell.com/us/en/gen/servers/rack_optimized/cp.aspx?refid=rack_optimized&s=gen.
[11] “SSL Acceleration and Offloading: What Are the Security Implications?”. Website, WindowSecurity.com. http://www.windowsecurity.com/articles/SSL-Acceleration-Offloading-Security-Implications.html.
[12] “SSL Decryption and Re-encryption”. Website, zeus.com. http://www.zeus.com/products/traffic-manager/secure/ssl.html.
[13] “The Total Number of Web Sites on Earth”. Website, Get Netted. http://www.wlug.net/the-total-number-of-websites-on-earth/.
[14] “TLS 1.2 Open Source Release”. Website. http://www.mail-archive.com/openssl-dev@openssl.org/msg27172.html.
[15] “Two Year Study of Global Internet Traffic, NANOG47”. Website, Internet Society. http://isoc-dc.org/wordpress/?p=920.
[16] P. Barrett. “Implementing the Rivest Shamir and Adleman Public Key Encryption Algorithm on a Standard Digital Signal Processor”. Masters Thesis, University of Oxford, UK, 1986.
[17] A. Bosselaers, R. Govaerts, and J. Vandewalle. “Comparison of Three Modular Reduction Functions”. Proceedings, Advances in Cryptology (CRYPTO 1993), 1993.
[18] D. Canright. “A Very Compact S-Box for AES”. Proceedings, Workshop on Cryptographic Hardware and Embedded Systems (CHES 2005), 2005.
[19] A. J. Elbirt. “Fast and Efficient Implementation of AES via Instruction Set Extensions”. Proceedings, 21st International Conference on Advanced Information Networking and Applications Workshops, 2007.
[20] N. Farrell. “Google Tightens Gmail Security”. Website, January 2010. http://www.theinquirer.net/inquirer/news/1586138/google-tightens-gmail-security.
[21] M. Feldhofer, J. Wolkerstorfer, and V. Rijmen. “AES Implementation on a Grain of Sand”. IEE Proceedings on Information Security, 2005.
[22] D. Feldmeier. “Fast Software Implementation of Error Detection Codes”. IEEE Transactions on Networking, pages 640–651, 1995.
[23] A. M. Fiskiran and R. B. Lee. “On Chip Lookup Tables for Fast Symmetric Key Encryption”. Proceedings, IEEE International Conf. on Application-Specific Systems, Architectures and Processors, pages 356–363, 2005.
[24] K. Grewal and M. Miller. “Next Generation Scalable, Cost-effective E2E Security”. RSA Conference, 2010.
[25] S. Gueron. “Intel’s New AES Instructions for Enhanced Performance and Security”. Proceedings, 16th International Workshop on Fast Software Encryption (FSE 2009), LNCS 5665, pages 51 – 66, 2009.
[26] A. Hodjat, D. Hwang, B.-C. Lai, K. Tiri, and I. Verbauwhede. “A 3.84 Gbits/s AES Crypto Coprocessor with Modes of Operation in a 0.18-μm CMOS Technology”. Proceedings, 15th ACM Great Lakes Symposium on VLSI, pages 60–63, 2005.
[27] A. Hodjat and I. Verbauwhede. “A 21.54 Gbits/s Fully Pipelined AES Processor on FPGA”. Proceedings, 12th IEEE Symposium on Field-Programmable Custom Computing Machines (FCCM 2004), pages 308–309, 2005.
[28] D. Knuth. “Seminumerical Algorithms”. The Art of Computer Programming, Addison-Wesley, 2, 1997.
[29] C. K. Koc. “Analysis of Sliding Window Techniques for Exponentiation”. Computers and Mathematics with Application, 30(10):17–24, 1995.
[30] C. K. Koc, T. Acar, and B. S. Kaliski. “Analyzing and Comparing Montgomery Multiplication Algorithms”. IEEE Micro, 16(3):26–33, 1996.
[31] M. Kounavis. “A New Method for Fast Integer Multiplication and its Application to Cryptography”. Proceedings, 2007 International Symposium on Performance Evaluation of Computer and Telecommunication Systems, 2007.
[32] M. Kounavis and L. Xu. “AES-NI: New Technology for Improving Encryption Efficiency and Enhancing Data Security in the Enterprise Cloud”. Intel Developer Forum, 2009. https://intel.wingateweb.com/us09/scheduler/sessions.do?searchGroup=9&searchGroupID=10133&profileItem_id=10004.
[33] D. McGrew. “An Interface and Algorithms for Authenticated Encryption”. Website, January 2008. http://www.faqs.org/rfcs/rfc5116.html.
[34] A. Menezes, P. Oorschot, and S. Vanstone. “Handbook of Applied Cryptography”. CRC Press, 1997.
[35] N. Mentens, L. Batina, B. Preneel, and I. Verbauwhede. “A Systematic Evaluation of Compact Hardware Implementations for the Rijndael S-Box”. Proceedings of CT-RSA 2005, 2005.
[36] P. Montgomery. “Implementing the Rivest Shamir and Adleman Public Key Encryption Algorithm on a Standard Digital Signal Processor”. Masters Thesis, University of Oxford, UK, 1986.
[37] P. Montogomery. “Five, Six and Seven-term Karatsuba-like Formulae”. IEEE Transactions on Computers, 2005.
[38] S. Moriokah and A. Satoh. “An Optimized S-Box Circuit Architecture for Low Power AES Design”. Proceedings, Workshop on Cryptographic Hardware and Embedded Systems (CHES 2002), pages 172–186, May 2002.
[39] K. K. Peretti. “Data Breaches: What the Underground World of Carding Reveals”. the Santa Clara Computer and High Technology Journal, 25(2):375 – 413, January 2009.
[40] C. Rebeiro, D. Selvakumar, and A. S. L. Devi. “Bitslice Implementation of AES”. Cryptology and Network Security, LNCS 4301, 2006.
[41] A. Rudra, P. K. Dubey, C. S. Jutla, V. Kumar, J. R. Rao, and P. Rohatgi. “Efficient Rijndael Encryption with Composite Field Arithmetic”. Proceedings, Workshop on Cryptographic Hardware and Embedded Systems (CHES 2001), pages 175 – 188, May 2001.
[42] A. Satoh, S. Moriokah, K. Takano, and S. Munetoh. “A Compact Rijndael Hardware Architecture with SBox Optimization”. Lecture Notes in Computer Science, LNCS 2248, pages 239–254, 2001.
[43] S. Schillace. “Default HTTPS Access for Gmail”. Website, January 2010. http://gmailblog.blogspot.com/2010/01/default-https-access-for-gmail.html.
[44] SecurityFocus. “Data Breach Costs Rise, Response Costs Fall”. Website, February 2009. http://www.securityfocus.com/brief/900.
[45] I. Verbauwhede, P. Schaumont, and H. Kuo. “Design and Performance Testing of a 2.29 Gb/s Rijndael Processor”. IEEE Journal of Solid-State Circuits, pages 569–572, 2003.
[46] A. Weimerskirch and C. Paar. “Generalizations of the Karatsuba Algorithm for Efficient Implementations. Technical Report, University of Ruhr, Bochum, Germany, 2003.
[47] A. Whitten. “HTTPS Security for Web Applications”. Website, June 2009. http://googleonlinesecurity.blogspot.com/2009/06/https-security-for-web-applications.html.
[48] J. Wolkerstorfer, E. Oswald, and M. Lamberger. “An ASIC Implementation of the AES SBoxes”. Proceedings, CT-RSA 2002, 2002.