### Acknowledgment of Security Weakness and Submission to Wi-Fi Alliance

Company employees acknowledged this security weakness and decided to submit it to the Wi-Fi Alliance, hoping that it would be addressed in the protocol standard. In the remainder of this section, we will discuss various mitigation strategies and patches at different layers.

### Defenses in Wi-Fi Technology

Unlike software-induced side channels, the timing channel introduced by Wi-Fi is inherently difficult to eliminate or mitigate, similar to recent vulnerabilities like Meltdown and Spectre in CPUs [35, 34]. One straightforward defense would be to make the Wi-Fi channel full-duplex. For instance, with frequency-division duplexing, different frequency sub-bands can be used for uplink and downlink traffic. However, this approach can potentially lead to low bandwidth utilization, as separate dedicated sub-bands must be pre-allocated, and real-world Internet traffic volume is not symmetric.

Although the IEEE 802.11ax working group has been considering the possibility of supporting in-band full-duplex communication [2], further research is needed to address real-world challenges such as backward compatibility [12, 30]. At this point, it is unclear when this technology will be widely deployed in practice, according to our discussions with the 802.11 working group.

### Defenses in TCP Stacks

As described in §2.2, the packet validation logic of the latest TCP specification inherently treats valid and invalid incoming packets differently, particularly in terms of whether a response should be generated. One solution is to revisit the specification and explore alternatives. Notably, all three major modern operating systems implement ACK number validation differently but have coexisted without major issues for a long time. This suggests some flexibility in the ACK number validation logic.

Ideally, no matter what ACK number an incoming packet has, it should either consistently respond or never respond. Assuming an incoming packet already has a valid sequence number, the constraints are:
1. If it is a data packet and its ACK number is in-window, a correct TCP receiver should always respond with an ACK (or delayed ACK).
2. When a pure ACK with a sequence number in-window and an ACK number in-window arrives, there should be no response (otherwise, an ACK war [6] may be triggered).

In other cases:
3. A data packet with an out-of-window ACK number.
4. A pure ACK with an out-of-window ACK number, their responses appear to be flexible in practice (see rows 2, 3, 13, 16, and 18 in Table 2 for the data packet case and rows 2, 3, 12, 13, and 18 for the pure ACK case).

Assuming an incoming packet already has an in-window sequence number, we can always force a response for a data packet and no response for a pure ACK packet, regardless of their ACK numbers. We plan to validate this idea by formally model checking the proposed changes together with legacy behaviors to ensure the absence of ACK wars.

Regarding sequence number validation, we hypothesize that the responses to receiving packets with valid and invalid sequence numbers can also be consistent. However, the implications must be evaluated carefully. A good strategy to consider is to rate-limit ACK responses generated for various types of incoming packets. Even if inconsistent, this would allow the differences in responses (e.g., one response vs. zero) to be small enough and impossible to measure. The same rate-limiting idea applies to connection identification, where packets are likely dropped by NAT or firewall if no connection is present, and some response will be triggered if there is an active connection.

### Defenses in the Application Layer

Clearly, HSTS and HTTPS will help ward off most serious web attacks, such as web cache poisoning. However, other TCP-level attacks (e.g., inferring the presence of a connection [18], byte counting [20], and connection reset [18]) could still be mounted by exploiting the vulnerability. HSTS and HTTPS can prevent only web cache poisoning attacks (application-layer attacks) but not TCP-level attacks.

Some versions of our attack also exploit features of browser implementations. Therefore, we believe that some mitigations can be made in the browser (i.e., making parsing of responses stricter) to complicate the ACK number inference step. The idea is that whenever the browser observes anything abnormal regarding the responses, e.g., malformed or longer than expected, it should immediately drop the connection and restart. A small tradeoff is that this may break some backward compatibility with non-standard-conforming web servers.

In terms of effectiveness in stopping web cache poisoning attacks, this approach helps Linux, as the attack now needs to fall back to a much slower version of the ACK number inference (likely tripling the time for a complete attack). Regarding Windows, although it defeats our first strategy to infer the ACK number by creating a malformed response, our alternative strategy remains unaffected. MacOS’s TCP stack implementation is so vulnerable that we will always favor the binary search on the ACK number over exploiting any browser-specific weaknesses. Finally, connection inference (privacy breach) and sequence number inference (byte counting and reset) attacks remain potent as they only rely on the TCP stack.

For the purpose of supporting further research to reproduce and mitigate the attack, we have open-sourced our implementation of the attack against different operating systems, which is now publicly available at [5].

### Related Work

We have described the most relevant work on various off-path TCP attacks in §2.3. In this section, we discuss a different set of related works.

#### Other Off-Path Side Channels

Besides the TCP sequence number, it has been shown that other types of information can be inferred by a blind off-path attacker [24, 33, 23, 48, 13, 49, 26, 41, 37]. Most of these side channels do not, in themselves, allow serious attacks. However, much of the research translates into measurement tools that can be useful. For example, Knockel et al. [33] demonstrate the use of a new per-destination IPID side channel that can leak the number of packets sent between two arbitrary hosts on several major operating systems. Alexander et al. [13] can infer the RTT between two arbitrary hosts through the shared SYN backlog. Qian et al. [41] used a global IPID side channel to measure directional port blocking. More recently, the Augur system [37] used the same IPID side channel to measure Internet censorship and connectivity disruption. The same side channel has also been used to count how many hosts are behind a NAT [15] and for other applications [21].

#### Side Channel Discovery and Defenses

Typically, when a specific type of vulnerability becomes known, there are many strategies to discover more concrete instances of them. For instance, static taint analysis has been applied to look for TCP packet counter side channels [19]. The problem is modeled as an information flow problem where the secret is the current sequence number, and the sink is the set of packet counters that report aggregated statistics to user space programs. If the secret sequence number can leak to the sink, it is flagged as a potential side channel. There may be false positives (due to the over-approximation of the static analysis) but should not have false negatives by design.

In the case of CPU cache side channels, symbolic execution has been applied to track the precise cache state over execution traces [47]. If the cache states can be different at any point in the trace with different secret inputs, the program is flagged to have leakage. Since the analysis is applied over concrete execution traces, the approach has no false positives (but may have false negatives). Unfortunately, the Wi-Fi side channel is not a software artifact and therefore cannot be discovered unless it is explicitly modeled and analyzed.

In terms of side channel defenses, there are various standard strategies such as perturbing the channel by injecting noise [7, 22, 45], and isolating the resources altogether [8, 32]. Unfortunately, for Wi-Fi, these standard techniques would mean introducing wireless latency (which hurts performance) or making the channel full-duplex, which, as discussed earlier, is challenging.

### Conclusions

To conclude, we have discovered a subtle yet fundamental side channel inherent in all generations of Wi-Fi or IEEE 802.11 technology because they are half-duplex. Furthermore, we show that the timing channel is reliable and amplifiable, and we have implemented a real off-path TCP exploit in practice, allowing attackers to inject data into a TCP connection and force the browser to cache malicious objects. Our study reveals that this novel attack affects all three most popular operating systems: macOS, Windows, and Linux. We provide a thorough analysis and evaluation of the proposed attack under different router/network/OS/browser combinations. Finally, we propose possible defenses against this attack.

### Acknowledgment

We wish to thank Zakir Durumeric (our shepherd) and the anonymous reviewers for their valuable comments and suggestions. Many thanks to Prof. Srikanth V. Krishnamurthy, Mart Molle, and Zhuo Lv who educated us on the fundamentals of wireless networks. We are also fortunate to work with the IEEE 802.11 working group, specifically Dorothy Stanley, Daniel Harkins, and Jouni Malinen, to discuss the side channel and are grateful for their insights. This work was supported by the National Science Foundation under Grant No. 1464410, 1652954, and 1646641.

### References

[1] Blind TCP/IP Hijacking is Still Alive. http://phrack.org/issues/64/13.html.
[2] In-band Full Duplex Radios and System Performance. https://mentor.ieee.org/802.11/dcn/15/11-15-0043-01-00ax-in-band-full-duplex-radios-and-system-performance.pdf.
[3] Off-path tcp exploit: Demos of web cache poisoning attacks. https://sites.google.com/view/tcp-off-path-exploits/.
[4] RFC 793 - Transmission Control Protocol. http://tools.ietf.org/html/rfc793.
[5] TCP Exploit. https://github.com/seclab-ucr/tcp-exploit.
[6] [tcpm] Mitigating TCP ACK loop (“ACK storm”) DoS attacks. https://www.ietf.org/mail-archive/web/tcpm/current/msg09450.html.
[7] [patch net] Linux TCP flaw lets 'anyone' hijack internet traffic, 2016.
[8] [patch net] TCP: Enable per-socket rate limiting of all 'challenge acks', 2016.
[9] About the security content of macOS High Sierra 10.13, 2017.
[10] About the security content of macOS High Sierra 10.13.1, Security Update 2017-001 Sierra, and Security Update 2017-004 El Capitan, 2017.
[11] The Darwin Kernel. https://github.com/apple/darwin-xnu, 2017.
[12] AIJAZ, A., AND KULKARNI, P. Protocol design for enabling full-duplex operation in next-generation IEEE 802.11 WLANs. IEEE Systems Journal PP, 99 (2017), 1–12.
[13] ALEXANDER, G., AND CRANDALL, J. R. Off-Path Round Trip Time Measurement via TCP/IP Side Channels. In INFOCOM (2015).
[14] ANTONAKAKIS, M., APRIL, T., BAILEY, M., BERNHARD, M., BURSZTEIN, E., COCHRAN, J., DURUMERIC, Z., HALDERMAN, J. A., INVERNIZZI, L., KALLITSIS, M., KUMAR, D., LEVER, C., MA, Z., MASON, J., MENSCHER, D., SEAMAN, C., SULLIVAN, N., THOMAS, K., AND ZHOU, Y. Understanding the Mirai botnet. In 26th USENIX Security Symposium (USENIX Security 17) (Vancouver, BC, 2017), USENIX Association, pp. 1093–1110.
[15] BELLOVIN, S. M. A Technique for Counting Natted Hosts. In Proceedings of the 2nd ACM SIGCOMM Workshop on Internet Measurement (2002).
[16] BENSAOU, B., WANG, Y., AND KO, C. C. Fair medium access in 802.11 based wireless ad-hoc networks. In Proceedings of the 1st ACM International Symposium on Mobile Ad Hoc Networking & Computing (2000), IEEE Press, pp. 99–106.
[17] CALI, F., CONTI, M., AND GREGORI, E. IEEE 802.11 protocol: Design and performance evaluation of an adaptive backoff mechanism. IEEE Journal on Selected Areas in Communications 18, 9 (2000), 1774–1786.
[18] CAO, Y., QIAN, Z., WANG, Z., DAO, T., KRISHNAMURTHY, S. V., AND MARVEL, L. M. Off-path TCP exploits: Global rate limit considered dangerous. In 25th USENIX Security Symposium (USENIX Security 16) (2016).
[19] CHEN, Q. A., QIAN, Z., JIA, Y. J., SHAO, Y., AND MAO, Z. M. Static detection of packet injection vulnerabilities: A case for identifying attacker-controlled implicit information leaks. In CCS (2015).
[20] CHEN, S., WANG, R., WANG, X., AND ZHANG, K. Side-channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. In IEEE Symposium on Security and Privacy (2010).
[21] CHEN, W., HUANG, Y., RIBEIRO, B. F., SUH, K., ZHANG, H., DE SOUZA E SILVA, E., KUROSE, J., AND TOWSLEY, D. Exploiting the IPID field to infer network path and end-system characteristics. In Proceedings of the 6th International Conference on Passive and Active Network Measurement (PAM) (2005).
[41] QIAN, Z., MAO, Z. M., XIE, Y., AND YU, F. Investigation of Triangular Spamming: A Stealthy and Efficient Spamming Technique. In Proc. of IEEE Security and Privacy (2010).
[42] QUACH, A., WANG, Z., AND QIAN, Z. Investigation of the 2016 Linux TCP stack vulnerability at scale. In Proc. ACM SIGMETRICS (2017).
[43] R. BRADEN, ED. Requirements for Internet Hosts - Communication Layers. RFC 1122, 1989.
[44] RAMAIAH, ANANTHA AND STEWART, R AND DALAL, MITESH. Improving TCP’s Robustness to Blind In-Window Attacks. RFC 5961, 2010.
[45] SHAN, Z., NEAMTIU, I., QIAN, Z., AND TORRIERI, D. Proactive restart as cyber maneuver for Android. In MILCOM 2015 - 2015 IEEE Military Communications Conference (2015).
[46] TOBAGI, F., AND KLEINROCK, L. Packet switching in radio channels: Part II–The hidden terminal problem in carrier sense multiple-access and the busy-tone solution. IEEE Transactions on Communications 23, 12 (1975), 1417–1433.
[47] WANG, S., WANG, P., LIU, X., ZHANG, D., AND WU, D. CACHED: Identifying cache-based timing channels in production software. In 26th USENIX Security Symposium (USENIX Security 17) (Vancouver, BC, 2017), USENIX Association, pp. 235–252.
[48] ZHANG, X., KNOCKEL, J., AND CRANDALL, J. R. Original SYN: Finding Machines Hidden Behind Firewalls. In INFOCOM (2015).
[49] ZHANG, X., KNOCKEL, J., AND CRANDALL, J. R. High fidelity off-path round-trip time measurement via TCP/IP side channels with duplicate SYNs. In 2016 IEEE Global Communications Conference (GLOBECOM) (Dec 2016), pp. 1–6.
[50] ZHOU, Z., QIAN, Z., REITER, M. K., AND ZHANG, Y. Static evaluation of noninterference using approximate model counting. In Proc. of IEEE Security and Privacy (2018).
[22] CRANE, S., HOMESCU, A., BRUNTHALER, S., LARSEN, P., AND FRANZ, M. Thwarting cache side-channel attacks through dynamic software diversity. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS) (2015).
[23] ENSAFI, R., KNOCKEL, J., ALEXANDER, G., AND CRANDALL, J. R. Detecting Intentional Packet Drops on the Internet via TCP/IP Side Channels. In PAM (2014).
[24] ENSAFI, R., PARK, J. C., KAPUR, D., AND CRANDALL, J. R. Idle Port Scanning and Non-interference Analysis of Network Protocol Stacks using Model Checking. In USENIX Security (2010).
[25] GILAD, Y., AND HERZBERG, A. Off-Path Attacking the Web. In USENIX WOOT (2012).
[26] GILAD, Y., AND HERZBERG, A. Spying in the Dark: TCP and Tor Traffic Analysis. In PETS (2012).
[27] GILAD, Y., AND HERZBERG, A. When tolerance causes weakness: the case of injection-friendly browsers. In WWW (2013).
[28] GILAD, Y., AND HERZBERG, A. Off-path TCP injection attacks. ACM Transactions on Information and System Security (TISSEC) 16, 4 (2014), 13.
[29] GOGUEN, J. A., AND MESEGUER, J. Security Policies and Security Models. In IEEE Symposium on Security and Privacy (1982).
[30] IEEE 802.11-13/1421R1. STR radios and STR media access.
[31] IEEE 802.11 WORKING GROUP OF THE LAN/MAN STANDARDS COMMITTEE OF THE IEEE COMPUTER SOCIETY. 802.11-2016 - IEEE Standard for Information technology–Telecommunications and information exchange between systems Local and metropolitan area networks–Specific requirements - Part 11: Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications.
[32] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G. STEALTHMEM: System-level protection against cache-based side channel attacks in the cloud. In Presented as part of the 21st USENIX Security Symposium (USENIX Security 12) (2012).
[33] KNOCKEL, J., AND CRANDALL, J. R. Counting Packets Sent Between Arbitrary Internet Hosts. In FOCI (2014).
[34] KOCHER, P., GENKIN, D., GRUSS, D., HAAS, W., HAMBURG, M., LIPP, M., MANGARD, S., PRESCHER, T., SCHWARZ, M., AND YAROM, Y. Spectre attacks: Exploiting speculative execution. ArXiv e-prints (January 2018).
[35] LIPP, M., SCHWARZ, M., GRUSS, D., PRESCHER, T., HAAS, W., MANGARD, S., KOCHER, P., GENKIN, D., YAROM, Y., AND HAMBURG, M. Meltdown. ArXiv e-prints (January 2018).
[36] MILLER, B., HUANG, L., JOSEPH, A. D., AND TYGAR, J. D. I know why you went to the clinic: Risks and realization of HTTPS traffic analysis. In Privacy Enhancing Technologies (2014).
[37] PEARCE, P., ENSAFI, R., LI, F., FEAMSTER, N., AND PAXSON, V. Augur: Internet-wide detection of connectivity disruptions. In 2017 IEEE Symposium on Security and Privacy (SP) (May 2017), pp. 427–443.
[38] PTACEK, T. H., AND NEWSHAM, T. N. Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection. Tech. rep., 1998.
[39] QIAN, Z., AND MAO, Z. M. Off-Path TCP Sequence Number Inference Attack – How Firewall Middleboxes Reduce Security. In IEEE Symposium on Security and Privacy (2012).
[40] QIAN, Z., MAO, Z. M., AND XIE, Y. Collaborative TCP sequence number inference attack: How to crack sequence number under a second. In CCS (2012).

---

This revised version aims to improve clarity, coherence, and professionalism while maintaining the original content and intent.