### Figure 6(b) Results for the Synthetic Dataset

Figure 6(b) presents the results for the synthetic dataset. In ciphertext-only mode, the locality-based attack can successfully infer only one out of approximately 420,000 ciphertext-plaintext chunk pairs across all segment sizes. As observed in the FSL dataset, the inference rate increases with the leakage rate. However, the increase in the synthetic dataset is more pronounced compared to the FSL dataset. This is due to the relatively small size of each snapshot in the synthetic dataset (approximately 4.28 GB), which results in fewer segments with distinct minimum fingerprints. Consequently, the frequency rank of ciphertext chunks is less disrupted by MinHash encryption. Even at a leakage rate of 0.2%, the inference rate is around 7.63-7.68%, significantly lower than the previous rate of about 28.32% without MinHash encryption. Further research is needed to explore methods to further reduce the inference rate in small-sized backups.

### Experiment B.2: Storage Efficiency

Next, we evaluate the storage efficiency of MinHash encryption. We add encrypted backups to storage in the order of their creation times and measure the storage savings as the percentage reduction in the total size of all ciphertext chunks achieved through deduplication. We compare the storage savings of Minhash encryption with those of exact deduplication, which operates at the chunk level and eliminates all duplicate chunks. Metadata overhead is not considered in this comparison.

#### FSL Dataset
Figure 7(a) illustrates the storage savings after storing each FSL backup. After storing all five backups, the storage savings are 83.61%, 83.17%, and 82.69% for segment sizes of 512 KB, 1 MB, and 2 MB, respectively. Compared to exact deduplication, the savings are reduced by 3.12%, 3.56%, and 4.03%, respectively.

#### Synthetic Dataset
Figure 7(b) shows the storage savings after storing each synthetic snapshot (excluding the initial snapshot). After ten backups, the storage savings are 86.28%, 86.15%, and 85.88% for segment sizes of 512 KB, 1 MB, and 2 MB, respectively. The reduction in storage savings compared to exact deduplication, which achieves 89.15%, is minimal (less than 4%). Overall, MinHash encryption maintains high storage efficiency for both datasets.

### VIII. Related Work

#### Encrypted Deduplication
Traditional encrypted deduplication systems, such as [4], [14], [16], [24], [43], and [46], primarily use convergent encryption [16], where the encryption key is derived from the cryptographic hash of the content. CDStore [28] integrates convergent encryption with secret sharing for fault-tolerant storage. However, convergent encryption is vulnerable to brute-force attacks (see Section II-B). Server-aided MLE protects against these attacks by maintaining content-to-key mappings in a dedicated key manager, as implemented in various storage system prototypes [5], [8], [38], and [41]. To address the single-point-of-failure issue, Duan [17] proposes maintaining a quorum of key managers via threshold signatures for fault-tolerant key management. All these systems use deterministic encryption, making them susceptible to the inference attacks discussed in this paper.

Bellare et al. [9] propose random convergent encryption (RCE), which uses random keys for chunk encryption. However, RCE requires deterministic tags in ciphertext chunks for duplicate checking, allowing adversaries to count these tags and obtain the frequency distribution. Liu et al. [31] suggest encrypting each plaintext chunk with a random key, shared among users via password-based key exchange. This approach, however, incurs significant key exchange overhead, especially with a large number of chunks.

From a theoretical perspective, several works aim to strengthen the security of encrypted deduplication and protect the frequency distribution of original chunks. Abadi et al. [3] propose two schemes that depend on public parameters, but they either rely on computationally expensive non-interactive zero-knowledge (NIZK) proofs or produce deterministic ciphertext components. Interactive MLE [7] addresses chunk correlation and parameter dependence but is impractical due to the use of fully homomorphic encryption (FHE). This paper differs by using lightweight primitives for practical encrypted deduplication.

#### Inference Attacks
Frequency analysis [32] is a classical inference attack used to recover plaintexts from substitution-based ciphertexts. It is also a building block in recent attacks. Kumar et al. [26] use frequency-based analysis to de-anonymize query logs. Islam et al. [23] compromise keyword privacy based on access pattern leakage in keyword search. Naveed et al. [36] conduct frequency analysis via combinatorial optimization and present attacks against CryptDB. Kellaris et al. [25] propose reconstruction attacks against systems that leak access patterns or communication volume. Pouliot et al. [37] present graph matching attacks on searchable encryption. Our work focuses on encrypted deduplication storage and exploits workload characteristics to construct attack and defense approaches.

Ritzdorf et al. [40] exploit the size information of deduplicated content to determine if a file has been stored. Our work, in contrast, focuses on inferring the content of data chunks based on chunk frequencies and examines the effectiveness of MinHash encryption in defending against our proposed attack.

Some inference attacks leverage active adversarial capabilities. Brekne et al. [1] construct bogus packets to de-anonymize IP addresses. Cash et al. [13] and Zhang et al. [48] propose file-injection attacks against searchable encryption. Our proposed attacks do not rely on active adversarial capabilities.

### IX. Conclusion

Encrypted deduplication is widely deployed in commercial cloud environments and extensively studied to achieve both data confidentiality and storage efficiency. However, we argue that its data confidentiality is not fully guaranteed. This paper demonstrates how the deterministic nature of encrypted deduplication makes it susceptible to information leakage through frequency analysis. We consider a locality-based attack, which exploits the chunk locality property of backup workloads, to infer the content of a large fraction of plaintext chunks from the ciphertext chunks of the latest backup. We show the practical implementation of this attack and its severity through trace-driven evaluation on real-world and synthetic datasets. To defend against information leakage, we propose MinHash encryption, which relaxes the deterministic nature of encrypted deduplication by encrypting some identical plaintext chunks to multiple distinct ciphertext chunks. Our trace-driven evaluation shows that MinHash encryption is robust against the locality-based attack while maintaining deduplication effectiveness. The source code for our attack and defense implementations is available at http://adslab.cse.cuhk.edu.hk/software/freqanalysis.

### Acknowledgments

This work was supported in part by grants from the National Natural Science Foundation of China (Grant No. 61602092), Fundamental Research Funds for the Central Universities (Grant No. ZYGX2016KYQD115), Key Basic Research of Sichuan Province (Grant No. 2016JY0007), the Research Grants Council of Hong Kong (GRF CUHK413813 and CRF C7036-15), and the Cisco University Research Program Fund (CG#593822) from the Silicon Valley Community Foundation.

### References

[1] “Anonymization of IP traffic monitoring data: Attacks on two prefix-preserving anonymization schemes and some proposed remedies,” in Proc. of PETs, 2006.
[2] “FSL traces and snapshots public archive,” http://tracer.filesystems.org/, 2014.
[3] M. Abadi, D. Boneh, I. Mironov, A. Raghunathan, and G. Segev, “Message-locked encryption for lock-dependent messages,” in Proc. of CRYPTO, 2013.
[4] P. Anderson and L. Zhang, “Fast and secure laptop backups with encrypted deduplication,” in Proc. of USENIX LISA, 2010.
[5] F. Armknecht, J.-M. Bohli, G. O. Karame, and F. Youssef, “Transparent data deduplication in the cloud,” in Proc. of ACM CCS, 2015.
[6] M. Arrington, “AOL: ‘this was a screw up’,” https://techcrunch.com/2006/08/07/aol-this-was-a-screw-up/, 2006.
[7] M. Bellare and S. Keelveedhi, “Interactive message-locked encryption and secure deduplication,” in Proc. of PKC, 2015.
[8] M. Bellare, S. Keelveedhi, and T. Ristenpart, “DupLESS: Server-aided encryption for deduplicated storage,” in Proc. of USENIX Security, 2013.
[9] ——, “Message-locked encryption and secure deduplication,” in Proc. of EUROCRYPT, 2013.
[10] D. Bhagwat, K. Eshghi, D. D. Long, and M. Lillibridge, “Extreme binning: Scalable, parallel deduplication for chunk-based file backup,” in Proc. of IEEE MASCOTS, 2009.
[11] J. Black, “Compare-by-hash: a reasoned analysis,” in Proc. of USENIX ATC, 2006.
[26] R. Kumar, J. Novak, B. Pang, and A. Tomkins, “On anonymizing query logs via token-based hashing,” in Proc. of ACM WWW, 2007.
[27] M.-S. Lacharité and K. G. Paterson, “A note on the optimality of frequency analysis vs. lp-optimization,” IACR Cryptology ePrint Archive, 2015.
[28] M. Li, C. Qin, and P. P. C. Lee, “CDStore: Toward reliable, secure, and cost-efficient cloud storage via convergent dispersal,” in Proc. of USENIX ATC, 2015.
[29] M. Lillibridge, K. Eshghi, and D. Bhagwat, “Improving restore speed for backup systems that use inline chunk-based deduplication,” in Proc. of USENIX FAST, 2013.
[30] M. Lillibridge, K. Eshghi, D. Bhagwat, V. Deolalikar, G. Trezise, and P. Camble, “Sparse indexing: Large scale, inline deduplication using sampling and locality,” in Proc. of USENIX FAST, 2009.
[31] J. Liu, N. Asokan, and B. Pinkas, “Secure deduplication of encrypted data without additional independent servers,” in Proc. of ACM CCS, 2015.
[32] A. J. Menezes, P. C. van Oorschot, and S. A. Vanstone, “Handbook of applied cryptography,” 2001.
[33] D. T. Meyer and W. J. Bolosky, “A study of practical deduplication,” in Proc. of USENIX FAST, 2011.
[34] M. Mulazzani, S. Schrittwieser, M. Leithner, M. Huber, and E. Weippl, “Dark clouds on the horizon: Using cloud storage as attack vector and online slack space,” in Proc. of USENIX Security, 2011.
[35] M. Naveed, M. Prabhakaran, and C. Gunter, “Dynamic searchable encryption via blind storage,” in Proc. of IEEE S&P, May 2014.
[36] M. Naveed, S. Kamara, and C. V. Wright, “Inference attacks on property-preserving encrypted databases,” in Proc. of ACM CCS, 2015.
[37] D. Pouliot and C. V. Wright, “The shadow nemesis: Inference attacks on efficiently deployable, efficiently searchable encryption,” in Proc. of ACM CCS, 2016.
[38] C. Qin, J. Li, and P. P. C. Lee, “The design and implementation of a rekeying-aware encrypted deduplication storage system,” ACM Trans. on Storage, vol. 13, no. 1, pp. 9:1–9:30, Mar 2017.
[39] M. O. Rabin, “Fingerprinting by random polynomials,” Center for Research in Computing Technology, Harvard University. Tech. Report TR-CSE-03-01, 1981.
[40] H. Ritzdorf, G. Karame, C. Soriente, and S. Čapkun, “On Information Leakage in Deduplicated Storage Systems,” in Proc. of ACM CCSW, 2016.
[41] P. Shah and W. So, “Lamassu: Storage-efficient host-side encryption,” in Proc. of USENIX ATC, 2015.
[12] A. Z. Broder, “On the resemblance and containment of documents,” in Proc. of IEEE Compression and Complexity of Sequences, 1997.
[42] E. Shi, T.-H. H. Chan, E. Stefanov, and M. Li, “Oblivious RAM with o((logn)3) worst-case cost,” in Proc. of ASIACRYPT, 2011.
[13] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart, “Leakage-abuse attacks against searchable encryption,” in Proc. of ACM CCS, 2015.
[43] M. W. Storer, K. Greenan, D. D. Long, and E. L. Miller, “Secure data deduplication,” in Proc. of ACM StorageSS, 2008.
[44] Z. Sun, G. Kuenning, S. Mandal, P. Shilane, V. Tarasov, N. Xiao, and E. Zadok, “A long-term user-centric analysis of deduplication patterns,” in Proc. of IEEE MSST, 2016.
[45] G. Wallace, F. Douglis, H. Qian, P. Shilane, S. Smaldone, M. Chamness, and W. Hsu, “Characteristics of backup workloads in production systems,” in Proc. of USENIX FAST, 2012.
[46] Z. Wilcox-O’Hearn and B. Warner, “Tahoe: The least-authority filesystem,” in Proc. of ACM StorageSS, 2008.
[47] W. Xia, H. Jiang, D. Feng, and Y. Hua, “SiLo: A similarity locality based near exact deduplication scheme with low RAM overhead and high throughput,” in Proc. of USENIX ATC, 2011.
[48] Y. Zhang, J. Katz, and C. Papamanthou, “All your queries are belong to us: the power of file-injection attacks on searchable encryption,” in Proc. of USENIX Security, 2016.
[49] B. Zhu, K. Li, and R. H. Patterson, “Avoiding the disk bottleneck in the Data Domain deduplication file system,” in Proc. of USENIX FAST, 2008.
[15] B. Darrow, “Harvard-affiliate McLean hospital loses patient data,” http://fortune.com/2015/07/29/mclean-hospital-loses-patient-data/, 2015.
[16] J. R. Douceur, A. Adya, W. J. Bolosky, D. Simon, and M. Theimer, “Reclaiming space from duplicate files in a serverless distributed file system,” in Proc. of IEEE ICDCS, 2002.
[17] Y. Duan, “Distributed key generation for encrypted deduplication: Achieving the strongest privacy,” in Proc. of ACM CCSW, 2014.
[18] K. Eshghi and H. K. Tang, “A framework for analyzing and improving content-based chunking algorithms,” HPL-2005-30R1, 2005.
[19] S. Ghemawat and J. Dean, “LevelDB: A fast key/value storage library by Google,” https://github.com/google/leveldb, 2014.
[20] R. Hackett, “LinkedIn lost 167 million account credentials in data breach,” http://fortune.com/2016/05/18/linkedin-data-breach-email-password/, 2016.
[21] S. Halevi, D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Proofs of ownership in remote storage systems,” in Proc. of ACM CCS, 2011.
[22] D. Harnik, B. Pinkas, and A. Shulman-Peleg, “Side channels in cloud services: Deduplication in cloud storage,” IEEE Security & Privacy, vol. 8, no. 6, pp. 40–47, 2010.
[23] M. S. Islam, M. Kuzu, and M. Kantarcioglu, “Access pattern disclosure on searchable encryption: Ramification, attack and mitigation,” in Proc. of NDSS, 2012.
[24] M. Kallahall, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu, “Plutus: Scalable secure file sharing on untrusted storage,” in Proc. of USENIX FAST, 2002.
[25] G. Kellaris, G. Kollios, K. Nissim, and A. O’Neill, “Generic attacks on secure outsourced databases,” in Proc. of ACM CCS, 2016.