# Acknowledgments

This work was supported by the following grants and programs:
- NSF: 0831300, CNS-1017265, DGE-1500084, CNS-1563848, SFS-1565523, CRI-1629851, and CNS-1704701
- ONR: N00014-15-1-2162, N00014-16-1-2710, and N00014-17-1-2895
- DARPA TC: FA8650-15-C-7556
- DARPA XD3: HR0011-16-C-0059
- ETRI IITP/KEIT: B0101-17-0644

# References

1. Aiken, A. (2017). Moss: A system for detecting software plagiarism. Retrieved from http://theory.stanford.edu/~aiken/moss/

2. Akhawe, D. (2015). Security bug resolved in the Dropbox SDKs for Android. Retrieved from https://blogs.dropbox.com/developers/2015/03/security-bug-resolved-in-the-dropbox-sdks-for-android/

3. Antepedia. (2017). Antepedia, Software Artifacts Knowledge Base. Retrieved from http://www.antepedia.com

4. AppBrain. (2016). Android library statistics. Retrieved from http://www.appbrain.com/stats/libraries

5. AppBrain. (2017). Number of Android applications. Retrieved from https://www.appbrain.com/stats/free-and-paid-android-applications

6. Atlassian, Inc. (2016). Code, Manage, Collaborate. Retrieved from https://bitbucket.org

7. Backes, M., Bugiel, S., & Derr, E. (2016). Reliable Third-Party Library Detection in Android and its Security Applications. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS). Vienna, Austria.

8. Baker, B. S. (1995). On Finding Duplication and Near-Duplication in Large Software Systems. In Proceedings of the 2nd Working Conference on Reverse Engineering (WCRE). Toronto, Ontario, Canada.

9. Baker, B. S. (1997). Parameterized Duplication in Strings: Algorithms and an Application to Software Maintenance. SIAM J. Comput., 26(5), 1343–1362.

10. Baker, B. S., & Manber, U. (1998). Deducing Similarities in Java Sources from Bytecodes. In Proceedings of the 1998 USENIX Annual Technical Conference (ATC). New Orleans, Louisiana.

11. Baxter, I. D., Yahin, A., Moura, L., Sant’Anna, M., & Bier, L. (1998). Clone Detection Using Abstract Syntax Trees. In Proceedings of the International Conference on Software Maintenance (ICSM). Bethesda, Maryland, USA.

12. Bendersky, E. (2016). Pure-python library for parsing ELF and DWARF. Retrieved from https://github.com/eliben/pyelftools

13. Bhoraskar, R., Han, S., Jeon, J., Azim, T., Chen, S., Jung, J., Nath, S., Wang, R., & Wetherall, D. (2014). Brahmastra: Driving Apps to Test the Security of Third-Party Components. In Proceedings of the 23rd USENIX Security Symposium (Security). San Diego, CA.

14. Bintray.com. (2016). JCenter is the place to find and share popular Apache Maven packages. Retrieved from https://bintray.com/bintray/jcenter

15. Black Duck Software, Inc. (2016). Black Duck Protex Automate Open Source Compliance. Retrieved from https://www.blackducksoftware.com/products/protex

16. Book, T., Pridgen, A., & Wallach, D. S. (2013). Longitudinal Analysis of Android Ad Library Permissions. In Proceedings of the IEEE CS Security and Privacy Workshops (SPW). San Francisco, CA.

17. Bourquin, M., King, A., & Robbins, E. (2013). BinSlayer: Accurate Comparison of Binary Executables. In Proceedings of the 13th ACM SIGPLAN Program Protection and Reverse Engineering Workshop. Rome, Italy.

18. CeleryProject. (2016). Celery: Distributed Task Queue. Retrieved from http://www.celeryproject.org

19. Charikar, M. S. (2002). Similarity estimation techniques from rounding algorithms. In Proceedings of the 34th Annual ACM Symposium on Theory of Computing (STOC). Montréal, Québec, Canada.

20. Cheikes, B. A., Waltermire, D., & Scarfone, K. (2011). Common Platform Enumeration: Naming Specification Version 2.3. NIST Interagency Report 7695, NIST-IR 7695.

21. Chen, E., Pei, Y., Chen, S., Tian, Y., Kotcher, R., & Tague, P. (2014). OAuth Demystified for Mobile Application Developers. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS). Scottsdale, Arizona.

22. Chen, K., Liu, P., & Zhang, Y. (2014). Achieving Accuracy and Scalability Simultaneously in Detecting Application Clones on Android Markets. In Proceedings of the 36th International Conference on Software Engineering (ICSE). Hyderabad, India.

23. Choi, S., Park, H., Lim, H.-I., & Han, T. (2007). A Static Birthmark of Binary Executables Based on API Call Structure. In Proceedings of the 12th Advances in Computer Science Conference: Computer and Network Security. Doha, Qatar, 2–16.

24. Corona Labs. (2016). Cross-Platform Mobile App Development for iOS, Android. Retrieved from https://coronalabs.com

25. Crussell, J., Gibler, C., & Chen, H. (2012). Attack of the Clones: Detecting Cloned Applications on Android Markets. In Proceedings of the 17th European Symposium on Research in Computer Security (ESORICS). Pisa, Italy.

26. Crussell, J., Gibler, C., & Chen, H. (2015). AnDarwin: Scalable Detection of Android Application Clones Based on Semantics. IEEE Transactions on Mobile Computing, 14(10), 2007–2019.

27. Ducasse, S., Rieger, M., & Demeyer, S. (1999). A Language Independent Approach for Detecting Duplicated Code. In Proceedings of the International Conference on Software Maintenance (ICSM). Oxford, England, UK.

28. Eschweiler, S., Yakdan, K., & Gerhards-Padilla, E. (2016). discovre: Efficient cross-architecture identification of bugs in binary code. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS). San Diego, CA.

29. F-Droid Limited and Contributors. (2016). F-Droid. Retrieved from https://f-droid.org

30. Feng, Q., Zhou, R., Xu, C., Cheng, Y., Testa, B., & Yin, H. (2016). Scalable Graph-based Bug Search for Firmware Images. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS). Vienna, Austria.

31. FOSSology Workgroup. (2016). Open Source License Compliance by Open Source Software. Retrieved from https://www.fossology.org/

32. Gabel, M., Yang, J., Yu, Y., Goldszmidt, M., & Su, Z. (2010). Scalable and Systematic Detection of Buggy Inconsistencies in Source Code. In Proceedings of the 20th Annual ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA). Reno/Tahoe, Nevada, USA.

33. Gao, D., Reiter, M. K., & Song, D. (2008). BinHunt: Automatically Finding Semantic Differences in Binary Programs. In Proceedings of the 10th International Conference on Information and Communications Security. Birmingham, UK.

34. GitHub, Inc. (2016). How people build software. Retrieved from https://github.com/features

35. Google Inc. (2016). Android Studio, The Official IDE for Android. Retrieved from https://developer.android.com/studio/index.html

36. Grace, M. C., Zhou, W., Jiang, X., & Sadeghi, A.-R. (2012). Unsafe Exposure Analysis of Mobile In-App Advertisements. In Proceedings of the ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec). Budapest, Hungary.

37. Grover, D. (1989). The Protection of Computer Software—Its Technology and Applications. Cambridge University Press, New York, NY, USA, 119–150 pages.

38. Hanna, S., Huang, L., Wu, E., Li, S., Chen, C., & Song, D. (2012). Juxtapp: A Scalable System for Detecting Code Reuse Among Android Applications. In Proceedings of the 9th Conference on Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA). Heraklion, Crete, Greece.

39. Hemel, A., Kalleberg, K. T., Vermaas, R., & Dolstra, E. (2011). Finding Software License Violations Through Binary Code Clone Detection. In Proceedings of the 8th Working Conference on Mining Software Repositories (MSR). Honolulu, HI.

40. Adobe Systems Inc. (2016). Build amazing mobile apps powered by open web tech. Retrieved from http://phonegap.com

41. Google Inc. (2016). App Security Improvement Program. Retrieved from https://developer.android.com/google/play/asi.html

42. Google Inc. (2016). How to address MoPub vulnerabilities in your apps. Retrieved from https://support.google.com/faqs/answer/6345928

43. Google Inc. (2016). How to address OpenSSL vulnerabilities in your apps. Retrieved from https://support.google.com/faqs/answer/6376725

44. Google Inc. (2016). How to fix apps containing Libpng Vulnerability. Retrieved from https://support.google.com/faqs/answer/7011127

45. Jang, J., Agrawal, A., & Brumley, D. (2012). ReDeBug: Finding Unpatched Code Clones in Entire OS Distributions. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (Oakland). San Francisco, CA.

46. Jang, J., Brumley, D., & Venkataraman, S. (2011). BitShred: Feature Hashing Malware for Scalable Triage and Semantic Analysis. In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS). Chicago, Illinois.

47. Jiang, L., Misherghi, G., Su, Z., & Glondu, S. (2007). Deckard: Scalable and Accurate Tree-Based Detection of Code Clones. In Proceedings of the 29th International Conference on Software Engineering (ICSE). Minneapolis, MN.

48. Johnson, J. H. (1993). Identifying Redundancy in Source Code Using Fingerprints. In Proceedings of the 1993 Conference of the Centre for Advanced Studies on Collaborative Research: Software Engineering - Volume 1. Toronto, Ontario, Canada, 171–183.

49. Kamiya, T., Kusumoto, S., & Inoue, K. (2002). CCFinder: A Multilinguistic Token-Based Code Clone Detection System for Large-Scale Source Code. IEEE Transactions on Software Engineering, 28(7).

50. Kim, D., Cho, S. J., Han, S., Park, M., & You, I. (2014). Open Source Software Detection Using Function-Level Static Software Birthmark. Journal of Internet Services and Information Security (JISIS), 4(4), 25–37.

51. Kim, S., Woo, S., Lee, H., & Oh, H. (2017). VUDDY: A Scalable Approach for Vulnerable Code Clone Discovery. In Proceedings of the 38th IEEE Symposium on Security and Privacy (Oakland). San Jose, CA.

52. Komondoor, R., & Horwitz, S. (2001). Using Slicing to Identify Duplication in Source Code. In Proceedings of the 8th International Symposium on Static Analysis. Paris, France.

53. Kumar, M. (2014). Facebook SDK vulnerability puts millions of smartphone users’ accounts at risk. Retrieved from http://thehackernews.com/2014/07/facebook-sdk-vulnerability-puts.html

54. Lafortune, E. (2016). ProGuard. Retrieved from http://proguard.sourceforge.net/

55. Lam, P., Bodden, E., Lhoták, O., & Hendren, L. (2011). The Soot Framework for Java Program Analysis: A Retrospective. In Proceedings of the 2011 Cetus Users and Compiler Infrastructure Workshop. Galveston Island, TX.

56. Li, M., Wang, W., Wang, P., Wang, S., Wu, D., Liu, J., Xue, R., & Huo, W. (2017). Libd: Scalable and Precise Third-Party Library Detection in Android Markets. In Proceedings of the 39th International Conference on Software Engineering (ICSE). Buenos Aires, Argentina.

57. Li, Z., Lu, S., Myagmar, S., & Zhou, Y. (2004). CP-Miner: A Tool for Finding Copy-Paste and Related Bugs in Operating System Code. In Proceedings of the 6th USENIX Symposium on Operating Systems Design and Implementation (OSDI). San Francisco, CA.

58. Long, J. (2016). cve-search - a tool to perform local searches for known vulnerabilities. Retrieved from http://cve-search.github.io/cve-search/

59. Luo, L., Ming, J., Wu, D., Liu, P., & Zhu, S. (2014). Semantics-Based Obfuscation-Resilient Binary Code Similarity Comparison with Applications to Software Plagiarism Detection. In Proceedings of the 22nd ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE). Hong Kong.

60. Luo, L., Ming, J., Wu, D., Liu, P., & Zhu, S. (2017). Semantics-Based Obfuscation-Resilient Binary Code Similarity Comparison with Applications to Software and Algorithm Plagiarism Detection. IEEE Transactions on Software Engineering, PP(99).

61. Ma, Z., Wang, H., Guo, Y., & Chen, X. (2016). LibRadar: Fast and Accurate Detection of Third-Party Libraries in Android Apps. In Proceedings of the 38th International Conference on Software Engineering (ICSE). Austin, TX.

62. Mockus, A. (2007). Large-Scale Code Reuse in Open Source Software. In Proceedings of the First International Workshop on Emerging Trends in FLOSS Research and Development. Minneapolis, MN.

63. Mutchler, P., Doupe, A., Mitchell, J., Kruegeland, C., & Vigna, G. (2015). A Large-Scale Study of Mobile Web App Security. In Proceedings of the Mobile Security Technologies (MoST). San Jose, CA.

64. MvnRepository. (2016). Maven Repository: Search/Browse/Explore. Retrieved from https://mvnrepository.com

65. Myles, G., & Collberg, C. (2004). Detecting Software Theft via Whole Program Path Birthmarks. In International Conference on Information Security. Palo Alto, California.

66. Myles, G., & Collberg, C. (2005). K-gram Based Software Birthmarks. In Proceedings of the 2005 ACM Symposium on Applied Computing (SAC). Santa Fe, New Mexico.

67. Narayanan, A., Chen, L., & Chan, C. K. (2014). Addetect: Automated Detection of Android Ad Libraries Using Semantic Analysis. In Proceedings of the 9th Intelligent Sensors, Sensor Networks and Information Processing. Singapore, Singapore.

68. Neugschwandtner, M., Lindorfer, M., & Platzer, C. (2013). A View To A Kill: WebView Exploitation. In Proceedings of the 6th USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET). Washington, D.C.

69. Paul, R. (2009). Cisco settles FSF GPL lawsuit, appoints compliance officer. Retrieved from http://arstechnica.com/information-technology/2009/05/cisco-settles-fsf-gpl-lawsuit-appoints-compliance-officer

70. RedisLabs. (2016). Redis Cluster Specification. Retrieved from http://redis.io/topics/cluster-spec

71. Roesner, F., & Kohno, T. (2013). Securing Embedded User Interfaces: Android and Beyond. In Proceedings of the 22nd USENIX Security Symposium (Security). Washington, DC.

72. Rogue Wave Software, Inc. (2016). Solve open source issues with full-stack enterprise support. Retrieved from http://www.roguewave.com/products-services/open-source-support

73. Sæbjørnsen, A., Willcock, J., Panas, T., Quinlan, D., & Su, Z. (2009). Detecting Code Clones in Binary Executables. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA). Chicago, IL.

74. Schuler, D., & Dallmeier, V. (2006). Detecting Software Theft with API Call Sequence Sets. In Workshop Software Reengineering (WSR 2006). Bad-Honnef, Germany.

75. ScrapingHub. (2016). Scrapy, A Fast and Powerful Scraping and Web Crawling Framework. Retrieved from https://scrapy.org

76. Shekhar, S., Dietz, M., & Wallach, D. S. (2012). AdSplit: Separating Smartphone Advertising from Applications. In Proceedings of the 21st USENIX Security Symposium (Security). Bellevue, WA.

77. Sonatype, Inc. (2016). Sonatype Releases. Retrieved from https://oss.sonatype.org/content/repositories/releases/

78. SourceForge.net. (2016). Find, Create, and Publish Open Source Software for Free. Retrieved from https://sourceforge.net

79. Android Studio. (2016). Shrink Your Code and Resources. Retrieved from https://developer.android.com/studio/build/shrink-code.html

80. Sun, M., & Tan, G. (2014). NativeGuard: Protecting Android Applications from Third-Party Native Libraries. In Proceedings of the ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec). Oxford, UK.

81. Synopsys. (2017). Software Composition Analysis - Protecode. Retrieved from https://www.synopsys.com/software-integrity/products/software-composition-analysis.html

82. Tamada, H., Nakamura, M., & Monden, A. (2004). Design and Evaluation of Birthmarks for Detecting Theft of Java Programs. In Proceedings of the IASTED IASTED International Conference on Software Engineering. Innsbruck, Austria.

83. The Apache Software Foundation. (2016). Apache Maven Project. Retrieved from https://maven.apache.org/index.html

84. ToughDev. (2015). Comparison of Popular PDF Libraries on iOS and Android. Retrieved from http://www.toughdev.com/content/2015/02/comparison-of-popular-pdf-libraries-on-ios-and-android/

85. Vaughan, S. (2015). VMware sued for failure to comply with Linux license. Retrieved from http://www.zdnet.com/article/vmware-sued-for-failure-to-comply-with-linuxs-license

86. Vendome, C. (2015). A Large Scale Study of License Usage on GitHub. In Proceedings of the 37th International Conference on Software Engineering (ICSE). Florence, Italy.

87. Viennot, N., Garcia, E., & Nieh, J. (2014). A Measurement Study of Google Play. In Proceedings of the 2014 ACM SIGMETRICS Conference. Austin, TX.

88. Wang, H., Guo, Y., Ma, Z., & Chen, X. (2015). WuKong: A Scalable and Accurate Two-Phase Approach to Android App Clone Detection. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA). Baltimore, MA.

89. Wang, R., Zhou, Y., Chen, S., Qadeer, S., Evans, D., & Gurevich, Y. (2013). Explicating SDKs: Uncovering Assumptions Underlying Secure Authentication and Authorization. In Proceedings of the 22nd USENIX Security Symposium (Security). Washington, DC.

90. Wang, X., Jhi, Y.-C., Zhu, S., & Liu, P. (2009). Behavior-Based Software Theft Detection. In Proceedings of the 16th ACM Conference on Computer and Communications Security (CCS). Chicago, IL.

91. Wang, X., Jhi, Y.-C., Zhu, S., & Liu, P. (2009). Detecting Software Theft via System Call Based Birthmarks. In Proceedings of the Annual Computer Security Applications Conference (ACSAC). Honolulu, Hawaii, USA.

92. Wang, Y., Hariharan, S., Zhao, C., Liu, J., & Du, W. (2014). Compac: Enforce Component-Level Access Control in Android. In Proceedings of the 4th Annual ACM Conference on Data and Applications Security and Privacy (CODASPY). San Antonio, TX.

93. Zhang, F., Huang, H., Zhu, S., Wu, D., & Liu, P. (2014). ViewDroid: Towards Obfuscation-Resilient Mobile Application Repackaging Detection. In Proceedings of the ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec). Oxford, UK.

94. Zhang, X., Ahlawat, A., & Du, W. (2013). AFrame: Isolating Advertisements from Mobile Applications in Android. In Proceedings of the Annual Computer Security Applications Conference (ACSAC). New Orleans, LA.

95. Zhou, W., Zhou, Y., Grace, M., Jiang, X., & Zou, S. (2013). Fast, Scalable Detection of "Piggybacked" Mobile Applications. In Proceedings of the 3rd Annual ACM Conference on Data and Applications Security and Privacy (CODASPY). San Antonio, TX.

96. Zhou, W., Zhou, Y., Jiang, X., & Ning, P. (2012). Detecting Repackaged Smartphone Applications in Third-Party Android Marketplaces. In Proceedings of the 2nd Annual ACM Conference on Data and Applications Security and Privacy (CODASPY). San Antonio, TX.

97. Zhou, Y., & Evans, D. (2014). SSOScan: Automated Testing of Web Applications for Single Sign-On Vulnerabilities. In Proceedings of the 23rd USENIX Security Symposium (Security). San Diego, CA.

98. Zynamics. (2017). zynamics.com - BinDiff. Retrieved from https://www.zynamics.com/bindiff.html