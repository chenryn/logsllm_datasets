### 7. Related Work

Researchers have proposed various techniques for forcing branch outcomes to patch software failures [51]. Hardware support has also been suggested to facilitate path forcing [31]. Both of these approaches require access to the source code and concrete program inputs. In [48], branch outcomes are forced to explore paths in binary programs, which aids in constructing control flow graphs. However, this technique does not model heap behavior and skips all library calls. Similar methods have been used to expose hidden behaviors in Android applications [22, 45]. These techniques randomly determine branch outcomes, leading to a high number of infeasible paths. Forced execution has also been applied to identify kernel-level rootkits [46]. This method disregards branch outcomes during execution and uses a simple depth-first search. None of these techniques perform exception recovery, instead terminating executions when exceptions occur. Constraint solving has been used to explore execution paths and expose malware behavior [33, 6]. These approaches require concrete inputs initially and then mutate them to explore different paths.

X-Force is related to static binary analysis [21, 3, 25, 42, 41], dynamic binary analysis [30, 39, 24], and symbolic binary analysis [10, 40]. The differences between X-Force and these techniques are discussed in Section 6, supported by empirical results in Section 5. X-Force is also related to failure-oblivious computing [36] and on-the-fly exception recovery [34], which are used for failure tolerance and debugging and require source code.

### 8. Conclusion

We have developed a novel binary analysis engine called X-Force, which forces a binary to execute without any inputs or the required environment. It systematically forces branch outcomes at a small number of predicates to explore different paths. X-Force can recover from exceptions by allocating memory on-demand and fixing correlated pointers. Our experiments on three security applications show that X-Force achieves similar precision to dynamic analysis but with much better coverage due to its ability to explore many paths with any inputs.

### Acknowledgements

This work was motivated in part by the earlier research of Dr. Vinod Yegneswaran on brute-force malware execution and analysis. His influence and support are gratefully acknowledged. This research has been supported, in part, by DARPA under Contract 12011593 and by a gift from Cisco Systems. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of the sponsors.

### References

[1] Exposing the password secrets of Internet Explorer. http://securityxploded.com/iepasswordsecrets.php.

[2] G. Balakrishnan, R. Gruian, T. Reps, and T. Teitelbaum. Codesurfer/x86–a platform for analyzing x86 executables. In Proceedings of International Conference on Compiler Construction (CC), 2005.

[3] G. Balakrishnan and T. Reps. Analyzing memory accesses in x86 executables. In Proceedings of International Conference on Compiler Construction (CC), 2004.

[4] D. Balzarotti, M. Cova, C. Karlberger, E. Kirda, C. Kruegel, and G. Vigna. Efficient detection of split personalities in malware. In Proceedings of Network and Distributed System Security Symposium (NDSS), 2010.

[5] R. R. Branco, G. N. Barbosa, and P. D. Neto. Scientific but not academic overview of malware anti-debugging, anti-disassembly, and anti-VM technologies. Blackhat USA'12.

[6] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song, and H. Yin. Automatically identifying trigger-based behavior in malware. In Botnet Detection, 2008.

[7] J. Caballero and D. Song. Polyglot: Automatic extraction of protocol format using dynamic binary analysis. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), 2007.

[8] C. Cadar, D. Dunbar, and D. Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the 8th USENIX conference on Operating Systems Design and Implementation (OSDI), 2008.

[9] M. I. Center. APT1: Exposing one of China's cyber espionage units. Technical report, 2013.

[10] V. Chipounov, V. Kuznetsov, and G. Candea. S2E: A platform for in-vivo multi-path analysis of software systems. In Proceedings of the 16th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2011.

[11] C. Csallner and Y. Smaragdakis. DSD-Crasher: A hybrid analysis tool for bug finding. In Proceedings of International Symposium on Software Testing and Analysis (ISSTA), pages 245–254, 2006.

[12] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol reverse engineering from network traces. In Proceedings of the 16th USENIX Security Symposium (Security), 2007.

[13] W. Cui, M. Peinado, K. Chen, H. J. Wang, and L. Irun-Briz. Tupni: Automatic reverse engineering of input formats. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS), 2008.

[14] Z. Deng, X. Zhang, and D. Xu. Bistro: Binary component extraction and embedding for software security applications. In 18th European Symposium on Research in Computer Security (ESORICS), 2013.

[15] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: Malware analysis via hardware virtualization extensions. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS), 2008.

[16] N. Falliere, L. Murchu, and E. Chien. W32.Stuxnet dossier. White paper, Symantec Corp., Security Response, 2011.

[17] P. Ferrie. Attacks on virtual machine emulators. Symantec Advanced Threat Research, 2006.

[18] P. Ferrie. Attacks on more virtual machine emulators. Symantec Technology Exchange, 2007.

[19] FireEye. Advanced targeted attacks: How to protect against the new generation of cyber attacks. White Paper, 2013.

[20] P. Godefroid, N. Klarlund, and K. Sen. DART: Directed automated random testing. In Proceedings of the ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation (PLDI).

[21] Hex-Rays. IDA Pro disassembler. http://www.hex-rays.com/products/ida/index.shtml.

[22] R. Johnson and A. Stavrou. Forced-path execution for Android applications on x86 platforms. Technical Report, Computer Science Department, George Mason University, 2013.

[23] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda, X. Zhou, and X. Wang. Effective and efficient malware detection at the end host. In Proceedings of the 18th USENIX Security Symposium (Security), 2009.

[24] C. Kolbitsch, T. Holz, C. Kruegel, and E. Kirda. Inspector Gadget: Automated extraction of proprietary gadgets from malware binaries. In 2010 IEEE Symposium on Security and Privacy (SP), pages 29–44, 2010.

[25] J. Lee, T. Avgerinos, and D. Brumley. TIE: Principled reverse engineering of types in binary programs. In Proceedings of the Annual Network and Distributed System Security Symposium (NDSS), 2011.

[26] F. Li. A detailed analysis of an advanced persistent threat malware. SANS Institute, 2011.

[27] J. Lim, T. Reps, and B. Liblit. Extracting file formats from executables. In Proceedings of the 13th Working Conference on Reverse Engineering (WCRE), 2006.

[28] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format reverse engineering through context-aware monitored execution. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS), 2008.

[29] Z. Lin and X. Zhang. Deriving input syntactic structure from execution. In Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE), 2008.

[30] Z. Lin, X. Zhang, and D. Xu. Automatic reverse engineering of data structures from binary execution. In Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS), 2010.

[31] S. Lu, P. Zhou, W. Liu, Y. Zhou, and J. Torrellas. PathExpander: Architectural support for increasing the path coverage of dynamic bug detection. In Proceedings of the 39th Annual IEEE/ACM International Symposium on Micro-architecture (MICRO), 2006.

[32] J. Ma, K. Levchenko, C. Kreibich, S. Savage, and G. M. Voelker. Unexpected means of protocol inference. In Proceedings of the 6th ACM SIGCOMM Conference on Internet Measurement (IMC), pages 313–326, 2006.

[33] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy (SP), pages 231–245, 2007.

[34] F. Qin, J. Tucek, Y. Zhou, and J. Sundaresan. Rx: Treating bugs as allergies—a safe method to survive software failures. ACM Transactions on Computer Systems, 25(3), 2007.

[35] T. Raffetseder, C. Krügel, and E. Kirda. Detecting system emulators. In Proceedings of the 10th International Conference on Information Security (ISC), 2007.

[36] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and W. S. Beebee, Jr. Enhancing server availability and security through failure-oblivious computing. In Proceedings of the 6th Conference on Symposium on Operating Systems Design & Implementation (OSDI), 2004.

[37] N. Riva and F. Falcón. Dynamic binary instrumentation frameworks: I know you're there spying on me. In RECON Conference, 2012.

[38] K. Sen, D. Marinov, and G. Agha. CUTE: A concolic unit testing engine for C. In Proceedings of the 10th European Software Engineering Conference held jointly with the 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE-13), 2005.

[39] A. Slowinska, T. Stancescu, and H. Bos. Howard: A dynamic excavator for reverse engineering data structures. In Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS), 2011.

[40] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena. BitBlaze: A new approach to computer security via binary analysis. In Proceedings of the 4th International Conference on Information Systems Security (ICISS), 2008.

[41] B. D. Sutter, B. D. Bus, K. D. Bosschere, P. Keyngnaert, and B. Demoen. On the static analysis of indirect control transfers in binaries. In Proceedings of Parallel and Distributed Processing Techniques and Applications (PDPTA), 2000.

[42] H. Theiling. Extracting safe and precise control flow from binaries. In Proceedings of the Seventh International Conference on Real-Time Systems and Applications (RTCSA), 2000.

[43] A. Vasudevan and R. Yerraballi. COBRA: Fine-grained malware analysis using stealth localized-executions. In 2006 IEEE Symposium on Security and Privacy (SP), 2006.

[44] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace. Reformat: Automatic reverse engineering of encrypted messages. In Proceedings of the 14th European Symposium on Research in Computer Security (ESORICS), 2009.

[45] Z. Wang, R. Johnson, R. Murmuria, and A. Stavrou. Exposing security risks for commercial mobile devices. In Proceedings of the 6th International Conference on Mathematical Methods, Models, and Architectures for Computer Network Security (MMM-ACNS), pages 3–21, 2012.

[46] J. Wilhelm and T.-c. Chiueh. A forced sampled execution approach to kernel rootkit identification. In Proceedings of the 10th International Conference on Recent Advances in Intrusion Detection (RAID), pages 219–235, 2007.

[47] G. Wondracek, P. Milani, C. Kruegel, and E. Kirda. Automatic network protocol analysis. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS), 2008.

[48] L. Xu, F. Sun, and Z. Su. Constructing precise control flow graphs from binaries. Technical Report CSE-2009-27, Department of Computer Science, UC Davis, 2009.

[49] L.-K. Yan, M. Jayachandra, M. Zhang, and H. Yin. V2E: Combining hardware virtualization and software emulation for transparent and extensible malware analysis. In 8th Annual International Conference on Virtual Execution Environments (VEE), 2012.

[50] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), 2007.

[51] X. Zhang, N. Gupta, and R. Gupta. Locating faults through automated predicate switching. In Proceedings of ACM/IEEE International Conference on Software Engineering (ICSE), 2006.