# Hardening Circuit-Design IP Against Reverse-Engineering Attacks

**Authors:**
- Animesh Chhotaray, University of Florida, chho58@ufl.edu
- Thomas Shrimpton, University of Florida, teshrim@ufl.edu

**Abstract:**
Design-hiding techniques are a critical component in academic and industrial efforts to protect electronic circuits from reverse-engineering. However, these techniques have lacked a principled foundation for their design and security evaluation, leading to numerous failed schemes. In this paper, we aim to establish this missing foundation.

We introduce a formal syntax for design-hiding (DH) schemes, a cryptographic primitive that encompasses all known methods for hiding circuit designs during the fabrication process. We define two security notions for DH schemes: function recovery (FR) and key recovery (KR). While FR aims to prevent the reverse-engineering of the circuit's functionality, most prior work has focused on KR. We present OneChaffhd, the first provably (FR, KR)-secure DH scheme.

A significant side-benefit of our security proof is a framework for analyzing a broad class of new DH schemes. We conclude by providing guidance on setting parameters to ensure security.

**Index Terms:**
- Cryptography
- Provable Security
- Design Hiding
- Hardware Obfuscation
- Logic Locking
- Logic Encryption
- IC Camouflaging

## I. Introduction

Modern integrated circuits (ICs or "chips") are the result of a globally distributed supply chain [1]. The high cost of building and operating chip fabrication facilities forces circuit designers to outsource their digital intellectual property (IP) to external foundries. In 2018, just ten foundries accounted for over 95% of the chip-fabrication market [2].

Given the limited choices for fabrication, IP authors are motivated to protect their high-value circuit designs from being reverse-engineered and stolen by untrusted foundries. The three major security issues in the IC supply chain are IP theft, insertion of malicious implants (or trojans), and production of counterfeit ICs. We focus on IP theft because it is intuitively more difficult for an adversary to insert trojans or produce counterfeits without access to the original circuit design. Reports estimate the cost of IP theft and subsequent counterfeiting to be over $100 billion in 2011 alone [3], [4].

While legal restrictions exist, foundries can still steal and sell counterfeit chips in the black market, giving them an incentive to do so. IP theft occurs when the foundry obtains the gate-and-wire layout of the circuit. Consequently, there has been a surge in research on methods to "hide" the circuit IP [5], which we refer to as design-hiding (DH) schemes. A key constraint is that the IP author must still enable the foundry to fabricate a useful chip; simply encrypting the layout is insufficient.

### Framing the Problem

Figure 1 provides a simplified view of the setting for DH schemes. The IP author hides (Fig. 1(a)) the underlying functionality F of the plaintext circuit by presenting the foundry with an opaque version. The foundry then fabricates (Fig. 1(b)) physical chips that compute whatever the opaque circuit does. These chips may not compute F, but the IP author can restore (Fig. 1(c)) the functionality. The goal is that only the IP author can produce a chip that correctly computes F, and only they can execute the restoration mechanism properly. Restored chips can then enter the market and be purchased by end-users.

### Characterizing Prior Approaches

Prior work on DH schemes falls into three categories: logic locking [6]–[8], IC camouflaging [8]–[10], and split manufacturing [11], [12]. Logic locking techniques are used when the entire fabrication process is outsourced to an untrusted foundry. The foundry receives a complete circuit description, possibly with a small block of uninitialized, tamper-resistant memory. This is the most common setting in the literature on circuit-design hiding. Split manufacturing aims to prevent hardware-trojan insertion by spreading the fabrication across multiple parties, one of which is typically trusted. IC camouflaging is used when the IP author trusts the foundry but not the end-user, employing opaque circuits with camouflaged logic cells.

Our focus is on adversarial foundries, making IC camouflaging out of scope. Split manufacturing requires the IP author to have fabrication capabilities, which is often not practical. Therefore, we concentrate on the logic-locking approach, building DH schemes that are provably secure in the attack model assumed by logic-locking schemes. The foundry has unrestricted access to the opaque circuit and full control over the fabrication process, making this a challenging setting. The foundry may also act as an end-user by purchasing and testing restored chips, potentially learning the value of the original circuit design on a subset of inputs. Our syntax covers IC camouflaging and split manufacturing techniques, but our focus is on logic locking. For historical context, see Section A.

### Advancing the State of the Art

Logic-locking schemes (2008–2021) were efficient in terms of power, performance, and area overhead but ultimately insecure. This is attributed to a narrow view of security combined with a focus on efficiency. In their 2019 paper, Sirone and Subramanyan broke the "provably secure" SFLL-HD scheme [15], stating:

"Our results reinforce the observation that all logic locking schemes appear to be vulnerable to attack. This is because the logic locking community has not adopted notions of provable security from cryptography." [16]

The paper presenting SFLL-HD claimed provable security against three prominent attacks but not the FALL attack. This underscores the need for a scheme to claim security only if it provably thwarts all (suitably efficient) attacks admitted by a well-defined security notion.

In response, we provide a principled, provable-security foundation for DH schemes. Our main contributions are:

1. **Formalization of DH Schemes:** We define DH schemes as an abstract, syntactic object with two component algorithms, Hide and Restore, corresponding to the hiding and restoration phases. We also elevate the fabrication step to an explicit algorithm, Fab, which has important security implications.

2. **Security Notions:** We establish two security notions, function recovery (FR) and key recovery (KR), capturing the capabilities and goals of an adversarial foundry. These notions formalize the attack model considered in prior works and address details often overlooked, such as a priori knowledge about the hidden function F. The SAT attack [17] and other key-recovery attacks [16]–[26] are admitted by our KR-security notion. Theorem 1 shows that KR insecurity implies FR insecurity, meaning prior logic-locking schemes cannot achieve our FR security notion.

3. **OneChaffhd Scheme:** We present OneChaffhd, the first DH scheme that provably achieves (FR, KR) security. This scheme also provides a framework for analyzing a broad class of new DH schemes. We conclude by providing parameter-setting guidance to ensure security.

**References:**
- [1] Reference 1
- [2] Reference 2
- [3] Reference 3
- [4] Reference 4
- [5] Reference 5
- [6] Reference 6
- [7] Reference 7
- [8] Reference 8
- [9] Reference 9
- [10] Reference 10
- [11] Reference 11
- [12] Reference 12
- [13] Reference 13
- [14] Reference 14
- [15] Reference 15
- [16] Reference 16
- [17] Reference 17
- [18] Reference 18
- [19] Reference 19
- [20] Reference 20
- [21] Reference 21
- [22] Reference 22
- [23] Reference 23
- [24] Reference 24
- [25] Reference 25
- [26] Reference 26
- [27] Reference 27
- [28] Reference 28
- [29] Reference 29
- [30] Reference 30
- [31] Reference 31
- [32] Reference 32

**DOI: 10.1109/SP46214.2022.00023**

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 12:33:25 UTC from IEEE Xplore. Restrictions apply.**