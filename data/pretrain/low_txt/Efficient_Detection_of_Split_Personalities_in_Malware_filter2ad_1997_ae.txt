# Table 4: Real Malware with VM Checks
| Malware | Deviation Detected? |
|---------|---------------------|
| tElock   | YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |
| Armadillo| YES                 |

## Introduction to Malware Analysis and Detection

Malware analysis and detection are critical in the field of cybersecurity. Traditional methods, such as those used in anti-virus scanners, rely on string signatures to identify specific malware binaries [36]. However, these methods can be easily evaded through code obfuscation and runtime packing. To address this, researchers have developed more sophisticated techniques, including model checking [12], recognition of structural similarities between malware samples [24], and semantics-aware analysis of code templates [13].

### Dynamic Detection Techniques

Dynamic detection techniques complement static analysis by detecting the execution of malicious code based on system call patterns [28]. Tools like Detours [21] intercept Win32 function calls, while others perform taint analysis and track data dependencies between system calls and library functions [9, 40]. This allows for a more precise capture of malware behavior.

### Sandboxing

Currently, the most popular approach for malware analysis is the use of sandboxes [1, 3–6, 8]. A sandbox is an instrumented execution environment that runs an unknown program, recording its interactions with the operating system or other hosts. These environments are often realized as system emulators or virtual machines.

### Stealth and Transparent Analysis

Given the popularity of emulators and virtual machines for dynamic analysis, there have been numerous attempts to develop checks to detect them. Red Pill [33] is one of the most well-known checks for VMware. Additional checks have been developed for other emulators such as Bochs and Qemu [19, 31, 32]. Researchers have identified instructions that behave differently on emulators versus real hosts using both manual and automated fuzz testing techniques [31, 19, 32].

Efforts to detect emulators and virtual machines have led to the development of systems that aim to remain transparent. Initial work focused on removing specific artifacts in VMware [26]. Later, more comprehensive systems were proposed, using virtualization [16] or dynamic translation combined with stealth implants [38] to remain undetected. While these systems are effective, they often incur a performance penalty, making them impractical for large-scale automated malware analysis.

### Detecting Malware Checks

Researchers have also explored ways to detect whether a malware sample contains checks for analysis environments. Systems like those presented in [11] and [22] compare the behavior of a sample on a reference (real) host with its behavior on an analysis (virtual) host. However, simply re-running the same sample in different environments can lead to different behaviors not related to malware checks, making this approach unreliable. The system in [22] also uses a costly technique (Ether in fine-grained analysis mode) to produce a reference system call trace.

### Process and System Replay

Several systems aim to provide deterministic replay of applications or entire systems [14]. For example, ReVirt [18] uses UMLinux to monitor a process and create logs of its interactions with the guest operating system. Flashback [35] is a debugging tool for Linux that allows process replaying by creating shadow processes at checkpoints. Jockey [34] inserts trampoline functions into system call code to record parameter values. Tornado [29] enables replaying application input by intercepting and replaying system calls. ExecRecorder [15] is a virtual-machine-based log and replay framework for post-attack analysis and recovery, capable of running Windows in its virtual environment. However, all these systems run on Linux, limiting their use for analyzing Windows binaries.

### Conclusion

Malicious code remains a significant security threat on the Internet. Dynamic malware analysis systems (sandboxes) are valuable tools, but malware authors have started adding checks to detect these environments. When detected, malware may hide its functionality or crash, leading to incorrect classification by security analysts. In this paper, we present a technique to reliably and efficiently identify malware programs that attempt to detect the presence of Anubis (our emulator-based sandbox) and similar tools. Our technique records the system call trace of a program on an uninstrumented reference system and then replays the inputs on the analysis system. If the program shows different behavior, it is flagged for further examination. Our experiments demonstrate the effectiveness and efficiency of our system in detecting binaries with split personalities.

### Acknowledgements

This work was supported by the Austrian Science Foundation (FWF) under grant P18764, Secure Business Austria (SBA), and the WOMBAT and FORWARD projects funded by the European Commission in the 7th Framework. Marco Cova was partially supported by a Symantec Research Labs Graduate Fellowship.

### References

[1] Anubis: Analyzing Unknown Binaries. http://anubis.seclab.tuwien.ac.at, 2009.
[2] Computer Forensic Solutions. http://cfs-llc.net/index.htm, 2009.
[3] CWSandbox. http://www.cwsandbox.org/, 2009.
[4] Joebox: A Secure Sandbox Application for Windows. http://www.joebox.org/, 2009.
[5] Norman Sandbox. http://www.norman.com/technology/norman_sandbox/, 2009.
[6] ThreatExpert. http://www.threatexpert.com/, 2009.
[7] U. Bayer, D. Balzarotti, E. Kirda, and C. Kruegel. Insights Into Current Malware Behavior. In Proceedings of the USENIX Workshop on Large-Scale Exploits and Emergent Threats (LEET), 2009.
[8] U. Bayer, C. Kruegel, and E. Kirda. TTAnalyze: A Tool for Analyzing Malware. In Proceedings of the European Institute for Computer Antivirus Research Annual Conference (EICAR), 2006.
[9] U. Bayer, P. Milani Comparetti, C. Hlauschek, C. Kruegel, and E. Kirda. Scalable, Behavior-Based Malware Clustering. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2009.
[10] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song, and H. Yin. Automatically Identifying Trigger-based Behavior in Malware. In W. Lee, C. Wang, and D. Dagon, editors, Botnet Detection: Countering the Largest Security Threat. Springer, 2007.
[11] X. Chen, J. Andersen, Z. Mao, M. Bailey, and J. Nazario. Towards an Understanding of Anti-virtualization and Anti-debugging Behavior in Modern Malware. In Proceedings of the International Conference on Dependable Systems and Networks (DSN), 2008.
[12] M. Christodorescu and S. Jha. Static Analysis of Executables to Detect Malicious Patterns. In Proceedings of the USENIX Security Symposium, 2003.
[13] M. Christodorescu, S. Jha, S. Seshia, D. Song, and R. Bryant. Semantics-aware Malware Detection. In Proceedings of the IEEE Symposium on Security and Privacy, 2005.
[14] F. Cornelis, A. Georges, M. Christiaens, M. Ronsse, T. Ghesquiere, and K. D. Bosschere. A Taxonomy of Execution Replay Systems. In Proceedings of the International Conference on Advances in Infrastructure for Electronic Business, Education, Science, Medicine, and Mobile Technologies on the Internet, 2003.
[15] D. A. S. de Oliveira, J. R. Crandall, G. Wassermann, S. F. Wu, Z. Su, and F. T. Chong. ExecRecorder: VM-Based Full-System Replay for Attack Analysis and System Recovery. In Proceedings of the Workshop on Architectural and System Support for Improving Software Dependability (ASID), pages 66–71, New York, NY, USA, 2006. ACM.
[16] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2008.
[17] L. Dorrendorf, Z. Gutterman, and B. Pinkas. Cryptanalysis of the Windows Random Number Generator. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2007.
[18] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen. ReVirt: Enabling Intrusion Analysis through Virtual-Machine Logging and Replay. SIGOPS Oper. Syst. Rev., 36(SI):211–224, 2002.
[19] P. Ferrie. Attacks on Virtual Machines. In Proceedings of the Association of Anti-Virus Asia Researchers Conference, 2007.
[20] T. Garfinkel, K. Adams, A. Warfield, and J. Franklin. Compatibility is Not Transparency: VMM Detection Myths and Realities. In Proceedings of the USENIX Workshop on Hot Topics in Operating Systems, 2007.
[21] G. Hunt and D. Brubacher. Detours: Binary Interception of Win32 Functions. In Proceedings of the USENIX Windows NT Symposium, pages 135–144, Berkeley, CA, USA, 1999. USENIX Association.
[22] M. G. Kang, H. Yin, S. Hanna, S. McCamant, and D. Song. Emulating Emulation-Resistant Malware. In Proceedings of the Workshop on Virtual Machine Security (VMSec), 2009.
[23] T. Klein. ScoopyNG – The VMware detection tool. http://www.trapkit.de/research/vmm/scoopyng/index.html.
[24] C. Kruegel, E. Kirda, D. Mutz, W. Robertson, and G. Vigna. Polymorphic Worm Detection Using Structural Information of Executables. In Symposium on Recent Advances in Intrusion Detection (RAID), 2005.
[25] K. P. Lawton. Bochs: A Portable PC Emulator for Unix/X. Linux Journal, (29), 1996.
[26] T. Liston and E. Skoudis. On the Cutting Edge: Thwarting Virtual Machine Detection. http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf, 2006.
[27] L. Martignoni, R. Paleari, G. F. Roglia, and D. Bruschi. Testing CPU Emulators. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA), 2009.
[28] L. Martignoni, E. Stinson, M. Fredrikson, S. Jha, and J. Mitchell. A Layered Architecture for Detecting Malicious Behaviors. In Proceedings of the Symposium on Recent Advances in Intrusion Detection (RAID), 2008.
[29] F. C. Michiel, F. Cornelis, M. Ronsse, and K. D. Bosschere. TORNADO: A Novel Input Replay Tool. In Proceedings of the International Conference on Parallel and Distributed Processing Techniques and Applications (PDPTA), pages 1598–1604, 2003.
[30] A. Moser, C. Kruegel, and E. Kirda. Exploring Multiple Execution Paths for Malware Analysis. In Proceedings of the IEEE Symposium on Security and Privacy, 2007.
[31] R. Paleari, L. Martignoni, G. F. Roglia, and D. Bruschi. A Fistful of Red-Pills: How to Automatically Generate Procedures to Detect CPU Emulators. In Proceedings of the USENIX Workshop on Offensive Technologies (WOOT), 2009.
[32] T. Raffetseder, C. Kruegel, and E. Kirda. Detecting System Emulators. In Proceedings of the Information Security Conference, 2007.
[33] J. Rutkowska. Red Pill... or how to detect VMM using (almost) one CPU instruction. http://www.invisiblethings.org/papers/redpill.html, 2004.
[34] Y. Saito. Jockey: A User-space Library for Record-replay Debugging. In Proceedings of the International Symposium on Automated Analysis-driven Debugging (AADEBUG), pages 69–76, 2005.
[35] S. M. Srinivasan, S. Kandula, S. K, C. R. Andrews, and Y. Zhou. Flashback: A Lightweight Extension for Rollback and Deterministic Replay for Software Debugging. In Proceedings of the USENIX Annual Technical Conference, pages 29–44, 2004.
[36] P. Szor. The Art of Computer Virus Research and Defense. Addison Wesley, 2005.
[37] A. Vasudevan and R. Yerraballi. Stealth Breakpoints. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2005.
[38] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained Malware Analysis using Stealth Localized Executions. In Proceedings of the IEEE Symposium on Security and Privacy, 2006.
[39] J. Wilhelm and T. Chiueh. A Forced Sampled Execution Approach to Kernel Rootkit Identification. In Proceedings of the Symposium on Recent Advances in Intrusion Detection (RAID), 2007.
[40] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: Capturing System-wide Information Flow for Malware Detection and Analysis. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2007.