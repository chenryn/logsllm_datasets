### 2.3 Execution Time and Normalization

The number of vertices is not the only factor influencing execution time. Larger signatures often imply stronger structural constraints between their vertices, which can lead to more rapid convergence of the subgraph isomorphism algorithm towards a solution.

In the normalization step, each rewrite rule is linear with respect to the number of vertices, except for the common subexpression rule, which has a quadratic complexity (at least in its naive implementation). However, as previously stated, the rewrite rules are iteratively applied until a fixed point is reached. Therefore, the execution time also depends on the distance between the original DFG and its normalized version. In practice, the normalization step's execution time does not exceed that of the signature matching.

Despite the theoretical complexity of the underlying algorithms, the observed execution times on synthetic samples appear to be acceptable.

### 9. Conclusion

In this paper, we presented a novel method for identifying symmetric cryptographic algorithms in binary programs. We introduced a DFG (Data Flow Graph) representation, which was first used in a normalization step designed to enhance detection capabilities by erasing the peculiarities of each instance of an algorithm. The normalized DFG was then compared to the signatures in a database using a subgraph isomorphism algorithm. Our signatures cover the full length of the algorithm, not just isolated groups of distinctive instructions, ensuring no false positives and automatically identifying the input and output parameters of the cryptographic primitive as part of the signature boundary.

We developed a prototype and tested it against several synthetic samples covering three cryptographic algorithms: XTEA, MD5, and AES. Our results demonstrated that our approach is robust across a wide range of compilation conditions. We also provided results on well-known cryptographic libraries.

For future work, we plan to extend our approach to cover block cipher modes of operation by leveraging the concept of macro-signatures. Additionally, we aim to expand our method to automatically identify public key cryptographic algorithms. To make our contribution more practical for security auditors and to support more algorithms, we intend to automatically generate signatures from reference implementations. Finally, we leave the challenging problem of dealing with obfuscated code for future research.

### 10. Acknowledgments

The authors would like to thank Pierre Karpman for his valuable assistance and feedback.

### 11. References

[1] Botan. http://botan.randombit.net/.

[2] Crypto++. http://www.cryptopp.com/.

[3] OpenSSL. https://www.openssl.org/.

[4] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley, 1986.

[5] G. Balakrishnan and T. W. Reps. WYSINWYX: what you see is not what you execute. ACM Trans. Program. Lang. Syst., 32(6), 2010.

[6] A. Biryukov. The design of a stream cipher LEX. In E. Biham and A. M. Youssef, editors, Selected Areas in Cryptography, volume 4356 of Lecture Notes in Computer Science, pages 67–75. Springer, 2006.

[7] J. Calvet, J. M. Fernandez, and J.-Y. Marion. Aligot: cryptographic function identification in obfuscated binary programs. In T. Yu, G. Danezis, and V. D. Gligor, editors, ACM Conference on Computer and Communications Security, pages 169–182. ACM, 2012.

[8] C. Clavier and K. Gaj, editors. Cryptographic Hardware and Embedded Systems - CHES 2009, 11th International Workshop, Lausanne, Switzerland, September 6-9, 2009, Proceedings, volume 5747 of Lecture Notes in Computer Science. Springer, 2009.

[9] J. Daemen and V. Rijmen. The Design of Rijndael: AES - The Advanced Encryption Standard. Information Security and Cryptography. Springer, 2002.

[10] T. S. Denis. Libtomcrypt. http://libtom.org/.

[11] S. Even and Y. Mansour. A construction of a cipher from a single pseudorandom permutation. J. Cryptology, 10(3):151–162, 1997.

[12] D. Genkin, A. Shamir, and E. Tromer. RSA key extraction via low-bandwidth acoustic cryptanalysis. In J. A. Garay and R. Gennaro, editors, Advances in Cryptology - CRYPTO 2014 - 34th Annual Cryptology Conference, Santa Barbara, CA, USA, August 17-21, 2014, Proceedings, Part I, volume 8616 of Lecture Notes in Computer Science, pages 444–461. Springer, 2014.

[13] F. Gröbert, C. Willems, and T. Holz. Automated identification of cryptographic primitives in binary programs. In R. Sommer, D. Balzarotti, and G. Maier, editors, RAID, volume 6961 of Lecture Notes in Computer Science, pages 41–60. Springer, 2011.

[14] I. Guilfanov. Findcrypt2. http://www.hexblog.com/?p=28, February 2006.

[15] S. Halevi, W. E. Hall, and C. S. Jutla. The hash function "Fugue". IACR Cryptology ePrint Archive, 2014:423, 2014.

[16] M. Hamburg. Accelerating AES with vector permute instructions. In Clavier and Gaj [8], pages 18–32.

[17] E. Käsper and P. Schwabe. Faster and timing-attack resistant AES-GCM. In Clavier and Gaj [8], pages 1–17.

[18] J. Kelsey, B. Schneier, and D. Wagner. Related-key cryptanalysis of 3-way, Biham-DES, CAST, DES-X, NewDES, RC2, and TEA. In Y. Han, T. Okamoto, and S. Qing, editors, Information and Communication Security, First International Conference, ICICS'97, Beijing, China, November 11-14, 1997, Proceedings, volume 1334 of Lecture Notes in Computer Science, pages 233–246. Springer, 1997.

[19] W. M. Khoo, A. Mycroft, and R. Anderson. Rendezvous: a search engine for binary code. In T. Zimmermann, M. D. Penta, and S. Kim, editors, Proceedings of the 10th Working Conference on Mining Software Repositories, MSR '13, San Francisco, CA, USA, May 18-19, 2013, pages 329–338. IEEE / ACM, 2013.

[20] N. Lutz. Towards revealing attacker’s intent by automatically decrypting network traffic. Master’s thesis, ETH Zurich, July 2008.

[21] J. Manger. A chosen ciphertext attack on RSA optimal asymmetric encryption padding (OAEP) as standardized in PKCS #1 v2.0. In J. Kilian, editor, Advances in Cryptology - CRYPTO 2001, 21st Annual International Cryptology Conference, Santa Barbara, California, USA, August 19-23, 2001, Proceedings, volume 2139 of Lecture Notes in Computer Science, pages 230–238. Springer, 2001.

[22] M. Matsui and J. Nakajima. On the power of bitslice implementation on Intel Core2 processor. In P. Paillier and I. Verbauwhede, editors, CHES, volume 4727 of Lecture Notes in Computer Science, pages 121–134. Springer, 2007.

[23] P. Q. Nguyen. Can we trust cryptographic software? Cryptographic flaws in GNU Privacy Guard v1.2.3. In C. Cachin and J. Camenisch, editors, Advances in Cryptology - EUROCRYPT 2004, International Conference on the Theory and Applications of Cryptographic Techniques, Interlaken, Switzerland, May 2-6, 2004, Proceedings, volume 3027 of Lecture Notes in Computer Science, pages 555–570. Springer, 2004.

[24] R. Rivest. The MD5 Message-Digest Algorithm. RFC 1321, April 1992.

[25] A. Sæbjørnsen, J. Willcock, T. Panas, D. J. Quinlan, and Z. Su. Detecting code clones in binary executables. In G. Rothermel and L. K. Dillon, editors, Proceedings of the Eighteenth International Symposium on Software Testing and Analysis, ISSTA 2009, Chicago, IL, USA, July 19-23, 2009, pages 117–128. ACM, 2009.

[26] E. Tromer, D. A. Osvik, and A. Shamir. Efficient cache attacks on AES, and countermeasures. J. Cryptology, 23(1):37–71, 2010.

[27] J. R. Ullmann. An algorithm for subgraph isomorphism. J. ACM, 23(1):31–42, 1976.

[28] S. Vaudenay. Security flaws induced by CBC padding - applications to SSL, IPsec, WTLS... In L. R. Knudsen, editor, Advances in Cryptology - EUROCRYPT 2002, International Conference on the Theory and Applications of Cryptographic Techniques, Amsterdam, The Netherlands, April 28 - May 2, 2002, Proceedings, volume 2332 of Lecture Notes in Computer Science, pages 534–546. Springer, 2002.

[29] R. Wang, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Steal this movie: Automatically bypassing DRM protection in streaming media services. In S. T. King, editor, USENIX Security, pages 687–702. USENIX Association, 2013.

[30] X. Wang, N. Zeldovich, M. F. Kaashoek, and A. Solar-Lezama. Towards optimization-safe systems: Analyzing the impact of undefined behavior. In M. Kaminsky and M. Dahlin, editors, ACM SIGOPS 24th Symposium on Operating Systems Principles, SOSP '13, Farmington, PA, USA, November 3-6, 2013, pages 260–275. ACM, 2013.

[31] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace. Reformat: Automatic reverse engineering of encrypted messages. In M. Backes and P. Ning, editors, ESORICS, volume 5789 of Lecture Notes in Computer Science, pages 200–215. Springer, 2009.

[32] D. J. Wheeler and R. M. Needham. TEA, a tiny encryption algorithm. In B. Preneel, editor, Fast Software Encryption: Second International Workshop. Leuven, Belgium, 14-16 December 1994, Proceedings, volume 1008 of Lecture Notes in Computer Science, pages 363–366. Springer, 1994.

[33] T. Xie, F. Liu, and D. Feng. Fast collision attack on MD5. IACR Cryptology ePrint Archive, 2013:170, 2013.

[34] R. Zhao, D. Gu, J. Li, and R. Yu. Detection and analysis of cryptographic data inside software. In X. Lai, J. Zhou, and H. Li, editors, Information Security, 14th International Conference, ISC 2011, Xi’an, China, October 26-29, 2011. Proceedings, volume 7001 of Lecture Notes in Computer Science, pages 182–196. Springer, 2011.

### B. MD5 Implementation Reminder

MD5 [24] is a cryptographic hash function that, given a message of any size, produces a 128-bit hash. The message is divided into 512-bit chunks, with padding applied to the last chunk if necessary. The MD5 algorithm is based on a four-branch Feistel network that operates on a 128-bit state and consists of 64 rounds. We use the following notations: \( f_i \) is the round function of round \( i \), \( \{k_i, 1 \leq i \leq 64\} \) is a set of specific constants, \( M \) is an input message chunk, and \( (A_{1,i}, A_{2,i}, A_{3,i}, A_{4,i}) \) is the 128-bit state at the beginning of round \( i \), divided into four words of 32 bits. At each round \( (1 \leq i \leq 64) \), the state is updated according to the following equations:

\[
A_{1,i+1} = A_{4,i}
\]
\[
A_{2,i+1} = f_i(A_{1,i}, A_{2,i}, A_{3,i}, A_{4,i}, M, k_i)
\]
\[
A_{3,i+1} = A_{2,i}
\]
\[
A_{4,i+1} = A_{3,i}
\]

The round function \( f_i \) contains a boolean function that changes every 16 rounds (four distinct boolean functions are used for the 64 rounds). Apart from this boolean function, the round function remains the same for every round. Typically, the 64 rounds are directly unrolled in the source code, as in the C source code given in the appendix of the RFC.

For the first two series of rounds (rounds 1 to 16 and 17 to 32), different formulas might be used to compute the boolean functions. A different formula than the one provided in the RFC might be used for improved efficiency (it can be implemented using fewer bitwise instructions).

### C. TEA & XTEA Implementation Reminder

Tiny Encryption Algorithm (TEA) [32] is a 64-bit block cipher with a 128-bit key. It is based on a two-branch Feistel network that operates on a 64-bit state. Rounds are usually grouped in pairs, forming cycles, with the recommended number of cycles being 32. However, TEA suffers from related-key attacks [18]. To address this weakness, Needham and Wheeler proposed an extended version of TEA called XTEA. XTEA has a different key scheduling and round function. Both TEA and XTEA were designed as small C programs performing simple operations on 32-bit words. The only known implementation variation concerns the key scheduling. Since the key scheduling is extremely simple, some implementations do not compute the round keys separately but do so directly in each round.

### Appendix

#### A. AES Implementation Reminder

The Advanced Encryption Standard (AES) [9] is a Substitution Permutation Network (SPN) that can be instantiated with three different key bit-lengths: 128, 192, and 256. The 128-bit plaintext initializes the internal state, viewed as a 4 × 4 matrix of bytes seen as elements of the finite field \( \text{GF}(2^8) \), defined via the irreducible polynomial \( x^8 + x^4 + x^3 + x + 1 \) over \( \text{GF}(2) \). Depending on the version of AES, \( N_r \) rounds are applied to the state: \( N_r = 10 \) for AES-128, \( N_r = 12 \) for AES-192, and \( N_r = 14 \) for AES-256. Each of the \( N_r \) AES rounds applies four operations to the state matrix (except the last one, where the MixColumns step is omitted):

- **AddRoundKey**: Adds a 128-bit subkey to the state.
- **SubBytes**: Applies the same 8-bit to 8-bit invertible S-Box \( S \) 16 times in parallel on each byte of the state.
- **ShiftRows**: Shifts the \( i \)-th row left by \( i \) positions.
- **MixColumns**: Replaces each of the four columns \( C \) of the state by \( M \times C \), where \( M \) is a constant 4 × 4 maximum distance separable matrix over \( \text{GF}(2^8) \).

After the \( N_r \)-th round has been applied, a final subkey is added to the internal state to produce the ciphertext. A key expansion algorithm is used to produce the \( N_r + 1 \) subkeys required for all AES variants.

From an implementation perspective, the ShiftRows and MixColumns steps can be combined with the SubBytes step, resulting in four lookup tables of 1 kilobyte each. We introduce the following notations: \( A_i \) is the state at round \( i \), divided into four 32-bit words, and \( T_i \) (where \( 0 \leq i \leq 3 \)) is a function that, given a 32-bit word, extracts the \( i \)-th most significant byte and returns the associated 32-bit word in the \( i \)-th lookup table. For each full round \( (1 \leq i \leq N_r - 1) \), the combination of the ShiftRows, MixColumns, and SubBytes can be implemented using the following pseudo code (we have omitted the AddRoundKey for brevity):

\[
A_{i+1}[0] = T_0(A_i[0]) \oplus T_1(A_i[1]) \oplus T_2(A_i[2]) \oplus T_3(A_i[3])
\]
\[
A_{i+1}[1] = T_0(A_i[1]) \oplus T_1(A_i[2]) \oplus T_2(A_i[3]) \oplus T_3(A_i[0])
\]
\[
A_{i+1}[2] = T_0(A_i[2]) \oplus T_1(A_i[3]) \oplus T_2(A_i[0]) \oplus T_3(A_i[1])
\]
\[
A_{i+1}[3] = T_0(A_i[3]) \oplus T_1(A_i[0]) \oplus T_2(A_i[1]) \oplus T_3(A_i[2])
\]

This implementation, known as the tables implementation, is the most widespread. However, it is not the only efficient way to implement AES. Matsui et al. [22] and Käsper et al. [17] proposed bitsliced implementations, which process several blocks in parallel, taking advantage of SIMD architecture. Nevertheless, bitsliced implementations can only be used in parallel modes of operation (such as the counter mode). Hamburg [16] demonstrated that it is feasible to implement a single-block AES encryption with vector permute instructions. Finally, recent CPUs have dedicated AES instructions to achieve the best performance and highest security levels. These alternative implementations are mentioned here for completeness, but this work only covers the tables implementation.