### Performance Comparison with LESE

NEUEX outperforms LESE by two orders of magnitude on average. This comparison highlights that NEUEX’s neural mode can handle loops by synthesizing loop constraints in the form of a neural network, without the need for detailed program analysis.

### Veritesting Comparison

We compared NEUEX with Veritesting [33]. Since the original implementation used in the paper is not publicly available, we utilized its publicly available re-implementation as part of the Angr binary analysis framework [1], [94]. We chose the cURL program for our comparison because vanilla KLEE was able to find the cURL exploit in 34 minutes, making it a suitable benchmark for evaluating conceptual advances over KLEE.

The Veritesting implementation in Angr requires a target address where it aims to find exploits. We provided the known vulnerability point address in cURL as the target address. We used the same symbolic arguments for Angr as we did for KLEE and NEUEX. We then executed Angr’s symbolic execution routine with the Veritesting flag enabled to find concrete inputs that reach the vulnerability.

In 12 hours, Angr analyzed a total of 530 unique instructions, 2,353 symbolic states, 38 static analysis calls for Veritesting, and 198 unique external functions where stubs were not available. However, Veritesting was unable to reach the vulnerability within this time frame.

### Related Work

#### Constraint Synthesis and Solving

NEUEX introduces a new design point in constraint synthesis and solving. In this section, we discuss the limitations of existing symbolic execution tools and highlight how NEUEX differs from these approaches.

##### Symbolic Execution

Symbolic execution [68] has been widely used for program verification [50], software testing [40], and program repair via specification inference [80]. Over the past decade, dynamic symbolic execution [62] has gained popularity, as it partitions the input space to achieve increased behavioral coverage. The input partitions are often defined as program paths, with all inputs tracing the same path belonging to the same partition. This approach suffers from the path explosion problem, which is exacerbated by complex control flows, including long-running loops and external libraries. NEUEX mitigates this issue by learning constraints directly from test executions.

Addressing path explosion is a major challenge in symbolic execution. Boonstopel et al. [37] suggest pruning redundant paths during the construction of the symbolic execution tree. Another predominant method is summarizing the behavior of code fragments in a program [31], [33], [60], [72], [92]. Summarization techniques provide an approximation of the behavior of certain program fragments to maintain scalability. This is particularly useful when analyzing remote calls or libraries written in different languages.

Among the past approaches, Godefroid [60] studied the use of function summaries, which can also be computed on-demand [31]. Kuznetsov et al. [72] present a selective technique to merge dynamic states based on the difficulty of solving the resultant Satisfiability Modulo Theory (SMT) constraints. Veritesting [33] combines dynamic and static symbolic execution to reduce path explosion, but still faces challenges with unknown function calls and SMT solver timeouts. We conceptually and experimentally compare NEUEX with this approach. Other related works [84], [92] suggest grouping paths based on similar symbolic expressions in variables and using these expressions as dynamic summaries.

##### Constraint Synthesis

To support the summarization of program behaviors, we propose a new constraint synthesis approach that uses neural networks to learn infeasible constraints for symbolic execution. Unlike previous solutions, NEUEX does not require predefined constraint templates and can learn any kind of relationships between variables.

Over the last decade, there have been two main lines of work in constraint synthesis: white-box and black-box approaches. White-box constraint inference relies on lightweight techniques such as abstract interpretation [47], [48], [86], interpolation [43], [67], [76], or model checking algorithm IC3 [38]. While some white-box approaches can provide sound and complete constraints [46], they depend on the availability of source code and human-specified semantics. These techniques often require significant manual expertise and can be computationally intensive.

For scenarios where source code is unavailable, there are several works on reverse engineering from dynamic executions [54], [58], [66], [81]–[83]. These works generate summaries of observed behavior from test executions, though these summaries are not guaranteed to be complete. Daikon [54] is one of the earlier works proposing the synthesis of potential invariants from values observed in test executions. DIG extends Daikon to enable the dynamic discovery of non-linear polynomial invariants [82]. Krishna et al. [70] use decision trees, a machine learning technique, to learn inductive constraints from good and bad test executions.

NEUEX introduces a new gradient-based constraint solver, the first to solve the conjunction of neural and SMT constraints. Angora [42] uses a similar gradient-based approach but for a different purpose, treating branch predicates as a black-box function. NEUEX, on the other hand, encodes symbolic constraints into a differentiable function and embeds them into neural constraints. A concurrent work, NeuZZ [93], uses neural networks to guide random fuzzing to predict control-flow edges. Our work, however, uses neural networks to enhance dynamic symbolic execution. Li et al. [74] propose a method to solve symbolic constraints using a classification-based optimization technique called RACOS [99], but their work does not attempt to learn a non-symbolic representation of the program to alleviate the difficulties of symbolic analyses.

### Conclusion

NEUEX leverages neural networks to inductively learn constraints that approximate program behavior. Our proposed neuro-symbolic execution solves both neural and symbolic constraints together, serving as a general-purpose testing and analysis engine for programs. NEUEX’s solver offers a new design to effectively solve both types of constraints, thereby augmenting symbolic execution. Our technique finds 94% more bugs than vanilla dynamic symbolic execution.

### Acknowledgments

We thank Marcel Böhme, Shruti Tople, Shin Hwei Tan, Xiang Gao, Sergey Mechtaev, the anonymous reviewers, and our shepherd Endadul Hoque for their feedback on this work. We also thank Changze Cui for helping us with the most recent version of our implementation and experiments, and Vinamra Bhatia for assistance with Veritesting. All opinions expressed in this paper are solely those of the authors. This research is supported by research grant DSOCL17019 from DSO, Singapore, and partially supported by a grant from the National Research Foundation, Prime Minister’s Office, Singapore under its National Cybersecurity R&D Program (TSUNAMi project, No. NRF2014NCR-NCR001-21), administered by the National Cybersecurity R&D Directorate.

### References

[1] Angr. https://github.com/angr/angr.
[2] BIND DNS Server. https://www.isc.org/downloads/bind/.
[3] CA-1999-14. https://www-uxsup.csx.cam.ac.uk/pub/webmirrors/www.cert.org/advisories/CA-1999-14.html.
[4] CA-2003-07. https://lwn.net/Articles/24238/.
[5] CA-2003-12. https://seclists.org/cert/2003/12.
[6] Clang Static Analyzer. https://clang-analyzer.llvm.org/.
[7] CVE-1999-0009. https://nvd.nist.gov/vuln/detail/CVE-1999-0009.
[8] CVE-1999-0047. https://nvd.nist.gov/vuln/detail/CVE-1999-0047.
[9] CVE-1999-0131. https://nvd.nist.gov/vuln/detail/CVE-1999-0131.
[10] CVE-1999-0206. https://nvd.nist.gov/vuln/detail/CVE-1999-0206.
[11] CVE-1999-0368. https://nvd.nist.gov/vuln/detail/CVE-1999-0368.
[12] CVE-1999-0878. https://nvd.nist.gov/vuln/detail/CVE-1999-0878.
[13] CVE-2001-0013. https://nvd.nist.gov/vuln/detail/CVE-2001-0013.
[14] CVE-2001-0653. https://nvd.nist.gov/vuln/detail/CVE-2001-0653.
[15] CVE-2002-0906. https://nvd.nist.gov/vuln/detail/CVE-2002-0906.
[16] CVE-2003-0466. https://nvd.nist.gov/vuln/detail/CVE-2003-0466.
[17] CVE-2014-8130. https://nvd.nist.gov/vuln/detail/CVE-2014-8130.
[18] CVE-2015-3416. https://nvd.nist.gov/vuln/detail/CVE-2015-3416.
[19] CVE-2016-9586. https://nvd.nist.gov/vuln/detail/CVE-2016-9586.
[20] CVE-2017-14245. https://nvd.nist.gov/vuln/detail/CVE-2017-14245.
[21] CVE-2017-14246. https://nvd.nist.gov/vuln/detail/CVE-2017-14246.
[22] CVE-2017-16942. https://nvd.nist.gov/vuln/detail/CVE-2017-16942.
[23] CVE-2017-7598. https://nvd.nist.gov/vuln/detail/CVE-2017-7598.
[24] CVE-2017-7599. https://nvd.nist.gov/vuln/detail/CVE-2017-7599.
[25] CVE-2017-7600. https://nvd.nist.gov/vuln/detail/CVE-2017-7600.
[26] Klee uClibc. https://github.com/klee/klee-uclibc.
[27] STP – The Simple Theorem Prover. https://stp.github.io/.
[28] uClibc. https://www.uclibc.org/.
[29] M. Abadi, P. Barham, J. Chen, Z. Chen, A. Davis, J. Dean, M. Devin, S. Ghemawat, G. Irving, M. Isard et al., “TensorFlow: A System for Large-Scale Machine Learning,” in OSDI’16.
[30] E. Ábrahám, “Building Bridges between Symbolic Computation and Satisfiability Checking,” in ISSAC’15.
[31] S. Anand, P. Godefroid, and N. Tillman, “Demand-Driven Compositional Symbolic Execution,” in TACAS’08.
[32] A. Andoni, R. Panigrahy, G. Valiant, and L. Zhang, “Learning Polynomials with Neural Networks,” in ICML’14.
[33] T. Avgerinos, A. Rebert, S. Cha, and D. Brumley, “Enhancing Symbolic Execution with Veritesting,” in ICSE’14.
[34] R. Baldoni, E. Coppa, D. C. D’Elia, C. Demetrescu, and I. Finocchi, “A Survey of Symbolic Execution Techniques,” ACM Computer Survey’18.
[35] O. Bastani, R. Sharma, A. Aiken, and P. Liang, “Synthesizing Program Input Grammars,” in PLDI’17.
[36] M. Bojarski, D. Del Testa, D. Dworakowski, B. Firner, B. Flepp, P. Goyal, L. D. Jackel, M. Monfort, U. Muller, J. Zhang et al., “End-to-End Deep Learning for Self-Driving Cars,” arXiv, 2016.
[37] P. Boonstoppel, C. Cadar, and D. Engler, “RWset: Attacking Path Explosion in Constraint-Based Test Generation,” in TACAS’08.
[38] A. R. Bradley, “SAT-Based Model Checking Without Unrolling,” in VMCAI’11.
[39] A. Bundy and L. Wallen, “Breadth-first Search,” in Catalogue of Artificial Intelligence Tools, 1984.
[40] C. Cadar, D. Dunbar, D. R. Engler et al., “KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs,” in OSDI’08.
[41] C. Cadar and K. Sen, “Symbolic Execution for Software Testing: Three Decades Later,” Comm of ACM’13.
[42] P. Chen and H. Chen, “Angora: Efficient Fuzzing by Principled Search,” SP’18.
[43] Y.-F. Chen, C.-D. Hong, B.-Y. Wang, and L. Zhang, “Counterexample-Guided Polynomial Loop Invariant Generation by Lagrange Interpolation,” in CAV’15.
[44] V. Chipounov, V. Kuznetsov, and G. Candea, “S2E: A Platform for In-Vivo Multi-Path Analysis of Software Systems,” ACM SIGPLAN Notices, 2011.
[45] A. Coen-Porisini, G. Denaro, C. Ghezzi, and M. Pezzé, “Using Symbolic Execution for Verifying Safety-Critical Systems,” in ACM SE Notes’01.
[46] M. A. Colón, S. Sankaranarayanan, and H. B. Sipma, “Linear Invariant Generation Using Non-Linear Constraint Solving,” in CAV’03.
[47] P. Cousot and R. Cousot, “Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints,” in POPL’77.
[48] P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Miné, D. Monniaux, and X. Rival, “The ASTRÉE Analyzer,” in ESOP’05.
[49] W. Cui, J. Kannan, and H. J. Wang, “Discoverer: Automatic Protocol Reverse Engineering from Network Traces,” in USENIX Security’07.
[50] R. Dannenberg and G. Ernst, “Formal Program Verification using Symbolic Execution,” in IEEE TSE’82.
[51] M. Davis, G. Logemann, and D. Loveland, “A Machine Program for Theorem-proving,” Communications of the ACM, 1962.
[52] E. de Castro Lopo. libsndfile. http://www.mega-nerd.com/libsndfile/.
[53] L. de Moura and N. Bjørner, “Z3: An Efficient SMT Solver,” in TACAS’08.
[54] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao, “The Daikon system for dynamic detection of likely invariants,” in Science of Computer Programming, 2007.
[55] K.-I. Funahashi, “On the approximate realization of continuous mappings by neural networks,” in Neural Networks’89.
[56] V. Ganesh, A. Kieźun, S. Artzi, P. J. Guo, P. Hooimeijer, and M. Ernst, “HAMPI: A String Solver for Testing, Analysis and Vulnerability Detection,” in CAV’11.
[57] S. Gao, S. Kong, and E. M. Clarke, “dReal: An SMT Solver for Nonlinear Theories over the Reals,” in CADE’13.
[58] P. Garg, C. Löding, P. Madhusudan, and D. Neider, “ICE: A Robust Framework for Learning Invariants,” in CAV’14.
[59] X. Glorot, A. Bordes, and Y. Bengio, “Deep Sparse Rectifier Neural Networks,” in AISTATS’11.
[60] P. Godefroid, “Compositional Dynamic Test Generation,” in POPL’07.
[61] P. Godefroid, A. Kiezun, and M. Y. Levin, “Grammar-based Whitebox Fuzzing,” in PLDI’08.
[62] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed Automated Random Testing,” in PLDI’05.
[63] P. Godefroid, M. Y. Levin, D. A. Molnar et al., “Automated Whitebox Fuzz Testing,” in NDSS’08.
[64] L. B. Godfrey and M. S. Gashler, “A Continuum among Logarithmic, Linear, and Exponential Functions, and Its Potential Generalization in Neural Networks,” in IC3K’15.
[65] I. J. Goodfellow, J. Shlens, and C. Szegedy, “Explaining and Harnessing Adversarial Examples,” in ICLR’15.
[66] A. Gupta and A. Rybalchenko, “InvGen: An Efficient Invariant Generator,” in CAV’09.
[67] R. Jhala and K. L. McMillan, “A Practical and Complete Approach to Predicate Refinement,” in TACAS’06.
[68] J. C. King, “Symbolic Execution and Program Testing,” Communications of the ACM, 1976.
[69] D. P. Kingma and J. Ba, “Adam: A Method for Stochastic Optimization,” in ICLR’15.
[70] S. Krishna, C. Puhrsch, and T. Wies, “Learning Invariants using Decision Trees,” arXiv, 2015.
[71] A. Krizhevsky, I. Sutskever, and G. E. Hinton, “ImageNet Classification with Deep Convolutional Neural Networks,” in NIPS’12.
[72] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea, “Efficient State Merging in Symbolic Execution,” in PLDI’12.
[73] G. Li, E. Andreasen, and I. Ghosh, “SymJS: Automatic Symbolic Testing of JavaScript Web Applications,” in FSE’14.
[74] X. Li, Y. Liang, H. Qian, Y.-Q. Hu, L. Bu, Y. Yu, X. Chen, and X. Li, “Symbolic Execution of Complex Program Driven by. Machine Learning Based Constraint Solving,” in ASE’16.
[75] J. H. Liang, V. Ganesh, P. Poupart, and K. Czarnecki, “Exponential Recency Weighted Average Branching Heuristic for SAT Solvers,” in AAAI’16.
[76] K. McMillan, “Interpolation and SAT-based Model Checking,” in CAV’03.
[77] L. Medsker and L. Jain, Recurrent Neural Networks: Design and Applications. CRC press, 1999.
[78] D. Molnar, X. C. Li, and D. Wagner, “Dynamic Test Generation to Find Integer Bugs in x86 Binary Linux Programs,” in USENIX Security’09.
[79] N. Narodytska, S. P. Kasiviswanathan, L. Ryzhyk, M. Sagiv, and T. Walsh, “Verifying Properties of Binarized Deep Neural Networks,” arXiv, 2017.
[80] H. D. T. Nguyen, D. Qi, A. Roychoudhury, and S. Chandra, “SemFix: Program Repair via Semantic Analysis,” in ICSE ’13.
[81] T. Nguyen, T. Antonopoulos, A. Ruef, and M. Hicks, “Counterexample-Guided Approach to Finding Numerical Invariants,” in FSE’17.
[82] T. Nguyen, D. Kapur, W. Weimer, and S. Forrest, “DIG: A Dynamic Invariant Generator for Polynomial and Array Invariants.”
[83] S. Padhi and T. Millstein, “Data-Driven Loop Invariant Inference with Automatic Feature Synthesis,” arXiv, 2017.
[84] D. Qi, H. Nguyen, and A. Roychoudhury, “Path Exploration using Symbolic Output,” in TOSEM’13.
[85] N. Qian, “On the Momentum Term in Gradient Descent Learning Algorithms,” in Neural Networks’99.
[86] E. Rodríguez-Carbonell and D. Kapur, “Automatic Generation of Polynomial Invariants of Bounded Degree using Abstract Interpretation,” Science of Computer Programming, 2007.
[87] S. Ruder, “An Overview of Gradient Descent Optimization Algorithms,” arXiv, 2016.
[88] D. E. Rumelhart, G. E. Hinton, and R. J. Williams, Learning Internal Representations by Error Propagation, 1985.
[89] P. Rümmer and T. Wahl, “An SMT-LIB Theory of Binary Floating-Point Arithmetic,” in SMT’10.
[90] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, “A Symbolic Execution Framework for JavaScript,” in SP’10.
[91] P. Saxena, P. Poosankam, S. McCamant, and D. Song, “Loop-Extended Symbolic Execution on Binary Programs,” in ISSTA’09.
[92] K. Sen, G. Necula, L. Gong, and W. Choi, “multiSE: Multi-path Symbolic Execution,” in FSE’15.
[93] D. She, K. Pei, D. Epstein, J. Yang, B. Ray, and S. Jana, “NEUZZ: Efficient Fuzzing with Neural Program Smoothing,” arXiv, 2018.
[94] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna, “SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis,” in SP’16.
[95] S. F. Siegel, M. Zheng, Z. Luo, T. K. Zirkel, A. V. Marianiello, J. G. Edenhofner, M. B. Dwyer, and M. S. Rogers, “CIVL: The Concurrency Intermediate Verification Language,” in SC’15.
[96] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and R. Salakhutdinov, “Dropout: A Simple Way to Prevent Neural Networks from Overfitting,” JMLR’14.
[97] X. Xie, B. Chen, Y. Liu, W. Le, and X. Li, “Proteus: Computing Disjunctive Loop Summary via Path Dependency Analysis,” in FSE’16.
[98] Y. Yao, L. Rosasco, and A. Caponnetto, “On Early Stopping in Gradient Descent Learning,” Constructive Approximation, 2007.
[99] Y. Yu, H. Qian, and Y.-Q. Hu, “Derivative-Free Optimization via Classification,” in AAAI’16.
[100] Y. Zheng, X. Zhang, and V. Ganesh, “Z3-str: A Z3-Based String Solver for Web Application Analysis,” in FSE’13.
[101] M. Zitser, R. Lippmann, and T. Leek, “Testing Static Analysis Tools using Exploitable Buffer Overflows from Open Source Code,” in ACM SIGSOFT Software Engineering Notes, 2004.