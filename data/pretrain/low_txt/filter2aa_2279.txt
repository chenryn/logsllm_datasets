# Black Hat USA (@BlackHatEvents)

## Presentation: IAM - The One Who Knocks
### Speakers: Igal Gofman and Noam Dahan

#### Speaker Profiles
**Igal Gofman**
- Head of Research, Ermetic
- Formerly with Microsoft MSTIC and Microsoft Security Research
- Active Directory Expert
- Twitter: @IgalGofman

**Noam Dahan**
- Cloud Security Researcher
- Experience with embedded devices
- Offensive security background
- Twitter: @NoamDahan

---

## Information Classification: General

### Introduction
- **Why are we here?**
  - To discuss best practices, weak spots, and defense strategies in Identity and Access Management (IAM) for cloud environments.

### Background
- **IAM Best Practices:**
  - **Google Cloud Platform (GCP):**
    - Basic roles include thousands of permissions across all Google Cloud services. In production, avoid granting basic roles unless necessary. Instead, use the most limited predefined or custom roles.
    - Treat each application component as a separate trust boundary.
    - Grant roles at the smallest scope needed.
    - [GCP IAM Best Practices](https://cloud.google.com/iam/docs/using-iam-securely)
  
  - **Amazon Web Services (AWS):**
    - Apply least-privilege permissions.
    - Use IAM Access Analyzer to generate least-privilege policies based on access activity.
    - Regularly review and remove unused users, roles, permissions, policies, and credentials.
    - Use conditions in IAM policies to further restrict access.
    - [AWS IAM Best Practices](https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)
  
  - **Microsoft Azure:**
    - Treat identity as the primary security perimeter.
    - Use role-based access control (RBAC).
    - Lower exposure of privileged accounts.
    - [Azure Identity Management Best Practices](https://docs.microsoft.com/en-us/azure/security/fundamentals/identity-management-best-practices)

### Agenda
1. IAM Crash Course
2. Cloud IAM Weak Spots (Permissions Landscape)
3. Things Are Not Always What They Seem
4. Defense & Monitoring Techniques
5. Demo

### IAM Crash Course
- **Security Context:**
  - Users
  - Roles
  - Service Accounts
  - Managed Identities
  - Service Principals

- **Access Policy:**
  - Policy
  - Roles
  - Permissions
  - Scope

- **Federation Services:**
  - AWS
  - Azure
  - GCP

- **Multi-Cloud IAM:**
  - **Azure:**
    - Identity: Users, Groups, Managed Identities, Service Principals
    - Permissions: Pre-Defined Groups, Special Groups, Federated Identities
    - Scope: Organization, Management Group, Subscription, Resource Group
  
  - **AWS:**
    - Identity: Users, Groups, IAM Roles, AWS SSO Directory
    - Permissions: Customer Managed Policies, Inline Policies, Built-In and Custom Roles
    - Scope: Organization, Organizational Unit, Account, Resource Group
  
  - **GCP:**
    - Identity: Users, Groups, Service Accounts
    - Permissions: Pre-Defined and Custom Roles, Federated Identities
    - Scope: Organization, Folder, Project

### Cloud IAM Weak Spots
- **Non-Human Identities:**
  - **AWS:** Role attachment
  - **Azure:** Managed Identities
  - **GCP:** Service Accounts

- **Permissions Landscape:**
  - **Assignment:**
    - Azure: `Microsoft.Authorization/roleAssignments/write`, `Microsoft.Authorization/roleDefinitions/write`
    - GCP: `iam.roles.update`, `orgpolicy.policy.set`, `resourcemanager.projects.setIamPolicy`
    - AWS: `lambda:AddPermission`, `iam:AttachUserPolicy`, `iam:AttachGroupPolicy`, `iam:AttachRolePolicy`
  
  - **Code Execution:**
    - AWS: `lambda:CreateFunction`, `lambda:InvokeFunction`, `lambda:UpdateFunctionConfiguration`, `cloudformation:CreateStack`
    - GCP: `cloudscheduler.jobs.create`, `cloudbuild.builds.create`, `cloudfunctions.functions.create`, `cloudfunctions.functions.update`, `run.services.create`
  
  - **Grants and Delegation:**
    - GCP: `iam.serviceAccounts.implicitDelegation`, `deploymentmanager.deployments.create`, `iam.serviceAccounts.actAs`
    - AWS: `iam:PassRole`
    - Azure: `Microsoft.ManagedIdentity/userAssignedIdentities/*/assign/action`
  
  - **New Credentials:**
    - AWS: `iam:CreateLoginProfile`, `iam:UpdateLoginProfile`, `iam:CreateAccessKey`
    - GCP: `iam.serviceAccountKeys.create`, `iam.serviceAccounts.signJwt`, `serviceusage.apiKeys.create`, `iam.serviceAccounts.getAccessToken`

### Things Are Not Always What They Seem
- **Lesson #1: Beware of Non-Human Identities**
  - How cloud providers handle non-human credentials (e.g., certificates).
  - How cloud consumers handle non-human credentials (e.g., short-lived tokens).
  - Instance metadata, local addresses, and environment variables.
  - Hybrid instance metadata.
  - **Azure Use Case: Managed Identities**
    - The Fabric Controller (FC) manages hardware and applications in an Azure cluster.

- **Lesson #2: Study Implementation Details**
  - Serverless code: Comparing AWS Lambda and GCP Functions.
  - Versioning and revision.
  - Who can access function code?
  - Privilege escalation.

- **Lesson #3: Defaults Are a Hackerâ€™s Best Friend**
  - **AWS:**
    - Broad default permissions.
    - "Temporary fixes" becoming permanent.
    - Look for: `ReadOnlyAccess`, `CloudTrailReadOnlyAccess`, `PassRole`, `Network modifiers`, `Permission modifiers`, `AssumeRole` escalations.
  
  - **Azure:**
    - Many built-in roles.
    - Custom role limits.
    - Inherited permissions.
    - Look for: Read permissions, Assignment permissions (self-assignment).
  
  - **GCP:**
    - Inherited permissions by scope.
    - Legacy roles with strong and broad permissions (e.g., Viewer).
    - Legacy mechanism: Access Scopes.

### Practical Practices for Defenders
- **Two Approaches:**
  - Bottom-up: Start with minimal permissions and add as needed.
  - Top-down: Start with broad permissions and reduce as needed.
  - **Clay or Marble:**
    - Clay: Hard to know exactly what you need.
    - Marble: Hard to prove a negative.
    - Most people choose Marble and never cut down permissions.

- **Limit the Effect of Mistakes:**
  - Separate AWS Account/GCP Project/Azure Resource Group per workload.
  - Avoid permanent credentials when possible.
  - Secure human identities.

- **Log More, Audit Better:**
  - Log as much as possible.
  - Use audits to build stronger security policies.
  - Challenges: Opaque APIs and distributed logging.

- **Limits of Logging:**
  - Unlogged and un-loggable actions:
    - Azure: Read actions, distributed logging.
    - AWS: Cross-account actions, failures, passive recon, some data actions, session name manipulation, CloudTrail manipulation.

### Demo
- A live demonstration of the concepts discussed.

### Takeaways
- Key points and lessons learned from the presentation.

### Questions?
- Open floor for audience questions and discussion.