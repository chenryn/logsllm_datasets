### Bandwidth Consumption Analysis

**Figure 12: Bandwidth Consumption with k-Subscription, Tor, and Vanilla System**

- **(a) Initialization Stage (Load 20 Tweets)**
- **(b) Idle Stage (Download Incoming Tweets)**

**Bandwidth Consumption (Mbps)**
- 80
- 70
- 60
- 50
- 40
- 30
- 20
- 10
- 0

**k-Subscription**
- Vanilla System
- Tor

**Bandwidth Consumption (Mbps)**
- 2.5
- 2
- 1.5
- 1
- 0.5
- 0

**k-Subscription**
- Vanilla System
- Tor

**k: Obfuscation Level**
- 1
- 10
- 20
- 30
- 40
- 50
- 60
- 70
- 80
- 90
- 100

**k: Obfuscation Level**
- 1
- 10
- 20
- 30
- 40
- 50
- 60
- 70
- 80
- 90
- 100

### Browsing Latency Analysis

**Figure 13: Browsing Latency as a Function of k When a User Opens Twitter’s Main Page**

**Browsing Latency (s)**
- 12
- 10
- 8
- 6
- 4
- 2
- 0

**k-Subscription**
- Vanilla System
- Tor

**k: Obfuscation Level**
- 1
- 10
- 20
- 30
- 40
- 50
- 60
- 70
- 80
- 90
- 100

### Bandwidth and Latency Comparison

The initialization stage, which involves loading 20 tweets, corresponds to short-term spikes in bandwidth consumption. In contrast, the idle stage, where the user keeps Twitter's page open, involves much lower but more sustained bandwidth usage.

In Figure 12, we compare the bandwidth consumption of k-subscription with that of Tor and the vanilla system. Although Tor provides a different type of anonymity, it can be used with a fake account to hide user interests. We use Tor with a fake Twitter account as a baseline for evaluating k-subscription. Tor adds additional bandwidth overhead due to its data encapsulation. Specifically, the average packet size of Twitter traffic over Tor is 789 bytes, compared to 239 bytes for the vanilla system. This results in higher bandwidth consumption during the idle stage, particularly when k = 90, where Tor consumes twice as much bandwidth as k-subscription.

During the initialization stage, Tor has higher bandwidth consumption than k-subscription for values of k up to 10, but lower consumption when k exceeds 10. This is because k-subscription downloads more tweets at startup to construct a full page of useful tweets. However, since the initialization stage is brief, k-subscription generally adds less overall bandwidth overhead.

k-Subscription continues to download tweets in the background until a certain number is reached, which is constant for each k value. This helps prevent Twitter from analyzing the user's interests.

### Browsing Latency

In our next experiment, we measure the latency imposed by k-subscription on the user's browsing experience. We instrumented our browser extension to measure the latency from the time a user requests one or more tweets until the information is displayed, excluding noise channels. This latency includes network download time and CPU time for excluding noise and rendering the page.

Figure 13 shows the latency for displaying a page with k-subscription for various k values. The latency slightly increases with the number of noise channels, reaching 7.7 seconds for k = 100, compared to 2.8 seconds without k-subscription (k = 1). A delay of less than 5 seconds is not expected to significantly affect the user's browsing experience while enhancing privacy. Smaller k values result in even lower latency. This delay is only observed during the initialization stage, as the increased number of tweets needed to construct the user's timeline causes the delay. During the idle stage, there is no noticeable delay in rendering incoming tweets, even at high k values.

Comparing k-subscription and Tor, Tor requires a much higher latency, close to 10 seconds, due to the longer path through the anonymization network.

### CPU Load

In previous experiments, we measured the CPU load using Linux's `time` utility. The CPU load was negligible for all k values, always less than 1%, even for k = 100. Thus, our k-subscription browser extension does not add significant CPU overhead.

### Related Work

**Anonymous Communications**
- Anonymization services [6, 20] can hide a user's IP address but not their identity if they are logged into a microblogging service or if their previous web accesses are known [19].
- Kido et al. [13] protect location privacy by sending false position data along with true information.

**Search Engine Query Obfuscation**
- TrackMeNot [11] hides real interests by submitting multiple queries.
- GooPIR [7] constructs k − 1 other queries and submits them simultaneously to prevent timing attacks.
- PDS [16] brings real queries into a canonical form to prevent identifiability based on typos and syntax.
- Ye et al. [25] propose noise injection for search privacy, providing a lower bound for noise queries required for perfect privacy.

**Hummingbird**
- Cristofaro et al. [5] proposed Hummingbird to provide privacy in Twitter. It requires collaboration from information providers and cannot hide the fact that a user follows a particular channel.

**k-Anonymity**
- Our work is similar to k-anonymity, which ensures that any person in a released dataset is indistinguishable from at least k − 1 other persons [22]. Data are generalized to ensure that identifying information points to at least k persons [18]. k-anonymity is often used with l-diversity to ensure that all persons in the same group do not share a common sensitive property [14].

### Conclusion

Microblogging services, while enabling timely access to information, raise significant privacy concerns. To address this, we propose k-subscription, an obfuscation-based approach that encourages users to follow k−1 additional "noise" channels for each channel they are interested in. Our analysis and experimental evaluation show that k-subscription can reduce the confidence of the microblogging service in knowing the user's true interests with minimal runtime overhead. We believe that as more users turn to microblogging services, privacy concerns will escalate, making solutions like k-subscription increasingly important.

### Acknowledgements

We thank Matt Fredrikson and the anonymous reviewers for their valuable feedback. This work was supported in part by the FP7 project SysSec, the FP7-PEOPLE-2009-IOF project MALCODE, the German Federal Ministry of Education and Research, and the NSF.

### References

[1] Twellow Directory. http://www.twellow.com/categories/.
[2] S. Afroz, M. Brennan, and R. Greenstadt. Detecting Hoaxes, Frauds, and Deception in Writing Style Online. In IEEE Symposium on Security and Privacy, 2012.
[3] D. Bachrach, C. Nunu, D. Wallach, and M. Wright. #h00t: Censorship Resistant Microblogging. arXiv preprint arXiv:1109.6874, 2011.
[4] E. Balsa, C. Troncoso, and C. Diaz. OB-PWS: Obfuscation-Based Private Web Search. In IEEE Symposium on Security and Privacy, 2012.
[5] E. De Cristofaro, C. Soriente, G. Tsudik, and A. Williams. Hummingbird: Privacy at the time of Twitter. In IEEE Symposium on Security and Privacy, 2012.
[6] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The Second-Generation Onion Router. In USENIX Security Symposium, 2004.
[7] J. Domingo-Ferrer, A. Solanas, and J. Castellà-Roca. h(k)-private information retrieval from privacy-uncooperative queryable databases. Online Information Review, 2009.
[8] P. Eckersley. How Unique is Your Web Browser? In Privacy Enhancing Technologies (PET), 2010.
[9] Y. Elovici, C. Glezer, and B. Shapira. Enhancing Customer Privacy While Searching for Products and Services on the World Wide Web. Internet Research, 2005.
[10] Epistolary. Rob’s Giant BonusCard Swap Meet. http://epistolary.org/rob/bonuscard/.
[11] D. Howe and H. Nissenbaum. TrackMeNot: Resisting Surveillance in Web Search. Lessons from the Identity Trail: Anonymity, Privacy, and Identity in a Networked Society, 2009.
[12] R. Jones, R. Kumar, B. Pang, and A. Tomkins. I Know What You Did Last Summer: Query Logs and User Privacy. In ACM Conference on Information and Knowledge Management (CIKM), 2007.
[13] H. Kido, Y. Yanagisawa, and T. Satoh. An Anonymous Communication Technique Using Dummies for Location-Based Services. In IEEE International Conference on Pervasive Services (ICPS), 2005.
[14] A. Machanavajjhala, D. Kifer, J. Gehrke, and M. Venkitasubramaniam. l-Diversity: Privacy Beyond k-Anonymity. ACM Transactions on Knowledge Discovery from Data (TKDD), 2007.
[15] J. R. Mayer and J. C. Mitchell. Third-Party Web Tracking: Policy and Technology. In IEEE Symposium on Security and Privacy, 2012.
[16] M. Murugesan and C. Clifton. Providing Privacy through Plausibly Deniable Search. In SIAM International Conference on Data Mining (SDM), 2009.
[17] A. Narayanan, H. Paskov, N. Z. Gong, J. Bethencourt, E. Stefanov, E. C. R. Shin, and D. Song. On the Feasibility of Internet-Scale Author Identification. In IEEE Symposium on Security and Privacy, 2012.
[18] H. Park and K. Shim. Approximate Algorithms for k-Anonymity. In ACM SIGMOD International Conference on Management of Data, 2007.
[19] S. Peddinti and N. Saxena. On the Effectiveness of Anonymizing Networks for Web Search Privacy. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2011.
[20] M. Reiter and A. Rubin. Crowds: Anonymity for Web Transactions. ACM Transactions on Information and System Security (TISSEC), 1998.
[21] RT. Privacy betrayed: Twitter sells multi-billion tweet archive. http://rt.com/news/twitter-sells-tweet-archive-529/.
[22] L. Sweeney. k-Anonymity: A Model for Protecting Privacy. International Journal of Uncertainty, Fuzziness and Knowledge-Based Systems, 2002.
[23] J. Turner. Countermeasure Radar Chaff, 1970. US Patent 3,544,997.
[24] Twitaholic. Top 100 Twitterholics based on Updates. http://twitaholic.com/top100/updates/.
[25] S. Ye, F. Wu, R. Pandey, and H. Chen. Noise Injection for Search Privacy Protection. In International Conference on Computational Science and Engineering (CSE), 2009.