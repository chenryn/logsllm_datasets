### 5.4.1 Results on Complex Policies

The results of our evaluation on complex policies (Set 1) are presented in Table 2. Our findings indicate that Mohawk, configured with aggressive abstraction-refinement, outperforms all competing tools, regardless of the input policy's complexity. Bounded Model Checking (BMC) scales better than traditional Model Checking (MC), but still runs out of memory for large policies. RBAC-PAT's forward reachability, although slower than BMC, is effective for test suite 1, where policies can be verified in polynomial time. However, it times out for larger policies in test suites 2 and 3. The forward reachability algorithm in RBAC-PAT can be considered a specialized model-checking approach for ARBAC policies and generally scales better than symbolic model checking.

RBAC-PAT's backward reachability algorithm was faster than its forward counterpart for a few small policies but produced segmentation faults for most policies across all test suites. It is unclear whether this is due to a bug in the implementation or memory exhaustion. Mohawk, on the other hand, scales better than all other tools and is significantly faster for larger and more complex policies.

For small policies, Mohawk (with aggressive abstraction-refinement) is slower compared to MC and BMC. This is because such policies are simple enough for BMC to analyze quickly, while Mohawk requires multiple iterations to reach the same conclusion. In these cases, the abstraction-refinement step introduces unnecessary overhead. However, Mohawk's abstraction-refinement can be configured to be less aggressive for smaller policies, resulting in performance comparable to BMC.

Mohawk is highly efficient in identifying errors across all three test suites, despite their varying complexity. This underscores the effectiveness of the abstraction-refinement technique. Additionally, having a single tool that performs well on large, real-world policies from different complexity classes is advantageous for maintenance and extension. Furthermore, since our technique is not tied to specific model-checking algorithms, it can be used in conjunction with other methods, such as RBAC-PAT's forward reachability.

### 5.4.2 Results on Simple Policies

The results of our evaluation on simple policies are summarized in Table 2. The first and second policies did not satisfy the separate administration restriction, so we modified them by removing the ability to assign roles that have administrative roles as targets.

BMC, RBAC-PAT, and Mohawk were effective for all three policies. The differences in verification time were minimal, typically less than a second.

Mohawk with aggressive abstraction-refinement was faster than RBAC-PAT's forward reachability but slower than BMC and RBAC-PAT's backward reachability for these policies. However, the slowdown in each case was less than a second and imperceptible to the user. The expected slowdown of Mohawk compared to BMC is due to the small size of the policies. For the third test case, MC timed out. Both RBAC-PAT and Mohawk with aggressive abstraction-refinement were slower than BMC, but Mohawk was faster than RBAC-PAT's forward reachability and slightly slower than RBAC-PAT's backward reachability.

### 6. Related Work

Counter-example guided abstraction refinement (CEGAR) was originally developed for model checking [6]. Since then, the basic idea has been adapted for bounded model checking in hardware verification [27] and program analysis [4] to verify computer programs. Abstraction refinement has also been applied in solvers for various theories, such as modular and integer linear arithmetic [12]. To the best of our knowledge, Mohawk is the first tool to adapt CEGAR for finding errors in access-control policies.

Verification problems in the context of access control can be broadly classified into two categories: state-only and with state changes. State-only work considers only a given state and verifies properties within that state. Examples include the work of Jha et al. [22, 23], Hughes et al. [20], Hu et al. [18], Martin and Xie [31], Rao et al. [34], Kolovski [26], Zhao et al. [48], and Fisler et al. [11]. While our approach could be applied in state-only contexts, this paper focuses on access control systems characterized by state changes.

Plain model checking has been proposed for some state-change schemes [47], but as shown in Section 5, it does not scale well for very large policies. Safety analysis dates back to the mid-1970s, with foundational work by Harrison et al. [17]. They provided a characterization of safety and showed that safety analysis for an access matrix scheme with state changes specified as commands in a particular syntax is undecidable. Since then, there has been significant interest in safety and security analysis in various access control schemes.

Safety analysis in monotonic versions of the HRU scheme has been studied [16]. Jones et al. [24] introduced the Take-Grant scheme, where safety is decidable in linear time. Amman and Sandhu [3] and Motwani et al. [32] studied grammatical protection systems and the Typed Access Matrix model, respectively. Soshi et al. [45] analyzed the Dynamic-Typed Access Matrix model, and Solworth and Sloan [44] introduced a discretionary access control model where safety is decidable. These models have subcases where safety is decidable, but they have had limited practical impact.

This paper focuses on ARBAC, which was proposed to meet the need for expressive access control schemes in large-scale real-world deployments. Li and Tripunitara [29] were the first to consider security analysis in the context of ARBAC. Jha et al. [21] were the first to use model checking for ARBAC verification, identifying that the problem is PSPACE-complete. Stoller et al. [46] established that user-role reachability analysis is fixed parameter tractable with respect to the number of mixed roles, irrevocable roles, positive preconditions, and goal size. They implemented new model-checking algorithms in RBAC-PAT [13].

RBAC-PAT contains two algorithms for analyzing ARBAC policies: forward and backward reachability. As shown in Section 5, the forward reachability algorithm scales better than plain model checking and is effective for polynomial-time verifiable policies but does not scale well with increasing policy complexity. The backward reachability algorithm gave segmentation faults for even moderately sized policies. In contrast, Mohawk scales better and is efficient at identifying errors, regardless of policy complexity. The key to Mohawk's effectiveness is its goal-oriented, optimal path-finding approach through abstraction-refinement (Section 4.2).

Gofman et al. [14] proposed incremental algorithms for analyzing the impact of changes to ARBAC policies by leveraging previous analysis results. Such incremental analysis is outside the scope of this paper.

### 7. Conclusion

We presented an abstraction-refinement-based technique and its implementation, the Mohawk tool, for finding errors in ARBAC access-control policies. Mohawk accepts an access-control policy and a safety question as input and outputs whether an error is found. We extensively evaluated Mohawk against current state-of-the-art tools for policy analysis. Our experiments show that Mohawk scales very well with policy complexity and is orders of magnitude faster than existing tools. Tools like Mohawk enable policy administrators to quickly analyze policies before deployment, thereby increasing system assurance.

### Acknowledgements

We thank Mikhail Gofman, Scott Stoller, C. R. Ramakrishnan, and Ping Yang for providing access to the RBAC-PAT tool and their experimental data.

### References

[1] Aveska. http://www.aveksa.com/solutions/access-control-automation.cfm.
[2] SailPoint. http://www.sailpoint.com/product/compliance-manager/policy-enforcement.php.
[3] P. Ammann and R. Sandhu. Safety analysis for the extended schematic protection model. IEEE Symposium on Security and Privacy, 1991.
[4] T. Ball and S. K. Rajamani. The SLAM project: debugging system software via static analysis. In POPL '02: Proc. of the 29th ACM symposium on Principles of programming languages, New York, NY, USA, 2002. ACM.
[5] T. A. Budd. Safety in grammatical protection systems. Intl. Journal of Parallel Programming, 12(6):413–431, 1983.
[6] E. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith. Counterexample-guided abstraction refinement for symbolic model checking. J. ACM, 50(5):752–794, 2003.
[7] E. Clarke, D. Kroening, J. Ouaknine, and O. Strichman. The completeness threshold for bounded model checking.
[8] E. M. Clarke, O. Grumberg, and D. A. Peled. Model Checking. The MIT Press, 1999.
[9] J. Crampton and G. Loizou. Administrative scope: A foundation for role-based administrative models. ACM Trans. Inf. Syst. Secur., 6(2):201–231, 2003.
[10] D. F. Ferraiolo, D. R. Kuhn, and R. Chandramouli. Role-Based Access Control. Artech House, Inc., Norwood, MA, USA, 2003.
[11] K. Fisler, S. Krishnamurthi, L. A. Meyerovich, and M. C. Tschantz. Verification and change-impact analysis of access-control policies. In ICSE '05: Proc. of the 27th Intl. conference on Software engineering, 2005. ACM.
[12] V. Ganesh and D. L. Dill. A decision procedure for bitvectors and arrays. In Computer Aided Verification, LNCS, 2007.
[13] M. I. Gofman, R. Luo, A. C. Solomon, Y. Zhang, P. Yang, and S. D. Stoller. RBAC-PAT: A policy analysis tool for role-based access control. In Proc. of the 15th Intl. Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS), volume 5505, Springer-Verlag, 2009.
[14] M. I. Gofman, R. Luo, and P. Yang. User-role reachability analysis of evolving administrative role-based access control. In Proc. of the 15th European conference on Research in computer security, Berlin, Heidelberg, 2010. Springer-Verlag.
[15] G. S. Graham and P. J. Denning. Protection — principles and practice. In Proc. of the AFIPS Spring Joint Computer Conference, volume 40, AFIPS Press, May 1972.
[16] M. A. Harrison and W. L. Ruzzo. Monotonic protection systems. Foundations of Secure Computation, 1978.
[17] M. A. Harrison, W. L. Ruzzo, and J. D. Ullman. On protection in operating systems. In SOSP '75: Proc. of the fifth ACM symposium on Operating systems principles, 1975. ACM.
[18] H. Hu and G. Ahn. Enabling verification and conformance testing for access control model. In SACMAT '08: Proc. of the 13th ACM symposium on Access control models and technologies, New York, NY, USA, 2008. ACM.
[19] V. C. Hu, D. R. Kuhn, and T. Xie. Property verification for generic access control models. In EUC '08: Proc. of the 2008 IEEE/IFIP Intl. Conference on Embedded and Ubiquitous Computing, 2008. IEEE Computer Society.
[20] G. Hughes and T. Bultan. Automated verification of access control policies using a SAT solver. Int. J. Softw. Tools Technol. Transf., 10(6):503–520, 2008.
[21] S. Jha, N. Li, M. Tripunitara, Q. Wang, and W. Winsborough. Towards formal verification of role-based access control policies. IEEE Trans. Dependable Secur. Comput., 5(4):242–255, 2008.
[22] S. Jha and T. W. Reps. Model Checking SPKI/SDSI. Journal of Computer Security, 12(3–4):317–353, 2004.
[23] S. Jha, S. Schwoon, H. Wang, and T. Reps. Weighted Pushdown Systems and Trust-Management Systems. In Proc. of TACAS, New York, NY, USA, 2006. Springer-Verlag.
[24] A. K. Jones, R. J. Lipton, and L. Snyder. A linear time algorithm for deciding security. In SFCS '76: Proc. of the 17th Annual Symposium on Foundations of Computer Science, Washington, DC, USA, 1976. IEEE Computer Society.
[25] A. Kern. Advanced features for enterprise-wide role-based access control. In ACSAC '02: Proc. of the 18th Annual Computer Security Applications Conference, Washington, DC, USA, 2002. IEEE Computer Society.
[26] V. Kolovski, J. Hendler, and B. Parsia. Analyzing web access control policies. In WWW '07: Proc. of the 16th Intl. conference on World Wide Web, 2007. ACM.
[27] D. Kroening. Computing over-approximations with bounded model checking. Electron. Notes Theor. Comput. Sci., 144:79–92, January 2006.
[28] N. Li, J. C. Mitchell, and W. H. Winsborough. Beyond proof-of-compliance: security analysis in trust management. J. ACM, 52(3):474–514, 2005.
[29] N. Li and M. V. Tripunitara. Security analysis in role-based access control. In SACMAT '04: Proc. of the ninth ACM symposium on Access control models and technologies, New York, NY, USA, 2004. ACM.
[30] N. Li and M. V. Tripunitara. Security analysis in role-based access control. ACM Trans. Inf. Syst. Secur., 9(4):391–420, 2006.
[31] E. Martin and T. Xie. A fault model and mutation testing of access control policies. In WWW '07: Proc. of the 16th Intl. conference on World Wide Web, 2007. ACM.
[32] R. Motwani, R. Panigrahy, V. Saraswat, and S. Ventkatasubramanian. On the decidability of accessibility problems (extended abstract). In STOC '00: Proc. of the thirty-second annual ACM symposium on Theory of computing, New York, NY, USA, 2000. ACM.
[33] NuSMV. http://nusmv.irst.itc.it/.
[34] P. Rao, D. Lin, and E. Bertino. XACML function annotations. In POLICY '07: Proc. of the Eighth IEEE Intl. Workshop on Policies for Distributed Systems and Networks, Washington, DC, USA, 2007. IEEE Computer Society.
[35] J. H. Saltzer and M. D. Schroeder. The protection of information in computer systems. Proc. of the IEEE, 1975.
[36] R. Sandhu, V. Bhamidipati, and Q. Munawer. The ARBAC97 model for role-based administration of roles. ACM Trans. Inf. Syst. Secur., 2(1):105–135, 1999.
[37] R. S. Sandhu. The typed access matrix model. In Proc. IEEE Symposium on Research in Security and Privacy, 1992.
[38] R. S. Sandhu, E. J. Coyne, H. L. Feinstein, and C. E. Youman. Role-based access control models. IEEE Computer, 29(2):38–47, 1996.
[39] A. Sasturkar, P. Yang, S. D. Stoller, and C. Ramakrishnan. Policy analysis for administrative role-based access control. In Proc. of the 19th Computer Security Foundations Workshop. IEEE Computer Society Press, July 2006.
[40] A. Sasturkar, P. Yang, S. D. Stoller, and C. Ramakrishnan. Policy analysis for administrative role-based access control. Technical report, Stony Brook University, 2006.
[41] A. Schaad, J. Moffett, and J. Jacob. The role-based access control system of a European bank: a case study and discussion. In SACMAT '01: Proc. of the sixth ACM symposium on Access control models and technologies, New York, NY, USA, 2001. ACM.
[42] Security Architect of a Leading Bank. Personal communication, 2010.
[43] K. Sohr, M. Drouineaud, G.-J. Ahn, and M. Gogolla. Analyzing and managing role-based access control policies. IEEE Transactions on Knowledge and Data Engineering, 20:924–939, 2008.
[44] J. A. Solworth and R. H. Sloan. A layered design of discretionary access controls with decidable safety properties. IEEE Symposium on Security and Privacy, 2004.
[45] M. Soshi. Safety analysis of the dynamic-typed access matrix model. In Computer Security - ESORICS 2000, LNCS, Springer Berlin / Heidelberg, 2000.
[46] S. D. Stoller, P. Yang, C. R. Ramakrishnan, and M. I. Gofman. Efficient policy analysis for administrative role-based access control. In CCS '07: Proc. of the 14th ACM conference on Computer and communications security, 2007. ACM.
[47] N. Zhang, M. Ryan, and D. P. Guelev. Synthesising verified access control systems through model checking. J. Comput. Secur., 16(1):1–61, 2008.
[48] C. Zhao, N. Heilili, S. Liu, and Z. Lin. Representation and reasoning on RBAC: A description logic approach. In ICTAC'05: Proc. of the 2nd Intl. Colloquium on Theoretical Aspects of Computing, LNCS, Springer, 2005.