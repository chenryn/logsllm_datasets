# Role-Based Access Control (RBAC) and Permission Set Mining

## 4. Performance Evaluation

### 4.1 Speed
The speed of the algorithm was evaluated by varying the number of permissions, users, and roles. The following figures illustrate the performance in different scenarios:

- **(a) Varying number of permissions:**
  - X-axis: Number of Permissions (0, 500, 1000, 1500, 2000)
  - Y-axis: Processing Time (in seconds)

- **(b) Varying number of users:**
  - X-axis: Number of Users (0, 200, 400, 600, 800, 1000)
  - Y-axis: Processing Time (in seconds)

- **(c) Varying number of roles:**
  - X-axis: Number of Roles (0, 100, 200, 300, 400, 500)
  - Y-axis: Processing Time (in seconds)

**Figure 4. Speed**

### 4.2 Accuracy
The accuracy of the algorithm is measured as the ratio of the number of exact roles identified to the number of roles originally defined in the dataset. An exact role match is a permission set that exactly matches the permission set of an original role. Partial matches can also be identified, but only perfect matches are reported.

### 4.3 Coverage
Coverage is calculated as the ratio of user permissions covered by discovered roles to the total number of user permissions in the original dataset. A higher coverage percentage indicates that the set of roles covers more permission assignments.

\[ \text{Coverage} = \frac{\text{Number of user permissions covered by discovered roles}}{\text{Total number of user permissions in the original dataset}} \]

### 4.4 Threshold Setting
Using the data simulation parameters, the threshold can be set to the average number of times each role is expected to be assigned to any user. This can be calculated as:

\[ \xi = \text{Number of users} \times \frac{\text{Average number of roles per user}}{\text{Total number of roles}} \]

By setting the threshold to the average frequency of a role, it is expected that 50% of roles will be identified. In the first two test sets, the percentage of actual roles found exceeded this benchmark by at least 10%, and did not fall below the benchmark in the third test set.

### 4.5 Interesting Observations
- The actual percentage of user permissions covered by the discovered roles was more than the percentage of roles recovered.
- Over 85% of permission assignments could be covered by less than 70% of roles in some test cases.
- Some of the discovered roles were combinations of different roles, indicating that these roles were frequently assigned together.

### 4.6 Processing Time
The processing time for each dataset was measured on Dell PowerEdge 2850 machines with two 3.0GHz CPUs and 4 GB of memory. It was observed that:
- Increasing the number of permissions and users reduces the time required to identify frequent permission sets.
- Increasing the number of roles increases the processing time, as more itemsets need to be generated and more roles need to be identified.
- The relationship between the number of roles and processing time appears to be linear.

## 5. Discussion and Future Work

### 5.1 Approach Overview
This research proposes a permission set mining heuristic for identifying the most effective roles for RBAC. The identified roles offer the largest administrative benefit by containing the permission sets that are most frequently assigned. The approach produces a practical implementation for a previously theoretical concept, allowing for small amounts of user permission perturbation if the most practical roles can be identified.

### 5.2 Role Coverage
Permission set mining identifies permission sets that offer the largest amount of coverage. If implemented, these are the permission sets that will offer the largest administrative benefit. The extensive coverage of the extracted roles has been demonstrated in experimental testing.

### 5.3 Threshold Choice
If the threshold ξ is not enforced during the frequent permission set extraction process, it can be enforced during the hierarchy construction process by terminating the insertion of candidate roles whose support falls below ξ. The choice of ξ offers a tradeoff between selecting a smaller number of roles that will on average offer the largest reduction in administration of permission assignments and selecting a larger number of roles with lower average role administration reduction but an overall improvement in administration.

### 5.4 Infrequent Patterns
Infrequent permission sets may represent important roles that are given to very few members of staff. These roles are not created for administrative benefit but out of necessity. To ensure permissions are not lost and the original access control matrix is not modified, these permissions could be turned into single permission or reduced set permission roles and assigned directly to the user.

### 5.5 Unidentified Roles
In systems with RBAC, unidentified roles are interesting for validating an existing structure. Often, these roles are not required because of their scarce nature and do not offer enough administrative benefit to justify their existence. Analysis of generated results can also identify misassignments of permissions to a particular user.

### 5.6 Optimality
The hierarchy construction is centered around roles that are more probable. Sorting candidate roles on support and permission set length ensures subsets of roles are placed into the partial ordering before the supersets of roles. The most costly component of permission set mining is the frequent pattern extraction, which can be optimized using frequent pattern trees.

### 5.7 Future Work
Future work could include reducing the number of generated candidate permission sets and exploring the effect of identifying roles that consist of a large set of permissions as well as being frequent. Additionally, role recommendations produced from permission set mining still require human analysis before implementation and deployment.

## 6. Conclusion
Role engineering is an integral process in realizing the benefits of RBAC. Existing automated approaches often place constraints on user-to-role and permission-to-role assignments, do not support hierarchical RBAC, and require all permission assignments to be correct. This research proposes a new approach that uses frequent pattern mining to identify the best candidate roles and construct an effective role hierarchy. The proposed approach offers an alternative mining algorithm that does not assume perfect data, supports hierarchy, and is not prone to distinct clustering. Results from real and simulated datasets show that the roles identified offer significant coverage and administrative benefits.

## Acknowledgments
This research is supported and funded by CA Labs. We wish to thank Rui Zhang and Steven Versteeg for discussions on technical content, and the referees for their helpful comments.

## References
[1] ANSI. American National Standard for Information Technology - Role Based Access Control. ANSI INCITS 359-2004.
[2] A. Ceglar and J. F. Roddick. Association mining. ACM Computing Surveys, 38(2):5, 2006.
[3] E. J. Coyne. Role engineering. In RBAC '95: Proceedings of the first ACM Workshop on Role-based access control, pages 4–5, New York, NY, USA, 1996. ACM Press.
[4] A. Ene, W. Horne, N. Milosavljevic, P. Rao, R. Schreiber, and R. E. Tarjan. Fast exact and heuristic methods for role minimization problems. In SACMAT '08: Proceedings of the 13th ACM symposium on Access control models and technologies, pages 1–10, New York, NY, USA, 2008. ACM.
[5] E. B. Fernandez and J. C. Hawkins. Determining role rights from use cases. In RBAC '97: Proceedings of the second ACM workshop on Role-based access control, pages 121–125, New York, NY, USA, 1997. ACM Press.
[6] D. F. Ferraiolo and D. R. Kuhn. Role-Based Access Control. In Proceedings of the 15th NIST-NCSC National Computer Security Conference, pages 554–563, Baltimore, Maryland, USA, 1992.
[7] D. F. Ferraiolo, D. R. Kuhn, and R. Chandramouli. Role-Based Access Control. Artech House, Inc., 2003.
[8] J. Han and M. Kamber. Data Mining: Concepts and Techniques. Morgan Kaufmann, second edition, 2006.
[9] J. Han, J. Pei, Y. Yin, and R. Mao. Mining frequent patterns without candidate generation: A frequent-pattern tree approach. Data Mining and Knowledge Discovery, 8(1):53–87, 2004.
[10] M. Kuhlmann, D. Shohat, and G. Schimpf. Role mining - revealing business roles for security administration using data mining technology. In SACMAT '03: Proceedings of the eighth ACM symposium on Access control models and technologies, pages 179–186, New York, NY, USA, 2003. ACM Press.
[11] H. Lu, J. Vaidya, and V. Atluri. Optimal boolean matrix decomposition: Application to role engineering. In IEEE 24th International Conference on Data Engineering, Cancun, Mexico, April 2008.
[12] I. Molloy, H. Chen, T. Li, Q. Wang, N. Li, E. Bertino, S. Calo, and J. Lobo. Mining roles with semantic meanings. In SACMAT '08: Proceedings of the 13th ACM symposium on Access control models and technologies, pages 21–30, New York, NY, USA, 2008. ACM.
[13] G. Neumann and M. Strembeck. A scenario-driven role engineering process for functional RBAC roles. In SACMAT '02: Proceedings of the seventh ACM symposium on Access control models and technologies, pages 33–42, New York, NY, USA, 2002. ACM Press.
[14] H. Roeckle, G. Schimpf, and R. Weidinger. Process-oriented approach for role-finding to implement role-based security administration in a large industrial organization. In RBAC '00: Proceedings of the fifth ACM workshop on Role-based access control, pages 103–110, New York, NY, USA, 2000. ACM Press.
[15] J. Schlegelmilch and U. Steffens. Role mining with ORCA. In SACMAT '05: Proceedings of the tenth ACM symposium on Access control models and technologies, pages 168–176, New York, NY, USA, 2005. ACM Press.
[16] J. Vaidya, V. Atluri, and Q. Guo. The role mining problem: finding a minimal descriptive set of roles. In SACMAT '07: Proceedings of the 12th ACM symposium on Access control models and technologies, pages 175–184, New York, NY, USA, 2007. ACM.
[17] J. Vaidya, V. Atluri, and J. Warner. Roleminer: mining roles using subset enumeration. In CCS '06: Proceedings of the 13th ACM conference on Computer and communications security, pages 144–153, New York, NY, USA, 2006. ACM.
[18] D. Zhang, K. Ramamohanarao, and T. Ebringer. Role engineering using graph optimization. In SACMAT '07: Proceedings of the 12th ACM symposium on Access control models and technologies, pages 139–144, New York, NY, USA, 2007. ACM.
[19] D. Zhang, K. Ramamohanarao, and R. Zhang. Synthetic data generation for study of role engineering. http://www.cs.mu.oz.au/˜zhangd/roledata, 2008.