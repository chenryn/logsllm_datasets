### 优化后的文本

```java
private String[] names; // P: Confidential
private String[] passwords; // P: Secret

public boolean check(String username, String query) { // P: Confidential
    boolean match = false;
    boolean nameOkFlag = false;

    for (int i = 0; i < names.length; i++) {
        if (names[i].equals(username)) {
            nameOkFlag = true;
            if (passwords[i].equals(query)) {
                match = true;
                break;
            }
        }
    }

    System.out.println(nameOkFlag); // A: Public
    return match; // A: Public
}
```

**Figure 7: 密码检查程序**

第19行的返回语句被注释为允许信息流的安全级别最高为Public，因为返回值`match`将对用户可见。

注意，`match`的最终值依赖于机密和秘密数据，因此从非干扰属性的角度来看，该程序是不安全的。然而，程序需要向用户报告密码检查的结果。在这里，解密（declassification）起着重要作用。

为了允许存储在`match`中的值流向公共通道，我们在第14行添加了一个解密标签（D），指示存储在`match`中的信息的安全级别从Secret重新分类为Public。

工具考虑了解密标签，并允许信息流到第19行。相反，第18行也被注释为公共通道，但被报告为无效的信息流，因为`nameOkFlag`依赖于机密的用户名列表。

**Figure 8: 安全切片的密码检查程序**

注意，第18行被注释掉以避免信息泄露。

### 5. 相关工作

关于信息流控制（IFC）的先驱工作——部分调查见[6]——主要集中在运行时监控上，其中Fenton的数据标记机器（DDM）[8]是最突出的一个。DDM通过将每个变量和程序计数器（pc）与一个安全类关联，然后检查变量的值是否从具有相同或更低安全类的变量计算得出，并且在相同或更低安全类的上下文中进行计算，从而实现动态IFC。

最近，信息流的运行时监控再次引起了研究社区的关注。我们将概述一些当代的工作，以描述该领域的当前趋势。

Chandra和Franz [4] 提出使用一个受信任的多级安全虚拟机（VM）来执行完全不受信任的程序，而不会产生无效的信息流。他们已经实现了这些特殊JVM的几个原型，除了提供标准JVM的全部功能外，还提供了信息流强制基础设施。该基础设施基于原始字节码程序的静态转换阶段，插入用于跟踪隐式信息流的指令。如果VM推断某个指令的执行将泄露秘密信息，则会抛出异常并中止程序执行。这种方法的时间开销高达82%。关于静态转换阶段的空间开销没有提供信息。

受信任的多级安全VM启发了Java的动态信息流架构（DIFCA-J）[37]。两者之间的主要区别在于DIFCA-J独立于特定的JVM实现。DIFCA-J中的IFC不是由JVM完成的，而是通过一个名为访问控制模块的特殊类来实现的，该类使用安全标签而不是程序值来模拟JVM操作。时间开销在1300-1800%之间，相对于原始执行时间，静态转换阶段使代码大小增加了200-280% [37]。

最近，在[20]中，Nair等人提出了一种基于JVM的IFC方法——类似于[4]中描述的方法——其中扩展了VM的内部数据结构以存储安全标签。

GIFT [15] 是一种针对C程序的一般动态信息流跟踪框架。GIFT允许将安全标签与输入数据关联，然后通过应用代码的工具化动态地将这些标签传播到所有其他控件/数据依赖的数据。一组计算密集型应用程序的测试表明，该工具的运行时惩罚可达166%，空间开销可达60%。

除了已实施的方法外，还有一些理论上的发展值得一提。

Shroff等人[29]提出了一种基于程序语句间接依赖关系动态跟踪的运行时信息流控制系统。他们的目标是一种具有可变状态、条件分支和let绑定的高阶函数语言。不幸的是，该系统是不健全的，秘密信息流向公共通道可能在第一次发生时未被检测到。作为健全的替代方案，他们定义了一种基于静态计算依赖信息的信息流分析。然而，这种方法降低了运行时监控的好处，因为它失去了精度。

Le Guernic等人[18]描述了一种用于简单顺序语言的运行时监控系统，该语言具有while循环、条件语句、赋值和输出命令。他们使用自动机来跟踪信息流。自动机接收程序事件的抽象，并推断信息流是否有效。如前所述，该系统是第一个提出通过改变常规程序行为来保持执行过程中无无效流的系统。该监控系统是为一种非常简单的语言设计的——我们在这篇论文中也使用了这种语言来解释我们的方法——它不允许常见的特性，如非结构化的控制流、函数或指针，尚不清楚自动机方法是否可以应用于更复杂的语言。最近，Le Guernic [17] 扩展了自动机以应对并发程序。

当代关于静态IFC的研究大部分——见[27]的调查——源于Denning和Denning [7] 在编译时认证机制方面的工作，并主要使用非标准类型系统来强制保密性[34]。

通常，基于类型的分析不是流敏感的、上下文敏感的或对象敏感的，其精度在存在非结构化控制流的情况下会大幅下降。这些限制使得基于类型的分析难以应用于实际编程语言；然而，存在针对Java [19] 和Caml [30] 等语言的基于类型的信息流分析器。

本文中使用的检测无效流的依赖图方法在[12]中进行了描述。然后，在[11]中，Hammer等人进一步发展了这一思想，并引入了一个数据流分析框架来处理解密。安全级别通过程序依赖关系传播，然后将实际流入的流与输出通道允许的安全级别进行比较。如果输出通道的流入流不低于其允许的级别，则发现了一个无效流。

许多现实系统需要将其某些机密信息解密为其正常行为的一部分；当前的挑战是如何区分适当的和不适当的机密信息解密。Sabelfeld和Sands [28] 对存在解密情况下的信息流策略和强制机制的当前研究进行了综述。

### 6. 结论

我们提出了安全切片，这是一种程序转换技术，用于从不安全的程序中提取安全切片。安全切片通过静态检测源程序中的无效流并适当修改程序以消除运行时信息泄露的可能性来获得；因此，安全切片的所有执行都被保证是安全的。

信息流分析是静态进行的，如果检测到无效流，程序不会被拒绝，而是静态修改以使其安全。这样，我们缓解了先前静态和动态IFC方法的两个主要缺点：无效流的存在并不意味着整个程序被拒绝，并且不施加空间或运行时负载。

我们还展示了如何将安全切片应用于有意解密安全信息的程序；这是我们的技术相对于最近的动态IFC工作的独特之处。

目前，我们正在使用我们的Java和JVM字节码静态信息流分析工具进行实验，以研究安全切片是否适用于实际程序。

### 致谢

感谢匿名审稿人提供的宝贵意见。

### 参考文献

[1] Martin Abadi, Anindya Banerjee, Nevin Heintze, and Jon G. Riecke. A core calculus of dependency. In M. Ac, editor, POPL '99. Proceedings of the 26th ACM SIGPLAN-SIGACT on Principles of Programming Languages, January 20–22, 1999, San Antonio, TX, pages 147–160, New York, NY, USA, 1999. ACM Press.

[2] Gilles Barthe and Salvador Cavadini. From Interfering to Non-interfering Programs (unpublished draft), 2007.

[3] Gilles Barthe, David Pichardie, and Tamara Rezk. A Certified Lightweight Non-Interference Java Bytecode Verifier. In Proc. of 16th European Symposium on Programming (ESOP'07), volume 4421 of Lecture Notes in Computer Science, pages 125–140. Springer-Verlag, 2007.

[4] D. Chandra and M. Franz. Fine-Grained Information Flow Analysis and Enforcement in a Java Virtual Machine. to appear in 23rd Annual Computer Security Applications Conference (ACSAC 2007), Miami Beach, Florida; December 2007.

[5] Zhenqiang Chen, Baowen Xu, and Jianjun Zhao. An overview of methods for dependence analysis of concurrent programs. SIGPLAN Not., 37(8):45–52, August 2002.

[6] Dorothy E. Denning. A lattice model of secure information flow. Commun. ACM, 19(5):236–243, May 1976.

[7] Dorothy E. Denning and Peter J. Denning. Certification of programs for secure information flow. Commun. ACM, 20(7):504–513, July 1977.

[8] J. S. Fenton. Memoryless Subsystems. Computing J., 17(2):143–147, 1974.

[9] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. The program dependence graph and its use in optimization. ACM Trans. Program. Lang. Syst., 9(3):319–349, July 1987.

[10] J. A. Goguen and J. Meseguer. Security Policies and Security Models. sp, 00, 1982.

[11] C. Hammer, J. Krinke, and Frank Nodes. Intransitive Noninterference in Dependence Graphs. Second International Symposium on Leveraging Application of Formal Methods, Verification and Validation (ISoLA 2006), 2006.

[12] Christian Hammer, Jens Krinke, and Gregor Snelting. Information Flow Control for Java Based on Path Conditions in Dependence Graphs. In IEEE International Symposium on Secure Software Engineering, 2006.

[13] M. Harman, S. Danicic, Y. Sivagurunathan, and D. Simpson. The next 700 slicing criteria. 2nd UK workshop on program comprehension (Durham University, UK, July 1996), M. Munro, Ed., 1996.

[14] Susan Horwitz, Thomas Reps, and David Binkley. Interprocedural slicing using dependence graphs. In Proceedings of the ACM SIGPLAN '88 Conference on Programming Language Design and Implementation, volume 23, pages 35–46, Atlanta, GA, June 1988.

[22] Raja V. Rai, Laurie Hendren, Vijay Sundaresan, Patrick Lam, Etienne Gagnon, and Phong Co. Soot - a Java Optimization Framework. In Proceedings of CASCON 1999, pages 125–135, 1999.

[23] Raja V. Rai and Laurie J. Hendren. Jimple: Simplifying Java Bytecode for Analyses and Transformations. Technical report, Sable Research Group, McGill University, Montreal, Quebec, Canada, 1988.

[24] V. Ranganath, T. Amtoft, A. Banerjee, J. Hatcliff, and M. Dwyer. A new foundation for control-dependence and slicing for modern program structures. ACM Trans. Program. Lang. Syst., 29(5):1–43, 2007.

[25] V. P. Ranganath and J. Hatcliff. An Overview of the Indus Framework for Analysis and Slicing of Concurrent Java Software (Keynote Talk - Extended Abstract). pages 3–7, 2006.

[26] Roscoe and Goldsmith. What Is Intransitive Noninterference? In PCSFW: Proceedings of The 12th Computer Security Foundations Workshop. IEEE Computer Society Press, 1999.

[27] A. Sabelfeld and A. Myers. Language-Based Information-Flow Security. IEEE Journal on Selected Areas in Communications, 21(1):5–19, January 2003.

[28] Andrei Sabelfeld and David Sands. Dimensions and Principles of Declassification. In CSFW '05: Proceedings of the 18th IEEE Computer Security Foundations Workshop (CSFW'05), pages 255–269, Washington, DC, USA, 2005. IEEE Computer Society.

[15] Lap C. Lam and Tzi C. Chiueh. A General Dynamic Information Flow Tracking Framework for Security Applications. In Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06), pages 463–472. IEEE Computer Society, 2006.

[29] Paritosh Shroff, Scott Smith, and Mark Thober. Dynamic Dependency Monitoring to Secure Information Flow. In CSF '07: Proceedings of the 20th IEEE Computer Security Foundations Symposium, pages 203–217, Washington, DC, USA, 2007. IEEE Computer Society.

[16] Butler W. Lampson. A note on the confinement problem. Commun. ACM, 16(10):613–615, October 1973.

[30] V. Simonet. Flow Caml in a nutshell. In Proceedings of the first APPSEM-II workshop, pages 152–165, 2003.

[31] Saurabh Sinha and Mary J. Harrold. Analysis and Testing of Programs with Exception Handling Constructs. Software Engineering, 26(9):849–871, 2000.

[32] Gregor Snelting, Torsten Robschink, and Jens Krinke. Efficient Path Conditions in Dependence Graphs for Software Safety Analysis. ACM Trans. Softw. Eng. Methodol., 15(4):410–457, October 2006.

[33] Frank Tip. A survey of program slicing techniques. Journal of programming languages, 3:121–189, 1995.

[19] Andrew C. Myers. JFlow: Practical Mostly-Static Information Flow Control. In Symposium on Principles of Programming Languages, pages 228–241, 1999.

[20] Srijith K. Nair, Patrick N. D. Simpson, Bruno Crispo, and Andrew S. Tanenbaum. A Virtual Machine Based Information Flow Control System for Policy Enforcement. In First International Workshop on Run Time Enforcement for Mobile and Distributed Systems (REM 2007), pages 1–11, Dresden, Germany, 2007.

[21] Alessandro Orso, Saurabh Sinha, and Mary J. Harrold. Classifying data dependences in the presence of pointers for program comprehension, testing, and debugging. ACM Trans. Softw. Eng. Methodol.,

[34] Dennis M. Volpano and Geoffrey Smith. A Type-Based Approach to Program Security. In TAPSOFT '97: Proceedings of the 7th International Joint Conference CAAP/FASE on Theory and Practice of Software Development, pages 607–621, London, UK, 1997. Springer-Verlag.

[35] Mark D. Weiser. Program slices: formal, psychological, and practical investigations of an automatic program abstraction method. PhD thesis, University of Michigan, Ann Arbor, 1979.

[36] Baowen Xu, Ju Qian, Xiaofang Zhang, Zhongqiang Wu, and Lin Chen. A brief survey of program slicing. SIGSOFT Softw. Eng. Notes, 30(2):1–36, March 2005.

[37] Sachiko Yoshihama, Takeo Yoshizawa, Yuji Watanabe, Michiharu Kudoh, and Kazuko Oyanagi. Dynamic Information Flow Control Architecture for Web Applications. pages 267–282. 2007.
```

希望这能帮助你更好地理解和优化你的文本！如果有任何进一步的问题，请告诉我。