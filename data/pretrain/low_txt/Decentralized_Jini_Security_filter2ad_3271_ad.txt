### Solution Overview

The proposed solution leverages the capabilities of the underlying Java 2 security architecture and, if applicable, the existing Java Secure Socket Extension (JSSE). This approach does not require any centralized security or other servers. However, to support permission delegation, the proxy and the server must take additional steps, including the transport of SPKI certificates within the protocol they use. As a result, our solution is not entirely transparent to the proxy or service implementations. Given the requirement for protocol independence, our solution is reasonably easy to implement and aligns with Jini's central toolbox approach.

### Comparison with Other Solutions

Our solution addresses the proxy security problem by focusing on client and service authentication and method-level authorization, similar to other Jini security solutions. However, it offers several additional benefits:

- **Protocol Independence**: The solution does not impose unnecessary restrictions on the implementation of Jini services. It allows any protocol to be used between a Jini proxy and the corresponding server.
- **No Centralized Security Services**: The solution does not require any centralized security services, making it suitable for ad hoc networks.
- **Fine-Grained Permissions**: The solution enables fine-grained Java 2 permissions to be separately applied in the client, proxy, and server. Specifically, a client application that requests a Jini service runs in a separate protection domain from the proxy, thereby restricting the permissions the proxy has access to. Permissions are explicitly delegated from the application to the proxy, allowing the proxy to provide the service with proof that the application has the necessary permissions and genuinely intends to use them. These permissions can be further delegated to the service and presented as genuine Java permissions at the service JVM, enabling the service to use them when calling unrelated Java code. In essence, we have extended the Java 2 access control mechanisms to distributed environments, allowing an application to pass any Java 2 permissions to a Jini service through the service proxy.

### Future Directions

We plan to explore two major directions for future work:

1. **Applicability to Other Jini Mechanisms**: We aim to test the applicability of our solution to the security of other Jini mechanisms, such as leases, distributed events, and transactions. Our goal is to provide a toolbox that allows Jini service implementors to easily add strong, cryptographic security to these mechanisms without adversely affecting their environmental requirements.
2. **Integration with Additional Java Security Mechanisms**: We intend to study how to integrate our approach with additional Java security mechanisms, including the forthcoming Java Authentication and Authorization Service (JAAS) and the planned RMI Security Extension. Another important aspect requiring further work is the integration of a certificate revocation or validation mechanism, which is discussed in [20].

### Conclusions

Jini provides a variety of methods and tools for building distributed applications in decentralized, ad hoc network environments. However, the current state of the technology does not adequately address the security requirements in many such environments. In this paper, we have analyzed the client-service related security requirements relevant to typical Jini environments and described a software architecture, supported by an implementation, that provides decentralized solutions to these requirements. Our approach is based on applying SPKI-based trust management to control Jini proxies and delegate Java 2 permissions between Jini clients, proxies, and services. Our experience indicates that it is possible to build a completely decentralized security solution and apply it to Jini without losing any of its intrinsic properties. Our implementation does not restrict the methods and protocols that can be used to implement communication between a service and its proxies. Initial performance measurements suggest that, once optimized, the approach should provide adequate performance in practice.

### Acknowledgements

This work would not have been possible without the contributions of the SIESTA team: Johannes Lehtinen, Antti Mannisto, Petra Pietiläinen, Satu Virtanen, and Jukka Zitting. We also thank Yki Kortesniemi, Jonna Särs, and the anonymous reviewers for their valuable comments and suggestions, and Pekka Kanerva for his assistance in preparing this manuscript.

### References

[1] Ken Arnold, Bryan O’Sullivan, Robert W. Scheifler, Jim Waldo, and Ann Wollrath. The Jini Specification. Addison-Wesley, June 1999.
[2] Dirk Balfanz, Drew Dean, and Mike Spreitzer. A security infrastructure for distributed Java applications. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, pages 15–26, Oakland, California, May 2000.
[3] Konstantin Beznosov, Yi Deng, Bob Blakley, Carol Burt, and John Barkley. A resource access decision service for CORBA-based distributed systems. In Proceedings of the 15th Annual Computer Security Applications Conference (ACSAC ’99), pages 310–319, Phoenix, Arizona, December 1999.
[4] Matt Blaze, Joan Feigenbaum, John Ioannidis, and Angelos D. Keromytis. The KeyNote trust-management system version 2. RFC 2704, IETF, September 1999.
[5] Matt Blaze, Joan Feigenbaum, John Ioannidis, and Angelos D. Keromytis. The role of trust management in distributed systems security. In Jan Bosch, Jan Vitek, and Christian D. Jensen, editors, Secure Internet Programming: Security Issues for Mobile and Distributed Objects, Lecture Notes in Computer Science volume 1603, pages 185–210. Springer, 1999.
[6] Matt Blaze, Joan Feigenbaum, and Jack Lacy. Decentralized trust management. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 164–173, Oakland, California, May 1996.
[7] Geoffrey Clements. Jini Usersecurity project home page. http://www.bald-mountain.com/jini.html, 2000.
[8] Grzegorz Czajkowski and Thorsten von Eicken. JRes: a resource accounting interface for Java. In Proceedings of the Conference on Object-oriented Programming, Systems, Languages, and Applications (OOPSLA ’98), pages 21–35, Vancouver, Canada, October 1998.
[9] Steven E. Czerwinski, Ben Y. Zhao, Todd D. Hodes, Anthony D. Joseph, and Randy H. Katz. An architecture for a secure service discovery service. In Proceedings of the 5th Annual ACM/IEEE International Conference on Mobile Computing and Networks (MobiCom ’99), pages 24–35, Seattle, Washington, August 1999.
[10] Tim Dierks and Christopher Allen. The TLS protocol, version 1.0. RFC 2246, IETF, January 1999.
[11] Carl Ellison, Bill Frantz, Butler Lampson, Ron Rivest, Brian Thomas, and Tatu Ylönen. SPKI certificate theory. RFC 2693, IETF, September 1999.
[12] Pasi Eronen, Johannes Lehtinen, Jukka Zitting, and Pekka Nikander. Extending Jini with decentralized trust management. In Short paper proceedings of the 3rd IEEE Conference on Open Architectures and Network Programming (OPENARCH 2000), pages 25–29, Tel Aviv, Israel, March 2000.
[13] Eurescom. Jini and friends at work project home page. http://www.eurescom.de/Public/Projects/P1000-series/P1005/P1005.htm, 2000.
[14] Luigi Giuri. Role-based access control on the web using Java. In Proceedings of the 4th ACM workshop on Role-based access control (RBAC ’99), pages 11–18, Fairfax, Virginia, October 1999.
[15] Li Gong. Inside Java 2 Platform Security: Architecture, API design, and implementation. Addison-Wesley, June 1999.
[16] Erik Guttman, Charles Perkins, John Veizades, and Michael Day. Service location protocol, version 2. RFC 2608, IETF, June 1999.
[17] Peer Hasselmeyer, Roger Kehr, and Marco Voß. Trade-offs in a secure Jini service architecture. In Claudia Linnhoff-Popien and Heinz-Gerd Hegering, editors, Trends in Distributed Systems: Towards a Universal Service Market. Third International IFIP/GI working conference proceedings (USM 2000), Lecture Notes in Computer Science volume 1890, pages 190–201, Munich, Germany, September 2000. Springer.
[18] Tero Hasu. Storage and retrieval of SPKI certificates using the DNS. Master’s thesis, Helsinki University of Technology, April 1999.
[19] Trent Jaeger, Atul Prakash, Jochen Liedtke, and Nayeem Islam. Flexible control of downloaded executable content. ACM Transactions on Information and System Security, 2(2):177–228, May 1999.
[20] Yki Kortesniemi, Tero Hasu, and Jonna Särs. A revocation, validation and authentication protocol for SPKI based delegation systems. In Proceedings of the 2000 Network and Distributed System Security Symposium (NDSS 2000), pages 85–101, San Diego, California, February 2000.
[21] Charlie Lai, Li Gong, Larry Koved, Anthony Nadalin, and Roland Schemers. User authentication and authorization in the Java platform. In Proceedings of the 15th Annual Computer Security Applications Conference (ACSAC ’99), pages 285–290, Phoenix, Arizona, December 1999.
[22] Tuomo Lampinen. Using SPKI certificates for authorization in CORBA based distributed object-oriented systems. In Proceedings of the 4th Nordic Workshop on Secure IT systems (NordSec ’99), pages 61–81, Kista, Sweden, November 1999.
[23] Sanna Liimatainen et al. Tessa project home page. http://www.tml.hut.fi/Research/TeSSA/, 2000.
[24] Riku Mettälä. Bluetooth protocol architecture white paper, version 1.0. Bluetooth Special Interest Group, August 1999.
[25] Pekka Nikander. An Architecture for Authorization and Delegation in Distributed Object-Oriented Agent Systems. Ph.D. thesis, Helsinki University of Technology, March 1999.
[26] Pekka Nikander. Fault tolerance in decentralized and loosely coupled systems. In Proceedings of Ericsson Conference on Software Engineering, Stockholm, Sweden, September 2000.
[27] Pekka Nikander and Jonna Partanen. Distributed policy management for JDK 1.2. In Proceedings of the 1999 Network and Distributed System Security Symposium (NDSS ’99), pages 91–101, San Diego, California, February 1999. Salutation home page.
[28] Salutation Consortium. http://www.salutation.org/, 2000.
[29] Frank Stajano and Ross Anderson. The resurrecting duckling: Security issues for ad-hoc wireless networks. In Bruce Christianson, Bruno Crispo, James A. Malcolm, and Michael Roe, editors, Security Protocols, 7th International Workshop Proceedings, Lecture Notes in Computer Science volume 1796, Cambridge, UK, April 1999. Springer.
[30] Christopher Steel. Securing Jini connection technology. Technical presentation 573 at the JavaOne 2000 conference, San Francisco, California. Slides available from http://java.sun.com/javaone/javaone00/, June 2000.
[31] Daniel F. Sterne, Gregg W. Tally, C. Durward McDonell, David L. Sherman, David L. Sames, Pierre X. Pasturel, and E. John Sebes. Scalable access control for distributed object systems. In Proceedings of the 8th USENIX Security Symposium, pages 201–214, Washington, D.C., August 1999.
[32] Sun Microsystems. Java remote method invocation security extension. Technical specification, early look draft 3, http://java.sun.com/products/jdk/rmi/rmisec-doc/, April 2000.
[33] Sun Microsystems. Java secure socket extension home page. http://java.sun.com/products/jsse/, 2000.
[34] Universal Plug and Play Forum. Universal plug and play home page. http://www.upnp.org/, 2000.
[35] Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall. A note on distributed computing. Technical Report SMLI TR-94-29, Sun Microsystems Laboratories, November 1994.
[36] Dan S. Wallach, Dirk Balfanz, Drew Dean, and Edward W. Felten. Extensible security architectures for Java. In Proceedings of the 16th ACM Symposium on Operating Systems Principles (SOSP ’97), pages 116–128, Saint-Malo, France, October 1997.
[37] Dan S. Wallach and Edward W. Felten. Understanding Java stack inspection. In Proceedings of the 1998 IEEE Symposium on Security and Privacy, pages 52–63, Oakland, California, May 1998.
[38] Ian Welch and Robert J. Stroud. Supporting real world security models in Java. In Proceedings of the 7th IEEE Workshop on Future Trends of Distributed Computing Systems, pages 155–159, Cape Town, South Africa, December 1999.