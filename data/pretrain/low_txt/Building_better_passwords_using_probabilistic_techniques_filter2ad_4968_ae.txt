### 6.3 Password Cracking Results

To evaluate our password analysis, we employed two password cracking systems: (1) John the Ripper [4] and (2) a probabilistic password cracker. We ran John the Ripper in incremental mode, which, according to the documentation, is its most powerful cracking mode and will eventually try all possible character combinations as passwords [4].

In the first set of results, the threshold value for the password checker was set to one day, limiting the number of guesses made by both password crackers to approximately 43.2 billion. This number represents the approximate number of guesses that can be hashed by our test machine in one day.

To compare our password checker with other existing checkers (such as Microsoft's password meter), we needed to map the threshold value of our password checker to their scoring system. For example, Microsoft outputs weak, medium, strong, and best as the result of password checking. Since we do not know their algorithm for scoring password strength, this comparison was not feasible.

Tables 5 and 6 show the results of the password cracking by John the Ripper and the Probabilistic Password Cracker (PPC) respectively, for a one-day threshold. We divided the cracking results using the AMP system into four groups:
- **Originally Strong**: Passwords determined as strong based on the set threshold by AMP.
- **Originally Weak, Not Able to Strengthen**: Passwords recognized as weak by AMP, where the system tried all possible modifications within an edit distance of one but could not reduce the modified probability values below the threshold.
- **Hotmail Percentage**
- **MySpace Percentage**
- **RockYou Percentage**

Figure 4 illustrates how quickly weak passwords (that could be strengthened) were cracked. With only 1 billion password guesses, which can be made in less than one hour, about 20% of MySpace passwords, 30% of Hotmail, and 35% of RockYou passwords were cracked. After one day, these numbers increased to 38%, 48%, and 53%, respectively.

Even at a four-day threshold, we significantly improved the security of weak passwords. However, some weak passwords could not be strengthened because we limited changes to an edit distance of one. Additionally, we did not impose any restrictions on the proposed passwords, such as a minimum length. The identified weak passwords that we could not strengthen were 4.0%, 4.8%, 18.6%, and 37.7% (of the total test password set) for 12 hours, 24 hours, 48 hours, and 96 hours, respectively. For example, the password "123456" in our data set could not be strengthened. This issue could be addressed by allowing an edit distance of two or by imposing minimal restrictions on the input password.

### 7. Conclusion and Future Work

We developed a new approach to help users create strong passwords by determining a threshold value that rejects weak passwords and then slightly modifies them to make them strong. We used a probabilistic context-free grammar to estimate the probability of a password being cracked. This grammar is derived through training on large sets of revealed passwords and can generate passwords in the order of highest probability, making it easy to calculate Shannon entropy and guessing entropy. We also discussed a method to calculate Shannon entropy directly from the grammar. The reject function was based on a threshold probability that separates weak from strong passwords.

We built a system (AMP) and demonstrated the effectiveness of our approach through a series of experiments. We further showed how to use a dynamic update algorithm to change the grammar as the system generated passwords, preserving the ability to generate strong passwords. We also demonstrated that the update algorithm would drive the grammar to higher Shannon entropy, making the new password distribution (including passwords generated by AMP) increasingly resistant to password cracking.

In future work, we plan to explore fast implementations for finding passwords with an edit distance greater than one. We also want to further investigate the modification algorithm to determine the most effective operations for generating usable passwords and to examine the security of the system if all aspects of the algorithms and thresholds were known. Knowing the threshold, an attacker could potentially eliminate passwords above the threshold in our approach. However, our dynamic update algorithm constantly changes the probabilities of the grammar after any password is strengthened, moving towards a more uniform probability distribution, which would be difficult for an attacker to model without access to all the proposed passwords.

### 8. References

[1] M. Weir, S. Aggarwal, M. Collins, and H. Stern, “Testing metrics for password creation policies by attacking large sets of revealed passwords,” Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS '10), October 4-8, 2010, pp. 163-175.

[2] E. R. Verheul, “Selecting secure passwords,” M. Abe (Ed.): CT-RSA 2007, LNCS 4377, pp 49-66, 2007.

[3] M. Weir, Sudhir Aggarwal, Breno de Medeiros, Bill Glodek, “Password Cracking Using Probabilistic Context Free Grammars,” Proceedings of the 30th IEEE Symposium on Security and Privacy, May 2009, pp. 391-405.

[4] The Open wall group, John the Ripper password cracker, http://www.openwall.com.

[5] Shannon Riley, “Password security: what users know and what they actually do,” Usability News, 8(1), 2006.

[6] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna, "Your botnet is my botnet: Analysis of a botnet takeover," Tech. Rep., April 2009.

[7] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. Mazurek, L. Bauer, N. Christin, and L. F. Cranor, “Encountering stronger password requirements: user attitudes and behaviors,” In 6th Symposium on Usable Privacy and Security, July 2010.

[8] Furnell, S., “An assessment of website password practices,” Computers & Security 26, 7-8 (2007), 445-451.

[9] W. Burr, D. Dodson, R. Perlner, W. Polk, S. Gupta, E. Nabbus, “NIST special publication 800-63-1 electronic authentication guideline,” National Institute of Standards and Technology, Gaithersburg, MD, April, 2006.

[10] Y. Zhang, F. Monrose, and M. K. Reiter, “The security of modern password expiration: an algorithmic framework and empirical analysis,” In Proceedings of ACM CCS’10, 2010.

[11] Philip G. Inglesant, M. Angela Sasse, “The true cost of unusable password policies: password use in the wild,” Proc. of the 28th international conference on Human factors in computing systems, April 10-15, 2010, Atlanta, Georgia.

[12] Charoen, D., Raman, M., and Olfman, L., “Improving end user behavior in password utilization,” Systemic Practice and Action Research, 21(1), 55. 2008.

[13] A. Adams and M. A. Sasse, “Users are not the enemy,” Communications of the ACM, 42(12):40–46, 1999.

[14] J. Campbell, W. Ma, D. Kleeman, “Impact of restrictive composition policy on user password choices,” Behavior and Information Technology, Vol. 30, No. 3, May-June 2011.

[15] Florencio, D. and Herley, C., “A large-scale study of web password habits,” In Proceeding of the 16th Int. Conf. on World Wide Web, 2007.

[16] R. Shay, S. Komanduri, P. G. Kelley, P. G. Leon, M. L. Mazurek, L. Bauer, N. Christin, L. F. Cranor, and S. Egelman, “Of passwords and people: measuring the effect of password-composition policies,” Proceeding of 2011 Annual Conference on Human Factors in Computing Systems, 2011.

[17] G. Bard, “Spelling-error tolerant, order independent passphrases via the Damerau-Levenshtein string-edit distance metric,” Fifth Australasian Symposium on ACSW Frontiers - Volume 68 (Ballarat, Australia, January 30 - February 02, 2007), 117-124.

[18] Yan, J. J., Blackwell, A., Anderson, R. and Grant A., “The memorability and security of passwords -- some empirical results,” Technical Report No. 500 (September 2000) Computer Laboratory, University of Cambridge.

[19] A. Forget, S. Chiasson, P.C. van Oorschot, R. Biddle, “Improving text passwords through persuasion,” Symposium on Usable Privacy and Security (SOUPS) 2008, July 23–25, 2008, Pittsburgh, PA USA.

[20] J. Yan, “A note on proactive password checking,” ACM New Security Paradigms Workshop, New Mexico, USA, 2001.

[21] EH Spafford, “OPUS: preventing weak password choices,” Computers & Security (1992).

[22] S. Schechter, C. Herley, M. Mitzenmacher, “Popularity is everything: a new approach to protecting passwords from statistical-guessing attacks,” HotSec'10: Proceedings of the 5th USENIX conference on Hot Topics in Security, 2010.

[23] C. Castelluccia, M. Durmuth, D. Perito, “Adaptive password-strength meters from Markov models,” NDSS ’12, 2012.

[24] C. E. Shannon, “Prediction and entropy of printed English,” Bell Systems Tech. J., vol. 30, pp 50-64, Jan. 1951.

[25] J. Massey, “Guessing and entropy,” 1994 IEEE Symposium on Information Theory, pp. 204, 1994.

[26] Damerau, F. J. "A technique for computer detection and correction of spelling errors. Communications of the ACM, vol. 7, Issue 3, pp. 171-176, March 1964.

[27] T. M. Cover and J. A. Thomas, Elements of Information Theory, Wiley, 1991.

[28] A. Vance, “If your password is 123456, just make it hackme,” New York Times, January 2010, http://www.nytimes.com/2010/01/21/technology/21password.html.

[29] Robert McMillan, “Phishing attack targets MySpace users,” http://www.infoworld.com/d/security-central/phishing-attack-targets-myspace-users-614, October 27, 2006.

[30] T. Warren, “Thousands of Hotmail Passwords Leaked,” http://www.neowin.net/news/main/09/10/05/thousands-of-hotmail-passwords-leaked-online.

[31] A list of popular password cracking wordlists, 2005, http://www.outpost9.com/files/WordLists.html.