# 备份与恢复

## PITR (Point-In-Time Recovery)

### 解读 `recovery.conf` 文件
- 示例文件路径: `$PGHOME/share/recovery.conf.sample`
- `restore_command`: 用于还原归档文件的命令。
- `recovery_target_name | recovery_target_time | recovery_target_xid`: 指定恢复的目标。其中，`recovery_target_name` 是通过 `pg_create_restore_point()` 生成的。
- `recovery_target_inclusive`: 当目标为时间和XID时，可配置是否恢复到（包含/接近但不包含）指定的时间点或XID。
- `recovery_target_timeline`: 指定要恢复到的时间线，或使用 `latest` 表示直到最大的时间线。
- `pause_at_recovery_target`: 在恢复到指定点后暂停恢复，通常用于连接数据库检测是否已到达想要恢复的时间点。如果未达到，则可以关闭数据库调整恢复目标点，继续恢复。到达指定点后，使用 `pg_xlog_replay_resume()` 停止恢复并激活数据库。启用 `hot_standby` 才能使用此功能。

### 基于单个表空间/数据库的还原和恢复
- 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020123261422581/](http://blog.163.com/digoal@126/blog/static/16387704020123261422581/)

### 示例
- 参考链接: [http://blog.163.com/digoal@126/blog/static/1638770402012431063591/](http://blog.163.com/digoal@126/blog/static/1638770402012431063591/)

### 示例配置
- 使用基础备份恢复到特定时间点:
  - `recovery_target_timeline=2`
  - 恢复后激活 `timeLine=2`
  - 改变 `timeLine=1`
  - 假设这是 `pg_create_restore_point('test2')`
  - 假设这是基础备份 `pg_create_restore_point('test1')`
- WAL日志持续归档

# 高可用性和复制

## 传统高可用性 (HA) 和共享存储
- 缺点: 存储、连接存储的线路甚至HBA卡都可能成为故障点，导致HA并不真正高可用。
- 通常需要依赖存储复制或文件系统异机镜像来应对存储层面的故障。

## PostgreSQL流复制
- LVS + PG流复制可以组成读负载均衡的场景。
- PG流复制还可以应用于异地容灾的场景。
- PG流复制作为HA的一部分，通过VIP漂移和激活同步standby可以实现极高的数据可靠性和高可用性。
- PgCloud: 一种不依赖虚拟化和集中式存储的思路。
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/1638770402011111422518103/](http://blog.163.com/digoal@126/blog/static/1638770402011111422518103/)

### 异步流复制原理
- 描述了主库和备库之间的WAL日志传输和应用过程。

### 参数调优
- **Primary**
  - `max_wal_senders`
  - `wal_sender_delay` (事务提交时中断休眠)
  - `wal_keep_segments`
  - `vacuum_defer_cleanup_age` (VACUUM和HOT更新推迟清理死行版本的事务数)
- **Standby**
  - `hot_standby`
  - `max_standby_archive_delay` (允许应用一个WAL段的最大总时间)
  - `max_standby_streaming_delay` (从主库接收到WAL数据后的最大应用时间)
  - `wal_receiver_status_interval` (最小频率，备库报告最后写入、刷新和应用的事务日志位置)
  - `hot_standby_feedback` (向主库发送当前在备库执行的查询反馈)

### 同步流复制原理
- 多个备库中只有一个同步备库。
- 同步范围: 集群、数据库、用户会话、事务。
- 参数调优与异步流复制类似，增加以下参数:
  - `synchronous_replication`
  - `synchronous_standby_names`

### 流复制 `hot_standby` 演示
- 规划主机、网络、存储，同步主备机器的时间。
- 生成主库。
- 配置主库 `postgresql.conf` 和 `pg_hba.conf`。
- 新建复制角色。
- 配置 `hot_standby` `.pgpass` 和数据目录。
- 使用 `pg_basebackup` 创建备库基础备份。
- 配置备库 `recovery.conf` 和 `postgresql.conf`。
- 启动 `hot_standby`。
- 测试新建用户、表空间、数据库、schema、数据表。
- 使用 `pgbench` 进行压力测试。
- 角色切换测试。

- 参考链接: [http://blog.163.com/digoal@126/blog/static/1638770402012012361519/](http://blog.163.com/digoal@126/blog/static/1638770402012012361519/)

## 数据库复制技术
- 基于触发器的复制: Slony-I, Bucardo, Londiste
- 基于SQL分发的复制: pgpool
- 基于页面改变日志的复制: 流复制, 归档复制

## Scale-Out
- PG-XC
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020121952051174/](http://blog.163.com/digoal@126/blog/static/16387704020121952051174/)
- pl/proxy
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201192535630895/](http://blog.163.com/digoal@126/blog/static/163877040201192535630895/)
  - 视频演示: [http://www.tudou.com/programs/view/TcluEJ4ZfPA/](http://www.tudou.com/programs/view/TcluEJ4ZfPA/)
- pgpool-II
  - 参考链接: [http://pgfoundry.org/projects/pgpool/](http://pgfoundry.org/projects/pgpool/)

# 监控数据库活动
- 长SQL
- 锁
- 未使用的索引
- 死元组比率
- 服务器负载
- 服务器读写吞吐量
- 服务器I/O等待
- 服务器交换页出入
- 服务器进程数
- 错误和警告日志
- `pg_stat_statements`
- 单个SQL的CPU使用情况
- 使用PostgreSQL收集和分析操作系统统计信息
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201211354145701/](http://blog.163.com/digoal@126/blog/static/163877040201211354145701/)

# 过程语言
- 支持多种语言: Perl, Python, Tcl, PL/pgSQL等。
- PL/pgSQL函数在PostgreSQL中作为一个事务处理，当触发异常时，异常中的内容作为另一个事务。
- 调试PL/pgSQL函数
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201222011550296/](http://blog.163.com/digoal@126/blog/static/163877040201222011550296/)
- PostgreSQL 2-PC事务
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020111141103578/](http://blog.163.com/digoal@126/blog/static/16387704020111141103578/)

# 附加模块
- 查找模块的途径:
  - [http://pgxn.org/](http://pgxn.org/)
  - [http://pgfoundry.org/](http://pgfoundry.org/)
  - [http://www.postgresql.org/docs/9.1/static/contrib.html](http://www.postgresql.org/docs/9.1/static/contrib.html)

### 常用模块
- `auto_explain`: 自动记录超过设定运行时间的SQL执行计划
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020115825612145/](http://blog.163.com/digoal@126/blog/static/16387704020115825612145/)
- `dblink`: 数据库链接，可用于链接远程数据库
  - 参考链接: [http://www.postgresql.org/docs/9.1/static/dblink.html](http://www.postgresql.org/docs/9.1/static/dblink.html)
- `file_fdw`: 基于文件创建外部表
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201141641148311/](http://blog.163.com/digoal@126/blog/static/163877040201141641148311/)
- `pageinspect`: 用于查看表或索引的PAGE以及ITEM的信息
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020114273265960/](http://blog.163.com/digoal@126/blog/static/16387704020114273265960/)
- `pg_archivecleanup`: 清除归档的模块
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020110445753526/](http://blog.163.com/digoal@126/blog/static/16387704020110445753526/)

### 其他常用模块
- `pgbench`: 压力测试模块
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201151534631313/](http://blog.163.com/digoal@126/blog/static/163877040201151534631313/)
- `pg_buffercache`: 查看buffer信息的模块
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/16387704020115149458640/](http://blog.163.com/digoal@126/blog/static/16387704020115149458640/)
- `pg_freespacemap`: 查看freespacemap信息的模块
  - 参考链接: [http://www.postgresql.org/docs/9.1/static/pgfreespacemap.html](http://www.postgresql.org/docs/9.1/static/pgfreespacemap.html)
- `pgrowlocks`: 查看行锁的模块
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/1638770402011515105557166/](http://blog.163.com/digoal@126/blog/static/1638770402011515105557166/)
- `pg_stat_statements`: 统计数据库执行的SQL语句的次数以及CPU开销的模块
  - 参考链接: [http://www.postgresql.org/docs/9.1/static/pgstatstatements.html](http://www.postgresql.org/docs/9.1/static/pgstatstatements.html)
- `pgstattuple`: 获得tuple级统计信息的模块
  - 参考链接: [http://www.postgresql.org/docs/9.1/static/pgstattuple.html](http://www.postgresql.org/docs/9.1/static/pgstattuple.html)
- `pg_test_fsync`: 调用各种OS同步写接口的测试模块
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201141795025354/](http://blog.163.com/digoal@126/blog/static/163877040201141795025354/)
- `pg_trgm`: 可用于近似度匹配的模块
  - 参考链接: [http://blog.163.com/digoal@126/blog/static/163877040201191882553803/](http://blog.163.com/digoal@126/blog/static/163877040201191882553803/)
- `pg_upgrade`: 基于catalog变更的升级模块，通常比 `pg_dump` 升级速度快很多倍。
  - 参考链接: [http://www.postgresql.org/docs/9.1/static/pgupgrade.html](http://www.postgresql.org/docs/9.1/static/pgupgrade.html)
- `Foreign data wrapper`: 建立外部表的模块
  - 参见day1的fdw章节
- `pgfincore`: 模拟持久化缓存的模块
  - 参考链接:
    - [http://blog.163.com/digoal@126/blog/static/163877040201062944945126/](http://blog.163.com/digoal@126/blog/static/163877040201062944945126/)
    - [http://blog.163.com/digoal@126/blog/static/1638770402011630102117658/](http://blog.163.com/digoal@126/blog/static/1638770402011630102117658/)
    - [http://blog.163.com/digoal@126/blog/static/16387704020120524144140/](http://blog.163.com/digoal@126/blog/static/16387704020120524144140/)

### 其他常见的支持PostgreSQL的外围软件
- 全文检索: Sphinx
- 地理信息: PostGIS

# 性能优化综合案例
- 参考链接:
  - [http://blog.163.com/digoal@126/blog/static/163877040201221382150858/](http://blog.163.com/digoal@126/blog/static/163877040201221382150858/)
  - [http://blog.163.com/digoal@126/blog/static/163877040201221333411196/](http://blog.163.com/digoal@126/blog/static/163877040201221333411196/)

# 致谢
- 关于本PPT有问题请发邮件至 PI:EMAIL
- 保持联系, 个人QQ: 276732431
- 群: 3336901
- 【参考】
  - 《PostgreSQL 9.1.3 Manual》
  - 《PostgreSQL 9 Administration Cookbook》
  - 《PostgreSQL 9.0 High Performance》
- 【更多内容请关注】
  - [http://blog.163.com/digoal@126/](http://blog.163.com/digoal@126/)

# 中国2012 PostgreSQL用户大会
- 地点: 北京人民大学
- 时间: 6月14-17号
- 内容简介:
  - 本次大会将邀请社区的核心组员Magnus Hagander, 主要开发人员Simon Rigg、PG-XC的首席架构师铃木幸一(Suzuki Koichi)及其他海外专家分享最前沿的PostgreSQL方面的信息。同时还有业界的资深人员作相关演讲。
  - PG-XC峰会
  - 数据库应用分会场
  - 内核开发分会场
  - 管理与性能调优分会场
  - PostgreSQL ACE颁奖
  - 主题: 开放征集中