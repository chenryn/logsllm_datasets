### Information and Admin Privileges
The first consideration is that the information already has Admin privileges. The second possibility is that an unexecuted code path could generate a failure if the user lacks Admin privileges. After weighing the evidence, we conclude that the check for Admin privileges is an explicit decision made by the application developers to require such privileges.

### 5. Related Work

A common approach to enhancing system security is to sandbox applications or users, thereby reducing the scope of individual security breaches. Common sandboxing techniques include virtual machines [15], system call interposition [1, 14, 30], and restricted file systems [12]. Our work diverges from these approaches as we are not developing a new sandbox or a new technology to implement existing sandboxes. Instead, our tracing technique is designed to help developers and system administrators utilize an established and well-understood sandbox: the unprivileged user.

Previous research has explored technologies for building or re-building systems to better adhere to the principle of least privilege [13, 25, 32]. Provos et al. demonstrated how separating OpenSSH into privileged and unprivileged parts (privilege separation) could reduce its vulnerability to several security issues [26]. Brumley and Song introduced the Privtrans tool, which automates this process using static analysis and annotations on privileged operations [5]. Our technique complements Privtrans, and our tracing method could potentially be used to automatically generate the required annotations.

Much of the earlier work assumes that some part of the program under investigation (e.g., OpenSSH) legitimately requires the ability to perform a privileged operation. In contrast, our investigation into Windows applications suggests that in many cases, the requirement for the application to run in a privileged context is a trivial bug. In other cases, it reflects a larger design flaw. Out of the eight cases we evaluated, only RAS and Power Config had a justifiable need for Admin privileges.

Some previous research has focused on new models for access control, such as Role-Based Access Control, Type Enforcement, and Mandatory Access Control [20]. Developing policies for such systems, especially when retrofitting policies to existing applications, is recognized as requiring significant effort [28]. A tracing approach like ours might aid in policy development by providing insights into why particular applications do or do not violate specific access control policies.

We now consider previous work that has used static analysis [2, 34], a commonly cited alternative to dynamic tracing techniques. A major strength of static analysis is its ability to achieve comprehensive code coverage easily, while dynamic techniques often require sophisticated test-case generation strategies to exercise all code paths, if at all possible. However, no one has previously attempted to apply static analysis to this problem, and we believe it would be difficult or impossible for at least three reasons. First, the underlying property being checked depends on all ACLs on the system, which is not a fixed target. It is standard practice to reconfigure ACLs based on the deployment environment [24], and the actual ACLs can depend on runtime state, e.g., virtual directories such as “My Documents” will be mapped to different directories with different ACLs depending on the current user. Second, our investigation shows that privilege failures sometimes occur after the flow of control passes through multiple libraries, making static analysis increasingly challenging as the scope of the analysis increases. Lastly, static analysis typically requires source code and sometimes additional annotations, which may not be available if portions of the code are only in binary format. This is a common situation for system administrators and developers who use third-party components.

The most closely related previous work is the current developer practice of identifying privilege failures by tracing the file system or registry and searching for "ACCESS DENIED" [17]. Our technique goes beyond this by monitoring a complete set of functions within the Windows security subsystem and implementing a more sophisticated noise filtering strategy. Our evaluation in Section 4 justifies the importance of both these advances for identifying least-privilege incompatibilities. On UNIX systems, system call tracing is sometimes similarly used to debug access failures. Our tracing technique differs from system call tracing in its more advanced noise filtering and the significantly smaller code base that must be correctly understood to capture all access failures. System call tracing must monitor all functions with security implications exposed by the OS API, while we only need to monitor five functions in the Windows security subsystem.

A recently proposed alternative approach to eliminating least-privilege incompatibilities is to encourage developers to run without Admin privileges [27]. While this practice helps with new code bases, it is challenging to incorporate into large pre-existing code bases. Even in the development of new software, our tracing technique provides several additional benefits to developers running without Admin privileges: individual test passes can uncover multiple least-privilege incompatibilities; these incompatibilities are identified as such (not just as bugs with unknown causes); and additional debugging information, such as complete call stacks (if symbol files are present), object names, and ACLs, is provided.

### 6. Conclusion and Future Directions

Least-privilege incompatibilities cause many Windows users to run with Admin privileges, significantly increasing the vulnerability of Windows systems. To address this, we introduce a black-box tracing technique that identifies the causes of least-privilege incompatibilities. Our technique captures all least-privilege incompatibilities on exercised code paths.

We evaluated our tracing technique using eight least-privilege incompatible applications, spanning various user types and exhibiting different reasons for the underlying incompatibilities. Based on these evaluations and subsequent discussions with developers, we conclude that the tracing technique makes fixing or mitigating least-privilege incompatibilities significantly easier.

In the future, our tracing technique would provide even more value if integrated with other development technologies, such as the ability to set breakpoints. Additionally, we believe that our log validation technique highlights the need for a utility to configure security permissions associated with objects other than files and registry keys. Such a utility would aid system administrators in mitigating some least-privilege incompatibilities and be convenient for developers debugging these incompatibilities. Finally, we speculate that a tracing technique like ours could be fruitfully applied to some least-privilege problems on other operating systems.

### Acknowledgements

We thank our colleagues at Microsoft and Microsoft Research for their assistance and insightful comments, particularly Doug Beck, Bill Bolosky, Brad Daniels, Jon Howell, Jon Pincus, Dan Simon, Helen Wang, Rich Ward, and Alec Wolman.

### References

[1] A. Acharya and M. Raje. MAPbox: Using Parameterized Behavior Classes to Constrain Untrusted Applications. USENIX Security 2000.
[2] K. Ashcraft and D. Engler. Using Programmer-Written Compiler Extensions to Catch Security Holes. IEEE Security and Privacy 2002.
[3] T. Ball. Abstraction-guided Test Generation: A Case Study, Microsoft Research Technical Report, MSR-TR-2003-86, November 2003.
[4] K. Brown. Keith’s Security Hall of Shame. http://www.pluralsight.com/keith/hallofshame/default.htm.
[5] D. Brumley and D. Song. Privtrans: Automatically Partitioning Programs for Privilege Separation. USENIX Security 2004.
[6] M. E. Carson. Sendmail without the Superuser. USENIX Security 1993.
[7] CERT. Advisory CA-2004-02 Email-borne Viruses. http://www.cert.org/advisories/CA-2004-02.html.
[8] CERT. AOL Instant Messenger client for Windows contains a buffer overflow while parsing TLV 0x2711 packets. http://www.kb.cert.org/vuls/id/907819.
[9] CERT. Critical Vulnerabilities in Microsoft Windows. http://www.us-cert.gov/cas/techalerts/TA04-212A.html.
[10] CERT. Internet Explorer Update to Disable ADODB.Stream ActiveX Control. http://www.us-cert.gov/cas/techalerts/TA04-184A.html.
[11] H. Chen, D. Wagner, and D. Dean. Setuid Demystified. USENIX Security 2002.
[12] C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle, and V. Gligor. SubDomain: Parsimonious Server Security. LISA 2000.
[13] C. Evans. Very Secure FTP Daemon. http://vsftpd.beasts.org.
[14] T. Garfinkel. Traps and Pitfalls: Practical Problems in System Call Interposition Based Security Tools. NDSS 2003.
[15] T. Garfinkel, B. Pfaff, J. Chow, M. Rosenblum, and D. Boneh. Terra: A Virtual Machine-Based Platform for Trusted Computing. SOSP 2003.
[16] A. Gotlieb, B. Botella, and M. Rueher. Automatic Test Data Generation Using Constraint Solving Techniques. In Proceedings of the International Symposium on Software Testing and Analysis, pages 53-62. ACM, 1998.
[17] D. GUI. Debugging Permissions Problems. http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnaskdr/html/askgui03272001.asp.
[18] M. Howard, J. Pincus, and J. Wing. Measuring Relative Attack Surfaces. Proceedings of Workshop on Advanced Developments in Software and Systems Security, Taipei, December 2003. Also CMU-CS-03-169 Technical Report, August 2003.
[19] D. Jackson and M. Vaziri. Finding Bugs with a Constraint Solver. In Proceedings of the International Symposium on Software Testing and Analysis, pages 14-25. ACM, 2000.
[20] P. A. Loscocco and S. D. Smalley. Meeting Critical Security Objectives with Security-Enhanced Linux. In the Proceedings of the 2001 Ottawa Linux Symposium, July 2001.
[21] Microsoft. Certain Programs Do Not Work Correctly If You Log On Using a Limited User Account. http://support.microsoft.com/default.aspx?scid=kb;en-us;307091.
[22] Microsoft. Retrieving the Properties of a Connection (VBScript). http://msdn.microsoft.com/library/default.asp?url=/library/en-us/ics/ics/retrieving the properties of a connection vbscript .asp.
[23] T. Oetiker. MSI Packaging How-to. http://isg.ee.ethz.ch/tools/realmen/det/msi.en.html.
[24] P. Proctor. Hardening Windows NT Against Attack. http://www.secinf.net/windows security/Hardening Windows NT Against Attack.html.
[25] N. Provos. Improving Host Security with System Call Policies. USENIX Security 2003.
[26] N. Provos, M. Friedl, and P. Honeyman. Preventing Privilege Escalation. USENIX Security 2003.
[27] P. Provost. Non-Admin Development in VS.NET 2003. http://www.peterprovost.org/archive/2004/11/01/2040.aspx.
[28] T. Rhodes. Handbook, Chapter: Mandatory Access Control, FreeBSD. http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/mac.html.
[29] S. Saroiu, S. D. Gribble, and H. M. Levy. Measurement and Analysis of Spyware in a University Environment. NSDI 2004.
[30] M. R. Tal Garfinkel, Ben Pfaff. Ostia: A Delegating Architecture for Secure System Call Interposition. NDSS 2004.
[31] Toups. Administrator Privileges for Turbo-Tax?!?! http://www.dslreports.com/forum/rmark,9732454 mode=flat.
[32] W. Venema. Postfix Overview. http://www.postfix.org/motivation.html.
[33] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson, M.-W. Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper: Monitoring Auto-Start Extensibility Points (ASEPs) for Spyware Management. In Proceedings of Usenix LISA, Nov. 2004.
[34] J. Yang, T. Kremenek, Y. Xie, and D. Engler. MECA: An Extensible, Expressive System and Language for Statically Checking Security Properties. ACM CCS 2003.