### Optimized Text

#### Main Content
This paper investigates the effectiveness of current RowHammer mitigation techniques, particularly Target Row Refresh (TRR), on DDR4 DRAM modules. We find that, despite significant efforts to mitigate RowHammer, modern DDR4 DRAM systems remain vulnerable, and in some cases, even more so than DDR3 DRAM systems when these mitigations are bypassed.

Our study reveals that TRR, often promoted by CPU and DRAM vendors as a definitive solution to RowHammer, can be circumvented. TRR is an umbrella term for various mitigation strategies implemented either at the memory controller level or within the DRAM chips themselves. We analyze common TRR implementations using timing side channels for memory controllers and an FPGA-based memory controller, SoftMC, for DRAM chips. Our findings indicate that the consumer CPUs we tested rely on in-DRAM TRR for RowHammer mitigation and do not employ TRR at the memory controller level.

We discover that modern in-DRAM TRR implementations are generally susceptible to a new hammering strategy called many-sided RowHammer, which involves concurrently hammering multiple (at least three) aggressor rows. To further explore this vulnerability, we introduce TRRespass, a black-box many-sided RowHammer fuzzer. TRRespass can identify sophisticated hammering patterns without prior knowledge of the memory controller or DRAM chip implementation, enabling real-world attacks on many DDR4 DRAM modules available in the market.

Our results underscore the need for continued efforts to develop effective RowHammer mitigations and highlight the risks associated with relying on security through obscurity, as employed by DRAM vendors. This approach leaves computing systems vulnerable for extended periods.

#### Disclosure
In November 2019, we disclosed our new RowHammer attacks to all affected parties, triggering an industry-wide effort to address the issues raised in this paper. Due to the nature of these vulnerabilities, it will take time before effective mitigations are in place. Further developments on these vulnerabilities are tracked under CVE-2020-10255. The paper remained confidential until the public disclosure date of March 10, 2020.

#### Acknowledgments
We would like to thank the anonymous reviewers for their valuable feedback and Robin Webbers for assisting us in our analysis of LPDDR4(X) systems. This work was supported by the European Union’s Horizon 2020 research and innovation program under grant agreements No. 786669 (ReAct) and No. 825377 (UNICORE), by Intel Corporation through the Side Channel Vulnerability ISRA, and by the Netherlands Organisation for Scientific Research through grants NWO 639.023.309 VICI “Dowsing”, NWO 639.021.753 VENI “PantaRhei”, and NWO 016.Veni.192.262. The views expressed in this paper are solely those of the authors, and the funding agencies are not responsible for any use that may be made of the information it contains.

#### References
[1] "DRAM Chip Market Share by Manufacturer Worldwide from 2011 to 2019," https://www.statista.com/statistics/271726/global-market-share-held-by-dram-chip-vendors-since-2010, 2019.
[2] "RAMBleed DRAM Vulnerabilities," https://blogs.oracle.com/security/https://arstechnica.com/information-technology/2019/06/researchers-use-rowhammer-bitflips-to-steal-2048-bit-crypto-key/, 2019.
[3] "Researchers Use RowHammer Bit Flips to Steal 2048-bit Crypto Key," https://arstechnica.com/information-technology/2019/06/researchers-use-rowhammer-bitflips-to-steal-2048-bit-crypto-key/, 2019.
[4] Advanced Micro Devices, "AMD Generic Encapsulated Software Architecture (AGESA) Interface Specification for Arch2008," 2017.
[5] M. T. Aga et al., "When Good Protections Go Bad: Exploiting Anti-DoS Measures to Accelerate Rowhammer Attacks," in HOST, 2017.
[6] Apple Inc., "About the Security Content of Mac EFI Security Update 2015-001," https://support.apple.com/en-us/HT204934, June 2015.
[7] Z. B. Aweke et al., "ANVIL: Software-Based Protection Against Next-Generation Rowhammer Attacks," in ASPLOS, 2016.
[8] K. S. Bains and J. B. Halbert, "Distributed row hammer tracking," US Patent 9 299 400B2, 2016.
[9] K. S. Bains et al., "Row hammer refresh command," US Patent 9 236 110B2, 2016.
[10] K. S. Bains et al., "Method, apparatus and system for providing a memory refresh," US Patent 9 030 903B2, 2015.
[11] A. Barenghi et al., "Software-Only Reverse Engineering of Physical DRAM Mappings for RowHammer Attacks," in IVSW, 2018.
[12] S. Bhattacharya and D. Mukhopadhyay, "Curious Case of Rowhammer: Flipping Secret Exponent Bits using Timing Analysis," in CHES, 2016.
[13] S. Bhattacharya and D. Mukhopadhyay, "Advanced Fault Attacks in Software: Exploiting the RowHammer Bug," in Fault Tolerant Architectures for Cryptography and Hardware Security, 2018.
[14] E. Bosman et al., "Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector," in S&P, 2016.
[15] K. M. Brandl, "Data processor with memory controller for high reliability operation and method," US Patent 9 281 046B2, 2016.
[16] F. Brasser et al., "CAn’t Touch This: Software-only Mitigation against Rowhammer Attacks targeting Kernel Memory," in USENIX Sec., 2017.
[17] S. Carre et al., "OpenSSL Bellcore’s Protection Helps Fault Attack," in DSD, 2018.
[18] K. K. Chang et al., "Understanding Latency Variation in Modern DRAM Chips: Experimental Characterization, Analysis, and Optimization," in SIGMETRICS, 2016.
[19] K. K. Chang et al., "Improving DRAM Performance by Parallelizing Refreshes with Accesses," in HPCA, 2014.
[20] K. K. Chang et al., "Low-cost Inter-linked Subarrays (LISA): Enabling Fast Inter-subarray Data Movement in DRAM," in HPCA, 2016.
[21] K. K. Chang et al., "Understanding Reduced-Voltage Operation in Modern DRAM Devices: Experimental Characterization, Analysis, and Mechanisms," in SIGMETRICS, 2017.
[22] L. Cojocar et al., "Are We Susceptible to Rowhammer? An End-to-End Methodology for Cloud Providers," in S&P, 2020.
[23] L. Cojocar et al., "Exploiting Correcting Codes: On the Effectiveness of ECC Memory Against Rowhammer Attacks," in S&P, 2019.
[24] A. P. Fournaris et al., "Exploiting Hardware Vulnerabilities to Attack Embedded System Devices: A Survey of Potent Microarchitectural Attacks," Electronics, 2017.
[25] P. Frigo et al., "Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU," in S&P, 2018.
[26] Z. Greenfield et al., "Method, apparatus and system for determining a count of accesses to a row of memory," US Patent 20 140 085 995A1, 2014.
[27] D. Gruss et al., "Another Flip in the Wall of Rowhammer Defenses," in S&P, 2018.
[28] D. Gruss et al., "Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript," in DIMVA, 2016.
[29] H. Hassan et al., "CROW: A Low-Cost Substrate for Improving DRAM Performance, Energy Efficiency, and Reliability," in ISCA, 2019.
[30] H. Hassan et al., "ChargeCache: Reducing DRAM Latency by Exploiting Row Access Locality," in HPCA, 2016.
[31] H. Hassan et al., "SoftMC: A Flexible and Practical Open-Source Infrastructure for Enabling Experimental DRAM Studies," in HPCA, 2017.
[32] N. Herath and Anders Fogh, "These are Not Your Grand Daddy’s CPU Performance Counters," in Black Hat Briefings, 2015.
[33] S. Hong et al., "Terminal Brain Damage: Exposing the Graceless Degradation in Deep Neural Networks Under Hardware Fault Attacks," in USENIX Sec., 2019.
[34] D. Hwa Hong, "Smart Refresh Device," US Patent 9 311 984B1, 2016.
[35] Intel Corp., "Intel Xeon Processor E5 v4 Product Family," 2016.
[36] Intel Corp., "CannonLake Firmware Support Package (FSP) Integration Guide," https://usermanual.wiki/Pdf/CannonLakeFSPIntegrationGuide.58784693.pdf, 2017.
[37] S. Islam et al., "SPOILER: Speculative Load Hazards Boost Rowhammer and Cache Attacks," arXiv preprint 1903.00446, 2019.
[38] Y. Ito and Y. He, "Semiconductor Device," US Patent 9 805 783B2, 2017.
[39] Y. Jang et al., "SGX-Bomb: Locking Down the Processor via RowHammer Attack," in SysTEX, 2017.
[40] JEDEC, "JESD209-4, LPDDR4 Specification," 2014.
[41] JEDEC, "SPD Annex K - Serial Presence Detect (SPD) for DDR3 SDRAM Modules, v6," 2014.
[42] JEDEC, "SPD Annex L - Serial Presence Detect (SPD) for DDR4 SDRAM Modules, v3," 2015.
[43] JEDEC, "JESD209-4, LPDDR4X Specification," 2017.
[44] JEDEC, "JESD79-4B, DDR4 Specification," 2017.
[45] B. I. Jung et al., "Memory Device, Memory System, and Operating Methods thereof," US Patent 9 257 169B2, 2016.
[46] M. Kaczmarski, "Thoughts on Intel R Xeon R E5-2600 v2 Product Family Performance Optimisation – component selection guidelines," 2014.
[47] O. D. Kahn and J. R. Wilcox, "Method for Dynamically Adjusting a Memory Page Closing Policy," US Patent 6 799 241, 2004.
[48] S. Khan et al., "PARBOR: An Efficient System-Level Technique to Detect Data-Dependent Failures in DRAM," in DSN, 2016.
[49] D. S. Kim and J. I. Kim, "Refresh control device and semiconductor device including the same," US Patent 9 818 469B1, 2017.
[50] Y. Kim et al., "A Case for Exploiting Subarray-Level Parallelism (SALP) in DRAM," in ISCA, 2012.
[51] Y. Kim et al., "Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors," in ISCA, 2014.
[52] Y. Kim et al., "ATLAS: A Scalable and High-Performance Scheduling Algorithm for Multiple Memory Controllers," in HPCA, 2010.
[53] R. K. Konoth et al., "ZebRAM: Comprehensive and Compatible Software Protection Against Rowhammer Attacks," in OSDI, 2018.
[54] A. Kwong et al., "RAMBleed: Reading Bits in Memory Without Accessing Them," in S&P, 2020.
[55] M. Lanteigne, "A Tale of Two Hammers: A Brief Rowhammer Rowhammer Analysis of AMD vs. Intel." ThirdIO Inc., 2016.
[56] M. Lanteigne, "How Rowhammer Could Be Used to Exploit Weaknesses in Computer Hardware," in SEMICON, 2016.
[57] D. Lee et al., "Adaptive-Latency DRAM: Optimizing DRAM Timing for the Common-Case," in HPCA, 2015.
[58] D. Lee et al., "Tiered-Latency DRAM: A Low Latency and Low Cost DRAM Architecture," in HPCA, 2013.
[59] D. Lee et al., "Simultaneous Multi-Layer Access: Improving 3D-Stacked Memory Bandwidth at Low Cost," TACO, 2016.
[60] D. Lee et al., "Design-Induced Latency Variation in Modern DRAM Chips: Characterization, Analysis, and Latency Reduction Mechanisms," in SIGMETRICS, 2017.
[61] D. Lee et al., "Decoupled Direct Memory Access: Isolating CPU and IO Traffic by Leveraging a Dual-Data-Port DRAM," in PACT, 2015.
[62] E. Lee et al., "TWiCe: Preventing Row-Hammering by Exploiting Time Window Counters," in ISCA, 2019.
[63] J.-B. Lee, "Green Memory Solution," in Samsung Electronics, Investor’s Forum, 2014.
[64] Lenovo, "Row Hammer Privilege Escalation," https://support.lenovo.com/us/en/product-security/row-hammer, March 2015.
[65] J. Lin, "Handling Maximum Activation Count limit and Target Row Refresh in DDR4 SDRAM," US Patent 9 589 606B2, 2017.
[66] M. Lipp et al., "Nethammer: Inducing Rowhammer Faults Through Network Requests," arXiv preprint 1805.04956, 2018.
[67] J. Liu et al., "RAIDR: Retention-Aware Intelligent DRAM Refresh," in ISCA, 2012.
[68] J. Liu et al., "An Experimental Study of Data Retention Behavior in Modern DRAM Devices: Implications for Retention Time Profiling Mechanisms," in ISCA, 2013.
[69] M. Majkowski, "Every 7.8μs your computer’s memory has a hiccup," https://blog.cloudflare.com/every-7-8us-your-computers-memory-has-a-hiccup/, 2018.
[70] Micron, "DDR4 SDRAM Datasheet," p. 380, 2016.
[71] O. Mutlu, "The RowHammer Problem and Other Issues We May Face as Memory Becomes Denser," in DATE, 2017.
[72] O. Mutlu and J. S. Kim, "RowHammer: A Retrospective," TCAD, 2019.
[73] Omron, "NY-series Industrial Box PC - Hardware User’s Manual," https://assets.omron.eu/downloads/manual/en/v6/w553-ny-series-industrial-box-pc-users-manual-en.pdf, 2019.
[74] J.-B. Park, "Memory and Memory System including the same," US Patent 9 396 786B2, 2016.
[75] M. S. Park, "Memory Device to Alleviate the Effects of Row Hammer Condition and Memory System Including the Same," US Patent 9 685 240B1, 2017.
[76] P. Pessl et al., "DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks." in USENIX Sec., 2016.
[77] D. Poddebniak et al., "Attacking Deterministic Signature Schemes Using Fault Attacks," in EuroS&P, 2018.
[78] R. Qiao and M. Seaborn, "A New Approach for Rowhammer Attacks," in HOST, 2016.
[79] K. Razavi et al., "Flip Feng Shui: Hammering a Needle in the Software Stack," in USENIX Sec., 2016.
[80] SAFARI Research Group, "SoftMC — GitHub Repository," https://github.com/CMU-SAFARI/SoftMC.
[81] M. Seaborn and T. Dullien, "Exploiting the DRAM Rowhammer Bug to Gain Kernel Privileges," in Black Hat USA, 2015.
[82] V. Seshadri et al., "RowClone: Fast and Energy-Efficient In-DRAM Bulk Data Copy and Initialization," in MICRO, 2013.
[83] V. Seshadri et al., "Ambit: In-Memory Accelerator for Bulk Bitwise Operations Using Commodity DRAM Technology," in MICRO, 2017.
[84] V. Seshadri et al., "Gather-Scatter DRAM: In-DRAM Address Translation to Improve the Spatial Locality of Non-Unit Strided Accesses," in MICRO, 2015.
[85] V. Seshadri and O. Mutlu, "In-DRAM Bulk Bitwise Execution Engine," arXiv:1905.09822, 2019.
[86] S. M. Seyedzadeh et al., "Counter-Based Tree Structure for Row Hammering Mitigation in DRAM," IEEE CAL, 2017.
[87] M. Son et al., "Making DRAM Stronger Against Row Hammering," in DAC, 2017.
[88] A. Tatar et al., "Defeating Software Mitigations against Rowhammer: A Surgical Precision Hammer," in RAID, 2018.
[89] A. Tatar et al., "Throwhammer: Rowhammer Attacks over the Network and Defenses," in USENIX ATC, 2018.
[90] TQ-Systems, "TQMx80UC User’s Manual," https://www.tq-group.com/filedownloads/files/products/embedded/manuals/x86/embedded-modul/COM-Express-Compact/TQMx80UC/TQMx80UC.UM.0102.pdf, 2020.
[91] V. van der Veen et al., "Drammer: Deterministic Rowhammer Attacks on Mobile Platforms," in CCS, 2016.
[92] V. van der Veen et al., "GuardION: Practical mitigation of DMA-based rowhammer attacks on ARM," in DIMVA, 2018.
[93] S. van Schaik et al., "RIDL: Rogue in-flight data load," in S&P, 2019.
[94] VersaLogic Corp., "Blackbird BIOS Reference Manual," https://www.versalogic.com/wp-content/themes/vsl-new/assets/pdf/manuals/MEPU-4462-4562-BRM.pdf, 2019.
[95] G. D. Wolff, "Apparatuses and methods for distributing row hammer refresh events across a memory device," US Patent 20 180 218 767A1, 2018.
[96] Y. Xiao et al., "One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege Escalation." in USENIX Sec., 2016.
[97] T. Zhang et al., "Half-DRAM: A High-bandwidth and Low-power DRAM Architecture from the Rethinking of Fine-grained Activation," in ISCA, 2014.
[98] Z. Zhang et al., "Triggering Rowhammer Hardware Faults on ARM: A Revisit," in ASHES, 2018.

#### Appendix A: TRR-Compliant Memory
In Section IV, we define TRR-compliant memory. Here, we expand on this concept and explain the difference between TRR-compliant and pTRR-compliant memory.

The MAC field is a one-byte field located at byte 41 on the SPD of a DDR3 module [41] and byte 7 on the SPD of a DDR4 module [42]. This field reports information about the module’s resiliency to RowHammer. In the single byte allocated to the MAC value inside the SPD [41], [42], only the 6 least significant bits are used to store information about the module’s limits in the form of MAC and tMAW (Figure 15), where MAC is the Maximum Activate Count and tMAW is the Maximum Activate Window, which acts as a multiplier for MAC (Figure 15). The remaining two most significant bits are flagged as reserved. As mentioned in Section IV, the MAC value can take three configurations:
- Unlimited, as value 0b1000;
- Untested, as value 0b0000; or
- Discrete values from 200K to 700K with steppings of +100K—values 0b0001 to 0b0110.

In one of our early experiments, we discovered that our definition of TRR-compliant modules slightly diverges from Intel’s definition of pTRR-compliant modules [46]. We found that to enable pTRR, bit 7 (one of the reserved bits) needs to be set. If not, regardless of the MAC and tMAW values, the system treats the module as non-compliant. This is likely a legacy feature stemming from the fact that pTRR [46] was introduced before TRR became part of the JEDEC standard [41].

#### Appendix B: TRRespass Patterns
In Section VI-B, we explain the new n-sided hammering patterns used in our experiments. Here, we provide a more general definition of these hammering patterns.

TRRespass randomizes two parameters: cardinality and distance. Cardinality and distance together define a novel hammering pattern that we refer to as (n-sided | dist=d) RowHammer. The pattern consists of n/2 pairs of aggressor rows, where the two aggressor rows in each pair are placed one victim row apart (similar to double-sided RowHammer). The distance d defines the number of rows between the aggressor row pairs. For example, the (4-sided | dist=3) pattern contains two aggressor row pairs (four aggressor rows in total), and the two aggressor row pairs are three rows apart from each other. The n-sided pattern, which we refer to throughout the paper, is another example, where the distance between the aggressor row pairs is one row.

Figure 16 shows the number of bit flips that occur in module A10 when we use the (10-sided | dist=D) hammering pattern while sweeping the parameter D. We note that the number of bit flips increases and decreases as we vary D, reaching its maximum at D = 12. This observation confirms that the distance between aggressor row pairs plays a primary role in assembling an effective hammering pattern.

**Figure 16:** Bit flips induced by (10-sided | dist=D) RowHammer pattern as a function of D. The x-axis plots the distance between each aggressor row pair, and the y-axis reports the number of unique bit flips.