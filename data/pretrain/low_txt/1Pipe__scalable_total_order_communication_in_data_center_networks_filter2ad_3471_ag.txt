以下是优化后的参考文献列表和附录部分，以确保文本更加清晰、连贯和专业：

### 参考文献

1. Stefan Kaestle, Reto Achermann, Roni Haecki, Moritz Hoffmann, Sabela Ramos, and Timothy Roscoe. 2016. Machine-Aware Atomic Broadcast Trees for Multicores. In *OSDI*, Vol. 16, pp. 33–48.
2. Robert Kallman, Hideaki Kimura, Jonathan Natkins, Andrew Pavlo, Alexander Rasin, Stanley Zdonik, Evan PC Jones, Samuel Madden, Michael Stonebraker, Yang Zhang, et al. 2008. H-Store: A High-Performance, Distributed Main Memory Transaction Processing System. *Proceedings of the VLDB Endowment* 1, 2 (2008), pp. 1496–1499.
3. Anuj Kalia, Michael Kaminsky, and David G. Andersen. 2016. Design Guidelines for High Performance RDMA Systems. In *2016 USENIX Annual Technical Conference*, p. 437.
4. Naga Katta, Mukesh Hira, Changhoon Kim, Anirudh Sivaraman, and Jennifer Rexford. 2016. Hula: Scalable Load Balancing Using Programmable Data Planes. In *Proceedings of the Symposium on SDN Research*, pp. 1–12.
5. Antoine Kaufmann, Simon Peter, Naveen Kr. Sharma, Thomas Anderson, and Arvind Krishnamurthy. 2016. High Performance Packet Processing with FlexNIC. In *Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems*, pp. 67–81.
6. Jongsung Kim and Cheeha Kim. 1997. A Total Ordering Protocol Using a Dynamic Token-Passing Scheme. *Distributed Systems Engineering* 4, 2 (1997), p. 87.
7. Gautam Kumar, Nandita Dukkipati, Keon Jang, Hassan M. G. Wassel, Xian Wu, Behnam Montazeri, Yaogong Wang, Kevin Springborn, Christopher Alfeld, Michael Ryan, et al. 2020. Swift: Delay is Simple and Effective for Congestion Control in the Datacenter. In *Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication*, pp. 514–528.
8. Hsiang-Tsung Kung and John T. Robinson. 1981. On Optimistic Methods for Concurrency Control. *ACM Transactions on Database Systems (TODS)* 6, 2 (1981), pp. 213–226.
9. Leslie Lamport. 1978. Time, Clocks, and the Ordering of Events in a Distributed System. *Communications of the ACM* 21, 7 (1978), pp. 558–565.
10. Leslie Lamport. 1984. Using Time Instead of Timeout for Fault-Tolerant Distributed Systems. *ACM Transactions on Programming Languages and Systems (TOPLAS)* 6, 2 (1984), pp. 254–280.
11. Leslie Lamport. 1998. The Part-Time Parliament. *ACM Transactions on Computer Systems (TOCS)* 16, 2 (1998), pp. 133–169.
12. Ki Suh Lee, Han Wang, Vishal Shrivastav, and Hakim Weatherspoon. 2016. Globally Synchronized Time via Datacenter Networks. In *Proceedings of the 2016 Conference on ACM SIGCOMM 2016 Conference*. ACM, pp. 454–467.
13. Charles E. Leiserson. 1985. Fat-Trees: Universal Networks for Hardware-Efficient Supercomputing. *IEEE Transactions on Computers* 100, 10 (1985), pp. 892–901.
14. Jialin Li, Ellis Michael, Naveen Kr. Sharma, Adriana Szekeres, and Dan R. K. Ports. 2016. Just Say NO to Paxos Overhead: Replacing Consensus with Network Ordering. In *OSDI*, pp. 467–483.
15. Yuliang Li, Gautam Kumar, Hema Hariharan, Hassan Wassel, Peter Hochschild, Dave Platt, Simon Sabato, Minlan Yu, Nandita Dukkipati, Prashant Chandra, et al. 2020. Sundial: Fault-Tolerant Clock Synchronization for Datacenters. In *14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)*, pp. 1171–1186.
16. Yuliang Li, Rui Miao, Hongqiang Harry Liu, Yan Zhuang, Fei Feng, Lingbo Tang, Zheng Cao, Ming Zhang, Frank Kelly, Mohammad Alizadeh, et al. 2019. HPCC: High Precision Congestion Control. In *Proceedings of the ACM Special Interest Group on Data Communication*, pp. 44–58.
17. Guohan Lu, Chuanxiong Guo, Yulong Li, Zhiqiang Zhou, Tong Yuan, Haitao Wu, Yongqiang Xiong, Rui Gao, and Yongguang Zhang. 2011. ServerSwitch: A Programmable and High-Performance Platform for Data Center Networks. In *NSDI*, Vol. 11, pp. 2–2.
18. Haonan Lu, Christopher Hodsdon, Khiem Ngo, Shuai Mu, and Wyatt Lloyd. 2016. The SNOW Theorem and Latency-Optimal Read-Only Transactions. In *OSDI*, pp. 135–150.
19. Haonan Lu, Siddhartha Sen, and Wyatt Lloyd. 2020. Performance-Optimal Read-Only Transactions. In *14th USENIX Symposium on Operating Systems Design and Implementation (OSDI 20)*, pp. 333–349.
20. Ellis Michael and Dan R. K. Ports. 2018. Towards Causal Datacenter Networks. In *Proceedings of the 5th Workshop on the Principles and Practice of Consistency for Distributed Data*, pp. 1–4.
21. Radhika Mittal, Nandita Dukkipati, Emily Blem, Hassan Wassel, Monia Ghobadi, Amin Vahdat, Yaogong Wang, David Wetherall, David Zats, et al. 2015. TIMELY: RTT-Based Congestion Control for the Datacenter. In *ACM SIGCOMM Computer Communication Review*, Vol. 45. ACM, pp. 537–550.
22. Radhika Mittal, Alexander Shpiner, Aurojit Panda, Eitan Zahavi, Arvind Krishnamurthy, Sylvia Ratnasamy, and Scott Shenker. 2018. Revisiting Network Support for RDMA. In *Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication*, pp. 313–326.
23. Adam Morrison and Yehuda Afek. 2013. Fast Concurrent Queues for x86 Processors. In *ACM SIGPLAN Notices*, Vol. 48. ACM, pp. 103–112.
24. Louise E. Moser, P. Michael Melliar-Smith, Deborah A. Agarwal, Ravi K. Budhia, and Colleen A. Lingley-Papadopoulos. 1996. Totem: A Fault-Tolerant Multicast Group Communication System. *Communications of the ACM* 39, 4 (1996), pp. 54–63.
25. Shuai Mu, Yang Cui, Yang Zhang, Wyatt Lloyd, and Jinyang Li. 2014. Extracting More Concurrency from Distributed Transactions. In *11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 14)*, pp. 479–494.
26. Diego Ongaro and John K. Ousterhout. 2014. In Search of an Understandable Consensus Algorithm. In *USENIX Annual Technical Conference*, pp. 305–319.
27. Seo Jin Park and John Ousterhout. 2019. Exploiting Commutativity for Practical Fast Replication. In *16th USENIX Symposium on Networked Systems Design and Implementation (NSDI '19)*, pp. 47–64.
28. Fernando Pedone and André Schiper. 1998. Optimistic Atomic Broadcast. In *International Symposium on Distributed Computing*. Springer, pp. 318–332.
29. Jonathan Perry, Amy Ousterhout, Hari Balakrishnan, Devavrat Shah, and Hans Fugal. 2015. Fastpass: A Centralized Zero-Queue Datacenter Network. *ACM SIGCOMM Computer Communication Review* 44, 4 (2015), pp. 307–318.
30. Larry L. Peterson, Nick C. Buchholz, and Richard D. Schlichting. 1989. Preserving and Using Context Information in Interprocess Communication. *ACM Transactions on Computer Systems (TOCS)* 7, 3 (1989), pp. 217–246.
31. Dan R. K. Ports, Jialin Li, Vincent Liu, Naveen Kr. Sharma, and Arvind Krishnamurthy. 2015. Designing Distributed Systems Using Approximate Synchrony in Data Center Networks. In *NSDI*, pp. 43–57.
32. B. Rajagopalan and Philip K. McKinley. 1989. A Token-Based Protocol for Reliable, Ordered Multicast Communication. In *Reliable Distributed Systems, 1989. Proceedings of the Eighth Symposium on*. IEEE, pp. 84–93.
33. Luis Rodrigues, Rachid Guerraoui, and André Schiper. 1998. Scalable Atomic Multicast. In *Computer Communications and Networks, 1998. Proceedings. 7th International Conference on*. IEEE, pp. 840–847.
34. Amedeo Sapio, Ibrahim Abdelaziz, Abdulla Aldilaijan, Marco Canini, and Panos Kalnis. 2017. In-Network Computation is a Dumb Idea Whose Time Has Come. In *Proceedings of the 16th ACM Workshop on Hot Topics in Networks*, pp. 150–156.
35. Peter Sewell, Susmit Sarkar, Scott Owens, Francesco Zappa Nardelli, and Magnus O. Myreen. 2010. x86-TSO: A Rigorous and Usable Programmer’s Model for x86 Multiprocessors. *Communications of the ACM* 53, 7 (2010), pp. 89–97.
36. Alex Shamis, Matthew Renzelmann, Stanko Novakovic, Georgios Chatzopoulos, Aleksandar Dragojević, Dushyanth Narayanan, and Miguel Castro. 2019. Fast General Distributed Transactions with Opacity. In *Proceedings of the 2019 International Conference on Management of Data*, pp. 433–448.
37. Arjun Singh, Joon Ong, Amit Agarwal, Glen Anderson, Ashby Armistead, Roy Bannon, Seb Boving, Gaurav Desai, Bob Felderman, Paulie Germano, et al. 2015. Jupiter Rising: A Decade of Clos Topologies and Centralized Control in Google’s Datacenter Network. *ACM SIGCOMM Computer Communication Review* 45, 4 (2015), pp. 183–197.
38. Anirudh Sivaraman, Suvinay Subramanian, Mohammad Alizadeh, Sharad Chole, Shang-Tse Chuang, Anurag Agrawal, Hari Balakrishnan, Tom Edsall, Sachin Katti, and Nick McKeown. 2016. Programmable Packet Scheduling at Line Rate. In *Proceedings of the 2016 Conference on ACM SIGCOMM 2016 Conference*. ACM, pp. 44–57.
39. Joseph Tassarotti, Derek Dreyer, and Viktor Vafeiadis. 2015. Verifying Read-Copy-Update in a Logic for Weak Memory. In *ACM SIGPLAN Notices*, Vol. 50. ACM, pp. 110–120.
40. Robbert van Renesse. 1994. Why Bother with CATOCS? *ACM SIGOPS Operating Systems Review* 28, 1 (1994), pp. 22–27.
41. Erico Vanini, Rong Pan, Mohammad Alizadeh, Parvin Taheri, and Tom Edsall. 2017. Let It Flow: Resilient Asymmetric Load Balancing with Flowlet Switching. In *14th USENIX Symposium on Networked Systems Design and Implementation (NSDI 17)*, pp. 407–420.
42. Sage A. Weil, Scott A. Brandt, Ethan L. Miller, Darrell D. E. Long, and Carlos Maltzahn. 2006. Ceph: A Scalable, High-Performance Distributed File System. In *Proceedings of the 7th Symposium on Operating Systems Design and Implementation*, pp. 307–320.
43. Jisoo Yang, Dave B. Minturn, and Frank Hady. 2012. When Poll Is Better Than Interrupt. In *FAST*, Vol. 12, p. 3.
44. Xiangyao Yu, George Bezerra, Andrew Pavlo, Srinivas Devadas, and Michael Stonebraker. 2014. Staring into the Abyss: An Evaluation of Concurrency Control with One Thousand Cores. *Proceedings of the VLDB Endowment* 8, 3 (2014), pp. 209–220.
45. Zhuolong Yu, Yiwen Zhang, Vladimir Braverman, Mosharaf Chowdhury, and Xin Jin. 2020. NetLock: Fast, Centralized Lock Management Using Programmable Switches. In *Proceedings of the Annual Conference of the ACM Special Interest Group on Data Communication on the Applications, Technologies, Architectures, and Protocols for Computer Communication*, pp. 126–138.
46. Hong Zhang, Junxue Zhang, Wei Bai, Kai Chen, and Mosharaf Chowdhury. 2017. Resilient Datacenter Load Balancing in the Wild. In *Proceedings of the Conference of the ACM Special Interest Group on Data Communication*, pp. 253–266.
47. Yibo Zhu, Haggai Eran, Daniel Firestone, Chuanxiong Guo, Marina Lipshteyn, Yehonatan Liron, Jitendra Padhye, Shachar Raindel, Mohamad Haj Yahia, and Ming Zhang. 2015. Congestion Control for Large-Scale RDMA Deployments. *ACM SIGCOMM Computer Communication Review* 45, 4 (2015), pp. 523–536.
48. Danyang Zhuo, Monia Ghobadi, Ratul Mahajan, Klaus-Tycho Förster, Arvind Krishnamurthy, and Thomas Anderson. 2017. Understanding and Mitigating Packet Corruption in Data Center Networks. In *Proceedings of the Conference of the ACM Special Interest Group on Data Communication*, pp. 362–375.

### 附录

#### 附录：正确性分析

在可靠的1Pipe中，从发送者 \( S \) 到接收者 \( R_i \) 的消息 \( M \) 带有时间戳 \( T \)，只有在以下情况下才会被传递：
- 发送者 \( S \) 在时间戳 \( T \) 之前没有失败，并且 \( S \) 收到了所有来自 \( R_i \) 的ACK。
- 如果 \( S \) 在时间戳 \( T \) 之前失败（即 \( S \) 的失败时间戳小于 \( T \)），则 \( M \) 不会被提交（或提交消息尚未传播到任何接收者，这也被视为未提交）。
- 如果任何接收者 \( R_i \) 在接收到 \( M \) 的准备消息之前或发送ACK消息之前失败，\( S \) 应该召回 \( M \)。

现在，我们来分析每种故障类型下消息 \( M \) 的行为。一个进程同时具有发送者和接收者的角色，我们将分别考虑它们。

- **公平丢失链路上的包丢失**：由于2PC会重传，因此消息会被传递。
- **接收者 \( R \) 在准备阶段发送ACK之前失败**：根据丢弃步骤丢弃消息。
- **接收者 \( R \) 在准备阶段发送ACK之后失败**：消息在 \( R \) 的接收缓冲区中。我们仅在失败恢复模型中保证原子性，因为记录 \( R \) 已传递的最后一条消息是不可能的。控制器记录发送者的失败时间戳和不可传递的召回消息，以便恢复的接收者可以根据召回步骤一致地传递或丢弃消息。如果 \( R \) 永久失败，则违反原子性。
- **发送者 \( S \) 在发送提交时间戳 \( T \) 之前失败**：根据丢弃步骤丢弃消息。例如，当 \( S \) 在执行 \( M \) 的召回步骤时失败（由于先前接收者的失败），其提交时间戳 \( T \) 必须低于 \( M \) 的时间戳，因此所有接收者都会因 \( S \) 的失败而丢弃 \( M \)。
- **发送者 \( S \) 在发送提交时间戳 \( T \) 之后失败**：仅当 \( S \) 的失败时间戳 \( T' \) 大于或等于 \( T \) 时才传递消息。失败时间戳由控制器确定，确保 \( S \) 已提交 \( T' \)，但 \( T' \) 之后的消息不会被传递。控制器通过收集路由图中的健康交换机组成的切割的最大失败时间戳来获得 \( T' \)，该切割将 \( S \) 与所有接收者分开。如果数据中心有独立的生产和管理网络，并假设它们不会同时失败，则可以找到这样的切割。否则，网络分区可能导致原子性违反。
- **同一散射中的另一条消息 \( M' \) 的接收者 \( R' \) 在准备阶段发送ACK之前失败**：因为未收到ACK，根据召回步骤丢弃消息。
- **同一散射中的另一条消息 \( M' \) 的接收者 \( R' \) 在准备阶段发送ACK之后失败**：根据2PC传递消息。
- **发送者 \( S \) 和接收者 \( R \) 之间的网络路径失败（例如，由于路由问题），但 \( S \) 和 \( R \) 可以从控制器访问**：控制器转发 \( S \) 和 \( R \) 之间的消息。
- **发送者 \( S \) 和接收者 \( R \) 之间的网络路径失败，且 \( S \) 或 \( R \) 无法从控制器访问**：无法访问的进程被视为失败。例如，如果主机或主机的唯一网络链接失败，则该主机上的所有进程都与网络断开连接，因此被视为失败。
- **接收者 \( R \) 的网络路径在 \( R \) 接收到提交屏障 \( T \) 之后失败**：\( T \) 已经传递给 \( R \)。
- **接收者 \( R \) 的网络路径在 \( R \) 接收到提交屏障 \( T \) 之前失败**：根据接收者恢复步骤，在 \( R \) 恢复后传递消息。如果 \( R \) 永久失败，则违反原子性。

通过这些详细的分析，我们可以确保1Pipe在各种故障情况下的正确性和一致性。