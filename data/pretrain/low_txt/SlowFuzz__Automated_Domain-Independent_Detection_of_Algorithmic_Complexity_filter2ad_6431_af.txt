### 8. CONCLUSION

In this study, we introduced SF, which, to the best of our knowledge, is the first evolutionary-search-based framework specifically designed to target algorithmic complexity vulnerabilities. We evaluated SF on a variety of real-world applications, including zip utilities, regular expression libraries, and hash table implementations. Our results demonstrated that SF can successfully generate inputs that match the theoretical worst-case complexity in known algorithms. Additionally, SF was effective in triggering complexity vulnerabilities across all the applications we examined.

SF's evolutionary engine and mutation strategies were particularly effective. For example, they generated inputs that caused more than a 300-times slowdown in the bzip2 decompression routine, produced inputs that triggered high numbers of collisions in production-level hash table implementations, and generated regular expressions with exponential matching complexities, even without any prior knowledge of the semantics of regular expressions.

We believe these results highlight the potential of customized evolutionary search techniques for the automated detection of not only algorithmic complexity vulnerabilities but also other types of resource exhaustion vulnerabilities. Future work should aim to integrate these techniques more tightly with existing static analysis methods to enhance their effectiveness.

### 9. ACKNOWLEDGMENTS

We would like to thank the anonymous reviewers for their valuable feedback. This work was partially supported by the Office of Naval Research (ONR) grant N00014-17-1-2010, the National Science Foundation (NSF) grants CNS-13-18415 and CNS-16-17670, and a Google Faculty Fellowship. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect the views of the U.S. Government, ONR, NSF, or Google.

### REFERENCES

[1] #800564 - PHP5: trivial hash complexity DoS attack - Debian Bug report logs. https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=800564.

[2] attackercan/regexp-security-cheatsheet. https://github.com/attackercan/regexp-security-cheatsheet/tree/master/RegexpSecurityParser/WAF-regexps.

[3] bk2204/php-hash-dos: A PoC hash complexity DoS against PHP. https://github.com/bk2204/php-hash-dos.

[4] bzip2. http://www.bzip.org/1.0.3/html/index.html.

[5] Controlling backtracking. https://msdn.microsoft.com/en-us/library/dsy130b4(v=vs.110).aspx#controlling_backtracking.

[6] CVE-2011-5021. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-5021.

[7] CVE-2013-2099. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2099.

[8] CVE-2015-2526. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2526.

[9] gnulib/qsort.c at master coreutils/gnulib. https://github.com/coreutils/gnulib/blob/master/lib/qsort.c.

[10] Hash algorithm and collisions - PHP Internals Book. http://www.phpinternalsbook.com/hashtables/hash_algorithm.html.

[11] honggfuzz. https://github.com/google/honggfuzz.

[12] xnu/xnu-1456.1.26/bsd/kern/qsort.c. https://opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/kern/qsort.c.

[13] libc/stdlib/qsort.c. https://sourceforge.net/u/lluct/me722-cm/ci/f3ae3e66860629a7ebe223fdda3fdc8ffbdd9c6d/tree/bionic/libc/stdlib/qsort.c.

[14] libFuzzer - a library for coverage-guided fuzz testing - LLVM 3.9 documentation. http://llvm.org/docs/LibFuzzer.html.

[15] NetBSD: qsort.c,v 1.13 2003/08/07. http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libc/stdlib/qsort.c.

[16] NVD - CVE-2012-2098. https://nvd.nist.gov/vuln/detail/CVE-2012-2098.

[17] NVD - CVE-2013-4287. https://nvd.nist.gov/vuln/detail/CVE-2013-4287.

[18] PCRE - Perl Compatible Regular Expressions. http://www.pcre.org/.

[19] PHP Vulnerability May Halt Millions of Servers - PHP Classes. https://www.phpclasses.org/blog/post/171-PHP-Vulnerability-May-Halt-Millions-of-Servers.html.

[20] Regular expression denial of service - ReDoS - OWASP. https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS.

[21] SanitizerCoverage - Clang 4.0 documentation. http://clang.llvm.org/docs/SanitizerCoverage.html.

[22] Stack Exchange Network Status - Outage Postmortem - July 20, 2016. http://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016.

[23] syzkaller. https://github.com/google/syzkaller.

[24] Why does Stack Overflow use a backtracking regex implementation? - Meta Stack Overflow. https://meta.stackoverflow.com/questions/328376/why-does-stack-overflow-use-a-backtracking-regex-implementation.

[25] B, M., D, F., M, B. Analyzing catastrophic backtracking behavior in practical regular expression matching. arXiv preprint arXiv:1405.5599 (2014).

[26] B, G., C, A., P, S. M. WCET analysis of probabilistic hard real-time systems. In Real-Time Systems Symposium, 2002. RTSS 2002. 23rd IEEE (2002), IEEE, pp. 279–288.

[27] B, A., M, N., B, G. Hybrid measurement-based WCET analysis at the source level using object-level traces. In OASIcs-OpenAccess Series in Informatics (2010), vol. 15, Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.

[28] C, X., G, Y., J, R. Exploiting Unix file-system races via algorithmic complexity attacks. In Security and Privacy, 2009 30th IEEE Symposium on (2009), IEEE, pp. 27–41.

[29] C, S. K., W, M., B, D. Program-Adaptive Mutational Fuzzing. In 2015 IEEE Symposium on Security and Privacy (S&P) (May 2015), pp. 725–741.

[30] C, T. H., L, C. E., R, R. L., S, C. Introduction to Algorithms, vol. 6. MIT Press Cambridge, 2001.

[31] C, S. A., W, D. S. Denial of service via algorithmic complexity attacks. In Proceedings of the 12th Conference on USENIX Security Symposium - Volume 12 (Berkeley, CA, USA, 2003), SSYM’03, USENIX Association, pp. 3–3.

[32] G, P., L, M. Y., M, D. A., et al. Automated Whitebox Fuzz Testing. In Proceedings of the 2008 Network and Distributed Systems Symposium (NDSS) (2008), vol. 8, pp. 151–166.

[33] H, I., S, A., N, M., B, H. Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations. In 22nd USENIX Security Symposium (USENIX Security ’13) (Washington, D.C., 2013), USENIX, pp. 49–64.

[34] H, B., S, G. R., A, P., K, S. Statically-Informed Dynamic Analysis Tools to Detect Algorithmic Complexity Vulnerabilities. In Source Code Analysis and Manipulation (SCAM), 2016 IEEE 16th International Working Conference on (2016), IEEE, pp. 79–84.

[35] H, A. D., F, J. M. Probability-based parameter selection for black-box fuzz testing. In CMU/SEI Technical Report - CMU/SEI-2012-TN-019 (2012).

[36] J, G., S, L., S, X., S, J., L, S. Understanding and detecting real-world performance bugs. ACM SIGPLAN Notices 47, 6 (2012), 77–88.

[37] K, U., B, I. WCET Analysis of Modern Processors Using Multi-Criteria Optimisation. In 2009 1st International Symposium on Search Based Software Engineering (2009).

[38] K, J., R, A., T, H. Static analysis for regular expression denial-of-service attacks. In International Conference on Network and System Security (2013), Springer, pp. 135–148.

[39] L, C. K., C, R., M, R., P, H., K, A., L, G., W, S., R, V. J., H, K. Pin: building customized program analysis tools with dynamic instrumentation. In ACM SIGPLAN Notices (2005), vol. 40, ACM, pp. 190–200.

[40] MI, M. D. A killer adversary for quicksort. Softw., Pract. Exper. 29, 4 (1999), 341–344.

[41] M, R., R, M. K. Efficient flow profiling for detecting performance bugs. In Proceedings of the 25th International Symposium on Software Testing and Analysis (2016), ACM, pp. 413–424.

[42] N, K., N, G. Robust and fast pattern matching for intrusion detection. In INFOCOM, 2010 Proceedings IEEE (2010), IEEE, pp. 1–9.

[43] P, T., K, V. P., P, M., K, A. D. Dynaguard: Armoring canary-based protections against brute-force attacks. In Proceedings of the 31st Annual Computer Security Applications Conference (2015), ACM, pp. 351–360.

[44] P, T., T, A., S, S., K, A. D., J, S. NEZHA: Efficient Domain-Independent Differential Testing. In Proceedings of the 38th IEEE Symposium on Security & Privacy, (San Jose, CA) (2017).

[45] P, S. M. Bounding the execution time of real-time tasks on modern processors. In Real-Time Computing Systems and Applications, 2000. Proceedings. Seventh International Conference on (2000), IEEE, pp. 498–502.

[46] P, S. M., F, G. Making worst case execution time analysis for hard real-time tasks on state-of-the-art processors feasible. In Real-Time Computing Systems and Applications, 1999. RTCSA’99. Sixth International Conference on (1999), IEEE, pp. 442–449.

[47] R, S., J, V., K, A., C, L., G, C., B, H. VUzzer: Application-aware Evolutionary Fuzzing. In Proceedings of the Network and Distributed System Security Symposium (NDSS) (2017).

[48] S, D., L, Q., P, D., G, M. Automating Performance Bottleneck Detection Using Search-based Application Profiling. In Proceedings of the 2015 International Symposium on Software Testing and Analysis (2015), ISSTA 2015, ACM, pp. 270–281.

[49] S, G. S., T, J., G, A. Improving the resilience of an IDS against performance throttling attacks. In International Conference on Security and Privacy in Communication Systems (2012), Springer, pp. 167–184.

[50] S, G. S., T, J., G, A. Hardware/Software Mechanisms for Protecting an IDS Against Algorithmic Complexity Attacks. In Parallel and Distributed Processing Symposium Workshops & PhD Forum (IPDPSW), 2012 IEEE 26th International (2012), IEEE, pp. 1190–1196.

[51] S, R., E, C., J, S. Backtracking algorithmic complexity attacks against a NIDS. In Computer Security Applications Conference, 2006. ACSAC’06. 22nd Annual (2006), IEEE, pp. 89–98.

[52] S, L., L, S. Performance Diagnosis for Inefficient Loops. Under review.

[53] S, N., G, J., S, C., D, A., W, R., C, J., S, Y., K, C., V, G. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Proceedings of the Network and Distributed System Security Symposium (NDSS) (2016).

[54] S, X., C, L., Z, Y. A Covert Timing Channel via Algorithmic Complexity Attacks: Design and Analysis. In Communications (ICC), 2011 IEEE International Conference on (2011), IEEE, pp. 1–5.

[55] T, N., C, J., MD, J., M, K. A search-based automated test-data generation framework for safety-critical systems. In Systems Engineering for Business Process Change: New Directions. Springer, 2002, pp. 174–213.

[56] W, J., G, M. Verifying timing constraints of real-time systems by means of evolutionary testing. Real-Time Systems 15, 3 (1998), 275–298.

[57] W, V., O, O., H, M. J., D, I. Static detection of DoS vulnerabilities in programs that use regular expressions. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems (2017), Springer, pp. 3–20.

[58] Z, M. American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.

### A. WAF REGEXES

The slowdowns presented in Figure 7 correspond to inputs matched against the following regular expressions:

**Regex 1:**
```regex
(?i:(j|(&#x?0*((74)|(4A)|(106)|(6A));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(a|(&#x?0*((65)|(41)|(97)|(61));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(v|(&#x?0*((86)|(56)|(118)|(76));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(a|(&#x?0*((65)|(41)|(97)|(61));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(s|(&#x?0*((83)|(53)|(115)|(73));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(c|(&#x?0*((67)|(43)|(99)|(63));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(r|(&#x?0*((82)|(52)|(114)|(72));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(i|(&#x?0*((73)|(49)|(105)|(69));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(p|(&#x?0*((80)|(50)|(112)|(70));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(t|(&#x?0*((84)|(54)|(116)|(74));?))([\t]|(&((#x?0*(9|(13)|(10)|A|D);?)|(tab;)|(newline;))))*(:|(&((#x?0*((58)|(3A));?)|(colon;))))\.
```

**Regex 2:**
```regex
<(a|abbr|acronym|address|applet|area|audioscope|b|base|basefront|bdo|bgsound|big|blackface|blink|blockquote|body|bq|br|button|caption|center|cite|code|col|colgroup|
```