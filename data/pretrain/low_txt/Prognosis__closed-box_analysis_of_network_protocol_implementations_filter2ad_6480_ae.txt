# Optimized Text

## Issue 3: Inconsistent Port on RETRY in QUIC-Tracker

### 6.2.5 Analysis Technique and Outcome
After modeling one of the implementations, we identified a discrepancy in how two different implementations handle the Retry Mechanism. Specifically, if the server sent a RETRY packet, the model transitioned to a state where connection establishment was impossible. This behavior contrasted significantly with what was learned from another model. One of the properties of a confirmed erroneous trace is that either the Implementation or the Adapter behaves unexpectedly. In this case, the reference implementation, QUIC-Tracker, had a bug in its retry mechanism. Only one of the target implementations considered this issue critical enough to prevent connection establishment.

### Underlying Issue
QUIC's Retry Mechanism, as introduced in Section 6.2.3, is designed to validate that a packet is indeed being sent from a specific IP address and port, rather than an attacker replaying packets from a spoofed source. The client initiates the process by sending a ClientHello, and the server responds with a RETRY packet containing a unique token. The client must then send a new ClientHello from the same IP address and port, including the token. The server checks the token to confirm the packets are from the claimed source. Our reference implementation correctly returned the token but used a new UDP socket with a random free port instead of the original port. As a result, the token was sent from a different port, causing the address validation to fail and interrupting the handshake.

## Issue 4: Stream Data Blocked Bug in Google QUIC

### 6.2.6 Analysis Technique and Outcome
Using the extended models from Section 4.3, we synthesized an extended Mealy Machine (detailed in Appendix ??) to describe how the Maximum Stream Data field in the STREAM_DATA_BLOCKED frame changes over states. By inspecting this model, we found that this field always has the value 0 and is never updated, even when the stream gets blocked.

### Underlying Issue
One of the key features of QUIC is flow control, which uses various frames to coordinate flow limits between endpoints. The STREAM_DATA_BLOCKED frame alerts the other endpoint when data transmission on a stream is blocked due to flow control limits. This frame includes a Stream ID field indicating the blocked stream and a Maximum Stream Data field indicating the offset at which the block occurred. We found that although one implementation used these frames and did not transmit data over the agreed limits, it did not set the Maximum Stream Data correctly, using 0 as a constant. The developers confirmed that this section of the specification was incorrectly implemented, explaining that 0 was a placeholder set during initial development, which they had forgotten to update.

## 7 Related Work

Model learning has been applied to various communication and security protocols [9, 10], including network protocols [12, 17, 18, 22]. Prognosis improves on previous work in several ways:
1. **Parametric Architecture**: Prognosis's architecture is parametric with respect to the reference implementation, reducing the expertise needed to analyze a protocol implementation.
2. **Seamless Implementation Swap**: Users can easily switch between different implementations of the same protocol by changing only the socket.
3. **Synthesis for Enriched Models**: Prognosis uses synthesis to enrich models with data, enabling more detailed analysis of properties.

Prognosis is the first model-learning tool used to analyze several QUIC implementations. Other approaches include McMillan and Zuck's [27] manual construction of a formal specification in the Ivy language for test generation and bug detection. Prognosis automates the building of a finite state model guided by an abstract alphabet, making it easier to use without manually encoding complex cryptographic components. Closely related to [27] is the work of [15] using symbolic model checking for TCP.

Building a correct-by-construction reference implementation [14, 19] and using it for testing new implementations is another approach. While this method ensures formal verification of all protocol components, it requires significant manual effort and makes specific choices based on the RFC specification.

Prognosis is a closed-box tool, not requiring access to the implementation code. Open-box approaches [23, 30] focus on testing protocol compliance using symbolic execution but may miss subtle bugs related to RFC ambiguities or implementation differences. Prognosis complements differential testing [26] by generating high-quality test cases and producing models that can be inspected by protocol designers.

In summary, Prognosis provides a modular, reusable, and flexible framework for formal analysis techniques, making them accessible for different protocols and implementations.

## 8 Conclusion

Prognosis is a modular framework for automatically learning and analyzing models of network protocol implementations. It has successfully analyzed TCP and QUIC implementations, finding several bugs in mainstream QUIC implementations. A key contribution of Prognosis is the use of a reference implementation, reducing the burden of implementing protocol logic. Although this makes the framework more accessible, some knowledge of instrumentation is still required.

Future work could explore semi-automated methods to assist users in identifying key places for code instrumentation. Additionally, combining passive and active learning could speed up the learning process. Extending Prognosis to encompass environment quantities like congestion, latency, and memory usage is a challenging yet impactful direction for future work, requiring advancements in learning algorithms. Recent developments in active learning of weighted automata [13, 33] provide a good starting point for this extension.

## 9 Acknowledgments

Ferreira and Silva were partially funded by ERC grant AutoProbe (101002697). D'Antoni was partially funded by Facebook research awards, a Microsoft Faculty Fellowship, and an Amazon Research Award. The authors thank Hongqiang Liu for his help in preparing the final version of the paper.

## References

[1] 2021. cloudflare/quiche. (Jan. 2021). https://github.com/cloudflare/quiche
[2] 2021. facebookincubator/mvfst. (Jan. 2021). https://github.com/facebookincubator/mvfst
[3] 2021. Google QUIC - The Chromium Projects. (Jan. 2021). https://www.chromium.org/quic
[4] 2021. Heartbleed - CVE-2014-0160. (Jan. 2021). https://nvd.nist.gov/vuln/detail/CVE-2014-0160
[5] 2021. Let server abort on post-Retry packet number reset by dtikhonov · Pull Request #3990 · quicwg/base-drafts. (Jan. 2021). https://github.com/quicwg/base-drafts/pull/3990
[6] 2021. NVD - CVE-2017-1000253. (Jan. 2021). https://nvd.nist.gov/vuln/detail/CVE-2017-1000253
[7] 2021. NVD - CVE-2018-5390. (Jan. 2021). https://nvd.nist.gov/vuln/detail/CVE-2018-5390
[8] 2021. Scapy. (Jan. 2021). https://scapy.net/
[9] F. Aarts, J. De Ruiter, and E. Poll. 2013. Formal Models of Bank Cards for Free. In 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops. 461–468. https://doi.org/10.1109/ICSTW.2013.60
[10] Fides Aarts, Julien Schmaltz, and Frits Vaandrager. 2010. Inference and Abstraction of the Biometric Passport. In Leveraging Applications of Formal Methods, Verification, and Validation (Lecture Notes in Computer Science), Tiziana Margaria and Bernhard Steffen (Eds.). Springer, Berlin, Heidelberg, 673–686. https://doi.org/10.1007/978-3-642-16558-0-54
[11] Dana Angluin. 1987. Learning regular sets from queries and counterexamples. Information and Computation 75, 2 (Nov. 1987), 87–106. https://doi.org/10.1016/0890-5401(87)90052-6
[12] George Argyros, Ioannis Stais, Suman Jana, Angelos D. Keromytis, and Aggelos Kiayias. 2016. SFADiff: Automated Evasion Attacks and Fingerprinting Using Black-Box Differential Automata Learning. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS ’16). Association for Computing Machinery, New York, NY, USA, 1690?1701. https://doi.org/10.1145/2976749.2978383
[13] Borja Balle and Mehryar Mohri. 2015. Learning Weighted Automata. In Algebraic Informatics - 6th International Conference, CAI 2015, Stuttgart, Germany, September 1-4, 2015. Proceedings (Lecture Notes in Computer Science), Andreas Maletti (Ed.), Vol. 9270. Springer, 1–21. https://doi.org/10.1007/978-3-319-23021-4_1
[14] Karthikeyan Bhargavan et al. 2016. Everest: Towards a Verified, Drop-in Replacement of HTTPS. (2016), 11.
[15] Steve Bishop, Matthew Fairbairn, Hannes Mehnert, Michael Norrish, Tom Ridge, Peter Sewell, Michael Smith, and Keith Wansbrough. 2019. Engineering with Logic: Rigorous Test-Oracle Specification and Validation for TCP/IP and the Sockets API. J. ACM 66, 1 (2019), 1:1–1:77. https://doi.org/10.1145/3243650
[16] Leonardo de Moura and Nikolaj Bjørner. 2008. Z3: An Efficient SMT Solver. In Tools and Algorithms for the Construction and Analysis of Systems (Lecture Notes in Computer Science), C. R. Ramakrishnan and Jakob Rehof (Eds.). Springer, Berlin, Heidelberg, 337–340. https://doi.org/10.1007/978-3-540-78800-3_24
[17] Joeri de Ruiter. 2016. A Tale of the OpenSSL State Machine: A Large-Scale Black-Box Analysis. In Secure IT Systems - 21st Nordic Conference, NordSec 2016, Oulu, Finland, November 2-4, 2016, Proceedings (Lecture Notes in Computer Science), Billy Bob Brumley and Juha Röning (Eds.), Vol. 10014. 169–184. https://doi.org/10.1007/978-3-319-47560-8_11
[18] Joeri de Ruiter and Erik Poll. 2015. Protocol State Fuzzing of TLS Implementations. In 24th USENIX Security Symposium, USENIX Security 15, Washington, D.C., USA, August 12-14, 2015, Jaeyeon Jung and Thorsten Holz (Eds.). USENIX Association, 193–206.
[19] Antoine Delignat-Lavaud, Cédric Fournet, Bryan Parno, Jonathan Protzenko, Tahina Ramananandro, Jay Bosamiya, Joseph Lallemand, Itsaka Rakotonirina, and Yi Zhou. [n. d.]. A Security Model and Fully Verified Implementation for the IETF QUIC Record Layer. ([n. d.]), 17.
[20] Antoine Delignat-Lavaud, Cédric Fournet, Bryan Parno, Jonathan Protzenko, Tahina Ramananandro, Jay Bosamiya, Joseph Lallemand, Itsaka Rakotonirina, and Yi Zhou. 2020. A Security Model and Fully Verified Implementation for the IETF QUIC Record Layer. IACR Cryptol. ePrint Arch. 2020 (2020), 114. https://eprint.iacr.org/2020/114
[21] Paul Fiterau-Brostean, Bengt Jonsson, Robert Merget, Joeri de Ruiter, Konstantinos Sagonas, and Juraj Somorovsky. 2020. Analysis of {DTLS} Implementations Using Protocol State Fuzzing. 2523–2540. https://www.usenix.org/conference/usenixsecurity20/presentation/fiterau-brostean
[22] Paul Fiterău-Broştean, Ramon Janssen, and Frits Vaandrager. 2016. Combining Model Learning and Model Checking to Analyze TCP Implementations. In Computer Aided Verification (Lecture Notes in Computer Science), Swarat Chaudhuri and Azadeh Farzan (Eds.). Springer International Publishing, Cham, 454–471. https://doi.org/10.1007/978-3-319-41540-6-25
[23] Vidhi Goel, Rui Paulo, and Christoph Paasch. 2020. Testing QUIC with packetdrill. In Proceedings of the Workshop on the Evolution, Performance, and Interoperability of QUIC. ACM, Virtual Event USA, 1–7. https://doi.org/10.1145/3405796.3405825
[24] Harry B. Hunt and Daniel J. Rosenkrantz. 1977. On Equivalence and Containment Problems for Formal Languages. J. ACM 24, 3 (July 1977), 387–396. https://doi.org/10.1145/322017.322020
[25] Malte Isberner, Falk Howar, and Bernhard Steffen. 2015. The Open-Source LearnLib - A Framework for Active Automata Learning. In Computer Aided Verification - 27th International Conference, CAV 2015, San Francisco, CA, USA, July 18-24, 2015, Proceedings, Part I (Lecture Notes in Computer Science), Daniel Kroening and Corina S. Pasareanu (Eds.), Vol. 9206. Springer, 487–495. https://doi.org/10.1007/978-3-319-21690-4_32
[26] William M McKeeman. 1998. Differential Testing for Software. 10, 1 (1998), 8.
[27] Kenneth L. McMillan and Lenore D. Zuck. 2019. Formal specification and testing of QUIC. In Proceedings of the ACM Special Interest Group on Data Communication (SIGCOMM ’19). Association for Computing Machinery, Beijing, China, 227–240. https://doi.org/10.1145/3341302.3342087
[28] Maxime Piraux, Quentin De Coninck, and Olivier Bonaventure. 2018. Observing the Evolution of QUIC Implementations. Proceedings of the Workshop on the Evolution, Performance, and Interoperability of QUIC (Dec. 2018), 8–14. https://doi.org/10.1145/3284850.3284852 arXiv: 1810.09134.
[29] J. Postel. 1980. DoD standard Transmission Control Protocol. (1980). https://www.rfc-editor.org/info/rfc0761 Number: RFC 761.
[30] Felix Rath, Daniel Schemmel, and Klaus Wehrle. 2018. Interoperability-Guided Testing of QUIC Implementations Using Symbolic Execution. In Proceedings of the Workshop on the Evolution, Performance, and Interoperability of QUIC (EPIQ’18). Association for Computing Machinery, New York, NY, USA, 15?21. https://doi.org/10.1145/3284850.3284853
[31] Martin Thomson and Jana Iyengar. [n. d.]. QUIC: A UDP-Based Multiplexed and Secure Transport. ([n. d.]). https://tools.ietf.org/html/draft-ietf-quic-transport-29 Library Catalog: tools.ietf.org.
[32] Frits Vaandrager. 2017. Model learning. Commun. ACM 60, 2 (Jan. 2017), 86–95. https://doi.org/10.1145/2967606
[33] Gerco van Heerdt, Clemens Kupke, Jurriaan Rot, and Alexandra Silva. 2020. Learning Weighted Automata over Principal Ideal Domains. In Foundations of Software Science and Computation Structures - 23rd International Conference, FOSSACS 2020 (Lecture Notes in Computer Science), Jean Goubault-Larrecq and Barbara König (Eds.), Vol. 12077. Springer, 602–621. https://doi.org/10.1007/978-3-030-45231-5_31

## A Artifact Appendix

### Abstract
We provide the source code and scripting to run Prognosis, as well as re-run and verify claimed properties and results.

### Scope
The artifact covers the full code and tooling used in both the development and execution of Prognosis, as well as the source code of its targets.