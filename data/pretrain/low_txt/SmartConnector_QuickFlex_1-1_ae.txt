### Event Fields and Descriptions

- **Source Translated Zone URI**:
  - **Type**: String
  - **Length**: 1023
  - **Default**: n/a
  - **Field Name**: `event.sourceTranslatedZoneURI`

- **Source User ID**:
  - **Type**: String
  - **Length**: 1023
  - **Default**: n/a
  - **Field Name**: `event.sourceUserId`

- **Source User Name**:
  - **Type**: String
  - **Length**: 1023
  - **Default**: n/a
  - **Field Name**: `event.sourceUserName`

- **Source User Privileges**:
  - **Type**: String
  - **Length**: 1023
  - **Default**: n/a
  - **Field Name**: `event.sourceUserPrivileges`

- **Source Zone URI**:
  - **Type**: String
  - **Length**: n/a
  - **Default**: n/a (2)
  - **Field Name**: `event.sourceZoneURI`

- **Start Time**:
  - **Type**: TimeStamp
  - **Default**: n/a
  - **Notes**: (5)
  - **Field Name**: `event.startTime`

- **Transport Protocol**:
  - **Type**: String
  - **Length**: 31
  - **Default**: n/a (6)
  - **Field Name**: `event.transportProtocol`

- **Virus Name (Rule)**:
  - **See**: "QuickFlex Parser Tool Rules"
  - **Range Notes**:
    1. Although these fields can be set using the FlexConnector properties file, it is recommended to create a categorization file. For more about the possible values, see the "Categories" topic in the Console Help or the ArcSight Console User’s Guide. Also, see "FlexConnectors and Categorization" in the FlexConnector Developer's Guide.
    2. URI fields can be set using the FlexConnector properties file, but they are links to resources in the database. It is recommended to set these fields using the network-model and customer-setting features.
    3. This is an IPv4 address (from 0.0.0.0 to 255.255.255.255) or an IPv6 address (xxxx:xxxx:xxxx:xxxx:xxxx:xxxx).
    4. This is a MAC address: XX:XX:XX:XX:XX:XX or XX-XX-XX-XX-XX-XX.
    5. This is a timestamp stored as milliseconds since January 1, 1970.
    6. The options are: TCP, UDP, ICMP, IGMP, ARP.

### Micro Focus Quick Flex Parser Tool (1.1)

#### Page 36 of 67
**User Guide**
**Chapter 4: ArcSight Assignments**

- **PreserveRawEvent**:
  - Set `PreserveRawEvent` to `Yes` to have the connector automatically preserve the original event log received from the device. The default is `No`. To find the `PreserveRawEvent` field in the ArcSight Console interface, go to the Connectors resource tree > Configure > Default tab > Content > Processing section > PreserveRawEvent.

- **IPv6 Fields**:
  - For a non-IPv6-aware parser, the IPv6 fields (`deviceCustomIPv6Address1`, `deviceCustomIPv6Address2`, and `deviceCustomIPv6Address3`) should consistently use 1 for the device, 2 for the source, and 3 for the destination. The labels for them will automatically be set if the IPv6 address field is set, but if your ArcSight Console parser sets them explicitly, it should use the exact strings shown above.
  - For an IPv6-aware parser, the IPv6 fields can contain either IPv4 or IPv6 addresses. In practice, these fields should rarely be used. If they are, the labels should be set to an appropriate value.
  - The name field is mandatory.

#### Page 37 of 67
**Chapter 5: Quick Flex Parser Tool Rules**

- **Mapping Rule**:
  - A mapping rule provides a level of indirection between the user and the ArcSight ESM schema field a value is mapped to. A value comes from either a token, the value captured by the token’s regular expression when it is used in the token filter, or the result of an operation that is part of the token or token filter.
  - A mapping rule provides:
    - Support for common operations so that you do not need to repeatedly implement them in each token filter or parser.
    - A user-friendly name for the schema field.
    - The ability to change how a value would be applied to the schema without requiring the user to change token filters or parsers.
  - There is a distinction between selecting a mapping that simply writes to a schema field and one that has operations. The majority of users will simply do mapping. The available operations, when the mapping rule has operations, are described in "ArcSight Operations". In this case, the mapping rule supports these uses:
    - The value must be tested and modified in some way that relates to the schema field.
    - The destination schema field must be selected based on an ArcSight mapping convention. It supports consistent mapping for cases when there are no natural schema fields to map to, and supports the complexity of the ArcSight schema when a value might be mapped to different places.

- **Available Mapping Rules**:
  - **ACL Name**:
    - Defines the name of the Access Control List (ACL).
    - Arguments:
      - ACL Name: The value of ACL Name is mapped to `event.deviceCustomString1`.
      - ACL Label: If defined, the value is mapped to `event.deviceCustomString1Label`. If not defined, "ACL name" is mapped to `event.deviceCustomString1Label`.

  - **AdditionalData**:
    - Allows you to specify a custom additional data name when you perform mapping.
    - Example: When you are mapping `Token0`, you can enter `CUSTOM_NAME` as an argument. The following will appear in the parser properties file: `additionaldata.CUSTOM_NAME = Token0`.

  - **AV Engine Version**:
    - Defines the AntiVirus Engine version.
    - Arguments:
      - AV Engine Version: The value of AV Engine Version is mapped to `event.deviceCustomString2`.
      - AV Engine Version Label: If defined, the value is mapped to `Device CustomString2 Label`. If not defined, "AV Engine Version" is mapped to `event.deviceCustomString2Label`.

  - **DestinationAccount**:
    - Identifies the target account of an event. If the account name contains a Windows domain, it will split the domain name out of the account name. The domain name is written to `event.destinationNtDomain`.
    - Arguments:
      - Account Name: The domain name (if it exists) is mapped to `event.destinationNtDomain` and Account Name is mapped to `event.destinationUserName`.

  - **DestinationAddress or Host**:
    - Destination target of an event; typically this will be a host address or a host name. The rule evaluates whether the target is an address or a host name and maps it to the appropriate field.
    - Arguments:
      - If the value pattern matches an IPv4 address, then the value is mapped to `event.destinationAddress`.
      - If the value pattern matches an IPv6 address, then the value is mapped to `event.customIPv6Address3` and "Destination IPv6 Address" is mapped to `event.customIPv6Address3Label`.
      - If neither of these conditions match, then the value is mapped to `event.destinationHostName`.

  - **Device Address or Host**:
    - Device is the system where the event occurred, or from where the event was retrieved. The rule evaluates the value pattern and maps the value to the appropriate field.
    - Arguments:
      - If the pattern matches an IPv4 address, then the value is mapped to `event.destinationAddress` in the case of an address, or `event.deviceAddress` in the case of a host.
      - If the pattern matches an IPv6 address, then the value is mapped to `event.customIPv6Address1` and "Device IPv6 Address" is mapped to `event.customIPv6Address1Label`.
      - If neither of these conditions match, then the value is mapped to `event.destinationHostName` in the case of an address, or `event.deviceHostName` in the case of a host.

  - **Group**:
    - A Group can be anything that an application or operating system refers to as a group. The ArcSight event schema does not support groups, so if you must define a group, use these conventions to handle the values.
    - Arguments:
      - GroupName: The value of GroupName is mapped to `event.deviceCustomString6`.
      - GroupLabel: If defined, the value is mapped to `event.deviceCustomString6Label`. If not defined, "Group" is mapped to `event.deviceCustomString6Label`.

  - **Instance**:
    - An Instance is a representation of a distinct event. If the product supports instance, use these conventions to map the values.
    - Arguments:
      - Instance Field Value: The value is mapped to `event.deviceCustomString3`.
      - Instance Label: If defined, the value is mapped to `event.deviceCustomString3Label`. If not defined, "Instance" is mapped to `event.deviceCustomString3Label`.

  - **Object**:
    - A generic object. Any object that does not have a natural rule. Use these conventions to map the values.
    - Arguments:
      - Object Name: The value of Object Name is mapped to `event.deviceCustomString6`.
      - Object Label: If defined, the value is mapped to `event.deviceCustomString6Label`. If not defined, "Object name" is mapped to `event.deviceCustomString6Label`.

  - **Rule Name**:
    - Any instance of a rule name. For example, this can be a firewall rule, a mapping rule, etc. Use these conventions to map the values.
    - Arguments:
      - Rule Name: The value of Rule Name is mapped to `event.deviceCustomString1`.
      - Rule Label: If defined, the value is mapped to `event.deviceCustomString1Label`. If not defined, "Rule name" is mapped to `event.deviceCustomString1Label`.

  - **Signature Version**:
    - This is typically an IDS (Intrusion Detection System) signature version number.
    - Arguments:
      - Signature Version: The value of Signature Version is mapped to `event.deviceCustomString2`.
      - Signature Version Label: If defined, the value is mapped to `event.deviceCustomString2Label`. If not defined, "Signature version" is mapped to `event.deviceCustomString2Label`.

  - **Source Account**:
    - The account of the source that triggered the event. If the account name contains a Windows domain, it will split the domain name out of the account name. The domain name is written to `event.destinationNtDomain`.
    - Arguments:
      - Account Name: The domain name (if it exists) is mapped to `event.destinationNtDomain` and Account Name is mapped to `event.destinationUserName`.

  - **Source Address or Host**:
    - The address of the system or device that is the origin of an event or the location where the event occurred.
    - Arguments:
      - If the pattern matches an IPv4 address, then the value is mapped to `event.sourceAddress`.
      - If the pattern matches an IPv6 address, then the value is mapped to `event.customIPv6Address2` and "Source IPv6 Address" is mapped to `event.customIPv6Address2Label`.
      - If neither of these conditions match, then Source Address is mapped to `event.sourceHostName`.

  - **Virus Name**:
    - The name that a product assigns to a virus.
    - Arguments:
      - Virus Name: The value of Virus Name is mapped to `event.deviceCustomString1`.
      - Virus Label: If defined, the value is mapped to `event.deviceCustomString1Label`. If not defined, "Virus name" is mapped to `event.deviceCustomString1Label`.

#### Page 41 of 67
**Chapter 6: CEF Verification**

- **CEF Verification Features and Benefits**:
  - The CEF Verification tool helps you create CEF-compliant log files for a device. The log file used for CEF Verification can include up to 2000 lines without impacting the tool's performance. The tool simplifies your work by doing the following:
    - Confirms that the CEF header fields are correct. If they are not correct, you can add notes in the tool to change the settings in the device.
    - Confirms the CEF field names are correct in the CEF extension. If you make a correction in the extension, the tool applies the change to all lines with the same pattern in the log file.
    - Allows you to change the CEF key to match the type where you can see them in the line extensions.
    - Verifies field type upon assignment to the CEF key.
    - Verifies only the keys, such as field name abbreviations, that are allowed for use by the device (Event Producer). A SmartConnector (Event Consumer) can use additional keys.
    - Allows you to create new keys which are mapped to Additional Data assignments.
    - Generates a report which describes whether CEF header fields and CEF field names are correct, and notes any changes you make to the CEF extensions. You can use the report to adjust the device setting, produce the log file, and start the next iteration.
    - Supports the Syslog format for lines in the log file. The Syslog Header describes the standard beginning of a Syslog line, and includes a date and a host.

- **CEF Compliance Workflow Summary**:
  - The following tasks provide a high-level description of how to use the Quick Flex Parser Tool to verify that the log file adheres to the CEF standard.

#### Page 42 of 67
**User Guide**
**Chapter 6: CEF Verification**

1. **Create a CEF Compliance Project**:
   - Create a project to load the log file and identify the folder to store the results.

2. **Review Header Values**:
   - In the View Header Values window, all of the CEF headers will be parsed into their own columns. The parsing is done by the connector. The intent of this window is for you to check and comment on whether the values are appropriate and match the vendor's proper data type and terminology.

3. **Assess CEF Extensions**:
   - Click the Warning Details icon to view the warning details and descriptions for the line that you are editing.
     - In the Verify CEF Extension window, right-click a key/value pair to pick an appropriate match and edit the key. The objective is to have key/value pairs with matching data types so that the value for each key can be mapped and not cause warnings when the log is being fed into the connector.
     - Keys are available in a list menu.
     - You can change the key to another key that may be more appropriate for the values it is representing.
     - When you edit a log line, the pattern of the log line is noted in the back-end. When you are done editing and apply the changes, other log lines in the log file will have the same changes applied.
     - The changes made in this window are noted in the generated report.

4. **Review Changes**:
   - Repeat the above steps until there are no log warnings or you are satisfied with your changes.
   - Click Refresh for the edits that were done previously in the CEF extension window to apply to all the other pattern-matching log lines.

5. **Generate a Report**:
   - The generated report includes comments from the Header Values window.
   - The generated report includes all the edits done in the CEF extension window. Each edit contains the original log line used, the original and new keys, and the other log lines affected from the edits to the particular original log line.

6. **Apply Your Changes to the Device**:
   - Based on the information from the Generated Report, apply changes to the device. Applying changes may be relevant in the CEF header and in certain key patterns.

#### Page 44 of 67
**Chapter 7: CEF Verification Log View**

- **Navigation**:
  - Landing page > Create New > Log View or Landing page > Open Files > Log View

- **CEF Verification Log View**:
  - The CEF Verification Log View opens when you create a new project or open an existing project. This view contains these panels:
    - The CEF Verification Log View shows the log lines with highlighting of syslog header and CEF header or just CEF header. It shows the status for each log line. If it has a warning icon, there are some warnings that may need to be addressed. If you click the icon, it opens the Verify CEF Extension window where you can see the log line and modify it.
    - Click the Warning icon in the Log View window Status column to open the Verify CEF Extension window. Right-click a section of a log line to assign keys to the line. As keys are assigned, the color of portions of the line will change. If the log line is valid, a green check mark indicates it is verified.
    - You can also click the Warning Details icon to open another window that lists the warnings and descriptions for each warning for that particular log line.
    - For more information on how highlighting is used in the CEF Verification tool, see "Understanding Color Highlighting in Log Lines".

- **CEF Verification Log View Tool Bar**:
  - The CEF Verification Log View tool bar contains the following:
    - File: Contains commands to create a new project, open an existing project, open a log file in the project, save the project, and edit project properties.
    - View Header Values: Click to open the View Header Values window for the highlighted line. Use this window to check the values assigned to components in each log line for correctness.
    - Verify CEF Extension: Click to open the Verify CEF Extension window for the highlighted line. Use this window to assign CEF keys to components in the log message.
    - Help: Click to access the online help and the two workflow summaries.

- **CEF Verification Log View Ribbon**:
  - The CEF Verification Log View ribbon displays the following status and commands:
    - Total Log Lines: Indicates the total number of lines in the log file.
    - Warning Lines: Indicates the lines with errors.
    - Go to: Enter a line number to skip to that line.
    - Search by Log: Search on a word or phrase in the log file.
    - Report: Click to generate a new log file and a report that contains a record of your changes.
    - Gear button: Click the gear button to display these options:
      - Show Syslog Header: Enable this option to display the syslog header (default). When disabled, the syslog header is hidden.
      - Show CEF Header: Enable this option to display the CEF header (default). When disabled, the CEF header is hidden.
    - Refresh: Click to refresh the contents of the working view.

- **Creating CEF Verification Projects and Opening CEF Log Files**:
  - You can perform these tasks on the Quick Flex Parser Tool Landing Page for a CEF Verification project:
    - Create a CEF Verification Project
    - Open a CEF Log File
    - View a Workflow Summary

- **Create a CEF Verification Project**:
  - Navigation: Landing page > Create New
  - About: CEF Verification projects
  - Procedure:
    1. Click Create New on the Landing Page to open the New Project dialog.
    2. Select the Verify CEF Log to create a CEF verification project.
    3. Enter the following information in the Create New Project page:
       - The name of the vendor who provided the log file
       - (Optional) The name of the product that produced the log file
       - (Optional) The version number of the product
    4. For CEF Verification projects: select Syslog File if you are working with a syslog log file.
    5. (Optional) Click Browse to navigate to the log file.
    6. Click Browse to navigate to the location where you want to store your project artifacts.
    7. Click Create. The log file is loaded into the Log View. A JSON project file is created. The name of the file is a concatenation of a prefix to indicate whether the file belongs to a parser file or a CEF verification project (pt or cef), the vendor name, the product name, and the version number (prefix_vendor_product_version.json).

- **Open a CEF Log File**:
  - Navigation: Log View > File > Open Log File
  - Select File > Open Log File. The log file and any associated project artifacts are loaded into the Quick Flex Parser Tool.
  - When you open a new log file, you will be prompted that the work that you have done so far will be erased if uploading a new log. You will get a prompt to save the generated report for the original log file since the keys that changed may not work for the new log file. Each new log file gets interpreted by the connector and may produce different results. Follow the prompts to save the work that you have done with the original log file.

- **View a Workflow Summary**:
  - Navigation: Landing page > CEF Compliance Overview
  - Procedure:
    - Click Quick Flex Overview for a graphic representation of the Quick Flex workflow.
    - See CEF Compliance Workflow Summary for details.

- **View Header Values**:
  - Navigation: Log View > View Header Values
  - Use the View Header Values window to inspect the values assigned to components in the header.
  - About:
    - The first column in the table contains the line number. Subsequent columns contain the values for the components detected in the header. Click Add Comments to add any notes you want to the table. You can open and edit the comments at any time.
    - If you notice any header component values that you want to change, you must return to the device to make your changes, re-run the log file, then load it back into the Quick Flex Parser Tool.

- **Verify the CEF Extension**:
  - Navigation: Log View > Verify CEF Extension
  - Use the Verify CEF Extension window to assign CEF keys to components in the log message.