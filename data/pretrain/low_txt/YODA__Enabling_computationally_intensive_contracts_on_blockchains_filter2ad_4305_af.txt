### Optimized Text

#### Computation Time and Gas Usage
The computation time for one round is the sum of `wsrc`, `wbuf`, and `wsr`. Only `wsrc` depends on gas usage, as the Interactive Transaction (IT) occurs during this period. In an experiment with a CIC gas usage of 5.3×10^10, YODA consumed 240 million gas per second, which is 450 times the current Ethereum limit. This speedup is observed with a single IT; parallel execution further increases efficiency.

#### Parallel CICs
To test YODA's performance, we ran up to 16 parallel ITs. Figure 4 shows the execution time for different numbers of concurrent ITs. All ITs were invoked simultaneously in a single block, with identical gas usage. The red line in Figure 4 represents the average storage root commitment time, and error bars indicate the range. The minimum commit time remains constant, suggesting that off-chain execution time is consistent. However, the maximum value increases due to the need for more blocks to include the increased number of commitment transactions, leading to a gradual increase in the average commit time. Future work will focus on automatically provisioning `wsrc` to account for this phenomenon.

#### Evaluation of MIRACLE
We evaluated MIRACLE's performance under a Byzantine adversary. The adversary used the best strategy, submitting a single incorrect solution for all controlled nodes. The expected number of rounds is a critical parameter. We determined this experimentally and compared it to theoretical approximations. Figure 5 plots the expected number of rounds (`E[# Rounds]`) against the fraction of Byzantine nodes (`f`) for different values of the probability of accepting an incorrect storage root (`β`), ranging from 10^-3 to 10^-10. For this experiment, we fixed `q = 0.125` and `M = 1600`, resulting in an Expected Set (ES) of size 200. As `f` increases, `E[# Rounds]` also increases, aligning well with the theoretical approximation. Note that the theoretical approximation can be less than 1, which is impossible since at least one round is always required.

#### Evaluation of RICE
Next, we evaluated the overhead associated with RICE when implemented on the EVM geth client. We measured CIC execution time on both the unmodified EVM and a modified EVM with RICE. For each gas usage, we aggregated results over 200 repetitions. Figure 6 shows the time difference between CIC execution with and without RICE. As expected, the absolute difference increases with higher gas usage due to more update indices. Figure 7 plots gas usage versus relative execution time, defined as the ratio of the absolute time difference to the CIC execution time without RICE. The relative overhead of RICE is minimal. As gas usage increases, the relative time decreases because RICE indices become sparse in later segments, reducing overhead. Minor variations in the early part of the graph are due to small absolute times, magnifying the relative differences.

#### Related Work
The threat model combining Byzantine and selfish nodes in distributed systems was introduced by Aiyer et al. [1]. Prior models considered either perfectly honest and Byzantine nodes or only selfish nodes. The Byzantine Altruistic Rational (BAR) model combines these in a permissioned cooperative service with PKI. Our threat model is similar to the BAR model.

Most blockchain consensus protocols in the permissionless case limit their threat models to Byzantine and honest nodes, not BAR models. These include Fruitchains [20], Algorand [10], and the sleepy model of consensus [21]. Ouroboros [13] introduces ε-Nash Equilibrium for proof-of-stake. Selfish mining [23] shows that if a non-zero fraction of miners behave selfishly, honest behavior is no longer an equilibrium. These works address block consensus, where blocks can take many values and are easy to verify. In contrast, CIC computation has only one correct value and is computationally intensive to verify.

Truebit [26] proposes enabling CICs on permissionless blockchains with selfish nodes. It requires a single Solver to execute and upload transaction results, and any number of volunteer verifiers to verify the solution. There is no bound on the number of verifiers, unlike YODA. Truebit does not provide guarantees for the probability of correct CIC computation under a threat model and is susceptible to the Participation Dilemma [12].

Arbitrum [12] is a system for scalable off-chain execution of private smart contracts. Each contract can assign managers who execute transactions off-chain, and any manager can submit a hash of the updated state on-chain. Challenges can be submitted if the state is incorrect. Arbitrum works under a threat model with at least one honest manager and the rest being rational. It has not been proven to work with Byzantine managers or all rational managers. YODA, however, works with both Byzantine and selfish nodes, none of which need to be honest, and is not restricted to private smart contracts.

Several papers focus on sharding to improve permissionless blockchain performance [2, 14, 15]. None of these focus on efficient CIC execution, instead increasing throughput in terms of non-IT transactions executed over time, assuming verification takes little time.

#### Discussion and Conclusion
YODA enables permissionless blockchains to compute CICs efficiently. Experimental results show that individual ITs with gas usage 450 times the Ethereum limit can be executed using the existing EVM. YODA uses incentives and mechanisms like RICE to ensure rational nodes behave honestly. The MIRACLE algorithm uses multiple rounds to determine the correct solution, showing significant savings in the number of rounds when the actual Byzantine fraction is less than the worst-case assumption.

YODA's modular design allows for replacing specific modules, such as RICE, MIRACLE, SP selection, and ES selection, with alternatives in the future. Several issues, such as data management, need to be addressed before YODA can be fully practical. Large CICs with large states and frequent updates can be costly in terms of communication. Possible solutions include using Distributed File Systems like IPFS [5] and Authenticated Data Structures like Versum [27] to store succinct representations in the blockchain.

Another concern is the number of additional transactions needed for consensus. MIRACLE requires each ES node to submit two short transactions per round, with the count depending on `f`. In the best case, YODA requires only about 70 transactions with `f = 0` and `β = 10^-20`. With contemporary blockchain solutions scaling up to thousands of transactions per second, these transactions consume relatively small bandwidth.

The periods `wsrc` and `wsr` for CIC execution off-chain depend on the number of simultaneous ITs. As the number of ITs increases, the average CIC workload on any node increases, necessitating a limit on ITs to reduce the maximum load on an ES node.

#### Acknowledgments
The authors thank Aditya Ahuja, Cui Changze, Aashish Kolluri, Dawei Li, Sasi Kumar Murakonda, Prateek Saxena, Subodh Sharma, Ovia Seshadri, and anonymous reviewers for their feedback on the early draft of the paper.

#### References
[1] A. S. Aiyer, L. Alvisi, A. Clement, M. Dahlin, J.-P. Martin, and C. Porth, “BAR fault tolerance for cooperative services,” in ACM SIGOPS operating systems review, vol. 39, no. 5. ACM, 2005, pp. 45–58.
[2] M. Al-Bassam, A. Sonnino, S. Bano, D. Hrycyszyn, and G. Danezis, “Chainspace: A sharded smart contracts platform,” arXiv preprint arXiv:1708.03778, 2017.
[3] E. Androulaki, A. Barger, V. Bortnikov, C. Cachin, K. Christidis, A. De Caro, D. Enyeart, C. Ferris, G. Laventman, Y. Manevich et al., “Hyperledger fabric: a distributed operating system for permissioned blockchains,” in Proceedings of the Thirteenth EuroSys Conference. ACM, 2018, p. 30.
[4] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza, “Succinct non-interactive zero knowledge for a von neumann architecture.” in USENIX Security Symposium, 2014, pp. 781–796.
[5] J. Benet, “IPFS-content addressed, versioned, p2p file system,” arXiv preprint arXiv:1407.3561, 2014.
[6] V. Buterin et al., “A next-generation smart contract and decentralized application platform,” white paper, 2014.
[7] K. Croman, C. Decker, I. Eyal, A. E. Gencer, A. Juels, A. Kosba, A. Miller, P. Saxena, E. Shi, E. G. Sirer et al., “On scaling decentralized blockchains,” in International Conference on Financial Cryptography and Data Security. Springer, 2016, pp. 106–125.
[8] J. R. Douceur, “The sybil attack,” in International workshop on peer-to-peer systems. Springer, 2002, pp. 251–260.
[9] J. Eberhardt and S. Tai, “Zokrates-scalable privacy-preserving off-chain computations.”
[10] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, “Algorand: Scaling byzantine agreements for cryptocurrencies,” in Proceedings of the 26th Symposium on Operating Systems Principles. ACM, 2017, pp. 51–68.
[11] A. Juels, A. Kosba, and E. Shi, “The ring of gyges: Investigating the future of criminal smart contracts,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 283–295.
[12] H. Kalodner, S. Goldfeder, X. Chen, S. M. Weinberg, and E. W. Felten, “Arbitrum: Scalable, private smart contracts,” in Proceedings of the 27th USENIX Conference on Security Symposium. USENIX Association, 2018, pp. 1353–1370.
[13] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A provably secure proof-of-stake blockchain protocol,” in Annual International Cryptology Conference. Springer, 2017, pp. 357–388.
[14] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and B. Ford, “Omniledger: A secure, scale-out, decentralized ledger via sharding,” in 2018 IEEE Symposium on Security and Privacy (SP). IEEE, 2018, pp. 583–598.
[15] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, “A secure sharding protocol for open blockchains,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 17–30.
[16] L. Luu, J. Teutsch, R. Kulkarni, and P. Saxena, “Demystifying incentives in the consensus computer,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 706–719.
[17] S. Micali, M. Rabin, and S. Vadhan, “Verifiable random functions,” in Foundations of Computer Science, 1999. 40th Annual Symposium on. IEEE, 1999, pp. 120–130.
[18] J. F. Nash et al., “Equilibrium points in n-person games,” 1950.
[19] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” 2008.
[20] R. Pass and E. Shi, “Fruitchains: A fair blockchain,” in Proceedings of the ACM Symposium on Principles of Distributed Computing. ACM, 2017, pp. 315–324.
[21] ——, “The sleepy model of consensus,” in International Conference on the Theory and Application of Cryptology and Information Security. Springer, 2017, pp. 380–409.
[22] R. Radner, “Collusive behavior in noncooperative epsilon-equilibria of oligopolies with long but finite lives,” in Noncooperative Approaches to the Theory of Perfect Competition. Elsevier, 1982, pp. 17–35.
[23] A. Sapirshtein, Y. Sompolinsky, and A. Zohar, “Optimal selfish mining strategies in bitcoin,” in International Conference on Financial Cryptography and Data Security. Springer, 2016, pp. 515–532.
[24] E. Syta, P. Jovanovic, E. K. Kogias, N. Gailly, L. Gasser, I. Khoffi, M. J. Fischer, and B. Ford, “Scalable bias-resistant distributed randomness,” in Security and Privacy (SP), 2017 IEEE Symposium on. Ieee, 2017, pp. 444–460.
[25] N. Szabo, “Smart contracts: building blocks for digital markets,” EXTRAPOLY: The Journal of Transhumanist Thought, (16), 1996.
[26] J. Teutsch and C. Reitwießner, “A scalable verification solution for blockchains,” 2017.
[27] J. van den Hooff, M. F. Kaashoek, and N. Zeldovich, “Versum: Verifiable computations over large public logs,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2014, pp. 1304–1316.
[28] A. Wald, Sequential analysis. Courier Corporation, 1973.
[29] J. Wang, Y. Song, T. Leung, C. Rosenberg, J. Wang, J. Philbin, B. Chen, and Y. Wu, “Learning fine-grained image similarity with deep ranking,” in Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 2014, pp. 1386–1393.
[30] Y. H. Wang, “On the number of successes in independent trials,” Statistica Sinica, pp. 295–312, 1993.
[31] M. Zamani, M. Movahedi, and M. Raykova, “Rapidchain: Scaling blockchain via full sharding,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 931–948.
[32] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi, “Town crier: An authenticated data feed for smart contracts,” in Proceedings of the 2016 ACM SIGSAC conference on computer and communications security. ACM, 2016, pp. 270–282.