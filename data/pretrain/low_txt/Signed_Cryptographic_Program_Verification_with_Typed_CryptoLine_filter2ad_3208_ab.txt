### CryptoLine Syntax and Type System

#### Syntax
The following are the syntax rules for CryptoLine, a domain-specific language designed for cryptographic assembly programming. The syntax is defined using a context-free grammar (CFG) with the following productions:

- **Multiplication Instructions:**
  - `umull Var Var Atom Atom`
  - `smull Var Var Atom Atom`

- **Shift and Split Instructions:**
  - `uspl Var Var Atom Num`
  - `sspl Var Var Atom Num`
  - `ucshl Var Var Atom Atom Num`
  - `scshl Var Var Atom Atom Num`

- **Addition and Subtraction Instructions:**
  - `uadcs Var Var Atom Atom Atom`
  - `sadcs Var Var Atom Atom Atom`
  - `usbbs Var Var Atom Atom Atom`
  - `ssbbs Var Var Atom Atom Atom`

- **Program Structure:**
  - `Prog ::= Decl* Inst*`

- **Join Instructions:**
  - `ujoin Var Var Atom Atom`
  - `sjoin Var Var Atom Atom`

- **Assertions and Assumptions:**
  - `assert P ∧∧ Q`
  - `assume P ∧∧ Q`

#### Type System
The type system for CryptoLine is defined using typing rules. The context \(\Gamma\) represents a set of variable type assignments. The typing rules ensure that each instruction is well-typed and that the types of variables are consistent.

- **Variable and Constant Typing:**
  - \(\frac{\Gamma, v : \tau}{\Gamma \vdash v : \tau}\)
  - \(\frac{\Gamma \vdash c@τ : τ}{\Gamma \vdash c@τ : τ}\)

- **Arithmetic Operations:**
  - \(\frac{\Gamma \vdash E0 : \tau \quad \Gamma \vdash E1 : \tau}{\Gamma \vdash E0 + E1 : \tau}\)
  - \(\frac{\Gamma \vdash E0 : \tau \quad \Gamma \vdash E1 : \tau}{\Gamma \vdash E0 \times E1 : \tau}\)
  - \(\frac{\Gamma \vdash E0 : \tau \quad \Gamma \vdash E1 : \tau}{\Gamma \vdash E0 - E1 : \tau}\)
  - \(\frac{\Gamma \vdash E0 : \tau \quad \Gamma \vdash E1 : \tau}{\Gamma \vdash E0 = E1 : \tau}\)
  - \(\frac{\Gamma \vdash E0 : \tau \quad \Gamma \vdash E1 : \tau \quad \Gamma \vdash E2 : \tau}{\Gamma \vdash E0 \equiv E1 \mod E2 : \tau}\)

- **Move Instruction:**
  - \(\frac{\Gamma \vdash a : \tau}{\Gamma \vdash mov v a \Rightarrow \Gamma \cup \{v : \tau\}}\)

- **Addition and Subtraction:**
  - \(\frac{\Gamma \vdash a0 : \rho \quad \Gamma \vdash a1 : \rho}{\Gamma \vdash uadd v a0 a1 \Rightarrow \Gamma \cup \{v : \rho\}}\)
  - \(\frac{\Gamma \vdash a0 : \sigma \quad \Gamma \vdash a1 : \sigma}{\Gamma \vdash sadd v a0 a1 \Rightarrow \Gamma \cup \{v : \sigma\}}\)
  - \(\frac{\Gamma \vdash a0 : \rho \quad \Gamma \vdash a1 : \rho}{\Gamma \vdash usub v a0 a1 \Rightarrow \Gamma \cup \{v : \rho\}}\)
  - \(\frac{\Gamma \vdash a0 : \sigma \quad \Gamma \vdash a1 : \sigma}{\Gamma \vdash ssub v a0 a1 \Rightarrow \Gamma \cup \{v : \sigma\}}\)

- **Carry and Borrow Instructions:**
  - \(\frac{\Gamma \vdash a0 : \rho \quad \Gamma \vdash a1 : \rho \quad \Gamma \vdash d : bit}{\Gamma \vdash uadc v a0 a1 d \Rightarrow \Gamma \cup \{v : \rho\}}\)
  - \(\frac{\Gamma \vdash a0 : \sigma \quad \Gamma \vdash a1 : \sigma \quad \Gamma \vdash d : bit}{\Gamma \vdash sadc v a0 a1 d \Rightarrow \Gamma \cup \{v : \sigma\}}\)
  - \(\frac{\Gamma \vdash a0 : \rho \quad \Gamma \vdash a1 : \rho \quad \Gamma \vdash d : bit}{\Gamma \vdash usbb v a0 a1 d \Rightarrow \Gamma \cup \{v : \rho\}}\)
  - \(\frac{\Gamma \vdash a0 : \sigma \quad \Gamma \vdash a1 : \sigma \quad \Gamma \vdash d : bit}{\Gamma \vdash ssbb v a0 a1 d \Rightarrow \Gamma \cup \{v : \sigma\}}\)

- **Conditional Move:**
  - \(\frac{\Gamma \vdash c : bit \quad \Gamma \vdash a0 : \tau \quad \Gamma \vdash a1 : \tau}{\Gamma \vdash cmov v c a0 a1 \Rightarrow \Gamma \cup \{v : \tau\}}\)

- **Type Casting:**
  - \(\frac{\Gamma \vdash a : \tau' \quad \Gamma \vdash a1 : \tau}{\Gamma \vdash cast v@τ a \Rightarrow \Gamma \cup \{v : τ\}}\)

- **Full Multiplication:**
  - \(\frac{\Gamma \vdash a0 : \rho \quad \Gamma \vdash a1 : \rho}{\Gamma \vdash umull vH vL a0 a1 \Rightarrow \Gamma \cup \{vH : \rho, vL : \rho\}}\)
  - \(\frac{\Gamma \vdash a0 : \sigma \quad \Gamma \vdash a1 : \sigma}{\Gamma \vdash smull vH vL a0 a1 \Rightarrow \Gamma \cup \{vH : \sigma, vL : \rho\}}\)

- **Shift and Split:**
  - \(\frac{\Gamma \vdash a : \rho}{\Gamma \vdash ushl v a n \Rightarrow \Gamma \cup \{v : \rho\}}\)
  - \(\frac{\Gamma \vdash a : σ}{\Gamma \vdash sshl v a n \Rightarrow \Gamma \cup \{v : σ\}}\)
  - \(\frac{\Gamma \vdash aH : ρ \quad \Gamma \vdash aL : ρ}{\Gamma \vdash ucshl vH vL aH aL n \Rightarrow \Gamma \cup \{vH : ρ, vL : ρ\}}\)
  - \(\frac{\Gamma \vdash aH : σ \quad \Gamma \vdash aL : ρ}{\Gamma \vdash scshl vH vL aH aL n \Rightarrow \Gamma \cup \{vH : σ, vL : ρ\}}\)
  - \(\frac{\Gamma \vdash a : ρ}{\Gamma \vdash uspl vH vL a n \Rightarrow \Gamma \cup \{vH : ρ, vL : ρ\}}\)
  - \(\frac{\Gamma \vdash a : σ}{\Gamma \vdash sspl vH vL a n \Rightarrow \Gamma \cup \{vH : σ, vL : ρ\}}\)

- **Join:**
  - \(\frac{\Gamma \vdash aH : ρ \quad \Gamma \vdash aL : ρ}{\Gamma \vdash ujoin v aH aL \Rightarrow \Gamma \cup \{v : 2 \cdot ρ\}}\)
  - \(\frac{\Gamma \vdash aH : σ \quad \Gamma \vdash aL : ρ}{\Gamma \vdash sjoin v aH aL \Rightarrow \Gamma \cup \{v : 2 \cdot σ\}}\)

- **Assertions and Assumptions:**
  - \(\frac{\Gamma \vdash P \quad \Gamma \vdash Q}{\Gamma \vdash assert P \land Q}\)
  - \(\frac{\Gamma \vdash P \quad \Gamma \vdash Q}{\Gamma \vdash assume P \land Q}\)

#### Type Inference
CryptoLine's type inference algorithm updates the type context \(\Gamma\) as it processes each instruction. This allows the types of intermediate variables to be inferred automatically, reducing the need for explicit type declarations.

- **Cast Rule:**
  - \(\frac{\Gamma \vdash a : \tau' \quad \Gamma \vdash a1 : \tau}{\Gamma \vdash cast v@τ a \Rightarrow \Gamma \cup \{v : τ\}}\)

- **Unsigned Addition with Carry:**
  - \(\frac{\Gamma \vdash a0 : \rho \quad \Gamma \vdash a1 : \rho \quad \Gamma \vdash d : bit}{\Gamma \vdash uadcs c v a0 a1 d \Rightarrow \Gamma \cup \{c : bit, v : \rho\}}\)

- **Signed Full Multiplication:**
  - \(\frac{\Gamma \vdash a0 : σ \quad \Gamma \vdash a1 : σ}{\Gamma \vdash smull vH vL a0 a1 \Rightarrow \Gamma \cup \{vH : σ, vL : ρ\}}\)

- **Split and Shift:**
  - \(\frac{\Gamma \vdash aH : σ \quad \Gamma \vdash aL : ρ}{\Gamma \vdash scshl vH vL aH aL n \Rightarrow \Gamma \cup \{vH : σ, vL : ρ\}}\)

- **Join:**
  - \(\frac{\Gamma \vdash aH : ρ \quad \Gamma \vdash aL : ρ}{\Gamma \vdash ujoin v aH aL \Rightarrow \Gamma \cup \{v : 2 \cdot ρ\}}\)

#### Semantics
CryptoLine's semantics are defined in terms of an environment \(\epsilon\), which maps variables to bit strings. The type system ensures that operations are performed correctly based on the types of the operands.

- **Environment Update:**
  - \(\epsilon[v \leftarrow V]\) denotes the environment obtained by updating the bit string for \(v\) in \(\epsilon\) with the bit string representing \(V\) in the type of \(v\).

- **Instruction Semantics:**
  - The `mov` instruction updates the bit string for the destination variable.
  - Arithmetic instructions like `uadd`, `sadd`, `usub`, and `ssub` perform the corresponding operations and update the environment accordingly.
  - Instructions like `uadc`, `sadc`, `usbb`, and `ssbb` handle carry and borrow operations.
  - Conditional move (`cmov`) and type casting (`cast`) instructions also update the environment based on their specific rules.

By providing a clear and consistent type system and automatic type inference, CryptoLine simplifies the process of writing and verifying cryptographic assembly programs. The use of generic mnemonics further enhances usability by allowing users to write more concise and readable code.