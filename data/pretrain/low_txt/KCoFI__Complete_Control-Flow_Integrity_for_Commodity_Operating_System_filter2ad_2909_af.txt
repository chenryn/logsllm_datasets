### Experimental Setup and Results

The read/append and create/delete biases were set to 5, and we configured Postmark to use buffered file I/O. We conducted the experiments on an SSD due to its lower latency and more consistent performance compared to a hard disk. Each experimental run performed 500,000 transactions. The experiment was executed 20 times on both the native FreeBSD kernel and the KCoFI system. Table VIII presents the average results.

As shown in Table VIII, the overheads of Postmark are comparable to those of LMBench for file creation.

### Related Work

**Control-Flow Integrity (CFI) Definitions and Proofs:**
Abadi et al. [4] introduced the concept of control-flow integrity and provided a proof that their approach enforces context-insensitive CFI. Our proof for the KCoFI design follows a similar approach but also demonstrates how CFI is maintained during complex OS operations, such as context switching, MMU configuration, signal handler dispatch, and interrupts.

**Binary Transformation and Compiler Instrumentation:**
Zhang and Sekar’s BinCFI [10] and Zhang et al.’s CCFIR [32] transform binary programs to enforce CFI. Strato [9] modifies the LLVM compiler to instrument code with CFI checks similar to those used by KCoFI. However, these techniques cannot protect against ret2usr attacks because they rely on static analysis to find the targets of control-flow transfers. Unlike Strato, KCoFI does not verify the correctness of its instrumentation, but it can incorporate Strato’s verification techniques.

**Verified Verifiers and Sandboxing:**
RockSalt [33] is a verified verifier for Google’s Native Client [34], ensuring that x86 machine code enforces sandboxing and CFI properties. Native Client’s CFI policy only requires that x86 segment registers remain unmodified and that branches jump to aligned instructions, making it less restrictive than KCoFI’s policy. RockSalt does not support the extensive operations required by an OS kernel.

**Memory Safety and Control-Flow Integrity:**
The Secure Virtual Architecture (SVA) [12], [5] provides strong CFI guarantees, but it also enforces strict memory safety and sound points-to analysis, requiring whole-program pointer analysis [13]. SafeDrive [35] enforces memory safety on commodity OS kernel code but requires programmers to insert annotations for memory object bounds, which must be updated with code changes.

**Hypervisor and Kernel Protection:**
HyperSafe [6] enforces CFI on a hypervisor by vetting MMU translations and introducing new methods for indirect function call checks. However, it does not fully implement CFI guarantees or prevent ret2usr attacks, and it only protects a hypervisor, lacking features like signal handler delivery. KCoFI, on the other hand, protects an entire commodity operating system kernel.

**Kernel-Specific Protections:**
kGuard [11] prevents ret2usr attacks by instrumenting kernel code to ensure that indirect control flow transfers move to a kernel virtual address and uses diversification to prevent bypassing. KCoFI uses similar bit-masking to prevent user-space native code from forging kernel CFI labels. kGuard provides probabilistic protection against ROP attacks, while KCoFI ensures that the kernel’s code segment is not modified.

**Randomization and Memory Safety:**
Giuffrida et al. [36] developed a system using fine-grained randomization of the kernel code to protect against memory safety errors. Their security guarantees are probabilistic, whereas KCoFI’s guarantees are deterministic. Additionally, their prototype has only been applied to Minix, while KCoFI has been applied to a widely used, real-world operating system (FreeBSD).

**Other Security Approaches:**
SecVisor [37] prevents unauthorized code from executing in kernel space but does not protect loaded code once it is running. Returnless kernels [38] modify the compiler to remove return instructions, but such kernels may still contain gadgets that do not use return instructions [26].

**Formally Verified Microkernels:**
The seL4 microkernel [39] is written in a subset of C, and both its design and implementation are formally verified. While seL4 provides stronger security guarantees, it only applies to the microkernel, whereas KCoFI provides its guarantees to a full commodity OS kernel. Changes to seL4 require manual updates to the correctness proof, while KCoFI can automatically reapply instrumentation after kernel changes.

**Memory-Safe Programming Languages:**
Several operating systems provide CFI by being written in memory-safe languages [40], [41], [42], [43], [44]. Verve [44] is a recent example, written in a C#-like language with a verified hardware abstraction layer. KCoFI can enforce CFI, but its implementation is not verified like Verve’s.

### Future Work

**Performance and Efficacy Improvements:**
We plan to enhance KCoFI’s speed and efficacy. For instance, using separate stacks for control data and local variables could improve performance and enforce a more restrictive context-sensitive CFI policy. We also intend to conduct more low-level tuning to further optimize performance.

**Formal Proof Completion:**
We aim to complete the CFI proof in Section V to show that CFI is maintained across the transitive closure of the transition relation. Additionally, we will expand the formal model to include more features, such as user-space application support.

**Verified Implementation:**
We plan to investigate building a verified implementation of KCoFI. Similar work has been done with operating systems written in safe languages [44]. Although ambitious, this goal could help uncover implementation bugs and increase confidence in the system’s security.

### Conclusions

In this paper, we presented KCoFI, a system that provides comprehensive control-flow integrity to commodity operating systems. KCoFI offers protection to OS kernel code with better overheads than previous techniques. It uses traditional label-based protection for programmed indirect jumps and adds a thin runtime layer linked into the OS to protect key kernel data and monitor all low-level state manipulations. We have provided a partial proof that KCoFI correctly enforces CFI, adding confidence in the correctness of our system.

### Acknowledgments

The authors would like to thank Bin Zeng, Gang Tan, and Greg Morrisett for sharing their x86 CFI instrumentation pass. We also thank the FreeBSD community for providing a commodity OS that compiles with LLVM/Clang. This research was supported by the AFOSR under MURI award FA9550-09-1-0539, the Office of Naval Research under Award No. N000141210552, and NSF grant CNS 07-09122.

### References

[1] AlephOne, “Smashing the stack for fun and profit.” [Online]. Available: http://www.fc.net/phrack/files/p49/p49-14
[2] Solar Designer, “return-to-libc attack,” August 1997, http://www.securityfocus.com/archive/1/7480.
[3] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented programming: Systems, languages, and applications,” ACM Trans. Inf. Syst. Secur., vol. 15, no. 1, pp. 2:1–2:34, Mar. 2012.
[4] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-flow integrity principles, implementations, and applications,” ACM Trans. Inf. Syst. Secur., vol. 13, pp. 4:1–4:40, November 2009.
[5] J. Criswell, N. Geoffray, and V. Adve, “Memory safety for low-level software/hardware interactions,” in Proceedings of the Eighteenth Usenix Security Symposium, August 2009.
[6] Z. Wang and X. Jiang, “Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity,” vol. 0. Los Alamitos, CA, USA: IEEE Computer Society, 2010.
[7] D. P. Bovet and M. Cesati, Understanding the LINUX Kernel, 2nd ed. Sebastopol, CA: O’Reilly, 2003.
[8] M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarterman, The Design and Implementation of the 4.4 BSD Operating System. Redwood City, CA: Addison-Wesley Publishing Company, Inc., 1996.
[9] B. Zeng, G. Tan, and U. Erlingsson, “Strato: a retargetable framework for low-level inlined-reference monitors,” in Proceedings of the 22nd USENIX conference on Security, ser. SEC’13. Berkeley, CA, USA: USENIX Association, 2013, pp. 369–382.
[10] M. Zhang and R. Sekar, “Control flow integrity for COTS binaries,” in Proceedings of the 22nd USENIX conference on Security, ser. SEC’13. Berkeley, CA, USA: USENIX Association, 2013, pp. 337–352.
[11] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis, “kGuard: lightweight kernel protection against returntouser attacks,” in Proceedings of the 21st USENIX conference on Security symposium. Berkeley, CA, USA: USENIX Association, 2012.
[12] J. Criswell, A. Lenharth, D. Dhurjati, and V. Adve, “Secure Virtual Architecture: A Safe Execution Environment for Commodity Operating Systems,” in Proc. ACM SIGOPS Symp. on Op. Sys. Principles, Stevenson, WA, USA, October 2007.
[13] C. Lattner, A. D. Lenharth, and V. S. Adve, “Making context-sensitive points-to analysis with heap cloning practical for the real world,” in ACM SIGPLAN Conference on Programming Language Design and Implementation, San Diego, CA, USA, June 2007, pp. 278–289.
[14] J. Salwan and A. Wirth. [Online]. Available: http://shell-storm.org/project/ROPgadget
[15] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer, “Non-control-data attacks are realistic threats,” in 14th USENIX Security Symposium, August 2004, pp. 177–192.
[16] W. A. Arbaugh, D. J. Farber, and J. M. Smith, “A secure and reliable bootstrap architecture,” in Security and Privacy, 1997. Proceedings., 1997 IEEE Symposium on. IEEE, 1997, pp. 65–71.
[17] I. Unified EFI, “Unified extensible firmware interface specification: Version 2.2d,” November 2010.
[18] B. Zeng, G. Tan, and G. Morrisett, “Combining control-flow integrity and static analysis for efficient and validated data sandboxing,” in Proceedings of the 18th ACM conference on Computer and communications security, ser. CCS ’11. New York, NY, USA: ACM, 2011, pp. 29–40.
[19] J. Criswell, B. Monroe, and V. Adve, “A virtual instruction set interface for operating system kernels,” in Workshop on the Interaction between Operating Systems and Computer Architecture, Boston, MA, USA, June 2006, pp. 26–33.
[20] C. Lattner and V. Adve, “LLVM: A compilation framework for lifelong program analysis and transformation,” in Proc. Conf. on Code Generation and Optimization, San Jose, CA, USA, Mar 2004, pp. 75–88.
[21] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, “Efficient software-based fault isolation,” in Proceedings of the Fourteenth ACM Symposium on Operating Systems Principles, ser. SOSP ’93. New York, NY, USA: ACM, 1993.
[22] The Coq Development Team, “The Coq proof assistant reference manual (version 8.3),” 2010, http://coq.inria.fr/refman/index.html.
[23] D. A. Wheeler, “SLOCCount,” 2014. [Online]. Available: http://www.dwheeler.com/sloccount/
[24] Intel, “Intel 64 and IA-32 architectures software developer’s manual.” 2012, vol. 3.
[25] J. Criswell, N. Dautenhahn, and V. Adve, “Virtual Ghost: Protecting applications from hostile operating systems,” in Proceedings of the Nineteenth International Conference on Architectural Support for Programming Languages and Operating Systems, March 2014.
[26] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy, “Return-oriented programming without returns,” in Proceedings of the 17th ACM conference on Computer and communications security, ser. CCS ’10. New York, NY, USA: ACM, 2010.
[27] Postmark, “Email delivery for web apps,” July 2013. [Online]. Available: https://postmarkapp.com/
[28] L. McVoy and C. Staelin, “lmbench: portable tools for performance analysis,” in Proceedings of the 1996 annual conference on USENIX Annual Technical Conference, ser. ATEC ’96. Berkeley, CA, USA: USENIX Association, 1996, pp. 23–23. [Online]. Available: http://dl.acm.org/citation.cfm?id=1268299.1268322
[29] J. Poskanze, “thttpd - tiny/turbo/throttling http server,” 2000, http://www.acme.com/software/thttpd. [Online]. Available: http://www.acme.com/software/thttpd
[30] Apachebench: A complete benchmarking and regression testing suite. http://freshmeat.net/projects/apachebench/, July 2003.
[31] T. O. Project, “OpenSSH,” 2006, http://www.openssh.com. [Online]. Available: http://www.openssh.com
[32] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables,” in Security and Privacy (SP), 2013 IEEE Symposium on, 2013, pp. 559–573.
[33] G. Morrisett, G. Tan, J. Tassarotti, J.-B. Tristan, and E. Gan, “RockSalt: better, faster, stronger SFI for the x86,” in Proceedings of the 33rd ACM SIGPLAN conference on Programming Language Design and Implementation, ser. PLDI ’12. New York, NY, USA: ACM, 2012, pp. 395–404.
[34] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar, “Native client: a sandbox for portable, untrusted x86 native code,” Commun. ACM, vol. 53, no. 1, pp. 91–99, Jan. 2010.
[35] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals, M. Harren, G. Necula, and E. Brewer, “SafeDrive: Safe and recoverable extensions using language-based techniques,” in USENIX Symposium on Operating System Design and Implementation, Seattle, WA, USA, November 2006, pp. 45–60.
[36] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, “Enhanced operating system security through efficient and fine-grained address space randomization,” in Proceedings of the 21st USENIX conference on Security symposium, ser. Security’12. Berkeley, CA, USA: USENIX Association, 2012.
[37] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes,” in Proceedings of Twenty-first ACM SIGOPS Symposium on Operating Systems Principles, ser. SOSP ’07. New York, NY, USA: ACM, 2007.
[38] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram, “Defeating return-oriented rootkits with ‘return-less’ kernels,” in Proceedings of the 5th European conference on Computer systems, ser. EuroSys ’10. New York, NY, USA: ACM, 2010.
[39] G. Klein et al., “seL4: formal verification of an OS kernel,” in Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles, ser. SOSP ’09. New York, NY, USA: ACM, 2009.
[40] B. Bershad, S. Savage, P. Pardyak, E. G. Sirer, D. Becker, M. Fiuczynski, C. Chambers, and S. Eggers, “Extensibility, Safety and Performance in the SPIN Operating System,” in Proc. ACM SIGOPS Symp. on Op. Sys. Principles, Copper Mountain, CO, USA, 1995.
[41] T. Saulpaugh and C. Mirho, Inside the JavaOS Operating System. Reading, MA, USA: Addison-Wesley, 1999.
[42] C. Hawblitzel, C.-C. Chang, G. Czajkowski, D. Hu, and T. von Eicken, “Implementing multiple protection domains in Java,” in USENIX Annual Technical Conference, Jun. 1998.
[43] M. Golm, M. Felser, C. Wawersich, and J. Kleinoder, “The JX Operating System,” in Proc. USENIX Annual Technical Conference, Monterey, CA, USA, June 2002, pp. 45–58.
[44] J. Yang and C. Hawblitzel, “Safe to the last instruction: automated verification of a type-safe operating system,” in Proceedings of the 2010 ACM SIGPLAN conference on Programming language design and implementation, ser. PLDI ’10. New York, NY, USA: ACM, 2010.