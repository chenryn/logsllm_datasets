**译者：知道创宇404实验室翻译组**
**原文链接：**

### 前言
在过去三个月中，勒索软件的攻击频率上升了50%。在一系列高调的攻击事件后，Ryuk勒索软件引起了广泛关注。据报道，上个月Ryuk针对UHS医院网络发起了大规模攻击，影响范围遍及美国各地的UHS医疗设施。此次攻击导致许多医院工作人员无法正常使用实验室、放射检查和患者记录系统，迫使他们不得不依赖纸笔来对患者进行分类处理。目前，Ryuk每周平均攻击约20个组织，并且这一数字可能还会继续增加。

Ryuk利用了TrickBot和Emotet等其他恶意工具，迅速响应并利用如Zerologon这样的新暴露漏洞。自出现以来，Ryuk不断迭代以逃避检测，显著提高了从执行到完成加密所需的时间，这使得防御工作变得愈加困难。

本文将介绍自2018年以来Ryuk的发展历程，并探讨其加密速度和规避技术的改进。我们还将详细介绍一种方法，该方法可以用于从内存中提取Ryuk可执行文件并将其转储到文件中以便进一步分析。

### 概述
当Ryuk首次出现时，人们最初认为它是由开发Hermes勒索软件的同一攻击者所创建。后来发现，Hermes在黑市上被出售，而购买者将其改造成我们现在熟知的Ryuk。

当前的攻击通常结合使用Emotet、Trickbot以及Ryuk。最近几周，观察到Ryuk背后的攻击者利用Zerologon漏洞来扩大他们的影响力和有效载荷。尽管Ryuk的有效载荷并不直接包含Zerologon功能，但该漏洞在攻击链的早期阶段被利用。攻击者可以通过Cobalt Strike等框架中的现有功能实现权限提升。预计不久之后，Zerologon将成为攻击者工具集中的重要组成部分。

### Ryuk 2018 - 2020
比较早期版本与最新版本的Ryuk，我们可以注意到一些有趣的变化。在最新版本中，Ryuk混淆了其硬编码字符串，使得反病毒供应商更难以检测：
- **图1**: Ryuk 2018 vs 2020

此外，Ryuk通过自我复制来提高加密速度，我们将在下文中详细讨论这一点。勒索软件使用RSA和AES加密扩展名为`.ryk`的文件，为每个加密文件创建一个新线程。Ryuk还使用了`CryptGenRandom` API，该API生成随机字节填充缓冲区以生成数据加密密钥。
- **图2**: 随机生成字节

早期的Ryuk二进制文件与最近的示例之间的一个显著区别是完全加密本地磁盘所需的时间。2018年的版本需要将近一个小时才能完成加密，而2020年版本只需不到10分钟。
- **图3**: 2018 Ryuk慢速加密

这种加速给企业安全带来了额外的压力。由于反应时间有限，在重大破坏发生前，许多组织无法及时检测、缓解或根除Ryuk。例如，在UHS网络中发生的攻击就要求医院工作人员立即关闭计算机系统，以防止更多机器受到感染。

### Ryuk 2020
此特定的Ryuk样本（f8bc1638ec3b04412f708233e8586e1d91f18f6715d68cba1a491d4a7f457da0）具有已签名的数字证书，但该证书已被其颁发者明确吊销。
- **序列号**: 0a 1d c9 9e 4d 52 64 c4 5a 50 90 f9 32 42 a3 0a
- **主题**: CN = K & D KOMPANI d.o.o
- **图4**: 证书吊销

当Ryuk开始执行时，它会复制自身并将副本转储到同一目录中，副本名称由随机生成的8个字符组成，但总是以“…lan.exe”结尾。这些重复文件有助于启动多个线程。Ryuk使用硬编码字符串列表搜索并停止特定进程（图1），然后尝试将自身注入其他进程中。
- **图5**: Droppers

接下来，Ryuk执行某些命令行工具以达到破坏效果。它试图通过`cmd.exe /c 'WMIC.exe shadowcopy delete'`阻止用户恢复。随后运行`cmd.exe /c 'vssadmin.exe Shadows /all /quiet'`和`cmd.exe /c 'bcdedit /set {default} recoveryenabled No & bcdedit /set {default}'`。
- **图6**: 未停止的服务

在Windows WoW目录中创建了一个icacs .exe，赋予系统驱动器上的完整权限，使Ryuk能够加密所有驱动器。
- **图7-1**: 授予权限
- **图7-2**: 授予icacls权限

### 从内存中提取可执行文件
为了避免被发现，恶意软件采用了各种逃避技术，如自我注入。Ryuk通过分配内存来写入PE文件，并调用`VirtualProtect`更改节的执行权限。

从内存中快速提取可执行文件的一种方法是在调试器中运行二进制文件并在分配的内存位置设置断点。为此，我们使用x32dbg并在VirtualAlloc上设置断点。需要注意的是，在为`VirtualAlloc`设置断点时，应按照jmp例程进入Kernelbase，获取新分配区域的基址，并在返回时设置断点。调试器运行后，将命中断点。按照EAX寄存器到内存转储部分查看MZ是否存在。
- **图8**: 转储二进制文件

当进程运行时，它将到达`VirtualAlloc`断点，EAX中是新分配的虚拟内存部分，开始将其自身的副本加载到此部分。在EAX到内存转储之后，显示内存已被分配用于加载。继续该过程时，dump窗口在到达多次设置的断点时开始填充数据。一旦确认二进制文件已完全加载到此部分，就可以转储二进制数据以供检查。
- **图9**: 将内存转储到文件

下一步是右键单击内存转储并在内存映射中跟踪转储。这样可以看到转储在内存中的分配位置，然后可以从这里将内存转储到文件中。但是，如图9所示，注意转储内存没有有效的PE头文件。我们必须修改头部，以便PE（图10）可以在您选择的工具中工作。
- **图10**: 修复Headers

这个特殊的二进制文件很容易修改。打开你最喜欢的Hex编辑器，加载文件，高亮显示MZ之前的所有内容并删除它。如果内存块损坏了magic字节，那么仅删除多余的字节可能不起作用。在这种情况下，您可以复制一个已知良好的header，并将其添加到损坏的PE标头中，以生成有效的PE。
- **图11**: 三个内存转储文件

如果从一开始就遵循该过程，则断点将额外命中VirtualAlloc。我用上面显示的技术转储了内存，以说明为什么Ryuk在系统上的加密速度如此之快。
- **图12**: Ryuk 2020的速度

### 结论
联邦调查局表示，Ryuk勒索软件的攻击者已经获得了超过6100万美元的收益。随着Ryuk攻击导致越来越多的组织瘫痪，这一数字很快将超过1亿美元。

这些攻击者使用的技术相对简单且易于理解。他们利用的是组织无法迅速发现和补救的弱点，但这[是可以解决的问题](https://www.sentinelone.com/blog/behavioral-ai-an-unbounded-approach-to-protecting-the-enterprise/)。因此，我们可以采用适当的[保护措施](https://www.sentinelone.com/platform/)来防范勒索软件。

在SentinelOne，我们持续跟踪不断变化的Ryuk变种，以了解这个勒索软件家族添加的最新功能。在这篇文章中，我们详细介绍了Ryuk是如何提高加密速度的，以及它使用的逃避方法。在以后的文章中，我们将介绍Ryuk的网络层以及在分析过程中收集到的其他信息。

### 样本
- **SHA256**: f8bc1638ec3b04412f708233e8586e1d91f18f6715d68cba1a491d4a7f457da0
- **SHA1**: c3fa91438850c88c81c0712204a273e382d8fa7b
- **SHA256**: 7e28426e89e79e20a6d9b1913ca323f112868e597fcaf6b9e073102e73407b47
- **SHA1**: 5767653494d05b3f3f38f1662a63335d09ae6489

### MITRE ATT&CK
- **命令和脚本解释器**: [T1059](https://attack.mitre.org/techniques/T1059/)
- **原生API**: [T1106](https://attack.mitre.org/techniques/T1106/)
- **应用程序垫片**: [T1546.011](https://attack.mitre.org/techniques/T1546/011/)
- **进程注入**: [T1055](https://attack.mitre.org/techniques/T1055/)
- **伪装**: [T1036](https://attack.mitre.org/techniques/T1036/)
- **虚拟化/沙箱逃避**: [T1497.001](https://attack.mitre.org/techniques/T1497/001/)
- **解混淆/解码文件**: [T1140](https://attack.mitre.org/techniques/T1140/)
- **混淆文件或信息**: [T1027](https://attack.mitre.org/techniques/T1027/)
- **系统时间发现**: [T1124](https://attack.mitre.org/techniques/T1124/)
- **安全软件发现**: [T1518.001](https://attack.mitre.org/techniques/T1518/001/)
- **进程发现**: [T1057](https://attack.mitre.org/techniques/T1057/)
- **文件和目录发现**: [T1083](https://attack.mitre.org/techniques/T1083/)
- **系统信息发现**: [T1082](https://attack.mitre.org/techniques/T1082/)
- **归档收集的数据**: [T1560](https://attack.mitre.org/techniques/T1560/)
- **加密通道**: [T1573](https://attack.mitre.org/techniques/T1573/)