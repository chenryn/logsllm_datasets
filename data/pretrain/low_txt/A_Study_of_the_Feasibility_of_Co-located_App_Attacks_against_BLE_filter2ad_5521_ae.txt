### Figure 7: Presence of Application-Layer Security in Different Categories of Applications

Figure 7 illustrates the presence of application-layer security across various categories of applications, averaged over BLE reads and writes, and broken down by confidence level. Only unique packages have been considered, and APKs that are not currently available on Google Play have been excluded, as their category cannot be identified.

### DFU Mode Exploitation

DFU (Device Firmware Upgrade) mode does not require the firmware to be signed. To exploit this, we developed an APK that, in accordance with the attacks described in Section 3.1, connects to the device, sends commands to place it in DFU mode, and then writes a new modified firmware to the device without user intervention. The updated firmware in this case was a simple, innocuous modification of the original firmware. However, if the device is configured to receive notifications from other applications, a malicious firmware could route all notifications (including second-factor authentication SMS messages or end-to-end encrypted messages) to the malicious application that installed the firmware.

This attack was possible because the BLE peripheral did not verify the firmware (e.g., via digital signatures) nor the source application (via application-layer security). We informed the application developer of the issue on November 2, 2018, but received no response as of the date of submission of this manuscript (May 18, 2019).

While our attack was crafted for a specific device, it demonstrates that attacks against these types of devices are relatively easy. An attacker could easily embed several firmware images within a single mobile application to target a range of vulnerable devices.

### 4.7 Limitations

In this section, we outline some limitations, either in our script or due to the inherent nature of our experiments, that may have impacted our results.

#### 4.7.1 Unhandled Data Transfer Mechanisms

As mentioned in Section 4.4, BLECryptracer does not analyze data written to files (including shared preferences) or communicated to different applications, as it is not straightforward (and often impossible) to determine how data will be handled once it has been transferred out of the application under analysis. It is also possible that an application obtains the data to be written to a BLE device from, or forwards the data read from a BLE device to, another entity, such as a remote server. In this case, the Android application acts as a "shuttle" for the data, meaning that an analysis of the APK would not show evidence of usage of cryptography libraries. However, the transfer of data to/from a remote server does not in itself indicate cryptographically-processed data, as plain-text values can also be transmitted in the same manner. Therefore, we do not analyze instances of data transfers to external entities.

BLECryptracer also does not handle data transfers between a source and sink when only one of them is processed within a Looper function or when the data is transmitted via messages. When logging instances where such functions were called during a trace, we found that a large percentage of APKs utilizing these data transfer mechanisms were identified as having cryptographic protection via other data flows. Specifically, of the 8,834 APKs where cryptography was not identified with BLE writes, only 501 APKs interacted with Looper or Messenger, and an even smaller percentage were affected for BLE reads.

#### 4.7.2 Conditional Statements with Backtracing

When backtracing a register, BLECryptracer stops when it encounters a constant value assignment. However, this value assignment might occur within one branch of a conditional jump, meaning another possible value could be contained in another branch further up the instruction list. To identify this, the script would need to first trace forward within the instruction list, identify all possible conditional jumps, and then trace back from the register of interest for all branches. This would need to be performed for every method analyzed and could result in a much longer processing time per APK file, as well as potentially unnecessary overheads.

### 5 Related Work

User privacy has received significant attention in the BLE research community, particularly for widely-used BLE devices like fitness trackers and continuous glucose monitors, which are intended to be always on the user's person, potentially leaking information about the user's whereabouts. Some research has focused on threats to privacy based on user location tracking [15, 19], while others have explored the possibility of obtaining personal user data from fitness applications or devices [14, 28].

While our research is concerned with data access and user privacy, we focus more on the impact on privacy and security due to how the BLE standard has been implemented in mobile device architectures and how it is applied by application developers, rather than individual BLE firmware design.

The work most closely related to ours is the research by Naveed et al., which explored the implications of shared communication channels on Android devices [31]. They discussed the issue of Classic Bluetooth and NFC channels being shared by multiple applications on the same device and demonstrated unauthorized data access attacks against (Classic) Bluetooth-enabled medical devices. They also analyzed 68 Bluetooth-enabled applications handling private user data and concluded that the majority offered no protection against such attacks. Finally, they proposed an operating-system-level control for mitigating the attack.

Our work specifically targets pairing-protected characteristics on BLE devices, as BLE is gradually replacing Classic Bluetooth in the personal health and home security domains. We demonstrate that the BLE data format and access mechanisms enable even easier attacks than in the case of Classic Bluetooth. We also identify the impact of the new Android permissions model (introduced in Android v6) on the user experience and malicious applications' capabilities. Additionally, we perform a large-scale analysis over 18,900+ Android applications to determine the prevalence of application-layer security among BLE-enabled applications.

### 6 Conclusions

In this paper, we analyze the risks posed to data on Bluetooth Low Energy devices from co-located Android applications. We show the conditions under which an unauthorized Android application could access potentially sensitive, pairing-protected data from a BLE peripheral, once a co-located authorized application has paired and bonded with a BLE peripheral, without the user being aware of the access. We also show that, in some cases, an unauthorized application may be able to access such protected data with fewer permissions required than would be required of an authorized application. We then discuss mitigation strategies in terms of the different stakeholders in the BLE ecosystem.

We present BLECryptracer, an analysis tool for determining the presence of application-layer security with BLE data. We evaluate it against the taint-analysis tool Amandroid and present the results from executing BLECryptracer against 18,929 BLE-enabled Android APKs. Our results suggest that over 45% of all applications, and about 70% of "Medical" applications, do not implement cryptography-based application-layer security for BLE data. Among the applications that do use cryptographically processed BLE data, we found several instances of cryptography misuse, such as the use of insecure cipher modes and hard-coded key values. We believe that if this situation does not change, the amount of private or critical data vulnerable to unauthorized access will increase as more sensitive use cases are proposed for BLE. We hope that our work increases awareness of this issue and prompts changes by application developers and operating system vendors to improve the protection of BLE data.

### 7 Availability

The code for our BLECryptracer tool is available at:
- [GitHub Repository](https://github.com/projectbtle/BLECryptracer)

This repository also contains the SHA256 hashes of the APKs in our dataset, the source/sink files used for the Amandroid analysis, the source code for the benchmarking applications, and a comprehensive breakdown of the results per DroidBench category.

### 8 Acknowledgements

This research has been partially sponsored by the Engineering and Physical Sciences Research Council (EPSRC) and the UK government as part of the Centre for Doctoral Training in Cyber Security at Royal Holloway, University of London (EP/P009301/1).

### References

[1] ALLIX, K., BISSYANDÉ, T. F., KLEIN, J., AND LE TRAON, Y. Androzoo: Collecting millions of Android apps for the research community. In Proceedings of the 13th International Conference on Mining Software Repositories (2016), ACM, pp. 468–471.

[2] ANDROID. Distribution dashboard. [Online]. Available: https://developer.android.com/about/dashboards/. [Accessed: August 6, 2018].

[4] ANDROID. Security tips, June 2018. [Online]. Available: https://developer.android.com/training/articles/security-tips. [Accessed: July 18, 2018].

[5] ANDROID. Security updates and resources, 2018. [Online]. Available: https://source.android.com/security/overview/updates-resources#severity. [Accessed: May 18, 2019].

[6] ARM LTD. Firmware Over the Air, 2016. [Online]. Available: https://docs.mbed.com/docs/ble-intros/en/master/Advanced/FOTA/. [Accessed: July 21, 2018].

[7] ARZT, S., RASTHOFER, S., FRITZ, C., BODDEN, E., BARTEL, A., KLEIN, J., LE TRAON, Y., OCTEAU, D., AND MCDANIEL, P. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. Acm Sigplan Notices 49, 6 (2014), 259–269.

[8] BISIO, I., SCIARRONE, A., AND ZAPPATORE, S. A new asset tracking architecture integrating RFID, Bluetooth Low Energy tags and ad hoc smartphone applications. Pervasive and Mobile Computing 31 (2016), 79–93.

[9] BLUETOOTH SPECIAL INTEREST GROUP. Heart Rate Profile: Bluetooth profile specification v1.0, July 2011.

[10] BLUETOOTH SPECIAL INTEREST GROUP. Continuous