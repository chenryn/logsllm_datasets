### Table III Analysis

The results in Table III are similarly clear. DREAM produces goto-free and compact code. As evident in the Zeus sample, Hex-Rays generates 1,571 goto statements. These goto statements significantly complicate and prolong the analysis of malware. While further research is needed to determine if compactness is always advantageous, the complete elimination of goto statements in decompiled code represents a significant advancement and has already proven beneficial in our malware analysis work.

Due to space limitations, we cannot present a detailed comparison of the decompiled malware source code in this paper. For this reason, we have created a supplementary document, accessible at the following URL: [https://net.cs.uni-bonn.de/fileadmin/ag/martini/Staff/yakdan/code_snippets_ndss_2015.pdf](https://net.cs.uni-bonn.de/fileadmin/ag/martini/Staff/yakdan/code_snippets_ndss_2015.pdf). This document includes selected listings of malware functions, allowing readers to personally assess the readability improvements offered by DREAM compared to Hex-Rays.

### Related Work

Significant research has been conducted in the field of decompilation and abstraction recovery from binary code. In this section, we review related work and contextualize DREAM within existing approaches. We begin with control-flow structuring algorithms, followed by decompilation, binary code extraction, and type abstraction recovery techniques.

#### Control-Flow Structuring

Modern decompilers use two primary approaches to recover control-flow structure from the Control Flow Graph (CFG): interval analysis and structural analysis. Initially developed for data flow analysis in optimizing compilers, these techniques have been adapted for decompilation.

- **Interval Analysis**: Interval analysis [3, 13] decomposes the CFG into nested regions called intervals, which facilitate faster data-flow analysis.
- **Structural Analysis**: Structural analysis [34] is a refined form of interval analysis, designed to enable syntax-directed data-flow analysis on low-level intermediate code.

Prior work on control-flow structuring has proposed several enhancements, such as Engel et al.'s [18] extension of structural analysis to handle C-specific control statements, including a Single Entry Single Successor (SESS) analysis for loop bodies.

These approaches rely on predefined region patterns, limiting their ability to structure arbitrary graphs without using goto statements. In contrast, DREAM does not depend on such patterns, enabling it to produce well-structured code without any goto statements.

#### Elimination of Goto Statements

Other research focuses on eliminating goto statements at the source code level [19, 39]. These methods define transformations at the Abstract Syntax Tree (AST) level to replace goto statements with equivalent constructs. However, these approaches often increase code size and miss opportunities to find more concise forms, sometimes inserting unnecessary Boolean variables. DREAM, on the other hand, finds more concise forms, as demonstrated in our running example.

#### Decompilers

Cifuentes laid the foundation for modern decompilers in her PhD thesis [11], presenting techniques implemented in dcc, a decompiler for Intel 80286/DOS to C. The structuring algorithm in dcc [12] is based on interval analysis.

- **Boomerang**: Van Emmerik's Boomerang [17] uses Static Single Assignment (SSA) form, demonstrating its advantages for data flow components such as expression propagation and dead code elimination.
- **Hex-Rays**: The industry-standard Hex-Rays decompiler, a plugin for IDA Pro, uses structural analysis [22] and appears to employ an improved version of vanilla structural analysis [33].
- **REcompile**: Yakdan et al. [40] developed REcompile, which uses interval analysis and node splitting to reduce goto statements, though this increases the size of the decompiled output.
- **Phoenix**: Phoenix [33], built on the CMU Binary Analysis Platform (BAP), enhances structural analysis with iterative refinement and semantics-preserving techniques.

All these structuring algorithms rely on pattern matching, which limits their effectiveness on arbitrary CFGs. DREAM, however, does not rely on such patterns, producing well-structured code without goto statements.

#### Binary Code Extraction

Accurate binary code extraction is crucial for correct decompilation. Notable works include:

- **Kruegel et al.** [27]: A method for disassembling x86 obfuscated code.
- **Jakstab** [26]: An iterative disassembly framework for accurate and complete CFG extraction.
- **Trace-Oriented Programming (TOP)** [43]: Reconstructs program source code from execution traces, combining multiple runs for high coverage.
- **BitBlaze** [37] and **BAP** [8]: Platforms for binary analysis, with BAP being the successor to BitBlaze.

#### Type Recovery

Reconstructing type abstractions from binary code is essential for high-quality decompilation. Prominent approaches include Howard [36], REWARDS [30], TIE [29], and others focused on C++-specific issues [15, 20, 21, 25]. Our work does not contribute to type recovery but uses TIE [29] for this purpose.

### Conclusion

In this paper, we presented DREAM, the first control-flow structuring algorithm capable of recovering all control structures without generating any goto statements. DREAM combines pattern-independent structuring and semantics-preserving transformations, making it unique in its approach. We implemented DREAM and evaluated its correctness and performance against Hex-Rays and Phoenix. Our evaluation shows that DREAM outperforms both, producing more compact and goto-free code. We also analyzed real-world malware samples, finding that DREAM produced more readable and compact code compared to Hex-Rays, which used one goto statement for every 32 lines of code. Future work will focus on further examining the quality of the code produced by DREAM, particularly concerning compactness.

### Acknowledgements

We thank Fabian Yamaguchi for his contributions to improving the parsing of coreutils, Edward J. Schwartz for sharing the Phoenix experiment results, and the anonymous reviewers for their valuable feedback.

### References

[1] REC Studio 4 - Reverse Engineering Compiler. <http://www.backerstreet.com/rec/rec.htm>. Page checked 7/20/2014.
[2] The IDA Pro disassembler and debugger. <http://www.hex-rays.com/idapro/>.
[3] F. E. Allen, “Control Flow Analysis,” in Proceedings of ACM Symposium on Compiler Optimization, 1970.
[4] D. Andriesse, C. Rossow, B. Stone-Gross, D. Plohmann, and H. Bos, “Highly Resilient Peer-to-Peer Botnets Are Here: An Analysis of Gameover Zeus,” in Proceedings of the 8th IEEE International Conference on Malicious and Unwanted Software (MALWARE), 2013.
[5] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri-Gros, A. Kamsky, S. McPeak, and D. Engler, “A Few Billion Lines of Code Later: Using Static Analysis to Find Bugs in the Real World,” Communications of the ACM, vol. 53, no. 2, pp. 66–75, Feb. 2010.
[6] E. Bosman, A. Slowinska, and H. Bos, “Minemu: The World’s Fastest Taint Tracker,” in Proceedings of the 14th International Conference on Recent Advances in Intrusion Detection (RAID), 2011.
[7] D. Brumley, T. Chiueh, R. Johnson, H. Lin, and D. Song, “RICH: Automatically Protecting Against Integer-Based Vulnerabilities,” in Proceedings of the 14th Network and Distributed System Security Symposium (NDSS), 2007.
[8] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A Binary Analysis Platform,” in Proceedings of the 23rd International Conference on Computer Aided Verification (CAV), 2011.
[9] B.-Y. E. Chang, M. Harren, and G. C. Necula, “Analysis of Low-level Code Using Cooperating Decompilers,” in Proceedings of the 13th International Conference on Static Analysis (SAS), 2006.
[10] W. Chang, B. Streiff, and C. Lin, “Efficient and Extensible Security Enforcement Using Dynamic Data Flow Analysis,” in Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS), 2008.
[11] C. Cifuentes, “Reverse Compilation Techniques,” Ph.D. dissertation, Queensland University of Technology, 1994.
[12] ——, “Structuring Decompiled Graphs,” in Proceedings of the 6th International Conference on Compiler Construction (CC), 1996.
[13] J. Cocke, “Global Common Subexpression Elimination,” in Proceedings of the ACM Symposium on Compiler Optimization, 1970.
[14] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction to Algorithms, 3rd ed. The MIT Press, 2009.
[15] D. Dewey and J. T. Griffin, “Static detection of C++ vtable escape vulnerabilities in binary code,” in Proceedings of the 19th Network and Distributed System Security Symposium (NDSS), 2012.
[16] E. W. Dijkstra, “Letters to the Editor: Go to Statement Considered Harmful,” Communications of the ACM, vol. 11, no. 3, pp. 147–148, Mar. 1968.
[17] M. J. V. Emmerik, “Static Single Assignment for Decompilation,” Ph.D. dissertation, University of Queensland, 2007.
[18] F. Engel, R. Leupers, G. Ascheid, M. Ferger, and M. Beemster, “Enhanced Structural Analysis for C Code Reconstruction from IR Code,” in Proceedings of the 14th International Workshop on Software and Compilers for Embedded Systems (SCOPES), 2011.
[19] A. Erosa and L. J. Hendren, “Taming Control Flow: A Structured Approach to Eliminating Goto Statements,” in Proceedings of 1994 IEEE International Conference on Computer Languages, 1994.
[20] A. Fokin, E. Derevenetc, A. Chernov, and K. Troshina, “SmartDec: Approaching C++ Decompilation,” in Proceedings of the 2011 18th Working Conference on Reverse Engineering (WCRE), 2011.
[21] A. Fokin, K. Troshina, and A. Chernov, “Reconstruction of Class Hierarchies for Decompilation of C++ Programs,” in Proceedings of the 14th European Conference on Software Maintenance and Reengineering (CSMR), 2010.
[22] I. Guilfanov, “Decompilers and Beyond,” in Black Hat, USA, 2008.
[23] I. Haller, A. Slowinska, and H. Bos, “MemPick: High-Level Data Structure Detection in C/C++ Binaries,” in Proceedings of the 20th Working Conference on Reverse Engineering (WCRE), 2013.
[24] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations,” in Proceedings of the 22nd USENIX Security Symposium, 2013.
[25] W. Jin, C. Cohen, J. Gennari, C. Hines, S. Chaki, A. Gurfinkel, J. Havrilla, and P. Narasimhan, “Recovering C++ Objects From Binaries Using Inter-Procedural Data-Flow Analysis,” in Proceedings of ACM SIGPLAN on Program Protection and Reverse Engineering Workshop (PPREW), 2014.
[26] J. Kinder and H. Veith, “Jakstab: A Static Analysis Platform for Binaries,” in Proceedings of the 20th International Conference on Computer Aided Verification (CAV), 2008.
[27] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna, “Static Disassembly of Obfuscated Binaries,” in Proceedings of the 13th Conference on USENIX Security Symposium, 2004.
[28] S. Kumar. DISC: Decompiler for TurboC. <http://www.debugmode.com/dcompile/disc.htm>. Page checked 7/20/2014.
[29] J. Lee, T. Avgerinos, and D. Brumley, “TIE: Principled Reverse Engineering of Types in Binary Programs,” in Proceedings of the 18th Network and Distributed System Security Symposium (NDSS), 2011.
[30] Z. Lin, X. Zhang, and D. Xu, “Automatic Reverse Engineering of Data Structures from Binary Execution,” in Proceedings of the 17th Annual Network and Distributed System Security Symposium (NDSS), 2010.
[31] S. S. Muchnick, Advanced Compiler Design and Implementation. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 1997.
[32] C. Rossow, D. Andriesse, T. Werner, B. Stone-Gross, D. Plohmann, C. J. Dietrich, and H. Bos, “P2PWNED: Modeling and Evaluating the Resilience of Peer-to-Peer Botnets,” in Proceedings of the 34th IEEE Symposium on Security and Privacy (S&P), 2013.
[33] E. J. Schwartz, J. Lee, M. Woo, and D. Brumley, “Native x86 Decompilation using Semantics-Preserving Structural Analysis and Iterative Control-Flow Structuring,” in Proceedings of the 22nd USENIX Security Symposium, 2013.
[34] M. Sharir, “Structural Analysis: A New Approach to Flow Analysis in Optimizing Compilers,” Computer Languages, vol. 5, no. 3-4, pp. 141–153, Jan. 1980.
[35] D. Simon, “Structuring Assembly Programs,” Honours thesis, University of Queensland, 1997.
[36] A. Slowinska, T. Stancescu, and H. Bos, “Howard: A Dynamic Excavator for Reverse Engineering Data Structures,” in Proceedings of the 18th Annual Network and Distributed System Security Symposium (NDSS), 2011.
[37] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A New Approach to Computer Security via Binary Analysis,” in Proceedings of the 4th International Conference on Information Systems Security (ICISS), 2008.
[38] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek, “Improving Integer Security for Systems with KINT,” in Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation (OSDI), 2012.
[39] M. H. Williams and G. Chen, “Restructuring Pascal Programs Containing Goto Statements,” The Computer Journal, 1985.
[40] K. Yakdan, S. Eschweiler, and E. Gerhards-Padilla, “REcompile: A Decompilation Framework for Static Analysis of Binaries,” in Proceedings of the 8th IEEE International Conference on Malicious and Unwanted Software (MALWARE), 2013.
[41] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck, “Modeling and Discovering Vulnerabilities with Code Property Graphs,” in Proceedings of the 35th IEEE Symposium on Security and Privacy (S&P), 2014.
[42] F. Yamaguchi, C. Wressnegger, H. Gascon, and K. Rieck, “Chucky: Exposing Missing Checks in Source Code for Vulnerability Discovery,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), 2013.
[43] J. Zeng, Y. Fu, K. A. Miller, Z. Lin, X. Zhang, and D. Xu, “Obfuscation Resilient Binary Code Reuse Through Trace-oriented Programming,” in Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), 2013.