# Smart Fuzzing the Web: Carpe Vestra Foramina
## Presentation Date: Friday, June 24, 2011

### Disclaimer
- **Outdated Content**: This presentation is no longer up-to-date. Please visit our Google Code page for the latest version.
- **Google Code Page**: [http://code.google.com/p/raft](http://code.google.com/p/raft)

### Who We Are
- **Nathan "Nate Dawg" Hamiel**
- **Gregory "G-Fresh" Fleischer**
- **Seth "The Law" Law**
- **Justin "J-Roc" Engler**

### Presentation Overview
- **Problems with Current Tools**
- **Current Workarounds**
- **Proposed Solutions**
- **RAFT (Response Analysis and Further Testing)**

### Issues with Current Testing Tools
- **Limitations of Semi-Automated Web Testing Tools**:
  - These tools can be limited in their capabilities.
  - Session data often becomes stale.
  - State maintenance is either poor or non-existent.
  - They struggle with complex applications.
  - Importing externally-collected data is not supported.

- **Modern Technologies**:
  - CSRF Tokens
  - Randomized DOM Variables
  - Rich Internet Applications (RIA)
  - Web Services
  - JavaScript/AJAX

### Ongoing Problems
- **Lack of Analysis**:
  - Responses may contain unidentifiable vulnerabilities.
  - Analysis is typically limited to the current request.
  - No vulnerability or sensitive data identification.
  
- **Abstraction and Features**:
  - APIs and complex formats are difficult to handle.
  - Missing simple features like request timing.

### Additional Challenges
- **Complex Cases**:
  - Risk-based logins
  - Login confirmation on subsequent steps
  - In-session detection

- **External Tools and Custom Scripts**:
  - Painful to use
  - Lack of analysis
  - Request/response differences
  - Syntax highlighting
  - Full request/response logging

- **Data Management**:
  - No cross-tool analysis
  - Archiving issues with collected data
  - Limited ability to find new bugs in old data

### Current Practices
- **Manual Testing**:
  - Time-consuming and error-prone
  - Modifying existing tools for unintended purposes
  - Writing custom scripts for one-off tasks
  - High risk of missing vulnerabilities
  - Results stored in custom formats across multiple files

### Adapt or Perish
- **Tool Evolution**:
  - Tools that do not adapt become obsolete.

### A Web Smart Fuzzer?
- **Key Features**:
  - **Session Management**:
    - Automated without complex user interaction
    - Shared cookie jar
  - **Sequence Building and Execution**:
    - Login sequences
    - Multi-step operations
    - Data extraction from previous pages
  - **Content Discovery**:
    - Intelligent spidering and form submission
    - Contextual content discovery
  - **Support for Modern Features**:
    - HTML5

### Components of a Web Smart Fuzzer
- **CSRF and Random Data Handling**:
  - Per-page CSRF token management
  - Handling of randomized DOM data
- **Context-Aware Payloads**:
  - Payloads based on contextual information
- **Integration and Experimentation**:
  - Tight integration of various components
  - Easy experimentation with new features

### RAFT: Response Analysis and Further Testing
- **Overview**:
  - Not an inspection proxy
  - Focus on workflow
  - Analysis for your own tools and scripts
  - Import data from other tools
- **Open Source**:
  - Written in Python and QT
  - Target Platforms:
    - Windows XP / Windows 7
    - Mac OS X 10.5 / 10.6
    - Linux Ubuntu 10.4 LTS

### RAFT Dependencies
- **Required Libraries**:
  - PyQT4
  - QtWebKit
  - QScintilla
  - lxml
  - pyamf
  - pydns

### Download RAFT
- **Source Code**:
  - Available via SVN
- **Packages**:
  - OS X
  - Windows
- **Project Page**:
  - [http://code.google.com/p/raft](http://code.google.com/p/raft)

### Analysis
- **Importance**:
  - Don't neglect analysis.
- **Features**:
  - **Analysis Anywhere**:
    - Concept for better tools
    - Analyze any data source
    - Fully integrated analyzers
  - **Modular Analyzers**:
    - Easy to add new analyzers
    - Customizable configuration, execution, and reporting
    - Analyzers can call each other
  - **Unique Capabilities**:
    - Timing analysis
    - Different responses for the same request
    - Endless possibilities

### Smart Testing Components
- **Fuzzing**:
  - Smarter handling of CSRF tokens
  - Browser object handling
  - Sequence handling

### Documentation
- **Availability**:
  - Detailed documentation on the project wiki

### RAFT Data Formatting
- **Language Integration**:
  - XML Capture Format
  - Python
  - Ruby
  - Perl
  - Java

### Future Features
- **Enhancements**:
  - More analysis capabilities
  - Integrated scanner functionality
  - Reporting output
  - Command Line Interface

### Call to Action
- **Contribute**:
  - Code contributions
  - Bug testing and reporting
  - Integration with other tools
- **Feature Requests**:
  - Suggest new features
  - Develop new features yourself
- **Advocate for Better Tools**:
  - Demand better tools from commercial vendors

### Questions?

### Contact Information
- **Nathan Hamiel**: [http://twitter.com/nathanhamiel](http://twitter.com/nathanhamiel)
- **Justin Engler**: [http://twitter.com/justinengler](http://twitter.com/justinengler)
- **Gregory Fleischer**: [PI:EMAIL](mailto:gregory.fleischer@example.com), [twitter.com/%00alert(0xL0L)](https://twitter.com/%00alert(0xL0L))
- **Seth Law**: [http://twitter.com/sethlaw](http://twitter.com/sethlaw)