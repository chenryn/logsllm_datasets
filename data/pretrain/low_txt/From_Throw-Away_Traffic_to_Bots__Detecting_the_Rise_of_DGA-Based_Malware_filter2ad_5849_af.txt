### Enhancing the Take-Down of Loosely Centralized Botnets

The take-down of loosely centralized botnets can be made more challenging. However, one could envision "hybrid" botnets that use DGA-generated domains to identify a set of peer IPs, thereby bootstrapping into a P2P-based Command and Control (C&C) infrastructure. Alternatively, the DGA-generated C&C domains may be flux domains, which are domain names that point to an IP fluxing network.

It is important to note that such sophisticated "hybrid" botnets may be quite complex to develop, difficult to deploy, and hard to manage successfully. Another potential limitation is that Pleiades, our detection system, cannot distinguish between different botnets whose bot-malware uses the same DGA algorithm. In such cases, while the two botnets may be controlled by different entities, Pleiades will attribute the compromised hosts within the monitored network to a single DGA-based botnet.

### Limitations of Our Evaluation Method

One limitation of our evaluation method is the exact enumeration of the number of infected hosts in the ISP network. Due to the location of our traffic monitoring sensors (below the recursive DNS server), we can only obtain a lower bound estimate on the number of infected hosts. This is because we have visibility of the IP addresses within the ISP that generate the DNS traffic, but lack additional information about the true number of hosts "behind" each IP. For example, an IP address generating DNS traffic may be a NAT, firewall, DNS server, or another type of complex device acting as a proxy (or relay point) for other devices. Additionally, according to the ISP, the DHCP churn rate is relatively low, making it unlikely that we counted the same internal host multiple times.

### Zeus.v3 and DGA as a Backup Mechanism

In the case of Zeus.v3, the DGA is used as a backup C&C discovery mechanism in the event that the P2P component fails to establish a communication channel with the C&C. The concept of having a DGA component as a redundant C&C discovery strategy could be adopted by other malware in the future. A large number of new DGAs may potentially have a negative impact on the supervised modules of Pleiades, particularly on the HMM-based C&C detection. Misclassification by the DGA Classifier due to the large number of classes may misguide the selection of the appropriate HMM for C&C detection, leading to an increase in false positives. In our future work, we plan to estimate the impact of such misclassifications on C&C detection accuracy and investigate whether using auxiliary IP-based information (e.g., IP reputation) can significantly improve accuracy in this scenario.

### Evasion Techniques and Noisy NXDomains

As the internals of our system become public, some botnets may attempt to evade both the DGA discovery and C&C detection processes. As previously discussed, it is in the malware authors' best interest to create a high number of DGA-related NXDomains to make botnet take-over efforts harder. However, the malware could also generate NXDomains not related to the C&C discovery mechanism to mislead our current implementation of Pleiades. These noisy NXDomains can be generated in two ways: (1) randomly, for example, by employing a different DGA, or (2) by using one DGA with two different seeds, one of which is selected to generate noise. In case (1), the probability that they will be clustered together is small, meaning these NXDomains will likely not be part of the final cluster correlation process and will not be reported as new DGA-clusters. On the other hand, case (2) might cause problems during learning, especially for the HMM, because the noisy and "true" NXDomains may be intermixed in the same cluster, making it harder to learn an accurate model for the domain names.

### Conclusion

In this paper, we presented Pleiades, a novel detection system capable of accurately detecting machines within a monitored network that are compromised with DGA-based bots. Pleiades monitors traffic below the local recursive DNS server and analyzes streams of unsuccessful DNS resolutions, rather than relying on manual reverse engineering of bot malware and their DGA algorithms. Using a multi-month evaluation phase, we demonstrated that Pleiades can achieve very high detection accuracy. Moreover, over the fifteen months of operational deployment in a major ISP, Pleiades identified six DGAs belonging to known malware families and six new DGAs never reported before.

### References

[1] K. Aas and L. Eikvil. Text categorisation: A survey., 1999.
[2] abuse.ch. ZeuS Gets More Sophisticated Using P2P Techniques. http://www.abuse.ch/?p=3499, 2011.
[3] M. Antonakakis, R. Perdisci, D. Dagon, W. Lee, and N. Feamster. Building a dynamic reputation system for DNS. In the Proceedings of 19th USENIX Security Symposium (USENIX Security ’10), 2010.
[4] M. Antonakakis, R. Perdisci, W. Lee, N. Vasiloglou, and D. Dagon. Detecting malware domains in the upper DNS hierarchy. In the Proceedings of 20th USENIX Security Symposium (USENIX Security ’11), 2011.
[5] BankPatch. Trojan.Bankpatch.C. http://www.symantec.com/security_response/writeup.jsp?docid=2008-081817-1808-99&tabid=2, 2009.
[6] L. Bilge, E. Kirda, C. Kruegel, and M. Balduzzi. EXPOSURE: Finding malicious domains using passive DNS analysis. In Proceedings of NDSS, 2011.
[7] R. Feldman and J. Sanger. The text mining handbook: advanced approaches in analyzing unstructured data. Cambridge Univ Pr, 2007.
[8] R. Finones. Virus:Win32/Expiro.Z. http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?Name=Virus%3AWin32%2FExpiro.Z, 2011.
[9] Y. Freund and L. Mason. The alternating decision tree learning algorithm. In Proceedings of the Sixteenth International Conference on Machine Learning, ICML ’99, 1999.
[10] G. Gu, P. Porras, V. Yegneswaran, M. Fong, and W. Lee. BotHunter: Detecting malware infection through IDS-driven dialog correlation. In Proc. USENIX Security, 2007.
[11] M. Geide. Another trojan bamital pattern. http://research.zscaler.com/2011/05/another-trojan-bamital-pattern.html, 2011.
[12] S. Golovanov and I. Soumenkov. TDL4 Top Bot. http://www.securelist.com/en/analysis/204792180/TDL4_Top_Bot, 2011.
[13] G. Gu, R. Perdisci, J. Zhang, and W. Lee. BotMiner: clustering analysis of network traffic for protocol- and structure-independent botnet detection. In USENIX Security, 2008.
[14] G. Gu, J. Zhang, and W. Lee. BotSniffer: Detecting botnet command and control channels in network traffic. In Network and Distributed System Security Symposium (NDSS), 2008.
[15] J. Hermans. MozillaWiki TLD List. https://wiki.mozilla.org/TLD_List, 2006.
[16] S. Krishnan and F. Monrose. DNS prefetching and its privacy implications: when good things go bad. In Proceedings of the 3rd USENIX conference on Large-scale exploits and emergent threats: botnets, spyware, worms, and more, LEET’10, pages 10–10, Berkeley, CA, USA, 2010. USENIX Association.
[17] L. I. Kuncheva. Combining Pattern Classifiers: Methods and Algorithms. Wiley-Interscience, 2004.
[18] M. H. Ligh, S. Adair, B. Hartstein, and M. Richard. Malware Analyst’s Cookbook and DVD, chapter 12. Wiley, 2010.
[19] P. Mockapetris. Domain names - concepts and facilities. http://www.ietf.org/rfc/rfc1034.txt, 1987.
[20] P. Mockapetris. Domain names - implementation and specification. http://www.ietf.org/rfc/rfc1035.txt, 1987.
[21] M. Newman. Networks: an introduction. Oxford University Press, 2010.
[22] A. Y. Ng, M. I. Jordan, and Y. Weiss. On spectral clustering: Analysis and an algorithm. In Advances In Neural Information Processing Systems, pages 849–856. MIT Press, 2001.
[23] P. Porras, H. Saidi, and V. Yegneswaran. An analysis of Conficker’s logic and rendezvous points. http://mtc.sri.com/Conficker/, 2009.
[24] D. Pelleg and A. W. Moore. X-means: Extending k-means with efficient estimation of the number of clusters. In Proceedings of the Seventeenth International Conference on Machine Learning, ICML ’00, pages 727–734, San Francisco, CA, USA, 2000. Morgan Kaufmann Publishers Inc.
[25] C. POLSKA. Mapping out ZeuS and understanding the P2P+DGA variant threat. http://www.cert.pl/news/4711/langswitch_lang/en, 2012.
[26] P. Porras. Inside risks: Reflections on Conficker. Communications of the ACM, 52:23–24, October 2009.
[27] P. Porras, H. Saidi, and V. Yegneswaran. Conficker C analysis. Technical report, SRI International, Menlo Park, CA, April 2009.
[28] L. R. Rabiner. Readings in speech recognition. Chapter: A tutorial on hidden Markov models and selected applications in speech recognition. 1990.
[29] P. Royal. Analysis of the Kraken botnet. http://www.damballa.com/downloads/r_pubs/KrakenWhitepaper.pdf, 2008.
[30] S. Shevchenko. Srizbi domain generator calculator. http://blog.threatexpert.com/2008/11/srizbis-domain-calculator.html, 2008.
[31] S. Shevchenko. Domain name generator for Murofet. http://blog.threatexpert.com/2010/10/domain-name-generator-for-murofet.html, 2010.
[32] SOPHOS. Mal/Simda-C. http://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/Mal-Simda-C/detailed-analysis.aspx, 2012.
[33] J. Stewart. Bobax trojan analysis. http://www.secureworks.com/research/threats/bobax/, 2004.
[34] B. Stone-Gross, M. Cova, L. Cavallaro, B. Gilbert, M. Szydlowski, R. Kemmerer, C. Kruegel, and G. Vigna. Your botnet is my botnet: analysis of a botnet takeover. In Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS ’09, pages 635–647, New York, NY, USA, 2009. ACM.
[35] S. Stover, D. Dittrich, J. Hernandez, and S. Dietrich. Analysis of the Storm and Nugache Trojans: P2P is here. In USENIX ;login:, vol. 32, no. 6, December 2007.
[36] T.-F. Yen and M. K. Reiter. Are your hosts trading or plotting? Telling P2P file-sharing and bots apart. In ICDCS, 2010.
[37] R. Villamarin-Salomon and J. Brustoloni. Identifying botnets using anomaly detection techniques applied to DNS traffic. In 5th Consumer Communications and Networking Conference, 2008.
[38] Wikipedia. The storm botnet. http://en.wikipedia.org/wiki/Storm_botnet, 2010.
[39] J. Williams. What we know (and learned) from the Waledac takedown. http://tinyurl.com/7apnn9b, 2010.
[40] J. Wolf. Technical details of Srizbi's domain generation algorithm. http://blog.fireeye.com/research/2008/11/technical-details-of-srizbis-domain-generation-algorithm.html, 2008. Retrieved: April 10, 2010.
[41] J. Wong. Trojan:Java/Boonana. http://www.microsoft.com/security/portal/Threat/Encyclopedia/Entry.aspx?Name=Trojan%3AJava%2FBoonana, 2011.
[42] S. Yadav, A. K. K. Reddy, A. N. Reddy, and S. Ranjan. Detecting algorithmically generated malicious domain names. In Proceedings of the 10th annual Conference on Internet Measurement, IMC ’10, pages 48–61, New York, NY, USA, 2010. ACM.
[43] S. Yadav and A. N. Reddy. Winning with DNS failures: Strategies for faster botnet detection. In 7th International ICST Conference on Security and Privacy in Communication Networks, 2011.
[44] T.-F. Yen and M. K. Reiter. Traffic aggregation for malware detection. In Proc. International conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA), 2008.
[45] B. Zdrnja. Google Chrome and (weird) DNS requests. http://isc.sans.edu/diary/Google+Chrome+and+weird+DNS+requests/10312, 2011.
[46] J. Zhang, R. Perdisci, W. Lee, U. Sarfraz, and X. Luo. Detecting stealthy P2P botnets using statistical traffic fingerprints. In Annual IEEE/IFIP International Conference on Dependable Systems and Networks - Dependable Computing and Communication Symposium, 2011.