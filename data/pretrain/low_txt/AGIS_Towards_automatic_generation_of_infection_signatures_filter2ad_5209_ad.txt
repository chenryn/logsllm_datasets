### 3.3 Performance

We measured the performance of our implementation in detecting infections and generating signatures. For MyDoom.D, infection detection took 73 seconds, and signature generation took 60 seconds. For KidLogger, infection detection took 66 seconds, and signature generation took 6 seconds. In comparison, Panorama [34] takes between 15 to 25 minutes to detect a single malware sample.

### 4. Discussion and Limitations

The current design of AGIS can be evaded by malware that penetrates the operating system (OS) kernel or those capable of countering dynamic analysis. For example, malware can check the System Service Descriptor Table (SSDT) to detect the presence of a kernel monitor and remove its executables. Additionally, an infection might deliberately delay running its malicious payload or condition the execution of malicious activities on environmental factors.

Our current implementation only monitors malware's interactions with the OS, which are observable through system calls. However, some infections manifest as add-ons to legitimate applications, and their interactions with the application do not go through the OS (e.g., spyware based on Browser Helper Objects [16]). These behaviors may slip under the radar of our current implementation. While recent research [16, 19] suggests there is no essential technical barrier to wrapping these interactions in a technology like AGIS, our current implementation does not detect such malware.

Dealing with metamorphic malware is a challenge for AGIS, which we are continuing to explore. Theoretically, it is possible to develop metamorphic malware that thoroughly modifies the way it accomplishes its mission for every infection. In practice, many malware authors build their metamorphic or polymorphic malware using mutation engines developed by third parties. As discussed in Section 2.3, AGIS is tolerant of several obfuscations common to such tools.

As discussed in Section 2.3, the AGIS implementation is limited in its ability to identify the locations of API calls made by malware that forges return addresses in its stack frames and performs these calls using indirect jumps. This problem can be mitigated through dynamic analysis. For example, we can use static analysis to identify indirect jumps and then instrument the code before them to help identify their jump targets at runtime. Dynamic slicing techniques can also be applied to extract the relevant code when obfuscations confound static analysis.

### 5. Related Work

Techniques for automatic generation of malware signatures have been extensively studied [28, 17, 14, 24, 22, 30, 23, 21, 7, 6, 8, 33, 20]. However, existing research primarily focuses on generating exploit signatures, which reflect the intrusion vectors malware uses to break into a vulnerable system. Such signatures are designed to prevent exploits, not to detect already infected systems. Infection signatures, on the other hand, are used to detect infections and complement exploit signatures.

Limited research has been conducted to automate infection signature generation. Kephart and Arnold [13] proposed the first automatic tool for generating virus signatures, which extracts prevalent byte sequences from infected files in a sandboxed environment. This method does not handle metamorphic malware well and heavily relies on the replication property of viruses. By comparison, AGIS can generate signatures for non-replicating infections and is tolerant to some forms of metamorphic malware.

Wang et al. [31] recently proposed NetSpy, a network-based technique for generating spyware signatures. NetSpy intercepts spyware's communication with spyware companies and extracts prevalent strings from its messages. In contrast, AGIS is a host-based technique that complements NetSpy with host information related to an infection's behaviors.

Kirda et al. [16, 9] proposed a behavior-based spyware detection technique that applies dynamic analysis to detect suspicious communications between an Internet Explorer (IE) browser and its Browser Helper Object (BHO) plug-ins, and then analyzes the binaries of suspicious plug-ins to identify library calls that may lead to the leakage of user inputs. Although this approach shares some similarities with AGIS, it is focused on detection rather than signature generation and specifically targets BHO-based spyware, whereas AGIS targets standalone spyware.

The taint-analysis technique used by AGIS to construct infection graphs is similar to those proposed for other purposes, such as tracking intrusion steps and recovering compromised systems. BackTracker [15] traces an intrusion back to the point it entered the system, while Process Coloring [12] is another system designed for a similar purpose. Back-to-the-Future [10] offers a system repair technique to restore an infected system using a log recording infected files and registry entries.

Panorama [34] tracks taint information flow among system objects at an instruction level for malware detection. In contrast, our approach tracks taint propagation at a coarser granularity (system calls), potentially overestimating taint propagation. Our experimental results show that this overestimation does not introduce additional false positives in the detection phase. Moreover, our coarser approach enables AGIS to run with less performance overhead. Besides detection, our approach also generates infection signatures.

MetaAware [35] describes an approach to identify metamorphic malware by extracting and matching code patterns used to execute system calls. The signature generation step of AGIS is similar to the code pattern extraction step of MetaAware. Compared to MetaAware, our approach can detect unknown malware, although it does not focus on an algorithm to match signatures. The two approaches can complement each other.

### 6. Conclusions

In this paper, we presented AGIS, a host-based technique for the automatic generation of infection signatures. AGIS tracks the activities of suspicious code inside a honeypot to detect malware and identifies a set of malicious behaviors that characterize the infection. Dynamic and static analyses are used to automatically extract the instruction sequences responsible for these behaviors. A range of infection signatures can be constructed using these sequences, from regular-expression signatures for legacy scanners to vanilla malware for a static analyzer [4]. Our empirical study demonstrates the efficacy of the approach.

### Acknowledgements

This work was supported in part by the National Science Foundation Cyber Trust program under Grant No. CNS-0716292.

### References

[1] S. Bhansali, W.-K. Chen, S. de Jong, A. Edwards, R. Murray, M. Drinic, D. Mihocka, and I. Chau. Framework for instruction-level tracing and analysis of program executions. In VEE '06: Proceedings of the second international conference on Virtual execution environments, pages 154-163, 2006.

[2] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, 2006.

[3] M. Christodorescu and S. Jha. Testing malware detectors. In ISSTA '04: Proceedings of the 2004 ACM SIGSOFT international symposium on Software testing and analysis, pages 34-44, New York, NY, USA, 2004. ACM Press.

[4] M. Christodorescu and S. Jha. Static analysis of executables to detect malicious patterns. In Usenix Security Symposium, August 2003.

[5] M. Christodorescu, S. Jha, S. A. Seshia, D. Song, and R. E. Bryant. Semantics-aware malware detection. In SP '05: Proceedings of the 2005 IEEE Symposium on Security and Privacy, pages 32-46, Washington, DC, USA, 2005. IEEE Computer Society.

[6] M. Costa, J. Crowcroft, M. Castro, A. I. T. Rowstron, L. Zhou, L. Zhang, and P. T. Barham. Vigilante: end-to-end containment of internet worms. In Proceedings of SOSP, pages 133-147, 2005.

[7] J. R. Crandall and F. T. Chong. Minos: Control data attack prevention orthogonal to memory model. In Proceedings of MICRO, pages 221-232, 2004.

[8] J. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In CCS '05: Proceedings of the 12th ACM conference on Computer and communications security, pages 235-248, New York, NY, USA, 2005. ACM Press.

[9] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spyware analysis. To appear in the 2007 USENIX Annual Technical Conference.

[10] F. Hsu, H. Chen, T. Ristenpart, J. Li, and Z. Suo. Back to the future: A framework for automatic malware removal and system repair. In ACSAC '06: Proceedings of the 22nd Annual Computer Security Applications Conference, pages 257-268, 2006.

[11] G. Hunt and D. Brubacher. Detours: Binary interception of Win32 functions. In Proceedings of the 3rd USENIX Windows NT Symposium (WIN-NT-99), pages 135-144, Berkeley, CA, July 12-15, 1999. USENIX Association.

[12] X. Jiang, A. Walters, F. Buchholz, D. Xu, Y.-M. Wang, and E. H. Spafford. Provenance-aware tracing of worm break-in and contaminations: A process coloring approach. In Proceedings of IEEE International Conference on Distributed Computing Systems (ICDCS 2006), 2006.

[13] J. O. Kephart and W. C. Arnold. Automatic extraction of computer virus signatures. In Proceedings of the 4th Virus Bulletin International Conference, pages 178-184, 1994.

[14] H.-A. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detection. In Proceedings of the 13th USENIX Security Symposium, pages 271-286, San Diego, CA, USA, August 2004.

[15] S. T. King and P. M. Chen. Backtracking intrusions. In SOSP '03: Proceedings of the nineteenth ACM symposium on Operating systems principles, pages 223-236, 2003.

[16] E. Kirda, C. Kruegel, G. Banks, G. Vigna, and R. A. Kemmerer. Behavior-based spyware detection. In Proceedings of USENIX Security Symposium 2006, 2006.

[17] C. Kreibich and J. Crowcroft. Honeycomb: creating intrusion detection signatures using honeypots. SIGCOMM Computer Communication Review, 34(1):51-56, 2004.

[18] B. A. Kuperman, C. E. Brodley, H. Ozdoganoglu, T. N. Vijaykumar, and A. Jalote. Detection and prevention of stack buffer overflow attacks. Commun. ACM, 48(11):50-56, 2005.

[19] Z. Li, X. Wang, and J. Y. Choi. Spyshield: Preserving privacy from spy add-ons. In RAID, pages 296-316, 2007.

[20] Z. Liang and R. Sekar. Fast and automated generation of attack signatures: a basis for building self-protecting servers. In CCS '05: Proceedings of the 12th ACM conference on Computer and communications security, pages 213-222, New York, NY, USA, 2005. ACM Press.

[21] J. Newsome, D. Brumley, and D. Song. Vulnerability-specific execution filtering for exploit prevention on commodity software. In Proceedings of the 13th Annual Network and Distributed Systems Security Symposium, 2006.

[22] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In Proceedings of IEEE Symposium on Security and Privacy, pages 226-241, Oakland, CA, USA, May 2005.

[23] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the 12th Annual Network and Distributed System Security Symposium, San Diego, CA, USA, February 2005.

[24] G. Portokalidis and H. Bos. SweetBait: Zero-hour worm detection and containment using honeypots. Technical Report IR-CS-015, Vrije Universiteit Amsterdam, May 2005.

[25] T. Reps and G. Rosay. Precise interprocedural chopping. In SIGSOFT '95: Proceedings of the 3rd ACM SIGSOFT symposium on Foundations of software engineering, pages 41-52, 1995.

[26] R. Sekar and P. Uppuluri. Synthesizing fast intrusion detection/prevention systems from high-level specifications. In Proceedings of USENIX Security Symposium, pages 63-78, 1999.

[27] S. Sidiroglou and A. D. Keromytis. Countering network worms through automatic patch generation. IEEE Security and Privacy, 3(6):41-49, 2005.

[28] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm fingerprinting. In Proceedings of OSDI, pages 45-60, 2004.

[29] Symantec. The digital immune system. http://www.symantec.com/avcenter/reference/dis.tech.brief.pdf.

[30] Y. Tang and S. Chen. Defending against internet worms: A signature-based approach. In Proceedings of IEEE INFOCOM, Miami, Florida, USA, May 2005.

[31] H. Wang, S. Jha, and V. Ganapathy. NetSpy: Automatic generation of spyware signatures for NIDS. In ACSAC '06: Proceedings of the 22nd Annual Computer Security Applications Conference, pages 99-108, 2006.

[32] Y.-M. Wang, R. Roussev, C. Verbowski, A. Johnson, M.-W. Wu, Y. Huang, and S.-Y. Kuo. Gatekeeper: Monitoring auto-start extensibility points (ASEPs) for spyware management. In USENIX LISA 2004, 2004.

[33] J. Xu, P. Ning, C. Kil, Y. Zhai, and C. Bookholt. Automatic diagnosis and response to memory corruption vulnerabilities. In CCS '05: Proceedings of the 12th ACM conference on Computer and communications security, pages 223-234, New York, NY, USA, 2005. ACM Press.

[34] H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS'07), October 2007.

[35] Q. Zhang and D. S. Reeves. MetaAware: Identifying metamorphic malware. In ACSAC, pages 411-420, 2007.