以下是经过优化的参考文献列表，使其更加清晰、连贯和专业：

[1] "Ness beacons in Ethereum," *IEEE Security and Privacy on the Blockchain (IEEE S&B)*, 2017.

[2] C. Cachin, K. Kursawe, and V. Shoup, "Random oracles in Constantinople: Practical asynchronous Byzantine agreement using cryptography," *Journal of Cryptology*, vol. 18, no. 3, pp. 219–246, 2005.

[3] C. Cachin and S. Tessaro, "Asynchronous verifiable information dispersal," in *24th IEEE Symposium on Reliable Distributed Systems (SRDS'05)*, IEEE, 2005, pp. 191–201.

[4] J. Camenisch, M. Drijvers, T. Hanke, Y.-A. Pignolet, and D. Williams, "Internet computer consensus," *IACR ePrint Archive*, 2021/632, 2021.

[5] R. Canetti and T. Rabin, "Fast asynchronous Byzantine agreement with optimal resilience," in *Proceedings of the Twenty-Fifth Annual ACM Symposium on Theory of Computing*, 1993, pp. 42–51.

[6] I. Cascudo and B. David, "SCRAPE: Scalable randomness attested by public entities," in *International Conference on Applied Cryptography and Network Security*, Springer, 2017, pp. 537–556.

[7] ——, "Albatross: Publicly attestable batched randomness based on secret sharing," in *International Conference on the Theory and Application of Cryptology and Information Security*, Springer, 2020, pp. 311–341.

[8] M. Castro, B. Liskov et al., "Practical Byzantine fault tolerance," in *Proceedings of the Third Symposium on Operating Systems Design and Implementation*, 1999, pp. 173–186.

[9] D. Chaum and T. P. Pedersen, "Wallet databases with observers," in *Annual International Cryptology Conference*, Springer, 1992, pp. 89–105.

[10] A. Cherniaeva, I. Shirobokov, and O. Shlomovits, "Homomorphic encryption random beacon," 2019.

[11] I. Damgård, "On σ-protocols," *Lecture Notes, University of Aarhus, Department for Computer Science*, 2002.

[12] S. Das, V. J. Ribeiro, and A. Anand, "Yoda: Enabling computationally intensive contracts on blockchains with Byzantine and selfish nodes," in *Proceedings of the 26th Annual Network and Distributed System Security Symposium*, 2019.

[13] B. David, P. Gaži, A. Kiayias, and A. Russell, "Ouroboros Praos: An adaptively-secure, semi-synchronous proof-of-stake blockchain," in *Annual International Conference on the Theory and Applications of Cryptographic Techniques*, Springer, 2018, pp. 66–98.

[14] R. Dingledine, N. Mathewson, and P. Syverson, "Tor: The second-generation onion router," *Naval Research Lab Washington DC, Technical Report*, 2004.

[15] C. Dwork, N. Lynch, and L. Stockmeyer, "Consensus in the presence of partial synchrony," *Journal of the ACM (JACM)*, vol. 35, no. 2, pp. 288–323, 1988.

[16] A. Fiat and A. Shamir, "How to prove yourself: Practical solutions to identification and signature problems," in *Conference on the Theory and Application of Cryptographic Techniques*, Springer, 1986, pp. 186–194.

[17] M. J. Fischer, N. A. Lynch, and M. S. Paterson, "Impossibility of distributed consensus with one faulty process," *Journal of the ACM (JACM)*, vol. 32, no. 2, pp. 374–382, 1985.

[18] A. Gagol, D. Leśniak, D. Straszak, and M. Świetek, "Aleph: Efficient atomic broadcast in asynchronous networks with Byzantine nodes," in *Proceedings of the 1st ACM Conference on Advances in Financial Technologies*, 2019, pp. 214–228.

[19] R. Gennaro, S. Jarecki, H. Krawczyk, and T. Rabin, "Secure distributed key generation for discrete-log based cryptosystems," *Journal of Cryptology*, vol. 20, no. 1, pp. 51–83, 2007.

[20] M. Ghosh, M. Richardson, B. Ford, and R. Jansen, "A TorPath to TorCoin: Proof-of-bandwidth altcoins for compensating relays," *Naval Research Lab Washington DC, Technical Report*, 2014.

[21] Y. Gilad, R. Hemo, S. Micali, G. Vlachos, and N. Zeldovich, "Algorand: Scaling Byzantine agreements for cryptocurrencies," in *Proceedings of the 26th Symposium on Operating Systems Principles*, 2017, pp. 51–68.

[22] S. Goel, M. Robson, M. Polte, and E. Sirer, "Herbivore: A scalable and efficient protocol for anonymous communication," *Cornell University, Technical Report*, 2003.

[23] D. Goulet and G. Kadianakis, "Random number generation during Tor voting," *Tor's Protocol Specifications-Proposal*, vol. 250, 2015.

[24] J. Groth, "Non-interactive distributed key generation and key resharing," *IACR Cryptol. ePrint Arch.*, vol. 2021, p. 339, 2021.

[25] K. Gurkan, P. Jovanovic, M. Maller, S. Meiklejohn, G. Stern, and A. Tomescu, "Aggregatable distributed key generation," in *Annual International Conference on the Theory and Applications of Cryptographic Techniques*, Springer, 2021, pp. 147–176.

[26] M. Haahr, "Random.org: True random number service," *School of Computer Science and Statistics, Trinity College, Dublin, Ireland. Website* (http://www.random.org), Accessed, 2010.

[27] S. Heidarvand and J. L. Villar, "Public verifiability from pairings in secret sharing schemes," in *International Workshop on Selected Areas in Cryptography*, Springer, 2008, pp. 294–308.

[28] M. P. Jhanwar, "A practical (non-interactive) publicly verifiable secret sharing scheme," in *International Conference on Information Security Practice and Experience*, Springer, 2011, pp. 273–287.

[29] M. P. Jhanwar, A. Venkateswarlu, and R. Safavi-Naini, "Paillier-based publicly verifiable (non-interactive) secret sharing," *Designs, Codes and Cryptography*, vol. 73, no. 2, pp. 529–546, 2014.

[30] A. Jivsov, "Compact representation of an elliptic curve point," *Internet Engineering Task Force*, 2014.

[31] J. Kelsey, L. T. Brandão, R. Peralta, and H. Booth, "A reference for randomness beacons: Format and protocol version 2," *National Institute of Standards and Technology, Technical Report*, 2019.

[32] A. Kiayias, A. Russell, B. David, and R. Oliynykov, "Ouroboros: A provably secure proof-of-stake blockchain protocol," in *Annual International Cryptology Conference*, Springer, 2017, pp. 357–388.

[33] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and B. Ford, "OmniLedger: A secure, scale-out, decentralized ledger via sharding," in *2018 IEEE Symposium on Security and Privacy (SP)*, IEEE, 2018, pp. 583–598.

[34] A. K. Lenstra and B. Wesolowski, "A random zoo: Sloth, unicorn, and TRX," 2015.

[35] B. Libert and D. Vergnaud, "Unidirectional chosen-ciphertext secure proxy re-encryption," in *International Workshop on Public Key Cryptography*, Springer, 2008, pp. 360–379.

[36] L. Luu, V. Narayanan, C. Zheng, K. Baweja, S. Gilbert, and P. Saxena, "A secure sharding protocol for open blockchains," in *Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security*, 2016, pp. 17–30.

[37] R. J. McEliece and D. V. Sarwate, "On sharing secrets and Reed-Solomon codes," *Communications of the ACM*, vol. 24, no. 9, pp. 583–584, 1981.

[38] B. Möller, "Algorithms for multi-exponentiation," in *International Workshop on Selected Areas in Cryptography*, Springer, 2001, pp. 165–180.

[39] S. Nakamoto, "Bitcoin: A peer-to-peer electronic cash system," 2008.

[40] P. Paillier, "Public-key cryptosystems based on composite degree residuosity classes," in *International Conference on the Theory and Applications of Cryptographic Techniques*, Springer, 1999, pp. 223–238.

[41] R. Pass and E. Shi, "Hybrid consensus: Efficient consensus in the permissionless model," in *31st International Symposium on Distributed Computing (DISC 2017)*, Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2017.

[42] D. Pointcheval and J. Stern, "Security proofs for signature schemes," in *International Conference on the Theory and Applications of Cryptographic Techniques*, Springer, 1996, pp. 387–398.

[43] I. S. Reed and G. Solomon, "Polynomial codes over certain finite fields," *Journal of the Society for Industrial and Applied Mathematics*, vol. 8, no. 2, pp. 300–304, 1960.

[44] A. Ruiz and J. L. Villar, "Publicly verifiable secret sharing from Paillier’s cryptosystem," in *WEWoRC 2005 – Western European Workshop on Research in Cryptology*, Gesellschaft für Informatik eV, 2005.

[45] P. Schindler, A. Judmayer, M. Hittmeir, N. Stifter, and E. Weippl, "RandRunner: Distributed randomness from trapdoor VDFs with strong uniqueness," in *Proceedings of the 29th Annual Network and Distributed System Security Symposium*, 2021.

[46] P. Schindler, A. Judmayer, N. Stifter, and E. Weippl, "Hydrand: Practical continuous distributed randomness," in *2015 IEEE Symposium on Security and Privacy*, IEEE, 2020.

[47] B. Schoenmakers, "A simple publicly verifiable secret sharing scheme and its application to electronic voting," in *Annual International Cryptology Conference*, Springer, 1999, pp. 148–164.

[48] A. Shamir, "How to share a secret," *Communications of the ACM*, vol. 22, no. 11, pp. 612–613, 1979.

[49] N. Starr, "Nonrandom risk: The 1970 draft lottery," *Journal of Statistics Education*, vol. 5, no. 2, 1997.

[50] E. Syta, P. Jovanovic, E. K. Kogias, N. Gailly, L. Gasser, I. Khoffi, M. J. Fischer, and B. Ford, "Scalable bias-resistant distributed randomness," in *2017 IEEE Symposium on Security and Privacy (SP)*, IEEE, 2017, pp. 444–460.

[51] J. Van Den Hooff, D. Lazar, M. Zaharia, and N. Zeldovich, "Vuvuzela: Scalable private messaging resistant to traffic analysis," in *Proceedings of the 25th Symposium on Operating Systems Principles*, 2015, pp. 137–152.

[52] D. I. Wolinsky, H. Corrigan-Gibbs, B. Ford, and A. Johnson, "Dissent in numbers: Making strong anonymity scale," in *Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12)*, 2012, pp. 179–182.

[53] M. Yin, D. Malkhi, M. K. Reiter, G. G. Gueta, and I. Abraham, "HotStuff: BFT consensus with linearity and responsiveness," in *Proceedings of the 2019 ACM Symposium on Principles of Distributed Computing*, ACM, 2019, pp. 347–356.

[54] M. Zamani, M. Movahedi, and M. Raykova, "RapidChain: Scaling blockchain via full sharding," in *ACM Conference on Computer and Communications Security*, 2018, pp. 931–948.

**附录A：PVSS的定义和安全性**

我们采用[66]中的PVSS通用模型以及[54]和[63]中的安全性定义。给定一组n个节点，分发者L希望使用(n, t+1)门限访问结构将一个随机选择的秘密s共享给这些节点。简而言之，我们期望从PVSS获得的属性是任何t个或更少的份额都不会泄露关于秘密s的任何信息，但任何t+1个或更多的份额可以恢复秘密s。此外，任何外部验证者V应该能够验证分发者L是否诚实，而无需了解任何有关份额或秘密的信息，因此称为公开可验证。

如§IV所述，PVSS协议有四个步骤：设置、共享、验证和重构。

- **设置**：设置算法生成并发布方案的参数。每个节点i发布一个公钥pki，并将其对应的私钥ski保密。
- **共享**：分发者L为随机选择的秘密s创建份额s1, ..., sn。然后，它使用节点i的公钥pki对每个份额si进行加密以获得ci。接着发布这些ci以及证明πi，证明这些确实是某些秘密的有效份额的加密。
- **验证**：在此步骤中，任何外部验证者V（不一定是协议的参与者）可以非交互地验证ci确实是某些秘密的有效份额的加密。
- **重构**：在此步骤中，节点i使用其私钥ski解密ci以得到~si，并发布si以及一个（非交互式）零知识证明~πi，证明~si确实是ci的正确解密。外部验证者V验证解密的份额。如果有至少t+1个有效的解密份额，V应用重构程序来恢复分发者共享的原始秘密s。

PVSS方案必须提供以下三个安全保证：正确性、可验证性和IND1-保密性。

- **正确性**：如果分发者是诚实的，那么所有步骤中的验证检查都会通过，并且可以重构秘密。
- **可验证性**：如果验证步骤中的检查通过，则除了微小概率外，值ci是某些秘密的有效份额的加密。如果重构步骤中的检查通过，则传递的值si是由分发者创建的份额。
- **IND1-保密性**：在重构步骤之前，发布的消息与任意t个节点的密钥结合不会泄露关于秘密的信息。这可以通过以下不可区分性定义来形式化，该定义改编自[25]、[54]和[63]。

**定义4**.（IND1-保密性）一个(n, t+1) PVSS被认为是IND1-保密的，如果对于任何多项式时间概率对手A，在最多t个节点被破坏的情况下，A在这个游戏中相对于挑战者的胜率是可忽略的。

1. 挑战者运行PVSS的设置步骤并将所有公开信息发送给A。此外，它为所有诚实节点创建秘密和公钥，并将相应的公钥发送给A。
2. A将被破坏节点的公钥发送给挑战者。
3. 挑战者在秘密空间中随机选择值s0和s1。然后，它随机均匀地选择b ← {0, 1}，并使用s0作为秘密运行协议的共享步骤。它将共享步骤中生成的所有公开信息以及sb发送给A。
4. A猜测b'。

A的优势定义为| Pr[b = b'] - 1/2 |。

ΠDBDH的正确性直接来自于双线性配对的性质以及码字u在码C中正交于所有码字在C⊥中的事实。下面的定理确保了ΠDBDH保证了可验证性。回想一下§IV中，q是我们PVSS方案中群的阶。

**定理4**.（可验证性）如果验证步骤中的检查成功，则除了1/q的概率外，ci是每个节点份额的正确加密。此外，在重构步骤中，诚实节点只接受ci的正确解密。

**证明**. 根据引理1，除非概率为1/q，否则分发者承诺的多项式是一个次数至多为t的多项式。由于e(ci, g1) = e(pki, vi)对每个i ∈ {1, 2, ..., n}都成立，这意味着logg1 vi = logpki ci对每个i都成立。否则，如果a = logg1 vi ≠ logpki ci = b对某个i成立，则e(ci, g1) = e(pki, g1)b ≠ e(pki, ga1)a = e(pki, v1)，并且检查会失败。

此外，在重构步骤中，对于每一个无效的解密，验证将以1的概率失败，因为当~si = ha0 ≠ si时，e(h0, vi) = e(h0, g1)si ≠ e(~si, g1) = e(ha0, g1)。这意味着诚实节点只接受ci的正确解密。

ΠDBDH的IND1-保密性假设了决策性双线性Diffie-Hellman问题的困难性。

**定义5**.（决策性双线性Diffie-Hellman (DBDH)）。给定配对群G0, G1, 目标群GT，每个群的大小为q，令e : G0 × G1 → GT为有效的双线性配对映射。对于生成元g0 ∈ G0, g1 ∈ G1, 随机值α, β, γ, δ ← Zq和u0 ← gα0, u1 ← gα1, v0 ← gβ0, w1 ← gγ1, 下面的分布D0和D1在计算上是不可区分的：

D0 = (u0, u1, v0, w1, e(g0, g1)αβγ)
D1 = (u0, u1, v0, w1, e(g0, g1)δ)

**定理5**. 在决策性双线性Diffie-Hellman假设下，协议ΠDBDH在静态PPT对手面前是IND1-保密的。

**证明**. 如果存在一个对手Apriv可以打破ΠDBDH的IND1-保密性，那么存在一个对手ADBDH可以利用Apriv以相同的优势打破双线性决策性Diffie-Hellman假设。

不失一般性，Apriv破坏前t个节点。设g0 ∈ G0和g1 ∈ G1是群的生成元。

1. 设(gα0, gα1, z)是DBDH问题的一个实例。ADBDH在给定DBDH实例后，扮演Apriv的挑战者角色，并模拟IND1游戏如下：
   1. 挑战者设置h0 = gβ0, h1 = gγ1，并运行ΠDBDH的设置步骤。对于t < i ≤ n, ADBDH选择均匀随机值ui ← Zp（这些可以隐式定义ski为ski = ui/β），并向Apriv发送pki = gui0。
   2. 对于1 ≤ i ≤ t, Apriv向挑战者发送公钥pki。
   3. 对于1 ≤ i ≤ t, 挑战者选择均匀随机值si ∈ Zq并设置vi = gsi0, ci = pksi。对于t + 1 ≤ i ≤ n, 它设置vi = gp(i)0，其中p(x)是次数至多为t的多项式，wi = gp(i)1。最后，它将所有这些值连同z（在IND-Secret游戏中扮演xb的角色）发送给Apriv。
   4. Apriv做出猜测b'。如果b' = 0, ADBDH猜测z = e(g0, g1)αβγ；否则，Apriv在步骤3中接收到的信息分布与PVSS中值e(hα0, h1)的共享阶段完全相同。由于h0 = gβ0, h1 = gγ1, 因此e(hα0, h1) = e(g0, g1)αβγ。现在很容易看出ADBDH的猜测优势与Apriv的优势相同。

希望这些改进能帮助您更好地理解和引用这些文献。