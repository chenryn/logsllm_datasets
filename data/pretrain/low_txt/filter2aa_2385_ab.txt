# Remote WMI Protocols – WinRM/PowerShell Remoting

Copyright © 2015, FireEye, Inc. All rights reserved.

## WMI Attack Lifecycle

### WMI Attacks
From an attacker's perspective, WMI can be utilized for various malicious activities, including but not limited to:

- **Reconnaissance**
- **VM/Sandbox Detection**
- **Code Execution and Lateral Movement**
- **Persistence**
- **Data Storage**
- **C2 Communication**

### WMI Attacks – Reconnaissance
WMI can be used to gather a wide range of information about the host system, such as:

- **Host/OS Information:**
  - `ROOT\CIMV2:Win32_OperatingSystem`
  - `ROOT\CIMV2:Win32_ComputerSystem`

- **File/Directory Listing:**
  - `ROOT\CIMV2:CIM_DataFile`

- **Disk Volume Listing:**
  - `ROOT\CIMV2:Win32_Volume`

- **Registry Operations:**
  - `ROOT\DEFAULT:StdRegProv`

- **Running Processes:**
  - `ROOT\CIMV2:Win32_Process`

- **Service Listing:**
  - `ROOT\CIMV2:Win32_Service`

- **Event Log:**
  - `ROOT\CIMV2:Win32_NtLogEvent`

- **Logged On Accounts:**
  - `ROOT\CIMV2:Win32_LoggedOnUser`

- **Mounted Shares:**
  - `ROOT\CIMV2:Win32_Share`

- **Installed Patches:**
  - `ROOT\CIMV2:Win32_QuickFixEngineering`

- **Installed AV:**
  - `ROOT\SecurityCenter[2]:AntiVirusProduct`

### WMI Attacks – VM/Sandbox Detection
Sample WQL Queries for detecting virtualized or sandboxed environments:

```sql
SELECT * FROM Win32_ComputerSystem WHERE TotalPhysicalMemory = 200 AND TargetInstance.SystemUpTime
```

### Extending WMI Functionality
WMI providers can extend the functionality of WMI while using its existing infrastructure. New providers create new `__Win32Provider` and `__Provider` instances, which are unique per namespace.

### WMI Providers
- **Get-WmiProvider.ps1:**
  - [GitHub Gist](https://gist.github.com/mattifestation/2727b6274e4024fd2481)

### Malicious WMI Providers
This was merely a theoretical attack vector until recently:

- **EvilWMIProvider by Casey Smith (@subTee):**
  - [GitHub Repository](https://github.com/subTee/EvilWMIProvider)
  - Proof of Concept (PoC) shellcode runner:
    ```powershell
    Invoke-WmiMethod -Class Win32_Evil -Name ExecShellcode -ArgumentList @(0x90, 0x90, 0x90), $null
    ```

- **EvilNetConnectionWMIProvider by Jared Atkinson (@jaredcatkinson):**
  - [GitHub Repository](https://github.com/jaredcatkinson/EvilNetConnectionWMIProvider)
  - PoC PowerShell runner and network connection lister:
    ```powershell
    Invoke-WmiMethod -Class Win32_NetworkConnection -Name RunPs -ArgumentList 'whoami', $null
    Get-WmiObject -Class Win32_NetworkConnection
    ```

### WMI Forensics
For online systems, use WMI to query itself:

- **Enumerate filter to consumer bindings**
- **Query WMI object definitions for suspicious events**

The CIM repository is largely undocumented, containing files such as `objects.data`, `index.btr`, and `mapping#.map`. Today, forensic analysis often involves hypothesizing and guessing:

- **Copy the CIM repository to a running system, or**
- **Use `strings.exe` on `objects.data`**

### WMI Forensics - Motivation
WMI "providers" register themselves to expose queryable data, following an object-oriented type hierarchy:

- **Namespaces, Classes, Properties, Methods, Instances, References**
- **CIM Repository: `%SystemRoot%\WBEM\Repository`**
  - `Objects.data`
  - `Mapping1.map`, `Mapping2.map`, `Mapping3.map`
  - `index.btr`
  - `mapping.ver` (only in XP, specifies the index of the current mapping file)
- **Registry Key: `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM`**

### WMI Implementation on Disk
- **WMI Repository:**
  - **Artifact Recovery Methodology:**
    - Construct the search string, considering the artifact’s namespace, class, and name.
    - Perform a search in the `index.btr`.
    - Determine the Physical Page # from the `objects.data` Mapping in `Mapping#.map`.
    - Find the Record Header based on the Artifact’s Record Identifier.
    - Validate the size in the Record Header matches the Artifact’s Record Size.
    - Use the Record Offset in the Record Header to find the offset in the current page of the Artifact.

- **Paged Structure:**
  - **Page Size: 0x2000**
  - **Physical Offset: PageNumber x PageSize**
  - Most pages contain records with Record Headers (Size = 0x10).
  - A record with a size greater than the Page Size always starts in an empty page.
  - Use the Mapping file to find the rest of the record’s chunks.

- **Mapping#.map:**
  - **Start Signature: 0xABCD**
  - **Header:**
    - Revision
    - PhysicalPagesCount
    - MappingEntriesCount
  - **Mapping Data:**
    - FreePages Mapping Size
    - FreePages Mapping Data
  - **End Signature: 0xDCBA**

- **Index.btr:**
  - **B-Tree on disk:**
    - Root of the Tree:
      - In XP: Logical Page Number = the DWORD at offset 12 in Logical Page 0.
      - In Vista and Up: Logical Page Number = Logical Page 0.
    - Use the `Index.btr` Mapping Data in `Mapping#.map` to find the Physical Page.

- **MOF (Managed Object Format):**
  - **Primitives:**
    - **Object-Oriented Hierarchy:**
      - Namespaces
      - Classes
      - Instances
      - References
      - Properties
      - Qualifiers
  - **Namespace Definition:**
    - `__namespace` – class representing a namespace
    - Namespace Declaration: `#pragma namepace (\\\)`
  - **Classes/Properties/References:**
    - Class definition: List of qualifiers, class name, properties, and references.
    - Property definition: List of qualifiers, property name.
    - Reference definition: Class referenced, reference name.

- **MOF Example:**
  - **Instance Declarations:**
    - Property name = Property value
    - Reference name = Class instance referenced

- **Full MOF Example:**
  - [Example Code]

Copyright © 2015, FireEye, Inc. All rights reserved.