### Evaluating Design Principles

The principles outlined in Section 6 are derived from our systematic analysis of 25 high-profile applications. However, these principles have not yet been validated through real-world app development or end-user studies. We hope that our study will draw attention to the community and encourage further research on the principles and guidelines for the development of In-App Browsing Interfaces (IABIs).

### 8. Related Work

In this section, we review closely related work on security indicators in regular mobile browsers, general mobile WebViews, and TLS security.

#### Security Indicators in Mobile Browsers

Amrutkar et al. [11] first assessed the adequacy of critical security indicators in mobile browsers, finding that many UI designs failed to meet established security guidelines. Luo et al. [18] identified several UI vulnerabilities in mobile browsers that could be exploited by attackers to deceive users and collect sensitive information. Wu et al. [29] evaluated the usability of address bars in mobile browsers for security purposes. Unlike these studies, which focused on standalone mobile browser apps, our study is the first to specifically target security indicators in IABIs. We also demonstrate that the issues are more pronounced in IABIs, as many developers prioritize the main functionality of the app over the design of browsing interfaces.

#### Mobile WebView Security

Android WebView has been vulnerable to various attacks. Luo et al. [19, 20] conducted the first study on WebView attacks, followed by research on file-based cross-zone scripting [26] and access control problems by Georgiev et al. [14]. Wu and Chang [27] extended this research to iOS. Techniques such as BavelView [21], Spartan Jester [22], and HybriDroid [15] aim to prevent data leakage through JavaScript. Most previous research has focused on the interaction between Java and JavaScript, rather than the usability and security of IABIs. For example, Li et al. [17] proposed attacks that exploit IABIs for cross-app navigation, while Yang et al. [30] found that iframes can navigate WebViews to untrusted web pages.

#### Mobile App TLS Security

Many Android apps use SSL/TLS to securely transmit sensitive information, but developers often implement their own, potentially insecure, certificate validation. Georgiev et al. [13] demonstrated that SSL certificate validation is frequently broken in popular apps and libraries. Consequently, numerous studies have examined the security threats posed by inadequate or insecure use of TLS in mobile browsers. These studies have provided tools like MalloDroid [12], SMV-Hunter [23], Amandroid [25], and BackDroid [28] to detect potential Man-In-The-Middle attack vulnerabilities. Our study reveals that most apps with custom IABIs lack any security indicators about the website's security scheme, making it difficult for users to determine whether the current webpage meets TLS requirements.

### 9. Conclusion

In this paper, we present the first empirical study on the usability (in)security of IABIs in both Android and iOS apps. Using a dataset of 25 high-profile mobile apps that include IABIs, we conducted a systematic analysis consisting of eight security tests, covering all attack surfaces from opening, displaying, to navigating an in-app web page. Our major findings include:
- Approximately 30% of the tested apps fail to provide sufficient URL information before users open the URL.
- Nearly all custom IABIs have various issues in providing adequate indicators to accurately display in-app pages to users.
- Only a few IABIs offer specific warnings to alert users of risky operations (e.g., password input) during navigation.

To help mitigate these risks and guide future designs, we reported our findings to affected vendors, analyzed their responses, and proposed a set of secure IABI design principles.

### Acknowledgments

We thank our shepherd, Yasemin Acar, for her comprehensive guidance and the anonymous reviewers for their valuable comments and suggestions. This research is partially supported by the Singapore National Research Foundation under the National Satellite of Excellence in Mobile Systems Security and Cloud Security (NRF2018NCR-NSOE004-0001) and a direct grant (ref. no. 4055127) from The Chinese University of Hong Kong.

### References

[1] Access in 2021. WebView. http://developer.android.com/reference/android/

[2] Accessed in 2021. Chrome Custom Tabs. https://developer.chrome.com/docs/multidevice/android/customtabs/

[3] Accessed in 2021. Chrome Custom Tabs Implementation Guide. https://developer.chrome.com/docs/android/custom-tabs/integration-guide/

[4] Accessed in 2021. SFSafariViewController. https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller

[5] Accessed in 2021. UIWebView. https://developer.apple.com/documentation/uikit/uiwebview

[6] Accessed in 2021. W3C: Web Security Context: User Interface Guidelines. http://www.w3.org/TR/wsc-ui/

[7] Accessed in 2021. WebViewClient.onPageFinished. https://developer.android.com/reference/android/webkit/WebViewClient#onPageFinished(android.webkit.WebView,%20java.lang.String)

[8] Accessed in 2021. WebViewClient.onReceivedSslError. https://developer.android.com/reference/android/webkit/WebViewClient#onReceivedSslError(android.webkit.WebView,%20android.webkit.SslErrorHandler,%20android.net.http.SslError))

[9] Chaitrali Amrutkar, Patrick Traynor, and Paul Oorschot. 2013. An Empirical Evaluation of Security Indicators in Mobile Web Browsers. In IEEE Trans. on Mobile Computing.

[10] Chaitrali Amrutkar, Patrick Traynor, and Paul C Van Oorschot. 2012. Measuring SSL Indicators on Mobile Browsers: Extended Life, or End of the Road?. In International Conference on Information Security.

[11] Chaitrali Amrutkar, Patrick Traynor, and Paul C. van Oorschot. 2015. An Empirical Evaluation of Security Indicators in Mobile Web Browsers. IEEE Transactions on Mobile Computing (2015).

[12] Sascha Fahl, Marian Harbach, Thomas Muders, Lars Baumg√§rtner, Bernd Freisleben, and Matthew Smith. 2012. Why Eve and Mallory Love Android: An Analysis of Android SSL (In)Security. In Proc. ACM CCS.

[13] Martin Georgiev, Subodh Iyengar, Suman Jana, Rishita Anubhai, Dan Boneh, and Vitaly Shmatikov. 2012. The Most Dangerous Code in the World: Validating SSL Certificates in Non-Browser Software. In Proceedings of the 2012 ACM Conference on Computer and Communications Security.

[14] Martin Georgiev, Suman Jana, and Vitaly Shmatikov. 2014. Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks. In Proc. ISOC NDSS.

[15] Sungho Lee, Julian Dolby, and Sukyoung Ryu. 2016. HybriDroid: Static Analysis Framework for Android Hybrid Applications. In 2016 31st IEEE/ACM International Conference on Automated Software Engineering (ASE).

[16] Tongxin Li, Xueqiang Wang, Mingming Zha, Kai Chen, XiaoFeng Wang, Luyi Xing, Xiaolong Bai, Nan Zhang, and Xinhui Han. 2017. Unleashing the Walking Dead: Understanding Cross-App Remote Infections on Mobile WebViews. In Proc. ACM CCS.

[17] Tongxin Li, Xueqiang Wang, Mingming Zha, Kai Chen, XiaoFeng Wang, Luyi Xing, Xiaolong Bai, Nan Zhang, and Xinhui Han. 2017. Unleashing the Walking Dead: Understanding Cross-App Remote Infections on Mobile WebViews. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security.

[18] Meng Luo, Oleksii Starov, Nima Honarmand, and Nick Nikiforakis. 2017. Hindsight: Understanding the Evolution of UI Vulnerabilities in Mobile Browsers. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security.

[19] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin. 2011. Attacks on WebView in the Android System. In Proc. ACM ACSAC.

[20] Tongbo Luo, Xing Jin, Ajai Ananthanarayanan, and Wenliang Du. 2013. Touchjacking Attacks on Web in Android, iOS, and Windows Phone. In Foundations and Practice of Security.

[21] Claudio Rizzo, Lorenzo Cavallaro, and Johannes Kinder. 2018. BabelView: Evaluating the Impact of Code Injection Attacks in Mobile Webviews. In Research in Attacks, Intrusions, and Defenses.

[22] Julian Sexton, Andrey Chudnov, and David A. Naumann. 2017. Spartan Jester: End-to-End Information Flow Control for Hybrid Android Applications. In 2017 IEEE Security and Privacy Workshops (SPW).

[23] David Sounthiraraj, Justin Sahs, Garrett Greenwood, Zhiqiang Lin, and Latifur Khan. 2014. SMV-Hunter: Large Scale, Automated Detection of SSL/TLS Man-in-the-Middle Vulnerabilities in Android Apps. In Proc. ISOC NDSS.

[24] Thomas Steiner. 2018. What is in a Web View? An Analysis of Progressive Web App Features When the Means of Web Access is not a Web Browser. In Proc. ACM WWW.

[25] Fengguo Wei, Sankardas Roy, Xinming Ou, and Robby. 2014. Amandroid: A Precise and General Inter-component Data Flow Analysis Framework for Security Vetting of Android Apps. In Proc. ACM CCS.

[26] Daoyuan Wu and Rocky K. C. Chang. 2014. Analyzing Android Browser Apps for file:// Vulnerabilities. In Proc. Springer Information Security Conference (ISC).

[27] Daoyuan Wu and Rocky K. C. Chang. 2015. Indirect File Leaks in Mobile Applications. In Proc. IEEE Mobile Security Technologies (MoST).

[28] Daoyuan Wu, Debin Gao, Robert H. Deng, and Rocky K. C. Chang. 2021. When Program Analysis Meets Bytecode Search: Targeted and Efficient Inter-procedural Analysis of Modern Android Apps in BackDroid. In Proc. IEEE/IFIP International Conference on Dependable Systems and Networks (DSN).

[29] Min Wu, Robert C. Miller, and Simson L. Garfinkel. 2006. Do Security Toolbars Actually Prevent Phishing Attacks?. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems. ACM.

[30] Guangliang Yang, Jeff Huang, and Guofei Gu. 2019. Iframes/Popups Are Dangerous in Mobile WebView: Studying and Mitigating Differential Context Vulnerabilities. In 28th USENIX Security Symposium.