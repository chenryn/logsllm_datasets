### Higher Performance Impact of Untrusted Extensions

The performance overhead is significantly higher when an untrusted extension is responsible for highly frequent operations such as disk I/O. In the kernel decompression experiment, the protection state transfer rate reached approximately 390,000 per second, resulting in HUKO's worst-case performance: 79% of the baseline.

### Micro-Benchmark Tests on Process Creation

In addition to application-level benchmarks, we conducted several micro-benchmark tests on process creation using Lmbench. We labeled `ext3` and `8139too` as untrusted extensions in our system protected by HUKO. For the test item "process fork + exit," the HUKO system took 100.31 µs to complete the operation, compared to 92.87 µs for the native system. For "process fork + execve," the HUKO system spent 377.47 µs, while the native system took 296.47 µs. For "process fork + /bin/sh -c," the HUKO system took 884.57 µs, compared to 697.38 µs for the native system.

## Limitations and Future Work

We believe that HUKO provides a transparent security layer that significantly enhances the integrity protection of commodity operating system kernels. However, it also has limitations in defending against certain security threats. Below, we discuss these limitations and possible solutions as future directions.

### Kernel APIs

In the HUKO system, controls from untrusted extensions to the OS kernel are restricted to a set of trusted entry points, which are essentially legitimate kernel APIs exported to kernel extensions. However, in commodity operating systems, the kernel is not designed to tolerate or defend against malicious extensions, leading to potential robustness and security issues with kernel APIs. Additionally, the programming languages used to build commodity OS kernels do not support features like type enforcement. As a result, attackers can exploit "legitimate" kernel interfaces to subvert kernel integrity. Examples of such attacks include:

1. Calling legitimate kernel APIs with undesired object references to compromise kernel objects.
2. Abusing privileges (e.g., a video camera driver accessing kernel APIs for the networking stack).
3. Exploiting memory and type bugs in kernel API functions.

Comprehensively addressing these issues would require major design improvements in specific kernels, such as enhancing the kernel object model, access control model, type enforcement, verification, and privilege separation. These approaches can be layered atop HUKO, which serves as a VMM-level reference monitor for mediating kernel object access, checking API calls, and their parameters.

### Mandatory Security Policy

To obtain a better mandatory security policy, we aim to gain a deeper understanding of the behavior of the OS kernel. Specifically, we are interested in identifying security-sensitive kernel data along the execution path of each Trusted Entry Point (TEP). This can be achieved through static program analysis with security annotations. Based on properties such as privilege, availability level, and resource category, we can classify TEPs in terms of resource manipulation and privilege. This classification will further reveal the security and resource semantics of TEPs, helping to improve the security of TEPs whose privileges are originally unified in commodity OSes.

### Information Flow

Another category of possible attacks involves explicit and implicit information flow. For example, the OS kernel may explicitly grant write access to extensions on its own data objects (e.g., via shared memory, APIs, or messages). Conversely, extensions may write low-integrity data to places where the kernel may read afterward. Both situations violate traditional integrity models. Since there is no existing information flow control inside commodity OS kernels due to the high cost of tracking fine-grained information flow, we plan to investigate applying end points such as input filters and verifiers between the OS kernel and extensions to regulate the function parameters and information passed to the OS kernel.

## Related Work

The design and idea of HUKO draw inspiration from various past research topics, including kernel integrity protection, kernel malware analysis, device driver isolation, and mandatory access control models.

### Kernel Integrity Protection

Several previous research efforts have aimed at protecting the integrity of the operating system kernel, such as code integrity protection [27, 25, 22], data integrity protection [10, 31], and control data/flow integrity protection [33, 23, 35]. Secvisor [27] is a hypervisor-based protection system that guarantees the lifetime code integrity of the kernel. It leverages advanced features from AMD processors, similar to those used in HUKO. However, HUKO differs from Secvisor in the following ways:

- **Untrusted Code Execution**: Secvisor prohibits any untrusted code from executing in the kernel space, while HUKO allows untrusted kernel extensions to run securely, providing functionality and availability. Thus, HUKO needs to enforce additional protections such as data integrity and control flow integrity to restrict the behavior of untrusted extensions.
- **TCB Size**: Secvisor’s tiny hypervisor design results in a very small Trusted Computing Base (TCB), making it easier to verify. In comparison, HUKO is based on Xen hypervisor with a larger TCB but saves deployment and configuration effort for existing Xen virtual machines.

### Kernel Malware Analysis

Recent projects such as Panorama [39], K-Tracer [9], HookFinder [18], HookMap [34], and Poker [26] focus on analyzing the behavior of kernel-level malwares. These works complement HUKO by providing extensive knowledge of how malwares damage kernel integrity, which can help HUKO enforce more effective access control policies on various types of kernel objects.

### Device Driver Isolation

Another major category of related research focuses on isolating buggy device drivers to improve the reliability of operating systems. Examples include Nooks [32], MINIX 3 [19], and SafeDrive [41]. These systems primarily target fault resistance and dependability, preventing system crashes caused by design defects and programming mistakes in device drivers. These approaches complement HUKO in enhancing the robustness and availability of OS kernels. Our system resembles Nooks in that both establish hardware-enforced protection domains to isolate kernel components. However, HUKO leverages advanced hardware features such as NX bits, EPT, VPID, and IOMMU, reducing the amount of OS modifications and improving performance. HUKO also offers more protection from malicious extensions, preserving architectural state from being modified by untrusted extensions. As a VMM-based approach, HUKO has a smaller TCB and attack surface compared to OS-based approaches.

### Mandatory Access Control

HUKO enforces mandatory access control policies over subjects and objects in the OS kernel. Many systems, such as LOMAC [17], SELinux [7], AppArmor [2], UMIP [21], and Loki [40], are designed to improve operating system security by adding mandatory access control. These systems provide flexible, powerful, and fine-grained protection to preserve system-level integrity. However, they enforce MAC at the OS abstraction level and cannot be applied to mediate the activities of kernel-level objects.

### Address Space Separation

As part of our design, HUKO isolates untrusted extensions from the OS kernel using the memory virtualization mechanism provided by VMMs. Other systems, such as MMP [36, 37], XFI [15], NativeClient [38], SIM [30], Overshadow [13], and Bastion [12], achieve address space isolation and fine-grained permission mapping using various techniques. In comparison, HUKO focuses on protecting the integrity of the OS kernel and uses hardware-assisted paging to reduce the number of VMEXITs and improve TLB performance.

## Conclusion

We have presented the design, implementation, and evaluation of HUKO, a hypervisor-based layered system that comprehensively protects the integrity of commodity OS kernels from untrusted extensions. HUKO leverages several contemporary hardware virtualization techniques and novel software design to achieve multi-aspect protection, acceptable performance, and ease-of-adoption. Our experiments show that HUKO can effectively protect kernel integrity from various kinds of malicious extensions with an acceptable performance overhead. We believe that HUKO provides a practical framework for running untrusted extensions in OS kernels with enhanced integrity protection for commodity systems.

## Acknowledgements

We would like to thank our paper shepherd, Mihai Christodorescu, and the anonymous reviewers for their helpful comments on earlier versions of this paper. This work was supported by AFOSR FA9550-07-1-0527 (MURI), NSF CNS-0905131, ARO W911NF-09-1-0525 (MURI), and AFRL FA8750-08-C-0137.

## References

[1] All-root. http://packetstormsecurity.org/UNIX/penetration/rootkits/all-root.c.
[2] Apparmor. http://www.novell.com/linux/security/apparmor/.
[3] Enyelkm. http://www.packetstormsecurity.com/UNIX/penetration/rootkits/enyelkm-1.3-no-objs.tar.gz.
[4] Intel 64 and ia-32 architectures software developer’s guide. Manual directed system programming. Virtualization technology. http://www.intel.com/Assets/PDF/manual/253669.pdf.
[5] Intel. Volume 3b: I/O. ftp://download.intel.com/technology/computing/vptech/Intel(r) VT for Direct IO.pdf.
[6] Lmbench. http://www.bitmover.com/lmbench/.
[7] NSA. Security Enhanced Linux. http://www.nsa.gov/selinux/.
[8] Unixbench. http://ftp.tux.org/pub/benchmarks/System/unixbench/.
[9] M. S. Andrea Lanzi and W. Lee. K-tracer: A system for extracting kernel malware behavior. In Network and Distributed System Security Symposium, 2009.
[10] A. Baliga, V. Ganapathy, and L. Iftode. Automatic inference and enforcement of kernel data structure invariants. In ACSAC '08: Proceedings of the 2008 Annual Computer Security Applications Conference, pages 77–86, Washington, DC, USA, 2008. IEEE Computer Society.
[11] M. Carbone, W. Cui, L. Lu, W. Lee, M. Peinado, and X. Jiang. Mapping kernel objects to enable systematic integrity checking. In CCS '09: Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 555–565, New York, NY, USA, 2009. ACM.
[12] D. Champagne and R. B. Lee. Scalable architectural support for trusted software. In The 16th IEEE International Symposium on High-Performance Computer Architecture (HPCA), Bangalore, India, Jan 9-14 2010.
[13] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports. Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems. In ASPLOS XIII: Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems, pages 2–13, New York, NY, USA, 2008. ACM.
[14] B. Dolan-Gavitt, A. Srivastava, P. Traynor, and J. Giffin. Robust signatures for kernel data structures. In CCS '09: Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 566–577, New York, NY, USA, 2009. ACM.
[15] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula. XFI: software guards for system address spaces. In OSDI '06: Proceedings of the 7th symposium on Operating systems design and implementation, pages 75–88, Berkeley, CA, USA, 2006. USENIX Association.
[16] M. Fähndrich, M. Aiken, C. Hawblitzel, O. Hodson, G. Hunt, J. R. Larus, and S. Levi. Language support for fast and reliable message-based communication in Singularity OS. In Proceedings of the 1st ACM SIGOPS/EuroSys European Conference on Computer Systems 2006, EuroSys '06, pages 177–190, New York, NY, USA, 2006. ACM.
[17] T. Fraser. LOMAC: Low water-mark integrity protection for COTS environments. In SP '00: Proceedings of the 2000 IEEE Symposium on Security and Privacy, page 230, Washington, DC, USA, 2000. IEEE Computer Society.
[18] Z. L. Heng Yin and D. Song. HookFinder: Identifying and understanding malware hooking behaviors. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS'08), 2008.
[32] M. M. Swift, B. N. Bershad, and H. M. Levy. Improving the reliability of commodity operating systems. In SOSP '03: Proceedings of the nineteenth ACM Symposium on Operating Systems Principles, pages 207–222, New York, NY, USA, 2003. ACM.
[33] Z. Wang, X. Jiang, W. Cui, and P. Ning. Countering kernel rootkits with lightweight hook protection. In CCS '09: Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 545–554, New York, NY, USA, 2009. ACM.
[34] Z. Wang, X. Jiang, W. Cui, and X. Wang. Countering persistent kernel rootkits through systematic hook discovery. In RAID '08: Proceedings of the 11th International Symposium on Recent Advances in Intrusion Detection, pages 21–38, Berlin, Heidelberg, 2008. Springer-Verlag.
[35] J. Wei, B. D. Payne, J. Giffin, and C. Pu. Soft-timer driven transient kernel control flow attacks and defense. In ACSAC '08: Proceedings of the 2008 Annual Computer Security Applications Conference, pages 97–107, Washington, DC, USA, 2008. IEEE Computer Society.
[36] E. Witchel, J. Cates, and K. Asanović. Mondrian memory protection. In ASPLOS-X: Proceedings of the 10th international conference on Architectural support for programming languages and operating systems, pages 304–316, New York, NY, USA, 2002. ACM.
[37] E. Witchel, J. Rhee, and K. Asanović. Mondrix: memory isolation for Linux using Mondriaan memory protection. In SOSP '05: Proceedings of the twentieth ACM symposium on Operating systems principles, pages 31–44, New York, NY, USA, 2005. ACM.
[38] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A sandbox for portable, untrusted x86 native code. Security and Privacy, IEEE Symposium on, 0:79–93, 2009.
[39] H. Yin, D. Song, M. Egele, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In CCS '07: Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 116–127, New York, NY, USA, 2007. ACM.
[40] N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis. Hardware enforcement of application security policies using tagged memory. In OSDI 2008, pages 225–240. USENIX Association, 2008.
[41] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals, M. Harren, G. Necula, and E. Brewer. SafeDrive: safe and recoverable extensions using language-based techniques. In Proceedings of the 7th symposium on Operating systems design and implementation, OSDI '06, pages 45–60, Berkeley, CA, USA, 2006. USENIX Association.
[19] J. Herder, H. Bos, B. Gras, P. Homburg, and A. Tanenbaum. Fault isolation for device drivers. In IEEE/IFIP International Conference on Dependable Systems and Networks, 2009. DSN '09., 2009.
[20] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood. seL4: Formal verification of an OS kernel. In SOSP '09: Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles, pages 207–220, New York, NY, USA, 2009. ACM.
[21] N. Li, Z. Mao, and H. Chen. Usable mandatory integrity protection for operating systems. In SP '07: Proceedings of the 2007 IEEE Symposium on Security and Privacy, pages 164–178, Washington, DC, USA, 2007. IEEE Computer Society.
[22] L. Litty, H. A. Lagar-Cavilla, and D. Lie. Hypervisor support for identifying covertly executing binaries. In SS'08: Proceedings of the 17th USENIX Security Symposium, pages 243–258, Berkeley, CA, USA, 2008. USENIX Association.
[23] N. L. Petroni, Jr. and M. Hicks. Automated detection of persistent kernel control-flow attacks. In CCS '07: Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 103–115, New York, NY, USA, 2007. ACM.
[24] T. H. R. Hund and F. Freiling. Return-oriented rootkits: Bypassing kernel code integrity protection mechanisms. In Security'09: Proceedings of the 18th USENIX Security Symposium, 2009.
[25] R. Riley, X. Jiang, and D. Xu. Guest-transparent prevention of kernel rootkits with VMM-based memory shadowing. In RAID '08: Proceedings of the 11th International Symposium on Recent Advances in Intrusion Detection, pages 1–20, Berlin, Heidelberg, 2008. Springer-Verlag.
[26] R. Riley, X. Jiang, and D. Xu. Multi-aspect profiling of kernel rootkit behavior. In EuroSys '09: Proceedings of the 4th ACM European Conference on Computer systems, pages 47–60, New York, NY, USA, 2009. ACM.
[27] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A tiny hypervisor to provide lifetime kernel code integrity for commodity OSes. In SOSP '07: Proceedings of twenty-first ACM SIGOPS Symposium on Operating Systems Principles, pages 335–350, New York, NY, USA, 2007. ACM.
[28] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In CCS '07: Proceedings of the 14th ACM Conference on Computer and Communications Security, pages 552–561, New York, NY, USA, 2007. ACM.
[29] J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS: A fast capability system. In Proceedings of the seventeenth ACM symposium on Operating systems principles, SOSP '99, pages 170–185, New York, NY, USA, 1999. ACM.
[30] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi. Secure in-VM monitoring using hardware virtualization. In CCS '09: Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 477–487, New York, NY, USA, 2009. ACM.
[31] A. Srivastava, I. Erete, and J. Giffin. Kernel data integrity protection via memory access control. Technical Report GT-CS-09-04, Georgia Institute of Technology, 2009.