### Ransomware-Aware Buffer Management and Detection Mechanism

#### 2.2.1 Ransomware-Aware Buffer Management Policy
The data associated with the write request are stored in the write buffer. According to Principle 3, data flagged as `TRUE` are evicted from the read buffer based on the Least Recently Used (LRU) policy or simultaneously when the corresponding data are evicted from the write buffer. Principle 4 stipulates that when a read request attempts to access data flagged as `TRUE` in the write buffer, the flags of the matched data in both the write buffer and the corresponding data (if present) in the read buffer are changed from `TRUE` to `FALSE`. Figure 3 illustrates how the proposed policy modifies the read and write buffers during an overwriting-following-reading pattern.

This ransomware-aware buffer management policy provides essential information for identifying ransomware behaviors to the access-pattern-based detector.

#### 2.2.2 Ransomware Detector
Our access-pattern-based detector identifies ransomware by monitoring the status of the read and write buffers, as illustrated in Figure 2. The detector leverages the repetitive overwriting-following-reading access patterns characteristic of Type I ransomware. During a ransomware attack, the write buffer tends to contain elements flagged as `TRUE`, as new encrypted data are written to the same addresses as the original data.

The detector determines whether an SSD is under ransomware attack based on the following condition:
- **Condition for Ransomware Detection**: This condition recognizes the typical write-buffer access patterns of ransomware. It checks the frequency of data in the write buffer that have the same addresses as those in the read buffer. If the proportion of elements flagged as `TRUE` exceeds a threshold value, it indicates that most of the read data have been overwritten by new data in a short time, which is indicative of Type I ransomware behavior.

### 3. Evaluation

#### 3.1 Experimental Results
We evaluated our detection mechanism using a realistic sample of CryptoHasYou Type I ransomware [6]. The target files included 9,509 documents (.doc, .docx, .pdf, .txt, .xls, .xlsx), 4,666 image files (.gif, .jpg), and 3,140 compressed files (.rar, .zip), collected using Google. These file types are commonly targeted by ransomware. The files were stored on a flash-based openSSD board [5]. We then extracted the trace of read and write requests to the openSSD board while the ransomware was encrypting the victim files.

To evaluate the effectiveness of our detection mechanism, we developed a prototype simulator comprising read and write buffers and an access-pattern-based detector. The extracted trace was input into the simulator, with a detection threshold set at 0.9. We tested the system with read and write buffer sizes ranging from 16 MB to 256 MB, with a basic unit size of 4 KB, assuming a page size of 4 KB in flash memory.

Our experimental results showed that the CryptoHasYou sample was fully detected by our detector, regardless of the buffer size. This indicates that our proposed buffer management policy can effectively capture the overwriting-following-reading pattern. Additionally, our detection mechanism can identify file encryption attacks by ransomware without relying on semantic information from the host system.

Furthermore, our mechanism rapidly detects ransomware. A 16 MB buffer was detected approximately 420 times faster than the time it took for undetected ransomware to encrypt all files. As the buffer size increases, more requests are needed for detection because the mechanism only triggers when the proportion of the write buffer occupied by overwritten data exceeds a threshold level. Early detection minimizes damage by reducing data loss and preventing the spread of ransomware via networks.

Figure 5 shows the impact of our buffer-management policy on the hit ratios of 32 MB read and write buffers using both realistic and normal traces [7]. The hit ratios using our policy are similar to those of the LRU policy, with no false alarms. This is because our proposal is based on the LRU policy, and the overwriting-following-reading pattern is rarely observed in normal traces.

#### 3.2 Discussion
In our experiments, we demonstrated that our detector perfectly detects ransomware attacks. However, we observed that the ratio of `TRUE` elements to the total elements in the write buffer can fluctuate when the read and write buffers are relatively small (e.g., 16 MB). This is because a small read buffer may evict the original data before the write buffer receives the corresponding encrypted data.

### 4. Conclusion
In this paper, we propose a ransomware (particularly Type I) detection mechanism for storage devices, including a ransomware-aware buffer management policy and an access-pattern-based detector. Our storage-level approach can detect encryption attacks by ransomware, even those exploiting kernel vulnerabilities, independent of the host system. Future work will focus on making our mechanism robust for small buffers and designing new mechanisms to detect other types of ransomware.

### Acknowledgments
This research was supported by the Ministry of Science and ICT (MSIT), Korea, under the Information Technology Research Center (ITRC) program (IITP-2018-2016-0-00304) supervised by the Institute for Information & Communications Technology Promotion (IITP), and by the National Natural Science Foundation of China (NSFC) under Grant 61806142.

### References
[1] Vadim, K., and Mantej, S. R. 2014. Understanding Crypto-Ransomware. [Online]. Available: https://www.bromium.com/sites/default/files/bromium-report-ransomware.pdf.
[2] Scaife, N., Carter, H., Traynor, P., and Butler, K. 2016. CryptoLock (and Drop It): Stopping Ransomware Attacks on User Data. In Proceedings of International Conference on Distributed Computing Systems (ICDCS).
[3] Kharaz, A., Arshad, S., Mulliner, C., Robertson, W., Kirda, E. 2016. UNVEIL: A Large-Scale, Automated Approach to Detecting Ransomware. In Proceedings of USENIX Security Symposium.
[4] Continella, A., Guagnelli, A., Zingaro, G., De Pasquale, G., Barenghi, A., Zanero, S., and Maggi, F. 2016. ShieldFS: A Self-healing, Ransomware-aware Filesystem. In Proceedings of Annual Conference on Computer Security Applications (ACSAC), 2016.
[5] The OpenSSD project, [Online]. Available: www.openssd-project.org.
[6] VirusTotal, [Online]. https://www.virustotal.com.
[7] SNIA IOTTA Repository, [Online]. Available: http://iotta.snia.org.

**Poster Presentation: CCSâ€™18, October 15-19, 2018, Toronto, ON, Canada**