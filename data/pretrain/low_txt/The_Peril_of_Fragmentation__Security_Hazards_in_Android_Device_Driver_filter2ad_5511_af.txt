### Introduction and Background

The system, which encompasses both C code and Java programs, poses significant challenges for the static tracking of operations on device files. A notable recent study [43] focused on vendor customization of pre-installed applications, analyzing 10 representative stock Android images from five major vendors to identify the origins of their pre-installed apps. The research revealed that a substantial number of these apps are overly privileged or have re-delegation vulnerabilities, with many of the problematic apps originating from the vendors themselves. In contrast, our work examines device drivers, which are the primary reason for phone vendors to customize Android. Our findings, including the widespread exposure of Linux device nodes and the severe consequences of their exploitation, have not been previously reported.

### Dynamic Analysis in Android Security

When conducting security analysis on Android, especially when it involves system code, dynamic analysis is often necessary [2, 26, 32, 44]. A prominent example is TaintDroid [26], a tool designed for dynamic taint analysis on Android. This approach enables fine-grained tracking of data flows across apps and the OS. However, it is less suitable for analyzing multiple customized systems due to the intensive instrumentation required, which limits its portability. Another fine-grained dynamic tool is Droidscope [44], which runs the entire Android platform on an emulator to reconstruct both the OS and Dalvik-level views of the system. The challenge with Droidscope is that it struggles to emulate different customized hardware, which is essential for our study on Android Linux devices.

### System-Call Analysis

Given the limitations of existing tools, we developed a dynamic analysis tool that operates at the system-call level to achieve high performance and portability. System calls have long been used for security-related program analysis [21, 36, 37, 40]. Our tool, ADDICTED, is built on strace, which has been ported and extended to work on ARM-based systems.

### Android Permissions

Our research also intersects with a substantial body of literature on Android permissions. These permissions are intended to protect critical Android resources at the framework layer [24, 27–29]. Previous studies have used dynamic analysis to "demystify" Android permissions by mapping Android APIs to their related permissions [28]. This work helps us identify the appropriate APIs to trigger device-related permissions and locate the corresponding Linux files. Another relevant technique is tracking IPC call provenance to prevent permission re-delegation attacks. Our approach monitors IPC to detect file-system activities in response to requests. There is also research on enhancing the permission system [19, 22, 25, 33, 35, 39]. However, these prior studies focus on security protection at the framework layer, while our research investigates Linux-layer security hazards introduced by device customizations.

### Android Linux-Layer Security

Limited research has been conducted on Android's Linux-layer security. Notable examples include Momento [34], which investigates information leaks from shared memory usage data exposed by Android's Linux, and recent work on Android public information leaks [46]. These studies follow the footsteps of work on the privacy implications of the Linux Proc file system [45]. Unlike prior work, our research focuses on the Linux-layer protection of Android device files, whose exposures can have direct and often more serious consequences, as demonstrated in this paper. Additionally, recent efforts have aimed to enhance access control on Android [42] using SELinux [6].

### Sensor Data Inference

There is a line of research on inferring sensitive user information from public data exposed by Android devices, particularly sensor outputs [20, 31, 41]. Our approach, however, reveals customization errors that cause explicit disclosure of Android device nodes, allowing unauthorized parties to directly access information from them.

### Conclusion

The fragmentation of the Android ecosystem has introduced new security challenges. Vendors and carriers aggressively customize official OS versions to accommodate new hardware and services, potentially undermining Android's security protections. This issue has not been adequately studied, especially regarding the security implications of customizing various Android Linux devices such as cameras, audio, and GPS. In our research, we made the first step toward better understanding this issue by developing ADDICTED, a new technique for automatically detecting security-critical customization flaws. ADDICTED dynamically analyzes operations on sensitive Android devices to connect them to a set of Linux device files. The security protection of these files is then evaluated against their counterparts in the AOSP OS, allowing our approach to automatically identify under-protected device nodes. Running ADDICTED on popular phone models, we discovered critical flaws that allow unauthorized apps to take pictures, screenshots, and even record user input keys from the touchscreen. These vulnerabilities were found to exist on hundreds of other phone models. Our measurement study further revealed LCFs present in over 1,000 phone models distributed across different Android versions, carriers, and countries.

With the important discoveries we made, our research only scratches the surface of the grand security challenges associated with Android customizations. Even at the Linux layer, there are many device files we cannot interpret, let alone detect their security flaws. Further effort is needed to understand how to protect security-critical resources on different Android layers and develop effective means to ensure that customized resources remain well-protected.

### Acknowledgements

This project was supported in part by the NSF CNS-1017782, 1117106, 1223477, and 1223495.

### References

[1] Demo of the paper.
https://sites.google.com/site/linuxdroid0/

[2] Droidbox: Android application sandbox.
https://code.google.com/p/droidbox/. Accessed: Nov, 2013.

[3] File, os x. macosx/. Accessed: 05/20/2013.
Folder comparison & synchronization for Mac
http://www.deltopia.com/compare-merge-sync/

[4] Full firmware.
http://www.full-firmware.com/. Accessed: 05/02/2013.

[5] Samsung updates: Latest news and firmware for your Samsung devices!
http://samsung-updates.com/. Accessed: 05/02/2013.

[6] SELinux.
http://www.nsa.gov/research/files/selinux/papers/slinux.pdf. Accessed: 11/09/2013.

[7] Using the input subsystem.
http://www.linuxjournal.com/article/6429, year = 2013.

[8] Android tops 81 percent of smartphone market share in Q3.
http://www.engadget.com/2013/10/31/strategy-analytics-q3-2013-phone-share/, 2013. Accessed: 10/31/2013.

[9] Boot image tools.
https://github.com/sakindia123/Boot-Image-tools, 2013.

[10] How to take screenshots on your unrooted Android phone – Windows version.
http://www.lindylabs.com/screenshot-it/instructions-win.html, 2013.

[11] Linux-fbdev.org.
http://www.linux-fbdev.org/, 2013.

[12] List of best-selling mobile phones.
http://en.wikipedia.org/wiki/List_of_best-selling_mobile_phones, 2013.

[13] Randoop, random test generation.
https://code.google.com/p/randoop/, 2013. Accessed: 11/08/2013.

[14] RGB color model.
http://en.wikipedia.org/wiki/RGB_color_model, 2013.

[15] Samsung S5P/Exynos4 FIMC driver.
https://www.kernel.org/doc/Documentation/video4linux/fimc.txt, 2013.

[16] Strace.
http://sourceforge.net/projects/strace/, 2013. Accessed: 11/08/2013.

[17] V4L2 framework.
https://www.kernel.org/doc/Documentation/video4linux/v4l2-framework.txt, 2013.

[18] YUV.
http://en.wikipedia.org/wiki/YUV, 2013.

[19] Alastair R. Beresford, Andrew Rice, Nicholas Skehin, and Ripduman Sohan. Mockdroid: Trading privacy for application functionality on smartphones. In Proceedings of the 12th Workshop on Mobile Computing Systems and Applications, HotMobile '11, pages 49–54, New York, NY, USA, 2011. ACM.

[20] Liang Cai and Hao Chen. Touchlogger: Inferring keystrokes on touch screen from smartphone motion. In Proceedings of the 6th USENIX conference on Hot topics in security, HotSec'11, pages 9–9, Berkeley, CA, USA, 2011. USENIX Association.

[21] Davide Canali, Andrea Lanzi, Davide Balzarotti, Christopher Kruegel, Mihai Christodorescu, and Engin Kirda. A quantitative study of accuracy in system call-based malware detection. In Proceedings of the 2012 International Symposium on Software Testing and Analysis, ISSTA 2012, pages 122–132, New York, NY, USA, 2012. ACM.

[22] Kevin Zhijie Chen, Noah M. Johnson, Vijay D'Silva, Shuaifu Dai, Kyle MacNamara, Tom Magrino, Edward XueJun Wu, Martin Rinard, and Dawn Xiaodong Song. Contextual policy enforcement in Android applications with permission event graphs. In NDSS. The Internet Society, 2013.

[23] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and David Wagner. Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services, MobiSys '11, pages 239–252, New York, NY, USA, 2011. ACM.

[24] Michael Dietz, Shashi Shekhar, Yuliy Pisetsky, Anhei Shu, and Dan S. Wallach. Quire: Lightweight provenance for smart phone operating systems. In 20th USENIX Security Symposium, San Francisco, CA, August 2011.

[25] Manuel Egele, Christopher Kruegel, Engin Kirda, and Giovanni Vigna. PiOS: Detecting privacy leaks in iOS applications. In Proceedings of the 18th Annual Network & Distributed System Security Symposium (NDSS), February 2011.

[26] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol N. Sheth. TaintDroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In Proceedings of the 9th USENIX conference on Operating systems design and implementation, OSDI'10, pages 1–6, Berkeley, CA, USA, 2010. USENIX Association.

[27] William Enck, Machigar Ongtang, and Patrick McDaniel. On lightweight mobile phone application certification. In Proceedings of the 16th ACM CCS, CCS '09, pages 235–245, New York, NY, USA, 2009. ACM.

[28] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner. Android permissions demystified. In Proceedings of the 18th ACM conference on Computer and communications security, CCS '11, pages 627–638, New York, NY, USA, 2011. ACM.

[29] Adrienne Porter Felt, Helen J Wang, Alexander Moshchuk, Steven Hanna, and Erika Chin. Permission redelegation: Attacks and defenses. In Proceedings of the 20th USENIX Security Symposium, pages 22–37, 2011.

[30] Michael Grace, Yajin Zhou, Zhi Wang, and Xuxian Jiang. Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th Network and Distributed System Security Symposium (NDSS), February 2012.

[31] Jun Han, Emmanuel Owusu, Thanh-Le Nguyen, Adrian Perrig, and Joy Zhang. Accomplice: Location inference using accelerometers on smartphones. In Proceedings of the 4th International Conference on Communication Systems and Networks, Bangalore, India, 2012.

[32] Kim Hazelwood and Artur Klauser. A dynamic binary instrumentation engine for the ARM architecture. In Proceedings of the 2006 international conference on Compilers, architecture and synthesis for embedded systems, CASES '06, pages 261–270, New York, NY, USA, 2006. ACM.

[33] Peter Hornyack, Seungyeop Han, Jaeyeon Jung, Stuart Schechter, and David Wetherall. These aren't the droids you're looking for: Retrofitting Android to protect data from imperious applications. In Proceedings of the 18th ACM CCS, CCS '11, pages 639–652, New York, NY, USA, 2011. ACM.

[34] Suman Jana and Vitaly Shmatikov. Memento: Learning secrets from process footprints. In Proceedings of the 2012 IEEE Symposium on Security and Privacy, SP '12, pages 143–157, Washington, DC, USA, 2012. IEEE Computer Society.

[35] Limin Jia, Jassim Aljuraidan, Elli Fragkaki, Lujo Bauer, Michael Stroucken, Kazuhide Fukushima, Shinsaku Kiyomoto, and Yutaka Miyake. Run-time enforcement of information-flow properties on Android (extended abstract). In Computer Security—ESORICS 2013: 18th European Symposium on Research in Computer Security, pages 775–792. Springer, September 2013.

[36] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda, Xiaoyong Zhou, and XiaoFeng Wang. Effective and efficient malware detection at the end host. In Proceedings of the 18th conference on USENIX security symposium, SSYM'09, pages 351–366, Berkeley, CA, USA, 2009. USENIX Association.

[37] Andrea Lanzi, Davide Balzarotti, Christopher Kruegel, Mihai Christodorescu, and Engin Kirda. AccessMiner: Using system-centric models for malware protection. In Proceedings of the 17th ACM conference on Computer and communications security, CCS '10, pages 399–412, New York, NY, USA, 2010. ACM.

[38] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. Chex: Statically vetting Android apps for component hijacking vulnerabilities. In Proceedings of the 2012 ACM conference on Computer and communications security, CCS '12, pages 229–240, New York, NY, USA, 2012. ACM.

[39] Mohammad Nauman, Sohail Khan, and Xinwen Zhang. Apex: Extending Android permission model and enforcement with user-defined runtime constraints. In Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security, ASIACCS '10, pages 328–332, New York, NY, USA, 2010. ACM.

[40] Alessandro Reina, Aristide Fattori, and Lorenzo Cavallaro. A system call-centric analysis and stimulation technique to automatically reconstruct Android malware behaviors. In Proceedings of the 6th European Workshop on System Security (EUROSEC), Prague, Czech Republic, April 2013.

[41] Roman Schlegel, Kehuan Zhang, Xiao yong Zhou, Mehool Intwala, Apu Kapadia, and XiaoFeng Wang. Soundcomber: A stealthy and context-aware sound trojan for smartphones. In NDSS. The Internet Society, 2011.

[42] Stephen Smalley and Robert Craig. Security Enhanced (SE) Android: Bringing flexible MAC to Android. In NDSS. The Internet Society, 2013.

[43] Lei Wu, Michael Grace, Yajin Zhou, Chiachih Wu, and Xuxian Jiang. The impact of vendor customizations on Android security. In Proceedings of the 2013 ACM SIGSAC conference on Computer communications security, CCS '13, pages 623–634, New York, NY, USA, 2013. ACM.

[44] Lok Kwong Yan and Heng Yin. DroidScope: Seamlessly reconstructing the OS and Dalvik semantic views for dynamic Android malware analysis. In Proceedings of the 21st USENIX conference on Security symposium, Security'12, pages 29–29, Berkeley, CA, USA, 2012. USENIX Association.

[45] Kehuan Zhang and XiaoFeng Wang. Peeping Tom in the neighborhood: Keystroke eavesdropping on multi-user systems. In Proceedings of the 18th conference on USENIX security symposium, SSYM'09, pages 17–32, Berkeley, CA, USA, 2009. USENIX Association.

[46] Xiaoyong Zhou, Soteris Demetriou, Dongjing He, Muhammad Naveed, Xiaorui Pan, XiaoFeng Wang, Carl A. Gunter, and Klara Nahrstedt. Identity, location, disease, and more: Inferring your secrets from Android public resources. In Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), November 2013.

[47] Yajin Zhou, Zhi Wang, Wu Zhou, and Xuxian Jiang. Hey, you, get off of my market: Detecting malicious apps in official and alternative Android markets. In Proceedings of the 19th Annual Network & Distributed System Security Symposium, February 2012.