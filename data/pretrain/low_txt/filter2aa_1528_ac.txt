# XML and Web Services Security Threats

## X-Malware
X-Malware, despite appearing as a legitimate XML document, contains malicious code that can be activated when the file is parsed.

## Oversize Payloads & XDOS
Developers often try to limit the size of XML documents, but there are scenarios where these documents can reach hundreds of megabytes or even gigabytes. Parsers based on the Document Object Model (DOM) are particularly vulnerable to such large files, as they need to load the entire document into memory before parsing, which can lead to excessive resource consumption and potential denial-of-service (DoS) attacks.

## Replay Attacks
A hacker can repeatedly send SOAP message requests to overload a web service. These requests may not be detected as intrusions because the source IP is valid, the network packet behavior is normal, and the HTTP request is well-formed. However, the repeated requests constitute an illegitimate business behavior, leading to an XML-based DoS attack.

## Routing Detour
The WS-Routing specification allows for directing XML traffic through a complex environment by permitting interim way stations to assign routing instructions. If one of these way stations is compromised, it can perform a man-in-the-middle attack by inserting bogus routing instructions, redirecting confidential documents to malicious locations. The document can then be forwarded to its original destination after stripping out the malicious instructions.

### Source:
Pete Lindstrom, Research Director for Spire, January 2004  
[www.forumsystems.com/papers/Attacking_and_Defending_WS.pdf](http://www.forumsystems.com/papers/Attacking_and_Defending_WS.pdf)

## Future & Next-Generation Attacks

### More Backend-Targeted Attacks
- **Exploit Known Vulnerabilities**: Targeting vulnerabilities in ERP, CRM, mainframes, and databases.
- **Using Web Services as the Attack Carrier**: Leveraging web services to deliver and execute attacks.

### Emergence of Multi-Phase Attacks
- **Distributed Nature of Web Services**: Utilizing the distributed nature and persistence of XML documents to execute complex, multi-target attacks.
- **Examples**:
  - DNS Poisoning combined with fraudulently signed XML transactions.
  - Specialized malware delivery methods using XML.
  - Advanced phishing and pharming using cross-site scripting (XSS) in XML.

### Universal Tunnel Abuse
- **Internal Exposure**: An attacker or an insider with good intentions uses XML and web services to expose internal or blocked protocols to the outside.
- **Misuse and Piggybacking**: Implementing existing network protocols within XML web services, leading to misuse and piggybacking of FTP, Telnet, SSH, SCP, RDP, IMAP, etc.

## Web 2.0 Attacks

### AJAX Vulnerabilities: Information Leakage
- **Clear Text Function Calls**: The JavaScript in the AJAX engine makes function calls in clear text to the server, revealing sensitive information.
- **Example User Commands**:
  - Return price for product ID 24.
  - Return valid cities for a given state.
  - Return last valid address for user ID 78.
  - Update user’s age in the database.
- **Information Obtained by Attackers**:
  - Function names, variable names, parameters, return types, data types, and valid data ranges.

### Repudiation of Requests and Cross-Site Scripting (XSS)
- **Identical Requests**: Browser and AJAX engine requests look identical, making it difficult for servers to distinguish between them.
- **Proof of Action**: It is challenging for individuals to prove they did not perform certain actions.
- **Background Requests**: JavaScript can make hidden requests, and the browser automatically adds necessary authentication or state-keeping information.
- **Increased XSS Damage**: This expanded JavaScript functionality increases the damage potential of XSS attacks.

### AJAX Bridging
- **Proxy Web Service**: A host can provide a web service that acts as a proxy to forward traffic between the client-side JavaScript and a third-party site.
- **Bridge Protocols**: Supports SOAP, REST, custom web services, and arbitrary web resources like RSS feeds, HTML, Flash, or binary content.
- **Elevated Privileges**: Attackers can exploit elevated privileges given to the bridge's original target to send malicious requests.

### RSS Feeds: Attack Delivery Service
- **Malicious Links and Content**: RSS feeds can deliver malicious links and content, facilitating XSS and XML injection attacks.
- **Binary Malware**: Can also deliver encoded binary malware.

### XSS Worms
- **Propagation**: Using a website to host malware, XSS worms take control of web browsers and propagate by forcing them to copy malware to other web locations.
- **Example**: The Samy Worm, which spread via a persistent XSS vulnerability in MySpace.com’s personal profile pages.

### MySpace QT Worm
- **Embedded Multimedia**: MySpace allows embedding multimedia, including Apple’s QuickTime movies with HREF tracks.
- **Malicious JavaScript**: Attackers can insert malicious JavaScript into these tracks, executing evil code when the movie is played.

### Evolving Security Threats
- **Reconnaissance, Sniffing, Masquerading, Insertion, Injection, xDoS Attacks**: Sophisticated tools and techniques for detecting and exploiting web services.
- **Network Scanners, WSDL Scanning, Packet & Traffic Sniffers, Routing Detours, Replay Attacks, XSS in XML, XPath Injection, RSS Attacks, AJAX Attacks, Quadratic Blowup, Schema Poisoning, Web 2.0 Worms, Multi-Phase/Universal Tunnel, Targeted Viruses, Trojans, Redirectors, XML-CodeRed**.

### De-Perimeterization
- **Paradigm Shift**: XML, web services, and Web 2.0 applications represent a shift in the network perimeter, with applications and data residing everywhere.
- **Unprotected Perimeter**: Internet, intranet, and extranet environments are increasingly exposed.

### Evolution of Web Services Security
- **Proxy Solutions**: WS Security Gateway, SOAP Gateway, SOA Gateway, XML Firewall, Trust Enablement, Threat Mitigation.
- **1st Generation**: XML Transparent IPS (Threat Prevention), near-zero provisioning, wire-speed performance, streaming XML threat prevention.
- **2nd Generation**: Functional boundary split, internal and external threat protection, transparent threat prevention, application-aware trust assurance.

### Summary
- **Rapidly Changing Environment**: With the mainstream adoption of SOA and widespread use of Web 2.0, new and evolving threats are targeting systems, data, and users.
- **Collaboration Needed**: The industry must collaborate to identify and mitigate these threats, addressing them early in the software development lifecycle (SDL).

### Q&A
For more information, contact:
Steve Orrin, Director of Security Solutions, SSG-SPI, Intel Corporation  
Email: [PI:EMAIL]

### Notices
Intel and the Intel logo are trademarks or registered trademarks of Intel Corporation or its subsidiaries in the United States and other countries. Other names and brands may be claimed as the property of others. The threats and attack examples provided in this presentation are intended as examples only and should not be used for illegal or malicious activities. Performance tests and ratings are subject to change without notice. This slide may contain forward-looking statements subject to known and unknown risks and uncertainties.

Copyright © 2007 Intel Corporation. All Rights Reserved.