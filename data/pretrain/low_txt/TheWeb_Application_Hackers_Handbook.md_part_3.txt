# Table of Contents

## Chapter 16: Integer and Format String Vulnerabilities
- **Integer Vulnerabilities (Page 640)**
- **Integer Overflows (Page 640)**
- **Signedness Errors (Page 641)**
- **Detecting Integer Vulnerabilities (Page 642)**
- **Format String Vulnerabilities (Page 643)**
- **Detecting Format String Vulnerabilities (Page 644)**
- **Summary (Page 645)**
- **Questions (Page 645)**

## Chapter 17: Attacking Application Architecture
- **Tiered Architectures (Page 647)**
- **Attacking Tiered Architectures (Page 648)**
- **Securing Tiered Architectures (Page 654)**
- **Shared Hosting and Application Service Providers (Page 656)**
  - **Virtual Hosting (Page 657)**
  - **Shared Application Services (Page 657)**
- **Attacking Shared Environments (Page 658)**
- **Securing Shared Environments (Page 665)**
- **Summary (Page 667)**
- **Questions (Page 667)**

## Chapter 18: Attacking the Application Server
- **Vulnerable Server Configuration (Page 669)**
  - **Default Credentials (Page 670)**
  - **Default Content (Page 671)**
  - **Directory Listings (Page 677)**
  - **WebDAV Methods (Page 679)**
  - **The Application Server as a Proxy (Page 682)**
  - **Misconfigured Virtual Hosting (Page 683)**
- **Securing Web Server Configuration (Page 684)**
- **Vulnerable Server Software (Page 684)**
- **Application Framework Flaws (Page 685)**
- **Memory Management Vulnerabilities (Page 687)**
- **Encoding and Canonicalization (Page 689)**
- **Finding Web Server Flaws (Page 694)**
- **Securing Web Server Software (Page 695)**
- **Web Application Firewalls (Page 697)**
- **Summary (Page 699)**
- **Questions (Page 699)**

## Chapter 19: Finding Vulnerabilities in Source Code
- **Approaches to Code Review (Page 701)**
  - **Black-Box Versus White-Box Testing (Page 702)**
  - **Code Review Methodology (Page 703)**
- **Signatures of Common Vulnerabilities (Page 704)**
  - **Cross-Site Scripting (Page 704)**
  - **SQL Injection (Page 705)**
  - **Path Traversal (Page 706)**
  - **Arbitrary Redirection (Page 707)**
  - **OS Command Injection (Page 708)**
  - **Backdoor Passwords (Page 708)**
  - **Native Software Bugs (Page 709)**
  - **Source Code Comments (Page 710)**
- **The Java Platform (Page 711)**
  - **Identifying User-Supplied Data (Page 711)**
  - **Session Interaction (Page 712)**
  - **Potentially Dangerous APIs (Page 713)**
  - **Configuring the Java Environment (Page 716)**
- **ASP.NET (Page 718)**
  - **Identifying User-Supplied Data (Page 718)**
  - **Session Interaction (Page 719)**
  - **Potentially Dangerous APIs (Page 720)**
  - **Configuring the ASP.NET Environment (Page 723)**
- **PHP (Page 724)**
  - **Identifying User-Supplied Data (Page 724)**
  - **Session Interaction (Page 727)**
  - **Potentially Dangerous APIs (Page 727)**
  - **Configuring the PHP Environment (Page 732)**
- **Perl (Page 735)**
  - **Identifying User-Supplied Data (Page 735)**
  - **Session Interaction (Page 736)**
  - **Potentially Dangerous APIs (Page 736)**
  - **Configuring the Perl Environment (Page 739)**
- **JavaScript (Page 740)**
- **Database Code Components (Page 741)**
  - **SQL Injection (Page 741)**
  - **Calls to Dangerous Functions (Page 742)**
- **Tools for Code Browsing (Page 743)**
- **Summary (Page 744)**
- **Questions (Page 744)**

## Chapter 20: A Web Application Hacker’s Toolkit
- **Web Browsers (Page 747)**
  - **Internet Explorer (Page 748)**
  - **Firefox (Page 749)**
  - **Chrome (Page 750)**
- **Integrated Testing Suites (Page 751)**
  - **How the Tools Work (Page 751)**
  - **Testing Workflow (Page 769)**
  - **Alternatives to the Intercepting Proxy (Page 771)**
- **Standalone Vulnerability Scanners (Page 773)**
  - **Vulnerabilities Detected by Scanners (Page 774)**
  - **Inherent Limitations of Scanners (Page 776)**
  - **Technical Challenges Faced by Scanners (Page 778)**
  - **Current Products (Page 781)**
  - **Using a Vulnerability Scanner (Page 783)**
- **Other Tools (Page 785)**
  - **Wikto/Nikto (Page 785)**
  - **Firebug (Page 785)**
  - **Hydra (Page 785)**
  - **Custom Scripts (Page 786)**
- **Summary (Page 789)**

## Chapter 21: A Web Application Hacker’s Methodology
- **General Guidelines (Page 791)**
- **1. Map the Application’s Content (Page 793)**
  - **1.1 Explore Visible Content (Page 795)**
  - **1.2 Consult Public Resources (Page 796)**
  - **1.3 Discover Hidden Content (Page 796)**
  - **1.4 Discover Default Content (Page 797)**
  - **1.5 Enumerate Identifier-Specified Functions (Page 797)**
  - **1.6 Test for Debug Parameters (Page 798)**
- **2. Analyze the Application (Page 798)**
  - **2.1 Identify Functionality (Page 798)**
  - **2.2 Identify Data Entry Points (Page 799)**
  - **2.3 Identify the Technologies Used (Page 799)**
  - **2.4 Map the Attack Surface (Page 800)**
- **3. Test Client-Side Controls (Page 800)**
  - **3.1 Test Transmission of Data Via the Client (Page 801)**
  - **3.2 Test Client-Side Controls Over User Input (Page 801)**
  - **3.3 Test Browser Extension Components (Page 802)**
- **4. Test the Authentication Mechanism (Page 805)**
  - **4.1 Understand the Mechanism (Page 805)**
  - **4.2 Test Password Quality (Page 806)**
  - **4.3 Test for Username Enumeration (Page 806)**
  - **4.4 Test Resilience to Password Guessing (Page 807)**
  - **4.5 Test Any Account Recovery Function (Page 807)**
  - **4.6 Test Any Remember Me Function (Page 808)**
  - **4.7 Test Any Impersonation Function (Page 808)**
  - **4.8 Test Username Uniqueness (Page 809)**
  - **4.9 Test Predictability of Autogenerated Credentials (Page 809)**
  - **4.10 Check for Unsafe Transmission of Credentials (Page 810)**
  - **4.11 Check for Unsafe Distribution of Credentials (Page 810)**
  - **4.12 Test for Insecure Storage (Page 811)**
  - **4.13 Test for Logic Flaws (Page 811)**
  - **4.14 Exploit Any Vulnerabilities to Gain Unauthorized Access (Page 813)**
- **5. Test the Session Management Mechanism (Page 814)**
  - **5.1 Understand the Mechanism (Page 814)**
  - **5.2 Test Tokens for Meaning (Page 815)**
  - **5.3 Test Tokens for Predictability (Page 816)**
  - **5.4 Check for Insecure Transmission of Tokens (Page 817)**
  - **5.5 Check for Disclosure of Tokens in Logs (Page 817)**
  - **5.6 Check Mapping of Tokens to Sessions (Page 818)**
  - **5.7 Test Session Termination (Page 818)**
  - **5.8 Check for Session Fixation (Page 819)**
  - **5.9 Check for CSRF (Page 820)**
  - **5.10 Check Cookie Scope (Page 820)**
- **6. Test Access Controls (Page 821)**
  - **6.1 Understand the Access Control Requirements (Page 821)**
  - **6.2 Test with Multiple Accounts (Page 822)**
  - **6.3 Test with Limited Access (Page 822)**
  - **6.4 Test for Insecure Access Control Methods (Page 823)**
- **7. Test for Input-Based Vulnerabilities (Page 824)**
  - **7.1 Fuzz All Request Parameters (Page 824)**
  - **7.2 Test for SQL Injection (Page 827)**
  - **7.3 Test for XSS and Other Response Injection (Page 829)**
  - **7.4 Test for OS Command Injection (Page 832)**
  - **7.5 Test for Path Traversal (Page 833)**
  - **7.6 Test for Script Injection (Page 835)**
  - **7.7 Test for File Inclusion (Page 835)**
- **8. Test for Function-Specific Input Vulnerabilities (Page 836)**
  - **8.1 Test for SMTP Injection (Page 836)**
  - **8.2 Test for Native Software Vulnerabilities (Page 837)**
  - **8.3 Test for SOAP Injection (Page 839)**
  - **8.4 Test for LDAP Injection (Page 839)**
  - **8.5 Test for XPath Injection (Page 840)**
  - **8.6 Test for Back-End Request Injection (Page 841)**
  - **8.7 Test for XXE Injection (Page 841)**
- **9. Test for Logic Flaws (Page 842)**
  - **9.1 Identify the Key Attack Surface (Page 842)**
  - **9.2 Test Multistage Processes (Page 842)**
  - **9.3 Test Handling of Incomplete Input (Page 843)**
  - **9.4 Test Trust Boundaries (Page 844)**
  - **9.5 Test Transaction Logic (Page 844)**
- **10. Test for Shared Hosting Vulnerabilities (Page 845)**
  - **10.1 Test Segregation in Shared Infrastructures (Page 845)**
  - **10.2 Test Segregation Between ASP-Hosted Applications (Page 845)**
- **11. Test for Application Server Vulnerabilities (Page 846)**
  - **11.1 Test for Default Credentials (Page 846)**
  - **11.2 Test for Default Content (Page 847)**
  - **11.3 Test for Dangerous HTTP Methods (Page 847)**
  - **11.4 Test for Proxy Functionality (Page 847)**
  - **11.5 Test for Virtual Hosting Misconfiguration (Page 847)**
  - **11.6 Test for Web Server Software Bugs (Page 848)**
  - **11.7 Test for Web Application Firewalling (Page 848)**
- **12. Miscellaneous Checks (Page 849)**
  - **12.1 Check for DOM-Based Attacks (Page 849)**
  - **12.2 Check for Local Privacy Vulnerabilities (Page 850)**
  - **12.3 Check for Weak SSL Ciphers (Page 851)**
  - **12.4 Check Same-Origin Policy Configuration (Page 851)**
- **13. Follow Up Any Information Leakage (Page 852)**
- **Index (Page 853)**

---

# Introduction

This book is a practical guide to discovering and exploiting security flaws in web applications. By "web applications," we mean those that are accessed using a web browser to communicate with a web server. We examine a wide variety of different technologies, such as databases, file systems, and web services, but only in the context in which these are employed by web applications.

If you want to learn how to run port scans, attack firewalls, or break into servers in other ways, we suggest you look elsewhere. But if you want to know how to hack into a web application, steal sensitive data, and perform unauthorized actions, this is the book for you. There is enough that is interesting and fun to say on that subject without straying into any other territory.

## Overview of This Book

The focus of this book is highly practical. Although we include sufficient background and theory for you to understand the vulnerabilities that web applications contain, our primary concern is the tasks and techniques that you need to master to break into them. Throughout the book, we spell out the specific steps you need to follow to detect each type of vulnerability and how to exploit it to perform unauthorized actions. We also include a wealth of real-world examples, derived from the authors’ many years of experience, illustrating how different kinds of security flaws manifest themselves in today’s web applications.

Security awareness is usually a double-edged sword. Just as application developers can benefit from understanding the methods attackers use, hackers can gain from knowing how applications can effectively defend themselves. In addition to describing security vulnerabilities and attack techniques, we describe in detail the countermeasures that applications can take to thwart an attacker. If you perform penetration tests of web applications, this will enable you to provide high-quality remediation advice to the owners of the applications you compromise.

## Who Should Read This Book

This book’s primary audience is anyone who has a personal or professional interest in attacking web applications. It is also aimed at anyone responsible for developing and administering web applications. Knowing how your enemies operate will help you defend against them.

We assume that you are familiar with core security concepts such as logins and access controls and that you have a basic grasp of core web technologies such as browsers, web servers, and HTTP. However, any gaps in your current knowledge of these areas will be easy to remedy, through either the explanations contained in this book or references elsewhere.

In the course of illustrating many categories of security flaws, we provide code extracts showing how applications can be vulnerable. These examples are simple enough that you can understand them without any prior knowledge of the language in question. But they are most useful if you have some basic experience with reading or writing code.

## How This Book Is Organized

This book is organized roughly in line with the dependencies between the different topics covered. If you are new to web application hacking, you should read the book from start to finish, acquiring the knowledge and understanding you need to tackle later chapters. If you already have some experience in this area, you can jump straight into any chapter or subsection that particularly interests you. Where necessary, we have included cross-references to other chapters, which you can use to fill in any gaps in your understanding.

We begin with three context-setting chapters describing the current state of web application security and the trends that indicate how it is likely to evolve in the near future. We examine the core security problem affecting web applications and the defense mechanisms that applications implement to address this problem. We also provide a primer on the key technologies used in today’s web applications.

The bulk of the book is concerned with our core topic — the techniques you can use to break into web applications. This material is organized around the key tasks you need to perform to carry out a comprehensive attack. These include mapping the application’s functionality, scrutinizing and attacking its core defense mechanisms, and probing for specific categories of security flaws.

The book concludes with three chapters that pull together the various strands introduced in the book. We describe the process of finding vulnerabilities in an application’s source code, review the tools that can help when you hack web applications, and present a detailed methodology for performing a comprehensive and deep attack against a specific target.

### Chapter 1: Web Application (In)security
- Describes the current state of security in web applications on the Internet today.
- Despite common assurances, the majority of applications are insecure and can be compromised in some way with a modest degree of skill.
- Examines the key factors that contribute to the weak security posture of today’s applications.
- Describes how defects in web applications can leave an organization’s wider technical infrastructure highly vulnerable to attack.

### Chapter 2: Core Defense Mechanisms
- Describes the key security mechanisms that web applications employ to address the fundamental problem that all user input is untrusted.
- These mechanisms are the means by which an application manages user access, handles user input, and responds to attackers.
- Also includes the functions provided for administrators to manage and monitor the application itself.
- The application’s core security mechanisms also represent its primary attack surface, so you need to understand how these mechanisms are intended to function before you can effectively attack them.

### Chapter 3: Web Application Technologies
- A short primer on the key technologies you are likely to encounter when attacking web applications.
- Covers all relevant aspects of the HTTP protocol, the technologies commonly used on the client and server sides, and various schemes used to encode data.