### 6.2 Narrow-Destructive Privacy in the Random Oracle Model

We now enhance the protocol from [14] using random oracles. Specifically, we use two oracles, \( F \) and \( G \), which implement random functions from \(\{0, 1\}^{\alpha + k + 1}\) and \(\{0, 1\}^k\) to \(\{0, 1\}^k\), respectively. The tag generation algorithm \( \text{SetupTag}(ID) \) selects a random \( k \)-bit key \( K \) and initializes the state \( S = K \). The protocol is illustrated in Figure 2.

#### Protocol Steps:
1. **Reader**: Picks a random \( \alpha \)-bit string \( a \) and sends it to the tag.
2. **Tag** (with state \( S \)):
   - Computes \( c = F(0, S, a) \).
   - Stores \( d_0 = F(1, S, a) \) in temporary memory.
   - Updates its state to \( S = G(S) \).
3. **Reader**:
   - Searches for \((ID, K)\) in the database such that \( c = F(0, G^i(K), a) \) with \( i < t \).
   - Retrieves \( ID \) and computes \( d = F(1, G^i(K), a) \).
   - Sends \( d \) to the tag and updates the database entry \((ID, K)\) to \((ID, G^i(K))\).
4. **Tag**:
   - Checks if \( d = d_0 \).

After \( t \) malicious queries, the tag's state and the database become desynchronized, violating the conditions of Lemma 3.

#### Security Proof:
- **Correctness**: We apply Lemma 2 to establish reader correctness. Tag correctness is straightforward when the tag is correctly identified by the reader.
- **Security**: To prove simple reader authentication, we assume without loss of generality that the reader never picks the same \( a \) twice and that the state update \( S \leftarrow G(S) \) does not cycle during the attack. We consider a protocol transcript \((a, c, d)\) on the tag side with no matching conversation with the reader and stop the adversary before sending \( d \) to the tag.
  - If \( a \) was not released by any protocol session, the query \( (1, S, a) \) was made only once, making \( d_0 \) random and matching \( d \) with negligible probability.
  - If \( a \) was released by a protocol session, it was selected only once. Let \( \hat{c} \) be the value sent back to the reader and \( \hat{d} \) its response.
    - If \( c \neq \hat{c} \), the reader cannot identify the tag, and \( \hat{d} \) comes from a random query, making \( d_0 \) random and matching \( d \) with negligible probability.
    - If \( c = \hat{c} \), since conversations are not matching, \( d \neq \hat{d} \). If the reader does not identify the tag, we return to the previous case. Otherwise, \( d_0 = \hat{d} \) and \( d \neq d_0 \), so the tag does not authenticate the reader.
- **Narrow-Destructive Privacy**: The proof from [14] applies to the enhanced protocol if we simulate \( d \) on the reader side using the lazy sampling technique, similar to how \( c \) is simulated on the tag side.

### 6.3 Narrow-Strong+Forward Privacy

We further enhance the protocol from [14] using an IND-CCA Public-Key Cryptosystem (PKC). A PKC includes a key generator, an encryption algorithm, and a decryption algorithm. Correctness ensures that the decryption of the encryption of any \( x \) is always \( x \). The scheme is IND-CCA-secure if all polynomial-time adversaries win the IND-CCA game with negligible advantage. In the IND-CCA game, the adversary receives a public key, makes decryption queries, submits two plaintexts, receives the encryption of one, and tries to guess which plaintext was encrypted.

#### Setup:
- **Reader**: Generates a private/public key pair \((K_S, K_P)\).
- **Tag**: \( \text{SetupTag}(ID) \) picks a \( k \)-bit key \( K \) and sets the initial state to \( S = (K_P, ID, K) \).

#### Protocol Steps:
1. **Reader**: Sends an identification request with a random \( \alpha \)-bit string \( a \).
2. **Tag**:
   - Picks a random \( \beta \)-bit string \( b \) and stores it in temporary memory.
   - Sends \( c = \text{Enc}_{K_P}(ID || K || a || b) \) to the reader.
3. **Reader**:
   - Decrypts \( c \) to get \( ID || K || a || d \).
   - Checks if \( a \) is correct and \((ID, K)\) is in the database. If not, \( d \) is set to a random value.
   - Sends \( d \) to the tag.
4. **Tag**: Checks if \( b = d \).

#### Security Proof:
- **Correctness**: Trivial from the correctness of the cryptosystem.
- **Security**: To prove simple security, we assume the reader never picks the same \( a \) twice. We consider a protocol transcript \((a, c, d)\) on the tag side with no matching conversation with the reader and stop the adversary before sending \( d \) to the tag.
  - If \((a, c)\) has a matching conversation, the reader released some \( \hat{d} \) different from \( d \), failing reader authentication.
  - Otherwise, sending \( c \) in any other reader protocol session would not match the corresponding \( \hat{a} \) since it must differ from \( a \). Simulating the reader for sending \( c \) is easy: just pick a random \( \hat{d} \). We can simulate the reader using a decryption oracle that is never queried with \( c \). If we simulate the tag by asking the encryption of \( ID || K || a \) concatenated with a random \( b \) chosen by a challenger, we obtain an IND-CCA adversary who guesses this \( b \). Thanks to IND-CCA security, it succeeds with negligible probability, proving simple reader authentication.
- **Narrow-Strong Privacy**: The proof from [14] applies to the enhanced protocol.

### 7. Conclusion

We have formalized the notion of mutual authentication in RFID schemes, as well as security and privacy. To address corruption, we assume tags have temporary memory that erases itself when the tag loses power. We have identified protocols that fail to provide privacy and enriched previously proposed protocols to achieve mutual authentication. We leave open the problem of achieving weak and narrow-forward privacy without public-key cryptography.

### References

[1] G. Avoine. Cryptography in Radio Frequency Identification and Fair Exchange Protocols. PhD thesis, EPFL, Lausanne, Switzerland, December 2005. http://library.epfl.ch/theses/?nr=3407.

[2] G. Avoine, E. Dysli, and P. Oechslin. Reducing time complexity in RFID systems. In B. Preneel and S. Tavares, editors, Selected Areas in Cryptography – SAC 2005, volume 3897 of Lecture Notes in Computer Science, pages 291–306, Kingston, Canada, August 2005. Springer-Verlag.

[3] M. Burmester, T. van Le, and B. de Medeiros. Provably secure ubiquitous systems: Universally composable RFID authentication protocols. In Conference on Security and Privacy for Emerging Areas in Communication Networks – SecureComm 2006, Baltimore, Maryland, USA, August-September 2006. IEEE.

[4] T. Dimitriou. A lightweight RFID protocol to protect against traceability and cloning attacks. In Conference on Security and Privacy for Emerging Areas in Communication Networks – SecureComm 2005, Athens, Greece, September 2005. IEEE.

[5] M. Feldhofer, S. Dominikus, and J. Wolkerstorfer. Strong authentication for RFID systems using the AES algorithm. In M. Joye and J.-J. Quisquater, editors, Workshop on Cryptographic Hardware and Embedded Systems – CHES 2004, volume 3156 of Lecture Notes in Computer Science, pages 357–370, Boston, Massachusetts, USA, August 2004. IACR, Springer-Verlag.

[6] A. Juels and S. Weis. Defining strong privacy for RFID. Cryptology ePrint Archive, Report 2006/137, 2006.

[7] C. H. Lim and T. Kwon. Strong and robust RFID authentication enabling perfect ownership transfer. In P. Ning, S. Qing, and N. Li, editors, Conference on Information and Communications Security – ICICS 2006, volume 4307 of Lecture Notes in Computer Science, pages 1–20, Raleigh, North Carolina, USA, December 2006. Springer-Verlag.

[8] D. Molnar and D. Wagner. Privacy and security in library RFID: Issues, practices, and architectures. In B. Pfitzmann and P. Liu, editors, Conference on Computer and Communications Security – ACM CCS 2004, pages 210–219, Washington, DC, USA, October 2004. ACM, ACM Press.

[9] M. Ohkubo and K. Suzuki. RFID privacy issues and technical challenges. Communications of the ACM, 48(9):66–71, 2005.

[10] M. Ohkubo, K. Suzuki, and S. Kinoshita. Cryptographic approach to “privacy-friendly” tags. In RFID Privacy Workshop 2003, MIT, MA, USA, November 2003.

[11] M. Ohkubo, K. Suzuki, and S. Kinoshita. Efficient hash-chain based RFID privacy protection scheme. In International Conference on Ubiquitous Computing – Ubicomp 2004, Workshop Privacy: Current Status and Future Directions, Nottingham, England, September 2004.

[12] G. Tsudik. A family of dunces: Trivial RFID identification and authentication protocols. In N. Borisov and P. Golle, editors, Privacy Enhancing Technologies – PET 2007, volume 4776 of Lecture Notes in Computer Science, pages 45–61, Ottawa, Canada, 2007. Springer-Verlag.

[13] T. van Le, M. Burmester, and B. de Medeiros. Universally composable and forward secure RFID authentication and authenticated key exchange. In F. Bao and S. Miller, editors, ACM Symposium on Information, Computer and Communications Security – ASIACCS 2007, pages 242–252, Singapore, 2007. ACM.

[14] S. Vaudenay. On privacy models for RFID. In T. Okamoto, editor, Advances in Cryptology – Asiacrypt 2007, volume 4833 of Lecture Notes in Computer Science, pages 68–87, Kuching, Malaysia, December 2007. Springer-Verlag.

[15] S. Weis, S. Sarma, R. Rivest, and D. Engels. Security and privacy aspects of low-cost radio frequency identification systems. In D. Hutter, G. Müller, W. Stephan, and M. Ullmann, editors, International Conference on Security in Pervasive Computing – SPC 2003, volume 2802 of Lecture Notes in Computer Science, pages 454–469, Boppard, Germany, March 2003. Springer-Verlag.