# WMI Attacks, Real-Time Defense, and Advanced Forensic Analysis

## Copyright
Copyright © 2015, FireEye, Inc. All rights reserved.

## Dedication
This talk is dedicated to hunting down APT 29.

## Introduction
### Presenters
- Willi Ballenthin
- Matt Graeber
- Claudiu Teodorescu

### DEF CON 23

## About the Speakers
### Willi Ballenthin
- @williballenthin
- Reverse Engineer at FireEye Labs Advanced Reverse Engineering (FLARE) Team
- Forensic Analyst
- Researcher
- Instructor

### Matt Graeber
- @mattifestation
- Reverse Engineer at FireEye Labs Advanced Reverse Engineering (FLARE) Team
- Speaker at Black Hat, MS Blue Hat, BSides LV and Augusta, DerbyCon
- Black Hat Trainer
- Microsoft MVP – PowerShell
- GitHub Projects: PowerSploit, PowerShellArsenal, Position Independent Shellcode in C, etc.
- “Living off the Land” Proponent
- Perpetual n00b

### Claudiu Teodorescu
- @cteo13
- Reverse Engineer at FireEye Labs Advanced Reverse Engineering (FLARE) Team
- Forensic Researcher
- Crypto Analyst
- GitHub Project: WMIParser
- Soccer Player

## Outline
### Session #1: Background, Motivations, Attack Examples
- Abridged History of WMI Malware
- WMI Architecture
- WMI Query Language (WQL)
- WMI Eventing
- Remote WMI
- WMI Attack Lifecycle
- Providers

### Session #2: File Format, Investigations, Real-Time Defense, Mitigations
- WMI Forensics
- Managed Object Format (MOF)
- Representation of MOF Primitives
- Investigation Methodology - A Mock Investigation
- WMI Attack Detection
- WMI Attack Mitigations

## WMI Malware History
### ~2010 - Stuxnet
- Exploited MS10-061 – Windows Printer Spooler
- Exploited an arbitrary file write vulnerability
- WMI provided a generic means of turning a file write into SYSTEM code execution
- The attackers dropped a MOF file to gain SYSTEM-level execution
- [Reference](http://poppopret.blogspot.com/2011/09/playing-with-mof-files-on-windows-for.html)

### 2010 - Ghost
- Utilized permanent WMI event subscriptions to:
  - Monitor changes to the "Recent" folder
  - Compress and upload all new documents
  - Activate an ActiveX control that uses IE as a C2 channel
- [Reference](http://la.trendmicro.com/media/misc/understanding-wmi-malware-research-paper-en.pdf)

### 2014 – WMI Shell (Andrei Dumitrescu)
- Uses WMI as a C2 channel
- WMI namespaces used to store data
- [Reference](http://2014.hackitoergosum.org/slides/day1_WMI_Shell_Andrei_Dumitrescu.pdf)

### 2015 – APT 29
- Heavy reliance on WMI and PowerShell
- Custom WMI class creation
- WMI repository used to store payloads of arbitrary size
- Results of commands added to WMI object properties
- Thanks to our Mandiant investigators: Nick Carr, Matt Dunwoody, DJ Palombo, and Alec Randazzo
- [Reference](https://www.fireeye.com/blog/threat-research/2015/04/apt29_a_new_breed_of_apt.html)

## WMI Basics
### What is WMI?
- **Windows Management Instrumentation**
- Powerful local and remote system management infrastructure
- Present since Win98 and NT4
- Can be used to:
  - Obtain system information (Registry, File System, etc.)
  - Execute commands
  - Subscribe to events
- Useful infrastructure for both admins and attackers

### WMI Architecture
- Implements the CIM and WBEM standards to:
  - Provide an object schema to describe "managed components"
  - Populate objects via WMI providers
  - Store persistent objects in the WMI/CIM repository
  - Query objects using WQL
  - Transmit object data via DCOM and WinRM
  - Perform actions on objects (class methods, events, etc.)

### Interacting with WMI
#### Utilities
- **PowerShell**
  - "Blue is the New Black" - @obscuresec
  - PowerShell is awesome
- **wmic.exe**
  - Known by pentesters and attackers
  - Installed everywhere
  - Gets most tasks done but has some limitations
- **Microsoft CIM Studio**
  - Free
  - Very dated but still works
  - Good for WMI discovery/research
- **Sapien WMI Explorer**
  - Commercial utility
  - Great for WMI discovery/research
  - Many additional features
  - Huge improvement over CIM Studio
- **wbemtest.exe**
  - GUI-based WMI utility
  - Very powerful
  - Rarely blacklisted
- **winrm.exe**
  - Not well known
  - Can interface with WMI over WinRM
  - Useful if PowerShell is not available
  - Example Commands:
    - `winrm invoke Create wmicimv2/Win32_Process @{CommandLine="notepad.exe";CurrentDirectory="C:\"}`
    - `winrm enumerate http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_Process`
    - `winrm get http://schemas.microsoft.com/wbem/wsman/1/wmi/root/cimv2/Win32_OperatingSystem`

- **Linux Tools**
  - `wmic`, `wmis`, `wmis-pth` (@passingthehash)
  - [Reference](http://passing-the-hash.blogspot.com/2013/04/missing-pth-tools-writeup-wmic-wmis-curl.html)
- **Windows Script Host Languages**
  - VBScript
  - JScript
- **IWbem* COM API**
- **.NET System.Management Classes**

## WMI Query Language (WQL)
- SQL-like query language used to:
  - Filter WMI object instances
  - Register event triggers
- Three query classes:
  1. Instance Queries
  2. Event Queries
  3. Meta Queries

### Instance Queries
- Format: `SELECT [Class property name|*] FROM [CLASS NAME]`
- Example: `SELECT * FROM Win32_Process WHERE Name LIKE "%chrome%"`

### Event Queries
- Format: `SELECT [Class property name|*] FROM [INTRINSIC CLASS NAME] WITHIN [POLLING INTERVAL]`
- Format: `SELECT [Class property name|*] FROM [EXTRINSIC CLASS NAME]`
- Examples:
  - `SELECT * FROM __InstanceCreationEvent WITHIN 15 WHERE TargetInstance ISA 'Win32_LogonSession' AND TargetInstance.LogonType = 2`
  - `SELECT * FROM Win32_VolumeChangeEvent WHERE EventType = 2`
  - `SELECT * FROM RegistryKeyChangeEvent WHERE Hive='HKEY_LOCAL_MACHINE' AND KeyPath='SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run'`

### Meta Queries
- Format: `SELECT [Class property name|*] FROM [Meta_Class|SYSTEM CLASS NAME]`
- Examples:
  - `SELECT * FROM Meta_Class WHERE __Class LIKE "Win32%"`
  - `SELECT Name FROM __NAMESPACE`

## WMI Eventing
### WMI Events
- WMI can trigger off nearly any conceivable event
- Three requirements:
  1. Filter – An action to trigger off of
  2. Consumer – An action to take upon triggering the filter
  3. Binding – Registers a FilterConsumer
- Local events run for the lifetime of the host process
- Permanent WMI events are persistent and run as SYSTEM

### Intrinsic Event Types
- Included in every namespace
- Must be captured at a polling interval
- Possible to miss event firings
- Examples: `__ClassCreationEvent`, `__InstanceOperationEvent`, `__InstanceCreationEvent`, `__MethodInvocationEvent`, `__InstanceModificationEvent`, `__InstanceDeletionEvent`, `__TimerEvent`, `__NamespaceOperationEvent`, `__NamespaceModificationEvent`, `__NamespaceDeletionEvent`, `__NamespaceCreationEvent`, `__ClassOperationEvent`, `__ClassDeletionEvent`, `__ClassModificationEvent`

### Extrinsic Event Types
- Non-system classes that fire immediately
- No chance of missing these
- Generally don’t include as much information
- Notable extrinsic events:
  - `ROOT\CIMV2:Win32_ComputerShutdownEvent`
  - `ROOT\CIMV2:Win32_IP4RouteTableEvent`
  - `ROOT\CIMV2:Win32_ProcessStartTrace`
  - `ROOT\CIMV2:Win32_ModuleLoadTrace`
  - `ROOT\CIMV2:Win32_ThreadStartTrace`
  - `ROOT\CIMV2:Win32_VolumeChangeEvent`
  - `ROOT\CIMV2:Msft_WmiProvider*`
  - `ROOT\DEFAULT:RegistryKeyChangeEvent`
  - `ROOT\DEFAULT:RegistryValueChangeEvent`

### Consumers
- The action taken upon firing an event
- Standard event consumers:
  - `LogFileEventConsumer`
  - `ActiveScriptEventConsumer`
  - `NTEventLogEventConsumer`
  - `SMTPEventConsumer`
  - `CommandLineEventConsumer`
- Present in the following namespaces:
  - `ROOT\CIMV2`
  - `ROOT\DEFAULT`

### Permanent WMI Events
- Event subscriptions persistent across reboots
- Requirements:
  1. Filter – Creation of a `__EventFilter` instance
  2. Consumer – Creation of a derived `__EventConsumer` instance
  3. Binding – Creation of a `__FilterToConsumerBinding` instance

## Remote WMI
### Protocols
- **DCOM**
  - Connections established on port 135
  - Subsequent data exchanged on ports dictated by `HKEY_LOCAL_MACHINE\Software\Microsoft\Rpc\Internet – Ports (REG_MULTI_SZ)`
  - Configurable via `DCOMCNFG.exe`
  - Not firewall friendly
  - By default, the WMI service (`Winmgmt`) is running and listening on port 135
  - [MSDN: Setting Up a Fixed Port for WMI](https://docs.microsoft.com/en-us/windows/win32/wmisdk/setting-up-a-fixed-port-for-wmi)
  - [MSDN: Connecting Through Windows Firewall](https://docs.microsoft.com/en-us/windows/win32/wmisdk/connecting-through-windows-firewall)

- **WinRM/PowerShell Remoting**
  - SOAP protocol based on the WSMan specification
  - Encrypted by default
  - Single management port – 5985 (HTTP) or 5986 (HTTPS)
  - Official remote management protocol in Windows 2012 R2+
  - Supports WMI and code execution, object serialization
  - Scriptable configuration via WSMan “drive” in PowerShell

---

This document provides a comprehensive overview of WMI attacks, real-time defense, and advanced forensic analysis, including historical context, technical details, and practical examples.