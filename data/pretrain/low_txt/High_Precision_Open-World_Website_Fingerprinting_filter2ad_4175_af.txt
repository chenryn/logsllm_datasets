### Website Fingerprinting Attacks and Defenses: A Review

#### Historical Context and Evolution of Attacks

At the time when Tor was implementing equalized cell sizes, Herrmann et al. [8] demonstrated that their attack, as well as the one by Liberatore and Levine [13], did not succeed against Tor, although they were effective against SSH and selected VPNs. Lu et al. [15], Panchenko et al. [20], and Cai et al. [3] were among the first to achieve success in attacking Tor. Subsequent work by Wang et al. [29], Hayes et al. [7], another study by Panchenko et al. [19], and more recent efforts using deep learning by Rimmer et al. [23] and Sirinam et al. [25] improved attack accuracy and reduced computational time. These studies also aimed to lower the false positive rate for open-world effectiveness.

#### Precision and Base Rate Fallacy

Previous works on website fingerprinting (WF) have discussed the base rate fallacy, but often did not include the base rate in their analysis or experiments. Panchenko et al. [19] highlighted issues with precision, noting that their attack was not precise, and found that WF attacks generally fail in a large open world if they lack precision. This point underscores the motivation for our paper. Hayes et al. [7] achieved a more precise attack using the k-neighbors strategy, similar to an earlier work by Wang et al. [29]. Our research shows that our proposed optimizations (POs) are more effective and can be applied to any attack.

### Conclusion and Future Work

This work addresses the open problem of open-world website fingerprinting (OWF). We found that OWF classifiers struggle in large, open environments. Our POs enhance the effectiveness of these classifiers and can be applied to various existing attacks.

### References

[1] BISSIAS, G. D., LIBERATORE, M., JENSEN, D., AND LEVINE, B. N. Privacy Vulnerabilities in Encrypted HTTP Streams. In Privacy Enhancing Technologies (2006), Springer, pp. 1–11.

[2] CAI, X., NITHYANAND, R., WANG, T., GOLDBERG, I., AND JOHNSON, R. A Systematic Approach to Developing and Evaluating Website Fingerprinting Defenses. In Proceedings of the 21st ACM Conference on Computer and Communications Security (2014).

[3] CAI, X., ZHANG, X. C., JOSHI, B., AND JOHNSON, R. Touching from a Distance: Website Fingerprinting Attacks and Defenses. In Proceedings of the 19th ACM Conference on Computer and Communications Security (2012), pp. 605–616.

[4] CHANG, C.-C., AND LIN, C.-J. LIBSVM: a library for support vector machines. ACM Transactions on Intelligent Systems and Technology (TIST) 2, 3 (2011), 27.

[5] CHENG, H., AND AVNUR, R. Traffic Analysis of SSL-Encrypted Web Browsing. http://www.cs.berkeley.edu/∼daw/teaching/cs261-f98/projects/final-reports/ronathan-heyning.ps, 1998.

[6] DINGLEDINE, R., MATHEWSON, N., AND SYVERSON, P. Tor: The Second-Generation Onion Router. In Proceedings of the 13th USENIX Security Symposium (2004).

[7] HAYES, J., AND DANEZIS, G. k-Fingerprinting: A Robust Scalable Website Fingerprinting Technique. In Proceedings of the 25th USENIX Security Symposium (2016).

[8] HERRMANN, D., WENDOLSKY, R., AND FEDERRATH, H. Website Fingerprinting: Attacking Popular Privacy Enhancing Technologies with the Multinomial Naïve-Bayes Classifier. In Proceedings of the 2009 ACM Workshop on Cloud Computing Security (2009), pp. 31–42.

[9] HINTZ, A. Fingerprinting Websites Using Traffic Analysis. In Privacy Enhancing Technologies (2003), Springer, pp. 171–178.

[10] JANSEN, R., JUAREZ, M., GALVEZ, R., ELAHI, T., AND DIAZ, C. Inside job: Applying traffic analysis to measure Tor from within. In Proceedings of the 25th Network and Distributed System Security Symposium (2018).

[11] JUAREZ, M., AFROZ, S., ACAR, G., DIAZ, C., AND GREENSTADT, R. A Critical Evaluation of Website Fingerprinting Attacks. In Proceedings of the 21st ACM Conference on Computer and Communications Security (2014).

[12] JUAREZ, M., IMANI, M., PERRY, M., DIAZ, C., AND WRIGHT, M. Toward an Efficient Website Fingerprinting Defense. In Computer Security–ESORICS 2016. Springer, 2016, pp. 27–46.

[13] LIBERATORE, M., AND LEVINE, B. N. Inferring the Source of Encrypted HTTP Connections. In Proceedings of the 13th ACM Conference on Computer and Communications Security (2006), pp. 255–263.

[14] LINUX FOUNDATION. Let’s Encrypt Stats — Percentage of Web Pages Loaded by Firefox Using HTTPS. https://letsencrypt.org/stats, 2018. Accessed Dec. 2018.

[15] LU, L., CHANG, E.-C., AND CHAN, M. C. Website Fingerprinting and Identification Using Ordered Feature Sequences. In Computer Security–ESORICS 2010. Springer, 2010, pp. 199–214.

[16] NATIONAL RESEARCH COUNCIL. Strengthening forensic science in the United States: a path forward. National Academies Press, 2009.

[17] NITHYANAND, R., CAI, X., AND JOHNSON, R. Glove: A Bespoke Website Fingerprinting Defense. In Proceedings of the 13th ACM Workshop on Privacy in the Electronic Society (2014).

[18] OVERDORF, R., JUAREZ, M., ACAR, G., GREENSTADT, R., AND DIAZ, C. How Unique is Your .onion?: An Analysis of the Fingerprintability of Tor Onion Services. In Proceedings of the 24th ACM Conference on Computer and Communications Security (2017).

[19] PANCHENKO, A., LANZE, F., ZINNEN, A., HENZE, M., PENNEKAMP, J., WEHRLE, K., AND ENGEL, T. Website Fingerprinting at Internet Scale. In Proceedings of the 23rd Network and Distributed System Security Symposium (2016).

[20] PANCHENKO, A., NIESSEN, L., ZINNEN, A., AND ENGEL, T. Website Fingerprinting in Onion Routing Based Anonymization Networks. In Proceedings of the 10th ACM Workshop on Privacy in the Electronic Society (2011), pp. 103–114.

[21] PERRY, M. A Critique of Website Traffic Fingerprinting Attacks. https://blog.torproject.org/blog/critique-website-traffic-fingerprinting-attacks, November 2013. Accessed Feb. 2015.

[22] PIETRASZEK, T. Using adaptive alert classification to reduce false positives in intrusion detection. In Recent Advances in Intrusion Detection (2004), pp. 102–124.

[23] RIMMER, V., PREUVENEERS, D., JUAREZ, M., VAN GOETHEM, T., AND JOOSEN, W. Automated website fingerprinting through deep learning.

[24] SAKS, M. J., AND KOEHLER, J. J. The coming paradigm shift in forensic identification science. Science 309, 5736 (2005), 892–895.

[25] SIRINAM, P., IMANI, M., JUAREZ, M., AND WRIGHT, M. Deep fingerprinting: Undermining website fingerprinting defenses with deep learning. In Proceedings of the 25th ACM Conference on Computer and Communications Security (2018), ACM, pp. 1928–1943.

[26] SUN, Q., SIMON, D. R., WANG, Y.-M., RUSSELL, W., PADMANABHAN, V. N., AND QIU, L. Statistical Identification of Encrypted Web Browsing Traffic. In Proceedings of the 2002 IEEE Symposium on Security and Privacy (2002), IEEE, pp. 19–30.

[27] SWETS, J. A. ROC analysis applied to the evaluation of medical imaging techniques. Investigative radiology 14, 2 (1979), 109–121.

[28] WANG, T. Website Fingerprinting: Attacks and Defenses. PhD thesis, University of Waterloo, 2016.

[29] WANG, T., CAI, X., NITHYANAND, R., JOHNSON, R., AND GOLDBERG, I. Effective Attacks and Provable Defenses for Website Fingerprinting. In Proceedings of the 23rd USENIX Security Symposium (2014).

[30] WANG, T., AND GOLDBERG, I. Improved Website Fingerprinting on Tor. In Proceedings of the 12th ACM Workshop on Privacy in the Electronic Society (2013), pp. 201–212.

[31] WANG, T., AND GOLDBERG, I. On Realistically Attacking Tor with Website Fingerprinting. In Privacy Enhancing Technologies (2016), Springer.

[32] WANG, T., AND GOLDBERG, I. Walkie-Talkie: An Efficient Defense Against Passive Website Fingerprinting Attacks. In Proceedings of the 26th USENIX Security Symposium (2017).

### Appendix

Here we describe each of the six previously published attacks we tested with our POs. The attacks are Bi-XCor [1], Pa-SVM [20], Ca-OSAD [3], Wa-kNN [29], Ha-kFP [7], and Pa-CUMUL [19]. We detail how each classifier represents packet sequences \( P \) as \( R(P) \), the distance \( d(P, P') \) between two packet sequences \( P \) and \( P' \), the training and testing procedures. The testing procedure is described by specifying the match function; each classifier assigns the element to the class that scores the highest with the match function.

We denote packet sequences as \( P = \langle p_1, p_2, \ldots, p_n \rangle \), where \( p_i = (t_i, \ell_i) \), \( t_i \) is the interpacket time between \( p_{i-1} \) and \( p_i \), and \( \ell_i \) is the byte length of packet \( p_i \), with positive packet lengths representing outgoing packets from the client and negative packet lengths representing incoming packets to the client. With Tor cells, \( \ell_i \in \{-1, 1\} \) as all cells have the same size. \( P \) represents the WF attacker’s information, and the goal is to deduce which web page it came from.

#### Bi-XCor
**Representation:**
\[ R(P) = (R_t(P), R_\ell(P)) \]
where:
\[ R_t(P) = \langle t_1, t_2, \ldots, t_n \rangle \]
\[ R_\ell(P) = \langle \ell_1, \ell_2, \ldots, \ell_n \rangle \]

**Distance:**
Consider two lists \( a \) and \( b \) with mean \( \bar{a}, \bar{b} \) and standard deviation \( \sigma_a, \sigma_b \) respectively. The cross-correlation function \( X(a, b) \) between them is defined as:
\[ X(a, b) = \frac{\sum_{i=1}^{\min(|a|, |b|)} (a_i - \bar{a})(b_i - \bar{b})}{\min(|a|, |b|) \cdot \sigma_a \cdot \sigma_b} \]

Thus, the distance is:
\[ d(P, P') = 2 - X(R_t(P), R_t(P')) - X(R_\ell(P), R_\ell(P')) \]

**Training:**
Each class \( C \) is represented as \( R(C) = (R_t(C), R_\ell(C)) \), where the i-th element of \( R_t(C) \) is the mean of all \( t_i \) for training packet sequences from class \( C \), and similarly for \( R_\ell(C) \).

**Testing:**
\[ \text{match}(P, C) = d(R(P), R(C)) \]

#### Pa-SVM
**Representation:**
We extract a number of features from each packet sequence related to packet ordering, directions, and sizes: \( R(P) \). For the list of features, refer to the original work [20] or our code.

**Distance:**
We use the radial basis function with \( \gamma = 2^{-25} \) to compute distances between the feature representations of packet sequences:
\[ d(P, P') = 1 - e^{-\gamma ||R(P) - R(P')||^2} \]

**Training:**
We train an SVM on the above pairwise distances by finding support vectors which separate classes.

**Testing:**
The matching function uses one-against-one SVM classification as described in Section III-B.

#### Ca-OSAD
**Representation:**
\[ R(P) = \{\ell_1, \ell_2, \ldots\} \]

**Distance:**
The pairwise distance between packet sequences \( P \) and \( P' \) is:
\[ d(P, P') = 1 - e^{-2 \cdot \text{OSAD}(P, P')^2 / \min(|P|, |P'|)} \]
where \( \text{OSAD}(P, P') \) is the Optimal String Alignment Distance between \( R(P) \) and \( R(P') \).

**Training:**
We train an SVM using the custom kernel calculated from the above pairwise distances.

**Testing:**
The matching function uses one-against-one SVM classification as described in Section III-B.

#### Wa-kNN
**Representation:**
We extract a number of features from each packet sequence related to packet ordering, directions, and sizes: \( R(P) \). For the list of features, refer to the original work [29] or our code.

**Distance:**
We use a weighted L1-distance between \( P \) and \( P' \):
\[ d(P, P') = \sum_{i=1}^{|F|} w_i |f_i - f'_i| \]

**Training:**
We learn weights \( w_i \) that optimize the accuracy of the weighted distance.

**Testing:**
\[ \text{match}(P, C) = \sum_{P' \in C} d(P, P') / |C| \]

#### Ha-kFP
**Representation:**
We extract features from each packet sequence, similar to Wa-kNN. For the list of features, refer to the original work [7] or our code.

**Distance:**
Ha-kFP does not produce a distance.

**Training:**
We train a Random Forest classifier with 1000 decision trees, where each tree draws a random sample of the input elements with replacement, resulting in a sample of equal size to the input. Each leaf \( L \) of a decision tree records \( L(x) \), the number of training samples of each class that fell in that leaf, for class \( x \).

**Testing:**
If \( P \) falls in leaf \( L \) for decision tree \( i \), we calculate:
\[ \text{match}_i(P, C) = L(C) / \sum_x L(x) \]
Then:
\[ \text{match}(P, C) = \sum_{i=1}^{1000} \text{match}_i(P, C) \]

#### Pa-CUMUL
**Representation:**
We extract features from each packet sequence based on total size, time, and 100 linear interpolations of aggregated packet sizes. For the list of features, refer to the original work [19] or our code.

**Distance:**
We use the radial basis function with \( \gamma = 2^{-28} \) to compute distances between the feature representations of packet sequences:
\[ d(P, P') = 1 - e^{-\gamma ||R(P) - R(P')||^2} \]

**Training:**
We train an SVM on the above pairwise distances by finding support vectors which separate classes.

**Testing:**
The matching function uses one-against-one SVM classification as described in Section III-B.

### Data Collection

We collected the Wikipedia dataset (100x100+10000) as follows. For the non-monitored pages, we started from one of five pages: the main page, the portal of current events, the “United States” page, the “India” page, and the “World War II” page. Then, we randomly traversed links on the page to other Wikipedia articles, avoiding special pages and pages corresponding to dates. The random walk lasted for a uniform length between 1 to 20 steps, after which we would restart at one of the above five pages. This was meant to simulate a client who surfed Wikipedia pages starting from a topic of interest. For the monitored pages, we manually chose ten politically/culturally sensitive topics, and for each topic, we manually chose ten relevant pages. The list of all pages in our dataset is available at:
\[ \text{https://github.com/OpenWF/openwf.git} \]

We also collected a different dataset used in Section IV-C as follows. For AJAX1 and AJAX2, we visited reddit.com and scrolled down. AJAX1 scrolls down every 1 to 5 seconds for up to 1000 pixels; AJAX2 scrolls down every 1 to 10 seconds for up to 500 pixels. Each stops after 20 to 40 seconds. LINKS1 and LINKS2 are based on en.wikipedia.org and follow a random walk. LINKS1 visits a new link every 1 to 5 seconds; LINKS2 visits a new link every 1 to 10 seconds, and each stops after 20 to 40 seconds. All randomness is uniform.