# SCOBA: Source Code Based Attestation on Custom Software

## Authors
Liang Gu, Yao Guo, Anbang Ruan, Qingni Shen, Hong Mei

### Affiliations
- **Institute of Software, School of Electronics Engineering and Computer Science, Peking University, Beijing, China**
- **Key Laboratory of High Confidence Software Technologies (Ministry of Education)**
- **School of Software and Microelectronics, Peking University, Beijing, China**

### Contact Information
- **Emails**: 
  - {guliang05, yaoguo, meih}@sei.pku.edu.cn
  - {ruanab, shenqn}@infosec.pku.edu.cn

## Abstract
Most existing attestation schemes focus on binary code and typically require a comprehensive list of known-good measurements for verification. However, many modern programs are custom-built, allowing end users to tailor, compile, and build source code into various versions, or even create entirely new versions from scratch. This makes it extremely difficult, if not impossible, for traditional schemes to attest to the integrity of custom-built software due to the potentially unlimited number of valid binaries. 

This paper introduces SCOBA, a novel Source Code Based Attestation framework designed specifically for custom software. Instead of relying on a list of known-good measurements, SCOBA focuses on the source code and provides a trusted building process to verify the resulting binaries based on the source files and build configuration. SCOBA uses a trusted verifier to certify the binary code of custom-built programs according to their source code and build configuration. For custom-built software based on open-source distributions, we have implemented a fully automatic trusted building system prototype using GCC and TPM. As a case study, we applied SCOBA to Gentoo and its Portage, a source code-based package management system. Experimental results show that remote attestation, a key feature of the Trusted Computing Group (TCG), can be made practically available to the free software community.

**Funding**: This work is supported by:
- National Basic Research Program of China (973) under Grant No. 2009CB320703
- Science Fund for Creative Research Groups of China under Grant No. 60821003
- National Key S&T Special Projects under Grant No. 2009ZX01039-001-001
- National High-Tech Research and Development Plan of China under Grant No. 2007AA010304 and No. 2009AA01Z139
- National Natural Science Foundation of China under Grant No. 60873238 and No. 60903178

**Permission**: Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.

**Conference**: ACSAC '10, Dec. 6-10, 2010, Austin, Texas, USA

**Copyright**: Copyright 2010 ACM 978-1-4503-0133-6/10/12 ...$10.00.

### Categories and Subject Descriptors
- **D.4.6 [Operating Systems]**: Security and Protection—Authentication, Invasive software
- **D.2.4 [Software Engineering]**: Distribution, Maintenance, and Enhancement—Restructuring, reverse engineering, and reengineering

### General Terms
- **Security**

### Keywords
- Remote attestation
- Custom software
- Trusted computing
- Free software
- Property-based attestation

## 1. Introduction
Modern IT systems often operate on open computer platforms across heterogeneous domains or over the public Internet. In such an environment, entities typically act independently and may not trust each other for mission-critical operations. Remote attestation provides a crucial mechanism to establish trust in an open network. According to the Trusted Computing Group (TCG) standards, remote attestation allows a challenger to verify the configuration integrity of a remote platform (the attester).

Recent years have seen various evolutions in remote attestation, including Integrity Measurement Architecture (IMA), program semantics attestation, security policy enforcement, property attestation, BIND, and remote attestation on program execution. Most existing remote attestation schemes rely on the integrity measurement of programs and configurations. The size of the known-good measurements database significantly limits the practicality of these schemes, especially for free and open-source software, where the variability in binary code makes verification challenging.

From a deployment perspective, software can be categorized into custom software and pre-packaged software. Custom software, particularly based on open-source distributions, allows users to tailor, configure, and build their own executables, leading to a wide variety of binary versions. Existing remote attestation schemes struggle with verifying custom-built software because maintaining a comprehensive database of known-good measurements for unpredictable versions is impractical.

To address these challenges, we propose SCOBA, a new Source COde Based Attestation framework. SCOBA links the specified binary code of custom software with its source code and certifies the generated binary code based on both the source code and build configuration.

### Key Contributions
- **Practical Attestation for Custom Software**: SCOBA solves the problem of maintaining a known-good measurements database for custom software, making it practical to attest customized software in open networks.
- **Trusted Building System (TBS)**: TBS enables another party to validate and certify the generated binary code of custom software according to its source code and build configuration.
- **Source Code-Based Approach**: This approach is more practical for obtaining software properties, as SCOBA binds the source code files and build configuration, allowing the trusted verifier to evaluate and test these information.
- **Flexible Framework**: The trusted verifier in SCOBA can be customized to accommodate different types of software, providing a flexible framework that can be adapted to various software development processes, as demonstrated in the case study on Gentoo.

### Organization
- **Section 2**: Background on custom software and dynamic root of trust.
- **Section 3**: Design of the SCOBA framework.
- **Section 4**: Implementation and evaluation of the SCOBA prototype.
- **Section 5**: Application of SCOBA in Gentoo.
- **Section 6**: Related work.
- **Section 7**: Discussion on possible improvements and applications.
- **Section 8**: Conclusion and future work.

## 2. Background

### 2.1 Custom Software
Custom software, also known as bespoke software, allows end users to design and implement software based on their specific requirements. Pre-packaged software, or "off-the-shelf" software, is released with specified configurations, such as installation packages under Windows, RPM packages, and Debian packages under Linux.

Custom software can be further categorized into:
- **Custom-Built Software**: Customization without modifying the source code files.
- **Fully Custom Software**: Customization with modifications to the source code files.

For custom-built software, users customize the software distribution before building but do not modify individual source code files. For fully custom software, users can modify the source code. SCOBA can automatically certify custom-built software, while fully custom software may require more sophisticated techniques like model checking and testing.

### 2.2 Dynamic Root of Trust
The TCG specifications introduce authenticated boot (or secure boot) to ensure the system boots into a secure state. However, static root of trust cannot guarantee the security of a runtime system. With technologies like AMD's Secure Virtual Machine (SVM) and Intel's Trusted Execution Technology (TXT), it is now possible to provide a dynamic root of trust for runtime systems. This supports a secure domain for dedicated systems at runtime. Studies leveraging dynamic root of trust include OSLO, Flicker, and TrustVisor. For custom software, the compilation process can run in a secure domain supported by a dynamic root of trust.

## 3. SCOBA Design

### 3.1 Attestation Framework
SCOBA is a new source code-based attestation framework designed to provide remote attestation for custom software. Instead of relying on a list of known-good measurements, SCOBA focuses on the source code and provides a trusted building process to verify the resulting binaries based on the source files and build configuration.

Three parties are involved in SCOBA:
- **Challenger**: Verifies the integrity of the custom software.
- **Aster**: The platform running the custom software.
- **Trusted Verifier**: Certifies the custom software by checking the source code and build configuration.

A typical scenario involves:
- The builder configures, tailors, and builds custom software P according to the challenger's requirements.
- The trusted verifier certifies the custom software by checking the source code and build configuration.
- The challenger uses the certificate to enable remote attestation on the custom software at runtime.

The trust chain in SCOBA extends from the TPM to the building process and finally to the attested custom software at runtime.

### 3.2 Trusted Building System (TBS)
To validate the generated binary code of custom software, we introduce a Trusted Building System (TBS). TBS enables a trusted building process for compiling custom software, as shown in Figure 1. The source code of the target program is tailored according to the end user's requirements and compiled into binary code. The binary code is bound with its corresponding source code and build configuration. The building process can be attested to prove the validity of the generated binary code. A trusted verifier then certifies the properties of the custom software based on the generated binary code, source code, and build configuration. At runtime, the challenger can use the certificate to perform remote attestation on the custom software.

### 3.3 Deployment Scenarios
Custom software deployment can occur on the same platform or on separate platforms for tailoring, compilation, and execution. For most existing custom software, the same platform is the most frequently used. However, if separate platforms are used, the design and implementation of the secure execution environment for the trusted building process may differ. These scenarios will be discussed in Section 3.3 and Section 4.

## 4. Implementation and Evaluation
We have implemented a fully automatic trusted building system prototype for SCOBA based on GCC and TPM. The prototype was tested with custom-built software, and experimental results show that remote attestation can be effectively applied to the free software community.

## 5. Application of SCOBA in Gentoo
As a case study, we applied SCOBA to Gentoo and its Portage, a source code-based package management system. The results demonstrate the practicality and effectiveness of SCOBA in real-world scenarios.

## 6. Related Work
Various remote attestation schemes and related studies are discussed, highlighting the limitations of existing approaches and the unique contributions of SCOBA.

## 7. Discussion
Possible improvements and applications of SCOBA are discussed, including potential enhancements to the trusted building process and the integration of more sophisticated certification techniques.

## 8. Conclusion and Future Work
In conclusion, SCOBA provides a practical and flexible framework for remote attestation of custom software. Future work will focus on expanding the scope of SCOBA and integrating it with more diverse software development processes.

---

This revised version aims to improve the clarity, coherence, and professionalism of the original text.