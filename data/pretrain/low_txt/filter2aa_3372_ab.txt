# Web Application Security: Tools, Techniques, and Resources

## Slide 33: Tools for Mirroring/Crawling Web Sites
- **Freeware**
  - **HTTrack (Open Source, Free)**
    - **Platforms:** UNIX/Windows
    - **Website:** [httrack.com](http://www.httrack.com/)
    - **Features:**
      - Can override `robots.txt` restrictions
      - No ads or spyware
      - Mozilla extension (Spiderzilla) available
  - **wget (UNIX)**
    - **Website:** [freshmeat.net/projects/wget/](http://freshmeat.net/projects/wget/)
- **Commercial**
  - **BlackWidow (Windows)**
    - **Website:** [softbytelabs.com](http://www.softbytelabs.com)
    - **Protocols:** HTTP, HTTPS, FTP

## Slide 34: Attack Agenda Roadmap – Authentication
- **Points of Attack:**
  - **Authentication**
    - Session Tracking
    - Unexpected Input
    - Application Logic
- **The Problem**
- **Tools**
- **Points of Attack**
- **Resources**

## Slide 35: DEMO – Attacking Authentication
- **Tool: wwwhack**
  - **Download:** [packetstormsecurity.org/Crackers/wwwhack.zip](http://packetstormsecurity.org/Crackers/wwwhack.zip)
  - **Note:** Shareware with potential porn ads
- **Demo Site:**
  - **URL:** [vaporware.usa/cgi-bin/calendar.pl?calendar=vaporexternal&template=login.html](http://www.vaporware.usa/cgi-bin/calendar.pl?calendar=vaporexternal&template=login.html)
  - **Key Phrases:** Identify unique phrases for failed login attempts

## Slide 36: Authentication Attack – Locked Accounts (PIN Harvest)
- **Question:** Will locking accounts prevent brute force attacks?
- **Answer:** Not always.
- **Username Harvesting:**
  - Bad login attempts can reveal valid usernames.
- **Password/PIN Harvesting:**
  - Locked account + error message = correct PIN revealed

## Slide 37: PIN Harvest Real World Example
- **Example:**
  - **Incorrect PIN:** "Leider ist diese PIN falsch." (This PIN is wrong.)
  - **Correct PIN (Locked Account):** "Leider ist Ihre PIN nicht mehr gültig." (Your PIN is no longer valid.)
  - **Context:** Found in a major European consumer banking application a few years ago.

## Slide 38: Authentication Attack – Bypass Authentication
- **If you cannot beat the authentication, perhaps you can bypass it.**
- **Public Calendar without Login:**
  - **URL:** [vaporware/cgi-bin/calendar.pl?calendar=vaporexternal](http://vaporware/cgi-bin/calendar.pl?calendar=vaporexternal)
- **Demo:** See March 2002 for `calendar=secret`

## Slide 39: Attack Agenda – Session Tracking
- **Points of Attack:**
  - **Authentication**
    - Session Tracking
    - Unexpected Input
    - Application Logic
- **The Problem**
- **Tools**
- **Points of Attack**
- **Resources**

## Slide 40: Session Tracking Introduction
- **Session ID:**
  - Unique identifier embedded in traffic via URL or Cookie
  - **Example Header:** `Set-cookie: CGISessionID=1344107640;path=/`
- **Forms of Attack:**
  - Predict
  - Brute Force
  - Pinch (Steal)

## Slide 41: Session Cloning via Prediction
- **Steps for Prediction Attack:**
  - Determine how and when session IDs are assigned
  - Collect several session IDs
  - Analyze for patterns or predictability
- **Examples:**
  - Based on timestamp, source IP, or MD5 checksum

## Slide 42: iDefense Intro: Cookie Collecting Made Easy
- **iDefense Web Application Session Auditor:**
  - **Platform:** Win32 GUI
  - **Website:** [idefense.com/idtools/Session_Auditor.zip](http://www.idefense.com/idtools/Session_Auditor.zip)
  - **Version:** 1.0
  - **Note:** Cookie brute-force feature does not work; it tries to send `Set-Cookie` instead of `Cookie:`

## Slide 43: DEMO – Session Tracking: Collect & Analyze Session ID
- **Tool: iDefense**
  - **WebMaven – Buggy Bank:**
    - Session ID assigned before login via cookie
  - **VaporWare Calendar:**
    - Similar data for recent audit of an online reservation system
    - Looks random but...
  - **Credit Union Software:**
    - Worse example

## Slide 44: Session Cloning via Brute Force
- **Attack:**
  - Request all or most possible combinations of session IDs
- **Forms of Attack:**
  - Predict
  - Brute Force
  - Pinch

## Slide 45: DEMO – Brute Force Session ID
- **Tool: iDefense Web Application Session Auditor**
  - **Ideal if session ID is inside the URL**
  - **Cookie brute force feature is broken in v1.0**
- **Site: WebMaven-BuggyBank**
  - **Session ID embedded in cookie before login**

## Slide 46: Command Line Kung Foo – cURL Introduction
- **cURL Options:**
  - `--silent`: Hide curl status output
  - `--include`: Show HTTP headers
  - `--cookie`: Add your own cookies
  - `--data`: Add POST data
- **Example:**
  ```bash
  $ curl --silent --include --cookie 'SessionID=1059750438' --data 'from=1234567890123750&to=1234567890123751&amount=100000000&transaction=transfer2' http://webmaven.usa/cgi-bin/wm.cgi?transaction=transfer
  ```

## Slide 47: DEMO – Brute Force Session ID from Command Line
- **Example:**
  ```bash
  $ curl --silent --cookie 'SessionID=1059777280' http://www.webmaven.usa/cgi-bin/wm.cgi?transaction=summary | grep -o -P 'Account Summary for .*?\<'
  $ perl -e 'for ($x=875;$x<=975;$x++) {print "Session ID 1059835$x"; system ("curl --silent --cookie 'SessionID=1059835\$x' http://www.webmaven.usa/cgi-bin/wm.cgi?transaction=summary");}' | grep -o -P 'Account Summary for .*?\<|Session ID .*?\<' | grep -B 1 Account
  ```

## Slide 48: Session Cloning via Pinching
- **Steps for Cookie Pinch Attack:**
  - If session IDs are robust and difficult to predict, try stealing them via Cross-Site Scripting (XSS)
- **Forms of Attack:**
  - Predict
  - Brute Force
  - Pinch

## Slide 49: DEMO – Session Cloning via XSS Cookie Pinch
- **XSS Definition:**
  - User input and/or web app output not filtered; may contain client-side code; browser is attacked
- **Simple Demo:**
  - **URL:** [localhost/cgi-bin/testcgi?](http://localhost/cgi-bin/testcgi?)
  - **Vaporware App:**
    - If the session ID is in a cookie, it can be sent to a remote site

## Slide 50: Attack Agenda – Unexpected Input
- **Points of Attack:**
  - **Authentication**
  - **Session Tracking**
  - **Unexpected Input**
    - SQL Injection
    - Buffer Overflow
    - Command Injection
  - **Application Logic**
- **The Problem**
- **Tools**
- **Points of Attack**
- **Resources**

## Slide 51: Unfiltered User Input
- **Concepts:**
  - SQL Injection
  - Buffer Overflow
- **Effects:**
  - Unexpected input might cause errors
  - Special characters, large inputs, or alternate choices can lead to vulnerabilities

## Slide 52: DEMO – Unfiltered User Input / Web Server Output
- **Error Messages:**
  - **SQL/ODBC Errors:**
    - **How:** Account number during login
    - **Result:** Access to entire database
  - **Auxiliary Program Errors:**
    - **How:** Semicolon (`%3B`) in the "Account" cookie
    - **Result:** Run commands
  - **XSS:**
    - **Seen earlier**
    - **Result:** Attack, eavesdrop, and clone user’s session ID (cookie-based)

## Slide 53: Command Injection Attack
- **Found in an online banking app (large bank)**
- **Cookie:**
  - Held encrypted account number
  - Used to speed up the login process
  - **Example:** `Account=pCqzl3mSxE8gD3aQfHeKHOmBJCyGca7M6mtaLPn6zINsSc3l%2FF5FdGUl0Kg%3D%3DvV3i`

## Slide 54: Command Injection – The Encrypted Account Cookie
- **Browser:**
  - **First Time:**
    - User enters full 16-digit account number
    - "Account" cookie is stored for future visits
  - **Return Visits:**
    - "Account" cookie is sent
- **Server:**
  - Encrypts account number with PGP
  - Embeds encrypted account number into the cookie
  - Sends the account cookie to the browser
  - Decrypts the account cookie
  - Shows the last four digits in a drop-down menu

## Slide 55: DEMO – Command Injection: Revealing Error Message
- **Manipulating the cookie value (e.g., inserting a semicolon) revealed:**
  - **PGP v2.6 error**
  - **Possible command injection:**
    - `# pgp $COOKIE_DATA`
    - **Example:** `$COOKIE_DATA = junk ; netstat`

## Slide 56: Command Injection Results
- **[Insert results here]**

## Slide 57: Attack Agenda – Application Logic
- **Points of Attack:**
  - **Authentication**
  - **Session Tracking**
  - **Unexpected Input**
  - **Application Logic**
    - Application performs steps in the wrong order or has other logical flaws
- **The Problem**
- **Tools**
- **Points of Attack**
- **Resources**

## Slide 58: Buggy Bank Demo: Viewing Other Account Balances
- **View the balance of other accounts:**
  - Discovered in credit union software
  - Web app performed step C first
- **Transfer Funds:**
  - Change the FROM account to someone else's
  - Small amount: transfer is prevented
  - Large amount: results in an account balance error
- **Proper Sequence:**
  1. Authorized to take money from?
  2. Authorized to put money in?
  3. Enough balance?

## Slide 59: DEMO – Attack Application Logic: Collecting Balances
- **Tool: Custom Perl script**
  - **Alternatives:** Brutus and others
- **User can change the FROM account to someone else's account when transferring funds**
- **Can also collect valid account numbers**

## Slide 61: Conclusion – Limitations of Tools
- **Brain & Clues Not Included:**
  - You must know what you're looking for (e.g., view account balances)
- **No One Tool Does It All (Yet)**
- **Some Tools Don’t Support SSL:**
  - Use stunnel to wrap in SSL
  - **Website:** [stunnel.org](http://www.stunnel.org/)
- **For Thorough Testing:**
  - You will need to code/script your own tools

## Slide 62: Resources – Beyond Point & Click Tools
- **Elza:**
  - Scripting language for interacting with web sites and apps
  - **Website:** [stoev.org/elza/](http://www.stoev.org/elza/)
- **cURL:**
  - Command-line tool for HTTP(S)
  - **Website:** [curl.haxx.se/](http://curl.haxx.se/)
- **Perl with libwww-perl (LWP):**
  - **Website:** [perl.com/](http://www.perl.com/)
- **Regular Expressions (regex):**
  - **Book:** [oreilly.com/catalog/regex/](http://www.oreilly.com/catalog/regex/)

## Slide 63: Resource – WebMaven: Web App Audit Trainer
- **Quote:**
  - "Give a man an audit and he will be secure for a day. Teach a man to audit and he will be secure for the rest of his life."
  - - David Rhoades
- **Description:**
  - Fake web app that emulates vulnerabilities
  - Run it on your own web server
  - Safe and legal way to practice audit techniques and learn
  - Benchmark audit tools
- **Website:** [webmaven.MavenSecurity.com](http://webmaven.MavenSecurity.com)

## Slide 64: Web App Security Resources
- **OWASP – Open Source Web App Security Project:**
  - **Website:** [owasp.org](http://www.owasp.org)
  - **Projects, Papers, etc.**
- **WebApp Sec Mailing List:**
  - **Archive:** [securityfocus.com/archive/107](http://www.securityfocus.com/archive/107)

## Slide 65: Questions? Fill out Evals! Download Slides!
- **Fill out the course evaluation**
- **Slides and other resources are available at:**
  - [MavenSecurity.com](http://www.MavenSecurity.com) (under the Resources section)
- **Contact Information:**
  - **David Rhoades**
  - **Email:** [PI:EMAIL](mailto:PI:EMAIL)
  - **Website:** [MavenSecurity.com](http://www.MavenSecurity.com)
- **Thank you!**
  - **Auditing web apps since 1996**

---

**Copyright 2002-2003 - David Rhoades**