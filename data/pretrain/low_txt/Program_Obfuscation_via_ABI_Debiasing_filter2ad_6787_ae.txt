### Method and Class Identification in C++ Binaries

OBJDigger utilizes symbolic analysis and inter-procedural data flow analysis to classify methods into classes. In contrast, the more recent tool, OOAnalyzer, combines Prolog-based reasoning with binary and symbolic analysis. Both tools track the usage and propagation of the `this` pointer to identify related methods. Specifically, they first identify methods called using the same `this` pointer and then apply reasoning rules to determine if these methods belong to the same class.

### Defenses Against VTable Hijacking Attacks

TVIP [12] and VTint [28] are two defenses designed to protect against VTable hijacking attacks. VTint recovers VTables and appends unique IDs to each one to ensure that only valid VTables are used at runtime. Similar to TVIP, VTint also ensures that allowable VTables point to read-only sections of the binary, thereby enhancing security.

### Conclusion and Future Work

In this work, we introduce the concept of ABI Bias, which attackers can exploit to reverse engineer a binary. We classify ABI biases into sensitive and insensitive categories. We identify two insensitive ABI biases that reveal crucial security information: VTable ordering bias and function pointer bias. Additionally, we introduce the notion of lingering bias, which persists due to backward compatibility. We present an LLVM compiler-based solution to eliminate these insensitive and lingering biases. Our evaluation demonstrates that these techniques have minimal impact on binary size and performance.

We argue that future ABI designs should consider these biases and the information they can introduce into the binary. The insensitive biases discussed in this paper are those for which we have developed automated solutions. Future work will focus on other forms of biases, such as function pointer ordering, and explore possible defenses against Overwrite Analysis, a reverse engineering technique not addressed in this paper. Finally, we aim to investigate the information these biases can reveal about the original source code, including scoping information, which is generally considered lost in reverse engineering.

### Acknowledgments

We would like to thank our shepherd Zhiqiang Lin and the anonymous reviewers for their valuable feedback. This research was supported in part by the Office of Naval Research Awards #N00014-17-1-2929 and #N6833521C0446, and DARPA award #81192. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] 2016. Itanium C++ ABI change. https://github.com/itanium-cxx-abi/cxx-abi/pull/7.
[2] 2017. Itanium C++ ABI. http://itanium-cxx-abi.github.io/cxx-abi/abi.html.
[3] Dimitar Bounov, Rami Gökhan Kıcı, and Sorin Lerner. 2016. Protecting C++ dynamic dispatch through vtable interleaving. In Proceedings of the 23rd Annual Network and Distributed System Security Symposium (NDSS’16).
[4] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Marco Negro, Christopher Liebchen, Mohaned Qunaibit, and Ahmad-Reza Sadeghi. 2015. Losing Control: On the Effectiveness of Control-Flow Integrity Under Stack Attacks. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security.
[5] Crispin Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather Hinton. 1998. Stack-Guard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In 7th USENIX Security Symposium (USENIX Security 98).
[6] Mohamed Elsabagh, Dan Fleck, and Angelos Stavrou. 2017. Strict Virtual Call Integrity Checking for C++ Binaries. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security.
[7] Rukayat Ayomide Erinfolami and Aravind Prakash. 2019. DeClassifier: Class-Inheritance Inference Engine for Optimized C++ Binaries. In Proceedings of the 2019 ACM Asia Conference on Computer and Communications Security (AsiaCCS’19).
[8] Rukayat Ayomide Erinfolami and Aravind Prakash. 2020. Devil is Virtual: Reversing Virtual Inheritance in C++ Binaries. In Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security (Virtual Event, USA) (CCS ’20). Association for Computing Machinery, New York, NY, USA, 133–148. https://doi.org/10.1145/3372297.3417251
[9] Reza Mirzazade Farkhani, Saman Jafari, Sajjad Arshad, William Robertson, Engin Kirda, and Hamed Okhravi. 2018. On the Effectiveness of Type-based Control Flow Integrity. In Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC’18).
[10] A. Fokin, E. Derevenetc, A. Chernov, and K. Troshina. 2011. SmartDec: Approaching C++ Decompilation. In Reverse Engineering (WCRE), 2011 18th Working Conference on.
[11] A. Fokin, K. Troshina, and A. Chernov. 2010. Reconstruction of Class Hierarchies for Decompilation of C++ Programs. In 2010 14th European Conference on Software Maintenance and Reengineering. 240–243.
[12] Robert Gawlik and Thorsten Holz. 2014. Towards Automated Integrity Protection of C++ Virtual Function Tables in Binary Programs. In Proceedings of 30th Annual Computer Security Applications Conference (ACSAC’14).
[13] CXX-ABI Discussion Group. CXX-ABI-Dev mail archives. https://www.mail-archive.com/PI:EMAIL/index.html.
[14] Istvan Haller, Enes Göktaş, Elias Athanasopoulos, Georgios Portokalidis, and Herbert Bos. 2015. ShrinkWrap: VTable Protection without Loose Ends. In Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC’15).
[15] Dongseok Jang, Zachary Tatlock, and Sorin Lerner. 2014. SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks. In Proceedings of 21st Annual Network and Distributed System Security Symposium (NDSS’14).
[16] Wesley Jin, Cory Cohen, Jeffrey Gennari, Charles Hines, Sagar Chaki, Arie Gurfinkel, Jeffrey Havrilla, and Priya Narasimhan. 2014. Recovering C++ Objects From Binaries Using Inter-Procedural Data-Flow Analysis. In Proceedings of ACM SIGPLAN on Program Protection and Reverse Engineering Workshop (PPREW’14).
[17] Pascal Junod, Julien Rinaldini, Johan Wehrli, and Julie Michielin. 2015. Obfuscator-LLVM – Software Protection for the Masses. In Proceedings of the IEEE/ACM 1st International Workshop on Software Protection, SPRO’15, Firenze, Italy, May 19th, 2015, Brecht Wyseur (Ed.). IEEE, 3–9. https://doi.org/10.1109/SPRO.2015.10
[18] Omer Katz, Noam Rinetzky, and Eran Yahav. 2018. Statistical Reconstruction of Class Hierarchies in Binaries. In Proceedings of the 23rd International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS’18).
[19] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. 2015. Type Casting Verification: Stopping an Emerging Attack Vector. In 24th USENIX Security Symposium (USENIX Security 15).
[20] Nathan Burow, Derrick McKee, Scott A. Carr, and Mathias Payer. 2018. CFIXX: Object Type Integrity for C++ Virtual Dispatch. In Proceedings of the 25th Annual Network and Distributed System Security Symposium (NDSS’18).
[21] Andre Pawlowski, Moritz Contag, Victor van der Veen, Chris Ouwehand, Thorsten Holz, Herbert Bos, Elias Athanasopoulos, and Cristiano Giuffrida. 2017. MARX: Uncovering Class Hierarchies in C++ Programs. In Proceedings of the 24th Annual Network and Distributed System Security Symposium.
[22] Andre Pawlowski, Victor van der Veen, Dennis Andriesse, Erik van der Kouwe, Thorsten Holz, Cristiano Giuffrida, and Herbert Bos. 2019. VPS: Excavating High-Level C++ Constructs from Low-Level Binaries to Protect Dynamic Dispatching. In Proceedings of the 35th Annual Computer Security Applications Conference (ACSAC’19).
[23] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Proceedings of the 22nd Annual Network and Distributed System Security Symposium (NDSS’15).
[24] Edward J. Schwartz, Cory F. Cohen, Michael Duggan, Jeffrey Gennari, Jeffrey S. Havrilla, and Charles Hines. 2018. Using Logic Programming to Recover C++ Classes and Methods from Compiled Executables. In 2018 ACM SIGSAC Conference on Computer and Communications Security.
[25] Felix Shuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-reza Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In Proceedings of 36th IEEE Symposium on Security and Privacy (Oakland’15).
[26] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In Proceedings of 23rd USENIX Security Symposium (USENIX Security’14).
[27] Chao Zhang, Scott A. Carr, Tongxin Li, Yu Ding, Chengyu Song, Mathias Payer, and Dawn Song. 2016. VTrust: Regaining Trust on Virtual Calls. In Proceedings of the 23rd Annual Network and Distributed System Security Symposium (NDSS’16).
[28] Chao Zhang, Chengyu Song, Zhijie Kevin Chen, Zhaofeng Chen, and Dawn Song. 2015. VTint: Defending Virtual Function Tables’ Integrity. In Proceedings of the 2015 ACM SIGSAC Conference on Computer and Communications Security (CCS’15).

### Appendix: VTables in LLVM-IR

**Listing 1: Virtual Inheritance Diamond Structure in LLVM-IR**

```llvm
@_ZTV1D = unnamed_addr constant {
  [5 x i8*] {
    [6 x i8*] {
      [5 x i8*] {
        [4 x i8*] {
          i8* bitcast (void (%struct.D*)* @_ZN1D1fEv to i8*),
          i8* getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTI1D, i32 0, i32 1),
          i8* null,
          i8* null
        },
        i8* bitcast (void (%struct.B*)* @_ZN1B1gEv to i8*),
        i8* null,
        i8* null,
        i8* null
      },
      [5 x i8*] {
        [4 x i8*] {
          i8* bitcast (void (%struct.D*)* @_ZTv0_n24_N1D1fEv to i8*),
          i8* getelementptr inbounds ([6 x i8*], [6 x i8*]* @_ZTI1D, i32 0, i32 2),
          i8* null,
          i8* null
        },
        i8* bitcast (void (%struct.C*)* @_ZN1C1gEv to i8*),
        i8* null,
        i8* null,
        i8* null
      }
    }
  }
}
```

This listing shows the virtual inheritance diamond structure in LLVM-IR, broken down to illustrate the individual sub-vtables.