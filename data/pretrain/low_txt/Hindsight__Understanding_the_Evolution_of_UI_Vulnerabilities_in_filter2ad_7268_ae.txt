### Figure 10: Analysis of HTTPS-Related ABBs

Modern browsers increasingly display negative indicators for pages served over HTTP [12, 14, 33]. Given the growing emphasis on HTTPS, this section focuses on the HTTPS-related ABBs (Attack Building Blocks) listed in Table 1. In Figure 10, we compare how different HTTPS-related ABBs affect browser APKs and browser families.

Our findings indicate that fewer than 17% of APKs and browser families are vulnerable to favicon-padlock placement (ABB #20) and self-signed certificates (ABB #23, ABB #27). However, over 50% of them execute code originating from mixed content inclusion (ABB #26). Additionally, more than 90% of browser APKs and families do not use distinct indicators to differentiate between HTTPS websites with no mixed content and those with mixed content. We argue that even for browsers that block mixed content, this behavior is undesirable because it allows mixed content to go unnoticed for longer periods, thereby increasing the window of exploitation for users who may use browsers that render mixed content.

### 5.5 Patterns of Vulnerability

The longitudinal analysis presented in Section 5.2 demonstrates that most browser families either remain consistently vulnerable to the same number of attacks or become more vulnerable over time. It is worth considering whether the vulnerabilities identified by Hindsight were always part of a browser's code (present in the oldest version available in our dataset) or were introduced later.

### Limitations and Future Work

A key limitation of our work is that all security assessments are based on our collection of 27 ABBs automatically evaluated by Hindsight. It is possible that browsers performing poorly against our tests might perform better with a different set of tests. Therefore, our results should not be used as an authoritative guide for identifying the most secure mobile browser. Instead, we hope that our findings will motivate vendors to revisit their UI designs and enhance browser security.

### 7 Related Work

To our knowledge, this paper is the first systematic study of the evolution of UI attacks in mobile browsers, covering thousands of browser versions and hundreds of browser families. The motivation for developing Hindsight was to address the issue that previous studies, which were performed manually on a limited number of browser families and versions, quickly became outdated.

**Attacks Against Mobile Browsers:**
- **Niu et al. (2008)** [30] identified security issues in mobile browsers, such as URL truncation and the absence of the URL bar.
- **Rydstedt et al. (2010)** [32] discovered "tapjacking," a mobile equivalent of clickjacking.
- **Felt and Wagner (2011)** [15] explored the threat of phishing attacks on mobile devices.
- **Amrutkar et al. (2011-2015)** [2-5] manually evaluated smartphone and tablet browsers, identifying issues like unexpected event routing and inconsistencies in security indicators.

**WebView Security:**
- **Chin and Wagner (2013)** [10] and others have identified security issues with WebView APIs, allowing both malicious apps to attack benign websites and malicious websites to exploit benign but vulnerable apps.

**Inconsistencies Across Desktop Browsers:**
- **Singh et al. (2010)** [35] investigated access control inconsistencies.
- **Zheng et al. (2015)** [39] identified implementation quirks in cookie handling.
- **Hothersall-Thomas et al. (2015)** [23] developed BrowserAudit, a tool for testing desktop browser security mechanisms.

### 6 Discussion

**Summary of Findings:**
- Using Hindsight, we tested 2,324 browser APKs across 128 different browser families and found that 98.6% were vulnerable to at least one of our 27 ABBs, with 50% being vulnerable to more than 12 ABBs.
- Longitudinal measurements showed that many browsers become less secure over time, and popular browsers are often more vulnerable than less popular ones.

**Ethical Disclosure:**
- While our ABBs can be used to craft social engineering attacks, they do not lead to drive-by exploitations. We are currently reaching out to browser vendors to ethically disclose our findings and understand their plans to address these issues.

**Limitations and Future Work:**
- Hindsight currently uses real smartphones, which limits scalability and applicability. We plan to develop an emulation-backed version of Hindsight to experiment with a wider range of configurations and compare results.

### 8 Conclusion

As mobile devices become more prevalent, understanding their security posture is crucial. This study investigates UI vulnerabilities in mobile browsers, where attackers can exploit idiosyncrasies to better social engineer users and exfiltrate data. Using Hindsight, we quantified the vulnerability of mobile browsers over time, finding that:
- Most browsers are vulnerable to one or more of our evaluated attacks.
- Mobile browsers are becoming less secure over time.
- Browser popularity does not necessarily correlate with security.

We hope this study will encourage the development of more secure UIs and the review of existing design decisions that can be exploited by attackers.

### Acknowledgments

We thank the reviewers for their valuable feedback. This work was supported by the Office of Naval Research (ONR) under grant N00014-17-1-2541 and by the National Science Foundation (NSF) under grants CNS-1617593 and CNS-1527086. Some experiments were conducted with equipment purchased through NSF CISE Research Infrastructure Grant No. 1405641.

Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the Office of Naval Research or the National Science Foundation.

### References

[1] AdGuard. 2009–2017. ad blocker and anti-tracker. https://adguard.com/en/welcome.html. (2009–2017).

[2] Chaitrali Amrutkar, Kapil Singh, Arunabh Verma, and Patrick Traynor. 2011. On the Disparity of Display Security in Mobile and Traditional Web Browsers. Technical Report. Georgia Institute of Technology.

[3] Chaitrali Amrutkar, Kapil Singh, Arunabh Verma, and Patrick Traynor. 2012. VulnerableMe: Measuring systemic weaknesses in mobile browser security. In International Conference on Information Systems Security. Springer, 16–34.

[4] Chaitrali Amrutkar, Patrick Traynor, and Paul C Van Oorschot. 2012. Measuring SSL indicators on mobile browsers: Extended life, or end of the road?. In International Conference on Information Security. Springer, 86–103.

[5] Chaitrali Amrutkar, Patrick Traynor, and Paul C Van Oorschot. 2015. An empirical evaluation of security indicators in mobile Web browsers. IEEE Transactions on Mobile Computing 14, 5 (2015), 889–903.

[6] Chaitrali Vijay Amrutkar. 2014. Towards secure web browsing on mobile devices. Ph.D. Dissertation. Georgia Institute of Technology.

[7] Zineb Ait Bahajji and Gary Illyes. 2014. Google Webmaster Blog: HTTPS as a ranking signal. https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html. (2014).

[8] Bugzilla@Mozilla. 2010. URL Display of Title instead of the URL Enables Phishing Attacks via URL Spoofing. https://bugzilla.mozilla.org/show_bug.cgi?id=605206. (2010).

[9] Ping Chen, Nick Nikiforakis, Christophe Huygens, and Lieven Desmet. 2013. A Dangerous Mix: Large-scale analysis of mixed-content websites. In Proceedings of the 16th Information Security Conference (ISC).

[10] Erika Chin and David Wagner. 2013. Bifocals: Analyzing webview vulnerabilities in Android applications. In International Workshop on Information Security Applications. Springer, 138–159.

[11] CVE 2014. CVE-2014-6041 : The Android WebView in Android before 4.4 allows remote attackers to bypass the Same Origin Policy via a crafted attributes. http://www.cvedetails.com/cve/CVE-2014-6041/. (2014).

[12] Peter Dolanjski and Tanvi Vyas. 2017. Mozilla Security Blog: Communicating the Dangers of Non-Secure HTTP. https://blog.mozilla.org/security/2017/01/20/communicating-the-dangers-of-non-secure-http/. (2017).

[13] Tesseract Open Source OCR Engine. 2017. Google. https://github.com/tesseract-ocr/tesseract. (2017).

[14] Adrienne Porter Felt, Robert W Reeder, Alex Ainslie, Helen Harris, Max Walker, Christopher Thompson, Mustafa Embre Acer, Elisabeth Morant, and Sunny Consolvo. 2016. Rethinking connection security indicators. In Twelfth Symposium on Usable Privacy and Security (SOUPS).

[15] Adrienne Porter Felt and David Wagner. 2011. Phishing on mobile devices. In Proceedings of the Web 2.0 Security and Privacy Workshop.

[16] Anthony Y Fu, Xiaotie Deng, Liu Wenyin, and Greg Little. 2006. The methodology and an application to fight against unicode attacks. In Proceedings of the second symposium on Usable privacy and security. ACM, 91–101.

[17] Google Play store. 2017. CM Browser - Adblock Download. https://play.google.com/store/apps/details?id=com.ksmobile.cb. (2017).

[18] Google Play store. 2017. Dolphin - Best Web Browser. https://play.google.com/store/apps/details?id=mobi.mgeek.TunnyBrowser. (2017).

[19] Google Play store. 2017. Google Play store: Fastest Mini Browser. https://play.google.com/store/apps/details?id=com.mmbox.browser. (2017).

[20] Google Play store. 2017. Google Play store: Ghostery Privacy Browser. https://play.google.com/store/apps/details?id=com.ghostery.android.ghostery. (2017).

[21] Google Play store. 2017. Opera Mini - fast web browser. https://play.google.com/store/apps/details?id=com.opera.mini.native. (2017).

[22] Google Play store. 2017. UC Browser - Fast Download. https://play.google.com/store/apps/details?id=com.UCMobile.intl. (2017).

[23] Charlie Hothersall-Thomas, Sergio Maffeis, and Chris Novakovic. 2015. Browser-Audit: Automated Testing of Browser Security Features. In Proceedings of the International Symposium on Software Testing and Analysis (ISSTA).

[24] Jason Kersey. 2013. Chrome for Android Update. http://googlechromereleases.blogspot.com/2013/11/chrome-for-android-update.html. (2013).

[25] Let’s Encrypt - Free SSL/TLS Certificates. 2017. https://letsencrypt.org/.

[26] Tongbo Luo, Hao Hao, Wenliang Du, Yifei Wang, and Heng Yin. 2011. Attacks on WebView in the Android system. In Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 343–352.

[27] Tongbo Luo, Xing Jin, Ajai Ananthanarayanan, and Wenliang Du. 2013. Touch-jacking attacks on web in Android, iOS, and Windows Phone. In Foundations and Practice of Security. Springer, 227–243.

[28] Moxie Marlinspike. 2009. More tricks for defeating SSL in practice. Black Hat USA (2009).

[29] Matthias Neugschwandtner, Martina Lindorfer, and Christian Platzer. 2013. A View to a Kill: WebView Exploitation. In LEET.

[30] Yuan Niu, Francis Hsu, and Hao Chen. 2008. iPhish: Phishing Vulnerabilities on Consumer Electronics. In Proceedings of the Usability, Psychology, and Security Workshop (UPSEC).

[31] Google Cloud Platform. 2017. Cloud Vision API Documentation. https://cloud.google.com/vision/docs/. (2017).

[32] Gustav Rydstedt, Baptiste Gourdin, Elie Bursztein, and Dan Boneh. 2010. Framing attacks on smart phones and dumb routers: tap-jacking and geo-localization attacks. In Proceedings of the 4th USENIX Workshop On Offensive technologies (WOOT). USENIX Association, 1–8.

[33] Emily Schechter. 2016. Google Security Blog: Moving towards a more secure web. https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html. (2016).

[34] Selenium. 2017. Selenium Webdriver. http://www.seleniumhq.org/projects/webdriver/. (2017).

[35] Kapil Singh, Alexander Moshchuk, Helen J Wang, and Wenke Lee. 2010. On the incoherencies in web browser access control policies. In Security and Privacy (SP), 2010 IEEE Symposium on. IEEE, 463–478.

[36] Suphannee Sivakorn, Jason Polakis, and Angelos D. Keromytis. 2016. The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of Private Information. In Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P ’16).

[37] Joshua Sunshine, Serge Egelman, Hazim Almuhimedi, Neha Atri, and Lorrie Faith Cranor. 2009. Crying Wolf: An Empirical Study of SSL Warning Effectiveness. In USENIX security symposium. 399–416.

[38] W3C. 2010. Web Security Context: User Interface Guidelines. https://www.w3.org/TR/wsc-ui/. (2010).

[39] Xiaofeng Zheng, Jian Jiang, Jinjin Liang, Haixin Duan, Shuo Chen, Tao Wan, and Nicholas Weaver. 2015. Cookies Lack Integrity: Real-World Implications. In 24th USENIX Security Symposium (USENIX Security 15).

[40] Yuchen Zhou and David Evans. 2010. Why aren’t HTTP-only cookies more widely deployed. Proceedings of 4th Web 2 (2010).