# Latency and NACK Analysis for Network Failures

## Figure 6: Latency and NACKs for b1-s1 Failure
- **X-axis:** Time (ms)
- **Y-axis:** Latency (ms) and NACKs

### Observations:
- The X-axis represents the send time of the message.
- Each point on the NACK range plot represents a single NACK message, with the NACK range value being cumulative.
- Initially, s1 does not detect the failure until more than 2 seconds later (around time 8000 ms).
- After detecting the failure, s1 sends NACKs to b2 (since the b1-s1 link is down) and receives the lost messages.
- Our implementation divides large NACK ranges into smaller parts to minimize the impact of a lost NACK message, resulting in multiple NACK messages sent by s1.
- The last message published before the failure is received after the NACKs are sent, experiencing a latency of 2.5 seconds.
- The burst of received lost messages after sending NACKs causes the latency values for s1 to show a saw-tooth pattern.
- Once all routing switches to the path b2-s1, the latency returns to normal.
- The latency at s2 was unaffected by the failure, and similar behavior was observed for other subscribers not on the failure path.

## Results for b1 Crash
- **Test Description:** Broker b1 was crashed and restarted 30 seconds later.
- **Initial Setup:** Before the crash, b1 and b2 were splitting the input message load, each handling messages from 2 of the 4 pubends.
- **Latency and NACK Plots:**
  - **First Peak:** Due to stalling broker b1 before crashing it.
  - **Second Peak:** When b1 recovers, causing messages from 2 of the 4 pubends to again flow through b1.
  - **Transient Increase in Latency:** Caused by extra computation in the broker machine when it starts up, such as running the Java JIT compiler.

### NACK Analysis:
- The second plot in Figure 7 shows NACKs and NACK ranges sent by s1, s2, and b2.
- s1 and s2 lost similar messages due to b1's failure, resulting in almost identical NACKs in number and range.
- b2 forwards NACKs to p1 since it does not have the requested data.
- NACK consolidation by b2 is nearly perfect, with the NACK range sent by b2 being about half that of s1 and s2 combined.
- The NACK range of s1 and s2 is about 5500 ms, corresponding to 2 different pubends, each losing about 2750 ms of data, which aligns with the time interval for which b1 was stalled before the crash.

## Results for p1 Crash
- **Test Description:** PHB p1 was crashed and restarted after about 20 seconds.
- **Impact:** Affected all subscribers at s1-s5.
- **Latency and NACK Plots:**
  - **Publisher Down:** Unlike previous tests, the publisher was unable to publish during the crash.
  - **High Latency:** Messages logged but not sent out before the crash show high latency, as seen in the partial sawtooth form of the latency.
  - **No Gaps Created:** No new messages were received at s1 during the crash, but no gaps were created either.
  - **NACK Initiation:** s1 did not initiate any NACKs while p1 was down due to the infinite delay curiosity threshold (DCT).
  - **Recovery:** Upon p1's recovery, an AckExpected message is sent, followed by NACKs from s1-s5, and the latency quickly returns to normal.

## Related Work
- **Guaranteed Delivery in Pub/Sub Systems:**
  - Most Internet-scale pub/sub systems, like SIENA, offer best-effort delivery.
  - Guaranteed delivery is provided in messaging systems like IBM’s MQseries, but they use a store-and-forward approach, leading to high latency and per-message overhead.
  - **Diversity Control Protocol (DCP):** Routes and filters XML documents on an overlay mesh network. DCP runs on a replicated n-resilient mesh network, unlike our system where messages are not replicated on redundant paths.
  - **Reliable Multicast Protocols:**
    - SRM and RMTP build end-to-end reliable protocols using IP multicast.
    - Active Reliable Multicast (ARM) and Breadcrumb Forwarding Service (BCFS) use active networking routers for efficient NACK consolidation.
  - **Atomic Multicast:**
    - Systems like Isis and Horus provide atomic multicast/broadcast primitives using virtual synchrony, which can be challenging to scale.

## Conclusion
- We presented a new model and algorithm for exactly-once message delivery in content-based publish-subscribe systems.
- Our solution maintains only soft-state at intermediate brokers and does not stall message forwarding in the presence of message loss, allowing high throughput despite failures.
- Our implementation has a low CPU overhead and rapidly switches around failures, performing effective NACK consolidation.

## References
- [1] Aguilera, M. K., & Strom, R. E. (2000). Efficient atomic broadcast using deterministic merge. In Proceedings of the 19th ACM symposium on Principles of distributed computing.
- [2] Aguilera, M. K., et al. (1999). Matching events in a content-based subscription system. In Proceedings of the Principles of Distributed Computing.
- [3] Banavar, G., et al. (1999). An efficient multicast protocol for content-based publish-subscribe systems. In Proceedings of the 19th IEEE International Conference on Distributed Computing Systems.
- [4] Birman, K., Schiper, A., & Stephenson, P. (1991). Lightweight causal and atomic group multicast. ACM Transactions on Computer Systems.
- [5] Carzaniga, A. (1998). Architectures for an Event Notification Service Scalable to Wide-area Networks. PhD thesis, Politecnico di Milano.
- [6] Floyd, S., et al. (1996). A reliable multicast framework for light-weight sessions and application level framing. IEEE/ACM Transactions on Networking.
- [7] Jacobson, V. (1988). Congestion avoidance and control. Computer Communication Review.
- [8] Lin, J. C., & Paul, S. (1996). RMTP: A reliable multicast transport protocol. In Proceedings of IEEE Infocom’96.
- [9] Piantoni, R., & Stanescu, C. (1997). Implementing the swiss exchange trading system. In Symposium on Fault-Tolerant Computing.
- [10] Raman, S., & McCanne, S. (1999). A model, analysis, and protocol framework for soft state-based communication. In Proceedings of ACM SIGCOMM.
- [11] Snoeren, A., Conley, K., & Gifford, D. (2001). Mesh-based content routing using XML. In Proceedings of the 18th ACM Symposium on Operating System Principles.
- [12] van Renesse, R., Birman, K., & Maffeis, S. (1996). Horus: A flexible group communication system. Communications of the ACM.
- [13] Lehman, L. W., Garland, S. J., & Tennenhouse, D. L. (1998). Active reliable multicast. In Proceedings of IEEE INFOCOM’98.
- [14] Yano, K., & McCanne, S. (2000). The breadcrumb forwarding service: A synthesis of PGM and Express to improve and simplify global IP multicast.
- [15] Yano, K., & McCanne, S. (2000). A window-based congestion control for reliable multicast based on TCP dynamics. In Proceedings of ACM Multimedia.