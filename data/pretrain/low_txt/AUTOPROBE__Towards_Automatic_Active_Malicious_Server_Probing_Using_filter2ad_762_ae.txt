### Malicious File Download and Follow-Up Logic

The download of a malicious file from the server and its subsequent logic may depend on the success of the download. If the malware execution does not capture the use of such a file within the limited monitoring time, AUTOPROBE may incorrectly classify any server hosting this file as malicious. The root cause of these false positives or negatives is a fundamental limitation of dynamic analysis: it can only observe executed behaviors. To improve accuracy, we should extend the analysis time and enhance code coverage.

### Malware Response Checks

Our classification function assumes that malware will exhibit different behaviors when receiving valid and invalid responses from remote servers. If the malware violates this assumption by performing no checks or only cursory checks on the responses, the generated fingerprints may produce false positives when probing benign servers. However, this situation did not occur in our examples, and we believe it is unlikely, as it would be extremely easy to infiltrate such C&C protocols.

### Classification Function through Code Reuse

The classification function produced by AUTOPROBE is a logical expression applied to the response or the output of a parser on the response. Extracting these expressions can be challenging if the variables follow non-linear relationships. In such cases, binary code reuse techniques [5, 20] can be applied to directly (re)use the malware’s response handling code. In extreme cases, AUTOPROBE could rerun the malware in a controlled environment using the responses received from target servers. While these approaches are resource-intensive, they are useful when the current approach cannot determine a symbolic expression.

### Semantics-Guided Fuzzing

The fingerprints generated by AUTOPROBE use valid probes that satisfy the C&C protocol grammar because the probe construction functions are extracted from the malware’s request generation logic. For some malware families, it may be possible to generate additional fingerprints using invalid probes that do not conform to the C&C grammar but still trigger distinctive responses from the C&C servers. Invalid probes are easier to identify by C&C server managers but can be useful when the C&C masks as a benign protocol. When a live C&C server is known, AUTOPROBE could be enhanced with a semantics-guided fuzzing approach that uses semantic information extracted during probe generation to modify valid probes into invalid ones and test them against the C&C server.

### Dynamic Analysis Limitations

Dynamic analysis techniques used by AUTOPROBE have known limitations. For example, dynamic taint analysis is vulnerable to over-tainting and under-tainting [33], which can introduce inaccuracies in detecting variable parts during probe generation. Similarly, symbolic execution is challenging in the presence of complex loops [32] and implicit flows [18], and may explore unreachable paths [33]. These issues can affect AUTOPROBE's performance, but they are not unique to AUTOPROBE and impact all dynamic analysis solutions to some degree. AUTOPROBE takes steps to minimize these challenges. For instance, it does not need to analyze the complete malware logic but only its request generation and response handling logic. It can confirm that paths build requests by monitoring network activity. Even if dynamic analysis marks some request parts as variable, AUTOPROBE performs backward slicing to verify that these bytes are generated from system/API calls. Future advances in dynamic binary analysis will also benefit our approach.

### Handling Encrypted Traffic

In our evaluation, we found that around 30% of malware samples use encoded packets to communicate with their remote servers. While AUTOPROBE currently does not decode encrypted traffic (a common research challenge), it can observe the malware’s logic for handling correctly and incorrectly encoded responses. We can generate random response packets and record the malware execution path, representing the malware’s logic for handling invalid packets. If any response packet deviates from this path, the source of the packet is likely suspicious.

### Other Possible Evasions

One possible evasion technique is using existing exploits as client requests. AUTOPROBE needs to filter out all requests that exploit remote servers, and malware authors could use this to prevent tampering by AUTOPROBE. However, using exploits increases the likelihood of detection by existing IDS systems. Another evasion technique is using coordinated servers, as AUTOPROBE does not correlate traffic to different servers. Malware authors may allow one server to receive a request, forward it to another server, and allow the other server to issue commands. This scheme increases maintenance costs for botmasters. Some existing IDS systems, such as BotHunter [15], can complement AUTOPROBE in certain situations.

### Related Work

#### Research on Internet-Wide Probing

Scanning the internet is a method to find large-scale network-level vulnerabilities. Provos et al. scanned the internet to identify vulnerable SSH servers [29]. Dagon et al. [11] scanned DNS servers to find those providing incorrect resolutions. Heninger et al. [16] scanned the internet to find network devices with weak cryptographic keys. These studies apply widely-known signatures to achieve their goals.

Active probing to detect network-based malware has been proposed in several previous works [3, 14, 25, 28, 41]. Gu et al. [14] proposed actively sending probing packets through IRC channels. Zmap [12] is an efficient internet-wide scanner that can scan the entire internet in less than 45 minutes but targets the aliveness of remote hosts rather than detecting malicious servers. PeerPress [41] adopts dynamic malware analysis to find P2P malware’s network fingerprints, but it focuses on malware that opens ports for communication, unlike AUTOPROBE, which targets remote malicious servers.

#### Research on Network Fingerprint Generation

Fingerprinting network applications is a well-studied topic. Botzilla [31] detects malware communication by recording network traffic in a controlled environment and generating network signatures from invariant content patterns. AUTOPROBE aims to fingerprint malicious servers using binary-level analysis. FiG [7] proposed a framework for automatic fingerprint generation that produces OS and DNS fingerprints from network traffic. AUTOPROBE applies a different approach, taking a malware sample as input and applying dynamic binary analysis to generate network fingerprints.

#### Research on Malware Binary Analysis

Several studies discuss effective and efficient techniques for malware analysis, including taint analysis [19, 26], enforced execution [38], path exploration [24], program slicing [5], symbolic execution [37], and trace alignment [17]. AUTOPROBE applies many of these techniques in a novel way to automatically generate network fingerprints. Protocol reverse engineering work, such as [8–10, 21, 39], is also related to AUTOPROBE. We adopt a similar approach to [6] to understand the semantics of malware requests, but AUTOPROBE does not attempt to understand the complete protocol and uses various techniques to aid fingerprint generation.

### Conclusion

In this paper, we present AUTOPROBE, a tool for generating active probing fingerprints for internet-wide malicious server detection. AUTOPROBE implements a novel dynamic analysis approach to improve the effectiveness and efficiency of existing methods. It helps expose more requests, builds a classification function based on malware validation checks, and assists in efficient detection. AUTOPROBE also proposes new solutions for real-world challenges, such as generating fingerprints without a known live C&C server. Our extensive internet-scale scanning shows that AUTOPROBE outperforms existing state-of-the-art systems in discovering more malicious servers.

### Acknowledgments

We thank the system administrators at our respective institutions, Zakir Durumeric, J. Alex Halderman, VirusTotal, Malware Domain List, and URLQuery. This work is supported in part by the National Science Foundation (Grant CNS-0954096), the Air Force Office of Scientific Research (Grant FA9550-13-1-0077), the Spanish Government (Grant TIN2012-39391-C04-01), and a Juan de la Cierva Fellowship for Juan Caballero. Any opinions, findings, and conclusions expressed in this material are those of the authors and do not necessarily reflect the views of the sponsors.

### References

[1] Dirtjumper. http://www.infonomics-society.org/IJICR/DirtJumper.
[2] Alexa Top Domains. http://www.alexa.com/.
[3] Oﬁr Arkin. A remote active OS fingerprinting tool using ICMP. ;login: The USENIX Magazine, 27(2), November 2008.
[4] Bamital Malware. https://now-static.norton.com/now/en/pu/images/Promotions/2013/Bamital/bamital.html.
[5] Juan Caballero, Noah M. Johnson, Stephen McCamant, and Dawn Song. Binary code extraction and interface identification for security applications. In Network and Distributed System Security Symposium, San Diego, CA, February 2010.
[6] Juan Caballero, Pongsin Poosankam, Christian Kreibich, and Dawn Song. Dispatcher: Enabling active botnet infiltration using automatic protocol reverse-engineering. In ACM Conference on Computer and Communications Security, Chicago, IL, November 2009.
[7] Juan Caballero, Shobha Venkataraman, Pongsin Poosankam, Min G. Kang, Dawn Song, and Avrim Blum. FiG: Automatic fingerprint generation. In Network and Distributed System Security Symposium, San Diego, CA, February 2007.
[8] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In ACM Conference on Computer and Communications Security, Alexandria, VA, October 2007.
[9] Paolo Milani Comparetti, Gilbert Wondracek, Christopher Kruegel, and Engin Kirda. Prospex: Protocol specification extraction. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2009.
[10] Weidong Cui, Jayanthkumar Kannan, and Helen J. Wang. Discoverer: Automatic protocol description generation from network traces. In USENIX Security Symposium, Boston, MA, August 2007.
[11] David Dagon, Chris Lee, Wenke Lee, and Niels Provos. Corrupted DNS resolution paths: The rise of a malicious resolution authority. In Network and Distributed System Security Symposium, San Diego, CA, February 2008.
[12] Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. Zmap: Fast internet-wide scanning and its security applications. In Usenix Security Symposium, August 2013.
[13] Nicolas Falliere. Sality: Story of a peer-to-peer viral network. Technical report, 2011.
[14] Guofei Gu, Vinod Yegneswaran, Phillip Porras, Jennifer Stoll, and Wenke Lee. Active botnet probing to identify obscure command and control channels. In Proceedings of 2009 Annual Computer Security Applications Conference (ACSAC’09), December 2009.
[15] Guofei Gu, Junjie Zhang, and Wenke Lee. BotHunter: Detecting Malware Infection Through IDS-Driven Dialog Correlation. In Proceedings of USENIX Security’07, 2007.
[16] Nadia Heninger, Zagir Durumeric, Eric Wustrow, and J.Alex Halderman. Mining your Ps and Qs: Detection of widespread weak keys in network devices. In USENIX Security Symposium, 2012.
[17] Noah M. Johnson, Juan Caballero, Kevin Zhijie Chen, Stephen McCamant, Pongsin Poosankam, Daniel Reynaud, and Dawn Song. Differential slicing: Identifying causal execution differences for security applications. In Proceedings of the 2011 IEEE Symposium on Security and Privacy, 2011.
[18] Min Gyung Kang, Stephen McCamant, Pongsin Poosankam, and Dawn Song. DTA++: Dynamic taint analysis with targeted control-flow propagation. In Proceedings of the 18th Annual Network and Distributed System Security Symposium, San Diego, CA, February 2011.
[19] Clemens Kolbitsch, Paolo Milani Comparetti, Christopher Kruegel, Engin Kirda, Xiaoyong Zhou, and Xiaofeng Wang. Effective and efficient malware detection at the end host. In USENIX Security Symposium, Montréal, Canada, August 2009.
[20] Clemens Kolbitsch, Thorsten Holz, Christopher Kruegel, and Engin Kirda. Inspector gadget: Automated extraction of proprietary gadgets from malware binaries. In IEEE Symposium on Security and Privacy, Oakland, CA, May 2010.
[21] Zhiqiang Lin, Xuxian Jiang, Dongyan Xu, and Xiangyu Zhang. Automatic protocol format reverse engineering through context-aware monitored execution. In Network and Distributed System Security Symposium, San Diego, CA, February 2008.
[22] Malicia. http://malicia-project.com/.
[23] Malware domain list. http://malwaredomainlist.com/.
[24] Andreas Moser, Christopher Kruegel, and Engin Kirda. Exploring Multiple Execution Paths for Malware Analysis. In Proceedings of IEEE Symposium on Security and Privacy, 2007.
[25] Antonio Nappa, Zhaoyan Xu, M. Zubair Raﬁque, Juan Caballero, and Guofei Gu. Cyberprobe: Towards internet-scale active detection of malicious servers. In Network and Distributed System Security Symposium, 2014.
[26] James Newsome and Dawn Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Network and Distributed System Security Symposium, San Diego, CA, February 2005.
[27] Offensive Computing. http://www.offensivecomputing.net/.
[28] Jitendra Padhye and Sally Floyd. Identifying the TCP behavior of web servers. In SIGCOMM Conference, San Diego, CA, August 2001.
[29] Niels Provos and Peter Honeyman. Scanssh - scanning the internet for SSH servers. In Technical Report CITI TR 01-13, University of Michigan, October 2001.
[30] Ramnit Malware. http://en.wikipedia.org/wiki/Ramnit.
[31] Konrad Rieck, Guido Schwenk, Tobias Limmer, Thorsten Holz, and Pavel Laskov. Botzilla: Detecting the phoning home of malicious software. In ACM Symposium on Applied Computing, 2010.
[32] Prateek Saxena, Pongsin Poosankam, Stephen McCamant, and Dawn Song. Loop-extended symbolic execution on binary programs. In Proceedings of the ACM/SIGSOFT International Symposium on Software Testing and Analysis (ISSTA), 2009.
[33] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask). In Proceedings of IEEE Symposium on Security and Privacy, 2010.
[34] Taidoor Malware. Xpaj.b malware. http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp_the_taidoor_campaign.pdf.
[35] Urlquery. http://urlquery.net/.
[36] Virustotal. http://www.virustotal.com/.
[37] Tielei Wang, Tao Wei, Guofei Gu, and Wei Zou. Taintscope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection. In Proc. of IEEE S&P’10, 2010.
[38] Jeffrey Wilhelm and Tzi cker Chiueh. A forced sampled execution approach to kernel rootkit identification. In Proceedings of the 10th international conference on Recent advances in intrusion detection, 2007.
[39] Gilbert Wondracek, Paolo Milani Comparetti, Christopher Kruegel, and Engin Kirda. Automatic network protocol analysis. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS), 2008.
[40] James Wyke. The zeroaccess botnet: Mining and fraud for massive financial gain, September 2012. http://www.sophos.com/en-us/why-sophos/our-people/technical-papers/zeroaccess-botnet.asp:x.
[41] Zhaoyan Xu, Lingfeng Chen, Guofei Gu, and Christopher Kruegel. Peerpress: Utilizing enemies’ p2p strength against them. In ACM Conference on Computer and Communications Security, Raleigh, NC, October 2012.