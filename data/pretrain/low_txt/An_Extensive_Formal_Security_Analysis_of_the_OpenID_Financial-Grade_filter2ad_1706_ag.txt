### References

1. In *Computer Science*, pp. 239–260, Springer, 2015.
2. E. Y. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, "OAuth Demystified for Mobile Application Developers," in *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14)*, pp. 892–903, 2014.
3. M. Shehab and F. Mohsen, "Towards Enhancing the Security of OAuth Implementations in Smart Phones," in *2014 IEEE International Conference on Mobile Services*, Institute of Electrical & Electronics Engineers (IEEE), June 2014.
4. W. Li and C. J. Mitchell, "Analysing the Security of Google’s Implementation of OpenID Connect," in *Proceedings of the 13th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA)*, vol. 9721, pp. 357–376, 2016.
5. V. Mladenov, C. Mainka, J. Krautwald, F. Feldmann, and J. Schwenk, "On the Security of Modern Single Sign-On Protocols: Second-Order Vulnerabilities in OpenID Connect," *CoRR*, vol. abs/1508.04324v2, 2016.
6. D. Fett, R. Küsters, and G. Schmitz, "An Expressive Model for the Web Infrastructure: Definition and Application to the BrowserID SSO System," in *35th IEEE Symposium on Security and Privacy (S&P 2014)*, pp. 673–688, IEEE Computer Society, 2014.
7. D. Fett, R. Küsters, and G. Schmitz, "SPRESSO: A Secure, Privacy-Respecting Single Sign-On System for the Web," in *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security*, Denver, CO, USA, October 12-16, 2015, pp. 1358–1369, ACM, 2015.
8. D. Fett, R. Küsters, and G. Schmitz, "Analyzing the BrowserID SSO System with Primary Identity Providers Using an Expressive Model of the Web," in *Computer Security - ESORICS 2015 - 20th European Symposium on Research in Computer Security*, Vienna, Austria, September 21-25, 2015, Proceedings, Part I, vol. 9326 of *Lecture Notes in Computer Science*, pp. 43–65, Springer, 2015.
9. D. Fett, P. Hosseyni, and R. Küsters, "An Extensive Formal Security Analysis of the OpenID Financial-grade API," *Tech. Rep.* arXiv:1901.11520, arXiv, 2019. Available at: http://arxiv.org/abs/1901.11520.
10. D. Hardt (ed.), "RFC6749 – The OAuth 2.0 Authorization Framework." IETF, October 2012. https://tools.ietf.org/html/rfc6749.
11. N. Sakimura, J. Bradley, M. Jones, B. de Medeiros, and C. Mortimore, "OpenID Connect Core 1.0 incorporating errata set 1." OpenID Foundation, November 8, 2014. http://openid.net/specs/openid-connect-core-1_0.html.
12. J. Richer (ed.), "RFC7662 – OAuth 2.0 Token Introspection." IETF, October 2015. https://tools.ietf.org/html/rfc7662.
13. N. Sakimura (Ed.), J. Bradley, and N. Agarwal, "Proof Key for Code Exchange by OAuth Public Clients." RFC 7636 (Proposed Standard), September 2015.
14. W. Denniss and J. Bradley, "OAuth 2.0 for Native Apps," RFC, vol. 8252, pp. 1–21, 2017.
15. M. Jones, J. Bradley, and N. Sakimura, "RFC7519 – JSON Web Token (JWT)." IETF, May 2015. https://tools.ietf.org/html/rfc7519.
16. M. Jones, J. Bradley, and N. Sakimura, "RFC7515 – JSON Web Signature (JWS)." IETF, May 2015. https://tools.ietf.org/html/rfc7515.
17. B. Campbell, J. Bradley, N. Sakimura, and T. Lodderstedt, "OAuth 2.0 Mutual TLS Client Authentication and Certificate Bound Access Tokens," *Internet-Draft* draft-ietf-oauth-mtls-09, Internet Engineering Task Force, June 2018. Work in Progress.
18. M. Jones, B. Campbell, J. Bradley, and W. Denniss, "OAuth 2.0 Token Binding - draft-ietf-oauth-token-binding-07." https://www.ietf.org/id/draft-ietf-oauth-token-binding-07.txt.
19. A. Popov, M. Nystrom, D. Balfanz, A. Langley, and J. Hodges, "The Token Binding Protocol Version 1.0." RFC 8471, October 2018.
20. A. Popov, M. Nystrom, D. Balfanz, and A. Langley, "Transport Layer Security (TLS) Extension for Token Binding Protocol Negotiation." RFC 8472, October 2018.
21. A. Popov, M. Nystrom, D. Balfanz, A. Langley, N. Harper, and J. Hodges, "Token Binding over HTTP." RFC 8473, October 2018.
22. E. Rescorla, "Keying Material Exporters for Transport Layer Security (TLS)." RFC 5705, March 2010.
23. A. Popov, M. Nystrom, D. Balfanz, A. Langley, N. Harper, and J. Hodges, "Token Binding over HTTP," *internet-draft*, Internet Engineering Task Force, June 2018. Work in Progress.
24. T. Lodderstedt (ed.), "JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)." August 23, 2018. https://bitbucket.org/openid/fapi/src/ceb0f829bc532e9c540efaa94f6f96d007371ca2/Financial_API_JWT_Secured_Authorization_Response_Mode.md.
25. OpenID Financial-grade API Working Group, "Financial API - Part 1: Read-Only API Security Profile." August 23, 2018. https://bitbucket.org/openid/fapi/src/ceb0f829bc532e9c540efaa94f6f96d007371ca2/Financial_API_WD_001.md.
26. T. Lodderstedt, J. Bradley, A. Labunets, and D. Fett, "OAuth 2.0 Security Best Current Practice," October 2018. https://tools.ietf.org/html/draft-ietf-oauth-security-topics.
27. OpenID Financial-grade API Working Group, "Financial API - Part 2: Read and Write API Security Profile." August 23, 2018. https://bitbucket.org/openid/fapi/src/ceb0f829bc532e9c540efaa94f6f96d007371ca2/Financial_API_WD_002.md.
28. T. Lodderstedt (ed.), M. McGloin, and P. Hunt, "RFC6819 – OAuth 2.0 Threat Model and Security Considerations." IETF, January 2013. https://tools.ietf.org/html/rfc6819.
29. D. Fett, R. Küsters, and G. Schmitz, "The Web SSO Standard OpenID Connect: In-Depth Formal Analysis and Security Guidelines," *Tech. Rep.* arXiv:1704.08539, arXiv, 2017. Available at: http://arxiv.org/abs/1704.08539.
30. M. Abadi and C. Fournet, "Mobile Values, New Names, and Secure Communication," in *Proceedings of the 28th ACM Symposium on Principles of Programming Languages (POPL 2001)*, pp. 104–115, ACM Press, 2001.
31. A. Barth and M. West, "Cookies: HTTP State Management Mechanism." https://httpwg.org/http-extensions/rfc6265bis.html.

### Appendix A: Authorization Request Leak Attack – Details

We provide further details about the authorization request leak attack, which was only briefly mentioned in Section IV-D. A concrete instantiation of this attack is shown in Figure 7, where the scenario is based on the Read-Only flow of a public client. As explained below, similar attacks can also be applied to other configurations of the FAPI (except for web server clients that use OAUTB, which are not susceptible as discussed in Section V).

#### Attack Scenario

1. **Authorization Request Sent**: The client sends the authorization request to the browser in Step 2.
2. **Leakage to Attacker**: The authorization request leaks to the attacker in Step 3.
3. **Attacker Impersonates Browser**: The attacker then behaves as the browser and logs in (Step 5). Consequently, the authorization code received in Step 6 is associated with the identity of the attacker.
4. **State Value Leakage**: The state value used in the authorization request aims to prevent Cross-Site Request Forgery (CSRF) attacks. However, since the state value leaks, this protection fails.
5. **CSRF Attack**: If the user visits a website controlled by the attacker, the attacker can send a request from the user's browser to the AS containing the code and the state value (Step 8). Since the state value matches, the client continues the flow and uses the code to retrieve an access token in Steps 9 and 10.
6. **Access Token Misuse**: The access token is associated with the attacker, meaning the honest user accesses resources belonging to the attacker. This can result in the honest user being logged in under the attacker's identity or modifying the attacker's resources (e.g., uploading personal documents to the attacker's account).

#### Exceptions

This attack can occur in all configurations except for the Read-Write flow when the client is a web server using OAUTB. In this case, the browser (and thus the attacker) must prove possession of a key pair, which the attacker cannot do. Therefore, the AS would stop the flow.

#### Additional Considerations

If we assume the FAPI is not required to be secure if the authorization request leaks, the flow remains insecure because the authorization response might still leak to the attacker (see Section III-C1). This response contains the state value. For app clients, the operating system might send the response to the attacker app (see Section II-B). After receiving the authorization response, the attacker app can start a new flow using the state value, leading to the same issues as described above.

Encrypting the state value does not solve the problem, as the attacker uses the entire authorization request. The attacker acts as the browser of the honest user, making the encryption ineffective.

### Appendix B: The Web Infrastructure Model (WIM) – Some Background

We provide more details about the Web Infrastructure Model (WIM).

#### a) Signature and Messages

The WIM follows the Dolev-Yao approach, where messages are expressed as formal terms over a signature Σ. For example, an HTTP request in the WIM is represented as a term `r` containing a nonce, an HTTP method, a domain name, a path, URI parameters, request headers, and a message body. An HTTPS request for `r` is of the form `enca((cid:5)r,k(cid:2)(cid:6), pub(kex.com))`, where `k(cid:2)` is a fresh symmetric key generated by the sender (typically a browser); the responder uses this key to encrypt the response.

The equational theory associated with Σ induces a congruence relation ≡ on terms, capturing the meaning of the function symbols in Σ. For instance, the equation `deca(enca(x, pub(y)),y) = x` captures asymmetric decryption. Thus, `deca(enca((cid:5)r,k(cid:2)(cid:6), pub(kex.com)),kex.com) ≡ (cid:5)r,k(cid:2)(cid:6)`.

#### b) Scripts

A script models JavaScript running in a browser. Scripts are defined similarly to Dolev-Yao processes. When triggered by a browser, a script is provided with state information and outputs a term representing a new internal state and a command to be interpreted by the browser. The attacker script outputs everything derivable from the input.

#### c) Running a System

A run of a system is a sequence of configurations. The transition from one configuration to the next is called a processing step. We denote this as `Q = (S,E,N) −→ (S',E',N')`, where `S` and `S'` are the states of the processes in the system, `E` and `E'` are pools of waiting events, and `N` and `N'` are sequences of unused nonces.

#### d) Web Browsers

An honest browser is used by one honest user, modeled as part of the browser. User actions, such as following a link, are modeled as non-deterministic actions of the web browser. User credentials are stored in the initial state of the browser and are given to the browser during initialization.