### 4.3. Comparison of Fault Types and Recovery Mechanisms

In this section, we compare the impact of transient, intermittent, and permanent faults on system behavior and recovery. Our observations are based on fault injection experiments conducted in both memory and buses.

#### Fault Injection in Buses
- **Transient Faults (bit-flips):** These faults were defined with a duration randomly selected within the interval [0.1T, 1.0T]. The fault models used for both memory and buses included stuck-at ('0', '1'), indetermination, and open line.
- **Intermittent Faults:** We observed that the trend of detected errors (Detect column) follows the order: permanent > intermittent > transient. The percentage of undetected errors (ND_Fail column) is very low for all fault types (less than 2%). Transient faults are the most challenging to detect.
- **Permanent Faults:** Parity (D_PAR column) is the most effective detection mechanism, followed by the watchdog timer (D_WD column). Only for transient faults, the watchdog timer shows some relevance (23.66%).

#### Fault Injection in Memory
- **Transient Faults:** The results show a similar trend to those obtained from bus injections, with a very low percentage of activated errors due to the small percentage of memory usage.
- **Intermittent Faults:** The parity mechanism (D_PAR column) is the most effective, followed by the back-off mechanism. The highest activation of back-off is observed for transient faults.
- **Permanent Faults:** The spare CPU is the most effective recovery mechanism, followed by the back-off. The percentage of recovered failures (Recov column) is very high for permanent faults (97.76%).

### Tables
The following tables summarize the impact of single intermittent faults injected in the buses and memory, as well as the comparison of multiple transient, intermittent, and permanent faults.

**Table 3. Impact of Single Intermittent Faults Injected in the Buses (Arithmetic Series)**
| tA | tI | Act | No Effect | Detect | ND Fail | D_PAR | D_WD | Recov | NR Fail | R_BOFF | R_CP | R_SP |
|----|----|-----|-----------|--------|---------|-------|------|-------|---------|--------|------|------|
| ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... |

**Table 4. Impact of Single Intermittent Faults Injected in the Buses (Bubblesort)**
| tA | tI | Act | No Effect | Detect | ND Fail | D_PAR | D_WD | Recov | NR Fail | R_BOFF | R_CP | R_SP |
|----|----|-----|-----------|--------|---------|-------|------|-------|---------|--------|------|------|
| ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... |

**Table 5. Comparison of Multiple Transient, Intermittent, and Permanent Faults (Bubblesort)**
| Injection | Act | No Effect | Detect | ND Fail | D_PAR | D_WD | Recov | NR Fail | R_BOFF | R_CP | R_SP |
|----------|-----|-----------|--------|---------|-------|------|-------|---------|--------|------|------|
| Transient | 98.50 | 15.53 | 83.25 | 1.22 | 76.34 | 23.66 | 91.46 | 7.68 | 23.73 | 4.00 | 72.27 |
| Intermittent | 99.20 | 3.73 | 95.97 | 0.30 | 97.16 | 2.84 | 88.66 | 11.13 | 19.67 | 2.49 | 77.84 |
| Permanent | 99.80 | 1.40 | 98.20 | 0.40 | 95.71 | 4.29 | 2.14 | 97.76 | 0.00 | 0.00 | 100.00 |

### Conclusions and Future Work
- **Detection Mechanisms:** Parity and watchdog timers are effective for detecting errors, especially in the case of permanent and intermittent faults.
- **Recovery Mechanisms:** The spare CPU and back-off mechanisms are the most effective for recovery. Retry works well with short durations and when multiple faults are present.
- **Future Work:** We plan to extend our research to more complex and real systems with different architectures, using various fault injection techniques and mutants. Additionally, we aim to validate new intermittent fault models and inject faults in other targets beyond buses and memory.

### References
[1] C. Constantinescu, "Impact of Deep Submicron Technology on Dependability of VLSI Circuits," Procs. DSN 2002, pp. 205-209, USA, 2002.
[2] C. Constantinescu, "Impact of Intermittent Faults on Nanocomputing Devices," in Procs. WDSN-07, UK, 2007, available at http://www.laas.fr/WDSN07.
[3] E.A. Amerasekera and F.N. Najm, "Failure Mechanisms in Semiconductor Devices," John Wiley & Sons, 1997.
[4] P.J. Gil et al., "Fault Representativeness," Deliverable ETIE2 of Dependability Benchmarking Project, IST-2000-25245, 2002.
[5] C. Hawkins et al., "CMOS IC Nanometer Technology Failure Mechanisms," in Procs. IEEE CICC 2003, pp. 605-611, USA 2003.
[6] D.P. Siewiorek and R.S. Schwarz, "Reliable Computer Systems: Design and Evaluation," Digital Press, 1992, 2nd Edition.
[7] D.K. Pradhan, "Fault-Tolerant Computing: Theory and Techniques," Prentice Hall, 1992.
[8] J. Gracia et al., "Analysis of the Influence of Intermittent Faults in a Microcontroller," in DDECS'08, pp. 80-85, Slovakia, 2008.
[9] D. Gil et al., "Injecting Faults for the Validation of Commercial Microcontrollers," in HLDVT'08, pp. 177-184, USA, 2008.
[10] C. Constantinescu, "Dependability Benchmarking Using Environmental Test Tools," in RAMS'05, pp. 567-571, 2005.
[11] J.C. Smolens et al., "Detecting Emerging Wearout Faults," 3rd Workshop on Silicon Errors in Logic - System Effects (SELSE3), 2007, available at http://selse3.selse.org/Papers/10_Smolens_P.pdf.
[12] S. Borkar et al., "Parameter Variations and Impact on Circuits and Microarchitecture," in DAC'03, pp. 338-342, 2003.
[13] J.W. McPherson, "Reliability Challenges for 45nm and Beyond," in DAC'06, pp. 176-181, July 2006.
[14] D. Gil et al., "VHDL Simulation-Based Fault Injection Techniques and Tools for Embedded Systems Reliability Evaluation," in Benso & Prinetto eds., "Fault Injection Techniques," Kluwer Academic, 2003.
[15] E. Jenn et al., "Fault Injection into VHDL Models: The MEFISTO Tool" in FTCS, pp. 66-75, 1994.
[16] D. Gil et al., "Fault Injection into VHDL Models: Experimental Validation of a Fault Tolerant Microcomputer System" in EDCC'03, pp. 191-208, 1999.
[17] J.R. Armstrong, "Chip-Level Modelling with VHDL," Prentice Hall, 1989.

---

This version of the text is more organized, coherent, and professional, making it easier to read and understand.