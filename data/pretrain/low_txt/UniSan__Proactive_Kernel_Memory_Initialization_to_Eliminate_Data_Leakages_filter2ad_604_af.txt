### Table 6: User Space (AArch64) Performance Evaluation Results with Multiple Android Benchmarks

The scores in the table indicate performance, with higher values being better.

| Benchmark | Score   | Change   |
|-----------|---------|----------|
| Benchmark 1 | 4,729 | +1.0%    |
| Benchmark 2 | 2,776 | -0.4%    |
| Benchmark 3 | 2,600 | +0.4%    |

### Performance Evaluation of Apache Web Server

We evaluated the latency and bandwidth of the Apache web server. The ApacheBench tool was run on a laptop connected to our desktop machine via a one Gigabit Ethernet cable. We used the default configurations for Apache.

#### Latency Evaluation
- **File Size**: 1KB
- **Concurrency Levels**: 1, 50, 100, 150, 200, and 250
- **Repetitions**: 10,000 requests per experiment

#### Bandwidth Evaluation
- **File Sizes**: 100B, 1KB, 10KB, 100KB, and 1MB
- **Concurrency Level**: 32
- **Network I/O Saturation**: Not saturated except for the 1MB file
- **Repetitions**: 10,000 requests per experiment

**Results**:
- The blind mode incurred an average slowdown of 0.7% in the concurrency experiment and 0.9% in the bandwidth experiment.
- UniSan, however, imposes a 10x slowdown, which is too high for practical adoption as a prevention tool.

### Memory Safety and Model Checking Techniques

Several memory safety techniques have been proposed to prevent spatial memory errors (e.g., out-of-bound reads) and use-after-free bugs. Model checking techniques can detect semantic errors caused by developers. These tools are effective in detecting or preventing kernel leaks caused by spatial memory errors, use-after-free, or semantic errors, and thus are complementary to UniSan.

- **DieHard [4]**: Probabilistically detects uninitialized memory uses for heap but not stack.
- **Cling [2]**: Constrains memory allocation to allow address space reuse only among objects of the same type, mitigating exploits of temporal memory errors.
- **StackArmor [7]**: Provides sophisticated stack protection, including prevention of uninitialized reads in binaries. It uses stack layout randomization to probabilistically prevent inter-procedural uninitialized reads.
- **Type Systems [12, 15]**: Can prevent dangling pointers, uninitialized pointer dereferences, and out-of-bound accesses, but do not cover uninitialized data leaks.

### Protections Using Zero-Initialization

Zero-initialization has been used in previous works to achieve protections. However, it has limitations:

- **Secure Deallocation [8]**: Zero-initializes deallocated memory to reduce data exposure risk. However, deallocations are not always available (e.g., in the case of memory leaks), and selective zeroing for efficiency is challenging.
- **Lacuna [13]**: Allows users to run programs in "private sessions" and erases all memory after the session ends.
- **StackArmor [7]**: Zero-initializes intra-procedural allocations that cannot be proven secure against uninitialized reads.

### Discussion and Future Work

#### Custom Heap Allocator
UniSan currently tracks typical heap allocators (kmalloc and kmem_cache_alloc). To handle custom heap allocations (e.g., alloc_skb), UniSan can use allocator specifications provided by developers. For user space programs, LLVM already provides an API `isMallocLikeFn` to test whether a function call allocates uninitialized memory based on heuristics. We plan to use similar heuristics to infer "malloc-like" functions in the kernel.

#### Source Code Requirement
Source code is required. If some kernel drivers are closed-source, we must carefully identify all possible calls targeting these drivers and assume them as sinks. Failure to identify such calls will result in incomplete call graphs and false negatives.

#### Security Impacts of Zero-Initialization
Some systems use uninitialized memory as a source of randomness. For example, the SSLeay implementation of OpenSSL uses uninitialized buffers as an entropy source. Zero-initialization reduces this entropy, but using uninitialized data as a randomness source is insecure and should be avoided.

#### False Positives
UniSan eliminates false negatives by increasing the false positive rate. There is room to reduce false positives using point-to analysis and dynamic taint analysis. Since false positives do not affect program semantics but introduce performance overhead, and UniSan is already efficient, we leave these optimizations for future work.

#### More Kernel Modules
Our experiments included only modules enabled by the default kernel configurations. The current Linux kernel has around 20,000 modules, many of which were not included. Some modules are not compilable by LLVM and require additional engineering effort. As a proof-of-concept, supporting these additional modules is out-of-scope, but we may rely on the open-source community for patches or port UniSan to GCC.

#### Beyond Kernels
UniSan's detection and instrumentation work at the LLVM IR level, making it extendable to protect user space programs. To support user space programs, the IR of libraries should be included, and sources (for heap) and sinks should be redefined. In future work, we will use UniSan to detect and prevent information leaks in security- and privacy-sensitive programs like OpenSSL.

### Conclusion

Information leaks in the kernel pose a major security threat, rendering protection mechanisms like kASLR and StackGuard ineffective and leaking security-sensitive data. Uninitialized data reads are particularly critical. Existing defenses cannot completely and efficiently prevent uninitialized data leaks.

**Key Idea of UniSan**:
- Use byte-level, flow-sensitive, and context-sensitive reachability and initialization analysis to identify any allocation that leaves the kernel without being fully initialized.
- Automatically instrument the kernel to initialize such allocations.
- UniSan has no false negatives, preventing all possible uninitialized data leaks in the kernel.

**Application and Results**:
- Applied to the latest Linux and Android kernels.
- Successfully prevented 43 known uninitialized data leaks and many new ones.
- 19 of the new data leak vulnerabilities were confirmed by the Linux community and Google.
- Extensive evaluation shows UniSan is robust and imposes only a negligible performance overhead.

### Acknowledgment

We thank Byoungyoung Lee, Herbert Bos, Anil Kurmus, and the anonymous reviewers for their valuable feedback, as well as our operations staff for their proofreading efforts. This research was supported in part by various grants and contracts from NSF, ONR, DHS, United States Air Force, DARPA, and ETRI MSIP/IITP.

### References

[1] LLVM Classes Definition, 2016. http://llvm.org/docs/doxygen/html/annotated.html.
[2] P. Akritidis. Cling: A memory allocator to mitigate dangling pointers. In Proceedings of the 19th USENIX Security Symposium (Security), Washington, DC, Aug. 2010.
[3] T. Ball, E. Bounimova, B. Cook, V. Levin, J. Lichtenberg, C. McGarvey, B. Ondrusek, S. K. Rajamani, and A. Ustuner. Thorough static analysis of device drivers. In Proceedings of the 1st ACM SIGOPS/EuroSys European Conference on Computer Systems 2006, EuroSys â€™06, 2006.
[4] E. D. Berger and B. G. Zorn. Diehard: Probabilistic memory safety for unsafe languages. In Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Ottawa, Canada, June 2006.
[5] D. Bruening and Q. Zhao. Practical memory checking with Dr. Memory. In Proceedings of the 2004 International Symposium on Code Generation and Optimization (CGO), Washington, DC, Mar. 2011.
[6] H. Chen, Y. Mao, X. Wang, D. Zhou, N. Zeldovich, and M. F. Kaashoek. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Proceedings of the 2nd Asia-Pacific Workshop on Systems (APSys), Shanghai, China, July 2011.
[7] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida. StackArmor: Comprehensive Protection from Stack-based Memory Error Vulnerabilities for Binaries. In Proceedings of the 2015 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2015.
[8] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum. Shredding your garbage: Reducing data lifetime through secure deallocation. In Proceedings of the 14th Conference on USENIX Security Symposium, Berkeley, CA, USA, 2005.
[9] K. Cook. Kernel address space layout randomization, 2013. http://outflux.net/slides/2013/lss/kaslr.pdf.
[10] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and Q. Zhang. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proceedings of the 7th USENIX Security Symposium (Security), San Antonio, TX, Jan. 1998.
[11] C. Details. Vulnerabilities By Type, 2016. http://www.cvedetails.com/vulnerabilities-by-types.php.
[12] D. Dhurjati, S. Kowshik, and V. Adve. SafeCode: Enforcing alias analysis for weakly typed languages. In Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Ottawa, Canada, June 2006.
[13] A. M. Dunn, M. Z. Lee, S. Jana, S. Kim, M. Silberstein, Y. Xu, V. Shmatikov, and E. Witchel. Eternal sunshine of the spotless machine: Protecting privacy with ephemeral channels. In Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Hollywood, CA, Oct. 2012.
[14] J. Erickson, M. Musuvathi, S. Burckhardt, and K. Olynyk. Effective data-race detection for the kernel. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Vancouver, Canada, Oct. 2010.
[15] D. Grossman, G. Morrisett, T. Jim, M. Hicks, Y. Wang, and J. Cheney. Region-based memory management in Cyclone. In Proceedings of the 2002 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Berlin, Germany, June 2002.
[16] B. Hardekopf and C. Lin. The ant and the grasshopper: Fast and accurate pointer analysis for millions of lines of code. In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Diego, CA, June 2007.
[17] V. P. Kemerlis, G. Portokalidis, and A. D. Keromytis. kGuard: Lightweight kernel protection against return-to-user attacks. In Proceedings of the 21st USENIX Security Symposium (Security), Bellevue, WA, Aug. 2012.
[18] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis. Ret2dir: Rethinking kernel isolation. In Proceedings of the 23rd USENIX Security Symposium (Security), San Diego, CA, Aug. 2014.
[19] M. Krause. CVE-2013-1825: Various info leaks in Linux kernel, 2013. http://www.openwall.com/lists/oss-security/2013/03/07/2.
[20] A. Kurmus and R. Zippel. A tale of two kernels: Towards ending kernel hardening wars with split kernel. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), Scottsdale, Arizona, Nov. 2014.
[21] LLVM. LLVM Alias Analysis Infrastructure, 2016. http://llvm.org/docs/AliasAnalysis.html.
[22] LLVM. The LLVM Compiler Infrastructure, 2016. http://llvm.org/.
[23] LLVMLinux. The LLVMLinux Project, 2016. http://llvm.linuxfoundation.org/index.php/Main_Page.
[24] L. W. McVoy and C. Staelin. Lmbench: Portable tools for performance analysis. In USENIX Annual Technical Conference, 1996.
[25] C. Min, S. Kashyap, B. Lee, C. Song, and T. Kim. Cross-checking semantic correctness: The case of finding file system bugs. In Proceedings of the 25th ACM Symposium on Operating Systems Principles (SOSP), Monterey, CA, Oct. 2015.
[26] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. SoftBound: Highly compatible and complete spatial memory safety for C. In Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), Dublin, Ireland, June 2009.
[27] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. CETS: Compiler enforced temporal safety for C. In International Symposium on Memory Management, 2010.
[28] S. Nagarakatte, M. M. K. Martin, and S. Zdancewic. WatchdogLite: Hardware-accelerated compiler-based pointer checking. In Proceedings of the 2014 International Symposium on Code Generation and Optimization (CGO), Orlando, FL, Feb. 2014.
[29] N. Nethercote and J. Seward. Valgrind: A framework for heavyweight dynamic binary instrumentation. In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), San Diego, CA, June 2007.
[30] B. Niu and G. Tan. Modular control-flow integrity. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, 2014.
[31] V. Nossum. Getting Started With kmemcheck, 2015. https://www.kernel.org/doc/Documentation/kmemcheck.txt.
[32] S. PeirÃ³, M. M. noz, M. Masmano, and A. Crespo. Detecting stack-based kernel information leaks. In International Joint Conference SOCOâ€™14-CISISâ€™14-ICEUTEâ€™14, 2014.
[33] J. Rentzsch. Data alignment: Straighten up and fly right â€“ Align your data for speed and correctness, 2005. https://www.ibm.com/developerworks/library/pa-dalign/pa-dalign-pdf.pdf.
[34] E. J. Schwartz, T. Avgerinos, and D. Brumley. All you ever wanted to know about dynamic taint analysis and forward symbolic execution (but might have been afraid to ask). In Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP â€™10, 2010.
[35] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. AddressSanitizer: A fast address sanity checker. In Proceedings of the 2012 USENIX Annual Technical Conference (ATC), Boston, MA, June 2012.
[36] J. Seward and N. Nethercote. Using Valgrind to detect undefined value errors with bit-precision. In Proceedings of the 2004 USENIX Annual Technical Conference (ATC), Anaheim, CA, Juneâ€“July 2005.
[37] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA, Oct.â€“Nov. 2007.
[38] C. Song, B. Lee, K. Lu, W. R. Harris, T. Kim, and W. Lee. Enforcing Kernel Security Invariants with Data Flow Integrity. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2016.
[39] E. Stepanov and K. Serebryany. MemorySanitizer: Fast detector of uninitialized memory use in C++. In Proceedings of the 2015 International Symposium on Code Generation and Optimization (CGO), San Francisco, CA, Feb. 2015.
[40] PaX Team. PaX - gcc plugins galore, 2013. https://pax.grsecurity.net/docs/PaXTeam-H2HC13-PaX-gcc-plugins.pdf.
[41] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ãš. Erlingsson, L. Lozano, and G. Pike. Enforcing forward-edge control-flow integrity in GCC & LLVM. In 23rd USENIX Security Symposium, 2014.
[42] X. Wang, H. Chen, A. Cheung, Z. Jia, N. Zeldovich, and M. F. Kaashoek. Undefined behavior: What happened to my code? In Proceedings of the 3rd Asia-Pacific Workshop on Systems (APSys), Seoul, South Korea, July 2012.
[43] X. Wang, H. Chen, Z. Jia, N. Zeldovich, and M. F. Kaashoek. Improving Integer Security for Systems with KINT. In Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI), Hollywood, CA, Oct. 2012.
[44] D. Ye, Y. Sui, and J. Xue. Accelerating dynamic detection of uses of undefined values with static value-flow analysis. In Proceedings of the 2014 International Symposium on Code Generation and Optimization (CGO), Orlando, FL, Feb. 2014.