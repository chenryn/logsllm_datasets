# Performance and Cost Analysis of CASTLE

## 8.2 PAL Performance
To evaluate the performance of Flicker sessions, we measured the running time of the attestation, signature, and initialization processes. For each PAL function, we conducted 10 runs of execution. For the attestation and signature, we used a single administrator and measured the relative times for key assembly and the creation of the attestation or signature, respectively. For initialization and state generation, we measured the effect of the number of administrators on the running time. The results for the attestation and signature functions are shown in Figure 6, while Figure 7 shows the results for initialization, and Figure 8 for state generation.

Attestation took longer than signature on average, likely due to the additional operation of creating the session BLOB. We observed that the majority of the execution time was spent on key assembly (calculating large helper numbers) and the attestation or certificate signature. This indicates that the overhead of starting and ending Flicker sessions and the remainder of the PAL logic is a small portion of the run time (around 2.5 seconds for each mode). 

In initialization, we observed a small effect of the number of administrators on the running time. In state generation, the number of administrators had no significant effect on the running time. This is partly because state generation, which must obtain randomness from the TPM to generate three RSA public keys, has a running time on the order of minutes rather than seconds for other operations.

We acknowledge that the duration of Flicker sessions is long compared to standard signature processes, sometimes taking longer than 15 seconds. We could reduce the running time of the PAL by storing the private key descriptions in PKCS #1 format in S, eliminating the key assembly overhead, and by optimizing the mbed TLS library for performance, reducing the time required for an attestation or certificate signature. However, we emphasize that the system is already usable in its current instantiation, and the few seconds of waiting time are acceptable for conscripted CAs, who issue certificates at a much lower volume than commercial CAs.

## 8.3 Signature Session Performance
To estimate the running time of a signature session with trained administrators, we performed several signature sessions. In a certificate signing session, an administrator must scan a QR code at the request, attestation, authorization, and signature steps. Thus, each administrator scans or displays a total of 4 QR codes over the course of a session. With k administrators for each session, QR codes must be scanned sequentially to or from the signer, resulting in a total of 4k QR codes exchanged between the signer and administrators.

At the request step (and in each step where sequential scanning of QR codes is required), sequentially scanning QR codes took approximately 5 seconds per administrator on average. Attestation took about 15 seconds on average. During authorization, finding the hidden digit and authenticating took 1.5 minutes on average, assuming careful checking of the CSR contents. Finally, the signature took about 14 seconds on average.

Scanning the certificate signature and exporting the certificate took 30 seconds on average. Thus, a full signature procedure took an average of approximately 150 + 20k seconds. Even with careful checking in a production environment, we do not expect a full session to take more than 5 minutes. For high-value certificates, such latency is reasonable, considering that EV certificates require an in-person meeting and can take days.

## 8.4 Cost
The physical construction of the machine, monitor, webcam, and glass box was around US$2000, with the manufacturing of the glass box accounting for roughly $1000. We anticipate that these costs can be reduced in larger-scale production, but even so, a cost of $2000 should be within CA means, given that purchasing a certificate costs on the order of $1000.

We anticipate that the majority of the cost of deploying CASTLE will stem from the training and salary of administrators. Due to the low volume of certificate issuances expected from conscripted CAs, existing administrators could take on signing session duties in CASTLE. We note that the protocol requires at least two (and ideally three) administrators to secure the signature and management operations against a single misbehaving administrator.

## 9. Discussion
In this section, we briefly discuss several important aspects of CASTLE. We address design alternatives for CASTLE in practice, acknowledge limitations, and outline our future work.

### Certificate Revocation
The current version of CASTLE does not handle certificate revocation. CASTLE can support various revocation systems such as CRLs [2] or OCSP [20], but the use of an air-gapped signer would limit the frequency of interactions with the signer machine to authorize a revocation. We leave the detailed design and implementation of such a mechanism to future work.

### Limitations
One limitation of CASTLE is that BLOBs and log entries can be modified (in encrypted form) or destroyed (though detectably so). To address this weakness, we could add an extra step to each signature operation that requires the administrator to confirm that other administrators have received a record of the signature before the final certificate signature is provided. Another limitation is the lack of formal verification of our protocols. We plan to address this limitation in future work.

### Deploying CASTLE
In future work, we plan to conduct additional work to assess and improve the operation of CASTLE in practice. Specifically, we plan to carry out a survey among both full-time and conscripted CAs to determine the relative costs of administrators, types of hardware and software, security of their physical facilities, and history of certificate misissuance. The results of this survey would provide us with an overview of the causes of certificate misissuance at both full-time and conscripted CAs, and provide a realistic estimate of the cost of deploying CASTLE in a conscripted CAs.

We also plan to conduct a comprehensive usability test of the CASTLE software with domain experts (i.e., administrators at conscripted CAs). This testing will allow us to improve the ease of use of CASTLE for administrators, and we anticipate that such improvements will lead to fewer operational errors on the administrators’ part. Finally, we plan to perform further optimizations in the code to improve performance and security. In particular, we plan to harden the QR code and certificate processing libraries, which are critical pieces of our current signer prototype.

### Related Work
Little related work on hardware-secured CA signing exists besides HSMs, though some proposals leverage trusted computing for authentication [4, 12], key management [25], and replay protection [18]. These offer similar functionality to that of CASTLE, but often with a larger TCB. For example, KISS [25] uses devices carried by administrators similar to verifiers, but all of these devices must be trusted. Other work has attempted to simplify the PKI signing process [6], but for end-users rather than CAs.

Several open-source projects offer code for different CA functionalities. For example, OpenCA3 offers code for an OCSP responder called OCSPD, while PrimeKey’s EJBCA [19] offers a full CA application. EJBCA can be run in a virtual machine or make use of an HSM. EJBCA includes a CA, validation authority (to validate certificates), and an OCSP responder. However, while EJBCA offers the ability to use secure hardware such as HSMs and smart cards, CAs must still purchase the secure hardware and design their administrative processes.

## 10. Conclusion
Our layered defense-in-depth design for CASTLE shows that we can leverage a diverse arsenal of defenses to secure certificate signing and management for low-volume conscripted CAs. CASTLE is easy to use for entities who can follow operating procedures and provide physical security, and thus provides a much-needed step towards improving security, ease of use, and economic operation for conscripted CAs.

## Acknowledgments
The research leading to these results has received funding from the European Research Council under the European Union’s Seventh Framework Programme (FP7/2007-2013), ERC grant agreement 617605, and the National Science Foundation, Grant DGS1252522. We also gratefully acknowledge support from ETH Zurich and from the Zurich Information Security and Privacy Center (ZISC).

We graciously thank Magnetron Labs Merz for the production of the glass box prototype. We also thank David Barrera and Daniele Asoni, who provided feedback on drafts of the paper, and the anonymous reviewers, whose feedback helped to improve the paper.

## 11. References
[1] TPM main specification level 2 version 1.2, revision 116. Trusted Computing Group (March 2011)
[2] Cooper, D., Santesson, S., Farrell, S., Boeyen, S., Housley, R., Polk, T.: Internet X.509 public key infrastructure certificate and certificate revocation list (CRL) profile. RFC 5280 (May 2008)
[3] Dillow, C.: An order of seven global cyber-guardians now hold keys to the Internet. http://www.popsci.com/technology/article/2010-07/order-seven-cyber-guardians-around-world-now-hold-keys-internet (July 2010)
[4] Gajek, S., Löhr, H., Sadeghi, A.R., Winandy, M.: Truwallet: trustworthy and migratable wallet-based web authentication. In: ACM Workshop on Scalable Trusted Computing (STC). pp. 19–28. ACM (2009)
[5] Greene, J.: Intel trusted execution technology. White paper (2012)
[6] Gutmann, P.: Plug-and-play PKI: A PKI your mother can use. In: 12th USENIX Security Symposium. USENIX (2003)
[7] Haber, S., Stornetta, W.: How to time-stamp a digital document. Journal of Cryptology 3(2), 99–111 (1991), http://dx.doi.org/10.1007/BF00196791
[8] Hoekstra, M.: Intel SGX for dummies (Intel SGX design objectives). https://software.intel.com/en-us/blogs/2013/09/26/protecting-application-secrets-with-intel-sgx (September 2013)
[9] Hoogstraaten, H., Prins, R., Niggebrugge, D., Heppener, D., Groenewegen, F., Wettink, J., Strooy, K., Arends, P., Pols, P., Kouprie, R., Moorrees, S., van Pelt, X., Hu, Y.Z.: Black Tulip: Report of the investigation into the DigiNotar certificathttps://www.rijksoverheid.nl/bestanden/documenten-en-publicaties/rapporten/2012/08/13/black-tulip-update/black-tulip-update.pdf (August 2012)
[10] Jacobson, V., Smetters, D.K., Thornton, J.D., Plass, M.F., Briggs, N.H., Braynard, R.L.: Networking named content. In: ACM CoNEXT (December 2009)
[11] Jonsson, J., Kaliski, B.: PKCS #1: RSA cryptography specifications version 2.1. RFC 3447 (February 2003)
[12] Kostiainen, K., Ekberg, J.E., Asokan, N., Rantala, A.: On-board credentials with open provisioning. In: 4th International Symposium on Information, Computer, and Communications Security (ASIACCA). pp. 104–115. ACM (2009)
[13] Langley, A.: Enhancing digital certificate security. http://googleonlinesecurity.blogspot.ch/2013/01/enhancing-digital-certificate-security.html (January 2013)
[14] Langley, A.: Maintaining digital certificate security. http://googleonlinesecurity.blogspot.co.uk/2015/03/maintaining-digital-certificate-security.html (March 2015)
[15] McCune, J.M., Parno, B.J., Perrig, A., Reiter, M.K., Isozaki, H.: Flicker: An execution infrastructure for TCB minimization. In: ACM SIGOPS Operating Systems Review. vol. 42, pp. 315–328. ACM (2008)
[16] Naylor, D., Mukerjee, M.K., Agyapong, P., Grandl, R., Kang, R., Machado, M.: XIA: Architecting a more trustworthy and evolvable Internet. In: ACM SIGCOMM Computer Communication Review (CCR). vol. 44. ACM (July 2014)
[17] Nystrom, M., Kaliski, B.: PKCS #10: Certification request syntax specification. RFC 2986 (November 2000)
[18] Parno, B., Lorch, J.R., Douceur, J.R., Mickens, J., McCune, J.M.: Memoir: Practical state continuity for protected modules. In: IEEE Symposium on Security and Privacy (SP). pp. 379–394. IEEE (2011)
[19] PKI, P.: EJBCA PKI CA. https://www.ejbca.org/ (June 2015)
[20] Santesson, S., Myers, M., Ankney, R., Malpani, A., Galperin, S., Adams, C.: X.509 Internet public key infrastructure online certificate status protocol - OCSP. RFC 6960 (June 2013)
[21] Sara Dickinson, R.v.R.: HSM buyers’ guide. https://wiki.opendnssec.org/display/DOCREF/HSM+Buyers%27+Guide (August 2012)
[22] Sleevi, R.: Sustaining digital certificate security. https://googleonlinesecurity.blogspot.com/2015/10/sustaining-digital-certificate-security.html (October 2015)
[23] Zetter, K.: PIN crackers nab holy grail of bank card security. http://www.wired.com/2009/04/pins/ (April 2009)
[24] Zhang, X., Hsiao, H.C., Hasker, G., Chan, H., Perrig, A., Andersen, D.G.: SCION: Scalability, control, and isolation on next-generation networks. In: Security and Privacy (SP), 2011 IEEE Symposium on. pp. 212–227. IEEE (May 2011)
[25] Zhou, Z., Han, J., Lin, Y.H., Perrig, A., Gligor, V.: KISS: “Key It Simple and Secure” corporate key management. In: Trust and Trustworthy Computing, pp. 1–18. Springer (2013)

---

This revised text aims to be more coherent, professional, and easier to read. It organizes the information logically and ensures that the flow of ideas is clear and well-structured.