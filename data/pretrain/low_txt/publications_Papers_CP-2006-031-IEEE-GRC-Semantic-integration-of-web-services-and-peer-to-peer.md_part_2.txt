### Semantic Annotation and Integration of Web Services and JXTA Peer Groups

#### A. Semantic Annotation

The semantic annotation of Web services and JXTA peer groups has achieved a high degree of success. We use WSDL-S [9, 10] to semantically describe Web services, establishing a mapping between WSDL descriptions and ontological concepts.

**1. Data Semantics**

To create, represent, and manipulate WSDL-S documents, WSDL4J (http://sourceforge.net/projects/wsdl4j/) can be used. This tool provides Java APIs for WSDL parsing and generation, supporting extensibility elements that allow the addition of new extensions. This flexibility enables WSDL to represent specific technologies under various elements defined by WSDL.

Web services and JXTA peer services take a set of data inputs and produce a set of data outputs. However, their specifications typically only include syntactic and structural details of the input/output data. For example, a Web service might have an input structure called 'client' with fields like 'name', 'address', 'city', 'country', and 'telephone'. In contrast, a JXTA peer service might have an input structure called 'customer' with fields like 'first name', 'last name', 'address', and 'tel'. Although these structures do not match syntactically, they can match semantically.

To enable the integration of Web services and JXTA peer services at the semantic level, we annotated the data using ontological concepts [6, 10]. This added semantics can be used to match the input/output data of Web services and JXTA peer services, which was not possible with only syntactic information.

**2. Functional Semantics**

Services are described using input and output data, as well as operations (methods or functions). The signature of an operation provides only the syntactic details of the input data, output data, and the operation's name. Technological solutions that integrate Web services and JXTA peer networks using operation signatures are insufficient because they cannot precisely express the functionality of services. Two services with the same operation signature might perform entirely different functions.

To address this, in Whisper, Web services and JXTA peer services are annotated with functional semantics. We achieve functional integration by using a Functional Ontology, where each concept/class represents a well-defined functionality. The Functional Ontology was created using the Protégé Ontology Editor and modeled using the OWL (Web Ontology Language) specification.

**3. Using WSDL-S**

Semantic Web services are the result of the evolution from the syntactic definition of Web services to the semantic Web. To semantically annotate Web services, we use WSDL-S, which extends WSDL to include semantic information. Given a WSDL-S specification, Whisper generates a Java file with specific methods to access the semantics of the inputs, outputs, and actions (i.e., operations). These methods are used by SWS-proxies to retrieve the semantic information of Web services.

### B. SWS-Proxies

Our semantic Web services are JXTA-enabled. They do not contain an implementation coded by programmers; instead, they contain a module called SWS-proxy (Semantic Web Service-proxy), which is automatically generated by the proxy generator (see Fig. 1). When a Web service is invoked by a client, the request is forwarded to the SWS-proxy.

SWS-proxies provide communication between Web services and JXTA semantic peers. While proxies are widely used in other contexts (e.g., Web server proxies, firewall proxies), our approach uses proxies to discover semantic peer group advertisements and enable the translation of Web service invocations to JXTA peer invocations, as the two technologies use incompatible communication protocols.

When advertisements with the same semantic functionality are found, the SWS-proxy checks if the b-peers inside the peer group also have the same data semantics. If they do, the SWS-proxy connects to a b-peer of the semantic peer group.

### C. Semantic Advertisements

In Whisper, peer groups semantically advertise the services they provide to the network. This creates a dynamic environment where the network and available services can be discovered and used as they are created.

We use 'extendable advertisements' to create a new type of advertisement that includes semantic information to describe our semantic peer groups. This new type of advertisement, called a semantic advertisement, includes information to allow semantic integration at the data and functional levels. This information includes the action, input, and output.

To have the semantic peer group advertisement recognized upon discovery, it needs to be registered through the 'AdvertisementFactory'. Once registered, we specify the semantics that will describe the peers belonging to a specific group. The advertisement can then be searched by WS-proxies. A semantic advertisement is created, and semantic information is added to specify the ontology used to describe the ontological concepts, the actions that the peers of the group will have, and the inputs and outputs of the peers.

### D. B-Peers

B-peers are entities on a network implementing one or more JXTA protocols. They implement specific functionalities, such as accessing a database to retrieve student data, and importantly, they implement the Bully algorithm to provide a fault-tolerant mechanism. B-peers exist independently and communicate with other b-peers asynchronously.

The Bully algorithm ensures that there is exactly one coordinator in a group of semantically equivalent b-peers. If a b-peer that is not the coordinator crashes, the semantic group continues to answer requests. If the b-peer coordinator goes down, the algorithm starts an election process to appoint a new coordinator. An election is started by sending an election message to all b-peers in the semantic group, and the algorithm guarantees that the b-peer with the greatest peer-id will be the new coordinator. An election is held whenever a b-peer restarts or joins the semantic group or when the current coordinator crashes.

Therefore, a semantic group of b-peers can continue operating even if one or more b-peers crash. While we have implemented the Bully algorithm to achieve higher availability, other algorithms can also be implemented without impacting the Whisper architecture, to protect Web services against other types of failures. For example, the N-version model [11] can be used to protect Web services against Byzantine faults.

### IV. Related Work

Dialani et al. [2] describe an architecture for deploying fault-tolerant Web services. In their approach, Web services extend a checkpoint and rollback interface. The checkpoint interface allows Web services to store their last correct state, while the rollback interface allows the restoration of the service to its last correct state in case of failure. Looker et al. [12] propose WS-FTM (Web Service-Fault Tolerance Mechanism), an implementation of the N-version model [11] for fault tolerance. WS-FTM achieves transparent usage of replicated Web services by using a modified stub created with tools included in WS-FTM.

Whisper differs from previous work by leveraging the features and characteristics of peer-to-peer networks to develop a transparent and scalable mechanism to increase the availability of Web services.

### V. Conclusions

In this paper, we presented a service-oriented architecture named Whisper, which increases the availability of Web services using a fault-tolerant mechanism built on peer-to-peer networks and the semantic Web. Since Web services and WSDL do not provide any mechanism to increase availability, we used JXTA to deploy a fault-tolerant back-end architecture. In Whisper, Web services are semantically enabled and implement a semantic proxy that dispatches Web service requests to b-peers (which implement the Bully algorithm). B-peers are responsible for answering requests, and the integration and interoperation of Web services and JXTA peer-to-peer networks are facilitated by the technological foundations of the semantic Web.

### References

[1]. Curbera, F., W. Nagy, and S. Weerawarana. Web Services: Why and How. in Workshop on Object-Oriented Web Services - OOPSLA 2001. 2001. Tampa, Florida, USA.

[2]. V. Dialani, et al. Transparent fault tolerance for web services based architectures. in Eighth International Europar Conference (EUROPAR '02). 2002. Padeborn, Germany: Springer-Verlag.

[3]. Gong, L., Project JXTA: A Technology Overview - http://www.jxta.org/docs/TechOverview.pdf. 2001.

[4]. Garcia-Molina, H., Elections in a Distributed Computing System. IEEE Transactions on Computers, 1982. 31(1): p. 48-59.

[5]. Sivashanmugam, K., et al., Metadata and Semantics for Web Services and Processes, in Datenbanken und Informationssysteme (Databases and Information Systems) Festschrift zum 60, W. Benn, et al., Editors. 2003, Geburtstag von Gunter Schlageter: Hagen, Germany. p. 245-271.

[6]. Cardoso, J. and A. Sheth, Semantic e-Workflow Composition. Journal of Intelligent Information Systems (JIIS). 2003. 21(3): p. 191-225.

[7]. Martin, D., et al. Bringing Semantics to Web Services: The OWL-S Approach. in First International Workshop on Semantic Web Services and Web Process Composition (SWSWPC 2004). 2004. Diego, California, USA: Springer-Verlag.

[8]. Fensel, D., C. Bussler, and A. Maedche. Semantic Web Enabled Web Services. in First International Semantic Web Conference. 2002. Sardinia, Italy: Springer-Verlag.

[9]. Rajasekaran, P., et al., eds. Enhancing Web Services Description and Discovery to Facilitate Composition. International Workshop on Semantic Web Services and Web Process Composition (SWSWPC 2004), ed. A.S. Jorge Cardoso. Vol. LNCS 3387. 2004, Springer-Verlag Heidelberg: California, USA. 147.

[10]. Patil, A., et al. MWSAF - METEOR-S Web Service Annotation Framework. in 13th Conference on World Wide Web. 2004. New York City, USA.

[11]. Pease, M., R. Shostak, and L. Lamport, Reaching Agreement in the Presence of Faults. Association of Computing Machinery, 1980. 27(2): p. 228-234.

[12]. Looker, N. and M. Munro, WS-FTM: A Fault Tolerance Mechanism for Web Services. http://www.dur.ac.uk/computer.science/research/technical-reports/2005/A%20Fault%20Tolerance%20Mechanism.pdf. 2002.