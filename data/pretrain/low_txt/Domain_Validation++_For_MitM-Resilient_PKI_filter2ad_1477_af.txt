# Symposium References

1. **Hijacking and Interception in the Internet** (2007), 265–276 pages.
   - DOI: [10.1145/1282380.1282411](https://doi.org/10.1145/1282380.1282411)

2. **A Study of Prefix Hijacking and Interception in the Internet** by Hitesh Ballani, Paul Francis, and Xinyang Zhang (2007).
   - Pages: 689–706.

3. **Transitions: Recommendation for Transitioning the Use of Cryptographic Algorithms and Key Lengths** by E. Barker and A. Roginsky (2011).
   - NIST Special Publication.

4. **Design, Analysis, and Implementation of ARPKI: An Attack-Resilient Public-Key Infrastructure** by David Basin, Cas Cremers, Tiffany Hyun-jin, Adrian Perrig, Ralf Sasse, and Pawel Szalachowski (2016).
   - IEEE Transactions on Dependable and Secure Computing (2016).

5. **Using BGP to Acquire Bogus TLS Certificates** by Henry Birge-Lee, Yixin Sun, Annie Edmundson, Jennifer Rexford, and Prateek Mittal (2017).
   - HotPETS'17 (2017).

6. **Anonymized Internet Traces Dataset** by CAIDA (n.d.).
   - [CAIDA Website](http://www.caida.org/data/passive/)

7. **DTKI: A New Formalized PKI with No Trusted Parties** by Vincent Cheval, Mark Ryan, and Jiangshan Yu (2014).
   - arXiv preprint arXiv:1408.1023 (2014).

8. **A Longitudinal, End-to-End View of the DNSSEC Ecosystem** by Taejoong Chung, Roland van Rijswijk-Deij, Balakrishnan Chandrasekaran, David Choffnes, Dave Levin, Bruce M. Maggs, Alan Mislove, and Christo Wilson (2017).
   - In USENIX Security.

9. **DNSSEC Misconfigurations in Popular Domains** by Tianxiang Dai, Haya Shulman, and Michael Waidner (2016).
   - International Conference on Cryptology and Network Security. Springer, 651–660.

10. **Email Hijacking** by Deploy260 (2014).
    - [Internet Society Blog](https://www.internetsociety.org/blog/2014/09/email-hijacking-new-research-shows-why-we-need-dnssec-now/)

11. **Perfectly Secure Message Transmission** by Danny Dolev, Cynthia Dwork, Orli Waarts, and Moti Yung (1993).
    - J. ACM 40, 1 (Jan. 1993), 17–47.
    - DOI: [10.1145/138027.138036](https://doi.org/10.1145/138027.138036)

12. **ZMap: Fast Internet-wide Scanning and Its Security Applications** by Zakir Durumeric, Eric Wustrow, and J. Alex Halderman (2013).
    - USENIX Security Symposium, Vol. 8, 47–53.

13. **Sovereign Keys: A Proposal to Make HTTPS and Email More Secure** by Peter Eckersley (2011).
    - Electronic Frontier Foundation 18 (2011).

14. **An Observatory for the SSLiverse** by P. Eckersley and J. Burns (2010).
    - DEFCON’18.

15. **An Empirical Reexamination of Global DNS Behavior** by Hongyu Gao, Vinod Yegneswaran, Yan Chen, Phillip Porras, Shalini Ghosh, Jian Jiang, and Haixin Duan (2013).
    - Proceedings of the ACM SIGCOMM 2013 conference on SIGCOMM. ACM, 267–278.

16. **Fragmentation Considered Vulnerable** by Yossi Gilad and Amir Herzberg (2013).
    - ACM Transactions on Information and System Security (TISSEC) 15, 4 (April 2013), 16:1–16:31.
    - Preliminary version appeared in WOOT 2011.

17. **Let the Market Drive Deployment: A Strategy for Transitioning to BGP Security** by Phillipa Gill, Michael Schapira, and Sharon Goldberg (2011).
    - In SIGCOMM, Srinivasan Keshav, Jörg Liebeherr, John W. Byers, and Jeffrey C. Mogul (Eds.). ACM, 14–25.
    - DOI: [10.1145/2018436.2018439](http://doi.acm.org/10.1145/2018436.2018439)

18. **Modeling on Quicksand: Dealing with the Scarcity of Ground Truth in Interdomain Routing Data** by Phillipa Gill, Michael Schapira, and Sharon Goldberg (2012).
    - ACM SIGCOMM Computer Communication Review 42, 1 (2012), 40–46.

19. **Path MTU Discovery Considered Harmful** by Matthias Gohring, Haya Shulman, and Michael Waidner (2018).
    - 38th IEEE International Conference on Distributed Computing Systems, ICDCS 2018, Vienna, Austria, July 2-6, 2018. 866–874.

20. **End-Users Get Maneuvered: Empirical Analysis of Redirection Hijacking in Content Delivery Networks** by Shuai Hao, Yubao Zhang, Haining Wang, and Angelos Stavrou (2018).
    - 27th USENIX Security Symposium (USENIX Security 18). USENIX Association.

21. **Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices** by Nadia Heninger, Zakir Durumeric, Eric Wustrow, and J. Alex Halderman (2012).
    - Presented as part of the 21st USENIX Security Symposium (USENIX Security 12). 205–220.

22. **Security of Patched DNS** by Amir Herzberg and Haya Shulman (2012).
    - Computer Security - ESORICS 2012 - 17th European Symposium on Research in Computer Security, Pisa, Italy, September 10-12, 2012. Proceedings. 271–288.

23. **Fragmentation Considered Poisonous, or: One-domain-to-rule-them-all. org** by Amir Herzberg and Haya Shulman (2013).
    - Communications and Network Security (CNS), 2013 IEEE Conference on. IEEE, 224–232.

24. **Socket Overloading for Fun and Cache Poisoning** by Amir Herzberg and Haya Shulman (2013).
    - ACM Annual Computer Security Applications Conference (ACM ACSAC), New Orleans, Louisiana, U.S., Charles N. Payne Jr. (Ed.).

25. **Vulnerable Delegation of DNS Resolution** by Amir Herzberg and Haya Shulman (2013).
    - Computer Security - ESORICS 2013 - 18th European Symposium on Research in Computer Security, Egham, UK, September 9-13, 2013. Proceedings. 219–236.
    - DOI: [10.1007/978-3-642-40203-6_13](https://doi.org/10.1007/978-3-642-40203-6_13)

26. **The SSL Landscape: A Thorough Analysis of the X.509 PKI Using Active and Passive Measurements** by Ralph Holz, Lothar Braun, Nils Kammenhuber, and Georg Carle (2011).
    - Proceedings of the 2011 ACM SIGCOMM conference on Internet measurement conference. ACM, 427–444.

27. **Taxonomy of the Snowden Disclosures** by Margaret Hu (2015).
    - Wash & Lee L. Rev. 72 (2015), 1679–1989.

28. **It’s the End of the Cache As We Know It** by Dan Kaminsky (2008).
    - Black Hat conference.
    - [Presentation PDF](http://www.blackhat.com/presentations/bh-jp-08/bh-jp-08-Kaminsky/BlackHat-Japan-08-Kaminsky-DNS08-BlackOps.pdf)

29. **Linux Kernel Documentation** by Kernel.org (2011).
    - [Documentation Link](http://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt)

30. **Internet-Wide Study of DNS Cache Injections** by Amit Klein, Haya Shulman, and Michael Waidner (2017).
    - INFOCOM.

31. **Accountable Key Infrastructure (AKI): A Proposal for a Public-Key Validation Infrastructure** by Virgil Gligor (2013).
    - Proceedings of the 22nd international conference on World Wide Web. ACM, 679–690.

32. **Certificate Transparency** by Ben Laurie, Adam Langley, and Emilia Kasper (2013).
    - Technical Report.

33. **On Measuring the Client-Side DNS Infrastructure** by Kyle Schomp, Tom Callahan, Michael Rabinovich, and Mark Allman (2013).
    - Proceedings of the 2013 conference on Internet measurement conference. ACM, 77–90.

34. **Counting Packets Sent Between Arbitrary Internet Hosts** by Jeffrey Knockel and Jedidiah R. Crandall (2014).
    - FOCI.

35. **The myetherwallet.com Hijack and Why It’s Risky to Hold Cryptocurrency in a Webapp** by Sharon Goldberg (2018).
    - [Medium Article](https://medium.com/@goldbe/the-myetherwallet-com-hijack-and-why-its-risky-to-hold-cryptocurrency-in-a-webapp-261131fad278)

36. **Fragmentation Considered Leaking: Port Inference for DNS Poisoning** by Haya Shulman and Michael Waidner (2014).
    - Applied Cryptography and Network Security (ACNS), Lausanne, Switzerland. Springer.

37. **Towards Security of Internet Naming Infrastructure** by Haya Shulman and Michael Waidner (2015).
    - European Symposium on Research in Computer Security.

38. **One Key to Sign Them All: Evaluation of DNSSEC in the Internet** by Haya Shulman and Michael Waidner (2017).
    - NSDI. 131–144.

39. **The Hitchhiker’s Guide to DNS Cache Poisoning** by Sooel Son and Vitaly Shmatikov (2010).
    - Security and Privacy in Communication Networks. Springer, 466–483.

40. **Perspectives: Improving SSH-Style Host Authentication with Multi-Path Probing** by Dan Wendlandt, David G. Andersen, and Adrian Perrig (2008).
    - USENIX Annual Technical Conference, Vol. 8. 321–334.

41. **Deploying Cryptography in Internet-Scale Systems: A Case Study on DNSSEC** by Hao Yang, Eric Osterweil, Dan Massey, Songwu Lu, and Lixia Zhang (2011).
    - IEEE Transactions on Dependable and Secure Computing 8, 5 (2011), 656–669.

## A.1 Public Key Infrastructure (PKI)

Public Key Infrastructure (PKI) is a comprehensive system designed to provide public-key encryption and digital signature services. It includes a set of roles, policies, and procedures to manage digital certificates and public-key encryption. PKI is essential when there is a strict requirement to confirm the identity of parties involved in communication or to validate the information transferred.

The fundamental concept behind PKI is to bind public keys with the respective identities of entities such as individuals or organizations. To establish this binding, an entity must go through a registration and verification process at a Certificate Authority (CA). The level of binding can vary, and the process may be fully automated or supervised by humans. Upon successful registration and verification, the CA issues a certificate that confirms the identity of the entity bound to the public key.

The Registration Authority (RA) accepts requests for digital certificates and authenticates the requesting entity. However, the RA does not sign the certificate; it forwards the request to the CA after ensuring the registration is valid and correct. After issuing the certificate, the CA should publish it so that applications can retrieve it on behalf of users. Directory systems compliant with Lightweight Directory Access Protocol (LDAP) are commonly used for certificate repositories. These directories can be publicly available or private to a specific organization.

Before using a certificate, its revocation status must be checked. Therefore, a PKI must include a scalable certificate revocation system. The CA must securely publish the status of each certificate, and application software must verify the revocation information before each use. Certificate Revocation Lists (CRLs) are a common method for maintaining revocation information, listing digital certificates that have been revoked. CRLs can be published to a directory system by CAs. An alternative to CRLs is the Online Certificate Status Protocol (OCSP), where a responder answers queries about the revocation information of a requested certificate.

## A.2 Domain Name System (DNS)

The Domain Name System (DNS) [RFC1034, RFC1035] is a distributed database containing mappings for resources (also called resource records (RRs)) from domain names to various values. The most popular and widely used mappings [23] are for IP addresses, represented by A type RRs, which map a domain name to its IPv4 address, and name servers, represented by NS type RRs, which map a name server to a domain name. The resource records in DNS correspond to the different services run by organizations and networks, such as hosts, servers, and network blocks.

DNS is a client-server protocol used by resolvers to retrieve RRs stored in zone files maintained by name servers. Resolvers communicate with name servers using a simple request-response protocol (typically over UDP). For example, to translate `www.foo.bar`, resolvers locate the name server `ns.foo.bar`, authoritative for `foo.bar`, and obtain the IP address of the machine hosting the web server for `www.foo.bar`. Resolvers store the DNS records returned in responses in their caches for the duration indicated in the Time To Live (TTL) field of each record set.

The zones are structured hierarchically, with the root zone at the first level, Top-Level Domains (TLDs) at the second level, and millions of Second-Level Domains (SLDs) at the third level. The IP addresses of the 13 root servers are provided via the hints file or compiled into DNS resolver software. When a resolver's cache is empty, every resolution process starts at the root. According to the query in the DNS request, the root name server redirects the resolver, via a referral response type, to the corresponding TLD under which the requested resource is located. There are several types of TLDs, including country code TLDs (ccTLDs), which are typically assigned to countries (e.g., `.us`, `.il`, `.de`), and generic TLDs (gTLDs), which are used by organizations (e.g., `.com`, `.org`) and by the US government and military (e.g., `.gov`, `.mil`).

Domains in SLDs can also be used to further delegate subdomains to other entities or can be directly managed by organizations, as in the case of `ibm.com` and `google.com`.

## A.3 DNS Cache Poisoning and Defenses

In a DNS cache poisoning attack, the attacker sends spoofed DNS responses impersonating a real nameserver. These responses contain malicious DNS records, pointing legitimate services to incorrect addresses or names. If a victim DNS resolver accepts and caches these responses, it will redirect the services or clients using it to incorrect hosts. DNS cache poisoning can lead to malware distribution, credential theft, and can be leveraged for censorship [8] or surveillance [35], as well as for financial gain by cybercriminals.

The poisoned DNS responses are sent from a spoofed IP address (impersonating a legitimate nameserver) to the victim DNS resolver. Before accepting a response, DNS resolvers validate that the response contains the same source port and transaction identifier (TXID) as the corresponding DNS request. According to best practices [RFC5452], DNS resolvers should select source ports and TXIDs at random, making it difficult for attackers who do not see the DNS request packets to spoof the correct responses. The success chance for an attacker is 1 in \(2^{32}\).

Following Kaminsky’s cache poisoning attack, DNS resolvers were quickly patched to support challenge-response defenses against cache poisoning. Most existing challenge-response mechanisms [RFC5452] randomize and validate existing fields in the TCP/IP protocols. We next review standardized and commonly used challenge-response authentication mechanisms.

DNS uses a random 16-bit TXID (transaction identifier) field that associates a DNS response with its corresponding request. DNS implementations additionally support a random selection of name servers each time they send a request. The main defense, which makes poisoning impractical, is 16-bit source port randomization recommended in [RFC5452], resulting in a search space containing \(2^{32}\) possible values. A source port identifies the client-side application in requests and is echoed as a destination port in responses. Specific recommendations for port randomization algorithms were recently provided in [RFC6056]. Due to the significance of port randomization for preventing off-path attacks, such as cache poisoning and injections into TCP, multiple studies have measured the support for port randomization in the Internet, and it appears that many resolvers have adopted the methods recommended in [RFC6056]. Currently, the security of most DNS resolvers relies on these challenge-response mechanisms. However, relying solely on TXID and source port randomization is not believed to be sufficient against cache poisoning.

To mitigate DNS cache poisoning attacks, the IETF designed and standardized Domain Name System Security Extensions (DNSSEC) [RFC4033-RFC4035]. Unfortunately, DNSSEC requires significant changes to the DNS infrastructure and the protocol. Although proposed and standardized in 1997, it is still not widely deployed. The low adoption of DNSSEC, combined with recent cache poisoning vulnerabilities and evidence of DNS injections in the Internet, has stimulated efforts within the operational and research communities to standardize alternative, easy-to-adopt defenses.