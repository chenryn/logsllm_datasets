# Breaking Google Home: Exploiting SQLite (Magellan)

## Authors
- **Wenxiang Qian (@leonwxqian)**
  - Senior Security Researcher at Tencent Blade Team
  - Focus on browser security and IoT security
  - Interested in code auditing, security book author
  - Speaker at DEF CON 26, CSS 2019
- **Yuxiang Li (@Xbalien29)**
  - Senior Security Researcher at Tencent Blade Team
  - Focus on mobile security and IoT security
  - Reported multiple vulnerabilities in Android
  - Speaker at HITB AMS 2018, XCON 2018, CSS 2019
- **Huiyu Wu (@NickyWu_)**
  - Senior Security Researcher at Tencent Blade Team
  - Bug hunter, winner of GeekPwn 2015
  - Speaker at DEF CON 26, HITB 2018 AMS, POC 2017

## About Tencent Blade Team
- Founded by the Tencent Security Platform Department in 2017
- Focuses on security research in AIoT, mobile devices, cloud virtualization, blockchain, etc.
- Reported over 200 vulnerabilities to vendors such as Google, Apple, Microsoft, and Amazon
- Discussed how to break Amazon Echo at DEF CON 26
- Blog: [https://blade.tencent.com](https://blade.tencent.com)

## Agenda
- The Security Overview of Google Home
- Fuzzing and Manual Auditing SQLite & Curl
- Remote Exploitation of Google Home with Magellan
- Conclusion

## The Security Overview of Google Home

### Global Smart Speaker Sales Share in Q4 2018
- At DEF CON 26, we presented "Breaking Smart Speaker: We are Listening to You"
- Vulnerabilities in Amazon Echo: Remote Code Execution
- Vulnerabilities in Xiaomi AI Speaker: Remote Full Control (root)
- Source: [voicebot.ai/2019/02/20/amazon-increases-global-smart-speaker-sales-share-in-q4-2018-while-googles-rise-narrows-the-gap-and-apple-declines/](https://voicebot.ai/2019/02/20/amazon-increases-global-smart-speaker-sales-share-in-q4-2018-while-googles-rise-narrows-the-gap-and-apple-declines/)

### About Google Home
#### Hardware Overview
- Google Home family uses similar hardware (except for Google Home Hub)
- No hardware interface for debugging and flashing was found
- Firmware was extracted directly from the NAND Flash chip

#### System Overview
- Built-in Lite Chrome OS system (similar to Chromecast)
- Main functions implemented by Chrome Browser (cast_shell)
- System updates for Google Home are about a month behind Chrome browser updates

### Security Mechanisms
- **OTA Mechanism**: 
  - Part of the source code is available for download
  - OTA firmware can be downloaded via HTTP request
  - Simulating an upgrade request (TLS) is straightforward
- **Secure Boot**:
  - Bootloader verification (SHA256 + RSA)
  - No unlock (boot.img)
  - Dm-verity enabled to verify integrity (system.img)
- **Sandbox Mechanism**:
  - Setuid
  - User namespaces
  - Seccomp-BPF
- **Exploitation Mitigation**:
  - ASLR
  - NX
  - Stack Canary

### Attack Surface
- **Network**:
  - HTTP Server (port 8008) - CastHack
  - Cast Protocol (port 8009): Push a specific web page to the Chrome browser
- **Wireless**:
  - Wi-Fi or BLE Firmware - Researching Marvell Avastar Wi-Fi
- **Hardware**:
  - USB – HubCap (Chromecast Root @fail0verflow)
  - Modify Firmware by Soldering NAND Flash – Bypassing secure boot?

### Extending the Attack Surface
- **CAST Protocol**:
  - Designed for TV, movies, music, and more
  - Developers can develop CAST apps and publish them to the Application Store
  - Includes sender (mobile devices or Chrome) and receiver (Google Home)
- **Remote Attack Surface**:
  - Register as a developer and post a malicious app
  - Remotely trigger Google Home to load the malicious app
  - Induce victims to visit malicious sender URLs via Chrome
  - Send the cast protocol to launch the app in the LAN
  - RCE in Google Home's renderer

## Fuzzing and Manual Auditing
### Why SQLite and Curl?
- Third-party libraries are often vulnerable
- Almost every device has them installed
- WebSQL makes remote attacks via SQLite possible in Chrome
- Curl is designed for remote operations

### Previous Research
- **Michał Zalewski** - AFL: Finding bugs in SQLite, the easy way
  - [lcamtuf.blogspot.jp/2015/04/finding-bugs-in-sqlite-easy-way.html](http://lcamtuf.blogspot.jp/2015/04/finding-bugs-in-sqlite-easy-way.html)
- **BH US-17** - “Many Birds, One Stone: Exploiting a Single SQLite Vulnerability Across Multiple Software”
  - [blackhat.com/docs/us-17/wednesday/us-17-Feng-Many-Birds-One-Stone-Exploiting-A-Single-SQLite-Vulnerability-Across-Multiple-Software.pdf](https://www.blackhat.com/docs/us-17/wednesday/us-17-Feng-Many-Birds-One-Stone-Exploiting-A-Single-SQLite-Vulnerability-Across-Multiple-Software.pdf)

### Fuzzing SQLite
- No significant findings, but crashes triggered by assertions
- Discovered Magellan while debugging these crashes
- Raw test case that triggers the crash:
  - `INSERT INTO X(X) VALUES ("merge=1,2")`

### Shadow Tables
- `%_content`, `%_segdir`, `%_segments`, `%_stat`, `%_docsize` for FTS3/4
- Accessible like standard tables
- FTS3/4/5, RTREE use shadow tables to store content

### BLOBs
- Representation of binary data: `x'41414242' = 'AABB'`
- In shadow tables, they are serialized data structures (BTREEs, etc.)
- Incorrect deserialization often leads to vulnerabilities

### Overview of Magellan
- **CVE-2018-20346**: `merge` of FTS3 caused memory corruption
- **CVE-2018-20506**: `match` of FTS3 caused memory corruption
- **CVE-2018-20505**: `merge` of FTS3 caused memory corruption (2)
- **SQLite ticket**: 1a84668dcfdebaf1 - Assertion fault due to malformed PRIMARY KEY
- More information: [blade.tencent.com/magellan/](https://blade.tencent.com/magellan/)

### CVE-2018-20346
- Triggered by `merge` in `fts3AppendToNode`
- Function tries to append a node to another
- Nodes are parsed from BLOBs
- Vulnerable `memcpy` in LN310

### CVE-2018-20506 & 20505
- **CVE-2018-20506**: In `fts3ScanInteriorNode`
- **CVE-2018-20505**: In `fts3SegReaderNext`
- Modify BLOBs in shadow tables to mislead the code flow
- Integer overflow to bypass checks
- Memory corruption or raw memory leak

### Auditing libcurl
- Target: Remote code execution
- Find large functions (often poorly coded)
- Protocols that communicate with remote machines (e.g., FTP, HTTPS, NTLM over HTTP, SMTP, POP3)

### Overview of Dias
- **CVE-2018-16890**: NTLM Type-2 Message Information Leak
  - Leaks up to 64KB of client memory per request
- **CVE-2019-3822**: NTLM Type-3 Message Stack Buffer Overflow
  - Allows attacker to leak client memory or perform remote code execution

### Exploiting Magellan on Google Home
- **Available Function Pointer**:
  - `simple_tokenizer` structure on the heap
  - `create virtual table x using fts3 (a, b);`
- **PC Hijacking**:
  - Operate FTS3 table after heap overflow
  - Hijack before memory free
- **Heap Fengshui**:
  - Use `tmalloc` for heap management
  - Adjust memory layout by operating FTS3 tables
  - Hijack PC via SQL TRIGGER
- **Bypass ASLR**:
  - Adjust `nDoclist`, `pNode->a`, and leak memory
  - Leak addresses for ROP gadgets
- **Heap Spray**:
  - Insert into the table
  - Use ROP with cast_shell's gadgets

### RCE in Google Home's Renderer
- Hijack PC via controlled R0/R11
- Run shellcode to modify `navigator.appName` to `AAAA`
- Launch APPID=1, load `Leak.html`
- Launch APPID=2, load `Exp.html`

### Conclusion
- **Magellan Timeline**:
  - Reported to Google on Nov 1st
  - Reported to SQLite on Nov 3rd
  - Fixed by SQLite 3.25.3 on Nov 5th
  - Fixed in Chromium on Nov 28th
  - SQLite 3.26.0 with Defense In-Depth released on Dec 1st
  - Chrome 71.0.3578.80 released on Dec 3rd
  - $10,337 reward by Google on Dec 20th
  - CVEs assigned on Dec 21st
- **Dias Timeline**:
  - Reported to Curl on Dec 31st
  - Confirmed by Curl on Jan 2nd
  - First vulnerability fixed on Jan 3rd
  - Second vulnerability fixed on Jan 16th
  - CVEs assigned on Jan 30th
  - Curl 7.64.0 released on Feb 6th
  - Security page released on Feb 8th

### Responsible Disclosure
- Notified CNCERT to urge vendors to disable vulnerable FTS3 or WebSQL
- Notified security teams of Apple, Intel, Facebook, Microsoft, etc.

### Security Advice
- Enhance systems with the latest defense-in-depth mechanisms
- Keep third-party libraries up-to-date
- Improve the quality of security auditing and testing
- Introduce security specifications into development and testing

---

Thank you!

[https://blade.tencent.com](https://blade.tencent.com)