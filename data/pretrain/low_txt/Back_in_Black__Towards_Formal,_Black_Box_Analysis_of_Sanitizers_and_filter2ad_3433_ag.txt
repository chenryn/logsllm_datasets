### Figure 8: Equivalence Checking of HTML Encoder Implementations

The equivalence checking process for HTML encoder implementations, as illustrated in Fig. 8, is not conclusive. For instance, the fact that we found the Twitter and Facebook encoders to be equivalent does not guarantee that there are no strings on which the two sanitizers differ. This is a fundamental limitation inherent to all black-box testing algorithms. Even the results indicating differences between sanitizers may be incorrect in principle. However, in such cases, the differences can be easily verified, and if necessary, the corresponding models for the encoders can be updated.

### VIII. Related Work

Our work is primarily motivated by recent advancements in the analysis of sanitizers and regular expressions, a field initiated with the introduction of symbolic automata [11], although similar constructions were proposed much earlier [31]. The BEK language was introduced by Hooimeijer et al. [8], and the theory behind symbolic finite state transducers was extended in a follow-up paper [15]. Symbolic automata, transducers, and the BEK language are currently an active area of research [14], [32]–[35], and we anticipate that BEK programs will gain wider adoption in the near future.

In the context of inferring symbolic automata and transducers, two recent works are particularly relevant. Botincan and Babic [36] used symbolic execution in combination with the Shabaz-Groz algorithm to infer symbolic models of programs as symbolic lookback transducers. Although the authors claim that the equivalence of symbolic lookback transducers (SLTs) is decidable, a recent paper by Veanes [37] demonstrates that the equivalence of SLTs is, in fact, undecidable. Additionally, while [36] implements a symbolic version of Angluin’s algorithm, their system obtains predicates through symbolic execution, eliminating the need to infer predicate guards or transitions for each state. Given that their system uses the Shabaz-Groz algorithm, our improved counterexample processing would provide an exponentially faster way to handle counterexamples in their case.

Another closely related work in the inference of symbolic automata was conducted by Maller and Mens [22]. They describe an algorithm to infer automata over ordered alphabets, which is a specific instantiation of symbolic automata. However, to correctly infer such an automaton, the authors assume that the counterexample provided by the equivalence oracle is of minimal length. This assumption is used to distinguish between a wrong transition in the hypothesis or a hidden state. Unfortunately, verifying that a counterexample is minimal requires an exponential number of queries, making this assumption impractical for inferring symbolic automata. In contrast, our algorithm is more general, as it works for any kind of predicate guards as long as they are learnable, and it does not assume a minimal length counterexample, making the algorithm practical.

The work on active learning of DFAs was initiated by Angluin [19] after Gold [38] showed that inferring the minimal automaton consistent with a set of samples is NP-Hard. Since its introduction, Angluin’s algorithm has been improved, and many variations have been introduced. Rivest and Schapire [20] demonstrated how to improve the query complexity of the algorithm and introduced the binary search method for processing counterexamples. Balcazar et al. [39] described a general approach to view the different variations of Angluin’s algorithm.

Shabaz and Groz [12] extended Angluin’s algorithm to handle Mealy Machines and introduced the counterexample processing method discussed above. Their approach was then extended by Khalili and Tacchella [40] to handle non-deterministic Mealy Machines. However, as noted earlier, Mealy machines are generally not expressive enough to model complex sanitization functions. Moreover, the algorithm by Khalili and Tacchella uses the Shabaz-Groz counterexample processing, which can be improved using our method. Since Shabaz-Groz is used in various contexts, including the reverse engineering of Command and Control servers of botnets [41], we believe that our improved counterexample processing method will find many applications. Recently, inference techniques have been developed for more complex classes of automata, such as register automata [42]. These automata are allowed to use a finite number of registers [43]. Since registers were also used in some cases during the analysis of sanitizer functions [15], and specifically decoders, expanding our work to handle register versions of symbolic automata and transducers is a promising direction for future research.

The implementation of our equivalence oracle is inspired by the work of Peled et al. [23]. In their work, a similar equivalence oracle implementation is described for checking Büchi automata, but their implementation also utilizes the Vasileski-Chow algorithm [44], which checks the compliance of two automata given an upper bound on the size of the black-box automaton. However, this algorithm has a worst-case exponential complexity, making it impractical for real applications. In contrast, we demonstrate that our GOFA algorithm can infer 90% of the states of the target filter on average.

The algorithm for initializing the observation table was first described by Groce et al. [45]. In their paper, they describe the initialization procedure and prove two lemmas regarding the efficiency of the procedure in the context of their model checking algorithm. However, the lemma only shows convergence and does not address the reduction of equivalence queries, which we prove.

There is a significant body of work on white-box program analysis techniques aimed at validating the security of sanitizer code. The SANER project [4] uses static and dynamic analysis to create finite state transducers that are overapproximations of the sanitizer functions of programs. Minamide [5] constructs a string analyzer for PHP to detect vulnerabilities such as cross-site scripting and classifies various PHP functions according to the automaton model needed to describe them. The Reggae system [6] generates high-coverage test cases with symbolic execution for systems that use complex regular expressions. Wasserman and Su [7] use context-free grammars to construct overapproximations of the output of a web application, which could be used to implement a grammar for an equivalence oracle when applying the cross-checking algorithm for verifying equality between two different implementations.

### IX. Conclusions and Future Work

Clearly, there is a need for robust and complete black-box analysis algorithms for filter programs. In this paper, we present a set of algorithms that can be utilized to analyze such programs. However, the research space in this area remains vast. We believe that our algorithms can be further optimized to achieve even greater performance. Additionally, more complex automata models, which are currently being used [14], [43], can be leveraged to further reduce the number of queries required to infer a sanitizer model. Finally, we note that entirely different models may be necessary to handle other types of filter programs based on big data analytics or network protocol analysis. Therefore, we conclude that black-box analysis of filters and sanitizers is a fruitful research area that deserves more attention due to both scientific interest and practical applications.

### Acknowledgements

This work was supported by the Office of Naval Research (ONR) through contract N00014-12-1-0166. Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government or ONR.

### References

[1] D. L. Eduardo Vela, “Our favorite xss filters/ids and how to attack them,” in Black Hat Briefings, 2009.

[2] D. Evteev, “Methods to bypass a web application firewall.” http://ptsecurity.com/download/PT-devteev-CC-WAF-ENG.pdf.

[3] S. Esser, “Web application firewall bypasses and php exploits http://www.suspekt.org/downloads/RSS09-WebApplicationFirewallBypassesAndPHPExploits.pdf. November 2009.”

[4] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna, “SANER: Composing static and dynamic analysis to validate sanitization in web applications,” in Security and Privacy, 2008. SP 2008. IEEE Symposium on, pp. 387–401, IEEE, 2008.

[5] Y. Minamide, “Static approximation of dynamically generated web pages,” in Proceedings of the 14th International Conference on World Wide Web, pp. 432–441, ACM, 2005.

[6] N. Li, T. Xie, N. Tillmann, J. de Halleux, and W. Schulte, “Reggae: Automated test generation for programs using complex regular expressions,” in Automated Software Engineering, 2009. ASE’09. 24th IEEE/ACM International Conference on, pp. 515–519, IEEE, 2009.

[7] G. Wassermann and Z. Su, “Sound and precise analysis of web applications for injection vulnerabilities,” in ACM Sigplan Notices, vol. 42, pp. 32–41, ACM, 2007.

[8] P. Hooimeijer, P. Saxena, B. Livshits, M. Veanes, and D. Molnar, “Fast and precise sanitizer analysis with BEK,” in 20th USENIX Security Symposium, 2011.

[9] D. Bates, A. Barth, and C. Jackson, “Regular expressions considered harmful in client-side XSS filters,” in Proceedings of the 19th International Conference on World Wide Web, pp. 91–100, ACM, 2010.

[10] “Programming languages used in most popular websites.” https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites. Accessed: 2015-11-10.

[11] M. Veanes, P. de Halleux, and N. Tillmann, “REX: Symbolic regular expression explorer,” in Proceedings of the 2010 Third International Conference on Software Testing, Verification and Validation, ICST ’10, (Washington, DC, USA), pp. 498–507, IEEE Computer Society, 2010.

[12] M. Shahbaz and R. Groz, “Inferring Mealy machines,” in Proceedings of the 2nd World Congress on Formal Methods, FM ’09, (Berlin, Heidelberg), pp. 207–222, Springer-Verlag, 2009.

[13] A. Doupé, L. Cavedon, C. Kruegel, and G. Vigna, “Enemy of the state: A state-aware black-box web vulnerability scanner,” in USENIX Security Symposium, pp. 523–538, 2012.

[14] M. Veanes, T. Mytkowicz, D. Molnar, and B. Livshits, “Data-parallel string-manipulating programs,” in Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, pp. 139–152, ACM, 2015.

[15] N. Bjorner, P. Hooimeijer, B. Livshits, D. Molnar, and M. Veanes, “Symbolic finite state transducers, algorithms, and applications,” in IN: PROC. 39TH ACM SYMPOSIUM ON POPL., 2012.

[16] M. Veanes, P. De Halleux, and N. Tillmann, “REX: Symbolic regular expression explorer,” in Software Testing, Verification and Validation (ICST), 2010 Third International Conference on, pp. 498–507, IEEE, 2010.

[17] J. Hopcroft, “An n log n algorithm for minimizing states in a finite automaton,” tech. rep., DTIC Document, 1971.

[18] M. J. Kearns and U. V. Vazirani, An Introduction to Computational Learning Theory. MIT Press, 1994.

[19] D. Angluin, “Learning regular sets from queries and counterexamples,” Information and Computation, vol. 75, no. 2, pp. 87–106, 1987.

[20] R. L. Rivest and R. E. Schapire, “Inference of finite automata using homing sequences,” Information and Computation, vol. 103, no. 2, pp. 299–347, 1993.

[21] J. E. Hopcroft, Introduction to Automata Theory, Languages, and Computation. Pearson Education India, 1979.

[22] O. Maler and I.-E. Mens, “Learning regular languages over large alphabets,” in Tools and Algorithms for the Construction and Analysis of Systems, pp. 485–499, Springer, 2014.

[23] D. Peled, M. Y. Vardi, and M. Yannakakis, “Black box checking,” in Formal Methods for Protocol Engineering and Distributed Systems, pp. 225–240, Springer, 1999.

[24] “Fado library.” https://pypi.python.org/pypi/FAdo. Accessed: 2015-11-10.

[25] A. Carayol and M. Hague, “Saturation algorithms for model-checking pushdown systems,” EPTCS, vol. 151, pp. 1–24, 2014.

[26] “Mod-security.” https://www.modsecurity.org/. Accessed: 2015-11-10.

[27] “PHPIDS source code.” https://github.com/PHPIDS/PHPIDS. Accessed: 2015-11-10.

[28] “How to configure URLScan 3.0 to mitigate SQL injection attacks.” http://goo.gl/cmU0ze. Accessed: 2015-11-10.

[29] “YAXX project.” https://code.google.com/p/yaxx/. Accessed: 2015-11-10.

[30] “Microsoft Anti-XSS Library.” https://msdn.microsoft.com/en-us/security/aa973814.aspx. Accessed: 2015-11-10.

[31] B. W. Watson, “Implementing and using finite automata toolkits,” Natural Language Engineering, vol. 2, no. 04, pp. 295–302, 1996.

[32] L. D'Antoni and M. Veanes, “Minimization of symbolic automata,” in ACM SIGPLAN Notices, vol. 49, pp. 541–553, ACM, 2014.

[33] L. D'Antoni and M. Veanes, “Equivalence of extended symbolic finite transducers,” in Computer Aided Verification, pp. 624–639, Springer, 2013.

[34] M. Veanes, “Symbolic string transformations with regular lookahead and rollback,” in Perspectives of System Informatics, pp. 335–350, Springer, 2014.

[35] R. A. Cochran, L. D'Antoni, B. Livshits, D. Molnar, and M. Veanes, “Program boosting: Program synthesis via crowd-sourcing,” in ACM SIGPLAN Notices, vol. 50, pp. 677–688, ACM, 2015.

[36] M. Bošković and D. Babić, “Sigma*: Symbolic learning of input-output specifications,” ACM SIGPLAN Notices, vol. 48, no. 1, pp. 443–456, 2013.

[37] L. D'Antoni and M. Veanes, “Extended symbolic finite automata and transducers,” Formal Methods in System Design, July 2015.

[38] E. M. Gold, “Complexity of automaton identification from given data,” Information and Control, vol. 37, no. 3, pp. 302–320, 1978.

[39] J. L. Balcázar, J. Díaz, R. Gavaldà, and O. Watanabe, Algorithms for Learning Finite Automata from Queries: A Unified View. Springer, 1997.

[40] A. Khalili and A. Tacchella, “Learning nondeterministic Mealy machines,” in Proceedings of the 12th International Conference on Grammatical Inference, ICGI 2014, Kyoto, Japan, September 17-19, 2014, pp. 109–123, 2014.

[41] C. Y. Cho, D. Babić, E. C. R. Shin, and D. Song, “Inference and analysis of formal models of botnet command and control protocols,” in Proceedings of the 17th ACM Conference on Computer and Communications Security, CCS 2010, Chicago, Illinois, USA, October 4-8, 2010, pp. 426–439, 2010.

[42] F. Howar, B. Steffen, B. Jonsson, and S. Cassel, “Inferring canonical register automata,” in Verification, Model Checking, and Abstract Interpretation, pp. 251–266, Springer, 2012.

[43] S. Cassel, F. Howar, B. Jonsson, M. Merten, and B. Steffen, “A succinct canonical register automaton model,” Journal of Logical and Algebraic Methods in Programming, vol. 84, no. 1, pp. 54–66, 2015.

[44] T. S. Chow, “Testing software design modeled by finite-state machines,” IEEE Transactions on Software Engineering, no. 3, pp. 178–187, 1978.

[45] A. Groce, D. Peled, and M. Yannakakis, “Adaptive model checking,” in Tools and Algorithms for the Construction and Analysis of Systems, pp. 357–370, Springer, 2002.

[46] “XSS Evasion Cheat Sheet.” https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet. Accessed: 2016-01-10.

[47] L. Pitt and M. K. Warmuth, “The minimum consistent DFA problem cannot be approximated within any polynomial,” Journal of the ACM (JACM), vol. 40, no. 1, pp. 95–142, 1993.

[48] “BEK Guide.” http://www.rise4fun.com/Bek/tutorial/guide2. Accessed: 2015-11-10.

[49] Y. Freund and R. E. Schapire, “Large margin classification using the perceptron algorithm,” Mach. Learn., vol. 37, pp. 277–296, Dec. 1999.

### Appendix

#### A. Comparison of GOFA Algorithm with Random Testing

Regarding the usefulness of the GOFA algorithm as a security auditing method, it is important to consider it in comparison to random testing/fuzzing. Currently, most tools in the black-box testing domain, such as web vulnerability scanners, work by fuzzing the target filter with various attack strings until a bypass is found or the set of attack strings is exhausted.

We argue that our GOFA algorithm is superior to fuzzing for two reasons:

1. **Query Efficiency**: The number of queries of the GOFA algorithm is independent of the size of the grammar. On the other hand, when producing random strings from a grammar to test a filter, a very large number of strings must be generated. Moreover, testing for modern vulnerabilities such as XSS is very complex, as there are numerous variations to consider (cf. [46]).

2. **Structural Information**: Random testing produces no information on the structure of the filter if no attack is found. In contrast, the GOFA algorithm provides valuable insights into the structure of the filter, even if no attack is discovered.