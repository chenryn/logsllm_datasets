# A Versatile and Modular Consensus Protocol

**Authors:**
- Achour Mostéfaoui (IRISA, Campus de Beaulieu, 35042 Rennes Cedex, France)
- Sergio Rajsbaum (Compaq Research Lab, One Cambridge Center, Cambridge, MA 02139, USA)
- Michel Raynal (IRISA, Campus de Beaulieu, 35042 Rennes Cedex, France)

**Contact:**
- {achour, raynal}@irisa.fr

## Abstract

This paper presents a modular and versatile approach to solving the consensus problem in asynchronous distributed systems where up to \( f \) processes may crash. We consider a system with \( n \) processes, denoted as \( \Pi = \{p_1, \ldots, p_n\} \). A process can fail by crashing, i.e., halting prematurely. A process is considered correct if it behaves according to its specification until it crashes. A faulty process is one that does not behave correctly. We assume that \( f < n/2 \), ensuring that a majority of processes are correct.

Processes communicate and synchronize by sending and receiving messages through reliable channels. Each pair of processes is connected by a channel, and there are no assumptions about the relative speed of processes or message transfer delays, making the system asynchronous.

### Leader Oracle

A leader oracle is a distributed device that provides the processes with a function `leader` that returns a process name each time it is called. This oracle satisfies the following property:

- **Eventual Leadership:** There exists a time \( t \) and a correct process \( p \) such that, after \( t \), every invocation of `leader` by a correct process returns \( p \).

Leader oracles satisfying this property define the class \( \Omega \) of failure detector oracles introduced in [4]. A failure detector in this class provides the processes with an eventual leader election capability [11]. However, there is no knowledge of when the leader is elected, meaning that multiple leaders can coexist for an arbitrarily long period, and processes have no way to determine when this "confusing" period ends.

### Random Oracle

A random oracle provides each process \( p_i \) with a function `random` that outputs a value randomly chosen from a set. For binary consensus, we assume that `random` outputs 0 (resp. 1) with probability 1/2. The multivalued consensus case is addressed in Section 4.6.

### The Consensus Problem

In the consensus problem, every correct process \( p_i \) proposes a value \( v_i \), and all correct processes must decide on the same value \( v \), which must be one of the proposed values. The consensus problem is defined by two safety properties (Validity and Uniform Agreement) and a Termination Property [5, 7]:

- **Validity:** If a process decides on a value \( v \), then \( v \) was proposed by some process.
- **Uniform Agreement:** No two processes decide on different values.
- **Termination:** Every correct process eventually decides on some value.

From a computational perspective, the class \( \Omega \) of leader oracles and the class \( \Diamond S \) of unreliable failure detectors introduced in [5] have been shown to be equivalent [4]. It follows from [5] that the consensus problem can be solved in any asynchronous distributed system equipped with any of them, provided that \( f < n/2 \).

### Condition-Based Approach

This section provides a brief introduction to the condition-based approach. More detailed developments can be found in [13, 14].

---

**Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)**  
**0-7695-1597-5/02 $17.00 © 2002 IEEE**  
**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 04:08:23 UTC from IEEE Xplore. Restrictions apply.**