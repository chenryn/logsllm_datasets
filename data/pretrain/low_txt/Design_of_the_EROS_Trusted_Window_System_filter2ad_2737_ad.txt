### Identifying and Specifying a Next-Generation Secure L4 Architecture

The PERSEUS project will significantly benefit from the revisions aimed at identifying and specifying a next-generation secure L4 architecture. Building on the web spoofing work by Felten et al. [11], Ye and Smith [34] have examined the problem of trusted paths in browsers. They explore various methods for displaying trusted path information to users and highlight the pitfalls of each approach. This area requires further exploration in the context of EWS. Our work on EWS is largely complementary to that of Ye and Smith. While they focus on presentation issues, we concentrate on separation. Our goal is to ensure that ordinary applications lack the necessary authority to disrupt the trusted path and that any hostility encountered in an application remains confined to that application.

### DoPE: A Real-Time Window System

DoPE [12] is a window system developed by the L4 team at T.U. Dresden for use in real-time systems. The design of DoPE addresses many of the same constraints as those in trusted window systems, although it is motivated by real-time predictability rather than security. Discussions between our project teams revealed that the two systems are comparable in size and complexity when DoPE’s rendering operations and higher-level widgets are excluded (Table 1).

| Feature                | EWS    | DoPE   |
|------------------------|--------|--------|
| Core Function, Drivers | 4,500  | 7,000  |
| Higher Widgets         | 3,000  | N/A    |

**Table 1: Comparative sizes of EWS and DoPE, in lines of code.**

The total lines of code attributable to drivers are approximately equal in both systems. EWS provides two hardware-dependent display drivers (VMWare and Rage-128), while DoPE implements one display driver (VESA) with a richer set of rendering operations. The 2,500-line gap in core functionality is primarily due to the inclusion of lower-level widgets in the DoPE display server design.

Originally, EWS incorporated a similar widget system, but we found no compelling security or performance reasons to include this functionality in the trusted computing base (TCB). Therefore, TCB minimization requirements mandated moving this function to the client, and we never attempted a server-side widget implementation. If the above breakdown is correct, the security argument for removing widgets was compelling: the complexity of the DoPE widget set is approximately equal to the complexity of the entire EWS TCB.

Both DoPE and EWS plan to incorporate support for 3D acceleration in future work. Hardware interactions of this kind are necessarily trusted, but defensive engineering practice suggests that such functions should be implemented in a separate protection domain. Software rendering routines intended to replace missing hardware functions should be implemented by the client rendering library, which is entirely outside the TCB.

### Acknowledgements

While it has diverged in recent years, the original EROS architecture was closely derived from KeyKOS. We acknowledge the principal architects and implementors of KeyKOS: Norman Hardy, Charlie Landau, and William Frantz. Each of these individuals has participated in and encouraged work on the EROS system.

Although this paper does not present X11 as a positive example for security, it is a system that contains many brilliant ideas that have strongly influenced our work. Phil Karlton spent considerable time explaining the design of X11 to Jonathan S. Shapiro during the development of the Silicon Graphics ProDev tool set. More recently, Jim Gettys offered some rationale for remote display access, ultimately reaffirming our view that remoting did not belong in the window system.

Jeremy Epstein reviewed a draft of this paper and provided helpful comments. We are grateful to Norman Feske and Hermann Härtig of the Dresden L4 group for their time and courtesy in explaining the implementation and design concept of DoPE. Wesley Vanderburgh graciously permitted us to reproduce Figure 5. Lithographs signed by the artist, who is funding his first-grade home-schooled education, can be obtained by request.

### Conclusion

We have presented the design of the EROS Trusted Window System (EWS), which provides robust traceability of user volition and is capable of enforcing mandatory access controls. The EWS implementation, including the two current display drivers, is less than 4,500 lines, a factor of ten smaller than previous trusted window systems like Trusted X, and well within the range of what can easily be evaluated for high assurance. Based on our experience, the EROS Window System is practical, usable, and assurable. The trusted component of EWS is between 2% and 5% of the lines of code of X11, with no user-apparent reduction in functionality or utility. It can be extended to new input devices without complex re-evaluation because input drivers are strongly isolated.

While we have not optimized EWS for performance, the widely-used Apple Quartz 2D implementation suggests that final performance should be acceptable. The small size of EWS partially validates the EROS design, which emphasizes breaking applications into small, protected components for enhanced security and efficiency. Both EROS and the EROS window system implementation will be accessible via the EROS web site at the time of publication.

### References

[1] M. D. Abrams. Renewed understanding of access control policies. In Proc. 16th National Computer Security Conference, pages 87–96, Oct. 1993.
[2] Apple Computer. Inside Macintosh. Reading, Massachusetts, 1985.
[3] Apple Computer. Quartz 2D Reference. Apple Computer, Inc., 2003.
[4] J. L. Berger, J. Picciotto, J. P. L. Woodward, and P. T. Cummings. Compartmented mode workstation: Prototype highlights. IEEE Transactions on Software Engineering, 16(6):608–618, June 1990.
[5] B. Bershad, T. Anderson, E. Lazowska, and H. Levy. Lightweight remote procedure call. In Proc. 12th Symposium on Operating Systems Principles, pages 102–113, Dec. 1989.
[6] R. Cox, E. Grosse, R. Pike, D. Presotto, and S. Quinlan. Security in Plan 9. In Proceedings of the 11th USENIX Security Symposium, pages 3–16, San Francisco, 2002.
[7] U.S. Department of Defense Trusted Computer System Evaluation Criteria, 1985.
[8] J. Epstein, J. McHugh, H. Orman, R. Pascale, A. Marmor-Squires, B. Dancer, C. R. Martin, M. Branstad, G. Benson, and D. Rothnie. A high-assurance window system prototype. Journal of Computer Security, 2(2):159–190, 1993.
[9] J. Epstein and J. Picciotto. Trusting X: Issues in building Trusted X window systems -or- what’s not trusted about X? In Proceedings of the 14th Annual National Computer Security Conference, Washington, DC, USA, Oct. 1991.
[10] J. Epstein, et. al. A prototype B3 Trusted X Window System. In Proceedings of the Seventh Annual Computer Security Applications Conference, San Antonio, TX, USA, Dec. 1991.
[11] E. W. Felten, D. Balfanz, D. Dean, and D. S. Wallach. Web spoofing: An internet con game. In 20th National Information Systems Security Conference, Baltimore, Maryland, Oct. 1997.
[12] N. Feske and H. Haertig. DOpE – a window server for real-time and embedded systems. In Proc. 24th IEEE International Real-Time Systems Symposium, Cancun, Mexico, Dec. 2003.
[13] M. Hohmuth and H. Härtig. Pragmatic nonblocking synchronization for real-time systems. In Proc. 2001 USENIX Annual Technical Conference, pages 217–230, Boston, MA., 2001.
[14] Common Criteria for Information Technology Security. International Standards Organization, 1998. International Standard ISO/IS 15408, Final Committee Draft, version 2.0.
[15] M. J. Kilgard, D. Blythe, and D. Hohn. System support for OpenGL direct rendering. In W. A. Davis and P. Prusinkiewicz, editors, Graphics Interface ’95, pages 116–127. Canadian Human-Computer Communications Society, 1995.
[16] L4 eXperimental reference manual, version X.2. Technical report, L4KA Team, University of Karlsruhe, 2001.
[17] B. W. Lampson. A note on the confinement problem. Communications of the ACM, 16(10):613–615, 1973.
[18] C. W. Mercer, S. Savage, and H. Tokuda. Processor capacity reserves: Operating system support for multimedia applications. In Proc. IEEE International Conference on Multimedia Computing and Systems, May 1994.
[19] B. Pfitzmann, J. Riordan, C. Stüble, M. Waidner, and A. Weber. In D. Fox, M. Köhntopp, and A. Pfitzmann, editors, VIS 2001, Sicherheit in komplexen IT-Infrastrukturen, DuD Fachbeiträge, pages 1–18. Vieweg Verlag, 2001. Also available as IBM Research Report RZ 3335 (#93381).
[20] J. Picciotto. Towards trusted cut and paste in the X Window System. In Proceedings of the Seventh Annual Computer Security Applications Conference, San Antonio, TX, USA, Dec. 1991.
[21] J. Picciotto and J. Epstein. A comparison of Trusted X security policies, architectures, and interoperability. In Proceedings of the Eighth Annual Computer Security Applications Conference, San Antonio, TX, USA, Dec. 1992.
[22] R. Pike. The blit: A multiplexed graphics terminal. Bell Labs Tech. J., 63(8, part 2):1607–1631, Oct. 1984.
[23] R. Pike. 8½, the Plan 9 window system. In Proceedings of the Summer 1991 USENIX Conference, pages 257–265, Nashville, 1991.
[24] R. Pike, B. Locanthi, and J. Reiser. Hardware/software tradeoffs for bitmap graphics on the blit. Software - Practice and Experience, Jan. 1985.
[25] T. Richardson, Q. Stafford-Fraser, K. R. Wood, and A. Hopper. Virtual network computing. IEEE Internet Computing, 2(1):33–38, 1998.
[26] D. Rosenthal. Inter-client Communications Conventions Manual, version 2.0. X Consortium and Sun Microsystems, 1994.
[27] R. W. Scheiffler and J. Gettys. X Window System. Digital Press, 3rd edition, 1992.
[28] M. Segal and K. Akeley. The OpenGL Graphics System: A Specification, version 1.0. Silicon Graphics, Inc., 1993.
[29] J. S. Shapiro, J. M. Smith, and D. J. Farber. EROS: A fast capability system. In Proc. 17th ACM Symposium on Operating Systems Principles, pages 170–185, Kiawah Island Resort, near Charleston, SC, USA, Dec. 1999. ACM.
[30] J. S. Shapiro and S. Weber. Verifying the EROS confinement mechanism. In Proc. 2000 IEEE Symposium on Security and Privacy, pages 166–176, Oakland, CA, USA, 2000.
[31] C. Thacker, E. M. McCreight, B. W. Lampson, R. F. Sproull, and D. Boggs. Alto: A personal computer. ACM Transactions on Computer Systems, 2(1), Feb. 1984.
[32] J. Tygar and A. Whitten. WWW electronic commerce and Java Trojan horses. In Proc. 2nd USENIX Workshop on Electronic Commerce, pages 243–250, Oakland, CA, 1996.
[33] J. P. L. Woodward. Security requirements for system high and compartmented mode workstations. Technical Report MTR 9992, Revision 1 (also published by the Defense Intelligence Agency as document DDS-2600-5502-87), The MITRE Corporation, Bedford, MA, USA, Nov. 1987.
[34] Z. E. Ye and S. Smith. Trusted paths for browsers. In Proc. 11th USENIX Security Symposium, pages 263–279, 2002.
[35] K.-P. Yee. User interaction design for secure systems. In Proc. 4th International Conference on Information and Communications Security, pages 278–290, Dec. 2002.