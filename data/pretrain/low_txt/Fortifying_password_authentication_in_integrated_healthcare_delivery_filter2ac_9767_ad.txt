### 6.1 Security Analysis

A key difference between the second protocol in Figure 4 and the current protocol is the inclusion of two additional messages, M5 and M6, exchanged between U (User) and SS (Service Server). These additional messages do not inherently leak more information about the password \(\pi\). Therefore, we focus on the security implications when CS (Control Server) is controlled by an active adversary.

From the security analysis of the earlier protocols, it is known that CS can successfully perform offline dictionary attacks against SS if it knows \(a = \log_g A_1 \mod q\). This vulnerability arises because U is solely responsible for computing \(A\), allowing CS to replace \(A\) or impersonate U against SS. In this final protocol, the additional messages M5 and M6 regulate \(\tilde{A}\) (which is equivalent to \(A\) in the earlier protocols) by involving both U and SS in its construction. As a result, while CS, as an active adversary, can manipulate the part due to U (i.e., \(a\)) through replacement or impersonation, it cannot manipulate the part due to SS (i.e., \(a_1\)). Consequently, CS cannot compute the discrete logarithm of \(\tilde{A}\) to the base \(g_1\), rendering it ineffective in offline dictionary attacks.

A potential weakness of the protocol is that an active outside adversary between U and SS can influence the session key shared by U and SS. Specifically, the adversary could choose a random number \(\beta \in_R Z_q\) and intercept M5, then compute \(A' = A^\beta \mod p\) and \(\hat{S}_u' = \hat{S}_u^\beta \mod p\), and continue the protocol by sending the manipulated elements \(A'\) and \(\hat{S}_u'\) to SS. The protocol still works, but U and SS end up sharing a session key \(K = h(U, SS, g^{aa_1\beta(b_1+b_2)})\), which is distinct from the one perceived in the original protocol. However, such attacks do not affect the secrecy of the session key and the user password, nor do they compromise the authentication functionality of the protocol. The adversary gains no advantages from such attacks, so we do not consider them a serious issue.

### 7. Discussion

In this section, we evaluate the performance of our proposed protocols. Let \(|p|\) and \(|h|\) denote the bit length of \(p\) and the hash function \(h\), respectively. The performance results are outlined in Figure 6. We consider three aspects:

1. **Computation Performance**: Exponentiation operations dominate each party's overhead. We count the number of exponentiations, and the digits following the slash denote the number of exponentiations that can be computed offline. By leveraging techniques from [12], each of \(g^{b_1} \mod p\) and \(g^{b_2} \mod p\) can be computed with a single exponentiation.
   
2. **Communication Performance in Bits**: Since \(|Q|\) is only 1 bit longer than \(|p|\), we do not explicitly distinguish between \(|p|\) and \(|Q|\) for ease of comparison. Additionally, we exclude the bandwidth of M1 and M2 in this aspect of calculation.

3. **Communication Performance in Rounds**: One round represents a one-way transmission of messages.

From the table, it is evident that the proposed protocols are generally efficient in terms of both computation and communication for all parties. For example, U needs to calculate 3, 4, and 5 exponentiations in the three protocols, respectively, with 2 of them being computable offline in all cases. The communication overhead for U is also low in terms of both bits and rounds, making the protocols suitable for wireless applications. Furthermore, the proposed protocols favor the generalized architecture for IDSs where one control server supports multiple service servers, as the workload on the control server is particularly low. With sufficient funds, the corporate authority of an IDS can always deploy a powerful server.

It is also noteworthy that in our protocols, a password is split into two random shares, allowing a user to use the same password to register with different service servers, whether they connect to distinct control servers or the same control server. This feature enhances user-friendliness, as users do not need to memorize different passwords for different applications.

### 8. Conclusions and Future Work

Password-based authentication remains a critical method for user authentication in healthcare information systems, especially with the increasing prevalence of wireless healthcare applications. However, existing password systems face challenges when applied to IDSs, the primary means of care provision. To address this, we presented a practical password authentication system based on a novel two-server model, which we generalized to an architecture of a single control server supporting multiple service servers, considering the organizational structure of IDSs. The underlying user authentication and key exchange protocols we proposed are password-only, neat, efficient, and robust against offline dictionary attacks mounted by both servers.

While we have examined the security of the proposed protocols, a formal treatment of the system is necessary. One of our future work is to formally define and validate the security of the system. Another direction for future work is to investigate other issues associated with password authentication, such as phishing attacks [13].

### 9. Acknowledgments

We thank the anonymous referees for their helpful comments and suggestions. This work is funded by the Office of Research, Singapore Management University.

### 10. References

[1] C. Boyd. Digital Multisignatures, Cryptography and Coding, pp 241-246, 1989.
[2] E. Bresson, O. Chevassut, D. Pointcheval. Security Proofs for an Efficient Password-Based Key Exchange, ACM. Computer and Communication Security, pp. 241-250, 2003.
[3] D. Boneh. The Decision Diffie-Hellman Problem, 3rd International Algorithmic Number Theory Symposium, LNCS 1423, pp. 48-63, 1998.
[4] J. Brainard, A. Juels, B. Kaliski, M. Szydlo. A New Two-Server Approach for Authentication with Short Secret, Proc. USENIX Security, 2003.
[5] S. Bellovin, and M. Merritt. Encrypted Key Exchange: Password-Based Protocols Secure Against Dictionary Attacks, IEEE Symposium on Research in Security and Privacy, pp. 72-84, 1992.
[6] S. Bellovin, and M. Merritt. Augmented Encrypted Key Exchange: A Password-Based Protocol Secure Against Dictionary Attacks and Password File Compromise, ACM. Computer and Communication Security, pp. 244-250, 1993.
[7] M. K. Boyarsky. Public-key Cryptography and Password Protocols: The Multi-User Case, ACM Conference on Computer and Communication Security, pp. 63-72, 1999.
[8] L. Bouganim, P. Pucheral. Chip-Secured Data Access: Confidential Data on Untrusted Servers, Proc. Very Large Data Bases (VLDB), pp. 131-142, 2002.
[9] M. Bellare, D. Pointcheval, and P. Rogaway. Authenticated Key Exchange Secure Against Dictionary Attacks, Advance in cryptology, Eurocrypt’00, pp. 139-155, 2000.
[10] M. Bellare, P. Rogaway. Random Oracles are Practical: A Paradigm for Designing Efficient Protocols, ACM. Computer and Communication Security, pp. 62-73, 1993.
[11] Committee on Maintaining Privacy and Security in Health Care Applications of the National Information Infrastructure. For the Record: Protecting Electronic Health Information, National Academy Press, Washington, D.C., 1997.
[12] V. S. Dimitrov, G. A. Jullien, and W. C. Miller. Complexity and fast algorithms for multi-exponentiations, IEEE Transactions on Computers, vol 49, no 2, pp. 141-147, 2000.
[13] R. Dhamija, J. D. Tygar. Phish and HIPs: Human Interactive Proofs to Detect Phishing Attacks, International Workshop on Human Interactive Proofs, LNCS 3517, pp. 127-141, 2005.
[14] W. Ford, B. S. Kaliski Jr. Sever-assisted Generation of a Strong Secret From a Password, IEEE. 9th International Workshop on Enabling Technologies, 2000.
[15] L. Gong, M. Lomas, R. Needham, J. Saltzer. Protecting Poorly Chosen Secrets from Guessing Attacks, IEEE Journal on Selected Areas in Communications, 11(5), pp. 648-656, 1993.
[16] O. Goldreich. Secure Multi-party Computation, Working Draft, Version 1.3, June 2001.
[17] R. Ganesan. Yaksha: Augmenting Kerberos with Public Key Cryptography, Symposium on Network and Distributed System Security (SNDSS’95), pp. 132-143, 1995.
[18] S. Halevi, H. Krawczyk. Public-key Cryptography and Password Protocols, ACM. Transactions on Information and System Security Computer (TISSEC), 2(3), pp. 230-268, 1999.
[19] D. P. Jablon. Password Authentication Using Multiple Servers, RSA Security Conference, LNCS 2020, pp. 344-360, 2001.
[20] D. V. Klein. Foiling the Cracker - A Survey of, and Improvements to, Password Security, 2nd USENIX Security, pp. 5-14, 1990.
[21] J. Katz, P. D. Mackenzie, G. Taban, and V. D. Gligor. Two Server Password-only Authentication Key Exchange, Applied Cryptography and Network Security, pp. 1-16, 2005.
[22] J. Katz, R. Ostrovsky, M. Yung. Efficient Password-Authenticated Key Exchange Using Human-Memorable Passwords, Advances in Cryptology, Eurocrypt’01, LNCS 2045, pp. 475-494, 2001.
[23] J. Katz, R. Ostrovsky, M. Yung. Forward Secrecy in Password-Only Key Exchange Protocols, Proc. Security in Communication Networks, 2002.
[24] P. Mackenzie, T. Shrimpton, M. Jakobsson. Threshold Password-Authenticated Key Exchange, Advances in Cryptology, Crypto’02, LNCS 2442, pp. 385-400, 2002.
[25] M. D. Raimondo, R. Gennaro. Provably Secure Threshold Password-Authenticated Key Exchange. Advances in Cryptology, Eurocrypt’03, LNCS 2656, pp. 507-523, 2003.
[26] Y. J. Yang, F. Bao, and R. H. Deng. A New Architecture for Authentication and Key Exchange Using Password for Federated Enterprises, 20th IFIP International Information Security Conference, SEC’05, 2005.