---
author: Terry Crowley
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 4
  likes: 0
  sharetimes: 1
  viewnum: 9930
date: '2018-05-23 11:05:00'
editorchoice: true
excerpt: 在我从微软离职之际，回顾了自己近21年的微软生涯和近35年的行业经验。这篇文章是对过去所学的反思，尽管篇幅较长，但希望能为读者带来启示。
fromurl: https://hackernoon.com/education-of-a-programmer-aaecf2d35312
id: 9670
islctt: true
largepic: /data/attachment/album/201805/23/110510l6r65l555zlgc3ld.jpg
permalink: /article-9670-1.html
pic: /data/attachment/album/201805/23/110510l6r65l555zlgc3ld.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 回顾我在微软的21年职业生涯以及在业界近35年的经历，这篇文章是我对过往学习的反思与总结。虽然内容较多，但我希望它能对你有所启发。
tags:
- 程序员
thumb: false
title: 程序员的学习之路
titlepic: true
translator: explosic4
updated: '2018-05-23 11:05:00'
---

2016年10月，当我离开微软时，已在该公司工作了近21年，并且已经在行业内度过了近35个春秋。这段时间里，我花了很多时间去思考这些年来学到的经验教训。这篇文章就是基于那篇最初的帖子进行了修改和完善。请见谅，文章可能有些长。

![](/data/attachment/album/201805/23/110510l6r65l555zlgc3ld.jpg)

要成为一名专业的程序员，需要掌握的知识量是惊人的：语言细节、API、算法、数据结构、系统及工具等。随着时间推移，新的编程语言和技术不断涌现，似乎总有那么一两种新工具或新语言成为了“人人必备”。紧跟技术潮流并保持专业性至关重要。就像木匠需要知道如何挑选合适的锤子和钉子，并能够精准地使用它们一样，程序员也需要具备类似的能力。

然而，我也发现了一些具有普遍适用性的理论与方法，它们可以持续几十年而不失其价值。尽管底层设备的性能与容量在这段时间内有了几个数量级的增长，但系统设计的基本原则仍然保持不变。理解这些反复出现的主题对于分析和设计我们负责的系统非常有帮助。

### 谦逊与自信

这不仅适用于编程领域，在任何快速发展的行业中，个人都需要在谦逊与自信之间找到平衡。总会有新的东西等待着我们去学习，而且总会有人愿意帮助你——前提是你愿意接受指导。一个人既需要保持谦虚的态度，承认自己的不足；又要有足够的自信，相信自己能够掌握新知识，并将已有的知识应用到实践中去。我遇到的最大挑战之一是一些人在某一特定领域深耕多年后，“忘记”了自己其实擅长于学习新事物。最好的学习方式往往是通过实践来实现，比如构建一个原型或者进行一些探索性的尝试。我认识的最佳程序员们不仅拥有广泛的技术背景，而且还在某个特定技术领域内达到了专家水平。而这种深入的理解往往来自于解决真正困难的问题。

### 端到端视角

1981年，Jerry Saltzer、Dave Reed 和 Dave Clark 在从事互联网和分布式系统的早期研究时提出了“端到端”观点，并在其[经典论文](http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf)中进行了详细阐述。由于网络上存在许多关于这一主题的误传信息，因此直接阅读原始文献尤为重要。作者们相当谦虚，没有声称这是他们的独创发明——从他们看来，这只是工程设计中一种常见策略的应用实例而已，不仅仅局限于通信领域。他们只是将其记录下来，并提供了一些案例支持。

以下是该论文的一个片段：

> 当我们在设计系统功能时，如果仅依赖于终端用户的知识及其参与程度就能正确完整地实现该功能，则应优先考虑这种方式。在某些情况下，让系统内部组件局部实现某项功能可能会显著提高性能。

尽管维基百科及其他资料倾向于将此称为“原则”，但实际上，将其视为一种“观点”更为恰当。正如原作者所言，系统设计师面临的最大难题之一是如何合理划分各组件之间的职责。这涉及到一系列复杂的权衡考量，包括如何分配功能、隔离复杂性以及创建灵活高效且能满足未来需求变化的系统架构。不存在简单易行的原则可以直接套用。

虽然大多数在线讨论集中在通信系统方面，但实际上“端到端”观点的应用范围远不止于此。“最终一致性”就是一个很好的例子。在一个满足“最终一致性”的分布式系统中，允许系统中的元素暂时处于不一致状态，从而简化系统并优化性能，因为有一个更大的端到端过程负责解决这些不一致问题。例如，在横向扩展的订单处理系统（如亚马逊）中，并不要求每个请求都经过中央库存控制节点。缺乏集中控制可能导致两个终端同时售出最后一本书的情况发生，因此系统必须通过某种机制（如通知客户延迟交货）来处理此类冲突。无论如何设计，只要最后一本想要购买的书还未实际交付给买家，就有可能被其他订单抢先订购。一旦认识到需要采取端到端解决方案并付诸实施，就可以进一步优化内部设计以充分利用这一方案带来的好处。

事实上，正是这种设计上的灵活性使得采用端到端方法变得如此强大。通常情况下，端到端思维方式允许内部操作更加灵活，从而使整个系统变得更加健壮并且能够适应各个组成部分特性的变化。这些因素共同作用下，使端到端方法成为一种稳健且适应性强的设计思路。

采用端到端方法意味着在添加可能牺牲整体性能灵活性的抽象层或功能时需格外谨慎（当然也可能是其他类型的灵活性，但在性能尤其是延迟方面尤为关键）。如果你展示了底层硬件的原始性能，那么端到端方法可以根据这些性能特点进行优化以满足特定需求。反之，如果你破坏了底层性能，即使实现了重要且有价值的功能，也会丧失一定的设计灵活性。

当系统规模足够庞大且复杂到需要将整个开发团队分配给各个内部组件时，“端到端”观点同样可以应用于团队组织结构之中。自然地，这些团队会倾向于扩展各自负责组件的功能，通常从牺牲设计灵活性开始，试图在组件层面实现端到端的功能。

应用端到端方法面临的一大挑战在于确定所谓的“端点”究竟在哪里。正如一句谚语所说：“大跳蚤身上有小跳蚤，小跳蚤身上还有更小的跳蚤……以此类推。”