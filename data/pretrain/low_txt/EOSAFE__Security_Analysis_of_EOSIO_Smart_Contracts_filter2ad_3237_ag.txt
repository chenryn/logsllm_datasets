### Generic vs. Vulnerability-Specific Scanning

Building a vulnerability scanner typically requires prerequisite domain knowledge for any security analyst. However, EOSAFE is designed to be generic rather than vulnerability-specific. Additionally, EOSAFE can analyze Wasm bytecode from other platforms (e.g., web applications), with the only extra effort being the resolution of library dependencies for the corresponding platform.

### 9. Related Work

#### WebAssembly Bytecode Analysis

WebAssembly (Wasm) is a new low-level language for the web. There are only a few works that focus on analyzing Wasm bytecode [46–50]. For instance, Lehmann et al. [48] proposed a general-purpose dynamic analysis system for Wasm, which allows developers or researchers to implement heavyweight dynamic analyses, such as instruction counting and memory access tracing. However, these works primarily focus on web applications and employ dynamic analysis techniques. In this paper, we present a general symbolic execution framework for Wasm, specifically tailored to support the security analysis of EOSIO smart contracts.

#### EOSIO Analysis

Several studies have focused on EOSIO [51–53]. For example, Huang et al. [52] proposed a method to identify bot-like accounts in EOSIO based on transaction analysis. Lee et al. [53] introduced and studied four types of attacks stemming from the unique design of EOSIO. Several technical blogs [6, 7, 38, 40, 54] from the industry have reported security attacks on EOSIO. However, no prior work has been dedicated to detecting security vulnerabilities in EOSIO smart contracts.

#### Vulnerability Detection of Ethereum Smart Contracts

Ethereum has garnered significant attention from academia, with numerous studies focusing on vulnerability detection [14–19, 55–57]. For example, [16] concentrated on overflow vulnerabilities. Luu et al. [18] introduced Oyente, the first symbolic execution tool for detecting vulnerabilities in Ethereum smart contracts. Machine learning and fuzz testing techniques [55] have also been employed to identify vulnerabilities in Ethereum smart contracts. As mentioned earlier, the two ecosystems (Ethereum and EOSIO) are fundamentally different, and no previous work on Ethereum can be directly applied to analyze EOSIO smart contracts. Nevertheless, the general principles of Ethereum vulnerability detection can be adapted to enhance our work.

### 10. Conclusion

To the best of our knowledge, this paper presents the first work on detecting security vulnerabilities in EOSIO smart contracts. We introduce EOSAFE, an accurate and scalable framework based on a well-designed native Wasm symbolic execution engine. Our experimental results demonstrate the promising performance of EOSAFE. A large-scale measurement study further reveals serious security issues in the ecosystem, with over 25% of the smart contracts being vulnerable and several high-profile attacks having been successfully carried out.

### Acknowledgments

We would like to thank our shepherd Clara Schneidewind and all anonymous reviewers for their valuable suggestions and comments, which greatly improved the paper. This work was supported by the National Key Research and Development Program (2016YFB1000105), the National Natural Science Foundation of China (62072046, 61772042), the Fundamental Research Funds for the Central Universities (No. 2020QNA5019), Hong Kong RGC Projects (No. 152193/19E, 152223/20E), and the QNRF grant QNRF-AICC01-1228-170004 from the Qatar National Research Fund (a member of the Qatar Foundation). The findings herein reflect the work and are solely the responsibility of the authors.

### References

[1] QuantumMechanic, “The proposal of PoS,” Jul. 2011. [Online]. Available: https://bitcointalk.org/index.php?topic=27787.0
[2] “The DPoS consensus,” Jan. 2020. [Online]. Available: https://en.bitcoinwiki.org/wiki/DPoS
[3] CRAIG RUSSO, “EOSIO surpasses Ethereum in transaction volume,” Sep. 2018. [Online]. Available: https://sludgefeed.com/eos-surpasses-ethereum-in-daily-dapp-users-and-transaction-volume/
[4] Alfredo de Candia, “Increase of EOSIO transaction volumes,” Sep. 2019. [Online]. Available: https://en.cryptonomist.ch/2019/09/03/eos-porn-transaction-volumes/
[5] Mozilla, “Basic concepts for Wasm.” [Online]. Available: https://developer.mozilla.org/en-US/docs/WebAssembly
[18] L. Luu, D.-H. Chu, H. Olickel, P. Saxena, and A. Hobor, “Making smart contracts smarter,” in CCS. ACM, 2016, pp. 254–269.
[6] EOS, “EOSBet was attacked by Fake EOS vulnerability,” Sep. 2018. [Online]. Available: https://www.reddit.com/r/eos/comments/9fpcik/how_eosbet_attacked_by_aabbccddeefg/
[7] PeckShield Inc., “EOSBet was attacked by Fake Receipt.” Oct. 2018. [Online]. Available: https://blog.peckshield.com/2018/10/26/eos/
[8] WebAssembly, “Project home of wasm2c,” Oct. 2020. [Online]. Available: https://github.com/WebAssembly/wabt/tree/master/wasm2c
[9] C. Cadar, D. Dunbar, and D. Engler, “Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs,” in Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’08. USA: USENIX Association, 2008, p. 209–224.
[10] “Memory model of KLEE,” Apr. 2012. [Online]. Available: http://formalverification.cs.utah.edu/gklee_doxy/overview.html
[11] J. Novák, “Improvements of memory management in klee.”
[12] “Performance issue for klee.” [Online]. Available: https://stackoverflow.com/questions/5742618/limits-of-klee-the-llvm-program-analysis-tool
[13] WebAssembly, “Open issues for wasm2c,” Oct. 2020. [Online]. Available: https://github.com/WebAssembly/wabt/issues
[14] N. Grech, M. Kong, A. Jurisevic, L. Brent, B. Scholz, and Y. Smaragdakis, “Madmax: Surviving out-of-gas conditions in ethereum smart contracts,” Proceedings of the ACM on Programming Languages, vol. 2, no. OOPSLA, pp. 1–27, 2018.
[15] J. Krupp and C. Rossow, “teether: Gnawing at ethereum to automatically exploit smart contracts,” in USENIX Security 18, 2018, pp. 1317–1333.
[16] C. F. Torres, J. Schütte, and R. State, “Osiris: Hunting for integer bugs in ethereum smart contracts,” in Proceedings of the 34th Annual Computer Security Applications Conference, 2018, pp. 664–676.
[17] E. Hildenbrandt, M. Saxena, N. Rodrigues, X. Zhu, P. Daian, D. Guth, B. Moore, D. Park, Y. Zhang, A. Stefanescu et al., “KEVM: A complete formal semantics of the ethereum virtual machine,” in CSF. IEEE, 2018, pp. 204–217.
[19] N. He, L. Wu, H. Wang, Y. Guo, and X. Jiang, “Characterizing code clones in the ethereum smart contract ecosystem,” in International Conference on Financial Cryptography and Data Security. Springer, 2020, pp. 654–675.
[20] A. Rossberg, “WebAssembly Specification,” Feb. 2020. [Online]. Available: https://webassembly.github.io/spec/core/index.html
[21] “Supported opcodes in EVM,” Oct. 2020. [Online]. Available: https://github.com/crytic/evm-opcodes
[22] “Type conversion of Solidity,” 2019. [Online]. Available: https://solidity.readthedocs.io/en/v0.5.3/types.html#conversions-between-elementary-types
[23] N. He, “EOSafe benchmark,” Feb. 2021. [Online]. Available: https://github.com/HNYuuu/EOSafe-benchmark
[24] EOSIO, “EOSIO official site,” 2019. [Online]. Available: https://eos.io/
[25] “Ethereum WebAssembly.” [Online]. Available: https://ewasm.readthedocs.io/en/mkdocs/
[26] PeckShield Inc., “Blogs about blockchain security events,” 2020. [Online]. Available: https://blog.peckshield.com/blog.html
[27] SlowMist Zone, “Blockchain security events,” 2020. [Online]. Available: https://hacked.slowmist.io/en/
[28] “Short-circuit mechanism,” May. 2020. [Online]. Available: https://en.wikipedia.org/wiki/Short-circuit_evaluation
[29] “Modulo operation in wasm,” Oct. 2020. [Online]. Available: https://github.com/sunfishcode/wasm-reference-manual/blob/master/WebAssembly.md#integer-remainder-signed
[30] “DappRadar, a DApp browser,” Oct. 2020. [Online]. Available: https://dappradar.com/
[31] “DAppTotal,” Nov. 2019. [Online]. Available: https://dapptotal.com/
[32] “Discussion about bounds checks in wasm2c,” Oct. 2020. [Online]. Available: https://github.com/WebAssembly/wabt/pull/1432
[33] S. Narayan, T. Garfinkel, S. Lerner, H. Shacham, and D. Stefan, “Gobi: Webassembly as a practical path to library sandboxing,” arXiv preprint arXiv:1912.02285, 2019.
[34] WebAssembly Community Group, “Wasm memory module,” 2017.
[35] “Memory layout of eos vm,” Oct. 2019. [Online]. Available: https://github.com/EOSIO/eos-vm/blob/master/README.md
[36] QuoScient, “Octopus,” GitHub repository, Nov. 2019. [Online]. Available: https://github.com/quoscient/octopus
[37] “Functions can modify table data in eosio,” Sep. 2019. [Online]. Available: https://github.com/EOSIO/eosio.cdt/blob/master/libraries/eosiolib/contracts/eosio/multi_index.hpp
[38] David Canellis, “Newdex was attacked by Fake EOS,” Sep. 2018. [Online]. Available: https://thenextweb.com/hardfork/2018/09/18/eos-hackers-exchange-fake/
[39] SlowMist, “Rollback attack for betdiceadmin,” Jun. 2019. [Online]. Available: https://github.com/slowmist/eos-smart-contract-security-best-practices/blob/master/README_EN.md#random-number-practice
[40] ——, “Roll Back Attack about blacklist in EOSIO,” Jan. 2019. [Online]. Available: https://medium.com/@slowmist/roll-back-attack-about-blacklist-in-eos-adf53edd8d69
[41] P. Godefroid, M. Y. Levin, D. A. Molnar et al., “Automated whitebox fuzz testing.” in NDSS, vol. 8, 2008, pp. 151–166.
[42] J. Burnim and K. Sen, “Heuristics for scalable dynamic test generation,” in 2008 23rd IEEE/ACM International Conference on Automated Software Engineering. IEEE, 2008, pp. 443–446.
[43] P. Collingbourne, C. Cadar, and P. H. Kelly, “Symbolic crosschecking of data-parallel floating-point code,” IEEE Transactions on Software Engineering, vol. 40, no. 7, pp. 710–737, 2014.
[44] K. Sen, G. Necula, L. Gong, and W. Choi, “MultiSE: Multi-path symbolic execution using value summaries,” in FSE, 2015, pp. 842–853.
[45] D. Trabish, A. Mattavelli, N. Rinetzky, and C. Cadar, “Chopped symbolic execution,” in ICSE, 2018, pp. 350–360.
[46] A. Szanto, T. Tamm, and A. Pagnoni, “Taint tracking for webassembly,” arXiv preprint arXiv:1807.08349, 2018.
[47] W. Fu, R. Lin, and D. Inge, “TaintAssembly: Taint-based information flow control tracking for webassembly,” arXiv preprint arXiv:1802.01050, 2018.
[48] D. Lehmann and M. Pradel, “Wasabi: A framework for dynamically analyzing webassembly,” in ASPLOS. ACM, 2019, pp. 1045–1058.
[49] C. Disselkoen, J. Renner, C. Watt, T. Garfinkel, A. Levy, and D. Stefan, “Position paper: Progressive memory safety for webassembly,” in Proceedings of the 8th International Workshop on Hardware and Architectural Support for Security and Privacy, 2019, pp. 1–8.
[50] M. Vassena and M. Patrignani, “Memory safety preservation for webassembly,” arXiv preprint arXiv:1910.09586, 2019.
[51] L. Bach, B. Mihaljevic, and M. Zagar, “Comparative analysis of blockchain consensus algorithms,” in 2018 41st International Convention on Information and Communication Technology, Electronics and Microelectronics (MIPRO). IEEE, 2018, pp. 1545–1550.
[52] Y. Huang, H. Wang, L. Wu, G. Tyson, X. Luo, R. Zhang, X. Liu, G. Huang, and X. Jiang, “Understanding (mis)behavior on the eosio blockchain,” Proceedings of the ACM on Measurement and Analysis of Computing Systems, vol. 4, no. 2, pp. 1–28, 2020.
[53] S. Lee, D. Kim, D. Kim, S. Son, and Y. Kim, “Who spent my EOS? on the (in)security of resource management of eos.io,” in 13th USENIX Workshop on Offensive Technologies (WOOT 19), 2019.
[54] PeckShield Inc., “EOSCast was attacked by Fake EOS.” Nov. 2018. [Online]. Available: https://blog.peckshield.com/2018/11/02/eos/
[55] W. Wang, J. Song, G. Xu, Y. Li, H. Wang, and C. Su, “ContractWard: Automated vulnerability detection models for ethereum smart contracts,” IEEE Transactions on Network Science and Engineering, 2020.
[56] R. Ji, N. He, L. Wu, H. Wang, G. Bai, and Y. Guo, “DepoSafe: Demystifying the fake deposit vulnerability in ethereum smart contracts,” arXiv preprint arXiv:2006.06419, 2020.
[57] B. Gao, H. Wang, P. Xia, S. Wu, Y. Zhou, X. Luo, and G. Tyson, “Tracking counterfeit cryptocurrency end-to-end,” Proceedings of the ACM on Measurement and Analysis of Computing Systems, vol. 4, no. 3, pp. 1–28, 2020.