### Default Privileges of Content Scripts

Content scripts, which are JavaScript files that run in the context of a web page, have a set of default privileges. These include access to:

- Local Storage
- Cookies
- JavaScript (JS)
- Document Object Model (DOM)
- Rendering capabilities

However, these privileges are not minimal. Content scripts operate in an isolated world, separate from the extension's core (HTML/JavaScript).

### Cross-Site Requests with Extension Core

- **Cross-Site Requests via Content Scripts:**
  - Content scripts can make cross-site HTTP requests through the extension core.
  - The extension core can file cross-site HTTP requests to multiple origins.
  - Cross-site permissions are authorized to inject content scripts.

- **Default Privileges of Extension Core:**
  - The default privileges of the extension core are also not minimal.
  - There is no differentiated permission between the extension core and the content script.
  - Both can inject scripts and make cross-site requests.

### Cross-Site Requests with Content Scripts

- **Without Cross-Site Permission:**
  - A running content script can only make HTTP requests to the origin of the tab page.

- **With Full DOM Privileges:**
  - Since content scripts have full DOM privileges, they can file unlimited cross-site HTTP requests to arbitrary origins, for example:
    - Inserting iframes
    - Loading images
    - Modifying the `src` attribute of DOM objects
    - Making requests with user credentials included
  - Loading new DOM objects results in cross-site requests.
  - The privilege to access the DOM is not minimal for content scripts.

### Undifferentiated Permissions

- **Extension Injection:**
  - An extension may inject content scripts into many origins.
  - However, it might only need to inject into a dedicated one, such as a translation service.
  - When an origin is assigned to an extension, all components get full privileges.
    - The content script can arbitrarily modify the DOM and file cross-site requests.
    - The extension core can freely file cross-site requests.

- **Privilege Separation:**
  - The current privilege separation is not fine-grained enough.
  - Out of 30 most popular extensions, 19 have overly broad permissions, such as `["http://*/*"]`.

### Security Enhanced Chrome Extensions

- **Micro-Privilege Management:**
  - More fine-grained permission definition and enforcement.
  - Differentiated permissions for the extension core and content script.
  - Least default privileges for content scripts, such as:
    - No ability to introduce new origins to the DOM.
    - No HTTP requests to the tab origin.

- **Example Permission Spec:**
  - For a translation extension, the permissions might be more restricted.

- **Differentiating DOM Elements:**
  - To reduce sensitive data leakage by content scripts, DOM elements can be differentiated based on sensitivity levels.
  - Web app developers can identify sensitive information in a web page, for example:
    - High-level data: can only flow to the web origin.
    - Medium-level data: may flow to authorized origins.
    - Low-level data (default): can flow to any origin.
  - Extension developers can specify permissions accordingly, such as HIGH for username/password and MEDIUM for other user info.

### Implementation

- **Micro-Privilege Management and Spec:**
  - We have implemented the micro-privilege management and spec.
  - For DOM sensitivity, we developed a helper extension (trusted) to:
    - Identify and label sensitive DOM elements.
    - Rewrite DOM element properties according to a configurable dictionary.
  - Chrome enforces permission checks based on the extension manifest.
  - Explicitly marking sensitive info by web app developers is not practical right now.

### Evaluations

- **Selected 30 Most Popular Extensions:**
  - 24 of them have granted network access.
  - 19 of them request higher privileges than necessary (e.g., `http://*/*`).
  - Our implementation easily changes their spec to reduce privileges.

- **Blocking Experimental Attacks:**
  - Our implementation blocks all experimental attacks on the bot extension.

### Conclusions

- **Demonstrated Attacks:**
  - We demonstrated spamming, phishing, and DDoS attacks with implemented Chrome extensions.
- **Analyzed Permissions Model:**
  - We analyzed the permissions model that causes these problems.
- **Proposed Security Enhanced Permission Model:**
  - Micro-privileged permission management and spec.
  - Differentiate content scriptâ€™s permission with DOM sensitivity levels.

### Thank You!

Q&A