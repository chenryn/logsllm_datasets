### Confirmation of RIP-RH's Impact on 7-zip Performance

To verify that RIP-RH does not adversely affect the performance of 7-zip, we conducted tests with and without multi-processing mode enabled. Without any isolation, sequentially compressing a 10GB file using 7-zip took an average of 9 minutes and 39 seconds over three repetitions. When 7-zip was run as a critical process, the same compression task took 9 minutes and 40 seconds on average. These results indicate that RIP-RH does not introduce significant performance or memory overhead for standard applications.

### 7.3 LMBench Microbenchmarks

To further evaluate the initialization and potential memory overhead observed in the case of gcc and mcf, we used the widely recognized LMBench test suite. We ran the LMBench tests both with and without our fork wrapper script. The results showed a visible overhead in application startup, but no significant slowdowns in read or write performance.

### 7.4 Real-World Applications

To better assess the performance of RIP-RH, we conducted additional experiments using popular applications: OpenSSH, Firefox, and Chrome. We started each application as a critical process and created isolated variants of all setuid binaries to demonstrate feasibility.

#### 7.4.1 OpenSSH

For our real-world use case of OpenSSH, we started the SSH daemon as a critical process. We then connected over the local network to transfer files of different sizes and recorded the file transfer times. To eliminate random noise, we repeated the entire process three times and rebooted the machine between each experiment. The results are consistent with our benchmark measurements, showing an overhead of less than 4% even for smaller file transfers. This experiment demonstrates that physical isolation for processes is practical in network service scenarios.

#### 7.4.2 Firefox

In our second real-world experiment, we tested the performance of RIP-RH while running the popular browser Firefox as a physically isolated user process. We used the Kraken and Octane browser benchmarks to evaluate the impact on browsing performance and user experience. The performance impact for both benchmarks was less than 3% for an isolated Firefox process. We conclude that RIP-RH does not significantly affect user experience while running desktop applications like Firefox.

#### 7.4.3 Chrome Tabs

To test the effects of memory fragmentation under high memory pressure, we examined how many isolated tabs a user could open in the Chrome browser (where each tab runs in a separate process). In our experiment, we were able to open and load 100 tabs without issues from a Chrome process marked as critical. This indicates that RIP-RH is a feasible defense even for a large number of processes.

#### 7.4.4 Setuid Binaries

We also verified the feasibility of isolating all setuid binaries by marking them as critical. We successfully booted the system without any problems and restarted the Phoronix test suite (detailed results are omitted for brevity as there were no noticeable deviations).

### 8 Discussion

In this paper, we focused on isolation policies between individual user-level programs. However, we discuss several areas that might be of interest for future work.

#### 8.1 In-Process Isolation

One possible extension of our physical DRAM isolation mechanism could be implemented at the allocation level. For example, instrumenting the system-wide heap allocator would allow for isolation policies between individual application components or threads. This would be particularly useful for large single-process applications structured into components.

#### 8.2 Shared Memory

Shared memory regions pose challenges for memory-isolation schemes. First, shared memory can be accessed by a malicious third-party process. Second, even if all processes accessing the shared memory are benign, an adversary might trick a benign process into maliciously accessing the shared region (a confused-deputy attack). Third, benign processes could act maliciously in combination (a collusion attack). Therefore, shared memory must be considered untrusted and potentially compromised. Consequently, RIP-RH does not support the isolation of shared memory regions. In practice, shared memory can be avoided through techniques such as static linking or decoupling shared components from the main application (broker architecture).

### 9 Related Work

In this section, we briefly summarize existing rowhammer attacks and compare RIP-RH against other proposed defenses.

#### 9.1 Rowhammer-Based Attacks

Rowhammer-based attacks were first systematically studied by Kim et al. [14], though they did not provide any practical attack. The first practical rowhammer-based privilege-escalation attacks were presented by Seaborn and Dullien [27], who exploited the clflush instruction on x86 to escape the Chrome browser sandbox and compromise the kernel. Qiao and Seaborn [24] demonstrated a new rowhammer attack using non-temporal instructions, and Aweke et al. [1] showed that rowhammer attacks can be executed without dedicated instructions. Gruss et al. [11] demonstrated a JavaScript-based rowhammer attack, and Bosman et al. [2] leveraged memory deduplication in Windows 10 to create fake JavaScript objects. Razavi et al. [25] and Xiao et al. [35] presented cross-VM attacks, and Pessl et al. [22] and Van der Veen et al. [33] demonstrated cross-CPU rowhammer attacks. Gruss et al. [10] showed that real-world setuid binaries can be exploited through opcode flipping, and Frigo et al. [8] demonstrated that GPUs can accelerate rowhammer attacks.

All these attacks require memory belonging to a different security domain to be physically co-located with memory under the attacker’s control. Our defense prevents such direct co-location between user-level processes.

#### 9.2 Defenses Against Rowhammer

Kim et al. [14] proposed various defense strategies, including improved manufacturing, higher refresh rates, and error-correcting codes. However, these solutions are impractical due to their high cost and long deployment times. Higher refresh rates do not effectively mitigate rowhammer attacks, as Aweke et al. [1] demonstrated successful attacks within 16ms. Error-correcting codes (ECC) can detect and correct single-bit errors but are ineffective against multiple bit errors. Probabilistic adjacent row activation (PARA) was suggested by Kim et al. [14] but requires changes to the memory controller and is not suitable for legacy systems. Software-based defenses include ANVIL [1], which uses performance counters to detect high cache-eviction rates, and CATT [3], which partitions kernel and user memory domains. ZebRAM [15] uses a static approach to isolate memory rows, while RIP-RH dynamically manages protection domains, allowing for better memory utilization.

### 10 Conclusion

In this paper, we present RIP-RH, the first rowhammer defense that allows physical isolation of processes. Through its DRAM-aware physical page allocator, it enables the creation of critical processes that are isolated in memory from all other processes. Our evaluation shows that RIP-RH offers high performance with an overhead of only 3.17% for standard benchmarks, demonstrating that software-based defenses for rowhammer are practical for a larger number of security domains.

### Acknowledgment

This work has been supported by the German Research Foundation (DFG) as part of projects HWSec, P3, and S2 within the CRC 1119 CROSSING, by the German Federal Ministry of Education and Research (BMBF) and the Hessen State Ministry for Higher Education, Research, and the Arts (HMWK) within CRISP, by BMBF within the projects iBlockchain and CloudProtect, and by the Intel Collaborative Research Institute for Collaborative Autonomous & Resilient Systems (ICRI-CARS).

### References

[1] Zelalem Birhanu Aweke, Salessawi Ferede Yitbarek, Rui Qiao, Reetuparna Das, Matthew Hicks, Yossi Oren, and Todd Austin. 2016. ANVIL: Software-Based Protection Against Next-Generation Rowhammer Attacks. In International Conference on Architectural Support for Programming Languages and Operating Systems.

[2] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016. Dedup Est Machina: Memory Deduplication as an Advanced Exploitation Vector. In IEEE Symposium on Security and Privacy.

[3] Ferdinand Brasser, Lucas Davi, David Gens, Christopher Liebchen, and Ahmad-Reza Sadeghi. 2017. Can’t touch this: Software-only mitigation against rowhammer attacks targeting kernel memory. In USENIX Security Symposium.

[4] Nathan Burow, Scott A. Carr, Stefan Brunthaler, Mathias Payer, Joseph Nash, Per Larsen, and Michael Franz. 2016. Control-Flow Integrity: Precision, Security, and Performance. (2016). http://arxiv.org/abs/1602.04056

[5] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In IEEE Symposium on Security and Privacy.

[6] J. Criswell, N. Dautenhahn, and V. Adve. 2014. KCoFI: Complete Control-Flow Integrity for Commodity Operating System Kernels. In IEEE Symposium on Security and Privacy.

[7] Lucas Davi, Alexandra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In Annual Network and Distributed System Security Symposium.

[8] Pietro Frigo, Cristiano Giuffrida, Herbert Bos, and Kaveh Razavi. 2018. Grand Pwning Unit: Accelerating Microarchitectural Attacks with the GPU. In IEEE Symposium on Security and Privacy.

[9] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. 2016. Fine-Grained Control-Flow Integrity for Kernel Software. In IEEE European Symposium on Security and Privacy.

[10] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas Juffinger, Sioli O’Connell, Wolfgang Schoechl, and Yuval Yarom. 2018. Another flip in the wall of rowhammer defenses. In IEEE Symposium on Security and Privacy.

[11] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2016. Rowhammer.js: A Cache Attack to Induce Hardware Faults from a Website. In Conference on Detection of Intrusions and Malware and Vulnerability Assessment.

[12] IC Insights. 2017. DDR4 Set to Account for Largest Share of DRAM Market by Architecture. http://icinsights.com/data/articles/documents/969.pdf.

[13] Michael Kerrisk. 2010. The Linux programming interface: a Linux and UNIX system programming handbook. No Starch Press.

[14] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. 2014. Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors. In Annual International Symposium on Computer Architecture.

[15] Radhesh Krishnan Konoth, Marco Oliverio, Andrei Tatar, Dennis Andriesse, Herbert Bos, Cristiano Giuffrida, and Kaveh Razavi. 2018. ZebRAM: Comprehensive and Compatible Software Protection Against Rowhammer Attacks. In USENIX Symposium on Operating Systems Design and Implementation.

[16] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim, Long Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dangling Pointers Nullification. In Annual Network and Distributed System Security Symposium.

[17] Zhiqiang Lin, RyanD. Riley, and Dongyan Xu. 2009. Polymorphing Software by Randomizing Data Structure Layout. In Conference on Detection of Intrusions and Malware and Vulnerability Assessment.

[18] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. 2018. Meltdown: reading kernel memory from user space. In USENIX Security Symposium.

[19] Nick Nikiforakis, Steven Van Acker, Wannes Meert, Lieven Desmet, Frank Piessens, and Wouter Joosen. 2013. Bitsquatting: Exploiting bit-flips for fun, or profit?. In Proceedings of the 22nd international conference on World Wide Web.

[20] Gene Novark and Emery D Berger. 2010. DieHarder: securing the heap. In ACM Conference on Computer and Communications Security.

[21] Kaan Onarlioglu, Leyla Bilge, Andrea Lanzi, Davide Balzarotti, and Engin Kirda. 2010. G-Free: Defeating Return-Oriented Programming through Gadget-less Binaries. In Annual Computer Security Applications Conference.

[22] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Stefan Mangard. 2016. DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks. In USENIX Security Symposium.

[23] Jannik Pewny and Thorsten Holz. 2013. Control-flow Restrictor: Compiler-based CFI for iOS. In Annual Computer Security Applications Conference.

[24] Rui Qiao and Mark Seaborn. 2016. A New Approach for Rowhammer Attacks. In IEEE International Symposium on Hardware Oriented Security and Trust.

[25] Kaveh Razavi, Ben Gras, Erik Bosman, Bart Preneel, Cristiano Giuffrida,