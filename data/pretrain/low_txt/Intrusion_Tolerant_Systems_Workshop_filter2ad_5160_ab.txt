### Ongoing Network Attack

Formulating intrusion tolerance in terms of symptoms is not unprecedented. Recent work on wrappers at NAI [1] and the work on protecting Win32 DLLs at RST [4] can be categorized based on symptoms, such as all attacks that attempt to write to the start-up folder.

### 2.2. Survivability Strategies Using Adaptive and Unpredictable Responses

Once we identify the symptoms to monitor for survivability, we can devise strategic responses. From one perspective, a strategy can be proactive or reactive. A proactive strategy dictates a course of action (COA) in anticipation or preparation for a future attack. For example, anticipating simultaneous attacks on multiple replicas, one might deploy a non-replicated standby that can be quickly activated. Another proactive strategy is interfacing with a firewall to block IP traffic from an infected host once its identity is known. Reactive strategies involve measures taken in response to observed events. For instance, when a host is under attack, one might migrate objects and services to another host.

From another perspective, a strategy can be defensive or tolerant. A defensive strategy aims to prevent the symptom from resurfacing, while a tolerant strategy seeks ways to avoid the symptom. An example of a defensive strategy is blocking all IP traffic from a suspected host. Migrating replicas from the suspected host would be an example of a tolerant strategy. These different views of strategies are not mutually exclusive, and a comprehensive strategy will likely involve all perspectives. Devising the right strategy for a particular application is non-trivial. In the initial stage of our application, we use an ad-hoc case analysis to formulate a strategy.

Adaptation is a key capability for supporting any survivability strategy. Symptoms dictate the nature and form of the adaptation. For example, repeated replica crashes on a single host, a symptom observed at the application level, could be responded to by migrating the replica to a different host. In the case of a pre-planned and coordinated attack, adaptive responses alone are insufficient if they can be predicted. If the attacker can accurately predict which host the replica will be migrated to, they can plan ahead to re-target the migrated replica in its new location. Therefore, adaptive responses should be unpredictable to the attacker. This makes pre-planning more difficult and coordinating an ongoing attack to counter the adaptive responses less reliable, thereby improving the application’s survivability.

Incorporating unpredictability is also non-trivial. First, there must be multiple options to choose from. The response selection mechanism should have the capability to select different responses to the same symptom at different times. Additionally, not all responses may be equally effective. Some options may be mandatory. The response selection mechanism must be aware of these constraints.

### 2.3. Bridging the Gap Between Application and Infrastructure

When attempting to build an application with a survivability strategy within the current distributed systems infrastructure, we find a disconnect between what the application needs and what the infrastructure provides. Key issues that need to be addressed by developing new capabilities in the middleware space include:

- **Awareness and Control of Infrastructure**: Attacks affect the availability and quality of system resources. A survivable application needs to cope with these effects, making awareness of the resource situation crucial. To respond effectively to attack symptoms, the application may need to exert some control over parts of the infrastructure. The core issue here is to make the quality and availability of resources translucent, rather than opaque as in older middleware.
  
- **Resource Redundancy and Its Management**: Pre-planned and coordinated attacks may cause resources to fail arbitrarily, perhaps simultaneously or in stages. As in fault-tolerance, resource redundancy is critical for tolerating such failures, and resource managers must be capable of addressing Byzantine failures. All critical resources for an application must be redundant and managed through a uniform interface. Protection of resources and resource management systems is also very important. For example, if an attacker can exploit the redundancy mechanism, they can force the replica to migrate to a host of their choice, which may be easier to attack or already compromised. A new self-protected redundancy mechanism managing multiple resources and implementing Byzantine fault-tolerance algorithms is required. Byzantine fault-tolerant techniques are typically expensive, and the requirement for tolerating Byzantine failures in multiple system resources makes it even more challenging. We are investigating engineering solutions that combine fault-tolerance and security techniques appropriately, where graceful degradation is acceptable, and the cost and quality of the solution are dynamically adjustable.
  
- **Coordination and Management of Adaptation**: Adaptive responses may involve changes in the application and in the way resources are managed. For a systematic implementation of a survivability strategy, this adaptive behavior needs to be separated from the application’s functional behavior. The space between the application and the infrastructure is the appropriate place for this. Adaptive responses will usually involve coordination among multiple mechanisms in the middle, with responsibilities ranging from resource management to system security. One adaptive response may preclude another, and some responses may be more expensive. One of the underlying issues is the trade-off between adaptation and the application’s performance.

### 3. Our Background and Recent Work

In our earlier work with QoS in distributed systems, we developed individual resource management systems (AQuA, DIRM) [3, 2] that offer a certain desired quality to QoS-aware applications via an adaptive middleware called QuO [6]. This middleware allows the application to adjust itself when resource constraints do not meet the desired level. These applications display a minimal degree of inherent survivability. With the capability of introducing environment-awareness and adaptive behavior in distributed systems, we then started to look at survivability requirements of distributed applications. We presented our initial work towards this in an earlier paper [5], describing how integration with IDSs can lead to system agility and discussing various benefits of such integration. We have two ongoing projects in this area. One focuses on defensive strategies and how to build applications that incorporate defensive strategies. In the other, we are exploring intrusion tolerance by means of middleware-coordinated adaptation that is unpredictable to the attacker.

### 4. Conclusion

Our ongoing work in adaptive middleware has led to the discovery that applications that are aware of changes in their environment can participate in their own defense, recognizing the symptoms of attacks and improving the detection and responses of security and defense mechanisms operating on their behalf. Traditional fault-tolerance techniques, if extended to support coordinated, malicious faults, appear promising to enhance the survival of applications. We are currently performing research to make fault-tolerance techniques suitable for the tolerance of intrusions in large-scale distributed systems. We are focusing on tolerating the symptoms of attacks, tolerating Byzantine failures that can be parts of malicious, coordinated attacks, and concentrating on unpredictable responses, both proactive and reactive, that will be difficult for intruders to exploit. In this paper, we have outlined our approach and presented several key problems that we are currently investigating.

### References

[1] L. Badger. Generic software wrappers. Internet URL: http://www.pgp.com/research/nailabs/secure-execution/wrappers-overview.asp, 2000.

[2] BBN Distributed Systems Research Group, DIRM project team. DIRM technical overview. Internet URL: http://www.dist-systems.bbn.com/projects/DIRM, 1998.

[3] M. Cukier, J. Ren, C. Sabnis, D. Henke, J. Pistole, W. Sanders, D. Bakken, M. Berman, D. Karr, and R. E. Schantz. AQuA: An adaptive architecture that provides dependable distributed objects. In Proceedings of the 17th IEEE Symposium on Reliable Distributed Systems, pages 245–253, October 1998.

[4] A. Ghosh. Sandboxing mobile code. Internet URL: http://www.rstcorp.com/research/sandboxing/, 2000.

[5] J. P. Loyall, P. P. Pal, R. E. Schantz, and F. Webber. Building adaptive and agile applications using intrusion detection and response. In Proceedings of the ISOC Network and Distributed Systems Security Conference, February 2000.

[6] J. A. Zinky, D. E. Bakken, and R. E. Schantz. Architectural support for Quality of Service for CORBA objects. Theory and Practice of Object Systems, 1(3):55–73, April 1997.