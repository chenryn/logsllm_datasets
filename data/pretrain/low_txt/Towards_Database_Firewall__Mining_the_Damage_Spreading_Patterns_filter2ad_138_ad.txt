# System Integrity and Availability Analysis

## 4. System Integrity Estimation Process

Figure 4 illustrates the system integrity estimation process, where the real system integrity \( SI_r = 0.8 \). The figure compares the performance of two methods: Bayesian Network (BN) and Dependency Relation (DR), along with their respective repair versions (BN-Repair and DR-Repair).

### 4.1 Performance Comparison
- **Accuracy**: Our approach shows high estimation accuracy when new attacks are similar to previous ones. This is because a higher recall in pattern mining allows for more effective use of prior knowledge.
- **Challenges**: When a different type of attack occurs, the accuracy drops, as the previous knowledge becomes less useful. Further research is needed to address this issue.

## 5. System Availability Analysis

System availability is a critical metric for evaluating the performance of the database firewall framework. Traditional methods, such as rolling back, can lead to zero availability if even a few data objects are damaged, as the system is inaccessible during re-execution. Our framework defines two types of availability:
- **Maximum System Availability (\( A_{max} \))**: The ratio of the number of good data objects to the total number of data objects in the database, \( A_{max} = \frac{n_g}{N} \).
- **Real-time System Availability (\( A_r \))**: The ratio of the number of good data objects discovered at time \( t \) to the total number of data objects, \( A_r = \frac{n_t}{N} \).

### 5.1 Results without Repairing Procedure
Figure 5 shows the system availability over time for both synthetic and real datasets. The BN and DR methods are compared, and it is evident that our approach maintains a higher system availability and reaches \( A_{max} = 0.8 \) faster than the dependency relation-based method.

### 5.2 Results with Repairing Procedure
Figure 6 demonstrates the system availability when the repairing procedure is introduced. With \( Q = 0.15 \) and \( \epsilon = 0.6 \), the maximum system availability \( A_{max} = 1 \) is achieved earlier with our approach compared to the dependency relation-based method. We assume a constant repairing rate.

## 6. System Throughput Analysis

System throughput is another important metric, defined as the ratio of the number of served transactions to the total number of transactions requiring service, \( T_r = \frac{n_s}{N} \). We assume a constant arrival rate of transactions.

### 6.1 Results without Repairing Procedure
Figure 7(a) shows the system throughput for the synthetic dataset without the repairing procedure. The throughput drops to nearly zero at \( t = 75 \) seconds due to all required data objects being contained and not accessible by the transactions. Despite this, the average throughput remains above 50%.

### 6.2 Results with Repairing Procedure
Figure 7(b) shows the system throughput for the real dataset with the repairing procedure. The throughput is higher, indicating the effectiveness of the repairing process in maintaining system availability and throughput.

## 7. Conclusion and Future Work

In this paper, we have explored the problem of mining frequent damage spreading patterns from previous attack histories and using Bayesian networks to predict damage probabilities and system integrity. Our database firewall framework dynamically enforces transaction filtering to prevent potential damage spreading while continuously providing data services under attack. Experimental results show that our approach can provide quality data in accordance with differential service requirements.

### 7.1 Future Directions
- **Detection Latency**: The impact of detection latency on the performance of the database firewall system needs further investigation.
- **Scalability**: As the number of discovered patterns increases, the computational overhead may become significant. We will evaluate and optimize our model to address these issues.
- **Distributed Environment**: Extending the database firewall concept to a distributed environment is a future goal.
- **Heavy Attack Scenarios**: Understanding the performance under heavy attack conditions and improving estimation accuracy are also areas of interest.

## Acknowledgements
This work was supported in part by NSF CCR-TC-0233324. We thank Elisa Bertino, Ashish Kamra, and Xiangji Huang for sharing the clinic OLTP data.

## References
[1] P. Ammann, S. Jajodia, and P. Liu, “Recovery from malicious transactions,” in IEEE Transactions on Knowledge and Data Engineering, vol. 15, no. 5, pp. 1167–1185, 2002.
[2] P. Liu and S. Jajodia, “Multi-phase damage confinement in database systems for intrusion tolerance,” in Proc. 14th IEEE Computer Security Foundations Workshop, Nova Scotia, Canada, June 2001.
[3] P. Liu, P. Ammann, and S. Jajodia, “Rewriting histories: Recovery from malicious transactions”. Distributed and Parallel Database 8, 1, 7-40.
[4] P. Ammann, S. Jajodia, C. McCollum, and B. Blaustein, “Surviving information warfare attacks on databases,” in Proceedings of the IEEE Symposium on Security and Privacy, Oakland, CA, May 1997, pp. 164–174.
[5] P. Liu, “Architectures for intrusion tolerant database systems,” in Twenty-first Annual Computer Security Applications Conference (ACSAC’02), 2002, pp. 311–320.
[6] D. Barbara, R. Goel, and S. Jajodia, “Using checksums to detect data corruption,” in Proceedings of the 2000 International Conference on Extending Data Base Technology, Mar 2000.
[7] P. W. P. J. Grefen and P. M. G. Apers, “Integrity control in relational database systems: an overview,” Data Knowl. Eng., vol. 10, no. 2, pp. 187–223, 1993.
[8] E. Bertino and A. Kamra and E. Terzi and A. Vakali, “Intrusion Detection in RBAC-administered Databases,” 21st Annual Computer Security Applications Conference (ACSAC 2005), 5-9 December 2005, Tucson, AZ, USA
[9] P. A. Bernstein, V. Hadzilacos, and N. Goodman, Concurrency Control and Recovery in Database Systems. Addison-Wesley, Reading, MA, 1987.
[10] J. Pearl, Causality: Models, Reasoning and Inference. Cambridge University Press.
[11] T. Chiueh and D. Pilania, “Design, implementation, and evaluation of an intrusion resilient database system,” in Proc. International Conference on Data Engineering, 1024-1035, 2005.
[12] S. Sekar, M. Bendre, and P. Bollineni, “A fast automaton-based method for detecting anomalous program behaviors,” in 2001 IEEE Symposium on Security and Privacy. Oakland, CA.
[13] S.-P. Shieh, and V. Glogor, “On a pattern-oriented model for intrusion detection,” IEEE Trans. On Knowledge and Data Engineering 9, 4, 661-667
[14] R. Sobhan and B. Panda, “Reorganization of the database log for information warfare data recovery,” in Proc. of the fifteenth annual working conference on Database and application security, Niagara, Ontario, Canada, 121-134, 2001.
[15] R. Agrawal and R. Srikant, “Fast algorithms for ming association rules,” in Proc. of the VLDB Conference, Santiago, Chile, 1994.
[16] Q. Yao, A. An, and X. Huang, “Finding and analyzing database user sessions,” in Proc. of the 10th International Conference on Database System for Advanced Applications, 2005.
[17] Owasp top ten most critical web application security vulnerabilities. http://www.owasp.org/documentation/topten.html, 2004
[18] S. Y. Lee, W. L. Low, and P. Y. Wong, “Learning fingerprints for a database intrusion detection system,” in 7th European Symposium on Research in Computer Security (ESORICS), 2002.
[19] F. Valeur, D. Mutz, and G. Vigna, “A learning-based approach to the detection of SQL attacks,” in Proceedings of the Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), July 2005.
[20] C. Kruegel, and G. Vigna, “Anomaly detection of web-based attacks,” in CCS’03. Washingtion, DC, USA, 251-261.
[21] B. Panda, and J. Giordano, “Reconstructing the database after electronic attacks,” in the 12th IFIP 11.3 Working Conference on Database Security, 1998.
[22] J.-L. Lin, and M. H. Dunham, “A survey of distributed database checkpointing,” in Distributed and Parallel Databases 5, 3, 289-319.
[23] Y. Lin, and E. D. Lazowska, “A study of time warp rollback mechanisms,” ACM Transactions on Modeling and Computer Simulations 1, 1, 51-72.
[24] D. R. Jefferson, “Virtual time,” ACM Transactions on Programming Languages and Systems 7, 3, 404-425.

Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006