### Requests Analysis

| Category | With ATG | No ATG |
| --- | --- | --- |
| Requests | 334.5 | 131.5 |
| STDEV | 186.6 | 74.7 |
| Access Interval (125 Accesses per Interval) | 3 | 3 |
| STDEV | 0 | 0 |

| Category | With ATG | No ATG |
| --- | --- | --- |
| Requests | 164 | 49 |
| STDEV | 88.2 | 26.2 |
| Access Interval (125 Accesses per Interval) | 3 | 3 |
| STDEV | 0 | 0 |

### Figure 7: Sequential Access of Four Resources by the Same Principal in a (2,4,10) Tree

- **Eager Strategy**: 500
- **Lazy Strategy**: 250
- **Access Interval (125 Accesses per Interval)**: 1250
- **Time Intervals**:
  - 1-125
  - 126-250
  - 251-375
  - 376-500
  - 501-625
  - 626-750
  - 751-875
  - 876-1000
  - 1001-1125
  - 1126-1250
  - 1251-1375
  - 1376-1500

### Figure 8: Average of 10 Simulations with 1500 Random Accesses in a (4,4,25) Tree

- **Requests per Principal**:
  - **Eager Strategy**: 8.55, 1.04, 0.52, 0.48, 0.29, 0.21, 0.14, 0.16, 0.10, 0.07, 0.05, 0.03
  - **Lazy Strategy**: 1.93, 0.25, 0.12, 0.10, 0.06, 0.06, 0.05, 0.04, 0.04, 0.03, 0.02, 0.02

## 5.6. Simulating a User’s Experience in a Deployed System

The results thus far clearly demonstrate the benefits of the lazy strategy in simple, controlled scenarios. A more practical scenario, which we explore here, may involve many users accessing different resources in somewhat arbitrary order and frequency.

In this scenario, we have chosen to use a (4,4,225) tree. This means that there are four department heads, each with four floor managers. Each floor has 25 residents, for a total of 400 users who will be accessing resources. The system controls access to the main door to the building, security doors on each of the sixteen floors, and 400 offices: one for each user. Each of these principals has access to his office, the floor on which his office resides, and the building’s main door. We show the performance for the first 1500 accesses that occur in this system. Each access is made by a randomly chosen principal to one of the three resources which he can access (again chosen at random). This scenario was too large to be simulated exhaustively, so instead, we show the average of ten runs.

Figure 8 shows the performance of the system with all optimizations enabled, measured both as the average number of requests each principal has to answer per access attempt, and the total number of requests per access attempt. In this more realistic scenario, the lazy strategy continues to perform well. During the first interval of 125 accesses, the lazy strategy is at least three times more efficient in the number of requests made. Note also that the number of requests quickly drops to a level that could be practical for a deployed system.

In practice, the number of times a user receives a request will be somewhat lower because a sizeable percentage of requests are made to the CA and the root node of the authorization tree. It is likely that the CA and the root node will either generate all certificates prior to bringing the system online or will have an automated system for signing certificates, thus alleviating the burden on the user. Furthermore, we do not restrict whom a principal may ask for help, which would be necessary in practice.

## 6. Conclusion and Future Work

Previous work on distributed authorization systems largely did not focus on practical strategies for collecting the certificates used to show that a request satisfies an access-control policy. However, attention to these strategies is necessary for the deployment of rich certificate-based access control, particularly in cases where credentials are created dynamically with user involvement.

In this paper, we introduced a new distributed approach to assembling access-control proofs. The strength of our approach is that it places the burden of proving a statement on the party most likely to have (or be willing to create) credentials relevant to proving it. In contrast, prior approaches asked the prover to guess credentials that might be available, thereby inducing greater numbers of attempted retrievals and user interruptions.

In addition to these advantages, we showed empirically that this approach responds very well to caching and to a new optimization, automatic tactic generation. We achieve these advances with no loss in proving power: our distributed approach completes a proof whenever a centralized approach that uses certificate retrieval would do so.

Our algorithms are a cornerstone of a testbed we are developing that leverages smartphones to create and enforce an access-control policy for both physical rooms and virtual resources. Once complete, this testbed will regulate access for a population of roughly 150 people to over 60 doors, in addition to computer logins and other virtual resources. Each person’s smartphone will hold cryptographic keys for creating credentials, as well as a tactical theorem prover for generating proofs of authority. If, in the course of generating a proof of authority, the tactical theorem prover on a phone encounters a subgoal that, according to the distributed proving algorithm of Section 4, should be sent to another for proof, then the subgoal will be conveyed in real time over cellular data services (SMS/MMS over GPRS) to that party. The tactical theorem prover on that phone, in turn, will attempt to prove the subgoal with credentials it already has stored, other subgoals others prove for it (recursively), and various possible credentials it could create with its user’s permission. For the last of these, the smartphone prompts the user to determine which of these credentials, if any, it should create. Upon receiving user instruction, the credential is created, and the subgoal proof is generated and returned to the requesting smartphone. We expect such interruptions to be infrequent; for most requests, caching and automatic tactic generation should yield proofs silently.

### References

[1] M. Abadi. On SDSI’s linked local name spaces. Journal of Computer Security, 6(1–2):3–21, Oct. 1998.
[2] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin. A calculus for access control in distributed systems. ACM Transactions on Programming Languages and Systems, 15(4):706–734, Sept. 1993.
[3] A. W. Appel and E. W. Felten. Proof-carrying authentication. In Proceedings of the 6th ACM Conference on Computer and Communications Security, Singapore, Nov. 1999.
[4] D. Balfanz, D. Dean, and M. Spreitzer. A security infrastructure for distributed Java applications. In Proceedings of the 2000 IEEE Symposium on Security and Privacy, Oakland, CA, May 2000.
[5] L. Bauer, M. A. Schneider, and E. W. Felten. A general and flexible access-control system for the Web. In Proceedings of the 11th USENIX Security Symposium, San Francisco, CA, Aug. 2002.
[6] M. Blaze, J. J. Feigenbaum, I. Ioannidis, and A. D. Keromytis. The KeyNote trust-management system, version 2, Sept. 1999. IETF RFC 2704.
[7] M. Blaze, J. Feigenbaum, and J. Lacy. Decentralized trust management. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, pages 164–173, Oakland, CA, 1996.
[8] M. Blaze, J. Feigenbaum, and M. Strauss. Compliance checking in the PolicyMaker trust-management system. In Proceedings of the 2nd Financial Crypto Conference, volume 1465 of Lecture Notes in Computer Science, Berlin, 1998. Springer.
[9] D. E. Clarke. SPKI/SDSI HTTP server / certificate chain discovery in SPKI/SDSI. Master’s thesis, Massachusetts Institute of Technology, Sept. 2001.
[10] D. E. Clarke, J.-E. Elien, C. M. Ellison, M. Fredette, A. Morcos, and R. L. Rivest. Certificate chain discovery in SPKI/SDSI. Journal of Computer Security, 9(4):285–322, 2001.
[11] J.-E. Elien. Certificate discovery using SPKI/SDSI 2.0 certificates. Master’s thesis, Massachusetts Institute of Technology, May 1998.
[12] C. M. Ellison, B. Frantz, B. Lampson, R. L. Rivest, B. M. Thomas, and T. Ylonen. Simple public key certificate. Internet Engineering Task Force Draft IETF, July 1997.
[13] C. M. Ellison, B. Frantz, B. Lampson, R. L. Rivest, B. M. Thomas, and T. Ylonen. SPKI Certificate Theory, Sept. 1999. RFC2693.
[14] C. A. Gunter and T. Jim. Policy-directed certificate retrieval. Software—Practice and Experience, 30(15):1609–1640, Dec. 2000.
[15] T. Jim. SD3: A trust management system with certified evaluation. In Proceedings of the 2001 IEEE Symposium on Security and Privacy, pages 106–115, Los Alamitos, CA, May 14–16 2001.
[16] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Authentication in distributed systems: Theory and practice. ACM Transactions on Computer Systems, 10(4):265–310, Nov. 1992.
[17] N. Li, J. C. Mitchell, and W. H. Winsborough. Design of a role-based trust management framework. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, pages 114–130, Oakland, CA, May 2002.
[18] N. Li, W. H. Winsborough, and J. C. Mitchell. Distributed credential chain discovery in trust management. Journal of Computer Security, 11(1):35–86, Feb. 2003.
[19] A. J. Maywah. An implementation of a secure Web client using SPKI/SDSI certificates. Master’s thesis, Massachusetts Institute of Technology, May 2000.
[20] L. Paulson. Isabelle: A generic theorem prover. Lecture Notes in Computer Science, 828, 1994.
[21] R. L. Rivest and B. Lampson. SDSI—A simple distributed security infrastructure. Presented at CRYPTO’96 Rumpsession, Apr. 1996.
[22] S. Russel and P. Norvig. Artificial Intelligence, A Modern Approach. Prentice Hall, second edition, 2003.
[23] E. Wobber, M. Abadi, M. Burrows, and B. Lampson. Authentication in the Taos operating system. ACM Transactions on Computer Systems, 12(1):3–32, Feb. 1994.

### A. Inference Rules of Our Logic

- **SAYS-I**: `pubkey signed F` → `key(pubkey) says F`
- **SAYS-LN**: `A says (A.S says F)` → `A.S says F`
- **SPEAKSFOR-E**: `A says (B speaksfor A)` and `B says F` → `A says F`
- **SPEAKSFOR-E2**: `A says (B speaksfor A.S)` and `B says F` → `A.S says F`
- **DELEGATE-E**: `A says (delegate(A, B, U))` and `B says (action(U, N))` → `A says (action(U, N))`

### B. Proof of Termination for a Distributed Prover

- **Notation**:
  - Let CP refer to a centralized prover with tactics T and facts F.
  - Let DP refer to a distributed prover consisting of i cooperating nodes, each using tactics T and facts fi such that \(\bigcup_{i} f_i = F\).
  - When comparing CP to DP, we will refer to line N as [Nc] or [Nd] if being run by CP or DP respectively.
  - To refer to variable A on this line, we state [Nc].A or [Nd].A.
  - When B is a function parameter, we shorten the notation to [c].B or [d].B.
  - We introduce a special constant `localmachine` that represents the principal associated with the machine on which the prover is being run.
  - Let [c].result represent the substitution returned by bc-ask in the centralized scenario, and [d].result represent the substitution returned in the distributed scenario.
  - We make the assumption that all invocations of rpc are transparent to bc-ask.

This document is part of the Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 1081-6011/05 $ 20.00 IEEE.