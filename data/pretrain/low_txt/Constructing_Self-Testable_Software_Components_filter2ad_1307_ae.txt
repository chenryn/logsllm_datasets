### Built-in Test Mechanisms for Enhancing Component Testability

To increase the testability of components, which is a crucial step in improving their reliability and that of the applications using them, we utilize built-in test mechanisms. These mechanisms include assertions and reporter methods. The process for producing self-testable components has been outlined, and a prototyping tool supporting several of these steps has been developed. This tool is specifically designed for object-oriented (OO) components developed in C++.

One of the automated steps in this process is test selection, which is performed by the consumer using test information embedded within the component. Our testing selection strategy is characterized by the following key aspects:
1. It is based on the component specification.
2. It combines various techniques to cover not only behavioral aspects but also the values of method parameters.
3. It allows for the reuse of test cases when deriving tests for a subclass through the use of hierarchical incremental techniques.

Preliminary results from an empirical validation of the test selection strategy using mutation analysis have been presented. Although these results are still in their early stages, they indicate that the test strategy has significant potential to reveal interaction faults between methods. Additionally, the results highlight the necessity of retesting inherited features in the context of a subclass, even if they do not interact with modified or newly introduced features. This is essential to ensure that faults introduced during base class maintenance are not overlooked in the subclass.

In the short term, further empirical evaluations are planned to refine and improve the approach. We are also extending this approach to components with more than one class, focusing on interactions between classes (interclass testing) rather than just within a single class (intraclass testing). In the long term, we envision the development of an infrastructure that supports the creation and use of self-testable components, which will be generic enough to be applicable to components developed in different programming languages.

### Acknowledgements

This work was partially supported by grants from the Brazilian Research Council (CNPq). We would like to thank the reviewers whose comments greatly contributed to the improvement of this text.

### References

1. F. Bachmann, L. Bass, et al. "Technical Concepts of Component-Based Software Engineering." Technical Report CMU/SEI-2000-TR-008, April 2000.
2. S. Barbey, D. Buchs, C. Ptraire. "A Theory of Specification-Based Testing for Object-Oriented Software." In Proc. 2nd European Dependable Computing Conference (EDCC-2), Italy, 1996, pp. 303-320.
3. A. Beugnard, J. Jezequel, N. Plouzeau, D. Watkins. "Making Components Contract Aware." IEEE Computer, July 1999, pp. 38-45.
4. B. Beizer. "Software Testing Techniques." Thomson Computer Press, 2nd Edition, 1990.
5. B. Beizer. "Black-Box Testing." John Wiley & Sons, 1995.
6. R.V. Binder. "Testing Object-Oriented Systems: Models, Patterns, and Tools." Addison-Wesley, 2000.
7. R.V. Binder. "The FREE Approach to Testing Object-Oriented Software: An Overview." Report of RSBC, 1994. Available on the Web: www.rsbc.com.
8. R.V. Binder. "Design for Testability in Object-Oriented Systems." Communications of the ACM, 37(9), September 1994, pp. 87-101.
9. R.V. Binder. "Testing for Reuse: Libraries and Frameworks." Journal of Object-Oriented Programming (JOOP), 6(6), August 1996.
10. M.E. Delamaro. "Interface Mutation: An Adequacy Criterion for Integration Testing." PhD Thesis, Physics Institute, São Paulo State University at São Carlos, 1997. (in Portuguese)
11. M.E. Delamaro, J.C. Maldonado, A.M.R. Vincenzi. "Proteum/IM 2.0: An Integrated Mutation Testing Environment." In Proc. of Mutation 2000 Symposium, USA, October 2000.
12. R.A. DeMillo, R.J. Lipton, F.G. Sayward. "Hints on Test Data Selection: Help for the Practitioner Programmer." IEEE Computer, 11(4), 1978, pp. 34-43.
13. R.K. Doong, P. Frankl. "The ASTOOT Approach to Testing Object-Oriented Programs." ACM Transactions on Software Engineering and Methodology, 3(2), April 1994, pp. 101-130.
14. S.C.P.F. Fabbri, P.C. Masiero, M.E. Delamaro. "Mutation Analysis Testing for Finite State Machines." International Symposium on Software Reliability Engineering (ISSRE'94), USA, November 1994, pp. 220-229.
15. S.C.P.F. Fabbri, J.C. Maldonado, P.C. Masiero, M.E. Delamaro. "Mutation Analysis Applied to Validate Specifications Based on Petri Nets." In Proc. 8th IFIP Conference on Formal Description Techniques for Distributed Systems and Communication Protocols (FORTE'95), Canada, October 1995, pp. 329-337.
16. S.C.P.F. Fabbri, J.C. Maldonado, T. Sugeta, P.C. Masiero. "Mutation Testing Applied to Validate Specifications Based on Statecharts." In Proc. 9th International Symposium on Software Reliability Engineering (ISSRE'99), USA, November 1999, pp. 210-219.
17. X. Franch. "The Convenience for a Notation to Express Non-Functional Characteristics of Software Components." In 1st Workshop on Component-Based Systems, Switzerland, 1997. Available on the Web: www.cs.iastate.edu/~leavens/F&BS/FoCBS.html.
18. R.S. Freedman. "Testability of Software Components." IEEE Transactions on Software Engineering, 17(6), June 1991, pp. 553-564.
19. J. Gao. "Testing Component-Based Software." Proc. of STARWest, San Jose, USA, 1999. Available on the Web: www.enrr.sisu/cdu/uaoicrrv/rcp(~rdsl~r-tcst.htni.
20. M.-J. Harrold, J. McGregor, K. Fitzpatrick. "Incremental Testing of Object-Oriented Class Structures." In Proc. 14th IEEE International Conference on Software Engineering (ICSE-14), 1992, pp. 68-80.
21. D. Hoffman. "Hardware Testing and Software Ics." Proc. Northwest Software Quality Conference, USA, September 1989, pp. 234-244.
22. D. Hoffman, P. Strooper. "The Testgraph Methodology." Journal of Object-Oriented Programming (JOOP), November-December 1995, pp. 35-41.
23. IEEE Standard Glossary of Software Engineering Terminology ANSYIEEE 610.12, 1990, IEEE Press.
24. D. Kung, J. Gao, P. Hsia, Y. Toyoshima, C. Chen, Y.S. Kim, Y.K. Song. "Developing an Object-Oriented Software Testing and Maintenance Environment." Communications of the ACM, 38(10), October 1995, pp. 75-87.
25. B. Meyer. Object-Oriented Software Construction. Prentice Hall, 1988.
26. B. Meyer. "Applying Design by Contract." IEEE Computer, October 1992, pp. 40-51.
27. G.J. Myers. "The Art of Software Testing." John Wiley & Sons, 1978.
28. R.S. Pressman. Software Engineering: A Practitioner's Approach. McGraw-Hill, 1997, 4th Edition.
29. S. Siegel. "Object-Oriented Software Testing: A Hierarchical Approach." John Wiley & Sons, 1996.
30. S.R.S. Souza, J.C. Maldonado, S.C.P. F. Fabbri, W. Lopes de Souza. "Mutation Testing Applied to Estelle Specifications." In Proc. of 33rd Hawaii International Conference on System Science, mini-track on Distributed Systems Testing, Hawaii, January 2000.
31. C. Szyperski. "Component Software: Beyond OO Programming." Addison-Wesley, 1998.
32. C.M. Toyota, E. Martins. "A Methodology for the Construction of Self-Testing Classes." In IX International Conference on Software Technology - Software Quality, Curitiba, Brazil, June 1998. (in Portuguese)
33. C.M. Toyota. "Improving Class Testability Using the Self-Testing Concept." Master Dissertation, Institute of Computing, State University of Campinas, June 2000. (in Portuguese)
34. Y. Traon, D. Deveaux, J.-M. Jézéquel. "Self-Testable Components: From Pragmatic Tests to Design-for-Testability Methodology." In Proc. 1st Workshop on Component-Based Systems, Switzerland, 1997. URL: www.cs.iastate.edu/~leavens/FoCBS/F&BS.html.
35. A.M.R. Vincenzi, J.C. Maldonado, E.F. Barbosa, M.E. Delamaro. "Essential Interface Operators: A Case Study." In XIII Brazilian Symposium on Software Engineering, Santa Catarina, Brazil, October 1999, pp. 373-391.
36. J.M. Voas, K.W. Miller. "Software Testability: The New Verification." IEEE Software, March 1995, pp. 17-28.
37. J.M. Voas, M. Schmid, M. Schatz. "A Testability-Based Assertion Placement Tool for Object-Oriented Software." Technical Report - Information Technology Laboratory, NIST CGR 98-735, January 1998. Available on the Web: http://www.rstcorp.com.
38. Y. Wang, G. King, I. Court, M. Ross. "On Testable Object-Oriented Programming." ACM Software Engineering Notes, 22(4), July 1997, pp. 84-90.
39. Y. Wang, G. King, H. Wickburg. "A Method for Built-in Tests in Component-Based Software Maintenance." Proc. 3rd European Conference on Software Maintenance and Reengineering (CSMR), Netherlands, March 1999, pp. 186-189.
40. E.J. Weyuker. "Axiomatizing Software Adequacy." IEEE Transactions on Software Engineering SE-12, 12, December 1986, pp. 1128-1138.
41. E.J. Weyuker. "Testing Component-Based Software: A Cautionary Tale." IEEE Software, September-October 1998, pp. 54-59.
42. R.L. Yanagawa. "Evaluating the Approach for Construction and Use of Self-Testable Components." Master Dissertation, Institute of Computing, State University of Campinas, December 2000. (in Portuguese)

---

This revised version aims to enhance clarity, coherence, and professionalism, while maintaining the original content and intent.