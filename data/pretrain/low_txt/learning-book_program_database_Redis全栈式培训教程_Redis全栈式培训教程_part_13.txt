### 10.5 Redis命令之String类

- **当且仅当所有给定的key都不存在时**：
  - `SETNX key value`：只有在key不存在时，设置key的值为value。

- **获取指定key的值**：
  - `GET key`：返回指定key的值。
  - `GETRANGE key start end`：返回key中字符串值从start到end的子字符串。
  - `GETBIT key offset`：获取key所储存的字符串值在指定偏移量上的位（bit）。

- **修改key的值**：
  - `SETRANGE key offset value`：用value参数覆盖从偏移量offset开始的字符串值。
  - `APPEND key value`：将value追加到key的现有值后面。
  - `STRLEN key`：返回key所储存的字符串值的长度。

- **原子性操作**：
  - `INCR key`：将key中的整数值增加1。
  - `DECR key`：将key中的整数值减少1。
  - `INCRBY key increment`：将key中的整数值增加指定的增量。
  - `DECRBY key decrement`：将key中的整数值减少指定的减量。
  - `INCRBYFLOAT key increment`：将key中的浮点数值增加指定的浮点增量。

- **其他操作**：
  - `GETSET key value`：将key的值设为value，并返回key的旧值。
  - `GETDEL key`：获取并删除key的值。
  - `SETEX key seconds value`：将值value关联到key，并设定过期时间（以秒为单位）。
  - `PSETEX key milliseconds value`：与SETEX类似，但过期时间以毫秒为单位。
  - `MSET key value [key value ...]`：同时设置一个或多个key-value对。
  - `MGET key1 [key2 ...]`：获取所有给定key的值。
  - `GETEX key`：获取key的值，并设置过期时间。

---

### 10.6 Redis命令之Hash类

- **设置和获取字段值**：
  - `HSET key field value`：将哈希表key中的字段field的值设为value。
  - `HGET key field`：获取存储在哈希表中指定字段的值。
  - `HMGET key field1 [field2 ...]`：获取所有给定字段的值。
  - `HMSET key field1 value1 [field2 value2 ...]`：同时将多个field-value对设置到哈希表key中。
  - `HGETALL key`：获取哈希表中指定key的所有字段和值。
  - `HVALS key`：获取哈希表中所有值。
  - `HKEYS key`：获取哈希表中的所有字段。

- **原子性操作**：
  - `HINCRBY key field increment`：为哈希表key中的指定字段的整数值加上增量。
  - `HINCRBYFLOAT key field increment`：为哈希表key中的指定字段的浮点数值加上增量。

- **其他操作**：
  - `HDEL key field1 [field2 ...]`：删除一个或多个哈希表字段。
  - `HEXISTS key field`：检查哈希表key中是否存在指定的字段。
  - `HSETNX key field value`：只有在字段field不存在时，设置哈希表字段的值。
  - `HLEN key`：获取哈希表中字段的数量。
  - `HSCAN key cursor [MATCH pattern] [COUNT count]`：迭代哈希表中的键值对。

---

### 10.7 Redis命令之List类

- **插入元素**：
  - `LPUSH key value1 [value2 ...]`：将一个或多个值插入到列表头部。
  - `RPUSH key value1 [value2 ...]`：在列表尾部添加一个或多个值。
  - `LPUSHX key value`：将一个值插入到已存在的列表头部。
  - `RPUSHX key value`：为已存在的列表添加值。

- **移除元素**：
  - `LPOP key`：移出并获取列表的第一个元素。
  - `RPOP key`：移除列表的最后一个元素，并返回该元素。
  - `LREM key count value`：移除列表中等于value的count个元素。
  - `LTRIM key start stop`：修剪列表，只保留指定区间内的元素。

- **获取元素**：
  - `LRANGE key start stop`：获取列表指定范围内的元素。
  - `LINDEX key index`：通过索引获取列表中的元素。
  - `LLEN key`：获取列表的长度。

- **阻塞操作**：
  - `BLPOP key1 [key2 ...] timeout`：移出并获取列表的第一个元素，如果列表没有元素会阻塞直到超时或发现可弹出元素。
  - `BRPOP key1 [key2 ...] timeout`：移出并获取列表的最后一个元素，如果列表没有元素会阻塞直到超时或发现可弹出元素。
  - `BRPOPLPUSH source destination timeout`：从source列表中弹出一个值，插入到destination列表中，并返回该值。如果source列表为空，则阻塞直到超时或发现可弹出元素。
  - `RPOPLPUSH source destination`：移除source列表的最后一个元素，并将其插入到destination列表中。

- **其他操作**：
  - `LINSERT key BEFORE|AFTER pivot value`：在列表的pivot元素前或后插入value。
  - `LSET key index value`：通过索引设置列表元素的值。

---

### 10.8 Redis命令之Set类

- **集合操作**：
  - `SADD key member1 [member2 ...]`：向集合添加一个或多个成员。
  - `SREM key member1 [member2 ...]`：移除集合中的一个或多个成员。
  - `SMEMBERS key`：返回集合中的所有成员。
  - `SCARD key`：获取集合的成员数。
  - `SISMEMBER key member`：判断member是否是集合key的成员。
  - `SMOVE source destination member`：将member从source集合移动到destination集合。
  - `SPOP key`：移除并返回集合中的一个随机元素。
  - `SRANDMEMBER key [count]`：返回集合中的一个或多个随机成员。

- **集合运算**：
  - `SINTER key1 [key2 ...]`：返回给定所有集合的交集。
  - `SUNION key1 [key2 ...]`：返回给定所有集合的并集。
  - `SDIFF key1 [key2 ...]`：返回第一个集合与其他集合之间的差集。

- **存储结果**：
  - `SINTERSTORE destination key1 [key2 ...]`：返回给定所有集合的交集，并存储在destination集合中。
  - `SUNIONSTORE destination key1 [key2 ...]`：返回给定所有集合的并集，并存储在destination集合中。
  - `SDIFFSTORE destination key1 [key2 ...]`：返回给定所有集合的差集，并存储在destination集合中。

- **迭代**：
  - `SSCAN key cursor [MATCH pattern] [COUNT count]`：迭代集合中的元素。

---

### 10.9 Redis命令之SortedSet类

- **添加和更新成员**：
  - `ZADD key score1 member1 [score2 member2 ...]`：向有序集合添加一个或多个成员，或者更新已存在成员的分数。

- **移除成员**：
  - `ZREM key member [member ...]`：移除有序集合中的一个或多个成员。
  - `ZREMRANGEBYRANK key start stop`：移除有序集合中给定排名区间的成员。
  - `ZREMRANGEBYSCORE key min max`：移除有序集合中给定分数区间的成员。
  - `ZREMRANGEBYLEX key min max`：移除有序集合中给定字典区间的成员。

- **获取成员**：
  - `ZRANGE key start stop [WITHSCORES]`：通过索引区间返回有序集合中的成员。
  - `ZREVRANGE key start stop [WITHSCORES]`：通过索引区间返回有序集合中的成员，按分数从高到低排序。
  - `ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]`：通过分数区间返回有序集合中的成员。
  - `ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]`：通过分数区间返回有序集合中的成员，按分数从高到低排序。
  - `ZRANGEBYLEX key min max [LIMIT offset count]`：通过字典区间返回有序集合中的成员。
  - `ZREVRANGEBYLEX key max min [LIMIT offset count]`：通过字典区间返回有序集合中的成员，按字典顺序从高到低排序。

- **计数**：
  - `ZCARD key`：获取有序集合的成员数。
  - `ZCOUNT key min max`：计算指定分数区间的成员数。
  - `ZLEXCOUNT key min max`：计算指定字典区间的成员数。

- **其他操作**：
  - `ZINCRBY key increment member`：对指定成员的分数加上增量。
  - `ZRANK key member`：返回有序集合中指定成员的索引。
  - `ZREVRANK key member`：返回有序集合中指定成员的反向索引。

---

### 10.10 Redis命令之Stream类

- **消息操作**：
  - `XADD key ID field value [field value ...]`：向流中添加一条消息。
  - `XREAD [COUNT count] [BLOCK milliseconds] STREAMS key1 ID1 [key2 ID2 ...]`：读取流中的消息。
  - `XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key1 ID1 [key2 ID2 ...]`：读取消费者组中的消息。
  - `XACK key group ID [ID ...]`：将消息标记为已处理。
  - `XCLAIM key group consumer min-idle-time ID [ID ...] [IDLE idle-time] [TIME time-ms] [RETRYCOUNT count] [FORCE] [JUSTID]`：转移消息的归属权。
  - `XPENDING key group [start end count] [consumer]`：显示待处理消息的相关信息。

- **流管理**：
  - `XDEL key ID [ID ...]`：删除流中的消息。
  - `XLEN key`：获取流包含的消息数量。
  - `XRANGE key start end [COUNT count]`：获取流中的消息列表。
  - `XREVRANGE key end start [COUNT count]`：反向获取流中的消息列表。
  - `XTRIM key MAXLEN [~] len [MINID id]`：对流进行修剪，限制长度。
  - `XGROUP CREATE key group ID [MKSTREAM] [ENTRIES read | $]`：创建消费者组。
  - `XGROUP SETID key group ID`：为消费者组设置新的最后递送消息ID。
  - `XGROUP DESTROY key group`：删除消费者组。
  - `XGROUP DELCONSUMER key group consumer`：删除消费者。

- **信息查询**：
  - `XINFO key`：查看流和消费者组的相关信息。
  - `XINFO GROUPS key`：打印消费者组的信息。
  - `XINFO CONSUMERS key group`：打印消费者组中的消费者信息。

---

### 10.11 Redis命令之Pub/Sub类

- **订阅和发布**：
  - `SUBSCRIBE channel [channel ...]`：订阅一个或多个频道。
  - `UNSUBSCRIBE [channel [channel ...]]`：退订一个或多个频道。
  - `PSUBSCRIBE pattern [pattern ...]`：订阅一个或多个符合给定模式的频道。
  - `PUNSUBSCRIBE [pattern [pattern ...]]`：退订一个或多个符合给定模式的频道。
  - `PUBLISH channel message`：将消息发送到指定的频道。

- **状态查询**：
  - `PUBSUB subcommand [argument [argument ...]]`：查看订阅与发布系统状态。

---

### 10.12 Redis命令之Script/Fun类

- **脚本执行**：
  - `EVAL script numkeys key [key ...] arg [arg ...]`：执行Lua脚本。
  - `EVALSHA sha1 numkeys key [key ...] arg [arg ...]`：执行缓存中的Lua脚本。

- **脚本管理**：
  - `SCRIPT LOAD script`：将脚本添加到脚本缓存中。
  - `SCRIPT EXISTS script [script ...]`：检查脚本是否已在缓存中。
  - `SCRIPT FLUSH`：清空脚本缓存。
  - `SCRIPT KILL`：杀死当前正在运行的Lua脚本。

---

### 10.13 Redis命令之Server类

- **数据持久化**：
  - `SAVE`：同步保存数据到硬盘。
  - `BGSAVE`：在后台异步保存数据到硬盘。
  - `BGREWRITEAOF`：异步重写AOF文件。

- **客户端管理**：
  - `CLIENT LIST`：获取连接到服务器的客户端连接列表。
  - `CLIENT GETNAME`：获取当前连接的名称。
  - `CLIENT SETNAME connection-name`：设置当前连接的名称。
  - `CLIENT KILL [ip:port] [ID client-id]`：关闭客户端连接。
  - `CLIENT PAUSE timeout`：在指定时间内暂停客户端命令处理。

- **服务器信息**：
  - `INFO [section]`：获取Redis服务器的各种信息和统计数值。
  - `LASTSAVE`：返回最近一次成功将数据保存到磁盘的时间戳。
  - `MONITOR`：实时打印出Redis服务器接收到的命令。
  - `SLOWLOG subcommand [argument]`：管理慢日志。
  - `ROLE`：返回主从实例所属的角色。

- **配置管理**：
  - `CONFIG GET parameter`：获取指定配置参数的值。
  - `CONFIG SET parameter value`：设置指定配置参数的值。
  - `CONFIG REWRITE`：将内存中的配置回写至配置文件。
  - `CONFIG RESETSTAT`：重置某些统计数据。

- **集群管理**：
  - `CLUSTER INFO`：获取集群的基本信息。
  - `CLUSTER NODES`：获取节点关系。
  - `CLUSTER SLOTS`：获取槽位分配信息。
  - `CLUSTER MEET ip port`：加入一个新的节点到集群。
  - `CLUSTER FORGET node-id`：从集群中移除一个节点。
  - `CLUSTER ADDSLOTS slot [slot ...]`：分配槽位到当前节点。
  - `CLUSTER DELSLOTS slot [slot ...]`：从当前节点删除槽位。
  - `CLUSTER FAILOVER`：手动触发故障转移。
  - `CLUSTER SAVECONFIG`：将集群配置保存到磁盘。
  - `CLUSTER RESET [SOFT|HARD]`：重置集群配置。
  - `CLUSTER REPLICAS node-id`：设置副本节点。
  - `CLUSTER SLAVES node-id`：获取指定节点的副本列表。
  - `CLUSTER MYID`：获取当前节点的ID。
  - `CLUSTER COUNT-FAILUREREPORTS node-id`：获取节点失败报告的数量。
  - `CLUSTER KEYSLOT key`：获取key所属的槽位。
  - `CLUSTER GETKEYSINSLOT slot count`：获取指定槽位中的key。
  - `CLUSTER SETSLOT slot IMPORTING|MIGRATING|STABLE|NODE node-id`：设置槽位的状态。
  - `CLUSTER SETSLOT slot NODE node-id`：将槽位分配给指定节点。

---

春风阁讲堂出品