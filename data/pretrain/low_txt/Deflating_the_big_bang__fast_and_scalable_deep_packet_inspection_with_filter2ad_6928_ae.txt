### 5. Comparative Evaluation

For comparison, we evaluated two recently proposed techniques: multiple DFAs (mDFAs) [37] and D2FAs [20], which were briefly described in Section 2.

#### Implementation and Evaluation of mDFAs
We implemented the mDFA algorithm and tested it with memory ceilings ranging from 4K to 512K total states. This produced groups of combined automata for each setting. During runtime, we modified our matching code to maintain multiple state pointers for mDFAs. 

#### Evaluation of D2FAs
For the D2FA evaluation, we applied the D2FA edge compression algorithm to each combined DFA in each mDFA group. The D2FA proposal requires custom hardware to hash an input symbol to the correct compressed transition entry. To adapt to a software-based environment, we used a simple bitmap-based structure to identify the next transition. This approach simulates the hardware assist with only a minor increase in memory usage, making the hash function as fast as possible.

#### Execution Time Tests
Execution time tests were performed on 10 GB traces captured on the link between a university campus and a departmental network at varying times. All experiments were conducted on a 3.0 GHz Pentium 4 Linux workstation. Runtime measurements were collected using cycle-accurate performance counters and are reported as average cycles per payload byte. Each automaton was applied only to packets belonging to its respective protocol.

### 6. Space-Time Comparisons

Figure 9 provides space-time comparisons for each test set. In all plots, the x-axis (processing time) and y-axis (memory usage) increase on a logarithmic scale. The dashed vertical line indicates the runtime for the largest subset of DFAs that could be combined and fit into memory.

- **mDFAs**: The trade-offs between memory usage and processing time are shown by a curve.
- **D2FAs**: These build on mDFAs and follow a similar curve but with a reduced memory footprint.
- **XFAs**: We plot the combined automata along with the cumulative effects of each optimization, moving towards the lower left corner. Optimization 1 shows the most significant improvement, reducing both memory and runtime by up to an order of magnitude. The second optimization also achieves significant reductions, although these are largely subsumed by the first. Optimization 3 reduces memory but has a negligible effect on performance.

### 6.3 Per-Flow State

Table 3 depicts the per-flow state for mDFAs/D2FAs at various memory ceilings and for XFAs. mDFAs require a distinct current state pointer for each automaton in a group, and D2FAs have the same requirements. We assume 2-byte state pointers for 8K and 64K ceilings and 3-byte pointers for 512K ceilings. XFA per-flow state contains a state pointer along with all the variables that must be maintained. This is quantified by adding a 2-byte state pointer to each of the optimized variable memory entries (column 9) in Table 1. Reductions in per-flow state for XFAs are a direct result of optimization 2, reducing per-flow state by up to a factor of six. In Table 3, per-flow state for XFAs is comparable to mDFAs in all cases, and for large test sets, XFA state can be much smaller, depending on the mDFA memory ceiling.

### 7. Migrating to Hardware

We present a preliminary chip design that can perform signature matching at 10 Gbps using XFAs with up to 24,576 states. The chip does not perform reassembly or packet classification and uses techniques for compressing the transition tables. It has 8 packet processing pipelines, each consisting of three loosely coupled stages: a DFA engine, a program lookup engine, and a processing element. We expect a clock speed close to 500 MHz.

- **DFA Engines**: Consume one byte of input every two cycles and use a shared multiport SRAM to store transition tables. Each of the 220 entries of this SRAM stores a 15-bit state identifier. The DFA engines implement a table compression algorithm based on existing literature [4, 20, 21].
- **Program Lookup Engines**: Receive from their DFA engine a sequence of states visited and produce a sequence of programs to be executed. Since most states have no programs associated with them, the output includes only the addresses of non-empty programs, paired with the offset in the input to which they correspond.
- **Processing Elements**: Execute the programs associated with the traversed states. These programs are stored in a local 64KB instruction memory. For states whose programs are identical, a single copy needs to be stored. Each processing element can handle a subset of the protocols we have signatures for.

### 8. Conclusion and Future Work

The Big Bang Theory [13] asserts that a compact, highly compressed mass exploded into a mostly empty universe, leaving scattered pockets of organized matter. This is not too dissimilar from combined DFAs, which experience explosive growth yet are full of redundancy. In this work, our running hypothesis is that the systematic use of auxiliary variables and optimizations provides a practical mechanism for deflating explosive DFAs.

In this paper, we presented a formal characterization of state-space explosion and showed how auxiliary variables can be used to eliminate it. We introduced XFAs, a formal model that extends standard DFAs with auxiliary variables and instructions for manipulating them. We defined optimizations over this model that significantly improve performance and decrease per-flow state.

Many research problems remain open. Our treatment of state-space explosion is preliminary, and stronger results may allow us to better predict and control it. A better understanding of the interplay between protocol parsing and signature matching may yield simpler automata and better performance. Even with our current prototype, measurements show large improvements over previous solutions. We are optimistic that XFAs will yield a fast, scalable mechanism for deep packet inspection.

### Acknowledgments

This work is sponsored by NSF grants 0546585 and 0716538 and by a gift from the Cisco University Research Program Fund at Silicon Valley Community Foundation. We thank Karu Sankaralingam, George Varghese, and the anonymous reviewers for suggestions that improved this paper.

### References

[1] A. V. Aho and M. Corasick. Efficient string matching: An aid to bibliographic search. In Communications of the ACM, June 1975.

[2] T. Ball and S. Rajamani. The SLAM project: Debugging system software via static analysis. January 2002.

[3] M. Becchi and S. Cadambi. Memory-efficient regular expression search using state merging. In IEEE Infocom 2007.

[4] M. Becchi and P. Crowley. An improved algorithm to accelerate regular expression evaluation. In ANCS 2007.

[5] B. Brodie, R., and D. Taylor. A scalable architecture for high-throughput regular-expression pattern matching. SIGARCH Comput. Archit. News, 34(2):191–202, 2006.

[6] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In IEEE Symposium on Security and Privacy, May 2006.

[7] C. R. Clark and D. E. Schimmel. Scalable pattern matching for high-speed networks. In IEEE FCCM, April 2004.

[8] E. M. Clarke, O. Grumberg, and D. Peled. Model Checking. The MIT Press, 1999.

[9] S. Crosby and D. Wallach. Denial of service via algorithmic complexity attacks. In Usenix Security, August 2003.

[10] S. Dharmapurikar and J. W. Lockwood. Fast and scalable pattern matching for network intrusion detection systems. IEEE Journal on Selected Areas in Comm., 24(10):1781–1792, 2006.

[11] The Guardian. Trouble on the line. http://technology.guardian.co.uk/weekly/story/0,,1747343,00.html, 2006.

[12] M. Handley, V. Paxson, and C. Kreibich. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Usenix Security, August 2001.

[13] S. W. Hawking. A brief history of time. From the Big Bang to Black Holes. Bantam Book, 1988.

[14] John L. Hennessy and David A. Patterson. Computer Architecture: A Quantitative Approach, 2nd Edition. Morgan Kaufmann, 1996.

[15] J. Hopcroft, R. Motwani, and J. Ullman. Introduction to Automata Theory, Languages, and Computation. Addison Wesley, 2006.

[16] Myles Jordan. Dealing with metamorphism. Virus Bulletin Weekly, 2002.

[17] C. Kachris and S. Vassiliadis. Design of a web switch in a reconfigurable platform. In ANCS 2006.

[18] P. Kapustka. Vonage complaining of VoIP blocking. http://www.networkcomputing.com/channels/networkinfrastructure/60400413, 2005.

[19] S. Kumar, B. Chandrasekaran, J. Turner, and G. Varghese. Curing regular expressions matching algorithms from insomnia, amnesia, and acalculia. In ANCS 2007, pages 155–164.

[20] S. Kumar, S. Dharmapurikar, F. Yu, P. Crowley, and J. Turner. Algorithms to accelerate multiple regular expressions matching for deep packet inspection. In ACM SIGCOMM, September 2006.

[21] S. Kumar, J. Turner, and J. Williams. Advanced algorithms for fast and scalable deep packet inspection. In ANCS 2006, pages 81–92.

[22] R. Liu, N. Huang, C. Chen, and C. Kao. A fast string-matching algorithm for network processor-based intrusion detection system. Trans. on Embedded Computing Sys., 3(3):614–633, 2004.

[23] H. McGhan. Niagara 2 opens the floodgates. In Microprocessor Report, November 2006.

[24] S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann, 1997.

[25] M. Neider. Deep packet inspection: A service provider’s solution for secure VoIP. VoIP Magazine, Oct 2005.

[26] V. Paxson. Bro: a system for detecting network intruders in real-time. In Computer Networks, volume 31, pages 2435–2463, 1999.

[27] T. Ptacek and T. Newsham. Insertion, evasion and denial of service: Eluding network intrusion detection. In Secure Networks, Inc., January 1998.

[28] M. Roesch. Snort - lightweight intrusion detection for networks. In 13th Systems Administration Conference. USENIX, 1999.

[29] U. Shankar and Vern Paxson. Active mapping: Resisting NIDS evasion without altering traffic. In IEEE Symp. on Security and Privacy, May 2003.

[30] R. Smith, C. Estan, and S. Jha. Backtracking algorithmic complexity attacks against a NIDS. In ACSAC 2006, pages 89–98.

[31] R. Smith, C. Estan, and S. Jha. XFA: Faster signature matching with extended automata. In IEEE Symposium on Security and Privacy, May 2008.

[32] R. Sommer and V. Paxson. Enhancing byte-level network intrusion detection signatures with context. In ACM CCS, Oct. 2003.

[33] I. Sourdis and D. Pnevmatikatos. Fast, large-scale string match for a 10Gbps FPGA-based network intrusion detection system. In Int. Conf. on Field Programmable Logic and Applications, sep. 2003.

[34] L. Tan and T. Sherwood. A high throughput string matching architecture for intrusion detection and prevention. In ISCA, June 2005.

[35] N. Tuck, T. Sherwood, B. Calder, and G. Varghese. Deterministic memory-efficient string matching algorithms for intrusion detection. In IEEE INFOCOM 2004, pages 333–340.

[36] H. J. Wang, C. Guo, D. Simon, and A. Zugenmaier. Shield: Vulnerability-driven network filters for preventing known vulnerability exploits. In ACM SIGCOMM, August 2004.

[37] F. Yu, Z. Chen, Y. Diao, T. V. Lakshman, and R. H. Katz. Fast and memory-efficient regular expression matching for deep packet inspection. In ANCS 2006.