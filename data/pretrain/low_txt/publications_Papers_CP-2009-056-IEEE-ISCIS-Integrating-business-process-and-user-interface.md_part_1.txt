### Integrating Business Process and User Interface Models Using a Model-Driven Approach

**Authors:**
- Renata Dividino, ISWeb Research Group, University of Koblenz-Landau
- Veli Bicer, Forschungszentrum Informatik an der Universit√§t Karlsruhe (TH)
- Konrad Voigt, SAP Research CEC Dresden
- Jorge Cardoso, SAP Research CEC Dresden

**Contact Information:**
- Renata Dividino: [Email]
- Veli Bicer: [Email]
- Konrad Voigt: konrad.voigt@sap.com
- Jorge Cardoso: jorge.cardoso@sap.com

**Abstract:**
Business services are complex entities that encompass various aspects, including business processes and user interfaces. Typically, the modeling of business services results in several correlated models. While it is necessary to keep these models separate to achieve the required levels of abstraction for different aspects, maintaining their consistency and integrity is crucial. This paper presents a model-driven approach to integrate business process and user interface models, ensuring their consistency and integrity. We demonstrate the feasibility of our approach using two models: BPMN for business processes and DIAMODL for user interfaces. A use case involving the EcoCalculator Service (ECS) is provided to illustrate the integration.

**Keywords:**
Service Engineering, User Interface Design, Model-Driven Engineering, Business Process Integration

### 1. Introduction

The Internet of Services introduces new challenges for the research community, particularly in managing the complexity associated with modeling real-world or business services. These services are multifaceted, encompassing business processes, user interfaces, pricing models, legal constraints, knowledge assets, technological infrastructures, and business rules. One effective approach to manage the lifecycle of such services is to distill their core characteristics into formal models and then align and integrate these models. This paper describes how a model-driven approach can be used to maintain the consistency and integrity of business process and user interface models.

### 2. Methodology for Service Engineering (ISE)

#### 2.1 Service Engineering (SE)
Service Engineering (SE) is a structured approach to the design and implementation of services. It provides methodologies to handle the complexity of multiple business actors and their interactions. SE also specifies tools for implementing and deploying services, covering both IT and business perspectives. The ISE methodology, described in this section, addresses the creation of new services using a guiding methodology.

#### 2.2 ISE Methodology
In the context of the TEXO project, the ISE methodology and accompanying workbench for service engineering were implemented. The ISE methodology considers technical, business, and operational perspectives. It uses the Zachman framework and Model-Driven Engineering (MDE) concepts to structure and refine service models. Figure 1 illustrates the ISE framework, which divides services into four main perspectives and five dimensions: service description, workflow, data, people, and rules.

![ISE Matrix](fig1.png)
*Figure 1. ISE Matrix with separation into dimensions and perspectives, corresponding models, and exemplary transformations for UI and business process models.*

### 3. Business Process and User Interface Modeling

#### 3.1 User Interface Design and DIAMODL
A widely accepted principle in UI design methodologies is the separation of concerns regarding the structural, behavioral, and presentational aspects of UIs. In the ISE methodology, structural aspects are included at the scope and business dimensions, behavioral aspects at the logical dimension, and presentation aspects at the technical dimension. Behavioral aspects, which describe the interactive qualities of the UI, are modeled using the DIAMODL notation. DIAMODL offers interactors-with-gates (states-with-transitions) and hierarchical state formalism statecharts to describe UI behavior.

**Core Elements of DIAMODL:**
- **Interactors:** Represent distinct contexts for UI behaviors.
- **Gates:** Determine how to interpret states and model the actions associated with them.
- **Connections:** Directed associations between states that dictate the conditions for shifting from one state to another.
- **Variables:** Used for holding resource (data value) and its contained structure.
- **Computations:** Enable message exchanges among UI components and between a UI component and an interactive system.

**Example:**
Figure 2 shows a simplified DIAMODL model for the ECS example. The user inputs the product ID (PID-value), which is stored in a variable (PDI). When the user clicks the OK button, the PID-value is sent to the system. The country name is specified by the user, and the system calculates the ecological value (EV) and returns it to the user.

![DIAMODL Model for ECS](fig2.png)
*Figure 2. DIAMODL model for the EcoCalculator Service (ECS)*

#### 3.2 Business Service Choreographies and BPMN
Modeling business processes at a high level requires specifying the involved parties and process flow according to the business objectives of the service. The Business Process Modeling Notation (BPMN) is adopted within the ISE methodology to address this need. BPMN provides a standard visual representation to create business process models and abstract the complexity of process-level service design.

**Core Elements of BPMN:**
- **Flow Objects:** Main graphical elements to define the behavior of a process model, including events, activities, and gateways.
- **Connecting Objects:** Used to link flow objects and other elements, such as sequence flow, message flow, and association.
- **Swimlanes:** Elements to represent the boundaries in a process model due to the inter-organizational nature of business processes.
- **Artifacts:** Provide additional information about the process, such as annotations or data objects.

**Example:**
Figure 3 shows the BPMN model for the ECS. The service starts with the PID-value input. The first two activities, Loader (Data Service) and Process Logging, are executed in parallel. The Loader retrieves the bill of material (BOM) based on the PID supplied by the consumer, while the Process Logging activity writes log information. Once these activities are completed, the process checks if the BOM has all subpart information and if a country name is specified for the EV computation. If no information is missing, the EV is computed, and Billing, Payment, Performance Analysis, and Logging activities are executed.

![BPMN Model for ECS](fig3.png)
*Figure 3. BPMN model showing core elements and interactions with UI components*

### 4. Synchronization Requirements for DIAMODL and BPMN

In the context of service engineering, both business process and user interaction contribute to the execution of a service. They need to be synchronized to result in a coherent execution after service deployment. The common action units for both models are activities. In DIAMODL, activities correspond to interactors and computations, while in BPMN, they are tasks or subprocesses. However, BPMN does not explicitly state who performs an activity, leading to a black-box approach where each model assesses the other's activities.

**Synchronization:**
The execution of activities in both models is event-driven. Although the activities lead to accomplishing the overall service goal separately in the business process and UI, their flows need to be aligned. Figure 3 illustrates this alignment using dashed lines between the UI components and business process elements. The UI needs to be aware of the state of the business process to set its behavior, such as switching from one state to another. A declarative technique like QVT (Query, View, and Transformation) is needed to implement model transformations and ensure synchronization.

### 5. Conclusion

This paper presents a model-driven approach to integrate business process and user interface models, ensuring their consistency and integrity. By using BPMN for business processes and DIAMODL for user interfaces, we demonstrate the feasibility of our approach through a use case involving the EcoCalculator Service (ECS). The ISE methodology, combined with MDE, provides a structured and integrated framework for service engineering.

### References
1. OMG. "Business Process Model and Notation (BPMN) Version 2.0." Object Management Group, 2011.
2. Dividino, R., et al. "DIAMODL: A Language for Interactive System Modeling." Proceedings of the International Conference on Web Engineering, 2009.
3. Cardoso, J., et al. "Inter-Enterprise Service Engineering (ISE): A Methodology for the Design and Implementation of Business Services." IEEE Transactions on Services Computing, 2010.
4. Zachman, J. A. "A Framework for Information Systems Architecture." IBM Systems Journal, 1987.
5. Frankel, D. S. "Model-Driven Architecture: Applying MDA to Enterprise Computing." Wiley, 2003.
6. Kruchten, P. "The 4+1 View Model of Architecture." IEEE Software, 1995.
7. Nielsen, J. "Usability Engineering." Morgan Kaufmann, 1993.
8. Shneiderman, B., and Plaisant, C. "Designing the User Interface: Strategies for Effective Human-Computer Interaction." Addison-Wesley, 2010.
9. Dix, A., Finlay, J., Abowd, G. D., and Beale, R. "Human-Computer Interaction." Prentice Hall, 2004.