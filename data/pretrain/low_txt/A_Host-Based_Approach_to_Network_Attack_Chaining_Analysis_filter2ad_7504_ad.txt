### Figure 5: Optimal Exploitation Paths in the Example Network

Figure 5 illustrates the optimal exploitation paths that can be created in the example network. Once the graph stabilizes, the analyst can examine the undesirable access points and identify potential remediation strategies.

Given the significant access achieved due to the Apache vulnerability (bugtraq 5033) on the Web server, this would be a logical starting point for remediation. According to the bugtraq notice, upgrading to a newer version of the Apache software will resolve this issue. Assuming this upgrade is implemented, it will invalidate any direct edges terminating on the Web server and using the Apache Chunk vulnerability, as well as any chained edges dependent on these now-infeasible edges. The affected edges, represented as dashed lines, are shown in Figure 6.

### Figure 6: Effect of Patching the Apache Chunk Vulnerability

This example demonstrates how to compute an access graph using our approach. Through multiple iterations, the network will become more secure. Although our method may not provide a minimal set of changes, it achieves the desired goal of a secure network. Given its polynomial computational cost, our approach is suitable for real-time analysis, making it valuable for system administrators.

### Edge Labeling and Chained Attacks

The edge label captures the chainID field of edge \( e_{ij} \) with host \( h_k \). In this example, the algorithm first selects the host pair where the source being examined is also the destination host corresponding to edge \( e_{dd} \). Since the current level of access for edge \( e_{dd} \) is "none," the algorithm attempts to improve it. The edge gets updated because there exists an indirect path to leverage the access by going through the Web host. 

1. **Database to Web**: The Database gains admin-level access on the Web server via the Chunk (bugtraq 5033) exploit.
2. **Web to Database**: The TNS (bugtraq 4033) exploit is then used to gain admin-level access from the Web server back to the Database. This is captured by labeling edge \( e_{dd} \) with \((D D, d, d, TNS, \text{admin}, 4033, D W)\). As this is a chained attack, the chain flag is no longer empty, and the last edge used in the chain, \( D W \), is marked as the chainID.

Next, the algorithm tries to leverage the access level between the next host pair (Database and File). Using available trust relationships, vulnerabilities, and exploits, the algorithm uses the Database's admin control of the Web server to improve access to the File server. Currently, the Database only has connectivity to the File server. However, by exploiting the trust relationship between the Web and File servers, the Database can elevate its access level to that of a user, using the Web server as an intermediate host. Lines 31-33 cause the corresponding edge \( e_{df} \) to update its label as \((D F, d, f, \text{Trust}, \text{user}, -, D W)\). As this is also a chained attack, the chain flag is not empty, and the chainID is marked with the last edge used in the chain, \( D W \).

Since the access edge between the Database and the Web server is already at the admin level, the algorithm moves to the next host-pair. This process continues until all host pairs have been examined and no further edges can be updated.

### Larger Network Example

To demonstrate that our approach runs efficiently on realistic networks, we tested our tool on a network consisting of 6 subnets (separated by border and internal firewalls) and 87 hosts. The experiment was conducted on an Intel Pentium 4 (2.0 GHz) with 512 MBytes of RAM running Fedora Core 3 (Linux 2.6.9).

In our model, each host corresponds to a node, resulting in 87^2 = 7569 edges in the access graph. Out of these, 2088 edges had an access level higher than mere connectivity. We used the open-source graph visualization program, Graphviz [8], to generate graphs for closer analysis and visualization.

First, the system was initialized with the network's topology and configuration. The `findInitialAccess` and `findMaximalAccess` algorithms were then applied. Our tool read this information from several files:
- Set of host nodes (H)
- Set of trust relationships between hosts (T)
- Set of available network exploits (X)
- Set of vulnerabilities present at each host (V)
- Set of firewall rules (F)

Initialization took 1.527 seconds. The `findInitialAccess` algorithm took 0.107 seconds to establish initial trust relationships between hosts without applying any exploits. The `findMaximalAccess` algorithm took 1.571 seconds to calculate maximal accesses between all hosts using known exploits. Graphviz was then used to generate the access graph for visualization and analysis.

For comparison, a model presented by Sheyner et al. [20] took 5 seconds to execute for a network of 3 hosts but over 2 hours for a network of 5 hosts. Similar scalability issues are encountered by models that construct complete attack graphs [19, 16, 22] and by alert correlation techniques [13, 14].

### Related Work

Various graph-based approaches to modeling network vulnerabilities have been proposed [2, 25, 16, 22, 23, 6]. Swiler et al. [16, 22] developed one of the initial graph-based formalisms for analyzing network vulnerabilities. The requires/provides model of Templeton and Levitt [23] has been widely used to model the role of exploit pre- and post-conditions in chaining exploits together. Ritchey and Ammann [19] proposed using model checkers to generate attack paths for known exploits. Ramakrishnan and Sekar [17] used a model checker to perform related analysis in single-host systems with respect to unknown vulnerabilities.

Jha et al. [10, 9] and Sheyner et al. [20, 21] extended the network vulnerability analysis of Ritchey and Ammann, using model checking to analyze attack graphs on heterogeneous networks. They consider interconnected networks of computers with known vulnerabilities that attackers can combine to attack one or more hosts. If an attack succeeds, their mechanism allows analysts to understand all possible attack scenarios.

Ammann et al. [1] introduced a monotonicity assumption and used it to develop a polynomial algorithm to encode all edges in an attack tree without computing the tree itself. Noel et al. [15] developed an elegant, though still exponential, algorithm to recursively back-substitute exploits with preconditions, resulting in a boolean expression describing the initial conditions leading to a compromise. Various techniques have also been developed [7, 5, 13, 14] to integrate alert correlation methods to build possible attack scenarios.

Most existing methods for generating attack graphs have computational complexities that become exponential as the network size increases. By adopting a penetration tester's worst-case damage perspective, our model's algorithmic complexity is reduced to polynomial, making it scalable for practical, larger networks.

### Conclusions

In this paper, we developed a host-centric approach to analyzing network vulnerabilities. Our approach complements the attack graph approach and is computationally feasible for large networks, albeit at the expense of not explicitly identifying every possible attack sequence. Instead, we argue that penetration testers focus on specific degrees of compromise on a given host, which is a natural approach for system analysts. Our model can be computed and analyzed in real-time, providing near real-time early warning of potential attacks, identifying network policy rule violations, and conducting impact analyses of different permissions or credentials, making it a viable solution for industry.

### Acknowledgments

This work was supported in part by the National Science Foundation under grant CCR–0208848. The work of Joseph Pamula was partially supported by the Air Force Research Laboratory, Rome under the grant F30602–00–2–0512 and by the Army Research Office under the grants DAAD19–03–1–0257 and W911NF–05–1–0374.

### References

[1] P. Ammann, D. Wijesekera, and S. Kaushik. Scalable graph-based vulnerability analysis. In Proceedings CCS 2002: 9th ACM Conference on Computer and Communications Security, pages 217–224, Washington, DC, November 2002.

[2] R. Baldwin. Kuang: Rule based security checking. Technical report, MIT Lab for Computer Science, Programming Systems Research Group, May 1994.

[3] Bugtraq. The security vulnerabilities mailing list. http://www.securityfocus.com.

[4] T. Cormen, C. Leiserson, and R. Rivest. Introduction to Algorithms. McGraw-Hill Book Company and The MIT Press, 1998.

[5] F. Cuppens and A. Miege. Alert correlation in a cooperative intrusion detection framework. In Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P ’02), May 2002.

[6] J. Dawkins, C. Campbell, and J. Hale. Modeling network attacks: Extending the attack tree paradigm. In Workshop on Statistical and Machine Learning Techniques in Computer Intrusion Detection, Johns Hopkins University, June 2002. Center for Information Security, University of Tulsa.

[7] H. Debar and A. Wespi. Aggregation and correlation of intrusion detection alerts. In Proceedings of Recent Advances in Intrusion Detection (RAID 2001), pages 85–103, 2000.

[8] Graphviz. Graph visualization software. http://www.graphviz.org.

[9] S. Jha, O. Sheyner, and J. Wing. Minimization and reliability analysis of attack graphs. Technical Report CMU-CS-02-109, School of Computer Science, Carnegie Mellon University, February 2002.

[10] S. Jha, O. Sheyner, and J. Wing. Two formal analyses of attack graphs. In Proceedings of the 2002 Computer Security Foundations Workshop, pages 49–63, Nova Scotia, June 2002.

[11] Nessus. Open source vulnerability scanner project. http://www.nessus.org.

[12] NetMap. Network modeling, discovery, and analysis. http://www.cs.ucsb.edu/∼rsg/NetMap/index.html.

[13] P. Ning, Y. Cui, and D. Reeves. Constructing attack scenarios through correlation of intrusion alerts. In Proceedings of the 9th ACM Conference on Computer & Communications Security, pages 245–254, Washington D.C., November 2002.

[14] P. Ning, D. Xu, C. Healey, and R. S. Amant. Building attack scenarios through integration of complementary alert correlation methods. In Proceedings of the 11th Annual Network and Distributed System Security Symposium (NDSS ’04), pages 97–111, February 2004.

[15] S. Noel, S. Jajodia, B. O’Berry, and M. Jacobs. Efficient minimum-cost network hardening via exploit dependency graphs. In Proceedings ACSAC 2003: 19th Annual Computer Security Applications Conference, pages 86–95, Las Vegas, December 2003.

[16] C. Phillips and L. Swiler. A graph-based system for network-vulnerability analysis. In Proceedings of the New Security Paradigms Workshop, pages 71–79, Charlottesville, VA, 1998.

[17] C. Ramakrishnan and R. Sekar. Model-based vulnerability analysis of computer systems. In Proceedings of the 2nd International Workshop on Verification, Model Checking and Abstract Interpretation, September 1998.

[18] Retina. Network security scanner. http://www.eeye.com/html/products/Retina/.

[19] R. W. Ritchey and P. Ammann. Using model checking to analyze network vulnerabilities. In Proceedings of the 2000 IEEE Symposium on Security and Privacy (Oakland 2000), pages 156–165, Oakland, CA, May 2000.

[20] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. Wing. Automated generation and analysis of attack graphs. In Proceedings of the 2002 IEEE Symposium on Security and Privacy (Oakland 2002), pages 254–265, Oakland, CA, May 2002.

[21] O. Sheyner and J. Wing. Tools for generating and analyzing attack graphs. In To appear in Proceedings of International Symposium on Formal Methods for Components and Objects, Lecture Notes in Computer Science, 2005.

[22] L. Swiler, C. Phillips, D. Ellis, and S. Chakerian. Computer-attack graph generation tool. In Proceedings DISCEX ’01: DARPA Information Survivability Conference & Exposition II, pages 307–321, June 2001.

[23] S. Templeton and K. Levitt. A requires/provides model for computer attacks. In Proceedings of the New Security Paradigms Workshop, Cork, Ireland, September 2000. http://seclab.cs.ucdavis.edu/papers/NP2000-rev.pdf.

[24] G. Vigna, F. Valeur, J. Zhou, and R. Kremmerer. Composable tools for network discovery and security analysis. In Proceedings ACSAC 2002: 18th Annual Computer Security Applications Conference, Las Vegas, December 2002.

[25] D. Zerkle and K. Levitt. Netkuang - A multi-host configuration vulnerability checker. In Proceedings of the 6th USENIX Unix Security Symposium, San Jose, CA, 1996.