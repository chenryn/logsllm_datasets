### Optimized Text

**Cost of the WRK Protocol:**
The most significant cost associated with the WRK protocol is incurred during the preparation phase, denoted as \( F_{\text{pre}} \), which generates authenticated multiplicative triples. Wang et al. proposed an improved preparation protocol for \( F_{\text{pre}} \) that employs a batched style of cut-and-choose, thereby achieving asymptotic efficiency similar to LEGO protocols. While the original WRK paper focused on designing authenticated garbling and proving its security, our work provides techniques to scale up their scheme to handle arbitrary computations with no preparation delay and limited storage, independent of the circuit size.

**Parameter Search for Pool-WRK:**
To efficiently find the optimal bucket size \( B \) for the Pool-WRK protocol, follow the steps below:

1. **Input:** \(\epsilon\), \( n \).
2. **Output:** The smallest \( B \) that satisfies the condition \( 2^{-k} \cdot P_B(n, k) \leq \epsilon \) for all \( k \in \{1, \ldots, b_0\} \).
3. **Initialization:**
   - Set \( t \leftarrow \infty \)
   - Set \( b_0 \leftarrow \lfloor -\log_2 \epsilon \rfloor \)
   - Set \( B \leftarrow 2 \)
4. **Repeat the following steps until the condition in Step 2 is met or \( B > n \):**
   - Compute \( P_B(n, k) \) for all \( k \) in the range \( 0 \leq k \leq b_0 \).
   - If \( \max_{k \in \{1, \ldots, b_0\}} 2^{-k} \cdot P_B(n, k) \leq \epsilon \), output \( B \) and halt.
   - Otherwise, increment \( B \) by 1.
5. **Exit Condition:**
   - If \( B > n \), exit with output \( \perp \).

**Pool Analysis Adapted to WRK:**
The expensive preparation phase in WRK uses ideas of bucketing and batched cut-and-choose. It not only detects faults in the generation of every multiplicative triple with a probability of \( \frac{1}{2} \) but also allows all checked triples to be used to form buckets. For our pool analysis, we set \( r_c = 1 \) (since all triples are checked) and \( r_d = \frac{1}{2} \). Assuming the bucket size \( B \) is constant, the success rate of the best attacking strategy is given by:
\[
\max_b 2^{-b} \cdot P_B(n, b)
\]
where \( b \) can be any positive integer, but it is essentially bounded by \( \lfloor \log_{1-r_c} r_d \epsilon \rfloor \). The analysis of \( P_B(n, b) \) is identical to that in Section 4, as WRK, like JIMU, requires only a single honestly generated multiplicative triple in each bucket to ensure security. With \( r_c \) fixed to 1, the parameter selection procedure simplifies to the one described in Figure 8.

**Optimality of Bucket Size:**
Assuming the bucket size needs to be constant, the calculated \( B \) is known to be optimal.

**Comparison of WRK and Pooled WRK:**
Table 6 compares the performance of WRK and Pooled WRK in terms of \( F_{\text{pre}} \).

**Benefits of Using a Pool:**
The main benefit of using a pool in the WRK scheme is improved scalability. Compared to plain WRK, the long stalls and large storage requirements of the preparation phase are no longer needed when executing large circuits. We have listed the pool parameters and compared them to plain WRK (Table 6). A pool allows us to completely drop the circuit-size constraint for achieving a particular efficiency level. Additionally, the minimal pool sizes required in our approach are approximately 60% of the minimal circuit sizes required by plain WRK. This is because, with a pool, the probability of having a bad bucket is smaller than an inverse polynomial of the pool size, whereas without a pool, this probability increases as pre-computed leaky-ANDs are consumed.

**Other Related Work:**
- Kreuter et al. [17] proposed a technique to run arbitrarily large-scale secure computations against malicious adversaries using additional oblivious transfers. Although their original protocol was based on MajorityCut, the idea was later adopted by Wang et al. in their SingleCut protocol [35], which is the most efficient SingleCut protocol in the single-execution setting.
- Researchers have developed more efficient BatchedCut protocols for iterative execution of functions with different inputs [12, 18]. Lindell et al. [19] proposed an efficient symmetric-key operation-based input consistency enforcement technique, and Rindal and Rosulek [27] extended Kolesnikov et al.’s work on Dual-Execution protocols [11, 15] into the offline/online setting.
- Damgård et al. [5, 6] proposed SPDZ, a protocol capable of supporting more than two participants in computing arithmetic circuits, consisting of a somewhat homomorphic cryptosystem-based constant-round offline stage and a linear-round online stage.

**Conclusion:**
Using a pool in gate-level BatchedCut secure computation protocols leads to several benefits, including consistent and faster execution of any-size circuits with nearly zero offline processing. We instantiated this idea with two state-of-the-art secure computation schemes and incorporated it into a software framework that offers valuable properties for delivering actively-secure computation as an on-demand service. We hope Pool will spur interest in developing and deploying practical secure computation services.

**Acknowledgments:**
We thank Xiao Wang for suggestions on efficient implementations. This work is supported by NSF award #1464113 and NIH 1U01EB023685-01.

**References:**
[1] Arash Afshar, Zhangxiang Hu, Payman Mohassel, and Mike Rosulek. 2015. How to efficiently evaluate RAM programs with malicious security. In EUROCRYPT.
[2] Donald Beaver, Silvio Micali, and Phillip Rogaway. 1990. The round complexity of secure protocols. In STOC.
[3] Ran Canetti. 2000. Security and composition of multiparty cryptographic protocols. Journal of Cryptology 13, 1 (2000), 143–202.
[4] Ran Canetti. 2001. Universally composable security: A new paradigm for cryptographic protocols. In FOCS.
[5] Ivan Damgård, Marcel Keller, Enrique Larraia, Valerio Pastro, Peter Scholl, and Nigel Smart. 2013. Practical covertly secure MPC for dishonest majority–or: breaking the SPDZ limits. In ESORICS.
[6] Ivan Damgård, Valerio Pastro, Nigel Smart, and Sarah Zakarias. 2012. Multiparty computation from somewhat homomorphic encryption. In CRYPTO.
[7] Jack Doerner, David Evans, and Abhi Shelat. 2016. Secure Stable Matching at Scale. In ACM CCS.
[8] Tore Frederiksen, Thomas Jakobsen, Jesper Nielsen, Peter Nordholt, and Claudio Orlandi. 2013. Minilego: Efficient secure two-party computation from general assumptions. In EUROCRYPT.
[9] Tore Frederiksen, Thomas Jakobsen, Jesper Nielsen, and Roberto Trifiletti. 2015. TinyLEGO: An Interactive Garbling Scheme for Maliciously Secure Two-party Computation. http://eprint.iacr.org/2015/309
[10] Yan Huang, David Evans, Jonathan Katz, and Lior Malka. 2011. Faster Secure Two-Party Computation Using Garbled Circuits. In USENIX Security Symposium.
[11] Yan Huang, Jonathan Katz, and David Evans. 2012. Quid-pro-quo-tocols: Strengthening semi-honest protocols with dual execution. In IEEE Symposium on Security and Privacy.
[12] Yan Huang, Jonathan Katz, Vladimir Kolesnikov, Ranjit Kumaresan, and Alex Malozemoff. 2014. Amortizing garbled circuits. In CRYPTO.
[13] Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank. 2003. Extending oblivious transfers efficiently. In CRYPTO.
[14] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2015. Actively secure OT extension with optimal overhead. In CRYPTO.
[15] Vladimir Kolesnikov, Payman Mohassel, Ben Riva, and Mike Rosulek. 2015. Richer efficiency/security trade-offs in 2PC. In TCC.
[16] Vladimir Kolesnikov and Thomas Schneider. 2008. Improved garbled circuit: Free XOR gates and applications. In International Colloquium on Automata, Languages, and Programming.
[17] Benjamin Kreuter, Abhi Shelat, and Chih-Hao Shen. 2012. Billion-Gate Secure Computation with Malicious Adversaries. In USENIX Security Symposium.
[18] Yehuda Lindell and Ben Riva. 2014. Cut-and-choose Yao-based secure computation in the online/offline and batch settings. In CRYPTO.
[19] Yehuda Lindell and Ben Riva. 2015. Blazing fast 2PC in the offline/online setting with security for malicious adversaries. In ACM CCS.
[20] Chang Liu, Xiao Wang, Kartik Nayak, Yan Huang, and Elaine Shi. 2015. Oblivm: A programming framework for secure computation. In IEEE Symposium on Security and Privacy.
[21] Dahlia Malkhi, Noam Nisan, Benny Pinkas, and Yaron Sella. 2004. Fairplay-Secure Two-Party Computation System. In USENIX Security Symposium.
[22] Moni Naor and Benny Pinkas. 2001. Efficient oblivious transfer protocols. In [conference name].
[23] Kartik Nayak, Xiao Wang, Stratis Ioannidis, Udi Weinsberg, Nina Taft, and Elaine Shi. 2015. GraphSC: Parallel secure computation made easy. In IEEE Symposium on Security and Privacy.
[24] Jesper Nielsen and Claudio Orlandi. 2009. LEGO for two-party secure computation. In TCC.
[25] Jesper Nielsen, Thomas Schneider, and Roberto Trifiletti. 2017. Constant Round Maliciously Secure 2PC with Function-independent Preprocessing using LEGO. In NDSS.
[26] Chris Peikert, Vinod Vaikuntanathan, and Brent Waters. 2008. A framework for efficient and composable oblivious transfer. In CRYPTO.
[27] Peter Rindal and Mike Rosulek. 2016. Faster malicious 2-party secure computation with online/offline dual execution. In USENIX Security Symposium.
[28] Ebrahim Songhori, Siam Hussain, Ahmad-Reza Sadeghi, Thomas Schneider, and Farinaz Koushanfar. 2015. Tinygarble: Highly compressed and scalable sequential garbled circuits. In IEEE Symposium on Security and Privacy.
[29] Stefan Tillich and Nigel Smart. 2014. Circuits of Basic Functions Suitable For MPC and FHE. http://www.cs.bris.ac.uk/Research/CryptographySecurity/MPC/
[30] Xiao Wang, Hubert Chan, and Elaine Shi. 2015. Circuit oram: On tightness of the goldreich-ostrovsky lower bound. In ACM CCS.
[31] Xiao Wang, Yan Huang, Hubert Chan, Abhi Shelat, and Elaine Shi. 2014. SCORAM: oblivious RAM for secure computation. In ACM CCS.
[32] Xiao Wang, Yan Huang, Yongan Zhao, Haixu Tang, XiaoFeng Wang, and Diyue Bu. 2015. Efficient genome-wide, privacy-preserving similar patient query based on private edit distance. In ACM CCS.
[33] Xiao Wang, Chang Liu, Yan Huang, Kartik Nayak, Elaine Shi, and Michael Hicks. 2015. ObliVM. https://github.com/oblivm
[34] Xiao Wang, Alex Malozemoff, and Jonathan Katz. 2016. EMP-toolkit: Efficient MultiParty computation toolkit. https://github.com/emp-toolkit
[35] Xiao Wang, Alex Malozemoff, and Jonathan Katz. 2017. Faster Secure Two-Party Computation in the Single-Execution Setting. In EUROCRYPT.
[36] Xiao Wang, Samuel Ranellucci, and Jonathan Katz. 2017. Authenticated garbling and efficient maliciously secure two-party computation. In ACM CCS.
[37] Samee Zahur, Xiao Wang, Mariana Raykova, Adrià Gascón, Jack Doerner, David Evans, and Jonathan Katz. 2016. Revisiting square-root oram: Efficient random access in multi-party computation. In IEEE Symposium on Security and Privacy.
[38] Ruiyu Zhu and Yan Huang. 2017. JIMU: Faster LEGO-based Secure Computation using Additive Homomorphic Hashes. In ASIACRYPT.
[39] Ruiyu Zhu, Yan Huang, Abhi Shelat, and Jonathan Katz. 2016. The Cut-and-Choose Game and its Application to Cryptographic Protocols. In USENIX Security Symposium.