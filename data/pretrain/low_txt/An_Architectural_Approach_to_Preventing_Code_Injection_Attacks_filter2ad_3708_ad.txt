### Performance Evaluation

#### Applications and Benchmarks
- **Apache 2.2**: Web server performance with 32KB pages.
- **Gzip**: Compression of a 256MB file.
- **Nbench**: Suite of primarily computation-based tests.
- **Unixbench**: Micro-benchmark for various system tasks, including process creation, pipe throughput, and filesystem throughput.

**Figure 4. Normalized Performance for Applications and Benchmarks**

| Benchmark        | Plain (%) | Protected (%) |
|------------------|-----------|---------------|
| Unixbench        | 100       | 82            |
| Pipe Context Switch | 100     | 50            |
| Apache 2.2 (32KB) | 100     | 70            |

**Figure 5. Stress-Testing the Performance Penalties Due to Context Switching**

- **Context Switching Tests**:
  - **Unixbench "Pipe Based Context Switching"**: Measures the speed of context switching between two processes passing data.
  - **Apache 2.2 (1KB Page)**: Heavy context switching while serving requests.
  - Both tests show performance degradation below 50% due to constant TLB flushing.

**Figure 6. Closer Look into Apache Performance**

- **Page Size Impact**:
  - **Small Page Sizes (e.g., 1KB, 2KB)**: High context switching, leading to poor performance.
  - **Large Page Sizes (e.g., 64KB, 128KB, 256KB, 512KB)**: Reduced context switching, better performance, especially as I/O and network link saturation become factors.

### Configuration Information

**Table 2. Configuration Details for Performance Evaluation**

| Item             | Version/Configuration                     |
|------------------|-------------------------------------------|
| Slackware        | 10.2.0                                    |
| Apache           | 2.2.3 (Worker MPM mode, one process with threads) |
| ApacheBench      | 2.0.41-dev (-c3 -t 60)                    |
| Unixbench        | 4.1.0                                     |
| Nbench           | 2.2.2                                     |
| Gzip             | 1.3.3 (Compresses a 256MB file)           |
| Operating System | Linux 2.6.13                              |

### Performance Analysis

- **Nbench**: The slowest test in the nbench suite achieved just under 97% of the expected performance.
- **Unixbench**: The split memory system ran at 82% of normal speed, which is slightly disappointing but can be explained by specific test conditions.
- **Stress Tests (Figure 5)**: Highlight the system's weaknesses, particularly in scenarios with high context switching. Both tests showed performance below 50%.
- **Apache Performance (Figure 6)**: Demonstrates that for small page sizes, performance is poor due to frequent context switching. For larger page sizes, performance improves significantly as I/O and network link saturation come into play.

### Overall Performance
- The system generally performs at 80-90% of an unprotected system.
- Hardware-level support for split memory, as described in Section 3.3, would minimize overhead.
- Building the system on an architecture with a software-loaded TLB, such as SPARC, could further enhance performance.

### Limitations

- **Process Crashes**: When an attack is stopped, the involved process crashes, making denial-of-service attacks possible.
- **Self-Modifying Code**: Split memory does not handle self-modifying code well, so such programs cannot be protected.
- **Non-Control-Data Attacks**: The system does not protect against attacks that modify function return addresses or alter program flow through data modification.
- **Dynamic Modules**: The system has not been analyzed for programs with dynamically loadable modules, though it is expected to be feasible to support them.

### Conclusions

This paper presents an architectural approach to prevent code injection attacks by creating a split memory that separates code and data into different memory spaces. This prevents injected attack code from being executed as instructions are only fetched from the code space. A Linux prototype on the x86 architecture was implemented, and experimental results show that the system effectively prevents a wide range of code injection attacks with acceptable overhead.

### Acknowledgments

We thank Glenn Wurster and the anonymous reviewers for their valuable comments and suggestions. This work was supported in part by NSF Grants OCI-0438246, OCI-0504261, and CNS-0546173.

### References

[1] Microsoft. Data Execution Prevention (DEP) Feature in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005, and Windows Server 2003. [Online]. Available: http://support.microsoft.com/kb/875352. Last accessed Dec 2006.

[2] Pax. Pageexec Documentation. [Online]. Available: http://pax.grsecurity.net/docs/pageexec.txt. Last accessed Dec 2006.

[3] Intel Corporation. IA-32 Intel Architecture Software Developer’s Manual Volume 3A: System Programming Guide, Part 1. Intel Corp., 2006. Publication number 253668.

[4] Mastropaolo. Buffer Overflow Attacks Bypassing DEP (NX/XD Bits) - Part 2: Code Injection. [Online]. Available: http://www.mastropaolo.com/?p=13. Last accessed Dec 2006.

[5] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In Proc. 7th USENIX Security Conference, pages 63–78, San Antonio, Texas, Jan 1998.

[6] H. Etoh. GCC Extension for Protecting Applications from Stack-Smashing Attacks. [Online]. Available: http://www.trl.ibm.com/projects/security/ssp/. Last accessed Dec 2006.

[7] Vendicator. Stack Shield: A “Stack Smashing” Technique Protection Tool for Linux. [Online]. Available: http://www.angelfire.com/sk/stackshield/info.html. Last accessed Dec 2006.

[8] J. Wilander and M. Kamkar. A Comparison of Publicly Available Tools for Dynamic Buffer Overflow Prevention. In Proceedings of the 10th Network and Distributed System Security Symposium, pages 149–162, San Diego, California, February 2003.

[9] J. von Neumann. First Draft of a Report on the EDVAC. 1945. Reprinted in The Origins of Digital Computers Selected Papers, Second Edition, pages 355–364, 1975.

[10] P. C. van Oorschot, A. Somayaji, and G. Wurster. Hardware-Assisted Circumvention of Self-Hashing Software Tamper Resistance. IEEE Trans. Dependable Secur. Comput., 2(2):82–92, 2005.

[11] H. H. Aiken. Proposed Automatic Calculating Machine. 1937. Reprinted in The Origins of Digital Computers Selected Papers, Second Edition, pages 191–198, 1975.

[12] H. H. Aiken and G. M. Hopper. The Automatic Sequence Controlled Calculator. 1946. Reprinted in The Origins of Digital Computers Selected Papers, Second Edition, pages 199–218, 1975.

[13] Kernelthread.com. Securing Memory. [Online]. Available: http://www.kernelthread.com/publications/security/smemory.html. Last accessed Dec 2006.

[14] Pax. ASLR Documentation. [Online]. Available: http://pax.grsecurity.net/docs/aslr.txt. Last accessed Dec 2006.

[15] S. Bhatkar, D. C. DuVarney, and R. Sekar. Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits. 12th USENIX Security, 2003.

[16] S. Bhatkar, R. Sekar, and D. C. DuVarney. Efficient Techniques for Comprehensive Protection from Memory Error Exploits. 14th USENIX Security, 2005.

[17] J. Xu, Z. Kalbarczyk, and R. K. Iyer. Transparent Runtime Randomization for Security. In Proc. of 22nd Symposium on Reliable and Distributed Systems (SRDS), Florence, Italy, Oct. 2003.

[18] E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer, D. Stefanovic, and D. D. Zovi. Randomized Instruction Set Emulation to Disrupt Binary Code Injection Attacks. 10th ACM CCS, 2003.

[19] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering Code-Injection Attacks With Instruction-Set Randomization. 10th ACM CCS, 2003.

[20] S. Sidiroglou, M. E. Locasto, S. W. Boyd, and A. D. Keromytis. Building a Reactive Immune System for Software Services. USENIX Annual Technical Conference, 2005.

[21] L. Lam and T. Chiueh. Checking Array Bound Violation Using Segmentation Hardware. Dependable Systems and Networks, 2005. DSN 2005. Proceedings. International Conference on, pages 388–397, 2005.

[22] Wind River. VxWorks. [Online]. Available: http://www.windriver.com/vxworks/. Last accessed Mar 2007.

[23] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. Iyer. Non-Control-Data Attacks Are Realistic Threats. In Proc. USENIX Security Symposium, Aug 2005.

[24] Bochs. The Open Source IA-32 Emulation Project. [Online]. Available: http://bochs.sourceforge.net/. Last accessed Dec 2006.

[25] The Apache HTTP Server Project. [Online]. Available: http://httpd.apache.org/. Last accessed Dec 2006.

[26] Linux/Unix Nbench. [Online]. Available: http://www.tux.org/~mayer/linux/bmark.html. Last accessed Dec 2006.

[27] Unixbench. [Online]. Available: http://www.tux.org/pub/tux/benchmarks/System/unixbench/. Last accessed Dec 2006.

[28] G. Wurster. A Generic Attack on Hashing-Based Software Tamper Resistance. Master’s thesis, Carleton University, Canada, Apr 2005.

[29] J. Giffin, M. Christodorescu, and L. Kruger. Strengthening Software Self-Checksumming via Self-Modifying Code. In Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005), pages 18–27, Tucson, AZ, USA, Dec. 2005. Applied Computer Associates, IEEE.