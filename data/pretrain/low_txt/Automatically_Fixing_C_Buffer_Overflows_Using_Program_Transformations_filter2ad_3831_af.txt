### Program Transformations for Secure Code Development

The program transformations discussed in this paper fall into the first category, assisting developers in writing secure code during the coding process, similar to refactorings. Some hardware-based approaches, such as the Linux Openwall project [49], have explored non-executable stacks, but these require the OS kernel to be patched. Other methods have split the control and data stack [66], but calculating the function return address is challenging. These approaches primarily focus on stack-based buffer overflows. Most dynamic analysis solutions fall into the third or fourth categories. Array bounds checking approaches [29], [30], [35], [37] provide better protection but come with significant performance overhead. Code pointer integrity checking tools like StackGuard [12], PointGuard [11], and ProPolice [17] use canaries to check buffer integrity, while others store a copy of the return address in a safe location, such as Stack Shield [61] and GMM [39]. However, these tools offer only partial solutions [64] that can be circumvented [6], and they still introduce notable performance overhead.

### Safe Library Replacement Transformation

Bartaloo and colleagues' [3] libsafe library and the GMM library [39] are dynamically loaded libraries that replace unsafe library functions. They utilize the LD_PRELOAD feature to intercept all C library functions, allowing execution only if the arguments respect their bounds. These approaches work as binary patches, eliminating the need for recompilation. The SAFE LIBRARY REPLACEMENT transformation enables developers to add similar protection at the source code level, providing the additional advantage of helping developers understand and learn how to write secure code. This transformation is security-oriented and goes beyond behavior preservation, offering actual solutions to buffer overflows rather than just patching potential vulnerabilities. 

The SAFE LIBRARY REPLACEMENT transformation is not limited to preventing buffer overflows. For example, the REPLACE ARITHMETIC OPERATOR transformation [7] replaces arithmetic operations in C programs with calls to safe library functions that handle integer overflow and underflow correctly. SQL injection attacks can be mitigated by replacing all instances of string concatenation-based SQL queries with SQL PreparedStatements [4], [16], [58].

### Safe Type Replacement Transformation

SAFE TYPE REPLACEMENT involves replacing an unsafe datatype with a safe data structure [23], [26]. Another approach, explored by the Gemini tool [14], transforms all stack-allocated buffers in a C program to heap-allocated buffers, making exploitation more difficult. However, it does not eliminate the actual vulnerabilities. Tools like CCured [8] and Cyclone [34] combine static analysis and runtime checks to ensure safety, but they require manual intervention through annotations and source code changes. In contrast, SAFE TYPE REPLACEMENT provides automated protection using pure C.

Several safe library and data structure options are available. Table I lists some safe library options. Some of these functions trim the destination buffer to fit its size [32], [45], while others dynamically resize the destination buffer [33], [43]. Examples of safe data structures include the stralloc data structure used in qmail [26], the sm_str_s data structure used in MeTA1 [1], and the data structure described by Narayanan [47].

### Future Work and Conclusion

Despite extensive research on detecting and fixing buffer overflows, many vulnerabilities continue to be reported even in mature software. Studies show that detection tools are often not used in practice due to the high overhead of manually fixing detected vulnerabilities. Our program transformation approach naturally integrates into the programming workflow, similar to refactoring tools, increasing the likelihood of adoption. We aim to validate our design decisions with usability studies in the future.

Our transformation-based approach enhances security and significantly improves dependability by addressing the root causes of buffer overflows. The transformations are supported by sophisticated analyses and empirical data, ensuring they do not break original programs. While not a silver bullet, they effectively fix targeted root causes.

### Acknowledgements

We thank Paul Adamczyk, Ralph Johnson, Jeffrey Overbey, and the anonymous reviewers. This work was supported by NSF grants CCF-1217271 and CCF-1340124.

### References

[1] C. Aßmann. MeTA1 README. Technical report, Sendmail Inc., Jan 2007.
[2] D. Babic and A. Hu. Calysto: scalable and precise extended static checking. In ICSE ’08, pages 211–220, New York, NY, USA, 2008. ACM.
[3] A. Baratloo, N. Singh, and T. Tsai. Transparent run-time defense against stack-smashing attacks. In 2000 USENIX Annual Technical Conference: San Diego, CA, USA, 2000.
[4] P. Bisht, A. P. Sistla, and V. Venkatakrishnan. Automatically preparing safe SQL queries. In FC ’10, pages 272–288, Berlin, Heidelberg, 2010. Springer-Verlag.
[5] Bugtraq ID 18331. LibTIFF tiff2pdf remote buffer overflow vulnerability. http://www.securityfocus.com/bid/18331, 2006.
[6] Bulba and Kil3r. Bypassing StackGuard and Stack Shield. Phrack Magazine, 10(56):File 5, 2000.
[7] Z. Coker and M. Haﬁz. Program transformations to fix C integers. In ICSE ’13, pages 792–801, Piscataway, NJ, USA, 2013. IEEE Press.
[8] J. Condit, M. Harren, S. McPeak, G. Necula, and W. Weimer. CCured in the real world. In PLDI ’03, pages 232–244, New York, NY, USA, 2003. ACM.
[9] J. R. Cordy. Source transformation, analysis and generation in TXL. In PEPM ’06, pages 1–11. ACM, 2006.
[10] P. Cousot, R. Cousot, J. Feret, L. Mauborgne, A. Miné, D. Monniaux, and X. Rival. The ASTRéE analyzer. In PLDI ’05, volume 3444 of Lecture Notes in Computer Science, pages 21–30. Springer, 2005.
[11] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. PointGuardTM: Protecting pointers from buffer overflow vulnerabilities. In USENIX SECURITY Symposium ’03, pages 91–104. USENIX, Aug. 2003.
[12] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard: Automatic adaptive detection and prevention of buffer-overﬂow attacks. In USENIX SECURITY Symposium ’98. USENIX, 1998.
[13] C. Cowan, P. Wagle, C. Pu, S. Beattie, and J. Walpole. Buffer overflows: Attacks and defenses for the vulnerability of the decade. In DISCEX ’00). IEEE Computer Society Press, Jan. 2000.
[14] C. Dahn and S. Mancoridis. Using program transformation to secure C programs against buffer overflows. In WCRE ’03, page 323, Washington DC, USA, 2003. IEEE Comp. Society.
[15] N. Dor, M. Rodeh, and S. Sagiv. CSSV: Towards a realistic tool for statically detecting all buffer overflows in C. In PLDI ’03, pages 155–167. ACM, 2003.
[16] F. Dysart and M. Sherriff. In ISSRE ’08.
[17] H. Etoh. GCC extension for protecting applications from stack-smashing attacks. http://www.research.ibm.com/trl/projects/security/ssp/, 2000.
[18] D. Evans and D. Larochelle. Improving security using extensible lightweight static analysis. IEEE Software, 19:42–51, January 2002.
[19] F. Cavalier III. Libmib allocated string functions. http://www.mibsoftware.com/libmib/astring/.
[20] M. Fowler. Refactoring: Improving The Design of Existing Code. Addison-Wesley, Jun 1999.
[21] V. Ganapathy, S. Jha, D. Chandler, D. Melski, and D. Vitek. Buffer overrun detection using linear programming and static analysis. In CCS ’03, pages 345–354. ACM, 2003.
[22] B. Hackett, M. Das, D. Wang, and Z. Yang. Modular checking for buffer overflows in the large. In ICSE ’06, pages 232–241, New York, NY, USA, 2006. ACM.
[23] M. Haﬁz. Security architecture of Mail Transfer Agents. Master’s thesis, University of Illinois at Urbana-Champaign, 2005.
[24] M. Haﬁz. Security On Demand. PhD thesis, University of Illinois at Urbana-Champaign, 2010.
[25] M. Haﬁz, P. Adamczyk, and R. Johnson. Systematically eradicating data injection attacks using security-oriented program transformations. In ESSoS ’09, Feb 2009.
[26] M. Haﬁz and R. Johnson. Evolution of the MTA architecture: The impact of security. Software—Practice and Experience, 38(15):1569–1599, Dec 2008.
[27] M. Haﬁz, J. Overbey, F. Behrang, and J. Hall. OpenRefactory/C: An infrastructure for building correct and complex C transformations. In WRT ’13, 2013.
[28] B. Hardekopf and C. Lin. The ant and the grasshopper: Fast and accurate pointer analysis for millions of lines of code. In PLDI ’07, pages 290–299, New York, NY, USA, 2007. ACM.
[29] R. Hastings and B. Joyce. Purify: Fast detection of memory leaks and access errors. In USENIX ’92, pages 125–136, 1992.
[30] E. Haugh and M. Bishop. Testing C programs for buffer overflow vulnerabilities. In NDSS. The Internet Society, 2003.
[31] International Organization for Standardization. ISO/IEC 24731: Specification For Secure C Library Functions. 2004.
[32] International Organization for Standardization. ISO/IEC 9899:TC3: Programming Languages — C. Sep 2007.
[33] ISO/IEC 14882. C++ std::string.
[34] T. Jim, J. G. Morrisett, D. Grossman, M. Hicks, J. Cheney, and Y. Wang. Cyclone: A safe dialect of C. In USENIX ATEC ’02, pages 275–288, Berkeley, CA, USA, 2002. USENIX Association.
[35] R. Jones and P. Kelly. Bounds checking for C. http://www.doc.ic.ac.uk/~phjk/BoundsChecking.html, July 1995.
[36] W. Le and M. L. Soffa. Marple: A demand-driven path-sensitive buffer overflow detector. In FSE-16, pages 272–282, New York, NY, USA, 2008. ACM.
[37] K. Lhee and S. Chapin. Type-assisted dynamic buffer overflow detection. In USENIX 2002, pages 81–88, 2002.
[38] L. Li, C. Cifuentes, and N. Keynes. Practical and effective symbolic analysis for buffer overflow detection. In FSE ’10, pages 317–326, New York, NY, USA, 2010. ACM.
[39] D. Libenzi. Guarded memory move (GMM), Feb. 10 2004.
[40] C. Liu, J. Yang, L. Tan, and M. Haﬁz. R2Fix: Automatically generating bug fixes from bug reports. In ICSE ’13, pages 282–291, 2013.
[41] M. Lovell. Repel attacks on your code with the Visual Studio 2005 safe C and C++ libraries. MSDN Magazine, May 2005.
[42] M. Méndez-Lojo, A. Mathew, and K. Pingali. Parallel inclusion-based points-to analysis. In OOPSLA ’10, pages 428–443. ACM, 2010.
[43] M. Messier and J. Viega. Safe C string library v1.0.3. http://www.zork.org/safestr/safestr.html.
[44] Microsoft Developer Network. Using the Strsafe.h functions.
[45] T. Miller and T. de Raadt. strlcpy and strlcat — Consistent, safe, string copy and concatenation. In USENIX ’99, 1999.
[46] S. Nagarakatte, J. Zhao, M. Martin, and S. Zdancewic. Softbound: highly compatible and complete spatial memory safety for C. In PLDI ’09, pages 245–258, New York, NY, USA, 2009. ACM.
[47] A. Narayanan. Design of a safe string library for C. Software—Practice and Experience, 24(6):565–578, 1994.
[48] National Institute of Standards and Technology (NIST). SAMATE - Software Assurance Metrics and Tool Evaluation, 2012.
[49] Openwall Project. Linux kernel patch from the Openwall project. http://www.openwall.com/linux/.
[50] S. Özkan. CVE Details: The ultimate security vulnerability datasource—Vulnerabilities By Type. http://www.cvedetails.com/vulnerabilities-by-types.php.
[51] K. Pingali, D. Nguyen, M. Kulkarni, M. Burtscher, M. Hassaan, R. Kaleem, T. Lee, A. Lenharth, R. Manevich, M. Méndez-Lojo, D. Prountzos, and X. Sui. The Tao of parallelism in algorithms. In PLDI ’11, pages 12–25. ACM, 2011.
[52] qmail home page. Maintained by Daniel Julius Bernstein. http://cr.yp.to/qmail.html.
[53] M. Rinard, C. Cadar, and H. H. Nguyen. Exploring the acceptability envelope. In OOPSLA ’05, pages 21–30. ACM, 2005.
[54] R. Rugina and M. Rinard. Symbolic bounds analysis of pointers, array indices, and accessed memory regions. In PLDI ’00, pages 182–195, New York, NY, USA, 2000. ACM.
[55] O. Ruwase and M. Lam. A practical dynamic buffer overflow detector. In DSSS 11, pages 159–169, 2004.
[56] R. Seacord. The CERT C secure coding standard. Addison-Wesley, 2009.
[57] J. Seward and N. Nethercote. Using Valgrind to detect undefined value errors with bit-precision. In USENIX 2005, year = 2005, pages = 17-30.
[58] S. Thomas, L. Williams, and T. Xie. On automated prepared statement generation to remove SQL injection vulnerabilities. Inf. Softw. Technol., 51(3):589–598, Mar. 2009.
[59] US-CERT. National vulnerability database version 2.2.
[60] M. Vakilian, N. Chen, S. Negara, B. A. Rajkumar, B. P. Bailey, and R. E. Johnson. Use, disuse, and misuse of automated refactorings. In ICSE ’12, pages 233–243. IEEE, 2012.
[61] Vendicator. Stack Shield: A stack smashing technique protection tool for Linux. http://www.angelfire.com/sk/stackshield/, 2000.
[62] J. Viega, J. Bloch, T. Kohno, and G. McGraw. ITS4: A static vulnerability scanner for C and C++ code. In ACSAC ’00. ACM, 2000.
[63] D. Wagner, J. Foster, E. Brewer, and A. Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In NDSS. The Internet Society, 2000.
[64] J. Wilander and M. Kamkar. A comparison of publicly available tools for dynamic buffer overflow prevention. In Proceedings of the Network and Distributed System Security Symposium, NDSS 2003, San Diego, California, USA. The Internet Society, 2003.
[65] Y. Xie, A. Chou, and D. Engler. ARCHER: Using symbolic, path-sensitive analysis to detect memory access errors. SIGSOFT Softw. Eng. Notes, 28:327–336, September 2003.
[66] J. Xu, Z. Kalbarczyk, S. Patel, and R. Iyer. Architecture support for defending against buffer overflow attacks. In EASY ’02, 2002.