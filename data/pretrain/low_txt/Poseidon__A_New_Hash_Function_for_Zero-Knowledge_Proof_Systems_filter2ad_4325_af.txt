### 6.2.4 RedShift
RedShift [41] is a STARK-inspired proof system that can handle an arbitrary set of constraints. It can be viewed as PLONK with pairing-based polynomial commitments, but with the trusted setup replaced by Reed-Solomon trustless commitments. The size of a RedShift proof is \(c_\lambda \log^2 d\) KB, where \(d\) is the degree of the circuit polynomials and \(c_\lambda \approx 2.5\) for 120-bit security. Due to its similarity to PLONK, we can apply the same optimizations, resulting in the entire Merkle tree proof requiring polynomials of degree 4800 for a width of 5, which results in a proof size of approximately 12 KB. Unfortunately, no public RedShift library is currently available, so we were unable to measure the actual performance.

### 6.3 Comparison with Other Hash Algorithms
No zero-knowledge system implementation contains all the primitives we want to compare. However, for all systems of interest, the prover performance increases monotonically (and in practice, almost linearly) with the number of multiplications or, equivalently, with the number of R1CS constraints. We provide a summary of constraint counts for various hash functions in the case of a Merkle tree with \(2^{30}\) elements in Table 4. We obtained Blake2s and Pedersen hash estimates from [38], the SHA-256 count from Hopwood’s notes [15], and calculated MiMC and Rescue estimates ourselves based on the round numbers provided in [4, 6]. The table suggests that POSEIDON and Rescue should have the fastest provers, which is also confirmed for the STARK case [11]. However, Rescue has slower performance in non-ZK cases (Table 1).

### 6.4 STARKs with POSEIDONπ
ZK-STARKs [9] is a proof system for computational integrity that is not vulnerable to quantum computers and does not use a trusted setup. STARKs operate with programs whose internal state can be represented as a set of \(w\) registers, each belonging to a binary field \(GF(2^n)\) or to a \(2^n\)-subgroup \(G\) of a prime-order group (our primary case, as the scalar fields of BLS12-381 and BN254 have such a large subgroup). The program execution is then represented as a set of \(T\) internal states. Computational integrity is defined as the set of all \(wT\) registers satisfying certain \(s\) polynomial equations (constraints) of degree \(d\).

#### STARK Costs
According to [51], the number of constraints does not significantly impact the prover, verifier, or communication complexity, which are estimated as follows:
- **Prover**: \(8w \cdot T \cdot d \cdot \log(wT)\) operations in \(G\)
- **Prover Memory**: \(\Omega(w \cdot T \cdot n)\)
- **Communication (Verifier Time)**: \(n \cdot (m + \log_2(8T d))\), where \(m\) is the maximum number of variables in a constraint polynomial.

The primitive POSEIDONπ can be represented as such a program with few registers, a small number of steps, and low-degree constraints. Following the same approach as for SNARKs in Section 6.2, we keep only S-box inputs and permutation outputs in registers. Setting \(w = t\), we get \(T = RF + \lceil RP/t \rceil\) and \(wT = tRF + RP\). Thus, the complexity is:
- **Prover**: \(24(tRF + RP) \cdot \log_2(tRF + RP)\) operations in \(G\)
- **Prover Memory**: \(\Omega(63 \cdot (tRF + RP))\)
- **Communication (Verifier Time)**: \(63 \cdot \log_2(24(tRF + RP))\)

We suggest \(t \in \{3, 5\}\) to support the same Merkle tree cases as before. For our primary instance, POSEIDON-128, with a width of 3, the AET cost is 20540 for each permutation call, processing 510 bits per call, resulting in a prover complexity of 40 operations per bit. For a width of 5, the AET cost is 38214, translating to 38 operations per bit in \(G\).

### 7 Acknowledgements
This work is partially supported by the Ethereum Foundation, Starkware Ltd, and IOV42 Ltd. We thank Alexander Vlasov, Lovesh Harshandani, and Carlos Perez for benchmarking POSEIDON in various environments. This work was also supported by the EUH2020 European Union’s Horizon 2020 research and innovation programme (https://ec.europa.eu/programmes/horizon2020/en) under grant agreement 871473 (KRAKEN).

### References
[1] C++ library for zkSNARK. https://github.com/scipr-lab/libsnark.
[2] 2019. Mike Lodder, Sovrin’s principal cryptographer, www.sovrin.org, private communication.
[3] Martin R. Albrecht, et al. Algebraic Cryptanalysis of STARK-Friendly Designs: Application to MARVELlous and MiMC. In ASIACRYPT 2019, volume 11923 of LNCS, pages 371–397, 2019.
[4] Martin R. Albrecht, et al. MiMC: Efficient Encryption and Cryptographic Hashing with Minimal Multiplicative Complexity. In ASIACRYPT 2016, volume 10031 of LNCS, pages 191–219, 2016.
[5] Martin R. Albrecht, et al. Ciphers for MPC and FHE. In EUROCRYPT 2015, volume 9056 of LNCS, pages 430–454, 2015.
[6] Abdelrahaman Aly, et al. Design of Symmetric-Key Primitives for Advanced Cryptographic Protocols. Cryptology ePrint Archive, Report 2019/426, 2019. https://eprint.iacr.org/2019/426.
[7] Scott Ames, et al. Ligero: Lightweight Sublinear Arguments Without a Trusted Setup. In CCS, pages 2087–2104. ACM, 2017.
[8] Tomer Ashur and Siemen Dhooghe. Marvellous: A STARK-friendly Family of Cryptographic Primitives. Cryptology ePrint Archive, Report 2018/1098, 2018. https://eprint.iacr.org/2018/1098.
[9] Eli Ben-Sasson, et al. Scalable Zero Knowledge with No Trusted Setup. In CRYPTO (3), volume 11694 of LNCS, pages 701–732. Springer, 2019.
[10] Eli Ben-Sasson, et al. Succinct Non-Interactive Zero Knowledge for a von Neumann Architecture. In USENIX Security Symposium, pages 781–796. USENIX Association, 2014.
[11] Eli Ben-Sasson, et al. STARK Friendly Hash – Survey and Recommendation. Cryptology ePrint Archive, Report 2020/948, 2020. https://eprint.iacr.org/2020/948.
[12] Guido Bertoni, et al. On the Indifferentiability of the Sponge Construction. In EUROCRYPT 2008, volume 4965 of LNCS, pages 181–197, 2008.
[13] Guido Bertoni, et al. Duplexing the Sponge: Single-Pass Authenticated Encryption and Other Applications. In Selected Areas in Cryptography, volume 7118 of LNCS, pages 320–337. Springer, 2011.
[14] Tim Beyne, et al. Out of Oddity – New Cryptanalytic Techniques against Symmetric Primitives Optimized for Integrity Proof Systems. In Advances in Cryptology - CRYPTO 2020, volume 12172 of LNCS, pages 299–328. Springer, 2020.
[15] Eli Biham, et al. Cryptanalysis of Skipjack Reduced to 31 Rounds Using Impossible Differentials. In EUROCRYPT 1999, volume 1592 of LNCS, pages 12–23, 1999.
[16] Eli Biham and Adi Shamir. Differential Cryptanalysis of DES-like Cryptosystems. Journal of Cryptology, 4(1):3–72, 1991.
[17] Eli Biham and Adi Shamir. Differential Cryptanalysis of the Data Encryption Standard. Springer, 1993.
[18] Christina Boura, et al. Higher-Order Differential Properties of Keccak and Luffa. In FSE 2011, volume 6733 of LNCS, pages 252–269, 2011.
[19] Benedikt Bünz, et al. Bulletproofs: Short Proofs for Confidential Transactions and More. In IEEE Symposium on Security and Privacy, pages 315–334. IEEE Computer Society, 2018.
[20] Jan Camenisch, et al. An Accumulator Based on Bilinear Maps and Efficient Revocation for Anonymous Credentials. In Public Key Cryptography, volume 5443 of LNCS, pages 481–500. Springer, 2009.
[21] Jan Camenisch and Anna Lysyanskaya. Dynamic Accumulators and Application to Efficient Revocation of Anonymous Credentials. In CRYPTO 2002, volume 2442 of LNCS, pages 61–76. Springer, 2002.
[22] Melissa Chase, et al. Post-Quantum Zero-Knowledge and Signatures from Symmetric-Key Primitives. In CCS, pages 1825–1842. ACM, 2017.
[23] Alessandro Chiesa, et al. Marlin: Preprocessing ZKSNARKs with Universal and Updatable SRS. In Anne Canteaut and Yuval Ishai, editors, Advances in Cryptology – EUROCRYPT 2020, pages 738–768, Cham, 2020. Springer International Publishing.
[24] David A. Cox, et al. Ideals, Varieties, and Algorithms - An Introduction to Computational Algebraic Geometry and Commutative Algebra (2nd ed.). Undergraduate texts in mathematics. Springer, 1997.
[25] Joan Daemen and Vincent Rijmen. The Wide Trail Design Strategy. In IMACC, volume 2260 of LNCS, pages 222–238. Springer, 2001.
[26] Joan Daemen and Vincent Rijmen. The Design of Rijndael: AES - The Advanced Encryption Standard. Information Security and Cryptography. Springer, 2002.
[27] Ariel Gabizon, et al. PLONK: Permutations over Lagrange-bases for Oecumenical Noninteractive Arguments of Knowledge. IACR Cryptology ePrint Archive, 2019:953, 2019.
[28] Víctor Gayoso Martínez, et al. A Survey of the Elliptic Curve Integrated Encryption Scheme. 2010. Available at https://core.ac.uk/download/pdf/36042967.pdf.
[29] Irene Giacomelli, et al. ZKBoo: Faster Zero-Knowledge for Boolean Circuits. In USENIX Security Symposium, pages 1069–1083. USENIX Association, 2016.
[30] Lorenzo Grassi, et al. Poseidon: A New Hash Function for Zero-Knowledge Proof Systems. IACR Cryptol. ePrint Arch., 2019:458, 2019.
[31] Lorenzo Grassi, et al. On a Generalization of Substitution-Permutation Networks: The HADES Design Strategy. In EUROCRYPT 2020, volume 12106 of LNCS, pages 674–704, 2020.
[32] Lorenzo Grassi, et al. Subspace Trail Cryptanalysis and Its Applications to AES. IACR Trans. Symmetric Cryptol., 2016(2):192–225, 2016.
[33] Lorenzo Grassi, et al. MPC-friendly Symmetric Key Primitives. In CCS, pages 430–443. ACM, 2016.
[34] Lorenzo Grassi, et al. Weak Linear Layers in Word-Oriented Partial SPN and HADES-Like Schemes. Cryptology ePrint Archive, Report 2020/500, 2020. https://eprint.iacr.org/2020/500.
[35] Jens Groth. On the Size of Pairing-Based Non-Interactive Arguments. In EUROCRYPT 2016, volume 9666 of LNCS, pages 305–326. Springer, 2016.
[36] Jian Guo, et al. Practical Collision Attacks Against Round-Reduced SHA-3. Journal of Cryptology, 33(1):228–270, 2020.
[37] Martin Hell, et al. The Grain Family of Stream Ciphers. In The eSTREAM Finalists, volume 4986 of LNCS, pages 179–190. Springer, 2008.
[38] Daira Hopwood, et al. Zcash Protocol Specification: Version 2020.1.14 [overwinter+sapling+blossom+heartwood+canopy]. Technical report, Zerocoin Electric Coin Company, 2019. Available at https://github.com/zcash/zips/blob/master/protocol/protocol.pdf.
[39] Thomas Jakobsen and Lars R. Knudsen. The Interpolation Attack on Block Ciphers. In FSE 1997, volume 1267 of LNCS, pages 28–40, 1997.
[40] Aniket Kate, et al. Constant-Size Commitments to Polynomials and Their Applications. In ASIACRYPT, volume 6477 of LNCS, pages 177–194. Springer, 2010.
[41] Assimakis Kattis, et al. Redshift: Transparent SNARKs from List Polynomial Commitment IOPs. Cryptology ePrint Archive, Report 2019/1400, 2019. https://eprint.iacr.org/2019/1400.
[42] Nathan Keller and Asaf Rosemarin. Mind the Middle Layer: The HADES Design Strategy Revisited. Cryptology ePrint Archive, Report 2020/179, 2020. https://eprint.iacr.org/2020/179.
[43] Lars R. Knudsen. Truncated and Higher Order Differentials. In FSE 1994, volume 1008 of LNCS, pages 196–211, 1994.
[44] Mario Lamberger, et al. Rebound Distinguishers: Results on the Full Whirlpool Compression Function. In ASIACRYPT 2009, volume 5912 of LNCS, pages 126–143, 2009.
[45] F. J. MacWilliams and N. J. A. Sloane. The Theory of Error-Correcting Codes. North-Holland Publishing Company, 1978.
[46] Mary Maller, et al. Sonic: Zero-Knowledge SNARKs from Linear-Size Universal and Updatable Structured Reference Strings. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019, pages 2111–2128. ACM, 2019. URL: https://doi.org/10.1145/3319535.3339817, doi:10.1145/3319535.3339817.
[47] Mitsuru Matsui. Linear Cryptanalysis Method for DES Cipher. In EUROCRYPT 1993, volume 765 of LNCS, pages 386–397, 1993.
[48] Florian Mendel, et al. The Rebound Attack: Cryptanalysis of Reduced Whirlpool and Grøstl. In FSE 2009, volume 5665 of LNCS, pages 260–276, 2009.
[49] Bryan Parno, et al. Pinocchio: Nearly Practical Verifiable Computation. In IEEE Symposium on Security and Privacy, pages 238–252. IEEE Computer Society, 2013.
[50] Vincent Rijmen, et al. The Cipher SHARK. In Fast Software Encryption – FSE 1996, volume 1039 of LNCS, pages 99–111. Springer, 1996.
[51] StarkWare Industries Ltd. The Complexity of STARK-Friendly Cryptographic Primitives. Private Communication, 2018.
[52] Gavin Wood, et al. Ethereum: A Secure Decentralised Generalised Transaction Ledger. Ethereum Project Yellow Paper, 2014.
[53] A. M. Youssef, et al. On the Design of Linear Transformations for Substitution Permutation Encryption Networks. In School of Computer Science, Carleton University, pages 40–48, 1997.