### Enhanced Security through Hardware Support

Hardware-based security measures, such as Intel's Software Guard Extensions (SGX), offer robust security guarantees. However, they require significant effort to decouple the code that will run within the enclave. SGX can also be used for memory protection, but it incurs high performance costs due to the overheads associated with entering and exiting the enclave.

### Conclusion

Mitigations against memory-corruption attacks in modern x86-based computer systems rely on in-process protection of code and data. Unfortunately, neither current nor planned memory-isolation features of the x86 architecture meet these requirements. As a result, many mitigations depend on information hiding via segmentation, expensive software-based isolation, or retrofitting memory-isolation features that require compromises in the design of the mitigation.

IMIX is a mitigation-agnostic in-process memory-isolation feature designed for the x86 architecture. It provides memory-corruption defenses with a well-suited isolation primitive to protect data. IMIX extends the x86 Instruction Set Architecture (ISA) with an additional memory permission configurable through the page table and a new instruction that can only access memory pages isolated by IMIX. We have implemented a fully-fledged proof of concept of IMIX using Intel’s Simulation and Analysis Engine to extend the x86 ISA. Additionally, we have extended the Linux kernel and the LLVM compiler framework to provide interfaces to IMIX. Furthermore, we have enhanced Code-pointer Integrity (CPI), an effective defense against code-reuse attacks, by using IMIX to protect CPI’s safe region.

Our evaluation shows that defenses like CPI greatly benefit from IMIX in terms of security without incurring additional performance overhead. We argue that the adoption of IMIX is feasible by adjusting the design of Intel’s Control-flow Enforcement Technology (CET). Finally, IMIX provides a solution that can serve as a building block for future defenses to tackle challenging problems, such as data-oriented attacks.

### Acknowledgments

This work was supported by the German Science Foundation CRC 1119 CROSSING P3, the German Federal Ministry of Education and Research (BMBF) in the context of HWSec, and the Intel Collaborative Research Institute for Collaborative Autonomous and Resilient Systems (ICRI-CARS).

### Bibliography

1. M. Abadi, M. Budiu, Ú. Erlingsson, and J. Ligatti. Control-flow integrity. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2005.
2. P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing memory error exploits with WIT. In 29th IEEE Symposium on Security and Privacy, S&P, 2008.
3. Aleph One. Smashing the stack for fun and profit. Phrack Magazine, 49, 2000.
4. ARM. ARM architecture reference manual. http://silver.arm.com/download/ARM_and_AMBA_Architecture/AR150-DA-70000-r0p0-00bet9/DDI0487A_h_armv8_arm.pdf, 2015.
5. M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny. You can run but you can’t read: Preventing disclosure exploits in executable code. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2014.
6. M. Backes and S. Nürnberger. Oxymoron: Making fine-grained in-memory randomization practical by allowing code sharing. 23rd USENIX Security Symposium, USENIX Sec, 2014.
7. A. Bittau, A. Belay, A. J. Mashtizadeh, D. Mazières, and D. Boneh. Hacking blind. In 35th IEEE Symposium on Security and Privacy, S&P, 2014.
8. K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.-R. Sadeghi. Leakage-resilient layout randomization for mobile devices. In 23rd Annual Network and Distributed System Security Symposium, NDSS, 2016.
9. N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross. Control-flow bending: On the effectiveness of control-flow integrity. In 24th USENIX Security Symposium, USENIX Sec, 2015.
10. M. Castro, M. Costa, and T. Harris. Securing software by enforcing data-flow integrity. In 7th USENIX Symposium on Operating Systems Design and Implementation, OSDI, 2006.
11. N. Chachmon, D. Richins, R. Cohn, M. Christensson, W. Cui, and V. J. Reddi. Simulation and analysis engine for scale-out workloads. In Proceedings of the 2016 International Conference on Supercomputing, ICS '16, pages 22:1–22:13, New York, NY, USA, 2016. ACM.
12. S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-data attacks are realistic threats. In 14th USENIX Security Symposium, USENIX Sec, 2005.
13. Y. Cho, D. Kwon, and Y. Paek. Instruction-level data isolation for the kernel on ARM. In Design Automation Conference (DAC), 2017 54th ACM/EDAC/IEEE, pages 1–6. IEEE, 2017.
14. M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, M. Negro, M. Qunaibit, and A.-R. Sadeghi. Losing control: On the effectiveness of control-flow integrity under stack attacks. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2015.
15. V. Costan and S. Devadas. Intel SGX explained. IACR Cryptology ePrint Archive, 2016:86, 2016.
16. S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical code randomization resilient to memory disclosure. In 36th IEEE Symposium on Security and Privacy, S&P, 2015.
17. J. Criswell, N. Dautenhahn, and V. Adve. KCOFI: Complete control-flow integrity for commodity operating system kernels. In 35th IEEE Symposium on Security and Privacy, S&P, 2014.
18. T. H. Dang, P. Maniatis, and D. Wagner. The performance cost of shadow stacks and stack canaries. In 10th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2015.
19. L. Davi, D. Gens, C. Liebchen, and A.-R. Sadeghi. PT-Rand: Practical mitigation of data-only attacks against page tables. 2017.
20. L. Deng, Q. Zeng, and Y. Liu. ISBoxing: An instruction substitution based data sandboxing for x86 untrusted libraries. In IFIP International Information Security Conference, pages 386–400. Springer, 2015.
21. I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the point(er): On the effectiveness of code pointer integrity. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 781–796. IEEE, 2015.
22. I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the point(er): On the effectiveness of code pointer integrity. In 36th IEEE Symposium on Security and Privacy, S&P, 2015.
23. T. Frassetto, D. Gens, C. Liebchen, and A.-R. Sadeghi. JitGuard: Hardening just-in-time compilers with SGX. In 24th ACM Conference on Computer and Communications Security (CCS), Nov. 2017.
24. R. Gawlik, B. Kollenda, P. Koppe, B. Garmany, and T. Holz. Enabling client-side crash-resistance to overcome diversification and information hiding. In NDSS, 2016.
25. X. Ge, H. Vijayakumar, and T. Jaeger. SPROBES: Enforcing kernel code integrity on the TrustZone architecture. In Mobile Security Technologies, MoST, 2014.
26. E. Göktaş, R. Gawlik, B. Kollenda, G. Portokalidis, C. Giuffrida, and H. Bos. Undermining information hiding (and what to do about it). In 25th USENIX Security Symposium (USENIX Security 16), pages 105–119. USENIX Association, 2016.
27. D. Hansen. [RFC] x86: Memory protection keys. https://lwn.net/Articles/643617/, 2015.
28. H. Hu, Z. L. Chua, S. Adrian, P. Saxena, and Z. Liang. Automatic generation of data-oriented exploits. In 24th USENIX Security Symposium, USENIX Sec, 2015.
29. H. Hu, S. Shinde, A. Sendroiu, Z. L. Chua, P. Saxena, and Z. Liang. Data-oriented programming: On the expressiveness of non-control data attacks. In 37th IEEE Symposium on Security and Privacy, S&P, 2016.
30. Intel. Intel Itanium architecture developer’s manual: Vol. 2. https://www.intel.de/content/dam/www/public/us/en/documents/manuals/itanium-architecture-software-developer-rev-2-3-vol-2-manual.pdf, 2010.
31. Intel. Intel 64 and IA-32 architectures software developer’s manual, combined volumes 3A, 3B, and 3C: System programming guide. https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-system-programming-manual-325384.pdf, 2013.
32. Intel. Intel 64 and IA-32 architectures software developer’s manual. ch 28, 2015.
33. Intel. Control-flow Enforcement Technology Preview, 2017.
34. Intel. Intel 64 and IA-32 architectures software developer’s manual. https://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html, 2017.
35. Intel. Intel architecture memory encryption technologies specification. https://software.intel.com/sites/default/files/managed/a5/16/Multi-Key-Total-Memory-Encryption-Spec.pdf, 2017.
36. D. Kaplan, J. Powell, and T. Woller. AMD memory encryption. White paper, 2016.
37. K. Koning, X. Chen, H. Bos, C. Giuffrida, and E. Athanasopoulos. No need to hide: Protecting safe regions on commodity hardware. In Proceedings of the Twelfth European Conference on Computer Systems, pages 437–452. ACM, 2017.
38. V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-pointer integrity. In 11th USENIX Symposium on Operating Systems Design and Implementation, OSDI, 2014.
39. V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. CPI implementation. http://dslab.epfl.ch/proj/cpi/levee-early-preview-0.2.tgz, 2014.
40. C. Lattner and V. S. Adve. LLVM: A compilation framework for lifelong program analysis & transformation. In IEEE/ACM International Symposium on Code Generation and Optimization, CGO, 2004.
41. K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. ASLR-Guard: Stopping address space leakage for code reuse attacks. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2015.
42. A. J. Mashtizadeh, A. Bittau, D. Boneh, and D. Mazières. CCFI: Cryptographically enforced control flow integrity. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2015.
43. S. McCamant and G. Morrisett. Evaluating SFI for a CISC architecture. In 15th USENIX Security Symposium, USENIX Sec, 2006.
44. Microsoft. Data Execution Prevention (DEP). http://support.microsoft.com/kb/875352/EN-US/, 2006.
45. Microsoft. Control flow guard. https://msdn.microsoft.com/en-us/library/Dn919635.aspx, 2015.
46. S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. SoftBound: Highly compatible and complete spatial memory safety for C. In 30th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2009.
47. S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. CETS: Compiler enforced temporal safety for C. In International Symposium on Memory Management, ISMM, 2010.
48. OpenBSD. OpenBSD 3.3, 2003.
49. J. Power, M. D. Hill, and D. A. Wood. Supporting x86-64 address translation for 100s of GPU lanes. In High Performance Computer Architecture (HPCA), 2014 IEEE 20th International Symposium on, pages 568–578. IEEE, 2014.
50. F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz. Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications. 27th USENIX Security Symposium, 2018.
51. D. Sehr, R. Muth, C. Biffle, V. Khimenko, E. Pasko, K. Schimpf, B. Yee, and B. Chen. Adapting software fault isolation to contemporary CPU architectures. In 18th USENIX Security Symposium, USENIX Sec, 2010.
52. H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2007.
53. H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, and D. Boneh. On the effectiveness of address-space randomization. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2004.
54. K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A. Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.
55. C. Song, B. Lee, K. Lu, W. Harris, T. Kim, and W. Lee. Enforcing kernel security invariants with data flow integrity. In NDSS, 2016.
56. C. Song, H. Moon, M. Alam, I. Yun, B. Lee, T. Kim, W. Lee, and Y. Paek. HDFI: Hardware-assisted data-flow isolation. In Security and Privacy (SP), 2016 IEEE Symposium on, pages 1–17. IEEE, 2016.
57. L. Szekeres, M. Payer, T. Wei, and D. Song. SoK: Eternal war in memory. In 34th IEEE Symposium on Security and Privacy, S&P, 2013.
58. A. Tang, S. Sethumadhavan, and S. Stolfo. Heisenbyte: Thwarting memory disclosure attacks using destructive code reads. In ACM SIGSAC Conference on Computer and Communications Security, CCS, 2015.
59. C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike. Enforcing forward-edge control-flow integrity in GCC & LLVM. In 23rd USENIX Security Symposium, USENIX Sec, 2014.
60. C. Villavieja, V. Karakostas, L. Vilanova, Y. Etsion, A. Ramirez, A. Mendelson, N. Navarro, A. Cristal, and O. S. Unsal. DIDi: Mitigating the performance impact of TLB shootdowns using a shared TLB directory. In Parallel Architectures and Compilation Techniques (PACT), 2011 International Conference on, pages 340–349. IEEE, 2011.
61. R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient software-based fault isolation. In ACM SIGOPS Operating Systems Review, volume 27, pages 203–216. ACM, 1994.
62. R. N. Watson, J. Woodruff, P. G. Neumann, S. W. Moore, J. Anderson, D. Chisnall, N. Dave, B. Davis, K. Gudka, B. Laurie, et al. CHERI: A hybrid capability-system architecture for scalable software compartmentalization. In Security and Privacy (SP), 2015 IEEE Symposium on, pages 20–37. IEEE, 2015.
63. J. Werner, G. Baltas, R. Dallara, N. Otterness, K. Z. Snow, F. Monrose, and M. Polychronakis. No-execute-after-read: Preventing code disclosure in commodity software. In 11th ACM Symposium on Information, Computer and Communications Security, ASIACCS, 2016.
64. Wind River. Simics full system simulator. https://www.windriver.com/products/simics/, 2018.
65. B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A sandbox for portable, untrusted x86 native code. In Security and Privacy, 2009 30th IEEE Symposium on, pages 79–93. IEEE, 2009.

---

This version of the text is more coherent and professional, with improved clarity and structure.