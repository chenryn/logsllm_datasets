### 7.1 Execve Payload

The `execve` payload, as shown in Table 1, can be generated into a Proof of Concept (PoC) exploit in less than a minute, as detailed in Table 7. Assuming that the `rsi` register points to a writable address `x`, BOPC generates the following (address, value, size) tuples: `($y, $x, 8)`, `($y + 0x8, 0, 8)`, `($x, "/bin/sh", 8)`, `($x + 0x10, $y, 8)`, and `($x + 0x18, 0, 8)`. Here, `$y` represents a concrete writable address set by BOPC.

### 7.2 Infinite Loop

This section presents a payload that generates a trace for an infinite loop. The `infloop` payload is a simple infinite loop consisting of only two statements:

```c
void payload() {
    LOOP:
    __r1 = 0;
    goto LOOP;
}
```

We set the entry point at the beginning of the `ngx_signal_handler` function, which is a signal handler invoked through a function pointer. This makes the entry point reachable via control-flow hijacking. The solution synthesized by BOPC is illustrated in Figure 6. The top-left box in the figure shows how the memory is initialized to satisfy the constraints.

- **Virtual Register Mapping**: Virtual register `__r0` is mapped to hardware register `r14`.
- **Candidate Blocks**: The `ngx_signal_handler` contains three candidate blocks, marked as octagons. One of these blocks is selected as the functional block, while the others are avoided by the dispatcher blocks.
- **Dispatcher Path**: The dispatcher finds a path from the entry point to the first functional block and then creates a loop to return to the same functional block (highlighted with blue arrows). Note that the dispatcher block exceeds 20 basic blocks, while the functional block consists of a single basic block.
- **External Function Calls**: The oval nodes in Figure 6 indicate basic blocks outside the current function. At basic block `0x41C79F`, the function `ngx_time_sigsafe_update` is invoked. To minimize the number of executed basic blocks, BOPC sets `ngx_time_lock` to a non-zero value, causing the function to return quickly. BOPC successfully synthesizes this payload in less than 5 minutes.

### 7.3 Conditional Statements

This case study demonstrates an SPL if-else condition that implements a logical NOT. If the register `__r0` is zero, the payload sets `__r1` to one; otherwise, `__r1` is set to zero. The execution trace starts at the beginning of the `ngx_cache_manager_process_cycle` function, which is called through a function pointer. A part of the Control Flow Graph (CFG) starting from this function is shown in Figure 6. The top box in the figure illustrates the memory layout initialization for the loop. This graph was created by BOPC.

### 8. Discussion and Future Work

Our prototype demonstrates the feasibility and scalability of automatic construction of BOP chains using a high-level language. However, there are potential optimizations for future versions of BOPC:

- **Granularity of Basic Blocks**: BOPC is limited by the granularity of basic blocks. A combination of basic blocks might lead to the execution of a desired SPL statement, even if individual blocks do not. For example, if a basic block initializes `rcx` to 0 and the next block increments it by 1, the combined effect is setting `rcx` to 1. BOPC can be expanded to address this by coalescing basic blocks into larger blocks, resulting in a new CFG.
- **Configurable Bounds**: BOPC sets several upper bounds defined by user inputs, including:
  - Upper limit of SPL payload permutations (P)
  - Length of continuous blocks (L)
  - Minimum induced subgraphs extracted from the delta graph (N)
  - Dispatcher paths between a pair of functional blocks (K)

These bounds, along with the timeout for symbolic execution, reduce the search space but may prune some valid solutions. Evaluating higher limits may result in finding more or alternate solutions.

### 9. Conclusion

Despite the deployment of strong control-flow hijack defenses like CFI or shadow stacks, data-only code reuse attacks remain possible. Manual analysis to satisfy restrictive constraints for execution paths has been complex and time-consuming. Our BOPC mechanism automates the analysis of the remaining attack surface and synthesis of exploit payloads. The payload is expressed in a high-level language to abstract complexity from target programs and architectures. Our novel Block Oriented Programming technique maps statements of the payload to functional basic blocks, which are stitched together through dispatcher blocks that satisfy the program's CFG and avoid clobbering functional blocks. Heuristics are developed to prune the search space and evaluate the most probable paths first.

The evaluation demonstrates that 81% of 13 payloads, ranging from typical exploit payloads to loops and conditionals, are successfully mapped across 10 programs. Upon acceptance, we will release the source code of our proof-of-concept prototype along with all evaluation results. The prototype is available at [GitHub](https://github.com/HexHive/BOPC).

### 10. Acknowledgments

We thank the anonymous reviewers for their insightful comments. This research was supported by ONR awards N00014-17-1-2513, N00014-17-1-2498, by NSF CNS-1408880, CNS-1513783, CNS-1801534, CNS-1801601, and a gift from Intel Corporation. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of our sponsors.

### References

[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2009. Control-flow integrity principles, implementations, and applications. ACM Transactions on Information and System Security (TISSEC) (2009).

[2] Thanassis Avgerinos, Sang Kil Cha, Alexandre Rebert, Edward J Schwartz, Maverick Woo, and David Brumley. 2014. Automatic exploit generation. Commun. ACM 57, 2 (2014), 74–84.

[3] Tyler Bletsch, Xuxian Jiang, Vince W Freeh, and Zhenkai Liang. 2011. Jump-oriented programming: a new class of code-reuse attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security.

[4] Nathan Burow, Scott A Carr, Stefan Brunthaler, Mathias Payer, Joseph Nash, Per Larsen, and Michael Franz. 2018. Control-flow integrity: Precision, security, and performance. ACM Computing Surveys (CSUR) (2018).

[5] Cristian Cadar, Daniel Dunbar, Dawson R Engler, and others. 2008. KLEE: Unassisted and Automatic Generation of High-Coverage Tests for Complex Systems Programs. In OSDI.

[6] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In USENIX Security.

[7] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking Modern Defenses. In USENIX Security.

[8] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing software by enforcing data-flow integrity. In Proceedings of the 7th symposium on Operating systems design and implementation.

[9] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi, Hovav Shacham, and Marcel Winandy. 2010. Return-oriented programming without returns. In Proceedings of the 17th ACM conference on Computer and communications security.

[10] Yueqiang Cheng, Zongwei Zhou, Yu Miao, Xuhua Ding, Huijie DENG, and others. 2014. ROPecker: A generic and practical approach for defending against ROP attack. (2014).

[11] Thomas H. Cormen, Clifford Stein, Ronald L. Rivest, and Charles E. Leiserson. 2009. Introduction to Algorithms. The MIT press.

[12] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather Hinton. 1998. StackGuard: automatic adaptive detection and prevention of buffer-overflow attacks. In Usenix Security.

[13] CVEApache 2006. CVE-2006-3747: Off-by-one error in Apache 1.3.34. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3747. (2006).

[14] CVEnginx 2013. CVE-2013-2028: Nginx HTTP server chunked encoding buffer overflow 1.4.0. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2028. (2013).

[15] CVEnullhttpd 2004. CVE-2002-1496: Heap-based buffer overflow in Null HTTP Server 0.5.0. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-1496. (2004).

[16] CVEopenssh 2001. CVE-2001-0144: Integer overflow in OpenSSH 1.2.27. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2001-0144. (2001).

[17] CVEorzhttpd 2009. CVE/bug in OrzHTTPd - Format String. https://www.exploit-db.com/exploits/10282/. (2009).

[18] CVEproftpd 2006. CVE-2006-5815: Stack buffer overflow in ProFTPD 1.3.0. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5815. (2006).

[19] CVEsmbclient 2009. CVE-2009-1886: Format string vulnerability in smbclient 3.2.12. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1886. (2009).

[20] CVEsudo 2012. CVE-2012-0809: Format string vulnerability in SUDO 1.8.3. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0809. (2012).

[21] CVEWireshark 2014. CVE-2014-2299: Buffer overflow in Wireshark 1.8.0. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-2299. (2014).

[22] CVEwuftpd 2001. CVE-2000-0573: Format string vulnerability in wu-ftpd 2.6.0. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-0573. (2001).

[23] Thurston HY Dang, Petros Maniatis, and David Wagner. 2015. The performance cost of shadow stacks and stack canaries. In Proceedings of the 10th ACM Symposium on Information, Computer and Communications Security. ACM, 555–566.

[24] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In USENIX Security.

[25] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2011. ROPdefender: A detection tool to defend against return-oriented programming attacks. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security.

[26] Solar Designer. 1997. return-to-libc attack. Bugtraq, Aug (1997).

[27] Ren Ding, Chenxiong Qian, Chengyu Song, Bill Harris, Taesoo Kim, and Wenke Lee. 2017. Efficient Protection of Path-Sensitive Control Security. (2017).

[28] Tyler Durden. 2002. Bypassing PaX ASLR protection. Phrack magazine #59 (2002).

[29] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin Rinard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control jujutsu: On the weaknesses of fine-grained control flow integrity. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security.

[30] Andreas Follner, Alexandre Bartel, Hui Peng, Yu-Chen Chang, Kyriakos Ispoglou, Mathias Payer, and Eric Bodden. 2016. PSHAPE: Automatically Combining Gadgets for Arbitrary Method Execution. In International Workshop on Security and Trust Management.

[31] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014. Out of control: Overcoming control-flow integrity. In Security and Privacy (SP), 2014 IEEE Symposium on.

[32] Andrei Homescu, Michael Stewart, Per Larsen, Stefan Brunthaler, and Michael Franz. 2012. Microgadgets: size does matter in turing-complete return-oriented programming. In Proceedings of the 6th USENIX conference on Offensive Technologies. USENIX Association, 7–7.

[33] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and Zhenkai Liang. 2015. Automatic Generation of Data-Oriented Exploits. In USENIX Security.

[34] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang. 2016. Data-oriented programming: On the expressiveness of non-control data attacks. In Security and Privacy (SP), 2016 IEEE Symposium on.

[35] Emily R Jacobson, Andrew R Bernat, William R Williams, and Barton P Miller. 2014. Detecting code reuse attacks with a model of conformant program execution. In International Symposium on Engineering Secure Software and Systems.

[36] Arthur B Kahn. 1962. Topological sorting of large networks. Commun. ACM (1962).

[37] V Katoch. Whitepaper on bypassing ASLR/DEP. Technical Report. Secfence, Tech. Rep., September 2011. [Online]. Available: http://www.exploit-db.com/wp-content/themes/exploit/docs/17914.pdf.

[38] Kil3r and Bulba. 2000. Bypassing StackGuard and StackShield. Phrack magazine #53 (2000).

[39] James C King. 1976. Symbolic execution and program testing. Commun. ACM (1976).

[40] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R Sekar, and Dawn Song. 2014. Code-Pointer Integrity. In OSDI, Vol. 14. 00000.

[41] Microsoft. 2015. Visual Studio 2015 — Compiler Options — Enable Control Flow Guard. (2015). https://msdn.microsoft.com/en-us/library/dn919635.aspx.

[42] Tilo Müller. 2008. ASLR smack & laugh reference. Seminar on Advanced Exploitation Techniques (2008).

[43] Urban Müller. 1993. Brainfuck–an eight-instruction turing-complete programming language. Available at the Internet address http://en.wikipedia.org/wiki/Brainfuck (1993).

[44] Ben Niu and Gang Tan. 2014. Modular control-flow integrity. ACM SIGPLAN Notices 49 (2014).

[45] Ben Niu and Gang Tan. 2015. Per-input control-flow integrity. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security.

[46] Pakt. 2013. ropc: A turing complete ROP compiler. https://github.com/pakt/ropc. (2013).

[47] Vasilis Pappas. 2012. kBouncer: Efficient and transparent ROP mitigation. tech. rep. Citeseer (2012).

[48] PAX-TEAM. 2003. PaX ASLR (Address Space Layout Randomization). http://pax.grsecurity.net/docs/aslr.txt. (2003).

[49] Mathias Payer, Antonio Barresi, and Thomas R Gross. 2015. Fine-grained control-flow integrity through binary hardening. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment.

[50] Michalis Polychronakis and Angelos D Keromytis. 2011. ROP payload detection using speculative code execution. In Malicious and Unwanted Software (MALWARE), 2011 6th International Conference on.

[51] The Chromium Projects. 2018. Control Flow Integrity. https://www.chromium.org/developers/testing/control-flow-integrity. (2018).

[52] Gerardo Richarte and others. 2002. Four different tricks to bypass StackShield and StackGuard protection. World Wide Web (2002).

[53] Jonathan Salwan and Allan Wirth. 2012. ROPGadget. https://github.com/JonathanSalwan/ROPgadget. (2012).

[54] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. 2015. Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications. In Security and Privacy (SP), 2015 IEEE Symposium on.

[55] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. 2011. Q: Exploit Hardening Made Easy. In USENIX Security Symposium.

[56] Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: a concolic unit testing engine for C. In ACM SIGSOFT Software Engineering Notes, Vol. 30. ACM, 263–272.

[57] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86). In Proceedings of CCS 2007, Sabrina De Capitani di Vimercati, Paul Syverson, and Moti Yung (Eds.). ACM, New York, NY, USA, 552–561.