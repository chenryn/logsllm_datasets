# Memory Space and Performance in Experimental Systems

Memory space is a critical factor affecting the performance of experimental systems. The system must record information about session partners for the Session Authority (SA) and store resources of experimental services in memory. Additionally, read and write operations on the server log file consume a significant amount of memory. Due to the behavior of the Java garbage collection mechanism, consumed memory is sometimes not released in a timely manner, which can impact system performance. In a distributed environment, the SA and experimental services do not need to share limited memory, leading to improved performance.

## Related Work

### Cross-Realm Authentication
Cross-realm authentication has been extensively discussed in various papers. For example, Kerberos [4][17] supports both direct and transitive cross-realm authentication. Transitive cross-realm authentication allows a principal to access resources in a remote realm by traversing multiple intermediate realms if there is no shared cross-realm key with the remote realm. However, Kerberos assumes that the authentication mechanisms in all federated security realms are homogeneous. In practice, these mechanisms are often heterogeneous and non-interoperable, both in structure and function.

To address the issue of federating such heterogeneous authentication mechanisms, credential conversion mechanisms are widely used in many existing solutions. For instance, the work in [12] presents two types of credential translator services: KCA, which translates Kerberos credentials to PK credentials, and KCT, which translates PK credentials to Kerberos credentials.

Reiter and Stubblebine [16] argue that in large-scale distributed systems, the authentication process often requires the assistance of a path of security authorities, as it is difficult to locate a single authority to authenticate all principals. They suggest using multiple paths to increase assurance on authentication. It is important to note that a Session Authority (SA) in our system differs significantly from the security authority in [16]. A security authority enforces security policies and processes for a security realm to prevent attacks, while an SA is associated with a business session (management system), independent of any local security realm. An SA has simpler functionalities, aiming to provide secure real information to session partners who may belong to different security realms.

### Web Service Federation
The problems related to federation amongst heterogeneous authentication mechanisms used by different security realms are also discussed in the Web service federation protocol [1][10]. This protocol defines a set of credential conversion mechanisms, allowing a principal in one realm to convert its credential to one accepted in another realm within the federation. The issue of discovering a credential chain is extensively discussed in [13], showing that an authentication path can be found in polynomial time if there is a centralized entity holding all the federation information of the security realms involved. Given that session partners in a business session may be determined dynamically at runtime, it is practically difficult to have sufficient information about the security realms before the session's execution. Without a centralized entity, the job becomes much more challenging, and in the extreme case, all potentially involved realms need to be searched before an authentication path can be identified.

### WS-Coordination
To realize peer-to-peer collaborations among Web services, IBM, Microsoft, and BEA proposed the WS-Coordination specification [3] in August 2002. WS-Coordination describes an extensible framework for supporting the coordination of actions in distributed applications. However, WS-Coordination is intended only as a meta-specification governing the specifications of concrete forms of coordination and does not address the security issues discussed in this paper.

## Conclusions

In practice, a dynamic business process may involve many applications and services belonging to different organizations and security realms. The dynamic authentication process between organizations can be highly complex and time-consuming, especially if intermediate authentication paths need to be created and credentials converted. When there is no existing authentication relationship between two organizations, it is practically difficult for a system to enable secure collaboration between their services in a just-in-time fashion.

We have developed a new authentication system for multi-party service interactions that does not require credential conversion or the establishment of any authentication path between collaborative session partners. The system also offers the ability to identify individual service instances within a business session, even if some instances belong to the same service. Although the amount of communication between session partners and the Session Authority (SA) imposes some performance overhead, we conducted comprehensive experiments to assess this overhead. Two service-oriented Grid systems were used, and the results were collected in a realistic and distributed setting capable of accommodating over 300,000 service instances. The main results show that the overhead imposed by our authentication system is comparable to that caused by standard security mechanisms in those Grid middleware systems.

An interesting future question is how heterogeneous security realms agree upon the usage of secret keys within a session. We are developing a negotiation protocol to address this issue.

## Acknowledgements

This work is partially supported by the EPSRC/BAE Systems NECTISE project, the ESRC MoSeS project, the EPSRC WRG project, and the EPSRC CoLaB project. We thank Dr. Paul Townend for his help and suggestions in preparing this paper.

## References

[1] S. Bajaj, G. Della-Libera, B. Dixon, M. Dusche, M. Hondo, M. Hur, C. Kaler, H. Lockhart, H. Maruyama, A. Nadalin, N. Nagaratnam, A. Nash, H. Prafullchandra, and J. Shewchuk, “Web Services Federation Language (WS-Federation),” available from http://msdn2.microsoft.com/en-us/library/ms951236.aspx, Jul. 2003.

[2] M. Burrows, M. Abadi, and R. Needham, “A Logic of Authentication,” ACM Trans. on Computer Systems, Feb. 1990, pp. 18-36.

[3] F. Cabrera, G. Copeland, T. Freund, J. Klein, D. Langworthy, D. Orchard, J. Shewchuk, and T. Storey, “Web Services Coordination (WS-Coordination),” available from http://www.ibm.com/developerworks/library/ws-coor/, Aug. 2002.

[4] I. Cervesato, A.D. Jaggard, A. Scedrov, and C. Walstad, “Specifying Kerberos 5 Cross-Realm Authentication,” Proc. Workshop on Issues in the Theory of Security, Long Beach, California, USA, 2005, pp. 12 – 26.

[5] N. Cook, S. Shirvastava, and S. Wheater, “Distributed Object Middleware to Support Dependable Information Sharing between Organisations,” Proc. International Conference on Dependable Systems and Networks, Maryland, USA, Jun. 2002, pp. 249-258.

[6] K. Czajkowski, D. Ferguson, I. Foster, J. Frey, S. Graham, I. Sedukhin, D. Snelling, S. Tuecke, W. Vambenepe, “The WS-Resource Framework Version 1.0,” available from http://www.globus.org/wsrf/specs/ws-wsrf.pdf, 3 May 2004.

[7] D. Georgakopoulos and M. Hornick, “An Overview of Workflow Management: From Process Modelling to Workflow Automation Infrastructure,” Distributed and Parallel Database, Springer, Mar. 2005, pp. 119-153.

[8] Li Gong, “Increasing Availability and Security of an Authentication Service,” IEEE J. Selected Areas in Communication, vol. 11, no. 5, June 1993, pp. 657-662.

[9] S. Hada and H. Maruyama, “Session Authentication Protocol for Web Services,” Proc. Symposium on Application and the Internet, Jan. 2002, pp. 158-165.

[10] M. Hondo, N. Nagaratnam, and A. J. Nadalin, “Securing Web Services,” IBM Systems J., 2002.

[11] M. Huhns and M. P. Singh, “Service-Oriented Computing: Key Concepts and Principles,” IEEE Internet Computing, vol. 9, no. 1, Jan. 2005, pp. 75-81.

[12] O. Kornievskaia, P. Honeyman, B. Doster, and K. Coffman, “Kerberized Credential Translation: A Solution to Web Access Control,” Proc. 10th USENIX Security Symposium, Washington, DC, USA, Aug. 2001.

[13] N. Li, W. Winsborough, and J.C. Mitchell, “Distributed Credential Chain Discovery in Trust Management,” J. Computer Security, vol. 11, no. 1, 2003, pp. 35-86.

[14] P. C. van Oorschot, “Extending Cryptographic Logics of Belief to Key Agreement Protocols,” Proc. the 1st ACM Conference on Computer and Communications Security, Fairfax, Virginia, USA, Nov. 1993, pp. 233–243.

[15] S. Rafaeli and D. Hutchison, “A Survey of Key Management for Secure Group Communication,” ACM Comput. Surveys, vol. 35, no. 3, Sep. 2003, pp. 309-329.

[16] M. K. Reiter and S. G. Stubblebine, “Resilient Authentication Using Path Independence,” IEEE Trans. Computers, vol. 47, no. 12, Dec. 1998, pp. 1351-1362.

[17] W. Stallings, Cryptography and Network Security: Principles and Practices, Prentice Hall, Upper Saddle River, New Jersey, 1999.

[18] M. Steiner, G. Tsudik, and M. Waidner, “Diffie-Hellman Key Distribution Extended to Group Communication,” Proc. of the 3rd ACM Conference on Computer and Communications Security, New Delhi, India, Mar. 1996, pp. 31-37.

[19] H. Sun, Y. Zhu, C. Hu, J. Huai, Y. Liu, and J. Li, “Early Experience of Remote and Hot Service Deployment with Trustworthiness in CROWN Grid,” Proc. APPT, 2005, pp. 301-312.

[20] C. K. Wong, M. G. Gouda, and S. S. Lam, “Secure Group Communications Using Key Graphs,” Proc. ACM SIGCOMM '98 Conf. Applications, Technologies, Architectures, and Protocols for Computer Comm., 1998, pp. 68-79.