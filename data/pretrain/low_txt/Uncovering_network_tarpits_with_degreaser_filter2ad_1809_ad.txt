### 5. BUILDING A BETTER TARPIT

Network deception has proven to be an effective tool for thwarting attackers. However, our research indicates that current tarpit applications are relatively easy to detect and could potentially be integrated into malicious scanning tools. Below, we present several recommendations to improve network tarpits, making them less distinguishable from legitimate hosts.

#### TCP Options
Fingerprinting using TCP options can be mitigated by supporting these options in the tarpit. As shown in Section 3.2.2, the low number of TCP connections without options is a key indicator of tarpit activity. An improved tarpit would respond to incoming SYN packets with similar TCP options. Appending TCP options can be done with minimal performance degradation and still maintains the advantage of not requiring the tarpit to maintain per-connection state.

#### Window Obfuscation
Overcoming the TCP window size characteristic is more challenging because setting a small window size is fundamental to the operation of existing tarpit applications. The Netfilter TARPIT plugin, for example, shrinks the window during the three-way handshake. The SYN/ACK contains a hardcoded 5-byte window, and once the client sends the final ACK, the plugin responds with another ACK, shrinking the window to zero. This behavior is easily detectable as it occurs immediately after the connection establishment.

An improved tarpit could delay the window shrinking until later in the connection. It would send its SYN/ACK with a sufficiently large window. The client would then attempt to send a data packet. The tarpit would examine the data packet and send an ACK, but only for part of the data and reduce the window by an amount larger than the size of the ACK. The client would attempt to retransmit the "lost" data, and this process would continue until the window is reduced to zero. Unlike supporting TCP options, this method requires the tarpit to maintain a receive window, inducing per-connection state. However, the per-connection state is minimal since the tarpit does not need to keep any partial data packets. Once a zero window is sent, all per-connection state information can be discarded.

By gradually shrinking the window over several data packets, the tarpit continues to lure the client, making immediate detection more difficult. While this behavior is strongly discouraged by the TCP standard, conforming implementations must handle it, ensuring that the improved tarpit effectively traps hosts.

#### TCP Retransmissions
Another improvement involves exploiting the nature of TCP retransmissions to enhance the stickiness of the tarpit. Most TCP implementations attempt retransmission at least three times before closing the connection. An improved tarpit would discard the first two packets and wait for the third before responding. This incurs the cost of remembering unacknowledged packets for each TCP connection but can effectively slow the connection by several round-trip times (RTTs). The space overhead of remembering packets can be reduced by storing only a hash of the TCP header, assuming the host will not change the header during retransmission.

### 6. CONCLUSIONS

In this work, we developed `degreaser`, a tool to infer the presence of fake tarpitting hosts and networks. By probing at least one address in each /24 network on the Internet, `degreaser` uncovered more than 100 different tarpit subnetworks. Notably, six of these tarpits are /16 networks, with two of them using all their addresses for tarpitting. Overall, we found over 215,000 active IP addresses that are fake, distributed across 29 countries and 77 autonomous systems.

While the size and extent of tarpits discovered on today's Internet are small relative to the entire Internet, `degreaser` successfully identifies these needles in a haystack. Even small blocks of tarpit addresses can significantly slow automated scans, which is part of their intended capturing behavior.

Our results highlight the reality of cyber-deception and the need for additional research. It is currently unknown whether the observed deception is security or policy-related, such as an attempt to influence address allocation policies. In general, it is an open question whether the use of deception is becoming more popular. We plan to run `degreaser` periodically to perform longitudinal studies.

While we are confident in our classification of LaBrea and Netfilter-based tarpits, our scans reveal several other behaviors inconsistent with either type of tarpit or real hosts. We encountered non-tarpitting hosts that accept TCP connections on well-known ports, ACK data packets, but provide no application layer response (such as an HTTP Bad Request). Some of these hosts eventually terminate the connection using FINs, while others do not. More exotic behaviors include networks that accept our connection attempts but suddenly stop responding after scanning several hosts. A second attempt scanning the same network results in no successful connections, while scans from a different origin network are successful. The combined use of deception and temporal blacklisting warrants future study.

The effectiveness of tarpits is difficult to measure against the ever-increasing range of attacks plaguing the Internet. Our work has shown the simplicity in detecting tarpits, and we can only assume that as malicious scanning tools evolve, they will become more resilient to the effects of tarpits. Furthermore, we believe that our detection methodology could easily be incorporated into operating system TCP stacks to automatically skip tarpits, providing immunity to all network applications (abusive or otherwise).

Due to the negative effect these tarpitting subnets have on various legitimate network scans, we suggest more explicit distribution of known tarpits among whitehat communities in conjunction with using techniques developed in `degreaser`. Additionally, we presented avenues for future research into making tarpits more resilient to detection and more believable to adversaries. We hope this work raises awareness of a particular form of network deception that is prevalent in the wild and its present-day implications.

### Acknowledgments

We thank Mark Gondree, kc claffy, John Heidemann, and our reviewers for their feedback. Nathan Desso helped with early experiments and coined the `degreaser` moniker. This work was supported in part by the Department of Homeland Security (DHS) under contract N66001-2250-58231 and by U.S. NSF grant CNS-1228994. The views and conclusions are those of the authors and should not be interpreted as representing the official policies or positions of the U.S. government or DHS.

### 7. REFERENCES

[1] The CAIDA UCSD Anonymized Internet Traces, 2013. http://www.caida.org/data/passive/passive_2013_dataset.xml.
[2] ANT Censuses of the Internet Address Space, 2014. http://www.isi.edu/ant/address/.
[3] IANA WHOIS Service, 2014. http://www.iana.org/whois.
[4] Internet-Wide Scan Data Repository, 2014. https://scans.io/study/sonar.http.
[5] L. Alt. Degreaser git repository, 2014. https://github.com/lancealt/degreaser.
[6] P. Baecher, M. Koetter, T. Holz, M. Dornseif, and F. Freiling. The nepenthes platform: An efficient approach to collect malware. In Recent Advances in Intrusion Detection, pages 165–184. Springer, 2006.
[7] J. Black and P. Rogaway. Ciphers with arbitrary finite domains. In Topics in Cryptology–CT-RSA, pages 114–130. Springer, 2002.
[8] X. Cai and J. Heidemann. Understanding block-level address usage in the visible internet. In Proceedings of ACM SIGCOMM, pages 99–110, 2010.
[9] B. Chun, D. Culler, T. Roscoe, A. Bavier, L. Peterson, M. Wawrzoniak, and M. Bowman. Planetlab: an overlay testbed for broad-coverage services. ACM SIGCOMM Computer Communication Review, 33(3):3–12, 2003.
[10] F. Cohen. A note on the role of deception in information protection. Computers & Security, 17(6):483–506, 1998.
[11] R. Craven, R. Beverly, and M. Allman. A Middlebox-Cooperative TCP for a non End-to-End Internet. In Proceedings of ACM SIGCOMM, pages 151–162, 2014.
[12] Z. Durumeric, E. Wustrow, and J. A. Halderman. Zmap: Fast internet-wide scanning and its security applications. In Proceedings of the 22nd USENIX Security, 2013.
[13] T. Eggendorfer. Reducing spam to 20% of its original value with a SMTP tar pit simulator. In MIT Spam Conference, 2007.
[14] M. Honda, Y. Nishida, C. Raiciu, A. Greenhalgh, M. Handley, and H. Tokuda. Is it still possible to extend TCP? In Proceedings of the ACM SIGCOMM Internet Measurement Conference, pages 181–194, 2011.
[15] A. Hopkins. iptables TARPIT target, 2014. http://xtables-addons.sourceforce.net.
[16] T. Hunter, P. Terry, and A. Judge. Distributed tarpitting: Impeding spam across multiple servers. In LISA, volume 3, pages 223–236, 2003.
[17] V. Jacobson, R. Braden, and D. Borman. TCP Extensions for High Performance. RFC 1323, May 1992.
[18] J. H. Jafarian, E. Al-Shaer, and Q. Duan. Openflow random host mutation: transparent moving target defense using software defined networking. In Proceedings of Hot topics in software defined networks, pages 127–132, 2012.
[19] J. Jung and E. Sit. An empirical study of spam traffic and the use of DNS black lists. In Proceedings of the ACM SIGCOMM Conference on Internet Measurement, 2004.
[20] T. Kohno, A. Broido, and K. C. Claffy. Remote physical device fingerprinting. Dependable and Secure Computing, IEEE Transactions on, 2(2):93–108, 2005.
[21] T. Liston. Labrea, 2003. http://labrea.sourceforge.net/labrea.1.txt.
[22] G. F. Lyon. Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning. Insecure, 2009.
[23] D. Moore, C. Shannon, and J. Brown. Code-Red: a case study on the spread and victims of an Internet worm. In Internet Measurement Workshop, pages 273–284, Nov 2002.
[24] D. Moore, C. Shannon, G. Voelker, and S. Savage. Network Telescopes. Technical report, Cooperative Association for Internet Data Analysis (CAIDA), Jul 2004.
[25] G. Portokalidis, A. Slowinska, and H. Bos. Argos: an emulator for fingerprinting zero-day attacks for advertised honeypots with automatic signature generation. In ACM SIGOPS, volume 40, pages 15–27, 2006.
[26] J. Postel. Transmission Control Protocol. RFC 793, Sept. 1981.
[27] Y. Pradkin and J. Heidemann. Browsing the internet address space. Web site http://www.isi.edu/ant/address/browse/, Feb. 2008.
[28] N. C. Rowe. The ethics of deception in cyberspace. Handbook of Research on Technoethics, 2008.
[29] N. C. Rowe and H. C. Goh. Thwarting cyber-attack reconnaissance with inconsistency and deception. In Information Assurance and Security Workshop, 2007.
[30] C. Ruvalcaba. Smart IDS - Hybrid Labrea Tarpit. 2009. http://www.sans.org/reading-room/whitepapers/detection/smart-ids-hybrid-labrea-tarpit-33254.
[31] L. Spitzner. The honeynet project: Trapping the hackers. IEEE Security & Privacy, 1(2):15–23, 2003.
[32] S. Trassare, R. Beverly, and D. Alderson. A technique for network topology deception. In MILCOM, Nov. 2013.
[33] USC/LANDER Project. Internet ipv4 address space census. PREDICT ID USC-LANDER/internet_address_survey_it58w-20140122, Jan. 2014.
[34] A. G. West, A. J. Aviv, J. Chang, and I. Lee. Spam mitigation using spatio-temporal reputations from blacklist history. In Proceedings of the 26th Annual Computer Security Applications Conference, pages 161–170, 2010.
[35] V. Yegneswaran, P. Barford, and D. Plonka. On the design and use of internet sinks for network abuse monitoring. In Recent Advances in Intrusion Detection, pages 146–165, 2004.
[36] M. Zalewski. Passive OS fingerprinting tool, 2012. http://lcamtuf.coredump.cx/p0f3/.
[37] J. Zhuge, T. Holz, X. Han, C. Song, and W. Zou. Collecting autonomous spreading malware using high-interaction honeypots. In Information and Communications Security, pages 438–451. Springer, 2007.