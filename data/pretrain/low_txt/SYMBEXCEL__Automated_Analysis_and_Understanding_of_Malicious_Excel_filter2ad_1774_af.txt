### Automating the Differential Analysis of Evasive Malware Samples

This paper introduces MalGene, a technique for automatically extracting analysis evasion signatures from evasive malware samples. Moser et al. [52] leverage forced execution to achieve multi-path exploration on malware. However, their approach has a significant limitation: it cannot handle self-modifying code. Symbolic analysis of self-modifying code is a challenging problem that, to the best of our knowledge, has only been addressed in a very restricted scope—specifically, via the concretization of jump targets in x86 binary code [72]. Thanks to the nature of the XL4 grammar and its memory model, we demonstrate that this problem becomes solvable in the domain of XL4 macros.

While most existing approaches use symbolic execution to drive the execution to specific portions of the code, our approach employs symbolic execution to handle unknowns about the environment and deobfuscate malicious code. In this respect, our method is similar to techniques like Rambo [68], which focus on unpacking. However, our approach stands out by combining metadata about the structure of the Excel grammar to guide the concretization process, resulting in code that can be successfully executed.

### Conclusions

This paper examines the malware ecosystem surrounding Excel 4.0 macros, a distribution vector that has recently gained popularity among malicious actors. To address this, we developed SYMBEXCEL, a tool that can automatically deobfuscate complex Excel 4.0 malware. Our system is based on symbolic execution, a powerful program analysis technique that models interactions between the macro and the environment. This model allows our system to represent values from the environment as symbolic variables, thereby coping with sandbox detection and formula decryption techniques embedded in modern Excel 4.0 malware. Our evaluation highlights that our system represents a significant advancement in the fight against malicious Excel 4.0 macros, as it supports the analysis of a much larger number of samples compared to state-of-the-art tools.

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 13:00:02 UTC from IEEE Xplore. Restrictions apply.**

### Acknowledgments

We would like to thank the anonymous reviewers for their valuable feedback. We also extend our gratitude to Sebastiano Mariani and Jason Zhang for their assistance in evaluating our work. Additionally, we thank Amirreza Niakanlahiji (also known as DissectMalware) for developing and maintaining XLMMacroDeobfuscator and xlrd2. Among the authors, Christopher Kruegel is VP Security Services at VMware, Inc., and Giovanni Vigna is the Sr. Director of Threat Intelligence at VMware. This research is supported by the National Science Foundation (NSF) under Award No. CNS-1704253, and by donations from Intel and Activision. The views and conclusions expressed herein are those of the authors and do not necessarily represent the official policies or endorsements of the sponsors.

### References

[1] abuse.ch. MalwareBazaar: Malware sample exchange. https://bazaar.abuse.ch/, 2022.
[2] abuse.ch. URLhaus: Malware URL exchange. https://urlhaus.abuse.ch/, 2022.
[3] Hojjat Aghakhani, Fabio Gritti, Francesco Mecca, Martina Lindorfer, Stefano Ortolani, Davide Balzarotti, Giovanni Vigna, and Christopher Kruegel. When Malware is Packin’Heat; Limits of Machine Learning Classifiers Based on Static Analysis Features. In Network and Distributed Systems Security (NDSS) Symposium 2020, 2020.
[4] Efthimia Aivaloglou, David Hoepelman, and Felienne Hermans. A grammar for spreadsheet formulas evaluated on two large datasets. In 2015 IEEE 15th International Working Conference on Source Code Analysis and Manipulation (SCAM), pages 121–130. IEEE, 2015.
[5] Efthimia Aivaloglou, David Hoepelman, and Felienne Hermans. Parsing excel formulas: A grammar and its application on 4 large datasets. Journal of Software: Evolution and Process, 29(12):e1895, 2017.
[6] AlienVault OTX. AlienVault OTX. https://otx.alienvault.com/, 2022.
[7] Omar Alrawi, Moses Ike, Matthew Pruett, Ranjita Pai Kasturi, Srimanta Barua, Taleb Hirani, Brennan Hill, and Brendan Saltaformaggio. Forecasting Malware Capabilities From Cyber Attack Memory Images. In 30th USENIX Security Symposium (USENIX Security 21), 2021.
[8] E. W. Bachtal. Excel Formula Parsing. https://ewbi.blogs.com/develops/2004/12/excel_formula_p.html, 2021.
[9] Roberto Baldoni, Emilio Coppa, Daniele Cono D’Elia, and Camil Demetrescu. Assisting malware analysis with symbolic execution: A case study. In International conference on cyber security cryptography and machine learning, pages 171–188. Springer, 2017.
[10] Eduard Baranov, Fabrizio Biondi, Olivier Decourbe, Thomas Given-Wilson, Axel Legay, Cassius Puodzius, Jean Quilbeuf, and Stefano Sebastio. Efficient Extraction of Malware Signatures Through System Calls and Symbolic Execution: An Experience Report. hal-01954483, 2018.
[11] Ulrich Bayer, Imam Habibi, Davide Balzarotti, Engin Kirda, and Christopher Kruegel. A View on Current Malware Behaviors. In LEET, 2009.
[12] Calvin Brierley, Jamie Pont, Budi Arief, David J Barnes, and Julio Hernandez-Castro. Persistence in Linux-based IoT malware. In Nordic Conference on Secure IT Systems, pages 3–19. Springer, 2020.
[13] Edmund Brumaghin, Mariano Graziano, and Nick Mavis. SQUIRRELWAFFLE Leverages malspam to deliver Qakbot, Cobalt Strike. https://blog.talosintelligence.com/2021/10/squirrelwaffle-emerges.html, 2021.
[14] David Brumley, Cody Hartwig, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, Dawn Song, and Heng Yin. Bitscope: Automatically dissecting malicious binaries. Technical report, Citeseer, 2007.
[15] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Dawn Song, and Heng Yin. Automatically identifying trigger-based behavior in malware. In Botnet Detection, pages 65–88. Springer, 2008.
[16] Haipeng Cai, Na Meng, Barbara Ryder, and Daphne Yao. Droidcat: Effective android malware detection and categorization via app-level profiling. IEEE Transactions on Information Forensics and Security, 14(6):1455–1470, 2018.
[17] Davide Canali, Andrea Lanzi, Davide Balzarotti, Christopher Kruegel, Mihai Christodorescu, and Engin Kirda. A quantitative study of accuracy in system call-based malware detection. In Proceedings of the 2012 International Symposium on Software Testing and Analysis, pages 122–132, 2012.
[18] J Carrillo-Mondéjar, José Luis Martínez, and Guillermo Suarez-Tangil. Characterizing Linux-based malware: Findings and recent trends. Future Generation Computer Systems, 110:267–281, 2020.
[19] Binlin Cheng, Jiang Ming, Jianmin Fu, Guojun Peng, Ting Chen, Xiaosong Zhang, and Jean-Yves Marion. Towards paving the way for large-scale Windows malware analysis: Generic binary unpacking with orders-of-magnitude performance boost. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 395–411, 2018.
[20] Mihai Christodorescu, Somesh Jha, Sanjit A Seshia, Dawn Song, and Randal E Bryant. Semantics-aware malware detection. In 2005 IEEE Symposium on Security and Privacy (S&P), pages 32–46. IEEE, 2005.
[21] Paolo Milani Comparetti, Guido Salvaneschi, Engin Kirda, Clemens Kolbitsch, Christopher Kruegel, and Stefano Zanero. Identifying dormant functionality in malware programs. In 2010 IEEE Symposium on Security and Privacy (S&P), pages 61–76. IEEE, 2010.
[22] Emanuele Cozzi, Mariano Graziano, Yanick Fratantonio, and Davide Balzarotti. Understanding Linux malware. In 2018 IEEE Symposium on Security and Privacy (S&P), pages 161–175. IEEE, 2018.
[23] Emanuele Cozzi, Pierre-Antoine Vervier, Matteo Dell’Amico, Yun Shen, Leyla Bilge, and Davide Balzarotti. The tangled genealogy of IoT malware. In Annual Computer Security Applications Conference, pages 1–16, 2020.
[24] Jedidiah R Crandall, Gary Wassermann, Daniela AS De Oliveira, Zhendong Su, S Felix Wu, and Frederic T Chong. Temporal search: Detecting hidden malware timebombs with virtual machines. ACM SIGOPS Operating Systems Review, 40(5):25–36, 2006.
[25] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. FIE on firmware: Finding vulnerabilities in embedded systems using symbolic execution. In 22nd USENIX Security Symposium (USENIX Security 13), pages 463–478, 2013.
[26] Leonardo De Moura and Nikolaj Bjørner. Z3: An efficient SMT solver. In International conference on Tools and Algorithms for the Construction and Analysis of Systems, pages 337–340. Springer, 2008.
[27] Fabio Gritti, Lorenzo Fontana, Eric Gustafson, Fabio Pagani, Andrea Continella, Christopher Kruegel, and Giovanni Vigna. Symbion: Interleaving symbolic with concrete execution. In 2020 IEEE Conference on Communications and Network Security (CNS), pages 1–10. IEEE, 2020.
[28] James Haughom and Stefano Ortolani. Evolution of Excel 4.0 Macro Weaponization. https://www.lastline.com/labsblog/evolution-of-excel-4-0-macro-weaponization, 2020.
[29] Grant Hernandez, Farhaan Fowze, Dave Tian, Tuba Yavuz, and Kevin RB Butler. Firmusb: Vetting USB device firmware using domain-informed symbolic execution. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 2245–2262, 2017.
[30] Grégoire Jacob, Paolo Milani Comparetti, Matthias Neugschwandtner, Christopher Kruegel, and Giovanni Vigna. A static, packer-agnostic filter to detect similar malware samples. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 102–122. Springer, 2012.
[31] Moonsu Jang, Hongchul Kim, and Youngtae Yun. Detection of DLL inserted by Windows malicious code. In 2007 International Conference on Convergence Information Technology (ICCIT 2007), pages 1059–1064. IEEE, 2007.
[32] Noah M Johnson, Juan Caballero, Kevin Zhijie Chen, Stephen McCamant, Pongsin Poosankam, Daniel Reynaud, and Dawn Song. Differential slicing: Identifying causal execution differences for security applications. In 2011 IEEE Symposium on Security and Privacy (S&P), pages 347–362. IEEE, 2011.
[33] Min Gyung Kang, Heng Yin, Steve Hanna, Stephen McCamant, and Dawn Song. Emulating emulation-resistant malware. In Proceedings of the 1st ACM workshop on Virtual machine security, pages 11–22, 2009.
[34] Sangwoo Kim, Seokmyung Hong, Jaesang Oh, and Heejo Lee. Obfuscated VBA macro detection using machine learning. In 2018 48th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), pages 490–501. IEEE, 2018.
[35] Dhilung Kirat and Giovanni Vigna. Malgene: Automatic extraction of malware analysis evasion signature. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 769–780, 2015.
[36] Alexander Küchler, Alessandro Mantovani, Yufei Han, Leyla Bilge, and Davide Balzarotti. Does Every Second Count? Time-based Evolution of Malware Behavior in Sandboxes. In Proceedings of the Network and Distributed System Security Symposium, NDSS. The Internet Society, 2021.
[37] Bum Jun Kwon, Jayanta Mondal, Jiyong Jang, Leyla Bilge, and Tudor Dumitraş. The dropper effect: Insights into malware distribution with downloader graph analytics. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 1118–1129, 2015.
[38] Philippe Lagadec. A VBA parser and emulation engine to analyze malicious macros. https://github.com/decalage2/ViperMonkey.
[65] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls, Nick Stephens, Mario Polino, Andrew Dutcher, John Grosen, Siji Feng, Christophe Hauser, Christopher Kruegel, et al. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. 2016 IEEE Symposium on Security and Privacy (S&P), pages 138–157, 2016.
[66] Robert Simmons. Excel 4.0 Macros - The Risk of Hidden Threats in Compound Files. https://blog.reversinglabs.com/blog/excel-4.0-macros, 2020.
[67] Baibhav Singh. Evolution of Excel 4.0 Macro Weaponization, Part 2. https://blogs.vmware.com/networkvirtualization/2020/10/evolution-of-excel-4-0-macro-weaponization-continued.html, 2020.
[68] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G Bringas. Rambo: Run-time packer analysis with multiple branch observation. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 186–206. Springer, 2016.
[69] Pierre-Antoine Vervier and Yun Shen. Before toasters rise up: A view into the emerging IoT threat landscape. In International Symposium on Research in Attacks, Intrusions, and Defenses, pages 556–576. Springer, 2018.
[70] Huanran Wang, Weizhe Zhang, Hui He, Peng Liu, Daniel Xiapu Luo, Yang Liu, Jiawei Jiang, Yan Li, Xing Zhang, Wenmao Liu, et al. An evolutionary study of IoT malware. IEEE Internet of Things Journal, 2021.
[71] Ke Xu, Yingjiu Li, Robert Deng, Kai Chen, and Jiayun Xu. Droidevolver: Self-evolving Android malware detection system. In 2019 IEEE European Symposium on Security and Privacy (EuroS&P), pages 47–62. IEEE, 2019.
[72] Babak Yadegari and Saumya Debray. Symbolic execution of obfuscated code. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 732–744, 2015.
[73] Maher Yamout. WIRTE’s campaign in the Middle East ‘living off the land’ since at least 2019. https://securelist.com/wirtes-campaign-in-the-middle-east-living-off-the-land-since-at-least-2019/105044/, 2021.
[74] Yanfang Ye, Dingding Wang, Tao Li, and Dongyi Ye. IMDS: Intelligent malware detection system. In Proceedings of the 13th ACM SIGKDD international conference on Knowledge discovery and data mining, pages 1043–1047, 2007.
[75] Jason Zhang. Emotet Is Not Dead (Yet). https://blogs.vmware.com/security/2022/01/emotet-is-not-dead-yet.html, 2022.
[76] Jason Zhang. Emotet Is Not Dead (Yet), Part 2. https://blogs.vmware.com/security/2022/02/emotet-is-not-dead-yet-part-2.html, 2022.
[77] Xiaochen Zou, Guoren Li, Weiteng Chen, Hang Zhang, and Zhiyun Qian. SyzScope: Revealing High-Risk Security Impacts of Fuzzer-Exposed Bugs in Linux kernel. In 31st USENIX Security Symposium (USENIX Security 22), Boston, MA, 2022. USENIX Association.
[39] Philippe Lagadec. oletools - Python tools to analyze MS OLE2 files (Structured Storage, Compound File Binary Format) and MS Office documents, for malware analysis, forensics, and debugging. https://github.com/decalage2/oletools.
[40] Andrea Lanzi, Monirul I Sharif, and Wenke Lee. K-Tracer: A System for Extracting Kernel Malware Behavior. In NDSS, pages 255–264. Citeseer, 2009.
[41] Tal Leibovich and Elad Ciuraru. Identifying Excel 4.0 Macro strains using Anomaly Detection. https://www.linkedin.com/in/tal-leibovich-857bb790/, 2021. DEFCON 29, AI Village.
[42] Alessandro Mantovani, Simone Aonzo, Xabier Ugarte-Pedrero, Alessio Merlo, and Davide Balzarotti. Prevalence and Impact of Low-Entropy Packing Schemes in the Malware Ecosystem. In NDSS, 2020.
[43] Microsoft. Excel functions. https://support.microsoft.com/en-us/office/excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188, 2021.
[44] Microsoft. Excel (.xls) Binary File Format. https://interoperability.blob.core.windows.net/files/MS-XLS/[MS-XLS].pdf, 2021.
[45] Microsoft. Excel (.xlsb) Binary File Format. https://interoperability.blob.core.windows.net/files/MS-XLSB/[MS-XLSB].pdf, 2021.
[46] Microsoft. WS-AtomicTransaction Configuration Utility. https://docs.microsoft.com/en-us/dotnet/framework/wcf/ws-atomictransaction-configuration-utility-wsatconfig-exe, 2021.
[47] Microsoft. XLM + AMSI: New runtime defense against Excel 4.0 macro malware. https://www.microsoft.com/security/blog/2021/03/03/xlm-amsi-new-runtime-defense-against-excel-4-0-macro-malware/, 2021.
[48] Mamoru Mimura and Hiroya Miura. Detecting unseen malicious VBA macros with NLP techniques. Journal of Information Processing, 27:555–563, 2019.
[49] Mamoru Mimura and Taro Ohminami. Towards efficient detection of malicious VBA macros with LSI. In International Workshop on Security, pages 168–185. Springer, 2019.
[50] Hiroya Miura, Mamoru Mimura, and Hidema Tanaka. Macros finder: Do you remember loveletter? In International Conference on Information Security Practice and Experience, pages 3–18. Springer, 2018.
[51] Steve Morgan. Cybercrime to cost the world $10.5 trillion annually by 2025. https://cybersecurityventures.com/cybercrime-damage-costs-10-trillion-by-2025/, 2021.
[52] Andreas Moser, Christopher Kruegel, and Engin Kirda. Exploring multiple execution paths for malware analysis. In 2007 IEEE Symposium on Security and Privacy (S&P), pages 231–245. IEEE, 2007.
[53] Amirreza Niakanlahiji. XLMMacroDeobfuscator. https://github.com/DissectMalware/XLMMacroDeobfuscator, 2020.
[54] Amirreza Niakanlahiji. https://twitter.com/DissectMalware/status/1466124524282212353, 2021.
[55] Dario Nisi, Mariano Graziano, Yanick Fratantonio, and Davide Balzarotti. Lost in the Loader: The Many Faces of the Windows PE File Format. In 24th International Symposium on Research in Attacks, Intrusions and Defenses, pages 177–192, 2021.
[56] Library of Congress (loc.gov). Microsoft Office Excel 97-2003 Binary File Format (.xls, BIFF8). https://www.loc.gov/preservation/digital/formats/fdd/fdd000510.shtml, 2021.
[57] Library of Congress (loc.gov). Microsoft office excel 97-2003 binary file format (.xls, biff8). https://www.loc.gov/preservation/digital/formats/fdd/fdd000510.shtml, 2021.
[58] Philip Treacy. Excel 4.0 Macro Functions Reference. https://www.myonlinetraininghub.com/excel-4-macro-functions/, 2017.
[59] Daniel Plohmann, Martin Clauss, Steffen Enders, and Elmar Padilla. Malpedia: A collaborative effort to inventorize the malware landscape. In Proceedings of the Botconf, 2017.
[60] Andrea Possemato, Dario Nisi, and Yanick Fratantonio. Preventing and Detecting State Inference Attacks on Android. In Proceedings of the 2021 Network and Distributed System Security Symposium (NDSS), Virtual, 21st-25th February, 2021.
[61] Chandrasekar Ravi and R Manoharan. Malware detection using windows API sequence and machine learning. International Journal of Computer Applications, 43(17):12–16, 2012.
[62] Konrad Rieck, Thorsten Holz, Carsten Willems, Patrick Düssel, and Pavel Laskov. Learning and classification of malware behavior. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, pages 108–125. Springer, 2008.
[63] Silvia Sebastián and Juan Caballero. Avclass2: Massive malware tag extraction from AV labels. In Annual Computer Security Applications Conference, pages 42–53, 2020.
[64] Stefano Sebastio, Eduard Baranov, Fabrizio Biondi, Olivier Decourbe, Thomas Given-Wilson, Axel Legay, Cassius Puodzius, and Jean Quilbeuf. Optimizing symbolic execution for malware behavior classification. Computers & Security, 93:101775, 2020.

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 13:00:02 UTC from IEEE Xplore. Restrictions apply.**

### Appendix

**Figure 7:** Heatmap representation of the behavioral (lower triangle) and structural (upper triangle) similarity of the malicious samples.

**Figure 8:** Timeline of the number of families observed over time.

**1081**

**Authorized licensed use limited to: Tsinghua University. Downloaded on August 07, 2022 at 13:00:02 UTC from IEEE Xplore. Restrictions apply.**