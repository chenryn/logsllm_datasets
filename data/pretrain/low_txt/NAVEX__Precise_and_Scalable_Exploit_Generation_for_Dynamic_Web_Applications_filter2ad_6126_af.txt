### Vulnerability Detection and Exploit Generation

#### Comparison with Chainsaw
NAVEX identified the same number of XSS (Cross-Site Scripting) and SQLI (SQL Injection) vulnerabilities in `scarf` and `Eve` as Chainsaw. However, NAVEX reported more vulnerable sinks for `myBloggie`. Additionally, NAVEX discovered 71 vulnerable sinks in `HotCRP`, `osCommerce`, and `phpBB` due to its ability to handle object-oriented PHP code, a feature not available in Chainsaw. Compared to RIPS, NAVEX found 19 more vulnerable sinks in `phpBB`, `osCommerce`, and `myBloggie`, but missed 2 vulnerable sinks in `HotCRP` due to missing edges in the code property graph that represent dynamic function calls.

#### Exploit Generation
Chainsaw supports generating exploits for XSS and SQLI. We compared it with NAVEX in terms of the total number of generated SQLI and XSS exploits, as well as performance metrics (see Table 8). NAVEX constructed 19 more exploits in `WeBid`, `myBloggie`, `geccbblite`, `WebChess`, and `FAQforge`, and achieved the same results for `Eve`, `scarf`, and `DNscript`. For `SchoolMate`, NAVEX did not generate exploits due to issues related to maintaining user sessions, as discussed earlier. Since Chainsaw generates exploits statically, it was able to generate exploits for this application.

In terms of efficiency, NAVEX significantly outperformed Chainsaw. Chainsaw generated the exploits in 112 minutes, while NAVEX took only 25 minutes and 2 seconds. Additionally, the total time to build and search the navigation graph in NAVEX (18 minutes and 26 seconds) was much shorter than the total time to construct and search the Refined Workflow Graph (RWFG) in Chainsaw (1 day, 13 hours, and 21 minutes). This indicates that the techniques used in NAVEX improved exploit generation efficiency without sacrificing precision.

### Limitations and Discussion

#### Unsupported Features
Certain features of web applications are not yet supported, which limits our coverage. For example, forms with file inputs require the user to select and upload an actual file from the local system. In a given test setting, this can be made to work with our solver, but making it work across all platforms requires more engineering effort. Another challenge is automatically deriving TAC (Three-Address Code) formulas from graph nodes. This process involves analyzing each AST (Abstract Syntax Tree) node and supporting different node structures for each node type. For instance, the left-hand side of an assignment statement in PHP can be a simple variable, a constant, a function call, or nested function calls. NAVEX has support for most such node types and structures, but there are a few instances still under development. In our dataset, NAVEX incorrectly flagged 5 sinks as XSS exploitable in `osCommerce 2.3.3` and `WeBid`. Handling dynamic calls to functions in PHP is challenging, and NAVEX utilizes CPGs (Code Property Graphs), which do not have full support for resolving dynamic function calls. However, this had a minimal impact on the results reported by NAVEX. For instance, there were 3 false positives reported for EAR (Execution After Redirect) vulnerability in `Joomla`, `OpenConf`, and `MediaWiki`.

### Related Work

#### Exploit Generation for Web Applications
Exploit generation has seen significant interest in binary applications [8, 14, 21]. For web applications, the closest work to NAVEX is Chainsaw [7], which uses purely static analysis to build concrete exploits. NAVEX differs from Chainsaw in two aspects: (i) it combines dynamic and static analyses, enabling it to scale better to large applications and find more exploits, and (ii) it supports finding exploits for multiple classes of vulnerabilities. Other related works include Ardilla [25], which uses concolic execution and taint tracking to construct SQLI and XSS attack vectors; CRAXweb [22], which employs concrete and symbolic execution supported by a constraint solver to generate SQLI and XSS exploits; QED [27], which generates first-order SQLI and XSS attacks using static analysis and model checking for Java web applications; and [32], which generates inputs that expose SQLI vulnerabilities using concolic execution of PHP applications. EKHunter [19] combines static analysis and constraint solving to find exploits in for-crime web applications. WAPTEC [13] and NoTamper [12] generate exploits for parameter-tampering vulnerabilities. These works, however, are limited to single PHP modules and do not consider whole-application paths.

#### Modeling with Code Property Graphs
Yamaguchi et al. [33] introduced the notion of CPGs for vulnerability modeling and discovery in C programs. In a follow-up work [9], they applied CPGs for vulnerability discovery in PHP applications. While our work leverages the flexibility and efficiency of CPGs, we enhance them with additional attributes to generate actual executable exploits.

#### Vulnerability Analysis
There is extensive research on server-side vulnerability detection, including static analysis approaches [11, 15, 16, 18, 23, 24, 26, 29–31, 34], dynamic analysis approaches [20, 28], and hybrid approaches [10]. Although NAVEX employs some of these analysis techniques to find vulnerabilities, its primary goal is to construct exploits for the identified vulnerabilities. Our navigation modeling is inspired by MiMoSA [11], which finds data and workflow vulnerabilities by analyzing modules of web applications. NAVEX advances this analysis by combining static and dynamic analyses to construct concrete exploits for large web applications.

### Conclusions
In this paper, we present NAVEX, an automatic exploit generation system that accounts for the dynamic features and navigational complexities of modern web applications. On our dataset, NAVEX constructed a total of 204 exploits, of which 195 are for taint-style vulnerabilities and 9 are for logic vulnerabilities. We demonstrated that NAVEX significantly outperforms prior work in terms of precision, efficiency, and scalability of exploit generation.

### Acknowledgments
We thank Curt Thieme for his support with the applications' deployment. We also thank Adam Doupé and the anonymous reviewers for their feedback. This material is supported in part by NSF under Grant Nos. CNS-1514472, DGE-1069311, and by DARPA under an AFOSR contract FA8650-15-C-7561.

### References
[1] Apache TinkerPop. 2018. Accessed: 2018-05-01. https://tinkerpop.apache.org/gremlin.html
[2] crawler4j. 2018. Accessed: 2018-05-01. https://github.com/yasserg/crawler4j
[3] Narcissus. 2018. Accessed: 2018-05-01. https://github.com/mozilla/narcissus/
[4] The Neo4j Graph Platform. 2018. Accessed: 2018-05-01. https://neo4j.com/
[5] Xdebug - Debugger and Profiler Tool for PHP. 2018. Accessed: 2018-05-01. https://xdebug.org/
[6] XSS Filter Evasion Cheat Sheet. 2018. Accessed: 2018-05-01. https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
[7] ALHUZALI, A., ESHETE, B., GJOMEMO, R., AND VENKATAKRISHNAN, V. Chainsaw: Chained automated workflow-based exploit generation. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS) (2016), ACM, pp. 641–652.
[8] AVGERINOS, T., CHA, S. K., HAO, B. L. T., AND BRUMLEY, D. AEG: Automatic Exploit Generation. In NDSS (2011), vol. 11, pp. 59–66.
[9] BACKES, M., RIECK, K., SKORUPPA, M., STOCK, B., AND YAMAGUCHI, F. Efficient and flexible discovery of PHP application vulnerabilities. In Security and Privacy (EuroS&P), 2017 IEEE European Symposium on (2017), IEEE, pp. 334–349.
[10] BALZAROTTI, D., COVA, M., FELMETSGER, V., JOVANOVIC, N., KIRDA, E., KRUEGEL, C., AND VIGNA, G. Saner: Composing static and dynamic analysis to validate sanitization in web applications. In 2008 IEEE Symposium on Security and Privacy (SP 2008) (2008), pp. 387–401.
[11] BALZAROTTI, D., COVA, M., FELMETSGER, V. V., AND VIGNA, G. Multi-module Vulnerability Analysis of Web-based Applications. In the 14th ACM Conference on Computer and Communications Security (CCS) (2007), pp. 25–35.
[12] BISHT, P., HINRICHS, T., SKRUPSKY, N., BOBROWICZ, R., AND VENKATAKRISHNAN, V. Notamper: automatic blackbox detection of parameter tampering opportunities in web applications. In Proceedings of the 17th ACM conference on Computer and communications security (2010), ACM, pp. 607–618.
[13] BISHT, P., HINRICHS, T., SKRUPSKY, N., AND VENKATAKRISHNAN, V. WAPTEC: Whitebox Analysis of Web Applications for Parameter Tampering Exploit Construction. In the 18th ACM conference on Computer and communications security (2011), pp. 575–586.
[14] BRUMLEY, D., POOSANKAM, P., SONG, D., AND ZHENG, J. Automatic Patch-Based Exploit Generation is Possible: Techniques and Implications. In Security and Privacy, 2008. SP 2008. IEEE Symposium on (2008), pp. 143–157.
[15] DAHSE, J., AND HOLZ, T. Simulation of Built-in PHP Features for Precise Static Code Analysis. In Symposium on Network and Distributed System Security (NDSS) (2014).
[16] DAHSE, J., AND HOLZ, T. Static Detection of Second-Order Vulnerabilities in Web Applications. In 23rd USENIX Security Symposium (USENIX Security) (2014), pp. 989–1003.
[17] DE MOURA, L., AND BJØRNER, N. Z3: An efficient SMT solver. In Tools and Algorithms for the Construction and Analysis of Systems. Springer, 2008, pp. 337–340.
[18] DOUPÉ, A., BOE, B., KRUEGEL, C., AND VIGNA, G. Fear the ear: discovering and mitigating execution after redirect vulnerabilities. In Proceedings of the 18th ACM conference on Computer and communications security (2011), ACM, pp. 251–262.
[19] ESHETE, B., ALHUZALI, A., MONSHIZADEH, M., PORRAS, P. A., VENKATAKRISHNAN, V. N., AND YEGNESWARAN, V. EKHunter: A Counter-Offensive Toolkit for Exploit Kit Infiltration. In 22nd Annual Network and Distributed System Security Symposium, NDSS (2015).
[20] HALDAR, V., CHANDRA, D., AND FRANZ, M. Dynamic taint propagation for Java. In 21st Annual Computer Security Applications Conference (ACSAC) (2005), pp. 9–pp.
[21] HU, H., CHUA, Z. L., ADRIAN, S., SAXENA, P., AND LIANG, Z. Automatic Generation of Data-Oriented Exploits. In 24th USENIX Security Symposium (USENIX Security 15) (2015), USENIX Association, pp. 177–192.
[22] HUANG, S., LU, H., LEONG, W., AND LIU, H. CRAXweb: Automatic Web Application Testing and Attack Generation. In IEEE 7th International Conference on Software Security and Reliability, SERE (2013), pp. 208–217.
[23] HUANG, Y.-W., YU, F., HANG, C., TSAI, C.-H., LEE, D.-T., AND KUO, S.-Y. Securing web application code by static analysis and runtime protection. In Proceedings of the 13th international conference on World Wide Web (2004), ACM, pp. 40–52.
[24] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A Static Analysis tool for Detecting Web Application Vulnerabilities. In Security and Privacy, 2006 IEEE Symposium on (2006), pp. 6–pp.
[25] KIEYZUN, A., GUO, P. J., JAYARAMAN, K., AND ERNST, M. D. Automatic Creation of SQL Injection and Cross-Site Scripting Attacks. In IEEE 31st International Conference on Software Engineering (ICSE) (2009), pp. 199–209.
[26] LIVSHITS, V. B., AND LAM, M. S. Finding Security Vulnerabilities in Java Applications with Static Analysis. In 14th USENIX Security Symposium (Baltimore, Maryland, USA, 2005).
[27] MARTIN, M., AND LAM, M. S. Automatic generation of XSS and SQL injection attacks with goal-directed model checking. In Proceedings of the 17th conference on Security symposium (2008), pp. 31–43.
[28] NGUYEN-TUONG, A., GUARNIERI, S., GREENE, D., SHIRLEY, J., AND EVANS, D. Automatically hardening web applications using precise tainting. In IFIP International Information Security Conference (2005), Springer, pp. 295–307.
[29] SAMUEL, M., SAXENA, P., AND SONG, D. Context-sensitive auto-sanitization in web templating languages using type qualifiers. In Proceedings of the 18th ACM conference on Computer and communications security (2011), pp. 587–600.
[30] SAXENA, P., MOLNAR, D., AND LIVSHITS, B. Scriptgard: automatic context-sensitive sanitization for large-scale legacy web applications. In Proceedings of the 18th ACM conference on Computer and communications security (2011), pp. 601–614.
[31] WASSERMANN, G., AND SU, Z. Sound and precise analysis of web applications for injection vulnerabilities. In ACM Sigplan Notices (2007), vol. 42, ACM, pp. 32–41.
[32] WASSERMANN, G., YU, D., CHANDER, A., DHURJATI, D., INAMURA, H., AND SU, Z. Dynamic test input generation for web applications. In Proceedings of the 2008 international symposium on Software testing and analysis (2008), pp. 249–260.
[33] YAMAGUCHI, F., GOLDE, N., ARP, D., AND RIECK, K. Modeling and discovering vulnerabilities with code property graphs. In Security and Privacy (SP), 2014 IEEE Symposium on (2014), IEEE, pp. 590–604.
[34] YU, F., ALKHALAF, M., AND BULTAN, T. Stranger: An automata-based string analysis tool for PHP. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems (2010), pp. 154–157.
[35] ZHENG, Y., ZHANG, X., AND GANESH, V. Z3-str: A Z3-based String Solver for Web Application Analysis. In Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering (2013), pp. 114–124.