### Density Estimation and Intercell Timing Analysis

We employed kernel density estimators using Scott's rule [28] to analyze intercell timing. The resulting probability density functions (PDFs) showed significant overlap. Experimentally, we found that an attacker could achieve a maximum accuracy of only 2% on the top 100 pages by selecting the most likely page for each sampled intercell timing value.

To visually illustrate this, Figure 7 presents 100 random intercell times from each of the top 50 pages, plotted in ascending order of mean intercell times. Each cross in the figure represents an intercell time, and the y-axis is logarithmic. The figure suggests that while intercell times vary significantly, their patterns do not differ noticeably across different sites, indicating that individual intercell times are not strongly correlated with the true page of a cell sequence.

### Equalizing Intercell Timing

Despite the lack of strong correlation, we designed an extension to Walkie-Talkie (WT) to hide all timing information, though this comes at the cost of increased bandwidth and time overhead.

One approach would be to have the proxy behave like the client: it queues all received cells in each burst until the server has sent all its data, and then sends them back to the client in one go. This method would eliminate timing information but requires the proxy to read client cells to determine when bursts end, which may not be practical.

Our timing fix is inspired by a similar mechanism in Tamaraw. We set a fixed cell rate \( r_{\text{control}} \) such that whenever it is the proxy's turn to send data, it attempts to deliver \( r_{\text{control}} \) incoming cells per second. If there is no data to send when a cell is due, the proxy generates a dummy cell, which is dropped by the client. This ensures that the intercell time is always \( r_{\text{control}} \) for incoming cells, thus equalizing intercell timing. By varying \( r_{\text{control}} \), we evaluated the added overhead of timing control, as shown in Figure 8. For example, we can equalize intercell timing at a cost of 50% bandwidth overhead and 36% time overhead.

The same dummy cells described in Section 4.3 can be used for both burst molding and equalizing intercell timing without compromising either objective. We used 50 pages instead of our full 100 pages to ensure clarity in the graph.

### Acknowledgements

We thank our shepherd, Scott Coull, for his help in shaping the final version of this paper, and the anonymous reviewers for their valuable comments. This work benefited from the use of the CrySP RIPPLE Facility at the University of Waterloo. We also thank NSERC for grant RGPIN-341529.

### References

[1] Alexa — The Web Information Company. www.alexa.com.
[2] G. D. Bissias, M. Liberatore, D. Jensen, and B. N. Levine. Privacy Vulnerabilities in Encrypted HTTP Streams. In Privacy Enhancing Technologies, pages 1–11. Springer, 2006.
[3] D. Brumley and D. Boneh. Remote timing attacks are practical. In Proceedings of the 12th USENIX Security Symposium, 2003.
[4] X. Cai, R. Nithyanand, and R. Johnson. CS-BuFLO: A Congestion Sensitive Website Fingerprinting Defense. In Proceedings of the 13th ACM Workshop on Privacy in the Electronic Society, 2014.
[5] X. Cai, R. Nithyanand, T. Wang, I. Goldberg, and R. Johnson. A Systematic Approach to Developing and Evaluating Website Fingerprinting Defenses. In Proceedings of the 21st ACM Conference on Computer and Communications Security, 2014.
[6] X. Cai, X. Zhang, B. Joshi, and R. Johnson. Touching from a Distance: Website Fingerprinting Attacks and Defenses. In Proceedings of the 19th ACM Conference on Computer and Communications Security, pages 605–616, 2012.
[7] H. Cheng and R. Avnur. Traffic Analysis of SSL-Encrypted Web Browsing. http://www.cs.berkeley.edu/˜daw/teaching/cs261-f98/projects/final-reports/ronathan-heyning.ps, 1998.
[8] K. Dyer, S. Coull, T. Ristenpart, and T. Shrimpton. Peek-a-Boo, I Still See You: Why Efficient Traffic Analysis Countermeasures Fail. In Proceedings of the 2012 IEEE Symposium on Security and Privacy, pages 332–346, 2012.
[9] P. Eckersley. How unique is your web browser? In Privacy Enhancing Technologies, pages 1–18, 2010.
[10] R. Fielding and J. Reschke. Hypertext transfer protocol (HTTP/1.1): Message syntax and routing. 2014.
[11] G. Greenwald. NSA Prism program taps in to user data of Apple, Google and others. http://www.theguardian.com/world/2013/jun/06/us-tech-giants-nsa-data, June 2013. Accessed Apr. 2015.
[12] J. Hayes and G. Danezis. k-Fingerprinting: A Robust Scalable Website Fingerprinting Technique. In Proceedings of the 25th USENIX Security Symposium, 2016.
[13] D. Herrmann, R. Wendolsky, and H. Federrath. Website Fingerprinting: Attacking Popular Privacy Enhancing Technologies with the Multinomial Naive-Bayes Classifier. In Proceedings of the 2009 ACM Workshop on Cloud Computing Security, pages 31–42, 2009.
[14] M. Juarez, S. Afroz, G. Acar, C. Diaz, and R. Greenstadt. A Critical Evaluation of Website Fingerprinting Attacks. In Proceedings of the 21st ACM Conference on Computer and Communications Security, 2014.
[15] M. Liberatore and B. Levine. Inferring the Source of Encrypted HTTP Connections. In Proceedings of the 13th ACM Conference on Computer and Communications Security, pages 255–263, 2006.

### Conclusion

In this paper, we presented Walkie-Talkie, a flexible and easy-to-use defense with low overhead that can protect web clients against website fingerprinting attacks. Walkie-Talkie consists of two components: half-duplex communication and burst molding. Half-duplex communication produces concise burst sequences that are easy to manipulate, allowing burst molding to mimic non-sensitive web pages with minimal overhead. Walkie-Talkie is highly effective against all known attacks with overhead costs much lower than existing defenses. It can defend against all possible website fingerprinting (WF) attacks because pairs of sensitive and non-sensitive web pages are molded into the same cell sequence under WT. We implemented Walkie-Talkie to function on the Tor client and Tor nodes, and it can be adapted to other proxy networks.

We also considered advanced attackers who leverage site link information, page visit rates, and timing information to strengthen their attacks. Walkie-Talkie effectively defends against these types of attacks by giving the client the freedom to choose which pages to use as decoys. Future work will explore whether Walkie-Talkie is effective against other advanced attacks, such as active adversaries and dynamic content identification.

### Publication of Code and Data

To ensure reproducibility, we publish the following:

- Our implementation of Walkie-Talkie: the Firefox code that modifies the browser to enable half-duplex communication, the Tor code that modifies the Tor client to enable molding, and our experiment code for WT.
- Our experimental data sets: the cell sequences collected over Tor with and without half-duplex communication.
- Our implementations of previous attacks and defenses.

The code and data are available at https://crysp.uwaterloo.ca/software/webfingerprint/.

### Figures

**Figure 7:** 100 random intercell times from each of the top 50 pages. Each cross represents an intercell time. The y-axis is logarithmic.

**Figure 8:** Possible bandwidth and time overhead cost for equalizing intercell timing, obtained by varying \( r_{\text{control}} \).

**Figure 9:** Bandwidth overhead and Maximum Attack Accuracy (MAA) for Random-WT, WT, and Tamaraw across a range of parameters. No WF attack can achieve a classification accuracy above the MAA.