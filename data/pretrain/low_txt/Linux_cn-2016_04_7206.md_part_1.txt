---
author: Floyd Smith
category: 系统运维
comments_data:
- date: '2016-04-11 08:34:32'
  message: "确保网络带宽充足至关重要。"
  postip: 153.150.178.8
  username: 来自日本的 Chrome 49.0|Windows 10 用户
- date: '2016-04-13 18:37:08'
  message: "学习了一些有价值的信息。"
  postip: 60.175.130.2
  username: hello_linux [Firefox 43.0|Windows 7]
- date: '2016-04-27 10:33:38'
  message: "即使拥有充足的带宽，也可能因为数据量过大而显得不够用。根本问题在于数据量，或者可以考虑双管齐下的解决方案。"
  postip: 140.207.79.150
  username: 来自上海的 Chrome 49.0|Mac 10.11 用户
count:
  commentnum: 3
  favtimes: 10
  likes: 0
  sharetimes: 0
  viewnum: 20502
date: '2016-04-11 08:00:00'
editorchoice: true
excerpt: "提升效率的方法虽多，但实现显著成果却不易。为了帮助您优化网站性能，本文将提供10条可使您的Web应用性能提升至十倍以上的建议。"
fromurl: https://www.nginx.com/blog/10-tips-for-10x-application-performance/
id: 7206
islctt: true
largepic: /data/attachment/album/201604/09/232202t6f6der3g68eb0og.jpg
permalink: /article-7206-1.html
pic: /data/attachment/album/201604/09/232202t6f6der3g68eb0og.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: "尽管有许多方法能够提高效率，但要达到显著效果往往十分困难。为了帮助您在探索过程中取得更好的结果，本文提供了10条能够极大提升Web应用性能（最高可达十倍）的实用建议。"
tags:
- NGINX
- 性能
- Web
- nginx
thumb: false
title: 十个技巧助您将Web应用性能提升十倍
titlepic: false
translator: Ezio
updated: '2016-04-11 08:00:00'
---

如今，优化Web应用性能变得前所未有的重要。随着数字经济的发展，互联网在全球经济中所占份额已超过5%。在这个高度互联的世界里，用户对在线体验的要求达到了历史最高点。如果您的网站响应迟缓或应用程序存在延迟，用户很可能会转投竞争对手怀抱。

以亚马逊为例，在十年前的一项研究中发现，网页加载时间每减少100毫秒，收入就增加1%。最近的一份调查显示，超过一半的网站所有者承认由于应用程序性能不佳导致客户流失。

那么，理想的网页加载速度应该是多少呢？据统计，页面加载时间每延长一秒，就会有4%的用户选择放弃使用。顶级电子商务平台通常能在首次交互时实现1到3秒内的页面加载速度，这是用户体验最佳的速度范围。由此可见，对于Web应用而言，性能的重要性不言而喻，并且这一趋势仍在持续增强。

虽然有很多途径可以提高效率，但要看到实际成效却并不容易。为了协助您在这条道路上走得更远，以下我们将分享十条经过验证、能够显著提升（最高达十倍）网站性能的有效策略。这将是关于提升应用程序性能系列文章的第一篇，涵盖了一系列经充分测试的优化技术和一些NGINX方面的知识。此外，该系列还将探讨如何通过这些措施增强安全性。

![](/data/attachment/album/201604/09/232202t6f6der3g68eb0og.jpg)

### 技巧#1：利用反向代理服务器提升性能并加强安全防护

如果您当前的应用运行于单一设备上，最直接的改进方式就是更换为配置更高的硬件——更快的处理器、更大的内存以及更高速的存储系统等。这样一来，无论是WordPress服务器、Node.js应用还是Java程序，其运行速度都会得到明显改善。（如果涉及到数据库访问，则只需再添置一台高性能机器，并确保两台主机之间具备高速连接即可。）

然而，很多时候瓶颈并非单纯由硬件性能造成。Web应用运行缓慢的原因往往是计算机需要频繁切换处理任务：管理成千上万的并发连接与用户交互、读取磁盘文件、执行代码等。这种情况下，应用服务器可能会出现“抖动”现象——例如因内存不足而频繁地进行磁盘交换操作，或是多个请求被迫等待某个耗时任务完成（如磁盘I/O）。

此时，除了升级硬件外，还可以采取一种全新的方案来解决问题：引入反向代理服务器分担部分工作负荷。[反向代理](https://www.nginx.com/resources/glossary/reverse-proxy-server)位于前端，负责处理所有来自互联网的流量；只有它直接暴露在网络上，而后端的应用服务器则通过一个快速内部网络与其通信。

采用反向代理后，应用服务器不再需要等待用户的每次互动才能继续工作，而是可以专注于生成内容并通过反向代理将其发送出去。这样不仅减少了等待时间，还使得应用服务器能够接近其理论上的最大处理能力。

另外，部署反向代理还能为您的Web架构带来灵活性。当某类服务器负载过高时，可以轻松添加更多同类节点；即便单个节点发生故障，也能迅速替换新的实例而不影响整体服务。

正是由于反向代理带来的这种灵活性，它成为了实施某些性能优化功能的基础条件，比如：

* **负载均衡** (详见技巧#2) – 通过反向代理实现的负载均衡技术能够将流量均匀分配给一组应用服务器。有了合理的负载均衡机制，您就可以无缝扩展应用规模而无需修改现有代码。
* **静态文件缓存** (详见技巧#3) – 反向代理可以直接存储图片、客户端脚本等静态资源，并直接服务于客户端请求，从而加速响应速度并减轻后端压力，让应用运行得更加流畅。
* **网络安全防护** – 反向代理还能够增强整个系统的安全性，及时检测并抵御攻击，保护后端服务器免受威胁。

NGINX软件专为作为反向代理而设计，集成了上述多种功能。它采用了事件驱动模型处理请求，相比传统服务器更为高效。而商业版本NGINX Plus则进一步增强了反向代理特性，包括健康检查、高级路由及缓冲支持等。

![NGINX Worker Process helps increase application performance](/data/attachment/album/201604/11/132505e96qqu9jk6c4u3rw.jpg)

### 技巧#2：启用负载均衡

引入[负载均衡器](https://www.nginx.com/solutions/load-balancing/)是一种相对简单但非常有效的手段，既能提升性能又能增强安全性。与其不断强化核心Web服务器，不如利用负载均衡将流量分散至多个节点。即使应用本身存在扩展性缺陷，仅凭负载均衡器就能大幅改善用户体验。

本质上讲，负载均衡器也是一种反向代理（参见技巧#1），它接收外部请求并转发给其他服务器。特别之处在于，负载均衡器支持两个或更多后端服务器，并通过特定算法决定如何分配请求。最简单的轮询法会依次将每个新请求指派给列表中的下一个可用服务器；还有基于最少活跃连接数等多种策略可供选择。NGINX Plus甚至允许根据用户会话将请求定向至固定服务器。

负载均衡之所以有效，在于它可以避免部分服务器过载而其余闲置的情况发生。同时，这种方法也便于横向扩展，您可以添加多台成本较低的机器，并确保它们都被充分利用起来。

适用于负载均衡的协议种类繁多，包括但不限于HTTP、HTTPS、SPDY、HTTP/2、WebSocket、FastCGI、SCGI、uwsgi以及memcached等。请仔细分析您的Web应用需求，确定哪些地方存在瓶颈并据此制定相应策略。

同一组服务器既可以用于负载均衡，也可以承担其他职责，如SSL终结点、兼容不同版本HTTP协议的支持，以及静态文件缓存等。

NGINX是目前广泛使用的负载均衡解决方案之一；若想了解更多详情，请下载我们的电子书《[选择软件负载均衡器的五大理由](https://www.nginx.com/resources/library/five-reasons-choose-software-load-balancer/)》。您还可以参考《[使用NGINX和NGINX Plus配置负载均衡指南（第一部分）](https://www.nginx.com/blog/load-balancing-with-nginx-plus/)》，获取基础设置指南；完整的[NGINX负载均衡](https://www.nginx.com/resources/admin-guide/load-balancer/)文档可在NGINX Plus管理员手册中找到。我们的企业级产品[NGINX Plus](https://www.nginx.com/products/)更是提供了诸多高级负载均衡特性，诸如基于响应时间的智能路由及针对Microsoft NTLM协议的支持等。

### 技巧#3：缓存静态与动态内容

缓存机制可以通过加快内容传输速度来显著提升Web应用性能。具体做法包括预处理所需传输的数据、将信息保存在速度更快的介质上或将数据存放于离客户端更近的位置，当然也可以结合以上几种方式共同作用。

（注：原文中未详细介绍第三条技巧的具体内容，此处保留原意不做过多补充。）
---