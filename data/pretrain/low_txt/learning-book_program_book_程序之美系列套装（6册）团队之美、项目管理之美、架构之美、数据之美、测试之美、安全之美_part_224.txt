### 参考文献

- **Meyer, Bertrand. 2004.** "The Power of Abstraction, Reuse, and Simplicity: An Object-Oriented Library for Event-Driven Design." *From Object-Orientation to Formal Methods: Essays in Memory of Ole-Johan Dahl*, edited by Olaf Owe, Stein Krogdahl, and Tom Lyche. Lecture Notes in Computer Science 2635, pp. 236-271. New York, NY: Springer-Verlag. [在线访问](http://archive.eiffel.com/doc/oosc/).
- **Meyer, Bertrand. 2008.** *Touch of Class: An Introduction to Programming Well*. New York, NY: Springer-Verlag. [在线访问](http://se.ethz.ch/~meyer/publications/lncs/events.pdf).
- **Peyton-Jones, Simon, Jean-Marc Eber, and Julian Seward. 2000.** "Composing Contracts: An Adventure in Financial Engineering." Functional Pearl, in *ACM SIGPLAN International Conference on Functional Programming (ICFP'00)*, Montreal, Canada, September 2000. ACM Press, pp. 280-292. [在线访问](http://citeseer.ist.psu.edu/jones00composing.html).
- **Peyton-Jones, Simon, and Philip Wadler. 1993.** "Imperative Functional Programming." *Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages*, Charleston, South Carolina, pp. 71-84. [在线访问](http://citeseer.ist.psu.edu/peytonjones93imperative.html).
- **Steingold, Sam.** 在线访问：[http://www.podval.org/sds/ocaml-sucks.html](http://www.podval.org/sds/ocaml-sucks.html).
- **Sun Microsystems. 1997.** "About Microsoft's 'Delegates.'" White paper by the Java Language Team at JavaSoft. [在线访问](http://java.sun.com/docs/white/delegates.html).
- **Wadler, Philip. 1995.** "Monads for Functional Programming." *Advanced Functional Programming*, Lecture Notes in Computer Science 925, edited by J. Jeuring and E. Meijer. New York, NY: Springer-Verlag. [在线访问](http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf).
- **Walden, Kim, and Jean-Marc Nerson. 1994.** *Seamless Object-Oriented Software Architecture*. Upper Saddle River, NJ: Prentice Hall. [在线访问](http://www.bon-method.com/index_normal.htm).

---

## 第14章 重读经典
作者：Panagiotis Louridas

在各个科学领域中，总有一些著作和人名是不可或缺的。目前仍然活跃的代表人物可能是诺姆·乔姆斯基（Noam Chomsky）。根据1992年4月《MIT Tech Talk》上的一篇文章，乔姆斯基是过去20年中被引用最多的人名之一。在艺术和人文学科引用索引中，排名前十的是马克思、列宁、莎士比亚、亚里士多德、圣经、柏拉图、弗洛伊德、乔姆斯基、黑格尔和西塞罗。在科学引用索引中，他在1972年至1992年间被引用了1619次。

在软件工程领域，最著名的书籍之一无疑是《设计模式：可复用面向对象软件的基础》，即“四人组”书（Gamma等，1994）。在Google上搜索该书的书名可以得到173000条结果（数据截至2008年春天），而在ACM Digital Library中则有1527条结果。设计模式社区在过去20年中一直是软件工程领域最具活力的社区之一。

本章将进一步增加这些引用计数。

《设计模式》一书不仅标志着设计模式运动的起点，也成为了讨论这一主题时的回归点。尽管与设计模式相关的资源众多，但大多数讨论都围绕着这本书中列出的23种模式。我们并不排除其他模式，但这本书中的23种模式确实堪称经典。

然而，这本书中最吸引人的部分并不是那些具体的设计模式，而是第一章的简介。它提供了许多设计模式背后的理由，并给出了将它们联系起来的通用线索。从中我们可以发现可复用面向对象设计的原则。其中第二个原则是更倾向于使用对象组合（“包含”关系），而不是类继承（“是一种”关系）。（第一个原则是“针对接口编程，而不是针对实现编程”，对于过去40年来熟悉封装概念的人来说，这一点应该很清楚。）

对于那些没有跟随面向对象编程在20世纪八九十年代进入主流的程序员来说，这条规则可能显得不太重要。但如果你还记得那个时代，面向对象编程的一个决定性概念就是继承。以Bjarne Stroustrup在《C++程序设计语言》（1985）中的描述为例：

> C++是一种通用目的的编程语言，侧重于系统编程。它：
>
> - 是更好的C语言。
> - 支持数据抽象。
> - 支持面向对象编程。
> - 支持泛型编程。

如果我们想弄清楚“支持面向对象编程”到底是什么意思，我们会发现：

> 编程方式是：
>
> - 确定你想要的那些类。
> - 为每个类提供一组完整的操作。
> - 通过继承来明确那些共性。

现在对比一下另一本经典著作，Joshua Bloch的《Effective Java》（2008）。我们至少会发现三点关于继承的建议：

- 倾向于组合而非继承。
- 设计继承并为之编写文档，否则不要用继承。
- 倾向于接口而非抽象类。

那么，继承是否应该避免使用呢？这在学术上并没有定论。在Microsoft Windows上编程可能会让人非常沮丧，即使是有舒适的书籍（如Charles Petzold的《Programming Windows》[1999]）指导。当第一批Windows编程框架推出时（源自Borland和Microsoft），它们像一股清新的空气。在此之前，创建一个简单的窗口都极其复杂：程序员们满怀兴趣地得知，要在Microsoft Windows中编程，他们必须面对所谓的window类，而这与C++类没有任何关系。在新的框架中，只需创建一个子类，继承框架提供的类，事情就完成了。我们很高兴能够突然摆脱所有的苦工（或者说几乎所有的苦工），也很高兴能够突然发现面向对象的这样一种简洁应用方式。

在Microsoft Windows上编程只是一个例子，对面向对象和继承的热情无处不在。奇怪的是，我们现在知道我们一直搞错了，但也许没有错得那么离谱。继承在本质上可能并不坏。像所有技术一样，它可以被很好地使用，也可以被错误地使用。不好的继承已经在许多地方都有讨论（《设计模式》是一个不错的开始）。这里我们将介绍一个漂亮的软件系统的例子，它以继承作为基础。这个系统就是Smalltalk。

Smalltalk是一种纯面向对象语言，尽管它从未成为主流语言，但却以多种方式影响了编程语言的发展。也许另一种对后来的计算机语言产生了如此多影响的编程语言是Algol 60，其影响力超过了它的实际使用。

这不是对Smalltalk编程语言及其环境的介绍（这两方面实际上是结合在一起的），而是介绍其中基本的架构思想，以及这些思想如何为我们的编程工作提供指导。借用设计心理学的一个术语，这里讨论的是基本设计原则和它们提供给程序员的“可操作暗示”（affordance）。Donald Norman在《The Psychology of Everyday Things》（1988）中透彻且有趣地解释了可操作暗示的概念。简而言之，一个对象的外观允许我们（有时甚至是诱使我们）做某些事情。悬挂的绳子诱使我们走过去拉一下，水平的把手诱使我们推一下，门把手诱使我们走过去旋转它。同样，编程语言的外观诱使程序员利用它做某些事情。打造得很漂亮的语言拥有美丽的架构，这会在我们用它编写的程序中体现出来。

这种思想的另一个强烈表达方式是萨丕尔-沃夫假说（Sapir-Whorf Hypothesis, SWH），它声称语言决定思想。这一观点已经让语言学家和编程语言设计者们兴奋了好些年。《C++程序设计语言》第1版的前言就是从SWH开始的，K. E. Iverson的1980年图灵奖演讲谈的就是表示法对表达思想的重要性。SWH是有争议的，毕竟，每个人都曾经遇到过找不到一些词来表达自己的思想的情况，所以我们能思考的超过了我们能说的。但在计算机代码中，语言和程序的关系是清晰的。我们知道一些计算机语言是图灵完备的，但我们也知道，对于某些事情来说，一些语言比另一些语言更合适。除了影响程序的架构之外，语言架构本身也是很有意思的。我们来看看Smalltalk自身的架构，即它的实现选择、设计概念和模式。今天，我们会在最近的编程语言中看到其中的多个方面，那些现在不再见到的方面则让我们能够停下来反思它们消失的原因。我们在这里并不假设你已具备Smalltalk的相关知识，但到这章结束时，我们就已经介绍了Smalltalk的主要部分。我们会突出设计原则，并通过小代码片段来展示这些原则。强大的设计原则有一个好处，就是要学的东西不多，而一旦掌握了这些原则，整个基础架构就会自然生成。我们要参考的Smalltalk系统是Squeak（[http://www.squeak.org](http://www.squeak.org)），它是一个开放源代码的实现。某些代码示例在第一次阅读时可能难以理解，因为我们会引入一些非常规的概念，但它们会在随后的示例中得到说明，所以最好是努力读到最后，然后再回来读那些不太能理解的部分。同时，我们没有低估读者的智商。研究Smalltalk将发现一些特征，这些特征在你喜欢的语言里不一定有。这应该不是一个问题。在软件开发中有一条经过时间检验的准则，即你要使用的某一项特征在你所使用的语言中不一定直接支持，经过一些努力，你会在你所选择的语言中找到一种优雅的替代方式。根据Steve McConnell的《Code Complete》（2004），这被称为“编程为一种语言”：

> 理解“用一种语言编程”与“编程为一种语言”之间的差异是很重要的......绝大多数重要的编程原则不取决于具体的语言，而是取决于你使用它们的方式。如果你的语言缺少你想使用的结构，或者易于出现其他类型的问题，请试着进行补偿。发明你自己的编码规范、标准、类库和其他扩展。

实际上，与SWH相对的是对程序员创造性（或执着）的推崇。笔者记得，当面向对象在20世纪90年代成为一种必需品时，本地技术书店到了一本书，主题是面向对象的汇编语言。最近，Randall Hyde的“High Level Assembler (HLA)”将汇编与类、继承和其他技术结合在了一起。

我们对待一门编程语言的方法就像我们对待一本经典书籍一样。在我们急切开始之前，让我们先来看看Italo Calvino的文章"Why Read the Classics"（1986）中提出的一些定义：

- 经典作品是那些你经常听人家说“我正在重读...”而不是“我正在读...”的书。
- 经典作品是这样一些书，它们对读过并喜爱它们的人构成一种宝贵的经验；但是对那些保留这个机会，等到享受它们的最佳状态来临才阅读它们的人，它们也仍然是一种丰富的经验。
- 经典作品是一些产生某种特殊影响的书，它们要么自己以遗忘的方式给我们的想象力打下印记，要么隐藏在个人或集体的无意识深层记忆中。
- 一部经典作品是一本每次重读都好像初读那样带来发现的书。
- 一部经典作品是一本从不会耗尽它要向读者说的一切东西的书。
- 经典作品是这样一些书，它们带着以前的解释的特殊气氛走向我们，背后拖着它们经过文化或多种文化（或只是多种语言和风俗习惯）时留下的足迹。
- 一部经典作品中发现我们已知道或总以为我们已知道的东西，却没有料到这个作者早就说了，或那个想法与那部经典作品有一种特殊联系。这种发现同时也是非常令人满足的意外，例如当我们弄清楚一个想法的来源，或它与某个文本的联系，或谁先说了，我们总会有这种感觉。
- 经典作品是这样一些书，我们越是道听途说，以为我们懂了，当我们真正去读的时候，却发现还有很多未知的东西等着我们去探索。