### Full Payloads and ROP-Based Exploits

A recent Adobe Reader exploit, which relies solely on Return-Oriented Programming (ROP) attacks, supports the notion that code injection is not necessary for real-world malware [3]. This concept is illustrated in Figure 5, where ROP is shown as an enabler of code injection.

**Figure 5: ROP as an Enabler of Code Injection**

- **MALWARE**
- **CODE INJECTION**
- **DEP**
- **DEP BROKEN**
- **ROP**

If we set the constraint that `dep_broken=False`, the SAT solver will be unable to find any instance in which malware can be deployed, even if ROP is available. In this version of the model, code injection is a prerequisite for malware, but unbreakable Data Execution Prevention (DEP) renders code injection impossible. This model configuration aligns with real-world malware but differs from the academic community's view of ROP. Hypothetically, there could be a path (illustrated as the dotted line in Figure 5) that allows ROP alone to enable malware deployment.

**Figure 6: ROP as a Malware Deployment Technique**

- **MALWARE**
- **CODE INJECTION**
- **Syscall Gadget**
- **ROP**
- **DEP BROKEN**
- **DEP**

The model can be updated to include a path to malware deployment from ROP, which requires one additional capability: the presence of a system call gadget in the process address space. This update is shown in Figure 6, along with a satisfying instance of the model where malware is enabled alongside unbreakable DEP.

### Proof by Construction

We consider a successful malware deployment to consist of any of the following payloads:

- **Downloader**: A program that connects to a remote host, downloads arbitrary content, saves it to disk, and executes it.
- **Uploader**: A program that exfiltrates files from the host to a remote location.
- **Backdoor**: A program that creates a shell accessible from an external host and awaits a connection.
- **Reverse Backdoor**: A program that creates a connection to an external host and binds a shell to that connection.
- **Root Inserter**: A program that adds a new root user to the system.

We implemented each payload using purely ROP. We began by reducing each payload to a simple linear sequence of system calls, as shown in Figure 7. We did not need looping constructs, although Turing-Completeness is certainly available for more advanced payloads [28]. The "phantom stack" referenced in the figure provides the memory management required to enable reusable system call chains.

**Figure 7: System-Call-Based Implementations of Metasploit Payloads**

- **Reverse Backdoor**
- **Uploader**
- **Root Inserter**
- **Downloader**
- **Backdoor**

### Challenges in Translating System Calls to ROP

The challenge is to translate each sequence of system calls into a ROP program. We extracted a catalog of ROP gadgets from GNU libc version 2.13 using the established Galileo algorithm [28] and crafted each payload using these gadgets. Due to the level of system call reuse across these payloads, we constructed each system call gadget to be modular and easily chained.

For calls like `socket`, translation to ROP code is straightforward: arguments are immediate values that can be written to the stack during the payload injection phase, registers can be loaded via common `pop reg; ret` sequences, and the call can be invoked. However, setting arguments for an arbitrary chain of system calls introduces two challenges: dynamically generated values (like file descriptors) must be tracked across system calls, and some arguments (e.g., pointers to struct pointers) must be passed via multiple levels of indirection.

These challenges are further complicated by two restrictions imposed by ROP: the stack cannot be pushed to in an uncontrolled way (since that is where the payload resides), and register access may be constrained by the available gadgets in the catalog.

### Phantom Stack Implementation

To resolve these issues, we implemented a 'phantom' stack on the heap. The phantom stack is simply memory allocated by the attacker via the `sbrk` system call, which gets or sets the current program break. This is not a stack pivot; the original program stack is still pointed to by `esp`. The phantom stack is a secondary stack used by the attacker to manage payload data. A related construction was used in [7] for creating ROP payloads on the ARM platform.

Creating the phantom stack does not require any prior control over the heap and goes through legitimate kernel interfaces to allocate the desired memory. Pushes and pops to this stack reduce to arithmetic gadgets over a phantom stack pointer register. For our gadget catalog, `eax` was best suited to the purpose. A degree of software engineering is required to ensure correct phantom stack allocation and management.

**Figure 8: `connect(fd, &addr, 0x10)` Gadget**

- **Stack Diagram and Gadget Code**

We have implemented similar gadgets for all other system calls used by our payloads. Due to space limitations, the complete listings are presented in our technical report. By executing these in sequence, any of the payloads described above can be implemented using the ROP gadgets derived from the libc shared library.

### Return-into-LibN

While Return-into-Libc (RiL) attacks can, in principle, be performed against any library, it is not clear whether there exist common, frequently linked libraries that possess useful functions for implementing real-world malware payloads. These alternative sources would be valuable in cases where libc is given special protection due to its ubiquity and power with respect to system call operations.

To this end, the formal model treats libc as a special case: RiL attacks require that useful functions are available from libc. In this section, we show that Return-into-Libc attacks can indeed be performed against many other libraries. Specifically, the Apache Portable Runtime (used by the Apache webserver), the Netscape Portable Runtime (used by Firefox and Thunderbird), and the GLib application framework (used by programs running in the GNOME desktop environment) possess sufficient I/O functions to implement downloaders, uploaders, backdoors, and reverse backdoors.

**Figure 9: Reverse Backdoor Using NSPR**

- **NSPR Code Example**

**Figure 10: Downloader Using APR Function Calls**

- **APR Code Example**

The `apr_pool_create` function is a library-specific memory allocator that must be called at the start of any APR program. While a pool created by the component can be used, the attacker must manage the memory carefully to ensure the success of the attack.