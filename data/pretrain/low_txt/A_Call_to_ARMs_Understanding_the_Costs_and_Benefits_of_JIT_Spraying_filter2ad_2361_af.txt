### Table IV: Estimated Relative Success Probabilities for Concrete Attacks Against Single Diversification Defenses

| Defense | SunSpider | Kraken | Octane | G. Mean |
|---------|-----------|--------|--------|---------|
| Constant Blinding | -1.94% | -1.36% | -0.829% | -1.06% |
| Call Frame Randomization | 2.65% | 2.93% | -0.404% | 1.39% |
| Random NOP Insertion | -0.762% | 2.12% | 1.44% | 0.777% |
| Base Offset Randomization | -2.38% | -0.207% | -0.846% | 3.99% |

**Note:** Lower values indicate better mitigation.

### Attack Success Probabilities for Different Defenses

| Attack | Register Randomization | Constant Blinding | Call Frame Randomization | Random NOP Insertion | Base Offset Randomization |
|--------|------------------------|--------------------|--------------------------|----------------------|---------------------------|
| Blazakis 2010 (x86-32) | 92.9% | 6.84 × 10^-47% | 1.53 × 10^-3% | 4.15 × 10^-461% | 100% |
| Lian et al. 2015 (ARM) | 1.79% | 100% | 100% | 100% | 6.25% |
| ARM V8 gadget chaining | 0.909% | 100% | 30.1% | 3.74% | 3.70% |
| SpiderMonkey self-sustaining ARM payload | 2.51 × 10^-5% | 7.95 × 10^-21% | 0.391% | 0.229% | 100% |

### Discussion

The opportunities for both code corruption and code reuse made possible by Just-In-Time (JIT) compilers have been shown to be exploitable against real JIT implementations repeatedly [7, 27, 26, 6, 25, 24, 28, 4, 17]. Unfortunately, the community developing arguably the most prominent and vulnerable JITs—those found in web browsers—has been slow to react effectively to mitigate these threats in their JavaScript JITs. 

SpiderMonkey has taken the lead in code corruption mitigation by deploying W ⊕ X JIT memory, but it still lacks effective code reuse mitigations. Similarly, although Internet Explorer’s Chakra deploys a form of random NOP insertion, its constant blinding implementation, which does not blind constants ≤0xffff, can still be bypassed to create Return-Oriented Programming (ROP) payloads [4]. It is apparent that crafty attackers can and will discover and exploit any corners cut in the implementations of JIT spraying defenses. For this reason, we urge JIT developers to consider deploying defenses at full strength, even at the expense of non-trivial performance overhead.

By reducing the predictability of instruction operands and code layout, JIT code reuse can be mitigated. Rather than selecting a subset of the diversification defenses evaluated in §V, we recommend all five be deployed simultaneously to leave no stone unturned. If a JIT were to omit a particular defense, that undiversified area would eventually become a valuable piece of a future attack. This observation is merely a corollary to our assertion that partial implementations of defenses do not go unpunished.

Our measurements in §V indicate that most diversification defenses can be deployed at full strength with only modest performance and memory overhead. A noteworthy exception is random NOP insertion for the ARM instruction set. Since our implementation inserts a NOP between each instruction with a 12.5% probability, and all ARM instructions have the same size, we observe a ≈12.5% code size increase. The x86-64 architecture, in contrast, is able to achieve a much lower memory overhead thanks to its 1-byte NOP instruction encoding and variable-length instructions. JIT developers may wish to consider carefully lowering the probability of random NOP insertion on platforms with limited memory and fixed-width instructions. To establish a lower bound on memory overhead when random NOP insertion is dialed back, we measured the memory overhead for ARM32 when all diversification defenses except random NOP insertion are enabled and found it to be 6.15%.

A potential objection to diversification defenses is that an attacker with arbitrary memory read capabilities can avoid failure by spraying until her payload is emitted as desired. While this is true, we argue that diversification defenses mitigate the entire class of blind JIT spraying attacks and raise the bar for malicious reuse of JIT code by mandating that a memory disclosure accompany the control flow vulnerability.

Very recently-published work [18] demonstrates the creation of unintended instructions from the offset field in x86’s PC-relative branch and call instructions. To mitigate this threat, the authors of [18] implemented blinding of the implicit constants in relative branches. At submission time, our diversification implementations do not include this new mitigation, and we recognize that future work will need to correct this flaw.

### Conclusion

As JIT compilers continue to blanket the landscape of language runtimes, so do attacks that abuse their predictability and unique memory protection model, as evidenced by the new threats against ARM JITs introduced in this paper. Implementations of mitigations have appeared in production JITs, but their potential has been artificially limited in order to boost performance, resulting in a failure to provide satisfactory protection. The empirical evaluations and analyses in this paper demonstrate that diversification defenses are effective and can be implemented in full with only modest overhead. We encourage JIT developers to take our experiences implementing diversification defenses and use them to guide implementations on their own systems.

### Acknowledgment

We would like to thank Eric Rescorla for thoughtful feedback. We also thank Jan de Mooij, Eric Faust, JF Bastien, and Michael Stanton for helpful discussions. This material is based in part upon work supported by the U.S. National Science Foundation under Grants No. 1228967, 1410031, and 1514435, and by gifts from Mozilla and Google.

### References

[1] Property cache. Projects/SpiderMonkey/Internals/Property cache. https://developer.mozilla.org/en-US/docs/Mozilla/ [Online; accessed November 2015].

[2] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. Control-flow integrity. In Proceedings of CCS 2005 (2005), ACM, pp. 340–353.

[3] ANSEL, J., MARCHENKO, P., ERLINGSSON, U., TAYLOR, E., CHEN, B., SCHUFF, D. L., SEHR, D., BIFFLE, C. L., AND YEE, B. Language-independent sandboxing of just-in-time compilation and self-modifying code. In Proceedings of PLDI 2011 (New York, NY, USA, 2011).

[4] ATHANASAKIS, M., ATHANASOPOULOS, E., POLYCHRONAKIS, M., PORTOKALIDIS, G., AND IOANNIDIS, S. The devil is in the constants: Bypassing defenses in browser JIT engines. In Proceedings of NDSS 2015 (Feb. 2015).

[5] BANIA, P. JIT spraying and mitigations. arXiv preprint arXiv:1009.1038 (2010).

[6] BECK, P. JIT Spraying on ARM. https://prezi.com/ih3ypfivoieq/jit-spraying-on-arm/, 2011.

[7] BLAZAKIS, D. Interpreter exploitation: Pointer inference and JIT spraying. Presented at BlackHat DC 2010, Feb. 2010.

[8] CARLINI, N., BARRESI, A., PAYER, M., WAGNER, D., AND GROSS, T. R. Control-flow bending: On the effectiveness of control-flow integrity. In In Proceedings of USENIX Security 2015 (Aug. 2015).

[9] CHEN, P., FANG, Y., MAO, B., AND XIE, L. JITDefender: A defense against JIT spraying attacks. In Future Challenges in Security and Privacy for Academia and Industry. Springer, 2011, pp. 142–153.

[10] CHEN, P., WU, R., AND MAO, B. Jitsafe: a framework against just-in-time spraying attacks. IET Information Security 7, 4 (2013), 283–292.

[11] DE GROEF, W., NIKIFORAKIS, N., YOUNAN, Y., AND PIESSENS, F. JITSec: Just-In-Time security for code injection attacks. In Proceedings of WISSEC 2010 (Nov. 2010), pp. 1–15.

[12] DEUTSCH, L. P., AND SCHIFFMAN, A. M. Efficient implementation of the smalltalk-80 system. In Proceedings of POPL 1984 (1984).

[13] DREPPER, U. SELinux memory protection tests. http://www.akkadia.org/drepper/selinux-mem.html, Apr. 2009. [Online; accessed 3 November 2015].

[14] HOMESCU, A., BRUNTHALER, S., LARSEN, P., AND FRANZ, M. Librando: transparent code randomization for just-in-time compilers. In Proceedings of CCS 2013 (2013), ACM, pp. 993–1004.

[15] JANGDA, A., MISHRA, M., AND DE SUTTER, B. Adaptive just-in-time code diversification. In Proceedings of ACM MTD 2015 (2015).

[16] JAUERNIG, M., NEUGSCHWANDTNER, M., PLATZER, C., AND COMPARETTI, P. M. Lobotomy: An architecture for JIT spraying mitigation. In Procedings of ARES 2014 (2014), IEEE, pp. 50–58.

[17] LIAN, W., SHACHAM, H., AND SAVAGE, S. Too LeJIT to Quit: Extending JIT Spraying to ARM. In Proceedings of NDSS 2015 (2015).

[18] MAISURADZE, G., BACKES, M., AND ROSSOW, C. What Cannot Be Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP Defenses. In Proceedings of USENIX Security 2016 (2016).

[19] MAVADDAT, F., AND PARHAMI, B. Urisc: the ultimate reduced instruction set computer. International Journal of Electrical Engineering Education (1988).

[20] MILLIKIN, K. V8: High Performance JavaScript in Google Chrome. https://www.youtube.com/watch?v=lZnaaUoHPhs, 2008. [Online; accessed 2 November 2015].

[21] MOOIJ, J. D. WˆX JIT-code enabled in Firefox. http://jandemooij.nl/blog/2015/12/29/wx-jit-code-enabled-in-firefox/, Dec. 2015.

[22] MOZILLA. Bug 506693 - SELinux is preventing JIT from changing memory segment access. https://bugzilla.mozilla.org/show_bug.cgi?id=506693, 2009. [Online; accessed 3 November 2015].

[23] NIU, B., AND TAN, G. Rockjit: Securing just-in-time compilation using modular control-flow integrity. In Proceedings of CCS 2014 (2014).

[24] PIE, P. Mobile Pwn2Own Autumn 2013 - Chrome on Android - Exploit Writeup, 2013.

[25] ROHLF, C., AND IVNITSKIY, Y. Attacking Clientside JIT Compilers. http://www.matasano.com/research/Attacking_Clientside_JIT_Compilers_Paper.pdf, 2011.

[26] SINTSOV, A. JIT-Spray Attacks & Advanced Shellcode. Presented at HITBSecConf Amsterdam 2010. Online: http://dsecrg.com/files/pub/pdf/HITB%20-%20JIT-Spray%20Attacks%20and%20Advanced%20Shellcode.pdf, July 2010.

[27] SINTSOV, A. Writing JIT Shellcode for fun and profit. Online: http://dsecrg.com/files/pub/pdf/Writing%20JIT-Spray%20Shellcode%20for%20fun%20and%20proﬁt.pdf, Mar. 2010.

[28] SONG, C., ZHANG, C., WANG, T., LEE, W., AND MELSKI, D. Exploiting and protecting dynamic code generation. In Proceedings of NDSS 2015 (2015).

[29] SOTIROV, A. Heap feng shui in JavaScript. Black Hat Europe (2007).

[30] STACHOWIAK, M. Introducing SquirrelFish Extreme. https://www.webkit.org/blog/214/introducing-squirrelfish-extreme/, 2008. [Online; accessed 2 November 2015].

[31] W3C. Web workers. http://www.w3.org/TR/workers/, 2015. [Online; accessed 3 November 2015].

[32] WEI, T., WANG, T., DUAN, L., AND LUO, J. Secure dynamic code generation against spraying. In Proceedings of CCS 2010 (2010).

[33] WU, R., CHEN, P., MAO, B., AND XIE, L. Rim: A method to defend from JIT spraying attack. In Proceedings of ARES 2012 (2012).

[34] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., ORMANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native Client: A sandbox for portable, untrusted x86 native code. In Proceedings of IEEE S&P (Oakland) 2009 (2009).

[35] ZHANG, C., NIKNAMI, M., CHEN, K. Z., SONG, C., CHEN, Z., AND SONG, D. JITScope: Protecting web users from control-flow hijacking attacks. In Proceedings of INFOCOM 2015 (2015).