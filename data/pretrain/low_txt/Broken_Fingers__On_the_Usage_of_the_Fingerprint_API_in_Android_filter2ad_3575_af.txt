### X. LIMITATIONS AND FUTURE WORK

This paper primarily focuses on the most common fingerprint API in Android, which is used by Google's devices. However, Samsung and Huawei offer their own custom fingerprint hardware and APIs. Additionally, Apple's devices also have similar systems [3], [4]. Investigating the similarities and differences among these APIs, and how applications manage compatibility across multiple devices, represents a key direction for future research.

Our static analysis relies on call graph generation and data-flow graph analysis, an approach that has been proven effective in previous studies [17] for understanding the use of specific APIs in Android. Nevertheless, this method cannot analyze reflective code, dynamically loaded, or native components. For the first two aspects, we do not anticipate significant inaccuracies when analyzing non-malicious code, and no samples were misclassified due to these reasons. The analysis of components written in native code is outside the scope of this paper. Empirically, we found that the use of native code prevented us from analyzing three apps (among those manually verified), as detailed in Section VIII-C.

Furthermore, the implemented static analysis can indicate how an app uses the fingerprint API locally, but it cannot fully evaluate the impact on the overall authentication mechanism, including the backend. This typically requires probing the remote backend (when the backend’s code is not available) to determine if it properly checks user authentication. Integrating our tool with more general remote protocol analyzers, such as the one proposed by Zuo et al. [55], is another promising future direction.

### XI. RELATED WORK

Zhang et al. [53] demonstrated that UI attacks were easily executed on Samsung devices (Samsung Galaxy S5 and S6) running Android 5. Specifically, after a legitimate user touched the fingerprint reader sensor, a malicious app could use fingerprint-protected cryptographic keys generated by other apps. They also showed that raw fingerprint information could be stolen from some devices. In contrast, our work focuses on the newer Google fingerprint API (released with Android 6), where each app uses app-specific keys.

Several other studies have examined the security of fingerprint hardware sensors and the storage of fingerprint data [40], [16]. Our work expands and generalizes these findings, and systematically studies how apps use the fingerprint API and how this affects the overall security of an app’s authentication scheme.

There are numerous works related to two-factor authentication and mobile system authentication. Lang et al. [32] describe "Security Keys," second-factor devices that protect users against phishing and man-in-the-middle attacks, and discuss the deployment of this technology in the Chrome browser and Google online services. We show how the fingerprint API could potentially offer the same or better security properties, but current implementation and usage issues prevent this.

One-Time Passwords (OTPs) are a weaker alternative to Security Keys. TrustOTP [45] shows how smartphones can act as secure OTP tokens. Dmitrienko et al. [15] highlight weaknesses in the design and adoption of two-factor authentication protocols, particularly in cross-device attacks and bypassing mechanisms like SMS-based TANs used by banks, or login verification systems such as Google, Twitter, and Facebook. Chen et al. [13] discuss different OAuth implementations and their adoption by mobile applications.

Other works focus on the automatic detection of vulnerabilities in Android apps, including over-privileged apps [6], component-hijacking vulnerabilities [33], vulnerable content providers [54], permission leaking [31], and unsafe usage of crypto-related APIs [17], [55], SSL connections [18], and dynamic code loading [38]. Recent studies have shown how some apps implement vulnerable custom authentication schemes [10] and how apps often use payment libraries insecurely [50].

Relevant works also highlight GUI-related vulnerabilities. For example, Felt et al. [19], Niemietz et al. [34], Chen et al. [14], Bianchi et al. [9], and Ren et al. [41] study UI attacks that lure users into entering credentials into malicious interfaces. A recent study [21] shows how redressing attacks can lead to complete compromise of the device UI, as an app can stealthily obtain “accessibility” permission and take full control of the user’s input and display output.

### XII. CONCLUSIONS

This work provides the first systematic study on the usage of the fingerprint API in Android. We demonstrate that its usage is often misunderstood and misused by app developers. Specifically, our study reveals that several popular apps, including Google Play Store and Square Cash, do not use the API in the most secure manner. We believe that the fingerprint API could significantly enhance the security and usability of existing authentication and authorization schemes, especially given the widespread availability of fingerprint hardware in modern mobile devices. We hope this paper will highlight current weaknesses and encourage Google to provide better documentation and address remaining issues.

### ACKNOWLEDGMENT

We would like to thank Martina Lindorfer for providing the dataset used in this paper and Carter Yagemann for insightful discussions about user authentication.

This research was supported by the ONR under grants N0001409-1-1042, N00014-15-1-2162, and N00014-17-1-2895, by the DARPA Transparent Computing program under contract DARPA-15-15-TC-FP-006, by the NSF under grant CNS-1408632, and by Google’s “Security, Privacy and Anti-Abuse Award.” Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the ONR, DARPA, NSF, or Google.

### REFERENCES

[1] “Xposed Installer,” http://repo.xposed.info/module/de.robv.android.xposed.installer, 2017.
[2] Y. Acar, M. Backes, S. Bugiel, S. Fahl, P. McDaniel, and M. Smith, “SoK: Lessons Learned From Android Security Research for Appified Software Platforms,” in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2016.
[3] Apple, “About Touch ID advanced security technology,” https://support.apple.com/en-us/HT204587, 2015.
[4] ——, “Get your apps ready for Touch Bar.” https://developer.apple.com/macos/touch-bar/, 2017.
[5] ARM, “ARM TrustZone,” https://www.arm.com/products/security-on-arm/trustzone, 2017.
[6] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie, “PScout: Analyzing the Android Permission Specification,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2012.
[7] V. Avdiienko, K. Kuznetsov, A. Gorla, A. Zeller, S. Arzt, S. Rasthofer, and E. Bodden, “Mining Apps for Abnormal Usage of Sensitive Data,” in Proceedings of the International Conference on Software Engineering (ICSE), 2015.
[8] A. Bianchi, “Source Code of the Developed Static Analysis Tool,” https://github.com/ucsb-seclab/android-broken-fingers, 2018.
[9] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and G. Vigna, “What the App is That? Deception and Countermeasures in the Android User Interface,” in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2015.
[10] A. Bianchi, E. Gustafson, Y. Fratantonio, C. Kruegel, and G. Vigna, “Exploitation and Mitigation of Authentication Schemes Based on Device-Public Information,” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2017.
[11] Board of Governors of the Federal Reserve System, “Consumers and Mobile Financial Services 2016,” https://www.federalreserve.gov/econresdata/consumers-and-mobile-financial-services-report-201603.pdf, 2016.
[12] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen, “EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework,” in Proceedings of the Annual Network & Distributed System Security Symposium (NDSS), 2015.
[13] E. Chen, Y. Pei, S. Chen, Y. Tian, R. Kotcher, and P. Tague, “OAuth Demystified for Mobile Application Developers,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2014.
[14] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking Into Your App Without Actually Seeing It: UI State Inference and Novel Android Attacks,” in Proceedings of the USENIX Security Symposium (Usenix SEC), 2014.
[15] A. Dmitrienko, C. Liebchen, C. Rossow, and A. Sadeghi, “On the (In)Security of Mobile Two-Factor Authentication,” in Proceedings of the International Conference on Financial Cryptography and Data Security (FC), 2014.
[16] T. Does and M. Maarse, “Subverting Android 6.0 fingerprint authentication,” Master Thesis at University of Amsterdam, 2016.
[17] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel, “An Empirical Study of Cryptographic Misuse in Android Applications,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2013.
[18] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith, “Why Eve and Mallory Love Android: An Analysis of Android SSL (in)Security,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2012.
[19] A. P. Felt and D. Wagner, “Phishing on Mobile Devices,” in Proceedings of the IEEE Workshop on Web 2.0 Security & Privacy (W2SP), 2011.
[20] FIDO Alliance, “What is FIDO?” https://fidoalliance.org/about/what-is-fido/, 2017.
[21] Y. Fratantonio, C. Qian, P. Chung, and W. Lee, “Cloak and Dagger: From Two Permissions to Complete Control of the UI Feedback Loop,” in Proceedings of the IEEE Symposium on Security and Privacy (S&P), 2017.
[22] D. Goodin, “Thieves drain 2FA-protected bank accounts by abusing SS7 routing protocol,” https://arstechnica.com/information-technology/2017/05/thieves-drain-2fa, 2017.
[23] Google, “New in Android Samples: Authenticating to remote servers using the Fingerprint API,” https://android-developers.googleblog.com/2015/10/new-in-android-samples-authenticating.html, 2015.
[24] ——, “Android Key Attestation Sample,” https://github.com/googlesamples/android-key-attestation/tree/master/server, 2016.
[25] ——, “Android FingerprintDialog Sample,” https://github.com/googlesamples/android-FingerprintDialog, 2017.
[26] ——, “Android Keystore System,” https://developer.android.com/training/articles/keystore.html, 2017.
[27] ——, “Android Security Bulletins,” https://source.android.com/security/bulletin/, 2017.
[28] ——, “FingerprintManager,” https://developer.android.com/reference/android/hardware/fingerprint/FingerprintManager.html, 2017.
[29] ——, “Material Design – Patterns – Fingerprint,” https://material.io/guidelines/patterns/fingerprint.html, 2017.
[30] ——, “Verifying Boot,” https://source.android.com/security/verifiedboot/verified-boot, 2017.
[31] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic Detection of Capability Leaks in Stock Android Smartphones,” in Proceedings of the Annual Network & Distributed System Security Symposium (NDSS), 2012.
[32] J. Lang, A. Czeskis, D. Balfanz, and M. Schilder, “Security Keys: Practical Cryptographic Second Factors for the Modern Web,” in Proceedings of the International Conference on Financial Cryptography and Data Security (FC), 2016.
[33] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang, “CHEX: Statically Vetting Android Apps for Component Hijacking Vulnerabilities,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2012.
[34] M. Niemietz and J. Schwenk, “UI Redressing Attacks on Android Devices,” Black Hat Abu Dhabi, 2012.
[35] OWASP-MSTG, “Local Authentication on Android,” https://github.com/OWASP/owasp-mstg/blob/master/Document/0x05f-Testing-Local-Authentication.md, 2017.
[36] J. Palsberg and M. I. Schwartzbach, “Object-Oriented Type Inference,” in Proceedings of the ACM Conference on Object-Oriented Programming: Systems, Languages, and Applications (OOPSLA), 1991.
[37] B. Parno, “Bootstrapping Trust in a ‘Trusted’ Platform,” in Proceedings of the USENIX Summit on Hot Topics in Security (HotSec), 2008.
[38] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna, “Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications,” in Proceedings of the Annual Network & Distributed System Security Symposium (NDSS), 2014.
[39] V. Rastogi, Y. Chen, and W. Enck, “AppsPlayground: Automatic Security Analysis of Smartphone Applications,” in Proceedings of the ACM Conference on Data and Application Security and Privacy (CODASPY), 2013.
[40] M. Rehman Zafar and M. Ali Shah, “Fingerprint Authentication and Security Risks in Smart Devices,” in Proceedings of the International Conference on Automation and Computing (ICAC), 2016.
[41] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu, “Towards Discovering and Understanding Task Hijacking in Android,” in Proceedings of the USENIX Security Symposium (Usenix SEC), 2015.
[42] A. Roy, N. Memon, and A. Ross, “MasterPrint: Exploring the Vulnerability of Partial Fingerprint-Based Authentication Systems,” IEEE Transactions on Information Forensics and Security, vol. 12(9), 2017.
[43] J. Scott-Railton and K. Kleemola, “London Calling – Two-Factor Authentication Phishing from Iran,” https://citizenlab.ca/2015/08/iran-two-factor-phishing/, 2015.
[44] J. V. Stoep, “Android: protecting the kernel,” https://events.linuxfoundation.org/sites/events/files/slides/Android-%20protecting%20the%20kernel.pdf, 2016.
[45] H. Sun, K. Sun, Y. Wang, and J. Jing, “TrustOTP: Transforming Smartphones into Secure One-Time Password Tokens,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2015.
[46] Telegram, “Keep Calm and Send Telegrams!” https://telegram.org/blog/15million-reuters, 2016.
[47] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan, “Soot – a Java Bytecode Optimization Framework,” in Proceedings of the Conference of the Centre for Advanced Studies on Collaborative Research, 1999.
[48] X. Wei, L. Gomez, I. Neamtiu, and M. Faloutsos, “Permission Evolution in the Android Ecosystem,” in Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2012.
[49] Widevine, “Widevine DRM Architecture Overview,” https://storage.googleapis.com/wvdocs/Widevine%20DRM%20Architecture%20Overview.pdf, 2017.
[50] W. Yang, Y. Zhang, J. Li, H. Liu, Q. Wang, Y. Zhang, and D. Gu, “Show Me the Money! Finding Flawed Implementations of Third-party In-app Payment in Android Apps,” in Proceedings of the Annual Network & Distributed System Security Symposium (NDSS), 2017.
[51] yubico, “FIDO U2F,” https://www.yubico.com/solutions/fido-u2f/, 2017.
[52] yubico, “YubiKeys,” https://www.yubico.com/products/yubikey-hardware/, 2017.
[53] Y. Zhang, Z. Chen, and T. Wei, “Fingerprints On Mobile Devices: Abusing and Leaking,” in Black Hat USA, 2015.
[54] Y. Zhou and X. Jiang, “Detecting Passive Content Leaks and Pollution in Android Applications,” in Proceedings of the Annual Network & Distributed System Security Symposium (NDSS), 2013.
[55] C. Zuo, W. Wang, R. Wang, and Z. Lin, “Automatic Forgery of Cryptographically Consistent Messages to Identify Security Vulnerabilities in Mobile Services,” in Proceedings of the Annual Network & Distributed System Security Symposium (NDSS), 2016.