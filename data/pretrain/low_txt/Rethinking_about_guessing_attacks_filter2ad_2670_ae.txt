### Introduction

The problem of determining whether it is possible to correctly guess any confidential data is a critical aspect of security analysis. Our framework provides a precise formulation of this knowledge reasoning problem. We use the following notation:
- \( T \) represents the set of observed messages.
- \( t \) represents some confidential data.
- \( X \) is the set of variables corresponding to all guesses made by the attacker.
- \( \sigma \) is a substitution with \( \text{Dom}(\sigma) = X \), indicating the correct guesses.

Given that passive eavesdropping is performed over legitimate protocol sessions, the observed messages must comply with the protocol specification, and thus \( T \) can be assumed to be a ground term set. Similarly, \( t \) is also ground. The markup term set \( \langle T \cup X, \sigma \rangle \) models the passive attacker’s knowledge. The problem of detecting passive guessing attacks is then reduced to deciding whether \( \langle T \cup X, \sigma \rangle \models t \).

### Detecting Passive Guessing Attacks

The detection of passive guessing attacks ultimately boils down to deciding the guessability. The final step is to provide a decision procedure for \( \langle T \cup X, \sigma \rangle \models t \). Unfortunately, in general, this problem may be undecidable [1].

### Deciding Guessability under the Dolev-Yao Intruder Model

Recently, Li and Wang [38] proposed a terminating procedure to determine recognizability under the standard Dolev-Yao intruder model [25]. We adopt this procedure to decide guessability under the Dolev-Yao model.

Although the original procedure (i.e., algorithm Solve) is intended for deciding strong recognizability (Definition 3.3), it can be easily extended to weak recognizability, as required in Definition 5.4. We extend the definition of the markup term set to a triple \( \langle T, \eta, \sigma \rangle \), which includes a second substitution \( \eta \) that accounts for partial solutions. The algorithm returns a new triple \( \langle T', \sigma', \eta' \rangle \) in solved form. Formally, we have:

**Theorem 7.1.** Let \( \langle T, \sigma \rangle \) be a markup term set, \( t \) be a ground term, and \( x \) be a fresh variable. Suppose that \( T\sigma \cup \{t\} \) does not contain function symbols \( \text{fst} \), \( \text{snd} \), or \( \text{dec} \). If \( T\sigma \vdash_{\text{Edy}} t \), and \( \text{Solve}(\langle T \cup \{x\}, \phi, \sigma \circ [t/x] \rangle) \) returns \( \langle T', \sigma', \eta' \rangle \) with \( x\eta' = t \), then \( \vec{T} \models_{\text{IEdy}} t \).

For more details on the algorithm, please refer to [38].

### Extension to Active Guessing Attacks

To handle an active attacker, it is important to model security protocols. As mentioned in Section 7.1, existing formal methods for protocol modeling fall into two groups: communication-based and computation-based. For simplicity, we adopt a computational view here: we regard the active attacker as a special passive attacker with an oracle. Specifically, we can add equations describing the oracle to the original equational theory. For instance, in Example 10, we just add Equation 4 to the equational theory \( E_{\text{dy}} \) (and obtain the new equational theory \( E'_{\text{dy}} \)). This method is similar to that of [3], which uses a set of second-order variables to keep track of the computations. In general, a symbolic trace [29, 8, 14] that describes the sequences of actions (receive or send) of a given protocol role brings about \( n \) distinct equations, where \( n \) is the number of messages sent by the role.

By extending the original equational theory, we get a new equational theory, say \( E' \), to model the active attacker’s capabilities. Therefore, the problem of detecting active guessing attacks reduces to deciding guessability under the new equational theory \( E' \). It should be noted that deciding \( \text{IE}' \) may be undecidable. After all, our approach considers an unbounded number of protocol sessions, for which protocol insecurity is undecidable [27]. Approximation techniques [20, 6] are usually employed to handle unbounded verification. Due to space limitations, we do not pursue these further here.

### Active Guessing Attack vs. Passive Guessing Attack

Thanks to the clear distinction between passive and active attacks, we find surprisingly that in many cases, the enhanced capabilities of an active attacker do not impact guessability at all; that is to say, an active attacker is no more powerful than a passive attacker in terms of guessability.

For example, in the protocol given at the beginning of the introduction, if an attacker knows \( \{{NA}_{K_{AB}}, {f(NA)}_{K_{AB}}\} \) and makes an explicit guess of \( K_{AB} \), then all actively guessable terms are actually passively guessable, as the following proposition shows.

**Proposition 7.2.** Let \( \vec{T} \) be a markup term set and \( t \) be a ground term. Suppose that
\[ \vec{T} = \langle \{{NA}_{K_{AB}}, {f(NA)}_{K_{AB}}, x\}, [K_{AB}/x] \rangle \]
and \( t \) does not contain function symbols \( g \), \( \text{dec} \), \( \text{fst} \), or \( \text{snd} \). Then, \( \vec{T} \models_{\text{IE}'_{\text{dy}}} t \) if and only if \( \vec{T} \models_{\text{IEdy}} t \).

### Conclusion

In this paper, we present a general framework for guessing, which clarifies and formalizes the intuitive understanding of "verifying a guess." Thanks to its innovative features—such as independence from any specific adversary model, support for multiple (explicit) guesses, and a definition to measure the hardness of guessing—this framework enables us to detect both passive and active guessing attacks, both of which rely critically on the decision problem \( \text{E} \).

Apart from the technical contributions of this paper, other key messages are that passive attacks are as important as active attacks, especially in the study of guessing attacks, and that both communication and computational views of active attacks may offer new insights in security protocol analysis.

There are two major limitations of this study. First, the standard Dolev-Yao model considered in Section 7.2 assumes "perfect encryption," i.e., \( \{m\}_k = \{m'\}_k \) if and only if \( m = m' \). Such an assumption is unrealistic for cryptographic primitives with visible algebraic properties such as exclusive or and homomorphic operators, as surveyed in [19]. Second, our definition of hardness is too general to be practically useful, and it is non-trivial to determine \( \min\max(\vec{T} \models t) \). Moreover, our analysis in Examples 8 and 9 assumes a uniform distribution of the guessing values, making brute force guessing the best approach. However, in reality, weak secrets (say, \( n \)-bit) usually have low entropy, making them easier to guess (< \( n \)-bit hard).

Our future work will address these limitations. In particular, we plan to investigate the problem of detecting guessability under more general equational theories and develop automatic tools for detecting guessing attacks.

### References

[1] M. Abadi and V. Cortier. Deciding knowledge in security protocols under equational theories. Theor. Comput. Sci., 367(1):2-32, 2006.

[2] M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In POPL '01, pages 104-115. ACM, 2001.

[3] M. Baudet. Deciding security of protocols against offline guessing attacks. In CCS '05, pages 16-25. ACM, 2005.

[4] G. Birkhoff. On the structure of abstract algebras. Mathematical Proceedings of the Cambridge Philosophical Society, 31(04):433-454, 1935.

[5] B. Blanchet. An efficient cryptographic protocol verifier based on Prolog rules. In CSFW '01, page 82, 2001.

[6] B. Blanchet. Automatic verification of correspondences for security protocols. J. Comput. Secur., 17(4):363-434, 2009.

[7] B. Blanchet, M. Abadi, and C. Fournet. Automated verification of selected equivalences for security protocols. Journal of Logic and Algebraic Programming, 75(1):3-51, 2008.

[8] M. Boreale and M. G. Buscemi. A method for symbolic analysis of security protocols. Theoretical Computer Science, 338(1-3):393-425, 2005.

[9] M. Burrows, M. Abadi, and R. Needham. A logic of authentication. ACM Trans. Comput. Syst., 8(1):18-36, 1990.

[10] I. Cervesato, N. A. Durgin, P. D. Lincoln, J. C. Mitchell, and A. Scedrov. A meta-notation for protocol analysis. In CSFW '99, page 55, 1999.

[11] Y. Chevalier and L. Vigneron. Automated unbounded verification of security protocols. In CAV '02, pages 324-337. Springer-Verlag, 2002.

[12] C. Ciobăcă, S. Delaune, and S. Kremer. Computing knowledge in security protocols under convergent equational theories. In CADE-22, pages 355-370. Springer-Verlag, 2009.

[13] M. Cohen and M. Dam. A complete axiomatization of knowledge and cryptography. In LICS '07, pages 77-88, 2007.

[14] H. Comon-Lundh and V. Cortier. Computational soundness of observational equivalence. In CCS '08, pages 109-118. ACM, 2008.

[15] H. Comon-Lundh and V. Shmatikov. Intruder deductions, constraint solving and insecurity decision in presence of exclusive or. In LICS '03, pages 271-280, June 2003.

[16] R. Corin, J. Doumen, and S. Etalle. Analysing password protocol security against offline dictionary attacks. Electron. Notes Theor. Comput. Sci., 121:47-63, 2005.

[17] R. Corin, S. Malladi, J. Alves-Foss, and S. Etalle. Guess what? Here is a new tool that finds some new guessing attacks. In R. Gorrieri and R. Lucchi, editors, IFIP WG 1.7, pages 62-71, 2003.

[18] V. Cortier and S. Delaune. Deciding knowledge in security protocols for monoidal equational theories. In LPAR, pages 196-210, 2007.

[19] V. Cortier, S. Delaune, and P. Lafourcade. A survey of algebraic properties used in cryptographic protocols. J. Comput. Secur., 14(1):1-43, 2006.

[20] C. J. Cremers. Unbounded verification, falsification, and characterization of security protocols by pattern refinement. In CCS '08, pages 119-128. ACM, 2008.

[21] S. Delaune. Easy intruder deduction problems with homomorphisms. Information Processing Letters, 97(6):213-218, 2006.

[22] S. Delaune and F. Jacquemard. A theory of dictionary attacks and its complexity. In CSFW '04, page 2, 2004.

[23] N. Dershowitz and D. A. Plaisted. Rewriting. In Handbook of Automated Reasoning, pages 535-610. MIT Press, 2001.

[24] Y. Ding and P. Horster. Undetectable online password guessing attacks. SIGOPS Oper. Syst. Rev., 29(4):77-86, 1995.

[25] D. Dolev and A. Yao. On the security of public key protocols. Information Theory, IEEE Transactions on, 29(2):198-208, Mar 1983.

[26] P. H. Drielsma, S. Modersheim, and L. Viganò. A formalization of offline guessing for security protocol analysis. In Logic for Programming, Artificial Intelligence, and Reasoning, volume 3452, pages 363-379. 2005.

[27] N. Durgin, P. Lincoln, J. Mitchell, and A. Scedrov. Multiset rewriting and the complexity of bounded security protocols. J. Comput. Secur., 12(2):247-311, 2004.

[28] F. Fábrega, J. Herzog, and J. Guttman. Strand spaces: proving security protocols correct. J. Comput. Secur., 7(2-3):191-230, 1999.

[29] F. J. T. Fábrega. Strand spaces: proving security protocols correct. J. Comput. Secur., 7(2-3):191-230, 1999.

[30] R. Fagin, J. Y. Halpern, Y. Moses, and M. Y. Vardi. Reasoning About Knowledge, volume 1 of MIT Press Books. The MIT Press, December 2003.

[31] L. Gong. Optimal authentication protocols resistant to password guessing attacks. In CSFW '95, page 24, 1995.

[32] L. Gong, M. Lomas, R. Needham, and J. Saltzer. Protecting poorly chosen secrets from guessing attacks. Selected Areas in Communications, IEEE Journal on, 11(5):648-656, jun. 1993.

[33] B. Groza and M. Minea. A calculus to detect guessing attacks. In ISC '09, pages 59-67. Springer-Verlag, 2009.

[34] S. Halevi and H. Krawczyk. Public-key cryptography and password protocols. ACM Trans. Inf. Syst. Secur., 2(3):230-268, 1999.

[35] J. Halpern, Y. Moses, and M. Vardi. Algorithmic knowledge. In Proc. of 5th conference on Theoretical Aspects of Reasoning about Knowledge, pages 255-266, 1994.

[36] J. Heather, G. Lowe, and S. Schneider. How to prevent type flaw attacks on security protocols. J. Comput. Secur., 11(2):217-244, 2003.

[37] R. Landauer. Irreversibility and heat generation in the computing process. IBM Journal of Research and Development, 44(1.2):261-269, jan. 2000.

[38] Z. Li and W. Wang. Deciding recognizability under Dolev-Yao intruder model. In ISC '10, to appear.

[39] Z. Li and W. Wang. Rethinking about type-flaw attacks. In Global Telecommunications Conference, 2010. GLOBECOM 2010. IEEE, to appear.

[40] T. Lomas, L. Gong, J. Saltzer, and R. Needham. Reducing risks from poorly chosen keys. SIGOPS Oper. Syst. Rev., 23(5):14-18, 1989.

[41] G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In TACAS '96, pages 147-166, 1996.

[42] G. Lowe. Analysing protocols subject to guessing attacks. J. Comput. Secur., 12(1):83-97, 2004.

[43] C. Meadows. A procedure for verifying security against type confusion attacks. In CSFW '03, pages 62-72, 2003.

[44] J. Millen and V. Shmatikov. Constraint solving for bounded-process cryptographic protocol analysis. In CCS '01, pages 166-175. ACM, 2001.

[45] S. Schneider. Security properties and CSP. In SP '96, page 174, 1996.

[46] D. X. Song, S. Berezin, and A. Perrig. Athena: a novel approach to efficient automatic security protocol analysis. J. Comput. Secur., 9(1-2):47-74, 2001.