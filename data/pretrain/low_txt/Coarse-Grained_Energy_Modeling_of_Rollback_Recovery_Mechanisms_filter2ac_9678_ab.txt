### Introduction to LAMMPS and BLCR

LAMMPS (Large-scale Atomic/Molecular Massively Parallel Simulator) [13] is a key simulation tool used by the Department of Energy (DOE) and is representative of many other molecular dynamics codes. For our study, we utilized the embedded atom method (EAM) metallic solid input script, which is part of the Sequoia benchmark suite. BLCR (Berkeley Lab Checkpoint/Restart) [15] is a widely-used, open-source, system-level checkpoint/restart library.

### Model Validation and Energy Prediction

Our validation approach involved running LAMMPS for a sufficiently long period to allow for multiple checkpoints. During the measurement phase, we collected coarse-grained power measurements from the execution period up to and including the first checkpoint. These measurements were then input into our model to predict the energy footprint of the entire application's execution. We continued collecting measurements throughout the application's execution to compare the model's predicted values with the actual observed values. This process was repeated three times, and the results presented are the average of these three runs. Each LAMMPS run included 50 checkpoints at fixed 10-second intervals.

During the measurement phase, we sampled power to obtain \(\bar{P}_{\text{app}}\), the average power while executing application code, and \(\bar{P}_{\text{ckpt}}\), the average power for taking a checkpoint. For the entire application's execution, we also measured \(T_{\text{app}}\), the total time spent executing the application.

### Checkpoint Compression Energy Performance

Using our validated model, we predicted the energy performance for LAMMPS and three mini-apps from the Mantevo Project [16]: HPCCG, pHPCCG, and MiniFE. We obtained the checkpoint sizes and compression/decompression performance statistics from a previous project [3]. Our application efficiency model, which uses Daly's optimal checkpoint interval calculation [6], was employed to calculate the time spent on (1) checkpointing, (2) restarting from failures, and (3) executing rework after restarts. Daly's model assumes that node failures are independent and exponentially distributed, and it inputs the system mean time between failures (MTBF), checkpoint commit time, checkpoint restart time, number of application nodes, and the application wall clock time in a failure-free environment.

In Table II, we list the empirically measured average power costs for (1) unit time application run, (2) checkpoint operation, and (3) restart operation, which were input into our model. We also empirically measured the average power consumption of checkpoint compression and decompression and incorporated these metrics into the model to account for the energy costs of the checkpoint compression optimization.

#### Results and Observations

Figure 3 shows the overall energy savings using CR with checkpoint compression versus regular CR. We made two key observations:
1. The CR compression optimization always provides a reduction in overall application energy consumption.
2. The energy savings yielded by the CR compression optimization increases with application scale. In our study, the energy savings increased from 10% at a socket count of 10,000 to almost 90% at a socket count of 90,000.

The reduction in the number of checkpoints taken offsets the extra per-checkpoint energy consumed due to checkpoint compression. This reduction is illustrated in Figure 4, which compares the total number of checkpoints taken for uncompressed and compressed cases for the same workload. Due to the increased application efficiency with checkpoint compression, even though the checkpoint frequency increases, the decreased application execution time leads to fewer overall checkpoints being taken.

The energy savings increase with scale because as an application's scale increases, the application becomes increasingly inefficient using normal CR (falling below 10% [3]), and the impact of CR optimizations like compression becomes greater. As shown in Figure 4, as scale increases, the difference in the number of checkpoints taken with and without checkpoint compression increases.

Finally, Figure 5 isolates the energy savings just for CR operations yielded by compression. This figure shows an energy savings ranging from 45% to 96%. Referring again to Figure 4, compression does not reduce the number of checkpoints taken by LAMMPS as much as it does for the other applications, resulting in lower energy savings for LAMMPS both overall (Figure 3) and when considering only CR operations (Figure 5).

### Conclusions and Future Work

In this work, we presented and validated a simple yet accurate coarse-grained model for predicting the energy consumption of an application using CR-based fault tolerance mechanisms. Additionally, we used this model to show that while checkpoint compression results in higher optimal checkpoint frequencies and increased per-checkpoint energy consumption, the optimization leads to an overall reduction in application energy consumption due to significantly reduced execution times. Furthermore, we showed that this overall energy savings increases with application scale.

While our coarse-grained modeling approach shows promising accuracy, several areas of future work remain. This includes model validation for restart and rework phases for application runs with failure occurrences. An additional open question is whether CPU throttling during compression/decompression can further improve an application's efficiency or its energy footprint.

### References

[1] S. Ashby, P. Beckman, J. Chen, P. Colella, B. Collins, D. Crawford, J. Dongarra, D. Kothe, R. Lusk, P. Messina et al., “The opportunities and challenges of exascale computing,” Summary Report of the Advanced Scientific Computing Advisory Committee (ASCAC) Subcommittee (November 2010), 2010.

[2] K. Bergman et al., “ExaScale Computing Study: Technology Challenges in Achieving Exascale Systems,” Defense Advanced Research Projects Agency Information Processing Techniques Office (DARPA IPTO), Tech. Rep., September 2008.

[3] D. Ibtesham, D. Arnold, P. G. Bridges, K. B. Ferreira, and R. Brightwell, “On the viability of compression for reducing the overheads of checkpoint/restart-based fault tolerance,” 2012 41st International Conference on Parallel Processing, vol. 0, pp. 148–157, 2012.

[4] T. Z. Islam, K. Mohror, S. Bagchi, A. Moody, B. De Supinski, and R. Eigenmann, “MCRENGINE: A Scalable Checkpointing System Using Data-Aware Aggregation and Compression,” in High Performance Computing, Networking, Storage and Analysis (SC), 2012 International Conference for, 2012.

[5] B. Mills, R. E. Grant, K. B. Ferreira, and R. Riesen, “Evaluating energy savings for checkpoint/restart,” in Proceedings of the 1st International Workshop on Energy Efficient Supercomputing. ACM, 2013, p. 6.

[6] J. T. Daly, “A higher order estimate of the optimum checkpoint interval for restart dumps,” Future Gener. Comput. Syst., vol. 22, no. 3, pp. 303–312, 2006.

[7] S. Levy, B. Topp, K. B. Ferreira, D. Arnold, T. Hoefler, and P. Widener, “Using simulation to evaluate the performance of resilience strategies at scale,” in High Performance Computing, Networking, Storage and Analysis (SCC), 2013 SC Companion:. IEEE, 2013.

[8] E. Meneses, O. Sarood, and L. V. Kale, “Assessing energy efficiency of fault tolerance protocols for HPC systems,” in Proceedings of the 2012 IEEE 24th International Symposium on Computer Architecture and High Performance Computing, ser. SBAC-PAD ’12. Washington, DC, USA: IEEE Computer Society, 2012, pp. 35–42. [Online]. Available: http://dx.doi.org/10.1109/SBAC-PAD.2012.12

[9] M. El Mehdi Diouri, O. Gluck, L. Lefevre, and F. Cappello, “Energy considerations in checkpointing and fault tolerance protocols,” in Dependable Systems and Networks Workshops (DSN-W), 2012 IEEE/IFIP 42nd International Conference on, June 2012, pp. 1–6.

[10] B. Mills, T. Znati, R. Melhem, R. E. Grant, and K. B. Ferreira, “Energy consumption of resilience mechanisms in large scale systems,” in Parallel, Distributed and Network-Based Processing (PDP), 22st Euromicro International Conference, 2014.

[11] J. H. Laros, D. DeBonis, and P. Pokorny, PowerInsight - A Commodity Power Measurement Capability., Apr 2013. [Online]. Available: http://www.osti.gov/scitech/servlets/purl/1078977

[12] J. G. Elytra, “Parallel Data Compression With Bzip2.”

[13] S. J. Plimpton, “Fast Parallel Algorithms for Short-Range Molecular Dynamics,” Journal Computation Physics, vol. 117, pp. 1–19, 1995.

[14] Sandia National Laboratories. (2010, April) The LAMMPS Molecular Dynamics Simulator. [Online]. Available: http://lammps.sandia.gov

[15] P. H. Hargrove and J. C. Duell, “Berkeley Lab Checkpoint/restart (BLCR) for Linux Clusters,” Journal of Physics: Conference Series, vol. 46, no. 1, 2006.

[16] M. A. Heroux, D. W. Doerfler, P. S. Crozier, J. M. Willenbring, H. C. Edwards, A. Williams, M. Rajan, E. R. Keiter, H. K. Thornquist, and R. W. Numrich, “Improving Performance via Mini-applications,” Sandia National Laboratory, Tech. Rep. SAND2009-5574, 2009.