### FormatGuard: Runtime Detection of Format-String Attacks

FormatGuard [12] modifies source code using a customized version of the C Preprocessor (cpp) and a wrapper function for the `printf` function. This modification allows the detection of format-string attacks at runtime. While this technique is effective against specific types of attacks, it has the limitation of addressing only a small subset of the broader range of memory exploits, as illustrated in Figure 2.

### 5.2 Runtime Bounds and Pointer Checking

These techniques prevent buffer overflows by checking each memory access operation that could potentially cause a memory error. Various approaches have been used to insert these checks, including:
- Source-to-source translation [25, 5]
- Specially modified compilers [36, 22]
- Binary rewriting [19]
- Virtual machines/interpreters [24]

Despite their effectiveness, these methods suffer from significant drawbacks such as high runtime overheads (often exceeding 100%), restrictions to a subset of the C language, and changes to the memory model or pointer semantics. In contrast, the focus of this paper is on techniques that produce very low overheads and are fully compatible with all C programs.

### 5.3 Compile-Time Analysis Techniques

Compile-time analysis techniques [18, 32, 37, 14, 26] analyze program source code to determine which array and pointer accesses are safe. These approaches are valuable tools for debugging but often have one or more of the following limitations:
- They do not detect all memory errors.
- They generate many false positive warnings.
- They do not scale well to large programs.

Our work aims to develop techniques that require no additional effort from programmers, making them applicable to a vast base of existing software in binary form without any programmer intervention.

### 5.4 Hybrid Approaches

Hybrid approaches, such as CCured [28] and Cyclone [21], perform runtime memory-error checking while using static analysis to minimize the number of checks. However, these approaches are not fully compatible with existing C code. Additionally, they disable explicit memory freeing and rely on garbage collection.

### 5.5 Code Obfuscation

Code obfuscation [38, 10, 4] is a program transformation technique that complicates the low-level semantics of programs without affecting user-observable behavior. This makes obfuscated programs difficult to understand and reverse-engineer. The key difference between program obfuscation and address obfuscation is that program obfuscation prevents most static analyses, while address obfuscation specifically makes it impossible to predict the relative or absolute addresses of program code and data. Other analyses, such as reverse compilation and extraction of flow graphs, are generally unaffected by address obfuscation.

### 5.6 Randomizing Code Transformations

Address obfuscation is an instance of introducing diversity in non-functional aspects of software, as suggested by Forrest, Somayaji, and Ackley [17]. Their implementation, called a randomizing compiler, introduces randomness in non-functional aspects of compiled code without affecting language semantics. As a proof of concept, they modified the gcc compiler to add a random amount of padding to each stack allocation request, which defeats most stack-smashing attacks but not large overflow attacks.

Recent research [8, 1, 39, 15] has explored randomization as a practical approach to defeat buffer-overflow and related attacks. For example, Chew and Song [8] randomize the base address of the stack, system call numbers, and library entry points through a combination of program loader modifications, kernel system call table modifications, and binary rewriting. Xu, Kalbarczyk, and Iyer [39] developed transparent runtime randomization, which randomizes the base address of the stack, heap, dynamically loaded libraries, and GOT. The PaX project's ASLR approach [1] randomizes the base address of each program region (heap, code, stack, data). 

ASLR is the most advanced in terms of implementation but is vulnerable to attacks that rely on adjacency information or base addresses of different memory segments. Additional randomization, such as random-sized gaps within stack frames and blocks allocated by `malloc`, reordering of (and random padding within) code and static variables, can address these weaknesses. Our approach, implemented using program transformations, can be more easily ported to different operating systems and can protect individual security-critical applications without modifying the rest of the system.

### PointGuard: Complementary Approach

PointGuard [13] complements our approach by randomizing stored pointer values rather than the locations where objects are stored. This is achieved by XORing pointer values with a random integer mask generated at the start of program execution. PointGuard provides broad protection against pointer-related attacks but does not protect against attacks that modify security-critical data through buffer overflows. It also requires accurate type information, which can be challenging to obtain in C due to features like untyped buffers and functions with untyped parameters.

### 6. Conclusion

Address obfuscation has significant potential to mitigate the threat of widespread buffer-overflow attacks by randomly rearranging the memory space during program execution. Unlike attack-specific mechanisms, address obfuscation is a generic solution applicable to many memory error-related attacks. By randomizing the memory layout, even if an attacker subverts one system, the attack must be reinitiated from scratch for each subsequent system, slowing down the spread of self-replicating attacks.

Future work will focus on improving the quality of randomization at the binary level, particularly in randomizing the relative distances between objects in all program regions. Two avenues for this include developing a tool for existing binaries and augmenting binaries with an extra section containing information for safe relocations.

### Acknowledgments

This research was supported in part by AFOSR grant F49620-01-1-0332, ONR University Research Initiative Grant N00140110967, and NSF grants CCR-0098154 and CCR-0208877.

### References

[1] Pax. Published on World-Wide Web at URL http://pageexec.virtualave.net, 2001.
[2] Anonymous. Once upon a free . . . . Phrack, 11(57), August 2001.
[3] Anonymous. Bypassing pax aslr protection. Phrack, 11(59), July 2002.
[4] D. Aucsmith. Tamper-resistant software: An implementation. In Ross Anderson, editor, Information hiding: first international workshop, Cambridge, U.K., May 30–June 1, 1996: proceedings, volume 1174 of Lecture Notes in Computer Science, pages 317–333, Berlin, Germany / Heidelberg, Germany / London, UK / etc., 1996. Springer-Verlag.
[5] Todd M. Austin, Scott E. Breach, and Gurindar S. Sohi. Efficient detection of all pointer and array access errors. In Proceedings of the ACM SIGPLAN’94 Conference on Programming Language Design and Implementation (PLDI), pages 290–301, Orlando, Florida, 20–24 June 1994. SIGPLAN Notices 29(6), June 1994.
[6] Arash Baratloo, Navjot Singh, and Timothy Tsai. Transparent run-time defense against stack smashing attacks. In Proceedings of the 2000 USENIX Annual Technical Conference (USENIX-00), pages 251–262, Berkeley, CA, June 2000.
[7] Bulba and Ki13r. Bypassing StackGuard and StackShield. Phrack, 11(56), May 2000.
[8] Monica Chew and Dawn Song. Mitigating buffer overflows by operating system randomization. Technical Report CMU-CS-02-197, Carnegie Mellon University, December 2002.
[9] Tzi-cker Chiueh and Fu-Hau Hsu. RAD: A compile-time solution to buffer overflow attacks. In 21st International Conference on Distributed Computing, page 409, Phoenix, Arizona, April 2001.
[10] Christian Collberg, Clark Thomborson, and Douglas Low. Breaking abstractions and unstructuring data structures. In Proceedings of the 1998 International Conference on Computer Languages, pages 28–38. IEEE Computer Society Press, 1998.
[26] David Larochelle and David Evans. Statically detecting likely buffer overflow vulnerabilities. In Proceedings of the 10th USENIX Security Symposium, Washington, D.C., August 2001.
[27] Mudge. How to write buffer overflows. Published on World-Wide Web at URL http://www.insecure.org/stf/mudge_buffer_overflow_tutorial.html, 1997.
[28] George C. Necula, Scott McPeak, and Westley Weimer. CCured: Type-safe retrofitting of legacy code. In Symposium on Principles of Programming Languages (POPL ’02), pages 128–139, Portland, OR, January 2002.
[29] Nergal. The advanced return-into-lib(c) exploits. Phrack, 11(58), Dec 2001.
[30] Mary Lou Nohr. Understanding ELF Object Files and Debugging Tools. Number ISBN: 0-13-091109-7. Prentice Hall Computer Books, 1993.
[31] Aleph One. Smashing the stack for fun and profit. Phrack, 7(49), November 1996.
[32] Radu Rugina and Martin Rinard. Symbolic bounds analysis of pointers, array indices, and accessed memory regions. In Proceedings of the ACM SIGPLAN ’00 conference on Programming language design and implementation, pages 182–195. ACM Press, 2000.
[33] scut. Exploiting format string vulnerabilities. Published on World-Wide Web at URL http://www.team-teso.net/articles/formatstring, March 2001.
[34] Snort(tm) advisory: Integer overflow in stream4. April 2003. Published on World-Wide Web at URL http://www.kb.cert.org/vuls/id/JPLA-5LPR9S.
[35] SSH CRC32 attack detection code contains remote integer overflow. 2001. Published on World-Wide Web at URL http://www.kb.cert.org/vuls/id/945216.
[36] Joseph L. Steffen. Adding run-time checking to the portable C compiler. Software-Practice and Experience, 22:305–316, April 1992.
[37] David Wagner, Jeffrey S. Foster, Eric A. Brewer, and Alexander Aiken. A first step towards automated detection of buffer overrun vulnerabilities. In Network and Distributed System Security Symposium, San Diego, CA, 2000.
[38] Chenxi Wang, Jack Davidson, Jonathan Hill, and John Knight. Protection of software-based survivability mechanisms. In International Conference on Dependable Systems and Networks, Goteborg, Sweden, July 2001.
[39] Jun Xu, Zbigniew Kalbarczyk, and Ravishankar K. Iyer. Transparent runtime randomization for security. Technical Report UILU-ENG-03-2207, Center for Reliable and High-Performance Computing, University of Illinois at Urbana-Champaign, May 2003.
[40] Lu Xun. A Linux executable editing library. Masters Thesis, available at http://www.geocities.com/fasterlu/leel.htm, 1999.
[11] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather Hinton. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proc. 7th USENIX Security Conference, pages 63–78, San Antonio, Texas, January 1998.
[12] Crispin Cowan, Matt Barringer, Steve Beattie, and Greg Kroah-Hartman. FormatGuard: Automatic protection from printf format string vulnerabilities. In USENIX Security Symposium, 2001.
[13] Crispin Cowan, Steve Beattie, John Johansen, and Perry Wagle. PointGuard: Protecting pointers from buffer overflow vulnerabilities. In Proceedings of the 12th USENIX Security Symposium, Washington, D.C., August 2003.
[14] Nurit Dor, Michael Rodeh, and Mooly Sagiv. Cleanness checking of string manipulations in C programs via integer analysis. In Static Analysis Symposium, volume 2126 of Lecture Notes in Computer Science, pages 194–?? Springer Verlag, June 2001.
[15] Daniel C. DuVarney, R. Sekar, and Yow-Jian Lin. Benign software mutations: A novel approach to protect against large-scale network attacks. Center for Cybersecurity White Paper (prepared for Airforce Office of Scientific Research), October 2002.
[16] Hiroaki Etoh and Kunikazu Yoda. Protecting from stack-smashing attacks. Published on World-Wide Web at URL http://www.trl.ibm.com/projects/security/ssp/main.html, June 2000.
[17] Stephanie Forrest, Anil Somayaji, and David H. Ackley. Building diverse computer systems. In 6th Workshop on Hot Topics in Operating Systems, pages 67–72, Los Alamitos, CA, 1997. IEEE Computer Society Press.
[18] Jeffrey S. Foster, Manuel Fähndrich, and Alexander Aiken. A theory of type qualifiers. In ACM SIGPLAN Conference on Programming Language and Design, Atlanta, GA, May 1999.
[19] Reed Hastings and Bob Joyce. Purify: A tool for detecting memory leaks and access errors in C and C++ programs. In USENIX Association, editor, Proceedings of the Winter 1992 USENIX Conference, pages 125–138, Berkeley, CA, USA, January 1992. USENIX.
[20] Oded Horovitz. Big loop integer protection. Phrack, 11(60), December 2002.
[21] Trevor Jim, Greg Morrisett, Dan Grossman, Micheal Hicks, James Cheney, and Yanling Wang. Cyclone: a safe dialect of C. In USENIX Annual Technical Conference, Monterey, CA, June 2002.
[22] Robert W. M. Jones and Paul H. J. Kelly. Backwards-compatible bounds checking for arrays and pointers in C programs. In M. Kamkar and D. Byers, editors, Third International Workshop on Automated Debugging. Linköping University Electronic Press, 1997.
[23] Michel Kaempf. Vudo malloc tricks. Phrack, 11(57), August 2001.
[24] Stephen Kaufer, Russell Lopez, and Sesha Pratap. Saber-C — an interpreter-based programming environment for the C language. In USENIX Association, editor, Summer USENIX Conference Proceedings, pages 161–171, Berkeley, CA, USA, Summer 1988. USENIX.
[25] Samuel C. Kendall. BCC: Run–time checking for C programs. In Proceedings of the USENIX Summer Conference, El. Cerrito, California, USA, 1983. USENIX Association.