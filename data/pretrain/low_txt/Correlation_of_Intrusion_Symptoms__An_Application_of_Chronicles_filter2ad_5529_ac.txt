### Event and Alarm Correlation Using Chronicles

#### Example of IDS Cooperation
```plaintext
event(alarm[shell_exec, ?, ?target], t2);
noevent(alarm[login, ?, ?target], (t1, t2));
?bufov_snort_alarm in {sid_203, sid_34};
t2 - t1 in [0, 100];
when recognized {
    emit event(alarm[successful_buffer_overflow, ?source, ?target], t2);
}
```
**Figure 8.** A Chronicle example: Example of IDS cooperation.

**Synchronization of Clocks:**
The upstream sensors that generate alarms must have their clocks synchronized, and the gap between two clocks should be coherent with the time resolution used in the chronicle models. If these conditions are met, chronicles can manage delays due to sensor processing or transport durations. Whether an event is delayed or not, its integration into a chronicle is done in the same way because the chronicle's temporal reasoning is based solely on the events' timestamps, not on the running clock.

**Description of the Chronicle:**
In the example provided in Figure 8, three sensors are used: Snort, Snare, and Syslog. The Snort sensor sends the alarm `?bufov_snort_alarm`, `shell_exec` is triggered by a system-based monitoring tool (Snare), and the login alarm is sent by Syslog. The chronicle monitors successful attacks resulting in the execution of a shell on a host.

- **Line 3:** We wait for any alarm about a buffer overflow attack.
- **Line 6:** The Snort alarm names (e.g., `sid_203`, `sid_34`) that refer to buffer overflow attacks are enumerated.
- **Condition:** If such an attack is followed by a shell execution on the same target, and no login execution occurred between the two (which could justify the shell execution), then the chronicle is recognized.

### Experimental Results
The chronicle models proposed in this paper have not been tested on a live system yet. We plan to do this in the near future. They have only been validated on alarm logs collected in our network.

However, concerning the ability of the chronicle recognition system to cope with intrusion alarm flow, it is important to note that chronicles were primarily designed to diagnose failures in telecommunication networks by analyzing alarms issued by equipment. In this context, the recognition system must be efficient because it has to deal with alarm bursts and high alarm rates.

The alarm rates observed in the intrusion detection field are of the same order as those observed in other fields where chronicles have already been successfully applied.

**Performance Considerations:**
- **Chronicle Invalidation Mechanism:** If no chronicle invalidation mechanism is specified by the chronicle writer in a chronicle model, the chronicle instances tree may grow indefinitely because of chronicles living forever (see Section 2.2).
- **Number of Models:** Performance also depends on the number of chronicle models used in parallel. The time required to process an event grows linearly with the number of chronicle models. In [11], efficiency experiments were performed with 80 chronicle models, containing about 10 event patterns among 50 domain attributes, 20 temporal constraints, and 4 assertions. In this configuration, the integration of an event required about 10 ms. Detailed efficiency arguments about chronicles can be found in [11] (pages 78–81).

### M2D2: An Intrusion Alarm Correlation Infrastructure
Except for the chronicle model proposed in Figure 7, `alarm(name, src, trg)` is the only domain attribute used in the chronicle models discussed in the previous section.

In [1], we argue that current alarm correlation approaches do not take advantage of all the available information, especially environmental information. For example, false alarms are often incorrectly attributed to poor intrusion detection system techniques when, in many cases, they are caused by the environment properties not being taken into account.

To address this, we proposed a formal data model called M2D2. M2D2 federates the information required for alarm correlation. In this section, we outline how the chronicle recognition system can cooperate with the M2D2 framework.

#### Overview of M2D2
M2D2 can be seen as an infrastructure upon which alarm correlation systems can rely for events and structural information. M2D2 provides concepts and relations modeled with standard propositions of classical first-order logic.

**Concepts in M2D2:**
- **Characteristics of the Information System:** Include information about the cartography and security policy.
- **Vulnerabilities:** Include information about the characteristics of known vulnerabilities: prerequisites, effects, and affected products.
- **Security Tools:** Include information about the nature and configuration of the tools used to monitor entities of the information system for signs of attacks.
- **Events:** Include basic events (signs of attacks) and alarms provided by IDSes, but also by correlation systems.

A more detailed description of M2D2 can be found in [1].

#### M2D2 and the Chronicles
There is a two-way relationship between M2D2 and the chronicles: as a correlation system, the chronicles take advantage of the data provided by M2D2 and also act as an alarm provider for M2D2.

- **Data Modeling:** M2D2 data are modeled with first-order logic predicates, so they can be used as the atemporal information of the reified logic on which the chronicles are based. In other words, M2D2’s concepts are used as domain attributes of the chronicles.
- **Current Approach:** Only M2D2’s alarm concepts are used as domain attributes of chronicles (see Section 3). However, the other available concepts would enhance the chronicle models.
- **Example:** The `infected` domain attribute in Example 3.4 is an example of the use of a domain attribute corresponding to M2D2’s cartography class of information.

**Topological Information Example:**
- **Video Conferences:** Require the firewall to be open. Every participant is notified of the port number they should use, and connection bursts on the server are observed. Thus, during these periods, port scans should be described as false positives. By tracking the topological modification (the firewall opening), a chronicle could qualify the port scans as false positives during video-conference sessions.

**Alarm Hierarchy:**
- **Hierarchy Structure:** In M2D2, high-level alarms triggered by correlation systems are related to lower-level alarms with the `part_of` relation. Thus, alarms are structured in a hierarchy, where leaf nodes are the lowest-level alarms provided by basic IDSes, and root nodes are the highest-level alarms, built with intermediate events.
- **Operator Interaction:** Only the hierarchies' root alarms are directly shown to the operator. If detailed information about the alarms is required, the operator can browse the alarm hierarchy. There is a straightforward mapping between the IDWG [15] alarm structures and the event concept of M2D2.

**Integration with M2D2:**
- **Looping Functionality:** Using previously recognized chronicles into other chronicle models is a functionality already included in the chronicle recognition system (see the looping functionality in Section 2.1).
- **High-Level Alarms:** By making M2D2 and the chronicle recognition system cooperate, the recognized chronicles are transformed into M2D2 high-level alarms linked with the events with the `part_of` relation. The new alarms provided by the chronicle recognition system are de facto made available to other correlation systems relying on M2D2.

**Figure 9.** Relations between alarms:
- **Nimda Attack Example:** When a Nimda attack occurs, Snort generates the `iis-decode-bug`, `iis-cmd-exe`, and `iis-unicode` alarms. These alarms are made available to CRS, which recognizes a Nimda attack. A Nimda alarm is triggered and related to the previous alarms with the `part_of` relationship. Only the Nimda alarm is provided to the operator. On the contrary, the `shellcode` alarm is not related to any recognized chronicle, so it is directly provided to the operator. The Nimda alarm could be involved in another alarm via the `part_of` relation.

**Figure 10.** Interactions between the chronicles and M2D2:
- **System Architecture:** On this figure, we see that alarms provided by sensors (S1 and S2) are sent to a dispatcher. The dispatcher assigns unique identifiers to events and dispatches them to the M2D2 database and to the correlation systems performing asynchronous (i.e., event-driven) analysis. Chronicle recognition is one of these asynchronous processes. Other environmental information contained in M2D2 is exploited as domain attributes of the chronicles.

### Related Work
Among the six categories of languages proposed by Eckmann et al. [2], two are relevant here: detection languages and correlation languages. Our approach aims at correlating alarms, so we shall first compare to other correlation languages.

- **Lambda Language:** Proposed by Cuppens [23], whose scenarios steps represent the attacker’s actions (whether observable or not). However, we believe that attackers' strategies are too random to be the subject of explicit attack scenarios. In [24], Cuppens also proposes more flexible approaches to correlate alarms through the underlying attacks' consequences and prerequisites.
- **Statl Language:** A transition-based language, strongly dedicated to the underlying search algorithm, whereas the chronicles language is a high-level declarative language. This language enabled the successful application of chronicles to many distinct fields. Our intrusion alarm correlation component benefits from the operational and stable chronicle recognition system developed by Dousson for these application fields.
- **Time-Based Reasoning:** Another essential difference with the two previous works is that time is fundamental in chronicles, whereas the reasoning of Lambda and Statl is not based on time.

Although we are interested in correlating alarms, we shall compare our work with existing detection languages. Detection languages analyze raw events, some of which are manifestations of an attack. This is the fundamental difference between correlation and detection languages: in detection, the goal is to identify the events in the monitored stream that are suspects, among all the legitimate ones. In correlation, all events are potentially suspects.

- **High-Level Declarative Languages:** Operators used in high-level declarative detection languages like Sutekh from Pouzol [21] and LogWeaver from Goubault-Larrecq [3] are closer to our work than previously cited correlation languages. These languages could most likely be transposed to correlation languages (i.e., take alerts as input instead of raw events).
- **Temporal Approaches:** Pouzol and Goubault-Larrecq use non-reified temporal approaches; they take as input a trail, i.e., a totally ordered set of events. From the point of view of expressiveness, since reified logics accord a special status to time and allow one to predicate and quantify over propositional terms, they are more expressive for classifying different types of temporal occurrence and in representing both non-temporal and temporal aspects of causal relationships.

**Risk Manager:**
- **Comparison with Risk Manager:** As much as we know, Pouzol does not provide the counting predicate, but the chronicles would benefit from his work concerning the problem of the recognition being exhaustive, evoked in Section 2.2 [22]. We may also compare our work with an existing alarm correlation system, called Risk Manager [8]. Risk Manager uses time information to aggregate alarms but is not based on a temporal reasoning. Moreover, it does not provide any means to express explicit alarm sequences.

### Conclusion and Future Work
In this paper, we proposed to apply chronicles to alarm correlation in intrusion detection. Chronicles benefit from a strong theoretical background. They provide a high-level declarative language that does not presume the nature of the underlying input events. An operational and stable implementation of the recognition system exists. Chronicles are indeed being successfully used in many distinct areas to monitor dynamic systems where time information is relevant.

We have illustrated how chronicles might solve some of the current intrusion detection issues, such as alarm overload, false positives, and poor alarm semantics. The proposed chronicles currently only use alarms as domain attributes. We plan to integrate the chronicle recognition system with an alarm correlation infrastructure, M2D2, to extend domain attributes to other relevant concepts, like topology, which is increasingly dynamic.

**Future Work:**
- **Chronicle Learning Tool:** Chronicle models are currently written by domain experts. A chronicle learning tool called Face is currently being developed by Dousson to discover frequent chronicles. In intrusion detection, many alarm groups are caused by recurrent phenomena, especially worms. We plan to apply the chronicle learning tool to discover such phenomena.

### Acknowledgments
We are very grateful to Christophe Dousson for his help in using the Chronicle Recognition System. We would also like to thank Ludovic Mé and Mireille Ducassé for their comments.

### References
1. B. Morin, L. Mé, H. Debar, and M. Ducassé, “M2D2: a formal data model for intrusion alarm correlation,” Proceedings of the 5th Recent Advances in Intrusion Detection 2002 (RAID2002), 2002.
2. S.T. Eckmann, G. Vigna, R.A. Kemmerer, “STATL: An Attack Language for State-based Intrusion Detection,” Dept. of Computer Science, University of California, Santa Barbara, 2000.
3. M. Roger, J. Goubault-Larrecq, “Log Auditing Through Model-Checking,” Proceedings of the 14th IEEE Computer Security Foundations Workshop (CSFW01), 2001.
4. U. Lindqvist, P.A. Porras, “Detecting Computer and Network Misuse Through the Production-Based Expert System Toolset (P-BEST),” Proceedings of the IEEE Symposium on Security and Privacy, 1999.
5. D.V. McDermott, “A Temporal Logic for Reasoning about Processes and Plans,” Cognitive Science, pp.101–155, 1982.
6. F. Bacchus, J. Tenenberg, J.A. Koomen, “A non-reified Temporal Logic,” Artificial Intelligence, pp.87–108, 1991.
7. J. Allen, “Towards a General Theory of Action and Time,” Artificial Intelligence, pp.123–154, 1984.
8. H. Debar, A. Wespi, “Aggregation and Correlation of Intrusion Detection Alerts,” Proceedings of the 4th Recent Advances in Intrusion Detection (RAID2001), October 2000.
9. S. Manganaris, M. Christensen, D. Zerkle, K. Hermiz, “A Data Mining Analysis of RTID Alarms,” Computer Networks: The International Journal of Computer and Telecommunications Networking, Volume 34, Issue 34, October 2000.
10. C. Dousson, P. Gaborit, and M. Ghallab, “Situation Recognition: Representation and Algorithms,” in proceedings of the 13th IJCAI, pp.166–172, August 1993.
11. C. Dousson, “Suivi d’évolutions et reconnaissance de chroniques,” PhD Thesis, http://dli.rd.francetelecom.fr/abc/diagnostic/, 1994.
12. C. Dousson, “Alarm Driven Supervision for Telecommunication Networks: Online Chronicle Recognition,” Annales des Télécommunications, pp.501–508, 1996.
13. C. Dousson, “Extending and Unifying Chronicles Representation with Event Counters,” in proceedings of the 15th European Conference on Artificial Intelligence (ECAI 2002), August 2002.
14. M. O. Cordier, C. Dousson, “Alarm Driven Monitoring Based on Chronicles,” in proceedings of the 4th Symposium on Fault Detection Supervision and Safety for Technical Processes (SafeProcess 2000), pp. 286–291, June 2000.
15. H. Debar, M.Y. Huang, D.J. Donahoo, “Intrusion Detection Exchange Format Data Model,” IETF Draft, 2002.
16. Y. Shoham, “Temporal Logics in AI: Semantical and Ontological Considerations,” Journal of Artificial Intelligence, pp.89–104, 1987.
17. R. Dechter, I. Meiri, J. Pearl, “Temporal Constraint Networks,” Artificial Intelligence, pp.61–95, 1991.
18. G. Jakobson and M. D. Weissman, “Alarm correlation,” IEEE Network Magazine, pp. 52–60, 1993.
19. K. Julisch, “Mining Alarm Clusters to Improve Alarm Handling Efficiency,” Proceedings of the 17th ACSAC, December 2001.
20. S. Manganaris, et al, “A Data Mining Analysis of RTID Alarms,” First International Workshop on the Recent Advances in Intrusion Detection (RAID98), September 1998.
21. J.P. Pouzol, M. Ducassé, “From Declarative Signatures to Misuse IDS,” Proceedings of the 4th Recent Advances in Intrusion Detection (RAID), 2001.
22. J.P. Pouzol, M. Ducassé, “Formal Specification of Intrusion Signatures and Detection Rules,” Proceedings of the 15th IEEE Computer Security Foundations Workshop (CSFW), 2002.
23. F. Cuppens, “Managing Alerts in Multi-Intrusion Detection Environment,” Proceedings of the 17th Annual Computer Security Applications Conference (ACSAC 01), 2001.
24. F. Cuppens, A. Miege, “Alert Correlation in a Cooperative Intrusion Detection Framework,” Proceedings of the IEEE Symposium on Security and Privacy, 2002.