### Vulnerability Disclosure and Remediation Methods

**Vulnerability Disclosure:**
The vulnerability was disclosed to Samsung. The company has since patched the issue in newly manufactured chipsets from April 2020, ensuring that all future chipsets will not be vulnerable. However, custom firmware can still be used to exploit older devices.

**Bypassing Signature Checks – Remediation Methods:**

**Method 1:**
- **Patch the bootloader from the main firmware to remove the buffer overflow.**
- **Risks:** This method could potentially brick the chip, as the core bootloader would be overwritten.

**Method 2:**
- **Patch the Kernel to disallow large hashes and signatures.**
- **Risks:** This method can be trivially bypassed through kernel modification or direct I2C access.

### Further Research - Samsung Semiconductor NFC Chips

**Identification of NFC Chips in Phones:**
- **Device Specifications:** Not all device specifications include detailed information about NFC chipsets.
- **Firmware Filenames:** A more accurate method is to identify the firmware filenames in Android images, which can be downloaded directly from online archives.
- **Directory Location:** The /vendor directory typically contains these firmware files, though it may occasionally be a separate partition.

**S3NRN82 Chipset:**
- **Selection:** S3NRN82 was chosen as the next target, being the latest available chipset with multiple firmware revisions.
- **Device:** Found in the Samsung Galaxy S9.
- **Rooting Process:** The S9 was purchased and rooted using OEM unlocking and a custom ROM.

**S3NRN82 Firmware Analysis:**
- **Format:** Same format as S3FWRN5.
- **Initial Stack Pointer:** Larger, indicating more RAM.
- **Reset Vector:** Lower, suggesting a smaller bootloader.
- **Firmware Size:** 32kB larger than previous versions.

### Replicating the Vulnerability

**Command Changes:**
- **Commands 3 and 6 removed.**
- **New Command (7):** Identified to reboot the chip.
- **Bootloader Size:** Indicated modifications.
- **Memory Readout:** Lack of memory readout forced blind exploitation.
- **Signature Checks:** SHA-1 checks were found to fail.

**I2C Communication:**
- **Logcat:** No longer provided I2C communication.
- **/proc/nfclog File:** Contained command sizes in sequence, allowing deduction of the change from SHA-1 to SHA-256.
- **Verification:** Confirmed by modifying the firmware update tool.

**Exploiting the Vulnerability:**
- **Stack Overwrite:** The entire stack could be overwritten with pointers into code memory.
- **Buffer Overflow:** Filled the stack with an initial value (0x0001) via buffer overflow.
- **NCI Initialization:** Sent NCI initialization commands to the chip.
- **Exploit Verification:** If an NCI response was received, the exploit worked; otherwise, the device was reset, and the initial value incremented.
- **Signature Bypass:** Succeeded at address 0x0165.

### Patching Existing Firmware

**Custom Firmware Development:**
- **Objective:** Dump the S3NRN82 bootloader.
- **Access Method:** I2C for data access and debugging.
- **Unreferenced Memory:** Used to store new code.
- **Machine Code Compilation:** Compiled C functions as raw binaries using `gcc -c`.
- **Function Relocation:** Not performed, and no standard C libraries included.
- **Branch and Link Instructions:** Directly patched to implement different functionality.
- **Build Application:** Developed for linking and relocation, directly patching the firmware.

**Vendor-Specific NCI Command:**
- **Command (2F 24):** Selected for modification.
- **Response Search:** Found by searching for "MOVS.*#0x24".
- **Function Override:** `sub_11A76` overridden to a new "getArbitraryMemory" function.
- **Firmware Writing:** Took approximately 20 seconds and could be expanded as needed.
- **Parameter Handling:** Crafted NCI request generated: 2F 24 04 FA CE FA CE. Parameters searched through RAM, and address set in response payload.

### Custom Firmware – Tag Emulation

**Supported Protocols:**
- **ISO14443a, ISO14443b, and more.**
- **Hardware Registers:** Allowed for arbitrary communication.
- **Goal:** Emulate a Mifare Classic tag on the S9.
- **Debugging Tool:** Proxmark.

**Initialization and Reversing:**
- **NCI Commands:** Dumped from the phone and replayed, removing unnecessary commands.
- **RF Discover Command:** Modified to act only as an ISO14443a tag.
- **Reversing Requirements:** In-depth knowledge of functions and hardware, with manual inference due to lack of strings.
- **IDA Search:** Looked for "CMP.*#0x93" to find the ISO14443A SELECT command.
- **Verification:** Placed the phone on a reader to verify and dumped the entire hardware configuration via I2C.
- **Passive Sniffing:** Access to registers allowed for passive sniffing.

**Enumeration:**
- **ATQA, SAK, UID:** Defined by NCI, with UID randomised on phones.
- **RAM Dump:** Identified SAK and ATQA values and compared with IDA.
- **Function Override:** Overrode the function referencing hardware registers, adding custom SAK, ATQA, and UID values.
- **Proxmark Confirmation:** Verified the patch.

**Full Communication:**
- **Commands (0x50, 0xE0):** Responded to HALT and RATS commands.
- **State Machine Functions:** Traced and analyzed to find the response function.
- **Basic Read Command:** Implemented to return unencrypted memory blocks.
- **Switch Statement:** Used to respond to Mifare commands, including non-standard debugging commands.
- **Mifare Classic Emulation:** Implemented Crypto-1 authentication and access mechanisms, working with a Proxmark but not a legitimate reader.

**Restrictions and Parity Bit:**
- **Parity Bit:** Mifare Classic encrypted communication overrides the parity bit.
- **Register Setting:** Found at address 0x40020004, setting bit 0x4000 to modify parity.
- **Persistent Modification:** Hooked writes to tags to send I2C messages, allowing persistent modification.

### Conclusion

- **Patched Vulnerabilities:** All outlined vulnerabilities were patched by Samsung as of April 2020.
- **Exploit Requirements:** Root access was required to fully compromise the chip.
- **Phone Security:** Phones are exploitable embedded devices and should be treated as such.
- **Bootloader Vulnerabilities:** More common than expected, especially in phones.
- **Custom Firmware Development:** Challenging but rewarding, with potential for expansion and offline cracking attacks.
- **Undisclosed Vulnerabilities:** If found in old chips, they are likely present in newer ones as well.