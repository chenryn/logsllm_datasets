### Optimized Text

**Introduction to Extension Enumeration and Fingerprinting:**
Sjösten et al. demonstrated that approximately 28% of all Chrome extensions and about 6.7% of non-WebExtension Firefox extensions can be enumerated from a web page, even if they are not active on the attacker's page. Gulyás et al. [33] combined known fingerprinting techniques with the Chrome extension enumeration attack presented by Sjösten et al. [55], along with a login-leak technique that determines the web pages a user is logged into [40]. Their findings indicate that 54.86% of users with at least one detectable extension and 19.53% of users with at least one detectable active login are unique. When both conditions are met, the uniqueness increases to 89.23%, suggesting that browser extensions can serve as a strong fingerprint, underscoring the need for mechanisms to prevent extension fingerprinting.

**Timing and Revelation Attacks:**
Sánchez-Rola et al. [53] introduced a timing attack against Chrome and Firefox, leveraging the fact that the internal branching time for Web Accessible Resources (WARs) differs between installed and non-installed extensions, allowing for the detection of 100% of all extensions. A temporary solution has been implemented in Chrome [20], with plans to adopt a randomization scheme similar to Firefox’s, pending a "breaking change" [8]. In the same study, Sánchez-Rola et al. also presented a revelation attack against Safari, which was the first browser to use randomized UUIDs. Based on a static analysis of 718 extensions, they estimated that more than 40% of the extensions could leak the random UUID. They manually analyzed 68 security extensions, identifying one false negative and confirming that 20 out of 29 flagged as suspicious indeed leaked the random UUID. In contrast, our research investigates all Chrome and Firefox extensions to determine which ones leak their UUIDs on actual web pages.

**Privacy Leaks and Taint Analysis:**
Chen and Kapravelos [17] developed a taint analysis framework to study the privacy practices of browser extensions. By analyzing sources such as DOM API calls (e.g., `document.location`) and extension API calls (e.g., `chrome.history`), they found that 2.13% of Chrome and Opera extensions potentially leak privacy-sensitive information to sinks like `XMLHttpRequest` and `chrome.storage`. However, their study did not consider extension UUIDs as part of the privacy-sensitive information.

**Potential for Further Exploitation:**
It is important to note that an attacker might use any of the attacks described in this paper to detect browser extensions and subsequently perform more harmful attacks. For example, Büyükkağhan et al. [14] exploited the lack of isolation in the previous version of the Firefox add-ons architecture, allowing legitimate extensions using Cross Platform Component Object Model (XPCOM) to access system resources such as the file system and network. A prerequisite for this attack is a mechanism to disclose installed extensions in the victim’s browser. Thus, the attacks described in our work may serve as a stepping stone to escalate the attacker’s privileges in the browser.

**Empirical Study and Countermeasures:**
We conducted an empirical study to assess the feasibility of revelation attacks. Our experiments show that combining revelation and probing attacks, it is possible to uniquely identify 90% of all extensions injecting content, despite the randomization scheme. Additionally, we performed a large-scale study on the Alexa top 10,000 domains to evaluate the pervasiveness of probing attacks, providing new evidence beyond what was previously reported.

As a countermeasure, we designed a mechanism to control which extensions are enabled on which pages. This mechanism supports two types of whitelists: one specifying which web pages are allowed to probe for which extensions, and another specifying which extensions are allowed to inject content on which web pages. We have developed a proof-of-concept prototype that blocks both probing and revelation attacks unless explicitly allowed in the whitelists.

**Future Work and Next Steps:**
For future work, it would be interesting to compare XHOUND [56] and Hulk [35] to evaluate different extensions that provide arbitrary DOM modifications, those deemed malicious, and those that inject WAR URLs. Unfortunately, these tools are currently unavailable.

We have reported the details of our study and our suggestions for mitigation to both Firefox and Chrome developers. The issue with randomized UUIDs has been confirmed by Firefox developers [1], who agree that attacks like the revelation attack defeat anti-fingerprinting measures. While the problem is clear, the discussion on countermeasures is ongoing.

Google has recently announced that Chrome will allow users to restrict extensions from accessing websites via a whitelisting mechanism [7]. Users will be able to restrict the host permissions for an extension, paving the way for an in-browser mechanism to control the extension whitelist.

**Acknowledgments:**
This work was partly funded by the Swedish Foundation for Strategic Research (SSF) under the WebSec project and the Swedish Research Council (VR) under the PrinSec and PolUser projects.

**References:**
[1] https://bugzilla.mozilla.org/show_bug.cgi?format=default&id=1372288, accessed July-2018.
[2] “AdBlock Plus,” https://chrome.google.com/webstore/detail/adblock-plus/cfhdojbkjhnklbpkdaibdccddilifddb, accessed Aug-2018.
[3] “Adobe: Adobe Acrobat Force-Installed Vulnerable Chrome Extension,” https://bugs.chromium.org/p/project-zero/issues/detail?id=1088, accessed May-2018.
[4] “Avast Online Security,” https://chrome.google.com/webstore/detail/avast-online-security/gomekmidlodglbbmalcneegieacbdmki, accessed May-2018.
[5] “Common Crawl,” http://commoncrawl.org/, accessed May-2018.
[6] “Ghostery – Privacy Ad Blocker,” https://chrome.google.com/webstore/detail/ghostery---privacy-ad-blo/mlomiejdfkolichcﬂejclcbmpeaniij, accessed Aug-2018.
[7] “Trustworthy Chrome Extensions by Default,” https://security.googleblog.com/2018/10/trustworthy-chrome-extensions-by-default.html, accessed Nov-2018.
[8] “WebAccessibleResources take too long to make a decision about loading if the extension is installed,” https://bugs.chromium.org/p/chromium/issues/detail?id=611420#c19, accessed Feb-2018.
[9] G. Acar, M. Juarez, N. Nikiforakis, C. Diaz, S. Gürses, F. Piessens, and B. Preneel, “FPDetective: Dusting the Web for Fingerprinters,” in CCS, 2013, pp. 1129–1140.
[10] “AdBlock,” https://chrome.google.com/webstore/detail/adblock/gighmmpiobklfepjocnamgkkbiglidom, accessed Aug-2018.
[11] P. Baumann, S. Katzenbeisser, M. Stopczynski, and E. Tews, “Disguised Chromium Browser: Robust Browser, Flash and Canvas Fingerprinting Protection,” in WPES, 2016, pp. 37–46.
[12] K. Boda, A. M. Földes, G. G. Gulyás, and S. Imre, “User Tracking on the Web via Cross-browser Fingerprinting,” in NordSec, 2012, pp. 31–46.
[13] M. Brinkmann, “Firefox WebExtensions may be used to identify you on the Internet,” https://www.ghacks.net/2017/08/30/ﬁrefox-webextensions-may-identify-you-on-the-internet/, 2017.
[14] A. S. Büyükkağhan, K. Onarlıoğlu, W. K. Robertson, and E. Kirda, “CrossFire: An Analysis of Firefox Extension-Reuse Vulnerabilities,” in NDSS, 2016.
[15] Y. Cao, S. Li, and E. Wijmans, “(Cross-)Browser Fingerprinting via OS and Hardware Level Features,” in NDSS, 2017.
[16] S. Cassidy, “LostPass,” https://www.seancassidy.me/lostpass.html, 2018.
[17] Q. Chen and A. Kapravelos, “Mystique: Uncovering Information Leakage from Browser Extensions,” in CCS 2018, 2018, pp. 1687–1700.
[18] Chrome, “Match Patterns,” https://developer.chrome.com/extensions/match_patterns, accessed Apr-2018.
[19] ——, “Webstore Hosting and Updating,” https://developer.chrome.com/extensions/hosting, accessed Apr-2018.
[20] Chromium Code Reviews, “Issue 2958343002: [Extensions] Change renderer-side web accessible resource determination (Closed),” https://codereview.chromium.org/2958343002, accessed Feb-2018.
[21] A. Cortesi, M. Hils, T. Kriechbaumer, and contributors, “mitmproxy: A free and open source interactive HTTPS proxy,” https://mitmproxy.org/, 2010–, [Version 3.0], accessed May-2018.
[22] U. Fiore, A. Castiglione, A. De Santis, and F. Palmieri, “Countering Browser Fingerprinting Techniques: Constructing a Fake Profile with Google Chrome,” in NBiS, 2014, pp. 355–360.
[23] Google, “Browse in private,” https://support.google.com/chrome/answer/95464, accessed May-2018.
[24] ——, “Chrome Web Store,” https://chrome.google.com/webstore/category/extensions?feature=free, accessed Feb-2018.
[25] ——, “chrome.runtime,” https://developer.chrome.com/extensions/runtime#method-getURL, accessed Feb-2018.
[26] ——, “Content Scripts,” https://developer.chrome.com/extensions/content_scripts, accessed Feb-2018.
[27] ——, “Developer Program Policies,” https://developer.chrome.com/webstore/program_policies, accessed May-2018.
[28] ——, “Google Safe Browsing,” https://safebrowsing.google.com/, accessed July-2018.
[29] ——, “Manifest - Web Accessible Resources,” https://developer.chrome.com/extensions/manifest/web_accessible_resources, accessed Apr-2018.
[30] ——, “Manifest File Format,” https://developer.chrome.com/extensions/manifest, accessed Feb-2018.
[31] ——, “New Cast functionality in Chrome,” https://support.google.com/chromecast/answer/6398952, accessed Apr-2018.
[32] G. G. Gulyás, D. F. Somé, N. Bielova, and C. Castelluccia, “Browser Extension and Login-Leak Experiment,” https://extensions.inrialpes.fr/, accessed Apr-2018.
[33] ——, “To Extend or not to Extend: On the Uniqueness of Browser Extensions and Web Logins,” in WPES@CCS, 2018, pp. 14–27.
[34] A. Gómez-Boix, P. Laperdrix, and B. Baudry, “Hiding in the Crowd: an Analysis of the Effectiveness of Browser Fingerprinting at Large Scale,” in WWW, 2018.
[35] A. Kapravelos, C. Grier, N. Chachra, C. Kruegel, G. Vigna, and V. Paxson, “Hulk: Eliciting Malicious Behavior in Browser Extensions,” in USENIX Sec., 2014, pp. 641–654.
[36] J. Kettle, “Sparse Bruteforce Addon Detection,” http://www.skeletonscribe.net/2011/07/sparse-bruteforce-addon-scanner.html, 2011.
[37] K. Kotowicz, “Intro to Chrome addons hacking: fingerprinting,” http://blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html, 2012.
[38] P. Laperdrix, W. Rudametkin, and B. Baudry, “Beauty and the Beast: Diverting Modern Web Browsers to Build Unique Browser Fingerprints,” in S&P, 2016, pp. 878–894.
[39] LastPass, “LastPass: Free Password Manager,” https://chrome.google.com/webstore/detail/lastpass-free-password-ma/hdokiejnpimakedhajhdlcegeplioahd, accessed May-2018.
[40] R. Linus, “Your Social Media Fingerprint,” https://robinlinus.github.io/socialmedia-leak/, 2016.
[41] L. Liu, X. Zhang, V. Inc, G. Yan, and S. Chen, “Chrome extensions: Threat analysis and countermeasures,” in NDSS, 2012.
[42] Microsoft, “Internet Explorer Browser Extensions,” https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa753587(v%3dvs.85), 2018.
[43] Mozilla, “Add-on Policies,” https://developer.mozilla.org/en-US/Add-ons/AMO/Policy/Reviews, accessed May-2018.
[44] ——, “content scripts,” https://developer.mozilla.org/en-US/Add-ons/WebExtensions/manifest.json/content_scripts, accessed Feb-2018.
[45] ——, “extension.getURL(),” https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/extension/getURL, accessed Feb-2018.
[46] ——, “manifest.json,” https://developer.mozilla.org/en-US/Add-ons/WebExtensions/manifest.json, accessed Feb-2018.
[47] ——, “Most Popular Extensions,” https://addons.mozilla.org/en-US/firefox/search/?sort=updated&type=extension, accessed Feb-2018.
[48] ——, “Private Browsing - Use Firefox without saving history,” https://support.mozilla.org/en-US/kb/private-browsing-use-firefox-without-history, accessed May-2018.
[49] ——, “Profiles - Where Firefox stores your bookmarks, passwords and other user data,” https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data/, accessed Mar-2018.
[50] ——, “web accessible resources,” https://developer.mozilla.org/en-US/Add-ons/WebExtensions/manifest.json/web_accessible_resources, accessed Feb-2018.
[51] Mozilla Add-ons Blog, “WebExtensions in Firefox 57,” https://blog.mozilla.org/addons/2017/09/28/webextensions-in-firefox-57/, accessed Feb-2018.
[52] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna, “Cookieless monster: Exploring the ecosystem of web-based device fingerprinting,” in S&P, 2013, pp. 541–555.
[53] I. Sánchez-Rola, I. Santos, and D. Balzarotti, “Extension Breakdown: Security Analysis of Browsers Extension Resources Control Policies,” in USENIX Security Symposium, 2017, pp. 679–694.
[54] A. Sjösten, S. Van Acker, and A. Sabelfeld, “Non-behavioral extension detector,” http://blueberry-cobbler-11673.herokuapp.com, accessed May-2018.
[55] ——, “Discovering Browser Extensions via Web Accessible Resources,” in CODASPY. ACM, 2017, pp. 329–336.
[56] O. Starov and N. Nikiforakis, “XHOUND: Quantifying the Fingerprintability of Browser Extensions,” in S&P, May 2017, pp. 941–956.
[57] StatCounter, “Desktop Browser Market Share Worldwide,” http://gs.statcounter.com/browser-market-share/desktop/worldwide, accessed May-2018.
[58] W3C, “CSP2,” https://www.w3.org/TR/CSP2/, accessed Nov-2018.
[59] ——, “User Timing,” https://www.w3.org/TR/user-timing, accessed May-2018.