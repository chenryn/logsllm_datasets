### 7. Discussion

#### 7.1 Limitations and Future Work

Our proof-of-concept implementation currently does not handle signals and syscalls invoked in a signal handler. However, this is not a conceptual limitation. The compiler can identify all functions that serve as signal handlers and the functions that are reachable through them. This allows for the extraction of a per-signal state machine, which the kernel can switch to when setting up the signal stack frame. This approach would further enhance security by enabling smaller, more specific per-signal state machines. Given the significant engineering effort required, we leave the implementation and evaluation of this feature for future work.

Our current state-machine construction results in coarse-grained state machines. This can be improved by leveraging the fact that we can statically identify syscall origins. Future work could intertwine this information more deeply with the generated state machine. By doing so, transitions between states would depend not only on the previous and current syscall numbers but also on the virtual addresses of the corresponding instructions. This would allow for a more accurate representation of the syscall-flow graph without relying on context-sensitivity or call stack information. As this requires substantial changes to the compiler and kernel, along with thorough evaluation, we defer this to future work.

Recent research has proposed hardware support for seccomp [60]. In future work, we intend to investigate whether similar approaches can improve the performance of SFIP.

#### 7.2 Related Work

In 2001, Wagner and Dean [65] introduced automatically-generated syscall NDFAs, NDPDAs, and digraphs for sequence checks in intrusion detection systems. SFIP builds upon digraphs but modifies their construction and representation to increase performance. We extend their work by verifying the origin of a syscall, which enhances both accuracy and performance, allowing real-time enforcement in large-scale applications.

Several papers have focused on extracting and modeling an application's control flow based on the work by Forrest et al. [19]. Many of these approaches rely on dynamic analysis [21, 25, 32, 34, 44, 68, 47, 63, 69], while others use machine-learning techniques to learn syscall sequences or detect intrusions [74, 53, 48, 8, 67, 26]. Giffin et al. [27] proposed incorporating environment information in static analysis to generate more precise models. The Dyck model [28] is a prominent approach for learning syscall sequences that rely on stack information and context-sensitive models. Other works focus on detecting intrusions based on syscall arguments [42, 50].

Forrest et al. [20] provide an analysis of the evolution of system-call monitoring. Our work differs from these as we do not require stack information, context-sensitive models, dynamic tracing of an application, or code instrumentation. The only additional information we consider is the mapping of syscalls to syscall instructions.

Recent work has explored the possibility of automatically generating seccomp filters from source code or existing binaries [16, 10, 24, 23, 52]. SysFlow can be extended to generate the required information from binaries as well. More recent work has proposed a faster alternative to seccomp while also enabling complex argument checks [9]. In contrast, our work considers syscall sequences and origins, which present additional challenges (cf. Section 3.3).

A similar approach to our syscall-origin enforcement has been proposed by Linn et al. [45] and de Raadt [15]. Linn et al. extract syscall locations and numbers from a binary and enforce them at the kernel level but fail in the presence of ASLR. De Raadt restricts the execution of syscalls to entire regions rather than precise locations, meaning the entire text segment of a static binary is a valid origin. Our work improves upon these approaches by (1) enforcing syscall origins in the presence of ASLR, (2) limiting the execution of specific syscalls to precise locations, and (3) combining syscall origins with state machines, significantly enhancing security.

### 8. Conclusion

In this paper, we introduced the concept of syscall-flow-integrity protection (SFIP), complementing the concept of CFI with integrity for user-kernel transitions. Our evaluation demonstrated that SFIP can be applied to large-scale applications with minimal slowdowns, showing overheads of only 13.1% and 7.4% in micro- and macrobenchmarks, respectively. In terms of security, we discussed and demonstrated its effectiveness in preventing control-flow-hijacking attacks in real-world applications. To highlight the reduction in attack surface, we analyzed the state machines and syscall-origin mappings of several real-world applications. On average, SFIP decreases the number of possible transitions by 41.5% compared to seccomp and 91.3% when no protection is applied.

### References

[1] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. Control-Flow Integrity. In CCS, 2005.
[2] Lars Ole Andersen. Program Analysis and Specialization for the C Programming Language. PhD thesis, 1994.
[3] Android. Application Sandbox, 2021.
[4] AppArmor. AppArmor: Linux kernel security module, 2021.
[5] Tyler K. Bletsch, Xuxian Jiang, Vincent W. Freeh, and Zhenkai Liang. Jump-oriented programming: a new class of code-reuse attack. In AsiaCCS, 2011.
[6] Davidlohr Bueso. tools/perf-bench: Add basic syscall benchmark, 2019.
[7] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen, Michael Franz, Stefan Brunthaler, and Mathias Payer. Control-Flow Integrity: Precision, Security, and Performance. ACM Computing Surveys, 2017.
[8] Jeffrey Byrnes, Thomas Hoang, Nihal Nitin Mehta, and Yuan Cheng. A Modern Implementation of System Call Sequence Based Host-based Intrusion Detection Systems. In TPS-ISA, 2020.
[9] Claudio Canella, Andreas Kogler, Lukas Giner, Daniel Gruss, and Michael Schwarz. Domain Page-Table Isolation. arXiv:2111.10876, 2021.
[10] Claudio Canella, Mario Werner, Daniel Gruss, and Michael Schwarz. Automating Seccomp Filter Generation for Linux Applications. In CCSW, 2021.
[11] Stephen Checkoway, Lucas Davi, Alexandra Dmitrienko, Ahmad-Reza Sadeghi, Hovav Shacham, and Marcel Winandy. Return-oriented programming without returns. In CCS, 2010.
[12] Jonathan Corbet. Constant-action bitmaps for seccomp(), 2020.
[13] Crispan Cowan, Calton Pu, Dave Maier, Jonathan Walpole, Peat Bakke, Steve Beattie, Aaron Grier, Perry Wagle, Qian Zhang, and Heather Hinton. Stackguard: Automatic adaptive detection and prevention of buffer-overflow attacks. In USENIX Security, 1998.
[14] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection. In USENIX Security Symposium, August 2014.
[15] Theo de Raadt. syscall call-from verification, 2019.
[16] Nicholas DeMarinis, Kent Williams-King, Di Jin, Rodrigo Fonseca, and Vasileios P. Kemerlis. sysfilter: Automated System Call Filtering for Commodity Software. In RAID, 2020.
[17] Jake Edge. System call filtering and no_new_privs, 2012.
[18] Jake Edge. A seccomp overview, 2015.
[19] S. Forrest, S.A. Hofmeyr, A. Somayaji, and T.A. Longstaff. A sense of self for Unix processes. In S&P, 1996.
[20] Stephanie Forrest, Steven Hofmeyr, and Anil Somayaji. The Evolution of System-Call Monitoring. In ACSAC, 2008.
[21] Thomas D. Garvey and Teresa F. Lunt. Model-based intrusion detection. In NCSC, 1991.
[22] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. Fine-Grained Control-Flow Integrity for Kernel Software. In Euro S&P, 2016.
[23] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and Michalis Polychronakis. Confine: Automated System Call Policy Generation for Container Attack Surface Reduction. In RAID, 2020.
[24] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and Michalis Polychronakis. Temporal System Call Specialization for Attack Surface Reduction. In USENIX Security Symposium, 2020.
[25] Anup Ghosh, Aaron Schwartzbard, and Michael Schatz. Learning Program Behavior Profiles for Intrusion Detection. In ID, 1999.
[26] Anup K. Ghosh and Aaron Schwartzbard. A Study in Using Neural Networks for Anomaly and Misuse Detection. In USENIX Security Symposium, 1999.
[27] Jonathon Giffin, David Dagon, Somesh Jha, Wenke Lee, and Barton Miller. Environment-Sensitive Intrusion Detection. In RAID, 2005.
[28] Jonathon T Giffin, Somesh Jha, and Barton P Miller. Efficient Context-Sensitive Intrusion Detection. In NDSS, 2004.
[29] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. Out of control: Overcoming control-flow integrity. In S&P, 2014.
[30] Google. Seccomp filter in Android O, 2017.
[31] Michael Hind. Pointer analysis: Haven’t we solved this problem yet? In PASTE, 2001.
[32] Steven A. Hofmeyr, Stephanie Forrest, and Anil Somayaji. Intrusion Detection Using Sequences of System Calls. J. Comput. Secur., 1998.
[33] Tom Hromatka. seccomp and libseccomp performance improvements, 2018.
[34] K. Ilgun, R.A. Kemmerer, and P.A. Porras. State transition analysis: a rule-based intrusion detection approach. TSE, 1995.
[35] Kyriakos K. Ispoglou, Bader AlBassam, Trent Jaeger, and Mathias Payer. Block Oriented Programming: Automating Data-Only Attacks. In CCS, 2018.
[36] Vasileios Kemerlis. Protecting Commodity Operating Systems through Strong Kernel Isolation. PhD thesis, Columbia University, 2015.
[37] Vasileios P Kemerlis, Michalis Polychronakis, and Angelos D Keromytis. ret2dir: Rethinking kernel isolation. In USENIX Security Symposium, 2014.
[38] Vasileios P. Kemerlis, Georgios Portokalidis, and Angelos D. Keromytis. kguard: Lightweight kernel protection against return-to-user attacks. In USENIX Security Symposium, 2012.
[39] Richard A Kemmerer and Giovanni Vigna. Intrusion detection: a brief history and overview. Computer, 2002.
[40] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu. Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors. In ISCA, 2014.
[41] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom. Spectre Attacks: Exploiting Speculative Execution. In S&P, 2019.
[42] Christopher Kruegel, Darren Mutz, Fredrik Valeur, and Giovanni Vigna. On the Detection of Anomalous System Call Arguments. In ESORICS, 2003.
[43] Bingchen Lan, Yan Li, Hao Sun, Chao Su, Yao Liu, and Qingkai Zeng. Loop-oriented programming: a new code reuse attack to bypass modern defenses. In IEEE Trustcom/BigDataSE/ISPA, 2015.
[44] Terran Lane and Carla E. Brodley. Temporal Sequence Learning and Data Reduction for Anomaly Detection. TOPS, 1999.
[45] C. M. Linn, M. Rajagopalan, S. Baker, C. Collberg, S. K. Debray, and J. H. Hartman. Protecting Against Unexpected System Calls. In USENIX Security Symposium, 2005.
[46] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, and Mike Hamburg. Meltdown: Reading Kernel Memory from User Space. In USENIX Security Symposium, 2018.
[47] Teresa F. Lunt. Automated Audit Trail Analysis and Intrusion Detection: A Survey. In NCSC, 1988.
[48] Shaohua Lv, Jian Wang, Yinqi Yang, and Jiqiang Liu. Intrusion Prediction With System-Call Sequence-to-Sequence Model. IEEE Access, 2018.
[49] Microsoft. Data Execution Prevention, 2021.
[50] Darren Mutz, Fredrik Valeur, Giovanni Vigna, and Christopher Kruegel. Anomalous System Call Detection. TOPS, 2006.
[51] Nergal. The advanced return-into-lib(c) explits: PaX case study, 2001.
[52] Shankara Pailoor, Xinyu Wang, Hovav Shacham, and Isil Dillig. Automated Policy Synthesis for System Call Sandboxing. PACMPL, 2020.
[53] Y. Qiao, X.W. Xin, Y. Bin, and S. Ge. Anomaly intrusion detection method based on HMM. Electronics Letters, 2002.
[54] Charles Reis, Alexander Moshchuk, and Nasko Oskov. Site Isolation: Process Separation for Web Sites within the Browser. In USENIX Security Symposium, 2019.
[55] Roman Rogowski, Micah Morton, Forrest Li, Fabian Monrose, Kevin Z. Snow, and Michalis Polychronakis. Revisiting Browser Security in the Modern Era: New Data-Only Attacks and Defenses. In EuroS&P, 2017.
[56] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. Counterfeit Object-oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In S&P, 2015.
[57] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss. ZombieLoad: Cross-Privilege-Boundary Data Sampling. In CCS, 2019.
[58] R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni. A fast automaton-based method for detecting anomalous program behaviors. In S&P, 2001.
[59] Hovav Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In CCS, 2007.
[60] Dimitrios Skarlatos, Qingrong Chen, Jianyan Chen, Tianyin Xu, and Josep Torrellas. Draco: Architectural and Operating System Support for System Call Security. In MICRO, 2020.
[61] Brad Spengler. Recent ARM Security Improvements, 2013.
[62] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. SoK: Eternal War in Memory. In S&P, 2013.
[63] H.S. Teng, K. Chen, and S.C. Lu. Adaptive real-time anomaly detection using inductively generated sequential patterns. In S&P, 1990.
[64] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. RIDL: Rogue In-Flight Data Load. In S&P, 2019.
[65] D. Wagner and R. Dean. Intrusion detection via static analysis. In S&P, 2001.
[66] David Wagner and Paolo Soto. Mimicry Attacks on Host-Based Intrusion Detection Systems. In CCS, 2002.
[67] C. Warrender, S. Forrest, and B. Pearlmutter. Detecting intrusions using system calls: alternative data models. In S&P, 1999.
[68] Lee Wenke, S.J. Stolfo, and K.W. Mok. A data mining framework for building intrusion detection models. In S&P, 1999.
[69] Andreas Wespi, Marc Dacier, and Hervé Debar. Intrusion Detection Using Variable-Length Audit Trail Patterns. In RAID, 2000.
[70] Mozilla Wiki. Project Fission, 2019.
[71] Mozilla Wiki. Security/Sandbox, 2019.
[72] SELinux Wiki. FAQ — SELinux Wiki, 2009.
[73] Yuval Yarom and Katrina Falkner. Flush+Reload: a High Resolution, Low Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium, 2014.
[74] Zhang Zhengdao, Peng Zhumiao, and Zhou Zhiping. The Study of Intrusion Prediction Based on HsMM. In APSCC, 2008.