### Enhanced Object-Call Pairing for Vcalls

To improve the integrity of virtual function calls (vcalls), a method was implemented to enforce object-call pairing for each vcall in the program. This enhancement also addressed several corner cases discovered during the implementation of VTV (Virtual Table Verification). Similarly, SafeDispatch [22] extended LLVM to support a similar policy. For LLVM, VTrust [44] proposed a hash-based technique to verify the integrity of vcalls. In the context of the MSVC compiler, VT-Guard [27] introduced a defense mechanism that inserts a secret cookie into each vtable and checks its validity before each vcall. While this approach makes it more challenging for attackers to inject a valid vtable, it is still vulnerable to memory disclosure attacks that can leak the cookie value.

Recently, Bounov et al. [6] proposed an LLVM extension that reorders vtables to enable constant-time integrity checks. Generally, compiler-based solutions have the advantage of maximum visibility into the source code, allowing them to enforce stronger policies. However, these solutions require access to the source code and recompilation of all linked modules, which may not be feasible in practice. Other approaches, such as CETS [28] and Dangnull [25], aimed to eliminate dangling pointers by tracing and nullifying object pointers upon deletion. Unfortunately, sound and complete pointer tracing is NP-Hard, especially with pointer aliasing and multithreading constructs. Additionally, vtable attacks can be mounted through various means, including buffer overflows, format string vulnerabilities, and type confusion attacks. Eliminating dangling pointers complements our work and provides a strong layer of defense against memory corruption attacks.

### Binary Solutions

Several binary-level solutions have been proposed to defend against vtable attacks. T-VIP [17] used static analysis to identify and extract vtables and vcall sites. At runtime, it checked that the referenced vtable is read-only and that the vcall offset is within the vtable. RECALL [14] identified unsafe casting in MSVC binaries by matching the layouts of objects at vcall sites. Both solutions worked on an intermediate binary representation obtained by lifting x86 assembly to SSA form, but they are not error-free.

VTint [43] relocated vtables to a read-only memory section and checked before every vcall that the referenced vtable is read-only. While VTint incurred low overhead, it suffered from poor identification accuracy. For example, VTint identified only 115 vtables and 200 vcalls for 447.dealII, whereas VCI identified about seven times as many. vfGuard [30] used static analysis to reconstruct the set of all possible targets for each vcall site and instrumented the binary to check for membership. However, such policies are not precise enough to withstand COOP (Counterfeit Object-Oriented Programming) attacks [11, 34].

On a different front, solutions have been proposed to detect memory corruption and access bugs. Valgrind [29], AddressSanitizer [32], and Undangle [7] are dynamic memory monitoring systems that help detect memory access errors, including use-after-free. However, their overhead is prohibitive for practical deployment. DieHard [5] provided a probabilistic memory integrity guarantee by randomizing and expanding the heap, but it required at least double the heap size, which is not feasible in practice. More recently, VTPin [33] introduced a solution by directly managing deallocations and preventing reuse of deleted objects by repointing their vtptr to a safe vtable. This required hooking free and malloc calls, the presence of RTTI in the binary, and catching segfaults from probing unmapped memory.

### Complementary Efforts

Complementary to our work are C++ reverse engineering efforts. Smartdec [16] proposed a system to reconstruct C++ class hierarchies from RTTI, and Objdigger [23] extracted objects and member functions from compiled MSVC binaries. While decompilation is valuable for many security problems, VCI focuses specifically on recovering C++ semantics that impose restrictions on vcall targets.

### Conclusion

This paper presented VCI, a system that generates and enforces a strict Control Flow Integrity (CFI) policy against vtable attacks in COTS C++ binaries. VCI statically reconstructs various C++ semantics from the binaries without needing debug symbols or type information, making it applicable to any C++ application. VCI defeats vtable injection attacks and significantly reduces the attack surface for vtable reuse attacks. As demonstrated by our experiments, VCI significantly improves upon the state-of-the-art, defeats real-world exploits, and incurs low overhead.

### Acknowledgments

We thank the anonymous reviewers for their valuable comments. This material is based on work supported by the National Science Foundation (NSF) under grant no. SATC 1421747, and by the National Institute of Standards and Technology (NIST) under grant no. 60NANB16D285. Opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the NSF, NIST, or the US Government.

### References

[1] M. Abadi et al. Control-Flow Integrity. In Computer and Communications Security, 2005.
[2] J. Afek and A. Sharabani. Smashing the Pointer for Fun and Profit. Black Hat USA, 2007.
[3] ASLR. https://pax.grsecurity.net.
[4] G. Balakrishnan and T. Reps. WYSINWYX: What You See Is Not What You Execute. ACM Trans. on Prog. Lang. and Syst., 32(6), 2010.
[5] E. D. Berger and B. G. Zorn. DieHard: Probabilistic Memory Safety for Unsafe Languages. In Programming Language Design and Implementation, 2006.
[6] D. Bounov, R. G. Kıcı, and S. Lerner. Protecting C++ Dynamic Dispatch Through Vtable Interleaving. In Network and Distributed System Security, 2016.
[7] J. Caballero et al. Undangle: Early Detection of Dangling Pointers in Use-After-Free and Double-Free Vulnerabilities. In International Symposium on Software Testing and Analysis, 2012.
[8] N. Carlini et al. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In USENIX Security, pages 161–176, 2015.
[9] N. Carlini and D. Wagner. ROP is Still Dangerous: Breaking Modern Defenses. In USENIX Security, 2014.
[10] S. Crane et al. It’s a TRaP: Table Randomization and Protection Against Function-Reuse Attacks. In Computer and Communications Security, 2015.
[11] S. Crane et al. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In Symposium on Security & Privacy, 2015.
[12] M. Daniel, J. Honoroﬀ, and C. Miller. Engineering Heap Overflow Exploits with JavaScript. WOOT, 8, 2008.
[13] L. Davi et al. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In USENIX Security, 2014.
[14] D. Dewey and J. T. Giﬃn. Static Detection of C++ Vtable Escape Vulnerabilities in Binary Code. In Network and Distributed System Security, 2012.
[15] Dyninst API. http://www.dyninst.org/dyninst.
[16] A. Fokin et al. SmartDec: Approaching C++ Decompilation. In Working Conference on Reverse Engineering, 2011.
[17] R. Gawlik and T. Holz. Towards Automated Integrity Protection of C++ Virtual Function Tables in Binary Programs. In Annual Computer Security Applications Conference, 2014.
[18] E. Goktas et al. Out of Control: Overcoming Control-Flow Integrity. In Symposium on Security & Privacy, 2014.
[19] I. Haller et al. ShrinkWrap: Vtable Protection Without Loose Ends. In Annual Computer Security Applications Conference, 2015.
[20] L. C. Harris and B. P. Miller. Practical Analysis of Stripped Binary Code. ACM SIGARCH Computer Architecture News, 33(5):63–68, 2005.
[21] Itanium C++ ABI. http://mentorembedded.github.io/cxx-abi/abi.html.
[22] D. Jang, Z. Tatlock, and S. Lerner. SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks. In Network and Distributed System Security, 2014.
[23] W. Jin et al. Recovering C++ Objects from Binaries Using Inter-Procedural Data-Flow Analysis. In Program Protection and Reverse Engineering Workshop, 2014.
[24] W. Landi and B. G. Ryder. Pointer-Induced Aliasing: A Problem Classification. In Principles of Programming Languages, 1991.
[25] B. Lee et al. Preventing Use-After-Free with Dangling Pointers Nullification. In Network and Distributed System Security, 2015.
[26] Z. Lin, X. Zhang, and D. Xu. Automatic Reverse Engineering of Data Structures from Binary Execution. In Annual Information Security Symposium. Purdue University, 2010.
[27] M. R. Miller and K. D. Johnson. Using Virtual Table Protections to Prevent the Exploitation of Object Corruption Vulnerabilities.
[28] S. Nagarakatte et al. CETS: Compiler Enforced Temporal Safety for C. In International Symposium on Memory Management, 2010.
[29] N. Nethercote and J. Seward. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In Programming Language Design and Implementation, 2007.
[30] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Network and Distributed System Security, 2015.
[31] G. F. Roglia et al. Surgically Returning to Randomized Libc. In Annual Computer Security Applications Conference, 2009.
[32] Address Sanitizer. https://github.com/google/sanitizers.
[33] P. Sarbinowski et al. VTPin: Practical Vtable Hijacking Protection for Binaries. In Annual Conference on Computer Security Applications. ACM, 2016.
[34] F. Schuster et al. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In Symposium on Security & Privacy, 2015.
[35] J. Seibert, H. Okhravi, and E. Soderstrom. Information Leaks Without Memory Disclosures: Remote Side Channel Attacks on Diversified Code. In Computer and Communications Security, 2014.
[36] V. Srinivasan and T. Reps. Slicing Machine Code. Technical Report TR1824, UW-Madison, 2015.
[37] C. Tice et al. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security, 2014.
[38] van der Veen et al. Practical Context-Sensitive CFI. In Computer and Communications Security, pages 927–940. ACM, 2015.
[39] van der Veen et al. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In Symposium on Security & Privacy, 2016.
[40] W. R. Williams, X. Meng, B. Welton, and B. P. Miller. Dyninst and MRNet: Foundational Infrastructure for Parallel Tools. 9th Parallel Tools Workshop, 2015.
[41] P. R. Wilson. Uniprocessor Garbage Collection Techniques. In Memory Management. Springer, 1992.
[42] C. Zhang et al. Practical Control Flow Integrity and Randomization for Binary Executables. In Symposium on Security & Privacy, 2013.
[43] C. Zhang et al. VTint: Defending Virtual Function Tables’ Integrity. In Network and Distributed System Security, 2015.
[44] C. Zhang et al. VTrust: Regaining Trust on Virtual Calls. In Network and Distributed System Security, 2016.
[45] M. Zhang and R. Sekar. Control Flow Integrity for COTS Binaries. In USENIX Security, 2013.