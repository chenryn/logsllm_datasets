### 5.3. Protecting TCP from Stealth DoS Attacks

Packet reordering, whether caused by a malicious attacker or benign network conditions, negatively impacts TCP throughput. When a TCP sender receives three duplicate ACKs, it triggers a fast retransmit and resends a segment believed to be lost, resulting in wasted bandwidth and a reduction in the sending rate.

To address packet reordering, particularly the attack described in Section 5.1, two independent approaches can be pursued:
1. **Adjusting TCP to Diverse Network Conditions:** This involves making TCP more resilient to packet reordering. Various modifications have been proposed to improve TCP's robustness, such as [8, 31, 41, 42, 10, 6, 40, 11, 9]. These solutions aim to detect and ignore false duplicate ACKs. The sender halves the congestion window upon receiving a duplicate ACK but restores it when the receiver signals the receipt of the "supposedly lost" segment, leading to a minimal slowdown. However, these solutions are not widely adopted due to the need for changes in every end host and the time required for adoption.
2. **Modifying IPsec Gateways:** This approach requires modifying IPsec gateways rather than individual hosts. Many private networks connected to the Internet are protected by firewalls, which already examine packets for security reasons. Our solution is applied to the sending IPsec gateway (GW2) and consists of two phases: detection and prevention of the attack.

#### Algorithm 1: Implementation of the Fix to TCP in the Sending Gateway GW2

The gateway will inspect incoming ACK segments and delay the response to congestion, i.e., duplicate ACKs. If a new ACK is received, all duplicate ACKs are discarded. Otherwise, when the typical delay is reached, all ACK segments are forwarded to the sending host behind the gateway.

```plaintext
Algorithm 1: Implementation of the fix to TCP in the sending gateway GW2

Incoming Segment ack from Internet
if ack.SN == SN then
    // It’s a duplicate ACK
    if dupACKctr == 0 then
        delay ← set_delay();
        timer ← set_timer(delay);
        dupACKctr ← 1;
    else
        dupACKctr ← dupACKctr + 1;
else
    if ack.SN > SN then
        SN ← ack.SN;
    if dupACKctr > 0 then
        dupACKctr ← 0;
        stop_timer();
    cwnd(t-RTT) ≤ 6 * ρ * RTT^2
if timer == timeout then
    for i = dupACKctr to 2 do
        forward(ack);
    dupACKctr ← 0;
    stop_timer();
```

### Throughput Degradation Attack on TCP with Infinitely Large IPsec Anti-Replay Window

In this scenario, an attacker reorders segments, creating a gap in sequence numbers at the receiver, which responds with duplicate ACKs. Upon receiving three duplicate ACKs, the sender reduces its sending rate. Specifically, the TCP at the sender transmits a window of \( k + 1 \) segments, and the attacker speeds up the last three segments (i.e., segments with sequence numbers \( i + k - 2 \), \( i + k - 1 \), and \( i + k \)) so that they arrive before the first segment in the window (i.e., segment with sequence number \( i \)). These segments are passed by the gateway to the client, triggering three duplicate ACKs for the \( i \)-th segment at the receiver. The sender retransmits the missing segment \( i \) and reduces its transmission rate. At time \( t_0 \), the sender receives three duplicate ACKs, initiating the first attack epoch. The sender fast-retransmits the lost segment and reduces its transmission rate. The sender cannot resume transmission of further segments since the number of pending segments exceeds the congestion window size. After receiving a sufficient number of ACKs, the sender can resume transmission of new segments.

### Solution in Firewalls

Our solution involves modifying the sending IPsec gateway (GW2) and does not require changes to the receiving gateway (GW1). The main idea is to delay the response to congestion (duplicate ACKs) in the sending gateway until a maximal delay is reached. The gateway measures the delay of outgoing segments between itself and the receiving gateway (for each VPN) and uses these measurements to estimate the typical delay for outgoing packets. Additionally, the gateway stores the time and sequence number of outgoing segments, which can be maintained in an array. Upon the arrival of an ACK, the corresponding sample is released. If a duplicate ACK for a segment (e.g., segment with sequence number \( i \)) arrives, the gateway approximates the sending time based on the stored samples. If an ACK with a higher sequence number arrives before the maximal delay, all duplicate ACKs are discarded, and the new ACK is forwarded to the sending host. If no new ACK arrives, once the maximal delay is reached, all duplicate ACKs are released and forwarded to the sending host.

### Further Research Directions

1. **Secure Channel Protocol with Performance Guarantees:** Define a secure channel protocol that ensures both security and efficiency for traffic above it, or prove that no such channel exists.
2. **Weaker Attacker Analysis:** Consider a weaker attacker without a speed-up advantage, analyze performance degradation, and determine probabilities given a distribution on traffic.
3. **Simulation and Experiments:** Conduct simulations and experiments to analyze the impact of our suggested fix to TCP in IPsec gateways under both attack and benign network reordering conditions.

### References

[1] I. Aad, J. Hubaux, and E. Knightly. Denial of service resilience in ad hoc networks. In Proceedings of the 10th annual international conference on Mobile computing and networking, pages 202–215. ACM New York, NY, USA, 2004.

[2] M. Allman, V. Paxson, and W. Stevens. TCP Congestion Control. RFC 2581 (Proposed Standard), Apr. 1999. Updated by RFC 3390.

[3] M. Allman, V. Paxson, and W. Stevens. TCP Congestion Control, RFC 2581. Internet request for comments, 1999.

[4] J. Bellardo and S. Savage. Measuring packet reordering. In Proceedings of the 2nd ACM SIGCOMM Workshop on Internet measurement, pages 97–105. ACM New York, NY, USA, 2002.

[5] M. Bellare, A. Desai, D. Pointcheval, and P. Rogaway. Relations among notions of security for public-key encryption schemes. Lecture notes in computer science, pages 26–45, 1998.

[6] S. Bhandarkar and A. Reddy. TCP-DCR: Making TCP robust to non-congestion events. Lecture Notes in Computer Science, pages 712–724, 2004.

[7] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss. RFC2475: An Architecture for Differentiated Services. RFC Editor United States, 1998.

[8] E. Blanton and M. Allman. On making TCP more robust to packet reordering. ACM SIGCOMM Computer Communication Review, 32(1):20–30, 2002.

[9] E. Blanton and M. Allman. Using TCP Duplicate Selective Acknowledgement (DSACKs) and Stream Control Transmission Protocol (SCTP) Duplicate Transmission Sequence Numbers (TSNs) to Detect Spurious Retransmissions. RFC 3708 (Experimental), Feb. 2004.

[10] S. Bohacek, J. Hespanha, J. Lee, C. Lim, and K. Obraczka. TCP-PR: TCP for persistent packet reordering. In Distributed Computing Systems, 2003. Proceedings. 23rd International Conference on, pages 222–231, 2003.

[11] S. Bohacek, J. Hespanha, J. Lee, C. Lim, and K. Obraczka. A New TCP for Persistent Packet Reordering. IEEE/ACM TRANSACTIONS ON NETWORKING, 14(2):369, 2006.

[12] R. Canetti and H. Krawczyk. Universally Composable Notions of Key Exchange and Secure Channels. In Proceedings of the International Conference on the Theory and Applications of Cryptographic Techniques: Advances in Cryptology, pages 337–351. Springer-Verlag London, UK, 2002.

[13] R. Chang. Defending against flooding-based distributed denial-of-service attacks: A tutorial. IEEE Communications Magazine, 40(10):42–51, 2002.

[14] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), Aug. 2008.

[15] G. Dommety. Key and Sequence Number Extensions to GRE. RFC 2890 (Proposed Standard), Sept. 2000.

[16] Y. Gilad and A. Herzberg. Lightweight opportunistic tunneling (LOT). In ESORICS, pages 104–119, 2009.

[17] M. Gouda, C. Huang, and E. Li. Anti-replay window protocols for secure IP. In Computer Communications and Networks, 2000. Proceedings. Ninth International Conference on, pages 310–315, 2000.

[18] M. Guirguis, A. Bestavros, and I. Matta. Exploiting the transients of adaptation for RoQ attacks on Internet resources. In Network Protocols, 2004. ICNP 2004. Proceedings of the 12th IEEE International Conference on, pages 184–195, 2004.

[37] C. Schuba, I. Krsul, M. Kuhn, E. Spafford, A. Sundaram, and D. Zamboni. Analysis of a Denial of Service Attack on TCP. In 1997 IEEE Symposium on Security and Privacy, 1997. Proceedings., pages 208–223, 1997.

[38] W. Stevens. TCP/IP illustrated (vol. 1): the protocols. Addison-Wesley Longman Publishing Co., Inc. Boston, MA, USA, 1993.

[39] P. Syverson. A taxonomy of replay attacks [cryptographic protocols]. In Computer Security Foundations Workshop VII, 1994. CSFW 7. Proceedings, pages 187–191, 1994.

[40] F. Wang and Y. Zhang. Improving TCP performance over mobile ad-hoc networks with out-of-order detection and response. In Proceedings of the 3rd ACM international symposium on Mobile ad hoc networking & computing, pages 217–225. ACM New York, NY, USA, 2002.

[41] M. Zhang, B. Karp, S. Floyd, and L. Peterson. Improving TCP’s Performance under Reordering with DSACK. International Computer Science Institute, Berkeley, Tech. Rep. TR-02-006, 2002.

[42] M. Zhang, B. Karp, S. Floyd, and L. Peterson. RR-TCP: A reordering-robust TCP with DSACK. In 11th IEEE International Conference on Network Protocols, 2003. Proceedings, pages 95–106, 2003.

[43] F. Zhao and S. Wu. Analysis and improvement on IPSec anti-replay window protocol. In Computer Communications and Networks, 2003. ICCCN 2003. Proceedings. The 12th International Conference on, pages 553–558, 2003.

[19] M. Guirguis, A. Bestavros, I. Matta, and Y. Zhang. Reduction of quality (RoQ) attacks on Internet end-systems. In Proceedings IEEE INFOCOM 2005. 24th Annual Joint Conference of the IEEE Computer and Communications Societies, volume 2, 2005.

[20] G. Hellstrom. RTP Payload for Text Conversation. RFC 2793 (Proposed Standard), May 2000. Obsoleted by RFC 4103.

[21] A. Herzberg and I. Yoffe. The layered games framework for specifications and analysis of security protocols. International Journal of Applied Cryptography, 1(2):144–159, 2008.

[22] K. Hickman and T. Elgamal. The SSL protocol. Netscape Communications Corp, 1995.

[23] K. Houle, G. Weaver, N. Long, and R. Thomas. Trends in denial of service attack technology. CERT Coordination Center, 2001.

[24] C. Huang and M. Gouda. An anti-replay window protocol with controlled shift. In Proceedings of the 10th IEEE International Conference on Computer Communications and Networks, 2001.

[25] C. Kaufman, R. Perlman, and B. Sommerfeld. DoS protection for UDP-based protocols. In Proceedings of the 10th ACM conference on Computer and communications security, page 7. ACM, 2003.

[26] S. Kent and R. Atkinson. Security Architecture for the Internet Protocol. RFC 2401 (Proposed Standard), Nov. 1998. Obsoleted by RFC 4301, updated by RFC 3168.

[27] S. Kent and K. Seo. Security Architecture for the Internet Protocol. RFC 4301 (Proposed Standard), Dec. 2005.

[28] J. Kurose, K. Ross, and K. Ross. Computer networking: a top-down approach featuring the Internet. Addison-Wesley Reading, MA, 2003.

[29] A. Kuzmanovic and E. Knightly. Low-rate TCP-targeted denial of service attacks: the shrew vs. the mice and elephants. In Proceedings of the 2003 conference on Applications, technologies, architectures, and protocols for computer communications, pages 75–86. ACM New York, NY, USA, 2003.

[30] K. Leung, V. Li, and D. Yang. An overview of packet reordering in transmission control protocol (TCP): problems, solutions, and challenges. IEEE Transactions on Parallel and Distributed Systems, 18(4):522–535, 2007.

[31] R. Ludwig and R. Katz. The Eifel algorithm: making TCP robust against spurious retransmissions. ACM SIGCOMM Computer Communication Review, 30(1):30–36, 2000.

[32] X. Luo and R. Chang. On a new class of pulsing denial-of-service attacks and the defense. In Proceedings of the ISOC Symposium on Network and Distributed Systems Security (SNDSS), pages 61–79, 2005.

[33] M. Maxim and D. Pollino. Wireless security. McGraw-Hill Osborne Media, 2002.

[34] V. Paxson and M. Allman. RFC2988: Computing TCP’s Retransmission Timer. RFC Editor United States, 2000.

[35] J. Postel. Transmission Control Protocol. RFC 793 (Standard), Sept. 1981. Updated by RFCs 1122, 3168.

[36] K. Ramakrishnan, S. Floyd, and D. Black. The addition of explicit congestion notification (ECN) to IP, 2001.