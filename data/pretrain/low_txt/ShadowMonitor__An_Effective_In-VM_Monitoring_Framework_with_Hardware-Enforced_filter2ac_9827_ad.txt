### Performance Benchmark for HTTP Web Servers

This benchmark evaluates the performance of HTTP web servers, focusing on input/output (I/O) and memory-intensive operations. The performance is quantified by the number of requests per second (RPS), which reflects the server's ability to handle concurrent client requests.

### Experimental Results

Table 5 presents the results of our experiments. First, we observe that ShadowMonitor consistently introduces less overhead compared to LibVMI across all benchmarks. The overhead varies significantly depending on the frequency of monitored events. For instance, in workloads such as kernel compilation, ShadowMonitor introduces 58% less overhead than LibVMI.

Second, in computation-intensive benchmarks like WhetStone and File Compress, ShadowMonitor introduces slightly less overhead than SIM. However, in memory-intensive benchmarks (e.g., Apachebench, kernel compilation, and process creation), SIM introduces 36.1%, 47.5%, and 600% more overhead, respectively. This discrepancy is primarily due to SIM's reliance on shadow page tables for managing virtual memory, which is much slower compared to ShadowMonitor's use of hardware-assisted memory virtualization features.

### Table 5: Performance Comparison Across Different Benchmarks

| Benchmark          | No Monitor       | Our Overhead (%) | LibVMI Overhead (%) | SIM Overhead (%) |
|--------------------|------------------|------------------|---------------------|------------------|
| Kernel Compile     | 4106.87 s        | 7.34%            | 5.48%               | 1.12%            |
| Apachebench        | 4323 RPS         | 0.09%            | 10.1%               | 0.71%            |
| File Compress      | 41.69 s          | 119%             | 20.55%              | 65.1%            |
| Whetstone          | 3339 Mwips       | 8.47%            | 3.83%               | 9.1%             |
| Process Creation   | 1785.8 RPS       | 93.9%            | 7134%               | 1056%            |
| File Copy          | 251.1 MBps       | 54.8%            | 41.9%               | 1.55%            |
| System Call        | 2.7 Mlps         | 0.1%             | 613%                | 11.3%            |
| Average            | -                | 20.55%           | 65.1%               | 74.2%            |

### Related Works

Virtualization technology has long played a crucial role in system security. Early research on leveraging virtualization for security was proposed in [18, 24]. More recently, Virtual Machine Introspection (VMI) technology [7] has been widely used to address security issues in computer systems. VMI leverages the hypervisor layer to provide security support for the upper VM layer. VMI approaches can be categorized into in-VM introspection and out-of-VM introspection based on whether they use the guest VM’s kernel.

#### Out-of-VM Introspection

Out-of-VM introspection places security tools in the hypervisor or a separate trusted VM, monitoring and protecting the untrusted guest VM from outside. This approach can detect malicious activities without being exposed to attacks. Existing works, such as [17, 28], focus on bridging the semantic gap, reconstructing high-level knowledge from the internal data structures of the guest OS to detect attacks. Virtuoso [12] automatically creates introspection tools by training the monitor application in a trusted VM and computing the desired introspection information. VMST [13] and POG [31] bridge the semantic gap by reusing the trusted VM’s kernel code to monitor the target VM’s suspect behaviors. ImEE [34] addresses the significant overhead of accessing guest memory by using an immersive execution environment, allowing native-speed access to guest memory. However, these solutions only support passive monitoring, leading to "delayed detection" issues. To address this, event-driven or active monitoring frameworks like Lares [29] and VMDriver [6] have been proposed. These frameworks enable users to insert hooks inside the guest OS, invoking a security application in another VM when specific events occur. LibVMI [27] is a popular open-source VMI library that provides APIs for accessing VM memory and registering interception points, supporting different OSes through configuration files. Tappan Zee Bridge [11] automates the identification of useful interceptor points.

#### In-VM Introspection

In-VM introspection mitigates the performance issues of out-of-VM introspection by relying on the guest kernel's capabilities. This approach also reduces engineering efforts in implementing security tools. Process Implanting [14] loads monitoring tools into the guest VM, executing them with the camouflage of an existing process. ShadowContext [33] hijacks an existing process in the monitored VM to issue system calls on behalf of the introspection process. SYRINGE [8] runs an agent in the monitor VM, allowing introspection code to call guest kernel functions in the agent’s context. However, these methods are vulnerable if the guest kernel is not trusted, as rootkits can tamper with the introspection. SIM [30] addresses this by using hardware memory protection to create a hypervisor-protected address space (SIM) where a monitor can execute, intercepting events via dedicated gates.

Other efforts, such as [19], provide applications with an encrypted memory view from the OS, using hash values to detect corruption. KCoFI [9] and Virtual Ghost [10] modify the architecture to create protected ghost memory. SeCage [22] uses hardware virtualization extensions to isolate sensitive code, separating control and data planes using VMFUNC. Our approach, similar to SeCage, focuses on event monitoring and requires no modifications to guest applications, making it invisible to them.

### Conclusion

In this paper, we present ShadowMonitor, a monitoring framework that enables efficient in-VM monitoring with hardware-enforced isolation between security tools and untrusted guests. ShadowMonitor achieves efficiency by placing monitor tools in the guest and robustness by separating security tools and untrusted guests into isolated compartments using Intel multi-EPT features. We described the design of ShadowMonitor and provided a comprehensive security analysis. Our prototype implementation on QEMU/KVM demonstrates that ShadowMonitor introduces much less overhead than existing methods. Future work includes implementing kernel drivers for more types of guest kernels and extending ShadowMonitor to other hypervisors like Xen.

### Acknowledgment

We would like to acknowledge all the anonymous reviewers and Dr. Manuel Egele for their valuable comments and help in improving this paper. This work is supported by the Chinese National Key Research and Development Program (2016YFB1000103), the Chinese National Natural Science Foundation of China (grant no. 61602465), U.S. NSF grants OAC-1724845, ACI-1719397, CNS-1733596, and Microsoft Research Faculty Fellowship 8300751. It is also supported by the Beijing Brain Inspired Computing Program in BCBD innovation center. Lei Cui is the corresponding author of this paper.

### References

1. AMD64 Architecture Programmer's Manual
2. Intel 64 and IA-32 Architectures Software Developer's Manual
3. Ltrace. https://en.wikipedia.org/wiki/Ltrace
4. Qemu-kvm. http://www.qemu-project.org
5. Strace. https://en.wikipedia.org/wiki/Strace
6. Xiang, G., Jin, H., Zou, D., Zhang, X., Wen, S., Zhao, F.: Vmdriver: A driver-based monitoring mechanism for virtualization. In: 29th IEEE Symposium on Reliable Distributed Systems (SRDS 2010) (2010)
7. Garfinkel, T., Rosenblum, M.: A virtual machine introspection based architecture for intrusion detection. In: The Network and Distributed System Security Symposium, NDSS 2003 (2003)
8. Carbone, M., Conover, M., Montague, B., Lee, W.: Secure and robust monitoring of virtual machines through guest-assisted introspection. In: Balzarotti, D., Stolfo, S.J., Cova, M. (eds.) RAID 2012. LNCS, vol. 7462, pp. 22–41. Springer, Heidelberg (2012). https://doi.org/10.1007/978-3-642-33338-5_2
9. Criswell, J., et al.: Kcofi: Complete control-flow integrity for commodity operating system kernels. In: 2014 IEEE Symposium on Security and Privacy, SP 2014 (2014)
10. Criswell, J., et al.: Virtual ghost: Protecting applications from hostile operating systems. In: Proceedings of ASPLOS 2014, pp. 81–96. ACM (2014). https://doi.org/10.1145/2541940.2541986
11. Dolan, B., et al.: Tappan zee (north) bridge: Mining memory accesses for introspection. In: Conference on Computer and Communications Security, CCS 2013 (2013)
12. Dolan-Gavitt, B., et al.: Virtuoso: Narrowing the semantic gap in virtual machine introspection. In: 32nd IEEE Symposium on Security and Privacy, S&P 2011 (2011)
13. Fu, Y., Lin, Z.: Space traveling across VM: Automatically bridging the semantic gap in virtual machine introspection via online kernel data redirection. In: IEEE Symposium on Security and Privacy, SP 2012 (2012)
14. Gu, Z., et al.: Process implanting: A new active introspection framework for virtualization. In: IEEE Symposium on Reliable Distributed Systems (SRDS 2011) (2011)
15. Jain, B., et al.: Sok: Introspections on trust and the semantic gap. In: IEEE Symposium on Security and Privacy, SP 2014, Berkeley, CA, USA (2014)
16. Jang, D., et al.: Atra: Address translation redirection attack against hardware-based external monitors. In: Proceedings of CCS 2014 (2014)
17. Jiang, X., Wang, X., Xu, D.: Stealthy malware detection and monitoring through VMM-based “out-of-the-box” semantic view reconstruction. ACM Trans. Inf. Syst. Secur. 13(2), 12:1–12:28 (2010). https://doi.org/10.1145/1698750.1698752
18. Kelem, N.L., Feiertag, R.J.: A separation model for virtual machine monitors. In: IEEE Symposium on Security and Privacy, pp. 78–86 (1991). https://doi.org/10.1109/RISP.1991.130776
19. Kwon, Y., et al.: Sego: Pervasive trusted metadata for efficiently verified untrusted system services. In: Proceedings of ASPLOS 2016, pp. 277–290. ACM (2016). https://doi.org/10.1145/2872362.2872372
20. Lee, H., et al.: KI-Mon: A hardware-assisted event-triggered monitoring platform for mutable kernel object. In: The 22nd USENIX Security Symposium (2013)
21. Lengyel, T.K., et al.: Scalability, fidelity, and stealth in the DRAKVUF dynamic malware analysis system. In: Proceedings of ACSAC 2014 (2014)
22. Liu, Y., et al.: Thwarting memory disclosure with efficient hypervisor-enforced intra-domain isolation. In: Proceedings of CCS 2015, 12–16 October 2015
23. Liu, Z., et al.: CPU transparent protection of OS kernel and hypervisor integrity with programmable DRAM. In: Proceedings of ISCA 2013, 23–27 June 2013
24. Madnick, S.E., Donovan, J.J.: Application and analysis of the virtual machine approach to information system security and isolation. In: Proceedings of the Workshop on Virtual Computer Systems. ACM, New York (1973). https://doi.org/10.1145/800122.803961
25. McKeen, F., et al.: Innovative instructions and software model for isolated execution. In: Proceedings of HASP 2013, p. 10. ACM (2013). https://doi.org/10.1145/2487726.2488368
26. Moon, H., et al.: Vigilare: Toward snoop-based kernel integrity monitor. In: The ACM Conference on Computer and Communications Security, CCS 2012 (2012)
27. Payne, B.D.: Simplifying virtual machine introspection using LibVMI. https://doi.org/10.2172/1055635
28. Payne, B.D., Lee, W.: Secure and flexible monitoring of virtual machines. In: 23rd Annual Computer Security Applications Conference (ACSAC 2007), 10–14 December 2007, Miami Beach, Florida, USA (2007)
29. Payne, B.D., et al.: Lares: An architecture for secure active monitoring using virtualization. In: 2008 IEEE Symposium on Security and Privacy (S&P 2008) (2008)
30. Sharif, M.I., et al.: Secure in-VM monitoring using hardware virtualization. In: The Conference on Computer and Communications Security, CCS 2009 (2009)
31. Srinivasan, D., et al.: Process out-grafting: An efficient “out-of-VM” approach for fine-grained process execution monitoring. In: Proceedings of CCS 2011 (2011)
32. Walters, A.: The Volatility Framework: Volatile memory artifact extraction utility framework (2007)
33. Wu, R., et al.: System call redirection: A practical approach to meeting real-world virtual machine introspection needs. In: 44th Annual IEEE/IFIP International Conference on Dependable Systems and Networks, DSN 2014 (2014)
34. Zhao, S., et al.: Seeing through the same lens: Introspecting guest address space at native speed. In: 26th USENIX Security Symposium, USENIX Security 2017 (2017)