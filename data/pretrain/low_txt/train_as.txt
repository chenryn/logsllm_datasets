### Compliance with Standards and Safety Considerations

While we strive to adhere to current and future standards, our implementation sometimes exceeds the required safety measures, and in other cases, it may not fully meet the standard safety requirements. The latter instances are likely to be bugs, while the former, when marked as **preliminary**, should not be relied upon, as future standards may necessitate changes that conflict with the additional safety properties of the current implementation.

Moreover, the POSIX standard does not provide a detailed definition of safety. We interpret "safe to call" in the context of POSIX to mean that, as long as the program does not invoke undefined behavior, the function will behave as specified and will not cause other functions to deviate from their specified behavior. We have chosen to use this loose definition of safety to align our manual with POSIX, rather than because it is the best definition.

Please note that these definitions and annotations are preliminary and certain aspects are still under discussion and may be subject to clarification or change. Over time, we aim to evolve these preliminary safety notes into stable commitments, similar to those of our interfaces. As we do so, we will remove the **preliminary** keyword from the safety notes. Until then, they should not be considered a promise of future behavior.

### Unsafe Features

Functions that are unsafe to call in certain contexts are annotated with keywords that document the features making them unsafe. 

- **AS-Unsafe Features**: Indicate that the functions are never safe to call when asynchronous signals are enabled.
- **AC-Unsafe Features**: Indicate that the functions are never safe to call when asynchronous cancellation is enabled.

#### AS-Unsafe and AC-Unsafe Features

- **Lock**: Functions marked with **lock** as an AS-unsafe feature may be interrupted by a signal while holding a non-recursive lock, leading to a deadlock if the signal handler calls another such function that takes the same lock. Functions marked with **lock** as an AC-unsafe feature may fail to release a lock if canceled asynchronously, resulting in indefinite blocking for subsequent attempts to take that lock.

- **Corrupt**: Functions marked with **corrupt** as an AS-unsafe feature may corrupt data structures and misbehave when they interrupt or are interrupted by another such function. Unlike functions marked with **lock**, these take recursive locks to avoid MT-safety problems but can still observe partially-updated data structures. Functions marked with **corrupt** as an AC-unsafe feature may leave data structures in a corrupt, partially updated state, leading to misbehavior in subsequent uses.

- **Heap**: Functions marked with **heap** may call heap memory management functions from the `malloc(3)/free(3)` family and are only as safe as those functions. This note is equivalent to: 
  - AS-unsafe: lock
  - AC-unsafe: lock, fd, mem

- **Dlopen**: Functions marked with **dlopen** use the dynamic loader to load shared libraries, involving file operations, memory mapping, symbol resolution, and more, all while holding internal dynamic loader locks. These functions are AS-unsafe and AC-unsafe, and other potential safety issues may arise.

- **Plugin**: Functions marked with **plugin** may run code from external plugins, which are assumed to be MT-safe, AS-unsafe, and AC-unsafe. Examples include stack unwinding libraries, name service switch (NSS) back-ends, and character set conversion (iconv) back-ends. The **plugin** keyword does not imply direct involvement of the dynamic loader or `libdl` interfaces, which are covered by **dlopen**.

- **I18n**: Functions marked with **i18n** may call internationalization functions from the `gettext(3)` family and will be only as safe as those functions. This note is equivalent to:
  - MT-safe: env
  - AS-unsafe: corrupt, heap, dlopen
  - AC-unsafe: corrupt

- **Timer**: Functions marked with **timer** use `alarm(3)` or similar to set a timeout, which can be delivered to a different thread in a multi-threaded program. Such functions are always AS-unsafe and AC-unsafe due to potential interference with timers and lack of safe ways to reset earlier timers on cancellation.

### Conditionally Safe Features

Some features that make functions unsafe to call in certain contexts can be mitigated by specific constraints. The following keywords refer to such features:

- **Init**: Functions marked with **init** perform initialization when first called. Calling such a function at least once in single-threaded mode removes the MT-unsafe aspect. For AS-unsafe and AC-unsafe features, ensure initialization is performed before configuring signal handlers or enabling cancellation.

- **Race**: Functions marked with **race** operate on objects in ways that may cause data races. For user-exposed objects, the caller is responsible for synchronization. For library-controlled objects, concurrent access may be mt-unsafe and as-unsafe. Use a non-recursive mutex to guard against racy access to internal objects.

- **Const**: Functions marked with **const** modify internal objects that should be regarded as constant. Writers are mt-unsafe and as-unsafe, but readers can be regarded as safe if no other reasons for them to be unsafe remain. Use a read-write lock to work around this safety issue.

- **Sig**: Functions marked with **sig** temporarily install a signal handler, which may interfere with other uses of the signal. Ensure no other uses of the signal occur during the call, and block the signal before the call and reset its handler afterward.

- **Term**: Functions marked with **term** may change terminal settings, creating a window where changes made by other threads are lost. Hold a lock while calling these functions and interacting with the terminal to avoid concurrent and reentrant interactions.

### Other Safety Remarks

Additional keywords indicate features that do not make a function unsafe to call but may need to be considered in certain programs:

- **Locale**: Functions marked with **locale** read from the locale object without synchronization. They are not marked as mt-unsafe or as-unsafe because functions that modify the locale object are marked with **const:locale** and are regarded as unsafe.

- **Env**: Functions marked with **env** access the environment without guards for concurrent modifications. They are not marked as mt-unsafe or as-unsafe because functions that modify the environment are marked with **const:env** and are regarded as unsafe.

By understanding and applying these safety considerations, developers can ensure the robustness and reliability of their applications.