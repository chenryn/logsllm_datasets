### Size Increases and Runtime Cost

The increase in size and runtime cost is primarily due to the compression workload, which is not affected by Capsicum. Our findings indicate that the overhead of launching a sandboxed `gzip` process is 2.37 ± 0.01 ms, regardless of the type of compression stream. For many workloads, this one-time performance cost is negligible or can be amortized by processing multiple files with a single `gzip` invocation.

### Future Work

Capsicum provides an effective platform for capability-based security on UNIX platforms. However, further research and development are necessary to fully realize its potential. We believe that refining the Capsicum primitives could enhance performance, particularly in sandbox creation. One possible approach is to use a Capsicum-centric version of the S-thread primitive proposed by Bittau. Additionally, introducing a "logical application" OS construct might improve termination properties.

Another area for research is the integration of user interfaces and OS security. Shapiro has suggested that capability-centered window systems are a natural extension of capability operating systems. Improving the mapping of application security constructs into OS sandboxes would significantly enhance the security of Chromium, which currently does not consistently assign web security domains to sandboxes.

In the context of windowing systems, we have found that capability delegation is most valuable when driven by UI behaviors such as Powerboxes (file dialogues running with ambient authority) and drag-and-drop. This approach supports gesture-based access control research.

The primary challenge with Capsicum and other privilege separation approaches is programmability. Converting local development into de facto distributed development adds significant complexity to code authoring, debugging, and maintenance. Aligning security separation with application separation is also a key challenge: how do programmers identify and implement compartmentalizations that offer real security benefits, and how do they ensure that these compartmentalizations are correctly implemented? Further research in these areas is critical if systems like Capsicum are to be used to mitigate security vulnerabilities through process-based compartmentalization on a large scale.

### Related Work

#### Discretionary and Mandatory Access Control

Discretionary Access Control (DAC) allows users to control protections on objects they own. While DAC remains relevant in multi-user server environments, the advent of personal computers and mobile phones has highlighted its weaknesses. On a single-user computer, all security controls are concentrated, making it vulnerable to malicious code containment, as demonstrated in Section 5.1.

Mandatory Access Control (MAC) systemically enforces policies representing the interests of system implementers and administrators. Information flow policies tag subjects and objects with confidentiality and integrity labels, preventing information leakage. Multi-Level Security (MLS), formalized as Bell-LaPadula (BLP), protects confidential information from unauthorized release. The Biba integrity policy, the logical dual of MLS, protects integrity and can be used to protect Trusted Computing Bases (TCBs).

MAC policies are robust against the problem of confused deputies, but they are highly inflexible, requiring administrative intervention to change. This precludes browsers from creating isolated and ephemeral sandboxes on demand for each website visited. Type Enforcement (TE) in LOCK, SELinux, and SEBSD offers greater flexibility by allowing arbitrary labels to be assigned to subjects and objects, and a set of rules to control their interactions. However, the need for administrative intervention and the lack of ephemeral sandboxes limit their applicability for applications like Chromium.

#### Capability Systems, Micro-Kernels, and Compartmentalization

Capability systems have been closely tied to mandatory access control since their inception, with capabilities considered the preferred primitive for mediation in trusted systems. Neumann et al.'s Provably Secure Operating System (PSOS) and its successor LOCK propose a tight integration of the two models, with MAC allowing revocation of capabilities to enforce the *-property.

Despite experimental hardware like Wilkes' CAP computer, the dominance of general-purpose virtual memory led to the exploration of object-capability systems and micro-kernel design. Systems like Mach and L4 epitomize this approach, extracting kernel components into separate tasks. Trusted operating system research, such as Trusted Mach, DTMach, and FLASK, blended mandatory access control with micro-kernels. However, micro-kernels have been largely rejected by commodity OS vendors in favor of higher-performance monolithic kernels.

MAC has spread to commodity UNIX systems in the form of SELinux, but operating system capabilities, a key security element in micro-kernel systems, have not seen wide deployment. Research continues in the form of EROS (now CapROS), inspired by KEYKOS.

OpenSSH privilege separation and Privman have rekindled interest in micro-kernel-like compartmentalization projects, such as the Chromium web browser and Capsicum's logical applications. Large application suites, like Chromium and WebKit, are comparable in size and complexity to monolithic kernels. How best to decompose monolithic applications remains an open research question; Bittau’s Wedge offers a promising avenue of research in automated identification of software boundaries through dynamic analysis.

Seaborn and Hand have explored application compartmentalization on UNIX through capability-centric Plash and Xen, respectively. Plash blends UNIX semantics with capability security by providing POSIX APIs over capabilities but relies on weak UNIX primitives. Supporting Plash on stronger Capsicum foundations would offer greater application compatibility. Hand's approach suffers from similar issues to seccomp, with functionality-poor runtime environments for sandboxes. Garfinkel's Ostia considers a delegation-centric approach but focuses on providing sandboxing as an extension rather than a core OS facility.

Finally, capability programming languages, such as Java and the JVM, offer a vision of capability-oriented programming. More specific efforts include E, the foundation for Capdesk and the DARPA Browser, and Caja, a capability subset of the JavaScript language.

### Conclusion

We have described Capsicum, a practical capabilities extension to the POSIX API, and a prototype based on FreeBSD, planned for inclusion in FreeBSD 9.0. Our goal is to address the needs of application authors who are already experimenting with sandboxing but find themselves lacking effective containment techniques. We have discussed our design choices, contrasting approaches from research capability systems and commodity access control and sandboxing technologies, leading to a new approach. Capsicum lends itself to adoption by blending immediate security improvements to current applications with the long-term prospects of a more capability-oriented future. We illustrate this through adaptations of widely-used applications, from simple `gzip` to Google's complex Chromium web browser, showing how firm OS foundations make the job of application writers easier. Finally, security and performance analyses show that improved security comes at a cost, but the design we have selected improves on the state of the art.

### Acknowledgments

The authors gratefully acknowledge our sponsors, including Google, Inc., the Rothermere Foundation, and the Natural Sciences and Engineering Research Council of Canada. We would also like to thank Mark Seaborn, Andrew Moore, Joseph Bonneau, Saar Drimer, Bjoern Zeeb, Andrew Lewis, Heradon Douglas, Steve Bellovin, and our anonymous reviewers for their helpful feedback on our APIs, prototype, and paper. Special thanks to Sprewell for his contributions to the Chromium FreeBSD port.

### Availability

Capsicum, along with our extensions to the Chromium web browser, are available under a BSD license. More information can be found at:
http://www.cl.cam.ac.uk/research/security/capsicum/

A technical report with additional details is forthcoming.

### References

[1] The Chromium Project: Sandboxing Design. Design Documents: OS X
http://dev.chromium.org/developers/design-documents/sandbox/osx-sandboxing-design

[2] ACETTA, M. J., BARON, R., BOLOWSKY, W., GOLUB, D., RASHID, R., TEVANIAN, A., AND YOUNG, M. Mach: a new kernel foundation for unix development. In Proceedings of the USENIX 1986 Summer Conference (July 1986), pp. 93–112.

[3] BELL, D. E., AND LAPADULA, L. J. Secure computer systems: Mathematical foundations. Tech. Rep. 2547, MITRE Corp., March 1973.

[4] BIBA, K. J. Integrity considerations for secure computer systems. Tech. rep., MITRE Corp., April 1977.

[5] BITTAU, A., MARCHENKO, P., HANDLEY, M., AND KARP, B. Wedge: Splitting Applications into Reduced-Privilege Compartments. In Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation (2008), pp. 309–322.

[6] BRANSTAD, M., AND LANDAUER, J. Assurance for the Trusted Mach operating system. Computer Assurance, 1989. COMPASS '89, 'Systems Integrity, Software Safety and Process Security', Proceedings of the Fourth Annual Conference on (1989), 103–108.

[7] GARFINKEL, T., PFA, B., AND ROSENBLUM, M. Ostia: A delegating architecture for secure system call interposition. In Proc. Internet Society 2003 (2003).

[8] GONG, L., MUELLER, M., PRAFULLCHANDRA, H., AND SCHEMERS, R. Going Beyond the Sandbox: An Overview of the New Security Architecture in the Java Development Kit 1.2. In Proceedings of the USENIX Symposium on Internet Technologies and Systems.

[9] HARDY, N. KeyKOS architecture. SIGOPS Operating Systems Review 19, 4 (Oct 1985).

[10] KILPATRICK, D. Privman: A Library for Partitioning Applications. In Proceedings of USENIX Annual Technical Conference (2003), pp. 273–284.

[11] LIEDTKE, J. On microkernel construction. In Proceedings of the 15th ACM Symposium on Operating System Principles (SOSP-15) (Copper Mountain Resort, CO, Dec. 1995).

[12] LOSCOCCO, P., AND SMALLEY, S. Integrating flexible support for security policies into the Linux operating system. Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference table of contents (2001), 29–42.

[13] MILLER, M. S. The e language. http://www.erights.org/.

[14] MILLER, M. S., SAMUEL, M., LAURIE, B., AWAD, I., AND STAY, M. Caja: Safe active content in sanitized JavaScript, May 2008. http://google-caja.googlecode.com/files/caja-spec-2008-06-07.pdf.

[15] MURRAY, D. G., AND HAND, S. Privilege Separation Made Easy. In Proceedings of the ACM SIGOPS European Workshop on System Security (EUROSEC) (2008), pp. 40–46.

[16] NEUMANN, P. G., BOYER, R. S., GEIERTAG, R. J., LEVITT, K. N., AND ROBINSON, L. A provably secure operating system: The system, its applications, and proofs, second edition. Tech. Rep. Report CSL-116, Computer Science Laboratory, SRI International, May 1980.

[17] PROVOS, N., FRIEDL, M., AND HONEYMAN, P. Preventing Privilege Escalation. In Proceedings of the 12th USENIX Security Symposium (2003).

[18] REIS, C., AND GRIBBLE, S. D. Isolating web programs in modern browser architectures. In EuroSys '09: Proceedings of the 4th ACM European conference on Computer systems (New York, NY, USA, 2009), ACM, pp. 219–232.

[19] SALTZER, J. H., AND SCHROEDER, M. D. The protection of information in computer systems. In Communications of the ACM (July 1974), vol. 17.

[20] SAMI SAYDJARI, O. Lock: an historical perspective. In Proceedings of the 18th Annual Computer Security Applications Conference (2002), IEEE Computer Society.

[21] SEABORN, M. Plash: tools for practical least privilege, 2010. http://plash.beasts.org/.

[22] SEBES, E. J. Overview of the architecture of Distributed Trusted Mach. Proceedings of the USENIX Mach Symposium: November (1991), 20–22.

[23] SHAPIRO, J., SMITH, J., AND FARBER, D. E. EROS: a fast capability system. SOSP '99: Proceedings of the seventeenth ACM symposium on Operating systems principles (Dec 1999).

[24] SPENCER, R., SMALLEY, S., LOSCOCCO, P., HIBLER, M., ANDERSON, D., AND LEPREAU, J. The Flask Security Architecture: System Support for Diverse Security Policies. In Proc. 8th USENIX Security Symposium (August 1999).

[25] VANCE, C., AND WATSON, R. Security Enhanced BSD. Network Associates Laboratories (2003).