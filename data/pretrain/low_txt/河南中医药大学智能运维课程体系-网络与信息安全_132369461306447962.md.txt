# 优化后的文本

## 第1页
### 计算机安全
#### 第五版
#### 第3章：程序与编程
授课教师：高海波  
河南中医药大学 信息管理与信息系统教研室

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第2页
### 第3章目标
- 了解内存组织、缓冲区溢出及其相关对策
- 常见的编程错误，例如越界错误、竞态条件和不完全中介
- 恶意软件的历史及其功能
- 病毒检测
- 编程人员编写安全代码的技巧

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第3页
### 内存分配
- 高地址
  - 栈
  - 堆
  - 静态数据
  - 代码
- 低地址

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第4页
### 数据与指令
- 存储 `sum = 7178` 在地址 `0x1C0A`
- 执行指令“向前跳转10字节”

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第5页
### 内存组织
- 高地址
  - 栈
  - 局部数据
  - 程序代码
  - 系统数据
  - 系统代码
- 低地址

---

## 第6页
### 缓冲区溢出
- 当数据写入超出其分配的空间时发生，例如在9字节数组中写入第10个字节
- 在典型的可利用缓冲区溢出中，攻击者的输入预期进入分配给数据的内存区域，但这些输入却覆盖了存储可执行代码的内存
- 攻击者的关键在于找到导致覆盖内存被执行的缓冲区溢出机会，并找到正确的代码输入

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第7页
### 缓冲区溢出如何发生
```c
char sample[10];
int i;
for (i = 0; i <= 9; i++) {
    sample[i] = 'A';
}
sample[10] = 'B';
```

---

## 第8页
### 缓冲区溢出的位置
- 用户数据
  - AAAAAAAAAAB
- 用户数据和用户程序代码
  - AAAAAAAAAAB
- 用户数据和系统数据
  - AAAAAAAAAAB
- 用户数据和系统程序代码
  - AAAAAAAAAAB

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第9页
### 栈
- 栈
  - P3
  - P2
  - 生长方向
  - P1
  - 程序计数器
  - 栈指针

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第10页
### 调用过程后的栈
- 过程B
  - 栈
    - P3
    - call C
    - 过程A
    - P2
    - call B
    - P1
    - 程序计数器
    - 栈指针
- 过程C
  - 栈
    - P2
    - P1
    - 程序计数器
    - 栈指针

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第11页
### 受损的栈
- 过程B
  - 栈
    - P3
    - call C
    - 过程A
    - P2
    - call B
    - P1
    - 程序计数器
    - 栈指针
- 过程C
  - 代码
  - 代码
  - 程序计数器
  - 栈指针

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第12页
### 覆盖内存以执行
- 覆盖存储在栈中的程序计数器
- 覆盖低内存中的部分代码，替换为新指令
- 覆盖栈中的程序计数器和数据，使程序计数器指向栈

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第13页
### 缓冲区溢出的危害
- 覆盖：
  - 程序的另一部分数据
  - 程序中的一个指令
  - 其他程序的数据或代码
  - 操作系统数据或代码
- 覆盖程序的指令使攻击者获得该程序的执行权限
- 覆盖操作系统的指令使攻击者获得操作系统的执行权限

---

## 第14页
### 缓冲区溢出的对策
- 保持在边界内
- 写入前检查长度
- 确认数组下标在范围内
- 双重检查边界条件代码以防止越界错误
- 限制输入到可接受字符的数量
- 限制程序的权限以减少潜在危害
- 许多语言具有溢出保护
- 代码分析器可以识别许多溢出漏洞
- 栈中的哨兵值用于标记修改

---

## 第15页
### 不完全中介
- 中介：验证主体是否有权对对象执行操作
- 防止不完全中介：
  - 验证所有输入
  - 限制用户对敏感数据和功能的访问
  - 使用参考监视器进行完全中介

---

## 第16页
### 检查时间与使用时间
- 通过中间的“诱饵和转换”进行中介
  - 文件：my_file
  - 操作：将第4个字节改为A
  - 文件：your_file
  - 操作：删除文件

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第17页
### 竞态条件
- 座位可用？
  - 预订座位
  - 预订系统
  - 时间

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第18页
### 竞态条件
- 座位可用？
  - 预订座位
  - 用户A
  - 预订系统
  - 座位可用？
  - 预订座位
  - 用户B
  - 时间

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第19页
### 其他编程疏忽
- 未记录的访问点（后门）
- 越界错误
- 整数溢出
- 未终止的空终止字符串
- 参数长度、类型或数量错误
- 不安全的实用库

---

## 第20页
### 恶意软件
- 由具有恶意意图的代理植入的程序，以造成意外或不良影响
- 病毒
  - 一种可以自我复制并将恶意代码传递给其他非恶意程序的程序
- 蠕虫
  - 特洛伊木马
  - 除了其声明的功能外，还具有第二个、非明显的恶意功能的代码

---

## 第21页
### 恶意软件类型
- 病毒
  - 导致恶意行为并传播自身副本到其他程序的代码
- 特洛伊木马
  - 包含意外的、未记录的附加功能的代码
- 蠕虫
  - 通过网络传播自身副本的代码；通常会导致性能下降
- 兔子
  - 无限复制自身以耗尽资源的代码
- 逻辑炸弹
  - 当满足预定条件时触发动作的代码
- 定时炸弹
  - 当达到预定时间时触发动作的代码
- 下载器
  - 仅传输代理代码以投放其他恶意代码，如病毒或特洛伊木马
- 敌对移动代码
  - 通过Web半自主传输的代码
- 脚本攻击
  - 通过JavaScript、ActiveX或其他脚本语言下载的恶意代码，在显示网页时执行

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第22页
### 恶意软件类型（续）
- RAT（远程访问特洛伊木马）
  - 一旦植入，从远程位置提供访问权限的特洛伊木马
- 间谍软件
  - 拦截并秘密通信用户或用户活动数据的程序
- 机器人
  - 通常受远程控制的半自主代理；不一定具有恶意
- 僵尸
  - 通常受远程程序控制的代码或整个计算机
- 浏览器劫持者
  - 更改浏览器设置、禁止访问某些站点或将浏览器重定向到其他站点的代码
- Rootkit
  - 安装在操作系统最特权部分的代码；难以检测
- 陷阱门或后门
  - 允许未经授权访问机器或程序的代码特性；绕过正常的访问控制和身份验证
- 工具或工具包
  - 包含一组漏洞测试的程序；本身并不危险，但每个成功的测试都能识别一个可被攻击的脆弱主机
- 恐吓软件
  - 并不是代码；虚假警告恶意代码攻击

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第23页
### 恶意软件历史
- 1982年
  - Elk Cloner
  - 第一个病毒；针对Apple II计算机
- 1985年
  - Brain
  - 第一个攻击IBM PC的病毒
- 1988年
  - Morris蠕虫
  - 据称是意外感染，导致ARPANET（今天的互联网前身）的大范围瘫痪
- 1989年
  - Ghostballs
  - 第一个多部分（具有多个可执行部分）病毒
- 1990年
  - Chameleon
  - 第一个变形（改变形式以避免检测）病毒
- 1995年
  - Concept
  - 第一个通过Microsoft Word文档宏传播的病毒
- 1998年
  - Back Orifice
  - 允许远程执行和监控受感染计算机的工具
- 1999年
  - Melissa
  - 通过电子邮件地址簿传播的病毒
- 2000年
  - ILOVEYOU
  - 通过包含恶意脚本的电子邮件传播的蠕虫。获取受害者的地址簿以扩大感染。估计有5000万台计算机受到影响。
- 2000年
  - Timofonica
  - 第一个针对移动电话（通过短信）的病毒
- 2001年
  - Code Red
  - 从每月1日至20日传播，从20日至28日攻击whitehouse.gov网站，然后在月底休息并在下个月初重新开始。仅驻留在内存中，使其无法被文件扫描的防病毒产品检测到。

---

## 第24页
### 恶意软件历史（续）
- 2001年
  - Code Red I
  - 类似Code Red，但还会安装允许远程访问受感染机器的代码
- 2001年
  - Nimda
  - 利用已知漏洞；据报道在24小时内传播到200万台机器
- 2003年
  - Slammer蠕虫
  - 攻击SQL数据库服务器；由于生成大量流量而导致意外的拒绝服务影响
- 2003年
  - SoBig蠕虫
  - 通过向找到的所有电子邮件地址发送自身来传播；可以伪造发件人字段；可以检索存储的密码
- 2004年
  - MyDoom蠕虫
  - 大规模邮件蠕虫，具有远程访问能力
- 2004年
  - Bagle或Beagle蠕虫
  - 收集电子邮件地址以供后续垃圾邮件发送使用；SoBig、MyDoom和Bagle似乎在争夺捕获最多电子邮件地址的竞争中展开
- 2008年
  - Rustock.C
  - 垃圾邮件僵尸和Rootkit病毒
- 2008年
  - Conficker
  - 据信感染了多达1000万台机器；经历了五个主要代码版本
- 2010年
  - Stuxnet
  - 攻击SCADA自动化处理系统的蠕虫；零日攻击
- 2011年
  - Duqu
  - 据信是Stuxnet的变种
- 2013年
  - CryptoLocker
  - 加密受害者数据存储并要求赎金以换取解密密钥的勒索软件特洛伊木马

---

## 第25页
### 恶意代码的危害
- 对用户和系统的危害：
  - 向用户的联系人发送电子邮件
  - 删除或加密文件
  - 修改系统信息，如Windows注册表
  - 盗取敏感信息，如密码
  - 附着到关键系统文件
  - 将恶意软件副本隐藏在多个互补位置
- 对世界的危害：
  - 一些恶意软件已知感染了数百万系统，呈几何级数增长
  - 受感染的系统通常成为新感染的中继站

---

## 第26页
### 传输和传播
- 设置和安装程序
- 附件文件
- 文档病毒
- 自动运行
- 使用非恶意程序：
  - 附加病毒
  - 包围程序的病毒
  - 集成病毒和替换

---

## 第27页
### 恶意软件激活
- 一次性执行（植入）
  - 引导扇区病毒
  - 内存驻留病毒
  - 应用程序文件
  - 代码库

---

## 第28页
### 病毒效果
- 附着到可执行程序
  - 修改文件目录
  - 写入可执行程序文件
- 附着到数据或控制文件
  - 修改目录
  - 重写数据
  - 附加到数据
  - 附加数据到自身
- 保留在内存中
  - 通过修改中断处理器地址表拦截中断
  - 在非瞬态内存区域加载自身
- 感染磁盘
  - 拦截中断
  - 拦截操作系统调用（例如格式化磁盘）
  - 修改系统文件
  - 修改普通可执行程序
- 隐藏自身
  - 拦截会揭示自身的系统调用并伪造结果
  - 将自身分类为“隐藏”文件
- 传播感染
  - 感染引导扇区
  - 感染系统程序
  - 感染普通程序
  - 感染普通程序读取以控制其执行的数据
- 阻止去激活
  - 在去激活程序之前激活并阻止去激活

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第29页
### 用户的对策
- 使用从可靠来源获取的软件
- 在隔离环境中测试软件
- 仅在确定安全的情况下打开附件
- 将每个网站视为潜在有害
- 创建并维护备份

---

## 第30页
### 病毒检测
- 病毒扫描器查找恶意代码感染的迹象
- 传统病毒扫描器难以跟上新的恶意软件——大约只能检测到45%的感染
- 检测机制：
  - 文件或内存中的已知字符串模式
  - 执行模式
  - 存储模式

---

## 第31页
### 病毒签名
- 如果（--）
- 附带
- 可识别的签名元素
- 跳转
- 病毒代码
- 原始程序
- 原始程序
- 分离的病毒模块

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。

---

## 第32页
### 开发者的对策
- 模块化代码：每个代码模块应
  - 单一用途
  - 小
  - 简单
  - 独立
- 封装
  - 信息隐藏
  - 相互怀疑
  - 约束
  - 遗传多样性

---

## 第33页
### 代码测试
- 单元测试
- 集成测试
- 功能测试
- 性能测试
- 验收测试
- 安装测试
- 回归测试
- 渗透测试

---

## 第34页
### 安全设计原则
- 最小特权
- 机制经济
- 开放设计
- 完全中介
- 权限基础
- 权限分离
- 最少公共机制
- 易于使用

---

## 第35页
### 其他对策
- 好的
  - 程序正确性的证明——在可能的情况下
  - 防御性编程
  - 按合同设计
- 不好的
  - 渗透和修补
  - 安全通过隐蔽

---

## 第36页
### 总结
- 缓冲区溢出攻击可以利用代码和数据存储在同一内存的事实，恶意修改正在执行的程序
- 程序可能有许多其他类型的漏洞，包括越界错误、不完全中介和竞态条件
- 恶意软件根据其特性可能会产生各种有害影响，包括资源使用、感染载体和有效载荷
- 开发人员可以使用多种技术来编写和测试安全代码

摘自《计算机安全》，第五版，作者：Charles P. Pfleeger 等（ISBN: 9780134085043）。版权所有 © 2015 Pearson Education, Inc. 保留所有权利。