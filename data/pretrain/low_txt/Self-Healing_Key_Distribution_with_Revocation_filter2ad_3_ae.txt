### Applications and System Parameters

First, we need to identify the scenarios in which self-healing key distribution schemes would be applied and determine the appropriate system parameter values for these scenarios. It is essential to ensure that an efficient implementation of our schemes, with the chosen parameter values, is feasible.

### Project Context

The work described in this paper is part of a larger project focused on secure group communication for large, dynamic groups. Specifically, the project targets groups with 10,000 or more members, where membership may change frequently, possibly every few seconds. Our schemes are well-suited for this setting because the system parameters affecting broadcast size are either independent of the number of members (e.g., the number of sessions and the key size, which is determined by the necessary cryptographic strength) or grow much more slowly (e.g., collusion resistance, \( \beta \)). The actual session length will vary based on the key size used and the rate of change in group membership. In practice, we anticipate it will range from a few seconds to a minute.

### Parameter Determination

We determined that \( p \) (all operations are in the finite field \( F_p \)) should be at least \( 2^{64} \), i.e., a 64-bit number. This ensures that we can broadcast session keys \( K_1, \ldots, K_\lambda \) that are also 64 bits long. These session keys will likely be used in a symmetric cipher such as AES, for which a 64-bit key currently provides reasonable security for a short-lived session key.

### Broadcast Size Constraints

The maximum packet size in an IPv4-based network is 64KB. Figure 3 shows possible values for \( \lambda \) and \( \beta \) given this constraint. Larger broadcasts are less likely to reach their destinations: if packets are lost independently at random at a rate of 1%, and a key distribution broadcast consists of 45 such packets (fragments), there is a 36% chance that one fragment, and hence the entire broadcast, will not reach its destination. If the loss rate reaches 5%, the probability that our 64KB broadcast goes through is only 10%. Choosing \( \lambda \) between 10 and 20 addresses this problem, as users will very likely be able to recover missed session keys through self-healing.

### Collusion Resistance

Fixing \( \lambda \) between 10 and 20 leaves us with values for \( \beta \) between 15 and 20 for Construction 3, and even larger values for Construction 4. The dynamic nature of the group supports providing only a moderate degree of collusion resistance. Because the group is dynamic, collusions formed in a previous session may not be as useful in the current one (e.g., if a member is now revoked and does not have useful information on the current session key). Therefore, a certain amount of new collusion may be necessary in each session, reducing the needed degree of collusion resistance. Thus, the mentioned values for \( \beta \) and \( \lambda \) should be adequate for most applications.

### Addressing Broadcast Loss

If the high likelihood of broadcast loss and the associated high latency for key recovery (i.e., it may take a few sessions until we learn the key of a lost broadcast) associated with Construction 3 is unacceptable, there are two straightforward solutions. First, the application can use Construction 4 and/or smaller values for \( \beta \) and \( \lambda \), which will decrease the broadcast size and lower the probability of broadcast loss. Second, an implementation where the group manager broadcasts the \( \lambda - 1 \) shares for previous and future keys, and the current session key, independently, can be used. With such an implementation, smaller broadcasts are used to send the same information, increasing the probability that each smaller broadcast reaches its target. Receivers can still use the subset of shares they receive to self-heal on some of the missed broadcasts.

### Session Key Vulnerability

One concern is that the schemes are defined over a fixed period of \( \lambda \) sessions, making session keys corresponding to sessions late in the sequence more vulnerable to packet loss. By making \( \lambda \) a bit larger, we can ensure that with high probability, each user will either receive or be able to recover via self-healing most of the session keys. However, distributing new personal keys to each member to deploy self-healing key distribution for a new round of \( \lambda \) sessions remains an issue. In Section 6 and Appendix E, we discuss a way to eliminate the need to individually re-key every group member after every \( \lambda \) sessions. We are also working on sliding-window versions of the schemes, in which any two packets that "sandwich" a session closely can be used to recover that session's key.

### Open Problems

We have shown that self-healing key distribution provides reliable multicast session key distribution in a stateless and traceable manner. A reasonable degree of resistance to both adversarial coalitions and network packet loss can be achieved with overhead of just a single UDP packet per session. Members who experience packet loss can recover missed session keys efficiently upon receipt of a single additional packet. Many open questions remain, including exploring computational versions of self-healing key distribution further, potentially removing the \( \lambda \) term entirely, and reducing the degree of \( \beta \) in the broadcast size.

### Acknowledgments

The authors would like to thank Alice Silverberg, Hao-Chi Wong, and the anonymous referees for helpful comments on an earlier version of this paper, and Tom Berson and Ralph Merkle for several interesting discussions. This work was partially sponsored by DARPA grant N66001-00-1-8921.

### References

[1] D. Boneh. The Decision Diffie-Hellman Problem. In Proceedings of the Third Algorithmic Number Theory Symposium, Lecture Notes in Computer Science 1423, pp. 48–63, 1998.
[2] A. Beimel and B. Chor. Interaction in Key Distribution Schemes. In Advances in Cryptology - Crypto '93, Lecture Notes in Computer Science 773, pp. 444–455.
[3] M. Bellare and P. Rogaway. Entity Authentication and Key Distribution. In Advances in Cryptology - Crypto '93, Lecture Notes in Computer Science 773, pp. 232–249.
[4] M. Bellare and P. Rogaway. Provable Secure Session Key Distribution-The Three Party Case. In 27th ACM Symposium on the Theory of Computing, May 1995.
[5] S. Berkovits. How to Broadcast a Secret. In Advances in Cryptology - Eurocrypt '91, Lecture Notes in Computer Science 547, pp. 536-541.
[6] S. Blake-Wilson and A. Menezes. Entity Authentication and Authenticated Key Transport Protocols Employing Asymmetric Techniques. In the Security Protocols Workshop '97.
[7] R. Blom. Non-Public Key Distribution. In Advances in Cryptology - Crypto '82, Plenum Press, pp. 231-236.
[8] C. Blundo, L. Frota Mattos, and D. Stinson. Trade-offs Between Communication and Storage in Unconditionally Secure Schemes for Broadcast Encryption and Interactive Key Distribution. In Advances in Cryptology - Crypto '96, Lecture Notes in Computer Science 1109, pp. 387–400.
[9] C. Blundo, A. De Santis, A. Herzberg, S. Kutten, U. Vaccaro, and M. Yung. Perfectly secure key distribution for dynamic conferences. In Information and Computation, 146 (1), 1998, pp. 1-23.
[10] D. Boneh and M. Franklin. An Efficient Public Key Traitor Tracing Scheme. In Advances in Cryptology - Crypto '99, Lecture Notes in Computer Science 1666, pp. 338–353.
[11] R. Canetti, J. Garay, G. Itkis, D. Micciancio, M. Naor, and B. Pinkas. Multicast Security: A Taxonomy and Some Efficient Constructions. In IEEE INFOCOM, 2 (March 1999), pp. 708–716.
[12] R. Canetti, T. Malkin, and K. Nissim. Efficient Communication-Storage Tradeoffs for Multicast Encryption. In Advances in Cryptology - Eurocrypt '99, Lecture Notes in Computer Science 1592, pp. 459–474.
[13] T. Cover and J. Thomas. Elements of Information Theory. John Wiley and Sons, Inc., 1991.
[14] G. Davida, Y. Desmedt, and R. Peralta. A Key Distribution System Based on Any One-Way Function. In Advances in Cryptology - Eurocrypt '89, Lecture Notes in Computer Science 434, pp. 75-79.
[15] C. Dwork, J. Lotspiech, and M. Naor. Digital Signets: Self-Enforcing Protection of Digital Information. In the ACM Symposium on Theory of Computing (STOC), 1996.