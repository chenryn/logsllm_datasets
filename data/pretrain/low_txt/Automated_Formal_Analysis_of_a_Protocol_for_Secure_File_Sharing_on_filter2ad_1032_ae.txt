### 3. Honest Reader for Version 0
ProVerif does not exhibit the attack mentioned in [32] because it stops with a simpler attack.

### 4.3.2. Necessity of New Write Tokens for Each Version
When a writer \( w \) is allowed at version 0 and subsequently revoked without changing the write token, the server continues to accept writes from \( w \) even after its revocation (at version 1). This is because the token obtained by \( w \) at version 0 remains valid. Specifically, \( w \) can overwrite files with unreadable junk, thus destroying them after its revocation. This attack violates the correctness of server-verified writes. Additionally, \( w \) can write valid content using keys obtained at version 0, and readers can read such data using keys for version 0, believing it was written at version 0. This attack violates strong integrity.

Consequently, neither the correctness of server-verified writes nor strong integrity can be proven by ProVerif in a model where write tokens are not changed. We manually reconstruct these attacks from the derivations output by ProVerif. However, the more basic integrity property still holds in this case.

### 4.4. Additional Remarks
Below are some additional observations on the paper that describes Plutus [32]:

- **Filegroups and Sharing Attributes:**
  The following sentence appears in [32, Section 3.1]:
  > "With filegroups, all files with identical sharing attributes are grouped in the same filegroup . . ."
  Under this interpretation, each group is tied to a specific set of sharing attributes (writers and readers). If two files have the same sharing attributes after some changes, they should join the same filegroup, even if they initially belonged to different filegroups. However, such a join does not occur in Plutus.

- **Revoked Reader Access:**
  The following sentence appears in [32, Section 3.4]:
  > "A revoked reader . . . will never be able to read data updated since . . . [its] revocation."
  We clarify that if a reader is revoked at version \( v \) and colludes with a corrupt reader or writer at any \( v' > v \), or is itself a reader or writer at such \( v' \), it can read data updated in the interval \( v + 1, \ldots, v' \).

- **Writers and Lockbox Keys:**
  The following sentence appears in [32, Section 3.5.2]:
  > "If the writers have no read access, then they never get the . . . [lockbox key], and so it is hard for them to determine the file-verify key from the file-sign key."
  This claim is incorrect. Writers always receive the lockbox key (to encrypt data), and thus they can always construct the verify key, just as readers can.

- **Integrity of File Contents:**
  The following sentence appears in [32, Section 3.2]:
  > "In order to ensure the integrity of the contents of the files, a cryptographic hash of the file contents is signed . . ."
  We clarify that the contents should be signed after being encrypted (as in our model) for security in the computational model of cryptography. Signing encrypted contents allows the use of a weaker encryption scheme, which needs only to be IND-CPA (indistinguishable under chosen plaintext attacks), with the signature providing integrity of the ciphertext. Signing unencrypted contents requires a stronger security assumption for the encryption scheme, allowing the adversary to call the decryption oracle. This point is similar to the fact that when the encryption is IND-CPA and the MAC is UF-CMA (unforgeable under chosen message attacks), encrypt-then-MAC (where the MAC is applied to the ciphertext) guarantees the secrecy of the plaintext, while encrypt-and-MAC (where the MAC is applied to the plaintext) does not [9]. Here, the signature plays the role of the MAC.

- **Key Rotation Scheme:**
  As noted in [26, Section 3], the key rotation scheme in [32] is not provable in the computational model of cryptography under reasonable assumptions (one-wayness of RSA and IND-CPA symmetric encryption). A key obtained by unwinding is not indistinguishable from a random key when one has access to other wound versions of this key. This problem is out of scope for our verification since we work in the Dolev-Yao model of cryptography. Recently, several other rotation schemes have been proposed, and their cryptographic security properties have been formally studied [6, 7, 26]. The attacks discussed in this section do not depend on the specific scheme for generating, winding, and unwinding lockbox keys. Our results hold even if we change the rotation scheme to a hash-chaining scheme [26, Section 5.1], or if lockbox keys are hashed before they are used for encryption, as proposed in [26, Section 5.3] and [7, Section 4.2] to correct the key rotation scheme in [32].

The scripts used in this paper are available at http://www.soe.ucsc.edu/∼avik/projects/plutus/.

### 5. Conclusion
We have formally studied an interesting, state-of-the-art protocol for secure file sharing on untrusted storage (in the file system Plutus) and analyzed its security properties in detail using the automatic verifier ProVerif. Our study demonstrates that protocols for secure storage are worth analyzing. Indeed, the analysis greatly improves our understanding of the protocol; we formally specify and verify its security properties, find (and fix) some unknown attacks, and clarify some design details that may be relevant for other storage protocols. Working in the Dolev-Yao model allows a deep analysis of the security consequences of some promising new features of the protocol. At the same time, some consequences remain beyond the scope of a Dolev-Yao analysis. It would be interesting to study those consequences in the computational model, perhaps using an automated verifier like CryptoVerif [10, 13]. Unfortunately, our initial attempts at modeling the protocol in CryptoVerif indicate that the tool is presently not mature enough to prove the relevant properties. We therefore postpone that study until tools for proofs in the computational model are more developed.

Over the years, storage has assumed a pervasive role in modern computing, and understanding secure storage has become as important as understanding secure communication. The study of secure communication has taught us the importance of rigor in the design and analysis of protocols. This observation certainly applies to secure storage as well. To our knowledge, we are the first to present an automated formal analysis of a secure storage protocol. Our approach should be fruitful for other secure storage protocols, and we expect to see further work in this new area.

### Acknowledgments
We would like to thank Martín Abadi for helpful discussions on this work and comments on a draft of this paper. Bruno Blanchet’s work was partly supported by the ANR project ARA SSIA FormaCrypt. Avik Chaudhuri’s work was partly supported by the National Science Foundation under Grants CCR-0208800 and CCF-0524078.

### References
[1] M. Abadi. Secrecy by typing in security protocols. Journal of the ACM, 46(5):749–786, 1999.
[2] M. Abadi and B. Blanchet. Analyzing security protocols with secrecy types and logic programs. Journal of the ACM, 52(1):102–146, 2005.
[3] M. Abadi and C. Fournet. Mobile values, new names, and secure communication. In Proc. ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL’01), pages 104–115. ACM, 2001.
[4] M. Abadi and A. D. Gordon. A calculus for cryptographic protocols: The spi calculus. Information and Computation, 148(1):1–70, 1999.
[5] X. Allamigeon and B. Blanchet. Reconstruction of attacks against cryptographic protocols. In Proc. IEEE Computer Security Foundations Workshop (CSFW’05), pages 140–154. IEEE, 2005.
[6] M. Backes, C. Cachin, and A. Oprea. Lazy revocation in cryptographic file systems. In Proc. IEEE Security in Storage Workshop (SISW’05), pages 1–11. IEEE, 2005.
[7] M. Backes, C. Cachin, and A. Oprea. Secure key-updating for lazy revocation. In Proc. European Symposium on Research in Computer Security (ESORICS’06), volume 4189 of LNCS, pages 327–346. Springer, 2006.
[8] M. Backes, A. Cortesi, and M. Maffei. Causality-based abstraction of multiplicity in security protocols. In Proc. IEEE Computer Security Foundations Symposium (CSF’07), pages 355–369. IEEE, 2007.
[9] M. Bellare and C. Namprempre. Authenticated encryption: Relations among notions and analysis of the generic composition paradigm. In Proc. International Conference on the Theory and Application of Cryptology & Information Security (ASIACRYPT’00), volume 1976 of LNCS, pages 531–545. Springer, 2000.
[10] B. Blanchet. A computationally sound mechanized prover for security protocols. IEEE Transactions on Dependable and Secure Computing. To appear. Technical report version available as ePrint Report 2005/401, http://eprint.iacr.org/2005/401.
[11] B. Blanchet. An efficient cryptographic protocol verifier based on Prolog rules. In Proc. IEEE Computer Security Foundations Workshop (CSFW’01), pages 82–96. IEEE, 2001.
[12] B. Blanchet. From secrecy to authenticity in security protocols. In Proc. International Static Analysis Symposium (SAS’02), volume 2477 of LNCS, pages 342–359. Springer, 2002.
[13] B. Blanchet. Computationally sound mechanized proofs of correspondence assertions. In Proc. IEEE Computer Security Foundations Symposium (CSF’07), pages 97–111. IEEE, 2007. Extended version available as ePrint Report 2007/128, http://eprint.iacr.org/2007/128.
[14] B. Blanchet. Automatic verification of correspondences for security protocols. Report arXiv:0802.3444v1, 2008. Available at http://arxiv.org/abs/0802.3444v1.
[15] M. Blaze. A cryptographic file system for Unix. In Proc. ACM Conference on Computer and Communications Security (CCS’93), pages 9–16. ACM, 1993.
[16] C. Bodei, M. Buchholtz, P. Degano, F. Nielson, and H. R. Nielson. Static validation of security protocols. Journal of Computer Security, 13(3):347–390, 2005.
[17] D. Boneh. Twenty years of attacks on the RSA cryptosystem. Notices of the American Mathematical Society, 46(2):203–213, 1999.
[18] A. Chaudhuri. Dynamic access control in a concurrent object calculus. In Proc. International Conference on Concurrency Theory (CONCUR’06), pages 263–278. Springer, 2006.
[19] A. Chaudhuri. On secure distributed implementations of dynamic access control. Technical Report UCSC-CRL-08-01, University of California at Santa Cruz, 2008.
[20] A. Chaudhuri and M. Abadi. Formal security analysis of basic network-attached storage. In Proc. ACM Workshop on Formal Methods in Security Engineering (FMSE’05), pages 43–52. ACM, 2005.
[21] A. Chaudhuri and M. Abadi. Formal analysis of dynamic, distributed file-system access controls. In Proc. IFIP WG6.1 Conference on Formal Techniques for Networked and Distributed Systems (FORTE’06), volume 4229 of LNCS, pages 99–114. Springer, 2006.
[22] A. Chaudhuri and M. Abadi. Secrecy by typing and file-access control. In Proc. IEEE Computer Security Foundations Workshop (CSFW’06), pages 112–123. IEEE, 2006.
[23] D. E. Denning and G. M. Sacco. Timestamps in key distribution protocols. Communications of the ACM, 24(8):533–536, 1981.
[24] D. Dolev and A. C. Yao. On the security of public key protocols. IEEE Transactions on Information Theory, 29(12):198–208, 1983.
[25] K. Fu. Group sharing and random access in cryptographic storage file systems. Master’s thesis, Massachusetts Institute of Technology, 1999.
[26] K. Fu, S. Kamara, and Y. Kohno. Key regression: Enabling efficient key distribution for secure distributed storage. In Proc. Network and Distributed System Security Symposium (NDSS’06). Internet Society (ISOC), 2006.
[27] H. Gobioff, G. Gibson, and J. Tygar. Security for network attached storage devices. Technical Report CMU-CS-97-185, Carnegie Mellon University, 1997.
[28] E.-J. Goh, H. Shacham, N. Modadugu, and D. Boneh. SiRiUS: Securing remote untrusted storage. In Proc. Network and Distributed System Security symposium (NDSS’03), pages 131–145. Internet Society (ISOC), 2003.
[29] A. Gordon and A. Jeffrey. Authenticity by typing for security protocols. Journal of Computer Security, 11(4):451–521, 2003.
[30] S. Halevi, P. A. Karger, and D. Naor. Enforcing confinement in distributed storage and a cryptographic model for access control. Cryptology ePrint Archive, Report 2005/169, 2005. Available at http://eprint.iacr.org/2005/169.
[31] M. Kallahalla, E. Riedel, and R. Swaminathan. System for enabling lazy-revocation through recursive key generation. United States Patent 7203317. Details available online at http://www.freepatentsonline.com/7203317.html, 2007.
[32] M. Kallahalla, E. Riedel, R. Swaminathan, Q. Wang, and K. Fu. Plutus: Scalable secure file sharing on untrusted storage. In Proc. USENIX Conference on File and Storage Technologies (FAST’03), pages 29–42. USENIX, 2003.
[33] G. Lowe. Breaking and fixing the Needham-Schroeder public-key protocol using FDR. In Proc. Tools and Algorithms for the Construction and Analysis of Systems (TACAS’96), volume 1055 of LNCS, pages 147–166. Springer, 1996.
[34] D. Mazières and D. Shasha. Building secure file systems out of Byzantine storage. In Proc. ACM Symposium on Principles of Distributed Computing (PODC’02), pages 108–117. ACM, 2002.
[35] E. L. Miller, W. E. Freeman, D. D. E. Long, and B. C. Reed. Strong security for network-attached storage. In Proc. USENIX Conference on File and Storage Technologies (FAST’02), pages 1–14. USENIX, 2002.
[36] D. Naor, A. Shenhav, and A. Wool. Toward securing untrusted storage without public-key operations. In Proc. ACM Workshop on Storage Security and Survivability (StorageSS’05), pages 51–56. ACM, 2005.
[37] L. C. Paulson. The inductive approach to verifying cryptographic protocols. Journal of Computer Security, 6(1–2):85–128, 1998.
[38] M. Pistoia, A. Banerjee, and D. A. Naumann. Beyond stack inspection: A unified access-control and information-flow security model. In Proc. IEEE Symposium on Security and Privacy (S&P’07), pages 149–163. IEEE, 2007.
[39] R. Rivest, A. Shamir, and L. Adleman. A method for obtaining digital signatures and public key cryptosystems. Communications of the ACM, 21(2):120–126, 1978.
[40] D. Wagner and B. Schneier. Analysis of the SSL 3.0 protocol. In Proc. USENIX Workshop on Electronic Commerce, pages 29–40. USENIX, 1996.
[41] T. Y. C. Woo and S. S. Lam. A semantic model for authentication protocols. In Proc. IEEE Symposium on Security and Privacy (S&P’93), pages 178–194. IEEE, 1993.
[42] L. Zheng and A. Myers. Dynamic security labels and noninterference. In Proc. IFIP WG1.7 Workshop on Formal Aspects in Security and Trust (FAST’04), pages 27–40. Springer, 2004.