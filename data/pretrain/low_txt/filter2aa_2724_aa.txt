# About Me
- **Seth Fogie, VP of Airscanner**
- **Airscanner Mobile Security**
  - Mobile AntiVirus
  - Mobile Encrypter
  - And more to come...
- **Author**
  - *Security Warrior*
  - *Maximum Wireless Security*
  - InformIT.com Security Section

## Overview
- Basic Security Issues
- Conceal A Backdoor Wizard
- Keyboard Logger
- Reverse Engineering Overview
- The Invisible Spy
- The Backdoor FTP Server
- Hard Reset Code Extract
- Windows Mobile Buffer Overflow
- Miscellaneous Attacks
- Protections and Preventions

### Basic Security Issues
- Inherently lacking in security
- Lost, stolen, repaired, or sold PDAs
- Password issues:
  - Stored in the registry. CPL swap. Brute force.
- Biometrics
- Bluetooth/IR issues
- Wi-Fi issues
- ActiveSync DoS (connect/disconnect on port 5679)
- Network DoS attacks (e.g., ping -i .001)
- Forensics programs (copy RAM/ROM image)
- Hard Reset/Soft Reset DoS (more details later)
- Autorun fun with folder 2577 (demos)

### Conceal A Backdoor Wizard (Cabwiz)
- **Trojan wrapper:**
  - Conceals Trojan installation files and registry settings
  - Consolidates the installation process into one step
  - Self-extracting and self-executing
  - CAB file self-destructs
  - Created by Microsoft, guaranteed to work
- **Steps:**
  - Create Trojan files and determine registry settings
  - Follow instructions at MSDN.microsoft.com
  - .inf file contains all relevant information
  - `C:\Cabwiz fungame.inf = fungame.cab`

### What is a PDA Keyboard?
- **Windows Mobile Keyboard:**
  - Large bitmap
  - Code to define which section to load
  - Key array to define key press behavior
  - Character to be "typed"
  - Button coordinates to be "pushed"
  - Packaged as core DLL (MSIM.DLL)
  - Configured via registry settings

### Keyboard Logger
- **Challenges:**
  - Requires creation of a custom alternate keyboard
  - Installable DLL with registry settings
  - OS and OEM variations
- **Creation:**
  - Soft Input Panel Starters:
    - Programming CE .NET (sample numerical keyboard)
    - Platform Builder (sample SIP)
    - EVC4
  - SIP Code + (CreateFile, SetFilePointer, WriteFile)

### Keyboard Logger Details
- **The Code:**
  ```c
  HANDLE hfile;
  hfile = CreateFile(TEXT("\\logfile.txt"), GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_ALWAYS, FILE_ATTRIBUTE_HIDDEN, 0);
  SetFilePointer(hfile, 0, NULL, FILE_END);
  WriteFile(hfile, keyValue, keyValueSize, &dwordValue, NULL);
  CloseHandle(hfile);
  ```
- **Registry Settings:**
  - IsSIPInputMethod disabled for real keyboard
  - CLSID: 42429667-ae04-11d0-a4f8-00aa00a749b9 (set 1 to 0)
  - 'Keyboard' name & icon borrowed by keylogger.dll
  - New keyboard has its own CLSID with settings
  - HKCU\ControlPanel\SIP\DefaultIM\{CLSID}

### Keyboard Logger!
- Installed with help of Cabwiz (demo)
- Difficult to detect:
  - Hidden attribute set on WriteFile = invisible file
  - Process practically invisible

### Reverse Engineering (RVE) Overview
- OS & Hardware specifics
- Legal Issues
- RVE tools and techniques
- ARM Fundamentals
- Windows 2000 Kernel with 32 process limit
- Memory
  - RAM (Registry, Programs, Databases)
  - ROM (OS)
- eXecute In Place – Save memory (No Compression)
- Can’t break executing DLL code
- Graphics, Windowing, and Event Subsystem
- Scheduler
  - Multitasking
  - Thread level vs. process level scheduling

### Windows CE Overview
- **RVE Legal Issues:**
  - Laws
    - No person shall circumvent a technological measure that effectively controls access to a work protected under this title.
    - To "circumvent a technological measure" means to descramble a scrambled work, to decrypt an encrypted work, or otherwise avoid, bypass, remove, deactivate, or impair a technological measure, without the authority of the copyright owner.
  - Encryption Research & Security Testing
    - Identify and analyze flaws and vulnerabilities of encryption technologies applied to copyrighted works
    - Accessing a computer system solely for investigating a security flaw or vulnerability
  - I have obtained permission to RVE these programs...

- **Prerequisites:**
  - ASM (concept)
  - Hex to Binary to ASCII to Decimal
  - ARM Processor
  - Registers
  - Opcodes

### Reverse Engineering Fundamentals
- **Registers:**
  - 37 Total @ 32 bit each
  - Register purpose changes depending on mode
  - R0 – R14 + PC(R15)
  - R15(PC): Program Counter – Next address of execution
  - R14: Link Register (LR) – Holds sub-routine return address
  - R13: Stack Pointer (SP)
  - Status Flags (NZCO)
    - Negative / Less Than
    - Zero (Equal)
    - Carry / Borrow / Extend
    - Overflow

### ARM Opcodes – MOV, CMP
- **Status Flags:**
  - CMP R0, R1
  - MOVS R0, R1 / ANDS R0, R1, 0xFF
  - R0 >= R1: 1
  - R0 = R1: 1
  - R0 < R1: 0
  - C, Z, N: Pass through
  - R1 = 0: 1
  - R1 < 0: 1
  - C, Z, N: Pass through

### ARM Status Flags
- HI: C set and Z clear (unsigned higher)
- LS: C clear or Z set (unsigned lower or same)
- GE: N equals V (greater or equal)
- LT: N not equal to V (less than)
- GT: Z clear AND (N equals V) (greater than)
- LE: Z set OR (N not equal to V) (less than or equal)
- AL: (ignored) always
- EQ: Z set (equal)
- NE: Z clear (not equal)
- CS: C set (unsigned higher or same)
- CC: C clear (unsigned lower)
- MI: N set (negative)
- PL: N clear (positive or zero)
- VS: V set (overflow)
- VC: V clear (no overflow)

### ARM Opcodes – B, BL
- **Branch (B) - XX XX XX EA:**
  - BEQ: If Z = 1 (XX XX XX 0A)
  - BNE: If Z = 0 (XX XX XX 1A)
  - BMI: If N = 1 (XX XX XX 4A)
- **Branch Link (BL) - XX XX XX EB:**
  - BLEQ: If Z = 1 (XX XX XX 0B)
  - BLNE: If Z = 0 (XX XX XX 1B)

### ARM Opcodes – LDR / STR
- **Load Register (LDR) / Store Register (STR):**
  - STR R1, [R4, R6]: Store R1 in R4+R6
  - STR R1, [R4,R6]!: Store R1 in R4+R6 and write the address in R4
  - STR R1, [R4], R6: Store R1 at R4 and write back R4+R6 to R4
  - STR R1, [R4, R6, LSL#2]: Store R1 in R4+R6*2 (LSL discussed next)
  - LDR R1, [R2, #12]: Load R1 with value at R2+12
  - LDR R1, [R2, R4, R6]: Load R1 with R2+R4+R6
- **LDM/STM:**
  - STMFD SP!, {R4,R5,LR}
  - LDMFD SP!, {R4,R5,LR}
- **LDRB/STRB**

### Reverse-engineering Tools
- **Hex Editor:**
  - Needed to make changes to program files
  - UltraEdit32
- **Disassembler:**
  - Converts program file into ASM code
  - IDA Pro
- **Debugger:**
  - USB connection SLOW! (Pocket Hosts + W/LAN)
  - Allows real-time execution and walk-through of code
  - Microsoft eMbedded Visual C++ 3/4

### The Invisible Spy
- **vRemote 3.0 (permission obtained to RVE):**
  - Remotely control or view PDA from PC (VNC)
  - Legitimate program with valid purpose
  - Standard installer
  - Registry settings
  - Listed in Running Programs List
  - But what if I don’t want it to be visible?

### The Invisible Spy - RVE Example 1.1
- **Locate window create functions (DEMO START):**
  - CreateWindowEx
  - HWND CreateWindow( LPCTSTR lpClassName, LPCTSTR lpWindowName, DWORD dwStyle, int x, int y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HANDLE hInstance, PVOID lpParam );
  - **dwStyle:**
    - WS_MAXIMIZE, WS_MINIMIZE, WS_POPUP, WS_VISIBLE, etc.
  - **Winuser.h:**
    - #define WS_MAXIMIZE 0x1000000
    - #define WS_MINIMIZE 0x20000000
    - #define WS_POPUP 0x80000000
    - #define WS_VISIBLE 0x10000000

### The Invisible Spy - RVE Example 1.2
- **General RVE process:**
  - Load it in Disassembler
  - Locate needed files
  - Note names of functions
    - CreateWindowEx
    - MessageBoxW
    - wcscmp
    - Wcslen
  - Find target (demo-CreateWindowEx)
  - Change Visible to Minimize

### The Invisible Spy – NOP
- NOP does not technically exist
- 0x90 = UMULLS
- Opcode that does nothing?