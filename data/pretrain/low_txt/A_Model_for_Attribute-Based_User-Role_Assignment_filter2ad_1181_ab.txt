### 用户属性表达式与角色分配规则

- **用户资格**：具有属性表达式 \( \text{Attribute\_Expression}_i \) 的用户有权获得由该属性表达式指定的角色。
- **规则优先级**：规则 \( \text{Rule}_i \)（带有属性表达式 \( \text{Attribute\_Expression}_i \)）比规则 \( \text{Rule}_j \)（带有属性表达式 \( \text{Attribute\_Expression}_j \)）更高级，当且仅当 \( \text{Attribute\_Expression}_i \geq \text{Attribute\_Expression}_j \)。
- **继承关系**：高级规则继承其所有低级规则产生的角色。尽管这种处理方式直观，但会引入两个问题，我们将在下文非正式地描述。

#### 问题1：冗余
当一个高级规则产生了一个或一组由低级规则已经产生的角色时，就会出现冗余。图4展示了冗余规则的示例。在图中，垂直箭头表示优先级的方向。例如，在案例1中，规则1比规则2更高级，并产生了角色2。然而，规则2产生了角色1，而角色1又比角色2更高级。换句话说，满足规则1属性的用户可以直接通过规则2获得角色1，或者间接地通过调用规则1来继承角色2。删除高级规则可以消除冗余，而不减少用户应获得的角色和权限。同样的解决方案适用于案例2和3。

#### 问题2：不一致性
多个场景可能导致规则集不一致，如图5所示。其中一个原因是角色之间的互斥性。我们区分两种类型的互斥角色：
- **全局互斥**：必须在整个分配规则中或在没有优先级关系的规则之间遵守的角色互斥。在这种情况下，需要使用约束条件。假设企业安全策略认为角色1和角色2是互斥的。用户可能试图通过提供满足规则1的属性，然后立即提供满足规则2的属性来同时激活这两个角色。为防止这种情况，案例1中的规则可以如下表达：
  - 规则1：\( \text{Attribute Expression for Rule 1} \) 附加条件 \( \text{用户未当前注册角色2} \rightarrow \text{角色1} \)
  - 规则2：\( \text{Attribute Expression for Rule 2} \) 附加条件 \( \text{用户未当前注册角色1} \rightarrow \text{角色2} \)

- **局部互斥**：必须在通过优先级关系关联的分配规则中遵守的角色互斥。案例3中的不一致性是由于明确违反了安全策略，可以通过删除高级规则并重写低级规则来解决：
  - 规则2：\( \text{角色1 XOR 角色2} \)

### 在线娱乐商店案例
一个在线娱乐商店提供电影、游戏、纪录片等。内容根据一个假设的评级系统进行分级，如表1所示。使用RBAC术语，级别对应于角色，进而对应于权限。在这个例子中，角色是完全有序的。当用户登录时，他们提供的属性决定了他们可以获得的最高级别。为了讨论方便，我们将考虑两个属性：用户的年龄和请求服务的国家。

#### 属性表示
- **年龄**：表2显示了不同年龄段用户被分配到的角色。使用语言，网站管理员可以指定以下非终端项：
  - 属性 ::= 年龄
  - 属性值 ::= 3, 11, 16, 18
  - 角色 ::= 儿童 | 少年 | 青少年 | 成人

生成的规则如下：
  - 规则1：\( \text{年龄} \geq 3 \) → 儿童
  - 规则2：\( \text{年龄} \geq 11 \) → 少年
  - 规则3：\( \text{年龄} \geq 16 \) → 青少年
  - 规则4：\( \text{年龄} \geq 18 \) → 成人

- **国家**：不同国家对公民访问视觉材料有不同的法律规定。基于我们的评级系统，构建表3，显示了国家与角色之间的假设联系。集合 {A..Z} 包含世界上所有国家。

表3 显示了国家与角色之间的假设联系。使用语言，网站管理员可以指定以下非终端项：
  - 属性 ::= 国家
  - 集合 ::= {A..Z} | {{A..Z} – {沙特, 苏丹}} | {{A..Z} – {中国, 印度, 沙特, 苏丹, 埃及, 印尼, 马来西亚, 新加坡}}
  - 角色 ::= 少年 | 青少年 | 成人

生成的规则如下：
  - 规则1：\( \text{国家} \in \{A..Z\} \) → 少年
  - 规则2：\( \text{国家} \in \{{A..Z} – \{沙特, 苏丹\}\} \) → 青少年
  - 规则3：\( \text{国家} \in \{{A..Z} – \{中国, 印度, 沙特, 苏丹, 埃及, 印尼, 马来西亚, 新加坡\}\} \) → 成人

如果在线商店的安全策略要求同时考虑年龄和地理位置，则可以使用模型提供的语言指定以下规则：
  - 规则1：\( (\text{年龄} \geq 3) \land (\text{国家} \in \{A..Z\}) \) → 儿童
  - 规则2：\( (\text{年龄} \geq 11) \land (\text{国家} \in \{A..Z\}) \) → 少年
  - 规则3：\( (\text{年龄} \geq 16) \land (\text{国家} \in \{{A..Z} – \{沙特, 苏丹\}\}) \) → 青少年
  - 规则4：\( (\text{年龄} \geq 18) \land (\text{国家} \in \{{A..Z} – \{中国, 印度, 沙特, 苏丹, 埃及, 印尼, 马来西亚, 新加坡\}\}) \) → 成人

### 实现优先级层次
假设娱乐商店的安全官员为属性值分配了优先级级别，如表4所示。基于以上信息，如果客户拥有属性表达式 \( (\text{年龄} \geq 16) \land (\text{国家} \in \{A..Z\}) \)，则触发规则2，客户获得少年角色，因为：
  - 年龄值 (16) 优于年龄值 (11)
  - 客户的属性 "国家" 与规则2所需值相同

### 使用语言实现MAC
我们上面介绍的语言可用于实现MAC。在视觉娱乐商店案例中，我们可以假设有一个类似于图6的安全格。在这个例子中，强制执行简单安全属性，以便客户（MAC术语中的“主体”）可以查看（读取）安全标签不超过其许可级别的材料。客户还可以对商店提供的材料发表评论或提出查询。例如，成人级别的客户可以对其级别的材料发表评论。如果他想对儿童级别的材料发表评论，他必须以儿童级别的主体身份登录。儿童级别的客户不能撰写成人级别的评论，因此强制执行严格的 *- 属性。

### 角色层次结构
Osborn等人在[10]中展示了图6中的格可以转换为两个角色层次结构，如图7所示。在这种情况下，我们有以下构造：
  - 角色 = {成人读, 少年读, 青少年读, 儿童读, 成人写, 少年写, 青少年写, 儿童写}
  - 角色层次结构包括两个独立的部分。第一部分是“读”角色的层次结构：{成人读, 少年读, 青少年读, 儿童读}。这个层次结构具有与支配关系（≥ 如MAC中）相同的偏序。第二部分是由不可比较的“写”角色组成：{成人写, 少年写, 青少年写, 儿童写}。
  - 用户分配约束：每个用户被分配到恰好两个角色：xR 和 xW，其中 x 是分配给用户的安全标签。

使用我们定义的语言，我们可以指定：
  - 角色 ::= 成人读 | 少年读 | 青少年读 | 儿童读 | 成人写 | 少年写 | 青少年写 | 儿童写
  - 每个读角色都有一个对应的写角色，用户必须同时拥有这两个角色才能正常工作。