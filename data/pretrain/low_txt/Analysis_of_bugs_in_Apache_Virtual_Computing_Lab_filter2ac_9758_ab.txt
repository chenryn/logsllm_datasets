### Feature in a Specific Version of VCL

The report includes several entries such as issue description, status, assignee, reporter, and the dates when the issue was found and resolved. It also includes details on code modifications. For our analysis, we only considered resolved bugs to ensure the information is stable. Some bugs are well-documented with detailed descriptions, while others are minimally described, duplicates, or sub-issues of main bugs. In some cases, fixes for these minor issues are included in the resolution of the main bugs.

From the initial notification in January 2009 until May 2012, we filtered out 146 bugs from a total of 202. Therefore, the elements of set T are the 146 dates (year, month, day, hour, minutes) when each report was created.

### Analysis of Classified Bugs in Apache VCL

In this section, we describe the analysis of classified bugs in Apache VCL. We first analyze the bugs over time and show their distribution across the classification sets. Then, we describe the relationships among the different classification sets.

#### A. Bugs Found Over Time

Figure 3 illustrates the number of bugs reported per month, with black lines indicating the release dates of new software versions. The highest number of bugs is typically found during the initial release. Conversely, the period with the fewest bugs is after September 2011, when testing for the last release (version 2.3) began, though it had not yet been released.

Figure 4 shows the cumulative number of bugs found for each release of Apache VCL. The cumulative number decreases from the oldest version to the most recent one. The initial slope of the curves also decreases, indicating a reduction in the frequency of bug discovery from version 2.0 to 2.3.

#### B. Component Percentages

Figure 5a displays the percentage of bugs across the components of the generic Cloud model. The Front End (FE) is the component where the majority of bugs are discovered. It is noteworthy to observe the breakdown of bugs among the components that constitute the back end of a Cloud platform. Among these, the Provisioning Engine (PE) has the most bugs. This may be due to PE's interaction with third-party components (e.g., hypervisors) and its need to comply with vendor-specific requirements. Additionally, in VCL, PE performs typical functionalities of the Storage System (SS) and Network Management (NM), which are not implemented separately (see Section IV-A).

#### C. Phase Percentages

Figure 5b shows the percentage of bugs found across the phases of the Cloud service. Most bugs are discovered during the use of management functionalities. This can be attributed to the fact that many bug reporters are developers and administrators of academic systems based on VCL who extensively use management functionalities (which are not used by the consumer). Another reason could be the number of functionalities performable during this phase. A significant percentage of bugs is also discovered during the operational phase, after the service is made available to the consumer. Across all phases, deprovisioning is the phase during which the fewest bugs are found. It is worth noting that only 23% of bugs are discovered during the authentication or submission phase. Intuitively, these phases are linked to the FE component. However, 42% of bugs are found in FE, as shown in Figure 5a. This indicates that, apart from the authentication or submission phase, bugs in FE are also discovered during other phases of the service life cycle. More details on the relationships among the elements of the component and phase sets are provided in Section V-E.

#### D. Defect Type Percentages

As shown in Figure 5c, 33% of the bugs are algorithm defects. 14% of the analyzed bugs require a design change of the software system (function defect type). In total, 51% of the bugs need changes to assignments or checkings only. Interestingly, similar percentages of bugs among possible defect types are reported in [13] and [23] when analyzing different kinds of software.

#### E. Relations among the Classification Sets

**Components and Phases:**
The relationships among the elements in the component set and the phase set can help determine how a bug in a specific component is likely to be discovered during a certain phase of the Cloud service. Table II reports the conditional probabilities that a bug is discovered during a Cloud service phase given that it is in a specific Cloud component. As observed in Section V-C, bugs in FE are discovered not only during the authentication and submission phases but also significantly during the management phase. This suggests the need for thorough testing of the management functionalities of the FE component. For PE, apart from the provisioning phase, the submission and operational phases are also important. In contrast, the percentage of bugs discovered during the deprovisioning and management phases is very small for PE. Nevertheless, the relationships among phases and ODC defect types, and components and ODC defect types (not reported for space limitations) show that 22% of bugs found in PE require design changes, and about 12% of bugs discovered during the management phase require design changes. Hence, the few bugs in PE found during management operations might require significant effort for debugging. Such information can be used to properly select developers for the debugging of management functionalities.

**Components and Time:**
The cumulative number of bugs found per component, shown in Figure 6, provides additional information on components that may still require testing efforts [14]. The cumulative number of bugs found in PE appears to level off over time, while the trend for FE is still growing (polynomial fitting is very close to a line with slope m = 1.44). This indicates that more testing effort is required for the FE, where, in the next release, most of the bugs are likely to be discovered. Considering the cumulative number of bugs found in FE for releases from 2.0 to 2.2 (Figure 7), the lines fitting the initial part of the curves are quite parallel (slopes are similar). This means that, in VCL, the reliability of FE does not significantly change from one version to another, necessitating additional testing and debugging activities before releasing a new version [3].

### Conclusions and Future Research

We presented an empirical bug analysis of Apache VCL, a representative open-source Cloud platform. The classification and analysis of the software bugs are based on components, phases, defect types, and the date of reporting, along with the relationships among them. Field data from the considered Cloud platform provide useful insights for the responsible organization and developers to improve development and testing activities. The analysis identifies the components where bugs are likely to be found in future releases of VCL, the phases of the service life cycle during which such bugs may be discovered, and the modifications required to resolve them. Interestingly, the percentages of ODC defect types found for Apache VCL are consistent with previously reported results on different software systems. In the future, we will apply the proposed approach to other open-source Cloud platforms to compare results and identify bug trends.

### Acknowledgments

Research by Flavio Frattini and Marcello Cinque has been partially supported by the TENACE PRIN Project (n. 20103P34XC) funded by the Italian Ministry of Education, University, and Research, and by the MINIMINDS PON Project (n. B21C12000710005) funded by the Italian Ministry of University and Research. The authors would like to thank Prof. D. Cotroneo, Prof. S. Russo, Prof. M. Vouk, and A. Peeler for their help during various phases of this project.