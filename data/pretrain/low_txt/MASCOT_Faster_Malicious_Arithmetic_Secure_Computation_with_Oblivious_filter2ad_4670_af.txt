### Completeness Theorem for Protocols with Honest Majority
In *Proceedings of the 19th Annual ACM Symposium on Theory of Computing* (1987), pp. 218–229.

### Pseudo-Random Generation from One-Way Functions (Extended Abstract)
**Authors:** Russell Impagliazzo, Leonid A. Levin, and Michael Luby  
In *Proceedings of the 21st Annual ACM Symposium on Theory of Computing*, May 14-17, 1989, Seattle, Washington, USA, pp. 12–24.

### Intel Intrinsics Guide
**Source:** Intel  
**URL:** https://software.intel.com/sites/landingpage/IntrinsicsGuide  
**Accessed:** February 2016

### Extending Oblivious Transfers Efficiently
**Authors:** Yuval Ishai, Joe Kilian, Kobbi Nissim, and Erez Petrank  
In *Advances in Cryptology - CRYPTO 2003*, pp. 145–161.

### Secure Arithmetic Computation with No Honest Majority
**Authors:** Yuval Ishai, Manoj Prabhakaran, and Amit Sahai  
In *Reingold [41]*, pp. 294–314.

### Secure Floating Point Arithmetic and Private Satellite Collision Analysis
**Authors:** Liina Kamm and Jaak Willemson  
*International Journal of Information Security* 14, 6 (2015), pp. 531–548.

### Actively Secure OT Extension with Optimal Overhead
**Authors:** Marcel Keller, Emmanuela Orsini, and Peter Scholl  
In *Advances in Cryptology - CRYPTO 2015, Part I*, pp. 724–741.

### Multiparty Computation with SPDZ Online Phase and MASCOT Offline Phase
**Authors:** Marcel Keller, Dragos Rotaru, Peter Scholl, and Nigel P. Smart  
**URL:** https://github.com/bristolcrypto/SPDZ-2  
**Year:** 2016

### An Architecture for Practical Actively Secure MPC with Dishonest Majority
**Authors:** Marcel Keller, Peter Scholl, and Nigel P. Smart  
In *ACM Conference on Computer and Communications Security* (2013), pp. 549–560.

### Billion-Gate Secure Computation with Malicious Adversaries
**Authors:** Benjamin Kreuter, Abhi Shelat, and Chih-hao Shen  
In *Proceedings of the 21st USENIX Conference on Security Symposium* (2012), USENIX Association, pp. 14–14.

### Dishonest Majority Multi-Party Computation for Binary Circuits
**Authors:** Enrique Larraia, Emmanuela Orsini, and Nigel P. Smart  
In *Advances in Cryptology - CRYPTO 2014, Part II* (2014), pp. 495–512.

### Blazing Fast 2PC in the Offline/Online Setting with Security for Malicious Adversaries
**Authors:** Yehuda Lindell and Benny Pinkas  
In *Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security* (2015), pp. 579–590.

### Generating Strong One-Way Functions with a Cryptographic Algorithm
**Authors:** Stephen M. Matyas, Carl H. Meyer, and John Oseas  
*IBM Technical Disclosure Bulletin* 27, 10A (1985), pp. 5658–5659.

### What is SSE Good For? Transposing a Bit Matrix
**Author:** mischasan  
**URL:** https://mischasan.wordpress.com/2011/07/24/what-is-sse-good-for-transposing-a-bit-matrix  
**Accessed:** February 2016

### A New Approach to Practical Active-Secure Two-Party Computation
**Authors:** Jesper Buus Nielsen, Peter Sebastian Nordholt, Claudio Orlandi, and Srinivas Vivek  
In *Advances in Cryptology–CRYPTO 2012*, Springer, 2012, pp. 681–700.

### LEGO for Two-Party Secure Computation
**Authors:** Jesper Buus Nielsen and Claudio Orlandi  
In *Reingold [41]*, pp. 368–386.

### A Framework for Efficient and Composable Oblivious Transfer
**Authors:** Chris Peikert, Vinod Vaikuntanathan, and Brent Waters  
In *Advances in Cryptology - CRYPTO 2008*, pp. 554–571.

### Phasing: Private Set Intersection Using Permutation-Based Hashing
**Authors:** Benny Pinkas, Thomas Schneider, Gil Segev, and Michael Zohner  
In *24th USENIX Security Symposium, USENIX Security 15* (2015), pp. 515–530.

### Faster Private Set Intersection Based on OT Extension
**Authors:** Benny Pinkas, Thomas Schneider, and Michael Zohner  
In *Proceedings of the 23rd USENIX Security Symposium* (2014), pp. 797–812.

### Theory of Cryptography, 6th Theory of Cryptography Conference, TCC
**Editor:** Oded Reingold  
*Volume:* 5444 of Lecture Notes in Computer Science, Springer, 2009.

### Multiple Precision Integers and Rationals
**Source:** The MPIR Team  
**URL:** https://www.mpir.org  
**Accessed:** February 2016

### How to Generate and Exchange Secrets (Extended Abstract)
**Author:** Andrew C. Yao  
In *27th Annual Symposium on Foundations of Computer Science* (1986).

## Security of the ΠCOPEe Protocol

### Lemma 1
The protocol ΠCOPEe securely implements FCOPEe in the OT-hybrid model with computational security parameter λ.

### Proof
We construct a simulator S such that for any adversary A who corrupts one party, and any environment Z who chooses both parties’ inputs and sees all outputs, Z cannot distinguish between a real execution of the protocol between A and an honest party, or a simulated execution of the protocol between S and the ideal functionality FCOPEe.

#### Case 1: Corrupt PB
1. **Initialize Stage:**
   - S samples random seeds \(\{(k_{i,0}, k_{i,1})\}_{i=1}^{\lambda}\) and sends \(k_{i, \Delta_i}\) to FCOPEe.
   - S simulates the honest PA's messages \(u_i\) with uniformly random values \(\tilde{u}_i \in \mathbb{F}\).
   - S computes \(q\) as an honest PB would in the protocol and sends \(q\) to FCOPEe.

2. **Extend Stage:**
   - S continues to simulate the honest PA's messages \(u_i\) with uniformly random values \(\tilde{u}_i \in \mathbb{F}\).

3. **Indistinguishability:**
   - We argue indistinguishability by defining a sequence of hybrid experiments \(H_1, \ldots, H_{\lambda+1}\).
   - In \(H_1\), Z interacts with the real world protocol.
   - In \(H_h\) (for \(2 \leq h \leq \lambda\)), values \(u_1, \ldots, u_{h-1}\) are sampled uniformly at random, while for \(i \geq h\), \(u_i\) is computed as in \(H_1\).
   - In \(H_{\lambda+1}\), all \(u_i\) values sent to Z during Extend are uniformly random.
   - Claim: Hybrids \(H_h\) and \(H_{h+1}\) are indistinguishable, for every \(1 \leq h \leq \lambda\).

#### Case 2: Corrupt PA
1. **Initialize Stage:**
   - S receives and stores the seeds \(\{(k_{i,0}, k_{i,1})\}_{i=1}^{\lambda}\) from the corrupt PA.
   - S uses these seeds and the PRF to compute \(t_i\) and \(u_i\) as in the protocol.

2. **Extend Stage:**
   - S extracts the inputs by computing \(x_i = u_i - t_{i,0}\) and sends \(t, x\) to the FCOPEe functionality.

Since no messages are sent to the adversary, and all outputs are computed identically in both worlds, the real and ideal worlds are perfectly indistinguishable.

## Authentication and MAC Checking Security Proof

### Theorem 6
The protocol \(\Pi_{\langle \cdot \rangle}\) securely implements \(F_{\langle \cdot \rangle}\) in the \((FCOPEe, FComm, FRand)\)-hybrid model with statistical security parameter \(\log |F| - 2 \log \log |F|\).

### Proof
We describe a simulator S that interacts with \(F_{\langle \cdot \rangle}\) such that no environment Z can distinguish between an interaction with S and \(F_{\langle \cdot \rangle}\) and an interaction with the real adversary A and \(\Pi_{\langle \cdot \rangle}\).

#### Simulating the Initialize Phase
- Emulate FCOPEe instances between every pair of corrupt party \(P_i\) and honest party \(P_j\).
- Sample \(\Delta(i, j) \leftarrow \mathbb{F}\) for all \(i \notin A\).

#### Simulating the Input Phase
- If \(P_j\) is corrupted:
  - Emulate communication channels and instances of FCOPEe with honest parties \(P_i\).
  - Receive \(x(i,j)_h\) from the adversary and set it to the input of \(P_j\).
  - Sample \(r \leftarrow \mathbb{F}^{l+1}\) to emulate FRand.
  - Compute \(\sigma(i) = \sum_{h=0}^{l} r_h \cdot (\langle g, x(i,j)_h \rangle - t(i,j))\) for all \(i \notin A\).
  - If \(\sum_{i \in A} \sigma(i) \neq 0\), abort. Otherwise, solve for \(\tilde{\Delta}(i)\) and compute \(x_h\).

- If \(P_j\) is honest:
  - Emulate communication channels and instances of FCOPEe with corrupted parties \(P_i\).
  - Send a random share \(x(i)\) and store \(\sum_{i \in A} x(i) \cdot \Delta(i) + q(i,j)\) in CS.
  - Sample \(r \leftarrow \mathbb{F}^t\) to emulate FRand, sample \(y \leftarrow \mathbb{F}\), and send both to the corrupted parties.
  - Sample \(\{\sigma(i)\}_{i \notin A}\) in \(\mathbb{F}\) such that \(\sum_{i \in A} \sigma(i) = \sum_{h=0}^{l} r_h \cdot (\sum_{i \in A} m(i)_h - y \cdot \Delta(i))\).

#### Simulating the Linear Combination Phase
- Store the linear combination in LC under id.

#### Simulating the Open Phase
- Receive constraints on \(x\) from \(F_{\langle \cdot \rangle}\).
- Check if the value to be opened and the previously opened values form a linearly dependent set.
- If so, compute the shares of the honest parties accordingly from the entries in HS.
- Otherwise, sample random shares \(\{x(i)\}_{i \notin A}\) and MAC shares \(\{m(i)\}_{i \notin A}\) such that \(\sum_{i \in A} x(i) = x\) and \(\sum_{i \in A} m(i) = \sum_{i \in A} m(i)\).
- Emulate the broadcast channel and send \(\{x(i)\}_{i \notin A}\) and receive \(\{x(j)\}_{j \in A}\).