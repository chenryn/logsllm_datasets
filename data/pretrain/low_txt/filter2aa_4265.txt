# Business Logic Errors

## Introduction
Business logic errors occur when an application's legitimate processing flow is exploited in a way that results in a negative consequence for the organization. These vulnerabilities can be found in any part of an application and can lead to financial loss, data breaches, or other harmful outcomes.

## Where to Find
This type of vulnerability can appear in all features and functionalities of an application, making it essential to conduct thorough testing across the entire system.

## How to Exploit

### 1. Review Functionality
- **Verified Reviews:** Attempt to post a review as a verified reviewer without purchasing the product.
- **Rating Scale:** Try to provide a rating outside the expected scale (e.g., 0, 6, or negative values).
- **Multiple Ratings:** Check if the same user can post multiple ratings for a product, which may indicate a race condition.
- **File Uploads:** Test if the file upload field allows any file extensions, as developers may overlook implementing proper protections.
- **Impersonation:** Post reviews as other users.
- **CSRF Attacks:** Perform Cross-Site Request Forgery (CSRF) attacks, as this functionality often lacks token protection.

### 2. Coupon Code Functionality
- **Reusability:** Apply the same coupon code more than once to see if it is reusable.
- **Race Conditions:** If the coupon code is unique, test for race conditions by using the same code on two accounts simultaneously.
- **Mass Assignment and HTTP Parameter Pollution:** Use these techniques to add multiple coupon codes, even if the application only accepts one from the client side.
- **Input Sanitization:** Test for attacks caused by missing input sanitization, such as Cross-Site Scripting (XSS) and SQL Injection (SQLi).
- **Product Coverage:** Add discount codes to products not covered under discounted items by tampering with the server-side request.

### 3. Delivery Charges Abuse
- **Negative Values:** Tamper with delivery charge rates to set them to negative values, potentially reducing the final amount.
- **Free Delivery:** Check for free delivery by manipulating parameters.

### 4. Currency Arbitrage
- **Currency Conversion:** Pay in one currency (e.g., USD) and request a refund in another (e.g., EUR). Due to differences in conversion rates, this can result in a monetary gain.

### 5. Premium Feature Abuse
- **Forceful Browsing:** Attempt to access areas or endpoints reserved for premium accounts.
- **Refund and Access:** Pay for a premium feature, cancel the subscription, and check if the feature remains accessible after receiving a refund.
- **True-False Validation:** Some applications use true-false request/response values to validate premium access. Use tools like Burp's Match & Replace to manipulate these values.
- **Cookies and Local Storage:** Check cookies or local storage for variables that control access to premium features.

### 6. Refund Feature Abuse
- **Subscription Refunds:** Purchase a subscription, request a refund, and check if the feature remains accessible.
- **Currency Arbitrage:** Utilize the currency arbitrage technique mentioned earlier.
- **Multiple Refunds:** Make multiple requests for subscription cancellation to see if you can receive multiple refunds (race conditions).

### 7. Cart/Wishlist Abuse
- **Negative Quantities:** Add a product in negative quantity along with other products in positive quantities to balance the total amount.
- **Excessive Quantities:** Add a product in quantities exceeding the available stock.
- **Wishlist Manipulation:** Test if you can move a product from your wishlist to another user's cart or delete it from there.

### 8. Thread Comment Functionality
- **Unlimited Comments:** Check if there are any limits on the number of comments a user can post on a thread.
- **Race Conditions:** If a user can comment only once, test for race conditions to see if multiple comments are possible.
- **Privileged Users:** If there is an option for verified or privileged users to comment, try to tamper with parameters to impersonate these users.
- **Impersonation:** Post comments while impersonating other users.

### 9. Parameter Tampering
- **Payment and Critical Fields:** Manipulate payment or critical fields to alter their values.
- **HTTP Parameter Pollution and Mass Assignment:** Add multiple or unexpected fields to exploit these vulnerabilities.
- **Response Manipulation:** Modify responses to bypass restrictions, such as two-factor authentication (2FA) bypass.

## References
- [@harshbothra_](https://twitter.com/harshbothra_)