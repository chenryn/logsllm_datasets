### 应用软件与操作系统的共生关系

应用软件与操作系统之间存在一种既相互依存又相互制约的复杂关系。这种关系可以比喻为“水能载舟，亦能覆舟”。理解这一点对于操作系统的设计和维护至关重要。一个成功的操作系统不仅需要具备高效稳定的内核代码，还需要能够支持并吸引大量的高质量应用软件。

具体来说，一个操作系统要想生存和发展，必须能够运行尽可能多的应用软件，并且这些软件应当是用户不可或缺的、在其他平台上无法轻易替代的，并且不断更新以保持其竞争力。此外，高质量的应用软件也是关键因素之一，因为它们直接影响用户体验和系统整体性能。

为了实现这一目标，操作系统需要提供良好的基础设施来支持应用软件的开发和运行。这类似于许多公司为员工提供的健身房设施，旨在提升员工的身体素质和工作效率。同样地，操作系统也需要构建一个强大的平台，使应用软件能够在各种复杂甚至恶劣的环境下稳定运行。

### 操作系统对应用软件的支持

要让独立软件开发商（ISV）愿意在一个特定的操作系统上进行开发并不是一件容易的事情。虽然吸引个别 ISV 可能相对简单，但要吸引成千上万的 ISV 则需要付出更多的努力。软件开发团队的日常开销并不小，因此他们往往会选择那些基础设施完善、支持能力强的平台。就像企业在选择投资地点时会考察当地的基础设施一样，ISV 在选择操作系统时也会评估其 API、开发工具以及调试设施等关键资源。

《软件调试》一书中详细介绍了操作系统调试设施的不同类别，包括：

- **支持调试器的系统设施**：这是操作系统支持调试的核心部分。在单任务系统如 DOS 中，调试器可以直接利用硬件资源；而在多任务环境中，则需要操作系统来统一管理和协调调试资源。例如，Windows 提供了内核态调试器（第 18 章）和用户态调试器（第 9 章和第 10 章）来分别处理不同特权级别的软件。
  
- **异常处理**：异常处理是软件开发中的常见问题。不同操作系统对此有不同的处理方式。例如，某些系统允许 C++ 的 try{}catch() 结构捕捉 CPU 异常，而另一些则不能。《软件调试》第 11 章和第 12 章详细介绍了 Windows 中的异常管理和未处理异常的处置方法。
  
- **错误通知机制**：通过对话框、声音等方式实时向用户报告错误信息（第 13 章）。
  
- **错误报告机制**：生成并发送错误报告，以便开发者能够远程诊断问题（第 14 章）。
  
- **错误记录机制**：永久记录软件运行过程中的异常和错误情况（第 15 章）。
  
- **事件追踪机制**：使用专门的内存缓冲区来记录频繁的信息输出，从而提高性能并便于检索（第 16 章）。
  
- **验证机制**：通过严格的测试标准来早期发现和解决问题（第 19 章）。
  
- **硬件错误管理机制**：处理与硬件相关的严重崩溃和挂起问题（第 17 章）。
  
- **打印调试信息**：通过输出调试信息来辅助调试，尽管效率较低（10.7 节）。
  
- **崩溃和转储机制**：将内存数据保存下来以供后续分析（12.9 节和 13.3 节）。

### 阅读建议

对于不同层次的读者，《软件调试》提供了不同的阅读路径：

- **初级读者**：先泛读除第 9 章和第 10 竇之外的所有章节，然后仔细阅读第 11 章和第 12 章，最后再阅读第 13 章中的《硬错误和蓝屏》部分。
- **中级读者**：根据个人兴趣选择感兴趣的章节进行深入阅读。
- **高级读者**：先阅读第 9 章、第 10 章和第 18 章，然后浏览其他章节，遇到感兴趣的再仔细阅读。

通过这种方式，读者可以更全面地理解和掌握操作系统的调试设施及其重要性。