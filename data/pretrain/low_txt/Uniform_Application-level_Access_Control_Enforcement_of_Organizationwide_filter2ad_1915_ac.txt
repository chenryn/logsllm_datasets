### 5. Prototype

#### 5.1. Aspect-Oriented Software Development (AOSD)

Aspect-oriented software development (AOSD) addresses the limitations of traditional paradigms, such as object-oriented programming, in encapsulating crosscutting concerns. Crosscutting concerns, like application-level access control logic, are often scattered throughout the code and intertwined with the application logic [11].

**Key Concepts:**

- **Quantification:** AOSD introduces quantification, which allows developers to define statements that have an impact on multiple points in the code. For example, "each time a method is invoked on an object, it should be verified whether the invoker has authorization to do so."

- **Obliviousness:** A key characteristic of AOSD is obliviousness, meaning that the application-logic developer does not need to be aware of the applied aspects, such as security logic. This results in a better separation of concerns between the application deployer and the application developer.

**Technical Constructs:**

- **Joinpoints:** These are specific points in the execution where additional logic, such as access control, can be injected. Common joinpoints include method invocations, exception handling, and execution flows.

- **Pointcuts:** Pointcuts allow developers to select a set of joinpoints based on their characteristics, such as the name of the method or the target object.

- **Advice:** Advice is the logic that is injected into the application at the joinpoint. In the context of access control, this would involve injecting enforcement checks.

For a comprehensive overview of AOSD, readers are referred to [9, p. 29-97].

#### 5.2. Implementation

Our prototype implementation leverages aspect-oriented programming and is built on top of Java Aspect Components (JAC), an extensible application container. JAC provides an aspect-oriented middleware layer that supports dynamic loading and unloading of aspect components. These components can weave wrappers around target Java objects, intercepting method invocations at specified execution points and adding extra functionality through role-methods. Additionally, JAC supports contextual information by attaching attributes to execution threads via collaboration flows.

**Architecture Overview:**

The architecture of the prototype is illustrated in Figure 3. The ICP application runs on top of the aspect-oriented middleware layer provided by JAC, which acts as a reference monitor. The view connector intercepts access requests at specified execution points, maps them onto the access interface, and enforces access decisions. The process involves the following steps:

1. **Mapping:**
   - The view connector projects the application-specific access request onto the access interface by:
     - Retrieving the object and subject interfaces applicable to the subject and the callee.
     - Determining the corresponding action in the object access interface.
     - Retrieving the attribute values needed by the authorization engine.

2. **Access Decision:**
   - The request is sent to the authorization engine for evaluation.

3. **Access Enforcement:**
   - The access decision is enforced based on the access rules.

In the prototype, we opted to push all attributes to the authorization engine, which may retrieve more attributes than necessary but saves round trips if the attributes can be retrieved locally and the access decision function is deployed on a different node. Alternatively, a lazy evaluation strategy could be used, where attributes are pulled by the authorization engine via callbacks. Further experiments are needed to evaluate the performance of the prototype.

**Figure 3. Architecture**

```
Application
View Connector Implementation
caller
callee
Authorization
Aspect 
Component
wrapper
interception
JAC-Container
3
Access
Enforcement
1
Mapping & 
Attribute 
Retrieval
2
Access
Decision
Request
Authorization
Engine
policy
rules
object-
interface
View Connector
```

### 6. Related Work

Our work intersects with several research domains, including:

- **Middleware Infrastructures for Application-Level Access Control:**
  - Tivoli Access Manager [16] supports centralized management across heterogeneous systems using a hierarchical protected object namespace.
  - CORBA Resource Access Decision (RAD) service [6] abstracts assets and requests, but requires consistent application by the developer.
  - OSA [5] provides generic representations for application-specific factors.
  - Java Authorization Contract for Containers (JACC) [27] specifies contracts between the application container and policy providers.
  - View Policy Language (VPL) [8] aggregates access rights into type-safe views, focusing on the design and management of security policies.

- **Access Control Frameworks:**
  - The prototype's architecture is similar to the ISO/IEC 10181-3 Access Control Framework [14] and the XACML dataflow model [20].
  - The view connector acts as both the Policy Enforcement Point (PEP) and the Policy Information Point (PIP).

- **Policy Languages and Authorization Engines:**
  - Our approach benefits from and complements research in policy languages like XACML [20] and Ponder [10], and authorization engines like the Flexible Authorization Framework (FAF) [15].

- **Model Driven Engineering:**
  - Our approach relates to Model Driven Architecture (MDA) [21] and SecureUML [2], but focuses on uniform translation of requirements across various applications rather than semi-automatic translation for specific applications.

- **Aspect-Oriented Software Development:**
  - The access interface approach is related to Multidimensional Separation of Concerns (MDSOC) [22] and has been shown to be useful in separating the access control concern [11].
  - Song et al. [26] apply an aspect-oriented modeling approach to compose access control and application features in a verifiable manner.

### 7. Conclusion

Enforcing expressive policies is challenging due to poor support for the separation of concerns principle. An access interface makes explicit the contract between the authorization engine and the applications, ensuring that the policy is enforced uniformly across diverse applications. A prototype has been implemented on an aspect-oriented application platform, demonstrating the feasibility of this approach.

**Acknowledgements:**
This research is funded by a Ph.D. grant from the Institute for Innovation through Science and Technology in Flanders (IWT-Vlaanderen). We thank Professor Konstantin Beznosov and the anonymous reviewers for their valuable comments and suggestions.

### References

[1] R. J. Anderson. A security policy model for clinical information systems. In SP '96: Proceedings of the 1996 IEEE Symposium on Security and Privacy, page 30, Washington, DC, USA, 1996. IEEE Computer Society.

[2] D. Basin, J. Doser, and T. Lodderstedt. Model driven security for process-oriented systems. In SACMAT '03: Proceedings of the eighth ACM symposium on Access control models and technologies, pages 100-109, New York, NY, USA, 2003. ACM Press.

[3] K. Beznosov. Engineering Access Control for Distributed Enterprise Applications. PhD thesis, Florida International University, July 2000.

[4] K. Beznosov. Access Control Mechanisms in Commercial Middleware, June 2002. Tutorial at SACMAT'02.

[5] K. Beznosov. Object Security Attributes: Enabling Application-Specific Access Control in Middleware. In DOA'02: 4th International Symposium on Distributed Objects & Applications, pages 693-710, London, UK, October 2002. Springer-Verlag.

[6] K. Beznosov, Y. Deng, B. Blakley, C. Burt, and J. Barkley. A Resource Access Decision Service for CORBA-based Distributed Systems. In ACSAC '99: 15th Annual Computer Security Applications Conference, pages 310-319, 1999.

[7] S. Bodoff, D. Green, K. Haase, E. Jendrock, M. Pawlan, and B. Stearns. The J2EE tutorial. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2002.

[8] G. Brose. Manageable access control for CORBA. Journal of Computer Security, 10(4):301-337, 2002.

[9] D. Crawford. Communications of the ACM, volume 44. ACM Press, New York, NY, USA.

[10] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Ponder Policy Specification Language. LNCS, 1995:18-28, 2001.

[11] B. De Win, W. Joosen, and F. Piessens. Developing secure applications through aspect-oriented programming. In R. E. Filman, T. Elrad, S. Clarke, and M. Aksit, editors, Aspect-Oriented Software Development, pages 633-650. Addison-Wesley, Boston, 2005.

[12] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and R. Chandramouli. Proposed NIST standard for role-based access control. ACM Trans. Inf. Syst. Secur., 4(3):224-274, 2001.

[13] R. E. Filman and D. P. Friedman. Aspect-Oriented Programming is Quantification and Obliviousness, October 2000. Workshop on Advanced Separation of Concerns, OOPSLA 2000.

[14] ISO. Information technology - open systems interconnection - security framework for open systems: access control framework. ISO/IEC 10181-3 (ITU-T X.812).

[15] S. Jajodia, P. Samarati, M. L. Sapino, and V. S. Subrahmanian. Flexible support for multiple access control policies. ACM Trans. Database Syst., 26(2):214-260, 2001.

[16] G. Karjoth. Access control with IBM Tivoli access manager. ACM Trans. Inf. Syst. Secur., 6(2):232-257, 2003.

[17] B. Lampson, M. Abadi, M. Burrows, and E. Wobber. Authentication in distributed systems: theory and practice. ACM Trans. Comput. Syst., 10(4):265-310, 1992.

[18] U. Z. Leuven. Leuvense Internet Samenwerking Artsen (LISA). www.uzleuven.be/UZroot/content/Zorgverleners/login/lisa/ (dutch).

[19] S. Middleton, J. Barnett, and D. Reeves. What is an integrated care pathway? Evidence-Based Medicine Series, 3(3), 2003. http://www.evidence-based-medicine.co.uk/What_is_series.html.

[20] OASIS. Core Specification: eXtensible Access Control Markup Language (XACML) Version 2.0.

[21] Object Management Group. OMG Model Driven Architecture. http://www.omg.org/mda/.

[22] H. Ossher and P. Tarr. Using multidimensional separation of concerns to (re)shape evolving software. Commun. ACM, 44(10):43-50, 2001.

[23] R. Pawlak, L. Seinturier, L. Duchien, and G. Florin. JAC: A Flexible Framework for AOP in Java. In Reflection'01, volume 2192 of Lecture Notes in Computer Science, pages 1-24. Springer-Verlag, September 2001.

[24] Secretary of the Department of Health and Human Services. Final Privacy Rule, August 2002.

[25] Secretary of the Department of Health and Human Services. Final Security Rule, February 2002.

[26] E. Song, R. Reddy, R. France, I. Ray, G. Georg, and R. Alexander. Verifiable composition of access control and application features. In SACMAT '05: Proceedings of the tenth ACM symposium on Access control models and technologies, pages 120-129, New York, NY, USA, 2005. ACM Press.

[27] Sun Microsystems. Java Authorization Contract for Containers, final release, November 2003. JSR-115.

[28] B. Van den Bosch. The design and the development of the hospital information system of the U.Z. Leuven. PhD thesis, Katholieke Universiteit Leuven, 1996.

---

This revised version aims to provide a clearer, more coherent, and professional presentation of the text.