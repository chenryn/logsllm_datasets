# Easily Instrumenting Android Applications for Security Purposes

**Author:** Eric Bodden  
**Affiliation:** Secure Software Engineering Group, European Center for Security and Privacy by Design (EC SPRIDE), Technische Universität Darmstadt & Fraunhofer SIT, Darmstadt, Germany  
**Contact:** [PI:EMAIL]

## Abstract
With the increasing market share of the Android operating system, the platform has become a more attractive target for adversaries. Current Android malware exhibits a wide range of malicious behaviors, such as sending text messages to premium-rate numbers, infecting connected computers with malware, and abusing the phone's resources for botnets. Additionally, many smartphone users store highly sensitive data, such as calendars, personal photos, SMS messages, and emails, which can be accessed by adversaries without the user's consent for espionage or targeted advertising.

These attacks often involve malicious applications that masquerade as legitimate apps but contain embedded malicious code. Users find it difficult to assess the trustworthiness of applications available in various app markets. Consequently, various approaches have been proposed to analyze the behavior of untrusted applications, including both static and dynamic analysis methods. While static analysis attempts to evaluate a program by examining its binary code, dynamic analysis monitors the actual execution of the target program.

In this tutorial, we focus on dynamic instrumentation, specifically program rewriting techniques. Instrumentation provides access to full runtime information, such as user inputs and environment settings, which enhances the precision of detecting policy violations. Additionally, countermeasures can be implemented, such as blocking calls to premium-rate numbers or requesting user consent before proceeding.

We will demonstrate three different methods for instrumenting Android applications:
1. Using the AspectBench Compiler (abc) to declaratively define instrumentations using AspectJ.
2. Extending this approach to Tracematches, allowing the expression of finite-state policies (e.g., limiting the number of SMS messages to the same phone number to prevent spam).
3. Manually instrumenting applications by loading them into Soot, manipulating the Jimple intermediate representation, and producing a new application package with the modifications for maximum flexibility.

We will provide practical examples from the Android world and discuss the limitations of each technique. We will also cover background information on abc and Soot, as well as general remarks on platform-specific aspects of program instrumentation on Android. Unlike system-level approaches like TaintDroid, instrumenting the application's bytecode at the application level requires no modifications to the operating system and does not require root access to the device. The instrumented applications can be installed and used as usual, only differing in behavior when an instrumented action is triggered.

## Categories and Subject Descriptors
- **D.4.6 [Security and Protection]:** Access controls

## General Terms
- Security

## Keywords
- Android, Runtime Enforcement, Instrumentation, Dynamic Analysis

## 1. Audience and Prerequisites
This tutorial is intended for security researchers interested in instrumenting or rewriting applications on the Android platform. Prior knowledge of Android application development is helpful but not required, as example applications and a short introduction will be provided. Basic knowledge of AspectJ and Tracematches is advantageous for the relevant sections, but the examples given can serve as a starting point for those new to the topic.

## 2. Proposed Timeline
- **Background:**
  - The Android platform and its application architecture
  - The Android SDK and its tools for developers
  - Soot and its Jimple intermediate representation
  - Conversion of Android's Dalvik bytecode into Jimple and back
- **Hands-on:**
  - Converting an app into Jimple and inspecting its code
  - High-level instrumentation: Using tracematches to instrument Android code
  - Hands-on: Tracematch instrumentation, re-packaging, and execution in emulator
  - Limitations of tracematches
- **More Fine-Grained Instrumentation:**
  - With AspectJ aspects
  - Hands-on: AspectJ instrumentation, re-packaging, and execution in emulator
  - Limitations of AspectJ
- **Manual Instrumentation:**
  - With Soot and Jimple
  - Hands-on: Jimple instrumentation, re-packaging, and execution in emulator
- **Outlook:**
  - Combination with static analysis
  - Wrap-up

## 3. Previous Tutorials
- An abc tutorial was held at AOSD 2006, but it did not focus on runtime monitoring.
- The last tutorial on Soot was at PLDI 2003, focusing on static analysis rather than instrumentation.
- There has never been a tutorial on the combination of Soot, abc, and Android.
- We have been invited to give a tutorial on Java and Android instrumentation using Soot and abc at RV 2013. This CCS tutorial will be an improved iteration, specifically targeted for the security community.

## 4. Biography of Presenters
The Secure Software Engineering Group is known for its work on the FlowDroid static taint-analysis system for Android, the DroidBench benchmark suite for Android taint analysis, and the SuSi tool for semi-automatic detection of sources and sinks of private information in Android applications.

**Prof. Dr. Eric Bodden:**
- Head of the Secure Software Engineering group at the Fraunhofer Institute for Secure Information Technology (SIT), Technische Universität Darmstadt, and EC SPRIDE.
- Principal investigator at the Center for Advanced Security Research Darmstadt (CASED).
- Leader of the Emmy-Noether research group RUNSECURE, focusing on securing dynamic program executions through dynamic instrumentation techniques.
- World-renowned lead maintainer of Soot and top contributor to the AspectBench Compiler (abc) for over six years.
- Over a dozen of his most cited publications are based on Soot and abc.
- Completed his doctoral dissertation at McGill University under the supervision of Laurie Hendren, an ACM Fellow and leading scientist in compiler engineering and program analysis.
- Won two ACM Distinguished Paper Awards, one related to data-race detection using AspectJ.
- Won the worldwide ACM Student Research Competition in 2005 with his Diploma thesis, the first work to link AspectJ to runtime monitoring.

## 5. References
[1] Chris Allan, Pavel Avgustinov, Aske Simon Christensen, Laurie Hendren, Sascha Kuzins, Jennifer Lhoták, Ondřej Lhoták, Oege de Moor, Damien Sereni, Ganesh Sittampalam, and Julian Tibble. "abc: The AspectBench Compiler for AspectJ." In Proceedings of the 4th International Conference on Generative Programming and Component Engineering, GPCE'05, pages 10–16, Berlin, Heidelberg, 2005. Springer-Verlag.

[2] Chris Allan, Pavel Avgustinov, Aske Simon Christensen, Laurie Hendren, Sascha Kuzins, Ondřej Lhoták, Oege de Moor, Damien Sereni, Ganesh Sittampalam, and Julian Tibble. "Adding Trace Matching with Free Variables to AspectJ." In Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA '05, pages 345–364, New York, NY, USA, 2005. ACM.

[3] Steven Arzt, Siegfried Rasthofer, and Eric Bodden. "SuSi: A Tool for the Fully Automated Classification and Categorization of Android Sources and Sinks," May 2013.

[4] Michael Backes, Sebastian Gerling, Christian Hammer, Matteo Maffei, and Philipp von Styp-Rekowsky. "AppGuard: Enforcing User Requirements on Android Apps." In Proceedings of the 19th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS'13, pages 543–548, Berlin, Heidelberg, 2013. Springer-Verlag.

[5] William Enck, Peter Gilbert, Byung gon Chun, Landon P. Cox, Jaeyeon Jung, Patrick McDaniel, and Anmol Sheth. "TaintDroid: An Information-Flow Tracking System for Real-Time Privacy Monitoring on Smartphones." In OSDI, pages 393–407, 2010.

[6] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. "A Study of Android Application Security." In Proceedings of the 20th USENIX Conference on Security, SEC'11, pages 21–21, Berkeley, CA, USA, 2011. USENIX Association.

[7] Adam P Fuchs, Avik Chaudhuri, and Jeffrey S Foster. "Scandroid: Automated Security Certification of Android Applications." Manuscript, Univ. of Maryland, http://www.cs.umd.edu/~avik/projects/scandroidascaa, 2009.

[8] Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves le Traon, Damien Octeau, and Patrick McDaniel. "Highly Precise Taint Analysis for Android Applications," May 2013.

[9] Patrick Lam, Eric Bodden, Ondrej Lhotak, and Laurie Hendren. "The Soot Framework for Java Program Analysis: A Retrospective." In Cetus Users and Compiler Infrastructure Workshop (CETUS 2011), October 2011.

[10] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. "Chex: Statically Vetting Android Apps for Component Hijacking Vulnerabilities." In Proceedings of the 2012 ACM Conference on Computer and Communications Security, CCS '12, pages 229–240, New York, NY, USA, 2012. ACM.

[11] Héloïse Pieterse and Martin S. Olivier. "Android Botnets on the Rise: Trends and Characteristics." In Hein S. Venter, Marianne Loock, and Marijke Coetzee, editors, ISSA, pages 1–5. IEEE, 2012.

[12] Victor Chebyshev (Kaspersky Labs). "Mobile Attacks!" 2013.

[13] Jinyung Kim, Yongho Yoon, Kwangkeun Yi, and Junbum Shin. "ScanDal: Static Analyzer for Detecting Privacy Leaks in Android Applications." In Hao Chen, Larry Koved, and Dan S. Wallach, editors, MoST 2012: Mobile Security Technologies 2012, Los Alamitos, CA, USA, May 2012. IEEE.

[14] Clint Gibler, Jonathan Crussell, Jeremy Erickson, and Hao Chen. "Aurasium: Practical Policy Enforcement for Android Applications." In Proceedings of the 21st USENIX Conference on Security Symposium, Security'12, pages 27–27, Berkeley, CA, USA, 2012. USENIX Association.

[15] Zhemin Yang and Min Yang. "LeakMiner: Detect Information Leakage on Android with Static Taint Analysis." In Third World Congress on Software Engineering (WCSE 2012), pages 101–104, 2012.

[16] Yuanyuan Zeng, Kang G. Shin, and Xin Hu. "Design of SMS Commanded-and-Controlled and P2P-Structured Mobile Botnets." In Proceedings of the Fifth ACM Conference on Security and Privacy in Wireless and Mobile Networks, WISEC '12, pages 137–148, New York, NY, USA, 2012. ACM.

[17] Yajin Zhou and Xuxian Jiang. "Dissecting Android Malware: Characterization and Evolution." In Proceedings of the 2012 IEEE Symposium on Security and Privacy, SP '12, pages 95–109, Washington, DC, USA, 2012. IEEE Computer Society.