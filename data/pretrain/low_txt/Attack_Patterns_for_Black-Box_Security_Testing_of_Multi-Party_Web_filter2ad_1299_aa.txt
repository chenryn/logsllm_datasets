# Title: Attack Patterns for Black-Box Security Testing of Multi-Party Web Applications

## Authors:
- Avinash Sudhodanan
- Alessandro Armando
- Roberto Carbone
- Luca Compagna

### Affiliations:
- University of Trento, Italy
- Security & Trust, FBK, Italy
- DIBRIS, University of Genova
- SAP Labs France

## Abstract
The rise of Software-as-a-Service (SaaS) has led to the development of multi-party web applications (MPWAs). These applications rely on trusted third-party systems (e.g., payment servers, identity providers) and protocols such as Cashier-as-a-Service (CaaS) and Single Sign-On (SSO) to deliver business services to users. Motivated by the large number of attacks discovered against MPWAs and the lack of a general-purpose, application-agnostic technique for their discovery, we propose an automatic black-box security testing technique based on attack patterns. Our approach is grounded in the observation that attacks against popular MPWAs share commonalities, even if the underlying protocols and services differ. In this paper, we target six different replay attacks, a login CSRF attack, and a persistent XSS attack. We first present a methodology for security experts to create attack patterns from known attacks. Second, we introduce a security testing framework that uses these attack patterns to automatically generate test cases for assessing the security of MPWAs. We implemented our ideas using OWASP ZAP, a popular open-source penetration testing tool, and created seven attack patterns corresponding to thirteen prominent attacks from the literature. Our framework discovered twenty-one previously unknown vulnerabilities in well-known MPWAs, including those outside the SSO and CaaS families.

## 1. Introduction
An increasing number of business-critical online applications leverage trusted third parties and web-based security protocols to meet their security needs. For example, many online applications use authentication assertions issued by identity providers to authenticate users via single sign-on (SSO) protocols (e.g., SAML SSO v2.0, OpenID Connect). Similarly, online shopping applications use online payment services and CaaS protocols to obtain proof-of-payment before delivering purchased items (e.g., Express Checkout and PayPal Payment Standard). We refer to this broad class of protocols as security-critical Multi-Party Web Applications (MPWAs).

Three entities typically participate in these protocols: the User (through a web browser), the web application (acting as the Service Provider, SP), and a Trusted Third Party (TTP). The design and implementation of the protocols used by security-critical MPWAs are notoriously error-prone, with several vulnerabilities reported in recent years. For instance, incorrect handling of OAuth 2.0 access tokens by a vulnerable SP can be exploited by an attacker hosting another SP. If the victim User logs into the attacker's SP, the attacker can obtain an access token (issued by TTP) and replay it in the vulnerable SP to log in as the victim. Similar attacks have been detected in SAML-based implementations and CaaS-enabled scenarios.

These attacks have been discovered through various domain-specific techniques, ranging from formal verification to manual testing. In this paper, we propose an automatic black-box testing technique for security-critical MPWAs. Our approach is based on the observation that, regardless of their purpose, the security protocols at the core of MPWAs share common features. We also conjecture that the attacks found in the literature (and possibly many more yet to be discovered) are instances of a limited number of attack patterns. We conducted a detailed study of attacks in real-world MPWAs and identified a small number of application-independent attack patterns that concisely describe the actions performed by attackers.

To assess the generality and effectiveness of our approach, we developed a security testing framework based on OWASP ZAP, a popular open-source penetration testing tool. Our tool was able to identify two previously unknown attacks against websites integrating LinkedIn’s JavaScript API-based SSO, a previously unknown redirection URI fixation attack against PayPal’s “Log in with PayPal” SSO solution, and a previously unknown attack in Stripe’s payment checkout solution. Additionally, we found seven previously unknown vulnerabilities in websites leveraging SSO solutions offered by LinkedIn, Facebook, and Instagram.

We also investigated the Verification Via Email (VvE) scenario, where websites send security-sensitive information to users via email. By testing the security of Alexa Top 500 websites, we found that several prominent websites, such as Twitter and open.sap.com, are vulnerable to login CSRF attacks.

The main contributions of this paper are:
1. We show that the attack strategies behind thirteen prominent MPWA attacks can be represented using seven attack patterns, which are general enough to discover similar attacks in MPWAs implementing different protocols.
2. Our black-box security testing approach has experimental evidence of applicability in both SSO and CaaS domains.
3. We evaluate the VvE scenario and show that eight out of the top Alexa global 500 websites are vulnerable to login CSRF attacks.
4. We developed a fully functional prototype of our approach on OWASP ZAP, available online upon request.
5. We identified eleven previously unknown vulnerabilities in security-critical MPWAs leveraging SSO and CaaS protocols of LinkedIn, Facebook, Instagram, PayPal, and Stripe.

## 2. Background
Figure 1 provides pictorial representations of example MPWAs leveraging SSO, CaaS, and Verification via Email (VvE) solutions. They all feature a user U, operating a browser B, who wants to consume a service from a service provider SP, and a service provider SP that relies on a trusted-third-party TTP to deliver its services. TLS and valid certificates at TTP and SP are used to securely exchange messages.

### 2.1 SAML 2.0 SSO Protocol
Figure 1a shows the SAML 2.0 SSO protocol, where SP relies on TTP (the Identity Provider, IdP) to authenticate a user U before granting access to one of its resources. The protocol starts with U asking SP for a resource located at URI SP. SP redirects B to IdP with the authentication request AuthRequest. IdP challenges B to provide valid credentials. If the authentication succeeds, IdP issues a digitally signed authentication assertion (AuthAssert) and instructs the user to send it to SP. SP checks the assertion and delivers the requested resource. A severe man-in-the-middle attack against the SAML-based SSO for Google Apps was reported, allowing a malicious agent hosting a SP to reuse AuthAssert to access the resource of the victim U stored at Google.

### 2.2 PayPal Payments Standard CaaS Protocol
Figure 1b illustrates a typical MPWA running the PayPal Payments Standard CaaS protocol, where TTP authorizes U to purchase a product P at SP. Here, TTP is a Payment Service Provider (PSP) played by PayPal. SP is identified by PayPal through a merchant account identifier (PayeeId). U places an order for purchasing P. SP sends the PayeeId, the cost of the product, and a return URI to TTP by redirecting B. By interacting with PSP, U authorizes the payment. The transaction identifier (TransactionId) is generated by PSP and passed to SP by redirecting B to ReturnURI. SP submits the TransactionId to TTP to get the details of the transaction. Upon successful verification, SP sends U the status of the purchase order.

A serious vulnerability in the integration of the PayPal Payments Standard protocol in osCommerce v2.3.1 and AbanteCart v1.0.4 allowed a malicious party to shop for free. The attack involves obtaining a payee (merchant) identifier in one session and replaying it in another session to place an order by paying themselves instead of the target SP.

### 2.3 Verification via Email (VvE)
While MPWAs for SSO and CaaS scenarios have received considerable attention, other security-critical MPWAs, such as VvE, need close scrutiny. Websites often send security-sensitive URIs to users via email for verification purposes. This scenario frequently occurs during account registration, where an account activation link is sent via email to the user. An illustration of this scenario is provided in Figure 1c. Here, TTP is a mailbox provider MP that guarantees SP that a user U is in control of a given email address. During registration, U provides an email address to SP. SP sends the account activation URI via email to U, who visits their inbox at MP, accesses the activation link, and clicks it to complete the registration process.