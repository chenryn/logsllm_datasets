### Effective Implementation and Recovery Objectives

To effectively implement recovery strategies, another challenge is to ensure they meet the recovery objectives [28].

### User-Guided Recovery for Cloud Web Service Applications

The recovery strategies discussed in previous sections are designed and implemented to automatically recover from failures. However, for complex cloud systems, it can be challenging to always employ such automated recovery, especially when the systems involve a large number of different components across multiple platforms, regions, or even different clouds. Therefore, user involvement may be necessary for the recovery of these types of cloud applications [27]. In [20], a user-guided recovery framework for cloud web service applications is presented. Specifically, recovery plans are generated when the behavior correctness properties of a cloud web service application are violated at runtime. After generating these plans, they are ranked, and the user selects the best plan for execution. This recovery strategy is used during the runtime of cloud web service applications, with the logic being designed in the design phase. One challenge for this strategy is the efficient generation of recovery plans.

### Recovery for Sporadic Activities in the Design Phase

### Data Analysis & Taxonomy

Figure 3 illustrates the four categories we use for classifying cloud recovery strategies. Cloud applications have both normal and sporadic activities, each with a design and runtime phase. Normal activities include application workflows and internal processes within a specific system architecture. Sporadic activities include deployment, upgrades, reconfiguration, and migration. Our four categories for classifying cloud recovery strategies are:
1. Recovery for Normal Activities in the Design Phase
2. Recovery for Normal Activities in the Runtime Phase
3. Recovery for Sporadic Activities in the Design Phase
4. Recovery for Sporadic Activities in the Runtime Phase

#### Figure 3: Cloud Activities and Time Phases

### A. Recovery for Normal Activities in the Design Phase

Normal activities involve two levels: the application level, which pertains to the execution of cloud applications (e.g., program execution within a component of the cloud system), and the infrastructure level, which pertains to the structure of cloud datacenter components. In existing recovery strategies, fault-tolerance design, virtual machine replication, recovery design for cloud internal protocols, and user-guided recovery design can be implemented in the design phase of application-level normal activities. These four strategies are included in the recovery strategies for application-level normal activities in the design phase. Additionally, virtual machine replication, disaster recovery, and fault-tolerance design can be implemented in the design phase of infrastructure-level normal activities. Thus, they are included in the recovery strategies for infrastructure-level normal activities in the design phase.

### B. Recovery for Normal Activities in the Runtime Phase

In all existing recovery strategies, cloud application rollback, fault-tolerance, virtual machine replication, recovery for cloud internal protocols, and user-guided recovery for cloud web service applications take effect during the runtime phase of application-level normal activities. Therefore, they are included in the recovery strategies for application-level normal activities in the runtime phase. Similarly, virtual machine replication, disaster recovery, and fault-tolerance take effect during the runtime phase of infrastructure-level normal activities. Hence, they are included in the recovery strategies for infrastructure-level normal activities in the runtime phase.

### C. Recovery for Sporadic Activities in the Design Phase

Sporadic activities also involve two levels: the application level, which pertains to operations inside virtual machines (e.g., installing Tomcat in a machine), and the infrastructure level, which pertains to sporadic operations on the cloud infrastructure (e.g., upgrading a machine using a new AMI). In existing recovery strategies, test-driven scripts can be prepared and conducted under a test bed during the design phase of application-level sporadic activities. Script exception handling, recovery design for operations as transactions, and recovery design for cloud operations as processes can also be implemented in the design phase of application-level sporadic activities. These four strategies are included in the recovery strategies for application-level sporadic activities in the design phase. Additionally, cloud operation exceptions handling, recovery design for cloud operations as transactions, and recovery design for cloud operations as processes can be implemented in the design phase of infrastructure-level sporadic activities. Thus, they are included in the recovery strategies for infrastructure-level sporadic activities in the design phase.

### D. Recovery for Sporadic Activities in the Runtime Phase

In all existing recovery strategies, recovery for cloud operations as transactions, recovery for cloud operations as processes, and script exception handling are implemented during the runtime phase of application-level sporadic activities. These three strategies are included in the recovery strategies for application-level sporadic activities in the runtime phase. Similarly, cloud operation exceptions handling, recovery for cloud operations as transactions, and recovery for cloud operations as processes are implemented during the runtime phase of infrastructure-level sporadic activities. Therefore, they are included in the recovery strategies for infrastructure-level sporadic activities in the runtime phase.

### Classification and Taxonomy

Based on the above data analysis, we classify existing cloud recovery strategies into six groups, as shown in Figure 4. Since normal activities are divided into application and infrastructure levels, we call this diagram the Level 1 classification diagram.

#### Figure 4: Level 1 Classification for Cloud Recovery Methods

By combining application and infrastructure levels for both normal and sporadic activities in both the design and runtime phases, we obtain the Level 2 classification, as shown in Figure 5. This serves as the final taxonomy for cloud recovery strategies.

#### Figure 5: Level 2 Classification for Cloud Recovery Methods

### Discussion

Our taxonomy for existing cloud recovery strategies is based on different cloud application activities (normal and sporadic) in different lifecycle phases (design and runtime). Some recovery mechanisms are dedicated to operation simulation phases, which we treat as the design phase of operations. This taxonomy provides guidelines for literature reviews of cloud recovery mechanisms. Moreover, our research summarizes existing cloud recovery strategies and explains their scopes and contexts.

### Conclusion & Future Work

Recovery for sporadic operations in the cloud is complex because it must include both the recovery for sporadic and normal activities. This paper presents a taxonomy for classifying existing cloud recovery strategies, ranging from recovery mechanisms for normal activities to those for sporadic activities. This taxonomy is derived by analyzing and classifying existing cloud recovery strategies into four groups. It provides a comprehensive view of the purposes and scopes of current cloud recovery strategies and facilitates research on the recoverability of cloud sporadic operations. Our future work includes proposing non-intrusive recovery mechanisms for cloud sporadic operations, guided by this taxonomy.

### Acknowledgment

NICTA is funded by the Australian Government through the Department of Communications and the Australian Research Council through the ICT Centre of Excellence Program.

### References

[1] AWS official Website: http://aws.amazon.com/cn/ (last access time: 27th Feb 2014, 12:09).

[2] M. Fu, L. Zhu, L. Bass, and A. Liu, “Recovery for Failures in Rolling Upgrade on Clouds,” accepted by DSN workshop of DCDV, June 2014.

[3] J. Behl, et al., “Providing Fault-tolerant Execution of Web-service–based Workflows within Clouds,” 2nd International Workshop on Cloud Computing Platforms, 2012.

[4] H. A. Lagar-Cavilla, et al., “SnowFlock: Rapid Vurtual Machine Cloning for Cloud Computing,” EuroSys ’09, April 2009.

[5] A. Colesa, et al., “Transparent Fault-Tolerance Based on Asynchronous Virtual Machine Replication,” 12th SYNASC, pp. 442-448, 2010.

[6] Chef official website: http://www.opscode.com/chef/ (last access time: 27 Feb 2014, 12:40).

[7] S. Nelson-Smith, “Test-Driven Infrastructure with Chef,” Copyright©2011 Atalanta Systems LTD, First Edition, June 2011.

[8] M. Fu, L. Zhu, and L. Bass; “A Recoverability-Oriented Analysis for Operations on Cloud Applications,” WICSA 2014.

[9] E. N. M. Elnozahy, et al., “A Survey of Rollback-Recovery Protocols in Message-Passing Systems,” (CSUR), vol. 34, no. 6, pp. 375-408, September 2002.

[10] M. Pokharel, et al., “Disaster Recovery for System Architecture using Cloud Computing,” Annual International Symposium on Applications and the Internet, September 2010.

[11] J. Zhang and N. Zhang, “Cloud Computing-based Data Storage and Disaster Recovery,” International Conference on Future Computer Science and Education, 2011.

[12] B. Cully, et al., “Remus: High Availability via Asynchronous Virtual Machine Replication,” Proc. of the USENIX Symposium on Networked Systems Design and Implementation, 2008.

[13] B. Randell, et al., “The Evolution of the Recovery Block Concept,” Software Fault Tolerance, M. R. Lyu (ed.), Wiley, Chichester, 1995.

[14] A. Avizienis, “The Methodology of n-version Programming,” Software Fault Tolerance, M. R. Lyu (ed.), Wiley, Chichester, pp. 23–46, 1995.

[15] Z. B. Zheng, et al., “FTCloud: A Component Ranking Framework for Fault-Tolerant Cloud Applications,” IEEE International Symposium on Software Reliability Engineering, July 2010.

[16] H. S. Gunawi, et al., “FATE and DESTINI: A Framework for Cloud Recovery Testing,” NSDI, 2011.

[17] C. Colombo and G. J. Pace, “Recovery within Long Running Transactions,” ACM Transactions on Computational Logic, pp. 1-40, August 2011.

[18] I. Weber, H. Wada, et al.; “Supporting Undoability in Systems Operations”; USENIX 2013.

[19] M. Fu, et al., “Recovery for Sporadic Operations on Cloud Applications,” submitted to ASWEC Doctorial Symposium 2014.

[20] J. Simmonds, et al.; “Guided Recovery for Web Service Applications”; proc. 18th ACM SIGSOFT, pp. 247-256, 2010.

[21] L. DuBois, “Disaster Recovery for Virtualized Environments: A DR Approach to Fit the New Datacentre,” IDC Presentation, March 2013.

[22] Yuruware official website: http://www.yuruware.com/ (last access time: 27th Feb 2014 21:54).

[23] OpsCode official Website: http://www.opscode.com/ (last access time: 27th Feb 2014 20:06).

[24] Asgard official website: https://github.com/Netflix/asgard (last access time: 2nd Mar 2014, 12:30).

[25] X. Xu, L. Zhu, et al.; “POD-Diagnosis: Error Diagnosis of Sporadic Operation on Cloud Applications”; Submitted to DSN 2014.

[26] A. B. Brown and D. A. Patterson, “Rewind, Repair, Replay: Three R’s to Dependability,” proc. of the 10th workshop on ACM SIGOPS, 2002.

[27] A. B. Brown, et al.; “Experience with Evaluating Human-Assisted Recovery Processes”; DSN 2004, pp. 405-410, 2004.

[28] T. Wood, E. Cecchet, and K. K. Ramakrishnan, “Disaster Recovery as a Cloud Service: Economic Benefits & Deployment Challenges,” HotCloud, 2010.

Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 08:21:46 UTC from IEEE Xplore. Restrictions apply.