# Title: Poster: Towards Detecting DMA Malware

## Authors
Patrick Stewin, Jean-Pierre Seifert, and Collin Mulliner  
Security in Telecommunications, Technische Universität Berlin & Deutsche Telekom Laboratories  
Ernst-Reuter-Platz 7, 10587 Berlin, Germany  
Emails: patrickx@domain.com, jpseifert@domain.com, collin.mulliner@domain.com

## Abstract
Malware residing in dedicated isolated hardware, such as network, video, and CPU chipsets, poses an emerging security threat. This type of malware leverages direct memory access (DMA) to compromise the host system, bypassing kernel-level protections. Traditional antivirus software is ineffective against such malware due to the isolation of auxiliary systems from the host CPU. In this work, we present a novel method for detecting DMA-based malware. We developed and evaluated a prototype that attacks the host via DMA, executed in the chipset of an x86 architecture. Our detection mechanism monitors the side effects of rogue DMA usage. We believe our approach is generalizable and represents a significant step towards detecting malware in dedicated isolated hardware.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Invasive Software

## General Terms
Security

## Keywords
Dedicated Hardware, Intel Active Management Technology (iAMT), Manageability Engine (ME), Northbridge, Rootkit

## 1. Introduction to DMA Malware
Rootkits are a prevalent form of malicious software. The ongoing arms race between malware authors and the anti-malware community has driven malware creators to exploit dedicated isolated hardware, specifically auxiliary processors in modern x86 computer systems. These auxiliary CPUs, found in network interface cards (NICs), video cards, and the x86 chipset, can support Direct Memory Access (DMA). This capability allows malware to attack the host platform, circumventing operating system (OS) kernel protections. Furthermore, such malware can persist through reboots and power-off states.

Since DMA usage is a key characteristic of malware in isolated hardware, we refer to it as DMA malware. The execution environment of DMA malware is inaccessible from the host CPU, rendering traditional antivirus software ineffective. To the best of our knowledge, no prior work has presented mechanisms to detect malware in dedicated isolated hardware.

In this work, we introduce a novel approach for detecting DMA malware based on the side effects of rogue DMA usage. We developed a prototype DMA malware that mimics the functionality of existing DMA malware, targeting the auxiliary processor in the platform's memory controller hub (MCH) of current x87 architecture chipsets. Our detection mechanism is capable of identifying general side effect patterns, making it applicable to various types of DMA malware.

## 2. Related Work
Our focus is on dedicated isolated hardware with separate processors and memory, as seen in NICs and video cards. Previous research, such as [7], demonstrated a stealthy secure shell (SSH) hidden using the NIC and GPU, communicating via the Peripheral Component Interconnect (PCI) bus. However, our prototype does not require firmware reflashing or communication with other PCI devices, making such defenses ineffective.

Duflot et al. [1] showed how to exploit a host during runtime using a NIC and DMA, but their attack was not fully isolated. Another example of malware in a GPU was presented in [8], where the malware was partially executed on the main CPU. Executing arbitrary code in the Intel Active Management Technology (iAMT) environment was demonstrated in [6], but the proof-of-concept (PoC) code lacked actual malware functionality.

## 3. Our DMA Malware Prototype
To evaluate DMA malware, we extended the implementation of a keystroke logger prototype [5] based on an exploit described in [6]. Our prototype runs in the isolated iAMT environment of modern Intel x86 chipsets. The logger uses DMA to find the physical address of the keyboard buffer of a USB keyboard connected to a Linux-based platform. It then continuously monitors the buffer and exfiltrates captured keystrokes via an isolated network channel.

We identified common attack properties of DMA malware, which include:
1. **Search Phase**: Searching system memory for valuable data, such as the address of a kernel structure.
2. **Monitor Phase**: Reading from and/or writing to the found memory addresses.

For our prototype, we implemented a read-only DMA attack to create more stealthy malware. The prototype is a fully functioning keystroke logger for USB keyboards, implementing the above-mentioned attack properties. We believe these properties are common to all DMA malware, making our prototype representative.

## 4. Detecting DMA Side Effects
Our investigation into detecting malicious DMA usage is based on the fact that both the main CPU and the iAMT environment can access the main system memory simultaneously. We aimed to determine if this parallel memory access produces measurable side effects.

We conducted memory stress tests under three conditions: without the keystroke logger (baseline), with the logger in search mode, and with the logger in monitor mode. We used a 100 MB file copied within a RAM-based file system, repeating the tests 1,000 times and calculating the means. The results are shown in Figure 2.

### Measurement Tools
1. **GNU time**: Initially, we used GNU time to measure system resource usage. The results were nearly identical across the three conditions, indicating insufficient resolution.
2. **Time Stamp Counter (TSC)**: Using TSC, we observed a 2% overhead in the search mode, suggesting detectable DMA side effects. No significant overhead was noted in the monitor mode.
3. **Hardware Performance Counters (HPC)**: HPCs provided more precise measurements. We evaluated 340 events and found that resource stalls were a clear DMA side effect. The mean event count for RAT_STALLS:ROB_READ_PORT was significantly higher in the search mode compared to the baseline and monitor mode.

### Detection Mechanism
Based on our findings, DMA side effects can be reliably measured. Our detection mechanism establishes a baseline for TSC/HPC values. During runtime, the system monitors these values and compares them to the baseline. Deviations indicate the presence of DMA malware.

## 5. Conclusion and Future Work
Malware in isolated hardware is an emerging threat, primarily leveraging DMA to compromise the host. Our novel detection mechanism, based on monitoring DMA side effects, shows promise. Future work will focus on refining and implementing this mechanism, and extending its applicability to other types of DMA-based malware in similar isolated environments.

## 6. Acknowledgments
The authors would like to thank Benjamin Michèle, Dmitry Nedospasov, Juliane Krämer, Matthias Lange, and Steffen Liebergeld for their help and support in this work.

## 7. References
[1] L. Duflot, Y.-A. Perez, G. Valadon, and O. Levillain. Can you still trust your network card? Mar. 2010. [Online:] http://www.ssi.gouv.fr/IMG/pdf/csw-trustnetworkcard.pdf.

[2] G. Hoglund. Video card rootkit feasibility study. Mar. 2010. [Online:] HBGary Email Viewer: http://leaks.anonamegame.com/greg hbgary com/14960.html.

[3] Intel Corporation. Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 3 (3A & 3B): System Programming Guide. Apr. 2011. [Online:] http://www.intel.com/Assets/PDF/manual/325384.pdf.

[4] A. Kumar, P. Goel, and Y. Saint-Hilaire. Active Platform Management Demystified. Richard Bowles, 2009. Intel Press.

[5] P. Stewin and J.-P. Seifert. "In God We Trust All Others We Monitor" - [Extended Abstract]. In CCS '10: Proceedings of the 17th ACM Conference on Computer and Communications Security, pages p.639–641, New York, NY, USA, October 2010. ACM.

[6] A. Tereshkin and R. Wojtczuk. Introducing Ring -3 Rootkits. Black Hat USA, July 2009. [Online:] http://www.blackhat.com/presentations/bh-usa-09/TERESHKIN/BHUSA09-Tereshkin-Ring3Rootkit-SLIDES.pdf.

[7] A. Triulzi. Project Maux Mk.II. Nov. 2008. [Online:] http://www.alchemistowl.org/arrigo/Papers/Arrigo-Triulzi-PACSEC08-Project-Maux-II.pdf.

[8] G. Vasiliadis, M. Polychronakis, and S. Ioannidis. GPU-Assisted Malware. In Malicious and Unwanted Software (MALWARE), 2010 5th International Conference on, pages 1–6, Oct. 2010.

## Figure 2: Memory Stress Measurements
![Memory Stress Measurements](path_to_image.png)
- Search/monitor phase results relative to the baseline.