### Traffic Analysis and Anomaly Detection

#### Traffic Focus
Our primary interest lies in traffic destined for local servers, where remote port information is not useful.

#### Portsweep Attack
- **Description**: In a portsweep attack, an attacker attempts to identify services running on a victim host by systematically probing all ports.
- **Detection**: This results in a large number of connection attempts at the victim host. Anomalies are detected in statistics (7) and (8) if the connection attempt is normal. If the scan involves reset packets or other unusual packets, anomalies occur in the transition from the LISTEN state to itself, which is T49 (not shown in the diagram).
- **Detection Capabilities**: Our approach can detect portsweeps consisting of 3 packets originating from 2 or 3 different hosts.

#### Queso
- **Description**: Queso is a utility program used to determine the operating system running at a certain IP address.
- **Operation**: It sends a series of 7 TCP packets to any one port of a machine and uses the return packets to look up the machine in a database of responses.
- **Anomalies**: These packets usually have unusual combinations of TCP flags and arrive unexpectedly, leading to a spurt in packets in the transition from the LISTEN state to itself.

#### Neptune (SYN Flood)
- **Description**: In a SYN Flood attack, an external host, often using a spoofed address, sends a SYN packet to a server to initiate a connection but never responds to the SYN-ACK packet.
- **Impact**: This leads to "half-open" TCP connections on the server, which use up resources. TCP implementations limit the number of half-open connections, and exceeding this limit causes the server to refuse subsequent connection requests.
- **Detection**: We see a spurt in the frequency of timeout transitions from the half-open state, affecting statistics (6), (7), (8), (9), (10), and (11). If the attacker changes the (spoofed) source address quickly, the attack may be obscured in some statistics but will still be detected by (7) and (9).

#### Satan/Saint
- **Description**: SAINT (Security Administrator’s Integrated Network Tool) probes for common vulnerabilities in frequently used services.
- **Anomalies**: The probes generate anomalies similar to those seen with port sweeps.

#### Mscan
- **Description**: Mscan is a tool used to enumerate systems on a network via DNS zone transfer requests and IP address scanning.
- **Anomalies**: This attack also generates anomalies similar to port sweeps.

#### Mailbomb
- **Description**: A Mailbomb attack overloads the victim's resources by sending an excessive number of emails to a server, causing the mail queue to overflow and potentially leading to system failure.
- **Detection**: Excessive traffic to the mail server leads to anomalies in statistics (7), (8), (9), (10), and (11).

#### Apache2
- **Description**: This is a DOS attack that causes an Apache web server to use disproportionate amounts of memory and CPU time by sending a large number of MIME headers with the same name.
- **Detection**: The large size of the HTTP headers increases the frequency of packets received in the ESTABLISHED state of the TCP machine, with the anomaly most pronounced in (10) and (9).

#### Back
- **Description**: In this denial of service attack against the Apache web server, an attacker submits requests with URLs containing many slashes, slowing down the server.
- **Detection**: Due to its similarity with Apache2, it is detected in the same manner.

### Email Virus Detection

#### State Machine
- **Model**: The state machine for email virus detection has three states: INIT, RCVD, and DONE.
- **Transitions**:
  - From INIT to RCVD on the event `send(from, msgID, to1, to2,...,toN)`, which models an email client depositing mail.
  - From RCVD to DONE on the event `deliver(from, msgID, to)`, which models the delivery of mail to recipients.

#### Statistical Properties
- **Timescales**: `ts = (10, 30, 120, 500, 2000, 8000, 25000)`
- **Specifications**:
  - On all frequency timescale `ts`
  - On all frequency wrt (sender) timescale `ts`

#### Experimentation
- **Context**: Part of DARPA’s SARA experiment, which aimed to determine the effectiveness of automated responses in containing intrusions.
- **Setup**: A test network with 400 email clients and one sendmail server, simulating normal email traffic using bots.
- **Virus Types**: Various simple to highly sophisticated viruses were introduced, and defense mechanisms were tested.
- **Detection**: The anomaly detector was tuned to detect attacks only when other defensive mechanisms failed, resulting in no false alarms in the seven runs where the virus was out of control.

### Related Work

#### Intrusion Detection Techniques
- **Misuse Detection**: Detects known misuses accurately but is not effective against unknown attacks.
- **Anomaly Detection**: Copes better with unknown attacks but can generate many false positives.
- **Specification-Based Detection**: A recent technique that detects novel attacks while maintaining a low false alarm rate.

#### Network Intrusion Detection Systems
- **Approaches**: Reconstruct higher-level interactions between end hosts and remote users, or operate on packet header contents.
- **Comparison**: Our approach primarily inspects network packet fields but can use data in reconstructed sessions if necessary.

#### Data Mining
- **Application**: Extracting useful information from large volumes of data for intrusion detection.
- **Research**: Ongoing research focuses on feature selection and statistical clustering techniques.
- **NATE System**: Uses statistical clustering to learn normal behavior patterns, but requires sampling and human checking.
- **EMERALD System**: Combines signature and anomaly-based approaches using a belief network.

### Conclusions

- **Approach**: Specification-based anomaly detection combines the benefits of anomaly detection and specification-based detection, providing good detection of unknown attacks and low false alarm rates.
- **Simplification**: Protocol specifications simplify the manual feature selection process.
- **Language**: A specification language for modeling state machines and stating anomaly detection information succinctly.

### References
- [1] D. Anderson, T. Lunt, H. Javitz, A. Tamaru, and A. Valdes, Next-generation Intrusion Detection Expert System (NIDES): A Summary, SRI-CSL-95-07, SRI International, 1995.
- [2] T. Bowen, D. Chee, M. Segal, R. Sekar, P. Uppuluri, and T. Shanbhag, Building Survivable Systems: An Integrated Approach Based on Intrusion Detection and Confinement, DISCEX 2000.
- [3] P.K. Chan and S. Stolfo, Toward parallel and distributed learning by metalearning, AAAI workshop in Knowledge Discovery in Databases, 1993.
- [4] D. Denning, An Intrusion Detection Model, IEEE Trans. on Software Engineering, Feb 1987.
- [5] S. Forrest, S. Hofmeyr and A. Somayaji, Computer Immunology, Comm. of ACM 40(10), 1997.
- [6] A. Ghosh, A. Schwartzbard and M. Schatz, Learning Program Behavior Profiles for Intrusion Detection, 1st USENIX Workshop on Intrusion Detection and Network Monitoring, 1999.
- [7] J. Haines, R. Lippmann, D. Fried, E. Tran, S. Boswell and M. Zissman, 1999 DARPA Intrusion Detection System Evaluation: Design and Procedures, MIT Lincoln Laboratory Technical Report TR-1062, 2001.
- [8] L. Heberlein et al, A Network Security Monitor, Symposium on Research Security and Privacy, 1990.
- [9] J. Hochberg et al, NADIR: An Automated System for Detecting Network Intrusion and Misuse, Computers and Security 12(3), May 1993.
- [10] G. Jakobson and M. Weissman, Alarm Correlation, IEEE Network, Vol. 7, No. 6., 1993.
- [11] C. Ko, M. Ruschitzka and K. Levitt, Execution Monitoring of Security-Critical Programs in Distributed Systems: A Specification-Based Approach, IEEE Symposium on Security and Privacy, 1997.
- [12] S. Kumar and E. Spafford, A Pattern-Matching Model for Intrusion Detection, Nat’l Computer Security Conference, 1994.
- [13] W. Lee and S. Stolfo, Data Mining Approaches for Intrusion Detection, USENIX Security Symposium, 1998.
- [14] R. Lippmann, D. Fried, I. Graf, J. Haines, K. Kendall, D. McClung, D. Weber, S. Webster, D. Wyschogrod, R. Cunningham and M. Zissman, Evaluating Intrusion Detection Systems: The 1998 DARPA Off-line Intrusion Detection Evaluation, Proceedings of the DARPA Information Survivability Conference and Exposition, 2000.
- [15] S. McCanne and V. Jacobson, The BSD Packet Filter: A New Architecture for User-level Packet Capture, Lawrence Berkeley Laboratory, Berkeley, CA, 1992.
- [16] B. Mukherjee, L. Heberlein and K. Levitt, Network Intrusion Detection, IEEE Network, May/June 1994.
- [17] V. Paxson, Bro: A System for Detecting Network Intruders in Real-Time, USENIX Security Symposium, 1998.
- [18] P. Porras and A. Valdes, Live Traffic Analysis of TCP/IP Gateways, Networks and Distributed Systems Security Symposium, 1998.
- [19] P. Porras and P. Neumann, EMERALD: Event Monitoring Enabled Responses to Anomalous Live Disturbances, National Information Systems Security Conference, 1997.
- [20] P. Porras and R. Kemmerer, Penetration State Transition Analysis: A Rule-based Intrusion Detection Approach, Eighth Annual Computer Security Applications Conference, 1992.
- [21] M. Roesch, Snort: Lightweight intrusion detection for networks, USENIX LISA Conference, 1999.
- [22] R. Sekar, Y. Guang, T. Shanbhag and S. Verma, A High-Performance Network Intrusion Detection System, ACM Computer and Communication Security Conference, 1999.
- [23] R. Sekar and P. Uppuluri, Synthesizing Fast Intrusion Prevention/Detection Systems from High-Level Specifications, USENIX Security Symposium, 1999.
- [24] C. Taylor and J. Alves-Foss. NATE — Network Analysis of Anomalous Traffic Events, A Low-Cost Approach, New Security Paradigms Workshop, 2001.
- [25] G. Vigna and R. Kemmerer, NetSTAT: A Network-based Intrusion Detection Approach, Computer Security Applications Conference, 1998.