### Front Pages of Alexa Top 1,000 Sites

When quota values are rounded down to the nearest multiple of 200 KiB, the inference accuracy of our attack on Linux, Windows, and Android decreases to 0.75%, 1.65%, and 0.25%, respectively.

### Browser Status Inference Attack

Figure 22 illustrates that the inference accuracy of our history stealing attack also decreases as the round-down size increases. However, the size of the round-down is larger than that for our cross-tab activity inference attack (Figure 21). Unlike the cross-tab activity inference attack, the history stealing attack relies solely on the peak size of storage footprints, so minor changes in quota values do not significantly reduce its inference accuracy. When we round quota values down to the nearest multiple of 256 KiB, the inference accuracy of our attack on Linux, Windows, and Android decreases to 31.8%, 90.0%, and 3.0%, respectively. The high accuracy on Windows can be attributed to the average peak size of storage footprints being greater than 2.5 MiB, unlike on Linux and Android (Figure 23). However, when we round quota values down to the nearest multiple of 1 MiB, the inference accuracy of our attack on Linux, Windows, and Android decreases to 1.2%, 0.4%, and 0.0%, respectively.

Consequently, we recommend that the Quota Management API should round quota values down to the nearest multiple of 1 MiB to effectively mitigate our attack (the round-down size for login status identification is below 1 MiB, so we omit further discussion). On average, this countermeasure will waste approximately 0.5 MiB of storage space for each web application that uses temporary storage.

### Realistic Evaluation

In this paper, we assume a less realistic evaluation environment that is overly favorable to attackers: a victim visits one of the Alexa Top 100 websites (closed world), does not use multiple tabs to visit several websites simultaneously, and does not generate significant background traffic (e.g., downloading a large file). This assumption has been criticized by other researchers [22, 34], and the inference accuracy would decrease in an open-world setting.

However, we emphasize that even without assuming a strong adversary who can monitor a victim’s network traffic, our attack demonstrates high inference accuracy comparable to previous attacks under similar attacker-friendly settings [6]. Adapting such attacks to a more realistic environment is beyond the scope of this paper, but several researchers have already addressed this issue [16, 24, 33, 44].

Furthermore, our countermeasure (§5.1) successfully prevents all the attacks we have described, even in such an attacker-friendly environment. This countermeasure is expected to work well in the real world without any issues. Therefore, we believe that whether we evaluate our attacks with realistic or unrealistic assumptions is not a critical problem.

### Related Work

In this section, we introduce previous side-channel attacks aimed at identifying browser activity and status.

#### CSS Visited Style
A CSS-based attack [2] exploits style differences between visited and unvisited links to infer the browsing history of a victim. This attack can directly access the history information, providing accurate identification. Wondracek et al. [46] extended this attack to infer the real identity of a victim using information about visited groups in online social networks (OSNs). Baron [3] proposed an effective countermeasure that pretends all links are unvisited when a script attempts to inspect link styles. All major browsers have adopted this countermeasure, rendering CSS-based attacks ineffective. To circumvent this, Weinberg et al. [45] used a webcam and user interaction, though it is difficult to implement.

#### Timing Information
Timing attacks measure the time it takes to load web pages to infer a victim’s browsing history and other private information. Felten and Schneider [10] first proposed timing attacks using web and DNS caches. Bortz et al. [4] further revealed that an attacker can infer the login status of a victim and the number of items in their shopping cart by measuring page loading times. Jia et al. [21] developed an advanced timing attack that measures the loading time of web pages containing location-sensitive content to infer a victim’s location. Researchers have also proposed scriptless timing attacks using meta-refresh tags [1] and CSS [28]. However, timing attacks are error-prone, especially under poor network conditions. Goethem et al. [12] introduced new web-based timing attacks that estimate the size of cross-origin resources regardless of network conditions.

#### Vulnerable APIs
Researchers have explored side-channel attacks using vulnerable APIs of HTML5 and CSS, as we did with the Quota Management API. Kotcher et al. [23] proposed two timing attacks using CSS filters, inferring the login status of a victim by measuring frame rates. They also inferred rendered pixels by measuring the frame rate of each pixel, although these attacks were slow and inaccurate. Tian et al. [41] identified that the Screen Sharing API can be used to peek at a victim’s screen and perform cross-site request forgery (CSRF) and history stealing attacks, assuming a strong adversary with permission to use the API. Lee et al. [26] discovered that the Application Cache API allows attackers to check the status of cross-origin resources, though this attack fails if target websites make all content dynamic.

Concurrently and independently, Goethem et al. [13] proposed attacks to infer the size of cross-origin resources using the ServiceWorker and Quota Management API. While their side channel is similar to ours, we consider both active and passive attacks to monitor real-time behavior without generating additional resource requests. Goethem et al. focused primarily on active attacks to probe cross-origin resource sizes, similar to §4.6 and §4.7.

#### Network Traffic
Numerous researchers [5–7, 16, 17, 22, 24, 29, 33, 39, 43, 44] have shown that network traffic analysis can reveal which website a victim is visiting, even when protected by HTTPS or Tor. Various features of network traffic, such as packet timing, ordering, and size, can be used for inference. These attacks, however, assume a strong adversary who can monitor network traffic and attack victims in a monitored network.

#### Local Resources
Researchers have also considered side-channel attacks using a victim’s local resources, such as memory, power consumption, and GPU. Jana and Shmatikov [20] demonstrated that a malicious application can determine which websites a victim has visited by monitoring memory footprints. Clark et al. [8] measured power consumption to identify visited websites. Michalevsky et al. [32] analyzed smartphone power usage to infer device location. Lee et al. [27] analyzed GPU memory dumps to recognize visited websites. These attacks assume a strong adversary with access to the victim’s local resources, requiring execution rights on the operating system or physical access to the machine.

### Conclusion

In this paper, we introduced a novel side-channel attack using the Quota Management API. By analyzing storage footprints, a web attacker can identify which website a victim is currently visiting and the status of the victim's browser. Our experiments confirmed that the inference accuracy of our attacks is high, often exceeding 90%. To mitigate our attack, we suggested a round-down method that substantially reduces the accuracy while requiring only minor modifications to the Quota Management API.

### Acknowledgments

We would like to thank the anonymous reviewers for their invaluable comments and suggestions. This work was supported by the Samsung Research Funding Center of Samsung Electronics under Project Number SRFC-TB1403-04.

### References

[1] T. G. Abbott, K. J. Lai, M. R. Lieberman, and E. C. Price. Browser-based attacks on Tor. In Privacy Enhancing Technologies Symposium (PETS), 2010.

[2] L. D. Baron. :visited support allow queries into global history. https://bugzilla.mozilla.org/show_bug.cgi?id=147777, 2002.

[3] L. D. Baron. Preventing attacks on a user’s history through CSS :visited selectors. http://dbaron.org/mozilla/visited-privacy, 2010.

[4] A. Bortz, D. Boneh, and P. Nandy. Exposing private information by timing web applications. In Proceedings of the 16th International World Wide Web Conference (WWW), Alberta, Canada, May 2007.

[5] X. Cai, R. Nithyanand, T. Wang, R. Johnson, and I. Goldberg. A systematic approach to developing and evaluating website fingerprinting defenses. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), Scottsdale, Arizona, Nov. 2014.

[6] X. Cai, X. C. Zhang, B. Joshi, and R. Johnson. Touching from a distance: Website fingerprinting attacks and defenses. In Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS), Raleigh, NC, Oct. 2012.

[7] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel leaks in web applications: A reality today, a challenge tomorrow. In Proceedings of the 31st IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2010.

[8] S. S. Clark, H. Mustafa, B. Ransford, J. Sorber, K. Fu, and W. Xu. Current events: Identifying webpages by tapping the electrical outlet. In European Symposium on Research in Computer Security (ESORICS), 2013.

[9] Facebook Help Center. What are the privacy options for groups? https://www.facebook.com/help/220336891328465.

[10] E. W. Felten and M. A. Schneider. Timing attacks on web privacy. In Proceedings of the 7th ACM Conference on Computer and Communications Security (CCS), Athens, Greece, Oct. 2000.

[11] T. Gentilcore. Chrome’s 10 caches. http://gent.ilcore.com/2011/02/chromes-10-caches.html, 2011.

[12] T. V. Goethem, W. Joosen, and N. Nikiforakis. The clock is still ticking: Timing attacks in the modern web. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS), Denver, Colorado, Oct. 2015.

[13] T. V. Goethem, M. Vanhoef, F. Piessens, and W. Joosen. Request and conquer: Exposing cross-origin resource size. In Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug. 2016.

[14] Google Developers. Managing HTML5 offline storage. https://developers.google.com/chrome/whitepapers/storage.

[15] Google Developers. Web developer’s guide to prerendering in Chrome. https://developers.google.com/chrome/whitepapers/prerender.

[16] X. Gu, M. Yang, and J. Luo. A novel website fingerprinting attack against multi-tab browsing behavior. In Proceedings of 19th IEEE International Conference on Computer Supported Cooperative Work in Design (CSCWD), 2015.

[17] J. Hayes and G. Danezis. k-fingerprinting: a robust scalable website fingerprinting technique. In Proceedings of the 25th USENIX Security Symposium (Security), Austin, TX, Aug. 2016.

[18] I. Hickson. 7.7 offline web applications – HTML standard. http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html, 2014.

[19] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protecting browser state from web privacy attacks. In Proceedings of the 15th International World Wide Web Conference (WWW), Edinburgh, Scotland, May 2006.

[20] S. Jana and V. Shmatikov. Memento: Learning secrets from process footprints. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May 2012.

[21] Y. Jia, X. Dong, Z. Liang, and P. Saxena. I know where you’ve been: Geo-inference attacks via the browser cache. In Web 2.0 Security & Privacy (W2SP), 2014.

[22] M. Juarez, S. Afroz, G. Acar, C. Diaz, and R. Greenstadt. A critical evaluation of website fingerprinting attacks. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS), Scottsdale, Arizona, Nov. 2014.

[23] R. Kotcher, Y. Pei, P. Jumde, and C. Jackson. Cross-origin pixel stealing: Timing attacks using CSS filters. In Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS), Berlin, Germany, Oct. 2013.

[24] A. Kwon, M. AlSabah, D. Lazar, M. Dacier, and S. Devadas. Circuit fingerprinting attacks: Passive deanonymization of Tor hidden services. In Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.

[25] L. Latecki, Q. Wang, S. Koknar-Tezel, and V. Megalooikonomou. Optimal subsequence bijection. In Proceedings of 7th IEEE International Conference on Data Mining (ICDM), 2007.

[26] S. Lee, H. Kim, and J. Kim. Identifying cross-origin resource status using application cache. In Proceedings of the 2015 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2015.

[27] S. Lee, Y. Kim, J. Kim, and J. Kim. Stealing webpages rendered on your browser by exploiting GPU vulnerabilities. In Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2014.

[28] B. Liang, W. You, L. Liu, W. Shi, and M. Heiderich. Scriptless timing attacks on web browser privacy. In IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2014.

[29] M. Liberatore and B. N. Levine. Inferring the source of encrypted HTTP connections. In Proceedings of the 13th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA, Oct.–Nov. 2006.

[30] J. Mann and A. Jain. Page visibility (second edition). http://www.w3.org/TR/page-visibility/, 2013.

[31] N. Mehta, J. Sicking, E. Graff, A. Popescu, J. Orlow, and J. Bell. Indexed database API. http://www.w3.org/TR/IndexedDB/, 2013.

[32] Y. Michalevsky, A. Schulman, G. A. Veerapandian, D. Boneh, and G. Nakibly. PowerSpy: Location tracking using mobile device power analysis. In Proceedings of the 24th USENIX Security Symposium (Security), Washington, DC, Aug. 2015.

[33] A. Panchenko, F. Lanze, A. Zinnen, M. Henze, J. Pennekamp, K. Wehrle, and T. Engel. Website fingerprinting at Internet scale. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA, Feb. 2016.

[34] M. Perry. A critique of website traffic fingerprinting attacks. https://blog.torproject.org/blog/critique-website-traffic-fingerprinting-attacks, 2013.

[35] D. Ross and T. Gondrom. HTTP header field X-Frame-Options. RFC 7034, 2013.

[36] A. Russell, J. Song, and J. Archibald. Service Workers. http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html.

[37] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting frame busting: A study of clickjacking vulnerabilities on popular sites. In Web 2.0 Security & Privacy (W2SP), 2010.

[38] S. Salvador and P. Chan. Toward accurate dynamic time warping in linear time and space. Intelligent Data Analysis, 11(5):561–580, 2007.

[39] Q. Sun, D. R. Simon, Y.-M. Wang, W. Russell, V. N. Padmanabhan, and L. Qiu. Statistical identification of encrypted web browsing traffic. In Proceedings of the 23rd IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2002.

[40] The Chromium Projects. GPU program caching. https://docs.google.com/a/chromium.org/document/d/1Vceem-nF4TCICoeGSh7OMXxfGuJEJYblGXRgN9V9hcE/edit.

[41] Y. Tian, Y.-C. Liu, A. Bhosale, L.-S. Huang, P. Tague, and C. Jackson. All your screens are belong to us: Attacks exploiting the HTML5 screen sharing API. In Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland), San Jose, CA, May 2014.

[42] Tor. Tor project. https://www.torproject.org.

[43] T. Wang, X. Cai, R. Nithyanand, R. Johnson, and I. Goldberg. Effective attacks and provable defenses for website fingerprinting. In Proceedings of the 23rd USENIX Security Symposium (Security), San Diego, CA, Aug. 2014.

[44] T. Wang and I. Goldberg. On realistically attacking Tor with website fingerprinting. Technical report, 2015.

[45] Z. Weinberg, E. Y. Chen, P. R. Jayaraman, and C. Jackson. I still know what you visited last summer: Leaking browsing history via user interaction and side channel attacks. In Proceedings of the 32nd IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2011.

[46] G. Wondracek, T. Holz, E. Kirda, and C. Kruegel. A practical attack to de-anonymize social network users. In Proceedings of the 31st IEEE Symposium on Security and Privacy (Oakland), Oakland, CA, May 2010.

[47] K. Yasuda. Quota management API. http://www.w3.org/TR/quota-api/, 2013.