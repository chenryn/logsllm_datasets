### S. Custom Permission Vulnerabilities

#### A. Permission Group Inheritance
When the `WRITE_EXTERNAL_STORAGE` permission is granted, other dangerous permissions within the same group, `android.permission-group.UNDEFINED`, are automatically granted without user intervention.

**Discussion:**
A hard-coded mapping table would enhance security. However, Android allows developers to place custom permissions into system groups, which complicates the management of dynamic group information. According to commit logs [17], [8] in the Android OS source code, the `UNDEFINED` group was introduced as a placeholder to prevent apps from querying grouping information via `PackageManager`. The developers noted, "the grouping was never meant to be authoritative, but this was not documented."

**Impact:**
DS#2 and its exploit have been confirmed by Google with a High severity rating (AndroidID-153879813), and a CVE ID has been assigned: CVE-2020-0418.

#### B. Custom Permission Elevation
During Android OS initialization (device booting), `PackageManagerService` (PMS) manages package-related operations such as installation and uninstallation. PMS reads `packages.xml` and `runtime-permissions.xml` to retrieve stored permission declarations and grant states. It then scans APKs in system folders and adds parsed permissions to an internal structure. If the current owner of a permission is not the system, the permission is overridden. However, we found that:

**DS#3:**
When the Android OS overrides a custom permission (changing the owner), the granting status of this permission is not revoked, leading to permission elevation. This means that if an app is granted a custom permission with the same name as a system permission, the custom permission will be elevated to a system permission after the override.

**Attack Case:**
On an Android 9 device, an adversary creates an app `app-ds3` that defines and requests a custom permission `ACTIVITY_RECOGNITION`. After the user installs `app-ds3` and performs an OTA update to Android 10, the device reboots. During OS initialization, `app-ds3` is automatically granted the `ACTIVITY_RECOGNITION` permission, which is now a dangerous system permission, resulting in privilege escalation.

**Discussion:**
DS#3 was introduced when Google fixed the Pileup flaw discovered by Xing et al. [45]. The fix involved overriding all permissions declared by the system during OS initialization, but it did not revoke the previous granting status, leading to DS#3.

**Impact:**
DS#3 and its exploit have been confirmed by Google with a High severity rating (AndroidID-154505240), and a CVE ID has been assigned: CVE-2021-0306.

#### C. Inconsistent Permission Definitions
An app installation can update an existing custom permission defined by itself. If the protection level changes from normal or signature to dangerous, the system retains the old protection level to block permission upgrade attacks. However, we found that:

**DS#4:**
The permission definition held by the system differs from the definition provided by the owner app, leading to inconsistent permission definitions. If the system logic refreshes permission granting status based on the source package, a privilege escalation issue may occur. During OS initialization, PMS scans APKs in app folders and updates the protection levels of existing custom permissions. Unlike DS#3, the exploit of DS#4 does not require a new permission introduced in Android 10; a simple device reboot is sufficient.

**Attack Case:**
An adversary creates an app `app-ds4` that defines and requests a normal custom permission `com.test.cp`. An updated version of `app-ds4` changes the protection level of `com.test.cp` to dangerous and places it in the `PHONE` group, also requesting the `CALL_PHONE` permission. After the user installs and updates `app-ds4` and reboots the device, `app-ds4` automatically obtains the `com.test.cp` (now a dangerous custom permission) and can obtain the `CALL_PHONE` permission without user consent, as both permissions belong to the `PHONE` group.

**Discussion:**
DS#4 was introduced when Google fixed a vulnerability discovered by Tuncay et al. [41]. The fix only considered breaking the attack flow with minimal code changes but ignored the consistency issue.

**Impact:**
DS#4 and its exploit have been confirmed by Google with a High severity rating (AndroidID-168319670), and a CVE ID has been assigned: CVE-2021-0317.

### VII. Secure Custom Permissions
This section proposes improvements to mitigate current security risks and discusses general guidelines for custom permissions, considering backward compatibility.

#### A. Mitigation
For each design shortcoming, we propose a minimum modification (Google's preferred fix) to immediately prevent the corresponding attacks:
- **DS#1:** Revoke grants for apps when a custom permission is removed.
- **DS#2:** Remove the current inconsistent mapping data (the `UNDEFINED` group).
- **DS#3:** Revoke grants for apps when the system takes ownership of a custom permission.
- **DS#4:** Revoke grants for apps during permission updates.

#### B. General Security Guidelines
While the above solutions address specific flaws, future versions of Android OS may introduce new custom permission vulnerabilities. Here are some general design guidelines to secure custom permissions:
- **Guideline#1:** Revoke app grants if the permission definition (owner, grouping, protection level) is changed.
- **Guideline#2:** Ensure the system's permission definition is consistent with the owner app's declaration.

### VIII. Discussion
We proposed CUPERFUZZER to detect vulnerabilities in Android custom permissions and discussed our findings. Some limitations include:
- **Attacks in Practice:** Some attacks require multiple user interactions, which may be difficult to execute in practice. A user study could demonstrate the feasibility of these attacks.
- **Test Case Generation:** CUPERFUZZER generates massive test cases randomly. To improve effectiveness, a feedback mechanism could generate more interesting test cases, but it must balance diversity and effectiveness.

### IX. Related Work
Previous research on Android permissions has focused primarily on system permissions, with limited attention to custom permissions. We review related work and highlight the unique contributions of our study, including the systematic analysis of custom permission security implications and the development of CUPERFUZZER.

### X. Conclusion
In this paper, we systematically studied the security implications of Android custom permissions and designed CUPERFUZZER to automatically detect related privilege escalation issues. During real-world experiments, it discovered 2,384 attack vectors, demonstrating the need for improved security measures and guidelines.