### Evaluation of Graph Queries on τ-Calculus Database

#### System Configuration
The evaluation was conducted on four FCCE data nodes, each a CentOS virtual machine (VM) equipped with four virtual cores and 16GB of memory, hosted on four physical blades. All services were initiated by the `init` process in Linux/FreeBSD with the root user. Queries with known data issues were excluded from the analysis.

#### Performance Metrics
We assessed the fastest and slowest graph queries to the τ-calculus database, focusing on throughput and scalability. By incorporating data locality tuning into the low-level key-value store schema, we observed that the performance of graph queries is significantly influenced by the degree of data locality. Specifically, queries with tight data locality (sequential access) tend to be faster, while those with loose data locality (random access) are slower. This distinction is particularly relevant in the context of distributed graph retrieval.

### 7.1 Graph Query by Event Time Range

Temporal locality in storage is a key feature of the τ-calculus database layer (Section 4.4). Events that occur close in time are stored in adjacent or nearby time slices, facilitating rapid retrieval for temporal reasoning.

**Experiment Setup:**
- **Time Ranges:** We randomly selected time ranges of 60, 300, ..., 28800 seconds.
- **Query Execution:** For each time range, a simple τ-calculus query was issued to retrieve a graph composed of all events within the specified range. Each range was tested 100 times, with caches cleared between runs.
- **Event Rate:** During the DARPA competition, a monitored host emitted approximately 100,000 events per hour on average.

**Results:**
- **Figure 12a:** The average time to retrieve, construct, and return the graph for all events within the specified time range was 0.47 seconds.

### 7.2 Graph Query by Element UUIDs

Data locality does not always exist, especially for unique identifiers like UUIDs. According to RFC 4122, a UUID is a 128-bit number that is random and unique for each element (entity or event) in a computation graph (CG). Retrieving elements by UUID is analogous to random data access, as opposed to sequential access.

**Experiment Setup:**
- **UUID Retrieval:** To process a graph query with multiple UUIDs, the τ-calculus database retrieves the corresponding FCCE buckets containing the requested UUIDs.
- **Graph Construction:** Events and entities are constructed, and additional information may be fetched to complete the graph before returning it.
- **Performance:** On average, it took 0.46 seconds to retrieve 128 elements, as shown in Figure 12b. Additionally, 1.2 million unrelated elements were fetched due to the lack of data locality.

**Results:**
- **Figure 12b:** Despite the lack of data locality, the τ-calculus graph database demonstrated strong scalability across distributed storage.

### 8. Discussion

This paper not only showcases the capabilities of threat intelligence computing with τ-calculus but also highlights promising research opportunities in this new security paradigm.

#### Incomplete Computation Graph
Incomplete data is a significant challenge for any threat discovery procedure. Implementing a monitor that guarantees a complete view of a system at various monitoring levels is non-trivial. While recent research has advanced state-of-the-art monitoring techniques, transmission and long-term storage remain open problems. Given the realistic assumption that monitoring may not be complete, a systematic approach to handling incomplete CGs in threat intelligence computing is essential. This includes balancing data collection costs with data quality.

#### Multi-Level Computation Graph
Threat intelligence often involves data at various granularities, and switching between these granularities is crucial for different tasks. Threat intelligence computing offers the opportunity to fold or unfold CGs, allowing analysts to easily zoom between different levels of detail.

#### Graph Pattern Constraint Solving
The current implementation of the τ-calculus graph pattern constraint solver uses heuristics to reorder constraints. Research into optimal constraint ordering algorithms could enhance the solving process, though this is challenging due to the data-dependent nature of the problem and the complexity of pattern composition.

#### Machine Learning with Graph Languages
Many detection algorithms, especially those based on machine learning, do not have straightforward equivalents in graph languages. While providing external function interfaces is a common solution, developing native data mining and machine learning algorithms in graph computation languages would be beneficial.

#### Higher-Order Graph Computation
Graph computation performed on top of another graph, such as a CG, can be described as a higher-order graph. This allows for the collection and analysis of large numbers of threat intelligence computing processes, enabling knowledge extraction and threat intelligence mining.

### 9. Related Work

#### Static Threat Model Approaches
A variety of effective approaches have been developed with fixed threat models, which can be integrated into threat intelligence computing. These include:
- Application of human-defined knowledge
- Modeling specific malicious behaviors (e.g., trojans, ransomware, botnets)
- Anomaly detection
- Knowledge discovery on graphs
- Attack causality tracking and inference

#### Dynamic Threat Model Approaches
Dynamic threat models address the rapid evolution of threats and the need for prompt creation and evaluation of new threat models. Existing threat hunting practices, such as importing diverse data into a SIEM and employing SOC analysts, fulfill this need. Automation and graph-based forensics inspired the design of τ-calculus.

### 10. Conclusion

This paper introduces threat intelligence computing as a methodology for agile threat hypothesis composition and validation. By framing threat discovery as a graph computation problem, it eliminates heterogeneous data representation and provides an interactive programming environment for rapid automated task development and human knowledge codification. The utility, practicality, and potential of this methodology are demonstrated through the design, implementation, and evaluation of τ-calculus, a domain-specific graph computation platform for threat intelligence computing. The paper also highlights new challenges and opportunities for future research in this field.

### Acknowledgments

The authors thank their DARPA teammates, monitoring teams, and the red team for their contributions. They also acknowledge the support of the Air Force Research Laboratory (AFRL) and the Defense Advanced Research Agency (DARPA).

### References

[1] Luca Aceto and Andy Gordon. 2005. Algebraic Process Calculi: The First Twenty-Five Years and Beyond. BRICS publications, Bertinoro, Forli, Italy.
[2] Adam Bates, Dave Tian, Kevin R B Butler, and Thomas Moyer. 2015. Trustworthy Whole-System Provenance for the Linux Kernel. In Proceedings of USENIX Security Symposium. ACM, Washington, DC, USA, 319–334.
[3] Mick Bauer. 2006. Paranoid Penguin: An Introduction to Novell AppArmor. Linux Journal 2006, 148 (Aug 2006), 13.
[4] Konstantin Berlin, David Slater, and Joshua Saxe. 2015. Malicious Behavior Detection Using Windows Audit Logs. In Proceedings of the 8th ACM Workshop on Artificial Intelligence and Security (AISec ’15). ACM, Denver, Colorado, USA, 35–44.
[5] Leyla Bilge, Davide Balzarotti, William Robertson, Engin Kirda, and Christopher Kruegel. 2012. Disclosure: Detecting Botnet Command and Control Servers Through Large-scale NetFlow Analysis. In Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC) (ACSAC ’12). ACM, Orlando, Florida, USA, 129–138.
[6] Kevin Borders and Atul Prakash. 2004. Web Tap: Detecting Covert Web Traffic. In Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS ’04). ACM, Washington, DC, USA, 110–120.
[7] Sven Bugiel, Lucas Davi, Alexandra Dmitrienko, Thomas Fischer, Ahmad-Reza Sadeghi, and Bhargava Shastry. 2012. Towards Taming Privilege-Escalation Attacks on Android. In Proceedings of the 20th Network and Distributed System Security Symposium (NDSS). The Internet Society, San Diego, California, USA.
[8] Ahmet Salih Buyukkayhan, Alina Oprea, Zhou Li, and William Robertson. 2017. Lens on the endpoint: Hunting for malicious software through endpoint data analysis. In International Symposium on Research in Attacks, Intrusions, and Defenses (RAID). Springer International Publishing, Atlanta, USA, 73–97.
[9] Carbon Black. 2018. Cb Response | Incident Response & Threat Hunting | Carbon Black. Retrieved August 10, 2018 from https://www.carbonblack.com/products/cb-response/
[10] Varun Chandola, Arindam Banerjee, and Vipin Kumar. 2009. Anomaly Detection: A Survey. ACM Comput. Surv. 41, 3 (July 2009), 15:1–15:58.
[11] Chen Chen, Cindy X. Lin, Matt Fredrikson, Mihai Christodorescu, Xifeng Yan, and Jiawei Han. 2009. Mining Graph Patterns Efficiently via Randomized Summaries. Proc. VLDB Endow. 2, 1 (Aug 2009), 742–753.
[12] DataStax. 2018. Titan: Distributed Graph Database. Retrieved August 10, 2018 from http://titan.thinkaurelius.com/
[13] Hervé Debar and Andreas Wespi. 2001. Aggregation and correlation of intrusion-detection alerts. In Proceedings of the 4th International Symposium on Recent Advances in Intrusion Detection (RAID). Springer International Publishing, Davis, CA, USA, 85–103.
[14] Dorothy E. Denning. 1987. An Intrusion-Detection Model. IEEE Transactions on Software Engineering 13, 2 (February 1987), 222–232.
[15] Sean Dillon. 2017. DoublePulsar Initial SMB Backdoor Ring 0 Shellcode Analysis. Retrieved August 10, 2018 from https://zerosum0x0.blogspot.com/2017/04/doublepulsar-initial-smb-backdoor-ring.html
[16] Min Du, Feifei Li, Guineng Zheng, and Vivek Srikumar. 2017. DeepLog: Anomaly Detection and Diagnosis from System Logs through Deep Learning. In Proceedings of the 2017 ACM Conference on Computer and Communications Security (CCS). ACM, Dallas, Texas, USA, 1285–1298.
[17] H.H. Feng, J.T. Giffin, Yong Huang, S. Jha, Wenke Lee, and B.P. Miller. 2004. Formalizing sensitivity in static analysis for intrusion detection. In Proceedings of the 2004 IEEE Symposium on Security and Privacy. IEEE Press, Oakland, California, USA, 194–208.
[18] Yu Feng, Osbert Bastani, Ruben Martins, Isil Dillig, and Saswat Anand. 2017. Automated Synthesis of Semantic Malware Signatures using Maximum Satisfiability. In Proceedings of the Network and Distributed System Security Symposium (NDSS). The Internet Society, San Diego, California, USA.
[19] Stephen Fewer. 2013. Reflective DLL injection library. Retrieved August 10, 2018 from https://github.com/stephenfewer/ReflectiveDLLInjection
[20] Stephanie Forrest, Steven A Hofmeyr, Anil Somayaji, and Thomas A Longstaff. 1996. A sense of self for Unix processes. In Proceedings of the 1996 IEEE Symposium on Security and Privacy. IEEE Press, Oakland, California, USA, 120–128.
[21] Thomas Fox-Brewster. 2017. An NSA Cyber Weapon Might Be Behind WannaCry. Forbes. Retrieved August 10, 2018 from https://www.forbes.com/sites/thomasbrewster/2017/05/15/nsa-cyber-weapon-wannacry/#5d6f4c9a4b7c