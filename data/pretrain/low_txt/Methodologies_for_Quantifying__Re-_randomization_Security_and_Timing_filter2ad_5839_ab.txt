### Acknowledgment
This work is supported by ONR Grant N00014-17-1-2498 and DARPA/ONR N66001-17-C-4052.

### References
1. M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, "Control-Flow Integrity," in *Proceedings of the 12th ACM Conference on Computer and Communications Security*. ACM, 2005, pp. 340–353.
2. M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberg, and J. Pewny, "You Can Run but You Can't Read: Preventing Disclosure Exploits in Executable Code," in *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*. ACM, 2014, p. 1342.
3. A. Bittau, A. Belay, A. Mashtizadeh, D. Mazières, and D. Boneh, "Hacking Blind," in *Security and Privacy (SP), 2014 IEEE Symposium on*. IEEE, 2014, pp. 227–242.
4. N. Carlini and D. Wagner, "ROP Is Still Dangerous: Breaking Modern Defenses," in *USENIX Security Symposium*, 2014, pp. 385–399.
5. M. Conti, S. Crane, T. Frassetto, A. Homescu, G. Koppen, P. Larsen, C. Liebchen, M. Perry, and A.-R. Sadeghi, "Selfrando: Securing the Tor Browser Against De-Anonymization Exploits," *Proceedings on Privacy Enhancing Technologies*, vol. 2016, no. 4, pp. 454–469, 2016.
6. S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz, "Readactor: Practical Code Randomization Resilient to Memory Disclosure," in *Security and Privacy (SP), 2015 IEEE Symposium on*. IEEE, 2015, pp. 763–780.
7. A. Haas, A. Rossberg, D. L. Schuff, B. L. Titzer, M. Holman, D. Gohman, L. Wagner, A. Zakai, and J. Bastien, "Bringing the Web Up to Speed with WebAssembly," in *ACM SIGPLAN Notices*, vol. 52, no. 6. ACM, 2017, pp. 185–200.
8. W. H. Hawkins, J. D. Hiser, M. Co, A. Nguyen-Tuong, and J. W. Davidson, "ZIPR: Efficient Static Binary Rewriting for Security," in *2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN)*. IEEE, 2017, pp. 559–566.
9. A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz, "Profile-Guided Automated Software Diversity," in *Proceedings of the 2013 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)*. IEEE Computer Society, 2013, pp. 1–11.
10. H. Koo, Y. Chen, L. Lu, V. P. Kemerlis, and M. Polychronakis, "Compiler-Assisted Code Randomization," in *2018 IEEE Symposium on Security and Privacy (SP)*. IEEE, 2018, pp. 461–477.
11. V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song, "Code-Pointer Integrity," in *OSDI*, vol. 14, 2014, p. 00000.
12. D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell, and M. Horowitz, "Architectural Support for Copy and Tamper-Resistant Software," *ACM SIGPLAN Notices*, vol. 35, no. 11, pp. 168–177, 2000.
13. K. Lu and H. Hu, "Where Does It Go? Refining Indirect-Call Targets with Multi-Layer Type Analysis," in *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security*, 2019, pp. 1867–1881.
14. R. Roemer, E. Buchanan, H. Shacham, and S. Savage, "Return-Oriented Programming: Systems, Languages, and Applications," *ACM Transactions on Information and System Security (TISSEC)*, vol. 15, no. 1, p. 2, 2012.
15. K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi, "Just-in-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization," in *Security and Privacy (SP), 2013 IEEE Symposium on*. IEEE, 2013, pp. 574–588.
16. D. Williams-King, G. Gobieski, K. Williams-King, J. P. Blake, X. Yuan, P. Colp, M. Zheng, V. P. Kemerlis, J. Yang, and W. Aiello, "Shuffler: Fast and Deployable Continuous Code Re-Randomization," in *OSDI*, 2016, pp. 367–382.

### Poster: Methodologies for Quantifying (Re-)Randomization Security and Timing under JIT-ROP

**Authors:**
- Md Salman Ahmed, Ya Xiao, Gang Tan, Kevin Snow, Fabian Monrose, Danfeng (Daphne) Yao
- Affiliations: 
  - 1. Computer Science, Virginia Tech
  - 2. Computer Science & Engineering, Penn State
  - 3. Zeropoint Dynamics, LLC
  - 4. Computer Science, UNC at Chapel Hill
- Contact: {ahmedms, yax99, danfeng}@vt.edu, PI:EMAIL, PI:EMAIL, PI:EMAIL

#### 1. Motivation
- From a defense-in-depth perspective, deploying multiple defenses is necessary.
- Feasibility analysis and quantitative evaluation of these defenses are also essential.
- Despite the strong security provided by other defenses such as CFI [1], CPI [2], XoM [3]/XnR [4], investigations into ASLR are crucial.
- General methodologies for measuring ASLR security and timing using various metrics are needed.
- ASLR security and timing metrics can include:
  - Interval choices
  - Gadget availability
  - Speed of convergence
  - Code pointer leakage
  - Gadget convergence
  - Gadget chain formation

#### 2. Challenges
- How to quantify the impact of fine-grained ASLR or code randomization or re-randomization schemes.
- How to quantify the quality of a gadget chain.

#### 3. Approach and Experimental Design
- We identified 21 JIT-ROP gadgets, including the Turing-complete (TC) gadget set.
- We measured gadgets and re-randomization timing with (re-)randomization schemes enforced by 5 tools for 20 applications and 25 libraries utilizing a native JIT-ROP implementation. Figure 1 illustrates the recursive code harvest process.
- To measure the upper bound, we recorded the time for a JIT-ROP attacker to harvest the TC gadget set.
- To measure the impact of code pointer locations, we ran the code harvest process starting from different code pointer locations and tracked gadget convergence and convergence time.
- We measured the impact of single-round randomization by comparing the number of TC gadgets available in randomized and non-randomized versions of an application.
- We evaluated gadget quality using the register corruption rate.

**Figure 1:** An illustration of the recursive code harvest process of JIT-ROP.

**Figure 2:** Min, max, and average time needed to harvest the TC gadget set.

- Instruction-level randomization does not preserve the TC expressiveness of JIT-ROP payloads. Our findings suggest that current fine-grained randomization solutions do not impose significant gadget corruption. Additionally, a stack has a higher risk of revealing dynamic libraries than a heap or data segment due to the higher number of libc pointers, on average more than 16 in the stack than in heaps or data segments.

#### 4. Evaluation Results
- We found that the re-randomization upper bound varies from 0.89 to 5 seconds in our test applications and browsers on our machine. Figure 2 shows the re-randomization upper bounds and intervals along with the trajectory lines.
- For all applications, we observed that the pointer's location does not have any impact on gadget availability. However, the times needed to harvest the TC gadget set vary from one pointer to another (Figure 3).

**Figure 3:** Gadget convergence with trajectory lines. Each ▲ and ● represent a re-randomization upper bound and re-randomization interval, respectively.

- We report our experimental findings on various aspects of code (re-)randomization that impact code reuse attacks:
  - Upper bound for re-randomization interval choices
  - Code pointer locations
  - Gadget availability
  - Gadget convergence
  - Speed of convergence
  - Gadget chain formation

#### 5. Conclusion
We presented multiple general methodologies for quantitatively measuring ASLR security under the JIT-ROP threat model and conducted a comprehensive measurement study. One method is for computing the number of various gadget types and their quality. Another method is for experimentally determining the upper bound of re-randomization intervals. The upper bound helps guide re-randomization adopters to make more informed configuration decisions.

### References
1. Abadi, Martín, et al. "Control-Flow Integrity Principles, Implementations, and Applications." *ACM Transactions on Information and System Security (TISSEC)* 13.1 (2009): 1-40.
2. Kuznetzov, Volodymyr, et al. "Code-Pointer Integrity." *The Continuing Arms Race: Code-Reuse Attacks and Defenses*. 2018. 81-116.
3. Lie, David, et al. "Architectural Support for Copy and Tamper-Resistant Software." *ACM SIGPLAN Notices* 35.11 (2000): 168-177.
4. Backes, Michael, et al. "You Can Run but You Can't Read: Preventing Disclosure Exploits in Executable Code." *Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security*. 2014.
5. Snow, Kevin Z., et al. "Just-in-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization." *2013 IEEE Symposium on Security and Privacy*. IEEE, 2013.

**Yao Group on Cyber Security**
[http://yaogroup.cs.vt.edu/](http://yaogroup.cs.vt.edu/)
2020