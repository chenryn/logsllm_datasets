### Scripting Attacks and Taint Analysis

Scripting attacks, such as Cross-Site Scripting (XSS), have been a significant concern in web security [54, 56, 61]. Some researchers have combined dynamic taint analysis with static analysis to detect vulnerabilities in web applications [5, 62]. For instance, Sekar [56] introduced taint inference, a technique that applies syntax and taint-aware policies to block injection attacks.

#### Taint Performance and Frameworks

The increasing need for more efficient dynamic taint analyses was initially addressed by binary instrumentation frameworks [21, 52]. However, due to the high overhead associated with binary instrumentation, more efficient compiler-based [42, 64] and hardware-based [25, 26, 59, 60] approaches were later proposed. Recent studies have shown that a dynamic software-based approach, augmented by static analysis, can introduce minimal overhead and thus be practical [20].

#### Extensions to Taint Analysis

Our rules assume data is either tainted or not. For example, Newsome et al. [49] proposed a generalization of taint analysis that quantifies the influence an input has on a particular program statement based on channel capacity.

### Conclusion

Dynamic program analyses, particularly dynamic taint analysis and forward symbolic execution, have become increasingly popular in security. Despite their widespread usage, there has been limited effort to formally define these analyses and summarize the critical issues that arise when implementing them in a security context.

In this paper, we introduced a language to demonstrate the critical aspects of dynamic taint analysis and forward symbolic execution. We defined the operational semantics for our language and used these semantics to formally define dynamic taint analysis and forward symbolic execution. Our formalisms highlight the challenges, techniques, and trade-offs when using these techniques in a security setting.

### Acknowledgements

We would like to thank Dawn Song and the BitBlaze team for their valuable ideas and advice on dynamic taint analysis and forward symbolic execution. We also extend our gratitude to our shepherd Andrei Sabelfeld, JongHyup Lee, Ivan Jager, and our anonymous reviewers for their insightful comments and suggestions. This work is supported in part by CyLab at Carnegie Mellon under grant DAAD19-02-1-0389 from the Army Research Office. The views expressed herein are those of the authors and do not necessarily represent the views of our sponsors.

### References

[1] Binary analysis platform (BAP). http://bap.ece.cmu.edu.
[2] BitBlaze binary analysis project. http://bitblaze.cs.berkeley.edu, 2007.
[3] Andrew Appel. Modern Compiler Implementation in ML. Cambridge University Press, 1998.
[4] Gogul Balakrishnan. WYSINWYX: What You See Is Not What You eXecute. PhD thesis, Computer Science Department, University of Wisconsin at Madison, August 2007.
[5] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. Saner: Composing static and dynamic analysis to validate sanitization in web applications. In Proceedings of the IEEE Symposium on Security and Privacy, 2008.
[6] Clark Barrett and Sergey Berezin. CVC Lite: A new implementation of the cooperating validity checker. In Proceedings of the Conference on Computer Aided Verification, 2004.
[7] Ulrich Bayer, Paolo Milani Comparetti, Clemens Hlauschek, Christopher Kruegel, and Engin Kirda. Scalable, behavior-based malware clustering. In Proceedings of the Network and Distributed System Security Symposium, 2009.
[8] Ulrich Bayer, Andreas Moser, Christopher Kruegel, and Engin Kirda. Dynamic analysis of malicious code. Journal in Computer Virology, 2(1):66–77, 2006.
[9] P. Boonstoppel, C. Cadar, and D. Engler. RWset: Attacking path explosion in constraint-based test generation. In Proceedings of the International Conference on Tools and Algorithms for Construction and Analysis of Systems, 2008.
[10] David Brumley, Juan Caballero, Zhenkai Liang, James Newsome, and Dawn Song. Towards automatic discovery of deviations in binary implementations with applications to error detection and fingerprint generation. In Proceedings of the USENIX Security Symposium, August 2007.
[11] David Brumley, Cody Hartwig, Min Gyung Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Dawn Song. Bitscope: Automatically dissecting malicious binaries. Technical Report CS-07-133, School of Computer Science, Carnegie Mellon University, March 2007.
[12] David Brumley, Cody Hartwig, Zhenkai Liang, James Newsome, Pongsin Poosankam, Dawn Song, and Heng Yin. Automatically identifying trigger-based behavior in malware. In Botnet Detection, volume 36 of Countering the Largest Security Threat Series: Advances in Information Security. Springer-Verlag, 2008.
[13] David Brumley, James Newsome, Dawn Song, Hao Wang, and Somesh Jha. Towards automatic generation of vulnerability-based signatures. In Proceedings of the IEEE Symposium on Security and Privacy, pages 2–16, 2006.
[14] David Brumley, James Newsome, Dawn Song, Hao Wang, and Somesh Jha. Theory and techniques for automatic generation of vulnerability-based signatures. IEEE Transactions on Dependable and Secure Computing, 5(4):224–241, October 2008.
[15] David Brumley, Hao Wang, Somesh Jha, and Dawn Song. Creating vulnerability signatures using weakest preconditions. In Proceedings of the IEEE Computer Security Foundations Symposium, 2007.
[16] Juan Caballero, Heng Yin, Zhenkai Liang, and Dawn Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In Proceedings of the ACM Conference on Computer and Communications Security, October 2007.
[17] Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the USENIX Symposium on Operating System Design and Implementation, 2008.
[18] Cristian Cadar and Dawson Engler. Execution generated test cases: How to make systems code crash itself. In Proceedings of the International SPIN Workshop on Model Checking of Software, 2005.
[19] Cristian Cadar, Vijay Ganesh, Peter Pawlowski, David Dill, and Dawson Engler. EXE: A system for automatically generating inputs of death using symbolic execution. In Proceedings of the ACM Conference on Computer and Communications Security, October 2006.
[20] Walter Chang and Calvin Lin. Efficient and extensible security enforcement using dynamic data flow analysis. In Proceedings of the ACM Conference on Computer and Communications Security, pages 39–50, 2008.
[21] James Clause, Wanchun Li, and Alessandro Orso. Dytan: A generic dynamic taint analysis framework. In International Symposium on Software Testing and Analysis, 2007.
[22] Manuel Costa, Miguel Castro, Lidong Zhou, Lintao Zhang, and Marcus Peinado. Bouncer: Securing software by blocking bad input. In Proceedings of the ACM Symposium on Operating System Principles, October 2007.
[23] Manuel Costa, Jon Crowcroft, Miguel Castro, Antony Rowstron, Lidong Zhou, Lintao Zhang, and Paul Barham. Vigilante: End-to-end containment of internet worms. In Proceedings of the ACM Symposium on Operating System Principles, 2005.
[24] Jedidiah Crandall, Zhendong Su, S. Felix Wu, and Frederic Chong. On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In Proceedings of the ACM Conference on Computer and Communications Security, 2005.
[25] Jedidiah R. Crandall and Fred Chong. Minos: Architectural support for software security through control data integrity. In Proceedings of the International Symposium on Microarchitecture, December 2004.
[26] Michael Dalton, Hari Kannan, and Christos Kozyrakis. Raksha: A flexible information flow architecture for software security. In Proceedings of the 34th International Symposium on Computer Architecture, 2007.
[27] E.W. Dijkstra. A Discipline of Programming. Prentice Hall, Englewood Cliffs, NJ, 1976.
[28] Manuel Egele, Christopher Kruegel, Engin Kirda, Heng Yin, and Dawn Song. Dynamic spyware analysis. In Proceedings of the USENIX Annual Technical Conference, June 2007.
[29] Michael Emmi, Rupak Majumdar, and Koushik Sen. Dynamic test input generation for database applications. In International Symposium on Software Testing and Analysis, 2007.
[30] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. The program dependence graph and its use in optimization. ACM Transactions on Programming Languages and Systems, 1987.
[31] C. Flanagan and J.B. Saxe. Avoiding exponential explosion: Generating compact verification conditions. In Proceedings of the Symposium on Principles of Programming Languages, 2001.
[32] Jeffrey Foster, Manuel Fahndrich, and Alexander Aiken. A theory of type qualifiers. In Proceedings of the ACM Conference on Programming Language Design and Implementation, 1999.
[33] Vijay Ganesh and David L. Dill. A decision procedure for bit-vectors and arrays. In Proceedings on the Conference on Computer Aided Verification, 2007.
[34] Patrice Godefroid. Compositional dynamic test generation. In Proceedings of the Symposium on Principles of Programming Languages, 2007.
[35] Patrice Godefroid, Adam Kiezun, and Michael Levin. Grammar-based whitebox fuzzing. In Proceedings of the ACM Conference on Programming Language Design and Implementation, 2008.
[36] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: Directed automated random testing. In Proceedings of the ACM Conference on Programming Language Design and Implementation, 2005.
[37] Patrice Godefroid, Michael Levin, and David Molnar. Automated whitebox fuzz testing. In Proceedings of the Network and Distributed System Security Symposium, February 2008.
[38] Patrice Godefroid, Michael Levin, and David A. Molnar. Active property checking. In Proceedings of the ACM international conference on Embedded software, 2008.
[39] Vivek Haldar, Deepak Chandra, and Michael Franz. Dynamic taint propagation for Java. In Proceedings of the Annual Computer Security Applications Conference, pages 303–311, 2005.
[40] William G. J. Halfond, Ro Orso, and Panagiotis Manolios. Using positive tainting and syntax-aware evaluation to counter SQL injection attacks. In Proceedings of the ACM SIGSOFT Symposium on Foundations of Software Engineering. ACM Press, 2006.
[41] Ivan Jager and David Brumley. Efficient directionless weakest preconditions. Technical Report CMU-CyLab-10-002, Carnegie Mellon University CyLab, February 2010.
[42] Lap Chung Lam and Tzi-cker Chiueh. A general dynamic information flow tracking framework for security applications. In Proceedings of the Annual Computer Security Applications Conference, 2006.
[43] K. Rustan M. Leino. Efficient weakest preconditions. Information Processing Letters, 93(6):281–288, 2005.
[44] Zhenkai Liang and R. Sekar. Fast and automated generation of attack signatures: A basis for building self-protecting servers. In Proceedings of the ACM Conference on Computer and Communications Security, 2005.
[45] Andreas Moser, Christopher Kruegel, and Engin Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the USENIX Security Symposium, 2007.
[46] George C. Necula, Scott McPeak, and Westley Weimer. CCured: Type-safe retrofitting of legacy code. In Proceedings of the Symposium on Principles of Programming Languages, 2002.
[47] James Newsome, David Brumley, Dawn Song, Jad Chamcham, and Xeno Kovah. Vulnerability-specific execution filtering for exploit prevention on commodity software. In Proceedings of the Network and Distributed System Security Symposium, 2006.
[48] James Newsome, Brad Karp, and Dawn Song. Polygraph: Automatically generating signatures for polymorphic worms. In Proceedings of the IEEE Symposium on Security and Privacy, May 2005.
[49] James Newsome, Stephen McCamant, and Dawn Song. Measuring channel capacity to distinguish undue influence. In Proceedings of the ACM Workshop on Programming Languages and Analysis for Security, 2009.
[50] James Newsome and Dawn Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the Network and Distributed System Security Symposium, February 2005.
[51] Anh Nguyen-tuong, Salvatore Guarnieri, Doug Greene, Jeff Shirley, and David Evans. Automatically hardening web applications using precise tainting. In Proceedings of IFIP International Information Security Conference, 2005.
[52] Feng Qin, Cheng Wang, Zhenmin Li, Ho-Seop Kim, Yuanyuan Zhou, and Youfeng Wu. Lift: A low-overhead practical information flow tracking system for detecting security attacks. In Proceedings of the 39th Annual IEEE/ACM Symposium on Microarchitecture, 2006.
[53] Andrei Sabelfeld and Andrew C. Myers. Language-based information-flow security. IEEE Journal on Selected Areas in Communications, 21:2003, 2003.
[54] Prateek Saxena, Steve Hanna, Pongsin Poosankam, and Dawn Song. FLAX: Systematic discovery of client-side validation vulnerabilities in rich web applications. Proceedings of the Network and Distributed System Security Symposium, 2010.
[55] Fred B. Schneider. Enforceable security policies. ACM Transactions on Information and System Security, 3(1):30–50, February 2000.
[56] R. Sekar. An efficient black-box technique for defeating web application attacks. In Proceedings of the Network and Distributed System Security Symposium, 2009.
[57] K. Sen, D. Marinov, and G. Agha. CUTE: A concolic unit testing engine for C. In Proceedings of the joint meeting of the European Software Engineering Conference and the ACM Symposium on the Foundations of Software Engineering, 2005.
[58] Monirul Sharif, Andrea Lanzi, Jonathon Giffin, and Wenke Lee. Automatic reverse engineering of malware emulators. In Proceedings of the IEEE Symposium on Security and Privacy, 2009.
[59] G. Edward Suh, Jaewook Lee, and Srinivas Devadas. Secure program execution via dynamic information flow tracking. In Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems, 2004.
[60] Shobha Venkataraman, Avrim Blum, and Dawn Song. Limits of learning-based signature generation with adversaries. In Proceedings of the Network and Distributed System Security Symposium, February 2008.
[61] Philipp Vogt, Florian Nentwich, Nenad Jovanovic, Engin Kirda, Christopher Kruegel, and Giovanni Vigna. Cross-site scripting prevention with dynamic data tainting and static analysis. In Proceedings of the Network and Distributed System Security Symposium, 2007.
[62] Yao wen Huang, Fang Yu, Christian Hang, Chung hung Tsai, D. T. Lee, and Sy yen Kuo. Securing web application code by static analysis and runtime protection. In Proceedings of the 13th conference on World Wide Web, 2004.
[63] Gilbert Wondracek, Paolo Milani Comparetti, Christopher Kruegel, and Engin Kirda. Automatic network protocol analysis. In Proceedings of the Network and Distributed System Security Symposium, 2008.
[64] Wei Xu, Eep Bhatkar, and R. Sekar. Taint-enhanced policy enforcement: A practical approach to defeat a wide range of attacks. In Proceedings of the USENIX Security Symposium, 2006.
[65] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the ACM Conference on Computer and Communications Security, October 2007.