### 4.2.1 Memory Security for AES Key

The security of the AES key is as critical as that of the RSA private key. Therefore, we applied the same verification methods to ensure that no residues of the AES key remain in RAM, as we did for the RSA key. For instance, after initializing PRIME via sysfs, if we do not thoroughly clean the affected memory lines and buffers, parts of the AES secret key may remain in RAM. However, our tests indicate that PRIME is secure a few seconds after its initialization phase. During initialization, RAM is used to load the AES key into debug registers, but afterward, this key cannot be traced.

It is also worth noting that, according to the authors of TRESOR [26], CPU registers themselves are not vulnerable to cold boot attacks. Rebooting a machine to read out registers (or even by cooling down and unplugging a CPU) is not feasible.

### 4.2.2 Other Attacks

The primary design goal of PRIME was to resist cold boot attacks. We now briefly consider other types of attacks. DMA-based attacks [5, 7] and local privilege escalations both allow an attacker to execute arbitrary code in system mode. Clearly, PRIME does not prevent such attacks because system-level privileges can be used to read out debug registers, which in turn allows an adversary to decrypt the RSA private key in RAM.

For local attackers without system privileges, side-channel attacks pose a well-known risk to cryptographic keys. Cache timing attacks, for example, exploit the multi-threading capabilities of modern CPUs. Percival [29] demonstrated that CPUs with hyper-threading can leak key-related information. His attack leverages the fact that processes on hyper-threading CPUs share the same cache. Although no data is shared between threads, they can spy on each other by forcing data out of the cache and using timing differences for memory accesses to decode information. A spy process running in parallel with a crypto process can thus gain valuable information about the key.

A similar attack, proposed by Aciiçmez, Seifert, and Koç [1], uses the branch prediction capabilities of modern CPUs. Again, a shared resource is used as a covert channel. All these approaches require a spy process to run simultaneously on the same CPU as the crypto process. In contrast, Yarom and Falkner [32] introduced an attack that utilizes the L3 cache, overcoming the limitation of processes needing to run on the same CPU.

We can mitigate such attacks by setting the CPU core running a PRIME process into no-fill mode [19]. In no-fill mode, read and write misses access RAM directly, and cache lines are never replaced. Additionally, a PRIME process runs in an atomic section, further thwarting cache timing attacks against AES. The use of AES-NI, which is designed to be secure against such attacks according to Intel [16], also enhances security as it operates entirely without memory.

Additionally, note that Algorithm 2 has a branch dependent on a bit of the private key, which might lead to a timing attack. A common technique to break the dependency between input and key operations is blinding. The idea is to multiply the payload by a random number before applying a private RSA operation. Let \( C \) be the ciphertext and \( P \) be the corresponding plaintext:

1. Select a random number \( b \in [1, n-1] \).
2. Calculate:
   \[
   C_1 = C \cdot b^e \mod n
   \]
   \[
   P_1 = C_1^d \mod n = (P \cdot b)^{ed} \mod n = P \cdot b \mod n
   \]
3. Compute:
   \[
   P = P_1 \cdot b^{-1} \mod n
   \]

This solution does not need to be implemented in kernel mode and can be adopted by any user-mode process that calls PRIME, such as PolarSSL, to strengthen the implementation against timing attacks.

### 5. Conclusions and Future Work

In conclusion, PRIME provides an infrastructure that protects RSA private keys against cold boot attacks. Our main contribution is demonstrating that CPU-bound encryption is possible for asymmetric cryptosystems, which was previously considered difficult due to the large memory footprint of RSA compared to AES.

PRIME focuses on making cold boot-resistant RSA possible on the latest x86 standard hardware without requiring high-end products like SSL accelerators. Our proof of concept involved patching PolarSSL and testing our infrastructure with the Hiawatha web server. Experiments have shown that PRIME is suitable for servers with low to medium throughput while being secure and not leaking sensitive data into RAM. This makes PRIME particularly interesting for use cases like SSH servers, where throughput is not high, and asymmetric operations are rarely required. OpenSSH is a target of interest for future support.

Future advancements, such as AVX-512, will benefit PRIME by providing four times more register memory than the current version. Another plan is to improve support for multiprocessing architectures (SMP). Since all CPUs provide their own set of registers, PRIME can theoretically be run on all CPUs in parallel, significantly increasing throughput.

Lastly, we aim to support multiple RSA keys in future versions. Currently, PRIME only supports the usage of a single key. However, this is an unnecessary limitation because the AES master key can be used to hold an encrypted key ring of RSA private keys in RAM.

### 6. References

[1] O. Aciiçmez, c. K. Koç, and J.-P. Seifert. On the Power of Simple Branch Prediction Analysis. In Proceedings of the 2nd ACM Symposium on Information, Computer, and Communications Security, ASIACCS '07, pages 312–320, Singapore, 2007. ACM.

[2] R. Anderson and M. Kuhn. Tamper Resistance: A Cautionary Note. In Proceedings of the 2nd conference on Proceedings of the Second USENIX Workshop on Electronic Commerce - Volume 2, WOEC’96, pages 1–1, Oakland, CA, 1996. USENIX Association.

[3] C. Arnaud and P.-A. Fouque. Timing Attack Against Protected RSA-CRT Implementation Used in PolarSSL. In Proceedings of the 13th International Conference on Topics in Cryptology, CT-RSA'13, pages 18–33, Berlin, Heidelberg, 2013. Springer-Verlag.

[4] E. Bach. Discrete Logarithms and Factoring. Technical Report UCB/CSD-84-186, EECS Department, University of California, Berkeley, Jun 1984.

[19] Jürgen Pabel. Frozen Cache. http://frozenchache.blogspot.com/, Jan. 2009.

[20] T. Klein. All Your Private Keys Are Belong to Us, 2006. URL: http://www.trapkit.de/research/sslkeyfinder/keyfinder_v1.0_20060205.pdf.

[21] D. E. Knuth. The Art of Computer Programming, Volume 2 (3rd ed.): Seminumerical Algorithms. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, 1997.

[22] Ç. K. Koç. High-Speed RSA Implementation. Technical report TR201, RSA Data Security, Inc., Nov. 1994.

[23] Ç. K. Koç, T. Acar, and B. S. Kaliski, Jr. Analyzing and Comparing Montgomery Multiplication Algorithms. IEEE Micro, 16(3):26–33, 1996.

[24] C. Lomont. Introduction to Intel Advanced Vector Extensions. Intel Corporation, May 2011.

[25] P. L. Montgomery. Modular Multiplication Without Trial Division. Mathematics of Computation, 44(170):519–521, 1985.

[26] T. Müller, F. Freiling, and A. Dewald. TRESOR Runs Encryption Securely Outside RAM. In 20th USENIX Security Symposium, pages 17–17, San Francisco, California, Aug. 2011. University of Erlangen-Nuremberg, USENIX Association.

[27] T. Müller, B. Taubmann, and F. Freiling. TreVisor: OS-Independent Software-Based Full Disk Encryption Secure Against Main Memory Attacks. In 10th International Conference on Applied Cryptography and Network Security (ACNS '12), Singapore, June 2012. University of Erlangen-Nuremberg, Springer-Verlag.

[28] T. P. Parker and S. Xu. A Method for Safekeeping Cryptographic Keys from Memory Disclosure Attacks. In Proceedings of the First International Conference on Trusted Systems, INTRUST'09, pages 39–59, Beijing, China, Dec. 2009. Springer-Verlag.

[29] C. Percival. Cache Missing for Fun and Profit. In Proceedings of BSDCan 2005, May 2005.

[30] A. Rahmati, M. Salajegheh, D. Holcomb, J. Sorber, W. P. Burleson, and K. Fu. TARDIS: Time and Remanence Decay in SRAM to Implement Secure Protocols on Embedded Devices Without Clocks. In Proceedings of the 21st USENIX Conference on Security Symposium, pages 36–36, Bellevue, WA, 2012. USENIX Association.

[31] P. Simmons. Security Through Amnesia: A Software-Based Solution to the Cold Boot Attack on Disk Encryption. In Proceedings of the 27th Annual Computer Security Applications Conference, ACSAC '11, pages 73–82, Orlando, Florida, 2011. ACM.

[32] Y. Yarom and K. Falkner. Flush+Reload: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. Cryptology ePrint Archive, Report 2013/448, 2013. http://eprint.iacr.org/.

[5] M. Becher, M. Dornseif, and C. N. Klein. FireWire - All Your Memory Are Belong to Us. In Proceedings of the Annual CanSecWest Applied Security Conference, Vancouver, British Columbia, Canada, 2005. Laboratory for Dependable Distributed Systems, RWTH Aachen University.

[6] G. R. Blakely. A Computer Algorithm for Calculating the Product AB Modulo M. IEEE Trans. Comput., 32(5):497–500, May 1983.

[7] E.-O. Blass and W. Robertson. TRESOR-HUNT: Attacking CPU-Bound Encryption. In 2012 Annual Computer Applications Conference, Orlando, Florida, Dec. 2012. Northeastern University, College of Computer and Information Science, ACSAC 28.

[8] D. Boneh, G. Durfee, and Y. Frankel. An Attack on RSA Given a Small Fraction of the Private Key Bits. In Proceedings of the International Conference on the Theory and Applications of Cryptology and Information Security: Advances in Cryptology, ASIACRYPT '98, pages 25–34, London, UK, 1998. Springer-Verlag.

[9] D. Brumley and D. Boneh. Remote Timing Attacks Are Practical. Computer Networks, 48(5):701–716, Aug. 2005.

[10] W. D. Colin. Leakage from Montgomery Multiplication. In Ç. Koç, editor, Cryptographic Engineering, pages 431–449. Springer, 2009.

[11] S. R. Dussé and B. S. Kaliski, Jr. A Cryptographic Library for the Motorola DSP56000. In Proceedings of the Workshop on the Theory and Application of Cryptographic Techniques on Advances in Cryptology, EUROCRYPT '90, pages 230–244, Aarhus, Denmark, 1991. Springer-Verlag.

[12] H. L. Garner. The Residue Number System. In Western Joint Computer Conference, IRE-AIEE-ACM '59, pages 146–153, San Francisco, CA, Mar. 1959. ACM.

[13] P. Gutmann. Data Remanence in Semiconductor Devices. In Proceedings of the 10th Conference on USENIX Security Symposium - Volume 10, SSYM'01, pages 4–4, Washington, D.C., 2001. USENIX Association.

[14] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Lest We Remember: Cold Boot Attacks on Encryptions Keys. In Proceedings of the 17th USENIX Security Symposium, pages 45–60, San Jose, CA, Aug. 2008. Princeton University, USENIX Association.

[15] N. Heninger and H. Shacham. Reconstructing RSA Private Keys from Random Key Bits. In Proceedings of the 29th Annual International Cryptology Conference on Advances in Cryptology, CRYPTO '09, pages 1–17, Santa Barbara, CA, 2009. Springer-Verlag.

[16] Intel. Intel Advanced Encryption Standard (AES) Instructions Set, Jan. 2010.

[17] Intel. Intel Advanced Vector Extensions Programming Reference. Number 319433-011. Intel Corporation, June 2011.

[18] International Telecommunication Union. Information Technology — ASN.1 Encoding Rules — Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER), and Distinguished Encoding Rules (DER). ITU-T Recommendation X.690, July 2002.