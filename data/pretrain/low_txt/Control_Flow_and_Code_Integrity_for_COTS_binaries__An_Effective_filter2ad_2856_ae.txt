### Vulnerabilities and Limitations of Existing Techniques

Several techniques have been repeatedly shown to be vulnerable against determined adversaries [27, 52, 54, 18]. Additionally, some of these techniques face limitations when applied to large and complex applications due to difficulties in static analysis [20, 38] or performance issues [26]. Despite these challenges, the widespread deployment of Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP) has raised the bar for exploit development. To bypass DEP, modern exploits often use code reuse attacks as a prelude to code injection. This phase of code reuse has become the new battleground for low-level attacks and defenses.

### Control Flow Integrity (CFI)

Control Flow Integrity (CFI) [16] provides a foundation for defending against code-reuse attacks. Recent research efforts [66, 63, 49, 24] have significantly restricted an attacker's ability to launch such attacks. However, CFI-permitted gadgets may still be sufficient to bypass DEP and enable code injection [25, 32, 31, 22]. Even fine-grained CFI approaches [46, 57, 43, 58] have been demonstrated to be bypassable [28].

### Source Code vs. Binary Code

A significant fraction of the defense techniques, including all bounds-checking methods and fine-grained randomization [21, 20, 23], and fine-grained CFI [46, 57, 43], operate only on source code. Low-level code that relies on inline assembly is not protected, and any code available only in binary form cannot be secured. If even a single module is not compiled with bounds-checking, no security guarantees can be provided for the entire application. The "weakest link" can potentially compromise the entire system. In contrast, CFCI (Control Flow and Code Integrity) extends protection to all code, regardless of the language or compiler used.

### Code Integrity

Nanda et al. [41] proposed an approach to detect foreign code in Windows by enforcing a code loading policy within the kernel, based on BIRD [40]. Similarly, Seshadri et al. [50] proposed a code loading policy for the OS kernel, enforced by a tiny hypervisor.

MIP [45] and MCFI [46] also incorporate some code integrity features using policy checks on `mmap` and `mprotect`. However, their policy is limited to ensuring that existing code is never writable and executable, which is insufficient to address the challenges posed by dynamic loaders and code patching. Attackers can divert control flow to dynamic loaders or loader code statically linked into a code module to bypass these policies.

### Securing Loaders

Recognizing the importance of preventing abuse of code loading privileges, Payer et al. [48] developed TRuE, a system that replaces the standard loader with a secure version. Replacing the system loader poses challenges for real-world deployment, as OS vendors are reluctant to change core platform components. There is a strong interdependence between the loader and glibc, requiring changes to both. Additionally, the secure loader achieves security by restricting loader functionality. Our approach avoids these drawbacks by permitting continued use of the standard loader, achieving security through a small, independent policy enforcement layer that operates outside the loader and checks security-relevant operations.

Writing secure loaders is a difficult task, as evidenced by numerous vulnerabilities reported in production loaders [3, 12, 13, 4, 5, 9]. Trusting the entire loader codebase for code integrity leads to a large trusted computing base (TCB). In contrast, CFCI implementation uses a very small reference monitor, with a size of no more than 300 lines, including C and x86 assembly code. A typical dynamic loader, on the other hand, is 28KLoC.

### Conclusions

In this paper, we presented an effective countermeasure against Return-Oriented Programming (ROP) attacks. Our approach is based on the observation that the goal of real-world code-reuse attacks is to disable DEP and launch native code injection attacks. Our defense combines coarse-grained control-flow integrity with a comprehensive defense against native code injection to defeat these attacks. Our approach tracks the code loading process at every step, ensuring that code integrity is preserved. Consequently, it ensures that only authorized (native) code can ever be executed by any process protected by our system, CFCI. A key benefit of our approach is its reliance on a relatively simple state model for loading and a few simple system call policies. It is fully compatible with existing applications, libraries, and loaders, and does not require any modifications. CFCI introduces almost no additional runtime overhead over CFI, making it a promising candidate for deployment.

### References

[1] CVE-2000-0854: Earliest side-loading attack.
[2] CVE-2007-3508: Integer overflow in loader. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2007-3508.
[3] CVE-2010-0830: Integer signedness error in loader. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-0830.
[4] CVE-2010-3847: Privilege escalation in loader with $origin for the ld audit environment variable. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3847.
[5] CVE-2010-3856: Privilege escalation in loader with the ld audit environment. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-3856.
[6] CVE-2011-0562: Untrusted search path vulnerability in Adobe Reader.
[7] CVE-2011-0570: Untrusted search path vulnerability in Adobe Reader. http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0570.
[8] CVE-2011-0588: Untrusted search path vulnerability in Adobe Reader. http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0588.
[9] CVE-2011-1658: Privilege escalation in loader with $origin in rpath. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1658.
[10] CVE-2011-2398: Privilege escalation in loader. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-2398.
[11] CVE-2012-0158: Side loading attack via Microsoft Office. http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-0158.
[12] CVE-2013-0977: Overlapping segments. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-0977.
[13] CVE-2014-1273: Text relocation. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-1273.
[14] LibJIT. https://code.google.com/p/libjit-linear-scan-register-allocator/.
[15] WinSxS: Side-by-side assembly. http://en.wikipedia.org/wiki/Side-by-side_assembly.
[16] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow Integrity. In CCS, 2005.
[17] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy Bounds Checking: An Efficient and Backwards-Compatible Defense Against Out-of-Bounds Errors. In USENIX Security, 2009.
[18] M. Backes and S. Nürnberg. Oxymoron: Making Fine-Grained Memory Randomization Practical by Allowing Code Sharing. In USENIX Security, 2014.
[19] E. Bendersky. LibJIT Samples. https://github.com/eliben/libjit-samples, 2013.
[20] S. Bhatkar and R. Sekar. Data Space Randomization. In DIMVA, 2008.
[21] S. Bhatkar, R. Sekar, and D. DuVarney. Efficient Techniques for Comprehensive Protection from Memory Error Exploits. In USENIX Security, 2005.
[22] N. Carlini and D. Wagner. ROP is Still Dangerous: Breaking Modern Defenses. In USENIX Security, 2014.
[23] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In S&P, 2015.
[24] L. Davi, R. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund, S. Nürnberger, and A. reza Sadeghi. MoCFI: A Framework to Mitigate Control-Flow Attacks on Smartphones. In NDSS, 2012.
[25] L. Davi, D. Lehmann, A.-R. Sadeghi, and F. Monrose. 99 in ELF: A Spotlight on the Underappreciated Metadata. In USENIX WOOT, 2013.
[54] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi. Just-in-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In S&P, 2013.
[55] C. Song, C. Zhang, T. Wang, W. Lee, and D. Melski. Exploiting and Protecting Dynamic Code Generation. In NDSS, 2015.
[56] A. Stewart. DLL Side-Loading: A Thorn in the Side of the Anti-Virus Industry, 2014. http://www.fireeye.com/resources/pdfs/fireeye-dll-sideloading.pdf.
[57] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security, 2014.
[58] V. van der Veen, D. Andriesse, E. Göktas, B. Gras, L. Sambuc, A. Slowinska, H. Bos, and C. Giuffrida. Practical Context-Sensitive CFI. In CCS, 2015.
[59] W. Xu, D. C. DuVarney, and R. Sekar. An Efficient and Backwards-Compatible Transformation to Ensure Memory Safety of C Programs. 2004.
[60] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In S&P, 2009.
[61] Y. Younan, P. Philippaerts, L. Cavallaro, R. Sekar, F. Piessens, and W. Joosen. Paricheck: An Efficient Pointer Arithmetic Checker for C Programs. In ACM ASIACCS, 2010.
[62] B. Zeng, G. Tan, and G. Morrisett. Combining Control-Flow Integrity and Static Analysis for Efficient and Validated Data Sandboxing. In CCS, 2011.
[63] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical Control Flow Integrity & Randomization for Binary Executables. In S&P, 2013.
[64] M. Zhang. PSI: Platform for Static Binary Instrumentation. http://seclab.cs.sunysb.edu/seclab/download.html.
[65] M. Zhang, R. Qiao, N. Hasabnis, and R. Sekar. A Platform for Secure Static Binary Instrumentation. In ACM VEE, 2014.
[66] M. Zhang and R. Sekar. Control Flow Integrity for COTS Binaries. In USENIX Security, 2013.
[67] M. Zhang and R. Sekar. Squeezing the Dynamic Loader for Fun and Profit. http://seclab.cs.sunysb.edu/seclab/pubs/seclab15-12.pdf, 2015.
Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In USENIX Security, 2014.
[26] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code Randomization Resilient to (Just-in-Time) Return-Oriented Programming. In NDSS, 2015.
[27] T. Durden. Bypassing PaX ASLR Protection. Technical report, Phrack Magazine, vol. 0x0b, no. 0x3b, 2002.
[28] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi, and S. Sidiroglou-Douskos. Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity. In CCS, 2015.
[29] A. D. Federico, A. Cama, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. How the ELF Ruined Christmas. In USENIX Security, 2015.
[30] B. Ford and R. Cox. Vx32: Lightweight User-Level Sandboxing on the x86. In USENIX ATC, 2008.
[31] E. Göktas, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis. Size Does Matter: Why Using Gadget-Chain Length to Prevent Code-Reuse Attacks is Hard. In USENIX Security, 2014.
[32] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis. Out of Control: Overcoming Control-Flow Integrity. In S&P, 2014.
[33] N. Hasabnis, A. Misra, and R. Sekar. Light-Weight Bounds Checking. In ACM CGO, 2012.
[34] R. W. M. Jones, P. H. J. Kelly, M. C, and U. Errors. Backwards-Compatible Bounds Checking for Arrays and Pointers in C Programs. In AADEBUG, 1997.
[35] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-Pointer Integrity. In OSDI, 2014.
[36] L. Li, J. E. Just, and R. Sekar. Address-Space Randomization for Windows Systems. In ACSAC, 2006.
[37] S. McCamant and G. Morrisett. Evaluating SFI for a CISC Architecture. In USENIX Security, 2006.
[38] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz. Opaque Control-Flow Integrity. In NDSS, 2015.
[39] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In PLDI, 2009.
[40] S. Nanda, W. Li, L.-C. Lam, and T.-c. Chiueh. BIRD: Binary Interpretation Using Runtime Disassembly. In CGO, 2006.
[41] S. Nanda, W. Li, L.-C. Lam, and T.-c. Chiueh. Foreign Code Detection on the Windows/x86 Platform. In ACSAC, 2006.
[42] Nergal. The Advanced Return-Into-Lib(c) Exploits: PaX Case Study. Phrack Magazine, 2001.
[43] B. Niu and T. Gang. Per-Input Control-Flow Integrity. In CCS, 2015.
[44] B. Niu and G. Tan. RockJIT: Securing Just-In-Time Compilation Using Modular Control-Flow Integrity.
[45] B. Niu and G. Tan. Monitor Integrity Protection with Space Efficiency and Separate Compilation. In CCS, 2013.
[46] B. Niu and G. Tan. Modular Control-Flow Integrity. In PLDI, 2014.
[47] PaX. Address Space Layout Randomization. http://pax.grsecurity.net/docs/aslr.txt, 2001.
[48] M. Payer, T. Hartmann, and T. R. Gross. Safe Loading - A Foundation for Secure Execution of Untrusted Programs. In S&P, 2012.
[49] J. Pewny and T. Holz. Control-Flow Restrictor: Compiler-Based CFI for iOS. In ACSAC, 2013.
[50] A. Seshadri, M. Luk, N. Qu, and A. Perrig. SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In SOSP, 2007.
[51] H. Shacham. The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In CCS, 2007.
[52] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh. On the Effectiveness of Address-Space Randomization. In CCS, 2004.
[53] R. Shapiro, S. Bratus, and S. W. Smith. "Weird Machines" 100