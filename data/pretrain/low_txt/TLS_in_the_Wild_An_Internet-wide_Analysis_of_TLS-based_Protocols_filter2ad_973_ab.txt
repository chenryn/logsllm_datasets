### Anchors and Trust Stores

Anchors, which are distributed with operating systems and user agents like email clients (e.g., Thunderbird) or web browsers, play a crucial role in establishing trust. For example, Windows and macOS come with root stores supplied by their respective vendors, who decide which Certificate Authorities (CAs) to include. Generally, software on these operating systems uses the OS-supplied trust anchors. Mozilla, however, takes a different approach: their products have their own root store.

### Certificate Issuance and Trust Chains

CAs can issue certificates directly, a practice that is strongly discouraged (see Section IV-F), or via intermediate certificates. Trust chains must be unbroken; this means there should be no missing intermediate certificates, chaining to root certificates not in the root store, or expired certificates in the chain. Self-signed certificates, where the root and end-host certificates are the same, are a special case, which we will discuss in Section IV-D.

In Section IV, we will delve into problematic PKI setups after presenting several observations from our measurements.

### Client-Authentication Methods

The client-to-server communication protocols examined in this paper generally authenticate the initiator at the application layer rather than during the SSL/TLS handshake. SMTP originally did not require authentication for message submission (i.e., from the user agent to the mail server), but this was later added to combat spam. Message transfer between Mail Transfer Agents (MTAs) does not require sender authentication.

To select the appropriate authentication mechanism, a client should query the server for the mechanisms it supports (e.g., using the EHLO command with SMTP or CAPABILITY for IMAP). The server returns a list of supported authentication mechanisms, sorted by preference, from which the client then selects.

Some widely used mechanisms, such as LOGIN and PLAIN [46], transmit user credentials without additional protection, regardless of whether an underlying SSL/TLS connection exists. Other mechanisms use cryptographic functions to transmit a hashed version of the credentials, often using deprecated hash functions like MD5. An adversary who can eavesdrop on the authentication process may recover the credentials. Challenge-response mechanisms such as CRAM [28] and SCRAM [33] (which also use HMAC) provide much better protection. With these mechanisms, the password is never transmitted. In the case of SCRAM, the password can even be stored in a salted format on the server, so even a server compromise would not reveal the true password to an attacker.

### Related Work

Several publications have studied the deployment of network security protocols, focusing either on the development of generic, large-scale measurement methodologies or the analysis of HTTPS and SSH protocols. Provos and Honeyman [37] were among the first to conduct academic, large-scale scans of security protocols, focusing on SSH. Later, Heidemann et al. [18] carried out a census of Internet hosts. Leonard and Loguinov [29] presented a scanner capable of conducting Internet-wide scans with proper randomization of target IP addresses. Durumeric et al. introduced the fast zmap scanner in 2013 [6], which we used in our work.

Vratonjic et al. [45] scanned the top one million hosts as determined by Alexa Inc. Holz et al. [24] conducted a large-scale, long-term study of the HTTPS ecosystem over 18 months, using data from passive monitoring (with the Bro Network Monitor). Their study highlighted the poor state of the Web PKI and predicted little improvement. More recently, Durumeric et al. [7] presented an Internet-wide study of the HTTPS certificate ecosystem, and Huang et al. [25] expanded on this by investigating forward-secure cipher deployments in TLS. Amann et al. [2] and Akhawe et al. [1] analyzed trust relationships in the Web PKI and the occurrence and treatment of error cases during certificate validation in popular implementations, again using data from passive monitoring with Bro.

Some studies focused more on vulnerabilities in the wild. Heninger et al. [19] investigated weak RSA and DSA keys using zmap data. Durumeric et al. [10] found email and XMPP servers vulnerable to the Heartbleed vulnerability. Gasser et al. [14] presented a large-scale study of SSH deployment in 2014, focusing on insecurely configured devices.

Few studies focus on the use of SSL/TLS beyond HTTPS. A recent study [9] actively probed popular email servers and observed the security of SMTP servers interacting with Gmail over a year. The authors found that the most popular providers set up secure servers effectively. Another study [12] investigated the security of email server setups, though it was limited to a small number of servers. An important finding was that SMTP servers often do not verify the correctness of a certificate in outgoing connections. Our study extends this analysis to the entire Internet, including client-facing email retrieval protocols and chat protocols. On a global scale, our findings are less reassuring.

Finally, several online dashboards provide insights into the current deployment of SSL/TLS, such as SSL Pulse for the most popular websites, Gmail's reports on their SMTP peers, and the IM Observatory for XMPP servers. The ICSI Certificate Notary also offers an online, DNS-based query system to check the validity of X.509 certificates.

### Data Collection

We collected data using both active scans and passive traffic monitoring. Active scans help us characterize global TLS deployment, while passive monitoring allows us to understand which specific aspects of TLS are actually used, such as negotiated protocol versions and cipher suites. Active scans are less suitable for this purpose because the responder chooses the cipher suite from the initiator’s offers.

For email, we included all three SSL/TLS variants of SMTP: SMTP with STARTTLS on port 25, SMTPS on port 465, and SUBMISSION with STARTTLS on port 587. For IMAP and POP3, we examined both the pure SSL/TLS and STARTTLS variants. For XMPP, we investigated both client-to-server and server-to-server setups, in both STARTTLS and pure SSL/TLS variants. For IRC, we only examined client-to-server communication, limiting our IRCS scan to the most common port, 6697, and probing for IRC STARTTLS support on the default IRC port, 6667.

#### A. Active Scans

In this section, we describe the process used for our active scans and some insights gained and peculiar phenomena encountered.

**a) Scanner:**
Our scanner consists of two parts. The first part is the zmap [6] network scanner, which we used to determine IP addresses with open ports of interest. We scanned the entire routable IPv4 space, using a BGP dump from the Oregon collector of Routeviews as a whitelist of routable prefixes. Our scanning campaigns ran from 2015-06-09 through 2015-08-04. Due to time-sharing constraints, we had to run the scans at different speeds, resulting in scans lasting roughly 20-36 hours. We refrained from scanning at line speed to reduce the impact of our scans.

The second part of our scanner is a component that starts an array of OpenSSL client instances, collects their output, and stores it in a database. We patched the STARTTLS implementations of OpenSSL, as the current version does not follow the RFCs. Specifically, the current OpenSSL client does not query the server capabilities and ignores a server's refusal to negotiate SSL/TLS. Additionally, OpenSSL did not yet support STARTTLS for IRC.

We used a blacklist of IP ranges generated during past scans [14, 42]. At the time of writing, it contains 177 entries covering 2.6 million addresses (about 0.08% of the routable space). Entries were computed from both automated and personal emails that complained about the scans.

**b) Scanned Protocols:**
Table I provides an overview of our dataset from active scans, showing the number of hosts responding to connection attempts and the number of successful SSL/TLS connections. It also lists the number of unique end-host and intermediate certificates encountered. Many servers have an SSL/TLS port open but do not complete successful SSL/TLS handshakes, a phenomenon previously observed for HTTPS [6, 24].

Previous scans show that servers supporting only SSL 3 are rare today. Initially, we did not try to connect with an optional fallback to SSL 3, but we revised this decision after inspecting passive monitoring data and decided to allow some comparisons. Thus, we enabled fallback to SSL 3 for the remainder of our scans.

**c) Background Noise:**
We observed a phenomenon mentioned by the zmap community: regardless of the port, there is always a number of hosts that reply to SYN packets without completing a full TCP handshake. We verified this by scanning five arbitrarily chosen ports (1337, 7583, 46721, 58976, 65322) and sending out 100M probes each time. The average response rate was 0.07–0.1%. This phenomenon is important to consider, especially for less-used protocols like IRC or XMPP.

#### B. Passive Collection

For our passive measurements, we examined nine days of traffic from the University of California at Berkeley's Internet uplink, which has a 10 GE uplink with a peak traffic of more than 7 GB/s each way.

**a) Traffic Monitoring and Capture:**
We used the Bro Network Security Monitor [35] to gather information about all outgoing SSL/TLS sessions. Bro already offers deep visibility into standard SSL/TLS traffic, extracting certificates and meta-information like ciphers and key usage. For this work, we extended Bro to support protocols using STARTTLS, adding support for SMTP, POP3, IRC, XMPP, and IMAP.

We also used Bro to extract the server's offered authentication capabilities for all outgoing SMTP, POP3, and IMAP sessions, allowing us to deduce how many contacted servers support STARTTLS. We added support for capabilities to the IMAP protocol analyzer we created for this work; support was already present in Bro for SMTP and POP3 capabilities.

Our passive dataset was collected from 2015-07-29 to 2015-08-06. We observed a total of 9,730,095 SSL/TLS connections on the monitored ports, established to 12,637 unique destination IP addresses with 10,294 distinct Server Name Indication (SNI) values and 10,164 unique end-host certificates. Table II shows the number of connections and servers encountered per port.

Please note that our passive dataset may exhibit artifacts of the collection process that are beyond our control. As our data is collected at the Internet uplink of one university, it may be biased. However, due to the high number of students with diverse cultural backgrounds, we assume the traffic is similar to that in other parts of the world.

**b) Ethical Considerations:**
We are aware of the ethical considerations when observing passive traffic. This research aims to understand the interplay between server and client software at the technical level and does not involve human subjects.