### Credential Generation and Access Control

The system is responsible for generating and returning appropriate credentials. When provided with the correct credentials, the overlay mechanism will grant the specified access. It is important to note that the mechanism may enforce a policy through specific actions, rather than simply granting or denying access.

For example, consider a camera that views a sensitive area, where images in the south-west quadrant need to be blurred. The mechanism requires an appropriate credential to allow any stream subscription. These credentials are only obtainable from the Security Manager (SecMgr), which mandates a policy file containing the south-west quadrant restraint. Any Active Video Stream (AVS) instance attempting to route the image stream must obtain a credential with routing rights from the SecMgr. The credential issued by the SecMgr will include an indication that a blur filter should be installed on the stream, but this information is not visible to the AVS instance. From the AVS instance's perspective, its route request succeeds, and it gains access to the image stream. However, the implicitly installed blur filter blurs the desired part of each transmitted image.

### Filter Repository

The filters used by AVS are described by XML documents stored either on the local filesystem of the receiving component or on an accessible HTTP server. A request for a filter is provided as a credential to the overlay mechanism. The credential is decoded to retrieve a URL indicating the location of the filter to be installed. The XML document is then fetched and parsed to extract any associated metadata. The filter code may be embedded directly in the XML document (usually if the filter is written in E-code) or referenced in a code repository (if the filter is a shared object to be loaded at runtime). Figure 5 illustrates this process.

### Using Credentials

In the original implementation of AVS, direct references were used for objects of interest to the protection mechanism, such as communication channels and filters. These filters were either embedded in the application code or provided directly by the user. These references and the surrounding code were modified to use credential-based access exclusively. While this introduces additional network round-trips for creating credentials and retrieving filters, it does not affect the performance of the image stream itself. Since un-credentialed access to the image stream is not possible, the overall performance of the AVS application remains largely unaffected.

### Experimental Results

We profiled the modified AVS application against the original version to measure the overhead imposed by the overlay mechanism. For each middleware action, we recorded the percentage increase in time required to complete the action. Experiments were conducted using RedHat Linux 7.3 on a Dell Latitude C610 laptop connected to a webcam, with a video sink running on a 600 MHz PIII processor-based machine connected via 100Mbit Ethernet. The following table presents some representative results:

| Middleware Operation | Percentage Overhead |
|----------------------|---------------------|
| Channel Create       | 4.52%               |
| Channel Subscribe    | 3.32%               |
| Filter Install       | 8.55%               |
| Filter Uninstall     | 3.33%               |

The primary advantage of our mechanism is that its performance overheads do not impact the critical path of data transfer. Once access to the channel is established or a filter is installed, data transfer proceeds at speeds limited only by the underlying middleware or network. Even in situations where the mechanism has a performance impact, the effect is minimal. The longer time taken to install a filter can be attributed to the necessary network round trips between the AVS application, the code repository, and the SecMgr. Previous experience [7] has shown that using XML as a wire format leads to significant network overheads. However, the interoperability benefits of XML outweigh the performance impact, especially since the critical data transfer path is unimpeded.

### Related Work

Our concept of security overlays shares similarities with the capability model proposed by Dennis and Van Horn and implemented in Hydra [23]. We have also adopted the principle of separating policy and mechanism in the design of overlays, aiming to address a wide range of application security policies in a publish/subscribe environment. [11] provides a useful example of a policy-definition architecture that overlays are designed to support.

The use of XML for defining policies has been explored in previous work. [13] introduces a method for defining access restrictions on Web documents using XML, and the Security Services Markup Language [25] proposes a method for expressing security models in XML. Additionally, QML [19], although based on UML rather than XML, presents a method for describing system-level policies in an abstract manner.

Several distributed computing and publish/subscribe approaches have addressed security policy and protection mechanisms. Grid computing approaches [27] are working towards consensus on authentication and authorization issues in widely distributed computing contexts. The Legion project [34, 18] is an object-based Grid computing infrastructure with a robust security architecture featuring rights-based delegation of duties. Our goal is to develop solutions primarily applicable in a publish/subscribe context, which may also be useful for Grid researchers.

Finally, the security and safety of a running application can be broadly interpreted as a quality-of-service issue. Our work is similar to BBN’s Quality Objects [29] in its aim to apply general policies (whether traditional performance-based QoS or security) to distributed systems.

### Conclusion

We have presented a method for providing differential data protection to applications using a novel protected middleware mechanism called security overlays. This mechanism allows applications to respond to high-level security policy information while maintaining high-performance communication. We have also demonstrated an application, Active Video Streams, that uses security overlays to implement a range of security policies. Our experimental results show that the performance impact of the protected middleware layer is minimal and occurs outside the critical path of data transmission.

### Acknowledgments

This work was supported in part by an Intel Foundation Graduate Fellowship.

### References

[1] The extensible markup language (XML). http://www.w3.org/TR/1998/REC-xml-19980210.
[2] The infosphere project. http://www.cc.gatech.edu/projects/infosphere.
[3] T. F. Abdelzaher and K. G. Shin. QoS provisioning with qcontracts in web and multimedia servers. In IEEE Real-Time Systems Symposium, Phoenix, Arizona, December 1999.
[4] A. Afework, M. Benyon, F. E. Bustamante, A. DeMarzo, R. Ferreira, R. Miller, M. Silberman, J. Saltz, and A. Sussman. Digital dynamic telepathology - the virtual microscope. In Proceedings of the AMIA Annual Fall Symposium, August 1998.
[5] D. Agarwal, M. Lorch, M. Thompson, and M. Perry. A new security model for collaborative environments. In Proceedings of the Workshop on Advanced Collaborative Environments, Seattle, WA, June 2003. LBNL-52894.
[6] M. Ahamad, G. Neiger, P. Kohli, J. Burns, and P. Hutto. Causal memory: Definitions, implementation, and programming. Distributed Computing, August 1995.
[7] F. Bustamante, G. Eisenhauer, K. Schwan, and P. Widener. Efficient wire formats for high performance computing. In Proceedings of Supercomputing 2000, November 2000.
[8] F. E. Bustamante. The Active Streams Approach to Adaptive Distributed Applications and Services. PhD thesis, Georgia Institute of Technology, November 2001.
[9] W.-W. Chen, H. Towles, L. Nyland, G. Welch, and H. Fuchs. Toward a compelling sensation of telepresence: Demonstrating a portal to a distant (static) office. In T. Ertl, B. Hamann, and A. Varshney, editors, Proceedings Visualization 2000, pages 327–333, 2000.
[10] Y. Chen, K. Schwan, and D. Rosen. Java mirrors: Building blocks for remote interaction. In Proceedings of the International Parallel Distributed Processing Symposium (IPDPS), April 2002.
[11] M. J. Covington, P. Fogla, Z. Zhan, and M. Ahamad. A context-aware security architecture for emerging applications. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), Las Vegas, Nevada, USA, December 2002.
[12] C. Cruz-Neira, D. Sandin, and T. Defanti. Surround-screen projection-based virtual reality: the design and implementation of the cave. In Proceedings of the SIGGRAPH 1993 Computer Graphics Conference, 1993.
[13] E. Damiani, S. D. C. di Vimercati, S. Paraboschi, and P. Samarati. A fine-grained access control system for XML documents. ACM Transactions on Information and System Security, 5(2):169–202, May 2002.
[14] A. Dey and G. Abowd. The context toolkit: Aiding the development of context-aware applications. In Proceedings of the Workshop on Software Engineering for Wearable and Pervasive Computing, Limerick, Ireland, June 2000.
[15] G. Eisenhauer, F. E. Bustamante, and K. Schwan. Event services in high performance systems. Cluster Computing: The Journal of Networks, Software Tools, and Applications, 4(3):243–252, July 2001.
[16] G. Eisenhauer, F. E. Bustamante, and K. Schwan. Native data representation: An efficient wire format for high performance computing. IEEE Transactions on Parallel and Distributed Systems, 13(12), December 2002.
[17] G. Eisenhauer, K. Schwan, and F. Bustamante. Event services for high performance computing. In Proceedings of High Performance Distributed Computing 2000 (HPDC 2000), 2000.
[18] A. Ferrari, F. Knabe, M. Humphrey, S. Chapin, and A. Grimshaw. A flexible security system for metacomputing environments. Technical Report CS-98-36, Department of Computer Science, University of Virginia, Charlottesville, Virginia 22093, USA, December 1998.
[19] S. Frolund and J. Koistinen. Quality of service specification in distributed operating systems design. In Conference on Object-Oriented Technologies and Systems. USENIX, April 1998.
[20] R. Herttwich. Keynote address at ARCS 2001.
[21] C. Isert and K. Schwan. ACDS: Adapting computational data streams for high performance. In Proceedings of International Parallel and Distributed Processing Symposium (IPDPS), May 2000.
[22] C. Kasic and J. Walpole. QoS scalability for streamed media delivery. Technical Report CSE-99-011, Oregon Graduate Institute, September 1999.
[23] R. Levin, E. Cohen, F. Pollack, W. Corwin, and W. Wulf. Policy/mechanism separation in hydra. In Proceedings of the 5th Symposium on Operating Systems Principles, November 1975.
[24] J. Lóopez and D. O’Hallaron. Evaluation of a resource selection mechanism for complex network services. In Proc. IEEE International Symposium on High-Performance Distributed Computing (HPDC10), pages 171–180, San Francisco, Aug. 2001.
[25] Netegrity. S2ML: The XML standard for describing and sharing security services on the internet. Technical report, 2001.
[26] V. Oleson, K. Schwan, G. Eisenhauer, B. Plale, C. Pu, and D. Amin. Operational information systems - an example from the airline industry. In Proceedings of the First Workshop on Industrial Experiences with Systems Software (WEISS) 2000, 2000.
[27] L. Pearlman, V. Welch, I. Foster, C. Kesselman, and S. Tuecke. A community authorization service for group collaboration. In Proceedings of the Third International Workshop on Policies for Distributed Systems and Networks. IEEE, 2002.
[28] B. Plale, G. Eisenhauer, K. Schwan, J. Heiner, V. Martin, and J. Vetter. From interactive applications to distributed laboratories. IEEE Concurrency, 6(2), 1998.
[29] C. Rodrigues, J. Loyall, and R. Schantz. Quality objects (QuO): Adaptive management and control middleware for end-to-end QoS. In OMG’s First Workshop on Real-Time and Embedded Distributed Object Computing, Falls Church, Virgina, July 2000.
[30] D. I. Rosu, K. Schwan, S. Yalamanchili, and R. Jha. On adaptive resource allocation for complex real-time applications. In 18th IEEE Real-Time Systems Symposium, San Francisco, CA, pages 320–329. IEEE, Dec. 1997.
[31] N. Sawant, C. Scharver, J. Leigh, A. Johnson, G. Reinhart, E. Creel, S. Batchu, S. Bailey, and R. Grossman. The tele-immersive data explorer: A distributed architecture for collaborative interactive visualization of large data-sets. In Proceedings of the Fourth International Immersive Projection Technology Workshop, Ames, Iowa, 2000.
[32] Schlumberger Limited. http://www.schlumberger.com.
[33] P. Schneck and K. Schwan. Dynamic allocation of security resources to client-server applications. In IEEE Workshop on Dependable and Real-Time E-Commerce Systems, Denver, Colorado, June 1998.
[34] G. Stoker, B. S. White, E. Stackpole, T. Highley, and M. Humphrey. Toward realizable restricted delegation in computational grids. In Proceedings of European High Performance Computing and Networking (HPCN) 2001, Amsterdam, The Netherlands, June 2001.
[35] R. Strom, G. Banavar, T. Chandra, M. Kaplan, K. Miller, B. Mukherjee, D. Sturman, and M. Ward. Gryphon: An information flow based approach to message brokering. In International Symposium on Software Reliability Engineering ’98 Fast Abstract, 1998.
[36] R. West, K. Schwan, I. Tacic, and M. Ahamad. Exploiting temporan and spatial constraints on distributed shared objects. In Proceedings of the IEEE International Conference on Distributed Computing Systems, Baltimore, Maryland, May 1997. IEEE.
[37] D. Zhou, K. Schwan, G. Eisenhauer, and Y. Chen. Jecho - interactive high performance computing with Java event channels. In Proceedings of the 2001 International Parallel and Distributed Processing Symposium, April 2001.

---

This optimized text is more structured, clear, and professional, making it easier to read and understand.