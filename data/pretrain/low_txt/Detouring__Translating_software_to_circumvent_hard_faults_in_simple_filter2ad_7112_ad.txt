### 故障绕行技术在多核处理器中的应用

#### 1. 引言
随着简单、低功耗核心在多核芯片中变得越来越普遍，我们需要开发机制来确保这些核心在存在硬故障的情况下仍能正常工作。由于这些核心几乎没有硬件冗余，因此必须通过软件提供容错能力。本文介绍了一种全软件解决方案——故障绕行（Detouring），该方案利用无故障硬件来提高具有永久故障的CMP（多核处理器）的吞吐量。

#### 2. 故障覆盖分析
图7展示了每个基准测试最敏感的三个故障绕行路径。我们仅展示了性能最佳的乘法器、I-cache和移位绕行路径（“best mult”，“best ic”，“best shift”）。大部分故障覆盖率由寄存器和乘法器提供，这并不令人意外，因为它们占OR1200核心面积的很大一部分。在已覆盖的故障中，寄存器和乘法器绕行路径分别占20%和65%。移位器、除法器和旁路绕行路径分别占7%、5%和1%。符号扩展和部分字加载/存储绕行路径覆盖的故障不到1%。其中一些低覆盖率的绕行路径可能对其他核心更为重要。例如，操作数旁路绕行路径将为VLIW核心提供更多好处（其具有额外的旁路路径），而部分字加载绕行路径将为具有存储缓冲区的核心提供更多好处。

#### 3. I-Cache覆盖率
I-Cache绕行路径覆盖了I-Cache中的所有故障，除了所有核心共享的感应放大器和位线故障（>99%的覆盖率）。

#### 4. 每个绕行路径的性能影响
为了确定每个绕行路径的性能影响，我们使用了OR1200模拟器和MediaBench基准套件[12]。图6展示了每个绕行路径相对于原始二进制文件（无绕行）在无故障处理器上运行时的减速情况。图表显示了最小减速、最大减速以及四分位数，这些数据是通过对所有基准测试测量得到的。寄存器和I-Cache绕行路径针对不同数量的绕行条目进行了展示。

图6支持了我们的初步直觉，即绕行技术对于执行多个不同任务的CMP最有用。如预期的那样，每个绕行路径的最大开销相当显著。如果不是这样，绕行的电路部分将是不必要的。然而，对于每个绕行路径，至少有一个基准测试没有明显的减速，并且至少有一半的基准测试减速小于13%。

结果中有三个非直观现象值得进一步解释：
1. 许多绕行路径在某些基准测试中显示出轻微的速度提升。这种现象在所有情况下都是由于代码重组（以及寄存器绕行路径中的堆栈重组）导致的I-cache未命中减少。
2. 右移比左移更慢。这是因为左移一位或两位非常常见，可以优化为一到两次加法，而不需要乘法。右移没有这样的捷径。
3. 如果循环迭代次数较少（即第二个乘数较小），基于移位的乘法可以比其他乘法绕行路径更快。

为了进一步了解这些结果，我们研究了每个基准测试对每个绕行路径的敏感性。我们研究了每个基准测试最不敏感和最敏感的三个绕行路径。图7展示了每个基准测试最敏感的三个绕行路径。不同基准测试之间的绕行路径组合和排名差异很大。类似地，识别每个基准测试最不敏感的绕行路径的实验（由于空间限制未展示）表明，每个基准测试至少有三个绕行路径对其不敏感（减速小于2.6%）。从这些结果中，我们可以得出以下结论：(a) 没有任何一个绕行路径对所有基准测试都有很大的负面影响；(b) 没有任何一个基准测试对所有绕行路径都敏感。因此，给定一个绕行感知调度器和多样化的负载，结果表明绕行技术可以使原本无用的核心几乎以满性能运行。

#### 5. 总体吞吐量
绕行技术的最终目标是在存在故障的情况下提高CMP的吞吐量。为了评估吞吐量，我们开发了一个基于蒙特卡洛的分析模型，该模型计算了CMP中存在故障数量的估计性能。在这个分析中，我们假设故障均匀分布。大多数绕行路径通过在粗粒度级别上绕过电路来容忍故障；因此，在大多数情况下，一小簇故障的影响与单个故障相似。

我们的分析结果如图8所示，该图比较了16核CMP的四种不同容错配置。基线系统（Base）通过完全禁用核心来容忍硬故障。如果其中一个缓存出现硬故障，则通过禁用受影响的缓存来容忍，但允许相关核心继续执行。备用（Spares）配置与基线配置相同，但假定每个缓存有一个备用行，可以映射到故障缓存。绕行（Detour）和绕行+备用（Detour+Spares）展示了使用绕行技术的两个系统的性能。

在所有配置中，随着故障数量的增加，吞吐量急剧下降，但使用绕行技术可以显著减缓性能下降。这些结果还表明，备用缓存行不能替代绕行技术，但两者是互补的。

另一种看待这些数据的方式是确定CMP在未能达到某个吞吐量目标之前可以包含多少硬故障。这个问题在需要提供一定性能水平的应用程序中更为相关（例如，以全帧率播放电影或以全链路速度路由数据包）。这些数据如图9所示。对于任何吞吐量目标，绕行配置至少可以容忍两倍于基线系统的错误，而绕行+备用系统仍然可以容忍比备用系统多60%-80%的错误。

#### 6. 结论与未来工作
随着简单、低功耗核心在多核芯片中变得越来越普遍，我们需要开发机制来确保这些核心在存在硬故障的情况下仍能正常工作。由于这些核心几乎没有硬件冗余，因此必须通过软件提供容错能力。绕行技术是一种全软件解决方案，它利用无故障硬件来提高具有永久故障的CMP的吞吐量。通过允许一些有故障的核心以降低的性能继续运行，从而实现性能提升。

我们相信，可以通过开发更多绕行路径（尤其是数据缓存绕行路径）来进一步提高覆盖率，不仅针对OR1200，也针对其他简单的处理器核心。我们计划在未来的工作中探索这一研究方向。我们还认为，通过少量硬件的支持，绕行技术可以实现更好的性能——通过提高故障覆盖率和瞬时性能。我们计划开发硬件“钩子”，以启用新的绕行路径并改进其他绕行路径的瞬时性能。

#### 7. 致谢
本研究得到了国家科学基金会（CCR-0444516）、美国国家航空航天局（NNG04GQ06G）、丰田信息技术中心以及英特尔公司的设备捐赠的支持。感谢Alvy Lebeck对此工作的反馈。

#### 8. 参考文献
[1] V. Adve et al. LLVA: A Low-level Virtual Instruction Set Architecture. In Proceedings of the 36th Annual International IEEE/ACM on Microarchitecture, Dec. 2003.
[2] F. A. Bower, P. G. Shealy, S. Ozev, and D. J. Sorin. Tolerating Hard Faults in Microprocessor Array Structures. In Proc. of the Int’l Conf. on Dependable Systems and Networks, pages 51–60, June 2004.
[3] F. A. Bower, D. J. Sorin, and S. Ozev. A Mechanism for Online Diagnosis in Microprocessors. In Proc. of the 38th Annual Int’l Symposium on Microarchitecture, Nov. 2005.
[4] B. Buck and J. K. Hollingsworth. An API for Runtime Code Patching. The International Journal of High Performance Computing Applications, 14(4):317–329, Winter 2000.
[5] Cisco Systems. Cisco Carrier Router System. http://www.cisco.com/application/pdf/en/us/guest/products/ps5763/c1031/cdcco%nt_0900aecd800f8118.pdf, Oct. 2006.
[6] R. P. Colwell. The Pentium Chronicles: The People, Passion, and Politics Behind Intel’s Landmark Chips. IEEE Computer Society Press, 2006.
[7] K. Constantinides, O. Mutlu, T. Austin, and V. Bertacco. Software-Based Online Detection of Hardware Defects: Mechanisms, Architectural Support, and Evaluation. In Proc. of the 40th Annual Int’l Symp. on Microarchitecture, pages 97–108, Dec. 2007.
[8] M. Gschwind et al. Synergistic Processing in Cell’s Multicore Architecture. IEEE Micro, 26(2):10–24, Mar/Apr 2006.
[9] P. Kongetira, K. Aingaran, and K. Olukotun. Niagara: A 32-way Multithreaded SPARC Processor. IEEE Micro, 25(2):21–29, Mar/Apr 2005.
[10] D. Lampret. OpenRISC 1200 IP Core Specification, Rev. 0.7. http://www.opencores.org, Sept. 2001.
[11] J. R. Larus and E. Schnarr. EEL: Machine-Independent Executable Editing. In Proceedings of the SIGPLAN 1995 Conference on Programming Language Design and Implementation, pages 291–300, June 1995.
[12] C. Lee, M. Potkonjak, and W. H. Mangione-Smith. MediaBench: A Tool for Evaluating and Synthesizing Multimedia and Communications Systems. In Proc. of the 30th Annual IEEE/ACM International Symposium on Microarchitecture, pages 330–335, Dec. 1997.
[13] E. McLellan. The Alpha AXP Architecture and the 21064 Processor. IEEE Micro, 13(3):36–47, May/June 1993.
[14] J. Montrym and H. Moreton. The GeForce 6800. IEEE Micro, 25:41–51, March/April 2005.
[15] N. Oh, P. P. Shirvani, and E. J. McCluskey. Error Detection by Duplicated Instructions in Super-Scalar Processors. IEEE Transactions on Reliability, 51(1):63–74, Mar. 2002.
[16] M. Psarakis et al. Systematic Software-based Self-test for Pipelined Processors. In Proc. of the 43rd Design Automation Conference, pages 393–398, July 2006.
[17] G. A. Reis et al. SWIFT: Software Implemented Fault Tolerance. In Proc. of the International Symposium on Code Generation and Optimization, Mar. 2005.
[18] E. Schuchman and T. N. Vijaykumar. Rescue: A Microarchitecture for Testability and Defect Tolerance. In Proc. of the 32nd Annual International Symposium on Computer Architecture, pages 160–171, June 2005.
[19] P. Shivakumar, S. W. Keckler, C. R. Moore, and D. Burger. Exploiting Microarchitectural Redundancy For Defect Tolerance. In Proceedings of the 21st Int’l Conference on Computer Design, Oct. 2003.
[20] J. Srinivasan, S. V. Adve, P. Bose, and J. A. Rivers. The Impact of Technology Scaling on Lifetime Reliability. In Proc. of the International Conference on Dependable Systems and Networks, June 2004.
[21] R. M. Stallman and the GCC Developer Community. GNU Compiler Collection Internals. http://gcc.gnu.org/onlinedocs/gccint.pdf, 2005.
[22] G. Xenoulis et al. On-line Periodic Self-Testing of High-Speed Floating-Point Units in Microprocessors. In Proc. 22nd IEEE International Symposium on Defect and Fault Tolerance in VLSI Systems, Sept. 2007.
[23] T. Y. Yeh, P. Faloutsos, and S. J. Patel. ParallAX: An Architecture for Real-Time Physics. In Proceedings of the 34th Annual International Symposium on Computer Architecture, pages 232–243, June 2007.