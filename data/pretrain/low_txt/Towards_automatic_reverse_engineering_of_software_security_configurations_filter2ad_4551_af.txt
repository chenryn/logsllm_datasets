### Introduction and Related Work

The concept of Strider has been extended to correct misconfigurations through differential analysis and statistical methods. Other significant research in this area includes Validation [20] and Chronus [30]. More recent work focuses on the automatic generation of correct configuration files for a system using custom-declared specifications. Notable examples include the approach proposed by Zheng et al. [33], Cfengine [6], LCFG, and SmartFrog [4].

In addition to academic efforts, software manufacturers have developed tools for checking configurations by retrieving databases of known misconfigurations. A prominent example is the Microsoft Baseline Security Analyzer [3]. Most of these approaches assume prior knowledge about system configurations, such as correct registries [29, 27], configuration templates [33], and databases of known misconfigurations. Our approach aims to automatically discover such knowledge from an applicationâ€™s executables, which is particularly important for applications with poorly documented or non-existent configuration specifications.

Closely related to our research is the problem of protocol reverse engineering, which has been extensively studied recently [11, 7, 17, 31]. Many existing approaches focus on the automatic extraction of protocol fields. For example, Discover [11] uses clustering algorithms to recover fields from network traffic, while Polyglot [7], Autoformat [17], and the approach by Wondracek et al. [31] use dynamic taint analysis to detect protocol fields from applications that know how to parse the protocol. Unlike these approaches, ConfigRE is designed for the automatic reverse engineering of program configurations, requiring a semantic understanding of the roles played by individual fields in defining access-control policies. Wondracek et al. [31] also discussed using API function parameters to understand the semantic meaning of some protocol fields, such as file names. However, this is insufficient for our purposes because we need to recognize the semantic relations among individual fields, such as the context (e.g., the field `hFiles`) under which the file name is specified. Additionally, our approach bridges the syntax-semantic gap to automatically generate a language for misconfiguration detection. Existing techniques can be used in configuration reverse engineering to partition configuration files into fields, as we did in our research.

### Taint Analysis Techniques

Instruction-level taint tracking has been intensively studied in recent years, with numerous approaches proposed. Prominent examples include TaintCheck [22], TaintTrace [8], Memcheck [25], RIFLE [26], and LIFT [24]. These techniques are widely applied to analyze software vulnerabilities [5, 10], study malware [32], reverse engineer protocols [7, 31], and generate protocol replays [21]. While most existing approaches are based on data-flow analysis, control-flow-based taint analysis techniques have also been proposed, such as Dytan [9] and the technique for dynamic spyware analysis [13]. These existing techniques can be used to improve the taint analyzer in our approach.

### Discussion

Our research on ConfigRE represents the first step towards the automatic extraction of configuration knowledge from an application. In this section, we discuss its limitations and potential future research directions.

The fundamental idea behind ConfigRE is general: it can handle both text-based and binary-based configuration files. However, our current implementation is oriented towards text-based configurations for two reasons: first, the field extraction technique is designed for processing text-based input streams, as most Linux-based applications use text-based configuration formats; second, language generation does not consider the delimiters specific to binary configurations, such as length fields. Research on the first problem can benefit from existing approaches for parsing binary protocols [7, 31], although more work is needed to improve their effectiveness. We will also enhance our design for language generation to accommodate the features of binary configurations, which can address the second problem.

ConfigRE relies on control-flow-based taint analysis to detect the semantic relations of configuration fields. Control-flow taint analysis is known to be challenging, as it can cause a large amount of irrelevant data to be mistakenly tainted. Our current mitigation of this problem is empirical and can lead to false positives (tainting unrelated data) or false negatives (missing data that should be tainted). False positives can be mitigated in the third step of our approach, where candidate permission fields undergo a rerun test. An improvement can be achieved by incorporating existing control-flow taint analysis techniques, such as Dytan [9].

When dealing with a large number of alternative values, the rerun-based technique can become problematic in terms of performance. A potential solution is to use static analysis to check whether a field indeed affects the accomplishment of a transaction, and to rerun the application only when static analysis fails.

An important challenge is the coverage of the analysis: if some authorization settings do not appear in the configuration files used in the analysis, their specifications may not be discovered by our current approach. A technique that extracts the entire authorization specification would be a significant step forward. Efforts in this direction can be assisted by existing techniques for exploring multiple executions [19], but these techniques are time-consuming even for moderately sized programs. Improving their efficiency by leveraging configuration features is a nontrivial problem.

The current design of ConfigRE only considers interactions between the remote client and the local file system. Future research could explore other security-related configuration issues, such as the discovery of security settings for downloading and executing remote scripts. Another interesting question is how to automatically detect hidden configurations in potentially malicious programs, such as Trojan horses. This is a very challenging problem because these programs may contain obfuscated code to discourage binary analysis.

The prototype we implemented is not fully automatic and requires human intervention to check the extracted configuration fields. This issue arises because existing field-extraction techniques [7, 17, 31], which our prototype is based on, cannot guarantee the correct identification of all configuration fields. Occasionally, they miss necessary delimiters for field identification, necessitating manual examination to resolve issues such as the merging of two fields into one. Additionally, the test requests used in our research were manually adjusted to explore security configurations for multiple subject/object pairs. Such adjustments can be based on information automatically discovered during the analysis and can be fully automated, as discussed in Section 3.2.

### Conclusion

Knowledge of configuration file formats has significant security implications, as it forms the foundation for the automatic detection of security misconfigurations. However, such knowledge is often poorly documented for many applications and becomes increasingly inaccessible due to the use of graphical user interfaces for indirect configurations. An effective solution to this problem relies on the automatic analysis of an application to reverse-engineer its configuration specifications. As a first step towards this goal, we present ConfigRE, a new technique that identifies individual configuration fields and their semantic relations, detects fields related to access control components, and automatically generates a specification language for access control configurations. This language is then converted into a scanner to check configuration files for the security policies specified in an application. We evaluated ConfigRE using real applications, demonstrating the efficacy of our technique. Future research will focus on extending our design to handle binary-based configurations and policy specifications for more complex activities, such as script execution.

### Acknowledgements

We thank our Shepherd Anil Somayaji and anonymous reviewers for their valuable comments on the paper. This work was supported in part by the National Science Foundation's Cyber Trust program under Grant No. CNS-0716292.

### References

[1] flex: The Fast Lexical Analyzer. http://flex.sourceforge.net/, as of 2008.
[2] bftpd. http://freshmeat.net/projects/bftpd/, as of April, 2008.
[3] Microsoft Baseline Security Analyzer. http://www.microsoft.com/technet/security/tools/MBSAHome.mspx, as of April, 2008.
[4] P. Anderson, P. Goldsack, and J. Paterson. SmartFrog meets LCFG: Autonomous reconfiguration with central policy control. In LISA '03: Proceedings of the 17th USENIX conference on System administration, pages 213-222, 2003.
[5] D. Brumley, J. Newsome, D. X. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In S&P, pages 2-16, 2006.
[6] M. Burgess. CFEngine: A site configuration engine. USENIX Computing systems, 8(3):309-337, Summer 1995.
[7] J. Caballero, H. Yin, Z. Liang, and D. Song. Polyglot: Automatic extraction of protocol message format using dynamic binary analysis. In CCS '07: Proceedings of the 14th ACM conference on Computer and communications security, pages 317-329, 2007.
[8] W. Cheng, Q. Zhao, B. Yu, and S. Hiroshige. TaintTrace: Efficient flow tracing with dynamic binary rewriting. In ISCC, pages 749-754, 2006.
[9] J. Clause, W. Li, and A. Orso. Dytan: A generic dynamic taint analysis framework. In ISSTA '07: Proceedings of the 2007 international symposium on Software testing and analysis, pages 196-206, 2007.
[10] J. R. Crandall, Z. Su, and S. F. Wu. On deriving unknown vulnerabilities from zero-day polymorphic and metamorphic worm exploits. In CCS '05: Proceedings of the 12th ACM conference on Computer and communications security, pages 235-248, New York, NY, USA, 2005. ACM Press.
[11] W. Cui, J. Kannan, and H. J. Wang. Discoverer: Automatic protocol reverse engineering from network traces. In Proceedings of the 16th USENIX Security Symposium, August 2007.
[12] C. Donnelly and R. Stallman. Bison: The Yacc-Compatible Parser Generator. Luniverse Inc, Bloomington, Indiana, 2000.
[13] M. Egele, C. Kruegel, E. Kirda, H. Yin, and D. Song. Dynamic spyware analysis. In Proceedings of the 2007 USENIX Annual Technical Conference (Usenix'07), June 2007.
[14] J. C. King. Symbolic execution and program testing. Commun. ACM, 19(7):385-394, 1976.
[15] E. Kycyman and Y.-M. Wang. Discovering correctness constraints for self-management of system configuration. In ICAC '04: Proceedings of the First International Conference on Autonomic Computing, pages 28-35, 2004.
[16] T. Lengauer and R. E. Tarjan. A fast algorithm for finding dominators in a flowgraph. ACM Trans. Program. Lang. Syst., 1(1):121-141, 1979.
[17] Z. Lin, X. Jiang, D. Xu, and X. Zhang. Automatic protocol format reverse engineering through context-aware monitored execution. In NDSS, 2008.
[18] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In PLDI '05: Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation, pages 190-200, 2005.
[19] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In IEEE Symposium on Security and Privacy, pages 231-245, 2007.
[20] K. Nagaraja, F. Oliveira, R. Bianchini, R. P. Martin, and T. D. Nguyen. Understanding and dealing with operator mistakes in internet services. In OSDI'04: Proceedings of the 6th conference on Symposium on Operating Systems Design & Implementation, pages 5-5, 2004.
[21] J. Newsome, D. Brumley, J. Franklin, and D. X. Song. Replayer: Automatic protocol replay by binary analysis. In ACM Conference on Computer and Communications Security, pages 311-321, 2006.
[22] J. Newsome and D. X. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In NDSS, 2005.
[23] D. Oppenheimer, A. Ganapathi, and D. Patterson. Why do internet services fail, and what can be done about it? In Proceedings of the 4th USENIX Symposium on Internet Technologies and System (USITS '03), 2003.
[24] F. Qin, C. Wang, Z. Li, H.-S. Kim, Y. Zhou, and Y. Wu. LIFT: A low-overhead practical information flow tracking system for detecting security attacks. In MICRO, pages 135-148, 2006.
[25] J. Seward and N. Nethercote. Using Valgrind to detect undefined value errors with bit-precision. In USENIX Annual Technical Conference, General Track, pages 17-30, 2005.
[26] N. Vachharajani, M. J. Bridges, J. Chang, R. Rangan, G. Ottoni, J. A. Blome, G. A. Reis, M. Vachharajani, and D. I. August. RIFLE: An architectural framework for user-centric information-flow security. In MICRO, pages 243-254. IEEE Computer Society, 2004.
[27] H. J. Wang, J. C. Platt, Y. Chen, R. Zhang, and Y.-M. Wang. Automatic misconfiguration troubleshooting with peer pressure. In OSDI, pages 245-258, 2004.
[28] R. Wang, X. Wang, K. Zhang, and Z. Li. Towards automatic reverse engineering of software security configurations. Technical Report IUCS-TR667, Indiana University, 2008.
[29] Y.-M. Wang, C. Verbowski, J. Dunagan, Y. Chen, H. J. Wang, C. Yuan, and Z. Zhang. Strider: A black-box, state-based approach to change and configuration management and support. In LISA, pages 159-172, 2003.
[30] A. Whitaker, R. S. Cox, and S. D. Gribble. Configuration debugging as search: Finding the needle in the haystack. In OSDI'04: Proceedings of the 6th conference on Symposium on Operating Systems Design & Implementation, pages 6-6, 2004.
[31] G. Wondracek, P. M. Comparetti, C. Kruegel, and E. Kirda. Automatic network protocol analysis. In NDSS, 2008.
[32] H. Yin, D. Song, E. Manuel, C. Kruegel, and E. Kirda. Panorama: Capturing system-wide information flow for malware detection and analysis. In Proceedings of the 14th ACM Conferences on Computer and Communication Security (CCS'07), October 2007.
[33] W. Zheng, R. Bianchini, and T. D. Nguyen. Automatic configuration of internet services. In EuroSys '07: Proceedings of the 2nd ACM SIGOPS/EuroSys European Conference on Computer Systems 2007, pages 219-229, New York, NY, USA, 2007. ACM.