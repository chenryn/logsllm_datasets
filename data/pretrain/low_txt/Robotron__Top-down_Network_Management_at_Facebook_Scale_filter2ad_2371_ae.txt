### 8. EXPERIENCE AND FUTURE WORK

In this section, we share examples of issues encountered while using Robotron and the lessons learned that highlight open research problems or can inform the design of future network management systems.

#### Complexity of Modeling
A user-impacting event occurred when a new BGP session was provisioned with an external ISP, requiring a custom import policy containing cherry-picked prefixes. This artificially limited the session to serve only traffic destined for users behind those specific prefixes. During the development phase, an engineer used Robotron to activate the session, which immediately saturated the egress link. The issue was detected via monitoring by our operations team, who quickly mitigated it. While similar outages could have been prevented by promptly incorporating the latest design requirements into Robotron, a significant amount of development time was spent on designing new or correcting existing FBNet models to capture these new requirements. Developing network-wide models that are rich enough to capture the multitude of low-level configuration parameters and ensure cross-device configuration integrity would allow new designs to be implemented quickly in Robotron with minimal model changes.

#### Stale Configurations
After network design changes are made, Robotron currently relies on network engineers to trigger configuration generation and deployment. This is because certain design changes (e.g., topology changes) depend on modifications to the underlying physical network (e.g., recabling). The time gap between design changes, configuration generation, and configuration rollout can lead to the accidental deployment of stale configurations. For example, in one instance, Engineer A wanted to add a new rack to a cluster. He updated the rack profile and generated configurations for the cluster switches but did not immediately deploy them. A few days later, Engineer B updated the rack profile, invalidating A's design change, without regenerating new configurations. One week later, Engineer A, unaware of B's changes, pushed the stale configurations to the cluster switches, resulting in connectivity loss for several racks in the cluster. While this particular issue could have been avoided if network design, configuration generation, and deployment were tightly coupled, the real challenge arises when design changes are made closely in time. How to serialize concurrent design changes, resolve design conflicts, and leverage the derived network state to ensure change safety remains an open problem. Statesman [33] provides some novel ideas on conflict resolution, but at Facebook's scale, handling multiple writers with a lock-based mechanism can be challenging.

#### Automation Fallbacks
Network engineers occasionally bypass Robotron to manually configure devices due to Robotron bugs, unfamiliarity with the system, or the urgent need to make changes unsupported by Robotron. Manual changes often lead to misconfigurations, resulting in issues such as idle circuits, suboptimal routing, and unexpected outages. Ideally, an automated network management system like Robotron should block manual changes directly to the network devices and require all configuration changes to be made through it. However, our operational experiences show that users, especially in exceptional cases, need a reliable fallback mechanism to make emergency changes to the network. Instead of blocking manual changes, Robotron monitors them (Section 5.4.3). Another possible solution is to periodically restore device running configurations to Robotron-generated configurations, while providing a window for these emergency operations.

### 9. RELATED WORKS

Many prior studies have focused on understanding network management challenges and reverse-engineering and validating network designs through bottom-up static configuration analysis in both provider networks [15, 20, 25, 29, 36] and enterprise networks [13, 14, 16, 26, 30]. Additionally, recent work [21, 22] proposes general methods for analyzing and troubleshooting configurations. In contrast, Robotron employs a top-down approach, continuously refined through the operational experience of our network engineers, to manage a multi-domain network consisting of a backbone, multiple data centers, and points of presence (POPs).

The potential for automating or simplifying network design and configuration through abstraction has inspired many works in the research community. A class of literature [31, 34, 35, 38] applies the "top-down" paradigm to systematically optimize the configuration of specific protocols or network functions (e.g., VLANs, packet filters, topologies, and routing) to meet desired objectives such as performance, reachability, and reliability. Recent work [27, 33] proposes the use of a centralized platform similar to FBNet for network control and management. Several industrial solutions [4, 7, 10, 18] adopt template-based approaches for configuration generation. Many efforts aim to develop abstract languages or models to specify configurations in a vendor-neutral fashion [6, 17]. Robotron incorporates many of these best practices but is broader in scope: in addition to modeling, network design, and configuration generation, Robotron includes configuration deployment and monitoring, with a focus on scaling each stage of the network management life cycle. Robotron also applies best practices in software engineering, including object-oriented (OO)-based network modeling, version control, code review, and deployment automation, to large-scale network management.

Finally, a few studies [12, 24] consider simplifying network management through clean-slate designs by rearchitecting the control plane. In contrast, Robotron is applicable to both existing operational networks and clean-slate designs.

### 10. CONCLUSION

This paper presents the design, implementation, and operational experiences of Robotron, the system responsible for managing Facebook's production network, which includes data centers, a global backbone, and POPs over the last eight years. Robotron employs a top-down approach where human intentions are translated into a set of distributed, heterogeneous configurations. Beyond configuration generation, Robotron also deploys and monitors configurations to ensure the actual state of the network does not deviate from the design. We also present significant usage statistics of Robotron to provide insights into the operations of Facebook's production network.

Recently, researchers [11] have advocated for management plane analytics, similar to prior research done for control and data planes. By sharing our experience with Robotron, we hope to stimulate more research in this field and improve management practices in the networking community.

### Acknowledgment

Many people in the Network Platform team at Facebook have contributed to Robotron over the years. In particular, we would like to acknowledge Andrew Kryczka, Paul McCutcheon, and Manoj Lal. We are also indebted to Omar Baldonado, Nick Feamster, Mikel Jimenez, Steve Shaw, Chad Shields, Callahan Warlick, CQ Tang, Sanjeev Kumar, our shepherd, Katerina Argyraki, and the anonymous SIGCOMM reviewers for their comments and suggestions on earlier drafts.

### 11. REFERENCES

[1] Apache Thrift. http://thrift.apache.org/.

[2] Django. https://www.djangoproject.com/.

[3] Google Compute Engine Incident 15064. https://status.cloud.google.com/incident/compute/15064.

[4] HPE Network Management (HP OpenView). http://www8.hp.com/us/en/software-solutions/network-management/index.html.

[5] ISO/IEC 7498-4: Information processing systems – Open Systems Interconnection – Basic Reference Model – Part 4: Management framework.

[6] OpenConfig. http://www.openconfig.net/.

[7] Opsware. http://www.opsware.com/.

[8] Root Cause Analysis for recent Windows Azure Service Interruption in Western Europe. https://goo.gl/UtrzhL.

[9] Summary of the Amazon EC2 and Amazon RDS Service Disruption in the US East Region. https://aws.amazon.com/message/65648/.

[10] Tivoli Netcool Configuration Manager. http://ibm.com/software/products/en/tivonetcconfmana.

[11] A. Akella and R. Mahajan. A call to arms for management plane analytics. In Proceedings of the 13th ACM Workshop on Hot Topics in Networks, HotNets-XIII, 2014.

[12] H. Ballani and P. Francis. Conman: A step towards network manageability. In Proceedings of the 2007 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, SIGCOMM ’07, 2007.

[13] T. Benson, A. Akella, and D. Maltz. Unraveling the complexity of network management. In Proceedings of the 6th USENIX Symposium on Networked Systems Design and Implementation, NSDI’09, 2009.

[14] T. Benson, A. Akella, and D. A. Maltz. Mining policies from enterprise network configuration. In Proceedings of the 9th ACM SIGCOMM Conference on Internet Measurement Conference, IMC ’09, 2009.

[15] T. Benson, A. Akella, and A. Shaikh. Demystifying configuration challenges and trade-offs in network-based ISP services. In Proceedings of the ACM SIGCOMM 2011 Conference, SIGCOMM ’11, 2011.

[16] D. Caldwell et al. The cutting edge of IP router configuration. SIGCOMM Comput. Commun. Rev., 34(1):21–26, Jan. 2004.

[17] Distributed Management Task Force, Inc. http://www.dmtf.org.

[18] W. Enck et al. Configuration management at massive scale: system design and experience. Selected Areas in Communications, IEEE Journal on, 2009.

[19] R. Enns, M. Bjorklund, J. Schoenwaelder, and A. Bierman. Network Configuration Protocol (NETCONF). RFC 6241 (Proposed Standard), June 2011.

[20] N. Feamster and H. Balakrishnan. Detecting BGP configuration faults with static analysis. In Proceedings of the 2nd Conference on Symposium on Networked Systems Design & Implementation - Volume 2, NSDI’05, 2005.

[21] A. Fogel et al. A general approach to network configuration analysis. In Proceedings of the 12th USENIX Conference on Networked Systems Design and Implementation, NSDI’15, 2015.

[22] A. Gember-Jacobson et al. Management plane analytics. In Proceedings of the 2015 ACM Conference on Internet Measurement Conference, IMC ’15, 2015.

[23] R. Gerhards. The Syslog Protocol. RFC 5424 (Proposed Standard), Mar. 2009.

[24] A. Greenberg et al. A clean slate 4D approach to network control and management. SIGCOMM Comput. Commun. Rev., 35(5):41–54, Oct. 2005.

[25] Y. Himura and Y. Yasuda. Discovering configuration templates of virtualized tenant networks in multi-tenancy datacenters via graph-mining. SIGCOMM Comput. Commun. Rev., 42(3), June 2012.

[26] H. Kim, T. Benson, A. Akella, and N. Feamster. The evolution of network configuration: A tale of two campuses. In Proceedings of the 2011 ACM SIGCOMM Conference on Internet Measurement Conference, IMC ’11, 2011.

[27] T. Koponen et al. Onix: A distributed control platform for large-scale production networks. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDI’10, 2010.

[28] P. Lapukhov, A. Premji, and J. Mitchell. Use of BGP for routing in large-scale data centers. Internet-draft, Internet Engineering Task Force, Apr. 2016. Work in Progress.

[29] R. Mahajan, D. Wetherall, and T. Anderson. Understanding BGP misconfiguration. SIGCOMM Comput. Commun. Rev., 32(4), Aug. 2002.

[30] D. A. Maltz et al. Routing design in operational networks: A look from the inside. In Proceedings of the 2004 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, SIGCOMM ’04, 2004.

[31] B. Schlinker et al. Condor: Better topologies through declarative design. In Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication, SIGCOMM ’15, 2015.

[32] A. Singh et al. Jupiter rising: A decade of Clos topologies and centralized control in Google’s datacenter network. In Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication, SIGCOMM ’15, 2015.

[33] P. Sun et al. A network-state management service. In Proceedings of the 2014 ACM Conference on SIGCOMM, SIGCOMM ’14, 2014.

[34] X. Sun and G. G. Xie. Minimizing network complexity through integrated top-down design. In Proceedings of the Ninth ACM Conference on Emerging Networking Experiments and Technologies, CoNEXT ’13, 2013.

[35] Y.-W. E. Sung et al. Towards systematic design of enterprise networks. In Proceedings of the 2008 ACM CoNEXT Conference, CoNEXT ’08, 2008.

[36] Y.-W. E. Sung et al. Modeling and understanding end-to-end class of service policies in operational networks. In Proceedings of the ACM SIGCOMM 2009 Conference on Data Communication, SIGCOMM ’09, 2009.

[37] C. Tang et al. Holistic configuration management at Facebook. In Proceedings of the 25th Symposium on Operating Systems Principles, SOSP ’15, 2015.

[38] S. Vissicchio et al. Improving network agility with seamless BGP reconfigurations. IEEE/ACM Trans. Netw., 21(3):990–1002, June 2013.