Title: What’s in Your Dongle and Bank Account? Mandatory and Discretionary Protection of Android External Resources

Authors:
- Soteris Demetriou†
- Xiaoyong Zhou‡
- Muhammad Naveed†
- Yeonjoon Lee‡
- Kan Yuan‡
- XiaoFeng Wang‡
- Carl A. Gunter†

Affiliations:
- †Department of Computer Science, University of Illinois at Urbana-Champaign
- ‡School of Informatics and Computing, Indiana University, Bloomington

Contact Information:
- {sdemetr2, naveed2, cgunter}@illinois.edu
- {zhou, yl52, kanyuan, xw7}@indiana.edu

Abstract:
The widespread use of security-critical external resources (e.g., accessories, online services) presents new challenges to Android security. Previous research has shown that a malicious app with the BLUETOOTH and BLUETOOTH_ADMIN permissions can gain unrestricted access to any Bluetooth device, such as a blood glucose meter. This paper further demonstrates that sensitive text messages from online banking services and social networks (e.g., account balance, password reset links) are fully exposed to any app with the RECEIVE_SMS or READ_SMS permission. Similar security risks exist in other channels (Internet, Audio, NFC) used to connect the phone to various external devices or services.

The current permission-based Discretionary Access Control (DAC) and SEAndroid-based Mandatory Access Control (MAC) are too coarse-grained to protect these resources. Any app with the necessary permission for a channel is granted full access to all associated resources. To address this, we introduce SEACAT, a new security system for fine-grained, flexible protection of external resources. SEACAT supports both MAC and DAC, integrating their enforcement mechanisms across the Android middleware and the Linux kernel. It extends SEAndroid to specify policies on external resources and hosts a DAC policy base. Both sets of policies are managed under the same policy engine and Access Vector Cache, ensuring that misconfigured DAC policies do not affect MAC policy enforcement. A policy management service is also provided for ordinary Android users to set policies protecting third-party resources. Our implementation effectively thwarts known attacks on external resources with negligible performance overhead.

* The two lead authors are ordered alphabetically.
Permission to freely reproduce all or part of this paper for noncommercial purposes is granted provided that copies bear this notice and the full citation on the first page. Reproduction for commercial purposes is strictly prohibited without the prior written consent of the Internet Society, the first-named author, and the author’s employer if the paper was prepared within the scope of employment.

NDSS '15, 8-11 February 2015, San Diego, CA, USA
Copyright 2015 Internet Society, ISBN 1-891562-38-X
http://dx.doi.org/10.14722/ndss.2015.23098

I. Introduction
The growth of the Android ecosystem has introduced a wide range of external resources (accessories, web services, etc.), enriching the functionality of Android devices. These resources are used not only for convenience and entertainment but also for critical tasks in healthcare, finance, and home security. However, it is unclear whether these resources are adequately protected by mobile operating systems.

In previous research, we demonstrated that an unauthorized app with BLUETOOTH and BLUETOOTH_ADMIN permissions can access sensitive medical data from Bluetooth healthcare accessories. We also found that network sockets opened by screenshot services are exposed to any app with the INTERNET permission, allowing them to capture the screen of an Android phone. Additionally, credit-card information transmitted via the Audio jack by the Square dongle was vulnerable to interception by any app with the AUDIO permission.

While some issues, like the Square dongle vulnerability, were addressed with ad hoc solutions, most external resources remain unprotected. For example, we successfully exploited the Jawbone UP wristband through the Audio channel, downloading all its data using an unauthorized app. Similarly, unauthorized apps with the RECEIVE_SMS or READ_SMS permission can read sensitive messages from banks and social networks, including password reset links and account balances.

These threats are significant given the number of untrustworthy apps that request these permissions. For instance, our study of 13,500 highly-ranked apps from Google Play showed that 560 apps require the RECEIVE_SMS or READ_SMS permission, with over 3 billion installations. Once these apps have the permission, they can read any message, including those containing sensitive information.

Fundamentally, Android's DAC mechanism, based on permissions, is too coarse-grained to protect external resources. Permissions control individual channels (Bluetooth, NFC, Internet, SMS, Audio) but cannot differentiate between resources attached to the same channel. Even SEAndroid, which provides finer-grained MAC, does not cover external resources.

To address this, we developed SEACAT, a new security system that integrates both MAC and DAC. SEACAT extends SEAndroid to define new types for external resources, allowing administrators to specify mandatory security policies. These policies are enforced through security hooks placed in both the Android framework and the Linux kernel. Additionally, a policy management service allows users to set DAC rules for third-party resources, providing flexibility while ensuring that MAC policies are always followed.

II. Background
Android and other mobile systems are frequently used to manage external resources, including remote services and IoT devices. These resources are connected to smartphones through various channels (Bluetooth, NFC, Internet, SMS, Audio). Android's security model includes DAC, characterized by application sandboxing and a permission model. Each app runs in its own sandbox, and permissions are required to access sensitive resources. However, this model is coarse-grained, granting unrestricted access to a channel or denying it entirely.

SEAndroid, a MAC system built on top of Android, mediates interactions between apps and system resources. It assigns security contexts (user:role:domain:type[:level]) to subjects and objects, and policies dictate whether a process can access an object. SEAndroid currently focuses on local resources and lacks the capability to assign security tags to external resources.

Contributions:
- New understanding: We investigated previously unstudied channels (SMS, Audio, NFC) and highlighted the need for finer-grained access control.
- New techniques: We designed SEACAT, a centralized and comprehensive protection mechanism for Android external resources, supporting both MAC and DAC.
- Implementation and evaluation: We implemented SEACAT and evaluated it against known threats, demonstrating its effectiveness and low performance overhead.