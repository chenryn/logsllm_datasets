### Overview of DSTM2 Implementation and Performance

The library-based DSTM2 implementation is an unoptimized research platform primarily designed to offer flexible interfaces. As a result, the current DSTM2 prototype is not optimized for performance and lacks compiler or language-runtime support. In comparison, transactional memory systems that are compiler-based [3], language-based [32], or hardware-accelerated [18, 22, 49] generally incur much lower overheads than DSTM2. Future, language-integrated Software Transactional Memory (STM) systems are expected to be competitive with other concurrency mechanisms, especially as STM techniques become more widely adopted, optimized, and supported by hardware.

### Evaluation of Lazy and Eager Authorization Managers

We conducted an evaluation of the overhead associated with lazy and eager authorization managers at various contention levels. The results are presented in Figure 8. At x% contention, a transaction has an x% chance of being retried due to conflicts with concurrent transactions, meaning that 100-x% of execution attempts will complete (either through commit or authorization failure). We measured the time required for GradeSheet requests to be fully completed (i.e., committed or aborted with an `AccessDeniedException`) by simulating contention levels from 0% to 50%. In our experiments, 5% of all requests failed the authorization check.

At low contention, eager enforcement is more efficient because it does not require copying metadata into an introspection log. However, as contention increases, lazy enforcement becomes more efficient. This is because eager enforcement performs authorization checks on all accesses, even for transactions that must be retried due to conflicts. In contrast, lazy enforcement only performs authorization checks once, at the commit stage, regardless of how many times the transaction was retried.

### Determining the Most Efficient Enforcement Strategy

To determine the most efficient enforcement strategy, several factors must be considered, including contention levels, the cost of authorization checks, the time to execute a transaction body, and the rate of authorization failures. 

### Comparison with Other Systems

#### SEAD
SEAD (Speculative Execution for Automated Defense) implements custom-purpose speculative execution using binary rewriting and can be applied to legacy executables. Unlike TMI, SEAD does not benefit from STM semantics and machinery, such as introspection on STM read/write sets, and does not support general security policy enforcement.

#### Rx
Swamy et al. propose Rx [54], a security-typed language that uses transactions to handle dynamically-changing policies. In Rx, code that must execute under a single, consistent policy is annotated. The runtime system ensures that any updates to the policy during execution will abort the transaction. Although TMI has not explored dynamically-changing policies, it can potentially accommodate them by assigning transactional semantics to the policy.

#### Speck
Speck [46] is a recent system that uses speculation and rollback to overlap security checks, reducing latency. While not as general as TMI and not based on STM techniques, Speck shares some aspects with TMI, such as support for overlapped enforcement and I/O based on external transaction managers.

### Virtual Machines for Security

Virtual machine monitors (VMMs) have recently emerged as a popular location for implementing security enforcement mechanisms. VMMs allow introspection of the guest operating system's runtime state, facilitating the construction of intrusion detection systems that resist evasion and attack [29]. They also permit rollback and replay of system state, enabling the creation of malware detection and forensic tools [16, 41].

#### Advantages of TMI over VMMs

TMI extends declarative concurrency control, applying at the instruction-level granularity, unlike VMM-based techniques, which operate at a coarser level. This fine-grained control allows TMI-based techniques to manage program execution more precisely, enabling instruction-level rollback. TMI also simplifies the integration of security enforcement mechanisms, eliminating Time-Of-Check To Time-Of-Use (TOCTTOU) bugs and ensuring complete mediation of all resource accesses within transactions.

In contrast, VMMs provide better control over system-level events, such as I/O. For example, file system changes can be undone by rolling back to an earlier state. TMI requires transactional I/O libraries to support rollback of system-level events. Additionally, VMMs can enforce security policies on legacy binaries, while TMI requires changes to server code. Combining TMI with VMM-based techniques for constructing security mechanisms is an interesting area for future work.

### Exception Handling and Recovery

TMI leverages transaction rollback to simplify the handling of security exceptions. According to an IBM survey, a significant portion of server code relates to exception handling [12]. Weimer and Necula [57] found that up to 46% of code in several Java benchmarks was dedicated to exception handling, and `SecurityException` was one of the most common exception classes. Exception handling code is often complex and prone to errors, especially when it must consider multiple corner cases [10, 24, 57].

The Microreboot [9] approach handles exceptions by offering fine-grained control over the server, allowing parts of it to be rebooted without impacting availability. TMI is similar to Microreboot in that it provides fine-grained, instruction-level control over exception handling in server software.

### Aspect-Oriented Software Development

Aspect-oriented programming languages, such as AspectJ [5] and AspectC++ [4], allow concerns like security and error-handling to be developed separately and integrated with the application. An aspect weaver matches the application against a set of patterns (pointcuts) and integrates appropriate advice (actions) at each program point that matches a pattern.

TMI enforces authorization policies by introspecting on the STM's read/write sets, acting as a dynamic aspect weaver. A key advantage of TMI over traditional aspect weavers is that it does not require advice to deal with authorization exceptions, which automatically trigger transaction rollback. Traditional aspect weavers must be supplied with advice to restore application state on an exception. TMI also provides thread-safe aspect weaving and does not introduce TOCTTOU bugs or deadlocks.

### Summary

Correctly implementing security mechanisms is challenging due to the need for complete mediation, prevention of TOCTTOU bugs, and proper handling of policy violations. The TMI architecture can significantly reduce these difficulties by providing precise information about all security-relevant runtime accesses, handling security violations through rollback, and integrating with existing security mechanisms. For some policies and workloads, TMI-based enforcement can lower overhead and latency, particularly by overlapping authorization checks with execution.

There are several avenues for future work on the TMI architecture. For instance, TMI can implement various security services, such as runtime information-flow tracking and intrusion forensics. It may also be combined with static analysis to automatically identify authorization points, determine transaction boundaries, or eliminate unnecessary reference monitor invocations. Finally, TMI enforcement could integrate developments in the rapidly progressing field of STM systems, such as techniques for handling I/O within transactions [21, 48].

### Acknowledgements

We would like to thank Tim Harris and the anonymous reviewers for their detailed and insightful comments. This work was supported in part by grants from the Rutgers University Research Council and the Reykjavík University Development Fund.

### References

[1] M. Abadi, A. Birrell, T. Harris, and M. Isard. Semantics of transactional memory and automatic mutual exclusion. In ACM POPL, Jan 2008.
[2] M. Abadi and C. Fournet. Access control based on execution history. In NDSS, 2003.
[3] A. Adi-Tabatabai, B. T. Lewis, V. Menon, B. R. Murphy, B. Saha, and T. Shpeisman. Compiler and runtime support for efficient software transactional memory. In ACM PLDI, June 2006.
[4] The home of AspectC++. http://www.aspectc.org.
[5] AspectJ project. http://www.eclipse.org/aspectj.
[6] F. Besson, T. Blanc, C. Fournet, and A.D. Gordon. From stack inspection to access control: a security analysis for libraries. In IEEE CSFW, June 2004.
[7] A. Birgisson and Ú. Erlingsson. An implementation and semantics for transactional memory introspection in Haskell. Technical Report RUTR-CS08007, Reykjavík University, Aug 2008.
[8] M. Bishop and M. Digler. Checking for race conditions in file accesses. Computer Systems, 9(2):131–152, Spring 1996.
[9] G. Candea, S. Kawamoto, Y. Fujiki, G. Friedman, and A. Fox. Microreboot: A technique for cheap recovery. In USENIX OSDI, Dec 2004.
[10] T. Cargill. Exception handling: A false sense of security. C++ Report, 6(9), Nov 1994.
[11] P. M. Chen and B. Noble. When virtual is better than real. In USENIX HotOS, May 2001.
[12] F. Christian. Exception handling. Technical Report RJ5724, IBM Research, 1987.
[13] J. Chung, M. Dalton, H. Kannan, and C. Kozyrakis. Thread-safe dynamic binary translation using transactional memory. In IEEE HPCA, Feb 2008.
[14] D. D. Clark and D. R. Wilson. A comparison of commercial and military computer security policies. In IEEE S&P, May 1987.
[15] F. Cristian. Exception handling and tolerance of software faults. In Software Fault Tolerance. Wiley, 1995.
[16] G. W. Dunlap, S. T. King, S. Cinar, M. Basrai, and P. M. Chen. ReVirt: Enabling intrusion analysis through virtual-machine logging and replay. In USENIX OSDI, Dec 2002.
[17] Ú. Erlingsson and F.B. Schneider. SASI enforcement of security policies: A retrospective. In New Security Paradigms Workshop, 1999.
[18] C. Cao Minh et al. An effective hybrid transactional memory system with strong isolation guarantees. In ISCA, June 2007.
[19] K. E. Moore et al. LogTM: Log-based transactional memory. In IEEE HPCA, Feb 2006.
[20] L. Hammond et al. Transactional memory coherence and consistency. In ISCA, June 2004.
[21] M. J. Moravan et al. Supporting nested transactional memory in LogTM. In ACM ASPLOS, Oct 2006.
[22] P. Damron et al. Hybrid transactional memory. In ACM ASPLOS, Oct 2006.
[23] Extensible access control markup language. http://xml.coverpages.org/xacml.html.
[24] C. Fetzer, P. Felber, and K. Hogstedt. Automatic detection and masking of nonatomic exception handling. IEEE Trans. on Software Engineering, 30(8):547–560, 2004.
[25] B. Fletcher. Case study: Open source and commercial applications in a Java-based SELinux cross-domain solution. In Annual SELinux Symp., Mar 2006.
[26] FreeCS—the free chatserver. http://freecs.sourceforge.net.
[27] V. Ganapathy, T. Jaeger, and S. Jha. Retrofitting legacy code for authorization policy enforcement. In IEEE S&P, May 2006.
[28] V. Ganapathy, D. King, T. Jaeger, and S. Jha. Mining security-sensitive operations in legacy code using concept analysis. In ACM/IEEE ICSE, May 2007.
[29] T. Garfinkel and M. Rosenblum. A virtual machine introspection based architecture for intrusion detection. In NDSS, Feb 2003.
[30] L. Gong, G. Ellison, and M. Dageforde. Inside Java 2 Platform Security. Addison-Wesley, second edition, September 2003.
[31] J. Gray and A. Reuter. Transaction Processing: Concepts and Techniques. Morgan Kaufmann, 1993.
[32] T. Harris and K. Fraser. Language support for lightweight transactions. SIGPLAN Not., 38(11):388–402, 2003.
[33] T. Harris, S. Marlow, S. Peyton Jones, and M. Herlihy. Composable memory transactions. In PPoPP, Feb 2005.
[34] M. Herlihy, V. Luchango, and M. Moir. A flexible framework for implementing software transactional memory. In ACM SIGPLAN OOPSLA, Oct 2006.
[35] M. Herlihy, V. Luchango, M. Moir, and W. Scherer. Software transactional memory for dynamic-sized data structures. In ACM PODC, July 2003.
[36] M. Hocking, K. Macmillan, and D. Shankar. Case study: Enhancing IBM WebSphere with SELinux. In Annual SELinux Symp., Mar 2006.
[37] T. Jaeger, A. Edwards, and X. Zhang. Consistency analysis of authorization hook placement in the Linux security modules framework. ACM TISSEC, 7(2):175–205, May 2004.
[38] Jakarta Apache Commons. http://commons.apache.org/transaction.
[39] JCraft. WeirdX—pure Java window system server under GPL. http://www.jcraft.com/weirdx.
[40] D. Kilpatrick, W. Salamon, and C. Vance. Securing the X Window system with SELinux. Technical Report 03-006, NAI Labs, Mar 2003.
[41] S. T. King and P. M. Chen. Backtracking intrusions. In ACM SOSP, Oct 2003.
[42] J. R. Larus and R. Rajwar. Transactional Memory. Synthesis Lectures on Computer Architecture. Morgan Claypool, 2006.
[43] M. E. Locasto, A. Stavrou, G. Cretu, and A. Keromytis. From STEM to SEAD: Speculative execution for automated defense. In USENIX Annual Technical, June 2007.
[44] M.D. Matthews. Distributed transactions with MySQL XA, 2005.
[45] Microsoft. Transactional NTFS in Windows Vista. http://msdn2.microsoft.com/en-us/library/aa363764.aspx.
[46] E. Nightingale, D. Peek, P. M. Chen, and J. Flinn. Parallelizing security checks on commodity hardware. In ACM ASPLOS, March 2008.
[47] S. Peyton-Jones and T. Harris. Transactional memory with data invariants. In ACM SIGPLAN TRANSACT, 2006.
[48] C. J. Rossbach, O. S. Hofmann, D. E. Porter, H. E. Ramadan, A. Bhandari, and E. Witchel. TxLinux: Using and managing transactional memory in an operating system. In ACM SOSP, Oct 2007.
[49] B. Saha, A.-R. Adl-Tabatabai, and Q. Jacobson. Architectural support for software transactional memory. In IEEE Symp. on Microarchitecture, Dec 2006.
[50] F. B. Schneider. Enforceable security policies. ACM TISSEC, 3(1):30–50, Feb 2000.
[51] M. I. Seltzer, Y. Endo, C. Small, and K. A. Smith. Dealing with disaster: Surviving misbehaved kernel extensions. In USENIX OSDI, Oct 1996.
[52] N. Shavit and D. Touitou. Software transactional memory. In ACM PODC, Aug 1995.
[53] T. Shpeisman, V. Menon, A. Adl-Tabatabai, S. Balensiefer, D. Grossman, R. L. Hudson, K. F. Moore, and B. Saha. Enforcing isolation and ordering in STM. In ACM PLDI, June 2007.
[54] N. Swamy, M. Hicks, S. Tse, and S. Zdancewic. Managing policy updates in security-typed languages. In Computer Security Foundations Workshop, July 2006.
[55] Tar for Java: The com.ice.tar package. http://trustice.com/java/tar/.
[56] E. Walsh. Integrating X.Org with security-enhanced Linux. In Annual SELinux Symp., Mar 2007.
[57] W. Weimer and G. C. Necula. Exceptional situations and program reliability. ACM TOPLAS, 30(2), Mar 2008.
[58] C. Wright, C. Cowan, S. Smalley, J. Morris, and G. Kroah-Hartman. Linux security modules: General security support for the Linux kernel. In USENIX Security, Aug 2002.
[59] x11perf: The X11 server performance test program suite.
[60] The X11 Server, version X11R6.8 (X.Org Foundation).
[61] A. Yumerefendi, B. Mickle, and L. Cox. TightLip: Keeping applications from spilling the beans. In USENIX NSDI, April 2007.
[62] X. Zhang, A. Edwards, and T. Jaeger. Using CQUAL for static analysis of authorization hook placement. In USENIX Security, Aug 2002.