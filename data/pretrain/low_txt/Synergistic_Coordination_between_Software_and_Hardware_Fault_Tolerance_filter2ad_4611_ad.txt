Certainly! Here is the optimized and refined version of your text:

---

### Formulation of Blocking Period

The length of a blocking period, \( r(b) \), is defined as:
\[ r(b) = b + 2p4 + T_m(b) \]
where \( b \) represents the value of the dirty bit, and \( T_m(b) \) is given by:
\[ T_m(b) = b \cdot t_{\text{max}} - (1 - b) \cdot t_{\text{min}} \]

Table 1 compares the original Time-Based (TB) protocol with the adapted version in terms of the length of blocking periods, checkpoint contents, types of messages blocked during a blocking period, and the purpose of blocking.

### Comparative Study on Protocol-Coordination Approach

To evaluate the advantages of the protocol-coordination approach over the straightforward extension of a software fault tolerance protocol for handling both software and hardware faults, we conducted a model-based comparative study. The study focuses on the rollback distance, which is the amount of computation, quantified in time units (seconds), that a process must undo due to a hardware fault.

Specifically, we contrasted the mean rollback distance of a process when the protocol-coordination scheme is applied (\( E[D_c] \)) with that when the write-through approach is used (\( E[D_w] \)). Figure 7 shows the quantitative results from one of the studies, revealing that \( E[D_c] \) is significantly less than \( E[D_w] \). This significant reduction is due to the fact that the protocol-coordination approach maximizes the likelihood that a process will roll back to its most recent non-contaminated state when a hardware fault occurs. In contrast, with the write-through approach, a process must roll back to the checkpoint that is equivalent to the process’s most recent Type-2 checkpoint, which does not reflect the most recent non-contaminated state.

Due to space limitations, we omit detailed discussion of the comparative study.

### Seamless Coordination Between MDCD and TB Protocols

It is worth noting that the coordination between the MDCD and TB protocols can be enabled or disabled seamlessly. For example, when this approach is used for guarded software upgrading, after the successful completion of an onboard software upgrade, all software components will be considered high-confidence components. Consequently, the MDCD protocol will no longer be active, and each process’s dirty bit will have a constant value of zero. This leads the adapted TB algorithm shown in Figure 5 to revert to its original version [4].

### Concluding Remarks

While research efforts often focus on one technical issue at a time, critical applications in real life usually involve multiple technical challenges in fault tolerance and call for effective and efficient approaches that address various problems with a cohesive formulation. Among other enabling-technology integration issues, simultaneous software and hardware fault tolerance in a distributed computing environment poses a major challenge. The effort presented in this paper demonstrates that synergistic coordination between software and hardware fault tolerance techniques is a viable way to address this challenge.

By carrying out algorithm modifications that facilitate synergistic coordination between volatile-storage and stable-storage checkpoint establishments, we are able to avoid potential interference between the MDCD and TB protocols, allowing them to effectively complement each other and extend a system’s fault tolerance capability. Moreover, the protocol-coordination approach preserves and enhances the features and advantages of the individual protocols, keeping the performance cost low.

Another important contribution of this effort is that it promotes the utilization of various state-of-the-art fault tolerance techniques for building affordable, highly dependable distributed systems. Our current work is directed toward formally validating the protocol-coordination approach, quantifying its benefits in terms of dependability enhancement and performance cost reduction, and investigating general guidelines for synergistic coordination between differing fault tolerance techniques.

Recently, we have completed the first version of the middleware (GSU Middleware) that implements the prototype MDCD protocol. We plan to incorporate the protocol-coordination scheme described in this paper into the GSU Middleware to experimentally assess the effectiveness of the approach.

### References

[1] K. H. Kim, “The distributed recovery block scheme,” in Software Fault Tolerance (M. R. Lyu, ed.), pp. 189-209, West Sussex, England: John Wiley & Sons, 1995.
[2] M. Hecht, J. Agron, H. Hecht, and K. H. Kim, “A distributed fault-tolerant architecture for nuclear reactor and other critical process control applications,” in Digest of the 21st Annual International Symposium on Fault-Tolerant Computing, (Montreal, Canada), pp. 3-9, June 1991.
[3] A. T. Tai, K. S. Tso, L. Alkalai, S. N. Chau, and W. H. Sanders, “On low-cost error containment and recovery methods for guarded software upgrading,” in Proceedings of the 20th International Conference on Distributed Computing Systems (ICDCS 2000), (Taipei, Taiwan), pp. 548-555, Apr. 2000.
[4] N. Neves and W. K. Fuchs, “Coordinated checkpointing without direct coordination,” in Proceedings of the 3rd IEEE International Computer Performance and Dependability Symposium, (Durham, NC), pp. 23-31, Sept. 1998.
[5] A. T. Tai, K. S. Tso, L. Alkalai, S. N. Chau, and W. H. Sanders, “Low-cost error containment and recovery for onboard guarded software upgrading and beyond,” (submitted for publication).
[6] J.-C. Laprie, J. Arlat, C. Béounes, and K. Kanoun, “Definition and analysis of hardware-and-software fault-tolerant architectures,” IEEE Computer, vol. 23, pp. 39-51, July 1990.
[7] K. M. Chandy and L. Lamport, “Distributed snapshots: Determining global states of distributed systems,” ACM Transactions on Computer Systems, vol. 3, pp. 63-75, Feb. 1985.

### Figures

**Figure 7: Improvement of Rollback Distance**

**Figure 8: Modified Error Containment Algorithm for \( P_{\text{yt}} \)**

**Figure 9: Modified Error Containment Algorithm for \( P_{\text{idw}} \)**

**Figure 10: Modified Error Containment Algorithm for \( P_2 \)**

---

This version maintains the technical details while improving clarity, coherence, and professional tone.