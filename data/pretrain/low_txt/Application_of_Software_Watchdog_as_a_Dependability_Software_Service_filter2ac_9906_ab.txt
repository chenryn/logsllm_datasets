### 1. 任务重启或终止
如果存在不属于任何已终止或重启应用的任务，这些任务可能会通过操作系统提供的服务被终止并重新启动。

### 2. 验证
在详细探讨软件看门狗的概念验证之前，我们将简要介绍EASIS验证活动、开发过程、方法论和原型工具链。

#### 2.1 EASIS验证器简介
EASIS架构验证器 [14][15] 专注于EASIS架构中一些最相关的属性的原型设计和验证，包括容错硬件、依赖性软件架构和服务。EASIS硬件在环（HIL）验证器托管了多个ISS应用程序，如车道保持辅助应用SafeLane和带线控转向技术的限速系统SafeSpeed。SafeLane是一种车道偏离警告应用，而SafeSpeed则是一个自动限制车辆速度到外部设定最大值的系统。验证器中的节点包括容错执行器和传感器节点、驾驶动力学环境模拟、灯光控制节点以及连接不同车辆域（如TCP/IP、CAN和FlexRay）的网关节点 [16]。

#### 2.2 验证过程简介
软件看门狗的核心节点在EASIS架构验证器上进行验证。核心节点是一个AutoBox，这是dSPACE公司 [17] 的快速原型平台，在该平台上集成了SafeSpeed的安全应用及其控制算法和依赖性软件服务，例如软件看门狗。

如图3所示，软件看门狗的验证过程遵循基于模型和仿真的开发流程。在这个过程中，子系统在一个纯软件环境中通过仿真工具（软件在环测试）进行开发和测试。只有在成功测试功能后，才会将软件实现到特定的硬件平台上。在需求分析之后，系统功能设计的第一步是使用Matlab/Simulink构建和建模整个系统，特别是运行单元的建模。软件看门狗在第三步中作为虚拟原型在PC上进行原型设计和仿真。接下来，基于从虚拟原型和其他汽车约束条件（如内存和时间要求）获得的知识，选择AutoBox进行EASIS架构验证器中的概念验证和评估。软件看门狗的虚拟原型和建模的安全应用将映射到任务并在系统架构上进行调度。生成特定硬件的C代码，编译并加载到快速原型平台上。

#### 2.3 软件看门狗的建模、仿真和原型设计
为了建模任务调度和程序流，我们使用了Matlab/Simulink中的Stateflow。Stateflow是一种用于基于有限状态机建模复杂系统行为的设计和开发工具。运行单元通过函数调用子系统建模，并由Stateflow以定义的执行顺序触发。函数调用子系统是Matlab/Simulink中的一个块，可以由另一个块作为函数调用。例如，如图4所示，SafeSpeed应用程序可以分为三个运行单元：读取传感器值（GetSensorValue）、控制算法（SAFE_CC_process）和设置执行器（Speed_process）。这些单元由Stateflow图表SafeSpeed中的函数调用子系统触发，其中实现了运行单元的执行顺序。为了表示运行单元的存活状态，还实现了其他函数调用子系统来模拟粘合代码，这些代码报告运行单元的执行情况。

#### 2.4 软件看门狗在EASIS软件平台中的集成
根据EASIS软件平台的分层架构（见图1），软件看门狗服务作为具有与其他软件模块定义接口的独立模块集成在L3层中。软件看门狗有两个主要接口。第一个接口供L1层的应用软件组件向软件看门狗报告其存活指示。第二个接口用于软件看门狗向故障管理框架报告检测到的故障信息。故障管理框架是一个通用的故障管理系统，收集检测到的故障信息，并通知应用程序故障检测情况。最后，借助操作系统和故障管理框架可以进行协调的故障处理。

#### 2.5 软件看门狗在EASIS验证器中的评估
软件看门狗的评估基于设计阶段的故障/错误定义。由于不同的故障可能导致相同的错误，因此采用错误注入的方法对软件看门狗的设计和原型进行评估。这种方法的优点是在系统开发的前期阶段可以测试可靠性要求。该概念可以独立于特定的故障类型进行验证。难以在测试台或道路测试中注入的故障可以通过错误相对容易地模拟。

再次使用Stateflow来通过更改运行单元的时间参数、操作循环计数器和构建无效执行分支等方式操纵运行单元的执行频率和顺序。实验环境ControlDesk提供了在运行时操纵分配给运行单元时间参数的数据的可能性，因此用于在应用程序执行期间触发错误注入并可视化结果。

通过构建不同的评估案例，成功验证了软件看门狗的三个主要功能，即存活错误检测、到达率错误检测和程序流错误检测。以下截图展示了一些通过注入心跳或程序流错误生成的评估案例。每个图表中的x轴表示时间流逝，标度为10毫秒。y轴表示计数器值和检测到的错误数量。

为了注入心跳错误，时间标度连接到滑动仪器以改变执行频率。例如，图5显示了注入存活错误的测试。类似地，也进行了到达率错误和控制流错误的测试。在最后一个图表“AM Result”（存活监控结果）中，y值的增加表明检测到了错误。

图6展示了实际错误原因通过软件看门狗各单元的协作确定的情况。这里，心跳监控单元检测到的存活错误实际上是由程序流错误引起的，这通过“PFC Result”（程序流检查结果）图表报告。在检测到三个程序流错误（此处设为阈值）后，任务状态被设置为“故障”。仅报告了一个累积的存活错误。

### 3. 结论与展望
本文提出的软件看门狗的概念和设计反映了当前汽车软件开发的趋势。软件看门狗作为一种软件实现的可靠性服务，监控应用运行单元的个别时间约束及其程序流。它展示了提高分布式车载嵌入式系统可靠性的功能潜力。软件看门狗的接口提供了进一步的故障处理信息和故障包容及容忍的变体。

在ISS应用程序和依赖性软件服务的建模、仿真和快速原型设计过程中，获得了许多宝贵的经验。

#### 展望
在EASIS架构验证器中，进一步分析故障检测覆盖率对于满足不同安全系统的个别可靠性要求非常有价值。软件看门狗的功能和性能，特别是在故障处理策略方面，特别是在动态重构和监控单元的协作方面，将在Freescale公司的S12XF评估微控制器上进一步评估。

---

**参考文献**
[1] M. Broy, "Automotive Software and Systems Engineering," Proc. 25th International Conference on Software Engineering, pp. 719 – 720, 2003.
[2] AUTOSAR partnership, http://www.autosar.org/
[3] Z.T. Kalbarczyk, et al., Chameleon: A Software Infrastructure for Adaptive Fault Tolerance, IEEE Transaction on parallel and distributed systems, Vol. 10, No. 6, June 1999.
[4] K. Tindell, F. Wolf, R. Ernst, "Safe Automotive Software Development," presented at Proceedings of the Design, Automation and Test in Europe Conference and Exhibition (DATE’03), Munich, Germany, March 2003.
[5] D. Lantrip, "General Purpose Watchdog Timer Component for a Multitasking System," embedded world, 1997.
[6] J. Ganssle, "Watching the Watchdog," embedded world, pp. 33-35, 2006.
[7] OSEK, "OSEK/VDX Operating System Specification 2.2.3," 2005, http://portal.osek-vdx.org/files/pdf/specs/os223.pdf.
[8] OSEK, "OSEK/VDX time triggered operating system 1.0," 2001, http://portal.osek-vdx.org/files/pdf/specs/ttos10.pdf.
[9] The AUTOSAR Consortium, "AUTOSAR Specification of Operating System," http://www.autosar.org/download/AUTOSAR_SWS_OS.pdf.
[10] Nahmsuk Oh, P. Shirvani, E. McCluskey, "Control-Flow Checking by Software Signatures," IEEE Transaction on Reliability, vol. 51, Mar-2002, pp. 111-121.
[11] M. Hiller, et al., "Dependability Services in the EASIS Software Platform," DSN 2006 Workshop on Architecting Dependable Systems, http://www.easis-online.org/wEnglish/img/pdf-files/wads_2006_easis.pdf.
[12] EASIS Deliverable document D1.2-8, "Fault Management Framework," http://www.easis-online.org/wEnglish/download/Deliverables/EASIS_Deliverable_D1.2-8_V1.0.pdf.
[13] T. Michel, et al., "A New Approach to Program Flow Checking without Program Modification," Proc. 21st Symposium on Fault-Tolerant Computing, pp. 334-341, 1991.
[14] EASIS, "Specification of EASIS Validator with Telematics Gateway, WT5.1 Deliverable," EASIS Consortium 2006.
[15] EASIS, Work Package 5 Validation, http://www.easis-online.org/wEnglish/workpackages/wp5.shtml?navid=9.
[16] G. Leen, D. Heffernan, A. Dunne, “Digital Networks in the Automotive Vehicle,” IEEE Computer and Control Eng. J., Dec-1999, pp. 262-264.
[17] M. Eckmann, F. Mertens, "Close-to-Production Prototyping, Flexible and Cost-efficient," ATZ electronic, vol. 01/2006, 2006, pp. 22-27.