### OpenDHT Put/Get Usage

Table 4 illustrates that the majority of applications leveraging OpenDHT primarily use its put/get interface. Many of these applications, such as DOA, FOOD, instant messaging, and HIP, employ the DHT in a straightforward manner, mainly for indexing. These applications exemplify the benefits of a shared DHT; their relatively simple requirements are easily met by the put/get interface, without necessitating the deployment of an independent DHT.

### ReDiR Usage

We have four example applications that utilize ReDiR—two developed by us and two by external contributors.

- **i3**: An indirection-based routing infrastructure built over a DHT lookup interface. To validate the ease of using ReDiR to support applications traditionally built on a lookup interface, we ported i3 to run over OpenDHT. This process was straightforward, requiring only a simple wrapper to emulate i3's Chord implementation, with no changes to i3's core engineering.

- **Multicast Over OpenDHT (MOOD)**: As described in Section 4, existing DHT-based multicast systems typically use a routing interface. To explore the feasibility of supporting such applications, we implemented and evaluated MOOD, which uses a ReDiR-like hierarchy as suggested in [19]. Unlike a simple port, MOOD is a complete redesign. Our experience suggests that routing-based applications can often be reimagined as lookup-based atop a DHT service, an area ripe for further research in both practice and theory.

- **Place Lab**: In this project, a collection of independently operated servers processes data samples from numerous wireless client devices. Place Lab uses ReDiR to route input data samples to the appropriate server responsible for processing them.

In summary, since its public release, OpenDHT has been adopted by a diverse range of applications. The true test of OpenDHT’s value will lie in the successful, long-term deployment of these applications. Our early experience indicates the generality and utility of OpenDHT.

### FOOD: FreeDB Over OpenDHT

FreeDB is a networked database of audio CD metadata used by many CD-player applications. It indexes over a million CDs and, as of September 2004, served over four million read requests per week across ten widely dispersed mirrors.

A traditional FreeDB query involves two stages over HTTP:
1. The client computes a hash value (discid) for a CD and asks the server for a list of CDs with that discid.
2. If only one CD is returned, the client retrieves the metadata for that CD. According to our measurements, this situation occurs 91% of the time. In the remaining cases, the client serially retrieves the metadata for each CD in the list until it finds an appropriate match.

**FOOD Implementation**:
- A single FOOD client stores each CD’s data under its discid.
- Other clients query FOOD by getting all values under a specific discid.
- A proxy that translates legacy FreeDB queries to FOOD queries is only 78 lines of Perl code.

**Measurement Setup**:
- We stored a May 1, 2004, snapshot of the FreeDB database containing 1.3 million discids in OpenDHT.
- We queried both systems for a random CD every 5 seconds. Our FreeDB measurements span October 2–13, 2004, and our FOOD measurements span October 5–13, 2004.

**Results**:
- During the measurement interval, FOOD offered superior availability. Only one request out of 27,255 to FOOD failed, representing a 99.99% success rate, compared to 99.9% for the most reliable FreeDB mirror and 98.8% for the least reliable one.
- For over 70% of queries, FOOD provided lower latency than FreeDB. For the next longest 8% of queries, FOOD and FreeDB offered comparable response times. For the next 20% of queries, FOOD had less than twice the latency of FreeDB. Only for the slowest 2% of queries did FOOD exhibit significantly greater latency.
- Even for an idealized version of FreeDB, where queries complete in a single HTTP GET, FOOD still showed better performance for 38% of queries, with a median retrieval time of 330 ms for FOOD versus 248 ms for the first step of a FreeDB lookup.

In summary, FOOD offers improved availability and reduced latency for the majority of queries, with minimal development or deployment effort.

### Common Feature Requests

Based on interactions with users, we have identified several common feature requests:

- **XML RPC**: Many users requested that OpenDHT gateways accept XML RPC requests instead of Sun RPC. This aligns with the need for generality, as simple client applications are often written in scripting languages that handle text more conveniently. We have since added an XML RPC interface to OpenDHT.
- **Remove Function**: After XML RPC, the ability to remove values before their TTLs expire was the most frequently requested feature. We added this functionality to the current OpenDHT interface.
- **Authentication**: While OpenDHT does not currently support immutable or signed puts, there have been few requests for such features. This may be due to the early stages of application deployment.
- **Read-Modify-Write**: OpenDHT currently provides eventual consistency. Adding a read-modify-write primitive could improve consistency, especially for simultaneous value changes. We are investigating such primitives.
- **Larger Maximum Value Size**: Several users requested support for values larger than 1 kB. We plan to implement fragmentation and reassembly to increase the maximum value size.

### Discussion

OpenDHT is currently a free storage service, suitable for demonstration but not viable for large-scale, long-term critical applications. For sustainability, the service would likely need to become a commercial enterprise, involving:
1. **Monetization**: Storage can no longer be free, though the compensation may not be monetary. Authentication at the OpenDHT gateways would be necessary.
2. **Competitive Market**: A market of competing DHT service providers (DSPs) should emerge, providing a uniform DHT service. Each DSP would share puts and gets, and the resulting load would be managed through various mechanisms.

If such a market develops, DHT service could become a natural part of the computational infrastructure, fostering the development of smaller-scale applications with uncertain demand.

### Summary

This paper describes the design and early deployment of OpenDHT, a public DHT service. Its put/get interface is easy to use, and the ReDiR library extends its functionality for more demanding applications. The system is currently supporting various applications and building a user community, with adequate latency and availability that will improve as DHT technology advances.

### Acknowledgments

We thank Yatin Chawathe, Michael Walﬁsh, and the anonymous reviewers for their valuable feedback. This work was supported in part by NSF Cooperative Agreement ANI-0225660. Sean Rhea is supported by an IBM Fellowship, and Brighten Godfrey is supported by a National Science Foundation Graduate Research Fellowship.

### References

[References listed as provided in the original text]