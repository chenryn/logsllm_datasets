### Boundaries and Performance

The implementation of boundaries comes at the cost of detection precision. Our performance results, however, indicate that the overhead from these additional system calls is minimal.

### Varying UIDs as a Reexpression Strategy

Using varying UIDs as a reexpression strategy required making strong assumptions about their usage being limited to assignments and comparisons. This assumption holds true for a simple data type like UIDs. However, UIDs are only one type of security-critical data identified by Chen et al. [12]. Our next step is to investigate data variations for other types of security-critical data, such as configuration data and decision-making data. In more complex cases, data operations can be significantly more intricate, such as functions that manipulate strings, including regular expression matchers. More complex data types pose greater challenges in diversification while preserving semantics, but also offer opportunities to thwart larger attack classes. If data types are properly encapsulated, perhaps via C++ classes, we could safely maintain program semantics while varying data representations, provided the class interface does not leak internal implementation details.

### Related Work

#### Historical Context

The first known use of data diversity was by British Astronomer Royal, Nevil Maskelyne, who employed data diversity techniques using human computers to improve the reliability of astronomical tables published in the 1767 Nautical Almanac [17][23]. For the lunar tables, Maskelyne assigned one (human) computer the task of calculating the moon’s position at noon for each day of the month, and another (known as the anticomputer) the task of calculating the moon’s position at midnight. A third person, known as a comparer, was responsible for merging and checking the computers’ results.

#### Recent Work on N-variant Systems

We discussed the most closely related recent work on N-variant systems in the introduction. Next, we consider other defenses suggested by the interpreter model and other work on redundant execution.

#### Other Defenses

An orthogonal strategy is to eliminate vulnerabilities altogether so that malicious data cannot reach the target interpreter. An example of this strategy is using type-safe languages to eliminate memory vulnerabilities or employing point defenses against specific vulnerabilities [14][18][36]. Another strategy is to find ways to distinguish trusted and untrusted data. Taint analysis techniques, for instance, can track the flow of information from untrusted sources and prevent their use in security-critical functions [24][33][34][43].

#### Diversity Techniques

Numerous diversity techniques have been proposed to increase the difficulty of exploiting vulnerabilities, including randomizing instructions [6][28], memory layout [8][42], compiler layout [1][19], encrypting pointers [15][40], and operating system interfaces [13]. Unlike the N-variant systems approach, all of these works rely on attackers' inability to guess a secret key for security.

#### Redundant Computation

N-version programming [4][11][26] (from which we adopted the name N-variant systems) uses multiple independent teams to produce software intended to implement the same requirements. It is based on design diversity, with the hope of avoiding common faults between versions. However, Knight and Leveson have shown experimentally that even separate teams are likely to make similar mistakes [29]. Furthermore, N-version programming is resource-intensive and thus typically applied to critical systems only. Littlewood et al. provide a recent overview of design and data diversity and their application to security [32].

For popular servers, such as web servers, multiple implementations of the same protocol may be available. The HACQIT project [27][35] deployed two web servers (IIS running on Windows and Apache on Linux) and checked HTTP status codes to indicate divergence. Totel, Majorczyk, and Mé extended this idea and compared the actual web page responses of the servers [39]. The challenge in this approach is to distinguish benign differences in the output arising from design differences in the servers or host-specific properties from differences that indicate an attack. Gao, Reiter, and Song correlate system calls between web servers to identify attacks [21][22]. Of these, the first two approaches would not have detected a UID exploit if the attack did not perturb the output web pages. Gao et al.’s system may potentially detect such an attack if it results in sufficiently non-correlated system calls. In contrast, using our approach, we can make strong guarantees about detecting all attacks in a particular attack class.

Berger and Zorn proposed a redundant execution framework with multiple replicas, each with a different randomized layout of objects within the heap, to provide probabilistic memory safety [7]. Their replication framework only handles processes whose I/O is through standard in/out, and only a limited number of system calls are caught to ensure all replicas see the same values. Their goals were to enhance reliability and availability rather than to detect and resist attacks. An extension would be to combine the fine-grained monitoring capabilities of N-variant systems with probabilistic variations such as theirs.

### Conclusion

The N-variant systems approach to security holds promise for building systems whose security properties with respect to particular attack classes can be assured with high confidence. Furthermore, these properties can be achieved without relying on secrets and using low-entropy transformations. In this paper, we developed a general approach to data diversity for N-variant systems and demonstrated this approach with a data variation for combating attacks involving the corruption of UID values. Although this particular problem can be more easily combated in other ways, the approach described is promising in demonstrating how low-entropy data diversity can be used to provide high assurance security against particular attack classes. In future work, we plan to investigate the addition and composition of further data diversity techniques.

### Acknowledgements

We gratefully acknowledge support from the National Science Foundation through awards CNS-0524432 and CNS-0627523.

### References

[1] P. E. Amman and J. C. Knight. Data Diversity: an Approach to Software Fault Tolerance. IEEE Trans. On Computers, 37 (4), pp. 418-25, 1988.
[2] Apache Software Foundation. Apache HTTP Server project. http://httpd.apache.org.
[3] A. Appel and S. Govindavajhala. Using Memory Errors to Attack a Virtual Machine. IEEE Symp. On Security and Privacy. 2003.
[4] A. Avizienis and L. Chen. On the Implementation of N-version Programming for Software Fault-Tolerance During Program Execution. International Computer Software and Applications Conference. 1977.
[5] A. Baratloo, N. Singh, T. Tsai. Transparent Run-Time Defense Against Stack Smashing Attacks. USENIX Technical Conference. 2000.
[6] E. Barrantes, D. Ackley, S. Forrest, T. Palmer, D. Stefanovic, D. Zovi. Randomized Instruction Set Emulation to Disrupt Binary Code Injection Attacks. ACM Computer and Communications Security. 2003.
[7] E. Berger and B. Zorn. DieHard: Probabilistic Memory Safety for Unsafe Languages. Programming Language Design and Implementation (PLDI). June 2006.
[8] S. Bhatkar, D. DuVarney, and R. Sekar. Efficient Techniques for Comprehensive Protection from Memory Error Exploits. Usenix Security. 2005.
[9] D. Bruschi, L. Cavallaro, and A. Lanzi. Diversified Process Replicae for Defeating Memory Error Exploits. 3rd Intl. Workshop on Information Assurance. 2007.
[10] W. Cheng, Q. Zhao, B. Yu, S. Hiroshige. TaintTrace: Efficient Flow Tracking with Dynamic Binary Rewriting. Computers and Communications. 2006.
[11] L. Chen and Algirdas Avizienis. N-Version Programming: A Fault Tolerance Approach to Reliability of Software Operation. Fault Tolerant Computing Symposium. 1978.
[12] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, R. K. Iyer. Non-Control-Data Attacks Are Realistic Threats. USENIX Security. 2005.
[13] M. Chew and D. Song. Mitigating Buffer Overflows by Operating System Randomization. Tech Report CMU-CS-02-197. December 2002.
[14] C. Cowan, M. Barringer, S. Beattie, G. Kroah-Hartman. FormatGuard: Automatic Protection From printf Format String Vulnerabilities. USENIX Security. 2001.
[15] C. Cowan, S. Beattie, J. Johansen, P. Wagle. Pointguard: Protecting Pointers from Buffer Overflow Vulnerabilities. USENIX Security. 2003.
[16] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson, J. Knight, A. Nguyen-Tuong, J. Hiser. N-Variant Systems: A Secretless Framework for Security through Diversity. 15th USENIX Security. August 2006.
[17] M. Croarken. Tabulating the Heavens: Computing the Nautical Almanac in 18th-Century England. IEEE Annals of the History of Computing. 2003.
[18] H. Etoh. GCC Extension for Protecting Applications from Stack-Smashing Attacks. IBM. 2004. http://www.trl.ibm.com/projects/security/ssp
[19] S. Forrest, A. Somayaji, D. Ackley. Building Diverse Computer Systems. 6th Workshop on Hot Topics in Operating Systems. 1997.
[20] M. Franz. Understanding and Countering Insider Threats in Software Development. UC Irvine Technical Report ICS-TR-07-09. 2007.
[21] D. Gao, M. Reiter, D. Song. Behavioral Distance for Intrusion Detection. Recent Advances in Intrusion Detection. 2005.
[22] D. Gao, M. K. Reiter, D. Song. Beyond Output Voting: Detecting Compromised Replicas Using Behavioral Distance. Tech Report, CMU-CYLAB-06-019. 2006.
[23] D. A. Grier. When Computers Were Human. Princeton University Press. 2005.
[24] V. Haldar, D. Chandra, M. Franz. Dynamic Taint Propagation for Java. Annual Computer Security Applications Conference. 2005.
[25] W. Hu, J. Hiser, D. Williams, A. Filipi, J. Davidson, D. Evans, J. Knight, A. Nguyen-Tuong, J. Rowanhill. Secure and Practical Defense Against Code-injection Attacks Using Software Dynamic Translation. Virtual Execution Environments. 2006.
[26] M. K. Joseph. Architectural Issues in Fault-Tolerant, Secure Computing Systems. PhD Dissertation. UCLA. 1988.
[27] J. Just, J. Reynolds, L. Clough, M. Danforth, K. Levitt, R. Maglich, J. Rowe. Learning Unknown Attacks – A Start. Recent Advances in Intrusion Detection. 2002.
[28] G. Kc, A. Keromytis, V. Prevelakis. Countering Code-injection Attacks with Instruction Set Randomization. ACM Computer and Communications Security. 2003.
[29] J. C. Knight and N. Leveson. An Experimental Evaluation of the Assumption of Independence in Multi-version Programming. IEEE Transactions on Software Engineering, Vol 12, No 1. Jan 1986.
[30] B. Kuperman, C. Brodley, H. Ozdoganoglu, T. Vijaykumar, A. Jalote. Detection and Prevention of Stack Buffer Overflow Attacks. Comm. of the ACM, Nov 2005.
[31] D. Larochelle and D. Evans. Statically Detecting Likely Buffer Overflow Vulnerabilities. USENIX Security. 2001.
[32] B. Littlewood, L. Strigini. Redundancy and Diversity in Security. European Symp. on Research in Computer Security. 2004.
[33] J. Newsome and D. Song. Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software. Network and Distributed System Security. 2005.
[34] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, D. Evans. Automatically Hardening Web Applications Using Precise Tainting. 20th IFIP Information Security Conference. 2005.
[35] J. Reynolds, J. Just, E. Lawson, L. Clough, R. Maglich, K. Levitt. The Design and Implementation of an Intrusion Tolerant System. Foundations of Intrusion Tolerant Systems (OASIS). 2003.
[36] M. Ringenburg and D. Grossman. Preventing Format-String Attacks via Automatic and Efficient Dynamic Checking. ACM Comp. Comm. Security. 2005.
[37] H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, D. Boneh. On the Effectiveness of Address-Space Randomization. ACM Computer and Communications Security. 2004.
[38] A. N. Sovarel, D. Evans, N. Paul. Where’s the FEEB?: The Effectiveness of Instruction Set Randomization. USENIX Security 2005.
[39] E. Totel, F. Majorczyk, L. Mé. COTS Diversity Intrusion Detection and Application to Web Servers. Recent Advances in Intrusion Detection. 2005.
[40] N. Tuck, B. Calder, and G. Varghese. Hardware and Binary Modification Support for Code Pointer Protection from Buffer Overflow. Intl. Symposium on Microarchitecture. Dec 2004.
[41] VeriTest Corporation. WebBench 5.0. http://www.veritest.com/benchmarks/webbench
[42] J. Xu, Z. Kalbarczyk, R. Iyer. Transparent Runtime Randomization for Security. Symposium on Reliable and Distributed Systems. 2003.
[43] W. Xu, S. Bhatkar, and R. Sekar. Taint-Enhanced Policy Enforcement: A Practical Approach to Defeat a Wide Range of Attacks. USENIX Security. 2006.