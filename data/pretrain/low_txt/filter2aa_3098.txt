# BurpKit: Using WebKit to Own the Web

**Date:** 2015-07-15  
**Presenter:** Nadeem Douba

## Introduction
- **Nadeem Douba**
  - Founder of Red Canari, Inc.
  - Based in Ottawa, ON
  - Hacker with a focus on:
    - Exploiting vulnerabilities
    - Building hacking tools
  - Previous work includes:
    - Sploitego (presented at DEF CON XX)
    - Canari (used by Fortune 100 companies)
    - PyMiProxy (used by the Internet Archive)

## Overview
- **WebKit**
  - What is it?
  - Why use it?
  - How can we use it?
- **BurpKit**
  - Design Considerations
  - Implementation
  - Demos
- **Conclusion**
- **Questions?**

## The Web Pen-Tester’s Conundrum
- Modern web applications are highly complex, often using JavaScript for:
  - Rendering pages and page elements
  - Performing web service requests
- However, many security tools still rely on scraping HTML.

## Our Toolkit
- **Reconnaissance & Scanning:**
  - Tools like Nikto and CEWL primarily scrape HTML.
- **Attack:**
  - BurpSuite Pro/Community
  - Lobo-based Renderer tab (lacks JavaScript/HTML5 support)
  - Charles & Zed (just proxies)
  - WebSecurify’s Proxy.app (only has a web view)

## Modern Toolkit Requirements
- Web penetration testing tools should:
  - Have modern web browser capabilities
  - Parse and interpret JavaScript
  - Dynamically render and inspect content
  - Interact with the Document Object Model (DOM)

## WebKit
- **What is WebKit?**
  - A layout engine software component for rendering web pages.
  - Powers Apple's Safari and Google's Chrome (via a fork).
- **Official Definition:**
  - "WebKit is a layout engine software component for rendering web pages in web browsers. It powers Apple's Safari web browser, and a fork of the project is used by Google's Chrome web browser."
  - Source: [Wikipedia](https://en.wikipedia.org/wiki/WebKit)

- **Known Implementations & Forks:**
  - Apple’s Safari
  - Android’s web browser
  - Nokia QT
  - JavaFX WebView
  - WebKitGTK+
  - PhantomJS
  - Google Chromium
  - Node WebKit
  - Many more (see [Applications using WebKit](https://trac.webkit.org/wiki/Applications%20using%20WebKit))

- **Why Use WebKit?**
  - **Pros:**
    - Widespread adoption
    - Support for multiple languages (Java, Python, C/C++, JavaScript, etc.)
    - Portable across many platforms
    - Can interact with the DOM and JS Engine
  - **Cons:**
    - Susceptible to the same bugs as modern browsers
    - Higher system resource consumption (RAM, CPU)

- **How to Use WebKit:**
  - **Languages:**
    - JavaScript (NodeJS)
    - Python
    - Java
    - Swift/ObjC
    - Ruby
    - C/C++
  - **Libraries:**
    - Node WebKit
    - WebKitGTK+, PyQt
    - FX WebView, Qt Jambi, JxBrowser
    - UIWebView
    - WebKitGTK+, Qt
    - Chromium, WebKit

## BurpKit
- **Overview:**
  - BurpKit = BurpSuite + WebKit
  - Uses JavaFX’s implementation of WebKit (WebView & Debugger, WebEngine)
  - Provides a real rendering tab (replaces Lobo)
  - Features a bidirectional bridge between BurpSuite and WebKit

- **Design Decisions:**
  - Chose JavaFX over JxBrowser due to:
    - Redistribution: JavaFX comes with Java 1.8+; JxBrowser needs bundling (>250MB)
    - Cost: JavaFX is free; JxBrowser is not
    - API: JavaFX has a cleaner API; JxBrowser’s is somewhat clunky

- **JavaFX: Pros and Cons:**
  - **Pros:**
    - Easy-to-use and clean API
    - Complete JavaScript bridge
    - Portable across many platforms
    - Leverages the Java URL framework (hookable)
    - Provides debugging/profiling information (with some customization)
    - Bundled with Java 1.8+
  - **Cons:**
    - API is incomplete and under development
    - No GUI components for WebInspector and related tools
    - Limited documentation on advanced features (requires code inspection)
    - Still contains some bugs

- **Implementation Challenges:**
  - **Swing/FX Interoperability:**
    - Solution: `javafx.embed.swing.JFXPanel`
    - Gotchas: Avoid interweaving blocking calls to prevent deadlocks
    - Workarounds: Eager initialization of resources and wrapping code
  - **Loading Content with a Base URL:**
    - Required to render responses for repeated requests
    - Solution: Hook into the Java URL protocol handling framework
    - Challenge: New handlers must support both live and repeated requests
  - **Repeater:**
    - Background: Avoid reissuing live requests due to potential content changes
    - Solution: Override HTTP(s) handlers and use User-Agent to tag repeated requests
    - Code: See `com.redcanari.net.http` package in BurpKit
  - **JavaScript Bridge:**
    - Background: Need to query and manipulate the DOM
    - Solution: Inject Java objects into the JS engine
    - Gotchas: Funky reflection algorithm in WebEngine, deadlock scenarios
    - Workarounds: Wrapper classes and eager instantiation of Swing components

- **The Final Product:**
  - Demonstrated improvements in rendering and interaction with web applications.

- **Demos:**
  - GUI Walkthrough
  - XSS Tracker
  - DOM Interaction (e.g., Analyzing Twitter Followers)
  - Burp Extensions (Proxy Listeners, Message Editors, Context Menus)

## Conclusion
- Let’s move beyond scraping and start interacting with the DOM.
- Security tools need to evolve alongside the web.
- We have the tools and libraries available.
- Please contribute your ideas and code to BurpKit to make it the standard.

## Kudos
- My Lovely Wife
- Justin Seitz ([AutomatingOSINT.com](http://automatingosint.com/))
- Dirk Lemmermann ([DLSC.com](http://dlsc.com/))
- Tomas Mikula ([RichTextFX](https://github.com/TomasMikula/RichTextFX))
- Java/JavaFX team
- The Noun Project
- All contributors

## Questions?
- We aim to please…