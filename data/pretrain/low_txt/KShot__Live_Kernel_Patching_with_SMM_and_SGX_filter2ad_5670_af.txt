### Analysis of the Technique Against a Suite of Indicative Kernel Vulnerabilities

We evaluate our technique against a comprehensive set of indicative kernel vulnerabilities. Our approach incurs an average downtime of 50μs for a 1KB binary kernel patch, while consuming only 18MB of additional state for patch analysis. This represents a significant reduction in overhead compared to previous work. In an empirical evaluation on 30 randomly selected, critical kernel CVEs, KSHOT successfully live-patched each one with low overhead and a minimal trusted code base.

### Acknowledgments

We would like to express our gratitude to our shepherd, Miguel Correia, and the anonymous reviewers for their insightful comments that greatly improved the paper. This work is partially supported by the following grants:
- National Science Foundation Grant No. CCF-1763674
- Air Force Grant No. FA8750-19-2-0006
- National Natural Science Foundation of China Grant No. 61632009
- Guangdong Provincial Natural Science Foundation Grant No. 2017A030308006

The opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 11:26:38 UTC from IEEE Xplore. Restrictions apply.**

---

### References

1. S. Farhang, J. Weidman, M. M. Kamani, J. Grossklags, and P. Liu, "Take It or Leave It: A Survey Study on Operating System Upgrade Practices," in *Proceedings of the 34th Annual Computer Security Applications Conference*, 2018.
2. F. Vitale, J. Mcgrenere, A. Tabard, M. Beaudouin-Lafon, and W. E. Mackay, "High Costs and Small Benefits: A Field Study of How Users Experience Operating System Upgrades," in *Proceedings of the 2017 CHI Conference on Human Factors in Computing Systems*, 2017.
3. T. Dumitras and P. Narasimhan, "Why Do Upgrades Fail and What Can We Do About It?: Toward Dependable, Online Upgrades in Enterprise Systems," in *Proceedings of the 10th ACM/IFIP/USENIX International Conference on Middleware*, 2009.
4. Gartner, "Ensure Cost Balances With Risk in High-Availability Data Centers," [Online]. Available: https://www.gartner.com/en/documents/3906266/ensure-cost-balances-with-risk-in-high-availability-data, 2019.
5. H. Chen, J. Yu, R. Chen, B. Zang, and P.-C. Yew, "Polus: A Powerful Live Updating System," in *29th International Conference on Software Engineering (ICSE’07)*, IEEE, 2007, pp. 271–281.
6. M. Nabi, M. Toeroe, and F. Khendek, "Rolling Upgrade with Dynamic Batch Size for IaaS Cloud," in *Cloud Computing (CLOUD), 2016 IEEE 9th International Conference on*, IEEE, 2016.
7. A. Ramaswamy, S. Bratus, S. W. Smith, and M. E. Locasto, "Katana: A Hot Patching Framework for ELF Executables," in *2010 International Conference on Availability, Reliability and Security*, IEEE, 2010, pp. 507–512.
8. S. Kashyap, C. Min, B. Lee, T. Kim, and P. Emelyanov, "Instant OS Updates via Userspace Checkpoint-and-Restart," in *USENIX Annual Technical Conference*, 2016.
9. Y. Chen, Y. Zhang, Z. Wang, L. Xia, C. Bao, and T. Wei, "Adaptive Android Kernel Live Patching," in *Proceedings of the 26th USENIX Security Symposium*, 2017.
10. J. Poimboeuf and S. Jennings, "Introducing kpatch: Dynamic Kernel Patching," *Red Hat Enterprise Linux Blog*, vol. 26, 2014.
11. SUSE, "Live Patching the Linux Kernel Using kGraft," [Online]. Available: https://www.suse.com/documentation/sles-15/book_sle_admin/data/cha_kgraft.html, 2018.
12. ORACLE, "Ksplice," [Online]. Available: http://www.ksplice.com/, 2018.
13. Ubuntu, "Canonical Livepatch Service," [Online]. Available: https://www.ubuntu.com/livepatch, 2018.
14. Checkpoint, "Restore in Userspace," [Online]. Available: https://criu.org/Main_Page, 2018.
15. GitHub, "Kpatch Bugs," [Online]. Available: https://github.com/dynup/kpatch/issues, 2019.
16. Windows Defender ATP, "Operation Wily: Supply Chain Cyberattack," [Online]. Available: https://www.microsoft.com/security/blog/2017/05/04/windows-defender-atp-thwarts-operation-wilysupply-software-supply-chain-cyberattack/?source=mmpc, 2017.
17. GitHub, "APT/APT-GET RCE Vulnerability," [Online]. Available: https://github.com/freedomofpress/securedrop/issues/4058, 2019.
18. Kaspersky, "Operation ShadowHammer," [Online]. Available: https://securelist.com/operation-shadowhammer/89992/, 2019.
19. GitHub, "Syscall Hijacking on Linux Kernel," [Online]. Available: https://github.com/crudbug/simple-rootkit/, 2014.
20. I. Khalil, A. Khreishah, and M. Azeem, "Cloud Computing Security: A Survey," *Computers*, vol. 3, no. 1, pp. 1–35, 2014.
21. F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich, "VC3: Trustworthy Data Analytics in the Cloud Using SGX," in *2015 IEEE Symposium on Security and Privacy*, IEEE, 2015, pp. 38–54.
22. Z. Yin, D. Yuan, Y. Zhou, and L. N. Pasupathy, "How Do Fixes Become Bugs?" in *Foundations of Software Engineering*, 2011, pp. 26–36. [Online]. Available: https://doi.org/10.1145/2025113.2025121
23. C. M. Hayden, K. Saur, E. K. Smith, M. Hicks, and J. S. Foster, "Kitsune: Efficient, General-Purpose Dynamic Software Updating for C," *ACM Transactions on Programming Languages and Systems (TOPLAS)*, vol. 36, no. 4, p. 13, 2014.
24. W. R. Williams, X. Meng, B. Welton, and B. P. Miller, "Dyninst and MRNet: Foundational Infrastructure for Parallel Tools," in *Tools for High Performance Computing 2015*, Springer, 2016, pp. 1–16.
25. GitHub, "Libcare – Patch Userspace Code on Live Processes," [Online]. Available: https://github.com/cloudlinux/libcare, 2019.
26. C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum, "Safe and Automatic Live Update for Operating Systems," in *ACM SIGARCH Computer Architecture News*, vol. 41, no. 1, ACM, 2013, pp. 279–292.
27. V. Costan and S. Devadas, "Intel SGX Explained," *IACR Cryptology ePrint Archive*, 2016.
28. J. Seo, B. Lee, S. M. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim, "SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs," in *NDSS*, 2017.
29. H. Liang, M. Li, Y. Chen, L. Jiang, Z. Xie, and T. Yang, "Establishing Trusted I/O Paths for SGX Client Systems with Aurora," *IEEE Transactions on Information Forensics and Security*, 2019.
30. E. M. Koruyeh, K. N. Khasawneh, C. Song, and N. Abu-Ghazaleh, "Spectre Returns! Speculation Attacks Using the Return Stack Buffer," in *Proceedings of the 12th USENIX Workshop on Offensive Technologies (WOOT 18)*, 2018.
31. M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, A. Fogh, J. Horn, S. Mangard, P. Kocher, D. Genkin et al., "Meltdown: Reading Kernel Memory from User Space," in *Proceedings of the 27th USENIX Security Symposium*, 2018.
32. O. Weisse, J. Van Bulck, M. Minkin, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, R. Strackx, T. F. Wenisch, and Y. Yarom, "Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient Out-of-Order Execution," *Technical Report*, Tech. Rep., 2018.
33. S. Embleton, S. Sparks, and C. C. Zou, "SMM Rootkit: A New Breed of OS Independent Malware," *Security and Communication Networks*, 2013.
34. L. Duflot, O. Levillain, B. Morin, and O. Grumelard, "Getting into the SMRAM: SMM Reloaded," *CanSecWest, Vancouver, Canada*, 2009.
35. A. Zavou, G. Portokalidis, and A. D. Keromytis, "Taint-Exchange: A Generic System for Cross-Process and Cross-Host Taint Tracking," in *Advances in Information and Computer Security - 6th International Workshop, IWSEC 2011, Tokyo, Japan, November 8-10, 2011. Proceedings*, 2011, pp. 113–128. [Online]. Available: https://doi.org/10.1007/978-3-642-25141-2_8
36. K. Nikitin, E. Kokoris-Kogias, P. Jovanovic, N. Gailly, L. Gasser, I. Khoffi, J. Cappos, and B. Ford, "CHAINIAC: Proactive Software-Update Transparency via Collectively Signed Skipchains and Verified Builds," in *26th USENIX Security Symposium, USENIX Security 2017, Vancouver, BC, Canada, August 16-18, 2017.*, 2017, pp. 1271–1287. [Online]. Available: https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/nikitin
37. R. Strackx and F. Piessens, "Ariadne: A Minimal Approach to State Continuity," in *25th USENIX Security Symposium, USENIX 2016, Austin, TX, USA, August 10-12, 2016*, 2016, pp. 875–892. [Online]. Available: https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/strackx
38. I. Neamtiu, M. Hicks, G. Stoyle, and M. Oriol, "Practical Dynamic Software Updating for C," in *Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI '06*, New York, NY, USA: ACM, 2006, pp. 72–83. [Online]. Available: http://doi.acm.org/10.1145/1133981.1133991
39. F. Zhang, J. Wang, K. Sun, and A. Stavrou, "Hypercheck: A Hardware-Assisted Integrity Monitor," in *Proceedings of the 43rd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'13)*, 2013.
40. F. Zhang, K. Leach, K. Sun, and A. Stavrou, "SPECTRE: A Dependable Introspection Framework via System Management Mode," in *Proceedings of the 43rd Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'13)*, 2013.
41. T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley, "BYTEWEIGHT: Learning to Recognize Functions in Binary Code," in *Proceedings of the 23rd USENIX Security Symposium*, 2014.
42. H. Zhang and Z. Qian, "Precise and Accurate Patch Presence Test for Binaries," in *Proceedings of the 27th USENIX Security Symposium*, 2017.
43. S. L. Graham, P. B. Kessler, and M. K. McKusick, "Gprof: A Call Graph Execution Profiler," in *ACM Sigplan Notices*, 1982.
44. S. Poznyakoff, "GNU cflow," [Online]. Available: http://www.gnu.org/software/cflow/, 2005.
45. K. Mgebrova, "CodeViz: A Callgraph Visualizer," [Online]. Available: http://www.csn.ul.ie/~mel/projects/codeviz, 2012.
46. H. Rays, "IDA Tools," [Online]. Available: https://www.hex-rays.com, 2018.
47. J. Ming, M. Pan, and D. Gao, "iBinHunt: Binary Hunting with Interprocedural Control Flow," in *International Conference on Information Security and Cryptology*, Springer, 2012, pp. 92–109.
48. S. Rostedt, "Ftrace: Linux Kernel Tracing," in *Linux Conference Japan*, 2010.
49. E. Bresson, O. Chevassut, D. Pointcheval, and J.-J. Quisquater, "Provably Authenticated Group Diffie-Hellman Key Exchange," in *Proceedings of the 8th ACM Conference on Computer and Communications Security*, 2001.
50. A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky, "HyperSentry: Enabling Stealthy In-Context Measurement of Hypervisor Integrity," in *Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS'10)*, 2010.
51. A. Ghosn, J. R. Larus, and E. Bugnion, "Secured Routines: Language-Based Construction of Trusted Execution Environments," in *2019 {USENIX} Annual Technical Conference ({USENIX}{ATC} 19)*, 2019, pp. 571–586.
52. S. Zhao, Q. Zhang, Y. Qin, W. Feng, and D. Feng, "Sectee: A Software-Based Approach to Secure Enclave Architecture Using TEE," in *Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security*, ACM, 2019, pp. 1723–1740.
53. Coreboot, "Open-Source BIOS," [Online]. Available: http://www.coreboot.org/, 2018.
54. SeaBIOS, [Online]. Available: http://www.coreboot.org/SeaBIOS, 2018.
55. MITRE CVE Team, "CVE Details: The Ultimate Security Vulnerability Datasource," [Online]. Available: https://www.cvedetails.com/, 2019.
56. Z. Huang, D. Lie, G. Tan, and T. Jaeger, "Using Safety Properties to Generate Vulnerability Patches," in *Proceedings of the 40th IEEE Symposium on Security and Privacy*, 2019.
57. A. Partow, "General Purpose Hash Function Algorithms," [Online]. Available: http://www.partow.net/programming/hashfunctions, 2018.
58. GitHub, "Sysbench," [Online]. Available: https://github.com/akopytov/sysbench, 2016.
59. C. M. Hayden, S. Magill, M. Hicks, N. Foster, and J. S. Foster, "Specifying and Verifying the Correctness of Dynamic Software Updates," in *International Conference on Verified Software: Tools, Theories, Experiments*, Springer, 2012, pp. 278–293.
60. Rapid7, "What's Going On in Production Application Security 2018," [Online]. Available: https://blog.rapid7.com/2018/08/22/whats-going-on-in-production-application-security-2018/, August 2018.
61. P. Kotzias, L. Bilge, P.-A. Vervier, and J. Caballero, "Mind Your Own Business: A Longitudinal Study of Threats and Vulnerabilities in Enterprises," in *NDSS*, 2019.
62. R. A. Grimes, "Zero-Days Aren't the Problem – Patches Are," [Online]. Available: https://www.csoonline.com/article/3075830/zero-days-arent-the-problem-patches-are.html, June 2016.
63. Intel, "Intel® 64 and IA-32 Architectures Software Developer's Manual," [Online]. Available: http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html, 2018.
64. F. McKeen, I. Alexandrovich, A. Berenzon, C. Rozas, H. Shafi, V. Shanbhogue, and U. Savagaonkar, "Innovative Instructions and Software Model for Isolated Execution," in *Proceedings of the 2nd Workshop on Hardware and Architectural Support for Security and Privacy (HASP'13)*, 2013.
65. D. Kaplan, J. Powell, and T. Woller, "AMD Memory Encryption, White Paper," [Online]. Available: http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2013/12/AMD_Memory_Encryption_Whitepaper_v7-Public.pdf, April 2016.
66. ARM Ltd., "ARM Security Technology - Building a Secure System using TrustZone Technology," [Online]. Available: http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf, 2009.
67. K. Leach, F. Zhang, and W. Weimer, "Scotch: Combining Software Guard Extensions and System Management Mode to Monitor Cloud Resource Usage," in *International Symposium on Research in Attacks, Intrusions, and Defenses*, 2017.
68. S. Mechtaev, J. Yi, and A. Roychoudhury, "Angelix: Scalable Multiline Program Patch Synthesis via Symbolic Analysis," in *Proceedings of the 38th International Conference on Software Engineering*, ACM, 2016, pp. 691–701.
69. Z. Xu, B. Chen, M. Chandramohan, Y. Liu, and F. Song, "Spain: Security Patch Analysis for Binaries Towards Understanding the Pain and Pills," in *Proceedings of the 39th International Conference on Software Engineering*, IEEE Press, 2017, pp. 462–472.
70. P. W. McBurney and C. McMillan, "Automatic Source Code Summarization of Context for Java Methods," *IEEE Transactions on Software Engineering*, vol. 42, no. 2, pp. 103–119, 2016.
71. B. S. Baker, "Parameterized Duplication in Strings: Algorithms and an Application to Software Maintenance," in *SIAM Journal on Computing*, 1997.
72. S. Kim, S. Woo, H. Lee, and H. Oh, "Vuddy: A Scalable Approach for Vulnerable Code Clone Discovery," in *2017 IEEE Symposium on Security and Privacy (SP)*, IEEE, 2017, pp. 595–614.
73. B. A. Galitsky, "Generalization of Parse Trees for Iterative Taxonomy Learning," *Information Sciences*, vol. 329, pp. 125–143, 2016.
74. N. L. Petroni Jr and M. Hicks, "Automated Detection of Persistent Kernel Control-Flow Attacks," in *Proceedings of the 14th ACM Conference on Computer and Communications Security*, ACM, 2007, pp. 103–115.
75. D. Gao, M. K. Reiter, and D. Song, "Binhunt: Automatically Finding Semantic Differences in Binary Programs," in *International Conference on Information and Communications Security*, Springer, 2008, pp. 238–255.
76. F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi, "Software Grand Exposure: SGX Cache Attacks Are Practical," 2017.
77. M. Harman, A. Lakhotia, and D. W. Binkley, "Theory and Algorithms for Slicing Unstructured Programs," *Information & Software Technology*, vol. 48, no. 7, pp. 549–565, 2006.

**Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021, at 11:26:38 UTC from IEEE Xplore. Restrictions apply.**