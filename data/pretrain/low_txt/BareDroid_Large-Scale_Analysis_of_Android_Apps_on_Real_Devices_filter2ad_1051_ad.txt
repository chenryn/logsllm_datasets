### Dynamic Analysis Systems

Dynamic analysis systems, such as those referenced in [22, 27, 30, 34], often employ techniques like changing the device's identifiers for each run to enhance their effectiveness. However, it is important to acknowledge that some advanced attacks, such as fingerprinting a specific device based on its accelerometer imperfections [8], USB charging state, fixed geographic position, presence of extra partitions, or the process that restores the userdata partition, can still be effective against BareDroid. Achieving full undetectability remains an open research challenge.

### 6.2 Attacks Against BareDroid

The implementation details described in this paper assume that kernel security functionalities (e.g., SELinux) are not compromised during the analysis. In this section, we discuss how an attacker could circumvent these security measures and tamper with the BareDroid infrastructure, and we propose several countermeasures.

**Key Security Assumptions:**
- As long as malicious apps cannot tamper with the Boot ROM, bootloader, recovery partition code, and dm-verity functionality, they cannot persistently modify most of the device's partitions.
- Upon normal reboot, the content of the following partitions is guaranteed to remain untampered:
  - **aboot**: Verified by the Boot ROM.
  - **boot**: Restored at every reboot.
  - **system**: Verified by dm-verity.
  - **recovery**: Restored at every reboot.
  - **userdata**: Restored from an on-device copy at every reboot.

**Threats and Countermeasures:**
- **SELinux Tampering:** If a malicious app tampers with the SELinux module, it could alter the copy of the userdata partition used during the restore procedure. A countermeasure would be to periodically check the content of the userdata partition (e.g., after a fixed number of restores). The frequency of these checks can be adjusted based on the desired security level. This check can be implemented in the recovery code by verifying the hash of the partition. If the verification fails, a pristine copy of the userdata partition can be restored, and the results of any analyses performed since the last check would need to be invalidated.
- **Specific Device Attacks:** An attacker could also target specific devices used by BareDroid. For example, tampering with the aboot partition could cause the Boot ROM's verification step to fail, rendering the device inoperable. While these attacks can lead to monetary losses, BareDroid acts as a canary, detecting and signaling the presence of highly malicious apps early, thereby preventing damage to end users' devices. These sophisticated attacks are only possible if an application successfully exploits a kernel vulnerability, which is rare and valuable, making such attacks unlikely.

**Reboot Tampering:**
- If the assumption that the device will always reboot normally is removed, and the attacker can "fake" a reboot, all previous security assumptions become invalid. To mitigate this, BareDroid would need to rely on a separate method, such as a machine that triggers a hard reboot using a specific button combination, as mentioned in Section 4.1.2. Although implementing this mechanism is not trivial, it ensures the device returns to a known state (i.e., the boot menu) and re-establishes the chain of trust.

### 6.3 Alternative Implementations

Alternative implementations of BareDroid are possible, though they may require significant modifications. For instance, the device could be booted using data and code stored on an external storage, such as a network shared drive, similar to network boot and iSCSI technologies used in servers. Alternatively, specific hardware devices could provide IPMI-like functionality or rewrite the flash memory without using the USB connection or the code in the aboot partition.

**Advantages and Disadvantages:**
- **Advantages:**
  - Faster restore times.
  - No need for on-device code, making it impossible for an attacker to interfere with the restore process.
- **Disadvantages:**
  - Increased cost for large-scale deployment.
  - Higher fingerprintability due to the use of specialized hardware, which may introduce discrepancies compared to commonly used hardware.

Despite these drawbacks, exploring different hardware solutions is an interesting direction for future work.

### 7. Related Work

#### 7.1 Sandbox Evasion

Evasion in dynamic malware analysis is a well-known problem. For desktop platforms, various techniques have been proposed to detect virtualized and emulated environments [3, 4, 11, 23, 26]. Detection methods initially focused on identifying emulated or virtualized CPUs [11, 23, 26] and later expanded to more generic approaches, such as fingerprinting software, hardware, and external configurations [4, 17, 35].

While these techniques were developed for desktop platforms, their core ideas are applicable to Android analysis environments. Chen et al. [4] proposed a taxonomy of evasion techniques used by malware against dynamic analysis systems, categorizing them based on the origin of the artifacts.

Recent works on Android analysis environment detection include [16, 24, 33]. Vidas et al. and Petsas et al. [24, 33] explored artifacts indicative of emulated environments, such as IMEI values, performance timing, and properties of attached input devices. Jing et al. [16] developed Morpheus, a system capable of automatically finding thousands of such artifacts, which can be used as heuristics to evade analysis environments.

#### 7.2 Transparent Analysis

Sandbox evasion techniques are frequently used by evasive malware on desktop platforms, and mobile malware is likely to follow a similar trend. Many transparent malware analysis systems have been proposed for desktop platforms to mitigate the problem of evasive malware [9, 14, 18, 32]. Cobra [32] proposed mitigation techniques for debugger-based analysis, while other systems [1, 14, 27] used out-of-the-box analysis approaches to improve transparency. Ether [9] leveraged hardware-based virtualization technology to overcome emulator and software artifacts. BareBox [18] proposed a bare-metal environment for transparent analysis and developed techniques to improve scalability.

Our approach, based on a bare-metal environment, is similar to BareBox. However, to our knowledge, BareDroid is the first automated system of its kind for Android malware analysis. Current state-of-the-art Android analysis systems are based on emulators [2, 20, 25, 31, 34], which are easily detectable.

### 8. Conclusions

Malicious Android app authors have started fingerprinting emulated analysis environments to avoid detection by popular Android malware detection engines. Despite this trend, apps are still analyzed in emulated environments because executing them on bare-metal devices at scale has been unfeasible. In this paper, we designed and implemented BareDroid, a system that makes the analysis of Android apps on bare-metal feasible at scale. We demonstrated that BareDroid is cost-effective compared to emulators and cannot be evaded by emulator-aware Android malware. Additionally, we showed that BareDroid is not detected by the latest research on analysis-environment detection.

Our goal is to provide a platform where existing and future analysis engines can perform malware detection without the risk of being evaded by the mere presence of an emulator-like environment. For the benefit of the security community, we release BareDroid as an open-source project.

### 9. Acknowledgements

We would like to thank the anonymous reviewers and our shepherd, William Enck, for their valuable feedback. This material is based on research sponsored by DARPA under agreements number FA8750-12-2-0101 and FA8750-15-2-0084. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation thereon. The work was also supported by the Office of Naval Research (ONR) under grant N000140911042, the Army Research Office (ARO) under grant W911NF0910553, the National Science Foundation under grant CNS-1408632, Lastline, Inc., and Secure Business Austria. This work was also partially supported by a Google Research Award (winter 2014) and by the Italian Ministry of Research within the PRIN project "GenData 2020."

### 10. References

[1] Anubis. http://anubis.cs.ucsb.edu.
[2] Sanddroid. http://sanddroid.xjtu.edu.cn/.
[3] D. Balzarotti, M. Cova, C. Karlberger, C. Kruegel, E. Kirda, and G. Vigna. Efficient Detection of Split Personalities in Malware. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2010.
[4] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario. Towards an Understanding of Anti-Virtualization and Anti-Debugging Behavior in Modern Malware. In Dependable Systems and Networks With FTCS and DCC, 2008.
[5] CNET. Googleâ€™s $349 Nexus 5 hits today with LTE, KitKat. http://www.cnet.com/news/googles-349-nexus-5-hits-today-with-lte-kitkat/.
[6] Contagio mobile mini-dump. OBAD. http://contagiominidump.blogspot.it/2013/06/backdoorandroidosobada.html.
[7] DexLab. Detecting Android Sandboxes. http://www.dexlabs.org/blog/btdetect.
[8] S. Dey, N. Roy, W. Xu, R. R. Choudhury, and S. Nelakuditi. Accelprint: Imperfections of Accelerometers Make Smartphones Trackable. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2014.
[9] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2008.
[10] F-Secure. Android Pincer A. https://www.f-secure.com/weblog/archives/00002538.html.
[11] P. Ferrie. Attacks on Virtual Machine Emulators. Technical report, Symantec Corporation, 2007.
[12] FireEye. Android.HeHe. https://www.fireeye.com/blog/threat-research/2014/01/android-hehe-malware-now-disconnects-phone-calls.html.
[13] G. Ho, D. Boneh, L. Ballard, and N. Provos. Tick tock: building browser red pills from timing side channels. In Proceedings of the USENIX Workshop on Offensive Technologies (WOOT), 2014.
[14] X. Jiang and X. Wang. "Out-of-the-Box" Monitoring of VM-Based High-Interaction Honeypots. Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2007.
[15] X. Jiang, X. Wang, and D. Xu. Stealthy Malware Detection through VMM-based Out-of-The-Box Semantic View Reconstruction. In Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2007.
[16] Y. Jing, Z. Zhao, G.-J. Ahn, and H. Hu. Morpheus: Automatically Generating Heuristics to Detect Android Emulators. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2014.
[17] A. Kapravelos, M. Cova, C. Kruegel, and G. Vigna. Escape from Monkey Island: Evading high-interaction Honeyclients. In Proceedings of the Detection of Intrusions and Malware and Vulnerability Assessment (DIMVA), 2011.
[18] D. Kirat, G. Vigna, and C. Kruegel. BareBox: Efficient Malware Analysis on Bare-Metal. In Proceedings of the Annual Computer Security Applications Conference (ACSAC), 2011.
[19] D. Kirat, G. Vigna, and C. Kruegel. Barecloud: Bare-metal Analysis-based Evasive Malware Detection. In Proceedings of the USENIX Security Symposium (USENIX), 2014.
[20] P. Lantz, A. Desnos, and K. Yang. DroidBox: Android Application Sandbox, 2012.
[21] S. Mutti, Y. Fratantonio, A. Bianchi, L. Invernizzi, J. Corbetta, D. Kirat, C. Kruegel, and G. Vigna. BareDroid Source Code. https://github.com/ucsb-seclab/baredroid.
[22] J. Oberheide and C. Miller. Dissecting the Android Bouncer. SummerCon, 2012.
[23] R. Paleari, L. Martignoni, G. Fresi Roglia, and D. Bruschi. A Fistful of Red-Pills: How to Automatically Generate Procedures to Detect CPU Emulators. In Proceedings of the USENIX Workshop on Offensive Technologies (WOOT), 2009.
[24] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis, and S. Ioannidis. Rage against the virtual machine: hindering dynamic analysis of Android malware. In Proceedings of the ACM European Workshop on System Security (EUROSEC), 2014.
[25] A. Reina, A. Fattori, and L. Cavallaro. A System Call-Centric Analysis and Stimulation Technique to Automatically Reconstruct Android Malware Behaviors. In Proceedings of the ACM European Workshop on System Security (EUROSEC), 2013.
[26] J. Rutkowska. Red Pill... or how to detect VMM using (almost) one CPU instruction. http://invisiblethings.org/papers/redpill.html, 2004.
[27] J. Security. JOE Sandbox Mobile. http://www.joesecurity.org.
[28] Server Direct. Server prices. http://www.serversdirect.com.
[29] S. Smalley and R. Craig. Security Enhanced (SE) Android: Bringing Flexible MAC to Android. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2013.
[30] M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and J. Hoffmann. Mobile-sandbox: Having a Deeper Look into Android Applications. In Proceedings of the ACM Symposium on Applied Computing (SAC), 2013.
[31] K. Tim, S. Khan, A. Fattori, and L. Cavallaro. CopperDroid: Automatic Reconstruction of Android Malware Behaviors. In Proceedings of the Symposium on Network and Distributed System Security (NDSS), 2015.
[32] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained Malware Analysis Using Stealth Localized-executions. Proceedings of the IEEE Symposium on Security and Privacy, 2006.
[33] T. Vidas and N. Christin. Evading Android runtime analysis via sandbox detection. In Proceedings of the ACM Symposium on Information, Computer and Communications Security (AsiaCCS), 2014.
[34] L. Weichselbaum, M. Neugschwandtner, M. Lindorfer, Y. Fratantonio, V. van der Veen, and C. Platzer. Andrubis: Android Malware Under The Magnifying Glass. Technical Report TR-ISECLAB-0414-001, iSecLab, May 2014.
[35] K. Yoshioka, Y. Hosobuchi, T. Orii, and T. Matsumoto. Your Sandbox is Blinded: Impact of Decoy Injection to Public Malware Analysis Systems. Journal of Information Processing, 2011.