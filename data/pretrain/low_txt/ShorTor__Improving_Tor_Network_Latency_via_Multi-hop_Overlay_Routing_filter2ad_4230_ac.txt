### ShorTor: Enhancing Tor's Routing with Transient Alternate Routes

ShorTor introduces a single additional step into the Tor routing process. Instead of forwarding cells solely along pre-established circuits, relays establish transient alternate routes between themselves and the next hop on their circuits. These alternate routes forward traffic via an additional Tor relay rather than sending it directly to the next relay on the circuit. The intermediate hops between circuit relays are referred to as "via relays," the connection between a circuit relay and a via relay as a "via connection," and the communications over this connection as "via traffic."

It is important to note that the terms "circuit" and "via" denote different roles a relay may play in ShorTor, but do not correspond to different physical entities. A via relay is simply a regular Tor relay that has been chosen as an intermediate hop for some circuit, rather than as part of the circuit itself. Any relay in Tor can act as both a circuit and a via relay simultaneously for different traffic streams.

#### ShorTor Protocol Stages

The ShorTor protocol proceeds in several stages:

1. **Latency Measurements**: On an ongoing basis, relays measure their round-trip latencies with other relays (LATENCIES.UPDATE(), Protocol 2). Circuit relays use these measurements to choose candidate via relays for outgoing traffic (SHORTOR.CHOOSEVIA(), Protocol 1).

2. **Data Race**: Circuit relays perform a "data race" to choose the fastest path (RACE, Protocol 3). If a route with a via relay is faster than the default path, the circuit relay updates its routing table.

3. **Steady-State Operation**: In the steady state, the circuit relay handles traffic for its circuits as usual but directs it to the via relay rather than to the next circuit hop.

**Establishment**:
- When establishing a connection for a given circuit, relays on that circuit run LATENCIES.VIAFOR() (Protocol 2) to obtain a shortlist of potential vias. These vias are those that have recently been observed to provide the largest latency improvements over the default path between this relay and the next hop on its circuit.
- The circuit relay then performs a data race over each of the candidate vias (RACE.RUN(), Protocol 3).
- The finish line of this race is the next relay on the relevant circuit, which can report to the starting relay which of the data race cells arrived first.

**Routing**:
- While establishing a via connection, both the circuit and via relays must update their routing tables: circuit relays note which via to send cells to, while via relays record which circuit relay should receive their forwarded traffic.
- To achieve this, new fields are introduced in Tor cell headers and routing tables, as described in Figure 4. These allow relays to recognize traffic streams and route them to the correct next hop.

**Steady-State**:
- Traffic over via connections that have already been established is handled similarly to regular Tor traffic. Via relays simply forward the received traffic stream according to their routing table for the circuit.
- As via relays are not part of client circuits, they do not perform onion decryption/encryption prior to forwarding cells.
- Circuit relays function as in baseline Tor except in cases where their routing table for a circuit contains a via relay. Then, the relay will alter the header on cells for these circuits as shown in Figure 4 and send the cells to the indicated via rather than to the next relay on the circuit.
- Periodically, relays on a circuit can repeat the data race to determine whether a given via is still the fastest option based on current network status.

#### Latency Measurements

ShorTor relies on two forms of latency measurements:

1. **Up-to-Date Table of Probable Via Candidates**: Each relay maintains an up-to-date table of probable via candidates for each relay pair (Protocol 2).
2. **Data Race**: This determines the fastest of the candidates (Protocol 3).

**Pairwise Latency**:
- ShorTor requires latency measurements between Tor relays to narrow down the set of potential via relay options for a circuit.
- In LATENCIES.UPDATE() (Protocol 2), each Tor relay collects this latency information as needed, distributing the involved storage, computation, and network load across the Tor network.
- For security reasons, ShorTor uses latencies reported from the destination: an honest destination will not recommend a dishonest via relay disproportionately often, while a dishonest destination was already on the circuit and gains nothing by lying.

**Data Race**:
- Directly choosing via connections based on measured latencies has several potential drawbacks, such as the directionality of network paths, real-time changes in latencies, and inaccuracies due to measurement errors or malicious relays.
- Instead, circuit relays choose the fastest via using a "data race": sending packets along different routes to see which arrives at the destination first (RACE.RUN(), Protocol 3).
- The starting relay simultaneously sends a copy of a data race cell to each prospective via relay and one copy directly to the destination. The destination relay, which is the next hop on the circuit, responds only to the first of these cells to arrive.
- Data races are directional, allowing relays to identify the fastest path in each direction separately. Malicious via relays cannot report lower latencies to artificially increase their odds of being selected.

#### Avoiding Traffic Loops

A loop occurs when the same traffic stream passes through a relay more than once, which can be exploited for traffic correlation. To avoid loops, ShorTor is applied only to circuits of length exactly three (the default in Tor) and only a single via is used between any pair of relays. This ensures that the middle relay of a circuit can observe all vias and enforce the same guarantees as for circuit relays.

#### Stability

ShorTorâ€™s distributed via selection protocol must avoid oscillations where circuit relays swap back and forth between vias. Without appropriate precautions, a cycle could form where traffic streams dropped from an overwhelmed via all divert to the same alternate via, subsequently overwhelming that via and causing the streams to revert to the original choice, and so on. To mitigate this risk, ShorTor uses backoff and capacity parameters in the data race.

In summary, ShorTor enhances Tor's routing by introducing transient alternate routes, ensuring efficient and secure traffic handling while maintaining the integrity and performance of the Tor network.