### Fragmentation and Implementation Vulnerabilities in 802.11

#### Fragmentation Behavior
An important aspect of fragmentation is whether the last fragment can be larger than the previous ones. According to the 802.11 standard [14, §9.5], this is not allowed. However, during our decryption attack, we found that all devices supporting fragmentation permitted this behavior (see Table 2, column "diff. size").

As mentioned in Section 2.3, the receiver should update its replay counter after reassembling the MSDU. This allows for the possibility of sending each fragment of an MSDU using the same TSC, keystream, and priority. If this is allowed, an attacker can inject up to 16 fragments using only one keystream. Table 2 (column "eff. frag.") confirms that this technique is possible on several devices.

#### Replay Counter and TSC
We also tested whether fragments can be sent without using a sequential replay counter, i.e., whether TSC values can be skipped. The 802.11 standard permits this for TKIP [14, §11.4.2.6], but some devices only accept sequential TSCs (see Table 2, column "skip TSC").

#### Critical Implementation Flaws
Surprisingly, we discovered critical implementation flaws in some devices, particularly in wireless USB adapters. Several devices do not drop packets with already used TSCs, allowing an attacker to replay packets (see Table 2, column "Replay"). Another flaw is that some devices do not verify the MIC value of a fragmented TKIP packet (see Table 2, column "any MIC"). This removes the need to execute the Beck and Tews attack to obtain the MIC key. For example, the Ralink WA-U150BB on Windows drops fragmented packets with an incorrect MIC but does not transmit a MIC failure. As discussed in Section 3, dropping the packet but not sending a MIC failure can open the door for new attacks on the MIC key.

Additionally, we encountered wireless adapters that accepted unencrypted packets while connected to an encrypted network (see Table 2, column "Unenc."). This vulnerability is present in the Windows drivers for the AWUS036h, a device known for its wide reception and high transmission power. Another susceptible device is the Scarlet VDSL Box, a router provided by the Belgian ISP Scarlet. This case is particularly concerning because the vulnerability has a higher impact when present on access points (APs). An attacker could exploit this flaw to inject arbitrary traffic into the network and send packets to the internet using the victim's public IP address. Further research on a wider array of devices may reveal additional implementation flaws.

### Verification of Attacks

According to the 802.11 specification, TKIP countermeasures must disable only TKIP traffic for one minute [14, §11.4.2.4]. However, most APs we tested disabled all wireless traffic, including CCMP-protected traffic in mixed mode. A single TKIP client can take down the entire wireless network. The behavior of an AP depends on whether WPA1 or WPA2 is being used (see Table 3). WPA1 mandates TKIP support and optionally allows CCMP, while WPA2 requires CCMP and optionally allows TKIP.

For the fragmentation, portscan, and decryption attacks to work, we need to accurately predict the first 12 bytes of encrypted packets. We monitored TKIP traffic generated by visiting several websites for 20 minutes, capturing 36,643 data packets, of which 36,642 were predicted correctly. The single miss was an EAPOL packet, which we ignored. Additionally, 5,680 packets (13% of all traffic) were not captured, leaving their corresponding keystreams unknown.

The fragmentation and portscan attacks were tested against Windows, Linux, iOS, and Android. All were found to be vulnerable when connected to a network using TKIP. The attacks were successful under both shared passphrase and personal login authentication mechanisms (PEAP-MSCHAP v2).

For the decryption attack, Windows, Linux, and Android were vulnerable when connected to a TKIP-protected network. Mac OS X and iOS include only the first 8 bytes of the UDP packet in the ICMP unreachable reply, preventing the targeted packet from being included. However, we received ICMP unreachable replies from all operating systems, indicating that the Michael reset attack worked in all cases. Installing a firewall to block ICMP unreachable replies prevents the decryption attack, though the Michael reset attack remains possible.

### Related Work

Several DoS attacks exist on wireless networks. One well-known attack involves forging deauthentication frames, which is possible because the deauthentication message is not protected. Continuously sending these frames results in a DoS attack. Our attack requires replaying only two frames per minute to disconnect every TKIP-using client, making it stealthier and requiring less power. Enabling protected management frames can prevent deauthentication attacks. Compared to the DoS attack by Glass and Muthukkumarasamy [9], our attack is easier to execute as it does not require a man-in-the-middle position. It can also verify if clients send MIC failure reports, enabling the Beck and Tews attack [17].

Könings et al. [15] found DoS vulnerabilities at the physical and MAC layers of 802.11, some halting traffic for one minute with minimal packet injection. Unlike our DoS, their attacks do not simultaneously disconnect all clients. Bicakci and Tavli [3] surveyed DoS attacks at the physical and MAC layers, noting that they require injecting a large number of frames.

One of the first attacks on TKIP was by Beck and Tews [20], which decrypts an ARP reply packet and obtains the MIC key for AP-to-client communication. Halvorson et al. [11] improved the attack to allow larger packet injection, but it takes longer to execute compared to our fragmentation attack. Morii and Todo [17] removed the QoS requirement, allowing attackers to forge QoS headers. Todo et al. [21] reduced the execution time of the Beck and Tews attack to 8-9 minutes.

The Michael algorithm, designed by Ferguson [6], was shown to be invertible by Wool [22], leading to a related message attack on TKIP. Huang et al. [13] demonstrated that Michael is not collision-free and suggested a packet forgery attack.

Beck [1] suggested using two magic words to reset the Michael state, but no thorough theoretical analysis or practical implementation was provided. Based on the fragmentation attack on WEP by Bittau et al. [4], Beck also suggested using the fragmentation attack on TKIP, though no implementation was made.

Wireless drivers have been tested for vulnerabilities, primarily through fuzzing to find code injection attacks. Limited research has focused on logical implementation flaws, such as replay attacks, plaintext packet injection, and MIC verification for fragmented TKIP packets.

Moen et al. [16] analyzed the key scheduling algorithm in TKIP, finding that with fewer than 10 RC4 packet keys, it is possible to recover the temporal key (TK) with a time complexity of O(2^105) compared to a brute force attack with a complexity of O(2^128).

### Conclusion

TKIP was designed as an intermediary solution to mitigate WEP's flaws. We found that TKIP is still supported by many networks but fails to provide sufficient security. We described and implemented several new attacks and identified critical implementation vulnerabilities in several wireless devices. Specifying a short rekeying interval can prevent fragmentation and decryption attacks but not our DoS attack. To secure a wireless network, it is strongly advised to support the more secure CCMP.

### Acknowledgements

The authors thank the anonymous reviewers and the shepherd for their valuable feedback. This research is partially funded by the Research Fund KU Leuven, the EU FP7 project NESSoS, and the Prevention of and Fight against Crime Programme of the European Union (B-CCENTRE). Mathy Vanhoef holds a Ph.D. fellowship of the Research Foundation - Flanders (FWO).

### References

[1] M. Beck. Enhanced TKIP Michael attacks. Retrieved 4 February, 2013, from http://download.aircrack-ng.org/wiki-files/doc/enhanced_tkip_michael.pdf.
[2] J. Bellardo and S. Savage. 802.11 denial-of-service attacks: real vulnerabilities and practical solutions. In Proceedings of the USENIX Security Symposium, 2003.
[3] K. Bicakci and B. Tavli. Denial-of-service attacks and countermeasures in IEEE 802.11 wireless networks, 2009.
[4] A. Bittau, M. Handley, and J. Lackey. The final nail in WEP’s coffin. In IEEE Symposium on Security and Privacy, pages 386–400, 2006.
[5] L. Butti and J. Tinnés. Discovering and exploiting 802.11 wireless driver vulnerabilities. Journal in Computer Virology, 4(1):25–37, 2008.
[6] N. Ferguson. Michael: an improved MIC for 802.11 WEP. IEEE doc. 802.11-2/020r0, Jan. 2002.
[7] G. Fleishman. Say goodbye to WEP and TKIP. Retrieved 26 November, 2012, from http://bit.ly/cSFSvj, 2010.
[8] S. R. Fluhrer, I. Mantin, and A. Shamir. Weaknesses in the key scheduling algorithm of RC4. In Selected Areas in Cryptography, pages 1–24, 2001.
[9] S. M. Glass and V. Muthukkumarasamy. A study of the TKIP cryptographic DoS attack. In 15th International Conference on Networks. IEEE, 2007.
[10] M. Guennoun, A. Lbekkouri, A. Benamrane, M. Ben-Tahir, and K. El-Khatib. Wireless networks security: Proof of chopchop attack. In WOWMOM, pages 1–4, 2008.
[11] F. M. Halvorsen, O. Haugen, M. Eian, and S. F. Mjølsnes. An improved attack on TKIP. In 14th Nordic Conference on Secure IT Systems, NordSec '09, 2009.
[12] B. Harris and R. Hunt. Review: TCP/IP security threats and attack methods. Computer Communications, 22(10):885–897, 1999.
[13] J. Huang, J. Seberry, W. Susilo, and M. W. Bunder. Security analysis of Michael: The IEEE 802.11i message integrity code. In EUC Workshops, pages 423–432, 2005.
[14] IEEE Std 802.11-2012 (Rev. of IEEE Std 802.11-2007). Wireless LAN Medium Access Control (MAC) and Physical Layer (PHY) Specifications, 2012.
[15] B. Könings, F. Schaub, F. Kargl, and S. Dietzel. Channel switch and quiet attack: New DoS attacks exploiting the 802.11 standard. In LCN, 2009.
[16] V. Moen, H. Raddum, and K. J. Hole. Weaknesses in the temporal key hash of WPA. Mobile Computing and Communications Review, 8(2):76–83, 2004.
[17] M. Morii and Y. Todo. Cryptanalysis for RC4 and breaking WEP/WPA-TKIP. IEICE Transactions, 94-D(11), 2011.
[18] S. Park, K. Kim, D. Kim, S. Choi, and S. Hong. Collaborative QoS architecture between DiffServ and 802.11e wireless LAN. In Vehicular Technology Conference, 2003.
[19] A. Stubblefield, J. Ioannidis, and A. D. Rubin. A key recovery attack on the 802.11b wired equivalent privacy protocol (WEP). ACM Trans. Inf. Syst. Secur., 7(2), 2004.
[20] E. Tews and M. Beck. Practical attacks against WEP and WPA. In Proceedings of the second ACM conference on Wireless network security, WiSec '09, 2009.
[21] Y. Todo, Y. Ozawa, T. Ohigashi, and M. Morii. Falsification attacks against WPA-TKIP in a realistic environment. IEICE Transactions, 95-D(2), 2012.
[22] A. Wool. A note on the fragility of the Michael message integrity code. IEEE Transactions on Wireless Communications, 3(5):1459–1462, 2004.