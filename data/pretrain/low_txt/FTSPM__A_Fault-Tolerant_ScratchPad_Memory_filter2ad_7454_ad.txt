### V. SIMULATION SETUP AND RESULTS

To evaluate the proposed approach, we utilized FaCSim, a cycle-accurate ARM processor simulator [25]. In our experiments, FTSPM was compared to two baseline SPM structures: a pure SRAM-based structure protected by SEC-DED and a pure STT-RAM-based structure. The pure STT-RAM-based structure is inherently immune to radiation-induced soft errors. The first baseline suffers from high static power consumption and vulnerability to multiple-bit upsets (MBUs), while the second baseline has limitations in terms of endurance, energy consumption, and write operation latency. Detailed characteristics of each structure are presented in Table IV.

The latency and energy consumption of the memory subsystem were calculated using NVSIM [26]. Additionally, Synopsys Design Compiler [27] was used to measure the latency and energy consumption of the parity and SEC-DED combinational circuits. The MiBench benchmark suite [28] was employed as the workload. The performance, energy consumption, endurance, and reliability of the system running this benchmark suite were measured to evaluate the efficiency of the proposed method.

Figure 3 illustrates the dynamic energy consumption per access for each region, with the static power consumption of the proposed method, baseline SRAM, and baseline STT-RAM being 7.1 mW, 15.8 mW, and 3 mW, respectively. As mentioned in Section III, the reliability of the SPM is measured based on the Architectural Vulnerability Factor (AVF) [24]. To assess the vulnerability of the SPM, the vulnerable intervals of each block were multiplied by the probability of MBUs due to particle strikes, as reported in [6]. Figure 4 shows the read/write distribution of each benchmark alongside the FTSPM structure. Figure 5 presents the vulnerability of FTSPM and the pure SRAM SPM. It is noteworthy that the pure STT-RAM SPM is assumed to be immune to soft errors.

According to Figure 5, the vulnerability of the pure SRAM SPM is approximately 7 times higher than that of FTSPM. As observed in Figure 5, the vulnerability of the baseline SRAM structure remains constant and is independent of the workload behavior. This observation is attributed to the uniform distribution of radiation-induced soft errors across the surface of the baseline SRAM structure, in contrast to the non-uniform FTSPM structure. The shortcomings of ECC methods against MBUs result in higher vulnerability for the baseline SRAM structure. Conversely, the robustness of the NVM part of FTSPM against MBUs, combined with the strategic distribution of more vulnerable blocks in more reliable areas, leads to lower overall SPM vulnerability.

Figure 6 depicts the static energy consumption of the baseline structures and FTSPM. As expected, the static energy consumption of FTSPM is significantly lower than that of the pure SRAM SPM due to the replacement of a large fraction of SRAM cells with STT-RAM cells. However, the static energy consumption of FTSPM is higher than that of the pure STT-RAM SPM due to the high static energy of the included SRAM cells. The static energy consumption of the proposed hybrid SPM and the pure STT-RAM SPM is about 45% and 25% less, respectively, compared to the pure SRAM SPM.

On the other hand, as shown in Figure 7, the dynamic energy consumption of FTSPM is 47% lower than that of the pure SRAM SPM and 77% lower than that of the pure STT-RAM SPM. The lower read energy and higher write energy of STT-RAM cells, combined with the intelligent distribution of program blocks in SPM regions using the FTSPM mapping algorithm, make the FTSPM hybrid structure significantly more dynamic energy efficient than the pure SRAM and pure STT-RAM SPM baselines.

Figure 8 illustrates the endurance of FTSPM and the pure STT-RAM SPM baseline. By distributing program blocks between STT-RAM and SRAM regions, the proposed algorithm enhances the endurance of the hybrid SPM compared to a pure STT-RAM SPM by three orders of magnitude. Note that the endurance of the pure SRAM SPM is not reported because SRAM cells are assumed to have no endurance limitations. Finally, the strategy of the FTSPM algorithm, which aims to reduce the write aggregation of program data in STT-RAM cells, results in a negligible performance overhead compared to a pure SRAM-based SPM, as indicated by the simulation results.

### VI. CONCLUSION

This paper proposes a method called FTSPM to protect SPM against soft errors. FTSPM employs a hybrid STT-RAM/SRAM structure for SPM to improve its reliability. Additionally, FTSPM uses a reliability-aware mapping algorithm to allocate SPM hybrid regions to program blocks. According to the simulation results, the vulnerability of the FTSPM structure to soft errors is approximately 7 times lower than that of the pure SRAM-based SPM baseline. Furthermore, FTSPM achieves about 55% and 47% reductions in static and dynamic energy consumption, respectively. Compared to the pure STT-RAM-based SPM baseline, FTSPM increases the endurance of SPM by three orders of magnitude and decreases dynamic energy consumption by up to 23%. Moreover, the performance overhead of FTSPM is less than 1%.

### REFERENCES

[1] P. Marwedel, *Embedded Systems Design*, Second edition, Springer, 2010.
[2] International Technology Roadmap for Semiconductors (ITRS), "ERD ERM 2010 Final Report Memory Assessment," Final report, 2010.
[3] F. Li, G. Chen, M. Kandimer, "Improving scratch-pad memory reliability through compiler-guided data block duplication," Proc. IEEE/ACM International Conference on Computer-Aided Design (ICCAD 05), pp. 1002-1005, USA, November 6-10, 2005.
[4] I. Lee, J. Leung, S. Son, *Handbook of Real-Time and Embedded Systems*, First edition, Chapman and Hall/CRC Computer and Information Science Series, 2008.
[5] H. Takase, H. Tomiyama, H. Takada, "Partitioning and allocation of scratch-pad memory for priority-based preemptive multi-task systems," Proc. Design, Automation and Test in Europe (DATE 10), pp. 1124-1129, Germany, March 8-12, 2010.
[6] A. Dixit, A. Wood, "The impact of new technology on soft error rates," Proc. IEEE International Reliability Physics Symposium (IRPS 11), pp. 5B.4.1-5B.4.7, USA, April 10-14, 2011.
[7] H. Farbeh, M. Fazeli, F. Khosravi, S. G. Miremadi, "Memory mapped SPM: protecting instruction scratchpad memory in embedded systems against soft errors," Proc. European Dependable Computing Conference (EDCC 12), pp. 218-226, Romania, May 8-11, 2012.
[8] L. A. D. Bathen, N. D. Dutt, "E-RoC: embedded RAIDs-on-chip for low power distributed dynamically managed reliable memories," Proc. Design, Automation and Test in Europe Conference and Exhibition (DATE 11), pp. 1-6, France, March 14-18, 2011.
[9] S. Guangyu, E. Kursun, J. A. Rivers, X. Yuan, "Exploring the vulnerability of CMPs to soft errors with 3D stacked non-volatile memory," Proc. IEEE International Conference on Computer Design (ICCD 11), pp. 366-372, USA, October 9-12, 2011.
[10] J. Hu, C. J. Xue, Q. Zhuge, W. C. Tseng, E. H. M. Sha, "Towards energy-efficient hybrid on-chip scratch pad memory with non-volatile memory," Proc. Design, Automation and Test in Europe (DATE 11), pp. 1-6, France, March 14-18, 2011.
[11] I. M. Aouad, R. Schott, O. Zendra, "A tabu search heuristic for scratch-pad memory management," Proc. International Conference on Software Engineering and Technology (ICSET 10), pp. 386-390, Italy, April 28-30, 2010.
[12] I. M. Aouad, O. Zendra, "A survey of scratch-pad memory management techniques for low-power and low-energy," Proc. International Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS 07), pp. 31-38, Germany, July 30, 2007.
[13] D. Yoon, M. Erez, "Memory-mapped ECC: low-cost error protection for last level caches," Proc. International Symposium on Computer Architecture (ISCA 09), pp. 116-127, USA, June 24-29, 2009.
[14] D. F. Heidel, P. W. Marshall, J. A. Pellish, K. P. Rodbell, K. A. LaBel, J. R. Schwank, S. E. Rauch, M. C. Hakey, M. D. Berg, C. M. Castaneda, P. E. Dodd, M. R. Friendlich, A. D. Phan, C. M. Seidleck, M. R. Shaneyfelt, M. A. Xapsos, "Single-event upsets and multiple-bit upsets on a 45 nm SOI SRAM," IEEE Transactions on Nuclear Science (TNS 09), vol. 56, no. 6, pp. 3499-3504, December 2009.
[15] S. Steinke, L. Wehmeyer, B. S. Lee, P. Marwedel, "Assigning program and data objects to scratchpad for energy reduction," Proc. Design Automation and Test in Europe (DATE 02), pp. 409-415, France, March 4-8, 2002.
[16] A. Janapsayta, S. Parameswaran, A. Ignjatovic, "Hardware/software managed scratchpad memory for embedded system," Proc. International Conference on Computer-Aided Design (ICCAD 04), pp. 370-377, USA, November 7-11, 2004.
[17] L. Li, L. Gao, J. Xue, "Memory coloring: a compiler approach for scratchpad memory management," Proc. International Conference on Parallel Architectures and Compilation Techniques (PACT 05), pp. 329-338, USA, September 17-21, 2005.
[18] K. Swaminathan, R. Pisolkar, X. Cong, V. Narayanan, "When to forget: a system-level perspective on STT-RAMs," Proc. Asia and South Pacific Design Automation Conference (ASP-DAC 12), pp. 311-316, Australia, January 30-February 2, 2012.
[19] M. Wang, Y. Wang, D. Liu, Z. Shao, "Improving the reliability of embedded systems with cache and SPM," Proc. IEEE 6th International Conference on Mobile Adhoc and Sensor Systems (MASS 09), pp. 825-830, China, October 12-15, 2009.
[20] M. Damavandpeyma, S. Stuijk, T. Basten, M. Geilen, H. Corporaal, "Thermal-aware scratchpad memory design and allocation," Proc. IEEE International Conference on Computer Design (ICCD 10), pp. 118-124, Netherlands, October 3-6, 2010.
[21] T. Perez, A. F. Cesar, De-Rose, "Non-volatile memory: emerging technologies and their impacts on Memory Systems," Technical report, Pontif√≠cia Universidade, Brazil, September 2010.
[22] S. Rodriguez, B. Jacob, "Energy/power breakdown of pipelined nanometer caches (90nm/65nm/45nm/32nm)," Proc. International Symposium on Low Power Electronics and Design (ISLPED 06), pp. 25-30, Germany, October 4, 2006.
[23] V. Chandra, R. Aitken, "Impact of technology and voltage scaling on the soft error susceptibility in nanoscale CMOS," Proc. IEEE International Symposium on Defect and Fault Tolerance of VLSI System (DFT 08), pp. 114-122, USA, October 1-3, 2008.
[24] S. S. Mukherjee, C. T. Weaver, J. Emer, S. K. Reinhardt, T. Austin, "Measuring architectural vulnerability factors," Proc. IEEE Micro, pp. 70-75, USA, December 3-5, 2003.
[25] J. Lee, J. Kim, C. Jang, S. Kim, B. Egger, K. Kim, S. Y. Han, "FaCSim: a fast and cycle-accurate architecture simulator for embedded systems," Proc. ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems, pp. 89-99, USA, June 12-13, 2008.
[26] X. Dong, C. Xu, Y. Xie, N. P. Jouppi, "NVSim: a circuit-level performance, energy, and area model for emerging nonvolatile memory," IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD 12), vol. 31, no. 7, pp. 994-1007, July 2012.
[27] Synopsys Design Compiler, www.synopsys.com, 2010.
[28] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin, T. Mudge, R. B. Brown, "MiBench: A free, commercially representative embedded benchmark suite," Proc. International Workshop of the Workload Characterization (WWC 01), pp. 314, USA, December 2, 2001.