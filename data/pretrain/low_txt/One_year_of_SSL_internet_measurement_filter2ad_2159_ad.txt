### Table 9: Answers to the TLS1.2 Stimulus

The "Alert" line indicates the proportion of servers that refuse to negotiate and assert this choice. This should occur if none of the proposed ciphersuites is acceptable. Theoretically, this should not happen with a protocol version since the servers in the sample groups accepted TLSv1.0 and could have responded with this version. However, our TLS1.2 stimulus did not include all the ciphersuites from the NoExt2/FF/SSL2+ ClientHellos, so it is legitimate for a server to accept the latter stimuli but send an Alert to the TLS1.2 message.

The last two lines represent servers that do not respond correctly to the stimulus. As they correctly answered three other stimuli, we would have expected an Alert message to signal the negotiation failure. We call such servers DHE-, EC-, or TLSv1.2-intolerant, and their behavior does not conform to the standards.

For each case (DHE, EC, TLSv1.2), the proportion of intolerant servers is significant: about 20% globally, more than 12% for EV servers.

Another disappointing fact is the very low proportions of servers supporting DHE and EC suites, especially for EV hosts (13% for DHE, 5% for EC).

Finally, let’s consider the proportion of the sample groups answering correctly to an SSLv2 ServerHello when the stimulus is a pure SSLv2 ClientHello (SSL2 stimulus). Table 10 shows the answers received. We did not expect TLS servers to behave correctly, as SSLv2 uses different messages and is now deprecated. In fact, we would have expected fewer servers to accept negotiating an SSLv2 session.

Many TLS servers are still fully compatible with SSLv2, whereas they should not negotiate the obsolete version of the protocol.

| Response Type | Trusted | TLS | EV |
|---------------|---------|-----|----|
| Compatible Handshake | 40% | 27% | 8% |
| Alert | 2% | 1% | 91% |
| Non-TLS Answer | 58% | 0% | 0% |
| Incompatible Handshake | 2% | 71% | 0% |

### Table 10: Answers to the SSL2 Stimulus

### 7. Analysis of Chain Quality

In this section, we only consider four campaigns (NoExt1, EFF-1, EFF-2, and NoExt2) corresponding to different dates (July 2010, August 2010, December 2010, and July 2011). The results of this section were similar for the three standard July 2011 stimuli (NoExt2, FF, SSL2+). For the four campaigns, trusted hosts represent around 35% of the TLS hosts (about 4 million), and EV servers represent 1% of the TLS hosts (100 to 140,000). 10.2 million unique certificates were analyzed, gathered from 10.9 million unique certificate chains.

The certificate chains we study are those built by our verification program, i.e., the best certificate chain we could build from the certificates sent and all the certificates gathered. We prefer trusted chains over non-trusted chains and choose RFC-compliant chains (R) over complete but unordered chains (C) over transvalid chains (T). The partition of certificate chains built along these categories is given in Table 11. It is interesting to note that EV hosts often present unordered or even transvalid chains, which leads to incompatibilities with some TLS stacks. Generally, servers send 2 or 3 certificates, and the certificate chains we build also contain the same number of certificates. However, some servers send more certificates. The maximum we saw was 150 in EFF-2 and corresponded to a trusted server.

More than 40% of TLS hosts do not send RFC-compliant chains. The values for EV hosts are even worse (around 85%). These observations are stable from 2010 to 2011.

| Date | R | C | T | I |
|------|---|---|---|---|
| 2010-07 | 60% | 8% | 4% | 27% |
| 2010-08 | 61% | 10% | 6% | 28% |
| 2010-12 | 59% | 9% | 10% | 25% |
| 2011-07 | 54% | 10% | 14% | 30% |
| **Trusted** | 69% | 21% | 10% | - |
| **EV** | 71% | 19% | 10% | - |
| 2010-07 | 67% | 21% | 12% | - |
| 2010-08 | 62% | 24% | 14% | - |
| 2010-12 | 74% | 83% | 5% | - |
| 2011-07 | 76% | 74% | 10% | - |

Table 11: Partition of the certificate chains built in (R)FC-compliant, (C)omplete although not RFC-compliant, and (T)ransvalid chains. (I)ncomplete chains are chains we could not build completely.

RSA is the main algorithm used in the certificates sent: the proportion of certificate chains containing only RSA keys is higher than 99% for TLS hosts and reaches 100% for trusted and EV hosts. We thus assess the cryptographic robustness of such RSA certificate chains. The criterion to measure RSA key robustness is the minimum RSA key length found in the certificate chain. The statistics for this parameter are given in Table 12. It appears that mean RSA key lengths are increasing with time. The 84% 1024-bit and 13% 2048-bit chains measured in 2010 turn into 52% and 48% respectively. The shift is even better for Trusted hosts, with 86% of 1024-bit chains and 13% of 2048-bit chains in July 2010 becoming 52% and 48% in July 2011. In 2011, all the EV servers present 2048-bit robust chains, which can be explained by the EV guidelines [5] that specify this as a minimum key size for EV certificates from December 2010.

| Date | TLS | Trusted | EV |
|------|-----|---------|----|
| 2010-07 | 1147 | 1149 | 1950 |
| 2010-08 | 1135 | 1133 | 1897 |
| 2010-12 | 1197 | 1220 | 2042 |
| 2011-07 | 1303 | 1514 | 2048 |

Table 12: Mean RSA robustness of the chains. This table does not include extreme values: few servers present huge RSA keys (up to 16384 bits) or very short keys (512 or 768 bits). Such weak RSA keys represent 3% of TLS hosts in the first two campaigns and less than 2% for the last two. More seriously, 512 and 768-bit certificates are present in 2% of trusted hosts in July 2010. Fortunately, this number has dropped to less than 0.1% (less than 2,500 servers) in July 2011.

Finally, the last parameter we study is the validity period of the chain (i.e., the intersection of the validity periods of the certificates in the chain). The mean values are represented in Table 13. As expected, trusted and EV validity periods are reasonable (mostly one or two years). However, TLS hosts do contain anomalies (chains that are never valid or valid until the year 9999), which are hopefully filtered out by the trusted filter. Another trend we observe is that the typical validity of EV certs has moved from 365 days to 730 days between July 2010 and December 2011.

| Date | TLS | Trusted | EV |
|------|-----|---------|----|
| 2010-07 | 2561 | 701 | 551 |
| 2010-08 | 5020 | 728 | 555 |
| 2010-12 | 2328 | 728 | 612 |
| 2011-07 | 2659 | 744 | 652 |

Table 13: Mean validity period (in days).

### 8. Related Work

Several projects aiming to understand the SSL landscape have performed similar measures on the internet. We discuss three of them: two presented at security conferences (BlackHat, DefCon, and CCC) and one covered in an academic paper.

From July 2010 to July 2011, we gathered data from full IPv4 HTTPS host enumerations, evaluated the quality of TLS answers, and described trends over time. We found that some well-studied parameters, like RSA key sizes, are improving, but most of the criteria we analyzed are not well taken into account, even if some parameters have improved in a year. For example, many servers are still intolerant to some ciphersuites or recent TLS versions. The quality of the certificate chains sent by servers is also not acceptable, as many HTTPS hosts send Certificate messages that do not comply with the standard, causing some TLS stacks to fail.

There is a pressing need for a quality label representing the overall quality of TLS sessions (server configuration, implementation, and cryptographic parameters). The only widespread existing label is Extended Validation (EV), which is visually recognizable in web browsers. However, EV only deals with the format of the certificate issued to servers and does not take into account the other parameters. In fact, global TLS statistics were even better than EV statistics for some parameters. One way to improve the SSL landscape would be to create a new label or extend EV constraints to cover all relevant security criteria: support for recent TLS versions and most secure ciphersuites, preference for PFS suites, strict RFC-compliance, and support for known security extensions.

Recent initiatives like the EFF Decentralized SSL Observatory (passive monitoring through a browser plugin) or SSL Labs' SSL Pulse should help monitor parts of the SSL landscape. It may also be useful to browse the full IPv4 space again to compare global views of the SSL universe over time. Using only DNS scans or passive monitoring does not allow for really comparable statistics.

Further work could include new stimuli to refine the data obtained. We could study other parameters like certificate revocation methods. To improve our notion of trust, it would be useful to take other certificate trust stores into account (e.g., Internet Explorer, Opera). Finally, what we noticed was that many servers did not behave like common known TLS stacks, so it would be interesting to investigate their responses to try and fingerprint the stacks encountered.

### Acknowledgment

The work in this paper has been partially sponsored by the EC 7th Framework Programme as part of the ICT VisSense project (grant no. 257497). The authors would like to thank the Applied and Fundamental Research Division of the French Network and Information Security Agency (ANSSI) for their comments and suggestions.

### References

[1] T. Benzel. The science of cyber security experimentation: the DETER project. In Robert H’obbes’ Zakon, John P. McDermott, and Michael E. Locasto, editors, ACSAC, pages 137–148. ACM, 2011.
[2] S. Blake-Wilson, N. Bolyard, V. Gupta, C. Hawk, and B. Moeller. Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS). RFC 4492 (Informational), May 2006.
[3] S. Blake-Wilson, M. Nystrom, D. Hopwood, J. Mikkelsen, and T. Wright. Transport Layer Security (TLS) Extensions. RFC 3546 (Proposed Standard), June 2003.
[4] D. Bleichenbacher. Chosen Ciphertext Attacks Against Protocols Based on the RSA Encryption Standard PKCS #1. In CRYPTO, 1998.
[5] CA/Browser Forum. EV SSL Certificate Guidelines version 1.3, 2010.
[6] Comodo. Report of Incident - Comodo detected and thwarted an intrusion on 26-MAR-2011, 2011.
[7] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W. Polk. Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile. RFC 5280 (Proposed Standard), May 2008.
[8] Debian. DSA-1571-1 openssl – predictable random number generator, 2008.
[9] T. Dierks and C. Allen. The TLS Protocol Version 1.0. RFC 2246 (Proposed Standard), January 1999.
[10] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.1. RFC 4346 (Proposed Standard), April 2006.
[11] T. Dierks and E. Rescorla. The Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246 (Proposed Standard), August 2008.
[12] T. Duong and J. Rizzo. BEAST: Surprising crypto attack against HTTPS, 2011.
[13] P. Eckersley and J. Burns. An Observatory for the SSLiverse, Talk at Defcon 18, 2010.
[14] P. Eckersley and J. Burns. Is the SSLiverse a safe place?, Talk at 27C3, 2010.
[15] Electronic Frontier Foundation. Cracking DES. Secrets of Encryption Research, Wiretap Politics & Chip Design. O’Reilly, 1998.
[16] A. Freier, P. Karlton, and P. Kocher. The SSL Protocol Version 3.0, 1996.
[17] K. Hickman. The SSL Protocol, 1994-1995.
[18] R. Holz, L. Braun, N. Kammenhuber, and G. Carle. The SSL landscape: a thorough analysis of the X.509 PKI using active and passive measurements. In IMC’11, 2011.
[19] A. Langley. Unfortunate current practices for HTTP over TLS. Internet Draft, 2011.
[20] A. Lenstra, J. Hughes, M. Augier, J. Bos, T. Kleinjung, and C. Wachter. Ron was wrong, Whit is right. Cryptology ePrint Archive, Report 2012/064, 2012.
[21] M. Marlinspike. Internet Explorer SSL Vulnerability, 2002.
[22] M. Marlinspike. More Tricks For Defeating SSL In Practice, 2009.
[23] B. Moeller. Security of CBC Ciphersuites in SSL/TLS: Problems and Countermeasures, 2002-2004.
[24] M. Ray. Authentication gap in TLS renegotiation, 2009.
[25] E. Rescorla, M. Ray, S. Dispensa, and N. Oskov. Transport Layer Security (TLS) Renegotiation Indication Extension. RFC 5746 (Proposed Standard), February 2010.
[26] I. Ristic. Internet SSL Survey, Talk at BlackHat 2010, 2010.
[27] J. Salowey, H. Zhou, P. Eronen, and H. Tschofenig. Transport Layer Security (TLS) Session Resumption without Server-Side State. RFC 4507 (Proposed Standard), May 2006.
[28] M. Stevens, A. Sotirov, A. Lenstra, J. Appelbaum, D. Molnar, D.A. Osvik, and B.D. Weger. Short chosen-prefix collisions for MD5 and the creation of a rogue CA certificate. In Crypto 2009, LNCS 5677, pages 55–69, 2009.
[29] S. Turner and T. Polk. Prohibiting Secure Sockets Layer (SSL) Version 2.0. RFC 6176 (Proposed Standard), March 2011.
[30] Vasco. DigiNotar reports security incident, 2011.