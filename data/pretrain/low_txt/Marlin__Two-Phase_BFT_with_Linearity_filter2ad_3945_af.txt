# Performance Analysis of Marlin and HotStuff

## View Change Latency

We evaluate the performance of view changes by measuring the latency from the point a replica initiates a view change to the point the first block is committed after the view change. To simulate this, we submit a few client requests and then crash the leader. For Marlin, we test both the "happy" and "unhappy" paths to fully understand its performance.

### Results

- **HotStuff:**
  - Latency: 182 ms (f = 1), 384 ms (f = 10)
  
- **Marlin (Happy Path):**
  - Latency: 123 ms (f = 1), 229 ms (f = 10) — approximately 30% to 40% lower than HotStuff
  
- **Marlin (Unhappy Path):**
  - Latency: Similar to HotStuff for both f = 1 and f = 10

The results indicate that Marlin's view change protocol is at least as efficient as HotStuff. In practice, the average latency of Marlin would likely fall between the happy and unhappy path latencies.

## Performance under Failures

We assess the performance of the rotating leader mode under different failure scenarios. We follow the HotStuff implementation [1] and Spinning [49] to rotate leaders periodically, setting the timer for the rotating leader to 1 second. We test the system with 0, 1, and 3 failures and report the throughput in Figure 10j.

### Results

- **No Failures:**
  - Both Marlin and HotStuff achieve their highest throughput.
  
- **1 Failure:**
  - Marlin: 24.5% lower throughput
  - HotStuff: 26.8% lower throughput
  
- **3 Failures:**
  - Marlin: 36.11% lower throughput
  - HotStuff: 38.66% lower throughput

In all cases, Marlin consistently outperforms HotStuff. For instance, with 3 failures, Marlin's throughput is 34.8% higher than HotStuff's.

## Conclusion

This paper introduces Marlin, a novel Byzantine Fault Tolerant (BFT) protocol that commits operations in two phases and has linear authenticator communication. We prove the correctness of Marlin and provide an efficient implementation. Through extensive evaluation, we show that Marlin outperforms HotStuff in various scenarios.

## Acknowledgements

We thank DSN reviewers and our shepherd Vivien Quéméa for their insightful comments.

## References

[1] HotStuff implementation. https://github.com/hot-stuff/libhotstuff.
[2] HotStuff (Relab). https://github.com/relab/hotstuff.
...
[52] Maofan Yin, Dahlia Malkhi, Michael K. Reiter, Guy Golan Gueta, and Ittai Abraham. HotStuff: BFT consensus with linearity and responsiveness. In PODC, 2019.
[51] Xin Wang, Sisi Duan, James Clavin, and Haibin Zhang. BFT in blockchains: From protocols to use cases. ACM Computing Surveys (CSUR), 2021.

---

**Note:** The references have been truncated for brevity. The full list of references is available in the original document.