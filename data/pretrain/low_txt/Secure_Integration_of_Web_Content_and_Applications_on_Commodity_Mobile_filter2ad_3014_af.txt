### Acknowledgements
This work was supported by the National Science Foundation (NSF) under grants CNS-1228620 and a joint United States Air Force/DARPA Contract (# FA-8650-15-C-7562). The opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### 10. Conclusion
As discussed in this work and others, web-embedding applications are increasingly becoming targets for attacks from various angles. Several current threat vectors remain unprotected due to the lack of practical security mechanisms that can meet the security requirements of all parties, including app developers, users, and web content providers.

We propose the use of WIREframe, a secure, third-party application, to provide trustworthy web-embedding while enforcing configurable and origin-based security policies on the interactions between Android apps and embedded web content. WIREframe allows both apps and web content to secure their own resources at fine-granularities. Our solution effectively prevents abuses of the app-web bridge by either malicious web content or malicious apps, while maintaining the appearance and functionality of client apps.

Our solution is easy to deploy, requiring no modifications to the Android operating system or framework. Through the use of our offline app-rewriting tool, WIRE, we can retarget legacy apps to benefit from the enhanced security of WIREframe without developer intervention.

### 11. References
[1] Android-Apktool. https://ibotpeaches.github.io/Apktool/.

[2] Android Isolated Service. http://developer.android.com/guide/topics/manifest/service-element.html#isolated.

[3] Apache Cordova. https://cordova.apache.org.

[4] A. Bartel, J. Klein, et al. Dexpler: Converting Android Dalvik Bytecode to Jimple for Static Analysis with Soot. Proceedings of the 1st International Workshop on the State of the Art in Program Analysis, SOAP '12. ACM, 2012.

[5] E. Bursztein, C. Soman, et al. Sessionjuggler: Secure Web Login from an Untrusted Terminal Using Session Hijacking. In Proceedings of the 21st International Conference on World Wide Web, WWW '15, 321–330. ACM, 2012.

[6] E. Chin & D. Wagner. Bifocals: Analyzing WebView Vulnerabilities in Android Applications. In Information Security Applications, LNCS, 138–159. Springer International, 2014.

[7] J. Dean, D. Grove, et al. Optimization of Object-Oriented Programs Using Static Class Hierarchy Analysis. ECOOP '95, Berlin, Heidelberg.

[8] M. Egele, C. Kruegel, et al. PiOS: Detecting Privacy Leaks in iOS Applications. In Proceedings of the 2011 Network and Distributed System Security Symposium, NDSS '11, 177–183. 2011.

[9] M. Georgiev, S. Jana, et al. Breaking and Fixing Origin-Based Access Control in Hybrid Web/Mobile Application Frameworks. 2014.

[10] M. C. Grace, W. Zhou, et al. Unsafe Exposure Analysis of Mobile In-app Advertisements. In Proceedings of the 5th ACM Conference on Security and Privacy in Wireless and Mobile Networks, WISEC 12, 101–112. ACM, 2012.

[11] B. Hassanshahi, Y. Jia, et al. Web-to-Application Injection Attacks on Android: Characterization and Detection. In Proceedings of the 2015 European Symposium on Research in Computer Security, ESORICS '15, 577–598. Springer, 2015.

[12] J. Jeon, K. K. Micinski, et al. Dr. Android and Mr. Hide: Fine-grained Permissions in Android Applications. In ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM), 3–14. 2012.

[13] X. Jin, X. Hu, et al. Code Injection Attacks on HTML5-based Mobile Apps: Characterization, Detection, and Mitigation. In Proceedings of the 2014 ACM Conference on Computer and Communications Security, CCS '14, 66–77. ACM.

[14] G. A. Kildall. A Unified Approach to Global Program Optimization. In Proceedings of the 1st Annual ACM SIGACT-SIGPLAN Symposium on Principles of Programming Languages, POPL '73, 194–206. ACM, 1973.

[15] D. Liu & L. P. Cox. VeriUI: Attested Login for Mobile Devices. In Proceedings of the 15th Workshop on Mobile Computing Systems and Applications, 7. ACM, 2014.

[16] T. Luo, H. Hao, et al. Attacks on WebView in the Android System. In Proceedings of the 2011 Annual Computer Security Applications Conference, 343–352. ACM, 2011.

[17] P. Mutchler, A. Doupé, et al. A Large-Scale Study of Mobile Web App Security. In Proceedings of the Mobile Security Technologies Workshop (MoST). 2015.

[18] A. Nadkarni, V. Tendulkar, et al. NativeWrap: Ad Hoc Smartphone Application Creation for End Users. In SPWM 2014, WiSec '14, 13–24. ACM, 2014.

[19] M. Neugschwandtner, M. Lindorfer, et al. A View to a Kill: WebView Exploitation. In LEET 2013. USENIX, 2013.

[20] P. Pearce, A. P. Felt, et al. Addroid: Privilege Separation for Applications and Advertisers in Android. In SICCS 2012.

[21] V. Rastogi, R. Shao, et al. Are These Ads Safe: Detecting Hidden Attacks through the Mobile App-Web Interfaces. In Proceedings of the 2016 Network and Distributed System Security Symposium, NDSS '16. 2016.

[22] B. Reaves, N. Scaife, et al. Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking Applications in the Developing World. In Proceedings of the 24th USENIX Security Symposium (2015), 17–32. 2015.

[23] T. Reps, S. Horwitz, et al. Precise Interprocedural Dataflow Analysis via Graph Reachability. In Proceedings of the 22nd ACM SIGPLAN-SIGACT POPL Symposium, POPL '95, 49–61. ACM, 1995.

[24] F. Roesner & T. Kohno. Securing Embedded User Interfaces: Android and Beyond. In Proceedings of the 22nd USENIX Security Symposium, Security '13, 97–112. USENIX, 2013.

[25] M. Shehab & F. Mohsen. Towards Enhancing the Security of OAuth Implementations in Smartphones. In ICMS 2014, 39–46. IEEE, 2014.

[26] S. Shekhar, M. Dietz, et al. AdSplit: Separating Smartphone Advertising from Applications. In USENIX Security Symposium, 553–567. 2012.

[27] S. Son, D. Kim, et al. What Mobile Ads Know About Mobile Users. In NDSS. 2016.

[28] D. R. Thomas, A. R. Beresford, et al. Security Protocols XXIII: 23rd International Workshop, Cambridge, 2015, 126–138. Springer International, 2015.

[29] G. S. Tuncay, S. Demetriou, et al. Draco: A System for Uniform and Fine-grained Access Control for Web Code on Android. In Proceedings of the 2016 Conference on Computer and Communications Security, CCS '16, 104–115. ACM, New York, NY, USA, 2016.

[30] R. Vallée-Rai, P. Co, et al. Soot - a Java Bytecode Optimization Framework. In Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research, CASCON '99. IBM Press, 1999.

[31] R. Wang, L. Xing, et al. Unauthorized Origin Crossing on Mobile Platforms: Threats and Mitigation. In Proceedings of the 2013 ACM SIGSAC conference on Computer & Communications Security, 635–646. ACM, 2013.

[32] L. Xing, X. Bai, et al. Cracking App Isolation on Apple: Unauthorized Cross-App Resource Access on MAC OS. In Proceedings of the 2016 Conference on Computer and Communications Security, 31–43. ACM, 2015.

[33] X. Zhang, A. Ahlawat, et al. AFrame: Isolating Advertisements from Mobile Applications in Android. In Proceedings of the 2013 Annual Computer Security Applications Conference, ACSAC '13, 9–18. ACM, 2013.

### Appendix

#### A. App Rewriting
A key goal of our work is to ensure backwards compatibility with existing apps without modifying the operating system. In this section, we discuss the details of how we achieve this goal through app rewriting.

The security policies discussed in Section 4 only take effect if WIREframe is used by a web-embedding app in place of its regular WebViews. While benign developers might choose to deploy our mechanisms, malicious developers have no incentive to do so. Our offline rewriting tool, WIRE, addresses this concern by replacing all uses of WebView with the secure WIREframe proxy. This section provides details on the design and implementation of WIRE. Due to space constraints, we highlight the novel and challenging aspects of the tool.

**Packaged App Analysis:**
One of the key advantages of our approach is that it does not require assistance from developers. This means that the tool can rely solely on the packaged app (.apk file) and compiled bytecode. To handle this challenge, WIRE leverages previous work on reverse-engineering and re-compiling Dalvik bytecode. Specifically, we use the open-source Apktool to unpackage and repackage code and resources from an APK [1]. We use the Soot Java Optimization Framework [30] and Dexpler [4] to extract Dalvik bytecode to an intermediate representation and recompile the rewritten code.

WIRE is designed as a modular pipeline, with the rewriting phase decoupled from unpackaging and repackaging the app. Thus, improvements to the underlying tools can be easily integrated into our workflow.

**Identifying WebView Usage:**
Because WIREframe prevents the use of the default WebView, it is crucial for the proper operation of the client app that all legitimate WebView uses are identified and replaced. Unfortunately, this identification can be challenging. In addition to WebViews that are programmatically constructed and configured at runtime, an app can define the WebView UI and its layout using an XML manifest, which the system loads at runtime. Therefore, WIRE introspects and modifies not just the app code but also the application's resource XML files and support code.

Figure 9 presents simplified pseudocode for the rewriting algorithm. The goal of the main loop is to transform a target web-embedding app \( A \) to use the secure webview proxy instead of the default WebView class of Android. The first step of our algorithm (Line 2) is to invoke a custom extension to the standard class hierarchy analysis (CHA [7]), which we refer to as CHA'. This extension ensures that class loading from the resources (i.e., the app manifest) is also included. Once we have identified all instances and subclasses of WebView, denoted \( W \), we create a proxy \( w' \) for each \( w \in W \) (Line 4). The main rewriting loop (Lines 3-13) is concerned with substituting \( w \) with \( w' \): we identify the set \( U_w \) of all uses of \( w \in W \) (Line 5) using a standard dataflow [14] over the supergraph of \( A \) [23]. Note that we use the term "use" to refer to all operations that reference \( w \), as opposed to the typical use/def relations, which usually only refer to the right-hand side of an operation.

For notational convenience, we represent each such use in the form \( c(w, v_1, v_2, \ldots, v_n) \) where \( v_1, \ldots, v_n \) are additional variables involved in the use, such as arguments to methods of \( w \). These additional variables are exactly the ones that need to be shadowed or serialized (cf. Section 4). Thus, we replace the reference to \( w \) itself with a reference to \( w' \) using the pseudofunction `replace` (Line 7) and keep an object \( su_w \) to shadow each \( v_i \) (Lines 9-10). Finally, after all the WebViews have been replaced, we call the `marshal` pseudofunction with each shadow object to inject the marshaling code necessary to transfer the used value shadowed by \( su_w \) into the proxy (Lines 11-12).

**Satisfying Lifecycle Constraints:**
Android apps execute in an event-driven lifecycle managed by the system. Events are fired by the Operating System in response to events or system notifications. An implicit ordering exists between the lifecycle events: one event cannot happen until the component's lifecycle has gone through preceding events. Without considering component lifecycle and the implicit constraints, app rewriting can cause erroneous or interrupted app execution. Thus, WIRE includes a model of the Android lifecycle, which is referenced during the calls to `inject` and `marshal` so that WIREframe is properly running and bound before each invocation.

#### B. Future Work
In this section, we discuss the limitations of our current implementation and consider future work to address them.

**App Updates:**
A consequence of using offline rewriting to induce enforcement mechanisms on apps is that apps can no longer be automatically updated on the device. This is an inconvenience for users who enable automatic updates, as they have to re-apply the WIRE rewriting. However, this inconvenience can be justified by the enhanced security of web-embedding apps without requiring OS changes. Furthermore, we expect that WIRE will mostly be applied to legacy apps (which are updated less frequently) and untrusted apps that benefit from additional static checking before install time in any case. Apps that do not include WebViews or adopt WIREframe during development do not need to be rewritten. In cases where app markets can adopt WIRE and perform app rewriting before app release, such as in an enterprise app store, app users can enjoy the security benefits of WIREframe without facing app update inconvenience.

**WebView State Sharing:**
As shown by the attack in §2, allowing multiple WebViews to run in the same process enables implicit sharing of states, such as history and cookies. WIREframe runs each mediated WebView in a separate process to disable cross-WebView attacks. It also restricts each WebView's file system access to a per-origin private path by default. However, sharing states among WebView instances created by the same app may be required for legitimate functionalities. While we did not encounter any such cases in our experiments, WIREframe could be extended to allow multiple WebViews to share a process. We leave this implementation detail, and the design of when to allow sharing, to future work.

**OS-level Extension of WebView:**
While one of the key contributions of our work is that it provides support for apps without updating the OS, this approach comes with several trade-offs: the WIREframe service is isolated but comes with the overhead of running a background service full-time, as well as incurring the cost of object shadowing to communicate with the client app. A natural alternative to our approach is to modify the OS directly to implement our proposed protections.

An obvious way to protect web-embedding app attacks is to extend the WebView class in the Android framework to support a "trusted mode." Either an embedding app or embedded web content may switch a WebView instance into the trusted mode by calling newly introduced Java or JavaScript APIs. When in this mode, the web-embedding app runs the WebView, but the OS can suppress the app's introspection capabilities and dynamically regulate method invocations from embedded web content. In the Android security model, processes are the atomic security principal [12]. Therefore, this approach is likely to require major changes to the security model of the OS, or at least rendering the trusted WebView in a separate process. Nevertheless, there are several benefits to this approach:

- **Performance Improvements:** By implementing WebView isolation within the app, fewer context switches and less data marshalling are required.
- **Mandatory Enforcement:** Our system is only effective if users apply the app rewriting tool WIRE or developers explicitly target WIREframe. By integrating WIREframe-like protections into the OS itself, web developers can be more confident that WebView policies are actually enforced on the client side.
- **Enhanced Functionality:** As noted in Section 7, some visual differences may occur if the app attempts to "pop under" content on the WebView. While disallowing this behavior can help defend against clickjacking, it prevents a benign app overlay of app content over web content. The OS might support an app-defined Z-order of elements within an app, such as proposed in [24]. Furthermore, the VPNService used by WIREframe, which exists to prevent an app from spoofing the WIREframe service, could use in-app anti-spoofing methods. We plan to explore this avenue in future work.