# Reduction in the Total Number of Edges in the Peering Graph After Pruning

**Figure 7:**
- **Y-Axis:** Reduction in the total number of edges (0% to 100%)
- **X-Axis:** Number of nodes (0 to 1000)
- **Algorithms:** Algorithm 1, Algorithm 2

## 4.3.2 Evaluation

We evaluate the pruning strategy by measuring the percentage of edges pruned from a fully connected graph among \( N \) overlay nodes. Our evaluation process involves the following steps:

1. **Peering Graph Construction:**
   - Combine BGP tables from RouteViews [6] and BGP feeds at six PlanetLab locations.
   - Construct a peering graph with 15,396 ASes and 69,496 peering edges.
   - Assume BGP paths are the shortest (symmetric) paths for simplicity, acknowledging that this does not precisely reflect reality due to BGP's administrative policies [25].

2. **Node Sampling:**
   - Select a sample of 1,000 potential overlay nodes, each residing in a distinct AS.
   - Ensure the degree distribution of these sample nodes is roughly the same as the entire set, though it is unclear if this condition alone ensures topological representativeness.

3. **Incremental Node Addition:**
   - Generate a sequence of these sample nodes.
   - In each round of the algorithm, add one additional node from the sequence to the overlay network, incrementing the number of overlay nodes \( N \).
   - This allows us to evaluate mesh sparseness as a function of the size of the overlay network.

### Mesh-Building Algorithms

We evaluate two mesh-building algorithms:
- **Algorithm 1:** Virtualizes edges \((u, v)\) for which there exists an intermediate overlay node \( w \) (as shown in Figure 6(a)).
- **Algorithm 2:** Virtualizes these edges and further reduces mesh sparsity by virtualizing edges \((u, v)\) that resemble Figure 6(b).

### Results

**Figure 7** shows the reduction in the total number of edges from the fully connected graph for the two algorithms using a random sequence of sample nodes. 

- **Algorithm 1:** Reduces the number of edges by 70% for a large number of nodes, resulting in a mesh with only 30% of the edges in the fully connected graph. The virtualized paths contain only 2 node-hops on average, and the number of AS-hops is always the same as the original path.
- **Algorithm 2:** Achieves over 90% reduction but at the cost of longer virtualized paths. On average, the virtualized paths produced by Algorithm 2 (with \( N = 1000 \)) contain 20 node-hops and ten times as many AS-hops as the original BGP path. The maximum number of node-hops and AS-hops along a virtualized path is anomalously high.

The plots vary depending on the sequence of nodes used, although we consistently use the same set of 1,000 sample nodes. For instance, sorting nodes by ascending degree causes the curves to rise sharply and saturate with a small number of nodes, while sorting by descending degree delays the curve's ascent until a large number of nodes are added.

### Discussion

This preliminary result suggests that a physically representative mesh can assist overlays like RON in scaling by reducing topologically redundant probing. We are currently investigating other mesh-building strategies and additional metrics for evaluating them.

## 5. Discussion

Based on our experience, we make three observations about how Internet routing (and BGP in particular) might be changed to better support overlays:

1. **Exporting Routing Tables:**
   - BGP speakers need to export their routing tables to overlay networks. Without this coarse-grain connectivity information, bootstrapping the routing underlay is problematic.

2. **Modeling Transit ASes:**
   - While ASes corresponding to end-sites are easy to model, transit ASes are too diverse to be accurately modeled as a single vertex/hop, forcing us to use latency probes rather than depend on AS hop counts. The underlay would benefit from more explicit information about how peers cluster at POPs and the internal structure of long-haul ISPs.

3. **Dynamic Capabilities in BGP:**
   - Our approach argues against pushing dynamic capabilities into BGP [7, 8, 3, 4, 5]. BGP should continue to provide only connectivity information, with dynamic functionality moved to higher layers of the routing underlay. This allows for cleaner value-added routing services and avoids route instability problems. We prototyped our topology probes in Zebra [2], an open-source BGP implementation, meaning primitives like GetPath can be viewed as extensions to BGP.

### Cost-Benefit Analysis

Our strategy for building a routing underlay is based on the observation that the accuracy of a routing mechanism comes at some cost. A more careful cost-benefit analysis is needed. On the cost side, one could evaluate an overlay routing mechanism in terms of the number of probes it performs, reported as the product of the scope of its probes and the frequency of those probes. The benefit side is more difficult to quantify, as it involves comparing the selected route for each packet to the optimal route chosen by a global oracle. When evaluating routing mechanisms, we typically assume one mechanism represents the desired behavior and aim to lower the cost without losing too much fidelity.

### Other Proposals

Several primitives to support routing in overlay networks have been proposed. For example, Jannotti [16] defines router primitives—path reflection and path painting—that replicate multicast packets and create an overlay topology resembling the underlying network. Jannotti’s approach focuses on local improvements, while ours provides a more global picture of underlying connectivity. Another example, the Internet Indirection Infrastructure (i3) [31], proposes indirection as a more flexible communication abstraction than traditional IP forwarding. i3 benefits from a topology discovery service, and our underlay architecture is designed to enable cost-effective topology discovery. We believe i3 and our underlay could complement each other as an infrastructure for building routing overlays.

## 6. Conclusions

The main thesis of this paper is that allowing overlay networks to independently probe the Internet for informed application-specific routing decisions is not sustainable. Instead, we propose a shared routing underlay that overlay networks query. Although the exact form of this underlay is not yet well-understood, it must adhere to two high-level principles:
1. It must take cost (in terms of the number of network probes) into account.
2. The underlay will likely be multi-layered, with lower layers exposing coarse-grain static information at large-scale, and upper layers performing more frequent probes over an increasingly narrow set of nodes.

We propose a set of primitive operations and an example library of routing services. Preliminary evaluation suggests that a library of low-cost services is feasible, and we are currently deploying these services on PlanetLab. Given ISP and hosting site pressure on PlanetLab to limit the number of traceroutes and pings each node performs, it is likely that we will need to restrict overlay services to using such a shared facility in the near future.

## Acknowledgments

We thank the anonymous reviewers and Jon Crowcroft, our shepherd, for helping us improve the clarity and focus of the paper. This work was supported in part by NSF grant ANI-9906704, DARPA contract F30602-00-2-0561, and Intel Corporation.

## References

[1] Fixed Orbit. http://www.fixedorbit.com/.
[2] GNU Zebra. http://www.zebra.org/.
[3] netVmg. http://www.netVmg.com.
[4] Opnix. http://www.opnix.com.
[5] Proficient Networks. http://www.proficientnetworks.com.
[6] Route Views Project. http://antc.uoregon.edu/route-views/.
[7] RouteScience. http://www.routescience.com.
[8] Sockeye Networks. http://www.sockeye.com.
[9] D. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. Morris. Resilient Overlay Networks. In Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP), pages 131–145, October 2001.
[10] M. Balazinska, H. Balakrishnan, and D. Karger. INS/Twine: A Scalable Peer-to-Peer Architecture for Intentional Resource Discovery. In Proceedings of International Conference on Pervasive Computing, August 2002.
[11] Y.-H. Chu, S. G. Rao, S. Seshan, and H. Zhang. Enabling Conferencing Applications on the Internet using an Overlay Multicast Architecture. In Proceedings of the ACM SIGCOMM Conference, pages 1–12, August 2001.
[12] Y.-H. Chu, S. G. Rao, and H. Zhang. A Case For End System Multicast. In Proceedings of the ACM SIGCOMM Conference, pages 1–12, June 2000.
[13] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and I. Stoica. Wide-area cooperative storage with CFS. In Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP), October 2001.
[14] P. Druschel, M. Castro, A.-M. Kermarrec, and A. Rowstron. Scribe: A large-scale and decentralized application-level multicast infrastructure. IEEE Journal on Selected Areas in Communications, 20, 2002.
[15] L. Gao. On Inferring Autonomous System Relationships in the Internet. In Proceedings of IEEE Global Internet Symposium, November 2000.
[16] J. Jannotti. Network Layer Support for Overlay Networks. In Proceedings of the 5th International Conference on Open Architectures and Network Programming (OPENARCH), June 2002.
[17] T. Kernen. Traceroute.org. http://www.traceroute.org.
[18] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao. OceanStore: An Architecture for Global-Scale Persistent Storage. In Proceedings of the Ninth international Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2000), Nov. 2000.
[19] R. Mahajan, N. Spring, D. Wetherall, and T. Anderson. Inferring Link Weights Using End-to-end Measurements. In Proceedings of the Internet Measurement Workshop, pages 231–236, Marseille, France, November 2002.
[20] P. R. McManus. A Passive System for Server Selection within Mirrored Resource Environments Using AS Path Length Heuristics, June 1999. AppliedTheory Communications, Inc.
[21] National Research Council. Looking Over the Fence at Networks. National Academy Press, Washington D.C., 2001.
[22] L. Peterson, T. Anderson, D. Culler, and T. Roscoe. A Blueprint for Introducing Disruptive Technology into the Internet. In Proceedings of the HotNets-I, 2002.
[23] L. Qiu, R. Y. Yang, Y. Zhang, and S. Shenker. On Selfish Routing in Internet-Like Environments. In Proceedings of the ACM SIGCOMM Conference, August 2003.
[24] S. Ratnasamy, M. Handley, R. Karp, and S. Shenker. Topologically-Aware Overlay Construction and Server Selection. In Proceedings of the IEEE INFOCOM Conference, New York, NY, June 2002.
[25] Y. Rekhter and T. Li. A Border Gateway Protocol 4, March 1995. RFC 1771.
[26] A. Rowstron and P. Druschel. Pastry: Scalable, distributed object location and routing for large-scale peer-to-peer systems. In Proceedings of the 18th IFIP/ACM International Conference on Distributed Systems Platforms (Middleware 2001), Heidelberg, Germany, November 2001.
[27] A. Rowstron and P. Druschel. Storage Management and Caching in PAST, A Large-Scale Persistent Peer-to-Peer Storage Utility. In Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP), pages 188–201, October 2001.
[28] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson. The End-to-end Effects of Internet Path Selection. In Proceedings of the ACM SIGCOMM Conference, Cambridge, MA, September 1999.
[29] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP Topologies with Rocketfuel. In Proceedings of the ACM SIGCOMM Conference, pages 133–145, August 2002.
[30] N. Spring, D. Wetherall, and T. Anderson. Scriptroute: A facility for distributed internet measurement. In Proceedings of the 4th USITS Symposium, Seattle, WA, March 2003.
[31] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana. Internet Indirection Infrastructure. In Proceedings of the ACM SIGCOMM Conference, pages 73–85, August 2002.
[32] I. Stoica, R. Morris, D. Karger, F. Kaashoek, and H. Balakrishnan. Chord: A Peer-to-Peer Lookup Service for Internet Applications. In Proceedings of the ACM SIGCOMM Conference, San Diego, CA, September 2001.
[33] L. Subramanian, I. Stoica, H. Balakrishnan, and R. Katz. OverQoS: Offering Internet QoS Using Overlays. In Proceedings of HotNets-I, October 2002.
[34] L. Wang, V. Pai, and L. Peterson. The Effectiveness of Request Redirection on CDN Robustness. In Proceedings of the 5th Symposium on Operating System Design and Implementation (OSDI), Boston, MA, December 2002.