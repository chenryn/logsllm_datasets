## IMPORTANT: DevOps Kit (AzSK) is being sunset by the end of FY21. For more details, please refer to [this link](../../../ReleaseNotes/AzSKSunsetNotice.md).

----------------------------------------------
### Kubernetes Service

#### Description & Rationale
- **Cluster RBAC must be enabled in Kubernetes Service**  
  Enabling Role-Based Access Control (RBAC) in a cluster allows for fine-grained control over access to various operations at the cluster, node, pod, and namespace levels for different stakeholders. Without RBAC, every user has full access to the cluster, which violates the principle of least privilege. Note that Azure Kubernetes Service (AKS) currently does not support other authorization mechanisms such as Attribute-based Access Control (ABAC) or Node authorization.
  - **Control Severity**: High
  - **Automated**: Yes

- **AAD should be enabled in Kubernetes Service**  
  Using Azure Active Directory (AAD) for authentication ensures a high level of assurance in user identity, which is crucial for subsequent access control. All enterprise subscriptions are automatically associated with their enterprise directory (e.g., `xxx.onmicrosoft.com`), and users in the native directory are trusted for authentication.
  - **Control Severity**: High
  - **Automated**: Yes

- **All users/identities must be granted minimum required permissions using RBAC**  
  Granting the minimum necessary access through RBAC ensures that users have just enough permissions to perform their tasks, minimizing the risk of resource exposure in case of a user or service account compromise.
  - **Control Severity**: Medium
  - **Automated**: Yes

- **Do not directly or indirectly grant cluster admin level access to developers**  
  Cluster administrators have full privileges to perform critical operations on the Kubernetes cluster. Granting only the minimum required access ensures that developers have just enough permissions to perform their tasks, reducing the risk of accidental or malicious actions.
  - **Control Severity**: High
  - **Automated**: No

- **The latest version of Kubernetes should be used**  
  Running on older versions of Kubernetes can mean you are not using the latest security features. This can make your application vulnerable to known security issues.
  - **Control Severity**: Medium
  - **Automated**: Yes

- **Ensure container images (including nested images) deployed in Kubernetes are from a trustworthy source**  
  Deploying untrusted container images (or untrusted nested images) in a Kubernetes Service can compromise the integrity of the infrastructure and lead to various security attacks.
  - **Control Severity**: High
  - **Automated**: No

- **Do not use the default cluster namespace to deploy applications**  
  Resources and applications in the same namespace share the same access control (RBAC) policies. Users are granted permissions on the default namespace if no other namespace is provided in role bindings. Therefore, the permissions in the default namespace might not be appropriate for sensitive workloads. It is better to create a separate namespace.
  - **Control Severity**: Medium
  - **Automated**: No

- **All Kubernetes Service secrets should be stored in Key Vault**  
  Storing secrets such as database connection strings, passwords, and keys in clear text can lead to easy compromise during an application's lifecycle. Storing them in a key vault ensures they are protected at rest.
  - **Control Severity**: Medium
  - **Automated**: No

- **All Kubernetes cluster nodes must have all required OS patches installed**  
  Unpatched cluster nodes (VMs) are easy targets for malware and trojan attacks that exploit known vulnerabilities in operating systems and related software.
  - **Control Severity**: Medium
  - **Automated**: No

- **Pod Identity must be used for accessing other AAD-protected resources from the Kubernetes Service**  
  Pod Identity allows your Kubernetes Service to easily access other AAD-protected resources, such as Azure Key Vault, without the need to provision, manage, or rotate any secrets, thus reducing the overall risk.
  - **Control Severity**: Medium
  - **Automated**: No

- **Issues/recommendations provided by kube advisor should be reviewed periodically**  
  The `kube-advisor` tool scans Kubernetes clusters and reports on issues related to CPU and memory resource consumption limits. If resource quotas are not applied, pods may consume all available CPU and memory, impacting the availability of other pods or applications.
  - **Control Severity**: Medium
  - **Automated**: No

- **Monitoring must be enabled for Azure Kubernetes Service**  
  Auditing enables the collection of logs for important system events related to security. Regular monitoring of audit logs can help detect suspicious and malicious activity early and respond in a timely manner.
  - **Control Severity**: Medium
  - **Automated**: Yes

- **Do not leave management ports open on Kubernetes nodes unless required**  
  Open remote management ports expose VMs/compute nodes to a high level of risk from internet-based attacks, such as brute force attempts to gain administrative access.
  - **Control Severity**: Medium
  - **Automated**: Yes

- **Data transit inside/across Kubernetes must use encrypted channels**  
  Using HTTPS ensures server/service authentication and protects data in transit from man-in-the-middle, eavesdropping, and session-hijacking attacks.
  - **Control Severity**: High
  - **Automated**: No

- **Diagnostics logs must be enabled with a retention period of at least 365 days**  
  Logs should be retained for a sufficient period to allow for the recreation of activity trails during investigations of incidents or compromises. A retention period of one year is typical for many compliance requirements.
  - **Control Severity**: Medium
  - **Automated**: Yes