### System Information Protection and Adversary Prevention

Application logs have been the subject of extensive research in recent years. For instance, Ghoshal et al. [27] developed a rule specification to generate structured provenance events by processing application logs. However, their approach focuses solely on application logs without considering system logs or log fusion, and the experiments were limited to five simple applications. In contrast, Chen et al. [20] designed a provenance system that uses a graph recorder to extract provenance for applications written in a specific declarative language or instrumented in source code. ALchemist, however, does not require any specific language or instrumentation.

### Conclusion

We propose ALchemist, a novel forensics technique that leverages the complementary nature of built-in application logs and audit logs. These logs share many common elements, which can be utilized for log fusion. We have developed a set of parsers to convert various types of logs into their canonical representations. Datalog-based fusion rules are then applied to bind these logs and derive new information that is not visible in either type of log individually. Our evaluation shows that ALchemist is highly effective in partitioning execution into units and producing precise attack provenance graphs without requiring any instrumentation. It also outperforms state-of-the-art techniques, both with and without instrumentation.

### Acknowledgment

We thank our shepherd, Daphne Yao, and the anonymous reviewers for their valuable comments and suggestions. This research was supported, in part, by NSF grants 1901242 and 1910300, ONR grants N000141712045, N000141410468, and N000141712947, and Sandia Lab MOD1-18046142. The opinions, findings, and conclusions presented in this paper are those of the authors and do not necessarily reflect the views of our sponsors.

### References

[1] "50 essential linux applications," https://tinyurl.com/wcj5og2.
[2] "Alchemist2020/workload," https://github.com/ALchemist2020/Workload.
[3] "Apache HTTP Server Benchmarking Tool," https://tinyurl.com/onkcat3.
[4] "APT Groups," https://tinyurl.com/y2tqt74o.
[5] "Clickjacking," https://tinyurl.com/62thhvp.
[6] "DARPA-I2O/Transparent-Computing: DARPA Transparent Computing Program," https://github.com/darpa-i2o/Transparent-Computing.
...
[79] J. Zhu, S. He, J. Liu, P. He, Q. Xie, Z. Zheng, and M. R. Lyu, "Tools and benchmarks for automated log parsing," in 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP), 2019, pp. 121â€“130.
[80] N. Zhu and T.-c. Chiueh, "Design, implementation, and evaluation of repairable file service," in 2003 International Conference on Dependable Systems and Networks (DSN), 2003, p. 217.

### Appendix

#### A. Stability Study of Application Built-in Logging Modules

We conducted a study on the stability of application built-in logging modules. The results are summarized in Table IX. Column 1 lists the names of the logging facilities, noting that the same facility may be used by multiple applications. Column 2 lists the applications. Column 3 indicates the number of regular expressions we implemented to parse the logs. Columns 4-5 show the two versions of the applications whose built-in logs were compared. Column 6 highlights the new log types added in the newer version, and Column 7 shows the number of regular expressions that had to be changed due to format changes. Most logging modules are fairly stable, even for Firefox, which has undergone major code changes, the logging module has only minor modifications.

#### B. Study of Top 30 Linux Application Built-in Logging

We analyzed 32 Linux applications, including the 30 most popular applications listed in [1] and 15 complex applications widely used in APT attack literature. Our goal was to examine their execution models and determine if they have built-in logging modules and if their logs contain information to reveal the underlying execution model, especially implicit and explicit unit boundaries, which are critical for execution partitioning. Implicit boundaries refer to those that can be inferred through log fusion. Column 1 lists the applications. Column 2 indicates whether the application has a built-in logging facility. Column 3 describes the execution unit structure of the application. Column 4 shows if the application log contains information to separate different units. Column 5 specifies the execution model (discussed in Section III) used by the application. From the table, 28 out of 32 applications have...