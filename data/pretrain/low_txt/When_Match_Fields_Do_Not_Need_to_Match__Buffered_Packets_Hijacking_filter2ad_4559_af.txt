### Vulnerabilities and Attacks in SDN

While existing methods can identify certain vulnerabilities, they do not detect the buffered packet hijacking vulnerability. This is due to their reliance on fuzzing techniques, which are inherently limited.

In Software-Defined Networking (SDN), several attacks have been identified, including:
- **Topology Poisoning** [2]
- **Identifier Binding** [49]
- **Flow Table Saturation** [23]
- **Control Channel Disruption** [50]
- **PACKET_IN Flooding** [27]

Researchers have proposed countermeasures for these attacks [2, 49, 23, 50]. Our focus is on defense systems against PACKET_IN flooding, such as FloodGuard [27], FloodDefender [21], AVANT-GUARD [29], and LineSwitch [28]. As detailed in Section IV, our attack can evade these defense systems by triggering PACKET_IN flooding with benign flows through the hijacking of buffered packets, rather than using malicious flows.

### Conclusion

In this paper, we introduce a new vulnerability called "buffered packet hijacking," which is inherent in the rule installation process for new flows in SDN. By exploiting this vulnerability, we have discovered several attacks that can significantly disrupt different layers of SDN and evade existing defense mechanisms. We developed a model and conducted a theoretical analysis to determine the probability of successfully hijacking a buffered packet. The feasibility and effectiveness of these attacks were evaluated in a real SDN testbed. Finally, we developed a lightweight and application-transparent countermeasure that can be easily deployed as a patch in SDN controllers.

### Acknowledgment

We thank the anonymous reviewers for their constructive comments. This work is partially supported by:
- National Natural Science Foundation of China (Grants 61625203, 61832013, 61572278, U1736209)
- National Key R&D Program of China (Grant 2017YFB0801701)
- US ONR grants (N00014-16-1-3214, N00014-18-2893)
- US ARO grant (W911NF-17-1-0447)
- US National Science Foundation (No. 1617985, No. 1642129, No. 1700544, No. 1740791)

Mingwei Xu and Qi Li are the corresponding authors.

### References

[1] B. E. Ujcich et al., “Cross-app poisoning in software-defined networking,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 648–663.

[2] S. Hong et al., “Poisoning network visibility in software-defined networks: New attacks and countermeasures.” in NDSS, vol. 15, 2015, pp. 8–11.

[3] “Floodlight Load Balancer,” https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/loadbalancer, 2014, [Online].

[4] S. Jain et al., “B4: Experience with a globally-deployed software defined WAN,” in ACM SIGCOMM Computer Communication Review, vol. 43, no. 4. ACM, 2013, pp. 3–14.

[5] H. Wang et al., “Towards fine-grained network security forensics and diagnosis in the SDN era,” in Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2018, pp. 3–16.

[6] “Hewlett-Packard Enterprise: HPE SDN app store,” https://community.arubanetworks.com/t5/SDN-Apps/ct-p/SDN-Apps, 2018, [Online].

[7] X. Wen et al., “SDNShield: Reconciliating configurable application permissions for SDN app markets,” in 2016 46th annual IEEE/IFIP international conference on dependable systems and networks (DSN). IEEE, 2016, pp. 121–132.

[8] M. C. Dacier et al., “Security challenges and opportunities of software-defined networking,” IEEE Security & Privacy, vol. 15, no. 2, pp. 96–100, 2017.

[9] P. Porras et al., “A security enforcement kernel for OpenFlow networks,” in Proceedings of the first workshop on Hot topics in software defined networks. ACM, 2012, pp. 121–126.

[10] P. A. Porras et al., “Securing the software defined network control layer.” in NDSS, 2015.

[11] S. Lee et al., “The smaller, the shrewder: A simple malicious application can kill an entire SDN environment,” in ACM SDN-NFV Security, 2016, pp. 23–28.

[12] C. Yoon et al., “A security-mode for carrier-grade SDN controllers,” in Proceedings of the 33rd Annual Computer Security Applications Conference. ACM, 2017, pp. 461–473.

[13] H. Padekar et al., “Enabling dynamic access control for controller applications in software-defined networks,” in Proceedings of the 21st ACM on Symposium on Access Control Models and Technologies. ACM, 2016, pp. 51–61.

[14] Y. Tseng et al., “Controller DAC: Securing SDN controller with dynamic access control,” in 2017 IEEE International Conference on Communications (ICC). IEEE, 2017, pp. 1–6.

[15] A. Khurshid et al., “VeriFlow: Verifying network-wide invariants in real time,” in Presented as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13), 2013, pp. 15–27.

[16] S. Shin et al., “Rosemary: A robust, secure, and high-performance network operating system,” in Proceedings of the 2014 ACM SIGSAC conference on computer and communications security. ACM, 2014, pp. 78–89.

[17] “Floodlight SDN Controller,” http://www.projectfloodlight.org/, [Online].

[18] C. Yoon and S. Lee, “Attacking SDN infrastructure: Are we ready for the next-gen networking?” in BlackHat-USA, 2016.

[19] J. Hizver, “Taxonomic modeling of security threats in software defined networking,” in BlackHat Conference, 2015, pp. 1–16.

[20] “ONOS - A new carrier-grade SDN network operating system designed for high availability, performance, and scale-out,” https://onosproject.org/, [Online].

[21] G. Shang et al., “Flooddefender: Protecting data and control plane resources under SDN-aimed DoS attacks,” in IEEE INFOCOM 2017-IEEE Conference on Computer Communications. IEEE, 2017, pp. 1–9.

[22] “OpenFlow Specification v1.5.1,” https://www.opennetworking.org/wp-content/uploads/2014/10/openflow-switch-v1.5.1.pdf, 2015, [Online].

[23] J. Cao et al., “Disrupting SDN via the data plane: A low-rate flow table overflow attack,” in Proceedings of International Conference on Security and Privacy in Communication Systems. Springer, 2017, pp. 356–376.

[24] M. Alizadeh et al., “Data center TCP (DCTCP),” ACM SIGCOMM computer communication review, vol. 41, no. 4, pp. 63–74, 2011.

[25] “Latency Everywhere and It Costs You Sales: How to Crush It,” http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-to-crush-it, 2009, [Online].

[26] “FastIron Ethernet Switch Software Defined Networking: Configuration Guide,” http://noc.ucsc.edu/docs/BigCreek/fastiron-08030r-manuals/fastiron-08030-sdnguide.pdf, [Online].

[27] H. Wang et al., “Floodguard: A DoS attack prevention extension in software-defined networks,” in 2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks. IEEE, 2015, pp. 239–250.

[28] M. Ambrosin et al., “LineSwitch: Tackling control plane saturation attacks in software-defined networking,” IEEE/ACM Transactions on Networking, vol. 25, no. 2, pp. 1206–1219, 2016.

[29] S. Shin et al., “AVANT-GUARD: Scalable and vigilant switch flow management in software-defined networks,” in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 2013, pp. 413–424.

[30] “Log-logistic Distribution,” https://en.wikipedia.org/wiki/Log-logistic_distribution, [Online].

[31] “Convolution of Probability Distributions,” https://en.wikipedia.org/wiki/Convolution_of_probability_distributions, [Online].

[32] “AS4610-54T Data Center Switch,” https://www.edge-core.com/productsInfo.php?cls=1&cls2=9&cls3=46&id=21, [Online].

### Appendix A: Distribution of Processing Time

To model the processing delays of SDN applications, we collected a large number of processing delays from various SDN applications. We built a real SDN testbed consisting of commercial hardware SDN switches [32] and the Floodlight controller. We generated flows in the testbed to trigger PACKET_IN messages and measured the processing delays of eight popular SDN applications running on the controller. These applications range from basic network services and optimizations to advanced security features.

#### Probability Density Functions (PDF) of Processing Delays

- **(a) Topology Manager**
- **(b) Device Manager**
- **(c) Forwarding**
- **(d) Load Balancer**
- **(e) Scan Detection**
- **(f) ARP Proxy**
- **(g) Hub**
- **(h) Learning Switch**

The distribution of processing delays can be well modeled using the log-logistic distribution with different parameters. The PDFs of processing delays for different SDN applications are shown in Figure 18. Here, LL(α, β) denotes the log-logistic distribution with parameters α and β.

![Figure 18: PDF of processing delays of PACKET_IN messages for different SDN applications.](figure_18.png)

### Additional Resources

- **“Default Configuration File of Floodlight,”** https://github.com/floodlight/floodlight/blob/master/src/main/resources/floodlightdefault.properties, [Online].
- **“Floodlight Topology Manager,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/topology/, [Online].
- **“Floodlight Device Manager,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/devicemanager/, [Online].
- **“Floodlight Load Balancer,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/loadbalancer/, [Online].
- **“Floodlight Forwarding,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/forwarding/, [Online].
- **“Floodlight ARP Proxy,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/proxyarp/, [Online].
- **“Floodlight Hub,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/hub/, [Online].
- **“Floodlight Learning Switch,”** https://github.com/floodlight/floodlight/tree/master/src/main/java/net/floodlightcontroller/learningswitch/, [Online].

[33] J. Zheng et al., “Realtime DDoS defense using COTS SDN switches via adaptive correlation analysis,” IEEE Transactions on Information Forensics and Security, vol. 13, no. 7, pp. 1838–1853, 2018.

[34] Tcpreplay - Pcap Editing and Replaying Utilities, https://tcpreplay.appneta.com/, [Online].

[35] “CAIDA Passive Monitor: Chicago B,” http://www.caida.org/data/passive/trace_stats/chicago-B/2015/?monitor=20150219-130000.UTC, [Online].

[36] C. Röpke and T. Holz, “SDN rootkits: Subverting network operating systems of software-defined networks,” in International Symposium on Recent Advances in Intrusion Detection. Springer, 2015, pp. 339–356.

[37] C. Lee and S. Shin, “SHIELD: An automated framework for static analysis of SDN applications,” in Proceedings of the 2016 ACM International Workshop on Security in Software Defined Networks & Network Function Virtualization. ACM, 2016, pp. 29–34.

[38] S. Lee et al., “DELTA: A security assessment framework for software-defined networks.” in NDSS, 2017.

[39] B. E. Ujcich et al., “ATTAIN: An attack injection framework for software-defined networking,” in 2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). IEEE, 2017, pp. 567–578.

[40] S. Jero et al., “BEADS: Automated attack discovery in OpenFlow-based SDN systems,” in International Symposium on Research in Attacks, Intrusions, and Defenses. Springer, 2017, pp. 311–333.

[41] S. Jero et al., “Identifier binding attacks and defenses in software-defined networks,” in 26th USENIX Security Symposium (USENIX Security 17), 2017, pp. 415–432.

[42] C. Jiahao et al., “The crosspath attack: Disrupting the SDN control channel via shared links,” in 28th USENIX Security Symposium (USENIX Security 19), 2019.