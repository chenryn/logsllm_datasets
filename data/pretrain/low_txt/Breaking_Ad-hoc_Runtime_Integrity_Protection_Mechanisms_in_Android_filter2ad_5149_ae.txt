### Two-Factor Authentication and Key Management in Financial Security

Two-factor authentication (2FA) schemes, such as one-time passwords (OTPs) [46, 48] and location-based authentication [40, 45], are commonly used to enhance security. Additionally, managing a secret key for cryptographic algorithms is crucial for financial security. If a secret key is hard-coded in an app or poorly managed in memory, the strength of the cryptographic algorithm is compromised. White-box cryptography addresses this issue by embedding the secret key within the transformed cryptographic algorithm [23]. Recent security solutions for mobile financial apps have adopted white-box cryptography to protect users' private information [3, 14]. While previous research has focused on well-known security factors, our work examines the self-defense mechanisms of mobile financial apps, an area that has received little attention.

### Android App Security

Enck et al. analyzed various Android apps and discovered widespread misuse of personal information and deep penetration from advertising networks [29]. Other researchers have investigated security risks in Android's permission systems and communication systems [26, 31, 32]. Several studies have also examined SSL/TLS security in Android apps [30, 33, 44]. Egele et al. studied the misuse of cryptographic APIs, which secure data like passwords and personal information [27]. Chen et al. examined data leakage in third-party input method editor (IME) apps, which can be configured as system keyboards [25]. Tools like UIPicker [42] and SUPOR [37] use static analysis to automatically identify sensitive information entered via the user interface. Our research focuses on how mobile financial apps defend against attacks using root permissions or app tampering, and how these defenses can be bypassed, an aspect often overlooked in other studies.

### Taint Tracking and Control Flow Analysis

Taint tracking methodologies have been widely used in Android security research to trace sensitive data and analyze malware [21, 28, 38, 51]. However, taint tracking is not effective for analyzing self-defense mechanisms because it cannot simultaneously locate environment investigations and execution terminations. Commonly, the return value of an environment information provider is used in an if-else statement, preventing the propagation of taint tags. To overcome this, taint tracking systems need to support control flow propagation. According to TaintDroid research [28], developing such a mechanism for Android apps is challenging due to the lack of branch structure in Dalvik bytecode. Therefore, we opted to enhance the Android platform to trace the control flow rather than using taint tracking.

### Tool for Tracking Control Flow

Our research also contributes to the development of a tool for tracking the control flow of Android apps. Cao et al. [24] proposed EdgeMiner to detect indirect control flow transitions in static analysis. However, EdgeMiner's limitation is its inability to use runtime information. Compac [50] and the Method Trace function in Android Monitor [34] suggest modifying the Dalvik VM to record method calls but do not consider indirect control flows. MERCIDroid overcomes these limitations by tracking indirect relationships between threads and components using runtime information.

### Conclusion

In this paper, we analyzed 76 Android financial apps to investigate their self-defense mechanisms, which are additional security measures designed to protect the apps. To analyze these mechanisms, we developed MERCIDroid, an enhanced Android platform that traces control flow within and across threads and components. MERCIDroid constructs a minimal control flow graph that combines environment investigation and execution termination. Using MERCIDroid, we demonstrated the efficient location of self-defense mechanisms. Our analysis revealed that apps use various techniques to detect tampered execution environments, but these mechanisms are often ineffective due to reliance on a few characteristics of rooted platforms and tampered apps. We showed that self-defense mechanisms can be easily bypassed by rewriting small portions of app code. Thus, the self-defense mechanisms in Android financial apps are not robust. Our work underscores the need for more effective security mechanisms to ensure platform and app integrity.

### Responsible Disclosure

On October 31, 2016, we shared our results, including all technical details, with organizations overseeing software security in the Republic of Korea. To protect affected apps and libraries, we anonymized their names.

### Acknowledgment

We thank our shepherd Yubin Xia and the anonymous reviewers for their feedback. This work was supported by BK21 Plus for Pioneers in Innovative Computing (Dept. of Computer Science and Engineering, SNU) funded by the National Research Foundation of Korea (NRF) (21A20151113068).

### References

[1] android - Determine if running on a rooted device - StackOverflow. http://stackoverflow.com/questions/1101380/determine-if-running-on-a-rooted-device.
[2] Android Developers. https://developer.android.com.
[3] App security for banking & payment apps - Promon SHIELD. https://promon.co/industries/app-security-banking-payment/.
[4] Application Fundamentals | Android Developers. https://developer.android.com/guide/components/fundamentals.html.
[5] ART and Dalvik | Android Open Source Project. https://source.android.com/devices/tech/dalvik/.
[6] Checking Device Compatibility with SafetyNet | Android Developers. http://developer.android.com/intl/ko/training/safetynet/index.html.
[7] Dashboard | Android Developers. http://developer.android.com/intl/ko/about/dashboards/index.html.
[8] FRB: CM: 2016 Introduction. http://www.federalreserve.gov/econresdata/mobile-devices/2016-Introduction.htm.
[9] Graphviz | Graph Visualization Software. http://www.graphviz.org/.
[10] How secure the mobile payments are? https://storify.com/williamjohn005/how-secure-the-mobile-payments-are.
[11] IDA Debugger. https://www.hex-rays.com/.
[12] Java Decompiler. http://jd.benow.ca/.
[13] Linux Manual Page. http://man7.org/.
[14] Mobile Banking Security, Internet Banking App Security. https://www.whitecryption.com/mobile-banking/.
[15] Shrink Your Code and Resources | Android Studio. https://developer.android.com/studio/build/shrink-code.html.
[16] smali - An assembler/disassembler for Android’s dex format. https://github.com/JesusFreke/smali.
[17] Trusted Computing Group | Open Standards for Security Technology. http://www.trustedcomputinggroup.org/.
[18] U-Boot Verified Boot. http://git.denx.de/cgi-bin/gitweb.cgi?p=u-boot.git;a=blob;f=doc/uImage.FIT/verified-boot.txt.
[19] Verified Boot - The Chromium Projects. http://www.chromium.org/chromium-os/chromiumos-design-docs/verified-boot.
[20] Verified Boot | Android Open Source Project. https://source.android.com/security/verifiedboot/.
[21] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for Android apps. In ACM SIGPLAN, pages 259–269, 2014.
[22] N. Bose. Retailer-backed mobile wallet to rival Apple Pay set for test. http://www.reuters.com/article/2015/08/12/us-currentc-mobile-payment-idUSKCN0QH1RY20150812.
[23] W. Brecht. White-box cryptography: hiding keys in software. NAGRA Kudelski Group, 2012.
[24] Y. Cao, Y. Fratantonio, A. Bianchi, M. Egele, C. Kruegel, G. Vigna, and Y. Chen. EdgeMiner: Automatically Detecting Implicit Control Flow Transitions through the Android Framework. In ISOC NDSS, 2015.
[25] J. Chen, H. Chen, E. Bauman, Z. Lin, B. Zang, and H. Guan. You Shouldn’t Collect My Secrets: Thwarting Sensitive Keystroke Leakage in Mobile IME Apps. In USENIX Security, 2015.
[26] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in Android. In ACM MobiSys, pages 239–252, 2011.
[27] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An empirical study of cryptographic misuse in Android applications. In ACM CCS, pages 73–84, 2013.
[28] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones. ACM TOCS, 32(2):5, 2014.
[29] W. Enck, D. Octeau, P. McDaniel, and S. Chaudhuri. A Study of Android Application Security. In USENIX Security, volume 2, page 2, 2011.
[30] S. Fahl, M. Harbach, T. Muders, L. Baumgärtner, B. Freisleben, and M. Smith. Why Eve and Mallory love Android: An analysis of Android SSL (in) security. In ACM CCS, pages 50–61, 2012.
[31] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions demystified. In ACM CCS, pages 627–638, 2011.
[32] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission Re-Delegation: Attacks and Defenses. In USENIX Security, 2011.
[33] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The most dangerous code in the world: validating SSL certificates in non-browser software. In ACM CCS, pages 38–49, 2012.
[34] Google. Method Tracer | Android Studio. https://developer.android.com/studio/profile/am-methodtrace.html.
[35] E. Gruber. Android Root Detection Techniques. https://blog.netspi.com/android-root-detection-techniques/.
[36] A. Harris, S. Goodman, and P. Traynor. Privacy and security concerns associated with mobile money applications in Africa. Wash. JL Tech. & Arts, 8:245, 2012.
[37] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and G. Jiang. SUPOR: Precise and Scalable Sensitive User Input Detection for Android Apps. In USENIX Security, 2015.
[38] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android taint flow analysis for app sets. In ACM SIGPLAN, pages 1–6, 2014.
[39] J. Lee, L. Bauer, and M. L. Mazurek. The Effectiveness of Security Images in Internet Banking. Internet Computing, IEEE, 19(1):54–62, 2015.
[40] C. Marforio, N. Karapanos, C. Soriente, K. Kostiainen, and S. Capkun. Smartphones as practical and secure location verification tokens for payments. In ISOC NDSS, 2014.
[41] C. Mulliner, W. Robertson, and E. Kirda. VirtualSwindle: an automated attack against in-app billing on Android. In ACM ASIA CCS, pages 459–470, 2014.
[42] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang. UIPicker: User-Input Privacy Identification in Mobile Applications. In USENIX Security, 2015.
[43] M. Nauman, S. Khan, X. Zhang, and J.-P. Seifert. Beyond kernel-level integrity measurement: enabling remote attestation for the Android platform. In Trust and Trustworthy Computing, pages 1–15. Springer, 2010.
[44] L. Onwuzurike and E. De Cristofaro. Danger is my middle name: experimenting with SSL vulnerabilities in Android apps. In ACM WiSec, page 15. ACM, 2015.
[45] F. S. Park, C. Gangakhedkar, and P. Traynor. Leveraging cellular infrastructure to improve fraud prevention. In IEEE ACSAC, pages 350–359, 2009.
[46] PayPal. PayPal Security Key. https://www.paypal.com/webapps/mpp/security/security-protections.
[47] B. Reaves, N. Scaife, A. Bates, P. Traynor, and K. Butler. Mo(bile) Money, Mo(bile) Problems: Analysis of Branchless Banking Applications in the Developing World. In USENIX Security, 2015.
[48] RSA. RSA SecurID. http://www.emc.com/security/rsa-securid/index.htm.
[49] P. Stirparo, I. N. Fovino, M. Taddeo, and I. Kounelis. In-memory credentials robbery on Android phones. In IEEE WorldCIS, pages 88–93, 2013.
[50] Y. Wang, S. Hariharan, C. Zhao, J. Liu, and W. Du. Compac: Enforce component-level access control in Android. In ACM CODASPY, pages 25–36, 2014.
[51] L.-K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In USENIX Security, pages 569–584, 2012.
[52] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In IEEE Security and Privacy (Oakland), pages 95–109, 2012.

### Appendix

#### A. List of Indirect Caller–Callee Relationships

Figure 5 illustrates various types of indirect caller–callee relationships that we need to track. The first three cases represent typical call graphs showing interactions between threads. The last three cases show communications between Android components (Activity, BroadcastReceiver, Service), which are not connected by direct method calls due to mediation by the Android system.

#### B. SDMGraph Construction Process with an Example

This section describes the SDMGraph construction process in detail. To find the common ancestor, the call graph generator recursively checks the environment information providers flagged at runtime and their ancestors. It then tracks the ancestors of the execution terminator until it finds a flagged node. The first flagged ancestor node encountered is the closest common ancestor. The SDMGraph is then constructed using Graphviz [9].

Figure 6 shows an example SDMGraph of a device rooting check performed by AppZ. The app uses `ProcessManager.exec()` as an environment information provider and `AlertDialog$Builder.setMessage()` as an execution terminator. To find the common ancestor, the script checks `ProcessManager.exec()`, already flagged at runtime, and its ancestors (Figure 6(a)). It then tracks the ancestors of `AlertDialog$Builder.setMessage()` (Figure 6(b)). Finally, it constructs a graph with the root node `MainActivity$1$1.run()`, the first flagged ancestor node. By considering methods only under the common ancestor, `MainActivity$1$1.run()`, we can identify the relationship between the environment information provider and the execution terminator. As shown in the figure, the Interaction ID connects `Handler.enqueueMessage()` and `Handler.dispatchMessage()` (Figure 6(c)).

#### C. Flowcharts for Bypassing Self-Defense Mechanisms

Figures 7 and 8 show flowcharts for bypassing device rooting checks and app integrity checks. These flowcharts are based on our sample data and trial-and-error experience. We start with simpler techniques and progress to more complex ones if the initial attempts fail. In each step, we rewrite the app using the techniques described in Section 4.2. If a self-defense mechanism is successfully bypassed, the app is placed in the corresponding success group.

**Figure 7: Strategies for Bypassing Device Rooting Checks**

1. Identify whether the marked method is an Android API or a native method.
2. If it is an Android API, modify the return value or argument (R_Group_API).
3. If it is a native method, fix the return value (R_Group_Native_Predictable_Return).
4. If both fail, patch some bytes in a native library (R_Group_Native_Unpredictable_Return).

**Figure 8: Steps for Bypassing App Integrity Checks**

1. If the marked method is an Android API, first attempt to fix the caller's return value before modifying the API's argument or return value.
2. If the marked method is a native method, change its declaration to a Java method that returns a fixed value (I_Group_Predictable_Return).
3. If unable to fix the return value, modify the app's signature (I_Group_Signature) or APK file path (I_Group_APK_Path, I_Group_APK_Path_Context) to match an unmodified app's signature or APK file path.