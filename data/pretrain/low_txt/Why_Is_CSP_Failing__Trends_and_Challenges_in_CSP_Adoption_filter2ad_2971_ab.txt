### Popularity of Security Headers in the Alexa Top 10K

During our crawl at the end of March, we found that 815 sites were using Content Security Policy (CSP) in enforcement mode, while only 35 sites were in report-only mode. No sites were found to be sending both types of headers. Among the websites in enforcement mode, only 23 collected violation reports.

In the Top 10K, we observed only one site that switched from report-only mode to enforcement. The Norwegian financial services site, dnb.no, started collecting reports in June 2013 and enabled enforcement in February 2014. Their enforced default-src directive includes 74 sources, such as the schemes `chrome-extension`, `chromeinvoke`, and `chromeinvokeimmediate`. Additionally, both `unsafe-inline` and `unsafe-eval` are enabled, which significantly reduces the benefits of CSP.

### Use of CSP for Mixed Content Testing

Several websites use CSP to test for mixed content, which is the inclusion of unencrypted content into HTTPS sessions, reducing the benefits of encryption. Google’s sampling uses a report-only policy: `default-src https: data:; options eval-script inline-script; report-uri /gen 204?atyp=csp`. Similarly, Etsy and hootsuite.com tested for mixed content, but we observed no CSP headers after March 2014 for hootsuite.com.

### Types of Sites Using CSP

To better understand the types of websites that use CSP, we analyzed website titles. The largest portion of sites supporting CSP, 417, are running phpMyAdmin, a PHP-based web application used to manage MySQL databases. phpMyAdmin ships with CSP enabled by default, allowing inline scripts, `eval`, and restricting sources to 'self'. While this policy does not prevent XSS, it makes data exfiltration more difficult. However, users often encounter issues when including images and are advised to disable CSP in the configuration rather than updating the default policy.

Ironically, on the vendor's demo site, http://demo.phpmyadmin.net/master/, the operators tried to include Google Analytics. Although the Google Analytics domain is whitelisted using `default-src`, it is not included in the `script-src` source list. As specific directives override the `default-src` directive, the script is unintentionally blocked.

We also identified 170 OwnCloud instances, which use CSP by default from version 5.

### Prevalence of Unsafe Policies

We observed several patterns in CSP policies that violate deployment best practices. In Table 3, we summarize the observed rules in enforcement over the Alexa Top 1M from March 24th, splitting the data at the 10K rank to differentiate between more popular and lower-ranking sites. The symbol ‘*’ represents either the literal asterisk or the entire HTTP(S) scheme being whitelisted in one or more source lists.

On the majority of sites, `eval` and `inline` are enabled: eight out of 13 and 11 out of 13 in the Top 10K bracket, 700 out of 802 and 728 out of 802 in the remaining 990,000 sites. This configuration significantly reduces the benefits of CSP for XSS mitigation. Configuring an asterisk or a whole scheme as a source in a directive enables data leakage to any host. Six out of 13 and 230 out of 802 websites served such directives. Ten out of 13 sites in the Top 10K bracket had no `report-uri` to collect violation reports, which is surprising given that CSP could be used as a warning system.

While CSP can theoretically effectively mitigate XSS and data exfiltration, in practice, it is not deployed in a way that provides these benefits.

### Conclusions

Although some sites use CSP as an additional layer of protection against content injection, CSP is not yet widely adopted. The majority of CSP-enabled websites are installations of phpMyAdmin, which ships with a weak default policy. Other recent security headers have gained more traction, likely due to their relative ease of deployment. The fact that only one site in the Alexa Top 10K switched from report-only mode to enforcement during our measurement suggests that CSP rules cannot be easily derived from collected reports. Automated or semi-automated policy generation could potentially help adoption.

### CSP Violation Reports

Web browsers compatible with CSP can be configured to report back to the website whenever an activity, whether carried out or blocked, violates the site’s policy. This serves as a debugging mechanism for web operators to develop and update policies. Starting with a "deny all" policy in report-only mode, operators can collect information about resources that need to be whitelisted for the site to function, compile a corresponding policy, and eventually switch to enforcement mode. We applied this approach to four websites and analyzed the reports received, gaining insights into the web ecosystem.

### Methodology

We deployed CSP on four of our own websites: two personal pages, an institutional page, and a popular analysis service. The policies specified empty resource lists for all supported directive types, meaning any browser activity covered by CSP was explicitly forbidden and should generate a report. We deployed the policies in report-only mode to avoid interfering with normal site operation.

During our analysis, we observed that the formats of reports sent by different browser versions varied slightly. Older Firefox versions explicitly stated when a violation was due to `unsafe-inline` or `unsafe-eval` for script and style directives, while recent versions reported only an empty `blocked-uri`. To distinguish between `unsafe-inline` and `unsafe-eval` script violations, we added two more policies that caused reports only for `eval` and `inline` violations, respectively.

We removed duplicate `eval` and `inline` violations and some false-positive reports triggered by a bug in older Firefox versions. Table 4 shows the number of reports retained in the filtered dataset, which forms the basis for the following discussion.

From each report, we derived a policy entry that whitelists the respective violation. We extracted the type, such as `img-src`, from the `violated-directive`. For regular violations, we appended the scheme, host name, and port from the `blocked-uri`. For `inline` or `eval` violations, we appended `unsafe-inline` or `unsafe-eval`. We generated a single policy per site by combining all entries and setting `default-src 'none'` to block everything else.

Our approach is to generate a single, site-wide policy that is general enough to cover the entire protected site. Such a policy is easier to generate and configure, as a site-wide reverse proxy could insert a static policy into HTTP responses without changing application code.

### Results

Table 5 summarizes the policies generated for each of our sites. We manually verified each entry and found that many of the whitelisted resources were not intended to be included in the websites. For example, the policy generated for site A included numerous unnecessary entries. The correct policy would have been much simpler, with only 21% of the policy entries being legitimate. On site D, only 2% of the policy entries were legitimate. When disregarding details like alternative domain names and HTTP/HTTPS loading, the percentage of legitimate policy entries dropped to only 0.8% on site D.

### Reasons for Invalid Policy Entries

We identified several reasons why web browsers sent CSP violation reports for resources not present in the original websites. Many reports appeared to be caused by browser extensions that modified the DOM by injecting additional resources. These findings highlight the challenges in generating effective CSP policies and the need for better tools and practices to support CSP adoption.