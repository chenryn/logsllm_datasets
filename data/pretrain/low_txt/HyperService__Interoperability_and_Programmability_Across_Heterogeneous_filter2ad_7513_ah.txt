### Introduction to the Hybrid Construction

In this section, we introduce a series of hybrid constructions to prove that the real-world protocol `ProtUIP` UC-emulates the ideal functionality `IFUIP`. Each hybrid argument is a combination of `FUIP`, a subset of dummy parties from `IFUIP`, and a subset of real-world parties from `ProtUIP`. The first hybrid argument is `ProtUIP` without any ideal parties, and the last hybrid argument is `IFUIP` without any real-world parties. We will show that an environment `E` cannot distinguish between any two consecutive hybrid arguments. Based on the transitivity of protocol emulation [28], we will then prove that `ProtUIP` UC-emulates `IFUIP`.

### Real World: ProtUIP with Dummy Adversary

We start with the real-world execution of `ProtUIP` where the adversary `E` is replaced by a dummy adversary that simply forwards messages to and from `E`.

### Hybrid A1: Replacing (PVES, PCLI) with (PI, PI)

**Hybrid A1** is identical to the real world, except that the pair `(PVES, PCLI)` is replaced by a dummy pair `(PI, PI)`. When `E` instructs the dummy parties to execute some dApp executable `CLI_GT`, the simulator `S` calls the `CreateContract` interface of `PISC` (which resides in `Hybrid A1`) to obtain the contract code. Once the contract is received, `S` calls the `SessionCreate` interface of `FUIP` with parameters `(GT, contract, PI)`, which outputs a certificate to both dummy parties, emulating the handshake result between `PVES` and `PCLI` in the real world. `S` also deploys the contract on `PNSB` or `PBC` in `Hybrid A1` and stakes the required funds into `FUIP` to unblock its execution.

When `E` instructs the dummy parties to execute a transaction in `GT`, `S` constructs a call to `FUIP` with the appropriate interface and parameters. If the call generates a certificate `Cert`, `S` retrieves `Cert` to emulate the PoAs staking in the real world. If `PVES` (and `PCLI`) publish a certificate on `PNSB` after receiving the same instruction from `E`, `S` publishes the corresponding certificate on `PNSB` in `Hybrid A1`. Otherwise, `S` skips the publishing. Later, `S` retrieves and stores the Merkle proof from `PNSB` and instructs `FUIP` to output the proof to the dummy party, which, from `E`'s perspective, should be the publisher of `Cert`.

When `E` instructs the dummy parties to invoke the smart contract, `S` uses its saved certificates or Merkle proofs to invoke `PISC` in `Hybrid A1` accordingly.

In the real world, the execution of `GT` is automatic, meaning it can continuously proceed without additional instructions from `E` after successful session setup. In `Hybrid A1`, although `PVES` and `PCLI` are replaced by dummy parties, `S` still drives the execution of `GT` so that from `E`'s perspective, `GT` is executed automatically. Since `PISC` still exists in `Hybrid A1`, `S` should not trigger the `TermExecution` interface of `FUIP` to avoid double execution on the same contract terms. `S` can reclaim its funds staked in `FUIP` via "backdoor" channels since `S` and `FUIP` are allowed to communicate freely under the UC framework.

**Fact 1:** With the aforementioned construction of `S` and `FUIP`, the outputs of both dummy parties in `Hybrid A1` are exactly the same as the outputs of the corresponding actual parties in the real world, and all side effects in the real world are accurately emulated by `S` in `Hybrid A1`. Thus, `E` cannot distinguish between the real world and `Hybrid A1`.

### Hybrid A2: Replacing PISC with PI

**Hybrid A2** is the same as `Hybrid A1`, except that `PISC` is further replaced by the dummy `PI`. As a result, `S` must resume the responsibility of `PISC` in `Hybrid A2`.

When `E` instructs the execution of `GT`, `S` computes the arbitration code contract and instructs `FUIP` to publish the contract on `PI`, which is observable by `E`. For any instruction to invoke the contract, `S` locally executes the contract with the input and then publishes the updated contract to `PI` via `FUIP`. Finally, upon the predefined contract timeout, `S` calls the `TermExecution` interface of `FUIP` with parameters `(sid, PI)` or `(sid, PI_CLI)` to execute the contract, emulating the arbitration performed by `PISC` in `Hybrid A1`.

With the help of `S` and `FUIP`, the output of the dummy `PI` and all effects in `Hybrid A2` are exactly the same as those in `Hybrid A1`. Thus, `E` cannot distinguish between these two worlds.

### Hybrid A3: Replacing PNSB with PI

**Hybrid A3** is the same as `Hybrid A2`, except that `PNSB` is further replaced by the dummy `PI`. Since the structure of `PNSB` and messages sent to `PNSB` are public, simulating its functionality by `S` is trivial. Therefore, `Hybrid A3` is identically distributed as `Hybrid A2` from the view of `E`.

### Hybrid A4: The Ideal World

**Hybrid A4** is the same as `Hybrid A3`, except that `PBC` (the last real-world party) is further replaced by the dummy `PI`. Thus, `Hybrid A4` is essentially `IFUIP`. Since the functionality of `PBC` is a strict subset of that of `PNSB`, simulating `PBC` by `S` is straightforward. Therefore, `IFUIP` is indistinguishable from `Hybrid A3` from `E`'s perspective.

Given the transitivity of protocol emulation, we show that `ProtUIP` UC-emulates `IFUIP`, and therefore, `ProtUIP` UC-realizes `FUIP`. Throughout the simulation, we maintain a key invariant: `S` and `FUIP` together can always accurately simulate the desired outputs and side effects on all (dummy and real) parties in all hybrid worlds. Thus, from `E`'s view, the indistinguishability between the real and ideal worlds naturally follows.

### Byzantine Corruption Model

Theorem 8.1 considers the passive corruption model. In this section, we discuss the more general Byzantine corruption model for `PVES` and `PCLI` (assuming blockchains and smart contracts are trusted for correctness). Previously, we constructed `S` and `FUIP` to accurately match the desired execution of `ProtUIP`. However, if one party is Byzantinely corrupted, it behaves arbitrarily. This may lead to conflicting messages being sent to off-chain channels and `PNSB`. Note that for any transaction state, `ProtUIP` always processes the first received attestation (either a certificate from channels or a Merkle proof from `PNSB`) and effectively ignores the other one. The adversary could inject message inconsistency to make the protocol execution favor one type of attestation over the other, making it impossible for `S` to always accurately emulate its behaviors, resulting in differences between the ideal world and the real world from `E`'s view.

To incorporate the Byzantine corruption model into our security analysis, we consider a variant of `ProtUIP`, referred to as `H-ProtUIP`, that requires `PVES` and `PCLI` to only use `PNSB` as the communication medium. This ensures that the full granularity of protocol execution is public and unique, allowing `S` to emulate whatever actions a (corrupted) party may take in the real world. Therefore, it is not hard to conclude Theorem 8.2.

### Conclusion

In this paper, we presented HyperService, the first platform that offers interoperability and programmability across heterogeneous blockchains. HyperService is powered by two innovative designs: HSL, a programming framework for writing cross-chain dApps by unifying smart contracts written in different languages, and UIP, the universal blockchain interoperability protocol designed to securely realize the complex operations defined in these dApps on blockchains. We implemented a HyperService prototype in approximately 35,000 lines of code to demonstrate its practicality and ran experiments on the prototype to report the end-to-end execution latency for dApps and the aggregate platform throughput.

### Acknowledgments

We thank the anonymous reviewers for their valuable feedback. We also thank Harmony Protocol for their discussion on cross-shard transactions. This material is based upon work partially supported by NSF under Contract Nos. CNS-1717313 and TWC-1518899, and by the National Key Research and Development Program of China under grant No. 2018YFB0803605 and NSFC under grant No. 61702045. Correspondence authors are Zhuotao Liu and Haoyu Wang.

### References

[1] Cosmos WhitePaper. https://cosmos.network/resources/whitepaper, 2019.
[2] Harmony: Technical Whitepaper. https://harmony.one/whitepaper.pdf, 2019.
[3] Monoxide: Scale Out Blockchain with Asynchronized Consensus Zones. In USENIX NSDI (2019).
[4] Open Source Code for HyperService by HyperService-Consortium. https://github.com/HyperService-Consortium, 2019.
[5] Bitcoin Wiki: Atomic Cross-Chain Trading. https://en.bitcoin.it/wiki/Atomic_swap, Accessed on 2019.
[6] CoinMarketCap. https://coinmarketcap.com, Accessed on 2019.
[7] Cosmos. https://cosmos.network, Accessed on 2019.
[8] DPOS Consensus Algorithm. https://steemit.com/dpos/@dantheman/dpos-consensus-algorithm-this-missing-white-paper, Accessed on 2019.
[9] J.P. Morgan: Blockchain and Distributed Ledger. https://www.jpmorgan.com/global/blockchain, Accessed on 2019.
[10] Nebulas. https://github.com/nebulasio, Accessed on 2019.
[11] Oraclize. http://www.oraclize.it, Accessed on 2019.
[12] Polkadot. https://polkadot.network, Accessed on 2019.
[13] rhombus. https://rhombus.network, Accessed on 2019.
[14] Solidity. https://solidity.readthedocs.io/en/v0.5.6/, Accessed on 2019.
[15] Standards for the Cosmos network & Interchain Ecosystem. https://github.com/cosmos/ics, Accessed on 2019.
[16] Substrate. https://github.com/paritytech/substrate, Accessed on 2019.
[17] Tendermint Core. https://tendermint.com, Accessed on 2019.
[18] Tor Directory Authorities. https://metrics.torproject.org/rs.html#search/flag:authority, Accessed on 2019.
[19] Vyper. https://github.com/ethereum/vyper, Accessed on 2019.
[20] Al-Bassam, M., Sonnino, A., Bano, S., Hrycyszyn, D., and Danezis, G. Chainspace: A Sharded Smart Contracts Platform. NDSS (2017).
[21] Back, A., Corallo, M., Dashjr, L., Friedenbach, M., Maxwell, G., Miller, A., Poelstra, A., Timón, J., and Wuille, P. Enabling Blockchain Innovations with Pegged Sidechains. URL: tinyurl.com/mj656p7 (2014).
[22] Blackshear, S., Cheng, E., Dill, D. L., Gao, V., Maurer, B., Nowacki, T., Pott, A., Qadeer, S., Rain, Russi, D., Sezer, S., Zakian, T., and Zhou, R. Move: A language with programmable resources. Tech. rep., The Libra Association, 2019.
[23] Borders, K., Springer, J., and Burnside, M. Chimera: A Declarative Language for Streaming Network Traffic Analysis. In USENIX Security Symposium (2012).
[24] Breidenbach, L., Cornell Tech, I., Daian, P., Tramer, F., and Juels, A. Enter the Hydra: Towards Principled Bug Bounties and Exploit-Resistant Smart Contracts. In 27th USENIX Security Symposium (2018).
[25] Bünz, B., Bootle, J., Boneh, D., Poelstra, A., Wuille, P., and Maxwell, G. Bulletproofs: Short proofs for Confidential Transactions and More. In 2018 IEEE Symposium on Security and Privacy (SP) (2018), IEEE, pp. 315–334.
[26] Buterin, V. Chain Interoperability. R3 Reports (2016).
[27] Buterin, V., et al. A Next-Generation Smart Contract and Decentralized Application Platform. white paper (2014).
[28] Canetti, R. Universally Composable Security: A New Paradigm for Cryptographic Protocols. In IEEE Symposium on Foundations of Computer Science (2001).
[29] Cheng, R., Zhang, F., Kos, J., He, W., Hynes, N., Johnson, N. M., Juels, A., Miller, A., and Song, D. Ekiden: A Platform for Confidentiality-Preserving, Trustworthy, and Performant Smart Contract Execution. In IEEE EuroS&P (2019).
[30] Costan, V., and Devadas, S. Intel SGX explained, Accessed on 2019. https://eprint.iacr.org/2016/086.pdf.
[31] Dingledine, R., Mathewson, N., and Syverson, P. Tor: The Second-Generation Onion Router. In USENIX Security Symposium (2004).
[32] Eyal, I., Gencer, A. E., Sirer, E. G., and Van Renesse, R. Bitcoin-NG: A Scalable Blockchain Protocol. In USENIX NSDI (2016).
[33] Gao, P., Xiao, X., Li, D., Li, Z., Jee, K., Wu, Z., Kim, C. H., Kulkarni, S. R., and Mittal, P. SAQL: A Stream-based Query System for Real-time Abnormal System Behavior Detection. In USENIX Security Symposium (2018).
[34] Gao, P., Xiao, X., Li, Z., Jee, K., Xu, F., Kulkarni, S. R., and Mittal, P. AIQL: Enabling Efficient Attack Investigation from System Monitoring Data. In USENIX ATC (2018).
[35] Garay, J., Kiayias, A., and Leonardos, N. The Bitcoin Backbone Protocol with Chains of Variable Difficulty. In Annual International Cryptology Conference (2017).
[36] Gazi, P., Kiayias, A., and Zindros, D. Proof-of-stake Sidechains. In IEEE Symposium on Security & Privacy (2019).
[37] Green, M., and Miers, I. Bolt: Anonymous Payment Channels for Decentralized Currencies. In ACM CCS (2017).
[38] Herlihy, M. Atomic Cross-Chain Swaps. In ACM PODC (2018).
[39] Kalodner, H., Goldfeder, S., Chen, X., Weinberg, S. M., and Felten, E. W. Arbitrum: Scalable, Private Smart Contracts. In USENIX Security Symposium (2018).
[40] Khalil, R., and Gervais, A. Revive: Rebalancing Off-blockchain Payment Networks. In ACM CCS (2017).
[41] Kiayias, A., and Zindros, D. Proof-of-work Sidechains. Tech. rep., Cryptology ePrint Archive, Report 2018/1048, 2018.
[42] Killian, C. E., Anderson, J. W., Braud, R., Jhala, R., and Vahdat, A. M. Mace: Language support for building distributed systems. In ACM PLDI (2007).
[43] Kogias, E. K., Jovanovic, P., Gailly, N., Khoffi, I., Gasser, L., and Ford, B. Enhancing Bitcoin Security and Performance with Strong Consistency via Collective Signing. In USENIX Security Symposium (2016).
[44] Kokoris-Kogias, E., Jovanovic, P., Gasser, L., Gailly, N., Syta, E., and Ford, B. OmniLedger: A Secure, Scale-out, Decentralized Ledger via Sharding. In IEEE Symposium on Security and Privacy (2018).
[45] Kosba, A., Miller, A., Shi, E., Wen, Z., and Papamanthou, C. Hawk: The Blockchain Model of Cryptography and Privacy-preserving Smart Contracts. In IEEE Symposium on Security and Privacy (2016).
[46] Krupp, J., and Rossow, C. teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts. In USENIX Security Symposium (2018).
[47] Lamport, L. Time, Clocks, and the Ordering of Events in a Distributed System. Communications of the ACM (1978).
[48] Lee, D., Kohlbrenner, D., Shinde, S., Song, D., and Asanović, K. Keystone: A Framework for Architecting TEEs. arXiv preprint arXiv:1907.10119 (2019).
[49] Loo, B. T., Condie, T., Garofalakis, M., Gay, D. E., Hellerstein, J. M., Maniatis, P., Ramakrishnan, R., Roscoe, T., and Stoica, I. Declarative networking: Language, execution and optimization. In SIGMOD (2006).
[50] Luu, L., Chu, D.-H., Olickel, H., Saxena, P., and Hobor, A. Making Smart Contracts Smarter. In ACM CCS (2016).
[51] Luu, L., Narayanan, V., Zheng, C., Baweja, K., Gilbert, S., and Saxena, P. A Secure Sharding Protocol for Open Blockchains. In ACM CCS (2016).
[52] Malavolta, G., Moreno-Sanchez, P., Kate, A., Maffei, M., and Ravi, S. Concurrency and Privacy with Payment-channel Networks. In ACM CCS (2017).
[53] Nakamoto, S. Bitcoin: A Peer-to-Peer Electronic Cash System. https://bitcoin.org/bitcoin.pdf, 2008.
[54] Parr, T. Antlr. https://www.antlr.org/, 2014.
[55] Sergey, I., and Hobor, A. A Concurrent Perspective on Smart Contracts. In Financial Cryptography and Data Security (2017).
[56] Sommer, R., Vallentin, M., De Carli, L., and Paxson, V. Hilti: An abstract execution environment for deep, stateful network traffic analysis. In IMC (2014).
[57] Vallentin, M., Paxson, V., and Sommer, R. VAST: A Unified Platform for Interactive Network Forensics. In USENIX NSDI (2016).
[58] Van Saberhagen, N. CryptoNote v 2.0. https://cryptonote.org/whitepaper.pdf, 2013.
[59] Wood, G. Ethereum: A secure decentralised generalised transaction ledger. Ethereum Project Yellow Paper (2014).
[60] Zamani, M., Movahedi, M., and Raykova, M. RapidChain: Scaling Blockchain via Full Sharding. In ACM CCS (2018).
[61] Zamyatin, A., Harz, D., Lind, J., Panayiotou, P., Gervais, A., and Knottenbelt, W. XCLAIM: Trustless, Interoperable, Cryptocurrency-Backed Assets. In IEEE Symposium on Security and Privacy (2019).
[62] Zhang, F., Cecchetti, E., Croman, K., Juels, A., and Shi, E. Town Crier: An Authenticated Data Feed for Smart Contracts. In ACM CCS (2016).