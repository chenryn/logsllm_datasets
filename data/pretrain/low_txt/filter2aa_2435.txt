# API-Induced SSRF: How Apple Pay Scattered Vulnerabilities Across the Web

## About Me
- Bachelor's degree in Mathematics
- Web developer with approximately 5 years of experience
- Experienced in bug bounties
- At PKC for about a year, focusing on web development and code audits for clients - [pkc.io](https://pkc.io)

## Introduction
### Overview
- **Definitions**
- **Demonstration of Common Mistakes**
  - Apple Pay
  - Twilio
  - Other Examples
- **Best Practices to Avoid Apple’s Mistakes**

### Diagram of Inductive Weaknesses
- **Weak Code (e.g., Heartbleed)**
- **Vulnerable Deployment**
- **Typical Class Breaks** (Refer to Schneier’s blog post for more details)

### Inductive Weakness
- A design flaw that encourages multiple parties to write vulnerable code with a similar exploit pattern across different software stacks.

## Definitions
### SSRF Refresher
- **SSRF (Server-Side Request Forgery)**
  - Example: `http://169.254.169.254/foo`
  - Attack Vector: `GET /foo` to `169.254.169.254`
  - Impact: Access to sensitive data

### Easy Exploits with SSRF
- **AWS and GCP Vulnerabilities**
  - Criticisms of AWS/GCP for their "gooey center"
  - File URL vulnerabilities (`file:///`)
  - Reflected XSS (though technically not SSRF)

### Advanced SSRF
- **Cross-Protocol Exploits**
  - SMTP through `gopher://` URLs
  - HTTP to memcached to RCE (Remote Code Execution)
  - Refer to "A New Era of SSRF" for more details

## Apple Pay Web
### Inductive SSRF
- **Apple Pay Forms**
  - In-store
  - In-app
  - Web (focus of this discussion)

### Intended Flow
1. **Safari generates a validationURL** (e.g., `https://apple-pay-gateway-*.apple.com`)
2. **JavaScript sends validationURL to the backend**
3. **Backend fetches a session from validationURL and forwards it to the client**

### Vulnerable Scenario
- **Malicious validationURL**: `https://169.254.169.254/foo`
- **Impact**: Access to sensitive data

### Demos
- **appr-wrapper**
  - GitHub repository under GoogleChromeLabs
  - Written and deployed by a @google.com account
  - Polyfill between Apple Pay and PaymentRequest API
  - Low-severity target due to being a test deployment

- **webkit.org**
  - Maintained by Apple
  - Higher-severity target

### Apple’s Response
- **Disclosure Timeline**
  - February 11: Initial email to Apple
  - March 26: Apple updated documentation
  - May 14: Apple concluded investigation; follow-up questions were sent
  - Two months of silence followed

### Mitigations
- **Check validationURL against Apple’s list**
- **Use Stripe or Braintree for handling the flow securely**

### General Mitigations for SSRF
- **Whitelist egress traffic**
- **Protect metadata like Netﬂix does: Detecting Credential Compromise in AWS**
- **Be mindful of local, unauthenticated services on servers**

### Ineffective Mitigations
- **Do not use regex to validate domains** (e.g., `https?://.*.apple.com/.*`)
- **Do not rely on HTTPS to prevent cross-protocol attacks**

## Webhooks
### Previous Exploits
- **Example Payload**: `http://169.254.169.254`, `gopher://localhost:11211/...`

### How Twilio Authenticates Webhooks
- **HMAC verification**
- **Common issues**: 23 out of 31 open-source projects failed to check HMAC
- **Contributing Factors**
  - Poor documentation
  - Easiest receiver implementation is often insecure

### Demo: Twilio Example Code
- **Examples not publicly deployed**
- **Found vulnerabilities where code was copied and pasted**

### Disclosure Timeline for Twilio
- **February 17**: Initial email to Twilio
- **March 6**: Twilio updated some documentation
- **Rejected architectural changes due to unforeseen issues**

### Nexmo
- **Source Code Analysis**
- **Gitlab Webhooks: Happy Path**
  - Properly configured webhooks
- **Exploit**
  - Found a server receiving GitLab webhooks
  - Triggered build pipelines for multiple tenants
  - Injected malicious payloads

### Better Ways to Send Webhooks
- **Authenticated Ciphers (e.g., AES-GCM)**
- **High-Entropy, Cryptographically Random Event IDs**
  - Example: Plaid’s approach
- **Testing and Warning During Registration**
  - Perform two test requests (one valid, one invalid MAC)
  - Warn if responses are identical

### Salesforce Objects vs. DynamoDB
- **Both offer NoSQL-like object storage and REST APIs with custom SQL-like queries**
- **Vulnerabilities in Salesforce SOQL and DynamoDB**

### Closing Thoughts
- **Quote from Tim Cook, Apple CEO**
  - “If you’ve built a chaos factory, you can’t dodge responsibility for the chaos.”
- **Financial Implications**
  - Low-hanging bounty fruit
  - Embarrassment
  - High-interest technical debt

### Designing Defensive APIs
- **Audit example code**
- **Be cautious with URL handling**
- **Make security warnings unnecessary by improving documentation and implementation**

### Acknowledgments
- **Jonathan Ming at PKC** - Initial questions about Apple Pay
- **Arte Ebrahimi at PKC** - Pointed to Nexmo issues
- **Ken Kantzer at PKC** - Helped with the presentation
- **Andrew Crocker at EFF** - Legal assistance

### Thank You!
- [www.pkc.io](https://pkc.io)