### Leakage Path Analysis and Findings

We conducted a leakage path analysis and identified no high-entropy leaks. The analysis log indicates that all detected leakage paths originate from the `my_vtag` check, indicating that these are low-entropy leaks. One of these paths can be exploited to determine if an attack packet contains the correct `my_vtag` by monitoring the `SctpInPktDiscards` sink. In the worst case, this requires 2^32 packets, but it can still reduce the number of packets (`Npkt`) needed from 2^32 * 2^rem_win to 2^32 + 2^rem_win.

With knowledge of `my_vtag`, an attacker would still need a `tsn` that falls within the window specified by `base_tsn` and `cumulative_tsn_ack_point`. We used these as leak sources and found three leaks, all of which were low-entropy.

### Close-Channel Accept Paths

For close-channel accept paths, the protocol states they rely on are `my_vtag` and `peer_vtag`. The taint summary shows that the sinks are only tainted by implicit flows, and our tool did not detect any high-entropy leaks for both sources.

### DCCP-Kernel Analysis

#### Accept Path Analysis

In DCCP, the checks for copying payload and resetting the connection are identical. Our tool identified one path, which is a true positive (TP). In this path, the DCCP sequence number (`seqno`) must fall within a 48-bit sequence window (`seqno_win`) around the protocol state `dccps_gsr`. The upper and lower bounds of this window are defined by the protocol states `dccps_swh` and `dccps_swl`, respectively. Thus, the number of packets (`Npkt`) required is determined by the size of `seqno_win`.

The initial size of `seqno_win` is 100, making it impractical for injection. Normally, there should be an additional check for the DCCP acknowledge sequence number (`ackno`), but our analysis shows that an attacker can send a DATA type DCCP message without an `ackno` to bypass this check.

#### Protocol State Leakage

We used all three protocol states as sources in this analysis. For sinks, DCCP does not currently create a `proc` file to store global statistics, but it does have a structure for SNMP statistics similar to TCP-Kernel and SCTP-Kernel, which could potentially be used for leakage if enabled in the future. Our tool identified five leaks, with four being TPs. The one false positive (FP) path requires:
1. The attack packet to be a SYNC or SYNCACK packet with the correct `ackno`.
2. `seqno` to be greater than `dccps_swl`.
3. The packet to fail the `seqno_win` check.

However, when conditions (1) and (2) are met, `dccps_gsr` is updated with `seqno`, and the packet will not fail the `seqno_win` check. Our analysis can confirm that `dccps_gsr` is updated, but cannot guarantee that `seqno` will pass the `seqno_win` check. The four TPs all require `seqno` to fall within `seqno_win`, thus they are low-entropy leaks.

### Limitations and Future Work

#### Possible False Negatives (FNs) Due to Implementation Simplification

We designed and implemented a high-precision data flow analysis with implicit flow tainting and pointer analysis to minimize FNs. However, simplified implementation may still lead to FN cases. For example, as described in §5.1, we added an iteration limit to loops to avoid adding recursive fields, which may cause FN cases if the leakage sinks have recursive fields.

#### Failure to Identify Semantically-Conflicting and Low-Entropy Constraints

As discussed in §7.3, most FPs are caused by conflicting constraints that are difficult to identify. In the future, we plan to use an SMT solver [13], commonly employed in symbolic execution, to improve our tool.

#### Limited Scope of Storage Channels

Our tool is designed to cover various leakage channels, including storage channels, data timing channels, and public events like sending packets. However, in our experiments, we only used storage channels in the `proc` file system as leakage sinks, potentially missing practical vulnerabilities in other channels. In the future, we plan to incorporate other sinks into the leakage path analysis.

### Related Work

#### Network Protocol Analysis

Prior work has used formal methods such as model checking and specification languages to test protocol specifications rigorously [6, 7]. These methods, however, do not prevent vulnerabilities due to weak implementations. Static analysis has been applied to identify system DoS vulnerabilities [8], protocol manipulation attacks [30], and interoperability problems [36]. However, none of these focused on packet injection vulnerabilities causing payload injection or network DoS.

#### Static Analysis for Taint-Style Vulnerabilities

Static analysis tools have been developed to detect buffer overflows [12], format string vulnerabilities [45], and SQL injection and XSS [25, 27, 48]. Recently, Yamaguchi et al. [53] proposed using code property graphs to effectively mine such vulnerabilities in large amounts of code. Unlike these, our analysis targets packet injection, which requires handling more and diverse checks due to header field semantics. Additionally, we include a follow-up leakage analysis, which is not covered by previous tools.

#### Side-Channel Attacks and Detection

Recent years have seen a rise in side-channel attack discoveries. Proc file systems have been abused as side-channels to infer keystrokes [56], webpages [24], and system states [10]. Qian et al. [37, 38] used proc file packet counters to infer TCP sequence numbers. Other popular channels include timing channels, such as code path [29], data [3], and cache-access timing channels [22, 54]. In network protocol attacks, some header fields have also been found useful for inferring sequence numbers [18].

Compared to side channel discovery, side channel detection has been less explored. Dynamic analysis, such as black-box testing, has been used to find side channels in web applications [9] and timing side channels in SSL/TLS implementations [33]. To overcome the limitations of dynamic analysis, static analysis tools have been developed to detect web application and cache side channels [14, 55]. Our tool can detect storage side channels, which existing tools do not cover, and focuses on protocol state leakage, differentiating it from previous work.

### Conclusion

In this paper, we designed and implemented PacketGuardian, an effective and scalable static program analysis tool to systematically analyze the security properties of network protocol implementations against off-path packet injection attacks. PacketGuardian uses a context-, flow-, and field-sensitive taint analysis with pointer analysis to achieve high precision and targets attacker-controlled implicit information leaks. This approach significantly reduces the classic problem of false positives in implicit flow tracking while maintaining high detection accuracy of practical exploits. By applying our tool to six real network protocol implementations, we discovered new and realistic vulnerabilities confirmed by proof-of-concept attacks for both Linux kernel TCP and two out of three RTP implementations.

### Acknowledgments

We thank Danfeng Zhang, Rajiv Gupta, Jia Chen, Sanae Rosen, Jason Jong Kyu Park, Lingjia Tang, and the anonymous reviewers for their valuable feedback. This research was supported in part by the National Science Foundation under grants CNS-1318306 and CNS-1464410, and by the Office of Naval Research under grant N00014-14-1-0440.

### References

[1] Analysis result website. http://tinyurl.com/PacketInjectionVulnerability.
[2] STAC - Static Taint Analysis for C. http://code.google.com/p/tanalysis/.
[3] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and H. Shacham. On Subnormal Floating Point and Abnormal Timing. In IEEE Symposium on Security and Privacy, 2015.
[4] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise Context, Flow, Field, Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps. In PLDI, 2014.
[5] T. Bao, Y. Zheng, Z. Lin, X. Zhang, and D. Xu. Strict Control Dependence and its Effect on Dynamic Information Flow Analyses. In ACM ISSTA, 2010.
[6] K. Bhargavan, D. Obradovic, and C. A. Gunter. Formal Verification of Standards for Distance Vector Routing Protocols. Journal of the ACM, 2002.
[7] S. Bishop, M. Fairbairn, M. Norrish, P. Sewell, M. Smith, and K. Wansbrough. Rigorous Specification and Conformance Testing Techniques for Network Protocols, as Applied to TCP, UDP, and Sockets. SIGCOMM, 2005.
[8] R. Chang, G. Jiang, F. Ivancic, S. Sankaranarayanan, and V. Shmatikov. Inputs of Coma: Static Detection of Denial-of-Service Vulnerabilities. In CSF, 2009.
[9] P. Chapman and D. Evans. Automated Black-box Detection of Side-channel Vulnerabilities in Web Applications. In CCS, 2011.
[10] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks. In USENIX Security, 2014.
[11] S. Chen, R. Wang, X. Wang, and K. Zhang. Side-channel Leaks in Web Applications: A Reality Today, a Challenge Tomorrow. In IEEE Symposium on Security and Privacy, 2010.
[12] C. Cowan, C. Pu, D. Maier, J. Walpole, and P. Bakke. StackGuard: Automatic Adaptive Detection and Prevention of Buffer-Overflow Attacks. In USENIX Security, 1998.
[13] L. De Moura and N. Bjørner. Z3: An Efficient SMT Solver. In TACAS, 2008.
[14] G. Doychev, D. Feld, B. Köpf, L. Mauborgne, and J. Reineke. CacheAudit: A Tool for the Static Analysis of Cache Side Channels. In Usenix Security, 2013.
[15] E. Dumazet. Kernel discussion on ACK flag. http://comments.gmane.org/gmane.linux.network/253369, 2012.
[16] K. O. Elish, X. Shu, D. D. Yao, B. G. Ryder, and X. Jiang. Profiling User-trigger Dependence for Android Malware Detection. Computers & Security, 49:255–273, 2015.
[17] C. Gibler, J. Crussell, J. Erickson, and H. Chen. AndroidLeaks: Automatically Detecting Potential Privacy Leaks in Android Applications on a Large Scale. In TRUST, 2012.
[18] Y. Gilad and A. Herzberg. Off-Path Attacking the Web. In USENIX WOOT, 2012.
[19] Y. Gilad and A. Herzberg. When tolerance causes weakness: the case of injection-friendly browsers. In WWW, 2013.
[20] J. A. Goguen and J. Meseguer. Security Policies and Security Models. In IEEE Symposium on Security and Privacy, 1982.
[21] M. I. Gordon, D. Kim, J. Perkins, L. Gilham, N. Nguyen, and M. Rinard. Information-flow Analysis of Android Applications in DroidSafe. In NDSS, 2015.
[22] D. Gullasch, E. Bangerter, and S. Krenn. Cache Games–Bringing Access-based Cache Attacks on AES to Practice. In IEEE Symposium on Security and Privacy, 2011.
[23] M. Hind, M. Burke, P. Carini, and J.-D. Choi. Interprocedural Pointer Alias Analysis. TOPLAS, 21(4):848–894, 1999.
[24] S. Jana and V. Shmatikov. Memento: Learning Secrets from Process Footprints. In IEEE Symposium on Security and Privacy, 2012.
[25] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A Static Analysis Tool for Detecting Web Application Vulnerabilities. In IEEE Symposium on Security and Privacy (SP), 2006.
[26] M. G. Kang, S. McCamant, P. Poosankam, and D. Song. DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation. In NDSS, 2011.
[27] A. Kieyzun, P. J. Guo, K. Jayaraman, and M. D. Ernst. Automatic creation of SQL injection and cross-site scripting attacks. In ICSE, 2009.
[28] D. King, B. Hicks, M. Hicks, and T. Jaeger. Implicit flows: Can’t Live with ’em, Can’t Live Without ’em. Information Systems Security, Lecture Notes in Computer Science, 5352:56–70, 2008.
[29] P. C. Kocher. Timing Attacks on Implementations of Diffie-Hellman, RSA, DSS, and Other Systems. In CRYPTO, 1996.
[30] N. Kothari, R. Mahajan, T. Millstein, R. Govindan, and M. Musuvathi. Finding Protocol Manipulation Attacks. In SIGCOMM, 2011.
[31] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-Level Cache Side-Channel Attacks are Practical. In IEEE Symposium on Security and Privacy, 2015.
[32] X. Luo, P. Zhou, E. W. Chan, W. Lee, R. K. Chang, and R. Perdisci. Automated Detection and Quantification of Side-channel Leaks in Web Application Development. In CCS, 2010.
[33] C. Meyer, J. Somorovsky, E. Weiss, J. Schwenk, S. Schinzel, and E. Tews. Revisiting SSL/TLS Implementations: New Bleichenbacher Side Channels and Attacks. In USENIX Security, 2014.
[34] B. Muller. Whitepaper: Improved DNS Spoofing Using Node Re-delegation. https://www.sec-consult.com/fxdata/seccons/prod/downloads/whitepaper-dns-node-redelegation.pdf.
[35] G. C. Necula, S. McPeak, S. P. Rahul, and W. Weimer. CIL: Intermediate Language and Tools for Analysis and Transformation of C programs. In CC, 2002.
[36] L. Pedrosa, A. Fogel, N. Kothari, R. Govindan, R. Mahajan, and T. Millstein. Analyzing protocol implementations for interoperability. In NSDI, 2015.
[37] Z. Qian and Z. M. Mao. Off-Path TCP Sequence Number Inference Attack – How Firewall Middleboxes Reduce Security. In IEEE Symposium on Security and Privacy, 2012.
[38] Z. Qian, Z. M. Mao, and Y. Xie. Collaborative TCP Sequence Number Inference Attack: How to Crack Sequence Number Under a Second. In CCS, 2012.
[39] Ramaiah, Anantha and Stewart, R and Dalal, Mitesh. Improving TCP’s Robustness to Blind In-Window Attacks. rfc5961, 2010.
[40] A. Rane, C. Lin, and M. Tiwari. Raccoon: Closing Digital Side-Channels through Obfuscated Execution. In USENIX Security, 2015.
[41] S. Rasthofer, S. Arzt, and E. Bodden. A Machine-Learning Approach for Classifying and Categorizing Android Sources and Sinks. In NDSS, 2014.
[42] T. Reps, S. Horwitz, and M. Sagiv. Precise Interprocedural Dataflow Analysis via Graph Reachability. In POPL, 1995.
[43] A. Rountev, M. Sharp, and G. Xu. IDE Dataflow Analysis in the Presence of Large Object-oriented Libraries. In CC, 2008.
[44] M. Sagiv, T. Reps, and S. Horwitz. Precise Interprocedural Dataflow Analysis with Applications to Constant Propagation. Theoretical Computer Science, 167(1):131–170, 1996.
[45] U. Shankar, K. Talwar, J. S. Foster, and D. Wagner. Detecting Format String Vulnerabilities with Type Qualifiers. In USENIX Security, 2001.
[46] K. Smith-Strickland. We’re Closer to an Encrypted Internet than You Think. http://gizmodo.com/two-thirds-of-internet-traffic-could-be-encrypted-by-ne-1702659626#, May 2015.
[47] S. Son and V. Shmatikov. The Hitchhiker’s Guide to DNS Cache Poisoning. In Security and Privacy in Communication Networks, pages 466–483. Springer, 2010.
[48] O. Tripp, M. Pistoia, S. J. Fink, M. Sridharan, and O. Weisman. TAJ: Effective Taint Analysis of Web Applications. In PLDI, 2009.
[49] A. V. Aho, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools (2nd Edition). Addison Wesley, 2006.
[50] V. Varadarajan, T. Ristenpart, and M. Swift. Scheduler-based Defenses Against Cross-VM Side-Channels. In Usenix Security, 2014.
[51] R. P. Wilson and M. S. Lam. Efficient Context-sensitive Pointer Analysis for C Programs. In PLDI, 1995.
[52] Y. Xie and A. Aiken. Saturn: A Scalable Framework for Error Detection Using Boolean Satisfiability. TOPLAS, 2007.
[53] F. Yamaguchi, N. Golde, D. Arp, and K. Rieck. Modeling and Discovering Vulnerabilities with Code Property Graphs. In IEEE Symposium on Security and Privacy (SP), 2014.
[54] Y. Yarom and K. E. Falkner. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. USENIX Security, 2014.
[55] K. Zhang, Z. Li, R. Wang, X. Wang, and S. Chen. Sidebuster: Sealing Information Leaks with Browser-side Obfuscation of Encrypted Flows. In NDSS, 2011.
[56] K. Zhang and X. Wang. Peeping Tom in the Neighborhood: Keystroke Eavesdropping on Multi-User Systems. In USENIX Security, 2009.
[57] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-VM Side Channels and Their Use to Extract Private Keys. In CCS, 2012.
[58] Y. Zhang and M. K. Reiter. Düppel: Retrofitting Commodity Operating Systems to Mitigate Cache Side Channels in the Cloud. In ACM CCS, 2013.
[59] Y. Zheng and X. Zhang. Path Sensitive Static Analysis of Web Applications for Remote Code Execution Vulnerability Detection. In ICSE, 2013.
[60] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A. Gunter, and K. Nahrstedt. Identity, Location, Disease and More: Inferring Your Secrets from Android Public Resources. In CCS, 2013.