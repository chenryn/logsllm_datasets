### Analysis of the ghttpd Web Server

Our analysis of the ghttpd web server reveals that, upon receiving client messages, the server remains within the main loop. From the perspective of our monitoring tool, the call stack does not change. Therefore, the benefit of using call stack traces is highly application-dependent. Even when call stack traces do not contribute to reducing false positives, they do not affect the correctness of the signature filtering mechanism. Consequently, the additional benefits they offer to applications like OpenSSH make them a valuable technique. Although modeling execution state using call stack traces is application and protocol-specific, the general idea of associating program data or execution state with message signatures can be beneficial for many applications. Further research is needed to identify more useful program semantic states.

### Related Work

Intrusion Detection Systems (IDSs) such as Snort [30, 4], Bro [29], and NetSTAT [37] have been widely used to detect attacks. Most current IDSs rely on signatures of known attacks, although some approaches use statistical techniques (e.g., NIDES [16]) to detect attacks. Traditionally, these signatures are generated manually, which is a slow and error-prone process. To address the delay in signature generation and the threat of fast-spreading worms, several methods [22, 17, 33, 26] have been developed to generate worm signatures from attack traffic, including polymorphic worms [26]. However, all these methods require other means to identify the attack traffic. The approach proposed in this paper begins generating signatures for unknown attacks as soon as they are detected by our system. Furthermore, our technique offers the opportunity to detect, recover from, and defend against similar attacks in a purely decentralized manner.

**TaintCheck [27]** uses binary program emulation to track the propagation and use of tainted external data, preventing the use of tainted data for jump addresses and format strings. We believe that TaintCheck's dynamic information flow tracking can be integrated into our crash diagnosis engine. Future research will explore how to best leverage such techniques. **STEM [32]** identifies potentially vulnerable code segments based on program crashes or instrumented applications running on honeypots, and selectively emulates the vulnerable code segments by instrumenting the source code. This allows the vulnerable program to recover from attacks by rolling back the changes made by an attack. Our approach can use similar attack detectors as in STEM but differs in that it uses message filters instead of error virtualization for blocking future attacks. Despite the similar goal of detecting and recovering from unknown memory corruption attacks, our approach also differs in that it automatically identifies the vulnerability exploited by novel attacks at the binary level and prevents future attacks through signature-based detection and filtering. Additionally, our approach introduces minimal performance overhead during normal program execution because it does not use emulation or code instrumentation.

**ARBOR [24]** generates signatures for buffer overflow attacks using statistical analysis of message sizes to find buffer lengths. In contrast, we use program analysis to find signatures for a broader class of attacks. In a follow-up work [23], the authors of ARBOR used a similar approach to locate corrupting instructions due to buffer overrun, localize attack messages, and generate signatures based on message length and content. Their method requires application-level protocol specifications for better signature quality.

Our approach is similar to **FLIPS [25]**, which uses an anomaly classifier, signature filter, and instruction set randomization (ISR). While ISR only detects code injection attacks, we use address space randomization to detect a broader range of memory corruption attacks. **Shadow honeypots [1]** are used to verify and reduce false alerts from anomaly detectors, requiring an additional shadow process that runs more slowly than the original server process due to code instrumentation. Our approach uses a single randomized server process with very little performance overhead during normal operations.

**Shield [38]** is a vulnerability-based protection system that uses manually generated signatures to filter out attacks exploiting known vulnerabilities. Our approach, which targets unknown memory corruption vulnerabilities, is complementary to Shield. By combining our approach with Shield, we can provide automatically generated signatures and protect against both known and unknown vulnerabilities.

**Address space randomization** has been proposed as a generic defense mechanism against memory corruption attacks (e.g., [3, 28, 40]). Our system uses address space randomization to detect memory corruption attacks and trigger the diagnosis and response process. Recent work [31] has shown that it is possible to brute-force attack randomized systems. Moving to a 64-bit platform or using finer-grain randomization can minimize the chance of such attacks. Our system aims to defeat such attacks by analyzing crashes and generating signatures to block future attacks. With better problem diagnosis and signature generation schemes, we will eventually be able to defeat such attacks. Future research will explore these approaches.

Several ad hoc techniques and tools have been developed to protect against known vulnerabilities, such as detection and prevention techniques for stack buffer overflow attacks [11, 9, 13] and format string attacks [10]. These techniques, targeted at specific types of bugs, can be used in our system as specialized detectors. However, we believe that randomization is a more generic and broader detection method that can cover these techniques. Several virtual-machine-based tools (e.g., [12, 18, 19]) have been developed to record and analyze OS-level events and their dependencies to facilitate intrusion analysis. Our approach is complementary to these techniques.

### Conclusion and Future Work

In this paper, we developed a novel approach to automatically diagnose unknown memory corruption vulnerabilities based on program randomization. This approach allows a network service program to quickly identify the vulnerability being exploited and generate message signatures to prevent future attacks. We also associate the program’s execution state, particularly its call stack trace, with the attack signatures learned from the attack messages, which can significantly reduce the false positive rate without decreasing the detection rate for certain applications. The proposed techniques enable the development of a fully decentralized self-diagnosing and self-protecting defense mechanism for networked computer systems.

Future work includes developing a more general dynamic data dependency analysis method for more efficient diagnosis, moving the message filtering mechanism to the kernel space for better performance and integration with the diagnosis engine, and conducting more experiments to evaluate our system.

### Acknowledgments

We would like to thank our shepherd, Somesh Jha, for his excellent comments and timely responses. We also thank Dawn Song and the anonymous reviewers for their many suggestions for improving this paper. This work is partially supported by the National Science Foundation (NSF) under grants ITR-0219315 and CCR-0207297.

### References

[1] K. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and A. Keromytis. Detecting targeted attacks using shadow honeypots. In Proceedings of the 14th USENIX Security Symposium, August 2005.
[2] A. Baraloo, N. Singh, and T. Tsai. Libsafe: Protecting critical elements of stacks. http://www.research.avayalabs.com/project/libsafe/. White Paper.
[3] S. Bhatkar, D.C. DuVarney, and R. Sekar. Address obfuscation: an efficient approach to combat a broad range of memory error exploits. In Proceedings of the 12th USENIX Security Symposium (Security ’03), August 2003.
[4] Brian Caswell and Marty Roesch. Snort: The open source network intrusion detection system. http://www.snort.org.
[5] CERT. http://www.cert.org/advisories/CA-2001-19.html.
[6] CERT. http://www.cert.org/advisories/CA-2003-04.html.
[7] CERT. http://www.cert.org/advisories/CA-2003-20.html.
[8] H. Chen and D. Wagner. MOPS: an infrastructure for examining security properties of software. In Proceedings of the 9th ACM Conference on Computer and Communications Security (CCS’02), November 2002.
[9] T. Chiueh and F. Hsu. RAD: A compile-time solution to buffer overflow attacks. In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS 01), April 2001.
[10] C. Cowan, M. Barringer, S. Beattie, and G. Kroah-Hartman. FormatGuard: Automatic protection from printf format string vulnerabilities. In Proceedings of the 2001 USENIX Security Symposium, August 2001.
[11] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In Proceedings of the 7th USENIX Security Conference, June 1998.
[12] G.W. Dunlap, S.T. King, S. Cinar, M.A. Basrai, and P.M. Chen. ReVirt: Enabling intrusion analysis through virtual-machine logging and replay. In Proceedings of the 2002 Symposium on Operating Systems Design and Implementation (OSDI), December 2002.
[13] H. Etoh. GCC extension for protecting applications from stack-smashing attacks. http://www.research.ibm.com/trl/projects/security/ssp/.
[14] H. Feng, J. Giffin, Y. Huang, S. Jha, W. Lee, and B. Miller. Formalizing sensitivity in static analysis for intrusion detection. In Proceedings of the 2004 IEEE Symposium on Security and Privacy, May 2004.
[15] Intel Corporation. Intel Architecture Software Developer’s Manual, volume 2, Instruction Set Reference, 1999.
[16] H.S. Javits and A. Valdes. The NIDES statistical component: Description and justification. Technical report, SRI International, Computer Science Laboratory, 1993.
[17] H. A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Signature Detection. In Proceedings of the 13th Usenix Security Symposium, August 2004.
[18] S.T. King and P.M. Chen. Backtracking intrusions. In Proceedings of the 2003 Symposium on Operating Systems Principles (SOSP), October 2003.
[19] S.T. King, Z.M. Mao, D.G. Lucchetti, and P.M. Chen. Enriching intrusion alerts through multi-host causality. In Proceedings of The 12th Annual Network and Distributed System Security Symposium (NDSS ’05), February 2005.
[20] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In Proceedings of the 11th USENIX Security Symposium, August 2002.
[21] C. Ko, M. Ruschitzka, and K. Levitt. Execution monitoring of security-critical programs in distributed systems: A specification-based approach. In Proceedings of 1997 IEEE Symposium on Security and Privacy, pages 175-187, Oakland, CA, May 1997.
[22] C. Kreibich and J. Crowcroft. Honeycomb - creating intrusion detection signatures using honeypots. In Proceedings of the Second Workshop on Hot Topics in Networks (HotNets-II), November 2003.
[23] Zhenkai Liang and R. Sekar. Automated, sub-second attack signature generation: A basis for building self-protecting servers. In To appear in 12th ACM Conference on Computer and Communications Security (CCS), November 2005.
[24] Zhenkai Liang, R. Sekar, and Daniel C. DuVarney. Automatic synthesis of filters to discard buffer overflow attacks: A step towards realizing self-healing systems. In USENIX Annual Technical Conference, April 2005.
[25] M. Locasto, K. Wang, A. Keromytis, and S. Stolfo. FLIPS: Hybrid adaptive intrusion prevention. In Proceedings of the 8th International Symposium on Recent Advances in Intrusion Detection (RAID), September 2005.
[26] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In Proceedings of the IEEE Symposium on Security and Privacy, May 2005.
[27] James Newsome and Dawn Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Proceedings of the 12th Annual Network and Distributed System Security Symposium (NDSS), 2005.
[28] PaX Team. http://pax.grsecurity.net/docs/aslr.txt.
[29] Vern Paxson. Bro: a system for detecting network intruders in real-time. Computer Networks, 31(23-24):2435-2463, 1999.
[30] M. Roesch. Snort - lightweight intrusion detection for networks. In Proceedings of the 1999 USENIX LISA conference, 1999.
[31] Hovav Shacham, Matthew Page, Ben Pfaff, EuJin Goh, Nagendra Modadugu, and Dan Boneh. On the Effectiveness of Address Space Randomization. In Proceedings of 11th ACM Conference on Computer and Communications Security (CCS), October 2004.
[32] S. Sidiroglou, M.E. Locasto, S.W. Boyd, and A.D. Keromytis. Building a reactive immune system for software services. In Proceedings of USENIX Annual Technical Conference, pages 149-161, April 2005.
[33] S. Singh, C. Estan, G. Varghese, and S. Savage. Automated worm fingerprinting. In Proceedings of the 6th ACM/USENIX Symposium on Operating System Design and Implementation (OSDI), December 2004.
[34] Sumeet Singh, Cristian Estan, George Varghese, and Stefan Savage. Automated Worm Fingerprinting. In Proceedings of the ACM/USENIX Symposium on Operating System Design and Implementation (OSDI), December 2004.
[35] A. Smirnov and T. Chiueh. DIRA: Automatic detection, identification, and repair of control-hijacking attacks. In Proceedings of The 12th Annual Network and Distributed System Security Symposium (NDSS ’05), February 2005.
[36] Sudarshan Srinivasan, Srikanth Kandula, Christopher Andrews, and Yuanyuan Zhou. Flashback: A light-weight rollback and deterministic replay extension for software debugging. In The proceedings of the annual Usenix technical conference (USENIX’04), June 2004.
[37] G. Vigna and R. A. Kemmerer. NetSTAT: A network-based intrusion detection approach. In Proceedings of the 14th Annual Security Applications Conference, December 1998.
[38] Helen J. Wang, Chuanxiong Guo, Daniel R. Simon, and Alf Zugenmaier. Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits. In Proceedings of ACM SIGCOMM, August 2004.
[39] Jun Xu, Shuo Chen, Zbigniew Kalbarczyk, and Ravishankar K. Iyer. An Experimental Study of Security Vulnerabilities Caused by Errors. In Proceedings of IEEE International Conference on Dependable Systems and Networks, Goteborg, Sweden, July 2001.
[40] Jun Xu, Zbigniew Kalbarczyk, and Ravishankar K. Iyer. Transparent runtime randomization for security. In Proceedings of 22nd Symposium on Reliable and Distributed System (SRDS), October 2003.