# Glossary
Please note that the definitions in this glossary are concise and intended to convey the core idea of each term. For more detailed information, please refer to the main text as indicated.

## Table of Contents
- [Asynchronous](#asynchronous)
- [Atomic](#atomic)
- [Backpressure](#backpressure)
- [Batch Process](#batch-process)
- [Bounded](#bounded)
- [Byzantine Fault](#byzantine-fault)
- [Cache](#cache)
- [CAP Theorem](#cap-theorem)
- [Causality](#causality)
- [Consensus](#consensus)
- [Data Warehouse](#data-warehouse)
- [Declarative](#declarative)
- [Denormalize](#denormalize)
- [Derived Data](#derived-data)
- [Deterministic](#deterministic)
- [Distributed](#distributed)
- [Durable](#durable)
- [ETL](#etl)
- [Failover](#failover)
- [Fault-Tolerant](#fault-tolerant)
- [Flow Control](#flow-control)
- [Follower](#follower)
- [Full-Text Search](#full-text-search)
- [Graph](#graph)
- [Hash](#hash)
- [Idempotent](#idempotent)
- [Index](#index)
- [Isolation](#isolation)
- [Join](#join)
- [Leader](#leader)
- [Linearizable](#linearizable)
- [Locality](#locality)
- [Lock](#lock)
- [Log](#log)
- [Materialize](#materialize)
- [Node](#node)
- [Normalized](#normalized)
- [OLAP](#olap)
- [OLTP](#oltp)
- [Partitioning](#partitioning)
- [Percentile](#percentile)
- [Primary Key](#primary-key)
- [Quorum](#quorum)
- [Rebalance](#rebalance)
- [Replication](#replication)
- [Schema](#schema)
- [Secondary Index](#secondary-index)
- [Serializable](#serializable)
- [Shared-Nothing](#shared-nothing)
- [Skew](#skew)
- [Split Brain](#split-brain)
- [Stored Procedure](#stored-procedure)
- [Stream Process](#stream-process)
- [Synchronous](#synchronous)
- [System of Record](#system-of-record)
- [Timeout](#timeout)
- [Total Order](#total-order)
- [Transaction](#transaction)
- [Two-Phase Commit (2PC)](#two-phase-commit-2pc)
- [Two-Phase Locking (2PL)](#two-phase-locking-2pl)
- [Unbounded](#unbounded)

### Asynchronous
Refers to operations that do not wait for a task to complete and do not assume a specific duration. See “Synchronous Versus Asynchronous Replication” on page 153, “Synchronous Versus Asynchronous Networks” on page 284, and “System Model and Reality” on page 306.

### Atomic
1. In concurrent operations: an operation that appears to occur at a single point in time, ensuring no other process can observe it in an intermediate state.
2. In transactions: a set of writes that must all be committed or rolled back together, even if faults occur. See “Atomicity” on page 223 and “Atomic Commit and Two-Phase Commit (2PC)” on page 354.

### Backpressure
A mechanism to slow down data senders when recipients cannot process the data fast enough. Also known as flow control. See “Messaging Systems” on page 441.

### Batch Process
A computation that processes a fixed, often large, dataset and produces output without modifying the input. See Chapter 10.

### Bounded
Having a known upper limit or size. Used in contexts such as network delay and datasets. See “Timeouts and Unbounded Delays” on page 281 and the introduction to Chapter 11.

### Byzantine Fault
A node that behaves incorrectly, possibly by sending contradictory or malicious messages. See “Byzantine Faults” on page 304.

### Cache
A component that stores recently used data to speed up future reads. If data is missing, it is fetched from a slower, complete storage system. 

### CAP Theorem
A theoretical result often misunderstood and not practically useful. See “The CAP Theorem” on page 336.

### Causality
The dependency between events where one event occurs before another, influencing the latter. See “The ‘happens-before’ relationship and concurrency” on page 186 and “Ordering and Causality” on page 339.

### Consensus
A fundamental distributed computing problem involving agreement among nodes, e.g., electing a leader. See “Fault-Tolerant Consensus” on page 364.

### Data Warehouse
A database combining data from multiple OLTP systems for analytics. See “Data Warehousing” on page 91.

### Declarative
Describing desired properties without specifying the exact steps to achieve them. Query optimizers convert declarative queries into execution plans. See “Query Languages for Data” on page 42.

### Denormalize
Introducing redundancy or duplication in a normalized dataset to speed up reads, often in the form of a cache or index. See “Single-Object and Multi-Object Operations” on page 228 and “Deriving several views from the same event log” on page 461.

### Derived Data
Data created from other data through a repeatable process, often to speed up read access. Examples include indexes, caches, and materialized views. See the introduction to Part III.

### Deterministic
A function that always produces the same output for the same input, independent of external factors like random numbers or time.

### Distributed
Running on multiple networked nodes, characterized by partial failures. See “Faults and Partial Failures” on page 274.

### Durable
Storing data in a way that ensures it will not be lost, even in the event of faults. See “Durability” on page 226.

### ETL
Extract-Transform-Load: the process of extracting data from a source, transforming it, and loading it into a data warehouse or batch processing system. See “Data Warehousing” on page 91.

### Failover
In systems with a single leader, failover is the process of transferring leadership to another node. See “Handling Node Outages” on page 156.

### Fault-Tolerant
Able to automatically recover from failures, such as machine crashes or network link failures. See “Reliability” on page 6.

### Flow Control
See *backpressure*.

### Follower
A replica that does not accept writes directly from clients but processes changes received from a leader. Also known as a secondary, slave, read replica, or hot standby. See “Leaders and Followers” on page 152.

### Full-Text Search
Searching text using keywords, often with features like matching similar words or synonyms. A full-text index supports such queries. See “Full-text search and fuzzy indexes” on page 88.

### Graph
A data structure consisting of vertices (nodes or entities) and edges (connections). See “Graph-Like Data Models” on page 49.

### Hash
A function that converts input into a seemingly random number. The same input always produces the same output, and different inputs are likely to produce different outputs. See “Partitioning by Hash of Key” on page 203.

### Idempotent
An operation that can be safely retried without changing the outcome. See “Idempotence” on page 478.

### Index
A data structure that enables efficient searches for records with specific values in a field. See “Data Structures That Power Your Database” on page 70.

### Isolation
In transactions, the degree to which concurrently executing transactions can interfere with each other. Serializable isolation provides the strongest guarantees. See “Isolation” on page 225.

### Join
Combining records that share a common attribute, often used to retrieve related records. See “Many-to-One and Many-to-Many Relationships” on page 33 and “Reduce-Side Joins and Grouping” on page 403.

### Leader
In replicated systems, the designated replica allowed to make changes. Leaders may be elected or manually chosen. Also known as the primary or master. See “Leaders and Followers” on page 152.

### Linearizable
Behavior as if there were only a single copy of data, updated atomically. See “Linearizability” on page 324.

### Locality
A performance optimization that places frequently accessed data together. See “Data locality for queries” on page 41.

### Lock
A mechanism to ensure exclusive access to a resource, preventing other threads, nodes, or transactions from accessing it until the lock is released. See “Two-Phase Locking (2PL)” on page 257 and “The leader and the lock” on page 301.

### Log
A record of operations, often used for recovery and auditing. See “Two-Phase Locking (2PL)” on page 257 and “The leader and the lock” on page 301.

### Materialize
Performing a computation eagerly and writing out its result, rather than calculating it on demand. See “Aggregation: Data Cubes and Materialized Views” on page 101 and “Materialization of Intermediate State” on page 419.

### Node
An instance of software running on a computer, communicating with other nodes via a network to accomplish tasks.

### Normalized
Structured to eliminate redundancy, so changes to data need only be made in one place. See “Many-to-One and Many-to-Many Relationships” on page 33.

### OLAP
Online Analytical Processing: characterized by aggregating large numbers of records. See “Transaction Processing or Analytics?” on page 90.

### OLTP
Online Transaction Processing: characterized by fast, small-scale queries, often indexed by key. See “Transaction Processing or Analytics?” on page 90.

### Partitioning
Dividing a large dataset or computation into smaller parts across multiple machines. Also known as sharding. See Chapter 6.

### Percentile
A measure of distribution, indicating the value below which a given percentage of observations fall. See “Describing Performance” on page 13.

### Primary Key
A unique identifier for a record, typically generated by the system. See also secondary index.

### Quorum
The minimum number of nodes required to vote on an operation for it to be considered successful. See “Quorums for reading and writing” on page 179.

### Rebalance
Moving data or services between nodes to distribute load evenly. See “Rebalancing Partitions” on page 209.

### Replication
Maintaining copies of data on multiple nodes to ensure availability. See Chapter 5.

### Schema
A description of data structure, including fields and datatypes. Schemas can be checked and evolve over time. See “Schema flexibility in the document model” on page 39 and Chapter 4.

### Secondary Index
An additional data structure allowing efficient searches for records matching certain conditions. See “Other Indexing Structures” on page 85 and “Partitioning and Secondary Indexes” on page 206.

### Serializable
A guarantee that concurrent transactions behave as if they executed sequentially. See “Serializability” on page 251.

### Shared-Nothing
An architecture where independent nodes, each with their own resources, are connected via a network. See the introduction to Part II.

### Skew
1. Imbalanced load across partitions, leading to hot spots. See “Skewed Workloads and Relieving Hot Spots” on page 205 and “Handling skew” on page 407.
2. Timing anomalies causing events to appear in unexpected orders. See discussions of read skew, write skew, and clock skew in various sections.

### Split Brain
A scenario where two nodes simultaneously believe they are the leader, potentially violating system guarantees. See “Handling Node Outages” on page 156 and “The Truth Is Defined by the Majority” on page 300.

### Stored Procedure
A way to encode transaction logic entirely on the database server, avoiding client-server communication during the transaction. See “Actual Serial Execution” on page 252.

### Stream Process
A continuous computation that processes a never-ending stream of events. See Chapter 11.

### Synchronous
The opposite of asynchronous.

### System of Record
The authoritative source of data, where changes are first written and from which other datasets may be derived. See the introduction to Part III.

### Timeout
A simple fault detection method based on the lack of a response within a specified time. See “Timeouts and Unbounded Delays” on page 281.

### Total Order
A comparison method that allows you to always determine which of two things is greater. An ordering where some things are incomparable is called a partial order. See “The causal order is not a total order” on page 341.

### Transaction
A logical unit grouping multiple reads and writes to simplify error handling and concurrency. See Chapter 7.

### Two-Phase Commit (2PC)
An algorithm ensuring that multiple database nodes either all commit or all abort a transaction. See “Atomic Commit and Two-Phase Commit (2PC)” on page 354.

### Two-Phase Locking (2PL)
An algorithm for achieving serializable isolation by acquiring and holding locks on all data read or written by a transaction. See “Two-Phase Locking (2PL)” on page 257.

### Unbounded
Having no known upper limit or size. The opposite of bounded.