# ATTACKING NETWORK PROTOCOLS
## A Hacker’s Guide to Capture, Analysis, and Exploitation
### by James Forshaw
### San Francisco

---

**ATTACKING NETWORK PROTOCOLS. Copyright © 2018 by James Forshaw.**
All rights reserved. No part of this work may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying, recording, or by any information storage or retrieval system, without the prior written permission of the copyright owner and the publisher.

- **ISBN-10:** 1-59327-750-4
- **ISBN-13:** 978-1-59327-750-5

**Publisher: William Pollock**  
**Production Editor: Laurel Chun**  
**Cover Illustration: Garry Booth**  
**Interior Design: Octopod Studios**  
**Developmental Editors: Liz Chadwick and William Pollock**  
**Technical Reviewers: Cliff Janzen, Arrigo Triulzi, and Peter Gutmann**  
**Copyeditor: Anne Marie Walker**  
**Compositors: Laurel Chun and Meg Sneeringer**  
**Proofreader: Paula L. Fleming**  
**Indexer: BIM Creatives, LLC**

For information on distribution, translations, or bulk sales, please contact No Starch Press, Inc. directly:

- **No Starch Press, Inc.**  
  245 8th Street, San Francisco, CA 94103  
  Phone: 1.415.863.9900  
  Email: [info@nostarch.com](mailto:info@nostarch.com)  
  Website: [www.nostarch.com](http://www.nostarch.com)

**Library of Congress Control Number: 2017954429**

No Starch Press and the No Starch Press logo are registered trademarks of No Starch Press, Inc. Other product and company names mentioned herein may be the trademarks of their respective owners. The use of these names is for editorial purposes only, with no intention of trademark infringement.

The information in this book is provided "as is" without warranty. While every precaution has been taken in the preparation of this work, neither the author nor No Starch Press, Inc. shall have any liability to any person or entity with respect to any loss or damage caused or alleged to be caused directly or indirectly by the information contained in it.

---

## About the Author
James Forshaw is a renowned computer security researcher at Google Project Zero, with over ten years of experience in analyzing and exploiting application network protocols. His expertise spans from cracking game consoles to uncovering complex design issues in operating systems, particularly Microsoft Windows. This work earned him the top bug bounty of $100,000 and placed him as the #1 researcher on Microsoft Security Response Center’s (MSRC) published list. He is the creator of Canape, a network protocol analysis tool developed from his extensive experience. James has presented his innovative security research at global conferences such as BlackHat, CanSecWest, and Chaos Computer Congress.

## About the Technical Reviewer
Cliff Janzen has been passionate about technology since the early days of Commodore PET and VIC-20. He discovered his career passion in information security in 2008 after a decade in IT operations. Since then, he has had the opportunity to work with and learn from some of the best in the industry, including Mr. Forshaw and the team at No Starch during the production of this book. Currently, he works as a security consultant, handling everything from policy review to penetration tests. He feels fortunate to have a career that aligns with his favorite hobby and appreciates the support of his wife.

---

## Brief Contents
- Foreword by Katie Moussouris
- Acknowledgments
- Introduction
  - Why Read This Book?
  - What’s in This Book?
  - How to Use This Book
  - Contact Me
- Chapter 1: The Basics of Networking
- Chapter 2: Capturing Application Traffic
- Chapter 3: Network Protocol Structures
- Chapter 4: Advanced Application Traffic Capture
- Chapter 5: Analysis from the Wire
- Chapter 6: Application Reverse Engineering
- Chapter 7: Network Protocol Security
- Chapter 8: Implementing the Network Protocol
- Chapter 9: The Root Causes of Vulnerabilities
- Chapter 10: Finding and Exploiting Security Vulnerabilities
- Appendix: Network Protocol Analysis Toolkit
- Index

---

## Detailed Contents
### FOREWORD by Katie Moussouris
### ACKNOWLEDGMENTS
### INTRODUCTION
- **Why Read This Book?**
- **What’s in This Book?**
- **How to Use This Book**
- **Contact Me**

### Chapter 1: The Basics of Networking
- **Network Architecture and Protocols**
- **The Internet Protocol Suite**
- **Data Encapsulation**
- **Headers, Footers, and Addresses**
- **Data Transmission**
- **Network Routing**
- **My Model for Network Protocol Analysis**
- **Final Words**

### Chapter 2: Capturing Application Traffic
- **Passive Network Traffic Capture**
  - Quick Primer for Wireshark
  - Alternative Passive Capture Techniques
    - System Call Tracing
      - The strace Utility on Linux
      - Monitoring Network Connections with DTrace
      - Process Monitor on Windows
    - Advantages and Disadvantages of Passive Capture
- **Active Network Traffic Capture**
  - Network Proxies
    - Port-Forwarding Proxy
    - SOCKS Proxy
    - HTTP Proxies
      - Forwarding an HTTP Proxy
      - Reverse HTTP Proxy
- **Final Words**

### Chapter 3: Network Protocol Structures
- **Binary Protocol Structures**
  - Numeric Data
  - Booleans
  - Bit Flags
  - Binary Endian
  - Text and Human-Readable Data
  - Variable Binary Length Data
  - Dates and Times
    - POSIX/Unix Time
    - Windows FILETIME
  - Tag, Length, Value Pattern
  - Multiplexing and Fragmentation
  - Network Address Information
  - Structured Binary Formats
- **Text Protocol Structures**
  - Numeric Data
  - Text Booleans
  - Dates and Times
  - Variable-Length Data
  - Structured Text Formats
  - Encoding Binary Data
    - Hex Encoding
    - Base64
- **Final Words**

### Chapter 4: Advanced Application Traffic Capture
- **Rerouting Traffic**
  - Using Traceroute
  - Routing Tables
  - Configuring a Router
    - Enabling Routing on Windows
    - Enabling Routing on *nix
- **Network Address Translation**
  - Enabling SNAT
  - Configuring SNAT on Linux
  - Enabling DNAT
  - Forwarding Traffic to a Gateway
- **DHCP Spoofing**
- **ARP Poisoning**
- **Final Words**

### Chapter 5: Analysis from the Wire
- **The Traffic-Producing Application: SuperFunkyChat**
  - Starting the Server
  - Starting Clients
  - Communicating Between Clients
- **A Crash Course in Analysis with Wireshark**
  - Generating Network Traffic and Capturing Packets
  - Basic Analysis
    - Reading the Contents of a TCP Session
    - Identifying Packet Structure with Hex Dump
    - Viewing Individual Packets
    - Determining the Protocol Structure
    - Testing Our Assumptions
- **Dissecting the Protocol with Python**
- **Developing Wireshark Dissectors in Lua**
  - Creating the Dissector
  - The Lua Dissection
  - Parsing a Message Packet
- **Using a Proxy to Actively Analyze Traffic**
  - Setting Up the Proxy
  - Protocol Analysis Using a Proxy
  - Adding Basic Protocol Parsing
  - Changing Protocol Behavior
- **Final Words**

### Chapter 6: Application Reverse Engineering
- **Compilers, Interpreters, and Assemblers**
  - Interpreted Languages
  - Compiled Languages
  - Static vs. Dynamic Linking
- **The x86 Architecture**
  - The Instruction Set Architecture
  - CPU Registers
  - Program Flow
- **Operating System Basics**
  - Executable File Formats
  - Sections
  - Processes and Threads
  - Operating System Networking Interface
  - Application Binary Interface
- **Static Reverse Engineering**
  - A Quick Guide to Using IDA Pro Free Edition
  - Analyzing Stack Variables and Arguments
  - Identifying Key Functionality
- **Dynamic Reverse Engineering**
  - Setting Breakpoints
  - Debugger Windows
  - Where to Set Breakpoints?
- **Reverse Engineering Managed Languages**
  - .NET Applications
  - Using ILSpy
  - Java Applications
  - Dealing with Obfuscation
- **Reverse Engineering Resources**
- **Final Words**

### Chapter 7: Network Protocol Security
- **Encryption Algorithms**
  - Substitution Ciphers
  - XOR Encryption
  - Random Number Generators
  - Symmetric Key Cryptography
    - Block Ciphers
    - Block Cipher Modes
    - Block Cipher Padding
    - Padding Oracle Attack
    - Stream Ciphers
  - Asymmetric Key Cryptography
    - RSA Algorithm
    - RSA Padding
    - Diffie–Hellman Key Exchange
  - Signature Algorithms
  - Cryptographic Hashing Algorithms
  - Asymmetric Signature Algorithms
  - Message Authentication Codes
- **Public Key Infrastructure**
  - X.509 Certificates
  - Verifying a Certificate Chain
- **Case Study: Transport Layer Security**
  - The TLS Handshake
    - Initial Negotiation
    - Endpoint Authentication
    - Establishing Encryption
    - Meeting Security Requirements
- **Final Words**

### Chapter 8: Implementing the Network Protocol
- **Replaying Existing Captured Network Traffic**
  - Capturing Traffic with Netcat
  - Using Python to Resend Captured UDP Traffic
  - Repurposing Our Analysis Proxy
- **Repurposing Existing Executable Code**
  - Repurposing Code in .NET Applications
  - Repurposing Code in Java Applications
  - Unmanaged Executables
- **Encryption and Dealing with TLS**
  - Learning About the Encryption In Use
  - Decrypting the TLS Traffic
- **Final Words**

### Chapter 9: The Root Causes of Vulnerabilities
- **Vulnerability Classes**
  - Remote Code Execution
  - Denial-of-Service
  - Information Disclosure
  - Authentication Bypass
  - Authorization Bypass
  - Memory Corruption Vulnerabilities
    - Memory-Safe vs. Memory-Unsafe Programming Languages
    - Memory Buffer Overflows
    - Out-of-Bounds Buffer Indexing
    - Data Expansion Attack
    - Dynamic Memory Allocation Failures
  - Default or Hardcoded Credentials
  - User Enumeration
  - Incorrect Resource Access
  - Canonicalization
  - Verbose Errors
  - Memory Exhaustion Attacks
  - Storage Exhaustion Attacks
  - CPU Exhaustion Attacks
  - Algorithmic Complexity
  - Configurable Cryptography
  - Format String Vulnerabilities
  - Command Injection
  - SQL Injection
  - Text-Encoding Character Replacement
- **Final Words**

### Chapter 10: Finding and Exploiting Security Vulnerabilities
- **Fuzz Testing**
  - The Simplest Fuzz Test
  - Mutation Fuzzer
  - Generating Test Cases
  - Vulnerability Triaging
- **Debugging Applications**
  - Improving Your Chances of Finding the Root Cause of a Crash
- **Exploiting Common Vulnerabilities**
  - Exploiting Memory Corruption Vulnerabilities
    - Arbitrary Memory Write Vulnerability
    - Writing Shell Code
      - Getting Started
      - Simple Debugging Technique
      - Calling System Calls
      - Executing the Other Programs
      - Generating Shell Code with Metasploit
  - **Memory Corruption Exploit Mitigations**
    - Data Execution Prevention
    - Return-Oriented Programming Counter-Exploit
    - Address Space Layout Randomization (ASLR)
    - Detecting Stack Overflows with Memory Canaries
- **Final Words**

### Appendix: Network Protocol Analysis Toolkit
- **Passive Network Protocol Capture and Analysis Tools**
  - Microsoft Message Analyzer