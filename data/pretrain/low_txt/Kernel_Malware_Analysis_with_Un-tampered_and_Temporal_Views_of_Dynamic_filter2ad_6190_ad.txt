### 文本优化

#### 代码引用
- **fork.c:610**
- **generic.c:436 0x20**

#### 对象类型
- **静态对象**
- **模块对象**

#### 对象字段偏移
- **task struct (Case (1))**
  - 0x4, 0x12c, 0x130
  - 0x134, 0x138, 0x13c
  - 0x140, 0x144, 0x148
  - 0x1d0
  - 0x1d4
  - 0x1d8
- **proc dir entry (Case (2))**
  - proc root inode operations lookup
  - proc root operations
  - unix dgram ops
  - ext3 dir operations
  - ext3 file operations
- **其他字段**
  - flags, uid, euid
  - suid, fsuid, gid
  - egid, sgid, fsgid
  - cap effective
  - cap inheritable
  - cap permitted
  - get info
  - readdir
  - recvmsg
  - write

#### 攻击分析
本文将通过分析adore-ng rootkit的攻击行为，展示我们的监控系统在检测和分析内核恶意软件方面的有效性。选择adore-ng是因为它具有由动态对象触发的高级恶意行为，其他rootkit也可以用类似的方法进行分析。

**表3** 列出了adore-ng rootkit篡改的内核对象。我们特别关注两种使用动态对象的具体攻击案例：
1. **特权提升**：通过操纵进程控制块（PCB）实现。
2. **函数指针篡改**：通过修改动态proc目录条目对象中的函数指针来劫持内核控制流。

**图4** 展示了攻击前后内核控制流和目标动态内核内存使用的详细视图。X轴表示执行时间，顶部显示内核控制流，下方显示T3和P1地址处动态内存的时间使用情况。粗水平线表示临时分配在这些地址上的内核对象的生命周期。+ 和 × 符号分别表示读取和写入操作。从T3和P1被篡改的时间点（虚线圆圈），监控系统向前和向后扫描执行跟踪，以找到消耗这些对象值的代码执行（即+符号）。

#### 动态内存状态检查
我们的监控系统检查执行跟踪中的动态内存状态，因此面临动态数据身份问题。核心问题是同一内存地址可能在不同时间段对应多个对象。如果知道被检查对象的生命周期，这个问题可以解决，因为监控系统可以过滤掉由共享同一内存地址的其他内核对象触发的无关内核行为。例如，在**图4**中，我们观察到T3的内存也用于其他四个PCB（即T1、T2、T4和T5）。仅依赖内存地址进行分析可能会导致发现所有五个PCB的行为。然而，监控系统限制了检查的时间范围，只选择与T3相关的语义相关行为，从而提供可靠的运行时行为检查，仅与攻击相关。

#### 特权提升攻击
为了展示我们时间监控系统的有效性，我们将讨论adore-ng实施的两种具体攻击。第一种是通过直接修改PCB中的用户和组ID字段实现的特权提升攻击。PCB在**图4**中表示为T3。为了呈现由于T3被篡改而导致的内核行为变化，时间监控系统找到了攻击前T3的最新使用（t2）和攻击后T3的最早使用（t3）。这些时间的数据视图分别在**图5(a)** 和**图5(b)** 中以二维内存图的形式展示。这些视图展示了攻击前后与此攻击相关的内核对象。被篡改的PCB标记为“Case (1)”，其字段值显示在每个视图右侧的框中（PCB状态）。这些值揭示了一种隐蔽的rootkit行为，通过直接修补PCB（DKOM）改变了用户进程的身份。在攻击前（**图5(a)**），PCB具有普通用户的凭据，用户ID为500。然而，在攻击后，**图5(b)** 显示了root用户的凭据。这种直接的状态转换在常规操作系统环境中是异常的。`su` 或 `sudo` 允许通过派生一个进程来保留原始身份的特权操作。因此，我们确定这是一个非法赋予普通用户root权限的特权提升案例。

#### 动态内核对象钩子
第二种adore-ng攻击通过修改函数指针劫持内核代码执行，称为内核对象钩子（KOH）。这种行为发生在检查P1（见**图4**）中被篡改的函数指针的影响时。为了只选择由该对象引起的行为，监控系统引导分析到P1的生命周期。时间监控系统检测到由读取此对象引起的几种行为，并从中选择了两个样本进行比较：攻击前的最新原始行为（t1）和攻击后的最早更改行为（t4）。监控系统在这两个样本上生成了两个内核控制流图，每个图覆盖4000条指令。**图6(a)** 和**图6(b)** 展示了这个被篡改的函数指针如何影响运行时内核行为。Y轴表示内核代码，因此波动的图表显示了在X轴相应时间执行的各种代码。一个钩子调用函数（proc文件读取）读取函数指针并调用它指向的钩子代码。在rootkit攻击之前，控制流跳转到合法的内核函数`tcp_get_info`，然后调用`sprintf`（如**图6(a)** 所示）。然而，在钩子被劫持后，控制流被重定向到rootkit代码，该代码调用`kmalloc`分配自己的内存，然后再返回到原始函数（**图6(b)**）。

#### 讨论
由于LiveDM在VMM层下运行，我们假设内核恶意软件无法直接访问LiveDM的代码或数据。然而，恶意软件可能会表现出混淆行为以迷惑LiveDM的视图。这里我们描述了几种恶意软件可能影响LiveDM的情况以及我们的对策来检测它们。

首先，恶意软件可以实现自定义内存分配器以绕过LiveDM的观察。这种攻击行为可以通过观察任何内存分配器必须使用内部内核数据结构来管理内存区域，或者其内存可能被合法的内存分配器意外重新分配来检测。因此，我们可以通过比较内核数据结构中描述的资源使用情况与LiveDM跟踪的内存使用量来检测未验证的内存分配。任何偏差都可能表明存在自定义内存分配器。

在另一种攻击策略中，恶意软件可能会操纵有效的内核控制流并跳入内存分配器的主体而不从函数开始进入。这种行为可以通过扩展LiveDM来验证函数是否正确进入来检测。例如，VMM可以在内存分配函数进入时设置一个标志，并在函数返回之前插入检查标志。如果在检查之前没有设置标志，VMM会检测到可疑的内存分配。

#### 相关工作
静态类型投影映射已在防御内核恶意软件攻击中广泛使用。SBCFI [16] 使用内核内存映射检测对内核控制流图的持久性篡改。Gibraltar [1] 基于内核内存映射推导数据不变量以检测内核恶意软件。KOP [5] 通过结合静态分析和内存分析，使用扩展类型图提高了映射的准确性。补充这些方法，基于分配的映射提供了不受内核恶意软件篡改的内核对象视图，准确反映了动态内核内存的时间状态，适用于内核/内核恶意软件执行的时间分析。

PoKeR [23] 和 Rkproﬁler [31] 使用从rootkit指令生成的动态类型投影映射来理解rootkit行为。由于仅使用rootkit活动作为输入生成内核内存映射，这种方法只能覆盖由rootkit代码直接操作的内核对象。此外，有些攻击难以通过这些分析器分析，因为rootkit可以使用各种资源（如硬件寄存器）来找到攻击目标 [21]。

KernelGuard (KG) [20] 是一个通过监视和引导内核内存访问来防止基于DKOM的内核rootkit的系统。它通过在VMM级别强制执行特定数据结构策略来扫描内核内存，识别要监视的内核对象。类似于类型投影映射，KG的内核内存视图基于运行时内核内存内容，容易受到恶意软件篡改。因此，通过采用LiveDM作为底层内核内存映射机制，可以提高KG的可靠性。

LiveDM涉及捕获单个动态内核对象的位置、类型和生命周期的技术，属于虚拟机内省的领域 [9]。

#### 结论
我们提出了基于分配的映射方案及其实现LiveDM。通过捕获内核对象的分配和释放事件，我们的方案提供了不受内核恶意软件篡改内核内存内容影响的内核对象视图。LiveDM生成的内核对象映射准确反映了动态内核内存的状态，并跟踪所有动态内核对象的生命周期。这种时间属性在时间内核执行分析中非常有用，可以集成分析内核控制流和动态内存状态。我们通过开发隐藏内核对象检测器和时间恶意软件行为监控系统，并将其应用于一系列内核rootkit，展示了LiveDM系统的有效性。

#### 致谢
感谢匿名审稿人的宝贵意见。本研究部分得到了空军研究实验室（AFRL）合同FA8750-09-1-0224和国家科学基金会（NSF）资助0716444, 0852131, 0855036和0855141的支持。本文中的任何观点、发现和结论均属于作者个人，不一定反映AFRL或NSF的观点。

#### 参考文献
1. Baliga, A., Ganapathy, V., Iftode, L.: Automatic Inference and Enforcement of Kernel Data Structure Invariants. In: Proceedings of the 24th Annual Computer Security Applications Conference (ACSAC 2008), pp. 77–86 (2008)
2. Bellard, F.: QEMU: A Fast and Portable Dynamic Translator. In: Proceedings of the USENIX Annual Technical Conference, FREENIX Track, pp. 41–46 (2005)
3. Boehm, H.J., Weiser, M.: Garbage Collection in an Uncooperative Environment. Software, Practice and Experience (1988)
4. Butler, J.: DKOM (Direct Kernel Object Manipulation), http://www.blackhat.com/presentations/win-usa-04/bh-win-04-butler.pdf
5. Carbone, M., Cui, W., Lu, L., Lee, W., Peinado, M., Jiang, X.: Mapping Kernel Objects to Enable Systematic Integrity Checking. In: Proceedings of the 16th ACM Conference on Computer and Communications Security, CCS 2009 (2009)
6. Chow, J., Garfinkel, T., Chen, P.M.: Decoupling Dynamic Program Analysis from Execution in Virtual Environments. In: Proceedings of 2008 USENIX Annual Technical Conference, USENIX 2008 (2008)
7. Cozzie, A., Stratton, F., Xue, H., King, S.T.: Digging For Data Structures. In: Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation (2008)
8. Free Software Foundation: The GNU Compiler Collection, http://gcc.gnu.org/
9. Garfinkel, T., Rosenblum, M.: A Virtual Machine Introspection Based Architecture for Intrusion Detection. In: Proceedings of the 10th Annual Network and Distributed Systems Security Symposium, NDSS 2003 (2003)
10. Hoglund, G.: Kernel Object Hooking Rootkits (KOH Rootkits), http://www.rootkit.com/newsread.php?newsid=501
11. Hund, R., Holz, T., Freiling, F.C.: Return-Oriented Rootkits: Bypassing Kernel Code Integrity Protection Mechanisms. In: Proceedings for the 18th USENIX Security Symposium (2009)
12. Lin, Z., Riley, R.D., Xu, D.: Polymorphing Software by Randomizing Data Structure Layout. In: Flegel, U., Bruschi, D. (eds.) DIMVA 2009. LNCS, vol. 5587, pp. 107–126. Springer, Heidelberg (2009)
13. MITRE Corp.: Common Vulnerabilities and Exposures, http://cve.mitre.org/
14. Parallels: Parallels, http://www.parallels.com/
15. Petroni, N.L., Fraser, T., Molina, J., Arbaugh, W.A.: Copilot - A Coprocessor-based Kernel Runtime Integrity Monitor. In: Proceedings for the 13th USENIX Security Symposium (August 2004)
16. Petroni, N.L., Hicks, M.: Automated Detection of Persistent Kernel Control-Flow Attacks. In: Proceedings of the 14th ACM Conference on Computer and Communications Security, CCS 2007 (2007)
17. Petroni, N.L., Walters, A., Fraser, T., Arbaugh, W.A.: FATKit: A Framework for the Extraction and Analysis of Digital Forensic Data from Volatile System Memory. Digital Investigation Journal 3(4), 197–210 (2006)
18. Petroni, Jr. N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An Architecture for Specification-Based Detection of Semantic Integrity Violations in Kernel Dynamic Data. In: Proceedings of the 15th Conference on USENIX Security Symposium, USENIX-SS 2006 (2006)
19. Polishchuk, M., Liblit, B., Schulze, C.W.: Dynamic Heap Type Inference for Program Understanding and Debugging. In: Proceedings of the 34th Annual Symposium on Principles of Programming Languages. ACM, New York (2007)
20. Rhee, J., Riley, R., Xu, D., Jiang, X.: Defeating Dynamic Data Kernel Rootkit Attacks via VMM-Based Guest-Transparent Monitoring. In: International Conference on Availability, Reliability and Security, ARES 2009 (2009)
21. Rhee, J., Xu, D.: LiveDM: Temporal Mapping of Dynamic Kernel Memory for Dynamic Kernel Malware Analysis and Debugging. Tech. Rep. 2010-02, CERIAS (2010)
22. Riley, R., Jiang, X., Xu, D.: Guest-Transparent Prevention of Kernel Rootkits with VMM-based Memory Shadowing. In: Lippmann, R., Kirda, E., Trachtenberg, A. (eds.) RAID 2008. LNCS, vol. 5230, pp. 1–20. Springer, Heidelberg (2008)
23. Riley, R., Jiang, X., Xu, D.: Multi-Aspect Profiling of Kernel Rootkit Behavior. In: Proceedings of the 4th European Conference on Computer Systems (Eurosys 2009) (April 2009)
24. Seshadri, A., Luk, M., Qu, N., Perrig, A.: SecVisor: A Tiny Hypervisor to Provide Lifetime Kernel Code Integrity for Commodity OSes. In: Proceedings of 21st Symposium on Operating Systems Principles (SOSP 2007). ACM, New York (2007)
25. Shacham, H.: The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86). In: Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS 2007), pp. 552–561. ACM, New York (2007)
26. Sun Microsystems, Inc: VirtualBox, http://www.virtualbox.org/
27. The Month of Kernel Bugs archive, http://projects.info-pull.com/mokb/
28. US-CERT: Vulnerability Notes Database, http://www.kb.cert.org/vuls/
29. VMware, Inc.: VMware Virtual Machine Technology, http://www.vmware.com/
30. Wei, J., Payne, B.D., Griffin, J., Pu, C.: Soft-Timer Driven Transient Kernel Control Flow Attacks and Defense. In: Proceedings of the 24th Annual Computer Security Applications Conference, ACSAC 2008 (December 2008)
31. Xuan, C., Copeland, J.A., Beyah, R.A.: Toward Revealing Kernel Malware Behavior in Virtual Execution Environments. In: Proceedings of 12th International Symposium on Recent Advances in Intrusion Detection (RAID 2009), pp. 304–325 (2009)

希望这些优化能帮助你更好地表达你的内容！