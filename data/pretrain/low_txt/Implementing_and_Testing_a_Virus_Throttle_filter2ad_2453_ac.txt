### 4.2.2 Mobile Code Propagation

To evaluate the effectiveness of the virus throttle in mitigating the propagation of a real worm, we set up a testbed with a Class C network containing 16 Server Blades. Each blade ran a VMware-encapsulated copy of Windows 2000 Professional, which was vulnerable to the W32/Nimda-D virus [21]. A machine configured as the default gateway and DHCP server for this network was also included.

One of the Windows machines was infected with W32/Nimda-D, and its progress through the network was monitored by collecting data using a sniffer, as described in the previous section. The collected data was analyzed to determine the time at which each system became infected. By varying the number of machines on the network that had the throttle installed and repeating each experiment 10 times, we calculated the average time taken for a given number of machines to be infected, assuming different percentages of the machines had virus throttles installed. These results are illustrated in Figure 4.

**Figure 3: Average Time Taken by the Throttle to Stop Real and Test Worms**

| Connections per Second | Stopping Time (seconds) |
|------------------------|-------------------------|
| 120                    | 0.25                    |
| 20                     | 5.44                    |
| 40                     | 2.34                    |
| 60                     | 1.37                    |
| 80                     | 1.04                    |
| 100                    | 0.91                    |
| 150                    | 0.21                    |
| 200                    | 0.02                    |
| 850                    | 0.02                    |

**Figure 4: Infection Times for Different Numbers of Installed Virus Throttles (Nimda)**

As shown in Figure 4, when no throttles were installed on any of the 16 machines, Nimda took an average of just over 20 minutes to spread to all 16 machines. This time was slightly reduced when 25% and 50% of the machines had throttles installed. However, when at least 75% of the machines were equipped with the throttle, Nimda was only able to infect, on average, around half of the machines in the same amount of time. After more than 70 minutes, it had not spread to all 16 machines. This represents a 50% reduction in the number of infected machines and a significant increase in the time taken for the worm to spread. When every machine was equipped with the throttle, the worm was unable to spread at all.

In addition to the damage caused by the malicious payloads of many high-speed worms, these worms often cause denial-of-service attacks through the large amounts of network traffic they generate. For example, the Sapphire worm caused network uplinks to become saturated due to the sheer volume of traffic generated by infected machines. Nimda, while generating less network traffic, caused routers and firewalls to fail due to their inability to process the increased number of connection requests from infected machines. Figure 5 shows the traffic load over time on the test network. The effect of having a network protected by the throttle is even more pronounced, with an approximately 25% reduction in viral traffic when only 25% of the network is protected. When 50% of the machines are throttled, the traffic load is reduced by over half, and when 75% are throttled, it is reduced to around 10% of its unthrottled average. Having all machines equipped with the throttle quickly reduces all viral traffic to zero. These results demonstrate the ability of the virus throttle to significantly reduce the amount of network traffic generated by mobile code.

**Figure 5: Traffic Loads for Different Numbers of Installed Virus Throttles (Nimda)**

### 4.2.3 User Trials

While the previous section demonstrates that the virus throttle is highly effective in slowing and stopping the spread of certain classes of worms, it is equally important to assess its impact on the performance of legitimate applications. If the throttle, for example, prevents users from accessing their emails or significantly slows down this process, it will likely be uninstalled.

Preliminary tests, in which the throttle was installed on several researchers' machines, did not result in any reports of impaired network performance. We are currently conducting larger user trials, where the throttle is installed on the gateway used by a considerable number of users running a wide range of network-capable applications under various operating systems. Initial results also indicate no noticeable degradation in network performance.

To further explore the interaction of the throttle with legitimate network-aware applications, we have implemented a throttle simulator that takes packet traces as input. To gather these packet traces, we configured a monitoring port on an 80-port switch on HP's internal network and ran a packet sniffer on this port. This allowed us to collect large quantities of data over extended periods from a variety of machines. By separating these traces on a machine-by-machine basis and running them through the simulator, we can rapidly assess the applicability of the throttle to different classes of machines running different services. Preliminary results from the simulator show that the majority of network traffic from a throttled machine passes undelayed, and none of the large quantities of legitimate network traffic we have gathered is mistaken for viral traffic. A fuller discussion of the applicability of our approach is provided in [27].

### 5 Conclusion

In this paper, after presenting the necessary background, we have detailed the implementation and testing of a virus throttle. Our tests have demonstrated that the virus throttle is highly effective in detecting, slowing, and stopping both real worms such as W32/Nimda-D and a test worm configured to scan at different rates. Our results also show that the virus throttle can substantially reduce the global spread of a worm and, consequently, the amount of network traffic produced.

In conclusion, this paper has demonstrated that virus throttling is a powerful tool in preventing the propagation of high-speed worms. We believe that, when combined with current signature-based methods, throttling will be an essential component of any multilayered anti-virus solution.

### References

[1] D. P. Bovet and M. Cesati. Understanding the Linux Kernel. O’Reilly & Associates, 2002.

[2] D. Bruschi and E. Rosti. Disarming Offense to Enable Defense. In Proc. of the New Security Paradigms Workshop 2000, pages 69–75, Ireland, 2000.

[3] D. Bruschi and E. Rosti. AngeL: A Tool to Disarm Computer Systems. In Proc. of the 2001 Workshop on New Security Paradigms, 2001.

[4] CERT Advisory CA-2001-19. CERT Coordination Center. http://www.cert.org/advisories/CA-2001-19.html.

[5] D. Chess. The Future of Viruses on the Internet. Presented at the Virus Bulletin International Conference, October 1-3, 1997.

[6] F. Cohen. Computer Viruses - Theory and Experiments. In Proc. of the 7th Security Conference, pages 143–158, 1984.

[7] F. Cohen. A Formal Definition of Computer Worms and Some Related Results. Computers and Security, 11(7):641–652, 1992.

[8] F. Cohen. A Short Course on Computer Viruses. John Wiley & Sons, Inc., 1994.

[9] fyodor. The Art of Port Scanning. Phrack Magazine, Volume 7, Issue 51, 11 of 17, 1997.

[10] R. A. Grimes. Malicious Mobile Code. O’Reilly & Associates, 2001.

[27] M. M. Williamson. Throttling Viruses: Restricting Propagation to Defeat Malicious Mobile Code. In Proc. of the ACSAC Security Conference, Las Vegas, Nevada, 2002.

[28] M. M. Williamson. The Design, Implementation, and Testing of an Email Throttle. Submitted to the Annual Computer Security Applications Conference, Las Vegas, N.V., 2003.

[29] M. M. Williamson and J. Leveille. An Epidemiological Model of Virus Spread. To appear in the Proceedings of the Annual Virus Bulletin Conference, 2003.

[30] M. M. Williamson, J. Twycross, J. Griffin, and A. Norman. Virus Throttling. In Virus Bulletin, U.K., 2003.

[11] HP Procurve Series 2500 Switches - Management and Configuration Guide. Hewlett-Packard Company, 2000.

[12] HP Blade Server bh7800 Service Guide. Hewlett-Packard Company, 2002.

[13] kossak and lifeline. Building into the Linux Network Layer. Phrack Magazine, Volume 9, Issue 55, 12 of 16, 1999.

[14] R. Lemos. Year of the Worm. http://new.com.com/2102-1001-254061.html.

[15] E. Messmer. Behavior Blocking Repels New Viruses. http://www.nwfusion.com/news/2002/0128antivirus.html.

[16] D. Moore, V. Paxson, S. Savage, C. Shannon, S. Staniford, and N. Weaver. The Spread of the Sapphire/Slammer Worm. http://www.cs.berkeley.edu/nweaver/sapphire/.

[17] J. Postel. Transmission Control Protocol. RFC 793, DARPA, 1981.

[18] A. Rubini and J. Corbet. Linux Device Drivers. O’Reilly & Associates, 2001.

[19] H. G. Schuster. Complex Adaptive Systems. Scator Verlag, 2001.

[20] A. Somayaji and S. Forrest. Automated Response Using System-Call Delays. In Proc. of the 9th USENIX Security Symposium, pages 185–197, 2000.

[21] W32/Nimda-D. Sophos Anti-Virus. http://www.sophos.org/virusinfo/analysis/w32nimdad.html.

[22] W32/SQLSlam-A. Sophos Anti-Virus. http://www.sophos.org/virusinfo/analysis/w32sqlslama.html.

[23] W. R. Stevens. UNIX Network Programming. Prentice Hall, 1990.

[24] tcpdump. http://www.tcpdump.org.

[25] J. Twycross. Studying Mobile Code: An Experimental Setup. Technical Report, Hewlett-Packard Labs, 2002.

[26] VMware Workstation 3.2. VMware Inc. http://www.vmware.com.