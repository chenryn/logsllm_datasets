### References

1. **Track at the RSA Conference on Topics in Cryptology (San Jose, CA) (CT-RSA’06).**
   - Springer-Verlag, Berlin, Heidelberg, 1–20.
   - DOI: [10.1007/11605805_1](https://doi.org/10.1007/11605805_1)

2. **Ashay Rane, Calvin Lin, and Mohit Tiwari. 2015. Raccoon: Closing Digital Side-Channels through Obfuscated Execution.**
   - In Proceedings of the 24th USENIX Conference on Security Symposium (Washington, D.C.) (SEC’15).
   - USENIX Association, USA, 431–446.

3. **Frédéric Recoules, Sébastien Bardin, Richard Bonichon, Laurent Mounier, and Marie-Laure Potet. 2019. Get Rid of Inline Assembly through Verification-Oriented Lifting.**
   - In Proceedings of the 34th IEEE/ACM International Conference on Automated Software Engineering (San Diego, California) (ASE ’19).
   - IEEE Press, 577–589.
   - DOI: [10.1109/ASE.2019.00060](https://doi.org/10.1109/ASE.2019.00060)

4. **Bruno Rodrigues, Fernando Magno Quintão Pereira, and Diego F. Aranha. 2016. Sparse Representation of Implicit Flows with Applications to Side-Channel Detection.**
   - In Proceedings of the 25th International Conference on Compiler Construction (Barcelona, Spain) (CC 2016).
   - Association for Computing Machinery, New York, NY, USA, 110–120.
   - DOI: [10.1145/2892208.2892230](https://doi.org/10.1145/2892208.2892230)

5. **B. K. Rosen, M. N. Wegman, and F. K. Zadeck. 1988. Global Value Numbers and Redundant Computations.**
   - In Proceedings of the 15th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (San Diego, California, USA) (POPL ’88).
   - Association for Computing Machinery, New York, NY, USA, 12–27.
   - DOI: [10.1145/73560.73562](https://doi.org/10.1145/73560.73562)

6. **Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-Boundary Data Sampling.**
   - In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security (London, United Kingdom) (CCS ’19).
   - Association for Computing Machinery, New York, NY, USA, 753–768.
   - DOI: [10.1145/3319535.3354252](https://doi.org/10.1145/3319535.3354252)

7. **Martin Schwarzl, Claudio Canella, Daniel Gruss, and Michael Schwarz. 2021. Specfuscator: Evaluating Branch Removal as a Spectre Mitigation.**
   - In Financial Cryptography and Data Security 2021.

8. **Elaine Shi, T. H. Hubert Chan, Emil Stefanov, and Mingfei Li. 2011. Oblivious RAM with O((logN)³) Worst-Case Cost.**
   - In Advances in Cryptology – ASIACRYPT 2011. Lecture Notes in Computer Science, vol 7073.
   - Springer Berlin Heidelberg, 197–214.
   - DOI: [10.1007/978-3-642-25385-0_11](https://doi.org/10.1007/978-3-642-25385-0_11)

9. **Yannis Smaragdakis and George Balatsouras. 2015. Pointer Analysis.**
   - Found. and Trends in Prog. Lang. 2, 1 (2015), 1–69.
   - DOI: [10.1561/2500000014](https://doi.org/10.1561/2500000014)

10. **Yannis Smaragdakis, Martin Bravenboer, and Ondrej Lhoták. 2011. Pick Your Contexts Well: Understanding Object-Sensitivity.**
    - In Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (Austin, Texas, USA) (POPL ’11).
    - Association for Computing Machinery, New York, NY, USA, 17–30.
    - DOI: [10.1145/1926385.1926390](https://doi.org/10.1145/1926385.1926390)

11. **Luigi Soares and Fernando Magno Quintao Pereira. 2021. Memory-Safe Elimination of Side Channels.**
    - (to appear) In Proceedings of the 2021 IEEE/ACM International Symposium on Code Generation and Optimization (CGO 2021).

12. **Juraj Somorovsky. 2016. Systematic Fuzzing and Testing of TLS Libraries.**
    - In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (Vienna, Austria) (CCS ’16).
    - Association for Computing Machinery, New York, NY, USA, 1492–1504.
    - DOI: [10.1145/2976749.2978411](https://doi.org/10.1145/2976749.2978411)

13. **Bjarne Steensgaard. 1996. Points-to Analysis in Almost Linear Time.**
    - In Proceedings of the 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (St. Petersburg Beach, Florida, USA) (POPL ’96).
    - Association for Computing Machinery, New York, NY, USA, 32–41.
    - DOI: [10.1145/237721.237727](https://doi.org/10.1145/237721.237727)

14. **Emil Stefanov, Marten van Dijk, Elaine Shi, Christopher Fletcher, Ling Ren, Xiangyao Yu, and Srinivas Devadas. 2013. Path ORAM: An Extremely Simple Oblivious RAM Protocol.**
    - In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (CCS ’13).
    - Association for Computing Machinery, New York, NY, USA, 299–310.
    - DOI: [10.1145/2508859.2516660](https://doi.org/10.1145/2508859.2516660)

15. **N. Stephens, S. Biles, M. Boettcher, J. Eapen, M. Eyole, G. Gabrielli, M. Horsnell, G. Magklis, A. Martinez, N. Premillieu, A. Reid, A. Rico, and P. Walker. 2017. The ARM Scalable Vector Extension.**
    - IEEE Micro 37, 2 (2017), 26–39.
    - DOI: [10.1109/MM.2017.35](https://doi.org/10.1109/MM.2017.35)

16. **G Edward Suh, Dwaine Clarke, Blaise Gassend, Marten Van Dijk, and Srinivas Devadas. 2003. AEGIS: Architecture for Tamper-Evident and Tamper-Resistant Processing.**
    - In ACM International Conference on Supercomputing 25th Anniversary Volume.
    - 357–368.

17. **Yulei Sui and Jingling Xue. 2016. SVF: Interprocedural Static Value-Flow Analysis in LLVM.**
    - In Proceedings of the 25th International Conference on Compiler Construction (Barcelona, Spain) (CC 2016).
    - Association for Computing Machinery, New York, NY, USA, 265–266.
    - DOI: [10.1145/2892208.2892235](https://doi.org/10.1145/2892208.2892235)

18. **U.S. National Security Agency. 2016. Commercial National Security Algorithm Suite and Quantum Computing FAQ.**
    - (Jan. 2016).

19. **Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx. 2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient out-of-Order Execution.**
    - In Proceedings of the 27th USENIX Conference on Security Symposium (Baltimore, MD, USA) (SEC’18).
    - USENIX Association, USA, 991–1008.

20. **Victor van der Veen, Yanick Fratantonio, Martina Lindorfer, Daniel Gruss, Clementine Maurice, Giovanni Vigna, Herbert Bos, Kaveh Razavi, and Cristiano Giuffrida. 2016. DRAMMER: Deterministic Rowhammer Attacks on Mobile Platforms.**
    - In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (Vienna, Austria) (CCS ’16).
    - Association for Computing Machinery, New York, NY, USA, 1675–1689.
    - DOI: [10.1145/2976749.2978406](https://doi.org/10.1145/2976749.2978406)

21. **S. van Schaik, A. Milburn, S. Österlund, P. Frigo, G. Maisuradze, K. Razavi, H. Bos, and C. Giuffrida. 2019. RIDL: Rogue In-Flight Data Load.**
    - In 2019 IEEE Symposium on Security and Privacy (SP).
    - 88–105.
    - DOI: [10.1109/SP.2019.00087](https://doi.org/10.1109/SP.2019.00087)

22. **Bhanu C Vattikonda, Sambit Das, and Hovav Shacham. 2011. Eliminating Fine-Grained Timers in Xen.**
    - In Proceedings of the 3rd ACM Workshop on Cloud Computing Security Workshop.
    - 41–46.

23. **Xi Wang, Nickolai Zeldovich, M. Frans Kaashoek, and Armando Solar-Lezama. 2013. Towards Optimization-Safe Systems: Analyzing the Impact of Undefined Behavior.**
    - In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles (SOSP ’13).
    - Association for Computing Machinery, New York, NY, USA, 260–275.
    - DOI: [10.1145/2517349.2522728](https://doi.org/10.1145/2517349.2522728)

24. **Zhenghong Wang and Ruby B. Lee. 2007. New Cache Designs for Thwarting Software Cache-Based Side Channel Attacks.**
    - In Proceedings of the 34th Annual International Symposium on Computer Architecture (San Diego, California, USA) (ISCA ’07).
    - Association for Computing Machinery, New York, NY, USA, 494–505.
    - DOI: [10.1145/1250662.1250723](https://doi.org/10.1145/1250662.1250723)

25. **Zhenghong Wang and Ruby B. Lee. 2008. A Novel Cache Architecture with Enhanced Performance and Security.**
    - In 2008 41st IEEE/ACM International Symposium on Microarchitecture.
    - IEEE, 83–93.

26. **Samuel Weiser, Andreas Zankl, Raphael Spreitzer, Katja Miller, Stefan Mangard, and Georg Sigl. 2018. DATA – Differential Address Trace Analysis: Finding Address-Based Side-Channels in Binaries.**
    - In 27th USENIX Security Symposium (USENIX Security 18).
    - USENIX Association, Baltimore, MD, 603–620.
    - URL: [https://www.usenix.org/conference/usenixsecurity18/presentation/weiser](https://www.usenix.org/conference/usenixsecurity18/presentation/weiser)

27. **John Whaley and Monica S. Lam. 2004. Cloning-Based Context-Sensitive Pointer Alias Analysis Using Binary Decision Diagrams.**
    - In Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation (Washington DC, USA) (PLDI ’04).
    - Association for Computing Machinery, New York, NY, USA, 131–144.
    - DOI: [10.1145/996841.996859](https://doi.org/10.1145/996841.996859)

28. **Meng Wu, Shengjian Guo, Patrick Schaumont, and Chao Wang. 2018. Eliminating Timing Side-Channel Leaks Using Program Repair.**
    - In Proc. of the 27th ACM SIGSOFT Int. Symposium on Software Testing and Analysis (ISSTA 2018).
    - Association for Computing Machinery, 15–26.
    - DOI: [10.1145/3213846.3213851](https://doi.org/10.1145/3213846.3213851)

29. **Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack.**
    - In Proc. of the 23rd USENIX Security Symposium (San Diego, CA) (SEC’14).
    - USENIX Association, USA, 719–732.

30. **Yuval Yarom, Daniel Genkin, and Nadia Heninger. 2016. CacheBleed: A Timing Attack on OpenSSL Constant Time RSA.**
    - In Cryptographic Hardware and Embedded Systems – CHES 2016, Benedikt Gierlichs and Axel Y. Poschmann (Eds.).
    - Springer Berlin Heidelberg, Berlin, Heidelberg, 346–367.

31. **Ting Yu and Owen Kaser. 1997. A Note on “On the Conversion of Indirect to Direct Recursion”.**
    - ACM Trans. Program. Lang. Syst. 19, 6 (Nov. 1997), 1085–1087.
    - DOI: [10.1145/267959.269973](https://doi.org/10.1145/267959.269973)

32. **Danfeng Zhang, Aslan Askarov, and Andrew C. Myers. 2011. Predictive Mitigation of Timing Channels in Interactive Systems.**
    - In Proceedings of the 18th ACM Conference on Computer and Communications Security (CCS ’11).
    - Association for Computing Machinery, 563–574.
    - DOI: [10.1145/2046707.2046772](https://doi.org/10.1145/2046707.2046772)

33. **Danfeng Zhang, Aslan Askarov, and Andrew C. Myers. 2012. Language-Based Control and Mitigation of Timing Channels.**
    - In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (Beijing, China) (PLDI ’12).
    - Association for Computing Machinery, New York, NY, USA, 99–110.
    - DOI: [10.1145/2254064.2254078](https://doi.org/10.1145/2254064.2254078)

34. **Yinqian Zhang, Ari Juels, Alina Oprea, and Michael K. Reiter. 2011. HomeAlone: Co-residency Detection in the Cloud via Side-Channel Analysis.**
    - In 2011 IEEE Symposium on Security and Privacy.
    - IEEE, 313–328.

35. **Yinqian Zhang and Michael K. Reiter. 2013. DüPpel: Retrofitting Commodity Operating Systems to Mitigate Cache Side Channels in the Cloud.**
    - In Proceedings of the 2013 ACM SIGSAC Conference on Computer & Communications Security (CCS ’13).
    - Association for Computing Machinery, 827–838.
    - DOI: [10.1145/2508859.2516741](https://doi.org/10.1145/2508859.2516741)

### Decoy-Path Side Channels

We use the following code snippet to illustrate how existing constant-time protection solutions struggle to maintain both memory safety and real execution invariants along decoy paths, ultimately introducing new side channels for attackers to detect decoy paths.

```c
char last_result;
char tableA[8192];
char tableB[4096];

char secret_hash(unsigned int secret) {
    if (secret < 4096) {
        register char tmp = tableB[secret];
        tmp ^= tableA[secret];
        last_result = tmp;
    }
    return last_result;
}
```

The `if` condition at line 6 guards the statements at lines 7-9 (two read operations followed by one write operation). Consider the case where `4096 <= secret < 8192`. All state-of-the-art solutions [20, 53, 62, 80] would also run the corresponding decoy path (statements inside the condition, normally executed only when `secret < 4096`), but with different code transformations.

- **Coppens et al. [20]**: Rewires the memory accesses at lines 7-9 to touch a shadow address, allowing an attacker to detect decoy path execution by observing (three) accesses to the shadow address.
- **SC-Eliminator [80]**: Preloads both tables before executing the branch but executes the read/write operations at lines 7-9 with unmodified addresses, introducing a decoy out-of-bounds read at line 7. This can cause an exception if the memory after `tableB` is unmapped, leading to a termination-based decoy-path side channel.
- **Raccoon [53]**: Masks the exception, but this strategy introduces an exception handling-based decoy-path side channel.
- **Soares et al. [62]**: Replaces the unsafe read access with an access to a shadow address, which introduces the same decoy-path side channel as discussed for Coppens et al. [20].

Even if no exception is caused by the out-of-bounds read at line 7 and the out-of-bounds behavior is eliminated without introducing other side channels, an attacker can still detect decoy-path execution by side-channeling the read at line 8. The shadow access of Coppens et al. [20] would leak decoy-path execution, as would all the other solutions [53, 62, 80], which allow an in-bound access at offset `4096 <= secret < 8192` to `tableA`. Such access would never happen during real execution, breaking a program invariant on a decoy path and introducing a decoy data-flow side channel.

In contrast, Constantine's combined CFL/DFL strategy ensures the same data accesses during real or decoy execution, preserving program invariants and eliminating decoy-path side channels by construction. Table 3 provides a detailed comparison between Constantine and prior solutions.

### Conditional Selection

The `ct_select` primitive of §4.2 can be instantiated in different ways. We studied how the LLVM compiler optimizes different schemes for constant-time conditional selection to pick the best possible alternative(s) in Constantine.

For the discussion, we consider the pointer selection primitive used to differentiate decoy and real store operations (i.e., to conditionally select whether we should actually modify memory contents). The alternatives evaluated are:

- **Scheme 1**: `asm cmov`
- **Scheme 2**: `ptr = taken ? ptr : (void*)NULL`
- **Scheme 3**: `ptr = (void*)((size_t)ptr & (-taken))`
- **Scheme 4**: `ptr = (void*)((size_t)ptr & taken)`
- **Scheme 5**: `ptr = (void*)((size_t)ptr * taken)`

We assume a `void* ptr` pointer given as input to the `ct_store` primitive, and `taken` values being 1 on real paths and 0 on decoy ones unless otherwise stated. Instead of reporting end-to-end overheads, we mask the slowdown from DFL by configuring CFL to use a single shadow variable as in the solution of Coppens et al. [20], then compute the relative slowdowns of our protected `mulmod` wolfSSL version (§7) for the different `ct_select` schemes, using the default non-CT implementation (W=1) as the baseline.

- **Scheme 1**: 9.6x
- **Scheme 2**: 7.5x
- **Scheme 3**: 7.3x
- **Scheme 4**: 7.7x
- **Scheme 5**: 7.2x

**Scheme 1** forces the backend to emit `cmov` instructions at the assembly level, similar to the predicated execution mechanism discussed in §2. This constrains the optimizer’s decisions, making it the worst-performing alternative. **Scheme 2** is essentially an LLVM IR select statement around the `taken` indirection predicate, on which the compiler can reason and optimize. After IR-level optimizations, the backend emits a `cmov` instruction for most occurrences, testing the value of the `taken` variable for conditional assignment.

### Comparison Table

| Feature | Coppens et al. | Raccoon | SC-Eliminator | Soares et al. | Constantine |
|---------|----------------|---------|---------------|---------------|-------------|
| Control Flows | Predicated | Transactional | Hybrid | Hybrid | Linearization |
| Data Flows | - | Path ORAM | Preloading | - | Linearization |
| Loop Handling Strategy | Unroll | Unroll | Unroll | Unroll | Just-in-Time |
| Integration with Compiler | Backend | IR Level | IR Level | IR Level | IR Level |
| Sensitive Region Identification | No | SW Emulation | Code+Data* | No | Code+Data |
| Decoy-Path Side Channels | Code | Code+Data | Decoy Paths till Bound | Code | None |
| Fix Variable-Latency Instructions (e.g., div) | No | - | No | - | Yes |
| Threat Model | - | - | - | - | Comprehensive |
| Variable-Length Loops | - | - | - | - | Supported |
| Indirect Calls | - | - | - | - | Supported |
| Recursion | - | - | - | - | Supported |
| Spatial Safety Preserved | - | - | - | Yes | Yes |
| Supported Data Pointers | Arrays | Arrays | Arrays | Arrays | General |

This table compares the technical, security, and compatibility features of state-of-the-art solutions with Constantine.