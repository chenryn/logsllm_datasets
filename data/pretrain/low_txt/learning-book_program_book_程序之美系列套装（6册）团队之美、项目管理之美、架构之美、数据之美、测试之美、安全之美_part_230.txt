### 优化后的文本

#### 萨瓦别墅事件与勒·柯布西耶
萨瓦一家最终离开了巴黎，使得勒·柯布西耶（Le Corbusier）得以避免在法庭上应诉。这一切的起因是他设计了一座几乎无法居住但极其美观的“居住机器”（machine-for-living）（De Botton, 2006）。这种设计理念引发了广泛的争议。

#### 密斯·凡德罗的设计理念
另一位现代建筑的重要人物路德维希·密斯·凡德罗（Ludwig Mies van der Rohe）采用了基于I型金属梁的极简主义规范系统。他坚信这些金属梁是多利安柱式（Doric Column）的现代等价物，并在书桌旁保留了全尺寸的I型金属梁详细资料以确保比例准确（Jencks, 2006）。

密斯·凡德罗最著名的是他对“少即是多”原则的运用，通过这一原则，他希望将建筑设计回归其本质：去除所有不必要的装饰和元素，只保留那些实现特定功能的部分。然而，在纽约的西格拉姆大厦（Seagram Building）项目中，他遇到了一个难题。尽管他想展示结构中的I型金属梁，但美国建筑法规要求金属支撑必须用防火材料如混凝土包裹。为了解决这个问题，密斯·凡德罗决定在外墙上添加假的I型金属梁，以“揭示”内部结构。此外，为了保持视觉效果的一致性，窗户只能处于三种状态：完全打开、完全关闭或半开（Wolfe, 1982）。

#### 路易斯·沙利文的形式与功能理论
现代建筑师路易斯·沙利文（Louis Sullivan），作为摩天大楼的先驱之一以及弗兰克·劳埃德·赖特的导师，曾写下一段著名的话：
“不论是翱翔的雄鹰，盛开的苹果花，还是辛勤工作的马匹、无忧无虑的天鹅、枝叶繁茂的橡树、潺潺流淌的小溪、飘浮的云朵、飞奔的太阳——形式总是服从于功能，这就是自然的法则。功能不变，形式就不变。无论是有机体还是无机体、实体还是形而上的、关于人的还是超人的、有关大脑和心灵的所有现象，生命都可以通过它的表达方式来认识，形式总是服从于功能。”（Sullivan, 1896）

#### 形式与功能的关系
密斯·凡德罗似乎在脑海中贴上了“形式服从于功能”的标签。然而，这一格言可能更具煽动性而非描述实际情况。著名的美国图形设计师保罗·兰德（Paul Rand）指出，分离形式和功能、概念和执行，不太可能产生具有持久美学价值的作品。如果一个系统根本不考虑美学，将艺术家与其作品割裂开来，那么从长远来看，不仅产品会贬值，创作者也会贬值（Rand, 1985）。

#### 现代建筑的批评与反思
批评现代建筑很容易，特别是当密斯·凡德罗和勒·柯布西耶的作品被世界各地拙劣地模仿时，导致了许多丑陋的居民区、犯罪滋生的工人宿舍和没有灵魂的商业中心。更有趣的是深入研究大师们自己的评论。我们看到，赖特、勒·柯布西耶和密斯·凡德罗都因为他们的坚定立场而受到批评。他们坚定不移的态度为我们留下了美丽的建筑，但这些建筑并没有带来物质上的享受。

坚定不移不一定是缺点。在《Doctor Dobb's Journal》杂志1996年4月的访谈中，唐纳德·克努特（Donald Knuth）谈到艾兹赫尔·迪杰斯特拉（Edsger Dijkstra）时说：“他了不起的地方在于他不做折中。想到用C++编程就会让他身体不舒服。”他的不妥协态度甚至使他多年未碰计算机，并写了一篇名为《谦恭程序员》的文章来讨论这一点。迪杰斯特拉是最有影响力的计算机科学家之一，他的著作至今仍然充满了有价值的建议，对于那些在真实世界中编程的人来说尤为重要。

#### Smalltalk的角色
这可能是理解Smalltalk角色的关键，就像之前的Algol一样，Smalltalk在我们的职业生涯中扮演了重要角色。有些建筑师开辟了新的道路，为后代创建了纪念碑，这些纪念碑的本质比实际的房屋或办公楼更像是一种宣言。没有人会否认落水山庄（Fallingwater）打动拜访者的力量及其对年轻建筑师的启发，即使我们可以争论它是否适合作为住房。同样，一些软件系统的成功更多地在于它们对代码的影响，而不是实际的编写代码。

如果我们想编写代码，无论是为了业务还是个人兴趣，我们需要从美丽的架构中获取灵感，但不能直接使用它。我们的工作必须以美丽的架构为榜样，但必须是实际可行的。最纯粹最美丽的智力体系是纯数学，我们可以从中学习很多，但不能用它来编程。我们必须开发出能工作的系统，而这正是事情变得复杂的原因。

有时候人们很容易迷失在设计方法学中，忘记了我们的目标是不同的。克里斯托弗·亚历山大（Christopher Alexander），作为设计模式之父的建筑师这样说到：“整个学术领域都是围绕着‘设计方法’的思想发展起来的——我也被认为是这些所谓的设计方法的拥护者之一。我对此非常抱歉，我想公开声明，我完全拒绝将设计方法作为一个课题来研究，因为我认为将设计的研究和设计的实践分离开来是非常荒谬的。实际上，学习设计方法而不实践设计的人几乎都是失败的设计者，他们没有活力，他们丧失了创造事物的冲动，或者说从来就没有过这种冲动。”（Alexander, 1971）

#### 结论
作为程序员，我们必须创造能工作的系统，而不仅仅是看起来漂亮的东西。这两者不一定不可兼得。图14-6展示了罗伯特·迈拉特（Robert Maillart）设计的Salginatobel大桥，该桥建于1930年。迈拉特是瑞士人，学习工程出身，但他的作品，尤其是他的桥梁，是建筑之美的典范。最重要的是，这些作品不只是漂亮。迈拉特在竞标中赢得合同并建造了这座大桥，击败了其他19份竞争设计，赢得了合同。建造大桥和公路当时只花了70万瑞士法郎，在今天接近400万。这座桥不是一个小工程。它的跨度达到90米，拱顶距Salgina河谷底达80米（Billington, 2000）。结构的修长和轻巧是它低成本的原因。这座桥的低成本要归因于它的优雅。

迈拉特的主要优点在于他的实用主义观点。他通过一种创造性的直觉得到了他的设计。他避开装饰和点缀，也没有模仿传统的建筑风格。他设计的结构不能由当时的计算工具分析（而且缺少计算机），因此不能证明设计是可靠的。他利用简化的图形分析来评估设计的可行性。如果迈拉特必须等待其设计的严格证明，他的所有作品都不会建造（他于1940年去世）。迈拉特发现创新，尤其是在桥梁设计方面的创新，不是来自于实验室的工作和数学理论，而是来自于设计室和建筑工地。数据在工程中扮演了十分重要的角色。但桥梁设计中的创新是可视的几何学想象的产物，而不是来自于抽象的数值分析，也不是从一般理论推导而来（Billington, 1997）。

编程像建筑一样，是一种实践。我们最好避免教条主义，而是将注意力放在能工作的东西上。建筑是全能和无能的危险混合。表面上涉及的是“塑造”这个世界，因为他们要成为有影响力的建筑师，就要影响其他人——客户、个人或机构。因此，不连贯，或者更准确地说，随意性，是所有建筑师生涯的底层结构：他们面对的是随意的指令序列，以及他们没有确定的参数，在他们几乎不了解的国家，面对他们几乎没有意识到的问题，人们希望他们处理那些即使聪明得多的人都很难处理的问题。建筑在本质上就是混乱的冒险（Koolhas等, 1998）。

建筑是混乱的冒险，因为只有美丽的架构是不够的。不仅要美丽，而且要有用，这是建筑和编程等活动的法则。

#### 参考资料
- Abrahams, David, and Aleskey Gurtovoy. 2005. C++ Template Metaprogramming: Concepts, Tools, and Techniques from Boost and Beyond. Boston, MA: Addison-Wesley.
- Alexander, Christopher. 1971. Notes on the Synthesis of Form, Preface to the paperback edition. Cambridge, MA: Harvard University Press.
- Alpert, Sherman R., Kyle Brown, and Bobby Woolf. 1998. The Design Patterns Smalltalk Companion. Boston, MA: Addison-Wesley.
- Billington, David P. 2000. "The Revolutionary Bridges of Robert Maillart." Scientific American. July, pp. 85-91.
- Billington, David P. 1997. Robert Maillart: Builder, Designer, and Artist. New York, NY: Cambridge University Press.
- Black, Andrew P., et al. 2007. Squeak By Example. Square Bracket Publishing.
- Bloch, Joshua. 2008. Effective Java, Second Edition. Boston, MA: Addison-Wesley.
- Brand, Stewart. 1997. How Buildings Learn: What Happens After They're Built, Revised Edition. London, UK: Phoenix Illustrated.
- Calvino, Italo. 1986. "Why Read the Classics?" The Uses of Literature. Translated by Patrick Creagh. New York, NY: Harcourt Brace Jovanovich.
- Conroy, Thomas J., and Eduardo Pelegri-Llopart. 1983. "An Assessment of Method-Lookup Caches for SmallTalk-80 Implementations." Smalltalk 80: Bits of History, Words of Advice. Ed. Glenn Krasner. Boston, MA: Addison-Wesley.
- Curtis, William J.R. 1996. Modern Architecture Since 1900, Third Edition. New York, NY: Phaidon Press.
- De Botton, Alain. 2006. The Architecture of Happiness. London, UK: Hamish Hamilton.
- Gamma, Erich, et al. 1994. Design Patterns: Elements of Reusable Object-Oriented Software. Boston, MA: Addison-Wesley.
- Goldberg, Adele, and David Robson. 1989. Smalltalk-80: The Language. Boston, MA: Addison-Wesley.
- Forman, Ira R., and Scott H. Danforth. 1999. Putting Metaclasses to Work: A New Dimension in Object-Oriented Programming. Boston, MA: Addison-Wesley.
- Jencks, Charles. 2006. The New Paradigm in Architecture: The Language of Post-Modernism. New Haven, CT: Yale University Press.
- Josuttis, Nicolai M. 1999. The C++ Standard Library: A Tutorial and Reference. Boston, MA: Addison-Wesley.
- Kaufmann, Edgar Jr. 1986. Fallingwater: A Frank Lloyd Wright Country House. New York, NY: Abbeville Press.
- Koolhaas, Rem, et al. 1998. S, M, L, XL, Second Edition. New York, NY: The Monacelli Press.
- McCarthy, John. 1960. "Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I." Communications of the ACM, April 1960.
- McConnell, Steve. 2004. Code Complete, Second Edition. Redmond, WA: Microsoft Press.
- Meyers, Scott. 2005. Effective C++: 55 Ways to Improve Your Programs and Designs. Boston, MA: Addison-Wesley.
- Norman, Donald. 1988. The Psychology of Everyday Things.