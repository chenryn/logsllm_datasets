### Emulation and Analysis in Embedded Systems

Several well-developed techniques and tools are already available in the emulator development communities [38, 87]. To address the challenges of full emulation, recent works have proposed alternative approaches [41, 51, 53]. For instance, Pretender [53] still requires the original hardware to record the MMIO (Memory-Mapped I/O) activity. In contrast, P2IM [51] and Halucinator [41] do not correctly handle certain hardware devices, such as DMA (Direct Memory Access). Additionally, none of these studies have emulated devices attached to the I/O, which limits the coverage of the analysis results.

Overall, unlike PASAN, the dynamic analysis approaches in the prior art are constrained by the need for significant engineering efforts to generate analysis environments with actual boards and specialized hardware (e.g., GDB, Bluetooth, or client devices). Both static and dynamic analysis methods primarily focus on detecting program crashes, memory corruption, and known security threats.

### Conclusion

Concurrency bugs in embedded platforms, such as RAVs (Robotic Aerial Vehicles), can lead to a variety of safety and security issues, ranging from physical system failures to critical data corruption. Unfortunately, detecting concurrency bugs in embedded platforms is particularly challenging due to the intricate interplay between bus-level and peripheral-level state machines. In this paper, we introduce PASAN, a device-agnostic static analysis-based approach designed to address this challenge. PASAN automatically detects peripheral access concurrency bugs by employing a transaction-aware and address-range-aware strategy.

We validated PASAN's capabilities by evaluating it on seven real-world embedded platforms, where it successfully discovered a total of 17 concurrency bugs across three different platforms. These findings have been reported to the respective parties.

### Acknowledgment

We would like to thank the anonymous reviewers for their valuable comments. This work was partially supported by ONR under Grants N00014-20-1-2128 and N00014-17-1-2045. The opinions, findings, and conclusions expressed in this paper are those of the authors and do not necessarily reflect the views of the ONR.

### References

[1] Dirty cow (cve-2016-5195), 2016. https://dirtycow.ninja.
[2] grbl — An open source, embedded, high performance g-code-parser and CNC milling controller ported to stm32f4, 2016. https://github.com/deadsy/grbl_stm32f4.
[3] 3DR IRIS+, 2018. https://3dr.com/support/articles/iris.
[4] Intel Aero, 2018. https://software.intel.com/en-us/aero.
[5] MAVLink Micro Air Vehicle Communication Protocol, 2018. https://mavlink.io.
[6] Parrot Bebop2, 2018. https://www.parrot.com/global/drones/parrot-bebop-2.
[7] syzkaller - linux syscall fuzzer, 2018. https://github.com/google/syzkaller.
[8] CMSIS System View Description, 2019. http://www.keil.com/pack/doc/CMSIS/SVD/html/index.html.
[9] Cve-2019-6471, 2019. https://kb.isc.org/docs/cve-2019-6471.
[10] List of 862 race conditions in the cve database, 2019. http://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=race+condition.
[11] ArduPilot, 2020. http://ardupilot.org.
[12] Blue Pill — STM32F103C8T6, 2020. https://stm32-base.org/boards/STM32F103C8T6-Blue-Pill.html.
[13] Codesonar c/c++ - sast when safety and security matter, 2020. https://www.grammatech.com/codesonar-cc.
[14] Contiki-NG: The OS for Next Generation IoT Devices, 2020. https://github.com/contiki-ng/contiki-ng.
[15] Coverity scan - static analysis, 2020. https://scan.coverity.com.
[16] Cve-2020-0030, 2020. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-0030.
[17] Cve-2020-3941, 2020. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3941.
[18] Direct Comms with SPI/I2C bus, 2020. https://ardupilot.github.io/MAVProxy/html/modules/devop.html.
[19] Flawfinder, 2020. https://dwheeler.com/flawfinder.
[20] frama-c: Software analyzers, 2020. https://frama-c.com.
[21] Infer - a static analysis tool for java, c++, objective-c, and c., 2020. https://fbinfer.com.
[22] Micro SD Card Module Mini TF Card Adapter with SPI Interface Driver Module, 2020. https://www.amazon.com/Geekstory-Module-Adapter-Interface-Arduino/dp/B07X478BPL.
[23] Pixhawk 1 Flight Controller, 2020. https://docs.px4.io/v1.9.0/en/flight_controller/pixhawk.html.
[24] Polyspace: Automated static code analysis using formal methods for c/c++ and ada, 2020. https://www.mathworks.com/products/polyspace.
[25] Polyspace bug finder reference, 2020. https://www.mathworks.com/help/pdf_doc/bugfinder/bugfinder_ref.pdf.
[26] RaceFlight — Performance, stability and ease of use for STM32F4 and more, 2020. https://github.com/rs2k/raceflight.
[27] RetDec: a retargetable machine-code decompiler based on LLVM, 2020. https://github.com/avast/retdec.
[28] RIOT — The friendly OS for IoT, 2020. https://www.riot-os.org.
[29] rusEFI — a GPL open source engine control unit, 2020. https://rusefi.com.
[30] Sast-coverity-datasheet, 2020. https://www.synopsys.com/content/dam/synopsys/sig-assets/datasheets/SAST-Coverity-datasheet.pdf.
[31] TS100 — soldering iron firmware, 2020. https://github.com/Ralim/ts100.
[32] Verifast, 2020. https://github.com/verifast/verifast.
[33] Jia-Ju Bai, Yu-Ping Wang, Julia Lawall, and Shi-Min Hu. DSAC: Effective Static Analysis of Sleep-in-Atomic-Context Bugs in Kernel Modules. In Proceedings of the 2018 USENIX Annual Technical Conference (ATC), 2018.
[34] Tiffany Bao, Jonathan Burket, Maverick Woo, Rafael Turner, and David Brumley. Byteweight: Learning to Recognize Functions in Binary Code. In Proceedings of the 23rd USENIX Security Symposium (USENIX Security), 2014.
[35] Fabrice Bellard. QEMU, a Fast and Portable Dynamic Translator. In Proceedings of the USENIX Annual Technical Conference, FREENIX Track (ATC), 2005.
[36] Gérard Berry and Georges Gonthier. The Esterel Synchronous Programming Language: Design, Semantics, Implementation. Science of Computer Programming, 19(2):87–152, 1992.
[37] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R. Gross. Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In Proceedings of the 24th USENIX Security Symposium (USENIX Security), 2015.
[38] Daming D. Chen, Maverick Woo, David Brumley, and Manuel Egele. Towards Automated Dynamic Analysis for Linux-Based Embedded Firmware. In Proceedings of the 25th Annual Symposium on Network and Distributed System Security (NDSS), 2016.
[39] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. IoTfuzzer: Discovering Memory Corruptions in IoT Through App-Based Fuzzing. In Proceedings of the 27th Annual Symposium on Network and Distributed System Security (NDSS), 2018.
[40] Qiu-Liang Chen, Jia-Ju Bai, Zu-Ming Jiang, Julia Lawall, and Shi-Min Hu. Detecting Data Races Caused by Inconsistent Lock Protection in Device Drivers. In Proceedings of the IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER), 2019.
[41] Abraham Clements, Eric Gustafson, Tobias Scharnowski, Paul Grosen, David Fritz, Christopher Kruegel, Giovanni Vigna, Saurabh Bagchi, and Mathias Payer. Halucinator: Firmware Re-Hosting Through Abstraction Layer Emulation. In Proceedings of the 29th USENIX Security Symposium (USENIX Security), 2020.
[42] Ernie Cohen, Markus Dahlweid, Mark Hillebrand, Dirk Leinenbach, Michał Moskal, Thomas Santen, Wolfram Schulte, and Stephan Tobies. VCC: A Practical System for Verifying Concurrent C. In Proceedings of the International Conference on Theorem Proving in Higher Order Logics (TPHOLs), 2009.
[43] Lucian Cojocar, Jonas Zaddach, Roel Verdult, Herbert Bos, Aurélien Francillon, and Davide Balzarotti. PIE: Parser Identification in Embedded Systems. In Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC), 2015.
[44] Jake Corina, Aravind Machiry, Christopher Salls, Yan Shoshitaishvili, Shuang Hao, Christopher Kruegel, and Giovanni Vigna. Difuze: Interface Aware Fuzzing for Kernel Drivers. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS), 2017.
[45] Andrei Costin, Jonas Zaddach, Aurélien Francillon, and Davide Balzarotti. A Large-Scale Analysis of the Security of Embedded Firmwares. In Proceedings of the 23rd USENIX Security Symposium (USENIX Security), 2014.
[46] Drew Davidson, Benjamin Moench, Thomas Ristenpart, and Somesh Jha. FIE on Firmware: Finding Vulnerabilities in Embedded Systems Using Symbolic Execution. In Proceedings of the 22nd USENIX Security Symposium (USENIX Security), 2013.
[47] Peng Di and Yulei Sui. Accelerating Dynamic Data Race Detection Using Static Thread Interference Analysis. In Proceedings of the 7th International Workshop on Programming Models and Applications for Multicores and Manycores (PMAM), 2016.
[48] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. RetroWrite: Statically Instrumenting COTS Binaries for Fuzzing and Sanitization. In Proceedings of the 41st IEEE Symposium on Security and Privacy (IEEE S&P), 2020.
[49] Steven HH Ding, Benjamin CM Fung, and Philippe Charland. Asm2vec: Boosting Static Representation Robustness for Binary Clone Search Against Code Obfuscation and Compiler Optimization. In Proceedings of the 40th IEEE Symposium on Security and Privacy (IEEE S&P), 2019.
[50] Dawson Engler and Ken Ashcraft. RacerX: Effective, Static Detection of Race Conditions and Deadlocks. In Proceedings of the 9th ACM Symposium on Operating Systems Principles (SOSP), 2003.
[51] Bo Feng, Alejandro Mera, and Long Lu. P2IM: Scalable and Hardware-Independent Firmware Testing via Automatic Peripheral Interface Modeling. In Proceedings of the 29th USENIX Security Symposium (USENIX Security), 2020.
[52] Eléonore Goblé. Taint Analysis for Automotive Safety Using the LLVM Compiler Infrastructure. 2019.
[53] Eric Gustafson, Marius Muench, Chad Spensky, Nilo Redini, Aravind Machiry, Yanick Fratantonio, Davide Balzarotti, Aurélien Francillon, Yung Ryn Choe, Christophe Kruegel, and Giovanni Vigna. Toward the Analysis of Embedded Firmware Through Automated Re-Hosting. In Proceedings of the 22nd International Symposium on Research in Attacks, Intrusions and Defenses (RAID), 2019.
[54] Dae R. Jeong, Kyungtae Kim, Basavesh Shivakumar, Byoungyoung Lee, and Insik Shin. Razzer: Finding Kernel Race Bugs Through Fuzzing. In Proceedings of the 40th IEEE Symposium on Security and Privacy (IEEE S&P), 2019.
[55] Baris Kasikci, Cristian Zamfir, and George Candea. Racemob: Crowdsourced Data Race Detection. In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles, 2013.
[56] Taegyu Kim, Chung Hwan Kim, Altay Ozen, Fan Fei, Zhan Tu, Xiangyu Zhang, Xinyan Deng, Dave (Jing) Tian, and Dongyan Xu. From Control Model to Program: Investigating Robotic Aerial Vehicle Accidents with Mayday. In Proceedings of the 29th USENIX Security Symposium (USENIX Security), 2020.
[57] Taegyu Kim, Chung Hwan Kim, Junghwan Rhee, Fan Fei, Zhan Tu, Gregory Walkup, Xiangyu Zhang, Xinyan Deng, and Dongyan Xu. RVFuzzer: Finding Input Validation Bugs in Robotic Vehicles Through Control-Guided Testing. In Proceedings of the 28th USENIX Security Symposium (USENIX Security), 2019.
[58] Volodymyr Kuznetsov, Vitaly Chipounov, and George Candea. Testing Closed-Source Binary Device Drivers with DDT. In Proceedings of the 2010 USENIX Annual Technical Conference (ATC), 2010.
[59] Y. Kwon, J. Yu, B. Cho, Y. Eun, and K. Park. Empirical Analysis of MAVLink Protocol Vulnerability for Attacking Unmanned Aerial Vehicles. IEEE Access, 6:43203–43212, 2018.
[60] Leslie Lamport. Time, Clocks, and the Ordering of Events in a Distributed System. 2019.
[61] Chris Lattner and Vikram Adve. LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation. In Proceedings of the International Symposium on Code Generation and Optimization (CGO), 2004.
[62] Alexander Lochmann, Horst Schirmeier, Hendrik Borghorst, and Olaf Spinczyk. LockDoc: Trace-Based Analysis of Locking in the Linux Kernel. In Proceedings of the Fourteenth EuroSys Conference 2019, 2019.
[63] Kangjie Lu and Hong Hu. Where Does It Go? Refining Indirect-Call Targets with Multi-Layer Type Analysis. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, pages 1867–1881, 2019.
[64] Aravind Machiry, Chad Spensky, Jake Corina, Nick Stephens, Christopher Kruegel, and Giovanni Vigna. Dr.Checker: A Soundy Analysis for Linux Kernel Drivers. In Proceedings of the 26th USENIX Security Symposium (USENIX Security), 2017.
[65] Nicholas D. Matsakis and Felix S. Klock. The Rust Language. ACM SIGAda Ada Letters, 34(3):103–104, 2014.
[66] Friedemann Mattern et al. Virtual Time and Global States of Distributed Systems. In Proceedings of the Workshop on Parallel and Distributed Algorithms, 1988.
[67] Nicholas Nethercote and Julian Seward. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In Proceedings of the 28th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2007.
[68] Esko Nuutila and Eljas Soisalon-Soininen. On Finding the Strongly Connected Components in a Directed Graph. Information Processing Letters, 49(1):9–14, 1994.
[69] Peter O’Hearn. Separation Logic. Communications of the ACM, 62(2):86–95, 2019.
[70] Matthew J. Renzelmann, Asim Kadav, and Michael M. Swift. SymDrive: Testing Drivers Without Devices. In Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2012.
[71] Nils Rodday. Hacking a Professional Drone. Blackhat ASIA, 2016.
[72] Sergej Schumilo, Ralf Spenneberg, and Hendrik Schwartke. Don’t Trust Your USB! How to Find Bugs in USB Device Drivers. Blackhat Europe, 2014.
[73] Konstantin Serebryany and Timur Iskhodzhanov. ThreadSanitizer: Data Race Detection in Practice. In Proceedings of the Workshop on Binary Instrumentation and Applications (WBIA), 2009.
[74] Yan Shoshitaishvili, Ruoyu Wang, Christophe Hauser, Christopher Kruegel, and Giovanni Vigna. Firmalice: Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proceedings of the 24th Annual Symposium on Network and Distributed System Security (NDSS), 2015.
[75] Dokyung Song, Felicitas Hetzelt, Dipanjan Das, Chad Spensky, Yeoul Na, Stijn Volckaert, Giovanni Vigna, Christopher Kruegel, Jean-Pierre Seifert, and Michael Franz. Periscope: An Effective Probing and Fuzzing Framework for the Hardware-OS Boundary. In Proceedings of the 28th Annual Symposium on Network and Distributed System Security (NDSS), 2019.
[76] Yulei Sui and Jingling Xue. SVF: Interprocedural Static Value-Flow Analysis in LLVM. In Proceedings of the 25th International Conference on Compiler Construction (CC), 2016.
[77] Seyed Mohammadjavad Seyed Talebi, Hamid Tavakoli, Hang Zhang, Zheng Zhang, Ardalan Amiri Sani, and Zhiyun Qian. Charm: Facilitating Dynamic Analysis of Device Drivers of Mobile Systems. In Proceedings of the 27th USENIX Security Symposium (USENIX Security), 2018.
[78] V. Vojdani, K. Apinis, V. Rõtov, H. Seidl, V. Vene, and R. Vogler. Static Race Detection for Device Drivers: The Goblint Approach. In Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering (ASE), 2016.
[79] Jan Wen Voung, Ranjit Jhala, and Sorin Lerner. Relay: Static Race Detection on Millions of Lines of Code. In Proceedings of the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The Foundations of Software Engineering (ESEC/FSE), 2007.
[80] Shuai Wang, Pei Wang, and Dinghao Wu. Reassembleable Disassembling. In Proceedings of the 24th USENIX Security Symposium (USENIX Security), 2015.
[81] S. Bharadwaj Yadavalli and Aaron Smith. Raising Binaries to LLVM IR with MCToll. In Proceedings of the 20th ACM SIGPLAN/SIGBED International Conference on Languages, Compilers, and Tools for Embedded Systems (LCTES), 2019.
[82] Jonas Zaddach, Luca Bruno, Aurelien Francillon, Davide Balzarotti, et al. Avatar: A Framework to Support Dynamic Security Analysis of Embedded Systems’ Firmwares. In Proceedings of the 23rd Annual Symposium on Network and Distributed System Security (NDSS), 2014.
[83] Qiang Zeng, Dinghao Wu, and Peng Liu. Cruiser: Concurrent Heap Buffer Overflow Monitoring Using Lock-Free Data Structures. In Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2011.
[84] Tong Zhang, Changhee Jung, and Dongyoon Lee. ProRace: Practical Data Race Detection for Production Use. In Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2017.
[85] Tong Zhang, Dongyoon Lee, and Changhee Jung. TxRace: Efficient Data Race Detection Using Commodity Hardware Transactional Memory. In Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2016.
[86] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M. Azab, and Ruowen Wang. Pex: A Permission Check Analysis Framework for Linux Kernel. In Proceedings of the 28th USENIX Security Symposium (USENIX Security), 2019.
[87] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu Song, Hongsong Zhu, and Limin Sun. Firm-AFL: High-Throughput Greybox Fuzzing of IoT Firmware via Augmented Process Emulation. In Proceedings of the 28th USENIX Security Symposium (USENIX Security), 2019.

---

This revised version aims to improve clarity, coherence, and professionalism. If you need any further adjustments, please let me know.