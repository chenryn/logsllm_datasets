### Introduction to the Android Security Framework (ASF)

The reference monitor is injected into selected application processes via our framework at app startup. The policy decision logic and persistent storage of policy settings have been moved into a middleware module. This paper evaluates the performance of our ASF and discusses its current scope and future work. An extended evaluation is provided in the full version of this paper [2].

### System Architecture

1. **Middleware Module**: This module selects the applications into which the Inlined Reference Monitor (IRM) is injected. It also implements a Bundle-based communication protocol to exchange policy decisions and security events with the IRM component.
2. **Front-End App**: This allows the user to adjust policy settings and view logs of security-relevant events.

Our AppGuard security module consists of 5059 lines of code (LoC) in total, with 782 LoC in the middleware module and 4277 LoC in the IRM. Our module diverges from the original code by 18.18% of all LoC. The majority of the difference, 728 LoC, is attributed to moving the policy decision logic into the middleware module, while only 46 LoC were required to adapt the inlined reference monitor to use the provided instrumentation API.

### Evaluation and Discussion

#### 7.1 Performance

Although the actual performance overhead depends on the loaded module, we established a baseline for the impact of our Android Security Framework on system performance. The performance of Linux Security Modules (LSM) has been evaluated separately, e.g., for SEAndroid [36]. We are interested in the effect of our new middleware security framework on the performance of instrumented middleware system services and apps.

**Methodology**:
- **Implementation**: We implemented our ASF as a modification to the Android OS code base in version 4.3_r3.1 and used the Android Linux kernel in branch android-omap-tuna-3.0-jb-mr1.1.
- **Micro-Benchmarks**: We performed micro-benchmarks for all execution paths where a hook diverts control flow to our middleware framework. We measured the execution time of each hooked function with no security module loaded and then repeated the test with hooks removed to measure the default performance.
- **Test Device**: All benchmarks were performed on a standard Nexus 7 development tablet (Quad-core 1.51 GHz CPU and 2GB DDR3L RAM), using a test plan for daily tasks such as browsing, sending text messages, managing contacts, and installing/uninstalling third-party apps.

**Results**:
- **Table 2** presents the number of measurements for each test case and their mean values. To eliminate extreme outliers, we excluded the highest decile of the measurements.
- **Figure 6** shows the relative cumulative frequency distribution of our measurements, illustrating the low performance overhead. Overall, our framework imposed approximately 11.8% overhead compared to stock Android.
- **Major Contributor**: The marshalling, sending, and unmarshalling of the hooks' parameters contribute significantly to this overhead. A future optimization could be to configure the framework to enable only the hooks used by the loaded modules, thus avoiding irrelevant hook invocations.

#### 7.2 Current Scope and Future Work

**System Setup**:
- Certain security models require preparatory system setup, such as type enforcement, which requires pre-labelling of all subjects and objects. After setup, ASF supports modularization of these security models (cf. Section 6.2).

**Module Integrity**:
- **Kernel Sub-Module**: As part of the kernel, it has the highest level of integrity.
- **Middleware Sub-Module**: As a user space process, it can be circumvented or compromised by attacks against the underlying system (e.g., root exploits). It requires support from kernel modules to prevent low-level privilege escalation attacks.
- **Inlined Reference Monitors**: These are inherently susceptible to attacks by malicious applications because they execute in the same process as the monitored application. We are currently retrofitting Androidâ€™s application model to combine the benefits of inlined and system-centric reference monitors, allowing differentiation of distinct trust levels within apps [31, 38, 35].

**Completeness**:
- It is crucial that all access to security and privacy-sensitive resources is mediated by the reference monitors. We plan to use recent advances in static and dynamic analysis on Android to verify the placement of our hooks, similar to how it was done for the LSM framework [12, 17].

**Information Flow Control**:
- Our framework provides modules with control over which subject (e.g., app) has access to which objects (e.g., device location), but it cannot control how privileged subjects distribute this information. Controlling information flows is an orthogonal problem addressed by different solutions [13, 33]. We plan to integrate such data flow solutions into our framework and extend our security API with new generic calls for taint labeling and taint checking.

### Conclusion

In this paper, we presented the Android Security Framework (ASF), an extensible and policy-agnostic security infrastructure for Android. ASF allows security experts to develop Android security extensions against a novel Android security API and deploy their solutions as modules or "security apps." Modularizing security extensions overcomes the current situation where policy authors are limited to one predetermined security model embedded in the Android software stack or must rely on a security-model-specific Android fork. Additionally, this modularization provides benefits such as easier maintenance and direct comparison of security extensions. We demonstrated the effectiveness and efficiency of ASF by porting different security models from related work to ASF modules and establishing a baseline for the impact of our infrastructure on system performance.

### Availability

The ASF source code and example modules can be retrieved from http://infsec.cs.uni-saarland.de/projects/asf/.

### Acknowledgements

We thank the anonymous reviewers for their comments. This work was supported by the German Ministry for Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA).

### References

[References listed as in the original document]

This optimized version of the text is more structured, clear, and professional, making it easier to read and understand.