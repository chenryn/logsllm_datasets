# 7.1 Scalability and Performance

Zhang et al. [69] demonstrate that containers outperform virtual machines in big data environments. This, along with other studies, indicates that OS-level virtualization generally offers better performance compared to traditional VM-based virtualization. However, these studies do not address the potential impact of underlying kernel abstract resources. Our research uncovers new attack surfaces introduced by these abstract resources.

## 7.2 Resource Isolation

Linux employs capabilities [43] to restrict processes from accessing resource instances without the necessary permissions. Several approaches, such as Wedge [7], Capsicum [65], and ACES [10], have been proposed to enforce more granular capability control, thereby mitigating memory corruption attacks. Nevertheless, these methods are insufficient for defending against DoS attacks that deplete accessible shared resources.

Memory address space isolation [56] is a common resource space isolation technique designed to prevent the exhaustion of memory address resources. Linux namespaces [47] isolate eight types of resources, as detailed in §2.1. These schemes, however, can only protect a limited range of resources. Resource containers [6] propose extending the monolithic kernel to isolate system resources and account for them at the thread level, similar to control groups. However, using resource containers to protect all abstract resources is impractical due to the significant performance overhead. EdgeOS [57] deploys an OS with strong isolation for edge clouds but incurs more overhead than a monolithic kernel when implemented without hardware support. Faasm [58] uses software-fault isolation (SFI) for memory isolation and namespaces to isolate network resource spaces in serverless computing. Despite these efforts, most shared resources remain vulnerable to DoS attacks.

## 7.3 Container Security

In addition to resource isolation, several studies have focused on container security. Gao et al. [22] discovered that information leaks from `/proc` or `/sys` can be exploited to launch power attacks. The same group also conducted five attacks to generate out-of-band workloads, breaking the resource constraints of Linux control groups [23]. However, their focus was primarily on information leakage and physical resource attacks, not abstract resources.

Lin et al. [40] showed that containers cannot fully isolate kernel vulnerabilities. Another study used static analysis to examine Docker’s code, identifying differences between vulnerable and patched versions [16]. These works, however, concentrate on existing vulnerabilities and exploits. In contrast, our research introduces new attacks targeting shared abstract resources.

Several works have also aimed to enhance container security. Lei et al. [38] proposed SPEAKER, a mechanism to reduce the available system calls within a container. Sun et al. [60] developed security namespaces to provide policy isolation for each container. Another approach leverages Intel SGX to secure containers [4], offering a small trusted computing base with minimal performance overhead. Brady et al. [8] implemented a security assessment system for container images. Despite these advancements, containers still rely on the kernel for various services, making them susceptible to abstract resource attacks.

# 8 Conclusion

In this paper, we reveal a new attack surface introduced by the shared-kernel in OS-level virtualization. Containers directly and indirectly share thousands of abstract resources, which can be easily exhausted to cause DoS attacks against other containers. To highlight the importance of confining abstract resources, we conducted a series of abstract resource attacks, targeting different aspects of the operating system kernel. Our results show that attacking abstract resources is both practical and critical.

Abstract resources are inherently difficult to contain. To understand the attack surfaces, we performed a systematic analysis to identify vulnerable abstract resources in the Linux kernel. Our tool successfully detected 501 dynamically triggered abstract resources, from which we selected seven for experimental attacks in self-deployed shared-kernel container environments across the top four cloud vendors. The results indicate that all environments are vulnerable to our attacks. As a mitigation, we provide several recommendations for container users and developers to reduce these risks.

# Acknowledgments

The authors would like to thank all reviewers for their insightful comments, which helped to re-shape this paper. This work is partially supported by the National Natural Science Foundation of China (Grants No. 62002317, 62032021, and 61772236), the National Key R&D Program of China (Grant No. 2020AAA0107700), the Key R&D Program of Shaanxi Province of China (Grant No. 2019ZDLGY12-06), the Leading Innovative and Entrepreneur Team Introduction Program of Zhejiang (Grant No. 2018R01005), and the Ant Group Funds for Security Research.

# References

[1] Alibaba. 2020. Alibaba Cloud. https://us.alibabacloud.com/.

[2] Amazon. 2020. Containers on AWS. https://aws.amazon.com/containers.

[3] Amazon. 2020. Pod security policy. https://docs.aws.amazon.com/eks/latest/userguide/pod-security-policy.html.

[4] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin, Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, Mark L Stillwell, et al. 2016. SCONE: Secure Linux containers with Intel SGX. In 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16). USENIX Association, 689–703.

[5] Jia-Ju Bai, Julia Lawall, Qiu-Liang Chen, and Shi-Min Hu. 2019. Effective static analysis of concurrency use-after-free bugs in Linux device drivers. In 2019 USENIX Annual Technical Conference (USENIX ATC 19). USENIX Association, 255–268.

[6] Gaurav Banga, Peter Druschel, and Jeffrey C Mogul. 1999. Resource containers: A new facility for resource management in server systems. In Proceedings of the Third USENIX Symposium on Operating Systems Design and Implementation (OSDI), New Orleans, Louisiana, USA, February 22-25, 1999. USENIX Association, 45–58.

[7] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge: Splitting applications into reduced-privilege compartments. In 5th USENIX Symposium on Networked Systems Design & Implementation (NSDI 2008), April 16-18, 2008, San Francisco, CA, USA, Proceedings. USENIX Association, 309–322.

[8] Kelly Brady, Seung Moon, Tuan Nguyen, and Joel Coffman. 2020. Docker container security in cloud computing. In 2020 10th Annual Computing and Communication Workshop and Conference (CCWC). IEEE, 975–980.

[9] Thanh Bui. 2015. Analysis of Docker security. arXiv preprint arXiv:1501.02967 (2015). http://arxiv.org/abs/1501.02967

[10] Abraham A Clements, Naif Saleh Almakhdhub, Saurabh Bagchi, and Mathias Payer. 2018. ACES: Automatic compartments for embedded systems. In 27th USENIX Security Symposium (USENIX Security 18). USENIX Association, 65–82.

[11] Alibaba Cloud. 2020. Pod security policy. https://www.alibabacloud.com/help/doc-detail/149547.html.

[12] Theo Combe, Antony Martin, and Roberto Di Pietro. 2016. To Docker or not to Docker: A security perspective. IEEE Cloud Computing 3, 5 (2016), 54–62.

[13] Nicholas DeMarinis, Kent Williams-King, Di Jin, Rodrigo Fonseca, and Vasileios P Kemerlis. 2020. Sysfilter: Automated system call filtering for commodity software. In 23rd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2020). USENIX Association, 459–474.

[14] LTP Developers. 2021. Linux Test Project. https://linux-test-project.github.io/.

[15] Docker. 2020. Seccomp security profiles for Docker. https://docs.docker.com/engine/security/seccomp/.

[16] Ana Duarte and Nuno Antunes. 2018. An empirical study of Docker vulnerabilities and of static code analysis applicability. In 2018 Eighth Latin-American Symposium on Dependable Computing (LADC). IEEE, 27–36.

[17] Wes Felter, Alexandre Ferreira, Ram Rajamony, and Juan Rubio. 2015. An updated performance comparison of virtual machines and Linux containers. In 2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS). IEEE Computer Society, 171–172.

[18] FreeBSD. 2021. FreeBSD handbook. https://docs.freebsd.org/en/books/handbook/kernel/rights#zx_rights_basic.

[21] Peter B Galvin, Greg Gagne, Abraham Silberschatz, et al. 2003. Operating system concepts. John Wiley & Sons.

[22] Xing Gao, Zhongshu Gu, Mehmet Kayaalp, Dimitrios Pendarakis, and Haining Wang. 2017. ContainerLeaks: Emerging security threats of information leakages in container clouds. In 2017 47th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). IEEE Computer Society, 237–248.

[23] Xing Gao, Zhongshu Gu, Zhengfa Li, Hani Jamjoom, and Cong Wang. 2019. Houdini’s Escape: Breaking the Resource Rein of Linux Control Groups. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, CCS 2019, London, UK, November 11-15, 2019. ACM, 1073–1086.

[24] Xing Gao, Benjamin Steenkamer, Zhongshu Gu, Mehmet Kayaalp, Dimitrios Pendarakis, and Haining Wang. 2018. A study on the security implications of information leakages in container clouds. IEEE Transactions on Dependable and Secure Computing 18, 1 (2018), 174–191.

[25] Seyedhamed Ghavamnia, Tapti Palit, Azzedine Benameur, and Michalis Polychronakis. 2020. Confine: Automated system call policy generation for container attack surface reduction. In 23rd International Symposium on Research in Attacks, Intrusions and Defenses (RAID 2020). USENIX Association, 443–458.

[26] Seyedhamed Ghavamnia, Tapti Palit, Shachee Mishra, and Michalis Polychronakis. 2020. Temporal system call specialization for attack surface reduction. In 29th USENIX Security Symposium (USENIX Security 20). USENIX Association, 1749–1766.

[27] Google. 2020. GKE quick start. https://cloud.google.com/kubernetes-engine/docs/quickstart.

[28] Google. 2020. Google Compute Engine for Containers. https://cloud.google.com/compute/docs/containers.

[29] Google. 2021. Best practices for operating containers. https://cloud.google.com/kubernetes-engine/docs/best-practices/enterprise-multitenancy.

[30] Aaron Grattafiori. 2016. Understanding and hardening Linux containers. Whitepaper, NCC Group (2016).

[31] 2020 The gVisor Authors. 2020. What is gVisor. https://gvisor.dev/docs.

[32] Ann Mary Joy. 2015. Performance comparison between Linux containers and virtual machines. In 2015 International Conference on Advances in Computer Engineering and Applications. 342–346.

[33] Poul-Henning Kamp and Robert NM Watson. 2000. Jails: Confining the omnipotent root. In Proceedings of the 2nd International SANE Conference, Vol. 43. 116.

[34] Linux Kernel. 2020. Kernel source - nf-conntrack-core.c. https://elixir.bootlin.com/linux/v5.10/source/net/netfilter/nf_conntrack_core.c#L1480.

[35] Linux Kernel. 2020. Kernel source - nf-conntrack-standalone.c. https://elixir.bootlin.com/linux/v5.10/source/net/netfilter/nf_conntrack_standalone.c#L614.

[36] Kubernetes. 2020. Kubernetes. https://kubernetes.io/.

[37] Kubernetes. 2020. Kubernetes Namespaces. https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/.

[38] Lingguang Lei, Jianhua Sun, Kun Sun, Chris Shenefiel, Rui Ma, Yuewu Wang, and Qi Li. 2017. SPEAKER: Split-phase execution of application containers. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (Lecture Notes in Computer Science, Vol. 10327). Springer, 230–251.

[39] GNU C Library. 2021. ulimit source code. https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=sysdeps/posix/ulimit.c.

[40] Xin Lin, Lingguang Lei, Yuewu Wang, Jiwu Jing, Kun Sun, and Quan Zhou. 2018. A measurement study on Linux container security: Attacks and countermeasures. In Proceedings of the 34th Annual Computer Security Applications Conference. ACM, 418–429.

[41] Linux. 2020. random read kernel function. https://elixir.bootlin.com/linux/v5.3.1/source/drivers/char/random.c#L1948.

[42] Kangjie Lu and Hong Hu. 2019. Where does it go? Refining indirect-call targets with multi-layer type analysis. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1867–1881.

[43] Linux man-pages project. 2020. capabilities(7) — Linux manual page. https://man7.org/linux/man-pages/man7/capabilities.7.html.

[44] Linux man-pages project. 2020. cgroups - Linux control groups. http://man7.org/linux/man-pages/man7/cgroups.7.html.

[45] Linux man-pages project. 2020. getrlimit man page. https://man7.org/linux/man-pages/man2/getrlimit.2.html.

[46] Linux man-pages project. 2020. Linux pty. https://man7.org/linux/man-pages/man7/pty.7.html.

[47] Linux man-pages project. 2020. namespace - Linux Namespace. https://man7.org/linux/man-pages/man7/namespaces.7.html.

[48] Linux man-pages project. 2020. PAM limits.conf man page. https://www.man7.org/linux/man-pages/man5/limits.conf.5.html.

[49] Linux man pages project. 2020. sysctl man page. https://man7.org/linux/man-pages/man8/sysctl.8.html.

[50] Linux man pages project. 2020. ulimit man page. https://man7.org/linux/man-pages/man3/ulimit.3.html.

[51] Microsoft. 2020. Containers on Azure. https://azure.microsoft.com/en-us/product-categories/containers/.

[52] Microsoft. 2020. Security policy on Azure. https://docs.microsoft.com/azure/aks/developer-best-practices-pod-security.

[53] FreeBSD Manual Pages. 2021. ezjail man page. https://www.freebsd.org/cgi/man.cgi?query=ezjail.

[54] FreeBSD Manual Pages. 2021. rctl man page. https://www.freebsd.org/cgi/man.cgi?query=rctl&sektion=8.

[55] Shankara Pailoor, Xinyu Wang, Hovav Shacham, and Isil Dillig. 2020. Automated policy synthesis for system call sandboxing. Proceedings of the ACM on Programming Languages 4, OOPSLA (2020), 135:1–135:26.

[56] James L Peterson and Abraham Silberschatz. 1985. Operating system concepts. Addison-Wesley Longman Publishing Co., Inc.

[57] Yuxin Ren, Guyue Liu, Vlad Nitu, Wenyuan Shao, Riley Kennedy, Gabriel Parmer, Timothy Wood, and Alain Tchana. 2020. Fine-Grained Isolation for Scalable, Dynamic, Multi-tenant Edge Clouds. In 2020 USENIX Annual Technical Conference (USENIX ATC 20). USENIX Association, 927–942.

[58] Simon Shillaker and Peter Pietzuch. 2020. Faasm: Lightweight isolation for efficient stateful serverless computing. In 2020 USENIX Annual Technical Conference (USENIX ATC 20). USENIX Association, 419–433.

[59] Solaris. 2020. Solaris Zones. https://docs.oracle.com/cd/E26502_01/html/E29024/toc.html.

[60] Yuqiong Sun, David Safford, Mimi Zohar, Dimitrios Pendarakis, Zhongshu Gu, and Trent Jaeger. 2018. Security namespace: Making Linux security frameworks available to containers. In 27th USENIX Security Symposium (USENIX Security 18). USENIX Association, 1423–1439.

[61] Sysdig. 2021. Sysdig Falco. https://sysdig.com/opensource/falco/.

[62] William Viktorsson, Cristian Klein, and Johan Tordsson. 2020. Security-Performance Trade-offs of Kubernetes Container Runtimes. In 28th International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems, MASCOTS 2020, Nice, France, November 17-19, 2020. IEEE, 1–4. https://doi.org/10.1109/MASCOTS50786.2020.9285946

[63] Dmitry V. Levin. 2020. pam model source code. https://github.com/linux-pam/linux-pam/releases/tag/v1.5.1.

[64] Dmitry V. Levin. 2021. setup_limits source code. https://github.com/linux-pam/linux-pam/blob/v1.5.1/modules/pam_limits/pam_limits.c#L984.

[65] Robert NM Watson, Jonathan Anderson, Ben Laurie, and Kris Kennaway. 2010. Capsicum: Practical Capabilities for UNIX. In USENIX Security Symposium, Vol. 46. USENIX Association, 2. https://doi.org/10.1109/MASCOTS50786.2020.9285946

[66] Wikipedia. 2020. Connection tracking. https://en.wikipedia.org/wiki/Netfilter#Connection_tracking.

[67] Wikipedia. 2020. OS-level virtualization. https://en.wikipedia.org/wiki/OS-level_virtualization.

[68] Meng Xu, Chenxiong Qian, Kangjie Lu, Michael Backes, and Taesoo Kim. 2018. Precise and scalable detection of double-fetch bugs in OS kernels. In 2018 IEEE Symposium on Security and Privacy, SP 2018, Proceedings, 21-23 May 2018, San Francisco, California, USA. IEEE Computer Society, 661–678. https://doi.org/10.1109/SP.2018.00017

[69] Qi Zhang, Ling Liu, Calton Pu, Qiwei Dou, Liren Wu, and Wei Zhou. 2018. A comparative study of containers and virtual machines in big data environment. In 2018 IEEE 11th International Conference on Cloud Computing (CLOUD). IEEE Computer Society, 178–185. https://doi.org/10.1109/CLOUD.2018.00030

[70] Tong Zhang, Wenbo Shen, Dongyoon Lee, Changhee Jung, Ahmed M Azab, and Ruowen Wang. 2019. Pex: A permission check analysis framework for Linux kernel. In 28th USENIX Security Symposium (USENIX Security 19). USENIX Association, 1205–1220.