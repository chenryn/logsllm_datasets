### Data Accuracy and Domain Consistency

Data accuracy and domain consistency are critical when integrating data. The integrity and correlation between data sources and the schema must be highly accurate to preserve the "meaning" of the data. Although the initial mapping process can be time-consuming, it should not require substantial maintenance once created. Data sources generally do not change their structures (with the exception of web pages), so few updates to the mappings should be necessary.

### Integrating HAD Organizational Data Assets Using Semantic Web Technologies

#### 3.1 Attribute Registration

To register an attribute, we need information about the XML schema and how to extract the information from a specific data source. The goal is to create a mapping specification that relates attributes, data sources, and extraction rules.

**Figure 3: Attribute Registration**

In the example shown in Figure 3, the data source is a web page, and the extraction rules are defined using a web extraction language. The attribute registration process involves the following steps:
1. **Name the Attributes:** Assign meaningful names to the attributes.
2. **Define Extraction Rules:** Specify the rules for extracting the data.
3. **Map Attributes to Extraction Rules:** Associate the attributes with the corresponding extraction rules.

#### 3.2 Extractor Manager

This component handles data sources for retrieving raw data to meet query requirements. The extraction method varies by data source, so the extractor must support multiple methods. The extractor and mapping architecture are designed to be easily extended to support other extraction methods and languages.

The Schematic Transformation module is implemented through three tasks:
1. **Obtain Extraction Schema:** Retrieve the extraction schemas of the required attributes.
2. **Obtain Data Source Definition:** Fetch the associated data source definition to enable access.
3. **Data Extraction:** Execute the extraction based on the obtained schemas and definitions.

Attributes are linked to data sources, which have specific connection characteristics. Therefore, extractors need to know how to connect to each data source. After retrieving an extraction schema, the extractor fetches the associated data source definition to enable its access. The extraction mechanism is supported by a mediator and a set of wrappers/extractors.

#### 3.3 Instance Generator

This module serializes the output data format and manages errors from queries and extraction phases. The Schematic Transformation module converts structured, semi-structured, or unstructured formats to XML. The population process (XML instance generation) is automated because the extracted information adheres to the XML schema.

#### 3.4 Query Handler

A query initiates the Schematic Transformation module. The input is based on a higher-level semantic query language. This query is then transformed to represent requests based on XML elements. The Syntactic-to-Semantic Query Language (S2SQL) is a simplified version of SQL supported by the extraction module. It omits the FROM and related operators, making data location transparent from the query's perspective. Queries are created only with the indication of the required data, without needing to specify data location, format, or extraction method.

### Syntactic-to-Semantic Transformation

Modern enterprises face significant challenges in integrating disparate information spread across multiple data sources, both within and outside the organization. Many organizations use XML standards to define their data models. However, even with XML, integration issues arise. Emerging Semantic Web technologies, such as ontologies, RDF, RDFS, and OWL, can play a crucial role in the semantic definition and integration of data.

The Syntactic-to-Semantic Transformation module allows organizations to transition from a syntactic data infrastructure defined in XML to a semantic data infrastructure using OWL. This module supports mappings and fully automated instance transformation from syntactic data sources in XML format to a common shared global model defined by an ontology using Semantic Web technologies. It enables organizations to automatically convert their XML data sources to a semantic model defined in OWL.

#### 4.1 Semantic Model

An ontology is necessary to conceptualize a domain in a machine-readable format. In B2B applications, ontologies promote interoperability, enable intelligent processing, and facilitate knowledge sharing and reuse. From a data integration perspective, ontologies provide a shared common understanding of a domain.

**Figure 4: Ontology Schema Example**

The ontology schema defines the structure and semantics of data (Figure 4). It is essential for the extraction process, as it creates mappings between data sources and the schema. The ontology schema also defines the query specification process.

#### 4.2 JXML2OWL Framework

JXML2OWL (Rodrigues et al., 2006) is a framework divided into two sub-projects: JXML2OWL API and JXML2OWL Mapper. The API is a generic, reusable, open-source library for mapping XML schemas to OWL ontologies on the Java platform. The Mapper is a Java Swing application with a graphical user interface (GUI) that uses the API to simplify the mapping process (Figure 5).

JXML2OWL supports manual mappings from XML, XSD, or DTD documents to an OWL ontology, including many-to-many mappings. Conditional mappings through XPath predicates are not currently implemented. Based on the performed mappings, JXML2OWL generates mapping rules wrapped in an XSL document, enabling the automatic transformation of any XML data into instances of the mapped ontology.

**Figure 5: JXML2OWL Mapper with Some Mappings**

The mapping process in JXML2OWL involves several steps:
1. **Create a New Mapping Project:** Load the XML Schema (XSD or DTD) and the OWL ontology. If an XML schema is not available, load an XML document, and JXML2OWL will extract a possible schema.
2. **Create Class Mappings:** Map elements of the loaded XML schema to classes of the ontology.
3. **Create Object and Data Type Property Mappings:** Relate the class mappings to create object property mappings or data type property mappings.
4. **Export Transformation Rules:** Export the generated transformation rules as an XSL document, which can transform any XML document validating against the mapped schema into individuals of the mapped OWL ontology.

### Related Work

Several research projects aim to achieve similar objectives as the SIM middleware. The main difference is that SIM uses semantics and ontologies to achieve a higher degree of integration and interoperability. Notable projects include:
- **World Wide Web Wrapper Factory (W4F):** A toolkit for developing web wrappers/extractors, allowing users to create and deploy them as modules in larger applications. W4F extracts data exclusively from web pages and outputs in XML or Java interfaces.
- **Caméléon Web Wrapper Engine:** Capable of extracting from both text and binary formats, providing output in XML.
- **Artequakt:** An Automatic Ontology-Based Knowledge Extraction system that generates personalized biographies but is customized to a specific domain.
- **Architecture for Semantic Data Access to Heterogeneous Information Sources:** Provides uniform access to heterogeneous data sources through a common query interface based on a Semantic Data Model.

### Conclusions

Semantic integration of HAD data assets is one of the most challenging and costly tasks in enterprise information technology. The Semantic Web can help integrate multiple physical heterogeneous data schemas by mapping them to one or more ontologies, reflecting the desired business world-view. This paper presents the SIM middleware architecture, which semantically integrates organizational data assets. The main goal is to offer a common understanding of a domain and assimilate heterogeneous systems using Semantic Web technology.

SIM supports various data storage and message formats, such as flat files, EDI documents, XML, and relational databases. To achieve integration, SIM transforms these schemas using extractors/wrappers and syntactic mappings to infer translation scripts between the data assets and an intermediate XML data representation. Once the data assets are stored using an XML schema, the Syntactic-to-Semantic Transformation module maps XML documents to existing OWL ontologies and automatically transforms XML instances into individuals of the mapped ontology.

SIM has been successfully employed to integrate disparate e-tourism data sources as individuals of an e-tourism OWL ontology.

### Acknowledgements

This work was funded by grants from the FCT (Fundação para a Ciência e a Tecnologia) and carried out in cooperation with Expedita. We would like to thank Toni Rodrigues, Pedro Rosa, and Bruno Silva for the implementation of the SIM system.

### References

- Alani, H., Kim, S., Millard, D. E., Weal, M. J., Hall, W., Lewis, P. H., & Shadbolt, N. R. (2003). IEEE Intelligent Systems, 18(1), 14-21.
- Barnett, M., & Standing, C. (2001). Journal of Vacation Marketing, 7(2), 143-152.
- Bass, L., Clements, P., & Kazman, R. (1998). Software Architecture in Practice. Addison Wesley.
- Bussler, C. (2003). B2B Integration: Concepts and Architecture. Springer-Verlag.
- Cardoso, J., & Sheth, A. (2005). Semantic Web Process: Powering Next Generation of Processes with Semantics and Web Services. Lecture Notes in Computer Science, Springer-Verlag, Vol. 3387, ISBN: 3-540-24328-3, Heidelberg.
- Cardoso, J., & Sheth, A. (2006). Semantic Web Services, Processes and Applications. Springer, ISBN: 0-38730239-5.
- Cycorp (2006). Cyc Knowledge Base - http://www.cyc.com/.
- EBizQ (2005). Semantic Integration: A New Approach to an Old Problem. http://www.ebizq.net/white_papers/5988.html Software AG.
- Eckerson, W. (2003). Data Quality and the Bottom Line, Vol. 2003. The Data Warehousing Institute. http://www.dw-institute.com/research/display.asp?id=6028.
- Firat, A., Madnick, S., & Siegel, M. (2000). The Caméléon Web Wrapper Engine. Cairo, Egypt, pp. 269-283.
- Genesereth, M. (2006). Knowledge Interchange Format (KIF) - http://logic.stanford.edu/kif/dpans.html.
- Hawke, S. (2001). XML with Relational Semantics: Bridging the Gap to RDF and the Semantic Web. W3C. http://www.w3.org/2001/05/xmlrs/.
- Lassila, O., & Swick, R. (1999). Resource Description Framework (RDF) Model and Syntax Specification. W3C Working Draft WD-rdf-syntax-19981008. http://www.w3.org/TR/WD-rdf-syntax.
- Ouskel, A. M., & Sheth, A. (1999). SIGMOD Record, 28(1), 5-12.
- OWL (2004). OWL Web Ontology Language Reference. W3C Recommendation, Vol. 2004. World Wide Web Consortium. http://www.w3.org/TR/owl-ref/.
- Protégé (2005). Protégé, Vol. 2005. Stanford Medical Informatics.
- Rayport, J. F., & Jaworski, B. J. (2001). e-Commerce. McGraw-Hill, Boston.
- Rishe, N., Vaschillo, A., Vasilevsky, D., Shaposhnikov, A., & Chen, S.-C. (2000). The Architecture for Semantic Data Access to Heterogeneous Information Sources. New Orleans, Louisiana, USA, pp. 134-139.
- Rodrigues, T., Rosa, P., & Cardoso, J. (2006). Moving from Syntactic to Semantic Organizations using JXML2OWL. Department of Mathematics and Engineering, University of Madeira, Report nº20061, Funchal, Portugal.
- Sahuguet, A., & Azavant, F. (1999). Building Intelligent Web Applications Using Lightweight Wrappers. Edinburgh, Scotland, UK, pp. 738-741.
- Schreiber, Z. (2003). Applying the Semantic Web Vision to Enterprise Data Management: A Case Study. Budapest, Hungary, pp. 79.
- Shabo A., S., R.-C., & P., V. (2006). IBM Systems Journal, 45(3), 361-372.
- Sheth, A. (1998). In Interoperating Geographic Information Systems (Eds, Goodchild, M. F., Egenhofer, M. J., Fegeas, R., & Kottman, C. A.). Kluwer, Academic Publishers, pp. 5-30.
- Silva, B., & Cardoso, J. (2006). Semantic Data Extraction for B2B Integration. IEEE Computer Society, Lisboa, Portugal.
- XML (2005). Extensible Markup Language (XML) 1.0 (Third Edition). W3C Recommendation 04 February 2004. http://www.w3.org/TR/REC-xml/.