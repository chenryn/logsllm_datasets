### Entropy-Related Vulnerabilities and Their Origins

Contrary to the belief that any remaining entropy issues are solely due to developers taking shortcuts, our findings suggest a more complex reality. Entropy-related vulnerabilities often arise from intricate interactions between hardware, operating systems, applications, and cryptographic primitives. The engineering practices and principles necessary to ensure the secure use of unpredictable randomness across diverse systems have yet to be fully developed.

### Graceful Degradation of Cryptographic Primitives

Cryptographic primitives are typically designed to be secure under ideal conditions, but real-world scenarios often subject them to less-than-ideal circumstances. For instance, RSA and DSA are frequently used in environments with weak entropy, leading to the total compromise of private keys. Future cryptographic primitives should be designed to degrade gracefully under such failure modes.

### Related Work

#### HTTPS Surveys

The public-key infrastructure (PKI) for HTTPS has been a focal point of research in recent years. Several large-scale scans have been conducted to measure TLS usage and CA behavior. Our study, however, addresses issues that are largely separate from the CA ecosystem.

In 2010, the Electronic Frontier Foundation (EFF) and iSEC Partners launched the SSL Observatory project [18], creating the largest public repository of TLS certificates. Their analysis highlighted several vulnerabilities in the CA infrastructure. Our work was inspired by their dataset, where we first identified some of the entropy problems we describe. However, we conducted our own scans to obtain more up-to-date and comprehensive data.

In 2011, Holz et al. [26] scanned the Alexa top one million domains and observed TLS sessions through the Munich Scientific Research Network (MWN). They recorded 960,000 certificates, making it the largest academic TLS data study at the time. While they noted repeated keys as "curious, but not very frequent," Yilek et al. [37] performed daily scans of 50,000 TLS servers over several months to track the replacement time for certificates affected by the Debian weak key bug. Our count of Debian certificates provides additional data on this issue.

#### Problems with Random Number Generation

Several significant vulnerabilities related to weak random number generation have been discovered in widely used software. In 1996, the Netscape browser's SSL implementation was found to use fewer than a million possible seeds for its PRNG [19]. In May 2008, Bello discovered that the OpenSSL version included in Debian Linux generated keys with only 15 bits of entropy [5], resulting in just 294,912 distinct keys per key size over a two-year period before the error was detected [37].

Gutmann [22] draws lessons from developer responses to an OpenSSL update aimed at ensuring proper seeding of the entropy pool. He observes that many developers bypassed the safety checks, providing no randomness. According to Gutmann, the root cause was that OpenSSL left the challenging task of supplying sufficient entropy to library users. He concludes that PRNGs should handle entropy gathering themselves.

Gutterman, Pinkas, and Reinman analyzed the Linux random number generator in 2006 [23]. Unlike our empirical measurement of an instrumented Linux kernel, their analysis was based mainly on a review of the LRNG design. They pointed out several cryptographic weaknesses, some of which have since been addressed. In a brief experimental section, they noted that the OpenWRT Linux distribution relied solely on network interrupts for entropy.

#### Weak Entropy and Cryptography

In 2004, Bauer and Laurie [2] computed the pairwise GCDs of 18,000 RSA keys from the PGP web of trust and found a pair with a common factor of 9, indicating broken or omitted primality testing. The DSA signature weakness we investigate is well-known and considered folklore. In 2010, the hacking group fail0verflow computed the ECDSA private key used for code signing on the Sony PS3 after observing repeated ephemeral keys [12]. More sophisticated attacks against DSA exist: Bellare, Goldwasser, and Miccancio [4] show that the private key is revealed if the ephemeral key is generated using a linear congruential generator, and Howgrave-Graham and Smart [27] provide a method to compute the private key from a fraction of the bits of the ephemeral key.

Ristenpart and Yilek [34] developed "virtual machine reset" attacks in 2010, inducing repeated DSA ephemeral keys after a VM reset. They implemented "hedged" cryptography to protect against such randomness failures. Hedged public key encryption, introduced by Bellare et al. in 2009, is designed to fail gracefully in the face of bad randomness [3].

As we prepared this paper, an independent group of researchers uploaded a preprint [31] reporting that they had computed the pairwise GCD of RSA moduli from the EFF SSL Observatory dataset and a database of PGP keys. Their work is concurrent and independent of ours; we were unaware of their efforts until their work was made public. They declined to report their GCD computation method. We responded by publishing a blog post [25] describing our approach and summarizing some of our key findings.

The authors of the concurrent work reported similar results on the fraction of keys that could be factored, validating our findings. However, they drew different conclusions, suggesting that RSA is "significantly riskier" than DSA without analyzing the source of the entropy failures. In contrast, we performed original scans targeting SSH and TLS, looking for DSA repeated signature weaknesses and cofactorable RSA keys. We found that SSH DSA private keys are compromised at a higher rate than RSA keys, concluding that the fundamental problem is implementational rather than cryptographic.

Furthermore, the authors of the concurrent work stated that they "cannot explain the relative frequencies and appearance" of the weak keys and made no attempt to determine their source. In our work, we traced vulnerable keys back to specific devices and software implementations, notifying responsible developers and manufacturers. We found that the weak keys can be explained by specific design and implementation failures at various levels of the software stack, and we make detailed recommendations to lessen these problems in the future.

### Conclusion

Our investigation into the security of random number generation on a broad scale, through the most comprehensive Internet-wide scans of TLS certificates and SSH host keys to date, revealed that insecure RNGs are in widespread use, leading to a significant number of vulnerable RSA and DSA keys. Our experiences suggest that such scanning and analysis can be a useful tool for finding subtle flaws in cryptographic implementations. Previous examples of random number generation flaws were found through reverse engineering individual devices or through chance observations. Our scan data allowed us to detect problems in dozens of different devices and implementations, many of which would have been too rare to be observed by a single user. The results serve as a reminder that vulnerabilities can sometimes be hiding in plain sight.

### Acknowledgments

We thank Dan Bernstein and Tanja Lange for discussions on batch factorization and OpenSSL, and Hovav Shacham for advice on many aspects of this work. We also thank Jake Appelbaum, Michael Bailey, Kevin Borders, Keith Brautigam, Ransom Briggs, Jesse Burns, Aleksander Durumeric, Prabal Dutta, Peter Eckersley, Andy Isaacson, James Kasten, Ben Laurie, Stephen Schultze, Ron Rivest, and David Robinson.

This material is based upon work supported by the National Science Foundation under Award No. DMS-1103803, the MURI program under AFOSR Grant No. FA9550-08-1-0352, and a National Science Foundation Graduate Research Fellowship.

### References

[1] random(4) Linux manual page. http://www.kernel.org/doc/man-pages/online/pages/man4/random.4.html.
[2] BAUER, M., AND LAURIE, B. Factoring silly keys from the keyservers. In The Shoestring Foundation Weblog (July 2004). http://shoestringfoundation.org/cgi-bin/blosxom.cgi/2004/07/01#non-pgp-key.
[3] BELLARE, M., BRAKERSKI, Z., NAOR, M., RISTENPART, T., SEGEV, G., SHACHAM, H., AND YILEK, S. Hedged public-key encryption: How to protect against bad randomness. In Proc. Asiacrypt 2009 (Dec. 2009), M. Matsui, Ed., pp. 232–249.
[4] BELLARE, M., GOLDWASSER, S., AND MICCIANCIO, D. “Pseudo-random” generators within cryptographic applications: the DSS case. In Advances in Cryptology—CRYPTO ’97 (Aug. 1997), B. S. Kaliski Jr., Ed., pp. 277–291.
[5] BELLO, L. DSA-1571-1 OpenSSL—Predictable random number generator, 2008. Debian Security Advisory. http://www.debian.org/security/2008/dsa-1571.
[6] BERNSTEIN, D. J. How to find the smooth parts of integers. http://cr.yp.to/papers.html#smoothparts.
[7] BERNSTEIN, D. J. Fast multiplication and its applications. Algorithmic Number Theory (May 2008), 325–384.
[8] BLUM, M., AND MICALI, S. How to generate cryptographically strong sequences of pseudo-random bits. SIAM J. Comput. 13, 4 (1984), 850–864.
[9] BONEH, D. Twenty years of attacks on the RSA cryptosystem. Notices of the AMS 46, 2 (1999), 203–213.
[10] BRIER, E., CLAVIER, C., CORON, J., AND NACCACHE, D. Cryptanalysis of RSA signatures with fixed-pattern padding. In Advances in Cryptology—Crypto 2001, pp. 433–439.
[11] BROWN, D. R. L. Standards for efficient cryptography 1: Elliptic curve cryptography, 2009. http://www.secg.org/download/aid-780/sec1-v2.pdf.
[12] BUSHING, MARCAN, SEGHER, AND SVEN. Console hacking 2010: PS3 epic fail. Talk at 27th Chaos Communication Congress (2010). http://events.ccc.de/congress/2010/Fahrplan/attachments/1780_27c3_console_hacking_2010.pdf.
[13] CHOR, B., AND GOLDREICH, O. Unbiased bits from sources of weak randomness and probabilistic communication complexity. In Proc. 26th IEEE Symposium on Foundations of Computer Science (1985), pp. 429–442.
[14] COX, M., ENGELSCHALL, R., HENSON, S., LAURIE, B., ET AL. The OpenSSL project. http://www.openssl.org.
[15] DAVIS, D., IHAKA, R., AND FENSTERMACHER, P. Cryptographic randomness from air turbulence in disk drives. In Advances in Cryptology—CRYPTO ’94 (1994), pp. 114–120.
[16] DIERKS, T., AND RESCORLA, E. The Transport Layer Security (TLS) Protocol, Version 1.2. RFC 5246.
[17] DORRENDORF, L., GUTTERMAN, Z., AND PINKAS, B. Cryptanalysis of the Windows random number generator. In Proc. 14th ACM Conference on Computer and Communications Security (2007), CCS ’07, pp. 476–485.
[18] ECKERSLEY, P., AND BURNS, J. An observatory for the SSLiverse. Talk at Defcon 18 (2010). https://www.eff.org/files/DefconSSLiverse.pdf.
[19] GOLDBERG, I., AND WAGNER, D. Randomness and the Netscape browser. Dr. Dobb’s Journal 21, 1 (1996), 66–70.
[20] GRANLUND, T., ET AL. The GNU multiple precision arithmetic library. http://gmplib.org/.
[21] GUTMANN, P. Software generation of random numbers for cryptographic purposes. In Proc. 7th USENIX Security Symposium (1998), pp. 243–257.
[22] GUTMANN, P. Lessons learned in implementing and deploying crypto software. In Proc. 11th USENIX Security Symposium (2002), pp. 315–325.
[23] GUTTERMAN, Z., PINKAS, B., AND REINMAN, T. Analysis of the Linux random number generator. In Proc. 2006 IEEE Symposium on Security and Privacy (May 2006), pp. 371–385.
[24] HEFFNER, C., ET AL. LittleBlackBox: Database of private SSL/SSH keys for embedded devices. http://code.google.com/p/littleblackbox/.
[25] HENINGER, N., ET AL. There’s no need to panic over factorable keys—just mind your Ps and Qs. Freedom to Tinker weblog (2012). https://freedom-to-tinker.com/blog/nadiah/new-research-theres-no-need-panic-over-factorable-keys-just-mind-your-ps-and-qs.
[26] HOLZ, R., BRAUN, L., KAMMENHUBER, N., AND CARLE, G. The SSL landscape—A thorough analysis of the X.509 PKI using active and passive measurements. In Proc. 2011 ACM SIGCOMM Internet Measurement Conference (2011), pp. 427–444.
[27] HOWGRAVE-GRAHAM, N., AND SMART, N. Lattice attacks on digital signature schemes. Designs, Codes and Cryptography 23, 3 (2001), 283–290.
[28] KLEINJUNG, T., AOKI, K., FRANKE, J., LENSTRA, A., THOMÉ, E., BOS, J., GAUDRY, P., KRUPPA, A., MONTGOMERY, P., OSVIK, D., TE RIELE, H., TIMOFEEV, A., AND ZIMMERMANN, P. Factorization of a 768-bit RSA modulus. In Advances in Cryptology—CRYPTO 2010 (2010), T. Rabin, Ed., pp. 333–350.
[29] LAWSON, N. DSA requirements for random k value. http://rdist.root.org/2010/11/19/dsa-requirements-for-random-k-value/.
[30] LENSTRA, A., LENSTRA, H., MANASSE, M., AND POLLARD, J. The number field sieve. In The development of the number field sieve, A. Lenstra and H. Lenstra, Eds., vol. 1554 of Lecture Notes in Mathematics. 1993, pp. 11–42.
[31] LENSTRA, A. K., HUGHES, J. P., AUGIER, M., BOS, J. W., KLEINJUNG, T., AND WACHTER, C. Ron was wrong, Whit is right. Cryptology ePrint Archive, Report 2012/064, 2012. http://eprint.iacr.org/2012/064.pdf.
[32] LOCKE, G., AND GALLAGHER, P. FIPS PUB 186-3: Digital Signature Standard (DSS). Federal Information Processing Standards Publication (2009).
[33] LYON, G. F. Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning. Insecure, USA, 2009.
[34] RISTENPART, T., AND YILEK, S. When good randomness goes bad: Virtual machine reset vulnerabilities and hedging deployed cryptography. In Proc. ISOC Network and Distributed Security Symposium (2010).
[35] RIVEST, R. L., SHAMIR, A., AND ADLEMAN, L. A method for obtaining digital signatures and public-key cryptosystems. Commun. ACM 21 (Feb. 1978), 120–126.
[36] WOOLLEY, R., MURRAY, M., DOUNIN, M., AND ERMILOV, R. FreeBSD security advisory FreeBSD-SA-08:11.arc4random, 2008. http://lists.freebsd.org/pipermail/freebsd-security-notifications/2008-November/000117.html.
[37] YILEK, S., RESCORLA, E., SHACHAM, H., ENRIGHT, B., AND SAVAGE, S. When private keys are public: Results from the 2008 Debian OpenSSL vulnerability. In Proc. 2009 ACM SIGCOMM Internet Measurement Conference, pp. 15–27.
[38] YLONEN, T. SSH—secure login connections over the internet. In Proc. 6th USENIX Security Symposium (1996), pp. 37–42.
[39] YLÖNEN, T., AND LONVICK, C. The secure shell (SSH) protocol architecture. http://merlot.tools.ietf.org/html/rfc4251.