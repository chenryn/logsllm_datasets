### Techniques for Transient Fault Detection and Tolerance

Several techniques have been developed to detect and tolerate transient faults in computing systems. For instance, SWIFT [24] generates binary code with redundant computations and compares the results to identify erroneous computations. However, this approach does not fully leverage multi-core processors, as the duplicated code runs on a single core. Additionally, it assumes that writes to memory are error-free and does not self-check the comparisons.

Wang et al. [25] introduced compiler-managed redundant multi-threading, which utilizes multi-core processors for more efficient transient fault detection. However, the management layer used to create and schedule the leading and following threads is not protected. Process-Level Redundancy (PLR) [26] replicates applications and libraries to leverage multi-core processors for transient fault tolerance, but it assumes that the PLR management layer and the operating system are correct.

EVE (Execute-Verify) [27] uses state machine replication to improve the dependability of services provided by multi-core servers. Hardware transient faults are detected during the verification stage. Romain [28] is an operating system service that provides transparent redundant multi-threading to tolerate transient faults. The replicated application states are compared before they are externalized, but the authors note that the Romain service and the kernel should be protected by other measures [29].

Bressoud et al. [30] implemented a hypervisor-based fault-tolerant system on HP PA-RISC processors, designing protocols to enhance the hypervisor and coordinate primary and backup virtual machines (VMs) for fault tolerance. As virtualization technologies have matured, the overhead of creating and running VMs has significantly reduced. VMware [31] designed fault-tolerant features for their enterprise product line, where the backup VM synchronizes its internal state with the primary VM by executing all events sent through a logging channel. These virtual-machine-based solutions focus on providing high service availability and use fail-over to mitigate detected failures. However, if hardware faults affect the hypervisor or the hosting operating system, these faults may go undetected, leading to service outages or data corruption.

### Conclusions

We have argued that a formally verified microkernel, such as seL4, provides the high-level correctness and isolation guarantees necessary for building trustworthy software systems. However, commodity hardware lacks high-dependability features and is susceptible to environmental factors like temperature, radiation, and cosmic rays. Transient faults or any deviations from assumed hardware behavior can invalidate the correctness and security guarantees.

In this paper, we explored leveraging redundant processors to improve the trustworthiness of commercial off-the-shelf (COTS) hardware. We implemented dual- and triple-redundant versions of the seL4 microkernel and identified inter-process communication as a performance issue. Micro-benchmarks on both ARM and x86-64 architectures revealed significant performance overhead at the micro-benchmark level.

Future work will focus on three areas: (1) evaluating performance at the macro-level of a more significant system, (2) expanding the scope of replication to check more than just syscall inputs and outputs, and (3) integrating device drivers into our system.

### Acknowledgements

NICTA is funded by the Australian Government, represented by the Department of Broadband, Communications, and the Digital Economy, and the Australian Research Council through the ICT Centre of Excellence program.

### References

[1] National Security Telecommunications and Information Systems Security Committee, National Security Agency, “Red/black installation guidance,” Dec. 1995, retrieved from: http://cryptome.org/tempest-2-95.htm (Sept, 2012).

[2] J. Alves-Foss, P. W. Oman, C. Taylor, and S. Harrison, “The MILS architecture for high-assurance embedded systems,” International Journal on Embedded Systems, vol. 2, pp. 239–247, 2006.

[3] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-VM side channels and their use to extract private keys,” in Proceedings of the 19th ACM Conference on Computer and Communications Security, Raleigh, NC, USA, 2012, pp. 305–316.

[4] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood, “seL4: Formal verification of an OS kernel,” in Proceedings of the 22nd ACM Symposium on Operating Systems Principles. Big Sky, MT, USA: ACM, Oct. 2009, pp. 207–220.

[5] T. Sewell, S. Winwood, P. Gammie, T. Murray, J. Andronick, and G. Klein, “seL4 enforces integrity,” in 2nd International Conference on Interactive Theorem Proving, ser. Lecture Notes in Computer Science, M. C. J. D. van Eekelen, H. Geuvers, J. Schmaltz, and F. Wiedijk, Eds., vol. 6898. Nijmegen, The Netherlands: Springer, Aug. 2011, pp. 325–340.

[6] X. Leroy, “Formal verification of a realistic compiler,” Communications of the ACM, vol. 52, no. 7, pp. 107–115, 2009.

[7] R. Baumann, “Soft errors in advanced computer systems,” IEEE Design and Test of Computers, vol. 22, no. 3, pp. 258–266, May 2005.

[8] G. P. Saggese, N. J. Wang, Z. T. Kalbarczyk, S. J. Patel, and R. K. Iyer, “An experimental study of soft errors in microprocessors,” IEEE Micro, vol. 25, no. 6, pp. 30–39, Nov. 2005.

[9] B. Bentley, “Validating the Intel Pentium 4 microprocessor,” in Proceedings of the 38th Design Automation Conference (DAC), Las Vegas, NV, USA, 2001, pp. 244–248.

[23] N. Aggarwal, P. Ranganathan, N. P. Jouppi, and J. E. Smith, “Configurable isolation: building high availability systems with commodity multi-core processors,” in Proceedings of the 34th International Symposium on Computer Architecture, San Diego, CA, USA, 2007, pp. 470–481.

[24] M. M. Swift, B. N. Bershad, and H. M. Levy, “Improving the reliability of commodity operating systems,” in Proceedings of the 19th ACM Symposium on Operating Systems Principles, Bolton Landing (Lake George), New York, USA, Oct. 2003.

[25] C. Wang, H. S. Kim, Y. Wu, and V. Ying, “Compiler-managed software-based redundant multi-threading for transient fault detection,” in Proceedings of the 5th International Symposium on Code Generation and Optimization, 2007, pp. 244–258.

[26] A. Shye, T. Moseley, V. J. Reddi, J. Blomstedt, and D. A. Connors, “Using process-level redundancy to exploit multiple cores for transient fault tolerance,” in Proceedings of the 37th International Conference on Dependable Systems and Networks (DSN), Jun. 2007, pp. 297–306.

[27] M. Kapritsos, Y. Wang, V. Quema, A. Clement, L. Alvisi, and M. Dahlin, “All about Eve: Execute-verify replication for multi-core servers,” in Proceedings of the 10th USENIX Symposium on Operating Systems Design and Implementation, Hollywood, CA, USA, 2012, pp. 237–250.

[28] B. Döbel, H. Härtig, and M. Engel, “Operating system support for redundant multithreading,” in Proceedings of the 12th International Conference on Embedded Software, Tampere, Finland, Oct. 2012, pp. 83–92.

[29] B. Döbel and H. Härtig, “Who watches the watchmen? protecting operating system reliability mechanisms,” in Proceedings of the 8th Workshop on Hot Topics in System Dependability, Hollywood, CA, USA, Oct. 2012.

[30] T. C. Bressoud and F. B. Schneider, “Hypervisor-based fault tolerance,” ACM Transactions on Computer Systems, vol. 14, pp. 80–107, 1996.

[31] D. J. Scales, M. Nelson, and G. Venkitachalam, “The design of a practical system for fault-tolerant virtual machines,” ACM Operating Systems Review, vol. 44, no. 4, pp. 30–39, Dec. 2010.

[10] J. Bhadra, M. S. Abadir, L. C. Wang, and S. Ray, “A survey of hybrid techniques for functional verification,” IEEE Design and Test of Computers, vol. 24, no. 2, pp. 112–122, Mar. 2007.

[11] R. Kaivola, R. Ghughal, N. Narasimhan, A. Telfer, J. Whittemore, S. Pandav, A. Slobodová, C. Taylor, V. Frolov, E. Reeber, and A. Naik, “Replacing testing with formal verification in Intel Core i7 processor execution engine validation,” in Proceedings of the 21st International Conference on Computer Aided Verification, Grenoble, France, 2009, pp. 414–429.

[12] S. E. Michalak, K. W. Harris, N. W. Hengartner, B. E. Takala, and S. A. Wender, “Predicting the number of fatal soft errors in Los Alamos national laboratory’s ASC Q supercomputer,” IEEE Transactions on Devices and Materials Reliability, vol. 5, no. 3, pp. 329–335, Sep. 2005.

[13] D. Lyons, “Sun screen,” Nov. 2000. [Online]. Available: http://www.forbes.com/global/2000/1113/0323026a.html

[14] Amazon. (2008, Jul.) Amazon S3 availability event: July 20, 2008. [Online]. Available: http://status.aws.amazon.com/s3-20080720.html

[15] E. B. Nightingale, J. R. Douceur, and V. Orgovan, “Cycles, cells and platters: An empirical analysis of hardware failures on a million consumer PCs,” in Proceedings of the 6th EuroSys Conference, Salzburg, Austria, Apr. 2011.

[16] J. Xu, S. Chen, Z. Kalbarczyk, and R. K. Iyer, “An experimental study of security vulnerabilities caused by errors,” in Proceedings of the International Conference on Dependable Systems and Networks (DSN), 2001, pp. 421–430.

[17] S. Chen, J. Xu, Z. Kalbarczyk, R. K. Iyer, and K. Whisnant, “Modeling and evaluating the security threats of transient errors in firewall software,” Performance Evaluation, vol. 56, no. 1–4, pp. 53–72, Mar. 2004.

[18] S. Govindavajhala and A. W. Appel, “Using memory errors to attack a virtual machine,” in IEEE Symposium on Security and Privacy, 2003, pp. 154–165.

[19] J. Liedtke, K. Elphinstone, S. Schönberg, H. Härtig, G. Heiser, N. Islam, and T. Jaeger, “Achieved IPC performance (still the foundation for extensibility),” in Proceedings of the 6th Workshop on Hot Topics in Operating Systems, Cape Cod, MA, USA, May 1997, pp. 28–31.

[20] A. L. Hopkins Jr., T. B. Smith III, and J. H. Lala, “FTMP—a highly reliable fault-tolerant multiprocessor for aircraft,” Proceedings of the IEEE, vol. 66, no. 10, pp. 1221–1239, 1978.

[21] J. H. Wensley, L. Lamport, J. Goldberg, M. W. Green, K. N. Levitt, P. M. Melliar-Smith, R. E. Shostak, and C. B. Weinstock, “SIFT: Design and analysis of a fault-tolerant computer for aircraft control,” Proceedings of the IEEE, vol. 66, no. 10, pp. 1240–1255, 1978.

[22] D. Bernick, B. Bruckert, P. Del Vigna, D. Garcia, R. Jardine, J. Klecka, and J. Smullen, “NonStop advanced architecture,” in Proceedings of the International Conference on Dependable Systems and Networks (DSN), 2005.