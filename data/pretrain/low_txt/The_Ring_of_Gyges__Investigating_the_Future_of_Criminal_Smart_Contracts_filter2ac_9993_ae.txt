# Optimized Text

## 5. CSC for Website Defacement

### 5.1 Algorithm
1. Find the smallest `commit(cc, P; ρ)`, and abort if not found.
2. Assert that `stmt ∈ w`.
3. Assert that `preamble(cc, w) = true`.
4. Assert that `t ≥ Tstart`.
5. Assert that `SigVer(pkS, (w, url, t), σ) = true`.
6. Send `$reward` to `Pi` and abort.
7. Set `vcci`.

**Figure 5: CSC for Website Defacement**

The calling card `cc` is generated as a digital signature by `P`. However, our implementation also supports short, low-entropy calling cards, which are important for general calling-card CSCs. For more details, see Appendix G.

### 5.2 Implementation
Given an authenticated data feed, implementing `SiteDeface` would be straightforward and efficient. The primary overhead lies in the Claim module, where the contract computes a few hashes and validates the feed signature on retrieved website data. As noted in Section 4, a hash function call can be computed in very short time (4 µsec), while checking the signature would be more costly. For example, if the retrieved content is 100 KB, the contract needs only about 10 msec to verify an RSA-2048 signature.

### 6.2 Formal Definition of Commission-Fairness
We provide a formal definition of commission-fairness for a general calling-card CSC in Appendix H. We do not provide a security proof, as this would require modeling physical-world systems, which is outside the scope of this paper.

### 6.3 Other Calling-Card Crimes
Using a CSC similar to `SiteDeface`, a contractor `C` can solicit many other crimes, such as assassination, assault, sabotage, hijacking, kidnapping, denial-of-service attacks, and terrorist attacks. A perpetrator `P` must be able to designate a calling card that is reliably reported by an authenticated data feed. If `C` is concerned about suppression of information in one source, they can create a CSC that references multiple sources, such as multiple news feeds. These issues are discussed in Appendix G.

## 7. Countermeasures
The main aim of our work is to emphasize the importance of research into countermeasures against CSCs for emerging smart contract systems like Ethereum. We briefly discuss this challenge and one possible approach.

### 7.1 Tainted Coins and Blacklisting
Ideas such as blacklisting "tainted" coins—those known to have been involved in criminal transactions—have been proposed for cryptocurrencies like Bitcoin. A proactive alternative, as noted in Section 2, is the identity-escrow idea from early (centralized) e-cash systems, sometimes referred to as "trustee-based tracing" [24, 62].

#### Trustee-Tracing Schemes
Trustee-tracing schemes allowed a trusted party ("trustee") or a quorum of such parties to trace monetary transactions that would otherwise remain anonymous. In decentralized cryptocurrencies, however, users do not register identities with authorities, and many would object to doing so. It would be possible for users to voluntarily register with authorities of their choice and to accept only currency they deem suitably registered. The notion of tainting coins has been poorly received by the cryptocurrency community because it undermines the basic cash-like property of fungibility [13, 51], and trustee-based tracing would have a similar drawback. It is also unclear what entities should be granted the authority to perform blacklisting or register users.

### 7.2 Trustee-Neutralizable Smart Contracts
We propose the concept of trustee-neutralizable smart contracts. A smart contract system could be designed such that an authority, quorum of authorities, or suitable set of general system participants is empowered to remove a contract from the blockchain. This approach would have a significant advantage over traditional trustee-based protections, as it would not require users to register identities. Whether this idea would be acceptable to cryptocurrency communities and whether a broadly acceptable set of authorities could be identified are open questions, as are the right supporting technical mechanisms. We believe, however, that such a countermeasure might prove easier to implement than blacklisting or user registration.

## 8. Conclusion
We have demonstrated that a range of commission-fair criminal smart contracts (CSCs) are practical for implementation in decentralized currencies with smart contracts. We presented three examples—leakage of secrets, key theft, and calling-card crimes—and showed that they are efficiently implementable with existing cryptographic techniques, given suitable support in smart contract systems such as Ethereum. The contract `PublicLeaks` and its private variant can today be efficiently implemented in Serpent, an Ethereum scripting language. `KeyTheft` would require only modest, already envisioned opcode support for zk-SNARKs for efficient deployment. Calling-card CSCs will be possible given a sufficiently rich data-feed ecosystem. Many more CSCs are no doubt possible.

We emphasize that smart contracts in distributed cryptocurrencies have numerous promising, legitimate applications, and banning smart contracts would be neither sensible nor, in all likelihood, possible. The urgent open question raised by our work is how to create safeguards against the most dangerous abuses of such smart contracts while supporting their many powerful, beneficial applications.

## References
[1] http://www.smartcontract.com.
[2] http://koinify.com.
[3] https://github.com/darkwallet/darkleaks.
[4] Amazon EC2 pricing. http://aws.amazon.com/ec2/pricing/.
[5] Augur. http://www.augur.net/.
[6] Bitcoin ransomware now spreading via spam campaigns. http://www.coindesk.com/bitcoin-ransomware-now-spreading-via-spam-campaigns/.
[7] bitoinj. https://bitcoinj.github.io/.
[8] CRL issued by Symantec Class 3 EV SSL CA - G3. http://ss.symcb.com/sr.crl.
[9] NIST randomness beacon. https://beacon.nist.gov/home.
[10] Serpent. https://github.com/ethereum/wiki/wiki/Serpent.
[11] Skuchain. http://www.skuchain.com/.
[12] Verisign revoked certificate test page. https://test-sspev.verisign.com:2443/test-SPPEV-revoked-verisign.html. Accessed: 2015-05-15.
[13] Mt. Gox thinks it’s the Fed. freezes acc based on “tainted” coins. https://bitcointalk.org/index.php?topic=73385.0, 2012 (unlocked now).
[14] Ethereum and evil. Forum post at Reddit; URL: http://tinyurl.com/k8awj2j, Accessed May 2015.
[15] M. Andrychowicz, S. Dziembowski, D. Malinowski, and L. Mazurek. Secure Multiparty Computations on Bitcoin. In S & P, 2013.
[16] J. Bates. Trojan horse: AIDS information introductory diskette version 2.0,. In E. Wilding and F. Skulason, editors, Virus Bulletin, pages 3–6. 1990.
[17] J. Bell. Assassination politics. http://www.outpost-of-freedom.com/jimbellap.htm, 1995-6.
[18] E. Ben-Sasson, A. Chiesa, C. Garman, M. Green, I. Miers, E. Tromer, and M. Virza. Zerocash: Decentralized anonymous payments from Bitcoin. In S & P. IEEE, 2014.
[19] E. Ben-Sasson, A. Chiesa, M. Green, E. Tromer, and M. Virza. Secure sampling of public parameters for succinct zero knowledge proofs. In S & P, 2015.
[20] E. Ben-Sasson, A. Chiesa, E. Tromer, and M. Virza. Succinct non-interactive zero knowledge for a von Neumann architecture. In USENIX Security, 2014.
[21] I. Bentov and R. Kumaresan. How to Use Bitcoin to Design Fair Protocols. In CRYPTO, 2014.
[22] L. Bilge and T. Dumitras. Before we knew it: an empirical study of zero-day attacks in the real world. In CCS, 2012.
[23] V. Blue. Cryptolocker’s crimewave: A trail of millions in laundered Bitcoin. ZDNet, 22 December 2013.
[24] E. F. Brickell, P. Gemmell, and D. W. Kravitz. Trustee-based trac-king extensions to anonymous cash and the making of anonymous change. In SODA, volume 95, pages 457–466, 1995.
[25] J. Camenisch and V. Shoup. Practical verifiable encryption and decryption of discrete logarithms. In CRYPTO ’03. 2003.
[26] R. Canetti. Universally composable security: A new paradigm for cryptographic protocols. In FOCS, 2001.
[27] R. Canetti, Y. Dodis, R. Pass, and S. Walﬁsh. Universally composable security with global setup. In Theory of Cryptography, pages 61–85. Springer, 2007.
[28] R. Canetti, A. Jain, and A. Scafuro. Practical UC security with a global random oracle. In CCS, 2014.
[29] R. Canetti and T. Rabin. Universal composition with joint state. In CRYPTO, 2003.
[30] D. Chaum. Blind signatures for untraceable payments. In CRYPTO, pages 199–203, 1983.
[31] D. Chaum and T. P. Pedersen. Wallet databases with observers. In CRYPTO’92, pages 89–105, 1993.
[32] N. Christin. Traveling the Silk Road: A measurement analysis of a large anonymous online marketplace. In WWW, 2013.
[33] R. Cleve. Limits on the security of coin flips when half the processors are faulty. In STOC, 1986.
[34] G. Danezis, C. Fournet, M. Kohlweiss, and B. Parno. Pinocchio Coin: building Zerocoin from a succinct pairing-based proof system. In PETShop, 2013.
[35] K. Delmolino, M. Arnett, A. Kosba, A. Miller, and E. Shi. Step by step towards creating a safe smart contract: Lessons and insights from a cryptocurrency lab. https://eprint.iacr.org/2015/460.
[36] S. Egelman, C. Herley, and P. C. van Oorschot. Markets for zero-day exploits: Ethics and implications. In NSPW. ACM, 2013.
[37] P. T. et al. Darkwallet on twitter: “DARK LEAKS coming soon. http://t.co/k4ubs16scr”. Reddit: http://bit.ly/1A9UShY.
[38] I. Eyal and E. G. Sirer. Majority is not enough: Bitcoin mining is vulnerable. In FC, 2014.
[39] E. F. Foundation. EFF SSL observatory. URL: https://www.eff.org/observatory, August 2010.
[40] A. Greenberg. 'Dark Wallet' is about to make Bitcoin money laundering easier than ever. http://www.wired.com/2014/04/dark-wallet/.
[41] A. Greenberg. Alleged silk road boss Ross Ulbricht now accused of six murders-for-hire, denied bail. Forbes, 21 November 2013.
[42] J. Groth. Simulation-sound nizk proofs for a practical language and constant size group signatures. In ASIACRYPT, pages 444–459, 2006.
[43] Intel. Intel software guard extensions programming reference. Whitepaper ref. 329298-002US, October 2014.
[44] J. Jonsson and B. Kaliski. Public-Key Cryptography Standards (PKCS) #1: RSA Cryptography Specifications Version 2.1, 2003. RFC 3447.
[45] A. Kosba, A. Miller, E. Shi, Z. Wen, and C. Papamanthou. Hawk: The blockchain model of cryptography and privacy-preserving smart contracts. 2016.
[46] A. Kosba, Z. Zhao, A. Miller, Y. Qian, H. Chan, C. Papamanthou, R. Pass, abhi shelat, and E. Shi. How to use snarks in universally composable protocols. https://eprint.iacr.org/2015/1093.pdf, 2015.
[47] V. Kotov and M. Rajpal. Understanding crypto-ransomware. Bromium whitepaper, 2014.
[48] A. Krellenstein, R. Dermody, and O. Slama. Counterparty announcement. https://bitcointalk.org/index.php?topic=395761.0, January 2014.
[49] R. Kumaresan and I. Bentov. How to Use Bitcoin to Incentivize Correct Computations. In CCS, 2014.
[50] P. Mateus and S. Vaudenay. On tamper-resistance from a theoretical viewpoint. In Cryptographic Hardware and Embedded Systems (CHES), pages 411–428. 2009.
[51] J. Matonis. Why Bitcoin fungibility is essential. CoinDesk, 1 Dec. 2013.
[52] S. Meiklejohn, M. Pomarole, G. Jordan, K. Levchenko, D. McCoy, G. M. Voelker, and S. Savage. A fistful of bitcoins: characterizing payments among men with no names. In IMC, 2013.
[53] I. Miers, C. Garman, M. Green, and A. D. Rubin. Zerocoin: Anonymous Distributed E-Cash from Bitcoin. In S & P, 2013.
[54] M. Moser, R. Bohme, and D. Breuker. An inquiry into money laundering tools in the bitcoin ecosystem. In eCRS, 2013.
[55] S. Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System. http://bitcoin.org/bitcoin.pdf, 2009.
[56] R. Pass and a. shelat. Micropayments for peer-to-peer currencies. Manuscript.
[57] K. Poulsen. Cybercrime supersite 'DarkMarket' was FBI sting, documents confirm. Wired, 13 Oct. 2008.
[58] J. Radianti, E. Rich, and J. Gonzalez. Using a mixed data collection strategy to uncover vulnerability black markets. In Pre-ICIS Workshop on Information Security and Privacy, 2007.
[59] D. Ron and A. Shamir. How did Dread Pirate Roberts acquire and protect his bitcoin wealth? In FC. 2014.
[60] B. Schneier. The vulnerabilities market and the future of security. Forbes, May 30, 2012.
[61] S. V. Solms and D. Naccache. On blind signatures and perfect crimes. Computers Security, 11(6):581–583, 1992.
[62] M. Stadler, J.-M. Piveteau, and J. Camenisch. Fair blind signatures. In Eurocrypt, pages 209–219, 1995.
[63] G. Wood. Ethereum: A secure decentralized transaction ledger. http://gavwood.com/paper.pdf, 2014.
[64] A. Young and M. Yung. Cryptovirology: Extortion-based security threats and countermeasures. In S & P, 1996.

## A. Smart Contract Example
As a warm-up example, Figure 6 gives a simple smart contract using our notation system. This contract sells domain names. A name is awarded to the first bidder to offer at least `$price` currency units. When a presale time period expires, indicated by `Tend`, the price of each domain name is increased from 1 to 10 currency units. (The contract does not handle assignment of domain names.)

**Init:**
- Set `all := {}`
- Set `Tend := 10/12/2015`
- Set `$price := 1`

**Register:**
- On receiving `($amt, name)` from some party `P`:
  - Assert `name ∉ all` and `$amt ≥ $price`
  - Update `ledger[P] := ledger[P] − $amt`
  - Update `all := all ∪ {name}`

**Timer:**
- If `T > Tend` and `$price = 1`: set `$price := 10`

**Figure 6: Warmup: A Simple Smart Contract for Domain Name Registration.**
- The formal operational semantics of a contract program is described in Kosba et al. [45].

## B. Future Directions: Other CSCs
The CSCs we have described in the body of the paper are just a few examples of the broad range of such contracts possible with existing technologies. Also deserving study in a more expansive investigation are CSCs based on emerging or as yet not practical technologies. In this appendix, we give a couple of examples.

### B.1 Password Theft (Using SGX)
It is challenging to create a smart contract `PwdTheft` for theft of a password `PW` (or other credentials such as answers to personal questions) sufficient to access a targeted account (e.g., webmail account) `A`. There is no clear way for `P` to prove that `PW` is valid for `A`. Leveraging trusted hardware, such as Intel's recently introduced Software Guard eXtension (SGX) set of x86-64 ISA extensions [43], it is possible to craft an incentive-compatible contract `PwdTheft`.

SGX creates a confidentiality- and integrity-protected application execution environment called an enclave; it protects against even a hostile OS and the owner of the computing device. SGX also supports generation of a quote, a digitally signed attestation to the hash of a particular executable app in an enclave and permits inclusion of app-generated text, such as an app-specific key pair `(skapp, pkapp)`. A quote proves to a remote verifier that data came from an instantiation of the app.

---

This optimized text is more structured, coherent, and professional, making it easier to read and understand.