### Test Case Set Metrics for the Fuel Injection Controller Software

**Engine Model:**
- Simulation Time: 150s
- Number of Tests: 15,000

**Delta Generator:**
- Step Size: 2048
- Number of Tests: 1,048,576

**Combined:**
- Total Tests: 1,048,576 + 15,000

*Note: Instruction coverage is only provided through binary testing.*

| Metric                | Engine Model | Delta Generator | Combined |
|-----------------------|--------------|-----------------|----------|
| Instruction Coverage  | 6/100%       | 6/100%          | 6/100%   |
| Mutation Coverage     | 5/83%        | 6/100%          | 6/100%   |
| Killed Mutants        | 6/100%       | 6/100%          | 6/100%   |

**Total:**
- **Instruction Coverage:** 1720/97%
- **Mutation Coverage:** 456/100%
- **Killed Mutants:** 256/83%

### Performance Evaluation

**Figure 9(a):** 
- This figure compares the performance of different testing approaches. The experiments were conducted on an Intel Xeon Quadcore HT processor running at 3.4 GHz.
- The y-axis represents the measured testing time in seconds, and the x-axis denotes the number of applied test cases per mutant.
- For the delta generator, 230 * 1,048,576 = 241,172,480 test cases need to be investigated (assuming a step size of 2048).
- All mutation testing approaches scale almost linearly with the number of test cases per mutant. Source code mutation testing has a high base effort due to separate compilation for each mutant.
- The GDB/ARMulator break-even point is below 10-100 test cases per mutant, while QEMU's break-even point is below 100,000-1,000,000 test cases per mutant.
- On average, the QEMU approach performs 100-1000x faster than GDB/ARMulator.

**Figure 9(b):** 
- This figure shows the speedup achieved by utilizing multicore hosts. With the proposed parallelization approach, the testing effort can be almost divided by the number of available cores without extra synchronization overhead. Four full cores with hyper-threading were utilized.

**Figure 9(c):** 
- This figure demonstrates the speedup achieved by online detection and mutant skipping extensions applied to QEMU.

### Related Work

Mutation testing inherently has higher execution costs, leading to various mutant reduction and execution cost reduction techniques [11]. Most existing approaches focus on white-box testing and source code instrumentation, requiring the source code or intermediate object code for mutant generation [12, 13]. For example, a large set of C language mutation operators was introduced in [14], and it was later shown that a reduced number of operators still achieves a high mutation score [15].

For hardware design, SpringSoft CERTITUDE supports functional qualification for C and VHDL/Verilog [16]. In [17], mutation operators for IP-XACT electronic component descriptions were introduced. Our work aims to leverage mutation testing in the embedded software domain, primarily C and SystemC based, and also targets mutation faults at the application binary interface (ABI) for COTS libraries [18].

In [19], the authors modified a GNU C compiler chain to generate patches for compiler-integrated mutant generation. In [20], a SystemC error and mutation injection tool based on compiler injection via a plugin for the gcc compiler was proposed, introducing four mutant operators. Another approach for SystemC and TLM mutation testing [21] allows selective activation of one mutant at a time using a `fault_number` variable driven by the testbench during simulation.

Our proposed binary translation-based approach allows mutation testing for different ISAs and offers greater mutation flexibility through event-triggered callbacks during translation. It is also language and compiler-independent, making it suitable for COTS libraries without source code. In [22], a software fault injection technique for the IA32 platform was proposed, but it does not consider efficient fault injection/detection for mutation testing and lacks cross-platform support for typical embedded systems instruction set architectures like ARM.

### Conclusion

We introduced a novel approach for mutation testing of binary software, seamlessly integrated into the binary translation cycle of software emulation runtime. Mutants are derived from the original software binary under test by control flow analysis before execution. Although we introduced our approach with mutation operators for the ARM instruction set, the principles are applicable to other embedded processors.

Key advantages include:
- No requirement for source code availability or target compiler modifications.
- Capture of faults specific to the target instruction set architecture and toolchain, such as compiler bugs and anomalies in code optimization.
- Experiments with a case study from the automotive industry, a fault-tolerant fuel injection control system, showed 100% accuracy compared to source code mutation testing and a 100-1000x speedup over GDB/ARMulator ISS. Our approach outperforms native execution by avoiding individual mutant compilation and using an efficient framework extending the QEMU binary translator. Multicore host utilization further improves testing speed.

### Future Work

Future work will focus on a more complete evaluation of the proposed mutator classes for ARM and their efficient application to testing low-level faults such as ABI mismatches. We will also consider automatic test pattern generation (ATPG) from binary CDFG analysis and porting the framework to QEMU system mode to cover system software such as operating systems, device drivers, and boot firmware.

### Acknowledgments

This work was partly funded by the DFG SFB 614 and the German Ministry of Education and Research (BMBF) through the projects SANITAS (01M3088I), VERDE (01S09012H), and TIMMO-2-USE (01IS10034A).

### References

[1] R. A. DeMillo, R. J. Lipton, and F. G. Sayward, “Hints on test data selection: Help for the practicing programmer,” Computer, vol. 11, pp. 34–41, April 1978.

[2] R. H. Untch, A. J. Offutt, and M. J. Harrold, “Mutation analysis using mutant schemata,” in Proceedings of the 1993 ACM SIGSOFT international symposium on Software testing and analysis, ser. ISSTA ’93. New York, NY, USA: ACM, 1993, pp. 139–148.

[3] W. E. Howden, “Weak mutation testing and completeness of test sets,” IEEE Trans. Softw. Eng., vol. 8, pp. 371–379, July 1982.

[4] ARM Architecture Ref. Manuals, http://infocenter.arm.com.

[5] A. Sloss, D. Symes, and C. Wright, ARM System Developer’s Guide: Designing and Optimizing System Software. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 2004.

[6] F. Bellard, “QEMU, a Fast and Portable Dynamic Translator,” in ATEC ’05: Proceedings of the Annual Conference on USENIX Annual Technical Conference. Berkeley, CA, USA: USENIX Association, 2005, pp. 41–41.

[7] QEMU - Open Source Processor Emulator, http://www.qemu.org.

[8] M. Gligor, N. Fournel, and F. Pétrot, “Using Binary Translation in Event Driven Simulation for Fast and Flexible MPSoC Simulation,” in CODES+ISSS ’09: Proceedings of the 7th IEEE/ACM International Conference on Hardware/Software Codesign and System Synthesis. New York, NY, USA: ACM, 2009, pp. 71–80.

[9] C. Guillon, “Program Instrumentation with QEMU,” in DATE ’11: Proceedings of the Conference on Design, Automation and Test in Europe, Grenoble, France, 2011.

[10] TargetLink, dSPACE GmbH, http://www.dspace.com.

[11] Y. Jia and M. Harman, “An analysis and survey of the development of mutation testing,” IEEE Transactions on Software Engineering, 2010.

[12] Y. seung Ma, J. Offutt, and Y. R. Kwon, “Mujava: an automated class mutation system,” Software Testing, Verification & Reliability, vol. 15, pp. 97–133, 2005.

[13] B. Bogacki and B. Walter, “Aspect-oriented response injection: an alternative to classical mutation testing,” in Software Engineering Techniques: Design for Quality, ser. IFIP International Federation for Information Processing, K. Sacha, Ed. Springer Boston, 2007, vol. 227, pp. 273–282.

[14] H. A. Richard, R. A. Demillo, and B. H. et al., “Design of Mutant Operators for the C Programming Language,” Tech. Rep., 1989.

[15] A. S. Namin, J. H. Andrews, and D. J. Murdoch, “Sufficient mutation operators for measuring test effectiveness,” in IN PROC. ICSE, 2008, pp. 351–360.

[16] SpringSoft Inc., “CERTITUDE Functional Qualification System,” 2011.

[17] T. Xie, W. Mueller, and F. Letombe, “IP-XACT based system level mutation testing,” in High Level Design Validation and Test Workshop (HLDVT), 2011 IEEE International, nov. 2011.

[18] C. Kuznik and W. Mueller, “Native binary mutation analysis for embedded software and virtual prototypes in SystemC,” The 17th IEEE Pacific Rim International Symposium on Dependable Computing (PRDC 2011), 2011.

[19] R. DeMillo, E. Krauser, and A. Mathur, “Compiler-integrated program mutation,” in Computer Software and Applications Conference, 1991. COMPSAC ’91., Proceedings of the Fifteenth Annual International, sep 1991, pp. 351 –356.

[20] P. Lisherness and K.-T. T. Cheng, “SCEMIT: a systemc error and mutation injection tool,” in Proceedings of the 47th Design Automation Conference, ser. DAC ’10. New York, NY, USA: ACM, 2010, pp. 228–233.

[21] V. Guarnieri, N. Bombieri, G. Pravadelli, F. Fummi, H. Hantson, J. Raik, M. Jenihhin, and R. Ubar, “Mutation analysis for systemc designs at tlm,” in Test Workshop (LATW), 2011 12th Latin American, march 2011, pp. 1 –6.

[22] J. ao A. Durães and H. S. Madeira, “Emulation of software faults: A field data study and a practical approach,” IEEE Transactions on Software Engineering, vol. 32, pp. 849–867, 2006.