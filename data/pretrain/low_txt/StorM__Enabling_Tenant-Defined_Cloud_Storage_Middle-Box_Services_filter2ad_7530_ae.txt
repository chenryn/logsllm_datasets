### PostMark Performance Analysis

PostMark is a benchmark tool that simulates an email server by generating numerous small file operations. With the same configuration as previously mentioned, Figure 11 illustrates the performance (measured in operations per second) of the decomposed components of PostMark. Compared to the client-side solution, the middle-box solution improved the performance of each component, with enhancements ranging from 23% to 34%. Further investigation revealed that this improvement was due to the outsourcing of encryption to a middle-box, which reduces the blocking time for application threads. Dm-crypt, on the other hand, may hold application threads on spinlocks, wasting CPU cycles while encrypting or flushing writes to disk. The middle-box significantly accelerates this process: once data is acknowledged by the active-relay, the application threads can continue their execution.

### Case 3: Data Reliability

We have implemented a tenant-defined replica dispatch service in a storage middle-box. This service provides data redundancy, enhancing both performance and fault tolerance. For instance, if the primary storage backup system fails, the replicated data ensures continuous operation. Our data replica dispatch service is highly customizable, allowing tenants to selectively replicate important files rather than the entire array, with customizable replication levels (e.g., two or three replicas). This flexibility enables tenants to achieve enhanced read throughput by leveraging multiple replicas.

For write I/O operations, our replication service not only forwards the data to the original volume but also copies the exact same I/O data in advance to other backup volumes attached to the middle-box. To maintain state consistency across all replicas, we ensure that the sequence of write I/O operations is strictly ordered. For read I/O operations, the replication service alternates between available replicas, aggregating read throughput. If a replica becomes unresponsive, it is excluded from future operations, and any unfinished reads are served by one of the remaining active replicas.

To evaluate the tenant-defined replication service, we set up a realistic environment, as shown in Figure 12, with one VM hosting a database server and four tenant VMs sharing the server (all belonging to the same tenant). We ran MySQL on the server VM, associated with a 20 GB volume attached as the database disk. Each tenant VM ran Sysbench, an OLTP benchmark, accessing the MySQL database with six requesting threads in complex mode (both read and write). We set the replication factor to three, with the replication middle-box attached to two replicas (each 20 GB).

During runtime, we injected an error at the 60th second to make one of the replicas unavailable (by closing the iSCSI connection). Figure 13 shows the running status of MySQL before and after the replica failure. We observed that the replication service removed the failed replica and ensured the database server continued to function properly using the two remaining replicas. Although the average performance of MySQL slightly decreased due to lower read parallelism, it still showed an 80% performance improvement compared to the non-replication case using only one store, thanks to the aggregated read throughput.

### Related Work

The concept of offering security and system services via middle-boxes has been around for almost a decade. However, the advent of software-defined networking (SDN) and the ability to dynamically deploy middle-boxes, rather than in a static chain, has renewed interest in this area. Recent works [14], [15] have identified challenges in deploying middle-boxes in SDN-enabled networks and highlighted why straightforward deployment can be problematic. Our work on designing and implementing StorM aligns with these efforts, investigating the possibility of offering tenant-defined services in the cloud storage network via middle-boxes and discovering that existing cloud systems lack the necessary mechanisms to support them.

Previous research has proposed various security mechanisms as cloud services to protect VMs, applications, and security groups. SSC [16] allowed the deployment of tenant-specific storage security services, but required these protections to be installed inside tenant VMs running on a modified cloud platform. In contrast, StorM is the first storage security platform that allows the deployment of tenant-specific storage services via virtualized middle-boxes in the cloud.

Cryptographic solutions [17] have been proposed to protect data in the cloud. A common approach involves service providers encrypting customers' data, a method adopted by major cloud service providers like Microsoft, Google, and Yahoo. EMC provides its Encryption-as-a-Service (EaaS) cloud service [19], enabling client-side encryption. StorM complements these solutions by providing a flexible platform where various encryption techniques (and other storage services) can be built. This allows tenants to choose the cryptographic algorithms they want to implement inside a middle-box, based on their specific security and storage needs.

In addition to cryptographic solutions, previous research has explored disk monitoring and logging solutions, such as the host-based IDS solutions Tripwire [20] and FWRAP [21]. These solutions require a trusted OS, but advanced kernel rootkits can compromise this trust. To address this, Virtual Machine Introspection (VMI) based techniques, such as XenAccess [22] and other systems [23], [24], were proposed. These introduce monitoring libraries running in the privileged domain (dom0 or the VMM itself) to track guest-level activities like virtual disk accesses. Unlike these services, StorM’s monitoring service requires no support from the tenant VM and instead executes monitoring code in a separate, isolated VM (the middle-box).

To ensure storage reliability at the block level, existing vendor-specific solutions, such as EMC’s SRDF and NetApp’s SnapMirror, depend on hardware adapters to replicate entire storage arrays. Network-based replication, like EMC’s RecoverPoint, uses an appliance at the edge of the network to manage multiple arrays and servers. CYRUS [25] and CDStore [26] provide user-controlled file-level data reliability by dispersing users’ backup data across multiple clouds. However, these solutions require client-side software. In contrast, StorM requires no software inside the tenant VM and allows tenants to flexibly choose data replication services on demand in a transparent and seamless manner.

### Conclusions

In this paper, we presented StorM, a storage security and reliability service platform for multi-tenant cloud systems. StorM allows each tenant to deploy tenant-defined storage services in the form of virtualized middle-boxes that transparently reside between the tenant VMs and storage servers. To enable this platform, we addressed three main challenges: network splicing, platform efficiency, and semantic gap. We implemented a prototype of StorM on the popular OpenStack cloud system and built three middle-box services: storage access monitor, data encryption, and data replication. Our evaluation results demonstrate that StorM provides tenants with customized, value-added storage services with minimal performance overhead.

### Acknowledgments

We thank the anonymous reviewers for their insightful comments and suggestions. This work was supported in part by NSF under Award 1219004.

### References

[1] R. Sharma and R. K. Trivedi, “A case of multilevel security application for ensuring data integrity (prevention and detection) in cloud environment,” International Journal of Computer Applications, 2014.
[2] K. Ren, C. Wang, and Q. Wang, “Security challenges for the public cloud,” IEEE Internet Computing, 2012.
[3] “Virtualization Protection Data Report,” http://www.dabcc.com/documentlibrary/file/virtualization-data-protection-report-smb-2013.pdf.
[4] P. Gill, N. Jain, and N. Nagappan, “Understanding network failures in data centers: measurement, analysis, and implications,” in ACM SIGCOMM Computer Communication Review, 2011.
[5] D. A. Joseph, A. Tavakoli, and I. Stoica, “A policy-aware switching layer for data centers,” in Proceedings of the ACM SIGCOMM 2008 Conference on Data Communication, 2008.
[6] V. Sekar, S. Ratnasamy, M. K. Reiter, N. Egi, and G. Shi, “The middlebox manifesto: enabling innovation in middlebox deployment,” in Proceedings of the 10th ACM Workshop on Hot Topics in Networks, 2011.
[7] Z. Wang, Z. Qian, Q. Xu, Z. Mao, and M. Zhang, “An untold story of middleboxes in cellular networks,” in ACM SIGCOMM Computer Communication Review, 2011.
[8] B. Pfaff, J. Pettit, T. Koponen, E. Jackson, A. Zhou, J. Rajahalme, J. Gross, A. Wang, J. Stringer, P. Shelar, K. Amidon, and M. Casado, “The design and implementation of open vswitch,” in 12th USENIX Symposium on Networked Systems Design and Implementation (NSDI 15), 2015.
[9] N. Santos, K. P. Gummadi, and R. Rodrigues, “Towards trusted cloud computing,” in Proceedings of the 2009 Conference on Hot Topics in Cloud Computing, 2009.
[10] “Open-iscsi,” http://www.open-iscsi.org/.
[11] “Fio,” http://linux.die.net/man/1/fio.
[12] T. Harter, D. Borthakur, S. Dong, A. Aiyer, L. Tang, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau, “Analysis of hdfs under hbase: a facebook messages case study,” in Proceedings of the 12th USENIX conference on File and Storage Technologies, 2014.
[13] “Kaspersky: HEUR:Backdoor.Linux.Ganiw.a,” MD5:ef5d928cab15a54d33209510818f5c72, http://malwaredb.malekal.com/.
[14] Z. Qazi, C. C. tu, L. Chiang, R. Miao, V. Sekar, and M. Yu, “Simple-fying middlebox policy enforcement using sdn,” in SIGCOMM, 2013.
[15] S. Fayazbakhsh, V. Sekar, M. Yu, and J. Mogul, “Flowtags: Enforcing network-wide policies in the presence of dynamic middlebox actions,” in HotSDN, 2013.
[16] S. Butt, H. A. Lagar-Cavilla, A. Srivastava, and V. Ganapathy, “Self-service cloud computing,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security, 2012.
[17] S. Kamara and K. Lauter, “Cryptographic cloud storage,” in Financial Cryptography and Data Security, 2010.
[18] S. Kamara, P. Mohassel, and B. Riva, “Salus: a system for server-aided secure function evaluation,” in Proceedings of the 2012 ACM conference on Computer and communications security, 2012.
[19] “Encryption as a service,” http://www.cloudlinktech.com/wp-content/plugins/download-monitor/download.php?id=133.
[20] G. H. Kim and E. H. Spafford, “The design and implementation of tripwire: A file system integrity checker,” in Proceedings of the 2nd ACM Conference on Computer and Communications Security, 1994.
[21] B. Y. M. Cheng, J. G. Carbonell, and J. Klein-Seetharaman, “A machine text-inspired machine learning approach for identification of transmembrane helix boundaries,” in Foundations of Intelligent Systems, 2005.
[22] B. D. Payne, M. De Carbone, and W. Lee, “Secure and flexible monitoring of virtual machines,” in Computer Security Applications Conference, 2007. ACSAC 2007. Twenty-Third Annual, 2007.
[23] Y. Zhang, Y. Gu, H. Wang, and D. Wang, “Virtual-machine-based intrusion detection on file-aware block level storage,” in Computer Architecture and High Performance Computing, 2006. SBAC-PAD’06. 18TH International Symposium on, 2006.
[24] F. Tsifountidis, “Virtualization security: Virtual machine monitoring and introspection,” Signature, 2010.
[25] J. Y. Chung, C. Joe-Wong, S. Ha, J. W.-K. Hong, and M. Chiang, “Cyrus: Towards client-defined cloud storage,” in Proceedings of the Tenth European Conference on Computer Systems, 2015.
[26] M. Li, C. Qin, and P. P. Lee, “CDStore: Toward reliable, secure, and cost-efficient cloud storage via convergent dispersal,” arXiv preprint arXiv:1502.05110, 2015.