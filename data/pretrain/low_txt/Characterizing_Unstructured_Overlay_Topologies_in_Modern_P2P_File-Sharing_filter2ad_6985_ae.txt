# Connectivity Analysis of the Stable Core in Gnutella Overlay

## Overview
This section analyzes different aspects of connectivity within the stable core (SP(τ)) of the Gnutella overlay. We focus on the internal and external connectivity, as well as the underlying causes of the observed patterns.

## Data Slices and Uptime Calculation
To conduct this analysis, we use several slices of our dataset, each consisting of a 48-hour period with continuous back-to-back topology snapshots. The last snapshot in each 48-hour period is considered the reference snapshot. By examining the arrival times of peers through the snapshots, we can determine the uptime of each peer with an accuracy of a few minutes. Peers present for the entire 48-hour period have an uptime of at least 48 hours. This information allows us to annotate all peers in the reference snapshot with their uptime.

### Figure 9(a)
Figure 9(a) shows the Complementary Cumulative Distribution Function (CCDF) of uptime among existing peers in the reference snapshot for several slices. This figure indicates that the size of SP(τ) decreases exponentially with τ, which is more visible over longer time scales. This implies that the total number of possible connections within SP(τ) also decreases dramatically with τ.

## Internal Connectivity Within the Stable Core
To study the internal connectivity within SP(τ), we focus only on the connections where both endpoints are within SP(τ). We call this the stable core overlay or SC(τ).

### Figure 10(a)
Figure 10(a) depicts the fraction of ultrapeers within SC(τ) that are part of the largest connected component as a function of τ. Despite a slight decrease in the fraction of connected peers with increasing τ, a significant majority (86%–94%) of peers within SC(τ) remain fully connected. The minor drop in the percentage of connected peers is due to the exponential decrease in the number of peers within SC(τ), which reduces the number of edges and affects pairwise connectivity.

### Figure 10(b)
Figure 10(b) shows the diameter and characteristic (mean) path length among fully connected peers in the stable core overlay. Both the mean path length and the diameter remain relatively stable as τ increases, despite the dramatic drop in the number of edges. For example, even when the population is very small (only 10% of top-level peers for τ=45h), the mean path length is around 5 hops, close to the mean path length for the entire top-level overlay (4.17–4.23 from Table 3).

### Figure 10(c)
Figure 10(c) depicts the evolution of the clustering coefficient for the stable core overlay as τ increases, along with the clustering coefficient for the entire top-level overlay in the reference snapshot. This figure shows two important points: 
1. Peers within the stable core overlay are more clustered together than the entire top-level overlay on average.
2. Connectivity among peers within the stable core overlay becomes increasingly more clustered with τ. This implies that the longer a peer remains in the overlay, the more likely it is to establish connections with peers of equal or higher uptime, leading to a biased "onion-like" layering where peers with similar uptime tend to connect to peers with the same or higher uptime.

## External Connectivity to/from the Stable Core
To quantify the connectivity between SC(τ) and the rest of the overlay, we examine whether peers within SC(τ) have a higher tendency to connect to each other rather than peers outside the core. We calculate the ratio of internal edges to the total number of edges and compare it with the same ratio for a randomly generated graph with the same number of nodes, degree distribution, and number of edges.

### Figure 9(c)
Figure 9(c) depicts (Rg − Rr)/Rr as a function of τ, where Rg and Rr denote the value of R for several snapshots and their corresponding randomly generated graphs, respectively. This figure demonstrates that the longer a peer remains in the network, its connectivity becomes more biased towards peers with the same or higher uptime, further supporting the onion-like layered connectivity.

## Implications of the Stable and Layered Core Overlay
The connectivity of the core overlay implies that all peers within the core do not depend on peers outside the core for reachability. The core overlay provides a stable and efficient backbone for the entire top-level overlay, ensuring connectivity among all participating peers despite the high rate of dynamics among peers outside the core.

## Underlying Causes
To understand how the onion-like layered connectivity forms, we quantify the contribution of user-driven and protocol-driven dynamics in changes of the edges of the overlay. We distinguish protocol-driven versus user-driven changes in edges between two snapshots. If at least one endpoint has arrived or departed between two snapshots, the change is user-driven; otherwise, it is protocol-driven.

### Figure 11(a) and 11(b)
Figures 11(a) and 11(b) depict the normalized ratio of missing and new edges in a snapshot due to protocol-driven and user-driven causes. These figures show that around 20% and 30% of edges in the overlay are removed due to protocol-driven and user-driven factors during the first 100 minutes, respectively. After this period, almost all removed edges are due to departing peers. Similarly, many edges are added during the first 100 minutes due to both protocol-driven factors and the arrival of new peers. After this period, almost all new edges involve a newly arriving peer.

These results indicate that:
1. Each peer may establish and tear down many connections to other peers during the initial 100 minutes of its uptime.
2. Peers with higher uptime maintain their connections to their remaining long-lived neighbors and only add or drop connections to arriving or departing peers, explaining the formation of the biased onion-like layering in connectivity within the overlay.
3. User-driven dynamics are the dominant factor in long-term changes of the overlay.

## Related Work
Previous studies on characterizing P2P overlay topologies include [23, 2, 20, 12], but these are more than three years old and did not verify the accuracy of their captured snapshots. A recent study [18] used passive measurement and active probing to study the Kaaza overlay, focusing on the number of observed connections and their evolution with time. However, they did not examine detailed graph-related properties or collective dynamics of the entire overlay topology, which are investigated in this paper.

Other studies cover file characteristics [6, 17, 3, 19], transfer characteristics [10, 17], peer characteristics [25, 24], query characteristics [26, 3, 16, 4], and comparisons of different implementations [15, 11]. These studies complement our work by exploring different aspects of P2P networks.

## Conclusions
This study provides the first detailed characterization of an unstructured two-tier overlay topology typical of modern P2P systems, based on accurate and complete snapshots. We described fundamental challenges in capturing accurate snapshots and demonstrated that inaccurate snapshots can lead to erroneous conclusions. Our main findings include the existence of a stable, well-connected core of long-lived peers, which suggests benefits in terms of increasing search resilience and reducing load on the stable core.

We plan to continue monitoring the Gnutella network to further examine the dynamics of peer participation, explore longer-term trends in the topology, and observe variations in key properties such as the small-world coefficient, degree distribution, and mean pairwise distance over time. We are also applying our techniques to develop characterizations of the eDonkey/Overnet and BitTorrent P2P networks.

## References
[1] slyck.com. http://www.slyck.com, 2005.
[2] L. A. Adamic, R. M. Lukose, B. Huberman, and A. R. Puniyani. Search in Power-Law Networks. Physical Review E, 64(46135), 2001.
[3] E. Adar and B. A. Huberman. Free riding on gnutella. First Monday, 5(10), Oct. 2000.
[4] F. S. Annexstein, K. A. Berman, and M. A. Jovanovic. Latency effects on reachability in large-scale peer-to-peer networks. In Symposium on Parallel Algorithms and Architectures, pages 84–92, 2001.
[5] Y. Chawathe, S. Ratnasamy, and L. Breslau. Making Gnutella-like P2P Systems Scalable. In SIGCOMM, 2003.
[6] J. Chu, K. Labonte, and B. N. Levine. Availability and Locality Measurements of Peer-to-Peer File Systems. In ITCom: Scalability and Traffic Control in IP Networks II Conferences, July 2002.
[7] clip2.com. Gnutella: To the Bandwidth Barrier and Beyond, Nov. 2000.
[8] M. Faloutsos, P. Faloutsos, and C. Faloutsos. On Power-Law Relationships of the Internet Topology. In SIGCOMM, 1999.
[9] A. Fisk. Gnutella Dynamic Query Protocol v0.1. Gnutella Developer’s Forum, May 2003.
[10] K. P. Gummadi, R. J. Dunn, S. Saroiu, S. D. Gribble, H. M. Levy, and J. Zahorjan. Measurement, Modeling, and Analysis of a Peer-to-Peer File-Sharing Workload. In SOSP, 2003.
[11] Q. He and M. Ammar. Congestion Control and Message Loss in Gnutella Networks. In Multimedia Computing and Networking, Jan. 2004.
[12] M. Jovanovic, F. Annexstein, and K. Berman. Modeling Peer-to-Peer Network Topologies through “Small-World” Models and Power Laws. In TELFOR, Nov. 2001.
[13] T. Karagiannis, A. Broido, N. Brownlee, K. Claffy, and M. Faloutsos. Is P2P dying or just hiding? In Globecom, Nov. 2004.
[14] T. Karagiannis, A. Broido, M. Faloutsos, and kc claffy. Transport Layer Identification of P2P Traffic. In International Measurement Conference, Oct. 2004.
[15] P. Karbhari, M. Ammar, A. Dhamdhere, H. Raj, G. Riley, and E. Zegura. Bootstrapping in Gnutella: A Measurement Study. In PAM, Apr. 2004.
[16] A. Klemm, C. Lindemann, M. Vernon, and O. P. Waldhorst. Characterizing the Query Behavior in Peer-to-Peer File Sharing Systems. In Internet Measurement Conference, Oct. 2004.
[17] N. Leibowitz, M. Ripeanu, and A. Wierzbicki. Deconstructing the Kazaa Network. In WIAPP, 2003.
[18] J. Liang, R. Kumar, and K. W. Ross. The KaZaA Overlay: A Measurement Study. Computer Networks Journal (Elsevier), 2005.
[19] J. Liang, R. Kumar, Y. Xi, and K. W. Ross. Pollution in P2P File Sharing Systems. In INFOCOM, Mar. 2005.
[20] Q. Lv, P. Cao, E. Cohen, K. Li, and S. Shenker. Search and Replication in Unstructured Peer-to-Peer Networks. In International Conference on Supercomputing, 2002.
[21] Q. Lv, S. Ratnasamy, and S. Shenker. Can heterogeneity make Gnutella scalable? In IPTPS, 2002.
[22] S. Ratnasamy, P. Francis, M. Handley, R. Karp, and S. Shenker. A Scalable Content-Addressable Network. In SIGCOMM, 2001.
[23] M. Ripeanu, I. Foster, and A. Iamnitchi. Mapping the Gnutella Network: Properties of Large-Scale Peer-to-Peer Systems and Implications for System Design. IEEE Internet Computing Journal, 6(1), 2002.
[24] S. Saroiu, P. K. Gummadi, and S. D. Gribble. Measuring and Analyzing the Characteristics of Napster and Gnutella Hosts. Multimedia Systems Journal, 8(5), Nov. 2002.
[25] S. Sen and J. Wang. Analyzing Peer-To-Peer Traffic Across Large Networks. IEEE/ACM Transactions on Networking, 12(2):219–232, Apr. 2004.
[26] K. Sripanidkulchai. The popularity of Gnutella queries and its implications on scalability. http://www-2.cs.cmu.edu/kunwadee/research/p2p/paper.html, Jan. 2001.
[27] K. Sripanidkulchai, B. Maggs, and H. Zhang. Efficient Content Location Using Interest-Based Locality in Peer-to-Peer Systems. In INFOCOM, 2003.
[28] K. Sripanidkulchai, B. Maggs, and H. Zhang. An Analysis of Live Streaming Workloads on the Internet. In Internet Measurement Conference, Oct. 2004.
[29] I. Stoica, R. Morris, D. Liben-Nowell, D. R. Karger, M. F. Kaashoek, F. Dabek, and H. Balakrishnan. Chord: A Scalable Peer-to-peer Lookup Protocol for Internet Applications. IEEE/ACM Transactions on Networking, 2002.
[30] D. Stutzbach and R. Rejaie. Capturing Accurate Snapshots of the Gnutella Network. In Global Internet Symposium, pages 127–132, Mar. 2005.
[31] D. Stutzbach and R. Rejaie. Characterizing Churn in Peer-to-Peer Networks. Technical Report 2005-03, University of Oregon, May 2005.
[32] D. Stutzbach and R. Rejaie. Characterizing the Two-Tier Gnutella Topology. In SIGMETRICS, Extended Abstract, June 2005.
[33] D. Stutzbach and R. Rejaie. Evaluating the Accuracy of Captured Snapshots by Peer-to-Peer Crawlers. In Passive and Active Measurement Workshop, Extended Abstract, pages 353–357, Mar. 2005.
[34] H. Tangmunarunkit, R. Govindan, S. Jamin, S. Shenker, and W. Willinger. Network Topology Generators: Degree-Based vs. Structural. In SIGCOMM, 2002.
[35] D. J. Watts. Six Degrees. ACM Press, 2003. In The Essence of a Connected Edge.
[36] R. H. Wouhaybi and A. T. Campbell. Phenix: Supporting Resilient Low-Diameter Peer-to-Peer Topologies. In INFOCOM, 2004.
[37] B. Yang and H. Garcia-Molina. Designing a Super-Peer Network. In International Conference on Data Engineering, Mar. 2003.
[38] B. Yang, P. Vinograd, and H. Garcia-Molina. Evaluating GUESS and Non-Forwarding Peer-to-Peer Search. In IEEE International Conference on Distributed Systems, 2004.

## Notes
1. An earlier version of our work on graph-related properties of Gnutella appeared as an extended abstract in SIGMETRICS 2005 [32].
2. Throughout this paper, by "uptime" we mean the time that has elapsed since the peer has arrived.
3. http://netflow.internet2.edu/weekly/
4. The degree distribution for all the presented results is limited to 500, which includes all but a handful of peers with larger degrees that are discussed later.
5. To reduce the crawling speed, we simply limited the degree of concurrency (i.e., number of parallel connections) to 60 in Cruiser.
6. To properly compare these snapshots with different sizes, the y-axis in Figure 4(a) was normalized by the number of peers in the snapshot.
7. To our surprise, it appears that these peers monitor exchanged messages among other participating peers. They could be trying to locate copyright infringement among Gnutella users or collecting ratings information to measure which songs consumers might like to buy.
8. Note that Gnutella does not run as a daemon. Therefore, peer arrival/departure is a reliable indication of user action. We are mindful that dynamic IP addresses could force some peers to leave and rejoin the network with a new address. However, this does not affect our analysis since we examine the effect of each departure/arrival event on the overlay dynamics.