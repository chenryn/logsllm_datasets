# Real-time Bluetooth Device Detection with Blue Hydra

## Presenters
- **Granolocks**
  - Focused on device detection
  - Enjoys long walks in the woods and traveling to exotic locations
  - Draws unique pictures
  - Existential AF, hacking the planet
  - Gives great back rubs

- **Zero_Chaos**
  - Eagle Scout
  - Maintainer of OpenZaurus, Embedded, and OpenWrt
  - Aircrack-ng Developer (Injection/Drivers, airmon-zc)
  - Pentoo Linux and Gentoo Linux Developer
  - Random Hacker of ARMs
  - Husband and Father
  - Member of RAWR (Random Association of Wireless Researchers)
  - Participates in Defcon/Shmoocon/etc. Wireless CTF
  - Easily entertained
  - Not a lawyer

## What is Bluetooth?
- **Cost-effective** cable replacement
- Uses **Frequency Hopping Spread Spectrum (FHSS)**
- No monitor mode available
- **Classes:**
  - **Class 1:** 100mW (high power devices, e.g., Sena dongle)
  - **Class 2:** 10mW (phones, most laptops)
  - **Class 3:** 1mW

## Bluetooth Modes
### Bluetooth Classic
- **Discoverable Mode:** Devices can be found by others
- **Non-discoverable Mode:** Devices are not visible to others
- **Pairing:** Establishes a secure connection between two devices

### Bluetooth Low Energy (BLE)
- **General Discoverability:** Devices are always discoverable
- **Limited Discoverability:** Devices are discoverable for a limited time
- **Non-discoverable:** Devices are not discoverable but may still advertise their presence

## Bluetooth Proliferation
- **IoT and Wearables (2015 Sales):**
  - Fitbit: 21 million
  - Xiaomi: 12 million
  - Apple: 11.6 million
  - Garmin: 3.3 million
  - Samsung: 3.1 million
  - Others: 27 million
  - **Total:** 78.1 million
  - *Source: IDC Worldwide Quarterly Wearable Device Tracker, February 23, 2016*

## Prior Art - Cracking
- **Redfang, Btcrack, Crackle (Le pin cracker), Bluesnarfer (Phonebook dumping from old phones)**

## Prior Art - Discovery
- **Bluelog:** 
  - Only discovers classic mode devices
  - No BLE support
  - Primarily a logger
- **Btscanner:**
  - Only discovers classic mode devices
  - No BLE support
  - Unmaintained
  - Features a neat GUI

## Useful Tools
- **Bluez:** Provides useful documentation and examples
- **hciconfig, hcitool:**
  - Only discovers discoverable classic devices
  - `lescans` works but is hard to parse
  - Outdated
- **Test-scripts bluez-test discovery:**
  - Easy to modify
  - Shows both classic and BLE devices
  - Hides some BLE devices
  - Teaches how to interact with the Bluetooth card
  - Only sees "discoverable" devices

## Ubertooth
- **Ubertooth-scan, Ubertooth-rx:**
  - `Ubertooth-rx -z` for specific functionalities

## Blue Hydra - Goals
- Similar to `airodump-ng` and `btscanner`
- Supports BLE
- Finds as many devices as possible
- Utilizes a database backend
- Minimal direct hardware interfacing (for now)
- Not focused on cracking or brute-forcing

## Blue Hydra Design Logic
- **Languages Used:** Ruby, Bash, Python
- Builds on existing tools for rapid development and minimal hardware interaction
- Runs threads for each discrete task
- Unifies into a processing thread

## btmon
- **Bluez btmon:**
  - Monitors raw HCI info passing between system and adapter
  - Reasonably parseable
  - Receives info from multiple tool commands in one place
  - Monitors one or many Bluetooth dongles

## btmon Threads
- **Execute and filter**
- **Batch messages by devices**
- **Parse message batches**

## Bluetooth Discovery Thread
- Interaction point with the Bluetooth device
- Fed commands from a queue
- Runs classic discovery (`bin/test-discovery`)
- Listens for LE advertisements (`bin/test-discovery`)
- Gathers info from classic and LE devices (using `hctiool`)
- Tests if devices are present (using `l2ping`)

## Ubertooth Thread
- Runs and parses `ubertooth-rx -z -t`
- Sniffs for Bluetooth Basic Rate connections
- Optional, not a replacement for required BT device

## Data Processing Thread
- Updates records
- Correlates devices by MAC, UAP/LAP (Ubertooth), and LE Proximity ID/Major & Minor Number (iBeacon)
- Implements a feedback loop

## CUI Thread
- Command-line User Interface
- Default behavior
- Live view of devices
- Sortable by column
- Extensible columns for smaller devices

## Demo
- **Live Demonstration:**
  - Backup demos available

## Where to Get It?
- **GitHub Repository:** [https://github.com/pwnieexpress/blue_hydra](https://github.com/pwnieexpress/blue_hydra)
- Download, install dependencies, and run from the git checkout
- Alternatively, use Pentoo 2015.0 RC5 Live ISO

## Conclusions
- Bluetooth has not been extensively explored in recent years
- Simple concept, but more challenging than expected
- Surprising number of devices out there

## Thanks
- DEF CON for the presentation opportunity
- Pwnie Express for funding the development and open-sourcing Blue Hydra
- Coconut Picard for helping release the code under BSD
- Ubertooth team for their contributions
- Bluez team for their initial challenges

## Q & A
- Q&A will be held in the room
- GitHub: [https://github.com/pwnieexpress/blue_hydra](https://github.com/pwnieexpress/blue_hydra)
- Twitter: @Zero_ChaosX, @granolocks