# IntentFuzzer: Detecting Capability Leaks of Android Applications

## Authors
- Kun Yang¹,³
- Jianwei Zhuge²,³
- Yongke Wang⁴
- Lujue Zhou²
- Hai-Xin Duan²,³

¹Department of Computer Science and Technology, Tsinghua University  
²Institute for Network Science and Cyberspace, Tsinghua University  
³Tsinghua National Laboratory for Information Science and Technology  
⁴Institute of Information Engineering, Chinese Academy of Sciences

## Abstract
Capability leaks in Android applications pose a significant security risk by violating the permission model, thereby threatening the secure usage of Android devices. Malicious applications can exploit these vulnerabilities to escalate their permissions. This paper introduces a dynamic Intent fuzzing mechanism, called IntentFuzzer, designed to identify vulnerable applications in both public Android markets and closed-source ROMs. We analyzed over 2,000 Android applications from Google Play and hundreds of in-rom applications from two closed-source ROMs. Our findings indicate that 161 applications in Google Play have at least one permission leak, and 26 permissions in Xiaomi Hongmi and 19 permissions in Lenovo K860i are leaked. We also provide several exploitation cases to validate our analysis.

## Categories and Subject Descriptors
- D.2.4 [Software Engineering]: Software/Program Verification
- D.2.5 [Software Engineering]: Testing and Debugging

## General Terms
- Security, Design, Experimentation

## Keywords
- Smartphone Security, Intent Fuzzing, Capability Leak

## 1. Introduction
The market share of Android smartphones has grown significantly in recent years. Unlike traditional PCs, smartphones are more closely integrated into users' daily lives, with sensors like cameras and voice recorders. These devices store and handle sensitive data such as SMS messages, call logs, contact information, and photos, making it crucial to protect this data. The Android permission model is designed to safeguard these resources, but capability leaks in applications can allow malicious apps to bypass these protections.

Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than the author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.

ASIA CCS’14, June 4–6, 2014, Kyoto, Japan.  
Copyright is held by the owner/author(s). Publication rights licensed to ACM.  
ACM 978-1-4503-2800-5/14/06 ...$15.00.  
http://dx.doi.org/10.1145/2590296.2590316

## 2. Background
### 2.1 Permission Model
To mitigate privacy-related security threats, Google has implemented a permission-based model in Android. By default, applications cannot access dangerous permissions unless explicitly authorized by the user during installation.

### 2.2 Inter-Component Communication (ICC)
ICC allows different components within an application to communicate using Intent objects. Components include Activities, Services, and Broadcast Receivers. Developers can set the `exported` attribute to control whether a component can receive Intents from other applications.

### 2.3 Capability Leaks
A capability leak occurs when a vulnerable application performs a privileged action on behalf of a malicious application that lacks the necessary permissions. This can happen if a component fails to check the caller's permissions.

## 3. System Design
IntentFuzzer uses a dynamic fuzzing technique to detect capability leaks. It generates and sends appropriate Intents to components to see if any permission leaks occur.

### 3.1 Fuzzing Strategy
We focus on fuzzing Services and Broadcast Receivers, which run in the background and can be exploited without user awareness. Started Services and Broadcast Receivers are the primary targets because they can receive explicit Intents.

### 3.2 Permission Leak Detection
IntentFuzzer Agent sends Intents without requesting any permissions. If a privileged action is triggered, a permission leak is detected. We modified the Android system to log permission checks and Extra data requests.

### 3.3 Intent Construction
Intents contain Action, Data, and Extras. We construct Intents with both explicit and implicit Actions, and appropriate Data and Extras to maximize execution path coverage.

#### 3.3.1 Action Construction
For components that define Intent Filters, we infer Actions from the filters. For mistakenly exported components, we extract potential Actions from the string pool of the application.

#### 3.3.2 Data Construction
Data URIs are constructed based on the rules defined in Intent Filters. If no Data rule is specified, no Data URI is included.

#### 3.3.3 Extras Construction
Extras are key-value pairs. We use a runtime feedback system to construct appropriate Extras, reducing false negatives.

### 3.4 General Fuzzing Steps
- For components with Intent Filters, fuzz each explicit Action.
- For mistakenly exported components, fuzz each implicit Action.
- Record permission leaks and corresponding Intents for post-analysis.

## 4. Implementation
### 4.1 Architecture
IntentFuzzer is built on top of Drozer, an open-source security assessment framework. It consists of an agent installed on the Android device and a server-side console on a PC.

### 4.2 System Modification
We instrumented the `checkPermission` method in the ActivityManagerService to log permission checks. We also modified Extras getting APIs to log Extra data requests.

## 5. Evaluation
Our results show that 161 applications in Google Play and 26 permissions in Xiaomi Hongmi and 19 permissions in Lenovo K860i have permission leaks. We provide several exploitation cases to validate our findings.

## 6. Limitations and Future Work
While IntentFuzzer is effective, it may still produce false positives. Future work will focus on improving the precision and expanding the scope of the analysis.

## 7. Related Work
Several static analysis systems, such as DroidChecker and Woodpecker, have been developed to detect capability leaks. However, they may have false positives and require manual verification.

## 8. Conclusions
IntentFuzzer provides a dynamic and precise method for detecting capability leaks in Android applications. Our evaluation demonstrates its effectiveness in identifying and validating permission leaks in both public and closed-source applications.

---

This optimized version of the text is more structured, coherent, and professional, with clear headings and concise explanations.