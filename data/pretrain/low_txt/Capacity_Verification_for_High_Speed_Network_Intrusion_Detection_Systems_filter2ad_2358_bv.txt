### UDP Packet Overload and System Response

The system experienced an overload due to a significant increase in UDP packets. This surge caused a substantial rise in the mean inter-packet arrival time (MI) for UDP, as well as an increase in the "weights" (time requirements) for their analysis tasks (see Problem 5). As a result, the system reconfiguration led to the dropping of all UDP-related tasks, effectively disabling the filter for UDP traffic. Similarly, Adaptive Snort, when faced with system overload, performs a quick reconfiguration by disabling UDP rules and packet filters to prevent further packet drops.

### Experimental Results on Overload Attacks

We conducted experiments with the same overload attacks described in Section 2.4 against both Adaptive Bro and Adaptive Snort. The results showed that Adaptive Bro detected the WEB-IIS CMD.EXE exploits more than 90% of the time (19 out of 20), while Adaptive Snort achieved a 100% detection rate (20 out of 20).

### Performance Monitoring and Dynamic Reconfiguration Overheads

When implementing performance monitoring and dynamic reconfiguration, it is crucial to consider the overheads. We used micro-benchmark experiments to measure these overheads. For Adaptive Bro, at each "heartbeat" interval (1 second in our experiment), the system spent an average of 0.0002 seconds computing the number of packets received and dropped, the mean inter-event arrival time, and the mean event service time. This results in an overhead of 0.02%, which we consider acceptable. Changing filters (using pre-compiled filters) took an average of 0.00005 seconds, and running the Knapsack algorithm took an average of 0.0002 seconds.

For Adaptive Snort, the "heartbeat" function, which is a timer invoked every second, took 0.00005 seconds, resulting in an overhead of 0.005%. Running the Knapsack algorithm took approximately 0.0002 seconds, and changing filters (using pre-compiled filters) took an average of 0.00005 seconds. We believe these overheads are acceptable for both systems.

### Related Work

The issues of real-time network-based IDS being evaded, overloaded, or crashed were first discussed in [25, 23]. Evasion can be mitigated if an IDS uses stateful analysis and a network traffic normalizer [12]. While high-end hardware can help in data capturing to ensure no packet drops [23], an IDS with site-specific ID logics implemented as application-level software can still be overloaded by high-volume filtered events. Paxson suggested that load-shedding could help a real-time IDS defend against overload attacks [23].

Several enterprise-wide and Internet-wide distributed IDSs [24, 35] and agent-based architectures [4, 11] have been proposed to address detection coverage and workload distribution. For example, EMERALD [24] deploys and configures ID modules hierarchically according to the enterprise network topology. Kruegel et al. proposed a partitioning approach for intrusion detection in high-speed networks [14], which is more effective than simple load-balancing. However, even with this approach, static configurations can lead to some sensors being overloaded, necessitating adaptive methods.

Our research complements these efforts by focusing on performance monitoring and dynamic reconfiguration, which are essential for an IDS to adaptively resist attacks. Evaluating an IDS based on the damages (costs) it prevents [10, 15] is often more appropriate. We use cost-benefit analysis to determine the best IDS configurations given resource constraints.

### Operating Systems and Load-Shedding Techniques

Operating systems also require load-shedding techniques to support real-time and multimedia applications [7, 20]. Performance monitoring and Quality-of-Service (QoS) adaptation approaches have been studied in other domains, such as network servers [1] and middleware [16]. These studies can inform the design of techniques for monitoring IDS performance and shedding workload to meet the real-time requirements of high-priority detection tasks. Although load-balancing is typically used in a different context than load-shedding, lessons can be learned from this classical problem. For example, measuring resource utilization and testing application response are necessary to determine the "meaningful" system load. In our approach, the manager tests the IDS response time using a simulated attack.

### Attack Tree Analysis and Scenario Recognition

Attack tree analysis [29] is an offline process, but we are interested in recognizing runtime scenarios and predicting likely forthcoming attacks. Similar to the activity graphs in GrIDS [31, 6], we use a scenario graph and network topology to detect scenarios.

### Conclusion

Providing performance guarantees should be a key requirement for IDSs and security products in general. We provided an analysis of IDS performance metrics and constraints, arguing that an IDS should provide the best value under operational constraints. A statically configured IDS can be overloaded by adversaries, leading to missed detections. We argued that an IDS should at least achieve performance adaptation, providing the best possible performance for the given operational environment. We discussed the need for performance monitoring and reconfiguration mechanisms in real-time IDSs and described prototype adaptive IDSs based on Bro and Snort. Our experimental results validate our approach.

Future work will involve more extensive and realistic experiments, refining performance monitoring and adaptation mechanisms to lower overheads and make them dynamically configurable. Despite the conceptual and architectural challenges, we plan to design and implement an adaptive real-time IDS with built-in performance monitoring and dynamic optimization capabilities.

### Acknowledgments

This research is supported in part by grants from DARPA (F30602-00-1-0603). We thank Vern Paxson of ICSI/LBNL for help with Bro, and Lee Rossey and Richard Lippmann of MIT Lincoln Lab for assistance with LARIAT.

### References

1. T. F. Abdelzaher, K. G. Shin, and N. Bhatti. Performance guarantees for web server end-systems: A control-theoretical approach. IEEE Transactions on Parallel and Distributed Systems, 2001. to appear.
2. S. Axelsson. The base-rate fallacy and the difficulty of intrusion detection. ACM Transactions on Information and System Security, 3(3), 2000.
3. R. Bace. Intrusion Detection. Macmillan Technical Publishing, 2000.
4. J. S. Balasubramaniyan, J. O. Garcia-Fernandez, D. Isacoff, E. Spafford, and D. Zamboni. An architecture for intrusion detection using autonomous agents. Technical report, COAST Laboratory, Department of Computer Science, Purdue University, West Lafayette, IN, 1998.
5. J.B.D. Cabrera, W. Lee, R. K. Prasanth, L. Lewis, and R. K. Mehra. Optimization and control problems in real-time intrusion detection. submitted for publication, March 2002.
6. S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, J. Rowe, S. Staniford-Chen, R. Yip, and D. Zerkle. The design of GrIDS: A graph-based intrusion detection system. Technical Report CSE-99-2, U.C. Davis Computer Science Department, Davis, CA, 1999.
7. C. L. Compton and D. L. Tennenhouse. Collaborative load shedding for media-based applications. In International Conference on Multimedia Computing and Systems, Boston, MA, May 1994.
8. D. Contis, W. Lee, D. E. Schimmel, W. Shi, A. Thomas, Y. Zhang, Jun Li, and C. Clark. A prototype programmable network processor based IDS. submitted for publication, March 2002.
9. D. Denning. Information Warfare and Security. Addison Wesley, 1999.
10. J.E. Gaffney and J. W. Ulvila. Evaluation of intrusion detectors: A decision theory approach. In Proceedings of the 2001 IEEE Symposium on Security and Privacy, May 2001.
11. R. Gopalakrishna and E. H. Spafford. A framework for distributed intrusion detection using interest-driven cooperating agents. In The 4th International Symposium on Recent Advances in Intrusion Detection (RAID 2001), October 2001.
12. M. Handley, C. Kreibich, and V. Paxson. Network intrusion detection: Evasion, traffic normalization, and end-to-end protocol semantics. In Proceedings of the 10th USENIX Security Symposium, August 2001.
13. L. Kleinrock. Queuing Systems, Vol. 1: Theory. John Wiley & Sons, Inc., 1975.
14. C. Kruegel, F. Valeur, G. Vigna, and R. A. Kemmerer. Stateful intrusion detection for high-speed networks. In Proceedings of 2002 IEEE Symposium on Security and Privacy, May 2002.
15. W. Lee, W. Fan, M. Miller, S. J. Stolfo, and E. Zadok. Toward cost-sensitive modeling for intrusion detection and response. Journal of Computer Security, 2001. to appear.
16. L. Liu, C. Pu, K. Schwan, and J. Walpole. Infofilter: Supporting quality of service for fresh information delivery. New Generation Computing Journal, 18(4), August 2000.
17. C. Lu, J. A. Stankovic, T. F. Abdelzaher, G. Tao, S. H. Son, and M. Marley. Performance specifications and metrics for adaptive real-time systems. In Proceedings of the IEEE Real-Time Systems Symposium, December 2000.
18. S. Martello and P. Toth. Knapsack Problems: Algorithms and Computer Implementations. John Wiley & Sons Ltd., 1990.
19. S. McCanne, C. Leres, and V. Jacobson. libpcap. available via anonymous ftp to ftp.ee.lbl.gov, 1994.
20. J. Nieh and M. S. Lam. The design, implementation, and evaluation of SMART: A scheduler for multimedia applications. In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, October 1997.
21. S. Northcutt. Intrusion Detection: An Analystâ€™s Handbook. New Riders, 1999.
22. C. H. Papadimitriou and K. Steiglitz. Combinatorial Optimization - Algorithms and Complexity. Prentice-Hall, Inc., 1982.
23. V. Paxson. Bro: A system for detecting network intruders in real-time. Computer Networks, 31(23-24), December 1999.
24. P. A. Porras and P. G. Neumann. EMERALD: Event monitoring enabling responses to anomalous live disturbances. In National Information Systems Security Conference, Baltimore MD, October 1997.
25. T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding network intrusion detection. Technical report, Secure Networks Inc., January 1998. http://www.aciri.org/vern/Ptacek-Newsham-Evasion-98.ps.
26. N. Puketza, K. Zhang, M. Chung, B. Mukherjee, and R. Olsson. A methodology for testing intrusion detection systems. IEEE Transactions on Software Engineering, 22(10), October 1996.
27. M. Roesch. Snort - lightweight intrusion detection for networks. In Proceedings of the USENIX LISA Conference, November 1999. Snort is available at http://www.snort.org.
28. L. M. Rossey, R. K. Cunningham, D. J. Fried, J. C. Rabek, R. P. Lippmann, and J. W. Haines. LARIAT: Lincoln adaptable real-time information assurance testbed. In The 4th International Symposium on Recent Advances in Intrusion Detection (RAID 2001), October 2001.
29. B. Schneier. Secrets & Lies: Digital Security in a Networked World. John Wiley & Sons, Inc., 2000.
30. G. Shipley and P. Mueller. Dragon claws its way to the top. In Network Computing. TechWeb, August 2001.
31. S. Staniford-Chen, S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, C. Wee, R. Yip, and D. Zerkle. GrIDS - a graph-based intrusion detection system for large networks. In Proceedings of the 19th National Information Systems Security Conference, 1996.
32. J. A. Stankovic, C. Lu, S. H. Son, and G. Tao. The case for feedback control real-time scheduling. In Proceedings of the EuroMicro Conference on Real-Time Systems, June 1999.
33. SunSoft. SunSHIELD Basic Security Module Guide. SunSoft, Mountain View, CA, 1995.
34. Top Layer Networks and Internet Security Systems. Gigabit Ethernet intrusion detection solutions: Internet security systems RealSecure network sensors and Top Layer Networks AS3502 gigabit AppSwitch performance test results and configuration notes. White Paper, July 2000.
35. G. Vigna, R. A. Kemmerer, and P. Blix. Designing a web of highly-configurable intrusion detection sensors. In Proceedings of the 4th International Symposium on Recent Advances in Intrusion Detection (RAID 2001), October 2001.