### Technical Perspective on Service Description

The technical perspective in service description focuses on the detailed technical information of services provided by an organization. The lifecycle of a service encompasses several phases, and this perspective is divided into two main sections: invocation and execution. The first section outlines the process of invoking a service, while the second section details the interaction with the executing service. This perspective serves as a central reference point for existing web standards, such as WSDL, user interfaces, and communication, messaging, and transaction protocols.

### 4. USDL Metamodel

To establish a solid foundation for USDL (Universal Service Description Language), we provide a formal specification. This specification facilitates communication and implementation, enabling integration with other specifications. It also refines the definition of the concepts presented. Therefore, we define and formalize a metamodel for USDL.

Formalizing a language can be achieved through various methods, including metamodels, grammars, ontologies, XML schemas, programming language implementations, and algebraic specifications. We chose to define a metamodel because it offers a well-structured and modular approach. 

#### Metamodel Definition

We refer to the OMG (Object Management Group) specification of the Meta Object Facility (MOF) [OMG03] when discussing metamodels. In MOF, a metamodel consists of object-oriented concepts to formalize the static structure of a language. These concepts include packages, classes with attributes and operations, data types, inheritance, references, and associations. For defining constraints, MOF is accompanied by the Object Constraint Language (OCL), which expresses invariants for a given context (set of elements of a metamodel).

Fischer et al. [Fis04a, Fis04b] argue that a grammar, unlike a metamodel, lacks modularity, specialization, and the ability to express inter-language relationships. They assert that a modern language specification must go beyond pure syntax to show the internal structure and support relations with other language specifications. A metamodel approach supports these requirements, making it a suitable choice for USDL.

Additionally, a metamodel provides a formal and mature solution for expressing a language's syntax (static structure). Since USDL is a descriptive language, a metamodel is an excellent option for representing it. Descriptive languages do not cover behavioral aspects or impose specific concept combinations, making them akin to form definitions. Furthermore, the supporting technology should facilitate tool development and the definition of an exchange format for persisted service descriptions, which is covered by MOF implementations.

Key reasons for choosing a metamodel approach include:
1. **Maturity and Understanding**: MOF-based metamodels are well-established and widely understood.
2. **Standard Integration**: MOF is an OMG standard, allowing easy integration with other standards like UML and BPMN.
3. **Language Integration**: MOF supports the integration of other languages, such as process and schema languages.

SAP's Modeling Infrastructure (MOIN) [AHK06] exemplifies this, providing a MOF-based repository for SAP models and a design tool development environment. MOIN is similar to the Eclipse Modeling Framework (EMF) [http://www.eclipse.org/emf], which also offers a variety of supporting tools and frameworks.

Using MOIN, we integrate existing data from SAP systems, such as process models and service definitions from the Enterprise Service Repository (ESR) [http://uddi.xml.org/]. This integration, combined with MOF's robust tool generation and implementation capabilities, enables rapid prototyping, such as developing editors for creating and testing USDL instances.

We have formalized USDL with a MOF-based metamodel (see Figure 1) to represent its formal base. Our goal was to keep the model as simple as possible, using composition and structuring but avoiding grouping mechanisms and generalization to enhance comprehensibility. Building on MOF, an established OMG standard with available implementations like MOIN and EMF, we believe this will provide a solid foundation for USDL in terms of integration and tooling.

### 5. From USDL to Service Level Agreements

After discussing the structure and formalization of USDL, we now describe how service level agreements (SLAs) can be created from a USDL-based description instance. SLAs are formal contracts between service consumers and providers, negotiated before service provisioning. They serve as a basis for monitoring service provisioning and consumption, ensuring trustworthy business interactions [WCS08].

#### 5.1 Specifying Service Level Agreements

Several approaches exist for specifying SLAs, such as Web Service Level Agreements (WSLA) [IBM03], SLAng [LSE03], and WS-Agreement [GGF05]. While WSLA and SLAng are no longer developed, WS-Agreement is a specification from the Open Grid Forum [GGF05]. It defines a language and protocol for offering capabilities, negotiating agreements, and monitoring compliance. Although WS-Agreement provides a structure for SLA documents, it does not specify the service aspects and their descriptions, which need to be handled by a specific service description language like USDL.

WS-Agreement also specifies a process for creating SLAs. The service consumer and provider take the roles of agreement initiator and responder. The initiator requests an agreement template from the responder, who then creates and sends back an offer. The responder validates and accepts or rejects the offer. This section describes how to generate an initial agreement template, while the negotiation process is out of scope.

An agreement template consists of three main sections: the agreement context, the terms, and the creation constraints. The agreement context specifies information about the involved parties and their roles. The terms section describes the service's provisions and guarantees. The creation constraints section specifies rules for generating a valid offer from the template.

#### 5.2 USDL to WS-Agreement Mapping

The WS-Agreement template (see Figure 2) can be generated from the USDL service description via a transformation. Some information from the service description can be mapped directly to WS-Agreement elements, while others require USDL statements. General service information and functionality are presented in the ServiceDescriptionTerms section, including the service name, version number, and functional classification. Additional information, such as a service ID, classifications, or bundling information, can be added but was omitted due to space limitations.

The ServiceProperties section defines measurable service attributes. All measurable attributes from the USDL description, along with their metrics, are mapped to the WS-Agreement Variable element. For example, the service's execution time is specified. Unlike the ServiceDescriptionTerms section, where USDL code fragments are integrated, the ServiceProperties section uses a mapping from USDL to WS-Agreement.

The GuaranteeTerm section sets up specific ServiceLevelObjectives, such as minimum, maximum, average, or concrete values guaranteed for service provisioning. These can be specified for each service attribute listed as a Variable in the ServiceProperties section. For example, the executionTime variable, defined in the ServiceProperties section, is referenced to guarantee a maximum execution time of two hours.

To extend the template with a CreationConstraints section, additional modeling beyond the current scope of USDL is necessary. This section can specify value ranges for parameters and relationships between different parameters. We will address CreationConstraints at a later stage of the project.

### 6. Conclusions

In this paper, we presented the Universal Service Description Language (USDL) as a language for describing business, operational, and technical aspects of universal services. Such description languages are fundamental for the success of the Internet of Services. USDL accounts for the specific characteristics of universal services while preserving means for describing aspects of accepted web service standards, such as WSDL and BPEL. USDL has a formal specification created using a MOF-based metamodel, offering advantages like simplified communication and precise semantics. We aim to integrate existing web-based models and leverage existing technologies. Using a MOF-implementation, such as SAP's MOIN infrastructure, existing services and workflows can be easily integrated into USDL using reference mechanisms. USDL models can also be published within SAP systems, allowing existing models and tools to access and use the information. We have also demonstrated a mapping between USDL and WS-Agreement, showing that USDL service descriptions can serve as a base for specifying service level agreements. WS-Agreement SLA templates can be created via a transformation from USDL descriptions.

### Acknowledgments

The TEXO project was funded by the German Federal Ministry of Economy and Technology under the promotional reference 01MQ07012. The authors take responsibility for the contents.

### Literature

- [AHK06] Michael Altenhofen, Thomas Hettel, and Stefan Kusterer. OCL support in an industrial environment. 6th OCL Workshop at the UML/MoDELS. 2006.
- [CS05] Cardoso, Jorge, and Sheth, Amit. Introduction to Semantic Web Services and Web Process Composition. Semantic Web Process: powering next generation of processes with Semantics and Web services, LNCS, Springer-Verlag Heidelberg, Vol. 3387, pp.1-13, 2005. ISBN: 3-540-24328-3.
- [CVW08] Cardoso, Jorge, Voigt, Konrad, and Winkler, Matthias. Service Engineering for The Internet of Services. To appear in Enterprise Information Systems, Lecture Notes in Business Information Processing (LNBIP), 2008.
- [Cur01] Curbera, F., W. Nagy, et al. (2001). Web Services: Why and How. Workshop on Object-Oriented Web Services - OOPSLA 2001, Tampa, Florida, USA.
- [Fis04a] Joachim Fischer, Eckhardt Holz, Andreas Prinz, and Markus Scheidgen. Tool-based Language Development. Workshop on Integrated-reliability with Telecommunications and UML Languages. 2004.
- [Fis04b] Joachim Fischer, Michael Piefel, and Markus Scheidgen. Using Metamodels for the definition of Languages. Proceedings of fourth SDL and MSC workshop (SAM04). 2004.
- [GGF05] Global Grid Forum, Web Service Agreement Specification (WS-Agreement), Version 2005/09.
- [IBM03] IBM Corporation, Web Service Level Agreement (WSLA) Language Specification, version 1.0, January 2003.
- [IBM98] IBM, Annual Report 1998, http://www.ibm.com.
- [LSE03] Lamanna, D.D., Skene, J., Emmerich, W. Specification Language for Service Level Agreements, EU IST 34069 deliverable D, March 2003.
- [OEC00] OECD. The Service Economy. Science Technology Industry Business and Industry Policy Forum Series. p. 7. 2000. Paris, France.
- [OSu05] O’Sullivan, J., Edmond, D., Hofstede, A.H.t.: Formal description of non-functional service properties. Technical FIT-TR-2005-01, Queensland University of Technology, Brisbane, 2005.
- [ST07] Schroth, Christoph, and Janner, Till, 2007. Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services. IT Professional, N. 3, p. 36-41, IEEE Computer Society.
- [WCS08] Winkler, Matthias; Cardoso, Jorge, and Scheithauer, Gregor. Challenges of Business Service Monitoring in the Internet of Services. To appear in Proceedings of the iiWAS2008, November 24-26, 2008, Linz, Austria.