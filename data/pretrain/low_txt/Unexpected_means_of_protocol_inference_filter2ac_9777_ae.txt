# Unsupervised Protocol Discovery: Matched Cells Using Product Distributions

The following table (Table 3) presents the results of unsupervised protocol discovery, where matched cells are identified using product distributions between two halves of a departmental trace. The HTTP protocol (in bold) was removed only from the first trace. The matches are ranked by match distance, from the strongest to the weakest. Protocol labels for the cells were not available until after the matching was performed. Each row summarizes information for each pair of matching cells, including their distance, cumulative and individual percentage of flows in their respective halves, and the protocol label for the cell. Italicized protocols were also absent from the first half, although this was coincidental and not by design.

| Distance | Cumulative % | Individual % | Protocol Label |
|----------|--------------|---------------|----------------|
| 0.78     | 0.11         | 5.72          |                |
| 0.11     | 0.04         | 0.82          |                |
| 0.09     | 1.24         | 0.06          |                |
| 0.28     | 0.07         | 0.03          |                |
| 0.04     | 0.15         | 0.06          |                |
| 6.84     | 0.04         | 1.23          |                |
| 9.46     | 0.03         | 0.11          |                |

## Protocol Models Over Excluded Traffic

We applied protocol models over the excluded traffic using a promotion threshold of 500 and a merge threshold of 250, as in the previous section. We then examined the clusters and manually identified several protocols unknown to Ethereal, including:
- SLP (Service Location Protocol) Advertisements
- Game traffic
- An implementation of Kademlia [13]
- HTTP over SSL
- Various Web exploits

The flows using each of these protocols fell into separate clusters, demonstrating that our methodology can:
1. Identify flows from one unknown application as distinct from another.
2. Enable network administrators to identify an instance of each protocol rather than all flows using a protocol.

## Discussion

### Framework

From an engineering perspective, a network protocol is a set of rules dictating the interaction between two processes. However, to the network, a protocol is a distribution on byte sequences induced by real implementations and usage. Our protocol inference system is built on the ability to learn and distinguish these distributions. This requires not only that protocol distributions differ measurably but also that we can represent these distributions compactly while remaining oblivious to their design. This is the main challenge in designing protocol models.

In our three models, we have explicitly or implicitly relied on two techniques to overcome this challenge and reduce the size and complexity of session distributions:
1. **Introducing Independence Assumptions**: For example, instead of treating the 64-byte distribution as a whole, we factor it into a product of 64 individual byte distributions—the product distribution model. This achieves an exponential reduction in space at the cost of discarding correlations between bytes. Our product distribution model shows that the presence of certain attributes (rather than their correlation) is sufficient to distinguish protocols.
2. **Ignoring Infrequent Features**: The model assumes that distinguishing features are also frequent features. This plays a central role in the CSG model, which preserves more correlation by focusing on common high-frequency substrings.

### Models

- **Product Distribution Model**: This model is offset-based and performs well on binary protocols where protocol "anchors" (i.e., byte sequences with low variance) occur at fixed offsets. It also works surprisingly well on textual protocols like HTTP and SMTP, which have a small number of distinguishing initial sequences that induce well-discriminating byte distributions.
- **Markov Process Model**: This model was expected to capture "floating" strings—those not tied to a particular offset—as might appear in text protocols such as HTTP and SMTP. However, a first-order Markov process cannot capture such strings perfectly. Many protocols have distinguishing strings that occur at fixed offsets (e.g., "GET" for HTTP or "SSH" for SSH).
- **CSG Model**: CSGs offer the unique benefit of providing protocol-intrinsic substrings in their entirety and with precise information about the location of their occurrence along with their frequencies. The main strength of CSGs, the focus on common substrings, is also its main weakness: only substrings observed during training can later be used for classification. Binary protocols make the presence of such strings less certain, though a minimum string length of 4 bytes mitigates this issue.

### Applications

We envision two usage scenarios for partially-correlated protocol inference:
1. **Semi-Supervised Learning**: In this scenario, protocol models are learned in a semi-supervised manner. Instead of labeling training instances, only the constructed protocol models need to be labeled, significantly reducing complexity. Our results show that our approach is competitive with existing supervised techniques (e.g., Haffner et al. [8]).
2. **Protocol Discovery**: In this scenario, new protocols appear as new clusters distinct from known protocols, allowing for rapid discovery and description of new protocols. Our results show that our approach is effective for this problem as well.

### Future Work

Our work naturally leads to several future research directions. Most immediately, our models can be further improved to be more accurate and space-efficient. Although performance was not our primary objective, both the product distribution and Markov process models may be suitable for online processing. We plan to explore the performance aspect in future work. CSGs' higher complexity makes operating at line-speeds challenging, but we believe their unique strengths can be put to use in related but less time-critical settings.

### Conclusion

Identifying application-layer protocols has become increasingly manual and laborious as the historical association between ports and protocols deteriorates. To address this, we propose a generic architectural and mathematical framework for unsupervised protocol inference. We present three classification techniques: product distributions of byte offsets, Markov models of byte transitions, and common substring graphs of message strings. We compare the performance of these classifiers using real-world traffic traces from three networks in two use settings, demonstrating that the classifiers can successfully group protocols without a priori knowledge. Thus, labeling a single protocol instance is sufficient to classify all such traffic. In effect, we have substituted the painful process of manual flow analysis and classifier construction with the far easier task of recognizing a protocol instance.

### Acknowledgments

We would like to thank Vern Paxson for his input on substring-based traffic analysis methods, Jim Madden and David Visick for their help understanding the UCSD network, Sameer Agarwal for discussions on clustering, Andrew Moore for access to the Cambridge trace, and both Michael Vrable and Michelle Panik for feedback on earlier versions of this paper. This work was supported by NSF grant CNS-0433668, Intel Research Cambridge, and the UCSD Center for Networked Systems.

### References

[1] Ethereal: A network protocol analyzer. http://www.ethereal.com.
[2] S. Baset and H. Schulzrinne. An Analysis of the Skype Peer-to-Peer Internet Telephony Protocol. Technical report, Columbia University, New York, NY, 2004.
[3] L. Bernaille, R. Teixeira, I. Akodkenou, A. Soule, and K. Salamatian. Traffic classification on the fly. ACM SIGCOMM Computer Communication Review, 36(2):23–26, April 2006.
[4] K. Claffy, G. Miller, and K. Thompson. The nature of the best: Recent measurements from an Internet backbone. In Proc. of INET '98, jul, 1998.
[5] T. M. Cover and J. A. Thomas. Elements of Information Theory. John Wiley & Sons, 1991.
[6] C. Dewes, A. Wichmann, and A. Feldmann. An Analysis of Internet Chat Systems. In Proc. of the Second Internet Measurement Workshop (IMW), Nov 2002.
[7] C. Fraleigh, S. Moon, B. Lyles, C. Cotton, M. Khan, D. Moll, R. Rockell, T. Seely, and C. Diot. Packet-level Traffic Measurements from the Sprint IP Backbone. IEEE Network, 17(6):6–16, 2003.
[8] P. Haffner, S. Sen, O. Spatscheck, and D. Wang. ACAS: Automated construction of application signatures. In Proceedings of the 2005 Workshop on Mining Network Data, pages 197–202, 2005.
[9] IANA. TCP and UDP port numbers. http://www.iana.org/assignments/port-numbers.
[10] T. Karagiannis, A. Broido, N. Brownlee, K. Claffy, and M. Faloutsos. Is P2P dying or just hiding? In IEEE Globecom 2004 - Global Internet and Next Generation Networks, Dallas/Texas, USA, Nov, 2004. IEEE.
[11] T. Karagiannis, A. Broido, M. Faloutsos, and K. Claffy. Transport Layer Identification of P2P Traffic. In Proc. of the Second Internet Measurement Workshop (IMW), Nov 2002.
[12] T. Karagiannis, D. Papagiannaki, and M. Faloutsos. BLINC: Multilevel traffic classification in the dark. In Proceedings of the 2005 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications, pages 229–240, 2005.
[13] P. Maymounkov and D. Mazières. Kademlia: A peer-to-peer information system based on the xor metric. In Proceedings of the First International Workshop on Peer-to-Peer Systems (IPTPS), 2002.
[14] A. Moore and D. Papagiannaki. Toward the Accurate Identification of Network Applications. In Proc. of the Passive and Active Measurement Workshop, mar 2005.
[15] A. W. Moore and D. Zuev. Internet traffic classification using Bayesian analysis techniques. In Proceedings of the 2005 Conference on Measurement and Modeling of Computer Systems, pages 50–60, 2005.
[16] T. Oliver, B. Schmidt, and D. Maskell. Hyper customized processors for bio-sequence database scanning on FPGAs. In FPGA '05: Proc. of the 2005 ACM/SIGDA 13th international symposium on Field-programmable gate arrays, pages 229–237, New York, NY, USA, 2005. ACM Press.
[17] V. Paxson. Bro: A System for Detecting Network Intruders in Real-Time. Computer Networks (Amsterdam, Netherlands: 1999), 31(23-24):2435–2463, 1998.
[18] D. Plonka. FlowScan: A Network Traffic Flow Reporting and Visualization Tool. In Proc. of USENIX LISA, jul, 2000.
[19] A. Sanfeliu and K. Fu. A Distance Measure Between Attributed Relational Graphs for Pattern Recognition. IEEE Transactions on Systems, Man and Cybernetics, SMC-13(3):353–362, 1981.
[20] S. Sen, O. Spatscheck, and D. Want. Accurate, Scalable In-network Identification of P2P Traffic Using Application Signatures. In Proc. of the 13th International World Wide Web Conference, may 2004.
[21] T. F. Smith and M. S. Waterman. Identification of Common Molecular Subsequences. Journal of Molecular Biology, 147, 1981. http://gel.ym.edu.tw/~chc/AB papers/03.pdf.
[22] G. Voss, A. Schröder, W. Müller-Wittig, and B. Schmidt. Using Graphics Hardware to Accelerate Biological Sequence Analysis. In Proc. of IEEE Tencon, Melbourne, Australia, 2005.
[23] S. Zander, T. Nguyen, and G. Armitage. Self-learning IP Traffic Classification based on Statistical Flow Characteristics. In Proc. of the 6th Passive and Active Network Measurement Workshop, March 2005.