### Verification and Support Levels

- **Verified+FC**: This designation indicates that the VM data confidentiality and integrity, as well as the functional correctness, are verified.
- **Verified**: This means that the VM data confidentiality and integrity are verified, but functional correctness is not.
- **Unverified**: The feature is supported but has not been verified.
- **Blank**: The feature is either not available or is so severely limited that it is of little practical use.

### Comparison with Other Systems

- **seL4 and CertiKOS** do not offer any verified features. 
- **SeKVM** verifies Arm assembly code, while **CertiKOS** links C and x86 assembly code proofs using a verified x86 compiler. However, no such compiler exists for Arm multiprocessor code.
- **SeKVM** supports standard Linux functionality, unlike seL4 and CertiKOS.

### seL4 Limitations

- While multiple versions of seL4 exist, noninterference properties and functional correctness have only been verified for a single uniprocessor version [59].
- Bugs have been discovered in other seL4 versions [60].
- The verified version of seL4 only supports Armv7 hardware and lacks virtualization support [59].
- Another Armv7 version of seL4 verifies the functional correctness of some hypervisor features but not MMU functionality [59], [61], which is essential for a functional hypervisor.
- seL4 does not support shared page tables [62], and verifying multiprocessor and hypervisor support remains future work [63].
- seL4 lacks most features expected of a hypervisor, including virtio support, which is unverified and requires porting to its platform, limiting its functionality. For example, seL4 lacks support for virtio block devices and vhost optimization.
- Building a system using seL4 is significantly more challenging compared to using Linux [63].

### CertiKOS Limitations

- **CertiKOS** proves noninterference for the sequential mCertiKOS kernel [35] without virtualization support and goes beyond seL4 by verifying the functional correctness of the mC2 multiprocessor kernel with virtualization. However, mC2 provides no data confidentiality and integrity among VMs.
- Like seL4, CertiKOS cannot verify shared page tables, thus it does not provide verified support for multiprocessor VMs.
- The verified kernel does not work on modern 64-bit hardware.
- It lacks many hypervisor features, including dynamically allocated page tables for multi-level paging, huge page support, device passthrough, and VM migration.
- Its virtio support does not include vhost, is limited to certain block devices, and requires porting virtio to its platform, making it difficult to keep up with virtio improvements and updates.

### Partial Verification in Other Hypervisors

- The VCC framework has been used to verify 20% of Microsoft’s Hyper-V multiprocessor hypervisor, but global security properties remain unproven [64], [65].
- **überSpark** has been used to verify the üXMHF hypervisor, but their architecture does not support concurrent hardware access, and their verification approach foregoes functional correctness [66], [67].
- In contrast, **KCore** verifiably enforces security properties by leveraging its verified core while inheriting the comprehensive features of a commodity hypervisor.

### Information-Flow Security Verification

- Information-flow security has previously been proven for a few small, uniprocessor systems using noninterference [27], [34], [35], [36], [68], [69], [70]. None of these techniques generalize to multiprocessor environments, where refinement can hide unintentional information leakage to concurrent observers.
- Information-flow security has been verified over a high-level model of the HASPOC multicore hypervisor design [71], [72], but not for the actual hypervisor implementation.
- The strict noninterference previously proven is of limited value for hypervisors because information sharing is necessary in commodity hypervisors like KVM.
- Some work has explored verifying information-flow security in concurrent settings by requiring the use of programming language constructs [73], [74], [75], [76], but they require writing the system to be verified in their respective proposed languages and have not been used to verify any real system.
- In contrast, **SeKVM** is written and verified in C without additional annotations, and information-flow security is proven while permitting dynamic intentional information sharing, enabling VMs to use existing KVM functionality, such as paravirtual I/O, without compromising VM data.

### Virtualization for Security

- Various approaches [61], [77], [78], [79], [80] divide applications and system components into VMs and rely on the hypervisor to safeguard interactions among secure and insecure components.
- **SeKVM** decomposes the hypervisor itself to achieve the first security proof for a commodity multiprocessor hypervisor.

### Conclusions

- We have formally verified, for the first time, guarantees of VM data confidentiality and integrity for the Linux KVM hypervisor.
- This is achieved through microverification, retrofitting KVM with a small core that can enforce data access controls on the rest of KVM.
- We introduce security-preserving layers to incrementally prove the functional correctness of the core, ensuring the refinement proofs to the specification preserve security guarantees.
- We then use the specification to verify the security guarantees of the entire KVM hypervisor, even in the presence of information sharing needed for commodity hypervisor features, by introducing data oracles.
- Microverification required modest KVM modifications and proof effort, yet results in a verified hypervisor that retains KVM’s extensive commodity hypervisor features, including support for running multiple multiprocessor VMs, shared multi-level page tables with huge pages, and standardized virtio I/O virtualization with vhost kernel optimizations.
- Our verified KVM performs comparably to stock, unverified KVM, running real application workloads in multiprocessor VMs with less than 10% overhead compared to native hardware in most cases.

### Acknowledgments

- Xuheng Li helped with proofs for assembly code and layer refinement.
- Christoffer Dall, Deian Stefan, and Xi Wang provided helpful comments on drafts of this paper.
- This work was supported in part by NSF grants CCF-1918400, CNS-1717801, and CNS-1563555.

### References

[1] A. Kivity, Y. Kamay, D. Laor, U. Lublin, and A. Liguori, “KVM: the Linux Virtual Machine Monitor,” in Proceedings of the 2007 Ottawa Linux Symposium (OLS 2007), Ottawa, ON, Canada, Jun. 2007.

[2] “Hyper-V Technology Overview,” Microsoft, Nov. 2016, https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-technology-overview.

[3] S. J. Vaughan-Nichols, “Hypervisors: The cloud’s potential security Achilles heel,” ZDNet, Mar. 2014, https://www.zdnet.com/article/hypervisors-the-clouds-potential-security-achilles-heel.

[4] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell, H. Tuch, and S. Winwood, “seL4: Formal Verification of an OS Kernel,” in Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP 2009), Big Sky, MT, Oct. 2009, pp. 207–220.

[5] R. Gu, Z. Shao, H. Chen, X. N. Wu, J. Kim, V. Sjöberg, and D. Costanzo, “CertiKOS: An Extensible Architecture for Building Certified Concurrent OS Kernels,” in Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2016), Savannah, GA, Nov. 2016, pp. 653–669.

[6] “The Coq Proof Assistant.” http://coq.inria.fr [Accessed: Dec 16, 2020]

[7] S.-W. Li, J. S. Koh, and J. Nieh, “Protecting Cloud Virtual Machines from Commodity Hypervisor and Host Operating System Exploits,” in Proceedings of the 28th USENIX Security Symposium (USENIX Security 2019), Santa Clara, CA, Aug. 2019, pp. 1357–1374.

[8] C. Dall and J. Nieh, “KVM/ARM: Experiences Building the Linux ARM Hypervisor,” Department of Computer Science, Columbia University, Technical Report CUCS-010-13, Jun. 2013.

[9] ——, “KVM/ARM: The Design and Implementation of the Linux ARM Hypervisor,” in Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2014), Salt Lake City, UT, Mar. 2014, pp. 333–347.

[10] “Cloud companies consider Intel rivals after the discovery of microchip security flaws,” CNBC, Jan. 2018, https://www.cnbc.com/2018/01/10/cloud-companies-consider-intel-rivals-after-security-flaws-found.html.

[11] C. Williams, “Microsoft: Can’t wait for ARM to power MOST of our cloud data centers! Take that, Intel! Ha! Ha!” The Register, Mar. 2017, https://www.theregister.co.uk/2017/03/09/microsoft_arm_server_followup.

[12] “Introducing Amazon EC2 A1 Instances Powered By New Arm-based AWS Graviton Processors,” Amazon Web Services, Nov. 2018, https://aws.amazon.com/about-aws/whats-new/2018/11/introducing-amazon-ec2-a1-instances.

[13] “ARM Architecture Reference Manual ARMv8, for ARMv8-A architecture profile,” ARM Ltd., ARM DDI 0487A.a, Sep. 2013.

[14] J.-K. Zinzindohoué, K. Bhargavan, J. Protzenko, and B. Beurdouche, “HACL*: A Verified Modern Cryptographic Library,” in Proceedings of the 2017 ACM Conference on Computer and Communications Security (CCS 2017), Dallas, TX, Oct. 2017, pp. 1789–1806.

[15] J. Graham-Cumming and J. W. Sanders, “On the Refinement of Non-interference,” in Proceedings of Computer Security Foundations Workshop IV, Franconia, NH, Jun. 1991, pp. 35–42.

[16] D. Stefan, A. Russo, P. Buiras, A. Levy, J. C. Mitchell, and D. Mazieres, “Addressing Covert Termination and Timing Channels in Concurrent Information Flow Systems,” in Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming (ICFP 2012), ser. ACM SIGPLAN Notices, vol. 47, no. 9, Sep. 2012, pp. 201–214.

[17] J. A. Goguen and J. Meseguer, “Unwinding and Inference Control,” in Proceedings of the 1984 IEEE Symposium on Security and Privacy (SP 1984), Oakland, CA, Apr. 1984, pp. 75–86.

[18] A. Sabelfeld and A. C. Myers, “A Model for Delimited Information Release,” in Proceedings of the 2nd International Symposium on Software Security (ISSS 2003), Tokyo, Japan, Nov. 2003, pp. 174–191.

[19] P. Stewin and I. Bystrov, “Understanding DMA Malware,” in Proceedings of the 9th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA 2012), Heraklion, Crete, Greece, Jul. 2013, pp. 21–41.

[20] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-party Compute Clouds,” in Proceedings of the 2009 ACM Conference on Computer and Communications Security (CCS 2009), Chicago, IL, Nov. 2009, pp. 199–212.

[21] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-VM Side Channels and Their Use to Extract Private Keys,” in Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS 2012), Raleigh, NC, Oct. 2012, pp. 305–316.

[22] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A Shared Cache Attack That Works Across Cores and Defies VM Sandboxing – and Its Application to AES,” in Proceedings of the 2015 IEEE Symposium on Security and Privacy (SP 2015), San Jose, CA, May 2015, pp. 591–604.

[23] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-Tenant Side-Channel Attacks in Paas Clouds,” in Proceedings of the 2014 ACM Conference on Computer and Communications Security (CCS 2014), Scottsdale, AZ, Nov. 2014, pp. 990–1003.

[24] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-Level Cache Side-Channel Attacks Are Practical,” in Proceedings of the 2015 IEEE Symposium on Security and Privacy (SP 2015), San Jose, CA, May 2015, pp. 605–622.

[25] M. Backes, G. Doychev, and B. Kopf, “Preventing Side-Channel Leaks in Web Traffic: A Formal Approach.” in 20th Annual Network and Distributed System Security Symposium (NDSS 2013), San Diego, CA, Feb. 2013.

[26] K. J. Biba, “Integrity Considerations for Secure Computer Systems,” MITRE, Technical Report MTR-3153, Jun. 1975.

[27] A. Ferraiuolo, A. Baumann, C. Hawblitzel, and B. Parno, “Komodo: Using verification to disentangle secure-enclave hardware from software,” in Proceedings of the 26th ACM Symposium on Operating Systems Principles (SOSP 2017), Shanghai, China, Oct. 2017, pp. 287–305.

[28] R. Gu, Z. Shao, J. Kim, X. N. Wu, J. Koenig, V. Sjöberg, H. Chen, D. Costanzo, and T. Ramananandro, “Certified Concurrent Abstraction Layers,” in Proceedings of the 39th ACM Conference on Programming Language Design and Implementation (PLDI 2018), Philadelphia, PA, Jun. 2018, pp. 646–661.

[29] X. Leroy, “The CompCert Verified Compiler.” https://compcert.org [Accessed: Dec 16, 2020]

[30] E. Bugnion, J. Nieh, and D. Tsafrir, Hardware and Software Support for Virtualization, ser. Synthesis Lectures on Computer Architecture. Morgan and Claypool Publishers, Feb. 2017.

[31] R. Gu, J. Koenig, T. Ramananandro, Z. Shao, X. N. Wu, S.-C. Weng, and H. Zhang, “Deep Specifications and Certified Abstraction Layers,” in Proceedings of the 42nd ACM Symposium on Principles of Programming Languages (POPL 2015), Mumbai, India, Jan. 2015, pp. 595–608.

[32] R. Keller, “Formal Verification of Parallel Programs,” Communications of the ACM, vol. 19, pp. 371–384, Jul. 1976.

[33] C. Jones, “Tentative Steps Toward a Development Method for Interfering Programs.” ACM Transactions on Programming Languages and Systems (TOPLAS), vol. 5, pp. 596–619, Oct. 1983.

[34] T. Murray, D. Matichuk, M. Brassil, P. Gammie, T. Bourke, S. Seefried, C. Lewis, X. Gao, and G. Klein, “seL4: From General Purpose to a Proof of Information Flow Enforcement,” in Proceedings of the 2013 IEEE Symposium on Security and Privacy (SP 2013), San Francisco, CA, May 2013, pp. 415–429.

[35] D. Costanzo, Z. Shao, and R. Gu, “End-to-End Verification of Information-Flow Security for C and Assembly Programs,” in Proceedings of the 37th ACM Conference on Programming Language Design and Implementation (PLDI 2016), Santa Barbara, CA, Jun. 2016, pp. 648–664.

[36] H. Sigurbjarnarson, L. Nelson, B. Castro-Karney, J. Bornholt, E. Torlak, and X. Wang, “Nickel: A Framework for Design and Verification of Information Flow Control Systems,” in Proceedings of the 13th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2018), Carlsbad, CA, Oct. 2018, pp. 287–305.

[37] “ARM System Memory Management Unit Architecture Specification - SMMU architecture version 2.0,” ARM Ltd., Jun. 2016.

[38] X. Chen, T. Garfinkel, E. C. Lewis, P. Subrahmanyam, C. A. Waldspurger, D. Boneh, J. Dwoskin, and D. R. Ports, “Overshadow: A Virtualization-based Approach to Retrofitting Protection in Commodity Operating Systems,” in Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2008), Seattle, WA, Mar. 2008, pp. 2–13.

[39] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel, “InkTag: Secure Applications on an Untrusted Operating System,” in Proceedings of the 18th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2013), Houston, TX, Mar. 2013, pp. 265–278.

[40] “ARM Power State Coordination Interface,” ARM Ltd., ARM DEN 0022D, Apr. 2017.

[41] Y. Kuperman, E. Moscovici, J. Nider, R. Ladelsky, A. Gordon, and D. Tsafrir, “Paravirtual Remote I/O,” in Proceedings of the 21st International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2016), Atlanta, GA, 2016, pp. 49–65.

[42] R. Russell, “virtio: Towards a De-Facto Standard for Virtual I/O Devices,” SIGOPS Operating Systems Review, vol. 42, no. 5, pp. 95–103, Jul. 2008.

[43] “Tuning KVM.” http://www.linux-kvm.org/page/Tuning_KVM [Accessed: Dec 16, 2020]

[44] “Disk Cache Modes,” ch. SP5 Virtualization Guide. https://documentation.suse.com/sles/12-SP4/html/SLES-all/cha-cachemodes.html

[45] S. Hajnoczi, “An Updated Overview of the QEMU Storage Stack,” in SUSE, Dec. 2020, LinuxCon Japan 2011, Yokohama, Japan, Jun. 2011.

[46] C. Dall, S.-W. Li, J. T. Lim, J. Nieh, and G. Koloventzos, “ARM Virtualization: Performance and Architectural Implications,” in Proceedings of the 43rd International Symposium on Computer Architecture (ISCA 2016), Seoul, South Korea, Jun. 2016, pp. 304–316.

[47] C. Dall, S.-W. Li, and J. Nieh, “Optimizing the Design and Implementation of the Linux ARM Hypervisor,” in Proceedings of the 2017 USENIX Annual Technical Conference (USENIX ATC 2017), Santa Clara, CA, Jul. 2017, pp. 221–234.

[48] “KVM Unit Tests.” https://www.linux-kvm.org/page/KVM-unit-tests