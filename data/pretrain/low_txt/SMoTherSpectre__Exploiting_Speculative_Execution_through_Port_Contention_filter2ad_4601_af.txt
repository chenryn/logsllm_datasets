### References

1. Lipp, S., Mangard, T., Prescher, M., Schwarz, M., & Yarom, Y. (2018). Spectre Attacks: Exploiting Speculative Execution. In *IEEE Symposium on Security and Privacy*.

2. Koruyeh, E. M., Khasawneh, K. N., Song, C., & Abu-Ghazaleh, N. (2018). Spectre Returns! Speculation Attacks using the Return Stack Buffer. In *USENIX Workshop On Offensive Technologies*.

3. Laukemann, J., Hammer, J., Hofmann, J., Hager, G., & Wellein, G. (2018). Automated Instruction Stream Throughput Prediction for Intel and AMD Microarchitectures. *arXiv preprint arXiv:1809.00912*.

4. Lipp, M., Schwarz, M., Gruss, D., Prescher, T., Haas, W., Fogh, A., Horn, J., Mangard, S., Kocher, P., Genkin, D., Yarom, Y., & Hamburg, M. (2018). Meltdown: Reading Kernel Memory from User Space. In *USENIX Security Symposium*.

5. Maisuradze, G., & Rossow, C. (2018). Ret2Spec: Speculative Execution Using Return Stack Buffers. In *Conference on Computer and Communications Security*.

6. Osvik, D. A., Shamir, A., & Tromer, E. (2006). Cache Attacks and Countermeasures: The Case of AES. In *Topics in Cryptology*.

7. Schwarz, M., Schwarzl, M., Lipp, M., & Gruss, D. (2018). NetSpectre: Read Arbitrary Memory over Network. *arXiv preprint arXiv:1807.10535*.

8. Sotirov, A. (2009). Bypassing memory protections: The future of exploitation. In *USENIX Security*.

9. Torvalds, L. (2018). Linus on Spectre/Meltdown mitigations. *LKML*. Retrieved from https://lkml.org/lkml/2018/1/21/192.

10. Tromer, E., Osvik, D. A., & Shamir, A. (2010). Efficient Cache Attacks on AES, and Countermeasures. *Journal of Cryptology*.

11. Turner, P. (2018). Retpoline: a software construct for preventing branch-target-injection. *Google Support*. Retrieved from https://support.google.com/faqs/answer/7625886.

12. Van Bulck, J., Minkin, M., Weisse, O., Genkin, D., Kasikci, B., Piessens, F., Silberstein, M., Wenisch, T. F., Yarom, Y., & Strackx, R. (2018). Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution. In *USENIX Security Symposium*.

13. Wang, Z., & Lee, R. B. (2006). Covert and Side Channels Due to Processor Architecture. In *Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC '06)*. IEEE Computer Society, Washington, DC, USA, 473–482. https://doi.org/10.1109/ACSAC.2006.20.

14. Yarom, Y., & Falkner, K. (2014). FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-channel Attack. In *USENIX Security Symposium*.

15. Zhang, Y., Juels, A., Reiter, M. K., & Ristenpart, T. (2012). Cross-VM side channels and their use to extract private keys. In *ACM Conference on Computer and Communications Security (CCS '12)*, Raleigh, NC, USA, October 16-18, 2012. ACM, 305–316. https://doi.org/10.1145/2382196.2382230.

### Gadgets Leaking 21 Bits of RAX

The following table lists parts of SMoTher-gadgets that can be used to leak 21 bits of information from `rax`. The library in which each gadget was found is also indicated.

| Address | Comparison Instruction | Library |
|---------|------------------------|---------|
| 0xd3900 | `test 0x1, al`          | glibc   |
| 0x1101cb| `test 0x2, al`          | glibc   |
| 0x12f779| `and 0x4, al`           | glibc   |
| 0x29709 | `and 0x8, al`           | glibc   |
| 0x126500| `and 0x10, al`          | glibc   |
| 0x7e83  | `and 0x20, al`          | ld      |
| 0xc378e | `and 0x40, al`          | glibc   |
| 0xd7e50 | `and 0x80, eax`         | glibc   |
| 0x12cad9| `test 0x2, ah`          | stdc++  |
| 0xf1794 | `test 0x307, ax`        | libcrypto|
| 0x5f661 | `and 0x2100, eax`       | glibc   |
| 0x11c7f6| `and 0x2abd, eax`       | glibc   |
| 0x10ca11| `and 0x8000, eax`       | libcrypto|
| 0x17bcd4| `test 0x100000, eax`    | ssl     |
| 0x268de | `test 0x200000, eax`    | glibc   |
| 0xbe656 | `and 0x3084a5, eax`     | ssl     |
| 0x26f20 | `test 0x800000, eax`    | glibc   |
| 0xb3ba0 | `test 0x1000000, eax`   | pthread |
| 0xb7db  | `test 0x40000000, eax`  | ssl     |
| 0x50e7b | `test 0x80000000, eax`  | libcrypto|
| 0xa6133 | `test 0x83000002, eax`  | libcrypto|

### OpenSSL Attack Gadgets

#### B.1 SMoTher Gadget

The following gadget leaks the 3rd least significant bit (LSB) from the byte at offset 1 from the pointer in `rdx`.

```assembly
f5393: ...
f539a: ...
f539c: ...
f53a3: ...
f53a9: ...
f53ad: ...
f53af: ...
...
f5382: ...
f5386: ...
f538a: ...
```

### OpenSSH Attack Gadgets

#### C.1 SMoTher Gadget with `rdi` Pointer

The following gadget leaks the least significant bit (LSB) from the byte at offset 1 from the pointer in `rdi`.

```assembly
6f8dc: ...
6f8e2: ...
6f8e4: ...
6f8e8: ...
6f8ec: ...
6f8ef: ...
6f8f2: ...
6f8f6: ...
6f8fa: ...
```

#### C.2 SMoTher Gadgets with `r12` Pointer

The following gadget leaks the 5th least significant bit (LSB) from the byte at offset 56 from the pointer in `r12`.

```assembly
e8577: ...
e857d: ...
e8583: ...
e8587: ...
e8588: ...
e858a: ...
e858c: ...
e858f: ...
e8592: ...
e8595: ...
e8598: ...
e859b: ...
...
e8608: ...
e860c: ...
e860d: ...
e860f: ...
```

The following gadget leaks the 4th least significant bit (LSB) from the byte at offset 12 from the pointer in `r12`.

```assembly
5220e: ...
52214: ...
52216: ...
52218: ...
5221a: ...
...
52221: ...
52224: ...
52228: ...
5222c: ...
```

The following gadget leaks the 4th least significant bit (LSB) from the byte at offset 13 from the pointer in `r12`.

```assembly
529a2: ...
529a8: ...
529ae: ...
529b5: ...
529b9: ...
...
523da: ...
523e1: ...
523e3: ...
```

### Responsible Disclosure

The attacks presented in this paper were disclosed to Intel, OpenSSL, and AMD in late 2018.

---

**© Copyright International Business Machines Corporation and EPFL 2019. All Rights Reserved.**

**Printed in the United States of America (09/19/2019)**

The following are trademarks of International Business Machines Corporation in the United States, or other countries, or both:
- IBM
- IBM Research
- IBM Z
- POWER

Other company, product, and service names may be trademarks or service marks of others. All information contained in this document is subject to change without notice. The products described in this document are NOT intended for use in implantation, life support, space, nuclear, or military applications where malfunction may result in injury or death to persons. The information contained in this document does not affect or change IBM product specifications or warranties. Nothing in this document shall operate as an express or implied license or indemnity under the intellectual property rights of IBM or third parties. All information contained in this document was obtained in specific environments and is presented as an illustration. The results obtained in other operating environments may vary. THE INFORMATION CONTAINED IN THIS DOCUMENT IS PROVIDED ON AN "AS IS" BASIS. In no event will IBM be liable for damages arising directly or indirectly from any use of the information contained in this document.

**IBM Corporation**
New Orchard Road
Armonk, NY 10504