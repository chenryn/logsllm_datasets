### Resilience and Self-Repair in Distributed Systems

#### Figure 15: Resilience and Self-Repair after a Dramatic Crash or Large Node Injection
- **(a) Half the Nodes Crash (represented with a dashed line)**: The topology is completely broken.
- **(b) After 3 Rounds**: The system’s structure has been reestablished.
- **(c) After Reinjecting the Crashed Nodes**: The original structural invariant has been lost.
- **(d) After Just 3 Rounds**: The system returns to the original target, even faster than during the initial bootstrap phase.

### Related Work

**TineeLime [9] and TOTA (Tuple On The Air) [23]**: These systems are more dynamic and use tuple-spaces, which are high-level coordination models. Tuple-spaces are not primarily designed for organizing a large number of pre-existing entities, as PLEIADES does.

**Neighborhood Primitives**:
- **Hood [40]**, **Abstract Regions [39]**, and **Logical Neighborhoods [29]** provide scoping mechanisms that limit communication to sets of nodes (regions or neighborhoods) selected based on various criteria. These approaches are complementary to tuple-spaces and could be used to refine the shape joining mechanism in PLEIADES.

**Fragmented Objects [19], [22]**: In this model, a component's state is distributed (fragmented) among multiple nodes, allowing for concurrent execution. Fragmented objects can extend or retract based on system needs using code mobility and state transfer. However, existing implementations are often heavy-weight and rely on Remote Procedure Calls (RPC), which are not well-suited for loosely coupled, large-scale systems.

**Holons [3]**: PLEIADES can also be seen as an example of the high-level capabilities proposed by Blair et al. for Holons, a new paradigm for programming large-scale distributed systems that relies on autonomous self-organization and opportunistic interactions.

### Conclusion and Future Work

**Large-Scale Distributed Systems**:
- **Challenge**: Specifying and implementing resilient and scalable distributed systems is increasingly challenging.
- **PLEIADES Framework**: We introduced PLEIADES, a framework that follows a programming-by-assembly design and leverages self-organizing overlays. PLEIADES considers elementary shapes as collective distributed entities and enables the creation of resilient, scalable, and complex distributed structural invariants.

**Key Features**:
- **Recovery**: PLEIADES can recover from catastrophic failures, such as the loss of a majority of nodes, in just a few rounds while consuming minimal bandwidth.
- **Scalability**: The system scales logarithmically with the number of nodes and nearly linearly with the number of elementary shapes.

**Future Work**:
- **Domain Specific Language (DSL)**: We are designing a DSL to simplify the programming of complex, reliable, large-scale distributed systems and to enhance the programming-by-assembly approach.
- **Integration with Kubernetes**: We are integrating PLEIADES with Kubernetes to augment its basic structural properties.

### Acknowledgments

This work was partially funded by the PAMELA (ANR-16-CE23-0016) and O’Browser (ANR-16-CE25-0005) projects of the French Agence Nationale de la Recherche (ANR), and by the DeSceNt project granted by the Labex CominLabs excellence laboratory of the French ANR (ANR-10-LABX-07-01). It also received funding from CHIST-ERA under project DIONASYS, from the Swiss National Science Foundation (SNSF) and ANR.

### References

[1] R. Baraglia, P. Dazzi, M. Mordacchini, and L. Ricci. A peer-to-peer recommender system for self-emerging user communities based on gossip overlays. J. of Comp. and System Sciences, 79(2), 2013.

[2] M. Bertier, D. Frey, R. Guerraoui, A.-M. Kermarrec, and V. Leroy. The gossple anonymous social network. In Middleware, 2010.

[3] G. Blair, Y.-D. Bromberg, G. Coulson, Y. Elkhatib, L. Réveillère, H. B. Ribeiro, E. Rivière, and F. Taïani. Holons: Towards a systematic approach to composing systems of systems. In Int. Workshop on Adaptive and Reflective Middleware, ARM, 2015.

[4] P. Bonnet, J. Gehrke, and P. Seshadri. Towards sensor database systems. In MDM ’01: Second International Conference on Mobile Data Management, pages 3–14, London, UK, 2001. Springer-Verlag.

[5] S. Bouget, H. Kervadec, A.-M. Kermarrec, and F. Taïani. Polystyrene: The decentralized data shape that never dies. In 2014 IEEE 34th ICDCS, pages 288–297. IEEE, 2014.

[6] E. Bruneton, T. Coupaye, M. Leclercq, V. Quéma, and J.-B. Stefani. The FRACTAL component model and its support in Java. S:P&E, 2006.

[7] B. Burns, B. Grant, D. Oppenheimer, E. Brewer, and J. Wilkes. Borg, Omega, and Kubernetes. Communications of the ACM, 59(5), 2016.

[8] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong. Freenet: A distributed anonymous information storage and retrieval system. In Designing Privacy Enhancing Technologies, pages 46–66, 2001.

[9] P. Costa, L. Mottola, A. L. Murphy, and G. P. Picco. Programming wireless sensor networks with the TeenyLime middleware. In Middleware, 2007.

[10] H. Deng and J. Xu. CorePeer: A P2P Mechanism for Hybrid CDN-P2P Architecture, pages 278–286. 2013.

[11] A. Deshpande and S. Madden. Mauvedb: supporting model-based user views in database systems. In Proceedings of the 2006 ACM SIGMOD international conference on Management of data. ACM, 2006.

[12] D. Gelernter. Generative communication in linda. ACM Trans. Program. Lang. Syst., 7(1):80–112, 1985.

[13] L. Glendenning, I. Beschastnikh, A. Krishnamurthy, and T. Anderson. Scalable consistency in Scatter. Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles, pages 15–28, 2011.

[14] R. Gummadi, O. Gnawali, and R. Govindan. Macro-programming wireless sensor networks using kairos. In International Conference on Distributed Computing in Sensor Systems (DCOSS), 2005.

[15] B. Hindman, A. Konwinski, M. Zaharia, A. Ghodsi, A. D. Joseph, R. Katz, S. Shenker, and I. Stoica. Mesos: A Platform for Fine-grained Resource Sharing in the Data Center. In Proceedings of the 8th USENIX Conference on Networked Systems Design and Implementation, NSDI’11. USENIX Association, 2011.

[16] Q. Huang, K. Birman, R. van Renesse, W. Lloyd, S. Kumar, and H. C. Li. An analysis of Facebook photo caching. In SOSP, 2013.

[17] M. Jelasity, A. Montresor, and O. Babaoglu. T-Man: Gossip-based fast overlay topology construction. Computer Networks, 53(13), Aug. 2009.

[18] M. Jelasity, S. Voulgaris, R. Guerraoui, A.-M. Kermarrec, and M. Van Steen. Gossip-based peer sampling. ACM TOCS, 25(3):8, 2007.

[19] R. Kapitza, J. Domaschka, F. J. Hauck, H. P. Reiser, and H. Schmidt. Formi: Integrating adaptive fragmented objects into Java RMI. IEEE Distributed Systems Online, 7(10), 2006.

[20] A.-M. Kermarrec, L. Massoulie, and A. Ganesh. Probabilistic reliable dissemination in large-scale systems. IEEE TPDS, 14(3), 2003.

[21] S. R. Madden, M. J. Franklin, J. M. Hellerstein, and W. Hong. Tinydb: an acquisitional query processing system for sensor networks. ACM Trans. Database Syst., 30(1):122–173, 2005.

[22] M. Makpangou, Y. Gourhant, J.-P. Le Narzul, and M. Shapiro. Fragmented objects for distributed abstractions. In Readings in Distributed Computing Systems. July 1994.

[23] M. Mamei and F. Zambonelli. Programming pervasive and mobile computing applications: the tota approach. ACM TSEM, 2009.

[24] G. Mega, A. Montresor, and G. P. Picco. Efficient dissemination in decentralized social networks. In P2P, 2011.

[25] D. Merkel. Docker: lightweight Linux containers for consistent development and deployment. Linux Journal, 2014(239):2, 2014.

[26] MongoDB Inc. Sharded Cluster Query Routing. https://docs.mongodb.com/manual/core/sharded-cluster-query-router/. MongoDB Manual, accessed 11 May 2016, (version 3.2).

[27] A. Montresor and M. Jelasity. PeerSim: A scalable P2P simulator. In P2P, 2009.

[28] A. Montresor, M. Jelasity, and O. Babaoglu. Chord on demand. In Proc. of the IEEE Int. Conf. on Peer-to-Peer Comp (P2P’05). IEEE, 2005.

[29] L. Mottola and G. P. Picco. Programming wireless sensor networks with logical neighborhoods. In InterSense ’06: Proceedings of the first international conference on Integrated internet ad hoc and sensor networks, New York, NY, USA, 2006. ACM.

[30] R. Newton, G. Morrisett, and M. Welsh. The regiment macroprogramming system. In IPSN ’07: Proceedings of the 6th international conference on Information processing in sensor networks, pages 489–498, New York, NY, USA, 2007. ACM.

[31] I. Stoica, R. Morris, D. Liben-Nowell, D. R. Karger, M. F. Kaashoek, F. Dabek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup protocol for Internet applications. IEEE/ACM Transactions on Networking, 11(1):17–32, 2003.

[32] F. Taiani, S. Lin, and G. Blair. GossipKit: A Unified Component Framework for Gossip. IEEE Trans. on Soft. Eng., 40(2), 2014.

[33] Basho Technologies. Riak KV Usage Reference / V3 Multi-Datacenter Replication Reference: Architecture. accessed 11 May 2016, http://docs.basho.com/riak/kv/2.1.4/using/reference/v3-multi-datacenter/architecture/.

[34] J. Thones. Microservices. Software, IEEE, 32(1):116–116, 2015.

[35] A. Verma, L. Pedrosa, M. Korupolu, D. Oppenheimer, E. Tune, and J. Wilkes. Large-scale cluster management at Google with Borg. In EuroSys. ACM, 2015.

[36] S. Voulgaris and M. v. Steen. Epidemic-style management of semantic overlays for content-based searching. In Euro-Par 2005 Parallel Processing. Springer Berlin Heidelberg, 2005.

[37] S. Voulgaris and M. van Steen. Vicinity: A pinch of randomness brings out the structure. In Middleware 2013, pages 21–40. Springer, 2013.

[38] S. A. Weil, S. A. Brandt, E. L. Miller, and C. Maltzahn. CRUSH: Controlled, scalable, decentralized placement of replicated data. In Proceedings of the 2006 ACM/IEEE Conference on Supercomputing, SC ’06, New York, NY, USA, 2006. ACM.

[39] M. Welsh and G. Mainland. Programming sensor networks using abstract regions. In First USENIX/ACM Symposium on Networked Systems Design and Implementation (NSDI ’04), pages 29–42, 2004.

[40] K. Whitehouse, C. Sharp, E. Brewer, and D. Culler. Hood: a neighborhood abstraction for sensor networks. In MobiSys, 2004.

[41] H. Yin, X. Liu, T. Zhan, V. Sekar, F. Qiu, C. Lin, H. Zhang, and B. Li. LiveSky: Enhancing CDN with P2P. ACM Trans. on Multimedia Comp. Comm. & App., 6:16:1–16:19, 2010.