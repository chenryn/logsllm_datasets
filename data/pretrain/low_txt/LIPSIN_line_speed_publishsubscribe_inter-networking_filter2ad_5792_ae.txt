# Performance Evaluation

PGAs (Programmable Gate Arrays) were tested with packet transmission rates ranging from zero (direct wire) to three. Packets were sent at a rate of 25 packets per second, with both sending and receiving functions implemented directly in the FreeBSD kernel. The delay introduced by the Bloom filter matching code is 56 nanoseconds (7 clock cycles), which is negligible compared to the 3 microseconds delay of the entire NetFPGA processing. In the presence of background traffic, the average latency per NetFPGA increased to 5 microseconds.

To assess the achievable throughput, we compared our implementation with the Stanford reference router. This comparison was quantified by measuring the processing times of ICMP echo requests through a plain wire, our implementation, and the reference IP router with five entries in the forwarding table. To mitigate the high deviation caused by sending and receiving ICMP packets and involving user-level processing, we averaged the results over 100,000 samples. The results are presented in Table 5.

Although we did not directly measure the bandwidth due to the lack of test equipment to reliably fill the pipes, there is no reason to believe that the implementation would not operate at full bandwidth. The code is straightforward and should be capable of keeping the pipeline full under all conditions.

**Table 5: Ping Through Various Implementations**

| Path          | Avg. Latency (μs) | Std. Dev. (μs) |
|---------------|-------------------|----------------|
| Plain Wire    | 94                | 28             |
| IP Router     | 102               | 44             |
| LIPSIN        | 96                | 28             |

## Related Work

Related work can be categorized into several areas, which are briefly discussed below.

### Network Level Multicast

Our basic communication scheme is functionally similar to IP-based source-specific multicast (SSM) [19], with IP multicast groups replaced by topic identifiers. The main difference is that we support stateless multicast for sparse subscriber groups, with unicast being a special case of multicast. IP multicast typically creates a lot of state in the network when supporting a large set of small multicast groups.

In "Revisiting IP multicast" [31], Ratnasamy et al. propose using source border routers to include an 800-bit Bloom-filter-based shim header (TREE_BF) in packets. TREE BFs represent AS-level paths of the form ASa:ASb in the dissemination tree of multicast packets. Additionally, a second type of Bloom filters is used to aggregate active intra-domain multicast groups piggybacked in BGP updates. The method uses standard IP-based forwarding mechanisms enriched with the built-in TREE BF for inter-domain forwarding decisions. However, our multicast fabric uses the in-packet Bloom filter directly for forwarding decisions, eliminating the need for IP addresses and proposing Link IDs as a generic indirection primitive.

### Explicit Routing

The simplest form of source routing [37] involves concatenating the forwarding nodes' network identifiers on the path between senders and receivers. Our approach addresses the main caveats of source routing, including the overhead of carrying all routing information in the packet. Moreover, our approach does not reveal node or link identifiers, even to the sending nodes, nor the sequence or exact number of hops involved.

GMPLS [26] is marketed as a solution for fast forwarding by separating control and forwarding planes, introducing more flexibility and promising performance gains with hardware-based fast label switching. However, it does not scale well for massive multicast due to the limited label space and lack of label aggregation capability.

In PoMo [29], Poutievski, Calvert, and Griffioen suggest an approach that trades overdeliveries for reduced state and reduced dependence on node network locators. In [10], the same authors propose an architectural approach with link identities playing a pivotal role.

### Routing and Forwarding with Bloom Filters

Multiple flavors of Bloom filters [9] have been proposed to assist the forwarding operations of various systems (e.g., P2P, WSN, pub/sub). In content-based pub/sub [21], Bloom filters are used to represent a conjunction of subscriptions' predicates (SBSTree) for content-based event forwarding. In contrast, our pub/sub primitives are topic-based, and the Bloom filters are built into packets to carry link IDs rather than summarized subscriptions stored in network elements. Other forms of in-packet Bloom filters include the loop detection mechanism in Icarus [43], credentials-based data path authentication in [44], and the aforementioned AS-level path representation for IP multicast [31].

## Implementation

There are currently two partial prototypes of the system. The FreeBSD-based end-node prototype consists of approximately 10,000 lines of C code, implementing both the pub/sub subsystem and the forwarding fabric. Our NetFPGA-based forwarding node prototype has about 390 lines of Verilog, implementing the main ideas from this paper. In this section, we briefly describe the implementation details and present early measurements of the NetFPGA forwarding module.

### End Node

The structure of the end-node prototype is depicted in Figure 8. The I/O module implements a few new system calls for creating new publications (reserving memory areas), publishing, and subscribing. When allocating memory for a publication, the pager is set to be a vnode pager, and the backing file is in the Filesystem in Userspace (FUSE) [38]. Each publication is backed up by a virtual file located in a separate virtual file system running under FUSE.

Currently, forwarding and other network traffic are handled in separate threads within the Pub/Sub daemon, simply sending and receiving raw Ethernet frames with libnet and libpcap. Ethernet frames are always broadcasted, essentially using each Ethernet cable as a point-to-point link, disregarding any Ethernet bridging or switching.

### Forwarding Node

We have implemented an early prototype of a forwarding node using Stanford NetFPGA [25]. Starting from the Stanford reference switch implementation, we removed most of the unnecessary code in the reference pipeline and replaced it with a simple zFilter switch. At this point, we have implemented the basic LIT and virtual link ideas, and tested it with 4 real and 4 virtual LITs per interface. With this configuration, the total usage of NetFPGA resources for the logic is 4,891 4-input LUTs out of 47,232, and 1,861 Slice Flip/Flops (FF) out of 47,232. No BRAMs are reserved. For the whole system, the corresponding numbers are 20,273 LUTs, 15,347 FFs, and 106 BRAMs.

## Conclusions

Building on the idea of placing a Bloom filter into data packets, we have proposed a new forwarding fabric for multicast traffic. With reasonably small headers, comparable to those of IPv6, we can handle the large majority of Zipf-distributed multicast groups, up to some 20 subscribers, in realistic metropolitan-sized topologies, without adding any state in the network and with negligible forwarding overhead. For the remainder of the traffic, the approach provides the ability to balance between stateless multiple sending and stateful approaches. With the stateful approach, we can handle dense multicast groups with very good forwarding efficiency. The forwarding decisions are simple, energy-efficient, parallelized in hardware, and have appealing security properties. All these attributes make our work, in its current form, a potential choice for data-center applications.

While much work remains, the results indicate that it may be feasible to support Internet-wide massive multicast in a scalable manner. Technically, the main remaining obstacles are related to determining the right local delivery tree for traffic arriving from outside of a domain. Our current proposal scales only linearly. The problems related to deployment and business aspects are likely to be even harder but fall beyond the scope of this paper.

From a broader perspective, support for massive multicast is just one component needed for Internet-wide publish/subscribe. The other two components, data-oriented naming and in-network caching, were touched upon only indirectly. However, we hope that our work allows others to build upon it, enabling experimentation with network architectures that are fundamentally different from the currently deployed ones.

## Acknowledgements

This research was supported by the EU’s PSIRP project (FP7-INFSO-IST 216173). The authors thank the SIGCOMM reviewers and our shepherd Jon Crowcroft for their comments that helped to improve the paper. We also thank NomadicLab’s implementation team for their efforts.

## References

[1] Rocketfuel ISP topology data.
http://www.cs.washington.edu/research/networking/rocketfuel/maps/weights-dist.tar.gz.

[2] B. Ahlgren, L. Eggert, A. Feldmann, A. Gurtov, and T. R. Henderson. Naming and addressing for next-generation internetworks. Technical report, Dagstuhl, 2007.

[3] M. Balakrishnan, K. Birman, A. Phanishayee, and S. Pleisch. Ricochet: Lateral Error Correction for Time-Critical Multicast. In NSDI’ 07, 2007.

[4] B. Bhargava, E. Mafla, and J. Riedl. Communication in the Raid distributed database system. Comput. Netw. ISDN Syst., 1991.

[5] K. Birman, M. Balakrishnan, D. Dolev, T. Marian, K. Ostrowski, and A. Phanishayee. Scalable Multicast Platforms for a New Generation of Robust Distributed Applications. In COMSWARE’ 07, 2007.

[6] B. H. Bloom. Space/time trade-offs in hash coding with allowable errors. Commun. ACM, 1970.

[7] R. Boivie, N. Feldman, Y. Imai, W. Livens, and D. Ooms. Explicit multicast (Xcast) concepts and options. IETF RFC 5058, 2007.

[8] R. Briscoe. The implications of pervasive computing on network design. BT Technology Journal, 22(3):170–190, 2004.

[9] A. Z. Broder and M. Mitzenmacher. Survey: Network applications of Bloom filters: A survey. Internet Mathematics, 2004.

[10] K. L. Calvert, J. Griffioen, and L. Poutievski. Separating Routing and Forwarding: A Clean-Slate Network Layer Design. In In proc. of the Broadnets Conf., 2007.

[11] M. Cha, P. Rodriguez, S. Moon, and J. Crowcroft. On next-generation telco-managed P2P TV architectures. In IPTPS ’08, 2008.

[12] J. Day. Patterns in Network Architecture: A Return to Fundamentals. Prentice Hall, 2008.

[13] S. E. Deering and D. Cheriton. Multicast routing in datagram internetworks and extended LANs. ACM Trans. on Comp. Syst., 1990.

[14] F. Dogar, A. Phanishayee, H. Pucha, O. Ruwase, and D. Andersen. Ditto - A System for Opportunistic Caching in Multi-hop Wireless Mesh Networks. In ACM Mobicom, 2008.

[15] P. T. Eugster, P. A. Felber, R. Guerraoui, and A.-M. Kermarrec. The many faces of publish/subscribe. ACM Comput. Surv., 2003.

[16] P. Faratin, D. Clark, P. Gilmore, S. Bauer, A. Berger, and W. Lehr. Complexity of Internet interconnections: Technology, incentives and implications for policy. In TPRC’ 07, 2007.

[17] P. Gill, M. Arlitt, Z. Li, and A. Mahanti. YouTube Traffic Characterization: A View From the Edge. In ACM SIGCOMM IMC’07., 2007.

[18] A. Gulli and A. Signorini. The indexable web is more than 11.5 billion pages. In WWW ’05, 2005.

[19] H. Holbrook and B. Cain. Source-specific multicast for IP. RFC 4607. 2006.

[20] J.D. Touch and V.K. Pingali. The RNA metaprotocol. In ICCCN ’08, 2008.

[21] Z. Jerzak and C. Fetzer. Bloom filter based routing for content-based publish/subscribe. In DEBS ’08, 2008.

[22] H. T. Kaur, S. Kalyanaraman, A. Weiss, S. Kanwar, and A. Gandhi. Bananas: an evolutionary framework for explicit and multipath routing in the internet. SIGCOMM Comput. Commun. Rev., 2003.

[23] T. Koponen, M. Chawla, B.-G. Chun, A. Ermolinskiy, K. H. Kim, S. Shenker, and I. Stoica. A data-oriented (and beyond) network architecture. In SIGCOMM ’07, 2007.

[24] H. Liu, V. Ramasubramanian, and E. G. Sirer. Client behavior and feed characteristics of RSS, a publish-subscribe system for web micronews. In IMC’05, 2005.

[25] J. W. Lockwood, N. McKeown, G. Watson, G. Gibb, P. Hartke, J. Naous, R. Raghuraman, and J. Luo. NetFPGA–an open platform for gigabit-rate network switching and routing. In MSE ’07, 2007.

[26] E. Mannie. Generalized Multi-Protocol Label Switching (GMPLS) Architecture. RFC 3945, 2004.

[27] A. Markopoulou, G. Iannaccone, S. Bhattacharyya, C. Chuah, and C. Diot. Characterization of failures in an IP backbone. In INFOCOM 2004, 2004.

[28] S. Orlowski, M. Pióro, A. Tomaszewski, and R. Wessäly. SNDlib 1.0–Survivable Network Design Library. In INOC’ 07, 2007.

[29] L. B. Poutievski, K. L. Calvert, and J. N. Griffioen. Routing and forwarding with flexible addressing. Journal Of Communication and Networks, 2007.

[30] J. Rajahalme, M. Särelä, P. Nikander, and S. Tarkoma. Incentive-compatible caching and peering in data-oriented networks. In ReArch’08, 2008.

[31] S. Ratnasamy, A. Ermolinskiy, and S. Shenker. Revisiting IP multicast. In SIGCOMM’06, 2006.

[32] M. Särelä, T. Rinta-aho, and S. Tarkoma. RTFM: Publish/subscribe internetworking architecture. ICT Mobile Summit, 2008.

[33] J. Scott, J. Crowcroft, P. Hui, and C. Diot. Haggle: a networking architecture designed around mobile users. In Annual IFIP Conference on Wireless On-demand Network Systems and Services, 2006.

[34] A. Sharma, A. Bestavros, and I. Matta. dPAM: a distributed prefetching protocol for scalable asynchronous multicast in P2P systems. In INFOCOM’ 05, 2005.

[35] R. Sherwood, A. Bender, and N. Spring. Discarte: a disjunctive Internet cartographer. SIGCOMM Comput. Commun. Rev., 2008.

[36] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana. Internet indirection infrastructure. In SIGCOMM’02, 2002.

[37] C. A. Sunshine. Source routing in computer networks. SIGCOMM Comput. Commun. Rev., 1977.

[38] M. Szeredi. Filesystem in Userspace. Located at http://fuse.sourceforge.net.

[39] S. Tarkoma, D. Trossen, and M. Särelä. Black boxed rendezvous based networking. In MobiArch ’08, 2008.

[40] N. Tolia, M. Kozuch, M. Satyanarayanan, B. Karp, and T. Bressoud. Opportunistic use of content addressable storage for distributed file systems. In USENIX’ 03, 2003.

[41] D. Trossen (edit.). Architecture definition, component descriptions, and requirements. Deliverable D2.3, PSIRP project, 2009.

[42] Y. Vigfusson, H. Abu-Libdeh, M. Balakrishnan, K. Birman, and Y. Tock. Dr. multicast: Rx for datacenter communication scalability. In HotNets-VII, 2008.

[43] A. Whitaker and D. Wetherall. Forwarding without loops in Icarus. In Proc. of OPENARCH, 2002.

[44] T. Wolf. A credential-based data path architecture for assurable global networking. In IEEE MILCOM, 2007.

[45] A. Zahemszky, A. Csaszar, P. Nikander, and C. Esteve. Exploring the pubsub routing/forwarding space. In International Workshop on the Network of the Future, 2009.