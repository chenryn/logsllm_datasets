### Multi-VM Performance Evaluation

To assess the performance of SeKVM in a multi-VM environment, we compared it with HypSec and unmodified KVM, each running multiple instances of Hackbench. We tested five hypervisor configurations: KVM and SeKVM on Linux v4.18 and v5.4, and HypSec on v4.18 only. To scale the experiment on a Seattle Arm server host, we adjusted the VM and Hackbench configurations. Each VM was configured similarly to our previous experiments, but with reduced resources: two cores and 256 MB of RAM. The Hackbench parameters were modified to run 20 process groups in 500 loops, ensuring successful execution in the more resource-constrained VMs. Full Disk Encryption (FDE) was not used due to the limited memory assigned to each VM.

We measured the performance for 1, 2, 4, 8, 16, and 32 VMs. Figure 7 shows the average results from each VM running on HypSec and SeKVM, normalized to the native execution of one instance of Hackbench using the respective Linux version. There was minimal difference in native execution performance between the kernel versions. The results indicate that SeKVM incurs modest performance overhead over KVM and HypSec, even as the number of VMs scales. While the overhead is higher when running multiple instances of Hackbench compared to a single instance, the relative overhead of SeKVM versus KVM remains small. Notably, although KCore's data race-free implementation does not fully utilize Armv8 relaxed memory behavior, the performance impact on SeKVM is minimal.

### Application Benchmark Performance

Figures 5 and 6 illustrate the relative overhead of executing in a VM under our v4.18 and v5.4 hypervisor configurations. The performance results are normalized to native execution on the respective unmodified Linux kernel, with 1.0 indicating the same performance as native hardware. Lower numbers indicate less overhead. We report results for Apache and MySQL, both with and without TLS/SSL, to show performance with network encryption. Both figures demonstrate that SeKVM has only modest performance overhead compared to unmodified KVM. Figure 5 also shows that SeKVM has comparable performance to HypSec, though HypSec was not available for v5.4, so no HypSec v5.4 measurements are shown in Figure 6. Overall, the measurements indicate that a commodity hypervisor with a verified Trusted Computing Base (TCB) on multiprocessor hardware can achieve excellent performance.

As shown in Figures 5 and 6, flushing the Translation Lookaside Buffer (TLB) during each world switch results in significant performance overhead, especially in I/O-intensive workloads where frequent world switches occur between VMs and the host.

### Related Work

Previous work has verified uniprocessor systems, including seL4 [43], Nickel [59], Serval [54], and Komodo [28]. These approaches cannot be directly applied to verify multiprocessor systems like SeKVM. CertiKOS has verified a series of uniprocessor and multiprocessor OS kernels [9, 10, 13, 31–34], but, like other verified uniprocessor systems, did not model common hardware features such as shared page tables, tagged TLBs, or caches. In contrast, SeKVM is verified on a multiprocessor abstract machine that models these widely-used hardware features.

Various verified systems can be used as hypervisors but are limited in functionality and verification scope. A version of seL4 verifies the functional correctness of some hypervisor features but not the Memory Management Unit (MMU) functionality [2, 42]. CertiKOS verifies the correctness of the mC2 kernel, which provides some virtualization functionality. Both systems lack common hypervisor features such as support for multiprocessor VMs. The üXMHF hypervisor [65, 66] verifies simple properties, such as memory integrity, but does not verify its functional correctness. Unlike SeKVM, the proofs were based on a simple abstract hardware model that does not account for concrete MMU features. The Verisoft team [44] applies the VCC framework [12] to verify Hyper-V, but VCC does not include a realistic hardware model. Only 20% of the hypervisor code is verified for function contracts and type invariants at the source code level, with no guarantees of overall hypervisor behavior. In contrast, SeKVM's security guarantees and TCB are fully verified while supporting commodity hypervisor features inherited from KVM.

We build on our previous work [47, 48] that introduced security-preserving layers and microverification to verify the security guarantees of a KVM hypervisor. Here, we describe for the first time: (1) a new layered hardware model, (2) the construction of a layered implementation of SeKVM's TCB, KCore, (3) how the layered hardware can be used with the layered software to verify KCore's functional correctness in the presence of widely-used multiprocessor hardware features such as tagged TLBs and coherent caches, and (4) how to account for all these hardware features in verifying the security guarantees of SeKVM. We also demonstrate for the first time how both the implementation and verification of SeKVM can be extended to integrate with multiple versions of Linux as a host kernel with modest effort.

Formal shim verification [39] reduces the proof effort in verifying security guarantees about large, untrusted code. Their techniques focus on proving that a small, sequential browser kernel, consisting of a few hundred lines of code, enforces noninterference properties between components running in sandboxes. This approach is insufficient for SeKVM, whose multiprocessor core consists of a few thousand lines of code and leverages hardware virtualization features to implement hypervisor functionality.

Some work [57, 64, 73] has verified the MMU subsystem within an OS kernel. Unlike SeKVM, the verified component does not make any guarantees about the overall system behavior. Other work [62, 63] integrates the specifications of their abstract TLB into the Cambridge Arm model [29], but only uses it for proving the program logic of the system's execution, not the correctness of the actual implementation.

Microhypervisors [35, 60] take a microkernel approach to build clean-slate small hypervisors from scratch. These architectures mitigate vulnerabilities but are not verified to be correct. In contrast, SeKVM retrofits KVM using microkernel principles to reduce its TCB and verifies its implementation, providing verified correctness and security guarantees with full-featured commodity hypervisor functionality. Nested virtualization [70] and special hardware features [7, 37, 68] have been used to protect VM data in memory against an untrusted hypervisor. Privileged code, such as a hypervisor, has been used to protect OS kernels [26, 58, 67] or applications [11, 27, 36, 52, 69] against untrusted software components. Unlike SeKVM, none of these systems verify their TCBs or prove the security properties of their designs.

### Conclusions

We have presented SeKVM, the first formally verified Linux KVM hypervisor. This is achieved using a layered design and verification methodology. We use layers to isolate KVM's TCB into a small core, then construct the core with layers to modularize the proofs, modeling hardware features at different levels of abstraction tailored to each layer of software. We can then gradually refine detailed hardware and software behaviors at lower layers into simpler abstract specifications at higher layers, which can in turn be used to prove security guarantees for the entire hypervisor. Using this approach, we prove the correctness of KVM across two versions of Linux, using a novel layered machine model that accounts for realistic multiprocessor features, including multi-level shared page tables, tagged TLBs, and a coherent cache hierarchy with cache bypass support. The layering requires only modest modifications to KVM and incurs only modest overhead versus unmodified KVM on real application workloads. Our work is the first machine-checked proof of the correctness and security of a commodity hypervisor on multiprocessor server hardware.

### Acknowledgments

Xuheng Li assisted with assembly code and layer refinement proofs. Nathan Dautenhahn provided helpful comments on earlier drafts. This work was supported in part by a Guggenheim Fellowship, DARPA contract N6600121C4018, and NSF grants CCF-1918400, CNS-2052947, and CCF-2124080.

### References

[1] ab - Apache HTTP server benchmarking tool. https://httpd.apache.org/docs/2.4/programs/ab.html [Accessed: Mar 8, 2021].

[2] seL4 Supported Platforms. https://docs.sel4.systems/Hardware [Accessed: Mar 8, 2021].

[3] The Coq Proof Assistant. https://coq.inria.fr [Accessed: Dec 16, 2020].

[4] ARM System Memory Management Unit Architecture Specification - SMMU architecture version 2.0, June 2016.

[5] ARM Ltd. ARM CoreLink MMU-401 System Memory Management Unit Technical Reference Manual, July 2014.

[6] Michael Backes, Goran Doychev, and Boris Kopf. Preventing Side-Channel Leaks in Web Traffic: A Formal Approach. In 20th Annual Network and Distributed System Security Symposium (NDSS 2013), San Diego, CA, February 2013.

[7] Andrew Baumann, Marcus Peinado, and Galen Hunt. Shielding Applications from an Untrusted Cloud with Haven. In Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 2014), pages 267–283, Broomfield, CO, October 2014.

[8] Edouard Bugnion, Jason Nieh, and Dan Tsafrir. Hardware and Software Support for Virtualization. Synthesis Lectures on Computer Architecture. Morgan and Claypool Publishers, February 2017.

[9] Hao Chen, Xiongnan Wu, Zhong Shao, Joshua Lockerman, and Ronghui Gu. Toward Compositional Verification of Interruptible OS Kernels and Device Drivers. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 431–447, 2016.

[10] Hao Chen, Xiongnan Wu, Zhong Shao, Joshua Lockerman, and Ronghui Gu. Toward Compositional Verification of Interruptible OS Kernels and Device Drivers. Journal of Automated Reasoning, 61(1):141–189, 2018.

[11] Xiaoxin Chen, Tal Garfinkel, E. Christopher Lewis, Pratap Subrahmanyam, Carl A. Waldspurger, Dan Boneh, Jeffrey Dwoskin, and Dan R.K. Ports. Overshadow: A Virtualization-based Approach to Retrofitting Protection in Commodity Operating Systems. In Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2008), pages 2–13, Seattle, WA, March 2008.

[12] Ernie Cohen, Markus Dahlweid, Mark Hillebrand, Dirk Leinenbach, Michał Moskal, Thomas Santen, Wolfram Schulte, and Stephan Tobies. VCC: A Practical System for Verifying Concurrent C. In Proceedings of the 22nd International Conference on Theorem Proving in Higher Order Logics (TPHOLs 2009), pages 23–42, Munich, Germany, August 2009.

[13] David Costanzo, Zhong Shao, and Ronghui Gu. End-to-End Verification of Information-Flow Security for C and Assembly Programs. In Proceedings of the 37th ACM Conference on Programming Language Design and Implementation (PLDI 2016), pages 648–664, Santa Barbara, CA, June 2016.

[14] CVE. CVE-2009-3234. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3234, September 2009.

[15] CVE. CVE-2010-4258. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2010-4258, November 2010.

[16] CVE. CVE-2013-1943. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1943, February 2013.

[17] CVE. CVE-2016-9756. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9756, December 2016.

[18] CVE. CVE-2017-17741. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17741, December 2017.

[19] Christoffer Dall. The Design, Implementation, and Evaluation of the Linux ARM Hypervisor. PhD thesis, Columbia University, February 2018.

[20] Christoffer Dall, Shih-Wei Li, Jin Tack Lim, and Jason Nieh. ARM Virtualization: Performance and Architectural Implications. ACM SIGOPS Operating Systems Review, 52(1):45–56, July 2018.

[21] Christoffer Dall, Shih-Wei Li, Jin Tack Lim, Jason Nieh, and Georgios Koloventzos. ARM Virtualization: Performance and Architectural Implications. In Proceedings of the 43rd International Symposium on Computer Architecture (ISCA 2016), pages 304–316, Seoul, South Korea, June 2016.

[22] Christoffer Dall, Shih-Wei Li, and Jason Nieh. Optimizing the Design and Implementation of the Linux ARM Hypervisor. In Proceedings of the 2017 USENIX Annual Technical Conference (USENIX ATC 2017), pages 221–234, Santa Clara, CA, July 2017.

[23] Christoffer Dall and Jason Nieh. KVM/ARM: Experiences Building the Linux ARM Hypervisor. Technical Report CUCS-010-13, Department of Computer Science, Columbia University, June 2013.

[24] Christoffer Dall and Jason Nieh. Supporting KVM on the ARM Architecture. LWN Weekly Edition, pages 18–22, July 2013.

[25] Christoffer Dall and Jason Nieh. KVM/ARM: The Design and Implementation of the Linux ARM Hypervisor. In Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS 2014), pages 333–347, Salt Lake City, UT, March 2014.

[26] Nathan Dautenhahn, Theodoros Kasampalis, Will Dietz, John Criswell, and Vikram Adve. Nested Kernel: An Operating System Architecture for Intra-Kernel Privilege Separation.