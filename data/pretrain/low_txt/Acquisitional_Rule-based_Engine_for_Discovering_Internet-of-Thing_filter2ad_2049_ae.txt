### 4.7 Vulnerability Detection and Patching

From a security perspective, identifying vulnerable online devices is crucial for immediate application of security patches to critical infrastructure. Typically, vulnerabilities in IoT devices are specific to particular models. For example, the buffer overflow vulnerability CVE-2015-4409 affects the Hikvision DS-76xxNI-E1/2 series and Hikvision DS-77xxxNI-E4 series devices.

We developed the VDA (Vulnerability Detection Application) to uncover underlying vulnerable devices. VDA first gathers vulnerability information from the NVD (National Vulnerability Database) [5, 12]. For each vulnerability, VDA extracts vendor and product names. It then uses regular expressions (regex) to match this information with known vulnerability patterns. The application categorizes vulnerabilities and groups similar weaknesses. One vulnerability can often affect multiple platforms and device models. Table 9 lists the Common Weakness Enumeration (CWE) of online IoT devices, where the left column is the CWE ID, the middle column is the weakness description, and the right column is the number of affected IoT devices. The VDA aims to reveal vulnerable devices accessible on the Internet.

#### Discovery

Table 9 highlights that a significant number of vulnerable devices still exist in cyberspace. The top 10 vulnerabilities in the CWE list are primarily related to improper implementation, such as Path Traversal, Credentials Management, and Improper Access Control. These issues could be mitigated with more attention to security during development. Security patches are available on the CVE website, but updating IoT devices is challenging for many users. They must download firmware from official support websites or through administrative tools and then install it into the device's ROM to reprogram integrated chip circuits.

### 7 Related Work

IoT device recognition has gained significant interest due to the increasing number of connected devices. The research community has proposed various recognition techniques, primarily through fingerprinting and banner-grabbing.

#### Fingerprinting

Fingerprinting technologies, which map input to a narrower output for object identification, have evolved over two decades [8, 10, 11, 15, 18, 19, 32, 35, 36, 39]. Fingerprinting can be divided into active and passive methods. Active fingerprinting involves sending probing packets to remote hosts to extract features and infer classification models. A classic example is OS fingerprinting, which identifies the operating system of a remote host based on TCP/IP stack implementations. Nmap [8] is a popular tool for OS fingerprinting, sending 16 crafted packets to extract features. Xprobe [15] uses ICMP packets for OS feature extraction. Snacktime [11], Hershel [36], and Faulds [35] use retransmission time as a feature for large-scale OS fingerprinting. Passive fingerprinting collects traffic or behavior data without sending probing packets. P0f [10] passively fingerprints OS versions by analyzing ongoing TCP packets, while Kohno et al. [32] monitor TCP traffic to calculate clock skews as features.

A typical fingerprinting tool consists of three main components: feature selection, training data collection, and learning algorithms. Previous work focused on selecting distinctive features for OS version identification. However, the lack of training data and the vast number of different IoT device models make traditional fingerprinting techniques impractical for IoT devices. Therefore, we propose ARE, which can automatically learn rules for IoT device identification without any training data or human effort.

#### Banner-Grabbing

Banner-grabbing techniques profile text information from applications and software services. Various tools, such as WhatWeb [14] and Wappalyzer [13], use regex patterns to recognize platform versions and web applications. Nmap [8] also provides a service library for identifying applications and web services. In practice, banner-grabbing is commonly used for annotating IoT devices. For instance, in the analysis of the Mirai botnet [21], regex in banner-grabbing was used to annotate device types, vendors, and products. Xuan et al. [30] proposed using industrial control protocol banners to identify critical infrastructure equipment. Shodan [37] and Censys [25] use banner-grabbing to identify online devices.

Developers typically need background knowledge to write regex/extensions for banner-grabbing, which is time-consuming and hinders large-scale annotation. ARE overcomes these challenges by automatically generating rules.

### 8 Conclusions

As the number of IoT devices connected to the Internet increases, discovering and annotating these devices is essential for administrative and security purposes. In this paper, we propose an Acquisitional Rule-based Engine (ARE) for discovering and annotating IoT devices. ARE automates the rule generation process without human effort or training data. We implemented a prototype of ARE and conducted experiments to evaluate its performance, achieving a precision of 97%. We applied ARE to three application cases: (1) inferring and characterizing millions of IoT devices in the IPv4 space, (2) discovering thousands of compromised IoT devices with malicious behaviors, and (3) revealing hundreds of thousands of IoT devices still vulnerable to attacks.

### Acknowledgments

We thank our shepherd Gang Wang and anonymous reviewers for their insightful feedback. This work was supported in part by the National Key R&D Program of China (Grant No. 2016YFB0801303-1), Key Program of National Natural Science Foundation of China (Grant No. U1766215), and National Natural Science Foundation of China (Grant No. 61602029).

### References

[1] 20.8 billion IoT devices by 2020. https://www.gartner.com/newsroom/id/3598917.
[2] Apache Kafka. https://kafka.apache.org.
[3] Apyori, a simple implementation of Apriori algorithm with Python. https://pypi.python.org/pypi/apyori/1.1.1.
[4] Beautiful Soup, A Python library designed for quick turnaround projects. https://www.crummy.com/software/BeautifulSoup/.
[5] Common Vulnerabilities and Exposures. http://cve.mitre.org/.
[6] Cowrie SSH/Telnet Honeypot. https://github.com/micheloosterhof/cowrie.
[7] Natural language toolkit. http://www.nltk.org/.
[8] Nmap, network security scanner tool. https://nmap.org/.
[9] Nmap service detection probe list. https://github.com/nmap/nmap/blob/master/nmap-service-probes.
[10] P0f: The passive OS and application tool for penetration testing, routine network monitoring, and forensics, 2004. http://freshmeat.net/projects/p0f/.
[11] Snacktime: A perl solution for remote OS fingerprinting.
[12] U.S. National Institute of Standards and Technology. National Vulnerability Database. https://nvd.nist.gov/home.cfm.
[13] Wappalyzer identify technology on websites.
[14] WhatWeb identifies websites. https://github.com/urbanadventurer/whatweb/wiki.
[15] Xprobe2 - a remote active operating system fingerprinting tool. https://linux.die.net/man/1/xprobe2.
[16] ZTag, an utility for annotating raw scan data with additional metadata. http://github.com/zmap/ztag.
[17] Abiword. Enchant. http://www.abisource.com/projects/enchant/, 2010.
[18] ACAR, G., EUBANK, C., ENGLEHARDT, S., JU ´AREZ, M., NARAYANAN, A., AND D´IAZ, C. The web never forgets: Persistent tracking mechanisms in the wild. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, Scottsdale, AZ, USA, November 3-7, 2014, pp. 674–689.
[19] ACAR, G., JU ´AREZ, M., NIKIFORAKIS, N., D´IAZ, C., G ¨URSES, S. F., PIESSENS, F., AND PRENEEL, B. FPDetective: Dusting the web for fingerprinters. In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS’13, Berlin, Germany, November 4-8, 2013, pp. 1129–1140.
[20] AMAZON. Amazon Elastic Compute Cloud (Amazon EC2). https://aws.amazon.com/ec2/, 2013.
[21] ANTONAKAKIS, M., APRIL, T., BAILEY, M., BERNHARD, M., BURSZTEIN, E., COCHRAN, J., DURUMERIC, Z., HALDERMAN, J. A., INVERNIZZI, L., KALLITSIS, M., KUMAR, D., LEVER, C., MA, Z., MASON, J., MENSCHER, D., SEAMAN, C., SULLIVAN, N., THOMAS, K., AND ZHOU, Y. Understanding the Mirai Botnet. In 26th USENIX Security Symposium, USENIX Security 2017, Vancouver, BC, Canada, August 16-18, 2017, pp. 1093–1110.
[36] SHAMSI, Z., NANDWANI, A., LEONARD, D., AND LOGUINOV, D. Hershel: Single-packet OS fingerprinting. In ACM SIGMETRICS / International Conference on Measurement and Modeling of Computer Systems, SIGMETRICS ’14, Austin, TX, USA, June 16-20, 2014, pp. 195–206.
[37] SHODAN. The search engine for Internet-connected devices. https://www.shodan.io/.
[38] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL, C., AND VIGNA, G. Firmalice - automatic detection of authentication bypass vulnerabilities in binary firmware. In 22nd Annual Network and Distributed System Security Symposium, NDSS 2015, San Diego, California, USA, February 8-11, 2015.
[39] STAROV, O., AND NIKIFORAKIS, N. XHOUND: Quantifying the fingerprintability of browser extensions. In 2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017, pp. 941–956.
[40] VENKATARAMAN, S., CABALLERO, J., POOSANKAM, P., KANG, M. G., AND SONG, D. X. Fig: Automatic fingerprint generation. In Proceedings of the Network and Distributed System Security Symposium, NDSS 2007, San Diego, California, USA, February 28-March 2, 2007.
[22] BEVERLY, R. Yarrp'ing the Internet: Randomized high-speed active topology discovery. In Proceedings of the 2016 ACM on Internet Measurement Conference, IMC 2016, Santa Monica, CA, USA, November 14-16, 2016, pp. 413–420.
[23] CUI, A., COSTELLO, M., AND STOLFO, S. J. When firmware modifications attack: A case study of embedded exploitation. In 20th Annual Network and Distributed System Security Symposium, NDSS 2013, San Diego, California, USA, February 24-27, 2013.
[24] CUI, A., AND STOLFO, S. J. A quantitative analysis of the insecurity of embedded network devices: Results of a wide-area scan. In Twenty-Sixth Annual Computer Security Applications Conference, ACSAC 2010, Austin, Texas, USA, December 6-10, 2010, pp. 97–106.
[25] DURUMERIC, Z., ADRIAN, D., MIRIAN, A., BAILEY, M., AND HALDERMAN, J. A. A search engine backed by internet-wide scanning. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, Denver, CO, USA, October 12-16, 2015, pp. 542–553.
[26] DURUMERIC, Z., KASTEN, J., ADRIAN, D., HALDERMAN, J. A., BAILEY, M., LI, F., WEAVER, N., AMANN, J., BEEKMAN, J., PAYER, M., AND PAXSON, V. The matter of heartbleed. In Proceedings of the 2014 Internet Measurement Conference, IMC 2014, Vancouver, BC, Canada, November 5-7, 2014, pp. 475–488.
[27] ENGLEHARDT, S., AND NARAYANAN, A. Online tracking: A 1-million-site measurement and analysis. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016, pp. 1388–1401.
[28] FACHKHA, C., BOU-HARB, E., KELIRIS, A., MEMON, N., AND AHAMAD, M. Internet-scale probing of CPS: Inference, characterization, and orchestration analysis. In Proceedings of the Network and Distributed System Security Symposium (2017), vol. 17.
[29] FARINHOLT, B., REZAEIRAD, M., PEARCE, P., DHARM-DASANI, H., YIN, H., BLOND, S. L., MCCOY, D., AND LEVCHENKO, K. To catch a ratter: Monitoring the behavior of amateur DarkComet RAT operators in the wild. In 2017 IEEE Symposium on Security and Privacy, SP 2017, San Jose, CA, USA, May 22-26, 2017, pp. 770–787.
[30] FENG, X., LI, Q., WANG, H., AND SUN, L. Characterizing industrial control system devices on the Internet. In 24th IEEE International Conference on Network Protocols, ICNP 2016, Singapore, November 8-11, 2016.
[31] HEIDEMANN, J. S., PRYADKIN, Y., GOVINDAN, R., PAPADOPOULOS, C., BARTLETT, G., AND BANNISTER, J. A. Census and survey of the visible Internet. In Proceedings of the 8th ACM SIGCOMM Internet Measurement Conference, IMC 2008, Vouliagmeni, Greece, October 20-22, 2008, pp. 169–182.
[32] KOHNO, T., BROIDO, A., AND CLAFFY, K. C. Remote physical device fingerprinting. IEEE Transactions on Dependable and Secure Computing 2, 2 (April 2005), 93–108.
[33] LEONARD, D., AND LOGUINOV, D. Demystifying service discovery: Implementing an Internet-wide scanner. In Proceedings of the 10th ACM SIGCOMM Internet Measurement Conference, IMC 2010, Melbourne, Australia, November 1-3, 2010, pp. 109–122.
[34] MAXMIND. MaxMind GeoIP2. https://www.maxmind.com/en/geoip2-services-and-databases, 2016.
[35] SHAMSI, Z., CLINE, D. B. H., AND LOGUINOV, D. Faulds: A non-parametric iterative classifier for Internet-wide OS fingerprinting. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS 2017, Dallas, TX, USA, October 30-November 3, 2017, pp. 971–982.