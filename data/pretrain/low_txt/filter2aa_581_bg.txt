### Identity Provider Trust and SAML Redirection

Regardless of the end user's domain, the client web application only trusts the identity provider within its own domain. Both internal and external users are initially redirected to the internal (or local) SAML identity provider. The local identity provider should offer the user the option to either authenticate with their username and password (for internal users) or select their corresponding domain. If the user selects an external domain, the local identity provider redirects the user to the corresponding identity provider in the external user’s home domain. The external identity provider then returns a SAML response to the internal identity provider.

The external identity provider signs this SAML token. If the signature is valid and from a trusted external identity provider, the internal identity provider issues a new SAML token signed by itself to the calling application. The flow then continues as shown in Figure 15-2.

**Note:** One benefit of this approach is that internal applications only need to trust their own identity provider. The identity provider handles the brokering of trust between other identity providers outside its domain. In this scenario, the external identity provider also uses SAML, but this cannot be expected all the time. There are identity providers that support other protocols. In such scenarios, the internal identity provider must be able to transform identity assertions between different protocols.

### Delegated Access Control with JSON Web Token (JWT)

Suppose a medium-scale enterprise has several APIs. Company employees are allowed to access these APIs via web applications while they are behind the company firewall. All user data are stored in Microsoft Active Directory, and all web applications are connected to an OpenID Connect identity provider for user authentication. The web applications need to access back-end APIs on behalf of the logged-in user.

This use case extends the Single Sign-On (SSO) with the Delegated Access Control pattern. The key point here is that "all the web applications are connected to an OpenID Connect identity provider to authenticate users." You need to replace the SAML identity provider shown in Figure 15-2 with an OpenID Connect identity provider, as illustrated in Figure 15-4. This also suggests the need for an access delegation protocol (OAuth).

In this scenario, users do not present their credentials directly to the web application; instead, they authenticate through an OpenID Connect identity provider. The web application must exchange the ID token received during OpenID Connect authentication for an OAuth access token, defined in the JWT grant type for OAuth 2.0 (Chapter 12). Once the web application receives the ID token (which is also a JWT), it exchanges it for an access token by communicating with the OAuth 2.0 authorization server. The authorization server must trust the OpenID Connect identity provider. When the web application gets the access token, it can use it to access back-end APIs.

**Note:** Why would someone exchange the ID token obtained in OpenID Connect for an access token when they can directly get an access token along with the ID token? This is not required when both the OpenID Connect server and the OAuth authorization server are the same. If they are different, you must use the JWT Bearer grant type for OAuth 2.0 and exchange the ID token for an access token. The access token issuer must trust the OpenID Connect identity provider.

### Nonrepudiation with JSON Web Signature (JWS)

Suppose a medium-scale enterprise in the finance industry needs to expose an API to its customers through a mobile application, as illustrated in Figure 15-5. A major requirement is that all API calls should support nonrepudiation.

Nonrepudiation ensures that a user cannot deny having performed a business transaction via an API. It provides proof of the origin and integrity of data in an unforgeable manner, which a third party can verify at any time. Once a transaction is initiated, none of its content, including the user identity, date, time, and transaction details, should be altered to maintain transaction integrity and allow for future verifications.

Logs must be archived and properly secured to prevent unauthorized modifications. In case of a repudiation dispute, transaction logs, along with other logs or data, can be retrieved to verify the initiator, date, time, transaction history, and so on. Nonrepudiation is achieved via digital signatures. A key known only to the end user should sign each message.

In this case, the financial institution must issue a key pair to each of its customers, signed by a certificate authority under its control. It should store only the corresponding public certificate, not the private key. The customer can install the private key on their mobile device and make it available to the mobile application. All API calls generated from the mobile application must be signed by the user’s private key and encrypted by the financial institution’s public key.

To sign the message, the mobile application can use JSON Web Signature (see Chapter 7); for encryption, it can use JSON Web Encryption (see Chapter 8). When using both signature and encryption on the same payload, the message must be signed first, and then the signed payload must be encrypted for legal acceptance.

### Chained Access Delegation

Suppose a medium-scale enterprise that sells bottled water has an API (Water API) that can be used to update the amount of water consumed by a registered user. Any registered user can access the API via any client application, such as an Android app, an iOS app, or a web application.

The company only provides the API—anyone can develop client applications to consume it. All the user data of the Water API are stored in Microsoft Active Directory. Client applications should not be able to access the API directly to find out information about users. Only registered users of the Water API can access it, and they should only be able to see their own information. For each update made by a user, the Water API must update the user’s healthcare record maintained at MyHealth.org. The user also has a personal record at MyHealth.org, and it too exposes an API (MyHealth API). The Water API has to invoke the MyHealth API to update the user record on the user’s behalf.

In summary, a mobile application accesses the Water API on behalf of the end user, and then the Water API has to access the MyHealth API on behalf of the end user. The Water API and the MyHealth API are in two independent domains, suggesting the need for an access delegation protocol.

**Solution 1:** The end user must get an access token from MyHealth.org for the Water API (the Water API acts as the OAuth client), and then the Water API must store the token internally against the user’s name. Whenever the user sends an update through a mobile application to the Water API, the Water API first updates its own record and then finds the MyHealth access token corresponding to the end user and uses it to access the MyHealth API. With this approach, the Water API has the overhead of storing the MyHealth API access token and refreshing it when needed.

**Solution 2:** As shown in Figure 15-6, the mobile application must carry a valid access token to access the Water API on behalf of the end user. In step 3, the Water API talks to its own authorization server to validate the access token. Then, in step 4, the Water API exchanges the access token it got from the mobile application for a JWT access token. The JWT access token is a special access token that carries meaningful data, and the authorization server in the Water API’s domain signs it. The JWT includes the end user’s local identifier (corresponding to the Water API) as well as its mapped identifier in the MyHealth domain. The end user must permit this action at the Water API domain.

In step 6, the Water API accesses the MyHealth API using the JWT access token. The MyHealth API validates the JWT access token by talking to its own authorization server, verifying the signature. If the signature is from a trusted entity, the access token is treated as valid.

Because the JWT includes the mapped username from the MyHealth domain, it can identify the corresponding local user record. However, this raises a security concern. If users can update their profiles in the Water API domain with the mapped MyHealth identifier, they can map it to any user identifier, leading to a security hole. To avoid this, the account mapping step must be secured with OpenID Connect authentication. When the user wants to add their MyHealth account identifier, the Water API domain initiates the OpenID Connect authentication flow and receives the corresponding ID token. Then the account mapping is done with the user identifier in the ID token.

### Trusted Master Access Delegation

Suppose a large-scale enterprise has multiple APIs hosted in different departments, each running its own OAuth 2.0 authorization server due to vendor incompatibilities. Company employees are allowed to access these APIs via web applications while they are behind the company firewall, regardless of the department they belong to.

All user data are stored in a centralized Active Directory, and all web applications are connected to a centralized OAuth 2.0 authorization server (which also supports OpenID Connect) to authenticate users. The web applications need to access back-end APIs on behalf of the logged-in user. These APIs may come from different departments, each with its own authorization server. The company also has a centralized OAuth 2.0 authorization server, and an employee with an access token from the centralized authorization server must be able to access any API hosted in any department.

**Solution:** An access token issued from the master authorization server should be sufficient to access any API under the control of the secondary authorization servers. The access token returned to the web application, as shown in step 3 of Figure 15-7, should be good enough to access any of the APIs.

To make this possible, the access token should be self-contained, ideally a JWT with the `iss` (issuer) field. In step 4, the web application accesses the API using the access token, and in step 5, the API talks to its own authorization server to validate the token. The authorization server can look at the JWT header to determine if it issued the token or if a different server did. If the master authorization server issued it, the secondary authorization server can talk to the master authorization server’s OAuth introspection endpoint to find out more about the token. The introspection response specifies whether the token is active and identifies the scopes associated with the access token. Using the introspection response, the secondary authorization server can build an eXtensible Access Control Markup Language (XACML) request and call a XACML policy decision point (PDP). If the XACML response evaluates to permit, the web application can access the API. While XACML is powerful, it can be complex for defining access control policies. The Open Policy Agent (OPA) project, which has become popular recently, can also be used for building fine-grained access control policies.

### Resource Security Token Service (STS) with Delegated Access Control

Suppose a global organization has APIs and API clients distributed across different regions, each operating independently. Currently, both clients and APIs are non-secured. You need to secure the APIs without making changes at the API or client end.

**Solution:** Introduce two interceptors: one in the client region and one in the API region. The client-side interceptor intercepts all non-secured messages generated from the client and adds the necessary security parameters. The API-side interceptor (also called a policy enforcement point or API gateway) validates the security of all incoming API requests. This way, you can secure the API without changing the client or API.

To secure the API at the API gateway, use the JWT grant type for OAuth 2.0. Non-secured requests from the client application are captured by the client-side interceptor in step 1. The interceptor uses a default user account to access the STS using the OAuth 2.0 client credentials grant type. The STS authenticates the request and issues a self-contained access token (a JWT) with the STS in the API region as the audience.

In step 3, the client-side interceptor authenticates to the STS at the API region with the JWT token and gets a new JWT token, following the OAuth 2.0 Token Delegation profile (Chapter 9). The audience of the new JWT is the OAuth 2.0 authorization server running in the API region. Before issuing the new JWT, the STS at the API region must validate its signature and check if a trusted entity signed it.

To make this scenario work, the STS in the API region must trust the STS on the client side. The OAuth 2.0 authorization server only trusts its own STS. Step 4 initiates the JWT grant type for OAuth 2.0, and the client interceptor exchanges the JWT issued by the STS of the API region for an access token. Then it uses that access token to access the API in step 5.

The PEP in the API region intercepts the request and calls the authorization server to validate the access token. If the token is valid, the PEP lets the request hit the API (step 7).

### Delegated Access Control with No Credentials over the Wire

Suppose a company wants to expose an API to its employees but does not want user credentials to go over the wire. This is a straightforward problem with an equally straightforward solution. Both OAuth 2.0 bearer tokens and HTTP Basic authentication transmit user credentials over the wire. Even though both approaches use TLS for protection, some companies still worry about passing user credentials over communication channels.

**Options:**
1. **HTTP Digest Authentication:** This method does not send the password in plain text.
2. **OAuth 2.0 MAC Tokens (Appendix G):** This is a better approach because the access token is generated for each API, and the user can revoke the token if needed without changing the password. However, the OAuth 2.0 MAC token profile is not yet mature.
3. **OAuth 2.0 with Token Binding (Chapter 11):** This binds the token to the underlying TLS channel, preventing it from being exported and used elsewhere.

There are additional draft proposals under the IETF OAuth working group to address this concern, such as OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens (https://tools.ietf.org/html/draft-ietf-oauth-mtls-17).

### Summary
- API security is an ever-evolving subject.
- More and more standards and specifications are emerging, most built around the core OAuth 2.0 specification.
- Security around JSON is another evolving area, with the IETF JOSE working group currently addressing it.
- It is highly recommended to keep an eye on the IETF OAuth working group, the IETF JOSE working group, the OpenID Foundation, and the Kantara Initiative for the latest developments.