### Successfully Retired but Unwritten Data

Stores that have been successfully retired but whose data has not yet been written to the memory hierarchy are still present in the core’s store buffer. For our attacks to be effective, these stores must remain outstanding in the store buffer, allowing us to recover at most the k most recent stores, where k is the store buffer size (refer to Appendix A for a detailed measurement of the store buffer size).

### Intel's Analysis and Implications

Concurrently with our work, Intel’s analysis [41] revealed that the Write-Through-Fault (WTF) mechanism can be abused to leak stale data from older stores, even after the store data has been committed to memory and the corresponding store buffer entry has been freed. This observation has significant implications for defenses, as simply draining outstanding stores by serializing the instruction stream (e.g., using `mfence`) is insufficient to fully mitigate store buffer leakage.

### Store Buffer Partitioning

In Appendix A, we measured the size of the store buffer and discovered that when both logical CPUs on the same physical core are active, the store buffer is statically partitioned between the threads. Otherwise, a single thread can use the entire store buffer. As a result, one hardware thread cannot read writes performed by another thread running in parallel. However, Intel’s analysis [41] indicates that leakage may still occur when hardware threads go to sleep, as stale store buffer entries from the other thread are reused, or when hardware threads wake up and the store buffer is repartitioned.

### Operating System Countermeasures

For operating systems that deploy kernel-private page tables with KAISER [25], the Meltdown countermeasure, every context switch also serializes the instruction stream when writing to CR3. We observed that this has the unintended side-effect of draining outstanding stores from the store buffer [38], thereby preventing the WTF attack variants presented in this work. However, this does not suffice as a general countermeasure against store buffer leakage, as Intel’s analysis [41] describes that stale values may still be recovered from the store buffer until explicitly overwritten.

### Software Countermeasures

The necessary software countermeasure for CPUs without silicon-level WTF mitigations is to explicitly overwrite the entire store buffer on every context switch between user and kernel. To support this, Intel [41] has released a microcode update that modifies the semantics of the legacy `VERW` instruction to overwrite (among other things) the store buffer contents. Operating system kernels should execute a `VERW` dummy instruction (or an equivalent legacy software code snippet [41]) upon every context switch to eliminate the possibility of reading stale kernel stores from user space.

### Limitations of VERW Countermeasure

We note that the above `VERW` countermeasure might not prevent attacks based on Store-to-Leak. To the best of our knowledge, no countermeasure has been suggested against the Store-to-Leak attack variants presented in this paper.

### Gadget Finding

While Speculative Fetch+Bounce improves the usability of Spectre V1 gadgets, we did not find such gadgets in kernel code when attacking the kernel. We will leave the detection of gadgets in real-world applications for future work.

### Conclusion

With the WTF shortcut, we demonstrate a novel Meltdown-type effect exploiting the previously unexplored microarchitectural component, the store buffer. The attack enables an unprivileged attacker to leak recently written values from the operating system. Although WTF affects various processor generations, we showed that even recently introduced hardware mitigations are not sufficient, and further mitigations need to be deployed.

We also show a way to leak the TLB state using the store buffer, breaking KASLR on fully patched machines in 42 µs and recovering address space information from JavaScript. Additionally, we found that the Store-to-Leak TLB side channel facilitates the exploitation of Spectre gadgets. Finally, our work shows that the hardware fixes for Meltdown in recent CPUs are not sufficient.

### Acknowledgments

We would like to thank the reviewers for their feedback, as well as Vedad Hadžić from Graz University of Technology and Julian Stecklina from Cyberus Technology for contributing ideas and experiments. This work was supported by the Austrian Research Promotion Agency (FFG) via the project ESPRESSO, funded by the Province of Styria and the Business Promotion Agencies of Styria and Carinthia. It was also supported by the FFG via the K-project DeSSnet, funded in the context of COMET – Competence Centers for Excellent Technologies by BMVIT, BMWFW, Styria, and Carinthia. Additional funding was provided by the European Research Council (ERC) under the European Union’s Horizon 2020 research and innovation programme (grant agreement No 681402), the Defense Advanced Research Projects Agency (DARPA) under contract FA8750-19-C-0531, and the National Science Foundation under grant CNS-1814406. Generous gifts from Intel and AMD also contributed to the funding.

The research presented in this paper was partially supported by the Research Fund KU Leuven. Jo Van Bulck is supported by a grant from the Research Foundation – Flanders (FWO). Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding parties.

### Measuring the Store Buffer Size

We now turn our attention to measuring the size of the store buffer. Intel advertises that Skylake processors have 56 entries in the store buffer [55]. We could not find any publications specifying the size of the store buffer in newer processors, but since both Kaby Lake and Coffee Lake R are not major architectural changes, we assume that the size of the store buffers has not changed. To confirm this assumption, we performed a sequence of store operations, each to a different address, and then used a faulty load aiming to trigger a WTF shortcut and retrieve the value stored in the first (oldest) store instruction. For each number of stores, we attempted 100 times at each of the 4096 page offsets, totaling 409,600 attempts per number of stores. Figure 12 shows the likelihood of triggering the WTF shortcut as a function of the number of stores for each processor and configuration we tested. We found that we can trigger the WTF shortcut provided that the sequence has up to 55 stores, confirming the known data for Skylake and our assumption that it has not changed in newer processors.

The figure further shows that merely enabling hyperthreading does not change the store buffer capacity available to the process. However, running code on the second hyperthread of a core halves the available capacity, even if the code does not perform any store. This confirms that the store buffers are statically partitioned between the hyperthreads [42] and that partitioning takes effect only when both hyperthreads are active.

### References

[1] 2018. Spectre Variant 4. https://bugs.chromium.org/p/project-zero/issues/detail?id=1528
[2] 2019. https://bugs.chromium.org/p/chromium/issues/detail?id=821270
...
[41] Intel. 2019. Deep Dive: Intel Analysis of Microarchitectural Data Sampling. https://software.intel.com/security-software-guidance/insights/deep-dive-intel-analysis-microarchitectural-data-sampling
[42] Intel. 2019. Intel 64 and IA-32 Architectures Optimization Reference Manual.
...
[81] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-Tenant Side-Channel Attacks in PaaS Clouds. In CCS.