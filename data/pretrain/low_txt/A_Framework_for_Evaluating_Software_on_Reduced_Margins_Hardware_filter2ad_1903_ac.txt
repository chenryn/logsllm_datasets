### B. Error Resiliency of Source Code and Algorithm Transformations

In this case study, we demonstrate the use of XM2 to identify source code transformations that significantly impact application resiliency. We focus on transformations that affect branch prediction mechanisms and the cache hierarchy.

#### Evaluating Branch Prediction Mechanisms

To assess the vulnerability of the branch prediction mechanism, we employed two simple kernels: the Sorted kernel and the Random kernel. The Sorted kernel traverses an array containing sorted values, comparing each value with the mean of the array. Depending on the outcome of each comparison, a variable is incremented or decremented. The branch predictor can accurately predict the behavior of branches in the Sorted kernel. In contrast, the Random kernel traverses the same array, but with values stored randomly, leading to a high misprediction rate and subsequent pipeline flushes.

Figure 7 illustrates that the Random kernel has higher percentages of silent data corruptions (SDCs) across all frequencies. The two kernels exhibit similar behavior only under extreme overclocking conditions.

#### Cache Hierarchy Evaluation

For the cache evaluation, we created kernels that perform read, write, and memory copy operations using different memory access patterns (Table III). Figure 8 presents the results of the cache evaluation. The write operation shows a higher degree of robustness compared to the other operations. This is because the CPU automatically enables the read allocate mode during the execution of write microkernels, resulting in minimal cache utilization. Read operations are slightly more robust than memory copy operations. Memory copy operations often result in CPU crashes, while read operations typically lead to illegal instructions. When comparing different access patterns, the more complex the pattern, the higher the number of experiments that terminate abnormally. For example, in the L2 Stride pattern, all experiments result in CPU crashes.

We observed that strided patterns have high CPU crash probabilities. To validate our assumption that the prefetcher may negatively impact reliability, we programmatically disabled the prefetcher and recompiled the cache microkernels. The results of the fault injection campaign without the prefetcher are shown on the right side of Figure 8. Generally, deactivating the prefetcher slightly increases application resiliency, but for strided patterns, the results remain the same.

### C. System Voltage Margins Characterization

This case study uses XM2 to identify the voltage margins of four x86-64 systems featuring the Skylake Xeon E3 v5 1220 processor running Linux Ubuntu OS 16.04 LTS. We evaluated eight applications from the PARSEC and SPLASH benchmark suites, taking full advantage of the customization capabilities of our framework. Our goal was to identify the maximum voltage reduction for each application without compromising its correctness.

We used a Python script to set the unRel value in the expConf file and search for the maximum undervolt level. For each expConf, we set the maximum number of experiments to 10. Using a custom termination criterion, we terminated the campaign if an experiment did not produce exact output. If so, the search algorithm moved to lower undervolting values; otherwise, it continued to higher undervolting values.

Upon completion of the execution campaign, we computed the cumulative distribution function (CDF) of the average fault probability for each target system. The results, presented in Figure 9, show that the four CPUs exhibit different behaviors when exploiting voltage margins. A more gradual CDF indicates a broader range of margin opportunities, depending on the workload characteristics.

### VII. Related Work

In CLKSCREW [12], the voltage and frequency scaling capabilities of modern processors are exploited to compromise system security by injecting faults during code execution and extracting cryptographic keys from ARM TrustZone. This work highlights the security risks associated with modern energy management techniques. RIFLE [13] and MESSALINE [14] introduce deterministic and reproducible fault injection at the pin-level of a processor. FIAT [15] and FERRARI [16] implement software-level fault injection, modeling complex systems with high accuracy, but ensuring realistic simulated models and managing simulation time are significant challenges. VERIFY [17], MEFISTO [18], and GemFI [19] are fault injection simulators that provide high accuracy in both location and timing of faults, but introduce substantial overhead. Finally, REFINE [20] allows fault injection in the back-end of the LLVM compiler. Unlike these works, XM2 performs fault injection natively on the targeted system, providing native execution time and not relying on any fault models as they manifest due to real hardware errors.

### VIII. Conclusions

This paper introduces XM2, a software framework that facilitates the experimental evaluation of the effects of voltage and frequency margins on the operation of CPU platforms. XM2 can be used to study the behavior of software running on platforms operating outside their nominal operational envelope. The results obtained by our tool are accurate and allow evaluation with realistic workloads and working sets. Our framework enables the setup, automatic execution, and statistical processing of large experimental campaigns with minimal configuration effort, limited modifications to applications (on average 5.6% extra lines of code), and limited overhead (on average 2.5%) compared to native, reliable executions. For example, using XM2, we studied the effects of extended margins on two widely different ISAs. We showed that on an x86-64 Skylake CPU, the voltage margins are 220 mV, whereas on the ARM Cortex A53, the frequency margins are 200 MHz.

### Acknowledgment

This research was funded by the European Community Horizon 2020 programme under grant no. 688540.

### References

[1] G. Papadimitriou, M. Kaliorakis, A. Chatzidimitriou, D. Gizopoulos, P. Lawthers, and S. Das, “Harnessing voltage margins for energy efficiency in multicore CPUs,” in Proc. of the Annual IEEE/ACM Int. Symposium on Microarchitecture, MICRO 2017, 2017.
[2] S. Achour and M. C. Rinard, “Approximate computation with outlier detection in topaz,” in Proc. of the 2015 International Conference on Object-Oriented Programming, Systems, Languages, and Applications. New York, NY, USA: ACM, 2015.
[3] D. Blaauw, S. Kalaiselvan, K. Lai, W. Ma, S. Pant, C. Tokunaga, S. Das, and D. M. Bull, “Razor II: in situ error detection and correction for PVT and SER tolerance,” in IEEE Int. Solid-State Circuits Conference, ISSCC, Digest of Technical Papers, 2008.
[4] K. Parasyris, V. Vassiliadis, C. D. Antonopoulos, S. Lalis, and N. Bellas, “Significance-Aware Program Execution on Unreliable Hardware,” ACM Trans. Archit. Code Optim., 2017.
[5] S. Das, D. Roberts, S. Lee, S. Pant, D. Blaauw, T. Austin, K. Flautner, and T. Mudge, “A self-tuning dvs processor using delay-error detection and correction,” Solid-State Circuits, IEEE Journal of, vol. 41, no. 4, 2006.
[6] A. Bacha and R. Teodorescu, “Using ECC Feedback to Guide Voltage Speculation in Low-Voltage Processors,” in 2014 47th Annual IEEE/ACM International Symposium on Microarchitecture, 2014.
[7] J. Leng, A. Buyuktosunoglu, R. Bertran, P. Bose, and V. J. Reddi, “Safe limits on Voltage Reduction Efficiency in GPUs: A Direct Measurement Approach,” in 2015 48th Annual International Symposium on Microarchitecture (MICRO), 2015.
[8] G. Papadimitriou, M. Kaliorakis, A. Chatzidimitriou, C. Magdalinos, and D. Gizopoulos, “Voltage Margins Identification on Commercial x86-64 Multicore Microprocessors,” in 2017 IEEE 23rd Int, Symposium on On-Line Testing and Robust System Design (IOLTS), 2017.
[9] D. Gizopoulos, M. Psarakis, S. V. Adve, P. Ramachandran, S. K. S. Hari, D. J. Sorin, A. Meixner, A. Biswas, and X. Vera, “Architectures for online error detection and recovery in multicore processors,” in Design, Automation and Test in Europe, DATE 2011, 2011.
[10] E. A. Burton, G. Schrom, F. Paillet, J. Douglas, W. J. Lambert, K. Radhakrishnan, and M. J. Hill, “FIVR—Fully Integrated Voltage Regulators on 4th Generation Intel Core SoCs,” in Applied Power Electronics Conference and Exposition (APEC), 2014 Twenty-Ninth Annual IEEE. IEEE, 2014, pp. 432–439.
[11] C. Bienia, S. Kumar, J. P. Singh, and K. Li, “The parsec benchmark suite: Characterization and architectural implications,” in Proc. of the 17th Int. Conference on Parallel Architectures and Compilation Techniques, 2008.
[12] A. Tang, S. Sethumadhavan, and S. Stolfo, “CLKSCREW: Exposing the perils of security-oblivious energy management,” in 26th USENIX Security Symposium (USENIX Security 17), 2017.
[13] H. Madeira, M. Rela, F. Moreira, and J. G. Silva, “RIFLE: A general-purpose pin-level fault injector,” in Proc. of the European Dependable Computing Conference (EDCC), 1994.
[14] J. Arlat, M. Aguera, L. Amat, Y. Crouzet, J.-C. Fabre, J.-C. Laprie, E. Martins, and D. Powell, “Fault Injection for Dependability Validation: A Methodology and Some Applications,” IEEE Trans. on Software Engineering, 1990.
[15] J. H. Barton, E. W. Czeck, Z. Z. Segall, and D. P. Siewiorek, “Fault Injection Experiments Using FIAT,” IEEE Trans. on Computers, 1990.
[16] G. A. Kanawati, N. A. Kanawati, and J. A. Abraham, “Ferrari: A flexible software-based fault and error injection system,” IEEE Trans. Comput., vol. 44, 1995.
[17] V. Sieh, O. Tschche, and F. Balbach, “VERIFY: Evaluation of Reliability Using VHDL-Models with Embedded Fault Descriptions,” in Proc. of the Symposium on Fault-Tolerant Computing (FTCS), 1997.
[18] E. Jenn, J. Arlat, M. Rimn, J. Ohlsson, and J. Karlsson, “Fault Injection into VHDL Models: The MEFISTO Tool,” in Proc. of the Symposium on Fault-Tolerant Computing (FTCS), 1994.
[19] K. Parasyris, G. Tziantzoulis, C. Antonopoulos, and N. Bellas, “GemFI: A fault injection tool for studying the behavior of applications on unreliable substrates,” in Dependable Systems and Networks (DSN), 2014 44th Annual IEEE/IFIP Int. Conference on, 2014.
[20] G. Georgakoudis, I. Laguna, D. S. Nikolopoulos, and M. Schulz, “REFINE: Realistic fault injection via compiler-based instrumentation for accuracy, portability, and speed,” in Proc. of the Int. Conference for High Performance Computing, Networking, Storage, and Analysis, 2017.