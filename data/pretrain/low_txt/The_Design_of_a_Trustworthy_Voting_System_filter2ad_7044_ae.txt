### Correct Counting and Verification in Elections

Ensuring that votes are counted accurately is crucial for the integrity of any election. As a by-product, when each voter can verify their own vote, it strengthens the overall integrity of the electoral process. However, the verification process itself can be subject to various forms of abuse. We consider reliable verification to be an open problem. Our system includes voting receipts, but this does not eliminate all potential attacks, such as the creation of forged receipts. 

Election officials may face challenges in determining whether a machine malfunctioned or if a voter is attempting to cheat. To counteract the risk of forged receipts, we propose a random paper trail audit. This audit would cross-reference the ballot number on the receipt with the one found in the paper trail, thereby identifying legitimate receipts and revealing any potential malfeasance. These issues will be further explored in future work.

### Related Work

Karlof et al. [21] conducted a systems analysis of Chaum’s visual cryptography receipt scheme [6] and Neff’s VoteHere [30] scheme. While their work primarily focused on the implementation of cryptographic voting protocols, they identified several areas of weakness, including subliminal channels, social engineering, denial of service, and other human factors. Our work also focuses on the systems aspects of a voting system but aims to provide election integrity through simpler methods.

In electronic voting systems, some key functionalities, such as printing ballots, validating them, and storing cryptographic keys, are often entrusted to machines. To protect against machine-based threats, other systems advocate the use of trusted hardware [10, 21, 39], and some suggest verifying software integrity [13]. In our system, we utilize a Trusted Platform Module (TPM), a hardware device that can store secrets, to make attacks on voter privacy and forged ballots more difficult compared to an unprotected machine.

Our attestation approach is inspired by Kauer [22], who first created an authenticated boot loader using `skinit` on an x86 AMD processor. Since the hardware and software of a voting machine are known, once we get a machine into a known state, we can verify its configuration. Later work by McCune et al. [27] discusses applications using the TPM to protect data (sealed storage) combined with dynamic root of trust. In our implementation, we plan to experiment with sealed storage to prevent the execution of voting software unless machine-based attestation is successful. Although some voters may still want to attest the machine, this could provide additional assurance about the machine's configuration even when voters choose not to attest.

The OVC voting system [23] shares similarities with our work in its use of open-source code, but there are significant differences. In the OVC system, voters have the option to verify their ballot using another verification machine at the polling station. However, this system does not allow a voter to confirm that their vote was actually counted, which is incompatible with our goal of protecting election integrity and enabling individual voter verification.

### Conclusion

The procedures and techniques described above, using open-source software and shared keys, provide a foundation for elections that people can trust and which are much harder to tamper with. The entire system must be secure, from the generation of election keys to the final count, with redundant safeguards built in at various stages to prevent tampering.

By addressing the lessons of past elections with a more auditable registration system and better voter ID cards, election integrity is enhanced. The fully audited registration process helps record each voter’s registration. For election day authentication, voters have a relatively strong authentication token (Si1 on a voter ID card). When the voter goes to vote, they now have (Si2) and know (a password) secrets that no one else has in order to vote. After voting, the voter can use their human-readable verification receipt to confirm their vote was included in the final tally, and statistical paper-based audits provide an additional defense of the reported result’s integrity.

Protections that preserve election integrity should guide the design of voting systems to avoid potential attacks. We mitigate several attacks through the use of open-source code, open and public design of the election procedures, and hardware protection for cryptographic keys. By employing these mechanisms to defend election integrity, a system like ours may begin to approach a situation where electronic voting systems can be trusted.

### Acknowledgments

We thank Thomas Quillinan, Martijn Warnier, Jeff Napper, Srijith K. Nair, and the anonymous reviewers for their valuable comments.

### References

[1] AMD64 Architecture Programmer’s Manual. Volume 2: System Programming. AMD Corp., Sept. 2007.
[2] A. Aviv, et al. Security Evaluation of ES&S Voting Machines and Election Management System. In Proceedings of the 2008 USENIX/ACCURATE Electronic Voting Technology Workshop, Jul. 2008.
[3] J. Benaloh. Administrative and Public Verifiability: Can We Have Both? In Proceedings of the 2008 USENIX/ACCURATE Electronic Voting Technology Workshop, Jul. 2008.
[4] D. Bowen. Secretary of State Debra Bowen Moves to Strengthen Voter Confidence in Election Security Following Top-to-Bottom Review of Voting Systems. Press Release. Aug. 3, 2007.
[5] K. Butler, et al. Systemic Issues in the Hart InterCivic and Premier Voting Systems: Reflections on Project EVEREST. In Proceedings of the 2008 USENIX/ACCURATE Electronic Voting Technology Workshop, Jul. 2008.
[6] D. Chaum. Secret-ballot Receipts: True Voter-verifiable Elections. In IEEE Security & Privacy Magazine, 2(1):38—47, Jan.—Feb. 2004.
[7] D. Chaum and P. Ryan. A Practical, Voter-Verifiable Election Scheme. In Proceedings of the 10th European Symposium on Research in Computer Security. Sept. 2005.
[8] D. Chaum, et al. Scantegrity II: End-to-End Verifiability for Optical Scan Election Systems using Invisible Ink Confirmation Codes. In Proceedings of the 2008 USENIX/ACCURATE Electronic Voting Technology Workshop, Jul. 2008.
[9] H. Clark. Democratic Primary: Voter Lists Called into Question. Santa Fe New Mexican, Feb. 25, 2008.
[10] M. Clarkson, S. Chong, A. Myers. Civitas: Toward a Secure Voting System. In Proceedings of the 28th IEEE Symposium on Security and Privacy, May 2008.
[11] M. Doig. Analysis Points to Bad Ballot Design. Herald Tribune. Dec. 5, 2006.
[12] A Master List of 70+ Voting Machine Failures and Miscounts by State. http://www.commoncause.org/VotingMachine-FailuresMasterList.
[13] A. Feldman, J. Halderman, and E. Felten. Security Analysis of the Diebold Accuvote-TS Voting Machine. In Proceedings of the 2007 USENIX/ACCURATE Electronic Voting Technology Workshop, Aug. 2007.
[14] K. Fisher, R. Carback, and A. Sherman. Punchscan: Introduction and System Definition. In Proceedings of the 2006 Workshop on Trustworthy Elections (WOTE), Jun. 2006.
[15] L. Gong, M. Lomas, R. Needham, and J. Saltzer. Protecting Poorly Chosen Secrets from Guessing Attacks. In IEEE Journal on Selected Areas in Communications, 11(5):648-656, June 1993.
[16] R. Gonggrijp and W. Hengeveld. Stichting “Wij vertrouwen stemcomputers niet.” In Proceedings of the 2007 USENIX/ACCURATE Electronic Voting Technology Workshop, Aug. 2007.
[17] J. Hall. Transparency and Access to Source Code in Electronic Voting. In Proceedings of the 2006 USENIX/ACCURATE Electronic Voting Technology Workshop, Aug. 2006.
[18] Honolulu Hosts Nation’s First All-Digital Election. Associated Press. May 24, 2009.
[19] Intel 64 and IA-32 Architectures Software Developer’s Manual Volume 2B: Instruction Set Ref., N-Z. March 2009.
[20] D. Jones. Misassessment of Security in Computer-Based Election Systems. In RSA Lab Cryptobytes, 7, 2 (Fall 2004) 9-13. http://www.rsasecurity.com/rsalabs/cryptobytes/CryptoBytes_Fall2004.pdf.
[21] C. Karlof, N. Sastry, and D. Wagner. Cryptographic Voting Protocols: A Systems Perspective. In the 14th USENIX Security Symposium, August 2005.
[22] B. Kauer. OSLO: Improving the Security of Trusted Computing. In Proceedings of the 16th USENIX Security Symposium, Aug. 2007.
[23] A. Keller, et al. A PC-Based Open-Source Voting Machine with an Accessible Voter-Verifiable Paper Ballot. In Proceedings of the 2005 Free and Open Source Software (FREENIX) Annual Technical Conference, Aug. 2007.
[24] A. Kiayias, et al. Tampering with Special Purpose Computing Devices: A Case Study in Optical Scan E-Voting. In Proceedings of the 23rd Annual Computer Security Applications Conference (ACSAC), Dec. 2007.
[25] T. Kohno, A. Stubblefield, A. Rubin, D. Wallach. Analysis of an Electronic Voting System. In the Proceedings of the 25th IEEE Symposium on Security and Privacy, May 2004.
[26] S. Majors. Voting Machine Maker Discloses Program Error. Associated Press, Aug. 21, 2008.
[27] J. McCune, B. Parno, A. Perrig, M. Reiter, and H. Isozaki. Flicker: An Execution Infrastructure for TCB Minimization. In Proceedings of the ACM European Conference on Computer Systems (EUROSYS), Apr. 2008.
[28] M. McDonald. (Nearly) Final 2008 Early Voting Statistics. Jan. 11, 2009. http://elections.gmu.edu/Early_Voting_2008_Final.html.
[29] L. Minnite. An Analysis of Voter Fraud in the United States. Demos. Nov. 19, 2007.
[30] C. Neff. Practical High Certainty Intent Verification for Encrypted Votes. http://www.votehere.net/old/vhti/documentation/vsv-2.0.3638.pdf.
[31] L. Norden and J. Allen. Final Report 2008-2009 Ohio Election Summit. Apr. 8, 2009. http://www.brennancenter.org/page/publications/Ohio.Final.Report.pdf.
[32] N. Paul and A. Tanenbaum. Trustworthy Voting: From Machine to System. IEEE Computer, pp. 23-29, May 2009.
[33] R. Pierre. Botched Name Purge Denied Some the Right to Vote. The Washington Post, May 31, 2001.
[34] W. Pieters. La Volonté Machinale. PhD Thesis. Radboud Universiteit Nijmegen, 2007.
[35] S. Popoveniuc and B. Hosp. An Introduction to Punchscan. In Proceedings of the 2006 Workshop on Trustworthy Elections (WOTE), Jun. 2006.
[36] E. Proebstel, et al. An Analysis of the Hart Intercivic DAU eSlate. In Proceedings of the 2007 USENIX/ACCURATE Electronic Voting Technology Workshop, Aug. 2007.
[37] R. Rivest and J. Wack. On the Notion of “Software Independence” in Voting Systems. Draft version, http://vote.nist.gov/SI-in-voting.pdf.
[38] R. Rivest and W. Smith. Three Voting Protocols: ThreeBallot, VAV, and Twin. In Proceedings of the 2007 USENIX/ACCURATE Electronic Voting Technology Workshop, Aug. 2007.
[39] D. Sandler and D. Wallach. Casting Votes in the Auditorium. In Proceedings of the 2007 USENIX/ACCURATE Electronic Voting Technology Workshop, Aug. 2007.
[40] C. Thompson. Can You Count on Voting Machines? New York Times, Jan. 6, 2008.
[41] T. Bibbetts and S. Mullis. Challenged Ballots: You be the Judge – Round 1. http://minnesota.publicradio.org/features/2008/11/19_challenged_ballots/round1/.
[42] I. Urbina. States’ Actions to Block Voters Appear Illegal. New York Times, Oct. 8, 2008.
[43] A. Yasinsac, et al. Software Review and Security Analysis of the ES&S iVotronic 8.0.1.2 Voting Machine Firmware. Feb. 2007. http://www.cs.berkeley.edu/~daw/papers/sarasota07.pdf.