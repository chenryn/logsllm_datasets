### 5.5.3 Content Provider Sites: Approval Files

Approval responses involve the transfer of minimal data, typically a "YES" or "NO" (approximately 4 bytes) plus any necessary headers. We analyzed 3244 instances where content providers served data to origin sites, using data from the top 500 Alexa sites [2]. The average request size was 10,459 bytes. However, due to the presence of large video files, the standard deviation was 118,197 bytes. The median request size of 2,528 bytes is significantly lower than the average, but still far exceeds the 4 bytes required for a SOMA approval response. Therefore, we conclude that the additional network load on content providers due to SOMA is negligible compared to the data they already provide to origin sites.

### 6. Related Work

Web-based execution environments have been designed with the understanding that unfettered remote code execution is extremely dangerous. SSL and TLS can protect communication privacy, integrity, and authenticity, while code signing [30, 35] can prevent the execution of unauthorized code. Neither, however, can protect against the execution of malicious code within the browser. Java [8] was the first web execution environment to employ an execution sandbox [39] and the same-origin policy to restrict network communication. Subsequent systems, including JavaScript, have largely followed this model.

While there has been significant research on mitigating the failures of language-based sandboxing [18] and sandboxing less trusted code such as browser plugins and helper applications [12], only recently have researchers begun addressing the limitations of sandboxing and the same-origin policy in the context of JavaScript applications.

Many researchers have attempted to detect and block malicious JavaScript. Some have proposed automatically instrumenting JavaScript to detect known vulnerabilities [29], while others have proposed filtering JavaScript to prevent XSS [19] and XSRF [17] attacks. Another approach involves dynamic taint tracking combined with static analysis to detect information flows associated with XSS attacks [38].

Instead of attempting to detect dangerous JavaScript behavior before it can compromise user data, SOMA prevents unauthorized cross-domain information flows using site-specific policies.

Recently, several researchers have focused on the problem of web mashups, which can be created on the client or server. Client-side mashups are composite JavaScript-based web pages that draw functionality and content from multiple sources. To work within the confines of the same-origin policy, remote content must either be separated into different iframes or all code must be loaded into the same execution context. The former solution is generally too restrictive, while the latter is too permissive. Client-side mashup solutions aim to bridge this gap. Two pioneering works in this space are Subspace [16] and MashupOS [14, 40]. SOMA restricts communication between the web page (browser) and servers, while mashup solutions restrict local communication between elements on the page.

SOMA breaks client-side mashups that use unapproved code. For a mashup to work with SOMA, every involved website must explicitly allow participation. While these restrictions may inhibit the creation of novel, third-party mashup applications, they also prevent attackers from creating malicious mashups (e.g., combinations of a legitimate bank’s login page and a malicious login box). Given the current state of web security, we believe such trade-offs are beneficial and necessary. SOMA does not affect server-side mashups.

The general problem of unauthorized information flow is a classic issue in computer security [10], but little attention has been paid to unauthorized cross-domain information flows in web applications beyond the same-origin policy. This is despite the fact that XSS and XSRF attacks heavily rely on such unauthorized flows. The web was originally designed to make it easy to embed content from arbitrary sources. With SOMA, we advocate that any such inclusions should be approved by both parties.

While SOMA is a novel proposal, its design is based on existing systems. The soma-approval mechanism was inspired by Flash's `crossdomain.xml` [1] mechanism, which allows external content to be included in Flash applications only from servers with a `crossdomain.xml` file listing the originating server. The logic behind a soma-approval request can be arbitrarily complex, but we specify that it should be a server-side script rather than an XML file parsed by the browser.

The soma-manifest file was inspired by Tahoma [7], an experimental VM-based system for securing web applications. Tahoma allows users to download virtual machine images from arbitrary servers and requires each VM image to include a manifest specifying the remote sites with which it may communicate. By itself, Flash’s `crossdomain.xml` and Tahoma’s server manifest do not provide the type of protection offered by SOMA. A malicious content provider can always specify a `crossdomain.xml` file that allows a compromised Flash program to send sensitive information to the attacker. Similarly, a malicious origin server can specify a manifest that causes a user’s browser to send data to an arbitrary site, leading to denial-of-service attacks or worse. By including both mechanisms, SOMA addresses the limitations of each.

Subsequent to our preliminary report [25], B. Sterne of Mozilla introduced a related proposal called Site Security Policy (SSP) [36], which is still in development. Another related proposal by Schuh [33] involves the browser enforcing firewall-style rulesets provided by the origin.

### 7. Discussion and Conclusion

Most JavaScript-based attacks require compromised web pages to communicate with attacker-controlled web servers. We propose an extension to the same-origin policy—the Same-Origin Mutual Approval (SOMA) policy—which restricts cross-domain communication to a web page’s originating server and other servers that mutually approve the cross-site communication. By preventing inappropriate or unauthorized cross-domain communication, SOMA can block attacks such as cross-site scripting and cross-site request forgery.

The benefits of the SOMA architecture over other JavaScript defenses include:
1. Incremental deployment with incremental benefit.
2. No configuration or usage burden on end users.
3. Required changes in browser functionality and server configuration primarily affect those most concerned about security, namely administrators of sensitive web servers and web browser developers.
4. These changes are easy to understand, simple to implement, and efficient in execution.
5. Server operators can specify which sites can interact with their content.

While SOMA does not prevent attackers from injecting JavaScript code, it ensures that such code cannot leak information to attackers without going through an approved server. We believe that SOMA represents a reasonable and practical compromise between increased security and the costs of adoption. Our proposal highlights that the ability to create web pages using arbitrary remote resources is a key enabling factor in web security exploits, including some techniques used in phishing. While other JavaScript defenses will undoubtedly arise, we believe that our contribution focuses on the underlying problem—deficiencies in the JavaScript same-origin policy—and identifies several important characteristics of a viable solution.

It is easy to dismiss proposals requiring changes to web infrastructure; however, there is precedent for wide-scale changes to improve security. Just as open email relays had to be restricted to mitigate spam, we believe that arbitrary content inclusions must be restricted to mitigate cross-site scripting and cross-site request forgery attacks. We hope this insight helps clarify the threats that must be considered when creating next-generation web technologies and other Internet-based distributed applications.

### Acknowledgements

The first and second authors acknowledge NSERC for funding their PGS D scholarships. The third author acknowledges NSERC for an NSERC Discovery Grant and his Canada Research Chair in Network and Software Security. The fourth author acknowledges an NSERC Discovery Grant. We also thank RIM and NSERC ISSNet for partial funding, as well as anonymous referees for their comments.

### References

[1] Adobe Systems Incorporated. External data not accessible outside a Macromedia Flash movie’s domain. Technical Report tn_14213, Adobe Systems Incorporated, Feb 2006.

[2] Alexa top 500 sites. Web page (viewed 14 Apr 2008). http://www.alexa.com/site/ds/top_sites?ts_mode=global&lang=none.

[3] R. Auger. The cross-site request forgery (CSRF/XSRF) FAQ. Web page, Jan 2007. http://www.cgisecurity.com/articles/csrf-faq.shtml.

[4] R. Berends. Bandwidth stealing. Web page, Apr 2001. http://www.website-awards.net/articles/article39.htm.

[5] CERT advisory CA-2000-02 malicious HTML tags embedded in client web requests. Web page, Feb 2000. http://www.cert.org/advisories/CA-2000-02.html.

[6] The cross site scripting (XSS) FAQ. Web page, Aug 2003. http://www.cgisecurity.com/articles/xss-faq.shtml.

[7] R. S. Cox, J. G. Hansen, S. D. Gribble, and H. M. Levy. A safety-oriented platform for web applications. In Proc. IEEE Symposium on Security and Privacy, pages 350–364, 2006.

[8] D. Dean, E. Felten, and D. Wallach. Java security: From HotJava to Netscape and beyond. In Proc. IEEE Symposium on Security and Privacy, pages 190–200, 1996.

[9] S. DeDeo. Pagestats extension. Web page, May 2006. http://www.cs.wpi.edu/~cew/pagestats/.

[10] D. E. Denning. A lattice model of secure information flow. Communications of the ACM, 19(2):236–243, 1976.

[11] E. W. Felten and M. A. Schneider. Timing attacks on web privacy. In Proc. 7th ACM CCS, pages 25–32, 2000.

[12] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A secure environment for untrusted helper applications (confining the wily hacker). In Proc. 6th USENIX Security Symposium, 1996.

[13] J. Grossman and T. Niedzialkowski. Hacking intranet websites from the outside – JavaScript malware just got a lot more dangerous. In Blackhat USA, Aug 2006.

[14] J. Howell, C. Jackson, H. Wang, and X. Fan. MashupOS: Operating system abstractions for client mashups. In Proc. Workshop on Hot Topics in Operating Systems, May 2007.

[15] C. Jackson, A. Barth, A. Bortz, W. Shao, and D. Boneh. Protecting browsers from DNS rebinding attacks. In Proc. 14th ACM CCS, 2007.

[16] C. Jackson and H. J. Wang. Subspace: Secure cross-domain communication for web mashups. In Proc. 16th International World Wide Web Conference, pages 611–620, 2007.

[17] N. Jovanovic, E. Kirda, and C. Kruegel. Preventing cross-site request forgery attacks. In Proc. 2nd IEEE Conference on Security and Privacy in Communication Networks (SecureComm), Aug 2006.

[18] K. Keahey, K. Doering, and I. Foster. From sandbox to playground: Dynamic virtual environments in the grid. In Proc. 5th IEEE/ACM International Workshop on Grid Computing, pages 34–42, 2004.

[19] E. Kirda, C. Kruegel, G. Vigna, and N. Jovanovic. Noxes: A client-side solution for mitigating cross-site scripting attacks. In Proc. 21st ACM Symposium on Applied Computing, Apr 2006.

[20] J. Kyrnin. Are you invading your customers’ privacy? Web page (viewed 14 Apr 2008). http://webdesign.about.com/od/privacy/a/aa112601a.htm.

[21] V. T. Lam, S. Antonatos, P. Akritidis, and K. G. Anagnostakis. Puppetnets: Misusing web browsers as a distributed attack infrastructure. In Proc. 13th ACM CCS, pages 221–234, 2006.

[22] G. Maone. NoScript - JavaScript/Java/Flash blocker for a safer Firefox experience! Web page (viewed 14 Apr 2008). http://noscript.net/.

[23] Microsoft. Mitigating cross-site scripting with HTTP-only cookies. Web page (viewed 18 Jul 2008). http://msdn.microsoft.com/en-us/library/ms533046.aspx.

[24] A. D. Miglio. "Referer" field used in the battle against online fraud. Web page, Jan 2008. http://www.symantec.com/enterprise/security_response/weblog/2008/01/referer_field_used_in_the_batt.html.

[25] T. Oda, G. Wurster, P. van Oorschot, and A. Somayaji. SOMA: Mutual approval for included content in web pages. Technical Report TR-08-07, School of Computer Science, Carleton University, Apr 2008.

[26] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your iframes point to us. In Proc. 17th USENIX Security Symposium, Aug 2008.

[27] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu. The ghost in the browser: Analysis of web-based malware. In Proc. HotBots '07, 2007.

[28] J. Reimer. Microsoft apologizes for serving malware. Ars Technica, Feb 2007.

[29] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir. BrowserShield: Vulnerability-driven filtering of dynamic HTML. In Proc. IEEE Symposium on Security and Privacy, May 2006.

[30] A. Rubin and D. Geer. Mobile code security. IEEE Journal on Internet Computing, 2(6):30–34, 1998.

[31] J. Ruderman. The same origin policy. Web page, Aug 2001. http://www.mozilla.org/projects/security/components/same-origin.html.

[32] B. Schiffman. Rogue anti-virus slimeballs hide malware in ads. Wired, Nov 2007.

[33] J. Schuh. Same-origin policy part 2: Server-provided policies? Web page, Feb 2007. http://taossa.com/index.php/2007/02/17/same-origin-proposal/.

[34] T. Scott. Smarter image hotlinking prevention. A List Apart, Apr 2004.

[35] R. Sekar, C. R. Ramakrishnan, I. V. Ramakrishnan, and S. A. Smolka. Model-carrying code (MCC): A new paradigm for mobile-code security. In Proc. 2001 NSPW, pages 23–30, Sep 2001.

[36] B. Sterne. Site security policy draft (version 0.2). Web page, Jul 2008. http://people.mozilla.org/~bsterne/site-security-policy/details.html.

[37] L. Tauscher and S. Greenberg. How people revisit web pages: Empirical findings and implications for the design of history systems. In International Journal of Human Computer Studies, 1997.

[38] P. Vogt, F. Nentwich, N. Jovanovic, C. Kruegel, E. Kirda, and G. Vigna. Cross-site scripting prevention with dynamic data tainting and static analysis. In Proc. 14th NDSS Symposium, Feb 2007.

[39] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient software-based fault isolation. SIGOPS Operating System Review, 27(5):203–216, 1993.

[40] H. J. Wang, X. Fan, C. Jackson, and J. Howell. Protection and communication abstractions for web browsers in MashupOS. In 21st ACM SOSP, Oct 2007.

[41] WordPress.org. Enable sending referrers. Web page (viewed 14 Apr 2008). http://codex.wordpress.org/Enable_Sending_Referrers.