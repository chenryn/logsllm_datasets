### References

1. **2014. libsnark.**  
   https://github.com/scipr-lab/libsnark. (2014).

2. **2019. libiop.**  
   https://github.com/scipr-lab/libiop. (2019).

3. **Albrecht, M. R., Grassi, L., Rechberger, C., Roy, A., & Tiessen, T. (2016).**  
   MiMC: Efficient Encryption and Cryptographic Hashing with Minimal Multiplicative Complexity.  
   In *ASIACRYPT* (pp. 191–219).

4. **Albrecht, M. R., Rechberger, C., Schneider, T., Tiessen, T., & Zohner, M. (2015).**  
   Ciphers for MPC and FHE.  
   In *EUROCRYPT* (pp. 430–454).

5. **Ames, S., Hazay, C., Ishai, Y., & Venkitasubramaniam, M. (2017).**  
   Ligero: Lightweight Sublinear Arguments Without a Trusted Setup.  
   In *CCS* (pp. 2087–2104).

6. **Arora, S., Lund, C., Motwani, R., Sudan, M., & Szegedy, M. (1998).**  
   Proof Verification and the Hardness of Approximation Problems.  
   *J. ACM*, 45(3), 501–555.

7. **Arora, S., & Safra, S. (1998).**  
   Probabilistic Checking of Proofs: A New Characterization of NP.  
   *J. ACM*, 45(1), 70–122.

8. **Babai, L. (1985).**  
   Trading Group Theory for Randomness.  
   In *STOC* (pp. 421–429).

9. **Babai, L., Fortnow, L., Levin, L. A., & Szegedy, M. (1991).**  
   Checking Computations in Polylogarithmic Time.  
   In *STOC* (pp. 21–31).

10. **Bayer, S., & Groth, J. (2012).**  
    Efficient Zero-Knowledge Argument for Correctness of a Shuffle.  
    In *EUROCRYPT* (pp. 263–280).

11. **Ben-Sasson, E., Bentov, I., Chiesa, A., Gabizon, A., Genkin, D., Hamilis, M., Pergament, E., Riabzev, M., Silberstein, M., Tromer, E., & Virza, M. (2017).**  
    Computational Integrity with a Public Random String from Quasi-Linear PCPs.  
    In *EUROCRYPT* (pp. 551–579).

12. **Ben-Sasson, E., Bentov, I., Horesh, Y., & Riabzev, M. (2018).**  
    Fast Reed-Solomon Interactive Oracle Proofs of Proximity.  
    In *ICALP* (pp. 14:1–14:17).

13. **Ben-Sasson, E., Bentov, I., Horesh, Y., & Riabzev, M. (2018).**  
    Scalable, Transparent, and Post-Quantum Secure Computational Integrity.  
    *IACR Cryptology ePrint Archive* 2018, 46.

14. **Ben-Sasson, E., Bentov, I., Horesh, Y., & Riabzev, M. (2019).**  
    Scalable Zero Knowledge with No Trusted Setup.  
    In *CRYPTO* (pp. 701–732).

15. **Ben-Sasson, E., Carmon, D., Ishai, Y., Kopparty, S., & Saraf, S. (2020).**  
    Proximity Gaps for Reed-Solomon Codes.  
    *Cryptology ePrint Archive*, Report 2020/654.  
    https://eprint.iacr.org/2020/654.

16. **Ben-Sasson, E., Chiesa, A., Gabizon, A., Riabzev, M., & Spooner, N. (2016).**  
    Short Interactive Oracle Proofs with Constant Query Complexity, via Composition and Sumcheck.  
    *IACR Cryptology ePrint Archive* 2016, 324.

17. **Ben-Sasson, E., Chiesa, A., Garman, C., Green, M., Miers, I., Tromer, E., & Virza, M. (2014).**  
    Zerocash: Decentralized Anonymous Payments from Bitcoin.  
    In *IEEE Symposium on Security and Privacy* (pp. 459–474).

18. **Ben-Sasson, E., Chiesa, A., Genkin, D., & Tromer, E. (2013).**  
    On the Concrete Efficiency of Probabilistically-Checkable Proofs.  
    In *Symposium on Theory of Computing Conference, STOC'13* (pp. 585–594).

19. **Ben-Sasson, E., Chiesa, A., Genkin, D., Tromer, E., & Virza, M. (2013).**  
    SNARKs for C: Verifying Program Executions Succinctly and in Zero Knowledge.  
    In *CRYPTO* (pp. 90–108).

20. **Ben-Sasson, E., Chiesa, A., Riabzev, M., Spooner, N., Virza, M., & Ward, N. P. (2019).**  
    Aurora: Transparent Succinct Arguments for R1CS.  
    In *EUROCRYPT* (pp. 103–128).

21. **Ben-Sasson, E., Chiesa, A., & Spooner, N. (2016).**  
    Interactive Oracle Proofs.  
    In *TCC* (pp. 31–60).

22. **Ben-Sasson, E., Chiesa, A., Tromer, E., & Virza, M. (2014).**  
    Succinct Non-Interactive Zero Knowledge for a von Neumann Architecture.  
    In *USENIX* (pp. 781–796).

23. **Bitansky, N., Canetti, R., Chiesa, A., & Tromer, E. (2013).**  
    Recursive Composition and Bootstrapping for SNARKS and Proof-Carrying Data.  
    In *STOC* (pp. 111–120).

24. **Bootle, J., Cerulli, A., Chaidos, P., Groth, J., & Petit, C. (2016).**  
    Efficient Zero-Knowledge Arguments for Arithmetic Circuits in the Discrete Log Setting.  
    In *EUROCRYPT* (pp. 327–357).

25. **Bünz, B., Bootle, J., Boneh, D., Poelstra, A., Wuille, P., & Maxwell, G. (2018).**  
    Bulletproofs: Short Proofs for Confidential Transactions and More.  
    In *S&P* (pp. 315–334).

26. **Chase, M., Derler, D., Goldfeder, S., Orlandi, C., Ramacher, S., Rechberger, C., Slamanig, D., & Zaverucha, G. (2017).**  
    Post-Quantum Zero-Knowledge and Signatures from Symmetric-Key Primitives.  
    In *CCS* (pp. 1825–1842).

27. **Costello, C., Fournet, C., Howell, J., Kohlweiss, M., Kreuter, B., Naehrig, M., Parno, B., & Zahur, S. (2015).**  
    Geppetto: Versatile Verifiable Computation.  
    In *2015 IEEE Symposium on Security and Privacy, SP* (pp. 253–270).

28. **Damgård, I., & Ishai, Y. (2006).**  
    Scalable Secure Multiparty Computation.  
    In *CRYPTO* (pp. 501–520).

29. **Giacomelli, I., Madsen, J., & Orlandi, C. (2016).**  
    ZKBoo: Faster Zero-Knowledge for Boolean Circuits.  
    In *USENIX* (pp. 1069–1083).

30. **Goldwasser, S., Kalai, Y. T., & Rothblum, G. (2008).**  
    Delegating Computation: Interactive Proofs for Muggles.  
    In *STOC 2008* (pp. 113–122).

31. **Goldwasser, S., Kalai, Y. T., & Rothblum, G. N. (2015).**  
    Delegating Computation: Interactive Proofs for Muggles.  
    *J. ACM*, 62(4), 27:1–27:64.

32. **Goldwasser, S., Micali, S., & Rackoff, C. (1985).**  
    The Knowledge Complexity of Interactive Proof-Systems (Extended Abstract).  
    In *STOC* (pp. 291–304).

33. **Goldwasser, S., Micali, S., & Rackoff, C. (1989).**  
    The Knowledge Complexity of Interactive Proof Systems.  
    *SIAM J. Comput.*, 18(1), 186–208.

34. **Groth, J. (2009).**  
    Linear Algebra with Sub-linear Zero-Knowledge Arguments.  
    In *CRYPTO* (pp. 192–208).

35. **Groth, J. (2010).**  
    Short Pairing-Based Non-interactive Zero-Knowledge Arguments.  
    In *ASIACRYPT* (pp. 321–340).

36. **Ishai, Y., Kushilevitz, E., & Ostrovsky, R. (2007).**  
    Efficient Arguments without Short PCPs.  
    In *CCC* (pp. 278–291).

37. **Ishai, Y., Kushilevitz, E., Ostrovsky, R., & Sahai, A. (2007).**  
    Zero-Knowledge from Secure Multiparty Computation.  
    In *STOC* (pp. 21–30).

38. **Kalai, Y. T., & Raz, R. (2008).**  
    Interactive PCP.  
    In *ICALP* (pp. 536–547).

39. **Katz, J., Kolesnikov, V., & Wang, X. (2018).**  
    Improved Non-Interactive Zero Knowledge with Applications to Post-Quantum Signatures.  
    In *CCS* (pp. 525–537).

40. **Kilian, J. (1992).**  
    A Note on Efficient Zero-Knowledge Proofs and Arguments (Extended Abstract).  
    In *STOC* (pp. 723–732).

41. **Lipmaa, H. (2012).**  
    Progression-Free Sets and Sublinear Pairing-Based Non-Interactive Zero-Knowledge Arguments.  
    In *TCC* (pp. 169–189).

42. **Lund, C., Fortnow, L., Karloff, H. J., & Nisan, N. (1990).**  
    Algebraic Methods for Interactive Proof Systems.  
    In *FOCS* (pp. 2–10).

43. **Merkle, R. C. (1989).**  
    A Certified Digital Signature.  
    In *CRYPTO* (pp. 218–238).

44. **Micali, S. (1994).**  
    CS Proofs (Extended Abstracts).  
    In *FOCS* (pp. 436–453).

45. **Parno, B., Howell, J., Gentry, C., & Raykova, M. (2013).**  
    Pinocchio: Nearly Practical Verifiable Computation.  
    In *S&P* (pp. 238–252).

46. **Reingold, O., Rothblum, G. N., & Rothblum, R. D. (2016).**  
    Constant-Round Interactive Proofs for Delegating Computation.  
    In *STOC* (pp. 49–62).

47. **Shamir, A. (1990).**  
    IP = PSPACE.  
    In *FOCS* (pp. 11–15).

48. **Wahby, R. S., Setty, S. T. V., Ren, Z., Blumberg, A. J., & Walfish, M. (2015).**  
    Efficient RAM and Control Flow in Verifiable Outsourced Computation.  
    In *NDSS*.

49. **Wahby, R. S., Tzialla, I., Shelat, A., Thaler, J., & Walfish, M. (2018).**  
    Doubly-Efficient zkSNARKs without Trusted Setup.  
    In *2018 IEEE Symposium on Security and Privacy (SP)*. IEEE, (pp. 926–943).

50. **Wu, H., Zheng, W., Chiesa, A., Popa, R. A., & Stoica, I. (2018).**  
    DIZK: A Distributed Zero-Knowledge Proof System.  
    In *USENIX* (pp. 675–692).

51. **Xie, T., Zhang, J., Zhang, Y., Papamanthou, C., & Song, D. (2019).**  
    Libra: Succinct Zero-Knowledge Proofs with Optimal Prover Computation.  
    In *Advances in Cryptology (CRYPTO)*.

52. **Zhang, J., Xie, T., Zhang, Y., & Song, D. (2020).**  
    Transparent Polynomial Delegation and Its Applications to Zero-Knowledge Proof.  
    In *S&P 2020*.

53. **Zhang, Y., Genkin, D., Katz, J., Papadopoulos, D., & Papamanthou, C. (2017).**  
    vSQL: Verifying Arbitrary SQL Queries over Dynamic Outsourced Databases.  
    In *IEEE Symposium on Security and Privacy* (pp. 863–880).

54. **Zhang, Y., Genkin, D., Katz, J., Papadopoulos, D., & Papamanthou, C. (2017).**  
    A Zero-Knowledge Version of vSQL.  
    *Cryptology ePrint Archive*, 2017. (2017).

### Additional Experimental Results

#### DNA Profile Matching (DPM)
DNA profile matching (DPM) is an application considered in [13]. The server holds a database of DNA profiles and releases the commitment of the database. A client can query the database, resulting in three potential outcomes: match, no match, or partial match. The server then uses a zero-knowledge proof scheme to prove that the query result is carried out correctly, and the public can verify this statement.

The detailed computation is described in [13, Appendix E]. The number of constraints to test each DNA entry is 90,954 [13, Figure 4]. We estimate the performance of Ligero++ based on the size of R1CS constraints and present the numbers in Table 4.

| Number of Entries | Prover Time (s) | Verification Time (s) | Proof Size (KB) |
|-------------------|-----------------|-----------------------|-----------------|
| 16                | 0.84            | 0.15                  | 63              |
| 32                | 0.89            | 0.17                  | 118             |
| 64                | 0.92            | 0.21                  | 200             |

#### Batched Verification of ECDSA Signatures
Elliptic Curve Digital Signature Algorithm (ECDSA) is commonly used in cryptocurrencies to sign transactions. An important application of zero-knowledge proofs is to aggregate multiple ECDSA signatures and generate a proof for batched verification. The verification of each ECDSA signature consists of one hashing and several modulo exponentiations, and the number of constraints for one verification is 32,768 using SHA-256 as the hash function. We estimate the performance of Ligero++ for batched verification of ECDSA signatures in Table 5.

| \( n \) | Prover Time (s) | Verification Time (s) | Proof Size (KB) |
|---------|-----------------|-----------------------|-----------------|
| 1       | 2.6             | 0.15                  | 76              |
| 4       | 5.1             | 0.17                  | 100             |
| 16      | 15.7            | 0.21                  | 122             |
| 64      | 50.7            | 0.23                  | 146             |

As shown in the table, both the verification time and the proof size grow sub-linearly. Each ECDSA signature is 64 bytes and takes around 3.8 ms to verify. For \( n = 64 \) signatures, the verification time of our batch verification is already faster than verifying ECDSA signatures directly. We also estimate that the proof size will be smaller than the total size of signatures for \( n \geq 3,200 \), which is relevant for blockchain applications. The performance of our scheme demonstrates that we could potentially use batched verification to improve both the proof size and the verification time.