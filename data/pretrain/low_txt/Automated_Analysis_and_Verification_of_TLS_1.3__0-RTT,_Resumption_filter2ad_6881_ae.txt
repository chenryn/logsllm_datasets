### 3. Delayed Client Authentication and Session Hash

All handshake messages, excluding the Finished messages, are included in the session hash. Specifically, the session hash will contain `nc`, `ns`, and the session ticket PSK ID. This is one of the primary use cases for the delayed client authentication mode [46].

Notice that this session hash will match the one shared by Charlie and Bob. Therefore, the signature generated by Charlie will also be accepted by Bob. Consequently, Charlie can re-encrypt the signature for Bob, who will accept Aliceâ€™s certificate and verification as valid authentication for Charlie.

Charlie has thus successfully impersonated Alice to Bob and has full knowledge of the session keys. This enables Charlie to impersonate Alice in future communications with Bob, allowing him to forge messages or access confidential resources, and violate the secrecy of messages intended for Alice. Thus, the attack completely breaks client authentication.

### 5.2. Underlying Cause and Mitigation

The above attack is possible due to the lack of a strong binding between the client's signature and the server's identity. As a result, the attacker can reuse the signature to impersonate the client to the server. The second component of the attack involves the attacker's ability to force the two resumption sessions to have matching transcripts.

This suggests several potential mitigation strategies:

1. **Include the Server Certificate in the Handshake Hash:**
   - A direct approach would be to include the server certificate in the handshake hash. A similar fix is implemented in the 0-RTT case, where the server certificate is bound to the semi-static DH share. However, this solution complicates the out-of-band mechanism.

2. **Implement an Explicit Authentication Step:**
   - Another potential route might be to implement an explicit authentication step as part of the PSK mechanism, as suggested in Section 4.3.

In parallel with our analysis, the TLS Working Group has proposed several modifications to draft-10 in the move towards draft-11. One such proposal is PR#316 [47], which takes a different approach from [46] and explicitly allows client authentication in the context we analyze. Additionally, PR#316 redefines the client signature based on a new Handshake Context value, which includes the server Finished message. Intuitively, this new definition appears to address the attack because the adversary would need to force the Finished messages to match across the two sessions. However, the Finished message is bound to the PSK, which is derived from a previously authenticated session, whether using certificates or out-of-band mechanisms.

Our discussions with members of the TLS Working Group reveal that they were previously unaware of the possibility of this attack and the resulting strict necessity for a stronger binding between the client certificate and the security context that emerges from combining the PSK mode with client authentication.

### 6. Conclusions and Future Work

We modeled TLS 1.3 draft-10 in the Tamarin prover framework and verified the core security properties of the protocol in a complex setting involving an unbounded number of concurrent connections interacting in various protocol modes. We considered unilateral and mutual authentication modes with respect to an active Dolev-Yao adversary capable of long-term key reveal and perfect forward secrecy.

Our results provide the first supporting evidence for the security of several complex protocol mode interactions, implying the absence of a large class of attacks, many of which are not covered by other analysis methods, especially those that exploit the interaction between the various modes. This is a very encouraging result, as it shows that the core design underlying draft-10 is solid.

However, we found an attack on the delayed client authentication mechanism if it can be combined with a PSK-resumption handshake along the lines of the proposal in [46]. The attack we discovered showcases the complex interactions covered by our Tamarin analysis: it involves two initial handshakes, two PSK-resumption handshakes, and a client authentication exchange in which the adversary re-encrypts messages.

**Recommendations:**

- Since the TLS Working Group aims to include the functionality exploited by the attack, steps must be taken to ensure the resulting mechanism is secure.
- Our analysis suggests that some proposed changes to the signature contents (cf. PR#316, [47]) can prevent the attack.
- The TLS Working Group has confirmed that they were unaware that including the Finished messages in the client authentication was necessary to prevent this attack.
- The question remains whether the proposed remedy of adding the Finished messages to the handshake context of the client signature is indeed effective in preventing all such attacks. While we plan to give a conclusive answer to this question in the near future, we currently support the suggested inclusion.

We believe that a complete state machine, which would contain considerably more states and transitions to account for all the possible side-cases contained in draft-10, should be added to the final specification to avoid any ambiguity when the protocols are implemented or analyzed. Such ambiguities can lead to incorrect implementations and the inadvertent introduction of serious vulnerabilities, as pointed out in [10].

**Future Work:**

- Our Tamarin model is at the stage where it allows for checking both that basic security properties are maintained and that further tweaks and new functionalities achieve their goals. This places us in a position to provide valuable feedback to the TLS Working Group regarding suggested protocol changes, helping to accelerate the development process.
- Our rigorous analysis provides additional confidence in draft-10 and its successors, which is critical for such an important and elaborate protocol design.
- Our analysis cannot cover all aspects of TLS 1.3, such as the treatment of specific ciphers, which is beyond the scope of our current model. This is why our work is just one part of a larger, concerted effort to use various approaches in investigating the many facets of TLS 1.3.
- We note that the protocol has not yet been entirely finalized. However, many of the announced changes, such as reordering the arguments to hashes or merging/splitting some extensions, can be rapidly integrated into our analysis, thanks to our flexible modeling and automation support for a large number of proofs. This enables us to continue to help shape and support the choices in the design of TLS 1.3 through to its completion.