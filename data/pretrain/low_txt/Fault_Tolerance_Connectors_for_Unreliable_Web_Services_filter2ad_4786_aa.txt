# Fault Tolerance Connectors for Unreliable Web Services

**Authors:**
- Nicolas Salatgé
- Jean-Charles Fabre

**Affiliation:**
- LAAS-CNRS, 7 avenue du Colonel Roche, 31077 Toulouse Cedex 04, France
- Email: {nsalatge, fabre}@laas.fr

## Abstract

Web Services are commonly used to implement Service-Oriented Architectures (SOA), which are large-scale, distributed applications over the Internet. These applications, often highly dynamic and loosely coupled, can be unstable due to the unreliability of Web Services, which may be moved, deleted, or subject to various failures. This paper proposes customizable fault-tolerance connectors to enhance the reliability of unreliable Web Services, thereby bridging the gap between clients and Web Service providers. The connectors, designed by clients, providers, or dependability experts using the original WSDL description of the service, insert detection actions (e.g., runtime assertions) and recovery mechanisms (based on various replication strategies). The benefits of this approach are demonstrated experimentally.

## 1. Introduction

Web Services are widely used to develop Service-Oriented Architectures (SOA), which are large-scale, distributed applications over the Internet. Such applications primarily serve e-commerce, e-government, and other critical applications. The concept of a Web Service (WS) is a significant evolution from traditional solutions like service definition using IDLs, service discovery, and dynamic invocation interfaces, as in CORBA. The focus is on establishing contractual relationships between clients and Web Service providers through WSDL documents, which formally describe services that can be discovered dynamically over the Internet.

SOA-based applications are inherently dynamic, loosely coupled, and subject to frequent changes. Web Services used in these applications can be moved, deleted, or subjected to various sources of failures, or simply become unreachable due to communication faults. This is a common situation on the Web.

This paper introduces customizable fault-tolerance connectors to add fault tolerance to unreliable Web Services, thus filling the gap between clients and Web Service providers. These connectors are designed using the original WSDL description of the service and can be developed by clients, providers, or dependability experts. The connectors insert detection actions (e.g., runtime assertions) and recovery mechanisms (based on various replication strategies).

The paper is organized as follows: Section 2 defines the notion of a connector and describes the support infrastructure for developing, executing, and managing user-defined connectors. Section 3 focuses on the equivalence of service to leverage available resource redundancy over the Internet. The built-in replication mechanisms and strategies are discussed in Section 4. Section 5 summarizes the initial experiments carried out. Related work is addressed in Section 6, and Section 7 concludes the paper.

## 2. Basic Concepts and Architectural Issues

### 2.1. The Notion of "Connector"

The concept of a connector is a classic idea in Architecture Description Languages (ADLs), used to make explicit and customize interactions between components. Similar concepts have been used in other contexts (DCE, CORBA, EJB), but not yet to address fault tolerance issues in SOA. A Specific Fault Tolerance Connector (SFTC) is a software component that captures Web Service interactions and partially performs built-in fault tolerance actions.

**Figure 1. Role of Connectors**

The mechanisms provided by a connector include:
- User-defined runtime assertions that apply checks to input/output requests, along with built-in error detection and signaling mechanisms via SOAP exceptions returned to the client.
- Parameterized built-in recovery actions based on various replication models that can be selected by the user, depending on the target Web Service, especially state handling issues and features.
- Monitoring and error diagnosis of the targeted Web Services, collecting error information from access points and generating extended error reports.

To ensure the connector is a reliable software component, a specific language called DeWeL (DEpendable WEb service Language) was developed. DeWeL aims to prevent software faults using strong static (compile-time) and dynamic (runtime) verification of a finite set of language constructs for declaring recovery strategies and writing runtime assertions. The language imposes coding restrictions similar to those in standards like DO178B and CENELEC, such as no dynamic allocation, pointers, files, indexed array access, standard loops, functions, method overriding, recursive constructs, or external access to other users' data space or system resources.

These restrictions help prevent common software development faults, as classified by several industrial companies (e.g., IBM, HP) in ODC (Orthogonal Defect Classification). In [5], we provide more details on the restrictions imposed by the DeWeL language and the full development process.

Connectors can be developed by an SOA designer acting as a client, a Web Service provider, or any third party, such as a dependability expert. Combining connectors with the original Web Service leads to customized, reliable versions of the target WS, with a WSDL contract attached to any connector at the end of the development process.

### 2.2. Notion of Execution Models

The execution model describes the behavior of a connector at runtime. For each WS operation, a connector template has several pre-defined sections:
1. **Pre-processing and Post-processing**: Corresponding to assertions developed in DeWeL.
2. **Recovery Strategy**: Parameterized with the location of WS replicas (e.g., the six Amazon WS locations worldwide).
3. **Pre-defined Exceptions**: CommunicationException and ServiceException.

**Figure 2. The Linear Execution Model**

Several execution models are available, corresponding to user-selected recovery strategies. These models determine the scheduling of different actions defined in the template.

When no recovery mechanism is used, the execution model is linear. Figure 2 illustrates this mode of operation: if the pre-processing does not complete correctly, a user-defined runtime assertion raises an exception, which is directly returned to the client. Otherwise, the request is forwarded to the WS provider for processing. If the WS provider returns a response as a SOAP message, the post-processing is executed. If a communication or service exception is raised, the corresponding user-defined exception handling is performed before forwarding a SOAP exception to the client. Otherwise, the response is returned to the client.

This simple example illustrates the various recovery mechanisms and execution models described in Section 4.

### 2.3. Architectural Support

The management and execution of connectors rely on a specific platform, a third-party infrastructure between clients and WS providers. The storage, look-up, delivery, loading, monitoring, and execution of Specific Fault Tolerance Connectors are supported by IWSD (Infrastructure for Web Services Dependability). This framework provides transparent support for running fault-tolerance connectors.

**Figure 3. The IWSD Platform**

The IWSD platform, shown in Figure 3, includes a major component, the Dependability Server, responsible for loading connectors (request analysis, authentication, permission verification, etc.) and running them. This core component acts as a sort of middleware, ensuring the seamless integration and execution of connectors.

## 3. Equivalence of Service

To take advantage of available resource redundancy over the Internet, the connectors can use identical or equivalent service replicas. This section discusses how the connectors leverage these replicas to ensure the equivalence of service, even when the primary Web Service is unavailable or fails.

## 4. Replication Mechanisms and Strategies

This section details the built-in replication mechanisms and strategies provided by the connectors. These mechanisms range from simple switch to a spare WS replica to more complex error masking strategies. The selection of the appropriate strategy depends on the specific requirements and characteristics of the target Web Service.

## 5. Experimental Results

This section summarizes the first experiments carried out to validate the effectiveness of the proposed fault-tolerance connectors. The results demonstrate the benefits of the approach in enhancing the reliability of SOA applications.

## 6. Related Work

This section reviews related work in the field of fault-tolerant Web Services and compares it with the proposed approach. It highlights the unique contributions and advantages of the fault-tolerance connectors.

## 7. Conclusion

In conclusion, this paper presents a novel approach to enhancing the reliability of SOA applications by introducing customizable fault-tolerance connectors. These connectors, designed using the original WSDL description of the service, insert detection actions and recovery mechanisms to handle various types of failures. The experimental results demonstrate the effectiveness of the approach, making it a valuable tool for developers and dependability experts working with SOA.

---

**37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)**
0-7695-2855-4/07 $20.00 © 2007