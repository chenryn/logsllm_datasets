### Mobile Webpage Identification and Security Analysis

Mendoza et al. [17] identified mobile webpages by applying heuristics, such as subdomains, top-level domains (TLDs), and URL paths. Their study revealed over 2,000 websites with inconsistent security-related HTTP headers when served to desktop or mobile clients. These inconsistencies are partly attributed to the challenges of maintaining multiple versions of a website.

### Large-Scale Analyses of Web Security Mechanisms

Large-scale analyses of web security mechanisms have been instrumental in assessing the security awareness and efforts of website infrastructure operators. Van Goethem et al. [27] evaluated defensive security mechanisms and vulnerabilities across more than 22,000 European websites, developing a score to estimate the security level of each site. Stock et al. [24] conducted a longitudinal study on the adoption of security mechanisms, translating these into security awareness indicators and correlating them with related vulnerabilities. Tajalizadehkhoob et al. [25] measured security features on shared hosting platforms, using statistical inference to derive the security efforts of both website operators and hosting providers.

### Security Challenges on Mobile Devices

Browsing on mobile devices can be particularly vulnerable due to the unique environment, such as smaller screen sizes. Niu et al. [20] were the first to uncover additional phishing vectors across three mobile browsers, often due to URL truncation. Felt and Wagner [9] found that interactions between mobile applications and websites visited through mobile browsers can also facilitate phishing attacks. Amrutkar et al. [3] identified two classes of display security vulnerabilities in mobile browsers that were previously unseen in desktop versions. The authors later analyzed the visibility of security indicators in mobile browsers [4]. Luo et al. [16] studied the support for security mechanisms in mobile browsers over time, finding that while adoption is increasing, several popular mobile browsers still lack support for many of these mechanisms, which are already in use on popular websites.

### Conclusion

In this paper, we aimed to explore whether the security of mobile-first sites is comparable to that of their desktop counterparts. Through a large-scale analysis of various security features on 10,222 websites, we found that desktop sites generally exhibit a slightly higher prevalence and wider coverage of these features compared to mobile sites. Since mobile sites are typically developed by the same organization but several years after the desktop version, the minimal differences in the adoption and coverage of security features suggest that for many organizations, security is a retroactive effort consistently applied across all assets.

### Acknowledgments

This research was partially funded by the Research Fund KU Leuven. Victor Le Pochat holds a PhD Fellowship from the Research Foundation - Flanders (FWO).

### References

[1] Maarten Aertsen, Maciej Korczyński, Giovane Moura, Samaneh Tajalizadehkhoob, and Jan van den Berg. 2017. No domain left behind: is Let’s Encrypt democratizing encryption?. In Proceedings of the Applied Networking Research Workshop (ANRW 2017). ACM, 48–54.

[2] C. Amrutkar, Y. S. Kim, and P. Traynor. 2017. Detecting Mobile Malicious Webpages in Real Time. IEEE Transactions on Mobile Computing 16, 8 (Aug 2017), 2184–2197.

[3] Chaitrali Amrutkar, Kapil Singh, Arunabh Verma, and Patrick Traynor. 2012. VulnerableMe: Measuring Systemic Weaknesses in Mobile Browser Security. In Proceedings of the 8th International Conference on Information Systems Security (ICISS 2012). Springer, 16–34.

[4] C. Amrutkar, P. Traynor, and P. C. van Oorschot. 2015. An Empirical Evaluation of Security Indicators in Mobile Web Browsers. IEEE Transactions on Mobile Computing 14, 5 (May 2015), 889–903.

[5] Sajjad Arshad, Seyed Ali Mirheidari, Tobias Lauinger, Bruno Crispo, Engin Kirda, and William Robertson. 2018. Large-Scale Analysis of Style Injection by Relative Path Overwrite. In Proceedings of the 2018 World Wide Web Conference (WWW 2018). International World Wide Web Conferences Steering Committee, 237–246.

[6] Kayce Basques. 2018. Simulate Mobile Devices with Device Mode in Chrome DevTools. https://developers.google.com/web/tools/chrome-devtools/device-mode/.

[7] Frederik Braun and Mario Heiderich. 2013. X-Frame-Options: All about Clickjacking? “How else do X-Frame-Options protect my website”. https://cure53.de/xfo-clickjacking.pdf. (2013).

[8] Stefano Calzavara, Alvise Rabitti, and Michele Bugliesi. 2016. Content security problems?: Evaluating the effectiveness of content security policy in the wild. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS 2016). ACM, 1365–1375.

[9] Adrienne Porter Felt and David Wagner. 2011. Phishing on Mobile Devices. In Web 2.0 Security and Privacy 2011 (W2SP 2011).

[10] Gertjan Franken, Tom Van Goethem, and Wouter Joosen. 2018. Who left open the cookie jar? A comprehensive evaluation of third-party cookie policies. In Proceedings of the 27th USENIX Security Symposium. 151–168.

[11] Tobias Gondrom and David Ross. 2013. HTTP header field X-Frame-Options. https://tools.ietf.org/html/rfc7034. (2013).

[12] Mario Heiderich, Marcus Niemietz, Felix Schuster, Thorsten Holz, and Jörg Schwenk. 2012. Scriptless attacks: stealing the pie without touching the sill. In Proceedings of the 2012 ACM conference on Computer and communications security (CCS 2012). ACM, 760–771.

[13] Gareth Heyes. 2014. RPO. http://www.thespanner.co.uk/2014/03/21/rpo/.

[14] Dave S. Kerby. 2014. The Simple Difference Formula: An Approach to Teaching Nonparametric Correlation. Comprehensive Psychology 3 (Jan. 2014), 1:1–1:9.

[15] Victor Le Pochat, Tom Van Goethem, Samaneh Tajalizadehkhoob, Maciej Korczyński, and Wouter Joosen. 2019. Tranco: A Research-Oriented Top Sites Ranking Hardened Against Manipulation. In Proceedings of the 26th Annual Network and Distributed System Security Symposium (NDSS 2019).

[16] Meng Luo, Pierre Laperdrix, Nima Honarmand, and Nick Nikiforakis. 2019. Time Does Not Heal All Wounds: A Longitudinal Analysis of Security-Mechanism Support in Mobile Browsers. In Proceedings of the 26th Annual Network and Distributed System Security Symposium (NDSS 2019).

[17] Abner Mendoza, Phakpoom Chinprutthiwong, and Guofei Gu. 2018. Uncovering HTTP Header Inconsistencies and the Impact on Desktop/Mobile Websites. In Proceedings of the 2018 World Wide Web Conference (WWW 2018). ACM.

[18] Amanda K. Montoya and Andrew F. Hayes. 2017. Two-condition within-participant statistical mediation analysis: A path-analytic framework. Psychological Methods 22, 1 (2017), 6–27.

[19] Nick Nikiforakis, Luca Invernizzi, Alexandros Kapravelos, Steven Van Acker, Wouter Joosen, Christopher Kruegel, Frank Piessens, and Giovanni Vigna. 2012. You are what you include: large-scale evaluation of remote JavaScript inclusions. In Proceedings of the 2012 ACM conference on Computer and communications security (CCS 2012). ACM, 736–747.

[20] Yuan Niu, Francis Hsu, and Hao Chen. 2008. iPhish: Phishing Vulnerabilities on Consumer Electronics. In Proceedings of the 1st Conference on Usability, Psychology, and Security (UPSEC 2008).

[21] Gustav Rydstedt, Baptiste Gourdin, Elie Bursztein, and Dan Boneh. 2010. Framing Attacks on Smart Phones and Dumb Routers: Tap-jacking and Geo-localization. In Proceedings of the 4th USENIX Workshop on Offensive Technologies.

[22] Emily Schechter. 2018. A milestone for Chrome security: marking HTTP as "not secure". https://www.blog.google/products/chrome/milestone-chrome-security-marking-http-not-secure/.

[23] Statcounter. 2019. Desktop vs Mobile Market Share Worldwide - Jan 2014 - Dec 2018. http://gs.statcounter.com/platform-market-share/desktop-mobile/worldwide/#monthly-201401-201812.

[24] Ben Stock, Martin Johns, Marius Steffens, and Michael Backes. 2017. How the Web Tangled Itself: Uncovering the History of Client-Side Web (In)Security. In Proceedings of the 26th USENIX Security Symposium (USENIX Security 2017). USENIX Association, 971–987.

[25] Samaneh Tajalizadehkhoob, Tom Van Goethem, Maciej Korczyński, Arman Noroozian, Rainer Böhme, Tyler Moore, Wouter Joosen, and Michel van Eeten. 2017. Herding vulnerable cats: a statistical approach to disentangle joint responsibility for web security in shared hosting. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security (CCS 2017). ACM, 553–567.

[26] Herbert Van de Sompel, Michael L Nelson, Robert Sanderson, Lyudmila L Balakireva, Scott Ainsworth, and Harihar Shankar. 2009. Memento: Time travel for the web. arXiv preprint arXiv:0911.1112 (2009).

[27] Tom Van Goethem, Ping Chen, Nick Nikiforakis, Lieven Desmet, and Wouter Joosen. 2014. Large-scale security analysis of the web: Challenges and findings. In Proceedings of the 7th International Conference on Trust and Trustworthy Computing (TRUST 2014). Springer, 110–126.

[28] Lukas Weichselbaum, Michele Spagnuolo, Sebastian Lekies, and Artur Janc. 2016. CSP is dead, long live CSP! On the insecurity of whitelists and the future of content security policy. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS 2016). ACM, 1376–1387.

[29] Frank Wilcoxon. 1945. Individual Comparisons by Ranking Methods. Biometrics Bulletin 1, 6 (Dec. 1945), 80–83.

[30] Christoph Zauner. 2010. Implementation and benchmarking of perceptual image hash functions. http://www.phash.org/.

### Security Features

The increasing complexity of the modern web has introduced a wide variety of vulnerability classes. This section provides a brief summary of the most common ones and discusses some of the mechanisms used to mitigate them.

#### A.1 Cross-site scripting (XSS)

Most modern websites are dynamically composed with content from multiple sources, such as third-party services or data from GET or POST requests. A cross-site scripting (XSS) vulnerability occurs when a web page includes untrusted, attacker-controlled content without proper encoding or escaping. For example, if a developer does not correctly encode a query parameter, an attacker can inject malicious scripts that execute in the victim's browser.

#### A.2 Clickjacking

Clickjacking, or UI-redressing attacks, involve an adversary creating a malicious web page that includes a target web page with a button or other interactive element. When the user clicks on the visible element, they unknowingly perform an action on the hidden target page. On mobile browsers, tap-jacking can be used to trick users into clicking on specific locations by recreating parts of the visual browser environment, which become hidden when scrolling down.

#### A.3 X-Frame-Options

The X-Frame-Options response header, proposed in 2012, can prevent clickjacking attacks by allowing website administrators to control whether their pages can be included in frames. Recent work by Luo et al. [16] noted that the Allow-From directive of X-Frame-Options is not supported in Google Chrome, and instead, the frame-ancestors directive of Content Security Policy (CSP) is recommended.

#### A.4 Content-sniffing vulnerabilities

To mitigate attacks that exploit the browser's content-sniffing algorithm, the X-Content-Type-Options header with the value `nosniff` can be used. This header also prevents relative-path override (RPO) attacks, which exploit the inclusion of stylesheets from relative paths, leading to CSS injection under certain conditions.

#### A.5 Man-in-the-middle attacks

Initiatives like Let's Encrypt and Google Chrome's marking of HTTP pages as "Not Secure" have driven the adoption of TLS. However, man-in-the-middle (MITM) adversaries can still manipulate unencrypted requests and responses, highlighting the need for robust security measures.