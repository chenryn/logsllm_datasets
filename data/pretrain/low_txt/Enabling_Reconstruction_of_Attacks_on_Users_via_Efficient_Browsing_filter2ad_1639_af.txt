### Introduction

To store network traffic information for extended periods, Time Machine only captures the initial segment of each network connection. Despite these partial recordings, [19] demonstrates that this method is effective for analyzing security incidents. Krishnan et al. [21] propose a virtualization-based forensic engine to track and record access to data objects read from disk. This system follows the chain of access operations as objects are copied into memory and accessed by different processes, generating an audit log that enables the reconstruction of the sequence of data changes. Ma et al. [25] develop a low-cost audit logging system for Windows, aimed at enabling accurate attack investigation and significant log reduction.

### Instrumentation of Chrome

Instrumentation of Chrome has been proposed in various security contexts. For example, Bauer et al. [5] propose an information-flow tracking system that allows for enforcing fine-grained browser security policies. Excision [2] is an instrumentation of Chrome designed to detect and block the inclusion of malicious third-party content into web pages by tracking the origin of third-party content loaded as part of the page.

### ChromePic System

Our ChromePic system differs from previous approaches by introducing fine-grained logging in Chromium to enable the recording and post-mortem investigation of web-based attacks, with a particular focus on attacks with a significant visual component.

### Record-and-Replay Systems

ReVirt's primary goal is to enable whole-system record-and-replay [11]. It uses a virtualization-based approach to log detailed information about a VM's guest system execution instruction-by-instruction, allowing for deterministic replay of the entire system, including previously recorded intrusions. Other whole-system record-and-replay engines, such as PANDA [10], share similar goals. However, whole-system record-and-replay is resource-intensive and challenging to deploy on mobile devices. To address these issues, Neasbitt et al. propose WebCapsule [28], which aims to enable browser-level record-and-replay by instrumenting Blink, Chrome's rendering engine. While WebCapsule does not support fully deterministic replay, it is portable across multiple platforms, including mobile devices.

ChromePic differs from these systems as it does not aim to enable replay. Instead, it focuses on introducing very low overhead and recording detailed information about the browser's state to enable accurate reconstruction of web-based attacks, such as social engineering and phishing.

### Automated Incident Investigation

WebWitness [30] is an incident investigation system that leverages deep packet inspection to reconstruct the steps users take to reach social engineering or drive-by malware download pages. The system relies on full network packet traces to analyze both the content of web pages and the way in which the content is requested (e.g., by analyzing referrers and HTTP redirections), and can reconstruct the user's browsing path to the final attack page. Unlike WebWitness, which is based on heuristics and inference methods, ClickMiner [29] aims to reconstruct the path to an attack page by replaying network traces into an instrumented browser.

BackTracker [18] is a system for automatically reconstructing the sequence of steps an attacker takes to compromise a machine. Given an initial detection point, such as a malicious file identified by a security analyst, BackTracker traces back processes and files that have a causal relation to the detection point using OS-level logs. The result is a dependency graph that explains how the malicious file was introduced, potentially revealing the attacker's entry point. Taser [13] and RETRO [17] use OS-level logs to perform forward tracking to identify and recover from intrusions, while other recent works [22], [23], [26] have focused on improving the accuracy of backward- and forward-tracking of intrusions and reducing the space required for OS logs.

Our work differs from these systems in that ChromePic's main goal is to produce highly efficient, fine-grained browser logs. These logs could be used in the future to enhance the accuracy of automated incident investigation systems.

### Conclusion

In this paper, we presented ChromePic, a web browser equipped with a novel forensic engine designed to greatly enhance the browser's logging capabilities. ChromePic enables fine-grained post-mortem reconstruction and trace-back of web attacks without incurring the high overhead of record-and-replay systems. By recording a detailed snapshot of the state of a web page, including a screenshot and a "deep" DOM snapshot, at every significant interaction between the user and web pages, ChromePic can aid in the reconstruction of attacks and the trace-back of the user's steps leading to the attack page.

We developed ChromePic by implementing several careful modifications and optimizations to the Chromium code base to minimize overhead and make always-on logging practical. Using both real-world and simulated web attacks, we demonstrated that ChromePic can successfully capture and aid in the reconstruction of attacks on users. Our evaluation included the analysis of a social engineering download attack on Android, a phishing attack, and two different clickjacking attacks, as well as a user study to measure the overhead introduced by our forensic engine. The experimental results showed that browsing snapshots can be logged very efficiently, making the logging events practically unnoticeable to users.

### Acknowledgment

This material is based in part upon work supported by the National Science Foundation under grant No. CNS-1149051 and by the United States Air Force and Defense Advanced Research Agency (DARPA) under Contract No. FA8650-15-C-7562. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation or DARPA.

### References

[1] D. Akhawe, W. He, Z. Li, R. Moazzezi, and D. Song, “Clickjacking revisited: A perceptual view of UI security,” in 8th USENIX Workshop on Offensive Technologies (WOOT 14), Aug. 2014.
[2] S. Arshad, A. Kharraz, and W. Robertson, “Include me out: In-browser detection of malicious third-party content inclusions,” in Proceedings of the 20th International Conference on Financial Cryptography and Data Security (FC), 2016.
[3] L. Ballard, “No more deceptive download buttons,” 2016, https://security.googleblog.com/2016/02/no-more-deceptive-download-buttons.html.
[4] A. Barth, C. Jackson, and J. C. Mitchell, “Robust defenses for cross-site request forgery,” in Proceedings of the 15th ACM Conference on Computer and Communications Security, ser. CCS ’08, 2008.
[5] L. Bauer, S. Cai, L. Jia, T. Passaro, M. Stroucken, and Y. Tian, “Run-time monitoring and formal analysis of information flows in Chromium,” in Proceedings of the 22nd Annual Network and Distributed System Security Symposium, Feb. 2015.
[6] Chrome, “Background pages,” https://developer.chrome.com/extensions/background_pages.
[7] ——, “Extensions,” https://developer.chrome.com/extensions.
[8] D. E. Denning and D. K. Branstad, “A taxonomy for key escrow encryption systems,” Commun. ACM, vol. 39, no. 3, pp. 34–40, 1996.
[9] R. Dhamija, J. D. Tygar, and M. Hearst, “Why phishing works,” in Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, ser. CHI ’06, 2006.
[10] B. Dolan-Gavitt, J. Hodosh, P. Hulin, T. Leek, and R. Whelan, “Repeatable reverse engineering with PANDA,” in Proceedings of the 5th Program Protection and Reverse Engineering Workshop, ser. PPREW-5, 2015.
[11] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen, “ReVirt: Enabling intrusion analysis through virtual-machine logging and replay,” SIGOPS Oper. Syst. Rev., vol. 36, no. SI, Dec. 2002.
[12] R. Geambasu, J. P. John, S. D. Gribble, T. Kohno, and H. M. Levy, “Keypad: An auditing file system for theft-prone devices,” in Proceedings of the Sixth Conference on Computer Systems, ser. EuroSys ’11. ACM, 2011, pp. 1–16.
[13] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara, “The Taser intrusion recovery system,” in Proceedings of the Twentieth ACM Symposium on Operating Systems Principles, ser. SOSP ’05, 2005.
[14] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis, N. Provos, M. Z. Rafique, M. A. Rajab, C. Rossow, K. Thomas, V. Paxson, S. Savage, and G. M. Voelker, “Manufacturing compromise: The emergence of exploit-as-a-service,” in ACM Conference on Computer and Communications Security, ser. CCS ’12, 2012.
[15] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and C. Jackson, “Clickjacking: Attacks and defenses,” in Presented as part of the 21st USENIX Security Symposium (USENIX Security 12), 2012.
[16] SANS Institute, “A multi-level defense against social engineering,” https://www.sans.org/reading-room/whitepapers/engineering/multi-level-defense-social-engineering-920.
[17] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Intrusion recovery using selective re-execution,” in Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’10, 2010.
[18] S. T. King and P. M. Chen, “Backtracking intrusions,” in Proceedings of the Nineteenth ACM Symposium on Operating Systems Principles, ser. SOSP ’03, 2003.
[19] S. Kornexl, V. Paxson, H. Dreger, A. Feldmann, and R. Sommer, “Building a time machine for efficient recording and retrieval of high-volume network traffic,” in Proceedings of the 5th ACM SIGCOMM Conference on Internet Measurement, ser. IMC ’05, 2005.
[20] P. Kotzias, L. Bilge, and J. Caballero, “Measuring PUP prevalence and PUP distribution through pay-per-install services,” in 25th USENIX Security Symposium (USENIX Security 16), Aug. 2016.
[21] S. Krishnan, K. Z. Snow, and F. Monrose, “Trail of bytes: Efficient support for forensic analysis,” in Proceedings of the 17th ACM Conference on Computer and Communications Security, ser. CCS ’10, 2010.
[22] K. H. Lee, X. Zhang, and D. Xu, “High accuracy attack provenance via binary-based execution partition,” in NDSS, 2013.
[23] ——, “LogGC: Garbage collecting audit log,” in Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security, ser. CCS ’13, 2013.
[24] Linux Man Pages, “Chattr,” http://man7.org/linux/man-pages/man1/chattr.1.html.
[25] S. Ma, K. H. Lee, C. H. Kim, J. Rhee, X. Zhang, and D. Xu, “Accurate, low cost, and instrumentation-free security audit logging for Windows,” in Proceedings of the 31st Annual Computer Security Applications Conference, ser. ACSAC 2015, 2015.
[26] S. Ma, X. Zhang, and D. Xu, “ProTracer: Towards practical provenance tracing by alternating between logging and tainting,” in NDSS, 2016.
[27] Mozilla Developers Network, “Using images,” https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Using_images.
[28] C. Neasbitt, B. Li, R. Perdisci, L. Lu, K. Singh, and K. Li, “WebCapsule: Towards a lightweight forensic engine for web browsers,” in Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’15, 2015.
[29] C. Neasbitt, R. Perdisci, K. Li, and T. Nelms, “ClickMiner: Towards forensic reconstruction of user-browser interactions from network traces,” in Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’14, 2014.
[30] T. Nelms, R. Perdisci, M. Antonakakis, and M. Ahamad, “WebWitness: Investigating, categorizing, and mitigating malware download paths,” in Proceedings of the 24th USENIX Conference on Security Symposium, ser. SEC’15, 2015.