### Table of Contents

#### Chapter 14: Advanced BPF Tools
- **14.4.7 kmem (Page 657)**
- **14.4.8 kpages (Page 658)**
- **14.4.9 memleak (Page 659)**
- **14.4.10 slabratetop (Page 660)**
- **14.4.11 numamove (Page 661)**
- **14.4.12 workq (Page 663)**
- **14.4.13 Tasklets (Page 664)**
- **14.4.14 Other Tools (Page 665)**
- **14.5 BPF One-Liners (Page 666)**
  - **14.5.1 BCC (Page 666)**
  - **14.5.2 bpftrace (Page 666)**
- **14.6 BPF One-Liners Examples (Page 667)**
- **14.7 Challenges (Page 668)**
- **14.8 Summary (Page 669)**

#### Chapter 15: Containers
- **15.1 Background (Page 671)**
  - **15.1.1 BPF Capabilities (Page 673)**
  - **15.1.2 Challenges (Page 673)**
  - **15.1.3 Strategy (Page 676)**
- **15.2 Traditional Tools (Page 676)**
  - **15.2.1 From the Host (Page 676)**
  - **15.2.2 From the Container (Page 677)**
  - **15.2.3 systemdcgtop (Page 677)**
  - **15.2.4 kubectl top (Page 678)**
  - **15.2.5 docker stats (Page 678)**
  - **15.2.6 /sys/fs/cgroups (Page 679)**
  - **15.2.7 perf (Page 679)**
- **15.3 BPF Tools (Page 680)**
  - **15.3.1 runqlat (Page 680)**
  - **15.3.2 pidnss (Page 681)**
  - **15.3.3 blkthrot (Page 683)**
  - **15.3.4 overlayfs (Page 684)**
- **15.4 BPF One-Liners (Page 687)**
- **15.5 Optional Exercises (Page 687)**
- **15.6 Summary (Page 687)**

#### Chapter 16: Hypervisors
- **16.1 Background (Page 689)**
  - **16.1.1 BPF Capabilities (Page 691)**
  - **16.1.2 Suggested Strategies (Page 691)**
- **16.2 Traditional Tools (Page 692)**
- **16.3 Guest BPF Tools (Page 693)**
  - **16.3.1 Xen Hypercalls (Page 693)**
  - **16.3.2 xenhyper (Page 697)**
  - **16.3.3 Xen Callbacks (Page 699)**
  - **16.3.4 cpustolen (Page 700)**
  - **16.3.5 HVM Exit Tracing (Page 701)**
- **16.4 Host BPF Tools (Page 702)**
  - **16.4.1 kvmexits (Page 702)**
  - **16.4.2 Future Work (Page 706)**
- **16.5 Summary (Page 707)**

#### Part III: Additional Topics
- **Chapter 17: Other BPF Performance Tools (Page 709)**
  - **17.1 Vector and Performance Co-Pilot (PCP) (Page 709)**
    - **17.1.1 Visualizations (Page 710)**
    - **17.1.2 Visualization: Heat Maps (Page 711)**
    - **17.1.3 Visualization: Tabular Data (Page 713)**
    - **17.1.4 BCC Provided Metrics (Page 714)**
    - **17.1.5 Internals (Page 714)**
    - **17.1.6 Installing PCP and Vector (Page 715)**
    - **17.1.7 Connecting and Viewing Data (Page 715)**
    - **17.1.8 Configuring the BCC PMDA (Page 717)**
    - **17.1.9 Future Work (Page 718)**
    - **17.1.10 Further Reading (Page 718)**
  - **17.2 Grafana and Performance Co-Pilot (PCP) (Page 718)**
    - **17.2.1 Installation and Configuration (Page 719)**
    - **17.2.2 Connecting and Viewing Data (Page 719)**
    - **17.2.3 Future Work (Page 721)**
    - **17.2.4 Further Reading (Page 721)**
  - **17.3 Cloudflare eBPF Prometheus Exporter (with Grafana) (Page 721)**
    - **17.3.1 Build and Run the ebpf Exporter (Page 721)**
    - **17.3.2 Configure Prometheus to Monitor the ebpf_exporter Instance (Page 722)**
    - **17.3.3 Set Up a Query in Grafana (Page 722)**
    - **17.3.4 Further Reading (Page 723)**
  - **17.4 kubect-trace (Page 723)**
    - **17.4.1 Tracing Nodes (Page 723)**
    - **17.4.2 Tracing Pods and Containers (Page 724)**
    - **17.4.3 Further Reading (Page 726)**
  - **17.5 Other Tools (Page 726)**
  - **17.6 Summary (Page 726)**

- **Chapter 18: Tips, Tricks, and Common Problems (Page 727)**
  - **18.1 Typical Event Frequency and Overhead (Page 727)**
    - **18.1.1 Frequency (Page 728)**
    - **18.1.2 Action Performed (Page 729)**
    - **18.1.3 Test Yourself (Page 731)**
  - **18.2 Sample at 49 or 99 Hertz (Page 731)**
  - **18.3 Yellow Pigs and Gray Rats (Page 732)**
  - **18.4 Write Target Software (Page 733)**
  - **18.5 Learn Syscalls (Page 734)**
  - **18.6 Keep It Simple (Page 735)**
  - **18.7 Missing Events (Page 735)**
  - **18.8 Missing Stack Traces (Page 737)**
    - **18.8.1 How to Fix Broken Stack Traces (Page 738)**
  - **18.9 Missing Symbols (Function Names) When Printing (Page 738)**
    - **18.9.1 How to Fix Missing Symbols: JIT Runtimes (Java, Node.js, etc.) (Page 739)**
    - **18.9.2 How to Fix Missing Symbols: ELF Binaries (C, C++, etc.) (Page 739)**
  - **18.10 Missing Functions When Tracing (Page 739)**
  - **18.11 Feedback Loops (Page 740)**
  - **18.12 Dropped Events (Page 740)**

#### Part IV: Appendixes
- **Appendix A: bpftrace One-Liners (Page 741)**
- **Appendix B: bpftrace Cheat Sheet (Page 745)**
- **Appendix C: BCC Tool Development (Page 747)**
- **Appendix D: C BPF (Page 763)**
- **Appendix E: BPF Instructions (Page 783)**
- **Glossary (Page 789)**
- **Bibliography (Page 795)**
- **Index (Page 805)**

---

### Foreword
In 2012, I had to add a set of kernel features, but the "ingredients" I needed did not then exist. Instead of writing building blocks inside the kernel, I decided to create a "universal ingredient" that, when in the hands of a skilled programmer, could be both a layer 2 networking bridge and a layer 3 networking router inside the kernel. 

I had some important requirements: The "universal ingredient" had to be safe to consume, no matter the programming skills. A malicious or inexperienced developer should not be able to prepare a virus out of it. There was something already in the Linux kernel with similar properties called BPF (Berkeley Packet Filter): a minimal instruction set used to filter packets before they are seen by an application such as `tcpdump`. I borrowed that name for my "ingredient" and called it eBPF, where 'e' stands for 'extended'.

Several years later, the distinction between eBPF and classic BPF has vanished. My "universal ingredient" has taken over under the name BPF. Well-known corporations have built large systems out of it to provide services to billions of people. Its foundational principle of safety by design allows many "cooks" to become world-renowned "chefs."

The first BPF chef was Brendan Gregg. He saw that, in addition to its uses in networking and security, BPF could be used for performance analysis, introspection, and observability. I hope this book will become your favorite "cookbook," where you can learn from a master chef how to use BPF in your Linux kitchen.

**Alexei Starovoitov**
**Seattle, Washington**
**August, 2019**

---

### Preface
In July 2014, Alexei Starovoitov visited the Netflix offices in Los Gatos, California, to discuss a fascinating new technology he was developing: extended Berkeley Packet Filter (eBPF). BPF was an obscure technology for improving packet filter performance, and Alexei had a vision of extending it far beyond packets. He was working with another network engineer, Daniel Borkmann, to turn BPF into a general-purpose virtual machine capable of running advanced networking and other programs. It was an incredible idea. A use case that interested me was performance analysis tools, and I saw how this BPF could provide the programmatic capabilities I needed. We made an agreement: If Alexei made it connect to more than just packets, I'd develop the performance tools to use it.

BPF can now attach to any event source and has become the hot new technology in systems engineering, with many active contributors. To date, I have developed and published more than 70 BPF performance analysis tools, which are in use worldwide and are included by default on servers at Netflix, Facebook, and other companies. For this book, I've developed many more and have also included tools from other contributors. It's my privilege to share this work here in *BPF Performance Tools* to give you practical tools that you can use for performance analysis, troubleshooting, and more.

As a performance engineer, I am obsessed with using performance tools to leave no stone unturned. Blind spots in systems are where performance bottlenecks and software bugs hide. My prior work used the DTrace technology, and included my 2011 Prentice Hall book *DTrace: Dynamic Tracing in Oracle Solaris, Mac OS X, and FreeBSD*, where I shared the DTrace tools I had developed for those operating systems. It's exciting to now be able to share similar tools for Linuxâ€”tools that can do and see even more.

#### Why Do You Need BPF Performance Tools?
BPF performance tools can help you get the most out of your systems and applications by helping you improve performance, reduce costs, and solve software issues. They can analyze much further than traditional tools and allow you to pose arbitrary questions of the system and get answers immediately, in production environments.

#### About This Book
This book is about BPF tools as used primarily for observability and performance analysis, but these tools have other uses as well, such as software troubleshooting and security analysis. The hardest part about learning BPF is not how to write the code; you can learn any of the interfaces in a day or so. The challenge is knowing what to do with it and understanding the available events. This book helps to answer that question by giving you the necessary background and examples of BPF performance tools, with example output from Netflix production servers.

BPF observability is a superpower, but only because it extends our visibility into systems and applications. This book explains when to use traditional performance analysis tools, including `iostat(1)` and `perf(1)`, and when to use BPF tools. The traditional tools, also summarized in this book, may solve performance problems outright, and when they do not, they provide useful context and clues for further analysis with BPF.

Many of the BPF tools in this book are from the BCC and bpftrace repositories, which are part of the Linux Foundation IO Visor project. These are open source and available for free, not only from the repository websites but also packaged for various Linux distributions. I have also written many new bpftrace tools for this book, and I include their source code here.

These tools were not created to arbitrarily demonstrate various BPF capabilities. They were created to do battle in production environments. These are the tools I've needed for solving production issues beyond the abilities of the current analysis toolset.

For the tools written in bpftrace, the source code has been included in the book. If you wish to understand the inner workings of these tools, you can also learn by example from the many source code listings here. This source code helps explain what each tool is doing and the events they instrument: It is like including pseudocode that you can run.

The BCC and bpftrace front ends are reaching maturity, but it is possible that future changes will cause some of the source code included in this book to stop working and require updates. If a tool originates in BCC or bpftrace, check those repositories for updated versions. If a tool originated in this book, check this bookâ€™s website: [http://www.brendangregg.com/bpf-performance-tools-book.html](http://www.brendangregg.com/bpf-performance-tools-book.html). What matters most is not that a tool works, but that you know about the tool and want it to work. The hardest part with BPF tracing is knowing what to do with it; even broken tools are a source of useful ideas.

#### New Tools
To provide you with a comprehensive set of analysis tools that double as code examples, more tools have been added. In diagrams, preexisting tools appear in black text, and the new tools created for this book appear in red or gray (depending on the version of the book you're reading). Both preexisting and new tools are covered in this book, though many later diagrams do not use the red/gray/black color scheme to differentiate them.

#### About GUIs
Some of the BCC tools have already become sources of metrics for GUIsâ€”providing time series data for line graphs, stack traces for flame graphs, or per-second histograms for heat maps. I expect that more people will use these BPF tools via GUIs than will use the tools directly. Regardless of how you end up using them, they can provide a wealth of information. This book explains their metrics, how to interpret them, and how to create new tools yourself.

#### About Linux Versions
Throughout this book, many Linux technologies are introduced, often with the kernel version number and year they appeared. I sometimes named the developers of the technology as well, so that you can recognize supporting materials written by the original authors. Extended BPF was added to Linux in parts. The first part was added in Linux 3.18 in 2014, and more has been added throughout the Linux 4.x and 5.x series since then. To have sufficient capabilities available to run the BPF tools in this book, Linux 4.9 or higher is recommended. The examples in this book are taken from Linux 4.9 to 5.3 kernels.

#### What This Book Does Not Cover
BPF is a large topic, and there are many use cases outside BPF performance tools that are not covered in this book. These include BPF for software-defined networking, firewalls, container security, and device drivers.

This book focuses on using bpftrace and BCC tools, as well as on developing new bpftrace tools, but it does not cover developing new BCC tools. The BCC source listings are usually too long to include, but some examples have been provided as optional content in Appendix C. There are also examples of tool development using C programming in Appendix D and BPF instructions in Appendix E, which may also be useful for those wishing to gain a deeper understanding of how BPF tools work.

This book does not specialize in the performance of one language or application. Other books do that, and they also cover language debugging and analysis tools. You are likely to use some of these other tools alongside BPF tools to solve problems, and you will find that the different toolsets can be complementary, each providing different clues. Basic systems analysis tools from Linux are included here, so that you can find easy wins without having to reinvent any wheels before moving to BPF tools that can help you see further.

This book includes a brief summary of the background and strategy for each analysis target. These summaries are based on my experience and previous work, such as *Systems Performance: Enterprise and the Cloud* [Gregg 13b].

#### How This Book Is Structured
There are three parts to this book. The first part, Chapters 1 to 5, covers the background needed for BPF tracing: performance analysis, kernel tracing technologies, and the two core BPF tracing front ends: BCC and bpftrace.

The second part spans Chapters 6 to 16 and covers BPF tracing targets: CPUs, memory, file systems, disk I/O, networking, security, languages, applications, the kernel, containers, and hypervisors. While you could study these chapters in order, the book is designed to support skipping to a chapter of particular interest to you. These chapters all follow a similar format: background discussion, analysis strategy suggestions, and then specific BPF tools. Functional diagrams are included to guide you through complex topics and help you build mental maps of what you are instrumenting.

The last part, spanning Chapters 17 and 18, covers some additional topics: other BPF tools, and tips, tricks, and common problems.

The appendixes provide bpftrace one-liners and a bpftrace cheat sheet, introductions for BCC tool development, C BPF tool development including via `perf(1)` (the Linux tool), and a BPF instructions summary.

#### Intended Audience
This book is designed to be useful to a wide range of people. No coding is necessary to use the BPF tools in this book: You can use it as a cookbook of prewritten tools that are ready for you to run. If you do wish to write code, all the included code and Chapter 5 will help you learn to quickly write your own tools.

A background in performance analysis is also not necessary; each chapter summarizes the necessary background details. Specific audiences for this book include:

- **Systems administrators, site reliability engineers, database administrators, performance engineers, and support staff** responsible for production systems can use this book as a resource for diagnosing performance issues, understanding resource usage, and troubleshooting problems.
- **Application developers** can use these tools to analyze their own code and instrument their code along with system events. For example, disk I/O events can be examined along with the application code that triggered them. This provides a more complete view of behavior, beyond application-specific tools that have no direct visibility into kernel events.
- **Security professionals** can use BPF to monitor and detect suspicious activity, and even create whitelists of normal activity (see Chapter 11).
- **Performance monitoring developers** can use this book to get ideas about adding new observability to their products.
- **Kernel developers** can learn how to write bpftrace one-liners for debugging their own code.
- **Students** studying operating systems and applications can use BPF instrumentation to analyze the running system in new and custom ways. Instead of learning about abstract kernel technologies on paper, students can trace them and see how they operate live.

So that this book can focus on the application of BPF tools, it assumes a minimum knowledge level for the topics covered, including basic networking (such as what an IPv4 address is) and command line usage.

#### Source Code Copyright
This book contains the source code to many BPF tools. Each tool has a footnote to explain its origin: whether it comes from BCC, bpftrace, or was written for this book. For any tool from BCC, the license and copyright notice are included in the full source of these tools released in the BCC repository, and this notice should not be removed when sharing or porting these tools.

The following is the copyright notice for the new tools I developed for this book. This notice is included in the full source of these tools released in the book repository, and this notice should not be removed when sharing or porting these tools:

- **Copyright 2019 Brendan Gregg.**
- **Licensed under the Apache License, Version 2.0 (the "License").**
- **This was originally created for the BPF Performance Tools book published by Addison Wesley. ISBN13: 9780136554820.**
- **When copying or porting, include this comment.**

It is expected that some of these tools will be included in commercial products to provide advanced observability, as has been the case with my earlier tools. If a tool originated from this book, please provide attribution in the production documentation for this book, the BPF technology, and me.

#### Figure Attributions
- **Figures 17-02 to 17-09: Vector screenshots, 2016 Netflix, Inc.**

---

This optimized version of the text is more organized, clear, and professional, making it easier to read and understand.