### SSL Libraries and Their Vulnerabilities

Several studies have highlighted the inherent design flaws in SSL libraries [19]. Brubaker et al. specifically targeted SSL libraries, generating 8 million random permutations of valid X509 certificates to perform differential testing and uncover hundreds of certificate validation discrepancies [7]. Akhawe et al. [2] examined TLS errors on the web and noted differences with results from OpenSSL. While these studies offer recommendations based on their findings, they do not provide a mechanism for retrofitting changes into existing applications, which we address with CertShim.

### Large-Scale Automated Dynamic Analysis

Large-scale automated dynamic analysis of SSL usage requires an understanding of application semantics to trigger SSL connections. This is challenging on general computing platforms due to the diversity of languages, code paths, and SSL implementations. However, recent work has leveraged the constrained interfaces of mobile platforms to perform large-scale analysis. For instance, SMV-Hunter uses knowledge of the X509TrustManager interface and Android WindowManager to automate user interface actions, triggering SSL connections in hundreds of Android apps to detect Man-in-the-Middle (MitM) vulnerabilities [43]. MalloDroid performs static analysis to identify deviant SSL usage in thousands of apps but requires manual auditing to confirm vulnerabilities [16].

### Recommendations and System-Wide Defenses

While the above studies offered general recommendations for improving the SSL ecosystem, such as enhanced app market testing [16], clarifying SSL APIs [19], or communicating vulnerabilities to developers [7], they did not introduce system-wide defenses against SSL vulnerabilities in legacy software. An exception is Fahl et al.'s Rethinking SSL work, which introduced an Android patch that significantly improves app security through user interface warnings, device-specific developer options, and forced certificate and hostname validation [17]. Our approach, CertShim, also introduces a platform-wide defense but does not require manufacturer updates or administrator privileges. Additionally, while Fahl et al. left pluggable certificate verification for future work, we introduce four such modules and the ability to use them in tandem through policy-specified consensus votes. CertShim operates in a more complex environment, considering various SSL implementations, and provides a policy engine for application- or domain-specific certificate handling.

### Invasive Strategies for SSL Protection

Other works have adopted invasive strategies to protect SSL, often mirroring attack behaviors. MYTHIS uses a local MitM network proxy as an SSL security layer on Android, detecting rogue access points but not attacks near the server or network interior [11, 40]. Huang et al. embedded flash scripts in browser code to "phone home" to the server, allowing websites to detect the presence of forged certificates [24]. CertShim similarly hijacks dynamic library calls but offers a more general solution that supports multiple trust models and detects a wider range of attacks.

### Similar Deployment Strategies

Several proposals in the literature adopt deployment strategies similar to CertShim. Provos et al. [36] implemented privilege separation (Privsep), modifying a small portion of the OpenSSH source code to allow different parts of an application to run at different privilege levels, demonstrating interoperability and negligible performance costs. Watson et al. [46] presented Capsicum, a capability-based sandboxing mechanism for UNIX, introducing a library that replaces basic UNIX operations like fork and exec. They provided Capsicum-compliant versions of several popular utilities and demonstrated small overheads on modified system calls. The DNSSEC-Tools project provided Libval, a shim for the DNS library that facilitated the rapid adoption of DNSSEC [44]. Our work differs from Libval in targeting multiple SSL implementations used by a greater diversity of programs, overriding additional functions in the Linux networking stack to track SSL flow context, and employing a modular design that supports multiple verification methods.

### Conclusion

This paper introduces CertShim, a mechanism that immediately enhances the security of Internet communications by interposing on SSL APIs and even allows the retrofitting of legacy software to support SSL trust enhancements such as Convergence and DANE. We have also presented a practical mechanism for polling the results of multiple verification methods, further promoting the adoption of CA alternatives. We have shown that 94% of SSL usage in Ubuntu's most commonly installed packages are supported by CertShim, and it secures applications against some of the most infamous SSL vulnerabilities explored in the literature. This work significantly increases system-wide security of SSL communications in non-browser software while reducing the barriers to evaluating and adopting alternative proposals to the certificate authority system.

### Acknowledgments

We would like to thank Paul van Oorschot, Jeremy Clark, Patrick Traynor, and Boyana Norris for their valuable comments and insight. This work is supported in part by the US National Science Foundation under grant numbers CNS-1118046 and CNS-1254198. Braden Hollembaek was funded in part through an NSF REU supplement.

### Availability

Source code for CertShim will be made available from our lab website at http://sensei.ufl.edu.

### Additional Authors

Abdulrahman Alkhelaiﬁ, University of Oregon.

### References

[1] libconfig - c/c++ configuration file library. Available: http://www.hyperrealm.com/libconfig/.

[2] Akhawe, D., Amann, B., Vallentin, M., and Sommer, R. Here’s My Cert, So Trust Me, Maybe? Understanding TLS Errors on the Web. In Proceedings of the 22nd International World Wide Web Conference (WWW 2013) (Rio de Janeiro, Brazil, May 2013).

[3] Alicherry, M., and Keromytis, A. D. Doublecheck: Multi-path Verification Against Man-in-the-Middle Attacks. In Computers and Communications, 2009. ISCC 2009. IEEE Symposium on (2009), IEEE, pp. 557–563.

[4] Amann, B., Sommer, R., Vallentin, M., and Hall, S. No Attack Necessary: The Surprising Dynamics of SSL Trust Relationships. In ACSAC ’13: Proceedings of the 29th Annual Computer Security Applications Conference (Dec. 2013).

[5] Arkko, J., and Nikander, P. Weak Authentication: How to Authenticate Unknown Principals without Trusted Parties. In Security Protocols, B. Christianson, B. Crispo, J. Malcolm, and M. Roe, Eds., vol. 2845 of Lecture Notes in Computer Science. Springer Berlin Heidelberg, 2004, pp. 5–19.

[6] Bernat, A. R., and Miller, B. P. Anywhere, Any-time Binary Instrumentation. In Proceedings of the 10th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools (New York, NY, USA, 2011), PASTE ’11, ACM, pp. 9–16.

[7] Brubaker, C., Jana, S., Ray, B., Khurshid, S., and Shmatikov, V. Using Frankencerts for Automated Adversarial Testing of Certificate Validation in SSL/TLS Implementations. In Proceedings of the 2014 IEEE Symposium on Security and Privacy (San Jose, CA, May 2014).

[8] Buck, B., and Hollingsworth, J. K. An API for Runtime Code Patching. Int. J. High Perform. Comput. Appl. 14, 4 (Nov. 2000), 317–329.

[9] Carly, R. Internet Security provider Comodo’s CEO Named “Entrepreneur of the Year” by Info Security Products Guide. Available: http://www.comodo.com/news/press_releases/2011/02/comodo-CEO-entrepreneur-of-the-Year-infosecurity-global-excellence-award.html, February 2011.

[10] Clark, J., and van Oorschot, P. C. SoK: SSL and HTTPS: Revisiting Past Challenges and Evaluating Certificate Trust Model Enhancements. In Proceedings of the 2013 IEEE Symposium on Security and Privacy (San Francisco, CA, May 2013).

[11] Conti, M., Dragoni, N., and Gottardo, S. MITHYS: Mind The Hand You Shake - Protecting Mobile Devices from SSL Usage Vulnerabilities. In Security and Trust Management, R. Accorsi and S. Ranise, Eds., vol. 8203 of Lecture Notes in Computer Science. Springer Berlin Heidelberg, 2013, pp. 65–81.

[12] Ducklin, P. The TURKTRUST SSL Certificate Fiasco – What Really Happened, and What Happens Next? Available: http://nakedsecurity.sophos.com/2013/01/08/the-turktrust-ssl-certificate-fiasco-what-happened-and-what-happens-next/, January 2013.

[13] Eastlake, D., et al. Transport Layer Security (TLS) Extensions: Extension Definitions.

[14] Eckersley, P. Sovereign Key Cryptography for Internet Domains, 2011.

[15] Edge, J. Mozilla and CNNIC. Available: http://lwn.net/Articles/372386/, February 2010.

[16] Fahl, S., Harbach, M., Muders, T., Baumgärtner, L., Freisleben, B., and Smith, M. Why Eve and Mallory Love Android: An Analysis of Android SSL (in)Security. In Proceedings of the 2012 ACM Conference on Computer and Communications Security (New York, NY, USA, 2012), CCS ’12, ACM, pp. 50–61.

[20] Gibbs, S. Heartbleed Bug: What Do You Actually Need to do to Stay Secure? Available: http://www.theguardian.com/technology/2014/apr/10/heartbleed-bug-everything-you-need-to-know-to-stay-secure.

[21] Grigg, I. VeriSign’s Conflict of Interest Creates New Threat. Financial Cryptography 1 (September 2004).

[22] Hickman, K., and Elgamal, T. The SSL Protocol. Netscape Communications Corp 501 (1995).

[23] Hoffman, P., and Schlyter, J. The DNS-Based Authentication of Named Entities (DANE) Transport Layer Security (TLS) Protocol: TLSA. Tech. rep., RFC 6698, August, 2012.

[24] Huang, L.-S., Rice, A., Ellingsen, E., and Jackson, C. Analyzing Forged SSL Certificates in the Wild.

[25] Laurenzano, M., Tikir, M., Carrington, L., and Snavely, A. PEBIL: Efficient static binary instrumentation for Linux. In Performance Analysis of Systems Software (ISPASS), 2010 IEEE International Symposium on (March 2010), pp. 175–183.

[26] Laurie, B., Langley, A., and Kasper, E. Certificate Transparency. Available: ietf.org-Certificate Transparency (06.01. 2013) (2013).

[27] Liang, J., Jiang, J., Duan, H., Li, K., Wan, T., and Wu, J. When HTTPS Meets CDN: A Case of Authentication in Delegated Service.

[28] Marlinspike, M. More tricks for defeating SSL in practice. Black Hat USA (2009).

[29] Marlinspike, M. New tricks for defeating SSL in practice. BlackHat DC (Feb. 2009).

[30] Marlinspike, M. SSL and the Future of Authenticity. Black Hat USA (2011).

[31] Marlinspike, M. Trust Assertions for Certificate Keys.

[32] Mills, E. Comodo: Web Attack Broader Than Initially Thought. CNET. Available: http://news.cnet.com/8301-27080_3-20048831-245.html?part=rss&tag=feed&subj=InSecurityComplex, March 2011.

[33] Myers, M. Revocation: Options and challenges. In Financial Cryptography (1998), Springer, pp. 165–171.

[34] Pennarun, A., Allombert, B., and Reinholdtsen, P. Ubuntu Popularity Contest. Available: http://popcon.ubuntu.com/.

[35] Pieter Lexis. SWEDE - A Tool To Create and Verify TLSA (DANE) Records. Available: https://github.com/pieterlexis/swede.

[36] Provos, N., Friedl, M., and Honeyman, P. Preventing Privilege Escalation. In Proceedings of the 12th USENIX Security Symposium (2003), pp. 231–242.

[37] Psyced.org. Certificate Patrol. Available: http://patrol.psyced.org/.

[38] Rivest, R. L. Can We Eliminate Certificate Revocation Lists? In Financial Cryptography (1998), Springer, pp. 178–183.

[39] Sandvik, R. Security Vulnerability Found in Cyberoam DPI Devices (CVE-2012-3372). Available: https://blog.torproject.org/blog/security-vulnerability-found-cyberoam-dpi-devices-cve-2012-3372, July 2012.

[40] Shetty, S., Song, M., and Ma, L. Rogue Access Point Detection by Analyzing Network Traffic Characteristics. In Military Communications Conference, 2007. MILCOM 2007. IEEE (Oct 2007), pp. 1–7.

[41] Singel, R. Law Enforcement Appliance Subverts SSL. Available: http://www.wired.com/threatlevel/2010/03/packet-forensics, March 2010.

[42] Soghoian, C., and Stamm, S. Certified Lies: Detecting and Defeating Government Interception Attacks Against SSL. In Financial Cryptography and Data Security. Springer, 2012, pp. 250–259.

[43] Sounthiraraj, D., Sahs, J., Greenwood, G., Lin, Z., and Khan, L. SMV-HUNTER: Large Scale, Automated Detection of SSL/TLS Man-in-the-Middle Vulnerabilities in Android Apps. In Proceedings of the 19th Network and Distributed System Security Symposium. (2014).

[44] SPARTA, Inc. DNSSECTools: DNSSEC Software Libraries and Tools. Available: http://www.dnssec-tools.org/.

[45] Vratonjic, N., Freudiger, J., Bindschaedler, V., and Hubaux, J.-P. The Inconvenient Truth About Web Certificates. In Economics of Information Security and Privacy III, B. Schneier, Ed. Springer New York, 2013, pp. 79–117.

[46] Watson, R., Anderson, J., Laurie, B., and Kennaway, K. Capsicum: Practical Capabilities for UNIX. In Proceedings of the 19th USENIX Security Symposium (2010).

[47] Wendlandt, D., Andersen, D. G., and Perrig, A. Perspectives: Improving SSH-style Host Authentication with Multi-Path Probing. In USENIX 2008 Annual Technical Conference (Boston, MA, 2008), ATC’08, pp. 321–334.