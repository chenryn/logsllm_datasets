# 6.2.3 Hunspell

Hunspell is a widely used spell checker. Xu et al. identified that Hunspell is vulnerable to page-level controlled-channel attacks due to its input-dependent access pattern to data pages [43]. However, its control flow was initially considered immune to side-channel attacks. Nevertheless, as shown in Table 2, ANABLEPS has identified various control-flow side-channel vulnerabilities that could be exploited by attackers.

With the help of ANABLEPS, we focused on the `get_parser()` function in Hunspell, where `std::sort(vector.begin(), vector.end())` is called to sort the data in the vector. We found that this function exhibits both cache-level and branch-level order-based vulnerabilities, as well as page-level time-based vulnerabilities. This function is implemented in the C++ standard library. After compilation, the linear insertion algorithm is used in the sort function, as shown in the assembly code snippet in Figure 4. According to the code snippet of `get_parser()`, the `_unguarded_linear_insert()` function is called when an element from the unsorted vector is to be inserted into the sorted vector. By monitoring the execution sequence involving this function, an attacker can infer the number of elements being sorted at the page, cache, and branch levels. Additionally, `_unguarded_linear_insert()` contains a loop to compare the element to be inserted with the elements already in the sorted vector. The number of loops in `_unguarded_linear_insert()` reflects the number of comparisons during the insertion, which can be used to infer the location of the element after the insertion.

Such leakage can be easily identified in Gps with time-based vulnerability. A subgraph of \( G_i^p \) for a particular input \( I_i \) is shown in Figure 5. The edge \( n0 \rightarrow n1 \) is executed four times, indicating that four elements are being sorted. The elements in the Time list of node \( n1 \) reveal the number of comparisons in `_unguarded_linear_insert()`: the first element corresponds to no comparison, the second element corresponds to one comparison, and the third and fourth elements correspond to two comparisons. Therefore, the page-level order-based vulnerability in Hunspell, or more precisely, the sort algorithm implemented in the standard C++ library, can only leak the number of elements to be sorted. However, the time-based vulnerability can be exploited to leak the list to be sorted if the sorting result is known. We specifically tested the sort algorithm by providing a set of \( |I| \) unsorted lists that correspond to the same sorted list after sorting. As expected, ANABLEPS reported \( |E(p, I)| = |I| \) for this set of inputs.

# 7 Limitations and Future Work

Although we have demonstrated that ANABLEPS is capable of identifying side-channel vulnerabilities in enclave binaries, our work is still in its early stages, and there are several avenues for future research. 

First, the current design only considers side-channel vulnerabilities due to secret-dependent control flows. Leakages due to secret-dependent data accesses are currently out of scope. Interestingly, differences in data access patterns caused by divergence in the control flow can be identified by ANABLEPS's control-flow-based vulnerability analysis. What ANABLEPS misses are memory pointers or array indexes determined by secret values. Extending ANABLEPS to handle these vulnerabilities is a future goal.

Second, while ANABLEPS has integrated state-of-the-art input generation tools such as fuzzing and concolic execution, it still cannot generate the complete set of inputs. Currently, we rely on developers' knowledge to address this limitation, as they have the best understanding of the semantic of the enclave program and its input space. Any advancements in test case generation will improve ANABLEPS.

Third, the capability of the constraint solver is limited. Given an input to a program, ANABLEPS relies on symbolic execution to collect constraints. These constraints are solved by a constraint solver to determine the size of \( G_i \)'s input space. However, not all constraints can be solved (e.g., hash functions), and some may take too much time to solve. Currently, ANABLEPS requires the solver to return the result within 90 minutes; otherwise, it is considered unsolvable. Any advancement in constraint solvers will make ANABLEPS more efficient.

# 8 Conclusion

In conclusion, we designed and implemented ANABLEPS, a software tool for automatically vetting side-channel vulnerabilities in SGX enclave programs. ANABLEPS is the first side-channel vulnerability analysis tool that considers both the time and order of a program's memory access patterns. It leverages concolic execution and fuzzing techniques to generate input sets for arbitrary enclave programs, constructs extended dynamic control-flow graph representations of execution traces using Intel PT, and automatically analyzes and identifies side-channel vulnerabilities using graph analysis. With ANABLEPS, we have uncovered a large number of side-channel leaks in the enclave binaries we tested. Our experimental results also demonstrate that ANABLEPS can be used by both security analysts and software developers to identify side-channel vulnerabilities in enclave programs.

# Acknowledgments

We would like to thank the anonymous reviewers for their very helpful comments. This work was supported in part by NSF grants 1750809, 1718084, 1834213, 1834215, and 1834216, as well as a research gift from Intel.

# References

[1] American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/. (Accessed on 04/28/2018).

[2] Graphene / graphene-SGX library OS - a library OS for Linux multi-process applications, with Intel SGX support. https://github.com/oscarlab/graphene.

[3] libipt - An Intel(R) Processor Trace decoder library. https://github.com/01org/processor-trace.

[4] Lists of instruction latencies, throughputs, and micro-operation breakdowns for Intel, AMD, and VIA CPUs. https://www.agner.org/optimize/instruction_tables.pdf.

[5] pyelftools - Parsing ELF and DWARF in Python. https://github.com/eliben/pyelftools.

[6] Intel Software Guard Extensions Enclave Writer's Guide. https://software.intel.com/sites/default/files/managed/ae/48/Software-Guard-Extensions-Enclave-Writers-Guide.pdf, 2017. Revision 1.02, Accessed May 2017.

[7] E. Bauman and Z. Lin. A case for protecting computer games with SGX. In Proceedings of the 1st Workshop on System Software for Trusted Execution (SysTEX’16), December 2016.

[8] A. Baumann, M. Peinado, and G. Hunt. Shielding applications from an untrusted cloud with Haven. ACM Transactions on Computer Systems (TOCS’15), 2015.

[9] F. Brasser, U. Müller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-R. Sadeghi. Software Grand Exposure: SGX Cache Attacks Are Practical. In USENIX Workshop on Offensive Technologies, 2017.

[10] G. Chen, S. Chen, Y. Xiao, Y. Zhang, Z. Lin, and T. H. Lai. Stealing Intel Secrets from SGX Enclaves via Speculative Execution. In Proceedings of the 2019 IEEE European Symposium on Security and Privacy, June 2019.

[11] G. Chen, W. Wang, T. Chen, S. Chen, Y. Zhang, X. Wang, T.-H. Lai, and D. Lin. Racing in Hyperspace: Closing Hyper-Threading Side Channels on SGX with Contrived Data Races. In 2018 IEEE Symposium on Security and Privacy (SP’18). IEEE, 2018.

[12] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang. Detecting Privileged Side-Channel Attacks in Shielded Execution with Déjà Vu. In 12th ACM on Asia Conference on Computer and Communications Security (ASIA CCS ’17). ACM.

[13] V. Costan and S. Devadas. Intel SGX Explained. Technical report, Cryptology ePrint Archive, Report 2016/086, 2016. http://eprint.iacr.org.

[14] Y. Fu, E. Bauman, R. Quinonez, and Z. Lin. SGX-LAPD: Thwarting Controlled Side-Channel Attacks via Enclave Verifiable Page Faults. In Proceedings of the 20th International Symposium on Research in Attacks, Intrusions and Defenses (RAID’17), September 2017.

[15] J. Götzfried, M. Eckert, S. Schinzel, and T. Müller. Cache Attacks on Intel SGX. In 10th European Workshop on Systems Security (EuroSec’17). ACM, 2017.

[16] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa. Strong and Efficient Cache Side-Channel Protection Using Hardware Transactional Memory. In USENIX Security Symposium (USENIX Security’17). USENIX Association, 2017.

[17] M. Hähnel, W. Cui, and M. Peinado. High-Resolution Side Channels for Untrusted Operating Systems. In 2017 USENIX Annual Technical Conference (USENIX ATC 17). USENIX Association, 2017.

[18] S. M. Kim, J. Han, J. Ha, T. Kim, and D. Han. Enhancing Security and Privacy of Tor’s Ecosystem by Using Trusted Execution Environments. In (NSDI’17), 2017.

[19] P. Kocher, D. Genkin, D. Gruss, W. Haas, M. Hamburg, M. Lipp, S. Mangard, T. Prescher, M. Schwarz, and Y. Yarom. Spectre Attacks: Exploiting Speculative Execution. ArXiv e-prints, Jan. 2018.

[20] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado. Inferring Fine-Grained Control Flow Inside SGX Enclaves with Branch Shadowing. In 26th USENIX Security Symposium (USENIX Security’17). USENIX Association, 2017.

[21] M. Lipp, M. Schwarz, D. Gruss, T. Prescher, W. Haas, S. Mangard, P. Kocher, D. Genkin, Y. Yarom, and M. Hamburg. Meltdown. ArXiv e-prints, Jan. 2018.

[22] O. Oleksenko, B. Trach, R. Krahn, M. Silberstein, and C. Fetzer. Varys: Protecting SGX Enclaves from Practical Side-Channel Attacks. In 2018 USENIX Annual Technical Conference (USENIX ATC 18). USENIX Association, 2018.

[23] D. A. Osvik, A. Shamir, and E. Tromer. Cache Attacks and Countermeasures: The Case of AES. In 6th Cryptographers’ Track at the RSA Conference on Topics in Cryptology, 2006.

[24] C. Percival. Cache Missing for Fun and Profit. In 2005 BSDCan, 2005.

[25] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and M. Russinovich. VC3: Trustworthy Data Analytics in the Cloud Using SGX. In 2015 IEEE Symposium on Security and Privacy (SP’15). IEEE, 2015.

[26] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard. Malware Guard Extension: Using SGX to Conceal Cache Attacks. Springer International Publishing, 2017.

[27] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim. SGX-Shield: Enabling Address Space Layout Randomization for SGX Programs. In In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), 2017.

[28] M.-W. Shih, S. Lee, T. Kim, and M. Peinado. T-SGX: Eradicating Controlled-Channel Attacks Against Enclave Programs. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS’17), 2017.

[29] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Preventing Page Faults from Telling Your Secrets. In 11th ACM on Asia Conference on Computer and Communications Security (ASIA CCS’16). ACM, 2016.

[30] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In (NDSS’16), 2016.

[31] C.-C. Tsai, D. E. Porter, and M. Vij. Graphene-SGX: A Practical Library OS for Unmodified Applications on SGX. In Proceedings of the USENIX Annual Technical Conference (ATC’17), 2017.

[32] J. Van Bulck, M. Minkin, O. Weisse, D. Genkin, B. Kasikci, F. Piessens, M. Silberstein, T. F. Wenisch, Y. Yarom, and R. Strackx. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient Out-of-Order Execution. In 27th USENIX Security Symposium (USENIX Security’18). USENIX Association, 2018.

[33] J. Van Bulck, F. Piessens, and R. Strackx. SGX-Step: A Practical Attack Framework for Precise Enclave Execution Control. In Proceedings of the 2nd Workshop on System Software for Trusted Execution (SysTEX’17), 2017.

[34] J. Van Bulck, F. Piessens, and R. Strackx. Nemesis: Studying Microarchitectural Timing Leaks in Rudimentary CPU Interrupt Logic. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security (CCS’18). ACM, 2018.

[35] J. Van Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx. Telling Your Secrets Without Page Faults: Stealthy Page Table-Based Attacks on Enclaved Execution. In Proceedings of the 26th USENIX Security Symposium (USENIX Security’17). USENIX Association, 2017.

[36] R. Wang, Y. Shoshitaishvili, A. Bianchi, A. Machiry, J. Grosen, P. Grosen, C. Kruegel, and G. Vigna. RAMBLER: Making Reassembly Great Again. In Proceedings of the 24th Annual Symposium on Network and Distributed System Security (NDSS’17), 2017.

[37] S. Wang, P. Wang, X. Liu, D. Zhang, and D. Wu. CACHED: Identifying Cache-Based Timing Channels in Production Software. In 26th USENIX Security Symposium (USENIX Security’17). USENIX Association, 2017.

[38] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler, H. Tang, and C. A. Gunter. Leaky Cauldron on the Dark Land: Understanding Memory Side-Channel Hazards in SGX. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS’17). ACM, 2017.

[39] S. Weiser, A. Zankl, R. Spreitzer, K. Miller, S. Mangard, and G. Sigl. DATA – Differential Address Trace Analysis: Finding Address-Based Side-Channels in Binaries. In 27th USENIX Security Symposium (USENIX Security’18). USENIX Association, 2018.

[40] J. Wichelmann, A. Moghimi, T. Eisenbarth, and B. Sunar. Microwalk: A Framework for Finding Side Channels in Binaries. In Proceedings of the 34th Annual Computer Security Applications Conference. ACM, 2018.

[41] J. C. Wray. An Analysis of Covert Timing Channels. J. Comput. Secur., 1992.

[42] Y. Xiao, M. Li, S. Chen, and Y. Zhang. STACCO: Differentially Analyzing Side-Channel Traces for Detecting SSL/TLS Vulnerabilities in Secure Enclaves. In Proceedings of the ACM SIGSAC Conference on Computer and Communications Security (CCS’17). ACM, 2017.

[43] Y. Xu, W. Cui, and M. Peinado. Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems. In Proceedings of the 2015 IEEE Symposium on Security and Privacy (SP’15). IEEE, 2015.

[44] F. Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi. Town Crier: An Authenticated Data Feed for Smart Contracts. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS’16). ACM, 2016.