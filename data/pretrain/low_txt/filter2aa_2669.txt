# Realtime Bluetooth Device Detection with Blue Hydra

## Team Members
- **Granolocks Narcissus**
  - Experimenter
  - Developer
  - Enjoys long walks in the woods and traveling to exotic locations
  - Passionate about hacking and giving great back rubs

- **Zero_Chaos Narcissus**
  - Eagle Scout
  - Maintainer of Open{Zaurus, Embedded, wrt}
  - Aircrack-ng Developer (Injection/Drivers, airmon-zc)
  - Pentoo Linux Developer
  - Gentoo Linux Developer
  - Random Hacker of ARMs
  - Husband and Father
  - Member of the Random Association of Wireless Researchers (RAWR)
  - Participates in Defcon/Shmoocon/etc Wireless CTF
  - Easily entertained
  - Not a lawyer

## Project Overview
### Bluetooth Waterfall
- FFT Screenshot
- `airmon-ng start hci0` (fake screenshot)
- `airodump-ng` (fake screenshot)

### Challenges
- Our normal approach is ineffective due to errors in `airmon-ng` and `airodump-ng`.

### Bluetooth Proliferation
- Statistics on the widespread use of IoT devices and wearables.

### What is Bluetooth?
- **Cheap** and a **cable replacement**
- Uses **Frequency Hopping Spread Spectrum (FHSS)**
- No monitor mode
- **Classes**:
  - **Class 1**: 100mW (high power devices, e.g., Sena dongle)
  - **Class 2**: 10mW (phones and most laptops)
  - **Class 3**: 1mW

### Bluetooth Modes
- **Bluetooth Classic**:
  - Discoverable
  - Non-discoverable
- **Bluetooth Low Energy (BLE)**:
  - General Discoverability
  - Limited Discoverability
  - Non-discoverable (yet still advertises?)

### Basic Bluetooth Security
- **PIN**
- Other security measures

### Prior Art - Cracking
- **Redfang**
- **Btcrack**
- **Crackle** (Le pin cracker)
- **Bluesnarfer** (Phonebook dumping from old phones)

### Prior Art - Discovery
- **Bluelog**:
  - Only discovers classic devices
  - No BLE support
  - Mostly a logger
- **Btscanner**:
  - Only discovers classic devices
  - No BLE support
  - Unmaintained
  - Has a neat GUI

### Prior Art - Getting Closer
- **Bluez**:
  - Useful documentation and examples
- **hciconfig**
- **hcitool**:
  - Only discovers classic devices
  - Lescan works but is hard to parse
  - Outdated
- **Test-scripts bluez-test discovery**:
  - Easy to modify
  - Shows both classic and LE
  - Teaches how to communicate with the Bluetooth card
  - Hides some LE devices

### Prior Art - Ubertooth
- **Ubertooth-scan**
- **Ubertooth-rx**:
  - `Ubertooth-rx -z`

### Goals
- Similar to `airodump-ng` and `btscanner`
- Support for BLE
- Detect as many existing devices as possible
- Use a database backend
- Focus on detection, not cracking or brute forcing

### Blue Hydra Design Logic
- Build on top of existing tools, modifying as needed
- Run threads for each discrete task
- Unify into a processing thread

### The Keystone
- **Bluez btmon**:
  - Provides raw HCI information
  - Monitors one or multiple Bluetooth dongles
  - Reasonably easy to parse

### Blue Hydra Architecture
- One thread to monitor `btmon`
- One thread for handling Bluetooth dongle:
  - Runs classic discovery
  - Listens for LE advertisements
  - Plans to support multiple dongles
- One thread for handling Ubertooth dongle:
  - Plans to support multiple dongles
- One thread for handling SQLite database

### Demo
- Live demonstration
- Backup screenshots: 
  - Screenshot 1
  - Screenshot 2
  - Screenshot 3

### Conclusions
- Bluetooth has not been extensively studied in recent years
- Simple idea, but more complex in execution
- Surprising to see the number of devices detected

### Thanks
- DEF CON for allowing us to present
- Coconut Picard for supporting the development and open-sourcing of Blue Hydra
- Pwnie Express for funding the project and allowing it to be open-sourced
- Ubertooth team for their contributions
- Bluez team for their initial guidance

### Q & A
- Questions and answers will be held in the room.