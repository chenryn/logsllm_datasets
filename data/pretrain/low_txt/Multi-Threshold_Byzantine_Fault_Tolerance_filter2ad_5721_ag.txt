### Introduction to Multi-Threshold Byzantine Fault Tolerance (MT-BFT)

In recent years, several works have explored the trade-offs between different fault thresholds and correctness properties in distributed systems. One such work [28] investigates reliable broadcast and Byzantine agreement with varying fault thresholds for different correctness properties, achieving optimal trade-offs in the asynchronous model. In contrast, our MT-BFT framework not only captures these trade-offs but also extends them to different timing models, enhancing synchronous safety without compromising properties in asynchrony or partial synchrony.

### Dual Timing Model

The recent work by Blum et al. [7–9] is closely related to our research and serves as a significant inspiration. They introduced the async-sync dual timing model, providing a partial solution to the challenge of balancing fault tolerance and responsiveness. However, their protocol does not fully resolve the dilemma, as it cannot match the fault tolerance of classic single-model protocols. For instance, with \( \beta_a = \gamma_a < n/3 \), their protocol tolerates only \( \beta_s = \gamma_s < n/3 \), which is the same as traditional asynchronous and partially synchronous protocols. Our protocol, on the other hand, achieves \( \beta_s < 2n/3 \). Additionally, from a practical standpoint, their protocol is more complex and operates in lockstep rounds, whereas our protocol is simpler and more aligned with deployed practical protocols.

Another relevant work is the XFT protocol [35], which considers the psync-sync dual timing model. It extends Paxos [33], a popular crash fault-tolerant (CFT) replication protocol, to tolerate \( f < n/2 \) Byzantine faults under synchrony. However, under partial synchrony, XFT does not tolerate Byzantine faults.

### Flexible BFT

Flexible BFT (FBFT) [37] is another recent approach that supports two different timing models and separates thresholds for safety and liveness. FBFT combines techniques from partially synchronous PBFT and synchronous Sync HotStuff, similar to our protocol. However, a key difference is that FBFT does not fully integrate the two protocols. Instead, it maintains separate commit rules for each timing model, leaving the choice to clients based on their belief about the network. This design aims to support clients with diverse beliefs about the network. If a client in FBFT makes an incorrect assumption, such as choosing the synchronous commit rule when the network is asynchronous, the protocol provides no guarantees.

In contrast, our protocol in Section 4 integrates the commit rules from different timing models into a single protocol with a unified commit rule. We maintain the standard model where clients do not choose their own models or commit rules, ensuring that all clients receive safety and liveness guarantees under both timing models, albeit with different fault thresholds.

### Ebb-and-flow

Ebb-and-flow [41] also adopts FBFT's approach of having two commit rules for different models and leaving the choice to clients. Its primary motivation is to support dynamic availability. If all clients in Ebb-and-flow are constrained to choose the partially synchronous commit rule, their protocol can be seen as an MT-BFT protocol with \( \beta_s < n/2 \) and \( \beta_a = \gamma_a = \gamma_s < n/3 \), which has a higher but not optimal synchronous safety threshold.

### Conclusion and Future Work

We introduce multi-threshold BFT, a generalized version of the BFT problem, which defines fault thresholds separately for safety and liveness under synchrony and asynchrony (or partial-synchrony). Our optimal protocols offer stronger fault tolerance than classic BFT protocols. We also present a general framework to upgrade existing protocols to achieve optimal synchronous safety with minimal overhead. The customized protocol in Section 4, which allows generic parameter choices, works only in the psync-sync model. Therefore, the tightness of the fault bounds for MT-BFT SMR in the async-sync model remains an open and interesting area for future research.

### Acknowledgments

We thank our shepherd Julian Loss and the anonymous reviewers at ACM CCS 2021 for their valuable feedback. This work was supported in part by gifts from Novi and VMware.

### References

[1] Ittai Abraham, Srinivas Devadas, Danny Dolev, Kartik Nayak, and Ling Ren. 2019. Synchronous Byzantine Agreement with Expected \( O(1) \) Rounds, Expected \( O(n^2) \) Communication, and Optimal Resilience. In Financial Cryptography and Data Security (FC). Springer, 320–334.

[2] Ittai Abraham, Dahlia Malkhi, Kartik Nayak, Ling Ren, and Maofan Yin. 2020. Sync HotStuff: Simple and Practical Synchronous State Machine Replication. In IEEE Symposium on Security and Privacy (S&P). IEEE, 106–118.

[3] Ittai Abraham, Dahlia Malkhi, and Alexander Spiegelman. 2019. Asymptotically Optimal Validated Asynchronous Byzantine Agreement. In ACM Symposium on Principles of Distributed Computing (PODC). 337–346.

[4] Ittai Abraham, Kartik Nayak, Ling Ren, and Zhuolun Xiang. 2020. Optimal Good-case Latency for Byzantine Broadcast and State Machine Replication. arXiv preprint arXiv:2003.13155 (2020).

[5] Elli Androulaki, Artem Barger, Vita Bortnikov, Christian Cachin, Konstantinos Christidis, Angelo De Caro, David Enyeart, Christopher Ferris, Gennady Laventman, Yacov Manevich, et al. 2018. Hyperledger Fabric: A Distributed Operating System for Permissioned Blockchains. In Thirteenth EuroSys Conference. ACM, 30.

[6] Mathieu Baudet, Avery Ching, Andrey Chursin, George Danezis, François Garillot, Zekun Li, Dahlia Malkhi, Oded Naor, Dmitri Perelman, and Alberto Sonnino. [n.d.]. State Machine Replication in the Libra Blockchain.

[7] Erica Blum, Jonathan Katz, and Julian Loss. 2019. Synchronous Consensus with Optimal Asynchronous Fallback Guarantees. In Theory of Cryptography Conference (TCC). Springer, 131–150.

[8] Erica Blum, Jonathan Katz, and Julian Loss. 2020. Network-Agnostic State Machine Replication. arXiv preprint arXiv:2002.03437 (2020).

[9] Erica Blum, Chen-Da Liu-Zhang, and Julian Loss. 2020. Always Have a Backup Plan: Fully Secure Synchronous MPC with Asynchronous Fallback. In Annual International Cryptology Conference (CRYPTO). Springer, 707–731.

[10] Gabriel Bracha. 1987. Asynchronous Byzantine Agreement Protocols. Information and Computation 75, 2 (1987), 130–143.

[11] Mike Burrows. 2006. The Chubby Lock Service for Loosely-Coupled Distributed Systems. In 7th Symposium on Operating Systems Design and Implementation (OSDI). 335–350.

[12] Vitalik Buterin and Virgil Griffith. 2017. Casper the Friendly Finality Gadget. arXiv preprint arXiv:1710.09437 (2017).

[13] Christian Cachin, Klaus Kursawe, Frank Petzold, and Victor Shoup. 2001. Secure and Efficient Asynchronous Broadcast Protocols. In Annual International Cryptology Conference (CRYPTO). Springer, 524–541.

[14] Miguel Castro, Barbara Liskov, et al. 1999. Practical Byzantine Fault Tolerance. In 3rd Symposium on Operating Systems Design and Implementation (OSDI). USENIX, 173–186.

[15] T-H Hubert Chan, Rafael Pass, and Elaine Shi. 2018. PiLi: An Extremely Simple Synchronous Blockchain. IACR Cryptology ePrint Archive, Report 2018/980 (2018).

[16] J.P.Morgan Chase. 2018. Quorum Whitepaper.

[20] Danny Dolev and H. Raymond Strong. 1983. Authenticated Algorithms for Byzantine Agreement. SIAM J. Comput. 12, 4 (1983), 656–666.

[17] Allen Clement, Flavio Junqueira, Aniket Kate, and Rodrigo Rodrigues. 2012. On the (Limited) Power of Non-Equivocation. In ACM Symposium on Principles of Distributed Computing (PODC). 301–308.

[18] Allen Clement, Manos Kapritsos, Sangmin Lee, Yang Wang, Lorenzo Alvisi, Mike Dahlin, and Taylor Riche. 2009. Upright Cluster Services. In 22nd ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 277–290.

[19] James C Corbett, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christopher Frost, Jeffrey John Furman, Sanjay Ghemawat, Andrey Gubarev, Christopher Heiser, Peter Hochschild, et al. 2013. Spanner: Google’s Globally Distributed Database. ACM Transactions on Computer Systems (TOCS) 31, 3 (2013), 1–22.

[21] Sisi Duan, Michael K Reiter, and Haibin Zhang. 2018. BEAT: Asynchronous BFT Made Practical. In ACM SIGSAC Conference on Computer and Communications Security (CCS). 2028–2041.

[22] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer. 1988. Consensus in the Presence of Partial Synchrony. J. ACM 35, 2 (1988), 288–323.

[23] Paul Feldman and Silvio Micali. 1988. Optimal Algorithms for Byzantine Agreement. In 20th Annual ACM Symposium on Theory of Computing (STOC). 148–161.

[24] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich. 2017. Algorand: Scaling Byzantine Agreements for Cryptocurrencies. In 26th Symposium on Operating Systems Principles (SOSP). 51–68.

[25] Guy Golan Gueta, Ittai Abraham, Shelly Grossman, Dahlia Malkhi, Benny Pinkas, Michael Reiter, Dragos-Adrian Seredinschi, Orr Tamir, and Alin Tomescu. 2019. SBFT: A Scalable and Decentralized Trust Infrastructure. In 2019 49th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). IEEE, 568–580.

[26] Bingyong Guo, Zhenliang Lu, Qiang Tang, Jing Xu, and Zhenfeng Zhang. 2020. Dumbo: Faster Asynchronous BFT Protocols. In ACM SIGSAC Conference on Computer and Communications Security (CCS). 803–818.

[27] Yue Guo, Rafael Pass, and Elaine Shi. 2019. Synchronous, with a Chance of Partition Tolerance. In Annual International Cryptology Conference (CRYPTO). Springer, 499–529.

[28] Martin Hirt, Ard Kastrati, and Chen-Da Liu-Zhang. 2020. Multi-Threshold Asynchronous Reliable Broadcast and Consensus. In 24th International Conference on Principles of Distributed Systems (OPODIS).

[29] Patrick Hunt, Mahadev Konar, Flavio Paiva Junqueira, and Benjamin Reed. 2010. ZooKeeper: Wait-Free Coordination for Internet-Scale Systems. In USENIX Annual Technical Conference, Vol. 8.

[30] Jonathan Katz and Chiu-Yuen Koo. 2009. On Expected Constant-Round Protocols for Byzantine Agreement. J. Comput. System Sci. 75, 2 (2009), 91–112.

[31] Ramakrishna Kotla, Lorenzo Alvisi, Mike Dahlin, Allen Clement, and Edmund Wong. 2007. Zyzzyva: Speculative Byzantine Fault Tolerance. In 21st ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 45–58.

[32] Michael Kumhof and Clare Noone. 2018. Central Bank Digital Currencies—Design Principles and Balance Sheet Implications. (2018).

[33] Leslie Lamport. 2019. The Part-Time Parliament. In Concurrency: The Works of Leslie Lamport. 277–317.

[34] Leslie Lamport, Robert Shostak, and Marshall Pease. 1982. The Byzantine Generals Problem. ACM Transactions on Programming Languages and Systems 4, 3 (1982), 382–401.

[35] Shengyun Liu, Paolo Viotti, Christian Cachin, Vivien Quéma, and Marko Vukolić. 2016. XFT: Practical Fault Tolerance Beyond Crashes. In USENIX Symposium on Operating Systems Design and Implementation (OSDI). 485–500.

[36] Yuan Lu, Zhenliang Lu, Qiang Tang, and Guiling Wang. 2020. Dumbo-MVBA: Optimal Multi-Valued Validated Asynchronous Byzantine Agreement, Revisited. In ACM Symposium on Principles of Distributed Computing (PODC). 129–138.

[37] Dahlia Malkhi, Kartik Nayak, and Ling Ren. 2019. Flexible Byzantine Fault Tolerance. In ACM SIGSAC Conference on Computer and Communications Security (CCS). 1041–1053.

[38] Andrew Miller, Yu Xia, Kyle Croman, Elaine Shi, and Dawn Song. 2016. The Honey Badger of BFT Protocols. In ACM SIGSAC Conference on Computer and Communications Security (CCS). 31–42.

[39] Atsuki Momose, Jason Paul Cruz, and Yuichi Kaji. 2020. Hybrid-BFT: Optimistically Responsive Synchronous Consensus with Optimal Latency or Resilience. IACR Cryptology ePrint Archive, Report 2020/406 (2020).

[40] Satoshi Nakamoto. 2008. Bitcoin: A Peer-to-Peer Electronic Cash System. (2008).

[41] Joachim Neu, Ertem Nusret Tas, and David Tse. 2020. Ebb-and-Flow Protocols: A Resolution of the Availability-Finality Dilemma. arXiv preprint arXiv:2009.04987 (2020).

[42] Rafael Pass and Elaine Shi. 2017. Hybrid Consensus: Efficient Consensus in the Permissionless Model. In International Symposium on Distributed Computing (DISC). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.

[43] Rafael Pass and Elaine Shi. 2018. Thunderella: Blockchains with Optimistic Instant Confirmation. In Annual International Conference on the Theory and Applications of Cryptographic Techniques (EUROCRYPT). Springer, 3–33.

[44] Marshall Pease, Robert Shostak, and Leslie Lamport. 1980. Reaching Agreement in the Presence of Faults. Journal of the ACM (JACM) 27, 2 (1980), 228–234.

[45] Fred B Schneider. 1990. Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial. ACM Computing Surveys (CSUR) 22, 4 (1990), 299–319.

[46] Nibesh Shrestha, Ittai Abraham, Ling Ren, and Kartik Nayak. 2020. On the Optimality of Optimistic Responsiveness. In ACM SIGSAC Conference on Computer and Communications Security (CCS). 839–857.

[47] Maofan Yin, Dahlia Malkhi, Michael K Reiter, Guy Golan Gueta, and Ittai Abraham. 2019. HotStuff: BFT Consensus with Linearity and Responsiveness. In ACM Symposium on Principles of Distributed Computing (PODC). ACM, 347–356.