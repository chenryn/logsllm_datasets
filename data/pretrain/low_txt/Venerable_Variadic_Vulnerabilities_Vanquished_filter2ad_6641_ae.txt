# Table 4: Performance Overhead in Micro-Benchmarks

## 7. Related Work

HexVASAN can be used either as a continuous runtime monitor to mitigate exploits or as a sanitizer to detect bugs, similar to the sanitizers available in the LLVM compiler. Like HexVASAN, these sanitizers embed runtime checks into a program by instrumenting potentially dangerous instructions.

- **AddressSanitizer (ASan)** [54]: Instruments memory accesses and allocation sites to detect spatial memory errors (e.g., out-of-bounds accesses) and temporal memory errors (e.g., use-after-free bugs).
- **Undefined Behavior Sanitizer (UBSan)** [52]: Instruments various types of instructions to detect operations that are not strictly defined by the C and C++ standards, such as signed integer overflows and null-pointer dereferences.
- **Thread Sanitizer (TSAN)** [55]: Instruments memory accesses and atomic operations to detect data races, deadlocks, and misuse of synchronization primitives.
- **Memory Sanitizer (MSAN)** [58]: Detects uses of uninitialized memory.

**CaVer** [32] is a sanitizer designed to verify the correctness of downcasts in C++. Downcasting converts a base class pointer to a derived class pointer, which may be unsafe if it cannot be statically determined whether the pointed-to object is of the derived class type. **TypeSan** [25] refines CaVer by reducing overhead and improving coverage.

**UniSan** [34] sanitizes information leaks from the kernel by ensuring that data is initialized before leaving the kernel, thus preventing reads of uninitialized memory.

While these sanitizers are highly effective at finding specific types of bugs, they do not address misuses of variadic functions. Additionally, they typically incur significant runtime and memory overhead, unlike HexVASAN.

### Control-Flow Hijacking Mitigations

Control-flow hijacking mitigations offer partial protection against variadic function attacks by preventing adversaries from calling variadic functions through control-flow edges that do not appear in legitimate executions. Examples include:

- **Code Pointer Integrity (CPI)** [30]: Prevents attackers from overwriting code pointers.
- **Control-Flow Integrity (CFI)**: Verifies the integrity of control-flow transfers but does not prevent code pointer overwrites. Various implementations of CFI have been proposed [6, 7, 11, 14–16, 21, 22, 28, 35, 37, 38, 41–44, 46, 49–51, 59, 61–66].

These mitigations cannot prevent attackers from directly overwriting variadic arguments. At best, they can prevent variadic functions from being called through illegitimate control-flow edges. Therefore, HexVASAN and these mitigations are orthogonal. Prior research has shown that many CFI implementations fail to fully prevent control-flow hijacking due to imprecision [8, 17, 19, 23], limited scope [53, 57], vulnerability to information leakage [18], or spraying attacks [24, 45]. We demonstrated in Section 6.1 that variadic functions exacerbate CFI's imprecision, providing additional leeway for adversaries.

### Defenses Against Variadic Argument Overwrites

Defenses that protect against direct overwrites or misuse of variadic arguments have primarily focused on format string attacks, a subset of possible attacks on variadic functions.

- **LibSafe**: Detects potentially dangerous calls to known format string functions like `printf` and `sprintf` [60]. A call is considered dangerous if a `%n` specifier is used to overwrite the frame pointer or return address, or if the argument list for `printf` spans multiple stack frames.
- **FormatGuard** [12]: Instruments calls to `printf` and checks if the number of arguments matches the number of format specifiers in the format string.
- **Static Taint Analysis** [56]: Proposed by Shankar et al. to detect calls to format string functions where the format string originates from an untrustworthy source. This approach was later refined by Chen and Wagner [10] and used to analyze thousands of packages in the Debian 3.1 Linux distribution.
- **TaintCheck** [39]: Also detects untrustworthy format strings but relies on dynamic taint analysis.

**FORTIFY_SOURCE** in glibc provides some lightweight checks to ensure all arguments are consumed but can be bypassed and does not check for type mismatches. Thus, none of these solutions provide comprehensive protection against variadic argument overwrites or misuse.

## 8. Conclusions

Variadic functions introduce an implicitly defined contract between the caller and callee. Violation of this contract can lead to runtime crashes or vulnerabilities. Current tools, including static type checkers and CFI implementations, do not find variadic function type errors or prevent exploitation. Variadic functions are prevalent in programs like SPEC CPU2006, Firefox, Apache, CPython, nginx, Wireshark, and various libraries.

We have designed **HexVASAN**, a lightweight runtime monitor that detects and prevents bugs in variadic functions. It imposes negligible overhead (0.45%) on SPEC CPU2006 benchmarks and effectively detects type violations when calling variadic arguments. Download HexVASAN at [https://github.com/HexHive/HexVASAN](https://github.com/HexHive/HexVASAN).

## 9. Acknowledgments

We thank the anonymous reviewers for their insightful comments and our shepherd Adam Doupé for his informative feedback. This work was supported in part by the National Science Foundation under awards CNS-1513783, CNS-1657711, and CNS-1619211, the Defense Advanced Research Projects Agency (DARPA) under contracts FA8750-15-C-0124 and FA8750-15-C-0085, and Intel Corporation. We also gratefully acknowledge a gift from Oracle Corporation. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, DARPA, or any other agency of the U.S. Government.

## References

[1] http://www.cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-8617
[2] A eulogy for format strings. http://phrack.org/issues/67/9.html
[3] Kraken benchmark. https://wiki.mozilla.org/Kraken
[4] Octane benchmark. https://developers.google.com/octane/faq
[5] Using the GNU Compiler Collection (GCC) Function Attributes. https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Function-Attributes.html
[7] BOUNOV, D., KICI, R., AND LERNER, S. Protecting C++ dynamic dispatch through vtable interleaving. In Symposium on Network and Distributed System Security (NDSS) (2016).
[8] CARLINI, N., BARRESI, A., PAYER, M., WAGNER, D., AND GROSS, T. R. Control-flow bending: On the effectiveness of control-flow integrity. In USENIX Security Symposium (2015).
[9] CASTRO, M., COSTA, M., MARTIN, J.-P., PEINADO, M., AKRITIDIS, P., DONNELLY, A., BARHAM, P., AND BLACK, R. Fast byte-granularity software fault isolation. In ACM Symposium on Operating Systems Principles (SOSP) (2009).
[10] CHEN, K., AND WAGNER, D. Large-scale analysis of format string vulnerabilities in Debian Linux. In Proceedings of the 2007 workshop on Programming languages and analysis for security (2007).
[11] CHENG, Y., ZHOU, Z., MIAO, Y., DING, X., AND DENG, R. H. ROPecker: A generic and practical approach for defending against ROP attacks. In Symposium on Network and Distributed System Security (NDSS) (2014).
[12] COWAN, C., BARRINGER, M., BEATTIE, S., KROAH-HARTMAN, G., FRANTZEN, M., AND LOKIER, J. FormatGuard: Automatic protection from printf format string vulnerabilities. In USENIX Security Symposium (2001).
[13] COWAN, C., PU, C., MAIER, D., WALPOLE, J., BAKKE, P., BEATTIE, S., GRIER, A., WAGLE, P., ZHANG, Q., AND HINTON, H. StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks. In USENIX Security Symposium (1998).
[14] CRISWELL, J., DAUTENHAHN, N., AND ADVE, V. KCoFI: Complete control-flow integrity for commodity operating system kernels. In IEEE Symposium on Security and Privacy (S&P) (2014).
[15] DAVI, L., DMITRIENKO, A., EGELE, M., FISCHER, T., HOLZ, T., HUND, R., NÜRNBERGER, S., AND SADEGHI, A.-R. MoCFI: A framework to mitigate control-flow attacks on smartphones. In Symposium on Network and Distributed System Security (NDSS) (2012).
[16] DAVI, L., KOEBERL, P., AND SADEGHI, A.-R. Hardware-assisted fine-grained control-flow integrity: Towards efficient protection of embedded systems against software exploitation. In Annual Design Automation Conference (DAC) (2014).
[17] DAVI, L., SADEGHI, A.-R., LEHMANN, D., AND MONROSE, F. Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection. In USENIX Security Symposium (2014).
[18] EVANS, I., FINGERET, S., GONZÁLEZ, J., OTGONBAATAR, U., TANG, T., SHROBE, H., SIDIROGLOU-DOUSKOS, S., RINARD, M., AND OKHRAVI, H. Missing the point (er): On the effectiveness of code pointer integrity. In IEEE Symposium on Security and Privacy (S&P) (2015).
[19] EVANS, I., LONG, F., OTGONBAATAR, U., SHROBE, H., RINARD, M., OKHRAVI, H., AND SIDIROGLOU-DOUSKOS, S. Control jujutsu: On the weaknesses of fine-grained control flow integrity. In ACM Conference on Computer and Communications Security (CCS) (2015).
[20] EXPLOIT DATABASE. sudo debug privilege escalation. https://www.exploit-db.com/exploits/25134/, 2013.
[21] GAWLIK, R., AND HOLZ, T. Towards Automated Integrity Protection of C++ Virtual Function Tables in Binary Programs. In Annual Computer Security Applications Conference (ACSAC) (2014).
[6] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. Control-flow integrity. In ACM Conference on Computer and Communications Security (CCS) (2005).
[22] GE, X., TALELE, N., PAYER, M., AND JAEGER, T. Fine-Grained Control-Flow Integrity for Kernel Software. In IEEE European Symp. on Security and Privacy (2016).
[23] GÖKTAS, E., ATHANASOPOULOS, E., BOS, H., AND PORTOKALIDIS, G. Out of control: Overcoming control-flow integrity. In IEEE Symposium on Security and Privacy (S&P) (2014).
[24] GÖKTAS, E., GAWLIK, R., KOLLENDA, B., ATHANASOPOULOS, E., PORTOKALIDIS, G., GIUFFRIDA, C., AND BOS, H. Undermining information hiding (and what to do about it). In USENIX Security Symposium (2016).
[25] HALLER, I., JEON, Y., PENG, H., PAYER, M., GIUFFRIDA, C., BOS, H., AND VAN DER KOUWE, E. TypeSan: Practical type confusion detection. In ACM Conference on Computer and Communications Security (CCS) (2016).
[26] Information technology – Programming languages – C++. Standard, International Organization for Standardization, Geneva, CH, Dec. 2014.
[27] Information technology – Programming languages – C. Standard, International Organization for Standardization, Geneva, CH, Dec. 2011.
[28] JANG, D., TATLOCK, Z., AND LERNER, S. SAFEDISPATCH: Securing C++ virtual calls from memory corruption attacks. In Symposium on Network and Distributed System Security (NDSS) (2014).
[29] JELINEK, J. FORTIFY SOURCE. https://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html, 2004.
[30] KUZNETSOV, V., SZEKERES, L., PAYER, M., CANDEA, G., SEKAR, R., AND SONG, D. Code-pointer integrity. In USENIX Symposium on Operating Systems Design and Implementation (OSDI) (2014).
[31] LATTNER, C., AND ADVE, V. LLVM: A compilation framework for lifelong program analysis & transformation. In IEEE/ACM International Symposium on Code Generation and Optimization (CGO) (2004).
[32] LEE, B., SONG, C., KIM, T., AND LEE, W. Type casting verification: Stopping an emerging attack vector. In USENIX Security Symposium (2015).
[33] LINUX PROGRAMMER’S MANUAL. va_start (3) - Linux Manual Page.
[34] LU, K., SONG, C., KIM, T., AND LEE, W. UniSan: Proactive kernel memory initialization to eliminate data leakages. In ACM Conference on Computer and Communications Security (CCS) (2016).
[35] MASHTIZADEH, A. J., BITTAU, A., BONEH, D., AND MAZIÈRES, D. CCFI: Cryptographically enforced control flow integrity. In ACM Conference on Computer and Communications Security (CCS) (2015).
[36] MATZ, M., HUBICKA, J., JAEGER, A., AND MITCHELL, M. System V Application Binary Interface. AMD64 Architecture Processor Supplement, Draft v0.99 (2013).
[37] MICROSOFT CORPORATION. Control Flow Guard (Windows). https://msdn.microsoft.com/en-us/library/windows/desktop/mt637065(v=vs.85).aspx, 2016.
[38] MOHAN, V., LARSEN, P., BRUNTHALER, S., HAMLEN, K., AND FRANZ, M. Opaque control-flow integrity. In Symposium on Network and Distributed System Security (NDSS) (2015).
[39] NEWSOME, J., AND SONG, D. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In Symposium on Network and Distributed System Security (NDSS) (2005).
[40] NISSIL, R. http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-1886
[41] NIU, B., AND TAN, G. Monitor integrity protection with space efficiency and separate compilation. In ACM Conference on Computer and Communications Security (CCS) (2013).
[42] NIU, B., AND TAN, G. Modular control-flow integrity. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI) (2014).
[43] NIU, B., AND TAN, G. RockJIT: Securing just-in-time compilation using modular control-flow integrity. In ACM Conference on Computer and Communications Security (CCS) (2014).
[44] NIU, B., AND TAN, G. Per-input control-flow integrity. In ACM Conference on Computer and Communications Security (CCS) (2015).
[45] OIKONOMOPOULOS, A., ATHANASOPOULOS, E., BOS, H., AND GIUFFRIDA, C. Poking holes in information hiding. In USENIX Security Symposium (2016).
[46] PAPPAS, V., POLYCHRONAKIS, M., AND KEROMYTIS, A. D. Transparent ROP exploit mitigation using indirect branch tracing. In USENIX Security Symposium (2013).
[47] PAX TEAM. Pax Address Space Layout Randomization (ASLR).
[48] PAX TEAM. PaX Non-Executable Pages Design & Implementation. http://pax.grsecurity.net/docs/noexec.txt, 2004.
[49] PAYER, M., BARRESI, A., AND GROSS, T. R. Fine-grained control-flow integrity through binary hardening. In Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA) (2015).
[50] PEWNY, J., AND HOLZ, T. Control-Flow Restrictor: Compiler-based CFI for iOS. In Annual Computer Security Applications Conference (ACSAC) (2013).
[51] PRAKASH, A., HU, X., AND YIN, H. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Symposium on Network and Distributed System Security (NDSS) (2015).
[52] PROJECT, G. C. Undefined Behavior Sanitizer. https://www.chromium.org/developers/testing/undefinedbehaviorsanitizer
[53] SCHUSTER, F., TENDYCK, T., LIEBCHEN, C., DAVI, L., SADEGHI, A.-R., AND HOLZ, T. Counterfeit Object-Oriented Programming: On the difficulty of preventing code reuse attacks in C++ applications. In IEEE Symposium on Security and Privacy (S&P) (2015).
[54] SEREBRYANY, K., BRUENING, D., POTAPENKO, A., AND VYUKOV, D. AddressSanitizer: A fast address sanity checker. In USENIX Annual Technical Conference (2012).
[55] SEREBRYANY, K., AND ISKHODZHANOV, T. ThreadSanitizer: Data race detection in practice. In Workshop on Binary Instrumentation and Applications (2009).
[56] SHANKAR, U., TALWAR, K., FOSTER, J. S., AND WAGNER, D. Detecting format string vulnerabilities with type qualifiers. In USENIX Security Symposium (2001).
[57] SNOW, K. Z., MONROSE, F., DAVI, L., DMITRIENKO, A., LIEBCHEN, C., AND SADEGHI, A. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In IEEE Symposium on Security and Privacy (S&P) (2013).
[58] STEPANOV, E., AND SEREBRYANY, K. MemorySanitizer: Fast detector of uninitialized memory use in C++. In IEEE/ACM International Symposium on Code Generation and Optimization (CGO) (2015).
[59] TICE, C., ROEDER, T., COLLINGBOURNE, P., CHECKOWAY, S., ERLINGSSON, Ú., LOZANO, L., AND PIKE, G. Enforcing forward-edge control-flow integrity in GCC & LLVM. In USENIX Security Symposium (2014).
[60] TSAI, T., AND SINGH, N. Libsafe 2.0: Detection of format string vulnerability exploits. White paper, Avaya Labs (2001).
[61] VAN DER VEEN, V., ANDRIESSE, D., GÖKTAS, E., GRAS, B., SAMBUC, L., SLOWINSKA, A., BOS, H., AND GIUFFRIDA, C. PathArmor: Practical ROP protection using context-sensitive CFI. In ACM Conference on Computer and Communications Security (CCS) (2015).
[62] WANG, Z., AND JIANG, X. Hypersafe: A lightweight approach to provide lifetime hypervisor control-flow integrity. In IEEE Symposium on Security and Privacy (S&P) (2010).
[63] YUAN, P., ZENG, Q., AND DING, X. Hardware-assisted fine-grained code-reuse attack detection. In International Symposium on Research in Attacks, Intrusions and Defenses (RAID) (2015).
[64] ZHANG, C., SONG, C., CHEN, K. Z., CHEN, Z., AND SONG, D. VTint: Defending virtual function tables’ integrity. In Symposium on Network and Distributed System Security (NDSS) (2015).
[65] ZHANG, C., WEI, T., CHEN, Z., DUAN, L., SZEKERES, L., MCCAMANT, S., SONG, D., AND ZOU, W. Practical control flow integrity and randomization for binary executables. In IEEE Symposium on Security and Privacy (S&P) (2013).
[66] ZHANG, M., AND SEKAR, R. Control flow integrity for COTS binaries. In USENIX Security Symposium (2013).