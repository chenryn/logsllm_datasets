### Figure 11: (top) Credit Card Information Populated by LastPass. (bottom) Using Spook.js to Leak Credit Card Information

We observed that Spook.js could extract sensitive information without any user interaction, even when the iframe was not visible. To exploit this, we added an invisible iframe (using `CSS display:none;`) to a personal webpage hosting the attack code (https://web.dpt.example.edu/∼user/). As explained in Section IV-A, the main frame of the webpage and the iframe shared the same eTLD+1, and thus were rendered by the same process. This allowed us to recover the same credentials as shown in Figure 8, but without the victim voluntarily or knowingly visiting the login page.

### Extracting Credit Card Information

In addition to passwords, credential managers like LastPass can also manage credit card information, auto-filling it when authorized by the user. Using a setup similar to the one used for attacking login credentials, we were able to read the victim’s credit card information after it was populated on a payment page with the same eTLD+1 domain as the attacker’s page. See Figure 11 (top) and (bottom). Similar results were obtained when attacking Chrome’s credit card auto-fill feature.

### D. Attacking Tumblr

We now combine the previous techniques used to recover sensitive information from a webpage's DOM and to recover auto-filled credentials to deploy an attack on Tumblr. Tumblr is a microblogging platform and social network with 327 million unique visitors as of January 2021 [67].

#### Attack Setup

Tumblr hosts user blogs at `username.tumblr.com` and the login page at `tumblr.com/login`. The account settings page is located at `tumblr.com/settings/account`. This design choice is dangerous because login pages and user-operated blogs that share the eTLD+1 can be consolidated. While users cannot freely add JavaScript to blog posts, they can inject JavaScript code into the `tumblr.com` domain by customizing the blog’s theme template at the raw HTML level.

Specifically, Tumblr’s cross-origin resource sharing (CORS) header disallowed importing scripts from a different origin, and its content security policy (CSP) header prevented the creation of Blob objects. However, Tumblr’s CSP header allowed data URLs and the `eval` function, enabling us to embed the attack code as inline JavaScript inside a URL. We used Chrome 90.0.4430 for this attack, as Chrome 89 refused to call `eval` despite the CSP header explicitly allowing it.

#### Attack Results

In a similar setup, we created a malicious blog on Tumblr containing Spook.js attack code. We achieved consolidation in two ways: via memory pressure and through a two-click attack similar to our one-click credential recovery with LastPass. A one-click attack was not possible because both the login and account settings pages refused to render in an iframe, and Chrome blocked `window.open` calls from the DOM of our blog unless explicitly allowed by the victim. However, adding an `onclick` attribute to the blog’s HTML body made consolidation possible if the victim clicked anywhere on the blog. Chrome did not block the 'pop-up' this time because it was user-initiated.

After consolidation, we were able to exfiltrate the credentials shown in Figure 12 (top) once they were injected into the login page’s DOM by LastPass, see Figure 12 (bottom). Additionally, Figure 13 (top) shows the list of all blogs owned by the user, which is not publicly available. We leaked this information from the DOM of the account settings page, as shown in Figure 13 (bottom).

### E. Exploiting Unintended Content Uploads

Our attacks so far assumed that the attacker’s webpage is directly present on the domain to which the content was originally uploaded. We now show that content uploaded to one domain is sometimes silently transferred to another, allowing Spook.js to recover it.

#### Google Sites

As an example, we use Google Sites, which allows users to create personal webpages and embed HTML containing JavaScript under `https://sites.google.com/site/username/`. Since we cannot obtain a presence on the `google.com` domain, Spook.js cannot directly affect other `google.com` pages, as these are on different eTLD+1 domains. However, we observed that Google uses `googleusercontent.com` as a storage location, automatically uploading emailed attachments, images, and thumbnails for Google Drive documents.

#### Google Photos

Focusing on Google Photos, we discovered that all images uploaded (or automatically synchronized) to this service are hosted on `googleusercontent.com`. When viewing images through `https://photos.google.com/`, the page loads images from `googleusercontent.com` via `img` tags, which are not consolidated into the process responsible for rendering pages hosted on `googleusercontent.com`. However, consolidation occurs if the target elects to view the image in a new tab or through a link or QR code, making the tab eligible for consolidation in case of tab pressure.

#### Attack Setup and Results

We created a webpage on `sites.google.com` containing Spook.js attack code. We then opened the attacker’s Google site in one tab and an image from the target’s private Google Workspace (G Suite) in another tab, where the image was automatically uploaded by Google on `googleusercontent.com`. After obtaining consolidation due to tab pressure, we used Spook.js to recover the image. See Figure 14.

### VI. Exploiting Malicious Extensions

Moving away from the security implications of website consolidation, we now look at the security implications of consolidating Chrome extensions. Chrome allows users to install JavaScript-based extensions that modify the browser’s default behavior, such as blocking ads, applying themes, and managing passwords.

#### Extension Permissions

Chrome uses a permissions model to provide extensions with capabilities beyond those of regular JavaScript code executed by a website. To secure these privileged capabilities, it is crucial that extensions are correctly isolated from each other and from websites.

#### The LastPass Extension

To demonstrate the security implications of consolidating Chrome extensions, we use the LastPass Chrome extension, a popular credential manager for syncing credentials across multiple devices. When the user logs into the LastPass extension, it fetches a vault of encrypted passwords stored on LastPass’ cloud and decrypts it using a key derived from the user’s password [35]. We observed that LastPass decrypts passwords only when populating them into a website, while retaining all usernames in plaintext in memory.

#### Attack Setup and Results

We used Chrome with the LastPass v4.69.0 extension, signing into our LastPass account. We also ported Spook.js into a malicious Chrome extension that requires no permissions and installed it on our system. Under tab pressure, Chrome immediately consolidated our malicious extension with LastPass. We could then use LastPass to log in to any website, triggering LastPass to decrypt and populate the website’s credentials. Since Spook.js runs in the same process as the LastPass extension, we could leak the decrypted credentials, violating Chrome’s extension security model. See Figure 15 (top). We also leaked the vault’s master password, compromising all accounts. See Figure 15 (bottom).

### VII. Attacking Additional Browsers

We now investigate Spook.js on other Chromium-based browsers, namely Microsoft Edge and Brave. Edge is the default browser shipped with Windows 10 (5% desktop market share [28]), and Brave is a privacy-oriented browser that aims to block ads and trackers [7]. Both inherit the strict site isolation policy and its security limitations.

We experimentally observed that the consolidation techniques of Section IV-A are effective in both browsers. Table II shows that Spook.js achieves leakage rates similar to those obtained on Chrome.

| Processor         | Browser               | Leakage Rate | Error Rate |
|-------------------|-----------------------|--------------|------------|
| Intel i7 6700k    | Brave v89.1.22.71     | 504 B/s      | 1.25%      |
|                   | Edge v89.0.774.76     | 381 B/s      | 4.88%      |

Finally, we tested the experimental implementation of strict site isolation on Firefox Nightly 89.0a1, build date April 12, 2021. Similar to Chrome, we observed consolidation with tab pressure and `window.open`. However, due to significant JavaScript engine differences, we did not implement Spook.js on Firefox.

### VIII. Conclusions

In this paper, we presented Spook.js, a transient execution attack capable of recovering sensitive information despite Chrome’s strict site isolation countermeasure. The fundamental weakness exploited by Spook.js is the difference in the security models of strict site isolation and the rest of the web ecosystem. Strict site isolation considers resources served from the same eTLD+1 to be in the same security domain, while the rest of the web uses the same-origin policy, which only considers resources to be in the same security domain if the entire domain name is identical. As shown in Section V, these different definitions have led to vulnerabilities in real-world websites that can be exploited by Spook.js.

#### A. Countermeasures

1. **Separating User JavaScript**: Website operators can protect their users by serving user-provided JavaScript content from one domain and all other user-provided content from another domain.
2. **Origin Isolation**: Browser vendors might align the definition of security domains in strict site isolation with the same-origin policy, though this may break some websites.
3. **The Public Suffix List (PSL)**: Web services hosting personal websites should ensure proper isolation by adding their domain to the PSL.
4. **Strict Extension Isolation**: Google has deployed strict extension isolation, preventing the consolidation of two extensions.
5. **Speculation Hardening**: Techniques like placing an `lfence` instruction after type checks and pointer poisoning can prevent speculative type confusion attacks.

#### B. Limitations

1. **Limitation of Targets**: Spook.js currently does not work across unrelated domains.
2. **Limitation of Architecture**: We cannot mount end-to-end Spook.js on AMD systems due to our inability to reliably evict the machine’s LLC cache.
3. **Attacking Firefox**: While we successfully induced consolidation on Firefox, the JavaScript execution engine is significantly different from Chrome’s, leaving the task of demonstrating Spook.js on Firefox to future work.

### Acknowledgements

This work was supported by the Air Force Office of Scientific Research (AFOSR) under award number FA9550-20-1-0425; an ARC Discovery Early Career Researcher Award (project number DE200101577); an ARC Discovery Project (project number DP210102670); the Defense Advanced Research Projects Agency (DARPA) and Air Force Research Laboratory (AFRL) under contracts FA8750-19-C-0531 and HR001120C0087; and Israel Science Foundation grants 702/16.