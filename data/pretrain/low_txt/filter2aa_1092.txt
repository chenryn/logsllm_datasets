# The Information Security Experts
Copyright © 2008 SecureWorks, Inc. All rights reserved.

## The Wide World of WAFs
**Presenter:** Ben Feinstein, CISSP GCFA  
**Organization:** SecureWorks Counter Threat Unit™  
**Event:** DEFCON 16  
**Date:** August 8, 2008

### Overview
- **Web Application Firewalls (WAFs)**
- **PCI Data Security Standard Requirement 6.6**
- **Why should you care?**
- **ModSecurity Concepts and Core Rules**
- **ModSecurity WAF Live Demos:**
  - Reverse Proxy
  - Embedded
  - Content Injection in Response to Attack

### What’s In This Talk?
- Introduction to Web Application Firewalls (WAFs)
- ModSecurity Basics
- PCI Compliance and Its Impact on WAF Adoption
- Key Concepts and Transformations in ModSecurity
- Deployment Scenarios and Live Demos
- Limitations and Future Trends

### Web Application Firewalls (WAFs): The Basics
- **Definition:** A firewall operating at the web application layer.
- **Form Factors:** Hardware or Software.
- **Protocol Support:** HTTP, HTTPS, XML, SOAP, XML-RPC, WS-*.
- **Functions:**
  - Normalization and de-obfuscation
  - Detection and blocking of attacks
  - Rewriting and modifying requests and responses

### ModSecurity Web App Firewalls: The Basics
- **Apache Module:** Dynamically loadable Apache module.
- **Licensing:** Dual License (Community Edition - GPLv2, Commercial License).
- **Creator:** Ivan Ristic.
- **Commercialization:** Breach Security.
- **Core Rules:** Released under GPLv2.

### Why Should You Care?
- **Apology for Boredom:** I apologize in advance if I bore you.
- **PCI Driving WAF Adoption:**
  - **Penetration Testers (QSAs):** PCI will drive your business; familiarity with WAFs is essential for evaluation and subversion.
  - **IT Security:** Deploying WAFs due to PCI requirements.
  - **Blackhats:** Subverting WAFs for fun and profit.

### Meet the Payment Card Industry: Terminology
- **Acronyms:**
  - PCI Security Standards Council (PCI)
  - PCI Data Security Standard (PCI DSS)
  - PIN Entry Devices (PEDs)
  - Payment Application Data (PA-DSS)
  - Qualified Security Assessors (QSAs)
  - Approved Scanning Vendors (ASVs)

### PCI Data Security Standard v1.1: The Basics
- **Key Requirements:**
  - Build and Maintain a Secure Network
  - Protect Cardholder Data
  - Maintain a Vulnerability Management Program
  - Implement Strong Access Control Measures
  - Regularly Monitor and Test Networks
  - Maintain an Information Security Policy

### PCI DSS Application / System Security: Requirement 6
- **R6. Develop & maintain secure systems and applications.**
- **R6.6. Ensure that all web-facing applications are protected against known attacks by:**
  - Reviewing custom application code for common vulnerabilities by a specialized organization.
  - Installing an application layer firewall in front of web-facing applications.
- **Note:** This method is considered a best practice until June 30, 2008, after which it becomes a requirement.

### PCI Data Security Standard: What Does All This Really Mean?
- **Legal Liability:** Reassigning legal liability (QSA assumes unlimited liability? IANAL).
- **Budget Justification:** Compliance rationale for larger IT security budgets.
- **Economic Concerns:** An economically dictated race to the bottom for ASVs?

### Economic Considerations for ASVs
- **Cost of Solution vs. Quality vs. Remediation Costs vs. Loss Expectancy:**
  - Cost of a PCI ASV's solution.
  - Solution's ability to find issues.
  - Cost of remediating identified findings.
  - Loss expectancy due to unidentified issues.
  - Loss expectancy due to unremediated issues.
  - No market differentiator between ASVs of varying quality.

### ModSecurity Concepts
- **Virtual Patching / Just-In-Time Patching**
- **Positive Security Model:**
  - Input Validation Envelope
- **Negative Security Model:**
  - Enumerate the bad stuff
- **Real-World Challenges:**
  - Achieving a positive input validation envelope is difficult.
  - Richard Bejtlich: "When you know nothing, permit-all is the only option. When you know something, default-permit is what you can and should do. When you know everything, default-deny becomes possible, and only then."

### More ModSecurity Concepts: Processing Phases
- **Phases:**
  - Request Headers
  - Request Body
  - Response Headers
  - Response Body
  - Logging / Action

### Transformations in ModSecurity
- **Transformations:**
  - Can be nested or run in serial.
  - Replace Comments (e.g., SQLi)
  - URL Encode/Decode
  - Hex Encode/Decode
  - JavaScript Decode
  - HTML Entity Decode
  - Uppercase/Lowercase
  - MD5/SHA1
  - Normalize Paths

### ModSecurity Core Rules
- **HTTP Protocol Protection:**
  - RFCs
  - Defined policy
- **Common Web Attack Protections:**
  - XSS, SQLi, CSRF, HTTP Response Splitting
- **Automation Detection:**
  - Bots, web crawlers, web scanners
- **Trojan Protection**
- **Server Error Hiding / DLP:**
  - Mask errors sent by the server
  - Data Loss Prevention

### ModSecurity Rule Language Keywords
- **Request Keywords:**
  - REQUEST_METHOD
  - REQUEST_URI
  - REQUEST_FILENAME
  - QUERY_STRING
  - REQUEST_HEADERS
  - REQUEST_BODY
- **Response Keywords:**
  - RESPONSE_STATUS
  - RESPONSE_BODY
  - RESPONSE_HEADERS
  - RESPONSE_CONTENT_TYPE
  - RESPONSE_CONTENT_LENGTH

### ModSecurity v2.5 Highlights
- **Content Injection:**
  - "prepend" and "append"
  - Embedding JS payloads in response to attacks
- **Aho-Corasick Pattern Matching Algorithm:**
  - Improved performance for large sets of patterns
- **Cached Transformations**
- **GeoIP Lookup:**
  - Use as matching criteria in rules

### Additional ModSecurity v2.5 Highlights
- **Credit Card Verification:**
  - @verifyCC rule operator using Luhn checksum algorithm
- **PDF Universal XSS Protection:**
  - One-time use URI for PDFs
  - Redirects visitors and flushes malicious JS
- **Full Lua Scripting:**
  - SecRuleScript directive for complex rules

### ModSecurity Web App Firewall: Deployment Scenarios
- **Embedded:**
  - Installed within the Apache instance hosting the site.
- **Reverse Proxy:**
  - Uses Apache mod_proxy
  - Traffic is redirected to flow through the WAF
  - DNS and network-layer redirection
  - Supports Apache Virtual Hosts

### Live Demos
- **Embedded Deployment:**
  - Site Visitor and Attacker scenarios
- **Reverse Proxy Deployment:**
  - Site Visitor and Attacker scenarios

### ModSecurity Content Injection
- **Credits:**
  - David (DKZA) Kierznowski, GNUCITIZEN
  - Inject code snippets for defense (e.g., redefining alert() with a Logger)
- **Example:**
  - Injecting a Java Applet to reveal the attacker's IP address
- **Rules:**
  - SecContentInjection On
  - SecDefaultAction
  - SecRule TX:ALERT "@eq 1"

### Apache Access Log Example
- **Snippet from Apache access_log:**
  - Reverse Proxy WAF IP: 10.0.0.10
  - Attacker IP: 172.16.0.20

### VA + WAF: The Dream
- **Automated WebApp Vulnerability Assessment:**
  - Instant mitigation of identified flaws through automagic deployment of rules to WAFs.
- **Challenges:**
  - Too many false positives and duplicates
  - Vendors are trying again

### Limitations of WAFs
- **Insecure Session Handling:**
  - Transparent cookie encryption/decryption
- **Flaws in Business Logic:**
  - URL encryption for predictable random numbers
  - Difficult to detect and mitigate with automated tools and WAFs

### The Future
- **Trends:**
  - Vendors adding WAF-like functionality to other devices (Load Balancers, Firewalls, IPS, UTM)
  - WAF-like functionality in malware
  - Rogue/Malicious WAF Attacks
  - More WAF bypass vulnerabilities

### Closing Thoughts
- **WAFs from an Attacker's Perspective:**
  - "Playing with Web Application Firewalls" by Wendel Guglielmetti Henrique
  - How to detect, fingerprint, and evade WAFs

### Acknowledgments
- Thanks to DT, the Goons, and everyone who made DEFCON a reality this year!
- Greetz to DC404, Atlanta's DC Group!
- Speakers: dr.kaos, Carric, David Maynor, Scott Moulton, Adam Bregenzer, and our very own Goon, dc0de!

### Questions?
- **Contact:** PI:EMAIL

---

This optimized version aims to provide a clearer, more structured, and professional presentation of the content.