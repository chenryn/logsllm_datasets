# Kernel Debugging and System Architecture

## Chapter 1: Kernel Debugging
- **Windows Software Development Kit (SDK)**
- **Windows Driver Kit (WDK)**
- **Sysinternals Tools**

### Conclusion

## Chapter 2: System Architecture
- **Requirements and Design Goals**
- **Operating System Model**
- **Architecture Overview**
  - **Portability**
  - **Symmetric Multiprocessing (SMP)**
  - **Scalability**
  - **Differences Between Client and Server Versions**
- **Checked Build**
- **Virtualization-Based Security Architecture Overview**
- **Key System Components**
  - **Environment Subsystems and Subsystem DLLs**
  - **Other Subsystems**
  - **Executive**
  - **Kernel**
  - **Hardware Abstraction Layer (HAL)**
  - **Device Drivers**
  - **System Processes**

### Conclusion

## Chapter 3: Processes and Jobs
- **Creating a Process**
  - **CreateProcess* Functions Arguments**
  - **Creating Windows Modern Processes**
  - **Creating Other Kinds of Processes**
- **Process Internals**
  - **Protected Processes**
  - **Protected Process Light (PPL)**
    - **Third-Party PPL Support**
  - **Minimal and Pico Processes**
    - **Minimal Processes**
    - **Pico Processes**
  - **Trustlets (Secure Processes)**
    - **Trustlet Structure**
    - **Trustlet Policy Metadata**
    - **Trustlet Attributes**
    - **System Built-In Trustlets**
    - **Trustlet Identity**
  - **Isolated User-Mode Services**
  - **Trustlet-Accessible System Calls**
- **Flow of CreateProcess**
  1. **Converting and Validating Parameters and Flags**
  2. **Opening the Image to be Executed**
  3. **Creating the Windows Executive Process Object**
  4. **Creating the Initial Thread and Its Stack and Context**
  5. **Performing Windows Subsystem-Specific Initialization**
  6. **Starting Execution of the Initial Thread**
  7. **Performing Process Initialization in the Context of the New Process**
- **Terminating a Process**
- **Image Loader**
- **Early Process Initialization**
  - **DLL Name Resolution and Redirection**
  - **Loaded Module Database**
  - **Import Parsing**
  - **Post-Import Process Initialization**
  - **SwitchBack**
  - **API Sets**
- **Jobs**
  - **Job Limits**
  - **Working with a Job**
  - **Nested Jobs**
  - **Windows Containers (Server Silos)**

### Conclusion

## Chapter 4: Threads
- **Creating Threads**
- **Thread Internals**
  - **Data Structures**
  - **Birth of a Thread**
  - **Examining Thread Activity**
  - **Limitations on Protected Process Threads**
- **Thread Scheduling**
  - **Overview of Windows Scheduling**
  - **Priority Levels**
  - **Thread States**
  - **Dispatcher Database**
  - **Quantum**
  - **Priority Boosts**
  - **Context Switching**
  - **Scheduling Scenarios**
  - **Idle Threads**
  - **Thread Suspension**
  - **(Deep) Freeze**
  - **Thread Selection**
  - **Multiprocessor Systems**
    - **Thread Selection on Multiprocessor Systems**
    - **Processor Selection**
    - **Heterogeneous Scheduling (big.LITTLE)**
    - **Group-Based Scheduling**
    - **Dynamic Fair Share Scheduling**
    - **CPU Rate Limits**
    - **Dynamic Processor Addition and Replacement**
- **Worker Factories (Thread Pools)**
  - **Worker Factory Creation**

### Conclusion

## Chapter 5: Memory Management
- **Introduction to the Memory Manager**
- **Memory Manager Components**
- **Large and Small Pages**
- **Examining Memory Usage**
- **Internal Synchronization**
- **Services Provided by the Memory Manager**
- **Page States and Memory Allocations**
- **Commit Charge and Commit Limit**
- **Locking Memory**
- **Allocation Granularity**
- **Shared Memory and Mapped Files**
- **Protecting Memory**
  - **Data Execution Prevention (DEP)**
  - **Copy-on-Write**
  - **Address Windowing Extensions (AWE)**
- **Kernel-Mode Heaps (System Memory Pools)**
  - **Pool Sizes**
  - **Monitoring Pool Usage**
  - **Look-Aside Lists**
- **Heap Manager**
  - **Process Heaps**
  - **Heap Types**
    - **The NT Heap**
    - **Heap Synchronization**
    - **The Low-Fragmentation Heap**
    - **The Segment Heap**
  - **Heap Security Features**
  - **Heap Debugging Features**
    - **Pageheap**
    - **Fault-Tolerant Heap**
- **Virtual Address Space Layouts**
  - **x86 Address Space Layouts**
    - **x86 System Address Space Layout**
    - **x86 Session Space**
    - **System Page Table Entries**
  - **ARM Address Space Layout**
  - **64-bit Address Space Layout**
    - **x64 Virtual Addressing Limitations**
    - **Dynamic System Virtual Address Space Management**
    - **System Virtual Address Space Quotas**
  - **User Address Space Layout**
- **Address Translation**
  - **x86 Virtual Address Translation**
    - **Translation Look-Aside Buffer (TLB)**
  - **x64 Virtual Address Translation**
  - **ARM Virtual Address Translation**
- **Page Fault Handling**
  - **Invalid PTEs**
  - **Prototype PTEs**
  - **In-Paging I/O**
  - **Collided Page Faults**
  - **Clustered Page Faults**
- **Page Files**
  - **Commit Charge and the System Commit Limit**
  - **Commit Charge and Page File Size**
- **Stacks**
  - **User Stacks**
  - **Kernel Stacks**
  - **DPC Stack**
- **Virtual Address Descriptors (VADs)**
  - **Process VADs**
  - **Rotate VADs**
- **NUMA (Non-Uniform Memory Access)**
- **Section Objects**
- **Working Sets**
  - **Demand Paging**
  - **Logical Prefetcher and ReadyBoot**
  - **Placement Policy**
  - **Working Set Management**
    - **Balance Set Manager and Swapper**
    - **System Working Sets**
    - **Memory Notification Events**
- **Page Frame Number (PFN) Database**
- **Page List Dynamics**
- **Page Priority**
- **Modified Page Writer and Mapped Page Writer**
- **PFN Data Structures**
- **Page File Reservation**
- **Physical Memory Limits**
  - **Windows Client Memory Limits**
- **Memory Compression**
  - **Compression Illustration**
  - **Compression Architecture**
- **Memory Partitions**
- **Memory Combining**
  - **The Search Phase**
  - **The Classification Phase**
  - **The Page Combining Phase**
  - **From Private to Shared PTE**
  - **Combined Pages Release**
- **Memory Enclaves**
  - **Programmatic Interface**
  - **Memory Enclave Initializations**
  - **Enclave Construction**
  - **Loading Data into an Enclave**
  - **Initializing an Enclave**
- **Proactive Memory Management (SuperFetch)**
  - **Components**
  - **Tracing and Logging**
  - **Scenarios**
  - **Page Priority and Rebalancing**
  - **Robust Performance**
- **ReadyBoost**
- **ReadyDrive**
- **Process Reflection**

### Conclusion

## Chapter 6: I/O System
- **I/O System Components**
  - **The I/O Manager**
  - **Typical I/O Processing**
  - **Interrupt Request Levels (IRQLs) and Deferred Procedure Calls (DPCs)**
    - **Interrupt Request Levels (IRQLs)**
    - **Deferred Procedure Calls (DPCs)**
- **Device Drivers**
  - **Types of Device Drivers**
  - **Structure of a Driver**
  - **Driver Objects and Device Objects**
  - **Opening Devices**
  - **I/O Processing**
  - **Types of I/O**
  - **I/O Request Packets (IRPs)**
  - **I/O Request to a Single-Layered Hardware-Based Driver**
  - **I/O Requests to Layered Drivers**
  - **Thread-Agnostic I/O**
  - **I/O Cancellation**
  - **I/O Completion Ports**
  - **I/O Prioritization**
  - **Container Notifications**
- **Driver Verifier**
  - **I/O-Related Verification Options**
  - **Memory-Related Verification Options**
- **Plug and Play Manager**
  - **Level of Plug and Play Support**
  - **Device Enumeration**
  - **Device Stacks**
  - **Driver Support for Plug and Play**
  - **Plug-and-Play Driver Installation**
- **General Driver Loading and Installation**
  - **Driver Loading**
  - **Driver Installation**
- **Windows Driver Foundation (WDF)**
  - **Kernel-Mode Driver Framework (KMDF)**
  - **User-Mode Driver Framework (UMDF)**
- **Power Manager**
  - **Connected Standby and Modern Standby**
  - **Power Manager Operation**
  - **Driver Power Operation**
  - **Driver and Application Control of Device Power**
  - **Power Management Framework**
  - **Power Availability Requests**

### Conclusion

## Chapter 7: Security
- **Security Ratings**
  - **Trusted Computer System Evaluation Criteria (TCSEC)**
  - **Common Criteria**
- **Security System Components**
- **Virtualization-Based Security**
  - **Credential Guard**
  - **Device Guard**
- **Protecting Objects**
  - **Access Checks**
  - **Security Identifiers (SIDs)**
  - **Virtual Service Accounts**
  - **Security Descriptors and Access Control**
  - **Dynamic Access Control**
  - **AuthZ API**
  - **Conditional Access Control Entries (ACEs)**
- **Account Rights and Privileges**
  - **Account Rights**
  - **Privileges**
  - **Super Privileges**
- **Access Tokens of Processes and Threads**
- **Security Auditing**
  - **Object Access Auditing**
  - **Global Audit Policy**
  - **Advanced Audit Policy Settings**
- **AppContainers**
  - **Overview of UWP Apps**
  - **The AppContainer**
- **Logon**
  - **Winlogon Initialization**
  - **User Logon Steps**
  - **Assured Authentication**
  - **Windows Biometric Framework**
  - **Windows Hello**
- **User Account Control (UAC) and Virtualization**
  - **File System and Registry Virtualization**
  - **Elevation**
- **Exploit Mitigations**
  - **Process-Mitigation Policies**
  - **Control Flow Integrity (CFI)**
  - **Security Assertions**
  - **Application Identification**
  - **AppLocker**
  - **Software Restriction Policies**
  - **Kernel Patch Protection (PatchGuard)**
  - **HyperGuard**

### Conclusion

## Index
### Symbols
- \ (root directory), 692

### Numbers
- 32-bit handle table entry, 147
- 64-bit IDT, viewing, 34–35

### A
- **AAM (Application Activation Manager)**, 244
- **ACL (access control list)**, displaying, 153–154
- **ACM (authenticated code module)**, 805–806
- **!acpiirqarb command**, 49
- **ActivationObject object**, 129
- **ActivityReference object**, 129
- **address-based pushlocks**, 201
- **address-based waits**, 202–203
- **ADK (Windows Assessment and Deployment Kit)**, 421
- **administrative command prompt**, opening, 253, 261
- **AeDebug and AeDebugProtected root keys, WER (Windows Error Reporting)**, 540
- **AES (Advanced Encryption Standard)**, 711
- **allocators, ReFS (Resilient File System)**, 743–745
- **ALPC (Advanced Local Procedure Call)**, 209
- **!alpc command**, 224
- **ALPC message types**, 211
- **ALPC ports**, 129, 212–214
- **ALPC worker thread**, 118
- **APC level**, 40, 43, 62, 63, 65
- **!apciirqarb command**, 48
- **APCs (asynchronous procedure calls)**, 61–66
- **APIC, and PIC (Programmable Interrupt Controller)**, 37–38
- **APIC (Advanced Programmable Interrupt Controller)**, 35–36
- **!apic command**, 37
- **APIC Timer**, 67
- **APIs**, 690
- **\AppContainer NamedObjects directory**, 160
- **AppContainers**, 243–244
- **AppExecution aliases**, 263–264
- **apps, activating through command line**, 261–262. See also packaged applications
- **APT (Advanced Persistent Threats)**, 781
- **!arbiter command**, 48
- **architectural system service dispatching**, 92–95
- **\ArcName directory**, 160
- **ARM32 simulation on ARM 64 platforms**, 115
- **assembly code**, 2
- **associative cache**, 13
- **atomic execution**, 207
- **attributes, resident and nonresident**, 667–670
- **auto-expand pushlocks**, 201
- **Autoruns tool**, 837
- **autostart services startup**, 451–457
- **AWE (Address Windowing Extension)**, 201

### B
- **B+ Tree physical layout, ReFS (Resilient File System)**, 742–743
- **background tasks and Broker Infrastructure**, 256–258
- **Background Broker Infrastructure**, 244, 256–258
- **backing up encrypted files**, 716–717
- **bad-cluster recovery, NTFS recovery support**, 703–706. See also clusters
- **bad-cluster remapping, NTFS**, 633
- **base named objects, looking at**, 163–164. See also objects
- **\BaseNamedObjects directory**, 160