### High-Performance and Low-Power CMOS Design Styles: An Analysis of Energy-Delay Product (EDP)

**Figure 6.** The combined curves from Figures 4 and 5 to compute the overall EDP.

The combined graphs in Figure 6 illustrate the EDP for each recovery system, matched with each CMOS design style. Section 7.1 demonstrated that, for each design style, the results were very similar, regardless of whether frequency or voltage scaling was applied. Therefore, we only show the results for one technology, specifically 45nm using frequency scaling.

**Key Observations:**
- **High-Performance CMOS:** Timing speculation provides a 23% reduction in EDP.
- **Low-Power CMOS:** A 47% reduction in EDP is observed.
- **Ultra-Low Power CMOS:** A 32% reduction in EDP is achieved, especially at sub-threshold Vdd.

In all cases, the optimal error rate is around \(2 \times 10^{-2}\) errors per cycle. This high error rate can only be sustained with a fine-grained, energy-efficient design like Razor. For checkpoint-based recovery, the error rates are around \(10^{-4}\), with at most a 13% energy efficiency improvement for high-performance and low-power CMOS designs.

### Conclusion
Our analysis shows that significant energy efficiency gains are possible with timing speculation, particularly for ultra-low power CMOS designs operating in the sub-threshold region. However, these gains are limited by the high error rates and the need for fine-grained, energy-efficient designs.

### Limitations

**Hardware Efficiency Model:**
1. **Leakage Power:** Our model considers only dynamic energy, abstracting away leakage power. At today's process nodes, a significant portion of total power is leakage. Hence, our results for dynamic energy can be adapted assuming a fixed percentage of total power as leakage.
2. **Path Distributions:** We assume that the path distribution is an input to the model and that execution time is linearly proportional to frequency. This assumption simplifies the model but may not fully capture the complexities of real-world designs.

**System Recovery Model:**
1. **Checkpoint Restoration:** We assume perfect detection and short latency for checkpoint restoration, which is an optimistic assumption. Relaxing these assumptions could reduce the potential gains of timing speculation.
2. **Fixed Memory Delays:** We also assume fixed memory delays, which may not hold in all scenarios.

**Combining the Models:**
When determining the optimal system energy efficiency, we assume all errors are detectable and that the system can handle them. However, certain error rates and clock periods place bounds on the range of improvements. Our framework can be extended to include other sources of variation if their distributions are known.

### Related Work

- **Critical Operating Point Hypothesis:** Patel proposed the Critical Operating Point hypothesis, which suggests trading off limited reliability for high performance and energy efficiency in large CMOS circuits [12]. Our model confirms this hypothesis and shows that recovery overheads make very high error rates impractical for simple processor models.
- **PVT Variations:** Several models have been proposed for PVT variations. For example, Mukhopadhyay et al. modeled the failure probability of SRAM cells due to process parameter variations [10], and Memik et al. developed a model for error probability in register files [8].
- **Timing Speculation Models:** Additional models have been developed for timing speculation techniques and architectures [4, 15, 20]. These models have been extended for use in software recovery [2].

### Conclusion
This paper presents a hardware-level model to capture the effects of timing speculation and a general system-level model for backward error recovery. Combining these models yields an end-to-end framework for exploring the energy efficiency of timing speculation systems. Our results show that the improvements remain essential, and ultra-low power designs operating in the sub-threshold region can achieve substantial energy efficiency gains. Fine-grained recovery systems significantly outperform checkpoint-based recovery in terms of energy efficiency.

### References
[1] Process integration, devices, and structures. In International Technology Roadmap for Semiconductors. 2008 edition.
[2] M. de Kruijf, S. Nomura, and K. Sankaralingam. Relax: An architectural framework for software recovery of hardware faults. In ISCA '10.
[3] D. Ernst et al. Razor: A low-power pipeline based on circuit-level timing speculation. In MICRO '03, pages 7-18.
[4] B. Greskamp et al. Blueshift: Designing processors for timing speculation from the ground up. In HPCA '09, pages 213-224.
[5] B. Greskamp and J. Torrellas. Paceline: Improving single-thread performance in nanoscale CMPs through core over-clocking. In PACT '07, pages 213-224.
[6] J. Hicks et al. 45nm Transistor Reliability. Intel Technology Journal, 12, 2008.
[7] Intel. Enhanced Intel SpeedStep Technology for the Intel Pentium M processor. White Paper, 2004.
[8] G. Memik and A. Mallik. Engineering over-clocking: Reliability-performance trade-offs for high-performance register files. In DSN '05, pages 770-779.
[9] S. S. Mukherjee et al. A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor. In MICRO '03.
[10] S. Mukhopadhyay, H. Mahmoodi, and K. Roy. Modeling of failure probability and statistical yield enhancement design of SRAM array for nanoscaled CMOS. IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, 24(12):1859-1880, 2005.
[11] L.-T. Pang and B. Nikolic. Measurement and analysis of variability in 45nm strained-Si CMOS technology. In CICC '08, pages 129-132.
[12] J. Patel. CMOS process variations: A critical operation point hypothesis. Online Presentation, 2008.
[13] J. Rabaey. Low Power Design Essentials, chapter 2. Springer, 2009.
[14] S. Sarangi et al. VARIUS: A model of process variation resulting in timing errors. IEEE Transactions on Semiconductor Manufacturing, 21(1):3-13, 2008.
[15] S. Sarangi, B. Greskamp, A. Tiwari, and J. Torrellas. EVAL: Utilizing variation-induced timing errors. In MICRO '08, pages 423-434.
[16] J. C. Smolens et al. Reunion: Complexity-effective multi-core redundancy. In MICRO '06, pages 223-234.
[17] D. Sorin. Fault Tolerant Computer Architecture. Morgan & Claypool, 2009.
[18] E. Sprangle and D. Carmean. Increasing processor performance by implementing deeper pipelines. In ISCA '02, pages 25-34.
[19] J. Tschanz et al. Adaptive body bias for reducing impacts of die-to-die and within-die parameter variations on microprocessor frequency and leakage. IEEE Journal of Solid-State Circuits, 37(11):1396-1402, 2002.
[20] L. Wan and D. Chan. Dynatune: Circuit-level optimization for timing speculation considering dynamic path behavior. In ICCAD '09, pages 172-179, 2009.
[21] A. Wang, B. H. Calhoun, and A. P. Chandrakasan. Sub-threshold Design for Ultra Low-Power Systems. Springer, 2006.

**Acknowledgments:**
We thank the anonymous reviewers, the Vertical group, and the Wisconsin Conductor project for their assistance. Support for this research was provided by NSF CAREER award #0845751 and Toshiba Corporation.