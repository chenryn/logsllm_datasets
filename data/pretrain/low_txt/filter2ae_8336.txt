# 如何发现Facebook漏洞：第一部分

自三月份以来，我一直处于疫情之中。为了充分利用这段时间，我决定考取OSWE认证，并于8月8日通过了考试。之后，我花了几个星期从备考过程中恢复过来。到了9月中旬，我意识到自己还没有像往年一样在2020年的Facebook名人堂中注册自己的名字。于是，我开始了我的探索之旅。

在开始之前，我阅读了一些关于Facebook子域名漏洞的文章，其中一篇特别引起了我的注意：[HTML to PDF转换器漏洞导致Facebook服务器RCE](https://ysamm.com/?p=280)。这篇文章让我对如何在如此庞大的Web应用程序中寻找漏洞有了初步的认识。

我的主要目标是**https://legal.tapprd.thefacebook.com**，希望找到能够达到远程代码执行（RCE）或类似效果的漏洞。首先，我使用模糊测试工具对该Web应用进行全面扫描，以获取其完整的端点列表。经过两个小时的小憩和观影后，我检查了扫描结果，发现了一些返回403状态码的目录：

- /tapprd/
- /tapprd/content/
- /tapprd/services/
- /tapprd/Content/
- /tapprd/api/
- /tapprd/Services/
- /tapprd/temp/
- /tapprd/logs/
- /tapprd/logs/portal/
- /tapprd/logs/api/
- /tapprd/certificates/
- /tapprd/logs/auth/
- /tapprd/logs/Portal/
- /tapprd/API/
- /tapprd/webroot/
- /tapprd/logs/API/
- /tapprd/certificates/sso/
- /tapprd/callback/
- /tapprd/logs/callback/
- /tapprd/Webroot/
- /tapprd/certificates/dkim/
- /tapprd/SERVICES/

这些结果证实了我的预期——该应用规模庞大且复杂。接着，我开始仔细阅读JavaScript文件，试图了解网站的工作原理及其采用的技术手段。在这个过程中，我发现了一种绕过重定向并登录SSO的方法，即**/tapprd/auth/identity/user/forgotpassword**。进一步探索后，我又注意到另一个端点**/savepassword**，它接受POST请求。根据JS文件的内容，我知道这个页面需要生成令牌和XSRF令牌等信息才能正常工作。

我尝试手动修改Burp Suite中的请求参数来测试此功能，但收到了错误提示。于是猜测这可能是由于电子邮件地址有误或其他原因导致的。为验证这一假设，我创建了一个包含随机邮箱地址的字典，并利用Intruder模块发送带有CSRF令牌及新密码的请求至**/savepassword**。几小时后，我收到了两种不同的响应：一种仍然是原来的错误信息；另一种则是302重定向到登录页面。这意味着如果输入正确的管理员邮箱地址，攻击者有可能成功更改密码并登录系统。

基于上述发现，我编写了一个简单的Python脚本来自动化这一过程。用户只需提供目标邮箱和期望的新密码，脚本即可完成密码修改操作。值得注意的是，由于Facebook员工曾使用其工作账号登录过该平台，因此存在潜在风险，攻击者可能借此机会访问某些内部账户。最终，我在10月2日报告了该漏洞，并获得了7500美元的奖励。（补充说明：密码重置API向所有人开放而未做任何验证，影响范围仅限于tapprd产品。）

虽然整个过程相对简单直接，但我仍然感到非常兴奋。此外，在同一应用中我还发现了另外两个漏洞，将在系列文章的第二部分详细介绍。

您可以访问我的个人博客阅读完整版write-up：
[原文链接](https://ysamm.com/?p=280)

也可以在Twitter上关注我获得最新动态。