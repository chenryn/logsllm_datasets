### Optimized Text

**Figure 6** illustrates that, in the case of exact match searches, the trie outperforms the B+-tree by more than 150% in search time. Additionally, the trie scales better, particularly as the data size increases.

**Relation Size (No. of Keys)**
- 250K
- 500K
- 1M
- 2M
- 4M

For regular expression match searches (as shown in **Figure 7**), our experiments demonstrate that the trie achieves more than two orders of magnitude improvement in search time. It is important to note that we only allow for the wildcard character `?`, which matches any single character. The performance of the B+-tree is highly sensitive to the position of the wildcard in the search string. For example, if `?` appears in the 2nd or 3rd positions, the B+-tree's performance degrades significantly. If `?` appears as the first character, the B+-tree index is not used, and a sequential scan is performed instead. This sensitivity is due to the B+-tree's reliance on the prefix of the search string before any wildcards. In contrast, the trie can use any non-wildcard characters in the search string to navigate the index tree, making it more tolerant of regular expression match queries. For instance, to search for the expression `?at?r`, the trie matches all entries at the root node with `?`, then filters the 2nd and 3rd levels based on the letters `a` and `t`, respectively. At the 4th level, the entries are matched with `?`, and the 5th level is filtered based on the letter `r`.

**Figure 14** compares the index sizes of the R-tree and the kd-tree. The x-axis and y-axis range from 0 to 100, and we generated datasets ranging from 250K to 4M two-dimensional points. The figure shows that the SP-GiST kd-tree has more than 300% search time improvement over the R-tree for point match searches and approximately 125% improvement for range searches. However, the R-tree has better insertion times and a smaller index size compared to the kd-tree. This is because the kd-tree is a binary search tree with a bucket size of 1, leading to frequent node splits and a larger number of nodes. To reduce the tree's page height, the storage clustering technique must degrade the index page utilization, resulting in an increase in the index size.

**Figure 15** compares the performance of the R-tree, kd-tree, and trie for nearest neighbor (NN) searches. We inserted 2 million tuples into each relation and varied the required number of NNs from 8 to 1024. The figure shows that NN searches over the trie are much slower than those over the kd-tree and point quadtree. This is because the trie performs comparisons character by character, which slows down the convergence to the next NN. In contrast, the kd-tree and quadtree use partition-based comparisons, and the Hamming distance updates the distance value with either 0 or 1 at each step, making it slower compared to the Euclidean distance.

**Figure 16** demonstrates the significant performance gain of using the suffix tree index for substring match searches, achieving more than three orders of magnitude improvement over sequential scan searches. Other index types do not support substring match searches.

**Conclusion and Future Research**

We presented a comprehensive implementation and realization of SP-GiST-based indexes within PostgreSQL. We implemented several index structures, including the trie, kd-tree, point quadtree, PMR quadtree, and suffix tree. The paper addresses various implementation challenges, experiences, and performance issues. Our experiments highlight the potential benefits of SP-GiST indexes. For example, the trie outperforms the B+-tree by more than 150% for exact match searches and by more than two orders of magnitude for regular expression match searches. The kd-tree also outperforms the R-tree by more than 300% for point match searches. SP-GiST supports advanced search operations such as NN and substring match. While SP-GiST indexes offer significant performance gains and advanced functionalities, they have higher overhead in terms of insertion time and index size compared to the B+-tree and R-tree. Future research should address these weaknesses.

**References**

[1] IBM Corp.: IBM DB2 Universal Database Application Development Guide, v.6. 1999.
[2] W. G. Aref, D. Barbara, and P. Vallabhaneni. The handwritten trie: Indexing electronic ink. In SIGMOD, pages 151–162, 1995.
[3] W. G. Aref and I. F. Ilyas. An extensible index for spatial databases. In SSDBM, pages 49–58, 2001.
[4] W. G. Aref and I. F. Ilyas. SP-GiST: An extensible database index for supporting space partitioning trees. J. Intell. Inf. Syst., 17(2-3):215–240, 2001.
[5] R. Bayer. The universal B-tree for multidimensional indexing: General concepts. In WWCA, pages 198–209, 1997.
[6] R. Bayer and E. M. McCreight. Organization and maintenance of large ordered indices. Acta Inf., 1:173–189, 1972.
[7] N. Beckmann, H. Kriegel, R. Schneider, and B. Seeger. The R*-tree: An efficient and robust access method for points and rectangles. In SIGMOD Record, 19(2), 1990.
[8] J. L. Bentley. Multidimensional binary search trees used for associative searching. Commun. ACM, 18(9):509–517, 1975.
[9] J. L. Bentley. Multidimensional binary search trees in database applications. IEEE TSE-5:333–340, 1979.
[10] W. A. Burkhard. Hashing and trie algorithms for partial match retrieval. ACM Transactions on Database Systems, 1(2):175–187, 1976.
[11] D. Comer. Ubiquitous B-tree. ACM Comput. Surv., 11(2):121–137, 1979.
[12] A. A. Diwan, S. Rane, S. Seshadri, and S. Sudarshan. Clustering techniques for minimizing external path length. In VLDB, pages 342–353, 1996.
[13] G. Evangelidis, D. B. Lomet, and B. Salzberg. The HBPPI-tree: A multi-attribute index supporting concurrency, recovery, and node consolidation. VLDB Journal, 6(1):1–25, 1997.
[14] R. Fagin, J. Nievergelt, N. Pippenger, and H. R. Strong. Extendible hashing: A fast access method for dynamic files. ACM Trans. Database Syst., 4(3):315–344, 1979.
[15] R. A. Finkel and J. L. Bentley. Quadtrees: A data structure for retrieval on composite keys. Acta Inf., 4:1–9, 1974.
[16] E. Fredkin. Trie memory. Commun. ACM, 3(9):490–499, 1960.
[17] V. Gaede and O. Günther. Multidimensional access methods. ACM Comput. Surv., 30(2):170–231, 1998.
[18] I. Gargantini. An effective way to represent quadtrees. Commun. ACM, 25(12):905–910, 1982.
[19] T. M. Ghanem, R. Shah, M. F. Mokbel, W. G. Aref, and J. S. Vitter. Bulk operations for space-partitioning trees. In ICDE, pages 29–40, 2004.
[20] A. Guttman. R-trees: A dynamic index structure for spatial searching. In SIGMOD, pages 47–57, 1984.
[21] J. M. Hellerstein, J. F. Naughton, and A. Pfeffer. Generalized search trees for database systems. In VLDB, pages 562–573, 1995.
[22] J. M. Hellerstein and A. Pfeffer. The RD-tree: An index structure for sets. In Univ. of Wisconsin CS Technical Report 1252, 1994.
[23] G. R. Hjaltason and H. Samet. Ranking in spatial databases. In SDD, pages 83–95, 1995.
[24] E. G. Hoel and H. Samet. A qualitative comparison study of data structures for large line segment databases. In SIGMOD, pages 205–214, 1992.
[25] N. Katayama and S. Satoh. The SR-tree: An index structure for high-dimensional nearest neighbor queries. In SIGMOD, pages 369–380, 1997.
[26] G. Kedem. The quad-CIF tree: A data structure for hierarchical online algorithms. In 19th Conference on Design Automation, pages 352–357, 1982.
[27] M. Kornacker. High-performance extensible indexing. In VLDB, pages 699–708, 1999.
[28] R. Kothuri, S. Ravada, and D. Abugov. Quadtree and R-tree indexes in Oracle Spatial: A comparison using GIS data. In SIGMOD, pages 546–557, 2002.
[29] R. K. Kothuri and S. Ravada. Efficient processing of large spatial queries using interior approximations. In SSTD, pages 404–424, 2001.
[30] R. C. Nelson and H. Samet. A population analysis for hierarchical data structures. In SIGMOD, pages 270–277, 1987.
[31] R. L. Rivest. Partial-match retrieval algorithms. In SIAM J. Comput., 5(1), pages 19–50, 1976.
[32] J. T. Robinson. The k-d-b-tree: A search structure for large multidimensional dynamic indexes. In SIGMOD, pages 10–18, 1981.
[33] H. Samet. The design and analysis of spatial data structures. Addison-Wesley, Reading, MA, 1990.
[34] T. K. Sellis, N. Roussopoulos, and C. Faloutsos. The R+-tree: A dynamic index for multi-dimensional objects. In VLDB, pages 507–518, 1987.
[35] T. K. Sellis, N. Roussopoulos, and C. Faloutsos. Multi-dimensional access methods: Trees have grown everywhere. In VLDB, pages 13–14, 1997.
[36] P. Seshadri. Predator: A resource for database research. In SIGMOD Record, 27(1), pages 16–20, 1998.
[37] J. Srinivasan, R. Murthy, S. Sundara, N. Agarwal, and S. DeFazio. Extensible indexing: A framework for integrating domain-specific indexing schemes into Oracle 8i. In ICDE, pages 91–100, 2000.
[38] M. Stonebraker. Inclusion of new types in relational database systems. In ICDE, pages 262–269, 1986.
[39] M. Stonebraker and G. Kemnitz. The Postgres next-generation database management system. Commun. ACM, 34(10):78–92, 1991.
[40] Y. Theodoridis and T. Sellis. A model for the prediction of R-tree performance. In PODS, pages 161–171, 1996.
[41] F. Wang. Relational-linear quadtree approach for two-dimensional spatial representation and manipulation. TKDE, 3(1):118–122, 1991.