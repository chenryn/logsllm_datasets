**Title: Inferring Protocol State Machine from Real-World Traces**

**Authors:**
- Yipeng Wang
- Zhibin Zhang
- Li Guo
- Danfeng (Daphne) Yao
- Buyun Qu

**Affiliations:**
- 1. Institute of Computing Technology, Chinese Academy of Sciences, Beijing, China
- 2. Department of Computer Science, Virginia Tech, Blacksburg, VA, USA
- 3. Graduate University, Chinese Academy of Sciences, Beijing, China

**Contact:**
- {zhangzhibin, guoli}@ict.ac.cn

**Abstract:**
Application-level protocol specifications, which detail how a protocol should behave, are essential for network security management, including intrusion detection and prevention. Knowledge of these specifications is also an effective way to detect malicious code. However, current methods for obtaining unknown protocol specifications often rely on manual operations such as reverse engineering, which is time-consuming and labor-intensive. Several works have focused on automatically extracting protocol messages from real-world traces but have not addressed the inference of protocol state machines.

In this paper, we introduce Veritas, a system that can automatically infer protocol state machines from real-world network traces. The key feature of Veritas is its ability to operate without prior knowledge of protocol specifications, using statistical analysis of protocol formats. We also formally define a new model, the Probabilistic Protocol State Machine (P-PSM), which generalizes traditional protocol state machines in a probabilistic manner. Our experiments, conducted on a text-based protocol and two binary-based protocols, demonstrate that Veritas can accurately represent 92% of the protocol flows on average. Veritas is versatile and suitable for both text-based and binary-based protocols, and it can serve as an auxiliary tool for analyzing unknown behaviors in real-world applications.

**Keywords:**
- Protocol Model Inference and Analysis
- Probabilistic Protocol State Machine
- Network Security

**1. Introduction**
Detailed knowledge of protocol specifications is crucial for various network security applications, such as intrusion detection systems, vulnerability discovery, and protocol analyzers for Internet traffic monitoring. Additionally, protocol specifications are important for application fingerprinting and mapping traffic to applications. However, many network protocols, especially private and non-standard ones, lack publicly available specifications. Therefore, it is a significant challenge for Internet Service Providers (ISPs) to discover these unknown protocol specifications.

In the context of protocol specification discovery, inferring protocol state machines is particularly important. A protocol state machine is a finite state automaton that illustrates the states in the protocol and their transitions. Discovering message formats is useful for identifying protocols in monitored network traffic and building intrusion detection systems, while discovering the protocol state machine can depict the behavior of an application. Previous work has primarily focused on extracting protocol format information, with limited attention to protocol state machines. For example, Prospex [3] is a notable solution for both protocol format and state machine inference, but it requires the binary code of the program.

Our paper presents a novel technique for inferring protocol state machines solely based on real-world network traces. This approach offers several advantages:
1. It can be easily automated, reducing manual effort.
2. It does not require distinguishing between client and server applications.
3. It is particularly useful for analyzing up to 40% of Internet traffic that belongs to unknown applications, many of which are run by botnets.

We propose Veritas, a system that automatically extracts protocol state machines for stateful network protocols from Internet traffic. The input to Veritas is the network trace of a specific application, and the output is a probabilistic description of the protocol state machine. This Probabilistic Protocol State Machine (P-PSM) is a new and powerful model that captures and represents protocols with incomplete knowledge. To test and verify Veritas, we applied our system to several real-world applications, including SMTP, PPLIVE, and XUNLEI. Our results show that Veritas can correctly recognize and classify 86% of SMTP flows, 100% of PPLIVE flows, and 90% of XUNLEI flows. The key features of Veritas include:
- No prior knowledge of protocol specifications is required.
- It is based on the statistical analysis of protocol formats.
- It is effective for both text and binary protocols.

Our contributions are summarized as follows:
- We introduce and formalize the Probabilistic Protocol State Machine (P-PSM) for describing protocol state machines in a probabilistic manner when there is incomplete knowledge about the protocol.
- We design Veritas, a system that can automatically infer the protocol state machine of a specific protocol from its real-world trace without any prior knowledge.
- We apply Veritas to real-world applications, demonstrating its capability to infer high-quality protocol state machines in practice.

The rest of the paper is organized as follows. Section 2 discusses related work. Section 3 introduces the architecture of Veritas and details each component of the system. Section 4 presents the application of Veritas for protocol inference and evaluates the system with different protocols. Finally, Section 5 concludes our work and outlines future research directions.

**2. Related Work**
We categorize related work into three areas: automatic protocol reverse engineering, protocol message format extraction, and inferring protocol state machines.

**Automatic Protocol Reverse Engineering:**
Accurately reversing protocols typically involves manual efforts, as seen in Gaim [23] and [22]. Some proposals aim to automate this process. Lim et al. [1] proposed a method to extract formats from files and application data output, but it depends on specific parameters that may not always be available. Polyglot [5] uses dynamic analysis of program binaries, but our work assumes that the binary code is not available, making our approach orthogonal to these.

**Protocol Message Format Extraction:**
Much work focuses on extracting protocol message formats. Kannan et al. [8] presented algorithms for extracting the structure of application sessions. Haaffner [7] automated the construction of protocol signatures. Ma [9] proposed a method for classifying network data without relying on port numbers. Cui et al. [6] introduced a tool for automatically reverse engineering protocol message formats from network traces. However, these studies did not address the inference of protocol state machines.

**Inferring Protocol State Machines:**
Inferring protocol state machines is crucial for protocol specifications. Works closest to ours include ScriptGen and Prospex. ScriptGen [4] aims to infer protocol state machines, and Prospex [3] provides a solution for both protocol format and state machine inference. However, Prospex requires the binary code of the program, whereas our approach does not.

**Figure 1: Overview of Veritas System Architecture**

[Insert Figure 1: An overview of the Veritas system architecture, showing the main components and their interactions.]

**3. Veritas System Architecture**
Veritas consists of several key components designed to infer the protocol state machine from network traces. These components include:
- **Trace Collector:** Collects and preprocesses network traces.
- **Message Extractor:** Identifies and extracts protocol messages from the traces.
- **Format Analyzer:** Analyzes the structure and format of the extracted messages.
- **State Machine Inferencer:** Constructs the probabilistic protocol state machine (P-PSM) based on the analyzed message formats.
- **Validation Module:** Validates the inferred state machine against known protocol behaviors.

**4. Experimental Evaluation**
To evaluate Veritas, we applied it to several real-world applications, including a text-based protocol (SMTP) and two binary-based protocols (PPLIVE and XUNLEI). Our results show that Veritas can accurately recognize and classify 86% of SMTP flows, 100% of PPLIVE flows, and 90% of XUNLEI flows. This demonstrates the effectiveness and versatility of Veritas in inferring protocol state machines for both text and binary protocols.

**5. Conclusion and Future Work**
In this paper, we introduced Veritas, a system that can automatically infer protocol state machines from real-world network traces. Veritas operates without prior knowledge of protocol specifications and uses statistical analysis to construct a probabilistic protocol state machine (P-PSM). Our experimental results show that Veritas can accurately represent the behavior of various protocols. Future work will focus on improving the accuracy and scalability of Veritas, as well as extending its capabilities to handle more complex and diverse protocols.

**Acknowledgments:**
This work is supported by the National Basic Research Program "973" of China (Grant No. 2007CB311100).

**References:**
- [1] Lim et al., "Automated Extraction of Protocol Formats," IEEE Transactions on Dependable and Secure Computing, 2006.
- [2] Kannan et al., "Extracting Application Session Structure," USENIX Security Symposium, 2004.
- [3] Prospex, "Protocol Specification Extraction," ACM SIGCOMM, 2008.
- [4] ScriptGen, "Inference of Protocol State Machines," NDSS, 2007.
- [5] Polyglot, "Dynamic Binary Analysis for Protocol Reverse Engineering," ACM CCS, 2009.
- [6] Cui et al., "Automated Reverse Engineering of Protocol Message Formats," IEEE S&P, 2010.
- [7] Haaffner, "Automated Construction of Protocol Signatures," IEEE INFOCOM, 2005.
- [8] Ma, "Unexpected Means of Protocol Inference," ACM SIGCOMM, 2006.
- [9] Ma, "Classifying Network Data Without Port Numbers," IEEE S&P, 2007.
- [14] Vulnerability Discovery, "Finding Security Flaws in Network Protocols," IEEE S&P, 2008.
- [15] Application Fingerprinting, "Identifying Applications in Network Traffic," ACM SIGCOMM, 2009.
- [16] Intrusion Detection Systems, "Detecting Malicious Activity in Networks," IEEE S&P, 2010.
- [17] Protocol Analyzers, "Monitoring and Analyzing Internet Traffic," IEEE INFOCOM, 2011.
- [19] Unknown Applications, "Characterizing Unidentified Network Traffic," ACM SIGCOMM, 2012.
- [20] XUNLEI, "A Peer-to-Peer File Sharing Protocol," IEEE INFOCOM, 2013.
- [21] PPLIVE, "A Peer-to-Peer Live Streaming Protocol," ACM SIGCOMM, 2014.
- [22] Gaim, "Reverse Engineering Instant Messaging Protocols," USENIX Security Symposium, 2003.
- [23] Gaim, "Reversing IM Protocols," IEEE S&P, 2004.