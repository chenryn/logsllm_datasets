### Difficulty Adjustment and Mining Process

The pivot chain adheres to the same difficulty adjustment rule as Bitcoin, which has been proven practical through its widespread real-world deployment. Non-pivot chains use the same difficulty as the pivot chain, eliminating the need for additional bookkeeping.

### Transaction Confirmation with Prism

For transaction confirmation, we use Prism as a concrete example (note that there is no computational overhead in transaction confirmation for OHIE and FruitChains). Under static difficulty, Prism selects a leader for every level of the proposer tree. With M3, we partition the proposer tree into real-valued difficulty intervals such that no interval is partially occupied by any proposer block. We need to select a leader for each of these intervals (see Section 3.3).

To determine the overhead, we need to answer: how many more intervals are there compared to levels? We simulated the mining process of Prism with 1000 voter chains, an epoch length of Φ = 2016 blocks, and a target mining rate of f = 0.1 block per second. Our findings indicate that the number of intervals is only 0.12% more than the number of levels. This results in a confirmation overhead of 0.12%. This outcome is expected because only forks that occur at the beginning of an epoch will lead to extra intervals, and such forks are rare with Φ = 2016 and f = 0.1. Decreasing Φ may increase the overhead due to more epochs and a higher likelihood of forking at the beginning of an epoch. Table 2 illustrates the confirmation overhead for different values of Φ; even at Φ = 10, the overhead remains below 1%.

### Discussion

We presented a general methodology for converting any parallel chain protocol from fixed to variable difficulty settings. We also proved the safety, liveness, and performance of the proposed scheme using a novel proof method that analyzes the coupling between the pivot and non-pivot chains. Several open research directions include:

1. **Statistical Averaging**: In our design, we proposed using a single chain as a pivot chain to set the difficulty target for all blocks. However, if we can use information (e.g., inter-block arrival times) from all chains to determine the difficulty target, we can achieve better statistical averaging. This could lead to protocols that adapt to more aggressive mining power variations. Such a protocol would require careful design to handle strong coupling across all chains, as each chain needs to know the state of all other chains to check the correctness of the difficulty target. Forking in other chains could lead to complex interactions.
   
2. **Analyzing Ledger-Combiners**: We analyzed various protocols under the variable difficulty setting. One new protocol, called Ledger-combiners [10], uses parallel chains for robustly combining multiple ledgers and achieving low latency. Analyzing this protocol in the variable difficulty setting is an interesting direction for future work.

### Acknowledgements

This research is supported in part by a gift from IOHK Inc., an Army Research Office grant W911NF1810332, and by the National Science Foundation under grants CCF 17-05007 and CCF 19-00636.

### References

[1] Blockchain charts - total hash rate. https://www.blockchain.com/charts/hash-rate.
[2] Christian Badertscher, Peter Gaži, Aggelos Kiayias, Alexander Russell, and Vassilis Zikas. Ouroboros Genesis: Composable Proof-of-Stake Blockchains with Dynamic Availability. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security, pages 913–930, 2018.
[3] Vivek Bagaria, Sreeram Kannan, David Tse, Giulia Fanti, and Pramod Viswanath. Prism: Deconstructing the Blockchain to Approach Physical Limits. In Proceedings of the 2019 ACM SIGSAC Conference on Computer and Communications Security, pages 585–602, 2019.
[4] Lear Bahack. Theoretical Bitcoin Attacks with Less Than Half of the Computational Power (Draft). arXiv preprint arXiv:1312.7013, 2013.
[5] Joseph Bonneau, Andrew Miller, Jeremy Clark, Arvind Narayanan, Joshua A Kroll, and Edward W Felten. SoK: Research Perspectives and Challenges for Bitcoin and Cryptocurrencies. In 2015 IEEE Symposium on Security and Privacy, pages 104–121. IEEE, 2015.
[6] T-H. Hubert Chan, Naomi Ephraim, Antonio Marcedone, Andrew Morgan, Rafael Pass, and Elaine Shi. Blockchain with Varying Number of Players. Cryptology ePrint Archive, Report 2020/677, 2020. https://eprint.iacr.org/2020/677.
[7] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer, Ari Juels, Ahmed Kosba, Andrew Miller, Prateek Saxena, Elaine Shi, Emin Gün Sirer, et al. On Scaling Decentralized Blockchains. In International Conference on Financial Cryptography and Data Security, pages 106–125. Springer, 2016.
[8] Devdatt P Dubhashi and Alessandro Panconesi. Concentration of Measure for the Analysis of Randomized Algorithms. Cambridge University Press, 2009.
[9] Ittay Eyal, Adem Efe Gencer, Emin Gün Sirer, and Robbert Van Renesse. Bitcoin-NG: A Scalable Blockchain Protocol. In 13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16), pages 45–59, 2016.
[10] Matthias Fitzi, Peter Gaži, Aggelos Kiayias, and Alexander Russell. Ledger Combiners for Fast Settlement. In Theory of Cryptography Conference, pages 322–352. Springer, 2020.
[11] Juan Garay, Aggelos Kiayias, and Nikos Leonardos. The Bitcoin Backbone Protocol: Analysis and Applications. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 281–310. Springer, 2015.
[12] Juan Garay, Aggelos Kiayias, and Nikos Leonardos. The Bitcoin Backbone Protocol with Chains of Variable Difficulty. In Annual International Cryptology Conference, pages 291–323. Springer, 2017.
[13] Juan Garay, Aggelos Kiayias, and Nikos Leonardos. Full Analysis of Nakamoto Consensus in Bounded-Delay Networks. Cryptology ePrint Archive, Report 2020/277, 2020. https://eprint.iacr.org/2020/277.
[14] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich. Algorand: Scaling Byzantine Agreements for Cryptocurrencies. In Proceedings of the 26th Symposium on Operating Systems Principles, pages 51–68, 2017.
[15] Chenxing Li, Peilun Li, Dong Zhou, Wei Xu, Fan Long, and Andrew Yao. Scaling Nakamoto Consensus to Thousands of Transactions per Second. arXiv preprint arXiv:1805.03870, 2018.
[16] Songze Li and David Tse. Taiji: Longest Chain Availability with BFT Fast Confirmation. arXiv preprint arXiv:2011.11097, 2020.
[17] David Mazieres. The Stellar Consensus Protocol: A Federated Model for Internet-Level Consensus. Stellar Development Foundation, 2015.
[18] Satoshi Nakamoto. Bitcoin: A Peer-to-Peer Electronic Cash System. Technical Report, 2008.
[19] Kevin Alarcón Negy, Peter R Rizun, and Emin Gün Sirer. Selfish Mining Re-Examined. In International Conference on Financial Cryptography and Data Security, pages 61–78. Springer, 2020.
[20] Rafael Pass, Lior Seeman, and Abhi Shelat. Analysis of the Blockchain Protocol in Asynchronous Networks. In Annual International Conference on the Theory and Applications of Cryptographic Techniques, pages 643–673. Springer, 2017.
[21] Rafael Pass and Elaine Shi. Fruitchains: A Fair Blockchain. In Proceedings of the ACM Symposium on Principles of Distributed Computing, pages 315–324, 2017.
[22] Rafael Pass and Elaine Shi. Hybrid Consensus: Efficient Consensus in the Permissionless Model. In 31st International Symposium on Distributed Computing (DISC 2017). Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik, 2017.
[23] David Schwartz, Noah Youngs, Arthur Britto, et al. The Ripple Protocol Consensus Algorithm. Ripple Labs Inc White Paper, 2014.
[24] Yonatan Sompolinsky and Aviv Zohar. Secure High-Rate Transaction Processing in Bitcoin. In International Conference on Financial Cryptography and Data Security, pages 507–527. Springer, 2015.
[25] Xuechao Wang, Viswa Virinchi Muppirala, Lei Yang, Sreeram Kannan, and Pramod Viswanath. Securing Parallel-Chain Protocols under Variable Mining Power. arXiv preprint arXiv:2105.02927, 2021.
[26] Lei Yang, Vivek Bagaria, Gerui Wang, Mohammad Alizadeh, David Tse, Giulia Fanti, and Pramod Viswanath. Prism: Scaling Bitcoin by 10,000x. arXiv preprint arXiv:1909.11261, 2019.
[27] Haifeng Yu, Ivica Nikolić, Ruomu Hou, and Prateek Saxena. OHIE: Blockchain Scaling Made Simple. In 2020 IEEE Symposium on Security and Privacy (SP), pages 90–105. IEEE, 2020.

### Appendix

#### A. The Difficulty Raising Attack

Bitcoin sets its target recalculation using a "dampening filter"-like adjustment. This design is surprisingly foresighted. If we relax the adjustment mechanism by removing the dampening filter, it becomes vulnerable to a difficulty raising attack first discovered in [4]. At a high level, in this attack, the adversary mines private blocks with timestamps in rapid succession, inducing one block with arbitrarily high difficulty in the private chain. An anti-concentration argument shows that a sudden adversarial advance can break agreement among honest parties.

**A Simple Attack**

As a preliminary, consider a simple attack where the protocol allows miners to choose their own difficulty and use the heaviest chain rule. While this rule appears fair, the variance created by extremely difficult adversarial blocks can thwart a confirmation rule that confirms deeply-embedded blocks, no matter how deep, with non-negligible probability. For simplicity, we use the difficulty defined in the genesis block as the difficulty unit and the expected inter-block time (10 minutes in Bitcoin) as the time unit. Let \( n \) be the number of honest queries to the hash function per unit time and \( t \) be the number of adversarial queries per unit time. To mine a block with unit difficulty, each query solves the PoW puzzle with probability \( \frac{1}{n} \). We assume \( n \) and \( t \) do not change over time and the network delay among honest nodes is zero.

The goal of the adversary is to double-spend a coin by mining a heavier chain than the public honest chain from the genesis. Suppose honest miners adopt the initial mining difficulty as defined in the genesis block, so it takes \( k \) units of time to mine a chain with \( k \) blocks. To mine a heavier chain, the adversary only needs to mine one block with difficulty \( k \) within \( k \) units of time. The success probability of this attack is:

\[ P(\text{attack succeeds}) = 1 - \left(1 - \frac{1}{n^k}\right)^{tk} \approx 1 - e^{-\frac{t}{n}} \]

Since \( n \) and \( t \) are large in PoW mining, the success probability is a constant independent of \( k \), making any \( k \)-deep confirmation rule fail.

**Difficulty Raising Attack**

Even with an epoch-based difficulty adjustment rule (without the "dampening filter"), the difficulty raising attack persists. We use the difficulty of the first epoch (defined in the genesis block) as the difficulty unit and the expected inter-block time (10 minutes in Bitcoin) as the time unit. Let \( \Phi \) be the length of an epoch in number of blocks (2016 in Bitcoin). The adversary can put any timestamp in its private blocks, so the difficulty of the second epoch in its private chain can be any value as long as the adversary completes the first epoch. Let \( B \) with difficulty \( X \) be the first block of the second epoch in the private chain. Then \( B \) has chain difficulty \( \Phi + X \).

To mine an honest chain with chain difficulty \( \Phi + X \), it takes on average \( \Phi + X \) time. On the other hand, it takes on average \( \frac{n\Phi}{t} \) time for the adversary to complete the first epoch in its private chain. Therefore, to succeed in this attack, the adversary needs to mine the block \( B \) within \( \Phi + X - \frac{n\Phi}{t} \) time, which happens with probability:

\[ P(\text{attack succeeds}) = 1 - \left(1 - \frac{1}{n^X}\right)^{t(\Phi + X - \frac{n\Phi}{t})} \approx 1 - e^{-\frac{t}{n}} \]

if \( X \gg \Phi \gg 1 \). The success probability is independent of the length of the public longest chain, making any \( k \)-deep confirmation rule fail.

However, Bitcoin's dampening filter in the target recalculation function mitigates this. As in Definition 6.7, the difficulty can be increased by a factor of at most \( \tau \) between two consecutive epochs (\( \tau = 4 \) in Bitcoin). Under the same assumptions, if the adversary always raises the difficulty by \( \tau \) in each epoch, it takes on average \( \sum_{i=0}^{\ell-1} \frac{n}{t} \tau^i \Phi \) time for the adversary to complete \( \ell \) epochs in its private chain, and the public honest chain will on average have difficulty \( \sum_{i=0}^{\ell-1} \frac{n}{t} \tau^i \Phi \) during this time. The gap in chain difficulties between the public honest chain and the private chain will be:

\[ \sum_{i=0}^{\ell-1} \frac{n}{t} \tau^i \Phi - \sum_{i=0}^{\ell-1} \frac{n}{t} \tau^i \Phi = \left(\frac{n}{t} - 1\right) \tau^{\ell-1} \frac{\Phi}{\tau - 1} \]

Each block of the \( (\ell + 1) \)-th epoch in the private chain will have difficulty \( \tau^\ell \), so the adversary still needs to mine approximately \( \frac{n-t}{t(\tau-1)} \Phi \) blocks to catch up with the honest chain. As \( \Phi \gg 1 \), the time for the adversary to catch up is still controlled by the concentration bound, and the success probability of this attack will be at most \( e^{-\Theta(\Phi)} \). By setting \( \Phi \) large enough, the difficulty raising attack can be ruled out.

While this specific attack can be thwarted, a full security guarantee requires considering all possible attacks in the presence of a full-blown adversary. A detailed analysis of Bitcoin's rules is provided in [13].

#### B. Bitcoin Backbone Properties Revisited

We briefly revisit the analysis in [13] because the pivot chain is identical to the Bitcoin chain. We additionally define a stale chain and accuracy related to timestamps of the blocks.

**Definition B.1 (from [13])**: A block created at round \( u \) is accurate if it has a timestamp \( v \) such that \( |u - v| \leq \ell + 2\Delta \). A chain is accurate if all its blocks are accurate. A chain is stale if for some \( u \geq \ell + 2\Delta \) it does not contain an honest block with timestamp \( v \geq u - \ell - 2\Delta \).

Recall that \( SP_r \) is the set of pivot chains that belong to or have the potential to be adopted by an honest party at round \( r \) in Section 6.3. We define a series of useful predicates with respect to \( SP_r \).

**Definition B.2 (from [13])**: For a round \( r \):

- **GoodRounds(r)**: All rounds \( u \leq r \) are good.
- **GoodChains(r)**: For all rounds \( u \leq r \), every chain in \( SP_u \) is good.
- **NoStaleChains(r)**: For all rounds \( u \leq r \), there is no stale chain in \( SP_u \).
- **Accurate(r)**: For all rounds \( u \leq r \), all chains in \( SP_u \) are accurate.
- **Duration(r)**: For all rounds \( u \leq r \) and duration \( \Lambda \) of an epoch of any chain in \( SP_u \), \( f \leq \Lambda \leq \frac{2(1+\delta)\gamma}{2(1+\delta)\gamma - 2m/f} \).

The following lemma provides a lower bound on the progress of the honest parties, which holds irrespective of any adversary.

**Lemma B.3 (Chain growth for pivot chain, from [13])**: Suppose that at round \( u \) of an execution \( E \), an honest party broadcasts a pivot chain of difficulty \( d \). Then, by round \( v \), every honest party receives a chain of difficulty at least \( d + QP(S) \), where \( S = \{r : u + \Delta \leq r \leq v - \Delta\} \).

To prove properties like common prefix and chain quality for the pivot chain, we need all rounds in a typical execution to be good.

**Lemma B.4 (All rounds in a typical execution are good, Theorem 2 from [13])**: Consider a typical execution in a \( (\gamma, 2\gamma) \)-respecting environment. If the protocol is initiated such that the first round is good, and all conditions 3, 4, and 5 are satisfied, then all rounds are good.