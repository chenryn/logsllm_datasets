### Methodology

Given that our JSON traffic is not specific to any particular application or platform, we do not employ program analysis as in previous approaches. Instead, we model the relationship between requests using a backoff n-gram model [12]. The n-gram model captures transition probabilities from a subsequence of previously requested objects to the next request in the client flow. Although the n-gram model does not directly show a dependency relationship between two objects like program analysis, it is a data-driven method to empirically demonstrate probable object requests. Additionally, this approach accounts for the popularity of highly requested items, unlike standard program analysis.

#### Evaluation

To evaluate this approach, we first split the JSON dataset by unique clients into a training and testing set. As a feature for the n-gram model, we use request URLs, where a previous URL transitions to the next URL. Since 84% of JSON requests are GET requests (see §4), they do not carry request bodies, and the URL is sufficient to fetch a response. However, request cookies are not considered due to privacy and client fingerprinting concerns. Requests are segmented into client request flows, and n-gram transitions are created from individual client requests. These transitions are then used to train the n-gram model.

We evaluate this method on two n-gram models: one with actual, unmodified URLs and another with clustered URLs, using clustering similar to URL argument clustering in [13]. Given that 84% of requests are GET requests, unmodified URLs can be used to request these objects directly. When URLs contain unique client information, such as client IDs or coordinates, clustered URLs can reveal general object dependencies for the application. The n-gram models are also tested on individual client request flows.

We examine the change in accuracy when predicting with larger N and K parameters. N denotes the amount of history used for prediction, where N = 1 uses only the most recent request (i.e., a history of 1). K selects the number of requests to predict in probability order.

Table 3 shows that predicting a larger set of requests (larger K) significantly improves accuracy even with only the immediate history of the previous request (N = 1). Using larger N values, such as N = 5, only marginally increases accuracy by up to 5%. Overall, using this model, we achieve about 70% prediction accuracy for actual URLs. This result indicates that request order is highly probabilistic and suggests that more robust machine learning systems may be able to better predict requests. For clustered URLs, we achieve 87% accuracy, showing that JSON requests exhibit general ordering patterns.

Overall, these results indicate that a JSON request prediction system can be used by CDNs to perform prefetching for cacheable requests. HTTP Server Push can also be used to preemptively send responses to the client, improving overall response time. Additionally, the general ordering patterns discovered can be used to inform current caching or load balancing systems and to perform anomaly detection (e.g., detecting when a highly unlikely object is requested). While our prediction analysis examines request access order, future work can also consider request interarrival time to better inform prediction systems.

### Related Works

#### Web Proxy Optimization

Given that the CDN can serve as an HTTP proxy, there is extensive literature on proxy optimizations for web content. Some works aim to discover network and computational bottlenecks caused by interdependencies in browsing workloads [20, 30]. Researchers have also explored split-browser architectures, where modified browsers and cloud proxies work together to selectively offload expensive parts of the web page load to the proxy [27, 31]. Other works improve webpage performance by rewriting pages for efficient execution [21]. Similarly, we explore dependency patterns in JSON traffic through the lens of traffic prediction. In the mobile web space, researchers have used program analysis and configuration to propose local and remote prefetching proxies that enhance mobile application quality of experience [14, 17, 35]. In contrast, we propose data-driven CDN prefetching to improve JSON traffic delivery performance.

#### Network Traffic Characterization

One line of research focuses on characterizing Internet trends using network data logs. Researchers have explored extracting client information from user-agent strings to characterize network traffic [18, 33]. Another area of work looks at Mobile Application Identification, mapping network traffic to the applications that generated it [19, 32–34]. We also break down JSON traffic by device and application types using user-agent. In [26], researchers use CDN baseline activity for blocks of IP addresses to identify activity anomalies and determine if there is an internet outage for these IPs. Pujol et al. [24] identify machine-to-machine traffic by checking for valid TCP or HTTP responses from standard web ports. Instead, we find periodicity patterns that identify machine-to-machine JSON traffic.

### Implications & Limitations

In this section, we outline the implications and limitations of this study. First, since the number of JSON requests has been growing while the size of JSON objects has decreased, networking systems should account for these changes when serving this type of content and provisioning new infrastructure. Second, §5 explains two patterns present in JSON traffic: periodicity and request ordering. We suggest that these patterns can be exploited by network operators to implement management policies for periodic traffic and to build prediction-based systems to improve network performance. While we suggest deprioritizing periodic traffic, network operators should evaluate the effects of deprioritization on user QoE. Lastly, this study examines two large-scale datasets collected from Akamai’s network: a five-minute dataset over Akamai’s entire network and a day-long dataset covering one geographic region. Future studies can analyze longer datasets covering more regions to explore geographic and temporal differences in JSON traffic patterns. Although this study presents initial implications, further analysis of the traffic shift to JSON is needed for more comprehensive insights.

### Conclusion

In this work, we explore the prominence of JSON traffic on a large CDN. We first examine content types on the CDN and find that JSON content is more frequently requested than HTML and that there is a growth trend for JSON traffic. Next, we create a taxonomy of JSON traffic and analyze HTTP request logs from CDN edge servers to further explore the types of clients using JSON content, the types of requests and responses seen on the CDN, and how we can use JSON patterns to optimize JSON traffic. We find that the majority of JSON traffic is non-standardized and requested by mobile and embedded devices. More than half of all JSON traffic is not cacheable, especially for specific industries. At least 6.3% of JSON traffic is machine-to-machine, and CDN operators can deprioritize this traffic as it is not human-triggered. Finally, we explore the prediction of JSON content and note that since 87% of content can be predicted, prefetching is a viable optimization for JSON traffic.

### References

[1] ECMAScript 5.1 Language Specification. https://www.ecma-international.org/ecma-262/5.1/#sec-15.12.2.
[2] Edge Device Characteristics - Akamai. https://learn.akamai.com/en-us/webhelp/ion/oca/GUID-8DC8807F-B65E-40EC-BB14-896C9F12026E.html.
[3] Facts & Figures - Akamai. https://www.akamai.com/us/en/about/facts-figures.jsp.
[4] ION Web Performance Optimization - Akamai. https://www.akamai.com/us/en/products/performance/web-performance-optimization.jsp.
[5] The JSON Data Interchange Syntax. http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf.
[6] Kona Site Defender - Akamai. https://www.akamai.com/us/en/products/security/kona-site-defender.jsp.
[7] Media Types - IANA. https://www.iana.org/assignments/media-types/media-types.xhtml.
[8] MIME Types - MDN. https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types.
[9] Progressive Web Apps - The App Shell Model. https://developers.google.com/web/fundamentals/architecture/app-shell.
[10] Symantec SiteReview. https://sitereview.bluecoat.com.
[11] User Agent String Database. http://www.useragentstring.com/.
[12] Lecture on N-grams and Backoff Models, 2009. http://l2r.cs.uiuc.edu/~danr/Teaching/CS546-09/Lectures/Lec5-Stat-09-ext.pdf.
[13] Butkiewicz, M., Wang, D., Wu, Z., Madhyastha, H. V., and Sekar, V. Klotski: Reprioritizing web content to improve user experience on mobile devices. In 12th USENIX Symposium on Networked Systems Design and Implementation (NSDI 15) (Oakland, CA, May 2015), USENIX Association, pp. 439–453.
[14] Choi, B., Kim, J., Cho, D., Kim, S., and Han, D. AppX: An automated app acceleration framework for low latency mobile apps. In Proceedings of the 14th International Conference on Emerging Networking Experiments and Technologies (2018), ACM, pp. 27–40.
[15] Fielding, R., and Reschke, J. RFC 7231 - Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. Internet Engineering Task Force (IETF) (2014). https://tools.ietf.org/html/rfc7231.
[16] Gerber, A., and Doverspike, R. Traffic types and growth in backbone networks. In Optical Fiber Communication Conference/National Fiber Optic Engineers Conference 2011 (2011), Optical Society of America.
[17] Higgins, B. D., Flinn, J., Giuli, T. J., Noble, B., Peplin, C., and Watson, D. Informed mobile prefetching. In Proceedings of the 10th International Conference on Mobile Systems, Applications, and Services (2012), ACM, pp. 155–168.
[18] Kline, J., Barford, P., Cahn, A., and Sommers, J. On the structure and characteristics of user agent strings. In Proceedings of the 2017 Internet Measurement Conference (New York, NY, USA, 2017), IMC '17, ACM, pp. 184–190.
[19] Miskovic, S., Lee, G. M., Liao, Y., and Baldi, M. AppPrint: Automatic fingerprinting of mobile applications in network traffic. In International Conference on Passive and Active Network Measurement (2015), Springer, pp. 57–69.
[20] Nejati, J., and Balasubramanian, A. An in-depth study of mobile browser performance. In Proceedings of the 25th International Conference on World Wide Web (2016), International World Wide Web Conferences Steering Committee, pp. 1305–1315.
[21] Netravali, R., and Mickens, J. Prophecy: Accelerating mobile page loads using final-state write logs. In 15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 18) (Renton, WA, Apr. 2018), USENIX Association, pp. 249–266.
[22] Nygren, E., Sitaraman, R. K., and Sun, J. The Akamai network: A platform for high-performance internet applications. ACM SIGOPS Operating Systems Review 44, 3 (2010), 2–19.
[23] Poese, I., Frank, B., Smaragdakis, G., Uhlig, S., Feldmann, A., and Maggs, B. Enabling content-aware traffic engineering. ACM SIGCOMM Computer Communication Review 42, 5 (2012), 21–28.
[24] Pujol, E., Richter, P., Chandrasekaran, B., Smaragdakis, G., Feldmann, A., Maggs, B. M., and Ng, K.-C. Back-office web traffic on the internet. In Proceedings of the 2014 Conference on Internet Measurement Conference (2014), ACM, pp. 257–270.
[25] Richter, P., Padmanabhan, R., Spring, N., Berger, A., and Clark, D. Advancing the Art of Internet Edge Outage Detection. In Proceedings of ACM IMC 2018 (Boston, MA, November 2018).
[26] Richter, P., Padmanabhan, R., Spring, N., Berger, A., and Clark, D. Advancing the art of internet edge outage detection. In Proceedings of the Internet Measurement Conference 2018 (2018), ACM, pp. 350–363.
[27] Sivakumar, A., Puzhavakath Narayanan, S., Gopalakrishnan, V., Lee, S., Rao, S., and Sen, S. Parcel: Proxy assisted browsing in cellular networks for energy and latency reduction. In Proceedings of the 10th ACM International on Conference on Emerging Networking Experiments and Technologies (New York, NY, USA, 2014), CoNEXT '14, ACM, pp. 325–336.
[28] Trevisan, M., Giordano, D., Drago, I., Mellia, M., and Munafo, M. Five years at the edge: watching internet from the ISP network. In Proceedings of the 14th International Conference on Emerging Networking Experiments and Technologies (2018), ACM, pp. 1–12.
[29] Vlachos, M., Yu, P., and Castelli, V. On periodicity detection and structural periodic similarity. In Proceedings of the 2005 SIAM International Conference on Data Mining (2005), SIAM, pp. 449–460.
[30] Wang, X. S., Balasubramanian, A., Krishnamurthy, A., and Wetherall, D. Demystifying page load performance with WProf. In Presented as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI 13) (Lombard, IL, 2013), USENIX, pp. 473–485.
[31] Wang, X. S., Krishnamurthy, A., and Wetherall, D. Speeding up web page loads with Shandian. In 13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16) (Santa Clara, CA, 2016), USENIX Association, pp. 109–122.
[32] Xu, Q., Andrews, T., Liao, Y., Miskovic, S., Mao, Z. M., Baldi, M., and Nucci, A. FlowR: A self-learning system for classifying mobile application traffic. ACM SIGMETRICS Performance Evaluation Review 42, 1 (2014), 569–570.
[33] Xu, Q., Erman, J., Gerber, A., Mao, Z., Pang, J., and Venkataraman, S. Identifying diverse usage behaviors of smartphone apps. In Proceedings of the 2011 ACM SIGCOMM Conference on Internet Measurement Conference (2011), ACM, pp. 329–344.
[34] Yao, H., Ranjan, G., Tongaonkar, A., Liao, Y., and Mao, Z. M. Samples: Self-adaptive mining of persistent lexical snippets for classifying mobile application traffic. In Proceedings of the 21st Annual International Conference on Mobile Computing and Networking (2015), ACM, pp. 439–451.
[35] Zhao, Y., Laser, M. S., Lyu, Y., and Medvidovic, N. Leveraging program analysis to reduce user-perceived latency in mobile applications. In Proceedings of the 40th International Conference on Software Engineering (2018), ACM, pp. 176–186.