### 8. CONCLUSION

We introduce Bunkerbuster, an automated, data-driven system for identifying memory corruption vulnerabilities using symbolic root cause analysis. Our design leverages Process Tracing (PT) and sparse memory snapshots to symbolically reconstruct execution traces and explore nearby paths, thereby uncovering various types of vulnerabilities, including buffer overflows, Use-After-Free (UAF), Double Free (DF), and Format String (FS) vulnerabilities. We implemented a prototype of Bunkerbuster and evaluated it on 15 real-world Linux programs, where it successfully identified 39 bugs, 8 of which were previously unreported. Three of these bugs have been independently verified by MITRE, assigned Common Vulnerabilities and Exposures (CVE) IDs, and patched by developers based on Bunkerbuster’s reports, validating the practical utility of our prototype. Bunkerbuster also detected 8 bugs that were missed by AFL and QSYM in our target programs and correctly classified 4 more bugs that AS mislabeled. Bunkerbuster achieves this with a performance overhead of just 7.21% and reasonable storage requirements.

### Automatic Harness Generation

In recent years, researchers have recognized the limitations of fuzzers in handling large, complex programs that are slow to initialize or require graphical user interface (GUI) interactions. Several proposals have emerged to automatically generate fuzzer harnesses using source code [12, 55]. However, these solutions do not address commercial off-the-shelf (COTS) and legacy binaries. To address this gap, Winnie [60] was proposed, which uses execution traces (rather than source code) to automatically generate harnesses for Windows binaries. At first glance, Winnie's approach appears similar to how Bunkerbuster selectively symbolizes snapshots. However, only 5% of Winnie’s generated harnesses were effective, highlighting the need for more robust solutions.

### ACKNOWLEDGMENTS

We thank the anonymous reviewers for their valuable and informative feedback. This research was supported in part by the Office of Naval Research (ONR) under grants N00014-19-1-2179, N00014-17-1-2895, N00014-15-1-2162, and N00014-18-1-2662, and by the Defense Advanced Research Projects Agency (DARPA) under contract HR00112090031. The opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of ONR or DARPA.

### Session 2A: Fuzzing and Bug Finding
CCS '21, November 15–19, 2021, Virtual Event, Republic of Korea

### REFERENCES

[1] [n.d.]. Commit 074f7a8cd19b7661a59047e9257691df5470551c. https://github.com/mz-automation/libiec61850/commit/074f7a8cd19b7661a59047e9257691df5470551c. [Online; accessed 09-April-2020].

[2] [n.d.]. Commit 9fdcc15962f9ff4baebe6fdd947816f43f730d50. https://github.com/antirez/redis/commit/9fdcc15962f9ff4baebe6fdd947816f43f730d50. [Online; accessed 16-January-2020].

[3] [n.d.]. CVE-2004-0597 Patch. https://github.com/mudongliang/LinuxFlaw/tree/master/CVE-2004-0597#patch. [Online; accessed 25-October-2019].

[4] [n.d.]. CVE-2004-1288 Patch. https://pastebin.com/raw/fsFkspFF. [Online; accessed 25-October-2019].

[5] [n.d.]. CVE-2005-0105 Patch. https://pastebin.com/raw/GHm1k1Rk. [Online; accessed 25-October-2019].

[6] [n.d.]. Debian Bug report logs - #552035. https://bugs.debian.org/cgi-bin/bugreport.cgi?att=1;bug=552035;filename=diff;msg=16. [Online; accessed 10-January-2020].

[7] [n.d.]. Red Hat Bugzilla – Attachment 360889 Details for Bug 523105. https://bugzilla.redhat.com/attachment.cgi?id=360889&action=diff. [Online; accessed 07-January-2020].

[8] Abeer Alhuzali, Birhanu Eshete, Rigel Gjomemo, and VN Venkatakrishnan. 2016. Chainsaw: Chained automated workflow-based exploit generation. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 641–652.

[9] Jeff Arnold, Tim Abbott, Waseem Daher, Gregory Price, Nelson Elhage, Geoffrey Thomas, and Anders Kaseorg. 2009. Security impact ratings considered harmful. arXiv preprint arXiv:0904.4058 (2009).

[10] Vaggelis Atlidakis, Patrice Godefroid, and Marina Polishchuk. 2019. RESTler: Stateful REST API Fuzzing. In 2019 IEEE/ACM 41st International Conference on Software Engineering (ICSE). IEEE, 748–758.

[11] Thanassis Avgerinos, Sang Kil Cha, Brent Lim Tze Hao, and David Brumley. 2018. Automatic Exploit Generation. Carnegie Mellon University.

[12] Domagoj Babić, Stefan Bucur, Yaohui Chen, Franjo Ivančić, Tim King, Markus Kusano, Caroline Lemieux, László Szekeres, and Wei Wang. 2019. Fudge: Fuzz Driver Generation at Scale. In 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering. 975–985.

[13] Sebastian Banescu, Christian Collberg, Vijay Ganesh, Zack Newsham, and Alexander Pretschner. 2016. Code obfuscation against symbolic execution attacks. In Proceedings of the 32nd Annual Conference on Computer Security Applications. 189–200.

[14] Mihir Bellare and Bennet Yee. 1997. Forward integrity for secure audit logs. Technical Report. Computer Science and Engineering Department, University of California at San Diego.

[15] Koustubha Bhat, Erik Van Der Kouwe, Herbert Bos, and Cristiano Giuffrida. 2019. ProbeGuard: Mitigating Probing Attacks Through Reactive Program Transformations. In Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems. 545–558.

[16] Tim Blazytko, Moritz Schlögel, Cornelius Aschermann, Ali Abbasi, Joel Frank, Simon Wörner, and Thorsten Holz. 2020. AURORA: Statistical Crash Analysis for Automated Root Cause Explanation. In 29th USENIX Security Symposium. 235–252.

[17] Konstantin Böttinger and Claudia Eckert. 2016. Deepfuzz: Triggering vulnerabilities deeply hidden in binaries. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 25–34.

[18] Robert S Boyer, Bernard Elspas, and Karl N Levitt. 1975. SELECT—a formal system for testing and debugging programs by symbolic execution. ACM SigPlan Notices 10, 6 (1975), 234–245.

[19] Robert Brotzman, Shen Liu, Danfeng Zhang, Gang Tan, and Mahmut Kandemir. 2019. CaSym: Cache aware symbolic execution for side channel detection and mitigation. In CaSym: Cache Aware Symbolic Execution for Side Channel Detection and Mitigation. IEEE.

[20] David Brumley, James Newsome, Dawn Song, Hao Wang, and Somesh Jha. 2006. Towards automatic generation of vulnerability-based signatures. In 2006 IEEE Symposium on Security and Privacy (S&P’06). IEEE.

[21] Frank Capobianco, Rahul George, Kaiming Huang, Trent Jaeger, Srikanth Krishnamurthy, Zhiyun Qian, Mathias Payer, and Paul Yu. 2019. Employing Attack Graphs for Intrusion Detection. In New Security Paradigms Workshop (NSPW’19).

[22] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. 2012. Unleashing Mayhem on Binary Code. In Proceedings of the 33rd Symposium on Security and Privacy (Oakland). San Francisco, CA.

[23] Sang Kil Cha, Maverick Woo, and David Brumley. 2015. Program-adaptive mutational fuzzing. In 2015 IEEE Symposium on Security and Privacy. IEEE, 725–741.

[24] Sze Yiu Chau, Omar Chowdhury, Endadul Hoque, Huangyi Ge, Aniket Kate, Cristina Nita-Rotaru, and Ninghui Li. 2017. Symcerts: Practical symbolic execution for exposing noncompliance in X.509 certificate validation implementations. In 2017 IEEE Symposium on Security and Privacy (SP). IEEE, 503–520.

[25] Sze Yiu Chau, Moosa Yahyazadeh, Omar Chowdhury, Aniket Kate, and Ninghui Li. 2019. Analyzing Semantic Correctness with Symbolic Execution: A Case Study on PKCS#1 v1.5 Signature Verification. In NDSS.

[26] Xi Chen, Asia Slowinska, and Herbert Bos. 2013. Who allocated my memory? Detecting custom memory allocators in C binaries. In 2013 20th Working Conference on Reverse Engineering (WCRE). IEEE, 22–31.

[27] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong Zhou, Yulong Zhang, Long Lu, et al. 2019. SAVIOR: Towards Bug-Driven Hybrid Testing. arXiv preprint arXiv:1906.07327 (2019).

[28] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A platform for in-vivo multi-path analysis of software systems. ACM SIGPLAN Notices 46, 3 (2011), 265–278.

[29] Lori A. Clarke. 1976. A system to generate test data and symbolically execute programs. IEEE Transactions on software engineering 3 (1976), 215–222.

[30] Manuel Costa, Jon Crowcroft, Miguel Castro, Antony Rowstron, Lidong Zhou, Lintao Zhang, and Paul Barham. 2005. Vigilante: End-to-end containment of internet worms. In Proceedings of the twentieth ACM symposium on Operating systems principles. 133–147.

[31] Weidong Cui, Xinyang Ge, Baris Kasikci, Ben Niu, Upamanyu Sharma, Ruoyu Wang, and Insu Yun. 2018. REPT: Reverse Debugging of Failures in Deployed Software. In Proceedings of the 13th USENIX Symposium on Operating Systems Design and Implementation (OSDI). Carlsbad, CA.

[32] Weidong Cui, Marcus Peinado, Sang Kil Cha, Yanick Fratantonio, and Vasileios Kemerlis. 2016. Retracer: Triaging Crashes by Reverse Execution from Partial Memory Dumps. In Proceedings of the 38th International Conference on Software Engineering (ICSE). Austin, Texas.

[33] Jia Deng, Wei Dong, Richard Socher, Li-Jia Li, Kai Li, and Li Fei-Fei. 2009. ImageNet: A large-scale hierarchical image database. In 2009 IEEE conference on Computer Vision and Pattern Recognition (CVPR). IEEE, 248–255.

[34] Sushant Dinesh, Nathan Burow, Dongyan Xu, and Mathias Payer. 2020. Retrowrite: Statically instrumenting COTS binaries for fuzzing and sanitization. In 2020 IEEE Symposium on Security and Privacy (SP). IEEE, 1497–1511.

[35] Ren Ding, Hong Hu, Wen Xu, and Taesoo Kim. 2020. DESENSITIZATION: Privacy-Aware and Attack-Preserving Crash Report. In Network and Distributed Systems Security (NDSS) Symposium 2020.

[36] Fabien Duchene, Sanjay Rawat, Jean-Luc Richier, and Roland Groz. 2014. KameleonFuzz: Evolutionary fuzzing for black-box XSS detection. In Proceedings of the 4th ACM Conference on Data and Application Security and Privacy. 37–48.

[37] Andrea Fioraldi, Daniele Cono D’Elia, and Leonardo Querzoni. 2020. Fuzzing binaries for memory safety errors with QASan. In 2020 IEEE Secure Development (SecDev). IEEE, 23–30.

[38] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff. 1996. A sense of self for Unix processes. In Proceedings 1996 IEEE Symposium on Security and Privacy. 120–128. https://doi.org/10.1109/SECPRI.1996.502675

[39] Hugo Gascon, Christian Wressnegger, Fabian Yamaguchi, Daniel Arp, and Konrad Rieck. 2015. Pulsar: Stateful black-box fuzzing of proprietary network protocols. In International Conference on Security and Privacy in Communication Systems. Springer, 330–347.

[40] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. Griffin: Guarding Control Flows Using Intel Processor Trace. In Proceedings of the 22nd ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS). Xi’an, China.

[41] Xinyang Ge, Ben Niu, and Weidong Cui. 2020. Reverse Debugging of Kernel Failures in Deployed Systems. In USENIX Annual Technical Conference. 281–292.

[42] gif2png. 2009. Command Line Buffer Overflow. https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=550978#50. [Online; accessed 25-October-2019].

[43] Patrice Godefroid. 2007. Random Testing for Security: Blackbox vs. Whitebox Fuzzing. In Proceedings of the 2nd International Workshop on Random Testing. 1–1.

[44] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. 2008. Automated Whitebox Fuzz Testing. In NDSS, Vol. 8. Citeseer, 151–166.

[45] GraphicsMagick. 2017. Attempt to Fix Issue 440. http://hg.code.sf.net/p/graphicsmagick/code/rev/98721124e51f. [Online; accessed 25-October-2019].

[46] Philip J Guo and Dawson R Engler. 2009. Linux Kernel Developer Responses to Static Analysis Bug Reports. In USENIX Annual Technical Conference. 285–292.

[47] David Habusha. [n.d.]. Vulnerability Prioritization Tops Security Pros’ Challenges. https://tinyurl.com/y6os685b. [Online; accessed 18-November-2020].

[48] Istvan Haller, Asia Slowinska, Matthias Neugschwandtner, and Herbert Bos. 2013. Dowsing for Overflows: A Guided Fuzzer to Find Buffer Boundary Violations. In Proceedings of the 22nd USENIX Security Symposium. 49–64.

[49] Xueyan Han, Thomas Pasqueir, Adam Bates, James Mickens, and Margo Seltzer. 2020. Unicorn: Runtime Provenance-Based Detector for Advanced Persistent Threats. In 27th ISOC Network and Distributed System Security Symposium (NDSS’20).

[50] Wajih Ul Hassan, Shengjian Guo, Ding Li, Zhengzhang Chen, Kangkook Jee, Zhichun Li, and Adam Bates. 2019. NoDoze: Combatting Threat Alert Fatigue with Automated Provenance Triage. In 26th ISOC Network and Distributed System Security Symposium (NDSS’19).

[51] Kihong Heo, Woosuk Lee, Pardis Pashakhanloo, and Mayur Naik. 2018. Effective program debloating via reinforcement learning. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 380–394.

[52] Renáta Hodován and Ákos Kiss. 2016. Fuzzing JavaScript engine APIs. In International Conference on Integrated Formal Methods. Springer, 425–438.

[53] Jason E. Holt. 2006. Logcrypt: Forward Security and Public Verification for Secure Audit Logs. In Proceedings of the Australasian Information Security Workshop (AISW-NetSec).

[54] Hong Hu, Chenxiong Qian, Carter Yagemann, Simon Pak Ho Chung, William Harris, Taesoo Kim, and Wenke Lee. 2018. Enforcing Unique Code Target Property for Control-Flow Integrity. In Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS). Toronto, ON, Canada.

[55] Kyriakos Ispoglou, Daniel Austin, Vishwath Mohan, and Mathias Payer. 2020. Fuzzgen: Automatic Fuzzer Generation. In 29th USENIX Security Symposium. 2271–2287.

[56] Joonun Jang and Huy Kang Kim. 2019. FuzzBuilder: Automated building grey-box fuzzing environment for C/C++ library. In Proceedings of the 35th Annual Computer Security Applications Conference. 627–637.

[57] Yang Ji, Sangho Lee, Evan Downing, Weiren Wang, Mattia Fazzini, Taesoo Kim, Alessandro Orso, and Wenke Lee. 2017. Rain: Refinable Attack Investigation with On-Demand Inter-Process Information Flow Tracking. In Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS). Dallas, TX.

[58] Xiangkun Jia, Chao Zhang, Purui Su, Yi Yang, Huafeng Huang, and Dengguo Feng. 2017. Towards Efficient Heap Overflow Discovery. In 26th USENIX Security Symposium. 989–1006.

[59] Xiangkun Jia, Chao Zhang, Purui Su, Yi Yang, Huafeng Huang, and Dengguo Feng. 2017. Towards Efficient Heap Overflow Discovery. In 26th USENIX Security Symposium. 989–1006.

[60] Jinho Jung, Stephen Tong, Hong Hu, Jungwon Lim, Yonghwi Jin, and Taesoo Kim. 2021. WINNIE: Fuzzing Windows Applications with Harness Synthesis and Fast Cloning. In Network and Distributed System Security Symposium.

[61] Min Gyung Kang, Stephen McCamant, Pongsin Poosankam, and Dawn Song. 2011. DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation. In NDSS.

[62] Baris Kasikci, Weidong Cui, Xinyang Ge, and Ben Niu. 2017. Lazy diagnosis of in-production concurrency bugs. In Proceedings of the 26th Symposium on Operating Systems Principles. ACM, 582–598.

[63] Baris Kasikci, Benjamin Schubert, Cristiano Pereira, Gilles Pokam, and George Candea. 2015. Failure Sketching: A Technique for Automated Root Cause Diagnosis of In-Production Failures. In Proceedings of the 25th ACM Symposium on Operating Systems Principles (SOSP). Monterey, CA.

[64] James C King. 1976. Symbolic execution and program testing. Commun. ACM 2017, 4 (2017), 18–20.

[71] Di Ma and Gene Tsudik. 2009. A new approach to secure logging. ACM Transactions on Storage (TOS) 5, 1 (2009).

[72] Lorenzo Martignoni, Stephen McCamant, Pongsin Poosankam, Dawn Song, and Petros Maniatis. 2012. Path-exploration lifting: Hi-fi tests for lo-fi emulators. In ACM SIGARCH Computer Architecture News, Vol. 40. ACM, 337–348.

[73] S. Momeni Milajerdi, R. Gjomemo, B. Eshete, R. Sekar, and V. Venkatakrishnan. 2019. HOLMES: Real-Time APT Detection through Correlation of Suspicious Information Flows. In 2019 IEEE Symposium on Security and Privacy. IEEE Computer Society, Los Alamitos, CA, USA.

[74] David A Molnar and David Wagner. 2007. Catchconv: Symbolic execution and run-time type inference for integer conversion errors. UC Berkeley EECS (2007).

[75] James Newsome, David Brumley, Jason Franklin, and Dawn Song. 2006. Replayer: Automatic protocol replay by binary analysis. In Proceedings of the 13th ACM 19, 7 (1976), 385–394.

[65] Samuel T King, Zhuoqing Morley Mao, Dominic G Lucchetti, and Peter M Chen. 2005. Enriching Intrusion Alerts Through Multi-Host Causality. In Proceedings of the 12th ISOC Network and Distributed System Security Symposium (NDSS’05).

[66] Hyungjoon Koo, Seyedhamed Ghavamnia, and Michalis Polychronakis. 2019. Configuration-driven software debloating. In Proceedings of the 12th European Workshop on Systems Security. 1–6.

[67] Yonghwi Kwon, Brendan Saltaformaggio, I Luk Kim, Kyu Hyung Lee, Xiangyu Zhang, and Dongyan Xu. 2017. A2C: Self Destructing Exploit Executions via Input Perturbation. In Network and Distributed Systems Security (NDSS) Symposium 2017.

[68] Juanru Li, Zhiqiang Lin, Juan Caballero, Yuanyuan Zhang, and Dawu Gu. 2018. K-Hunt: Pinpointing insecure cryptographic keys from execution traces. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. ACM, 412–425.

[69] libzip. 2017. Fix double free. https://github.com/nih-at/libzip/commit/2217022b7d1142738656d891e00b3d2d9179b796. [Online; accessed 25-October-2019].

[70] Philip Low. 2017. Insuring against cyber-attacks. Computer Fraud & Security conference on Computer and communications security. ACM, 311–321.

[76] James Newsome, David Brumley, Dawn Song, Jad Chamcham, and Xeno Kovah. 2006. Vulnerability-Specific Execution Filtering for Exploit Prevention on Commodity Software. In NDSS.

[77] Anh Nguyen-Tuong, David Melski, Jack W Davidson, Michele Co, William Hawkins, Jason D Hiser, Derek Morris, Ducson Nguyen, and Eric Rizzi. 2018. Xandra: An Autonomous Cyber Battle System for the Cyber Grand Challenge. IEEE Security & Privacy 16, 2 (2018), 42–51.

[78] ntp. 2018. Stack-based buffer overflow in ntpq and ntpdc allows denial of service or code execution. https://bugzilla.redhat.com/show_bug.cgi?id=1593580. [Online; accessed 25-October-2019].

[79] Riccardo Paccagnella, Kevin Liao, Dave (Jing) Tian, and Adam Bates. 2020. Logging to the Danger Zone: Race Condition Attacks and Defenses on System Audit Frameworks. In Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security (CCS’20).

[80] pdfresurrect. 2019. Prevent a buffer overflow in possibly corrupt PDFs. https://github.com/enferex/pdfresurrect/commit/4ea7a6f4f51d0440da651d099247e2273f811dbc. [Online; accessed 25-October-2019].

[81] Van-Thuan Pham, Sakaar Khurana, Subhajit Roy, and Abhik Roychoudhury. 2017. Bucketing Failing Tests via Symbolic Analysis. In International Conference on Fundamental Approaches to Software Engineering. Springer, 43–59.

[82] Van-Thuan Pham, Wei Boon Ng, Konstantin Rubinov, and Abhik Roychoudhury. 2015. Hercules: Reproducing Crashes in Real-World Application Binaries. In 37th IEEE International Conference on Software Engineering, Vol. 1. IEEE, 891–901.

[83] Chenxiong Qian, Hong Hu, Mansour Alharthi, Pak Ho Chung, Taesoo Kim, and Wenke Lee. 2019. RAZOR: A Framework for Post-deployment Software Debloating. In 28th USENIX Security Symposium (USENIX Security 19). 1733–1750.

[84] Anh Quach, Aravind Prakash, and Lok Yan. 2018. Debloating software through piece-wise compilation and loading. In 27th USENIX Security Symposium (USENIX Security 18). 869–886.

[85] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. 2017. VUzzer: Application-aware Evolutionary Fuzzing. In NDSS, Vol. 17. 1–14.

[86] Alexandre Rebert, Sang Kil Cha, Thanassis Avgerinos, Jonathan Foote, David Warren, Gustavo Grieco, and David Brumley. 2014. Optimizing seed selection for fuzzing. In 23rd USENIX Security Symposium (USENIX Security 14). 861–875.

[87] Swarup Kumar Sahoo, John Criswell, Chase Geigle, and Vikram Adve. 2013. Using likely invariants for automated software fault localization. In ACM SIGARCH Computer Architecture News, Vol. 41. ACM, 139–152.

[88] Prateek Saxena, Pongsin Poosankam, Stephen McCamant, and Dawn Song. 2009. Loop-extended symbolic execution on binary programs. In Proceedings of the eighteenth international symposium on Software testing and analysis. ACM, 225–236.

[89] Bruce Schneier and John Kelsey. 1998. Cryptographic Support for Secure Logs on Untrusted Machines. In Proceedings of the USENIX Security Symposium