### Monitoring and Availability of the Set

The set will be subject to monitoring or may become unavailable due to failure or attack. As previously noted, entry guard nodes may be preferred or strictly required. As a refinement, there may be a successively preferred set of entry guards. There could be a single layer of entry guard nodes, i.e., nodes chosen to be immediately adjacent to the Hidden Service (HS), or they may be layered, with some guard nodes designated for the first hop, others for the second, and possibly further. Finally, these nodes may be selected randomly or based on trust or performance. Each of these choices is orthogonal, leading to systems with different properties. For brevity, we will limit our discussion to some of the more salient combinations.

### Choosing Entry Guard Nodes

Selecting a small, permanent, and strictly required set of entry guard nodes could lead to a higher percentage of service failures, either by accident or by design (assuming a very powerful adversary capable of DoS attacks on all entry guard nodes). If a permanent set is merely a preference, then a DoS attack on all entry guard nodes could revert to our previous attacks if the guard nodes are kept down long enough. This assumes that the entry guards can be identified by the attacker. In our experiments, we targeted a hidden server that had chosen three entry guard nodes.

### Experiment: Attacking Entry Guard Nodes

Using three permanent, preferred entry guards, we found that these nodes represented all identified connections through Alice’s node, as shown in Table 2. This unexpected result was caused by an implementation feature in Tor: we were never Node 3, only Node 2 (Node 1 being the entry guard). Identifying the entry guard nodes through our attacks never took more than a few hours.

### Backup Guard Nodes

Suppose there is a short list of preferred entry guard nodes (e.g., three nodes) and a longer list of backup guard nodes (e.g., nine) to be used if the preferred nodes are not available. If the adversary can keep, say, four nodes offline at a time, it can force the HS to use other nodes in the Node 1 position from the longer list. However, this will only cause the HS to rotate to three new nodes from the longer list as primary guards. Alice can cause circuit rotation but only through a still relatively small set of entry guard nodes, and this requires sustained attacking. We can make it more difficult for Alice to find the entry guard nodes via our attacks.

### Layering Guard Nodes

Consider a scenario where the HS has a set of three entry guard nodes from which to choose Node 1, and for each of these, a set of three guard nodes from which to choose Node 2, as illustrated in Figure 6. Alice can only successfully find the HS if she owns one of these three layer 1 entry guard nodes. If she does not, she must own one of the three layer 2 guard nodes associated with a layer 1 node to identify and attack it.

Layering guard nodes would require substantial changes to the Tor code, though they are likely straightforward. We have not yet conducted experiments on layering or backup guard node configurations. However, a version of backup guard nodes has recently been implemented in Tor in response to our results. By default, each client running the latest Tor code chooses three nodes as initial preferred entry guards. When the available entry guard set shrinks below two nodes, two more nodes are added to the set. The software keeps track of when a node enters the set and prefers to choose entry nodes for circuits that were in the set sooner. Nodes are only deleted from the set when they have been unreachable for an extended period (currently one month).

### Non-Random Choice of Entry Guard Node Sets

To avoid circuit rotation simply from failed entry guard nodes, it might seem best to choose nodes with the best uptime and bandwidth. However, this is subject to abuse, as adversaries may run highly reliable, high-performing nodes to increase their chances of being chosen as entry guard nodes. This is especially problematic in the current Tor directory statistics, where nodes report their own performance. One possible solution is to order node performance and reliability but then choose from a large enough set in this order that the adversary is unlikely to substantially alter the chances of being chosen as an entry guard node. Dingledine and Syverson described this strategy to form a reliable anonymous communication network of mix cascades [14].

Another possibility is to choose entry guard nodes based on trust in the node administrator. It is difficult to attach probabilities to Alice’s being trusted by the Hidden Service administrator, or perhaps more likely, to compromise a node run by someone trusted by the Hidden Service administrator. A greater concern is that common properties of the administrators of chosen entry guard nodes (e.g., they are all family relatives) may lead an adversary to hypothesize who is running the HS, which may then lead to unrelated attacks. The layering approach described above may prove useful. If the layer 1 nodes are personally trusted, and the layer 2 nodes are chosen randomly, it becomes more difficult for an adversary to discover the set of entry guard nodes and thus to correlate external properties.

### Conclusion

Our results show that Tor’s location-hidden servers were not truly hidden prior to the recent introduction of guard nodes as countermeasures to our attacks. Using our attacks, an attacker needed only one compromised node in the network to identify the "Hidden Server."

We demonstrated that an attack with one compromised node in the anonymity network takes only minutes if the service is located at a client, or a couple of hours when located on a server node. Using two nodes in the network, it only takes minutes to find the Hidden Server regardless of its location.

We also argued that neither dummy traffic nor extending the path length from the Hidden Server to the Rendezvous Point will protect against all of our attacks. However, requiring hidden services to always use entry guard nodes, which are currently available as a general option in the Tor code, greatly reduces the probability of successful attacks against a hidden service.

Using random entry guard nodes may still leave the Hidden Server vulnerable to our attacks if the attacker is powerful enough to completely deny service to a small set of nodes or to compromise them by physical or other means. However, using backup guard nodes and/or layering guard nodes will significantly slow down even such an attacker.

Using random selection of backup and layering entry guard nodes will be an improvement, but as in all Tor circuits, someone connecting through random nodes will always be compromised if an attacker owns just two nodes [25]. Combining backup and layering techniques with non-random selection, e.g., based on some kind of trust or experience with the nodes, may slow the attack even more or prevent it entirely.

We have demonstrated attacks that surprisingly require just one or two hostile nodes. Future work will investigate what is possible by an adversary that controls several nodes, or even, e.g., two percent of the network. We will also test implemented countermeasures for vulnerabilities using the described attack scenarios, as well as new ones. Additionally, we will investigate improved performance by shrinking the path length between the Client and the Hidden Server. We speculate that it may be possible to do so with adequate security when using our suggested countermeasures, and possibly others. We will also turn our attack on its head: testing to locate a client by having an attractive hidden service.

### Acknowledgements

Thanks to Tor developers Roger Dingledine and Nick Mathewson for discussions on the functionality of Tor. Thanks to the reviewers for their constructive comments on how to improve and emphasize the important points of the paper. This work was supported by ONR.

### References

[References remain the same as provided]

---

This revised text aims to be more coherent, clear, and professional, while maintaining the technical depth and accuracy of the original content.