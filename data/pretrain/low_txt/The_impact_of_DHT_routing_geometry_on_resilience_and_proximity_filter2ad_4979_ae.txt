### Experimental Setup and Convergence Analysis

The nature of the underlying topology and the exact locations of sources and destinations significantly influence the behavior of distributed systems. To provide a simplified and controlled experiment, we consider an isolated domain. This domain consists of \( m \) nodes that are within a very small latency of each other, while all nodes in this isolated domain are at a large latency from the remaining \( n - m \) nodes. Each node in the isolated domain contacts a randomly chosen destination outside the domain. The measure of local convergence is determined by the number of exit points, i.e., the number of nodes in the domain that relay messages to nodes outside the domain. In the best case, only one node sends a message outside the domain, with all other nodes converging on this point before the message leaves the domain.

We test convergence in three topologies: Ring, Tree, and XOR. Figures 10 and 11 plot the measured number of exit points for increasing domain sizes (with \( n \) fixed and \( m \) varying from 1 to \( \frac{n}{2} \)). Our results can be organized around three key questions:

#### Question #1: Which is more effective, PNS or PRS?

Figure 10 shows the results for the PNS, PRS, and PNS+PRS versions of both XOR and Ring. In both cases, PNS and PNS+PRS provide nearly optimal performance, whereas PRS does little to limit the number of exit points (except for very large \( m \) in the case of Ring). Thus, PNS is far more effective than PRS. Combining PRS with PNS helps somewhat for Ring but has minimal impact for XOR. The ineffectiveness of PRS is not surprising because, at the simulated system size of 65536, each node has 16 neighbors. Until the domain size is a large fraction of the total population, it is unlikely that one of these neighbors is within the domain, and thus PRS has little effect.

#### Question #2: Does this answer change when only considering PNS(K)?

Figure 11, left, shows the results for the PNS(16), PRS, and PNS(16)+PRS versions of Ring. Because the sampling is limited to 16, proximity neighbor selection is not ideal, and its effectiveness is greatly reduced. In fact, PRS and PNS(16) are equally ineffective. The combination of the two, PNS(16)+PRS, is more effective, particularly for moderate-sized domains. When the domain size is small, a limited amount of sampling (whether choosing neighbors or routes) is not much help. The combination of the two, PNS(16)+PRS, increases the level of sampling and becomes effective for lower values of \( m \). Thus, PRS might play an important role in local convergence if the domain sizes of interest are small and the sampling used to implement PNS is limited.

#### Question #3: How does the performance of the various geometries compare?

Figure 11, right, compares the results for PNS Tree, PNS+PRS Ring, and PNS+PRS XOR. As can be seen, these all perform roughly the same. Thus, as with path latency, the biggest difference between geometries is whether or not they can accommodate PNS and/or PRS. Our results suggest that the relevance of PRS depends on whether or not PNS can be closely approximated (at least more closely than PNS(16) does). If not, then implementing PRS provides significant value; if so, then PRS may not be needed as PNS by itself provides almost all the performance of PNS+PRS. References [8, 2] propose methods for efficiently approximating PNS, but it is not yet known how much better they are than PNS(16) for these scenarios.

### Discussion

This paper does not introduce new DHT algorithms or present any theorems. However, we hope it provides insights that will be useful in future DHT routing designs. At a high level, our findings can be summarized as follows:

- **Component-based analysis:** When comparing DHT algorithms, we advocate analyzing the component design decisions separately rather than comparing DHTs as black-boxes or turn-key systems. This requires separating systems-level design decisions, which are usually independent of the routing, from routing-level design decisions. While this approach may not be as effective in picking the best current design, it is more conducive to creating better designs in the future.
- **Routing geometry is fundamental:** The choice of a routing geometry constrains other routing design issues. While there are many detailed routing designs yet to be explored, the space of routing geometries is more limited. Hence, one might reach some consensus on the best routing geometry well before reaching any consensus about the various design details.
- **Flexibility is important:** The most important difference we noticed between geometries (besides the butterfly geometry’s ability to achieve \( O(\log n) \) paths with \( O(1) \) neighbors) is the degree of flexibility they offer. Flexibility describes the amount of freedom available to choose neighbors and next-hop paths, which in turn affects the performance in areas such as static resilience, path latency, and local convergence.
- **Ring and XOR are flexible:** The Ring and XOR geometries were the only ones we tested that could freely choose both neighbors and routes, so they could implement both PNS and PRS. While PNS is significantly more effective than PRS in dealing with proximity, there are times when PRS is an important complement to PNS. Thus, the ability to support both is an advantage.
- **Why not the Ring?** The Ring geometry has unsurpassed flexibility and provides natural support for sequential neighbors. It achieved the highest performance in our resiliency tests and was as good as any other geometry in the proximity metrics of path length and local convergence. Thus, our investigation showed no advantage to the other geometries and a slight advantage to the Ring. While our initial inclination was to favor more complicated geometries, the question we end this paper with is: why not use ring geometries?

However, we pose this as a question, not a conclusion. There is much more to be done before any definitive judgments can be drawn. Our investigation is incomplete in many aspects. For example, our study could be extended to a wider class of routing geometries, theoretical bounds could be derived for many of our simulation results, and the impact of a routing geometry (and in particular its symmetry or the lack thereof) on the cost of maintaining the associated overlay structure should be studied. Thus, we view our paper as only the first step in a more fundamental investigation of routing algorithms.

### Acknowledgements

We wish to thank several anonymous reviewers and our shepherd Antony Rowstron for their feedback and suggestions. We also thank Dahlia Malkhi and David Ratajczak for their help with the implementation of Viceroy.

### References

[1] M. Castro, M. Jones, Anne-Marie Kermarrec, A. Rowstron, M. Theimer, H. Wang, and A. Wolman. An Evaluation of Scalable Application-Level Multicast Built Using Peer-To-Peer Overlays. In Proceedings of the INFOCOM 2003, San Francisco, April 2003.

[2] Miguel Castro, Peter Drushel, Y.C. Hu, and Antony Rowstron. Exploiting Network Proximity in Peer-to-peer Networks. Technical Report MSR-TR-2002-82, Microsoft Research, 2002.

[3] Frank Dabek, M. Frans Kaashoek, David Karger, Robert Morris, and Ion Stoica. Wide-area cooperative storage with CFS. In Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP 2001), Lake Louise, AB, Canada, October 2001.

[4] Peter Druschel and Antony Rowstron. Storage management and caching in PAST, a large-scale, persistent peer-to-peer storage utility. In Proceedings of the 18th ACM Symposium on Operating Systems Principles (SOSP 2001), Lake Louise, AB, Canada, October 2001.

[5] IRIS: Infrastructure for Resilient Internet Systems. http://iris.lcs.mit.edu, May 2002.

[6] David Karger Frans Kaashoek. Simple Constant-Space Distributed Hash Tables. In Proceedings of the IPTPS 2003, Berkeley, February 2003.

[7] Anjali Gupta, Barbara Liskov, and Rodrigo Rodrigues. One Hop Lookups for Peer-to-Peer Overlays. In Proceedings of the HotOS-IX 2003, Hawaii, May 2003.

[8] Kirsten Hildrum, John D. Kubiatowicz, Satish Rao, and Ben Y. Zhao. Distributed Object Location in a Dynamic Environment. In Proceedings of the ACM SPAA, 2002.

[9] Sushant Jain, Ratul Mahajan, and David Wetherall. A Study of Performance Potential of DHT-based Overlays. In Proceedings of the 4th Usenix Symposium on Internet Technologies and Systems (USITS), Seattle, WA, USA, March 2003.

[10] David R. Karger and Matthias Ruhl. Finding Nearest Neighbours in Growth-restricted Metrics. In Proceedings of the ACM STOC, Montreal, May 2002.

[11] J. Kleinberg. The small-world phenomenon: An algorithmic perspective. In Proceedings of the ACM STOC 2000, 2000.

[12] John Kubiatowicz. Oceanstore: An Architecture for Global-Scalable Persistent Storage. In Proceedings of the ASPLOS 2000, Cambridge, MA, USA, November 2000.

[13] Dmitri Loguinov, Anuj Kumar, Vivek Rai, and Sai Ganesh. Graph-Theoretic Analysis of Structured Peer-to-Peer Systems; Routing Distances and Fault Resilience. In Proceedings of the ACM SIGCOMM ’03 Conference, Karlsruhe, Germany, August 2003.

[14] Dahlia Malkhi, Moni Naor, and David Ratajczak. Viceroy: A Scalable Dynamic Emulation of the Butterfly. In Proceedings of the PODC, 2002.

[15] Petar Maymounkov and David Mazieres. Kademlia: A Peer-to-peer Information Systems Based on the XOR Metric. In Proceedings of the IPTPS 2002, Boston, March 2002.

[16] C. Greg Plaxton, Rajmohan Rajaraman, and Andrea W. Richa. Accessing Nearby Copies of Replicated Objects in a Distributed Environment. In Proceedings of the ACM SPAA, June 1997.

[17] CAIDA: The Skitter Measurement Project. www.caida.org/tools/measurement/skitter/index.html, 2002.

[18] Sylvia Ratnasamy. A Scalable Content-Addressable Network. PhD thesis, University of California, Berkeley, October 2002.

[19] Sylvia Ratnasamy, Paul Francis, Mark Handley, Richard Karp, and Scott Shenker. A Scalable Content-Addressable Network. In Proceedings of the ACM SIGCOMM 2001 Technical Conference, San Diego, CA, USA, August 2001.

[20] Sylvia Ratnasamy, Mark Handley, Richard Karp, and Scott Shenker. Application-level Multicast using Content-Addressable Networks. In Proceedings of the NGC 2001, 2001.

[21] Sylvia Ratnasamy, Mark Handley, Richard Karp, and Scott Shenker. Topologically-Aware Overlay Construction and Server Selection. In Proceedings of the INFOCOMM, 2002.

[22] Antony Rowstron and Peter Druschel. Pastry: Scalable, distributed object location and routing for large-scale peer-to-peer systems. In IFIP/ACM International Conference on Distributed Systems Platforms (Middleware), pages 329–350, November 2001.

[23] Stefan Saroiu, P. Krishna Gummadi, and Steven D. Gribble. A Measurement Study of Peer-to-peer File Sharing Systems. In Proceedings of the Multimedia Computing and Networking Conference (MMCN), San Jose, CA, USA, January 2002.

[24] John Kubiatowicz Sean Rhea, Timothy Roscoe. DHTs Need Application-Driven Benchmarks. In Proceedings of the IPTPS 2003, Berkeley, February 2003.

[25] Ion Stoica, Robert Morris, David Karger, Frans Kaashoek, and Hari Balakrishnan. Chord: A Scalable Peer-to-peer Lookup Service for Internet Applications. In Proceedings of the ACM SIGCOMM 2001, San Diego, CA, USA, August 2001.

[26] Marcel Waldvogel and Roberto Renaldi. Efficient Topology-Aware Overlay Network. In Proceedings of the HotNets-I 2002, Princeton, October 2002.

[27] Ben Y. Zhao, Anthony Joseph, and John D. Kubiatowicz. Locality Aware Mechanisms for Large-scale Networks. In Proceedings of the FuDiCo 02, Bertinoro, Italy, June 2002.

[28] B.Y. Zhao, K.D. Kubiatowicz, and A.D. Joseph. Tapestry: An Infrastructure for Fault-Resilient Wide-Area Location and Routing. Technical Report UCB//CSD-01-1141, University of California at Berkeley, April 2001.

[29] Shelley Q. Zhuang, Ben Y. Zhao, Anthony D. Joseph, Randy H. Katz, and John Kubiatowicz. Bayeux: An Architecture for Scalable and Fault-tolerant Wide-Area Data Dissemination. In Proceedings of the NOSSDAV 2001, 2001.