### Spread of Third-Party Libraries in the Android Market

Third-party libraries are widely used in the Android market, accounting for a significant portion of the codebase [24, 27]. However, the number of critical bugs and security vulnerabilities in these components has been steadily increasing. Over recent years, third-party libraries have become the weakest link and the primary attack vector in applications [38]. Dedicated research [8, 19, 35, 39] has highlighted that advertisement libraries, in particular, pose significant risks to end-users' security and privacy by secretly collecting private data or even opening backdoors.

This situation has motivated a line of research aimed at automatically detecting libraries in applications [10, 28, 32, 41]. However, early approaches were insensitive to exact library versions. More recent studies [4, 9] have adopted Software Bertillonage techniques [11] to identify specific library versions, revealing that approximately 70% of the libraries included in Google Play apps are outdated by at least one version. Similar alarming results have been reported in other ecosystems, such as JavaScript [23] and Windows [31].

### Consequences and Challenges

Despite the fast response times by library developers, the integration of existing fixes by app developers often takes more than 300 days on average [4]. This delay leaves known security vulnerabilities [3, 7, 33–35] as a persistent threat in the app ecosystem. While previous work has focused on detecting outdated libraries, this study aims to uncover the root causes of this issue. Our findings have allowed us to propose actionable items that are both effective in addressing the problem of outdated libraries and accepted by the majority of app developers.

### Conclusion

With the rapid increase in the use of third-party libraries, a large part of Android apps now consists of external code. Critical bugs and security vulnerabilities in these components can affect a high number of end-users, putting their privacy and sensitive data at risk. The reality is that important patches either reach the app consumer after an unacceptably long period or not at all.

This paper is the first to identify the root causes of why Android app developers do not adopt new versions. Based on firsthand information from app developers and results from two empirical studies, we propose actionable items for different entities in the app ecosystem to address this alarming situation. We believe that tackling the underlying problem is more effective than merely addressing the symptoms. This approach is also supported by Derek Weeks, Vice President at Sonatype, who emphasizes the importance of empowering development with the right information about the software parts they are using.

### Ethical Considerations

We have reported apps that include vulnerable library versions to Google’s App Security Improvement (ASI) program.

### Acknowledgments

This work was supported by the German Federal Ministry of Education and Research (BMBF) through funding for the Center for IT-Security, Privacy and Accountability (CISPA) (FKZ: 16KIS0345, 16KIS0656) and the project SmartPriv (FKZ: 16KIS0377K).

### References

[1] Apperian. 2014. The Impact of iOS 8 on App Wrapping. https://www.apperian.com/mam-blog/impact-ios-8-app-wrapping. (2014). Last visited: 08/25/2017.
[2] Apple. 2016. Swift Package Manager Community Proposal. https://github.com/apple/swift-package-manager/blob/master/Documentation/PackageManagerCommunityProposal.md. (2016). Last visited: 08/25/2017.
[3] Google ASI. 2016. Security Vulnerability in Vungle Android SDKs prior to 3.3.0. https://support.google.com/faqs/answer/6313713. (2016). Last visited: 08/25/2017.
[4] Michael Backes, Sven Bugiel, and Erik Derr. 2016. Reliable Third-Party Library Detection in Android and its Security Applications. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security (CCS ’16). ACM, New York, NY, USA, 356–367.
[5] Gabriele Bavota, Gerardo Canfora, Massimiliano Di Penta, Rocco Oliveto, and Sebastiano Panichella. 2015. How the Apache Community Upgrades Dependencies: An Evolutionary Study. Empirical Softw. Engg. 20, 5 (Oct. 2015), 1275–1317.
[6] Android Developers Blog. 2017. Android Studio 3.0 Canary 1. https://android-developers.googleblog.com/2017/05/android-studio-3-0-canary1.html. (2017). Last visited: 08/25/2017.
[7] Dropbox Blog. 2015. Security bug resolved in the Dropbox SDKs for Android. https://blogs.dropbox.com/developers/2015/03/security-bug-resolved-in-the-dropbox-sdks-for-android. (2015). Last visited: 08/25/2017.
[8] Theodore Book, Adam Pridgen, and Dan S. Wallach. 2013. Longitudinal Analysis of Android Ad Library Permissions. In MoST’13. IEEE.
[9] Zhihao Mike Chi. 2016. LibDetector: Version Identification of Libraries in Android Applications. (August 2016).
[10] Jonathan Crussell, Clint Gibler, and Hao Chen. 2013. Andarwin: Scalable detection of semantically similar android applications. In ESORICS’13. Springer.
[11] Julius Davies, Daniel M. German, Michael W. Godfrey, and Abram Hindle. 2011. Software Bertillonage: Finding the Provenance of an Entity. In Proceedings of the 8th Working Conference on Mining Software Repositories (MSR ’11). ACM, New York, NY, USA, 183–192.
[12] Android Developers. 2015. App Security Improvement Program. https://developer.android.com/google/play/asi.html. (2015). Last visited: 08/25/2017.
[13] Android Developers. 2016. Android 7 for Developers. https://developer.android.com/about/versions/nougat/android-7.0.html. (2016). Last visited: 08/25/2017.
[14] Android Developers. 2017. App Security Improvements: Looking back at 2016. https://android-developers.googleblog.com/2017/01/app-security-improvements-looking-back.html. (2017). Last visited: 08/25/2017.
[15] Android Developers. 2017. Google Play Dashboard. https://developer.android.com/about/dashboards/index.html. (2017). Last visited: 08/25/2017.
[16] Danny Dig and Ralph Johnson. 2006. How Do APIs Evolve? A Story of Refactoring: Research Articles. J. Softw. Maint. Evol. 18, 2 (March 2006), 83–107.
[17] Hewlett Packard Enterprise. 2016. HPE Cyber Risk Report. https://techbeacon.com/resources/2016-cyber-risk-report-hpe-security. (2016). Last visited: 08/25/2017.
[18] Google. 2017. Chrome Extensions Autoupdating. https://developer.chrome.com/extensions/autoupdate. (Last visited: 02/10/2017).
[19] Michael Grace, Wu Zhou, Xuxian Jiang, and Ahmad-Reza Sadeghi. 2012. Unsafe exposure analysis of mobile in-app advertisements. In WISEC’12. ACM.
[20] GuardSquare. 2016. ProGuard Java Obfuscator. http://proguard.sourceforge.net.
[21] Steve Hanna, Ling Huang, Edward Wu, Saung Li, Charles Chen, and Dawn Song. 2013. Juxtapp: A Scalable System for Detecting Code Reuse Among Android Applications. In DIMVA’12. Springer.
[22] Miryung Kim, Dongxiang Cai, and Sunghun Kim. 2011. An Empirical Investigation into the Role of API-level Refactorings During Software Evolution. In Proceedings of the 33rd International Conference on Software Engineering (ICSE ’11). ACM, New York, NY, USA, 151–160.
[23] Tobias Lauinger, Abdelberi Chaabane, Sajjad Arshad, William Robertson, Christo Wilson, and Engin Kirda. 2017. Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web. In Proceedings of the Network and Distributed System Security Symposium (NDSS ’17).
[24] Li Li, Tegawendé F Bissyandé, Jacques Klein, and Yves Le Traon. 2016. An investigation into the use of common libraries in android apps. In Proceedings of the 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER ’16), Vol. 1. IEEE, 403–414.
[25] Mario Linares-Vásquez, Gabriele Bavota, Carlos Bernal-Cárdenas, Massimiliano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. 2013. API change and fault proneness: a threat to the success of Android apps. In Proceedings of the 9th joint meeting on foundations of software engineering (ESEC/FSE ’13). ACM, 477–487.
[26] Mario Linares-Vásquez, Gabriele Bavota, Massimiliano Di Penta, Rocco Oliveto, and Denys Poshyvanyk. 2014. How Do API Changes Trigger Stack Overflow Discussions? A Study on the Android SDK. In Proceedings of the 22nd International Conference on Program Comprehension (ICPC 2014). ACM, New York, NY, USA, 83–94.
[27] Mario Linares-Vásquez, Andrew Holtzhauer, Carlos Bernal-Cárdenas, and Denys Poshyvanyk. 2014. Revisiting Android Reuse Studies in the Context of Code Obfuscation and Library Usages. In Proceedings of the 11th Working Conference on Mining Software Repositories (MSR 2014). ACM, New York, NY, USA, 242–251.
[28] Ziang Ma, Haoyu Wang, Yao Guo, and Xiangqun Chen. 2016. LibRadar: Fast and Accurate Detection of Third-party Libraries in Android Apps. In ICSE’16. ACM.
[29] Tyler McDonnell, Baishakhi Ray, and Miryung Kim. 2013. An Empirical Study of API Stability and Adoption in the Android Ecosystem. In Proceedings of the 2013 IEEE International Conference on Software Maintenance (ICSM ’13). IEEE Computer Society, Washington, DC, USA, 70–79.
[30] Israel J Mojica, Bram Adams, Meiyappan Nagappan, Steffen Dienst, Thorsten Berger, and Ahmed E Hassan. 2014. A large-scale empirical study on software reuse in mobile apps. IEEE software 31, 2 (2014), 78–86.
[31] Antonio Nappa, Richard Johnson, Leyla Bilge, Juan Caballero, and Tudor Dumitraș. 2015. The Attack of the Clones: A Study of the Impact of Shared Code on Vulnerability Patching. In Proc. 36th IEEE Symposium on Security and Privacy (SP ’15). IEEE, 692–708.
[32] Arun Narayanan, Lihui Chen, and Chee Keong Chan. 2014. Addetect: Automated detection of android ad libraries using semantic analysis. In ISSNIP’14. IEEE.
[33] The Hacker News. 2014. Facebook SDK Vulnerability Puts Millions of Smartphone Users’ Accounts at Risk. http://thehackernews.com/2014/07/facebook-sdk-vulnerability-puts.html. (2014). Last visited: 08/25/2017.
[34] The Hacker News. 2015. Backdoor in Baidu Android SDK Puts 100 Million Devices at Risk. http://thehackernews.com/2015/11/android-malware-backdoor.html. (2015). Last visited: 08/25/2017.
[35] The Hacker News. 2015. Warning: 18,000 Android Apps Contains Code that Spy on Your Text Messages. http://thehackernews.com/2015/10/android-apps-steal-sms.html. (2015). Last visited: 08/25/2017.
[36] Tom Preston-Werner. 2013. Semantic Versioning 2.0.0. http://semver.org/. (2013). Last visited: 08/25/2017.
[37] Israel J Mojica Ruiz, Meiyappan Nagappan, Bram Adams, and Ahmed E Hassan. 2012. Understanding reuse in the android market. In Proceedings of the 20th International Conference on Program Comprehension (ICPC ’12). IEEE, 113–122.
[38] Sonatype. 2017. 2016 State of the Software Supply Chain. https://www.sonatype.com/software-supply-chain. (2017). Last visited: 08/25/2017.
[39] Ryan Stevens, Clint Gibler, Jon Crussell, Jeremy Erickson, and Hao Chen. 2012. Investigating User Privacy in Android Ad Libraries. In MoST’12. IEEE.
[40] ThreatPost. 2016. Code reuse - A peril for secure software development. https://threatpost.com/code-reuse-a-peril-for-secure-software-development/122476/. (2016). Last visited: 08/25/2017.
[41] Haoyu Wang, Yao Guo, Ziang Ma, and Xiangqun Chen. 2015. WuKong: A Scalable and Accurate Two-phase Approach to Android App Clone Detection. In ISSTA’15. ACM.
[42] Jeff Williams and Arshan Dabirsiaghi. 2012. The unfortunate reality of insecure libraries. http://www.aspectsecurity.com/research-presentations/the-unfortunate-reality-of-insecure-libraries. (2012). Last visited: 08/25/2017.

### Appendix: Questionnaire

#### Professional Background Questions:
**B1: Is developing Android apps your primary job?**
- (i) Yes
- (ii) No

**B2: Are you developing your apps as a hobby, are you self-employed, or do you work for a company? Please check all that apply.**
- (i) Hobby
- (ii) Self-employed
- (iii) Company
- (iv) Other

**B3: How large is your company?**
- (i) Up to 10 employees
- (ii) 10-50 employees
- (iii) 50-100 employees
- (iv) >100 employees

**B4: How many apps have you worked on?**

#### App Development Questions:
**A1: How do you develop your app/apps? (If more than one, please choose the one you use primarily)**
- (i) Android Studio
- (ii) Eclipse
- (iii) Application Generator Framework (Cordova, Xamarin, etc.)
- (iv) Other

**A2: Is/Are your app/apps updated on a fixed schedule?**
- (i) Yes
- (ii) No

**A3: Which intervals do you use to update your app/apps?**
- (i) Weekly
- (ii) Bi-weekly
- (iii) Monthly
- (iv) Quarterly
- (v) Twice per year
- (vi) Yearly
- (vii) Never

**A4: For which purpose do you update your app/apps? Please check all that apply.**
- (i) New functionality
- (ii) Bugfixes
- (iii) Library updates
- (iv) Other

#### Third-Party Library Questions:
**T1: Where do you search for the libraries?**

**T2: Do you choose libraries according to specific criteria? Please check all that apply.**
- (i) Popularity
- (ii) Functionality
- (iii) Open-Source
- (iv) Closed-Source
- (v) Required Permissions
- (vi) Documentation
- (vii) Recommendations
- (viii) Ratings
- (ix) Security
- (x) Update frequency
- (xi) Other

**T3: How many different library functions do your apps typically use?**

**T4: How do you integrate third-party libraries into your app? Please check all that apply.**
- (i) Add JAR file
- (ii) Gradle
- (iii) Ant
- (iv) Maven
- (v) I don’t know
- (vi) Other

**T5: Are you happy with Gradle’s usability?**
- (i) Yes
- (ii) Somewhat
- (iii) No
- (iv) I don’t know

**T6: Can you list a few problems that you’ve had with Gradle?**

**T7: Do you update the libraries in your app regularly?**
- (i) Yes, all of them
- (ii) Yes, some of them
- (iii) No
- (iv) I don’t know

**T8: Why do you update your apps’ libraries?**
- (i) New features
- (ii) Bugfixes
- (iii) Security fixes
- (iv) I don’t know
- (v) Other

**T9: If your app were to contain outdated libraries, why would that be? Please check all that apply.**
- (i) Library was still working
- (ii) Too much effort
- (iii) Missing update documentation
- (iv) Unaware of updates
- (v) Prevent incompatibilities
- (vi) Bad/missing library documentation
- (vii) I don’t care
- (viii) I don’t know
- (ix) Other

**T10: Do you have positive/negative examples for libraries regarding updatability, documentation, etc.? Please give details.**

**T11: Would you welcome automatic library updates on user devices via the Android OS in cases where they do not break functionality?**
- (i) Yes
- (ii) No
- (iii) I don’t mind
- (iv) I don’t know

**T12: Which of the following do you think would help make library updates easier? Please check all that apply.**
- (i) Different distribution channels
- (ii) Central library marketplace
- (iii) Better IDE integration
- (iv) System service or package manager
- (v) Other

**T13: Have you ever encountered negative feedback/ratings solely because of included library functionality (e.g., libraries that perform tracking or aggregate user data)?**
- (i) Yes
- (ii) No
- (iii) I don’t know

**T14: What was the problem?**

#### Demographics:
**D1: How old are you? Enter 0 if you don’t want to answer.**

**D2: What is your gender?**
- (i) Male
- (ii) Female
- (iii) I don’t want to answer

**D3: What is your highest educational degree?**
- (i) High school
- (ii) College degree
- (iii) Graduate degree
- (iv) I don’t want to answer
- (v) No degree

**D4: How many years of general coding experience do you have?**

**D5: How many years of Android experience do you have?**

**D6: How did you learn to write Android code? Please check all that apply.**
- (i) Self-taught
- (ii) Class in school
- (iii) Class in university
- (iv) On the job
- (v) Online coding course
- (vi) Other