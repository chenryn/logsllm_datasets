#BHUSA @BlackHatEvents
**Blasting Event-Driven Cornucopia: WMI-based User-Space Attacks and Blind SIEMs/EDRs**

**Presenters:**
- **Claudiu Teodorescu** (Digital Forensics, Reverse Engineering, Malware & Program Analysis)
  - Instructor of Special Topics in Malware Analysis at Black Hat USA
  - Speaker at DEF CON, BSidesLV, DerbyCon, ReCon, BlackHat
  - Author of WMIParser
  - Twitter: @cteo13
- **Andrey Golchikov** (Operating System Security and Windows Internals Researcher)
  - Over 20 years of experience in operating system security and reversing Windows Internals
  - Speaker at BlackHat
  - Author of WMICheck
  - Blog: redplait.blogspot.com
  - Twitter: @real_redp
- **Igor Korkin, PhD** (Windows Kernel Researcher)
  - Speaker at CDFSL, BlackHat, HITB, SADFE, Texas Cyber Summit
  - Author of MemoryRanger
  - Blog: igorkorkin.blogspot.com
  - Twitter: @IgorKorkin

**Information Classification: General**

**Agenda:**
1. **Windows Management Instrumentation (WMI)**
   - Architecture and Features
2. **Abusing WMI by Attackers**
   - MITRE ATT&CK and Malware Samples
3. **Applying WMI for Defenders**
   - Academic and Practical Results
4. **Attacks on WMI and EDR Solutions**
   - Overview of Existing Attacks
   - User- and Kernel-Space Component Attacks
5. **Detection and Prevention**
   - WMICheck: Detecting Attacks on WMI
   - WMI Sandboxing and MemoryRanger

**Windows Management Instrumentation (WMI)**
- **Architecture:**
  - WMI providers are user-mode COM DLLs or kernel drivers.
  - Matt Graeber's work enumerates WMI providers, their backing DLLs, and the classes they host.
  - Windows 11 includes over 4000 built-in WMI providers, covering areas such as BIOS/UEFI, OS and Win32, WMI, ETW, Disks and Files, Registry, Network and VPN, Encryption, Security Assessment, Hyper-V, Microsoft Defender, Multimedia, TPM, Power and Temperature Management, and more.

**WMI Events:**
- **Components:**
  - **Filter:** Specifies the event to trigger on.
  - **Consumer:** Defines the action to perform upon the firing of a filter.
  - **Binding:** Links the Filter and Consumer.
- **Intrinsic Events:**
  - Derived from __InstanceCreationEvent, __InstanceModificationEvent, or __InstanceDeletionEvent.
  - Used to monitor resources in the CIM repository.
  - Requires a polling interval, which may lead to missed events.
- **Extrinsic Events:**
  - Derived from the __ExtrinsicEvent class.
  - Generated by components outside the WMI implementation (e.g., monitoring registry, processes, threads, computer shutdowns, and restarts).

**WMI Filters:**
- **Specification:**
  - An instance of the __EventFilter WMI Class.
  - **EventNamespace:** Describes the namespace where events originate (usually ROOT\Cimv2).
  - **QueryLanguage:** WQL (WMI Query Language).
  - **Query:** Describes the type of event to be filtered via a WQL query.
- **Examples:**
  - `SELECT * FROM __InstanceCreationEvent Within 10 WHERE TargetInstance ISA "Win32_Process" AND Targetinstance.Name = "notepad.exe"`
  - `SELECT * FROM RegistryKeyChangeEvent WHERE Hive="HKEY_LOCAL_MACHINE" AND KeyPath="SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"`

**WMI Consumers:**
- **Action Definition:**
  - Standard Event consumers inherit from __EventConsumer.
  - Actions include saving to a file, running a script, logging into the EventLog, using network, and more.
- **Persistence and Code Execution:**
  - Create a filter, consumer, and binding to achieve persistence and code execution in the WMI repository.

**CIM Repository:**
- **Database Location:**
  - `%WBEM%\Repository`
- **Format:**
  - Undocumented, but reversed by the FireEye FLARE team.
  - Whitepaper authored by Ballenthin, Graeber, and Teodorescu.
  - Forensic Tools: WMIParser, python-cim.

**WMI Forensics:**
- **Logical to Physical Abstraction:**
  - Firmware-related WMI forensics and querying via PowerShell.

**WMI in Security:**
- **Defenders and Attackers:**
  - Both leverage WMI for various purposes.
- **Attacker Use Cases:**
  - Reconnaissance, AV Detection, Fileless Persistence, Code Execution, Lateral Movement, Data Storage, and C&C Communication.

**Attacks on WMI:**
- **Dangerous Aspects:**
  - Long-standing, unfixed vulnerabilities.
  - WMI service lacks critical protections.
  - EDR solutions and Windows Defender fail to detect these attacks.
  - Architectural flaws that are difficult to fix.
- **Targeted Components:**
  - WMI files and configurations in the registry.
  - Modifying content, removing values, and restricting access.
- **Registry Configurations:**
  - Disable Event SubSystem (ESS) by changing the `EnableEvents` value to 0 and restarting WMI.

**WMI Infrastructure:**
- **User Space:**
  - Implemented by the Winmgmt service running within a SVCHOST process.
  - Runs under the "LocalSystem" account without self-protection or integrity checks.
  - No PPL or trustlet protection.

**Memory Attacks on WMI Data:**
- **Template:**
  - Clear global flags, create new connections, and register filters/events.

**Tools for WMI Research:**
- **Built-in:**
  - WBEMTEST (since Windows 2000)
- **Scripting:**
  - VBScript, JScript, PowerShell
- **Third-party Explorers:**
  - WMI Explorer by Vinay Pamnani and Alexander Kozlov.
- **Custom Tools:**
  - `receive_wmi_events.exe` (C++ based, registers IWbemObjectSink-based callback, prints recently launched processes).

**Conclusion:**
- **Threat Modeling:**
  - Understanding the big picture of WMI attacks and their implications.

#BHUSA @BlackHatEvents
**Information Classification: General**