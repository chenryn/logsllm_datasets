### Initial Window (IW) Distribution and Analysis

**Presence and Sampling Methodology:**
The initial window (IW) is present in 0.1% of the hosts. To obtain a comprehensive understanding, we initially required knowledge of all IPs that support HTTP/TLS services. Subsequently, we conducted 30 random 1% samples of the entire probable address space, which confirmed our initial findings. While it is feasible to probe the entire IPv4 space, current host configurations make this unnecessary for obtaining representative IW estimates. Probing a random 1% subset suffices. Weekly results of these 1% scans are available at [https://iw.comsys.rwth-aachen.de](https://iw.comsys.rwth-aachen.de).

**Figure 4: Alexa Top 1M IW Distribution for HTTP and TLS Scans**
Given that the overall distribution may be influenced by legacy systems, we focused on popular internet infrastructures by scanning the Alexa top 1 million list. The IW distribution for the Alexa top 1 million list is shown in Figure 4 (note the log-scale). For HTTP, the success rate at popular hosts increases to 80%, while for TLS, it marginally improves to 85%. The currently recommended value, IW 10, dominates the scans with support over 85% (80%) for HTTP (TLS). However, some hosts still use IW 2 and IW 4. The IW distribution for TLS hosts is independent of their Alexa rank, but higher-ranked HTTP hosts show a more pronounced preference for IW 10. This suggests that popular domain hosts prioritize performance optimizations and maintain up-to-date systems.

**IW Defined by Byte Limit:**
We have so far presented results for scans with an MSS of 64 B. Only a small fraction (around 1%) of the scanned hosts adjust their IW based on the announced MSS. Approximately half of these hosts send 64 segments, and when the MSS is doubled to 128, the segment number halves to 32. This indicates that these hosts are configured to use 4 kB as their IW, i.e., the product of the MSS and the number of segments. Random sampling and manual investigation revealed that many of these hosts are residential access modems from Technicolor, primarily hosted by the Mexican ISP Telmex. Other hosts include publicly accessible power supply monitors. The remaining 50% of the hosts do not form large, easily identifiable groups. One group, identified through random sampling, adjusts their IW to fill the network MTU, sending 24 segments with an MSS of 64 and 12 segments with an MSS of 128, summing up to 1536 B.

**IW Distribution by Network and Service:**
We analyzed IW usage by network type, represented by Autonomous Systems (ASes), using DBSCAN clustering (with respect to IW 1, 2, 4, 10, and others). The left-hand side of Figure 5 shows large clusters with similar IW distributions, representing a significant fraction of all scanned IPs (HTTP 49%, TLS 48%). These clusters provide insights into per-service IW deployments. Clusters with nearly exclusive use of IW 10 are predominantly content providers, such as hosters, cloud providers, and CDNs. ASes with many IW 2-based hosts are typically ISPs or universities. The IW 4 cluster is a mix of ISPs and hosters. In the case of GoDaddy, 19.8% (32.7%) of the 137k HTTP (193k TLS) hosts announced by AS26496 (704 prefixes) use an IW of 48. These hosts use a static configuration of IW 48, irrespective of the announced MSS.

**Table 3: Per-Service IW Distribution Clustered by IP Range (Servers) or Reverse DNS (Access)**
Content networks, classified by service-provider IP ranges or the GHost HTTP server string for Akamai, have largely adopted IW 10. Older IW configurations are observed in networks with a high share of legacy devices, such as home routers in access networks. Content networks like Akamai enable per-service and even per-customer IW configurations. Our methodology, however, cannot assess these differences without prior knowledge of valid URLs hosted by Akamai. Manual probing of a few Akamai-hosted sites revealed different IW configurations (e.g., IW 16 and 32), indicating per-service customization.

### Discussion and Conclusion
This paper presents the first large-scale measurement of TCP's Initial Window (IW) configuration for HTTP/TLS reachable hosts. Our method, which does not require prior knowledge of the target host, is applicable to the entire IPv4 address space. We found that IW configurations are highly network-dependent. Service providers, who can benefit from larger IWs, have a high adoption rate of IW 10. We also noted service-specific customizations, such as those provided by Akamai. Analyzing such service-specific configurations requires prior knowledge, which our generalized methodology avoids. Networks with a larger fraction of legacy devices show lower IW 10 deployment and higher shares of older recommended IW sizes (i.e., 1, 2, 4). These observations motivate future work, especially in light of recent proposals to abandon general IW size recommendations in favor of per-service customized values.

**Methodological Insights:**
We identified TLS-based scans as a promising alternative to traditional HTTP-based IW inference methods. Our ZMap-based implementation demonstrates that complex TCP probes beyond single packet exchanges are feasible in a time-efficient manner. Scanning a random 1% subset of the IPv4 address space suffices to obtain representative IW distributions. Weekly results of these 1% scans are published at [https://iw.comsys.rwth-aachen.de](https://iw.comsys.rwth-aachen.de).

### Acknowledgements
This work was funded by the German Research Foundation (DFG) as part of project B1 within the Collaborative Research Center (CRC) 1053 – MAKI. We thank the network operators at RWTH Aachen University, especially Jens Hektor and Bernd Kohler, and Pascal Hein for enhancing the ZMap module. We also thank the anonymous IMC reviewers and our shepherd Monia Ghobadi for their valuable comments.

### References
[1] Bernhard Ager, Nikolaos Chatzis, Anja Feldmann, Nadi Sarrar, Steve Uhlig, and Walter Willinger. 2012. Anatomy of a Large European IXP. In Proceedings of SIGCOMM ’12, Helsinki, Finland, August 13–17, 2012. 12 pages.
[2] Mark Allman. 2015. Removing TCP’s Initial Congestion Window. Internet-Draft draft-allman-tcpm-no-initwin-00.txt. IETF Secretariat.
[3] M. Allman, S. Floyd, and C. Partridge. 1998. Increasing TCP’s Initial Window. RFC 2414. RFC Editor. 1–14 pages. http://www.rfc-editor.org/rfc/rfc2414.txt
[4] M. Allman, S. Floyd, and C. Partridge. 2002. Increasing TCP’s Initial Window. RFC 3390. RFC Editor. 1–14 pages. http://www.rfc-editor.org/rfc/rfc3390.txt
[5] Amazon.com, Inc. 2016. Amazon Web Service IP Address Ranges. https://ip-ranges.amazonaws.com/ip-ranges.json.
[6] M. Belshe, R. Peon, and Ed. M. Thomson. 2013. Hypertext Transfer Protocol Version 2 (HTTP/2). RFC 7540. RFC Editor. 1–96 pages. http://www.rfc-editor.org/rfc/rfc7540.txt
[7] CDNPlanet. [n. d.]. Initcwnd settings of major CDN providers. https://www.cdnplanet.com/blog/initcwnd-settings-major-cdn-providers/
[8] J. Chu, N. Dukkipati, Y. Cheng, and M. Mathis. 2013. Increasing TCP’s Initial Window. RFC 6928. RFC Editor. 1–24 pages. http://www.rfc-editor.org/rfc/rfc6928.txt
[9] Nandita Dukkipati, Tiziana Refice, Yuchung Cheng, Jerry Chu, Tom Herbert, Amit Agarwal, Arvind Jain, and Natalia Sutin. 2010. An Argument for Increasing TCP’s Initial Congestion Window. ACM SIGCOMM CCR 40, 3 (2010), 26–33.
[10] Zakir Durumeric, Eric Wustrow, and J. Alex Halderman. 2013. ZMap: Fast Internet-wide Scanning and Its Security Applications. In Proceedings of USENIX Conference on Security, Washington, D.C., USA, August 14–16, 2013. 16 pages.
[11] Akamai Community Forum. [n. d.]. Can we change initial CWIN for web experience products like DSA, Ion? https://community.akamai.com/thread/2694.
[12] Janardhan Iyengar, Ian Swett, Ryan Hamilton, and Alyssa Wilk. 2016. QUIC: A UDP-Based Secure and Reliable Transport for HTTP/2. Internet-Draft draft-tsvwg-quic-protocol-02. Internet Engineering Task Force. https://tools.ietf.org/html/draft-tsvwg-quic-protocol-02 Work in Progress.
[13] V. Jacobson. 1988. Congestion Avoidance and Control. In Proceedings of SIGCOMM ’88, Stanford, California, USA, August 16–18, 1988. 16 pages.
[14] A. Langley, N. Modadugu, and B. Moeller. 2014. Transport Layer Security (TLS) False Start. Internet-Draft draft-bmoeller-tls-falsestart-01.txt. IETF Secretariat.
[15] Alberto Medina, Mark Allman, and Sally Floyd. 2005. Measuring the Evolution of Transport Protocols in the Internet. ACM SIGCOMM CCR 35, 2 (2005), 37–52.
[16] David S. Miller and Nandita Dukkipati. 2011. TCP: Increase the Initial Congestion Window to 10. http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=442b9635c569fef038d5367a7acd906db4677ae1.
[17] David Naylor, Alessandro Finamore, Ilias Leontiadis, Yan Grunenberger, Marco Mellia, Maurizio Munafò, Konstantina Papagiannaki, and Peter Steenkiste. 2014. The Cost of the “S” in HTTPS. In Proceedings of CoNEXT ’17, Sydney, Australia, December 02–05, 2014. 8 pages.
[18] Jitendra Padhye and Sally Floyd. 2001. On Inferring TCP Behavior. In Proceedings of SIGCOMM ’01, San Diego, California, USA, August 27–31, 2001. 12.
[19] W. Michael Petullo, Xu Zhang, Jon A. Solworth, Daniel J. Bernstein, and Tanja Lange. 2013. MinimaLT: Minimal-latency Networking Through Better Security. In Proceedings of CCS ’13, Berlin, Germany, November 04–08, 2013. 14 pages.
[20] Feng Qian, Alexandre Gerber, Zhuoqing Morley Mao, Subhabrata Sen, Oliver Spatscheck, and Walter Willinger. 2009. TCP Revisited: A Fresh Look at TCP in the Wild. In Proceedings of IMC ’09, Chicago, Illinois, USA, November 04–06, 2009. 14 pages.
[21] Sivasankar Radhakrishnan, Yuchung Cheng, Jerry Chu, Arvind Jain, and Barath Raghavan. 2011. TCP Fast Open. In Proceedings of CoNEXT ’11, Tokyo, Japan, December 06–09, 2011. 12 pages.
[22] Jan Rüth. 2017. ZMap and Modules. Retrieved 10.08.2017 from https://github.com/COMSYS/zmap
[23] Quirin Scheitle, Oliver Gasser, Patrick Sattler, and Georg Carle. 2017. HLOC: Hints-Based Geolocation Leveraging Multiple Measurement Frameworks. In Proceedings of TMA ’17, Dublin, Ireland, June 21–23, 2017. 9 pages.
[24] W. Stevens. 1997. TCP Slow Start, Congestion Avoidance, Fast Retransmit, and Fast Recovery Algorithms. RFC 2001. RFC Editor. 1–6 pages. http://www.rfc-editor.org/rfc/rfc2001.txt