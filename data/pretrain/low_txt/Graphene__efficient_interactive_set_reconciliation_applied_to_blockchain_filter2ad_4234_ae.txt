### 6.4 Limitations

Graphene is a solution for set reconciliation that involves a trade-off between transmission size, computational complexity (in terms of network round-trips), and success rate. In contrast, popular alternatives such as Compact Blocks [17] have a predictable transmission size, fixed computational complexity, use a straightforward algorithm, and always succeed. Graphene's performance advantages increase with block size, but it is a probabilistic solution with a tunable failure rate.

### 7. Conclusions

We introduced a novel approach to determining a subset of items that two parties hold in common from a larger set, using a combination of Bloom filters and Invertible Bloom Lookup Tables (IBLTs). We also provided a solution for the more general case, which is a special application of Graphene as discussed in Section 3.3.1. Our evaluations of this scenario are shown in Figure 14. In these experiments, the sender's mempool contains \( n \) transactions, of which a fraction (on the x-axis) are shared with the receiver. The receiver's mempool is filled with unrelated transactions to ensure that both mempools have the same size (\( m = n \)). As a result, Protocol 1 fails, and the modifications from Section 3.3.1 are employed. As with previous experiments, Graphene outperforms Compact Blocks across various mempool intersection sizes, and the improvement increases with block size.

### 6. Systems Issues

#### 6.1 Security Considerations

**Malformed IBLTs:**
It is relatively simple to create an IBLT that results in an endless decoding loop for a naive implementation. This attack can be easily thwarted. To create a malformed IBLT, the attacker incorrectly inserts an item into only \( k-1 \) cells. When the item is peeled off, one cell in the IBLT will contain the item with a count of -1. When that entry is peeled, \( k-1 \) cells will contain the item with a count of 1, and the loop continues. The attack can be thwarted if the implementation halts decoding when an item is decoded twice. Once detected, the sender can be dropped or banned by the receiver.

**Manufactured Transaction Collisions:**
The probability of accidental collision of two 8-byte transaction IDs in a mempool of size \( m \) is approximately \( 1 - e^{-\frac{m(m-1)}{2^{64}}} \) [39]. An attacker may use brute force search to discover and submit collisions. Some blockchain protocols use SipHash [10] to limit the attack to a single peer. With or without SipHash, Graphene is more resilient against such collisions than XThin and Compact Blocks. Let \( t_1 \) and \( t_2 \) be transactions with IDs that collide, where one party is missing some or all of the subset. Specifically, we described how to parameterize the probabilistic data structures to meet a desired decode rate. Through detailed evaluations using simulations and real-world deployment, we compared our method to existing systems, showing that it requires less data transmission over a network and is more resilient to attacks than previous approaches.

### References

[1] Bitcoin Cash Nodes. https://cashnodes.io/nodes (2019).
[2] Graphene: A New Protocol for Block Propagation Using Set Reconciliation. Proc. of International Workshop on Cryptocurrencies and Blockchain Technology (ESORICS Workshop). (Sept 2017).
[3] The Bitcoin ABC Vision. https://medium.com/@Bitcoin_ABC/the-bitcoin-abc-vision-f7f87755979f (Aug 24 2018).
[4] Bitcoin Cash Development And Testing Accord: Bitcoin Unlimited Statement. https://www.bitcoinunlimited.info/cash-development-plan (2018).
[5] IBLT Optimization (open-source repository). https://github.com/umass-forensics/IBLT-optimization (2018).
[6] Graphene Pull Request. https://github.com/BitcoinUnlimited/BitcoinUnlimited/pull/973 (July 2018).
[7] BUIP093: Graphene Relay. https://github.com/BitcoinUnlimited/BUIP/blob/master/093.mediawiki (July 26 2018).
[8] Block propagation data from Bitcoin Cash’s stress test. https://medium.com/@j_73307/block-propagation-data-from-bitcoin-cashs-stress-test-5b1d7d39a234 (September 2018).
[9] Improve block transfer efficiency using Graphene #17724. https://github.com/ethereum/go-ethereum/pull/17724 (Sept 20 2018).
[10] Jean-Philippe Aumasson and Daniel J. Bernstein. 2012. SipHash: A Fast Short-Input PRF. In Progress in Cryptology (INDOCRYPT). 489–508.
[11] Burton H. Bloom. 1970. Space/Time Trade-offs in Hash Coding with Allowable Errors. Commun. ACM 13, 7 (July 1970), 422–426.
[12] Anudhyan Boral and Michael Mitzenmacher. 2014. Multi-Party Set Reconciliation Using Characteristic Polynomials. In Proc. Annual Allerton Conference on Communication, Control, and Computing.
[13] Andrei Broder and Michael Mitzenmacher. 2004. Network applications of bloom filters: A survey. Internet mathematics 1, 4 (2004), 485–509.
[14] Andrej Brodnik and J Ian Munro. 1999. Membership in constant time and almost-minimum space. SIAM J. Comput. 28, 5 (1999), 1627–1640.
[15] Casper the friendly finality gadget. https://arxiv.org/abs/1710.09437 (Oct 2017).
[16] Larry Carter, Robert Floyd, John Gill, George Markowsky, and Mark Wegman. 1978. Exact and Approximate Membership Testers. In Proceedings of the Tenth Annual ACM Symposium on Theory of Computing (STOC ’78). ACM, New York, NY, USA, 59–65. https://doi.org/10.1145/800133.804332
[17] BIP152: Compact Block Relay. https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki (April 2016).
[18] George Danezis and Sarah Meiklejohn. 2016. Centrally Banked Cryptocurrencies. In Proc. Network and Distributed System Security Symposium (NDSS).
[19] Christian Decker and Roger Wattenhofer. 2013. Information Propagation in the Bitcoin Network. In 13th IEEE International Conference on Peer-to-Peer Computing (P2P), Trento, Italy.
[20] Peter C. Dillinger and Panagiotis Manolios. 2004. Bloom Filters in Probabilistic Verification. In In Proceedings of the 5th International Conference on Formal Methods in Computer-Aided Design (FMCAD. Springer-Verlag, 367–381.
[21] Peter C. Dillinger and Panagiotis Manolios. 2004. Fast and Accurate Bitstate Verification for SPIN. Lecture Notes in Computer Science (2004), 57–75. https://doi.org/10.1007/978-3-540-24732-6_5
[22] Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, and Adam Smith. 2008. Fuzzy extractors: How to generate strong keys from biometrics and other noisy data. SIAM journal on computing 38, 1 (2008), 97–139.
[23] David Eppstein, Michael T. Goodrich, Frank Uyeda, and George Varghese. 2011. What’s the Difference?: Efficient Set Reconciliation Without Prior Context. In ACM SIGCOMM.
[24] Bin Fan, Dave G. Andersen, Michael Kaminsky, and Michael D. Mitzenmacher. 2014. Cuckoo Filter: Practically Better Than Bloom. In Proc. ACM CoNEXT. 75–88. https://doi.org/10.1145/2674005.2674994
[25] Philippe Flajolet and G. Nigel Martin. 1985. Probabilistic counting algorithms for data base applications. J. Comput. System Sci. 31, 2 (1985), 182–209. https://doi.org/10.1016/0022-0000(85)90041-8
[26] Yossi Gilad, Rotem Hemo, Silvio Micali, Georgios Vlachos, and Nickolai Zeldovich. 2017. Algorand: Scaling Byzantine Agreements for Cryptocurrencies. In Proc. Symposium on Operating Systems Principles (SOSP). 51–68.
[27] Solomon W. Golomb. 1966. Run-length encodings, determining explicit form of Huffman coding when applied to geometric distribution. EEE Trans Info Theory 12, 3 (1966), 399–401.
[28] M.T. Goodrich and M. Mitzenmacher. 2011. Invertible bloom lookup tables. In Conf. on Comm., Control, and Computing. 792–799.
[29] Adam Kirsch and Michael Mitzenmacher. 2006. Less Hashing, Same Performance: Building a Better Bloom Filter. In Algorithms – ESA 2006, Yossi Azar and Thomas Erlebach (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 456–467.
[30] Eleftherios Kokoris Kogias, Philipp Jovanovic, Nicolas Gailly, Ismail Khoffi, Linus Gasser, and Bryan Ford. 2016. Enhancing Bitcoin Security and Performance with Strong Consistency via Collective Signing. In Proc. USENIX Security Symposium. 279–296.
[31] E. Kokoris-Kogias, P. Jovanovic, L. Gasser, N. Gailly, E. Syta, and B. Ford. 2018. OmniLedger: A Secure, Scale-Out, Decentralized Ledger via Sharding. In Proc. IEEE Symposium on Security and Privacy. 583–598.
[32] James Larisch, David Choffnes, Dave Levin, Bruce M Maggs, Alan Mislove, and Christo Wilson. 2017. Crlite: A scalable system for pushing all TLS revocations to all browsers. In Security and Privacy (SP), 2017 IEEE Symposium on. IEEE, 539–556.
[33] Yoad Lewenberg, Yonatan Sompolinsky, and Aviv Zohar. 2015. Inclusive blockchain protocols. In Proc. International Conference on Financial Cryptography and Data Security. 528–547.
[34] E. R. Love. 1980. Some Logarithm Inequalities. The Mathematical Gazette (The Mathematical Association) 63, 427 (https://www.jstor.org/stable/3615890 1980), 55–57.
[35] Lailong Luo, Deke Guo, Richard TB Ma, Ori Rottenstreich, and Xueshan Luo. 2018. Optimizing Bloom Filter: Challenges, Solutions, and Comparisons. arXiv preprint arXiv:1804.04777 (2018).
[36] Ralph C. Merkle. 1988. A Digital Signature Based on a Conventional Encryption Function. In Advances in Cryptology — CRYPTO ’87, Carl Pomerance (Ed.). Springer Berlin Heidelberg, Berlin, Heidelberg, 369–378.
[37] Yaron Minsky, Ari Trachtenberg, and Richard Zippel. 2003. Set reconciliation with nearly optimal communication complexity. IEEE Transactions on Information Theory 49, 9 (2003), 2213–2218.
[38] Michael Mitzenmacher and Rasmus Pagh. 2017. Simple multi-party set reconciliation. Distributed Computing (23 Oct 2017).
[39] Michael Mitzenmacher and Eli Upfal. 2005. Probability and Computing: Randomized Algorithms and Probabilistic Analysis. Cambridge University Press. 61–89 pages. https://doi.org/10.1017/CBO9780511813603.005
[40] Michael Molloy. 2004. The Pure Literal Rule Threshold and Cores in Random Hypergraphs. In Proceedings of the Fifteenth Annual ACM-SIAM Symposium on Discrete Algorithms (SODA ’04). Society for Industrial and Applied Mathematics, Philadelphia, PA, USA, 672–681. http://dl.acm.org/citation.cfm?id=982792.982896
[41] Bitcoin: A Peer-to-Peer Electronic Cash System. (May 2009).
[42] Salvatore Pontarelli, Pedro Reviriego, and Michael Mitzenmacher. 2014. Improving the performance of Invertible Bloom Lookup Tables. Inform. Process. Lett. 114, 4 (2014), 185–191. https://doi.org/10.1016/j.ipl.2013.11.015
[43] Alexander Rucker. 2017. An Efficient PGP Keyserver without Prior Context. (2017).
[44] Stephen B. Seidman. 1983. Network structure and minimum degree. Social Networks 5, 3 (1983), 269–287. https://doi.org/10.1016/0378-8733(83)90028-X
[45] Yonatan Sompolinsky and Aviv Zohar. 2015. Secure high-rate transaction processing in Bitcoin. Financial Cryptography and Data Security (2015).
[46] Andrea Suisani, Andrew Clifford, Andrew Stone, Erik Beijnoff, Peter Rizun, Peter Tschipper, Alexandra Fedorova, Chen Feng, Victoria Lemieux, and Stefan Matthews. 2017. Measuring maximum sustained transaction throughput on a global network of Bitcoin nodes. https://scalingbitcoin.org/stanford2017/Day1/Stanford_2017.pptx.pdf. In Proc. Scaling Bitcoin.
[47] S. Tarkoma, C. E. Rothenberg, and E. Lagerspetz. 2012. Theory and Practice of Bloom Filters for Distributed Systems. IEEE Communications Surveys Tutorials 14, 1 (First 2012), 131–155. https://doi.org/10.1109/SURV.2011.031611.00024
[48] Benefits of LTOR in block entropy encoding. https://medium.com/@j_73307/benefits-of-ltor-in-block-entropy-encoding-or-8d5b77cc2ab0 (September 2018).
[49] BUIP010 Xtreme Thinblocks. https://bitco.in/forum/threads/buip010-passed-xtreme-thinblocks.774/ (Jan 2016).
[50] Ethereum: A Secure Decentralised Generalised Transaction Ledger. https://ethereum.github.io/yellowpaper/paper.pdf (June 2018).
[51] Minisketch: a library for BCH-based set reconciliation. https://github.com/sipa/minisketch/blob/master/doc/math.md (2018).

### A. Theorems from Section 3.3

For completeness, we provide the proof of a well-known version of Chernoff bounds that appears commonly in lecture notes but not in any formal reference to our knowledge.

**Lemma 1:**
Let \( A \) be the sum of \( i \) independent Bernoulli trials \( A_1, \ldots, A_i \), with mean \( \mu = E[A] \). Then for \( \delta > 0 \):

\[ \Pr[A \geq (1 + \delta)\mu] \leq \exp\left(\mu \left(\delta - (1 + \delta) \ln(1 + \delta)\right)\right) \]

Above, we rely on the inequality \( \ln(1 + x) \geq \frac{2x}{2 + x} \) for \( x > 0 \) (see [34]), and that \( e^{a-b} \leq e^{a-c} \) when \( b \geq c \).

**Theorem 1:**
Let \( m \) be the size of a mempool that contains all \( n \) transactions from a block. If \( a \) is the number of false positives that result from passing the mempool through Bloom filter \( S \) with false positive rate \( f_S \), then \( a^* \geq a \) with:

\[ a^* = m \cdot f_S \]

This ensures that the false positive rate is bounded and predictable.