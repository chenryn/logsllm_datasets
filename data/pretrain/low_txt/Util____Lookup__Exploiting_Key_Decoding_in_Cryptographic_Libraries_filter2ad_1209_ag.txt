### Out-of-Order Execution
In *USENIX Security Symposium*. USENIX Association, 991–1008.

### LVI: Hijacking Transient Execution through Microarchitectural Load Value Injection
**Authors:** Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lipp, Marina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss, and Frank Piessens.  
**Year:** 2020  
**Conference:** IEEE Symposium on Security and Privacy. IEEE, 54–72.

### SGX-Step: A Practical Attack Framework for Precise Enclave Execution Control
**Authors:** Jo Van Bulck, Frank Piessens, and Raoul Strackx.  
**Year:** 2017  
**Conference:** SysTEX@SOSP. ACM, 4:1–4:6.

### Nemesis: Studying Microarchitectural Timing Leaks in Rudimentary CPU Interrupt Logic
**Authors:** Jo Van Bulck, Frank Piessens, and Raoul Strackx.  
**Year:** 2018  
**Conference:** CCS. ACM, 178–195.

### SgxPectre: Stealing Intel Secrets From SGX Enclaves via Speculative Execution
**Authors:** Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and Ten-Hwang Lai.  
**Year:** 2020  
**Journal:** IEEE Secur. Priv. 18, 3 (2020), 28–37.

### Small Solutions to Polynomial Equations, and Low Exponent RSA Vulnerabilities
**Author:** Don Coppersmith.  
**Year:** 1997  
**Journal:** J. Cryptol. 10, 4 (1997), 233–260.

### Intel® SGX Explained
**Authors:** Victor Costan and Srinivas Devadas.  
**Year:** 2016  
**Link:** https://eprint.iacr.org/2016/086.pdf

### CacheQuote: Efficiently Recovering Long-term Secrets of SGX EPID via Cache Attacks
**Authors:** Fergus Dall, Gabrielle De Micheli, Thomas Eisenbarth, Daniel Genkin, Nadia Heninger, Ahmad Moghimi, and Yuval Yarom.  
**Year:** 2018  
**Journal:** IACR Trans. Cryptogr. Hardw. Embed. Syst. 2018, 2 (2018), 171–191.

### CacheAudit: A Tool for the Static Analysis of Cache Side Channels
**Authors:** Goran Doychev, Boris Köpf, Laurent Mauborgne, and Jan Reineke.  
**Year:** 2015  
**Journal:** ACM Trans. Inf. Syst. Secur. 18, 1 (2015), 4:1–4:32.

### Secret Network
**Organization:** Enigma.  
**Accessed:** 2021  
**Link:** https://scrt.network/

### Secret Network - Deployment
**Organization:** Enigma.  
**Accessed:** 2021  
**Link:** https://github.com/enigmampc/SecretNetwork/blob/master/deployment/dockerfiles/base.Dockerfile

### Certified Side Channels
**Authors:** Cesar Pereida García, Sohaib ul Hassan, Nicola Tuveri, Iaroslav Gridin, Alejandro Cabrera Aldaya, and Billy Bob Brumley.  
**Year:** 2020  
**Conference:** USENIX Security Symposium. USENIX Association, 2021–2038.

### GNU Nettle: a low-level cryptographic library
**Accessed:** 2020  
**Link:** https://git.lysator.liu.se/nettle/nettle

### Translation Leak-aside Buffer: Defeating Cache Side-channel Protections with TLB Attacks
**Authors:** Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.  
**Year:** 2018  
**Conference:** USENIX Security Symposium. USENIX Association, 955–972.

### Flush+Flush: a fast and stealthy cache attack
**Authors:** Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard.  
**Year:** 2016  
**Conference:** In Detection of Intrusions and Malware, and Vulnerability Assessment. Springer.

### Memory Encryption for General-Purpose Processors
**Author:** Shay Gueron.  
**Year:** 2016  
**Journal:** IEEE Secur. Priv. 14, 6 (2016), 54–62.

### Correcting Errors in RSA Private Keys
**Authors:** Wilko Henecka, Alexander May, and Alexander Meurer.  
**Year:** 2010  
**Conference:** CRYPTO (Lecture Notes in Computer Science), Vol. 6223. Springer, 351–369.

### Reconstructing RSA Private Keys from Random Key Bits
**Authors:** Nadia Heninger and Hovav Shacham.  
**Year:** 2009  
**Conference:** CRYPTO (Lecture Notes in Computer Science), Vol. 5677. Springer, 1–17.

### Using innovative instructions to create trustworthy software solutions
**Authors:** Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan del Cuvillo.  
**Year:** 2013  
**Conference:** HASP@ISCA. ACM, 11.

### Finding Small Roots of Univariate Modular Equations Revisited
**Author:** Nick Howgrave-Graham.  
**Year:** 1997  
**Conference:** IMACC (Lecture Notes in Computer Science), Vol. 1355. Springer, 131–142.

### Cache Attacks Enable Bulk Key Recovery on the Cloud
**Authors:** Mehmet Sinan Inci, Berk Gülmezoglu, Gorka Irazoqui, Thomas Eisenbarth, and Berk Sunar.  
**Year:** 2016  
**Conference:** CHES (Lecture Notes in Computer Science), Vol. 9813. Springer, 368–388.

### L1 Terminal Fault
**Organization:** Intel.  
**Year:** 2018  
**Link:** https://software.intel.com/security-software-guidance/deep-dives/deep-dive-intel-analysis-l1-terminal-fault

### Intel® Processors Load Value Injection Advisory - INTEL-SA-00334
**Organization:** Intel.  
**Year:** 2020  
**Link:** https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00334.html

### Load Value Injection
**Organization:** Intel.  
**Accessed:** 2021  
**Link:** https://software.intel.com/content/www/us/en/develop/articles/software-security-guidance/technical-documentation/load-value-injection.html

### Intel® Software Guard Extensions (Intel® SGX) SDK for Linux OS - Developer Reference
**Organization:** Intel®.  
**Year:** 2020  
**Revision:** 2.9

### X.680: ASN.1 specification
**Organization:** ITU.  
**Accessed:** 2020  
**Link:** https://www.itu.int/rec/T-REC-X.680/en

### RFC 5208 - Public-Key Cryptography Standards (PKCS) #8: Private-Key Information Syntax Specification Version 1.2
**Authors:** B. Kaliski and EMC.  
**Year:** 2008  
**Link:** https://tools.ietf.org/html/rfc5208

### Spectre attacks: exploiting speculative execution
**Authors:** Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas, Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz, and Yuval Yarom.  
**Year:** 2020  
**Journal:** Commun. ACM 63, 7 (2020), 93–101.

### Breaking Ciphers with COPACOBANA - A Cost-Optimized Parallel Code Breaker
**Authors:** Sandeep S. Kumar, Christof Paar, Jan Pelzl, Gerd Pfeiffer, and Manfred Schimmler.  
**Year:** 2006  
**Conference:** CHES (Lecture Notes in Computer Science), Vol. 4249. Springer, 101–118.

### Inferring Fine-grained Control Flow Inside SGX Enclaves with Branch Shadowing
**Authors:** Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hyesoon Kim, and Marcus Peinado.  
**Year:** 2017  
**Conference:** USENIX Security Symposium. USENIX Association, 557–574.

### libsodium
**Accessed:** 2021  
**Link:** https://github.com/jedisct1/libsodium/

### Meltdown: reading kernel memory from user space
**Authors:** Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom, Mike Hamburg, and Raoul Strackx.  
**Year:** 2020  
**Journal:** Commun. ACM 63, 6 (2020), 46–56.

### Last-Level Cache Side-Channel Attacks are Practical
**Authors:** Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee.  
**Year:** 2015  
**Conference:** IEEE Symposium on Security and Privacy. IEEE Computer Society, 605–622.

### New RSA vulnerabilities using lattice reduction methods
**Author:** Alexander May.  
**Year:** 2003  
**Type:** Ph.D. Dissertation. University of Paderborn.

### Using LLL-Reduction for Solving RSA and Factorization Problems
**Author:** Alexander May.  
**Year:** 2010  
**Book:** The LLL Algorithm. Springer, 315–348.

### mbed TLS
**Accessed:** 2021  
**Link:** https://github.com/ARMmbed/mbedtls

### Innovative instructions and software model for isolated execution
**Authors:** Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V. Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R. Savagaonkar.  
**Year:** 2013  
**Conference:** HASP@ISCA. ACM, 10.

### Cryptography, CryptoAPI, and CAPICOM
**Organization:** Microsoft.  
**Accessed:** 2021  
**Link:** https://docs.microsoft.com/en-us/windows/win32/seccrypto/cryptography--cryptoapi--and-capicom

### FIPS 140-2 Validation
**Organization:** Microsoft.  
**Accessed:** 2021  
**Link:** https://docs.microsoft.com/en-us/windows/security/threat-protection/fips-140-validation

### CacheZoom: How SGX Amplifies the Power of Cache Attacks
**Authors:** Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth.  
**Year:** 2017  
**Conference:** CHES (Lecture Notes in Computer Science), Vol. 10529. Springer, 69–90.

### CopyCat: Controlled Instruction-Level Attacks on Enclaves for Maximal Key Extraction
**Authors:** Daniel Moghimi, Jo Van Bulck, Nadia Heninger, Frank Piessens, and Berk Sunar.  
**Year:** 2020  
**Preprint:** CoRR abs/2002.08437

### Medusa: Microarchitectural Data Leakage via Automated Attack Synthesis
**Authors:** Daniel Moghimi, Moritz Lipp, Berk Sunar, and Michael Schwarz.  
**Year:** 2020  
**Conference:** USENIX Security Symposium. USENIX Association, 1427–1444.

### Nimbus-JOSE-JWT
**Accessed:** 2021  
**Link:** https://bitbucket.org/connect2id/nimbus-jose-jwt

### NSS
**Accessed:** 2020  
**Link:** https://hg.mozilla.org/projects/nss

### OpenSSL: Cryptography and SSL/TLS Toolkit
**Accessed:** 2021  
**Link:** https://github.com/openssl/openssl

### Cache Attacks and Countermeasures: The Case of AES
**Authors:** Dag Arne Osvik, Adi Shamir, and Eran Tromer.  
**Year:** 2006  
**Conference:** CT-RSA. Springer, Berlin, Heidelberg, 1–20.

### A Coding-Theoretic Approach to Recovering Noisy RSA Keys
**Authors:** Kenneth G. Paterson, Antigoni Polychroniadou, and Dale L. Sibborn.  
**Year:** 2012  
**Conference:** ASIACRYPT (Lecture Notes in Computer Science), Vol. 7658. Springer, 386–403.

### Cache missing for fun and profit
**Author:** Colin Percival.  
**Year:** 2005

### Crosstalk: Speculative data leaks across cores are real
**Authors:** Hany Ragab, Alyssa Milburn, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.  
**Year:** 2021  
**Conference:** IEEE Symposium on Security and Privacy. IEEE, accepted.

### BSI project: Development of a secure crypto library
**Organizations:** Rohde & Schwarz Cybersecurity and Hackmanit GmbH.  
**Accessed:** 2020  
**Link:** https://www.bsi.bund.de/EN/Topics/Crypto/Cryptography/CryptoLibrary/crypto_library_node.html

### Rust SGX SDK
**Accessed:** 2021  
**Link:** https://github.com/apache/incubator-teaclave-sgx-sdk

### Supporting third party attestation for Intel® SGX with Intel® data center attestation primitives
**Authors:** Vinnie Scarlata, Simon Johnson, James Beaney, and Piotr Zmijewski.  
**Year:** 2018

### ZombieLoad: Cross-Privilege-Boundary Data Sampling
**Authors:** Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Stecklina, Thomas Prescher, and Daniel Gruss.  
**Year:** 2019  
**Conference:** CCS. ACM, 753–768.

### A Tool Kit for Partial Key Exposure Attacks on RSA
**Authors:** Atsushi Takayasu and Noboru Kunihiro.  
**Year:** 2017  
**Conference:** CT-RSA (Lecture Notes in Computer Science), Vol. 10159. Springer, 58–73.

### TaLoS: Efficient TLS Termination Inside SGX Enclaves for Existing Applications
**Accessed:** 2020  
**Link:** https://github.com/lsds/TaLoS

### Déjà Vu: Side-Channel Analysis of Mozilla’s NSS
**Authors:** Sohaib ul Hassan, Iaroslav Gridin, Ignacio M. Delgado-Lozano, Cesar Pereida García, Jesús-Javier Chi-Domínguez, Alejandro Cabrera Aldaya, and Billy Bob Brumley.  
**Year:** 2020  
**Conference:** CCS. ACM, 1887–1902.

### Theory and Practice of Finding Eviction Sets
**Authors:** Pepe Vila, Boris Köpf, and José F. Morales.  
**Year:** 2019  
**Conference:** IEEE Symposium on Security and Privacy. IEEE, 39–54.

### Big Numbers - Big Troubles: Systematically Analyzing Nonce Leakage in (EC)DSA Implementations
**Authors:** Samuel Weiser, David Schrammel, Lukas Bodner, and Raphael Spreitzer.  
**Year:** 2020  
**Conference:** USENIX Security Symposium. USENIX Association, 1767–1784.

### DATA - Differential Address Trace Analysis: Finding Address-based Side-Channels in Binaries
**Authors:** Samuel Weiser, Andreas Zankl, Raphael Spreitzer, Katja Miller, Stefan Mangard, and Georg Sigl.  
**Year:** 2018  
**Conference:** USENIX Security Symposium. USENIX Association, 603–620.

### MicroWalk: A Framework for Finding Side Channels in Binaries
**Authors:** Jan Wichelmann, Ahmad Moghimi, Thomas Eisenbarth, and Berk Sunar.  
**Year:** 2018  
**Conference:** ACSAC. ACM, 161–173.

### wolfSSL: Embedded TLS Library
**Accessed:** 2021  
**Link:** https://github.com/wolfSSL/wolfssl

### Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems
**Authors:** Yuanzhong Xu, Weidong Cui, and Marcus Peinado.  
**Year:** 2015  
**Conference:** IEEE Symposium on Security and Privacy. IEEE Computer Society, 640–656.

### FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack
**Authors:** Yuval Yarom and Katrina Falkner.  
**Year:** 2014  
**Conference:** USENIX Security Symposium. USENIX Association, 719–732.

### CacheBleed: a timing attack on OpenSSL constant-time RSA
**Authors:** Yuval Yarom, Daniel Genkin, and Nadia Heninger.  
**Year:** 2017  
**Journal:** J. Cryptogr. Eng. 7, 2 (2017), 99–112.

### Cross-VM side channels and their use to extract private keys
**Authors:** Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart.  
**Year:** 2012  
**Conference:** CCS. ACM, 305–316.

### Microarchitectural Data Sampling
**Organization:** Intel® Developer Zone.  
**Year:** 2019  
**Accessed:** 2020  
**Link:** https://software.intel.com/security-software-guidance/deep-dives/deep-dive-intel-analysis-microarchitectural-data-sampling

### Missing Parts from Section 5: Blockwise Knowledge

#### Blockwise Knowledge
We consider the situation where some blockwise knowledge about the secret key \( \text{sk}^* = (p^*, q^*, d^*, d_p^*, d_q^*) \) has been obtained. In the following, we focus on the first five variables and treat \(\text{sk}^*\) as a quintuple on the variables \( \text{Vars} = \{p, q, d, d_p, d_q\} \). To simplify notation, for \( v \in \text{Vars} \), we denote the corresponding entry in some key \(\text{sk}\) by \(\text{sk}[v]\).

We show in Section A.1 that integrating the last variable \( q^{-1}_p \) into the key-recovery approach does not directly give a usable linear equation in contrast to the other variables.

In the situation given by our attack, we do not have observations on single bits, but on blocks consisting of 6 bits, the length of a base64 symbol. In our model, we let \( b \in \mathbb{Z}_{>0} \) be the block-size. Without loss of generality, we assume that for each \( v \in \text{Vars} \), we have \( b \mid \langle \text{sk}^*[v] \rangle \) by zero-padding all variables, i.e., the length \(\langle \text{sk}^*[v] \rangle\) of each variable \( v \) in our secret key \(\text{sk}^*\) is a multiple of \( b \).

We denote the \( i \)-th bit of a bit-string \( x \) by \( x[i] \), i.e., the numerical value of \( x \) is given by \( \sum_{i=0}^{n-1} 2^i x[i] \). The \( j \)-th block \( \text{block}_j(x) \in \{0, \ldots, 2^b - 1\} \) of \( x \) is defined as the value of the bitstring in the interval \([j \cdot b, (j+1) \cdot b - 1]\), i.e., \( \text{block}_j(x) = \sum_{i=j \cdot b}^{(j+1) \cdot b - 1} 2^{i - j \cdot b} x[i] \).

In our attack, we make use of the fact that the possible values for \(\text{block}_j(x)\) are partitioned into different sets to model the different cache lines used in our attack. We consider a partition \(\text{part}\) of the set \(\{0, \ldots, 2^b - 1\}\), i.e., \(\text{part}\) is a set of sets \(\text{part}_1, \ldots, \text{part}_{|\text{part}|}\) such that \(\bigcup_{i=1}^{|\text{part}|} \text{part}_i = \{0, \ldots, 2^b - 1\}\) and \(\text{part}_i \cap \text{part}_{i'} = \emptyset\) for all \( i \neq i' \). An observation \(\text{obs}(\text{part})\) with regard to this partition \(\text{part}\) is a quintuple that contains for each variable \( v \in \text{Vars} \) a vector in \(\{1, \ldots, |\text{part}|\}^{\langle \text{sk}^*[v] \rangle / b}\). We denote the \( j \)-th entry of this vector by \(\text{obs}(\text{part})[\text{sk}^*[v]]_j\). We say that an observation \(\text{obs}(\text{part})\) is correct for a secret key \(\text{sk}^*\) if for all \( v \in \text{Vars} \) and all \( j \in \{0, \ldots, (\langle \text{sk}^*[v] \rangle / b) - 1\} \), we have \(\text{block}_j(\text{sk}^*[v]) \in \text{part}_{j'}\) with \( j' = \text{obs}(\text{part})[\text{sk}^*[v]]_j \) if and only if \(\text{block}_j(\text{sk}^*[v]) \in \text{part}_{j'}\).

#### Adapting the Algorithm
The main idea of the algorithm is to reconstruct the different bits of the secret key \(\text{sk}^*\) iteratively. We build up a set of candidates. Each candidate is a guess for the least significant bits of the true secret key \(\text{sk}^*\) compatible with our observation and the RSA equations. We start our algorithm by producing a single candidate \(\hat{\text{sk}}\) of depth 1, i.e., each variable only consists of a single bit. We then apply the expand operation on \(\hat{\text{sk}}\) to obtain two candidates \(\hat{\text{sk}}_1\) and \(\hat{\text{sk}}_2\) of depth 2 by using the RSA equations described by Heninger and Shacham [35]. Whenever a candidate has reached a depth of a multiple of \( b \), i.e., \( j \cdot b \) for some \( j \), we apply the check operation on this candidate to verify that the last produced block \(\text{block}_j(v)\) of each variable \( v \) is feasible under our observation. If this candidate does not fit our observation, we prune it. We repeat these operations until a target depth \( D \) is reached. All produced candidates of depth \( D \) are output. This target depth will be sufficient to reconstruct the remaining bits via the Coppersmith method [23, 37, 52].

Informally, the depth of a candidate is the number of bits each variable has (see below for details). Our algorithm performs these operations in a depth-first fashion (see Figure 7 in Section 5). We now give a more formal description of our algorithm. The expand operation uses a set of 4 modular equations on 5 variables, and the check operation compares the generated candidates to our observations.

#### Step 1: Setting Up Modular Equations
As a first step to set up our modular equations, we need to determine values \( k, k_p, \) and \( k_q \) such that:
- \( e \cdot \text{sk}^*[d] = k(N - \text{sk}^*[p] - \text{sk}^*[q] + 1) + 1 \)
- \( e \cdot \text{sk}^*[d_p] = k_p(\text{sk}^*[p] - 1) + 1 \)
- \( e \cdot \text{sk}^*[d_q] = k_q(\text{sk}^*[q] - 1) + 1 \)

We use the same technique as Heninger and Shacham [35] to obtain these values.

**Find \( k, k_p, \) and \( k_q \):** An argument by Boneh, Durfee, and Frankel [13]