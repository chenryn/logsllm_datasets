**SRE 模式在 DevOps 社区中的重要性**

Gene Kim, IT Revolution

以下内容摘自 Gene Kim、Jez Humble、John Willis 和 Patrick Debois 合著的《DevOps 手册》（O'Reilly，2016年）。

当 David Blank-Edelman 邀请我为 SRE 的知识体系及其对 DevOps 社区的影响撰写一章时，我毫不犹豫地接受了。尽管有些人可能认为 SRE 和 DevOps 是相互排斥的概念，但我坚信它们是相辅相成的。在我看来，SRE 对于构建运维社区、促进组织目标以及提高开发人员的工作效率具有不可估量的价值。正如谷歌 SRE 副总裁 Ben Treynor Sloss 在 2014 年 SREcon 大会上所言：“SRE 是由软件工程师组成的运维团队。”在这次演讲中，Treynor Sloss 引入了“错误预算”的概念，即组织首先确定可接受的故障率，然后根据此预算来优先处理非功能性需求，并决定如何审批部署和发布。

在编写《DevOps 手册》的过程中（与 Jez Humble、John Willis 和 Patrick Debois 共同合作），我发现许多我们热爱的 DevOps 实践其实源自谷歌。以下是三个我个人非常欣赏的模式，这些模式都可以追溯到 SRE 的知识体系，并且几乎任何组织都可以将其融入日常工作中。

### 模式 1：自动化测试的诞生

自动化测试解决了代码规模扩大带来的测试成本问题。Gary Gruver 曾指出，“没有自动化测试，随着代码量的增长，测试所需的时间和资金也会随之增加，这对任何技术组织来说都是不可持续的商业模式。”尽管现在谷歌已经形成了重视大规模自动测试的文化，但在 2005 年 Mike Bland 加入该公司时情况并非如此。当时，Google.com 的部署过程常常充满挑战，特别是对于负责 Google Web 服务器（GWS）的团队而言。

GWS 团队在 2000 年代中期面临着巨大的困难。作为一款处理所有针对谷歌主页及其他页面请求的 C++ 应用程序，GWS 的维护工作极为复杂。由于缺乏有效的测试机制，新加入团队的成员往往因不了解系统而感到恐惧，即便是经验丰富的开发者也担心自己的改动会导致问题。这种心理状态被称为“冒名顶替综合症”，指的是即使有外部证据证明其能力，个体仍会怀疑自己是否配得上成功。

为了解决这一问题，GWS 团队负责人 Bharat Mediratta 提倡采用自动化测试。他们设定了底线：所有更改必须附带自动化测试才能被接受。通过建立持续集成系统、监控测试覆盖率并确保其逐步提升，GWS 团队迅速成为了公司内最高效的团队之一。他们的成功促使整个组织开始推广自动化测试文化，最终形成了一支专门致力于提升自动化测试实践的非正式工程师小组——测试组。

如今，每当谷歌开发者提交代码时，都会自动运行数十万个测试套件。如果通过，则代码将被合并进主干，准备部署至生产环境。许多产品每小时或每天都会生成新的版本，并从中选择合适的进行发布；其他一些则采用了持续交付的方式。

这套系统之所以能够在谷歌顺利运行，得益于一种高度信任的文化氛围，在这里每个人都假设他人希望做好工作，并能够快速发现并解决问题。Eran Messeri 表示，“谷歌没有硬性的规定要求在多长时间内解决多少个项目的故障。相反，各团队之间相互尊重，共同遵守着一个不成文的协议，即无论如何都要保持部署管道畅通无阻。”

截至 2013 年，借助自动化测试和持续集成，超过四千个小团队得以高效协作，每月更新约 50% 的代码库。这使得谷歌成为全球生产力最高的技术公司之一。相关统计数据包括：

- 每天提交 40,000 次代码
- 每日执行 50,000 次集成（工作日甚至可达 90,000 次）
- 运行 120,000 个自动化测试套件
- 每天处理 75,000,000 个测试用例
- 超过 100 名工程师专注于测试工程、持续集成及发布工具的研发（占研发总人数的 0.5%）

### 模式 2：启动与移交审查流程

即便开发人员能够在类似生产的环境中编写和运行代码，实际投产过程中仍可能出现灾难性的结果。这是因为运维人员通常在软件开发生命周期较晚阶段才介入，导致难以维护的生产软件。一位匿名运维工程师曾抱怨道，“我们团队中的大多数系统管理员只能坚持六个月。生产环境总是处于混乱之中，应用部署极其痛苦。”

为了避免这种情况，可以参考谷歌的做法，让开发小组在获得集中化运维支持前自行管理其服务。为了防止有问题的服务进入生产环境并引发组织风险，我们需要定义一套启动标准，确保服务达到一定水平后才能面向真实用户开放。此外，运维工程师还应担任顾问角色，协助产品团队做好上线准备。

通过制定详细的发布指南，我们可以确保每个团队都能从组织内部积累的经验中受益。这些指南可能涵盖以下几个方面：
- 缺陷数量及严重程度
- 应用程序是否按设计运行
- 警报类型与频率
- 监控覆盖范围
- 系统架构的灵活性
- 部署流程的自动化程度
- 生产环境的隔离措施

以上两种模式不仅体现了 SRE 与 DevOps 之间的紧密联系，也为其他企业提供了宝贵的实践经验。