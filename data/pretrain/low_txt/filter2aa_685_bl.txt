### Index

#### S
- **Statements, splitting**: 24
- **Static keyword**: 265
- **Static linking vs. dynamic linking**: 227–228
- **Static type systems**: 8
- **staticExec procedure**: 262
- **staticRead procedure**: 262
- **Stats type**: 169–170
- **stdin variable**: 66
- **StmtList node**: 264, 277
- **Storage duration**: 232
- **Storing data in databases**:
  - Setting up databases: 192–194
  - Setting up types: 190–192
  - Testing databases: 198–200
- **Defining storage**: 30–33
- **Different versions of single package**: 147–148
- **Streams, reading data from**: 66–68
- **String formatting operator**: 201
- **String type**: 26, 29–30
- **Stropping**: 23
- **struct tm type**: 232
- **Structural typing**: 50
- **Structures of data**: 111–117
  - Modules: 117
  - Sets module: 114–115
  - Tables module: 112–114
- **strutils module**: 8, 18, 30
- **Style insensitive**: 6, 8, 32
- **Subroutines**: 16, 33
- **Subscribing, Twitter**: 185
- **Substitution, of parameters in templates**: 257–258
- **substr procedure**: 110
- **Surname argument**: 37
- **Switch statements**: 44
- **Synchronous execution**: 85–86
- **Syntax**:
  - Abstract syntax trees: 262–265
  - Comments: 25
  - Indentation: 23–24
  - Keywords: 23
- **System module**: 26, 42, 110, 127
- **system.cmp procedure**: 116
- **System-level package managers**: 129

#### T
- **Tables module**: 111–114, 127
- **Tags**: 134
- **tailDir procedure**: 119
- **Target architecture, Nim and C compiler disagree on**: 289
- **Task**: 151
- **TCP sockets**: 82
- **Telnet application**: 91
- **Templates**: 254–260
  - Hygiene: 259–260
  - Parameter substitution in: 257–258
  - Passing code blocks to: 256–257
- **Testing**:
  - Configurators: 278
  - New IDEs: 287–289
  - Server without clients: 91–92
- **Thread module**: 111
- **Threadpool modules**: 156–159
  - Defined: 157
  - Executing: 155–156
  - Retrieving return values from FlowVar types: 158–159
  - Using spawn with: 157–158
- **Threads**: 153–159
  - Exceptions in: 159
  - GC (garbage collector) safety: 153–156
  - Modules: 153–156
  - Sending and receiving messages between, using channels: 176–178
  - Using pools: 156–159
    - Defined: 157
    - Retrieving return values from FlowVar types: 158–159
    - Using spawn with: 157–158
- **Time command**: 172
- **time procedure**: 231
- **TimeInfo object**: 191, 213
- **TimeInterval object**: 213
- **time_t type**: 232
- **Tokens**: 170
- **toLowerAscii**: 124
- **Top-level statements**: 288
- **toString parameter**: 203, 207
- **toUpper procedure**: 8
- **toUpperAscii**: 124
- **Transferring data**:
  - Asynchronously: 91–99
    - Adding network functionality to client: 95–98
    - Creating new Client instance to hold data about client: 92
    - Final results of: 98–99
    - Processing client messages: 92–95
    - Sending messages to other clients: 95
    - Testing server without client: 91–92
  - Using sockets: 79–99
    - Asynchronous I/O (input/output): 83–91
    - Asynchronously: 91–99
- **Transport protocol**: 60
- **Triple-quoted string literals**: 30
- **Troubleshooting**: 289–290
  - Could not load DLL: 289–290
  - Nim and C compiler disagree on target architecture: 289
  - Nim command not found: 289
- **try keyword**: 48
- **try statement**: 47–48
- **tryRecv procedure**: 177
- **Tuple types**: 50–51
- **Tuple unpacking**: 51, 92
- **Tweeter, architecture of**: 185–186
- **Twitter clones, building**:
  - Architecture of web applications: 181–186
  - Deploying web applications: 219–221
  - Developing controllers: 210–219
  - Developing web application view: 200–210
  - Getting started: 186–189
  - Storing data in databases: 189–200
- **Type classes**: 253
- **Type definitions**: 169, 252
- **type keyword**: 113
- **Type mismatch error**: 251
- **Type section**: 49, 53
- **Type systems**: 8–9
- **Typed arguments**: 258
- **typedesc parameter**: 267
- **Types**:
  - Compatibility of: 231
  - Wrapping:
    - In C programming language: 231–234
    - In SDL (Simple DirectMedia Layer): 237–238
  - See also basic types; collection types; object types; user-defined types

#### U
- **UDP sockets**: 82
- **UFCS (Uniform Function Call Syntax)**: 17, 107
- **Uint32 type**: 238
- **Underscore character**: 8, 32, 51, 171
- **Unicode characters**: 32
- **unicode module**: 28–29, 124
- **unindent procedure**: 30
- **UNIX time**: 194
- **Unsigned integer**: 27
- **Untyped arguments**: 258
- **User routes, implementing**: 216–217
- **User type**: 191
- **User view, developing**: 204–206
- **User-defined types**: 49–52
  - Enums: 51–52
  - Objects: 49–50
  - Tuples: 50–51
- **userLogin procedure**: 217
- **Users, retrieving command-line parameters supplied by**: 63–65
- **utils module**: 140

#### V
- **Values, returning from procedures**: 35–36
- **var keyword**: 31, 33
- **Variables**:
  - Defining: 30–33
  - Overview: 115
- **varName variable**: 259
- **--ver flag**: 131, 134
- **ver variable**: 121
- **Verifying installation of compiler**: 286
- **Version field**: 138
- **Version key**: 147
- **Versions**:
  - Numbers for, giving meaning to: 147
  - Storing different versions of single package: 147–148
- **View**:
  - Of front page: 207–210
  - Of user: 204–206
  - Of web applications: 200–210
- **VM (virtual machine)**: 15
- **void procedure**: 34

#### W
- **waitFor procedure**: 89
- **walkDir iterator**: 119
- **walkFiles iterator**: 45
- **Web applications**:
  - Architecture of: 181–186
  - Architecture of Tweeter: 185–186
  - Routing in microframeworks: 183–184
  - Deploying: 219–221
    - Configuring Jester microframework: 219
    - Setting up reverse proxy: 219–221
- **Web pages, retrieving**: 127
- **WhatsApp**: 58
- **when statement**: 121
- **WHERE clause**: 198
- **While loop**: 44, 96, 163
- **While statement**: 67
- **Whitespace character**: 163
- **Wikipedia page-counts files, processing each line**: 164–167
  - Finding most popular article: 166–167
  - Format:
    - Parsing: 161–164
    - Understanding: 160–161
- **Windows symbol**: 121
- **Wrappers**:
  - Canvas API: 246–247
  - SDL (Simple DirectMedia Layer):
    - Creating for libraries: 235–236
    - Using: 240–242
- **Wrapping**:
  - C programming language procedures: 228–230
  - C programming language types: 231–234
  - Canvas elements: 243–246
  - External C libraries: 234–242
    - Creating wrappers for SDL library: 235–236
    - Downloading SDL library: 235
    - Dynamic linking: 236–237
    - Using SDL wrappers: 240–242
    - Wrapping SDL procedures: 238–240
    - Wrapping SDL types: 237–238
- **writeFile procedure**: 118
- **Writing**:
  - .nimble files: 141–144
  - Chat applications:
    - First steps: 61–62
    - Implementing protocols: 70–79
    - Retrieving input in client components: 63–70
    - Transferring data using sockets: 79–99

#### X
- **XML parsers**: 122
- **xmldom module**: 122
- **xmltree module**: 122, 203

#### Y
- **Yum-based distributions**: 284

### Common Infix Operations (Highest Precedence First)
- **\***: Multiplication
- **/**: Division (returns float)
- **div**: Division (returns integer)
- **mod**: Modulus
- **shl**: Bit shift left
- **shr**: Bit shift right
- **%**: String formatting
- **+**: Addition
- **-**: Subtraction
- **&**: Concatenation
- **..**: Constructs a slice
- **==, !=, >, <, >=, <=**: Boolean comparisons
- **in, notin**: Determines whether a value is within a container
- **is, isnot**: Compile-time type equivalence
- **of**: Run-time instance of type check
- **and**: Bitwise and boolean and operation

### Collections
- **string**: "Hello World"
- **seq[T]**: @[1, 2, 3, 4]
- **Table[T]**: `import tables; initTable({"K": "V"})`

### Examples
- **Adding to a string**: `str.add("Hi")`
- **Adding to a list**: `list.add(21)`
- **Adding to a table**: `table["Key"] = 3.5`
- **Deleting from a list**: `list.del(2); list.delete(2)`
- **Deleting from a table**: `table.del("Key")`
- **Accessing a character in a string**: `"Hi"[0]` -> 'H'
- **Accessing an element in a list**: `@[1,2][0]` -> 1
- **Accessing a value in a table**: `table["Key"]` -> 3.5
- **Accessing the last character in a string**: `"Hi"[^1]` -> 'i'
- **Accessing the last element in a list**: `@[1,2][^1]` -> 2
- **Checking if a value is in a table**: `"b" in table` -> false
- **Slicing a string**: `"Hey"[0..1]` -> "He"
- **Slicing a list**: `@[1,2,3][0..1]` -> 1,2
- **Slicing a string from the second character to the end**: `"Hey"[1..^1]` -> "ey"
- **Slicing a list from the second element to the end**: `@[1,2,3][1..^1]` -> 2,3

---

### About the Book

**Nim in Action** is your guide to application development in Nim. You’ll learn how Nim compares to other languages in style and performance, master its structure and syntax, and discover unique features. By carefully walking through a Twitter clone and other real-world examples, you’ll see just how Nim can be used every day while also learning how to tackle concurrency, package finished applications, and interface with other languages. With the best practices and rich examples in this book, you’ll be able to start using Nim today.

**What’s Inside:**
- Language features and implementation
- Nimble package manager
- Asynchronous I/O
- Interfacing with C and JavaScript
- Metaprogramming

**For developers comfortable with mainstream languages like Java, Python, C++, or C#.**

**Dominik Picheta** is one of the principal developers of Nim and author of the Nimble package manager.

**To download their free eBook in PDF, ePub, and Kindle formats, owners of this book should visit [www.manning.com/books/nim-in-action](www.manning.com/books/nim-in-action).**

**$49.99 / Can $65.99 [INCLUDING eBOOK]**

**Nim IN ACTION**
**PROGRAMMING LANGUAGES**
**M A N N I N G**

**“A great resource for an incredibly powerful language.” —Jonathan Rioux, TD Insurance**

**“Gives readers a solid foundation in Nim, a robust and flexible language suitable for a variety of projects.” —Robert Walsh, Excalibur Solutions**

**“A great job breaking down the language. This book will no doubt become the de facto learning guide in the Nim space.” —Peter J. Hampton, Ulster University**

**“A goldmine for Nim programmers; great insights for any general programmer.” —Cosimo Attanasi, ER Sistemi**

**SEE INSERT**