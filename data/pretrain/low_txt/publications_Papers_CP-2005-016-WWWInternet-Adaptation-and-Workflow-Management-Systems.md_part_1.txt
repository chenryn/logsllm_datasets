**Title: Adaptation and Workflow Management Systems**

**Authors:**
- Jorge Cardoso
  - Departamento de Matemática e Engenharias, Universidade da Madeira, 9050-078 Funchal, Portugal
  - Email: [Email Address]
- Amit Sheth
  - LSDIS Lab, Department of Computer Science, University of Georgia, Athens, GA 30602, USA
  - Email: [Email Address]

**Abstract:**
In today's business environment, companies of all sizes rely on Workflow Management Systems (WfMSs) to support their critical business processes. Ensuring that these systems continue to provide pre-established service levels in the face of disruptions is crucial. Current WfMS architectures, however, often lack adequate adaptation mechanisms. This paper introduces a comprehensive set of techniques to enhance the adaptability of WfMSs. We explore how workflow adaptation can be triggered, which strategies can be applied, and why dynamic changes are essential for effective adaptation. Our approach addresses both functional and operational aspects of adaptation. The proposed strategies are implemented and tested within the METEOR WfMS.

**Keywords:**
Workflow Management Systems, Adaptation, Quality of Service

**1. Introduction**
Workflow Management Systems (WfMSs) have become a fundamental technological infrastructure for managing business processes. These systems are used across various applications, such as insurance claims, bank loans, administrative procedures, and healthcare processes. The disruption of services provided by WfMSs can severely impact an organization's operations. For example, delays in processing insurance claims or medical treatments due to WfMS failures are unacceptable.

To mitigate such disruptions, adaptive procedures must be in place to ensure that WfMSs continue to meet operational requirements. The field of adaptation has gained significant interest as society becomes increasingly dependent on computer systems. This paper presents a multidimensional solution that enhances the adaptability of WfMSs. We consider both functional and operational adaptation. Functional adaptation is triggered when a workflow component ceases its activity, while operational adaptation occurs when tasks and workflows do not meet initial quality of service (QoS) requirements. The strategies presented are applicable to other distributed systems as well.

**2. The METEOR Workflow Management System**
The METEOR WfMS, developed at the LSDIS Lab (Department of Computer Science, University of Georgia, USA), in collaboration with industry and government R&D (Naval Research Laboratories, USA), and application partners (Medical College of Georgia, University of Georgia, USA), is a state-of-the-art system. METEOR includes design, monitoring, workflow repository, and enactment services. It leverages semantics and Web services to address the challenges of the semantic Web. The METEOR-S project, in collaboration with IBM TJ Watson Research Center, focuses on the complete lifecycle of semantic Web processes, including annotation, discovery, composition, and orchestration.

The ORBWork enactment service, a CORBA-based system, supports mission-critical enterprise applications with high scalability and robustness. It includes multilevel security mechanisms, interoperability standards, and modules for dynamic changes, exception handling, and QoS-based adaptation. This paper will focus on the issues related to these modules.

**3. METEOR’s Architecture**
Adaptation in distributed systems is complex due to the underlying infrastructures. Early architectural decisions are crucial for effective adaptation. We extend Worah and Sheth’s (1997) classification of WfMS architecture by adding a schema layer, resulting in a four-tier layered architecture: instance level, schema level, workflow level, and infrastructure level. Each level has a specific mission:

- **Infrastructure Level:** Includes CORBA servers, databases, operating systems, communication protocols, and hardware.
- **Workflow Level:** Comprises the enactment engine, monitor, and repository.
- **Schema Level:** Contains workflow schema definitions stored in a repository.
- **Instance Level:** Deals with workflow instances and application executions, where adaptation may occur if the design does not anticipate possible errors.

**4. Adaptation and Workflow Management Systems**
As Charles Darwin noted, adaptability is key to survival. A WfMS should be able to dynamically adapt to changing contexts and business settings. Our WfMS adaptation architecture (Fig. 1) includes the WfMS and its functional levels, event detection and forwarding, and event handling.

A typical adaptation scenario involves an event occurring at any functional level. The level where the event occurs attempts to restore consistency. If it cannot self-adapt, the event is forwarded to the workflow level, which tries to find a local solution. If no solution is found, the event is sent to the adaptation module, which uses specialized knowledge and algorithms to derive a solution. If a partial solution is found, it is forwarded for human involvement. Valid solutions are applied at the workflow level, and if necessary, dynamic changes are made at the instance level.

**4.1 Triggering Adaptation**
Adaptation strategies can be hard-coded into the WfMS, known as built-in strategies. While this provides ease of use, it lacks flexibility for customization. In METEOR, events are represented by exceptions, and the system architecture includes a hierarchy of components (Fig. 2). Each component has a handler for specific events, forming a competence hierarchy. The competence-driven exception handling strategy ensures that events are handled by the most competent component.

**4.2 Adaptation Strategies**
We present two runtime strategies to increase WfMS adaptability: exception handling and Quality of Service (QoS) management. Exception handling deals with functional errors, while QoS management addresses operational errors.

**4.2.1 Adaptation and Exception Handling**
Modeling exceptions in WfMSs is essential for handling deviations from planned behavior. METEOR includes a sophisticated exception-handling mechanism. During workflow execution, exceptions are propagated to a case-based reasoning (CBR) module, which derives an acceptable handler. The system can adapt to various types of exceptions, ensuring the smooth continuation of workflow processes.

**Conclusion**
This paper introduces a comprehensive set of techniques to enhance the adaptability of WfMSs, addressing both functional and operational aspects. The proposed strategies are implemented and tested within the METEOR WfMS, providing a robust framework for adapting to disruptions and maintaining service levels. Future work will focus on further refining these strategies and expanding their applicability to other distributed systems.

**References:**
- Bass, L., Clements, P., & Kazman, R. (1998). Software Architecture in Practice. Addison-Wesley.
- Casati, F. (1998). Exception Handling in Workflow Systems. IEEE Transactions on Knowledge and Data Engineering, 10(4), 560-574.
- Kochut, K., Sheth, A., & Miller, J. (1999). Competence-Driven Exception Handling in Workflow Systems. Proceedings of the 1st International Conference on Cooperative Information Systems, 1999.
- Luo, Z. (2000). Exception Handling in Workflow Management Systems. PhD Thesis, University of Georgia.
- Worah, S., & Sheth, A. (1997). Architectural Support for Flexible Workflow Management. Proceedings of the 3rd International Conference on Cooperative Information Systems, 1997.