# Proxy and Operation Execution
The proxy parses the parameters and executes the corresponding Publius operation. An HTML message indicating the success or failure of the operation is returned. If a retrieve operation is requested and successful, the requested document is displayed in a new web browser window.

# 5. Limitations and Threats
In this section, we discuss the limitations of Publius and how these limitations could be exploited by an adversary to censor published documents, disrupt normal Publius operations, or reveal the identity of an author. We also explore potential countermeasures for some of these attacks.

## 5.1 Share Deletion or Corruption
As described in Section 3.2, when a document is successfully published, a copy of the encrypted document and a share are stored on each of the \( n \) servers. Only one copy of the encrypted document and \( k \) shares are required to recover the original document.

If all \( n \) copies of the encrypted file are deleted, corrupted, or otherwise unretrievable, it becomes impossible to recover the original document. Similarly, if \( n - k + 1 \) shares are deleted, corrupted, or cannot be retrieved, it is impossible to recover the key. In either case, the published document is effectively censored. Increasing \( n \) or decreasing \( k \) makes it more difficult for an individual or group to censor a published document.

## 5.2 Update File Deletion or Corruption
As stated in Section 3.5, if a server receives a request for Publius content that has an associated update file, the URL contained in that file is sent back to the requesting proxy.

We describe three different attacks on the update file that an adversary, Mallory, can use to censor a published document. In these attacks, Mallory has read/write access to all files on a server hosting the Publius content \( P \), which he wishes to censor.

### Attack 1: No Associated Update File
If \( P \) does not have an associated update file (i.e., the author of \( P \) has not executed the Publius Update operation on \( P \)'s URL), Mallory could delete \( P \) from one server, but this does not censor the content because other servers still host it. Instead, Mallory wants to cause any request for \( P \) to result in the retrieval of a different document \( Q \) of his choosing. The Publius URL of \( Q \) is \( Q_{url} \). Mallory creates a file named "update" containing \( Q_{url} \) and places it in the directory associated with \( P \). Now, whenever a request for \( P \) is received by Mallory's server, \( Q_{url} \) is sent back. To succeed, Mallory needs to place the update file on every server holding \( P \). If the implementation of Publius only requires \( k \) shares to be downloaded, Mallory may not need to be as thorough. If the proxy receives \( k \) matching URLs, it will issue a browser redirect to that URL, effectively censoring \( P \) and replacing it with \( Q \). This motivates higher values for \( k \). The update flag described in Section 4.1 can combat this attack by refusing to accept update URLs if the flag is off.

### Attack 2: Valid Update File
If \( P \) has been updated and there exists an associated update file containing a valid Publius URL pointing to Publius Content \( U \), Mallory must corrupt the update file on \( n - k + 1 \) servers to censor the content. If Mallory can corrupt that many servers, he can censor any document. This motivates higher values for \( n \) and lower values for \( k \).

### Attack 3: Deletion of Update Files
If Mallory can delete the update files on all servers accessed by the client, he can effectively restore the Publius content to its previous state before the update. This motivates requiring clients to retrieve from all \( n \) servers before performing verification.

### Trade-offs
Requiring retrievers to download all \( n \) shares and \( n \) copies of the document favors censorship resistance over performance. Settling for only the first \( k \) shares opens the user up to a set of corrupt, collaborating servers. Higher values for \( k \) minimize this problem, but lower values of \( k \) require the adversary to corrupt more servers to censor documents. Thus, \( k \), the number of shares, and the number of copies of the page actually retrieved, must be chosen carefully.

## 5.3 Denial of Service Attacks
Publius, like all web services, is susceptible to denial of service (DoS) attacks. An adversary could use Publius to publish content until the disk space on all servers is full, affecting other applications running on the same server. We limit each publishing command to 100K. A better approach would be to charge for space.

An interesting approach is a CPU cycle-based payment scheme known as Hash Cash (http://www.cypherspace.org/~adam/hashcash/). This system requires the publisher to do some work before publishing, making it difficult to efficiently fill the server disk. The client requests a challenge string \( c \) and a number \( b \) from the server. The client must find another string \( s \) such that at least \( b \) bits of \( H(c \cdot s) \) match \( b \) bits of \( H(s) \), where \( H \) is a secure hash function like MD5 and "·" is the concatenation operator. The higher the value of \( b \), the more time the client requires to find a matching string. The client then sends \( s \) to the server along with the file to be stored. The server only stores the file if \( H(s) \) passes the \( b \) bit matching test on \( H(c \cdot s) \). Another scheme is to limit, based on client IP address, the amount of data that a client can store on a particular Publius server within a certain period. While not perfect, this raises the bar and requires the attacker to exert more effort. We have not implemented either of these protection mechanisms yet. Dwork and Naor in [8] describe several other CPU cycle-based payment schemes.

## 5.4 Threats to Publisher Anonymity
Although Publius was designed for anonymous publishing, there are several ways in which the identity of the publisher could be revealed:

- **Identifying Information**: If the publisher leaves identifying information in the published file, they are no longer anonymous.
- **Hyperlinks**: Publius does not anonymize all hyperlinks in a published HTML file. If a published HTML page contains hyperlinks back to the publisher’s web server, the publisher’s anonymity is compromised.
- **Network Eavesdropping**: An adversary eavesdropping on the network segment between the publisher and the Publius servers can determine the publisher’s identity.
- **Server Logs**: If a server hosting Publius content keeps a log of all incoming network connections, an adversary can examine the log to determine the publisher’s IP address. To protect against these attacks, a connection-based anonymity tool like Crowds should be used in conjunction with Publius.

## 5.5 “Rubber-Hose Cryptanalysis”
Unlike Anderson’s Eternity Service [2], Publius allows a publisher to delete a previously published document. An individual wishing to delete a document published with Publius must possess the document’s URL and password. An adversary who knows the publisher can apply “Rubber-Hose” cryptanalysis (threats, torture, blackmail, etc.) to force the publisher to delete the document or reveal the password. The adversary could also try to force the appropriate server administrators to delete the Publius content, but this can be very expensive or impractical if the content is distributed across servers in different countries or jurisdictions.

# 6. Future Work
Most modern browsers and proxies do not impose a 256-character limit on URL size. With this limit lifted, a fixed table of servers is no longer needed, as the Publius URL itself can contain the IP addresses of the servers on which the content is stored. There is essentially no limit to the number of hosting servers that can be stored in the Publius URL. The URL structure remains the same, with just the IP addresses added. The option and namei components of the URL remain for tamper checking and URL interpretation. We intend to use this URL format in future versions of Publius.

During the Publius publication process, the encrypted file, along with other information, is stored on the host servers. Krawczyk in [14] describes how to use Rabin’s information dispersal algorithm to reduce the size of the encrypted file stored on the host server. We plan to use this technique to reduce the storage needed on host servers.

# 7. Conclusions and Availability
In this paper, we have described Publius, a web-based anonymous publishing system resistant to censorship. Publius’s main contributions beyond previous anonymous publishing systems include an automatic tamper-checking mechanism, a method for updating or deleting anonymously published material, and methods for anonymously publishing mutually hyperlinked content. The current implementation of Publius consists of approximately 1,500 lines of Perl. The source code is freely available at http://www.cs.nyu.edu/~waldman/publius.html.

## Acknowledgements
We would like to thank Usenix for supporting this work. We also thank Adam Back, Ian Goldberg, Oscar Hernandez, Graydon Hoare, Benny Pinkus, Adam Shostack, Anton Stiglic, Alex Taler, and the anonymous reviewers for their helpful comments and recommendations.

## References
[1] A. V. Aho, J. E. Hopcroft, and J. D. Ullman. Data Structures And Algorithms. Addison-Wesley Publishing Company, 1983.

[2] R. J. Anderson. The eternity service. In Pragocrypt 1996, 1996. http://www.cl.cam.ac.uk/users/rja14/eternity/eternity.html.

[3] A. Back. The eternity service. Phrack Magazine, 7(51), 1997. http://www.cypherspace.org/adam/eternity/phrack.html.

[4] T. Benes. A distributed decentralised information storage and retrieval system. 1999. http://freenet.sourceforge.net/Freenet.ps.

[5] D. Chaum. Untraceable electronic mail, return addresses, and digital pseudonyms. Communications of the ACM, 24(2):84–88, 1981.

[6] Y. Chen, J. Edler, A. Goldberg, A. Gottlieb, S. Sobti, and P. N. Yianilos. A prototype implementation of archival intermemory. In Proc. ACM Digital Libraries. ACM, August 1999. http://www.intermemory.org/.

[7] I. Clark. The eternity service. 1998. http://www.kolej.mff.cuni.cz/eternity/.

[8] C. Dwork and M. Naor. Pricing via processing or combatting junk mail. In Advances in Cryptology—CRYPTO ’92, pages 139–147. Springer-Verlag, 1992.

[9] E. G. Gabber, P. B. Gibbons, D. M. Kristol, Y. Matias, and A. Mayer. Consistent, yet anonymous web access with LPWA. Communications of the ACM, 42(2):42–47, 1999.

[10] P. Gemmell and M. Sudan. Highly resilient correctors for polynomials. Information Processing Letters, 43:169–174, 1992.

[11] A. V. Goldberg and P. N. Yianilos. Towards and archival intermemory. In Proc. IEEE International Forum on Research and Technology Advances in Digital Libraries (ADL’98), pages 147–156. IEEE Computer Society, April 1998. http://www.intermemory.org/.

[12] I. Goldberg and D. Wagner. TAZ servers and the rewebber network: Enabling anonymous publishing on the world wide web. First Monday, 3, 1998. http://www.firstmonday.dk/issues/issue3_4/goldberg/index.html.

[13] Wendy M. Grossman. Wired, 3(12):172 –177 and 248–252, December 1995. http://www.wired.com/wired/archive/3.12/alt.scientology.war_pr.html.

[14] H. Krawczyk. Secret sharing made short. In Advances in Cryptology—CRYPTO ’93, pages 136–143. Springer-Verlag, 1993.

[15] R. Motwani and P. Raghavan. Randomized Algorithms. Cambridge University Press, 1995.

[16] Ron Newman. The church of scientology vs. the net. February 1998. http://www2.thecia.net/users/rnewman/scientology/home.html.

[17] U.S. Library of Congress. About the federalist papers. http://lcweb2.loc.gov/const/fed/abt_fedpapers.html.

[18] M. G. Reed, P. F. Syverson, and D. M. Goldschlag. Proxies for anonymous routing. In 12th Annual Computer Security Applications Conference, 1996. http://www.onion-router.net/Publications.html.

[19] Michael K. Reiter and Aviel D. Rubin. Crowds: Anonymity for web transactions. ACM Transactions on Information System Security, 1(1), April 1998.

[20] R. Rivest. The MD5 message digest algorithm. RFC 1321, April 1992.

[21] B. Schneier. Applied Cryptography. John Wiley and Sons, 1996.

[22] A. Shamir. How to share a secret. Communications of the ACM, 22:612–613, November 1979.