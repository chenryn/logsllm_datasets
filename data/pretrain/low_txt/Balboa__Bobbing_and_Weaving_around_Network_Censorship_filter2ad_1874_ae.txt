### Table 3: Performance Metrics for Balboa-Generated Traffic vs. Baseline

| **Latency (ms)** | **0** | **5 ± 1** | **5 ± 3** | **10 ± 1** | **10 ± 3** | **10 ± 5** | **30 ± 1** | **30 ± 3** | **30 ± 5** | **30 ± 10** |
|------------------|-------|-----------|-----------|------------|------------|------------|------------|------------|------------|--------------|
| **Accuracy**     | 0.96 ± 0.04 | 0.71 ± 0.08 | 0.66 ± 0.09 | 0.79 ± 0.08 | 0.70 ± 0.08 | 0.63 ± 0.09 | 0.86 ± 0.07 | 0.62 ± 0.09 | 0.62 ± 0.09 | 0.67 ± 0.08 |
| **Precision**    | 0.97 ± 0.05 | 0.74 ± 0.11 | 0.69 ± 0.12 | 0.81 ± 0.09 | 0.73 ± 0.10 | 0.67 ± 0.12 | 0.90 ± 0.08 | 0.65 ± 0.12 | 0.65 ± 0.12 | 0.71 ± 0.11 |
| **Recall**       | 0.95 ± 0.06 | 0.65 ± 0.13 | 0.58 ± 0.14 | 0.77 ± 0.12 | 0.64 ± 0.13 | 0.56 ± 0.14 | 0.82 ± 0.11 | 0.55 ± 0.14 | 0.55 ± 0.14 | 0.58 ± 0.13 |

(a) Firefox
| **Latency (ms)** | **0** | **5 ± 1** | **5 ± 3** | **10 ± 1** | **10 ± 3** | **10 ± 5** | **30 ± 1** | **30 ± 3** | **30 ± 5** | **30 ± 10** |
|------------------|-------|-----------|-----------|------------|------------|------------|------------|------------|------------|--------------|
| **Accuracy**     | 0.69 ± 0.01 | 0.67 ± 0.01 | 0.62 ± 0.01 | 0.57 ± 0.01 | 0.68 ± 0.01 | 0.71 ± 0.01 | 0.71 ± 0.01 | 0.68 ± 0.01 | 0.68 ± 0.01 | 0.67 ± 0.01 |
| **Precision**    | 0.68 ± 0.01 | 0.71 ± 0.01 | 0.71 ± 0.01 | 0.68 ± 0.01 | 0.68 ± 0.01 | 0.67 ± 0.01 | 0.71 ± 0.01 | 0.69 ± 0.01 | 0.63 ± 0.01 | 0.59 ± 0.01 |
| **Recall**       | 0.61 ± 0.01 | 0.64 ± 0.01 | 0.64 ± 0.01 | 0.61 ± 0.01 | 0.60 ± 0.01 | 0.58 ± 0.01 | 0.66 ± 0.02 | 0.62 ± 0.01 | 0.55 ± 0.02 | 0.49 ± 0.02 |

(b) curl

Table 3 presents the accuracy, precision, and recall of classifying Balboa-generated traffic versus baseline for various latency settings against different web clients (Firefox and curl). Values are given in “mean ± standard deviation” format.

### Context-Free Grammars and Mimicry Approaches

Context-free grammars can encode common network protocols like HTTP. The well-known "Parrot is Dead" paper [16] argues that such approaches are doomed to fail due to the difficulty of accurately mimicking a given protocol. Even tunneling approaches, as discussed below, face similar challenges.

### Tunneling Approaches

Tunneling approaches aim to avoid the weaknesses of mimicry by running the actual application under-the-hood. Examples include Freewave [17], DeltaShaper [3], and Castle [15]. However, several researchers have shown [14, 25, 26] that even these approaches are susceptible to distinguishing attacks due to differences in protocol distribution between the circumvention system and the underlying application. This weakness appears inherent due to the inability to perfectly mimic real-world application behavior or to know what such a "real-world distribution" is. Balboa aims to minimize this gap by allowing users to specify real-world application behavior as a parameter.

Concurrently with this work, Barradas et al. [5] introduced Protozoa, a tunneling approach using WebRTC as its communication medium. Protozoa shares similarities with Balboa, using rewriting to replace WebRTC traffic with user data. However, Protozoa is specific to WebRTC and requires modifications to the application source code, reducing flexibility as application versions change. It also does not replace the original video on the receiver side, potentially leaving it open to traffic analysis attacks.

### Traffic Manipulation Approaches

Traffic manipulation approaches, such as Geneva [6], have been successful at circumventing existing nation-state censors. However, their security model is fundamentally different and weaker than that of Balboa and other mimicry and tunneling tools. These approaches generally assume a weak censor using a firewall or deep packet inspection device, whereas Balboa considers a potentially active censor with more powerful capabilities.

### Destination Obfuscation

Destination obfuscation approaches, including Tor and refraction networking protocols [7, 20, 27], focus on hiding the destination website from a censor. They borrow from mimicry and tunneling literature to obfuscate the channel itself. For example, Tor uses a "pluggable transport" infrastructure for link obfuscation.

### Other Related Work

Several CRSs, such as meek [12], require a specific version of an application or need to mimic the TLS handshake. Frolov and Wustrow [13] showed that this mimicry is often easily identifiable due to cleartext header information in the initial Client Hello message of a TLS connection. To address this, they introduced uTLS, a tool for automatically mimicking existing TLS implementations.

Balboa avoids the need for a tool like uTLS by running the unmodified application and leaving the TLS handshake untouched. As long as the underlying protocol remains unchanged between versions, the application can be updated without affecting Balboa. Unlike tools like meek [12], Balboa does not need to come bundled with a particular version of an application.

### Acknowledgments

This material is based upon work supported by the United States Air Force and DARPA under Contract No. FA8750-19-C-0085. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the United States Air Force and DARPA. Distribution Statement "A" (Approved for Public Release, Distribution Unlimited).

### References

[1] Freedom on the net. https://www.freedomonthenet.org/explore-the-map?mapview=trend. Accessed February 10, 2020.
[2] The ICSI certificate notary. https://notary.icsi.berkeley.edu/. Accessed January 28, 2020.
[3] Diogo Barradas, Nuno Santos, and Luís Rodrigues. DeltaShaper: Enabling unobservable censorship-resistant TCP tunneling over videoconferencing streams. Privacy Enhancing Technologies, 2017(4):1–18, 2017.
[4] Diogo Barradas, Nuno Santos, and Luís Rodrigues. Effective detection of multimedia protocol tunneling using machine learning. In USENIX Security Symposium. USENIX, 2018.
[5] Diogo Barradas, Nuno Santos, Luís Rodrigues, and Vítor Nunes. Poking a hole in the wall: Efficient censorship-resistant internet communications by parasitizing on WebRTC. In Computer and Communications Security. ACM, 2020.
[6] Kevin Bock, George Hughey, Xiao Qiang, and Dave Levin. Geneva: Evolving censorship evasion strategies. In Computer and Communications Security. ACM, 2019.
[7] Cecylia Bocovich and Ian Goldberg. Slitheen: Perfectly imitated decoy routing through traffic replacement. In Computer and Communications Security. ACM, 2016.
[8] Catalin Cimpanu. Kazakhstan government is now intercepting all HTTPS traffic. ZDNet, July 2019.
[9] Kevin P. Dyer, Scott E. Coull, Thomas Ristenpart, and Thomas Shrimpton. Protocol misidentification made easy with Format-Transforming Encryption. In Computer and Communications Security. ACM, 2013.
[10] Kevin P. Dyer, Scott E. Coull, and Thomas Shrimpton. Marionette: A programmable network-traffic obfuscation system. In USENIX Security Symposium. USENIX, 2015.
[11] Daniel Ellard, Alden Jackson, Christine Jones, Victoria Ursula Manfredi, Timothy Strayer, Bishal Thapa, and Megan Van Welie. Rebound: Decoy routing on asymmetric routes via error messages. In Local Computer Networks. IEEE, 2015.
[12] David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern Paxson. Blocking-resistant communication through domain fronting. Privacy Enhancing Technologies, 2015(2), 2015.
[13] Sergey Frolov and Eric Wustrow. The use of TLS in censorship circumvention. In Network and Distributed System Security. The Internet Society, 2019.
[14] John Geddes, Max Schuchard, and Nicholas Hopper. Cover your ACKs: Pitfalls of covert channel censorship circumvention. In Computer and Communications Security. ACM, 2013.
[15] Bridger Hahn, Rishab Nithyanand, Phillipa Gill, and Rob Johnson. Games without frontiers: Investigating video games as a covert channel. In European Symposium on Security & Privacy. IEEE, 2016.
[16] Amir Houmansadr, Chad Brubaker, and Vitaly Shmatikov. The parrot is dead: Observing unobservable network communications. In Symposium on Security & Privacy. IEEE, 2013.
[17] Amir Houmansadr, Thomas Riedl, Nikita Borisov, and Andrew Singer. I want my voice to be heard: IP over voice-over-IP for unobservable censorship circumvention. In Network and Distributed System Security. The Internet Society, 2013.
[18] Sheharbano Khattak, Tariq Elahi, Laurent Simon, Colleen M. Swanson, Steven J. Murdoch, and Ian Goldberg. SoK: Making sense of censorship resistance systems. Privacy Enhancing Technologies, 2016(4):37–61, 2016.
[19] Daniel Luchaup, Kevin P. Dyer, Somesh Jha, Thomas Ristenpart, and Thomas Shrimpton. LibFTE: A toolkit for constructing practical, format-abiding encryption schemes. In USENIX Security Symposium. USENIX, 2014.
[20] Milad Nasr, Hadi Zolfaghari, and Amir Houmansadr. The waterfall of liberty: Decoy routing circumvention that resists routing attacks. In Computer and Communications Security. ACM, 2017.
[21] Shawn Ostermann. Tcptrace. https://tcptrace.org, 2005.
[22] F. Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg, J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. Scikit-learn: Machine learning in Python. Journal of Machine Learning Research, 12:2825–2830, 2011.
[23] Michael Carl Tschantz, Sadia Afroz, Anonymous, and Vern Paxson. SoK: Towards grounding censorship circumvention in empiricism. In Symposium on Security & Privacy. IEEE, 2016.
[24] Paul Vines and Tadayoshi Kohno. Rook: Using video games as a low-bandwidth censorship resistant communication platform. In Workshop on Privacy in the Electronic Society. ACM, 2015.
[25] Liang Wang, Kevin P. Dyer, Aditya Akella, Thomas Ristenpart, and Thomas Shrimpton. Seeing through network-protocol obfuscation. In Computer and Communications Security. ACM, 2015.
[26] Charles V. Wright, Lucas Ballard, Scott E. Coull, Fabian Monrose, and Gerald M. Masson. Uncovering spoken phrases in encrypted voice over IP conversations. ACM Transactions on Information and System Security (TISSEC), 13(4):1–30, 2010.
[27] Eric Wustrow, Scott Wolchok, Ian Goldberg, and J. Alex Halderman. Telex: Anticensorship in the network infrastructure. In USENIX Security Symposium. USENIX, 2011.
[28] Oliver Yang. Pitfalls of TSC usage. https://oliveryang.net/2015/09/pitfalls-of-TSC-usage/, 2017.
[29] Stephen Yang, Seo Jin Park, and John Ousterhout. Nanolog: A nanosecond scale logging system. In 2018 USENIX Annual Technical Conference. USENIX, 2018.