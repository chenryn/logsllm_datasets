### Overhead Analysis and User Experience Evaluation

The 90th percentile of the overhead is 68.37%, with an average of 25.73%. However, these results are limited due to the inability to control for network-induced delays. To eliminate these effects, we conducted the following experiments locally.

#### Local Experiments

Using a laptop, we evaluated how TrueHTML affects user experience in typical scenarios, such as using a web mailer or browsing popular webpages. We assigned `document.body.innerHTML` of an otherwise empty DOM to the content of a typical email body (a multipart message containing both `text/plain` and `text/html`), and the scraped content of the landing pages of Google, Yahoo, Baidu, DuckDuckGo, YouTube, a map display on Google Maps, a Facebook profile, and a Twitter timeline. Each generated page was accessed three times, and the load times were logged per the criteria described earlier. The data were generated locally, thus eliminating network-induced delays. Table 2 shows the average values.

| Content             | Size (kB) | Load Time w/o TH (ms) | Load Time w/ TH (ms) |
|---------------------|-----------|-----------------------|----------------------|
| DuckDuckGo          | 8.2       | 361                   | 349                  |
| Email Body          | 8.5       | 466                   | 520                  |
| Baidu.com           | 11        | 577                   | 539                  |
| Facebook Profile    | 58        | 1346                  | 1216                 |
| Google              | 111       | 1164                  | 1133                 |
| YouTube             | 174       | 937                   | 893                  |
| Twitter Timeline    | 190       | 782                   | 756                  |
| Yahoo               | 244       | 336                   | 316                  |
| Google Maps         | 299       | 336                   | 316                  |

#### Performance Overhead Analysis

The previous test results show that user-perceived page load time is influenced not only by the size of the content but also by its structure and type of markup. While the data indicate that the user experience is not negatively affected in typical use cases, this evaluation does not provide a generic insight into how TrueHTML performance overhead relates to content size and the number of markup elements.

To evaluate this in a controlled environment, we generated a single markup fragment containing 1 kB of text. We assigned `document.body.innerHTML` of an otherwise empty DOM this markup element between one and one hundred times, creating pages with one element containing 1 kB of text content, scaling up to pages with one thousand elements containing 1000 kB of text content. As before, the data were generated locally. We compared page load times with and without TrueHTML. While the load time increases slightly with size and the number of markup elements, Figure 2 shows that the performance penalty introduced by TrueHTML does not increase significantly.

### Related Work

#### Cross-Site Scripting (XSS)

First reported in 2000 [6], Cross-Site Scripting (XSS) attacks gained significant attention with the Samy MySpace worm in 2005 [17]. Several types of XSS attacks have been described:

- **Reflected XSS**: This type typically presents a user with an HTML document accessed with maliciously manipulated parameters (GET, HTTP header, cookies). These parameters are sent to the server for application logic processing, and the document is then rendered along with the injected content.
- **Stored XSS**: This type is injected into web pages through user-contributed content stored on the server. Without proper processing on the server-side, scripts will be executed for any user visiting the web page.
- **DOM XSS**: First described by Klein [18], this type can be seen as a form of reflected XSS where the processing is done by a JavaScript library within the browser rather than on the server. If the malicious script is placed in the hash part of the URL, it is not even sent to the server, making server-side protection techniques ineffective.

#### Server-Side Mitigation Techniques

These range from simple character encoding or replacement to full rewriting of the HTML code. The advent of DOM XSS led to the introduction of client-side XSS filters. The IE8 XSS Filter was the first fully integrated solution [25], followed by the Chrome XSS Auditor in 2009 [4]. For Firefox, client-side XSS filtering is implemented through the NoScript extension [6].

#### Mutation-Based Attacks

Weinberger et al. [30] describe an example where `innerHTML` is used to execute a DOM-based XSS. This is different from the attacks discussed here, as no mutations are imposed on the content, and the content did not pass the server-side filter. Vela Nava et al. [24] and Bates et al. [4] showed that the IE8 XSS Filter could be used to "weaponize" harmless strings, turning them into valid XSS attack vectors by applying mutations carried out by regular expressions. Zalewski covers concatenation problems based on NUL strings in `innerHTML` assignments in the Browser Security Handbook [33] and later dedicates a section to backtick mutation in his book "The Tangled Web" [34].

Other mutation-based attacks have been reported by Barth et al. [1] and Heiderich [13]. Hooimeijer et al. describe dangers associated with sanitization of content [15] and claim that they were able to produce a string that would result in a valid XSS vector after sanitization. Kolbitsch et al. [19] state that attack vectors may be prepared to account for the mutation behavior of different browser engines.

### Conclusion

This paper describes a novel attack technique based on a problematic and mostly undocumented browser behavior that has existed for over ten years, initially introduced with Internet Explorer 4 and adopted by other browser vendors. It identifies the attacks enabled by this behavior and provides an easily implementable solution and protection for web application developers and site owners. The discussed browser behavior results in a widely usable technique for conducting XSS attacks against applications otherwise immune to HTML and JavaScript injections. These internal browser features transparently convert benign markup into an XSS attack vector once certain DOM properties, such as `innerHTML` and `outerHTML`, are accessed or other DOM operations are performed. We label this kind of attack as Mutation-based XSS (mXSS) and dedicate this paper to thoroughly introducing and discussing this attack. Subsequently, we analyze the attack surface and propose an action plan for mitigating the dangers via several measurements and strategies for web applications, browsers, and users. We also supply research-derived evaluations of the feasibility and practicability of the proposed mitigation techniques.

### References

[1] A. Barth. Bug 29278: XSSAuditor bypasses from sla.ckers.org. https://bugs.webkit.org/show_bug.cgi?id=29278.

[2] A. Barth, J. Caballero, and D. Song. Secure content sniﬀing for web browsers, or how to stop papers from reviewing themselves. In Security and Privacy, 2009 30th IEEE Symposium on, pages 360–371. IEEE, 2009.

[3] A. Barua, H. Shahriar, and M. Zulkernine. Server side detection of content sniﬀing attacks. In Software Reliability Engineering (ISSRE), 2011 IEEE 22nd International Symposium on, pages 20–29. IEEE, 2011.

[4] D. Bates, A. Barth, and C. Jackson. Regular expressions considered harmful in client-side XSS ﬁlters. In Proceedings of the 19th international conference on World wide web, WWW ’10, pages 91–100, 2010.

[5] P. Bisht and V. N. Venkatakrishnan. XSS-GUARD: Precise Dynamic Prevention of Cross-Site Scripting Attacks. In Conference on Detection of Intrusions and Malware & Vulnerability Assessment, 2008.

[6] CERT.org. CERT Advisory CA-2000-02 Malicious HTML Tags Embedded in Client Web Requests. http://www.cert.org/advisories/CA-2000-02.html, 2012.

[7] T. j. Foundation. jQuery: The Write Less, Do More, JavaScript Library. http://jquery.com/, Nov. 2012.

[8] M. Gebre, K. Lhee, and M. Hong. A robust defense against content-sniﬀing XSS attacks. In Digital Content, Multimedia Technology and its Applications (IDC), 2010 6th International Conference on, pages 315–320. IEEE, 2010.

[9] B. Gourdin, C. Soman, H. Bojinov, and E. Bursztein. Toward secure embedded web interfaces. In Proceedings of the Usenix Security Symposium, 2011.

[10] M. V. Gundy and H. Chen. Noncespaces: Using randomization to defeat Cross-Site Scripting attacks. Computers & Security, 31(4):612–628, 2012.

[11] Y. Hasegawa, Mar. 2007.

[12] M. Heiderich. HTML5 Security Cheatsheet. http://html5sec.org/.

[13] M. Heiderich. Towards Elimination of XSS Attacks with a Trusted and Capability Controlled DOM. PhD thesis, Ruhr-University Bochum, 2012.

[14] M. Heiderich, M. Niemietz, F. Schuster, T. Holz, and J. Schwenk. Scriptless attacks—stealing the pie without touching the sill. In ACM Conference on Computer and Communications Security (CCS), 2012.

[15] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and M. Veanes. Fast and precise sanitizer analysis with BEK. In Proceedings of the 20th USENIX conference on Security, SEC’11, pages 1–1, Berkeley, CA, USA, 2011. USENIX Association.

[16] M. Johns. Code Injection Vulnerabilities in Web Applications—Exemplified at Cross-site Scripting. PhD thesis, University of Passau, Passau, July 2009.

[17] S. Kamkar. Technical explanation of The MySpace Worm.

[18] A. Klein. DOM Based Cross Site Scripting or XSS of the Third Kind. Web Application Security Consortium, 2005.

[19] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert. Rozzle: De-Cloaking Internet Malware. In Proc. IEEE Symposium on Security & Privacy, 2012.

[20] T. Leithead. DOM parsing and serialization (W3C editor’s draft 07 November 2012). http://dvcs.w3.org/hg/innerhtml/raw-file/tip/index.html.

[21] M. T. Louw and V. N. Venkatakrishnan. Blueprint: Robust Prevention of Cross-site Scripting Attacks for Existing Browsers. In Proceedings of the 2009 30th IEEE Symposium on Security and Privacy, SP ’09, pages 331–346, Washington, DC, USA, 2009. IEEE Computer Society.

[22] M. T. Louw and V. N. Venkatakrishnan. Blueprint: Robust Prevention of Cross-site Scripting Attacks for Existing Browsers. Proc. IEEE Symposium on Security & Privacy, 2009.

[23] Y. Nadji, P. Saxena, and D. Song. Document Structure Integrity: A Robust Basis for Cross-site Scripting Defense. In NDSS. The Internet Society, 2009.

[24] E. V. Nava and D. Lindsay. Abusing Internet Explorer 8’s XSS Filters. http://p42.us/ie8xss/Abusing_IE8s_XSS_Filters.pdf.

[25] D. Ross. IE8 XSS Filter design philosophy in-depth. http://blogs.msdn.com/b/dross/archive/2008/07/03/ie8-xss-filter-design-philosophy-in-depth.aspx, Apr. 2008.

[26] P. Saxena, D. Molnar, and B. Livshits. SCRIPTGARD: Automatic context-sensitive sanitization for large-scale legacy web applications. In Proceedings of the 18th ACM conference on Computer and communications security, pages 601–614. ACM, 2011.

[27] B. van der Sluis. SWFObject - An easy-to-use and standards-friendly method to embed Flash content, which utilizes one small JavaScript file. http://code.google.com/p/swfobject/.

[28] E. Vela. Issue 43902: innerHTML decompilation issues in textarea. http://code.google.com/p/chromium/issues/detail?id=43902.

[29] W3C. Navigation Timing. http://www.w3.org/TR/2012/PR-navigation-timing-20120726/, July 2012.

[30] J. Weinberger, P. Saxena, D. Akhawe, M. Finifter, E. C. R. Shin, and D. Song. A systematic analysis of XSS sanitization in web application frameworks. In ESORICS, 2011.

[31] E. Z. Yang. HTML Purifier CSS quoting full disclosure. http://htmlpurifier.org/, Sept. 2010.

[32] E. Z. Yang. HTML Purifier. http://htmlpurifier.org/, Mar. 2011.

[33] M. Zalewski. Browser Security Handbook. http://code.google.com/p/browsersec/wiki/Main, July 2010.

[34] M. Zalewski. The Tangled Web: A Guide to Securing Modern Web Applications. No Starch Press, 2011.

[35] G. Zuchlinski. The Anatomy of Cross Site Scripting. Hitchhiker’s World, 8, Nov. 2003.