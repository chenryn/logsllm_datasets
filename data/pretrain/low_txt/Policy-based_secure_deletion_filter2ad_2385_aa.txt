# Policy-based Secure Deletion

## Authors
- Christian Cachin, IBM Research - Zurich, PI:EMAIL
- Kristiyan Haralambiev, CyLab / CMU, PI:EMAIL
- Hsu-Chun Hsiao, IBM Research - Zurich, PI:EMAIL
- Alessandro Sorniotti, IBM Research - Zurich, PI:EMAIL

## Abstract
Securely deleting data from storage systems has become increasingly challenging. Most storage space is provided as a virtual resource and traverses multiple layers between the user and the physical storage medium. Proper data erasure operations are often not supported, particularly in networked and cloud-storage systems. This paper introduces a general cryptographic model for policy-based secure deletion of data in storage systems, where security relies on the proper erasure of cryptographic keys. Deletion operations are defined by a policy that describes data destruction through deletion attributes and protection classes. The policy links these attributes to the protection classes that must be erased accordingly. We present a cryptographic construction for deletion policies represented by directed acyclic graphs (DAGs), which is modular and composed of secure deletion schemes. Our model and construction unify and generalize all previous encryption-based techniques for secure deletion. Finally, we describe a prototype implementation of a Linux filesystem with policy-based secure deletion.

## Categories and Subject Descriptors
- D.4.3 [File Systems Management]: Access methods; File organization
- D.4.6 [Security and Protection]: Cryptographic controls

## Keywords
- Secure deletion, security policy, filesystem security

## 1. Introduction
Modern storage systems lack reliable operations to destroy stored information. Common deletion operations simply mark the occupied space as free and remove an entry from the directory, but some of the stored data may remain accessible. A technically knowledgeable user with low-level access can still retrieve the data. This issue applies to simple magnetic storage devices like disks or tapes, as well as networked storage services, such as storage controllers in data centers, file servers, or cloud storage. These systems contain many layers of virtualization and perform aggressive caching, leaving traces of stored data beyond the control of users.

Users desire control over the deletion of their information because the reappearance of supposedly deleted data can have undesirable consequences. Many companies have detailed policies for retaining and deleting data, and organizations like the Electronic Frontier Foundation recommend controlled data deletion to maintain user privacy. The European Data Protection Directive mandates the erasure of personal data upon request.

With the advent of cloud computing, clients who outsource storage want to control the shredding of their data without relying on the cooperation of the storage service. Storage service providers also aim to offer guaranteed data destruction as a feature. In this paper, we explore the use of encryption and key management for securely deleting data. When data is stored encrypted, only the corresponding key needs to be destroyed to erase the data. Deleting remote data becomes a problem of managing and deleting local keys.

We introduce the concept of policy-based secure deletion, where the stored data is grouped into protection classes, and attributes control the selective erasure of data through a policy. The design relies on a master key stored in a controlled and erasable memory, so that operations to delete data manipulate the master key, e.g., by updating it or erasing parts of it. No bulk data is ever re-encrypted.

This paper makes the following contributions:
- We introduce the notion of a secure deletion scheme and provide a formal model and security definition for encryption-based secure deletion. It uses a coercive adversary that obtains the master key at the time of attack.
- We construct a secure deletion scheme from encryption and threshold secret sharing, supporting arbitrary policies modeled as circuits with AND, OR, and threshold gates.
- We show how secure deletion schemes can be composed in a modular way, unifying and generalizing all existing constructions for cryptographic secure deletion.
- We present a prototype implementation of a Linux filesystem with policy-based secure deletion.

Our encryption-based deletion methods apply to all kinds of storage systems, regardless of their physical media, and can be integrated into existing systems with minimal effort. Solutions based on overwriting at the physical level only work in close connection with the media properties, making them less suitable for large, networked storage systems.

### 1.1 Related Work
**Secure Deletion:** Many systems overwrite data to delete it, but these solutions depend heavily on the properties of the underlying physical storage. With cloud computing and virtualized storage, physical control over data-storage locations is no longer feasible. 

**Encryption for Erasure:** Boneh and Lipton introduced using encryption for erasing information. Di Crescenzo et al. proposed a tree construction for efficient secure deletion. Mitra and Winslett described a method for creating an inverted index of keywords, allowing selective deletion of data records. Perlmanâ€™s Ephemerizer uses a temporal sequence of keys for different expiration times. The FADE system uses public-key cryptography with simple policies, but is limited to one- or two-level Boolean expressions. Peterson et al. use all-or-nothing transforms (AONT) at the block level. Vanish encrypts content and splits the key using secret sharing, providing secure deletion for user data published in social networks.

**Key-Assignment Schemes:** Our approach is related to monotone secret sharing schemes and key-assignment schemes for hierarchical access control. Crampton et al. provide a summary of the literature on key assignment. Key-assignment schemes distribute keys to users, allowing them to derive suitable keys for accessing information according to a hierarchical policy.

**Attribute-Based Encryption (ABE):** Our work relates to ABE schemes, especially ciphertext-policy ABE (CP-ABE). CP-ABE maintains keys for different attributes, and the deletion policy is linked to the protected files. While conceptually related, CP-ABE does not directly yield secure deletion. Maintaining a master key for generating attribute-specific decryption keys either requires generating all possible keys in advance or keeping the master key, which is not efficient or secure under coercion.

### 1.2 Organization
- **Section 2:** Introduces our notion of policy-based secure deletion.
- **Section 3:** Presents multiple implementations of secure deletion schemes and the composition operation.
- **Section 4:** Discusses the efficiency and other properties of the schemes.
- **Section 5:** Describes a filesystem with policy-based secure deletion.

## 2. Model
This section defines policy-based secure deletion schemes using a deletion policy represented by a graph.

### 2.1 Selective Secure Deletion
The goal of a policy-based secure deletion scheme is to maintain a collection of files on a permanent storage medium and selectively delete some of them. Each file is a bit string of arbitrary length and is protected under a protection class from a set \( P \), as specified by a deletion policy. A protection class is a logical grouping of files governed by an identical deletion rule. The universe of protection classes is denoted by \( P = \{p_1, p_2, \ldots\} \).

The scheme provides operations for protecting a file, accessing a file, and securely deleting files. Secure deletion schemes in our model represent specialized encryption schemes and provide cryptographic security. We model a secret-key secure deletion scheme, where the same key serves for both protection and access to files. Our model also applies to public-key schemes defined analogously.

Initially, files of all protection classes are protected under an initial master key stored in a closely guarded erasable memory, kept secret from adversaries. The master key will be changed as a result of deletion operations. All other data produced by the scheme is called ciphertext and stored in immutable non-erasable memory, exposed to adversaries.

Each protection class is defined by attributes from a set \( A \) of strings over a fixed alphabet. Secure deletion operates on a subset of attributes, ensuring that protection classes subject to those attributes become inaccessible. When a secure deletion operation is executed, a new master key is computed and stored in the erasable memory, and the previous master key is erased. Secure deletion may also change the ciphertext, i.e., add new ciphertext to the non-erasable memory.

### 2.2 Policy Graph
A deletion policy graph \( G \) suitable for a secure deletion scheme is given by a pair \( (V, E) \) with \( V = A \cup P \) such that \( (V, E) \) is a directed acyclic graph (DAG). It has two kinds of nodes: sources and interior nodes. Nodes with no incoming edges (indegree zero) are sources and correspond one-to-one to the attributes in \( A \). All other nodes are interior nodes, each associated with a threshold parameter \( m \), a positive integer less than or equal to the indegree of the node. Every interior node is labeled by a distinct protection class in \( P \). A policy graph must contain at least one source and one interior node, hence, the minimum policy graph has two nodes and one edge from the source node to the interior node.

Every node and every edge of the graph is associated with a Boolean value. All outgoing edges from a node take the same value as the node. The source nodes are assigned a value through the secure deletion scheme. An interior node with threshold \( m \) and \( n \) incoming edges corresponds to a Boolean threshold gate with threshold \( m \): the node is TRUE whenever at least \( m \) among the \( n \) incoming edges are TRUE. Notice that \( G \) has a natural interpretation as a Boolean circuit whose sources correspond to \( A \). Threshold nodes subsume AND and OR gates as special cases.

### 2.3 Operation
Intuitively, deletion operations can be triggered by setting a subset of attributes to TRUE. The corresponding source nodes in \( G \) are then set to TRUE, which may cause some protection classes of \( G \) to become TRUE. This means that all files protected under these classes are deleted. Multiple secure deletion steps may follow each other.

More precisely, secure deletion works as follows. All protection classes are initially accessible, i.e., all source nodes and all their outgoing edges are FALSE at the start. As the circuit is monotone, this means that also all other nodes initially evaluate to FALSE according to \( G \). Hence, none of the protection classes specified has been deleted, and all files are accessible in the sense that their plaintext can be obtained from the ciphertext with the master key. A secure deletion operation takes a subset of the attributes as a parameter and changes the associated source nodes, and, consequently, some edges in \( G \) to TRUE. Those files governed by protection classes that change their value to TRUE are no longer accessible after the master key has been updated. This model allows secure deletion of many files according to the policy and the given attributes.