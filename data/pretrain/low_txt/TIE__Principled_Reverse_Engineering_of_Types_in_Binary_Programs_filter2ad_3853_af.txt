### 1. Static Analysis in IDA Pro

In version 1.2 of IDA Pro [2], we use TIE (Type Inference Engine) for static analysis. TIE outputs both an upper and lower bound on the inferred type, which we use to measure the conservativeness of TIE. For precision, we translate the bound output by TIE into a single C type by using the lower bound unless it is ⊥ (bottom). If the lower bound is ⊥, we use the upper bound. Our heuristic has been found to provide the most accurate results.

#### Figure 11: Conservativeness and Distance for Structural Types
- **(a) Conservativeness for structural types.**
- **(b) Distance for structural types.**

### 2. Type System Comparisons

Hex-rays and REWARDS have inherently less informative type systems compared to ours, as they are restricted to only C types. For example, REWARDS guesses that a 32-bit register holds an `uint32_t` with no additional information, while Hex-rays guesses `int32_t` in the same situation. Our `reg32_t` reflects that we do not know whether the register is a signed number, unsigned number, or pointer. To compare, we either convert their types to ours or vice versa. We experimented with both methods. To provide the most conservative setting for REWARDS and Hex-rays, we translated each type output by them as τ to the range [⊥, τ].

### 3. Static Analysis Results

Figure 10 shows the overall results for TIE. Figure 10(a) demonstrates that the type intervals with and without inter-procedural analysis are roughly correlated. The inter-procedural analysis has shorter type intervals because it has more opportunities to refine types. Figure 10(b) represents the position of real types within the type interval, normalized as [−0.5, 0.5]. As the position is closer to the bottom, the real types are closer to the lower bound in the type lattice. For both cases, the real types are closer to the lower bound, which is the most specific type in the type interval. However, with inter-procedural analysis, the real types are closer to the middle of the type interval. Thus, Figure 10 indicates that inter-procedural analysis provides tighter type intervals with the real types centered.

### 4. Precision and Conservativeness

Figure 12 shows the per-program breakdown on conservativeness and precision for TIE and Hex-rays on the test suite. In the intra-procedural case, our inferred type is 28% more precise than Hex-rays, and with inter-procedural analysis, we are 38% better. While Hex-rays' algorithm is proprietary, it appears that in many cases, Hex-rays seems to be guessing types, e.g., any local variable moved to `eax` is a signed integer. TIE, on the other hand, is a significantly more principled approach.

### 5. Manual Investigation of Errors

We manually investigated cases where TIE inferred an incorrect bound. One of the leading causes was typing errors in the original program. For instance, in the function `decimal_ascii_add` of `getlimits`, a variable of signed integer stores the return value of `strlen`, but the type signature for `strlen` is unsigned.

### 6. Structural Types

Structures are challenging to infer because we must identify the base pointer, the fields being accessed, the number of fields, and the type for each one. Figure 11 breaks out the conservativeness and precision for only structural types. TIE's accuracy is conservative at 90% on structural types, while Hex-rays is less than 45%. TIE's precision is about 1.5 away from the original C type, which is about 200% better than Hex-rays. We conclude that TIE identifies structural types significantly more conservatively and precisely than Hex-rays.

### 7. Dynamic Analysis

Table 2 shows the results of TIE and REWARDS with dynamic analysis. The coverage column measures how many variables are typed. As expected, a dynamic approach infers only a few variables since only a single path is executed. Unlike TIE, REWARDS guesses a variable has type `uintn_t` when no type information is available, which reduces overall precision since REWARDS would mis-classify signed integers, pointers, etc., as unsigned integers. We modified REWARDS to more conservatively use `regn_t` to get a best-case scenario for REWARDS (called REWARDS-c in the table). However, in all cases, TIE is more precise (i.e., has a lower distance to the true type) and is more conservative than REWARDS.

### 8. Comparison with REWARDS

A more interesting metric is comparing TIE using static analysis of the entire program against REWARDS using dynamic analysis of a single path. This is interesting because one of the main motivations for REWARDS' dynamic approach is the hypothesis that static analysis would not be accurate [12]. We show that in our test cases, static analysis is about as precise as REWARDS but can type 100% of all variables. We conclude that a static-based approach can provide results comparable to dynamic analysis, while offering the advantages of working on multiple paths and handling control flow.

### 9. Related Work

#### Type Reconstruction
Our approach to reverse engineering using type reconstruction is based on a long history of work in programming languages. Using type inference to aid decompilation has been proposed by others, e.g., [16, 10, 19]. However, previous work typically tries to infer C types directly, while we use a type range and a type system specifically designed to reflect the uncertainty of reconstruction on binary code. To the best of our knowledge, previous work has not been implemented and tested on real programs.

#### Semantic Types
REWARDS [12] calls the types printed by their system "semantic types." A semantic type in REWARDS is a manually specified name for a type signature, e.g., a structure may have the semantic type `sockaddr_t` instead of the complete type signature for the structure. Type ascriptions are useful for printing out complex types, e.g., printing out `sockaddr_t` as the type of a variable is less cumbersome than printing out the full type signature. REWARDS has code that ascribes their pre-defined types to the arguments of pre-defined common library functions. The ascribed types are propagated like any other type. For example, the type signature for `open` has a return type `int`. Whenever REWARDS sees a call to `open`, it assigns the return variable the ascribed type name `file_d` instead of the actual type `int`. If the return variable is then assigned to another variable, the new variable also gets the ascribed type. REWARDS has manually defined about 150 different type names and manually ascribed those types to about 84 standard library calls.

Type ascription is simple to add as part of type inference, e.g., the rules can be found in standard type theory textbooks such as Pierce [17]. While ascribing manually-defined type names to function arguments as in REWARDS would certainly make TIE a better tool, it adds no power to the overall type system and is thus left outside the scope of this work.

#### Variable Recovery
Our approach for recovering variables is based on Balakrishnan et al. [6, 7]. However, their work only recovers variable locations and does not infer types. While TIE could plug in DIVINE [7] to recover variables, we use our own algorithm based on data flow lattices.

#### Typed Assembly Language
Despite the similarity in name, Typed Assembly Language (TAL) [14, 15, 9] addresses a different challenge. The idea of TAL is to maintain user-provided types for type-safe programs down through code generation in the compiler to find program bugs. After code generation, the types are thrown away. Our problem is to infer types on unsafe programs (e.g., C types) from binary code. However, type reconstruction for TAL types is an open, related, and interesting problem [18].

### 10. Conclusion

In this paper, we presented an end-to-end system for reverse engineering data abstractions in binary code called TIE. At the core of our system is a novel type reconstruction algorithm for binary code. Unlike previous approaches in research such as REWARDS [12], which are limited to dynamic analysis of a single execution trace, we handle control flow and are amenable to both static and dynamic analysis settings. We do so while providing a more precise yet conservative type than REWARDS. Our implementation also shows that TIE is significantly more precise than the leading industry product (the Hex-rays decompiler). We conclude that our type reconstruction techniques and approach are a promising alternative over current methods in research and practice.

### 11. Acknowledgements

We thank Zhiqiang Lin and Dongyan Xu for the REWARDS code and their helpful comments. We also thank William Lovas for his advice and our anonymous reviewers for their useful comments and suggestions. This work was supported by the National Research Foundation of Korea Grant funded by the Korean Government [NRF-2009-352-D00282]. This material is also based upon work supported by the National Science Foundation under Grant No. 0953751. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation.

### References

[1] Binary Analysis Platform (BAP). http://bap.ece.cmu.edu.
[2] The IDA Pro disassembler and debugger. http://www.hex-rays.com/idapro/.
[3] BitBlaze binary analysis project. http://bitblaze.cs.berkeley.edu, 2007.
[4] A. Appel. Modern Compiler Implementation in ML. Cambridge University Press, 1998.
[5] G. Balakrishnan. WYSINWYX: What You See Is Not What You Execute. PhD thesis, Computer Science Department, University of Wisconsin at Madison, Aug. 2007.
[6] G. Balakrishnan and T. Reps. Analyzing memory accesses in x86 executables. In Proceedings of the International Conference on Compiler Construction, 2004.
[7] G. Balakrishnan and T. Reps. DIVINE: Discovering variables in executables. In Proceedings of the International Conference on Verification Model Checking and Abstract Interpretation, Jan. 2007.
[8] D. Brumley. Carnegie Mellon University Security Group. http://security.ece.cmu.edu.
[9] K. Crary. Toward a foundational typed assembly language. In Symposium on Principles of Programming Languages, 2003.
[10] E. Dolgova and A. Chernov. Automatic reconstruction of data types in the decompilation problem. Programming and Computer Software, 35(2):105 – 119, Mar. 2009.
[11] C. Kruegel, W. Robertson, F. Valeur, and G. Vigna. Static disassembly of obfuscated binaries. In Proceedings of the USENIX Security Symposium, 2004.
[12] Z. Lin, X. Zhang, and D. Xu. Automatic reverse engineering of data structures from binary execution. In Proceedings of the Network and Distributed System Security Symposium, 2010.
[13] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In Proceedings of the ACM Conference on Programming Language Design and Implementation, June 2005.
[14] G. Morrisett, K. Crary, N. Glew, and D. Walker. Stack-based typed assembly language. Journal of Functional Programming, 12(1):43–88, 2002.
[15] G. Morrisett, D. Walker, K. Crary, and N. Glew. From System F to typed assembly language. ACM Transactions on Programming Language Systems, 21(3):527–568, 1999.
[16] A. Mycroft. Type-based decompilation. In European Symposium on Programming, Mar. 1999.
[17] B. C. Pierce. Types and Programming Languages. The MIT Press, 2002.
[18] B. C. Pierce, editor. Advanced Topics in Types and Programming Languages. The MIT Press, 2005.
[19] G. Ramalingam, J. Field, and F. Tip. Aggregate structure identification and its application to program analysis. In Proceedings of the Symposium on Principles of Programming Languages, 1999.