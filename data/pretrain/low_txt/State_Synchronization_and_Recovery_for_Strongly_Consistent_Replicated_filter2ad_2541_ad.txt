### Application-Level State Size for a Replica (Bytes) × 10^6
**Figure 6:** Variation in recovery time for a server replica based on the size of its application-level state.

#### Step (vi): Recovery Process
- The `set-state()` invocation on the new or recovering replica returns a response (without throwing an exception). At this point, the new replica \( A_2 \) is considered recovered and ready to process normal invocations and responses.
- Enqueued messages are delivered in order to the new or recovering replica, as illustrated in Figure 5(vi).
- When the `set-state()` invocation reaches the head of the message queue at the existing replica \( A_1 \), it is simply discarded because \( A_1 \) is already recovered.

The logged `get-state()` invocation at the new or recovering replica serves as the state synchronization point in the totally ordered message sequence. This ensures that the state assignment occurs through its counterpart `set-state()` invocation. Careful synchronization of the positions of the `get-state()` and `set-state()` messages in the incoming invocation sequence at both the new and existing replicas is crucial for consistent recovery of every replicated object.

### Implementation and Performance
The Eternal system supports the replication of unmodified CORBA objects running on unmodified commercial ORBs, including:
- Inprise’s VisiBroker
- Iona Technologies’ Orbix
- Xerox PARC’s ILU
- Washington University, St. Louis’ TAO
- Vertel’s e*ORB
- Expersoft’s CORBAplus
- Object-Oriented Concepts’ ORBacus
- AT&T Laboratories’ omniORB2

Under normal fault-free operation, the overheads of interception, multicast, and replica consistency mechanisms in our prototype Eternal system are reasonable, ranging from 10-15% of the response time for fault-tolerant CORBA test applications compared to their unreplicated counterparts.

**Figure 6** illustrates the performance of the Eternal system during the recovery of a new or failed replica of an object. The graph shows the time required to recover a server replica in a test application developed with Inprise’s VisiBroker 4.0 C++ ORB. The measurements were taken over a network of dual-processor 167 MHz UltraSPARC workstations running Solaris 2.7, connected by a 100 Mbps Ethernet.

In the test application, the client object acts as a packet driver, sending a constant stream of two-way invocations to the actively replicated server object. During the experiments, one of the server replicas was killed and then re-launched. The recovery time was measured as the interval between the re-launch of the failed replica and its reinstatement to normal operation. The graph depicts recovery times for varying sizes of the application-level state (from 10 bytes to 350,000 bytes) transferred across the network to recover a failed server replica.

The ORB/POA-level state and infrastructure-level state are independent of the application-level state and do not vary with its size. Regardless of the application-level state size, the entire state is encapsulated in a single IIOP message by the ORB. However, at the transport layer, the Ethernet medium necessitates the fragmentation of any IIOP message larger than the maximum Ethernet frame size (1518 bytes). This means large IIOP messages (> 1518 bytes) will be transmitted using multiple multicast messages. Consequently, the number of multicast messages needed to transfer the state, and thus the recovery time, increases with the size of the application-level state, as shown in the graph.

Therefore, the choice of an object's replication style—active (more resource-intensive, fewer state transfers, faster recovery) vs. passive (less resource-intensive, more frequent state transfers, slower recovery)—is influenced by the object's resource usage, the size of its application-level state, and the constraints on its recovery time.

### Related Work
Much of the early work on systematic message logging in distributed systems was conducted by Elnozahy and Zwaenepoel in their Manetho system. They developed algorithms for sound uncoordinated logging that avoid cascaded rollbacks during recovery, albeit with complex recovery algorithms. Recent work by Alvisi and Marzullo has focused on conditions under which no process is left in an inconsistent state and on piggybacking nondeterministic operations onto messages in the message log to ensure deterministic replay.

The Delta-4 system aimed to provide fault tolerance in a distributed Unix environment using an atomic multicast protocol. It supported active, passive, and hybrid semi-active replication, with backward error recovery achieved by integrating checkpointing with inter-process communication.

The Arjuna system uses object replication and an atomic transaction strategy to provide fault tolerance, supporting active, coordinator-cohort passive, and single-copy passive replication. Strategies similar to checkpointing are used for disseminating state updates in passive replication.

The FRIENDS system provides mechanisms for building fault-tolerant applications using libraries of metaobjects, with separate metaobjects for fault tolerance, security, and group communication. FRIENDS includes interfaces for capturing the state of an object to stable storage and for transmitting the primary replica’s state to backup replicas in the case of passive replication.

Other systems, such as the Object Group Service (OGS), Newtop, Maestro, and AQuA, address issues related to consistent object replication and fault tolerance in the context of CORBA. These systems use various approaches, including group communication, consensus algorithms, and transparent checkpointing, to ensure consistent replication and recovery. However, none of these systems have addressed the issues of ORB/POA-level state and infrastructure-level state, which are essential for strongly consistent replication and recovery.

### Conclusion
The Eternal system provides support for the consistent replication and recovery of unmodified CORBA client and server objects running on unmodified CORBA-compliant off-the-shelf ORBs. Eternal's recovery mechanisms include support for message and checkpoint logging, as well as state retrieval, transfer, and assignment.

For every replicated CORBA object, Eternal maintains the consistency of three kinds of state: application-level state, ORB/POA-level state, and infrastructure-level state. This ensures that the states are synchronized across all operational replicas, regardless of the object's replication style, and in a manner transparent to the ORB and the CORBA application. Eternal's enqueueing and dispatching of messages for state retrieval and assignment ensure that the recovery of failed replicas is concurrent with the normal operation of existing replicas, allowing the system to continue operating in the presence of faults and during recovery.

Eternal adheres to the new Fault-Tolerant CORBA standard, maintaining strong replica consistency as replicas process invocations and responses, and as it recovers replicas after a fault.

### References
[1] L. Alvisi and K. Marzullo. Message logging: Pessimistic, IEEE Transactions on Software Engineering, 24(2): 149-159, February 1998.
[2] K. Bhatia, K. Marzullo, and L. Alvisi. The relative overhead of piggybacking in causal message logging protocols. In Proceedings of the 17th IEEE Symposium on Reliable Distributed Systems, pages 348-353, West Lafayette, IN, October 1998.
[3] M. Cukier, J. Ren, C. Sabnis, W. H. Sanders, D.E. Bakken, M. E. Berman, D. A. Karr, and R. Schantz. AQUA: An adaptive architecture that provides dependable distributed objects. In Proceedings of the IEEE 17th Symposium on Reliable Distributed Systems, pages 245-253, West Lafayette, IN, October 1998.
[4] E. N. Elnozahy and W. Zwaenepoel. Manetho: Transparent rollback-recovery with low overhead, limited rollback, and fast output commit. IEEE Transactions on Computers, 41(5):526-531, May 1992.
[5] E. N. Elnozahy and W. Zwaenepoel. On the use and implementation of message logging. In Proceedings of the 24th IEEE Fault-Tolerant Computing Symposium, pages 298-307, Austin, TX, June 1994.
[6] J. C. Fabre and T. Perennou. A metaobject architecture for fault-tolerant distributed systems: The FRIENDS approach. IEEE Transactions on Computers, 47(1):78-95, 1998.
[7] P. Felber, R. Guerraoui, and A. Schiper. The implementation of a CORBA object group service. Theory and Practice of Object Systems, 4(2):93-105, 1998.
[8] G. Morgan, S. Shrivastava, P. Ezhilchelvan, and M. Little. Design and implementation of a CORBA fault-tolerant object group service. In Proceedings of the Second IFIP WG 6.1 International Working Conference on Distributed Applications and Interoperable Systems, Helsinki, Finland, June 1999.
[9] L. E. Moser, P. M. Melliar-Smith, D. A. Agarwal, R. K. Budhia, and C. A. Lingley-Papadopoulos. Totem: A fault-tolerant multicast group communication system. Communications of the ACM, 39(4):54-63, April 1996.
[10] L. E. Moser, P. M. Melliar-Smith, and P. Narasimhan. Consistent object replication in the Eternal system. Theory and Practice of Object Systems, 4(2):81-92, 1998.
[11] P. Narasimhan, L. E. Moser, and P. M. Melliar-Smith. Enforcing determinism for the consistent replication of multithreaded CORBA applications. In Proceedings of the IEEE 18th Symposium on Reliable Distributed Systems, pages 263-273, Lausanne, Switzerland, Oct. 1999.
[12] B. Natarajan, A. Gokhale, S. Yajnik, and D. C. Schmidt. DOORS: Towards high-performance fault-tolerant CORBA. In Proceedings of the International Symposium on Distributed Objects and Applications, Antwerp, Belgium, September 2000.
[13] Object Management Group. The Common Object Request Broker: Architecture and specification, 2.3 edition. OMG Technical Committee Document formal/98-12-01, June 1999.
[14] Object Management Group. Fault tolerant CORBA (adopted specification). OMG Technical Committee Document orbos/2000-04-04, March 2000.
[15] G. Parrington, S. Shrivastava, S. Wheater, and M. Little. The design and implementation of Arjuna. USENIX Computing Systems Journal, 8(3):255-308, Summer 1995.
[16] D. Powell. Delta-4: A Generic Architecture for Dependable Distributed Computing. Springer-Verlag, 1991.
[17] A. Vaysburd and K. Birman. The Maestro approach to building reliable interoperable distributed applications with multiple execution styles. Theory and Practice of Object Systems, 4(2):73-80, 1998.
[18] Y. M. Wang, Y. Huang, K. P. Vo, P. Y. Chung, and C. M. R. Kintala. Checkpointing and its applications. In Proceedings of the 25th IEEE International Symposium on Fault-Tolerant Computing, pages 22-31, Pasadena, CA, June 1995.