### Statistics and Practicality

Statistics, which is more lightweight and practical, plays a crucial role in various hybrid fuzzing systems. QSYM [46] integrates symbolic emulation with native execution using dynamic binary translation. It also relaxes the strict soundness requirements of conventional concolic executors to enhance performance and scalability for real-world programs. The primary focus of QSYM is to improve the efficiency of concolic execution, while our approach aims to optimize concolic execution by selectively dispatching only the most challenging tasks to it.

### Hybrid Fuzzing Systems

Another type of hybrid fuzzing system uses symbolic execution as a guide for input generation or path selection. Pak [31] proposes a hybrid fuzzing system that applies symbolic execution to collect path constraints, then generates inputs that adhere to these constraints and transitions to the fuzzer. DeepFuzz [5] employs probabilistic symbolic execution to assign probabilities to program paths, which are then used to guide the path exploration during fuzzing.

**Figure 10: Concolic Executions by DigFuzz on N RF IN 00017.**

In the post-processing step, T-Fuzz leverages a symbolic execution-based approach to filter out false positives. CollAFL [16] is a coverage-sensitive fuzzing solution that mitigates path collisions by providing more accurate coverage information. It also utilizes this information to apply three new fuzzing strategies. Veritesting [1] addresses the path explosion problem by combining static and dynamic symbolic execution. Mayhem [10] proposes integrating online and offline symbolic execution to manage memory exhaustion. The main contribution of DigFuzz is to propose a more effective strategy for combining fuzzing with concolic execution. Therefore, the advancements in fuzzing and concolic execution are beyond the scope of this paper.

### Path Prioritization in Symbolic Execution

Path prioritization is a promising technique for mitigating the path explosion problem in dynamic symbolic execution. Representative studies include heuristic techniques and sound program analysis techniques [9]. These heuristics involve using the control-flow graph to guide exploration, frequency-based, and random-based techniques [6]–[8]. Recently, path prioritization has been combined with evolutionary search, where a fitness function guides the symbolic execution [2].

Compared to these path exploration techniques, the path prioritization in DigFuzz focuses on prioritizing paths based on the difficulty for fuzzing to pass through. To the best of our knowledge, we are the first to investigate the path prioritization problem in a hybrid fuzzing system.

Directed symbolic execution also uses path prioritization to reach a target. These techniques aim to find a feasible path for a target statement or branch [37], [45]. In contrast, the path prioritization in DigFuzz identifies targeted paths for concolic execution rather than searching for a feasible path for a given target.

### Seed Scheduling in Fuzzing

Seed selection is crucial in fuzzing, and several studies have proposed improving seed schedulers [4], [11], [44] by prioritizing seed inputs. Woo et al. [44] model black-box fuzzing as a multi-armed bandit problem, where the energy of a seed is computed based on whether it has exposed a crash in any previous fuzzing iteration. AFLfast [4] enhances the seed selection strategy of AFL by assigning more energy to inputs that are less frequently taken by AFL. The fundamental insight behind these seed scheduling techniques is to identify seeds on which mutated executions are more likely to discover new program states. In future work, we plan to design a scheduling technique to offload the fuzzer with paths that are difficult to explore.

### Test Case Prioritization

Test case prioritization aims to reorder test cases to increase the rate at which faults are detected [21], [22], [24], [26], [28]. The path prioritization in this study focuses on identifying missed paths that are most likely to block the fuzzer. The search algorithm is closely related to the Monte Carlo method [35].

### Conclusion

In this paper, we conduct a thorough investigation of state-of-the-art hybrid fuzzing systems and highlight several fundamental limitations in the "demand launch" and "optimal switch" strategies. We propose a "discriminative dispatch" strategy to better utilize concolic execution by designing a Monte Carlo-based probabilistic path prioritization model to quantify each path's difficulty. We implement a prototype system, DigFuzz, and conduct comprehensive evaluations using two popular datasets. The results show that concolic execution in DigFuzz significantly increases code coverage and the number of discovered vulnerabilities compared to other state-of-the-art hybrid fuzzing systems.

### Acknowledgment

We thank our shepherd Endadul Hoque and the anonymous reviewers for their insightful comments. This work is partly supported by the National Science Foundation under Grant No. 1664315, the Office of Naval Research under Award No. N00014-17-1-2893, and the National Natural Science Foundation of China under Grant No. 61672394 and 61872273. Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley, “Enhancing symbolic execution with veritesting,” in Proceedings of the 36th International Conference on Software Engineering, 2014, pp. 1083–1094.
[2] A. Baars, M. Harman, Y. Hassoun, K. Lakhotia, P. McMinn, P. Tonella, and T. Vos, “Symbolic search-based testing,” in the 26th International Conference on Automated Software Engineering, 2011, pp. 53–62.
[3] M. Bohme, V.-T. Pham, M.-D. Nguyen, and A. Roychoudhury, “Directed greybox fuzzing,” in Proceedings of CCS’17, 2017, pp. 2329–2344.
[4] M. Böhm, V.-T. Pham, and A. Roychoudhury, “Coverage-based Grey-box Fuzzing as Markov Chain,” in Proceedings of CCS’16, 2016, pp. 1032–1043.
...
[47] M. Zalewski, “American Fuzzy Lop,” 2017, http://lcamtuf.coredump.cx/afl/.

[5] K. Böttinger and C. Eckert, “Deepfuzz: Triggering vulnerabilities deeply hidden in binaries,” in Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2016, pp. 25–34.
...
[10] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing Mayhem on Binary Code,” in 2012 IEEE Symposium on Security and Privacy, 2012, pp. 380–394.
...
[45] T. Xie, N. Tillmann, J. de Halleux, and W. Schulte, “Fitness-guided path exploration in dynamic symbolic execution,” in IEEE/IFIP International Conference on Dependable Systems & Networks., 2009, pp. 359–368.
...
[46] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing,” in Proceedings of the 27th USENIX Security Symposium, 2018.