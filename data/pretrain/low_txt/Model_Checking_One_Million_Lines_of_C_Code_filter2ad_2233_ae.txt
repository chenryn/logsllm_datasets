### Rootkit Installation and Vulnerability Surfaces

A rootkit, as illustrated in Figure 19, is not directly comparable to the one found in Ubuntu 8.04 with AppArmor due to differences in their vulnerability surfaces. Common attack vectors include `sshd` and `rpc.mountd` (NFS mount daemon). In Ubuntu 8.04, unique attack paths exist through `apache2`, `mysqld`, and `named` because these services are not confined. For SUSE Linux Enterprise Server (SLES) 10, the unique path is through `cupsd`, which is also unconfined. Additionally, `sshd` contributes to some unique paths in SLES 10 due to the presence of more installed shells.

In SLES 10, the host attack graph for a remote attacker to install a rootkit (Figure 16) highlights the specific vulnerabilities. The attack graph for a local attacker to install a rootkit in SLES 10 is shown in Figure 20, revealing 10 common attack paths due to unconfined setuid root programs. There are 9 unique attack paths for Ubuntu 8.04 and 20 unique attack paths for SLES 10.

### Different Versions of SELinux

Our analysis indicates that the SELinux policy in Fedora 8, which uses the SELinux targeted policy, provides significantly better protection than the SELinux policy in Ubuntu 8.04 Server Edition, which employs a version of the SELinux reference policy. Moreover, the most current version of the SELinux reference policy is more restrictive than the one included with Ubuntu 8.04.

Figure 17 illustrates the host attack graph for a remote attacker to install a rootkit in Fedora 8 with SELinux. The vulnerability surface is not directly comparable to that of Ubuntu 8.04 (Figure 10) because each system has distinct attack paths. Assuming all programs are equal, the vulnerability surface of Fedora 8/SELinux is smaller, with 1 length-1 minimal attack path and 13 length-2 minimal attack paths, compared to 6 length-1 and 97 length-2 minimal attack paths in Ubuntu 8.04/SELinux.

Figure 18 shows the host attack graph for a remote attacker to leave a strong trojan in Fedora 8 with SELinux. Compared to the kernel module loading scenario, the trojan attack scenario includes three additional minimal attack paths:
- `/usr/sbin/rpc.mountd`
- `/usr/sbin/smbd`
- `/usr/sbin/sendmail /usr/bin/procmail`

Two of these paths are related to file sharing, while the other is due to `initproc`.

### The Need to Consider DAC Policy

Our approach considers both the MAC (Mandatory Access Control) and DAC (Discretionary Access Control) policies. If only the MAC policy, such as SELinux, is considered, the results may be inaccurate. Figure 21 shows the host attack graph for a remote attacker to install a rootkit when only the SELinux policy is considered, excluding the DAC policy. This results in extra length-1 attack paths: `/sbin/portmap`, `/sbin/rpc.statd`, `/usr/sbin/mysqld`, `/usr/sbin/named`, and `/sbin/dhclient`. These paths are not accurate because, for example, `mysqld` runs with uid 110 and is unconfined. Compromising `mysqld` allows the attacker to control the unconfined domain but does not enable them to load a kernel module due to the lack of root privileges. To gain root access, the attacker would need to exploit another setuid root program.

### Performance

In our experiments, the targeted operating systems (Ubuntu, Fedora, and SUSE Linux) were installed in virtual machines using VMware. The host attack graph generation and analysis were performed on a laptop with an Intel(R) Pentium(R) M processor at 1.80GHz and 1GB of memory. The Prolog engine used was swi-prolog 5.6.14.

The fact collector ran in under 10 minutes for every test case, and the host attack graph generation and analysis took less than 10 minutes for each test case.

### Conclusions

In this paper, we introduce the concept of vulnerability surfaces under attack scenarios as a measure of the Quality of Protection (QoP) offered by Mandatory Access Control (MAC) systems for Linux. A vulnerability surface consists of the set of minimal attack paths necessary and sufficient for an attack scenario to be realized. The surface depends on the MAC mechanism, the specific MAC policy, the DAC policy settings, and the system configuration information. We have developed a tool called VulSAN to compute such vulnerability surfaces for Linux systems with SELinux or AppArmor. VulSAN generates the host attack graph for a given attack scenario and computes the vulnerability surface from the attack graph. It can be used to compare the QoP of different Linux distributions and as a system hardening tool, enabling system administrators to analyze and reduce the vulnerability surface. Because VulSAN supports both SELinux and AppArmor, it is applicable to most enterprise and home user Linux distributions. Our evaluation of VulSAN through the analysis and comparison of SELinux and AppArmor in several recent Linux distributions revealed opportunities to tighten policy settings in popular Linux distributions.

### Acknowledgements

This work is supported by NSF CNS-0448204 (CAREER: Access Control Policy Verification Through Security Analysis And Insider Threat Assessment) and by sponsors of CERIAS. We thank the NDSS anonymous reviewers for their helpful comments. Special thanks to Crispin Cowan, the shepherd of our paper, for suggesting the potential use of VulSAN as a system hardening tool and providing valuable suggestions for improving the paper.

### References

[1] Apparmor application security for Linux. <http://www.novell.com/linux/security/apparmor/>

[2] Apparmor development. <http://developer.novell.com/wiki/index.php/Apparmor>

[3] SELinux for distributions. <http://selinux.sourceforge.net>

[4] D. E. Bell and L. J. LaPadula. Secure computer systems: Unified exposition and Multics interpretation. Technical Report ESD-TR-75-306, Mitre Corporation, Mar. 1976.

[5] C. Cowan, S. Beattie, G. Kroah-Hartman, C. Pu, P. Wagle, and V. D. Gligor. Subdomain: Parsimonious server security. In Proceedings of the 14th Conference on Systems Administration (LISA 2000), pages 355–368, Dec. 2000.

[6] T. Fraser. LOMAC: Low water-mark integrity protection for COTS environments. In Proc. IEEE Symposium on Security and Privacy, May 2000.

[7] T. Fraser. LOMAC: MAC you can live with. In Proceedings of the FREENIX Track: USENIX Annual Technical Conference, June 2001.

[8] J. D. Guttman, A. L. Herzog, J. D. Ramsdell, and C. W. Skorupka. Verifying information flow goals in security-enhanced Linux. Journal of Computer Security, 13(1):115–134, 2005.

[9] B. Hicks, S. Rueda, L. S. Clair, T. Jaeger, and P. D. McDaniel. A logical specification and analysis for SELinux MLS policy. In SACMAT, pages 91–100, 2007.

[10] S. Hinrichs and P. Naldurg. Attack-based domain transition analysis. In Annual Security Enhanced Linux Symposium, 2006.

[11] M. Howard. Mitigate security risks by minimizing the code you expose to untrusted users. MSDN Magazine, November 2004.

[12] M. Howard, J. Pincus, and J. M. Wing. Measuring relative attack surfaces. In Proceedings of Workshop on Advanced Developments in Software and Systems Security, December 2003.

[13] T. Jaeger, R. Sailer, and X. Zhang. Analyzing integrity protection in the SELinux example policy. In Proceedings of the 12th USENIX Security Symposium, pages 59–74, August 2003.

[14] T. Jaeger, X. Zhang, and F. Cacheda. Policy management using access control spaces. ACM Trans. Inf. Syst. Secur., 6(3):327–364, 2003.

[15] A. Leitner. Novell and Red Hat security experts face off on AppArmor and SELinux counterpoint. Linux Magazine, (69), 2006.

[16] N. Li, Z. Mao, and H. Chen. Usable mandatory integrity protection for operating systems. In Proc. IEEE Symposium on Security and Privacy, May 2007.

[17] P. K. Manadhata, K. M. C. Tan, R. A. Maxion, and J. M. Wing. An approach to measuring a system’s attack surface. Technical Report CMU-CS-07-146, CMU, August 2007.

[18] P. Naldurg, S. Schwoon, S. K. Rajamani, and J. Lambert. NETRA: Seeing through access control. In FMSE, pages 55–66, 2006.

[19] NSA. Security enhanced Linux. <http://www.nsa.gov/selinux/>

[20] X. Ou, W. F. Boyer, and M. A. McQueen. A scalable approach to attack graph generation. In Proceedings of the 13th ACM conference on Computer and communications security, pages 336–345, New York, NY, USA, 2006. ACM.

[21] B. Sarna-Starosta and S. D. Stoller. Policy analysis for security-enhanced Linux. In Proceedings of the 2004 Workshop on Issues in the Theory of Security (WITS), pages 1–12, April 2004.

[22] O. Sheyner, J. Haines, S. Jha, R. Lippmann, and J. M. Wing. Automated generation and analysis of attack graphs. In Proceedings of the 2002 IEEE Symposium on Security and Privacy, page 273, Washington, DC, USA, 2002. IEEE Computer Society.

[23] S. Smalley, C. Vance, and W. Salamon. Implementing SELinux as a Linux security module. Technical Report 01-043, NAI Labs, December 2001.

[24] Tresys Technology, SETools - Tools for SELinux policy analysis. Available at <http://oss.tresys.com/projects/setools>.

[25] G. Zanin and L. V. Mancini. Towards a formal model for security policies specification and validation in the SELinux system. In Proc. ACM Symposium on Access Control Models and Technologies (SACMAT), pages 136–145, 2004.