### 7. Related Work

Event-driven (callback-based) programming is widely used in implementing graphical user interfaces (GUIs) and web systems. For the static analysis of GUI systems, previous work [30, 31] leverages domain-specific knowledge to identify and configure entry point (callback) methods. In web systems, event handler functions are easily identifiable due to their uniform definitions. However, in Android, the large number of entry point types makes complete identification challenging—previous work relied on specific domain knowledge to detect common component entry points without ensuring completeness [21]. We propose a heuristic-based approach to discover all possible entry points with low false positives.

To model the execution of multiple entry points, prior studies [30, 31] use a synthetic main function to mimic the event loop dispatcher in GUI systems. Our approach introduces Split Data Summarization (SDS) to summarize intra-split data flows and permute the splits to model asynchronous invocations, thereby deriving inter-split data flow behaviors. Compared to [30, 31], we divide the global data flow analysis problem into smaller, self-contained sub-problems, which improves performance and scalability.

Static analysis and model checking have a long history in vulnerability detection [9, 18, 26, 28]. For web systems, Jovanovic et al. developed Pixy [26] to detect input validation flaws in PHP server-side scripts through inter-procedural, context-sensitive data flow analysis. Similar studies have been conducted for cross-site scripting vulnerabilities [33]. Bandhakavi et al. applied context-sensitive and flow-sensitive static analysis to detect security vulnerabilities in Firefox plugins written in JavaScript [7]. For Java programs, Livshits et al. designed a Datalog language to describe security policies for vulnerability detection [28], and Tripp et al. built an industrial-strength static taint analysis tool [32].

In comparison, our work focuses on detecting component hijacking vulnerabilities in Android apps. We address general challenges faced by static app analyzers due to Android's unique programming paradigm and propose a data-flow-based detection approach.

Security mechanisms based on information flows, such as JIF [29], HiStar [34], and Asbestos [13], are related in that they define and detect component hijacking using data flow policies, although they do not enforce these policies at runtime.

Mobile security issues have gained significant attention. Malware is prevalent in both official and alternative Android markets [36]. Research efforts have focused on detecting repackaged apps [35] or apps with known malicious behavior [21, 37]. Google has also launched a malware filtering engine [1]. Information leakage is another major threat. Kirin [17] detects apps with permissions indicating potential leaks, while TaintDroid [15] uses dynamic taint analysis to detect information leaks at runtime. PiOS [14] addresses the same problem using static analysis for iPhone apps.

Information leakage detection reveals the potential outbound propagation of sensitive information, which may be benign in many cases. In contrast, component hijacking detection captures information leaks resulting from exploitation (e.g., sensitive data theft) and other hijacking types.

Enck et al. introduced Ded [16] to convert Dalvik bytecode to Java bytecode and then decompile it to obtain the source code for analysis. Our Dalysis framework directly converts Dalvik bytecode to Static Single Assignment (SSA) Intermediate Representation (IR), enabling various types of static analysis. Unlike decompilation, our IR conversion is sound and faster. We model the Android framework and its special programming paradigm, making our analysis more tailored for Android apps and thus more precise.

Android uses a permission system to mediate access to protected resources. However, its effectiveness depends on correct implementation by app developers. Chin et al. showed that apps can be exploitable when servicing external intents [10]. They developed ComDroid to identify publicly exported components and warn developers about potential threats. ComDroid checks app metadata and specific API usages, rather than performing in-depth program analysis like CHEX. Therefore, warned public components may not necessarily be exploitable or harmful.

The Android permission system is also susceptible to classic confused deputy attacks [23]. Unprivileged malicious apps can access permission-protected resources through privileged agents (or app components) that do not properly enforce permission checks [11, 20, 21, 27]. Recent runtime mitigations either reduce the agent’s effective permissions to those of the original requester [20] or inspect IPC chains for implicit permission escalations [8, 12]. While these runtime solutions protect end users, scalable detection methods for problematic agents (i.e., hijack-able components) are essential to prevent vulnerable apps from reaching a wide user base. Grace et al. [21] used intra-procedural, path-sensitive static analysis to discover permission leaks in stock apps from multiple device vendors. In comparison, CHEX targets a broader range of vulnerabilities in all types of Android apps and performs inter-procedural analysis with high sensitivity. Thanks to our novel entry point discovery and app-splitting techniques, CHEX can accommodate Android’s special programming paradigm and find complex hijack-enabling flows.

It is noteworthy that the component hijacking attacks we address include, but are not limited to, attacks targeting permission-protected resources.

### 8. Conclusions

In conclusion, we defined and studied the component hijacking problem, a general category of vulnerabilities found in Android apps. By modeling these vulnerabilities from a data-flow perspective, we designed a static analyzer, CHEX, to detect hijack-enabling data flows in a large volume of apps. We introduced a method to automatically discover entry points in Android apps and a novel analysis technique, app splitting, as an efficient and accurate way to model executions of multiple entry points and facilitate global data-flow analysis. We also built the Dalysis framework to support various types of static analysis directly performed on Android bytecode. The CHEX prototype was implemented based on Dalysis and evaluated with 5,486 real-world apps. Empirical experiments demonstrated satisfactory scalability and performance, providing insights into the real-world vulnerable apps detected.

### 9. Acknowledgements

The authors would like to thank the anonymous reviewers for their helpful comments on earlier versions of the paper. We also thank Ahmad-Reza Sadeghi for his thoughtful feedback, which guided the final revisions. Wenke Lee and Long Lu were partially supported by the National Science Foundation under grant no. 0831300, the Department of Homeland Security under contract no. FA8750-08-2-0141, and the Office of Naval Research under grants no. N000140710907 and no. N000140911042. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation, the Department of Homeland Security, or the Office of Naval Research.

### 10. References

[1] Android and security.
http://googlemobile.blogspot.com/2012/02/android-and-security.html.

[2] Baksmali: a disassembler for Android’s dex format.
http://code.google.com/p/smali/.

[3] Google’s 10 billion android app downloads.
www.wired.com/gadgetlab/2011/12/10-billion-apps-detailed/.

[4] Quality of Android market apps is pathetically low.
http://www.huffingtonpost.com/2011/06/20/android-market-quality_n_880478.html.

[5] WALA: T.J. Watson libraries for analysis.
http://wala.sourceforge.netl.

[6] Android application components.
http://developer.android.com/guide/topics/fundamentals.html#Components, 2012.

[7] BANDHAKAVI, S., KING, S. T., MADHUSUDAN, P., AND WINSLETT, M. Vex: vetting browser extensions for security vulnerabilities. In Proceedings of the 19th USENIX Security Symposium (2010).

[8] BUGIEL, S., DAVI, L., DMITRIENKO, A., FISCHER, T., AND SADEGHI, A.-R. Xmandroid: A new android evolution to mitigate privilege escalation attacks. Tech. Rep. TR-2011-04, Technische Universitat Darmstadt, 2011.

[9] CHEN, H., AND WAGNER, D. Mops: an infrastructure for examining security properties of software. In Proceedings of the 9th ACM CCS (2002).

[10] CHIN, E., FELT, A. P., GREENWOOD, K., AND WAGNER, D. Analyzing inter-application communication in android. In Proceedings of the 9th MobiSys (2011).

[11] DAVI, L., DMITRIENKO, A., SADEGHI, A.-R., AND WINANDY, M. Privilege escalation attacks on android. In Proceedings of the 13th ISC (2010).

[12] DIETZ, M., SHEKHAR, S., PISETSKY, Y., SHU, A., AND WALLACH, D. S. Quire: Lightweight provenance for smart phone operating systems. In Proceedings of the 20th USENIX Security Symposium (2011).

[13] EFSTATHOPOULOS, P., KROHN, M., VANDEBOGART, S., FREY, C., ZIEGLER, D., KOHLER, E., MAZIÈRES, D., KAASHOEK, F., AND MORRIS, R. Labels and event processes in the asbestos operating system. In Proceedings of the 20th ACM SOSP (2005).

[14] EGELE, M., KRUEGEL, C., KIRDA, E., AND VIGNA, G. PiOS: Detecting privacy leaks in iOS applications. In Proceedings of the 19th NDSS (2011).

[15] ENCK, W., GILBERT, P., CHUN, B.-G., COX, L. P., JUNG, J., MCDANIEL, P., AND SHETH, A. N. Taintdroid: an information-flow tracking system for realtime privacy monitoring on smartphones. In Proceedings of the 9th USENIX OSDI (2010).

[16] ENCK, W., OCTEAU, D., MCDANIEL, P., AND CHAUDHURI, S. A study of android application security. In Proceedings of the 20th USENIX Security Symposium (2011).

[17] ENCK, W., ONGTANG, M., AND MCDANIEL, P. On lightweight mobile phone application certification. In Proceedings of the 16th ACM CCS (2009).

[18] FELMETSGER, V., CAVEDON, L., KRUEGEL, C., AND VIGNA, G. Toward automated detection of logic vulnerabilities in web applications. In Proceedings of the 19th USENIX Security Symposium (2010).

[19] FELT, A. P., CHIN, E., HANNA, S., SONG, D., AND WAGNER, D. Android permissions demystified. In Proceedings of the 18th ACM CCS (2011).

[20] FELT, A. P., WANG, H. J., MOSHCHUK, A., HANNA, S., AND CHIN, E. Permission re-delegation: attacks and defenses. In Proceedings of the 20th USENIX Security Symposium (2011).

[21] GRACE, M., ZHOU, Y., WANG, Z., AND JIANG, X. Systematic detection of capability leaks in stock Android smartphones. In Proceedings of the 19th NDSS (2012).

[22] GUNDOTRA, V., AND BARRA, H. Android: Momentum, mobile and more at Google I/O.
http://www.google.com/events/io/2011/.

[23] HARDY, N. The confused deputy: (or why capabilities might have been invented). SIGOPS Oper. Syst. Rev. 22, 4 (1988), 36–38.

[24] HORNYACK, P., HAN, S., JUNG, J., SCHECHTER, S., AND WETHERALL, D. These aren’t the droids you’re looking for: retrofitting Android to protect data from imperious applications. In Proceedings of the 18th ACM CCS (2011).

[25] HORWITZ, S., REPS, T., AND BINKLEY, D. Interprocedural slicing using dependence graphs. SIGPLAN Not. 23, 7 (1988), 35–46.

[26] JOVANOVIC, N., KRUEGEL, C., AND KIRDA, E. Pixy: A static analysis tool for detecting web application vulnerabilities (short paper). In Proceedings of the IEEE S&P’06 (2006).

[27] LINEBERRY, A., RICHARDSON, D. L., AND WYATT, T. These aren’t permissions you’re looking for. In Proceedings of the Blackhat’10 (2010).

[28] LIVSHITS, V. B., AND LAM, M. S. Finding security vulnerabilities in Java applications with static analysis. In Proceedings of the 14th USENIX Security Symposium (2005).

[29] MYERS, A. C. Jflow: practical mostly-static information flow control. In Proceedings of the 26th ACM POPL (1999).

[30] STAIGER, S. Reverse engineering of graphical user interfaces using static analyses. In Proceedings of the 14th IEEE WCRE (2007).

[31] STAIGER, S. Static analysis of programs with graphical user interface. In Proceedings of the 11th IEEE CSMR (2007).

[32] TRIPP, O., PISTOIA, M., FINK, S. J., SRIDHARAN, M., AND WEISMAN, O. TAJ: effective taint analysis of web applications. In Proceedings of the ACM PLDI ’09 (2009).

[33] WASSERMANN, G., AND SU, Z. Static detection of cross-site scripting vulnerabilities. In Proceedings of the 30th ACM ICSE (2008).

[34] ZELDOVICH, N., BOYD-WICKIZER, S., KOHLER, E., AND MAZIÈRES, D. Making information flow explicit in HiStar. In Proceedings of the 7th USENIX OSDI (2006).

[35] ZHOU, W., ZHOU, Y., JIANG, X., AND NING, P. DroidMOSS: Detecting repackaged smartphone applications in third-party Android. In Proceedings of ACM CODASPY’12 (2012).

[36] ZHOU, Y., AND JIANG, X. Dissecting Android malware: Characterization and evolution. In Proceedings of the IEEE Symposium on S&P’12 (2012).

[37] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, you, get off of my market: Detecting malicious apps in official and alternative Android markets. In Proceedings of the 20th NDSS (2012).