### Audit Report

#### 4.1 Executive Summary
This audit report details the findings of an audit conducted on AuditApp in April 2004 by Herschel Gelman. Since AuditApp is hosted by a web hosting company, the audit focused on the aspects of the application under the site owner's control, including the code and configuration options provided by the hosting company.

All tested vulnerabilities were within the medium-risk range, with some at the lower end and others at the higher end of this spectrum. The audit checklist included ten items, all of which were successfully tested. The site passed nine out of the ten tests, failing only one (item number 004) with a medium-low risk assessment.

#### 4.2 Audit Findings
The audit was unique as it involved a one-person operation, making certain standard requirements, such as comprehensive security policies and procedures, inapplicable. However, if the site expands to include additional staff, a new assessment may be necessary to ensure best practices are followed.

Detailed findings for each test are provided below. More detailed descriptions of the testing procedures and results can be found in sections 2 and 3 of this document. All but one test were passed; the failed test is discussed in section 4.2.4.

##### 4.2.1 Check for Hidden Comments in HTML
The site contained minimal HTML comments, none of which disclosed any information that could be used by an attacker. An example of a typical comment is:

```html
<!-- This is a sample comment -->
```

##### 4.2.2 Session Hijacking via Cookie Manipulation
The site uses session cookies securely, leveraging PHP’s session management functions. Additionally, the web hosting company ensures the secure storage of session data on their servers.

##### 4.2.3 SQL Injection
The site is currently not vulnerable to SQL injection attacks due to the use of PHP’s `magic_quotes_gpc` setting. However, if this setting is disabled, many pages contain vulnerable code. For instance, the following code from `authenticate.php` is vulnerable:

```php
$auth = $_GET['auth'];
$result = @mysql_query("SELECT * FROM user_auth WHERE auth='$auth'");
```

While the site is currently safe, the code can be improved. See the recommendations in section 4.3.2.1 and the findings in section 3.3.2 for more information.

##### 4.2.4 Test for Adequate Safeguards Against Bandwidth Theft
The site failed this test, as no safeguards are in place to protect against bandwidth theft. Anyone can create web pages linking to images stored on AuditApp, potentially leading to excessive bandwidth usage and potential denial of service. While the risk is low, it is recommended to address this issue.

##### 4.2.5 Scan for Sample Files or Scripts
The site passed this test, with no sample files or scripts present.

##### 4.2.6 Test Backup Procedures
The site passed this test, with automated nightly backups of the PHP and HTML code on the development server and the database on the production server. The database backups are manually copied to the development server daily. Although the manual step is a minor concern, automating it would introduce additional security issues.

##### 4.2.7 Unsafe Hidden Form Elements
The site had no unsafe hidden form elements and passed this test. However, there were several hidden form elements that could have been implemented more securely.

##### 4.2.8 Ensure Directory Browsing Settings Are Correct
The five subdirectories on the website either require authentication or refuse to generate directory listings, passing this test.

##### 4.2.9 Attempt to Brute Force Administrative Account
A brute force attack on the administrator’s account was unsuccessful. However, with only one administrative account, the site owner should pay close attention to this item when more accounts are created.

##### 4.2.10 Verify Security of Any Client-Side JavaScript
Only one instance of client-side scripting was found, which is a simple cursor focus script with no security implications. The site passed this test.

#### 4.3 Audit Recommendations

##### 4.3.1 Highly Recommended Actions

###### 4.3.1.1 Protect Against Bandwidth Theft
**Description:**
While this is a low-risk item, implementing protection against bandwidth theft is recommended to prevent potential denial of service. 

**Costs:**
The cost to correct this is minimal, estimated at most one hour of the site owner’s time.

**Compensating Controls:**
No compensating controls are needed due to the low cost of mitigation.

##### 4.3.2 Lower Priority Recommendations

###### 4.3.2.1 SQL Injection
To ensure security regardless of the `magic_quotes_gpc` setting, a function should be written to escape dangerous characters if the setting is disabled. This would provide guaranteed protection against SQL injection attacks.

###### 4.3.2.2 Hidden Form Elements
Replace the 11 hidden form elements with session variables for a cleaner and more secure implementation.

###### 4.3.2.3 Future Password Safety
As additional administrative accounts are created, incorporate password checks into the PHP code and perform offline password cracking attempts against the MD5 hashes stored in the database to ensure strong passwords.

#### References
- Atkinson, K. (2003). “Kevin’s word list page.”
- “Brutus: the remote password cracker.”
- Curphey, M., Endler, D., Hau, W., Taylor, S., Smith, T., et al. (2002). “A guide to building secure web applications: the open web application security project.” Version 1.1.1.
- Fredholm, W. (2003). “Web application security: layers of protection.” SANS InfoSec Reading Room: Security White Papers.
- Harper, M. (2002). “SQL injection attacks: are you safe?” Sitepoint.
- Hendrickx, Michael (2004). “Lilith: web application auditing.”
- Ollmann, Gunter (2003). “Application assessment questioning.”
- Pisetsky, A. (2002). “Securing e-commerce web sites.” SANS InfoSec Reading Room: Security White Papers.
- Rafail, J. (2001). “Cross-site scripting vulnerabilities.”
- Shiarla, M. (2002). “Cross-sight scripting vulnerabilities [sic].” SANS InfoSec Reading Room: Security White Papers.
- “SQL injection walkthrough.” SecuriTeam.
- “Web application security archive.” SecurityFocus.
- “Web application security mailing list charter v1.0.” SecurityFocus.
- “Webscarab.” The Open Web Application Security Project.

**Last Updated: December 11th, 2011**

**Upcoming SANS IT Audit Training**

© SANS Institute 2004, Author retains full rights.
Key fingerprint = AF19 FA27 2F94 998D FDB5 DE3D F8B5 06E4 A169 4E46
© SANS Institute 2004, As part of GIAC practical repository.
Author retains full rights.
Herschel Gelman SANS GSNA Practical Assignment
Version 3.1 — Option 1