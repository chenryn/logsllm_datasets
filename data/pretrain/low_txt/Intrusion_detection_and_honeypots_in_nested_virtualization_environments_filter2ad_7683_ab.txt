### Optimized Text

#### Performance Impact of Nested Virtualization
While it is possible to achieve better performance, our measurements indicate that nested virtualization can significantly impact overall performance. In the best-case scenario, the CPU performance overhead (KVM/KVM) is negligible. However, the I/O overhead remains a more substantial concern. To mitigate this, paravirtualized drivers for network and disk operations should be used, as they significantly reduce the virtualization overhead. Based on these findings, we decided to focus on KVM/KVM for subsequent experiments involving virtual-machine introspection and nested virtualization.

#### VMI and Nested Virtualization

**A. VMI-based IDS and Honeypots**

Intrusion Detection Systems (IDS) have a long history in both research and practical applications. They are classified into Network-based (NIDS) and Host-based (HIDS) systems. An IDS is a software component designed to detect malicious or unauthorized activity by monitoring and analyzing operating system behavior (HIDS) or network traffic (NIDS).

Open-source tools like OSSEC4 implement HIDS by running a monitor agent on the observed machine to analyze logs, operating system events, and file systems. Approaches such as those described by Warrender et al. [12] use different patterns to detect attacks based on system calls. A key challenge for host-based intrusion detection systems is that an attacker can modify the monitor agent and subvert the information acquired from the system.

Virtualization-based IDS, first proposed by Garfinkel et al. [13], offer a promising solution to the problem of host-based IDS. However, this approach introduces the challenge of interpreting guest memory contents in a host environment, known as the semantic gap, which is an ongoing area of research [14]. Practical implementations for virtual-machine introspection (VMI) are available5.

Honeypots are primarily used to capture and analyze malicious behavior. They can be categorized into low-interaction honeypots, which partially simulate service behavior, and high-interaction honeypots (HiH), which are complete, vulnerable systems. While low-interaction honeypots are easier to deploy, HiHs provide a more accurate reproduction of real production systems, allowing for a better study of attacks. Both HIDS and HiHs share the common attribute of detecting abnormal behavior, and events triggered by malicious actions can be routed to a human analyst for further investigation.

Given these similarities, we chose to use a honeypot framework in our evaluation as a representative example of HiH honeypots and IDS systems.

**B. VMI-Honeymon**

VMI-Honeymon [5] is a virtualization-based hybrid honeypot framework built on open-source tools (libVMI, libvirt, libguestfs, and Volatility). It uses full virtualization, making it compatible with any guest operating system for the HiH. No modifications to the underlying hypervisor are required. Unlike traditional HIDS systems, VMI-Honeymon does not need an in-guest agent in the honeypot system.

As shown in Figure 2, VMI-Honeymon utilizes Honeybrid [15], a hybrid honeypot system that controls network traffic and provides attack-filtering functionality. It manages the combined use of a low-interaction honeypot (Nepenthes) and a high-interaction honeypot (e.g., a complete, vulnerable Windows XP installation). Honeybrid controls connections to the high-interaction honeypot and notifies VMI-Honeymon when the HiH should be inspected using VMI and disk snapshots.

**C. Experiences with the Real System**

To evaluate a real VMI-based honeypot system in nested virtualization environments, we used VMI-Honeymon on both a single-level KVM system and a nested KVM/KVM environment. Since we used a Windows XP operating system in the high-interaction honeypot, we could not use hypervisors that employ paravirtualization at the inner level (L2). The standard network configuration provided by VMI-Honeymon was used in single-level virtualization, but additional work was required for handling network communication in a nested system. For nested (two-level) virtualization, network address translation (NAT) was used at both hypervisor levels.

When an attack occurs on the HiH, Honeybrid triggers VMI-Honeymon to analyze the attack and revert the HiH to its original state. We measured the time required for VMI-Honeymon to complete its operation. Figure 3 shows the results of our experiments, repeated for both single-level (KVM) and nested (KVM/KVM) virtualization. The figure displays the time needed for HiH analysis, HiH reversion, and the total time from the start of the check until VMI-Honeymon signals Honeybrid that a clean, reverted HiH is available again. The results show that there is almost no impact on the reversion operation, but the HiH introspection and analysis suffer from an approximately 69% increase in execution time.

**D. Moving to the Cloud**

Currently, major cloud providers do not support nested virtualization. Upon direct inquiry, some providers (Rackspace, vServer Center) indicated that they do not plan to support nested virtualization. Therefore, implementing a Nested-IDS in a public cloud environment is currently not feasible due to provider restrictions. One technical reason for this is that most providers run custom versions of hypervisors. For example, Amazon6 uses a modified Xen hypervisor that differs significantly from the standard Xen. The necessary modifications to their environments would require costly adaptations.

However, in the long term, we expect that support for nested virtualization will become available in public clouds, offering significant benefits for implementing security and dependability mechanisms. With nested virtualization, cloud users can set up their own hypervisors to implement a Nested-IDS, thereby enhancing the security of their virtual instances without relying on the cloud provider.

#### Related Work

XenBlanket [16] takes a different approach to nested virtualization in public clouds. The goal of XenBlanket is to implement nested virtualization without support from the lower-level hypervisor. As current public cloud providers do not provide HVM features to guest virtual machines, this approach requires either paravirtualization or binary translation at the L2 level. The authors presented a working paravirtualized Xen as an L2 hypervisor, supporting paravirtualized guest systems. Using non-paravirtualized guest operating systems would require additional binary translation, which the authors did not evaluate. Given our requirement for a non-paravirtualized Windows XP-based high-interaction honeypot, we excluded XenBlanket from our study.

Multiple approaches have been taken towards intrusion detection systems in the cloud. CIDS (Cloud Intrusion Detection System) [17] offers both HIDS and NIDS functionality and is integrated into the cloud infrastructure at the VMM level. This means that CIDS components are isolated from the guest VMs, but it can only be deployed by the cloud provider, not by a cloud customer. Combining CIDS with nested virtualization could eliminate this limitation.

IDSaaS (Intrusion Detection System as a Service) [18] allows cloud users to use an IDS without requiring support from the cloud provider. IDSaaS is a signature-based network intrusion detection system that establishes a virtual network environment between cloud-hosted services and the IDS using VPC (Virtual Private Cloud) Amazon service. While this approach is suitable for NIDS, it is not feasible for VMI-based HIDS, which require support at the VMM level.

#### Conclusion

In this paper, we have shared our experiences with nested virtualization and its application to intrusion detection and honeypots. Although nested virtualization on x86 hardware is still in its early stages, more products are beginning to support it. Our experiments show that there are significant performance impacts, highlighting the importance of careful solution and configuration choices.

Nested virtualization is highly useful for complementing production systems in the cloud with intrusion detection and for deploying honeypot infrastructures on IaaS clouds. Even though current major cloud providers do not plan to support nested virtualization, we anticipate that this will change in the future. Nested virtualization is a promising approach that allows cloud users to enhance the security and dependability of their cloud-based applications, independent of specific mechanisms offered by the cloud provider.

#### References

[1] C. Clark, K. Fraser, S. Hand, J. G. Hansen, E. Jul, C. Limpach, I. Pratt, and A. Warfield, “Live migration of virtual machines,” in Proc. of the 2nd Symposium on Networked Systems Design & Implementation (NSDI’05). USENIX Association, 2005, pp. 273–286.

[2] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: a tiny hypervisor to provide lifetime kernel code integrity for commodity OSes,” SIGOPS Oper. Syst. Rev., vol. 41, no. 6, pp. 335–350, Oct. 2007.

[3] T. Distler, R. Kapitza, I. Popov, H. P. Reiser, and W. Schröder-Preikschat, “SPARE: Replicas on hold,” in Proc. of the 18th Network and Distributed System Security Symposium (NDSS ’11), 2011, pp. 407–420.

[4] X. Jiang, X. Wang, and D. Xu, “Stealthy malware detection through VMM-based ‘out-of-the-box’ semantic view reconstruction,” in Proc. of the 14th ACM Conf. on Computer and Communications Security (CCS’07). ACM, 2007, pp. 128–138.

[5] T. K. Lengyel, J. Neumann, S. Maresca, B. D. Payne, and A. Kayias, “Virtual machine introspection in a hybrid honeypot architecture,” in Proc. of the 5th Workshop on Cyber Security Experimentation and Test. USENIX Association, 2012.

[6] K. Adams and O. Agesen, “A comparison of software and hardware techniques for x86 virtualization,” SIGOPS Oper. Syst. Rev., vol. 40, no. 5, pp. 2–13, Oct. 2006.

[7] A. Graf and J. Roedel, “Add nested SVM (kernel) support,” Website, online available: http://thread.gmane.org/gmane.comp.emulators.kvm.devel/21119; accessed 2012-08-13.

[8] M. Ben-Yehuda, M. D. Day, Z. Dubitzky, M. Factor, N. Har’El, A. Gordon, A. Liguori, O. Wasserman, and B.-A. Yassour, “The Turtles project: design and implementation of nested virtualization,” in Proc. of the 9th USENIX Conf. on Operating Systems Design and Implementation (OSDI’10). USENIX Association, 2010, pp. 423–436.

[9] I. Campbell, “Xen 4.2 nested virtualization,” Website, online available at http://lists.xen.org/archives/html/xen-users/2012-10/msg00314.html; accessed 2012-02-28.

[10] O. Berghmans, “Nesting Virtual Machines in Virtualization Test Frameworks,” Master’s thesis, Universiteit Antwerpen, 2010.

[11] R. Russell, “virtio: towards a de-facto standard for virtual I/O devices,” SIGOPS Oper. Syst. Rev., vol. 42, no. 5, pp. 95–103, 2008.

[12] C. Warrender, S. Forrest, and B. A. Pearlmutter, “Detecting intrusions using system calls: alternative data models,” in Proc. of the IEEE Symposium on Security and Privacy, 1999, pp. 133–145.

[13] T. Garfinkel and M. Rosenblum, “A virtual machine introspection-based architecture for intrusion detection,” in Proc. of the Network and Distributed Systems Security Symposium, 2003, pp. 191–206.

[14] B. Dolan-Gavitt, T. Leek, M. Zhivich, J. Giffin, and W. Lee, “Virtuoso: narrowing the semantic gap in virtual machine introspection,” in Proc. of the 2011 IEEE Symposium on Security and Privacy, pp. 297–312, 2011.

[15] T. K. Lengyel, “Honeybrid: Hybrid honeypot framework,” Website, online available: http://honeybrid.sourceforge.net/; accessed: 2012-09-21.

[16] D. Williams, H. Jamjoom, and H. Weatherspoon, “The Xen-Blanket: virtualize once, run everywhere,” in Proc. of the 7th ACM European conference on computer systems (EuroSys’12). ACM, 2012, pp. 113–126.

[17] H. A. Kholidy and F. Baiardi, “CIDS: A framework for intrusion detection in cloud systems,” in 9th Int. Conf. on Information Technology: New Generations (ITNG), 2012, pp. 379–385.

[18] T. Alharkan and P. Martin, “IDSaaS: Intrusion detection system as a service in public clouds,” in Proc. of the 12th IEEE/ACM Int. Symp. on Cluster, Cloud and Grid Computing (CCGrid 2012), 2012, pp. 686–687.