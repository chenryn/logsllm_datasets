### Literature Review and Related Work

Efforts to improve the scalability and performance of Intrusion Detection Systems (IDSs) have been extensively documented in the literature. Initial approaches focused on multi-system setups for load sharing, with [36] and [49] concentrating on efficient traffic partitioning by flow. However, these methods lack the notion of analysis-specific scope.

[30] introduces a scheduler that divides traffic into independent subsets based on event spaces, which are manually defined by the IDS operator. The expressiveness of event spaces is limited, and they are oriented towards statically defining specific contexts (e.g., a specific subnet) rather than dynamic scopes. Additionally, this work only considers signature-based detection.

[31] proposes an IDS load-balancer that dynamically groups flows based on the similarity of header fields (e.g., source address, port). While this approach is simple, it relies on heuristic correlation, which may not align with the actual detector's scope. Other cluster-based approaches, such as [23] and [40], use a more traditional concurrency model (intra-node synchronization) but do not address parallelism within multi-core nodes.

Another body of work, including [28, 41, 43, 44], focuses on accelerating packet matching on parallel hardware, such as GPUs. These approaches are restricted to byte-level pattern matching, which simplifies parallelization but severely limits detection capabilities. In contrast, our work aims to parallelize arbitrary stateful analyses.

The work most closely related to ours is [37], which presents a parallel IDS design for multi-core architectures. This system incorporates the concept of per-handler scope, but scopes must be manually defined for each analysis and are limited to sets of protocol header fields. Our work extends this by presenting a concurrency model that is independent of the specific analysis and automatically derives the parallelization strategy.

Outside the realm of intrusion detection, variations of scope-based parallelization have been explored. Our approach is inspired by serialization sets [14], a generic parallel programming paradigm. In serialization sets, each shared object is associated with a serializer method that returns an object-specific key. The runtime uses this key to serialize computations that access the same shared object. We adapt this approach to the event-driven paradigm typical of packet processing and contribute efficient scheduling algorithms. Since our approach is domain-specific to IDSs, we can leverage the common structure of IDS programs to compute scheduling functions automatically, without requiring developer interaction.

The networking community has also contributed models aimed at parallel packet processing. [25] describes a parallel stateful packet processing system where processing blocks are composed in a data flow graph. The system supports a context-ordered mode, allowing logical blocks to be parallelized by applying serializers (termed context-designators) to the input stream. However, the rigid organization of processing in a pipeline makes this system more suitable for traffic processing/shaping than for intrusion detection, and developers are still required to manually specify serializers.

[24] outlines an approach to state manipulation, aiming to simplify the dynamic provision/consolidation of network appliances. State is divided into independent units using keys, i.e., combinations of protocol header fields. Our definition of scheduling functions can be seen as a generalization of this approach to state partitioning. [26] focuses on mapping IDS workloads to a set of distributed network nodes, with static traffic partitioning based on offline workload estimates, similar to [30].

[22] presents a parallel software router that optimizes the entire system stack for its specific application but does not easily generalize to other types of processing. [21] performs analysis of a pipelined software router using symbolic execution to derive the semantics of each component, while we use static analysis to generate precise executable slices.

The literature also includes several general-purpose programming APIs that take different approaches to parallelization (e.g., [3, 4, 17]). Our approach does not aim to be a general layer; instead, by limiting the scope to event-driven packet processing, we can keep the programming model simple and hide concurrency issues from the programmer. Architecture-specific parallel APIs, such as CUDA [2], require significant application-specific effort due to their restricted computational paradigm.

Historically, the High-Performance Computing (HPC) community has investigated compiler-based automatic parallelization, targeting scientific and numerical computations (e.g., [13, 15, 32, 33] and Chapter 11 of [12]). These approaches focus on loop vectorization and parallelization, which are well-suited for repetitive operations over large arrays. More recently, similar techniques have been proposed for batch processing workloads such as compression, machine learning, and text processing [42, 50]. Our work is similar in spirit, as it leverages domain-specific program features to extract parallelization. However, IDS programs have different requirements (real-time stream processing), for which we leverage different program features (state and computation structured around scopes).

[46] proposes the use of program slicing to partition a sequential program into parallel slices, determining instruction- and task-level parallelism. Conversely, we use it to infer high-level properties of the program (its scope), enabling extensive data-level parallelism.

Finally, Parcae [34] and Varuna [39] optimize the parallel execution of multi-threaded programs according to various metrics (time, resource consumption). We see these works as orthogonal, as they could be used to fine-tune the degree of parallelism in our approach.

### Conclusion

Traffic processing offers numerous opportunities for parallelism, but making IDSs scalable and flexible remains challenging. In this paper, we propose a domain-specific concurrency model that can support a wide range of IDS analyses without being tied to a specific detection strategy. Our technique partitions the stream of network events into subsets that the IDS can process independently and in parallel, ensuring that each subset contains all events relevant to a detection scenario. Our partitioning scheme is based on the concept of detection scope, i.e., the minimum "slice" of traffic that a detector needs to observe to perform its function. This concept has general applicability, supporting both simple, per-flow detection schemes (e.g., pattern/signature matching) and more complex, high-level detectors. We show that it is possible to use program analysis to determine the appropriate traffic partitioning automatically and at compile-time, and enforce it at run-time with a specialized scheduler.

Initial results are promising, demonstrating that our approach correctly partitions existing sequential IDS analyses without loss of accuracy, while exploiting the inherent concurrency potential of network traffic for throughput improvements.

### Acknowledgments

We thank Drew Davidson, Mohan Dhawan, Aaron Gember-Jacobson, Bill Harris, and Matthias Vallentin for their valuable suggestions, which greatly contributed to this paper. We also thank the anonymous reviewers and our shepherd, Michalis Polychronakis.

This work was supported by the US National Science Foundation under grants CNS-0915667, CNS-1228782, and CNS-1228792, and by a grant from the Cisco Research Center. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors or originators and do not necessarily reflect the views of the sponsors.

### References

[1] Bro hands-on workshop 2009.
http://www-old.bro-ids.org/bro-workshop-2009-2/, Feb. 2013.

[2] NVIDIA CUDA.
http://www.nvidia.com/object/cuda_home_new.html, Jan. 2013.

[3] OpenMP. http://openmp.org, Jan. 2013.

[4] Threading Building Blocks.
http://threadingbuildingblocks.org/, Jan. 2013.

[5] AMD Opteron 6300 series processors.
http://www.amd.com/en-us/products/server/6000/6300#, May 2014.

[6] Bro IDS. http://www.bro-ids.org/, May 2014.

[7] Checkpoint security - tales from the crypter.
http://www.checkpoint.com/threatcloud-central/articles/2014-01-20-Thwarting-Malware-Obfuscation.html, May 2014.

[8] Errata security: Fun with IDS funtime #3: heartbleed.
http://blog.erratasec.com/2014/04/fun-with-ids-funtime-3-heartbleed.html, May 2014.

[9] Intel Xeon processor e5-4657l v2.
http://ark.intel.com/products/75290/Intel-Xeon-Processor-E5-4657L-v2-30M-Cache-2_40-GHz, May 2014.

[10] Snort IDS. http://www.snort.org/, May 2014.

[11] Suricata IDS. http://suricata-ids.org/, May 2014.

[12] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman. Compilers: Principles, Techniques, and Tools. Addison-Wesley Longman Publishing Co., Inc., Boston, MA, USA, 2006.

[13] F. Allen, M. Burke, P. Charles, R. Cytron, and J. Ferrante. An overview of the PTRAN analysis system for multiprocessing. In ICS, 1987.

[14] M. D. Allen, S. Sridharan, and G. S. Sohi. Serialization sets: a dynamic dependence-based parallel execution model. In PPoPP, 2009.

[15] R. Allen and K. Kennedy. Automatic translation of FORTRAN programs to vector form. ACM Toplas, 9(4):491â€“542, 1987.

[16] T. Benson, A. Akella, and D. A. Maltz. Network traffic characteristics of data centers in the wild. In IMC, 2010.

[17] R. D. Blumofe, C. F. Joerg, B. C. Kuszmaul, C. E. Leiserson, K. H. Randall, and Y. Zhou. Cilk: an efficient multithreaded runtime system. In PPoPP, 1995.

[18] S. Bodmer, D. M. Kilger, G. Carpenter, and J. Jones. Reverse Deception: Organized Cyber Threat Counter-Exploitation. McGraw-Hill Osborne Media, 1st edition, July 2012.

[19] K. Borders, J. Springer, and M. Burnside. Chimera: a declarative language for streaming network traffic analysis. In USENIX, 2012.

[20] R. Cytron, J. Ferrante, B. K. Rosen, M. N. Wegman, and F. K. Zadeck. Efficiently computing static single assignment form and the control dependence graph. ACM Toplas, 13(4):451â€“490, 1991.

[21] M. Dobrescu and K. Argyraki. Software dataplane verification. In NSDI, 2014.

[22] K. Fall, G. Iannaccone, M. Manesh, S. Ratnasamy, K. Argyraki, M. Dobrescu, and N. Egi. RouteBricks: enabling general purpose network infrastructure. ACM SIGOPS Operating Systems Review, 45(1):112â€“125, 2011.

[23] L. Foschini, A. V. Thapliyal, L. Cavallaro, C. Kruegel, and G. Vigna. A parallel architecture for stateful, high-speed intrusion detection. In ICISS, 2008.

[24] A. Gember, P. Prabhu, Z. Ghadiyali, and A. Akella. Toward software-defined middlebox networking. In HotNets, 2012.

[25] H. Gill, D. Lin, T. Kothari, and B. T. Loo. Declarative multicore programming of software-based stateful packet processing. In DAMP, 2012.

[26] V. Heorhiadi, M. K. Reiter, and V. Sekar. New opportunities for load balancing in network-wide intrusion detection systems. In CoNEXT, 2012.

[27] S. Horwitz, T. Reps, and D. Binkley. Interprocedural slicing using dependence graphs. ACM TOPLAS, 12(1):26â€“60, 1990.

[28] M. A. Jamshed, J. Lee, S. Moon, I. Yun, D. Kim, S. Lee, Y. Yi, and K. Park. Kargus: a highly-scalable software-based intrusion detection system. In CCS, 2012.

[29] S. Kornexl, V. Paxson, H. Dreger, A. Feldmann, and R. Sommer. Building a time machine for efficient recording and retrieval of high-volume network traffic. In IMC, 2005.

[30] C. Kruegel, F. Valeur, G. Vigna, and R. Kemmerer. Stateful intrusion detection for high-speed networks. In IEEE S&P, 2002.

[31] A. Le, R. Boutaba, and E. Al-Shaer. Correlation-based load balancing for network intrusion detection and prevention systems. In SECURECOMM, 2008.

[32] K. McKinley. Automatic and Interactive Parallelization. PhD thesis, Rice University, Apr. 1992.

[33] D. A. Padua and M. J. Wolfe. Advanced compiler optimizations for supercomputers. Commun. ACM, 29(12):1184â€“1201, Dec. 1986.

[34] A. Raman, A. Zaks, J. W. Lee, and D. I. August. Parcae: a system for flexible parallel execution. In PLDI, 2012.

[35] T. Reps and G. Rosay. Precise interprocedural chopping. In SIGSOFT, 1995.

[36] L. Schaelicke, K. Wheeler, and C. Freeland. SPANIDS: a scalable network intrusion detection loadbalancer. In Computing Frontiers, 2005.

[37] R. Sommer, V. Paxson, and N. Weaver. An architecture for exploiting multi-core processors to parallelize network intrusion prevention. Concurr. Comput. : Pract. Exper., 21(10):1255â€“1279, July 2009.

[38] R. Sommer, M. Vallentin, L. De Carli, and V. Paxson. HILTI: An abstract execution environment for deep, stateful network traffic analysis. In IMC, 2014.

[39] S. Sridharan, G. Gupta, and G. S. Sohi. Adaptive, efficient, parallel execution of parallel programs. In PLDI, 2014.

[40] M. Vallentin, R. Sommer, J. Lee, C. Leres, V. Paxson, and B. Tierney. The NIDS cluster: scalable, stateful network intrusion detection on commodity hardware. In RAID, 2007.

[41] J. van Lunteren and A. Guanella. Hardware-accelerated regular expression matching at multiple tens of GB/s. In INFOCOM, 2012.

[42] H. Vandierendonck, S. Rul, and K. De Bosschere. The paralax infrastructure: automatic parallelization with a helping hand. In PACT, 2010.

[43] G. Vasiliadis, S. Antonatos, M. Polychronakis, E. P. Markatos, and S. Ioannidis. Gnort: High performance network intrusion detection using graphics processors. In RAID, 2008.

[44] G. Vasiliadis, M. Polychronakis, and S. Ioannidis. MIDeA: a multi-parallel intrusion detection architecture. In CCS, 2011.

[45] J. Verdu, M. Nemirovsky, and M. Valero. MultiLayer processing - an execution model for parallel stateful packet processing. In ANCS, 2008.

[46] C. Wang, Y. Wu, E. Borin, S. Hu, W. Liu, D. Sager, T.-f. Ngai, and J. Fang. Dynamic parallelization of single-threaded binary programs using speculative slicing. In ICS, 2009.

[47] M. Weiser. Program slicing. In ICSE, 1981.

[48] B. Wun, P. Crowley, and A. Raghunth. Parallelization of snort on a multi-core platform. In ANCS, 2009.

[49] K. Xinidis, I. Charitakis, S. Antonatos, K. G. Anagnostakis, and E. P. Markatos. An active splitter architecture for intrusion detection and prevention. IEEE Trans. Dependable Secur. Comput., 3(1):31â€“44, Jan. 2006.

[50] H. Zhong, M. Mehrara, S. Lieberman, and S. Mahlke. Uncovering hidden loop level parallelism in sequential applications. In HPCA, 2008.