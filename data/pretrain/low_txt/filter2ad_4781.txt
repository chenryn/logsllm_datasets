# Enabling Trusted Stores for Android

## Authors
- Yury Zhauniarovich, University of Trento, via Sommarive 14, Trento, Italy
- Olga Gadyatskaya, University of Trento, via Sommarive 14, Trento, Italy
- Bruno Crispo, University of Trento, via Sommarive 14, Trento, Italy

## Abstract
In the Android ecosystem, the responsibility for verifying the integrity of downloaded applications falls on the user. Unlike other platforms, such as the Apple App Store, Google does not provide a certified vetting process for Android apps. While this approach offers flexibility, it also opens the door to potential security threats, as demonstrated by the recent Bluebox vulnerability [4]. This demonstration introduces TruStore, an application certification service for the Android platform. The TruStore client ensures that only applications certified by the TruStore server are installed on the user's device. We envision trusted markets (TruStore servers) that guarantee security through a robust application vetting process. The TruStore infrastructure maintains the open nature of the Android ecosystem, requiring minimal modifications to the Android stack. It is backward-compatible and transparent for developers, and does not alter the application management process on the device.

## Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—Access controls, cryptographic controls, authentication

## 1. Motivation
The open nature of the Android platform allows users to download applications from various sources, including third-party markets. This flexibility, however, comes with risks. Users cannot be assured of an app's security simply by checking its developer and reviews. Major phone manufacturers have addressed some vulnerabilities, but minor providers and unsupported devices remain vulnerable. Repackaging of Android apps remains a significant issue [5].

While platforms like Apple and RIM enforce strict certification and vetting processes, Google has chosen a more open approach. Android apps do not need to be certified before being published in any market. This demonstration shows how to enable and support an application certification service for the Android ecosystem. TruStore markets publish only certified applications, ensuring that both existing and new apps can be certified without imposing constraints on developers or changing the development process. The client-side implementation requires only minor modifications to the Android sources.

## 2. TruStore Architecture
### 2.1 Overview
The TruStore architecture consists of two main components: a server and a client.

### 2.2 TruStore Server
The TruStore server provides standard app publishing and provisioning functionality, along with an application vetting process. Applications provisioned by TruStore are certified based on a declared vetting process, which may include static and dynamic analysis, permission checks, and file verification. The server signs the certified application with its own certificate and makes it available in the market.

### 2.3 Application Multisigning
Most Android apps are signed with a developer-signed certificate, ensuring that updates come from the same source. In newer Android versions, the `checkSignaturesLP` method in `PackageManagerService` compares sets of signatures. Although multisigning is no longer beneficial, it is essential for TruStore's operation.

### 2.4 TruStore Client
The TruStore client is based on a modified Android system, allowing device holders to use TruStore. The client modifies the Application and Android Framework levels, changing standard components and adding new ones.

#### 2.4.1 Activation and Management
- **Activation**: The TruStore protection is activated in the Android Settings application, where a checkbox enables the feature.
- **Certificate Management**: Users can view and add trusted store certificates. The `TruStoreList` application handles certificate selection.
- **Installation Process**: The installation process is similar to the standard one, but with additional TruStore checks. The `installPackageLI` method in `PackageManagerService` is modified to verify the package against trusted store certificates.

### 2.5 App Management with TruStore
- **Installation**: The installation process is unchanged for developers but may fail if the app is not certified by a TruStore.
- **Updates**: Updates must come from the same TruStore to ensure signature consistency.
- **Deletion**: The deletion process remains unchanged.
- **Interactions**: Interactions between app components protected by specific permissions are restricted to ensure security.

## 3. Conclusions
TruStore enhances the security of the Android ecosystem by adding a market signature to application packages after a successful vetting process. This approach is backward-compatible, transparent to developers, and requires minimal modifications to the firmware. TruStore can be adopted by phone producers with their own markets and, if integrated into the Android distribution, can support corporate application markets and BYOD policies.

## Acknowledgments
This work was partially supported by the FP7-ICT SecCord Project 316622 funded by the EU and the TENACE PRIN Project 20103P34XC funded by the Italian MIUR.

## References
[1] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In Proceedings of the 16th ACM conference on Computer and communications security, CCS ’09, pages 235–245, New York, NY, USA, 2009. ACM.

[2] P. Gilbert, B. Chun, L. Cox, and J. Jung. Vision: automated security validation of mobile apps at app markets. In Proc. of MCS’2011, pages 21–26, 2011.

[3] V. Rastogi, Y. Chen, and W. Enck. Appsplayground: automatic security analysis of smartphone applications. In Proc. of CODASPY ’13, pages 209–220, 2013.

[4] T. SecurityLedger. Exploit code released for Android security hole https://securityledger.com/2013/07/exploit-code-released-for-android-security-hole/, Jul. 2013.

[5] W. Zhou, Y. Zhou, M. Grace, X. Jiang, and S. Zou. Fast, scalable detection of "piggybacked" mobile applications. In Proc. of CODASPY ’13, pages 185–196, 2013.