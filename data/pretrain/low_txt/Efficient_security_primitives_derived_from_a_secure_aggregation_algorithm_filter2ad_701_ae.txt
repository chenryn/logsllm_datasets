### Improved Text

#### Authentication and Security in Sensor Networks

A node \( i \) that successfully passed the checks of a legitimate node \( j \) can forge a message. Let \( r \) be the hash tree root computed by \( j \). Since \( j \) accepted the message authentication, the base station must have released \( (N_i, r, sb, h(N_i)) \) in a prior authenticated broadcast. This implies that, assuming the nonce \( N_i \) was not repeated and the MAC \( MACK_i \) is highly secure, node \( i \) has almost certainly verified the inclusion of \( L_i \) in the hash tree with root \( r \), bound to its ID in the topological binding \( sb \). If \( L_i \neq L_j \), this suggests a hash collision in the verification paths computed by \( i \) and \( j \), indicating that the adversary could engineer a hash collision with non-negligible probability.

The authentication primitive described here allows protocol designers to build protocols where nodes can create messages that can be origin-authenticated by any other node in the network. This method not only provides unforgeability (integrity and source verification) but also ensures non-repudiation. Once a message with an authentic tag is released, the originating node cannot plausibly deny creating it, assuming the base station is not compromised. This makes the authentication structure more useful than, for example, a MAC using a shared secret key between two nodes, where the originating node can always claim the verifying node originated the message. This property enables the creation of publicly-verifiable commitments, which can be used to expose nodes attempting to cheat in a protocol.

The overhead of the scheme is a signature of length \( O(\log n) \), causing \( O(\log n) \) congestion in the network.

### 7.3 Applications

The use of node-to-node authenticated broadcast in constructing general resilient applications is extensive. Some examples include:
- Allowing cluster heads to authentically broadcast schedules to their children.
- Authenticated broadcasts of node power levels for traffic shaping.
- Authenticated routing distance metrics for secure routing.

In this section, we briefly focus on some uses of the authentication primitive in constructing other basic security protocols.

#### 7.3.1 Multi-message Signatures

A limitation of this HT-based signature scheme is that nodes must generate signatures in coordinated network-wide phases. Each phase allows each node to generate an authenticator for an arbitrary message \( L_i \). If a node has several messages \( M_1, \ldots, M_k \) to authenticate in a given phase, it can generate a hash tree over these \( k \) messages and set \( L_i \) as the root of the tree. Each message \( M_i \) can then be individually authenticated by showing it is a leaf in the hash tree rooted at \( L_i \). The messages \( M_1, \ldots, M_k \) must be fixed before executing the network-wide phase and cannot be changed once \( L_i \) is signed. For a more flexible signature method, each \( M_i \) can be assigned as the "public key" of a one-time signature (e.g., Merkle-Winternitz signatures). Nodes can then use these authenticated one-time public keys to sign up to \( k \) fixed-length messages at any time without needing network-wide coordination. If loose time synchronization is available, broadcast authentication techniques like μTesla are more efficient and can sign a much larger number of messages without byte-length constraints.

#### 7.3.2 Initializing Hash Chains for μTesla

The HT-based signature primitive complements the μTesla broadcast authentication scheme described by Perrig et al. [22]. When the HT-based signature scheme is used to bootstrap μTesla, the two schemes cover each other’s weaknesses. The HT-based signature has the following weaknesses:
1. Inflexibility: It requires the entire network to participate in signing one message from each node.
2. Long signatures: Each signature carries \( O(\log n) \) hash values of authenticating information.

μTesla does not suffer from these weaknesses but has the drawback of being difficult to bootstrap, requiring a per-source hash chain "anchor" value to be loaded onto every verifying node. Due to these issues, μTesla is typically used only for authentication from the base station to nodes. The HT-based signature scheme enables node-to-node use of μTesla by providing an easy way to reload hash chain anchors onto receiving nodes. The drawbacks of HT-based signatures are minimized due to the time-synchronized nature of μTesla, as all nodes need to refresh their hash chain anchors at approximately the same time. Once the hash chain anchors are initialized on the receiver nodes, the more efficient and flexible μTesla can be used for broadcast authentication.

#### 7.3.3 Distributed Node Revocation

One application of this authentication primitive is in the distributed revocation protocol of Chan, Gligor, Perrig, and Muralidharan [1]. In this protocol, when node \( u \) detects another node \( v \) acting maliciously, a local broadcast is used to issue "revocation votes" against \( v \). If enough neighbors vote, \( v \) is ejected from the network. The original protocol required deterministic key establishment schemes (e.g., the random pairwise scheme [2]). In such key distribution schemes, each node \( v \) shares a preloaded key with a fixed set of nodes \( S_v \). In the revocation scheme, each node in \( S_v \) issues a revocation vote against \( v \), authenticated using a hash-tree mechanism. This yields a massive memory overhead, as each node must store around \( |S_v| \) revocation votes, each requiring \( O(\log |S_v|) \) authentication information. With the HT-based signature scheme, distributed revocation can work independently of the key distribution scheme, as any node \( u \) can issue a signed message voting for the revocation of any other node \( v \). This signature can be verified by any other node \( x \) without additional preloaded information, except for the single key \( x \) shares with the base station. This reduces the storage overhead to \( O(\log n + \delta) \) for a node with \( \delta \) neighbors, greatly increasing the practicality of distributed node revocation.

### 8. Related Work

Many secure data aggregation mechanisms for sensor networks have been proposed [3, 5, 7, 10, 11, 17, 19, 23–25]. We review the CPS and Frikken and Dougherty’s scheme in Section 2. Since there is limited work on using secure data aggregation mechanisms for applications other than data aggregation, we discuss other work addressing authenticated broadcast, public key management, and signature schemes for sensor networks.

Perrig et al. propose μTESLA [22] for broadcast authentication, which requires loose time synchronization. Improvements to μTESLA have been proposed but still require loose time synchronization [13]. Luk et al. propose families of broadcast authentication mechanisms [15], but their one-time signature schemes can have substantial communication overhead.

To provide resistance against computational DoS attacks for signature-based broadcast authentication in sensor networks, Ning et al. propose several mechanisms [4, 21]. Our approaches for authentication and signatures are inherently robust against computational DoS attacks.

Several works target preventing the injection of false information into sensor networks, such as the work by Ye et al. [25] or Zhu et al. [26]. The problem we consider is orthogonal to these.

Relatively little work has been dedicated to public key management in sensor networks. Ning et al. propose using hash trees for distributing node certificates [6, 14], and updating the hash trees to revoke entities. Chan et al. develop mechanisms for node revocation in sensor networks [1], but their approach is not applicable for public key management.

Many researchers have studied efficient sensor network signatures, such as Liu and Ning [12], Malan et al. [18], Gupta et al. [9], and Gaubatz et al. [8]. In contrast, we propose a novel approach that enables a signature operation based on purely symmetric functions without using one-time signatures, by only trusting the base station.

### 9. Conclusion

We describe how the HT functionality encapsulated in the CPS algorithm for secure data aggregation is useful for developing various security applications. We show fast and efficient primitives for broadcast authentication, public key management, and node-to-node signatures, each superior in some way to current best-known protocols. These results highlight the significance of secure data aggregation, as it represents a general description of the specific distributed computation pattern common in sensor networks. Secure algorithms for this problem also represent secure versions of the communication and computation patterns most useful in sensor networks.

### 10. Acknowledgements

The authors would like to thank the anonymous reviewers for their helpful comments and suggestions.

### 11. References

[1] H. Chan, V. Gligor, A. Perrig, and G. Muralidharan. On the distribution and revocation of cryptographic keys in sensor networks. IEEE Transactions on Dependable and Secure Computing (TDSC), 2(3):233–247, 2005.

[2] H. Chan, A. Perrig, and D. Song. Random key predistribution schemes for sensor networks. In IEEE Symposium on Security and Privacy, May 2003.

[3] H. Chan, A. Perrig, and D. Song. Secure hierarchical in-network aggregation for sensor networks. In Proceedings of the ACM Conference on Computer and Communications Security, Oct. 2006.

[4] Q. Dong, D. Liu, and P. Ning. Pre-authentication filters: Providing DoS resistance for signature-based broadcast authentication in wireless sensor networks. In Proceedings of ACM Conference on Wireless Network Security (WiSec), Apr. 2008.

[5] W. Du, J. Deng, Y. Han, and P. K. Varshney. A witness-based approach for data fusion assurance in wireless sensor networks. In Proceedings of the IEEE Global Telecommunications Conference, 2003.

[15] M. Luk, A. Perrig, and B. Whillock. Seven cardinal properties of sensor network broadcast authentication. In Proceedings of ACM Workshop on Security of Ad Hoc and Sensor Networks (SASN), Oct. 2006.

[16] S. Madden, M. J. Franklin, J. M. Hellerstein, and W. Hong. TAG: a tiny aggregation service for ad-hoc sensor networks. SIGOPS Oper. Syst. Rev., 36(SI):131–146, 2002.

[17] A. Mahimkar and T. Rappaport. SecureDAV: A secure data aggregation and verification protocol for sensor networks. In Proceedings of the IEEE Global Telecommunications Conference, 2004.

[6] W. Du, R. Wang, and P. Ning. An efficient scheme for authenticating public keys in sensor networks. In Proceedings of Symposium on Mobile Ad Hoc Networking and Computing (MobiHoc), pages 58–67, May 2005.

[7] K. B. Frikken and J. A. Dougherty. An efficient integrity-preserving scheme for hierarchical sensor aggregation. In Proceedings of ACM Conference on Wireless Network Security (WiSec), pages 68–76, Apr. 2008.

[8] G. Gaubatz, J. Kaps, and B. Sunar. Public keys cryptography in sensor networks - revisited. In Proceedings of European Workshop on Security in Ad-Hoc and Sensor Networks (ESAS), 2004.

[9] V. Gupta, M. Millard, S. Fung, Y. Zhu, N. Gura, H. Eberle, and S. C. Shantz. Sizzle: A standards-based end-to-end security architecture for the embedded internet. In Proceedings of the Third IEEE International Conference on Pervasive Computing and Communication (PerCom), 2005.

[10] L. Hu and D. Evans. Secure aggregation for wireless networks. In Workshop on Security and Assurance in Ad hoc Networks, 2003.

[11] P. Jadia and A. Mathuria. Efficient secure aggregation in sensor networks. In Proceedings of the 11th International Conference on High Performance Computing, 2004.

[12] A. Liu and P. Ning. TinyECC: A configurable library for elliptic curve cryptography in wireless sensor networks. In Proceedings of Conference on Information Processing in Sensor Networks (IPSN), SPOTS Track, Apr. 2008.

[13] D. Liu and P. Ning. Multi-level uTESLA: Broadcast authentication for distributed sensor networks. ACM Transactions in Embedded Computing Systems (TECS), 3(4):800–836, Nov. 2004.

[14] D. Liu, P. Ning, S. Zhu, and S. Jajodia. Practical broadcast authentication in sensor networks. In Proceedings of Conference on Mobile and Ubiquitous Systems: Networking and Services (MobiQuitous), pages 118–129, July 2005.

[19] M. Manulis and J. Schwenk. Provably secure framework for information aggregation in sensor networks. In Proceedings of the International Conference on Computational Science and Its Applications (ICCSA), Aug. 2007.

[20] R. C. Merkle. A digital signature based on a conventional encryption function. In A Conference on the Theory and Applications of Cryptographic Techniques on Advances in Cryptology, pages 369–378. Springer-Verlag, 1988.

[21] P. Ning, A. Liu, and W. Du. Mitigating DoS attacks against broadcast authentication in wireless sensor networks. ACM Transactions on Sensor Networks (TOSN), 4(1), Jan. 2008.

[22] A. Perrig, R. Szewczyk, J. D. Tygar, V. Wen, and D. E. Culler. SPINS: Security protocols for sensor networks. Wirel. Netw., 8(5):521–534, 2002.

[23] B. Przydatek, D. Song, and A. Perrig. SIA: Secure information aggregation in sensor networks. In Proceedings of the 1st International Conference on Embedded Networked Sensor Systems, 2003.

[24] D. Wagner. Resilient aggregation in sensor networks. In Proceedings of the 2nd ACM Workshop on Security of Ad-hoc and Sensor Networks, 2004.

[25] Y. Yang, X. Wang, S. Zhu, and G. Cao. SDAP: A secure hop-by-hop data aggregation protocol for sensor networks. In Proceedings of the ACM International Symposium on Mobile Ad Hoc Networking and Computing, 2006.

[26] S. Zhu, S. Setia, S. Jajodia, and P. Ning. An interleaved hop-by-hop authentication scheme for filtering false data in sensor networks. In Proceedings of IEEE Symposium on Security and Privacy, pages 259–271, May 2004.