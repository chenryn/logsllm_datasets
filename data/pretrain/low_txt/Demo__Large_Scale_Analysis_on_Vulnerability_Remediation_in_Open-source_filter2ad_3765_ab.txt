### Introduction

We analyzed 567 JavaScript repositories, each with more than two authors and a substantial user base. We used CodeQL, an open-source tool maintained by GitHub, to perform static code analysis on these repositories. For each commit, we extracted metadata such as commit hash, committed date, author's name, GitHub username, and email using the GitHub API.

### Definitions

- **Intro Commit**: The first commit where CodeQL identifies a vulnerability in the code (a unique combination of code file and line number).
- **Fix Commit**: The commit that resolves a specific vulnerability.
- **Intro+Fix Commit**: A commit that introduces a new vulnerability while fixing an existing one.

In Figure 1, commit C1 is the Fix commit for vulnerability V1, as it ends V1's lifetime. Commit C2 is the Intro commit for V2, as it starts V2's lifetime. Commit C3 is both an Intro and Fix commit, as it ends V3's lifetime and starts V4's lifetime.

### Preliminary Analysis

Our pipeline identified 80 unique security vulnerability types across 501,000 commits from 130 JavaScript projects. On average, each project contained 170 instances of security vulnerabilities. Our study highlights the importance of source code analysis in understanding the effectiveness of vulnerability remediation.

Previous research by Alomar et al. found that many industry experts are concerned about the lack of success in fixing bugs due to factors such as insufficient expertise, attention, and resources. To quantify these issues, we used our automated pipeline to filter commits that fixed vulnerabilities and evaluate their success. Our analysis only counts the final successful attempt, making our numbers a lower bound of the actual issues.

Key findings include:
- In some projects, up to 7.15% of developers are responsible for intro+fix commits that introduce new vulnerabilities.
- 54% of the time, the same developer who introduced a vulnerability also fixed it.
- 7% of developers responsible for intro+fix commits have contributed to multiple repositories.
- 78% of the time, developers committed publicly disclosed vulnerabilities.
- Projects repeated 75% of vulnerabilities on average.
- 2% of all intro+fix vulnerabilities showed that fixing an existing vulnerability introduced at least one OWASP Top 10 vulnerability.
- 37% of the time, developers committed a vulnerability fix while other high-severity vulnerabilities were present in the code.

These findings highlight potential issues in organizational vulnerability management processes, which warrant further investigation.

### Visualizing Vulnerability Distribution

The impact of vulnerabilities varies depending on when they are identified. Early detection during the development phase reduces the cost of remediation. Given finite resources, developers cannot address all identified vulnerabilities. Therefore, we developed a prioritization score to help identify which vulnerabilities should be fixed first. This score incorporates four metrics:

1. **Severity Score**: Based on the OWASP Top 10 list.
2. **Sibling Score**: Measures the density of vulnerabilities within a class or method.
3. **Intro+Fix Score**: Assigns a score to files that include intro+fix vulnerabilities.
4. **Lifetime Score**: Calculates the age of the vulnerability in days, with higher scores for longer-lived vulnerabilities.

We present Sequza, a tool that aids developers in prioritizing vulnerabilities. Sequza consists of:
- **Sequza Core**: Handles analysis tasks and stores results.
- **Sequza API**: Provides access to analysis results.
- **Sequza RQD**: Central dashboard for managing Sequza Core instances.
- **Sequza Dashboard**: User interface for submitting repositories and viewing results.

Figure 2 shows the distribution of vulnerabilities among files in a repository. Users can view the prioritization score of vulnerable files by hovering over file names. The intensity of the red color indicates the prioritization score. Users can also view identified vulnerabilities and compare two commits side-by-side. Figure 3 provides a detailed breakdown of the prioritization scores in each file.

### Discussion

Our goal is to understand the feasibility of using source code analysis to address issues in vulnerability remediation. Our preliminary results show that these issues can be quantified. We present a novel automated analysis pipeline to identify Intro, Fix, and Intro+Fix commits, which helps in understanding the remediation process. Combined with Sequza, this approach can explore new research avenues in vulnerability remediation and help organizations improve their remediation and prioritization efforts. Our analysis is available through a real-time dashboard.

### References

[1] Noura Alomar, Primal Wijesekera, Edward Qiu, and Serge Egelman. 2020. "You’ve Got Your Nice List of Bugs, Now What?" Vulnerability Discovery and Management Processes in the Wild. In Sixteenth Symposium on Usable Privacy and Security (SOUPS 2020). USENIX Association, 319–339. https://www.usenix.org/conference/soups2020/presentation/alomar

[2] Vinuri Bandara, Thisura Rathnayake, Nipuna Weerasekara, Charitha Elvitigala, Kenneth Thilakarathna, Primal Wijesekera, and Chamath Keppitiyagama. 2020. Fix that Fix Commit: A real-world remediation analysis of JavaScript projects. In 2020 IEEE 20th International Working Conference on Source Code Analysis and Manipulation (SCAM). IEEE, 198–202.

[3] Stefan Frei, Martin May, Ulrich Fiedler, and Bernhard Plattner. 2006. Large-Scale Vulnerability Analysis. In Proceedings of the 2006 SIGCOMM Workshop on Large-Scale Attack Defense (Pisa, Italy) (LSAD ’06). Association for Computing Machinery, New York, NY, USA, 131–138. https://doi.org/10.1145/1162666.1162671

[4] Kevin Hogan, Noel Warford, Robert Morrison, David Miller, Sean Malone, and James Purtilo. 2019. The Challenges of Labeling Vulnerability-Contributing Commits. In 2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW). IEEE, 270–275.

[5] Frank Li and Vern Paxson. 2017. A large-scale empirical study of security patches. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. 2201–2215.

[6] Henning Perl, Sergej Dechand, Matthew Smith, Daniel Arp, Fabian Yamaguchi, Konrad Rieck, Sascha Fahl, and Yasemin Acar. 2015. Vccfinder: Finding potential vulnerabilities in open-source projects to assist code audits. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. 426–437.

[7] Real-time dashboard: https://sequza.io

Session 8: Poster & Demo Session CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea