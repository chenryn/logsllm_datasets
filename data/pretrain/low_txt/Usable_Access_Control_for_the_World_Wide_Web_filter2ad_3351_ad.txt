### Detecting Malicious Client Associations

We have previously discussed how to detect if a malicious client associates its public key with the wrong Outlook contact entry. If the client has a valid certificate, standard SSL protection applies. However, a malicious user could gain access by obtaining a certificate before the legitimate user, although such access can be easily revoked.

### Usability and Security in ESCAPE

In this section, we will explore the remaining usability issues in ESCAPE and highlight why other system designs may be less suitable from a usability perspective. This analysis will demonstrate that designing an easy-to-use secure system with off-the-shelf components is more challenging than one might expect.

#### Certificate Delivery

One of the security concerns with the current system is the method of certificate delivery. A more secure approach would be to email certificates to the address provided during the certificate request. This would significantly raise the bar for an attacker attempting to impersonate another principal to an ESCAPE server. However, this method would also introduce significant usability issues. 

- **Delayed Access:** The client would not have immediate access to the content upon receiving the initial email. They would need to wait for a second email containing the certificate.
- **Complex Installation:** Installing a certificate sent via email is more complicated than installing one from a web page. Most email clients have scripting disabled, so an HTML page similar to what Internet Explorer uses for certificate installation cannot be used. Instead, the certificate would be sent as an attachment, leading to multiple dialog boxes (Figure 3) with non-obvious choices. Many non-expert users might fail to install the certificate correctly.

Given that the window of opportunity for an attacker in our scheme is limited to the period before the legitimate user first contacts the ESCAPE server, we believe the usability benefits of our current system outweigh the potential security risks.

#### Outlook Scripting

Even simple tasks like accessing the Outlook address book can raise security concerns. When starting the ESCAPE server (Figure 1), Outlook displays a warning dialog stating that "some application" is trying to access the email addresses of contacts. The user must choose whether to deny or allow this access for up to 10 minutes. This caution is due to email worms, but a legitimately installed application like the ESCAPE server should not trigger such a confusing warning. It would be interesting to see how other scriptable contact databases, such as the Macintosh address book, handle this situation.

#### Client Authentication

The ESCAPE server relies on the fact that a successful SSL handshake can be completed even if the client does not have a certificate, despite the server requesting client authentication. The SSL master secret does not require data from the client certificate, so there is no need to abort the handshake if the client cannot present one. According to the TLS RFC [7]:

- **Client Certificate Message:** This is the first message the client can send after receiving a server hello done message. It is only sent if the server requests a certificate. If no suitable certificate is available, the client should send a certificate message containing no certificates. If client authentication is required for the handshake to continue, the server may respond with a fatal handshake failure alert.

SSL v3.0, however, specified that a client without a suitable certificate should send a no certificate alert instead [9]. Internet Explorer, which defaults to SSL v3.0, implements this specification. The PureTLS implementation we use aborts the handshake upon receiving such an alert. Setting IE to use TLS results in successful handshakes. Mozilla and Opera also use TLS by default, but Opera's implementation is incorrect, leading to failed handshakes.

#### Other Platforms

The Data Protection System on Microsoft Windows removes the need for users to type passwords when Internet Explorer unlocks their private keys. Other browsers and operating systems, such as Linux, do not provide this feature, requiring users to enter passwords each time they access an ESCAPE server.

#### Transferring Certificates

In our system, only one public key can be associated with each Outlook contact entry. This prevents illegitimate users from acquiring certificates for an identity once the legitimate user has received theirs. However, it also prevents legitimate users from obtaining a second certificate for another computer. Instead, they must copy their keypair and certificate to each machine. Exporting and importing keypairs is a complex process. We are currently investigating whether a system can maintain similar usability and security properties while allowing users to set up multiple credentials on multiple machines.

#### Managing Access Control Lists

Removing clients from an access control list is straightforward using the ESCAPE graphical user interface. The content provider simply navigates to the published folder and removes unwanted clients. While this task is easy, it does not align with our goal of "implicit security," as the action is explicitly for security purposes. It is unclear whether all security mechanisms can be hidden under non-security-related actions, nor is it clear that this is desirable. Where security cannot be hidden, it should be exposed in a user-friendly manner.

### Conclusions

In this paper, we aimed to design a system for controlling access to content published on the World Wide Web. Our goal was to achieve high usability with off-the-shelf client software while providing a reasonably secure system. We achieved this for content providers, and for content consumers, the only extra cost is a one-time setup process.

A truly user-friendly system relies on certain features found in off-the-shelf applications. For example, the Data Protection system on Microsoft Windows and the correct implementation of TLS 1.0 are essential for minimizing user overhead.

We implemented a content publishing server (ESCAPE) in Java, enabling content consumers to access published content with common applications like Internet Explorer. Future work includes surveying additional client software and finding more opportunities to reduce security overhead.

ESCAPE is designed for small-time publishers, as it does not scale to large numbers of content consumers. This is not a significant disadvantage, as small-time publishers are more likely to benefit from usable security. We encourage the community to design secure systems with usability in mind, as unusable security mechanisms will not be used.

While our system addresses a specific need, it serves as a case study in usable security design. The design of our Easy and Secure Content Authorization and Publishing Engine provides insights into the challenges and trade-offs between usability and security in building usable secure systems.

### References

[1] M. Abadi, M. Burrows, B. Lampson, and G. D. Plotkin. A calculus for access control in distributed systems. ACM Transactions on Programming Languages and Systems, 15(4):706–734, September 1993.

[2] A. Adams and M. A. Sasse. Users are not the enemy: Why users compromise computer security mechanisms and how to take remedial measures. Communications of the ACM, 42:40–46, December 1999.

[3] L. Bauer, M. A. Schneider, and E. W. Felten. A general and flexible access-control system for the web. In Proceedings of the 11th USENIX Security Symposium, San Francisco, CA, August 2002.

[4] M. Blaze, J. Feigenbaum, J. Ioannidis, and A. Keromytis. The KeyNote Trust-Management System Version 2. IETF - Network Working Group, The Internet Society, September 1999. RFC 2704.

[5] Claymore Systems. PureTLS.

[6] J. DeTreville. Binder, a logic-based security language. In 2002 IEEE Symposium on Security and Privacy, Oakland, CA, May 2002.

[7] T. Dierks and C. Allen. The TLS Protocol Version 1.0. IETF - Network Working Group, The Internet Society, January 1999. RFC 2246.

[8] W. K. Edwards, M. W. Newman, J. Z. Sedivy, T. F. Smith, D. Balfanz, D. K. Smetters, H. C. Wong, and S. Izadi. Using Speakeasy for ad hoc peer-to-peer collaboration. In Proceedings of ACM 2002 Conference on Computer Supported Cooperative Work (CSCW 2002), New Orleans, LA, November 2002.

[9] A. O. Freier, P. Karlton, and P. C. Kocher. The SSL Protocol Version 3.0. IETF - Transport Layer Security Working Group, The Internet Society, November 1996. Internet Draft (work in progress).

[10] W. Griffin, M. Heyman, D. Balenson, and D. Carman. Microsoft data protection. MSDN Online, October 2001.

[11] R. Housley, W. Ford, W. Polk, and D. Solo. Internet X.509 Public Key Infrastructure Certificate and CRL Profile. IETF - Network Working Group, The Internet Society, January 1999. RFC 2459.

[12] IBM. bridge2java. http://www.alphaworks.ibm.com/tech/bridge2java/.

[13] D. K. Smetters and R. E. Grinter. Moving from the design of usable security technologies to the design of useful secure applications. In New Security Paradigms Workshop '02. ACM, 2002.

[14] A. Whitten and J. D. Tygar. Why Johnny can't encrypt: A usability evaluation of PGP 5.0. In Proceedings of the 8th USENIX Security Symposium, Washington, DC, August 1999.