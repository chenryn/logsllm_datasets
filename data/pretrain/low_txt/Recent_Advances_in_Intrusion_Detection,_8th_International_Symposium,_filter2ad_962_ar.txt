### Performance Overhead Analysis

#### Single Server Performance Overhead
To evaluate the performance overhead of intercepting and transmitting system call information, we conducted two tests using a machine equipped with a 2.0 GHz Pentium IV processor and 512 MB of memory. In both tests, we utilized the static test suite provided with WebBench 5.0 [34] to measure the server's throughput and latency under full utilization.

- **Test 1:** The machine ran the Abyss X1 webserver without any additional tasks.
- **Test 2:** The machine ran the Abyss X1 webserver and also intercepted and sent system call information to another machine for behavioral distance calculation. This calculation was not on the critical path of the response.

The results showed that Test 2 incurred a 6.6% overhead in throughput and a 6.4% overhead in latency compared to Test 1. This indicates that intercepting and sending system call information introduces minimal performance overhead on a single server in terms of both throughput and latency.

#### Performance Overhead Compared to Output Voting

We performed three tests to measure the performance overhead of our implementation of behavioral distance in a replicated system with Abyss X1 webservers. The experimental setup was similar to the one described in Section 4.1, with the addition of another machine (T) with a 2.0 GHz Pentium IV processor and 512 MB of memory to generate client requests. In one of the tests, we also used an additional machine (C) to perform the behavioral distance calculation. We used WebBench 5.0 [34] in all three tests, simulating 10 concurrent clients throughout the tests. Each test was run for 80 minutes, with statistics calculated at 5-minute intervals. The results are shown in Figure 5.

- **Test 1 (Reference):** Replicas L and W served as webservers without capturing system call sequences. Proxy P performed output voting, comparing responses from L and W before sending them to client T.
- **Test 2:** Besides output voting on P, replicas L and W captured system calls made by the webservers and sent them to machine C for behavioral distance calculation. This test aimed to show the overhead for capturing and analyzing system call information off-line. The results indicated a very small overhead: 3.58% in throughput and 0.089 milliseconds in latency on average.
- **Test 3:** Both output voting and behavioral distance calculation were performed on the proxy P on the critical path of responding to the client. The response was sent to the client only after the behavioral distance calculation and output comparison were complete. To improve performance, P cached behavioral distance calculations. After about 50 minutes, the proxy reached its optimal performance level. Clients experienced a 24.3% reduction in throughput and 0.848 milliseconds overhead in latency compared to Test 1.

The results suggest that a slightly more powerful machine for the proxy is necessary if the behavioral distance calculation is to be performed on the critical path of server responses, to maintain peak throughput. However, even in our tests, the overhead in latency remained below one millisecond.

### Conclusion

In this paper, we introduced the concept of behavioral distance to evaluate the similarity of behavior between two processes in response to a common input. Behavioral distance can detect software faults or attacks on a replica, especially those that do not immediately manifest in the replica's output. We proposed a measure of behavioral distance and implemented it using system calls emitted by processes. Through empirical evaluation using three web servers on Linux and Windows platforms, we demonstrated that this approach can detect sophisticated mimicry attacks with a low false positive rate and moderate overhead.

### References

1. Myserver. http://www.myserverproject.net.
2. L. Alvisi, D. Malkhi, E. Pierce, and M. K. Reiter. Fault detection for Byzantine quorum systems. IEEE Transactions on Parallel Distributed Systems, 12(9), September 2001.
3. R. W. Buskens and Jr. R. P. Bianchini. Distributed on-line diagnosis in the presence of arbitrary faults. In Proceedings of the 23rd International Symposium on Fault-Tolerant Computing, pages 470–479, June 1993.
4. M. Castro, R. Rodrigues, and B. Liskov. BASE: Using abstraction to improve fault tolerance. ACM Transactions on Computer Systems (TOCS), 236–269, 2003.
5. L. Chen and A. Avizienis. N-version programming: A fault-tolerance approach to reliability of software operation. In Proceedings of the 8th International Symposium on Fault-Tolerant Computing, pages 3–9, 1978.
6. S. Cheung, R. Crawford, M. Dilger, J. Frank, J. Hoagland, K. Levitt, J. Rowe, S. Staniford-Chen, R. Yip, and D. Zerkle. The design of GrIDS: A graph-based intrusion detection system. Technical Report CSE-99-2, Computer Science Department, U.C. Davis, 1999.
7. C. Collberg, C. Thomborson, and D. Low. Manufacturing cheap, resilient, and stealthy opaque constructs. In Proceedings of the ACM Symposium on Principles of Programming Languages, January 1998.
8. H. H. Feng, J. T. Griffin, Y. Huang, S. Jha, W. Lee, and B. P. Miller. Formalizing sensitivity in static analysis for intrusion detection. In Proceedings of the 2004 IEEE Symposium on Security and Privacy, 2004.
9. H. H. Feng, O. M. Kolesnikov, P. Fogla, W. Lee, and W. Gong. Anomaly detection using call stack information. In Proceedings of the 2003 IEEE Symposium on Security and Privacy, 2003.
10. S. Forrest and T. A. Langstaff. A sense of self for UNIX processes. In Proceedings of the 1996 IEEE Symposium on Security and Privacy, 1996.
11. The Apache Software Foundation. Apache HTTP Server. http://httpd.apache.org.
12. D. Gao, M. K. Reiter, and D. Song. Gray-box extraction of execution graph for anomaly detection. In Proceedings of the 11th ACM Conference on Computer & Communication Security, 2004.
13. D. Gao, M. K. Reiter, and D. Song. On gray-box program tracking for anomaly detection. In Proceedings of the 13th USENIX Security Symposium, 2004.
14. J. T. Griffin, S. Jha, and B. P. Miller. Detecting manipulated remote call streams. In Proceedings of the 11th USENIX Security Symposium, 2002.
15. J. T. Griffin, S. Jha, and B. P. Miller. Efficient context-sensitive intrusion detection. In Proceedings of Symposium on Network and Distributed System Security, 2004.
16. C. Kruegel, D. Mutz, F. Valeur, and G. Vigna. On the detection of anomalous system call arguments. In Proceedings of the 8th European Symposium on Research in Computer Security (ESORICS 2003), 2003.
17. L. Lamport. The implementation of reliable distributed multiprocess systems. In Computer Networks 2, 1978.
18. X. Lu. A Linux executable editing library. Master’s thesis, Computer and Information Science Department, National University of Singapore, 1999.
19. G. Nebbett. Windows NT/2000 Native API Reference. Sams Publishing, 2000.
20. M. Nei and S. Kumar. Molecular Evolution and Phylogenetics. Oxford University Press, 2000.
21. P. Ning, Y. Cui, and D. S. Reeves. Analyzing intensive intrusion alerts via correlation. In Recent Advances in Intrusion Detection (Lecture Notes in Computer Science vol. 2516), 2002.
22. M. Prasad and T. Chiueh. A binary rewriting defense against stack-based buffer overflow attacks. In Proceedings of the USENIX Annual Technical Conference, June 2003.
23. I. Rigoutsos and A. Floratos. Combinatorial pattern discovery in biological sequences. Bioinformatics, 14(1):55–67, 1998.
24. T. Romer, G. Voelker, D. Lee, A. Wolman, W. Wong, H. Levy, B. Bershad, and B. Chen. Instrumentation and optimization of Win32/Intel executables using Etch. In Proceedings of the USENIX Windows NT Workshop, August 1997.
25. F. B. Schneider. Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys, 22(4):299–319, December 1990.
26. B. Schwarz, S. Debray, and G. Andrews. Disassembly of executable code revisited. In Proceedings of the Working Conference on Reverse Engineering, pages 45–54, 2002.
27. R. Sekar, M. Bendre, D. Dhurjati, and P. Bollineni. A fast automaton-based method for detecting anomalous program behaviors. In Proceedings of the 2001 IEEE Symposium on Security and Privacy, 2001.
28. P. H. Sellers. On the theory and computation of evolutionary distances. SIAM J. Appl. Math., 26:787–793.
29. K. Shin and P. Ramanathan. Diagnosis of processors with Byzantine faults in a distributed computing system. In Proceedings of the 17th International Symposium on Fault-Tolerant Computing, pages 55–60, 1987.
30. S. R. Snapp, S. E. Smaha, D. M. Teal, and T. Grance. The DIDS (Distributed Intrusion Detection System) prototype. In Proceedings of the Summer USENIX Conference, pages 227–233, 1992.
31. K. Tan, J. McHugh, and K. Killourhy. Hiding intrusions: From the abnormal to the normal and beyond. In Proceedings of the 5th International Workshop on Information Hiding, October 2002.
32. Aprelium Technologies. Abyss Web Server. http://www.aprelium.com.
33. A. Valdes and K. Skinner. Probabilistic alert correlation. In Recent Advances in Intrusion Detection (Lecture Notes in Computer Science vol. 2212), 2001.
34. VeriTest. WebBench. http://www.veritest.com/benchmarks/webbench/default.asp
35. D. Wagner and D. Dean. Intrusion detection via static analysis. In Proceedings of the 2001 IEEE Symposium on Security and Privacy, 2001.
36. D. Wagner and P. Soto. Mimicry attacks on host-based intrusion detection systems. In Proceedings of the 9th ACM Conference on Computer and Communications Security, 2002.
37. A. Wespi, M. Dacier, and H. Debar. Intrusion detection using variable-length audit trail patterns. In Proceedings of the 2000 Recent Advances in Intrusion Detection, 2000.
38. Y. Xie, H. Kim, D. O’Hallaron, M. K. Reiter, and H. Zhang. Seurat: A pointillist approach to anomaly detection. In Recent Advances in Intrusion Detection (Lecture Notes in Computer Science 3224), pages 238–257, September 2004.
39. J. Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and M. Dahlin. Separating agreement from execution for Byzantine fault-tolerant services. In Proceedings of the 19th ACM Symposium on Operating System Principles, 2003.