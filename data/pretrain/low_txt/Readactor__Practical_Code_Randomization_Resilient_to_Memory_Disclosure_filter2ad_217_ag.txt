### References

1. D. Sehr, C. Bifﬂe, and B. Yee. "Language-Independent Sandboxing of Just-In-Time Compilation and Self-Modifying Code." In *32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*, 2011.

2. M. Backes and S. Nürnberger. "Oxymoron: Making Fine-Grained Memory Randomization Practical by Allowing Code Sharing." In *23rd USENIX Security Symposium*, 2014.

3. M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny. "You Can Run but You Can’t Read: Preventing Disclosure Exploits in Executable Code." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2014.

4. S. Bhatkar and D. C. DuVarney. "Efficient Techniques for Comprehensive Protection from Memory Error Exploits." In *14th USENIX Security Symposium*, 2005.

5. A. Bittau, A. Belay, A. J. Mashtizadeh, D. Mazières, and D. Boneh. "Hacking Blind." In *35th IEEE Symposium on Security and Privacy (S&P)*, 2014.

6. Black Duck Software, Inc. "Chromium Project on Open Hub." https://www.openhub.net/p/chrome, 2014.

7. D. Blazakis. "Interpreter Exploitation: Pointer Inference and JIT Spraying." *BlackHat DC*, 2010.

8. T. K. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. "Jump-Oriented Programming: A New Class of Code-Reuse Attack." In *6th ACM Symposium on Information, Computer and Communications Security (ASIACCS)*, 2011.

9. N. Carlini and D. Wagner. "ROP is Still Dangerous: Breaking Modern Defenses." In *23rd USENIX Security Symposium*, 2014.

10. S. Checkoway, L. Davi, A. Dmitrienko, A. Sadeghi, H. Shacham, and M. Winandy. "Return-Oriented Programming Without Returns." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2010.

11. X. Chen and D. Caselden. "CVE-2013-3346/5065 Technical Analysis." http://www.fireeye.com/blog/technical/cyber-exploits/2013/12/cve-2013-33465065-technical-analysis.html, 2013.

12. X. Chen, D. Caselden, and M. Scott. "The Dual Use Exploit: CVE-2013-3906 Used in Both Targeted Attacks and Crimeware Campaigns." http://www.fireeye.com/blog/technical/cyber-exploits/2013/11/the-dual-use-exploit-cve-2013-3906-used-in-both-targeted-attacks-and-crimeware-campaigns.html, 2013.

13. Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng. "ROPecker: A Generic and Practical Approach for Defending Against ROP Attacks." In *21st Annual Network and Distributed System Security Symposium (NDSS)*, 2014.

14. F. B. Cohen. "Operating System Protection Through Program Evolution." *Computers & Security*, 12, 1993.

15. S. Crane, P. Larsen, S. Brunthaler, and M. Franz. "Booby Trapping Software." In *New Security Paradigms Workshop (NSPW)*, 2013.

16. L. Davi, A. Sadeghi, D. Lehmann, and F. Monrose. "Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection." In *23rd USENIX Security Symposium*, 2014.

17. L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. "Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming." In *22nd Annual Network and Distributed System Security Symposium (NDSS)*, 2015.

18. L. V. Davi, A. Dmitrienko, S. Nürnberger, and A. Sadeghi. "Gadge Me If You Can: Secure and Efficient Ad-Hoc Instruction-Level Randomization for x86 and ARM." In *8th ACM Symposium on Information, Computer and Communications Security (ASIACCS)*, 2013.

19. I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. "Missing the Point: On the Effectiveness of Code Pointer Integrity." In *36th IEEE Symposium on Security and Privacy (S&P)*, 2015.

20. S. Forrest, A. Somayaji, and D. H. Ackley. "Building Diverse Computer Systems." In *The 6th Workshop on Hot Topics in Operating Systems (HotOS-VI)*, 1997.

21. I. Fratric. "ROPGuard: Runtime Prevention of Return-Oriented Programming Attacks." http://www.ieee.hr/_download/repository/Ivan_Fratric.pdf, 2012.

22. R. Gawlik and T. Holz. "Towards Automated Integrity Protection of C++ Virtual Function Tables in Binary Programs." In *30th Annual Computer Security Applications Conference (ACSAC)*, 2014.

23. J. Gionta, W. Enck, and P. Ning. "HideM: Protecting the Contents of Userspace Memory in the Face of Disclosure Vulnerabilities." In *5th ACM Conference on Data and Application Security and Privacy (CODASPY)*, 2015.

24. C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. "Enhanced Operating System Security Through Efficient and Fine-Grained Address Space Randomization." In *21st USENIX Security Symposium*, 2012.

25. E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis. "Out of Control: Overcoming Control-Flow Integrity." In *35th IEEE Symposium on Security and Privacy (S&P)*, 2014.

26. E. Göktas, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis. "Size Does Matter: Why Using Gadget-Chain Length to Prevent Code-Reuse Attacks is Hard." In *23rd USENIX Security Symposium*, 2014.

27. J. L. Henning. "SPEC CPU2006 Memory Footprint." *SIGARCH Computer Architecture News*, 35, 2007.

28. J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson. "ILR: Where’d My Gadgets Go?" In *33rd IEEE Symposium on Security and Privacy (S&P)*, 2012.

29. A. Homescu, S. Brunthaler, P. Larsen, and M. Franz. "Librando: Transparent Code Randomization for Just-In-Time Compilers." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2013.

30. A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz. "Profile-Guided Automatic Software Diversity." In *IEEE/ACM International Symposium on Code Generation and Optimization (CGO)*, 2013.

31. Intel. "Intel 64 and IA-32 Architectures Software Developer’s Manual - Chapter 28 VMX Support for Address Translation." http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-manual-325462.pdf.

32. D. Jang, Z. Tatlock, and S. Lerner. "SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks." In *21st Annual Network and Distributed System Security Symposium (NDSS)*, 2014.

33. C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. "Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software." In *22nd Annual Computer Security Applications Conference (ACSAC)*, 2006.

34. S. T. King, P. M. Chen, Y. Wang, C. Verbowski, H. J. Wang, and J. R. Lorch. "SubVirt: Implementing Malware with Virtual Machines." In *27th IEEE Symposium on Security and Privacy (S&P)*, 2006.

35. V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. "Code-Pointer Integrity." In *11th USENIX Symposium on Operating Systems Design and Implementation (OSDI)*, 2014.

36. P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. "SoK: Automated Software Diversity." In *35th IEEE Symposium on Security and Privacy (S&P)*, 2014.

37. C. Lattner and V. S. Adve. "LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation." In *IEEE/ACM International Symposium on Code Generation and Optimization (CGO)*, 2004.

38. Microsoft. "Enhanced Mitigation Experience Toolkit." https://www.microsoft.com/emet, 2015.

39. Microsoft. "Hyper-V." http://www.microsoft.com/hyper-v, 2015.

40. V. Mohan, P. Larsen, S. Brunthaler, K. Hamlen, and M. Franz. "Opaque Control-Flow Integrity." In *22nd Annual Network and Distributed System Security Symposium (NDSS)*, 2015.

41. Nergal. "The Advanced Return-Into-Lib(c) Exploits: PaX Case Study." *Phrack Magazine*, 11, 2001.

42. B. Niu and G. Tan. "RockJIT: Securing Just-In-Time Compilation Using Modular Control-Flow Integrity." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2014.

43. Open Virtualization Alliance. "KVM - Kernel Based Virtual Machine." http://www.linux-kvm.org.

44. Oracle Corporation. "VirtualBox." http://www.virtualbox.org.

45. V. Pappas, M. Polychronakis, and A. D. Keromytis. "Smashing the Gadgets: Hindering Return-Oriented Programming Using In-Place Code Randomization." In *33rd IEEE Symposium on Security and Privacy (S&P)*, 2012.

46. V. Pappas, M. Polychronakis, and A. D. Keromytis. "Transparent ROP Exploit Mitigation Using Indirect Branch Tracing." In *22nd USENIX Security Symposium*, 2013.

47. PaX Team. "Homepage of The PaX Team." http://pax.grsecurity.net, 2001.

48. A. Prakash, X. Hu, and H. Yin. "vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries." In *22nd Annual Network and Distributed System Security Symposium (NDSS)*, 2015.

49. R. Roemer, E. Buchanan, H. Shacham, and S. Savage. "Return-Oriented Programming: Systems, Languages, and Applications." *ACM Transactions on Information System Security*, 15, 2012.

50. J. Rutkowska and A. Tereshkin. "IsGameOver() Anyone?" *BlackHat USA*, 2007.

51. F. Schuster, T. Tendyck, J. Pewny, A. Maaß, M. Steegmanns, M. Contag, and T. Holz. "Evaluating the Effectiveness of Current Anti-ROP Defenses." In *17th International Symposium on Research in Attacks, Intrusions and Defenses (RAID)*, 2014.

52. F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz. "Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications." In *36th IEEE Symposium on Security and Privacy (S&P)*, 2015.

53. J. Seibert, H. Okhravi, and E. Söderström. "Information Leaks Without Memory Disclosures: Remote Side Channel Attacks on Diversified Code." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2014.

54. H. Shacham. "The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86)." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2007.

55. K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A. Sadeghi. "Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization." In *34th IEEE Symposium on Security and Privacy (S&P)*, 2013.

56. C. Song, C. Zhang, T. Wang, W. Lee, and D. Melski. "Exploiting and Protecting Dynamic Code Generation." In *22nd Annual Network and Distributed System Security Symposium (NDSS)*, 2015.

57. R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund, and T. Walter. "Breaking the Memory Secrecy Assumption." In *2nd European Workshop on System Security (EUROSEC)*, 2009.

58. L. Szekeres, M. Payer, T. Wei, and D. Song. "SoK: Eternal War in Memory." In *34th IEEE Symposium on Security and Privacy (S&P)*, 2013.

59. C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike. "Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM." In *23rd USENIX Security Symposium*, 2014.

60. VMware, Inc. "VMware ESX." http://www.vmware.com/products/esxi-and-esx/overview.

61. R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. "Binary Stirring: Self-Randomizing Instruction Addresses of Legacy x86 Binary Code." In *ACM SIGSAC Conference on Computer and Communications Security (CCS)*, 2012.

62. Xen Project. "Xen." http://www.xenproject.org.

63. C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. "Practical Control Flow Integrity and Randomization for Binary Executables." In *34th IEEE Symposium on Security and Privacy (S&P)*, 2013.

64. C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song. "VTint: Defending Virtual Function Tables’ Integrity." In *22nd Annual Network and Distributed System Security Symposium (NDSS)*, 2015.

65. M. Zhang and R. Sekar. "Control Flow Integrity for COTS Binaries." In *22nd USENIX Security Symposium*, 2013.

### Appendix

**Figure A: Overview of Readactor**

*Components marked in gray are part of Readactor.*

#### System Components:

1. **Enabling Execute-Only Support:**
   - We load a thin hypervisor to activate memory virtualization and set up the Extended Page Table (EPT).
   - The EPT contains two identity mappings to the physical memory: a normal mapping and a readacted mapping.
   - The readacted mapping is used by the modified operating system to set page permissions to execute-only.

2. **Compilation:**
   - The compiler takes the source code of an arbitrary program and creates a binary.
   - The compiler:
     - Strictly separates code and data.
     - Applies code diversification through function permutation, register allocation randomization, and save slot reordering.
     - Implements code-pointer hiding by creating a trampoline as a `jmp` instruction for every code pointer (e.g., return address destinations).

3. **Binary:**
   - The output binary contains different sections for code, trampolines, and data.
   - The linker marks appropriate access permissions for each section.

4. **Loader:**
   - The loader reads the size and permissions bits of each section and allocates the respective memory regions, protecting them with the requested permissions.

5. **Code-Pointer Hiding:**
   - To hide code pointers during runtime, calls are substituted with a `jmp` instruction to the corresponding trampoline.
   - The trampoline will then call the original function, which pushes a return address on the stack.
   - The return address will point to the trampoline section, not the code section.
   - Disclosing trampoline pointers does not provide any knowledge about the layout or content of the code section.
   - Once the called function returns to the trampoline, control flow is returned to the original call site through another `jmp` instruction.
   - Function pointers are similarly protected with `jmp` trampolines.

#### Attack Scenarios:

- **Reading Data Memory:**
  - Data regions remain readable and writable.
  - The adversary can disclose and modify code pointers.
  - However, the disclosed code pointers do not provide any information about the applied code randomization and cannot be used to create a ROP gadget chain.

- **Reading Code Memory:**
  - Code regions are set to execute-only.
  - Any attempt to read these regions causes an EPT exception, which is forwarded to the operating system.
  - An application that causes an execute-only exception by attempting to read or write a code region is immediately killed by the operating system.
  - Since the execute-only permission is enforced in hardware, it cannot be bypassed by software.