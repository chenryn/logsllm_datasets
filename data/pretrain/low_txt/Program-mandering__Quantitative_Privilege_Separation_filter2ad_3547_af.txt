### 8.6 Vulnerabilities Mitigated by Partitioning

The security metrics used in PM (Privilege Manager) include quantitative information flow and the percentage of sensitive code. These metrics offer several advantages, such as providing a clear and measurable way to assess the security of a partition. Another potential security metric is the number of past known vulnerabilities that can be mitigated by the partition. However, we have argued against incorporating this metric into PM because it does not account for unknown vulnerabilities. Nevertheless, if a partition can mitigate most of the known vulnerabilities, it provides some evidence of the partition's security strength.

To evaluate this, we searched for all vulnerabilities in the National Vulnerability Database (NVD) for the versions of software used in our evaluation. We excluded the Linux shadow-utils programs due to their limited vulnerability dataset, which was too small to draw meaningful conclusions. Table 6 lists the Common Vulnerabilities and Exposures (CVEs) for the versions of the programs we used and indicates whether each CVE can be mitigated by a partition produced by PM.

| Program | Version | CVEs | Mitigated by |
|---------|---------|------|--------------|
| thttpd  | 2.25    | CVE-2013-0348, CVE-2009-4491, CVE-2006-4248 | 1, 2, 3 |
| wget    | 1.18    | CVE-2018-0494, CVE-2017-6508, CVE-2017-13090, CVE-2017-13089 | 1, 2, 3 |
| telnet  | 1.9.4   | CVE-2005-0468, CVE-2005-0469, Exploit-DB-459825, CVEs from 2016 to 2018 | 2, 4 |
| nginx   | 1.9.5   | 8 CVEs (details in footnote) | 2 |

**Table 6: Mitigated vulnerabilities by different partitions.**

For thttpd and nginx, the primary goal is to preserve confidentiality. According to our attack model, a vulnerability is considered mitigated by a partition if it resides in the insensitive (low-secrecy) domain. For thttpd, all identified CVEs can be mitigated by any of the three partitions, as they reside in the insensitive domain. For nginx version 1.9.5, none of the 8 CVEs reside in the authentication module, meaning that our partition 2 can mitigate all these vulnerabilities.

For wget and telnet, the focus is on protecting integrity. A vulnerability is considered mitigated if it resides in the sensitive (low-integrity) domain. Table 6 shows that the best partition PM found for wget (partition 2) can mitigate three out of four CVE vulnerabilities, while the best partition for telnet (partition 2) can mitigate all three vulnerabilities.

### 9. Discussion and Future Work

We discuss the limitations of PM, some of which were discovered during evaluation, and how it can be extended to address them:

1. **Function-Level Partitioning**: Similar to other tools, PM performs partitioning at the function level. Finer-grained partitioning, such as at the basic block or instruction level, is sometimes necessary to produce better partitions. This issue is exacerbated by the lack of bidirectional Remote Procedure Call (RPC) support. When a top-level function `f` in the call graph (e.g., `main`) accesses sensitive data, all functions `f` invokes transitively must stay in the sensitive partition, leading to a large sensitive domain. This can be resolved by providing bidirectional RPC or splitting `f`.

2. **Complex Lattices**: Currently, PM partitions a program into two domains based on a security lattice of two points. We plan to extend it to support more complex lattices that can result in more than two domains, such as mixing confidentiality and integrity. This introduces the complication of allowing further code duplication at different security levels.

3. **Optimization Metrics**: PM’s optimization framework currently supports only one optimization metric. An alternative would be to weight each of the four metrics so that a single linear function of all four metrics can be optimized in one step. Further study is needed to determine effective methods for producing these weights.

4. **Manual Implementation**: PM provides information about how to partition a program but does not offer complete automation in implementing the partition. Given partition information, a user needs to manually split files and adjust compilation scripts. This can be labor-intensive, which was a major reason why we tested only a few partitions for programs during evaluation. Automating these steps is feasible but requires additional engineering effort.

5. **Dynamic Analysis**: PM’s implementation relies on dynamic analysis for measuring information flow and context-switch frequency. While dynamic analysis is the only known technique for measuring information flow rates in realistic programs, it applies to specific runs and requires a set of test cases. Designing test cases with good coverage is challenging; this can be mitigated by using techniques such as fuzzing and deriving test cases based on typical use cases.

6. **Declassification Points**: By generating the optimal partition, PM automatically computes where data should be declassified. This works well for patterns like authentication, which compress sensitive information. However, it does not work well for declassification patterns that scramble sensitive information, such as encryption. For these cases, additional techniques or manual declassification would be needed.

### 10. Conclusions

We have proposed PM, a quantitative framework for assisting privilege separation. It is based on the philosophy that, through quantitative information flow, a practical partition can be produced by balancing security and performance. This balancing cannot be fully automated as it must consider user requirements. PM provides users with an interactive way to explore partitioning choices, making their intentions explicit via budgets and goals. Our experience with real applications suggests that PM, while having some limitations, allows users to explore the partitioning space in a principled fashion, helps produce partitions that are difficult to obtain manually, and finds partitions that balance security and performance effectively.

### 11. Acknowledgments

We thank anonymous reviewers and our shepherd, Lorenzo DeCarli, for their insightful comments. This research is supported by US NSF grants CNS-1801534, CCF-1723571, CNS-1408826, CNS-1816282, CNS-1408880, CNS-1526319, and a gift from Intel. The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements of the above organizations or any person connected with them.

### References

[1] 2016. lp_solve 5.5 reference guide. http://lpsolve.sourceforge.net/.

[2] David M. Beazley. 1997. SWIG Users Manual: Version 1.1.

[3] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge: Splitting Applications into Reduced-Privilege Compartments. In Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation. 309–322.

[4] David Brumley and Dawn Song. 2004. Privtrans: Automatically Partitioning Programs for Privilege Separation. In 13th Usenix Security Symposium. 57–72.

[5] Scott A. Carr and Mathias Payer. 2017. DataShield: Configurable Data Confidentiality and Integrity. In Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security. 193–204.

[6] Stephen Chong, Jed Liu, Andrew Myers, Xin Qi, K. Vikram, Lantian Zheng, and Xin Zheng. 2007. Secure Web Applications via Automatic Partitioning. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 31–44.

[7] David Clark, Sebastian Hunt, and Pasquale Malacaria. 2007. A Static Analysis for Quantifying Information Flow in a Simple Imperative Language. Journal of Computer Security 15, 3 (2007), 321–371.

[8] David D. Clark and D. R. Wilson. 1987. A Comparison of Commercial and Military Computer Security Policies. In IEEE Symposium on Security and Privacy (S&P). 184–195.

[9] Xinshu Dong, Hong Hu, Prateek Saxena, and Zhenkai Liang. 2013. A Quantitative Evaluation of Privilege Separation in Web Browser Designs. In 18th European Symposium on Research in Computer Security (ESORICS). 75–93.

[10] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The Program Dependence Graph and its Use in Optimization. ACM Transactions on Programming Languages and Systems 9, 3 (July 1987), 319–349.

[11] Joseph A. Goguen and José Meseguer. 1982. Security Policies and Security Models. In IEEE Symposium on Security and Privacy (S&P). 11–20.

[12] Khilan Gudka, Robert N. M. Watson, Jonathan Anderson, David Chisnall, Brooks Davis, Ben Laurie, Ilias Marinos, Peter G. Neumann, and Alex Richardson. 2015. Clean Application Compartmentalization with SOAAP. In 22nd ACM Conference on Computer and Communications Security (CCS). 1016–1031.

[13] Douglas Kilpatrick. 2003. Privman: A Library for Partitioning Applications. In USENIX Annual Technical Conference, FREENIX track. 273–284.

[14] Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Keeffe, Pierre-Louis Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David M. Eyers, Rüdiger Kapitza, Christof Fetzer, and Peter R. Pietzuch. 2017. Glamdring: Automatic Application Partitioning for Intel SGX. In USENIX Annual Technical Conference (ATC). 285–298.

[15] Shen Liu, Gang Tan, and Trent Jaeger. 2017. PtrSplit: Supporting General Pointers in Automatic Program Partitioning. In 24th ACM Conference on Computer and Communications Security (CCS). 2359–2371.

[16] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and Yubin Xia. 2015. Thwarting Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation. In 22nd ACM Conference on Computer and Communications Security (CCS). 1607–1619.

[17] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoffrey Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation. In ACM Conference on Programming Language Design and Implementation (PLDI). 190–200.

[18] Stephen McCamant and Michael D. Ernst. 2008. Quantitative Information Flow as Network Flow Capacity. In ACM Conference on Programming Language Design and Implementation (PLDI). 193–205.

[19] Andrew Myers and Barbara Liskov. 2000. Protecting Privacy Using the Decentralized Label Model. ACM Transactions on Software Engineering Methodology 9 (Oct. 2000), 410–442. Issue 4.

[20] Niels Provos, Markus Friedl, and Peter Honeyman. 2003. Preventing Privilege Escalation. In 12th Usenix Security Symposium. 231–242.

[21] Konstantin Rubinov, Lucia Rosculete, Tulika Mitra, and Abhik Roychoudhury. 2016. Automated Partitioning of Android Applications for Trusted Execution Environments. In International Conference on Software Engineering (ICSE). 923–934.

[22] Jerome Saltzer and Michael Schroeder. 1975. The Protection of Information in Computer Systems. Proceedings of The IEEE 63, 9 (Sept. 1975), 1278–1308.

[23] Umesh Shankar, Trent Jaeger, and Reiner Sailer. 2006. Toward Automated Information-Flow Integrity Verification for Security-Critical Applications. In Network and Distributed System Security Symposium (NDSS). 267–280.

[24] Geoffrey Smith. 2015. Recent Developments in Quantitative Information Flow (Invited Tutorial). In IEEE Symposium on Logic in Computer Science (LICS). 23–31.

[25] Chengyu Song, Byoungyoung Lee, Kangjie Lu, William Harris, Taesoo Kim, and Wenke Lee. 2016. Enforcing Kernel Security Invariants with Data Flow Integrity. In Network and Distributed System Security Symposium (NDSS).

[26] Gang Tan. 2017. Principles and Implementation Techniques of Software-Based Fault Isolation. Foundations and Trends in Privacy and Security 1, 3 (2017), 137–198.

[27] R. Wahbe, S. Lucco, T. Anderson, and S. Graham. 1993. Efficient Software-Based Fault Isolation. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP). ACM Press, New York, 203–216.

[28] Yang Liu, Yongzheng Wu, Jun Sun, and Jin Song Dong. 2013. Automatically Partitioning Software into Least Privilege Components Using Dynamic Data Dependency Analysis. In International Conference on Automated Software Engineering (ASE). 323–333.

[29] Steve Zdancewic, Lantian Zheng, Nathaniel Nystrom, and Andrew Myers. 2002. Secure Program Partitioning. ACM Transactions on Computer Systems (TOCS) 20, 3 (2002), 283–328.

[30] Lantian Zheng, Stephen Chong, Andrew Myers, and Steve Zdancewic. 2003. Using Replication and Partitioning to Build Secure Distributed Systems. In IEEE Symposium on Security and Privacy (S&P). 236–250.

### A. Program-Dependence-Graph Partitioning

To model a program with both functions and global variables, we use a Program Dependence Graph (PDG). In the PDG, vertices represent either functions or globals. Let \( FV \) be the set of functions and \( GV \) be the set of globals. Thus, \( V = FV \cup GV \).

Edges in the PDG represent either call edges or data-flow edges. Data-flow edges can be read edges or write edges. If function \( f \) reads a global \( g \), there is a directed read edge from \( g \) to \( f \). If function \( f \) writes to a global \( g \), there is a directed write edge from \( f \) to \( g \). Let \( CE \) be the set of call edges, \( RE \) be the set of read edges, and \( WE \) be the set of write edges. Thus, \( E = CE \cup RE \cup WE \).

In PDG partitioning, we allow globals to be sensitive. A partition \( P = (S, T) \) is defined as before, except that \( S \) and \( T \) are now sets of functions and globals. \( R = S \cap T \) is the set of duplicated functions and globals.

There are three kinds of forward boundary edges:
1. Forward boundary call edges: \( FBC = \{ e_{ij} \in CE \mid i \in S \land j \in T - R \} \)
2. Forward boundary read edges: \( FBR = \{ e_{ij} \in RE \mid i \in S - R \land j \in T \} \)
3. Forward boundary write edges: \( FBW = \{ e_{ij} \in WE \mid i \in S \land j \in T - R \} \)

Thus, \( FB = FBC \cup FBR \cup FBW \).

Similarly, there are three kinds of backward boundary edges:
1. Backward boundary call edges: \( BBC = \{ e_{ij} \in CE \mid i \in T \land j \in S - R \} \)
2. Backward boundary read edges: \( BBR = \{ e_{ij} \in RE \mid i \in T - R \land j \in S \} \)
3. Backward boundary write edges: \( BBW = \{ e_{ij} \in WE \mid i \in T \land j \in S - R \} \)

Thus, \( BB = BBC \cup BBR \cup BBW \).

Furthermore, the weights presented in Section 6 are adjusted. First, a node for a global variable has zero code size. Second, information-flow weights are added for data-flow edges. Information can flow only along the direction of edges; that is, information flows to a function from a global variable on a read edge and flows to a global variable from a function on a write edge. Conceptually, there should be no backward flow on data-flow edges.