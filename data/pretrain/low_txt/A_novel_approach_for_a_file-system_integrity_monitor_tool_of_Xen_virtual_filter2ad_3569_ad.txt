### 文件完整性检查（FIT）：离线与在线

#### 6.1 离线 FIT
离线文件完整性检查（FIT）需定期运行以检测系统中的问题。Tripwire 是这类工具中最为知名的一个，它依赖于一个基准数据库来存储文件系统的校验和，该数据库在 Tripwire 首次安装时生成。运行时，Tripwire 会验证当前系统，并将其与数据库中的校验和进行比较，根据预定义的安全策略报告违规行为。其他类似 Tripwire 的 FIT 工具包括 AIDE、Samhain 和 Osiris。

不幸的是，这些软件都存在我们在上文讨论过的 FIT 问题。为了解决这些问题，它们提出并实施了以下几种特殊方法：

- **延迟检测**：所有离线 FIT 工具都是定期运行的，因此它们都会遇到“延迟检测”的问题。Samhain 建议以守护进程模式运行，以尽量减少两次运行之间的安全窗口。
- **隐藏存在**：为了避免被攻击者怀疑（尤其是在攻击者具有本地访问权限的情况下），Samhain 采取了多种措施来隐藏其存在。例如，将数据库附加到 JPEG 文件末尾，将配置文件通过隐写术隐藏在 PostScript 图像文件中，修改二进制工具（命名为 samhain）和启动脚本的文件名，以及提供一个端口监听未经授权的连接。
- **保护数据库和策略**：Osiris 和 Samhain 使用客户端/服务器架构，并将数据库和策略保存在服务器上（假设服务器是安全的）。Osiris 不在被扫描主机上存储扫描数据，而是将结果发送回管理主机（服务器）进行比较。相比之下，Samhain 将数据库推送到客户端并在客户端验证完整性。
- **防止篡改二进制工具**：Osiris 和 Samhain 建议将扫描代理软件保存在只读介质（如 CD-ROM）上，但这样做会使软件升级变得繁琐。此外，Samhain 提供了一些自检功能，包括签名数据和配置文件、编译到可执行文件中的密钥，以及从系统进程列表中隐藏自己的能力。Osiris 则使用运行时会话密钥来进行身份验证和检测篡改。

然而，这些方法无法完全欺骗熟练的攻击者。如果攻击者获得了 root 权限，他们最终可以关闭这些工具，并对系统进行任意操作而不被察觉。另外，采用客户端/服务器架构的高级工具（如 Osiris 和 Samhain）还面临服务器暴露在网络中的风险，可能成为攻击者的攻击目标。

#### 6.2 在线 FIT
与离线解决方案不同，在线 FIT 能够实时监控并响应安全违规行为。这种策略是在文件系统活动的关键路径上进行监控，例如打开、读取、写入、重命名和删除等操作。这些活动可以实时揭示完整性违规。然而，这种方法也有一些权衡：为了检查低级活动，工具通常需要在操作系统内核级别工作，这需要对系统内核进行修补。这可能会与其他第三方补丁发生冲突，尤其是因为不同操作系统供应商使用的内核差异较大。此外，并非所有系统都允许将新代码推入内核。

I3FS 是一个在线 FIT 的例子，它是一个文件系统层，能够拦截和跟踪相关的 VFS 函数，从而实现实时检测特定文件的更改。然而，I3FS 需要修改受保护机器的内核，这在生产系统中并不总是可行的。

另一个流行的在线工具是 SNARE，这是一个完整的软件套件，可用于监控系统事件。SNARE 采用了客户端/服务器架构，客户端收集并将系统调用审计事件发送到服务器，服务器则进行分析。由于事件日志包含大量关于系统活动的信息，SNARE 也被提议作为 HIDS 解决方案。

然而，我们并不认为 SNARE 适合作为完整性检测工具，原因如下：
- **易被攻击者发现**：SNARE 容易被攻击者发现。例如，在 Linux 系统上，攻击者可以通过查找 agent 进程（名为 auditd）或检查 /proc/audit 文件是否存在来检测 SNARE。此外，如果攻击者获得了 root 访问权限，他们可以关闭 SNARE。
- **内核补丁**：SNARE 作为内核补丁应用（而不是内核模块），这使得使用变得复杂，因为需要重新编译内核并重启系统才能使 SNARE 生效，这在生产系统中并不总是理想的。
- **版本支持**：SNARE 作为补丁发布，这可能导致开发者需要为不同的内核版本分别发布补丁，特别是内核 API 经常发生变化。这显著减慢了对新内核的支持速度。

### 性能评估
XenFIT 只拦截一些与文件系统相关的系统调用来收集信息，因此其对系统的影响主要集中在文件系统活动上。因此，我们的性能评估仅针对文件系统基准测试进行。

为了测量性能损失，我们选择了一个经典的基准测试：解压缩 Linux 内核。选择这个基准是因为 Linux 内核包含大量数据，解压过程会创建和删除大量的文件和目录。例如，解压 Linux 2.6.16 内核会生成超过 27000 个文件和目录，包括临时数据。

我们使用命令 `tar xjvf linux-2.6.16.tar.bz2` 对 Linux 2.6.16 内核进行解压，并在原生内核和安装了 XenFIT 的内核上各运行 10 次测试，然后计算平均结果。测试域的配置如下：
- Dom0: 内存 384MB RAM, CPU: Pentium3 600MHz, IDE HDD: 40GB, NIC: 100Mbps
- DomU: 内存 128MB RAM, 文件支持的交换分区: 512MB, 文件支持的根分区: 2GB

所有测试域运行 Linux Ubuntu 发行版（版本 Breezy Badger），并进行了最新更新。

表 2 显示了基准测试的结果（单位为秒）：

|                | 原生 VM        | XenFIT 保护的 VM |
|----------------|---------------|------------------|
| 实际时间 (real) | 1m57.561s     | 11m50.680s       |
| 用户时间 (user) | 1m23.760s     | 9m35.540s        |
| 系统时间 (sys)  | 0m15.382s     | 1m43.470s        |

可以看到，XenFIT 保护的内核开销大约是原生内核的 5.8 倍，总体开销约为 607%。XenFIT 的高性能影响可以解释为其处理断点时必须执行大量的超切换。

### 相关工作
我们的工作结合了动态监控系统和基于主机的入侵检测系统（HIDS）两个领域。我们的工作受到了 K.Arigos 等人在 [2] 中工作的启发，但他们提出了利用 Xen 进行蜜罐目的的断点，而我们则将这一想法用于 HIDS。我们处理调试事件的方式也与 [2] 完全不同：他们在 Xen 层（通过一个附加的超级调用）推送安全策略，并让 hypervisor 分析策略。为此，他们对 Xen 层进行了较大的修改（约 2700 行代码），并将其称为 TCB。我们认为对这样一个重要组件进行如此大的修改是不理想的，因为它会使整个系统变得不稳定，并增加维护成本。在我们的解决方案中，XenFIT 完全不对 hypervisor 或受保护的 DomU 进行任何修改。

此外，在 [2] 中，所有的安全策略分析都在 hypervisor 内完成。因此，我们认为对策略或安全引擎的任何修改都需要重新编译 hypervisor 并重启系统才能生效。而在我们的解决方案中，所有策略和决策制定都在外部进行。

### 结论
本文提出了 XenFIT 解决方案的设计和实现，以消除当前文件系统完整性解决方案的一些问题。XenFIT 引入了一些独特的特性，包括实时监控、集中式策略、无需基准数据库（从而大大减轻了管理负担）、易于部署和高度防篡改。我们建议将 XenFIT 与其他日志文件监控工具结合使用，以实现实时入侵通知。此外，如果严格安装，XenFIT 更加隐蔽，即使对于特权用户也难以检测。所有这些优势使 XenFIT 成为一个有价值的 HIDS 解决方案。

随着 Xen 即将进入主线 Linux 内核，我们相信这一解决方案将惠及所有人。目前，XenFIT 仅适用于基于 Linux 的虚拟域。我们计划在未来为 FreeBSD、NetBSD 等其他操作系统提供支持。

### 参考文献
[1] N. A.Kamble, J. Nakajima, and A. K.Mallick. Evolution in kernel debugging using hardware virtualization with xen. In Proceedings of the 2006 Ottawa Linux Symposium, Ottawa, Canada, July 2006.
[2] K. Asrigo, L. Litty, , and D. Lie. Virtual machine-based honeypot monitoring. In Proceedings of the 2nd international conference on Virtual Execution Environments, New York, NY, USA, June 2006. ACM Press.
[3] T. Atkins. SWATCH: The Simple WATCHer of Logﬁles. http://swatch.sourceforge.net/, July 2004.
[4] CERT Coordination Center. CERT/CC Overview Incident and Vulnerability Trends. Technical report, Carnegie Mellon Software Engineering Institute, May 2003.
[5] CMN. SAdoor: A non listening remote shell and execution server. http://cmn.listprojects.darklab.org/, 2002.
[6] B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho, I. Pratt, A. Warﬁeld, P. Barham, and R. Neugebauer. Xen and the art of virtualization. In Proceedings of the ACM Symposium on Operating Systems Principles, October 2003.
[7] DWARF Workgroup. DWARF Debugging Format Standard. http://dwarf.freestandards.org/Home.php, January 2006.
[8] R. Hock. Dica rootkit. http://packetstormsecurity.nl/UNIX/penetration/rootkits/dica.tgz, 2002.
[9] Intersect Alliance. System iNtrusion Analysis and Reporting Environment. http://www.intersectalliance.com/projects/Snare/, January 2005.
[10] G. H. Kim and E. H. Spafford. The Design and Implementation of Tripwire: A File System Integrity Checker. In ACM Conference on Computer and Communications Security, pages 18–29, 1994.
[11] T. Miller. Analysis of the Knark rootkit. www.ossec.net/rootkits/studies/knark.txt, 2001.
[12] T. Miller. Analysis of the T0rn rootkit. http://www.sans.org/y2k/t0rn.htm, 2002.
[13] S. Patil, A. Kashyap, G. Sivathanu, and E. Zadok. I3FS: An In-Kernel Integrity Checker and Intrusion Detection File System. In Proceedings of the 18th USENIX Large Installation System Administration Conference (LISA 2004), pages 69–79, Atlanta, GA, November 2004.
[14] H. Pomeranz. File Integrity Assessment via SSH. http://www.samag.com/documents/s=9950/sam0602a/0602a.htm, February 2006.
[15] I. Pratt, K. Fraser, S. Hand, C. Limpach, A. Warﬁeld, D. Magenheimer, J. Nakajima, and A. Mallick. Xen 3.0 and the art of virtualization. In Proceedings of the 2005 Ottawa Linux Symposium, Ottawa, Canada, July 2005.
[16] sd. Linux on-the-ﬂy kernel patching. http://www.phrack.org/show.php?p=58&a=7, July 2002.
[17] SGI Inc. LKCD - Linux Kernel Crash Dump. http://lkcd.sf.net, April 2006.
[18] L. Somer. Linux Rootkit 5. http://packetstormsecurity.nl/UNIX/penetration/rootkits/lrk5.src.tar.gz, 2000.
[19] The AIDE team. AIDE: Advanced Intrusion Detection Environment. http://sourceforge.net/projects/aide, November 2005.
[20] The Osiris team. Osiris host integrity monitoring. http://www.hostintegrity.com/osiris/, September 2005.
[21] The Samhain Labs. Samhain manual. http://la-samhna.de/samhain/manual/index.html, 2004.
[22] The Samhain Labs. The SAMHAIN ﬁle integrity/intrusion detection system. http://la-samhna.de/samhain/, January 2006.
[23] The Snort team. Snort - the de-facto standard for intrusion detection/prevention. http://www.snort.org, January 2006.
[24] Xen project. Xen interface manual. http://www.cl.cam.ac.uk/Research/SRG/netos/xen/readmes/interface/interface.html, August 2006.