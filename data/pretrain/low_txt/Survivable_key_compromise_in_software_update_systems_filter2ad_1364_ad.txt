### Automated Use and Key Vulnerability
The timestamp role is used in an automated manner, making it highly vulnerable to exposure if the system it resides on is compromised. Given the relatively low risk associated with the compromise of this role, a single key can be used for the timestamp role. Similarly, the release role also carries a low immediate risk from compromise, and in most cases, the use of threshold signatures provides little additional benefit. Therefore, a single key can also be used for the release role.

### Roles Benefiting from Threshold Signatures
The roles that benefit the most from threshold signatures are the root role and the targets role. The root role is critical because its compromise immediately puts all clients at risk. Furthermore, once the root role is compromised, its keys cannot be reliably revoked and replaced without a trusted communication channel. The targets role should also use threshold signatures, albeit for slightly different reasons. Although the immediate risk from compromising the targets role is lower than that of the root role, the keys for the targets role are used more frequently, making them more susceptible to compromise. Even for small projects, the burden of implementing threshold signatures for these roles does not need to be high. A simple (t, n) = (2, 2) threshold can provide some level of resilience against key compromise.

### Diversity of Keys
Due to the threats of weak key generation and algorithmic weaknesses discussed in Section 4, the types of keys and the libraries used to generate them should vary within a software update system. Our current implementation of TUF only supports RSA keys and provides one library for key generation. However, RSA keys can be generated using other cryptographic libraries and used in TUF.

### Automated Signing
The timestamp role will always be used in an automated fashion to frequently re-sign the timestamp file. Depending on the project, the release file may also be signed in an automated manner. To reduce the likelihood of key compromise during automated signing, the signing process should take place on a system that is not public-facing. Once signed, the metadata can then be pushed to a public repository.

### Metadata Expiration Times
All metadata in TUF includes expiration times, which vary depending on the type of metadata file. For the timestamp file, the expiration time should be short, with the exact duration depending on the specific system. For example, if repository mirrors synchronize once a day, the timestamp file's expiration time should be no less than one to two days, depending on when the synchronizations occur. The release file should have an expiration time that is not much longer than the period between expected changes to the targets role's metadata. The targets role's metadata should use expiration times on the order of the expected time until new target files are made available. In contrast, the root role's metadata should generally have a much longer expiration time. If the root role's metadata expires too soon, clients who have not updated for an extended period may not be able to detect whether an attacker is replaying the root metadata. Additionally, frequent usage of the root keys increases their potential for compromise, making it reasonable for some projects to use a multi-year expiration time for the root metadata.

### Systems Vulnerable to Time Attacks
Systems that are vulnerable to attacks that modify the system time, such as those resulting from insecure communication with a time server, may be susceptible to freeze attacks due to the inability to detect metadata expiration.

### Use of SSL
Our design avoids reliance on SSL to ensure that it is not dependent on the security of public-facing servers. However, the use of SSL in conjunction with our design offers further defense against freeze attacks and an additional layer of key security when the server and PKI are not compromised. One way to gain the benefits of SSL with minimal overhead is to transmit only the timestamp file over SSL.

### Related Work
Since the introduction of the first threshold cryptosystem in 1987 [18], many new threshold systems have been developed [51]. Often, these schemes have impractical key setup requirements or assumptions [6]. However, it is trivial to construct a multi-signature scheme by having the multi-signature of a message just be a list of signatures [6]. This scheme is what we use in our design. The advantages of this approach include the simplicity of implementation and safety from rogue-key attacks, which are generally the result of the key setup process of proposed multi-signature schemes. One drawback of this simple scheme is that the signature size grows linearly with the number of signatures.

Like threshold schemes, proxy signature schemes for delegating signing abilities have a long history [41, 57], and the use of rights delegation in computer systems has existed for much longer. Our design uses delegation by warrant, where signed certificates indicate the public keys to which specific rights are delegated. This system lends itself to the use of ordinary signature schemes rather than special-purpose proxy signature schemes [29].

The signature scheme we use is forward-secure and proactive. Forward-secure signature schemes, which are key-evolving, need to be able to change the secret key without changing the public key [1]. We avoid this complication by using a certificate-based system.

Existing approaches to certificate revocation include the use of semi-trusted mediators (SEMs) [8], certificate revocation lists (CRLs), the Online Certificate Status Protocol (OCSP) [39], certification revocation trees (CRTs) [17], and short-term certificates [40] that allow clients to set their own recency requirements [47]. In our design, we make use of multiple revocation approaches, including short-term certificates, to improve revocation against various types of adversaries.

Our work is not concerned with detecting key compromise but rather with maintaining a secure state both before and after keys are known or suspected to be compromised. There are methods of detecting key compromise [27], but these generally require signature verification to be done online.

Our previous work identified major security flaws in Linux package managers [11]. That work highlighted the ease with which attackers can become mirrors for popular Linux distributions and, in some cases, even force specific clients to use the attacker’s mirror [37]. Previous work by Bellissimo looked at the limited use of authenticated data by software update systems [7]. That work recommended the development of a standard for secure updates.

We have focused on designing a security framework that is applicable to software update systems on any operating system and for any application. However, some applications and operating systems can also apply the principle of least privilege to installed updates. This means that, in addition to decreasing the likelihood of successful attacks on clients by being resilient to key compromise, these systems can also isolate compromises by not giving updates and programs run from updates more privilege than required. For example, web browsers that install unprivileged extensions [5, 38] can keep the rest of the client’s system secure even if an attacker causes a malicious extension update. If the installed software is sufficiently isolated from the software update system, a future update could return the system to a secure state. Operating system security mechanisms such as privileged users installing updates for unprivileged users, as well as fine-grained mechanisms like SELinux, can be used for this purpose.

### Conclusion
Software update systems that do not authenticate updates have received increased scrutiny in recent years. Due to this attention, many of these systems have implemented simple authentication mechanisms that cannot survive key compromise. We feel that software update systems must move to using the approaches we advocate to be resilient to the many threats to key security. Our open-source software update framework, TUF, allows both new and existing systems to benefit from a design that leverages responsibility separation, multi-signature trust, trust revocation, and low-risk roles.

### Acknowledgments
We thank those who contributed to Thandy, including Sebastian Hahn and Martin Peck. We are grateful to Geremy Condra, Tadayoshi Kohno, Wenjun Hu, and the anonymous reviewers for their valuable comments.

This material is based upon work supported by the National Science Foundation under Grants No. CNS-0737890 and CNS-0959138, and by Google. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of BBN Technologies, Corp., the GENI Project Office, or the National Science Foundation.

### References
[1] M. Abdalla and L. Reyzin. A new forward-secure digital signature scheme. Advances in Cryptology - ASIACRYPT 2000, pages 116-129, 2000.
...
[60] Yum: Yellow Dog Updater Modified. http://linux.duke.edu/projects/yum/.