### Limitations of Kobold

Kobold may not detect all potential security vulnerabilities, particularly those related to the "confused deputy" problem. While the vulnerabilities identified in this paper are significant, we lack a comprehensive access control policy specification for comparison. A jailbreak is not necessary to use Kobold, but it would provide logging tools that significantly ease dynamic analysis of IPC functionality. However, not all iOS versions have been jailbroken, and future jailbreaks are not guaranteed. Additionally, our model of the iOS sandbox is not a perfect inversion of the actual sandbox policies. New sandbox filters introduced in iOS 11 were not fully reverse-engineered by iOracle, which means there may be mach ports accessible to third-party applications that Kobold does not detect.

### Argument Values

Kobold can statically extract the data types of remote argument methods, but it does not automatically determine the initial values for these arguments. Simple variables (e.g., integers or strings) can be easily assigned various values, but initializing complex, undocumented class types requires substantial reverse engineering or dynamic analysis of the method during normal runtime operations.

### Scope

Kobold does not detect NSXPC remote methods provided by shared libraries and other interfaces for remote methods, such as XPC or Mach Interface Generator. The general approach of combining static and dynamic analysis could be applied to these interfaces, but they are less amenable to static analysis (e.g., class-dump will not detect their methods). A small number (less than ten) of problematic method invocations were intentionally excluded from analysis due to Xcode errors preventing compilation. The entitlement survey conducted by Kobold does not include paid applications and only analyzes a sample of free iOS applications available at a given time. A longitudinal study of a larger number of applications, including paid ones, might reveal new semi-private entitlements and trends in their distribution over time.

### Black Box Testing

Kobold relies on error message semantics to infer decentralized entitlement requirements for remote methods. More sophisticated analysis methods, such as symbolic execution or backtracing, could detect additional entitlement requirements missed by Kobold. Kobold uses completion handler messages to determine which remote methods were invoked successfully. However, many extracted remote methods do not have completion handlers. Therefore, a grey box testing approach, such as setting debugger breakpoints in daemon code, could reveal more third-party accessible methods.

### Related Work

Kobold is related to work in six fields: 1) iOS access control policy analysis; 2) Android access control policy analysis; 3) iOS IPC analysis; 4) iOS exploitation; 5) iOS application analysis; and 6) fuzzing.

#### iOS Access Control

Kobold uses tools from two prior works to identify mach-ports accessible to third-party applications through the sandbox. SandScout [10] reverse engineers and models iOS sandbox policies but does not model the semantics of entitlements. iOracle [9] builds upon SandScout, including the modeling of Unix Permissions and capabilities like entitlements and sandbox extensions. This allows Kobold to input a set of third-party accessible entitlements and automatically determine which mach-ports are accessible through the sandbox for an application with those entitlements. SandScout and iOracle build upon earlier work by reverse engineers who pioneered research into the iOS sandbox [3], [7], [13], [24].

#### Android Access Control

Several research papers discuss access control in Android. Kratos [28], AceDroid [1], and ACMiner [15] discover inconsistencies in security policy enforcement. ARF [16] identifies re-delegation vulnerabilities in Android system services. Invetter [36] focuses on the widespread yet undocumented input validation problem.

#### iOS IPC Analysis

To the best of our knowledge, Kobold is the first systematic exploration of NSXPC remote methods, although prior work has investigated Apple's IPC mechanisms. Han et al. [18] fuzzed Apple driver interfaces by dynamically observing system behaviors to infer dependencies between API calls. The Pangu team [30] presented their approach to fuzzing XPC services to exploit data dereference operations. Beer [2] fuzzed XPC services to identify opportunities for type confusion attacks. Kydyraliev [22] explored Mach Interface Generator (MIG) services by observing messages sent at runtime and replaying them with mutations to trigger crashes. Kobold differs from these works in that it seeks confused deputy vulnerabilities, considering both the method's functionality and accessibility, and uses static analysis to determine the mach-ports, names, and argument types of remote methods.

#### iOS Attacks

Kobold assumes that the confused deputy attacks and crashes discovered can be deployed by a third-party app that passes Apple's app vetting process and infiltrates the App Store. This assumption is based on three prior works on modifying iOS app behavior after passing the vetting process. Wang et al. [29] used return-oriented programming (ROP) to modify their program's control flow after it had passed the app vetting process and been published to the App Store. XiOS [4] improved upon Wang et al.'s work by reducing the attack's complexity and proposing an attack mitigation in the form of an in-line reference monitor. Finally, Han et al. [19] used obfuscation techniques conceptually similar to Java reflection to bypass app vetting and invoke private API calls after publishing to the App Store.

#### iOS App Analysis

Kobold's entitlement extraction is a form of app analysis. PiOS [12] uses backtracing to determine register values for Objective-C dispatch calls, allowing static analysis to infer which function will be executed. This helps detect when applications invoke private API calls. iRiS [8] adds a dynamic analysis component using forced execution to resolve dispatches that are difficult to infer through static analysis. Kobold uses a similar approach to CRiOS [25] for app scraping, and CRiOS analyzes third-party applications for network security issues. Chen et al. [5] use the intuition that malicious libraries detected in Android applications may have similarly malicious counterparts on the iOS platform. They analyze malicious Android libraries and use the findings to help detect their counterparts on the iOS platform, which is less amenable to analysis. iCredFinder [32] analyzes iOS applications that use popular Software Development Kits (SDKs) and automatically searches for misused credentials associated with those SDKs.

#### Fuzzing

As future work, Kobold can be expanded by applying state-of-the-art fuzzing techniques. Mutational fuzzing techniques, such as those used by American Fuzzy Lop (AFL) [35], could help generate input values for simple data types (e.g., strings and integers). There is already an experimental port [31] of AFL to the iOS platform. Hybrid fuzzing techniques, such as QSYM [34], combine fuzzing with concolic analysis to efficiently choose input values. Any evaluation of a fuzzing system for iOS should adhere to the guidelines set by Klees et al. [21] in their evaluation of common flaws in fuzzing research.

### Conclusion

In conclusion, Kobold allowed us to reveal and investigate the relatively unexplored attack surface of NSXPC remote methods available to third-party applications. To model the capabilities of third-party applications, Kobold automatically extracted entitlements from popular third-party applications on the App Store and discovered several semi-private entitlements normally unavailable to developers. Invoking the methods we discovered with Kobold revealed several previously unknown access control flaws and multiple daemon crashes.

### Acknowledgments

We thank David Wu and Iulia Mandă for their assistance. This work was supported in part by the Army Research Office (ARO) grant W911NF-16-1-0299, the National Science Foundation (NSF) CAREER grant CNS-1253346, and a grant from the Romanian Ministry of Research and Innovation, CCCDI - UEFISCDI, project number PN-III-P1-1.2-PCCDI-2017-0272 / 17PCCDI-2018, within PNCDI III. Any opinions, findings, conclusions, or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the funding agencies.

### References

[1] Y. Aafer, J. Huang, Y. Sun, X. Zhang, N. Li, and C. Tian, “AceDroid: Normalizing Diverse Android Access Control Checks for Inconsistency Detection,” in Proceedings of ISOC Network and Distributed System Security Symposium (NDSS), Feb. 2018.

[2] I. Beer, “Auditing Exploiting Apple and IPC,” https://thecyberwire.com/events/docs/IanBeer JSS Slides.pdf, 2015, accessed: 2018-07-24.

[3] D. Blazakis, “The apple sandbox,” Arlington, VA, January, 2011.

[4] M. Bucicoiu, L. Davi, R. Deaconescu, and A.-R. Sadeghi, “XiOS: Extended Application Sandboxing on iOS,” in Proceedings of the ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2015.

[5] K. Chen, X. Wang, Y. Chen, P. Wang, Y. Lee, X. Wang, B. Ma, A. Wang, Y. Zhang, and W. Zou, “Following Devil’s Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS,” in Proceedings of the IEEE Symposium on Security and Privacy, 2016.

[6] K. Conger, “Researchers: Uber’s iOS App Had Secret Permissions That Allowed It to Copy Your Phone Screen,” https://gizmodo.com/researchers-uber-s-ios-app-had-secret-permissions-that-1819177235, 2017, accessed: 2018-07-24.

[7] D. A. Dai Zovi, “Apple ios 4 security evaluation,” Black Hat USA, 2011.

[8] Z. Deng, B. Saltaformaggio, X. Zhang, and D. Xu, “iRiS: Vetting Private API Abuse in iOS Applications,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2015.

[9] L. Deshotels, R. Deaconescu, C. Carabas, I. Manda, W. Enck, M. Chiroiu, N. Li, and A.-R. Sadeghi, “iOracle: Automated Evaluation of Access Control Policies in iOS,” in Proceedings of the ACM Asia Conference on Computer and Communications Security (ASIACCS), 2018.

[10] L. Deshotels, R. Deaconescu, M. Chiroiu, L. Davi, W. Enck, and A.-R. Sadeghi, “SandScout: Automatic Detection of Flaws in iOS Sandbox Profiles,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), Oct. 2016.

[11] A. Documentation, “Foundation,” https://developer.apple.com/documentation/foundation?language=objc#overview, accessed: 2018-11-13.

[12] M. Egele, C. Kruegel, E. Kirda, and G. Vigna, “PiOS: Detecting privacy leaks in iOS applications.” in Proceedings of the Network and Distributed Systems Security Symposium (NDSS), 2011.

[13] S. Esser, “ios 8 containers, sandboxes, and entitlements,” http://www.slideshare.net/i0n1c/ruxcon-2014-stefan-esser-ios8-containers-sandboxes-and-entitlements, 2014, accessed: 2015-11-6.

[14] I. Ferber, “Data You Can Trust,” https://developer.apple.com/videos/play/wwdc2018/222, 2018, accessed: 2018-07-24.

[15] S. A. Gorski III, B. Andow, A. Nadkarni, S. Manandhar, W. Enck, E. Bodden, and A. Bartel, “ACMiner: Extraction and Analysis of Authorization Checks in Androids Middleware,” in Proceedings of the ACM Conference on Data and Application Security and Privacy (CODASPY), March 2019.

[16] S. A. Gorski III and W. Enck, “ARF: Identifying Re-Delegation Vulnerabilities in Android System Services,” in Proceedings of the ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec), May 2019.

[17] M. Grace, Y. Zhou, Z. Wang, and X. Jiang, “Systematic Detection of Capability Leaks in Stock Android Smartphones.” in Proceedings of the Network and Distributed Systems Security Symposium (NDSS), 2012.

[18] H. Han and S. K. Cha, “IMF: Inferred Model-Based Fuzzer,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2017.

[19] J. Han, S. M. Kywe, Q. Yan, F. Bao, R. Deng, D. Gao, Y. Li, and J. Zhou, “Launching Generic Attacks on iOS with Approved Third-Party Applications,” in Proceedings of the International Conference on Applied Cryptography and Network Security (ACNS), 2013.

[20] N. Hardy, “The Confused Deputy: (or why capabilities might have been invented),” SIGOPS Operating Systems Review, vol. 22, no. 4, pp. 36–38, 1988.

[21] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks, “Evaluating Fuzz Testing,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2018.

[22] M. Kydyraliev, “Mining Mach Services within OS X Sandbox,” http://2013.zeronights.org/includes/docs/Meder Kydyraliev - Mining Mach Services within OS X Sandbox.pdf, 2013, accessed: 2015-11-6.

[23] J. Levin, “A Look into iOS Entitlements (Long) Evening with Mobile Obliterator,” http://newosxbook.com/articles/EveningWithMobileObliterator.html, 2013, accessed: 2015-11-9.

[24] C. Miller, D. Blazakis, D. DaiZovi, S. Esser, V. Iozzo, and R.-P. Weinmann, iOS Hacker’s Handbook. John Wiley & Sons, 2012.

[25] D. Orikogbo, M. Bühler, and M. Egele, “CRiOS: Toward Large-Scale iOS Application Analysis,” in Proceedings of the ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM), 2016.

[26] A. P. Release, “App Store Shatters Records on New Year’s Day,” https://www.apple.com/newsroom/2017/01/app-store-shatters-records-on-new-years-day/, 2017, accessed: 2018-07-24.

[27] ——. “App Store Kicks Off 2018 with Record-Breaking Holiday Season,” https://www.apple.com/newsroom/2018/01/app-store-kicks-off-2018-with-record-breaking-holiday-season/, 2018, accessed: 2018-07-24.

[28] Y. Shao, J. Ott, Q. A. Chen, Z. Qian, and Z. Mao, “Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework,” in Proceedings of the Network and Distributed Systems Security Symposium (NDSS), 2016.

[29] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee, “Jekyll on iOS: When Benign Apps Become Evil,” in Proceedings of the USENIX Security Symposium, 2013.

[30] T. Wang, H. Xu, and X. Chen, “Review and Exploit Neglected Attack Surface in iOS 8,” https://www.blackhat.com/docs/us-15/materials/us-15-Wang-Review-And-Exploit-Neglected-Attack-Surface-In-iOS-8.pdf, 2015, accessed: 2018-07-24.

[31] W. Wang and Z. Wang, “Make iOS App More Robust and Secure through Fuzzing,” https://ruxcon.org.au/assets/2016/slides/Make iOS App more Robust-and Security through Fuzzing-1476442078.pdf, 2016, accessed: 2018-11-11.

[32] H. Wen, J. Li, Y. Zhang, and D. Gu, “An Empirical Study of SDK Credential Misuse in iOS Apps,” in Proceedings of the Asia-Pacific Software Engineering Conference, 2018.

[33] L. Xing, X. Bai, T. Li, X. Wang, K. Chen, X. Liao, S.-M. Hu, and X. Han, “Cracking App Isolation on Apple: Unauthorized Cross-App Resource Access on MAC OS,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2015.

[34] I. Yun, S. Lee, M. Xu, Y. Jang, and T. Kim, “QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing,” in Proceedings of the USENIX Security Symposium, 2018.

[35] M. Zalewski, “Technical Details for afl-fuzz,” http://lcamtuf.coredump.cx/afl/technical_details.txt, Unspecified, accessed: 2018-11-11.

[36] L. Zhang, Z. Yang, Y. He, Z. Zhang, Z. Qian, G. Hong, Y. Zhang, and M. Yang, “Invetter: Locating Insecure Input Validations in Android Services,” in Proceedings of the ACM Conference on Computer and Communications Security (CCS), 2018.