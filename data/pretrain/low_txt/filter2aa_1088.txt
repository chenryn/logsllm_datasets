# The Next Generation of Cryptanalytic Hardware

## Introduction
Field-Programmable Gate Arrays (FPGAs) offer a flexible and efficient way to implement custom silicon. This presentation will explore the fundamental concepts behind gate logic and demonstrate how FPGAs can be utilized for highly efficient password cracking, achieving speeds hundreds of times faster than a conventional PC.

### Speaker
**David Hulton**
- Founder, Dachb0den Labs
- Chairman, ToorCon Information Security Conference
- Embedded Systems Engineer, Pico Computing, Inc.

### Disclaimer
- **Educational Purposes Only**
- **Full Disclosure**
- **I'm not a hardware expert**

### Goals
- **Introduction to FPGAs**
- **Gate Logic**
  - Basic Gates
  - Adders and Storage
  - Implementation with Electronics
- **FPGA Architecture**
  - Configurable Logic Blocks (CLBs)
  - Registers
  - Logic Routing
  - Input/Output Blocks (IOBs)
  - Block RAM
  - Digital Clock Managers (DCMs)
  - Programmable Routing Matrix
- **Pros and Cons of FPGAs**
- **Common Applications**
- **Types of FPGAs**
- **Verilog: A Hardware Description Language**
- **Massively Parallel Processing**
- **Pipelining**
- **Self-Reconfiguration**
- **History of FPGAs and Cryptography**
- **PicoCrack: A Case Study**
- **Conclusion and Q&A**

## Introduction to FPGAs
### Field-Programmable Gate Array (FPGA)
- **Definition**: An FPGA is an integrated circuit designed to be configured by a customer or designer after manufacturing.
- **Functionality**: Allows for prototyping and implementing complex digital circuits.
- **Programming**: Code translates directly into circuit logic.

### What is Gate Logic?
- **Basic Building Blocks**: NOT, AND, OR, NOR, NAND, XOR, XNOR.
- **Building Complex Logic**: These basic gates can be combined to create more complex logic, such as adders and storage elements like flip-flops.
- **Implementation**: These logical operations can be implemented using electronic components.

### FPGA Architecture
- **Configurable Logic Blocks (CLBs)**: The primary building blocks for creating logic functions.
- **Registers (Flip-Flops)**: Used for fast data storage.
- **Logic Routing**: Connects CLBs and other components.
- **Input/Output Blocks (IOBs)**: Handle external communication.
- **Block RAM**: Internal memory for data storage.
- **Digital Clock Managers (DCMs)**: Manage clock distribution.
- **Programmable Routing Matrix**: Intelligently connects all components.

### Pros and Cons of FPGAs
- **Pros**:
  - Massively parallel processing
  - Pipelining capabilities
  - Reprogrammability
  - Self-reconfiguration
- **Cons**:
  - Size constraints and limitations
  - More difficult to code and debug

### Common Applications
- Encryption/Decryption
- AI/Neural Networks
- Digital Signal Processing (DSP)
- Software Radio
- Image Processing
- Communications Protocol Decoding
- MATLAB/Simulink Code Acceleration

### Types of FPGAs
- **Antifuse**: Programmable only once.
- **Flash**: Programmable many times.
- **SRAM**: Dynamically programmable, most common technology, requires a loader (does not retain state after power-off).

## Verilog: A Hardware Description Language
- **Syntax**: Similar to C, easy to learn but difficult to master.
- **Examples**:
  - One-bit AND gate
  - Eight-bit AND gate
  - Eight-bit Flip-Flop

## Massively Parallel Processing
- **PC Example**: 
  - For loop iterating over 32 elements, taking approximately 7 clock cycles at 3.0 GHz.
- **Hardware Example**:
  - Same operation in one clock cycle at 300 MHz, demonstrating the speed advantage of FPGAs.

## Pipelining
- **PC Example**:
  - For loop with multiple operations, taking approximately 10 clock cycles at 3.0 GHz.
- **Hardware Example**:
  - Pipeline stages, reducing the overall time to \(x + 3\) clock cycles at 300 MHz.

## Self-Reconfiguration
- **PC Example**:
  - Sequential execution of MultiplyArrays, RC4, and MD5.
- **Hardware Example**:
  - Dynamic loading of different bit files for each operation, controlled by a central control logic.

## History of FPGAs and Cryptography
- **Key Figures**:
  - Ronald L. Rivest
  - Bruce Schneier
  - Tsutomu Shimomura
- **Cryptography Breakthroughs**:
  - 1996: Publication on minimal key lengths for symmetric ciphers.
  - 1998: Electronic Frontier Foundation (EFF) cracked DES in under 3 days.
  - 2001: Richard Clayton and Mike Bond cracked DES on IBM ATMs.
  - 2004: Philip Leong's work on IDEA and RC4 using FPGAs.

## PicoCrack: A Case Study
- **Supported Algorithms**:
  - Unix DES
  - Windows Lanman
  - Windows NTLM (full support coming soon)
- **Hardware Design**:
  - Pipeline design for internal cracking engine.
  - Interface over PCMCIA.
  - Supports distributed cracking and resume functionality.
- **Software Design**:
  - GUI and console interfaces using WxWidgets.
  - Supports multiple card clusters.
  - Automatic loading of required FPGA images.

## Performance Comparison
- **PC vs. FPGA**:
  - PC: 2,000,000 checks per second (using rainbowcrack).
  - FPGA: 100,000,000 checks per second at 100 MHz, with potential to reach 200 MHz.

## Pico E-12
- **Form Factor**: Compact Flash Type-II
- **Processor**: Optional 450 MHz PowerPC
- **Memory**: 128 MB PC-133 RAM, 64 MB Flash ROM
- **Connectivity**: Gigabit Ethernet, JTAG Debugging Port

## Demonstration and Feedback
- **Live Demonstration**: PicoCrack in action.
- **Feedback**: Open floor for questions and suggestions.

## Conclusions and Shameful Plugs
- **ToorCon 7**: End of September 2005, San Diego, CA, USA.
- **Contact Information**:
  - David Hulton: [PI:EMAIL]
  - OpenCores: [http://www.opencores.org](http://www.opencores.org)
  - Xilinx: ISE Foundation (Free 60-day trial)
  - Pico Computing, Inc.: [http://www.picocomputing.com](http://www.picocomputing.com)

**Questions? Suggestions?**