### 8.2 Structure of the RSM

The RSM (Reconfigurable System Monitor) specification consists of three primary modules, as illustrated in Figure 3:
1. **GEOM**: This module computes basic geometric functions.
2. **IZ (Incursion Zone)**: This module sets up the geometry specific to the RSM.
3. **ALG (Algorithm)**: This module analyzes incoming data with respect to the structures defined by GEOM and IZ.

**GEOM** is protected by a layer that verifies its outputs, ensuring strong correctness arguments. The system maintains two sets of persistent state:
- The incursion zone structure, managed by **IZ**.
- The data structures for the system interface, managed by **ALG**.

If any check fails, it triggers a reconfiguration signal. As this signal propagates through **IZ**, the incursion zone structure is adjusted to meet its postconditions. Similarly, **ALG** ensures that the system data structures meet their postconditions. The monitoring layer handles periodic function initiation and reconfiguration when necessary. The `RM.choose` function calls the appropriate module functions to meet the preconditions, such as reinitializing the incursion zone structure.

The entire reconfiguration process must be completed within one update data cycle, which lasts 2000 milliseconds in real time. To facilitate the proof of this timing requirement, each function in the module and reconfiguration mechanism interfaces has an associated variable representing a timing bound. This variable is instantiated after the implementation is created. This approach allows the implementer to partition the allowed time in a manner most suitable for the implementation while enabling detailed timing theorems to be proven, ensuring the overall timing requirement is met.

### 8.3 Assuring Properties of the RSM

A full proof of every design-level property for the RSM specification cannot be presented here. However, to illustrate how the high-level reconfiguration properties can be proven, we will examine three representative design-level properties, one from each major structural element. We will then explain how each can be demonstrated for the RSM specification.

#### Module Property (M1)
- **Property M1**: If none of a module’s functions is currently executing, that module’s postcondition is met.
- **Explanation**: While this property might seem challenging to assure, it can be simplified by disallowing data structure access through any function outside the module interface, which is statically checkable. In the RSM specification, only **IZ** can access the incursion zone structure, and only **ALG** can access the shared data structures. Each module interface function ensures that the postconditions are not violated.

#### Application Property (App1)
- **Property App1**: If the application is not reconfiguring, it will function according to the specification represented by `config`'s value.
- **Explanation**: The monitoring layer calls **ALG**, passing it a parameter representing the current operational specification. **ALG** then determines the appropriate service level of **IZ** for the given specification and the function it is calculating. For example, if `S2` is the operational specification, **ALG** will call the function to check whether an input data target is in an incursion zone with a service level parameter `a2`, checking only the runway proper. If `S1` is the operational specification, **ALG** will call this function with a service level parameter `a1` or `a2`, depending on the conditions of the monitoring aircraft and target. Each functional level `Si` can be independently assessed by setting the specification parameter of **ALG** equal to `i` and determining the function sequences called for each function in **ALG**'s interface.

#### Reconfiguration Mechanism Property (RM7)
- **Property RM7**: Invi   Ù Invix  Ù Invij
- **Explanation**: The reconfiguration invariants for the RSM are over the shared data structure, as this is the only way the RSM can affect the larger system. The transition invariant is that the reconfiguration process must not affect any elements of the shared data structure; it cannot begin or end a pilot alert, output possible collision targets, or instruct the aircraft to do anything other than remain on the course set by the operational specification. This invariant is a subset of the invariant of `Si` because it is determined by `Si` and is the same for all possible target transitions `Sj`. It can be shown for the RSM by ensuring that no element of the reconfiguration mechanism accesses **ALG**'s data structures, which is true because **ALG**'s prep function does not access those structures.

### 9. Tool Support

Assurance arguments about complex software properties are not simple and cannot be made with the push of a button. However, their construction and management can be greatly simplified with appropriate tool support. Our framework facilitates this by defining the various architectural elements of a reconfigurable system and specifying what these elements' properties should be. A variety of current theorem proving systems could be extended to allow developers to categorize the elements of a specification within this framework. For each of these elements, the system could then automatically generate (and in some cases, attempt to prove) the properties associated with that category of element.

### 10. Conclusion

The complexity of many current safety-critical applications and the strict dependability requirements have increased the prominence of reconfigurable system designs. These designs offer opportunities to meet system dependability goals. However, reconfiguration can introduce questions of correctness and assurance. We have presented a rigorous definition of reconfiguration assurance and an architectural framework through which an application might be constructed to meet the properties of that definition. This framework includes a set of design-level properties that, when demonstrated, mean the definition’s properties have been met. We have listed these properties necessary to assure reconfiguration correctness and outlined a strategy through which they might be met in practice.

### Acknowledgments

We would like to thank Phil Koopman for technical discussions on the subject of this paper. Martin Hiller also provided several helpful comments and suggestions. This work was partially sponsored by NASA under grant number NAG1-02103.

### References

[1] Anderson, T., and R. W. Witty. “Safe programming.” BIT, 18:1-8, 1978.

[2] Bateman, A., D. Ward, and J. Monaco. “Stability Analysis for Reconfigurable Systems with Actuator Saturation.” Proc. American Control Conf., Anchorage, AK, May 8-10, 2002.

[3] Cailliau, D., and R. Bellenger. “The Corot Instruments Software: Towards Intrinsically Reconfigurable Real-time Embedded Processing Software in Space-borne Instruments.” Proc. 4th IEEE International Symposium on High-Assurance Systems Engineering, Nov. 1999.

[4] Green, D.F. Jr. “Runway Safety Monitor Algorithm for Runway Incursion Detection and Alerting.” NASA/CR-2002-211416, National Aeronautics and Space Administration, January 2002.

[5] Jahanian, F., and A.K. Mok. “Safety Analysis of Timing Properties in Real-Time Systems.” IEEE Trans. on Software Engineering, 12(9):890-904.

[6] Karsai G., A. Ledeczi, J. Sztipanovits, G. Peceli, G. Simon, and T. Kovacshazy. “An Approach to Self-Adaptive Software based on Supervisory Control.” Self-Adaptive Software, Lecture Notes in Computer Science, 2002.

[7] Lions, J. “Ariane V Flight 501 Failure: Report by the Inquiry Board.” http://ravel.esrin.esa.it/docs/esa-x-1819eng.pdf.

[8] Neema S., T. Bapty, and J. Scott. “Adaptive Computing and Run-time Reconfiguration.” Proc. Military Applications of Programmable Logic Devices, Laurel, MD, September 1999.

[9] Seeling, K. “Reconfiguration in an Integrated Avionics Design.” 15th AIAA/IEEE Digital Avionics Systems Conference, Oct. 1996.

[10] Sha, Lui. “Using Simplicity to Control Complexity.” IEEE Software 18(4):20-28.

[11] Schlichting, R. D., and F. B. Schneider. “Fail-stop processors: An approach to designing fault-tolerant computing systems.” ACM Transactions on Computing Systems 1(3):222-238.

[12] Shelton, C., P. Koopman, and W. Nace. “A framework for scalable analysis and design of system-wide graceful degradation in distributed embedded systems.” Eighth IEEE International Workshop on Object-oriented Real-time Dependable Systems (WORDS 2003), Guadelajara, Mexico, Jan. 2003.

[13] Stewart, D.B., and G. Arora. “Dynamically Reconfigurable Embedded Software-Does It Make Sense?” Proc. Second IEEE International Conference on Engineering of Complex Computer Systems, Oct. 1996.

[14] Strunk, E. A., and J. C. Knight. “Functionality/Dependability Co-design in Real-Time Embedded Software.” Workshop on Co-design for Embedded Real-time Systems, July 2003.

[15] Wika, K.G. and J.C. Knight. “On the Enforcement of Software Safety Policies.” 10th Annual IEEE Conf. on Computer Assurance (COMPASS `95), June 1995.

[16] Yeh, Y. C. “Triple-Triple Redundant 777 Primary Flight Computer.” Proc. 1996 IEEE Aerospace Applications Conference, vol. 1, New York, N.Y., February 1996.