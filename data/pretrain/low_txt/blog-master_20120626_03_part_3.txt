### GDB Maintenance and Configuration Commands

#### Python Maintenance Settings
- `maintenance set python` - Prefix command for Python maintenance settings.
- `maintenance set python auto-load` - Enable or disable the auto-loading of Python code when an object is opened.
- `maintenance set python print-stack` - Enable or disable the printing of a Python stack dump on error.

#### Debug Registers
- `maintenance set show-debug-regs` - Set whether to show variables that mirror the x86 debug registers.

#### Internal Variables
- `maintenance show` - Display GDB internal variables used by the GDB maintainer.
- `maintenance show dwarf2` - Show DWARF 2 specific variables.
- `maintenance show dwarf2 max-cache-age` - Show the upper bound on the age of cached DWARF 2 compilation units.
- `maintenance show gdb_datadir` - Show GDB's data directory path.
- `maintenance show internal-error` - Show GDB's behavior when an internal error is detected.
- `maintenance show internal-error corefile` - Show whether GDB will create a core file of itself when an internal error is detected.
- `maintenance show internal-error quit` - Show whether GDB will quit when an internal error is detected.
- `maintenance show internal-warning` - Show GDB's behavior when an internal warning is detected.
- `maintenance show internal-warning corefile` - Show whether GDB will create a core file of itself when an internal warning is detected.
- `maintenance show internal-warning quit` - Show whether GDB will quit when an internal warning is detected.
- `maintenance show profile` - Show internal profiling settings.
- `maintenance show python` - Prefix command for Python maintenance settings.
- `maintenance show python auto-load` - Show whether Python code will be auto-loaded when an object is opened.
- `maintenance show python print-stack` - Show whether the Python stack will be printed on error.
- `maintenance show show-debug-regs` - Show whether variables that mirror the x86 debug registers are displayed.

#### Resource Usage
- `maintenance space` - Set the display of space usage.
- `maintenance time` - Set the display of time usage.

#### Address Translation
- `maintenance translate-address` - Translate a section name and address to a symbol.

#### Command Deprecation
- `maintenance undeprecate` - Undeprecate a command.

### Command Classes

#### Obscure Commands
- `checkpoint` - Fork a duplicate process (experimental).
- `compare-sections` - Compare section data on the target to the exec file.
- `complete` - List the completions for the rest of the line as a command.
- `monitor` - Send a command to the remote monitor (remote targets only).
- `python` - Evaluate a Python command.
- `record` - Abbreviated form of "target record" command.
- `record delete` - Delete the rest of the execution log and start recording it anew.
- `record stop` - Stop the record/replay target.
- `restart` - Restore program context from a checkpoint.
- `stop` - There is no `stop` command.

#### Running Commands
- `advance` - Continue the program up to the given location (same form as args for break command).
- `attach` - Attach to a process or file outside of GDB.
- `continue` - Continue the program being debugged.
- `detach` - Detach a process or file previously attached.
- `detach checkpoint` - Detach from a checkpoint (experimental).
- `detach inferior` - Detach from inferior ID.
- `disconnect` - Disconnect from a target.
- `finish` - Execute until the selected stack frame returns.
- `handle` - Specify how to handle a signal.
- `inferior` - Use this command to switch between inferiors.
- `interrupt` - Interrupt the execution of the debugged program.
- `jump` - Continue the program being debugged at the specified line or address.
- `kill` - Kill the execution of the program being debugged.
- `kill inferior` - Kill inferior ID.
- `next` - Step program.
- `nexti` - Step one instruction.
- `reverse-continue` - Continue the program being debugged but run it in reverse.
- `reverse-finish` - Execute backward until just before the selected stack frame is called.
- `reverse-next` - Step program backward.
- `reverse-nexti` - Step backward one instruction.
- `reverse-step` - Step program backward until it reaches the beginning of another source line.
- `reverse-stepi` - Step backward exactly one instruction.
- `run` - Start the debugged program.
- `signal` - Continue the program, giving it the signal specified by the argument.
- `start` - Run the debugged program until the beginning of the main procedure.
- `step` - Step program until it reaches a different source line.
- `stepi` - Step one instruction exactly.
- `target` - Connect to a target machine or process.
- `target child` - Unix child process (started by the "run" command).
- `target core` - Use a core file as a target.
- `target exec` - Use an executable file as a target.
- `target extended-remote` - Use a remote computer via a serial line.
- `target multi-thread` - Threads and pthreads support.
- `target record` - Log program while executing and replay execution from the log.
- `target remote` - Use a remote computer via a serial line.
- `task` - Use this command to switch between Ada tasks.
- `thread` - Use this command to switch between threads.
- `thread apply` - Apply a command to a list of threads.
- `thread apply all` - Apply a command to all threads.
- `until` - Execute until the program reaches a source line greater than the current.

#### Stack Commands
- `backtrace` - Print backtrace of all stack frames.
- `bt` - Print backtrace of all stack frames.
- `down` - Select and print the stack frame called by this one.
- `frame` - Select and print a stack frame.
- `return` - Make the selected stack frame return to its caller.
- `select-frame` - Select a stack frame without printing anything.
- `up` - Select and print the stack frame that called this one.

#### Status Commands
- `info` - Generic command for showing things about the program being debugged.
- `info address` - Describe where a symbol is stored.
- `info all-registers` - List of all registers and their contents.
- `info args` - Argument variables of the current stack frame.
- `info auxv` - Display the inferior's auxiliary vector.
- `info breakpoints` - Status of user-settable breakpoints.
- `info catch` - Exceptions that can be caught in the current stack frame.
- `info checkpoints` - IDs of currently known checkpoints.
- `info classes` - All Objective-C classes.
- `info common` - Print out the values contained in a Fortran COMMON block.
- `info copying` - Conditions for redistributing copies of GDB.
- `info dcache` - Print information on the dcache performance.
- `info display` - Expressions to display when the program stops.
- `info extensions` - All filename extensions associated with a source language.
- `info files` - Names of targets and files being debugged.
- `info float` - Print the status of the floating point unit.
- `info frame` - All about the selected stack frame.
- `info functions` - All function names.
- `info handle` - What the debugger does when the program gets various signals.
- `info inferiors` - IDs of currently known inferiors.
- `info line` - Core addresses of the code for a source line.
- `info locals` - Local variables of the current stack frame.
- `info macro` - Show the definition of a MACRO.
- `info mem` - Memory region attributes.
- `info os` - Show OS data ARG.
- `info proc` - Show /proc process information about any running process.
- `info program` - Execution status of the program.
- `info record` - Info record options.
- `info record insn-number` - Show the current number of instructions in the record/replay buffer.
- `info registers` - List of integer registers and their contents.
- `info scope` - List the variables local to a scope.
- `info selectors` - All Objective-C selectors.
- `info set` - Show all GDB settings.
- `info sharedlibrary` - Status of loaded shared object libraries.
- `info signals` - What the debugger does when the program gets various signals.
- `info source` - Information about the current source file.
- `info sources` - Source files in the program.
- `info stack` - Backtrace of the stack.
- `info symbol` - Describe what symbol is at location ADDR.
- `info target` - Names of targets and files being debugged.
- `info tasks` - Provide information about all known Ada tasks.
- `info terminal` - Print the inferior's saved terminal status.
- `info threads` - IDs of currently known threads.
- `info tracepoints` - Status of tracepoints.
- `info types` - All type names.
- `info variables` - All global and static variable names.
- `info vector` - Print the status of the vector unit.
- `info warranty` - Various kinds of warranty you do not have.
- `info watchpoints` - Synonym for `info breakpoints`.
- `info win` - List of all displayed windows.

#### Macro Commands
- `macro` - Prefix for commands dealing with C preprocessor macros.
- `macro define` - Define a new C/C++ preprocessor macro.
- `macro expand` - Fully expand any C/C++ preprocessor macro invocations in an expression.
- `macro expand-once` - Expand C/C++ preprocessor macro invocations appearing directly in an expression.
- `macro list` - List all the macros defined using the `macro define` command.
- `macro undef` - Remove the definition of the C/C++ preprocessor macro with the given name.

#### Show Commands
- `show` - Generic command for showing things about the debugger.
- `show annotate` - Show annotation level.
- `show architecture` - Show the architecture of the target.
- `show args` - Show the argument list to give the program being debugged when it is started.
- `show auto-solib-add` - Show autoloading of shared library symbols.
- `show backtrace` - Show backtrace specific variables.
- `show backtrace limit` - Show the upper bound on the number of backtrace levels.
- `show backtrace past-entry` - Show whether backtraces should continue past the entry point of a program.
- `show backtrace past-main` - Show whether backtraces should continue past "main".
- `show backtrace past-zero-pc` - Show whether backtraces should continue past a zero PC value.
- `show breakpoint` - Breakpoint specific settings.
- `show breakpoint always-inserted` - Show mode for inserting breakpoints.
- `show breakpoint auto-hw` - Show automatic usage of hardware breakpoints.
- `show breakpoint pending` - Show the debugger's behavior regarding pending breakpoints.
- `show build-id-core-loads` - Show whether CORE-FILE loads the build-id associated files automatically.
- `show build-id-verbose` - Show the debugging level of the build-id locator.
- `show can-use-hw-watchpoints` - Show the debugger's willingness to use watchpoint hardware.
- `show case-sensitive` - Show case sensitivity in name search.
- `show charset` - Show the host and target character sets.
- `show check` - Show the status of the type/range checker.
- `show check range` - Show range checking.
- `show check type` - Show type checking.
- `show coerce-float-to-double` - Show coercion of floats to doubles when calling functions.
- `show commands` - Show the history of commands you typed.
- `show complaints` - Show the max number of complaints about incorrect symbols.
- `show confirm` - Show whether to confirm potentially dangerous operations.
- `show convenience` - Debugger convenience ("$foo") variables.
- `show copying` - Conditions for redistributing copies of GDB.
- `show cp-abi` - Show the ABI used for inspecting C++ objects.
- `show data-directory` - Show GDB's data directory.
- `show debug` - Generic command for showing GDB debugging flags.
- `show debug arch` - Show architecture debugging.
- `show debug displaced` - Show displaced stepping debugging.
- `show debug dwarf2-die` - Show debugging of the DWARF2 DIE reader.
- `show debug expression` - Show expression debugging.
- `show debug frame` - Show frame debugging.
- `show debug infrun` - Show inferior debugging.
- `show debug lin-lwp` - Show debugging of GNU/Linux lwp module.
- `show debug lin-lwp-async` - Show debugging of GNU/Linux async lwp module.
- `show debug observer` - Show observer debugging.
- `show debug overload` - Show debugging of C++ overloading.
- `show debug record` - Show debugging of the record/replay feature.
- `show debug remote` - Show debugging of the remote protocol.
- `show debug serial` - Show serial debugging.
- `show debug target` - Show target debugging.
- `show debug timestamp` - Show timestamping of debugging messages.
- `show debug xml` - Show XML parser debugging.
- `show debug-file-directory` - Show the directories where separate debug symbols are searched for.
- `show debugvarobj` - Show varobj debugging.
- `show demangle-style` - Show the current C++ demangling style.
- `show detach-on-fork` - Show whether GDB will detach the child of a fork.
- `show directories` - Current search path for finding source files.
- `show disable-randomization` - Show disabling of the debuggee's virtual address space randomization.
- `show disassemble-next-line` - Show whether to disassemble the next source line or instruction when execution stops.
- `show disassembly-flavor` - Show the disassembly flavor.
- `show displaced-stepping` - Show the debugger's willingness to use displaced stepping.
- `show editing` - Show editing of command lines as they are typed.
- `show endian` - Show endianness of the target.
- `show environment` - The environment to give the program.
- `show exec-direction` - Show the direction of execution (forward/reverse).
- `show exec-done-display` - Show notification of completion for asynchronous execution commands.
- `show exec-wrapper` - Show the wrapper for running programs.
- `show extension-language` - Show mapping between filename extension and source language.
- `show follow-fork-mode` - Show the debugger response to a program call of fork or vfork.
- `show gnutarget` - Show the current BFD target.
- `show height` - Show the number of lines GDB thinks are in a page.
- `show history` - Generic command for showing command history parameters.
- `show history expansion` - Show history expansion on command input.
- `show history filename` - Show the filename in which to record the command history.
- `show history save` - Show saving of the history record on exit.
- `show history size` - Show the size of the command history.
- `show host-charset` - Show the host character set.
- `show inferior-tty` - Show the terminal for future runs of the program being debugged.
- `show input-radix` - Show the default input radix for entering numbers.
- `show interactive-mode` - Show whether GDB runs in interactive mode.
- `show language` - Show the current source language.
- `show libthread-db-search-path` - Show the current search path for libthread_db.
- `show listsize` - Show the number of source lines GDB will list by default.
- `show logging` - Show logging options.
- `show logging file` - Show the current logfile.
- `show logging overwrite` - Show whether logging overwrites or appends to the log file.
- `show logging redirect` - Show the logging output mode.
- `show max-user-call-depth` - Show the max call depth for user-defined commands.
- `show mem` - Memory regions settings.
- `show mem inaccessible-by-default` - Show handling of unknown memory regions.
- `show multiple-symbols` - Show how the debugger handles ambiguities in expressions.
- `show non-stop` - Show whether GDB controls the inferior in non-stop mode.
- `show opaque-type-resolution` - Show resolution of opaque struct/class/union types (if set before loading symbols).
- `show osabi` - Show the OS ABI of the target.
- `show output-radix` - Show the default output radix for printing of values.
- `show overload-resolution` - Show overload resolution in evaluating C++ functions.
- `show pagination` - Show the state of pagination.
- `show paths` - Current search path for finding object files.
- `show print` - Generic command for showing print settings.
- `show print address` - Show printing of addresses.
- `show print array` - Show prettyprinting of arrays.
- `show print array-indexes` - Show printing of array indexes.
- `show print asm-demangle` - Show demangling of C++/ObjC names in disassembly listings.
- `show print demangle` - Show demangling of encoded C++/ObjC names when displaying symbols.
- `show print elements` - Show the limit on string chars or array elements to print.
- `show print frame-arguments` - Show printing of non-scalar frame arguments.
- `show print inferior-events` - Show printing of inferior events (e.g., thread start and exit).
- `show print max-symbolic-offset` - Show the largest offset that will be printed in a symbolic form.
- `show print null-stop` - Show printing of char arrays to stop at the first null char.
- `show print object` - Show printing of an object's derived type based on vtable info.
- `show print pascal_static-members` - Show printing of Pascal static members.
- `show print pretty` - Show prettyprinting of structures.
- `show print repeats` - Show the threshold for repeated print elements.
- `show print sevenbit-strings` - Show printing of 8-bit characters in strings as \nnn.
- `show print static-members` - Show printing of C++ static members.
- `show print symbol-filename` - Show printing of source filename and line number with symbols.
- `show print thread-events` - Show printing of thread events (such as thread start and exit).
- `show print union` - Show printing of unions interior to structures.
- `show print vtbl` - Show printing of C++ virtual function tables.
- `show prompt` - Show GDB's prompt.
- `show radix` - Show the default input and output number radices.
- `show record` - Show record options.
- `show record insn-number-max` - Show the record/replay buffer limit.
- `show record stop-at-limit` - Show whether record/replay stops when the record/replay buffer becomes full.
- `show remote` - Remote protocol specific variables.
- `show remote P-packet` - Show the current use of the remote protocol `P' (set-register) packet.
- `show remote X-packet` - Show the current use of the remote protocol `X' (binary-download) packet.
- `show remote Z-packet` - Show the use of remote protocol `Z' packets.
- `show remote access-watchpoint-packet` - Show the current use of the remote protocol `Z4' (access-watchpoint) packet.
- `show remote attach-packet` - Show the current use of the remote protocol `vAttach' (attach) packet.
- `show remote binary-download-packet` - Show the current use of the remote protocol `X' (binary-download) packet.
- `show remote conditional-tracepoints-packet` - Show the current use of the remote protocol `ConditionalTracepoints' (conditional-tracepoints) packet.
- `show remote exec-file` - Show the remote pathname for "run".
- `show remote fetch-register-packet` - Show the current use of the remote protocol `p' (fetch-register) packet.
- `show remote get-thread-local-storage-address-packet` - Show the current use of the remote protocol `qGetTLSAddr' (get-thread-local-storage-address) packet.
- `show remote hardware-breakpoint-limit` - Show the maximum number of target hardware breakpoints.
- `show remote hardware-breakpoint-packet` - Show the current use of the remote protocol `Z1' (hardware-breakpoint) packet.
- `show remote hardware-watchpoint-limit` - Show the maximum number of target hardware watchpoints.
- `show remote hostio-close-packet` - Show the current use of the remote protocol `vFile:close' (hostio-close) packet.
- `show remote hostio-open-packet` - Show the current use of the remote protocol `vFile:open' (hostio-open) packet.
- `show remote hostio-pread-packet` - Show the current use of the remote protocol `vFile:pread' (hostio-pread) packet.
- `show remote hostio-pwrite-packet` - Show the current use of the remote protocol `vFile:pwrite' (hostio-pwrite) packet.
- `show remote hostio-unlink-packet` - Show the current use of the remote protocol `vFile:unlink' (hostio-unlink) packet.
- `show remote kill-packet` - Show the current use of the remote protocol `vKill' (kill) packet.
- `show remote library-info-packet` - Show the current use of the remote protocol `qXfer:libraries:read' (library-info) packet.
- `show remote memory-map-packet` - Show the current use of the remote protocol `qXfer:memory-map:read' (memory-map) packet.