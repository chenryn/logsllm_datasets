### Minimizing Average Completion Times

While the primary focus is on minimizing average completion times, the results also provide insights into the performance of Sincronia compared to existing network designs. For instance, Varys [10] reports an improvement over TCP by a factor of 1.85× on average and approximately the same at the 95th percentile.

### 6. Related Work & Open Problems

Recent efforts in both networking and theoretical communities have significantly advanced network design for coflows. In this section, we compare Sincronia with related work from these communities and discuss several open problems in the context of network design for coflows.

#### Comparison with Existing Work

- **Varys [10]**: Reports an improvement over TCP by a factor of 1.85× on average and at the 95th percentile.
- **Qiu et al. [22]**: Provided the first coflow scheduling algorithm with approximation guarantees of 64/3 for the offline case with zero release dates.
- **Ahmadi et al. [3]**: Improved the approximation to 4 for zero release dates and 5 with release dates, but required complex per-flow rate allocations.

Sincronia achieves state-of-the-art approximation guarantees without complex per-flow rate allocation, thus overcoming the limitations of existing solutions. Despite these advancements, there remains a gap between known lower bounds (impossibility of better than 2-approximation) and upper bounds (4-approximation for offline problems with zero release dates).

#### Open Problems

1. **Bridging the Gap Between Lower and Upper Bounds**:
   - There is a significant gap between the known lower bounds (impossibility of better than 2-approximation) and upper bounds (4-approximation for offline problems with zero release dates). Bridging this gap is an intriguing open problem.

2. **Improved Competitive Ratio for Online Coflow Scheduling**:
   - Khuller et al. [19] presented an online algorithm with a competitive ratio of 12. Sincronia achieves similar guarantees. Designing a coflow scheduling algorithm with a better competitive ratio remains an open challenge. An offline algorithm that achieves a better approximation factor for zero release dates could lead to improvements in the online algorithm using the framework from Khuller et al. [19].

3. **Necessity of Centralized Solutions**:
   - There is a strong lower bound of Ω(√n) on achievable approximation for average CCT using algorithms that do not use any coordination [8]. The amount of coordination required to mitigate this lower bound is unclear. Sincronia requires a centralized controller to implement BSSI, but the amount of computation needed at the centralized controller remains an open question.

4. **Coflows with Paths**:
   - Sincronia, like [10, 12], assumes that routing of flows within and across coflows is decided by the network layer. However, co-designing routing along with scheduling of coflows may achieve better performance. This problem has been studied in recent papers [18, 29], but designing optimal algorithms remains open.

5. **Extensions to Non-clairvoyant Schedulers**:
   - Sincronia assumes that information about a coflow is available at the arrival time. Recent work has shown that it is possible to identify coflows and their properties within a reasonable estimate for many applications [28]. Designing a near-optimal non-clairvoyant scheduler remains an interesting future direction.

6. **Extensions to Other Performance Metrics**:
   - Sincronia is designed to optimize for average (weighted) completion time. Extending the results to deadline-sensitive coflows and other metrics such as tail coflow completion time is an interesting question. Defining a notion of fairness for coflows is also an intriguing direction.

### 7. Proof Outline for Theorem 1

In this section, we provide a high-level idea for our results in §3. The detailed proofs are in the technical report [2].

- **Linear Programming Relaxation**: We use a linear programming relaxation to obtain a lower bound on the optimal value of the average CCT and compare the average CCT of our algorithm to this lower bound.
- **Algorithm Structure**: Our algorithm decouples the problem of obtaining a feasible schedule into two parts: ordering coflows and then obtaining a feasible schedule using a greedy rate allocation scheme.
- **Ordering Coflows**: We relax the problem by considering a concurrent open shop problem, where the optimal value is a lower bound on the original coflow scheduling instance. We use a primal-dual algorithm to compute an ordering such that the weighted completion time is at most twice the optimal value.
- **Greedy Rate Allocation**: We present a greedy rate-allocation scheme that maintains the order returned by the primal-dual algorithm. This ensures that the completion time of coflow c in our greedy rate-allocation scheme is at most twice the completion time in the concurrent open shop instance. Combining these results yields the 4-approximation result.

### 8. Conclusion

We have presented Sincronia, a network design for coflows that provides near-optimal performance and can be implemented on top of any transport layer mechanism that supports priority scheduling. Sincronia achieves this using a key technical result: given a "right" ordering of coflows, any per-flow rate allocation mechanism achieves average coflow completion time within 4× of the optimal. Evaluation results suggest that Sincronia not only admits a practical, near-optimal design but also improves upon state-of-the-art network designs for coflows.

### Acknowledgments

This work was supported in part by NSF grants CCF-1526067, CMMI-1537394, CCF-1522054, and CCF-1740822.

### References

[1] 2018. Sincronia Repository. sincronia-coflow. https://github.com/

[2] Saksham Agarwal, Shijin Rajakrishnan, Akshay Narayan, Rachit Agarwal, David Shmoys, and Amin Vahdat. 2018. Sincronia: Near-Optimal Network Design for Coflows. In Tech Report.

[3] Saba Ahmadi, Samir Khuller, Manish Purohit, and Sheng Yang. 2017. On scheduling coflows. In MOS IPCO.

[4] Mohammad Alizadeh, Shuang Yang, Milad Sharif, Sachin Katti, Nick McKeown, Balaji Prabhakar, and Scott Shenker. 2013. pFabric: Minimal Near-optimal Datacenter Transport. In ACM SIGCOMM.

[5] Nikhil Bansal and Subhash Khot. 2010. Inapproximability of hypergraph vertex cover and applications to scheduling problems. In EATCS ICALP.

[6] Kwok Ho Chan, Jozef Babiarz, and Fred Baker. 2006. Configuration Guidelines for DiffServ Service Classes. https://tools.ietf.org/html/rfc4594.

[7] Mosharaf Chowdhury and Ion Stoica. 2012. Coflow: A networking abstraction for cluster applications. In ACM HotNets.

[8] Mosharaf Chowdhury and Ion Stoica. 2015. Efficient coflow scheduling without prior knowledge. In ACM SIGCOMM.

[9] Mosharaf Chowdhury, Matei Zaharia, Justin Ma, Michael I Jordan, and Ion Stoica. 2011. Managing data transfers in computer clusters with orchestra. In ACM SIGCOMM.

[10] Mosharaf Chowdhury, Yuan Zhong, and Ion Stoica. 2014. Efficient coflow scheduling with varys. In ACM SIGCOMM.

[11] Jeffrey Dean and Sanjay Ghemawat. 2004. MapReduce: simplified data processing on large clusters. In USENIX OSDI.

[12] Fahad R Dogar, Thomas Karagiannis, Hitesh Ballani, and Antony Rowstron. 2014. Decentralized task-aware scheduling for data center networks. In ACM SIGCOMM.

[13] Peter X Gao, Akshay Narayan, Gautam Kumar, Rachit Agarwal, Sylvia Ratnasamy, and Scott Shenker. 2015. phost: Distributed near-optimal datacenter transport over commodity network fabric. In ACM CoNEXT.

[14] Naveen Garg, Amit Kumar, and Vinayaka Pandit. 2007. Order scheduling models: hardness and algorithms. In IARCS FSTTCS.

[15] Mark Handley, Costin Raiciu, Alexandru Agache, Andrei Voinescu, Andrew Moore, Gianni Antichi, and Marcin Wojcik. 2017. Re-architecting datacenter networks and stacks for low latency and high performance. In ACM SIGCOMM.

[16] Chi-Yao Hong, Matthew Caesar, and P Godfrey. 2012. Finishing flows quickly with preemptive scheduling. In ACM SIGCOMM.

[17] Michael Isard, Mihai Budiu, Yuan Yu, Andrew Birrell, and Dennis Fetterly. 2007. Dryad: distributed data-parallel programs from sequential building blocks. In ACM EuroSys.

[18] Hamidreza Jahanjou, Erez Kantor, and Rajmohan Rajaraman. 2017. Asymptotically Optimal Approximation Algorithms for Coflow Scheduling. In ACM SPAA.

[19] Samir Khuller, Jingling Li, Pascal Sturmfels, Kevin Sun, and Prayaag Venkat. 2018. Select and Permute: An Improved Online Framework for Scheduling to Minimize Weighted Completion Time. In LATIN.

[20] Yucheng Low, Danny Bickson, Joseph Gonzalez, Carlos Guestrin, Aapo Kyrola, and Joseph M Hellerstein. 2012. Distributed GraphLab: a framework for machine learning and data mining in the cloud. Proceedings of the VLDB Endowment, 5(8): 716-727.

[21] Grzegorz Malewicz, Matthew H Austern, Aart JC Bik, James C Dehnert, Ilan Horn, Naty Leiser, and Grzegorz Czajkowski. 2010. Pregel: a system for large-scale graph processing. In ACM SIGMOD.

[22] Zhen Qiu, Cliff Stein, and Yuan Zhong. 2015. Minimizing the total weighted completion time of coflows in datacenter networks. In ACM SPAA.

[23] Thomas A. Roemer. 2006. A note on the complexity of the concurrent open shop problem. In Journal of Scheduling, 9(4): 389-396. Springer.

[24] Sushant Sachdeva and Rishi Saket. 2013. Optimal inapproximability for scheduling problems via structural hardness for hypergraph vertex cover. In IEEE CCC.

[25] Christo Wilson, Hitesh Ballani, Thomas Karagiannis, and Ant Rowtron. 2011. Better never than late: Meeting deadlines in datacenter networks. In ACM SIGCOMM.

[26] Yuan Yu, Michael Isard, Dennis Fetterly, Mihai Budiu, Úlfar Erlingsson, Pradeep Kumar Gunda, and Jon Currey. 2008. DryadLINQ: A System for General-Purpose Distributed Data-Parallel Computing Using a High-Level Language. In USENIX OSDI.

[27] Matei Zaharia, Mosharaf Chowdhury, Tathagata Das, Ankur Dave, Justin Ma, Murphy McCauley, Michael J Franklin, Scott Shenker, and Ion Stoica. 2010. Resilient distributed datasets: A fault-tolerant abstraction for in-memory cluster computing. In USENIX NSDI.

[28] Hong Zhang, Li Chen, Bairen Yi, Kai Chen, Mosharaf Chowdhury, and Yanhui Geng. 2016. CODA: Toward automatically identifying and scheduling coflows in the dark. In ACM SIGCOMM.

[29] Yangming Zhao, Kai Chen, Wei Bai, Minlan Yu, Chen Tian, Yanhui Geng, Yiming Zhang, Dan Li, and Sheng Wang. 2015. Rapier: Integrating routing and scheduling for coflow-aware data center networks. In IEEE INFOCOM.