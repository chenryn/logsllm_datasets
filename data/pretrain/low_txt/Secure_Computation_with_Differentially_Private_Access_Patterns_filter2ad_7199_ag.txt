### Iteration and Optimization

In the current implementation, our graphs only depict the first iteration of the algorithm and do not reflect the simple optimization that halves the computation time in subsequent iterations. 

### Comparison with a Cleartext Baseline

GraphSC [28] compared its execution time with GraphLab [25], a state-of-the-art framework for running graph-parallel algorithms on cleartext data. Both frameworks were used to run Matrix Factorization using gradient descent with an input length of 32K. The results showed that GraphSC is approximately 200K to 500K times slower than GraphLab when run on 2 to 16 processors. Considering the improvements we have made over GraphSC, we estimate that our secure computation is about 16K to 32K times slower than the insecure baseline computation (GraphLab) under the same experimental conditions.

### Oblivious Shuffle

In our OblivGraph framework, we use an Oblivious Shuffle, which has a factor of \(\log(n)\) less overhead compared to the Bitonic sort used in GraphSC. Our Oblivious Shuffle operation is based on the Waksman network [36]. The cost of shuffling using a Waksman network is approximately \(B \cdot W(n)\), where \(W(n) = n \log n - n + 1\) is the number of oblivious swaps required to permute \(n\) input elements, and \(B\) is the size of the elements being shuffled. In the original Waksman switching network, the input size \(n\) is assumed to be a power of two. To handle arbitrary-sized inputs, we would need to use an improved version of the Waksman network, known as AS-Waksman (Arbitrary-Sized Waksman) [1]. However, in our current experiments, we have only implemented the original version of the Waksman network. We interpolate to determine the size of the AS-Waksman network for arbitrary-sized inputs. Further details are provided in the full version of the paper.

### Cost Analysis in the OblivGraph Framework

To understand the computational cost of the Dummy Generation (DumGen) and Oblivious Shuffle procedures in the OblivGraph framework, we present the number of AND gates required for each operation in Figure 8. This figure corresponds to the Matrix Factorization problem with 2048 users, 128 movies, and 20K ratings, with \(\epsilon = 0.5\). The cost of a single iteration in the OblivGraph framework is primarily dominated by the Apply operation, which computes the gradient descent, followed by the Oblivious Shuffle. The figure also shows the effect of parallelization on reducing the circuit size of each operation. For a detailed comparison of the cost of the DumGen procedure in different protocols, refer to the full version of the paper.

### Performance Comparison: OblivGraph vs. GraphSC

Table 2 compares the runtime of a single iteration of OblivGraph and GraphSC for solving the matrix factorization problem using a real-world dataset, MovieLens, with 6040 users and 3883 movies.

| # Real Edges | Time (hours) |
|--------------|---------------|
| 1.2M         | 2.2           |
| 1.5M         | 2.4           |
| 1.8M         | 2.3           |

### Conclusion and Open Problems

We have established a new trade-off between privacy and efficiency in secure computation by defining a new security model in which the adversary is provided some leakage that preserves differential privacy. This leakage allows us to construct more efficient protocols for a broad class of computations, such as those that can be computed in graph-parallel frameworks like MapReduce. We evaluated the impact of this relaxation by comparing the performance of our protocol with the best prior implementation of secure computation for graph-parallel frameworks.

Our work demonstrates that differentially private leakage is useful, as it provides opportunities for more efficient protocols. The protocol we present has broad applicability, but determining precisely which class of computations this leakage might benefit remains an open question. Graph-parallel algorithms have the property that the access pattern to memory can be reduced to revealing only a histogram of the accessed memory, and histograms are a canonical example in the differential privacy literature. Exploring other algorithms may introduce new and interesting leakage functions that are not yet covered in the differential privacy literature, and security may not naturally follow from known mechanisms in that space.

### References

[1] B. Beauquier and É. Darrot. On arbitrary size Waksman networks and their vulnerability. Parallel Processing Letters, 12(03n04):287–296, 2002.
[2] R. Canetti. Security and composition of multiparty cryptographic protocols. Journal of Cryptology, 13(1):143–202, 2000.
[3] D. Cash, P. Grubbs, J. Perry, and T. Ristenpart. Leakage-abuse attacks against searchable encryption. In ACM CCS 2015, pages 668–679, Oct. 2015.
[4] D. Cash, J. Jaeger, S. Jarecki, C. S. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. Dynamic searchable encryption in very-large databases: Data structures and implementation. In NDSS 2014. The Internet Society, Feb. 2014.
[5] D. Cash, S. Jarecki, C. S. Jutla, H. Krawczyk, M.-C. Rosu, and M. Steiner. Highly-scalable searchable symmetric encryption with support for Boolean queries. In Crypto 2013, Part I, volume 8042 of LNCS, pages 353–373, Aug. 2013.
[6] T.-H. H. Chan, K.-M. Chung, B. Maggs, and E. Shi. Foundations of differentially oblivious algorithms. Cryptology ePrint Archive, Report 2017/1033, 2017. https://eprint.iacr.org/2017/1033.
[7] T.-H. H. Chan, K.-M. Chung, and E. Shi. On the depth of oblivious parallel RAM. In ASIACRYPT 2017, Part I, LNCS, pages 567–597, Dec. 2017.
[8] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. Multiparty computation from somewhat homomorphic encryption. In Crypto 2012, volume 7417 of LNCS, pages 643–662, Aug. 2012.
[9] J. Dean and S. Ghemawat. MapReduce: Simplified data processing on large clusters. In Proceedings of the 6th Conference on Symposium on Operating Systems Design & Implementation - Volume 6, OSDI’04, pages 10–10, Berkeley, CA, USA, 2004. USENIX Association.
[10] T. T. A. Dinh, P. Saxena, E.-C. Chang, B. C. Ooi, and C. Zhang. M2R: Enabling stronger privacy in MapReduce computation. In 24th USENIX Security Symposium (USENIX Security 15), pages 447–462, Washington, D.C., 2015. USENIX Association.
[11] F. B. Durak, T. M. DuBuisson, and D. Cash. What else is revealed by order-revealing encryption? In ACM CCS 2016, pages 1155–1166, Oct. 2016.
[12] C. Dwork, K. Kenthapadi, F. McSherry, I. Mironov, and M. Naor. Our data, ourselves: Privacy via distributed noise generation. In Eurocrypt 2006, volume 4004 of LNCS, pages 486–503, May / June 2006.
[13] C. Dwork and A. Roth. The algorithmic foundations of differential privacy. Foundations and Trends in Theoretical Computer Science, 9(3-4):211–407, 2014.
[14] Ú. Erlingsson, V. Pihur, and A. Korolova. RAPPOR: Randomized aggregatable privacy-preserving ordinal response. In ACM CCS 2014, pages 1054–1067, Nov. 2014.
[15] J. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and C. Guestrin. PowerGraph: Distributed graph-parallel computation on natural graphs. In Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12), pages 17–30, Hollywood, CA, 2012. USENIX.
[16] S. D. Gordon, J. Katz, V. Kolesnikov, F. Krell, T. Malkin, M. Raykova, and Y. Vahlis. Secure two-party computation in sublinear (amortized) time. In ACM CCS 2012, pages 513–524, 2012.
[17] F. M. Harper and J. A. Konstan. The MovieLens datasets: History and context. ACM Trans. Interact. Intell. Syst., 5(4):19:1–19:19, Dec. 2015.
[18] X. He, A. Machanavajjhala, C. J. Flynn, and D. Srivastava. Composing differential privacy and secure computation: A case study on scaling private record linkage. In ACM CCS 2017, pages 1389–1406, 2017.
[19] M. S. Islam, M. Kuzu, and M. Kantarcioglu. Access pattern disclosure on searchable encryption: Ramification, attack and mitigation. In NDSS 2012. The Internet Society, Feb. 2012.
[20] S. Kamara and T. Moataz. Boolean searchable symmetric encryption with worst-case sub-linear complexity. In J. Coron and J. B. Nielsen, editors, Advances in Cryptology - EUROCRYPT 2017 - 36th Annual International Conference on the Theory and Applications of Cryptographic Techniques, Paris, France, April 30 - May 4, 2017, Proceedings, Part III, volume 10212 of Lecture Notes in Computer Science, pages 94–124, 2017.
[21] G. Kellaris, G. Kollios, K. Nissim, and A. O’Neill. Generic attacks on secure outsourced databases. In ACM CCS 2016, pages 1329–1340, Oct. 2016.
[22] G. Kellaris, G. Kollios, K. Nissim, and A. O’Neill. Accessing data while preserving privacy. https://www.youtube.com/watch?v=u9LIU4Frce8, 2017. Communication with the authors.
[23] B. Kreuter. Secure multiparty computation at Google. https://www.youtube.com/watch?v=ee7oRsDnNNc, 2017. Real World Crypto.
[24] C. Liu, X. S. Wang, K. Nayak, Y. Huang, and E. Shi. ObliVM: A programming framework for secure computation. In 2015 IEEE Symposium on Security & Privacy, pages 359–376, 2015.
[25] Y. Low, J. E. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and J. M. Hellerstein. GraphLab: A new framework for parallel machine learning. CoRR, abs/1408.2041, 2014.
[26] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser, and G. Czajkowski. Pregel: A system for large-scale graph processing. In Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data, SIGMOD ’10, pages 135–146, New York, NY, USA, 2010. ACM.
[27] M. Naveed, S. Kamara, and C. V. Wright. Inference attacks on property-preserving encrypted databases. In ACM CCS 2015, pages 644–655, Oct. 2015.
[28] K. Nayak, X. S. Wang, S. Ioannidis, U. Weinsberg, N. Taft, and E. Shi. GraphSC: Parallel secure computation made easy. In 2015 IEEE Symposium on Security & Privacy, pages 377–394, May 2015.
[29] V. Nikolaenko, S. Ioannidis, U. Weinsberg, M. Joye, N. Taft, and D. Boneh. Privacy-preserving matrix factorization. In ACM CCS 2013, pages 801–812, Nov. 2013.
[30] O. Ohrimenko, M. Costa, C. Fournet, C. Gkantsidis, M. Kohlweiss, and D. Sharma. Observing and preventing leakage in MapReduce. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security, CCS ’15, pages 1570–1581, New York, NY, USA, 2015. ACM.
[31] R. Ostrovsky and V. Shoup. Private information storage. In 29th ACM STOC, pages 294–303, 1997.
[32] A. Papadimitriou, A. Narayan, and A. Haeberlen. DStress: Efficient differentially private computations on distributed data. In G. Alonso, R. Bianchini, and M. Vukolic, editors, Proceedings of the Twelfth European Conference on Computer Systems, EuroSys 2017, Belgrade, Serbia, April 23-26, 2017, pages 560–574. ACM, 2017.
[33] V. Pappas, F. Krell, B. Vo, V. Kolesnikov, T. Malkin, S. G. Choi, W. George, A. D. Keromytis, and S. Bellovin. Blind Seer: A scalable private DBMS. In 2014 IEEE Symposium on Security & Privacy, pages 359–374, May 2014.
[34] I. Roy, S. T. V. Setty, A. Kilzer, V. Shmatikov, and E. Witchel. Airavat: Security and privacy for MapReduce. In Proceedings of the 7th USENIX Conference on Networked Systems Design and Implementation, NSDI’10, pages 20–20, Berkeley, CA, USA, 2010. USENIX Association.
[35] S. Wagh, P. Cuff, and P. Mittal. Root ORAM: A tunable differentially private oblivious RAM. CoRR, abs/1601.03378, 2016.
[36] A. Waksman. A permutation network. Journal of the ACM (JACM), 15(1):159–163, 1968.
[37] X. Wang, S. Ranellucci, and J. Katz. Authenticated garbling and efficient maliciously secure two-party computation. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security, CCS ’17, pages 21–37, New York, NY, USA, 2017. ACM.
[38] X. S. Wang, Y. Huang, T.-H. H. Chan, A. Shelat, and E. Shi. SCORAM: Oblivious RAM for secure computation. In ACM CCS 2014, pages 191–202, 2014.
[39] R. Wyden. Letter to Senate. U.S. Commission on Evidence-Based Policymaking. https://www.wyden.senate.gov/download/?id=B10146F5-EDEB-4A2C-AD5E-812B363EE0DC&download=1, 2017.
[40] S. Zahur and D. Evans. Obliv-C: A language for extensible data-oblivious computation. Cryptology ePrint Archive, Report 2015/1153, 2015. http://eprint.iacr.org/2015/1153.
[41] S. Zahur, X. S. Wang, M. Raykova, A. Gascón, J. Doerner, D. Evans, and J. Katz. Revisiting square-root ORAM: Efficient random access in multi-party computation. In 2016 IEEE Symposium on Security & Privacy, pages 218–234, 2016.