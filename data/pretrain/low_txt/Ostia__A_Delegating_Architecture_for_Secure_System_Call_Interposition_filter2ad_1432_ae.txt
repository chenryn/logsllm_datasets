### Sandbox Overhead and Performance

**Sandboxing Penalty:**
In most cases, the overhead for sandboxing is less than 1%, as the applications under consideration do not make extensive use of sandboxed system calls.

**Worst-Case Application Overhead:**
We also benchmarked a program build, an activity that is not typically of interest in sandboxing scenarios. However, it provides an interesting worst-case scenario due to the large number of restricted system calls involved. This is not entirely hypothetical, as one might want to sandbox a build of software downloaded from untrusted sources on the internet (e.g., to protect against malicious build scripts). Fortunately, building untrusted software is not a frequent activity and does not have real-time requirements, as helper applications often do. Therefore, even the relatively high 25% overhead for this extreme case seems quite tolerable in practice. Our example build involves decompressing, unpacking, configuring, and compiling the source tree for GNU gzip 1.3.5, which is a system call-intensive application with minimal CPU requirements for compiling fewer than 10,000 lines of C code. As a result, the cost of sandboxing is significant in the overall performance.

**Comparison with Other Sandboxing Tools:**
Table 5 compares J2 and Ostia's performance with published benchmarks of other sandboxing tools. The figures suggest that Ostia performs competitively. The numbers in the table, except for J2 and Ostia, are taken from various published sources using different applications and test platforms, so caution should be exercised in drawing more ambitious conclusions.

| Tool         | Network <1% | Compute <1% | System Call  |
|--------------|-------------|-------------|--------------|
| Jain & Sekar | <5%        | <2%        | 17%          |
| J2           | <1%        | <1%        | 1%           |
| Ostia        | <1%        | <1%        | 41%          |
| Systrace     | 5%         | 0%         | 8%           |
| MAPbox       | —          | —          | 25% - 31%    |

**Table 5: Approximate Overhead of Sandboxing Tools on Different Types of Applications**

- **Network-Intensive (e.g., web serving)**
- **Compute-Intensive (e.g., encoding)**
- **System Call-Intensive (e.g., program build)**

Numbers for Jain & Sekar obtained from [21], Fig. 6; for Systrace, [31], Fig. 9; and for MAPbox, [2], Table 2.

### Related Work

**Hybrid System Call Interposition-Based Sandboxes:**
The first hybrid system call interposition-based application sandbox was Janus, developed by Goldberg et al. [18]. Janus established the basic architecture for filtering sandboxes. J2 evolved from the original Janus system and is very similar to it. Initially, Janus relied on the Solaris /proc interface for interposition, which was notable because it did not require any kernel modifications. A detailed description of Janus's architecture is provided in Wagner's thesis [36].

**Subsequent Implementations:**
The Janus architecture was later replicated in MapBox [2], which focused on policy specification, and in consh [3], which leveraged system call interposition to transparently extend the file system and other system interfaces, and to restrict execution. The Systrace system [31] also follows a filtering architecture similar to J2 and provides a rich set of features for specifying and generating policies. Systrace stands out as the most mature and widely deployed system of this type.

**Intrusion Detection Systems:**
System call interposition has been a popular mechanism for implementing intrusion detection systems. Notable examples include work by Wespi et al. [39] and Hofmeyer et al. [20]. Jain et al. [21] presented a generalized framework for building secure interposition systems on top of standard process tracing mechanisms. Garfinkel [16] conducted a comprehensive study of potential security problems in these tools, including race conditions, indirect paths to resources, and side effects of denying system calls.

**Kernel Support for Interposition:**
The callback support added to the Linux kernel to support Ostia is reminiscent of the Mach system call interception mechanism [25], which redirects system calls to handlers in the same address space as the calling process. Jones' work on interposition agents [22] presents a general framework that provides OS extensibility by placing code in these handlers. Using this mechanism to convert native system calls into IPC messages to user-level processes via an emulation library, as done in Ostia, is similar to traditional techniques for building Unix emulation layers on top of microkernels. For example, Golub et al. [19] implemented 4.3 BSD on top of Mach using this technique. Unlike these techniques, which virtualize the entire OS interface, Ostia only virtualizes the access control-relevant portions of the OS API.

**Other Kernel-Level and User-Level Sandboxing Systems:**
Specialized kernel support for interposing on OS interfaces for extensibility purposes has been explored in other works, such as pseudo-devices and pseudo-file systems in Sprite [38] and Watchdogs [6]. A variety of purely kernel-level [12, 15, 10, 5, 13, 4] and purely user-level [14, 23, 32] sandboxing systems have been presented in the literature. Peterson et al. [30] provide a good comparative survey of sandboxing mechanisms and alternatives, such as whole-system access controls (e.g., DTE [37]).

### Conclusion

We have explored the importance of system architecture in secure interposition systems. We presented two systems that implement different hybrid architectures: J2, based on a "filtering" architecture representative of many of today's sandboxing systems, and Ostia, based on a novel "delegating" architecture. We observed that many of the problems in today's filtering architectures can be mitigated by a delegation-based approach. Furthermore, a delegating approach can enhance the beneficial properties of existing hybrid approaches.

### Acknowledgments

J2 was developed in collaboration with David Wagner, who provided invaluable feedback and encouragement during the early stages of this work. Steve Gribble, Costa Sapuntzakis, and Ulfar Erlingson also provided helpful feedback at various stages. Cristen Torrey provided valuable editorial assistance. We are very grateful for the generous feedback and comments of our anonymous reviewers. This work was supported in part by the National Science Foundation under Grant No. 0121481, a Stanford Graduate Fellowship, and by NSF CAREER CCR-0093337.

### References

[1] Subterfugue: strace meets expect. http://subterfugue.org/.

[2] A. Acharya and M. Raje. MAPbox: Using parameterized behavior classes to confine untrusted applications. In Proc. 9th USENIX Security Symposium, Aug. 2000.

[3] A. Alexandrov, P. Kmiec, and K. Schauser. Consh: A confined execution environment for internet computations. http://www.cs.ucsb.edu/berto/papers/99-usenix-consh.ps, 1998.

[4] A. Berman, V. Bourassa, and E. Selberg. TRON: Process-specific file protection for the UNIX operating system. Proceedings of the Winter USENIX Conference, 1995.

[5] M. Bernaschi, E. Gabrielli, and L. V. Mancini. Remus: a security-enhanced operating system. ACM Trans. Information and System Security (TISSEC), 5(1):36–61, 2002.

[6] B. N. Bershad and C. B. Pinkerton. Watchdogs: Extending the UNIX file system. In USENIX Conference Proceedings, pages 267–75, Dallas, TX, Winter 1988.

[7] M. Bishop and M. Dilger. Checking for race conditions in file accesses. Computing Systems, 9(2):131–152, Spring 1996.

[8] CERT. Vulnerability note VU#176888, Linux kernel contains race condition via ptrace/procfs/execve. May 2002.

[9] H. Chen, D. Wagner, and D. Dean. Setuid demystified. In Proc. 11th USENIX Security Symposium, August 2002.

[20] S. A. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detection using sequences of system calls. Journal of Computer Security, 6(3):151–180, 1998.

[21] K. Jain and R. Sekar. User-level infrastructure for system call interposition: A platform for intrusion detection and confinement. In Proc. Network and Distributed Systems Security Symposium, 2000.

[22] M. B. Jones. Interposition agents: Transparently interposing user code at the system interface. In Symposium on Operating Systems Principles, pages 80–93, 1993.

[23] V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure execution via program shepherding. In Proceedings of the 11th USENIX Security Symposium, August 2002.

[24] C. Ko, T. Fraser, L. Badger, and D. Kilpatrick. Detecting and countering system intrusions using software wrappers. In Proc. 9th USENIX Security Symposium, August 2000.

[25] M. Accetta et al. Mach: A new kernel foundation for UNIX development. In Proc. USENIX Summer Conference, 1986. ftp://ftp.qucis.queensu.ca/pub/software-eng/software/Cmetrics/lc.tar.gz%.

[26] B. Marick. lc. ftp://ftp.qucis.queensu.ca/pub/software-eng/software/Cmetrics/lc.tar.gz%.

[10] C. Cowan, S. Beattie, G. Kroach-Hartman, C. Pu, P. Wagle, and V. Gligor. Subdomain: Parsimonious server security. In Proc. Systems Administration Conference, Dec. 2000.

[27] M. K. McKusick, K. Bostic, M. J. Karels, and J. S. Quarterman. The Design and Implementation of the 4.4 BSD Operating System, pages 112–114. Addison-Wesley, 1996.

[11] A. Cox. CAN-2003-0127, Linux kernel ptrace() flaw lets local users gain root privileges. March 2003.

[12] A. Dan, A. Mohindra, R. Ramaswami, and D. Sitaram. Chakravyuha (CV): A sandbox operating system environment for controlled execution of alien code. Technical Report 20742, IBM T.J. Watson Research Center, Sept. 1997.

[13] Entercept Security Technologies. System call interception whitepaper. http://www.entercept.com/whitepaper/systemcalls/.

[14] Erlingsson and Schneider. SASI enforcement of security policies: A retrospective. In WNSP: New Security Paradigms Workshop. ACM Press, 2000.

[15] T. Fraser, L. Badger, and M. Feldman. Hardening COTS software with generic software wrappers. In IEEE Symposium on Security and Privacy, pages 2–16, 1999.

[16] T. Garfinkel. Traps and pitfalls: Practical problems in system call interposition based security tools. In Proc. Network and Distributed Systems Security Symposium, February 2003.

[17] D. P. Ghormley, D. Petrou, S. H. Rodrigues, and T. E. Anderson. SLIC: An extensibility system for commodity operating systems. In Proc. USENIX Annual Technical Conference, pages 39–52, June 1998.

[18] I. Goldberg, D. Wagner, R. Thomas, and E. Brewer. A secure environment for untrusted helper applications. In Proc. 6th USENIX Security Symposium, July 1996.

[19] D. B. Golub, R. W. Dean, A. Forin, and R. F. Rashid. UNIX as an application program. In USENIX Summer, pages 87–95, 1990.

[28] T. Mitchem, R. Lu, and R. O'Brien. Using kernel hypervisors to secure applications. In Proc. 13th Annual Computer Security Applications Conference, December 1997.

[29] V. Nakra. Architecture study: Janus—a practical tool for application sandboxing.

[30] D. S. Peterson, M. Bishop, and R. Pandey. A flexible containment mechanism for executing untrusted code. In Proc. 11th USENIX Security Symposium, August 2002.

[31] N. Provos. Improving host security with system call policies. In Proc. 12th USENIX Security Symposium, pages 257–272, August 2003.

[32] K. Scott and J. Davidson. Safe virtual execution using software dynamic translation. In Proc. Annual Computer Security Applications Conference, 2002.

[33] Steve Bellovin. Shifting the Odds, Writing More Secure Software. http://www.research.att.com/~smb/talks/odds.ps.

[34] Teso Security Advisory. LIDS Linux Intrusion Detection System vulnerability. http://www.team-teso.net/advisories/teso-advisory-012.txt.

[35] J. Viega and G. McGraw. Building Secure Software, pages 209–229. Addison-Wesley, 2002.

[36] D. A. Wagner. Janus: An approach for confinement of untrusted applications. Technical Report CSD-99-1056, University of California, Berkeley, 12, 1999.

[37] K. M. Walker, D. F. S. and M. L. Badger, M. J. Petkac, D. L. Shermann, and K. A. Oostendorp. Confining root programs with domain and type enforcement. In Proceedings of the sixth USENIX Security Symposium, July 1996.

[38] B. Welch and J. Ousterhout. Pseudo devices: User-level extensions to the Sprite file system. In Summer 1988 USENIX Conference, pages 37–49, San Francisco, CA, 1988.

[39] A. Wespi, M. Dacier, and H. Debar. Intrusion detection using variable length audit trail patterns. In RAID 2000, pages 110–129, 2000.

### Ostia Policy Interface

**Starting State:**
- `starting uid` sets the initial user ID.
- `starting gid` sets the initial group ID.
- `starting dir` sets the current working directory for the sandboxed process.

**File System Policy:**
- `path-allow (read|write|unlink|exec)` provides access to file system resources. Files to which access is granted are written as absolute file names that may include pattern matching wildcards. Directories are treated as files and must be authorized in the same way. For example, to stat a directory, read permission for that directory is required.

**Examples:**
- `path-allow read /var/foo` allows the contents of `/var/foo` to be read.
- `path-allow read /var/*` allows any file whose absolute path begins with the prefix `/var/` to be read.

**Network Policy:**
- `net-allow (outgoing|incoming) (tcp|udp) address[/mask] port[/mask]` controls access to network resources and limits IPC over sockets. All application use of sockets must be explicitly allowed. Creating outgoing connections to other local or remote processes and accepting incoming connections from other processes are controlled separately.

**Syntax:**
- To allow a sandboxed application to connect to another process or send traffic directly to it: `net-allow outgoing type end-point`.
- To allow a sandboxed application to bind a socket (i.e., wait for a connection from some other process) or receive traffic from another address: `net-allow incoming type end-point`.

**Examples:**
- `net-allow incoming unix-domain /var/*` allows a sandboxed process to bind a socket with any path in `/var`.
- `net-allow outgoing tcp 128.36.31.50 80` allows TCP connections to be made to the host at `128.36.31.50` on port `80`.
- `net-allow outgoing tcp MYHOST ADDR 0/0` allows a sandboxed process to make TCP connections to any local port. The keyword `MYHOST ADDR` is special syntax for the local IP address.