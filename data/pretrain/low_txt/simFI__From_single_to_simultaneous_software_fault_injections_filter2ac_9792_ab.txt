### Optimized Text

#### 1. Fuzzing and Bit Flip Injection Models
For the function `foo(a, b)`, there are \(2^{\text{bitlength}(a)} + 2^{\text{bitlength}(b)}\) possible FZ (Fuzzing) injections and \(2^{\text{bitlength}(a)} + \text{bitlength}(b)\) possible FuzzFuzz injections. Even for the FZ model, an exhaustive evaluation covering all possible input combinations is impractical. We limit our experiments to 30 trials for each parameter targeted by FZ and each parameter combination targeted by FuzzFuzz. This limitation is based on a stability finding from Johansson et al. [4], who report that error propagation measures stabilize after approximately 10 injections.

#### 2. The Simultaneous FuzzBF Model
Johansson et al. [4] report that both fuzzing and bit flip models perform well in robustness evaluations of the considered CUE (Component Under Evaluation). We combine these models into a simultaneous model: when invoking services with two or more parameters, FZ is applied to one parameter value and BF (Bit Flip) to another. The spatial resolution of the FuzzBF simultaneity is different parameters of the same service call, and the temporal usage sequence is an individual service invocation.

For the service invocation `foo(a, b)`, there exist \(2^{\text{bitlength}(a)} + 2^{\text{bitlength}(b)}\) possible test cases for individual fuzzing injections and \(\text{bitlength}(a) + \text{bitlength}(b)\) possible individual bit flips. The number of possible test cases expands to \((2^{\text{bitlength}(a)} - 1) \times \text{bitlength}(b) + (2^{\text{bitlength}(b)} - 1) \times \text{bitlength}(a)\), considering that all single bit flip cases for a parameter are contained in the number of possible fuzzing values.

#### 3. The Simultaneous SimBF Model
Unlike the FuzzFuzz and FuzzBF models, the SimBF model has a spatial resolution of individual data elements within a parameter value in a service invocation. We flip two bits in the binary value of the same parameter.

For the service invocation `foo(a, b)`, there exist \(\text{bitlength}(a) + \text{bitlength}(b)\) possible single bit flips and \(\binom{\text{bitlength}(a)}{2} + \binom{\text{bitlength}(b)}{2}\) possible SimBF test cases. Although this may still result in large (polynomial) test case numbers, exhaustive testing is feasible. While multi-bit fault models have been used in previous work (e.g., [30]), they have not been discussed as simultaneous single-bit faults, and their efficiency has not been comparatively assessed.

From the differing applicability of the fuzzing and bit flip models to different spatial resolutions, we observe that the fault type and the fault location are not independent. These dimensions are often considered orthogonal in the literature. If the spatial resolution of an injection is an individual parameter, simultaneous fuzzing would not differ from non-simultaneous fuzzing. For bit flips, it is possible to differentiate between simultaneous and non-simultaneous injections into the same parameter value because the non-simultaneous fuzzing and bit flip fault models are defined according to different spatial resolutions.

### C. Evaluation Criteria
To evaluate the efficiency of the simultaneous fault models, we use four previously proposed metrics [29] and add a discussion of simultaneous fault interactions in terms of masking and amplification compared to single faults.

- **Coverage and Unique Coverage**: We define coverage as the fraction of services in the interface under evaluation that the fault model identifies as vulnerable or faulty. Unique coverage is the fraction of services that no other model identifies as vulnerable or faulty among the set of compared models.
- **Injection Efficiency**: The fraction of experiments that resulted in a failure of a specific class (AE, AH, SC).
- **Average Execution Time**: The amount of time required for one injection run.
- **Implementation Complexity**: The effort required to implement the model, measured as delivered source instructions (DSI; the number of physical source lines of code excluding comments and test code) and the accumulated cyclomatic complexity [31] of all code specific to the model.

To analyze masking and amplification effects of simultaneously injected faults relative to single fault injections, we investigate where the combination of two individual faults leads to an outcome that differs from the outcomes for the individual injections (C4).

- **Masking and Amplification**: To measure the amount of masking and amplification due to simultaneous injections, we compare the failure class distributions for each spatial entity, for which simFI experiments are conducted, against the failure class distributions of experiments with the single faults. If fewer failures are observed for the simultaneous cases than for any of the corresponding single faults, masking has taken place. If higher failure rates are observed in the simultaneous cases, amplification has taken place.

To obtain reliable results for the masking and amplification analyses of models involving fuzzing, we additionally perform single injection experiments for each random value used in a simultaneous fuzzing experiment and compare the outcomes. This is necessary because the application of fuzzing may result in different random values for the single and simultaneous injections, leading to incomparable results.

### D. Experimental Results: Exploring Simultaneous Injections
We compare the effects of all fault models targeting interactions of a serial port driver and the OS kernel. We performed additional experiments using an Ethernet driver, evaluating all fault models except for the SimBF model. As previously mentioned, we performed exhaustive testing with this model, but it resulted in more than 34,000 individual injection runs, taking up two months of experiment runtime for only the serial driver. Thus, we restricted our experiments with this model to the serial port driver. Despite this restriction, we can only discuss a fraction of our extensive experimental results due to space limitations. Supplemental experimental results are available on our web page [32].

#### 1. Coverage and Unique Coverage
Figures 4 to 6 show the coverage and unique coverage measures for the three considered failure classes (AE, AH, SC) obtained from a comparative evaluation of all six fault models (grouped by the three targeted interfaces) using the serial port driver. The unique coverage is indicated as a fraction of the coverage in the bar diagrams. Neither the FuzzFuzz model nor the FuzzBF model achieve particularly high coverages because these models target injections into two distinct parameters and therefore cannot cover any service taking less than two input parameters. For the same reason, FuzzFuzz and FuzzBF cannot cover any services of the export interface, as return values are considered a single parameter.

[Insert Figures 4, 5, and 6 here]

**Figure 7: Unique coverages of FuzzFuzz & FZ evaluating the COREDLL interface using the serial driver**

[Insert Figure 7 here]

**Figure 8: Unique coverages of FuzzBF & FZ evaluating the COREDLL interface using the serial driver**

[Insert Figure 8 here]

This optimized text provides a clearer, more coherent, and professional presentation of the original content.