# eBPF: A Friend or Foe?

**Presenters:**
- Guillaume Fournier, Security Engineer
- Sylvain Afchain, Staff Engineer
- Sylvain Baubeau, Staff Engineer & Team Lead

**Event:** Defcon 2021  
**Date:** August 2021

## About Us
- **Guillaume Fournier**: Security Engineer, [Email](PI:EMAIL)
- **Sylvain Afchain**: Staff Engineer, [Email](PI:EMAIL)
- **Sylvain Baubeau**: Staff Engineer & Team Lead, [Email](PI:EMAIL)

### Cloud Workload Security Team
- Leverage eBPF to detect attacks at runtime
- Integrated in the Datadog Agent

## Agenda
1. Introduction to eBPF
2. Abusing eBPF to Build a Rootkit
   - Obfuscation
   - Persistent Access
   - Command and Control
   - Data Exfiltration
   - Network Discovery
   - RASP Evasion
3. Detection and Mitigation Strategies

## 1. Introduction to eBPF

### What is eBPF?
- **Extended Berkeley Packet Filter (eBPF)**
- **Sandboxed Programs in the Linux Kernel**
- **Initially Designed for Fast Packet Processing**

### Use Cases:
- Kernel Performance Tracing
- Network Security and Observability
- Runtime Security
- And more...

### Loading and Attaching eBPF Programs
1. **Loading eBPF Programs**
2. **Attaching eBPF Programs**
   - Defines how a program should be triggered
   - ~30 program types (Kernel 5.13+)
   - Examples: `BPF_PROG_TYPE_KPROBE`, `BPF_PROG_TYPE_TRACEPOINT`, `BPF_PROG_TYPE_SCHED_CLS`, `BPF_PROG_TYPE_XDP`
   - Programs of different types can share the same eBPF maps
   - Methods: `perf_event_open` syscall, Dedicated Netlink command

### eBPF Internals: The Verifier
- Ensures that eBPF programs will finish and won’t crash.
- **Checks:**
  - Directed Acyclic Graph
  - No unchecked dereferences
  - No unreachable code
  - Limited stack size (512 bytes)
  - Program size limit (1 million on 5.2+ kernels)
  - Bounded loops (5.2+ kernels)
  - ...and cryptic output...

### eBPF Internals: eBPF Helpers
- **Context Helpers:**
  - `bpf_get_current_task`
  - `bpf_get_current_pid_tgid`
  - `bpf_ktime_get_ns`
  - etc.
- **Map Helpers:**
  - `bpf_map_lookup_elem`
  - `bpf_map_delete_elem`
  - etc.
- **Program Type Specific Helpers:**
  - `bpf_xdp_adjust_tail`
  - `bpf_csum_diff`
  - `bpf_l3_csum_replace`
  - etc.
- **Memory Related Helpers:**
  - `bpf_probe_read`
  - `bpf_probe_write_user`
  - etc.
- ~160 helpers (kernel 5.13+)

## 2. Abusing eBPF to Build a Rootkit

### Why Abuse eBPF?
- Cannot crash the host
- Minimal performance impact
- Fun technical challenge
- Growing number of vendors using eBPF
- eBPF “safety” should not blind Security Administrators

### Goals
- Trade-off between latest BPF features and availability
- Use KRSI and helpers like `bpf_dpath`

### Hiding the Rootkit
- **Hide the Rootkit Process:**
  - eBPF programs are attached to a running process
  - Userspace rootkit must stay resident
  - Detect through syscalls that accept PIDs as arguments: `kill`, `waitpid`, `pidfd_open`, etc.
- **Hide BPF Components:**
  - Programs
  - Maps

### Obfuscation Techniques
- **Program Obfuscation:**
  - `bpf_probe_write_user`: Corrupt syscall output, minor and major page faults
  - `bpf_override_return`: Block syscall, alter syscall return value
- **File Obfuscation:**
  - `stat /proc/<PID>/cmdline`
  - `stat /proc/<PID>/exe`
- **Signal Blocking:**
  - Hook on `kill` syscall entry
  - Override return value with `ESRCH`
- **Block Kernel Modules:**
  - Hook on new prog/map to get the allocated ID
  - Hook on `read` syscall and override content

### Persistent Access
- **Self Copy:**
  - Generate random name
  - Copy into `/etc/rcS.d`
  - Hide file
- **Override Content of Sensitive Files:**
  - SSH authorized_keys
  - passwd
  - crontab

### Command and Control
- **Requirements:**
  - Send commands to the rootkit
  - Exfiltrate data
  - Get remote access to infected hosts
- **Challenges:**
  - Can’t initiate a connection
  - Can’t open a port
- **Solution: Hijack an Existing Connection**

### Choosing a Program Type
- **BPF_PROG_TYPE_XDP:**
  - Deep Packet Inspection
  - Ingress only
  - Can be offloaded to the NIC/driver
  - Can drop, allow, modify, and retransmit packets
  - Usually used for DDoS mitigation
- **BPF_PROG_TYPE_SCHED_CLS:**
  - Deep Packet Inspection
  - Egress and Ingress
  - Attached to a network interface
  - Can drop, allow, and modify packets
  - Often used to monitor & secure network access at the container/pod level on Kubernetes

### Hijacking HTTP Requests
- **Demo: Sending Postgres Credentials over C&C**

### Data Exfiltration
- **Sharing Data Through eBPF Maps:**
  - File content
  - Environment variables
  - Database dumps
  - In-memory data
- **Demo: Exfiltration over HTTPS (Postgres credentials & /etc/passwd)**

### DNS Spoofing
- The same technique applies to any unencrypted network protocol.

### Network Discovery
- **Passive Method:**
  - Listen for egress and ingress traffic
  - TC & XDP
  - Discover existing network connections
  - TCP & UDP traffic (IPv4)
  - No traffic is generated
  - Doesn’t work for services which the host is not communicating with
- **Active Method:**
  - ARP scanner & SYN scanner
  - XDP only
  - Discover hosts and services which the host doesn’t necessarily talk to
  - **Demo: Active Network Discovery**

### RASP Evasion
- **Runtime Application Self-Protection (RASP):**
  - Advanced input monitoring tool
  - Example: SQL injection
  - Hook HTTP server library functions
  - Hook SQL library functions
  - Check if user-controlled parameters are properly sanitized before executing a query
- **Demo: Bypass SQL Injection Protection**

## 3. Detection and Mitigation

### Step 1: Assessing an eBPF-Based Third-Party Vendor
- **Audit & Assessment:**
  - Ask to see the code! (GPL)
  - Look for sensitive eBPF patterns: program types, eBPF helpers, cross-program types communication
- **Useful Tool: “ebpfkit-monitor”**
  - Parses ELF files and extracts eBPF-related information
  - [GitHub](https://github.com/Gui774ume/ebpfkit-monitor)

### Step 2: Runtime Mitigation
- **Monitor Accesses to the “bpf” Syscall:**
  - Keep an audit trail
  - “ebpfkit-monitor” can help!
- **Protect Accesses to the “bpf” Syscall:**
  - Block bpf syscalls from unknown processes
  - Reject programs with sensitive eBPF helpers or patterns
  - Sign your eBPF programs ([LWN Article](https://lwn.net/Articles/853489))
  - “ebpfkit-monitor” can help!
- **Prevent Unencrypted Network Communications:**
  - Even within your internal network

### Step 3: Detection & Investigation
- **It is Technically Possible to Write a Perfect eBPF Rootkit:**
  - Look for actions that a rootkit would have to block/lie about to protect itself
  - Load a kernel module to list eBPF programs
  - Load eBPF programs to detect abnormal kernel behaviors
  - Monitor network traffic anomalies at the infrastructure level
- **Disclaimer: Our Rootkit is Far from Perfect!**

## Thank You!

- **“ebpfkit” Source Code:** [GitHub](https://github.com/Gui774ume/ebpfkit)
- **“ebpfkit-monitor” Source Code:** [GitHub](https://github.com/Gui774ume/ebpfkit-monitor)