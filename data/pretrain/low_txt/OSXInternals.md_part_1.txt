### Mac OS X Internals: A Systems Approach

**By Amit Singh**

---

**Publisher:** Addison Wesley Professional  
**Publication Date:** June 19, 2006  
**Print ISBN-10:** 0-321-27854-2  
**Print ISBN-13:** 978-0-321-27854-8  
**Pages:** 1680

---

### Table of Contents

#### **Introduction**
- **Copyright**
- **Preface**
- **Acknowledgments**
- **About the Author**

#### **Chapter 1: Origins of Mac OS X**
- **Section 1.1:** Apple's Quest for the Operating System
- **Section 1.2:** The NeXT Chapter
- **Section 1.3:** The Mach Factor
- **Section 1.4:** Strategies
- **Section 1.5:** Toward Mac OS X

#### **Chapter 2: An Overview of Mac OS X**
- **Section 2.1:** Firmware
- **Section 2.2:** Bootloader
- **Section 2.3:** Darwin
- **Section 2.4:** The xnu Kernel
- **Section 2.5:** A User-Space View of the File System
- **Section 2.6:** The Runtime Architecture
- **Section 2.7:** The C Library
- **Section 2.8:** Bundles and Frameworks
- **Section 2.9:** Core Services
- **Section 2.10:** Application Services
- **Section 2.11:** Application Environments
- **Section 2.12:** User Interface
- **Section 2.13:** Programming
- **Section 2.14:** Security
- **Section 2.15:** Mac OS X Server
- **Section 2.16:** Networking

#### **Chapter 3: Inside an Apple**
- **Section 3.1:** The Power Mac G5
- **Section 3.2:** The G5: Lineage and Roadmap
- **Section 3.3:** The PowerPC 970FX
- **Section 3.4:** Software Conventions
- **Section 3.5:** Examples

#### **Chapter 4: The Firmware and the Bootloader**
- **Section 4.1:** Introduction
- **Section 4.2:** A Whole New World
- **Section 4.3:** Power-On Reset
- **Section 4.4:** Open Firmware
- **Section 4.5:** Forth
- **Section 4.6:** The Device Tree
- **Section 4.7:** Open Firmware Interfaces
- **Section 4.8:** Programming Examples
- **Section 4.9:** Firmware Boot Sequence
- **Section 4.10:** BootX
- **Section 4.11:** Alternate Booting Scenarios
- **Section 4.12:** Firmware Security
- **Section 4.13:** Launching the Kernel
- **Section 4.14:** The BootCache Optimization
- **Section 4.15:** Boot-Time Kernel Arguments
- **Section 4.16:** The Extensible Firmware Interface

#### **Chapter 5: Kernel and User-Level Startup**
- **Section 5.1:** Arranging for the Kernel to Execute
- **Section 5.2:** Low-Level Processor Initialization
- **Section 5.3:** High-Level Processor Initialization
- **Section 5.4:** Mach Subsystem Initialization
- **Section 5.5:** The First Thread
- **Section 5.6:** I/O Kit Initialization
- **Section 5.7:** BSD Initialization
- **Section 5.8:** Launching the First User-Space Program
- **Section 5.9:** Slave Processors
- **Section 5.10:** User-Level Startup

#### **Chapter 6: The xnu Kernel**
- **Section 6.1:** xnu Source
- **Section 6.2:** Mach
- **Section 6.3:** A Flavor of the Mach APIs
- **Section 6.4:** Entering the Kernel
- **Section 6.5:** Exception Processing
- **Section 6.6:** System Call Processing
- **Section 6.7:** System Call Categories
- **Section 6.8:** Kernel Support for Debugging, Diagnostics, and Tracing
- **Section 6.9:** Virtual Machine Monitor
- **Section 6.10:** Compiling the Kernel

#### **Chapter 7: Processes**
- **Section 7.1:** Processes: From Early UNIX to Mac OS X
- **Section 7.2:** Mach Abstractions, Data Structures, and APIs
- **Section 7.3:** Many Threads of a New System
- **Section 7.4:** Scheduling
- **Section 7.5:** The `execve()` System Call
- **Section 7.6:** Launching Applications

#### **Chapter 8: Memory**
- **Section 8.1:** Looking Back
- **Section 8.2:** An Overview of Mac OS X Memory Management
- **Section 8.3:** Mach VM
- **Section 8.4:** Resident Memory
- **Section 8.5:** Virtual Memory Initialization during Bootstrap
- **Section 8.6:** The Mach VM User-Space Interface
- **Section 8.7:** Using the Mach VM Interfaces
- **Section 8.8:** Kernel and User Address Space Layouts
- **Section 8.9:** Universal Page Lists (UPLs)
- **Section 8.10:** Unified Buffer Cache (UBC)
- **Section 8.11:** The Dynamic Pager Program
- **Section 8.12:** The Update Daemon
- **Section 8.13:** System Shared Memory
- **Section 8.14:** Task Working Set Detection and Maintenance
- **Section 8.15:** Memory Allocation in User Space
- **Section 8.16:** Memory Allocation in the Kernel
- **Section 8.17:** Memory-Mapped Files
- **Section 8.18:** 64-bit Computing

#### **Chapter 9: Interprocess Communication**
- **Section 9.1:** Introduction
- **Section 9.2:** Mach IPC: An Overview
- **Section 9.3:** Mach IPC: The Mac OS X Implementation
- **Section 9.4:** Name and Bootstrap Servers
- **Section 9.5:** Using Mach IPC
- **Section 9.6:** MIG
- **Section 9.7:** Mach Exceptions
- **Section 9.8:** Signals
- **Section 9.9:** Pipes
- **Section 9.10:** Named Pipes (Fifos)
- **Section 9.11:** File Descriptor Passing
- **Section 9.12:** XSI IPC
- **Section 9.13:** POSIX IPC
- **Section 9.14:** Distributed Objects
- **Section 9.15:** Apple Events
- **Section 9.16:** Notifications
- **Section 9.17:** Core Foundation IPC
- **Section 9.18:** Synchronization

#### **Chapter 10: Extending the Kernel**
- **Section 10.1:** A Driver down the Memory Lane
- **Section 10.2:** The I/O Kit
- **Section 10.3:** DART
- **Section 10.4:** Dynamically Extending the Kernel
- **Section 10.5:** Communicating with the Kernel
- **Section 10.6:** Creating Kernel Extensions
- **Section 10.7:** A Programming Tour of the I/O Kit's Functionality
- **Section 10.8:** Debugging

#### **Chapter 11: File Systems**
- **Section 11.1:** Disks and Partitions
- **Section 11.2:** Disk Arbitration
- **Section 11.3:** The Implementation of Disk Devices
- **Section 11.4:** Disk Images
- **Section 11.5:** Files and File Descriptors
- **Section 11.6:** The VFS Layer
- **Section 11.7:** File System Types
- **Section 11.8:** Spotlight
- **Section 11.9:** Access Control Lists
- **Section 11.10:** The Kauth Authorization Subsystem

#### **Chapter 12: The HFS Plus File System**
- **Section 12.1:** Analysis Tools
- **Section 12.2:** Fundamental Concepts
- **Section 12.3:** The Structure of an HFS+ Volume
- **Section 12.4:** Reserved Areas
- **Section 12.5:** The Volume Header
- **Section 12.6:** The HFS Wrapper
- **Section 12.7:** Special Files
- **Section 12.8:** Examining HFS+ Features
- **Section 12.9:** Optimizations
- **Section 12.10:** Miscellaneous Features
- **Section 12.11:** Comparing Mac OS X File Systems
- **Section 12.12:** Comparing HFS+ and NTFS

#### **Appendix A: Mac OS X on x86-Based Macintosh Computers**
- **Section A.1:** Hardware Differences
- **Section A.2:** Firmware and Booting
- **Section A.3:** Partitioning
- **Section A.4:** Universal Binaries
- **Section A.5:** Rosetta
- **Section A.6:** Byte Ordering
- **Section A.7:** Miscellaneous Changes

---

### About the Book

Mac OS X was released in March 2001, but many of its components, such as Mach and BSD, have a much longer history. To fully understand the design, implementation, and workings of Mac OS X, it is essential to examine the various technologies that make up the system, each with its own age, origins, philosophies, and roles.

"Mac OS X Internals: A Systems Approach" is the first book to dissect the internal architecture of Mac OS X, providing a detailed, incremental understanding of the system. It covers the roles of the firmware, bootloader, Mach and BSD kernel components (including process management, virtual memory, interprocess communication, and file systems), the object-oriented I/O Kit driver framework, user libraries, and other core software. The book also explores how these components connect and work together, their historical origins, and their evolution. Additionally, it delves into key areas of Intel-based Macintosh computers.

A deep understanding of system internals is invaluable for programmers, whether they are involved in design, development, or debugging. System programmers can use this book as a reference to better understand the core system. Application programmers will gain insights into how their applications interact with the system. System administrators and power users can leverage the book to harness the full potential of Mac OS X. Finally, members of the Windows, Linux, BSD, and other Unix communities will find the book useful for comparing and contrasting Mac OS X with their respective systems.

"Mac OS X Internals" focuses on the technical aspects of the operating system and is packed with highly useful information and programming examples, making it an indispensable tool for every Mac OS X programmer.

---

### Copyright Information

Many of the designations used by manufacturers and sellers to distinguish their products are claimed as trademarks. Where those designations appear in this book, and the publisher was aware of a trademark claim, the designations have been printed with initial capital letters or in all capitals.

The author and publisher have taken care in the preparation of this book, but make no expressed or implied warranty of any kind and assume no responsibility for errors or omissions. No liability is assumed for incidental or consequential damages in connection with or arising out of the use of the information or programs contained herein.

The publisher offers excellent discounts on this book when ordered in quantity for bulk purchases or special sales, which may include electronic versions and/or custom covers and content particular to your business, training goals, marketing focus, and branding interests. For more information, please contact:

- **U.S. Corporate and Government Sales:** (800) 382-3419, PI:EMAIL
- **International Sales:** PI:EMAIL

**FREE 45-day online access:**
A searchable electronic version of this book's content is available for a limited time through Safari Bookshelf. Safari Bookshelf is an electronic reference library that lets you easily search thousands of technical books, find code samples, download chapters, and access technical information whenever and wherever you need it.

To gain 45-day FREE Safari access to this book:
1. Go to [http://www.awprofessional.com/safarienabled](http://www.awprofessional.com/safarienabled)
2. Complete the brief registration form
3. Enter the coupon code EUMQ-IH3L-XVUX-T1L6-E6JZ

If you have difficulty registering on Safari Bookshelf or accessing the online edition, please e-mail customer-service@safaribooksonline.com.

Visit us on the Web: [www.awprofessional.com](http://www.awprofessional.com)

**Library of Congress Cataloging-in-Publication Data:**
- **Author:** Amit Singh
- **Title:** Mac OS X Internals: A Systems Approach
- **ISBN:** 0-321-27854-2 (hardback : alk. paper)
- **LC Control Number:** 2006014901

**Copyright © 2007 Pearson Education, Inc.**
All rights reserved. Printed in the United States of America. This publication is protected by copyright, and permission must be obtained from the publisher prior to any prohibited reproduction, storage in a retrieval system, or transmission in any form or by any means, electronic, mechanical, photocopying, recording, or otherwise. For information regarding permissions, write to:

Pearson Education, Inc.  
Rights and Contracts Department  
75 Arlington Street, Suite 300  
Boston, MA 02116  
Fax: (617) 848-7047

Text printed in the United States on recycled paper at Courier in Westford, Massachusetts.

First printing, June 2006

**Dedication:**
To my parents, Sharda and Amar Singh, for teaching me everything I know about learning, for giving me everything that I ever needed (or wanted) from them, and for always being in my way without becoming an obstacle.

**Preface:**
Although Mac OS X is a relatively new operating system, its lineage is rich and varied, and the history of most of its components is much older. Mac OS X and Apple, in general, have attracted significant attention in recent years. Given Apple's "cult-like" status and the unique cultural and technical composition of Mac OS X, it is not surprising that people with diverse backgrounds and interests—both users and non-users of Mac OS X—are curious about the system.

After working on, programming, and extending several operating systems over the years, I was introduced to Mac OS X on April 1, 2003.[1] I soon became curious about the structure of the system. Despite the availability of several good books on Mac OS X, I was dismayed to find that I could not learn the details of Mac OS X internals from a book—no such book existed. There are books describing how to perform various tasks on Mac OS X, how to configure, customize, and tweak the system, and how certain user-visible aspects differ between Mac OS X and Windows. There are also books covering specific Mac OS X programming topics, such as the Cocoa and Carbon APIs. Other books make life easier for a Unix[2] user migrating to Mac OS X—such books typically discuss the command-line interface to the operating system. Although these books play important roles in making Mac OS X accessible, the core architecture and implementation of Mac OS X and its components have remained mysteries. To make matters worse, besides the lack of information, it is common to find misinformation on the composition of Mac OS X. Consequently, the system is often misunderstood because of long-standing myths and stereotypes, or is perceived as a black box.

[1] The date is interesting because coincidentally, Apple was founded on April 1, 1976.
[2] I use the term "Unix" to represent one of a UNIX system, a UNIX-derived system, or a UNIX-like system.

The purpose of this book is to deconstruct and demystify Mac OS X by describing it from a system-design perspective. It takes an implementation-oriented approach to understanding the system. Consider the example of interprocess communication (IPC). Mac OS X has numerous user-level and kernel-level IPC mechanisms, some of which are well known and documented. Rather than just showing how to use these mechanisms, the book explains the design and implementation of the most fundamental mechanism (Mach IPC), and then discusses how the other mechanisms are layered on top of one another. My goal is not to teach you how to do something specific; my goal is to provide you with enough knowledge and examples so that after reading the book, depending on your background and interests, you can apply this knowledge in various ways.