‰ª•‰∏ãÊòØ‰ºòÂåñÂêéÁöÑÂèÇËÄÉÊñáÁåÆÂàóË°®Ôºå‰ΩøÂÖ∂Êõ¥Âä†Ê∏ÖÊô∞„ÄÅËøûË¥ØÂíå‰∏ì‰∏öÔºö

1. Akritidis, P., Cadar, C., Raiciu, C., Costa, M., & Castro, M. (2008). Preventing Memory Error Exploits with WIT. In *Proceedings of the 2008 IEEE Symposium on Security and Privacy* (pp. 263‚Äì277).

2. Berger, E. D., & Zorn, B. G. (2006). DieHard: Probabilistic Memory Safety for Unsafe Languages. In *Proceedings of the 2006 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*. Ottawa, Canada.

3. Bittau, A., Belay, A., Mashtizadeh, A., Mazi√®res, D., & Boneh, D. (2014). Hacking Blind. In *Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland)*. San Jose, CA.

4. Bletsch, T., Jiang, X., Freeh, V. W., & Liang, Z. (2011). Jump-Oriented Programming: A New Class of Code-Reuse Attack. In *Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security (ASIACCS)* (pp. 30‚Äì40). Hong Kong, China.

5. Burow, N., Carr, S. A., Nash, J., Larsen, P., Franz, M., Brunthaler, S., & Payer, M. (2017). Control-Flow Integrity: Precision, Security, and Performance. *ACM Computing Surveys (CSUR)*, 50(1), 16.

6. Burow, N., McKee, D., Carr, S. A., & Payer, M. (2018). CFIXX: Object Type Integrity for C++ Virtual Dispatch. In *Proceedings of the 2018 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA.

7. Burow, N., Zhang, X., & Payer, M. (2019). SoK: Shining Light on Shadow Stacks. In *Proceedings of the 40th IEEE Symposium on Security and Privacy (Oakland)*. San Francisco, CA.

8. Carlini, N., Barresi, A., Payer, M., Wagner, D., & Gross, T. R. (2015). Control-Flow Bending: On the Effectiveness of Control-Flow Integrity. In *Proceedings of the 24th USENIX Security Symposium (Security)*. Washington, DC.

9. Carr, S. A., & Payer, M. (2017). DataShield: Configurable Data Confidentiality and Integrity. In *Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security* (pp. 193‚Äì204).

10. Castro, M., Costa, M., & Harris, T. (2006). Securing Software by Enforcing Data-Flow Integrity. In *Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI)* (pp. 147‚Äì160). Seattle, WA.

11. Cheng, Y., Zhou, Z., Miao, Y., Ding, X., & Deng, R. H. (2014). ROPecker: A Generic and Practical Approach for Defending Against ROP Attack. In *Proceedings of the 2014 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA.

12. Cimpanu, C. (2019). Microsoft: 70 Percent of All Security Bugs Are Memory Safety Issues. *ZDNet*. Retrieved from https://www.zdnet.com/article/microsoft-70-percent-of-all-security-bugs-are-memory-safety-issues/

13. Connor, R. J., McDaniel, T., Smith, J. M., & Schuchard, M. (2020). PKU Pitfalls: Attacks on PKU-Based Memory Isolation Systems. In *29th USENIX Security Symposium (USENIX Security 20)* (pp. 1409‚Äì1426). USENIX Association. Retrieved from https://www.usenix.org/conference/usenixsecurity20/presentation/connor

14. Dang, T. H. Y., Maniatis, P., & Wagner, D. (2017). Oscar: A Practical Page-Permissions-Based Scheme for Thwarting Dangling Pointers. In *Proceedings of the 26th USENIX Security Symposium (Security)*. Vancouver, BC, Canada.

15. Davi, L., Sadeghi, A.-R., Lehmann, D., & Monrose, F. (2014). Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In *Proceedings of the 23rd USENIX Security Symposium (Security)*. San Diego, CA.

16. Kapil, D. (2019). Unlink Exploit. Retrieved from https://heap-exploitation.dhavalkapil.com/attacks/unlink_exploit.html

17. Ding, R., Qian, C., Song, C., Harris, B., Kim, T., & Lee, W. (2017). Efficient Protection of Path-Sensitive Control Security. In *Proceedings of the 26th USENIX Security Symposium (Security)* (pp. 131‚Äì148). Vancouver, BC, Canada.

18. Mu, D. (2018). CVE-2015-8668. cve-2015-8668-exploit.

19. Lea, D. (2000). A Memory Allocator. Retrieved from http://gee.cs.oswego.edu/dl/html/malloc.html

20. Eckert, M., Bianchi, A., Wang, R., Shoshitaishvili, Y., Kruegel, C., & Vigna, G. (2018). HeapHopper: Bringing Bounded Model Checking to Heap Implementation Security. In *Proceedings of the 27th USENIX Security Symposium (Security)*. Baltimore, MD.

21. Evans, C. (2014). The Poisoned NUL Byte, 2014 Edition. Retrieved from https://googleprojectzero.blogspot.com/2014/08/the-poisoned-nul-byte-2014-edition.html

22. Evans, I., Fingeret, S., Gonzalez, J., Otgonbaatar, U., Tang, T., Shrobe, H., Sidiroglou-Douskos, S., Rinard, M., & Okhravi, H. (2015). Missing the Point (er): On the Effectiveness of Code Pointer Integrity. In *Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland)*. San Jose, CA.

23. Evans, I., Long, F., Otgonbaatar, U., Shrobe, H., Rinard, M., Okhravi, H., & Sidiroglou-Douskos, S. (2015). Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity. In *Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS)* (pp. 901‚Äì913). Denver, Colorado.

24. Forum of Incident Response and Security Teams, Inc. (2020). Common Vulnerability Scoring System version 3.1 Examples Revision 1. Retrieved from https://www.first.org/cvss/v3-1/cvss-v31-examples_r1.pdf

25. Forum of Incident Response and Security Teams, Inc. (2020). Common Vulnerability Scoring System version 3.1 Specification Document Revision 1. Retrieved from https://www.first.org/cvss/v3-1/cvss-v31-specification_r1.pdf

26. Frassetto, T., Jauernig, P., Liebchen, C., & Sadeghi, A.-R. (2018). IMIX: In-Process Memory Isolation Extension. In *Proceedings of the 27th USENIX Conference on Security Symposium* (pp. 83‚Äì97). USENIX Association.

27. Free Software Foundation. (2019). MallocInternals - glibc wiki. Retrieved from https://sourceware.org/glibc/wiki/MallocInternals

28. Ge, X., Cui, W., & Jaeger, T. (2017). Griffin: Guarding Control Flows Using Intel Processor Trace. In *Proceedings of the 22nd ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)*. Xi‚Äôan, China.

29. Glozer, W. (2019). wrk: A HTTP Benchmarking Tool. Retrieved from https://github.com/wg/wrk

30. G√∂ktas, E., Athanasopoulos, E., Bos, H., & Portokalidis, G. (2014). Out of Control: Overcoming Control-Flow Integrity. In *Proceedings of the 35th IEEE Symposium on Security and Privacy (Oakland)*. San Jose, CA.

31. G√∂ktas, E., Gawlik, R., Kollenda, B., Athanasopoulos, E., Portokalidis, G., Giuffrida, C., & Bos, H. (2016). Undermining Information Hiding (and What to Do about It). In *Proceedings of the 25th USENIX Security Symposium (Security)*. Austin, TX.

32. Google. (n.d.). TCMalloc. Retrieved from https://google.github.io/tcmalloc/

33. Grossklags, J., & Eckert, C. (2018). ùúèCFI: Type-Assisted Control Flow Integrity for x86-64 Binaries. In *Proceedings of the 21st International Symposium on Research in Attacks, Intrusions and Defenses (RAID)*. Heraklion, Crete, Greece.

34. Gu, Y., Zhao, Q., Zhang, Y., & Lin, Z. (2017). PT-CFI: Transparent Backward-Edge Control Flow Violation Detection Using Intel Processor Trace. In *Proceedings of the 7th ACM Conference on Data and Application Security and Privacy (CODASPY)*. Scottsdale, AZ.

35. Hu, H., Qian, C., Yagemann, C., Chung, S. P. H., Harris, W. R., Kim, T., & Lee, W. (2018). Enforcing Unique Code Target Property for Control-Flow Integrity. In *Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS)*. Toronto, ON, Canada.

36. Intel. (2020). Intel CET Answers Call to Protect Against Common Malware Threats. Retrieved from https://newsroom.intel.com/editorials/intel-cet-answers-call-protect-common-malware-threats

37. Intel Corporation. (2019). Control-Flow Enforcement Technology Specification Revision 3.0. Retrieved from https://software.intel.com/sites/default/files/managed/4d/2a/control-flow-enforcement-technology-preview.pdf

38. Intel Corporation. (2019). Intel 64 and IA-32 Architectures Software Developer‚Äôs Manual. Retrieved from https://software.intel.com/en-us/articles/intel-sdm

39. Corbet, J. (2004). x86 NX Support. Retrieved from https://lwn.net/Articles/87814/

40. Khandaker, M., Naser, A., Liu, W., Wang, Z., Zhou, Y., & Cheng, Y. (2019). Adaptive Call-Site Sensitive Control Flow Integrity. In *2019 IEEE European Symposium on Security and Privacy (EuroS&P)* (pp. 95‚Äì110). IEEE.

41. Khandaker, M. R., Liu, W., Naser, A., Wang, Z., & Yang, J. (2019). Origin-Sensitive Control Flow Integrity. In *Proceedings of the 28th USENIX Security Symposium (Security)*. Santa Clara, CA.

42. Koning, K., Chen, X., Bos, H., Giuffrida, C., & Athanasopoulos, E. (2017). No Need to Hide: Protecting Safe Regions on Commodity Hardware. In *Proceedings of the 12th European Conference on Computer Systems (EuroSys)* (pp. 437‚Äì452). Belgrade, Serbia.

43. Kuznetsov, V., Szekeres, L., Payer, M., Candea, G., Sekar, R., & Song, D. (2014). Code-Pointer Integrity. In *Proceedings of the 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI)*. Broomfield, Colorado.

44. Li, Y., Wang, M., Zhang, C., Chen, X., Yang, S., & Liu, Y. (2020). Finding Cracks in Shields: On the Security of Control Flow Integrity Mechanisms. In *Proceedings of the 2020 ACM SIGSAC Conference on Computer and Communications Security* (pp. 1821‚Äì1835).

45. Liu, Y., Shi, P., Wang, X., Chen, H., Zang, B., & Guan, H. (2017). Transparent and Efficient CFI Enforcement with Intel Processor Trace. In *Proceedings of the 23rd IEEE Symposium on High Performance Computer Architecture (HPCA)*. Austin, TX.

46. Microsoft Support. (2017). A Detailed Description of the Data Execution Prevention (DEP) Feature in Windows XP Service Pack 2, Windows XP Tablet PC Edition 2005, and Windows Server 2003. Retrieved from https://support.microsoft.com/en-us/help/875352/a-detailed-description-of-the-data-execution-prevention-dep-feature-in

47. Nagarakatte, S., Martin, M. M. K., & Zdancewic, S. (2015). Everything You Want to Know About Pointer-Based Checking. In *1st Summit on Advances in Programming Languages (SNAPL 2015)*. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.

48. Nagarakatte, S., Zhao, J., Martin, M. M. K., & Zdancewic, S. (2009). SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In *Proceedings of the 2009 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*. Dublin, Ireland.

49. Nagarakatte, S., Zhao, J., Martin, M. M. K., & Zdancewic, S. (2010). CETS: Compiler Enforced Temporal Safety for C. In *Proceedings of the 2010 International Symposium on Memory Management (ISMM)*. Toronto, Canada.

50. Nandy Narwhals CTF Team. (2017). CVE-2016-10190 Detailed Writeup. Retrieved from https://nandynarwhals.org/cve-2016-10190/

51. Burow, N. (2018). CFIXX C++ Test Suite. Retrieved from https://github.com/HexHive/CFIXX/tree/master/CFIXX-Suite

52. Niu, B., & Tan, G. (2014). Modular Control-Flow Integrity. In *Proceedings of the 2014 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*. Edinburgh, UK.

53. Niu, B., & Tan, G. (2015). Per-Input Control-Flow Integrity. In *Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS)*. Denver, Colorado.

54. Novark, G., & Berger, E. D. (2010). DieHarder: Securing the Heap. In *Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS)* (pp. 573‚Äì584). Chicago, IL.

55. Oikonomopoulos, A., Athanasopoulos, E., Bos, H., & Giuffrida, C. (2016). Poking Holes in Information Hiding. In *Proceedings of the 25th USENIX Security Symposium (Security)*. Austin, TX.

56. Oleksenko, O., Kuvaiskii, D., Bhatotia, P., Felber, P., & Fetzer, C. (2018). Intel MPX Explained: A Cross-Layer Analysis of the Intel MPX System Stack. *Proceedings of the ACM on Measurement and Analysis of Computing Systems*.

57. Pappas, V., Polychronakis, M., & Keromytis, A. D. (2013). Transparent ROP Exploit Mitigation Using Indirect Branch Tracing. In *Proceedings of the 22nd USENIX Security Symposium (Security)*. Washington, DC.

58. Park, S., Lee, S., Xu, W., Moon, H., & Kim, T. (2019). Libmpk: Software Abstraction for Intel Memory Protection Keys (Intel MPK). In *Proceedings of the 2019 USENIX Annual Technical Conference (ATC)* (pp. 241‚Äì254). Renton, WA.

59. Prakash, A., Hu, X., & Yin, H. (2015). vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In *Proceedings of the 2015 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA.

60. Proskurin, S., Momeu, M., Ghavamnia, S., Kemerlis, V. P., & Polychronakis, M. (2020). xMP: Selective Memory Protection for Kernel and User Space. In *Proceedings of the 2020 IEEE Symposium on Security and Privacy* (pp. 563‚Äì577).

61. Qualcomm. (2017). Pointer Authentication on ARMv8.3. Retrieved from https://www.qualcomm.com/media/documents/files/whitepaper-pointer-authentication-on-armv8-3.pdf

62. Schuster, F., Tendyck, T., Liebchen, C., Davi, L., Sadeghi, A.-R., & Holz, T. (2015). Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In *Proceedings of the 36th IEEE Symposium on Security and Privacy (Oakland)*. San Jose, CA.

63. Serebryany, K., Bruening, D., Potapenko, A., & Vyukov, D. (2012). AddressSanitizer: A Fast Address Sanity Checker. In *Proceedings of the 2012 USENIX Annual Technical Conference (ATC)* (pp. 309‚Äì318). Boston, MA.

64. @sha0coder. (2014). Python - 'socket.recvfrom_into()' Remote Buffer Overflow. Retrieved from https://www.exploit-db.com/exploits/31875

65. Shacham, H. (2007). The Geometry of Innocent Flesh on the Bone: Return-Into-LIBC Without Function Calls (on the x86). In *Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS)*. Alexandria, VA.

66. SHELLPHISH. (2020). Educational Heap Exploitation. Retrieved from https://github.com/shellphish/how2heap

67. Silvestro, S., Liu, H., Crosser, C., Lin, Z., & Liu, T. (2017). FreeGuard: A Faster Secure Heap Allocator. In *Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS)*. Dallas, TX.

68. Silvestro, S., Liu, H., Liu, T., Lin, Z., & Liu, T. (2018). Guarder: A Tunable Secure Allocator. In *Proceedings of the 27th USENIX Security Symposium (Security)*. Baltimore, MD.

69. Snow, K. Z., Monrose, F., Davi, L., Dmitrienko, A., Liebchen, C., & Sadeghi, A.-R. (2013). Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In *Proceedings of the 34th IEEE Symposium on Security and Privacy (Oakland)*. San Francisco, CA.

70. Song, C., Lee, B., Lu, K., Harris, W., Kim, T., & Lee, W. (2016). Enforcing Kernel Security Invariants with Data Flow Integrity. In *Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA.

71. Song, C., Moon, H., Alam, M., Yun, I., Lee, B., Kim, T., Lee, W., & Pack, Y. (2016). HDFI: Hardware-Assisted Data-Flow Isolation. In *Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland)*. San Jose, CA.

72. The Clang Team. (2019). Clang 10 Documentation: CONTROL FLOW INTEGRITY. Retrieved from https://clang.llvm.org/docs/ControlFlowIntegrity.html

73. The Clang Team. (2019). Clang 10 Documentation: SAFESTACK. Retrieved from https://clang.llvm.org/docs/SafeStack.html

74. The PostgreSQL Global Development Group. (2020). pgbench: PostgreSQL Client Applications. Retrieved from https://www.postgresql.org/docs/current/pgbench.html

75. Tice, C., Roeder, T., Collingbourne, P., Checkoway, S., Erlingsson, √ö., Lozano, L., & Pike, G. (2014). Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In *Proceedings of the 23rd USENIX Security Symposium (Security)*. San Diego, CA.

76. Vahldiek-Oberwagner, A., Elnikety, E., Duarte, N. O., Sammler, M., Druschel, P., & Garg, D. (2019). ERIM: Secure, Efficient In-Process Isolation with Protection Keys (MPK). In *Proceedings of the 28th USENIX Security Symposium (Security)* (pp. 1221‚Äì1238). Santa Clara, CA.

77. van der Veen, V., Andriesse, D., G√∂ktas, E., Gras, B., Sambuc, L., Slowinska, A., Bos, H., & Giuffrida, C. (2015). Practical Context-Sensitive CFI. In *Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS)*. Denver, Colorado.

78. van der Veen, V., G√∂ktas, E., Contag, M., Pawoloski, A., Chen, X., Rawat, S., Bos, H., Holz, T., Athanasopoulos, E., & Giuffrida, C. (2016). A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In *Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland)*. San Jose, CA.

79. Yun, I., Kapil, D., & Kim, T. (2020). Automatic Techniques to Systematically Discover New Heap Exploitation Primitives. In *Proceedings of the 29th USENIX Security Symposium (Security)*. Boston, MA.

80. Zhang, C., Song, C., Chen, K. Z., Chen, Z., & Song, D. (2015). VTint: Protecting Virtual Function Tables‚Äô Integrity. In *Proceedings of the 2015 Annual Network and Distributed System Security Symposium (NDSS)*. San Diego, CA.

81. Zhang, C., Wei, T., Chen, Z., Duan, L., Szekeres, L., McCamant, S., Song, D., & Zou, W. (2013). Practical Control Flow Integrity and Randomization for Binary Executables. In *Proceedings of the 34th IEEE Symposium on Security and Privacy (Oakland)*. San Francisco, CA.

82. Zhang, M., & Sekar, R. (2013). Control Flow Integrity for COTS Binaries. In *Proceedings of the 22nd USENIX Security Symposium (Security)*. Washington, DC.

83. Zhang, T., Lee, D., & Jung, C. (2019). BOGO: Buy Spatial Memory Safety, Get Temporal Memory Safety (Almost) Free. In *Proceedings of the 24th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS)* (pp. 631‚Äì644). Providence, RI.

84. Zieris, P., & Horsch, J. (2018). A Leak-Resilient Dual Stack Scheme for Backward-Edge Control-Flow Integrity. In *Proceedings of the 2018 on Asia Conference on Computer and Communications Security* (pp. 369‚Äì380).

---

ËØ∑Ê≥®ÊÑèÔºå‰∏Ä‰∫õÊù°ÁõÆÂèØËÉΩÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÁöÑÁªÜËäÇÊàñÈìæÊé•È™åËØÅ„ÄÇÊ≠§Â§ñÔºåÁ°Æ‰øùÊâÄÊúâÂºïÁî®ÈÉΩÁ¨¶ÂêàÊâÄÈÄâÂºïÁî®Ê†ºÂºèÔºàÂ¶ÇAPA„ÄÅMLA„ÄÅChicagoÁ≠âÔºâÁöÑË¶ÅÊ±Ç„ÄÇ