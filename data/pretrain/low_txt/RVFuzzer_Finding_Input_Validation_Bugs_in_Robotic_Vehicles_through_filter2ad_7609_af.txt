### Programs and Testing Techniques

Programs rely on well-established mechanisms for (1) bug detection and (2) input mutation. Specifically, these testing techniques leverage generic, easily detectable symptoms of program failures (e.g., segmentation faults) as indicators of a triggered bug. They also mutate program inputs based on information such as code coverage, without considering domain-specific semantics. Compared to conventional software testing, RVFUZZER addresses new challenges and opportunities in finding semantic input validation bugs in robotic vehicle (RV) control. Many such bugs do not cause immediate, easily detectable crashes, especially when running with an RV simulator. Additionally, control-theoretical properties can provide hints to reduce the input value mutation space.

### Discussion

#### Control Parameter Inter-dependencies

As revealed by multi-dimensional mutation, control parameters may have interdependencies. A specific value of one parameter can increase or decrease the (in)valid value ranges of other parameters. The ground truth of these inter-parameter dependencies can only be derived from a complete understanding of the underlying control model and the control program implementation. Given the large number of control variables (including hundreds of parameters), their wide value ranges, and the influence of various environmental factors, it is challenging to fully and accurately capture these dependencies using only the binary of a control program. In this work, we treat the control program binary as a black box and take a pragmatic approach by revealing only part of these interdependencies. A more general approach to deriving control parameter dependencies, possibly based on source code and a formal control model, is left for future work.

#### Standard Safety Testing and Certification

For the safety of avionics software in airborne systems, there are standard safety tests and certifications such as DO-178B/C [4] and ISO/IEC 15408 [3]. However, to our knowledge, no standard safety testing framework has been created for RVs. We believe that RVFUZZER's post-production, black-box-based vetting (i.e., without source code) will serve as a useful complement to standardized safety testing during RV design and production.

### Conclusion

Robotic vehicles (RVs) face cyber and cyber-physical attacks via various attack vectors. This paper identifies a new, small-footprint attack where an attacker remotely issues a control parameter-change command with an illegitimate parameter value to disrupt the RV's control and mission. Such a value is erroneously accepted by the RV control program due to an input validation bug associated with the control parameter. The attack does not require code injection, control flow hijacking, or sensor spoofing, making it undetectable by existing RV security solutions. To proactively discover input validation bugs in a control program binary, we developed RVFUZZER, a testing system that reveals illegitimate-yet-accepted value ranges of dynamically adjustable control parameters. RVFUZZER adaptively mutates input control parameter values to determine (in)valid value ranges, driven by the detection of control state deviations in the simulated RV. It also considers the impact of external factors by mutating their values and presence. RVFUZZER has discovered 89 real input validation bugs in two of the most popular RV control software suites, demonstrating its efficiency and automation.

### Acknowledgment

We thank our shepherd, Nolen Scaife, and the anonymous reviewers for their valuable comments and suggestions. We also thank Vireshwar Kumar for his detailed feedback and edits, which have improved the quality of the paper. This work was supported in part by ONR under Grant N00014-17-1-2045. Any opinions, findings, and conclusions in this paper are those of the authors and do not necessarily reflect the views of the ONR.

### References

[1] Address space layout randomization, 2001. http://pax.grsecurity.net/docs/aslr.txt.
[2] Exec shield, 2005. https://static.redhat.com/legacy/f/pdf/rhel/WHP0006US_Execshield.pdf.
[3] ISO/IEC 15408-1:2009, 2009. https://www.iso.org/standard/50341.html.
[4] RTCA/DO-178C, 2011. Software Considerations in Airborne Systems and Equipment Certification.
[5] SparkFun Autonomous Vehicle Competition 2013, 2013. https://avc.sparkfun.com/2013.
[6] DHL parcelcopter launches initial operations for research purposes, 2014. http://www.dhl.com/en/press/releases/releases_2014/group/dhl_parcelcopter_launches_initial_operations_for_research_purposes.html.
[7] Gazebo - A dynamic multi-robot simulator, 2014. http://gazebosim.org.
[8] SITL Simulator (ArduPilot Dev Team), 2014. http://ardupilot.org/dev/docs/sitl-simulator-software-in-the-loop.html.
[9] Hijacking MAVLink drones with a MAVLink exploit, 2015. http://diydrones.com/profiles/blogs/hijacking-quadcopters-with-a-mavlink-exploit.
[10] USPS Drone Delivery | CNBC, 2015. https://www.youtube.com/watch?v=V9GXiXgaK34&list=PLL3t5xY2V44xOxvTIxS4AHuUhFE_bMwhz&index=36.
[11] Inertial Navigation Estimation Library, 2016. https://github.com/priseborough/InertialNav.
[12] 3DR iris+, 2018. https://3dr.com/support/articles/iris.
[13] Amazon Prime Air, 2018. https://www.amazon.com/b?node=8037720011.
[14] American Fuzzy Lop, 2018. http://lcamtuf.coredump.cx/afl.
[15] ArduPilot, 2018. http://ardupilot.org.
[16] DJI Phantom 4 Advanced, 2018. https://www.dji.com/phantom-4-adv.
[17] Honggfuzz, 2018. https://google.github.io/honggfuzz/.
[18] Intel Aero, 2018. https://software.intel.com/en-us/aero.
[19] libFuzzer, 2018. https://llvm.org/docs/LibFuzzer.html.
[20] LibrePilot, 2018. https://www.librepilot.org.
[21] MAVLink — Micro Air Vehicle Communication Protocol, 2018. https://mavlink.io.
[22] MAVProxy - A UAV ground station software package for MAVLink based systems, 2018. https://ardupilot.github.io/MAVProxy.
[23] Paparazzi UAV - an open-source drone hardware and software project, 2018. http://wiki.paparazziuav.org/wiki/Main_Page.
[24] PX4 Pro Open Source Autopilot - Open Source for Drones, 2018. http://px4.io.
[25] Pymavlink - A python implementation of the MAVLink protocol, 2018. https://github.com/ArduPilot/pymavlink.
[26] QGroundControl - Intuitive and Powerful Ground Control Station for PX4 and ArduPilot UAVs, 2018. http://qgroundcontrol.com.
[27] Wing - Google X, 2018. https://x.company/projects/wing.
[28] ArduPilot Parameter List, 2019. http://ardupilot.org/copter/docs/parameters.html.
[29] PX4 Parameter List, 2019. https://dev.px4.io/en/advanced/parameter_reference.html.
[30] Alireza Abbaspour, Payam Aboutalebi, Kang K Yen, and Arman Sargolzaei. Neural adaptive observer-based sensor and actuator fault detection in nonlinear systems: Application in UAV. ISA Transactions, 67:317–329, 2017.
[31] Alireza Abbaspour, Kang K Yen, Shirin Noei, and Arman Sargolzaei. Detection of fault data injection attack on UAV using adaptive neural network. Procedia Computer Science, 95:193–200, 2016.
[32] Luis Afonso, Nuno Souto, Pedro Sebastiao, Marco Ribeiro, Tiago Tavares, and Rui Marinheiro. Cellular for the skies: Exploiting mobile network infrastructure for low altitude air-to-ground communications. IEEE Aerospace and Electronic Systems Magazine, 31(8), 2016.
[33] JC André, G De Moor, P Lacarrere, and R Du Vachat. Modeling the 24-hour evolution of the mean and turbulent structures of the planetary boundary layer. Journal of the Atmospheric Sciences, 35(10):1861–1883, 1978.
[34] Sang Kil Cha, Thanassis Avgerinos, Alexandre Rebert, and David Brumley. Unleashing mayhem on binary code. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (IEEE S&P), IEEE S&P ’12, 2012.
[35] Sang Kil Cha, Maverick Woo, and David Brumley. Program-adaptive mutational fuzzing. In Proceedings of the 36th IEEE Symposium on Security and Privacy (IEEE S&P), IEEE S&P ’15, 2015.
[36] Jiongyi Chen, Wenrui Diao, Qingchuan Zhao, Chaoshun Zuo, Zhiqiang Lin, XiaoFeng Wang, Wing Cheong Lau, Menghan Sun, Ronghai Yang, and Kehuan Zhang. IoTfuzzer: Discovering memory corruptions in IoT through app-based fuzzing.
[37] Long Cheng, Ke Tian, and Danfeng Daphne Yao. Orpheus: Enforcing cyber-physical execution semantics to defend against data-oriented attacks. In Proceedings of the 33rd Annual Computer Security Applications Conference (ACSAC), ACSAC ’17, 2017.
[38] Hongjun Choi, Wen-Chuan Lee, Yousra Aafer, Fan Fei, Zhan Tu, Xi-Tu, Xiangyu Zhang, Dongyan Xu, and Xinyan Deng. Detecting attacks against robotic vehicles: A control invariant approach. In Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS), CCS ’18, 2018.
[39] Abraham A Clements, Naif Saleh Almakhdhub, Saurabh Bagchi, and Mathias Payer. ACES: Automatic compartments for embedded systems. In Proceedings of the 27th USENIX Security Symposium (USENIX Security), 2018.
[40] Fan Fei, Zhan Tu, Ruikun Yu, Taegyu Kim, Xiangyu Zhang, Dongyan Xu, and Xinyan Deng. Cross-layer retrofitting of UAVs against cyber-physical attacks. In Proceedings of the IEEE International Conference on Robotics and Automation (ICRA), ICRA ’18, 2018.
[41] Rod Frehlich, Yannick Meillier, Michael L Jensen, Ben Balsley, and Robert Sharman. Measurements of boundary layer profiles in an urban environment. Journal of Applied Meteorology and Climatology, 45(6):821–837, 2006.
[42] Fadri Furrer, Michael Burri, Markus Achtelik, and Roland Siegwart. Rotors—a modular Gazebo MAV simulator framework. In Robot Operating System (ROS): The Complete Reference (Volume 1), pages 595–625, 2016.
[43] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-based directed whitebox fuzzing. In Proceedings of the 31st International Conference on Software Engineering (ICSE), ICSE ’09, 2009.
[44] Vijay Ganesh, Tim Leek, and Martin Rinard. Dowsing for overflows: A guided fuzzer to find buffer boundary violations. In Proceedings of the 22nd USENIX Security Symposium (USENIX Security), USENIX Security ’13, 2013.
[45] Balazs Gati. Open source autopilot for academic research—the Paparazzi system. In Proceedings of the American Control Conference (ACC), ACC ’13, 2013.
[46] Demoz Gebre-Egziabher, Roger C Hayward, and J David Powell. Design of multi-sensor attitude determination systems. IEEE Transactions on Aerospace and Electronic Systems, 40(2):627–649, 2004.
[47] Dunstan Graham and Richard C Lathrop. The synthesis of optimum transient response: criteria and standard forms. Transactions of the American Institute of Electrical Engineers, Part II: Applications and Industry, 72(5):273–288, 1953.
[48] Saeid Habibi. The smooth variable structure filter. Proceedings of the IEEE, 95(5):1026–1059, 2007.
[49] Zhijian He, Yanming Chen, Zhaoyan Shen, Enyan Huang, Shuai Li, Zili Shao, and Qixin Wang. Ard-mu-copter: A simple open source quadcopter platform. In Proceedings of the 2015 11th International Conference on Mobile Ad-hoc and Sensor Networks (MSN), MSN ’15, 2015.
[50] G Heredia, A Ollero, M Bejar, and R Mahtani. Sensor and actuator fault detection in small autonomous helicopters. Volume 18, pages 90–99. Elsevier, 2008.
[51] Myungsoo Jun, Stergios I Roumeliotis, and Gaurav S Sukhatme. State estimation of an autonomous helicopter using Kalman filtering. In Proceedings of the 1999 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), IROS ’99, 1999.
[52] Chung Hwan Kim, Taegyu Kim, Hongjun Choi, Zhongshu Gu, Byoungyoung Lee, Xiangyu Zhang, and Dongyan Xu. Securing real-time microcontroller systems through customized memory view switching. In Proceedings of the 27th Annual Symposium on Network and Distributed System Security (NDSS), 2018.
[53] Nathan P Koenig and Andrew Howard. Design and use paradigms for Gazebo, an open-source multi-robot simulator. In Proceedings of the IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS), 2004.
[54] Benjamin C Kuo. Automatic Control Systems. Prentice Hall PTR, 1987.
[55] Y. Kwon, J. Yu, B. Cho, Y. Eun, and K. Park. Empirical analysis of MAVLink protocol vulnerability for attacking unmanned aerial vehicles. IEEE Access, 6:43203–43212, 2018.
[56] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. Angora: Efficient fuzzing by principled search. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE), ESEC/FSE ’17, 2017.
[57] Yuekang Li, Bihuan Chen, Mahinthan Chandramohan, Shang-Wei Lin, Yang Liu, and Alwen Tiu. Steelix: Program-state based binary fuzzing. In Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering (ESEC/FSE), ESEC/FSE ’17, 2017.
[58] Renju Liu and Mani Srivastava. ProTC: Protecting drone’s peripherals through ARM TrustZone. In Proceedings of the 3rd Workshop on Micro Aerial Vehicle Networks, Systems, and Applications (DroNet), DroNet ’17, 2017.
[59] Marie Lothon, Donald H Lenschow, and Shane D Mayor. Doppler lidar measurements of vertical velocity spectra in the convective planetary boundary layer. Boundary-Layer Meteorology, 132(2):205–226, 2009.
[60] F Landis Markley, John Crassidis, and Yang Cheng. Nonlinear attitude filtering methods. In Proceedings of the AIAA Guidance, Navigation, and Control Conference and Exhibit (AIAA), AIAA ’05, 2005.
[61] Robert Mitchell and Ray Chen. Adaptive intrusion detection of malicious unmanned air vehicles using behavior rule specifications. IEEE Transactions on Systems, Man, and Cybernetics: Systems, 44(5):593–604, 2014.
[62] A. Nemati and M. Kumar. Modeling and control of a single axis tilting quadcopter. In Proceedings of the American Control Conference (ACC), ACC ’14, 2014.
[63] H. Peng, Y. Shoshitaishvili, and M. Payer. T-Fuzz: Fuzzing by program transformation. In Proceedings of the 38th IEEE Symposium on Security and Privacy (IEEE S&P), IEEE S&P ’18, 2018.
[64] Viswanadhapalli Praveen and S Pillai. A., "Modeling and simulation of quadcopter using PID controller". International Journal of Control Theory and Applications (IJCTA), 9(15):7151–7158, 2016.
[65] Friedrich Pukelsheim. The three sigma rule. The American Statistician, 48(2):88–91, 1994.
[66] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. VUZZER: Application-aware evolutionary fuzzing. In Proceedings of the 24th Annual Symposium on Network and Distributed System Security (NDSS), NDSS ’17, 2017.
[67] Nils Rodday. Hacking a professional drone. 2016.
[68] Nils Miro Rodday, Ricardo de O Schmidt, and Aiko Pras. Exploring security vulnerabilities of unmanned aerial vehicles. In Proceedings of the IEEE/IFIP Network Operations and Management Symposium (NOMS), NOMS ’16, 2016.
[69] S Sabikan and SW Nawawi. Open-source project (OSPS) platform for outdoor quadcopter. Journal of Advanced Research Design, 24:13–27, 2016.
[70] Ihab Samy, Ian Postlethwaite, and Dawei Gu. Neural network based sensor validation scheme demonstrated on an unmanned air vehicle (UAV) model. In Proceedings of the 47th IEEE Conference on Decision and Control (CDC), pages 1237–1242, 2008.
[71] Sergej Schumilo, Cornelius Aschermann, Robert Gawlik, Sebastian Schinzel, and Thorsten Holz. KAFL: Hardware-assisted feedback fuzzing for OS kernels. In Proceedings of the 26th USENIX Security Symposium (USENIX Security), USENIX Security ’17, 2017.
[72] Yun Mok Son, Ho Cheol Shin, Dong Kwan Kim, Young Seok Park, Ju Hwan Noh, Ki Bum Choi, Jung Woo Choi, and Yong Dae Kim. Rocking drones with intentional sound noise on gyroscopic sensors. In Proceedings of the 24th USENIX Security Symposium (Usenix Security),