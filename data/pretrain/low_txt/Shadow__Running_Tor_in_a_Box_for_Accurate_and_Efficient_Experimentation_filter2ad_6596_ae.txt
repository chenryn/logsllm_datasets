### Enhancing Simulator Performance and Accuracy

Several architectural modifications can significantly improve the run-time performance of Shadow. The most notable enhancement will be its ability to operate in parallel environments, which will not only expedite experiments but also optimize the utilization of hardware resources. Shadow is an open-source software that is readily available for download and comes with a suite of tools designed to facilitate the generation and execution of experiments. We believe that Shadow is an indispensable tool for understanding and evaluating Tor, and we hope it will prove valuable to other researchers and make a lasting impact on the community.

### Acknowledgments

We extend our gratitude to John Geddes for his assistance with Shadow plugins; Eric Chan-Tin, Denis Foo Kune, and Max Schuchard for their insights into Shadow's design; Chris Wacek for his usability feedback; Roger Dingledine for his insightful analysis of results; and Yongdae Kim, Nick Mathewson, and Paul Syverson for their wisdom and encouragement. This research was supported by NFS grant CNS-0917154, ONR, and DARPA.

### References

1. A. Acquisti, R. Dingledine, and P. Syverson. "On the Economics of Anonymity." In Proceedings of the 7th International Conference on Financial Cryptography (FC'03), 2003.
2. M. AlSabah, K. Bauer, I. Goldberg, D. Grunwald, D. McCoy, S. Savage, and G. Voelker. "DefenestraTor: Throwing out Windows in Tor." In Proceedings of the 11th International Symposium on Privacy Enhancing Technologies (PETS'11), 2011.
3. K. Bauer, D. McCoy, D. Grunwald, T. Kohno, and D. Sicker. "Low-Resource Routing Attacks against Tor." In Proceedings of the 6th ACM Workshop on Privacy in the Electronic Society (WPES'07), pages 11–20, 2007.
4. K. Bauer, M. Sherr, D. McCoy, and D. Grunwald. "Experimenter: A Testbed for Safe and Realistic Tor Experimentation." In the 4th Workshop on Cyber Security Experimentation and Test (CSET'11), 2011.
5. T. Benzel, R. Braden, D. Kim, C. Neuman, A. Joseph, K. Sklower, R. Ostrenga, and S. Schwab. "Design, Deployment, and Use of the DETER Testbed." In Proceedings of the DETER Community Workshop on Cyber Security Experimentation and Test, 2007.
6. S. Chakravarty, A. Stavrou, and A. Keromytis. "Traffic Analysis Against Low-Latency Anonymity Networks Using Available Bandwidth Estimation." In Computer Security – ESORICS, pages 249–267, 2010.
7. B. Chun, D. Culler, T. Roscoe, A. Bavier, L. Peterson, M. Wawrzoniak, and M. Bowman. "PlanetLab: An Overlay Testbed for Broad-Coverage Services." SIGCOMM Computer Communication Review, 33:3–12, 2003.
8. R. Dingledine, N. Mathewson, and P. Syverson. "Tor: The Second-Generation Onion Router." In Proceedings of the 13th USENIX Security Symposium, 2004.
9. N. Evans, R. Dingledine, and C. Grothoff. "A Practical Congestion Attack on Tor Using Long Paths." In Proceedings of the 18th USENIX Security Symposium, pages 33–50, 2009.
10. D. Foo Kune, T. Malchow, J. Tyra, N. Hopper, and Y. Kim. "The Distributed Virtual Network for High Fidelity Large Scale Peer-to-Peer Network Simulation." Technical Report 10-029, University of Minnesota, 2010.
11. D. M. Goldschlag, M. G. Reed, and P. F. Syverson. "Hiding Routing Information." In Proceedings of Information Hiding Workshop (IH'96), pages 137–150, 1996.
12. F. Hernandez-Campos, K. Jeffay, and F. Smith. "Tracking the Evolution of Web Traffic: 1995-2003." In The 11th IEEE/ACM International Symposium on Modeling, Analysis, and Simulation of Computer Telecommunications Systems (MASCOTS'03), pages 16–25, 2003.
13. N. Hopper, E. Vasserman, and E. Chan-Tin. "How Much Anonymity Does Network Latency Leak?" ACM Transactions on Information and System Security (TISSEC'10), 13(2):1–28, 2010.
14. The Iperf Bandwidth Measurement Tool. http://iperf.sourceforge.net/.
15. R. Jansen, N. Hopper, and Y. Kim. "Recruiting New Tor Relays with BRAIDS." In Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS'10), pages 319–328, 2010.
16. C. Kiddle. "Scalable Network Emulation." PhD thesis, University of Calgary, 2004.
17. The Libevent Event Notification Library, version 2.0. http://monkey.org/~provos/libevent/.
18. S. Lin, A. Pan, Z. Zhang, R. Guo, and Z. Guo. "Wids: An Integrated Toolkit for Distributed System Development." In Proceedings of the 10th Conference on Hot Topics in Operating Systems (HOTOS'05), 2005.
19. J. D. Little and S. C. Graves. "Little's Law." web.mit.edu/sgraves/www/papers/Little’s%20Law-Published.pdf, 2008. Accessed July 2011.
20. K. Loesing. "Measuring the Tor Network: Evaluation of Client Requests to Directories." Technical report, Tor Project, 2009.
21. The MaxMind GeoIP Lite Country Database. http://www.maxmind.com/app/geolitecountry.
22. D. McCoy, K. Bauer, D. Grunwald, T. Kohno, and D. Sicker. "Shining Light in Dark Places: Understanding the Tor Network." In Proceedings of the 8th International Symposium on Privacy Enhancing Technologies (PETS'08), pages 63–76, 2008.
23. J. McLachlan and N. Hopper. "On the Risks of Serving Whenever You Surf: Vulnerabilities in Tor's Blocking Resistance Design." In Proceedings of the 8th ACM Workshop on Privacy in the Electronic Society (WPES'09), pages 31–40, 2009.
24. S. Murdoch and G. Danezis. "Low-Cost Traffic Analysis of Tor." In IEEE Symposium on Security and Privacy, pages 183–195, 2005.
25. S. Murdoch and R. Watson. "Metrics for Security and Performance in Low-Latency Anonymity Systems." In Proceedings of the 8th International Symposium on Privacy Enhancing Technologies (PETS'08), pages 115–132, 2008.
26. S. Naicken, A. Basu, B. Livingston, S. Rodhetbhai, and I. Wakeman. "Towards Yet Another Peer-to-Peer Simulator." In Proceedings of the 4th International Working Conference on Performance Modelling and Evaluation of Heterogeneous Networks (HET-NETs'06), 2006.
27. S. Naicken, B. Livingston, A. Basu, S. Rodhetbhai, I. Wakeman, and D. Chalmers. "The State of Peer-to-Peer Simulators and Simulations." SIGCOMM Computer Communication Review, 37(2):95–98, 2007.
28. T.-W. J. Ngan, R. Dingledine, and D. S. Wallach. "Building Incentives into Tor." In The Proceedings of Financial Cryptography (FC'10), 2010.
29. The ns-2 Network Simulator. http://www.isi.edu/nsnam/ns/.
30. The ns-3 Network Simulator. http://www.nsnam.org/.
31. The OpenSSL Cryptographic Library. http://www.openssl.org/.
32. L. Overlier and P. Syverson. "Locating Hidden Servers." In IEEE Symposium on Security and Privacy, 2006.
33. G. O’Gorman and S. Blott. "Large Scale Simulation of Tor: Modelling a Global Passive Adversary." In Proceedings of the 12th Conference on Advances in Computer Science – ASIAN, pages 48–54, 2007.
34. J. Postel. "User Datagram Protocol." RFC 768, http://www.ietf.org/rfc/rfc768.txt, August 1980.
35. J. Postel. "Transmission Control Protocol." RFC 793, http://www.ietf.org/rfc/rfc793.txt, September 1981.
36. J. Reardon and I. Goldberg. "Improving Tor Using a TCP-over-DTLS Tunnel." In Proceedings of the 18th USENIX Security Symposium, 2009.
37. M. Reed, P. Syverson, and D. Goldschlag. "Anonymous Connections and Onion Routing." IEEE Journal on Selected Areas in Communications, 16(4):482–494, 1998.
38. Shadow Development Repositories. http://github.com/shadow/.
39. Shadow Resources. http://shadow.cs.umn.edu/.
40. R. Snader and N. Borisov. "A Tune-Up for Tor: Improving Security and Performance in the Tor Network." In Proceedings of the 16th Network and Distributed Security Symposium (NDSS'08), 2008.
41. Scalable Simulation Framework, SSFNet. http://www.cc.gatech.edu/computing/compass/pdns/index.html.
42. C. Tang and I. Goldberg. "An Improved Algorithm for Tor Circuit Scheduling." In Proceedings of the 17th ACM Conference on Computer and Communications Security, pages 329–339, 2010.
43. Including Network Extra-Info Statistics Documents. https://gitweb.torproject.org/torspec.git/blob_plain?f=proposals/166-statistics-extra-info-docs.txt.
44. The TorFlow Measurement Tools. https://gitweb.torproject.org/torflow.git/.
45. The Tor Metrics Portal. http://metrics.torproject.org/.
46. A. Vahdat, K. Yocum, K. Walsh, P. Mahadevan, D. Kostić, J. Chase, and D. Becker. "Scalability and Accuracy in a Large-Scale Network Emulator." SIGOPS Operating Systems Review, 36(SI):271–284, 2002.
47. C. Viecco. "UDP-OR: A Fair Onion Transport Design." In Proceedings of Hot Topics in Privacy Enhancing Technologies (HOTPETS'08), 2008.

### Appendices

#### A. Core Simulation Engine

Shadow is a fork of the Distributed Virtual Network (DVN) Simulator [10]. DVN is a discrete-event, multi-process, scalable UDP-based network simulator written in C that can simulate hundreds of thousands of nodes in a single experiment. DVN takes a unique approach to simulation by running UDP-based user applications as modules loaded at runtime. Among DVN’s core components are the per-process event schedulers, a process synchronization algorithm, and a module subsystem. We describe the main components, noting that Foo Kune et al. [10] provide details in much greater resolution.

**Discrete-Event Scheduler:** DVN implements a conservative, distributed scheduling algorithm (see Figure 8) that utilizes message queues to transfer events between workers. The scheduling algorithm consists of three phases: importing events initiated from remote nodes, synchronizing worker processes, and executing local node events. During the import phase, workers process incoming messages containing events and store them in a custom local event priority queue. After all messages are imported, workers send synchronization messages (discussed below) to other workers and finally process local events in non-decreasing order. Incoming messages are buffered while processing local events and handled during the next import phase.

**Multi-Process Synchronization:** Messages between the master and workers enable global time synchronization throughout the simulation. Synchronized time is vital to ensure events are executed in the correct order since a conservative scheduling algorithm cannot revert events. By exchanging messages, each process tracks the local time of all other processes. A barrier is computed by taking the minimum local time of each process and adding the minimum network latency between any two network nodes in the simulation. The barrier represents the earliest possible time that an event from one process may affect another process. Each process may execute events in its local event queue as long as the event execution time is earlier than the barrier. This is called the safe execution window: any event in this window may be safely executed without compromising the order of events (i.e., time will never jump backwards to execute a past event). Barriers are dynamically updated as new synchronization messages update local times. Future events are allowed to execute as the barrier progresses through time. This synchronization approach allows the distribution of events to multiple processes.

**Module Subsystem:** DVN contains a subsystem for dynamically loading modules. Modules, pieces of code that are run by nodes, are generally created by porting application code to use DVN network calls and implementing special functions required by DVN. The special functions allow modules to receive event callback notifications from DVN. Although each module may be run by several nodes, module libraries are only loaded into memory once. To support multiple nodes running the same module, DVN requires each module to register all variable application state. Using the registered memory addresses, DVN may properly load variables before passing execution control to the module and unload and save variables after regaining control.

#### B. Circuit Scheduler Performance

In Section 6, we presented results for web client responsiveness and overall performance for both web and bulk clients with different circuit schedulers under varying network loads. In Figure 9, we show that the responsiveness for bulk clients follows the same pattern as previously shown in Figure 7. (The results were obtained from the same experiments described in Section 6.) Although time to first byte is less important for bulk clients, the results support our conclusion that the EWMA circuit scheduling algorithm reduces performance both under lighter loads and when the half-life is not set correctly. Figure 10 shows performance under an extremely lightly loaded network of 475 web and 25 bulk clients. The results support our claims in Section 6 that the choice of circuit scheduler is insignificant for client performance when the load on the network is too light.

(a)
(b)
(c)
Figure 9: Responsiveness for bulk clients under a varying network load of 950 web clients and (a) 25 bulk clients, (b) 50 bulk clients, and (c) 100 bulk clients. As in Figure 7, the network is less responsive under lighter loads when using the EWMA circuit scheduler.

(a)
(b)
Figure 10: Network performance under an extremely light load of 475 web and 25 bulk clients. When the network load is too light, the circuit scheduling algorithm has an insignificant impact on performance.