### Optimized Text

The results from the offline correlation process should enable the online correlation process to fully recognize the "illegal NFS mount" scenario. However, when this attack is launched on a system monitored by Snort and e-Trust, nine alerts are generated: seven by Snort and two by e-Trust (see the appendix for a graphical interface).

It is important to note that alert correlation is highly effective in reducing false positives. For example, each individual step of the "illegal NFS Mount" intrusion scenario, as presented in Section 5, might be considered a false positive on its own. Only through the correlation of these alerts can we determine that an actual intrusion has occurred. Therefore, in many cases, an alert that is not further correlated with other alerts can be concluded to be a false positive.

There are several issues to address in this work:

1. **Intention Recognition Function**:
   - We are currently designing an intention recognition function. The primary goal of this function is to predict the intruder's next steps. To achieve this, we are combining two approaches:
     - **Abductive Correlation**: This approach forecasts the next step in the attack scenario based on the analysis of facts (e.g., `attack_correlation(Attack1, Attack2)`). It is simpler than the abductive correlation process described in Section 5 because it does not generate virtual alerts.
     - **Specification of Global Intrusion Objectives**: This approach is similar to specifying a security policy, assuming the intruder's objective is to violate the security policy. A global intrusion objective can be seen as a logical expression describing the target state the intruder aims to achieve. This approach correlates attacks with the intrusion objective, guiding the intention recognition process.

   In both cases, the intention recognition function may provide multiple possibilities, such as several "next steps" in the first approach and several possible intrusion objectives in the second approach. Thus, we also need to design a method to select the "best" possibility, which remains an open research problem.

2. **Encoding a Larger Base of Attacks**:
   - We plan to encode a more extensive base of attacks in LAMBDA. The objective is not only to improve correlation results but also to explore whether our correlation approach can discover new attack scenarios by correlating elementary attacks.

3. **Distributed Architecture**:
   - The architecture suggested in this paper is centralized, with the CRIM module receiving all alerts generated by the IDS. This is due to technical constraints, as we consider it impractical to directly create communication between IDSs in the MIRADOR project. A distributed approach was suggested in [14], where the authors illustrate how to manage time intervals. Due to space limitations, this point is not developed here but will be presented in a forthcoming paper.

### Online Correlation Process
Once a virtual alert is abduced, the online correlation process applies the corresponding correlation rules. It first checks if `cond4` is satisfied, specifically ensuring that `Target_address1 = Target_address2`, where `Target_address1` is the IP address of the original alert and `Target_address2` is the IP address of the virtual alert. Since `Target_address2` is a Skolem constant, unification succeeds, and `Target_address2` is updated to match `Target_address1`.

Next, the process checks if `cond6` is satisfied, which includes the condition `Target_address2 = Target_address3`, where `Target_address2` is the IP address of the virtual alert and `Target_address3` is the IP address of the alert corresponding to `attack_rlogin`. If `Target_address1` equals `Target_address3`, the alerts corresponding to `attack_mount` and `attack_rlogin` have the same target IP address, and `cond6` is satisfied. Otherwise, the abductive correlation fails.

Similarly, for `cond5`, we check if it is possible to correlate the alert corresponding to `attack_finger` with the virtual alert. The condition `Target_address4 = Target_address2` must be satisfied, where `Target_address4` is the IP address of the `attack_finger` alert. This condition is met if the alerts corresponding to `attack_mount` and `attack_finger` have the same target IP address.

### Experimental Results
In our experiment, the abduction of an alert corresponding to `attack_rhost` succeeded. Consequently, the online correlation function correlates all alerts generated by the "illegal NFS mount" attack into a single scenario, even though step 5 of the attack was not detected (see the appendix for a graphical presentation of the detection).

### Conclusion
In this paper, we have presented our approach to designing the correlation function of CRIM, a cooperative module for intrusion detection systems. After specifying an attack base in LAMBDA, the offline correlation process analyzes these attack descriptions to automatically generate a set of correlation rules. The online correlation process then applies these rules to the alerts generated by the IDS to recognize more comprehensive attack scenarios.

All aspects of the approach, including clustering, merging, and abductive correlation, have been implemented in GNU-Prolog [5] with a graphical interface. Future work will include the analysis of a distributed approach, as suggested in [14], to manage time intervals and detect coordinated attacks like the Mitnick attack.

### Acknowledgements
This work was funded by the DGA/CELAR/CASSI as part of the Mirador project. The authors would like to thank all members of the project, including Jacques Capoulade, Mamadou Diop, Samuel Dubus, Aldric Feuillebois (Alcatel CIT), Patrice Carle (ONERA), Ewan Cochevelou, Sylvain Gombault (ENST-Bretagne), Laurent Heye, Ludovic Mé, and Cédric Michel (SupElec Rennes).

### Appendix 1: Graphical Interface
Figure 9 presents a view of the CRIM interface, which consists of three sub-windows. The upper window displays alerts directly generated by the IDS connected to CRIM or abduced by CRIM (virtual alerts). The central window shows fusion alerts, generated by the merging function of CRIM. The lower window presents alerts generated by the online correlation function, demonstrating the detection of the "Illegal NFS Mount" scenario presented in Section 5. `Alertid_1` is a virtual alert corresponding to the attack "MIR-0164" (Modification of .rhost) that is automatically abduced to complete the detection of this scenario.

### References
[1] Computer Associates. E-Trust Intrusion Detection. 2000.
[2] D. Curry and H. Debar. “Intrusion Detection Message Exchange Format Data Model and Extensible Markup Language (XML) Document Type Definition”. draft-itetf-idwg-idmef-xml-03.txt, February 2001.
[3] F. Cuppens. “Managing alerts in a multi-intrusion detection environment”. 17th Annual Computer Security Applications Conference (ACSAC). New-Orleans, December 2001.
[4] F. Cuppens and R. Ortalo. “LAMBDA: A Language to Model a Database for Detection of Attacks”. Proceedings of the Third International Workshop on the Recent Advances in Intrusion Detection (RAID’2000), Toulouse, France, October 2000.
[5] M. Diaz. GNU Prolog: A Native Prolog Compiler with Constraint Solving over Finite Domains. Edition 1.4 for GNU Prolog version, http://gnu-prolog.inria.fr/manual/. July, 2000.
[6] H. Debar and A. Wespi. “The Intrusion-Detection Console Correlation Mechanism”. Workshop on the Recent Advances in Intrusion Detection (RAID’2001), Davis, USA, October 2001.
[7] M.-Y. Huang. “A Large-scale Distributed Intrusion Detection Framework Based on Attack Strategy Analysis”. Proceedings of the First International Workshop on the Recent Advances in Intrusion Detection (RAID’98), Louvain-La-Neuve, Belgium, 1998.
[8] K. Kendall. “A Database of Computer Attacks for the Evaluation of Intrusion Detection Systems”. June 1999.
[9] W. Lee. “Combining Knowledge Discovery and Knowledge Engineering to Build IDSs”. Proceedings of the Second International Workshop on the Recent Advances in Intrusion Detection (RAID’99), Purdue, USA, October 1999.
[10] R. Lippmann. “Using Key String and Neural Networks to Reduce False Alarms and Detect New Attacks with Sniffer-Based Intrusion Detection Systems”. Proceedings of the Second International Workshop on the Recent Advances in Intrusion Detection (RAID’99), Purdue, USA, October 1999.
[11] C. Michel and L. Mé. Adele: “An Attack Description Language for Knowledge-based Intrusion Detection”. 16th International Conference on Information Security. Kluwer. June 2001.
[12] M. Roesch. “Snort – Lightweight Intrusion Detection for Networks”. Proceedings of USENIX LISA’99, November 1999.
[13] A. Valdes and K. Skinner. “Probabilistic Alert Correlation”. Proceedings of the Fourth International Workshop on the Recent Advances in Intrusion Detection (RAID’2001), Davis, USA, October 2001.
[14] J. Yang, P. Ning, X. Wang, and S. Jajodia. “CARDS: A Distributed System for Detecting Coordinated Attacks”. IFIP TC11 Sixteenth Annual Working Conference on Information Security, August 2000.
[15] D. Zerkle. “A Data-Mining Analysis of RTID”. Proceedings of the Second International Workshop on the Recent Advances in Intrusion Detection (RAID’99), Purdue, USA, October 1999.