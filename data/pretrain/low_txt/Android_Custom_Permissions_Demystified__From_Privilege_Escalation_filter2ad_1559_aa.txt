# Android Custom Permissions Demystified: From Privilege Escalation to Design Shortcomings

**Authors:** Rui Li, Wenrui Diao, Zhou Li, Jianqi Du, and Shanqing Guo

**Publication:** 2021 IEEE Symposium on Security and Privacy (SP)

## Abstract
Permissions are a fundamental security mechanism in Android, designed to protect user data and privacy. While much research has focused on system permissions, the security implications of custom permissions, which apps can define to share their resources and capabilities, have been largely overlooked. In this paper, we systematically evaluate the design and implementation of Android custom permissions. We developed CUPERFUZZER, an automatic fuzzing tool, to detect vulnerabilities related to custom permissions in the Android OS. CUPERFUZZER treats the permission mechanism as a black-box and executes massive targeted test cases to trigger privilege escalation. Our experiments discovered 2,384 effective cases with 30 critical paths. By analyzing these cases and the Android source code, we identified four severe design shortcomings in the Android permission framework, including dangling custom permissions, inconsistent permission-group mapping, custom permission elevating, and inconsistent permission definition. Exploiting these shortcomings, a malicious app can obtain dangerous system permissions without user consent. We propose general design guidelines to secure custom permissions, and our findings have been acknowledged by the Android security team and rated as high severity.

## 1. Introduction
Android, the most popular mobile platform, provides rich APIs and features for third-party app development. To ensure security, Android employs various mechanisms, with permissions being a key component. Any app must request specific permissions to access sensitive user data and system resources.

Given the importance of the permission mechanism, its design and usage have been extensively studied. However, custom permissions, which allow apps to define their own permissions to regulate resource sharing, have been largely overlooked. Custom permissions are not related to system capabilities by design, and their scope is supposed to be confined to the defining app. Therefore, in theory, dangerous operations cannot be executed through custom permissions.

To the best of our knowledge, the study by Tuncay et al. [41] is the only work focusing on the security of custom permissions. They manually discovered two privilege escalation attacks, which have since been fixed. However, we found that custom permission-based attacks can still be achieved via alternative execution paths bypassing the fixes. This motivated us to explore whether the design of Android custom permissions has other flaws and how to find them automatically.

### Our Work
In this work, we systematically evaluate the design and implementation of Android custom permissions. We explored the design philosophy of custom permissions and measured their usage status based on a large-scale APK dataset. We also built CUPERFUZZER, an automatic lightweight fuzzing tool, to discover custom permission-related privilege escalation vulnerabilities. Unlike previous approaches, CUPERFUZZER treats the permission mechanism as a black-box and dynamically generates massive test cases for fuzzing. It does not rely on prior knowledge of the internal permission mechanism, avoiding missing inconspicuous system components. After addressing several technical challenges, CUPERFUZZER achieves fully automated seed generation, test case construction, parallel execution, and result verification. Running on four Pixel 2 phones with Android 9/10, CUPERFUZZER discovered 2,384 successful exploit cases after executing 40,195 fuzzing tests.

These effective cases were further converted into 30 critical paths, triggering privilege escalation issues. Combined with the analysis of the Android OS source code, we identified four severe design shortcomings in the Android permission framework:
- **DS#1: Dangling Custom Permission**: Granting non-existent custom permissions.
- **DS#2: Inconsistent Permission-Group Mapping**: Incorrect permission-group members list.
- **DS#3: Custom Permission Elevating**: Elevating a custom permission to a dangerous system permission.
- **DS#4: Inconsistent Permission Definition**: Breaking the integrity of custom permission definitions.

A malicious app can exploit any of these shortcomings to obtain dangerous system permissions without user consent. We present four concrete attacks to demonstrate their fatal consequences, and attack demos are available at [this link](https://sites.google.com/view/custom-permission).

### Responsible Disclosure
We reported our findings to the Android security team, and all reported issues have been confirmed with high severity ratings:
- **DS#1**: High severity, assigned CVE-2021-0307.
- **DS#2**: High severity, assigned CVE-2020-0418.
- **DS#3**: High severity, assigned CVE-2021-0306.
- **DS#4**: High severity, assigned CVE-2021-0317.

To mitigate the current security risks, we propose immediate improvements and discuss general design guidelines to secure custom permissions on Android.

### Contributions
- **Tool Design and Implementation**: We designed and implemented CUPERFUZZER, an automatic black-box fuzzing tool, to discover custom permission-related privilege escalation vulnerabilities in Android.
- **Real-world Experiments**: We deployed CUPERFUZZER in real-world settings and conducted extensive fuzzing analysis, discovering 2,384 privilege escalation cases with 30 critical paths.
- **New Design Shortcomings**: We identified four severe design shortcomings in the Android permission framework, which malicious apps can exploit to obtain dangerous system permissions without user consent.
- **Systematic Study**: We explored the design philosophy of custom permissions and measured their usage in the wild. After analyzing the discovered design flaws, we discussed general guidelines to secure Android custom permissions.

### Roadmap
- **Section II**: Provides the necessary background on Android custom permissions.
- **Section III**: Presents a motivation case and threat model.
- **Section IV**: Introduces the detailed design of CUPERFUZZER.
- **Section V**: Presents the experiment results.
- **Section VI**: Analyzes the design flaws of custom permissions.
- **Section VII**: Proposes mitigation solutions and general design guidelines.
- **Section VIII**: Discusses the limitations of our work.
- **Section IX**: Reviews related work.
- **Section X**: Concludes the paper.

## 2. Android Custom Permissions
### A. Android Permission Mechanism
In Android, sensitive APIs and system resources are protected by the permission mechanism. Apps must declare the corresponding permissions in their manifest files and ask users to authorize. In Android 10 (API level 29), the permission control functionalities are mainly implemented in `PackageManager` [11] and `PermissionController` [13].

Permissions are divided into three protection levels: normal, signature, and dangerous. Normal and signature permissions are granted at install time, with signature permissions restricted to apps signed by the same certificate. Dangerous permissions, also called runtime permissions, require user authorization at runtime and can be revoked at any time. All dangerous permissions belong to permission groups, and granting one permission in a group automatically grants others in the same group.

### B. Usage of Custom Permissions
Custom permissions allow apps to define their own permissions to regulate resource sharing. These permissions are not related to system capabilities and are confined to the defining app. However, our study reveals that custom permissions can be exploited to escalate privileges, leading to significant security risks.