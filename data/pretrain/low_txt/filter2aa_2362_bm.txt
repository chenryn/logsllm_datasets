### Fuzzer Logical Structure and Classification
- **Logical Structure of Fuzzers**: 29–30
- **Fuzzer Classification via Interface**:
  - **APIs**: 164
  - **Client-Side Fuzzers**: 164–165
  - **Files**: 163–164
  - **Layer 2 through 7 Fuzzing**: 165
  - **Local Program**: 162
  - **Network Interfaces**: 162
  - **Web Fuzzing**: 164

### Fuzzer Comparison
- **Overview**: 221–248
  - **Bugs**: 230–231
  - **Closer Look at the Results**: 234–241
  - **Evaluating Fuzzers**: 224–226
  - **Fuzzing Life Cycle**: 221–223
  - **General Conclusions**: 241–247
  - **Introducing the Fuzzers**: 226–229
  - **Results**: 231–234
  - **Targets**: 229

### Fuzzers
- **Building and Classifying Fuzzers**: Refer to "Building and Classifying Fuzzers"
- **Evaluating Fuzzers**: 224–226
  - **Caveats**: 226
  - **Code Coverage**: 225–226
  - **Retrospective Testing**: 224–225
  - **Simulated Vulnerability Discovery**: 225
- **Introducing Fuzzers**: 226–229
  - **Application-Specific Fuzzers**: 229
  - **beSTORM**: 228–229
  - **Codenomicon**: 228
  - **General Purpose Fuzzer (GPF)**: 226–227
  - **Mu-4000**: 228
  - **ProxyFuzz**: 227
  - **The Art of Fuzzing (TAOF)**: 227

### Fuzzer Testing Results
- **DNS**: 233–234, 240–241
- **FTP**: 232–233, 234–237
- **SNMP**: 233, 237–240

### Fuzzer Types
- **Overview**: 26–29, 145–162
  - **Capture-Replay**: 150
  - **Fuzzing Libraries and Frameworks**: 146–148
  - **Generic Fuzzers**: 149–150
  - **In-Memory Fuzzing**: 161–162
  - **Next-Generation Fuzzing Frameworks (Sulley)**: 159–161
  - **Protocol-Specific Fuzzers**: 148–149
  - **Single-Use Fuzzers**: 145–146

### Fuzzing
- **Definition and Overview**: 22–33
  - **Defined**: 1
  - **As a Distinct Testing Method**: 14
  - **Fuzzer Types**: 26–29
  - **Fuzzing and the Enterprise**: 32–33
  - **Fuzzing Frameworks and Test Suites**: 31
  - **Fuzzing Overview**: 24–25
  - **Fuzzing Process**: 30–31
  - **Goal of Fuzzing**: 25
  - **History of Fuzzing**: 22–24
  - **Local Structures of a Fuzzer**: 29–30
  - **Vulnerabilities Found with Fuzzing**: 25–26

### Fuzzing Case Studies
- **Overview**: 249–274
  - **Application Developer Fuzzing**: 259–263
  - **Black-Box Fuzzing for Security Researchers**: 267–273
  - **Carrier and Service Provider Fuzzing**: 255–259
  - **Enterprise Fuzzing**: 250–255
  - **Industrial Automation Fuzzing**: 265–267
  - **Network Equipment Manufacturer Fuzzing**: 263–265

### Fuzzing Frameworks and Test Suites
- **Overview**: 31

### Fuzzing Life Cycle
- **Overview**: 221–223
  - **Exception Analysis**: 223
  - **Identifying Interfaces**: 221
  - **Input Generation**: 222
  - **Report**: 223
  - **Sending Inputs to the Target**: 222–223
  - **Target Monitoring**: 223

### Fuzzing Methods
- **Overview**: 137–135
  - **Bug Hunting**: 59–63
  - **Fuzzing Vectors**: 141–142
  - **Intelligent Fuzzing**: 142–144
  - **Intelligent vs. Dumb (Nonintelligent) Fuzzers**: 144
  - **Paradigm Split: Random or Deterministic Fuzzing**: 138–140
  - **Source of Fuzz Data**: 140–141
  - **White-Box, Black-Box, and Gray-Box Fuzzing**: 144–145

### Fuzzing Metrics
- **Overview**: 99–136
  - **Defect Metrics and Security**: 120–133
  - **Test Automation for Security**: 133–134
  - **Threat Analysis and Risk-Based Testing**: 103–107
  - **Transition to Proactive Security**: 107–120

### Fuzzing Targets
- **Categories of Fuzzing Targets**: 249–250
  - **Applications (Web, VoIP, Mobile)**: 250
  - **Client Software**: 250
  - **Middleware**: 249
  - **Proxy or Gateway Software**: 250
  - **Server Software**: 249

### Fuzzing Vectors
- **Overview**: 141–142

### Fuzz Testing as a Profession
- **Overview**: 84–86
  - **QA Leader**: 86
  - **QA Technical Leader**: 86
  - **Test Automation Engineer**: 86
  - **Test Engineer/Designer**: 86

### General Conclusions
- **Overview**: 241–247
  - **Does Code Coverage Predict Bug Finding?**: 244–246
  - **Generational-Based Approach is Superior**: 242
  - **How Long to Run Fuzzers with Random Elements?**: 246–247
  - **Initial Test Cases Matter**: 242–243
  - **Protocol Knowledge**: 243–244
  - **Random Fuzzers Find Easy Bugs First**: 247
  - **Real Bugs**: 244
  - **The More Fuzzers, the Better**: 242

### Additional Topics
- **General Purpose Fuzzer (GPF)**: 139–140, 156–159, 226–227
- **Generational-Based Approach**: 242, 246
- **Generic Fuzzers**: 149–150
  - **FileFuzz**: 150
  - **ProxyFuzz**: 149
- **Golden FTP (GFTP) Server**: 215, 217–218
- **GPF + PaiMei + Jpgraph = EFS**: 206
- **Gray-Box Fuzzer**: 128
- **Graphical User Interface (GUI)**: 7, 84, 126, 127
- **Gray-Box Testing**: 21, 24, 80, 145
- **Hackers**: 1–2, 5, 12, 37–40, 101
- **Hardware Overflow Protection**: 65–66
  - **Hardware DEP**: 66
  - **Secure Bit**: 65
- **Heap Overflow**: 48
- **Heap Variable Overwrite**: 48–49
- **Hostile Data**: 60–62
- **Implementation**: 20–21
  - **Errors**: 35
- **Implementation Under Test (IUT)**: 17, 84
- **Information Technology (IT) Security**: 41–42
- **Input Generation**: 222
- **Input Source**: 60
- **Input Space**: 60
  - **Coverage**: 89
  - **Coverage Metrics**: 127–130
- **Input Verification**: 64–65
- **Integer Errors**: 46–47
- **Integrity**: 13, 103
- **Interface Coverage**: 89
  - **Metrics**: 127
- **Interfaces**:
  - **Identifying**: 221
  - **To a System**: 84
- **Internally Built Fuzzers**: 109, 111, 112
- **Internet Explorer**: 260
- **Internet Key Exchange (IKE) Fuzzer**: 112, 143
- **Interoperability Testing**: 18, 87
- **Intrusion Detection System (IDS)**: 11
- **Intrusion Prevention System (IPS)**: 11
- **IP Stack Integrity Checker (ISIC)**: 165
- **JavaScript**: 8, 52, 261
- **Known Vulnerability Density**: 130, 131
- **Library Interception**: 180–181
- **Lines of Code (LOC)**: 130
- **Load Testing**: 89–90
- **Local Attack Vectors**: 7–8
  - **Command Line User Interface (CLI)**: 7
  - **Files**: 7
  - **Graphical User Interface (GUI)**: 7
  - **Local Network Loops**: 8
  - **Physical Hardware Access**: 8
  - **Programming Interfaces (API)**: 7
- **Local Network Loops**: 8
- **Local Program Fuzzing**: 162
- **Local Programming Interface (API)**: 126, 127
- **Loss of Data Fees**: 117
- **Man in the Middle (MITM) Attacks**: 54
- **Manufacturing Defects**: 25
- **Memory Corruption Errors**: 42–49
  - **Format String Errors**: 43, 45
  - **Heap Overflow**: 48
  - **Integer Errors**: 46–47
  - **Off-by-One Error**: 47–48
  - **Other Memory Overwrites**: 49
  - **Stack Overflows**: 43, 44
  - **(Uninitialized) Stack or Heap Variable Overwrites**: 48–49
- **Memory-Related Vulnerabilities**: 169–170
- **Metadata Injection Vulnerabilities**: 168–169
- **Metrics, Testing**: 88–89
- **Michigan State University**: 65
- **Middleware**: 249
- **Mini-Simulation Toolkit (PROTOS)**: 148
- **Mobile Phone Fuzzing**: 264–265
- **Model-Based Fuzzers**: 27–29
- **Monitoring, Methods of**: 170–180
  - **Application Monitoring**: 176–180
  - **Commercial Fuzzer Monitoring Solutions**: 176
  - **Remote Monitoring**: 175–176
  - **System Monitoring**: 171–175
  - **Valid Case Instrumentation**: 170–171
- **Mutation Fuzzers**: 138, 150
- **Negative Testing**: 22, 24, 94–95, 129
- **Network Analyzer**: 9, 250
- **Network Equipment Manufacturer Fuzzing**: 263–265
  - **Mobile Phone Fuzzing**: 264–265
  - **Network Switch Fuzzing**: 263
- **Network Fuzzing**: 249
- **Network Interface Card (NIC)**: 84
- **Network Interfaces**: 162
- **Network Protocols**: 8, 84
- **Network Time Protocol (NTP)**: 250
- **Non-Exploitation Vulnerability Scanners**: 36–37
- **Nonintelligent Fuzzers**: 144
- **Off-by-One Error**: 47–48
- **Openness of Wireless Networks**: 5
- **Operations Phase**: 3–4
- **Oulu University Secure Programming Group (OUSPG)**: 6, 23, 118–119, 148
- **Packets**: 252
- **Page Table Entry (PTE)**: 66
- **Patch Deployment, Cost of**: 117–120
- **PAX**: 68
- **Peach Fuzzer Framework**: 146, 147–148
- **Penetration Testers**: 38, 41
- **Performance Testing**: 17–19, 87–88
- **Perl Compatible Regular Expression (PCRE) Library**: 190–195
- **Pesticide Paradox**: 95–96
- **PHP File Inclusions**: 50
- **Physical Hardware Access**: 8
- **PNG Image Decoder**: 260
- **PolyGlot**: 197
- **Pool Crossover**: 207–208
- **Pool Mutation**: 210–211
- **Port Scanner**: 9
- **Proactive Security**: 10–12
- **Proactive Security, Transition to**: 107–120
  - **Cost of Discovery**: 108–115
  - **Cost of Patch Deployment**: 117–120
  - **Cost of Remediation**: 115–116
  - **Cost of Security Compromises**: 116–117
- **Processing of Untrusted Data Received Over Network**: 5
- **Process Metrics**: 133
- **Process Monitoring Tools**: 250
- **Product Line Testing (PLT)**: 85
- **Product Security Team (PST)**: 84–85
- **Programming Interfaces (API)**: 7
- **Proof-of-Concept (POC) Demonstration**: 35–36
- **Protocol Knowledge**: 243–244
- **Protocol Modeler**: 29
- **Protocol-Specific Fuzzers**: 148–149
  - **FTPfuzz**: 149
  - **ikefuzz**: 148–149
- **PROTOS Project**: 12, 23–25, 75–76, 112, 122, 148, 171
  - **File Fuzzers**: 83
  - **Genome Project**: 259
- **ProxyFuzz**: 149, 161, 227, 243–244, 246–247
- **Proxy Software**: 250
- **Python Script**: 16
- **Quality, Measuring**: 73–77
  - **End Users’ Perspective**: 77
  - **Quality Brings Visibility to the Development Process**: 77
  - **Quality is About Finding Defects**: 76
  - **Quality is About Validation of Features**: 73–76
  - **Quality is a Feedback Loop to Development**: 76–77
- **Quality, Testing For**: 77–79
  - **Testing on the Developer’s Desktop**: 79
  - **Testing the Design**: 79