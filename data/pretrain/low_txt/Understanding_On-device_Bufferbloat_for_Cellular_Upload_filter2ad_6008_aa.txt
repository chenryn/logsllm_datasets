# Understanding On-device Bufferbloat for Cellular Upload

**Authors:**
- Yihua Guo†
- Feng Qian‡
- Qi Alfred Chen†
- Z. Morley Mao†
- Subhabrata Sen§

**Affiliations:**
- †University of Michigan
- ‡Indiana University
- §AT&T Labs – Research

**Emails:**
- {yhguo, alfchen, zmao}@umich.edu
- fengqian@indiana.edu
- subhabrata.sen@att.com

## Abstract

Despite extensive research on the growth of cellular network traffic, two important trends have not been thoroughly investigated. First, driven by LTE technology and applications involving wearable devices and device-to-device (D2D) communication, device upload traffic is becoming increasingly popular. Second, the multitasking and multi-window features of modern mobile devices allow many concurrent TCP connections, leading to complex interactions. Motivated by these observations, we conduct the first comprehensive characterization of cellular upload traffic and its interaction with other concurrent traffic. We reveal poor performance in applications running concurrently with cellular upload traffic due to excessive on-device buffering (i.e., on-device bufferbloat). This leads to significant performance degradation in real mobile applications, such as a 66% reduction in download throughput and more than doubling of page load times. We systematically study various solutions for mitigating on-device bufferbloat and propose a system called QCUT to control firmware buffer occupancy from the OS kernel.

**Keywords:** Upload, Bufferbloat, Cellular Networks, Radio Firmware

## 1. Introduction

The rapid growth of mobile devices and cellular networks shows no signs of slowing down. Two important trends that have not been well explored in previous work are user-generated traffic and multitasking.

### 1.1 User-Generated Traffic

The mobile traffic paradigm is shifting from being dominated by downloads to a mix of both downloads and uploads. This shift is driven by emerging applications that enable user-generated traffic, such as media content uploads to social networks (e.g., Facebook videos), background synchronization, cloud-based offloading, HD video chat, machine-to-machine (M2M), and D2D communication. The prevalence of uploads is further fueled by the widespread adoption of LTE networks, which provide uplink bandwidth of up to 20 Mbps.

### 1.2 Multitasking and Multi-Window Features

Modern mobile devices support multitasking, allowing users to interact with multiple applications simultaneously. Newer phones and operating systems, such as Android, now support multi-window features. Even without explicit multitasking, a single foreground app can trigger multiple concurrent TCP flows. A recent study [20] shows that around 28% of the time, each mobile user has concurrent TCP flows.

Motivated by these trends, this paper presents the first comprehensive, quantitative, and cross-layer measurement study of cellular upload traffic and its interaction with concurrent traffic. Our contributions include:

- **Characterization of Upload Traffic (§3):** We analyze the volume, duration, rate, concurrency, and impact on latency of cellular upload traffic using a large network trace collected from an IRB-approved user study involving 15 users over 33 months.
- **Anatomy of On-Device Queuing for Upload Traffic (§4.1-§4.3):** We identify significant end-to-end latency occurring on the end-host device due to large buffers inside the mobile device. We find that on-device bufferbloat can cause latency increases of up to 4 seconds, or 100x the network RTT, on off-the-shelf Android devices.
- **Accurate Achievable Uplink Throughput Estimation (§4.4):** We propose a method to accurately infer uplink throughput by leveraging lower-layer information from cellular control-plane messages.
- **Quantifying the Impact of Uplink Bufferbloat (§5):** We demonstrate that large upload traffic significantly affects the performance of concurrent TCP downloads, increasing average RTT by 91% and reducing average throughput by 66%. We also show that concurrent uploads degrade user experience in real applications, such as web browsing, video streaming, and VoIP.
- **Mitigating On-Device Bufferbloat (§6, §7):** We design and implement QCUT, a new solution to control firmware buffer occupancy from the OS kernel. Our lab experiments show that QCUT effectively reduces cellular firmware queuing delay by more than 96% while incurring little degradation of uplink throughput.

## 2. Experimental Methodology

To comprehensively study cellular upload traffic, we conducted controlled lab experiments and analyzed data collected from a user study with 15 participants.

### 2.1 Controlled Local Experiments

We performed controlled experiments using off-the-shelf smartphones and commercial cellular networks. Our devices included:

- Samsung Galaxy S3 (Android 4.4.4, Linux kernel 3.4.104, Carrier 1’s LTE network)
- Samsung Galaxy S4 (Android 4.2.2, Linux kernel 3.4.0, Carrier 1’s LTE network)
- Samsung Galaxy S3 (Android 4.0.4, Linux kernel 3.0.8, Carrier 2’s 3G network)
- Nexus 5 (Android 6.0.1, Linux kernel 3.4, Carrier 1’s LTE network)

We set up dedicated servers at the University of Michigan with 64-core 2.6 GHz CPU, 128 GB memory, and 64-bit Ubuntu 14.04 OS. Both mobile phones and servers used TCP CUBIC [19], the default TCP variant for Linux/Android, unless otherwise specified. Experiments were conducted during off-peak hours, repeated at least 10 times, and average metrics reported.

### 2.2 Network Traces from a User Study

We leveraged network traces collected from an IRB-approved smartphone user study. We distributed instrumented Samsung Galaxy S3 phones to 15 students, each given an unlimited LTE data plan. The phones were equipped with data collection software that continuously ran in the background, collecting full packet traces in tcpdump format. We collected 900 GB of data from January 2013 to October 2015, using a 1-minute idle timing gap to separate user sessions.

## 3. Upload Traffic Measurement

In this section, we present a measurement study of upload traffic in today's cellular networks using the traces collected from our user study (§2.2).

[Continuation of the paper follows with detailed sections on the characterization of upload traffic, anatomy of on-device queuing, accurate achievable uplink throughput estimation, quantifying the impact of uplink bufferbloat, and mitigating on-device bufferbloat.]