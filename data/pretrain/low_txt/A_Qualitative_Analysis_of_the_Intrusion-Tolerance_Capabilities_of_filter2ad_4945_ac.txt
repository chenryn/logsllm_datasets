# Smartcard and Authorisation Subversion

## Malicious Use of Smartcards
Malice can exploit the authorisation process by using a smartcard with correct credentials to impersonate an authorised user. This subversion, as illustrated in Figure 4, can only be achieved if Malice either alters the access-control matrix or compromises the asynchronous, time-free Byzantine-agreement protocol used by the authorisation service, along with the threshold-cryptographic protocol that protects its secret key and digital signatures.

### Altering the Access-Control Matrix
To change the access-control matrix, Malice would need either:
- A conspiracy of sufficient system administrators working in her interest.
- The ability to crack the threshold-cryptography scheme used to scatter and encrypt the matrix's contents.

#### Administrator Conspiracies
Administrator conspiracies are a social engineering problem that falls outside the technical scope of MAFTIA, and thus are not further considered.

#### Cracking the Matrix
Breaking the matrix's encryption requires Malice to control and understand the programmed semantics of \( t+1 \) hosting sites, where \( t \) is the intrusion resilience threshold. Additionally, she must overcome the distributed diversity of the hosting sites. This is a non-trivial problem with sufficient work factors to deter the attacker.

### Compromising the Byzantine-Protocol
For Malice to obtain forged capabilities and vouchers, she must break the asynchronous Byzantine-protocol of the authorisation service and crack the threshold-cryptographic scheme to derive the necessary secret key for signing. This is practically infeasible due to the complexity involved.

### Resilience of the Authorisation Service
The resilience of the authorisation service depends on the diversity of the underlying servers, which are grouped according to one or more sets of attribute values [13]. The protocols can tolerate the failure of an entire set of servers within each attribute class. Host site diversity also helps in frustrating Malice's attempts.

## Alternative Attacks: Impersonation
Instead of attacking the authorisation server, Malice could attempt to impersonate another authorised user by stealing or forging their smartcard. While the authorisation server cannot guarantee the behavior of a compromised user, it can prevent the compromised user from interfering with legitimate users.

### Security Responsibilities
The security of a smartcard and its PIN is the responsibility of the authorised cardholder. Loss of the card and PIN cannot be protected solely by MAFTIA’s technical defenses. The cardholder must:
1. Keep the card in a safe place.
2. Never reveal the PIN.

If the card is stolen, the cardholder should report the loss to the security administration immediately so that the certificate for the card (held on the card and known by the authorisation service) can be revoked. Additionally, the PIN must never be entered incorrectly more than three times without being revoked. Such policies align with standard ATM banking practices and require cooperation between the logic on the card, the reference monitor on a host, the authentication service, and the security administration.

### Forging a Smartcard
Forging a smartcard is significantly more difficult than stealing one. Although technical attacks on smart cards are known (see Chapter 14 of Anderson [14]), they are assumed to be beyond the resources of Malice. Even if Malice were to break into a smart card and steal the private keys, she would still not be able to generate false permissions to access other MAFTIA hosts because this requires knowledge of the private key for the authentication server, which is not stored on the smart card [12].

### Stolen Card and PIN
Malice would likely choose to steal the card and derive its PIN. However, before using the stolen card, she would need to defeat the certificate-based host-authorisation mechanism used by the Java card or gain physical access to the victim’s machine, which presents additional obstacles.

## Related Work
Traditionally, security focuses on intrusion prevention rather than intrusion tolerance. However, combining security techniques with fault tolerance has gained momentum in recent years, explored in initiatives like the DARPA OASIS programme. MAFTIA was the first project to uniformly apply the 'tolerance paradigm' to the dependability of complete large-scale applications in hostile environments, not just single components [15].

### DELTA-4 Project
The DELTA-4 project [16] was one of the first attempts to build a fully functional distributed, secure, and robust replicated system. It developed a general architecture for dependable distributed systems, including intrusion-tolerant services for data storage with secured access to authenticated, authorised users. DELTA-4 assumed a synchronous communications network, which can be exploited by attackers.

### Byzantine Protocols
Byzantine protocols allow for arbitrary failures but can only tolerate a certain number of simultaneous failures. Diversity can reduce the likelihood of an attacker exploiting a common vulnerability, but unless the system can adapt to previously unknown attacks, a determined attacker will eventually bring the system down. Thus, diversity must be coupled with adaptive learning strategies [21].

### Attack Trees
Bruce Schneier [22] introduced the notion of using fault trees to analyze possible attack scenarios, termed "attack trees." Recent work by Sheyner et al. [24] has looked at modeling a system and its vulnerabilities, then using model checking to derive attack graphs. This approach can generate attack scenarios not anticipated by human experts but faces challenges with state-space explosions and identifying all vulnerabilities.

## Conclusions and Future Research
This paper presents MAFTIA’s approach to building intrusion-tolerant systems, highlighting key design principles such as a “defense in depth” strategy, hybrid failure models, and error confinement mechanisms. Future research areas include:
- Techniques for ensuring and measuring diversity in the presence of malicious faults.
- Improving error-detection mechanisms to make state-based error-recovery feasible.
- Solving problems related to long latency of error detection and malicious dormant-faults.

## References
[1] D. Powell, A. Adelsbach, C. Cachin, S. Creese, M. Dacier, Y. Deswarte, T. McCutcheon, N. Neves, B. Pfitzmann, B. Randell, R. Stroud, P. Veríssimo, and M. Waidner, “MAFTIA (Malicious- and Accidental-Fault Tolerance for Internet Applications)”, in Supplement of the 2001 Int. Conf. on Dependable Systems and Networks (DSN'2001), (Göteborg, Sweden), pp.D32-D35, 2001.

[2] D. Powell and R. J. Stroud (Eds.), Conceptual Model and Architecture of MAFTIA, MAFTIA Project, Deliverable D21, 2003.

[3] A. Avizienis, J.-C. Laprie, and B. Randell, Fundamental Concepts of Dependability, Research Report no. 01145 (Revision 1: December 2002), LAAS-CNRS, August 2001 (UCLA CSD Report no. 010028; Newcastle University Report no. CS-TR-739).

[4] M. Dacier (Ed.), Design of an Intrusion-Tolerant Intrusion Detection System, MAFTIA Project, Deliverable D10, 2002.

[5] N. F. Neves and P. Veríssimo (Eds.), Complete Specification of APIs and Protocols for the MAFTIA Middleware, MAFTIA Project, Deliverable D9, 2002.

[6] L. Cheuk Lung, M. Correia, N. Neves, and P. Veríssimo, “A Simple Intrusion-Tolerant Reliable Multicast Protocol using the TTCB”, in Simpósio Brasileiro de Redes de Computadores, (Natal, Brasil), 2003.

[7] C. Cachin, K. Kursawe, and V. Shoup, “Random oracles in Constantinople: Practical asynchronous Byzantine agreement using cryptography”, in Proc. 19th ACM Symposium on Principles of Distributed Computing (PODC), pp.123-132, 2000.

[8] Y. Deswarte, N. Abghour, V. Nicomette, and D. Powell, “An Intrusion-Tolerant Authorization Scheme for Internet Applications”, in Supplement of the 2002 International Conference on Dependable Systems and Networks (DSN'2002), (Washington, D.C. (USA)), pp.C.1.1-C.1.6, IEEE CS Press, 2002.

[9] MAFTIA, Reference Model and Use Cases, Deliverable D1, MAFTIA Project, 2000.

[10] N. Storey, Safety-Critical Computer Systems, Addison-Wesley Longman, Essex, England, 1996.

[11] I. S. Welch, J. P. Warne, P. Y. A. Ryan, and R. J. Stroud, Architectural Analysis of MAFTIA's Intrusion Tolerance Capabilities, MAFTIA Project, Deliverable D99, January 2003.

[12] N. Abghour, Y. Deswarte, V. Nicomette, and D. Powell, Design of the Local Reference Monitor, MAFTIA Project, Deliverable D6, April 2002.

[13] C. Cachin (Ed.), Specification of Dependable Trusted Third Parties, MAFTIA Project, Deliverable D26, 2001.

[14] R. J. Anderson, Security Engineering: a Guide to Building Dependable Distributed Systems, Wiley Computer Publishing, 2001.

[15] P. J. Veríssimo, N. F. Neves, and M. Correia, “Intrusion-Tolerant Architectures: Concepts and Design”, in Architecting Dependable Systems, (R. Lemos, C. Gacek, and A. Romanovsky, Eds.), 2677, Lecture Notes in Computer Science, Springer-Verlag, 2003.

[16] D. Powell, G. Bonn, D. Seaton, P. Veríssimo, and F. Waeselynck, “The Delta-4 Approach to Dependability in Open Distributed Computing Systems”, in 18th IEEE Int. Symp. on Fault-Tolerant Computing Systems (FTCS-18), (Tokyo, Japan), pp.246-251, IEEE CS Press, 1988.

[17] Y. Deswarte, L. Blain, and J.-C. Fabre, “Intrusion Tolerance in Distributed Systems”, in Symp. on Research in Security and Privacy, (Oakland, CA, USA), pp.110-121, IEEE CS Press, 1991.

[18] M. J. Fischer, N. A. Lynch, and M. S. Paterson, “Impossibility of Distributed Consensus with One Faulty Process”, Journal of the ACM, 32 (2), pp.374-382, 1985.

[19] M. Castro and B. Liskov, “Practical Fault Tolerance”, in Third Symposium on Operating Systems Design and Implementation (OSDI), (New Orleans), pp.173-186, Usenix Association, IEEE TCOS and ACM SIGOPS, 1999.

[20] L. Zhou, F. B. Schneider, and R. v. Renesse, “COCA: A Secure Distributed On-line Certification Authority”, ACM Transactions on Computer Systems, 20 (4), pp.329-368, 2002.

[21] M. Cukier, T. Courtney, J. Lyons, H. V. Ramasamy, W. H. Sanders, M. Seri, M. Atighetchi, P. Rubel, C. Jones, F. Webber, P. Pal, R. Watro, and J. Gossett, “Providing Intrusion Tolerance with ITUA”, in Supplement of the 2002 International Conference on Dependable Systems and Networks (DSN'2002), (Washington, DC), IEEE CS Press, 2002.

[22] B. Schneier, “Attack Trees”, Dr Dobb's Journal of Software Tools, 12 (Dec 1999), pp.21-29, 1999.

[23] A. P. Moore, R. J. Ellison, and R. C. Linger, Attack Modeling and Information for Security and Survivability, CMU/SEI-2001-TN-001, ADA388771, Software Engineering Institute, Carnegie Mellon University, 2001.

[24] O. Sheyner, J. W. Haines, S. Jha, R. Lippmann, and J. M. Wing, “Automated Generation and Analysis of Attack Graphs”, in Symposium on Security and Privacy, pp.273-284, IEEE, 2002.

[25] MAFTIA Project Web Site, http://www.maftia.org

Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04)  
0-7695-2052-9/04 $ 20.00 © 2004 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021 at 05:36:32 UTC from IEEE Xplore. Restrictions apply.