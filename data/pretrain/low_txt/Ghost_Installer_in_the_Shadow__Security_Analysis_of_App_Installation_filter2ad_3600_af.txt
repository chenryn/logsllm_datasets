### VII. DISCUSSION

In practice, the diversity of AIT (App Installation Transaction) designs, driven by customization, and the problems inherent in each step, present significant challenges. Our systematic analysis of the entire AIT process has revealed a range of vulnerabilities that underscore the difficulties in ensuring the security of AIT. More importantly, these findings question the fundamental design philosophy of allowing such security-critical functionalities to be open to customizations. We recommend that at least the security-critical aspects of AIT should be managed by the operating system (OS), as leaving them in the hands of individual app developers can be risky.

#### Suggestions for Developers

Given the various AIT designs and the potential for issues at any stage, there is no one-size-fits-all solution. Despite the critical nature of AIT, the openness of Android allows any developer to create their own installer app without additional guidance. To improve this situation, we provide the following key recommendations to help developers build more secure installer apps:

1. **Use Internal Storage Preferentially:**
   - **Recommendation:** Use internal storage for installing target APKs whenever possible. If internal storage is insufficient, use the SD-Card with the defensive techniques (e.g., using `FileObserver` events) described in Section V.
   - **Context:** In certain circumstances, such as small internal memory or large apps, using the SD-Card may be necessary. However, it is crucial to implement robust defenses to protect against tampering.

2. **Verify APK Hash in Secure Storage:**
   - **Recommendation:** Verify the hash of the target APK in a secure storage location (internal storage or SD-Card with our defense mechanisms in place) immediately before installation.
   - **Purpose:** This ensures that the file has not been tampered with and serves as the last line of defense against replaced or malicious apps.

3. **Protect Sensitive Components:**
   - **Recommendation:** Ensure that sensitive private APIs used for app installation are protected with proper access control (e.g., permissions for broadcast receivers).
   - **Details:** As shown in Section III, exposing these APIs can allow attackers to silently install apps on users' devices. Additionally, components like database files and content providers that store installation-related data should be safeguarded. Database files should be kept in the installer app’s private directory (internal storage).

4. **Enhance User Interface Information:**
   - **Recommendation:** Provide more detailed information about the app intended to be installed (e.g., icon image, developer name/email, package name) in the app store app before redirection.
   - **Benefit:** This helps users detect suspicious behavior and makes it harder for redirect intent attacks to succeed.

### VIII. RELATED WORK

#### Android Vulnerabilities
PaloAltoNetworks [14] reported an attack where an adversary can wait for the permission consent dialog and replace the target APK once it is displayed to the user. Although they highlight the risks associated with SD-Card-based installations, our work is the first to reveal the TOCTOU (Time-of-Check to Time-of-Use) window that spans the entire Step 3 and 4 of the AIT. We also show that even current enterprise protections (e.g., Amazon, Qihoo) for SD-Card-based installations can be bypassed, indicating a significant and far-reaching security threat. The consequences of such exploits, including gaining system privileges, are severe. For instance, Google's `installPackageWithVerification` API only checks the app’s `AndroidManifest.xml`, which can be easily circumvented by malware using the same manifest.

#### Other Related Flaws
Grace et al. [34] discussed privacy issues on Android due to JavaScript-Java bindings, focusing on malicious ad libraries that exploit these bindings to perform remote runtime attacks on Java APIs. Our work, however, reports a new technique that can exploit these bindings. We demonstrate how malware can send Intents with JavaScript code to installer apps that expose a WebView, enabling silent app installation and uninstallation. Other studies [24, 30, 35] have touched on specific installation issues, such as how the Package Manager Service (PMS) checks developer signatures and assigns UIDs to newly installed apps. However, no prior research has systematically investigated AIT as a transaction, as we have done.

#### UI Phishing Attacks
Previous studies have revealed various phishing attacks through user interfaces, such as using a phishing activity to cover the view of a foreground app and hijack its task flow [37]. However, these attacks typically require the attacker to have installation permissions, which they often do not. Our attack, on the other hand, changes the UI of a legitimate installer without the user's knowledge, leading to the installation of malware. This stealthy transfer of a legitimate app’s UI opens the possibility for other exploits, as the victim app can be manipulated to confuse the user.

#### Android Side-Channels
Prior studies [42, 27] have inferred packet data and UI states from `/proc`. Our redirect Intent attack utilizes `oom_adj` in `/proc` for the first time in an attack. Our goal is to detect UI redirections from apps to app store apps, which is lightweight and avoids the learning step required in previous work [27].

#### Mitigation Strategies
Many studies aim to identify malicious or suspicious apps using permissions as a detection feature [31, 32, 43]. However, our adversary uses a common permission (`WRITE_EXTERNAL_STORAGE`), making this approach less effective. Even with the new runtime permission check introduced in Android 6.0, the adversary can still gain the necessary permissions by requesting `READ_EXTERNAL_STORAGE` or `WRITE_EXTERNAL_STORAGE` for a legitimate use. Other approaches, such as static or dynamic analysis to detect malware [23, 36, 40, 39], may not be sufficient for detecting GIA (Ghost Installer Attack). Our protection mechanisms are designed to be the last line of defense against such malware, even if it bypasses the app store's vetting process. While Mandatory Access Control [38, 26, 29] can help, our approach is lightweight and effective, requiring minimal changes to the framework (Section VI-B).

### IX. CONCLUSION

Our study on the Android app installation transaction (AIT) has uncovered significant risks in this security-critical procedure. Most installers today are not securely designed and can be exploited at every step of AIT. The TOCTOU problem in installing apps from external storage, utilized by most app stores and system apps, enables an unprivileged adversary to become a Ghost Installer, with the power to silently install any apps and escalate their privileges. Our research highlights the significant impact of GIA threats, affecting hundreds of millions of users. We have developed new techniques to protect AIT against these threats. Most importantly, our study underscores the lesson that security-critical functionalities should be handled by the OS, and leaving them in the hands of app developers is not a wise solution.

### X. ACKNOWLEDGEMENT

We thank our reviewers for their valuable comments. This work was supported in part by the National Science Foundation under grants 1223477, 1223495, 1527141, and 1618493. Kai Chen was supported in part by NSFC U1536106, 61100226, Youth Innovation Promotion Association CAS, and the strategic priority research program of CAS (XDA06010701). Yeonjoon Lee thanks Samsung Research America for supporting this project during his internship.

### REFERENCES

[1] Alexa-Ranking-APKPure. http://www.alexa.com/siteinfo/apkpure.com.
[2] Amazon Appstore: Gabriel-Knight-Sins-Fathers-Anniversary. https://www.amazon.com/Gabriel-Knight-Sins-Fathers-Anniversary/dp/B013T3AY64.
[3] Android developer website. http://developer.android.com/about/dashboards/.
[4] Android marketshare. http://www.idc.com/promo/smartphone-market-share/os.
[5] Android Storage Options. http://developer.android.com/intl/es/guide/topics/data/data-storage.html#AccessingExtFiles.
[6] Apktool. http://ibotpeaches.github.io/Apktool/.
[7] Gartner-What’s next for smartphones. http://www.gartner.com/smarterwithgartner/whats-next-for-smartphones/.
[8] Ghost Installer Attacks. https://sites.google.com/site/giaprojectdemo/.
[9] Github: OSMonitor. https://github.com/eolwral/OSMonitor.
[10] GSam Battery Monitor App. https://play.google.com/store/apps/details?id=com.gsamlabs.bbm.
[11] Huawei. http://www.huawei.com/cn/.
[12] Impact of DTIgnite. http://www.digitalturbine.com/products/ignite/.
[13] Official Android Developers Documentation. http://developer.android.com/guide/topics/security/permissions.html.
[14] Palo Alto Networks. http://researchcenter.paloaltonetworks.com/.
[15] Quora-post. https://www.quora.com/I-still-have-a-lot-of-space-left-in-my-phone-memory-and-on-my-external-card-but-I-cant-download-apps-from-the-Play-Store-It-just-shows-an-error-about-a-lack-of-space-Why-is-this-happening/answer/Riccardo-Vincenzo-Vincelli?srid=kExW.
[16] samsung-updates.com. http://samsung-updates.com/.
[17] Soot. https://sable.github.io/soot/.
[18] statista.com. https://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/.
[19] Strategy Analytics Press Releases. https://www.strategyanalytics.com/strategy-analytics/news/strategy-analytics-press-releases/strategy-analytics-press-release/2016/08/01/strategy-analytics-samsung-galaxy-s7-edge-was-world’s-top-selling-android-smartphone-in-h1-2016.
[20] Xiaomi. http://www.mi.com/.
[21] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou, W. Du, and M. Grace. Hare hunting in the wild android: A study on the threat of hanging attribute references. In 22nd ACM SIGSAC Conference on Computer & Communications Security, 2015.
[22] B. Antonio, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and G. Vigna. What the app is that? deception and countermeasures in the android user interface. In 2015 IEEE Symposium on Security & Privacy, 2015.
[23] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. In 35th ACM SIGPLAN Conference on Programming Language Design & Implementation, 2014.
[24] D. Barrera, J. Clark, D. McCarney, and P. C. van Oorschot. Understanding and improving app installation security mechanisms through empirical analysis of android. In 2nd ACM Workshop on Security & Privacy in Smartphones & Mobile Devices, 2012.
[25] A. Bashan and O. Bobrov. Certificate: Front door access to pwning millions of androids. BlackHat, Las Vegas, NV, 2015.
[26] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and fine-grained mandatory access control on android for diverse security and privacy policies. In 22nd USENIX Security Symposium, 2013.
[27] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into your app without actually seeing it: UI state inference and novel android attacks. In 23rd USENIX Security Symposium, 2014.
[28] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing inter-application communication in android. In 9th International Conference on Mobile Systems, Applications, and Services, 2011.
[29] S. Demetriou, X. Zhou, M. Naveed, Y. Lee, K. Yuan, X. Wang, and C. A. Gunter. What’s in your dongle and bank account? mandatory and discretionary protection of android external resources. In 22nd NDSS, 2015.
[30] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone application certification. In 16th ACM Conference on Computer & Communications Security, 2009.
[31] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android permissions demystified. In ACM Conference on Computer & Communications Security, 2011.
[32] A. P. Felt, H. J. Wang, A. Moshchuk, S. Hanna, and E. Chin. Permission re-delegation: Attacks and defenses. In 20th USENIX Security Symposium, 2011.
[33] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The most dangerous code in the world: Validating SSL certificates in non-browser software. In 2012 ACM Conference on Computer & Communications Security, 2012.
[34] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe exposure analysis of mobile in-app advertisements. In 5th ACM Conference on Security & Privacy in Wireless & Mobile Networks, 2012.
[35] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These aren’t the droids you’re looking for: Retrofitting android to protect data from imperious applications. In 18th ACM Conference on Computer & Communications Security, 2011.
[36] C. Mann and A. Starostin. A framework for static detection of privacy leaks in android applications. In 27th Annual ACM Symposium on Applied Computing, 2012.
[37] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards discovering and understanding task hijacking in android. In 24th USENIX Security Symposium, 2015.
[38] S. Smalley and R. Craig. Security enhanced (SE) android: Bringing flexible MAC to android. In 20th NDSS, 2013.
[39] L. Vigneri, J. Chandrashekar, I. Pefkianakis, and O. Heen. Taming the android appstore: Lightweight characterization of android applications. CoRR, 2015.
[40] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang. Appintent: analyzing sensitive data transmission in android for privacy leakage detection. In 2013 ACM SIGSAC conference on Computer & communications security, 2013.
[41] N. Zhang, K. Yuan, M. Naveed, X. Zhou, and X. Wang. Leave me alone: App-level protection against runtime information gathering on android. In 2015 IEEE Symposium on Security & Privacy, 2015.
[42] X. Zhou, S. Demetriou, D. He, M. Naveed, X. Pan, X. Wang, C. A. Gunter, and K. Nahrstedt. Identity, location, disease and more: Inferring your secrets from android public resources. In 2013 ACM SIGSAC Conference on Computer & Communications Security, 2013.
[43] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, you, get off of my market: Detecting malicious apps in official and alternative Android markets. In 19th NDSS, 2012.