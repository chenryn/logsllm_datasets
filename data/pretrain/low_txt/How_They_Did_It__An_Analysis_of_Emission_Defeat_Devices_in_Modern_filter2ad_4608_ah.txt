### Subgraphs Induced by All Pairs of Leafs

Figure 10 illustrates an example of a backward join node, specifically the phi node defining `d93`. As expected, this definition corresponds to the distance covered so far.

To handle cases where, for instance, the lower boundary check is control-dependent on the upper boundary check (i.e., it may not be executed based on the result of the other check) but not directly data-dependent, we enhance the data-flow graphs with control-dependency edges. This results in a reduced program dependency graph. The introduced concepts are applicable to this extension as well.

### Matching Test Cycles

Given two related curve calls, we can extract the curves they operate on by backtracking the parameter register `a4`. This allows us to obtain a curve representing the upper boundary (`c^`) and the lower boundary (`c⊥`) of matched driving profiles. In essence, a specific driving profile is matched if its data points lie within these boundaries.

We can perform a sanity check on the extracted curves before further processing. Specifically, we want the curve to be monotonically increasing because the covered distance cannot decrease. This requirement is relaxed for the last data points of a boundary, as there are cases where `c^` drops below `c⊥` to effectively reject all driving profiles after that point. Similarly, we can detect what we call "invalidated checks." These are characterized by having all y values set to a constant value (e.g., `0x7fff` for `c⊥` and `0` for `c^` in the firmware images we analyzed), such that the check rejects any driving profile. Using this method, the manufacturer can parameterize a profile check to ensure it is not actually used.

The reference test cycles used for emissions testing are available either free of charge [20] or with a small subscription fee [7]. In most cases, the cycles are provided as two-dimensional data points, containing information about the elapsed time in seconds and the speed at that point (given in mph or km/h). To match test cycles to the boundaries extracted from the firmware images, both representations need to be normalized. For the latter, we scale the y-axis by a factor of 0.1 to obtain the distance in kilometers and the x-axis by 6.25 to get the engine runtime since startup in seconds (corresponding to the `TimeRed` unit in the A2L file). Since the test curves provide speed instead of the covered distance, we integrate them and convert from mph to km/h if necessary. Finally, to match a curve, each data point must lie within the interval defined by `c^` and `c⊥`.

Some checks cut off the driving profile near the end of a particular test cycle, where the emissions effects would likely not be detected by an ongoing emissions test. To account for this, we do not check the interval for the last 10% of a given test cycle.

### Evaluation

Based on the prototype implementation of CURVEDIFF, we conducted a large-scale study of Volkswagen firmware images to investigate which ones contain a defeat device. Below, we present the evaluation results along with some key findings.

We analyzed 963 firmware images and configured the analysis system with a timeout of seven minutes to avoid long-running tasks. 924 images were successfully analyzed according to the steps outlined in the previous section, while 20 tasks timed out and 19 tasks failed to be processed by IDA. In total, we found that 406 (44%) of the analyzed images contained a defeat device, with 333 of these containing at least one active (i.e., non-invalidated) profile.

#### Performance
The static analysis is fully automated. The fastest analysis task completed in 55 seconds, while several tasks also timed out (as mentioned above). The geometric mean for the analysis of all successful tasks is 105 seconds, meaning we can analyze a given image on average in less than two minutes. Compared to an analysis with a chassis dynamometer, this approach is at least two orders of magnitude faster.

#### Results
Table III summarizes the results of our analysis. Entries above the double line contain firmware from the dump obtained from the chiptuning scene (years 2009 and 2010). Dates and software part numbers are taken from the street release certification next to the firmware images. Entries below the double line are based on firmware obtained via the erWin portal, which provides official firmware images for car shops (years 2012 to 2016). Dates are taken from the firmware’s timestamp. For both data sources, the models have been matched by querying an online database for spare parts, which yields metadata for a given part number (in this case, the part numbers specify the ECU). This mapping may not be 100% accurate, as disclaimed by said sites. For part numbers where multiple model names were returned (due to varying model naming schemes in different regions), we chose the European name, as most firmware images check for European emissions test cycles. In cases where multiple firmware images in a month matched the same model, we denoted the number of images analyzed for a specific model in parentheses. Finally, for all the images released in the same month, we took the union of test cycles they check for to give an impression of the number and variety of matched cycles. Figure 9 depicts our coverage in terms of identified test cycles. For firmware images with 5 profiles, we were able to match a test cycle to each profile. However, for later images checking 5 and 7 profiles, respectively, we were unable to find a matching test cycle for some of the profiles.

#### Effects on EGR
Based on the results in Table III, we automatically identified a lower bound of firmware images in which the acoustic condition affects the AirCtl subsystem, responsible for calculating the amount of recirculated exhaust gas (EGR). We did not use A2L files for this, as we do not have matching files for all firmware images. We found that in at least 268 images (66%), the acoustic condition can affect EGR. Based on the parameters we extracted, we can confirm that in 247 (92%) of these images, the acoustic condition actually influences the choice of parameters. Note that the AirCtl detection can be improved and extended to other subsystems as listed in Table II to fully confirm further defeat devices in Table III.

We also manually analyzed some of the defeat devices detected by CURVEDIFF to verify our results. One notable finding is the 2014 EDC17C54 P1169 firmware image with part number 03L906012DE and revision 8401, which started checking the steering wheel angle in addition to the time-distance profiles, as described in Section IV-A. An automatic scan for the steering wheel check yielded three more images: 03L906012 (revision 7444, depicted in Figure 3); 03L906012DD (revision 8400); and 03L906012BP (revision 7445). These images were seemingly released on December 3, 2014, at 22:55 and are used in VW Passat cars according to an online database. This refinement of the defeat device is noteworthy given that at that point in time, the CARB had already started to investigate emission abnormalities in Volkswagen cars [15] (cf. facts 140, 141). As evident from Table III, these images are responsible for the largest set of test cycle matches across nearly 400 images, further highlighting the necessity of the check. Other firmware images released the same month (for Audi A4 and A6) do not contain this additional logic and only match a subset of the listed test cycles.

### Discussion

Our empirical evaluation results demonstrate that our approach to detecting Volkswagen-style defeat devices is viable across a large number of firmware images. Nevertheless, there are certain open challenges and potential limitations of our approach, which we discuss in the following sections.