# Workshop on Dependable Software - Tools and Methods
## Workshop Abstract

### Authors
- Takuya Katayama
- Yutaka Ishikawa
- Yoshiki Kinoshita

### Organizers
**Workshop Chair:**
- **Takuya Katayama**  
  Japan Advanced Institute of Science and Technology, JAPAN

**Program Co-chairs:**
- **Yutaka Ishikawa**  
  University of Tokyo, JAPAN
- **Yoshiki Kinoshita**  
  National Institute of Advanced Industrial Science and Technology, JAPAN

### Overview
Dependability encompasses attributes such as reliability, availability, safety, and security. To achieve dependable systems, the system software must not only provide these attributes against hardware failures and intrusions but also ensure robustness in the software itself. Formal methods, exemplified by UML and model checking, have gained significant attention in this field. This one-day workshop covers all aspects of supporting dependable software. The program includes ten papers (five long and five short) and one invited talk. The papers are summarized below.

### Session: Systems and Tools
Four papers related to dependable systems and tools are presented:

1. **"Difference of Degradation Schemes among Operating Systems – Experimental Analysis for Web Application Servers"**  
   *Authors: H. Hibino, et al.*  
   This paper reports that the performance degradation on the Solaris operating system is gradual, while it is more abrupt on Linux and Windows.

2. **"XGE-ProtoDevel: A Communication Protocol Development Tool for 10Gbps Class Network"**  
   *Authors: S. Sumimoto, et al.*  
   This paper introduces a communication protocol development tool that provides network fault injection and packet profiling functions. It also shares experiences from using the tool for protocol development.

3. **"A Methodology for Designing Fault Injection Experiments as an Addition to Communication Systems Conformance Testing"**  
   *Authors: A. M. Ambrosio, et al.*  
   This paper introduces CoFI, a conformance and fault injection testing methodology. It includes a case study of a simple communication protocol.

4. **"A Consistency Checker for UML Model Diagrams"**  
   *Authors: Y. Kotb, et al.*  
   This paper proposes an automatic consistency checker for UML diagrams. The checker converts UML diagrams into XML documents using the UML-XMI mapping and evaluates whether the attributes in the XML documents satisfy consistency conditions specified in a meta-language called SLXS.

### Session: Concurrency and Tools
Three papers related to concurrency and tools are presented:

1. **"Language-based Software Reliability: Examples and Future Directions"**  
   *Authors: P. T. Wojciechowski, et al.*  
   This paper provides a brief survey and research direction in the field, demonstrating that advanced type systems can detect non-trivial errors.

2. **"Congruences for a Timed Extension of the π-Calculus"**  
   *Authors: H. Kuwabara, et al.*  
   This paper proposes a timed variant of the synchronous π-calculus and investigates notions of equality, particularly where processes proceed at different speeds.

3. **"Model Checking of Multi-Process Applications Using SBUML and GDB"**  
   *Authors: Y. Nakagawa, et al.*  
   This paper introduces a new framework for model checking of applications in a real environment with the aid of a virtual machine.

### Session: Models
Three papers are presented in this session:

1. **"Execution Monitoring and Information Flow Properties"**  
   *Authors: N. Nagatou, et al.*  
   This paper extends Schneider’s security automaton to handle information flow properties, which can be stated as safety properties.

2. **"Preconditions of Properties Described in CTL for Statements Manipulating Pointers"**  
   *Authors: Y. Tanabe, et al.*  
   This paper presents a formal treatment of programs manipulating pointers, with the main contribution being a method to construct the weakest preconditions of predicates on pointer structures.

3. **"Analyzing Behaviors in VDM Specifications by Focusing on User-defined Types"**  
   *Authors: K. Miyoshi, et al.*  
   This paper introduces a method to extract an FSP model from a formal specification in VDSM-SL (Vienna Development Method Specification Language) and apply it to a model checking tool, LTSA (Labelled Transition System Analyzer).

### Conference Details
Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN'05)  
ISBN: 0-7695-2282-3/05 $20.00 © 2005 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20, 2021, at 11:53:50 UTC from IEEE Xplore. Restrictions apply.