### Bluehat Shanghai 2019
**Speaker:** David “dwizzzle” Weston, Manager, Microsoft OS Security Group  
**Topic:** Advancing Windows Security

---

### Introduction
Good morning, Shanghai!

### Overview of Windows for Different Platforms

#### Windows for PCs
- **Familiar Desktop Experience**
- **Broad Hardware Ecosystem**
- **Desktop App Compatibility**
- **One Core OS**
  - Base OS
  - App and Device Platform
  - Runtimes and Frameworks

#### Windows on Xbox
- **10 Shell Experience**
- **Unique Security Model**
- **Shared Gaming Experience**

#### Windows on IoT
- **Base OS**
- **App and Device Platform**
- **Runtimes and Frameworks**

#### Windows for Other Devices
- **Form Factor Appropriate Shell Experience**
- **Device-Specific Scenario Support**

### Evolution of Windows Security
Windows is continuously evolving to enhance security. Key goals include:
- Malicious code cannot persist on a device.
- Violations of promises are observable.
- All apps and system components have only the privileges they need.
- All code executes with integrity.
- User identities cannot be compromised, spoofed, or stolen.
- An attacker with casual physical access cannot modify data or code on the device.

### Increasing Security: Windows 10 S
Windows 10 S introduces several security enhancements:
1. **Mandatory Code Signing**
2. **Complete Password-less Authentication**
3. **“Admin-less” User Account**
4. **Blocking Internet Scripts and Macros**

#### Comparison with Classic Windows 10
- **Run as Admin**: Not required in Windows 10 S
- **Execute Unsigned Code**: Prohibited in Windows 10 S
- **Use Passwords**: Discouraged in Windows 10 S
- **Mitigations Always On**: Ensured in Windows 10 S

**Achievements:**
- Millions of installs with no widespread detections of malware.
- All code executes with integrity.

### Code Integrity Improvements
- **CI Policy Removal of Proxy Binaries**
- **Store Signed Only Apps (UWP or Centennial)**
- **Blocking of Dangerous File Extensions**
- **Default Blocking of Remote Office Macros**

### First-Order Code Integrity Protection
- A first-order CI bypass allows a remote attack to trigger initial unsigned code execution.
- Windows 10 S focuses on preventing first-order bypasses.
- Second-order bypasses enable additional unsigned code execution after initial code execution.
- Windows 10 S offers less durable guarantees for second-order bypasses.

### Exploit Mitigation Strategy
- **Increase Cost of Exploitation**
- **Control Flow Integrity**
- **Signed Code Only**
- **Read-only Data**
- **Eliminate Bug Classes**

### Control Flow Challenges
- **Dangerous Call Targets**
- **Unprotected Stack**
- **Data Corruption**

### Introducing XFG (eXtended Function Guard)
- **Goal**: Provide finer-grained CFI efficiently and compatibly.
- **Concept**: Restrict indirect transfers through type signature checks.
- **Design Basics**:
  - Assign a type signature-based tag to each address-taken function.
  - Embed the tag immediately before each function.
  - Add tag checks to call-sites to fast fail on mismatch.

### XFG Security
- C-style function pointers can only call functions with the same type signature.
- C++ virtual methods can only call methods with the same name and type in their class hierarchy.
- This is much stronger than CFG, though it is an over-approximation.
- The use of a hash function means there could technically be collisions, but this is very unlikely.

### Shadow Stack Protection
- **Initial Attempt**: Software shadow stack (RFG) failed.
- **Control-Flow Enforcement Technology (CET)**:
  - Return address protection via a shadow stack.
  - Hardware-assisted mitigation against control-flow hijacking and ROP.
  - Robust against arbitrary read-write threats.

### Kernel Data Protection
- **Problem**: Kernel exploits leverage data corruption for privilege escalation.
- **Solution**: Kernel Data Protection (KDP) uses Secure Kernel to enforce immutability.
- **Example**: CVE-2016-7256 exploit (Open Type Font elevation of privilege).

### Admin-less Mode
- **Elevation Blocked**: In Admin-less S mode.
- **New Standard User Type**: Can make some device-wide changes.
- **Kernel Data Protection**: Uses Secure Kernel to enforce immutability.

### Firmware Security Issues
- **UEFI Malware**: Discovered by ESET.
- **SMM Attacks**: Bypass VBS.
- **ThinkPWN Exploit**: Lenovo firmware vulnerability.
- **System Guard with DRTM**: Utilizes DRTM to perform TCB measurements from a Microsoft MLE.
- **Zero Trust**: Measurements of key properties available in PCRs and TCG logs.

### Improving Boot Security
- **SMM Vulnerabilities**: Highlighted by external researchers and OSR REDTEAM.
- **Intel Runtime BIOS Resilience**: Provides security properties for SMM.

### Physical Attack Mitigations
- **LPC/SPI TPM VMK Key Extraction**: Using a logic analyzer.
- **Bitlocker Cold Boot Attacks**.
- **DMA Attacks with PCILeech**.

### DMA Protection
- **Use IOMMU**: Block newly attached Thunderbolt™ 3 devices from using DMA until a user is logged in.
- **Automatically Enable DMA Remapping**: With compatible device drivers.
- **Future Releases**: Harden protection on all external PCI ports and cross-silicon platforms.

### Windows Data Protection Under Lock
- **Per-file Encryption**: Provides a second layer of protection at rest.
- **Key Derived from User Secret**: Hello, Biometric.
- **Messages and Data**: Encrypted, key discarded upon lock or shutdown.

### Improving Identity Security
- **Windows Hello and NGC**: Offer biometric authentication and hardware-backed key storage.
- **Future Enhancements**: Biometric hardening enabled through virtualization.
- **Windows Hello Attack Surface**: Sensor, driver, template DB, engine adapter, feature extraction, template construction, storage adapter.

### Platform Tamper Detection
- **Spanning Device Boot to Ongoing Runtime Process Tampering**.
- **Designed for Remote Assessment of Device Health**.
- **Hardware Rooted Device Trust**.
- **Leverage VBS Security Boundary**.

### Closing
- **Platform Features Rapidly Changing**: Windows is evolving quickly to increase protections against new attacks.
- **Aspirational Goals**: Provide strong guarantees across a growing threat model.
- **Community Collaboration**: Programs such as bug and mitigation bounty are critical.
- **Research Community Engagement**: We want to work together with research communities in China and beyond to learn more about current and future attacks.
- **Windows Needs the Community**: Your contributions are essential.

Thank you!