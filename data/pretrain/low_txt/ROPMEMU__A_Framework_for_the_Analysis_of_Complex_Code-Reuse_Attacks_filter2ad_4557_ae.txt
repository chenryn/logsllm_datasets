### Introduction

Our primary objective is to achieve full code coverage of Return-Oriented Programming (ROP) payloads, even in the presence of dynamically generated chains. This task is particularly challenging due to the complexity and size of ROP rootkits.

### Related Work

In a similar vein, Yadegari et al. [60] propose a generic approach to deobfuscate code, treating ROP as a form of obfuscation. Their system employs bit-level taint analysis on existing execution traces to deobfuscate the Control Flow Graph (CFG). Additionally, they adopt transformations akin to those proposed by DeRop to handle ROP payloads. Despite the availability of Chuck at the time, the authors noted a lack of complex ROP chain examples and tested their system on small, simple control flow logic examples. Notably, their system does not emulate the ROP chain or perform code coverage, focusing instead on simplifying existing execution traces.

Another research direction focuses on locating ROP chains in memory and profiling their behavior [55, 47, 33]. The first two solutions were designed for 32-bit user-land applications, scanning the program address space to identify gadgets and payload spaces. Recently, Kittel et al. [33] introduced a code pointer examination technique to isolate the main chains used by data-only malware, testing their method on a 64-bit system against Chuck [58].

ROPMEMU can leverage these techniques to identify persistent ROP chains in both user- and kernel-space. However, the profiling phases in these studies are relatively simple, detecting only persistent ROP chains. To address these limitations, we adopted an approach based on CPU and memory emulation. Furthermore, previous techniques do not work with packed ROP chains [35] or those dynamically generated at runtime [58].

### Conclusion

In this paper, we present the first attempt to automate the analysis of complex code implemented entirely using ROP. We discuss the challenges of reverse engineering programs that use return-oriented programming and propose a comprehensive framework to dissect, reconstruct, and simplify ROP chains. We tested our framework on the most complex case to date: a persistent ROP rootkit. The proposed framework, ROPMEMU, addresses the lack of methodologies and tools for analyzing increasingly complex ROP payloads.

ROPMEMU combines Volatility plugins and standalone scripts to extract the entire code of both persistent and dynamically generated ROP chains through a novel multipath emulation approach. It simplifies the output traces, extracts the control flow graph, and generates a final binary representing a cleaner version of the original ROP chain. Analysts can then use traditional reverse engineering tools like IDA Pro to operate on this binary. Our experimental results confirm the accuracy and effectiveness of ROPMEMU in analyzing advanced ROP chains.

### References

[1] Apple code signing. https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/Introduction/Introduction.html.
[2] Microsoft Code Signing. https://msdn.microsoft.com/en-us/library/ms537361.aspx.
[3] Microsoft Driver Signing. https://msdn.microsoft.com/en-us/library/windows/hardware/ff544865%28v=vs.85%29.aspx.
[4] Volatility framework: Volatile memory artifact extraction utility framework. http://www.volatilityfoundation.org/.
[5] Aaron Portnoy. Bypassing All Of The Things. https://www.exodusintel.com/files/Aaron Portnoy-Bypassing All Of The Things.pdf.
[6] Aurelien Wailly. nROP. http://aurelien.wail.ly/nrop.
[7] Axel Souchet. rp. https://github.com/0vercl0k/rp.
[8] F. Bellard. Qemu a fast and portable dynamic translator. In Proceedings of the Annual Conference on USENIX Annual Technical Conference. USENIX Association, 2005.
[9] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazières, and D. Boneh. Hacking blind. In Proceedings of the 2014 IEEE Symposium on Security and Privacy, SP ’14, 2014.
[10] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. Jump-oriented programming: A new class of code-reuse attack. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security, ASIACCS ’11, 2011.
[11] E. Bosman and H. Bos. We got signal. a return to portable exploits. In Security & Privacy, 2014.
[12] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When good instructions go bad: Generalizing return-oriented programming to RISC. In P. Syverson and S. Jha, editors, Proceedings of CCS 2008, Oct. 2008.
[13] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham, and M. Winandy. Return-oriented programming without returns. In A. Keromytis and V. Shmatikov, editors, Proceedings of CCS 2010, pages 559–72. ACM Press, Oct. 2010.
[14] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng. Ropecker: A generic and practical approach for defending against ROP attacks. In 21st Annual Network and Distributed System Security Symposium, NDSS 2014, San Diego, California, USA, February 23-26, 2014, 2014.
[15] V. Chipounov, V. Georgescu, C. Zamfir, and G. Candea. Selective symbolic execution. In In Workshop on Hot Topics in Dependable Systems, 2009.
[16] Corelan. Mona. https://github.com/corelan/mona.
[17] Dan Rosenberg. SMEP: What is It, and How to Beat It on Linux. http://vulnfactory.org/blog/2011/06/05/smep-what-is-it-and-how-to-beat-it-on-linux/.
[18] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose. Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection. In 23rd USENIX Security Symposium (USENIX Security 14), pages 401–416, San Diego, CA, Aug. 2014. USENIX Association.
[19] Dino Dai Zovi. Hardware Virtualization Rootkits. https://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Zovi.pdf.
[20] S. Embleton, S. Sparks, and C. Zou. Smm rootkits: A new breed of os independent malware. In Proceedings of the 4th International Conference on Security and Privacy in Communication Networks, SecureComm ’08, 2008.
[21] E. Göktas, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Portokalidis. Size does matter: Why using gadget-chain length to prevent code-reuse attacks is hard. In USENIX Security 2014.
[22] M. Graziano, A. Lanzi, and D. Balzarotti. Hypervisor Memory Forensics. In Symposium on Research in Attacks, Intrusion, and Defenses (RAID), RAID 13. Springer, October 2013.
[23] R. Hund, T. Holz, and F. C. Freiling. Return-oriented rootkits: Bypassing kernel code integrity protection mechanisms. In Proceedings of the 18th Conference on USENIX Security Symposium, 2009.
[24] James T. Bennett - FireEye. The Number of the Beast. https://www.fireeye.com/blog/threat-research/2013/02/the-number-of-the-beast.html.
[25] Jared DeMott - Bromium Labs. Bypassing EMET Transparent rop exploit mitigation using indirect branch tracing. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), Washington, D.C., 2013.
[46] Patrick Stewin and Iurii Bystrov. Understanding DMA Malware. In Proceedings of the 9th Conference on Detection of Intrusions and Malware & Vulnerability Assessment.
[47] M. Polychronakis and A. D. Keromytis. Rop payload detection using speculative code execution. 2013 8th International Conference on Malicious and Unwanted Software: ”The Americas” (MALWARE), 2011.
[48] Rene Freingruber. EMET 5.1 - Armor or Curtain? https://prezi.com/tnqeqis3vhum/zeronights-2014-emet-51-armor-or-curtain/.
[49] sashs. ropper. https://scoding.de/ropper/.
[50] Sebastian Krahmer. x86-64 buffer overflow exploits and the borrowed code chunks exploitation technique. http://users.suse.com/~krahmer/no-nx.pdf.
[51] H. Shacham. The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86). In Proceedings of CCS 2007, 2007.
[52] K. Z. Snow, L. Davi, A. Dmitrienko, C. Liebchen, F. Monrose, and A.-R. Sadeghi. Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization. In IEEE Symposium on Security and Privacy, May 2013.
[53] Solar Designer. Openwall. http://www.openwall.com/linux/README.shtml.
[54] spender. UDEREF. https://grsecurity.net/~spender/uderef.txt.
[55] B. Stancill, K. Z. Snow, N. Otterness, F. Monrose, L. Davi, and A.-R. Sadeghi. Check my profile: Leveraging static analysis for fast and accurate detection of rop gadgets. In 16th Research in Attacks, Intrusions and Defenses (RAID) Symposium, Oct. 2013.
[56] The PaX Team. Pageexec. https://pax.grsecurity.net/docs/pageexec.txt.
[57] The PaX Team. Segmexec. https://pax.grsecurity.net/docs/segmexec.txt.
[58] S. Vogl, J. Pfoh, T. Kittel, and C. Eckert. Persistent data-only malware: Function hooks without code. In Proceedings of the 21th Annual Network & Distributed System Security Symposium (NDSS), Feb. 2014.
[59] Websense Security Labs. Technical Analysis on iPhone Jailbreaking. http://community.websense.com/blogs/securitylabs/archive/2010/08/06/technical-analysis-on-iphone-jailbreaking.aspx.
[60] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray. A Generic Approach to Automatic Deobfuscation of Executable Code. In Proceedings of the IEEE Symposium on Security and Privacy, May 2015.
[26] Jean - Sogeti ESEC Lab. Analysis of the jailbreakme v3 font exploit. http://esec-lab.sogeti.com/posts/2011/07/16/analysis-of-the-jailbreakme-v3-font-exploit.html.
[27] Joanna Rutkowska. Bluepill. http://web.archive.org/web/20080418123748/http://www.bluepillproject.org/.
[28] Joe Damato. A closer look at a recent privilege escalation bug in Linux (CVE-2013-2094). http://timetobleed.com/a-closer-look-at-a-recent-privilege-escalation-bug-in-linux-cve-2013-2094/.
[29] Jonathan Corbet. Supervisor mode access prevention. http://lwn.net/Articles/517475/.
[30] Jonathan Salwan. ROPgadget - Gadgets finder and auto-roper. http://shell-storm.org/project/ROPgadget/.
[31] Kees Cook. Kernel address space layout randomization. http://selinuxproject.org/~jmorris/lss2013 slides/cook kaslr.pdf.
[32] S. T. King, P. M. Chen, Y.-M. Wang, C. Verbowski, H. J. Wang, and J. R. Lorch. Subvirt: Implementing malware with virtual machines. In Proceedings of the 2006 IEEE Symposium on Security and Privacy, Oakland, CA, May 2006.
[33] T. Kittel, S. Vogl, J. Kisch, and C. Eckert. Counteracting data-only malware with code pointer examination. In 18th International Symposium on Research in Attacks, Intrusions and Defenses, Nov. 2015.
[34] T. Kornau. Return oriented programming for the arm architecture. In Master’s Thesis - Ruhr-Universität Bochum, 2009.
[35] K. Lu, D. Zou, W. Wen, and D. Gao. Packed, printable, and polymorphic return-oriented programming. In Recent Advances in Intrusion Detection - 14th International Symposium, RAID 2011.
[36] K. Lu, D. Zou, W. Wen, and D. Gao. derop: Removing return-oriented programming from malware. In Proceedings of the 27th Annual Computer Security Applications Conference, 2011.
[37] Microsoft. Enhanced Mitigation Experience Toolkit. https://technet.microsoft.com/en-us/security/jj653751.
[38] A. Moser, C. Kruegel, and E. Kirda. Exploring multiple execution paths for malware analysis. In Proceedings of the 2007 IEEE Symposium on Security and Privacy, SP ’07, 2007.
[39] Nergal. Advanced return-into-lib(c) exploits. http://phrack.org/issues/58/4.html.
[40] Nguyen Anh Quynh. OptiROP: the art of hunting ROP gadgets. In BlackHat 2013.
[41] Nguyen Anh Quynh and Dang Hoang Vu. Unicorn - The ultimate CPU emulator. http://www.unicorn-engine.org/.
[42] Nicolas Economou - CoreSecurity. Agafi (Advanced Gadget Finder). http://www.coresecurity.com/corelabs-research/publications/agaﬁ-advanced-gadget-ﬁnder.
[43] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda. G-free: defeating return-oriented programming through gadget-less binaries. In Proceedings of the 26th Annual Computer Security Applications Conference (ACSAC), ACSAC ’10, pages 49–58. ACM, December 2010.
[44] pakt. ropc. https://gdtr.wordpress.com/2013/12/13/ropc-turing-complete-rop-compiler-part-1/.
[45] V. Pappas, M. Polychronakis, and A. D. Keromytis.