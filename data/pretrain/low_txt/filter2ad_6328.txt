# Application-Awareness in SDN

**Authors:**
- Zafar Ayyub Qazi, Stony Brook University
- Jeongkeun Lee, HP Labs
- Tao Jin, Qualcomm Research
- Gowtham Bellala, HP Labs
- Manfred Arndt, HP Networking
- Guevara Noubir, Northeastern University

## Abstract
We present Atlas, a framework that integrates application-awareness into Software-Defined Networking (SDN). Currently, SDN is capable of L2/3/4-based policy enforcement but lacks awareness of higher layers. Atlas enables fine-grained, accurate, and scalable application classification in SDN by employing a machine learning (ML) based traffic classification technique, a crowdsourcing approach to obtain ground truth data, and leveraging SDN's data reporting mechanism and centralized control. We prototyped Atlas on HP Labs wireless networks and observed an average accuracy of 94% for the top 40 Android applications.

## Categories and Subject Descriptors
C.2.1 [Network Architecture and Design]

## Keywords
- Software-Defined Networking (SDN)
- Application Awareness

## 1. Introduction
Application recognition is critical for providing visibility, Quality of Service (QoS), billing, and security. In the context of SDN, application-awareness is even more important, particularly for use-cases like network virtualization, which benefit from knowledge of the type of network applications to provide enhanced performance isolation. Current SDN APIs, such as OpenFlow, are capable of Layer 2/3/4 (L2/3/4)-based policy enforcement but lack higher-layer application awareness.

Identifying application names or types from network traffic is challenging. The QoS markings in IP headers are generally untrusted and ignored by network administrators. Port-based classification techniques are no longer accurate due to dynamic port usage (e.g., P2P applications) or transport over HTTP/HTTPS. Deep Packet Inspection (DPI) can be more accurate but incurs high computational costs and requires manual signature maintenance. Moreover, many applications today use end-to-end encryption (e.g., HTTPS, SRTP), making DPI less reliable and signature maintenance difficult or impossible.

Machine Learning (ML) based traffic classification techniques have been used as an alternative to DPI, primarily by ISPs. ML does not require packet payload inspection but instead uses flow-level features such as the sizes of the first 'N' packets, source and destination ports, and IP addresses. This results in lower computational costs and can correctly identify encrypted traffic. However, obtaining accurate and fine-grained ground truth data for training the classifier is a significant challenge. ML-based solutions have so far been limited to coarse-grained classifications such as web, P2P, and VoIP.

Fine-grained application detection is essential for L7-aware SDN. For example, an enterprise network administrator may prefer a specific VoIP application with better security support. To prioritize or block specific applications, the SDN controller must be able to uniquely detect each VoIP application rather than classifying them all into a common VoIP class. While direct API integration with the application server could notify the SDN controller, this is not feasible for all applications, especially new mobile or consumer-oriented ones. The rapid adoption and update cycles of mobile applications further complicate ground-truth data collection.

In addition to ground truth data collection, the application detection capability must be integrated into the SDN framework in a scalable and seamless manner. Our solution, Atlas, addresses these challenges by intelligently employing a crowdsourcing approach and the OpenFlow protocol, optionally with modifications.

## 2. Atlas Framework
To collect fine-grained ground truth data, Atlas uses a crowdsourcing approach, motivated by the fact that many enterprises require employees to deploy device management software agents on their work devices. These agents can collect information about active network sockets, such as netstat logs, belonging to each running application on the device.

The Atlas framework, as prototyped in HP Lab's wireless network, is shown in Figure 1. It uses mobile agents running on employee devices (or dedicated testing devices) to collect netstat logs, which are then sent to the control plane where the ML trainer is run. Flow features, such as the sizes of the first 'N' packets, are collected by the OpenFlow running on the wireless Access Point (AP) and sent to the control plane. The control plane correlates and composes ground truth training data using the netstat logs. We extend the OpenFlow statistics to store the first 'N' packet sizes of each flow and report it to the controller. When such extensions are infeasible, likely due to TCAM resource constraints, we can instrument OpenFlow to mirror the first 'N' packets to the ML trainer.

The trained ML classifier, along with the policy for each application, is installed into the AP. Whenever there is a new flow from 'guest' devices, which do not run the mobile agent, the OpenFlow engine sends the flow features to the ML classifier. The classifier detects the application, and the AP applies the appropriate action to the flow and/or reports flow statistics to the controller.

### Evaluation
We prototyped Atlas in HP Labs' wireless network and implemented a mobile agent for Android OS using only official Android APIs in a user application. We used the open-source c5.0 decision tree ML tool. The mobile agent was deployed on five Android phones: three volunteers and two test devices for manual collection. Manual collection was necessary to gather at least 200 flow samples for each application of interest. We selected the 40 most popular applications in the Google Play Store and aimed to collect enough samples for them. We collected 200 or more flow samples for 30 applications, treating all other detected applications as "Unknown." Over 100K flow samples were collected and labeled from the five devices during a three-week testing period.

Figure 2 shows the classification accuracy (F-measure) for 31 of these application classes in decreasing order of F-measure. F-measure = 1 indicates 100% true positive and 0% false negative. Most applications show over 90% accuracy (average 96%). When testing all 40 popular applications, including those with fewer than 200 flow samples, we observed an average accuracy of 94%. Eight applications, including MS Exchange service, Facebook, Google+, and Twitter, were detected with 100% accuracy. These eight applications constitute around 40% of the entire flows collected from volunteer devices. Many of the remaining applications, with fewer training samples, showed lower accuracies; we expect improved accuracies as more samples are collected. The c5.0 classifier handles 1.4 million flows per second on a 3.3GHz workstation core.

### Demo Scenario
We will demonstrate real-time detection of mobile applications on a wireless AP (or on a middlebox between the AP and the Internet) using our OpenFlow extensions:
1. A new flow statistic for the first 'N' packet sizes.
2. Optionally, a new action, "application recognition," which sends flow features (first 'N' packet sizes, port numbers, IP address range) to the ML classifier as soon as the packet counter hits N.

## 3. Conclusion
To the best of our knowledge, Atlas is the first work to demonstrate fine-grained mobile application detection. We designed an automated data consolidation and classifier generation logic, significantly minimizing the manual effort required to maintain and scale the application classification solution. Our framework leverages the OpenFlow protocol and automates the data collection and application detection process to incorporate L7-awareness into SDN. Ongoing and future work includes implementations on different device platforms (iOS, Windows, Linux) and detecting flows belonging to new applications not part of the trained classifier.

## 4. References
[1] HP and Microsoft Demo OpenFlow-Lync Applications-optimized Network. http://tinyurl.com/avjjg8o.
[2] H. Kim et al. Internet Traffic Classification Demystified: Myths, Caveats, and the Best Practices. In ACM CoNEXT, 2008.
[3] N. Williams et al. Real Time Traffic Classification and Prioritisation on a Home Router using DIFFUSE. In CAIA Technical Report 120412A, 2011.