### Defining an Enumerator for the Tree Class Using an Iterator

**Summary**
- Quick Reference

### Chapter 20: Decoupling Application Logic and Handling Events
- **Understanding Delegates**
  - Examples of Delegates in the .NET Framework Class Library
  - The Automated Factory Scenario
    - Implementing the Factory Control System Without Using Delegates
    - Implementing the Factory by Using a Delegate
  - Declaring and Using Delegates
  - Lambda Expressions and Delegates
  - Creating a Method Adapter
- **Enabling Notifications by Using Events**
  - Declaring an Event
  - Subscribing to an Event
  - Unsubscribing from an Event
  - Raising an Event
  - Understanding User Interface Events
  - Using Events
- Summary
- Quick Reference

### Chapter 21: Querying In-Memory Data Using Query Expressions
- **What is LINQ?**
- **Using LINQ in a C# Application**
  - Selecting Data
  - Filtering Data
  - Ordering, Grouping, and Aggregating Data
  - Joining Data
  - Using Query Operators
  - Querying Data in Tree Objects
  - LINQ and Deferred Evaluation
- Summary
- Quick Reference

### Chapter 22: Operator Overloading
- **Understanding Operators**
  - Operator Constraints
  - Overloaded Operators
  - Creating Symmetric Operators
  - Understanding Compound Assignment Evaluation
  - Declaring Increment and Decrement Operators
  - Comparing Operators in Structures and Classes
  - Defining Operator Pairs
  - Implementing Operators
  - Understanding Conversion Operators
  - Providing Built-in Conversions
  - Implementing User-Defined Conversion Operators
  - Creating Symmetric Operators, Revisited
  - Writing Conversion Operators
- Summary
- Quick Reference

### Part IV: Building Universal Windows Platform Applications with C#
- **Chapter 23: Improving Throughput by Using Tasks**
  - Why Perform Multitasking Using Parallel Processing?
  - The Rise of the Multicore Processor
  - Implementing Multitasking Using the Microsoft .NET Framework
  - Tasks, Threads, and the ThreadPool
  - Creating, Running, and Controlling Tasks
  - Using the Task Class to Implement Parallelism
  - Abstracting Tasks Using the Parallel Class
  - When Not to Use the Parallel Class
  - Canceling Tasks and Handling Exceptions
  - The Mechanics of Cooperative Cancellation
  - Using Continuations with Canceled and Faulted Tasks
- Summary
- Quick Reference

- **Chapter 24: Improving Response Time by Performing Asynchronous Operations**
  - Implementing Asynchronous Methods
    - Defining Asynchronous Methods: The Problem
    - Defining Asynchronous Methods: The Solution
    - Defining Asynchronous Methods That Return Values
    - Asynchronous Method Gotchas
    - Asynchronous Methods and the Windows Runtime APIs
    - Tasks, Memory Allocation, and Efficiency
    - Using PLINQ to Parallelize Declarative Data Access
    - Using PLINQ to Improve Performance While Iterating Through a Collection
    - Canceling a PLINQ Query
    - Synchronizing Concurrent Access to Data
    - Locking Data
    - Synchronization Primitives for Coordinating Tasks
    - Canceling Synchronization
    - The Concurrent Collection Classes
    - Using a Concurrent Collection and a Lock to Implement Thread-Safe Data Access
- Summary
- Quick Reference

- **Chapter 25: Implementing the User Interface for a Universal Windows Platform App**
  - Features of a Universal Windows Platform App
  - Using the Blank App Template to Build a Universal Windows Platform App
  - Implementing a Scalable User Interface
  - Applying Styles to a UI
- Summary
- Quick Reference

- **Chapter 26: Displaying and Searching for Data in a Universal Windows Platform App**
  - Implementing the Model–View–ViewModel Pattern
  - Displaying Data Using Data Binding
  - Modifying Data Using Data Binding
  - Using Data Binding with a ComboBox Control
  - Creating a ViewModel
  - Adding Commands to a ViewModel
  - Searching for Data Using Cortana
  - Providing a Vocal Response to Voice Commands
- Summary
- Quick Reference

- **Chapter 27: Accessing a Remote Database from a Universal Windows Platform App**
  - Retrieving Data from a Database
  - Creating an Entity Model
  - Creating and Using a REST Web Service
  - Inserting, Updating, and Deleting Data Through a REST Web Service
  - Reporting Errors and Updating the UI
- Summary
- Quick Reference

### Index
- Acknowledgments
- About the Author
- Introduction
- Who Should Read This Book
- Who Should Not Read This Book
- Organization of This Book
- Finding Your Best Starting Point in This Book
- Referencing the Book After Working Through the Exercises
- Conventions and Features in This Book
- System Requirements
- Code Samples
- Installing the Code Samples
- Using the Code Samples

---

This version of the text is more structured and organized, making it easier to read and navigate. Each chapter and section is clearly delineated, and the content is presented in a logical and coherent manner.