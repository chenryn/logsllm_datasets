### DR. CHECKER: A Comprehensive Static Analysis Tool for Linux Kernel Drivers

DR. CHECKER is a powerful static analysis tool capable of performing general context-, path-, and flow-sensitive points-to and taint analysis. It leverages well-known static analysis techniques and employs a soundy approach, which ensures the delivery of precise results without completely sacrificing soundness. The modular design of DR. CHECKER allows both the analysis components and bug detectors to be easily adapted for real-world bug finding.

During the development of this paper, we identified a new class of bugs and were able to quickly enhance DR. CHECKER to detect them. This resulted in the discovery of 63 zero-day bugs. In total, DR. CHECKER has uncovered 158 previously undiscovered zero-day bugs in nine popular mobile Linux kernels. Detailed information and disclosures for these bugs are available online at [github.com/ucsb-seclab/dr_checker](https://github.com/ucsb-seclab/dr_checker).

While these results are promising, DR. CHECKER still faces challenges related to over-approximation due to its soundy nature. We have identified areas for future work to address these limitations. Nonetheless, DR. CHECKER underscores the importance of analyzing Linux kernel drivers and provides a robust framework for handling the complexity of this code.

---

**Acknowledgements**

We would like to thank the anonymous reviewers and our shepherd, Stelios Sidiroglou-Douskos, for their valuable comments and input, which significantly improved our paper. This research was supported by the Office of Naval Research under grant number N00014-15-1-2948 and by DARPA under agreement number FA8750-15-2-0084. The U.S. Government is authorized to reproduce and distribute reprints for governmental purposes, notwithstanding any copyright notation. This work was also sponsored by a gift from Google’s Anti-Abuse group.

The views and conclusions expressed in this document are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements, either expressed or implied, of DARPA or the U.S. Government.

---

**References**

[1] Imagemagick: Convert different image formats. https://github.com/ImageMagick/ImageMagick. Accessed: 2017-05-26.

[2] Kernel modules. http://tldp.org/LDP/lkmpg/2.6/html/x427.html. Accessed: 2017-05-26.

[3] The Linux watchdog timer driver core kernel API. https://www.kernel.org/doc/Documentation/watchdog/watchdog-kernel-api.txt. Accessed: 2017-02-14.

[4] CVE-2016-2068. Available from MITRE, CVE-ID CVE-2016-2068., 2016.

[5] CVE-2016-5195. Available from MITRE, CVE-ID CVE-2016-5195., May 2016.

[6] CVE-2016-8433. Available from MITRE, CVE-ID CVE-2016-8433., May 2016.

[7] CVE-2016-8448. Available from MITRE, CVE-ID CVE-2016-8448., May 2016.

[8] CVE-2016-8470. Available from MITRE, CVE-ID CVE-2016-8470., May 2016.

[9] CVE-2016-8471. Available from MITRE, CVE-ID CVE-2016-8471., May 2016.

[10] CVE-2016-8472. Available from MITRE, CVE-ID CVE-2016-8472., May 2016.

[11] AUBERT, J., AND TUSET, D. c2xml. http://c2xml.sourceforge.net/.

[12] BALL, T., BOUNIMOVA, E., COOK, B., LEVIN, V., LICHTENBERG, J., MCGARVEY, C., ONDRUSEK, B., RAJAMANI, S. K., AND USTUNER, A. Thorough static analysis of device drivers. ACM SIGOPS Operating Systems Review 40, 4 (2006), 73–85.

[13] BALL, T., AND RAJAMANI, S. K. The SLAM project: Debugging system software via static analysis. In Proceedings of the 2002 ACM Symposium on Principles of Programming Languages (New York, NY, USA, 2002), POPL '02, ACM, pp. 1–3.

[14] BESSEY, A., BLOCK, K., CHELF, B., CHOU, A., FULTON, B., HALLEM, S., HENRI-GROS, C., KAMSKY, A., MCPEAK, S., AND ENGLER, D. A few billion lines of code later: Using static analysis to find bugs in the real world. Commun. ACM 53, 2 (Feb. 2010), 66–75.

[15] BOYD-WICKIZER, S., AND ZELDOVICH, N. Tolerating malicious device drivers in Linux. In Proceedings of the 2010 USENIX Annual Technical Conference (Berkeley, CA, USA, 2010), USENIXATC'10, USENIX Association, pp. 9–9.

[16] BUGRARA, S., AND AIKEN, A. Verifying the safety of user pointer dereferences. In Proceedings of the 2008 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2008), SP '08, IEEE Computer Society, pp. 325–338.

[17] CHEN, H., MAO, Y., WANG, X., ZHOU, D., ZELDOVICH, N., AND KAASHOEK, M. F. Linux kernel vulnerabilities: State-of-the-art defenses and open problems. In Proceedings of the 2011 Asia-Pacific Workshop on Systems (New York, NY, USA, 2011), APSys '11, ACM, pp. 5:1–5:5.

[18] CHEN, H., AND WAGNER, D. MOPS: An infrastructure for examining security properties of software. In Proceedings of the 2002 ACM Conference on Computer and Communications Security (New York, NY, USA, 2002), CCS '02, ACM, pp. 235–244.

[19] CHOU, A., YANG, J., CHELF, B., HALLEM, S., AND ENGLER, D. An empirical study of operating systems errors. In Proceedings of the 2001 ACM Symposium on Operating Systems Principles (New York, NY, USA, 2001), SOSP '01, ACM, pp. 73–88.

[20] CORBET, J., RUBINI, A., AND KROAH-HARTMAN, G. "Linux Device Drivers: Where the Kernel Meets the Hardware." O’Reilly Media, Inc., 2005.

[21] CYTRON, R., FERRANTE, J., ROSEN, B. K., WEGMAN, M. N., AND ZADECK, F. K. An efficient method of computing static single assignment form. In Proceedings of the 1989 ACM Symposium on Principles of Programming Languages (New York, NY, USA, 1989), POPL '89, ACM, pp. 25–35.

[22] DAS, M., LERNER, S., AND SEIGLE, M. ESP: Path-sensitive program verification in polynomial time. In Proceedings of the 2002 ACM Conference on Programming Language Design and Implementation (New York, NY, USA, 2002), PLDI '02, ACM, pp. 57–68.

[23] DINABURG, A., ROYAL, P., SHARIF, M., AND LEE, W. Ether: Malware analysis via hardware virtualization extensions. In Proceedings of the 2008 ACM Conference on Computer and Communications Security (New York, NY, USA, 2008), CCS '08, ACM, pp. 51–62.

[24] FOSTER, J. S., TERAUCHI, T., AND AIKEN, A. Flow-sensitive type qualifiers. In Proceedings of the 2002 ACM Conference on Programming Language Design and Implementation (New York, NY, USA, 2002), PLDI '02, ACM, pp. 1–12.

[25] GE, X., VIJAYAKUMAR, H., AND JAEGER, T. Sprobes: Enforcing kernel code integrity on the TrustZone architecture. arXiv preprint arXiv:1410.7747 (2014).

[26] GUO, P. J., AND ENGLER, D. Linux kernel developer responses to static analysis bug reports. In Proceedings of the 2009 USENIX Annual Technical Conference (Berkeley, CA, USA, 2009), USENIXATC'09, USENIX Association, pp. 22–22.

[27] HENZINGER, T. A., JHALA, R., MAJUMDAR, R., AND SUTRE, G. Software verification with BLAST. In Proceedings of the 2003 International Conference on Model Checking Software (Berlin, Heidelberg, 2003), SPIN'03, Springer-Verlag, pp. 235–239.

[28] JOHNSON, R., AND WAGNER, D. Finding user/kernel pointer bugs with type inference. In Proceedings of the 2004 USENIX Conference on Security (Berkeley, CA, USA, 2004), SEC'04, USENIX Association, pp. 9–9.

[29] KIRAT, D., VIGNA, G., AND KRUEGEL, C. BareCloud: Bare-metal analysis-based evasive malware detection. In Proceedings of the 2014 USENIX Conference on Security (Berkeley, CA, USA, 2014), SEC'14, USENIX Association, pp. 287–301.

[30] LATTNER, C., AND ADVE, V. LLVM: A compilation framework for lifelong program analysis & transformation. In Proceedings of the 2004 International Symposium on Code Generation and Optimization (Washington, DC, USA, 2004), CGO '04, IEEE Computer Society, pp. 75–.

[31] LIVSHITZ, B. Soundness is not even necessary for most modern analysis applications, however, as many. Communications of the ACM 58, 2 (2015).

[32] LU, K., SONG, C., KIM, T., AND LEE, W. UniSan: Proactive kernel memory initialization to eliminate data leakages. In Proceedings of the 2016 ACM Conference on Computer and Communications Security (New York, NY, USA, 2016), CCS '16, ACM, pp. 920–932.

[33] MACHIRY, A., GUSTAFSON, E., SPENSKY, C., SALLS, C., STEPHENS, N., WANG, R., BIANCHI, A., CHOE, Y. R., KRUEGEL, C., AND VIGNA, G. Boomerang: Exploiting the semantic gap in trusted execution environments. In Proceedings of the 2017 Network and Distributed System Security Symposium (NDSS) (2017), Internet Society.

[34] MARJAMÄKI, D. Cppcheck: A tool for static C/C++ code analysis. http://cppcheck.sourceforge.net/, December 2016.

[35] MOCHEL, P., AND MURPHY, M. sysfs - The filesystem for exporting kernel objects. https://www.kernel.org/doc/Documentation/filesystems/sysfs.txt.

[36] MUTILIN, V., NOVIKOV, E., STRAKHAV, K. A., AND SHVED, P. Linux driver verification [Linux driver verification architecture]. Trudy ISP RN [The Proceedings of ISP RAS] 20 (2011), 163–187.

[37] NEIRA-AYUSO, P., GASCA, R. M., AND LEFEVRE, L. Communicating between the kernel and user-space in Linux using Netlink sockets. Software: Practice and Experience 40, 9 (2010), 797–810.

[38] NIELSON, F., NIELSON, H. R., AND HANKIN, C. Principles of Program Analysis. Springer, 2015.

[39] PALIX, N., THOMAS, G., SAHA, S., CALVÈS, C., LAWALL, J., AND MULLER, G. Faults in Linux: Ten years later. In Proceedings of the 2011 International Conference on Architectural Support for Programming Languages and Operating Systems (New York, NY, USA, 2011), ASPLOS'11, ACM, pp. 305–318.

[40] PEIRÓ, S., MUÑOZ, M., MASMANO, M., AND CRESPO, A. Detecting stack-based kernel information leaks. In Proceedings of the 2014 International Joint Conference SOCO'14-CISIS'14-ICEUTE'14 (2014), Springer, pp. 321–331.

[41] PERL, H., DECHAND, S., SMITH, M., ARP, D., YAMAGUCHI, F., RIECK, K., FAHL, S., AND ACAR, Y. VCCFinder: Finding potential vulnerabilities in open-source projects to assist code audits. In Proceedings of the 2015 ACM Conference on Computer and Communications Security (New York, NY, USA, 2015), CCS '15, ACM, pp. 426–437.

[42] QUINTÃO PEREIRA, F. M., RODRIGUES, R. E., AND SPERLE CAMPOS, V. H. A fast and low-overhead technique to secure programs against integer overflows. In Proceedings of the 2013 International Symposium on Code Generation and Optimization (Washington, DC, USA, 2013), CGO '13, IEEE Computer Society, pp. 1–11.

[43] RENZELMANN, M. J., KADAV, A., AND SWIFT, M. M. SymDrive: Testing drivers without devices. In Proceedings of the 2012 USENIX Conference on Operating Systems Design and Implementation (Berkeley, CA, USA, 2012), OSDI'12, USENIX Association, pp. 279–292.

[44] SALZMAN, P. J., BURIAN, M., AND POMERANTZ, O. Hello World (part 3): The init and exit Macros. http://www.tldp.org/LDP/lkmpg/2.6/html/lkmpg.html#AEN245, May 2007.

[45] SECURE SOFTWARE, I. RATS: Rough Auditing Tool for Security. https://github.com/andrew-d/rats, December 2013.

[46] SPENSKY, C., HU, H., AND LEACH, K. Lo-Phi: Low-observable physical host instrumentation for malware analysis. In Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS) (2016), Internet Society.

[47] SPENSKY, C., STEWART, J., YERUKHIMOVICH, A., SHAY, R., TRACHTENBERG, A., HOUSLEY, R., AND CUNNINGHAM, R. K. SoK: Privacy on Mobile Devices–It's Complicated. Proceedings on Privacy Enhancing Technologies 2016, 3 (2016), 96–116.

[48] STOEP, J. V. Android: Protecting the kernel. Linux Security Summit (August 2016).

[49] SWIFT, M. M., BERSHAD, B. N., AND LEVY, H. M. Improving the reliability of commodity operating systems. In Proceedings of the 2003 ACM Symposium on Operating Systems Principles (New York, NY, USA, 2003), SOSP '03, ACM, pp. 207–222.

[50] TARJAN, R. Depth-first search and linear graph algorithms. SIAM Journal on Computing 1, 2 (1972), 146–160.

[51] THE CLANG PROJECT. Clang: A C language family frontend for LLVM. http://clang.llvm.org/.

[52] THE LINUX FOUNDATION. LLVMLinux Project Overview. http://llvm.linuxfoundation.org/index.php/Main_Page.

[53] THE LLVM PROJECT. The Often Misunderstood GEP Instruction. http://llvm.org/docs/GetElementPtr.html.

[54] TORVALDS, L., TRIPLETT, J., AND LI, C. Sparse–a semantic parser for C. see http://sparse.wiki.kernel.org (2007).

[55] VIEGA, J., BLOCH, J. T., KOHNO, Y., AND MCGRAW, G. ITS4: A static vulnerability scanner for C and C++ code. In Proceedings of the 2000 Annual Computer Security Applications Conference (Washington, DC, USA, 2000), ACSAC '00, IEEE Computer Society, pp. 257–.

[56] WANG, X., CHEN, H., JIA, Z., ZELDOVICH, N., AND KAASHOEK, M. F. Improving integer security for systems with KINT. In Proceedings of the 2012 USENIX Conference on Operating Systems Design and Implementation (Berkeley, CA, USA, 2012), OSDI'12, USENIX Association, pp. 163–177.

[57] WHEELER, D. A. Flawfinder, 2011.

[58] WRESSNEGGER, C., YAMAGUCHI, F., MAIER, A., AND RIECK, K. Twice the bits, twice the trouble: Vulnerabilities induced by migrating to 64-bit platforms. In Proceedings of the 2016 ACM Conference on Computer and Communications Security (New York, NY, USA, 2016), CCS '16, ACM, pp. 541–552.

[59] YAMAGUCHI, F., GOLDE, N., ARP, D., AND RIECK, K. Modeling and discovering vulnerabilities with code property graphs. In Proceedings of the 2014 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2014), SP '14, IEEE Computer Society, pp. 590–604.

[60] YAMAGUCHI, F., LOTTMANN, M., AND RIECK, K. Generalized vulnerability extrapolation using abstract syntax trees. In Proceedings of the 2012 Annual Computer Security Applications Conference (New York, NY, USA, 2012), ACSAC '12, ACM, pp. 359–368.

[61] YAMAGUCHI, F., MAIER, A., GASCON, H., AND RIECK, K. Automatic inference of search patterns for taint-style vulnerabilities. In Proceedings of the 2015 IEEE Symposium on Security and Privacy (Washington, DC, USA, 2015), SP '15, IEEE Computer Society, pp. 797–812.

[62] YAMAGUCHI, F., WRESSNEGGER, C., GASCON, H., AND RIECK, K. Chucky: Exposing missing checks in source code for vulnerability discovery. In Proceedings of the 2013 ACM Conference on Computer and Communications Security (New York, NY, USA, 2013), CCS '13, ACM, pp. 499–510.

[63] YANG, J., KREMENEK, T., XIE, Y., AND ENGLER, D. MECA: An extensible, expressive system and language for statically checking security properties. In Proceedings of the 2003 ACM Conference on Computer and Communications Security (New York, NY, USA, 2003), CCS '03, ACM, pp. 321–334.

[64] YUN, I., MIN, C., SI, X., JANG, Y., KIM, T., AND NAIK, M. APISan: Sanitizing API usages through semantic cross-checking. In Proceedings of the 2016 USENIX Conference on Security, SEC'16, USENIX Association, pp. 363–378.

[65] ZAKHAROV, I. S., MANDRYKIN, M. U., MUTILIN, V. S., NOVIKOV, E. M., PETRENKO, A. K., AND KHOROSHILOV, A. V. Configurable toolset for static verification of operating systems kernel modules. Program. Comput. Softw. 41, 1 (Jan. 2015), 49–64.

[66] ZHANG, H., LI, X.-H., LIU, B., AND QIAN, X. The video device driver programming and profiting based on V4L2. Computer Knowledge and Technology 15 (2010), 062.

---

**USENIX Association**
26th USENIX Security Symposium
1024