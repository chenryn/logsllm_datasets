# Performance and Security Analysis of SaferNode.js

## Introduction
This document presents the performance and security analysis of SaferNode.js, a safer version of Node.js. The analysis includes micro-benchmarks, macro-benchmarks, and an evaluation of the porting effort required to adopt the safe API.

## Micro-Benchmarks
### Benchmark Suite
- **Buffer benchmark suite**: 304 tests, 50 runs each.
- **HTTP benchmark suite**: 182 tests, 10 runs each.

### Results
- **Figure 3** shows the speed of SaferNode.js normalized to Node.js on a subset of the Node.js benchmarking suite [69] (§5.3). Each dot represents one benchmark from the suite; results are sorted from slowest to fastest. SaferNode.js’s speed ranges from approximately 89% to 105% of Node.js’s speed.

### Example: `echo_safeAPI`
```cpp
void echo_safeAPI(const FunctionCallbackInfo& args) {
    return safeV8::With(args->GetIsolate(), args[0])
        .onVal([&](Local<ret>) {
            args.GetReturnValue().Set(ret);
        })
        .onFail([&](Local<exception>) {
            // handle error
        });
}
```

- **Performance Comparison**:
  - `echo_safeAPI` executes 12% more slowly than `echo_nocheck`.
  - This is close to SaferNode.js’s worst-case overhead in the benchmarks.
  - Both `echo_safeAPI` and `echo_check` check the type of their argument, showing no significant performance difference (less than 1%).

## Macro-Benchmark
### Express.js Web Framework
- **Benchmark Setup**: We measured the performance of the popular express.js web framework [95] by comparing the performance of Node.js and SaferNode.js using express.js’s speed benchmark [31].
- **Tool Used**: The wrk web server stress testing tool, running 8 concurrent threads and 50 open connections.
- **Results**: Node.js and SaferNode.js performance was within 1%, each serving about 15,000 requests/second.

## Porting Effort
### Tool for Automatic Rewriting
- **Purpose**: To assist programmers in rewriting unsafe patterns.
- **Functionality**: The tool identifies top-level binding functions exposed to JavaScript and rewrites:
  - Hard-crashing CHECK calls.
  - Casts using As with no preceding IsType check.
  - Calls to Get, Set, and ToString.
- **Implementation**: The tool comprises about 7,500 lines of Java and is conservative, only rewriting code that is easy to reason about.

### Results
- **Node.js 7.0.0**:
  - Manually counted 378 functions with the required type signature.
  - The tool flagged 371 of them.
  - 201 did not need to be rewritten.
  - 35 used gotos or similar patterns that the tool cannot handle.
  - The tool rewrote the remaining 135 functions, requiring manual intervention in two cases (about 30 lines of code total).
- **Sanity Check**: Running CITGM (the regression suite) and the full Node.js benchmarks on the rewritten code showed it was fully functional with a performance overhead roughly commensurate with the results in Figure 3.

### Porting Burden
- **Buffer Module**: Adding about 1000 lines of code to `node_buffer.cc` (originally 1300 lines).
- **HTTP Module**: Adding about 150 lines of code to `node_http_parser.cc` (originally 800 lines).

## Related Work
### Finding Binding Bugs
- **Dynamic Checking**: Jinn [55] generates dynamic bug checkers for arbitrary languages from state machine descriptions of FFI rules.
- **Translation to Common IR**: Several groups have translated multi-language programs into a common intermediate language and applied off-the-shelf analysis tools [9, 54, 58, 100].
- **Crash-Safety Bugs**: Kondoh, Tan, and Li present static analysis techniques for finding bugs caused by mishandled exceptions in Java JNI code [52, 56, 99].
- **Type-Safety Bugs**: Tan and Croft find type safety bugs resulting from exposing C pointers to Java as integers [99].
- **Memory-Safety Bugs**: Li and Tan present a static analysis tool that detects reference counting bugs in Python/C interface code [57].

### Avoiding Binding Bugs by Construction
- **Formal Models**: Projects develop formal models for JavaScript, multi-language systems, and FFIs [53, 59, 61, 98, 104].
- **Language Design**: Janet [7] and Jeannie [44] allow combining Java and C code in a single file. Safe-JNI [101] provides a safe Java/C interface using CCured [65].
- **Safe Linking**: Ahmed et al. [3, 78] aim to address the problem of safely composing multi-language programs by separately compiling components into a gradually typed target language and then linking the results.

### Tolerating Binding Bugs
- **Language-Level Isolation**: Running different languages’ runtimes in isolated environments, such as Klinkoff et al. [49] for the .NET framework and Robusta [87] for Java.
- **Browser-Level Isolation**: Redesigning the browser to run iframes in separate processes, as seen in Chrome’s ongoing efforts [22] and research browsers like Gazelle [107], IBOS [102], and Quark [47].

## Acknowledgements
We thank the anonymous reviewers and our shepherd, Nikhil Swamy, for many insightful comments and for pointing out a bug in an early version of this paper. Special thanks to Úlfar Erlingsson and Bryan Parno for their accommodations, and to Thomas Sepez for helping us understand the PDFium attacker model and confirming and fixing some of our bugs. We also appreciate the useful discussions with Bryan Eglish, Colin Ihrig, Devon Rifkin, Sam Roberts, Rod Vagg, and Brian White on Node.js’s attacker model and for incorporating our feedback on improving the runtime’s safety and security. Additionally, we thank Colin Ihrig and Timothy Gu for promptly fixing many of our Node.js bugs, and Adrienne Porter Felt, Joel Weinberger, Lei Zhang, Nasko Oskov, and Devlin Cronin for explaining the security model for Chrome extensions. Finally, we thank Hovav Shacham, David Kohlbrenner, and Joe Politz for fruitful discussions, and Sergio Benitez and Andres Nötzli for help, comments, and formatting magic. Mary Jane Swenson made everything easier. This work was supported by NSF Grant CNS-1514435 and an NSF Fellowship.

## References
[1] F. Aboukhadijeh. Buffer(number) is unsafe. https://github.com/nodejs/node/issues/4660.
[2] B. Adida, A. Barth, and C. Jackson. Rootkits for JavaScript environments. In WOOT, Aug. 2009.
[3] A. Ahmed. Verified compilers for a multi-language world. In Summit on Advances in Programming Languages, SNAPL 2015, May 2015.
[4] A. Barth, A. P. Felt, P. Saxena, and A. Boodman. Protecting browsers from extension vulnerabilities. In NDSS, Feb. 2010.
[5] F. Brown, S. Narayan, R. S. Wahby, D. Engler, R. Jhala, and D. Stefan. Finding and preventing bugs in JavaScript bindings: Extended version. https://bindings.programming.systems.
[6] F. Brown, A. Nötzli, and D. Engler. How to build static checking systems using orders of magnitude less code. In ASPLOS, Apr. 2016.
[7] M. Bubak, D. Kurzyniec, and P. Luszczek. Creating Java to native code interfaces with Janet extension. In Worldwide SGI Usersâ ˘A ´Z Conference, Oct. 2000.
[8] E. Budianto, R. Chow, J. Ding, and M. McCool. Language-based hypervisors. In CANS, Nov. 2016.
[9] C. Cadar, D. Dunbar, and D. R. Engler. KLEE: Unassisted and automatic generation of high-coverage tests for complex systems programs. In OSDI, Dec. 2008.
[10] caja. Caja. https://developers.google.com/caja/.
[11] P. Carbonnelle. PopularitY of Programming Language. http://pypl.github.io/PYPL.html.
[12] chakraCore. Microsoft chakracore. https://github.com/Microsoft/ChakraCore.
[13] checkerChromeVersion. Chromium version 56.0.2915.0.