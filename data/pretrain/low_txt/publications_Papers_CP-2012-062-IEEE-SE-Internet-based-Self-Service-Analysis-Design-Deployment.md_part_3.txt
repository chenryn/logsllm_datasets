### Improvement: Using BPMN Annotation Elements for MVC Generation

BPMN (Business Process Model and Notation) annotation elements can be used to encode domain-specific information, which is valuable when generating the MVC (Model-View-Controller) components. In our running example, the MVC for Services is structured according to the blueprint’s segments, including customer actions, on-stage employee actions, back-stage employee actions, and support processes.

### B. Service Description Using USDL

The Unified Service Description Language (USDL2) [22] was developed to describe various types of services, ranging from professional to electronic services. The specification is designed for Internet-based self-service implementations, organized according to the MVC pattern. These implementations are automatically generated using Model-Driven Development (MDD) and stored in a service archive that contains PaaS (Platform as a Service) dependent deployment information.

The MVC model is derived from the ER (Entity-Relationship) model developed during the service design phase. In this phase, a SQL physical model is created. We explored the applicability of Enterprise Architect 9.1 and MySQL Workbench 5.2 to design and export the ER model to XML. Subsequently, XSLT was used to extract table and attribute names from the XML document. These names were then passed to Heroku, and using the `scaffold` command, tables with attributes were created automatically in the database. For example, the command `rails generate scaffold Incident name:string priority:string description:text` was used to create a table named 'Incident' with three attributes: 'name', 'priority', and 'description'. Other Heroku commands, such as `belongs_to` and `has_many`, were used to model relationships and associations between tables.

The views, coded in HTML, are generated from the information obtained from the service blueprint (each human task originates a view, and roles determine access privileges to views), low-fidelity prototypes of user interfaces (a UI model is created for each view), and the USDL specification (information on Quality of Service (QoS) and legal constraints is obtained). The ISS developer can modify the generated views or create new ones using a 'green field' approach. Finally, our approach generates software code (e.g., Ruby or PHP) that constitutes the MVC's controller, the middle component between the models and the views.

### VIII. Achievements and Lessons Learned

Our initial goal was to analyze, design, convert into code, and deploy the ITIL IMS (Information Management System) from our use case to a PaaS. All model transformations and deployments needed to be achieved with minimal effort, as close as possible to a "double-click" paradigm. This goal was accomplished, as only minor manual adjustments to the MVC views and some "hard-wiring" to the controllers and models were required.

The use case provided several insights into the future development of Internet-based self-services. The main lesson learned is that using the proposed SEASIDE systematic methodology results in a faster, simpler, and more structured approach to service development. Key lessons include:

1. **Multi-Dimensional Modeling**: Using only one modeling dimension was insufficient for developing an ISS. Therefore, an EA (Enterprise Architecture) was used to provide five dimensions (data, function, location, time, and motivation), which were crucial to consider.
2. **Zachman Framework**: The Zachman framework enabled the specification of services with domain-specific languages, facilitating the use of small, manageable languages.
3. **Model-Driven Development (MDD)**: MDD provided formal, high-level models that were readable by service domain experts and business owners, eliminating the need for them to deal with IT and technology.
4. **Service Blueprinting**: Externalizing service blueprinting to model the behavior of ISS, instead of hard-wiring processes into code, increased stakeholders' understandability.
5. **Compliance Enforcement**: MDD and MVC enabled the checking and enforcement of compliance, ensuring that ISS applications adhered to the service architecture.
6. **Methodology Applicability**: While the methodology was used to create an Internet-based self-service for the IMS, it can be applied to other types of services as well.

### VII. Service Deployment Using PaaS

To deploy the service archive, our approach relied on the use of a Platform as a Service (PaaS). A PaaS provides an Internet-based software delivery platform for multi-tenant, web-based applications hosted on the provider’s infrastructure, reducing costs and increasing scalability. The service archive, containing our MVC for Services and deployment information extracted from the network graph of the service architecture, was deployed to the PaaS. The PaaS provides access to an abstract middleware infrastructure where the generated ISS code is uploaded by the PaaS provider.

In our experiment to deploy our ITIL ISS, we selected the Heroku platform [3]—a provider that emphasizes ease of use, automation, and reliability for web applications—since it supported Ruby on Rails, a popular programming framework focused on simplicity and productivity. This language significantly reduced both the number of lines of code and the development time of our ISS compared to other languages like Java. The following commands were used to deploy the ISS:

1. `$ heroku create --stack cedar`
2. `$ git init # Initialize the code repository`
3. `$ git commit ... # Several commits were made`
4. `$ git push heroku master`

### IX. Conclusion

This research resulted in a systematic service development methodology called SEASIDE, designed to create Internet-based self-services. Results indicate that the approach is suitable for the 'massification' of services, as it reduces development complexity and costs, and shortens the time to market. The insights gained demonstrated the applicability of integrating EA, MDD, MVC, and PaaS to support a systematic and step-by-step guidance for ISS development. The use of an enterprise architecture required its adaptation to a simpler model, which proved intuitive and powerful for ISS stakeholders. The separation of ISS models from the code using MDD enabled stakeholders with no programming skills to participate in the ISS development process. Manual adjustments to the code were always necessary but had a minimal impact on development time. The creation of the MVC for Service pattern resulted in a lower cognitive load for developers, as it was organized according to a structure that closely resembled the elements of a service blueprint. The use of a PaaS approach to deploy ISS was surprisingly fast and simple, as our MVC for Services was deployed in the 'cloud' using a small set of instructions, enabling transparent scalability.

### References

[1] F. Curbera, M. Duftler, R. Khalaf, W. Nagy, N. Mukhi, and S. Weerawarana, “Unraveling the Web services web: an introduction to SOAP, WSDL, and UDDI,” IEEE Internet Computing, vol. 6, no. 2, pp. 86–93, Mar/Apr 2002.

[2] T. Erl, Service-Oriented Architecture: Concepts, Technology, and Design. Upper Saddle River, NJ, USA: Prentice Hall, 2005.

[3] K. Balasubramanian, A. Gokhale, G. Karsai, J. Sztipanovits, and S. Neema, “Developing applications using model-driven design environments,” Computer, vol. 39, no. 2, pp. 33–40, Feb. 2006.

[4] R. France and B. Rumpe, “Model-driven development of complex software: A research roadmap,” in Proceedings of the 2007 Future of Software Engineering. Washington, DC, USA: IEEE Computer Society, 2007, pp. 37–54.

[5] J. Cardoso and C. Bussler, “Mapping between heterogeneous XML and OWL transaction representations in B2B integration,” Data & Knowledge Engineering, vol. 70, no. 12, pp. 1046–1069, 2011.

[6] V. A. Zeithaml, M. J. Bitner, and D. D. Gremler, Services Marketing: Integrating Customer Focus Across the Firm. McGraw-Hill, 2008.

[7] J. O. Thomas, Y. A. Rankin, and N. Boyette, “Self-service technologies: Eliminating pain points of traditional call centers,” in Proceedings of the Symposium on Computer Human Interaction for the Management of Information Technology. New York, NY, USA: ACM, 2009, pp. 9:60–9:63.

[8] M. L. Meuter, A. L. Ostrom, R. I. Roundtree, and M. J. Bitner, “Self-Service Technologies: Understanding Customer Satisfaction with Technology-Based Service Encounters.” Journal of Marketing, vol. 64, no. 3, pp. 50–64, Jul. 2000.

[9] J. Cardoso, M. Winkler, and K. Voigt, “A Service Description Language for the Internet of Services,” in First International Symposium on Services Science (ISSS’09), Leipzig, Germany, 2009.

[10] V. Bicer, S. Borgert, M. Winkler, G. Scheithauer, K. Voigt, and J. Cardoso, “Modeling services using ise framework: Foundations and extensions,” in Modern Software Engineering Concepts and Practices: Advanced Approaches, A. H. Dogru and V. Bicer, Eds. Information Science Pub, 2011, pp. 126–150.

[11] H. Kett, K. Voigt, G. Scheithauer, and J. Cardoso, “Service engineering in business ecosystems,” in Proceedings of the XVIII International RESER Conference. Stuttgart, Germany: Fraunhofer IRB, 2008, pp. 1–22.

[12] J. Cardoso, K. Voigt, and M. Winkler, “Service Engineering for The Internet of Services,” in Enterprise Information Systems X, vol. 19. Springer, 2008, pp. 17–25.

[13] C. V. S. Prazeres, C. A. C. Teixeira, E. V. Munson, and M. da Grac¸a C. Pimentel, “Semantic Web Services: from OWL-S via UML to MVC applications,” in Proceedings of the 2009 ACM Symposium on Applied Computing. New York, USA: ACM, 2009, pp. 675–680.

[14] I.-W. Kim and K.-H. Lee, “Describing Semantic Web Services: from UML to OWL-S,” in Proceedings of the 2007 IEEE International Conference on Web Service, July 2007, pp. 529–536.

[15] J. H. Yang and I. J. Chung, “Automatic generation of service ontology from UML diagrams for semantic web services.” in Proceedings of the 1st Asian Semantic Web Conference, 2006, pp. 523–529.

[16] J. Timm and G. Gannod, “A model-driven approach for specifying semantic web services,” in Proceedings of the 2005 IEEE International Conference on Web Service, vol. 1, July 2005, pp. 313–320.

[17] Microsoft, “SAPO Portugal Telecom subsidiary helps ensure revenue opportunities in the cloud,” 2011.

[18] D. L. Parnas, “On the criteria to be used in decomposing systems into modules.” NY, USA: Springer, 2002, pp. 411–427.

[19] I. Horrocks, D. L. McGuinness, and C. A. Welty, “The description logic handbook,” F. Baader, D. Calvanese, D. L. McGuinness, D. Nardi, and P. F. Patel-Schneider, Eds. New York, NY, USA: Cambridge University Press, 2003, pp. 427–449.

[20] A. P. Sheth, “Panel: Data semantics: what, where, and how?” in Proceedings of the Sixth IFIP TC-2 Working Conference on Data Semantics: Database Applications Semantics. London, UK: Chapman & Hall, Ltd., 1996, pp. 601–610.

[21] J. Cardoso, M. Winkler, K. Voigt, and H. Berthold, IoS-Based Services, Platform Services, SLA and Models for the Internet of Services, ser. Communications in Computer and Information Science. Springer Berlin Heidelberg, 2011, vol. 50, pp. 3–17.

[22] J. Cardoso, A. Barros, N. May, and U. Kylau, “Towards a unified service description language for the Internet of Services: Requirements and first developments,” in IEEE International Conference on Services Computing. Florida, USA: IEEE Computer Society Press, 2010.