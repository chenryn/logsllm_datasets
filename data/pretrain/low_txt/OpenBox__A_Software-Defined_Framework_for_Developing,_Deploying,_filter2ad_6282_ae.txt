### 6. Higher-Level Abstractions and Verification

Our current northbound API exposes only the protocol primitives and Events API to application developers, using a set of Java classes and interfaces. However, higher-level abstractions, such as dedicated programming languages or structures, could provide more convenient ways to program Network Functions (NFs) on top of OpenBox. These abstractions might simplify and enhance the merge process in the controller. Examples of such abstractions for Software-Defined Networking (SDN) applications include Frenetic/Pyretic [13]. Additionally, verification solutions like [4] could be adapted to provide offline verification for OpenBox applications before deployment.

### 7. Related Work

In recent years, middleboxes and network functions have been major topics of interest. In this section, we discuss and compare state-of-the-art works that are directly related to our paper.

**CoMb [38]** focuses on consolidating multiple virtual middleboxes into a single physical data plane location, improving network performance by managing peak loads more efficiently. **E2 [33]** is a scheduling framework for composing multiple virtual NFs, targeting specific hardware infrastructure and managing both the servers and the virtual network switches. Unlike OpenBox, CoMb and E2 only decompose NFs for I/O optimizations such as zero-copy and TCP reconstruction, but not to reuse core processing blocks like classifiers and modifiers. The CoMb paper leaves the exploration of an optimal set of reusable modules for future research [38, Section 6.3]. Our work can be seen as a step forward in this direction.

**xOMB [1]** presents a software platform for running middleboxes on general-purpose servers but does not consolidate multiple applications into a single processing pipeline. **ClickOS [26]** is a runtime platform for virtual NFs based on the Click modular router [23], providing I/O optimizations and reduced latency for packets traversing multiple NFs. ClickOS lacks a network-wide centralized control and does not merge multiple NFs, only chaining them and optimizing their I/O.

Commercial solutions like **OpenStack [31]**, **OpenMANO [30]**, **OpNFV [32]**, and **UNIFY [21]** focus on orchestration, assuming each NF is a monolithic VM and improving scaling, placement, provisioning, and migration. **Stratos [17]** also provides NFV orchestration, including placement, scaling, provisioning, and traffic steering.

**OpenNF [18]** proposes a centralized control plane for sharing information between software NF applications, focusing on state sharing and forwarding problems with replication and migration. This work is somewhat orthogonal to ours.

**OpenState [5]** and **SNAP [3]** are programming languages for stateful SDN switches. OpenState allows the application of finite automata rules to switches, while SNAP takes a network-wide approach where programs are written for "one big switch" with local policies determined by the compiler. Both works focus on header-based processing, but their ideas could be useful for creating programming languages on top of the OpenBox framework, as discussed in Section 6.

To the best of our knowledge, **Slick [2]** is the only work to identify the potential in reusing core processing steps across multiple NFs. It presents a framework with centralized control, allowing NF applications to be programmed on top of it. Slick machines in the data plane realize the logic of these applications. The Slick framework focuses on the placement problem and has a limited API compared to OpenBox. Slick does not share its elements across multiple applications and does not propose a general communication protocol between data plane units and their controller. Unlike OBIs, Slick only supports software data plane units, which cannot be extended. This work complements ours, as the solutions to the placement problems in [2] can be implemented in the OpenBox control plane.

Our preliminary workshop paper [7] on OpenBox described the proposed architecture but presented a very limited framework using a unified processing pipeline for merging multiple middleboxes. The proposed unified pipeline was restrictive. In this paper, we present a much more flexible NF programming model, including an algorithm to merge multiple applications given this flexible model.

Another work [8] suggested extracting the deep packet inspection (DPI) process to an external network service, showing how performing DPI for multiple middleboxes at a single location could improve network performance. However, middleboxes are still assumed to be monolithic units, with their DPI logic outsourced to an external service.

OpenBox allows easier adoption of hardware accelerators for packet processing. Few works have addressed hardware acceleration in an NFV environment [27], and those that have focused on the hypervisor level [9,16]. Such ideas can be used in the OpenBox data plane by OBIs, providing additional hardware acceleration support.

**Click [23]** is an extensible software package for programming network routers and packet processors, with numerous modules for advanced routing and packet processing. Additional modules can be added using the provided API. OpenBox generalizes the modular approach of Click to provide a network-wide framework for developing modular NFs. We use Click as the packet processing engine, as part of our software implementation for an OBI, described in Section 4.

**P4 [6]** is a programmable packet processor language aiming to define the match-action table of a general-purpose packet processor, decoupled from specific protocols or specifications. A P4 switch can be used as part of the OpenBox data plane by translating the corresponding protocol directives to the P4 language.

### 8. Conclusions

This paper presents OpenBox, a software-defined framework for developing, deploying, and managing network functions. OpenBox decouples the control plane of network functions from their data plane, allowing the reuse of data plane elements by multiple logical NFs. In addition to easier management, orchestration, provisioning, and scalability, it provides greater flexibility in terms of NF development and deployment, multi-tenancy support with complete tenant isolation, and improved data plane performance.

We have implemented OpenBox and shown that it is not only easy to deploy and program but also improves network performance. We envision that frameworks like OpenBox will pave the way for further advances in network function virtualization (NFV) regarding NF programming, deployment, and easier management, while maintaining and improving performance. The flexible support for hardware accelerators for packet processing makes OpenBox even more appealing, as most NFV frameworks today assume completely virtual environments and do not support any hardware accelerators [27].

### Acknowledgments

We thank the reviewers of the SIGCOMM PC and our shepherd Vyas Sekar for their valuable comments on this paper. We also thank Pavel Lazar, Dan Shmidt, and Dana Klein for their contributions to the implementation of the OpenBox framework. This research was supported by the European Research Council under the European Union’s Seventh Framework Programme (FP7/2007–2013)/ERC Grant agreement no 259085, the Israeli Centers of Research Excellence (I-CORE) program (Center No. 4/11), and the Neptune Consortium, administered by the Office of the Chief Scientist of the Israeli Ministry of Industry, Trade, and Labor.

### 9. References

[1] J. W. Anderson, R. Braud, R. Kapoor, G. Porter, and A. Vahdat. xOMB: Extensible open middleboxes with commodity servers. In ANCS, pages 49–60, 2012.

[2] B. Anwer, T. Benson, N. Feamster, and D. Levin. Programming Slick Network Functions. In SOSR, pages 14:1–14:13, 2015.

[3] M. T. Arashloo, Y. Koral, M. Greenberg, J. Rexford, and D. Walker. SNAP: Stateful Network-Wide Abstractions for Packet Processing. In SIGCOMM, 2016.

[4] T. Ball, N. Bjørner, A. Gember, S. Itzhaky, A. Karbyshev, M. Sagiv, M. Schapira, and A. Valadarsky. VeriCon: Towards verifying controller programs in software-defined networks. In PLDI, page 31, 2014.

[5] G. Bianchi, M. Bonola, A. Capone, and C. Cascone. OpenState: Programming platform-independent stateful OpenFlow applications inside the switch. SIGCOMM Comput. Commun. Rev., 44(2):44–51, Apr 2014.

[6] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford, C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese, and D. Walker. P4: Programming protocol-independent packet processors. SIGCOMM Comput. Commun. Rev., 44(3):87–95, Jul 2014.

[7] A. Bremler-Barr, Y. Harchol, and D. Hay. OpenBox: Enabling Innovation in Middlebox Applications. In HotMiddlebox, pages 67–72, 2015.

[8] A. Bremler-Barr, Y. Harchol, D. Hay, and Y. Koral. Deep packet inspection as a service. In CoNEXT, pages 271–282, 2014.

[9] Z. Bronstein, E. Roch, J. Xia, and A. Molkho. Uniform handling and abstraction of NFV hardware accelerators. IEEE Network, 29(3):22–29, 2015.

[10] ECMA. The JSON data interchange format, October 2013. http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf.

[11] ETSI. Network functions virtualisation - introductory white paper, 2012. http://portal.etsi.org/NFV/NFV_White_Paper.pdf.

[12] S. K. Fayazbakhsh, L. Chiang, V. Sekar, M. Yu, and J. C. Mogul. Enforcing network-wide policies in the presence of dynamic middlebox actions using flowtags. In NSDI, pages 533–546, 2014.

[13] N. Foster, A. Guha, M. Reitblatt, A. Story, M. J. Freedman, N. P. Katta, C. Monsanto, J. Reich, J. Rexford, C. Schlesinger, D. Walker, and R. Harrison. Languages for software-defined networks. IEEE Communications Magazine, 51(2):128–134, February 2013.

[14] L. Foundation. Opendaylight. http://www.opendaylight.org/.

[15] O. N. Foundation. Openflow switch specification version 1.4.0, October 2013. https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.4.0.pdf.

[16] X. Ge, Y. Liu, D. H. Du, L. Zhang, H. Guan, J. Chen, Y. Zhao, and X. Hu. OpenANFV: Accelerating network function virtualization with a consolidated framework in OpenStack. In SIGCOMM, pages 353–354, 2014.

[17] A. Gember, A. Krishnamurthy, S. S. John, R. Grandl, X. Gao, A. Anand, T. Benson, A. Akella, and V. Sekar. Stratos: A network-aware orchestration layer for middleboxes in the cloud. CoRR, abs/1305.0209, 2013.

[18] A. Gember-Jacobson, R. Viswanathan, C. Prakash, R. Grandl, J. Khalid, S. Das, and A. Akella. OpenNF: Enabling innovation in network function control. In SIGCOMM, pages 163–174, 2014.

[19] J. Gross, T. Sridhar, P. Garg, C. Wright, I. Ganga, P. Agarwal, K. Duda, D. Dutt, and J. Hudson. Geneve: Generic network virtualization encapsulation. IETF Internet-Draft, November 2015. https://tools.ietf.org/html/draft-ietf-nvo3-geneve-00.

[20] N. Handigol, B. Heller, V. Jeyakumar, D. Mazières, and N. McKeown. I know what your packet did last hop: Using packet histories to troubleshoot networks. In NSDI, pages 71–85, 2014.

[21] W. John, C. Meirosu, B. Pechenot, P. Skoldstrom, P. Kreuger, and R. Steinert. Scalable Software Defined Monitoring for Service Provider DevOps. In EWSDN, pages 61–66, 2015.

[22] A. R. Khakpour and A. X. Liu. First step toward cloud-based firewalls. In SRDS, pages 41–50, 2012.

[23] E. Kohler, R. Morris, B. Chen, J. Jannotti, and M. F. Kaashoek. The Click modular router. ACM Trans. Comput. Syst., 18(3):263–297, Aug 2000.

[24] M. Mahalingam, D. Dutt, K. Duda, P. Agarwal, L. Kreeger, T. Sridhar, M. Bursell, and C. Wright. Virtual extensible local area network. IETF Internet-Draft, August 2014. https://tools.ietf.org/html/rfc7348.

[25] D. A. Maltz, J. Zhan, G. G. Xie, H. Zhang, G. Hjálmtýsson, A. G. Greenberg, and J. Rexford. Structure preserving anonymization of router configuration data. In IMC, pages 239–244, 2004.

[26] J. Martins, M. Ahmed, C. Raiciu, V. Olteanu, M. Honda, R. Bifulco, and F. Huici. ClickOS and the art of network function virtualization. In NSDI, pages 459–473, 2014.

[27] R. Mijumbi, J. Serrat, J. Gorricho, N. Bouten, F. De Turck, and R. Boutaba. Network function virtualization: State-of-the-art and research challenges. IEEE Comm. Surveys Tutorials, 18(1):236–262, 2016.

[28] Mininet. http://mininet.org/.

[29] OpenBox Project Source Code. https://github.com/OpenBoxProject.

[30] OpenMANO. https://github.com/nfvlabs/openmano.

[31] OpenStack open source cloud computing software. https://www.openstack.org/.

[32] OpNFV. https://www.opnfv.org/.

[33] S. Palkar, C. Lan, S. Han, K. Jang, A. Panda, S. Ratnasamy, L. Rizzo, and S. Shenker. E2: A framework for NFV applications. In SOSP, pages 121–136, 2015.

[34] P. Prakash, M. Lee, Y. C. Hu, R. R. Kompella, J. Wang, and S. Dassarma. Jumbo frames or not: That is the question! Technical Report 13-006, Purdue University, Twitter, 2013.

[35] Openbox framework specification, January 2016. http://www.deepness-lab.org/pubs/OpenBoxSpecification1.1.0.pdf.

[36] Z. A. Qazi, C.-C. Tu, L. Chiang, R. Miao, V. Sekar, and M. Yu. SIMPLE-fying middlebox policy enforcement using SDN. In SIGCOMM, pages 27–38, 2013.

[37] P. Quinn, P. Agarwal, R. Manur, R. Fernando, J. Guichard, S. Kumar, A. Chauhan, M. Smith, N. Yadav, and B. McConnell. Network service header. IETF Internet-Draft, February 2014. https://datatracker.ietf.org/doc/draft-quinn-sfc-nsh.

[38] V. Sekar, N. Egi, S. Ratnasamy, M. K. Reiter, and G. Shi. Design and implementation of a consolidated middlebox architecture. In NSDI, pages 323–336, 2012.

[39] J. Sherry and S. Ratnasamy. A survey of enterprise middlebox deployments. Technical Report UCB/EECS-2012-24, UC Berkeley, 2012.

[40] Snort users manual 2.9.7. http://manual.snort.org/.

[41] R. Stuhlmuller. Micro-Segmentation: VMware NSX’s Killer Use Case, June 2014. https://blogs.vmware.com/networkvirtualization/2014/06/micro-segmentation-vmware-nsx.html.

[42] D. E. Taylor. Survey and taxonomy of packet classification techniques. ACM Comput. Surv., 37(3):238–275, Sept. 2005.