### Optimized Text

#### Performance Evaluation
To ensure the system's performance is representative of its intended use, we evaluated IVD in a production environment. This approach allowed us to account for all interactions that might not be evident in a testing environment. We logged the performance characteristics of approximately 1 million user requests that resulted in at least one database write. Given that request wall time is significantly influenced by request arguments (e.g., file size and internet connection quality), we compared median times.

We separately recorded the time needed to send a response back to the user and the post-processing time, where IVD’s request sampler runs. The median difference was 1 millisecond for the former and 2 milliseconds for the latter. Therefore, we conclude that IVD’s performance impact is virtually imperceptible to an OSN’s end-user.

#### Invariant Inference Engine Performance
The performance of IVD’s invariant inference engine is also critical. Daily runs of the inference engine must compute new invariants within 24 hours. Our implementation typically requires 4–6 hours to compute new invariants, using up to 1,000 mappers and reducers.

### Related Work
Traditionally, research on mitigating web application bugs has focused on runtime data-flow tracking and static analysis. Runtime data-flow tracking primarily targets injection vulnerabilities such as XSS and SQL injection [23], [24], [25]. Static analysis, on the other hand, aims to identify missing authorization checks. Systems like Fix Me [26], MiMoSa [27], RoleCast [28], SAFERPHP [29], and WAPTEC [30] use static analysis to check a web application’s security logic. However, these analyses face fundamental challenges with applications that have complex access control policies. Without a specification, it is impossible to determine whether an operation should be allowed, limiting their effectiveness to applications with simple privacy models. IVD does not have this limitation.

One way to address this issue is to use the application’s typical behavior as the specification. APP LogGIC [31], Swaddler [32], Waler [2], and ZigZag [33] use Daikon [34] to extract invariants that are part of the “intended” application specification. These invariants are then checked at runtime or used in a model checking step to identify paths where they are not enforced. While these invariants are based on program state, IVD proposes a simpler and more scalable approach by basing invariants on database queries. Additionally, IVD avoids the expensive model checking step and ensures that runtime checking of invariants has virtually no overhead.

Other systems, such as BLOCK [5] and InteGuard [6], generate invariants from different data sources. BLOCK generates invariants from web requests and responses to detect state violation attacks, while InteGuard finds invariants in HTTP traffic between providers, integrators, and end-users to protect integrators from malicious users. Although these approaches work outside the application, their invariants have lower expressive power due to limited access to application state. The graph database layer in IVD provides finer invariant granularity compared to the HTTP layer.

IVD also shares similarities with anomaly detection systems [35], [36], [32]. While both share the high-level idea of detecting anomalies, anomaly detection systems assign an anomaly score to each request, which is compared against a threshold determined during the learning phase. These scores are typically computed using statistical models, making them suitable for protecting against attacks with specific input patterns but less effective against authorization bugs. Several anomaly detection systems have been proposed specifically for SQL queries [37], [38], and have proven effective against SQL injection and XSS.

Vigilante [39] uses attack signatures rather than invariants to protect network applications from malicious users. These signatures are generated by instrumentation that looks for attacks relying on detectable exploit mechanisms such as buffer overflows. However, this approach is not effective for semantic bugs, where a generic method of detecting an attack does not exist. Intrusion detection systems like Snort [40] also use attack signatures to protect against known vulnerabilities, but this technique has limited applicability in proprietary applications, such as those powering OSNs.

### Future Work
IVD’s current deployment at Facebook does not cover database reads, as outlined in §II-B. To make IVD applicable to reads, we propose two approaches:

1. **Separate Authorization Metadata and Payload**: Split object attributes into authorization-relevant and irrelevant categories. The database would provide a separate API for reading only the authorization-relevant attributes. Algorithm 5 illustrates this approach.
2. **Explicitly Inform IVD of Successful Authorization**: Modify the authorization code to explicitly notify IVD when authorization is successful. Algorithm 6 demonstrates this concept.

The first approach involves modifying the graph API, while the second approach requires changes to the authorization code without altering the API. Both methods allow IVD to learn or block accesses to the object, similar to how it handles writes.

Another direction for future work is to mitigate IVD’s reliance on an attack-free learning period (§III-B). Potential solutions include flagging invariants that were almost ratified for manual review or directly ratifying invariants but disabling them if they block requests from a large number of users. More complex ratification criteria can be borrowed from robust statistics [41].

Finally, IVD can be extended to learn more complex invariants. Currently, IVD protects against bugs caused by missing authorization checks that can be expressed as equality between object attributes, direct relationships, or conjunctions thereof. Potential extensions could allow IVD to infer and enforce disjunctions or introduce predicates that capture indirect relationships, i.e., inspect objects separated from the logged-in user by more than one edge in the graph.

### Conclusion
IVD is a defense-in-depth system designed to protect online social networks against missing or incorrect authorization checks. It infers invariants from graph data query patterns and, after a short evaluation period, blocks any requests where the invariants do not hold. IVD’s main novelty lies in its focus on the highly interconnected data model specific to online social networks, allowing it to infer meaningful invariants at the database layer. Additionally, IVD tackles the inherent susceptibility of dynamic invariant detection systems to false positives through a two-step evaluation and ratification process and a set of effective domain-specific enforcement excuses.

While IVD has limitations, such as limited applicability for read operations and restricted invariant formats, it remains an effective additional layer of defense at Facebook. IVD is not a replacement for good engineering practices, security audits, or bug bounty programs, but it complements these efforts.

### Acknowledgements
We thank Ben Mathews and Alec Muffett for their early work on IVD, and the engineers from Facebook’s security and product teams who investigated invariant violations. We also thank Pieter Hooimeijer, Christopher Palow, Steve Weiss, and John Lyle for helping us shape the paper. Special thanks to our shepherd, Nikita Borisov, and the anonymous reviewers for their invaluable feedback.

### References
[1] “OWASP Top 10 2013,” https://www.owasp.org/index.php/Top 10 2013-Introduction.
[2] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna, “Toward automated detection of logic vulnerabilities in web applications,” in Proceedings of the USENIX Security Symposium, vol. 58, 2010.
[3] F. Sun, L. Xu, and Z. Su, “Static detection of access control vulnerabilities in web applications.” in Proceedings of the USENIX Security Symposium, 2011.
[4] I. Beschastnikh, Y. Brun, M. D. Ernst, A. Krishnamurthy, and T. E. Anderson, “Bandsaw: Log-powered test scenario generation for distributed systems,” in SOSP Work In Progress, Cascais, Portugal, 2011.
[5] X. Li and Y. Xue, “BLOCK: A black-box approach for detection of state violation attacks towards web applications,” in Proceedings of the 27th Annual Computer Security Applications Conference. ACM, 2011.
[6] L. Xing, Y. Chen, X. Wang, and S. Chen, “Integuard: Toward automatic protection of third-party web service integrations.” in Proceedings of the Network and Distributed System Security Symposium, 2013.
[7] G. Pellegrino and D. Balzarotti, “Toward black-box detection of logic flaws in web applications,” in Proceedings of the Network and Distributed System Security Symposium, 2014.
[8] “FlockDB: A distributed, fault-tolerant graph database,” https://github.com/twitter/flockdb.
[9] N. Bronson, Z. Amsden, G. Cabrera, P. Chakka, P. Dimov, H. Ding, J. Ferris, A. Giardullo, S. Kulkarni, H. Li, M. Marchukov, D. Petrov, L. Puzar, Y. J. Song, and V. Venkataramani, “TAO: Facebook’s distributed data store for the social graph,” in Proceedings of the USENIX Annual Technical Conference, 2013.
[10] “Neo4j decreases development time-to-market for LinkedIn’s Chitu App,” https://neo4j.com/case-studies/linkedin-china/?ref=solutions.
[11] S. Sakr, S. Elnikety, and Y. He, “G-SPARQL: A hybrid engine for querying large attributed graphs,” in ACM International Conference on Information and Knowledge Management, 2012.
[12] “2015 Highlights: Less low-hanging fruit,” https://www.facebook.com/notes/facebook-bug-bounty/2015-highlights-less-low-hanging-fruit/1225168744164016.
[13] P. T. Wood, “Query languages for graph databases,” ACM SIGMOD Record, vol. 41, no. 1, Apr. 2012.
[14] S. Abiteboul, D. Quass, J. McHugh, J. Widom, and J. Wiener, “The Lorel query language for semistructured data,” International Journal on Digital Libraries, vol. 1, 1997.
[15] A. Thusoo, Z. Shao, S. Anthony, D. Borthakur, N. Jain, J. Sen Sarma, R. Murthy, and H. Liu, “Data warehousing and analytics infrastructure at Facebook,” in Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data, 2010.
[16] K. Shvachko, H. Kuang, S. Radia, and R. Chansler, “The Hadoop distributed file system,” in Proceedings of the IEEE Symposium on Mass Storage Systems and Technologies (MSST), May 2010.
[17] A. Thusoo, J. S. Sarma, N. Jain, Z. Shao, P. Chakka, S. Anthony, H. Liu, P. Wyckoff, and R. Murthy, “Hive: A warehousing solution over a map-reduce framework,” Proc. VLDB Endow., vol. 2, no. 2, Aug. 2009.
[18] C. Tang, T. Kooburat, P. Venkatachalam, A. Chander, Z. Wen, A. Narayanan, P. Dowell, and R. Karl, “Holistic configuration management at Facebook,” in Proceedings of the 25th Symposium on Operating Systems Principles.
[19] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed, “Zookeeper: Wait-free coordination for internet-scale systems,” in Proceedings of the USENIX Annual Technical Conference, 2010.
[20] “Facebook Whitehat,” https://www.facebook.com/whitehat.
[21] “Facebook’s bug - delete any video from Facebook,” http://tinyurl.com/j29loqa.
[22] “Facebook whitehat information,” http://tinyurl.com/zzvyumj.
[23] J. Newsome and D. Song, “Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software,” in Proceedings of the Network and Distributed System Security Symposium, 2005.
[24] P. Vogt, F. Nentwich, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna, “Cross-site scripting prevention with dynamic data tainting and static analysis,” in Proceedings of the Network and Distributed System Security Symposium, 2007.
[25] W. G. J. Halfond, A. Orso, and P. Manolios, “Using positive tainting and syntax-aware evaluation to counter SQL injection attacks,” in Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2006.
[26] S. Son, K. S. McKinley, and V. Shmatikov, “Fix me up: Repairing access-control bugs in web applications.” in Proceedings of the Network and Distributed System Security Symposium, 2013.
[27] D. Balzarotti, M. Cova, V. V. Felmetsger, and G. Vigna, “Multi-module vulnerability analysis of web-based applications,” in Proceedings of the 14th ACM conference on Computer and communications security. ACM, 2007.
[28] S. Son, K. S. McKinley, and V. Shmatikov, “Rolecast: Finding missing security checks when you do not know what checks are,” ACM SIGPLAN Notices, vol. 46, no. 10, 2011.
[29] S. Son and V. Shmatikov, “SAFERPHP: Finding semantic vulnerabilities in PHP applications,” in Proceedings of the ACM SIGPLAN 6th Workshop on Programming Languages and Analysis for Security, 2011.
[30] P. Bisht, T. Hinrichs, N. Skrupsky, and V. Venkatakrishnan, “WAPTEC: Whitebox analysis of web applications for parameter tampering exploit construction,” in Proceedings of the 18th ACM conference on Computer and communications security, 2011.
[31] G. Stergiopoulos, B. Tsoumas, and D. Gritzalis, “Hunting application-level logical errors,” in Proceedings of the International Symposium on Engineering Secure Software and Systems. Springer, 2012.
[32] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna, “Swaddler: An approach for the anomaly-based detection of state violations in web applications,” in International Workshop on Recent Advances in Intrusion Detection. Springer, 2007.
[33] M. Weissbacher, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna, “Zigzag: Automatically hardening web applications against client-side validation vulnerabilities,” in Proceedings of the USENIX Security Symposium, 2015.
[34] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao, “The Daikon system for dynamic detection of likely invariants,” Science of Computer Programming, vol. 69, no. 1, 2007.
[35] C. Kruegel and G. Vigna, “Anomaly detection of web-based attacks,” in Proceedings of the 10th ACM Conference on Computer and Communications Security, 2003.
[36] K. Leung and C. Leckie, “Unsupervised anomaly detection in network intrusion detection using clusters,” in Proceedings of the Twenty-eighth Australasian conference on Computer Science-Volume 38. Australian Computer Society, Inc., 2005.
[37] F. Valeur, D. Mutz, and G. Vigna, “A learning-based approach to the detection of SQL attacks,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, 2005.
[38] S. Y. Lee, W. L. Low, and P. Y. Wong, “Learning fingerprints for a database intrusion detection system,” in European Symposium on Research in Computer Security, 2002.
[39] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou, L. Zhang, and P. Barham, “Vigilante: End-to-end containment of internet worms,” in Proceedings of the Twentieth ACM Symposium on Operating Systems Principles, 2005.
[40] M. Roesch, “Snort - lightweight intrusion detection for networks,” in USENIX Conference on System Administration, 1999.
[41] F. R. Hampel, E. M. Ronchetti, P. J. Rousseeuw, and W. A. Stahel, Robust Statistics: The Approach Based on Influence Functions. Wiley and Sons, 1986.