# Injecting RDS-TMC Traffic Information Signals

**Injecting RDS-TMC Traffic Information Signals**

**Copyright 2007 Inverse Path Ltd.**
**DEFCON 15, Las Vegas, August 3-5, 2007**

**Presenters:**
- **Andrea Barisani** - Chief Security Engineer
- **Daniele Bianco** - Hardware Hacker

**Introduction**

**Disclaimer:**
All scripts, commands, configurations, and schematics provided in this presentation are for illustrative purposes only. Use the presented information at your own risk.

**Copyright 2007 Inverse Path Ltd.**
- Andrea Barisani
- Daniele Bianco

This work is released under the terms of the Creative Commons Attribution-NonCommercial-NoDerivs License (CC BY-NC-ND 3.0). For more details, visit: [Creative Commons License](http://creativecommons.org/licenses/by-nc-nd/3.0).

## Overview

### What's This All About?
- Modern in-car satellite navigation (SatNav) systems can receive dynamic traffic information.
- One such system widely used in Europe and North America is RDS-TMC (Radio Data System – Traffic Message Channel).
- One of the presenters, after purchasing a car with an RDS-TMC-enabled SatNav, decided to explore its vulnerabilities.
- We will demonstrate how RDS-TMC information can be intercepted and falsified using custom hardware and software.

### Why Bother?
- Hardware hacking is both fun and educational.
- Traffic information displayed on SatNavs is implicitly trusted by drivers, making it a potential target for malicious activities.
- Understanding and mitigating these vulnerabilities is crucial for safety and security.

## The Radio Data System (RDS)

- RDS transmits data over FM radio at a rate of 1187.5 bits per second.
- It is described in the European Standard EN50067 (April 1998).
- Key functions include displaying FM channel names, alternate frequencies, program types, and news overrides.

### RDS Signal Composition
- **Mono (L+R)**: Audio signal
- **Stereo (L-R)**: Stereo audio signal
- **19kHz Pilot Tone**: Synchronization tone
- **RDS Signal**: Data subcarrier

## RDS-TMC Introduction

- First introduced around 1997 in Germany, RDS-TMC was implemented across Europe in subsequent years (e.g., Italy in 2004, Australia in 2007).
- Described in ISO 14819-1, TMC uses RDS for transmitting traffic information over FM broadcasts.

### RDS-TMC Implementation
- Despite being a 10-year-old protocol, full support in SatNav systems has been slow.
- Most in-car SatNavs now support RDS-TMC, and external/portable units often offer jacks for FM receivers.
- RDS-TMC services are available both free and commercially.
- TMC can also be transmitted via DAB or satellite radio.

### RDS-TMC Terminal

### The Issue
- There is no authentication mechanism for RDS-TMC data (encryption is supported for commercial services but not relevant here).
- We tested the feasibility of decoding and injecting arbitrary TMC messages.
- Off-the-shelf components and inexpensive electronics were used.

### The Victim

### Sniffing RDS
- To capture raw FM signals (MPX), we used tuners with accessible pins, such as the FM1216 module from Philips.
- We decoded the RDS sub-carrier using a TDA7330B RDS Demodulator, a PIC for serial conversion, and decoding software (sRDSd).
- Custom hardware and software allowed us to fully understand the protocol and decode TMC.

### Sniffing Circuit
- **Main Components:**
  - 1x TDA7330B
  - 1x PIC16F84
  - 1x MAX232

### Assembly
- **VHF Tuner**
- **TDA7330B**
- **MPX**
- **Serial Input**
- **RDS Decoder**
- **Analog Signal**
- **Digital Signal (Serial)**
- **PIC16F84**

### PIC Programming
- The PIC is programmed to convert RDS demodulator data and send it to the serial port.
- We used a custom PIC programmer, a variation of the JDM one.
- Output consists of 0s and 1s; bad quality data is marked with * and +.
- Source code: [PIC Code](http://dev.inversepath.com/rds/pic_code.asm)

### The Output
- Example output: `cat /dev/ttyS0`

### RDS Protocol
- **Group Structure (104 bits):**
  - Block 1: PI code (16 bits) + Checkword (10 bits)
  - Block 2: Group code (4 bits) + B0 (1 bit) + TP (1 bit) + PTY (5 bits) + Checkword (10 bits)
  - Block 3: Data (16 bits) + Checkword (10 bits)
  - Block 4: Data (16 bits) + Checkword (10 bits)

### TMC / Alert-C Protocol
- **Block 1:**
  - PI code (16 bits) + Checkword (10 bits)
- **Block 2:**
  - Group code (4 bits) + B0 (1 bit) + TP (1 bit) + PTY (5 bits) + T (1 bit) + F (1 bit) + DP (3 bits) + Checkword (10 bits)
- **Block 3:**
  - D (1 bit) + PN (1 bit) + Extent (3 bits) + Event (11 bits) + Checkword (10 bits)
- **Block 4:**
  - Location (16 bits) + Checkword (10 bits)

### TMC / Alert-C Fields
- **PI code**: Programme Identification
- **Group code**: Message type identification
- **B0**: Version code
- **TP**: Traffic Program
- **PTY**: Programme Type
- **T, F, D**: Multi-Group messages
- **DP**: Duration and Persistence
- **D**: Diversion Advice
- **PN**: Direction (+/-)
- **Extent**: Event extension
- **Event**: Event code (see TMDD – Traffic Management Data Dictionary)
- **Location**: Location code (DAT Location Table - TMCF-LT-EF-MFF-v06)

### Simple RDS Decoder (srdsd)
- Our custom tool for RDS decoding:
  - ISC-style licensed
  - Performs nearly full RDS-TMC and basic RDS decoding
  - Provides text and HTML output with Google Map links for GPS data
  - [srdsd GitHub Repository](http://dev.inversepath.com/rds/srdsd)

### srdsd Usage
- **Usage:**
  ```sh
  ./srdsd [-h|-H|-P|-t] [-d <location_db_path>] [-p <PI_number>]
  ```
  - `-t`: Display only TMC packets
  - `-H`: HTML output (saved to `/tmp/rds-<timestamp>/rds-*.html`)
  - `-p <PI_number>`: Specify PI number
  - `-P`: PI search
  - `-d <location_db_path>`: Location database path
  - `-h`: Help

### srdsd – PI Search
- We must "lock" parsing to the relevant PI.
- Each FM channel has a unique PI code.
- You can identify the PI code by finding the most recurring 16-bit string.

### srdsd Output Examples
- **0A Group (Tuning)**
  - Programme Identification: 0101001000011000 (5218)
  - Group type: 0A (Tuning)
  - Traffic Program: 1
  - Programme Type: 01001 (Varied Speech)
  - Raw dump and decoded data provided.

- **8A Group (TMC)**
  - Programme Identification: 0101001000011000 (5218)
  - Group type: 8A (TMC)
  - Traffic Program: 1
  - Programme Type: 01001 (Varied Speech)
  - Raw dump and decoded data provided.

- **3A Group (Traffic Announcement)**
  - Programme Identification: 0101001000011000 (5218)
  - Group type: 3A (Traffic Announcement)
  - Raw dump and decoded data provided.

**Copyright 2007 Inverse Path Ltd.**