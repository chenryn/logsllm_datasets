# Semantic Web Services Discovery Using Semantically Annotated WSDL

**Authors:**
- Jorge Cardoso¹
- John A. Miller²
- Savitha Emani²

**Affiliations:**
1. SAP Research CEC Dresden, Chemnitzer Strasse 48, 01187 Dresden, Germany
   - Email: [PI:EMAIL]
2. LSDIS Lab, Department of Computer Science, University of Georgia, Athens, GA 30602, USA
   - Emails: [PI:EMAIL], [PI:EMAIL]

**Abstract:**
To make semantic Web services accessible to users, providers publish them in registries. However, current registries use inefficient discovery mechanisms that do not support semantic-based discovery, leading to numerous irrelevant matches. This paper introduces an algorithm for matching semantic Web service requests described with SAWSDL against semantic Web service advertisements. The algorithm is innovative in three key aspects:
1. It evaluates the similarity among semantic Web service properties (e.g., inputs and outputs) using Tversky’s model, which considers concepts, their semantic relationships, and their common and distinguishing features.
2. It considers both the inputs/outputs and the functionality of services, enhancing the precision of the search.
3. It can match a semantic Web service request against advertisements annotated with concepts from different ontologies, thus evaluating the similarity of concepts defined in different contexts.

**Keywords:**
Semantic Web, Web services, Ontologies

## 1. Introduction

Semantic Web services represent a new paradigm for distributed computing, offering significant benefits for integrating heterogeneous, autonomous, and large-scale distributed systems. Standards such as WSDL, UDDI, and SOAP have been developed to support Web services, and substantial progress has been made in making them a practical solution for distributed computing on the scale of the World Wide Web. With the proliferation of Web services and the evolution towards the semantic Web, there is an opportunity to automate various Internet-related tasks. Applications should be able to automatically or semi-automatically discover, invoke, compose, and monitor Web services with specific functionalities and properties.

In dynamic e-business environments, the ability to discover Web services on the fly and dynamically create business processes is highly desirable. Web service discovery faces unique challenges compared to traditional information retrieval and integration systems. The discovery process must consider not only syntactical information but also data, functional, and QoS semantics. Efficiently discovering appropriate Web services from potentially thousands available on the Web is a significant challenge. Current industry standards, such as UDDI, are limited in their effectiveness because they only support keyword and taxonomy-based searching, which does not account for the semantic aspects of Web services.

To enhance the discovery of Web services, it is essential to describe them semantically and use semantic matching algorithms. Semantic discovery allows for more accurate and relevant results by using concepts defined in specific ontological domains. Adding semantics to Web service descriptions can be achieved using ontologies that support shared vocabularies and domain models. This makes the semantics implied by the service descriptions explicit, enabling more precise matching.

This paper reviews the state-of-the-art in Web service discovery and presents a novel algorithm for semantic Web service discovery. The algorithm evaluates the similarity among semantic Web service properties, considers both inputs/outputs and functionality, and can match services annotated with concepts from different ontologies.

## 2. Semantic Web Service

The intersection of the semantic Web and Web services, known as semantic Web services, is expected to be significant. Academia and industry are approaching this area from different perspectives, with three main approaches to bring semantics to Web services:

### 2.1 OWL-S

OWL-S (formerly DAML-S) is a standard ontology that provides a computer-interpretable description of Web services. It uses OWL as the representational language and consists of three parts: the service profile, the service model, and the service grounding. The service profile describes what the service provides, the service model details how it is used, and the service grounding specifies how to interact with it.

### 2.2 WSMO

WSMO (Web Service Modeling Ontology) includes an ontology of core elements for semantic Web services, described in WSML (Web Services Modeling Language). WSMO elements include ontologies, Web services, goals, and mediators. WSMO supports the automation of discovering, combining, and invoking electronic services over the Web.

### 2.3 Adding Semantics to WSDL

WSDL (Web Services Description Language) is primarily an interface description language for Web services. To add semantics to WSDL, approaches like SAWSDL (Semantic Annotations for WSDL) are used. SAWSDL allows for the annotation of WSDL elements with semantic metadata, enabling more precise and relevant service discovery.

## 3. Semantic Web Service Matching Function (SM-T)

We present a semantic Web service matching function (SM-T) for discovering services. This function evaluates the similarity among semantic Web service properties using Tversky’s model, considers both inputs/outputs and functionality, and can match services annotated with concepts from different ontologies. We also describe a ranking algorithm that uses the SM-T function to provide a ranked list of matching services.

## 4. Integration with METEOR-S Web Services Discovery Infrastructure

The SM-T function can be integrated into the METEOR-S Web Services discovery infrastructure, which provides a registry system for the semantic publication and discovery of Web services. This integration enhances the discovery mechanism by leveraging the semantic annotations and matching capabilities of the SM-T function.

## 5. Related Work

This section discusses related work in the area of semantic Web service discovery, highlighting the contributions and limitations of existing approaches.

## 6. Conclusions

In conclusion, the proposed algorithm for semantic Web service discovery addresses the inefficiencies of current discovery mechanisms by considering semantic properties, functionality, and cross-ontology concepts. This approach enhances the precision and relevance of Web service discovery, making it a valuable tool for dynamic and large-scale distributed systems.

---

This optimized version of the text aims to improve clarity, coherence, and professionalism, while maintaining the original content and structure.