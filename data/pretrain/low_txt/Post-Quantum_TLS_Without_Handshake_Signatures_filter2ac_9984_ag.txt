### Namespaced API and Integration of Quantum-Safe Implementations

Using a namespaced API, it is straightforward to integrate various implementations. We utilized SIKE and all signature schemes from the Open Quantum Safe (OQS) library [107], although many of these implementations in liboqs initially came from PQClean. When PQClean and OQS did not provide architecture-specific optimizations, particularly AVX2 vector instructions, we integrated these optimizations ad-hoc.

Specifically, we used the AVX2-accelerated code from PQClean for Kyber and Dilithium. The AVX2-optimized implementation of SIKE was sourced from OQS. For GeMSS and Falcon, we integrated AVX2-accelerated implementations provided by their submitters into PQClean and then imported them into liboqs using OQS’s scripts. For XMSSMT, we used the reference implementation of XMSS, which includes an optimized C implementation of SHAKE-128 for hashing. The pre-quantum and symmetric algorithms were provided by Ring.

### Supporting TLS 1.3 with Post-Quantum Primitives in Rustls

To support TLS 1.3 with post-quantum primitives in Rustls, we added the KEMs to the list of supported key-exchange algorithms. By hard-coding the key share offered by the client, we can force a specific KEM to be used for key exchange. We also added the supported signature algorithms to Rustls, Ring, and WebPKI. In several places, we updated assumptions related to RSA and EC key shares and certificates. For example, Rustls did not expect certificates larger than 64 KB, whereas the RFC [93, App. B.3.3] allows up to 16 MB.

Supporting KEMTLS required modifying the state machine. We adapted the TLS 1.3 implementation in Rustls to suit our new handshake. To authenticate using KEM certificates, we added encapsulation and decapsulation using certificates and corresponding private keys to WebPKI. Since Rustls and WebPKI do not support creating certificates, we developed a script for this purpose.

### Evaluation of KEMTLS vs. TLS 1.3

#### Handshake Sizes

Table 1 compares the size of public-key cryptographic objects transmitted in KEMTLS versus TLS 1.3.

In scenarios aiming to minimize communication size, switching from TLS 1.3 to KEMTLS can reduce the total number of bytes transmitted in a handshake by 38% (from 3035 to 1853 bytes) when including intermediate CA certificates, or by 58% (from 2024 to 842 bytes) when excluding intermediate CA certificates. In scenarios with faster lattice-based cryptography, switching from TLS 1.3 with Kyber key exchange and Dilithium authentication (KDDD) to KEMTLS with Kyber ephemeral and authenticated key exchange and Dilithium signatures only in certificates (KKDD) reduces handshake size by 16% (from 10036 to 8344 bytes) when including intermediate CA certificates, and by 24% (from 6808 to 5116 bytes) when excluding intermediate CA certificates.

#### Speed Measurements

**Benchmarking Methodology:**
We used the example TLS client and server implementations provided by Rustls, modifying the client to measure multiple handshakes in a loop. The handshake was instrumented to print nanoseconds elapsed, starting from sending or receiving the initial message until operations of interest for both client and server.

We followed the methodology in [87] for setting up emulated networks using Linux kernel’s network namespacing [14] and network emulation (NetEm) features [51]. We created network namespaces for clients and servers, varying latency and bandwidth. NetEm adds latency to outgoing packets, so to add \( x \) ms of latency, we added \( \frac{x}{2} \) ms of latency to both client and server interfaces. We considered round-trip times (RTT) of 31.1 ms (transcontinental connection) and 195.6 ms (trans-Pacific connection), and bandwidths of 1000 Mbps and 10 Mbps, with a fixed packet loss rate of 0%.

Measurements were conducted on a server with two Intel Xeon Gold 6230 (Cascade Lake) CPUs, each with 20 physical cores, providing 80 hyperthreaded cores in total. We ran forty clients and servers in parallel, each process having its own (hyperthreaded) core. We measured 100,000 handshakes for each scheme and set of network parameters.

**Handshake Times:**
Table 2 (middle) shows handshake times for a high-speed internet connection (31.1 ms RTT, 1000 Mbps bandwidth), and Table 2 (right) shows times for a slower connection (195.6 ms RTT, 10 Mbps bandwidth). In both scenarios, the client sends a request to the server, which replies, modeling an HTTP request. The time until the client receives the response is highlighted in bold.

For size-optimized KEMTLS instantiations (SSXG and SSGG), we observed a slowdown due to the high computational cost of compressed SIKE. For NTRU and module-lattice instantiations, we saw a mild increase in speed, more notable on slower connections. This effect is primarily due to smaller data transmission rather than faster computations.

The handshake times including transmission of intermediate CA certificates with GeMSS public keys (SFGG and SSGG) require more round trips due to the "standard" TCP initial congestion window (initcwnd) value of 10 MSS. Eliminating this would require increasing initcwnd to around 200 MSS. See [101, Sec. VII-C].

**CPU Cycles for Asymmetric Crypto:**
For busy Internet servers and battery-powered clients, the computational effort spent on cryptographic operations is crucial. For fast lattice-based schemes, differences in computational effort are not visible from handshake timings. Table 2 (left) reports time in milliseconds for asymmetric-crypto computations (signing, verifying, key generation, encapsulation, and decapsulation).

As with handshake times, we see the impact of slow SIKE key encapsulation and the resulting increase in computational effort when switching from TLS 1.3 with Falcon for authentication (SFXG and SFGG) to KEMTLS with SIKE for authentication (SSXG and SSGG). However, for speed-focused instantiations, we see a moderate decrease in computational effort on the client side, e.g., 16% when switching from NFFF to NNFF, excluding verification of intermediate CA certificates. More importantly, there is a significant decrease in computational effort on the server side, saving more than 75% when switching from KDDD to KKDD and almost 90% when switching from NFFF to NNFF.

#### Other Characteristics

**Who Can First Send Application Data:**
In TLS 1.3, the server can send the first application data after receiving ClientHello, in parallel with its first handshake message and before receiving an application-level request from the client. This feature is used in SMTPS to send a server banner. However, in KEMTLS, the client is ready to send application data first. This incurs a small overhead in protocols requiring the client to receive, for example, a server banner. For most typical applications, including HTTPS, this is not a problem.

**Smaller TCB in Core Handshake:**
The core KEMTLS handshake is free of signatures, reducing the trusted code base. KEMTLS servers no longer need efficient and secure implementations of signing, a routine targeted by various side-channel attacks [8, 24, 48, 60, 109]. With KEMTLS, signatures are generated in the more confined and secured environment of certificate authorities. The effect is less notable on the client side, as clients still need code to verify signatures in certificates, but this code does not deal with secret data and thus does not need side-channel protection.

**Requirements for Post-Quantum Signatures:**
Many PQ signature schemes can tweak parameters to balance signature size, signing speed, public-key size, and verification speed. Commonly, they optimize for signing speed. In KEMTLS, signatures are only needed for certificates and are computed offline, eliminating the need for low-latency signing. Important factors include signature size, public-key size, verification latency, and signing throughput for certificate authorities. Throughput can be achieved by signing the root of an XMSS or LMS tree and using the leaves to sign a batch of messages. See [80, Sec. 6] and the XMSS discussion in Appendix D.

### Conclusion and Future Work

In this paper, we presented KEMTLS, an alternative to the TLS handshake using a KEM for both key exchange and authentication, offering significant advantages in communication size and performance compared to TLS 1.3 with post-quantum signatures. Our analysis considered the worst-case scenario where a client has no prior knowledge of the server’s certificate. Investigating how KEMTLS behaves in scenarios where server public keys are known to clients and optimizing algorithm choices are interesting areas for future work.

This paper reports results for select NIST PQC Round 3 finalists and alternate candidates at NIST security level 1. Expanding benchmarks to more primitives and parameter sets is an important next step.

### Acknowledgments

We gratefully acknowledge insightful discussions with Nick Sullivan and Chris Wood, and the helpful comments of several anonymous reviewers. We thank Felix Günther for suggesting simplifying the proof of KEMTLS to rely on IND-CCA, not the more complex PRF-ODH-like assumption. We also thank Nik Unger for advice on the deniability properties of KEMTLS. This work was supported by the European Research Council through Starting Grant No. 805031 (EPOQUE) and the Natural Sciences and Engineering Research Council of Canada through Discovery grant RGPIN-2016-05146 and a Discovery Accelerator Supplement.

### References

[References listed as in the original text]

This version of the text is more structured, coherent, and professional, making it easier to read and understand.