### Code Optimization

#### Original Code
```cpp
status_t setCBIProxy (sp<cbi> cbi) {
    class SubService : public BnSubTBI {
    private:
    };

    class TService : public BnTBI {
    public:
    private:
    };
}

status_t sendSubTBI () {
    this->mCBI = cbi;
    return OK;

    sp<subTBI> subTBI = new subTBI;
    mCBI->callback(subTBI);
    return OK;
}

sp<cbi> mCBI;

// Attacker's code
status_t callback(sp<subTBI> subTBI) {
    subTBI->bofBug(0xdeadbeaf);

    class EvilCBIServer : public BnCBI {
    };

    int main() {
        sp<cbi> cbi = new EvilCBIServer;
        sp<service> service = ServiceManager::getService("tservice");
        service->setCBIProxy(cbi); // set evil cbi
        service->sendSubTBI(); // trigger the bof bug
    }
}
```

#### Optimized Code
```cpp
class SubService : public BnSubTBI {
private:
    // Private members and methods
};

class TService : public BnTBI {
public:
    // Public members and methods

private:
    // Private members and methods
};

class CBIProxy {
public:
    status_t setCBIProxy(sp<cbi> cbi) {
        mCBI = cbi;
        return OK;
    }

    status_t sendSubTBI() {
        if (!mCBI) {
            return ERROR;
        }

        sp<subTBI> subTBI = new SubTBI();
        mCBI->callback(subTBI);
        return OK;
    }

private:
    sp<cbi> mCBI;
};

class EvilCBIServer : public BnCBI {
public:
    status_t callback(sp<subTBI> subTBI) {
        subTBI->bofBug(0xdeadbeaf);
        return OK;
    }
};

int main() {
    sp<cbi> cbi = new EvilCBIServer;
    sp<service> service = ServiceManager::getService("tservice");

    if (service) {
        service->setCBIProxy(cbi); // Set evil CBI
        service->sendSubTBI(); // Trigger the BOF bug
    }

    return 0;
}
```

### Text Optimization

#### Original Text
We found two Type III vulnerabilities in the TBI IStatsd. This TBI, once induced to communicate with our CBI IPullAtomCallback, constructs and sends a Binder proxy of IPullAtomResultReceiver, whose Binder server executes in the same process with the TBI server and enjoys the same privilege. Through invoking IPullAtom-ResultReceiver’s function with malformed buffer, we can trigger two memory corruption bugs via out-of-bounds writes.

Type IV: Multiple CBIs, Multiple TBIs. Type IV is a combination of Type II and III. The attacked TBI is provided by another TBI, and the CBI causing actual damage is from another CBI crafted by the attacker. We have not found any vulnerabilities of this type, but these attack scenarios do exist in the hierarchical Binder interfaces [32] in Android system.

7 DISCUSSION
7.1 Impact of the BiTRe Attacks
Attacking Unprotected Territories. The vulnerabilities we discovered in Binder exceed those in previous studies [25, 28, 42] not only in quantity but also in damage, because we explore a new and pervasive attack surface mostly neglected by both academia and industry. Specifically, existing studies do not attend to the possibility that a Binder server returns malformed data to a system service. Moreover, Binder objects nested among the input parameters and outputs of other Binder interfaces—those involved in Type II and Type III vulnerabilities—are excluded from these studies, as they are deemed unreachable by the attacker.

Non-Triviality of Fixing BiTRe Attacks. There is no silver bullet that can eliminate the BiTRe attacks. The role-reversal case cannot be forbidden as it enables the separation of system services into different Binder servers so that their operations are mostly independent of each other, which is indispensable for Android’s security. Enabling universal mutual authentication may result in information leakage from the system services to the applications, which would invalidate, rather than improve, the security model of the C/S architecture.

7.2 Mitigating the BiTRe Attacks
Given the impossibility of a simple defense, we suggest the following mitigation efforts on three different levels.

New Protection Mechanism. Although mutual authentication is inadvisable, we observe that a Binder client can verify whether two Binder proxies are referring to the same Binder server, which leads to our following solution. We suggest introducing a new system service, registered in ServiceManager and in charge of constructing Binder servers—corresponding to those in our CBI list—for applications. This service implements strict restrictions to forbid overwriting critical functions. Applications should always commission this service to construct their Binder servers. Note that we cannot prevent an application from bypassing this requirement and constructing CBI servers by themselves; however, that should not be a problem if the next rule is enforced. Whenever a system service first transacts with a Binder server, it should query the Binder-server-construction service if the Binder server is not constructed by itself. The construction service then traverses its global object map and responds with whether the object is constructed by it. The system service aborts the transaction if a match is not found. To avoid information leakage from the Binder-server-construction service, an application, which runs in unprivileged processes, cannot query for Binder servers not commissioned by itself.

Sanitization Measures. Input validation must be enforced in all system services, regardless of whether the corresponding Binder servers/clients are trusted. However, manual sanitization during development is not adequate for ruling out all vulnerabilities. Auxiliary frameworks, such as the RLBox API [36], can be considered for mitigating unknown vulnerabilities.

Raising Awareness. BiTRe attacks should be explicitly addressed in both Android’s development and its security audits. Specifically, Android developers should refactor the Binder interfaces to avoid the transmission of active objects whenever possible, thus reducing the role-reversal cases. Security auditors should test all Binder interface functions, rather than excluding those believed to be unreachable by attackers, prioritizing CBIs with high Interface Complexity and their corresponding TBIs.

7.3 Exploring the Folded Attack Surfaces
The vulnerabilities we discovered are by no means exhaustive in the BiTRe family. Moreover, BiTRe is just one example of a greater family, where the attack surface is folded in exceptions (e.g., role reversal enabled by the active object transmission of Binder) of the designer-envisioned security model (e.g., the fixed-role C/S architecture). We suggest future research to explore these folded attack surfaces in the following directions:

Thorough Inspection of the BiTRe Attacks. Our inspection can be extended in two aspects. First, to continue reviewing TBIs and CBIs, both manually and with the help of automatic vulnerability discovery methods such as fuzzing. Second, to include Java system services and hardware/vendor services in the analysis.

BiTRe Attacks in Other Platforms. The temporary reversal of C/S roles is not unique to Android. For example, svchost, a Windows system service that hosts many Windows services, can also temporarily act as a client process to interact with a customized server received from an application [35]. The susceptibility of other systems to BiTRe attacks is worth further investigation.

Other Folded Attack Surfaces. The BiTRe attacks resemble the tip of the iceberg, where attackers exploit the inconspicuous exceptions that violate the system’s general security model to invalidate its security guarantees. Similar examples include the exceptions of sending allowed objects to Android Sandbox against the general model of isolation; the possibility to develop applications in C/C++ in Android against the general adaptation of Java. Nevertheless, these exceptions are usually ignored by both developers and researchers, whose investigations are often restrained by the vision of the system designer—even though the attackers are not. With this study, we, therefore, aim to raise the community’s awareness of these folded attack surfaces so that we can work together to unfold their mechanisms, enumerate the vulnerabilities and take precautions.

8 RELATED WORK
We first introduce three types of prior studies on Android IPC security that assumes a fixed Binder-client role of the attacker. Afterward, we highlight two other attacks that also construct Binder servers, which inspire our work.

Permission Related Vulnerabilities. Several studies [2, 12–14, 19] analyze the necessary permissions, which are sometimes not documented, to launch each developer API method. Based on these API-to-permission-set mappings, other studies, including AceDroid [1], ACMiner [22] and Kratos [39], discover that different paths visiting the same system resource may demand different sets of permissions. Further studies [18, 23] extend these studies to visit system resources indirectly via some vulnerable deputy APIs, bypassing the permission checks.

Parcel Deserialization Vulnerabilities. The XBRF risk proposed by Rosa [38] cannot cause any damage in practice, as the attack is defended by Binder’s object searching algorithm. XBRF is not similar to BiTRe: it focuses on the deserialization process and does not involve the customization of Binder servers. Another family of Parcelable mismatch bugs, first discovered by Bednarski [15] and then caught in Android Trojans in the wild [40], allow attackers to launch arbitrary components.

Input Validation Vulnerabilities. Input validation in Android is often “unstructured, ill-defined and fragmented” compared to permission checks, making it more challenging to analyze [44]. Researchers conduct code review [21], or builds systems leveraging fuzz testing [16, 20, 27, 32, 32, 43], taint analysis [42], machine learning [44] and symbolic execution [33] to find vulnerabilities in system services. For countermeasures, Android fixes numerous vulnerabilities [31] and applies multiple exploit containment measures [29] to restrain the security impact even when some processes are compromised.

Vulnerabilities Involving Customized Binder Servers. Wang et al. [42] proposed the “call me back” attack via constructing ir-responsive callback functions and resulting in a denial of service of a few system services and apps. As a case study among a series of Parcel deserialization bugs [24], He identified a vulnerability in the unmarshalling of AMessage objects. Triggering this vulnerability involves constructing a CBI Server, i.e., the IStreamSource server, and sending the malformed AMessage from IStreamSource to IMediaPlayer.

9 CONCLUSION
As Binder follows the classic C/S architecture, previous security analyses and studies were trapped by its fixed-role assumption, neglecting the fact that the role-reversal case is widely adopted by both system services and applications. In this paper, we highlighted the severe security implications of this role-reversal case: it allows the attacker to reach a large attack surface that was previously deemed unreachable, thus often unprotected. We discovered a series of vulnerabilities that exploit the attack surface from three approaches. Unfortunately, the vulnerabilities we discovered are by no means exhaustive in the BiTRe family. Neither can the countermeasures we proposed guarantee the elimination of the attack surface. We advocate developers and researchers scrutinize this folded attack surface, among others of similar nature, before they are maliciously exploited by attackers.

ACKNOWLEDGEMENTS
We would like to thank Prof. Kaiyu Shao from China University of Political Science and Law and the anonymous reviewers for their constructive comments. This work is supported by the Strategic Priority Research Program of Chinese Academy of Sciences (No. XDC02040100). Ren is partially supported by Shandong Key Research and Development Program (Grant No. 2020ZLYS09).

REFERENCES
[1] Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, and Chen Tian. 2018. AceDroid: Normalizing Diverse Android Access Control Checks for Inconsistency Detection. In NDSS.
[2] Yousra Aafer, Guanhong Tao, Jianjun Huang, Xiangyu Zhang, and Ninghui Li. 2018. Precise android api protection mapping derivation and reasoning. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 1151–1164.
[3] Yousra Aafer, Wei You, Yi Sun, Yu Shi, Xiangyu Zhang, and Heng Yin. 2021. Android SmartTVs Vulnerability Discovery via Log-Guided Fuzzing. In 30th USENIX Security Symposium (USENIX Security 21).
[4] Muath Alkhalaf, Shauvik Roy Choudhary, Mattia Fazzini, Tevfik Bultan, Alessandro Orso, and Christopher Kruegel. 2012. Viewpoints: differential string analysis for discovering client-and server-side input validation inconsistencies. In Proceedings of the 2012 International Symposium on Software Testing and Analysis. 56–66.
[5] Android Code Search. 2021. libbinder: Add SafeInterface. https://cs.android.com/android/platform/frameworks/native/+/d630e520de9ff4bc50723a7e8f91b6d9be27db1c. Accessed on Jan 31, 2021.
[6] Android Code Search. 2021. Source code of CameraService.h in AOSP. https://cs.android.com/android/platform/superproject/+/master:frameworks/av/services/camera/libcameraservice/CameraService.h?q=cameraservice. Accessed on May 7, 2021.
[7] Android developers. 2021. Android AppOpsManager. https://developer.android.com/reference/android/app/AppOpsManager. Accessed on Aug 3, 2021.
[8] Android developers. 2021. Android PermissionChecker Developer API. https://developer.android.com/reference/androidx/core/content/PermissionChecker. Accessed on July 29, 2021.
[9] Android Developers. 2021. Parcel. https://developer.android.com/reference/android/os/Parcel#active-objects. Accessed on Feb 2, 2021.
[10] Android Developers Blog. 2017. Here comes Treble: A modular base for Android. https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html. Accessed on Feb 2, 2021.
[11] Android Open Source Project. 2021. Android Interface Definition Language (AIDL). https://developer.android.com/guide/components/aidl. Accessed on Jan 31, 2021.
[12] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. 2012. PScout: analyzing the Android permission specification. In the ACM Conference on Computer and Communications Security. 217–228.
[13] Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien Octeau, and Sebastian Weisgerber. 2016. On demystifying the Android application framework: Re-visiting Android permission specification analysis. In 25th USENIX security symposium (USENIX security 16). 1101–1118.
[14] A. Bartel, J. Klein, M. Monperrus, and Y. Le Traon. 2014. Static Analysis for Extracting Permission Checks of a Large Scale Framework: The Challenges and Solutions for Analyzing Android. IEEE Transactions on Software Engineering 40, 6 (2014), 617–632.
[15] Michal Bednarski. 2017. Reparcel Bug. https://github.com/michalbednarski/ReparcelBug. Accessed on Feb 3, 2021.
[16] Cao Chen, Gao Neng, Liu Peng, and Xiang Ji. 2015. Towards Analyzing the Input Validation Vulnerabilities Associated with Android System Services. In Proceedings of the 31st Annual Computer Security Applications Conference. Association for Computing Machinery, 361–370.
[17] Haining Chen, Ninghui Li, William Enck, Yousra Aafer, and Xiangyu Zhang. 2017. Analysis of SEAndroid policies: combining MAC and DAC in Android. In Proceedings of the 33rd Annual Computer Security Applications Conference. 553–565.
[18] William Enck. 2020. Analysis of access control enforcement in Android. In Proceedings of the 25th ACM Symposium on Access Control Models and Technologies. 117–118.
[19] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner. 2011. Android permissions demystified. In Proceedings of the 18th ACM conference on Computer and communications security. 627–638.
[20] Huan Feng and Kang G Shin. 2016. BinderCracker: Assessing the Robustness of Android System Services. arXiv preprint arXiv:1604.06964 (2016).
[21] Guang Gong. 2015. Fuzzing android system services by binder call to escalate privilege. BlackHat USA (2015).
[22] Sigmund Albert Gorski, Benjamin Andow, Adwait Nadkarni, Sunil Manandhar, William Enck, Eric Bodden, and Alexandre Bartel. 2019. ACMiner: Extraction and Analysis of Authorization Checks in Android’s Middleware. In Proceedings of the Ninth ACM Conference on Data and Application Security and Privacy. 25–36.
[23] Sigmund Albert Gorski III and William Enck. 2019. ARF: identifying re-delegation vulnerabilities in Android system services. In Proceedings of the 12th Conference on Security and Privacy in Wireless and Mobile Networks. 151–161.
[24] Qidan He. 2016. Hey your Parcel Looks Bad, Fuzzing and Exploiting Parcelization vulnerabilities in Android. In BlackHat Asia, 2016.
[25] Heqing Huang, Sencun Zhu, Kai Chen, and Peng Liu. 2015. From system services freezing to system server shutdown in Android: All you need is a loop in an app. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security. 1236–1247.
[26] Jim Huang. 2012. Android IPC Mechanism. https://www.slideshare.net/jserv/android-ipc-mechanism.
[27] Antonio Ken Iannillo, Roberto Natella, Domenico Cotroneo, and Cristina Nita-Rotaru. 2017. Chizpurfle: A gray-box Android fuzzer for vendor service customizations. In IEEE 28th International Symposium on Software Reliability Engineering (ISSRE). 1–11.
[28] Wang Kai, Zhang Yuqing, Liu Qixu, and Fan Dan. 2015. A fuzzing test for dynamic vulnerability detection on Android Binder mechanism. In IEEE Conference on Communications and Network Security (CNS). 709–710.
[29] Nick Kralevich. 2017. Honey, I Shrunk the Attack Surface – Adventures in Android Security Hardening.
[30] Chris Lattner. 2008. LLVM and Clang: Next generation compiler technology. In The BSD conference, Vol. 5.
[31] Mario Linares-Vásquez, Gabriele Bavota, and Camilo Escobar-Velásquez. 2017. An empirical study on Android-related vulnerabilities. In IEEE/ACM 14th International Conference on Mining Software Repositories (MSR). IEEE, 2–13.
[32] Baozheng Liu, Chao Zhang, Guang Gong, Yishun Zeng, Haifeng Ruan, and Jianwei Zhuge. 2020. FANS: Fuzzing Android Native System Services via Automated Interface Analysis. In 29th USENIX Security Symposium (USENIX Security).
[33] Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu, Limin Liu, Neng Gao, Min Yang, Xinyu Xing, and Peng Liu. 2017. System service call-oriented symbolic execution of Android framework with applications to vulnerability discovery and exploit generation. In Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services. 225–238.
[34] Pratyusa K Manadhata and Jeannette M Wing. 2010. An attack surface metric. IEEE Transactions on Software Engineering 37, 3 (2010), 371–386.
[35] Microsoft Security Update Guide. 2020. CVE-2020-1393 Windows Diagnostics Hub Elevation of Privilege Vulnerability. https://msrc.microsoft.com/update-guide/vulnerability/CVE-2020-1393. Accessed on Jan 31, 2021.
[36] Shravan Narayan, Craig Disselkoen, Tal Garfinkel, Nathan Froyd, Eric Rahm, Sorin Lerner, Hovav Shacham, and Deian Stefan. 2020. Retrofitting fine grain isolation in the Firefox renderer. In 29th {USENIX} Security Symposium ({USENIX} Security 20). 699–716.
[37] Stephen Hines Nick Desaulniers, Greg Hackmann. 2021. Compiling Android userspace and Linux Kernel with LLVM. https://llvm.org/devmtg/2017-10/slides/Hines-CompilingAndroidKeynote.pdf. Accessed on Jan 31, 2021.
[38] Tomáš Rosa. 2011. Android Binder Security Note: On Passing Binder Through Another Binder. https://crypto.hyperlink.cz/files/xbinder.pdf. Accessed on Feb 2, 2021.
[39] Yuru Shao, Qi Alfred Chen, Zhuoqing Morley Mao, Jason Ott, and Zhiyun Qian. 2016. Kratos: Discovering Inconsistent Security Policy Enforcement in the Android Framework.. In NDSS.
[40] SUDONULL. 2019. EvilParcel Vulnerability Analysis. https://sudonull.com/post/26295-EvilParcel-Vulnerability-Analysis-Doctor-Web-Blog. Accessed on Feb 3, 2021.
[41] Tuna. 2021. Monthly tarball of AOSP. https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/. Accessed on May 6, 2021.
[42] Kai Wang, Yuqing Zhang, and Peng Liu. 2016. Call Me Back! Attacks on System Server and System Apps in Android Through Synchronous Callback. In ACM SIGSAC Conference on Computer and Communications Security. 92–103.
[43] J. Wu, S. Liu, S. Ji, M. Yang, T. Luo, Y. Wu, and Y. Wang. 2017. Exception beyond Exception: Crashing Android System by Trapping in "Uncaught Exception". In IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP). 283–292.
[44] Lei Zhang, Zhemin Yang, Yuyu He, Zhenyu Zhang, Zhiyun Qian, Geng Hong, Yuan Zhang, and Min Yang. 2018. Invetter: Locating insecure input validations in android services. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 1165–1178.
[45] Walter Zimmer. 1995. Relationships between design patterns. Pattern languages of program design 57 (1995), 345–364.

#### Optimized Text

**Type III Vulnerabilities in TBI IStatsd**

We identified two Type III vulnerabilities in the TBI IStatsd. When this TBI is induced to communicate with our CBI IPullAtomCallback, it constructs and sends a Binder proxy of IPullAtomResultReceiver. The Binder server for this proxy runs in the same process as the TBI server, sharing the same privileges. By invoking the IPullAtomResultReceiver function with a malformed buffer, we can trigger two memory corruption bugs through out-of-bounds writes.

**Type IV: Multiple CBIs, Multiple TBIs**

Type IV vulnerabilities combine elements of Type II and Type III. In this scenario, the attacked TBI is provided by another TBI, while the CBI causing the actual damage is crafted by the attacker. Although we have not found any specific vulnerabilities of this type, these attack scenarios do exist in the hierarchical Binder interfaces within the Android system [32].

**7. Discussion**

**7.1 Impact of BiTRe Attacks**

**Attacking Unprotected Territories**

The vulnerabilities we discovered in Binder surpass those in previous studies [25, 28, 42] both in quantity and severity. Our findings explore a new and pervasive attack surface that has been largely overlooked by both academia and industry. Specifically, existing studies do not consider the possibility that a Binder server might return malformed data to a system service. Additionally, Binder objects nested within the input parameters and outputs of other Binder interfaces—involved in Type II and Type III vulnerabilities—are typically excluded from these studies, as they are deemed unreachable by attackers.

**Non-Triviality of Fixing BiTRe Attacks**

There is no straightforward solution to eliminate BiTRe attacks. The role-reversal case, where a Binder server acts as a client, is essential for separating system services into different Binder servers, ensuring their operations are largely independent. This is crucial for Android's security. Universal mutual authentication, while theoretically beneficial, could lead to information leakage from system services to applications, thereby invalidating the C/S security model.

**7.2 Mitigating BiTRe Attacks**

Given the complexity of defending against BiTRe attacks, we propose the following mitigation strategies at three different levels:

**New Protection Mechanism**

Although mutual authentication is not advisable, we observed that a Binder client can verify whether two Binder proxies refer to the same Binder server. We suggest introducing a new system service, registered in ServiceManager, to construct Binder servers for applications. This service would enforce strict restrictions to prevent overwriting critical functions. Applications should use this service to construct their Binder servers. While we cannot prevent an application from bypassing this requirement, the next rule ensures that a system service queries the Binder-server-construction service to verify the origin of the Binder server before proceeding with a transaction. If the Binder server is not constructed by the service, the transaction is aborted. To prevent information leakage, unprivileged applications cannot query for Binder servers not commissioned by themselves.

**Sanitization Measures**

Input validation must be enforced in all system services, regardless of the trust level of the corresponding Binder servers/clients. Manual sanitization during development is insufficient to eliminate all vulnerabilities. Auxiliary frameworks, such as the RLBox API [36], can be used to mitigate unknown vulnerabilities.

**Raising Awareness**

BiTRe attacks should be explicitly addressed in both Android's development and security audits. Developers should refactor Binder interfaces to avoid the transmission of active objects, thereby reducing role-reversal cases. Security auditors should test all Binder interface functions, including those believed to be unreachable by attackers, with a focus on CBIs with high Interface Complexity and their corresponding TBIs.

**7.3 Exploring Folded Attack Surfaces**

The vulnerabilities we discovered are not exhaustive in the BiTRe family. BiTRe is an example of a broader category where the attack surface is hidden in exceptions to the designer-envisioned security model, such as the fixed-role C/S architecture. Future research should explore these folded attack surfaces in the following directions:

**Thorough Inspection of BiTRe Attacks**

Our inspection can be extended in two ways: continuing to review TBIs and CBIs both manually and with automated vulnerability discovery methods like fuzzing, and including Java system services and hardware/vendor services in the analysis.

**BiTRe Attacks in Other Platforms**

The temporary reversal of C/S roles is not unique to Android. For instance, svchost, a Windows system service, can temporarily act as a client process to interact with a customized server received from an application [35]. The susceptibility of other systems to BiTRe attacks warrants further investigation.

**Other Folded Attack Surfaces**

BiTRe attacks are just the tip of the iceberg, where attackers exploit subtle exceptions that violate the system's general security model. Similar examples include sending allowed objects to the Android Sandbox, which contradicts the general model of isolation, and developing applications in C/C++ in Android, which goes against the general adaptation of Java. These exceptions are often ignored by developers and researchers, whose investigations are constrained by the system designer's vision. Our study aims to raise awareness of these folded attack surfaces, enabling the community to work together to uncover their mechanisms, enumerate vulnerabilities, and implement preventive measures.

**8. Related Work**

**Permission-Related Vulnerabilities**

Several studies [2, 12–14, 19] analyze the necessary permissions, sometimes undocumented, required to launch each developer API method. Based on these API-to-permission-set mappings, other studies, such as AceDroid [1], ACMiner [22], and Kratos [39], have discovered that different paths to the same system resource may require different sets of permissions. Further studies [18, 23] extend these findings to include indirect access to system resources via vulnerable deputy APIs, bypassing permission checks.

**Parcel Deserialization Vulnerabilities**

The XBRF risk proposed by Rosa [38] is not a practical threat, as it is defended by Binder's object searching algorithm. XBRF differs from BiTRe in that it focuses on the deserialization process and does not involve the customization of Binder servers. Another family of Parcelable mismatch bugs, first discovered by Bednarski [15] and later found in Android Trojans in the wild [40], allows attackers to launch arbitrary components.

**Input Validation Vulnerabilities**

Input validation in Android is often "unstructured, ill-defined, and fragmented" compared to permission checks, making it more challenging to analyze [44]. Researchers use various methods, such as code review [21], fuzz testing [16, 20, 27, 32, 32, 43], taint analysis [42], machine learning [44], and symbolic execution [33], to identify vulnerabilities in system services. For countermeasures, Android has fixed numerous vulnerabilities [31] and implemented multiple exploit containment measures [29] to limit the security impact even when some processes are compromised.

**Vulnerabilities Involving Customized Binder Servers**

Wang et al. [42] proposed the "call me back" attack, which involves constructing unresponsive callback functions, leading to a denial of service for several system services and apps. As part of a series of Parcel deserialization bugs [24], He identified a vulnerability in the unmarshalling of AMessage objects. Triggering this vulnerability requires constructing a CBI server, specifically the IStreamSource server, and sending a malformed AMessage from IStreamSource to IMediaPlayer.

**9. Conclusion**

Binder follows the classic C/S architecture, and previous security analyses and studies have been limited by the fixed-role assumption, neglecting the widespread adoption of role-reversal cases in both system services and applications. In this paper, we highlighted the severe security implications of these role-reversal cases, which allow attackers to access a large, previously unreachable, and often unprotected attack surface. We discovered a series of vulnerabilities exploiting this attack surface through three approaches. Unfortunately, the vulnerabilities we identified are not exhaustive in the BiTRe family, and the countermeasures we proposed cannot guarantee the complete elimination of the attack surface. We urge developers and researchers to scrutinize this folded attack surface, along with others of a similar nature, before they are maliciously exploited by attackers.

**Acknowledgements**

We would like to thank Prof. Kaiyu Shao from China University of Political Science and Law and the anonymous reviewers for their constructive comments. This work is supported by the Strategic Priority Research Program of the Chinese Academy of Sciences (No. XDC02040100). Ren is partially supported by the Shandong Key Research and Development Program (Grant No. 2020ZLYS09).

**References**

[1] Yousra Aafer, Jianjun Huang, Yi Sun, Xiangyu Zhang, Ninghui Li, and Chen Tian. 2018. AceDroid: Normalizing Diverse Android Access Control Checks for Inconsistency Detection. In NDSS.
[2] Yousra Aafer, Guanhong Tao, Jianjun Huang, Xiangyu Zhang, and Ninghui Li. 2018. Precise Android API Protection Mapping Derivation and Reasoning. In Proceedings of the 2018 ACM SIGSAC Conference on Computer and Communications Security. 1151–1164.
[3] Yousra Aafer, Wei You, Yi Sun, Yu Shi, Xiangyu Zhang, and Heng Yin. 2021. Android SmartTVs Vulnerability Discovery via Log-Guided Fuzzing. In 30th USENIX Security Symposium (USENIX Security 21).
[4] Muath Alkhalaf, Shauvik Roy Choudhary, Mattia Fazzini, Tevfik Bultan, Alessandro Orso, and Christopher Kruegel. 2012. Viewpoints: Differential String Analysis for Discovering Client- and Server-Side Input Validation Inconsistencies. In Proceedings of the 2012 International Symposium on Software Testing and Analysis. 56–66.
[5] Android Code Search. 2021. libbinder: Add SafeInterface. https://cs.android.com/android/platform/frameworks/native/+/d630e520de9ff4bc50723a7e8f91b6d9be27db1c. Accessed on Jan 31, 2021.
[6] Android Code Search. 2021. Source Code of CameraService.h in AOSP. https://cs.android.com/android/platform/superproject/+/master:frameworks/av/services/camera/libcameraservice/CameraService.h?q=cameraservice. Accessed on May 7, 2021.
[7] Android Developers. 2021. Android AppOpsManager. https://developer.android.com/reference/android/app/AppOpsManager. Accessed on Aug 3, 2021.
[8] Android Developers. 2021. Android PermissionChecker Developer API. https://developer.android.com/reference/androidx/core/content/PermissionChecker. Accessed on July 29, 2021.
[9] Android Developers. 2021. Parcel. https://developer.android.com/reference/android/os/Parcel#active-objects. Accessed on Feb 2, 2021.
[10] Android Developers Blog. 2017. Here Comes Treble: A Modular Base for Android. https://android-developers.googleblog.com/2017/05/here-comes-treble-modular-base-for.html. Accessed on Feb 2, 2021.
[11] Android Open Source Project. 2021. Android Interface Definition Language (AIDL). https://developer.android.com/guide/components/aidl. Accessed on Jan 31, 2021.
[12] Kathy Wain Yee Au, Yi Fan Zhou, Zhen Huang, and David Lie. 2012. PScout: Analyzing the Android Permission Specification. In the ACM Conference on Computer and Communications Security. 217–228.
[13] Michael Backes, Sven Bugiel, Erik Derr, Patrick McDaniel, Damien Octeau, and Sebastian Weisgerber. 2016. On Demystifying the Android Application Framework: Re-Visiting Android Permission Specification Analysis. In 25th USENIX Security Symposium (USENIX Security 16). 1101–1118.
[14] A. Bartel, J. Klein, M. Monperrus, and Y. Le Traon. 2014. Static Analysis for Extracting Permission Checks of a Large-Scale Framework: The Challenges and Solutions for Analyzing Android. IEEE Transactions on Software Engineering 40, 6 (2014), 617–632.
[15] Michal Bednarski. 2017. Reparcel Bug. https://github.com/michalbednarski/ReparcelBug. Accessed on Feb 3, 2021.
[16] Cao Chen, Gao Neng, Liu Peng, and Xiang Ji. 2015. Towards Analyzing the Input Validation Vulnerabilities Associated with Android System Services. In Proceedings of the 31st Annual Computer