# Tamper-Resistant, Application-Aware Blocking of Malicious Network Traffic

## 54
**Authors: A. Srivastava and J. Giﬃn**

### Table 3: Time (in seconds) to Transfer a 175 MB File Between dom0 and domU, With and Without VMwall

| Direction                      | Without VMwall | With VMwall | Overhead |
|--------------------------------|----------------|-------------|----------|
| File Transfer from Dom0 to DomU | 1.105          | 1.179       | 7%       |
| File Transfer from DomU to Dom0 | 1.133          | 1.140       | 1%       |

### Table 4: Single TCP Connection Setup Time (in μs) Measured Both With and Without VMwall Inside dom0

| Direction                      | Without VMwall | With VMwall | Overhead |
|--------------------------------|----------------|-------------|----------|
| Connection from Dom0 to DomU   | 197            | 465         | 268      |
| Connection from DomU to Dom0   | 143            | 1266        | 1123     |

The median overhead imposed by VMwall is less than 7% when transferring from dom0 to domU, and less than 1% when executing the reverse transfer.

## Performance Evaluation

Our second metric evaluated the impact of VMwall on connection or data stream setup time as perceived by applications executing in domU. For processes using TCP, we measured both the inbound and outbound TCP connection setup time. For software using UDP, we measured the time to transfer a small block of data to a process in the other domain and to have the block echoed back.

We created a simple TCP client-server program to measure TCP connection times. The client program measured the time required to connect to the server, as shown in Table 4. Inbound connections completed quickly, exhibiting a median overhead of only 268 μs. Outbound connections from domU to dom0 had a greater median overhead of 1123 μs, primarily due to the high introspection time for outbound connections. Although VMwall’s connection setup overhead may seem high as a percentage, the actual overhead remains slight. Moreover, the introspection cost at connection setup is a one-time cost that gets amortized over the duration of the connection.

We also measured the time required to transmit a small block of data and receive an echo reply to evaluate the UDP stream setup cost. We wrote a simple UDP echo client and server and measured the round-trip time required for the echo reply. Note that only the first UDP packet required introspection; the echo reply was rapidly handled by a rule in the VMwall kernel module created when processing the first packet. We again have both inbound and outbound measurements, as shown in Table 5. The cost of VMwall is small, incurring slowdowns of 381 μs and 577 μs, respectively.

VMwall currently partially optimizes its performance, and additional improvements are possible. VMwall performs introspection once per connection so that further packets from the same connection are allowed or blocked based on the in-kernel rule table. Future work could improve VMwall’s performance by introducing a caching mechanism to the introspection operation. The VMwall introspection routine traverses the guest OS data structures to perform correlation. To traverse a data structure, the memory page containing the data structure needs to be mapped, which is a costly operation. One possible improvement would be to support caching mechanisms inside VMwall’s user agent to cache frequently used memory pages and avoid costly memory mapping operations each time.

### Table 5: Single UDP Echo-Reply Stream Setup Time (in μs) with and without VMwall

| Direction                      | Without VMwall | With VMwall | Overhead |
|--------------------------------|----------------|-------------|----------|
| Inbound Initiated              | 434            | 815         | 381      |
| Outbound Initiated             | 271            | 848         | 577      |

## 6.4 Security Analysis

VMwall relies on specific data structures maintained by the domU kernel. An attacker who fully controls domU could violate the integrity of these data structures in an attempt to bypass VMwall’s introspection. To counter such attacks, we rely on previous work in kernel integrity protection. Petroni et al. [26] proposed a framework for detecting attacks against dynamic kernel data structures such as task structs. Their monitoring system executed outside the monitored kernel and detected any semantic integrity violations against the kernel’s dynamic data. The system protected the integrity of the data structures with an external monitor that enforced high-level integrity policies. In another work, Loscocco et al. [19] introduced a system that used virtualization technology to monitor a Linux kernel’s operational integrity. These types of techniques ensure that the kernel data structures read by VMwall remain valid.

Attackers can also try to cloak their malware by appearing to be whitelisted software. An attacker can guess processes that are in VMwall’s whitelist by observing the incoming and outgoing traffic from the host and determining which processes legally communicate over the network. They can then rename their malicious binary to the name of a process in the whitelist. VMwall counters this problem by extracting the full path to the process on the guest machine. Attackers could then replace the complete program binary with a trojaned version to evade the full path verification. VMwall itself has no defenses against this attack, but previous research has already addressed this problem with disk monitoring utilities that protect critical files [8, 25].

An attacker could hijack a process by exploiting a vulnerability and then change its in-memory image. To address this problem, the VMwall user-space process can perform checksumming of the in-memory image of the process through introspection and compare it with a previously stored hash value. However, this process is time-consuming and may affect the connection setup time for an application.

An attacker could also hijack a connection after it has been established and verified by VMwall as legitimate. They could take control of the process bound to the port via a software exploit, or they could use a malicious kernel module to alter packet data before sending it to the virtual network interface. VMwall can counter certain instances of connection hijacking by timing out entries in its kernel rule table periodically. Subtle hijacking may require deep packet inspection within VMwall.

VMwall’s kernel module internally maintains a small buffer to keep a copy of a packet while performing introspection. An attacker may try to launch a denial of service (DoS) attack, such as a SYN flood [5], against VMwall by saturating its internal buffer. VMwall remains robust to such attempted attacks because its buffer is independent of connection status. As soon as VMwall resolves the process name bound to a connection, it removes the packet from the buffer and does not wait for a TCP handshake to complete.

## 7 Conclusions and Future Work

We set out to design an application-oriented firewall resistant to the direct attacks that bring down these security utilities today. Our system, VMwall, remains protected from attack by leveraging virtual machine isolation. Although it is a distinct virtual machine, it can recover process-level information of the vulnerable system by using virtual machine introspection to correlate network flows with processes bound to those flows. We have shown the efficacy of VMwall by blocking backdoor, bot, and worm traffic emanating from the monitored system. Our malicious connection detection operates with reasonable overheads upon system performance.

Our current implementation operates for guest Linux kernels. VMwall could be made to work with Microsoft Windows operating systems if it can be programmed with knowledge of the data structures used by the Windows kernel. Since VMwall depends on the guest operating system’s data structures to perform network and process correlation, it currently cannot be used for Windows-based guest systems. Recently, XenAccess started providing the ability to map Windows kernel memory into dom0 in the same way as done for Linux. If we have a means to identify and map Windows kernel data structures, then network and process correlation becomes possible.

## Acknowledgment of Support and Disclaimer

This material is based upon work supported by the Defense Advanced Research Projects Agency and the United States Air Force under contract number FA8750-06-C-0182. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the Defense Advanced Research Projects Agency and the United States Air Force.

We thank the anonymous reviewers for their comments that improved the quality of the paper. We also thank Steve Dawson of SRI International for his assistance with this project. Portions of this work were performed while Abhinav Srivastava was at SRI International.

## References

[1] Baliga, A., Kamat, P., Iftode, L.: Lurking in the shadows: Identifying systemic threats to kernel data. In: IEEE Symposium on Security and Privacy, Oakland, CA (May 2007)

[2] Barham, P., Dragovic, B., Fraser, K., Hand, S., Harris, T., Ho, A., Neugebauer, R., Pratt, I., Warfield, A.: Xen and the art of virtualization. In: 19th ACM Symposium on Operating Systems Principles (SOSP), Bolton Landing, NY (October 2003)

[3] Bellovin, S.: Distributed firewalls. login (November 1999)

[4] Borders, K., Zhao, X., Prakash, A.: Siren: Catching evasive malware. In: IEEE Symposium on Security and Privacy, Oakland, CA (May 2005)

[5] CERT. TCP SYN Flooding and IP Spoofing Attacks. CERT Advisory CS-1996-21 (Last accessed April 4, 2008), http://www.cert.org/advisories/CA-1996-21.html

[6] Check Point. ZoneAlarm (Last accessed April 4, 2008), http://www.zonealarm.com/store/content/home.jsp

[7] Community Developers. Ebtables (Last accessed November 1, 2007), http://ebtables.sourceforge.net/

[8] Community Developers. Tripwire (Last accessed November 1, 2007), http://sourceforge.net/projects/tripwire/

[9] Garfinkel, T., Pfaff, B., Chow, J., Rosenblum, M., Boneh, D.: Terra: A virtual machine-based platform for trusted computing. In: ACM Symposium on Operating Systems Principles (SOSP), October 2003, Bolton Landing, NY (2003)

[10] Garfinkel, T., Rosenblum, M.: A virtual machine introspection based architecture for intrusion detection. In: Network and Distributed System Security Symposium (NDSS), San Diego, CA, February (2003)

[11] Garfinkel, T., Rosenblum, M., Boneh, D.: Flexible OS support and applications for trusted computing. In: 9th Hot Topics in Operating Systems (HOTOS), Lihue, HI (May 2003)

[12] Oskoboiny, G.: Whitelist-based spam filtering (Last accessed April 4, 2008), http://impressive.net/people/gerald/2000/12/spam-filtering.html

[13] Grok. Coromputer Dunno (Last accessed April 4, 2008), http://lists.grok.org.uk/pipermail/full-disclosure/attachments/20070911/87396911/attachment-0001.txt

[14] Honeynet Project. Q8 (Last accessed April 4, 2008), http://www.honeynet.org/papers/bots/

[15] Ioannidis, S., Keromytis, A., Bellovin, S., Smith, J.: Implementing a distributed firewall. In: ACM Conference on Computer and Communications Security (CCS), Athens, Greece (November 2000)

[16] Jiang, X., Wang, X.: Out-of-the-box monitoring of VM-based high-interaction honeypots. In: Kruegel, C., Lippmann, R., Clark, A. (eds.) RAID 2007. LNCS, vol. 4637, pp. 198–218. Springer, Heidelberg (2007)

[17] Jiang, X., Wang, X., Xu, D.: Stealthy malware detection through VMM-based 'out-of-the-box' semantic view. In: 14th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA (November 2007)

[18] LKCD Project. LKCD - Linux Kernel Crash Dump (Last accessed April 4, 2008), http://lkcd.sourceforge.net/

[19] Loscocco, P.A., Wilson, P.W., Pendergrass, J.A., McDonell, C.D.: Linux kernel integrity measurement using contextual inspection. In: 2nd ACM Workshop on Scalable Trusted Computing (STC), Alexandria, VA (November 2007)

[20] McAfee. BackDoor-Rev.b. (Last accessed April 4, 2008), http://vil.nai.com/vil/Content/v 136510.htm

[21] Mogul, J., Rashid, R., Accetta, M.: The packet filter: An efficient mechanism for user-level network code. In: ACM Symposium on Operating Systems Principles (SOSP), Austin, TX (November 1987)

[22] Packet Storm (Last accessed April 4, 2008), http://packetstormsecurity.org/UNIX/penetration/rootkits/bdoor.c,blackhole.c,cheetah.c,server.c,ovas0n.c

[23] Packet Storm (Last accessed April 4, 2008), http://packetstormsecurity.org/0209-exploits/apache-ssl-bug.c,apache-linux.txt

[24] Packet Storm. Kaiten (Last accessed April 4, 2008), http://packetstormsecurity.org/irc/kaiten.c

[25] Payne, B.D., Carbone, M., Lee, W.: Secure and flexible monitoring of virtual machines. In: 23rd Annual Computer Security Applications Conference (ACSAC), Miami, FL (December 2007)

[26] Petroni Jr., N.L., Fraser, T., Walters, A., Arbaugh, W.A.: An architecture for specification-based detection of semantic integrity violations in kernel dynamic data. In: 15th USENIX Security Symposium, Vancouver, BC, Canada (August 2006)

[27] Petroni Jr., N.L., Hicks, M.: Automated detection of persistent kernel control-flow attacks. In: 14th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA (November 2007)

[28] Ta-Min, R., Litty, L., Lie, D.: Splitting interfaces: Making trust between applications and operating systems configurable. In: Symposium on Operating System Design and Implementation (OSDI), Seattle, WA (October 2006)

[29] Venema, W.: TCP wrapper: Network monitoring, access control, and booby traps. In: USENIX UNIX Security Symposium, Baltimore, MD (September 1992)

[30] Whitaker, A., Cox, R.S., Shaw, M., Gribble, S.D.: Constructing services with interposable virtual hardware. In: 1st Symposium on Networked Systems Design and Implementation (NSDI), San Francisco, CA (March 2004)

[31] XenAccess Project. XenAccess Library (Last accessed April 4, 2008), http://xenaccess.sourceforge.net/

[32] Xu, M., Jiang, X., Sandhu, R., Zhang, X.: Towards a VMM-based usage control framework for OS kernel integrity protection. In: 12th ACM Symposium on Access Control Models and Technologies (SACMAT), Sophia Antipolis, France (June 2007)

[33] Yin, H., Song, D., Egele, M., Kruegel, C., Kirda, E.: Panorama: Capturing system-wide information flow for malware detection and analysis. In: ACM Conference on Computer and Communications Security (CCS), Arlington, VA (October 2007)