# On the State of ECN and TCP Options on the Internet

**Authors:**
- Mirja Kühlewind, Sebastian Neuner
  - Institute of Communication Networks and Computer Engineering (IKR)
  - University of Stuttgart, Germany
- Brian Trammell
  - Communication Systems Group, ETH Zürich, Switzerland

## Abstract

Explicit Congestion Notification (ECN) is a TCP/IP extension that can avoid packet loss and thus improve network performance. Despite being standardized in 2001, its deployment remains limited in today's Internet. This study, building on previous active measurement studies over the past decade, shows a significant and continued increase in the deployment of ECN-capable servers and the usability of ECN on the majority of paths to such servers. We also present new measurements of ECN on IPv6, passive observations of actual ECN usage from flow data, and observations on other congestion-relevant TCP options (SACK, Timestamps, and Window Scaling). Additionally, we introduce initial work on burst loss metrics for loss-based congestion control, derived from our findings.

## 1. Introduction

Since the initial design of TCP, various extensions have been developed to enhance its throughput and congestion control characteristics. Explicit Congestion Notification (ECN) is a TCP/IP extension that allows congestion signaling without packet loss. Although it has been shown to offer performance benefits [1] and has been a standard since 2001 [2,3], ECN deployment has been slow. Initial issues, such as middleboxes clearing the ECN IP bits or dropping packets indicating ECN capability, and firewalls resetting ECN-capable connections [4], led to mistrust of ECN.

In this work, we examine the current state of ECN deployment, adding another data point to a series of active measurements of ECN usage spanning a decade. We also measured the usage of three other congestion-control-relevant TCP options: Selective Acknowledgment (SACK) [5], Timestamps (TS), and Window Scale (WS) [6]. SACK allows more precise signaling of loss, TS improves round-trip-time estimation, and WS allows a larger receiver window.

Our methodology includes active probing of the ECN-readiness of a large set of popular web servers (Section 3.1) and passive measurement of ECN usage from flow data collected on a national-scale research and education network (Section 3.2).

**Acknowledgments:**
This work is partly funded by ETICS and mPlane, FP7 research projects supported by the EU. We thank SWITCH for providing the flow data used in this study.

**Citation:**
M. Roughan and R. Chang (Eds.) PAM 2013, LNCS 7799, pp. 135–144, 2013.
c© Springer-Verlag Berlin Heidelberg 2013

## 2. Explicit Congestion Notiﬁcation (ECN): A Review

ECN allows routers using Active Queue Management (AQM) (e.g., Random Early Detection (RED)) to mark packets in case of congestion instead of dropping them. Two bits in the IP header provide four possible marks: No-ECN (00), Congestion Experienced (CE, 11), and two codepoints for ECN-Capable Transport (ECT(0), 01; and ECT(1), 10). An ECN-capable sender sets ECT(0) or ECT(1), which can be changed to CE by a router to signal congestion.

ECN uses two additional flags in the TCP header: ECN-Echo (ECE) is set on all packets from the receiver back to the sender to signal the arrival of a CE-marked packet until the sender sets Congestion Window Reduced (CWR) to acknowledge the ECE. These flags are also used to negotiate ECN usage: a connection initiator requests ECN by setting ECE and CWR on the initial SYN, and the responder acknowledges by setting ECE on the SYN/ACK. After successfully completing the negotiation, the senders can set an ECT codepoint on all subsequent packets over the connection.

Today, ECN is implemented in most operating systems (see Table 1). However, even if enabled by default, it is often in "server mode" only: ECN will be negotiated if requested by a remote node initiating a connection, but connections opened by the node will not attempt to negotiate ECN usage.

## 3. Measurement Methodology

### 3.1 Active Probing of Web Servers

We measure ECN-readiness and usage of options by sending a TCP SYN with ECN negotiation and the SACK, TS, and WS options enabled to a target server, immediately closing the connection by sending a FIN. The resulting SYN/ACK responses are captured using tcpdump and evaluated offline using scapy, an open-source Python-based framework for manipulation and evaluation of TCP packets. The target servers were selected from the Alexa Top 100,000 web servers list, as resolved by the Google public DNS server. If more than one IP address was resolved, we chose the first under the assumption that all servers operated by one provider have the same configuration.

We implemented a tool, also based on scapy, to determine whether ECN is usable on a path to a target. First, it generates a SYN with ECN negotiation. If the target is ECN-capable, it then sends one data segment with the CE codepoint set, and evaluates whether ECE was set on the corresponding ACK.

We estimated the operating system in use at the target by evaluating the IP Time-to-Live (TTL) of the response. When the TTL is smaller than 64, we assume Linux/BSD, 128 for Windows, and 255 for Solaris. We also checked the number of hops to be smaller than 64 based on ICMP traceroute. However, this is not a reliable indication, as the initial TTL is configurable; a conspicuous exception is Google, which generally uses Linux but a TTL of 255.

The measurements were performed on a Linux host located in the University of Stuttgart network, connected via the Baden-Württemberg extended LAN (BelWü) to the DE-CIX Internet exchange in Frankfurt. We also performed these measurements over two German mobile network providers (O2 and Vodafone) and obtained similar results for both.

### 3.2 Analysis of Aggregated Flow Data

While active measurement shows increasing deployment of ECN-ready web servers, it provides no information on the actual use of ECN in the network. To measure this, we examined NetFlow version 9 flow data collected from the border of SWITCH, the Swiss national research and education network. This network originates about 2.4M IPv4 addresses (the rough equivalent of a /11), with typical daily traffic volumes on the order of 100 TB, and contains both client machines and servers for universities.

Our methodology focuses on counting distinct sources, to give us a number comparable to that produced by active measurements. Our flow data unfortunately does not include the TCP flags used for ECN negotiation; however, it does include the ECN Field in the IP header for the first packet observed in each flow record. Since the first packet in an ECN TCP flow is not ECN-capable, we observe continued flows: records created after an existing record for a long-lived flow is exported on active timeout (in the measured data, 300s). These capture the ECN field from mid-flow. So, in a given time interval, we count any source address appearing in at least one continued TCP flow record with either the ECT(0) or ECT(1) codepoint set as an ECN-capable source. We note this presents only a lower bound for ECN-capable sources, as it will not count any source which never sends a flow longer than the active timeout.

## 4. Results

### 4.1 ECN and TCP Option Deployment

We first measured ECN and TCP option support in web servers in April 2012. As shown in Table 3, 25.16% of web servers negotiated ECN, a substantial increase over that measured by Bauer [9] using a compatible methodology and comparable set of hosts. We measured again in August 2012 (Table 4) and found a further increase to 29.48% using the current Alexa list, or 29.35% using the set of targets probed in April. We presume that operating system upgrades are the primary cause of increased ECN deployment, as ECN has been supported by all major OSes only since 2007 (see Table 1).

We find that ECN is still less supported than SACK, TS, and WS, though these latter three show no discernible trend between April and August. We also find that ECN is far better supported on Linux hosts (TTLs less than 64) than on Windows (TTL between 64 and 128) or Solaris (TTL greater than 128). 

To validate the start TTL estimates, we checked the path length of the top 10,000 servers to ensure less than 64 hops. The minimum path length was 10 hops, as there are 9 hops within the BelWü network; the median was 17.47 hops, the maximum 29, and the mode 13; further investigations are needed on this last point to check for caching or CDNs in Frankfurt.

With respect to ECN usability on the path, we tested 22,487 hosts in August 2012 which had negotiated ECN. Of these, 20,441 (90.9%) sent an ECE in response to a CE. 1,846 (8.2%) replied with an ACK without ECE, and 200 (0.9%) sent no ACK at all. These 9% of cases where ECN is not usable represent middleboxes that clear CE, drop packets with CE set, or implementation errors at the endpoints. Additionally, experiments on two UMTS networks showed 100% ECN support but 0% ECN feedback; we presume due to an ECN-capable HTTP proxy setup and clearing of CE in the mobile network. In any case, these observations show that middleboxes can still significantly affect the end-to-end use of ECN in the network.

We observed one curiosity in our options measurements: with our latest measurement run in September 2012 (31.2% ECN-capable), we also probed all servers without ECN or any options, to check general responsiveness. We found 429 more unique hosts responding to a SYN without any TCP extension. 828 out of 78,204 unique hosts (1.06%) attempted to use SACK in the SYN/ACK even if not requested. 294 (0.38%) similarly attempted to use WS, most of them presumably Windows hosts. None responded with TS or ECT. Moreover, while probing facebook.com, we observed oscillation in RTT between about 100 ms and 150 ms, with an irregular period on the order of hours. This is indicative of load balancing between data centers on the (US) east and west coasts.

### 4.2 ECN Deployment on IPv6

We investigated the use of ECN over IPv6 in April and August, as well as during the World IPv6 Launch event on June 6, 2012; the results are shown in Table 5. Here we find more support for ECN (47.52%) than over IPv4, as well as more support for other TCP options, but without a comparable increase over time. There was a significant increase in the proportion of Alexa Top 100,000 web servers supporting IPv6 after the World IPv6 launch, though only 2.28% support IPv6 as of August 2012. Most IPv6 servers have been installed within the last two years, so we expect greater ECN support in IPv6: these systems should be more up-to-date than average.

### 4.3 Passive Measurement of ECN Adoption

Using the methodology in Section 3.2, we examined data for the full day of Wednesday, August 29, 2012, from midnight local time, from four of six border routers. Our results are not particularly surprising: while hosts and devices supporting ECN are seeing increased deployment, we confirm that ECN is mostly not used. We observed 11,039 total distinct ECN-capable IPv4 sources. This is 0.774% of the total number of unique IPv4 sources in the dataset.

## 5. Burst Loss Metrics for Loss-Based Congestion Control

In this section, we define a metric for burst loss, taking into account the periodic probing of congestion-control algorithms, and show that different types of traffic have different burst loss characteristics. Given the continued lag in ECN usage, we advance this initial work as a way to better understand loss dynamics and its relation to application behavior.

## 6. Conclusions

This study provides an updated view of the state of ECN and other TCP options in the Internet. We find a marked and continued increase in the deployment of ECN-capable servers and the usability of ECN on the majority of paths to such servers. We also present new measurements of ECN on IPv6 and passive observations of actual ECN usage from flow data. Our findings highlight the need for further research into the factors affecting the adoption and effective use of ECN in the Internet.