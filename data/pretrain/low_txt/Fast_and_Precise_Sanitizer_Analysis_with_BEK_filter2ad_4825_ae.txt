### Outsourced String Manipulation Functions Analysis

We observed that `Outsourced1` escapes the `-` character, whereas `Outsourced2` does not. Additionally, one of the `HTMLEncode` implementations fails to encode the single quote character. The single quote character can close HTML contexts, and failing to encode it could lead to unexpected behavior for web developers using this implementation. For instance, a recent attack on the Google Analytics dashboard was enabled by the failure to sanitize a single quote [33].

This case study highlights the benefits of automatically analyzing string manipulation functions to check for equivalence. Without BEK, manually inspecting these functions would be difficult, error-prone, and time-consuming. Using BEK, we translated the C# code to BEK programs in approximately three days. BEK then computed the contents of Figure 11, including all equivalence and containment checks, in less than one minute.

### Checking Filters Against the XSS Cheat Sheet

The Cross-Site Scripting (XSS) Cheat Sheet is a regularly updated set of strings designed to trigger JavaScript execution in commonly used web browsers. These strings are crafted to cause popular web browsers to execute JavaScript while evading common sanitization functions. After translating a sanitizer to a BEK program, we can use symbolic finite state transducers to determine if there exists a string that, when fed to the sanitizer, results in a target string from the Cheat Sheet.

In other words, we can check if a string from the Cheat Sheet has a pre-image under the function defined by a BEK program. We sampled 28 strings from the Cheat Sheet. While the Cheat Sheet shows snippets of HTML, in practice, a sanitizer might only run on a substring corresponding to the attribute parsing context. Although `HTMLEncode` should not be used for sanitizing data that will become part of a URL attribute, programmers may accidentally use it in this "incorrect" context. We also added specific strings to test the handling of HTML attribute parsing by our sanitizers, resulting in two sets of attack strings: HTML and Attribute.

For each of our implementations, we checked whether pre-images of the strings in each set exist. Figure 12 shows the percentage of strings that have no pre-image under each implementation. All seven implementations correctly escape angle brackets, so no string in the HTML set has a pre-image under any of the sanitizers. However, some implementations do not escape the string `"&"`, potentially leading to an attack. Only one of our `HTMLEncode` implementations made it impossible for all the strings in the Attribute set to appear in its output. Each set of strings took between 36 and 39 seconds for BEK to check against a sanitizer.

### Scalability of Equivalence Checking

Our theoretical analysis suggests that the speed of queries to BEK should scale quadratically with the number of states of the symbolic finite transducer. However, all sanitizers we found in the wild have a small number of states, making queries fast but not providing insight into BEK's performance as the number of states increases. To address this, we conducted two experiments with synthetically generated symbolic finite transducers that exhibit the structure of real sanitizers but have many more states.

#### Self-equivalence Experiment
We generated symbolic finite transducers A from randomly generated BEK programs with structures similar to typical sanitizers. The time to check the equivalence of A with itself is shown in Figure 13, where the size is the number of states plus the number of transitions in A. Although the worst-case complexity is quadratic, the actual observed complexity, for a sample size of 1,000, is linear.

#### Commutativity Experiment
We generated symbolic finite transducers from randomly generated BEK programs with structures similar to typical sanitizers. For each symbolic finite transducer A, we checked commutativity with a small BEK program `UpToLastDot` that returns a string up to the last dot character. The time to determine that \(A \circ \text{UpToLastDot}\) and \(\text{UpToLastDot} \circ A\) are equivalent is shown in Figure 14, where the size is the total number of states plus the number of transitions in A. The time to check non-equivalence was typically only a few milliseconds, so the experiments exclude data where the result is not equivalent. Although the worst-case complexity is quadratic, the actual observed complexity, over a sample size of 1,000 individual cases, was near-linear.

### From BEK to Other Languages

We have built compilers from BEK programs to commonly used languages. When it comes time for deployment, developers can compile to their preferred language for inclusion in an application.

### Related Work

**SANER** combines dynamic and static analysis to validate sanitization functions in web applications [9]. SANER creates finite state transducers for an over-approximation of the strings accepted by the sanitizer using static analysis of existing PHP code. In contrast, our work focuses on a simple language expressive enough to capture existing sanitizers or write new ones by hand, which can then be compiled to symbolic finite state transducers that precisely capture the sanitization function. SANER also addresses the issue of inputs that may be tainted by an adversary, which is not within the scope of our work. Our work emphasizes efficient ways to compose sanitizers and combine the theory of finite state transducers with SMT solvers, which SANER does not treat.

**Minamide** constructs a string analyzer for PHP code, then uses this string analyzer to obtain context-free grammars that are over-approximations of the HTML output by a server [26]. He shows how these grammars can be used to find pages with invalid HTML. The method proposed in [21] can also be applied to string analysis by modeling regular string analysis problems as higher-order multi-parameter tree transducers (HMTTs), where strings are represented as linear trees. While HMTTs allow encodings of finite transducers, arbitrary background character theories are not directly expressible to encode SFTs. Our work treats issues of composition and state explosion for finite state transducers by leveraging recent progress in SMT solvers, which aids us in reasoning precisely about the transducers created by transformation of BEK programs and by avoiding state space explosion and bitblasting for large character domains such as Unicode. Moreover, SMT solvers provide a method of extracting concrete counterexamples.

**Wasserman and Su** perform static analysis of PHP code to construct a grammar capturing an over-approximation of string values. Their application is to SQL injection attacks, while our framework allows us to ask questions about any sanitizer [36]. Follow-on work combines this with dynamic test input generation to find attacks on full PHP web applications [37]. Dynamic analysis of PHP code, using a combination of symbolic and concrete execution techniques, is implemented in the Apollo tool [8]. The work in [39] describes a layered static analysis algorithm for detecting security vulnerabilities in PHP code that can also handle some dynamic features. In contrast, our focus is specifically on sanitizers rather than full applications, emphasizing analysis precision over scaling to large code bases.

**Christensen et al.**'s Java String Analyzer is a static analysis package for deriving finite automata that characterize an over-approximation of possible values for string variables in Java [13]. Their work focuses on analyzing legacy Java code and on the speed of analysis. In contrast, we focus on the precision of the analysis and on constructing a specific language to capture sanitizers, as well as on the integration with SMT solvers.

Our work complements previous efforts in extending SMT solvers to understand the theory of strings. **HAMPI** [20] and **Kaluza** [31] extend the STP solver to handle equations over strings and equations with multiple variables. **Rex** extends the Z3 solver to handle regular expression constraints [35], while **Hooimeijer et al.** show how to solve subset constraints on regular languages [17]. We, in contrast, show how to combine any of these solvers with finite transducers whose edges can take symbolic values in any of the theories supported by the solver.

The work in [28] introduces the first symbolic extension of finite state transducers called a predicate-augmented finite state transducer (pfst). A pfst has two kinds of transitions: 1) \(p \xrightarrow{\phi/\psi} q\) where \(\phi\) and \(\psi\) are character predicates or \(\epsilon\), or 2) \(p \xrightarrow{c/c} q\). In the first case, the symbolic transition corresponds to all concrete transitions \(p \xrightarrow{a/b} q\) such that \(\phi(a)\) and \(\psi(b)\) are true; the second case corresponds to identity transitions \(p \xrightarrow{a/a} q\) for all characters \(a\). A pfst is not expressive enough for describing an SFT. Besides identities, it is not possible to establish functional dependencies from input to output that are needed, for example, to encode sanitizers such as `EncodeHtml`.

A recent symbolic extension of finite transducers is **streaming transducers** [6]. While the theoretical expressiveness of the language introduced in [6] exceeds that of BEK, streaming transducers are restricted to character theories that are total orders with no other operations. Composition of streaming transducers requires an explicit treatment of characters. It is an interesting future research topic to investigate if there is an extension of SFTs or a restriction of streaming transducers that allows efficient symbolic analysis techniques to be applied.

### Conclusions

Much prior work in XSS prevention assumes the correctness of sanitization functions. However, practical experience shows that writing correct sanitizers is far from trivial. This paper presents BEK, a language and a compiler for writing, analyzing string manipulation routines, and converting them to general-purpose languages. Our language is expressive enough to capture real web sanitizers used in ASP.NET, the Internet Explorer XSS Filter, and the Google AutoEscape framework, which we demonstrate by porting these sanitizers to BEK.

We have shown how the analyses supported by our tool can find security-critical bugs or check that such bugs do not exist. To improve the end-user experience when a bug is found, BEK produces a counter-example. We discovered that only 28.6% of our sanitizers commute, ~79.1% are idempotent, and only 8% are reversible. We also demonstrated that most hand-written `HTMLEncode` implementations disagree on at least some inputs. Unlike previously published techniques, BEK deals equally well with Unicode strings without creating a state explosion. Furthermore, we show that our algorithms for equivalence checking and composition computation are extremely fast in practice, scaling near-linearly with the size of the symbolic finite transducer representation.

### References

[1] About Safari 4.1 for Tiger. http://support.apple.com/kb/DL1045.
[2] Internet Explorer 8: Features. http://www.microsoft.com/windows/internet-explorer/features/safer.aspx.
[3] NoXSS Mozilla Firefox Extension. http://www.noxss.org/.
[4] OWASP: ESAPI project page. http://code.google.com/p/owasp-esapi-java/.
[5] XSS (Cross Site Scripting) Cheat Sheet. http://ha.ckers.org/xss.html.
[6] R. Alur and P. Cerný. Streaming transducers for algorithmic verification of single-pass list-processing programs. In Proceedings of the Symposium on Principles of Programming Languages, pages 599–610, 2011.
[7] Apple. Jsdecode implementation, 2011. http://trac.webkit.org/browser/releases/Apple/Safari%205.0/JavaScriptCore/runtime/JSGlobalObjectFunctions.cpp.
[8] S. Artzi, A. Kie˙zun, J. Dolby, F. Tip, D. Dig, A. Paradkar, and M. D. Ernst. Finding bugs in Web applications using dynamic test generation and explicit-state model checking. Transactions on Software Engineering, 99:474–494, 2010.
[9] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda, C. Kruegel, and G. Vigna. SANER: Composing static and dynamic analysis to validate sanitization in Web applications. In Proceedings of the Symposium on Security and Privacy, 2008.
[10] D. Bates, A. Barth, and C. Jackson. Regular expressions considered harmful in client-side XSS filters. In Proceedings of the Conference on the World Wide Web, pages 91–100, 2010.
[11] N. Bjørner, N. Tillmann, and A. Voronkov. Path feasibility analysis for string-manipulating programs. In Proceedings of the International Conference on Tools And Algorithms For The Construction And Analysis Of Systems, 2009.
[12] C. Y. Cho, D. Babi´c, E. C. R. Shin, and D. Song. Inference and analysis of formal models of botnet command and control protocols. In Proceedings of the Conference on Computer and Communications Security, pages 426–439, 2010.
[13] A. S. Christensen, A. Møller, and M. I. Schwartzbach. Precise Analysis of String Expressions. In Proceedings of the Static Analysis Symposium, 2003.
[14] L. de Moura and N. Bjørner. Z3: An Efficient SMT Solver. In Proceedings of the International Conference on Tools And Algorithms For The Construction And Analysis Of Systems, 2008.
[15] A. J. Demers, C. Keleman, and B. Reusch. On some decidable properties of finite state translations. Acta Informatica, 17:349–364, 1982.
[16] P. Hooimeijer. Decision procedures for string constraints. Ph.D. Dissertation Proposal, University of Virginia, April 2010.
[17] P. Hooimeijer and W. Weimer. A decision procedure for subset constraints over regular languages. In Proceedings of the Conference on Programming Language Design and Implementation, pages 188–198, 2009.
[18] P. Hooimeijer and W. Weimer. Solving string constraints lazily. In Proceedings of the International Conference on Automated Software Engineering, 2010.
[19] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: a static analysis tool for detecting Web application vulnerabilities (short paper). In Proceedings of the Symposium on Security and Privacy, May 2006.
[20] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D. Ernst. HAMPI: a solver for string constraints. In Proceedings of the International Symposium on Software Testing and Analysis, 2009.
[21] N. Kobayashi, N. Tabuchi, and H. Unno. Higher-order multi-parameter tree transducers and recursion schemes for program verification. In Proceedings of the Symposium on Principles of Programming Languages, pages 495–508, 2010.
[22] D. Lindsay and E. V. Nava. Universal XSS via IE8’s XSS filters. In Black Hat Europe, 2010.
[23] B. Livshits and M. S. Lam. Finding security errors in Java programs with static analysis. In Proceedings of the Usenix Security Symposium, pages 271–286, Aug. 2005.
[24] B. Livshits, A. V. Nori, S. K. Rajamani, and A. Banerjee. Merlin: Specification inference for explicit information flow problems. In Proceedings of the Conference on Programming Language Design and Implementation, June 2009.
[25] M. Martin, B. Livshits, and M. S. Lam. SecuriFly: Runtime vulnerability protection for Web applications. Technical report, Stanford University, Oct. 2006.
[26] Y. Minamide. Static approximation of dynamically generated web pages. In Proceedings of the International Conference on the World Wide Web, pages 432–441, 2005.
[27] A. Nguyen-Tuong, S. Guarnieri, D. Greene, J. Shirley, and D. Evans. Automatically hardening Web applications using precise tainting. In Proceedings of the IFIP International Information Security Conference, June 2005.
[28] G. V. Noord and D. Gerdemann. Finite state transducers with predicates and identities. Grammars, 4:2001, 2001.
[29] G. Rozenberg and A. Salomaa, editors. Handbook of Formal Languages, volume 1. Springer, 1997.
[30] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song. A symbolic execution framework for JavaScript. Technical Report UCB/EECS-2010-26, EECS Department, University of California, Berkeley, Mar 2010.
[31] P. Saxena, D. Akhawe, S. Hanna, S. McCamant, F. Mao, and D. Song. A symbolic execution framework for JavaScript. In Proceedings of the IEEE Symposium on Security and Privacy, 2010.
[32] P. Saxena, D. Molnar, and B. Livshits. ScriptGard: Preventing script injection attacks in legacy Web applications with automatic sanitization. Technical Report MSR-TR-2010-128, Microsoft Research, Sept. 2010.
[33] B. Schmidt. 2011. Google Analytics XSS vulnerability. http://spareclockcycles.org/2011/02/03/google-analytics-xss-vulnerability/.
[34] M. Veanes, N. Bjørner, and L. de Moura. Symbolic automata constraint solving. In C. Fermüller and A. Voronkov, editors, LPAR-17, volume 6397 of LNCS, pages 640–654. Springer, 2010.
[35] M. Veanes, P. de Halleux, and N. Tillmann. Rex: Symbolic Regular Expression Explorer. In Proceedings of the International Conference on Software Testing, Verification and Validation, 2010.
[36] G. Wassermann and Z. Su. Sound and precise analysis of Web applications for injection vulnerabilities. In Proceedings of the Conference on Programming Language Design and Implementation, 2007.
[37] G. Wassermann, D. Yu, A. Chander, D. Dhurjati, H. Inamura, and Z. Su. Dynamic test input generation for Web applications. In Proceedings of the Symposium on Security and Privacy, 2008.
[38] J. Williams. Personal communications, 2005.
[39] Y. Xie and A. Aiken. Static detection of security vulnerabilities in scripting languages. In Proceedings of the Usenix Security Symposium, pages 179–192, 2006.
[40] L. Yuan, J. Mai, Z. Su, H. Chen, C.-N. Chuah, and P. Mohapatra. Fireman: A toolkit for firewall modeling and analysis. In Proceedings of the Symposium on Security and Privacy, pages 199–213, 2006.