# Fault Tolerant Service Function Chaining

## Introduction
This paper presents FTC (Fault Tolerant Chain), a system designed to provide efficient fault tolerance for service function chains (SFCs). Unlike existing fault-tolerant middlebox frameworks, which can introduce significant performance penalties, FTC leverages the natural structure of SFCs, uses transactional packet processing, and piggybacks state updates on packets. Our evaluation shows that FTC can provide high degrees of fault tolerance with minimal overhead in terms of latency and throughput.

## Related Work
### Key-Value Storage Systems
Several systems adapt the chain replication protocol [58] for key-value storage. For example, HyperDex [18] and Hibari [21] use this approach. These systems create multiple logical chains to replicate different key ranges. NetChain [27] replicates data in the network using a chain of programmable switches. FAWN [5], Flex-KV [43], and parameter servers [37] use consistent hashing to form a replication ring of servers. Unlike these systems, FTC takes advantage of the natural structure of SFCs and uses transactional packet processing.

### Primary Backup Replication
In active replication [49], all replicas process requests, which requires deterministic operations from middleboxes. However, middleboxes are often non-deterministic [15, 26]. In passive replication [8], only the primary server processes requests and sends state updates to other replicas. This scheme does not require determinism. Generic virtual machine high-availability solutions [12, 16, 48] pause a virtual machine at each checkpoint, but this is not effective for SFCs as it causes long pauses during checkpoints.

### Consensus Protocols
Classical consensus protocols like Paxos [36] and Raft [40] are known to be slow and cause unacceptable performance degradation when used for middleboxes.

## Evaluation
Our evaluation demonstrates that FTC can provide high degrees of fault tolerance with low overhead in terms of latency and throughput. The large confidence intervals reported in our results are due to latency variability in the wide area network connecting different regions.

### Throughput and Latency
The following figures show the throughput and latency of FTC compared to other systems:

- **Throughput (Mpps) vs. Chain Length:**
  - ![Throughput vs. Chain Length](figures/throughput_chain_length.png)
  
- **Latency (µs) vs. Chain Length:**
  - ![Latency vs. Chain Length](figures/latency_chain_length.png)

- **Latency (µs) vs. Replication Factor:**
  - ![Latency vs. Replication Factor](figures/latency_replication_factor.png)

- **Packets (CDF) vs. Latency:**
  - ![Packets CDF vs. Latency](figures/packets_cdf_latency.png)

## Conclusion
Existing fault-tolerant middlebox frameworks can introduce high performance penalties when used for SFCs. FTC, by contrast, leverages the structure of SFCs to provide efficient fault tolerance. Our evaluation shows that FTC can achieve high fault tolerance with minimal overhead in terms of latency and throughput. The implementation of FTC is available at [https://github.com/eljalalpour/FTSFC.git](https://github.com/eljalalpour/FTSFC.git). This paper does not raise any ethical issues.

## Acknowledgments
We would like to thank our shepherd Vyas Sekar and the anonymous reviewers for their valuable feedback. This work is supported by the Natural Sciences and Engineering Research Council of Canada.

## References
[1] 2017. NFV Whitepaper. Technical Report. European Telecommunications Standards Institute. [Online]. Available: https://portal.etsi.org/NFV/NFV_White_Paper.pdf

[2] 2019. mazu-nat.click. [Online]. Available: https://github.com/kohler/click/blob/master/conf/mazu-nat.click

[3] 2020. Tuning Failover Cluster Network Thresholds. [Online]. Available: https://bit.ly/2NC7dGk

[4] Ali Abedi and Tim Brecht. 2017. Conducting Repeatable Experiments in Highly Variable Cloud Computing Environments. In Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering (ICPE ’17). ACM, New York, NY, USA, 287–292. https://doi.org/10.1145/3030207.3030229

[5] David G. Andersen, Jason Franklin, Michael Kaminsky, Amar Phanishayee, Lawrence Tan, and Vijay Vasudevan. 2009. FAWN: A Fast Array of Wimpy Nodes. In Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP ’09). ACM, New York, NY, USA, 1–14. https://doi.org/10.1145/1629575.1629577

[6] P Ayuso. 2006. Netfilter’s connection tracking system. ;login 31, 3 (2006).

[7] Pankaj Berde, Matteo Gerola, Jonathan Hart, Yuta Higuchi, Masayoshi Kobayashi, Toshio Koide, Bob Lantz, Brian O’Connor, Pavlin Radoslavov, William Snow, and Guru Parulkar. 2014. ONOS: Towards an Open, Distributed SDN OS. In Proceedings of the Third Workshop on Hot Topics in Software Defined Networking (HotSDN ’14). ACM, New York, NY, USA, 1–6. https://doi.org/10.1145/2620728.2620744

[8] Navin Budhiraja, Keith Marzullo, Fred B. Schneider, and Sam Toueg. 1993. Distributed Systems (2Nd Ed.). In Distributed Systems (2Nd Ed.), Sape Mullender (Ed.). ACM Press/Addison-Wesley Publishing Co., New York, NY, USA, Chapter The Primary-backup Approach, 199–216. http://dl.acm.org/citation.cfm?id=302430.302438

[9] B. Carpenter and S. Brim. 2002. Middleboxes: Taxonomy and Issues. RFC 3234. RFC Editor. 1–27 pages. http://www.rfc-editor.org/rfc/rfc3234.txt

[10] Tushar Deepak Chandra and Sam Toueg. 1996. Unreliable Failure Detectors for Reliable Distributed Systems. J. ACM 43, 2 (March 1996), 225–267. https://doi.org/10.1145/226643.226647

[11] Adrian Cockcroft. 2012. A Closer Look At The Christmas Eve Outage. [Online]. Available: http://techblog.netflix.com/2012/12/a-closer-look-at-christmas-eve-outage.html

[12] Brendan Cully, Geoffrey Lefebvre, Dutch Meyer, Mike Feeley, Norm Hutchinson, and Andrew Warfield. 2008. Remus: High Availability via Asynchronous Virtual Machine Replication. In 5th USENIX Symposium on Networked Systems Design and Implementation (NSDI 08). USENIX Association, San Francisco, CA.

[13] Dave Dice, Yossi Lev, Virendra J. Marathe, Mark Moir, Dan Nussbaum, and Marek Olszewski. 2010. Simplifying Concurrent Algorithms by Exploiting Hardware Transactional Memory. In Proceedings of the Twenty-Second Annual ACM Symposium on Parallelism in Algorithms and Architectures (SPAA ’10). Association for Computing Machinery, New York, NY, USA, 325–334. https://doi.org/10.1145/1810479.1810537

[14] Dave Dice, Ori Shalev, and Nir Shavit. 2006. Transactional Locking II. In Proceedings of the 20th International Conference on Distributed Computing (DISC’06). Springer-Verlag, Berlin, Heidelberg, 194–208. https://doi.org/10.1007/11864219_14

[15] Mihai Dobrescu, Norbert Egi, Katerina Argyraki, Byung-Gon Chun, Kevin Fall, Gianluca Iannaccone, Allan Knies, Maziar Manesh, and Sylvia Ratnasamy. 2009. RouteBricks: Exploiting Parallelism to Scale Software Routers. In Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP ’09). ACM, New York, NY, USA, 15–28. https://doi.org/10.1145/1629575.1629578

[16] YaoZu Dong, Wei Ye, YunHong Jiang, Ian Pratt, ShiQing Ma, Jian Li, and HaiBing Guan. 2013. COLO: COarse-grained LOck-stepping Virtual Machines for Non-stop Service. In Proceedings of the 4th Annual Symposium on Cloud Computing (SOCC ’13). ACM, New York, NY, USA, Article 3, 16 pages. https://doi.org/10.1145/2523616.2523630

[17] Paul Emmerich, Sebastian Gallenmüller, Daniel Raumer, Florian Wohlfart, and Georg Carle. 2015. MoonGen: A Scriptable High-Speed Packet Generator. In Proceedings of the 2015 Internet Measurement Conference (IMC ’15). ACM, New York, NY, USA, 275–287. https://doi.org/10.1145/2815675.2815692

[18] Robert Escriva, Bernard Wong, and Emin Gün Sirer. 2012. HyperDex: A Distributed, Searchable Key-value Store. In Proceedings of the ACM SIGCOMM 2012 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication (SIGCOMM ’12). ACM, New York, NY, USA, 25–36. https://doi.org/10.1145/2342356.2342360

[19] Colin J Fidge. 1987. Timestamps in message-passing systems that preserve the partial ordering. Australian National University. Department of Computer Science.

[20] N. Freed. 2000. Behavior of and Requirements for Internet Firewalls. RFC 2979. RFC Editor. 1–7 pages. http://www.rfc-editor.org/rfc/rfc2979.txt

[21] Scott Lystig Fritchie. 2010. Chain Replication in Theory and in Practice. In Proceedings of the 9th ACM SIGPLAN Workshop on Erlang (Erlang ’10). ACM, New York, NY, USA, 33–44. https://doi.org/10.1145/1863509.1863515

[22] Rohan Gandhi, Y. Charlie Hu, and Ming Zhang. 2016. Yoda: A Highly Available Layer-7 Load Balancer. In Proceedings of the Eleventh European Conference on Computer Systems (EuroSys ’16). ACM, New York, NY, USA, Article 21, 16 pages. https://doi.org/10.1145/2901318.2901352

[23] Aaron Gember-Jacobson, Raajay Viswanathan, Chaithan Prakash, Robert Grandl, Junaid Khalid, Sourav Das, and Aditya Akella. 2014. OpenNF: Enabling Innovation in Network Function Control. In Proceedings of the 2014 ACM Conference on SIGCOMM (SIGCOMM ’14). ACM, New York, NY, USA, 163–174. https://doi.org/10.1145/2619239.2626313

[24] Y. Gu, M. Shore, and S. Sivakumar. 2013. A Framework and Problem Statement for Flow-associated Middlebox State Migration. [Online]. Available: https://tools.ietf.org/html/draft-gu-statemigration-framework-03

[25] T. Hain. 2000. Architectural Implications of NAT. RFC 2993. RFC Editor. 1–29 pages. http://www.rfc-editor.org/rfc/rfc2993.txt

[26] Sangjin Han, Keon Jang, KyoungSoo Park, and Sue Moon. 2010. PacketShader: A GPU-accelerated Software Router. SIGCOMM Comput. Commun. Rev. 40, 4 (Aug. 2010), 195–206. https://doi.org/10.1145/1851275.1851207

[27] Xin Jin, Xiaozhou Li, Haoyu Zhang, Nate Foster, Jeongkeun Lee, Robert Soulé, Changhoon Kim, and Ion Stoica. 2018. NetChain: Scale-Free Sub-RTT Coordination. In 15th USENIX Symposium on Networked Systems Design and Implementation (NSDI 18). USENIX Association, Renton, WA, 35–49. https://www.usenix.org/conference/nsdi18/presentation/jin

[28] D. Joseph and I. Stoica. 2008. Modeling middleboxes. IEEE Network 22, 5 (September 2008), 20–25. https://doi.org/10.1109/MNET.2008.4626228

[29] Murad Kablan, Azzam Alsudais, Eric Keller, and Franck Le. 2017. Stateless Network Functions: Breaking the Tight Coupling of State and Processing. In 14th USENIX Symposium on Networked Systems Design and Implementation (NSDI 17). USENIX Association, Boston, MA, 97–112. https://www.usenix.org/conference/nsdi17/technical-sessions/presentation/kablan

[30] J. M. Kang, H. Bannazadeh, and A. Leon-Garcia. 2013. SAVI testbed: Control and management of converged virtual ICT resources. In 2013 IFIP/IEEE International Symposium on Integrated Network Management (IM 2013). 664–667.

[31] Naga Katta, Haoyu Zhang, Michael Freedman, and Jennifer Rexford. 2015. Ravana: Controller Fault-tolerance in Software-defined Networking. In Proceedings of the 1st ACM SIGCOMM Symposium on Software Defined Networking Research (SOSR ’15). ACM, New York, NY, USA, Article 4, 12 pages. https://doi.org/10.1145/2774993.2774996

[32] Junaid Khalid and Aditya Akella. 2019. Correctness and Performance for Stateful Chained Network Functions. In 16th USENIX Symposium on Networked Systems Design and Implementation (NSDI 19). USENIX Association, Boston, MA, 501–516. https://www.usenix.org/conference/nsdi19/presentation/khalid

[33] Junaid Khalid, Aaron Gember-Jacobson, Roney Michael, Anubhavnidhi Abhashkumar, and Aditya Akella. 2016. Paving the Way for NFV: Simplifying Middlebox Modifications Using StateAlyzr. In 13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16). USENIX Association, Santa Clara, CA, 239–253. https://www.usenix.org/conference/nsdi16/technical-sessions/presentation/khalid

[34] Eddie Kohler, Robert Morris, Benjie Chen, John Jannotti, and M. Frans Kaashoek. 2000. The Click Modular Router. ACM Trans. Comput. Syst. 18, 3 (August 2000), 263–297. https://doi.org/10.1145/354871.354874

[35] Sameer G Kulkarni, Guyue Liu, KK Ramakrishnan, Mayutan Arumaithurai, Timothy Wood, and Xiaoming Fu. 2018. REINFORCE: Achieving Efficient Failure Resiliency for Network Function Virtualization based Services. In 15th USENIX International Conference on emerging Networking EXperiments and Technologies (CoNEXT 18). USENIX Association, 35–49.

[36] Leslie Lamport. 2001. Paxos Made Simple. ACM SIGACT News 32, 4 (December 2001), 18–25.

[37] Mu Li, David G. Anderson, Jun Woo Park, Alexander J. Smola, Amr Ahmed, Vanja Josifovski, James Long, Eugene J. Shekita, and Bor-Yiing Su. 2014. Scaling Distributed Machine Learning with the Parameter Server. In Operating Systems Design and Implementation (OSDI). 583–598.

[38] NiciraNetworks. 2019. OpenvSwitch: An open virtual switch. [Online]. Available: http://openvswitch.org

[39] NiciraNetworks. 2019. The published ONOS Docker images. [Online]. Available: https://hub.docker.com/r/onosproject/onos/

[40] Diego Ongaro and John Ousterhout. 2014. In search of an understandable consensus algorithm. In 2014 USENIX Annual Technical Conference (USENIX ATC 14). 305–319.

[41] Aurojit Panda, Wenting Zheng, Xiaohe Hu, Arvind Krishnamurthy, and Scott Shenker. 2017. SCL: Simplifying Distributed SDN Control Planes. In 14th USENIX Symposium on Networked Systems Design and Implementation (NSDI 17). USENIX Association, Boston, MA, 329–345. https://www.usenix.org/conference/nsdi17/technical-sessions/presentation/panda-aurojit-scl

[42] Aleksey Pesterev, Jacob Strauss, Nickolai Zeldovich, and Robert T. Morris. 2012. Improving Network Connection Locality on Multicore Systems. In Proceedings of the 7th ACM European Conference on Computer Systems (EuroSys ’12). ACM, New York, NY, USA, 337–350. https://doi.org/10.1145/2168836.2168870

[43] Amar Phanishayee, David G. Andersen, Himabindu Pucha, Anna Povzner, and Wendy Belluomini. 2012. Flex-KV: Enabling High-performance and Flexible KV Systems. In Proceedings of the 2012 Workshop on Management of Big Data Systems (MBDS ’12). ACM, New York, NY, USA, 19–24. https://doi.org/10.1145/2378356.2378361

[44] Rahul Potharaju and Navendu Jain. 2013. Demystifying the Dark Side of the Middle: A Field Study of Middlebox Failures in Datacenters. In Proceedings of the 2013 Conference on Internet Measurement Conference (IMC ’13). ACM, New York, NY, USA, 9–22. https://doi.org/10.1145/2504730.2504737

[45] Zafar Ayyub Qazi, Cheng-Chun Tu, Luis Chiang, Rui Miao, Vyas Sekar, and Minlan Yu. 2013. SIMPLE-fying Middlebox Policy Enforcement Using SDN. In Proceedings of the ACM SIGCOMM 2013 Conference on SIGCOMM (SIGCOMM ’13). ACM, New York, NY, USA, 27–38. https://doi.org/10.1145/2486001.2486022

[46] Paul Quinn and Thomas Nadeau. 2015. Problem Statement for Service Function Chaining. Internet-Draft. IETF. [Online]. Available: https://tools.ietf.org/html/rfc7498

[47] Shriram Rajagopalan, Dan Williams, and Hani Jamjoom. 2013. Pico Replication: A High Availability Framework for Middleboxes. In Proceedings of the 4th Annual Symposium on Cloud Computing (SOCC ’13). ACM, New York, NY, USA, Article 1, 15 pages. https://doi.org/10.1145/2523616.2523635

[48] Daniel J Scales, Mike Nelson, and Ganesh Venkitachalam. 2010. The design and evaluation of a practical system for fault-tolerant virtual machines. Technical Report. Technical Report VMWare-RT-2010-001, VMWare.

[49] Fred B. Schneider. 1990. Implementing Fault-tolerant Services Using the State Machine Approach: A Tutorial. ACM Comput. Surv. 22, 4 (December 1990), 299–319. https://doi.org/10.1145/98163.98167

[50] Vyas Sekar, Norbert Egi, Sylvia Ratnasamy, Michael K Reiter, and Guangyu Shi. 2012. Design and implementation of a consolidated middlebox architecture. In NSDI 12. 323–336.

[51] Justine Sherry, Peter Xiang Gao, Soumya Basu, Aurojit Panda, Arvind Krishnamurthy, Christian Maciocco, Maziar Manesh, João Martins, Sylvia Ratnasamy, Luigi Rizzo, and Scott Shenker. 2015. Rollback-Recovery for Middleboxes. In Proceedings of the 2015 ACM Conference on Special Interest Group on Data Communication (SIGCOMM ’15). ACM, New York, NY, USA, 227–240. https://doi.org/10.1145/2785956.2787501

[52] Robin Sommer, Matthias Vallentin, Lorenzo De Carli, and Vern Paxson. 2014. HILTI: An Abstract Execution Environment for Deep, Stateful Network Traffic Analysis. In Proceedings of the 2014 Conference on Internet Measurement Conference (IMC ’14). ACM, New York, NY, USA, 461–474. https://doi.org/10.1145/2663716.2663735

[53] P. Srisuresh and K. Egevang. 2001. Traditional IP Network Address Translator (Traditional NAT). RFC 3022. RFC Editor. 1–16 pages. http://www.rfc-editor.org/rfc/rfc3022.txt

[54] Rob Strom and Shaula Yemini. 1985. Optimistic Recovery in Distributed Systems. ACM Trans. Comput. Syst. 3, 3 (August 1985), 204–226. https://doi.org/10.1145/3959.3962

[55] The AWS Team. 2012. Summary of the October 22, 2012 AWS Service Event in the US-East Region. [Online]. Available: https://aws.amazon.com/message/680342/

[56] The Google Apps Team. 2012. Data Center Outages Generate Big Losses. [Online]. Available: http://static.googleusercontent.com/external_content/untrusted_dlcp/www.google.com/en/us/appsstatus/ir/plibxfjh8whr44h.pdf

[57] Daniel Turull, Peter Sjödin, and Robert Olsson. 2016. Pktgen: Measuring performance on high speed networks. Computer Communications 82 (2016), 39 – 48. https://doi.org/10.1016/j.comcom.2016.03.003

[58] Robbert van Renesse and Fred B. Schneider. 2004. Chain Replication for Supporting High Throughput and Availability. In Proceedings of the 6th Conference on Symposium on Opearting Systems Design & Implementation - Volume 6 (OSDI’04). USENIX Association, Berkeley, CA, USA, 7–7. http://dl.acm.org/citation.cfm?id=1251254.1251261

[59] O. Huang M. Boucadair N. Leymann Z. Cao J. Hu W. Liu, H. Li. 2014. Service function chaining use-cases. [Online]. Available: https://tools.ietf.org/html/draft-liu-sfc-use-cases-01