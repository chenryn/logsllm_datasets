### Instance Type Evaluation

Similar to our in-house 4K-aliasing experimental setup, we establish the error rate, bit rate, and channel capacity using the robust communication channel presented in Listing 3. We evaluate the use of 4K-aligned addresses with step sizes of 1024 B for transmitting a 1-bit and 2048 B for transmitting a 0-bit, as shown in the error rate analysis in Figure 9. The results are provided in Figure 10.

We measured a channel capacity of 1.28 Mbps and 1.49 Mbps while communicating across VM instances from different accounts on both Amazon EC2 and Google Cloud Engine (GCE). The channel capacity decreased by 30% on the EC2 testbed and by 18% on the GCE testbed compared to our in-house results. This reduction is expected due to the additional noise introduced by the virtualization layer in hosted clouds, which is reflected in the increased error rates. Despite this, our results demonstrate the practical utility of the 4K-aliasing covert channel when the trojan and spy instances are co-located on the same machine.

**Figure 10:** Error rate and channel capacity results from in-house, EC2, and GCE 4K-aliasing covert channel experimentation.

### Multi-Tenancy Detection

In our IaaS channel capacity experiment on the EC2 and GCE public clouds, we relied on prior colocation detection methods. Here, we describe a new method for colocation detection using our 4K-aliasing timing channel. For our analysis, we need to distinguish between 4K-aliasing caused by background noise and induced 4K-aliasing. We simplify the experimentation by assuming cooperative accounts, allowing us to control the number of VMs launched and the time between launches. Our methodology largely follows that of Varadarajan et al. [36], and we encountered similar challenges.

#### Separating 4K-aliasing from Noise

To accurately detect a cooperative multi-tenant, we must distinguish unintended 4K-aliasing events from intentional ones. To manage such noise, we conducted an experiment measuring 4K-aliasing without a cooperative VM sending a 4K-aliasing signal and then with a 4K-aliasing signal being sent. We scaled up the number of VMs from 1 instance to 20 instance pairs and repeated the measurement five times.

#### Launch Strategy

We launched pairwise sender and receiver VMs, considering prior colocation placement vulnerabilities. We first launched a sender VM and then waited one hour before launching a receiver VM in the same zone to ensure the best-case colocated launch. In all test cases, we used `us-east-1` for our EC2 testbed and `us-central1-c` for our GCE testbed. Each instance was configured with a single vCPU, which was executed as a single hardware hyperthread.

#### Detection Tests

When the sender VMs launched, they continuously sent oscillating 1-bit and 0-bit signals. The receiver polled the 4K-aliasing event for approximately 10 seconds. To reduce testing time, we employed a naive methodology of launching all sender messages at once and then sequentially launching receiver VMs. Since only one sender and receiver VM will colocate as a hyperthread, we can accurately detect multi-tenancy if any of the receiver VMs display the 4K-aliasing event outside the noise threshold.

#### Experimental Results

The results of our multi-tenant detection scheme using 4K-aliasing are shown in Figure 11. They reveal two key features:
1. The cycle latency degradation due to 4K-aliasing between sender and receiver is clearly distinguishable from background noise. Approximately 100 to 150 4K-aliasing events were measured within a 10-second window when all sender VMs were launched but not transmitting a 4K-aliased store. In contrast, while the sender VM was transmitting a 4K-aliased store, we recorded roughly 360 to 480 4K-aliasing events.
2. The detection threshold was reliably achieved after scaling the number of sender and receiver VMs to 14 instance pairs. During experimentation, we found that beyond 4 instance pairs, we could achieve multi-tenant detection. However, detection was measurable in only one of the five test cases, so these were discounted. We considered multi-tenant detection successful upon agreement for the majority of the test cases.

**Figure 11:** Frequency distribution of 4K-aliasing events recorded for non-colocated instance pairs (8/7 cycles) and colocated instance pairs (16/14 cycles). Multi-tenancy was detected after launching 12 (EC2) and 14 (GCE) sender/receiver instance pairs.

### Limitations

Despite the positive results, our multi-tenant demonstration relies on cooperative account holders, allowing us to utilize prior work on placement vulnerability strategies to optimize our chances of launching colocated instances. Additionally, our results were not collected under heavy load and potentially during non-peak hours. Finally, we largely used free trial accounts, which may be underutilized and thus less affected by disparate workloads.

### Mitigating the 4K-Aliasing Side Channel

Disabling hyperthreading is a straightforward method to mitigate the 4K-aliasing timing channel. However, this would likely result in increased end-user costs, as dedicated instances lead to higher operational expenses for the cloud provider. For security-conscious users willing to pay extra, this is an ideal solution. Conversely, end-users using IaaS public clouds for general-purpose workloads requiring little uptime may overpay because they underutilize datacenter resources.

The IaaS market generally agrees with this analysis. Most EC2 and GCE instance types enable hyperthreading by default, though specialized instances can be purchased. It is unclear how many users opt for these options. Microsoft Azure, which previously disabled hyperthreading in all instance types, is now migrating towards SMT-enabled instances [22]. Therefore, the IaaS market is likely to keep default instance types SMT-enabled.

Additionally, CPU vendors are likely to continue leveraging hyperthreading for its performance benefits. The underlying causes of the 4K-aliasing timing channel leverage an integral component of Intel microarchitecture, which allows significant speed-up in memory operations. Memory reads and writes must be allowed to issue speculatively and execute out-of-order, or we would revert CPU design to single-cycle pipelines. The memory order buffer saves CPU cycles, improves instruction throughput, makes better use of memory traffic bandwidth, and frees resources, allowing more computation on average. Complete elimination of the mechanism causing 4K-aliasing is, therefore, unlikely.

### Conclusion and Future Work

We have demonstrated, for the first time, a novel 4K-aliasing timing channel. Through extensive analysis, we have shown a robust covert communication channel deployable in IaaS clouds capable of transmitting at up to 1.49 Mbps. We also show that the 4K-aliasing timing channel can be used for multi-tenancy detection with a relatively small number of cooperating VMs on both Amazon EC2 and GCE. As future work, we aim to evaluate the timing channel as a practical side-channel and further investigate the applicability of same-core shared resources as timing channels in the public cloud.

### Acknowledgment

This work is partially supported by the Department of Energy through the Early Career Award (DE-SC0016180). Mr. Orlando Arias is also supported by the National Science Foundation Graduate Research Fellowship Program under Grant No. 1144246. Any opinions, findings, conclusions, and recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the U.S. Department of Energy or the National Science Foundation.

### References

[1] O. Aciicmez, “Yet another microarchitectural attack: Exploiting the 2007 ACM workshop on Computer security architecture,” in Proceedings of the 2007 ACM workshop on Computer security architecture. ACM, 2007, pp. 11–18.

[2] O. Acıicmez, C. K. Koc, and J.-P. Seifert, “Predicting secret keys via branch prediction,” in Cryptographers Track at the RSA Conference. Springer, 2007, pp. 225–242.

[3] O. Aciicmez and W. Schindler, “A vulnerability in RSA implementations due to instruction cache analysis and its demonstration on OpenSSL,” in CT-RSA, vol. 8. Springer, 2008, pp. 256–273.

[4] O. Aciicmez and J.-P. Seifert, “Cheap hardware parallelism implies cheap security,” in Fault Diagnosis and Tolerance in Cryptography, 2007. FDTC 2007. Workshop on. IEEE, 2007, pp. 80–91.

[5] Amazon, Inc., “Amazon EC2 Dedicated Instances,” 2017. [Online]. Available: https://aws.amazon.com/ec2/purchasing-options/dedicated-instances/

[6] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner, and H. Shacham, “On subnormal floating point and abnormal timing,” in Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 2015, pp. 623–639.

[7] M. F. Chowdhury and D. M. Carmean, “Maintaining processor ordering by checking load addresses of unretired load instructions against snooping store addresses,” Feb. 3 2004, US Patent 6,687,809.

[8] P. Church and A. Goscinski, “IaaS clouds vs. clusters for HPC: A performance study,” in Cloud Computing 2011: The 2nd International Conference on Cloud Computing, GRIDS, and Virtualization. [IARIA], 2011, pp. 39–45.

[9] Intel Corporation, “Intel® 64 and IA-32 Architecture Memory Ordering White Paper,” 2007.

[10] ——, “Using Intel® VTune™ Amplifier XE to Tune Software on the 4th Generation Intel® Core™ Processor Family,” 2013.

[11] ——, “Intel® 64 and IA-32 Architectures Optimization Reference Manual,” 2017.

[12] ——, “Intel® 64 and IA-32 Architectures Software Developers Manual,” Volume 3A: System Programming Guide, Part 1, vol. 3A, 2017.

[13] J. Doweck, “Inside Intel® Core Microarchitecture,” in Hot Chips 18 Symposium (HCS), 2006 IEEE. IEEE, 2006, pp. 1–35.

[14] D. Evtyushkin and D. Ponomarev, “Covert channels through random number generator: Mechanisms, capacity estimation, and mitigations,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 843–857.

[15] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, “Jump over ASLR: Attacking branch predictors to bypass ASLR,” in Microarchitecture (MICRO), 2016 49th Annual IEEE/ACM International Symposium on. IEEE, 2016, pp. 1–13.

[16] ——, “Understanding and mitigating covert channels through branch predictors,” ACM Transactions on Architecture and Code Optimization (TACO), vol. 13, no. 1, p. 10, 2016.

[17] A. Fog, “Instruction Tables: Lists of Instruction Latencies, Throughputs, and Micro-operation Breakdowns for Intel, AMD, and VIA CPUs,” Copenhagen University College of Engineering, 2011.

[18] G. Forney, “Maximum-likelihood sequence estimation of digital sequences in the presence of intersymbol interference,” IEEE Transactions on Information Theory, vol. 18, no. 3, pp. 363–378, 1972.

[19] G. Galante, L. C. E. De Bona, A. R. Mury, B. Schulze, and R. da Rosa Righi, “An analysis of public clouds elasticity in the execution of scientific applications: A survey,” Journal of Grid Computing, vol. 14, no. 2, pp. 193–216, 2016.

[20] D. Gruss, C. Maurice, A. Fogh, M. Lipp, and S. Mangard, “Prefetch side-channel attacks: Bypassing SMAP and kernel ASLR,” in Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security. ACM, 2016, pp. 368–379.

[21] A. Herzberg, H. Shulman, J. Ullrich, and E. Weippl, “Cloudoscopy: Services discovery and topology mapping,” in Proceedings of the 2013 ACM workshop on Cloud computing security workshop. ACM, 2013, pp. 113–122.

[22] Hillger, Brian, “Price reductions on L series and announcing next generation hyper-threaded virtual machines.” [Online]. Available: http://bit.ly/2gYVunn

[23] R. Hund, C. Willems, and T. Holz, “Practical timing side channel attacks against kernel space ASLR,” in Security and Privacy (SP), 2013 IEEE Symposium on. IEEE, 2013, pp. 191–205.

[24] C. Hunger, M. Kazdagli, A. Rawat, A. Dimakis, S. Vishwanath, and M. Tiwari, “Understanding contention-based channels and using them for defense,” in High Performance Computer Architecture (HPCA), 2015 IEEE 21st International Symposium on. IEEE, 2015, pp. 639–650.

[25] M. S. Inci, B. Gülmezoglu, G. I. Apecechea, T. Eisenbarth, and B. Sunar, “Seriously, get off my cloud! Cross-VM RSA key recovery in a public cloud.” IACR Cryptology ePrint Archive, vol. 2015, p. 898, 2015.

[26] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar, “Wait a minute! A fast, cross-VM attack on AES,” in International Workshop on Recent Advances in Intrusion Detection. Springer, 2014, pp. 299–319.

[27] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache side-channel attacks are practical,” in Security and Privacy (SP), 2015 IEEE Symposium on. IEEE, 2015, pp. 605–622.

[28] C. Maurice, C. Neumann, O. Heen, and A. Francillon, “C5: Cross-cores cache covert channel,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment. Springer, 2015, pp. 46–64.

[29] S. M. Moser, “Error probability analysis of binary asymmetric channels,” Dept. El. & Comp. Eng., Nat. Chiao Tung Univ, 2009.

[30] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and countermeasures: The case of AES,” in Cryptographers Track at the RSA Conference. Springer, 2006, pp. 1–20.

[31] G. Paoloni and Intel Corporation, “How to Benchmark Code Execution Times on Intel® IA-32 and IA-64 Instruction Set Architectures,” 2010.

[32] D. A. Patterson, “The data center is the computer,” Communications of the ACM, vol. 51, no. 1, pp. 105–105, 2008.

[33] C. Percival, “Cache missing for fun and profit,” 2005.

[34] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey, you, get off of my cloud: Exploring information leakage in third-party compute clouds,” in Proceedings of the 16th ACM conference on Computer and communications security. ACM, 2009, pp. 199–212.

[35] E. Tromer, D. A. Osvik, and A. Shamir, “Efficient cache attacks on AES, and countermeasures,” Journal of Cryptology, vol. 23, no. 1, pp. 37–71, 2010.

[36] V. Varadarajan, Y. Zhang, T. Ristenpart, and M. M. Swift, “A placement vulnerability study in multi-tenant public clouds.” in USENIX Security Symposium, 2015, pp. 913–928.

[37] Z. Wang and R. B. Lee, “Covert and side channels due to processor architecture,” in Computer Security Applications Conference, 2006. ACSAC’06. 22nd Annual. IEEE, 2006, pp. 473–482.

[38] Z. Wu, Z. Xu, and H. Wang, “Whispers in the hyper-space: High-bandwidth and reliable covert channel attacks inside the cloud,” IEEE/ACM Transactions on Networking (TON), vol. 23, no. 2, pp. 603–614, 2015.

[39] Y. Xu, M. Bailey, F. Jahanian, K. Joshi, M. Hiltunen, and R. Schlichting, “An exploration of L2 cache covert channels in virtualized environments,” in Proceedings of the 3rd ACM workshop on Cloud computing security workshop. ACM, 2011, pp. 29–40.

[40] Z. Xu, H. Wang, and Z. Wu, “A measurement study on co-residence threat inside the cloud.” in USENIX Security Symposium, 2015, pp. 929–944.

[41] Y. Yarom and K. Falkner, “Flush+Reload: A high resolution, low noise, L3 cache side-channel attack.” in USENIX Security Symposium, 2014, pp. 719–732.

[42] Y. Yarom, D. Genkin, and N. Heninger, “CacheBleed: A timing attack on OpenSSL constant-time RSA,” Journal of Cryptographic Engineering, vol. 7, no. 2, pp. 99–112, 2017.

[43] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-VM side channels and their use to extract private keys,” in Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 305–316.