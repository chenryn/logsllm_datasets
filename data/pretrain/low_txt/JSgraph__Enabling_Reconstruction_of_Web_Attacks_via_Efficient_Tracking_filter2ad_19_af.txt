### Dynamic Taint Analysis Techniques for Causality Analysis

Dynamic taint analysis techniques, as described in [40], [21], and [17], can be employed for causality analysis. These techniques monitor each program instruction to identify data flow between system components, such as memory objects, files, or network entities. The taint analysis constructs a causal graph that illustrates the data flow between these components.

While these techniques effectively present causal relationships between system or network components, they struggle to provide a clear understanding of JavaScript (JS) execution due to the significant semantic gap between system-level events and JS execution within a browser. JSgraph complements these techniques by providing detailed insights into JavaScript execution, thereby bridging this gap. For example, integrating JSgraph with a system-level analysis technique enables a seamless reconstruction of both system-level and in-browser attack provenance.

### Record and Replay Techniques

System-level record and replay (R&R) techniques, as proposed in [12], [23], [15], [10], and [36], have been developed for forensic analysis and system recovery from attacks. However, these system-level R&R systems are limited in their ability to analyze what happens inside a web browser, as there is a substantial semantic gap between system-level events (e.g., system calls) and high-level events occurring within the browser, such as interactions between the JavaScript engine (e.g., V8) and the rendering engine (e.g., Blink).

As discussed earlier, web-browser R&R systems [4] and JavaScript R&R techniques [35], [44] have been proposed, but they have limitations in enabling accurate forensic analysis of JS execution. Further details are provided in Section I-C.

### Static JavaScript Analysis

Several static analysis techniques have been proposed to identify malicious JavaScript code. For instance, ZOZZLE [9] classifies JS code based on contextual information from the abstract syntax tree (AST) of the program. Caffein Monkey [14] identifies malicious JS code by analyzing the usage of obfuscations and methods in the program. However, the dynamic nature of JavaScript makes it challenging to perform comprehensive static analysis.

### Dynamic JavaScript Analysis

Dynamic analysis is widely used to monitor the runtime behaviors of JS programs. Cova et al. [8] developed a system that detects and analyzes malicious JS code by executing it in an emulated environment. They extract various features from the JS code execution and use machine learning techniques to identify the characteristics of malicious JS programs. Several symbolic execution techniques for JavaScript have also been proposed, such as SymJS [30], Kudzu [41], and Jalangi [42]. Recently, J-Force [22], a forced execution engine for JavaScript, was introduced to identify possible malicious execution paths. J-Force iteratively explores execution paths until all possible paths, including those hidden by event and exception handlers, are covered. Symbolic and forced execution techniques for JavaScript are generally resource-intensive and require special execution environments (e.g., VM-based frameworks) for offline security analysis. In contrast, JSgraph focuses on recording real-time attacks, as discussed in Section I-C.

### Conclusion

We proposed JSgraph, a forensic engine designed to efficiently record fine-grained audit logs related to the execution of JavaScript programs. The primary goal of JSgraph is to enable a detailed, post-mortem reconstruction of ephemeral JS-based web attacks experienced by real network users, with a particular focus on social engineering attacks.

We implemented JSgraph by instrumenting Chromium's code base at the interface between Blink and V8, ensuring that our system is lightweight, highly portable, and requires minimal storage for its fine-grained audit logs. Using a combination of in-the-wild and lab-reproduced web attacks, we demonstrated how JSgraph can aid the forensic investigation process. We also showed that JSgraph introduces acceptable overhead on the browser, which could be further reduced with additional engineering efforts for code optimization.

### Acknowledgments

We thank Adam Doupé for serving as our shepherd and the anonymous reviewers for their constructive comments and suggestions for improvement.

This work is partially supported by the National Science Foundation under grant No. CNS-1149051 and by the United States Air Force and Defense Advanced Research Agency (DARPA) under Contract No. FA8650-15-C-7562. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation or DARPA.

### References

[1] A. Bates, W. U. Hassan, K. Butler, A. Dobra, B. Reaves, P. Cable, T. Moyer, and N. Schear, “Transparent web service auditing via network provenance functions,” in International Conference on World Wide Web, ser. WWW ’17, 2017.

[2] L. Bauer, S. Cai, L. Jia, T. Passaro, M. Stroucken, and Y. Tian, “Run-time monitoring and formal analysis of information flows in Chromium,” in Annual Network and Distributed System Security Symposium, 2015.

[3] K. D. Bowers, C. Hart, A. Juels, and N. Triandopoulos, “Pillarbox: Combating next-generation malware with fast forward-secure logging,” in Research in Attacks, Intrusions and Defenses (RAID), 2014.

[4] B. Burg, R. Bailey, A. J. Ko, and M. D. Ernst, “Interactive record/replay for web application debugging,” in ACM symposium on User interface software and technology. ACM, 2013, pp. 473–484.

[5] Chromium Project, “Adding traces to chromium/webkit/javascript,” https://www.chromium.org/developers/how-tos/trace-event-profiling-tool/tracing-event-instrumentation.

[6] ——, “Content module,” https://www.chromium.org/developers/content-module.

[7] ——, “Web idl in blink,” https://www.chromium.org/blink/webidl.

[8] M. Cova, C. Kruegel, and G. Vigna, “Detection and analysis of drive-by-download attacks and malicious javascript code,” in International Conference on World Wide Web, ser. WWW ’10, 2010.

[9] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert, “Zozzle: Fast and precise in-browser javascript malware detection,” in USENIX Conference on Security, ser. SEC’11. Berkeley, CA, USA: USENIX Association, 2011, pp. 3–3. [Online]. Available: http://dl.acm.org/citation.cfm?id=2028067.2028070

[10] D. Devecsery, M. Chow, X. Dou, J. Flinn, and P. M. Chen, “Eidetic systems,” in USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’14. Berkeley, CA, USA: USENIX Association, 2014, pp. 525–540. [Online]. Available: http://dl.acm.org/citation.cfm?id=2685048.2685090

[11] B. Dolan-Gavitt, J. Hodosh, P. Hulin, T. Leek, and R. Whelan, “Repeatable reverse engineering with panda,” in Program Protection and Reverse Engineering Workshop, ser. PPREW-5, 2015.

[12] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen, “Revirt: Enabling intrusion analysis through virtual-machine logging and replay,” SIGOPS Oper. Syst. Rev., vol. 36, no. SI, Dec. 2002.

[13] S. Egger, P. Reichl, T. Hoßfeld, and R. Schatz, “'Time is bandwidth'? Narrowing the gap between subjective time perception and quality of experience,” in IEEE International Conference on Communications, 2012.

[14] B. Feinstein and D. Peck, “Caffeine monkey: Automated collection, detection and analysis of malicious javascript,” ser. BlackHat’07, 2007.

[15] A. Goel, K. Po, K. Farhadi, Z. Li, and E. de Lara, “The taser intrusion recovery system,” in ACM Symposium on Operating Systems Principles, ser. SOSP ’05, 2005.

[16] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis, N. Provos, M. Z. Raﬁque, M. A. Rajab, C. Rossow, K. Thomas, V. Paxson, S. Savage, and G. M. Voelker, “Manufacturing compromise: The emergence of exploit-as-a-service,” in ACM Conference on Computer and Communications Security, ser. CCS ’12, 2012.

[17] K. Jee, G. Portokalidis, V. P. Kemerlis, S. Ghosh, D. I. August, and A. D. Keromytis, “A general approach for efficiently accelerating software-based dynamic data flow tracking on commodity hardware,” in USENIX Symposium on Networked Systems Design and Implementation, ser. NSDI, 2012.

[18] JosS. (forum) cross-site scripting cookie stealing/blind. [Online]. Available: https://www.exploit-db.com/exploits/9014/

[19] A. Kapravelos, M. Cova, C. Kruegel, and G. Vigna, “Escape from monkey island: Evading high-interaction honeyclients,” in International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment, ser. DIMVA’11. Berlin, Heidelberg: Springer-Verlag, 2011, pp. 124–143. [Online]. Available: http://dl.acm.org/citation.cfm?id=2026647.2026658

[20] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna, “Revolver: An automated approach to the detection of evasive web-based malware,” in Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). Washington, D.C.: USENIX, 2013, pp. 637–652. [Online]. Available: https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/kapravelos

[21] V. P. Kemerlis, G. Portokalidis, K. Jee, and A. D. Keromytis, “libdft: Practical dynamic data flow tracking for commodity systems,” in ACM SIGPLAN/SIGOPS conference on Virtual Execution Environments, 2012.

[22] K. Kim, I. L. Kim, C. H. Kim, Y. Kwon, Y. Zheng, X. Zhang, and D. Xu, “J-force: Forced execution on javascript,” in International Conference on World Wide Web, ser. WWW ’17, 2017.

[23] T. Kim, X. Wang, N. Zeldovich, and M. F. Kaashoek, “Intrusion recovery using selective re-execution,” in USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’10, 2010.

[24] S. T. King and P. M. Chen, “Backtracking intrusions,” in ACM Symposium on operating systems principles, ser. SOSP ’03. ACM, 2003.

[25] S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen, “Enriching intrusion alerts through multi-host causality,” in Network and Distributed System Security Symposium, ser. NDSS’05, 2005.

[26] C. Kolbitsch, B. Livshits, B. Zorn, and C. Seifert, “Rozzle: De-cloaking internet malware,” in IEEE Symposium on Security and Privacy, 2012.

[27] S. Krishnan, K. Z. Snow, and F. Monrose, “Trail of bytes: Efficient support for forensic analysis,” in ACM conference on Computer and communications security, ser. CCS ’10. ACM, 2010.

[28] K. H. Lee, X. Zhang, and D. Xu, “High accuracy attack provenance via binary-based execution partition,” in Network and Distributed System Security Symposium, ser. NDSS, 2013.

[29] S. Lekies, B. Stock, M. Wentzel, and M. Johns, “The unexpected dangers of dynamic javascript,” in 24th USENIX Security Symposium (USENIX Security 15). Washington, D.C.: USENIX Association, 2015, pp. 723–735. [Online]. Available: https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/lekies

[30] G. Li, E. Andreasen, and I. Ghosh, “Symjs: Automatic symbolic testing of javascript web applications,” in ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2014.

[31] Linux Man Pages, “Chattr,” http://man7.org/linux/man-pages/man1/chattr.1.html.

[32] S. Ma, J. Zhai, F. Wang, K. H. Lee, X. Zhang, and D. Xu, “MPI: Multiple Perspective Attack Investigation with Semantic Aware Execution Partitioning,” in USENIX Conference on Security Symposium, ser. Usenix Security, 2017.

[33] S. Ma, X. Zhang, and D. Xu, “Protracer: Towards practical provenance tracing by alternating between logging and tainting,” in Network and Distributed System Security Symposium, ser. NDSS, 2016.

[34] G. A. Marson and B. Poettering, “Even more practical secure logging: Tree-based seekable sequential key generators,” in 19th European Symposium on Research in Computer Security - Volume 8713, ser. ESORICS 2014, 2014.

[35] J. Mickens, J. Elson, and J. Howell, “Mugshot: Deterministic capture and replay for javascript applications,” in USENIX Conference on Networked Systems Design and Implementation, ser. NSDI’10. Berkeley, CA, USA: USENIX Association, 2010, pp. 11–11. [Online]. Available: http://dl.acm.org/citation.cfm?id=1855711.1855722

[36] Mozilla, “Record and replay framework,” http://rr-project.org/.

[37] C. Neasbitt, B. Li, R. Perdisci, L. Lu, K. Singh, and K. Li, “Webcapsule: Towards a lightweight forensic engine for web browsers,” in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’15, 2015.

[38] C. Neasbitt, R. Perdisci, K. Li, and T. Nelms, “Clickminer: Towards forensic reconstruction of user-browser interactions from network traces,” in ACM SIGSAC Conference on Computer and Communications Security, ser. CCS ’14, 2014.

[39] T. Nelms, R. Perdisci, M. Antonakakis, and M. Ahamad, “Towards measuring and mitigating social engineering software download attacks,” in USENIX Conference on Security Symposium, ser. SEC’16, 2016.

[40] J. Newsome and D. X. Song, “Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software,” in Network and Distributed System Security Symposium, ser. NDSS ’05, 2005.

[41] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, “A symbolic execution framework for javascript,” in IEEE Symposium on Security and Privacy, 2010.

[42] K. Sen, S. Kalasapur, T. Brutch, and S. Gibbs, “Jalangi: A selective record-replay and dynamic analysis framework for javascript,” in Joint Meeting on Foundations of Software Engineering, 2013.

[43] P. Vadrevu, J. Liu, B. Li, B. Rahbarinia, K. H. Lee, and R. Perdisci, “Enabling reconstruction of attacks on users via efficient browsing snapshots,” in Network and Distributed System Security Symposium, ser. NDSS, 2017.

[44] J. Vilk, J. Mickens, and M. Marron, “ReJS: Time-travel debugging for browser-based applications,” in Microsoft Research – Technical Report, 2016.

[45] B. Wu and B. D. Davison, “Detecting semantic cloaking on the web,” in International Conference on World Wide Web, ser. WWW ’06, 2006.