### Apple Watch Security Analysis and Exploitation

#### July 27-30, 2017

**Overview:**
This document details the steps and techniques used to exploit and analyze the security of the Apple Watch. The focus is on heap spraying, out-of-bounds (OOB) branching, and kernel dumping.

---

### Memory Allocation and Deallocation

- **Allocated OSString Objects:**
  - Allocated memory chunks for `OSString` objects.
  - Used in heap spraying and OOB branching to vtable.

- **Deallocated OSString Objects:**
  - Deallocated `OSString` objects.
  - Out-of-bounds branch to the next `OSString` vtable.

- **Heap Spray and OOB Branching:**
  - Heap spray with `OSString` objects.
  - Creation of `OSDictionary` with `OSString`.
  - Trigger `OSDictionary` deallocation.
  - Use `retain()` to dereference the next free chunk pointer.
  - Free chunk surrounded by `OSString` objects.
  - `retain()` to cause an OOB branch to the next `OSString` node.

- **Vtable Access Tricks:**
  - Getting vtable through the next free node trick.
  - Dump over panic:
    - Reference to `OSString` vtable in `OSUnserializeBinary`.
    - Reference to `OSUnserializeBinary` in `OSUnserializeXML`.

- **Panic Log Analysis:**
  - Crash in `OSUnserializeBinaryXML`.
  - Copy panic log from a watch.
  - Extract LR register value from the panic.
  - Obtain `OSUnserializeBinaryXML` address.

- **Kernel Dumping:**
  - Retain offset in vtable is `0x10`.
  - Use address to leak as `vtable_addr - 0x10`.
  - Vtable will be interpreted and branch to the address.
  - Kernel crashes but saves the panic log.
  - Address content appears in panic registers state.

- **Dumping Kernel by 4 Bytes:**
  - Use address to leak as a fake vtable address.
  - Watch crashes, wait for it to restore.
  - SSH to iPhone and run synchronization service.
  - Copy panic from Watch to iPhone and then to Mac.
  - Parse panic, read 4 bytes, and disassemble.
  - Update address with 4 bytes delta and upload app.
  - Repeat the process.

- **Final Steps:**
  - Crash in `OSUnserializeXML`.
  - Dump 4 bytes, disassemble, and read opcode.
  - Leak opcode until `BL OSUnserializeBinary`.
  - Leak `OSUnserializeBinary` opcodes.
  - Finally, leak `OSString` vtable offset.

- **Results:**
  - 5 minutes to recover the watch after a crash.
  - 5 minutes to fetch the panic from the watch.
  - 2 minutes to copy to Mac and parse.
  - No way to automate the process.
  - It took 2 weeks to dump the vtable.

---

### Next Steps

- **Full Kernel Dump:**
  - Use a fake `OSString` object to read the kernel.
  - Read data via `IORegistryEntryGetProperty`.
  - Leak kernel header and calculate kernel size.
  - Dump full kernel to userland in chunks.

- **Kernel Symbolication:**
  - Find and list all kexts.
  - Find `sysent` and resolve syscalls.
  - Find and resolve Mach traps.
  - Resolve IOKit objects vtable.

- **Setting Up Primitives:**
  - Scan kernel dump for gadgets.
  - Set up exec primitive.
  - Set up kernel read and write primitives.

- **Kernel Structs Layout:**
  - Look for `proc_*` functions.
  - Restore `proc` structure layout.
  - Dump memory and check for known values.

- **Patchfinder:**
  - Use `memmem` for string or byte pattern matching.
  - Perform xref and instruction analysis.
  - Resolve syscalls table and Mach traps table.
  - Simple instruction emulation.

- **Root and Sandbox Bypass:**
  - Patch `setreuid` (no KPP).
  - Patch `ucred` in the `proc` structure in the kernel.
  - Patch sandbox label value in `ucred`.

- **Getting Kernel Task:**
  - Patch `task_for_pid()`.
  - Save kernel self in the task bootstrap port.
  - Read it back via `task_get_special_port()`.
  - Restore original bootstrap port value.

- **Disable Codesign Checks:**
  - Patch `_debug` to `1`.
  - Patch `_nl_symbol_ptr` (GOT) entries.
  - Patch AMFI variables:
    - `cs_enforcement_disable`
    - `allow_invalid_signatures`

- **Remount Rootfs:**
  - Patch `__mac_mount`.
  - Change flags in rootfs vnode and mount RW.
  - Patch `lwvm` is_write_protected check.
  - Patch `PE_i_can_has_debugger` in `lwvm`.

- **Spawning SSH Client:**
  - Compile `dropbear` for ARMv7k.
  - Compile basic tools package for ARMv7k.
  - Problem: More sandbox restrictions.
  - Remove WatchOS-specific sandbox ops.

- **SSH Connection Problem:**
  - WatchOS interfaces:
    - `awdl0/ipv6`: `fe80::c837:8Ð°ff:fe60:90c2`
    - `lo0/ipv4`: `127.0.0.1`
    - `lo0/ipv6`: `fe80::1`
    - `utun0/ipv6`: `fe80::face:5e30:271e:3cd3`

- **Watch to iPhone Port Forwarding:**
  ```objc
  NSDictionary *comm = @{
      @"Command" : @"StartForwardingServicePort",
      @"ForwardedServiceName" : @"com.apple.syslog_relay",
      @"GizmoRemotePortNumber" : [NSNumber numberWithUnsignedShort: pt],
      @"IsServiceLowPriority" : @0
  };

  AMDServiceConnectionSendMessage(serviceConnection,
                                   (__bridge CFPropertyListRef)(comm),
                                   kCFPropertyListXMLFormat_v1_0);

  AMDServiceConnectionReceiveMessage(serviceConnection, &response,
                                     (CFPropertyListFormat*)&format);

  NSNumber *iphone_port = response[@"CompanionProxyServicePort"];
  ```
  Thanks to Luca Todesco.

- **SSH Connection Over Bluetooth:**

- **Black Hat Sound Bytes:**

- **Apple Watch Usage:**
  - Access to SMS, Calls, Health.
  - Photos and emails synced to Watch.
  - Fetch GPS location from the phone.
  - Microphone usage.
  - Apple Pay.

- **Interesting Findings:**
  - Full access to jailbroken watch file system.
  - Including SQLite3 databases:
    - Messages
    - Call history
    - Contacts
    - Emails

- **What's Next?**
  - Interpose or trampoline system functions.
  - Catch data on sync with iPhone.
  - Create tweaks for the watch.
  - Run Frida and Radare.

- **Takeaways:**
  - WatchOS security is equivalent to iOS.
  - New techniques are required.
  - Easier data forensics on the Watch.

- **References:**
  - Lookout - Technical Analysis of the Pegasus Exploits on iOS.
  - Luca Todesco - com.apple.companion_proxy client.
  - Siguza - tfp0 powered by Pegasus.
  - Stefan Esser - iOS 10 - Kernel Heap Revisited.

- **Contact:**
  - @mbazaliy

---

This document provides a detailed and structured overview of the exploitation and analysis of the Apple Watch's security.