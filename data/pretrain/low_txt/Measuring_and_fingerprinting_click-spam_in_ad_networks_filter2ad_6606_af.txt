### 5.4 Click-Spam in Mobile Ads

Next, we turn our attention to mobile ads, which, as discussed in Section 4, present significant challenges for even reputable ad networks in detecting click-spam. Figure 8b visually illustrates the reasons behind this difficulty. 

First, the mobile advertising market is relatively new, and many legitimate content providers have yet to replace the fly-by-night operators who are primarily focused on quick profits. Many of the mobile sites where our ads were displayed serve predominantly adult content, a situation reminiscent of the early days of the web when banner ads first appeared on similar sites. The two large clusters in the figure represent different adult entertainment networks, one hosted in Turkey and the other in Denmark. We do not delve into these clusters further.

#### 5.4.1 Mobile Games

**Ant-Smasher and Similar Games:**
At least 2% of clicks on control ads originated from smartphone games that require users to tap the screen near where the ad is displayed. A notable example is the Ant-Smasher iPhone app, where ants randomly move across the screen, including under the ad. Users must tap the ants before they disappear to progress in the game. We installed the games generating the most traffic and confirmed the following modus operandi:

- **How it works:**
  1. A mobile game developer, either accidentally or intentionally, places the in-app advertising control close to where the user must tap or drag to succeed in the game.
  2. Given the limited screen real estate, users are prone to mistapping, leading to accidental ad clicks.
  3. The user may realize their mistake and switch back to the game, but the browser has already begun fetching the ad landing page, resulting in a very short visit duration. We observed that 95% of users spent less than a second on the advertiser's page, as mentioned earlier.

**Discussion:**
This issue is largely a policy matter. Major ad network policies for parked domain affiliates state that they must not violate trademarks and copyrights. NetworkSolutions reserves the right to serve parked pages for a domain (or sub-domain) in its terms of service (TOS). It is unclear whether benefiting from someone else’s domain constitutes copyright or trademark infringement, and if so, whether it can be overridden by the TOS. This loophole benefits NetworkSolutions.

**Who made money:**
NetworkSolutions profited from major ad networks if the user clicked a link on the parked domain.

### 5.3.3 Advertising Arbitrage

**Dotellall.com Family:**
We next focus on the cluster of dotellall.com and 20 related domains, which account for 18% of the traffic for our search control ads. These websites appear to be lively social question-and-answer forums, but when we posted questions and answers, they disappeared after a few days, and the site was restored to its original state. Over time, the questions and answers do not change, and no date/time stamps are provided. For one site, we found that the content was blatantly copied from other locations on the web. As best as we can tell, the entire family of sites is an elaborate and realistic sham.

**How it works:**
1. We serendipitously discovered that the family of sites heavily advertises on search and contextual ad networks. They place thousands of ads for a wide range of (long-tail) keywords, appearing on low-popularity searches or low-quality publishers. On such publishers, ad links are almost indistinguishable from content. Being the only ad for many low-popularity searches, their ad is often placed above search results. When there is competition, their ad is typically ranked much lower (e.g., 7th or 8th position in the sidebar).
2. When a user clicks one of these ads, they are directed to the site, which shows ads only when the user arrives through an ad-click.

**Discussion:**
The core issue here is that the advertiser is charged despite the user not spending any time on the landing page. It is challenging for ad networks to know how long the user spent on the advertiser's site. If they rely on the advertiser for this information, the advertiser could easily lie to get a discount. Solving this without modifying the browser and without harming the user experience is a non-trivial problem.

One mitigating approach would be to audit games and apps that trick users into mistapping on the ad. However, this would likely spark an arms race for apps intentionally exploiting this loophole, though it would at least protect advertisers from apps accidentally triggering this. Unfortunately, ad networks are making it harder for advertisers and independent third-parties to identify bad apps. During our study, one major mobile advertising network stopped sending the application ID in the HTTP Referer.

**Who made money:**
The app made money from the ad network.

### 5.4.2 WAP Phones

**Waptrick.com and Other Sites:**
A significant number of WAP phones (phones with limited browsers that access the web via a WAP proxy) are shown mobile ads. Nearly 42.1% of traffic on our mobile control ads comes from these sources. We loaded several implicated sites with our browser's user-agent set to that of a WAP browser.

**How it works:**
1. Sites catering to WAP users and WAP proxies optimize page content for display on feature phones, potentially stripping away icons, colors, or sidebar content that visually differentiate an ad from a normal link.
2. Combined with the extremely small screen and clunky (keypad-based) navigation on non-smartphones, users often click links unintentionally or without realizing they are ads.

**Discussion:**
Proxies are the biggest hurdle in tracking down bad WAP sites that confuse users. Less than 36% of our clicks had the HTTP Referer needed to track them back to the originating website and confirm that it intermixed ads with content. While one might wish for legacy phones to become obsolete, this is unlikely in developing countries in the near future. Advertisers wishing to reach a global market will have to contend with click-spam originating from these vectors.

**Who made money:**
The WAP website made money from the ad network. For websites with arrangements with proxies, the proxy operator potentially made some fraction of that money.

### 5.5 Epilogue and Future Work

Investigating 26% of clicks on our control ads, we identified five classes of invalid clicks. We believe there are more classes of dubious traffic in our data and are exploring more automated means of reconstructing the attacks. In any case, click-spam remains an unsolved problem.

While there is a policy component to many of the case studies we presented, there is also a technological (and research) component to proactively discover attacks. Mobile is particularly tricky, as much of the telemetry needed for detecting click-spam does not exist. Given the growing importance of mobile advertising, research in this area is both important and timely.

### 6. Related Work

Related work falls into three distinct categories:

**Measuring Traffic Quality:**
There is surprisingly little past work systematically measuring the quality of click traffic. [26] develops a learning algorithm for estimating the true CTR of an ad in the presence of click-spam. [41] measures traffic from bulk traffic providers and finds some providers to be qualitatively worse than ad networks. Startups like Adometry, Visual IQ, and ClearSaleing claim to estimate click-spam rates but provide no transparency into their methods. Our click-spam estimation approach, grounded in our Bayesian framework and validated through extensive measurements, is the first principled approach an advertiser can independently apply at the granularity of individual ads.

**Documenting Click-Spam:**
The second category includes snapshots of click-spam attacks, much like the case studies in this paper. Daswani et al. [19] provide a good introduction to online advertising, pricing models, and online advertising fraud. Botnets like Clickbot.A [20], TDL-4 [36], and others [34] have been used for click fraud. More recent work describes fraud in ad exchanges [38]. Individual advertisers and security researchers have documented many more attacks in blog posts and white papers [8,10,13]. Each of these has been an ad-hoc targeted investigation given a specific publisher or attack vector. Our generic clustering and heavy-hitter detection approach starts from raw click logs to automatically identify and prioritize potential publishers/attack vectors for targeted investigations.

**Mitigating Click-Spam:**
The third category aims to identify individual clicks as click-spam so they can be discounted. Bluff Ads [25], on which we base our control ad design, are ads with unrelated targeting information (e.g., dog food ads for cat lovers). Clicks on Bluff ads are assumed to be click-spam, which the ad network should discount. While we subscribe to this assumption, we differ in how such ads should be used. [25] suggests blacklisting users with above-threshold clicks on bluff ads. There are two problems: first, this only applies to click-spam driven by malware. In non-malware scenarios, blacklisting the user serves little purpose since the bad publishers get a steady stream of unwitting users (false-negatives for Bluff ads); furthermore, the legitimate clicks of blacklisted users on good publishers would also get discounted (false-positives). The second problem is that even for click-spam driven by malware, it wouldn’t work. The malware we analyzed performs one click per day. If Bluff Ads were shown 1% of the time, it would take around 100 days to blacklist a user. The cost to the ad network would be 1% of their revenue, which is unacceptably high. We use control ads sparingly to collect data ($1000 represents a negligible fraction of ad network revenue), from which we then extract click-spam signatures that apply more broadly.

Other approaches to mitigating click-spam include SbotMiner [40], Sleuth [33], and Detectives [32]. SbotMiner tries to identify bot activity using KL-divergence to detect changes in query distributions, followed by pruning false positives due to flash crowds. Sleuth uncovers single-publisher fraud by finding correlation in multi-dimensional data; however, it is suitable only when the botnet uses tens of hundreds of IP addresses. Detectives detects coalition hit inflation attacks by their similarity seeker algorithm; it discovers coalitions made by pairs of fraudsters, which is then enhanced in [31] by finding groups of fraudsters. All these approaches apply only to botnet and malware-driven click-spam, which is dwarfed by other sources of click-spam in our data.

Premium Clicks [27], Access Control Gadgets (ACGs) [37], and CDN fraud prevention [30] focus on mitigation strategies beyond botnets. Premium clicks employ economic disincentives that devalue clicks from non-gold-standard users. ACGs ensure authentic UI interactions by requiring users to click a link. CDN fraud prevention proposes a heavy-weight challenge-response protocol for publisher-payee CDN models. While the first assumes an alternate ad economy, the second and third (applied to ad networks) require re-architecting the browser or the ad network infrastructure. None of these approaches apply to click-spam in existing ad networks.

Focusing on existing ad networks, Camelot [28] is Google’s click-fraud penetration system. It can test the susceptibility of the network to known click-spam signatures but does not detect new signatures. [39] describes the invalid click detection system inside Google without identifying the specific heuristics used to identify invalid clicks. No heuristic is perfect. Our data shows that click-spam is still an open problem despite these deployed systems.

### 7. Conclusion

In this paper, we take a systematic look at click-spam. We propose the first methodology for advertisers to independently measure click-spam rates on their ads. We also develop an automated methodology for ad networks to proactively fingerprint different simultaneous click-spam attacks. We validate both methodologies using data from major ad networks. We then conduct a large-scale measurement study of click-spam across ten major ad networks and four types of ads. In the process, we identify and perform in-depth analysis on seven ongoing click-spam attacks not currently caught by major ad networks. We conclude that even for the largest ad networks, click-spam is a serious problem, especially in the mobile advertising context. Given the evolving nature of click-spam, we believe it is an open problem that requires a concerted effort from the research community to tackle. To this end, we have publicly released the data gathered for this paper to aid other researchers in the design of novel click-spam defense techniques.

### Acknowledgments

We would like to thank Jigar Mody, Matt Graham, our shepherd Kirill Levchenko, and our anonymous reviewers. This paper is much improved thanks to their valuable feedback and suggestions.

### References

[1] AdSense for domains program policies.
[8] Google Click Fraud Inflates Conversion Rates and Tricks Advertisers into Overpaying. http://www.benedelman.org/news/011210-1.html.
[9] Google Redirect Virus: How to Remove. http://www.pcmag.com/article2/0,2817,2370676,00.asp.
[10] International Cyber Ring That Infected Millions of Computers Dismantled. http://www.fbi.gov/news/stories/2011/november/malware_110911.
[11] Malware connection report. http://www.malware-control.com/statics-pages/03aaf7c8e47ef32e8de23dfe9215d4a5.php.
[12] Stealing Clicks. http://www.forbes.com/2007/09/21/google-click-forensics-tech-secure-cx_ag_0924fraud.html.
[13] Uncovering an advertising fraud scheme. Or “the Internet is for porn”. http://www.behind-the-enemy-lines.com/2011/03/uncovering-advertising-fraud-scheme.html.
[14] Upcoming changes in Google’s HTTP Referrer. http://googlewebmastercentral.blogspot.com/2012/03/upcoming-changes-in-googles-http.html.
[15] L. V. Ahn, M. Blum, N. J. Hopper, and J. Langford. CAPTCHA: Using hard AI problems for security. EUROCRYPT’03, 2003.
[16] Click Quality Team, Google Inc. How Fictitious Clicks Occur in Third-Party Click Fraud Audit Reports. http://www.google.com/adwords/ReportonThird-PartyClickFraudAuditing.pdf.
[17] G. Cormode and S. Muthukrishnan. What’s hot and what’s not: Tracking most frequent items dynamically. In Proceedings of ACM PODC, July 2003.
[18] G. Cormode and S. Muthukrishnan. Improved data stream summaries: The count-min sketch and its applications. Journal of Algorithms, 2004.
[19] N. Daswani, C. Mysen, V. Rao, S. Weis, K. Gharachorloo, and S. Ghosemajumder. Crimeware: Understanding New Attacks and Defenses, chapter Online Advertising Fraud. 2008.
[20] N. Daswani and M. Stoppelman. The anatomy of Clickbot.A. In Proceedings of HotBots, 2007.
[21] J. R. Douceur. The Sybil Attack. In Proceedings of IPTPS ’02.
[22] C. Estan and G. Varghese. New Directions in Traffic Measurement and Accounting. In Proceedings of ACM SIGCOMM, Aug. 2002.
[23] A. M. Eugene Rodionov. The evolution of TDL: Conquering x64. http://go.eset.com/us/resources/white-papers/The_Evolution_of_TDL.pdf.
[24] B. Geddes. Search arbitrage: Web blight or brilliant marketing strategy? http://searchengineland.com/search-arbitrage-web-blight-or-brilliant-marketing-strategy-10768.
[25] H. Haddadi. Fighting online click-fraud using bluff ads. SIGCOMM Comput. Commun. Rev., 2010.
[26] N. Immorlica, K. Jain, M. Mahdian, and K. Talwar. Click Fraud Resistant Methods for Learning Click-Through Rates. In Proceedings of the Workshop on Internet and Network Economics (WINE ’05).
[27] A. Juels, S. Stamm, and M. Jakobsson. Combating click fraud via premium clicks. In Proceedings of 16th USENIX Security Symposium on USENIX Security Symposium, 2007.
[28] C. Kintana, D. Turner, J.-Y. Pan, A. Metwally, N. Daswani, E. Chin, and A. Bortz. The goals and challenges of click fraud penetration testing systems. International Symposium on Software Reliability Engineering, 2009.
[29] H. Lieberman. Letizia: An agent that assists web browsing. In International Joint Conference on Artificial Intelligence, 1995.
[30] S. Majumdar, D. Kulkarni, and C. V. Ravishankar. Addressing click fraud in content delivery systems. In In Proceedings of the 26th IEEE INFOCOM International Conference on Computer Communications, 2007.
[31] A. Metwally, D. Agrawal, A. El Abbad, and Q. Zheng. On hit inflation techniques and detection in streams of web advertising networks. ICDCS ’07, 2007.
[32] A. Metwally, D. Agrawal, and A. El Abbadi. Detectives: Detecting coalition hit inflation attacks in advertising networks streams. WWW ’07, 2007.
[33] A. Metwally, F. Emekçi, D. Agrawal, and A. El Abbadi. Sleuth: Single-publisher attack detection using correlation hunting. VLDB, 2008.
[34] B. Miller, P. Pearce, C. Grier, C. Kreibich, and V. Paxson. What’s clicking what? Techniques and innovations of today’s clickbots. In Proceedings of the 8th international conference on Detection of intrusions and malware, and vulnerability assessment, DIMVA’11, 2011.
[35] B. Mordkovich and E. Mordkovich. Click fraud and how to counteract it in ad campaigns. In Pay-Per-Click Search Engine Marketing Handbook, 2005.
[36] E. Rodionov and A. Matrosov. The evolution of TDL: Conquering x64. http://support.google.com/adsense/bin/answer.py?answer=96332. Technical report, 2011.
[2] The AdSense revenue share. http://adsense.blogspot.com/2010/05/adsense-revenue-share.html.
[3] Click Fraud Falls in Q4 2010. http://searchenginewatch.com/article/2050117/Click-Fraud-Falls-in-Q4-2010.
[37] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. Wang, and C. Cowan. User-driven access control: Rethinking permission granting in modern operating systems. IEEE Symposium on Security and Privacy, 2012.
[38] B. Stone-Gross, R. Stevens, A. Zarras, R. Kemmerer, C. Kruegel, and G. Vigna. Understanding fraudulent activities in online ad exchanges. Internet Measurement Conference, 2011.
[4] Click fraud rampant in online ads, says Bing. http://www.theaustralian.com.au/media/click-fraud-rampant-in-online-ads-says-bing/story-e6frg996-1226056349034.
[5] Cloaking and Faking the Referrer. http://kbeezie.com/view/cloaking-and-faking-referrer/.
[6] For Impatient Web Users, an Eye Blink Is Just Too Long to Wait. http://www.nytimes.com/2012/03/01/technology/impatient-web-users-flee-slow-loading-sites.html.
[7] Google AdSense for Domains. http://www.google.com/domainpark/index.html.
[41] Q. Zhang, T. Ristenpart, S. Savage, and G. M. Voelker. Got traffic?: An evaluation of click traffic providers. In Proceedings of the 2011 Joint WICOW/AIRWeb Workshop on Web Quality, WebQuality ’11, 2011.