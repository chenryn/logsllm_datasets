### BYO-Disaster: Why Corporate Wireless Still Sucks!

#### Introduction
We are a group of tech enthusiasts with a passion for uncovering and addressing security vulnerabilities. Our findings, while sometimes inconsistent, highlight critical issues in corporate wireless networks.

#### Authors
- djwishbone
- PuNk1nPo0p

#### Why You Should Stay
This presentation will reveal how to obtain clear-text credentials from any PEAP-enabled WPA2-Enterprise network without cracking a single hash. We will also introduce a new set of tools that automate these attacks.

#### How It Works
We will explore a "Functionality Issue" discovered in how iOS and macOS devices process MSCHAPv2. Specifically, we will demonstrate the use of EAP-GTC as an alternative inner authentication mechanism to MSCHAPv2.

#### Attack Process
1. **Radius Access Request**
   - EAP Response (Identity)
   - EAP Request (Identity)
   - PEAP Start
   - EAP Type Proposal
   - TLS Tunnel Setup
   - Inner EAP (MSCHAPv2)
     - Send Identity Again
     - MSCHAPv2 Challenge
     - Response with Client Challenge
     - Success with Challenge Response
     - MSCHAPv2 Success
     - EAP-TLV Success
   - EAP Success
   - Install Keys on AP
   - Finish Connection

2. **Client Responds with MS-CHAPv2 Hash and Peer Challenge**
   - Server Sends TLV-Success
   - No Password in Database
   - Peer Challenge Does Not Match
   - Client Responds with TLV-Success
   - IPWNER
   - Reject Password
   - Client Checks for Captive Portal
   - Attacker Responds with Captive Portal
   - Server Challenges Client

3. **MITM Completion**
   - Redirect all DNS requests to the attacker's captive portal page.
   - Capture credentials in clear-text.

#### What Just Happened?
- **iOS/macOS Supplicants:** These devices do not require MSCHAPv2 success when connecting to the wireless network, undermining mutual authentication.
- **Bypassing Inner Authentication:** Establishing a Man-in-the-Middle (MITM) connection.
- **Trapping Captive Portal Requests:** Redirecting mobile device requests to a malicious portal.
- **Clear-Text Credentials:** Users re-enter their credentials, which are now captured in clear-text.

#### Responsible Disclosure
- **The Hacker:**
  - "I discovered a way to expose your backdoor and urge you to patch it up before someone dumps a nasty payload in it! Here’s all my research, screenshots, etc."
  - (A month later) "Can I get the status of ticket number 999999999999999999999999999999999999999999999?"

- **The Corporation:**
  - "Thank you! Though you’re probably wrong! We will have our outsourced MSP put 10 people on it right away and never get back to you. Have a blessed day!"
  - "Hi, me Josh 4379. I see not what you say, I like gummy bears, ticket closed!... Have a blessed day!"

- **Corporate Response:**
  - "After examining your report, we do not see any actual security implications. It is the responsibility of the client to ensure they are communicating with a trusted server before attempting MSCHAPv2 inner authentication. The server could just as well have suggested the EAP-GTC protocol, after which the client would have provided its password in cleartext as the server instructed."

#### GENERIC TOKEN CARD (GTC)
- **EAP Method:** Created by Microsoft/Cisco for use with PEAPv1.
- **Purpose:** Supports hardware token cards and one-time passwords.
- **Similarity:** Similar to PEAPv0 EAP-MSCHAPv2 with no peer challenge.
- **Client Behavior:** Some clients do not specify the type of password, just prompt for username and password.
- **Advantage:** Can we use this to our advantage?

#### GTC Attack – PEAPingtom
- **Devices Supported:**
  - iOS/macOS
  - Android (does not prompt for cert, NEAT!)
  - *n?x works in Ubuntu but requires user setup
  - Windows – safe for now, no native support
- **Attack Features:**
  - No captive portal required.
  - MITM attack is trivial and includes clear-text passwords.
  - Instant capture of MSCHAPv2 passwords on iOS devices after user accepts certificate from an evil twin.

#### Tools and Requirements
- **Host System**
- **Ubuntu 12.04**
- **Wi-Fi Adapter (e.g., Alfa AWUS051NH)**
- **Radius Patch (PuNk1n.patch)**
- **HAVOC-APPS**
- **LootBooty Wi-Fi Tools**

#### Historical Perspective
- **Cracking Hashes:** Too hard.
- **Tricking Clients:** Can we trick the client into just giving us the password?
- **Radius Acceptance:** What if Radius accepted everything?
- **Building on Past Work:** Started with previous attack methods.
- **Unexpected Discoveries:**

#### Conclusion
For more information, visit [www.LootBooty.com](http://www.LootBooty.com).

**Thank You!**