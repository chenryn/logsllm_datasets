以下是优化后的参考文献列表，使其更加清晰、连贯和专业：

1. IEEE, 2005. (S&P’05), pp. 32-46.
2. Comparetti, P.M., Salvaneschi, G., Kirda, E., Kolbitsch, C., Kruegel, C. & Zanero, S. (2010). Identifying dormant functionality in malware programs. *2010 IEEE Symposium on Security and Privacy*, pp. 61-76.
3. Corona, I., Maiorca, D., Ariu, D. & Giacinto, G. (2014). Lux0R: Detection of Malicious PDF-embedded JavaScript Code Through Discriminant Analysis of API References. *Proceedings of the 2014 Workshop on Artificial Intelligent and Security Workshop (AISec '14)*, ACM, New York, NY, USA, pp. 47-57.
4. Council, C. & Seaman, S. (2016). ClamAV. Available at: https://www.clamav.net/ [Accessed 2016].
5. cys3c. (2016). BackdoorMan. Available at: https://github.com/cys3c/BackdoorMan [Accessed 2016].
6. Dahse, J. & Holz, T. (2014). Simulation of Built-in PHP Features for Precise Static Code Analysis. *NDSS 2014*.
7. Egele, M., Woo, M., Chapman, P. & Brumley, D. (2014). Blanket execution: Dynamic similarity testing for program binaries and components. *23rd USENIX Security Symposium (USENIX Security 14)*, pp. 303-317.
8. Graziano, M., Canali, D., Bilge, L., Lanzi, A. & Balzarotti, D. (2015). Needles in a Haystack - Mining Information from Public Dynamic Analysis Sandboxes for Malware Intelligence. *USENIX Security Symposium*.
9. Hills, M. (2015). Evolution of dynamic feature usage in PHP. *22nd IEEE International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015, Montreal, QC, Canada, March 2-6, 2015*. doi: 10.1109/SANER.2015.7081870, pp. 525-529.
10. Hu, X. & Shin, K.G. (2013). DUET - integration of dynamic and static analyses for malware clustering with cluster ensembles. *ACSAC (2013)*, pp. 79-88.
11. Verizon. (2017). 2017 Data Breach Investigations Report. Available at: http://www.ictsecuritymagazine.com/wp-content/uploads/2017-Data-Breach-Investigations-Report.pdf [Accessed 2017].
12. Inscapsula. (2017). How Backdoors Bypass Security Solutions with Advanced Camouflage Techniques. Available at: https://www.incapsula.com/blog/backdoor-malware-analysis-obfuscation-techniques.html [Accessed 2017].
13. Invernizzi, L. & Comparetti, P.M. (2012). EvilSeed - A Guided Approach to Finding Malicious Web Pages. *IEEE Symposium on Security and Privacy (2012)*.
14. ionCube Ltd. (2019). ionCube. Available at: https://www.ioncube.com/phpencoder.php [Accessed 2019].
15. Jordaney, R., Sharad, K., Dash, S.K., Wang, Z., Papini, D., Nouretdinov, I. & Cavallaro, L. (2017). Transcend: Detecting concept drift in malware classification models. *PROCEEDINGS OF THE 26TH USENIX SECURITY SYMPOSIUM (USENIX SECURITY'17)*, USENIX Association, pp. 625-642.
16. Jovanovic, N., Kruegel, C. & Kirda, E. (2006). Pixy: a static analysis tool for detecting Web application vulnerabilities. *Security and Privacy (2006)*, pp. 6-263.
17. Jovanovic, N., Kruegel, C. & Kirda, E. (2006). Precise alias analysis for static detection of web application vulnerabilities. *PLAS (2006)*.
18. Kapravelos, A., Shoshitaishvili, Y., Cova, M., Kruegel, C. & Vigna, G. (2013). Revolver - An Automated Approach to the Detection of Evasive Web-based Malware. *USENIX Security Symposium (2013)*.
19. Kharraz, A., Arshad, S., Mulliner, C., Robertson, W.K. & Kirda, E. (2016). UNVEIL - A Large-Scale, Automated Approach to Detecting Ransomware. *USENIX Security Symposium (2016)*.
20. Kim, K., Kim, I.L., Kim, C.H., Kwon, Y., Zheng, Y., Zhang, X. & Xu, D. (2017). J-force: Forced execution on javascript. *Proceedings of the 26th international conference on World Wide Web*, International World Wide Web Conferences Steering Committee, pp. 897-906.
21. Kolbitsch, C., Livshits, B., Zorn, B. & Seifert, C. (2012). Rozzle: De-cloaking internet malware. *2012 IEEE Symposium on Security and Privacy*, IEEE, pp. 443-457.
22. Kruegel, C. (2014). Full system emulation: Achieving successful automated dynamic analysis of evasive malware. *Proc BlackHat USA Security Conference (2014)*.
23. Masters, L. (2016). CakePHP. Available at: https://cakephp.org/ [Accessed 2016].
24. Leontiadis, N., Moore, T. & Christin, N. (2011). Measuring and Analyzing Search-Redirection Attacks in the Illicit Online Prescription Drug Trade. *USENIX Security Symposium (2011)*.
25. Lim, C. & Ramli, K. (2014). Mal-ONE: A unified framework for fast and efficient malware detection. *2014 IEEE 2nd International Conference on Technology, Informatics, Management, Engineering & Environment (TIME-E)*, IEEE, pp. 1-6.
26. Zend Technologies Ltd. (2015). zendguard. Available at: http://www.zend.com/en/products/zend-guard/ [Accessed 2015].
27. MarketWired. (2014). Joomla! CMS Passes 50 Million Downloads. Available at: http://www.marketwired.com/press-release/joomla-cms-passes-50-million-downloads-1882565.htm [Accessed 2014].
28. Geniar, M. (2019). PHP Exploit Scripts. Available at: https://github.com/mattiasgeniar/php-exploit-scripts/ [Accessed 2019].
29. memcached.org. (2019). Memcached: Free and open source, high-performance, distributed memory object caching system. Available at: https://memcached.org/ [Accessed 2019-08-25].
30. Cihar, M. (2016). phpMyAdmin. Available at: https://www.phpmyadmin.net/ [Accessed 2016].
31. Moser, A., Kruegel, C. & Kirda, E. (2007). Exploring Multiple Execution Paths for Malware Analysis. *2007 IEEE Symposium on Security and Privacy (SP '07)*, IEEE, pp. 231-245.
32. NBS Systems. (2016). PHP Malware Finder. Available at: https://github.com/nbs-system/php-malware-finder [Accessed 2016].
33. Nimbusec GmbH. (2016). shellray - a php webshell detector. Available at: https://shellray.com/ [Accessed 2016].
34. Oracle Corporation. (2019). MySQL: The world’s most popular open source database. Available at: https://mysql.com/ [Accessed 2019-08-25].
35. Pastebin. (2019). Pastebin. Available at: https://pastebin.com/ [Accessed 2019].
36. Peng, F., Deng, Z., Zhang, X., Xu, D., Lin, Z. & Su, Z. (2014). X-Force - Force-Executing Binary Programs for Security Applications. *USENIX Security Symposium (2014)*.
37. Peng, F., Deng, Z., Zhang, X., Xu, D., Lin, Z. & Su, Z. (2014). X-force: force-executing binary programs for security applications. *23rd USENIX Security Symposium (USENIX Security 14)*, pp. 829-844.
38. php.net. (2019). PHP: Autoloading Classes - Manual. Available at: https://www.php.net/manual/en/language.oop5.autoload.php [Accessed 2019].
39. Polychronakis, M. & Provos, N. (2008). Ghost Turns Zombie - Exploring the Life Cycle of Web-based Malware. *LEET (2008)*.
40. Provos, N., McNamee, D., Mavrommatis, P., Wang, K., Modadugu, N. et al. (2007). The Ghost in the Browser: Analysis of Web-based Malware. *HotBots 7 (2007)*, pp. 4-4.
41. R-fx Networks. (2016). Linux Malware Detect. Available at: https://www.rfxn.com/projects/linux-malware-detect/ [Accessed 2016].
42. r57. (2016). r57c99 Official Website. Available at: http://www.r57c99.com/ [Accessed 2016-09-30].
43. RedisLabs. (2019). Redis: An open source, in-memory data structure store. Available at: https://redis.io/ [Accessed 2019-08-25].
44. Schäfer, M., Sridharan, M., Dolby, J. & Tip, F. (2013). Dynamic determinacy analysis. *ACM SIGPLAN Notices, Vol. 48*, ACM, pp. 165-174.
45. Sharif, M., Yegneswaran, V., Saidi, H., Porras, P. & Lee, W. (2008). Eureka: A Framework for Enabling Static Malware Analysis. *Computer Security - ESORICS 2008: 13th European Symposium on Research in Computer Security, Málaga, Spain, October 6-8, 2008. Proceedings*, Sushil Jajodia and Javier Lopez (Eds.), Springer Berlin Heidelberg, Berlin, Heidelberg, pp. 481-500.
46. Sharif, M.I., Lanzi, A., Giffin, J.T. & Lee, W. (2008). Impeding Malware Analysis Using Conditional Code Obfuscation.
47. Soska, K. & Christin, N. (2014). Automatically Detecting Vulnerable Websites Before They Turn Malicious. *USENIX Security Symposium (2014)*.
48. Staicu, C.A. & Pradel, M. (2018). Freezing the web: A study of redos vulnerabilities in javascript-based web servers. *27th USENIX Security Symposium (USENIX Security 18)*, pp. 361-376.
49. Starov, O., Dahse, J., Ahmad, S.S., Holz, T. & Nikiforakis, N. (2016). No honor among thieves: A large-scale analysis of malicious web shells. *Proceedings of the 25th International Conference on World Wide Web*, International World Wide Web Conferences Steering Committee, pp. 1021-1032.
50. Sucuri. (2017). Hacked Website Report 2017. Available at: https://www.fortinet.com/content/dam/fortinet/assets/threat-reports/Fortinet-Threat-Report-Q2-2017.pdf [Accessed 2017].
51. Sun, B., Fujino, A. & Mori, T. (2016). POSTER: Toward Automating the Generation of Malware Analysis Reports Using the Sandbox Logs. *ACM, New York, New York, USA*.
52. The PHP Group. (2016). PHP runkit book. Available at: http://php.net/manual/en/book.runkit.php [Accessed 2016-09-30].
53. UnPHP. (2016). UnPHP - The Online PHP Decoder. Available at: http://unphp.net/ [Accessed 2016].
54. VirusTotal. (2016). yara: The pattern matching swiss knife for malware researchers (and everyone else). Available at: http://virustotal.github.io/yara/ [Accessed 2016].
55. W3Techs. (2018). Usage statistics and market share of PHP for websites. Available at: https://w3techs.com/technologies/details/pl-php/all/all [Accessed 2018-12-5].
56. Wagener, G., State, R. & Dulaunoy, A. (2008). Malware behaviour analysis. *Journal in Computer Virology 4, 4 (2008)*, pp. 279-287.
57. Wilhelm, J. & Chiueh, T. (2007). A forced sampled execution approach to kernel rootkit identification. *International Workshop on Recent Advances in Intrusion Detection*, Springer, pp. 219-235.
58. Wong, M.Y. & Lie, D. (2018). Tackling runtime-based obfuscation in Android with TIRO. *27th USENIX Security Symposium (USENIX Security 18)*, pp. 1247-1262.
59. Wordpress. (2016). Wordpress Pluggable Functions. Available at: https://codex.wordpress.org/PluggableFunctions [Accessed 2019-08-25].
60. Wrench, P.M. & Irwin, B.V.W. (2014). Towards a sandbox for the deobfuscation and dissection of PHP malware. *2014 Information Security for South Africa (ISSA)*, IEEE, pp. 1-8.
61. Wrench, P.M. & Irwin, B.V.W. (2015). Towards a PHP webshell taxonomy using deobfuscation-assisted similarity analysis. *ISSA (2015)*.
62. Xu, Z., Zhang, J., Gu, G. & Lin, Z. (2014). Goldeneye: Efficiently and effectively unveiling malware’s targeted environment. *International Workshop on Recent Advances in Intrusion Detection*, Springer, pp. 22-45.
63. Yu, T., Sekar, V., Seshan, S., Agarwal, Y. & Xu, C. (2015). Handling a trillion (unfixable) flaws on a billion devices: Rethinking network security for the internet-of-things. *Proceedings of the 14th ACM Workshop on Hot Topics in Networks*, ACM, p. 5.

### 附录

#### A 行为分析
表5列出了恶意软件样本中最常见的潜在恶意函数及其在样本中的普遍程度。从表中可以看出，解混淆函数（例如，`base64_decode`, `unpack`, `gzinflate`）、系统和解释器检查及修改函数（例如，`ini_set`, `php_uname`, `set_time_limit`）、程序执行函数（例如，`shell_exec`, `exec`, `system`）以及文件系统函数（例如，`file_get_contents`, `fopen`, `mkdir`, `unlink`）构成了这些函数的大部分。两个例外是`dl`（用于加载动态库）和`mail`（用于发送电子邮件），它们也是最常用的20个潜在恶意函数之一。

**表5：数据集A中最常使用的潜在恶意函数及其普遍程度**

| 函数名 | 次数 | 函数名 | 次数 |
| --- | --- | --- | --- |
| `ini_set` | 3888 | `fopen-write` | 84 |
| `file_get_contents` | 3788 | `gethostbyaddr` | 82 |
| `base64_decode` | 1892 | `system` | 82 |
| `php_uname` | 511 | `getcwd` | 76 |
| `dl` | 470 | `curl_init` | 70 |
| `fopen` | 231 | `curl_exec` | 70 |
| `mkdir` | 134 | `shell_exec` | 40 |
| `set_time_limit` | 127 | `gzinflate` | 24 |
| `mail` | 110 | `unpack` | 23 |
| `unlink` | 96 | `exec` | 22 |

#### A.1 数据集A中的文件扩展名（1 TB真实网站数据）
在第4.2节中，我们使用了包含87个现实世界感染网站的大规模语料库，共有3,225,403个文件（约1 TB）。该数据集包括各种现实世界中的恶意软件，展示了MalMax如何应对实际的高级恶意软件。我们进一步分析了数据集中文件类型及其按扩展名分布的情况。

**图11：数据集分解：文件扩展名**
图11显示了数据集中文件扩展名的组成。前10个文件扩展名是`php`, `json`, `png`, `bin`, `js`, `jpg`, `css`, `svg`, `html`, 和 `gif`。

#### A.2 PhpMalScan分析结果详细信息（MS和PMFR值）
图12显示了53个恶意软件样本和10个合成样本的PMFR和MS值。为了便于理解，图表将PMFR值乘以4（5%阈值在图表中为20%）。请注意，如果PMFR值高于5%，PhpMalScan会将样本检测为恶意软件。因此，在图12中，如果PMFR或MS值高于20，则样本被检测为恶意软件。只有一个恶意软件样本m36，PhpMalScan未能检测到。在这种情况下，MS和PMFR均为0，表明我们的工具未能发现任何恶意行为。

**观察结果**：
首先，良性程序可能具有非零恶意得分（例如，图12中的sb1到sb5），因为它们发出可疑行为，如发送电子邮件。如果良性程序在其主要部分和广泛地采用可疑行为，恶意得分可能会超过阈值并导致误报。然而，这实际上意味着程序除了可疑任务外没有其他特定任务，这种情况在实践中很少见。其次，我们发现PMFR和MS的组合在检测恶意软件方面非常有效，因为一个在检测小型恶意程序方面更有效，另一个在检测具有特定恶意段的大型恶意软件方面更有效。具体来说，对于恶意合成示例（sm1到sm5），它们要么具有高PMFR得分（sm1, sm3, sm4），要么具有高MS值（sm2, sm5）。在sm1的情况下，它是一个试图提取数据库服务器root密码的暴力破解者，大多数活动都是可疑的（即循环遍历密码字典，尝试每个密码连接到数据库），因此被标记为恶意。单独尝试连接数据库可能是良性的，但持续尝试尤其是伴随着失败时，可以被视为恶意。同样，在sm5的情况下，它是一个使用循环发送数百封垃圾邮件的垃圾邮件发送者，没有恶意函数（注意`mail()`本身是良性的，但其重复调用可以被视为恶意，因此每次调用都会增加恶意得分1）。由于大多数执行的语句都是`mail()`，因此由于高MS值（即101）而被标记为恶意。

### B 多方面执行细节
反事实执行、多路径执行[14]和强制执行[23, 36, 53]都共享相同的强行探索可能执行路径以覆盖尽可能多代码的想法。MalMax更接近于强制执行技术而不是多路径执行技术，因为它即使分支条件不满足也会强行驱动执行进入某个分支。然而，MalMax与多路径执行和强制执行不同之处在于，MalMax在隔离的执行环境之间共享全局工件（例如，全局变量、函数/类/常量定义等），以发现新的动态生成的代码，特别是在PHP应用程序中常用的`eval`和`include`等构造。

**算法**：算法1提供了MalMax分析的高层次算法，包括反事实执行（第3.1节，第3-6行）和协作隔离执行中的全局资源共享（第3.2节，第7-14行）。Exercise是MalMax的核心，负责探索和发现程序代码和执行状态。它有两个输入：当前隔离执行环境`CurIE`和基本块`BB`。

```plaintext
算法1：MalMax的高层次算法
1. procedure Exercise( IsolatedExec CurIE, BasicBlock BB )
2.   for each instruction i ∈ BB do
3.     if i is a Branch Instruction then
4.       Exercise( CurIE, i.Taken-Branch )
5.       NewIE ← CreateIsolatedExecution( i.Not-Taken-Branch )
6.       Exercise( NewIE, i.Not-Taken-Branch )
7.     for each unresolved artifact ua ∈ UA do
8.       if i contains unresolved artifacts UA then
9.         RA ← RA ∪ SearchGlobalArtifact( IE, ua )
10.    for each isolated execution IE ∈ all isolated executions do
11.      for each resolved artifact ra ∈ RA do
12.        NewIE ← CreateIsolatedExecution( BB )
13.        UpdateIsolatedExecution( NewIE, ra )
14.        Exercise( NewIE, BB )
```

希望这些优化后的文本能够更好地满足您的需求。