### Table Entry Repair and Overwrite Mechanism

A table entry is never repaired; it is only overwritten with new, ideally non-corrupted data. This overwriting occurs when an instruction that writes its result to the corresponding register file entry commits. Many of the trials in the archrat's "Gray Area" category are due to injections into a register alias table (RAT) entry whose corresponding architectural register is not written to within the simulation limit.

### Gray Area Categories and Pipeline Flush

The "Gray Area" categories for control (ctrl), queue control (qctrl), reorder buffer pointer (robptr), and valid state classifications also increase in size, displacing locked failures. This indicates that the timeout counter mechanism successfully flushed and restarted the pipeline, resulting in subsequent correct execution. However, the timing changes due to the pipeline flush make a complete state match unlikely, pushing many trials into the "Gray Area."

### Failure Contributions in Protected and Unprotected Experiments

Figure 10 presents a pie chart depicting the relative contributions of each state type to failures. This figure contrasts with Figure 8 from the unprotected experiment. Failures are now dominated by transient faults affecting the program counter (pc), control (ctrl), and data categories. Note that failures from the protected elements were not completely eliminated. These failures were the result of transient faults affecting areas left unprotected to minimize cycle time impact.

### Fair Comparison of Aggregate Totals

It is important to note that directly comparing the aggregate total in Figure 9 to its counterpart in Figure 4 is not fair. This is because the various protection mechanisms introduced 6-7% extra (mostly non-vulnerable) state. After accounting for a 7% higher transient fault rate, the implemented mechanisms reduce the known failure rate (represented by the SDC and Terminated categories) by approximately 75%.

### Architectural Implications

Soft errors that are not masked at the microarchitectural level propagate to the architectural level and become visible to the running application. However, masking continues to occur, and some fraction of these errors are masked at the architectural or application level. In this section, we model errors that have propagated to the architectural level and observe their effects.

### Fault Injection Campaigns

For this set of fault injection campaigns, we use a modified version of SimpleScalarâ€™s functional simulator [4]. An instruction from the dynamic instruction stream is selected at random and forced to execute incorrectly. The program is then allowed to proceed, and the simulation is monitored for one of four outcomes: (1) Exception, (2) State OK, (3) Output OK, and (4) Output Bad.

- **Exception**: If the error-injected program generates an exception, it is placed in the "Exception" category, representing a noisy failure.
- **State OK**: If the architectural state (memory, registers, program counter) completely matches that of a non-error-injected execution of the program prior to a system call, the trial is placed in the "State OK" category, indicating software masking of faults.
- **Output OK**: If the trial does not fit in either of the first two categories, the user-visible output of the application may still be correct. To identify this, the output of the application is compared against that of a reference simulation. If the outputs are identical, the trial is placed in the "Output OK" category. Note that the "Output OK" category is weaker than the "State OK" category.
- **Output Bad**: A trial that generates incorrect user-visible output is added to the "Output Bad" category.

### Fault Models

We use six different fault models in this experiment:
1. A single bit flip targeting the lower 32 bits of the result of a register write.
2. A single bit flip targeting all 64 bits.
3. Replacing the result of a register write with 64 random bits of data.
4. A single bit flip into an instruction word.
5. Changing an instruction into a no operation (nop).
6. Forcing conditional branches to flip direction.

Fault models (1)-(4) reflect the failure modes seen from the microarchitectural fault injection experiments in Section 3, while fault models (5) and (6) provide additional insight into the transient fault masking levels of software. Results of these experiments are presented in Figure 11 as averages across 10 SPEC2000 integer benchmarks, representing approximately 10,000-15,000 trials each, with a confidence interval of less than 1% at a 95% confidence level for each fault injection campaign.

### Results and Observations

From the results, we see that across all the injection campaigns, approximately half of the trials result in complete architectural state convergence (State OK). This indicates that the masking levels of software are significant, and roughly half the errors that escape the hardware layer are eventually masked by the application. This masking effect is largely due to dead and transitively dead values in the instruction stream.

We also note that in the first five fault models, a moderately sized portion (10-20%) of the trials from State OK had divergent control flow when compared against a reference execution. This means that the induced fault temporarily impacted the control flow of the application before the fault was completely masked. A fault model that only affected control flow was used in the last experiment, and we further investigated this phenomenon in [22].

### Limitations of Results

The experimental results are heavily based on our choice of fault models, microarchitecture, simulation models, and workloads. For example, much of this work is geared towards characterizing the effects of single-bit corruptions. If this fault model fails to accurately model physical transient faults, an underlying assumption of this work is broken. The same is true of our microarchitectural model: we only characterize the failure rates of our particular pipeline in this paper, but we believe there are lessons to be learned that are more broadly applicable. For example, the general methodology of identifying vulnerable portions of a microprocessor and devising low-overhead protection mechanisms for those portions is a generally applicable technique.

Implementation choices made in the microarchitectural and logic design process may affect the measured masking levels. There were occasions where we chose a simpler implementation over a more complex and compact one. For example, some Program Counter (PC) fields within each Reorder Buffer entry could have been stored more efficiently within a smaller separate structure, potentially reducing the number of bits in the Reorder Buffer and potentially reducing the masking rate. The extent to which this affects our results is unclear, but we suspect it to be fairly small. These trade-offs are also made in real implementations, and some real decisions might also increase masking rates.

While care was taken to create a detailed microarchitectural experimental infrastructure, not all intricacies of a modern dynamically scheduled processor were fully modeled. Nonetheless, we believe our model was created with sufficient detail to provide error manifestation results accurate to within 10s of percent when compared with those of a real implementation.

### Related Work

Czeck and Siewiorek [6] performed a similar analysis through fault injection into selected bits of state in their simulation model. Here, we use a more modern simulation model and do a more thorough classification of the failure modes of various types of state in a microprocessor.

Mukherjee et al. [21] introduced a method to compute Architectural Vulnerability Factors for various processor components and IA-64 software through analysis. The general experimental results presented in this work corroborate their analytic findings.

Kim and Somani [12] injected faults into picoJava-II, a microprocessor core developed by Sun Microsystems. Their microarchitectural model is more accurate than the one used in this work; however, it is less complex in terms of high-performance microarchitectural features. They only verify the architectural state of the machine. Here, trials that result in a complete microarchitectural state match are identified along with architectural state failures.

Ando et al. [10] protected the data and address paths of their SPARC64 design with parity. Gaisler [9] protected the register file in his SPARC V8 implementation using a technique similar to the one used in this work. Furthermore, he protected various flip-flops by using triple modular redundancy and providing three separate clock trees. Franklin [7] noted different modes of failure throughout the pipeline and proposed mechanisms to guard against them. Here, vulnerable state was identified through fault injection, and protection mechanisms to defend against a majority of transient faults were proposed, implemented, and tested.

Other related work includes higher overhead mechanisms to protect microprocessors with various forms of redundancy in microarchitecture [15, 18, 23]. Here, arguably lower overhead approaches are proposed, albeit with lower fault coverage. Previous work [19, 21, 2] has also explored the composition of dynamic instruction streams for dead and silent instructions. This work explores the same subject through fault injection and identifies a larger set of dynamically dead instructions. Namely, a significant portion of control instructions are dead, and thus, instructions that produce values for these control instructions are also possibly dead.

### Conclusion

In this work, an analysis of the effects of transient faults on high-performance processors was characterized. A detailed microarchitectural model was created, and a fault model was selected. The results of the ensuing fault injection experiment were not particularly surprising: the most vulnerable parts of a processor are those that often hold architectural state. This information was taken into account when devising lightweight protection mechanisms to cover the majority of the failures.

To summarize our experimental findings, we found that at least 85% of injected single event upsets in our baseline microarchitecture are masked from software. We also found significant masking levels present in software for various fault models. Together, the microarchitectural and architectural levels of masking hide more than 9 out of every 10 latched transient faults from affecting correct program execution. With precisely placed low-overhead protection mechanisms, the level of masking is even higher. This gives an idea of the underutilization of modern microprocessors and dynamic inefficiencies of software.

### Acknowledgments

We thank the other members of the Advanced Computing Systems group, as well as Zbigniew Kalbarczyk, Claudio Basile, and the anonymous referees for providing feedback during various stages of this work. We also thank Joel Biskie and Wojciech Magda for their respective contributions. This work was supported by the C2S2 Marco center, NSF grant EIA-0224453, and equipment donation from AMD.

### References

[1] B. A. Gieseke et al. A 600MHz superscalar RISC microprocessor with out-of-order execution. In 1997 IEEE International Solid-State Circuits Conference Digest of Technical Papers, pages 176-178, Feb. 1997.

[2] B. Fahs et al. Performance characterization of a hardware framework for dynamic optimization. In Proceedings of the 34th Annual International Symposium on Microarchitecture, pages 16-27, 2001.

[3] M. Baze and S. Buchner. Attenuation of single event induced pulses in CMOS combinational logic. IEEE Transactions on Nuclear Science, 44(6):2217-2223, Dec. 1997.

[4] D. Burger, T. Austin, and S. Bennett. Evaluating future microprocessors: the simplescalar tool set. Technical Report 1308, University of Wisconsin - Madison Technical Report, July 1996.

[5] G. Z. Chrysos and J. S. Emer. Memory dependence prediction using store sets. In Proceedings of the 25th Annual International Symposium on Computer Architecture, pages 142-153, 1998.

[6] E. W. Czeck and D. Siewiorek. Effects of transient gate-level faults on program behavior. In Proceedings of the 1990 International Symposium on Fault-Tolerant Computing, pages 236-243, June 1990.

[7] M. Franklin. Incorporating fault tolerance in superscalar processors. In Proceedings of High Performance Computing, pages 301-306, Dec. 1996.

[8] G. Hinton et al. The Microarchitecture of the Pentium 4 Processor. Intel Technology Journal, Jan. 2001.

[9] J. Gaisler. A portable and fault-tolerant microprocessor based on the SPARC V8 architecture. In Proceedings of the International Conference on Dependable Systems and Networks, pages 409-415, Sept. 2002.

[10] H. Ando et al. A 1.3 GHz fifth generation SPARC64 microprocessor. In Design Automation Conference, pages 702-705, June 2003.

[11] H. Cha et al. A gate-level simulation environment for alpha-particle-induced transient faults. IEEE Transactions on Computers, 45(11):1248-1256, Nov. 1996.

[12] S. Kim and A. K. Somani. Soft error sensitivity characterization for microprocessor dependability enhancement strategy. In Proceedings of the International Conference on Dependable Systems and Networks, pages 416-425, Sept. 2002.

[13] S. McFarling. Combining branch predictors. Technical Report TN-36, Digital Western Research Laboratory, June 1993.

[14] D. Meyer. AMD-K7 Technology Presentation. Advanced Micro Devices, Inc., Sunnyvale, CA, Oct. 1998. Microprocessor Forum presentation.

[15] S. S. Mukherjee, M. Kontz, and S. K. Reinhardt. Detailed design and evaluation of redundant multithreading alternatives. In Proceedings of the 29th Annual International Symposium on Computer Architecture, pages 99-110, May 2002.

[16] P. LidÃ©n et al. On latching probability of particle induced transients in combinational networks. In Proceedings of the 1994 International Symposium on Fault-Tolerant Computing, pages 340-349, June 1994.

[17] P. Shivakumar et al. Modeling the effect of technology trends on the soft error rate of combinational logic. In Proceedings of the 2002 International Conference on Dependable Systems and Networks, pages 389-398, June 2002.

[18] E. Rotenberg. AR-SMT: A microarchitectural approach to fault tolerance in microprocessors. In Proceedings of Fault-Tolerant Computing Systems, pages 84-91, June 1999.

[19] E. Rotenberg. Exploiting large ineffectual instruction sequences. Technical report, North Carolina State University, Nov. 1999.

[20] S. Buchner et al. Comparison of error rates in combinational and sequential logic. IEEE Transactions on Nuclear Science, 44(6):2209-2216, Dec. 1997.

[21] S. S. Mukherjee et al. A systematic methodology to compute the architectural vulnerability factors for a high-performance microprocessor. In Proceedings of the 36th International Symposium on Microarchitecture, pages 29-40, Dec. 2003.

[22] N. Wang, M. Fertig, and S. Patel. Y-branches: When you come to a fork in the road, take it. In Proceedings of the International Conference on Parallel Architectures and Compilation Techniques, pages 56-66, 2003.

[23] C. Weaver and T. Austin. A fault-tolerant approach to microprocessor design. In Proceedings of the 29th Annual International Symposium on Computer Architecture, pages 87-98, May 2002.