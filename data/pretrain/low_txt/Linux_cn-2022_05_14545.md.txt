---
author: Harsh Bardhan Mishra
category: 观点
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 2300
date: '2022-05-05 09:00:04'
editorchoice: false
excerpt: 有些项目长期保持活跃，有些项目却过早消亡 —— 这两者的区别往往在于它们的文档。严谨、聪明的文档可以给你的项目带来它所需要的动力。
fromurl: https://www.opensourceforu.com/2022/04/documentation-isnt-just-another-aspect-of-open-source-development/
id: 14545
islctt: true
largepic: /data/attachment/album/202205/05/090003l7xrtrwszw6u4wqu.jpg
permalink: /article-14545-1.html
pic: /data/attachment/album/202205/05/090003l7xrtrwszw6u4wqu.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lkxed
summary: 有些项目长期保持活跃，有些项目却过早消亡 —— 这两者的区别往往在于它们的文档。严谨、聪明的文档可以给你的项目带来它所需要的动力。
tags:
- 文档
thumb: false
title: 文档不是开源项目开发的附属品
titlepic: true
translator: lkxed
updated: '2022-05-05 09:00:04'
---

有些项目能够长期保持活跃，而另一些则过早消亡——这两者之间的关键差异通常在于文档的质量。高质量、精心编写的文档能为项目注入活力。因此，应将编写文档视为与代码开发同等重要的任务。接下来，我将详细阐述这一观点并提供实用建议。

![](/data/attachment/album/202205/05/090003l7xrtrwszw6u4wqu.jpg)

许多开发者错误地认为他们的代码是“自描述”的，从而忽略了额外的文档工作。这种过度自信可能会对项目造成严重后果。缺乏或质量低下的文档会扼杀项目的生存机会。没有适当的文档，用户将难以理解项目的目标和正确的使用方法，这可能导致他们对采用该项目产生疑虑。

### 从项目第一天起就开始撰写文档

文档不应被视为次要任务，而应与代码开发和管理一样重要。随着信息以社区讨论、Stack Overflow 和 Quora 答案等形式广泛传播，文档成为了“信息源”。它不仅应满足希望查阅一手资料的贡献者的需求，还应为工程师提供必要的参考支持，并向利益相关者传达基本计划。良好的文档确保了产品的持续改进和发展。

在发布软件产品时，我们不仅要发布代码，还要发布高质量的文档。这引出了一个重要的概念——“文档即代码”，这是大多数维护良好的开源项目所遵循的原则。

### 文档即代码

如今，文档不再仅存储为 Microsoft Word 或 PDF 文件。新的需求是通过版本控制系统来管理和发布文档。这一概念因 Read the Docs（一个文档创建、托管和浏览的平台）而流行，现已成为大多数文档团队内容策略的重要组成部分。

工具如 Bugzilla 和 GitHub Issue 可用于跟踪待处理的文档工作，并从维护者和用户那里获取反馈以验证文档的准确性。外部审查有助于验证文档内容，并确保其不断改进和快速发布。这保证了除代码外，文档也能持续改进并迅速更新。

请记住，如果不遵循规范化的实践，每个文档都会有所不同，导致混乱并使人们难以获取正确信息。

### 整理混乱的开源文档

遵循“文档风格指南”至关重要。风格指南是一套创建和展示内容的指导方针，无论你是独立作者还是大型文档团队的一员，它都能帮助你在文档中保持一致的风格、口音和语气。

有几种流行的风格指南，如《红帽风格指南》、《谷歌文档风格指南》和《苹果风格指南》。选择哪种风格指南取决于你的具体需求。如果与其他开源项目的需求相似，可以选择现成的风格指南，或者根据需要对其进行修改。大多数语法和内容规则可能是通用的，但术语可能会有所不同。

你还需要在项目中自动应用这些风格指南。为此，可以使用 Vale，它集成了本地的持续集成（CI）服务，确保文档严格遵循风格指南。

> **文档类型**
>
> - *自述文件*：包含基本的安装和使用说明，是任何开源文档中最重要的部分之一，也是潜在用户/开发者与项目之间的第一个连接点。
> - *参考指南*：包括基本参考资料，帮助用户快速上手，或与项目贡献相关的文档。
> - *用户文档*：描述项目的使用方式。如果没有用户文档，大多数人会对如何使用该项目感到困惑。
> - *开发文档*：支持开发团队在项目中不断取得新进展。它还应为内部开发工作提供良好途径，并确保功能被清晰传达给股东。
> - *社区内容*：包括博客、视频和外部内容，旨在为那些想进一步了解项目的社区成员提供支持。

通过使用风格指南，文件的整体前提将以统一的语言风格传达给用户。然而，由于写作风格因人而异，技术作家团队准备的文件可能会出现冲突。那么，如何规范化文档呢？

### 规范化文档

在规范化文档方面，有许多方法可以采取。首先，创建适用于各种角色的预定义模板。这些模板可用于记录新功能、识别错误和问题，以及更新变更日志以适应新增内容。

如果你采用基于 Git 的工作流，可以开发一个规范的工作流程来发布文档。最规范的工作流是：复刻发布文档的仓库，在本地分支上添加修改，推送这些修改，提出请求并要求审查。规范化文档的好处之一是带来了更好的反馈和审查过程。

### 反馈和自动审查

规范化使得你可以获得用户的反馈并生成自动审查，从而改进项目和文档。通过这些反馈，你还可以评估分享的信息对用户是否有意义。像 GitBook 这样的文档平台提供了合适的反馈服务，有助于验证文档的有效性。

始终寻求主题专家（SME）对文档的反馈，他们可以是利益相关者、开发者、工程师或外部贡献者。你也可以使用自动测试和 CI 来验证文档是否遵循风格指南。

### 文档众包

如果你想开源你的文档，最好的方法之一是提供一个快速入门指南。它可以像 `CONTRIBUTING.md` 那样简单，基本上只需说明如何设置项目并为其做出贡献或使用它即可。

始终开发以用户为中心的文档，标明每个项目的目的。同时，打造学习课程来帮助新的贡献者。

> **带着目的编写文档**
>
> 始终带着目的编写文档。这是最基本的写作策略之一，它定义了你编写特定文档的理由，而非方式。首先回答以下问题：
>
> - 这个文档的目标是什么？
> - 需要传递的信息是什么？
> - 你希望用户在此之后采取什么行动？
> - 我与读者分享的价值观是什么？
> - 我的文档风格是否简洁、一致？

### 定义一致的内容策略

一致的内容策略有助于确保文档工作和项目基础设施的长期愿景。它可以围绕以下两个主要方面：

1. **资源**：包括项目文档、案例研究和白皮书、项目架构等。
2. **品牌内容**：博客和特邀帖子、新闻和社区故事、学习课程等。

每个开源项目都应具备适当的文档，以说明其为用户提供的功能，使用户能够选择最适合的解决方案。良好的文档可以传达正确的信息，并鼓励其他开发者贡献力量来进一步加强和改进项目。虽然听起来很简单，但只有做对了，文档才能成功。而你的项目，反过来，也只有在文档正确的情况下才能成功，所以永远不要低估其目标或过程！

策划：Laveesh Kocher

via: 
作者：[Harsh Bardhan Mishra](https://www.opensourceforu.com/author/harsh-bardhan-mishra/) 选题：[lkxed](https://github.com/lkxed) 译者：[lkxed](https://github.com/lkxed) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出
---