### Jared

Jared is actively involved in fuzzing, the development and release of fuzzing tools, and the creation of this book. He is a devout Christian, deeply values his family and friends, and enjoys leisure time and recreational activities.

### Charlie Miller

Charlie Miller is a Principal Analyst at Independent Security Evaluators. Prior to his current role, he spent five years at the National Security Agency (NSA). He gained significant recognition for being the first to publicly develop a remote exploit against the iPhone. Charlie holds a Ph.D. from the University of Notre Dame and has presented at numerous information security conferences.

---

## Bibliography

1. **Edward Amoroso**. *Fundamentals of Computer Security Technology*. Prentice Hall, 1994.
2. **Victor R. Basili, Barry Boehm**. "Software Defect Reduction Top 10 List." *Computer*, January 2001, pp. 135–137.
3. **Boris Beizer**. *Software Testing Techniques* 2nd edition. International Thomson Computer Press, 1990.
4. **Caballero, Yin, Liang, Song**. "Polyglot: Automatic Extraction of Protocol Message Format using Dynamic Binary Analysis." In *Proceedings of the 14th ACM Conference on Computer and Communication Security*, Alexandria, VA, October 2007.
5. **R. Enbody and K. Piromsopa**. "Secure Bit: Transparent, Hardware Buffer-Overflow Protection." *IEEE Transactions on Dependable and Secure Computing*, Volume 3, Issue 4 (October 2006), Pages: 365–376, 2006, ISSN: 1545–5971.
6. **Juhani Eronen and Marko Laakso**. "A Case for Protocol Dependency." In *proceedings of the First IEEE International Workshop on Critical Infrastructure Protection*, Darmstadt, Germany, November 3–4, 2005.
7. **J. E. Forrester and B. P. Miller**. "An Empirical Study of the Robustness of Windows NT Applications Using Random Testing." In *Proceedings of the 4th USENIX Windows System Symposium*, Seattle, August 2000.
8. **P. Godefroid, M. Levin, D. Molnar**. "Automated Whitebox Fuzz Testing." *NDSS Symposium 2008*, San Diego, CA, February 10–13, 2008.
9. **Andrew Jaquith**. *Security metrics: replacing fear, uncertainty, and doubt*. Addison-Wesley, 2007.
10. **Rauli Kaksonen, Marko Laakso, and Ari Takanen**. "Software Security Assessment through Specification Mutations and Fault Injection." In *Proceedings of Communications and Multimedia Security Issues of the New Century / IFIP TC6/TC11 Fifth Joint Working Conference on Communications and Multimedia Security (CMS’01)*, May 21–22, 2001, Darmstadt, Germany; edited by Ralf Steinmetz, Jana Dittmann, Martin Steinebach. ISBN 0-7923-7365-0.
11. **Rauli Kaksonen**. *A Functional Method for Assessing Protocol Implementation Security* (Licentiate thesis). Espoo: Technical Research Centre of Finland, VTT Publications 447, 128 p. + app. 15 p. ISBN 951-38-5873-1 (soft back ed.), ISBN 951-38-5874-X (on-line ed.).
12. **Marko Laakso, Ari Takanen, and Juha Röning**. "The Vulnerability Process: a tiger team approach to resolving vulnerability cases." In *proceedings of the 11th FIRST Conference on Computer Security Incident Handling and Response*, Brisbane, June 13–18, 1999.
13. **Marko Laakso, Ari Takanen, Juha Röning**. "Introducing constructive vulnerability disclosures." In *proceedings of the 13th FIRST Conference on Computer Security Incident Handling*, Toulouse, June 17–22, 2001.
14. **Charles Miller**. "The legitimate vulnerability market: the secretive world of 0-day exploit sales." *Workshop on the Economics of Information Security (WEIS) 2007*. The Heinz School and CyLab at Carnegie Mellon University, Pittsburgh, PA (USA), June 7–8, 2007.
15. **Barton P. Miller, Lars Fredriksen, Bryan So**. "An empirical study of the reliability of Unix utilities." *Communications of the Association for Computing Machinery*, 33(12):32–44, December 1990.
16. **Peter Oehlert**. "Violating Assumptions with Fuzzing." *IEEE Security & Privacy*, March/April 2005, pp. 58–62.
17. **David Rice**. *Geekonomics: The Real Cost of Insecure Software*. Addison-Wesley, 2007.
18. **Tero T. Rontti**. "Robustness Testing Code Coverage Analysis." *University of Oulu, Department of Electrical and Information Engineering*. Master’s Thesis, 52p, 2004.
19. **Ian Sommerville**. *Software Engineering*, 8th edition. Addison-Wesley, 2006.
20. **Michael Sutton, Adam Greene, Pedram Amini**. *Fuzzing: Brute Force Vulnerability Discovery*. Addison-Wesley, 2007.
21. **Ari Takanen, Petri Vuorijärvi, Marko Laakso, and Juha Röning**. "Agents of responsibility in software vulnerability processes." *Ethics and Information Technology*, June 2004, vol. 6, no. 2, pp. 93–110(18).
22. **Ari Takanen and Sami Petäjäsoja**. "Assuring the robustness and security of new wireless technologies." *ISSE 2007 conference*, September 27, 2007, Warsaw, Poland.
23. **Ari Takanen, Marko Laakso, Juhani Eronen and Juha Röning**. "Running Malicious Code By Exploiting Buffer Overflows: A Survey Of Publicly Available Exploits." *EICAR 2000 Best Paper Proceedings*, pp. 158–180, 2000.
24. **Peter Thermos and Ari Takanen**. *Securing VoIP Networks: Threats, Vulnerabilities, and Countermeasures*. Addison-Wesley, 2007.

---

## Index

- **Achilles Vulnerability Assessment Project**: 265
- **ActiveX**: 8
- **Ad-hoc threat analysis**: 106–107
- **Advanced fuzzing**: 197–219
  - **Automatic protocol discovery**: 197–198
  - **Evolutionary fuzzing**: 201–219
  - **Symbolic execution**: 199–201
  - **Using code coverage information**: 198–199
- **Aitel, Dave**: 146
- **Alvarez**: 132
- **Amini, Pedrum**: 159, 179
- **Anomaly library**: 29
- **Apple’s QuickTime media player**: 268–273
- **Application developer fuzzing**: 259–263
  - **Browser fuzzing**: 262–263
  - **Command-line application fuzzing**: 259
  - **File fuzzing**: 259–260
  - **Web application fuzzing**: 261–262
- **Application-level gateway (ALG)**: 251
- **Application monitoring**: 176–180
- **Application programmer interface (API)**: 84, 146
  - **Fuzzing**: 164
- **Applications**: 250
- **Application-specific fuzzers**: 229
- **Art of Fuzzing, The (TAOF)**: 151, 152–155, 227
- **Assessment coverage**: 133
- **Assessment frequency**: 133
- **Attack heuristics**: 60
- **Attacks**: 5
- **Attack simulation engine**: 29
- **Attack surface**: 60, 120
  - **And attack vectors**: 6–9
- **Audio Video Interleave (AVI) format**: 269
- **“Automated Whitebox Fuzz Testing” (Godefroid, Levin, and Molnar)**: 199
- **Automatic protocol delivery**: 197–198
- **Availability**: 13, 103
- **Availability of critical infrastructure components**: 5
- **Backus-Naur Form (BNF)**: 92
- **Basili, Victor R.**: 14
- **Beizer, Boris**: 13, 23, 71, 91, 102
- **Benchmarking**: 215
- **BeSTORM monitor**: 176–177, 198, 228–229
- **Beyond Security**: 228
- **Binary simulation**: 181–183
- **Black-box fuzzing for security researchers**: 267–273
  - **Carry out the fuzzing**: 271–272
  - **Choose a monitoring tool**: 270–271
  - **Choose fuzzer/fuzzer type**: 269–270
  - **Enumerate interfaces**: 268–269
  - **Post-fuzzing analysis**: 272–273
  - **Select target**: 268
- **Black-box testing**: 17, 21, 24, 80, 83–86, 144
  - **Fuzz testing as a profession**: 84–86
  - **Software interfaces**: 84
  - **Test targets**: 84
- **Black-box testing, purposes of**: 86–88
  - **Feature or conformance testing**: 86–87
  - **Interoperability testing**: 87
  - **Performance testing**: 87–88
  - **Robustness testing**: 88
- **Black-box testing techniques for security**: 89–96
  - **Fault injection**: 90–91
  - **Load testing**: 89–90
  - **Negative testing**: 94–95
  - **Regression testing**: 95–96
  - **Security scanners**: 90
  - **Stress testing**: 90
  - **Syntax testing**: 91–93
  - **Unit testing**: 90
- **Block-based fuzzer**: 27
- **Bluetooth**: 8, 9, 264
- **BNF**: 94, 124
- **Bochs**: 183
- **Boehm, Barry**: 14
- **Brown, Tim**: 148
- **Browser fuzzing**: 262–263
- **Brute force login**: 52–53
- **Buffer Security Check (“/GS” compile flag)**: 66
- **Bug bounty hunters**: 108, 109
- **Bug categories**: 42–54
  - **Brute force login**: 52–53
  - **Cryptographic attacks**: 54
  - **Denials of service**: 53–54
  - **Man in the middle**: 54
  - **Memory corruption errors**: 42–49
  - **Race conditions**: 53
  - **Session hijacking**: 54
  - **Web applications**: 50–52
- **Bug hunter**: 38
- **Bug hunting techniques**: 55–59
  - **Reverse engineering**: 55–57
  - **Source code auditing**: 57–59
- **Bugs**: 230–231
  - **FTP bug 0**: 230
  - **FTP bugs 2, 16**: 230–231
- **Building and classifying fuzzers**: 137–166
  - **Detailed view of fuzzer types**: 145–162
  - **Fuzzer classification via interface**: 162–165
  - **Fuzzing methods**: 137–145
- **Capture-replay**: 150–159
  - **Autodafé**: 150–151
  - **General Purpose Fuzzer (GPF)**: 156–159
  - **Ioctlizer**: 151, 155–157
  - **The Art of Fuzzing (TAOF)**: 151, 152–155
- **Carrier and service provider fuzzing**: 255–259
  - **VoIP fuzzing**: 256–257
  - **WiFi fuzzing**: 257–259
- **Case studies**: See Fuzzing case studies
- **CCured**: 183
- **Chan, Dmitry**: 106
- **Client-side fuzzers**: 164–165
- **Client software**: 250
- **Code auditing**: 21, 81–83
  - **Tools**: 2
- **Code coverage**: 89, 225–226
  - **And finding bugs**: 244–246
  - **Information, using**: 198–199
  - **Metrics**: 130–133
- **Codenomicon**: 228
- **Code readability**: 80
- **Code volume**: 130
- **Command-line application fuzzing**: 259
- **Command Line User Interface (CLI)**: 7, 84, 126, 127
- **Commercial fuzzer monitoring solutions**: 176
- **Commercial fuzzing tools**: 109–115
- **Common Gateway Interface (CGI)**: 145
- **Compile-time checks**: 80
- **Confidentiality**: 13, 103
- **Configuration errors**: 35
- **Conformance testing**: 18, 86–87
- **Context-dependent errors**: 93
- **Cost-benefit of quality**: 14–16
- **Coverage of previous vulnerabilities**: 121–124
  - **Steps in analysis**: 122
- **Cracker**: 38
- **CrashReporter**: 179–180, 271, 272
- **Cross-site scripting (XSS)**: 52
- **Cryptographic attacks**: 54
- **Cybercrime**: 40
- **Cycle through a protocol**: 140
- **Cyclomatic complexity**: 130
- **Data execution protection (DEP)**: 66
- **Data theft using various technical means**: 5
- **Debuggers**: 250
- **Defect density**: 130–131
- **Defect metrics and security**: 120–133
  - **Code coverage metrics**: 130–133
  - **Coverage of previous vulnerabilities**: 121–124
  - **Expected defect count metrics**: 124–125
  - **Input space coverage metrics**: 127–130
  - **Interface coverage metrics**: 127
  - **Process metrics**: 133
  - **Vulnerability risk metrics**: 125–127
- **Defenses against implementation errors**: 63–68
  - **Effectiveness of fuzzing**: 63
  - **Defensive coding**: 63–64
  - **Hardware overflow protection**: 65–66
  - **Input verification**: 64–65
  - **Software overflow protection**: 66–68
- **Delimiter errors**: 93
- **Demilitarized zone (DMZ)**: 251
- **Denial of service (DoS)**: 53–54, 167
  - **Attack**: 36, 124, 125
  - **Threat**: 105
- **Deployment flaws**: 25
- **Design, testing**: 79
- **Design flaws**: 35
- **Deterministic fuzzing**: 138–140
- **Device under test (DUT)**: 17, 84, 102, 257
- **Digital media**: 8
- **Dirty inputs**: 35
- **Disclosure processes**: 5–6
  - **Full disclosure**: 6
  - **No disclosure**: 6
  - **Partial disclosure**: 6
- **Discovery, costs of**: 108–115
- **Distributed Denial of Service (DDoS) attacks**: 5, 18, 53
- **Documentation**: 30
- **Domain Name Service (DNS)**: 250
- **Down-time (outages)**: 116, 117
- **Dumb fuzzers**: 144
- **Dynamic generation or evolution based fuzzers**: 27
- **Eddington, Michael**: 146
- **Elapsed time since last disaster recovery walk-through**: 118
- **Electric Fence**: 180
- **Ellch**: 165
- **Encryption**: 73
- **Enterprise fuzzing**: 32–33, 250–255
  - **Firewall fuzzing**: 251–253
  - **VPN fuzzing**: 253–255
- **Evolutionary fuzzing**: 201–219
  - **Benchmarking**: 215
  - **Conclusions and future work**: 219
  - **EFS data structures**: 206–207
  - **EFS initialization**: 207
  - **EFS: novelty**: 204
  - **EFS overview**: 204–206
  - **ET breeding**: 203
  - **ET deceptive landscape**: 202–203
  - **ET fitness function**: 201–202
  - **ET flat landscape**: 202
  - **Evolutionary testing**: 201
  - **GPF + PaiMei + Jpgraph = EFS**: 206
  - **Motivation for an evolutionary fuzzing system**: 203
  - **Pool crossover**: 209–210
  - **Pool mutation**: 210–211
  - **Results**: 215–219
  - **Running EFS**: 211–214
  - **Session crossover**: 207–208
  - **Test case—Golden FTP server**: 215
- **Evolutionary Fuzzing System (EFS)**: 203
  - **Data structures**: 206–207
  - **Initialization**: 207
  - **Motivation for**: 203
  - **Novelty**: 204
  - **Overview**: 204–206
  - **Running**: 211–214
- **Evolutionary testing (ET)**: 201
  - **Breeding**: 203
  - **Deceptive landscape**: 202–203
  - **Fitness function**: 201–202
  - **Flat landscape**: 202
- **Exception analysis**: 223
- **ExecShield**: 68
- **Executables**: 8
- **Expected defect count metrics**: 124–125
- **Exploitation scanners/frameworks**: 37–38
- **Fault injection**: 22, 90–91
- **Feature testing**: 17–19, 86–87
- **Field-value errors**: 93
- **FileFuzz**: 150
- **File fuzzing**: 163–164, 249, 259–260
- **Files**: 84
  - **As local attack vectors**: 7
- **File system–related problems**: 168
- **Filter techniques**: 65
- **Firewall**: 11
  - **Fuzzing**: 251–253
- **Flash**: 8
- **Format string errors**: 43, 45
- **Frantzen, Mike**: 165
- **FTP bugs**: 230–231
- **FTPfuzz**: 149
- **FTP fuzzers**: 112, 113
- **Functional testing**: 21
- **Fuzz**: 22
- **Fuzz, The**: 259
- **Fuzz data, source of**: 140–141

This optimized version of the text provides a clear, coherent, and professional structure, making it easier to read and understand.