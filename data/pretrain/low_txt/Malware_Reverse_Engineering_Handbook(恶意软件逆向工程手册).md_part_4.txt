### 21. ShellExecuteExA Function
- **Reference**: [Microsoft Docs - ShellExecuteExA](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexa)

### 39. PowerShell Script for Downloading and Executing a File
- **Description**: A short PowerShell script that downloads a file named `spy20.exe` from `http://jblecsywt6925.cc/documents/`, saves it as `temp.exe`, and executes it.

### 40. X32DBG – Stack Memory Examination
- **Figure**: Figure 37: X32DBG – Stack Memory Examination

### Patching Malware Defense Mechanisms
Malware often includes defense mechanisms to prevent or impede reverse-engineering. These mechanisms can take various forms, such as:
- Detection of monitoring tools (e.g., debuggers, Wireshark, Process Monitor).
- Testing whether the malware is running in a virtual machine.
- Checking internet connectivity or user interaction.
- Detecting if it is being examined in a sandbox.

If any of these conditions are detected, the malware may terminate itself or alter its behavior to avoid revealing its true nature.

#### Steps to Patch Malware
1. **Identify the Defense Mechanism**:
   - Locate the `IsDebuggerPresent` function in the intermodular calls (right-click > 'Search for' > 'Current Module' > 'Intermodular calls') and double-click on it.
   - Evaluate the code to understand how the defense mechanism works and how it can be bypassed.

2. **Modify the Code**:
   - In this example, the `exit` function at address `0x0040112A` terminates the process if `IsDebuggerPresent` at `0x0040111E` returns `true`.
   - To evade this check, replace the `exit` function call and the preceding `PUSH 1` instruction with `nop` (no operation) instructions. This effectively nullifies the original code without deleting it.

3. **Assemble the New Instructions**:
   - Mark the line with the instruction to be replaced and press the space bar (or right-click on the line > 'Assemble').
   - A window with the original instruction will appear. Replace it with the `nop` instruction and click OK.
   - Repeat this step for all lines that need to be modified.

4. **Apply Patches**:
   - After all modifications, press `CTRL + P` (or right-click > 'Patches').
   - A new window summarizing the changes will appear. Click 'Patch File' and save it as a new file.

- **Figure**: Figure 38: X32DBG - Patching

### 42. Network Traffic Analysis
Network traffic analysis is crucial in malware analysis. It helps identify exfiltrated files, command and control (C2) servers, communication methods, and more.

#### Tools for Network Traffic Analysis
- **Wireshark**:
  - **Description**: A widely-used network protocol analysis tool for capturing and displaying network packets.
  - **Download Link**: [Wireshark Download](https://www.wireshark.org/download.html)
  - **Deployment Considerations**:
    - Deploying Wireshark locally on the victim VM may trigger self-protection mechanisms in the malware.
    - Running Wireshark on the default gateway or using a SPAN port on the switch to capture traffic is a better approach.

- **Wireshark Interface Selection**:
  - **Figure**: Figure 39: Wireshark Interface Selection
  - **Steps**:
    - Select the interface from which the malware is communicating.
    - Capture and filter the traffic to eliminate noise and focus on the malware's behavior.

- **Traffic Statistics**:
  - **Figure**: Figure 40: Getting Traffic Statistics
  - **Features**:
    - List connection endpoints and conversations.
    - Sort IP endpoints by the number of transmitted packets.
    - Sort conversations by the number of bytes transferred and duration.

- **Resolved Addresses**:
  - **Figure**: Figure 41: Wireshark Endpoints Listing
  - **Figure**: Figure 42: Resolved Addresses List
  - **Feature**: Easily find domain names of suspicious IP addresses.

- **Display Filters**:
  - **Example**: Filter HTTP traffic containing the string 'exe'.
  - **Figure**: Figure 43: Filtering .EXE Files from a Specific IP
  - **Export Objects**: Save suspicious files by exporting objects from the traffic.
  - **Figure**: Figure 44: Exporting Objects from the Traffic

- **Network Miner**:
  - **Description**: A more user-friendly tool for forensics and malware analysis.
  - **Download Link**: [Network Miner Download](https://www.netresec.com/?page=NetworkMiner)
  - **Features**:
    - View details about hosts in a user-friendly interface.
    - List files, credentials, DNS queries, and sessions.
    - Filter according to specific needs.
  - **Figure**: Figure 45: Network Miner Interface

### 47. Packed Executables and Unpacking
Malware executables are often packed to evade antivirus detection and reverse-engineering. This is done using standard packers (e.g., UPX, EXEStealth, ASProtect) or custom packers.

#### Detecting Packed Executables
- **Indicators**:
  - Few meaningful strings, imports, and functions.
  - High entropy in the data section.
- **Tools**:
  - **PeStudio**: Shows nonsensical strings and calculates high entropy.
  - **Detect It Easy**: Identifies the type of packer.
  - **IDA and OllyDbg**: Recognize packed executables during initial analysis.

- **Figure**: Figure 46: Byte Histogram – Packed Executable (Above) vs. Unpacked Executable (Below)
- **Figure**: Figure 47: Properties of the Packed Executable (A – Strings in PeStudio, B – Entropy in PeStudio, C – Detect It Easy, D – Functions & Imports in IDA)
- **Figure**: Figure 48: IDA (Left) & OllyDbg (Right) Point Out Packed Executables

#### Unpacking Packed Executables
- **Standard Packers**:
  - Use available unpackers (e.g., UPX packer/unpacker).

- **Custom Packers**:
  - Dump the unpacked code from memory using tools like PE tools, Scylla, OllyDumpEx/OllyDump.
  - **Steps Using Scylla**:
    1. Run the packed executable.
    2. Attach Scylla to the process.
    3. Click 'Dump' and save the new unpacked executable.
    4. Identify the Import Address Table (IAT) using 'IAT Autosearch'.
    5. Extract IAT entries using 'Get Imports'.
    6. Fix the dump and save the new file with the suffix `_SCY.exe`.

- **Figure**: Figure 49: Unpacking with Scylla

### 51. Incident Response Collaboration (MISP & Yara)
#### Yara Rules
- **Description**: Yara rules describe textual or binary patterns using strings and Boolean expressions.
- **Example**:
  ```yara
  rule FirstYaraRule
  {
      strings:
          $text_string = "malwaredomaine.com"
          $hex_string = { A2 24 ?? D8 23 FB }

      condition:
          $text_string or $hex_string
  }
  ```
- **Scanning**:
  - **Syntax**: `yara [OPTIONS] RULES_FILE TARGET`
  - **Documentation**: [Yara Command Line](https://yara.readthedocs.io/en/v3.4.0/commandline.html)
  - **Resources**:
    - Florian Roth repository: [GitHub](https://github.com/Neo23x0/signature-base/tree/master/yara)
    - Yara Rules group GNU-GPLv2: [GitHub](https://github.com/Yara-Rules/rules)
    - Github repository: [InQuest](https://github.com/InQuest/awesome-yara)

#### MISP Platform
- **Description**: An open-source threat intelligence platform for sharing indicators of compromise (IoCs).
- **Usage**:
  - Add IoCs to your MISP instance.
  - Correlate with existing data to enhance analysis.
- **Figure**: Figure 50: MISP – Web Interface
- **More Information**: [MISP Project](https://www.misp-project.org/index.html)

### 53. Conclusion
This handbook covers essential tools and techniques for malware analysis. It does not aim to cover all features of each tool but provides a starting point for further exploration. Combining static and dynamic analysis is recommended for efficiency. Setting up a separate lab environment is crucial to avoid security breaches.

- **Figure**: Figure 50: MISP – Web Interface

### 54. References
1. Hex Rays SA. 2020. IDA Pro - Hex Rays. [Hex Rays](https://www.hex-rays.com/products/ida/). Accessed May 2020.
2. Hex Rays SA. 2020. F.L.I.R.T. - Hex Rays. [Hex Rays](https://www.hex-rays.com/products/ida/tech/flirt/). Accessed May 2020.
3. Microsoft. 2020. InternetOpenA function (wininet.h) - Win32 apps | Microsoft Docs. [Microsoft Docs](https://docs.microsoft.com/en-us/windows/win32/api/wininet/nf-wininet-internetopena). Accessed May 2020.
4. Hex Rays SA. 2020. IDA Technology: Open Plug-In Architecture - Hex Rays. [Hex Rays](https://www.hex-rays.com/products/ida/tech/plugin/). Accessed May 2020.
5. National Security Agency. 2020. Ghidra. [Ghidra](https://ghidra-sre.org/). Accessed May 2020.
6. Microsoft. 2020. Debugging Tools for Windows (WinDbg, KD, CDB, NTSD) - Windows drivers | Microsoft Docs. [Microsoft Docs](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/). Accessed May 2020.
7. x64dbg Community. 2020. x64dbg. [x64dbg](https://x64dbg.com/). Accessed May 2020.
8. Immunity Inc. 2020. Immunity Debugger. [Immunity](https://www.immunityinc.com/products/debugger/index.html). Accessed May 2020.
9. Oleh Yuschuk. 2014. OllyDbg v1.10. [OllyDbg](http://www.ollydbg.de). Accessed May 2020.
10. Microsoft. 2020. ShellExecuteExA function (shellapi.h) - Win32 apps | Microsoft Docs. [Microsoft Docs](https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexa). Accessed May 2020.
11. NTInfo. 2020. Detect It Easy. [NTInfo](https://www.ntinfo.biz/index.html#detect_it_easy). Accessed May 2020.
12. FireEye Labs. Obfuscated String Solver. [GitHub](https://github.com/fireeye/flare-floss). Accessed May 2020.
13. Strings2. [GitHub](https://github.com/glmcdona/strings2). Accessed May 2020.
14. Practical Binary Analysis. 2018. Dennis Andriesse. No Starch Press (December 18, 2018).
15. Mastering Malware Analysis. 2019. Alexey Kleymenov. Packt Publishing; 1 edition (June 6, 2019).
16. Procmon. [Microsoft Docs](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon). Accessed May 2020.
17. Process Monitor for Dynamic Malware Analysis. [Microsoft Docs](https://docs.microsoft.com/en-us/archive/blogs/motiba/process-monitor-for-dynamic-malware-analysis). Windows Sandbox Hari Pulapaka. [Microsoft Tech Community](https://techcommunity.microsoft.com/t5/windows-kernel-internals/windows-sandbox/ba-p/301849). Accessed May 2020.
18. Practical Malware Analysis. 2012. Michael Sikorski and Andrew Honig. No Starch Press; 1 edition (February 1, 2012).
19. Mastering Reverse Engineering – Re-engineer your ethical hacking skills. 2018. Reginald Wongs. Packt Publishing; 1 edition (October 31, 2018).
20. Hands-On Network Forensics: Investigate Network Attacks and Find Evidence Using Common Network Forensic Tools. 2019. Nipun Jaswal. Packt Publishing; 1 edition (March 30, 2019).
21. Yaniv Assor. 2016. Anti-VM and Anti-Sandbox Explained. [Cyberbit](https://www.cyberbit.com/blog/endpoint-security/anti-vm-and-anti-sandbox-explained/). Accessed May 2020.
22. Infosec Institute. 2016. How Malware Detects Virtualized Environment (and its Countermeasures). [Infosec Institute](https://resources.infosecinstitute.com/how-malware-detects-virtualized-environment-and-its-countermeasures-an-overview/). Accessed May 2020.