### Exploit Kits and Their Impact on the Malware Ecosystem

Exploit kits (EKs) are designed to build upon each other, generating combinations of User-Agents and GET parameters to increase the likelihood of infection. Grier et al. [12] analyzed the impact of exploit kits on the malware ecosystem, finding that these kits deliver multiple families of malware, making them an integral part of the ecosystem. This highlights the need for effective countermeasures.

Allodi et al. [1] conducted experiments with the server-side code of exploit kits to assess their resilience to changes in targeted systems. They found that some kits aim for a lower but more consistent infection rate over time, while others focus on delivering a small number of the latest exploits to achieve a higher infection rate. Eshete et al. [10] analyzed the vulnerabilities in the server-side components of exploit kits, revealing that half of the investigated back-ends contained exploitable vulnerabilities. Our research focuses on the more readily observable client-side components of EKs.

Bilge et al. [3] demonstrated that exploits later used in exploit kits were often found in the wild as zero-days before the vendor disclosed the vulnerability. Even with antivirus (AV) software that can react to known threats, the window of exposure to zero-days is often longer than expected. Dan Guido [14] presented a case study showing that exploit kits encountered by his customers typically incorporated exploits from whitehats or advanced persistent threats (APTs) rather than using zero-days.

### Drive-by Attacks and Detection Techniques

Drive-by downloads, also known as drive-by attacks, have received significant attention [5, 12, 24, 29]. Many studies [29, 30, 35, 41] use a combination of high- and low-interaction client honeypots to visit a large number of sites, detecting suspicious behavior after compromise. Below, we highlight some closely related projects.

Curtsinger et al. [7] developed Zozzle, a system that uses static analysis techniques to detect JavaScript malware in browsers. Zozzle employs a na√Øve Bayes classifier to identify instances of known malicious JavaScript. However, as exploit kits evolve rapidly, continuously finding suitable training samples for Zozzle is challenging, and it does not generate AV signatures. Rieck et al. [33] followed a similar approach with CUJO, deploying detection and prevention components in a proxy rather than the browser.

Cova et al. [6] introduced JSAND, a framework for analyzing and classifying web content based on static and dynamic features. It emulates JavaScript code to determine characteristics typical of malicious code. Ratanaworabhan et al. [32] described Nozzle, a dynamic system that uses a global heap health metric to detect heap-spraying, a common technique in modern browser exploits.

Researchers have also explored methods to mitigate the effects of drive-by download attacks. Egele et al. [9] checked strings allocated during runtime for patterns resembling shellcode, ensuring that such code is never executed. Lu et al. [22] proposed BLADE, a system that automatically sandboxes executable files downloaded via the browser, requiring explicit user consent for execution. Kapravelos et al. [16] presented Revolver, which leverages the fact that exploit authors use small syntactic changes to evade detection tools. Revolver compares the structure of two pieces of JavaScript to identify these minor changes.

### Automated Signature Generation

Automated signature generation has been used to counter both network-based attacks and generate AV-like signatures for malicious files. Singh et al. [36] proposed an automated method to detect previously unknown worms based on traffic characteristics and create content-based signatures. Similar works by other research groups [20, 18] generated signatures from honeypot and DMZ traffic. Additional research has focused on improving false positive rates [26], enabling privacy-preserving exchange of signatures [40], and shifting detection towards commonalities between attacks against a single vulnerable service [21, 25].

Brumley et al. [4] proposed a deeper analysis of vulnerabilities rather than exploits to detect malicious packets and create matching signatures. Perdisci et al. [28] used the concept of clustering HTTP traffic to find similar patterns in different packets, improving the quality of generated signatures. While much focus has been on detecting network-based attacks, research into automatic generation of virus signatures dates back to 1994, when Kephart and Arnold [17] proposed a system that leverages a large base of benign software to infer byte sequences in malicious binaries unlikely to cause false positives. In recent years, Griffin et al. [13] presented Hancock, which determines the probability of arbitrary byte sequences occurring in random files and improves the selection of signature candidates by identifying library code in malicious files, achieving a false positive rate of 0.1%. FIRMA [31] clusters unlabeled malware based on captured network traffic to produce high-precision and recall network signatures.

### Kizzle: A Malware Signature Compiler

Although previous research has been conducted in EK detection and analysis, as well as automated signature generation, no work has made the connection between the two fields. Kizzle leverages insights from our work and previous research to provide a fully automated solution for detecting exploit kits. Kizzle automatically identifies evolving malware clusters and produces signatures that detect malware with lower false negative and similar false positive rates compared to hand-written AV signatures.

While there has been significant consolidation in the Web malware space, leading to sophisticated attacks being accessible to a broad range of attackers, Kizzle can tip the balance in favor of defenders by reducing the effort required and increasing the workload for attackers. Designed to run in the cloud and scale to large volumes of streaming code samples, Kizzle allows for a quick response to changes in detected EKs. Our longitudinal evaluation shows that Kizzle produces highly accurate signatures. Over a four-week period in August 2014, Kizzle's false positive rates were under 0.03%, and false negative rates were under 5%, rivaling manually-crafted AV signatures.

### Acknowledgements

We greatly appreciate the cooperation and help we received from Dennis Batchelder, Edgardo Diaz, Jonathon Green, and Scott Molenkamp. This work was partially supported by the German Ministry for Education and Research (BMBF) through funding for the Center for IT-Security, Privacy, and Accountability (CISPA).

### References

[1] L. Allodi, V. Kotov, and F. Massacci. Malwarelab: Experimentation with cybercrime attack tools. In Workshop on Cyber Security Experimentation and Test, 2013.
[2] D. Angluin. Learning regular sets from queries and counterexamples. Information and Computation, 75(2), 1987.
[3] L. Bilge and T. Dumitras. Before we knew it: An empirical study of zero-day attacks in the real world. In CCS, 2012.
[4] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha. Towards automatic generation of vulnerability-based signatures. In IEEE S&P, 2006.
[5] J. Caballero, C. Grier, C. Kreibich, and V. Paxson. Measuring pay-per-install: The commoditization of malware distribution. In USENIX Security, 2011.
[6] M. Cova, C. Kruegel, and G. Vigna. Detection and analysis of drive-by-download attacks and malicious JavaScript code. In WWW, 2010.
[7] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert. Zozzle: Low-overhead mostly static JavaScript malware detection. In USENIX Security, 2011.
[8] G. De Maio, A. Kapravelos, Y. Shoshitaishvili, C. Kruegel, and G. Vigna. Pexy: The other side of exploit kits. In DIMVA, 2014.
[9] M. Egele, P. Wurzinger, C. Kruegel, and E. Kirda. Defending browsers against drive-by downloads: Mitigating heap-spraying code injection attacks. In Detection of Intrusions and Malware, and Vulnerability Assessment, 2009.
[10] B. Eshete, A. Alhuzali, M. Monshizadeh, P. Porras, V. Venkatakrishnan, and V. Yegneswaran. Ekhunter: A counter-offensive toolkit for exploit kit infiltration. In NDSS, 2015.
[11] M. Ester, H.-P. Kriegel, J. Sander, and X. Xu. A density-based algorithm for discovering clusters in large spatial databases with noise. In International Conference on Knowledge Discovery and Data Mining, 1996.
[12] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich, K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis, et al. Manufacturing compromise: the emergence of exploit-as-a-service. In CCS, 2012.
[13] K. Griffin, S. Schneider, X. Hu, and T.-C. Chiueh. Automatic generation of string signatures for malware detection. In RAID, 2009.
[14] D. Guido. A case study of intelligence-driven defense. IEEE Security and Privacy, 2011.
[15] J. Jones. The state of Web exploit kits. In BlackHat, 2012.
[16] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna. Revolver: An automated approach to the detection of evasive web-based malware. In USENIX Security, 2013.
[17] J. O. Kephart and W. C. Arnold. Automatic extraction of computer virus signatures. In Virus Bulletin International Conference, 1994.
[18] H.-A. Kim and B. Karp. Autograph: Toward automated, distributed worm signature detection. In USENIX Security, 2004.
[19] V. Kotov and F. Massacci. Anatomy of exploit kits: Preliminary analysis of exploit kits as software artefacts. In International Conference on Engineering Secure Software and Systems, 2013.
[20] C. Kreibich and J. Crowcroft. Honeycomb: creating intrusion detection signatures using honeypots. Workshop on Hot Topics in Networks, 2003.
[21] Z. Li, M. Sanghi, Y. Chen, M.-Y. Kao, and B. Chavez. Hamsa: Fast signature generation for zero-day polymorphic worms with provable attack resilience. In IEEE S&P, 2006.
[22] L. Lu, V. Yegneswaran, P. Porras, and W. Lee. Blade: an attack-agnostic approach for preventing drive-by malware infections. In CCS, 2010.
[23] C. Nachenberg. Computer virus-antivirus coevolution. Communications of the ACM, 40(1):46‚Äì51, Jan. 1997.
[24] A. Nappa, M. Z. Rafique, and J. Caballero. Driving in the Cloud: An Analysis of Drive-by Download Operations and Abuse Reporting. In DIMVA, Berlin, Germany, July 2013.
[25] J. Newsome, B. Karp, and D. Song. Polygraph: Automatically generating signatures for polymorphic worms. In IEEE S&P, 2005.
[26] J. Newsome and D. Song. Dynamic taint analysis for automatic detection, analysis, and signature generation of exploits on commodity software. In NDSS, 2005.
[27] M. Payer. Embracing the new threat: Towards automatically self-diversifying malware. In The Symposium on Security for Asia Network, 2014.
[28] R. Perdisci, W. Lee, and N. Feamster. Behavioral clustering of HTTP-based malware and signature generation using malicious network traces. In USENIX NSDI, 2010.
[29] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your iFRAMEs point to us. In USENIX Security, 2008.
[30] N. Provos, D. McNamee, P. Mavrommatis, K. Wang, and N. Modadugu. The ghost in the browser: Analysis of web-based malware. In Workshop on Hot Topics in Understanding Botnets, 2007.
[31] M. Z. Rafique and J. Caballero. FIRMA: Malware Clustering and Network Signature Generation with Mixed Network Behaviors. In RAID, St. Lucia, October 2013.
[32] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle: A defense against heap-spraying code injection attacks. In USENIX Security, 2009.
[33] K. Rieck, T. Krueger, and A. Dewald. Cujo: efficient detection and prevention of drive-by-download attacks. In ACSAC, 2010.
[34] S. Schleimer, D. S. Wilkerson, and A. Aiken. Winnowing: Local algorithms for document fingerprinting. In International Conference on Management of Data, 2003.
[35] C. Seifert, V. Delwadia, P. Komisarczuk, D. Stirling, and I. Welch. Measurement study on malicious web servers in the .nz domain. In Australasian Conference on Information Security and Privacy, 2009.
[36] S. Singh, C. Estan, G. Varghese, and S. Savage. Earlybird system for real-time detection of unknown worms. Technical report, 2003.
[37] SpiderLabs Blog. Rig exploit kit - diving deeper into the infrastructure. online, https://goo.gl/Ke8t8K.
[38] B. Stock, B. Livshits, and B. Zorn. Kizzle: A signature compiler for exploit kits. Technical Report MSR-TR-2015-12, February 2015.
[39] TrendLabs Security Intelligence. Exploit kits in 2015: Scale and distribution. online, http://goo.gl/SlU5sA.
[40] K. Wang, G. Cretu, and S. J. Stolfo. Anomalous payload-based worm detection and signature generation. In RAID, 2006.
[41] J. Zhuge, T. Holz, C. Song, J. Guo, X. Han, and W. Zou. Studying malicious websites and the underground economy on the Chinese web. Managing Information Risk and the Economics of Security, 2008.
[42] ZScaler ThreatLab. Malvertising, exploit kits, clickfraud and ransomware: A thriving underground economy. http://goo.gl/ozDmZX, 2015.