### Trojan and Rootkit Installation Scenarios

#### Introduction
A program that runs in an unconstrained domain (e.g., `unconfined_t` in SELinux or without any profile in AppArmor) can execute. In both cases, after the trojan program is executed, the process should be unconstrained. We classify this into two scenarios:
1. **Strong Trojan Case**: The trojan has full privileges.
2. **Weak Trojan Case**: The trojan has limited privileges.
3. **Rootkit Installation**: A local attacker installs a rootkit.

### Quality of Protection (QoP) Analysis

We analyze the QoP under several configurations:

1. **Ubuntu 8.04** (Server Edition):
   - **SELinux**: To understand the additional protection provided by Mandatory Access Control (MAC) over Discretionary Access Control (DAC), we also evaluate Ubuntu 8.04 with DAC protection only.
   - **AppArmor**: Compare the results with SELinux to show the different levels of protection offered by these mechanisms.

2. **Fedora 8** with SELinux and **SUSE Linux Enterprise Server 10** with AppArmor:
   - Compare the results with Ubuntu 8.04/SELinux and Ubuntu 8.04/AppArmor to highlight the varying levels of protection across different distributions using the same mechanism.

3. **Ubuntu 8.04 with SELinux**:
   - Analyze the SELinux policy to demonstrate that considering only MAC policy without DAC policy and system state is insufficient.

### Active Services
The active services include: `sshd`, `vsftp`, `apache2`, `samba`, `mysql-server`, `postfix`, `nfsd`, `named`, etc. In Fedora 8, the SELinux policy is the targeted policy shipped with the distribution. The SELinux policy is the reference policy included in the SELinux package. The AppArmor policy is the one provided with the `apparmor-profiles` package.

### SELinux vs. AppArmor vs. DAC on Ubuntu 8.04

Ubuntu 8.04 Server Edition supports both SELinux and AppArmor, allowing us to compare their QoP directly. We also include the case where only DAC is used.

#### Remote Attacker to Install a Rootkit
In this scenario, the attacker has network access to the host and aims to install a rootkit via loading a kernel module. The host attack graphs for SELinux, AppArmor, and DAC-only are shown in Figures 10, 11, and 12, respectively. The comparison of minimal attack paths between SELinux and AppArmor is shown in Figure 13.

- **AppArmor** has the smallest vulnerability surface.
- **SELinux** has all the minimal attack paths that AppArmor has, plus some additional ones.
- **DAC-only** has all the attack paths that SELinux has, plus one additional minimal attack path.

### Minimal Attack Paths Comparison

- **AppArmor** has 3 length-1 minimal attack paths and 34 length-2 minimal attack paths.
- **SELinux** has 3 more length-1 minimal attack paths and 63 more length-2 minimal attack paths.

### Common and Unique Attack Paths

- **Common Paths**:
  - Due to daemon programs running in the unconstrained domain in SELinux and not confined by profiles in AppArmor.
  - Length-1 paths: `apache2`, `rpc.mountd`, and `sshd` running as root.
  - Length-2 paths: Unprivileged daemon programs like `mysqld` and `named`.

- **Unique Paths in SELinux**:
  - Programs running in the `unconfined_t` domain (e.g., `nmbd`, `smbd`, `vsftpd`, `portmap`, `rpc.statd`).
  - Programs with looser confinement in SELinux (e.g., `cupsd` and `dhclient`).
  - Programs like `named` and `mysqld` not confined in either SELinux or AppArmor but running with unprivileged accounts under DAC.

### Additional Attack Path in DAC-Only

- The DAC-only case has one additional strong length-1 minimal attack path: `/usr/sbin/cupsd`. This daemon runs as root and is confined by the `cupsd_t` domain in SELinux. An attacker exploiting `cupsd` must also exploit the setuid root program `/bin/unix_chkpwd` to gain the privilege to install a rootkit.

### Remote Attacker to Leave a Trojan Horse

- **Strong Trojan Case**: Installing a strong trojan is always at least as easy as installing a kernel module.
  - For **AppArmor**: One extra attack path: `/usr/sbin/smbd`.
  - For **SELinux**: The host attack graph is the same as for a remote attacker to install a rootkit.

- **Weak Trojan Case**: It is significantly easier to perform weak trojan attacks. Every network-facing program, if compromised, can be used directly to leave a weak trojan due to the lack of complete confinement and information flow tracking in both SELinux and AppArmor.

### Local Attacker to Install a Rootkit

- **Local Account**: The attacker's objective is to install a rootkit (load a kernel module). The host attack graphs for SELinux and AppArmor are shown in Figures 15 and 16.
- **AppArmor** has a smaller vulnerability surface.
- **Common Paths**: 19 setuid root programs with sufficient privileges.
- **Unique Paths in SELinux**: `/bin/ping` and `/usr/bin/passwd` due to the same reasons as in the first scenario.

### Other Comparisons

- **Different Distributions with the Same MAC Mechanism**:
  - **Fedora 8 with SELinux**: Smaller vulnerability surface compared to Ubuntu 8.04/SELinux for the remote trojan attack scenario.
  - **SUSE Linux Enterprise Server 10 with AppArmor**: Some services (e.g., `slpd` and `zmd`) are turned off to match the services in Ubuntu 8.04.

### Conclusion

Our analysis shows that while SELinux and AppArmor provide additional security over DAC, the effectiveness varies. SELinux in Ubuntu 8.04 provides limited meaningful confinement for most network-facing root processes, suggesting that the additional protection from the SELinux reference policy is somewhat limited.