### Optimized Text

#### Introduction
An attacker can exploit vulnerabilities to perform classic Return-Into-Libc (RILC) or advanced Counterfeit Object-Oriented Programming (COOP) attacks [31]. Our approach thwarts these function-reuse attacks by permuting all function tables, such as C++ virtual tables and Procedure Linkage Table (PLT) entries, with performance overheads that are acceptable for industry adoption.

#### Isomeron: An Alternative Defensive Technique
Davi et al. [13] recently introduced Isomeron, a defensive technique that combines fine-grained Address Space Layout Randomization (ASLR) with control-flow randomization. Specifically, Isomeron maintains two copies of a program image, one of which is diversified. The program's control flow is randomized at each function call. However, Isomeron introduces significant performance overhead due to its reliance on dynamic binary instrumentation. Additionally, it provides limited protection against RILC and COOP attacks because its policies restrict indirect calls to target only valid functions linked by the program.

#### Opaque Control-Flow Integrity (O-CFI)
Mohan et al. [24] present Opaque CFI (O-CFI), a solution based on binary instrumentation that combines coarse-grained Control-Flow Integrity (CFI) with code randomization. Similar to Isomeron, the code layout is no longer a secret. O-CFI operates by identifying a unique set of possible target addresses for each indirect branch instruction. It then restricts the target address of the indirect branch to only its minimal and maximal members. To further reduce the set of possible addresses, it arranges basic blocks belonging to an indirect branch set into clusters, ensuring they are located nearby, and also randomizes their location. Unlike Readactor++, the security of O-CFI relies on the precision of the available Control-Flow Graph (CFG). Mohan et al. use CFGs recovered from binaries, leading to coarse-grained policies that may allow function-reuse attacks.

#### Defenses Against vtable-based Attacks
To defend against vtable-based attacks, several defenses have been proposed [16, 20, 27, 38, 40]. The compiler-based approaches by Tice et al. [38] and Jang et al. [20] focus on protecting virtual function calls in C++. Both ensure that an adversary cannot manipulate a vtable pointer to point to an adversary-controlled, fake vtable. Unfortunately, these schemes do not protect against classical return-oriented programming (ROP) attacks that reuse return instructions. These approaches require the source code of the application, which may not always be available. For binary code protection, several forward-edge CFI schemes have been presented [16, 27, 40]. Although these approaches do not require access to source code, they are not as fine-grained as their compiler-based counterparts. In particular, COOP undermines the assumptions of these binary instrumentation-based defenses by invoking a chain of virtual functions through legitimate call sites to induce malicious program behavior [31].

#### Code-Pointer Integrity
Szekeres et al. [37] proposed Code-Pointer Integrity (CPI), and Kuznetsov et al. [21] evaluated several implementations for x86 and x86-64 systems. CPI separates code pointers and pointers to code pointers from non-control data by placing them in a safe memory region that can only be accessed by instructions proven to be safe at compile-time. CPI operates efficiently on C code but may incur performance overheads of more than 40% for C++ applications. In terms of security, CPI relies on the protection of the safe memory region, which is efficiently possible on x86 by leveraging segmentation. However, on x86-64, where segmentation is not fully available, CPI protects the safe region through information hiding or software-fault isolation. Evans et al. [15] recently demonstrated a weakness in one of the x86-64 CPI implementations that can be exploited to locate and compromise the safe region.

#### Conclusions
While ROP-based attacks have received considerable attention from the research community, sophisticated attacks such as COOP show that whole-function reuse is equally concerning. Our paper demonstrates two new ways to construct COOP attacks against C++ code and describes a minimized yet realistic COOP attack that bypasses Data Execution Prevention (DEP). We also introduce a novel probabilistic defense against COOP and other attacks that abuse dynamically-bound function calls. Our techniques are designed to fully resist information disclosure vulnerabilities. Our evaluation shows that these techniques provide quantifiable and tunable protection, scale to real-world software, and add an average run-time overhead of just 1.1%. When combined with execute-only memory and fine-grained code randomization, the combined overhead (8.4%) is less than that of a fully comparable CFI solution.

#### Acknowledgments
We acknowledge Sajo Sunder George’s efforts to implement PLT randomization and boobytrapping and thank Andrei Homescu, Stefan Brunthaler, and the anonymous reviewers for their suggestions and constructive feedback.

This material is based upon work partially supported by the Defense Advanced Research Projects Agency (DARPA) under contracts D11PC20024, N660001-1-2-4014, FA8750-15-C-0124, and FA8750-15-C-0085, as well as gifts from Google, Mozilla, Oracle, and Qualcomm. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of DARPA, its Contracting Agents, the National Science Foundation, or any other agency of the U.S. Government.

This work has been co-funded by the German Federal Ministry of Education and Research (BMBF) under support code 16BP12302 (EUREKA project SASER), the German Science Foundation as part of project S2 within the CRC 1119 CROSSING, the European Union’s Seventh Framework Programme under grant agreement No. 609611 (project PRACTICE), and the Intel Collaborative Research Institute for Secure Computing at TU Darmstadt.

Finally, we thank the Agency for Innovation by Science and Technology in Flanders (IWT) for their support.

#### References
[1] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-Flow Integrity Principles, Implementations, and Applications. ACM Transactions on Information System Security, 13, 2009.
[2] M. Backes and S. N¨urnberger. Oxymoron - Making Fine-Grained Memory Randomization Practical by Allowing Code Sharing. In USENIX Security Symposium, 2014.
[3] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and J. Pewny. You Can Run But You Can’t Read: Preventing Disclosure Exploits in Executable Code. In ACM Conference on Computer and Communications Security (CCS), 2014.
[4] S. Bhatkar and D. C. DuVarney. Efficient Techniques for Comprehensive Protection from Memory Error Exploits. In USENIX Security Symposium, 2005.
[5] S. Bhatkar, D. DuVarney, and R. Sekar. Address Obfuscation: An Efficient Approach to Combat a Broad Range of Memory Error Exploits. In USENIX Security Symposium, 2003.
[6] A. Bittau, A. Belay, A. J. Mashtizadeh, D. Mazi`eres, and D. Boneh. Hacking Blind. In IEEE Symposium on Security and Privacy (S&P), 2014.
[7] T. K. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang. Jump-Oriented Programming: A New Class of Code-Reuse Attack. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2011.
[8] S. Checkoway, L. Davi, A. Dmitrienko, A. Sadeghi, H. Shacham, and M. Winandy. Return-Oriented Programming Without Returns. In ACM Conference on Computer and Communications Security (CCS), 2010.
[9] CodeSourcery, Compaq, EDG, HP, IBM, Intel, Red Hat, and SGI. Itanium C++ Application Binary Interface (ABI), 2001.
[10] S. Crane, P. Larsen, S. Brunthaler, and M. Franz. Booby Trapping Software. In Workshop on New Security Paradigms (NSPW), 2013.
[11] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In IEEE Symposium on Security and Privacy (S&P), 2015.
[12] T. H. Dang, P. Maniatis, and D. Wagner. The Performance Cost of Shadow Stacks and Stack Canaries. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2015.
[13] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose. Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In Symposium on Network and Distributed System Security (NDSS), 2015.
[14] L. V. Davi, A. Dmitrienko, S. N¨urnberger, and A. Sadeghi. Gadge Me If You Can: Secure and Efficient Ad-Hoc Instruction-Level Randomization for x86 and ARM. In ACM Symposium on Information, Computer and Communications Security (ASIACCS), 2013.
[15] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the Point: On the Effectiveness of Code Pointer Integrity. In IEEE Symposium on Security and Privacy (S&P), 2015.
[16] R. Gawlik and T. Holz. Towards Automated Integrity Protection of C++ Virtual Function Tables in Binary Programs. In Annual Computer Security Applications Conference (ACSAC), 2014.
[17] J. Gionta, W. Enck, and P. Ning. HideM: Protecting the Contents of Userspace Memory in the Face of Disclosure Vulnerabilities. In ACM Conference on Data and Application Security and Privacy (CODASPY), 2015.
[18] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz. Librando: Transparent Code Randomization for Just-In-Time Compilers. In ACM Conference on Computer and Communications Security (CCS), 2013.
[19] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz. Profile-Guided Automatic Software Diversity. In IEEE/ACM International Symposium on Code Generation and Optimization (CGO), 2013.
[20] D. Jang, Z. Tatlock, and S. Lerner. SAFEDISPATCH: Securing C++ Virtual Calls from Memory Corruption Attacks. In Symposium on Network and Distributed System Security (NDSS), 2014.
[21] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song. Code-Pointer Integrity. In USENIX Security Symposium, 2014.
[22] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK: Automated Software Diversity. In IEEE Symposium on Security and Privacy (S&P), 2014.
[23] Z. Lin, R. Riley, and D. Xu. Polymorphing Software by Randomizing Data Structure Layout. In Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA), 2009.
[24] V. Mohan, P. Larsen, S. Brunthaler, K. Hamlen, and M. Franz. Opaque Control-Flow Integrity. In Symposium on Network and Distributed System Security (NDSS), 2015.
[25] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2009.
[26] Nergal. The Advanced Return-Into-Lib(c) Exploits: PaX Case Study. Phrack Magazine, 11, 2001.
[27] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Symposium on Network and Distributed System Security (NDSS), 2015.
[28] rix. Smashing C++ VPTRS. Phrack Magazine, 56(8), 2000. URL http://phrack.org/issues/56/8.html.
[29] R. Roemer, E. Buchanan, H. Shacham, and S. Savage. Return-Oriented Programming: Systems, Languages, and Applications. ACM Transactions on Information System Security, 15, 2012.
[30] F. Schuster, T. Tendyck, J. Pewny, A. Maaß, M. Steegmanns, M. Contag, and T. Holz. Evaluating the Effectiveness of Current Anti-ROP Defenses. In International Symposium on Research in Attacks, Intrusions and Defenses (RAID), 2014.
[31] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz. Counterfeit Object-Oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In IEEE Symposium on Security and Privacy (S&P), 2015.
[32] F. J. Serna. The Info Leak Era on Software Exploitation. In BlackHat USA, 2012.
[33] H. Shacham, M. Page, B. Pfaff, E. Goh, N. Modadugu, and D. Boneh. On the Effectiveness of Address-Space Randomization. In ACM Conference on Computer and Communications Security (CCS), 2004.
[34] J. Siebert, H. Okhravi, and E. S¨oderstr¨om. Information Leaks Without Memory Disclosures: Remote Side Channel Attacks on Diversified Code. In ACM Conference on Computer and Communications Security (CCS), 2014.
[35] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A. Sadeghi. Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In IEEE Symposium on Security and Privacy (S&P), 2013.
[36] C. Song, C. Zhang, T. Wang, W. Lee, and D. Melski. Exploiting and Protecting Dynamic Code Generation. In Symposium on Network and Distributed System Security (NDSS), 2015.
[37] L. Szekeres, M. Payer, T. Wei, and D. Song. SoK: Eternal War in Memory. In IEEE Symposium on Security and Privacy (S&P), 2013.
[38] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, ´U. Erlingsson, L. Lozano, and G. Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security Symposium, 2014.
[39] M. Tran, M. Etheridge, T. Bletsch, X. Jiang, V. W. Freeh, and P. Ning. On the Expressiveness of Return-Into-Libc Attacks. In International Symposium on Research in Attacks, Intrusions and Defenses (RAID), 2011.
[40] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song. VTint: Defending Virtual Function Tables’ Integrity. In Symposium on Network and Distributed System Security (NDSS), 2015.

#### Appendix
Figures 8–11 below depict excerpts from widely used C++ software resulting in Recursive Call Graphs (REC-Gs). Each REC-G exists in at least the x86-64 version of the respective software. In each figure, the call sites A and B are marked analogously to Figure 1.

**Figure 8:** `mo_lambda.cpp` in the Boost library (version 1.58 and others); causes a side-effect-free REC-G on Ubuntu 14.04 and Windows 10.

**Figure 9:** `qpixmap_blitter.cpp` in the Qt library (version 5.5 and others); causes a side-effect-free REC-G in `libQt5Gui.so` on Ubuntu 14.04 and a REC-G with side effects in `Qt5Gui.dll` on Windows 10.

**Figure 10:** `agents.h` in Microsoft Visual C++ 2013; causes a side-effect-free REC-G in Microsoft’s C++ runtime library `msvcp120.dll`.

**Figure 11:** `SkComposeShader.cpp` in Chromium (version 44 and others); causes a side-effect-free REC-G in Chromium.

```cpp
virtual name *clone() const {
    plural_ptr op1_copy(op1->clone());
    plural_ptr op2_copy(op2->clone());
    return new name(op1_copy, op2_copy);
}

BA
QBlittablePlatformPixmap::~QBlittablePlatformPixmap() {
#ifdef QT_BLITTER_RASTEROVERLAY
    delete m_rasterOverlay;
    delete m_unmergedCopy;
#endif
}

BA
~_Order_node_base() {
    delete _M_pReceiveMessage;
    delete _M_pSendMessage;
}

BA
size_t SkComposeShader::contextSize() const {
    return sizeof(ComposeShaderContext)
         + fShaderA->contextSize()
         + fShaderB->contextSize();
}
```

This optimized text aims to improve clarity, coherence, and professionalism while maintaining the technical accuracy and depth of the original content.