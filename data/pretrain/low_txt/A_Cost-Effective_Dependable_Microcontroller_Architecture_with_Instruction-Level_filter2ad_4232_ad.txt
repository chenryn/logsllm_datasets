### 4.2.2. Impact of Expanding the Soft Error Correction Area on MTBF

Our rollback architecture can correct soft errors not only in the CPU but also in other control modules such as MEMC, peripherals, and the RCM itself. To evaluate this feature, we restricted the error detection and correction areas of the microcontroller. For instance, one approach uses a duplicated ALU in a superscalar architecture for dependability [8]. In our evaluation, this dependable ALU approach corresponds to correcting soft errors that occur only in the "CPUD" module of the microcontroller, as shown in Figure 14(a). Additionally, since our rollback architecture can correct soft errors in the RCM itself, we enabled rollback control for all random logic circuits except the RCM, as shown in Figure 14(b).

We selected the nearly impossible SER, ER-5, from the three rates in Section 4.2.1, and labeled the setup in Figure 14(a) as "Only CPUD" and the setup in Figure 14(b) as "Except RCM".

The resulting MTBF graph for the eight benchmarks is shown in Figure 15. The MTBF of "Only CPUD" was only 1.46 times longer than the original (at ER-5). This indicates that soft errors occurring in all areas except the CPUD module would often be active because the error injection targeted not only the F/Fs of the CPUD but also all F/Fs of the microcontroller. In the "Except RCM" setup, the MTBF was 20 times longer. In the GEN-MCU (at ER-5), which corrects all random logic circuits of the microcontroller, the MTBF was 30 times longer (this value corresponds to Figure 13).

Thus, our rollback architecture is effective for soft errors that occur in any random logic circuits of the microcontroller.

**Figure 15.** MTBF results for comparison of "Only CPUD" with "Except RCM"

### 4.3. MTBF Results for ECC RAM Rollback Architecture

We evaluated the ECC RAM rollback architecture in the same way as with the random logic circuits. The targets of the MTBF evaluation were the Original-MCU with normal ECC coded RAM (Original+ECC) and GEN-MCU. The area of soft error injection was RAM in both Original+ECC and GEN-MCU. We used the same eight benchmarks listed in Table 2 and ran a logic simulation.

A single-bit soft error in normal ECC RAM may not cause simulation failure in Original+ECC if the error area is not accessed from the CPU or if the error area is rewritten before the wrong data is read. Normal ECC does not have a correct data write-back hardware. Therefore, if a single-bit soft error remains in a word area of RAM and another soft error occurs in the same word area, the logic simulation will fail due to an uncorrected double-bit error. In contrast, the ECM architecture in GEN-MCU detects a single-bit ECC error, writes back the correct data, and then the CPU executes through the rollback process.

Currently, the SER of RAM is higher than that of F/F, and the RAM error rate is supposed to be several times higher than that of F/F. Based on past experience, we established a RAM SER value five times higher than the 5 × 10^17 FIT/Mbit of "ER-5". The 25 × 10^17 FIT/Mbit corresponds to the occurrence of a soft error in this RAM under a 10^-3 per CPU cycle. This error rate is termed "ER-ECM".

The MTBF results and graph are shown in Table 3 and Figure 16. The column labeled "Corrected Data Read" in Table 3 represents the sum of RAM read accesses that corrected a single-bit error by ECC logic circuits in Original+ECC. The column labeled "Rollback Error Data" represents the sum of corrected single-bit error occurrences in RAM by the rollback process in GEN-MCU. In GEN-MCU, the number of read error data decreased due to the rollback process, which corrects a single-bit error in RAM when detected. The MTBF results of GEN-MCU were about the same as or longer than those of Original+ECC, with application dependencies due to differences in RAM access. Although the MTBF of GEN-MCU was 1.34 times longer than that of Original+ECC, as shown in Figure 16, GEN-MCU has no critical path caused by ECC, meaning that our architecture has the advantage of high frequency for microcontrollers. Using memory patrol software can correct latent single-bit soft errors in normal ECC RAM, but our ECC rollback architecture requires less software overhead.

**Table 3.** Detailed MTBF results for ECC RAM rollback

| Soft Error Rate: ER-ECM | Soft Error Rate: ER-ECM |
|------------------------|------------------------|
| (About 100,000 errors/100 M cycles) | (About 100,000 errors/100 M cycles) |

**Figure 16.** MTBF results for ECC RAM rollback

### 5. Related Work

In the pursuit of highly dependable systems, many module and time redundancy methods have been researched. For example, there are module redundancy methods that compare output signals from dual CPUs and RAM using a self-checking comparator in a single-chip microprocessor [9]. Although these approaches achieve high fault coverage, the increase in hardware cost is significant, limiting their use to high-end applications such as airplanes, trains, and server computers. A well-known time redundancy method is recomputing with shifted operands (RESO) [10][11], but this approach is difficult to apply to microcontrollers in real-time systems due to its nearly 100% cycle overheads. In our rollback architecture, cycle overhead is created only when a soft error is detected.

Recently, non-redundant module approaches have been proposed for high-end processors. As SER increases with decreasing semiconductor feature size and supply voltages, high-end processors with large-capacity memory are more likely to malfunction. Intel has suggested "Error-trapping F/F" and estimated an area overhead of about 0.5% [12]. However, this method uses specific customized latches and multiplexed scan F/Fs, and we estimate that applying this technique to our standard cell library would result in an area overhead of over 110%, making microcontroller manufacturing more challenging. Fujitsu's "SPARC64 VI" architecture includes a re-execute function from the PC when a soft error is detected [13], similar to our approach. All function modules of the SPARC64 VI processor use protected parity or ECC, but our generation tool optimizes the area and delay overheads of generating soft error-detecting logic circuits.

Several dependable methods have also been presented for low-end microcontrollers. For example, ST Microelectronics is researching quad CPU architecture [14], expecting that the area of on-chip ROM will dominate over the CPU in the microcontroller. However, power consumption remains a significant issue. Another example is the cost-effective error detection platform using an ARM core [15], but this is primarily an error detection approach, and it is difficult to correct errors in random logic circuits with low overhead.

ARM also announced its "Cortex-R4F" [16], which uses similar techniques: no timing-critical path is triggered by ECC RAM, and re-execution is done by existing pipeline flush architecture. Although our rollback architecture requires some cycle overheads due to CPU reset and rollback, it can correct soft errors in memories, the CPU, peripherals, and other control microcontroller modules.

### 6. Conclusion

We proposed a cost-effective, dependable microcontroller architecture for soft error recovery. We implemented an EDA tool with soft error-detecting logic circuits, CPU instruction-level rollback control modules, and an ECC RAM-correcting architecture without delay overhead. Our evaluation showed that this architecture achieved high tolerance to soft errors with low overheads and high performance. We plan to apply these architectures to the manufacture of a new microcontroller for embedded systems used in automobiles and industrial machines.

### References

[1] Kentaro Yoshimura et al. "Cost-Effective and Fault Tolerant Vehicle Control Architecture for X-by-Wire Systems (Part 1: Architecture Design Based on the Concept of Autonomous Decentralized Systems)". Society of Automotive Engineers 2005 World Congress(SAE2005), 2005-01-1527, Apr 2005.

[2] Kohei Sakurai et al. "Cost-Effective and Fault Tolerant Vehicle Control Architecture for X-by-Wire Systems (Part 2: Implementation Design)". Society of Automotive Engineers 2005 World Congress(SAE2005), 2005-01-1543, Apr 2005.

[3] Robert Baumann. "Single Event Upsets in Commercial Electronics - From Nuclear Mechanisms to Technology Scaling Trends". Tutorials of International Reliability Physics Symposium 2003(IRPS2003), Mar 2003.

[4] Cristian Constantinescu. "Neutron SER Characterization of Microprocessors". International Conference on Dependable Systems and Networks 2005(DSN2005), pages 754–759, Jun 2005.

[5] David G. Mavis. "Single Event Transient Phenomena – Challenges and Solutions". Microelectronics Reliability and Qualification Workshop 2002, Dec 2002.

[6] T.Sakata, T.Hirotsu, H.Yamada, and T.Kataoka. "Automatic Generation Techniques of Soft-Error-Detecting Logic Circuits with Low Delay and Area Overheads". Fast Abstracts of International Conference on Dependable Systems and Networks 2006(DSN2006), Vol.2:178–179, Jun 2006.

[7] M.Sugihara, T.Ishihara, and M.Muroyama. "A Simulation-Based Soft Error Estimation Methodology for Computer Systems". Proc. of IEEE International Symposium on Quality Electronic Design, pages 196–203, Mar 2006.

[8] J.Ray, J.Hoe, and B.Falsaﬁ. "Dual Use of Superscalar Datapath for Transient-Fault Detection and Recovery". Proc. of 34th International Symposium on Microarchitecture, pages 214–224, Dec 2001.

[9] K.Shimamura, K.Tsunedomi, Y.Shima, T.Takehara, and K.Hashimoto. "A Single-Chip Fail-Safe Microprocessor with Memory Data Comparison Feature". The 12th IEEE International Symposium Pacific Rim Dependable Computing(PRDC’06), pages 359–368, Dec 2006.

[10] J. H. Patel and L. Y. Fung. "Concurrent Error Detection in ALUs by Recomputing with Shifted Operands". IEEE Transactions on Computers, Vol.C-31:589–595, Jul 1982.

[11] J. H. Patel and L. Y. Fung. "Concurrent Error Detection in Multiply and Divide Arrays". IEEE Transactions on Computers, Vol.C-32:417–422, Apr 1983.

[12] Subhasish Mitra et al. "Logic Soft Errors: A Major Barrier To Robust Platform Design". International Test Conference 2005(ITC2005), pages 687–698, Nov 2005.

[13] Aiichiro Inoue. "Fujitsu SPARC64 VI: A State of the Art Dual-Core Processor". Fall Microprocessor Forum 2006, Oct 2006.

[14] M.Baleani, A.Ferrari, L.Mangeruca, M.Peri, and S.Pezzini. "Fault-Tolerant Platforms for Automotive Safety-Critical Applications". International Conference on Compilers, Architecture and Synthesis for Embedded Systems 2003(CASES2003), pages 170–177, Oct 2003.

[15] R.Mariani, B.Vittorelli, and P.Fuhrmann. "Cost-Effective Approach to Error Detection for an Embedded Automotive Platform". Society of Automotive Engineers 2006 World Congress(SAE2006), 2006-01-0837:35–46, Apr 2006.

[16] ARM. "http://www.arm.com/news/14895.html", Oct 2006.