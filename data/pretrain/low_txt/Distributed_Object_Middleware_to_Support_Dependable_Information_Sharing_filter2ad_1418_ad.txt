### Optimized Text

**Wait for Completion and Protocol Progress Communication**

The `coordCallback` function is also utilized by the coordinator to communicate protocol progress information to the application. The `B2BCoordinatorLocal` interface operates independently of both the communication mode and the coordination protocols executed between coordinators through their `B2BCoordinatorRemote` interface. Implementations of these interfaces are part of the `B2BCoordinator` package provided by the middleware.

**Illustrative Applications**

We will now describe two simple applications that demonstrate the adaptability of the middleware to various application requirements. These examples are illustrative of a broader class of problems.

#### 5.1. Tic-Tac-Toe Application

Tic-Tac-Toe is a two-player game where players take turns to modify a shared state according to well-defined, symmetrically applied rules. This turn-taking access to shared state is characteristic of other applications, such as shared whiteboards. In contrast, the order processing example demonstrates sharing between two parties according to asymmetric rules. As described in Section 5.2, it is relatively straightforward to extend this to involve multiple parties.

**Objective and Rules**

The goal of Tic-Tac-Toe is for a player to claim a horizontal, vertical, or diagonal line of squares before their opponent. Players alternate turns. The rules are symmetric: for Nought, a vacant square is claimed by marking it with a zero; Nought cannot mark any square with a cross; and Nought cannot overwrite an already claimed square.

**Game Implementation**

An object implementing the `B2BObject` interface represents the game state and encapsulates the rules. Each player's server shares this object and coordinates its state. A player communicates a move to their server using the local application client's "Save" operation. The servers validate each proposed move (state change) via the `validateState` upcall. A validated move is retrieved by the application client using its "Load" operation. Apart from encoding the rules, the application programmer's task mainly involves instantiating the `B2BObjects` infrastructure and providing the user interface (the "Load" and "Save" operations are part of this interface and are not mandated by `B2BObjects`).

**Example Game State**

Figure 5 shows an example of a Tic-Tac-Toe game in progress after the following sequence of moves:
- Cross claims the middle row, center square.
- Nought claims the top row, left square.
- Cross claims the middle row, right square.
- Cross attempts to mark the bottom row, center square with a zero.

The final move is an attempt by Cross to gain an advantage by preempting Nought’s next move. This state change is invalid and, as can be seen, is not reflected at Nought’s server. The agreed state of the game has not been updated, and Nought will have evidence of the attempt to cheat. Cross forfeits the game.

**Alternative Validation via TTP**

As an alternative to playing the game directly between two players, it may be desirable to validate moves at a Trusted Third Party (TTP) to ensure they are encoded and observed correctly. Figure 6 represents an instance of the game being played through a TTP that validates each player’s move before it is disclosed to their opponent.

#### 5.2. Order Processing Application

In this application, a customer and supplier share the state of an order. Asymmetric validation rules apply to state changes:
- The customer can add items and specify the quantity required but cannot price the items.
- The supplier can price items but cannot amend the order in any other way.

Each party has a replica of an order object that implements the `B2BObject` interface, and the state of each replica is coordinated with that of its peer. Any attempt by the supplier to both price an item (a valid action) and change the quantity required (an invalid action) will be rejected. Similarly, an attempt by the customer to both add items to an order and price them will be rejected.

**Extended Order Processing**

An alternative instantiation of order processing could involve an approver to sanction the items ordered by the customer and a dispatcher to commit to delivery terms. The order object would then be shared between four parties, and the validation rules would be modified to reflect their roles.

### Related Work

**Fair Exchange Protocols**

The problem of fair exchange of information or items of value has received considerable attention recently. A system is considered fair if it does not discriminate against a correctly behaving party. Fair exchange protocols aim to guarantee fairness during a protocol run or, in the case of optimistic fair exchange, through an exchange protocol and associated resolve and abort sub-protocols. All known fair exchange protocols require either active involvement of a TTP or use a TTP to guarantee termination. Pagnia et al. provide a formal proof of the impossibility of (strong) fair exchange without a TTP. A distinction can be made between one-off exchange and ongoing information sharing. It has been shown that relationships characterized by an indefinite series of interactions have quantifiable and often strong incentives for cooperative behavior, even between antagonists. This insight is relevant to the configuration of middleware support for evolving interaction styles.

**Non-Repudiation Evidence Generation**

The work of Wichert et al. is close to our approach to systematic generation of non-repudiation evidence. They propose generating evidence at the invocation of "tagged" methods, providing non-repudiable RPC but not addressing validation of state changes for information sharing.

**Distributed Trusted Computing Services**

Work in the MAFTIA project on distributed trusted computing services is relevant to our plans to investigate the deployment of the functions and services provided by the `B2BCoordinator` package. MAFTIA’s work on tolerating the corruption of a proportion of participants in agreement protocols is relevant to protocol termination through majority voting.

**Policy-Controlled Interaction**

In the area of policy-controlled interaction, Ponder is of interest due to its unified approach to specifying both security and management policy for distributed object systems. It also allows the import of policy across administrative domains. The work of Minsky et al. on Law-Governed Interaction (LGI) provides an infrastructure for interaction between parties governed by global policy. Communication between parties is mediated by agents, which enforce agreed policy as it relates to the party on whose behalf the agent acts. Another approach to automated control of interactions through agreements between organizations is IBM’s tpaML language for business-to-business integration. Their model of long-running conversations, the state of which is maintained at each party, is similar to the notion of shared interaction state. Policy-based approaches can be seen as complementary to `B2BObjects`.

### Conclusions and Future Work

We have presented middleware that addresses the requirement for dependable information sharing between organizations. The middleware presents the abstraction of shared state and regulates updates to that state, ensuring safety even in the presence of misbehaving parties. If all parties behave correctly, liveness is guaranteed despite a bounded number of temporary failures. The middleware provides a familiar programming abstraction to the application programmer and frees them to concentrate on the business logic of applications.

Our state coordination protocol provides strong guarantees regarding the validity of decisions reached and is efficient in terms of the number of messages required. These characteristics are achieved under stated assumptions regarding failures, particularly by not guaranteeing protocol termination when parties misbehave. However, the middleware provides persistence of valid state and protocol messages, allowing recovery in many circumstances. The inability to terminate is detectable and may be resolved outside of a protocol run, typically involving a third party.

Future work will include investigating support for concurrency control and transactional access to `B2BObjects`, and the use of a wider range of communication mechanisms, such as Message-Oriented Middleware and SMTP/HTTP/SOAP for message delivery.

### Acknowledgements

This work is part-funded by the UK EPSRC under grant GR/N35953/01, the European Union under Project IST-2001-34069, and Hewlett-Packard. We thank our colleague Paul Ezhilchelvan for useful discussions.

### References

[1] N. Asokan. Fairness in Electronic Commerce. Research Report RZ3027, IBM Zurich Research Lab, 1998.
[2] R. Axelrod. The Evolution of Co-operation. Penguin Books, 1990.
[3] C. Cachin. Distributing Trust on the Internet. In Proc. IEEE Int. Conf. on Dependable Syst. and Networks (DSN), June 2001.
[4] N. Cook, S. Shrivastava, and S. Wheater. Distributed Object Middleware to Support Dependable Information Sharing between Organisations. Technical Report 753, Dept. of Computing Science, Univ. Newcastle, Apr. 2002.
[5] N. Damianou, N. Dulay, E. Lupu, and M. Sloman. The Ponder Policy Specification Language. In Proc. Int. Workshop on Policies for Distributed Syst. and Networks (POLICY), Springer-Verlag LNCS 1995, Bristol, UK, Jan. 2001.
[6] A. Dan, D. Dias, R. Kearney, T. Lau, T. Nguyen, M. Sachs, and H. Shaikh. Business-to-business integration with tpaML and a business-to-business protocol framework. IBM Syst. J., 30(1):68–90, 2001.
[7] D. Dolev and A. Yao. On the Security of Public Key Protocols. IEEE Trans. Inf. Theory, 29(2):198–208, 1983.
[8] S. Ketchpel and H. Garcia-Molina. A sound and complete algorithm for distributed commerce transactions. J. Distributed Computing, 12:13–29, Jan. 1999.
[9] N. Minsky and V. Ungureanu. Law-Governed Interaction: A Coordination and Control Mechanism for Heterogeneous Distributed Systems. ACM Trans. Softw. Eng. and Methodology, 9(3):273–305, July 2000.
[10] J. Mitchener, A. Pengelly, D. Freestone, and A. Childerhouse. Distributing operational support to transform business operations. BT Technology J., 17(2):74–81, Apr. 1999.
[11] H. Pagnia and F. Gärtner. On the impossibility of fair exchange without a trusted third party. Technical Report TUD-BS-1999-02, TU Darmstadt, 1999.
[12] B. Schneier. Applied Cryptography. John Wiley and Sons, 2nd edition, 1996.
[13] P. Veríssimo, N. Neves, C. Cachin, M. Correia, T. McCutcheon, B. Pfitzmann, B. Randell, M. Schunter, W. Simmonds, R. Stroud, M. Waidner, and I. Welch. Service and Protocol Architecture for the MAFTIA Middleware. Deliverable D23, EU MAFTIA Project IST-1999-11583, Jan. 2001.
[14] H. Vogt, H. Pagnia, and F. Gärtner. Modular Fair Exchange Protocols for Electronic Commerce. In Proc. IEEE Annual Comput. Security Applications Conf., Phoenix, Arizona, Dec. 1999.
[15] M. Wichert, D. Ingham, and S. Caughey. Non-repudiation Evidence Generation for CORBA using XML. In Proc. IEEE Annual Comput. Security Applications Conf., Phoenix, Arizona, Dec. 1999.
[16] J. Zhou and D. Gollmann. Evidence and non-repudiation. J. Network and Comput. Applications, 20(3):267–281, July 1997.

Proceedings of the International Conference on Dependable Systems and Networks (DSN’02)  
0-7695-1597-5/02 $17.00 © 2002 IEEE  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19, 2021 at 04:21:46 UTC from IEEE Xplore. Restrictions apply.