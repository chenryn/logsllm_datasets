### 7.4 Driver Code Modification
For open-source drivers, such as the MadWiFi drivers, it is possible to modify the driver code to change the transmission rate of probe request frames. This modification could potentially fool our fingerprinting technique. However, this approach is only feasible for open-source drivers and requires a skilled programmer to alter the driver code. For many Windows drivers, this is not possible because most do not provide access to the source code.

### 7.5 MAC Address Masquerading
In our earlier analysis, we assumed a one-to-one mapping of MAC addresses to wireless devices. One method to prevent driver fingerprinting is to change the device's MAC address to match that of another device within transmission range. This would deceive our fingerprinting technique into believing that probe requests from two different wireless drivers are originating from the same driver. There are several issues with this approach:
- The wireless device must ensure that the fingerprinter is within transmission range of both devices. If the fingerprinter only observes probe request frames from one of the two devices, it will not be deceived.
- Our method uses statistical methods to filter noise, so the wireless device needs to ensure that the other device transmits enough probe request frames to mask its signature.

### 7.6 Driver Patching
While driver patching is not a complete solution, we believe that well-thought-out patching schemes can improve the overall security of device drivers as new exploits are discovered. Current research is focused on improving the process of patching security vulnerabilities [15, 16]. The device driver community should leverage this research to develop more robust patching methods and enhance the overall level of driver security.

### 8 Related Work
Various techniques for system and device-level fingerprinting have been used for both legitimate purposes, such as forensics and intrusion detection, and malicious activities, such as attack reconnaissance and user profiling. The most common techniques exploit explicit content differences in system and application responses. Nmap [17], p0f [18], and Xprobe [19] are widely distributed, open-source tools that can remotely fingerprint an operating system by identifying unique responses from the TCP/IP networking stack. These tools match the content of machine responses to a database of OS-specific response signatures. Nmap and Xprobe actively query the target system to invoke these potentially identifying responses, while p0f can passively fingerprint an operating system by monitoring network traffic from a target machine to a third party and matching characteristics of that traffic to a signature database. Data link layer content matching can also be used to identify wireless LAN discovery applications [20], which is useful for wireless intrusion detection.

While datagram content identification methods are relatively simple, they are limited to situations where datagram characteristics are uniquely identifiable and accessible to an outside party. Except for a few unique cases, 802.11 MAC-layer frame formatting and content are generally indistinguishable across wireless devices, necessitating more sophisticated methods. In [21], the authors present a technique to identify network devices based on their unique analog signal characteristics. This fingerprinting technique relies on the premise that subtle differences in manufacturing and hardware components create unique signaling characteristics in digital devices. Although the results of analog signal fingerprinting are significant, this method requires expensive hardware, such as an analog-to-digital converter, IEEE 488 interface card, and digital sampling oscilloscope. Additionally, it is unclear whether this method is feasible in a typical wireless network setting, where environmental and device noise are more prominent considerations.

Clock skew is another target for fingerprinting. A technique presented in [22] uses slight drifts in a device's TCP option clock to identify a network device over the Internet via its unique clock skew. While our technique fingerprints which driver a wireless device is running, time skew fingerprinting is used to identify distinct devices on the Internet. In terms of security, unique device fingerprinting is often less useful than driver and other types of software fingerprinting. Unlike content-based fingerprinting, both analog signal and time skew fingerprinting exploit characteristics of the underlying system hardware, making these techniques much more difficult to spoof.

Statistical timing analysis in the context of communication patterns and data content has been extensively studied, particularly in privacy-enhancing technologies. While network security mechanisms like encryption are often used to protect user privacy, traffic analysis of encrypted traffic has proven successful in linking communication initiators and recipients in anonymous networking systems [23, 24]. Traffic analysis has also been applied to web page fingerprinting. In [25], the authors demonstrate a technique that characterizes the inter-arrival times and datagram sizes of web requests for certain popular websites. Using these characterizations, one can identify which sites users on wireless LANs are visiting, even if they are browsing the Internet via encrypted HTTP traffic streams.

The techniques described above provide a survey of existing fingerprinting methods for systems, devices, and static content. These approaches range from exploiting content anomalies in the TCP/IP stack to characterizing time-based system behavior at both the physical and software layers. Despite the variations, these contributions highlight the feasibility of fingerprinting through avenues previously assumed to be uniformly implemented across systems.

### 9 Conclusion
We designed, implemented, and evaluated a technique for passive wireless device driver fingerprinting that exploits the fact that most IEEE 802.11a/b/g wireless drivers have implemented different active scanning algorithms. We demonstrated that our technique can accurately identify the wireless driver used by 802.11 wireless devices without specialized equipment and in realistic network conditions. Through an extensive evaluation involving 17 wireless drivers, we showed that our method is effective in fingerprinting a wide variety of wireless drivers currently on the market. Finally, we discussed ways to prevent fingerprinting, which we hope will aid in improving the security of wireless communication for devices that employ 802.11 networking.

### 10 Acknowledgments
Some of this work was performed while the authors were at Sandia National Laboratories - California. Sandia is a multiprogram laboratory operated by Sandia Corporation, a Lockheed Martin Company, for the United States Department of Energy’s National Nuclear Security Administration under Contract DE-AC04-94AL85000. The authors greatly appreciate the staff of Sandia National Laboratories for their assistance. We would like to thank John Bethencourt, Nikita Borisov, Frank Hemingway, Adam Lee, Kristen Pelon, Amanda Stephano, and the anonymous reviewers for their valuable suggestions. This work was partially supported by NSF Grant ITR-0428887 (Spectrum Management Toward Spectrum Plenty) and the University of Colorado. Jason Franklin conducted this research while on appointment as a U.S. Department of Homeland Security (DHS) Fellow. The views expressed in this paper do not necessarily reflect the policies and views of DHS, DOE, or affiliated organizations.

### References
[1] Ken Ashcraft and Dawson R. Engler. Using Programmer-Written Compiler Extensions to Catch Security Holes. In Proceedings of IEEE Symposium on Security and Privacy, May 2002.
[2] Andy Chou, Junfeng Yang, Benjamin Chelf, Seth Hallem, and Dawson R. Engler. An Empirical Study of Operating System Errors. In Proceedings of Symposium on Operating Systems Principles (SOSP 2001), October 2001.
[3] Tal Garfinkel, Ben Pfaff, Jim Chow, Mendel Rosenblum, and Dan Boneh. Terra: A Virtual Machine-Based Platform for Trusted Computing. In Proceedings of Symposium on Operating Systems Principles (SOSP 2003), October 2003.
[4] IEEE-SA Standards Board. IEEE Std IEEE 802.11-1999 Information Technology - Wireless LAN Medium Access Control (MAC) And Physical Layer (PHY) Specifications. IEEE Computer Society, 1999.
[5] IEEE-SA Standards Board. Amendment 6: Medium Access Control (MAC) Security Enhancements. IEEE Computer Society, April 2004.
[6] Ethereal: A network protocol analyzer. Web site, 2006. <http://www.ethereal.com>.
[7] Matthew S. Gast. 802.11 Wireless Networks: The Definitive Guide. O’Reilly & Associates, Inc., Sebastopol, CA, USA, 2nd edition, 2005.
[8] Nir Friedman, Dan Geiger, and Moises Goldszmidt. Bayesian Network Classifiers. Machine Learning, 29(2-3):131–163, 1997.
[9] T. Hastie, R. Tibshirani, and J. H. Friedman. The Elements of Statistical Learning. Springer, 2001.
[10] Snort Intrusion Detection and Prevention system. Web site, 2006. <http://www.snort.org>.
[11] MadWiFi: Atheros chip set drivers. Web site, 2006. <http://sourceforge.net/projects/madwifi>.
[12] D. Agrawal and C. C. Aggarwal. On the Design and Quantification of Privacy Preserving Data Mining Algorithms. In Proceedings of Symposium on Principles of Database Systems, 2001.
[13] R. Agrawal and R. Srikant. Privacy-preserving data mining. In Proceedings of ACM SIGMOD, May 2000.
[14] B. Hoh and M. Gruteser. Location Privacy Through Path Confusion. In Proceedings of IEEE/CreateNet International Conference on Security and Privacy for Emerging Areas in Communication Networks (SecureComm 2005), 2005.
[15] Gautam Altekar, Ilya Bagrak, Paul Burstein, and Andrew Schultz. OPUS: Online Patches and Updates for Security. In Proceedings of 14th USENIX Security Symposium, Aug 2005.
[16] John Dunagan, Roussi Roussev, Brad Daniels, Aaron Johnson, Chad Verbowski, and Yi-Min Wang. Towards a Self-Managing Software Patching Process Using Black-Box Persistent-State Manifests. In First International Conference on Autonomic Computing (ICAC’04), 2004.
[17] Nmap: a free network mapping and security scanning tool. Web site, 2006. <http://www.insecure.org/nmap>.
[18] Project details for p0f. Web site, 2004. <http://freshmeat.net/projects/p0f>.
[19] Arkin and Yarochkin. Xprobe project page. Web site, August 2002. <http://sourceforge.net/projects/xprobe>.
[20] Joshua Wright. Layer 2 Analysis of WLAN Discovery Applications for Intrusion Detection. Web site, 2002. <http://www.polarcove.com/whitepapers/layer2.pdf>.
[21] Ryan Gerdes, Thomas Daniels, Mani Mina, and Steve Russell. Device Identification via Analog Signal Fingerprinting: A Matched Filter Approach. In Proceedings of the Network and Distributed System Security Symposium Conference (NDSS 2006), 2006.
[22] Tadayoshi Kohno, Andre Broido, and K. C. Claffy. Remote Physical Device Fingerprinting. In Proceedings of the 2005 IEEE Symposium on Security and Privacy (SP 2005), Washington, DC, USA, 2005.
[23] Jean-François Raymond. Traffic Analysis: Protocols, Attacks, Design Issues, and Open Problems. In Proceedings of Privacy Enhancing Technologies Workshop (PET 2000), May 2000.
[24] Mathewson and Dingledine. Practical Traffic Analysis: Extending and Resisting Statistical Disclosure. In Proceedings of Privacy Enhancing Technologies Workshop (PET 2004), May 2004.
[25] George Dean Bissias, Marc Liberatore, and Brian Neil Levine. Privacy Vulnerabilities in Encrypted HTTP Streams. In Proceedings of Privacy Enhancing Technologies Workshop (PET 2005), May 2005.
[26] Mike Kershaw. Kismet. Web site, 2006. <http://www.kismetwireless.net>.

### Appendix A
This appendix includes the entire master signature database from our evaluation section. It is organized with the name of the wireless driver, whether the driver was associated (assoc) or unassociated (unassoc), and if Windows (win) was configuring the wireless device, or a standalone program (native). The values after the driver name and configuration are a set of tuples ordered as follows: (Bin Value, Percentage, Bin Mean Value).

#### Example Entries
- **cisco-abg-assoc-native**
  - (0.8, 0.101, 0.677)
  - (1.6, 0.108, 1.450)
  - (2.4, 0.168, 2.377)
  - (3.2, 0.021, 2.928)
  - (4, 0.024, 3.798)
  - (4.8, 0.028, 4.691)
  - (5.6, 0.048, 5.536)
  - (6.4, 0.034, 6.303)
  - (7.2, 0.080, 7.132)
  - (8, 0.032, 7.830)
  - (8.8, 0.017, 8.473)
  - (9.6, 0.044, 9.607)
  - (53.6, 0.288, 53.399)

- **dwl-ag530-unassoc-native**
  - (0, 0.544, 0.034)
  - (0.8, 0.052, 0.597)
  - (1.6, 0.198, 1.670)
  - (6.4, 0.053, 6.659)
  - (7.2, 0.129, 7.248)
  - (8, 0.012, 7.806)

- **intel-2200-assoc-native**
  - (0, 0.591, 0.107)
  - (0.8, 0.071, 0.955)
  - (1.6, 0.079, 1.495)
  - (2.4, 0.107, 2.182)
  - (120, 0.050, 120.254)
  - (120.8, 0.091, 120.698)

- **madwifi-unassoc**
  - (72.8, 0.881, 72.988)
  - (133.6, 0.119, 133.978)

- **netgear-assoc-win**
  - (0, 0.423, 0.001)
  - (0.8, 0.203, 0.611)
  - (1.6, 0.038, 1.552)
  - (2.4, 0.058, 2.240)
  - (3.2, 0.037, 3.206)
  - (4, 0.016, 4.006)
  - (4.8, 0.060, 4.731)
  - (5.6, 0.010, 5.505)
  - (57.6, 0.149, 57.498)

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the text is well-structured and easy to follow.