### Order Latency Analysis

Referring to Figure 4, the order latencies remain nearly constant for large batching intervals, indicating that the system operates in a steady state (i.e., under light or normal load conditions). For Crash-Tolerant (CT) systems, the latency remains at approximately 10 ms. However, for Byzantine Fault-Tolerant (BFT) and Secure Communication (SC) systems, the latency increases significantly when the batching interval decreases below a certain threshold, pushing the system into a saturation region. The y-axis in the figure is on a logarithmic scale.

Furthermore, the threshold for BFT is higher than that for SC, suggesting that BFT is more prone to pushing the system into saturation earlier. This is due to the larger number of messages and cryptographic operations BFT introduces. Consequently, the steady-state latency for BFT is always higher than that for SC.

Interestingly, the difference in steady-state latencies between SC and BFT becomes more pronounced when the cryptographic technique is changed from RSA (Figures 4a, 4b) to DSA (Figure 4c). For example, with RSA and a key size of 1024 bits, the difference in steady-state latencies between SC and BFT is 21 ms. When DSA is used, this difference increases to 37 ms. The explanation for this is as follows: while the time taken to sign a message is similar in both schemes, signature verification is much faster in RSA compared to DSA. In a typical n-to-n message exchange, each process signs one message but needs to verify at least (n-f) messages. Therefore, the slower verification in DSA results in a more significant slowdown for BFT. This suggests that DSA is generally not well-suited for Byzantine fault-tolerant order protocols.

### Throughput Analysis

For f = 2, throughput was observed to be low for larger batching intervals across all three cryptographic techniques. As shown in Figure 5, throughput increases with decreasing batching intervals until the system reaches the saturation point, after which it starts to drop. This behavior is consistent for both SC and BFT, whereas no drop was observed for CT within the range of batching intervals tested.

### Fail-Over Latency

Experiments were conducted to assess the impact of faults on the performance of SC and SCR. A single value-domain fault was injected, and the duration for switching between coordinators was measured for all three cryptographic schemes. It was observed that the fail-over latency increases linearly with the backlog size, which was varied from 1 to 5 KB (Figure 6).

### Related Work and Conclusions

The FLP impossibility result is typically circumvented by making synchrony assumptions (e.g., Rampart [15], SecureRing [8], TTCB [21], ITUA [16]), through quorum systems [12], or randomization [3]. Some systems, like our protocol with assumption 3(a)(i), can violate safety if strong synchrony assumptions are not met. Safety is the property that non-faulty processes do not order requests differently. On the other hand, BFT [2] and our extended protocol with assumption 3(b)(i) require only weak synchrony assumptions to guarantee liveness. Randomized protocols make no synchrony assumptions and ensure liveness in probabilistic terms over time. Our protocols also make no synchrony assumptions between unpaired processes but offer deterministic liveness guarantees. (Assumptions 3(a)(i) and 3(b)(i) apply only to paired processes.)

In the context of optimistic order protocols, early work by Pedone and Schiper [14] exploited the absence of failures and the natural total-ordering of multicasts over a LAN. Following BFT [2], several optimistic Byzantine fault-tolerant order protocols have been published (e.g., [23, 10, 17]), but none have been experimentally evaluated to the best of our knowledge. These protocols are coordinator-based in normal operation and switch to a (randomized) consensus protocol when optimistic conditions are not met.

We have developed an optimistic Byzantine fault-tolerant order protocol that outperforms a well-known protocol in terms of fail-free performance and practicality. This was achieved by carefully applying a technique for building robust process abstractions [19], where abstract processes with signal-on-crash properties act as coordinators. This approach reduces order latency and message overhead, making the protocol easier to implement and eliminating the need for synchrony assumptions among unpaired processes. However, this comes at the cost of requiring that paired-up processes cannot fail simultaneously. We address this requirement by assuming either that failure occurrences are separated by a threshold interval (assumption 3(a)(ii)) or that at least one process never fails (assumption 3(b)(ii)). Both assumptions require measures to ensure failure independence, and a robust realization of 3(b)(ii) may involve using more than two processes to build the signal-on-crash abstraction, balancing hardware costs and performance benefits.

### Acknowledgements

We thank Paul Murray for his meticulous shepherding of this paper. Financial support from the EPSRC platform grant is acknowledged. Qurat-ul-Ain was supported by the Commonwealth Scholarship Commission for her PhD.

### References

[1] F. Cristian and C. Fetzer, "The Timed Asynchronous Distributed System Model", In IEEE Transactions on Parallel and Distributed Systems, Vol. 10 (6), June 1999, pp. 642-57.
[2] M. Castro and B. Liskov, “Practical Byzantine Fault Tolerance”, In Proceedings of the 3rd ACM Symposium on Operating Systems Design and Implementation (OSDI), February 1999, pp. 173-186.
[3] C. Cachin, K. Kursawe and V. Shoup, “Random Oracles in Constantinople: Practical Asynchronous Byzantine Agreement Using Cryptography”, Proceedings of 19th ACM Symposium on Principles of Distributed Computing, 2000, pp. 123-132.
[4] C. Dwork, N. Lynch, L. Stockmeyer, “Consensus in the presence of partial synchrony”, Journal of the ACM (JACM), v.35 n.2, p.288-323, April 1988.
[5] M.J. Fischer, N.A. Lynch, and M.S. Paterson, “Impossibility of Distributed Consensus with one faulty Process,” Journal of the ACM, Vol. 32, No. 2, pp. 374-382, April 1985.
[6] S. Haddad and F. Nguilla, “Combining Different Failure Detectors for Solving a Large-Scale Consensus Problem” In the proceedings of the 14th ISCA-CATA Cancun, Mexico, April 1999.
[7] F. Junqueira and K. Marzullo, “The virtue of dependent failures in multi-site systems”, In Proceedings of the IEEE Workshop on Hot Topics in System Dependability, Supplemental volume of DSN’05, pages 242–247, June 2005.
[8] K. P. Kihlstrom, L. E. Moser, P. M. Melliar-Smith, “The SecureRing Protocols for Securing Group Communication”, In Proc. of the 31st Annual Hawaii International Conference on System Sciences (HICSS), pp. 317-26, Jan. 1998.
[9] H. Kopetz, Real-Time Systems: Design Principles for Distributed Embedded Applications. Kluwer Academic Publishers, 1997, ISBN 0-7923-9894-7.
[10] K. Kursawe and V. Shoup, “Optimistic Asynchronous Atomic Broadcast”, in the Proceedings of International Colloqium on Automata, Languages and Programming (ICALP05) (L. Caires, G.F. Italiano, L. Monteiro, Eds.) pp. 204-215, LNCS 3580, Springer, 2005. (http://www.shoup.net/papers/ks.pdf).
[11] M. G. Merideth, A. Iyengar, T. Mikalsen, S. Tai, I. Rouvellou, P. Narasimhan, “Thema: Byzantine-Fault-Tolerant Middleware for Web-Service Applications”, IEEE Symposium on Reliable Distributed Systems, Orlando, FL, 2005.
[12] D. Malkhi and M. Reiter, “Byzantine Quorum Systems”, Distributed Computing, 11(4), pp.203-213, 1998.
[13] D. Mpoeleng, P.D. Ezhilchelvan and N.A. Speirs, “From Crash-tolerance to Authenticated Byzantine Tolerance: a Structured Approach, the costs and Benefits”, Proc. 2003 International Conference on Dependable Systems and Networks (DSN2003), June 2003, pp.227-236.
[14] F. Pedone and A. Schiper, “Optimistic Atomic Broadcast: A Pragmatic View-point” in Theoretical Computer Science (Elsevier), Vol. 291 (1), pp. 79-101, 2003.
[15] M. Reiter, “The Rampart Toolkit for Building High-Integrity Services”. In Theory and practice of in Distributed Systems (LNCS 938), pp. 99 -110, Springer-Verlag, 1995.
[16] H. V. Ramasamy, P. Pandey, J. Lyons, M. Cukier, and W. H. Sanders, “Quantifying the Cost of Providing Intrusion Tolerance in Group Communication Systems” Proceedings of the International Conference on Dependable Systems and Networks (DSN-2002), Washington, DC, June 23-26, 2002, pp. 229-238.
[17] H. V. Ramasamy and Christian Cachin, “Parsimonious asynchronous Byzantine-fault-tolerant atomic broadcast”, In Proc. OPODIS 2005, 9th Intl. Conference on Principles of Distributed Systems, December 2005.
[18] F. Schneider and S. Toueg, “Replication Management Using the State-Machine Approach”, in Distributed Systems, Second Edition, (Ed. S. Mullender), Addison-Wesley, ISBN 0-201-62427-3, pp. 169-198.
[19] R. Schlichting and F. Schneider, “Fail-Stop Processors: An Approach to Designing Fault-Tolerant Computing Systems”, ACM Transactions on Computer Systems, Vol. 1(3), pp. 222-238, August 1983.
[20] G. Tsudik, “Message Authentication Using one-way Hash Functions”, ACM Computer Communications Review, 22(5), 1992.
[21] P. Verissimo and A. Casimiro, “The Timely Computing Base Model and Architecture”, IEEE Transaction on Computing Systems, 51(8), pp. 916-930, 2002.
[22] J. Yin, J.-P. Martin, A. Venkataramani, L. Alvisi, and M. Dahlin, “Separating Agreement from Execution for Byzantine Tolerant Services”, In proceedings of SOSP, pp. 253-267, 2003.
[23] K. Kursawe, “Optimistic Byzantine Agreement”, In Proceedings of the 21st Symposium on Reliable Distributed Systems (SRDS 2002), October 2002, pp 262-267.