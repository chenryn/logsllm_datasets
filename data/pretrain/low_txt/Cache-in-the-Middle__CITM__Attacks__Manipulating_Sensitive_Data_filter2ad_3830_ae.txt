### Virtualization-Based Solutions

In virtualization-based IEE (Isolated Execution Environment) solutions [19, 22, 33, 34, 36, 41, 43, 44, 57], the hypervisor is assumed to be secure. Memory management is achieved through a two-stage address translation mechanism. The first stage translates a virtual address (VA) to an intermediate physical address (IPA), while the second stage translates the IPA to a real physical address (PA). The second stage of translation is managed by the hypervisor, which typically provides robust protection for IEE memory by controlling the IPA-to-PA page table mappings. This ensures that separate physical memory regions are allocated for the IEE and the rich OS. Although attackers may manipulate the VA-to-IPA mappings, they cannot easily access the real PAs without compromising the hypervisor. Consequently, it is challenging to launch Cache-in-the-Middle (CITM) attacks on these virtualization-based IEE solutions, as the cache lines of the IEE memory are indexed using real PAs.

### Limitations of SGX and Virtualization-Based Solutions

While both SGX and virtualization-based solutions offer enhanced security against CITM attacks, they have their own limitations. First, the SGX technology is exclusive to Intel platforms, whereas most mobile devices use ARM processors. Second, virtualization-based solutions depend on a trusted hypervisor in the normal world, which can also be compromised [12, 16, 46]. In this paper, we focus on TrustZone-based IEE systems, which utilize a small-sized IEE monitor in the secure world to protect security-sensitive applications from untrusted OS and hypervisors in the normal world. The target of CITM attacks is the IEEs running in the normal world, while the secure world (e.g., the IEE monitor) is immune to CITM due to the secure cache, which cannot be manipulated from the normal world. Additionally, CITM is ineffective when the system operates in monitor mode (i.e., Execution Level 3), as the processor is automatically configured to execute in the secure mode by hardware once it enters this mode [4].

### Related Work

#### ARM TrustZone-Based Solutions

There is extensive research on using ARM TrustZone extensions [17] to protect security-sensitive resources from untrusted OS. These works can generally be divided into two categories: protecting sensitive resources directly in the secure world or protecting them in the normal world via a reference monitor in the secure world. Traditional Trusted Execution Environment (TEE) systems, such as OP-TEE [48], Qualcomm’s QSEE [29], Huawei’s Secure OS [35], and Samsung’s KNOX [26], follow the first model by implementing security-sensitive applications as TAs in the secure world. Other research, including TrustShadow [31], TrustOTP [54], TEEv [40], PrOS [39], Trusted Language Runtime (TLR) [50], CaSE [59], Komodo [27], SecTEE [61], and MIPE [18], also fall into this category. For example, Komodo [27] and SecTEE [61] implement an SGX-like system in the secure world, while PrOS [39] constructs multiple isolated TEEs. Since cache lines accessed in the secure world are secure, these systems are resistant to CITM attacks. However, they increase the Trusted Computing Base (TCB) by introducing partial or entire execution codes into the secure world.

#### Normal World Protection

Two groups of solutions aim to protect sensitive resources in the normal world. The first group includes IEE systems like SANCTUARY [14], Ginseng [25], and TrustICE [55], which are designed to protect third-party security-sensitive applications. As discussed in our paper, these systems are vulnerable to CITM attacks. The second group, including TZ-RKP [11], SPROBES [28], and SeCReT [38], focuses on protecting specific data or code rather than third-party applications. For instance, TZ-RKP [11] and SPROBES [28] protect critical kernel code, while SeCReT [38] creates a secure cross-domain communication channel with the help of TZ-RKP [11]. These solutions achieve data protection by interposing page table updates and preventing malicious OS from manipulating the cache and memory associated with sensitive data, making them immune to CITM attacks.

#### Virtualization Technology

Virtualization technology has also been widely adopted to protect security-sensitive resources. Solutions such as OSP [22], PrivateZone [36], vTZ [34], and TFence [37] target ARM platforms. The former three schemes focus on constructing IEEs, while TFence [37] uses the hypervisor to create a secure cross-domain communication channel between applications and the TEE. On x86 platforms, Flicker [44], TrustVisor [43], InkTag [33], and Minibox [41] protect security-sensitive data in an IEE constructed through the hypervisor. Overshadow [19] protects security-sensitive applications by presenting different memory views to the applications and the malicious OS. CloudVisor [57] uses a similar approach to protect virtual machines in cloud environments. NICKLE [49] achieves real-time integrity protection of kernel code. Intel Software Guard Extensions (SGX) [45] has also been used in many solutions to secure security-sensitive applications on Intel platforms [13, 20, 24, 53]. As discussed in Section 7, both hardware-assisted virtualization and SGX-based solutions are more secure against CITM attacks.

### Cache Manipulation Research

Researchers have explored how caches can be manipulated to develop various cache-based attacks. For example, cache-based side-channel attacks have been developed for both ARM [21, 32, 42, 60] and Intel [15, 30, 47, 51] platforms. CacheKit [58] can hide malicious code in the normal world and bypass detection in both the secure and normal worlds, as the values of cache in the two worlds can differ even if they map to the same physical address. Our focus is on attacking IEE systems through the incoherence between cache and main memory.

### Conclusions

ARM TrustZone extension has been widely adopted in IEE systems to construct a secure IEE in the normal world against malicious OS. However, existing IEE systems primarily focus on protecting memory, while the security of corresponding caches has not been well studied. In this paper, we first summarize the data protection measures enforced in IEE systems into two generic models. After a comprehensive investigation of cache features on ARM platforms, we identify three Cache-in-the-Middle (CITM) attacks that can compromise both data protection models. To illustrate how to exploit these attacks, we conduct three case studies on well-known IEE systems. By analyzing the primary reason for CITM attacks (i.e., incoherence between memory and cache), we propose a defense scheme to defeat them. Experimental results show that our defense system introduces only a small overhead.

### Acknowledgments

We thank the anonymous reviewers and our shepherd Fengwei Zhang for their insightful comments on improving our work. This work is partially supported by U.S. ONR grants N00014-16-1-3214 and N00014-18-2893, NSF CNS-1815650, the National Natural Science Foundation of China under GA No. 61802398, the National Science and Technology Major Project of China under GA No. 2018ZX03001-010, the National Cryptography Development Fund under Award No. MMJJ20180222 and MMJJ20170215.

### References

[3] ANTUTU. 2019. Aututu Benchmark. http://www.antutu.com/en/index.html.
[4] ARM. [n.d.]. ARM Security Technology Building a Secure System using TrustZone Technology. https://static.docs.arm.com/genc009492/c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf.
[5] ARM. 2014. ARM Architecture Reference Manual. https://static.docs.arm.com/ddi0406/c/DDI0406C_C_arm_architecture_reference_manual.pdf.
[6] ARM. 2015. ARM CoreLink TZC-400 TrustZone Address Space Controller. https://static.docs.arm.com/100325/0001/arm_corelink_tzc400_trustzone_address_space_controller_trm_100325_0001_02_en.pdf.
[7] ARM. 2016. ARM Cortex-A53 MPCore Processor Technical Reference Manual. https://developer.arm.com/docs/ddi0500/g.
[8] ARM. 2016. ARM Cortex-A9 Technical Reference Manual. http://infocenter.arm.com/help/topic/com.arm.doc.100511_0401_10_en/arm_cortexa9_trm_100511_0401_10_en.pdf.
[9] ARM. 2016. Juno r2 ARM Development Platform Technical Reference Manual. https://developer.arm.com/docs/ddi0515/f/juno-r2-arm-development-platform-soc-technical-reference-manual.
[10] ARM. 2017. ARM virtualization. https://developer.arm.com/docs/100942/0100/aarch64-virtualization.

[1] Tiago Alves and Don Felton. 2004. TrustZone: Integrated hardware and software security. ARM white paper 3, 4 (2004).
[2] Android. 2017. Trusty TEE | Android Open Source Project. https://source.android.com/security/trusty/.
[11] Ahmed M Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar, Guruprasad Ganesh, and Jia Ma. 2014. Hypervision across worlds: Real-time kernel protection from the ARM TrustZone secure world. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS), 2014.
[12] Ahmed M. Azab, Peng Ning, Zhi Wang, Xuxian Jiang, Xiaolan Zhang, and Nathan C. Skalsky. 2010. HyperSentry: enabling stealthy in-context measurement of hypervisor integrity. In ACM Conference on Computer and Communications Security. 38–49.
[13] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2015. Shielding applications from an untrusted cloud with Haven. ACM Transactions on Computer Systems (TOCS) 33, 3 (2015), 8.
[14] Ferdinand Brasser, David Gens, Patrick Jauernig, Ahmad-Reza Sadeghi, and Emmanuel Stapf. 2019. SANCTUARY: ARMing TrustZone with User-space Enclaves. In NDSS.
[15] Ferdinand Brasser, Urs Müller, Alexandra Dmitrienko, Kari Kostiainen, Srdjan Capkun, and Ahmad-Reza Sadeghi. 2017. Software grand exposure: SGX cache attacks are practical. In 11th USENIX Workshop on Offensive Technologies (WOOT 17).
[16] Robert Buhren, Julian Vetter, and Jan Nordholz. 2016. The threat of virtualization: Hypervisor-based rootkits on the ARM architecture. In International Conference on Information and Communications Security. Springer, 376–391.
[17] David Cerdeira, Nuno Santos, Pedro Fonseca, and Sandro Pinto. 2020. SoK: Understanding the Prevailing Security Vulnerabilities in TrustZone-assisted TEE Systems. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), San Francisco, CA, USA. 18–20.
[18] Rui Chang, Liehui Jiang, Wenzhi Chen, Yang Xiang, Yuxia Cheng, and Abdulhameed Alelaiwi. 2017. MIPE: a practical memory integrity protection method in a trusted execution environment. Cluster Computing 20, 2 (2017), 1075–1087.
[19] Xiaoxin Chen, Tal Garfinkel, E Christopher Lewis, Pratap Subrahmanyam, Carl A Waldspurger, Dan Boneh, Jeffrey Dwoskin, and Dan RK Ports. 2008. Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems. ACM SIGOPS Operating Systems Review 42, 2 (2008), 2–13.
[20] Yuxia Cheng, Qing Wu, Bei Wang, and Wenzhi Chen. 2017. Protecting In-memory Data Cache with Secure Enclaves in Untrusted Cloud. In proceedings of the International Symposium on Cyberspace Safety and Security.
[21] Haehyun Cho, Penghui Zhang, Donguk Kim, Jinbum Park, Choong-Hoon Lee, Ziming Zhao, Adam Doupé, and Gail-Joon Ahn. 2018. Prime+ count: Novel cross-world covert channels on ARM TrustZone. In Proceedings of the 34th Annual Computer Security Applications Conference. 441–452.
[22] Yeongpil Cho, Junbum Shin, Donghyun Kwon, MyungJoo Ham, Yuna Kim, and Yunheung Paek. 2016. Hardware-assisted on-demand hypervisor activation for efficient security critical code execution on mobile devices. In 2016 USENIX Annual Technical Conference (USENIX ATC 16). 565–578.
[23] Dawei Chu, Yuewu Wang, Lingguang Lei, Yanchu Li, Jiwu Jing, and Kun Sun. 2019. OCRAM-Assisted Sensitive Data Protection on ARM-Based Platform. In European Symposium on Research in Computer Security. Springer, 412–438.
[24] Victor Costan, Lia A Lebedev, and Srinivas Devadas. 2016. Sanctum: Minimal Hardware Extensions for Strong Software Isolation. In proceedings of the USENIX security symposium.
[25] ECG. 2019. Source code of Ginseng. http://download.recg.org.
[26] Samsung Electronics. 2013. Samsung KNOX. http://www.samsung.com/global/business/mobile/solution/security/samsung-knox.
[27] Andrew Ferraiuolo, Andrew Baumann, Chris Hawblitzel, and Bryan Parno. 2017. Komodo: Using verification to disentangle secure-enclave hardware from software. In Proceedings of the 26th Symposium on Operating Systems Principles. 287–305.
[28] Xinyang Ge, Hayawardh Vijayakumar, and Trent Jaeger. 2014. SPROBES: Enforcing kernel code integrity on the TrustZone architecture. In Proceedings of the 2014 Mobile Security Technologies (MoST) workshop.
[29] Google. 2012. QSEEComAPI.h. https://android.googlesource.com/platform/hardware/qcom/keymaster/+/master/QSEEComAPI.h.
[30] Johannes Götzfried, Moritz Eckert, Sebastian Schinzel, and Tilo Müller. 2017. Cache attacks on Intel SGX. In Proceedings of the 10th European Workshop on Systems Security. 1–6.
[31] Le Guan, Peng Liu, Xinyu Xing, Xinyang Ge, Shengzhi Zhang, Meng Yu, and Trent Jaeger. 2017. TrustShadow: Secure execution of unmodified applications with ARM TrustZone. In Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services. ACM, 488–501.
[32] Roberto Guanciale, Hamed Nemati, Christoph Baumann, and Mads Dam. 2016. Cache storage channels: Alias-driven attacks and verified countermeasures. In 2016 IEEE Symposium on Security and Privacy (SP). IEEE, 38–55.
[33] Owen S. Hofmann, Sangman Kim, Alan M. Dunn, Michael Z. Lee, and Emmett Witchel. 2013. InkTag: secure applications on an untrusted operating system. In ASPLOS. 265–278.
[34] Zhichao Hua, Jinyu Gu, Yubin Xia, Haibo Chen, Binyu Zang, and Haibing Guan. 2017. vTZ: Virtualizing ARM TrustZone. In Proceedings of the USENIX security symposium.
[35] Huawei. 2017. Huawei SecureOS. http://developer.huawei.com/cn/consumer/devunion/ui/server/SecureOS.html.
[36] Jinsoo Jang, Changho Choi, Jaehyuk Lee, Nohyun Kwak, Seongman Lee, Yeseul Choi, and Brent Byunghoon Kang. 2016. PrivateZone: Providing a private execution environment using ARM TrustZone. IEEE Transactions on Dependable and Secure Computing 15, 5 (2016), 797–810.
[37] Jinsoo Jang and Brent Byunghoon Kang. 2018. Retrofitting the partially privileged mode for TEE communication channel protection. IEEE Transactions on Dependable and Secure Computing (2018).
[38] Jinsoo Jang, Sunjune Kong, Minsu Kim, Daegyeong Kim, and Brent Byunghoon Kang. 2015. SeCReT: Secure Channel between Rich Execution Environment and Trusted Execution Environment. In Proceedings of the Network and Distributed System Security Symposium (NDSS).
[39] Donghyun Kwon, Jiwon Seo, Yeongpil Cho, Byoungyoung Lee, and Yunheung Paek. 2019. PrOS: Light-weight Privatized Secure OSes in ARM TrustZone. IEEE Transactions on Mobile Computing (2019).
[40] Wenhao Li, Yubin Xia, Long Lu, Haibo Chen, and Binyu Zang. 2019. TEEv: virtualizing trusted execution environments on mobile platforms. In Proceedings of the 15th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments. 2–16.
[41] Yanlin Li, Jonathan McCune, James Newsome, Adrian Perrig, Brandon Baker, and Will Drewry. 2014. Minibox: A two-way sandbox for x86 native code. In 2014 USENIX Annual Technical Conference (USENIX ATC 14). 409–420.
[42] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan Mangard. 2016. Armageddon: Cache attacks on mobile devices. In 25th USENIX Security Symposium (USENIX Security 16). 549–564.
[43] Jonathan M. McCune, Yanlin Li, Ning Qu, Zongwei Zhou, Anupam Datta, Virgil D. Gligor, and Adrian Perrig. 2010. TrustVisor: Efficient TCB Reduction and Attestation. In IEEE Symposium on Security and Privacy. 143–158.
[44] Jonathan M. McCune, Bryan Parno, Adrian Perrig, Michael K. Reiter, and Hiroshi Isozaki. 2008. Flicker: an execution infrastructure for TCB minimization. In EuroSys. 315–328.
[45] Frank McKeen, Ilya Alexandrovich, Alex Berenzon, Carlos V Rozas, Hisham Shafi, Vedvyas Shanbhogue, and Uday R Savagaonkar. 2013. Innovative instructions and software model for isolated execution. HASP@ ISCA 10 (2013).
[46] Saeed Mirzamohammadi and Ardalan Amiri Sani. 2018. The Case for a Virtualization-Based Trusted Execution Environment in Mobile Devices. In Proceedings of the 9th Asia-Pacific Workshop on Systems. 1–8.
[47] Ahmad Moghimi, Gorka Irazoqui, and Thomas Eisenbarth. 2017. CacheZoom: How SGX amplifies the power of cache attacks. In International Conference on Cryptographic Hardware and Embedded Systems. Springer, 69–90.
[48] OP-TEE. 2018. optee-os. https://github.com/OP-TEE.
[49] Ryan Riley, Xuxian Jiang, and Dongyan Xu. 2008. Guest-transparent prevention of kernel rootkits with VMM-based memory shadowing. In International Workshop on Recent Advances in Intrusion Detection. Springer, 1–20.
[50] Nuno Santos, Himanshu Raj, Stefan Saroiu, and Alec Wolman. 2014. Using ARM TrustZone to build a trusted language runtime for mobile applications. ACM SIGARCH Computer Architecture News 42, 1 (2014), 67–80.
[51] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2017. Malware guard extension: Using SGX to conceal cache attacks.