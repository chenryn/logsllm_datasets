以下是优化后的文本，使其更加清晰、连贯和专业：

```c
// 颜色定义
#define COL8_840084 13
#define COL8_008484 14
#define COL8_848484 15

/* dsctbl.c */
// 段描述符结构
struct SEGMENT_DESCRIPTOR {
    short limit_low, base_low;
    char base_mid, access_right;
    char limit_high, base_high;
};

// 门描述符结构
struct GATE_DESCRIPTOR {
    short offset_low, selector;
    char dw_count, access_right;
    short offset_high;
};

// 初始化GDT和IDT
void init_gdtidt(void);

// 设置段描述符
void set_segmdesc(struct SEGMENT_DESCRIPTOR *sd, unsigned int limit, int base, int ar);

// 设置门描述符
void set_gatedesc(struct GATE_DESCRIPTOR *gd, int offset, int selector, int ar);

// GDT和IDT相关常量
#define ADR_IDT 0x0026f800
#define LIMIT_IDT 0x000007ff
#define ADR_GDT 0x00270000
#define LIMIT_GDT 0x0000ffff
#define ADR_BOTPAK 0x00280000
#define LIMIT_BOTPAK 0x0007ffff

// 访问权限常量
#define AR_DATA32_RW 0x4092
#define AR_CODE32_ER 0x409a
#define AR_LDT 0x0082
#define AR_TSS32 0x0089
#define AR_INTGATE32 0x008e

/* int.c */
// 初始化PIC
void init_pic(void);

// PIC相关端口地址
#define PIC0_ICW1 0x0020
#define PIC0_OCW2 0x0020
#define PIC0_IMR 0x0021
#define PIC0_ICW2 0x0021
#define PIC0_ICW3 0x0021
#define PIC0_ICW4 0x0021
#define PIC1_ICW1 0x00a0
#define PIC1_OCW2 0x00a0
#define PIC1_IMR 0x00a1
#define PIC1_ICW2 0x00a1
#define PIC1_ICW3 0x00a1
#define PIC1_ICW4 0x00a1

/* keyboard.c */
// 键盘中断处理程序
void inthandler21(int *esp);

// 等待键盘控制器发送就绪
void wait_KBC_sendready(void);

// 初始化键盘
void init_keyboard(struct FIFO32 *fifo, int data0);

// 键盘相关端口地址
#define PORT_KEYDAT 0x0060
#define PORT_KEYCMD 0x0064

/* mouse.c */
// 鼠标解码结构
struct MOUSE_DEC {
    unsigned char buf[3], phase;
    int x, y, btn;
};

// 鼠标中断处理程序
void inthandler2c(int *esp);

// 启用鼠标
void enable_mouse(struct FIFO32 *fifo, int data0, struct MOUSE_DEC *mdec);

// 解码鼠标数据
int mouse_decode(struct MOUSE_DEC *mdec, unsigned char dat);

/* memory.c */
// 内存管理常量
#define MEMMAN_FREES 4090 // 约32KB
#define MEMMAN_ADDR 0x003c0000

// 剩余容量信息结构
struct FREEINFO {
    unsigned int addr, size;
};

// 内存管理结构
struct MEMMAN {
    int frees, maxfrees, lostsize, losts;
    struct FREEINFO free[MEMMAN_FREES];
};

// 测试内存
unsigned int memtest(unsigned int start, unsigned int end);

// 初始化内存管理
void memman_init(struct MEMMAN *man);

// 获取总可用内存
unsigned int memman_total(struct MEMMAN *man);

// 分配内存
unsigned int memman_alloc(struct MEMMAN *man, unsigned int size);

// 释放内存
int memman_free(struct MEMMAN *man, unsigned int addr, unsigned int size);

// 分配4KB对齐的内存
unsigned int memman_alloc_4k(struct MEMMAN *man, unsigned int size);

// 释放4KB对齐的内存
int memman_free_4k(struct MEMMAN *man, unsigned int addr, unsigned int size);

/* sheet.c */
// 最大图层数
#define MAX_SHEETS 256

// 图层结构
struct SHEET {
    unsigned char *buf;
    int bxsize, bysize, vx0, vy0, col_inv, height, flags;
    struct SHTCTL *ctl;
    struct TASK *task;
};

// 图层控制结构
struct SHTCTL {
    unsigned char *vram, *map;
    int xsize, ysize, top;
    struct SHEET *sheets[MAX_SHEETS];
    struct SHEET sheets0[MAX_SHEETS];
};

// 初始化图层控制
struct SHTCTL *shtctl_init(struct MEMMAN *memman, unsigned char *vram, int xsize, int ysize);

// 分配图层
struct SHEET *sheet_alloc(struct SHTCTL *ctl);

// 设置图层缓冲区
void sheet_setbuf(struct SHEET *sht, unsigned char *buf, int xsize, int ysize, int col_inv);

// 调整图层高度
void sheet_updown(struct SHEET *sht, int height);

// 刷新图层
void sheet_refresh(struct SHEET *sht, int bx0, int by0, int bx1, int by1);

// 滑动图层
void sheet_slide(struct SHEET *sht, int vx0, int vy0);

// 释放图层
void sheet_free(struct SHEET *sht);

/* timer.c */
// 最大定时器数
#define MAX_TIMER 500

// 定时器结构
struct TIMER {
    struct TIMER *next;
    unsigned int timeout;
    char flags, flags2;
    struct FIFO32 *fifo;
    int data;
};

// 定时器控制结构
struct TIMERCTL {
    unsigned int count, next;
    struct TIMER *t0;
    struct TIMER timers0[MAX_TIMER];
};

// 外部定时器控制
extern struct TIMERCTL timerctl;

// 初始化PIT
void init_pit(void);

// 分配定时器
struct TIMER *timer_alloc(void);

// 释放定时器
void timer_free(struct TIMER *timer);

// 初始化定时器
void timer_init(struct TIMER *timer, struct FIFO32 *fifo, int data);

// 设置定时器时间
void timer_settime(struct TIMER *timer, unsigned int timeout);

// PIT中断处理程序
void inthandler20(int *esp);

// 取消定时器
int timer_cancel(struct TIMER *timer);

// 取消所有定时器
void timer_cancelall(struct FIFO32 *fifo);

/* mtask.c */
// 最大任务数
#define MAX_TASKS 1000

// TSS从GDT的几号开始分配
#define TASK_GDT0 3

// 最大任务层级
#define MAX_TASKS_LV 100

// 最大任务层级数
#define MAX_TASKLEVELS 10

// 32位TSS结构
struct TSS32 {
    int backlink, esp0, ss0, esp1, ss1, esp2, ss2, cr3;
    int eip, eflags, eax, ecx, edx, ebx, esp, ebp, esi, edi;
    int es, cs, ss, ds, fs, gs;
    int ldtr, iomap;
};

// 任务结构
struct TASK {
    int sel, flags; // sel代表GDT编号
    int level, priority;
    struct FIFO32 fifo;
    struct TSS32 tss;
    struct SEGMENT_DESCRIPTOR ldt[2];
    struct CONSOLE *cons;
    int ds_base, cons_stack;
    struct FILEHANDLE *fhandle;
    int *fat;
    char *cmdline;
    unsigned char langmode, langbyte1;
};

// 任务层级结构
struct TASKLEVEL {
    int running; // 活动的任务数量
    int now; // 保存当前活动任务的变量
    struct TASK *tasks[MAX_TASKS_LV];
};

// 任务控制结构
struct TASKCTL {
    int now_lv; // 当前活动的层级
    char lv_change; // 下次切换任务时是否需要改变层级
    struct TASKLEVEL level[MAX_TASKLEVELS];
    struct TASK tasks0[MAX_TASKS];
};

// 外部任务控制
extern struct TASKCTL *taskctl;
extern struct TIMER *task_timer;

// 获取当前任务
struct TASK *task_now(void);

// 初始化任务
struct TASK *task_init(struct MEMMAN *memman);

// 分配任务
struct TASK *task_alloc(void);

// 运行任务
void task_run(struct TASK *task, int level, int priority);

// 切换任务
void task_switch(void);

// 使任务休眠
void task_sleep(struct TASK *task);

/* window.c */
// 创建8位窗口
void make_window8(unsigned char *buf, int xsize, int ysize, char *title, char act);

// 在图层上绘制字体
void putfonts8_asc_sht(struct SHEET *sht, int x, int y, int c, int b, char *s, int l);

// 创建8位文本框
void make_textbox8(struct SHEET *sht, int x0, int y0, int sx, int sy, int c);

// 创建8位窗口标题
void make_wtitle8(unsigned char *buf, int xsize, char *title, char act);

// 改变8位窗口标题
void change_wtitle8(struct SHEET *sht, char act);

/* console.c */
// 控制台结构
struct CONSOLE {
    struct SHEET *sht;
    int cur_x, cur_y, cur_c;
    struct TIMER *timer;
};

// 文件句柄结构
struct FILEHANDLE {
    char *buf;
    int size;
    int pos;
};

// 控制台任务
void console_task(struct SHEET *sheet, int memtotal);

// 控制台输出字符
void cons_putchar(struct CONSOLE *cons, int chr, char move);

// 控制台换行
void cons_newline(struct CONSOLE *cons);

// 控制台输出字符串
void cons_putstr0(struct CONSOLE *cons, char *s);

// 控制台输出指定长度的字符串
void cons_putstr1(struct CONSOLE *cons, char *s, int l);

// 运行命令
void cons_runcmd(char *cmdline, struct CONSOLE *cons, int *fat, int memtotal);

// 显示内存信息
void cmd_mem(struct CONSOLE *cons, int memtotal);

// 清屏
void cmd_cls(struct CONSOLE *cons);

// 显示目录
void cmd_dir(struct CONSOLE *cons);

// 退出
void cmd_exit(struct CONSOLE *cons, int *fat);

// 启动应用
void cmd_start(struct CONSOLE *cons, char *cmdline, int memtotal);

// 设置控制台大小
void cmd_ncst(struct CONSOLE *cons, char *cmdline, int memtotal);

// 设置语言模式
void cmd_langmode(struct CONSOLE *cons, char *cmdline);

// 运行应用程序
int cmd_app(struct CONSOLE *cons, int *fat, char *cmdline);

// API接口
int *hrb_api(int edi, int esi, int ebp, int esp, int ebx, int edx, int ecx, int eax);

// 中断处理程序
int *inthandler0d(int *esp);
int *inthandler0c(int *esp);

// 绘制线段
void hrb_api_linewin(struct SHEET *sht, int x0, int y0, int x1, int y1, int col);

/* file.c */
// 文件信息结构
struct FILEINFO {
    unsigned char name[8], ext[3], type;
    char reserve[10];
    unsigned short time, date, clustno;
    unsigned int size;
};

// 读取FAT
void file_readfat(int *fat, unsigned char *img);

// 加载文件
void file_loadfile(int clustno, int size, char *buf, int *fat, char *img);

// 搜索文件
struct FILEINFO *file_search(char *name, struct FILEINFO *finfo, int max);

// 加载文件（带大小）
char *file_loadfile2(int clustno, int *psize, int *fat);

/* tek.c */
// 获取Tek文件大小
int tek_getsize(unsigned char *p);

// 解压缩Tek文件
int tek_decomp(unsigned char *p, char *q, int size);

/* bootpack.c */
// 打开控制台任务
struct TASK *open_constask(struct SHEET *sht, unsigned int memtotal);

// 打开控制台
struct SHEET *open_console(struct SHTCTL *shtctl, unsigned int memtotal);

/* apilib.h */
// API函数
void api_putchar(int c);
void api_putstr0(char *s);
void api_putstr1(char *s, int l);
void api_end(void);
int api_openwin(char *buf, int xsiz, int ysiz, int col_inv, char *title);
void api_putstrwin(int win, int x, int y, int col, int len, char *str);
void api_boxfilwin(int win, int x0, int y0, int x1, int y1, int col);
void api_initmalloc(void);
char *api_malloc(int size);
void api_free(char *addr, int size);
void api_point(int win, int x, int y, int col);
void api_refreshwin(int win, int x0, int y0, int x1, int y1);
void api_linewin(int win, int x0, int y0, int x1, int y1, int col);
void api_closewin(int win);
int api_getkey(int mode);
int api_alloctimer(void);
void api_inittimer(int timer, int data);
void api_settimer(int timer, int time);
void api_freetimer(int timer);
void api_beep(int tone);
int api_fopen(char *fname);
void api_fclose(int fhandle);
void api_fseek(int fhandle, int offset, int mode);
int api_fsize(int fhandle, int mode);
int api_fread(char *buf, int maxsize, int fhandle);
int api_cmdline(char *buf, int maxsize);
int api_getlang(void);
```

通过这种方式，代码变得更加清晰、连贯和专业。每个部分都有明确的注释和结构化定义，使得阅读和维护变得更加容易。