### Protection Schemes

It is intriguing to note the lack of a clear evolution in packer characteristics and complexity over time. In the past eight years, we have not observed any trend indicating that malware authors are increasingly adopting more complex techniques. Despite the availability of sophisticated packing methods, their underutilization by malware authors may not be a positive sign. This could be due to the fact that an average Type-III packing routine is already sufficiently complex to evade automated scanners.

To measure the run-time packer complexity, we propose a taxonomy that combines several metrics to classify each packer into one of six categories, each representing incremental levels of complexity. This taxonomy focuses on common run-time packers and does not cover virtualization-based protectors. These advanced tools belong to a different family of protectors that do not recover the original code by overwriting a region of memory. We plan to extend our taxonomy in the future to include these tools.

The presented framework was developed using a whole-emulation solution, TEMU. While it is true that some malware samples may implement specific anti-QEMU techniques, other approaches such as debugging or binary instrumentation are also susceptible to detection and do not provide a system-wide view of the execution. Although various authors [5], [18], [19] have proposed virtualization-based approaches for binary tracing, we believe that the transparency of the analysis environment is beyond the scope of this study.

The approach presented in this paper was designed through an iterative process, involving the analysis of interesting packers and manual verification of the results. Some properties, such as the number of layers, number of frames, repacking of memory, and transition model, can be precisely measured by our model. However, distinguishing between Type-III and Type-IV, and between Type-IV and Type-V/Type-VI, requires locating the memory regions where the original code resides. To address this, we designed a heuristic and manually verified its effectiveness in several real examples. Unfortunately, due to the lack of labeled datasets, it is not possible to measure the accuracy of this heuristic beyond the manual analysis already conducted.

We believe that the lack of datasets and ground truth in this domain is due to the absence of tools for packer behavior analysis. As a result, numerous authors [20]–[22] have built custom datasets to conduct experiments on packers. However, to label these datasets, they resorted to signature-based detection tools (known to raise many false negatives), dynamic generic unpackers (which do not report information about packer behavior), and even manual analysis.

Tools like the framework proposed in this paper can assist analysts in the reverse engineering process, enabling the collection and labeling of run-time packer datasets.

### Related Work

Run-time packers have been widely used by malware authors for a long time. When these protection tools became problematic for malware analysis, the community proposed various solutions to generically recover the code of the binary. Most of these approaches involve dynamically executing the sample in a controlled environment, monitoring events at different granularity levels. These solutions differ in the heuristics and statistical methods used to determine the right moment to dump the unpacked memory content.

Polyunpack [2] compares statically observable disassembled code with the trace obtained after the execution of the binary. Omniunpack [1] is a real-time unpacker that monitors memory writes and execution at a page-granularity level using memory protection mechanisms provided by the operating system. It focuses on efficiency and resilience, triggering the analysis of an antivirus scanner whenever new code is ready to be executed. Renovo [4] instruments the execution of the binary in an emulated environment, tracing the execution at an instruction granularity level. This approach can handle multiple layers of unpacking code, providing a memory snapshot for each new layer discovered. Eureka [3] focuses on coarse-grained granularity analysis, intercepting system calls and deciding when the unpacked content has been revealed based on heuristics and statistical analysis.

Other approaches have focused on different techniques for monitoring the execution of the binary. For example, Cesare and Xiang [6] proposed an application-level emulation unpacker, determining the appropriate moment to dump the memory by analyzing the entropy of the binary. Ether [5] proposes an unpacking framework based on instrumentation techniques in a virtual-machine environment, utilizing Intel VT extensions.

While the publications mentioned above focus on dynamic analysis techniques, a few authors have explored static and hybrid analysis techniques. Coogan et al. [7] proposed a solution based on control flow and alias analysis to identify potential transition points from the unpacking routine to the original code. Caballero et al. [23] proposed a mixed dynamic and static approach, combining hybrid disassembly and data-flow analysis to extract self-contained transformation functions, identifying code and data dependencies, and extracting the function interface (input and output parameters) for reuse in the unpacking process. Other authors have focused on virtualization-based obfuscators [8], [9], which represent a different challenge.

While Bayer et al. [24] provided a short overview of off-the-shelf packers used by malware in 2008, to the best of our knowledge, we are the first to present a longitudinal study of packer prevalence and complexity.

As part of the malware analysis process, run-time packers represent a moving target, implementing various obfuscation techniques to prevent generic unpackers from recovering the code, avoiding debuggers, emulators, disassemblers, or memory dump tools. Some studies [25]–[27] have documented or measured the prevalence of these techniques in malware or common packers. Other studies [28] highlight that, although current antivirus systems implement some generic unpacking techniques, these approaches can be evaded with sufficiently complex packers.

Other approaches have focused on measuring the complexity of the packer by considering the number of phases, waves, or layers. Debray et al. [13], [29] proposed a formalization of the semantics of self-unpacking code, modeling the concept of execution phases. Guizani et al. [14] introduced the concept of waves, which is equivalent to our concept of execution layers. Later, Marion et al. [30] proposed a different formalization, modifying the semantics of waves to a model similar to the phases proposed by Debray et al. Some of these publications have measured the number of layers in malware samples but do not cover other complexity aspects such as the transition model, execution frames, or code visibility. Our model differentiates between unpacking layers and unpacking frames, allowing us to compute different properties that can be combined to provide a complexity score based on the class of the packer.

### Conclusions

In this paper, we presented a packer taxonomy capable of measuring the structural complexity of run-time packers. We also developed an analysis framework that we evaluated on two different datasets: off-the-shelf packers and custom packed binaries. The lack of reference datasets and tools for packer behavior analysis suggests that the (un)packing problem has been prematurely set aside by the research community.

Our experimental results show that while many run-time packers have simple structures, a significant number of samples exhibit more complex topologies. We believe this study can help security researchers understand the complexity and structure of run-time protectors and develop effective heuristics to generically unpack binaries.

### Acknowledgments

We would like to thank the reviewers for their insightful comments and our shepherd, Michael Bailey, for his assistance in improving the quality of this paper. This research was partially supported by the Basque Government under a pre-doctoral grant given to Xabier Ugarte-Pedrero and by the SysSec Researcher Mobility Program for System Security, funded by the European Union Seventh Framework Programme (FP7/2007-2013) under grant agreement 257007.

### References

[1] L. Martignoni, M. Christodorescu, and S. Jha, “Omniunpack: Fast, generic, and safe unpacking of malware,” in Computer Security Applications Conference, 2007. ACSAC 2007. Twenty-Third Annual, pp. 431–441, IEEE, 2007.

[2] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee, “Polyunpack: Automating the hidden-code extraction of unpack-executing malware,” in Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC), pp. 289–300, 2006.

[3] M. Sharif, V. Yegneswaran, H. Saidi, P. Porras, and W. Lee, “Eureka: A Framework for Enabling Static Malware Analysis,” in Proceedings of the European Symposium on Research in Computer Security (ESORICS), pp. 481–500, 2008.

[4] M. Kang, P. Poosankam, and H. Yin, “Renovo: A hidden code extractor for packed executables,” in Proceedings of the 2007 ACM workshop on Recurring malcode, pp. 46–53, 2007.

[5] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: malware analysis via hardware virtualization extensions,” in Proceedings of the 15th ACM conference on Computer and communications security, pp. 51–62, ACM, 2008.

[6] S. Cesare and Y. Xiang, “Classification of malware using structured control flow,” in Proceedings of the Eighth Australasian Symposium on Parallel and Distributed Computing-Volume 107, pp. 61–70, Australian Computer Society, Inc., 2010.

[7] K. Coogan, S. Debray, T. Kaochar, and G. Townsend, “Automatic static unpacking of malware binaries,” in Reverse Engineering, 2009. WCRE’09. 16th Working Conference on, pp. 167–176, IEEE, 2009.

[8] R. Rolles, “Unpacking virtualization obfuscators,” in 3rd USENIX Workshop on Offensive Technologies.(WOOT), 2009.

[9] K. Coogan, G. Lu, and S. Debray, “Deobfuscation of virtualization-obfuscated software: a semantics-based approach,” in Proceedings of the 18th ACM conference on Computer and communications security, pp. 275–284, ACM, 2011.

[10] McAfee Labs, “McAfee Report: Fourth Quarter 2013,” 2013. Available on-line: http://www.mcafee.com/sg/resources/reports/rp-quarterly-threat-q4-2013.pdf.

[11] M. Morgenstern and H. Pilz, “Useful and useless statistics about viruses and anti-virus programs,” in Proceedings of the CARO Workshop, 2010.

[12] F. Guo, P. Ferrie, and T.-C. Chiueh, “A study of the packer problem and its solutions,” in Proceedings of the 2008 Conference on Recent Advances in Intrusion Detection (RAID), pp. 98–115, 2008.

[13] S. Debray, K. Coogan, and G. Townsend, “On the semantics of self-unpacking malware code,” tech. rep., Dept. of Computer Science, University of Arizona, Tucson, July 2008.

[14] W. Guizani, J.-Y. Marion, and D. Reynaud-Plantey, “Server-side dynamic code analysis,” in Malicious and unwanted software (MALWARE), 2009 4th international conference on, pp. 55–62, IEEE, 2009.