### Additional Configuration

Unfortunately, this does not appear to be happening in practice. While manufacturers clearly need to improve their default settings, we also encourage administrators deploying proxies to test their configurations using sites such as Qualys SSL Labs' client test, https://howsmyssl.com, and https://badssl.com. To incentivize better software, servers could consider checking client configurations and rejecting insecure clients.

### VIII. Related Work

#### Fingerprinting TLS Handshakes

There has been limited rigorous study on TLS handshake fingerprinting, but several groups have suggested the idea. Ristić first described the approach in 2009 [52]. Later, in 2012, Majkowski implemented SSL fingerprinting in p0f [36]. In 2015, Husák et al. used client fingerprinting to broadly describe the types of HTTPS traffic on their institutional network [28], and in 2016, Brotherston showed how desktop applications could be identified by their Client Hello messages [9]. Concurrently with our work, Cisco demonstrated that malware uses different TLS parameters than browsers [3]. To the best of our knowledge, no groups have used this methodology to measure HTTPS interception. Our approach differs from previous works in that we look for inconsistencies between the HTTP and TLS layers rather than trying to passively identify handshakes seen on the wire.

#### Measuring HTTPS Interception

Several studies have measured the prevalence of TLS interception by deploying Flash-based measurements on popular websites or by purchasing ads. In early 2014, Huang et al. analyzed 3 million SSL connections to Facebook and found that 0.2% of connections were intercepted by various antivirus software, corporate content filters, and malware [27]. A year later, in 2015, O’Neill et al. deployed a Google AdWords campaign and observed 15.2 million connections, finding that 0.4% of TLS connections were intercepted—nearly double the number found by Facebook [46]. We find approximately an order of magnitude more interception at each of our three vantage points.

The discrepancies in our numbers compared to these previous studies are not immediately clear. It is possible that some of our numbers, particularly for Cloudflare, are overestimates due to abuse. However, the number of intercepted connections found in these prior studies is less than the number of connections with Blue Coat HTTP headers alone and less than half the number of connections that include proxy-related HTTP headers. There may be bias introduced by using Flash, which browsers are deprecating and is not available on many mobile devices. Additionally, Facebook may be blocked on certain corporate networks that have deployed TLS inspection, and some malware may block connections to ad providers to inject their own ads.

The methodologies also differ in other ways. Studying the certificates presented to clients provides a limited view of the security impacts of man-in-the-middle (MITM) attacks because the client cannot observe the security properties of the outgoing connection to the destination web server. However, since clients can access the certificate presented by the proxy, there is more data on the product that intercepted the connection.

#### Client Security

Several studies have investigated the security of specific TLS clients. Georgiev et al. analyzed the security of non-browser software that validates SSL certificates by installing TLS clients and validating their behavior [21]. They identified numerous vulnerabilities in TLS clients, including Amazon’s EC2 client, Amazon and PayPal’s SDKs, and other e-commerce products. They concluded that these vulnerabilities are the result of poorly designed cryptographic libraries.

de Carné de Carnavalet and Mannan demonstrated that many popular Windows antivirus applications perform TLS traffic inspection, which weakens connection security [12]. We extend this work by investigating additional products, showing that Mac connections have worse security than their Windows-based counterparts, and fingerprinting their connections. There have been repeated discussions about the theoretical dangers of network middleboxes that intercept TLS connections. Dormann details these potential risks and lists devices that perform interception [15], but to the best of our knowledge, no one has systematically characterized these devices. We build on this investigation, testing devices for vulnerabilities and fingerprinting their behavior.

#### Alternatives to Interception

Researchers have proposed both alternatives to TLS interception and TLS extensions to help middleboxes safely intercept connections. The HTTP/2.0 Explicit Trusted Proxy RFC [26] requires middleboxes to explicitly notify the client of interception. The proposed TLS Proxy Server Extension [38] extends this idea, requiring the proxy to indicate the interception and relay proxy-server session information back to the client, allowing the client to validate the server's identity and perform additional validation.

Naylor et al. introduced multi-context TLS (mcTLS) [44], an extended version of TLS that requires endpoints to explicitly specify permitted middleboxes to securely authenticate each hop and cryptographically control exactly what data middleboxes can access. Sherry et al. developed BlindBox, a cryptographic protocol that supports intrusion and data exfiltration detection through searchable encryption [54]. Lan et al. extended BlindBox with Embark, which further optimized keyword and prefix matching searchable encryption schemes [33].

### IX. Responsible Disclosure

In the course of analyzing corporate middleboxes and client-side security software, we uncovered a range of TLS implementation errors, many of which allow connections to be intercepted by a man-in-the-middle attacker. We disclosed these weaknesses to manufacturers in August 2016. Several manufacturers indicated that they deployed updates to protect against attacks after our testing but before disclosure. Others indicated plans to deprecate RC4 and move to modern cipher suites. In many cases, we received no response, and in other cases, we were unable to convince manufacturers that TLS vulnerabilities such as Logjam required patching. One company would not accept our vulnerability report without a product serial number, and several indicated that secure product configuration was a customer responsibility and that they would not be updating their default configuration. Figures 3 and 4 show scores prior to disclosure.

Several manufacturers asked that we note patched versions of their products. In May 2016, A10 introduced a configuration wizard that recommends a more secure set of cipher suites. Avast removed broken ciphers from their Mac product line in July 2016. Fortinet patched the Logjam vulnerability in version 5.4.1, released in September 2016. Qustodio patched in October 2016. Untangle indicated that issues had already been addressed at the time of disclosure.

### X. Conclusion

In this paper, we conducted the first comprehensive study on the security impact of HTTPS interception in the wild. We characterized the TLS handshakes produced by modern browsers, common security products, and malware, finding that products advertise varied TLS parameters. Building on this observation, we constructed a set of heuristics that allow web servers to detect HTTPS interception and identify popular interception products. We deployed these heuristics on three diverse networks: (1) Mozilla Firefox update servers, (2) a set of popular e-commerce sites, and (3) the Cloudflare content distribution network. In each case, we found more than an order of magnitude more interception than previously estimated, ranging from 4–11%. As a class, interception products drastically reduce connection security. Most concerningly, 62% of traffic that traverses a network middlebox has reduced security, and 58% of middlebox connections have severe vulnerabilities. We investigated popular antivirus and corporate proxies, finding that nearly all reduce connection security and that many introduce vulnerabilities (e.g., fail to validate certificates). While the security community has long known that security products intercept connections, we have largely ignored the issue, believing that only a small fraction of connections are affected. However, we find that interception has become startlingly widespread with worrying consequences. We hope that by bringing these issues to light, we can encourage manufacturers to improve their security profiles and prompt the security community to discuss alternatives to HTTPS interception.

### Acknowledgments

The authors thank Peter Bowen, Xavier de Carné de Carnavalet, Patrick Donahue, Alessandro Ghedini, Mohammad Mannan, Paul Pearce, Michal Purzynski, Ivan Ristić, Narseo Vallina Rodriguez, and Ryan Sleevi. This work was supported in part by the National Science Foundation under awards CNS-1505790, CNS-1518741, CNS-1345254, CNS-1409505, CNS-1518888, CNS-1530915, CNS-1237265, and CNS-1348077, by the Department of Energy under award DE-OE0000780, by the NSF Graduate Research Fellowship Program under grant DGE-1256260, by the Post-9/11 GI Bill, by a Google Ph.D. Fellowship, and by an Alfred P. Sloan Foundation Research Fellowship.

### References

[1] NetFilter SDK. http://netfiltersdk.com/.

[2] OpenSSL changelog. https://www.openssl.org/news/changelog.html.

[3] B. Anderson, S. Paul, and D. McGrew. Deciphering malware’s use of TLS (without decryption). arXiv preprint arXiv:1607.01639, 2016.

[4] R. Arora and N. Aggarwal. Browserstack. https://browserstack.com.

[5] R. Barnes. Deprecating non-secure HTTP. Mozilla Security Blog. https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/.

[6] R. Barnes. Man-in-the-middle interfering with increased security. Mozilla Security Blog. https://blog.mozilla.org/security/2016/01/06/man-in-the-middle-interfering-with-increased-security/.

[7] H. Böck. Software Privdog worse than Superfish. https://blog.hboeck.de/archives/865-Software-Privdog-worse-than-Superfish.html.

[8] H. Böck. Superfishy. https://github.com/hannob/superfishy.

[9] L. Brotherston. Stealthier attacks and smarter defending with TLS fingerprinting. DerbyCon 2015.

[10] E. Bursztein. Speeding up and strengthening HTTPS connections for Chrome on Android. https://security.googleblog.com/2014/04/speeding-up-and-strengthening-https.html.

[11] Chromium. IsSecureTLSCipherSuite function. chromium.googlesource.com/chromium/src/net/+/master/ssl/ssl_cipher_suite_names.cc#373.

[12] X. de Carné de Carnavalet and M. Mannan. Killed by proxy: Analyzing client-end TLS interception software. In Network and Distributed System Security Symposium, 2016.

[13] Dell. Information on the eDellRoot and DSDTestProvider certificates. http://www.dell.com/support/article/us/en/19/SLN300321.

[14] T. Dierks and E. Rescorla. Transport Layer Security (TLS) Protocol Version 1.2. RFC 5246.

[15] W. Dormann. The risks of SSL inspection. https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html.

[16] Z. Durumeric, D. Adrian, A. Mirian, M. Bailey, and J. A. Halderman. Tracking the FREAK attack. https://freakattack.com/.

[17] Z. Durumeric, D. Adrian, A. Mirian, J. Kasten, E. Bursztein, N. Lidzborski, K. Thomas, V. Eranti, M. Bailey, and J. A. Halderman. Neither snow nor rain nor MITM...: An empirical analysis of email delivery security. In ACM Internet Measurement Conference, 2015.

[18] P. Eckersley. How unique is your web browser? In Symposium on Privacy Enhancing Technologies, 2010.

[42] Mozilla. Network security services (NSS). https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS.

[43] Mozilla. Revoking intermediate certificates: Introducing OneCRL. https://blog.mozilla.org/security/2015/03/03/revoking-intermediate-certificates-introducing-onecrl/.

[44] D. Naylor, K. Schomp, M. Varvello, I. Leontiadis, J. Blackburn, D. R. López, K. Papagiannaki, P. Rodriguez Rodriguez, and P. Steenkiste. Multi-context TLS (mcTLS): Enabling secure in-network functionality in TLS. In ACM SIGCOMM Computer Communication Review, 2015.

[45] N. Nikiforakis, A. Kapravelos, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. Cookieless monster: Exploring the ecosystem of web-based device fingerprinting. In IEEE Symposium on Security and Privacy, 2013.

[46] M. O’Neill, S. Ruoti, K. Seamons, and D. Zappala. TLS proxies: Friend or foe? In ACM Internet Measurement Conference, 2016.

[47] OPSWAT. Antivirus and compromised device report: January 2015. https://www.opswat.com/resources/reports/antivirus-and-compromised-device-january-2015.

[48] T. Ormandy. Avast antivirus: X.509 error rendering command execution. https://bugs.chromium.org/p/project-zero/issues/detail?id=546&can=1&q=avast.

[49] V. Paxson. Bro: a system for detecting network intruders in real-time. In 7th USENIX Security Symposium, 1998.

[50] A. Popov. Prohibiting RC4 cipher suites. RFC 7465.

[51] B. Riordan-Butterworth. Adopting encryption: The need for HTTPS. http://www.iab.com/adopting-encryption-the-need-for-https/.

[52] I. Ristic. HTTP client fingerprinting using SSL handshake analysis. https://blog.ivanristic.com/2009/06/http-client-fingerprinting-using-ssl-handshake-analysis.html.

[53] R. Seggelmann, M. Tuexen, and M. Williams. Transport layer security (TLS) and datagram transport layer security (DTLS) heartbeat extension. RFC 6520.

[54] J. Sherry, C. Lan, R. A. Popa, and S. Ratnasamy. Blindbox: Deep packet inspection over encrypted traffic. In SIGCOMM Computer Communication Review, 2015.

[55] Statista. Mobile phone internet user penetration in South Korea from 2014 to 2019, 2016. http://www.statista.com/statistics/284204/south-korea-mobile-phone-internet-user-penetration/.

[56] Symantec. Trojan.Nurjax. https://www.symantec.com/security_response/writeup.jsp?docid=2014-121000-1027-99.

[57] U.S. Digital Analytics Program. The U.S. federal government’s web traffic. https://analytics.usa.gov/.

[58] F. Valsorda. Komodia/Superfish SSL validation is broken, February 2015. https://blog.filippo.io/komodia-superfish-ssl-validation-is-broken/.

[59] M. Vanhoef and F. Piessens. All your biases belong to us: Breaking RC4 in WPA-TKIP and TLS. In USENIX Security Symposium, 2015.

[60] N. Weaver, C. Kreibich, M. Dam, and V. Paxson. Here be web proxies. In International Conference on Passive and Active Network Measurement, 2014.

[61] T.-F. Yen, Y. Xie, F. Yu, R. P. Yu, and M. Abadi. Host fingerprinting and tracking on the web: Privacy and security implications. In Network and Distributed System Security Symposium, 2012.

[19] C. Evans, C. Palmer, and R. Sleevi. Public key pinning extension for HTTP. RFC 7469.

[20] S. Farrell and H. Tschofenig. Pervasive monitoring is an attack. RFC-7258, 2014.

[21] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and V. Shmatikov. The most dangerous code in the world: validating SSL certificates in non-browser software. In ACM Conference on Computer and Communications Security, 2012.

[22] Google. Certificate transparency in Chrome. https://www.certificate-transparency.org/certificate-transparency-in-chrome.

[23] Google. HTTPS as a ranking signal. https://webmasters.googleblog.com/2014/08/https-as-ranking-signal.html.

[24] Google Chromium. CRLSets. https://dev.chromium.org/Home/chromium-security/crlsets.

[25] J. Graham-Cumming. The two reasons to be an engineer at Cloudflare. https://blog.cloudflare.com/the-two-reasons-to-work-for-cloudflare/.

[26] H. W. Group. Explicit trusted proxy in HTTP/2.0, 2014. https://tools.ietf.org/html/draft-loreto-httpbis-trusted-proxy20-01.

[27] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson. Analyzing forged SSL certificates in the wild. In IEEE Symposium on Security and Privacy 2014.

[28] M. Husák, M. Cermák, T. Jirsík, and P. Celeda. Network-based HTTPS client identification using SSL/TLS fingerprinting, 2015.

[29] IANA. Transport layer security (TLS) extensions. http://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml.

[30] IANA. Transport layer security (TLS) parameters. http://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml.

[31] A. Kirk. Web proxies, user-agent strings, and malware detection. http://blog.talosintel.com/2012/11/web-proxies-user-agent-strings-and.html.

[32] Komodia. Redirector. http://www.komodia.com/products/komodia-redirector.

[33] C. Lan, J. Sherry, R. A. Popa, S. Ratnasamy, and Z. Liu. Embark: securely outsourcing middleboxes to the cloud. In USENIX Symposium on Networked Systems Design and Implementation, 2016.

[34] A. Langley. Public key pinning. https://www.imperialviolet.org/2011/05/04/pinning.html.

[35] P. Lepeska. Comments on explicit/trusted proxy. https://www.ietf.org/mail-archive/web/httpbisa/current/msg13124.html.

[36] M. Majkowski. SSL fingerprinting for p0f. https://idea.popcount.org/2012-06-17-ssl-fingerprinting-for-p0f/.

[37] D. McGrew. Comments on explicit/trusted proxy. https://www.ietf.org/mail-archive/web/tls/current/msg07815.html.

[38] D. McGrew, D. Wing, Y. Nir, and P. Gladstone. TLS proxy server extension, 2012. https://tools.ietf.org/html/draft-mcgrew-tls-proxy-server-01.

[39] Microsoft. Platform status. https://developer.microsoft.com/en-us/microsoft-edge/platform/status/publickeypinningextensionforhttp.

[40] K. Mowery, D. Bogenreif, S. Yilek, and H. Shacham. Fingerprinting information in JavaScript implementations. Web 2.0 Security & Privacy, 2011.

[41] Mozilla. Installing certificates into Firefox. https://wiki.mozilla.org/CA:AddRootToFirefox.