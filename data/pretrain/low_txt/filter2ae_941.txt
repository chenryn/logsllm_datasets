## 0x01 漏洞描述
- **漏洞成因**：类型混淆漏洞。在处理`displacedByCustomXml`属性时，Word未对`customXml`标签对象进行有效性验证。攻击者可以通过传入其他标签对象来触发类型混淆，进而实现任意内存写操作。因此，通过精心构造的标签对象及其属性值，可以实现远程代码执行（RCE）。
- **影响版本**：
  - Microsoft Word 2007 SP3
  - Office 2010 SP2
  - Word 2010 SP2
  - Word 2013 SP1
  - Word 2013 RT SP1
  - Word for Mac 2011
  - Office Compatibility Pack SP3
  - Word Automation Services on SharePoint Server 2010 SP2 & 2013 SP1
  - Office Web Apps Server 2010 SP2 & 2013 SP1

## 0x02 漏洞分析
### 样本信息及分析环境
- **MD5**: A69F778D1F511268019B1080F5E3B98B
- **操作系统版本**: Windows 7 SP1 (x86)
- **Word版本**: 2007
- **WWLIB.DLL版本**: 12.0.4518.1014

#### 0x02.1 类型混淆导致的任意地址写
通过`rtfobj`工具查看文档中的OLE对象，并手动提取第2号对象保存为RTF文档。使用Windbg附加到Word 2007并打开该文档，崩溃点如下：

将第0号和第2号对象提取出来保存为一个RTF文档，并设置断点`bp wwlib!DllGetClassObject+0x50e6 ".if(ecx=7c38bd50){}.else{gc}"`。

在执行`call wwlib!DllGetClassObject+0x50fe`前，查看栈中的参数。通过`rtfobj.py -s 2`将第2号对象保存为Word文档，并检查其`document.xml`文件，可以看到`smartTag`标签属性值与栈中参数的对应关系。

根据微软文档，`displacedByCustomXml`属性应指定替换标签为`customXml`。继续跟进分析，计算写入地址的公式为`[[Parameter 1]+0x8]*[Parameter 2]+[[Parameter 1]+0xC]+[Parameter 1]`。直接步过该函数，结果与公式一致。

查看`memcpy`传递的参数，向地址`0x7c38bd74`写入值`0xffffe696`，该值用于第二次计算目标地址。重新设置断点`bp wwlib!DllGetClassObject+0x50e6 ".if(ecx=7c38bd68){}.else{gc}"`，并在计算目标地址的函数中跟踪，发现`[[Parameter 1]+0xC]`为之前写入的值。第二次写入覆盖了MSVCR71.DLL虚函数表中的函数调用地址。第三次和第四次写入分别用于进一步计算和覆盖其他地址。

#### 0x02.2 劫持执行流
继续向下执行，崩溃点如下。重新载入RTF文档，在地址`0x7c376fc4`处设置断点。由上图可知，第二次内存写入覆盖了MSVCR71.DLL虚函数表中的函数调用地址，而第四次内存写入则覆盖了传递的参数。

将第1号对象加入后保存为RTF文档，重新载入分析，并在地址`0x7c376fc8`处设置断点。可以看到堆喷布局由第1号对象`\word\activeX`目录中的`activeX1.bin`完成。根据其布局，不断执行`ret`指令，直到`0x7c3651EB`处开始ROP链。执行`VirtualProtect`以绕过DEP保护，然后执行`activeX1.bin`内的Shellcode部分。

#### 0x02.3 `activeX1.bin` Shellcode
遍历当前进程中打开的文件句柄，查找符合特定大小条件的文件，并将其映射到内存中。通过文件头和特定标记判断是否为样本文件及Shellcode起始位置。将Shellcode复制到`VirtualAlloc`开辟的空间内，然后跳转到第二部分Shellcode执行。

#### 0x02.4 RTF Shellcode
解密后续Shellcode。根据ANY.RUN平台可见其后续行为（有兴趣的读者请自行下载样本分析）。

### 附注
正常情况下，Word在解析`customXml`标签时会分配新的内存空间，而在解析`smartTag`标签时则不会。借此可以控制目标写入地址。

## 0x03 Patchwork组织利用样本分析
### 0x03.1 RTF文档分析
- **MD5**: 2C22EA1CED258346351EAD09B1DC6074

查看OLE对象：
- 第0号对象用于加载`OTKLOADR.DLL`以引入`MSVCR71.DLL`绕过ASLR；
- 第1号对象用于完成堆喷及Shellcode布局；
- 第2号对象用于触发CVE-2015-1641漏洞，触发点位于`styles.xml`中。

载入RTF文档，并在地址`0x7c376fc8`处设置断点。执行ROP链后调用`VirtualProtect`更改内存属性，跳转到Shellcode。通过`jmp`+`call`+`pop`给传参，解密后续Shellcode。解密逻辑如下：开辟内存空间，复制加密Shellcode并解密。通过`call`指令为函数传递参数。

后续仍有数次解密Shellcode过程，不再一一列出。在`C:\Users\xxx\AppData\Roaming\Microsoft\Templates`目录下创建文件，并写入内容。之后在同一目录下创建`~$Normal.dat`并写入内容，该文件具有隐藏属性。在`HKEY_CURRENT_USER`下创建注册表项，设置注册表键值，并删除禁用项。后续将由`wscript.exe`执行`C:\Users\xxx\AppData\Roaming\Microsoft\Templates\Normal.domx`，该文件实际为VBE格式，可借由`scrdec18`工具解密。

### 0x03.2 `Normal.domx`分析
该文件本质为VBE格式，可通过`wscript.exe`正常加载。分析时需通过工具解密出VBS脚本。读取`~$Normal.dat`第一部分内容并解密，写入`%USERPROFILE%\AppData\Local\Microsoft\Windows\Temporary Internet Files\Content.Word\PLAs_NEW_ORBAT.doc`。该文档用于迷惑受害者。之后释放三个PE文件并设置隐藏属性。执行`MicroScMgmt.exe`并删除自身以及`~$Normal.dat`。

### 0x03.3 `MicroScMgmt.exe`分析
查看导入表，该文件为带有数字签名的白文件，用于加载恶意DLL——`jli.dll`。

### 0x03.4 `jli.dll`分析
- **MD5**: 051573B9173DE6886E0575F81778EA03

查看其导出函数，该文件带有无效签名。它与Patchwork组织之前使用的BADNEWS木马存在相似性，此处暂不展开分析。完整攻击链如下：

## 0x04 参阅链接
- [CVE-2015-1641 Word 利用样本分析](https://paper.seebug.org/351/)
- [Microsoft Docs——displacedByCustomXml](https://docs.microsoft.com/en-us/previous-versions/office/developer/office-2010/cc847826(v=office.14)?redirectedfrom=MSDN)
- [手把手教你如何构造Office漏洞EXP（第四期）](https://www.anquanke.com/post/id/85031)