### Contributions and Acknowledgments

**Contributors:**

- **Matthew McCullough** wrote the section on integrating Git with Jenkins in Chapter 5, "Setting Up Your Build Jobs."
- **Juven Xu**, a software engineer from China working for Sonatype, is an active member of the open-source community and a recognized Maven expert. He was responsible for the Chinese translation of "Maven: The Definitive Guide" and authored an original Chinese reference book on Maven. Juven is also currently working on the Chinese translation of this book. He contributed the section on IRC notifications in Chapter 8, "Notification."
- **Rene Groeschke** is a software engineer at Cassidian Systems (formerly EADS Deutschland GmbH) and an open-source enthusiast. A certified ScrumMaster with approximately 7 years of experience in several enterprise Java projects, Rene focuses on Agile methodologies like Continuous Integration and Test-Driven Development. He also lectures on Scrum-related topics at the University of Corporate Education in Friedrichshafen. Rene contributed the section on building projects with Gradle in Chapter 5, "Setting Up Your Build Jobs."

**The Review Team:**

The technical review process for this book was unique. Instead of having one or two technical reviewers read the entire book near the end of the writing process, a team of volunteers from the Jenkins community, including many key Jenkins developers, reviewed chapters as they were written. The review team included:

- Alan Harder
- Andrew Bayer
- Carlo Bonamico
- Chris Graham
- Eric Smalling
- Gregory Boissinot
- Harald Soevik
- Julien Simpson
- Juven Xu
- Kohsuke Kawaguchi
- Martijn Verberg
- Ross Rowe
- Tyler Ballance

**Book Sponsors:**

This book would not have been possible without the support of several organizations that assisted with and funded the book-writing process.

**8.1. Wakaleo Consulting**

Wakaleo Consulting, led by John Ferguson Smart, the author of this book and "Java Power Tools," provides consulting, training, and mentoring services in Agile Java Development and Testing Practices, Software Development Life Cycle optimization, and Agile Methodologies. They offer training and assistance in areas such as Continuous Integration, Build Automation, Test-Driven Development, Automated Web Testing, and Clean Code using open-source tools like Maven, Jenkins, Selenium 2, and Nexus. Wakaleo Consulting also conducts public and on-site training on Continuous Integration and Continuous Deployment, Build Automation, Clean Code practices, Test-Driven Development, and Behavior-Driven Development, including Certified Scrum Developer (CSD) courses.

**8.2. CloudBees**

CloudBees is a cloud company focused on servicing the complete develop-to-deploy lifecycle of Java web applications. It is also the world’s leading expert on the Jenkins/Hudson continuous integration tool. Led by Kohsuke Kawaguchi, the creator of Jenkins/Hudson, CloudBees offers Nectar, a supported and enhanced version of Jenkins available on-premise by subscription. Nectar provides a highly-tested, stable, and fully-supported version of Jenkins, including automatic scaling to VMWare virtual machines. CloudBees also makes Jenkins/Hudson available as part of its DEV@cloud build platform, allowing users to get started with Jenkins instantly and scale as needed. Once an application is ready, it can be deployed on CloudBees’s RUN@cloud Platform as a Service in just a few clicks.

**8.3. Odd-e**

Odd-e is an Asian-based company that builds products in innovative ways and helps others achieve the same. The team consists of experienced coaches and product developers who work according to the values of Scrum, Agile, Lean, and craftsmanship. Odd-e does not have an organizational hierarchy; instead, individuals self-organize and continuously improve their competence. The company provides training and follow-up coaching to help others collaboratively seek and develop better ways of working. Odd-e values learning and contribution over maximizing profit and is committed to supporting open-source development in Asia.

**9. Using Code Examples**

This book is published under the Creative Commons License and was written in DocBook using XmlMind. The book's source code is available on GitHub at http://www.github.org/wakaleo/jenkins-the-definitive-guide. The sample Jenkins projects used in this book are open-source and freely available online—see the book’s web page at http://www.wakaleo.com/books/jenkins-the-definitive-guide for more details.

You may use the code in this book in your programs and documentation without permission, except when reproducing a significant portion of the code. Attribution, while appreciated, is not required. An example of attribution is: “Jenkins: The Definitive Guide by John Ferguson Smart (O’Reilly). Copyright 2011 John Ferguson Smart, 978-1-449-30535-2.”

**10. Safari® Books Online**

Safari Books Online is an on-demand digital library that allows you to search over 7,500 technology and creative reference books and videos. With a subscription, you can read any page and watch any video from the library online, access new titles before they are available in print, and provide feedback for authors. O’Reilly Media has uploaded this book to the Safari Books Online service. To have full digital access to this book and others on similar topics, sign up for free at http://my.safaribooksonline.com.

**11. How to Contact Us**

For comments and questions about this book, contact the publisher:

O’Reilly Media, Inc.
1005 Gravenstein Highway North
Sebastopol, CA 95472
800-998-9938 (in the United States or Canada)
707-829-0515 (international or local)
707-829-0104 (fax)

You can find additional information, errata, and examples on the book’s web page at:
http://www.oreilly.com/catalog/9781449305352

To comment or ask technical questions about this book, send email to:
[Contact Email]

For more information about our books, courses, conferences, and news, visit our website at http://www.oreilly.com.

Follow us on social media:
- Facebook: http://facebook.com/oreilly
- Twitter: http://twitter.com/oreillymedia
- YouTube: http://www.youtube.com/oreillymedia

**12. Acknowledgments**

I would like to thank my wonderful wife, Chantal, and my boys, James and William, for their love, support, and tolerance. I am grateful to Mike Loukides and the entire O’Reilly team for their high standards of work. Special thanks to Kohsuke Kawaguchi for creating Jenkins and for his ongoing contributions. Thanks also to Francois Dechery, Sacha Labourey, Harpreet Singh, and the rest of the CloudBees team for their help and support.

I am also very grateful to those who contributed to the book: Evgeny Goldin, Matthew McCullough, Juven Xu, and Rene Groeschke. A great thanks goes out to the reviewers: Alan Harder, Andrew Bayer, Carlo Bonamico, Chris Graham, Eric Smalling, Gregory Boissinot, Harald Soevik, Julien Simpson, Juven Xu, Kohsuke Kawaguchi, Martijn Verberg, Ross Rowe, and Tyler Ballance.

Thank you to Andrew Bayer, Martijn Verburg, Matthew McCullough, Rob Purcell, Ray King, Andrew Walker, and many others whose discussions and feedback provided inspiration and ideas. Many other people have helped in various ways to make this book richer and more complete: Geoff and Alex Bullen, Pete Thomas, Gordon Weir, Jay Zimmerman, Tim O’Brien, Russ Miles, Richard Paul, Julien Simpson, John Stevenson, Michael Neale, Arnaud Héritier, and Manfred Moser.

Finally, a great thank you to the Hudson/Jenkins developer and user community for their ongoing encouragement and support.

**Chapter 1. Introducing Jenkins**

**1.1. Introduction**

Continuous Integration (CI) is a cornerstone of modern software development. It radically alters the way teams think about the development process, enabling incremental process improvements from a simple scheduled automated build to continuous delivery into production. A good CI infrastructure can streamline the development process, help detect and fix bugs faster, provide a useful project dashboard, and ultimately deliver more real business value to the end user. Every professional development team, regardless of size, should practice CI.

**1.2. Continuous Integration Fundamentals**

In the days of waterfall projects and Gantt charts, the Integration Phase was a challenging and time-consuming period. Continuous Integration was introduced to address these issues. In its simplest form, CI involves a tool that monitors the version control system for changes. Whenever a change is detected, the tool automatically compiles and tests the application, notifying developers if something goes wrong.

CI can do much more than this. It can monitor code quality and coverage metrics, help keep technical debt down, and act as a communication tool by publishing a clear picture of the current state of development efforts. By automating the deployment process, CI can simplify and accelerate delivery, allowing for the latest version of the application to be deployed either automatically or with a one-click process.

Continuous Integration is about reducing risk by providing faster feedback. It helps identify and fix integration and regression issues quickly, resulting in smoother, quicker delivery and fewer bugs. By providing better visibility, CI opens and facilitates communication channels between team members, encouraging collaborative problem solving and process improvement.

**1.3. Introducing Jenkins (née Hudson)**

Jenkins, originally called Hudson, is an open-source Continuous Integration tool written in Java. It is used by teams of all sizes for projects in various languages and technologies, including .NET, Ruby, Groovy, Grails, PHP, and Java.

Jenkins is easy to use, with a simple, intuitive, and visually appealing user interface. It is also extremely flexible and extensible, with hundreds of open-source plugins available. These plugins cover everything from version control systems, build tools, code quality metrics, build notifiers, and integration with external systems.

Jenkins's popularity is also due to its large and vibrant community, which is dynamic, reactive, and welcoming. The development pace is fast, with weekly releases featuring the latest features, bug fixes, and plugin updates. For users who prefer a less-hectic release pace, there is a Long-term Support (LTS) release line that lags behind the latest release for more stability and a slower rate of change.

**1.4. From Hudson to Jenkins—A Short History**

Jenkins was originally started as a hobby project by Kohsuke Kawaguchi in late 2004 while he was working at Sun. As Hudson evolved, it was adopted by more teams within Sun. By early 2008, Sun recognized the value of the tool and asked Kohsuke to work on Hudson full-time. By 2010, Hudson had become the leading Continuous Integration solution with a market share of over 70%.

In 2009, Oracle purchased Sun. Tensions arose between the Hudson developer community and Oracle, initially triggered by problems with the Java.net infrastructure and Oracle's claim to the Hudson trademark. These tensions reflected disagreements about the project's management. Oracle wanted a more controlled development process, while most core Hudson developers, led by Kohsuke, preferred the open, flexible, and fast-paced community-focused model.

In January 2011, the Hudson developer community voted to rename the project to Jenkins and migrated the code base to a new GitHub project. The vast majority of core and plugin developers followed Kohsuke to the Jenkins camp. At the time of writing, polls show that some 75% of Hudson users had switched to Jenkins, while 13% were still using Hudson, and another 12% were using both or in the process of migrating to Jenkins.

Despite the fork, Oracle and Sonatype (the company behind Maven and Nexus) continued to work on the Hudson code base, now hosted on GitHub.