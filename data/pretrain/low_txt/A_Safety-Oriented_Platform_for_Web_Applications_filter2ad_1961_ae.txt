### 5.1 Web Security Vulnerabilities

Web security vulnerabilities can exist in both client-side browsers and the web services with which they communicate. Scripting languages, such as JavaScript and VBScript, are a major source of these vulnerabilities. While individual flaws can be addressed, the underlying security framework of browser scripting is inherently unsafe [2], indicating that flaws arising from active content will remain an ongoing problem.

Java applet security has been extensively studied [8]. Java's current stack-based security model [33] is significantly stronger than its original model. However, Java applets have taken a secondary role to other forms of active content, such as Flash elements, ActiveX components, and JavaScript. Tahoma uses virtual machines (VMs) to provide a language-independent safe execution environment for browser instances. Even if a browser has security vulnerabilities, Tahoma contains those flaws within the VM sandbox.

Web services are also vulnerable to attacks, including buffer overruns, SQL injection, and faulty access control policies. Improving web service security is an active research topic [25, 13], but it is beyond the scope of this paper.

### 5.2 Sandboxes

Various approaches for containing code within sandboxes [21] have been explored, including OS system call interposition [6, 11], fine-grained capability-based systems [27], intra-process domains [7], and virtual machine monitors [4, 34] or hypervisors [19].

In addition to exploring mechanisms, researchers have investigated appropriate policies and usage models. MAPbox [1] defines a set of canonical application class labels (such as compiler, network client, or server) and appropriate sandboxes for them, relying on the user to classify programs according to these labels. WindowBox [3] provides users with durable, isolated Windows desktops, each associated with different roles or security levels (e.g., work, home, or play). Tahoma uses the Xen VMM to implement virtual machine sandboxes, each containing one web browser instance. No sharing is permitted between browser instances except through Tahoma’s narrow browser system call API.

GreenBorder [12] provides a sandboxed environment within Windows for Internet Explorer and Outlook applications. GreenBorder works by virtualizing access to Windows resources such as the file system or registry and redirecting modifications to virtualized copies. By allowing users to "flush" these changes, any harmful side-effects from malicious content can be cleaned. GreenBorder visually separates applications running within the sandbox from trusted applications and provides some degree of auditing and reporting. Tahoma also provides a sandboxed environment for web browsers, but Tahoma additionally isolates web applications from each other. Furthermore, Tahoma allows web services to customize the browsers used to access them and control which remote sites their browser instances can access.

### 5.3 Safely Executing Downloaded Applications

Tahoma shares the vision of making executable content available on the Internet for users to download and run safely. Jaeger et al. [15] describe a distributed system for authenticating and executing content from remote principals, providing a rich policy structure for assigning access rights to local resources. In contrast, Tahoma uses the shared-nothing abstraction of VMs to isolate downloaded browser instances from each other and from the host OS. Web browsers support the safe execution of Java applets [8]. Applets have similarities to Tahoma browser instances, though browser instances can be written in any language, as their execution environment is a hardware VM.

The Collective project [22] encapsulates collections of applications within VMware [29] virtual machines and ships these compute "appliances" over the network to users. Tahoma is similar in that browser instances are encapsulated within VMs and downloaded to users. However, Tahoma’s browser operating system mediates the access of browser instances to local host resources and remote web services.

SubOS assigns "sub-user IDs" to downloaded objects. Processes that access these objects inherit the restricted access rights of the associated sub-user IDs [14]. Using this mechanism, this project refactored a web browser so that isolation is delegated to SubOS rather than the browser itself. This work shares similar principles with Tahoma, though Tahoma uses stronger VM sandboxes, isolates browsers and web objects based on the web applications to which they belong, and provides a trusted window manager and other user tools.

### 5.4 Trust and User Interfaces

Untrusted executable content can attack users by spoofing the user interface of trusted executables, fooling the user into providing sensitive information. Researchers have explored the potential for web content to act as a trojan horse, spoofing local OS interfaces or remote services [31, 9]. Modern "phishing" attacks are an increasingly prevalent form of this attack.

The Compartmented Mode Workstation (CMW) specification [35] provides requirements for enforcing mandatory access control in a multi-level or compartmented security system and describes how to label data and windows with sensitivity labels. The trusted paths work by Ye et al. [36] attempts to label web browser windows in an unforgeable way by clearly separating graphical content provided by remote servers from status information provided by the local browser. To prevent remote servers from spoofing status information, the trusted paths architecture uses synchronized random dynamic boundaries, where the color of window borders is randomly shifted but synchronized with a reference window. The EROS [28] trusted window system (EWS) solves the complementary problem of denying untrusted applications the authority to disrupt trusted UI paths.

Tahoma uses many of the mechanisms and window labeling techniques from this body of work but adapts them to a virtual machine environment. Like EWS, Tahoma browser instances use shared memory to convey pixel information to the trusted BOS window manager. Tahoma’s windowing environment was also partially inspired by the Desktop Operating Environment Window Server (DoPE) [10].

### 6 Conclusions

Over the last decade, the Web has evolved from a repository of interconnected, static content to a delivery system for complex, distributed applications and active content. As a result, modern browsers now serve as de facto operating systems that must manage dynamic and potentially malicious applications. Unfortunately, browsers have not adapted to their new role, leaving users vulnerable to many potential threats.

This paper presented the architecture and implementation of Tahoma, a new web browsing system intended to improve safety and security for web users. In the Tahoma architecture, each web application is isolated within its own virtual machine sandbox, removing the need to trust web browsers and the services they access. Virtual machine sandboxes contain the damage that can be caused by malicious or vulnerable browsers, protecting other applications, resources, and the user’s host OS from these dangers.

We introduced a new trusted software layer in Tahoma, the Browser Operating System (BOS), which manages web applications and their virtual machine sandboxes. To limit damage from hijacked browsers, the BOS restricts the set of sites with which each web application can communicate. The BOS gives users increased visibility and control over downloaded web applications. We implemented Tahoma on the Xen virtual machine monitor. Our security evaluation shows that Tahoma can prevent or contain 87% of the vulnerabilities identified in the widely used Mozilla browser. Our performance evaluation demonstrates that users need not sacrifice performance for the benefits of stronger isolation and safety.

### 7 Acknowledgments

The authors are grateful for the insightful feedback provided by the anonymous reviewers and for helpful discussions with Brian Bershad, Ed Lazowska, and Andrew Schwerin. This work was supported in part by the National Science Foundation under grants CNS-0430477, CCR-0326546, and ANI-0132817, by an Alfred P. Sloan Foundation Fellowship, by the Wissner-Slivka Chair, by the Torode Family Endowed Career Development Professorship, and by gifts from Intel Corporation and Nortel Networks.