### DEF CON 19: Getting SSLizzard

**Presenters:**
- **Nicholas J. Percoco (c7five)**
  - Head of SpiderLabs at Trustwave
  - Started his InfoSec career in the 1990s
- **Paul Kehrer (reaperhulk)**
  - Lead SSL Developer at Trustwave
  - Enjoys baking cakes in his spare time

**Copyright:** Trustwave 2011

---

### Agenda
1. **Introductions**
2. **Primer / History: SSL and MITM Attacks**
3. **Mobile SSL User Experience**
4. **Research Motivations**
5. **Research Implications**
6. **Data Transmission Assault Course Components**
7. **Introducing SSLizzard**
8. **Mobile App Test Results**
9. **Conclusions**

---

### Introductions
**Who are we?**
- **Nicholas J. Percoco (c7five)**: Head of SpiderLabs at Trustwave, with a career in InfoSec starting in the 1990s.
- **Paul Kehrer (reaperhulk)**: Lead SSL Developer at Trustwave, who also enjoys baking cakes in his free time.

**What is this talk about?**
- The de-evolution of user security experience on mobile devices.
- A brief history and types of SSL attacks.
- The lack of testing tools for mobile applications.
- How various apps and devices perform under "SSL stress."
- Introduction to a new tool, SSLizzard, to address these issues.

---

### Primer / History: SSL and MITM Attacks
**What is SSL?**
- **Secure Sockets Layer (SSL)**: Developed by Netscape in 1994 and implemented in Netscape Navigator 1.0.
- A protocol for securing client-to-server data transmission.
- Uses asymmetric keys to establish a symmetric key during a "handshake" before data transmission.

**Where is SSL (certificates) used?**
- To establish secure client-to-server communication.
- For client identity (user authentication).
- Application signing.
- Log file integrity.

**How is SSL used in mobile devices?**
- To secure communication over public networks.
- To establish app-to-server communication.
- For app code signing (e.g., Android, iOS, BlackBerryOS).
- For mobile device management profiles (signed).

**What is a Man-in-the-Middle (MITM) Attack?**
- An attacker injects themselves between a client and server session.
- The attacker intercepts the client's request to the server.
- The attacker establishes a secure session with the server but an untrusted session with the client.
- The attacker can then view or modify data between the client and server.

**Tools for MITM Attacks:**
- **thicknet**: MITM framework developed by Steve Ocepek (SpiderLabs).
- **ettercap**: A suite for man-in-the-middle attacks on LAN.
- **arpspoof**: Facilitates ARP poisoning.
- **mitmproxy**: An SSL-capable, intercepting HTTP proxy.
- **sslstrip**: Relies on arpspoof to strip the SSL session and force the client to communicate via HTTP with the attacker.

**Why is true SSL MITM difficult?**
- SSL certificates have a "chain of trust."
- Attacking public Certificate Authorities (CAs) is not practical.
- Self-signed certificates throw client errors.
- Malformed certificates are difficult to generate.

---

### Mobile SSL User Experience
- **No Standard UI**: Most mobile apps do not provide a consistent or clear user interface for SSL.
- **Cryptic Warning Messages**: Users often receive confusing or cryptic messages.
- **User Awareness**: Many users do not understand the difference between secure and insecure connections.
- **Pop-up Credibility**: Users may not trust or recognize pop-up warnings.

---

### Research Motivations
- The browser community has spent decades refining SSL UI behavior.
- The mobile device market has undermined these efforts in just a few years.
- There are no established standards for mobile users to expect when their data is transmitted via SSL.
- Most apps ignore the UI aspect of security.
- There is no functional difference between an app that sends data in the clear versus encrypted.
- App developers need tools to test SSL behavior easily and consistently.

---

### Research Implications
- Attackers are increasingly focusing on mobile app weaknesses.
- If a popular app mishandles SSL, its users are more susceptible to:
  - Credential stealing.
  - Data interception.
  - Response manipulation.
- These attacks often go unnoticed due to:
  - Lack of user awareness of the risks.
  - Lack of UI cues within apps.

---

### Data Transmission Assault Course Components
**Building a Test Lab:**
- **Wireless Switch**: WRT-54GL running Tomato Firmware.
- **Attacker System**: Linux system connected via Ethernet to the switch, using ettercapNG-0.7.3 (with SpiderLabs patch).
- **Victim Clients**: Android (Nexus S – v2.3.4), iPod Touch 4th Gen (v4.3.3).

**Types of SSL Certificates Needed:**
1. Valid for the target domain (e.g., www.myapp.com).
2. Various malformed SSL certificates:
   - Null Prefix.
   - CRLF.
   - Self-Signed.
   - Signed by Parent Cert (set CA:FALSE).
   - Invalid ASN.1 structures (fuzzing).
   - Broken encodings.
3. A method to generate these certificates easily.

---

### Introducing SSLizzard
**About SSLizzard:**
- SSLizzard is an open-source toolkit to easily generate multiple types of invalid SSL certificates for any given domain.
- The output is used in various MITM frameworks to perform SSL attacks.
- Successfully tested with ettercap (see patch on DVD).
- A thicknet module is being developed by Steve Ocepek.
- Can be used against any OS, application, or browser.

**Usage:**
- **Command Line**: `ruby sslizzard.rb mydomain.com`
- Generates a key and a number of certificates with various invalid structures for testing.
- Output is written in the current working directory.

**Setting Up a Test:**
1. Execute SSLizzard to generate certificates.
2. Set up ettercap (patched) with the `-x` flag to specify the certificate type you want to test.
3. Use your app as normal and check for error messages.
4. If no errors occur, check ettercap to see if data was intercepted.
5. Repeat for each certificate type generated by SSLizzard to comprehensively test.

**Demo:**
- Generating a collection of certificates.
- Using the certificates in ettercap (with the SpiderLabs patch).
- Video of traffic interception.
- Video of victim devices throwing or not throwing errors.

---

### Mobile App Test Results
- **To be released at DEF CON 19**

---

### Conclusions
- Developers should use SSL for all data transmission.
- Consistent, simple UIs that users can understand are essential.
- Apps and devices should fail closed when there is a secure transmission problem.

**Trustwave’s SpiderLabs®**
- SpiderLabs is an elite team of ethical hackers at Trustwave, advancing the security capabilities of leading businesses and organizations worldwide.
- More Information:
  - Web: [https://www.trustwave.com/spiderlabs](https://www.trustwave.com/spiderlabs)
  - Blog: [http://blog.spiderlabs.com](http://blog.spiderlabs.com)
  - Twitter: [@SpiderLabs](https://twitter.com/SpiderLabs)

**Questions?**