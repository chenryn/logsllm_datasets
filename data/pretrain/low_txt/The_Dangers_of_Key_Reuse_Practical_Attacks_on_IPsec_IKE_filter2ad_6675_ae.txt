### TLS 1.2
In 2012, Mavrogiannopoulos et al. [26] described a cross-protocol attack that targets all TLS versions using explicit elliptic curve Diffie-Hellman parameters. Additionally, Jager et al. [20] demonstrated how to exploit a Bleichenbacher oracle in certain implementations of previous TLS versions to attack TLS 1.3 and QUIC.

### Conclusion
In this paper, we have demonstrated that all versions and variants of the IPsec's Internet Key Exchange (IKE) protocol can be compromised given two entry points.

#### First Entry Point: Weak Pre-Shared Keys (PSKs)
Offline dictionary attacks are feasible against all three different IKE variants, with two distinct adversaries:
- **IKEv1 PSK in Aggressive Mode**: Can be broken by a passive adversary.
- **IKEv1 PSK in Main Mode and IKEv2 PSK**: Can be broken by an active adversary who acts as a responder.

#### Second Entry Point: Bleichenbacher Oracles in IKEv1 PKE and RPKE Variants
We have identified the presence of such oracles in devices from Cisco, Clavister, Huawei, and ZyXEL, and we have quantified their strength. Given an oracle of this strength, we were able to show that, under the attack restrictions imposed by Cisco’s default values, we could successfully attack all public key-based variants of IKEv1 and IKEv2 with success probabilities ranging from 7% to 26% in a single attempt. By repeating the attacks, all implementations can be compromised. This work focuses on IKE implementations, but if network devices reuse RSA key pairs for other services like SSH and TLS, additional attack surfaces may arise.

### Countermeasures
To mitigate these attacks, both entry points must be addressed:
- **High Entropy PSKs**: Only high-entropy PSKs should be used.
- **Deactivation of PKE and RPKE Modes**: Both PKE and RPKE modes should be deactivated in all IKE devices.
- **Key Separation**: It is insufficient to configure key separation only on the sender side. All receivers must also be informed about this key separation, necessitating novel solutions to achieve this task.

### Acknowledgments
The authors wish to thank Juraj Somorovsky and Tibor Jager for their extensive discussions on Bleichenbacher attacks. We also extend our gratitude to Cisco for providing us with test hardware for our experiments. This paper is based in part on work from the research projects SyncEnc and VERTRAG, funded by the German Federal Ministry of Education and Research (BMBF, FKZ: 16KIS0412K and 13N13097), as well as the FutureTrust project, funded by the European Commission (grant 700542-Future-Trust-H2020-DS-2015-1).

### Notes
1. RFC 2409 refers to these keys as SKEYID, SKEYIDd, SKEYIDa, and SKEYIDe. For brevity, we use shortened names.
2. RFC 2409 calls these values HASH. However, in practice, the HMAC version of the negotiated hash algorithm is used as the PRF. Therefore, we refer to it as MAC.

### References
[1] Automotive Network Exchange. http://www.anx.com/
[2] European Network Exchange. http://www.enx.com/
[3] Japanese Network Exchange. https://www.jnx.ne.jp/
[4] 3RD GENERATION PARTNERSHIP PROJECT (3GPP). 2018. 3GPP System Architecture Evolution (SAE); Security architecture. 3GPP TS 33.401 V15.3.0. http://www.3gpp.org/ftp/specs/archive/33_series/33.401/33401-f30.zip.
[5] ADRIAN, D., BHARGAVAN, K., DURUMERIC, Z., GAUDRY, P., GREEN, M., HALDERMAN, J. A., HENINGER, N., SPRINGALL, D., THOMÉ, E., VALENTA, L., VANDERSLOOT, B., WUSTROW, E., ZANELLA-BÉGUÉLIN, S., AND ZIMMERMANN, P. 2015. Imperfect forward secrecy: How Diffie-Hellman fails in practice. In ACM CCS 15: 22nd Conference on Computer and Communications Security.
[6] AVIRAM, N., SCHINZEL, S., SOMOROVSKY, J., HENINGER, N., DANKEL, M., STEUBE, J., VALENTA, L., ADRIAN, D., HALDERMAN, J. A., DUKHOVNI, V., KÄSPER, E., COHNEY, S., ENGELS, S., PAAR, C., AND SHAVITT, Y. 2016. DROWN: Breaking TLS with SSLv2. In 25th USENIX Security Symposium (USENIX Security 16).
[7] BARDOU, R., FOCARDI, R., KAWAMOTO, Y., SIMIONATO, L., STEEL, G., AND TSAY, J.-K. 2012. Efficient padding oracle attacks on cryptographic hardware. In Advances in Cryptology–CRYPTO 2012.
[8] BIONDI, P. Scapy. http://www.secdev.org/projects/scapy/
[9] BLEICHENBACHER, D. 1998. Chosen ciphertext attacks against protocols based on the RSA encryption standard PKCS #1. In Advances in Cryptology — CRYPTO '98.
[10] BÖCK, H., SOMOROVSKY, J., AND YOUNG, C. 2017. Return Of Bleichenbacher’s Oracle Threat (ROBOT). In 27th USENIX Security Symposium (USENIX Security 18).
[11] CHECKOWAY, S., MASKIEWICZ, J., GARMAN, C., FRIED, J., COHNEY, S., GREEN, M., HENINGER, N., WEINMANN, R.-P., RESCORLA, E., AND SHACHAM, H. 2016. A systematic analysis of the Juniper Dual EC incident. In ACM CCS 16: 23rd Conference on Computer and Communications Security.
[12] CISCO SYSTEMS INC. 2017a. Cisco security command reference. https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/security/a1/sec-a1-cr-book/sec-cr-c4.html#wp1444104032.
[13] CISCO SYSTEMS INC. 2017b. Configuring Internet Key Exchange for IPSec VPNs - RSA Encrypted Nonces. https://www.cisco.com/en/US/docs/ios-xml/ios/sec_conn_ikevpn/configuration/15-2mt/sec-key-exch-ipsec.html#GUID-5257C56A-122F-47F6-8BC5-3E462C946879.
[14] DEGABRIELE, J. P. AND PATERSON, K. G. 2007. Attacking the IPsec standards in encryption-only configurations. In 2007 IEEE Symposium on Security and Privacy.
[15] DEGABRIELE, J. P. AND PATERSON, K. G. 2010. On the (In)Security of IPsec in MAC-then-encrypt configurations. In ACM CCS 10: 17th Conference on Computer and Communications Security.
[16] HARKINS, D. AND CARREL, D. 1998. The Internet Key Exchange (IKE). RFC 2409 (Proposed Standard). Obsoleted by RFC 4306, updated by RFC 4109.
[18] HUAWEI TECHNOLOGIES CO., LTD. 2017. Authentication methods IKEv1 USG2100/2200/5100 BSR&HSR V300R001. http://support.huawei.com/enterprise/pages/doc/subfile/docDetail.jsp?contentId=DOC1000010065&partNo=100172#authentication-method_ike_pro. USG2000/5000 &.
[19] JAGER, T., PATERSON, K. G., AND SOMOROVSKY, J. 2013. One bad apple: Backwards compatibility attacks on state-of-the-art cryptography. In ISOC Network and Distributed System Security Symposium – NDSS 2013.
[20] JAGER, T., SCHWENK, J., AND SOMOROVSKY, J. 2015. On the security of TLS 1.3 and QUIC against weaknesses in PKCS #1 v1.5 encryption. In ACM CCS 15: 22nd Conference on Computer and Communications Security.
[21] KALISKI, B. 1998. PKCS #1: RSA Encryption Version 1.5. RFC 2313 (Informational). Obsoleted by RFC 2437.
[22] KAUFMAN, C. 2005. Internet Key Exchange (IKEv2) Protocol. RFC 4306 (Proposed Standard). Obsoleted by RFC 5996, updated by RFC 5282.
[23] KAUFMAN, C., HOFFMAN, P., NIR, Y., AND ERONEN, P. 2010. Internet Key Exchange Protocol Version 2 (IKEv2). RFC 5996 (Proposed Standard). Obsoleted by RFC 7296, updated by RFCs 5998, 6989.
[24] KAUFMAN, C., HOFFMAN, P., NIR, Y., ERONEN, P., AND KIVINEN, T. 2014. Internet Key Exchange Protocol Version 2 (IKEv2). RFC 7296 (INTERNET STANDARD). Updated by RFCs 7427, 7670.
[25] KIVINEN, T. AND SNYDER, J. 2015. Signature Authentication in the Internet Key Exchange Version 2 (IKEv2). RFC 7427 (Proposed Standard).
[26] MAVROGIANNOPOULOS, N., VERCAUTEREN, F., VELICHKOV, V., AND PRENEEL, B. 2012. A cross-protocol attack on the TLS protocol. In ACM CCS 12: 19th Conference on Computer and Communications Security.
[27] MEYER, C., SOMOROVSKY, J., WEISS, E., SCHWENK, J., SCHINZEL, S., AND TEWS, E. 2014. Revisiting SSL/TLS Implementations: New Bleichenbacher Side Channels and Attacks. In 23rd USENIX Security Symposium (USENIX Security 14).
[17] HORST, M., GROTHE, M., JAGER, T., AND SCHWENK, J. 2016. Breaking PPTP VPNs via RADIUS Encryption. In CANS 16: 15th International Conference on Cryptology and Network Security.
[28] PATERSON, K. G. AND YAU, A. K. 2006. Cryptography in theory and practice: The case of encryption in IPsec. In Advances in Cryptology – EUROCRYPT 2006.
[29] SOMOROVSKY, J. 2016. Systematic fuzzing and testing of TLS libraries. In ACM CCS 16: 23rd Conference on Computer and Communications Security.

### Appendix A: IKEv1 with Signature Authentication
Figure 14: PKCS #1 v1.5 padding for RSA public key encryption

The IKEv1 and IKEv2 signature authentication modes are similar and both are targets of our signature forgery attack. Supplementary to the description of the IKEv2 variant (cf. Figure 6), here we present the IKEv1 signature authentication mode in detail. Figure 13 shows the message flow for this mode.

1. The initiator creates a set of proposals consisting of algorithms, key lengths, and additional parameters and sends it with his initiator cookie to the responder.
2. The responder selects a proposal based on his configured policies.
3. The initiator and responder exchange DHKE parameters and nonces.
4. Both peers are now able to derive all symmetric keys.
5. To confirm the keys and authenticate against each other, a MAC is computed by each party using key k from the key derivation.
6. Subsequently, two signatures are generated by the peers: one over MACI and one over MACR.
7. After both peers exchange their signatures and optionally the corresponding certificates, they validate the signatures and continue with Phase 2 only if the signatures are valid.

### Appendix B: PKCS#1 Padding
In the following, a||b denotes the concatenation of strings a and b. a[i] references the i-th byte in a. (cid:96)a is the byte-length of string a.

(N, e) denotes an RSA public key, where N is the public modulus and e is the public exponent. The corresponding secret exponent is d = 1/e mod φ(N).

The PKCS #1 v1.5 encryption padding scheme [21] randomizes encryptions by requiring the encoding shown in Figure 14. To encrypt a plaintext message n (here, a nonce), the following steps must be performed:

1. The encrypter generates a random byte string P of length (cid:96)P = (cid:96)N − (cid:96)n − 3. P must not contain 0x00 bytes (i.e., P[i] ≠ 0x00 ∀i ∈ [1...(cid:96)P]). Furthermore, P must be at least eight bytes long ((cid:96)P ≥ 8).
2. The message with padding before encryption is m = 0x00|| 0x02||P|| 0x00||n.
3. The ciphertext is computed as c = me mod N.

To decrypt such a ciphertext, the naive decrypter performs the following steps:

1. Compute m = cd mod N.
2. Check if m[1]||m[2] = 0x00|| 0x02. Reject the ciphertext otherwise.
3. Check if m[i] ≠ 0x00 ∀i ∈ [3...10]. Reject the ciphertext otherwise.
4. Search for the first i > 10 such that m[i] = 0x00. Reject the ciphertext if no i is found.
5. Recover the message n = m[i + 1]|| ...||m[(cid:96)N].

However, if the attackers learn whether the decrypter rejects messages due to the checks performed in steps 2–4, the decrypter is susceptible to Bleichenbacher’s attack.

### Appendix C: Key Types of Cisco IOS
Our key reuse attack assumes that the same RSA key pairs are used for encryption and signatures. When generating RSA key pairs, Cisco IOS gives the administrator a choice: The default is to create general-keys, which generates a single key pair for all authentication methods, making them vulnerable to our attacks. The other option is to create usage-keys, through which two RSA special-usage key pairs – one for encryption and one for signatures – are generated. In their documentation [12], Cisco states the following:

"If you plan to have both types of RSA authentication methods in your IKE policies, you may prefer to generate special-usage keys. With special-usage keys, each key is not unnecessarily exposed. (Without special-usage keys, one key is used for both authentication methods, increasing the exposure of that key.)"

We have not evaluated whether special-usage keys are a working countermeasure against our key reuse attack.