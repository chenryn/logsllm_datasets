### The WF2Q Regulator Technique and Work-Conservation

The Weighted Fair Queuing (WF2Q) regulator technique can be modified to become work-conserving. A simple extension would allow non-eligible packets to be scheduled to an idle server if no other eligible packets are queued in the system. However, this modified version of WF2Q does not maintain the simple extension of the bound on \(\bar{W}_i(0, \tau) - W_i(0, \tau)\) from \(L_{i,\text{max}}\) in a single-server case (as proven in [5]) to \(N L_{i,\text{max}}\) in a multi-server case.

#### Example with Two Flows and Ten Output Servers

Consider an example where two flows share ten output servers. The first flow has a weight of 0.9, while the second flow has a weight of 0.1. The maximum packet length \(L_{2,\text{max}}\) for the second flow is 1. All packets of the second flow arrive at time 0, each with a length of \(L_{2,\text{max}}\). The first packet of the first flow arrives at time 0 with a length of 100. The arrival rate of the first flow is \(0.9 N r\). Therefore, the second packet of the second flow arrives at time \(\frac{100}{0.9}\).

At time 0, the first packets of both flows are eligible and are scheduled. Since there are 8 idle servers and no other eligible packets, to keep the system work-conserving, the non-eligible packets in the system are scheduled in the order of their GPS finishing times. Until the second packet of the first flow arrives, 99 packets of the second flow are scheduled. At this time, \(\bar{W}_2(0, \frac{100}{0.9}) - W_2(0, \frac{100}{0.9})\) is approximately 88.8, which is not equal to \(N L_{2,\text{max}} = 10\).

### 6.1 MSF2Q: A New Multi-Server Fair Queuing Discipline

Our goal is to devise a packetized service discipline for multi-server systems that provides bounded fairness and generates "smooth" schedules. To this end, we introduce a new discipline, referred to as (M SF2Q, N, r) or simply MSF2Q.

A packet is considered outstanding if it is being transmitted or picked for transmission by the packetized system. Let \(\hat{o}_i(t)\) denote the number of outstanding flow i packets at the MSF2Q system at time \(t\). We denote the work completed for flow i under MSF2Q over the interval \([\tau, t]\) by \(\hat{W}_i(\tau, t)\).

At time \(t\), when a server is idle and there is a packet waiting for service, MSF2Q schedules among the flows that satisfy \(\hat{W}_i(0, t) < W_i(0, t)\) or (\(\hat{W}_i(0, t) = W_i(0, t)\) and \(\hat{o}_i < \lfloor r_i(t) \rfloor\)) the packet that would complete service in the GPS system earliest.

MSF2Q reduces to WF2Q if the number of servers is one. Figure 9 depicts the output of MSF2Q in the previous scenario of Example 3. It can be seen that the resulting service is the closest achievable to the ideal discipline.

### 6.2 Properties of MSF2Q

The following theorem proves the bound for the extra amount of service a flow can receive at any time \(\tau\) under MSF2Q compared to GPS.

**Theorem 4:** Let \(L_{i,\text{max}}\) denote the maximum packet length of flow i. For any time \(\tau\) and flow i, the following property holds:
\[
\hat{W}_i(0, \tau) - W_i(0, \tau) \leq N L_{i,\text{max}}
\]
**Proof:** When there are no packets of flow i in transmission under MSF2Q, the difference \(\hat{W}_i(0, \tau) - W_i(0, \tau)\) is non-increasing. Thus, it is sufficient to show that for any i, during the transmission (including completion) of a flow i packet under MSF2Q, \(\hat{W}_i(0, \tau) - W_i(0, \tau) \leq N L_{i,\text{max}}\).

At any time \(t\) when MSF2Q picks the next flow i packet \(p_n\) for transmission, the condition \((\hat{W}_i(0, t) < W_i(0, t))\) or \((\hat{W}_i(0, t) = W_i(0, t) \text{ and } \hat{o}_i < \lfloor r_i(t) \rfloor)\) holds for flow i.

Since this condition holds for flow i and at most \(N - 1\) other flow i packets may be in transmission at \(t\), \(\hat{W}_i\) may exceed \(W_i\) by at most \(N L_{i,\text{max}}\). \(\blacksquare\)

The bound on \(W_i(t, \tau) - \hat{W}_i(t, \tau)\) follows from combining the above theorem with the bound on cumulative per-flow service. We do not present the bounds on the packet delay and cumulative per-flow service for MSF2Q in this paper, which can be calculated similarly to those of MSFQ. It is worth noting that MSF2Q is not work-conserving either. Investigating the implications of work-conserving schedulers for multi-server systems on fairness bounds is part of our future work.

### 7. Applications

There are numerous existing system architectures that closely follow the multi-server model described in this paper. These systems can benefit from multi-server fair queuing disciplines to provide Quality of Service (QoS) guarantees on the access of their resources. We briefly discuss some of these application areas and describe how the multi-server model can be applied.

#### Link Aggregation

Link Aggregation is probably the most apparent example in the networking area. Ethernet link aggregation is a technique that allows the logical grouping of several network interfaces to improve scalability and fault-tolerance. This technique is becoming increasingly popular as it provides a cost-effective and fault-tolerant solution for incrementally scaling the network I/O capacity of high-end switches and servers. Many IEEE 802.3ad [13] standard and vendor-specific implementations are currently available [16, 14, 1, 2, 12]. The number of aggregated links on existing systems varies among vendors and ranges from two to eight Fast/Gigabit Ethernet ports in either servers or switching elements. Although all available implementations utilize load balancing techniques such as round-robin or static parameter hashing, none of these systems provide QoS guarantees over aggregated links.

Algorithms such as MSF2Q can also be implemented to provide QoS guarantees in the access of storage I/O. For midrange and high-end storage systems, it is common to connect the RAID system to a host (e.g., Web server) with multiple SCSI or FC channels to improve I/O performance. Several storage vendors (e.g., EMC) offer multi-path I/O software for load balancing and failover among the channels. The need for fairness and service guarantees for storage I/O is growing with the consolidation of clients' data and applications in service providers' data centers. Since storage I/O traffic can be modeled as variable-size packets, MSF2Q-type algorithms can be used to provide fair sharing of multiple I/O channels.

When distributing traffic across multiple links, as in the previous examples, the order in which the packets are received at the destination may differ from the order in which they were originally sent. Potential out-of-order delivery does not affect all applications but may lower the expected end-to-end performance, for example, of TCP connections, since out-of-order reception of TCP packets may cause unnecessary retransmissions. Since current systems contain only a few links but handle a large number of flows, out-of-order delivery due to multiple paths is not expected to be common. It is also important to note that this misordering is an inherent problem of balancing load among multiple outgoing links and its impact should be studied.

### 8. Related Work

Our work builds on several previous studies of GPS-based scheduling disciplines for single-server systems. The concepts of Proportional Sharing and Generalized Processor Sharing are presented in [8], [11], and [15]. Demers et al. introduced a packetized service disciplineâ€”WFQ in [8]. Later, Parekh and Gallager proved in [15] that WFQ (a.k.a., PGPS) closely approximates the ideal GPS system in terms of packet delay and cumulative per-flow service. Their work also showed end-to-end packet delay properties of a GPS system when flows are leaky bucket constrained.

In [5], Bennett and Zhang observed that the service provided to a flow under WFQ may unboundedly exceed the amount of service received under GPS, leading to unsatisfactory fairness and adverse effects on adaptive flows. The same authors introduced the WF2Q service discipline, which incorporated the concept of eligibility times into WFQ and showed that WF2Q bounds the worst-case fairness. We addressed the same problem with a new algorithm called MSF2Q, designed for multi-server systems, since using WF2Q for multi-server systems does not alleviate the burstiness problem. MSF2Q is designed such that it reduces to WFQ when the number of servers is exactly one.

For single-server systems, several proposals [17, 9, 10] have been made to approximate GPS with lower computational complexity than WFQ. SFQ [10] showed that using start times was possible to get fairness guarantees. A later work from Bennett and Zhang [4] introduced the concept of hierarchical GPS and presented a packetized algorithm for this model.

Weighted fair queuing for multi-server systems has not been extensively studied in the packet scheduling literature (to the best of our knowledge). Although there have been extensive works in the context of multiprocessor scheduling, only [7] considers a sharing model similar in spirit to GPS. The authors presented a scheduling algorithm called SFS for "fairly" sharing multiprocessors among threads. They introduced a model called GMS, different from GPS, as the reference system to capture the constraint that a thread can execute at one processor at a time. They experimentally showed that under certain workloads, their multiprocessor scheduling algorithms display similar properties to their new reference system. This algorithm does not provide guarantees and therefore was not considered for multi-link packet scheduling.

Balancing packets across multiple interfaces is another topic that has been the focus of many studies. In [3], Adiseshu et al. designed a round-based iterative algorithm to distribute packets across multiple outgoing links. Although they used Fair Queuing concepts in their design, these concepts were not applied towards the provisioning of QoS guarantees. Their aim was to evenly balance the load of a single flow across \(N\) outgoing links rather than provide sharing guarantees of link utilization for several input streams. Moreover, we cannot compare the algorithm to MSFQ with even a single input flow since our approach does not require the input to be backlogged and its bounds are independent of the workload.

Several implementations of link aggregation are currently available, ranging from proprietary ones such as Adaptecâ€™s Duralink [2], SUNâ€™s SunTrunking [16], 3Comâ€™s Dynamic Access [1], or later ones following the new standard such as HPâ€™s Auto Port Aggregation [12]. However, while all these technologies are able to share multiple links from a stream of packets, none of them provide proportional sharing among multiple streams.

### 9. Contributions and Future Work

Link aggregation, or the aggregation of multiple interfaces into a single logical link, is becoming the predominant approach for bandwidth scaling. Existing link aggregation schemes aim for even distribution of traffic among the aggregated interfaces. However, fairness and service guarantees for flows sharing these aggregated links have not been addressed.

Although GPS-based fair queuing service disciplines are extensively studied for proportionally sharing a single link, the resulting concepts have not been applied in cases where several links are aggregated. In this paper, we studied packetized GPS-based service disciplines for these multi-server situations. Ideally, the provision of such systems is described as a function of the total link capacity. Therefore, we proposed a reference system consisting of a single GPS server operating at a rate that equals the sum of the rates of the underlying servers.

Numerous fair queuing results previously obtained for single-server systems do not directly apply to multi-server systems. This is because the rate at which the packetized multi-server system operates may vary over time and differ from the rate of the reference system. Furthermore, the packetized multi-server system may reorder the packets to remain work-conserving. We first analyzed the cumulative service, packet delay, and per-flow cumulative service bounds for weighted fair queuing (WFQ) applied to a multi-server system. We then presented a new fair queuing algorithmâ€”MSF2Qâ€”that also bounds the additional amount of service a flow may receive under the packetized discipline compared to GPS, a property that is not shared by WFQ. As a result, MSF2Q leads to smooth and fair schedules in finer time scales.

Our future plans include investigating implementation issues, quantitatively comparing the approach presented in this paper to the alternative approach of partitioning flows among servers, and enhancing the algorithms for multiprocessors and clusters of servers. Other interesting extensions involve hierarchical GPS and servers with different rates.

### 10. References

[1] 3Comâ€™s Dynamic Access. http://www.3com.com.
[2] Adaptec Duralink Software Suite. http://www.adaptec.com.
[3] H. Adiseshu, G. M. Parulkar, and G. Varghese. A Reliable and Scalable Striping Protocol. In Proceedings of the ACM SIGCOMM, August 1996.
[4] J. C. R. Bennett and H. Zhang. Hierarchical Packet Fair Queueing Algorithms. In Proceedings of the ACM SIGCOMM, August 1996.
[5] J. C. R. Bennett and H. Zhang. WF2Q: Worst-case Fair Weighted Fair Queueing. In Proceedings of the IEEE INFOCOM, San Francisco, March 1996.
[6] J. Blanquer, J. Bruno, E. Gabber, M. Mcshea, B. Ã–zden, and A. Silberschatz. Resource Management for QoS in Eclipse/BSD. In Proceedings of the First FreeBSD Conference, Berkeley, California, Oct. 1999.
[7] A. Chandra, M. Adler, P. Goyal, and P. Shenoy. Surplus Fair Scheduling: A Proportional-Share CPU Scheduling Algorithm for Symmetric Multiprocessors. In Proceedings of the USENIX 4th Symposium on Operating System Design and Implementation, San Diego, California, Oct. 2000.
[8] A. Demers, S. Keshav, and S. Shenker. Design and Analysis of a Fair Queuing Algorithm. In Proceedings of the ACM SIGCOMM, Austin, Texas, September 1989.
[9] J. Golestani. A Self-Clocked Fair Queueing Scheme for Broadband Applications. In Proceedings of the IEEE INFOCOM, Toronto, June 1994.
[10] P. Goyal, H. Vin, and H. Chen. Start-Time Fair Queueing: A Scheduling Algorithm for Integrated Services Packet Switching Networks. In Proceedings of the ACM SIGCOMM, August 1996.
[11] A. Greenberg and N. Madras. How Fair is Fair Queuing. Journal of the ACM, July 1992.
[12] Hewlett Packardâ€™s Auto-Port Aggregation. http://www.unix.hp.com.
[13] Amendment to Carrier Sense Multiple Access With Collision Detection (CSMA/CD) Access Method and Physical Layer Specifications - Aggregation of Multiple Link Segments. IEEE 802.3ad Standard, 2000.
[14] Intelâ€™s Adaptive Load Balancing. http://www.intel.com.
[15] A. K. Parekh and R. G. Gallager. A Generalized Processor Sharing Approach to Flow Control in Integrated Services Networksâ€“the Single Node Case. IEEE/ACM Transactions on Networking, pages 344â€“357, June 1993.
[16] SUN Trunking Software. http://www.sun.com.
[17] L. Zhang. Virtual Clock: A New Traffic Control Algorithm for Packet Switching Networks. In Proceedings of the ACM SIGCOMM, Philadelphia, 1990.