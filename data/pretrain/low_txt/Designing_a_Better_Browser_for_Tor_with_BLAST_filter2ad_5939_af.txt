### Improving Page Load Time on Anonymity Networks

To enhance page load times on anonymity networks, we explored various methods, as HTTP/2 did not provide the expected benefits. Our primary focus was to reduce the number of round trips, which is a significant factor in browsing speed. We also examined several theoretical issues related to pipelining and HTTP/2, such as head-of-line blocking, transfer rate, and potential errors in HTTP/2 connections, and found that these had no significant impact on Tor.

### Proposed Improvements

We proposed a series of improvements aimed at reducing round trips in two key areas:

1. **Reducing Round Trips for Individual Resources:**
   - **TCP Fast Open (TFO):** Allows data to be sent in the initial SYN packet, reducing the number of round trips.
   - **Optimistic Data:** Sends data before receiving an acknowledgment, potentially reducing latency.
   - **0-RTT TLS:** Enables the resumption of TLS sessions without additional round trips.

2. **Reducing Round Trips for the Entire Web Page:**
   - **Redirection Databases:** Store redirection information to avoid unnecessary round trips.
   - **HTTP/2:** Utilizes multiplexing to handle multiple requests over a single connection.
   - **Prefetching:** Proactively loads resources based on predicted user behavior.

Our simulations predict that these improvements could reduce page load times on the Tor Browser by 61%, with prefetching contributing to approximately half of this improvement. The only minor sources of extra bandwidth in our proposed features are:
- The cost of distributing and updating page databases for clients (less than a megabyte for 10,000 pages).
- A small chance of a prefetching false positive, leading to unnecessary loading.

All proposed changes are client-side, ensuring immediate and seamless adoption once deployed.

### Reproducibility

Our code and data are available at: [github.com/blastpipeline/blastpipeline](https://github.com/blastpipeline/blastpipeline).

The repository includes:
- **BLAST Logger:** A patch for the Tor Browser to instrument it, along with Python code to parse logs into resource trees and other useful formats.
- **BLAST Simulator:** Python code to simulate HTTP/1.1 with and without pipelining, HTTP/2, and all six proposed features.
- **Data Sets:** For validating the logger and simulator, including HTTP/1.1 with pipelining on TB-8.5, HTTP/2 on TB-8.5, and HTTP/1.1 with pipelining on TB-6.5.
- **Prototype Implementation:** Redirection and server databases.

### References

[1] Masoud Akhoondi, Curtis Yu, and Harsha V Madhyastha. Lastor: A Low-Latency AS-Aware Tor Client. In Proceedings of the 2012 IEEE Symposium on Security and Privacy, pages 476–490, 2012.

[2] Mashael AlSabah, Kevin Bauer, Tariq Elahi, and Ian Goldberg. The Path Less Travelled: Overcoming Tor's Bottlenecks with Traffic Splitting. In International Symposium on Privacy Enhancing Technologies Symposium, pages 143–163. Springer, 2013.

[3] Mashael AlSabah, Kevin Bauer, and Ian Goldberg. Enhancing Tor’s Performance Using Real-Time Traffic Classification. In Proceedings of the 2012 ACM Conference on Computer and Communications Security, pages 73–84, 2012.

[4] Mashael AlSabah, Kevin Bauer, Ian Goldberg, Dirk Grunwald, Damon McCoy, Stefan Savage, and Geoffrey M Voelker. Defenestrator: Throwing Out Windows in Tor. In International Symposium on Privacy Enhancing Technologies Symposium, pages 134–154, 2011.

[5] Kevin S Bauer, Micah Sherr, and Dirk Grunwald. ExperimenTor: A Testbed for Safe and Realistic Tor Experimentation. In CSET, 2011.

[6] Xiang Cai, Rishab Nithyanand, and Rob Johnson. CS-BuFLO: A Congestion Sensitive Website Fingerprinting Defense. In Proceedings of the 13th ACM Workshop on Privacy in the Electronic Society, 2014.

[7] R. Dingledine, N. Mathewson, and P. Syverson. Tor: The Second-Generation Onion Router. In Proceedings of the 13th USENIX Security Symposium, 2004.

[8] Peter Eckersley. How Unique Is Your Web Browser? In Privacy Enhancing Technologies, pages 1–18, 2010.

[9] Benjamin Fabian, Florian Goertz, Steffen Kunz, Sebastian Müller, and Mathias Nitzsche. Privately Waiting–A Usability Analysis of the Tor Anonymity Network. In SIGeBIZ track of the Americas Conference on Information Systems, pages 63–75. Springer, 2010.

[10] Ian Goldberg. Optimistic Data for Tor (PETS Rump Session Talk). [Accessed Jan. 2019].

[11] Jamie Hayes and George Danezis. k-Fingerprinting: A Robust Scalable Website Fingerprinting Technique. In Proceedings of the 25th USENIX Security Symposium, 2016.

[12] Rob Jansen, John Geddes, Chris Wacek, Micah Sherr, and Paul F Syverson. Never Been KIST: Tor’s Congestion Management Blossoms with Kernel-Informed Socket Transport. In Proceedings of the 23rd USENIX Security Symposium, pages 127–142, 2014.

[13] Rob Jansen and Nicholas Hooper. Shadow: Running Tor in a Box for Accurate and Efficient Experimentation. In Proceedings of the 18th Network and Distributed System Security Symposium, 2011.

[14] Rob Jansen, Nicholas Hopper, and Yongdae Kim. Recruiting New Tor Relays with BRAIDS. In Proceedings of the 17th ACM Conference on Computer and Communications Security, pages 319–328, 2010.

[15] Rob Jansen, Marc Juarez, Rafael Galvez, Tariq Elahi, and Claudia Diaz. Inside Job: Applying Traffic Analysis to Measure Tor from Within. In Proceedings of the 25th Network and Distributed System Security Symposium, 2018.

[16] Marc Juarez, Mohsen Imani, Mike Perry, Claudia Diaz, and Matthew Wright. Toward an Efficient Website Fingerprinting Defense. In Computer Security–ESORICS 2016, pages 27–46. Springer, 2016.

[17] Colm MacCárthaigh. Security Review of TLS1.3 0-RTT. [Accessed Jan. 2019].

[18] Jon McLachlan, Andrew Tran, Nicholas Hopper, and Yongdae Kim. Scalable Onion Routing with Torsk. In Proceedings of the 16th ACM Conference on Computer and Communications Security, pages 590–599, 2009.

[19] Andriy Panchenko, Fabian Lanze, Andreas Zinnen, Martin Henze, Jan Pennekamp, Klaus Wehrle, and Thomas Engel. Website Fingerprinting at Internet Scale. In Proceedings of the 23rd Network and Distributed System Security Symposium, 2016.

[20] Mike Perry. Experimental Defense for Website Traffic Fingerprinting. [Accessed Feb. 2015].

[21] Vera Rimmer, Davy Preuveneers, Marc Juarez, Tom Van Goethem, and Wouter Joosen. Automated Website Fingerprinting Through Deep Learning. 2018.

[22] Payap Sirinam, Mohsen Imani, Marc Juarez, and Matthew Wright. Deep Fingerprinting: Undermining Website Fingerprinting Defenses with Deep Learning. In Proceedings of the 25th ACM Conference on Computer and Communications Security, pages 1928–1943. ACM, 2018.

[23] Robin Snader and Nikita Borisov. A Tune-up for Tor: Improving Security and Performance in the Tor Network. In Proceedings of the 15th Network and Distributed System Security Symposium, volume 8, page 127, 2008.

[24] Chris Wacek, Henry Tan, Kevin S Bauer, and Micah Sherr. An Empirical Evaluation of Relay Selection in Tor. In Proceedings of the 20th Network and Distributed System Security Symposium, volume 13, pages 24–27, 2013.

[25] Tao Wang, Kevin Bauer, Clara Forero, and Ian Goldberg. Congestion-Aware Path Selection for Tor. In International Conference on Financial Cryptography and Data Security, pages 98–113, 2012.

[26] Tao Wang, Xiang Cai, Rishab Nithyanand, Rob Johnson, and Ian Goldberg. Effective Attacks and Provable Defenses for Website Fingerprinting. In Proceedings of the 23rd USENIX Security Symposium, 2014.

[27] Tao Wang and Ian Goldberg. Walkie-Talkie: An Efficient Defense Against Passive Website Fingerprinting Attacks. In Proceedings of the 26th USENIX Security Symposium, 2017.

### Appendix

#### A. Pipelining Implementation Issues

We identified several issues in the implementation of pipelining in TB-6.5 that delayed page loading:

- **Minimum Depth:** TB-6.5 enforces a minimum pipeline length of three. If there are fewer than three requests in the pending queue and at least one active pipeline, the browser will not send out any resource requests, even if idle connections are available. This causes unnecessary queue wait times.
- **Randomization of Resources:** TB-6.5 randomly shuffles resources before dispatching. Since more important resources are often parsed first, this randomization is disadvantageous for page loading. This may have been intended to defeat website fingerprinting attacks, but previous work suggests it has no effect.
- **Randomization of Pipelines:** TB-6.5 randomly selects pipelines to dispatch from the set of all valid pipelines. This results in lost optimization opportunities. For example, pipelines that have completed TLS negotiation should be prioritized, and among those, pipelines with fewer dispatched resource requests should be prioritized to avoid head-of-line blocking.
- **Blocking Resources:** The HTTP server can mark any resource as a blocking resource. Before a blocking resource is fully loaded, no new resources can be dispatched, even onto pipelines, and no new connections can be created. This was intended to ensure that certain resources would be loaded as soon as possible, but it delays all other resources unnecessarily.

#### B. Detailed Results on Correlation of Page Load Time

We calculated the Pearson correlation coefficient (r) for four features: minimum round-trip time (minRTT), size of the page, HTTP/2 usage percentage, and number of resources. minRTT is calculated by summing the values for each resource on the path between the last resource and the root of the resource tree, adding:
- 3 if the resource is on a new HTTPS connection;
- 2 if the resource is on a new HTTP connection;
- 1 otherwise.

The results are presented in Figure 9. minRTT has the best correlation with page load time, with r = 0.57 compared to r = 0.45 for the number of resources and r = 0.38 for page size. The minRTT plot shows that page load time was always greater than and often close to minRTT times 0.38 seconds, reinforcing the notion that page load time was often directly caused by round trips.

#### C. BLAST Implementation

1. **How BLAST Simulates Web Page Loading:**
   BLAST simulates web page loading by mimicking and simplifying the logic of Firefox’s connection manager. It maintains two types of objects: connections and resources. The simulation is event-driven, starting with a single event corresponding to loading the first resource, which generates more events. The simulation ends when all events have been processed. Each event has a time, type, and an attached connection or resource. The simulator’s logic is described by explaining how it handles each event.

   Several events trigger an attempt to "dispatch all resources," which checks all connections to see if any are available to dispatch any resources in the waiting queue and creates new connections if allowed. We mimic the rules in the browser regarding which connections to choose for dispatch.

   - **Resource Events:**
     - **Resource Created:** Adds the resource to the waiting queue.
     - **Resource Dispatched:** This happens when a resource is successfully requested over a connection. The time to load the resource is calculated based on required round trips and bandwidth. The connection is marked as occupied, and a resource completed event is created after the calculated time. (Pipelining would alter this calculation.) New resource created events are generated if the resource has any children in the resource tree.
     - **Resource Completed:** Marks the relevant connection as available for further dispatch and the resource as complete with relevant time statistics. All resources are then dispatched.

   - **Connection Events:**
     - **Connection Created:** Simulates TLS and ALPN handshakes if necessary, then declares TLS finished and ALPN finished after appropriate times.
     - **TLS Finished:** Dispatches all resources.
     - **ALPN Finished:** Marks the connection as allowing HTTP/2 from now on (instead of just HTTP/1.1).

2. **How BLAST Determines Resource Parenthood:**
   To construct the resource tree, it is necessary to know the parent of each resource. However, the web browser does not record or output this information. BLAST uses browser logs to determine the parent of each resource by examining the context under which it was created. We start by determining the parent candidates of every resource: the last resource written to before the examined resource was created, as well as any other resource written within 0.05 seconds. We chose 0.05 seconds heuristically because parsing time usually does not exceed this amount. Then, we set parents in three loops of all resources:
   - **Step 1:** Mark all resources with only one parent candidate as having such a parent.
   - **Step 2:** For the remaining resources, if only one of their parent candidates was chosen as a parent for some other resource in step 1, mark that candidate as the parent.
   - **Step 3:** For the remaining resources, mark the last resource written to as the parent.

   The final step ensures that all resources (except the first resource for each page, representing user action to load the page) will have a parent.