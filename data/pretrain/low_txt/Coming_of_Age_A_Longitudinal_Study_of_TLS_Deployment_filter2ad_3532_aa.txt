# Coming of Age: A Longitudinal Study of TLS Deployment

## Authors
- Platon Kotzias, IMDEA Software Institute, Universidad Politécnica de Madrid
- Abbas Razaghpanah, Stony Brook University
- Johanna Amann, ICSI/Corelight/LBNL
- Kenneth G. Paterson, Royal Holloway, University of London
- Narseo Vallina-Rodriguez, IMDEA Networks Institute, ICSI
- Juan Caballero, IMDEA Software Institute

## Abstract
The Transport Layer Security (TLS) protocol is the de facto standard for encrypted communication on the Internet. However, it has faced numerous attacks and security issues over the years. Addressing these requires changes to the protocol, server or client software, or all of them. In this paper, we conduct the first large-scale longitudinal study examining the evolution of the TLS ecosystem over the last six years, with a special focus on the ecosystem's response to high-profile attacks.

For our analysis, we use a passive measurement dataset containing more than 319.3 billion connections since February 2012, and an active dataset with TLS and SSL scans of the entire IPv4 address space since August 2015. We also create the largest TLS client fingerprint database to date, consisting of 1,684 fingerprints.

Our findings show significant shifts in the ecosystem since 2012, with major changes in cipher suites and TLS extensions offered by clients and accepted by servers. While clients, especially browsers, are quick to adopt new algorithms, they are slow to drop support for older ones. We also find that a significant amount of client software inadvertently offers unsafe ciphers. These findings are discussed in the context of long-tail effects in the TLS ecosystem.

## ACM Reference Format
Platon Kotzias, Abbas Razaghpanah, Johanna Amann, Kenneth G. Paterson, Narseo Vallina-Rodriguez, and Juan Caballero. 2018. Coming of Age: A Longitudinal Study of TLS Deployment. In 2018 Internet Measurement Conference (IMC '18), October 31–November 2, 2018, Boston, MA, USA. ACM, New York, NY, USA, 14 pages. https://doi.org/10.1145/3278532.3278568

## 1 Introduction
The Transport Layer Security (TLS) protocol is the most widely used encrypted communication protocol on the Internet. To stay secure, it has had to evolve constantly in response to new attacks and vulnerabilities. Over the past few years, various TLS vulnerabilities such as BEAST, Lucky 13, POODLE, Heartbleed, FREAK, Logjam, and multiple attacks against RC4 have been discovered. The Snowden revelations also highlighted weaknesses in TLS, particularly the reliance on RSA key transport for establishing keying material, which can be passively broken by an entity possessing the server’s RSA private key. Addressing these attacks requires changes to the protocol, server, or client software, or all of them simultaneously.

Previous research has focused on specific aspects of the TLS ecosystem, such as particular attacks, problems with the Public Key Infrastructure (PKI), or TLS usage in specific areas like mobile devices. However, to our knowledge, no prior work has examined the specific impact of security issues on protocol deployment.

In this paper, we conduct a large-scale longitudinal study examining the evolution of the TLS ecosystem since 2012, both on the client and server sides. We analyze trends and changes, with a special focus on responses to high-profile attacks. For this, we use a combination of passive and active measurement data. Our passive measurements, running continuously since February 2012, contain information about more than 319.3 billion TLS connections. The active measurement data, provided by Censys, includes SSL and TLS scans of the entire IPv4 address space starting from August 2015.

To identify the patching behavior and evolution of specific clients, we create the largest TLS client fingerprint database to date, consisting of 1,684 fingerprints. These fingerprints allow us to attribute 69.26% of TLS connections to specific TLS-using programs or libraries. Using these fingerprints, we discover that while clients, especially browsers, are quick to adopt new algorithms, they are also slow to drop support for older ones. We also find significant amounts of client software that inadvertently offer unsafe ciphers. We discuss these findings in the context of long-tail effects arising from the desire to maintain backward compatibility, software abandonment, and the difficulties faced by users in keeping up-to-date with proper TLS usage.

Our analysis shows radical changes in the TLS ecosystem over the last six years. In 2012, 90% of TLS connections used TLS 1.0; today, 90% use TLS 1.2, with TLS 1.3 traffic increasing rapidly. In 2012, the use of RC4 and CBC-mode for encryption was prevalent; today, RC4 has almost completely disappeared in response to attacks, while CBC-mode accounts for about 10% of traffic. RC4 and CBC-mode have been largely replaced by modern Authenticated Encryption with Associated Data (AEAD) schemes, especially AES-GCM. We observe significant declines in the advertisement and use of export cipher suites, anonymous cipher suites, and vintage algorithms like 3DES. We also see a rise in the use of forward-secret cipher suites, now accounting for more than 90% of connections. Ephemeral elliptic-curve-based Diffie-Hellman key exchange (ECDHE) now dominates RSA key transport in TLS handshakes, with Curve25519 gaining in popularity and accounting for more than 20% of connections today.

## 2 Background
### 2.1 TLS Connection Establishment
To establish a TLS connection, the client and server first negotiate the parameters of the connection using Client Hello and Server Hello messages. These two messages are not encrypted, allowing passive observation. The client sends a Client Hello message listing its capabilities, such as the maximum protocol version, cipher suites, and elliptic curves it supports. The server then chooses its preferred options among those offered by the client and informs the client of its choices in the Server Hello message. Thus, the server selects the final protocol version, cipher suite, and other parameters that will be used in the secure channel.

Table 1 lists the release dates of all SSL/TLS versions. A key feature added in TLS 1.0 over earlier SSL protocol versions is TLS extensions, which add functionality and message formats [40]. The client includes in the Client Hello all the extensions it supports, and the server simply ignores extensions it does not understand. As of March 2018, 28 TLS extensions have been standardized [57]. It is also possible for anyone to define their own extensions.

### 2.2 TLS Attacks
Many attacks against SSL/TLS have been discovered in recent years, leading to significant revisions in both the protocol specification and individual implementations. In some cases, changing client and/or server configurations was sufficient mitigation, such as avoiding weak cipher suites. In other cases, more invasive changes to implementations were required, especially where good alternatives were not widely supported or where legacy support was needed. Finally, clients and servers have changed the versions of the protocol they negotiate in response to attacks.

Below, we provide a brief description and timeline of the most notable attacks, ordered by disclosure date:

- **BEAST (09/06/2011)**: BEAST allows a Man-in-the-Middle (MITM) attacker to decrypt data passing between a web server and an end-user browser for CBC cipher suites in TLS versions 1.0 and earlier [26, 41]. The attack exploits predictable Initialization Vectors (IVs) in these versions, which are not present in TLS 1.1 and 1.2. BEAST requires the attacker to have fine control over the placement of chosen plaintext blocks in the client’s messages. Client-side mitigation was possible and widely implemented. As a response to BEAST, server operators were encouraged to enforce the use of RC4 suites whenever TLS 1.0 or lower is offered by the client [74].

- **Lucky 13 (06/12/2012)**: Lucky 13 is a cryptographic timing attack against TLS implementations using CBC mode [10, 29]. All TLS cipher suites using CBC-mode encryption are potentially vulnerable to this attack. The best countermeasure is to switch to using Authenticated Encryption with Associated Data (AEAD) cipher suites in TLS 1.2, but at the time of the attack’s disclosure, most implementations did not support TLS 1.2. Consequently, and in view of the security issues in RC4 disclosed soon after Lucky 13, most implementations took steps to try to limit the timing leaks. Follow-up work has shown that this was not always successful [8, 14, 79].

- **RC4 attacks (12/03/2013 and later)**: This sequence of attacks [9, 20, 27, 33, 48, 85] exploited biases in the output of the RC4 stream cipher to recover plaintexts sent repeatedly under the protection of TLS, such as HTTP cookies or passwords. The attacks grew stronger over time, making the use of RC4 increasingly indefensible as an encryption option and spurring the adoption of TLS 1.2 with its stronger, modern AEAD cipher suites.

- **Heartbleed (03/12/2013)**: Heartbleed is an OpenSSL bug allowing remote attackers to obtain sensitive information from process memory via packets that trigger a buffer over-read [44, 87]. It was introduced into the software in 2012 and publicly disclosed in April 2014 [30]. Due to the severity of the attack and the ease of exploiting it, Heartbleed attracted a lot of media attention.

- **POODLE (14/05/2014)**: POODLE is a cryptographic exploit that takes advantage of TLS clients’ willingness to fall back to SSL 3 and the specifics of CBC-mode padding in SSL 3 [31, 63]. Since RC4, the only other encryption option in SSL 3, was already considered weak, the only real countermeasures to this attack are to disable SSL 3 and support TLS downgrade protection.

- **FREAK (03/03/2015)**: Export-grade ciphersuites have limited key lengths to satisfy US cryptography export laws of the 1990s. They offer approximately 40 bits of security and can be easily broken today [82]. Since the early 2000s, with the relaxation of export controls, cryptography no longer needs to be hobbled in this way. FREAK allows an MITM attacker to downgrade TLS connections to use export-grade cryptography (512-bit RSA for key transport) [17, 32, 51]. The attack is possible when a client connects to a web server that supports RSA_EXPORT cipher suites and the client requests an RSA cipher suite. The attack also relies on a client-side bug where the client accepts handshake messages of the special format encountered in export handshakes, even when no such handshake was requested. To mitigate this vulnerability, both clients and servers should disable support for export cipher suites.

- **Logjam (20/05/2015)**: Logjam, similar to FREAK, allows an MITM attacker to attack connections if the server supports DHE_EXPORT cipher suites and the client requests a DHE cipher suite [6, 34]. The effect is to downgrade the security of TLS connections to the level of export-grade cryptography (512-bit DH key exchange). Logjam takes advantage of a protocol-level flaw in TLS where the server signature in a DHE handshake does not cover the entire handshake.

We correlate major changes in the use of cipher suites and TLS extensions with the timing of specific TLS attacks and assess the impact of security research. We observe a few cases, like Heartbleed, where the ecosystem changed very quickly. We also observe a strong correlation in time between the Snowden revelations and the change to forward-secret ciphers. On the other hand, it took several years for RC4 usage to significantly reduce after attacks against RC4 were discovered. Moreover, we do not observe a change in our traffic after CBC attacks, possibly due to the lack of better available options at the time or the existence of patches. Finally, server support for SSL 3 is still embarrassingly high, despite the severity of POODLE and RC4 attacks.

## Main Contributions
- **Large-Scale Longitudinal Study**: We conduct a large-scale longitudinal study on the evolution of the TLS ecosystem since 2012, with a special focus on high-profile attacks and their impact.
- **Passive Monitoring Dataset**: We present the largest and longest-running passive TLS monitoring dataset, comprising 319.3 billion TLS connections collected since February 2012. We use this dataset, together with a large active scan dataset, to detail the changes to the TLS ecosystem since 2012.
- **TLS Client Fingerprint Database**: We create the largest database of TLS client fingerprints to date. We use these fingerprints to identify the evolution of client software on the Internet. We will release our TLS client fingerprints to the community after publication of this paper [1].

## Paper Structure
- §2 covers the background.
- §3 introduces the datasets used in our paper.
- §4 details our TLS client fingerprinting.
- §5 examines the impact of TLS vulnerabilities on the TLS ecosystem.
- §6 investigates TLS characteristics not directly related to attacks.
- §7 discusses the implications of our findings.
- §8 presents related work.
- §9 concludes the paper.

[1] https://github.com/platonK/tls_fingerprints