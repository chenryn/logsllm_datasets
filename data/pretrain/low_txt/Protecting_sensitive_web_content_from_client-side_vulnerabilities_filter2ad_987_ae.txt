### Table 3: Study of 20 Popular Web Applications
- **Sensitive Information Access**: Less than 1% of web application code needs to run in the Trusted Execution Memory Isolation (TEMI) to access sensitive information.
- **Browser-TEMI Interactions**: Less than 1% of all calls to JavaScript data types trigger browser-TEMI interactions.

### Application-Specific Considerations

#### Babylon
- **Context**: Users can purchase items without creating an account with Babylon.
- **Vulnerability**: An attacker can tamper with the purchaser’s email in the browser, causing a legitimate user's software license to be delivered to the attacker’s email address.
- **Mitigation**: Mark the email address as a sensitive field. Additionally, mark product search terms as sensitive for Amazon.

#### Gmail
- **Context**: A rich webmail client used as a running example.
- **Sensitive Fields**: Search terms and certain emails are marked as sensitive.
- **Function Identification**: Manually identify all functions that legitimately operate on sensitive information, including event handlers.
- **Policy Assignment**: Assign the default policy κ0 → κ0 to these functions, and mark all user keyboard inputs as sensitive.
- **Additional Security**: Mark the Gmail spam warning message and Facebook posts as requiring proof-of-impression.

### Results
- **Dynamic Modification**: We dynamically modify these web pages to encode sensitive contents into CRYPTONs using a proxy server.
- **Correct Rendering**: The applications render correctly in our CRYPTON-compliant browser implementation and remain functional.
- **Hypothesis Confirmation**: This confirms our hypothesis that existing applications can be easily upgraded to use CRYPTON-KERNEL’s functionality.
- **Proxy Verification**: Our test proxy decodes encrypted content returned from the browser and checks them against expected values. It also verifies that it receives proof-of-impression tokens.

### Developer Effort
- **Modest Effort**: On average, only 1% of the total functions in the applications need to be included in CRYPTONs, amounting to 2 KB of minified JavaScript per web page.
- **Verification Feasibility**: The effort required to verify such code as CRYPTON functions is feasible, typically involving 1-9 functions per application.
- **Signup Pages**: Figure 4 shows similar results, indicating that 0-9 functions need to be verified for each signup page.

### Reduction in Attack Surface
- **Untrusted Application Code**: Exposure to untrusted application code reduces by 99%. Only less than 1% of web application code actually needs access to sensitive information and runs in CRYPTON functions. The rest of the code has access only to opaque objects with encrypted data.
- **Browser Vulnerabilities**: Exposure to browser vulnerabilities is reduced by 92.5%. In existing browsers, sensitive information is largely accessible to browser code running in the same process. By isolating sensitive information into CRYPTONs, the CRYPTON-KERNEL places 99% of web application code outside the Trusted Computing Base (TCB).
- **Historical Vulnerabilities**: From our study with historical security vulnerabilities in Firefox, 333 out of 360 vulnerabilities (92.5%) cannot be exploited to violate the security guarantees provided by the CRYPTON-KERNEL. The remaining vulnerabilities either reside in our TCB (7 of them) or compromise our assumptions (another 20 vulnerabilities).

### Performance
- **Responsiveness**: The web sites remain responsive, without any perceivable slowdown.
- **Encryption/Decryption Overhead**: Figure 5 shows the performance overhead of the CRYPTON-KERNEL compared to a vanilla WebKit-GTK browser. Using five CPU-intensive test pages from the Dromaeo benchmark, the maximum performance overhead is 7.5% when all texts are marked as sensitive. For a manually crafted test page, the overhead reaches 11.7% under pathological scenarios.
- **Browser-TEMI Interactions**: For most cases, less than 1% of all access to JavaScript data types requires crossing the browser-TEMI boundary. Given the overhead of sending a message via Unix domain socket is around 5 microseconds, a website with 1,000 IPC messages incurs only 0.005 seconds of overhead. Thus, the design does not cause any performance bottleneck.

### Related Work
- **Enhancement of Browser Security Mechanisms**: Extensive research has been done on enhancing browser security mechanisms, including fine-grained access control and multi-layered architectures. However, these solutions do not prevent compromised browser code from directly reading data stored in memory.
- **Privilege Separation & Trusted Paths**: Privilege separation is a fundamental mechanism, but it does not provide first-class abstractions to control access to sensitive data. Our solution focuses on establishing trusted paths in an untrusted web browser.
- **Information Flow Analysis**: Information flow tracking has been used to detect and prevent information leakage, but it relies on the trust of browsers. Our solution is based on a small TCB and protects sensitive data against threats from untrusted code or scripts.
- **Cryptographic Techniques**: Cryptographic techniques have long been used to protect security in different systems. Our solution prevents information leakage by limiting plaintext only to CRYPTON functions, whose return values are also encrypted by default.

### Conclusion
In this paper, we present CRYPTON, a novel abstraction that protects sensitive web content and allows rich computation over it. Based on this data-centric abstraction, we propose a solution that integrates with the present web browser without trusting its code. The security guarantees are enforced by a small standalone engine, called CRYPTON-KERNEL, which interprets sensitive web content in CRYPTONs and allows trusted functions to securely compute over the sensitive data.