### Client Session and Game Changes

In Game 9, we aim to ensure that no client session \( \pi_s^i \) accepts maliciously. The following summarizes the key changes in the games:

1. **Unique Nonces for Honest Parties:**
   - Each honest party \( i \) will have a unique matching transcript \( \pi_s^i \) with a unique session \( \pi_t^j \). This ensures that nonces do not collide for honest parties.

2. **Guessing Target Session:**
   - The adversary \( C \) must guess the target session. If a `Reveal(i,s)` query is issued, \( C \) aborts.

3. **Guessing Partner Session:**
   - \( C \) must also guess the partner session. If a `Corrupt(j)` or `Reveal(j,t)` query is issued, \( C \) aborts.

4. **Unique Hash Values for Honest Parties:**
   - Hash values are now unique for each negotiation phase, as established in Game 1.

5. **No Forging of \( C_1 \):**
   - In the session \( \pi_t^j \), \( C_1 \) is not forged.

6. **Replacing Premaster Secret:**
   - The premaster secret \( pms \) in the target session \( \pi_s^i \) is replaced with a random value instead of the key encapsulated in the KEM ciphertext \( e \). The shared secret data \( k \) is unique and computed via the shared secret.

7. **Random Data for \( k \):**
   - When computing \( \tau \), \( k \) is replaced with uniformly random data of the same length. This ensures that the verification of \( \tau \) in the Time Synchronization and Key Exchange phases is done using a uniformly random key, independent of the protocol run.

8. **No Forging of \( C_2 \):**
   - \( C_2 \) in the session \( \pi_t^j \) is not forged and contains random data.

9. **MAC Tags Not Forged:**
   - MAC tags in the session \( \pi_s^i \) are not forged.

After these game changes, \( \pi_s^i \) is a target session where:
- No `Reveal(i,s)` or `Reveal(j,t)` queries were issued before \( \pi_s^i \).
- No `Corrupt(j)` query was ever issued before \( \pi_s^i \).
- \( \pi_s^i \) only accepts if \( \tau_1 = \text{MAC}(k, h \parallel m_3 \parallel C_2) \) and \( \tau_2 = \text{MAC}(k, m_5 \parallel t_1 \parallel t_2 \parallel t_3) \).

By unforgeability, these tags cannot be generated by the adversary \( A \), and by Game 1, the protocol flow of each session is unique. Verification of \( \tau_1 \) and \( \tau_2 \) will only occur if \( \pi_s^i.T = \pi_t^j.T \), as \( \tau_1 \) is over all messages in the negotiation and key exchange phase, and \( \tau_2 \) is over all messages in the time synchronization phase.

Thus, no client session accepts maliciously in Game 9, and the probability of a break is zero: \( \Pr(\text{break}_9) = 0 \).

### Multi-Phase Security

The multi-phase security of ANTP can be established similarly to the single-phase security, with minor changes to the games in the proof to enable guessing of the first phase session to accept maliciously.

**Theorem 3 (Multi-Phase Security of ANTP):**
- Fix \( E, n \in \mathbb{N} \). Under the same assumptions as in Theorem 2, ANTP is an \( E \)-accurate secure multi-phase time synchronization protocol as defined in Definition 5.
- There exist algorithms \( B_3, \ldots, B_8 \) described in the proof of Theorem 2, such that for all adversaries \( A \), we have:
  \[
  \text{Adv}_{\text{ANTP},E}^{\text{multi-time}}(A) \leq s \cdot \left( \text{Adv}_{\text{Hash}}^{\text{coll}}(B_{A3}) + \text{Adv}_{\text{KEM}}^{\text{ind-cca}}(B_{A5}) + \text{Adv}_{\text{AE}}^{\text{auth-enc}}(B_{A6}) + \text{Adv}_{\text{KDF}}(B_{A7}) + \text{Adv}_{\text{MAC}}^{\text{euf-cma}}(B_{A8}) \right)
  \]
  where \( n_p, n_s, n \) are the maximum number of parties, sessions, and phases created by \( A \) during the experiment.

**Proof:**
- The proof for Theorem 3 is identical to the proof for Theorem 2, with the following modifications:
  - A new game is inserted between Game 3 and Game 4 to guess the first time synchronization phase \( p \in \{1, \ldots, n\} \) that the target session \( \pi_s^i \) will accept maliciously. By Theorem 2, we know that a session \( \pi_s^i \) will not accept maliciously for time synchronization phase \( p = 1 \), so by this step, we know that \( \pi_s^i \) up to and including phase \( p-1 \).
  - The final game (MAC challenger) is edited so that \( B \) aborts if \( \pi_s^i \) accepts maliciously in phase \( p \). This is done by editing the final game to compute \( \tau_{2p} \) by querying the MAC challenger with \( m_5^p \parallel t_1^p \parallel t_2^p \parallel t_3^p \) and verifying \( \tau_{2p} \) for \( \pi_s^i \) by querying the MAC challenger with \( m_5^p \parallel t_1^p \parallel t_2^p \parallel t_3^p \) and accepting only if the output from the MAC challenger matches the \( \tau_p \) in \( m_6^p \).

Following the same structure as the proof to Theorem 2, \( k \) is a uniformly random key generated independently from the protocol run, and this change is indistinguishable. Verification of \( \tau \) will only occur if \( \pi_s^i.T = \pi_t^j.T \) up to phase \( p \), as \( \tau_1 \) is over all messages in the negotiation and key exchange phase, and \( \tau_p \) is over all messages in phase \( p \).

### Discussion

In this work, we introduced a new authenticated time synchronization protocol called ANTP, designed to securely synchronize the time of a client and server using public key infrastructure. Our design allows a server to perform a single public key operation per client during the infrequently performed key exchange phase, and then use only faster symmetric key operations for each subsequent time synchronization request from that client. This efficient design means that the throughput of ANTP time synchronization phases is reduced by a factor of only 1.6× compared to NTP. Our protocol has been designed such that servers sharing the same long-term secret can handle different phases of the same client for load-balancing purposes. Furthermore, the server need not even store per-client state, instead securely offloading storage of that state to the client.

ANTP is accompanied by a provable security analysis showing that it provides secure time synchronization within user-specified accuracy bounds. The analysis is carried out in a new provable security framework. A novel aspect of our new framework, when compared with the long line of work on authentication definitions, is that our framework models an adversary with the ability to control the flow of time, meaning the adversary can initialize different parties' clocks to different times and even control the rate at which their clocks are advanced. The security framework can be used for the analysis of other time synchronization protocols such as the Network Time Security (NTS) protocol and the Precision Time Protocol (PTP).

Several interesting open problems in the area of secure time synchronization remain. Since ANTP uses public keys, it inherits problems associated with public key infrastructure, such as the dangers of certificate authority compromise. All existing time synchronization protocols that rely on public keys, including ours, need to initially validate the certificate of the time server, specifically that it is within its validity period. While nonces can be combined with OCSP responses to check freshness, this cannot completely solve the "first-boot" problem. A detailed study of denial of service attacks against secure time synchronization protocols, including ANTP, would also be worthwhile, giving detailed consideration to both the cost of cryptographic operations in practice and the bandwidth amplification afforded by directing protocol responses to a victim.

### Acknowledgements

We thank Gleb Sechenov at the Queensland University of Technology for assistance in setting up the network for the experiments. B.D. and D.S. were supported in part by Australian Research Council (ARC) Discovery Project grant DP130104304. Part of this work was performed while B.D. was an intern at Microsoft Research and while D.S. was at QUT.

### References

[1] IEEE Std 1588 for a Precision Clock Synchronization Protocol for Networked Measurement and Control Systems Networked Measurement and Control Systems. Tech. rep., IEEE Instrumentation and Measurement Society, 2008.

[2] ADRIAN, D., BHARGAVAN, K., DURUMERIC, Z., GAUDRY, P., GREEN, M., HALDERMAN, J. A., HENINGER, N., SPRINGALL, D., THOMÉ, E., VALENTA, L., VANDERSLOOT, B., WUSTROW, E., BÉGUELIN, S. Z., AND ZIMMERMANN, P. Imperfect forward secrecy: How Diffie-Hellman fails in practice. In ACM CCS 15 (Oct. 2015), I. Ray, N. Li, and C. Kruegel, Eds., ACM Press, pp. 5–17.

[3] APPELBAUM, J. tlsdate, 2015. https://github.com/ioerror/tlsdate.

[4] BASIN, D., CAPKUN, S., SCHALLER, P., AND SCHMIDT, B. Formal reasoning about physical properties of security protocols. ACM Trans. Inf. Syst. Secur. 14, 2 (Sept. 2011), 16:1–16:28.

[5] BELLARE, M., AND ROGAWAY, P. Random oracles are practical: A paradigm for designing efficient protocols. In ACM CCS 93 (Nov. 1993), V. Ashby, Ed., ACM Press, pp. 62–73.

[6] DOWLING, B., STEBILA, D., AND ZAVERUCHA, G. Authenticated network time synchronization. Cryptology ePrint Archive, Report 2015/171, 2015. http://eprint.iacr.org/2015/171.

[7] EVANS, C., PALMER, C., AND SLEEVI, R. Public Key Pinning Extension for HTTP. RFC 7469 (Proposed Standard), Apr. 2015.

[8] GALINDO, D., MARTIN, S., AND VILLAR, J. L. Evaluating elliptic curve based KEMs in the light of pairings. Cryptology ePrint Archive, Report 2004/084, 2004. http://eprint.iacr.org/2004/084.

[9] HEDRICK, C. Routing Information Protocol. RFC 1058 (Historic), June 1988.

[10] HODGES, J., JACKSON, C., AND BARTH, A. HTTP Strict Transport Security (HSTS). RFC 6797 (Proposed Standard), Nov. 2012.

[11] JAGER, T., KOHLAR, F., SCHÄGE, S., AND SCHWENK, J. On the security of TLS-DHE in the standard model. In CRYPTO 2012 (Aug. 2012), R. Safavi-Naini and R. Canetti, Eds., vol. 7417 of LNCS, Springer, Heidelberg, pp. 273–293.

[12] MALHOTRA, A., COHEN, I. E., BRAKKE, E., AND GOLDBERG, S. Attacking the Network Time Protocol. In NDSS 2016 (Feb. 2016), Internet Society.

[13] MICROSOFT CORPORATION. Windows Time Service Tools and Settings. Microsoft Developer Network, May 2012. https://msdn.microsoft.com/de-de/library/cc773263%28v=ws.10%29.aspx#w2k3tr_times_tools_uhlp.

[14] MICROSOFT CORPORATION. [MS-W32T]: W32Time Remote Protocol. Microsoft Developer Network, May 2014. https://msdn.microsoft.com/en-us/library/cc249627.aspx.

[15] MILLS, D. Network Time Protocol (NTP). RFC 958, Sept. 1985.

[16] MILLS, D. Network Time Protocol (version 2) specification and implementation. RFC 1119 (Internet Standard), Sept. 1989.

[17] MILLS, D. Network Time Protocol (Version 3) Specification, Implementation and Analysis. RFC 1305 (Draft Standard), Mar. 1992.

[18] MILLS, D., MARTIN, J., BURBANK, J., AND KASCH, W. Network Time Protocol Version 4: Protocol and Algorithms Specification. RFC 5905 (Proposed Standard), June 2010.

[19] MILLS, D. L. On the accuracy and stability of clocks synchronized by the network time protocol in the internet system. ACM SIGCOMM Computer Communication Review 20, 1 (1989), 65–75.

[20] MIZRAHI, T. Security Requirements of Time Protocols in Packet Switched Networks. RFC 7384 (Informational), Oct. 2014.

[21] NATIONAL INSTITUTE FOR STANDARDS AND TECHNOLOGY (NIST). The NIST Authenticated NTP Service. http://www.nist.gov/pml/div688/grp40/auth-ntp.cfm.

[22] PERRIG, A., CANETTI, R., TYGAR, J., AND SONG, D. The TESLA broadcast authentication protocol. RSA CryptoBytes 5, Summer (2002).

[23] RÖTTGER, S. Analysis of the NTP Autokey Protocol. Masters Thesis, Technische Universität Braunschweig, Feb. 2012. http://zero-entropy.de/autokey_analysis.pdf.

[24] SALOWEY, J., ZHOU, H., ERONEN, P., AND TSCHOFENIG, H. Transport Layer Security (TLS) Session Resumption without Server-Side State. RFC 5077 (Proposed Standard), Jan. 2008.

[25] SANTESSON, S., MYERS, M., ANKNEY, R., MALPANI, A., GALPERIN, S., AND ADAMS, C. X.509 Internet Public Key Infrastructure Online Certificate Status Protocol - OCSP. RFC 6960 (Proposed Standard), June 2013.

[26] SCHNORR, C.-P. Efficient identification and signatures for smart cards. In CRYPTO’89 (Aug. 1990), G. Brassard, Ed., vol. 435 of LNCS, Springer, Heidelberg, pp. 239–252.

[27] SCHWENK, J. Modelling time, or a step towards reduction-based security proofs for OTP and Kerberos. Cryptology ePrint Archive, Report 2013/604, 2013. http://eprint.iacr.org/2013/604.

[28] SELVI, J. Bypassing HTTP Strict Transport Security. In Black Hat Europe (2014). https://www.blackhat.com/docs/eu-14/materials/eu-14-Selvi-Bypassing-HTTP-Strict-Transport-Security-wp.pdf.

[29] SHOUP, V. ISO/IEC 18033-2:2006: Information technology – security techniques – encryption algorithms – part 2: Asymmetric ciphers. Tech. rep., 2006. See also http://shoup.net/iso/std6.pdf.

[30] SIBOLD, D., AND RÖTTGER, S. Analysis of NTP’s Autokey Protocol, 2012. https://www.ietf.org/proceedings/83/slides/slides-83-tictoc-1.pdf.

[31] SIBOLD, D., RÖTTGER, S., AND TEICHEL, K. Network Time Security. IETF Internet-Draft, Jan. 2016. https://tools.ietf.org/html/draft-ietf-ntp-network-time-security-12.

[32] TEICHEL, K., SIBOLD, D., AND MILIUS, S. First Results of a Formal Analysis of the Network Time Security Specification. In Security Standardisation Research. Springer, 2015, pp. 218–245.

[33] TEICHEL, K., SIBOLD, D., AND MILIUS, S. An Attack Possibility on Time Synchronization Protocols Secured with TESLA-Like Mechanisms, 2016. https://www8.cs.fau.de/staff/milius/AttackPossibilityTimeSyncTESLA.pdf.

[34] THE OPENBSD PROJECT. OpenNTPD version 5.7p4, Mar. 2015. http://www.openntpd.org/.

[35] THE OPENSSL PROJECT. OpenSSL version 1.0.2f, Jan. 2016. https://www.openssl.org/.