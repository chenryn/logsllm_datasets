# **目录**

- [8.3.6 安全性测试的重要性及其方法](#text00000.html#nav_point_124)
- [8.3.7 Web 健康诊断基准](#text00000.html#nav_point_125)
- [8.3.8 承包方测试](#text00000.html#nav_point_126)
- [8.3.9 发包方测试（验收）](#text00000.html#nav_point_127)
- [8.3.10 运维阶段的注意事项](#text00000.html#nav_point_128)
- [8.4 总结](#text00000.html#nav_point_129)

# **推荐序** {#text00000.html#nav_point_0}

我在信息安全领域已有十五年的经验。从最初的端口扫描和探测服务器操作系统类型，到防火墙出现后转攻Web应用安全，我结识了许多业内顶级专家，并与他们进行了深入交流。

互联网的发展使我们从传统的纸质信件转向电子邮件，社交网络则让我们通过互联网结交更多朋友。然而，这些便利也带来了新的风险，如恶意钓鱼、跨站脚本攻击和恶意软件植入等。这些行为导致用户信息泄露，银行卡和信用卡被盗刷，造成巨大的经济损失。

根据OWASP发布的Top Ten，可以看出Web安全的重要性。目前全球有效的网络攻击中，基于Web的攻击占80%，其中SQL注入和跨站脚本攻击一直位于前列。这两种攻击通常发生在Web应用中。

此次受图灵公司邀请参与本书的校译工作，我深感赵文和刘斌两位译者的日文专业技术功底深厚，同时感受到日本作者的严谨态度。书中提供了详实的应用案例和代码。

作为OWASP中国北京的负责人，我有幸组织和参与了多次信息安全峰会。我发现国外的信息安全专家更善于总结和推广技术，而国内专家往往只介绍结果而不解释过程。

《Web应用安全权威指南》的作者是日本Web安全领域的领军人物，其编程功底深厚。本书没有欧美作者的幽默风格，而是以严谨实用的方式陈述。作者从Web应用的安全隐患出发，详细描述了产生安全隐患的原因，并介绍了搭建实验环境和缺陷代码示例。此外，本书还讲解了Web安全的基础协议和原理，帮助读者打下坚实基础。

本书详细讲解了SQL注入、XSS和CSRF等的基本原理，并提供了详细的代码解析。无论你是Web安全爱好者还是研究者，都可以将其作为参考书籍。我建议高校学生通过学习本书，实现从Web安全入门到精通。

OWASP中国北京区负责人、51CTO信息安全专家
陈亮（OWASP 子明）

# **译者序** {#text00000.html#nav_point_1}

2011年，索尼遭受三次大规模攻击，导致7700万PlayStation Network用户的个人信息泄露。这次攻击使PSN服务瘫痪23天，给索尼造成了上亿美元的损失。

同年12月，国内知名开发者社区CSDN遭到攻击，600万用户账号及密码泄露并在网上广泛传播。

2013年3月，全球知名的云笔记应用Evernote遭到攻击，导致5000万用户的邮箱地址和加密密码泄露。

最近，全球最大的众筹网站Kickstarter也遭到攻击，用户信息被窃取。

这些事件提醒我们网络安全的重要性。即使是一些不起眼的代码问题，也可能引发严重的后果。掌握如何在编程时避免引入漏洞已成为Web开发者必备的技能。

然而，当开发者想要系统性地学习Web应用安全时，市面上多是以攻击者视角编写的书籍，缺乏站在开发者立场的权威性书籍。图灵公司引进的《Web应用安全权威指南》填补了这一空白。

在日本，这本书被称为“德丸本”，几乎每个Web开发团队都有它的身影。本书作者德丸浩先生被誉为“Web应用安全第一人”，他在经营一家Web安全咨询公司的同时，还在博客上分享自己的知识。

看过日系技术书的读者一定会对其通俗易懂、深入浅出的特点印象深刻。本书详细剖析了SQL注入、XSS和CSRF等术语，既适合通读进行系统性学习，也适合作为参考书查阅。

最后，感谢图灵文化的编辑们将这本书引入国内，感谢另一位译者刘斌的辛勤付出，以及妻子马超对我的支持。

希望本书能让您受益。
赵文
2014年2月于无锡

# **前言** {#text00000.html#nav_point_2}

近年来，利用Web应用存在的安全隐患进行攻击的案例层出不穷，受害者不断增加。消除安全隐患需要Web应用开发人员具备正确的安全性知识。

目前，网络上关于安全性的信息很多，但多数内容流于表面，无法解答开发人员的困惑。具体来说，主要存在以下几点疑问：
- 为什么会产生安全隐患？
- 安全隐患会产生什么影响？
- 如何编程才能消除安全隐患？
- 为什么某些方法能够消除安全隐患？

本书旨在解答这些问题。从安全隐患产生的原理到具体的对策，本书都将尽可能详细讲述。本书的目标读者包括程序员、设计师、项目经理、质量管理负责人等参与Web应用开发的所有人员。此外，本书也会站在发包方的角度提供有用的信息。

虽然本书面向开发人员，但也详细解说了攻击手段，目的是让读者切实感受到安全隐患的影响。需要注意的是，未经授权攻击正式网站可能触犯法律。因此，请不要在没有许可的情况下尝试攻击。

为了让读者放心体验攻击流程，本书提供了在VMware Player虚拟机环境中尝试安全隐患攻击的方法。希望读者通过亲自动手加深对安全隐患的理解。

最后，虽然本书中的示例代码主要使用PHP语言，但内容对其他语言同样适用。

# **谢辞** {#text00000.html#nav_point_3}

在写作过程中，我征集了一些试读者的意见和反馈。试读者不仅指出了错别字和语法问题，还提出了各种改进方案，并就安全隐患进行了深入探讨。如果没有这些建议和探讨，本书不会是现在的样子。衷心感谢以下试读者（恕省略敬称）：
- 大崎雅幸
- 太田良典
- kaito834
- 加藤泰文
- 小邨孝明
- 坂井隆二
- 下冈叶子
- 高木正弘
- 竹迫良范
- 东内裕二
- 塙与志夫
- 日野洋一郎
- 山崎圭吾
- 山下太郎
- Masahiro Yamada (masa141421356)
- 山本阳平

此外，长谷川阳介先生对本书提出了宝贵意见。我还收到了许多Twitter用户的建议，在此一并表示感谢。

最后，感谢本书的编辑——SB Creative股份有限公司信息书籍编辑部的友保健太先生。友保先生不仅对我写作进度缓慢给予了照顾，还时常提出宝贵意见。在此向您致以衷心的感谢。

2011年1月
德丸浩

# **第 1 章 什么是 Web 应用的安全隐患** {#text00000.html#nav_point_4}

本章将概述“安全隐患”这一主题，包括什么是安全隐患、安全隐患带来的问题以及安全隐患是如何产生的。本章最后会给出全书的结构和学习方法。

## **1.1 安全隐患即“能用于作恶的 Bug”** {#text00000.html#nav_point_5}

程序Bug对于开发者来说并不陌生。应用程序中的Bug会导致各种不正常现象，如显示错误结果、处理延迟、网页布局错乱、响应速度慢等。其中，有一种Bug可以被恶意利用，这类Bug被称为安全隐患或安全性Bug。

以下是一些常见的恶意利用案例：
- 未经许可浏览用户个人信息等隐私信息
- 篡改网站内容
- 使网页浏览者的计算机感染病毒
- 伪装成他人窥探隐私信息、发布文章、在线购物、肆意转账等
- 使目标网站无法访问
- 在网络游戏中让自己达到无敌状态或非法获得装备道具
- 在确认个人信息时能看到他人的信息

如同程序员对一般的Bug习以为常一样，Web应用开发者对安全隐患也已司空见惯。如果开发Web应用时对安全隐患一无所知，就会开发出能被用来进行上述恶行的网站。本书将从原理到具体对策，详细讲述如何在开发Web应用时杜绝安全隐患。

## **1.2 为什么存在安全隐患会有问题** {#text00000.html#nav_point_6}

为什么存在安全隐患会有问题，这是一个值得深入探讨的课题。接下来，我们将从几个方面来探讨必须杜绝安全隐患的原因：

### 经济损失
网站的安全隐患被恶意利用后，经营者会蒙受经济损失。典型的损失包括：
- 赔偿用户的经济损失
- 给用户寄送代金券作为补偿的花销
- 网站暂停运营造成的机会损失
- 信誉度下降造成的营业额减少

此类经济损失总额有时高达数十亿日元。尽管小规模网站的经济损失相对较小，但实际损失并不仅限于经济方面。

### 法律要求
《个人信息保护法》规定了网站实施安全管理措施的要求。该法第20条规定，拥有超过5000名用户的网站运营方，作为个人信息经营者，有义务实施网站的安全管理措施。
> （安全管理措施）
>
> 第二十条 个人信息经营者，为了安全管理其用户的个人信息，必须采取必要且恰当的措施，防止用户的个人信息被泄漏、删除或损坏。

安全管理措施的具体内容由各省厅制定规章。例如，“经济产业领域关于个人信息保护法的指导方针”中提到：
> 检验处理个人信息的系统中引入的访问控制功能的有效性。
>
> （例如，检验网络应用是否存在安全隐患。）

这意味着，通过Web系统管理个人信息的运营者受到《个人信息保护法》及相关规章的约束，承担着对Web应用的安全隐患采取安全管理措施的法律义务。

### 对用户造成不可逆的伤害
安全隐患造成的事故会给用户带来不可逆的伤害。一旦个人信息泄露，就无法回收。账号被盗导致名誉受损后，也无法恢复原状。另外，如果用户的信用卡信息被泄露，即使赔偿了金钱损失，也无法完全平复精神上的痛苦。换言之，一旦发生安全事故，会出现许多金钱无法解决的问题。

### 欺骗用户
大多数网站都会强调自身的安全性。没有网站会声明“本站不保证安全性，对于可能出现的安全问题概不负责”。如果网站强调了自己的安全性，就应该消除安全隐患。安全隐患的存在会严重影响网站的信誉度和可信度。

### 被用于构建僵尸网络
僵尸网络（Botnet）是威胁互联网安全的主要因素之一。僵尸病毒是一种恶意代码，计算机被感染后可被远程操纵，用于发送垃圾邮件或执行DDoS攻击等恶意行为。据传，2010年初爆发的Gumblar恶意程序的目的之一就是构建僵尸网络。

Web应用的安全隐患也可能被用于构建僵尸网络，如图1-1所示。
![](Image00000.jpg)
**图 1-1 Web应用的安全隐患被用来构建僵尸网络**

攻击者首先篡改存在安全隐患的网站内容，并设下圈套试图让浏览者的计算机感染僵尸病毒。如果浏览网站的用户的计算机存在安全隐患，就会感染僵尸病毒，从而接受攻击者的命令。进入僵尸网络的计算机会被用来发送垃圾邮件或执行DDoS攻击。有时，僵尸机器还会去攻击新的服务器，新被入侵的机器加入僵尸网络后，被感染的计算机集群数量不断扩大。

僵尸网络带来的收益是网络犯罪者的主要收入来源之一。因此，在互联网上发布一个带有安全隐患的网站，就有被反社会势力利用的可能性。

## **1.3 产生安全隐患的原因** {#text00000.html#nav_point_7}

接下来，我们将说明安全隐患产生的原因，以便理解为何Web应用开发者对安全隐患已经司空见惯。

安全隐患的原因可分为两类：
- 由Bug造成
- 由检验功能不完善造成

情况（A）包括SQL注入和跨站脚本（XSS）等著名安全隐患。这些隐患不仅发生在与安全性无关的地方，而且波及整个应用程序。因此，开发团队的每个成员在编写应用程序时都必须具有强烈的安全意识，但遗憾的是，许多开发团队并未做到这一点。

另一方面，目录遍历漏洞是情况（B）的一个典型例子。这种隐患的原因是开发者缺乏执行安全检验的意识，且影响范围也会波及整个应用程序。

由此可见，Web应用的安全隐患可以被形象地比喻为“在意想不到的地方隐藏着的一个很深的陷阱”。因此，安全隐患一直在不断产生。但是，通过学习，我们可以提前了解哪里会有陷阱。

## **1.4 安全性 Bug 与安全性功能** {#text00000.html#nav_point_8}