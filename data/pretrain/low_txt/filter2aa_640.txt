# Computer Science / www.isec.utulsa.edu

## How to Hack Your Mini Cooper: Reverse Engineering CAN Messages on Passenger Automobiles

### Jason Staggs
- **Graduate Research Assistant** at the Institute for Information Security (iSec) and Crash Reconstruction Research Consortium (TU-CRRC)
- **Cyber Security Analyst** at TRUE Digital Security

### Why Do We Hack Cars?
- **Related Work:**
  - "Comprehensive Experimental Analyses of Automotive Attack Surfaces"
  - "Experimental Security Analysis of a Modern Automobile"
- **Understanding Vehicle Systems:**
  - The underlying CAN protocol and components lack authentication and verification.
  - Identifying potential vulnerabilities in vehicle network security, which is still in its infancy.
- **Primary Goal:**
  - To prevent malicious attacks that could turn a safe driving experience into a dangerous one.

### CAN Clock Project
- **Overview:**
  - A proof-of-concept research project aimed at manipulating CAN nodes via the CAN network.
  - Focuses on reverse engineering CAN messages using a 2003 Mini Cooper as the test vehicle.

### Background of Vehicle Communication Networks
- **History:**
  - Began in the 1980s with General Motors.
- **Common Protocols:**
  - **CAN (Controller Area Network):** Most widely used by manufacturers.
  - **FlexRay, KW2000, LIN, J1850 (GM/Chrysler), J1939 (Heavy Trucks), J1708/J1587 (Phased out due to J1939).**
- **Mandates:**
  - By 2008, all U.S. cars use CAN for EPA-mandated diagnostics.

### Controller Area Networks (CAN)
- **Bosch CAN Standard:**
  - Developed in the 1980s.
  - European manufacturers were early adopters.
- **Standard Format:**
  - 11-bit ID header.
  - Manufacturers use proprietary IDs for each CAN component.
- **Extended Format:**
  - 29-bit ID header.
  - Extensively used in J1939.

### CAN Frame Structure
- **Components:**
  - **SOF (Start of Frame)**
  - **Identifier:** Unique identifier for the message and priority.
  - **RTR (Remote Transmission Request)**
  - **IDE (Identifier Extension):** Distinguishes between standard and extended CAN.
  - **DLC (Data Length Code):** Up to 8 bytes of data.
  - **CRC (Cyclic Redundant Checksum)**
  - **ACK (Acknowledge)**
  - **EOF (End of Frame)**
  - **IFS (Intermission Frame Space)**

### Interconnected Vehicle Networks
- **Electronic Control Units (ECUs):**
  - **Control Functions:**
    - Safety systems (e.g., Engine control unit, ABS braking system, door locks).
    - Infotainment systems (e.g., Radio deck, HID units).
  - **Programmable ECUs:**
    - Allow manufacturers to update firmware.
  - **Average Modern Car:**
    - Contains approximately 70 ECUs.

### Reverse Engineering CAN Messages
- **Objective:**
  - Manipulate CAN-enabled vehicle components.
- **Challenge:**
  - Manufacturers do not publish CAN message ID information.
- **Solution:**
  - Visually correlate physical system interactions with identifiable patterns.
  - Brute force (tedious and messy).

### Data Collection and Analysis
- **Test Run:**
  - Staged automotive collision (Mini Cooper vs. GMC Envoy).
  - Data capture lasted approximately 90 seconds, resulting in ~106,000 CAN message entries.
- **Unique CAN IDs:**
  - Only 15 unique CAN IDs identified.
  - Example CAN IDs: 0x153, 0x1F0, 0x1F3, 0x1F5, 0x1F8, 0x316, 0x329, 0x61A, 0x61F.

### Identifying CAN Messages
- **Methods:**
  - Plot data values vs. timestamp to determine physical significance.
  - Fuzz data fields until changes are observed.
- **Identified CAN Message IDs:**
  - 0x153 Byte 2: Speedometer (Vehicle Speed)
  - 0x316 Byte 3: Tachometer (Engine Speed)
  - 0x329: Various indicator lights
  - 0x61A: Controls messages displayed on the tachometer LED screen
  - 0x61F: Tachometer and various indicator lights

### Building the CAN Network
- **Components:**
  - 18-gauge wire
  - 2 x 120-ohm terminating resistors
  - 12V DC power source
  - Arduino Uno microcontroller
  - CAN Bus Shield (MCP2515 CAN controller, MCP2551 CAN transceiver)
  - Mini Cooper Instrument Cluster
  - Real-time clock module (RTC)

### Proof of Concept
- **Arduino Setup:**
  - Libraries: MCP2515, SPI
  - Modes of Operation:
    - Clock Mode
    - Demo Mode

### Gaining Physical Access to CAN
- **Methods:**
  - Via OBD2 port
  - Tapping the CAN bus (vampire tap)
  - Under the hood or by breaking a powered side view mirror
- **Cost:**
  - Less than $100 for a rogue Arduino CAN node.
- **Potential Conspirators:**
  - Mechanics, car rentals, coworkers, family, friends, ex-girlfriends, etc.

### Future Work and Conclusion
- **Access Control:**
  - Between ECU to ECU and OBD2 to ECU.
- **Security Measures:**
  - Applying conventional NIPS and firewall methods to CAN.
  - Context-based message anomaly prevention.

### For More Information
- **TU Research:**
  - [Institute for Information Security](http://isec.utulsa.edu/)
  - [Crash Reconstruction Research Consortium](http://tucrrc.utulsa.edu/)
  - [CAN Clock Project](http://tucrrc.utulsa.edu/canclock/)
- **CAN Standards/Documentation:**
  - [CAN 2.0 Specification](http://esd.cs.ucr.edu/webres/can20.pdf)
  - [SAE International Standards](http://www.sae.org/standards/)

### Questions?
- **Contact:**
  - PI: EMAIL