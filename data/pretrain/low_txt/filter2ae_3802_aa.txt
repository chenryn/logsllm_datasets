**作者：天融信阿尔法实验室  
原文链接：**

### 概述
CVE-2022-21882 是一个存在于 Windows 系统中的本地提权漏洞，该漏洞在 2022 年 1 月的安全更新中被微软修复。本文将深入探讨此漏洞的成因及利用方法。

### 1. 漏洞介绍
CVE-2022-21882 实际上是对 CVE-2021-1732 的绕过，属于 win32k 驱动程序中的类型混淆漏洞。攻击者可以在用户模式下通过调用特定的 GUI API（如 `xxxMenuWindowProc`、`xxxSBWndProc`、`xxxSwitchWndProc` 和 `xxxTooltipWndProc`）触发内核回调 `xxxClientAllocWindowClassExtraBytes`。通过挂钩 `KernelCallbackTable` 中的 `xxxClientAllocWindowClassExtraBytes`，攻击者可以拦截这一回调，并使用 `NtUserConsoleControl` 方法设置 `tagWNDK` 对象的 `ConsoleWindow` 标志，从而改变窗口类型。由于系统在回调后不会验证窗口类型的变更，导致类型混淆，引用了错误的数据。这种情况下，`tagWNDK.pExtraBytes` 在标志修改前被视为用户模式指针，在修改后则被误认为是内核桌面堆的偏移量，从而允许攻击者控制这个偏移量，引发越界读写（R&W）。

本文主要分析了该漏洞的具体成因及其利用技术，重点在于动态调试和实际利用过程的解析。

### 2. 受影响版本
- Windows 10 Version 21H2 (x64, ARM64, 32-bit)
- Windows 11 (ARM64, x64)
- Windows Server, version 20H2 (Server Core Installation)
- Windows 10 Version 20H2 (ARM64, 32-bit, x64)
- Windows 10 Version 21H1 (ARM64, x64)
- Windows 10 Version 1909 (x64, 32-bit)
- Windows Server 2019 (Server Core installation, Full installation)
- Windows 10 Version 1809 (ARM64, x64, 32-bit)
- Windows 10 Version 21H1 (32-bit)
- Windows Server 2022 (Server Core installation, Full installation)

### 3. 分析环境
- 操作系统: Windows 10 21H2 19044.1415 x64
- 虚拟化软件: Vmware 16.2.1
- 内核调试工具: VirtualKD-Redux 2020.4.0.0
- 调试器: Windbg 10.0.22000.194

### 4. 背景知识
本节详细介绍了与创建窗口相关的数据结构和函数：
- **用户态窗口类定义** (`WNDCLASSEXW`)：重点关注 `cbWndExtra` 字段。
- **内核态窗口数据结构** (`tagWND` 和 `tagWNDK`)：特别关注 `tagWNDK` 结构体。
- **用户态API** (`SetWindowLong`)：用于设置窗口扩展内存数据。

#### 窗口类属性结构
```c
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;             // 结构体大小
    ...
    UINT        style;              // 窗口风格
    WNDPROC     lpfnWndProc;        // 处理窗口消息的回调函数地址
    int         cbClsExtra;         // 此类所有实例共享的额外内存大小
    int         cbWndExtra;         // 单个窗口实例的额外内存大小
    LPCWSTR     lpszClassName;      // 类名
    ...
} WNDCLASSEXW;
```

当 `cbWndExtra` 不为零时，系统会在创建窗口时分配相应大小的内存区域。若在此过程中回调至用户态申请空间，则可能触发漏洞。

#### 内核态窗口数据结构
- `tagWND` 结构体：保存窗口的基本信息。
- `tagWNDK` 结构体：包含关键字段如 `hWnd`、`OffsetToDesktopHeap`、`dwExtraFlag` 和 `pExtraBytes`。

其中，`pExtraBytes` 字段根据 `dwExtraFlag` 的值有两种寻址模式：
- **间接寻址**：当 `dwExtraFlag & 0x800 != 0` 时，表示当前窗口为控制台窗口，此时 `pExtraBytes` 作为相对于内核桌面堆基址的偏移量。
- **直接寻址**：当 `dwExtraFlag & 0x800 == 0` 时，表示当前窗口为GUI窗口，此时 `pExtraBytes` 直接指向用户态内存区域。

此外，`SetWindowLong` 函数会检查索引是否越界，以确保操作安全。

> 总结：
>
> - `xxxSetWindowLong` 设置扩展内存数据时，存在两种模式：间接寻址（基于内核桌面堆）和直接寻址（用户态内存）。
> - 若索引超出 `cbWndExtra` 范围，`xxxSetWindowLong` 将返回索引越界错误。