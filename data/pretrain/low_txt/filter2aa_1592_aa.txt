# .NET Malware Threat: Internals and Reversing
## DEF CON USA 2019
### Alexandre Borges â€“ Malware and Security Researcher

---

**About the Speaker:**
- **Alexandre Borges** is a malware and security researcher.
- **Speaking Engagements:**
  - DEF CON USA 2018
  - DEF CON China 2019
  - CONFidence Conference 2019 (Poland)
  - HITB 2019 Amsterdam
  - BSIDES 2016, 2017, 2018, 2019
  - H2HC 2015, 2016
  - BHACK 2018
- **Professional Roles:**
  - Consultant, instructor, and speaker on malware analysis, memory analysis, digital forensics, and rootkits.
  - Reviewer for *The Journal of Digital Forensics, Security and Law*.
  - Referee for *Digital Investigation: The International Journal of Digital Forensics & Incident Response*.

**Agenda:**
- Introduction
- Managed executable structures
- CLR and Assembly Loader details
- .NET internals metadata
- Modules, assemblies, and manifest
- .NET program structures
- Malicious code through MSIL
- .NET debugging
- Few GC and synchronous aspects
- Conclusion

---

**Recent Talks and Resources:**
- **CONFidence Conference 2019:**
  - [Bio](https://confidence-conference.org/2019/bio.html#id=37486)
  - [Slides](http://www.blackstormsecurity.com/CONFIDENCE_2019_ALEXANDRE.pdf)
- **DEF CON China 2019:**
  - [Speakers](https://www.defcon.org/html/dc-china-1/dc-cn-1-speakers.html#Borges)
  - [Slides](http://www.blackstormsecurity.com/docs/DEFCON_CHINA_ALEXANDRE.pdf)
- **HITB Amsterdam 2019:**
  - [Speakers](https://conference.hitb.org/hitbsecconf2019ams/speakers/alexandre-borges/)
  - [Slides](http://www.blackstormsecurity.com/docs/HITB_AMS_2019.pdf)
- **DEF CON USA 2018:**
  - [Speakers](https://www.defcon.org/html/defcon-26/dc-26-speakers.html#Borges)
  - [Slides](http://www.blackstormsecurity.com/docs/DEFCON2018.pdf)
- **Malwoverview Tool:**
  - [GitHub](https://github.com/alexandreborges/malwoverview)

---

## Introduction

**Motivations for Discussing .NET Reversing and Internals:**
- Professionals often focus on unpacking embedded resources from .NET samples.
- Sometimes, the goal is to dump the unpacked binary from memory.
- Other times, the aim is to dynamically unpack encrypted content.
- While these actions are correct and recommended, many people lack an understanding of .NET metadata components.
- Most analyses are based on decompiled code rather than Intermediate Language (IL).
- Malware authors manipulate IL to attack and even the runtime.

**Infection Techniques:**
- .NET malware can infect systems in various ways, often by decrypting and loading native code or injecting code into target processes.
- Indirect techniques involve:
  - An email with a dropper that fetches an encrypted payload.
  - The payload executes and injects a DLL into a remote process.
  - The DLL loads and decrypts the malicious managed code.
  - The malicious managed code drops the final payload, initiating the true infection.

**Code Injection Steps:**
- Common steps include using `CreateToolhelp32Snapshot`, `Module32First`, `Module32Next`, `wcscmp`, `VirtualAllocEx`, `WriteProcessMemory`, `CreateRemoteThread`, `WaitForSingleObject`, and `VirtualFreeEx`.
- The offset of the injected DLL is found from the base module, and functions are invoked using `GetProcAddress` and `CreateRemoteThread`.
- The injected DLL can load and decrypt the next stage.
- .NET managed code can be loaded from any process or even from a native injected code (DLL).

**Loading .NET Runtime:**
- A typical native application can load the .NET runtime and execute managed code using:
  - `CLRCreateInstance`: Provides the `ICLRMetaHost` interface.
  - `ICLRMetaHost::GetRuntime`: Gets the `ICLRRuntimeInfo`.
  - `ICLRRuntimeInfo::GetInterface`: Loads the CLR and returns runtime interface pointers.
  - `ICLRRuntimeHost::ExecuteApplication`: Specifies the application to be activated in a new domain.
  - `ICLRRuntimeHost::Start`: Starts the runtime.
  - `ICLRRuntimeHost::ExecuteInDefaultAppDomain`: Invokes a method in the .NET managed assembly.

**.NET Framework Components:**
- **CLR (Common Language Runtime)**: The .NET engine.
- **Libraries**: Such as `System.IO`, `System.Reflection`, `System.Collections`, etc.
- **Source Code**: Written in C#, F#, VB.NET, and PowerShell.
- **Compilation**: Source code is compiled to CLI (Common Language Infrastructure) code.
- **Execution**: Executed by the CLR.

**Tools for .NET Malware Analysis:**
- **Reversing and Analyzing Tools:**
  - dnSpy
  - ILSpy
  - RedGate .NET Reflector
  - De4dot (deobfuscator)
  - Microsoft Visual Studio
  - WinDbg (including SOS.dll extension)
  - DotPeek
  - IDA Pro
  - Microsoft ILASM/ILDASM (Intermediate Language Assembler/Disassembler)

**Additional Tools:**
- MemoScope.Net: [GitHub](https://github.com/fremag/MemoScope.Net)
- Shed -- a .NET runtime inspector: [GitHub](https://github.com/enkomio/shed)
- SuperDump: [GitHub](https://github.com/Dynatrace/superdump)
- DumpMiner: [GitHub](https://github.com/dudikeleti/DumpMiner)
- MemAnalyzer: [GitHub](https://github.com/Alois-xx/MemAnalyzer)
- SharpLab: [Website](https://sharplab.io/)
- ObjectLayoutInspector: [GitHub](https://github.com/SergeyTeplyakov/ObjectLayoutInspector)

**Obfuscation Techniques:**
- **Control Flow Obfuscation and Dead/Junk Code Insertion**
- **Renaming**: Methods, fields, namespaces, metadata, external references.
- **Re-encoding**: Changing printable to unprintable characters.
- **Simple Encryption**: Methods and strings.
- **Cross Reference Obfuscation**

**Obfuscators:**
- .NET Reactor
- Salamander .NET Obfuscator
- Dotfuscator
- Smart Assembly
- CryptoObfuscator for .NET
- Agile
- ArmDot
- Babel for .NET
- Eazfuscator.NET
- Spice.Net
- Skater.NET

**Reflection and Loading Techniques:**
- **Reflection**: 
  - `System.Reflection.Assembly.Load`
  - `System.Reflection.Assembly.LoadFile`
  - `System.Reflection.MethodInfo.Invoke`
- **Resource Loading**:
  - `FindResource + SizeOfResource + LoadResource + LockResource`
  - `Resources.ResourceManager.GetObject`
- **Assembly Loading**:
  - `AssemblyLoader.Attach + AssemblyLoader.ResolveAssembly`

**Metadata and Structures:**
- **MemberRef Table**: Refer to slide 27.
- **Manifest**: Describes the assembly's structure and dependencies.

**Reflection in Malware:**
- Malware often uses reflection to retrieve information at runtime, such as calling `GetExecutingAssembly` to get the current assembly object.

**Extracting and Decrypting Resources:**
- Tools like dnSpy and ILSpy can be used to extract and decrypt embedded resources.
- Reflexil plugin can be used to handle different obfuscators and manage references.

**Initialization and Entry Points:**
- **Module/Type Initializers**: Similar to TLS in native code, these execute before classes and entry points.
- **.cctor Method**: Static class constructor, called before the `Main` method.
- **JIT Engine Hijacking**: Hooking `ICorJitCompiler::compileMethod` to control the JIT engine.

**.NET Details:**
- **Metadata**: Describes types and members, helping the GC track object lifetimes.
- **Managed Executable Files**: Contain metadata and optionally managed code.
- **.NET Assembly**: Composed of modules, class libraries, and resource files.
- **CLR Runtime Environment**: Includes loaders and JIT compiler.

**Managed Module Structure:**
- **PE Header**: Contains basic file information.
- **CLR Header**: Includes CLR version, entry point token, and resources.
- **Metadata**: Describes types and members.
- **IL Code**: The managed code.

---

This presentation aims to provide a comprehensive overview of .NET malware, focusing on the internal structures and techniques used by malware authors, as well as the tools and methods for reversing and analyzing such threats.