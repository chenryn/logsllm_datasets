### Layer. Content Mutation and DOM Hiding

Content mutation, while not providing a cryptographically strong defense, can still help in obscuring site-specific, searchable content from being sent to the client's browser. On the other hand, DOM hiding allows a Veil-protected site to avoid sending any such content by only transmitting a minimal, generic representation of the page.

### CleanOS: Protecting Sensitive Data on Smartphones

CleanOS [66] is a specialized smartphone operating system designed to protect sensitive data when devices are lost or stolen. It defines sensitive data objects (SDOs) as Java objects and files containing private user information. CleanOS monitors which SDOs are not actively in use by an application and encrypts them, with the encryption key being sent to the cloud and deleted from the device. The key is retrieved only when the SDOs become active again. While SDOs could be a building block for private browsing, they are insufficient for implementing blinded references unless the SDO abstraction extends beyond the managed runtime to the entire OS.

### Lacuna and PrivExec: Private Sessions via VMs

Lacuna [17] implements private sessions by running applications within virtual machines (VMs). These VMs execute on top of the Lacuna hypervisor and a modified Linux host kernel. The hypervisor and host kernel together create "ephemeral" I/O channels, which allow VMs to communicate with hardware or trusted code, but only the endpoints can access raw data. User-mode host processes and most of the host kernel see only encrypted data. Lacuna also encrypts swap memory and, upon VM termination, zeroes out the VM's RAM space and discards ephemeral session keys. 

PrivExec [47] is similar to Lacuna but is implemented as an OS service rather than a hypervisor. Both systems offer stronger forensic deniability compared to Veil. However, they require end-users to install and configure a special runtime, and private applications cannot persist data across sessions due to the ephemeral nature of the keys.

### UCognito: Sandboxed File System for Private Browsing

UCognito [74] provides a sandboxed file system for private browsing sessions. This sandboxed file system sits on top of the native file system, absorbing writes made during the private session. Upon session termination, UCognito discards these writes. Like PrivExec and Lacuna, UCognito requires a modified client-side software stack. However, it does not protect against information leakage through non-sandboxed parts of the host OS, such as unmodified RAM artifacts that may page to the native swap file or DNS requests exposed to the host's name resolution subsystem.

### Collaborative Browsing and Veil's DOM Hiding Mode

Collaborative browsing frameworks [34], [52] enable multiple users with different browsers to interact with a shared view of a web page. Similar to these frameworks, Veil's DOM hiding mode must synchronize GUI inputs and rendering activities for a canonical version of the page. However, Veil supports only one remote viewer and exposes the client browser to generic JavaScript event handlers and a bitmap display. In contrast, prior collaborative browsing frameworks replicate a site-specific, canonical DOM tree on each client browser and do not use blinding servers to hide information from client-side, name-centric interfaces like the DNS cache.

### Conclusions

Veil is the first web framework that allows developers to implement private-session semantics for their pages. Using the Veil compiler, developers can rewrite pages so that all content is hosted by blinding servers, which provide name indirection to prevent sensitive information from leaking to client-side, name-based system interfaces. Blinding servers mutate content to make object fingerprinting more difficult, and rewritten pages automatically encrypt client-side persistent storage and walk the heap to reduce the likelihood of in-memory RAM artifacts swapping to disk in cleartext form. In the extreme, Veil transforms a page into a thin client with no page-specific, searchable RAM artifacts. By automating much of the effort required to port a page to Veil, it makes it easier for web developers to enhance the privacy protections of their applications.

### References

[1] A. Hidayat, “PhantomJS: Full web stack—No browser required,” 2017, http://phantomjs.org/.

[2] G. Aggarwal, E. Burzstein, C. Jackson, and D. Boneh, “An Analysis of Private Browsing Modes in Modern Browsers,” In Proceedings of USENIX Security, Washington, DC, August 2010.

[3] D. Akhawe, P. Saxena, and D. Song, “Privilege Separation in HTML5 Applications,” In Proceedings of USENIX Security, Bellevue, WA, August 2012.

[4] Angular.js, “Angular: A Superheroic JavaScript MVW Framework,” https://angularjs.org/, 2014.

[5] Apache Software Foundation, “ab: Apache HTTP Server Benchmarking Tool,” https://httpd.apache.org/docs/2.4/programs/ab.html, 2017.

[6] Backbone, “Backbone.js,” http://backbonejs.org/, 2017.

[7] B. Biggio, G. Fumera, I. Pillai, and F. Roli, “A Survey and Experimental Evaluation of Image Spam Filtering Techniques,” Pattern Recognition Letters, vol. 32, no. 10, July 2011.

[8] M. Blaze, “A Cryptographic File System for Unix,” In Proceedings of CCS, Fairfax, VA, November 1993.

[9] Blue Spire Inc., “Aurelia,” 2017, http://aurelia.io/.

[10] A. Buell, “Linux Framebuffer HOWTO,” August 5, 2010, http://www.tldp.org/HOWTO/html_single/Framebuffer-HOWTO/#AEN134.

[11] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum, “Shredding Your Garbage: Reducing Data Lifetime Through Secure Deallocation,” In Proceedings of USENIX Security, Baltimore, MD, August 2005.

[12] CoffeeScript, “CoffeeScript: A Little Language that Compiles to JavaScript,” October 26, 2017, http://coffeescript.org/.

[13] D. Crockford, “The application/json Media Type for JavaScript Object Notation (JSON),” RFC 4627 (Draft Standard), July 2006.

[14] C. Curtsinger, B. Livshits, B. Zorn, and C. Seifert, “Zozzle: Fast and Precise In-Browser JavaScript Malware Detection,” In Proceedings of USENIX Security, San Francisco, CA, August 2011.

[15] R. Dingledine, N. Mathewson, and P. Syverson, “Tor: The Second-Generation Onion Router,” In Proceedings of USENIX Security, San Diego, CA, August 2004.

[16] DuckDuckGo, “Take back your privacy! Switch to the search engine that doesn’t track you.” 2017, https://duckduckgo.com/about.

[17] A. Dunn, M. Lee, S. Jana, S. Kim, M. Silberstein, Y. Xu, V. Shmatikov, and E. Witchel, “Eternal Sunshine of the Spotless Machine: Protecting Privacy with Ephemeral Channels,” In Proceedings of OSDI, Vancouver, BC, Canada, November 2010.

[18] Enigma, “Secure Data and Protect Privacy Without Compromising Functionality,” 2015, https://www.media.mit.edu/projects/enigma.

[19] E. Felten and M. Schneider, “Timing Attacks on Web Privacy,” In Proceedings of CCS, Athens, Greece, November 2000.

[20] T. Flach, N. Dukkipati, A. Terzis, B. Raghavan, N. Cardwell, Y. Cheng, A. Jain, S. Hao, E. Katz-Bassett, and R. Govindan, “Reducing Web Latency: The Virtue of Gentle Aggression,” In Proceedings of SIGCOMM, August 2013.

[21] Google, “PageSpeed Module Documentation: Sprite Images,” https://developers.google.com/speed/pagespeed/module/filter-image-sprite, 2014.

[22] ——, “Network Analysis Reference,” 2017, https://developers.google.com/web/tools/chrome-devtools/network-performance/reference.

[23] K. Harrison and S. Xu, “Protecting Cryptographic Keys From Memory Disclosure Attacks,” In Proceedings of DSN, Edinburgh, UK, June 2007.

[24] M. Heiderich, E. Nava, G. Heyes, and D. Lindsay, Web Application Obfuscation. Syngress, 2010.

[25] A. Hidayat, “Esprima: ECMAScript Parsing Infrastructure for Multi-purpose Analysis,” 2017, https://github.com/ariya/esprima.

[26] L. Ingram, “TreeHouse,” December 2012, https://github.com/lawnsea/TreeHouse.

[27] L. Ingram and M. Walfish, “TreeHouse: JavaScript Sandboxes to Help Web Developers Help Themselves,” In Proceedings of USENIX ATC, Boston, MA, June 2012.

[28] D. Isacsson, “Microsoft Edge’s Incognito Mode Isn’t So Incognito,” February 1, 2016, Digital Trends. https://www.digitaltrends.com/web/microsoft-edge-security-flaws-in-incognito/.

[29] A. Janc and L. Olejnik, “Feasibility and Real-World Implications of Web Browser History Detection,” In Proceedings of the Web 2.0 Security and Privacy Workshop, Oakland, CA, May 2010.

[30] KeyCDN, “Domain Sharding,” August 19, 2016, https://www.keycdn.com/support/domain-sharding/.

[31] S. Lee, Y. Kim, J. Kim, and J. Kim, “Stealing Webpages Rendered on Your Browser by Exploiting GPU Vulnerabilities,” In Proceedings of IEEE Symposium on Security and Privacy, San Jose, CA, May 2014.

[32] B. Lerner, L. Elberty, N. Poole, and S. Krishnamurthi, “Verifying Web Browser Extensions’ Compliance with Private-Browsing Mode,” In Proceedings of ESORICS, Egham, United Kingdom, September 2013.

[33] D. Litzenberger, “PyCrypto: The Python Cryptography Toolkit,” June 23, 2014, https://github.com/dlitz/pycrypto.

[34] D. Lowet and D. Goergen, “Co-Browsing Dynamic Web Pages,” In Proceedings of WWW, Madrid, Spain, April 2009.

[35] Magnet Forensics, “How Does Chrome’s Incognito Mode Affect Digital Forensics?” August 6, 2013, http://www.magnetforensics.com/how-does-chromes-incognito-mode-affect-digital-forensics/.

[36] Mandiant, “Mandiant Redline Users Guide,” 2012, https://dl.mandiant.com/EE/library/Redline1.7_UserGuide.pdf.

[37] L. Masinter, “The ‘data’ URL scheme,” Network Working Group, RFC 2397, Aug. 1998.

[38] Meteor Development Group, “Meteor: The Fastest Way to Build JavaScript Apps,” 2017, https://www.meteor.com/.

[39] J. Mickens, “Silo: Exploiting JavaScript and DOM Storage for Faster Page Loads,” In Proceedings of USENIX WebApps, Boston, MA, June 2010.

[40] J. Mickens, J. Elson, and J. Howell, “Mugshot: Deterministic Capture and Replay for JavaScript Applications,” In Proceedings of NSDI, April 2010.

[41] J. Mickens and M. Finifter, “Jigsaw: Efficient, Low-effort Mashup Isolation,” In Proceedings of USENIX WebApps, Boston, MA, June 2012.

[42] Monkeys, “MonkeyTestJS: Automated Functional Testing for Front-end Web Development,” 2017, http://monkeytestjs.io/.

[43] Mozilla, “Content Security Policy (CSP),” November 20, 2017, mozilla Developer Network. https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP.

[44] ——, “Documentation: tabs.captureVisibleTab(),” 2017, https://developer.mozilla.org/en-US/Add-ons/WebExtensions/API/tabs/captureVisibleTab.

[45] M. Nielsen, “Clickmonkey,” 2017, https://www.npmjs.com/package/clickmonkey.

[46] D. Ohana and N. Shashidhar, “Do Private and Portable Web Browsers Leave Incriminating Evidence?” In Proceedings of the International Workshop on Cyber Crime, San Francisco, CA, May 2013.

[47] K. Onarlioglu, C. Mulliner, W. Robertson, and E. Kirda, “PrivExec: Private Execution as an Operating System Service,” In Proceedings of IEEE Symposium on Security and Privacy, San Francisco, CA, May 2013.

[48] OpenCV, “Open Source Computer Vision Library,” 2017, https://opencv.org/.

[49] E. Orion, “Tor popularity leaps after snooping revelations,” August 30, 2013, The Inquirer. http://www.theinquirer.net/inquirer/news/2291758/tor-popularity-leaps-after-snooping-revelations.

[50] A. Osmani, “Tab Discarding in Chrome: A Memory-Saving Experiment,” September 2015, Google Developer Blog. https://developers.google.com/web/updates/2015/09/tab-discarding.

[51] D. Parys, “How to Safeguard Your Site with HTML5 Sandbox,” Microsoft Developer Network. http://msdn.microsoft.com/en-us/hh563496.aspx, 2015.

[52] S. Pongelli, “Jigsaw: An Infrastructure for Cross-device Mashups,” ETH Zurich, Master’s thesis, November 6, 2013.

[53] Priv.io, “Priv.io homepage,” 2015, https://priv.io/.

[54] Priv.ly, “Change the Way Your Browser Works: Share Priv(ate).ly,” 2017, https://priv.ly/.

[55] Progress Software, “Kendo UI for jQuery,” https://docs.telerik.com/kendo-ui/, 2017.

[56] N. Provos, “Encrypting Virtual Memory,” In Proceedings of USENIX Security, Denver, CO, August 2000.

[57] L. Richardson, “Beautiful Soup: A Python Parser for HTML,” 2017, http://www.crummy.com/software/BeautifulSoup/.

[58] A. Rowstron and P. Druschel, “Pastry: Scalable, decentralized object location and routing for large-scale peer-to-peer systems,” In Proceedings of IFIP/ACM Middleware, Heidelberg, Germany, November 2001.

[59] J. Ruderman, “Same-origin Policy,” Mozilla Developer Network. https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy, August 1, 2014.

[60] Sahi, “Sahi Pro: The Tester’s Automation Tool,” 2017, http://sahipro.com/.

[61] SeleniumHQ, “Selenium: Browser Automation,” 2017, http://www.seleniumhq.org/.

[62] I. Stoica, R. Morris, D. Karger, M. F. Kaashoek, and H. Balakrishnan, “Chord: A Scalable Peer-to-peer Lookup Service for Internet Applications,” In Proceedings of SIGCOMM, San Diego, CA, August 2001.

[63] Q. Sun, D. Simon, Y. Wang, W. Russell, V. Padmanabhan, and L. Qiu, “Statistical Identification of Encrypted Web Browsing Traffic,” In Proceedings of IEEE Symposium on Security and Privacy, Berkeley, CA, May 2002.

[64] Y. Suzuki, “Escodegen: ECMAScript Code Generator,” 2017, https://github.com/Constellation/escodegen.

[65] P. Szor, “Advanced Code Evolution Techniques and Computer Virus Generator Kits,” InformIT. http://www.informit.com/articles/article.aspx?p=366890&seqNum=6, March 25, 2006.

[66] Y. Tang, P. Ames, S. Bhamidipati, A. Bijlani, R. Geambasu, and N. Sarda, “CleanOS: Limiting Mobile Data Exposure with Idle Eviction,” In Proceedings of OSDI, Hollywood, CA, October 2012.

[67] Tilde Inc., “Ember: A Framework for Creating Ambitious Web Applications,” https://emberjs.com/, 2017.

[68] Tor Project, “Tor Metrics: Performance,” https://metrics.torproject.org/torperf.html, November 28, 2017.

[69] W3C Web Apps Working Group, “Web Storage: W3C Working Draft,” http://www.w3.org/TR/webstorage/, April 19, 2016.

[70] ——, “Web Cryptography: W3C Working Draft,” January 26, 2017, http://www.w3.org/TR/WebCryptoAPI/.

[71] Z. Weinberg, E. Chen, P. Jayaraman, and C. Jackson, “I Still Know What You Visited Last Summer,” In Proceedings of IEEE Symposium on Security and Privacy, Oakland, CA, May 2011.

[72] W. Wong and M. Stamp, “Hunting for metamorphic engines,” Journal in Computer Virology and Hacking, vol. 2, no. 3, December 2006.

[73] C. Wright, S. Coull, and F. Monrose, “Traffic Morphing: An Efficient Defense against Statistical Traffic Analysis,” In Proceedings of NDSS, San Diego, CA, February 2009.

[74] M. Xu, Y. Jang, X. Xing, T. Kim, and W. Lee, “UCognito: Private Browsing without Tears,” In Proceedings of CCS, Denver, CO, October 2015.

[75] N. Yorker, “The New Yorker SecureDrop,” 2017, https://projects.newyorker.com/securedrop/.

[76] E. Zadok, I. Badulescu, and A. Shender, “Cryptfs: A Stackable Vnode Level Encryption File System,” Technical Report CUCS-021-98, University of California at Los Angeles, 1998.