### Inter-Process Communication and Isolated Worlds in Browser Extensions

When a content script needs to interact with the core process, it must send a message rather than directly calling a function within its own address space. Similarly, accessing the Document Object Model (DOM) from a content script requires crossing from the extension's isolated world to the page's world, which incurs an additional hash table lookup on some execution paths.

#### Evaluating Inter-Process Communication Overhead

To assess the runtime overhead of inter-process communication, we measured the round-trip latency for sending a message from a content script to the extension core and back in Google Chrome 4.0.249.22 on Mac OS X. Our results show an average round-trip latency of 0.8 ms (n = 100, σ = 0.0079 ms), with each trial being the average of 1,000 inter-process round-trips. This added latency is only incurred for operations that require coordination between multiple components. For example, an extension that adds EXIF metadata to Flickr images incurs this overhead once per page load to issue a cross-origin XMLHttpRequest, increasing the load time by an unnoticeable 0.8 ms.

#### Evaluating Isolated World Mechanism Overhead

To evaluate the runtime overhead of the isolated worlds mechanism, we ran a DOM core performance benchmark [19] in Chromium 4.0.266.0 on Mac OS X. The benchmark measures the total speed of a set of append, prepend, insert, index, and remove DOM operations. In the main world, the benchmark required an average of 231 ms (n = 100, σ = 5.46 ms) to complete. When run in an isolated world, the benchmark took an average of 309 ms (n = 100, σ = 6.33 ms). The use of isolated worlds increases DOM access time by 33.3% but does not affect layout and rendering time.

### Related Work

In addition to the Firefox extension system analyzed in this paper, Firefox has a second, experimental extension system: Jetpack [26]. Similar to the extension system we propose, Jetpack exposes browser functionality via narrow interfaces. Currently, each Jetpack extension runs with the user’s full privileges and has access to the complete Firefox extension API. As Jetpack matures, we expect the Firefox developers to restrict the privileges of Jetpack extensions, but the designers of Jetpack have chosen to focus first on usability and generativity [28].

#### Figures and Implementation Details

**Figure 7.** The normal one-to-one relation between DOM implementation objects and JavaScript representations.

**Figure 8.** The one-to-many relation caused by running content scripts in isolated worlds.

When a script modifies a non-standard DOM property, such as `document.foo`, the modification is not reflected in the other object. These rules help maintain the invariant that JavaScript objects (i.e., non-primitive values) are never transmitted between worlds.

The standard one-to-one relation is implemented using a hash table keyed by DOM implementation objects (depicted as black rectangles in the figures). For isolated worlds, we create a hash table for each world and choose which hash table to use based on the currently executing world. When entering the JavaScript virtual machine (e.g., when invoking a callback function registered via `setTimeout`), the browser must start executing the function in the proper world. If the browser executes the function in the wrong world, a JavaScript pointer could be leaked between worlds.

#### Internet Explorer's Extension System

Internet Explorer has a combined plug-in and extension system known as Browser Helper Object (BHO) modules. For example, the Yahoo Toolbar for Internet Explorer is implemented as a BHO. These extensions are written in native code and have direct access to the Win32 API. If a BHO has a vulnerability (such as a buffer overflow), a malicious website can exploit the vulnerability to issue arbitrary Win32 API calls. Recent versions of Internet Explorer run these BHOs in “protected mode,” [25] reducing their privileges. However, a compromised BHO still has full access to web pages (including passwords and cookies) and read access to the file system.

#### Other Research and Techniques

One recent paper [24] considers limiting the privileges of Firefox extensions. The authors propose a mechanism for sandboxing extensions by intercepting various events in the XPCOM object marshaling layer, incurring a performance overhead of 19% for a particular policy. Unlike our work, this paper focuses entirely on the mechanism and does not determine which policies their mechanism ought to enforce. We could reduce the privileges of Firefox extensions by using this mechanism to restrict extension behavior at the escalation points identified in Section 3.2.

Several papers [15, 34, 7, 16, 30] consider the problem of running native plug-in code securely using fault isolation and system call interposition. These techniques focus on isolating untrusted native code, whereas we focus on code written in JavaScript, allowing us to use the standard same-origin JavaScript sandbox. We are primarily concerned with the privileges afforded to extensions via explicit APIs, a topic that has not been studied in much detail. Their techniques for plug-in confinement are complementary to our work and could be used to monitor native binaries distributed with extensions.

Our work is also related to mashups, which are web pages that result from sophisticated communication and data sharing between multiple parties. In a sense, a browser is a mashup combining extension code and web content into a personalized browsing experience. Our design draws inspiration from MashupOS [31] and OMash [14], taking into account subsequent attacks and design recommendations [10]. Additionally, the isolated worlds heap-segregation mechanism is an outgrowth of the perspective expressed in [12]. Finally, placing the extension’s public key in the URL was suggested in [20] to remedy a vulnerability in Firefox’s signed JAR mechanism.

Browser extensions are analogous to kernel modules in operating systems. Buggy kernel modules have long been a major cause of failures and security vulnerabilities in operating systems. Nooks [29] and SafeDrive [35] employ memory access confinement to limit the privileges of kernel modules. Although the two problems are analogous, the techniques used are quite different.

### Conclusion

Browser extensions are often not written by security experts, and many contain security vulnerabilities. Every cross-site scripting vulnerability in a Firefox extension is a potential avenue for malicious websites to install malware onto the user’s machine because Firefox extensions run with the user’s full privileges. To evaluate whether extensions actually require such a high level of privilege to implement their feature set, we analyzed 25 "recommended" extensions from the Firefox extension gallery. We found that the majority of these extensions do not require full privileges. However, reducing the privileges of existing Firefox extensions is difficult because many Firefox APIs are more powerful than required to implement extension features.

Although one could imagine restructuring the Firefox extension interface, we instead recommend building a new extension platform with security in mind. In our proposed system, extensions enumerate which privileges they desire at install-time and are limited to those privileges at runtime. If an extension does not include a native binary (which most do not require), then an attacker who compromises the extension will not gain the privilege to run arbitrary code.

In addition to least privilege, we separate privileges by dividing extensions into three components: content scripts, the extension core, and a native binary. Content scripts are exposed directly to web content but have few privileges. Native binaries are powerful but (by default) have no direct contact with web content. The three components interact via narrow interfaces, reducing the attack surface for the privileged components. We expect vulnerabilities to exist, of course, but we hope they will be harder to exploit than a single cross-site scripting hole.

### Acknowledgments

We would like to thank Nick Baum, Erik Kay, Collin Jackson, Matt Perry, Dawn Song, David Wagner, and the Google Chrome Team. This work is partially supported by the Air Force Office of Scientific Research under MURI Grant No. 22178970-4170.

### References

[1] Arbitrary code execution using bug 459906.
https://bugzilla.mozilla.org/show_bug.cgi?id=460983.

[2] JSON. http://www.json.org.

[3] Mozilla Security Advisory 2009-19.
http://www.mozilla.org/security/announce/2009/mfsa2009-19.html.

[4] Mozilla Security Advisory 2009-39.
http://www.mozilla.org/security/announce/2009/mfsa2009-39.html.

[5] Skype. http://www.skype.com.

[6] Zemanta. http://www.zemanta.com.

[7] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-flow integrity: Principles, implementations, and applications. In ACM Conference on Computer and Communications Security (CCS), November 2005.

[8] L. Adamski. Security Severity Ratings. https://wiki.mozilla.org/Security_Severity_Ratings.

[9] B. Adida, A. Barth, and C. Jackson. Rootkits for JavaScript Environments. In 3rd USENIX Workshop on Offensive Technologies, 2009.

[10] A. Barth, C. Jackson, and W. Li. Attacks on JavaScript Mashup Communication. In Proceedings of the Web 2.0 Security and Privacy 2009.

[11] A. Barth, C. Jackson, C. Reis, and The Google Chrome Team. The Security Architecture of the Chromium Browser. Technical report, Google, 2008.

[12] A. Barth, J. Weinberger, and D. Song. Cross-Origin JavaScript Capability Leaks: Detection, Exploitation, and Defense. In USENIX Security Symposium, 2009.

[13] A. Boodman and E. Kay. Google Mail Checker. http://code.google.com/chrome/extensions/samples.html.

[14] S. Crites, F. Hsu, and H. Chen. Omash: Enabling secure web mashups via object abstractions. In CCS ’08: Proceedings of the 15th ACM conference on Computer and communications security, pages 99–108. ACM, 2008.

[15] J. R. Douceur, J. Elson, J. Howell, and J. R. Lorch. Leveraging legacy code to deploy desktop applications on the web. In USENIX Operating System Design and Implementation, 2008.

[16] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula. XFI: Software guards for system address spaces. In Symposium on Operating System Design and Implementation (OSDI), 2006.

[17] C. Grier, S. T. King, and D. S. Wallach. How I Learned to Stop Worrying and Love Plugins. In Web 2.0 Security and Privacy, 2009.

[18] C. Grier, S. Tang, and S. T. King. Secure Web Browsing with the OP Web Browser. In IEEE Symposium on Security and Privacy, 2008.

[19] I. Hickson. DOM Core Performance, Test 1. http://www.hixie.ch/tests/adhoc/perf/dom/artificial/core/001.html.

[20] C. Jackson and A. Barth. Beware of finer-grained origins. In Web 2.0 Security and Privacy, 2008.

[21] C. Jackson, A. Bortz, D. Boneh, and J. C. Mitchell. Protecting browser state from web privacy attacks. In Proceedings of the 15th International World Wide Web Conference (WWW), May 2006.

[22] kkovash. How Many Firefox Users Customize Their Browser? Blog of Metrics, 2009.

[23] R. S. Liverani and N. Freeman. Abusing Firefox Extensions. Defcon17, July 2009.

[24] M. T. Louw, J. S. Lim, and V. N. Venkatakrishnan. Enhancing web browser security against malware extensions. Journal in Computer Virology, August 2008.

[25] Microsoft Developer Network. Introduction of the Protected Mode API. http://msdn.microsoft.com/en-us/library/ms537319(VS.85).aspx.

[26] Mozilla Labs. Jetpack. https://wiki.mozilla.org/Labs/Jetpack.

[27] D. Pupius. Fittr Flickr Extension for Chrome. http://code.google.com/p/fittr/.

[28] A. Raskin. Jetpack FAQ. http://www.azarask.in/blog/post/jetpack-faq/, 2009.

[29] M. M. Swift, B. N. Bershad, and H. M. Levy. Improving the Reliability of Commodity Operating Systems. ACM Transactions on Computer Systems, 23(1):77–110, 2005.

[30] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham. Efficient Software-Based Fault Isolation. In ACM Symposium on Operating Systems Principles (SOSP), 1994.

[31] H. J. Wang, X. Fan, J. Howell, and C. Jackson. Protection and Communication Abstractions for Web Browsers in MashupOS. In 21st ACM Symposium on Operating Systems Principles (SOSP), 2007.

[32] H. J. Wang, C. Grier, A. Moshchuk, S. T. King, P. Choudhury, and H. Venter. The Multi-Principal OS Construction of the Gazell Web Browser. In USENIX Security Symposium, 2009.

[33] S. Willison. Understanding the Greasemonkey vulnerability. http://simonwillison.net/2005/Jul/20/vulnerability/.

[34] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar. Native Client: A sandbox for portable, untrusted x86 native code. In IEEE Symposium on Security and Privacy, 2009.

[35] F. Zhou, J. Condit, Z. Anderson, I. Bagrak, R. Ennals, M. Harren, G. Necula, and E. Brewer. SafeDrive: Safe and recoverable extensions using language-based techniquesXFI. In Symposium on Operating System Design and Implementation (OSDI), 2006.

### Appendix: Extension Survey

Our extension survey (Section 3.1) examines extensions from the Firefox Add-on "recommended" directory. We selected two from each category in the directory. The thirteen categories are: Alerts & Updates, Appearance, Bookmarks, Download Management, Feeds News & Blogging, Language Support, Photos Music & Videos, Privacy & Security, Search Tools, Social & Communication, Tabs, Toolbars, and Web Development.

The twenty-five extensions in our extension survey are:
- Adblock Plus 1.0.2
- Answers 2.2.48
- AutoPager 0.5.0.1
- Auto Shutdown (InBasic) 3.1.1B
- Babel Fish 1.84
- CoolPreviews 2.7.4
- Delicious Bookmarks 4.3
- Docked JS-Console 0.1.1
- DownloadHelper 4.3
- Download Statusbar 2.1.018
- File and Folder Shortcuts 1.3
- Firefox Showcase 0.3.2009040901
- Fission 1.3
- Glue 4.2.18
- GoogleEnhancer 1.70
- Image Tweak 0.18.1
- Lazarus: Form Recovery 1.0.5
- Mouseless Browsing 0.5.2.1
- Multiple Tab Handler 0.9.5
- Quick Locale Switcher 1.6.9
- Shareaholic 1.7
- Status-bar Scientific Calculator 4.5
- TwitterFox 1.7.7.1
- WeatherBug 2.0.0.4
- Zemanta 0.5.4