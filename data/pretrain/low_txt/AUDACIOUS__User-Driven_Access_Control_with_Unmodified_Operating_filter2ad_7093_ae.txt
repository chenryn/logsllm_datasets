### End of UI Rendering for Each Toggle Action

The end of UI rendering for each toggle action is evaluated for maximum frequencies ranging from 400 milliseconds to 4000 milliseconds. It is important to note that these frequencies represent the upper limits. For instance, at a frequency of 400 milliseconds, the random check occurs at a time randomly distributed between 0 and 400 milliseconds, with an average of 200 milliseconds. We compare this to a control version of Solar Compass where random checks are disabled. The results of this comparison are presented in Figure 7.

### Impact on UI Performance

Our findings indicate that the random checks are detrimental to UI performance only when they coincide with user interactions. This overlap causes delays in event processing and UI rendering. The likelihood of such overlaps increases at lower frequencies, leading to higher variance in event times and longer mean response times. As the frequency increases, the probability of these overlaps decreases, resulting in better performance at higher frequencies.

### Event Forgery in Real Applications

Applications often create or modify events or clicks for UI customization or upscaling. To investigate the prevalence of this practice, we analyzed the top 100 free applications in the Android app store. Our analysis revealed 1060 errors across 88 of the top 100 applications, averaging 10.6 errors per application. Of these, 218 errors were attributed to advertisement libraries or their dependencies. Most of these errors were related to unskippable video advertisements and interstitial advertisements, which may violate user expectations and require manual inspection. We anticipate that non-free applications will have fewer instances of event and click forgery due to the absence of advertisements.

### Related Work

Previous research has documented the shortcomings of permission models, particularly in Android [4, 8, 23, 30]. Our work builds on the concepts of user-driven access control and Access Control Graphs (ACGs), introduced by Roesner et al. [23], but also draws from earlier ideas like the powerbox [16, 26] for secure file picking. LayerCake [22] supports ACGs for Android, but it requires significant modifications to the operating system. In contrast, AUDACIOUS securely supports ACGs without modifying the OS.

Overhaul [17] addresses the challenges of deploying user-driven access control and retroactively implements a variant into existing operating systems. Other works explore similar ideas, including Gyrus [31], AppIntent [33], and the EROS Trusted Window System [25].

Felt et al. [7] argue that secure UIs should be combined with other permission-granting approaches based on the type of permission. In line with this, AUDACIOUS combines ACGs with information flow to support both user-driven access control and install-time manifests for flows not well-suited for ACGs in a particular app's context.

Recent work has addressed unwanted resource flow in Android. SPARTA [5], which AUDACIOUS leverages, statically verifies that applications use only the information flows declared by the developer in a policy file. TaintDroid [4] dynamically tracks information flows in Android. AppFence [9] uses TaintDroid to introduce privacy controls, allowing users to withhold data from applications and prohibit certain resources from flowing to the network. These tools do not guarantee that applications access the correct resources at the correct times based on user interaction.

ClickRelease [15] uses symbolic execution to verify policies that constrain resource usage based on user interaction. Rubin et al. [24] statically detect covert communication in Android applications. Unlike AUDACIOUS, these works do not enforce guarantees on the appearance of the UI during user interaction.

AsDroid [11] detects stealthy resource access by using program and text analysis to determine whether program behavior matches user expectations. While similar in spirit, AsDroid handles only a subset of the issues addressed by AUDACIOUS. Our techniques for handling dynamic UIs and programmatic clicks could be applied to improve AsDroid.

Jekyll on iOS [28] details attacks that pass application approval but introduce illegal information flows after installation. These attacks rely on violations of memory and type safety, which are not relevant to Java's managed environment. Since AUDACIOUS does not support native code, these attacks are not pertinent to our system.

Other relevant works include SUPOR [10], which statically detects the leakage of sensitive user inputs; AutoCog [21] and WHYPER [19], which assess permission-to-description fidelity; and Quire [3], which dynamically provides provenance for on-device IPCs. Many other studies have used program analysis to detect malicious behaviors in Android applications (e.g., [29, 32, 34]).

### Conclusions and Future Work

Previous work on user-driven access control has relied on major OS modifications, which pose a barrier to deployability. We designed a system for user-driven access control without modifying the OS, combining a secure library with program analysis to ensure that applications use ACGs correctly. Our approach enables applications to integrate user-driven access control with other access control models. We demonstrated that this approach can handle most classes of attacks without OS support, although limited OS support is beneficial in preventing some attacks.

We implemented our design in Android and integrated it with existing applications, identifying techniques to minimize the analysis burden for developers and design considerations for future libraries. Our evaluation shows that many applications already use ACG-like UI elements, and integrating the library can decrease code size. Even the simplest applications benefit from flexible permission models.

**Future Work:**
- Assess the acceptability of UI transformations statically, which would benefit existing works relying on manual image comparison [9, 24].
- Conduct a large-scale evaluation of how applications interact with resource APIs and ACG-like UI elements to inform future design decisions.
- Provide developers with the option to mark existing UI elements and verify their behaviors, rather than relying on a secure library.
- Consider the insufficiency of random checks for some attacks involving mouse pointers in desktop OSes [12].
- Repurpose FlowTwist [14], a static taint analysis for Java, as an alternative to the conservative event analysis, addressing the primary barrier of compatibility with recent Android APIs.
- Extend ACGs and event analysis to cover accessibility and voice interactions, leveraging the use of Fragments with minimal changes.
- Securely relax the restrictions AUDACIOUS places on ACG UIs in future work.

### Acknowledgements

We thank Michael Ernst and Suzanne Millstein for their help in integrating SPARTA into AUDACIOUS. We also thank Julia Rubin, Kris Micinski, and Zach Tatlock for stimulating discussions about acceptable UI transformations. We are grateful to all the students in the UW PLSE and Security labs who provided feedback on early revisions.

### References

[1] Android. http://developer.android.com/about/dashboards/index.html, 2016. Accessed: 2016-05-03.
[2] P. Barros, R. Just, S. Millstein, P. Vines, W. Dietl, M. d’Amorim, and M. D. Ernst. Static analysis of implicit control flow: Resolving Java reflection and Android intents. In 30th International Conference on Automated Software Engineering, 2015.
[3] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire: Lightweight provenance for smart phone operating systems. In 20th USENIX Conference on Security, 2011.
[4] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel, and A. N. Sheth. Taintdroid: An information-flow tracking system for real-time privacy monitoring on smartphones. In 9th USENIX Conference on Operating Systems Design and Implementation, 2010.
[5] M. D. Ernst, R. Just, S. Millstein, W. Dietl, S. Pernsteiner, F. Roesner, K. Koscher, P. B. Barros, R. Bhoraskar, S. Han, P. Vines, and E. X. Wu. Collaborative verification of information flow for a high-assurance app store. In ACM Conference on Computer and Communications Security, 2014.
[6] Federal Trade Commission. Android flashlight app developer settles FTC charges it deceived consumers, Dec. 2013. https://www.ftc.gov/news-events/press-releases/2013/12/android-flashlight-app-developer-settles-ftc-charges-it-deceived.
[7] A. P. Felt, S. Egelman, M. Finifter, D. Akhawe, and D. Wagner. How to ask for permission. In 7th USENIX Workshop on Hot Topics in Security, 2012.
[8] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner. Android Permissions: User Attentions, Comprehension, and Behavior. In Symposium on Usable Privacy and Security, 2012.
[9] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. “These aren’t the droids you’re looking for:” retrofitting Android to protect data from imperious applications. In ACM Conference on Computer and Communications Security, 2011.
[10] J. Huang, Z. Li, X. Xiao, Z. Wu, K. Lu, X. Zhang, and G. Jiang. Supor: Precise and scalable sensitive user input detection for Android apps. In 24th USENIX Security Symposium, 2015.
[11] J. Huang, X. Zhang, L. Tan, P. Wang, and B. Liang. Asdroid: Detecting stealthy behaviors in android applications by user interface and program behavior contradiction. In 36th International Conference on Software Engineering, 2014.
[12] L.-S. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and C. Jackson. Clickjacking: Attacks and defenses. In 21st USENIX Security Symposium, 2012.
[13] M. Lange, S. Liebergeld, A. Lackorzynski, A. Warg, and M. Peter. L4android: A generic operating system framework for secure smartphones. In ACM Workshop on Security and Privacy in Smartphones and Mobile Devices, 2011.
[14] J. Lerch, B. Hermann, E. Bodden, and M. Mezini. Flowtwist: Efficient context-sensitive inside-out taint analysis for large codebases. In 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, 2014.
[15] K. K. Micinski, J. Fetter-Degges, J. Jeon, J. S. Foster, and M. R. Clarkson. Checking interaction-based declassification policies for android using symbolic execution. CoRR, abs/1504.03711, 2015.
[16] M. S. Miller. Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control. PhD thesis, Johns Hopkins Univ., Baltimore, MD, USA, 2006.
[17] K. Onarlioglu, W. Robertson, and E. Kirda. Overhaul: Input-Driven Access Control for Better Privacy on Traditional Operating Systems. In IEEE/IFIP International Conference on Dependable Systems and Networks (DSN), 2016.
[18] Panda Security. Tapjacking - when the danger camouflages itself on Google Play. http://www.pandasecurity.com/mediacenter/tips/13973/, 2015.
[19] R. Pandita, X. Xiao, W. Yang, W. Enck, and T. Xie. Whyper: Towards automating risk assessment of mobile applications. In 22nd USENIX Conference on Security, 2013.
[20] Y. Qiu. Tapjacking: An untapped threat in Android. http://blog.trendmicro.com/trendlabs-security-intelligence/tapjacking-an-untapped-threat-in-android/, 2012.
[21] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen. Autocog: Measuring the description-to-permission fidelity in Android applications. In ACM Conference on Computer and Communications Security, 2014.
[22] F. Roesner and T. Kohno. Securing Embedded User Interfaces: Android and Beyond. In 22nd USENIX Security Symposium, 2013.
[23] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and C. Cowan. User-driven access control: Rethinking permission granting in modern operating systems. In IEEE Symposium on Security and Privacy, 2012.
[24] J. Rubin, M. I. Gordon, N. Nguyen, and M. Rinard. Covert communication in mobile applications (t). In Proceedings of the 2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE), 2015.
[25] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia. Design of the EROS Trusted Window System. In USENIX Security Symposium, 2004.
[26] M. Stiegler, A. H. Karp, K.-P. Yee, T. Close, and M. S. Miller. Polaris: Virus-Safe Computing for Windows XP. Communications of the ACM, 49:83–88, Sept. 2006.
[27] H. J. Wang, A. Moshchuk, and A. Bush. Convergence of Desktop and Web Applications on a Multi-Service OS. In USENIX Workshop on Hot Topics in Security, 2009.
[28] T. Wang, K. Lu, L. Lu, S. Chung, and W. Lee. Jekyll on iOS: When benign apps become evil. In 22nd USENIX Conference on Security, 2013.
[29] F. Wei, S. Roy, X. Ou, and Robby. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of Android apps. In ACM Conference on Computer and Communications Security, 2014.
[30] P. Wijesekera, A. Baokar, A. Hosseini, S. Egelman, D. Wagner, and K. Beznosov. Android permissions remystified: A field study on contextual integrity. In 24th USENIX Security Symposium, 2015.
[31] J. Yang, S. P. Chung, B. D. Payne, and W. Lee. Gyrus: A framework for user-intent monitoring of text-based networked applications. In NDSS Symposium, 2014.
[32] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck. Appcontext: Differentiating malicious and benign mobile app behaviors using context. In 37th International Conference on Software Engineering, 2015.
[33] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang. Appintent: Analyzing sensitive data transmission in Android for privacy leakage detection. In ACM Conference on Computer and Communications Security, 2013.
[34] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-aware Android malware classification using weighted contextual API dependency graphs. In ACM Conference on Computer and Communications Security, 2014.
[35] Y. Zhou and X. Jiang. Dissecting Android malware: Characterization and evolution. In IEEE Symposium on Security and Privacy, 2012.