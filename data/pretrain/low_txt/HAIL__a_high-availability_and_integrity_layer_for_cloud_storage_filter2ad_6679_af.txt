# HAIL: A High-Availability and Integrity Layer for Cloud Storage

## Total Number of Servers
- 20
- 22
- 23
- 24

## Availability and Reliability
- **Detection 0.9**
- **Detection 0.99**
- **Detection 0.999**
- **Detection 0.9999**
- **Detection 0.99999**
- **Detection 0.999999**

## Number of Primary Servers
- 10
- 11
- 12
- 13

### Figure 4: 
Probability that HAIL is unavailable for 8 primary servers (left) and 20 total servers (right) for b = 3 faults per epoch.
- **HAIL Encoding: 8 Primary Servers**
- **HAIL Encoding: 20 Total Servers**

### Encoding Time (in milliseconds)
- 450
- 400
- 350
- 300
- 250
- 200
- 150
- 100
- 50
- 0

#### Components:
- Other
- MAC
- Server PRP
- Server PRF
- Dispersal PRF
- Server Encoding
- Dispersal Encoding
- HAIL (15,8)
- HAIL (17,8)
- HAIL (19,8)
- HAIL (21,8)

### Figure 5: 
Encoding time for HAIL: on the left, 8 primary servers; on the right, 20 total servers.
- **HAIL (20,6)**
- **HAIL (20,8)**
- **HAIL (20,10)**
- **HAIL (20,12)**

## File Encoding and Redundancy
To achieve a Universal Hash Function (UHF) on 128 bits, we combine four blocks of size 32 bits, construct a polynomial of degree 4, and evaluate that polynomial at different random points to obtain four UHF outputs of size 32 bits.

To maximize the size of files that can be encoded efficiently using our algorithm, the file is first dispersed across the primary and secondary servers before applying the server code. Applying the server code involves a logical permutation of the file fragment using a Pseudorandom Permutation (PRP) and is more efficient if each server's fragment fits into main memory. For the server code, we use a (35, 32, 3) Cauchy Reed-Solomon code over GF[2^32] that adds 9% redundancy to data stored on each server.

Disk access is expensive and comprises 50% - 60% of our encoding time, depending on the parameters. In the graphs, I/O time has been removed to make other encoding functions more visible. Figure 5 shows the encoding cost of HAIL for a 1GB file divided into several components: Jerasure dispersal code application, Jerasure server code application, the application of a Pseudorandom Function (PRF) to the parity blocks in both the dispersal and server encoding, the time to logically rearrange the fragment on a server before applying the server code using a PRP, the computation of a Message Authentication Code (MAC) over the entire file, and additional data manipulations necessary to support the encoding functions. Reflecting parameter choices from Figure 4, on the left graph in Figure 5, we present the encoding cost as the number of primary servers remains constant at 8 and the total number of servers varies from 15 to 21. On the right graph in Figure 5, we keep the total number of servers constant at 20 and vary the number of primary servers between 6 and 12.

We achieve an encoding throughput between 2MB and 4MB per second, not including disk I/O time. As shown in Figure 5, the time spent performing dispersal code application using Jerasure is the dominant factor in file encoding speed (at least 50% of the total encoding cost, excluding I/O). For instance, for the (20,12) dispersal code, HAIL encoding throughput is 4MB per second, compared to 7MB per second given by the dispersal code encoding. For the (21,8) dispersal code, Jerasure encoding is 5MB per second, while HAIL achieves an encoding throughput of 2.5MB per second.

As the number of secondary servers increases, the dispersal cost increases linearly, both in terms of time spent in Jerasure and the time necessary to compute the required PRF values. The time spent to perform server encoding, including Jerasure application and PRP and PRF computation, increases linearly with the total amount of data to be encoded (the size of the dispersed file), which depends on both the number of primary and secondary servers.

## Conclusion
We have proposed HAIL, a high-availability and integrity layer that extends the basic principles of RAID into the adversarial setting of the Cloud. HAIL is a remote-file integrity checking protocol that offers efficiency, security, and modeling improvements over straightforward multi-server application of Proofs of Retrievability (POR) protocols and over previously proposed, distributed file-availability proposals. Through a careful interleaving of different types of error-correcting layers and inspired by proactive cryptographic models, HAIL ensures file availability against a strong, mobile adversary.

There are several interesting HAIL variants to explore in follow-up work. The protocols described above for HAIL only provide assurance for static files. We are currently investigating the design of similar protocols that accommodate file updates. We believe that the HAIL techniques introduced in this paper help pave the way for valuable approaches to distributed file system availability.

## Acknowledgements
We thank James Hendricks, Burt Kaliski, and Ron Rivest for carefully reading the paper and providing detailed comments and suggestions. We also thank Yevgeniy Dodis and Daniel Wichs for many insights on protocol design.

## References
1. Amazon.com. Amazon Simple Storage Service (Amazon S3), 2009. Referenced 2009 at aws.amazon.com/s3.
2. G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, and D. Song. Provable Data Possession at Untrusted Stores. In 14th ACM CCS, pages 598–609, 2007.
3. G. Ateniese, R. Di Pietro, L. V. Mancini, and G. Tsudik. Scalable and Efficient Provable Data Possession, 2008. IACR ePrint manuscript 2008/114.
4. J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and P. Rogaway. UMAC: Fast and Secure Message Authentication. In CRYPTO, volume 1666 of LNCS, pages 216–233, 1999.
5. K. D. Bowers, A. Juels, and A. Oprea. HAIL: A High-Availability and Integrity Layer for Cloud Storage, 2008. IACR ePrint manuscript 2008/489.
6. K. D. Bowers, A. Juels, and A. Oprea. Proofs of Retrievability: Theory and Implementation, 2008. IACR ePrint manuscript 2008/175.
7. C. Cachin, K. Kursawe, A. Lysyanskaya, and R. Strobl. Asynchronous Verifiable Secret Sharing and Proactive Cryptosystems. In 9th ACM CCS, pages 88–97, 2002.
8. C. Cachin and S. Tessaro. Asynchronous Verifiable Information Dispersal. In 24th IEEE SRDS, pages 191–202, 2005.
9. L. Carter and M. Wegman. Universal Hash Functions. Journal of Computer and System Sciences, 18(3), 1979.
10. R. Curtmola, O. Khan, and R. Burns. Robust Remote Data Checking. In 4th ACM StorageSS, pages 63–68, 2008.
11. R. Curtmola, O. Khan, R. Burns, and G. Ateniese. MR-PDP: Multiple-Replica Provable Data Possession. In 28th IEEE ICDCS, pages 411–420, 2008.
12. Y. Dodis, S. Vadhan, and D. Wichs. Proofs of Retrievability via Hardness Amplification. In 6th IACR TCC, volume 5444 of LNCS, pages 109–127, 2009.
13. C. Erway, A. Kupcu, C. Papamanthou, and R. Tamassia. Dynamic Provable Data Possession. In 16th ACM CCS, 2009. To appear.
14. M. Etzel, S. Patel, and Z. Ramzan. SQUARE HASH: Fast Message Authentication via Optimized Universal Hash Functions. In CRYPTO, volume 1666 of LNCS, pages 234–251, 1999.
15. D.L.G. Filho and P.S.L.M. Barreto. Demonstrating Data Possession and Uncheatable Data Transfer, 2006. IACR eArchive 2006/150.
16. J. A. Garay, R. Gennaro, C. Jutla, and T. Rabin. Secure Distributed Storage and Retrieval. Theoretical Computer Science, 243(1-2):363–389, 2000.
17. G. R. Goodson, J. J. Wylie, G. R. Ganger, and M. K. Reiter. Efficient Byzantine-Tolerant Erasure-Coded Storage. In 34th IEEE DSN, pages 135–144, 2004.
18. P. Gopalan, R.J. Lipton, and Y.Z. Ding. Error Correction Against Computationally Bounded Adversaries, 2004. Manuscript.
19. S. Halevi and H. Krawczyk. MMH: Software Message Authentication in the Gbit/second Rates. In Fast Software Encryption, volume 1267 of LNCS, pages 172–189, 1997.
20. J. Hendricks, G. R. Ganger, and M. K. Reiter. Verifying Distributed Erasure-Coded Data. In 26th ACM PODC, pages 139–146, 2007.
21. A. Herzberg, M. Jakobsson, H. Krawczyk, and M. Yung. Proactive Public Key and Signature Systems. In 4th ACM CCS, pages 100–110, 1997.
22. A. Herzberg, S. Jarecki, H. Krawczyk, and M. Yung. Proactive Secret Sharing, or: How to Cope with Perpetual Leakage. In CRYPTO, volume 1963 of LNCS, pages 339–352, 1995.
23. A. Juels and B. Kaliski. PORs: Proofs of Retrievability for Large Files. In 14th ACM CCS, pages 584–597, 2007.
24. H. Krawczyk. LFSR-Based Hashing and Authentication. In CRYPTO, volume 839 of LNCS, pages 129–139, 1994.
25. M. Lillibridge, S. Elnikety, A. Birrell, M. Burrows, and M. Isard. A Cooperative Internet Backup Scheme. In USENIX Annual Technical Conference, pages 29–41, 2003.
26. S. Micali, C. Peikert, M. Sudan, and D. Wilson. Optimal Error Correction Against Computationally Bounded Noise. In TCC, pages 1–16.
27. M. Naor and G. N. Rothblum. The Complexity of Online Memory Checking. In 46th IEEE FOCS, pages 573–584, 2005.
28. W. Nevelsteen and B. Preneel. Software Performance of Universal Hash Functions. In EUROCRYPT, volume 1233 of LNCS, pages 24–41, 1997.
29. J. S. Plank, J. Luo, C. D. Schuman, L. Xu, and Z. W. O’Hearn. A Performance Evaluation and Examination of Open-Source Erasure Coding Libraries for Storage. In 7th USENIX FAST, pages 253–265, 2009.
30. P. Rogaway. Bucket Hashing and Its Application to Fast Message Authentication. In CRYPTO, volume 963 of LNCS, pages 29–42, 1995.
31. T. J. E. Schwarz and E. L. Miller. Store, Forget, and Check: Using Algebraic Signatures to Check Remotely Administered Storage. In 26th IEEE ICDCS, page 12, 2006.
32. H. Shacham and B. Waters. Compact Proofs of Retrievability. In ASIACRYPT, volume 5350 of LNCS, pages 90–107, 2008.
33. M. A. Shah, M. Baker, J. C. Mogul, and R. Swaminathan. Auditing to Keep Online Storage Services Honest. In 11th USENIX HotOS, pages 1–6, 2007.
34. V. Shoup. On Fast and Provably Secure Message Authentication Based on Universal Hashing. In CRYPTO, volume 1109 of LNCS, pages 313–328, 1996.
35. M. Wegman and L. Carter. New Hash Functions and Their Use in Authentication and Set Equality. Journal of Computer and System Sciences, 22(3):265–279, 1981.