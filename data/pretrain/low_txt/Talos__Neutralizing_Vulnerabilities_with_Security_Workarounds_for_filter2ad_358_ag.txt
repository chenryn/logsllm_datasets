### Optimized Text

We consider Talos as an initial step towards addressing the pre-patch vulnerability window. Given its straightforward implementation and conservative assumptions, we find these results encouraging. We believe that the most effective way to enhance the performance of Software-Redirected Recovery (SWRR) mechanisms is by improving the identification of error-handling code or other safe code paths that SWRRs can redirect execution to. This will provide SWRRs with better basic coverage and, consequently, increase their overall effectiveness.

#### References

1. **Bug 3841 - Possible Symlink Race When Applying UserOwner to Newly Created Directory**
   - [Link](http://bugs.proftpd.org/show_bug.cgi?id=3841)

2. **Bugzilla for ProFTPD**
   - [Link](http://bugs.proftpd.org)

3. **Common Vulnerabilities and Exposures**
   - [Link](http://cve.mitre.org)

4. **Critical Patch Updates and Security Alerts**
   - [Link](http://www.oracle.com/technetwork/topics/security/alerts-086861.html#SecurityAlerts)

5. **CVE Details**
   - [Link](http://www.cvedetails.com)

6. **Database Speed Comparison**
   - [Link](http://www.sqlite.org/speed.html)

7. **Debian Bug Tracking System**
   - [Link](http://bugs.debian.org)

8. **lighttpd Vulnerability Exploit**
   - [Link](http://www.exploit-db.com/exploits/69562)

9. **Microsoft Security Bulletin**
   - [Link](http://technet.microsoft.com/en-us/security/bulletin/)

10. **National Vulnerability Database**
    - [Link](http://nvd.nist.gov)

11. **ProFTPD Backdoor Unauthorized Access**
    - [Link](http://www.osvdb.org/18295/)

12. **Apache HTTP Server Benchmarking Tool**
    - [Link](http://apache.org/docs/2.2/programs/ab.html)

13. **Apache httpd 2.4 Vulnerabilities**
    - [Link](http://httpd.apache.org/security/vulnerabilities_24.html)

14. **Apache httpd Vulnerability Exploit**
    - [Link](http://www.exploit-db.com/exploits/34133)

15. **pyftpd - Extremely Fast and Scalable Python FTP Server Library**
    - [Link](http://code.google.com/p/pyftpdlib/)

16. **Red Hat Bugzilla**
    - [Link](http://bugzilla.redhat.com)

17. **SecurityTracker**
    - [Link](http://securitytracker.com)

18. **Squid Invalid Version Number Vulnerability**
    - [Link](http://security-tracker.debian.org/tracker/CVE-2009-0478)

19. **Squid Range Headers Vulnerability Workaround**
    - [Link](http://www.squid-cache.org/Advisories/SQUID-2014_2.txt)

20. **Control-Flow Integrity**
    - M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti
    - In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS '05)
    - [Link](http://doi.acm.org/10.1145/1102120.1102165)

21. **Measuring, Analyzing, and Predicting Security Vulnerabilities in Software Systems**
    - O. H. Alhazmi, Y. K. Malaiya, and I. Ray
    - Comput. Secur., vol. 26, no. 3, pp. 219–228, May 2007
    - [Link](http://dx.doi.org/10.1016/j.cose.2006.10.002)

22. **From Patches to Honey-Patches: Lightweight Attacker Misdirection, Deception, and Disinformation**
    - F. Araujo, K. W. Hamlen, S. Biedermann, and S. Katzenbeisser
    - In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14)
    - [Link](http://doi.acm.org/10.1145/2660267.2660329)

23. **Before We Knew It: An Empirical Study of Zero-Day Attacks in the Real World**
    - L. Bilge and T. Dumitras
    - In Proceedings of the 2012 ACM Conference on Computer and Communications Security (CCS '12)
    - [Link](http://doi.acm.org/10.1145/2382196.2382284)

24. **Automatic Recovery from Runtime Failures**
    - A. Carzaniga, A. Gorla, A. Mattavelli, N. Perino, and M. Pezzè
    - In Proceedings of the 2013 International Conference on Software Engineering (ICSE '13)
    - [Link](http://dl.acm.org/citation.cfm?id=2486788.2486891)

25. **Moving Targets: Security and Rapid-Release in Firefox**
    - S. Clark, M. Collis, M. Blaze, and J. M. Smith
    - In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14)
    - [Link](http://doi.acm.org/10.1145/2660267.2660320)

26. **Bouncer: Securing Software by Blocking Bad Input**
    - M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado
    - In Proceedings of the Twenty-first ACM SIGOPS Symposium on Operating Systems Principles (SOSP '07)
    - [Link](http://doi.acm.org/10.1145/1294261.1294274)

27. **KCoFI: Complete Control-Flow Integrity for Commodity Operating System Kernels**
    - J. Criswell, N. Dautenhahn, and V. Adve
    - In Proceedings of the 2014 IEEE Symposium on Security and Privacy (SP '14)
    - [Link](http://dx.doi.org/10.1109/SP.2014.26)

28. **First-Aid: Surviving and Preventing Memory Management Bugs During Production Runs**
    - Q. Gao, W. Zhang, Y. Tang, and F. Qin
    - In Proceedings of the 4th ACM European Conference on Computer Systems (EuroSys '09)
    - [Link](http://doi.acm.org/10.1145/1519065.1519083)

29. **EIO: Error Handling is Occasionally Correct**
    - H. S. Gunawi, C. Rubio-González, A. C. Arpaci-Dusseau, R. H. Arpaci-Dusseau, and B. Liblit
    - In Proceedings of the Sixth USENIX Conference on File and Storage Technologies (FAST '08), San Jose, CA, February 2008

30. **Ocasta: Clustering Configuration Settings for Error Recovery**
    - Z. Huang and D. Lie
    - In Dependable Systems and Networks (DSN), 2014 44th Annual IEEE/IFIP International Conference on, June 2014, pp. 479–490

31. **A Systematic Study of Automated Program Repair: Fixing 55 Out of 105 Bugs for $8 Each**
    - C. Le Goues, M. Dewey-Vogt, S. Forrest, and W. Weimer
    - In Proceedings of the 2012 International Conference on Software Engineering, June 2012, pp. 3–13

32. **GenProg: A Generic Method for Automatic Software Repair**
    - C. Le Goues, T. Nguyen, S. Forrest, and W. Weimer
    - IEEE Transactions on Software Engineering, vol. 38, no. 1, pp. 54–72, Jan 2012

33. **Automatic Input Rectification**
    - F. Long, V. Ganesh, M. Carbin, S. Sidiroglou, and M. Rinard
    - In Proceedings of the 34th International Conference on Software Engineering (ICSE '12)
    - [Link](http://dl.acm.org/citation.cfm?id=2337223.2337233)

34. **Sound Input Filter Generation for Integer Overflow Errors**
    - F. Long, S. Sidiroglou-Douskos, D. Kim, and M. Rinard
    - In Proceedings of the 41st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL '14)
    - [Link](http://doi.acm.org/10.1145/2535838.2535888)

35. **Automatic Runtime Error Repair and Containment via Recovery Shepherding**
    - F. Long, S. Sidiroglou-Douskos, and M. Rinard
    - In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI '14)
    - [Link](http://doi.acm.org/10.1145/2594291.2594337)

36. **Data Execution Prevention (DEP)**
    - Microsoft
    - [Link](http://support.microsoft.com/kb/875352/EN-US/), 2006

37. **RockSalt: Better, Faster, Stronger SFI for the x86**
    - G. Morrisett, G. Tan, J. Tassarotti, J.-B. Tristan, and E. Gan
    - In Proceedings of the 2012 ACM SIGPLAN conference on Programming Language Design and Implementation (PLDI '12)
    - [Link](http://doi.acm.org/10.1145/2254064.2254111)

38. **Predicting Vulnerable Software Components**
    - S. Neuhaus, T. Zimmermann, C. Holler, and A. Zeller
    - In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS '07)
    - [Link](http://doi.acm.org/10.1145/1315245.1315311)

39. **SemFix: Program Repair via Semantic Analysis**
    - H. D. T. Nguyen, D. Qi, A. Roychoudhury, and S. Chandra
    - In Proceedings of the 2013 International Conference on Software Engineering (ICSE '13)
    - [Link](http://dl.acm.org/citation.cfm?id=2486788.2486890)

40. **Monitor Integrity Protection with Space Efficiency and Separate Compilation**
    - B. Niu and G. Tan
    - In Proceedings of the 2013 ACM SIGSAC Conference on Computer and Communications Security (CCS '13)
    - [Link](http://doi.acm.org/10.1145/2508859.2516649)

41. **RockJIT: Securing Just-in-Time Compilation Using Modular Control-Flow Integrity**
    - B. Niu and G. Tan
    - In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS '14)
    - [Link](http://doi.acm.org/10.1145/2660267.2660281)

42. **Stagefright 2.0 Targets Nearly Every Single Android Device**
    - PC Magazine
    - [Link](http://mobile.pcmag.com/networking/60449-stagefright-2-dot-0-targets-nearly-every-single-android-device), 2015

43. **There’s (Almost) Nothing You Can Do About Stagefright**
    - PC Magazine
    - [Link](http://mobile.pcmag.com/news/58468-theres-almost-nothing-you-can-do-about-stagefright), 2015

44. **Automatically Patching Errors in Deployed Software**
    - J. H. Perkins, S. Kim, S. Larsen, S. Amarasinghe, J. Bachrach, M. Carbin, C. Pacheco, F. Sherwood, S. Sidiroglou, G. Sullivan, W.-F. Wong, Y. Zibin, M. D. Ernst, and M. Rinard
    - In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles (SOSP '09)
    - [Link](http://doi.acm.org/10.1145/1629575.1629585)

45. **Enhancing Server Availability and Security Through Failure-Oblivious Computing**
    - M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and W. S. Beebee, Jr.
    - In OSDI'04: Proceedings of the 6th conference on Symposium on Opearting Systems Design & Implementation, Berkeley, CA, USA, 2004, pp. 21–21

46. **Living in the Comfort Zone**
    - M. C. Rinard
    - In Proceedings of the 22nd Annual ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications (OOPSLA '07)
    - [Link](http://doi.acm.org/10.1145/1297027.1297072)

47. **On the Effectiveness of Address-Space Randomization**
    - H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh
    - In Proceedings of the 11th ACM Conference on Computer and Communications Security (CCS), Oct. 2004, pp. 298–307

48. **Mitigating Program Security Vulnerabilities: Approaches and Challenges**
    - H. Shahriar and M. Zulkernine
    - ACM Computing Surveys, vol. 44, no. 3, pp. 11:1–11:46, Jun. 2012
    - [Link](http://doi.acm.org/10.1145/2187671.2187673)

49. **A Large Scale Exploratory Analysis of Software Vulnerability Life Cycles**
    - M. Shahzad, M. Z. Shaﬁq, and A. X. Liu
    - In Proceedings of the 34th International Conference on Software Engineering (ICSE '12)
    - [Link](http://dl.acm.org/citation.cfm?id=2337223.2337314)

50. **Evaluating Complexity, Code Churn, and Developer Activity Metrics as Indicators of Software Vulnerabilities**
    - Y. Shin, A. Meneely, L. Williams, and J. A. Osborne
    - IEEE Trans. Softw. Eng., vol. 37, no. 6, pp. 772–787, Nov. 2011
    - [Link](http://dx.doi.org/10.1109/TSE.2010.81)

51. **Using Execution Transactions to Recover from Buffer Overflow Attacks**
    - S. Sidiroglou, G. Giovanidis, and A. Keromytis
    - 2004
    - [Link](citeseer.ist.psu.edu/707478.html)

52. **Assure: Automatic Software Self-Healing Using Rescue Points**
    - S. Sidiroglou, O. Laadan, C. Perez, N. Viennot, J. Nieh, and A. D. Keromytis
    - In ASPLOS '09: Proceeding of the 14th international conference on Architectural support for programming languages and operating systems
    - [Link](http://doi.acm.org/10.1145/1508249.1508275)

53. **Robustness and Security Hardening of COTS Software Libraries**
    - M. Süsskraut and C. Fetzer
    - In The 37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN 2007), Edinburgh, UK, 2007, pp. 61–71
    - [Link](http://doi.ieeecomputersociety.org/10.1109/DSN.2007.84)

54. **Beyond the Rainbow: Self-Adaptive Failure Avoidance in Configurable Systems**
    - J. Swanson, M. B. Cohen, M. B. Dwyer, B. J. Garvin, and J. Firestone
    - In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2014)
    - [Link](http://doi.acm.org/10.1145/2635868.2635915)

55. **Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM**
    - C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson, L. Lozano, and G. Pike
    - In 23rd USENIX Security Symposium (USENIX Security 14), San Diego, CA, Aug. 2014, pp. 941–955
    - [Link](https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/tice)

56. **Efficient Software-Based Fault Isolation**
    - R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham
    - In ACM SIGOPS Operating Systems Review, vol. 27, no. 5, 1994, pp. 203–216

57. **Shield: Vulnerability-Driven Network Filters for Preventing Known Vulnerability Exploits**
    - H. J. Wang, C. Guo, D. R. Simon, and A. Zugenmaier
    - In Proceedings of the 2004 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (SIGCOMM '04)
    - [Link](http://doi.acm.org/10.1145/1015467.1015489)

58. **Automated Fixing of Programs with Contracts**
    - Y. Wei, Y. Pei, C. A. Furia, L. S. Silva, S. Buchholz, B. Meyer, and A. Zeller
    - In Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA '10)
    - [Link](http://doi.acm.org/10.1145/1831708.1831716)

59. **Automatically Finding Patches Using Genetic Programming**
    - W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest
    - In Proceedings of the 31st International Conference on Software Engineering (ICSE '09)
    - [Link](http://dx.doi.org/10.1109/ICSE.2009.5070536)

60. **Native Client: A Sandbox for Portable, Untrusted x86 Native Code**
    - B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy, S. Okasaka, N. Narula, and N. Fullagar
    - In Security and Privacy, 2009 30th IEEE Symposium on, 2009, pp. 79–93

61. **Simple Testing Can Prevent Most Critical Failures: An Analysis of Production Failures in Distributed Data-Intensive Systems**
    - D. Yuan, Y. Luo, X. Zhuang, G. R. Rodrigues, X. Zhao, Y. Zhang, P. U. Jain, and M. Stumm
    - In Proceedings of the 11th Symposium on Operating Systems Design and Implementation (OSDI), 2014, pp. 249–265

62. **Practical Control Flow Integrity and Randomization for Binary Executables**
    - C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou
    - In Security and Privacy (SP), 2013 IEEE Symposium on, May 2013, pp. 559–573

63. **Control Flow Integrity for COTS Binaries**
    - M. Zhang and R. Sekar
    - In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13), Washington, D.C., 2013, pp. 337–352
    - [Link](https://www.usenix.org/conference/usenixsecurity13/technical-sessions/presentation/Zhang)

64. **Automated Diagnosis of Configuration Errors**
    - S. Zhang and M. D. Ernst
    - In Proceedings of the 2013 International Conference on Software Engineering (ICSE '13)
    - [Link](http://dl.acm.org/citation.cfm?id=2486788.2486830)

---

**Acknowledgements**

We would like to express our gratitude to our shepherd Gang Tan and the anonymous reviewers for their constructive comments. We also extend our thanks to Ashvin Goel, Ding Yuan, Michelle Wong, and Sukwon Oh for their valuable suggestions and feedback. This work was partially supported by funds from a Canada Research Chair and an NSERC Discovery Grant.