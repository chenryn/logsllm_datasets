### Voltage Fault Attacks on AES

**References:**

1. **[1] Voltage fault attacks to AES.**
   - *In 2010 IEEE International Symposium on Hardware-Oriented Security and Trust (HOST). IEEE, Anaheim, CA, USA, 7–12.*

2. **[2] Alessandro Barenghi, Guido M. Bertoni, Luca Breveglieri, and Gerardo Pelosi.**
   - *2013. A fault induction technique based on voltage underfeeding with application to attacks against AES and RSA. Journal of Systems and Software 86, 7 (2013), 1864–1878.*

3. **[3] Alessandro Barenghi, Luca Breveglieri, Israel Koren, and David Naccache.**
   - *2012. Fault Injection Attacks on Cryptographic Devices: Theory, Practice, and Countermeasures. Proc. IEEE 100, 11 (Nov 2012), 3056–3076.*

4. **[4] Eli Biham and Adi Shamir.**
   - *1997. Differential fault analysis of secret key cryptosystems. In Advances in Cryptology — CRYPTO ’97, Burton S. Kaliski (Ed.). Springer, Berlin, Heidelberg, 513–525.*

5. **[5] Eli Biham and Adi Shamir.**
   - *2012. Differential cryptanalysis of the data encryption standard. Springer Science & Business Media, Berlin/Heidelberg, Germany.*

6. **[6] Johannes Blömer and Jean-Pierre Seifert.**
   - *2003. Fault Based Cryptanalysis of the Advanced Encryption Standard (AES). In Financial Cryptography. Springer, Berlin, Heidelberg, 162–181.*

7. **[7] Dan Boneh, Richard A. DeMillo, and Richard J. Lipton.**
   - *1997. On the Importance of Checking Cryptographic Protocols for Faults. In Advances in Cryptology — EUROCRYPT ’97, Walter Fumy (Ed.). Springer, Berlin, Heidelberg, 37–51.*

8. **[8] Klug Brian and Lal Shimpi Anand.**
   - *2011. Qualcomm’s New Snapdragon S4: MSM8960 & Krait Architecture Explored. Qualcomm. https://www.anandtech.com/show/4940/qualcomm-new-snapdragon-s4-msm8960-krait-architecture*

9. **[9] Aaron Carroll and Gernot Heiser.**
   - *2010. An Analysis of Power Consumption in a Smartphone. In Proceedings of the 2010 USENIX Conference on USENIX Annual Technical Conference (USENIXATC’10). USENIX Association, Berkeley, CA, USA, 21–21. http://dl.acm.org/citation.cfm?id=1855840.1855861*

10. **[10] Yue Chen, Yulong Zhang, Zhi Wang, and Tao Wei.**
    - *2017. Downgrade Attack on TrustZone. arXiv preprint arXiv 1707.05082 (2017), 26.*

11. **[11] Haehyun Cho, Penghui Zhang, Donguk Kim, Jinbum Park, Choong-Hoon Lee, Ziming Zhao, Adam Doupé, and Gail-Joon Ahn.**
    - *2018. Prime+Count: Novel Cross-world Covert Channels on ARM TrustZone. In Proceedings of the 34th Annual Computer Security Applications Conference (ACSAC ’18). ACM, New York, NY, USA, 441–452. https://doi.org/10.1145/3274694.3274704*

12. **[12] Victor Costan and Srinivas Devadas.**
    - *2016. Intel SGX Explained. IACR Cryptology ePrint Archive 2016, 086 (2016), 1–118.*

13. **[13] Franck Courbon, Philippe Loubet-Moundi, Jacques J. A. Fournier, and Assia Tria.**
    - *2014. Adjusting Laser Injections for Fully Controlled Faults. In Constructive Side-Channel Analysis and Secure Design, Emmanuel Prouff (Ed.). Springer International Publishing, Cham, 229–242.*

14. **[14] Blandine Debraize and Irene Marquez Corbella.**
    - *2009. Fault Analysis of the Stream Cipher Snow 3G. In 2009 Workshop on Fault Diagnosis and Tolerance in Cryptography (FDTC). IEEE, Lausanne, Switzerland, 103–110. https://doi.org/10.1109/FDTC.2009.33*

15. **[15] Amine Dehbaoui, Jean-Max Dutertre, Bruno Robisson, and Assia Tria.**
    - *2012. Electromagnetic Transient Faults Injection on a Hardware and a Software Implementations of AES. In 2012 Workshop on Fault Diagnosis and Tolerance in Cryptography(FDTC), Vol. 00. IEEE, Leuven, Belgium, 7–15. https://doi.org/10.1109/FDTC.2012.15*

16. **[16] Jeroen Delvaux and Ingrid Verbauwhede.**
    - *2014. Fault Injection Modeling Attacks on 65 nm Arbiter and RO Sum PUFs via Environmental Changes. IEEE Transactions on Circuits and Systems I: Regular Papers 61, 6 (June 2014), 1701–1713.*

17. **[17] ZB Du, Zhen WU, Min WANG, and JT Rao.**
    - *2015. Improved chosen-plaintext power analysis attack against SM4 at the round-output. Journal on Communications 36, 10 (2015), 85–91.*

18. **[18] Pierre Dusart, Gilles Letourneux, and Olivier Vivolo.**
    - *2003. Differential Fault Analysis on A.E.S. In Applied Cryptography and Network Security, Jianying Zhou, Moti Yung, and Yongfei Han (Eds.). Springer, Berlin, Heidelberg, 293–306.*

19. **[19] Jan-Erik Ekberg, Kari Kostiainen, and N Asokan.**
    - *2013. Trusted execution environments on mobile devices. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, ACM, Berlin, Germany, 1497–1498.*

20. **[20] Sho Endo, Takeshi Sugawara, Naofumi Homma, Takafumi Aoki, and Akashi Satoh.**
    - *2011. An on-chip glitchy-clock generator for testing fault injection attacks. Journal of Cryptographic Engineering 1, 4 (21 Oct 2011), 265. https://doi.org/10.1007/s13389-011-0022-y*

21. **[21] Ben Fisch, Dhinakaran Vinayagamurthy, Dan Boneh, and Sergey Gorbunov.**
    - *2017. Iron: functional encryption using Intel SGX. In Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security. ACM, ACM, Dallas, Texas, USA, 765–782.*

22. **[22] Peter Folkesson, Sven Svensson, and Johan Karlsson.**
    - *1998. A comparison of simulation based and scan chain implemented fault injection. In Digest of Papers. Twenty-Eighth Annual International Symposium on Fault-Tolerant Computing (Cat. No.98CB36224). IEEE, Munich, Germany, 284–293. https://doi.org/10.1109/FTCS.1998.689479*

23. **[23] Aurélien Francillon and Claude Castelluccia.**
    - *2008. Code Injection Attacks on Harvard-architecture Devices. In Proceedings of the 15th ACM Conference on Computer and Communications Security (CCS ’08). ACM, New York, NY, USA, 15–26. https://doi.org/10.1145/1455770.1455775*

24. **[24] Christophe Giraud.**
    - *2005. DFA on AES. In Advanced Encryption Standard – AES, Hans Dobbertin, Vincent Rijmen, and Aleksandra Sowa (Eds.). Springer, Berlin, Heidelberg, 27–41.*

25. **[25] Github 2015. Qsee privilege escalation exploit using prdiag* commands.**
    - *Github. https://github.com/laginimaineb/cve-2015-6639*

26. **[26] Github 2016. The exploit codes of CVE-2016-2431.**
    - *Github. https://github.com/laginimaineb/cve-2016-2431*

27. **[27] Google 2014. Qualcomm Krait PMIC regulator driver source code.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/arch/arm/mach-msm/krait-regulator-pmic.c*

28. **[28] Google 2014. Qualcomm Krait PMIC voltage regulator source code.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/arch/arm/mach-msm/krait-regulator.c*

29. **[29] Google 2014. Qualcomm SPM source code.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/arch/arm/mach-msm/spm-v2.c*

30. **[30] Google 2014. The regulator dtsi source file in Google Nexus 6.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/arch/arm/boot/dts/qcom/apq8084-regulator.dtsi*

31. **[31] Google 2015. The dtsi source file in Google Nexus 6.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/arch/arm/boot/dts/qcom/apq8084.dtsi*

32. **[32] Google 2015. Mincrypt library.**
    - *Google. https://android.googlesource.com/platform/system/core.git/+/android-6.0.1_r1/libmincrypt*

33. **[33] Google 2015. Qualcomm Krait CPUfreq driver source code.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/drivers/cpufreq/cpufreq.c*

34. **[34] Google 2015. Qualcomm Krait PMIC frequency driver source code.**
    - *Google. https://android.googlesource.com/kernel/msm/+/android-msm-shamu-3.10-lollipop-mr1/drivers/clk/qcom/clock-krait.c*

35. **[35] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard.**
    - *2016. Flush+Flush: A Fast and Stealthy Cache Attack. In Detection of Intrusions and Malware, and Vulnerability Assessment, Juan Caballero, Urko Zurutuza, and Ricardo J. Rodríguez (Eds.). Springer International Publishing, Cham, 279–299.*

36. **[36] Inki Hong, Darko Kirovski, Gang Qu, Miodrag Potkonjak, and Mani B Srivastava.**
    - *1999. Power optimization of variable-voltage core-based systems. IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems 18, 12 (Dec 1999), 1702–1714. https://doi.org/10.1109/43.811318*

37. **[37] Michael Hutter and Jörn-Marc Schmidt.**
    - *2013. The temperature side channel and heating fault attacks. In International Conference on Smart Card Research and Advanced Applications. Springer, Cham, 219–235.*

38. **[38] Philipp Jovanovic.**
    - *2013. Differential fault analysis framework for AES128. Github. https://github.com/Daeinar/dfa-aes*

39. **[39] Jonathan Katz, Alfred J. Menezes, Paul C. Van Oorschot, and Scott A. Vanstone.**
    - *1996. Handbook of applied cryptography. CRC press, Boca Raton, FL.*

40. **[40] Sebastian Krieter, Tobias Thiem, and Thomas Leich.**
    - *2019. Using Dynamic Software Product Lines to Implement Adaptive SGX-enabled Systems. In Proceedings of the 13th International Workshop on Variability Modelling of Software-Intensive Systems. ACM, ACM, Leuven, Belgium, 9.*

41. **[41] Dongwoo Lee and Jongwhoa Na.**
    - *2009. A Novel Simulation Fault Injection Method for Dependability Analysis. IEEE Design Test of Computers 26, 6 (Nov 2009), 50–61. https://doi.org/10.1109/MDT.2009.135*

42. **[42] Hendrik W. Lenstra Jr.**
    - *1987. Factoring integers with elliptic curves. Annals of mathematics 126, 3 (1987), 649–673.*

43. **[43] Yang Li, Kazuo Sakiyama, Shigeto Gomisawa, Toshinori Fukunaga, Junko Takahashi, and Kazuo Ohta.**
    - *2010. Fault sensitivity analysis. In International Workshop on Cryptographic Hardware and Embedded Systems. Springer, Springer, Berlin, Heidelberg, 320–334.*

44. **[44] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan Mangard.**
    - *2016. ARMageddon: Cache Attacks on Mobile Devices. In 25th USENIX Security Symposium (USENIX Security 16). USENIX Association, Austin, TX, 549–564. https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/lipp*

45. **[45] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee.**
    - *2015. Last-Level Cache Side-Channel Attacks are Practical. In 2015 IEEE Symposium on Security and Privacy. IEEE, San Jose, CA, USA, 605–622. https://doi.org/10.1109/SP.2015.43*

46. **[46] Huasong Meng, Vrizlynn L.L. Thing, Yao Cheng, Zhongmin Dai, and Li Zhang.**
    - *2018. A survey of Android exploits in the wild. Computers & Security 76 (2018), 71 – 91. https://doi.org/10.1016/j.cose.2018.02.019*

47. **[47] Thomas S. Messerges.**
    - *2000. Using Second-Order Power Analysis to Attack DPA Resistant Software. In Cryptographic Hardware and Embedded Systems — CHES 2000, Çetin K. Koç and Christof Paar (Eds.). Springer, Berlin, Heidelberg, 238–251.*

48. **[48] Gilles Piret and Jean-Jacques Quisquater.**
    - *2003. A Differential Fault Attack Technique against SPN Structures, with Application to the AES and Khazad. In Cryptographic Hardware and Embedded Systems - CHES 2003, Colin D. Walter, Çetin K. Koç, and Christof Paar (Eds.). Springer, Berlin, Heidelberg, 77–88.*

49. **[49] Pengfei Qiu, Yongqiang Lyu, Jiliang Zhang, Dongsheng Wang, and Gang Qu.**
    - *2018. Control flow integrity based on lightweight encryption architecture. IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems 37, 7 (2018), 1358–1369.*

50. **[50] Kaveh Razavi, Ben Gras, Erik Bosman, Bart Preneel, Cristiano Giuffrida, and Herbert Bos.**
    - *2016. Flip Feng Shui: Hammering a Needle in the Software Stack. In 25th USENIX Security Symposium (USENIX Security 16). USENIX Association, Austin, TX, 1–18.*

51. **[51] Matthieu Rivain.**
    - *2012. Differential Fault Analysis of DES. Springer, Berlin, Heidelberg, 37–54.*

52. **[52] Dan Rosenberg.**
    - *2014. Qsee trustzone kernel integer over flow vulnerability. In Black Hat conference. Blackhat, Las Vegas, NV, USA, 26.*

53. **[53] Majid Sabbagh, Yunsi Fei, Thomas Wahl, and A. Adam Ding.**
    - *2018. SCADET: A Side-Channel Attack Detection Tool for Tracking Prime-Probe. In 2018 IEEE/ACM International Conference on Computer-Aided Design (ICCAD). IEEE, IEEE, San Diego, CA, USA, 1–8.*

54. **[54] Dhiman Saha, Debdeep Mukhopadhyay, and Dipanwita Roy Chowdhury.**
    - *2009. A Diagonal Fault Attack on the Advanced Encryption Standard. IACR Cryptology ePrint Archive 2009 (01 2009), 581.*

55. **[55] Santanu Sarkar, Subhadeep Banik, and Subhamoy Maitra.**
    - *2015. Differential Fault Attack against Grain Family with Very Few Faults and Minimal Assumptions. IEEE Trans. Comput. 64, 6 (June 2015), 1647–1657. https://doi.org/10.1109/TC.2014.2339854*

56. **[56] Mark Seaborn and Thomas Dullien.**
    - *2015. Exploiting the DRAM rowhammer bug to gain kernel privileges. Black Hat 15 (2015), 71.*

57. **[57] Norbert Seifert, Vinod Ambrose, B. Gill, Q. Shi, R. Allmon, C. Recchia, S. Mukherjee, N. Nassif, J. Krause, J. Pickholtz, et al.**
    - *2010. On the radiation-induced soft error performance of hardened sequential elements in advanced bulk CMOS technologies. In 2010 IEEE International Reliability Physics Symposium. Blackhat, Anaheim, CA, USA, 188–197. https://doi.org/10.1109/IRPS.2010.5488831*

58. **[58] Nidhal Selmane, Sylvain Guilley, and Jean-Luc Danger.**
    - *2008. Practical Setup Time Violation Attacks on AES. In 2008 Seventh European Dependable Computing Conference. Blackhat, Kaunas, Lithuania, 91–96.*

59. **[59] Di Shen.**
    - *2015. Exploiting Trustzone on Android. Black Hat USA 1, 1-7 (2015), 7.*

60. **[60] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo.**
    - *2017. CLKSCREW: Exposing the Perils of Security-Oblivious Energy Management. In 26th USENIX Security Symposium (USENIX Security 17). USENIX Association, Vancouver, BC, 1057–1074.*

61. **[61] C. Josh Thomas and Nathan Keltner.**
    - *2014. Reflections on Trusting TrustZone. In Black Hat conference. Blackhat, Las Vegas, NV, USA, 33.*

62. **[62] Michael Tunstall, Debdeep Mukhopadhyay, and Subidh Ali.**
    - *2011. Differential Fault Analysis of the Advanced Encryption Standard Using a Single Fault. In Information Security Theory and Practice. Security and Privacy of Mobile Devices in Wireless Communication. Springer, Berlin, Heidelberg, 224–233.*

63. **[63] Qian Wang, An Wang, Gang Qu, and Guoshuang Zhang.**
    - *2017. New Methods of Template Attack Based on Fault Sensitivity Analysis. IEEE Transactions on Multi-Scale Computing Systems 3, 2 (April 2017), 113–123. https://doi.org/10.1109/TMSCS.2016.2643638*

64. **[64] Qian Wang, An Wang, Liji Wu, Gang Qu, and Guoshuang Zhang.**
    - *2015. Template attack on masking AES based on fault sensitivity analysis. In 2015 IEEE International Symposium on Hardware Oriented Security and Trust (HOST), Vol. 00. Blackhat, Washington, DC, USA, 96–99. https://doi.org/10.1109/HST.2015.7140245*

65. **[65] Yuval Yarom and Katrina Falkner.**
    - *2014. FLUSH+RELOAD: A High Resolution, Low Noise, L3 Cache Side-Channel Attack. In 23rd USENIX Security Symposium (USENIX Security 14). USENIX Association, San Diego, CA, 719–732. https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/yarom*

### Example Error on the Public Modulus of the Widevine Trustlet

**Original N:**
```
0xc44dc735f6682a261a0b8545a62dd13df4c646a5ede482cef858925baa1811fa
0284766b3d1d2b4d6893df4d9c045efe3e84d8c5d03631b25420f1231d8211e23
22eb7eb524da6c1e8fb4c3ae4a8f5ca13d1e0591f5c64e8e711b3726215cec59ed
0ebc6bb042b917d44528887915fdf764df691d183e16f31ba1ed94c84b476e74b
488463e85551022021763af35a64ddf105c1530ef3fcf7e54233e5d3a4747bbb17
328a63e6e3384ac25ee80054bd566855e2eb59a2fd168d3643e44851acf0d118f
b03c73ebc099b4add59c39367d6c91f498d8d607af2e57cc73e3b5718435a8112
3f080267726a2a9c1cc94b9c6bb6817427b85d8c670f9a53a777511b
```

**Corrupted Nin:**
```
0x...8cb3...
```

**Factors of corrupted Nin:**
```
0x11, 0x033b, 0x377, 0x010819f1285c6b307a82beba93d7c496488...
```

**Private key dm:**
```
0x062cde999954a9ced6840f2b04ae4d4187baa01a5044c0242c70dbe...
```

### Implementation of Function `EndianInversion` in Algorithm 1

**Algorithm 2: The endian reversal algorithm**

**Input:** The variable that needs to be endian reversed, \( V \)

**Output:** The reversed bytes sequence, \( S \)

1. **function EndianInversion(V)**
2.   \( S \leftarrow \{0\} \)
3.   for each \( i \in [0, \text{bytelen}(V)/4 - 1] \) do
4.     \( \text{Stemp} \leftarrow V[i \times 4] \ll 24 \)
5.     \( \text{Stemp} \leftarrow (V[i \times 4 + 1] \ll 8) | \text{Stemp} \)
6.     \( \text{Stemp} \leftarrow (V[i \times 4 + 2] \gg 8) | \text{Stemp} \)
7.     \( \text{Stemp} \leftarrow (V[i \times 4 + 3] \gg 24) | \text{Stemp} \)
8.     \( \text{Index} \leftarrow \text{bytelen}(V) - (i + 1) \times 4 \)
9.     \( S[\text{Index}, \text{Index} + 3] \leftarrow \text{Stemp}; \)
10.  end for
11.  return \( S \)
12. **end function**

---

This revised version aims to improve clarity, coherence, and professionalism by organizing the references, providing clear headings, and ensuring consistent formatting.