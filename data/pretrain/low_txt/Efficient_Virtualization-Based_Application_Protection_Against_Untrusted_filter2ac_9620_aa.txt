# Efficient Virtualization-Based Application Protection Against Untrusted Operating Systems

## Authors
- Yueqiang Cheng, CyLab, Carnegie Mellon University, 4720 Forbes Ave, Pittsburgh, PA, USA
- Xuhua Ding, Singapore Management University, 80 Stamford Rd, Singapore, 178902
- Robert H. Deng, Singapore Management University, 80 Stamford Rd, Singapore, 178902

## Abstract
Commodity monolithic operating systems are rife with vulnerabilities that can lead to rootkit attacks. Once an operating system is compromised, the data and execution of user applications become fully exposed to adversaries, regardless of whether they were designed and implemented with security in mind. Existing application protection schemes have various drawbacks, such as high performance overhead, large Trusted Computing Base (TCB), or the need for hardware modifications. In this paper, we present the design and implementation of AppShield, a hypervisor-based approach that reliably safeguards the code, data, and execution integrity of critical applications more efficiently than existing systems. The protection overhead is localized to the protected application only, ensuring that unprotected applications and the operating system run without any performance loss. Additionally, AppShield addresses several newly identified threats that were not systematically addressed previously. We built a prototype of AppShield using a tiny hypervisor and tested it by running several off-the-shelf applications on a Linux platform. The results demonstrate AppShield's low performance costs in terms of CPU computation, disk I/O, and network I/O.

### Categories and Subject Descriptors
D.4.6 [Security and Protection]: Isolated Execution Environment

### General Terms
Security

### Keywords
Address Space Isolation, Untrusted OS, Application Protection, Isolated Execution Environment

### Permissions
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore, Singapore.
Copyright © 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714618.

## 1. Introduction
Commodity monolithic operating systems, with their superior privileges over user applications, are often considered the security foundation of systems. However, these operating systems are not always trustworthy. Their extensive codebase and broad attack surfaces make them vulnerable to attacks. Once an OS is compromised, all applications and sensitive data are at the mercy of the attacker. High-profile users and organizations are also concerned about potential backdoors in commodity operating systems that could compromise privacy and data secrecy.

To address OS-level attacks, various mechanisms have been proposed to protect critical applications without trusting the operating system. Approaches like Flicker, TrustVisor, and Fides are limited to self-contained code with predefined inputs and outputs, and cannot make basic system calls. MiniBox extends functionality but still has limitations, such as lack of multi-thread support and restriction to sandbox-capable modules.

For full-fledged applications, systems like AEGIS, XOM OS, Bastion, and SecureME require hardware modifications, which are impractical for current platforms. Intel’s Software Guard Extensions (SGX) provides hardware extensions for software protection but requires significant software changes, making it incompatible with legacy applications. Proxos and Terra introduce a dedicated trusted virtual machine, but this expands the TCB size, weakening security.

Systems like OverShadow, CHAOS, SP3, and InkTag aim to protect processes without hardware modifications or a trusted VM but rely on costly encryption/decryption operations and are vulnerable to new address mapping attacks. Virtual Ghost prevents kernel access to application memory but is not applicable to commodity OSes like Windows.

In this paper, we propose AppShield, a novel system that reliably, efficiently, and transparently protects the data secrecy and integrity of a critical application, as well as its execution integrity, against OS-level malware attacks. AppShield uses virtualization techniques to isolate the application's address space, blocking all kernel accesses except those explicitly authorized through system calls. The protected application can request memory (de)allocation from the kernel, and its memory accesses are at native speed without encryption/decryption. AppShield also achieves performance isolation, localizing performance loss to the protected application.

We have implemented a prototype of AppShield, consisting of a bare-metal hypervisor with 29K SLOC and a small kernel module with 2K SLOC. We tested the prototype with several applications, including Apache, and conducted benchmark tests. The results show that AppShield incurs minimal performance costs in CPU computation, disk I/O, and network I/O.

### Contributions
- We identify several address mapping attacks not addressed by existing application protection schemes.
- We design AppShield to protect the execution integrity, data secrecy, and integrity of off-the-shelf applications that can issue system calls.
- Compared to existing work, AppShield achieves better performance by avoiding heavy cryptographic operations and enforcing performance isolation.
- We build a prototype of AppShield and evaluate it with commonly used applications and benchmark tools, demonstrating low overhead.

### Organization
- Section 2: Problem definition, threat model, objectives, and overview of AppShield.
- Section 3: Description of dynamic address space isolation and newly identified threats.
- Section 4: Secure address space switch.
- Section 5: Support for data exchanges.
- Section 6: Implementation and evaluation of AppShield.
- Section 7: Related work.
- Section 8: Conclusion.

## 2. Synopsis

### 2.1 Threat Model
We defend against kernel-level malware attacks on a critical application by tampering with its data and/or execution. The adversary can run arbitrary code and launch DMA operations on the victim platform but does not have physical control. All hardware and peripheral devices, along with their firmware, are trusted. We trust a bare-metal hypervisor with a small code size and limited interfaces. The hypervisor intercepts and emulates System Management Mode (SMM) operations to counter SMM-based attacks. Side channel attacks and application availability are out of scope. We assume that no ill-formed inputs can subvert the control flow of the critical application, which can be achieved through input sanitation and proper code development.

### 2.2 Design Principles
- **System Call Support**: AppShield should support and protect the application's system calls, allowing the critical application to safely request services from the untrusted OS.
- **Performance Impact**: AppShield should not significantly impact the performance of the protected application or the platform. The protected application should access main memory at native speed without encryption/decryption.
- **Compatibility and Transparency**: AppShield should be compatible and transparent to legacy off-the-shelf applications, requiring minimal source or binary code modifications.
- **Small TCB**: The TCB of the security mechanism should be kept small and simple to minimize the risk of subversion.

### 2.3 AppShield Overview
AppShield dynamically isolates the target application's context and address space from the rest of the platform, including the kernel, while securely mediating system calls through the hypervisor. For clarity, we refer to the critical application under AppShield's protection as CAP.

**Figure 2: Architecture of AppShield**
- **Data Flows**: Data flows between the protected CAP and other components go through a shared buffer and are mediated by shim code.
- **Control Flows**: Control flows between CAP and the OS are mediated by the Transit Module.
- **Protection**: Both the transit module and shim code are self-contained and safeguarded by the hypervisor to defend against kernel and malicious DMA attacks.

The AppShield hypervisor, as the root of trust, can boot up using SRTM (Static Root of Trust for Measurements) and DRTM (Dynamic Root of Trust for Measurements) technologies.