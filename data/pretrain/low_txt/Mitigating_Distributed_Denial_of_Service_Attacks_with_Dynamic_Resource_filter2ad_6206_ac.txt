### Measurement and Experimental Setup

Measurement is also computed as a percentage of the maximum data rate sustainable by the server and the data link between it and the server broker.

### 4.2 Results

We conducted three sets of experiments to study the behavior of the MbSQD system in response to three different kinds of DDoS attacks:

1. **TCP-SYN Attacks**: In these experiments, rogue clients flood the server with SYN packets using forged source IP addresses, overwhelming the server with half-opened TCP connections.
2. **Server Flooding Attacks**: Rogue clients flood the server with frequent and long TCP connections, uploading large amounts of data. These experiments also examined the effects of using computational proof-of-work as a method of payment offered by the clients.
3. **Server Draining Attack**: Rogue clients initiate frequent TCP connections, downloading large amounts of data from the server (e.g., an HTTP server). These experiments also examined the effects of using fungible payments as a means of payment.

#### Experiment Details

- **Experiments (1) and (2)**: These were run with 25 legitimate clients requesting TCP connections of random, exponentially distributed durations (average 0.5 seconds) separated by random, exponentially distributed intervals (average 0.1 seconds). Each legitimate client would establish a connection with the server and upload a relatively small amount of data.
- **Experiment (3)**: This was run with 128 legitimate clients opening TCP connections and sending requests requiring exponentially distributed sizes (average 17,000 bytes) at exponentially distributed intervals (average 0.1 seconds). Experiments were run with 0 to 512 rogue clients, each generating requests of larger average size (average 100,000 bytes).

### 4.2.1 Mitigation against TCP-SYN Attacks

In these experiments, rogue clients were programmed as constant bit sources, generating SYN packets as fast as possible without completing the connection establishment. The attack started 0.5 seconds into the experiment and stopped 1.5 seconds before the end of the test. Figure 4-2 displays the results, showing two traces: the number of packets from legitimate clients delivered to the server agent with and without MbSQD. The vertical axis shows the total packet count, and the horizontal axis is the ratio of good clients to DDoS attacking agents. As the graph shows, the intensity of the attack has little impact on the throughput of legitimate clients when MbSQD is active; in its absence, the service is effectively denied.

**Figure 4-2. MbSQD mitigation against TCP-SYN attacks**

These drastically different results have a simple explanation. By requiring a proof-of-work response from the clients before the brokers forward packets, the impact of the SYN attacks is shifted from the server to the gateways hosting the brokers. A naive SYN packet flood has no impact on the server because the server broker discards all attacker packets without burdening the server.

### 4.2.2 Mitigation against Server Flooding

In these experiments, rogue clients had similar but more aggressive behaviors than legitimate clients: their average connection interval was set to 0.01 second, and their average duration was 0.7 second. The resource protected by the server broker includes the server node, the server broker, and the link between them. The price was linearly proportional to the number of open connections at the server broker. The token of payment was proof-of-work computation that clients must perform in response to challenges from the client broker.

We ran three sets of simulations: a control case without MbSQD, one with the server broker charging for each connection, and another with the server broker charging for every pass of 32 packets. As a measure of service quality, we counted the number of legitimate-client requests delivered to the server during ten seconds of simulation time. Figure 4-3 displays the results, showing that all attacks were ultimately effective even with MbSQD, but required eight times as many rogue clients to achieve the same level of service degradation.

**Figure 4-3. MbSQD mitigation against server flooding**

### 4.2.3 Mitigation against Server Draining

In this experiment, rogue clients attempted to act as a drain on the server’s bandwidth by repeatedly downloading large files, exhausting the number of connections available for legitimate requests. Users leased connections, and the lease period was set so that, in an unloaded system, 90% of all legitimate tasks would complete with only one payment. The effectiveness of this pricing function diminishes under heavy load, as a constant time lease covers less data. An experiment based on the amount of data transmitted should prove more robust.

**Figure 4-4. MbSQD mitigation against server draining**

### 5. Conclusions

In this paper, we explored the application of dynamic pricing mechanisms in mitigating DDoS attacks. We presented the MbSQD architecture and protocol, which supports both proof-of-work and monetary-like micropayment schemes. We prototyped the MbSQD system using the ns-2 simulator and presented simulation results on the effectiveness of different pricing strategies for some DDoS scenarios based on a monopolistic service model.

#### 5.1 Lessons Learned

From our simulation experiments, we made the following observations:
- Pushing costs back onto clients appears to be effective for mitigating server-based DDoS attacks. MbSQD maintains control of client-server traffic flows over the Internet.
- Proof-of-work methods are effective for eliminating spoofed requests or flooding via a limited number of machines. Scrip-based payment methods can be effective if integrity can be maintained over the money supply.
- Different client behaviors can be discriminated by different server pricing strategies. Service Brokers can work to favor certain traffic behaviors.
- The choice of a pricing function has a strong effect on the effectiveness of MbSQD. Pricing functions can favor either the defender or the attacker, and care must be taken to choose functions that elicit behavior conducive to the mission of the server(s) being controlled.

#### 5.2 Suggested Directions for Future Research

This investigation is preliminary in nature. We suggest the following possible extensions of the current system:

##### 5.2.1 Dynamic Subscription Parameters

Currently, subscription parameters and limiting values are fixed. However, a service provider might define a business logic where lengthy subscriptions are offered when the service is not busy, but allowed length may shrink in response to service load. Alternately, a service might offer free service until resources are depleted to a certain level, at which point the service becomes fee-for-use until utilization drops again. A service might use a linear or constant pricing algorithm until a threshold of resource use is reached, then switch to an exponential strategy.

##### 5.2.2 Service Differentiation

Service providers may want clients to receive different levels of access to resources or pricing based on the service category. Below are a few possible ways to differentiate between clients:
- **Buyer's Clubs**: The price a client pays depends on the last price category they were in. People who paid for premium service might get a price break the next time they renew their subscription.
- **Threshold-based Packet-Dropping**: Service categories such as gold, silver, and bronze correspond to certain price thresholds. Packets for a particular subscription are dropped whenever the price rises above the level of service the client paid.
- **Queuing Manipulation**: The level of service corresponds to the delay the client experiences in having their packets processed.
- **Subscription Parameter Modification**: The level of service corresponds to a certain set of values for subscription parameters. For example, gold service allows 50 packet blocks, silver = 30 packet blocks, and bronze = 10 packet blocks.

Further research is necessary to determine how to combine different dynamic pricing mechanisms to enhance overall system survivability by discriminating against different kinds of adversarial behavior. Our preliminary results indicate that dynamic pricing strategies offer a promising new direction in countering server-directed DDoS attacks on the Internet.

### 6. Bibliography

- [BBC01] http://news.bbc.co.uk/low/english/sci/tech/newsid_1348000/1348820.stm
- [CAIDA01] www.caida.org/outreach/papers/backscatter/
- [Jue99] A. Juels and J. Brainard, “Client Puzzles: A Cryptographic Defense Against Connection Depletion Attacks,” Network and Distributed System Security Symposium '99, San Diego, CA, USA, February 1999.
- [Ful00] E. Fulp and D. Reeves, “A Multi-Market Approach to Resource Allocation,” Proc. of Networking 2000, Lecture Notes in Computer Science, G. Pujolle, ed., No. 1815, pp. 945-956, May 2000.
- [Bla98] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss, “RFC 2475: An Architecture for Differentiated Services,” December 1998.
- [Gib01] S. Gibson, “The Strange Tale of the Denial of Service Attacks against GRC.com,” www.grc.com/grcdos.html, June 2001.
- [Fis99] P. C. Fishburn and A. M. Odlyzko, “Competitive Pricing of Information Goods: Subscription Pricing Versus Pay-Per-Use,” Economic Theory, Vol. 13, pp. 447-470, 1999.
- [Niv73] L. Niven, “Flash Crowd,” The Flight of the Horse, Ballantine Books, 1973.
- [Bak99] Y. Bakos and E. Brynjolfsson, “Bundling Information Goods: Pricing, Profits, and Efficiency,” Management Science, December 1999.
- [Dwo92] C. Dwork and M. Naor, “Pricing via Processing or Combating Junk Mail,” in Ernest F. Brickell, ed., Crypto '92, Vol. 740, Lecture Notes in Comp Science, pp. 139-147. Springer-Verlag, 16-20 August 1992.
- [Riv97] R. Rivest and A. Shamir, “PayWord and MicroMint: Two Simple Micro-payment Schemes,” Lecture Notes in Comp. Science, vol. 1189, Proc. Security Protocols Workshop, Springer-Verlag, pp. 69-87, 1997.
- [Jak99] M. Jakobsson and A. Juels, “Proofs of Work and Bread Pudding Protocols,” In B. Preneel, ed., Communications and Multimedia Security. Kluwer Academic Publishers, pp. 258-272, 1999.
- [Cha83] D. Chaum, “Blind Signatures for Untraceable Payments,” Advances in Cryptology--Crypto '82, Springer-Verlag, pp. 199-203, 1983.
- [Sno01] A.C. Snoeren, C. Partridge, L.A. Sanchez, C.E. Jones, F. Tchakountio, S. T. Kent, and W. T. Strayer, Proc. ACM SIGCOMM 2001, August 2001.
- [MPAPI] W3C Micro-payments API and Markup WGs, www.w3.org/ECommerce/Micro-payments/
- [Milli] Compaq Millicent, www.millicent.digital.com
- [Pay] PayPal, www.paypal.com
- [NS2] NS-2 simulator, http://www.isi.edu/nsnam/ns
- [Arq] The ARQoS Project, http://arqos.csc.ncsu.edu/
- [Free] The FreeHaven Project, http://www.freehaven.net/
- [Digi] DigiCash, http://www.digicash.com
- [Hash] A. Back, “Hash Cash: A Partial Hash Collision Based Postage Scheme,” www.cypherspace.org/~adam/hashcash.
- [Mojo] Mojo Nation, http://www.mojonation.net/

Authorized licensed use limited to: Tsinghua University. Downloaded on March 25, 2021, at 07:07:10 UTC from IEEE Xplore. Restrictions apply.