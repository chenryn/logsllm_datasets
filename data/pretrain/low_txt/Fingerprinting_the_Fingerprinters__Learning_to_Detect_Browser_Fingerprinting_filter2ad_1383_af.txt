### Potential Entropy Leaks Through Timing Information
Timing information can potentially leak entropy. This section discusses several mechanisms through which such leaks can occur.

#### 1. Animation and `requestAnimationFrame`
The `requestAnimationFrame` API is used to schedule the execution of a function before the next repaint of the browser. The callback rate generally matches the display refresh rate, and the number of callbacks within an interval can be used to infer the frame rate. Differences in frame rates across devices and browsers can potentially leak entropy.

#### 2. Audio Fingerprinting
Englehardt and Narayanan [54] first reported the use of the `AudioContext` API for audio fingerprinting. The audio signals generated by `AudioContext` vary across devices and browsers. Fingerprinting scripts can capture additional properties such as `numberOfInputs`, `numberOfOutputs`, and `destination`. Additionally, the `canPlayType` method can be used to extract the audio codecs supported by the device. This additional information exposed by the `AudioContext` API can potentially leak entropy.

#### 3. Sensor Fingerprinting
Previous work has shown that device sensors can be abused for browser fingerprinting [43], [47], [50]. We found instances where both known and unknown sensors are being used by fingerprinting scripts. Known sensors include `devicemotion` and `deviceorientation`, while previously unknown sensors like `userproximity` are also being utilized.

### Limitations of FP-INSPECTOR
In this section, we discuss some of the limitations of FP-INSPECTOR's detection and mitigation components.

#### Evading Detection Through Script Dispersion
FP-INSPECTOR detects fingerprinting at the granularity of a script. An adversarial website can disperse fingerprinting scripts into several chunks to avoid detection or amalgamate all scripts—functional and fingerprinting—into one to avoid enforcement of mitigation countermeasures.

**Challenges in Detecting Dispersed Scripts:**
- FP-INSPECTOR only considers syntactic and semantic relationships within individual scripts and does not account for relationships across scripts.
- To detect fingerprinting when the responsible code is divided across several scripts, FP-INSPECTOR can be extended to capture interactions among scripts by more deeply instrumenting the browser. For example, prior approaches such as AdGraph [62] and JSGraph [69] instrument browsers to capture cross-script interactions.
- Future versions of FP-INSPECTOR can implement such instrumentation to capture parent-child relationships of script inclusion. However, this would require embedding each chunk into a website from an independent ancestor node and returning results to seemingly independent servers, increasing maintenance costs.

#### Evading Countermeasures Through Script Amalgamation
To restrict fingerprinting, FP-INSPECTOR's most effective countermeasure (i.e., targeted API restriction) is applied at the granularity of a script. FP-INSPECTOR may break websites where all scripts are amalgamated into a single script. More granular enforcement can be used to effectively prevent fingerprinting in such cases. For example, future versions of FP-INSPECTOR can track the execution of callbacks and target those related to fingerprinting.

**Challenges in Handling Amalgamated Scripts:**
- Each update to any script will require the amalgamation of all scripts into one, increasing maintenance costs.
- Script amalgamation could also be used as a countermeasure against ad and tracker blockers, introducing similar breakage. However, anecdotal evidence suggests that the barriers to use are sufficiently high to prevent widespread deployment of amalgamation as a countermeasure against privacy tools.

### Conclusion
We presented FP-INSPECTOR, a machine learning-based syntactic-semantic approach to accurately detect browser fingerprinting behaviors. FP-INSPECTOR outperforms heuristics from prior work by detecting 26% more fingerprinting scripts and helps reduce website breakage by 2X. Our deployment showed that browser fingerprinting is more prevalent on the web now than ever before. A measurement study on the Alexa top-100K websites revealed that fingerprinting scripts are deployed on 10.18% of the websites by 2,349 different domains.

We plan to report the domains serving fingerprinting scripts to tracking protection lists such as Disconnect [12] and EasyPrivacy [14]. FP-INSPECTOR also uncovered the exploitation of several new APIs previously not known to be used for browser fingerprinting. We will report the names and statistics of these APIs to privacy-oriented browser vendors and standards bodies. To foster follow-up research, we will release our patch to OpenWPM, a fingerprinting countermeasures prototype extension, a list of newly discovered fingerprinting vendors, and bug reports submitted to tracking protection lists, browser vendors, and standards bodies at https://uiowa-irl.github.io/FP-Inspector.

### Acknowledgements
The authors would like to thank Charlie Wolfe (NSF REU Scholar) for his help with the breakage analysis. A part of this work was carried out during the internship of the lead author at Mozilla. This work is supported in part by the National Science Foundation under grant numbers 1715152, 1750175, 1815131, and 1954224.

### References
[1] Adscore privacy policy. https://www.adscore.com/privacy-policy.
[2] Apple Declares War on Browser Fingerprinting, the Sneaky Tactic That Tracks You in Incognito Mode. https://gizmodo.com/apple-declares-war-on-browser-fingerprinting-the-sneak-1826549108.
[3] Brave Browser Fingerprinting Protection Mode. https://github.com/brave/browser-laptop/wiki/Fingerprinting-Protection-Mode.
[4] C3 Metrics privacy policy. https://c3metrics.com/privacy/.
[5] Canvas Defender. https://multilogin.com/canvas-defender/.
[6] Cliqz Content Blocking Library. https://github.com/cliqz-oss/adblocker.
[7] Combating Fingerprinting with a Privacy Budget Explainer. https://github.com/bslassey/privacy-budget.
[8] Default on Cookie Restrictions Excerpt. https://mozilla.report/post/projects/cookie-restrictions.kp/.
[9] Disconnect policy review for AdScore. https://github.com/disconnectme/disconnect-tracking-protection/commit/9666265d0a26fbcc65a20c1021517a44a5ade580.
[10] Disconnect policy review for C3Metrics. https://github.com/disconnectme/disconnect-tracking-protection/blob/940d5e6da8fbc738a747a30328c397c4f453683a/descriptions.md#policy-review-3.
[11] Disconnect tracking definition. https://disconnect.me/trackerprotection#definition-of-tracking.
[12] Disconnect tracking protection lists. https://disconnect.me/trackerprotection.
[13] DoubleVerify, Product Privacy Notice. https://web.archive.org/web/20191130014642/https://www.doubleverify.com/privacy/.
[14] EasyPrivacy. https://easylist.to/easylist/easylist.txt.
[15] Fingerprinting Defenses in The Tor Browser. https://www.torproject.org/projects/torbrowser/design/#fingerprinting-defenses.
[16] Fingerprintjs2 fingerprinting script. https://fingerprintjs.com/.
[17] Firefox Fingerprinting Blocking Breakage Bugs. https://bugzilla.mozilla.org/show_bug.cgi?id=1527013.
[18] Firm uses typing cadence to finger unauthorized users. https://arstechnica.com/tech-policy/2010/02/firm-uses-typing-cadence-to-finger-unauthorized-users/.
[19] Full Third-Party Cookie Blocking and More. https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/.
[20] How to block fingerprinting with Firefox. https://blog.mozilla.org/firefox/how-to-block-fingerprinting-with-firefox/.
[21] Improving Privacy Without Breaking The Web. https://blog.mozilla.org/data/2018/01/26/improving-privacy-without-breaking-the-web/.
[22] Integral Ad Science, Privacy Policy. https://web.archive.org/web/20191130014644/https://integralads.com/privacy-policy/.
[23] Iovation Fraud Protection. https://web.archive.org/web/20191130164107/https://www.iovation.com/fraudforce-fraud-detection-prevention.
[24] MDN Web APIs. https://developer.mozilla.org/en-US/docs/Web/API.
[25] MediaMath fingerprinting (MathTag) script. https://www.mediamath.com/.
[26] Mozilla postpones default blocking of third-party cookies in Firefox. https://www.computerworld.com/article/2497782/mozilla-postpones-default-blocking-of-third-party-cookies-in-firefox.html.
[27] Privacy Badger. https://www.eff.org/privacybadger.
[28] requestAnimationFrame API. https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame.
[29] Same-origin security model - Resource Timing APIs. https://w3c.github.io/perf-security-privacy/#same-origin-security-model.
[30] The Tapad Graph. https://www.tapad.com/the-tapad-graph.
[31] Tor browser bug - reduced time precision to mitigate fingerprinting. https://trac.torproject.org/projects/tor/ticket/1517.
[32] Tor Browser Fingerprinting Bugs. https://trac.torproject.org/projects/tor/query?keywords=~tbb-fingerprinting.
[33] W3C Fingerprinting Guidance. https://w3c.github.io/fingerprinting-guidance.
[34] W3C. Privacy Interest Group Charter. https://www.w3.org/2011/07/privacy-ig-charter.
[35] webRequest API. https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/webRequest.
[36] Webshrinker Website Categorization. https://www.webshrinker.com/.
[37] ACAR, G., EUBANK, C., ENGLEHARDT, S., JUAREZ, M., NARAYANAN, A., AND DIAZ, C. The Web Never Forgets: Persistent Tracking Mechanisms in the Wild. In CCS (2014).
[38] ACAR, G., JUAREZ, M., NIKIFORAKIS, N., DIAZ, C., GÜRSER, S., PIESSENS, F., AND PRENEEL, B. FPDetective: Dusting the Web for Fingerprinters. In Proceedings of CCS (2013), ACM.
[39] AL-FANNAH, N. M., LI, W., AND MITCHELL, C. J. Beyond Cookie Monster Amnesia: Real World Persistent Online Tracking. In Information Security Conference (2018).
[40] ALACA, F., AND VAN OORSCHOT, P. Device Fingerprinting for Augmenting Web Authentication: Classification and Analysis of Methods. In Proceedings of the 32nd Annual Conference on Computer Security Applications (ACSAC) (2016).
[41] AZAD, B. A., STAROV, O., LAPERDRIX, P., AND NIKIFORAKIS, N. Web Runner 2049: Evaluating Third-Party Anti-Bot Services. In 17th Conference on Detection of Intrusions and Malware & Vulnerability Assessment (DIMVA) (2020).
[42] BLONDEL, V. D., GUILLAUME, J.-L., LAMBIOTTE, R., AND LEFEBVRE, E. Fast Unfolding of Communities in Large Networks. In Journal of Statistical Mechanics: Theory and Experiment (2008).
[43] BOJINOV, H., MICHALEVSKY, Y., NAKIBLY, G., AND BONEH, D. Mobile Device Identification via Sensor Fingerprinting. In arXiv (2014).
[44] BURSZTEIN, E., MALYSHEV, A., PIETRASZEK, T., AND THOMAS, K. Picasso: Lightweight Device Class Fingerprinting for Web Clients. In ACM CCS Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM) (2016).
[45] CAO, S. Y., AND WIJMANS, E. (Cross-)Browser Fingerprinting via OS and Hardware Level Features. In Proceedings of the 2017 Network & Distributed System Security Symposium, NDSS (2017), vol. 17.
[46] CURTSINGER, C., LIVSHITS, B., ZORN, B., AND SEIFERT, C. ZOZZLE: Fast and Precise In-Browser JavaScript Malware Detection. In USENIX Security Symposium (2011).
[47] DAS, A., ACAR, G., BORISOV, N., AND PRADEEP, A. The Web’s Sixth Sense: A Study of Scripts Accessing Smartphone Sensors. In CCS (2018).
[48] DATTA, A., LU, J., AND TSCHANTZ, M. C. The Effectiveness of Privacy Enhancing Technologies Against Fingerprinting. arXiv preprint arXiv:1812.03920 (2018).
[49] DAVIS, W. BlueCava Touts Device Fingerprinting. https://web.archive.org/web/20150928090154/https://www.mediapost.com/publications/article/166916/bluecava-touts-device-fingerprinting.html, 2012.
[50] DEY, S., ROY, N., XU, W., CHOUDHURY, R. R., AND SRI-HARINELAKUDITI. AccelPrint: Imperfections of Accelerometers Make Smartphones Trackable. In Proceeding of the 21st Annual Network and Distributed System Security Symposium (NDSS) (2014).
[51] ECKERSLEY, P. How Unique Is Your Web Browser? In Privacy Enhancing Technologies (2010), Springer.
[52] EDELSTEIN, A. Protections Against Fingerprinting and Cryptocurrency Mining Available in Firefox Nightly and Beta. https://blog.mozilla.org/futurereleases/2019/04/09/protections-against-fingerprinting-and-cryptocurrency-mining-available-in-firefox-nightly-and-beta/, 2019.
[53] ENGLEHARDT, S. The Hidden Perils of Cookie Syncing. https://freedom-to-tinker.com/2014/08/07/the-hidden-perils-of-cookie-syncing/, 2014.
[54] ENGLEHARDT, S., AND NARAYANAN, A. Online Tracking: A 1-Million-Site Measurement and Analysis. In ACM Conference on Computer and Communications Security (CCS) (2016).
[55] FASS, A., BACKES, M., AND STOCK, B. JSTAP: A Static Pre-Filter for Malicious JavaScript Detection. In Proceedings of the 32nd Annual Conference on Computer Security Applications (ACSAC) (2019).
[56] FIFIELD, D., AND EGELMAN, S. Fingerprinting Web Users Through Font Metrics. In Financial Cryptography and Data Security. Springer, 2015, pp. 107–124.
[57] FOUAD, I., BIELOVA, N., LEGOUT, A., AND SARAFIJANOVIC-DJUKIC, N. Missed by Filter Lists: Detecting Unknown Third-Party Trackers with Invisible Pixels. In Proceedings on Privacy Enhancing Technologies (PETS) (2020).
[58] FOWLER, G. A. Think You’re Anonymous Online? A Third of Popular Websites Are ‘Fingerprinting’ You. https://www.washingtonpost.com/technology/2019/10/31/think-youre-anonymous-online-third-popular-websites-are-fingerprinting-you/, 2019.
[59] GOMEZ-BOIX, A., LAPERDRIX, P., AND BAUDRY, B. Hiding in the Crowd: An Analysis of the Effectiveness of Browser Fingerprinting at Large Scale. In The Web Conference (2018).
[60] IKRAM, M., ASGHAR, H. J., KAAFAR, M. A., MAHANTI, A., AND KRISHNAMURTHY, B. Towards Seamless Tracking-Free Web: Improved Detection of Trackers via One-Class Learning. In Privacy Enhancing Technologies Symposium (PETS) (2017).
[61] IQBAL, U., SHAFIQ, Z., AND QIAN, Z. The Ad Wars: Retrospective Measurement and Analysis of Anti-Adblock Filter Lists. In IMC (2017).
[62] IQBAL, U., SNYDER, P., ZHU, S., LIVSHITS, B., QIAN, Z., AND SHAFIQ, Z. AdGraph: A Graph-Based Approach to Ad and Tracker Blocking. In To appear in the Proceedings of the IEEE Symposium on Security & Privacy (2020).
[63] JOHN ROSS QUINLAN. Induction of Decision Trees. Kluwer Academic Publisher, 1986.
[64] LAPERDRIX, P. Browser Fingerprinting: An Introduction and the Challenges Ahead. https://blog.torproject.org/browser-fingerprinting-introduction-and-challenges-ahead, 2019.
[65] LAPERDRIX, P., AVOINE, G., BAUDRY, B., AND NIKIFORAKIS, N. Morellian Analysis for Browsers: Making Web Authentication Stronger with Canvas Fingerprinting. In International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA) (2019).
[66] LAPERDRIX, P., BIELOVA, N., BAUDRY, B., AND AVOINE, G. Browser Fingerprinting: A Survey. arXiv preprint arXiv:1905.01051 (2019).
[67] LAPERDRIX, P., RUDAMETKIN, W., AND BAUDRY, B. Beauty and the Beast: Diverting Modern Web Browsers to Build Unique Browser Fingerprints. In IEEE Symposium on Security and Privacy (2016).
[68] LAUINGER, T., CHAABANE, A., ARSHAD, S., ROBERTSON, W., WILSON, C., AND KIRDA, E. Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web. In Network and Distributed System Security Symposium (NDSS) (2017).
[69] LI, B., VADREVU, P., LEE, K. H., AND PERDISCI, R. JSGraph: Enabling Reconstruction of Web Attacks via Efficient Tracking of Live In-Browser JavaScript Executions.