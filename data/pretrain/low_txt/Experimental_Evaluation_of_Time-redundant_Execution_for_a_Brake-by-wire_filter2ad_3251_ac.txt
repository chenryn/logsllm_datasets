### 6. Results

Table 1 presents a summary of the fault injection experiments, which evaluated two versions of the kernel: one without support for time redundancy (Kernel) and one with time redundancy (FT-Kernel).

**Table 1. Summary of Fault Injection Results**

| **Kernel** | **FT-Kernel** |
|------------|---------------|
| **Correct Result** | 80.9% (± 0.98%) (4962) | 88.8% (± 0.75%) (6017) |
| **Fail-Stop Failure** | 17.4% (± 0.95%) (1068) | 10.1% (± 0.72%) (681) |
| **Value Failures** | 1.73% (± 0.33%) (106) | 1.15% (± 0.25%) (78) |
| **Total Injected Faults** | 6136 | 6776 |

The percentage of correct results increased from 80.9% in the Kernel to 88.8% in the FT-Kernel, while fail-stop failures decreased from 17.4% to 10.1%. The 10.1% fail-stop failures observed in the FT-Kernel are attributed to the cache, where errors remained latent until activated by kernel code, for which no recovery mechanisms are available.

The value failures decreased from 1.73% to 1.15%. The 1.15% value failures can be categorized as follows:
- **Non-Detected Errors (0.7%)**: These are primarily control flow errors (0.6%), where an unexpected jump to an incorrect location in the program code occurs. Further investigation is needed to verify this. Another cause (0.07%) is errors in the output variable from the second task copy after the checksum has been calculated. The remaining non-detected errors (0.03%) have not yet been identified.
- **Recovery Failures (0.4%)**: These occur when errors affect the input variables in the second and third task copies, causing the majority voter to deliver a faulty output due to two equal but faulty results. To mitigate this, the cache is flushed between each task copy, but input variables updated in the first task copy can still propagate faulty values to main memory, affecting subsequent task copies.

**Table 2. Error Detection Mechanisms for the FT-Kernel**

| **Error Detection Mechanism** | **Percentage (95% conf)** | **Number** |
|-------------------------------|---------------------------|------------|
| **All Errors Detected by Thor Run-Time Checks** | 14.74% (± 0.84%) | 999 |
| **Errors Detected by Double Execution** | 3.31% (± 0.43%) | 224 |

The percentage of errors detected by all Thor run-time checks decreased from 17.4% in the Kernel to 14.7% in the FT-Kernel, as more errors were overwritten during execution. Time-redundant execution of critical tasks detected 3.3% of the errors. Figure 7 illustrates the fault tolerance latency for faults detected by the run-time checks and double execution.

**Figure 7. Fault Tolerance Latency**

[Insert Figure 7 here]

### 7. Conclusion

The experimental evaluation of the FT-Kernel clearly demonstrates the effectiveness of our temporal error masking technique. The percentage of correct results increased from 80.9% to 88.8%, while fail-stop failures decreased from 17.4% to 10.1%, and value failures decreased from 1.73% to 1.15%. However, the error handling mechanisms in the FT-Kernel need improvement, as the percentage of value failures remains unacceptably high.

By analyzing the fault injection data, we identified that most value failures were caused by control-flow errors (0.6% of all errors). These errors could be detected by a control flow checking mechanism, which is not currently supported in the FT-Kernel. The other main reason for value failures (0.4% of the errors) was errors affecting the common input to the second and third executions, causing identical but incorrect checksums. These value failures can be mitigated by protecting input data with error-detecting and correcting codes or by using triplication and majority voting.

Future work will focus on extending the FT-Kernel with additional error detection and recovery mechanisms to further reduce the probability of value failures. We will investigate techniques to improve the handling of errors affecting application tasks and consider mechanisms to handle faults that affect the execution of kernel code. These mechanisms will be validated by injecting faults during the execution of the kernel code. Additionally, we will validate the FT-Kernel's performance in the presence of transient faults in the main memory.

### 8. Acknowledgements

This work was supported by ARTES and the Swedish Foundation for Strategic Research (SSF). We would like to thank Stefan Asserhäll and Torbjörn Hult at Saab Ericsson Space for their technical assistance with the Thor processor. We also thank Jerker Lennevi and Henrik Lönn at Volvo Technological Development for providing and supporting the brake-by-wire model. Special thanks go to Philip Koopman for his valuable suggestions and for proposing the term "temporal error masking." We also thank the anonymous reviewers for their constructive criticism.

### 9. References

[1] R.K. Iyer, D.J. Rossetti, and M.C. Hsueh, “Measurement and Modeling of Computer Reliability as Affected by System Activity”, ACM Trans. on Computer Systems, 4(3), 1986, pp. 214-37.

[2] E. Normand, “Single Event Upset at Ground Level”, IEEE Trans. on Nuclear Science, 43(6, pt.1), 1996, pp. 2742-50.

[3] Johnson B.W., Design and Analysis of Fault-Tolerant Digital Systems, Addison-Wesley, 1989.

[4] N. Oh, P.P. Shirvani, and E.J. McCluskey, "Error Detection by Duplicated Instructions in Super-scalar Processors," IEEE Trans. on Reliability, Sep. 2001.

[5] Oh, N., and E.J. McCluskey, “Procedure Call Duplication: Minimization of Energy Consumption with Constrained Error Detection Latency” in Proc. IEEE Int’l Symp. on Defect and Fault Tolerance in VLSI Systems, 2001, pp. 182 –187.

[6] A. Damm, “The Effectiveness of Software Error-Detection Mechanisms in Real-Time Operating Systems”, in FTCS Digest of Papers. 16th Annual Int’l Symp. on Fault-Tolerant Computing Systems, Washington, DC, USA, 1986, pp. 171-176.

[7] F. Cristian, “Understanding Fault-Tolerant Distributed Systems”, Comm. of the ACM, 34(2), 1991, pp. 56-78.

[8] J. Vinter, J. Aidemark, P. Folkesson, and J. Karlsson, “Reducing Critical Failures for Control Algorithms Using Executable Assertions and Best Effort Recovery”, in Proc. Int’l. Conf. on Dependable Systems and Networks. Göteborg, Sweden, 2001, pp 347 -356.

[9] T. Lovric, "Dynamic Double Virtual Duplex System: A Cost-Efficient Approach to Fault-Tolerance", in Dependable Computing for Critical Applications 5, IEEE Computer Society, 1998, pp 57-74.

[10] E. Rotenberg, "AR-SMT: A Microarchitectural Approach to Fault Tolerance in Microprocessors", in Proc Int’l Conf. on Dependable Systems and Networks, Madison, WI, USA, 1999, pp 84-91.

[11] Schuette, M.A., Shen J.P., Siewiorek D.P., and Zhu Y.X., “Experimental Evaluation of Two Concurrent Error Detection Schemes”, in FTCS Digest of Papers. 16th Annual Int’l Symp. on Fault-Tolerant Computing Systems, Washington, DC, USA, 1986, pp. 138-143.

[12] Pradhan D.K., Fault-Tolerant Computer System Design, Upper Saddle River, New Jersey, Prentice Hall PTR, 1996.

[13] A. Burns, S. Punnekkat, L. Strigini, and D.R. Wright, “Probabilistic Scheduling Guarantees for Fault-Tolerant Real-Time Systems”, in Dependable Computing for Critical Applications 7, Piscataway, NJ, USA, 1999, pp. 361-378.

[14] G. Fohler, “Adaptive Fault-Tolerance with Statically Scheduled Real-Time Systems”, in Proc. Ninth Euromicro Workshop on Real Time Systems, Los Alamitos, CA, USA, 1997, pp 161-167.

[15] I. Bate, and A. Burns, “Schedulability Analysis of Fixed Priority Real-Time Systems with Offsets”, in Proc. Ninth Euromicro Workshop on Real Time Systems, Toledo, Spain, 1997, pp 153-160.

[16] K.G. Shin, and H. Kim, “Derivation and Application of Hard Deadlines for Real-Time Control Systems”, IEEE Trans. on Systems, Man and Cybernetics, 22(6), 1992 pp. 1403-13.

[17] Saab Ericsson Space AB, Microprocessor Thor, Product Information, 1993.

[18] H. Kim, and K.G. Shin, “Evaluation of Fault Tolerance Latency from Real-Time Application's Perspectives”, IEEE Trans. on Computers, 49(1), 2000, pp. 55-64.