### 5. Performance and Analysis

Our approach significantly reduces the number of attacks that need to be tested on the code. Our results show that with a running time of just a few hours, the model checker is capable of analyzing the model and identifying potential attacks on different execution paths. Since the analysis is performed offline prior to deployment, the analysis time is not expected to be a bottleneck. Additionally, our formal model captures the design-level properties of smart meters rather than their implementation details, which means that the size of the code does not affect the model checker's performance.

Another important consideration in evaluating the system's performance is the time required to map an attack found by the formal model to the actual implementation. Based on our experience, this process was straightforward and typically took a few minutes per attack (with a maximum duration of half an hour). We also developed a semi-automated tool for this purpose, as described in Section 4. It is worth noting that we were very familiar with the SEGMeter’s code and implementation. Given that our work targets smart meter developers, we expect them to be even more familiar with their own code.

### 6. Discussion

#### Applicability to Other IoT Devices

While our focus in this paper has been on smart meters, the same principles can be extended to other classes of embedded devices in IoT systems. The primary requirements for doing so are: 1) identifying the viable attacker actions specific to that system, and 2) defining an abstraction of the system that can be used to build an implementation-independent formal model. For example, AUTOSAR (Automotive Open System Architecture) provides the basic infrastructure for developing vehicular software. Similar platforms have been proposed for other embedded systems, such as medical devices [1, 4]. Given the open and standardized nature of these systems, we believe that a similar approach can be taken. Extending this approach to these systems is a direction for future work.

#### Complexity of Attacks

We have demonstrated attacks resulting from message dropping, replaying messages, and rebooting the system. An attacker is unlikely to succeed by taking random, destructive actions; instead, they must carefully time or coordinate their actions. For actions like dropping or replaying messages, the number of choices for an attacker is exponential relative to the number of messages. Similarly, the choices for rebooting the meter are exponential in the number of states, which can run into the thousands. Brute-force actions, such as replaying all messages or dropping all messages, would result in easy detection of suspicious activities (e.g., out-of-sync heartbeat messages or no heartbeat messages) either by the server or through activity log reviews (manually or via automated tools). Therefore, attackers are unlikely to perform such actions.

#### Limitations

There are three main limitations to our formal modeling approach:

1. **Scalability**: Increasing the complexity of the model and the number of attacker actions increases the state space of the formal model, which in turn increases the time required to generate attacks. However, we do not expect the software running on embedded systems to be highly complex due to the limited computational and memory resources of these devices. Thus, we believe our technique can scale for many classes of embedded systems.

2. **Model Correctness**: The correctness of our results depends on the correctness of the formal model. There are two aspects to this:
   - **Design Mismatch**: There may be a mismatch between the design of the model and the specifications. We mitigate this by building a single model for the common features of smart meters rather than a different model for each meter. This allows us to refine and improve the model over time.
   - **Implementation Bugs**: Implementation bugs in the model can also affect correctness. We partially mitigate this by using the executable engine of Maude to execute the model and verify that, in the absence of attacker actions, it matches the real meter’s behavior.

3. **Abstraction Level**: Our model is built at the design level rather than the implementation level of smart meters. This means we may not be able to model low-level actions for the attacker and discover attacks associated with specific implementations (e.g., buffer overflows). Additionally, not all attacks found at the abstract level may be directly mappable to the code. Despite this limitation, we were able to find many attacks that apply to a real smart meter, SEGMeter.

### 7. Conclusion

IoT devices have gained widespread adoption, and their security is an emerging concern. However, existing security techniques often fail to address the unique limitations and requirements of these devices. In this paper, we analyze the security of smart meters, a widely-used IoT device. We build a formal model of smart meters using rewriting logic, formally define a set of attacker actions, and use model-checking to find all possible sequences of these actions that could transition the system to an unsafe state. Using this formal model, we were able to identify attacks within a modest time frame of about two hours. We evaluated the attacks on SEGMeter, an open-source smart meter, and found that a significant subset of the identified attacks can be mapped to real-world attacks and carried out using commodity, inexpensive hardware, thereby demonstrating their practicality.

### Acknowledgements

This research was supported in part by the Natural Sciences and Engineering Research Council of Canada (NSERC) through the Strategic Networks Grants program for Developing Next Generation Intelligent Vehicular Networks and Applications (DIVA) and the Discovery Grants Program.

### References

[1] Green Hills Medical Devices Platform. http://www.ghs.com/products/medical-platform.html.

[2] Information and Technology Standards, Advanced Metering Infrastructure, Government of Ontario, Canada. http://www.decc.gov.uk/assets/decc/Consultations/smart-meter-imp-prospectus/1478-design-requirements.pdf.

[3] Monitoring Office Power Consumption with a SEGMeter. http://www.anchor.com.au/blog/2012/11/monitoring-office-power-consumption-with-a-segmeter.

[4] Wind River Medical Devices Platform. http://www.windriver.com/announces/platform-for-medical-devices.

[5] Najwa Aaraj, Anand Raghunathan, and Niraj K Jha. Analysis and Design of a Hardware/Software Trusted Platform Module for Embedded Systems. ACM Transactions on Embedded Computing Systems (TECS), 8(1):8, 2008.

[6] Christel Baier, Joost-Pieter Katoen, et al. Principles of Model Checking, Volume 26202649. MIT Press Cambridge, 2008.

[7] Arduino Home Page. http://www.arduino.cc.

[8] R. Berthier, W.H. Sanders, and H. Khurana. Intrusion Detection for Advanced Metering Infrastructures: Requirements and Architecture Directions. In Smart Grid Communications (SmartGridComm), 2010, pages 350–355, 2010.

[9] Robin Berthier and William H. Sanders. Specification-Based Intrusion Detection for Advanced Metering Infrastructures. PRDC, IEEE, 0, 2011.

[10] BinNavi. https://www.zynamics.com/binnavi.html.

[11] S. Brinkhaus, D. Carluccio, U. Greveler, D B. Justus, and C. Wegener. Smart Hacking for Privacy. In 28th Chaos Communication Congress, Berlin, Germany, DEC. 2011.

[12] Eric J Byres, Matthew Franz, and Darrin Miller. The Use of Attack Trees in Assessing Vulnerabilities in SCADA Systems. In Proceedings of the International Infrastructure Survivability Workshop. Citeseer, 2004.

[13] Yuqun Chen, Ramarathnam Venkatesan, Matthew Jakubowski. Oblivious Hashing: A Stealthy Software Integrity Verification Primitive. Work, pages 400–414, 2003.

[14] Manuel Clavel, Francisco Durán, Steven Eker, Santiago Escobar, Patrick Lincoln, Narciso Martí-Oliet, José Meseguer, and Carolyn Talcott. Maude Manual (Version 2.7). 2015.

[15] Manuel Clavel, Francisco Durán, Steven Eker, Patrick Lincoln, Narciso Martí-Oliet, José Meseguer, and Carolyn Talcott. All About Maude—A High-Performance Logical Framework: How to Specify, Program and Verify Systems in Rewriting Logic. Springer-Verlag, 2007.

[16] Stéphanie Delaune, Steve Kremer, and Graham Steel. Formal Security Analysis of PKCS#11 and Proprietary Extensions. Journal of Computer Security, 18(6):1211–1245, 2010.

[17] Department of Energy and Climate Change and the Office of Gas and Electricity Markets. Smart Metering Implementation Programme, March 2011. http://www.ofgem.gov.uk/e-serve/sm/Documentation/Documents1/Design%20Requirements.pdf.

[18] Department of Energy and Climate Change and the Office of Gas and Electricity Markets. Smart Metering Response to Prospectus Consultation, March 2011. http://www.ofgem.gov.uk/Pages/MoreInformation.aspx?docid=56&refer=e-serve/sm/Documentation.

[19] FBI: Smart Meter Hacks Likely to Spread. http://krebsonsecurity.com/2012/04/fbi-smart-meter-hacks-likely-to-spread/.

[20] K. Fehrenbacher. Smart Meter Worm Could Spread Like a Virus. http://earth2tech.com/2009/07/31/smart-meter-worm-could-spread-like-a-virus/.

[21] Eduardo Fernandez, Juan Pelaez, and Maria Larrondo-Petrie. Attack Patterns: A New Forensic and Design Tool. In Advances in Digital Forensics III, pages 345–357. Springer, 2007.

[22] Michael Gegick and Laurie Williams. Matching Attack Patterns to Security Vulnerabilities in Software-Intensive System Designs. ACM SIGSOFT Software Engineering Notes, 30(4):1–7, 2005.

[23] David Gries. The Science of Programming. Springer Science & Business Media, 2012.

[24] In-Stat and NDP Group Company. http://www.instat.com/press.asp?ID=3352&sku=IN1104731WH.

[25] Hacking Medical Devices for Fun and Insulin: Breaking the Human. https://media.blackhat.com/bh-us-11/Radcliffe/BHUS_11_Radcliffe_Hacking_Medical_Devices_WP.pdf.

[26] Somesh Jha, Oleg Sheyner, and Jeannette Wing. Two Formal Analyses of Attack Graphs. In Computer Security Foundations Workshop, 2002. Proceedings. 15th IEEE, pages 49–63. IEEE, 2002.

[27] Hacking Humans. http://blog.kaspersky.com/hacking-humans/.

[28] Himanshu Khurana, Mark Hadley, Ning Lu, and Deborah A. Frincke. Smart-Grid Security Issues. IEEE Security & Privacy, pages 81–85, 2010.

[29] Christoph Klemenjak, Dominik Egarter, and Wilfried Elmenreich. Yomo: The Arduino-Based Smart Metering Board. Computer Science-Research and Development, pages 1–7, 2015.

[30] Karl Koscher, Alexei Czeskis, Franziska Roesner, Shwetak Patel, Tadayoshi Kohno, Stephen Checkoway, Damon McCoy, Brian Kantor, Danny Anderson, Hovav Shacham, and Stefan Savage. Experimental Security Analysis of a Modern Automobile. In Proceedings of the 2010 IEEE Symposium on Security and Privacy, SP '10, pages 447–462, Washington, DC, USA, 2010. IEEE Computer Society.

[31] Michael LeMay, George Gross, Carl A. Gunter, and Sanjam Garg. Unified Architecture for Large-Scale Attested Metering. In Proceedings of HICCS'07, Washington, DC, USA, 2007. IEEE Computer Society.

[32] N. Lewson. Smart Meter Crypto Flaw Worse Than Thought, 2010. http://rdist.root.org/2010/01/11/smart-meter-crypto-flaw-worse-than-thought.

[33] Narciso Martí-Oliet and José Meseguer. Rewriting Logic as a Logical and Semantic Framework. Electronic Notes in Theoretical Computer Science, 4:190–225, 1996.

[34] Petr Matousek, Jaroslav Ráb, Ondrej Rysavy, and Miroslav Svéd. A Formal Model for Network-Wide Security Analysis. In Engineering of Computer Based Systems, 2008. ECBS 2008. 15th Annual IEEE International Conference and Workshop on the, pages 171–181. IEEE, 2008.

[35] Bishop Matt et al. Introduction to Computer Security. Pearson Education India, 2006.

[36] Sjouke Mauw and Martijn Oostdijk. Foundations of Attack Trees. In Information Security and Cryptology-ICISC 2005, pages 186–198. Springer, 2006.

[37] P. McDaniel and S. McLaughlin. Security and Privacy Challenges in the Smart Grid. IEEE S&P, 2009.

[38] Stephen McLaughlin, Dmitry Podkuiko, and Patrick McDaniel. Energy Theft in the Advanced Metering Infrastructure. In Critical Information Infrastructures Security, pages 176–187. Springer, 2010.

[39] Stephen McLaughlin, Dmitry Podkuiko, Sergei Miadzvezhanka, Adam Delozier, and Patrick McDaniel. Multi-Vendor Penetration Testing in the Advanced Metering Infrastructure. In Proceedings of ACSAC'10, pages 107–116. ACM, 2010.

[40] Marino Miculan and Caterina Urban. Formal Analysis of Facebook Connect Single Sign-On Authentication Protocol. In SOFSEM, volume 11, pages 22–28. Citeseer, 2011.

[41] Roberto Minerva, Abyi Biru, and Domenico Rotondi. Towards a Definition of the Internet of Things (IoT). IEEE Internet Initiative, Torino, Italy, 2015.

[42] Yilin Mo, Tiffany Hyun-Jin Kim, Kenneth Brancik, Dona Dickinson, Heejo Lee, Adrian Perrig, and Bruno Sinopoli. Cyber-Physical Security of a Smart Grid Infrastructure. Proceedings of the IEEE, 100(1):195–209, 2012.

[43] Sibin Mohan, Jaesik Choi, Man-Ki Yoon, Lui Sha, and Jung-Eun Kim. SecureCore: A Multicore-Based Intrusion Detection Architecture for Real-Time Embedded Systems. In Proceedings of the 2013 IEEE 19th Real-Time and Embedded Technology and Applications Symposium (RTAS), Washington, DC, USA, 2013. IEEE Computer Society.

[44] Farid Molazem and Karthik Pattabiraman. A Model for Security Analysis of Smart Meters. In WRAITS, Dependable Systems and Networks Workshops (DSN-W), 2012.

[45] Anderson Morais, Eliane Martins, Ana Cavalli, and Willy Jimenez. Security Protocol Testing Using Attack Trees. In Computational Science and Engineering, 2009. CSE'09. International Conference on, volume 2, pages 690–697. IEEE, 2009.

[46] OllyDbg. www.ollydbg.de.

[47] Vijayakrishnan Pasupathinathan, Josef Pieprzyk, and Huaxiong Wang. Formal Security Analysis of Australian e-Passport Implementation. In AISC'08 Proceedings of the Sixth Australasian Conference on Information Security-(CRPIT Volume 81-Information Security 2008), volume 81, pages 75–82. Australian Computer Society, Inc, 2008.

[48] Miguel Correia, Paulo Veríssimo, and Nuno Ferreira Neves. CRUTIAL: The Blueprint of a Reference Critical Information Infrastructure Architecture. In Proceedings of ISC06, August 2006.

[49] IDA Pro. https://www.hex-rays.com/products/ida/.

[50] Indrajit Ray and Nayot Poolsapassit. Using Attack Trees to Identify Malicious Attacks from Authorized Insiders. In Computer Security–ESORICS 2005, pages 231–246. Springer, 2005.

[51] Dries Schellekens, Brecht Wyseur, and Bart Preneel. Remote Attestation on Legacy Operating Systems with Trusted Platform Modules. Sci. Comput. Program., 74:13–22, December 2008.

[52] Bruce Schneier. Attack Trees. Dr. Dobb's Journal, 24(12):21–29, 1999.

[53] Arvind Seshadri, Mark Luk, Elaine Shi, Adrian Perrig, Leendert van Doorn, and Pradeep Khosla. Pioneer: Verifying Code Integrity and Enforcing Untampered Code Execution on Legacy Systems. In Proceedings of the Twentieth ACM Symposium on Operating Systems Principles, SOSP '05, pages 1–16, New York, NY, USA, 2005. ACM.

[54] Oleg Sheyner, Joshua Haines, Somesh Jha, Richard Lippmann, and Jeannette M. Wing. Automated Generation and Analysis of Attack Graphs. In Security and Privacy, 2002. Proceedings. 2002 IEEE Symposium on, pages 273–284. IEEE, 2002.