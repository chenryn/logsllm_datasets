### 6.2.4 Popup Indicator
To mitigate the WebView UI redressing problem, all associated key APIs are monitored, such as `addView()`. When the WUI rendering order is altered by a sub-frame, an alert will be triggered (implemented in the enhanced event handlers).

### 6.2.5 Safe Navigation
To prevent traditional navigation issues, we restrict the navigation policy so that it only occurs when two frames share the same origin. To achieve this, we instrument the key method `LocalDOMWindow::open()` to include origin checks.

Additionally, to address the privileged navigation problem, we handle the conflict between WebView features and web APIs. Specifically, in the key method `RenderFrameHostImpl::CreateNewWindow`, we add more security restrictions. When the setting `SupportMultipleWindows` is `false`, the popup behavior will be ignored.

### 6.3 Mitigation Evaluation
In our evaluation, we first tested the usability of our defense solution, focusing on how easily it can be deployed and applied in practice. We selected ten real-world vulnerable apps for testing. Our solution works seamlessly if developers include our custom WebView header files, which contain new function prototypes (e.g., `onCreateWindow()`), and provide a configuration file with a list of third-party domains. Note that since these real apps lack source code, we repackaged them to include the necessary files.

Next, we verified the correctness of our mitigation solution by testing the ten apps. We ran them on both the stock (vulnerable) WebView and the WebView that implements our mitigation solution. We found that:
1. Our solution did not introduce any errors, and the apps functioned as usual.
2. DCV attacks were effectively mitigated.

We then measured the overhead to ensure that our mitigation solution does not negatively impact user experience. We created a vulnerable app for testing, where we called the WebView API `loadUrl()` to run associated HTML/JavaScript code to trigger all vulnerabilities. All time costs were recorded. Similarly, we ran the app on both the stock (vulnerable) WebView and the WebView with our mitigation solution. By comparing the time costs, we found that our solution introduces only a minimal overhead: an average of 2ms.

Finally, considering the Android version fragmentation issue, we tested the compatibility of our mitigation solution by installing our custom WebView library and running the created app on major Android versions. The results show that our solution is compatible with many popular Android versions (5.0+), covering 89.3% of Android devices in use (based on the Android version distribution data from May 2019 [1]).

### 7 Related Work
#### Iframe/Popup Security
In web applications, iframes and popups are often the cause of security issues, such as frame hijacking [11], clickjacking [43], and double-click clickjacking [23]. In the context of regular browsers, iframe/popup behaviors and these security issues have been well-studied, and many defense solutions have been proposed. For example, the HTTP header `X-Frame-Options` and frame busting [43] can prevent framing. In this work, we focus on the exploration of the capabilities of untrusted iframes and popups. More related security mechanisms, such as the Same-Origin Policy (SOP) and navigation policies, are discussed in Section 2.1. As shown in Sections 1 and 3, existing solutions are limited in preventing DCV attacks.

#### WebView Security
WebView security has gained increasing attention. Studies [17, 30, 33] have generally explored WebView security, while others [21, 25, 27, 40, 49, 53] have examined the security of web-mobile bridges and discovered several extended attacks. In Section 3.5, we compare DCV attacks with related attacks and highlight the advantages of DCV attacks. Several static analysis-based approaches [22, 55] have been proposed to vet hybrid apps, but they are limited in analyzing iframe/popup behaviors and event handlers (see our discussion in Section 4). Defense solutions designed to protect WebView and web-mobile bridges include NoFrak [21], Draco [49], MobileIFC [45], WIREframe [18], and HybridGuard [38]. NoFrak and MobileIFC extended SOP into the mobile layer, while other solutions provided security enforcement on web-mobile bridges. However, as discussed in Sections 1 and 3, they are limited in preventing DCV attacks.

Additionally, many solutions [13, 41] aim to mitigate Android UI deception problems [15, 20, 35]. However, as discussed in Sections 1 and 3.3, they cannot monitor the state changes of WebView UI and are limited in preventing WUI redressing attacks.

### 8 Discussion
#### Research Scope
In this work, we primarily focus on Android, the most popular mobile OS. However, there are other WebView formats on different platforms (e.g., WKWebView for iOS). Future research on these platforms would complement our work, and we leave this as future work.

#### False Negatives
DCV-Hunter may produce false negatives in certain situations. For example, in mobile apps, some URLs loaded in WebView are encrypted, some URL-related data goes through implicit flows, and some WebView-related code is dynamically loaded. Some of these issues can be partially mitigated, such as dynamically testing apps to collect and download dynamically loaded code. Improving our tool to reduce all false negatives is part of our future work.

### 9 Conclusion
Iframes and popups are often the root cause of several critical web security issues and have been well-studied in regular browsers. However, their behaviors are less understood and scrutinized in WebView, which operates in a different environment. In this paper, we fill this gap by identifying several fundamental design flaws and vulnerabilities, termed differential context vulnerabilities (DCVs). We find that exploiting DCVs makes untrusted iframes and popups very dangerous in Android WebView. We have designed a novel detection technique, DCV-Hunter, to assess the security impacts of DCVs on real-world apps. Our measurements on a large number of popular apps show that DCVs are prevalent. We have also presented a multi-level protection solution to mitigate DCVs, which is scalable and effective.

### Acknowledgments
We thank our shepherd Yinzhi Cao and the anonymous reviewers for their valuable comments. This material is based upon work supported in part by the National Science Foundation (NSF) under Grant nos. 1642129 and 1700544. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of NSF. We also thank Cong Zheng and Yuchen Zhou for helpful discussions about our threat model and the design of DCV-Hunter.

### References
[1] Android version distribution dashboard. https://developer.android.com/about/dashboards.
[2] DCV-attacks. https://sites.google.com/view/dcv-attacks.
[3] EasyPrivacy tracking protection list. https://easylist.to/tag/tracking-protection-lists.html.
[4] iframe - HTML standard. https://html.spec.whatwg.org/dev/iframe-embed-object.html#attr-iframe-sandbox.
[5] McAfee mobile threat report. https://www.mcafee.com/us/resources/reports/rp-mobile-threat-report-2016.pdf.
[6] Same Origin Policy. https://en.wikipedia.org/wiki/Same-origin_policy.
[7] Selenium - Web browser automation. https://www.seleniumhq.org.
[8] Web messaging standard. https://html.spec.whatwg.org/multipage/web-messaging.html.
[9] WebView client. https://developer.android.com/reference/android/webkit/WebViewClient.html.
[10] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise context, flow, field, object-sensitive, and lifecycle-aware taint analysis for Android apps. In PLDI, 2014.
[11] A. Barth, C. Jackson, and J. C. Mitchell. Securing frame communication in browsers. In USENIX Security, 2009.
[12] A. B. Bhavani. Cross-site Scripting Attacks on Android WebView. IJCSN International Journal of Computer Science and Network, 2(2):1–5, 2013.
[13] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and G. Vigna. What the app is that? Deception and countermeasures in the Android user interface. In IEEE Symposium on Security and Privacy, 2015.
[14] T. Bujlow, V. Carela-Español, J. Solé-Pareta, and P. Barlet-Ros. A survey on web tracking: Mechanisms, implications, and defenses. Proceedings of the IEEE, 2017.
[15] Q. A. Chen, Z. Qian, and Z. M. Mao. Peeking into your app without actually seeing it: UI state inference and novel Android attacks. In USENIX Security, 2014.
[16] E. Chin and D. Wagner. Bifocals: Analyzing WebView vulnerabilities in Android applications. In International Workshop on Information Security Applications, 2013.
[17] E. Chin and D. Wagner. Bifocals: Analyzing WebView vulnerabilities in Android applications. In WISA, 2013.
[18] D. Davidson, Y. Chen, F. George, L. Lu, and S. Jha. Secure integration of web content and applications on commodity mobile operating systems. In ASIA CCS, 2017.
[19] L. De Moura and N. Bjørner. Z3: An efficient SMT solver. In Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS/ETAPS, pages 337–340. Springer-Verlag, 2008.
[20] Y. Fratantonio, C. Qian, S. P. Chung, and W. Lee. Cloak and dagger: From two permissions to complete control of the UI feedback loop. In IEEE Symposium on Security and Privacy, 2017.
[21] M. Georgiev, S. Jana, and V. Shmatikov. Breaking and fixing origin-based access control in hybrid web/mobile application frameworks. In NDSS, 2014.
[22] B. Hassanshahi, Y. Jia, R. H. C. Yap, P. Saxena, and Z. Liang. Web-to-application injection attacks on Android: Characterization and detection. In ESORICS, 2015.
[23] L. Huang, A. Moshchuk, H. J. Wang, S. Schecter, and C. Jackson. Clickjacking: Attacks and defenses. In USENIX Security, 2012.
[24] InfoSecurity. Public Wi-Fi hotspots ripe for MITM attacks. https://www.infosecurity-magazine.com/news/public-wifi-hotspots-ripe-for-mitm-attacks/.
[25] X. Jin, X. Hu, K. Ying, W. Du, H. Yin, and G. N. Peri. Code injection attacks on HTML5-based mobile apps: Characterization, detection, and mitigation. In CCS, 2014.
[26] A. Lerner, T. Kohno, and F. Roesner. Rewriting history: Changing the archived web from the present. CCS, 2017.
[27] T. Li, X. Wang, M. Zha, K. Chen, X. Wang, L. Xing, X. Bai, N. Zhang, and X. Han. Unleashing the walking dead: Understanding cross-app remote infections on mobile WebViews. In CCS, 2017.
[28] Z. Li, K. Zhang, Y. Xie, F. Yu, and X. Wang. Knowing your enemy: Understanding and detecting malicious web advertising. In CCS, 2012.
[29] M. Luo, O. Starov, N. Honarmand, and N. Nikiforakis. Hindsight: Understanding the evolution of UI vulnerabilities in mobile browsers. CCS, 2017.
[30] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on WebView in the Android system. In ACSAC, 2011.
[31] T. Luo, X. Jin, A. Ananthanarayanan, and W. Du. Touch-jacking attacks on web in Android, iOS, and Windows Phone. In Foundations and Practice of Security, 2013.
[32] J. R. Mayer and J. C. Mitchell. Third-party web tracking: Policy and technology. In IEEE Symposium on Security and Privacy, 2012.
[33] P. Mutchler, A. Doupé, J. Mitchell, C. Kruegel, G. Vigna, A. Doup, J. Mitchell, C. Kruegel, and G. Vigna. A Large-Scale Study of Mobile Web App Security. In MoST, 2015.
[34] M. Neugschwandtner, M. Lindorfer, and C. Platzer. A view to a kill: WebView exploitation. In LEET, 2013.
[35] M. Niemietz and J. Schwenk. UI redressing attacks on Android devices. Black Hat, 2012.
[36] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You are what you include: Large-scale evaluation of remote JavaScript inclusions. CCS, 2012.
[37] X. Pan, Y. Cao, and Y. Chen. I do not know what you visited last summer - protecting users from third-party web tracking with TrackingFree browser. In NDSS, 2015.
[38] P. H. Phung, A. Mohanty, R. Rachapalli, and M. Sridhar. HybridGuard: A principal-based permission and fine-grained policy enforcement framework for web-based mobile applications. In MoST, 2017.
[39] N. Provos, P. Mavrommatis, M. A. Rajab, and F. Monrose. All your iframes point to us. Usenix Security, 2008.
[40] V. Rastogi, R. Shao, Y. Chen, X. Pan, S. Zou, and R. Riley. Are these Ads Safe: Detecting Hidden Attacks through the Mobile App-Web Interfaces. NDSS, 2016.
[41] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu. Towards discovering and understanding task hijacking in Android. In USENIX Security, 2015.
[42] F. Roesner, T. Kohno, and D. Wetherall. Detecting and defending against third-party tracking on the web. In NSDI, 2012.
[43] G. Rydstedt, E. Bursztein, D. Boneh, and C. Jackson. Busting frame busting: A study of clickjacking vulnerabilities at popular sites. In IEEE Oakland Web 2.0 Security and Privacy, 2010.
[44] P. Saxena, S. Hanna, P. Poosankam, and D. Song. FLAX: Systematic discovery of client-side validation vulnerabilities in rich web applications. In NDSS, 2010.
[45] K. Singh. Practical context-aware permission control for hybrid mobile applications. In RAID, 2013.
[46] D. F. Somé, N. Bielova, and T. Rezk. Control what you include! - Server-side protection against third-party web tracking. In Engineering Secure Software and Systems, 2017.
[47] S. Son and V. Shmatikov. The postman always rings twice: Attacking and defending postMessage in HTML5 websites. In NDSS, 2013.
[48] K. Tian, Z. Li, K. D. Bowers, and D. Yao. FrameHanger: Evaluating and classifying iframe injection at large scale. In SecureComm, 2018.
[49] G. S. Tuncay, S. Demetriou, and C. A. Gunter. Draco: A system for uniform and fine-grained access control for web code on Android. In CCS, 2016.
[50] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized origin crossing on mobile platforms: Threats and mitigation. In CCS, 2013.
[51] T. Wei, Y. Zhang, H. Xue, M. Zheng, C. Ren, and D. Song. Sidewinder: Targeted attack against Android in the golden age of ad libraries. In Black Hat, 2014.
[52] M. Weissbacher, W. Robertson, E. Kirda, C. Kruegel, and G. Vigna. Zigzag: Automatically hardening web applications against client-side validation vulnerabilities. In USENIX Security, 2015.
[53] G. Yang, J. Huang, and G. Gu. Automated generation of event-oriented exploits in Android hybrid apps. In NDSS, 2018.
[54] G. Yang, J. Huang, G. Gu, and A. Mendoza. Study and mitigation of origin stripping vulnerabilities in hybrid-postMessage enabled mobile applications. In IEEE Symposium on Security and Privacy, 2018.
[55] G. Yang, A. Mendoza, J. Zhang, and G. Gu. Precisely and scalably vetting JavaScript bridge in Android hybrid apps. In RAID, 2017.
[56] A. Zarras, A. Kapravelos, G. Stringhini, T. Holz, C. Kruegel, and G. Vigna. The dark alleys of Madison Avenue: Understanding malicious advertisements. In IMC, 2014.