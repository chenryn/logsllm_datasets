### Switch-Port Mapping and Security

When a switch port is mapped to a virtual machine's (VM) MAC-IP, no violations are reported. It is important to note that VM migrations cannot be maliciously orchestrated from one host to another without compromising the network administrator. Additionally, while a malicious entity might attempt to fake a VM migration, it would be unable to generate a valid sequence of messages from both the source and destination switches without an accomplice.

### Load Balancer in SDNs

Load balancers distribute incoming client requests across a set of replicated servers to maximize throughput, minimize response time, and optimize resource utilization. Typically, clients access the service through a single public IP address via a gateway. The load balancer rewrites the destination IP of incoming client packets to the address of the assigned replica server and the source IP of outgoing response packets back to the public IP address. In Software-Defined Networks (SDNs), where load balancing is implemented as a controller module, packet routing is achieved by installing rules with write actions at the gateway—OFPAT_SET_NW_DST for incoming request packets and OFPAT_SET_NW_SRC for outgoing response packets. A load-balanced SDN requires no additional processing on SPHINX’s end, which treats the load-balanced flows as unicast flows between the client and the assigned replica.

### Multicast in SDNs

Controller applications or modules maintain multicast groups as multicast trees. Each group has a unique multicast IP used by members to send and receive messages. Receivers interested in joining or leaving a particular group must send IGMP (Internet Group Management Protocol) messages to the controller, which are forwarded as PACKET_IN messages for maintaining multicast groups. Malicious hosts can forge IGMP join/leave requests, leading to Denial of Service (DoS) for legitimate members. For example, a malicious host can repeatedly send forged IGMP leave requests on behalf of an unsuspecting host A for multicast group M, causing the controller to remove A from group M, effectively resulting in DoS. Similarly, a malicious host B can send forged IGMP join requests to make the unsuspecting host A a member of all available multicast groups, leading to Distributed Denial of Service (DDoS) by choking the downlink to A.

We developed a multicast module for OpenDaylight (ODL) to control and manage multicast trees for multicast groups and implemented the described attacks on vanilla ODL. SPHINX-enhanced ODL is immune to such attacks because it verifies each IGMP PACKET_IN on a particular switch by leveraging its view of the topology to extract the switch-port on which the request was received. SPHINX then validates if the host is connected to the particular switch. If validation fails, SPHINX raises an alert. SPHINX also uses FLOW_MOD messages to identify source-based multicast routing trees for different groups and maintains the corresponding multicast flow graphs. SPHINX performs path consistency checks and periodic flow consistency checks on the multicast flow graph.

### Discussion and Future Work

#### Limitations

1. **Malicious Ingress/Egress Switches**: SPHINX cannot identify a malicious ingress or egress switch in a flow path that adds/drops packets to influence the Σ. This limitation arises because SPHINX relies on STATS_REPLY from untrusted switches along the flow path to generate Σ and detect flow inconsistencies. However, SPHINX can leverage supplementary data from other standard traffic monitoring techniques such as sFlow or NetFlow to perform validation at the ingress and egress switches.
2. **Transient Attacks**: SPHINX might miss some transient attacks due to the granularity at which metadata statistics are updated, which spans a few seconds and is controller-dependent. Fixing this may require changes to the controller to report flow statistics at finer-grained intervals or augmenting SPHINX with finer-granularity data from sFlow or NetFlow. Alternatively, SPHINX can be enhanced using network monitoring frameworks like Planck [39] and PayLess [23] for greater accuracy in link utilization measurements.
3. **Realistic Network Availability**: The accuracy and effectiveness of flow graphs to detect security violations are limited by the lack of realistic networks available for large-scale experimentation.
4. **High τ Value**: A high value of τ may cause SPHINX to underreport violations, which can be fixed by using flow-specific τ.
5. **Packet Integrity**: SPHINX cannot detect compromised packet integrity. However, cryptographic mechanisms can address this limitation.

#### Future Work

1. **Flow Rule Aggregation**: Controller modules often aggregate flow rules to conserve switch TCAM. SPHINX, as implemented, requires installation of source/destination-based rules that hamper aggregation. However, SPHINX can be modified to support aggregated flow rules.
2. **Mixed Networks**: Real enterprise deployments may have OpenFlow switches interacting seamlessly with other non-OpenFlow network entities. We plan to enhance SPHINX to detect security attacks in such mixed settings.
3. **Proactive OpenFlow Environment**: The described attacks assume a reactive OpenFlow setup. In a proactive OpenFlow environment, a malicious controller or applications can initiate attacks on the SDN. We will focus on detecting such proactive attacks in future work.

### Related Work

Recent advances in SDN security have primarily focused on security enforcement frameworks and real-time verification of network constraints. SPHINX is the first system to detect a broad class of attacks in SDNs in real-time, with a threat model that does not require trusted switches or hosts.

1. **Security Enforcement**:
   - **FORTNOX [38]**: Extends the SDN controller with a live rule conflict detection engine.
   - **FRESCO [41]**: Provides a security application development framework for modular development of security monitoring and threat detection applications. Both systems focus on threats arising from malicious applications that may result in the installation of conflicting rules. SPHINX, however, can detect a much broader class of attacks.
   - **Avant-guard [42]**: Alters flow management at the switch level to make SDN security applications more scalable and responsive to dynamic network threats. Unlike SPHINX, it focuses mostly on DoS attacks and requires modifications to the OpenFlow protocol.

2. **Network Verification**:
   - **TopoGuard [27]**: Detects attacks targeted to poison the controllers’ view of the network topology. SPHINX unifies detection of attacks on network topology and data plane forwarding using flow graphs.
   - **Natarajan et al. [37]**: Present algorithms to detect conflicting rules in a virtualized OpenFlow network.
   - **Xie et al. [44]**: Statically analyze reachability properties of networks.
   - **Anteater [34]**: Can provably verify the network’s forwarding behavior and determine certain classes of bugs.
   - **Header Space Analysis (HSA) [29]**: Leverages static analysis to detect forwarding and configuration errors.
   - **VeriFlow [30]**: Segregates the entire network into classes with the same forwarding behavior using a multi-dimensional prefix tree.
   - **NetPlumber [28]**: Uses HSA incrementally to maintain a dependency graph of update rules to enforce runtime policy checking.

SPHINX is similar to VeriFlow and NetPlumber in that it leverages packet metadata to construct and analyze the forwarding state of the network on each update. However, SPHINX makes no assumptions about the data plane being free of adversaries and analyzes various switch-controller messages to ensure the actual behavior of the network conforms to the desired behavior.

### Conclusion

SPHINX is a controller-agnostic tool that leverages flow graphs to detect security threats on network topology and data plane forwarding originating within SDNs. Our evaluation shows that existing controllers are vulnerable to such attacks, and SPHINX can effectively detect them in real-time. SPHINX incrementally builds and updates flow graphs with succinct metadata for each network flow and uses both deterministic and probabilistic checks to identify deviant behavior. Our evaluation shows that SPHINX imposes minimal overheads.

### Acknowledgements

We thank our shepherd, Guofei Gu, and the anonymous reviewers for their valuable comments. We are also grateful to Anil Vishnoi, Dhruv Sharma, and Vinod Ganapathy for their feedback on an earlier draft of the paper.

### References

[1] ARP poisoning attack, http://goo.gl/p4AVhf.
[2] Cbench, http://www.openflowhub.org/display/floodlightcontroller/Cbench+(New).
[3] CRATE datasets, ftp://download.iwlab.foi.se/dataset.
[4] Data Set for IMC 2010 Data Center Measurement, http://pages.cs.wisc.edu/~tbenson/IMC10 Data.html.
[5] Dynamic ARP Inspection, http://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst6500/ios/12-2SX/configuration/guide/book/dynarp.html.
[6] Fake topology attack, http://goo.gl/zRG8bz.
[7] LBNL/ICSI Enterprise Tracing Project, http://www.icir.org/enterprise-tracing/.
[8] Maestro, https://code.google.com/p/maestro-platform/.
[9] Mausezahn, http://www.perihel.at/sec/mz/.
[10] Mininet, http://mininet.org/.
[11] Netty, http://netty.io/.
[12] Open DOVE, https://wiki.opendaylight.org/view/Open_DOVE:Main.
[13] Open vSwitch, http://openvswitch.org/.
[14] OpenDaylight, http://www.opendaylight.org/.
[15] OpenFlow switch specification, http://openflow.org/documents/openflow-spec-v1.1.0.pdf.
[16] POX, http://www.noxrepo.org/pox/about-pox/.
[17] Project Floodlight, http://www.projectfloodlight.org/floodlight/.
[18] Tcpreplay, http://tcpreplay.synfin.net/.
[19] VXLAN: A Framework for Overlaying Virtualized Layer 2 Networks over Layer 3 Networks, http://tools.ietf.org/html/draft-mahalingam-dutt-dcops-vxlan-05.
[20] E. Al-Shaer and S. Al-Haj, “FlowChecker: Configuration Analysis and Verification of Federated OpenFlow Infrastructures,” in SafeConfig’10.
[21] E. Al-Shaer, W. Marrero, A. El-Atawy, and K. Elbadawi, “Network Configuration in A Box: Towards End-to-End Verification of Network Reachability and Security,” in ICNP’09.
[22] M. Canini, D. Venzano, P. Peresini, D. Kostic, and J. Rexford, “A NICE Way to Test OpenFlow Applications,” in NSDI’12.
[23] S. Chowdhury, M. Bari, R. Ahmed, and R. Boutaba, “PayLess: A Low Cost Network Monitoring Framework for Software Defined Networks,” in IEEE NOMS’14.
[24] N. Feamster and H. Balakrishnan, “Detecting BGP Configuration Faults with Static Analysis,” in NSDI’05.
[25] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford, A. Story, and D. Walker, “Frenetic: A Network Programming Language,” in ICFP’11.
[26] A. Guha, M. Reitblatt, and N. Foster, “Machine-Verified Network Controllers,” in PLDI’13.
[27] S. Hong, L. Xu, H. Wang, and G. Gu, “Poisoning Network Visibility in Software-Defined Networks: New Attacks and Countermeasures,” in NDSS’15.
[28] P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown, and S. Whyte, “Real Time Network Policy Checking Using Header Space Analysis,” in NSDI’13.
[29] P. Kazemian, G. Varghese, and N. McKeown, “Header Space Analysis: Static Checking for Networks,” in NSDI’12.
[30] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey, “VeriFlow: Verifying Network-wide Invariants in Real Time,” in NSDI’13.
[31] R. Kloti, “OpenFlow: A Security Analysis,” Master’s thesis, ETH, Zurich, 2012.
[32] D. Kreutz, F. M. Ramos, and P. Verissimo, “Towards Secure and Dependable Software-Defined Networks,” in HotSDN’13.
[33] LBNL, “arpwatch,” http://ee.lbl.gov/.
[34] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. B. Godfrey, and S. T. King, “Debugging the Data Plane with Anteater,” in SIGCOMM’11.
[35] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford, S. Shenker, and J. Turner, “OpenFlow: Enabling Innovation in Campus Networks,” SIGCOMM Comput. Commun. Rev., April 2008.
[36] C. Monsanto, N. Foster, R. Harrison, and D. Walker, “A Compiler and Run-time System for Network Programming Languages,” in POPL’12.
[37] S. Natarajan, X. Huang, and T. Wolf, “Efficient Conflict Detection in Flow-Based Virtualized Networks,” ICNC’12.
[38] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu, “A Security Enforcement Kernel for OpenFlow Networks,” in HotSDN’12.
[39] J. Rasley, B. Stephens, C. Dixon, E. Rozner, W. Felter, K. Agarwal, J. Carter, and R. Fonseca, “Planck: Millisecond-scale Monitoring and Control for Commodity Networks,” in SIGCOMM’14.
[40] G. P. Reyes, “Security assessment on a VXLAN-based network,” Master’s thesis, University of Amsterdam, Amsterdam, 2014.
[41] S. Shin, P. Porras, V. Yegneswaran, M. Fong, G. Gu, and M. Tyson, “FRESCO: Modular Composable Security Services for Software-Defined Networks,” in NDSS’13.
[42] S. Shin, V. Yegneswaran, P. Porras, and G. Gu, “AVANT-GUARD: Scalable and Vigilant Switch Flow Management in Software-Defined Networks,” in CCS’13.
[43] A. Voellmy and P. Hudak, “Nettle: Taking the Sting out of Programming Network Routers,” in PADL’11.
[44] G. G. Xie, J. Zhan, D. A. Maltz, H. Zhang, A. Greenberg, G. Hjalmtysson, and J. Rexford, “On Static Reachability Analysis of IP Networks,” in INFOCOM’05.