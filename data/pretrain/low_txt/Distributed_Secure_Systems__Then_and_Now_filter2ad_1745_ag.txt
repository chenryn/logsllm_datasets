### Number of Need-to-Know Compartments and Security Partitions

The system supports a limited number of need-to-know compartments. However, the number of different security partitions can far exceed the number of available physical hosts. Even when the number of distinct security partitions is small, the demand for resources within each partition can vary over time. Additionally, some users may prefer to use personal workstations for their activities across multiple security partitions. These scenarios necessitate mechanisms for reallocating host machines to different security partitions.

### Reallocating Host Machines with Untrusted Hosts

For untrusted hosts, reallocation can only be achieved through temporal separation, which, in its simplest form, involves periods processing. This process requires manual intervention to exchange all demountable storage and reinitialize all fixed storage to remove any trace of information from the old security partition before the machine can be brought up at a new level, either "clean" or reloaded with the suspended state of a previous activation at that level.

Manual periods processing demands strict administrative controls and is both slow and expensive. Therefore, we propose mechanisms to automate this process, making it both rapid and secure. These mechanisms include one that loads the encryption key of a new security partition into the host's Trusted Network Interface Unit (TNIU) and another that provides temporal separation for different uses of the host machine.

### System State and Storage Management

The system state of a host machine is contained in its writable storage, including CPU registers, RAM, and disks. In a Unix system, disks provide swap space and contain the local file system. Except for the file system, all local storage used for temporary purposes can be erased and reinitialized when the host changes security partitions. This is achieved by causing the host to boot-load a trusted stand-alone purge program from ROM on power-up or on command from its TNIU. This program systematically clears and reinitializes all temporary storage available to the host processor.

Unlike temporary storage, the local file system cannot simply be erased when the host changes security partitions; it must be retained (inaccessibly) for later activations of the host in the same partition. Since Unix United provides convenient access to remote files, this requirement can be met by holding files remotely, either in file servers dedicated to particular security partitions or in a secure file store.

Operating host machines without a local file store is inefficient. Thus, the purge program creates a local file system on the host's disk and initializes it to contain standard utility programs. (These can be obtained from a local read-only floppy disk or from a "boot server" accessed over the LAN.) Each reference to an apparently local file is intercepted by a local file relocation process added to the Newcastle Connection. This process checks if the requested file is already present in the local file system. If it is, the access proceeds normally. If not, the relocation process first obtains a local copy of the file from the machine that maintains the permanent version of the host's file system for the security partition concerned.

### Automated Security Partition Switching

The complete scenario for automatically changing the security partition in which a host operates is as follows: A user at a terminal attached to a Trusted Terminal Interface Unit (TTIU) is authenticated and asked for the security partition in which they wish to work. If the partition is within the user's clearance, a signal is sent to the TNIU of a vacant host machine (or the user's personal workstation) instructing it to switch to the indicated security partition. This signal is protected against forgery or spoofing using techniques employed between TNIUs. Upon receipt of the signal, the host's TNIU loads the appropriate encryption key, initiates the purging and reinitialization of the host machine, and informs the host's local file relocation process of the identity of the new security partition.

### Distributed System and Security Mechanisms

We have described a distributed system that provides a limited but useful form of multilevel secure operation. Four distinct methods for achieving separation (physical, temporal, cryptographical, and logical) have been illustrated. When used judiciously, these methods can provide security without inefficiency and with a limited number of trusted mechanisms. Our trusted mechanisms are relatively simple and within the current state of the art. Indeed, several of them have been proposed (and some implemented) by others, though usually as standalone systems. A more extensive treatment of the topics covered in this article is available as a technical report [10], which describes our mechanisms in more detail, relates them to their precursors, and discusses some enhancements to the basic system (such as the inclusion of downgraders or guards and support for multilevel objects). Readers who wish to learn more about issues and techniques relating to computer security should consult the excellent book by D. E. Denning [8].

### Project and Sponsorship

A project to develop an implementation of the system described here is being sponsored by the Royal Signals and Radar Establishment (RSRE) of the UK Ministry of Defence and is being carried out by System Designers Ltd. in conjunction with the Microelectronics Applications Research Institute (MARI) and the Computing Laboratory of the University of Newcastle upon Tyne. The first stage of this project will result in the delivery of a prototype to RSRE in mid-1983. The security mechanisms of the prototype will be provided by ordinary user processes in a standard Unix United system. While this will not be secure, it will allow the operation of the various mechanisms to be studied in practice, enable the overall performance of the system to be evaluated, and, most importantly, permit the impact of a mechanically enforced security policy to be observed in a realistic environment. If this stage is judged a success, a prototype implementation of the real system will follow. We hope to report on the progress of this project and, in due course, on how well it achieves its security, usability, and performance goals.

### Acknowledgments

This research was sponsored by the Royal Signals and Radar Establishment, Malvern, England. We appreciate the enthusiastic encouragement of Derek Barnes of RSRE and the stimulation of our many colleagues at Newcastle, particularly those involved with Unix United. The Newcastle Connection, a commercial product licensed by MARI, is the creation of Lindsay Marshall and Dave Brownbridge, while the remote procedure call mechanism is the work of Fabio Panzieri and Santosh Shrivastava. Two anonymous referees directed our attention to several technical problems and led us to make several improvements. The final form of this article benefited considerably from the careful reading, criticism, and advice of Pete Tasker of the Mitre Corporation. Sarah Rolph, also of the Mitre Corporation, suggested many improvements in the presentation of this material.

### References

1. C. E. Landwehr, “A Survey of Formal Models for Computer Security,” Computing Surveys, Vol. 13, No. 3, Sept. 1981, pp. 247-278.
2. M. H. Cheheyl et al., “Verifying Security,” Computing Surveys, Vol. 13, No. 3, Sept. 1981, pp. 279-339.
3. J. M. Rushby, “The Design and Verification of Secure Systems,” Proc. Eighth ACM Symp. Operating System Principles, Dec. 1981, pp. 12-21, (ACM Operating Systems Review, Vol. 15, No. 5).
4. G. Grossman, “A Practical Executive for Secure Communications,” Proc. 1982 Symp. Security and Privacy, IEEE Computer Society, Apr. 1982, pp. 144-155.
5. D. Lomet et al., “A Study of Provably Secure Operating Systems,” research report RC9239, IBM T. J. Watson Research Center, Feb. 1982.
6. D. R. Brownbridge, L. F. Marshall, and B. Randell, “The Newcastle Connection, or UNIXes of the World Unite!” Software – Practice and Experience, Vol. 12, Wiley Interscience, Dec. 1982, pp. 1147-1162.
7. S. K. Shrivastava and F. Panzieri, “The Design of a Reliable Remote Procedure Call Mechanism,” IEEE Trans. Computers, Vol. C-31, No. 7, July 1982, pp. 692-697.
8. D. E. Denning, Cryptography and Data Security, Addison-Wesley, Reading, Mass., 1982.
9. R. M. Needham and M. Schroeder, “Using Encryption for Authentication in Large Networks of Computers,” Comm. ACM, Vol. 21, No. 12, Dec. 1978, pp. 993-999.
10. J. M. Rushby and B. Randell, “A Distributed Secure System,” tech. report 182, Computing Laboratory, University of Newcastle upon Tyne, England, Feb. 1983.

### Author Biographies

**John M. Rushby** is a computer scientist with the Computer Science Laboratory of SRI International. His research interests include the design, implementation, and verification of secure systems and other computer systems that must satisfy stringent requirements. From 1979 to 1982, he was a research associate with the Computing Laboratory of the University of Newcastle upon Tyne, England, and from 1975 to 1978, he was a lecturer in the Department of Computer Science at Manchester University, England. Rushby received BSc and PhD degrees in Computer Science from the University of Newcastle upon Tyne in 1971 and 1977, respectively.

**Brian Randell** is a professor of computing science at the University of Newcastle upon Tyne, where in 1971 he initiated a program of research on computing systems that now encompasses several major projects. From 1964 to 1969, he was with IBM, primarily at the IBM Research Center in the US, working on operating systems, the design of ultra-high-speed computers, and system design methodology. Before that, he worked for the English Electric Company, where he led a team that implemented a number of compilers, including the Whetstone KDF9 Algol compiler. Randell graduated from Imperial College, London, in 1957 with a degree in mathematics.

### Subsequent Developments

For several years after the publication of the DSS paper, we had little knowledge of how RSRE's work was progressing. However, by around 1985, the RSRE DSS prototype had been completed and partially declassified, and we had been brought back into the project.