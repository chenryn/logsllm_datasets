### Frequent Deployment and Automatic Calibration of Performance Models

**Model Parameterization:**
Resource demand is a critical factor among model parameters that must be accurately specified. The precision of resource demand estimation significantly impacts the performance of performance models. Traditionally, regression-based algorithms have been used for resource demand estimation, primarily based on utilization and response times [8,11]. With the advent of machine learning, studies have also focused on estimating resource demands (e.g., CPU utilization) to predict time series data [3] and to select the optimal approaches for estimation from a variety of existing methods [6].

**Parametric Dependencies for Performance Models:**
Accurate resource demand estimation requires identifying appropriate input parameters, their dependencies, and their impact on different elements of the performance model [4]. In the context of DevOps, parameterizing performance models becomes more challenging due to frequent releases and new features. To address this, some works have adopted reverse engineering techniques, including static and dynamic analysis of source code [7,9]. Additionally, [5] proposes a machine learning-based feature selection approach to represent parametric dependencies from monitoring data. For microservice or serverless-based architectures, incrementally detecting and updating parametric dependencies in each DevOps cycle is essential, considering the complexity of dependency analysis.

### Methodology

**System Under Test (SUT):**
For learning performance models, we selected Sock Shop, a microservices-based application widely used as a benchmark and case study for cloud service performance and quality [10,13]. Sock Shop simulates an e-commerce website where users can log in, view, and buy items. The application is built using various language frameworks, including Java Spring, GoLang, and Node.js, with MongoDB and MySQL for data storage. It provides a testbed for microservices and cloud orchestration, with services packaged in Docker containers and communication via REST over HTTP.

**TOSCA Modelling:**
To generate architectural performance models, we propose using TOSCA (Topology and Orchestration Specification for Cloud Applications) with performance-related specifications. These specifications can be transformed into layered queueing networks for performance prediction. TOSCA is an OASIS standard language that standardizes the specification of cloud applications, enabling deployment and management. By learning from monitoring data, components and topological structures of the application can be extracted. TOSCA allows the specification of an application in a service template, where nodes representing application components are modeled within node templates, and edges between components are extracted by analyzing network traffic.

The Sock Shop application was modeled using TOSCA based on the RADON modeling profile, which extends TOSCA to describe microservice and serverless orchestration. Figure 1 shows the representation of Sock Shop with the RADON type hierarchy. The client node represents the closed workload for the application, and the three target services are hosted on respective containers. The 'routed front' relationship indicates that client requests are sent to the frontend service, which then routes them to the cart and catalogue services based on the requested endpoints.

**Layered Queueing Network (LQN) Models:**
After specifying the application with TOSCA, the RADON decomposition tool is used to generate LQN models. This tool parses YAML files and automatically transforms the topology graph into LQN models. The generated LQN model, shown in Figure 2, includes a task client simulating concurrent users making requests to different services. Each task in the LQN model represents a specific microservice, with entries defined as different classes of workload based on endpoints and HTTP methods. The mean service demand for each activity is declared, and all parameters are specified in TOSCA properties within node and relationship templates. Solving LQN models with simulation or analytical solvers enables performance prediction.

**Learning Parametric Dependencies from Code Analysis:**
Static code analysis allows checking, debugging, and obtaining information about programs without actual execution. In DevOps practices, after committing new code, source code analysis can capture performance-related changes, such as adding new functions or modifying methods. TOSCA models can be updated based on these detected changes, ensuring a more accurate specification in each iteration. Continuous TOSCA model updates keep the architectural performance model consistent with the latest development. Incremental detection and analysis of alternatives should be implemented to respond to new changes in the DevOps context, rather than analyzing and modeling the entire system every iteration.

Parametric dependencies can also optimize resource demand estimation. By tracing data and control flows generated from source code and execution, the relationships between input parameters and corresponding methods can be captured, including branches, loops, and numbers of service invocations. Resource demand can then be formulated with parametric dependencies as additional features to revise estimated values, which can be fed into TOSCA parameterization.

### Conclusion and Future Work

In this paper, we propose an approach to automatically learn performance models, addressing the research objectives. We use TOSCA modeling to generate architectural models from monitoring data and transform these into LQN models for simulation and prediction. To enrich and update performance models in response to new changes, we present a method for learning parametric dependencies, which can incrementally detect changes and calibrate resource demand estimation.

Future work will focus on integrating performance models into the DevOps pipeline and implementing a framework for automatic performance prediction model updates.

### References
1. Binz, T., Breitenbücher, U., Kopp, O., Leymann, F.: TOSCA: Portable Automated Deployment and Management of Cloud Applications. In: Bouguettaya, A., Sheng, Q., Daniel, F. (eds.) Advanced Web Services, pp. 527–549. Springer, New York (2014). https://doi.org/10.1007/978-1-4614-7535-4_22
2. Brosig, F., Kounev, S., Krogmann, K.: Automated Extraction of Palladio Component Models from Running Enterprise Java Applications. In: Proceedings of the Fourth International ICST Conference on Performance Evaluation Methodologies and Tools, pp. 1–10 (2009)
3. Duggan, M., Mason, K., Duggan, J., Howley, E., Barrett, E.: Predicting Host CPU Utilization in Cloud Computing Using Recurrent Neural Networks. In: 2017 12th International Conference for Internet Technology and Secured Transactions (ICITST), pp. 67–72 (2017)
4. Eismann, S., Walter, J., von Kistowski, J., Kounev, S.: Modeling of Parametric Dependencies for Performance Prediction of Component-Based Software Systems at Run-Time. In: 2018 IEEE International Conference on Software Architecture (ICSA), pp. 135–13509 (2018)
5. Grohmann, J., Eismann, S., Elflein, S., Kistowski, J.V., Kounev, S., Mazkatli, M.: Detecting Parametric Dependencies for Performance Models Using Feature Selection Techniques. In: 2019 IEEE 27th International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems (MASCOTS), pp. 309–322 (2019)
6. Grohmann, J., Herbst, N., Spinner, S., Kounev, S.: Using Machine Learning for Recommending Service Demand Estimation Approaches—Position Paper. In: CLOSER, pp. 473–480 (2018)
7. Kappler, T., Koziolek, H., Krogmann, K., Reussner, R.: Towards Automatic Construction of Reusable Prediction Models for Component-Based Performance Engineering. Software Engineering, 2008 (2008)
8. Kraft, S., Pacheco-Sanchez, S., Casale, G., Dawson, S.: Estimating Service Resource Consumption from Response Time Measurements. In: Proceedings of the Fourth International ICST Conference on Performance Evaluation Methodologies and Tools, pp. 1–10 (2009)
9. Krogmann, K., Kuperberg, M., Reussner, R.: Using Genetic Search for Reverse Engineering of Parametric Behavior Models for Performance Prediction. IEEE Trans. Software Eng. 36, 865–877 (2010)
10. Nguyen, C., Mehta, A., Klein, C., Elmroth, E.: Why Cloud Applications Are Not Ready for the Edge (Yet). In: Proceedings of the 4th ACM/IEEE Symposium on Edge Computing, pp. 250–263 (2019)
11. Pérez, J.F., Pacheco-Sanchez, S., Casale, G.: An Offline Demand Estimation Method for Multi-Threaded Applications. In: 2013 IEEE 21st International Symposium on Modelling, Analysis and Simulation of Computer and Telecommunication Systems, pp. 21–30. IEEE (2013)
12. Petriu, D.C., Shen, H.: Applying the UML Performance Profile: Graph Grammar-Based Derivation of LQN Models from UML Specifications. In: Field, T., Harrison, P.G., Bradley, J., Harder, U. (eds.) TOOLS 2002. LNCS, vol. 2324, pp. 159–177. Springer, Heidelberg (2002). https://doi.org/10.1007/3-540-46029-2_10
13. Rahman, J., Lama, P.: Predicting the End-to-End Tail Latency of Containerized Microservices in the Cloud. In: 2019 IEEE International Conference on Cloud Engineering (IC2E), pp. 200–210. IEEE (2019)

---

### Blockchain-Based Business Processes: A Solidity-to-CPN Formal Verification Approach

**Authors:**
- Ikram Garfatta¹²
- Kaïs Klai²
- Mahamed Graïet³⁴
- Walid Gaaloul⁵

¹ University of Tunis El Manar, National Engineering School of Tunis, OASIS, Tunis, Tunisia  
² University Sorbonne Paris North, LIPN UMR CNRS 7030, Villetaneuse, France  
³ Higher Institute for Computer Science and Mathematics, University of Monastir, Monastir, Tunisia  
⁴ National School for Statistics and Information Analysis, Rennes, France  
⁵ Institut Mines-Télécom, Télécom SudParis, UMR 5157, SAMOVAR, Évry, France

**Abstract:**
Blockchain technology has gained significant interest across various domains due to its expanding applications. While it attracts many investors, it also draws malicious users who attack different Blockchain platforms. Ensuring the correctness of smart contracts, the core of Blockchain applications, is therefore crucial. Existing verification approaches often focus on specific vulnerabilities and rarely support the verification of domain-specific properties.

In this paper, we propose translating Solidity smart contracts into Coloured Petri Nets (CPNs) and investigate the capability of CPN Tools to verify Computation Tree Logic (CTL) properties.

**Keywords:**
- Blockchain
- Formal Verification
- Smart Contract
- Solidity
- Coloured Petri Nets
- CTL Properties

**Introduction:**
Over the past two decades, significant advances in Blockchain technology have enabled its expansion into various application domains, including Business Process Management (BPM). Blockchain platforms can provide reliable execution of business processes (BPs) even in trustless networks, thanks to smart contracts. In a BPM context, smart contracts define business collaborations and inter-organizational BPs. These contracts act as autonomous software agents, enforcing management rules on transactions. Stored and executed on the Blockchain, they inherit its characteristics, particularly immutability. This feature, however, can be a weakness, as deployed smart contracts cannot be altered or corrected, making pre-deployment verification essential.

The main objective of this thesis is to develop an approach for constructing correct blockchain-based BPs. This paper presents our progress towards the first milestone: verifying smart contracts in a general context. We focus on Ethereum smart contracts, written in Solidity, as it is the most popular language used by Ethereum. Our contribution is a formal verification approach based on CPNs for Solidity smart contracts.

Existing studies on the formal verification of smart contracts follow two main streams: theorem proving and symbolic model checking. Theorem proving requires user expertise and manual intervention, while symbolic model checking often uses under-approximation, leading to potential false negatives or positives. Most studies target specific vulnerabilities, with few allowing customizable properties, and none focusing on data-related properties. Many approaches operate on EVM bytecode, resulting in the loss of contextual information and limiting the range of verifiable properties.

To overcome these limitations, we propose an algorithm for translating Solidity smart contracts into hierarchical CPN models, over which CTL properties can be verified. This work can be integrated as an extension layer into existing studies that translate BP models into smart contracts, such as those generating Solidity code from BPMN models, to verify their output.