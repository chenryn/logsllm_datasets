### Impact of Clock Cycle Reduction on Error Behavior

Reducing the relative clock cycle from 100% to 75% has only a minor impact on error behavior. However, running the system at twice the original frequency (50% clock cycle time) significantly increases the FIT (Failure in Time) rate.

### Experimental Results: Register File Access Latency

The second set of experiments aimed to find the optimal operation frequency given that the number of register file access pipeline stages varies with the frequency. As we reduce the access latency, the number of stages in the critical loops decreases, which increases the processor's performance. However, this reduction also introduces additional replays due to register read/write errors, potentially increasing the execution cycles.

We performed simulations for three configurations:
1. Base architecture
2. Base architecture with 4-cycle register file access
3. Base architecture with 8-cycle register file access

#### Simulation Results

- **Reduction to 1 Cycle from 2 Cycles:**
  - ECC: 7.4% reduction in execution cycles
  - RB: 6.5% reduction
  - RE: 6.8% reduction
  - RP: 7.5% reduction

- **4-Cycle Latency:**
  - The results are summarized in Figure 13. Reducing the latency to 50% (i.e., to 2 cycles) has a positive effect for all recovery schemes. Further reduction beyond this point reduces the advantages seen by RB and RE schemes, as the number of rollbacks increases due to unrecoverable errors. In contrast, RP and ECC can recover from most errors, achieving their best performance at an access latency of 1 cycle. Specifically, ECC and RP reduce the number of execution cycles by 8.7% and 8.9%, respectively.

- **8-Cycle Latency:**
  - The results are presented in Figure 14. As the latency is reduced, performance generally improves. However, when the access latency is set to 1 cycle, all techniques significantly increase the execution cycles:
    - ECC: 26 times
    - RB: 77 times
    - RE: 69 times
    - RP: 24 times

There are two reasons for this:
1. Even if all errors can be recovered, the processor spends most of its time replaying instructions due to register read errors.
2. Many times, the errors cannot be recovered, leading to significant overhead from rollbacks. This is the only configuration in our simulations where the probability of a rollback is higher than in a base architecture with full voltage swing. Overall, RP gives the best result by reducing the execution cycles by 11.5% when the register file access latency is reduced to 2 cycles.

### Related Work

Fault-tolerant computing has been extensively studied in high-radiation environments and outer space [17, 26]. Techniques exist to study potential errors in the pre-silicon stage [2] and after fabrication [14]. Recently, designing computer systems for resiliency [12, 18, 19, 21, 27, 28] has gained significance due to higher integration densities, lower voltages, and faster clock frequencies. These techniques aim to increase the reliability of the processor with minimal performance impact.

- **RSE Framework:** Nakka [13] proposed the RSE framework, which provides reliability and security support.
- **SRAS:** Bower [3] introduced SRAS, which masks hard faults in microprocessor array structures. Both approaches have hardware and performance overheads.

Our work, on the other hand, aims to increase performance without affecting overall reliability.

Recent trends in computer architecture include designing processors that can adapt to circuit-level phenomena, such as Razor [4], thermal control schemes [24], and techniques for reducing inductive noise [16] and voltage variation [9]. Among these, Razor [5] is the closest to our work. Razor reduces the supply voltage in each pipeline stage to achieve lower energy consumption, but it negatively impacts performance. Our goal is to improve energy-performance, while Razor focuses on energy efficiency with a negative performance impact. Additionally, the specific technique we apply to the architecture is different.

### Conclusions

In this paper, we presented a method for reducing the cycle time in high-performance microprocessors. We established a model for estimating the probability of a bit error when the cycle time of a register is reduced. When the cycle time is reduced, a circuit node experiences a reduced voltage swing, increasing the probability of an error due to noise and other external factors. We then presented novel architectural techniques to increase the robustness of the register file. Our goal is to allow the circuit designer to push the frequency higher and recover from errors using these techniques.

- **Error Detection and Correction (EDC):** We developed a system that pushes EDC logic out of the critical path of the processor.
- **Redundancy-Based Schemes:** We showed that a large fraction of physical registers are underutilized during certain periods of execution in superscalar processors. These schemes use underutilized registers to copy the values of active registers.
- **ECC and Replication-Based Scheme:** We discussed an ECC based on Hamming codes and a replication-based scheme that uses a replica register file to store copies of active register values and restore the state in case of errors.

Experimental results show that using the proposed techniques, the frequency of the register file can be reduced by up to 80% with a 0.12% penalty in the number of execution cycles. Additionally, the number of pipeline stages in a processor with 4-cycle register file access can be reduced by 75%, resulting in an 8.9% reduction in total execution cycles.

### References

[1]. Borch, E., et al. Loose Loops Sink Chips. in International Conference on High Performance Computer Architecture (HPCA-02). Feb. 2002. Boston, MA.
[2]. Bose, P. Ensuring dependable processor performance: an experience report on pre-silicon performance validation. in Intl Conference on Dependable Systems and Networks, July 2000.
[3]. Bower Fred., et al. Tolerating Hard Faults in Microprocessor Array Structures. in International Conference on Dependable Systems and Networks (DSN). June, 2004. Florance, Italy.
[4]. Burger, D. and T. Austin, The SimpleScalar Tool Set, Version 2.0. 1997, Univ. of Wisconsin-Madison, Comp. Sci. Dept.
[5]. Ernst, D., et al. Razor: A Low-Power Pipeline Based on Circuit-Level Timing Speculation. in International Symposium on Microarchitecture. Dec. 2003.
[6]. Hamming, R.W., Error detecting and correcting codes. Bell Sys. Tech. Journal, 1950. 29: p. 147-160.
[7]. Hartstein, A. and T.R. Puzak. Optimum Pipeline Depth for a Microprocessor. in International Symposium on Computer Architecture. May 2002. Anchorage / AK.
[8]. Hinton, G., et al., The microarchitecture of the Pentium 4 processor. 2001.
[9]. Joseph, R., D. Brooks, and M. Martonosi. Control Techniques to Eliminate Voltage Emergencies in High Performance Processors. in International Symposium on High Performance Computer Architecture. Feb. 2003.
[10]. Kessler, R., The Alpha 21264 Microprocessor. IEEE Micro, Mar/Apr 1999. 19(2).
[11]. Mallik, A. and G. Memik. A Case for Clumsy Packet Processors. in International Symposium on Microarchitecture. Dec. 2004. Portland, OR.
[12]. Mukherjee, S.S., M. Kontz, and S.K. Reinhardt. Detailed Design and Evaluation of Redundant Multithreading Alternatives. in International Symposium on Computer Architecture (ISCA). May 2002.
[13]. Nakka N., et al. An Architectural Framework for Providing Reliability and Security Support. in International Conf. on Dependable Systems and Networks (DSN). June 2004. Florence, Italy.
[14]. Paschalis, A., et al. Deterministic Software-Based Self-Testing of Embedded Processor Core. in Design Automation and Test in Europe (DATE). March 2001.
[15]. Phelan, R., Addressing Soft Errors in ARM Core-based SoC. Dec. 2003, ARM Ltd.
[16]. Powell, M. and T.N. Vijaykumar. Exploiting resonant behavior to reduce inductive noise. in 31st Annual International Symposium on Computer Architecture (ISCA). June 2004. Munich, Germany.
[17]. Prager, K., et al. A fault tolerant signal processing computer. in International Conference on Dependable Systems and Networks (DSN). June 2000.
[18]. Ray, J., J. Hoe, and B. Falsafi. Dual Use of Superscalar Datapath in International Symposium on Microarchitecture (MICRO). Dec. 2001.
[19]. Reinhardt, S.K. and S.S. Mukherjee. Transient Fault Detection via Simultaneous Multithreading. in International Symposium on Computer Architecture (ISCA). June 2000.
[20]. Reinhardt, S.K. and S.S. Mukherjee. Transient Fault Detection via Simultaneous Multithreading. in 27th Annual International Symposium on Computer Architecture. June 2000.
[21]. Sato, T. and I. Arita. Tolerating Transient Faults through an Instruction Reissue Mechanism. in International Conference on Parallel and Distributed Computing Systems (PDCS). Aug. 2001.
[22]. Sherwood, T., E. Perelman, and B. Calder. Basic Block Distribution Analysis to Find Periodic Behavior and Simulation Points in Applications. in International Conference on Parallel Architectures and Compilation Techniques (PACT 2001). Sep. 2001. Barcelona, Spain.
[23]. Shivakumar, P., et al. Modeling the Effect of Technology Trends on the Soft Error Rate of Combinational Logic. in International Conference on Dependable Systems and Networks (DSN). June 2002.
[24]. Skadron, K., M. Stan, and T. Abdelzaher. Control-theoretic techniques and thermal-RC modeling for accurate and localized dynamic thermal management. in International Symposium on High-Performance Computer Architecture. Feb. 2002.
[25]. Tremblay, M. and Y. Tamir. Support for Fault Tolerance in VLSI Processors. in International Symposium on Circuits and Systems. May 1989. Portland, Oregon.
[26]. Turmon, M., R. Granat, and D. Katz. Software-implemented fault detection for high-performance space applications. in International Conference on Dependable Systems and Networks (DSN). June 2000.
[27]. Vijaykumar, T.N., I. Pomeranz, and K. Cheng. Transient-Fault Recovery via Simultaneous Multithreading. in International Symposium on Computer Architecture (ISCA). May 2002.
[28]. Zhang W., G.S., Kandemir M., Sivasubramaniam A. ICR: In-Cache Replication for Enhancing Data Cache Reliability. in Dependable Computing and Communication Symposium (DSN-03). 2003.

Proceedings of the 2005 International Conference on Dependable Systems and Networks (DSN’05)  
0-7695-2282-3/05 $20.00 © 2005 IEEE